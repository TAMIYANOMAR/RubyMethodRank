{" Fog RiakCS Utils riakcs_uri":{"type":"method","name":"riakcs_uri","children":[],"call":[]}," Fog RiakCS Utils configure_uri_options":{"type":"method","name":"configure_uri_options","children":[],"call":["options [] "]}," Fog RiakCS UserUtils update_mock_user":{"type":"method","name":"update_mock_user","children":[],"call":["response status= ","Excon Response  new tap ","Excon Response  new ","response body= "," data [] "," data "," data [] []= "," rand to_s "," rand ","user [] ","response user [] = "]}," Fog RiakCS UserUtils update_riakcs_user":{"type":"method","name":"update_riakcs_user","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body empty? ! ","response body empty? ","@s3_connection put_object ","Fog JSON  encode ","@s3_connection put_object  body= ","@s3_connection put_object  body ","@s3_connection put_object  body empty? ! ","@s3_connection put_object  body empty? "]}," Fog RiakCS Usage Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Storage  new ","options [] "," configure_uri_options "]}," Fog RiakCS Usage Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," riakcs_uri "," class data "," class "]}," Fog RiakCS Usage Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," riakcs_uri "," class data "," class "]}," Fog RiakCS Usage Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_uri_options "]}," Fog RiakCS Usage Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog RiakCS Usage Mock get_usage":{"type":"method","name":"get_usage","children":[],"call":["response body= ","response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog RiakCS Usage Real get_usage":{"type":"method","name":"get_usage","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body empty? ! ","response body empty? ","@connection get_object ","(str \"usage\") join "," request_uri ","@connection get_object  body= ","@connection get_object  body ","@connection get_object  body empty? ! ","@connection get_object  body empty? "]}," Fog RiakCS Usage Utils request_uri":{"type":"method","name":"request_uri","children":[],"call":["(lvar :access_key_id) join "," sanitize_and_convert_time "," format_and_types_to_path ","Time  now utc ","Time  now ","options [] ","Time  now utc - "]}," Fog RiakCS Usage Utils format_and_types_to_path":{"type":"method","name":"format_and_types_to_path","children":[],"call":["(lvar :type_characters) flatten compact join ","(lvar :type_characters) flatten compact ","(lvar :type_characters) flatten ","(send\n  (lvar :types) :map) compact ","TYPES_TO_STRING  [] ","types map ","format to_s split first ","format to_s split ","format to_s ","(lvar :(send\n  (lvar :types) :map) compact ) flatten compact join ","(lvar :(send\n  (lvar :types) :map) compact ) flatten compact ","(lvar :(send\n  (lvar :types) :map) compact ) flatten "]}," Fog RiakCS Usage Utils sanitize_and_convert_time":{"type":"method","name":"sanitize_and_convert_time","children":[],"call":["time utc iso8601 gsub ","time utc iso8601 ","time utc "]}," Fog RiakCS Provisioning Real request":{"type":"method","name":"request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body empty? ! ","response body empty? "," raise ","Fog RiakCS Provisioning  const_get new ","Fog RiakCS Provisioning  const_get ","match [] ","error message match ","error message ","@raw_connection request ","params merge ","params [] ","@raw_connection request  body= ","@raw_connection request  body ","@raw_connection request  body empty? ! ","@raw_connection request  body empty? ","error message match  [] ","error message error message match  "]}," Fog RiakCS Provisioning Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Storage  new ","Fog XML Connection  new "," riakcs_uri ","options [] "," configure_uri_options "]}," Fog RiakCS Provisioning Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," riakcs_uri "," class data "," class "]}," Fog RiakCS Provisioning Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," riakcs_uri "," class data "," class "]}," Fog RiakCS Provisioning Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_uri_options "]}," Fog RiakCS Provisioning Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog RiakCS Provisioning Mock update_user":{"type":"method","name":"update_user","children":[],"call":[" update_mock_user "]}," Fog RiakCS Provisioning Real update_user":{"type":"method","name":"update_user","children":[],"call":[" update_riakcs_user "]}," Fog RiakCS Provisioning Mock regrant_secret":{"type":"method","name":"regrant_secret","children":[],"call":[" update_mock_user "]}," Fog RiakCS Provisioning Real regrant_secret":{"type":"method","name":"regrant_secret","children":[],"call":[" update_riakcs_user "]}," Fog RiakCS Provisioning Mock list_users":{"type":"method","name":"list_users","children":[],"call":["response body= ","(send\n  (lvar :filtered_data) :map) compact ","value [] ","filtered_data map ","response status= ","Excon Response  new tap ","Excon Response  new "," data ","value [] == ","options [] "," data select ","(send\n  (lvar : data ) :map) compact "," data  map "]}," Fog RiakCS Provisioning Real list_users":{"type":"method","name":"list_users","children":[],"call":["response body= ","decoded flatten ","Fog JSON  decode ","part [] ","parts map "," parse ","response body "," extract_boundary ","response headers [] ","response headers ","@s3_connection get_object ","@s3_connection get_object  body= "," parse  map ","@s3_connection get_object  body "," extract_ extract_boundary  ","@s3_connection get_object  headers [] ","@s3_connection get_object  headers "]}," Fog RiakCS Provisioning Mock get_user":{"type":"method","name":"get_user","children":[],"call":["response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new ","response body= ","user [] "," data [] "," data "," data []  [] "]}," Fog RiakCS Provisioning Real get_user":{"type":"method","name":"get_user","children":[],"call":["response body= ","Fog JSON  decode ","response body ","@s3_connection get_object ","@s3_connection get_object  body= ","@s3_connection get_object  body "]}," Fog RiakCS Provisioning Mock enable_user":{"type":"method","name":"enable_user","children":[],"call":[" update_mock_user "]}," Fog RiakCS Provisioning Real enable_user":{"type":"method","name":"enable_user","children":[],"call":[" update_riakcs_user "]}," Fog RiakCS Provisioning Mock disable_user":{"type":"method","name":"disable_user","children":[],"call":[" update_mock_user "]}," Fog RiakCS Provisioning Real disable_user":{"type":"method","name":"disable_user","children":[],"call":[" update_riakcs_user "]}," Fog RiakCS Provisioning Mock create_user":{"type":"method","name":"create_user","children":[],"call":["response body= "," data [] "," data ","response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new "," data []= "," rand to_s "," rand "," raise "," user_exists? "," invalid_email? "]}," Fog RiakCS Provisioning Mock user_exists?":{"type":"method","name":"user_exists?","children":[],"call":["value [] == ","value [] "," data find "," data "]}," Fog RiakCS Provisioning Mock invalid_email?":{"type":"method","name":"invalid_email?","children":[],"call":["email include? ! ","email include? "]}," Fog RiakCS Provisioning Real create_user":{"type":"method","name":"create_user","children":[],"call":[" raise ","Fog RiakCS Provisioning ServiceUnavailable  new ","Fog RiakCS Provisioning UserAlreadyExists  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","@s3_connection put_object "," request ","options [] ","Fog JSON  encode ","@s3_connection put_object  body= ","@s3_connection put_object  body ","@s3_connection put_object  headers [] ","@s3_connection put_object  headers ","@s3_connection put_object  body empty? ! ","@s3_connection put_object  body empty? "]}," Fog RiakCS MultipartUtils parse_multipart_section":{"type":"method","name":"parse_multipart_section","children":[],"call":["headers to_hash "," parse "," extract_boundary ","headers to_hash [] first ","headers to_hash [] ","headers [] =~ ","headers [] ","headers parse ","md pre_match split each ","md pre_match split ","md pre_match ","md post_match ","part match ","Headers  new ","Headers  new  to_hash "," extract_ extract_boundary  ","Headers  new  to_hash [] first ","Headers  new  to_hash [] ","Headers  new  [] =~ ","Headers  new  [] ","Headers  new  parse ","part match  pre_match split each ","part match  pre_match split ","part match  pre_match ","part match  post_match "]}," Fog RiakCS MultipartUtils inner_boundary_regex":{"type":"method","name":"inner_boundary_regex","children":[],"call":["Regexp  escape "]}," Fog RiakCS MultipartUtils end_boundary_regex":{"type":"method","name":"end_boundary_regex","children":[],"call":["Regexp  escape "]}," Fog RiakCS MultipartUtils extract_boundary":{"type":"method","name":"extract_boundary","children":[],"call":["header_string =~ "]}," Fog RiakCS MultipartUtils parse":{"type":"method","name":"parse","children":[],"call":["(send\n  (send\n    (send\n      (lvar :contents) :split\n      (send nil :inner_boundary_regex\n        (lvar :boundary))) :reject\n    (block-pass\n      (sym :empty?))) :map) compact "," parse_multipart_section ","contents split reject map ","contents split reject ","contents split "," inner_boundary_regex ","data match pre_match ","data match "," end_boundary_regex "]}," Fog RiakCS MultipartUtils Headers parse":{"type":"method","name":"parse","children":[],"call":[" add_field "," class parse "," class "]}," Fog RiakCS MultipartUtils Headers initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_http_header "]}," RiakCS services":{"type":"method","name":"services","children":[],"call":["Fog RiakCS  services "]}," RiakCS []":{"type":"method","name":"[]","children":[],"call":["@@connections [] ","hash []= "," class_for ","Hash  new "]}," RiakCS class_for":{"type":"method","name":"class_for","children":[],"call":[" raise "]}}