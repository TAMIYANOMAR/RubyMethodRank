{" ChunkyPNG load":{"type":"method","name":"load","children":[],"call":[" load_from_memory "," load_from_file ","File  exists? "," load_from_io ","arg respond_to? "]}," ChunkyPNG load_from_memory":{"type":"method","name":"load_from_memory","children":[],"call":[" load_from_io ","StringIO  new "]}," ChunkyPNG load_from_file":{"type":"method","name":"load_from_file","children":[],"call":[" load_from_io ","File  open "]}," ChunkyPNG load_from_io":{"type":"method","name":"load_from_io","children":[],"call":["ChunkyPNG Datastream  read "]}," ChunkyPNG Pixel make_opaque!":{"type":"method","name":"make_opaque!","children":[],"call":[]}," ChunkyPNG Pixel opaque?":{"type":"method","name":"opaque?","children":[],"call":[" alpha == "," alpha "," a == "," a "]}," ChunkyPNG Pixel initialize":{"type":"method","name":"initialize","children":[],"call":["value to_i "]}," ChunkyPNG PixelMatrix to_rgb_pixelstream":{"type":"method","name":"to_rgb_pixelstream","children":[],"call":["stream << "," encode_scanline pack "," encode_scanline ","(send\n  (lvar :line) :map) flatten ","p color to_rgb_array ","p color ","line map "," each_scanline "]}," ChunkyPNG PixelMatrix to_indexed_pixelstream":{"type":"method","name":"to_indexed_pixelstream","children":[],"call":["stream << "," encode_scanline pack "," encode_scanline ","p color index ","p color ","line map "," each_scanline "]}," ChunkyPNG PixelMatrix indexable?":{"type":"method","name":"indexable?","children":[],"call":[" palette indexable? "," palette "]}," ChunkyPNG PixelMatrix palette":{"type":"method","name":"palette","children":[],"call":["ChunkyPNG Palette  from_pixels ","ChunkyPNG Palette  from_pixel_matrix "]}," ChunkyPNG PixelMatrix encode_scanline_up":{"type":"method","name":"encode_scanline_up","children":[],"call":["(const nil :FILTER_UP) + ","previous_bytes [] - ","bytes [] % ","bytes [] ","previous_bytes [] ","(erange\n  (int 0)\n  (send\n    (lvar :bytes) :length)) map ","bytes length "]}," ChunkyPNG PixelMatrix encode_scanline_sub":{"type":"method","name":"encode_scanline_sub","children":[],"call":["(const nil :FILTER_SUB) + + ","(const nil :FILTER_SUB) + ","bytes [] ","(send\n  (send\n    (lvar :bytes) :[]\n    (send\n      (lvar :n) :-\n      (int 3))) :-\n  (send\n    (lvar :bytes) :[]\n    (lvar :n))) % ","bytes [] - ","n - ","(erange\n  (int 3)\n  (send\n    (lvar :bytes) :length)) map ","bytes length "]}," ChunkyPNG PixelMatrix encode_scanline_none":{"type":"method","name":"encode_scanline_none","children":[],"call":["(const nil :FILTER_NONE) + "]}," ChunkyPNG PixelMatrix encode_scanline":{"type":"method","name":"encode_scanline","children":[],"call":[" raise "," encode_scanline_up "," encode_scanline_sub "," encode_scanline_none "]}," ChunkyPNG PixelMatrix verify_length!":{"type":"method","name":"verify_length!","children":[],"call":[" raise ","bytes_count == "," width * * + "," height "," width * * "," width * "," width "]}," ChunkyPNG PixelMatrix decode_scanline_up":{"type":"method","name":"decode_scanline_up","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (send\n    (lvar :previous_bytes) :[]\n    (lvar :i))) % ","b + ","previous_bytes [] ","bytes each_with_index "]}," ChunkyPNG PixelMatrix decode_scanline_sub":{"type":"method","name":"decode_scanline_sub","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (begin\n    (if\n      (send\n        (lvar :i) :>=\n        (int 3))\n      (send\n        (lvar :bytes) :[]\n        (send\n          (lvar :i) :-\n          (int 3)))\n      (int 0)))) % ","b + ","bytes [] ","i - ","i >= ","bytes each_with_index "]}," ChunkyPNG PixelMatrix decode_scanline_none":{"type":"method","name":"decode_scanline_none","children":[],"call":[]}," ChunkyPNG PixelMatrix decode_scanline":{"type":"method","name":"decode_scanline","children":[],"call":[" raise "," decode_scanline_up "," decode_scanline_sub "," decode_scanline_none "]}," ChunkyPNG PixelMatrix decode_colors":{"type":"method","name":"decode_colors","children":[],"call":["ChunkyPNG Color  rgb ","bytes [] ","i * + ","i * ","(erange\n  (int 0)\n  (send nil :width)) map "," width "]}," ChunkyPNG PixelMatrix decode_pixelstream":{"type":"method","name":"decode_pixelstream","children":[],"call":[" raise ","@pixels size != "," width * "," height "," width ","@pixels size ","Pixel  new ","decoded_colors map "," decode_colors "," decode_scanline ","bytes shift ","stream unpack ","header width * ","header width ","line_no * "," width * + "," height times ","Array  new "," verify_length! ","stream length "," decode_colors  map ","stream unpack  shift "]}," ChunkyPNG PixelMatrix initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new ","Pixel  new ","width * "," raise ","initial inspect ","initial size == ","initial size ","initial kind_of? ","initial map ","initial to_i "]}," ChunkyPNG PixelMatrix []=":{"type":"method","name":"[]=","children":[],"call":["@pixels []= ","Pixel  new ","y * + ","y * "," width ","pixel to_i "]}," ChunkyPNG PixelMatrix each_scanline":{"type":"method","name":"each_scanline","children":[],"call":["@pixels [] "," width "," width * "," height times "," height ","ChunkyPNG Pixel  new ","@pixels [] map "]}," ChunkyPNG PixelMatrix []":{"type":"method","name":"[]","children":[],"call":["@pixels [] ","y * + ","y * "," width ","ChunkyPNG Pixel  new "]}," ChunkyPNG PixelMatrix load":{"type":"method","name":"load","children":[],"call":[]}," ChunkyPNG Color ==":{"type":"method","name":"==","children":[],"call":[" to_rgb_array == ","other to_rgb_array "," to_rgb_array ","other kind_of? "," class "]}," ChunkyPNG Color inspect":{"type":"method","name":"inspect","children":[],"call":["#%02x%02x%02x % "," b "," g "," r "]}," ChunkyPNG Color to_rgb":{"type":"method","name":"to_rgb","children":[],"call":[" to_rgb_array pack "," to_rgb_array "]}," ChunkyPNG Color to_rgb_array":{"type":"method","name":"to_rgb_array","children":[],"call":[" b "," g "," r "]}," ChunkyPNG Color index":{"type":"method","name":"index","children":[],"call":["palette index "]}," ChunkyPNG Color rgb":{"type":"method","name":"rgb","children":[],"call":["r << | | | ","r << | | ","b << ","r << | ","g << ","r << "," rgba "]}," ChunkyPNG Color initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Palette to_plte_chunk":{"type":"method","name":"to_plte_chunk","children":[],"call":["ChunkyPNG Chunk Generic  new ","colors pack ","color to_rgb_array ","@color_map []= "," each_with_index ","ChunkyPNG Chunk Palette  new ","color to_truecolor_bytes ","@encoding_map []= ","ChunkyPNG Color  to_truecolor_bytes ","@encoding_map clear "]}," ChunkyPNG Palette index":{"type":"method","name":"index","children":[],"call":["@color_map [] ","@encoding_map [] ","ChunkyPNG Pixel  new ","color nil? "]}," ChunkyPNG Palette indexable?":{"type":"method","name":"indexable?","children":[],"call":[" size < "," size "," size <= "]}," ChunkyPNG Palette from_colors":{"type":"method","name":"from_colors","children":[],"call":[]}," ChunkyPNG Palette from_pixels":{"type":"method","name":"from_pixels","children":[],"call":[]}," ChunkyPNG Palette from_pixel_matrix":{"type":"method","name":"from_pixel_matrix","children":[],"call":[]}," ChunkyPNG Image write":{"type":"method","name":"write","children":[],"call":["datastream write ","datastream end_chunk= ","ChunkyPNG Chunk End  new ","datastream data_chunks= ","datastream idat_chunks "," pixels to_rgb_pixelstream "," pixels ","datastream header_chunk= ","ChunkyPNG Chunk Header  new "," height "," width "," raise "," pixels to_indexed_pixelstream ","datastream palette_chunk= ","palette to_plte_chunk ","palette indexable? "," pixels palette ","ChunkyPNG Datastream  new "," pixels to_datastream "," pixel_matrix to_datastream "," pixel_matrix ","ChunkyPNG Datastream  new  write "," pixels to_datastream  write "," pixel_matrix to_datastream  write ","ChunkyPNG Datastream  new  end_chunk= "," pixels to_datastream  end_chunk= "," pixel_matrix to_datastream  end_chunk= ","ChunkyPNG Datastream  new  data_chunks= "," pixels to_datastream  data_chunks= "," pixel_matrix to_datastream  data_chunks= ","ChunkyPNG Datastream  new  idat_chunks "," pixels to_datastream  idat_chunks "," pixel_matrix to_datastream  idat_chunks ","ChunkyPNG Datastream  new  header_chunk= "," pixels to_datastream  header_chunk= "," pixel_matrix to_datastream  header_chunk= ","datastream  pixels palette _chunk= ","ChunkyPNG Datastream  new  palette_chunk= "," pixels to_datastream  palette_chunk= "," pixel_matrix to_datastream  palette_chunk= "," pixels palette  to_plte_chunk "," pixels palette  indexable? "," pixels  pixels palette  "," pixels to_ChunkyPNG Datastream  new  "," pixels to_ pixels to_datastream  "," pixels to_ pixel_matrix to_datastream  "," pixel_matrix to_ChunkyPNG Datastream  new  "," pixel_matrix to_ pixels to_datastream  "," pixel_matrix to_ pixel_matrix to_datastream  "]}," ChunkyPNG Image height":{"type":"method","name":"height","children":[],"call":[" pixels height "," pixels "," pixel_matrix height "," pixel_matrix "]}," ChunkyPNG Image width":{"type":"method","name":"width","children":[],"call":[" pixels width "," pixels "," pixel_matrix width "," pixel_matrix "]}," ChunkyPNG Image initialize":{"type":"method","name":"initialize","children":[],"call":["ChunkyPNG PixelMatrix  new "]}," ChunkyPNG Datastream pixel_matrix":{"type":"method","name":"pixel_matrix","children":[],"call":["ChunkyPNG PixelMatrix  load "," header ","Zlib Inflate  inflate "," data_chunks map join "," data_chunks map "," data_chunks ","ChunkyPNG PixelMatrix  decode ","  data_chunks map join _chunks map join ","  data_chunks map join _chunks map ","  data_chunks map join _chunks "]}," ChunkyPNG Datastream pixel_matrix=":{"type":"method","name":"pixel_matrix=","children":[],"call":[]}," ChunkyPNG Datastream idat_chunks":{"type":"method","name":"idat_chunks","children":[],"call":["ChunkyPNG Chunk ImageData  new ","Zlib Deflate  deflate "]}," ChunkyPNG Datastream write":{"type":"method","name":"write","children":[],"call":["c write "," chunks each "," chunks ","io << "," each_chunk "]}," ChunkyPNG Datastream initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Datastream chunks":{"type":"method","name":"chunks","children":[],"call":["cs << "," end_chunk "," data_chunks "," palette_chunk "," other_chunks "," header_chunk "," transparency_chunk "," enum_for "]}," ChunkyPNG Datastream verify_signature!":{"type":"method","name":"verify_signature!","children":[],"call":[" raise ","signature == ","io read ","ChunkyPNG Datastream SIGNATURE  length ","ChunkyPNG Datastream SIGNATURE  inspect ","signature inspect ","ChunkyPNG  force_binary == ","ChunkyPNG  force_binary ","io read  == ","io read  inspect "]}," ChunkyPNG Datastream read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk End content":{"type":"method","name":"content","children":[],"call":["ChunkyPNG Datastream  empty_bytearray "," b "]}," ChunkyPNG Chunk End read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk End initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk Header content":{"type":"method","name":"content","children":[],"call":["(send nil :width) pack "," interlace "," filtering "," compression "," color "," depth "," height "," width "]}," ChunkyPNG Chunk Header read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk Header initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk Generic read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk Generic initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk Base write":{"type":"method","name":"write","children":[],"call":[" write_with_crc "," content "]}," ChunkyPNG Chunk Base write_with_crc":{"type":"method","name":"write_with_crc","children":[],"call":["io << ","(send\n  (const nil :Zlib) :crc32\n  (lvar :content)\n  (send\n    (const nil :Zlib) :crc32\n    (send nil :type))) pack ","Zlib  crc32 "," type ","io << << << ","io << << ","(send\n  (lvar :content) :length) pack ","content length "]}," ChunkyPNG Chunk Base initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","attributes each "," type= "]}," ChunkyPNG Chunk read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG PixelMatrix eql?":{"type":"method","name":"eql?","children":[],"call":["other height == "," height ","other height ","other width == "," width ","other width ","other pixels == "," pixels ","other pixels ","other kind_of? "," class "]}," ChunkyPNG PixelMatrix to_datastream":{"type":"method","name":"to_datastream","children":[],"call":["ds end_chunk= ","Chunk End  new ","ds data_chunks= ","ds idat_chunks ","data [] ","ds transparency_chunk= ","ds palette_chunk= ","ds header_chunk= ","Chunk Header  new ","Datastream  new "," encode ","Datastream  new  end_chunk= ","Datastream  new  data_chunks= ","ds  encode _chunks= ","Datastream  new  idat_chunks "," encode  [] ","Datastream  new  transparency_chunk= ","Datastream  new  palette_chunk= ","Datastream  new  header_chunk= "]}," ChunkyPNG PixelMatrix opaque?":{"type":"method","name":"opaque?","children":[],"call":["pixel opaque? "," pixels all? "," pixels "]}," ChunkyPNG PixelMatrix Encoding encode_scanline_up":{"type":"method","name":"encode_scanline_up","children":[],"call":["(const nil :FILTER_UP) + ","previous_bytes [] - ","bytes [] % ","bytes [] ","previous_bytes [] ","(erange\n  (int 0)\n  (send\n    (lvar :bytes) :length)) map ","bytes length ","(const\n  (const nil :ChunkyPNG) :FILTER_UP) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (lvar :b)) % ","original_bytes [] - ","original_bytes [] ","original_bytes length times ","original_bytes length ","previous_previous_bytes [] ytes [] - ","previous_bytes [] ytes [] % ","previous_bytes [] ytes [] ","previous_previous_bytes [] ytes [] ","(erange\n  (int 0)\n  (send\n    (lvar :previous_bytes [] ytes) :length)) map ","previous_bytes [] ytes length ","encoded_previous_bytes [] ytes []= ","(send\n  (send\n    (lvar :original_previous_bytes [] ytes) :[]\n    (lvar :index)) :-\n  (lvar :previous_bytes [] )) % ","original_previous_bytes [] ytes [] - ","original_previous_bytes [] ytes [] ","original_previous_bytes [] ytes length times ","original_previous_bytes [] ytes length "]}," ChunkyPNG PixelMatrix Encoding encode_scanline_sub":{"type":"method","name":"encode_scanline_sub","children":[],"call":["(const nil :FILTER_SUB) + + ","(const nil :FILTER_SUB) + ","bytes [] ","(send\n  (send\n    (lvar :bytes) :[]\n    (send\n      (lvar :n) :-\n      (lvar :pixelsize))) :-\n  (send\n    (lvar :bytes) :[]\n    (lvar :n))) % ","bytes [] - ","n - ","(erange\n  (lvar :pixelsize)\n  (send\n    (lvar :bytes) :length)) map ","bytes length ","(const\n  (const nil :ChunkyPNG) :FILTER_SUB) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (lvar :a)) % ","original_bytes [] - ","original_bytes [] ","index - ","index >= ","original_bytes length times ","original_bytes length ","(send\n  (send\n    (lvoriginal_bytes [] r :bytes) :[]\n    (send\n      (lvoriginal_bytes [] r :n) :-\n      (lvoriginal_bytes [] r :pixelsize))) :-\n  (send\n    (lvoriginal_bytes [] r :bytes) :[]\n    (lvoriginal_bytes [] r :n))) % ","(eroriginal_bytes [] nge\n  (lvoriginal_bytes [] r :pixelsize)\n  (send\n    (lvoriginal_bytes [] r :bytes) :length)) moriginal_bytes [] p ","(send\n  (send\n    (lvoriginal_bytes [] r :originoriginal_bytes [] l_bytes) :[]\n    (lvoriginal_bytes [] r :index)) :-\n  (lvoriginal_bytes [] r :original_bytes [] )) % ","originoriginal_bytes [] l_bytes [] - ","originoriginal_bytes [] l_bytes [] ","originoriginal_bytes [] l_bytes length times ","originoriginal_bytes [] l_bytes length "]}," ChunkyPNG PixelMatrix Encoding encode_scanline_none":{"type":"method","name":"encode_scanline_none","children":[],"call":["(const nil :FILTER_NONE) + ","(const\n  (const nil :ChunkyPNG) :FILTER_NONE) + "]}," ChunkyPNG PixelMatrix Encoding encode_scanline":{"type":"method","name":"encode_scanline","children":[],"call":[" raise "," encode_scanline_up "," encode_scanline_sub "," encode_scanline_none "]}," ChunkyPNG PixelMatrix Encoding encode_pixelstream":{"type":"method","name":"encode_pixelstream","children":[],"call":["stream << "," encode_scanline_sub pack "," encode_scanline_sub "," encode_scanline_up pack "," encode_scanline_up ","line map flatten ","line map "," each_scanline ","Pixel  bytesize "," raise ","palette can_encode? ! ","palette can_encode? ","pixel to_grayscale_alpha_bytes "," lambda ","pixel to_grayscale_bytes ","pixel to_indexed_bytes ","pixel to_truecolor_alpha_bytes ","pixel to_truecolor_bytes ","Array  new ","pixel_size * "," width ","color_mode == ","Pixel  line map flatten ize ","pixel to_grayscale_alpha_line map flatten  ","pixel to_grayscale_line map flatten  ","pixel to_indexed_line map flatten  ","pixel to_truecolor_alpha_line map flatten  ","pixel to_truecolor_line map flatten  ","Pixel  bytesize  * "]}," ChunkyPNG PixelMatrix Encoding determine_encoding":{"type":"method","name":"determine_encoding","children":[],"call":["encoding [] best_colormode ","encoding [] "," palette "]}," ChunkyPNG PixelMatrix Encoding encode":{"type":"method","name":"encode","children":[],"call":["result []= "," encode_pixelstream ","encoding [] ","encoding [] to_trns_chunk ","encoding [] opaque? ","encoding [] to_plte_chunk ","encoding [] == "," height "," width "," determine_encoding "," determine_encoding  [] "," determine_encoding  [] to_trns_chunk "," determine_encoding  [] opaque? "," determine_encoding  [] to_plte_chunk "," determine_encoding  [] == "," determine_ determine_encoding  "]}," ChunkyPNG PixelMatrix Decoding decode_scanline_up":{"type":"method","name":"decode_scanline_up","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (send\n    (lvar :previous_bytes) :[]\n    (lvar :i))) % ","b + ","previous_bytes [] ","bytes each_with_index "]}," ChunkyPNG PixelMatrix Decoding decode_scanline_sub":{"type":"method","name":"decode_scanline_sub","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (begin\n    (if\n      (send\n        (lvar :i) :>=\n        (lvar :pixelsize))\n      (send\n        (lvar :bytes) :[]\n        (send\n          (lvar :i) :-\n          (lvar :pixelsize)))\n      (int 0)))) % ","b + ","bytes [] ","i - ","i >= ","bytes each_with_index "]}," ChunkyPNG PixelMatrix Decoding decode_scanline_none":{"type":"method","name":"decode_scanline_none","children":[],"call":[]}," ChunkyPNG PixelMatrix Decoding decode_scanline":{"type":"method","name":"decode_scanline","children":[],"call":[" raise "," decode_scanline_up "," decode_scanline_sub "," decode_scanline_none "," decode_scanline_paeth "," decode_scanline_average "]}," ChunkyPNG PixelMatrix Decoding decode_pixelstream":{"type":"method","name":"decode_pixelstream","children":[],"call":["ChunkyPNG PixelMatrix  new ","pixels << ","pixel_decoder call ","decoded_bytes each_slice "," decode_scanline ","bytes shift ","stream unpack ","width * ","line_no * ","width * + ","height times ","Array  new "," raise ","ChunkyPNG Pixel  grayscale "," lambda ","palette [] ","bytes first ","ChunkyPNG Pixel  rgba ","ChunkyPNG Pixel  rgb ","palette can_decode? ! ","palette can_decode? ","stream length == ","width * * + ","width * * ","stream length ","Pixel  bytesize "," decode_interlacing_adam7 "," decode_interlacing_none "," decode_scanline  each_slice ","Array  new  each_slice ","decoded_stream unpack  each_slice ","stream unpack  shift ","stream unpack  first ","Pixel  stream unpack ize "]}," ChunkyPNG PixelMatrix Decoding decode":{"type":"method","name":"decode","children":[],"call":[" decode_pixelstream ","ChunkyPNG Palette  from_chunks ","ds transparency_chunk ","ds palette_chunk ","ds header_chunk color ","ds header_chunk ","ds header_chunk height ","ds header_chunk width ","Zlib Inflate  inflate ","ds data_chunks map join ","ds data_chunks map ","ds data_chunks ","ds header_chunk interlace "," raise ","ds header_chunk depth == ","ds header_chunk depth "," decode_pixelZlib Inflate  inflate  ","ds ChunkyPNG Palette  from_chunks _chunk ","ds header_chunk ds header_chunk height  ","ds header_chunk ds header_chunk width  ","ds header_chunk ds header_chunk interlace  "]}," ChunkyPNG Pixel bytesize":{"type":"method","name":"bytesize","children":[],"call":[]}," ChunkyPNG Pixel to_grayscale_alpha_bytes":{"type":"method","name":"to_grayscale_alpha_bytes","children":[],"call":[" a "," r "]}," ChunkyPNG Pixel to_grayscale_bytes":{"type":"method","name":"to_grayscale_bytes","children":[],"call":[" r "]}," ChunkyPNG Pixel to_indexed_bytes":{"type":"method","name":"to_indexed_bytes","children":[],"call":[" index "]}," ChunkyPNG Pixel index":{"type":"method","name":"index","children":[],"call":["palette index "]}," ChunkyPNG Pixel to_truecolor_bytes":{"type":"method","name":"to_truecolor_bytes","children":[],"call":[" b "," g "," r "]}," ChunkyPNG Pixel to_truecolor_alpha_bytes":{"type":"method","name":"to_truecolor_alpha_bytes","children":[],"call":[" a "," b "," g "," r "]}," ChunkyPNG Pixel eql?":{"type":"method","name":"eql?","children":[],"call":["other value == "," value ","other value ","other kind_of? "," class "]}," ChunkyPNG Pixel inspect":{"type":"method","name":"inspect","children":[],"call":["#%08x % "]}," ChunkyPNG Pixel a":{"type":"method","name":"a","children":[],"call":["@value & "]}," ChunkyPNG Pixel b":{"type":"method","name":"b","children":[],"call":["(send\n  (ivar :@value) :&\n  (int 65280)) >> ","@value & "]}," ChunkyPNG Pixel g":{"type":"method","name":"g","children":[],"call":["(send\n  (ivar :@value) :&\n  (int 16711680)) >> ","@value & "]}," ChunkyPNG Pixel r":{"type":"method","name":"r","children":[],"call":["(send\n  (ivar :@value) :&\n  (int 4278190080)) >> ","@value & "]}," ChunkyPNG Pixel from_rgba_stream":{"type":"method","name":"from_rgba_stream","children":[],"call":[]}," ChunkyPNG Pixel from_rgb_stream":{"type":"method","name":"from_rgb_stream","children":[],"call":[]}," ChunkyPNG Pixel grayscale":{"type":"method","name":"grayscale","children":[],"call":[]}," ChunkyPNG Pixel rgba":{"type":"method","name":"rgba","children":[],"call":[]}," ChunkyPNG Pixel rgb":{"type":"method","name":"rgb","children":[],"call":[]}," ChunkyPNG Palette best_colormode":{"type":"method","name":"best_colormode","children":[],"call":[" opaque? "," indexable? "," grayscale? "]}," ChunkyPNG Palette to_trns_chunk":{"type":"method","name":"to_trns_chunk","children":[],"call":["ChunkyPNG Chunk Transparency  new "," map pack "," map ","(send nil :map) pack ","ChunkyPNG Color  a "]}," ChunkyPNG Palette []":{"type":"method","name":"[]","children":[],"call":["@decoding_map [] "]}," ChunkyPNG Palette can_encode?":{"type":"method","name":"can_encode?","children":[],"call":["@encoding_map nil? ! ","@encoding_map nil? ","@encoding_map empty? ! ","@encoding_map empty? "]}," ChunkyPNG Palette can_decode?":{"type":"method","name":"can_decode?","children":[],"call":["@decoding_map nil? ! ","@decoding_map nil? "]}," ChunkyPNG Palette opaque?":{"type":"method","name":"opaque?","children":[],"call":["pixel opaque? "," all? ","Color  opaque? "]}," ChunkyPNG Palette from_chunks":{"type":"method","name":"from_chunks","children":[],"call":[]}," ChunkyPNG Palette initialize":{"type":"method","name":"initialize","children":[],"call":["enum kind_of? "," freeze ","enum sort freeze ","enum sort "]}," ChunkyPNG PixelMatrix Decoding decode_scanline_paeth":{"type":"method","name":"decode_scanline_paeth","children":[],"call":["bytes []= ","(send\n  (lvar :byte) :+\n  (lvar :pr)) % ","byte + ","pb <= ","pa <= ","(send\n  (lvar :p) :-\n  (lvar :c)) abs ","p - ","(send\n  (lvar :p) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) abs ","a + - ","a + ","previous_bytes [] ","i - ","i >= ","bytes [] ","bytes each_with_index ","previous_bytes [] ytes []= ","(send\n  (lvar :byte) :+\n  (lvar :a + - r)) % ","(send\n  (lvar :previous_bytes [] yte) :+\n  (lvar :pr)) % ","(send\n  (lvbytes [] r :byte) :+\n  (lvbytes [] r :pr)) % ","previous_bytes [] yte + ","(send\n  (lvar :p) :-\n  (lvar :b)) abs  <= ","a + - b <= ","pprevious_bytes []  <= ","(send\n  (lvar :p) :-\n  (lvar :a)) abs  <= ","a + - a <= ","pbytes []  <= ","(send\n  (lvar :a + - ) :-\n  (lvar :c)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) abs ","(send\n  (lvar :p) :-\n  (lvar :c)) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :c)) bytes [] bs ","a + -  - ","(send\n  (lvar :a + - ) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :b)) bytes [] bs ","(send\n  (lvar :a + - ) :-\n  (lvar :a)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :bytes [] )) bytes [] bs ","bytes []  + - ","bytes []  + ","a + - revious_bytes [] ","previous_previous_bytes [] ytes [] ","previous_bytes [] ytes [] ","bytes eaprevious_bytes [] h_with_index ","previous_bytes [] ytes each_with_index ","bytes ebytes [] ch_with_index "]}," ChunkyPNG PixelMatrix Decoding decode_scanline_average":{"type":"method","name":"decode_scanline_average","children":[],"call":["bytes []= ","(send\n  (lvar :byte) :+\n  (send\n    (begin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :b) :/\n          (int 2)))) :floor)) % ","byte + ","(send\n  (lvar :a) :+\n  (send\n    (lvar :b) :/\n    (int 2))) floor ","a + ","b / ","previous_bytes [] ","bytes [] ","i - ","i >= ","bytes each_with_index ","previous_bytes [] ytes []= ","(send\n  (lvar :previous_bytes [] yte) :+\n  (send\n    (previous_bytes [] egin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :previous_bytes [] ) :/\n          (int 2)))) :floor)) % ","(send\n  (lvbytes [] r :byte) :+\n  (send\n    (begin\n      (send\n        (lvbytes [] r :bytes [] ) :+\n        (send\n          (lvbytes [] r :b) :/\n          (int 2)))) :floor)) % ","previous_bytes [] yte + ","(send\n  (lvar :a) :+\n  (send\n    (lvar :previous_bytes [] ) :/\n    (int 2))) floor ","(send\n  (lvbytes [] r :bytes [] ) :+\n  (send\n    (lvbytes [] r :b) :/\n    (int 2))) floor ","bytes []  + ","previous_bytes []  / ","previous_previous_bytes [] ytes [] ","previous_bytes [] ytes [] ","previous_bytes [] ytes each_with_index ","bytes ebytes [] ch_with_index "]}," ChunkyPNG PixelMatrix Decoding adam7_pass_sizes":{"type":"method","name":"adam7_pass_sizes","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :height) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :y_offset)))) :/\n  (send\n    (send\n      (lvar :m_o) :[]\n      (sym :y_multiplier)) :to_f)) ceil ","(send\n  (lvar :height) :-\n  (send\n    (lvar :m_o) :[]\n    (sym :y_offset))) / ","m_o [] to_f ","m_o [] ","height - ","(send\n  (begin\n    (send\n      (lvar :width) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :x_offset)))) :/\n  (send\n    (send\n      (lvar :m_o) :[]\n      (sym :x_multiplier)) :to_f)) ceil ","(send\n  (lvar :width) :-\n  (send\n    (lvar :m_o) :[]\n    (sym :x_offset))) / ","width - "," adam7_multiplier_offset ","(erange\n  (int 0)\n  (int 7)) map ","(send\n  (begin\n    (send\n      (lvar :height) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :y_offset)))) :/\n  (send\n    (send\n      (lvar : adam7_multiplier_offset ) :[]\n      (sym :y_multiplier)) :to_f)) ceil ","(send\n  (lvar :height) :-\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :y_offset))) / "," adam7_multiplier_offset  [] to_f "," adam7_multiplier_offset  [] ","(send\n  (begin\n    (send\n      (lvar :width) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :x_offset)))) :/\n  (send\n    (send\n      (lvar : adam7_multiplier_offset ) :[]\n      (sym :x_multiplier)) :to_f)) ceil ","(send\n  (lvar :width) :-\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :x_offset))) / "]}," ChunkyPNG PixelMatrix Decoding adam7_merge_pass":{"type":"method","name":"adam7_merge_pass","children":[],"call":["pixels []= ","sm_pixels [] ","sm_width * + ","sm_width * ","width * + ","width * ","y * + ","m_o [] ","y * ","x * + ","x * ","0 upto ","sm_width - ","sm_height - "," adam7_multiplier_offset "," adam7_multiplier_offset  [] "]}," ChunkyPNG PixelMatrix Decoding adam7_multiplier_offset":{"type":"method","name":"adam7_multiplier_offset","children":[],"call":["8 >> ","pass >> ","pass & == ","pass & ","pass == ","(send\n  (lvar :pass) :-\n  (int 1)) >> ","pass - ","(send\n  (lvar :pass) :+\n  (int 1)) >> ","pass + "]}," ChunkyPNG PixelMatrix Decoding decode_interlacing_adam7":{"type":"method","name":"decode_interlacing_adam7","children":[],"call":[" adam7_merge_pass ","sub_matrices [] ","0 upto ","Array  new ","width * ","(send\n  (send\n    (lvar :pass_width) :*\n    (lvar :pass_height)) :*\n  (lvar :pixel_size)) + ","pass_width * * ","pass_width * "," decode_image_pass "," adam7_pass_sizes map "," adam7_pass_sizes "]}," ChunkyPNG PixelMatrix Decoding decode_interlacing_none":{"type":"method","name":"decode_interlacing_none","children":[],"call":[" decode_image_pass "," raise ","stream length == ","width * * + ","width * * ","width * ","stream length "]}," ChunkyPNG PixelMatrix Decoding decode_image_pass":{"type":"method","name":"decode_image_pass","children":[],"call":["pixels << ","pixel_decoder call ","decoded_bytes each_slice "," decode_scanline ","bytes shift ","stream unpack ","width * ","start_pos + ","line_no * ","width * + ","width > ","height times ","Array  new "," decode_scanline  each_slice ","Array  new  each_slice ","decoded_stream unpack  each_slice ","stream unpack  shift "]}," ChunkyPNG Pixel <=>":{"type":"method","name":"<=>","children":[],"call":["other value <=> "," value ","other value "]}," ChunkyPNG Pixel hash":{"type":"method","name":"hash","children":[],"call":["@value hash "]}," ChunkyPNG Pixel grayscale?":{"type":"method","name":"grayscale?","children":[],"call":[" r == "," b "," r "," g "]}," ChunkyPNG Palette grayscale?":{"type":"method","name":"grayscale?","children":[],"call":["pixel grayscale? "," all? ","Color  grayscale? "]}," ChunkyPNG Image save":{"type":"method","name":"save","children":[],"call":[" write ","File  open "]}," ChunkyPNG Image pixels":{"type":"method","name":"pixels","children":[],"call":[" pixel_matrix pixels "," pixel_matrix "]}," ChunkyPNG Image []=":{"type":"method","name":"[]=","children":[],"call":[" pixel_matrix []= "," pixel_matrix "]}," ChunkyPNG Image []":{"type":"method","name":"[]","children":[],"call":[" pixel_matrix [] "," pixel_matrix "]}," ChunkyPNG Image from_pixel_matrix":{"type":"method","name":"from_pixel_matrix","children":[],"call":[]}," ChunkyPNG PixelMatrix from_rgba_stream":{"type":"method","name":"from_rgba_stream","children":[],"call":[]}," ChunkyPNG PixelMatrix from_rgb_stream":{"type":"method","name":"from_rgb_stream","children":[],"call":[]}," ChunkyPNG PixelMatrix size":{"type":"method","name":"size","children":[],"call":[]}," ChunkyPNG PixelMatrix Operations check_size_constraints!":{"type":"method","name":"check_size_constraints!","children":[],"call":[" raise "," height < ","other height + ","other height "," height "," width < ","other width + ","other width "," width "]}," ChunkyPNG PixelMatrix Operations crop":{"type":"method","name":"crop","children":[],"call":["ChunkyPNG PixelMatrix  new "," pixels slice ","(send\n  (lvar :cy) :+\n  (lvar :y)) * + ","(send\n  (lvar :cy) :+\n  (lvar :y)) * "," width ","cy + "," pixels ","crop_height times "]}," ChunkyPNG PixelMatrix Operations replace":{"type":"method","name":"replace","children":[],"call":[" pixels []= ","other pixels [] ","other width ","y * ","other pixels ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * + ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * "," width ","y + "," pixels ","other height times ","other height "," check_size_constraints! "]}," ChunkyPNG PixelMatrix Operations compose":{"type":"method","name":"compose","children":[],"call":[" []= "," [] & ","other [] "," [] ","y + ","x + ","other width times ","other width ","other height times ","other height "," check_size_constraints! "]}," ChunkyPNG Pixel compose_precise":{"type":"method","name":"compose_precise","children":[],"call":["ChunkyPNG Pixel  rgba ","(send\n  (begin\n    (send\n      (lvar :alpha) :+\n      (lvar :alpha_com))) :*\n  (int 255)) round ","(send\n  (lvar :alpha) :+\n  (lvar :alpha_com)) * ","alpha + ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :b)) :+\n  (send\n    (lvar :alpha_com) :*\n    (send nil :b))) round ","alpha * + ","alpha_com * "," b ","alpha * ","other b ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :g)) :+\n  (send\n    (lvar :alpha_com) :*\n    (send nil :g))) round "," g ","other g ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :r)) :+\n  (send\n    (lvar :alpha_com) :*\n    (send nil :r))) round "," r ","other r ","(send\n  (float 1.0) :-\n  (lvar :alpha)) * ","1.0 - "," a / "," a ","other a / ","other a ","other a == ","(send\n  (begin\n    (send\n      (lvar :alpha) :+\n      (lvar :(send\n  (float 1.0) :-\n  (lvar :alpha)) * ))) :*\n  (int 255)) round ","(send\n  (begin\n    (send\n      (lvar :other a / ) :+\n      (lvar :other a / _com))) :*\n  (int 255)) round ","(send\n  (lvar :alpha) :+\n  (lvar :(send\n  (float 1.0) :-\n  (lvar :alpha)) * )) * ","(send\n  (lvar :other a / ) :+\n  (lvar :other a / _com)) * ","other a /  + ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :b)) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :alpha)) * ) :*\n    (send nil :b))) round ","(send\n  (send\n    (lvar :other a / ) :*\n    (send\n      (lvar :other) :b)) :+\n  (send\n    (lvar :other a / _com) :*\n    (send nil :b))) round ","other a /  * + ","(send\n  (float 1.0) :-\n  (lvar :alpha)) *  * ","other a / _com * ","other a /  * ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :g)) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :alpha)) * ) :*\n    (send nil :g))) round ","(send\n  (send\n    (lvar :other a / ) :*\n    (send\n      (lvar :other) :g)) :+\n  (send\n    (lvar :other a / _com) :*\n    (send nil :g))) round ","(send\n  (send\n    (lvar :alpha) :*\n    (send\n      (lvar :other) :r)) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :alpha)) * ) :*\n    (send nil :r))) round ","(send\n  (send\n    (lvar :other a / ) :*\n    (send\n      (lvar :other) :r)) :+\n  (send\n    (lvar :other a / _com) :*\n    (send nil :r))) round ","(send\n  (float 1.0) :-\n  (lvar :other a / )) * "]}," ChunkyPNG Pixel compose_quick":{"type":"method","name":"compose_quick","children":[],"call":["ChunkyPNG Pixel  rgba ","other a + ","other a "," int8_mult + "," int8_mult "," b ","other b "," g ","other g "," r ","other r "," a ","255 - ","other a == "]}," ChunkyPNG Pixel int8_mult":{"type":"method","name":"int8_mult","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :t) :>>\n      (int 8))) :+\n  (lvar :t)) >> ","(send\n  (lvar :t) :>>\n  (int 8)) + ","t >> ","a * + ","a * ","(send\n  (begin\n    (send\n      (lvar :a * + ) :>>\n      (ina * +  8))) :+\n  (lvar :a * + )) >> ","(send\n  (lvar :a * + ) :>>\n  (ina * +  8)) + ","a * +  >> "]}," ChunkyPNG Pixel fully_transparent?":{"type":"method","name":"fully_transparent?","children":[],"call":[" a == "," a "]}," ChunkyPNG Pixel grayscale_alpha":{"type":"method","name":"grayscale_alpha","children":[],"call":[]}," ChunkyPNG RMagick export":{"type":"method","name":"export","children":[],"call":["image import_pixels ","canvas pixels pack ","canvas pixels ","canvas height ","canvas width ","Magick Image  new ","Magick Image  new  import_pixels "]}," ChunkyPNG RMagick import":{"type":"method","name":"import","children":[],"call":["ChunkyPNG Canvas  from_rgba_stream ","image rows ","image columns ","image export_pixels_to_str ","image export_image export_pixels_to_str _to_str "]}," ChunkyPNG Palette opaque_palette":{"type":"method","name":"opaque_palette","children":[],"call":[" class new ","ChunkyPNG Color  opaque! "," map "," class "]}," ChunkyPNG Palette from_canvas":{"type":"method","name":"from_canvas","children":[],"call":[]}," ChunkyPNG Image from_datastream":{"type":"method","name":"from_datastream","children":[],"call":[]}," ChunkyPNG Image to_datastream":{"type":"method","name":"to_datastream","children":[],"call":[" metadata_chunks ","ds other_chunks "]}," ChunkyPNG Image metadata_chunks":{"type":"method","name":"metadata_chunks","children":[],"call":["ChunkyPNG Chunk Text  new ","ChunkyPNG Chunk CompressedText  new ","value length >= ","value length "," metadata map "," metadata "]}," ChunkyPNG Image initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other metadata "]}," ChunkyPNG Datastream to_blob":{"type":"method","name":"to_blob","children":[],"call":["str string "," write ","StringIO  new ","str set_encoding ","StringIO  new  StringIO  new ing ","StringIO  new  set_encoding "]}," ChunkyPNG Datastream save":{"type":"method","name":"save","children":[],"call":[" write ","File  open "]}," ChunkyPNG Datastream metadata":{"type":"method","name":"metadata","children":[],"call":["metadata []= ","chunk value ","chunk keyword ","chunk respond_to? "," other_chunks select "," other_chunks "," other_chunks each "]}," ChunkyPNG Datastream each_chunk":{"type":"method","name":"each_chunk","children":[],"call":[" end_chunk "," data_chunks each "," data_chunks "," transparency_chunk "," palette_chunk "," other_chunks each "," other_chunks "," header_chunk "," physical_chunk "]}," ChunkyPNG Datastream from_io":{"type":"method","name":"from_io","children":[],"call":["ds other_chunks << ","ds other_chunks ","ds end_chunk= ","ds data_chunks << ","ds data_chunks ","ds transparency_chunk= ","ds palette_chunk= ","ds header_chunk= ","ChunkyPNG Chunk  read ","io eof? "," new "," verify_signature! ","ds physical_chunk= ","ds end_chunk nil? ","ds end_chunk ","io set_encoding ","ds other_ChunkyPNG Chunk  read s << "," new  other_chunks << ","ds other_ChunkyPNG Chunk  read s "," new  other_chunks ","ds end_ChunkyPNG Chunk  read = "," new  end_chunk= ","ds data_ChunkyPNG Chunk  read s << "," new  data_chunks << ","ds data_ChunkyPNG Chunk  read s "," new  data_chunks ","ds transparency_ChunkyPNG Chunk  read = "," new  transparency_chunk= ","ds palette_ChunkyPNG Chunk  read = "," new  palette_chunk= ","ds header_ChunkyPNG Chunk  read = "," new  header_chunk= ","ds physical_ChunkyPNG Chunk  read = "," new  physical_chunk= ","ds end_ChunkyPNG Chunk  read  nil? "," new  end_chunk nil? ","ds end_ChunkyPNG Chunk  read  "," new  end_chunk "]}," ChunkyPNG Datastream from_file":{"type":"method","name":"from_file","children":[],"call":[" from_io ","File  open "]}," ChunkyPNG Datastream from_blob":{"type":"method","name":"from_blob","children":[],"call":[" from_io ","StringIO  new "]}," ChunkyPNG Color bytesize":{"type":"method","name":"bytesize","children":[],"call":[" raise "]}," ChunkyPNG Color to_grayscale_alpha_bytes":{"type":"method","name":"to_grayscale_alpha_bytes","children":[],"call":[" a "," r "," b "]}," ChunkyPNG Color to_grayscale_bytes":{"type":"method","name":"to_grayscale_bytes","children":[],"call":[" r "," b "]}," ChunkyPNG Color to_truecolor_bytes":{"type":"method","name":"to_truecolor_bytes","children":[],"call":[" b "," g "," r "]}," ChunkyPNG Color to_truecolor_alpha_bytes":{"type":"method","name":"to_truecolor_alpha_bytes","children":[],"call":[" a "," b "," g "," r "]}," ChunkyPNG Color to_hex":{"type":"method","name":"to_hex","children":[],"call":["#%06x % ","color >> ","#%08x % "]}," ChunkyPNG Color decompose_alpha_components":{"type":"method","name":"decompose_alpha_components","children":[],"call":[" decompose_alpha_component ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :b\n            (lvar :bg)) :-\n          (send nil :b\n            (lvar :color)))) :to_f) :/\n    (send\n      (begin\n        (send\n          (send nil :b\n            (lvar :bg)) :-\n          (send nil :b\n            (lvar :mask)))) :to_f)) :*\n  (const nil :MAX)) round ","(send\n  (send nil :b\n    (lvar :bg)) :-\n  (send nil :b\n    (lvar :color))) to_f / * ","(send\n  (send nil :b\n    (lvar :bg)) :-\n  (send nil :b\n    (lvar :color))) to_f / ","(send\n  (send nil :b\n    (lvar :bg)) :-\n  (send nil :b\n    (lvar :mask))) to_f "," b - "," b ","(send\n  (send nil :b\n    (lvar :bg)) :-\n  (send nil :b\n    (lvar :color))) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :g\n            (lvar :bg)) :-\n          (send nil :g\n            (lvar :color)))) :to_f) :/\n    (send\n      (begin\n        (send\n          (send nil :g\n            (lvar :bg)) :-\n          (send nil :g\n            (lvar :mask)))) :to_f)) :*\n  (const nil :MAX)) round ","(send\n  (send nil :g\n    (lvar :bg)) :-\n  (send nil :g\n    (lvar :color))) to_f / * ","(send\n  (send nil :g\n    (lvar :bg)) :-\n  (send nil :g\n    (lvar :color))) to_f / ","(send\n  (send nil :g\n    (lvar :bg)) :-\n  (send nil :g\n    (lvar :mask))) to_f "," g - "," g ","(send\n  (send nil :g\n    (lvar :bg)) :-\n  (send nil :g\n    (lvar :color))) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :r\n            (lvar :bg)) :-\n          (send nil :r\n            (lvar :color)))) :to_f) :/\n    (send\n      (begin\n        (send\n          (send nil :r\n            (lvar :bg)) :-\n          (send nil :r\n            (lvar :mask)))) :to_f)) :*\n  (const nil :MAX)) round ","(send\n  (send nil :r\n    (lvar :bg)) :-\n  (send nil :r\n    (lvar :color))) to_f / * ","(send\n  (send nil :r\n    (lvar :bg)) :-\n  (send nil :r\n    (lvar :color))) to_f / ","(send\n  (send nil :r\n    (lvar :bg)) :-\n  (send nil :r\n    (lvar :mask))) to_f "," r - "," r ","(send\n  (send nil :r\n    (lvar :bg)) :-\n  (send nil :r\n    (lvar :color))) to_f "]}," ChunkyPNG Color decompose_alpha_component":{"type":"method","name":"decompose_alpha_component","children":[],"call":["(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :send\n            (lvar :channel)\n            (lvar :bg)) :-\n          (send nil :send\n            (lvar :channel)\n            (lvar :color)))) :to_f) :/\n    (send\n      (begin\n        (send\n          (send nil :send\n            (lvar :channel)\n            (lvar :bg)) :-\n          (send nil :send\n            (lvar :channel)\n            (lvar :mask)))) :to_f)) :*\n  (const nil :MAX)) round ","(send\n  (send nil :send\n    (lvar :channel)\n    (lvar :bg)) :-\n  (send nil :send\n    (lvar :channel)\n    (lvar :color))) to_f / * ","(send\n  (send nil :send\n    (lvar :channel)\n    (lvar :bg)) :-\n  (send nil :send\n    (lvar :channel)\n    (lvar :color))) to_f / ","(send\n  (send nil :send\n    (lvar :channel)\n    (lvar :bg)) :-\n  (send nil :send\n    (lvar :channel)\n    (lvar :mask))) to_f "," send - "," send ","(send\n  (send nil :send\n    (lvar :channel)\n    (lvar :bg)) :-\n  (send nil :send\n    (lvar :channel)\n    (lvar :color))) to_f ","(send\n  (begin\n    (send\n      (send\n        (begin\n          (send\n            (lvar :bc) :-\n            (lvar :cc))) :to_f) :/\n      (send\n        (begin\n          (send\n            (lvar :bc) :-\n            (lvar :mc))) :to_f))) :*\n  (const nil :MAX)) round ","(send\n  (send\n    (begin\n      (send\n        (lvar :bc) :-\n        (lvar :cc))) :to_f) :/\n  (send\n    (begin\n      (send\n        (lvar :bc) :-\n        (lvar :mc))) :to_f)) * ","(send\n  (lvar :bc) :-\n  (lvar :cc)) to_f / ","(send\n  (lvar :bc) :-\n  (lvar :mc)) to_f ","bc - ","(send\n  (lvar :bc) :-\n  (lvar :cc)) to_f ","cc == ","bc == "]}," ChunkyPNG Color decompose_alpha":{"type":"method","name":"decompose_alpha","children":[],"call":["(send\n  (block\n    (send\n      (lvar :components) :inject\n      (int 0))\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (lvar :a) :+\n      (lvar :b))) :/\n  (float 3.0)) round ","(send\n  (lvar :components) :inject\n  (int 0)) / ","a + ","components inject "," decompose_alpha_components ","(send\n  (block\n    (send\n      (lvar : decompose_alpha_components ) :inject\n      (int 0))\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (lvar :a) :+\n      (lvar :b))) :/\n  (float 3.0)) round ","(send\n  (lvar : decompose_alpha_components ) :inject\n  (int 0)) / "," decompose_alpha_components  inject "," decompose_alpha_ decompose_alpha_components  "]}," ChunkyPNG Color alpha_decomposable?":{"type":"method","name":"alpha_decomposable?","children":[],"call":["(send\n  (lvar :sum) :+\n  (send\n    (lvar :tolerance) :*\n    (int 3))) >= ","sum + ","tolerance * ","components min >= ","components min ","components max <= ","components max ","components max * ","a + ","components inject "," decompose_alpha_components "," decompose_alpha_components  min >= "," decompose_alpha_components  min ","components components max *  <= "," decompose_alpha_components  max <= ","components components max *  "," decompose_alpha_components  max ","components components max *  * "," decompose_alpha_components  max * "," decompose_alpha_components  inject "," decompose_alpha_ decompose_alpha_components  "]}," ChunkyPNG Color decompose_color":{"type":"method","name":"decompose_color","children":[],"call":["mask & ","mask & | "," decompose_alpha "," alpha_decomposable? "]}," ChunkyPNG Color fade":{"type":"method","name":"fade","children":[],"call":["(send\n  (lvar :color) :&\n  (int 4294967040)) | ","color & "," int8_mult "," a "]}," ChunkyPNG Color blend":{"type":"method","name":"blend","children":[],"call":["(send\n  (lvar :fg) :+\n  (lvar :bg)) >> ","fg + "]}," ChunkyPNG Color compose_precise":{"type":"method","name":"compose_precise","children":[],"call":[" rgba ","(send\n  (begin\n    (send\n      (lvar :fg_a) :+\n      (lvar :a_com))) :*\n  (const nil :MAX)) round ","(send\n  (lvar :fg_a) :+\n  (lvar :a_com)) * ","fg_a + ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :b\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :b\n      (lvar :bg)))) round ","fg_a * + ","a_com * "," b ","fg_a * ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :g\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :g\n      (lvar :bg)))) round "," g ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :r\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :r\n      (lvar :bg)))) round "," r ","(send\n  (float 1.0) :-\n  (lvar :fg_a)) * ","1.0 - "," a to_f / "," a to_f "," a "," fully_transparent? "," opaque? ","(send\n  (begin\n    (send\n      (lvar :fg_a) :+\n      (lvar :(send\n  (float 1.0) :-\n  (lvar :fg_a)) * ))) :*\n  (const nil :MAX)) round ","(send\n  (begin\n    (send\n      (lvar : a to_f / ) :+\n      (lvar :a_com))) :*\n  (const nil :MAX)) round ","(send\n  (lvar :fg_a) :+\n  (lvar :(send\n  (float 1.0) :-\n  (lvar :fg_a)) * )) * ","(send\n  (lvar : a to_f / ) :+\n  (lvar :a_com)) * "," a to_f /  + ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :b\n      (lvar :fg))) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :fg_a)) * ) :*\n    (send nil :b\n      (lvar :bg)))) round ","(send\n  (send\n    (lvar : a to_f / ) :*\n    (send nil :b\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :b\n      (lvar :bg)))) round "," a to_f /  * + ","(send\n  (float 1.0) :-\n  (lvar :fg_a)) *  * "," a to_f /  * ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :g\n      (lvar :fg))) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :fg_a)) * ) :*\n    (send nil :g\n      (lvar :bg)))) round ","(send\n  (send\n    (lvar : a to_f / ) :*\n    (send nil :g\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :g\n      (lvar :bg)))) round ","(send\n  (send\n    (lvar :fg_a) :*\n    (send nil :r\n      (lvar :fg))) :+\n  (send\n    (lvar :(send\n  (float 1.0) :-\n  (lvar :fg_a)) * ) :*\n    (send nil :r\n      (lvar :bg)))) round ","(send\n  (send\n    (lvar : a to_f / ) :*\n    (send nil :r\n      (lvar :fg))) :+\n  (send\n    (lvar :a_com) :*\n    (send nil :r\n      (lvar :bg)))) round ","(send\n  (float 1.0) :-\n  (lvar : a to_f / )) * "]}," ChunkyPNG Color compose_quick":{"type":"method","name":"compose_quick","children":[],"call":[" rgba "," a + "," a "," int8_mult + "," int8_mult "," b "," g "," r ","255 - "," fully_transparent? "," opaque? "]}," ChunkyPNG Color int8_mult":{"type":"method","name":"int8_mult","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :t) :>>\n      (int 8))) :+\n  (lvar :t)) >> ","(send\n  (lvar :t) :>>\n  (int 8)) + ","t >> ","a * + ","a * ","(send\n  (begin\n    (send\n      (lvar :a * + ) :>>\n      (ina * +  8))) :+\n  (lvar :a * + )) >> ","(send\n  (lvar :a * + ) :>>\n  (ina * +  8)) + ","a * +  >> "]}," ChunkyPNG Color fully_transparent?":{"type":"method","name":"fully_transparent?","children":[],"call":[" a == "," a "]}," ChunkyPNG Color grayscale?":{"type":"method","name":"grayscale?","children":[],"call":[" b == "," g "," b "," r == "," r "]}," ChunkyPNG Color opaque!":{"type":"method","name":"opaque!","children":[],"call":["value | "]}," ChunkyPNG Color opaque?":{"type":"method","name":"opaque?","children":[],"call":[" a == "," a "]}," ChunkyPNG Color a":{"type":"method","name":"a","children":[],"call":["value & "]}," ChunkyPNG Color b":{"type":"method","name":"b","children":[],"call":["(send\n  (lvar :value) :&\n  (int 65280)) >> ","value & "]}," ChunkyPNG Color g":{"type":"method","name":"g","children":[],"call":["(send\n  (lvar :value) :&\n  (int 16711680)) >> ","value & "]}," ChunkyPNG Color r":{"type":"method","name":"r","children":[],"call":["(send\n  (lvar :value) :&\n  (int 4278190080)) >> ","value & "]}," ChunkyPNG Color from_hex":{"type":"method","name":"from_hex","children":[],"call":[" raise ","str inspect ","1 hex ","(send\n  (send\n    (nth-ref 1) :hex) :<<\n  (int 8)) | ","1 hex << ","hex_value inspect ","base_color | ","2 hex ","HEX_COLOR_REGEXP  =~ ","1 gsub hex << ","1 gsub hex ","1 gsub ","1 hex <<  | "]}," ChunkyPNG Color from_rgba_stream":{"type":"method","name":"from_rgba_stream","children":[],"call":[" rgba ","stream unpack "]}," ChunkyPNG Color from_rgb_stream":{"type":"method","name":"from_rgb_stream","children":[],"call":[" rgb ","stream unpack "]}," ChunkyPNG Color grayscale_alpha":{"type":"method","name":"grayscale_alpha","children":[],"call":["teint << | | | ","teint << | | ","teint << ","teint << | "," rgba "]}," ChunkyPNG Color grayscale":{"type":"method","name":"grayscale","children":[],"call":["teint << | | | ","teint << | | ","teint << ","teint << | "," rgba "]}," ChunkyPNG Color rgba":{"type":"method","name":"rgba","children":[],"call":["r << | | | ","r << | | ","b << ","r << | ","g << ","r << "]}," ChunkyPNG Chunk CompressedText content":{"type":"method","name":"content","children":[],"call":["(send nil :keyword) pack ","Zlib Deflate  deflate "," value "," keyword "]}," ChunkyPNG Chunk CompressedText read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk CompressedText initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk Text content":{"type":"method","name":"content","children":[],"call":["(send nil :keyword) pack "," value "," keyword "]}," ChunkyPNG Chunk Text read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk Text initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk ImageData split_in_chunks":{"type":"method","name":"split_in_chunks","children":[],"call":[]}," ChunkyPNG Chunk ImageData combine_chunks":{"type":"method","name":"combine_chunks","children":[],"call":[]}," ChunkyPNG Chunk verify_crc!":{"type":"method","name":"verify_crc!","children":[],"call":[]}," ChunkyPNG Canvas assert_size!":{"type":"method","name":"assert_size!","children":[],"call":[" raise "," height != "," height "," width != "," width "]}," ChunkyPNG Canvas assert_width!":{"type":"method","name":"assert_width!","children":[],"call":[" raise "," width != "," width "]}," ChunkyPNG Canvas assert_height!":{"type":"method","name":"assert_height!","children":[],"call":[" raise "," height != "," height "]}," ChunkyPNG Canvas assert_xy!":{"type":"method","name":"assert_xy!","children":[],"call":[" raise "," include_xy? "]}," ChunkyPNG Canvas assert_y!":{"type":"method","name":"assert_y!","children":[],"call":[" raise "," include_y? "]}," ChunkyPNG Canvas assert_x!":{"type":"method","name":"assert_x!","children":[],"call":[" raise "," include_x? "]}," ChunkyPNG Canvas tap":{"type":"method","name":"tap","children":[],"call":[]}," ChunkyPNG Canvas to_image":{"type":"method","name":"to_image","children":[],"call":["ChunkyPNG Image  from_canvas "]}," ChunkyPNG Canvas eql?":{"type":"method","name":"eql?","children":[],"call":["other height == "," height ","other height ","other width == "," width ","other width ","other pixels == "," pixels ","other pixels ","other kind_of? "," class ","other is_a? "]}," ChunkyPNG Canvas palette":{"type":"method","name":"palette","children":[],"call":["ChunkyPNG Palette  from_canvas "]}," ChunkyPNG Canvas include_x?":{"type":"method","name":"include_x?","children":[],"call":["x < "," width ","x >= "]}," ChunkyPNG Canvas include_y?":{"type":"method","name":"include_y?","children":[],"call":["y < "," height ","y >= "]}," ChunkyPNG Canvas include_xy?":{"type":"method","name":"include_xy?","children":[],"call":[" include_y? "," include_x? ","x < "," width ","x >= ","y < "," height ","y >= "]}," ChunkyPNG Canvas replace_column!":{"type":"method","name":"replace_column!","children":[],"call":[" set_pixel ","vector [] "," height "," assert_height! ","vector length "," assert_x! "," []= "]}," ChunkyPNG Canvas replace_row!":{"type":"method","name":"replace_row!","children":[],"call":[" pixels []= "," width ","y * "," pixels "," assert_width! ","vector length "," assert_y! "]}," ChunkyPNG Canvas column":{"type":"method","name":"column","children":[],"call":["pixels << "," get_pixel ","(erange\n  (int 0)\n  (send nil :height)) inject "," height "," assert_x! "," [] "]}," ChunkyPNG Canvas row":{"type":"method","name":"row","children":[],"call":[" pixels slice "," width ","y * "," pixels "," assert_y! "]}," ChunkyPNG Canvas get_pixel":{"type":"method","name":"get_pixel","children":[],"call":["@pixels [] ","y * + ","y * "," width "]}," ChunkyPNG Canvas []":{"type":"method","name":"[]","children":[],"call":["@pixels [] ","y * + ","y * "," width "," assert_xy! ","point y * + ","point x ","point y * ","point y ","ChunkyPNG  Point ","ChunkyPNG  Point  y * + ","ChunkyPNG  Point  x ","ChunkyPNG  Point  y * ","ChunkyPNG  Point  y "]}," ChunkyPNG Canvas set_pixel":{"type":"method","name":"set_pixel","children":[],"call":["@pixels []= ","y * + ","y * "," width "]}," ChunkyPNG Canvas []=":{"type":"method","name":"[]=","children":[],"call":["@pixels []= ","y * + ","y * "," width "," assert_xy! ","args last ","point y * + ","point x ","point y * ","point y ","ChunkyPNG  Point ","args [] ","args first ","args length == ","args length ","ChunkyPNG Color  parse ","ChunkyPNG  Point  y * + ","ChunkyPNG  Point  x ","ChunkyPNG  Point  y * ","ChunkyPNG  Point  y "]}," ChunkyPNG Canvas size":{"type":"method","name":"size","children":[],"call":[]}," ChunkyPNG Canvas from_canvas":{"type":"method","name":"from_canvas","children":[],"call":[]}," ChunkyPNG Canvas initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other pixels dup ","other pixels ","other height ","other width "]}," ChunkyPNG Canvas initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","initial inspect ","initial size == ","width * ","initial size ","initial kind_of? ","Array  new ","ChunkyPNG  Color ","initial length == ","initial length ","ChunkyPNG Color  parse ","initial is_a? "]}," ChunkyPNG Canvas StreamImporting from_abgr_stream":{"type":"method","name":"from_abgr_stream","children":[],"call":[" new ","string unpack ","stream to_s [] ","4 * * ","4 * ","stream to_s ","stream read ","stream respond_to? ","stream to_s []  unpack ","stream read  unpack "]}," ChunkyPNG Canvas StreamImporting from_bgr_stream":{"type":"method","name":"from_bgr_stream","children":[],"call":[" new ","color | ","string unpack map ","string unpack ","@1 << ","XV * ","width * ","stream to_s [] ","3 * * ","3 * ","stream to_s ","stream read ","string << ","stream respond_to? ","ChunkyPNG EXTRA_BYTE  dup ","ChunkyPNG EXTRA_BYTE  dup  unpack map ","ChunkyPNG EXTRA_BYTE  dup  unpack ","ChunkyPNG EXTRA_BYTE  dup  << "]}," ChunkyPNG Canvas StreamImporting from_rgba_stream":{"type":"method","name":"from_rgba_stream","children":[],"call":[" new ","string unpack ","stream to_s [] ","4 * * ","4 * ","stream to_s ","stream read ","stream respond_to? ","stream to_s []  unpack ","stream read  unpack "]}," ChunkyPNG Canvas StreamImporting from_rgb_stream":{"type":"method","name":"from_rgb_stream","children":[],"call":[" new ","color | ","string unpack map ","string unpack ","NX * ","width * ","string << ","stream to_s [] ","3 * * ","3 * ","stream to_s ","stream read ","stream respond_to? ","stream to_s []  unpack map ","stream read  unpack map ","stream to_s []  unpack ","stream read  unpack ","stream to_s []  << ","stream read  << "]}," ChunkyPNG Canvas StreamExporting to_abgr_stream":{"type":"method","name":"to_abgr_stream","children":[],"call":[" pixels pack "," pixels "]}," ChunkyPNG Canvas StreamExporting to_rgb_stream":{"type":"method","name":"to_rgb_stream","children":[],"call":[" pixels pack ","NX * "," width * "," height "," width "," pixels "," pixels length "]}," ChunkyPNG Canvas StreamExporting to_rgba_stream":{"type":"method","name":"to_rgba_stream","children":[],"call":[" pixels pack "," pixels "]}," ChunkyPNG Canvas PNGEncoding encode_png_str_scanline_paeth":{"type":"method","name":"encode_png_str_scanline_paeth","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (lvar :pr)) & ","stream getbyte - ","stream getbyte ","pos + ","pb <= ","pa <= ","(send\n  (lvar :p) :-\n  (lvar :c)) abs ","p - ","(send\n  (lvar :p) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) abs ","a + - ","a + ","prev_pos + - ","prev_pos + ","i > ","pos + - ","line_width downto ","stream setstream getbyte yte ","strestream getbyte m setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :a + - os) :+\n      (lvar :i))) :-\n  (lvar :a + - r)) & ","(send\n  (send\n    (lvar :stream) :getstream getbyte yte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (lvar :pr)) & ","(send\n  (send\n    (lvstream getbyte r :strestream getbyte m) :getbyte\n    (send\n      (lvstream getbyte r :pos) :+\n      (lvstream getbyte r :i))) :-\n  (lvstream getbyte r :pr)) & ","stream getstream getbyte yte - ","strestream getbyte m getbyte - ","stream getstream getbyte yte ","strestream getbyte m getbyte ","a + - os + ","(send\n  (lvar :p) :-\n  (lvar :b)) abs  <= ","a + - b <= ","pstream getbyte  <= ","(send\n  (lvar :p) :-\n  (lvar :a)) abs  <= ","a + - a <= ","(send\n  (lvar :a + - ) :-\n  (lvar :c)) abs ","(send\n  (lvar :p) :-\n  (lvar :stream getbyte )) abs ","(send\n  (lvar :p) :-\n  (lvar :c)) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :c)) stream getbyte bs ","a + -  - ","(send\n  (lvar :a + - ) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :stream getbyte )) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :b)) stream getbyte bs ","(send\n  (lvar :a + - ) :-\n  (lvar :a)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :stream getbyte )) stream getbyte bs ","stream getbyte  + - ","stream getbyte  + ","a + - rev_a + - os + - ","a + - rev_a + - os + ","a + - os + - "]}," ChunkyPNG Canvas PNGEncoding encode_png_str_scanline_average":{"type":"method","name":"encode_png_str_scanline_average","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :a) :+\n          (lvar :b))) :>>\n      (int 1)))) & ","stream getbyte - ","(send\n  (lvar :a) :+\n  (lvar :b)) >> ","a + ","stream getbyte ","pos + ","prev_pos + ","pos + - ","i > ","line_width downto ","stream setstream getbyte yte ","strestream getbyte m setbyte ","(send\n  (send\n    (lvar :stream) :getstream getbyte yte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (stream getbyte egin\n    (send\n      (stream getbyte egin\n        (send\n          (lvar :a) :+\n          (lvar :stream getbyte ))) :>>\n      (int 1)))) & ","(send\n  (send\n    (lvstream getbyte r :strestream getbyte m) :getbyte\n    (send\n      (lvstream getbyte r :pos) :+\n      (lvstream getbyte r :i))) :-\n  (begin\n    (send\n      (begin\n        (send\n          (lvstream getbyte r :stream getbyte ) :+\n          (lvstream getbyte r :b))) :>>\n      (int 1)))) & ","stream getstream getbyte yte - ","strestream getbyte m getbyte - ","(send\n  (lvar :a) :+\n  (lvar :stream getbyte )) >> ","(send\n  (lvstream getbyte r :stream getbyte ) :+\n  (lvstream getbyte r :b)) >> ","stream getbyte  + ","stream getstream getbyte yte ","strestream getbyte m getbyte "]}," ChunkyPNG Canvas PNGEncoding encode_png_str_scanline_up":{"type":"method","name":"encode_png_str_scanline_up","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (lvar :b)) & ","stream getbyte - ","stream getbyte ","pos + ","prev_pos + ","line_width downto ","stream setstream getbyte yte ","(send\n  (send\n    (lvar :stream) :getstream getbyte yte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (lvar :stream getbyte )) & ","stream getstream getbyte yte - ","stream getstream getbyte yte "]}," ChunkyPNG Canvas PNGEncoding encode_png_str_scanline_sub":{"type":"method","name":"encode_png_str_scanline_sub","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :-\n  (lvar :a)) & ","stream getbyte - ","stream getbyte ","pos + ","pos + - ","i > ","line_width downto ","strestream getbyte m setbyte ","(send\n  (send\n    (lvstream getbyte r :strestream getbyte m) :getbyte\n    (send\n      (lvstream getbyte r :pos) :+\n      (lvstream getbyte r :i))) :-\n  (lvstream getbyte r :stream getbyte )) & ","strestream getbyte m getbyte - ","strestream getbyte m getbyte "]}," ChunkyPNG Canvas PNGEncoding encode_png_str_scanline_none":{"type":"method","name":"encode_png_str_scanline_none","children":[],"call":[]}," ChunkyPNG Canvas PNGEncoding encode_png_image_pass_to_stream":{"type":"method","name":"encode_png_image_pass_to_stream","children":[],"call":[" send ","pos - ","line_width + ","y == ","start_pos + ","y * ","(send\n  (send nil :height) :-\n  (int 1)) downto "," height - "," height ","stream << "," raise "," pixels pack ","(str \"xn\") * "," width "," pixels ","(send\n  (send nil :pixels) :map) pack ","(str \"xC\") * ","p >> "," pixels map "," encoding_palette index "," encoding_palette ","(str \"xN\") * ","(send\n  (str \"x\") :+\n  (begin\n    (send\n      (str \"NX\") :*\n      (send nil :width)))) * ","x + ","NX * ","pixel_size * ","Color  bytesize ","stream bytesize ","Color  pixel_bytesize "," row ","0 upto "," encode_png_pixels_to_scanline_method ","Color  scanline_bytesize "," encode_png_scanline_up pack "," encode_png_scanline_up ","line map flatten ","line map "," each_scanline ","Array  new ","line_packer * ","Color  to_grayscale_alpha_bytes "," lambda ","Color  to_grayscale_bytes ","Color  to_truecolor_alpha_bytes ","Color  to_truecolor_bytes "," encode_png_scanline_paeth pack "," encode_png_scanline_paeth ","color_mode == ","compression < ","start_pos +  - ","pixel_size *  + ","Color  scanline_bytesize  + ","start_start_pos +  + ","stream bytesize  + ","Color  bytesize  * ","Color  pixel_bytesize  * ","x +  * "]}," ChunkyPNG Canvas PNGEncoding encode_png_image_with_interlacing":{"type":"method","name":"encode_png_image_with_interlacing","children":[],"call":["subcanvas encode_png_image_pass_to_stream ","subcanvas encoding_palette= "," encoding_palette "," class adam7_extract_pass "," class ","0 upto ","ChunkyPNG Datastream  empty_bytearray "," b "," class adam7_extract_pass  encode_png_image_pass_to_stream ","subcanvas encode_png_image_pass_to_ChunkyPNG Datastream  empty_bytearray  ","subcanvas encode_png_image_pass_to_ b  "," class adam7_extract_pass  encoding_palette= ","ChunkyPNG DataChunkyPNG Datastream  empty_bytearray   empty_bytearray ","ChunkyPNG Data b   empty_bytearray "]}," ChunkyPNG Canvas PNGEncoding encode_png_image_without_interlacing":{"type":"method","name":"encode_png_image_without_interlacing","children":[],"call":[" encode_png_image_pass_to_stream ","ChunkyPNG Datastream  empty_bytearray "," b "," encode_png_image_pass_to_ChunkyPNG Datastream  empty_bytearray  "," encode_png_image_pass_to_ b  ","ChunkyPNG DataChunkyPNG Datastream  empty_bytearray   empty_bytearray ","ChunkyPNG Data b   empty_bytearray "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixelstream":{"type":"method","name":"encode_png_pixelstream","children":[],"call":[" raise "," encode_png_image_with_interlacing "," encode_png_image_without_interlacing "," encoding_palette can_encode? ! "," encoding_palette can_encode? "," encoding_palette "," encoding_palette nil? ","color_mode == ","Color  to_grayscale_alpha_bytes "," lambda ","Color  to_grayscale_bytes ","palette index ","Color  to_truecolor_alpha_bytes ","Color  to_truecolor_bytes ","Color  bytesize ","palette can_encode? ! ","palette can_encode? "," encoding_palette size > ","1 << "," encoding_palette size "]}," ChunkyPNG Canvas PNGEncoding determine_png_encoding":{"type":"method","name":"determine_png_encoding","children":[],"call":["encoding [] ","encoding []= "," encoding_palette best_colormode "," encoding_palette "," encoding_palette= "," palette ","encoding [] == ","constraints == ","(send\n  (send nil :encoding_palette) :determine_bit_depth) max "," encoding_palette determine_bit_depth ","encoding [] best_colormode "," encoding_palette best_color_settings "," raise ","constraints inspect "]}," ChunkyPNG Canvas PNGEncoding to_datastream":{"type":"method","name":"to_datastream","children":[],"call":["ds end_chunk= ","Chunk End  new ","ds data_chunks= ","Chunk ImageData  split_in_chunks ","encoding [] "," encode_png_pixelstream ","ds transparency_chunk= "," encoding_palette to_trns_chunk "," encoding_palette "," encoding_palette opaque? ","ds palette_chunk= "," encoding_palette to_plte_chunk ","encoding [] == ","ds header_chunk= ","Chunk Header  new "," height "," width ","Datastream  new "," determine_png_encoding ","data [] "," encode_png ","Datastream  new  end_chunk= ","ds  encode_png_pixelstream _chunks= ","ds  encode_png _chunks= ","Datastream  new  data_chunks= "," determine_png_encoding  [] ","Datastream  new  transparency_chunk= ","  determine_png_encoding _palette to_trns_chunk ","  determine_png_encoding _palette ","  determine_png_encoding _palette opaque? ","Datastream  new  palette_chunk= ","  determine_png_encoding _palette to_plte_chunk "," determine_png_encoding  [] == ","Datastream  new  header_chunk= "," determine_png_ determine_png_encoding  "," encode_png_pixelstream  [] "," encode_png  [] "]}," ChunkyPNG Canvas PNGEncoding to_blob":{"type":"method","name":"to_blob","children":[],"call":[" to_datastream to_blob "," to_datastream "]}," ChunkyPNG Canvas PNGEncoding save":{"type":"method","name":"save","children":[],"call":[" write ","File  open "]}," ChunkyPNG Canvas PNGEncoding write":{"type":"method","name":"write","children":[],"call":[" to_datastream write "," to_datastream "]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline_paeth":{"type":"method","name":"decode_png_str_scanline_paeth","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (lvar :cur_pos)) :+\n  (lvar :pr)) & ","stream getbyte + ","stream getbyte ","pb <= ","pa <= ","(send\n  (lvar :p) :-\n  (lvar :c)) abs ","p - ","(send\n  (lvar :p) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) abs ","a + - ","a + ","prev_pos + - ","prev_pos + ","i > ","cur_pos - ","pos + ","stream setstream getbyte yte ","strestream getbyte m setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (lvar :cur_a + - os)) :+\n  (lvar :a + - r)) & ","(send\n  (send\n    (lvar :stream) :getbyte\n    (lvar :stream getbyte ur_pos)) :+\n  (lvar :pr)) & ","(send\n  (send\n    (lvar :stream) :getstream getbyte yte\n    (lvar :cur_pos)) :+\n  (lvar :pr)) & ","(send\n  (send\n    (lvstream getbyte r :strestream getbyte m) :getbyte\n    (lvstream getbyte r :cur_pos)) :+\n  (lvstream getbyte r :pr)) & ","(send\n  (send\n    (lvar :stream) :getbyte\n    (lvar :pos + )) :+\n  (lvar :pr)) & ","stream getstream getbyte yte + ","strestream getbyte m getbyte + ","stream getstream getbyte yte ","strestream getbyte m getbyte ","(send\n  (lvar :p) :-\n  (lvar :b)) abs  <= ","a + - b <= ","pstream getbyte  <= ","(send\n  (lvar :p) :-\n  (lvar :a)) abs  <= ","a + - a <= ","(send\n  (lvar :a + - ) :-\n  (lvar :c)) abs ","(send\n  (lvar :p) :-\n  (lvar :stream getbyte )) abs ","(send\n  (lvar :p) :-\n  (lvar :c)) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :c)) stream getbyte bs ","a + -  - ","(send\n  (lvar :a + - ) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :stream getbyte )) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :b)) stream getbyte bs ","(send\n  (lvar :a + - ) :-\n  (lvar :a)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) astream getbyte s ","(send\n  (lvstream getbyte r :p) :-\n  (lvstream getbyte r :stream getbyte )) stream getbyte bs ","stream getbyte  + - ","stream getbyte  + ","a + - rev_a + - os + - ","a + - rev_a + - os + ","cur_a + - os - ","stream getbyte ur_pos - ","pos +  - ","a + - os + "]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline_average":{"type":"method","name":"decode_png_str_scanline_average","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :+\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :a) :+\n          (lvar :b))) :>>\n      (int 1)))) & ","stream getbyte + ","(send\n  (lvar :a) :+\n  (lvar :b)) >> ","a + ","stream getbyte ","pos + ","prev_pos + ","pos + - ","i > ","stream setstream getbyte yte ","strestream getbyte m setbyte ","(send\n  (send\n    (lvar :stream) :getstream getbyte yte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :+\n  (stream getbyte egin\n    (send\n      (stream getbyte egin\n        (send\n          (lvar :a) :+\n          (lvar :stream getbyte ))) :>>\n      (int 1)))) & ","(send\n  (send\n    (lvstream getbyte r :strestream getbyte m) :getbyte\n    (send\n      (lvstream getbyte r :pos) :+\n      (lvstream getbyte r :i))) :+\n  (begin\n    (send\n      (begin\n        (send\n          (lvstream getbyte r :stream getbyte ) :+\n          (lvstream getbyte r :b))) :>>\n      (int 1)))) & ","stream getstream getbyte yte + ","strestream getbyte m getbyte + ","(send\n  (lvar :a) :+\n  (lvar :stream getbyte )) >> ","(send\n  (lvstream getbyte r :stream getbyte ) :+\n  (lvstream getbyte r :b)) >> ","stream getbyte  + ","stream getstream getbyte yte ","strestream getbyte m getbyte "]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline_up":{"type":"method","name":"decode_png_str_scanline_up","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :+\n  (lvar :up)) & ","stream getbyte + ","stream getbyte ","pos + ","prev_pos + ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :+\n  (lvar :stream getbyte )) & "]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline_sub":{"type":"method","name":"decode_png_str_scanline_sub","children":[],"call":["stream setbyte ","(send\n  (send\n    (lvar :stream) :getbyte\n    (send\n      (lvar :pos) :+\n      (lvar :i))) :+\n  (begin\n    (if\n      (send\n        (lvar :i) :>\n        (lvar :pixel_size))\n      (send\n        (lvar :stream) :getbyte\n        (send\n          (send\n            (lvar :pos) :+\n            (lvar :i)) :-\n          (lvar :pixel_size)))\n      (int 0)))) & ","stream getbyte + ","stream getbyte ","pos + - ","pos + ","i > "]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline_sub_none":{"type":"method","name":"decode_png_str_scanline_sub_none","children":[],"call":[]}," ChunkyPNG Canvas PNGDecoding decode_png_str_scanline":{"type":"method","name":"decode_png_str_scanline","children":[],"call":[" raise ","stream getbyte "," decode_png_str_scanline_paeth "," decode_png_str_scanline_average "," decode_png_str_scanline_up "," decode_png_str_scanline_sub "]}," ChunkyPNG Canvas PNGDecoding decode_png_image_pass":{"type":"method","name":"decode_png_image_pass","children":[],"call":[" new ","line_length + ","pixel_decoder call "," decode_png_str_scanline ","width * ","Array  new "," raise ","stream length - >= ","width * * + ","width * * ","stream length - ","stream length ","width > ","ChunkyPNG Color  grayscale_alpha ","s getbyte ","pos + + ","pos + ","i * ","(erange\n  (int 0)\n  (lvar :width)) map "," lambda ","ChunkyPNG Color  grayscale ","(irange\n  (int 1)\n  (lvar :width)) map "," decoding_palette [] "," decoding_palette ","s unpack ","c | ","s unpack map ","(str \"@\") << ","NX * ","Color  bytesize ","stream << ","color_mode == "," send ","stream bytesize - >= ","ChunkyPNG Color  pass_bytesize ","stream bytesize - ","stream bytesize ","ChunkyPNG Color  pixel_bytesize ","ChunkyPNG Color  scanline_bytesize "," decode_png_pixels_from_scanline_method ","height > ","pixels << ","decoded_bytes each_slice "," decode_png_scanline ","bytes shift ","stream unpack ","start_pos + ","line_no * ","width * + ","height times ","bytes first ","ChunkyPNG Color  rgba ","ChunkyPNG Color  rgb ","pixels concat ","width *  + ","ChunkyPNG Color  scanline_bytesize  + "," decode_png_pixels_from_scanline_method  call ","Color  stream unpack ize ","stream stream unpack ize - >= ","ChunkyPNG Color  pass_stream unpack ize ","stream stream unpack ize - ","stream stream unpack ize ","ChunkyPNG Color  pixel_stream unpack ize ","ChunkyPNG Color  scanline_stream unpack ize ","Array  new  each_slice "," decode_png_scanline  each_slice ","decoded_stream unpack  each_slice ","stream unpack  shift ","stream unpack  first "]}," ChunkyPNG Canvas PNGDecoding decode_png_with_adam7_interlacing":{"type":"method","name":"decode_png_with_adam7_interlacing","children":[],"call":["(send\n  (send\n    (lvar :sm_width) :*\n    (lvar :sm_height)) :*\n  (lvar :pixel_size)) + ","sm_width * * ","sm_width * "," adam7_merge_pass "," decode_png_image_pass "," adam7_pass_size ","Color  bytesize "," new ","ChunkyPNG Color  pass_bytesize ","0 upto ","ChunkyPNG Canvas  new ","(send\n  (send\n    (lvar : decode_png_image_pass _width) :*\n    (lvar : decode_png_image_pass _height)) :*\n  (lvar :pixel_size)) + ","(send\n  (send\n    (lvar :sm_width) :*\n    (lvar :sm_height)) :*\n  (lvar :Color  bytesize )) + "," decode_png_image_pass _width * * "," decode_png_image_pass _width * "]}," ChunkyPNG Canvas PNGDecoding decode_png_without_interlacing":{"type":"method","name":"decode_png_without_interlacing","children":[],"call":[" decode_png_image_pass "," raise ","stream length == ","width * * + ","width * * ","width * ","stream length "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixelstream":{"type":"method","name":"decode_png_pixelstream","children":[],"call":[" raise "," decode_png_with_adam7_interlacing "," decode_png_without_interlacing "," decoding_palette can_decode? ! "," decoding_palette can_decode? "," decoding_palette ","ChunkyPNG Color  grayscale "," lambda ","palette [] ","bytes first ","ChunkyPNG Color  rgba ","ChunkyPNG Color  rgb ","Color  bytesize ","palette can_decode? ! ","palette can_decode? ","c == "," transparent_color ","image pixels map! ","image pixels ","decoding_palette can_decode? ! ","decoding_palette can_decode? "]}," ChunkyPNG Canvas PNGDecoding from_datastream":{"type":"method","name":"from_datastream","children":[],"call":[" decode_png_pixelstream ","ChunkyPNG Chunk ImageData  combine_chunks ","ds data_chunks "," decoding_palette= ","ChunkyPNG Palette  from_chunks ","ds transparency_chunk ","ds palette_chunk ","ds header_chunk interlace ","ds header_chunk ","ds header_chunk color ","ds header_chunk height ","ds header_chunk width "," raise ","ds header_chunk depth == ","ds header_chunk depth ","ds imagedata ","height == ","width == "," transparent_color= ","ds transparency_chunk grayscale_entry ","ds transparency_chunk truecolor_entry "," decode_png_ChunkyPNG Chunk ImageData  combine_chunks  "," decode_png_pixelChunkyPNG Chunk ImageData  combine_chunks  "," decoding_ChunkyPNG Palette  from_chunks = "," ChunkyPNG Palette  from_chunks = ","ds ChunkyPNG Palette  from_chunks _chunk ","ds header_chunk ds header_chunk interlace  ","ds header_chunk ds header_chunk height  ","ds header_chunk ds header_chunk width  ","ds header_chunk ds header_chunk depth  == ","ds header_chunk ds header_chunk depth  ","ds header_chunk height  == ","ds header_chunk width  == "," ds transparency_chunk grayscale_entry = "," ds transparency_chunk truecolor_entry = "]}," ChunkyPNG Canvas PNGDecoding from_io":{"type":"method","name":"from_io","children":[],"call":[" from_datastream ","ChunkyPNG Datastream  from_io "]}," ChunkyPNG Canvas PNGDecoding from_file":{"type":"method","name":"from_file","children":[],"call":[" from_datastream ","ChunkyPNG Datastream  from_file "]}," ChunkyPNG Canvas PNGDecoding from_blob":{"type":"method","name":"from_blob","children":[],"call":[" from_datastream ","ChunkyPNG Datastream  from_blob "]}," ChunkyPNG Canvas Operations check_size_constraints!":{"type":"method","name":"check_size_constraints!","children":[],"call":[" raise "," height < ","other height + ","other height "," height "," width < ","other width + ","other width "," width "]}," ChunkyPNG Canvas Operations rotate_180":{"type":"method","name":"rotate_180","children":[],"call":["flipped replace_row! "," row reverse "," row "," height - ","y + "," height "," class new tap "," class new "," width "," class "," dup rotate_180! "," dup "]}," ChunkyPNG Canvas Operations rotate_left":{"type":"method","name":"rotate_left","children":[],"call":["rotated replace_row! "," column "," width - ","i + "," width "," class new tap "," class new "," height "," class "," dup rotate_left! "," dup "," class new  replace_row! "]}," ChunkyPNG Canvas Operations rotate_right":{"type":"method","name":"rotate_right","children":[],"call":["rotated replace_row! "," column reverse "," column "," width "," class new tap "," class new "," height "," class "," dup rotate_right! "," dup "," class new  replace_row! "]}," ChunkyPNG Canvas Operations flip_vertically":{"type":"method","name":"flip_vertically","children":[],"call":["flipped replace_column! "," column "," width - ","x + "," width "," class new tap "," class new "," height "," class "," dup flip_vertically! "," dup "]}," ChunkyPNG Canvas Operations flip_horizontally":{"type":"method","name":"flip_horizontally","children":[],"call":["flipped replace_row! "," row "," height - ","y + "," height "," class new tap "," class new "," width "," class "," dup flip_horizontally! "," dup "]}," ChunkyPNG Canvas Operations change_mask_color!":{"type":"method","name":"change_mask_color!","children":[],"call":["(send\n  (lvar :new_color) :&\n  (int 4294967040)) | ","ChunkyPNG Color  a ","new_color & "," pixels map! "," pixels "," raise "," palette opaque_palette size != "," palette opaque_palette size "," palette opaque_palette "," palette "]}," ChunkyPNG Canvas Operations extract_mask":{"type":"method","name":"extract_mask","children":[],"call":[" class new "," height "," width "," class ","base_pixels << ","mask_pixels << ","mask_color & ","ChunkyPNG Color  decompose_color ","ChunkyPNG Color  alpha_decomposable? "," pixels each "," pixels "]}," ChunkyPNG Canvas Operations change_theme_color!":{"type":"method","name":"change_theme_color!","children":[],"call":[" replace ","base compose ","mask change_mask_color! "," extract_mask "]}," ChunkyPNG Canvas Operations crop":{"type":"method","name":"crop","children":[],"call":["ChunkyPNG Canvas  new "," pixels slice ","(send\n  (lvar :cy) :+\n  (lvar :y)) * + ","(send\n  (lvar :cy) :+\n  (lvar :y)) * "," width ","cy + "," pixels "," raise ","crop_height + > "," height ","crop_height + ","crop_width + > ","crop_width + ","crop_height times "," dup crop! "," dup "]}," ChunkyPNG Canvas Operations replace":{"type":"method","name":"replace","children":[],"call":[" pixels []= ","other pixels [] ","other width ","y * ","other pixels ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * + ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * "," width ","y + "," pixels ","other height "," check_size_constraints! ","other height times "," dup replace! "," dup "]}," ChunkyPNG Canvas Operations compose":{"type":"method","name":"compose","children":[],"call":[" set_pixel ","ChunkyPNG Color  compose "," get_pixel ","y + ","x + ","other get_pixel ","other width ","other height "," check_size_constraints! "," []= "," [] ","new_foreground [] ","new_foreground width times ","new_foreground width ","new_foreground height times ","new_foreground height ","other [] "," dup compose! "," dup "]}," ChunkyPNG Canvas Drawing rect":{"type":"method","name":"rect","children":[],"call":[" line "," point ","(lvar :y0) min upto ","(lvar :y0) max ","(lvar :y0) min ","(lvar :x0) min upto ","(lvar :x0) max ","(lvar :x0) min "," compose_pixel ","fill_color == ","ChunkyPNG  Color ","ChunkyPNG Color  parse ","ChunkyPNG  Color  == ","ChunkyPNG Color  parse  == "]}," ChunkyPNG Canvas Drawing line_xiaolin_wu":{"type":"method","name":"line_xiaolin_wu","children":[],"call":[" point ","ChunkyPNG Color  fade ","255 - ","y0 + "," include_xy? ","e_acc >> ","e_acc <= ","(send\n  (lvar :e_acc) :+\n  (lvar :e)) & ","e_acc + ","(send\n  (lvar :dx) :-\n  (int 1)) downto ","dx - ","(send\n  (lvar :dy) :<<\n  (int 16)) / ","dy << ","x0 + ","(erange\n  (lvar :y0)\n  (send\n    (lvar :y1) :-\n    (int 1))) each ","y1 - ","(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ","(send\n  (lvar :dx) :<<\n  (int 16)) / ","dy to_f ","dx << ","dy > ","x0 step ","dx == ","(irange\n  (lvar :y0)\n  (lvar :y1)) each ","Range  new each ","Range  new ","(lvar :x0) sort ","dy == ","dx < ","x1 - ","y0 > "," include? "," compose_pixel ","i > ","(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ","dx to_f ","(send\n  (lvar :dy) :-\n  (int 1)) downto ","dy - ","y0 step ","dy < ","ChunkyPNG  Color ","ChunkyPNG Color  parse ","ChunkyPNG Color  fad(send\n  (lvar :dy) :<<\n  (int 16)) /  ","ChunkyPNG Color  fad(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round  ","ChunkyPNG Color  fad(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round  ","y0 +  + "," includ(send\n  (lvar :dy) :<<\n  (int 16)) / _xy? "," includ(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _xy? "," includ(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _xy? ","(send\n  (lvar :dy) :<<\n  (int 16)) / _acc >> ","(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _acc >> ","(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _acc >> ","(send\n  (lvar :dy) :<<\n  (int 16)) / _acc <= ","(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _acc <= ","(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _acc <= ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (lvar :(send\n  (lvar :dy) :<<\n  (int 16)) / _acc) :+\n  (lvar :(send\n  (lvar :dy) :<<\n  (int 16)) / )) & ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (lvar :(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _acc) :+\n  (lvar :(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round )) & ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (lvar :(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _acc) :+\n  (lvar :(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round )) & ","(send\n  (lvar :dy) :<<\n  (int 16)) / _acc + ","(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _acc + ","(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _acc + ","(send\n  (lvar :dx) :-\n  (int 1)) do255 - nto ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (lvar :dx) :-\n  (int 1)) downto ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (lvar :dx) :-\n  (int 1)) downto ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (lvar :dx) :-\n  (int 1)) downto ","(send\n  (lvar :x1 - ) :-\n  (int 1)) downto ","x1 -  - ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (lvar :dy) :<<\n  (int 16)) / ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (lvar :dy) :<<\n  (int 16)) / ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (lvar :dy) :<<\n  (int 16)) / ","(send\n  (lvar :y1 - ) :<<\n  (int 16)) / ","y1 -  << ","x0 +  + ","((send\n  (lvar :dy) :<<\n  (int 16)) / rang(send\n  (lvar :dy) :<<\n  (int 16)) / \n  (lvar :y0)\n  (s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n    (lvar :y1) :-\n    (int 1))) (send\n  (lvar :dy) :<<\n  (int 16)) / ach ","((send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round rang(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round \n  (lvar :y0)\n  (s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n    (lvar :y1) :-\n    (int 1))) (send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ach ","((send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round rang(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round \n  (lvar :y0)\n  (s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n    (lvar :y1) :-\n    (int 1))) (send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ach ","(erange\n  (lvar :y0 + )\n  (send\n    (lvar :y1) :-\n    (int 1))) each ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (b(send\n  (lvar :dy) :<<\n  (int 16)) / gin\n    (s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n      (lvar :dx) :<<\n      (int 16))) :/\n  (s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n    (lvar :dy) :to_f)) round ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (b(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round gin\n    (s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n      (lvar :dx) :<<\n      (int 16))) :/\n  (s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n    (lvar :dy) :to_f)) round ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (b(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round gin\n    (s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n      (lvar :dx) :<<\n      (int 16))) :/\n  (s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n    (lvar :dy) :to_f)) round ","(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :y1 - ) :to_f)) round ","(send\n  (begin\n    (send\n      (lvar :x1 - ) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (lvar :dx) :<<\n  (int 16)) / ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (lvar :dx) :<<\n  (int 16)) / ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (lvar :dx) :<<\n  (int 16)) / ","(send\n  (lvar :x1 - ) :<<\n  (int 16)) / ","y1 -  to_f ","x1 -  << ","y1 -  > ","x0 st(send\n  (lvar :dy) :<<\n  (int 16)) / p ","x0 st(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round p ","x0 st(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round p ","x0 +  step ","x1 -  == ","(irang(send\n  (lvar :dy) :<<\n  (int 16)) / \n  (lvar :y0)\n  (lvar :y1)) (send\n  (lvar :dy) :<<\n  (int 16)) / ach ","(irang(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round \n  (lvar :y0)\n  (lvar :y1)) (send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ach ","(irang(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round \n  (lvar :y0)\n  (lvar :y1)) (send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ach ","(irange\n  (lvar :y0 + )\n  (lvar :y1)) each ","Range  ne255 -  each ","Rang(send\n  (lvar :dy) :<<\n  (int 16)) /   n(send\n  (lvar :dy) :<<\n  (int 16)) / w (send\n  (lvar :dy) :<<\n  (int 16)) / ach ","Rang(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round   n(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round w (send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ach ","Rang(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round   n(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round w (send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ach ","Range  ne255 -  ","Rang(send\n  (lvar :dy) :<<\n  (int 16)) /   n(send\n  (lvar :dy) :<<\n  (int 16)) / w ","Rang(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round   n(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round w ","Rang(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round   n(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round w ","(lvar :x0 + ) sort ","y1 -  == ","x1 -  < ","y0 +  > "," includ(send\n  (lvar :dy) :<<\n  (int 16)) / ? "," includ(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round ? "," includ(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ? "," compos(send\n  (lvar :dy) :<<\n  (int 16)) / _pix(send\n  (lvar :dy) :<<\n  (int 16)) / l "," compos(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round _pix(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round l "," compos(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round _pix(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round l ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (b(send\n  (lvar :dy) :<<\n  (int 16)) / gin\n    (s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n      (lvar :dy) :<<\n      (int 16))) :/\n  (s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n    (lvar :dx) :to_f)) round ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (b(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round gin\n    (s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n      (lvar :dy) :<<\n      (int 16))) :/\n  (s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n    (lvar :dx) :to_f)) round ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (b(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round gin\n    (s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n      (lvar :dy) :<<\n      (int 16))) :/\n  (s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n    (lvar :dx) :to_f)) round ","(send\n  (begin\n    (send\n      (lvar :y1 - ) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round ","(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :x1 - ) :to_f)) round ","x1 -  to_f ","(send\n  (lvar :dy) :-\n  (int 1)) do255 - nto ","(s(send\n  (lvar :dy) :<<\n  (int 16)) / nd\n  (lvar :dy) :-\n  (int 1)) downto ","(s(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round nd\n  (lvar :dy) :-\n  (int 1)) downto ","(s(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round nd\n  (lvar :dy) :-\n  (int 1)) downto ","(send\n  (lvar :y1 - ) :-\n  (int 1)) downto ","y1 -  - ","y0 st(send\n  (lvar :dy) :<<\n  (int 16)) / p ","y0 st(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round p ","y0 st(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round p ","y0 +  step ","y1 -  < ","ChunkyPNG Color  pars(send\n  (lvar :dy) :<<\n  (int 16)) /  ","ChunkyPNG Color  pars(send\n  (begin\n    (send\n      (lvar :dx) :<<\n      (int 16))) :/\n  (send\n    (lvar :dy) :to_f)) round  ","ChunkyPNG Color  pars(send\n  (begin\n    (send\n      (lvar :dy) :<<\n      (int 16))) :/\n  (send\n    (lvar :dx) :to_f)) round  "]}," ChunkyPNG Canvas Drawing point":{"type":"method","name":"point","children":[],"call":[" set_pixel ","ChunkyPNG Color  compose "," get_pixel "," []= "," [] "]}," ChunkyPNG Canvas Adam7Interlacing adam7_extract_pass":{"type":"method","name":"adam7_extract_pass","children":[],"call":["ChunkyPNG Canvas  new "," adam7_pass_size + "," adam7_pass_size ","canvas height ","canvas width ","sm_pixels << ","canvas [] ","m_o [] step ","1 << ","m_o [] ","canvas width - ","canvas height - "," adam7_multiplier_offset ","x_offset step ","y_offset step "," adam7_multiplier_offset  [] step "," adam7_multiplier_offset  [] "]}," ChunkyPNG Canvas Adam7Interlacing adam7_merge_pass":{"type":"method","name":"adam7_merge_pass","children":[],"call":["canvas []= ","subcanvas [] ","(send\n  (lvar :y) :<<\n  (send\n    (lvar :m_o) :[]\n    (sym :y_shift))) | ","m_o [] ","y << ","(send\n  (lvar :x) :<<\n  (send\n    (lvar :m_o) :[]\n    (sym :x_shift))) | ","x << ","subcanvas width ","subcanvas height "," adam7_multiplier_offset ","(send\n  (lvar :y) :<<\n  (lvar :y_shift)) | ","(send\n  (lvar :x) :<<\n  (lvar :x_shift)) | ","y * + ","y * ","x * + ","x * ","0 upto ","subcanvas width - ","subcanvas height - ","(send\n  (lvar :y) :<<\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :y_shift))) | "," adam7_multiplier_offset  [] ","(send\n  (lvar :x) :<<\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :x_shift))) | "]}," ChunkyPNG Canvas Adam7Interlacing adam7_pass_sizes":{"type":"method","name":"adam7_pass_sizes","children":[],"call":[" adam7_pass_size ","(erange\n  (int 0)\n  (int 7)) map "]}," ChunkyPNG Canvas Adam7Interlacing adam7_pass_size":{"type":"method","name":"adam7_pass_size","children":[],"call":["(send\n  (send\n    (send\n      (lvar :original_height) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :y_offset))) :+\n    (begin\n      (send\n        (int 1) :<<\n        (send\n          (lvar :m_o) :[]\n          (sym :y_shift))))) :-\n  (int 1)) >> ","m_o [] ","original_height - + - ","original_height - + ","1 << ","original_height - ","(send\n  (send\n    (send\n      (lvar :original_width) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :x_offset))) :+\n    (begin\n      (send\n        (int 1) :<<\n        (send\n          (lvar :m_o) :[]\n          (sym :x_shift))))) :-\n  (int 1)) >> ","original_width - + - ","original_width - + ","original_width - "," adam7_multiplier_offset ","(send\n  (send\n    (send\n      (lvar :original_height) :-\n      (lvar :y_offset)) :+\n    (begin\n      (send\n        (int 1) :<<\n        (lvar :y_shift)))) :-\n  (int 1)) >> ","(send\n  (send\n    (send\n      (lvar :original_width) :-\n      (lvar :x_offset)) :+\n    (begin\n      (send\n        (int 1) :<<\n        (lvar :x_shift)))) :-\n  (int 1)) >> ","(send\n  (begin\n    (send\n      (lvar :original_height) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :y_offset)))) :/\n  (send\n    (send\n      (lvar :m_o) :[]\n      (sym :y_multiplier)) :to_f)) ceil ","(send\n  (lvar :original_height) :-\n  (send\n    (lvar :m_o) :[]\n    (sym :y_offset))) / ","m_o [] to_f ","(send\n  (begin\n    (send\n      (lvar :original_width) :-\n      (send\n        (lvar :m_o) :[]\n        (sym :x_offset)))) :/\n  (send\n    (send\n      (lvar :m_o) :[]\n      (sym :x_multiplier)) :to_f)) ceil ","(send\n  (lvar :original_width) :-\n  (send\n    (lvar :m_o) :[]\n    (sym :x_offset))) / ","(send\n  (send\n    (send\n      (lvar :original_height) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :y_offset))) :+\n    (begin\n      (send\n        (int 1) :<<\n        (send\n          (lvar : adam7_multiplier_offset ) :[]\n          (sym :y_shift))))) :-\n  (int 1)) >> "," adam7_multiplier_offset  [] ","(send\n  (send\n    (send\n      (lvar :original_width) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :x_offset))) :+\n    (begin\n      (send\n        (int 1) :<<\n        (send\n          (lvar : adam7_multiplier_offset ) :[]\n          (sym :x_shift))))) :-\n  (int 1)) >> ","(send\n  (begin\n    (send\n      (lvar :original_height) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :y_offset)))) :/\n  (send\n    (send\n      (lvar : adam7_multiplier_offset ) :[]\n      (sym :y_multiplier)) :to_f)) ceil ","(send\n  (lvar :original_height) :-\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :y_offset))) / "," adam7_multiplier_offset  [] to_f ","(send\n  (begin\n    (send\n      (lvar :original_width) :-\n      (send\n        (lvar : adam7_multiplier_offset ) :[]\n        (sym :x_offset)))) :/\n  (send\n    (send\n      (lvar : adam7_multiplier_offset ) :[]\n      (sym :x_multiplier)) :to_f)) ceil ","(send\n  (lvar :original_width) :-\n  (send\n    (lvar : adam7_multiplier_offset ) :[]\n    (sym :x_offset))) / "]}," ChunkyPNG Canvas Adam7Interlacing adam7_multiplier_offset":{"type":"method","name":"adam7_multiplier_offset","children":[],"call":["8 >> ","pass >> ","pass & == ","pass & ","pass == ","3 - ","(send\n  (lvar :pass) :-\n  (int 1)) >> ","pass - ","(send\n  (lvar :pass) :+\n  (int 1)) >> ","pass + "]}," ChunkyPNG Datastream empty_bytearray":{"type":"method","name":"empty_bytearray","children":[],"call":[]}," ChunkyPNG Datastream imagedata":{"type":"method","name":"imagedata","children":[],"call":["ChunkyPNG Chunk ImageData  combine_chunks "," data_chunks "]}," Object tap":{"type":"method","name":"tap","children":[],"call":[" block_given? "]}," ChunkyPNG Color pass_bytesize":{"type":"method","name":"pass_bytesize","children":[],"call":["(send\n  (send nil :scanline_bytesize\n    (lvar :color_mode)\n    (lvar :depth)\n    (lvar :width)) :+\n  (int 1)) * "," scanline_bytesize + "," scanline_bytesize ","height == ","width == "]}," ChunkyPNG Color scanline_bytesize":{"type":"method","name":"scanline_bytesize","children":[],"call":["(send\n  (begin\n    (send\n      (send nil :pixel_bitsize\n        (lvar :color_mode)\n        (lvar :depth)) :*\n      (lvar :width))) :+\n  (int 7)) >> ","(send\n  (send nil :pixel_bitsize\n    (lvar :color_mode)\n    (lvar :depth)) :*\n  (lvar :width)) + "," pixel_bitsize * "," pixel_bitsize "]}," ChunkyPNG Color pixel_bitsize":{"type":"method","name":"pixel_bitsize","children":[],"call":[" samples_per_pixel * "," samples_per_pixel "]}," ChunkyPNG Color pixel_bytesize":{"type":"method","name":"pixel_bytesize","children":[],"call":["(send\n  (send nil :pixel_bitsize\n    (lvar :color_mode)\n    (lvar :depth)) :+\n  (int 7)) >> "," pixel_bitsize + "," pixel_bitsize ","depth < "]}," ChunkyPNG Color samples_per_pixel":{"type":"method","name":"samples_per_pixel","children":[],"call":[" raise "]}," ChunkyPNG Canvas inspect":{"type":"method","name":"inspect","children":[],"call":["inspected << ","inspected << << << ","inspected << << ","(send\n  (send nil :row\n    (lvar :y)) :map) join ","ChunkyPNG Color  to_hex "," row map "," row "," height "," width "," class name "," class ","(str \"<\") +@ ","(str \"<\") +@  << ","(str \"<\") +@  << << << ","(str \"<\") +@  << << "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_method":{"type":"method","name":"decode_png_pixels_from_scanline_method","children":[],"call":[" raise "," respond_to? "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_16bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_16bit","children":[],"call":["ChunkyPNG Color  grayscale "," decode_png_resample_16bit_value ","values map ","stream unpack ","pos + ","stream unpack  map "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_8bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_8bit","children":[],"call":["ChunkyPNG Color  grayscale ","stream getbyte ","pos + ","(irange\n  (int 1)\n  (lvar :width)) map "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_4bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_4bit","children":[],"call":["ChunkyPNG Color  grayscale "," decode_png_resample_4bit_value "," decode_png_extract_4bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map "," decode_png_resample_4bit_ decode_png_extract_4bit_value  "," decode_png_extract_4bit_ decode_png_extract_4bit_value  "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_2bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_2bit","children":[],"call":["ChunkyPNG Color  grayscale "," decode_png_resample_2bit_value "," decode_png_extract_2bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map "," decode_png_resample_2bit_ decode_png_extract_2bit_value  "," decode_png_extract_2bit_ decode_png_extract_2bit_value  "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_1bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_1bit","children":[],"call":["value == "," decode_png_extract_1bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map "," decode_png_extract_1bit_value  == "," decode_png_extract_1bit_ decode_png_extract_1bit_value  "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_alpha_16bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_alpha_16bit","children":[],"call":["pixels << ","ChunkyPNG Color  grayscale_alpha "," decode_png_resample_16bit_value ","stream unpack each_slice ","stream unpack ","width * ","pos + "," tap "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_grayscale_alpha_8bit":{"type":"method","name":"decode_png_pixels_from_scanline_grayscale_alpha_8bit","children":[],"call":["ChunkyPNG Color  grayscale_alpha ","stream getbyte ","pos + + ","pos + ","i * ","(erange\n  (int 0)\n  (lvar :width)) map "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_truecolor_16bit":{"type":"method","name":"decode_png_pixels_from_scanline_truecolor_16bit","children":[],"call":["pixels << ","ChunkyPNG Color  rgb "," decode_png_resample_16bit_value ","stream unpack each_slice ","stream unpack ","width * ","pos + "," tap "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_truecolor_8bit":{"type":"method","name":"decode_png_pixels_from_scanline_truecolor_8bit","children":[],"call":["c | ","stream unpack map ","stream unpack ","(str \"@\") << ","NX * ","pos + "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_truecolor_alpha_16bit":{"type":"method","name":"decode_png_pixels_from_scanline_truecolor_alpha_16bit","children":[],"call":["pixels << ","ChunkyPNG Color  rgba "," decode_png_resample_16bit_value ","stream unpack each_slice ","stream unpack ","width * ","pos + "," tap "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_truecolor_alpha_8bit":{"type":"method","name":"decode_png_pixels_from_scanline_truecolor_alpha_8bit","children":[],"call":["stream unpack ","pos + "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_indexed_8bit":{"type":"method","name":"decode_png_pixels_from_scanline_indexed_8bit","children":[],"call":[" decoding_palette [] ","stream getbyte ","pos + "," decoding_palette ","(irange\n  (int 1)\n  (lvar :width)) map ","decoding_palette [] "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_indexed_4bit":{"type":"method","name":"decode_png_pixels_from_scanline_indexed_4bit","children":[],"call":[" decoding_palette [] "," decoding_palette "," decode_png_extract_4bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map ","decoding_palette [] "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_indexed_2bit":{"type":"method","name":"decode_png_pixels_from_scanline_indexed_2bit","children":[],"call":[" decoding_palette [] "," decoding_palette "," decode_png_extract_2bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map ","decoding_palette [] "]}," ChunkyPNG Canvas PNGDecoding decode_png_pixels_from_scanline_indexed_1bit":{"type":"method","name":"decode_png_pixels_from_scanline_indexed_1bit","children":[],"call":[" decoding_palette [] "," decoding_palette "," decode_png_extract_1bit_value ","stream getbyte ","pos + + ","index >> ","pos + ","(erange\n  (int 0)\n  (lvar :width)) map ","decoding_palette [] "]}," ChunkyPNG Canvas PNGDecoding decode_png_resample_2bit_value":{"type":"method","name":"decode_png_resample_2bit_value","children":[],"call":["value << | | | ","value << | | ","value << ","value << | "]}," ChunkyPNG Canvas PNGDecoding decode_png_resample_4bit_value":{"type":"method","name":"decode_png_resample_4bit_value","children":[],"call":["value << | ","value << "]}," ChunkyPNG Canvas PNGDecoding decode_png_resample_16bit_value":{"type":"method","name":"decode_png_resample_16bit_value","children":[],"call":["value >> "]}," ChunkyPNG Canvas PNGDecoding decode_png_extract_1bit_value":{"type":"method","name":"decode_png_extract_1bit_value","children":[],"call":["(send\n  (lvar :byte) :&\n  (begin\n    (send\n      (int 1) :<<\n      (lvar :bitshift)))) >> ","byte & ","1 << ","7 - ","index & ","(send\n  (lvar :byte) :&\n  (begin\n    (send\n      (int 1) :<<\n      (lvar :7 - )))) >> "]}," ChunkyPNG Canvas PNGDecoding decode_png_extract_2bit_value":{"type":"method","name":"decode_png_extract_2bit_value","children":[],"call":["(send\n  (lvar :byte) :&\n  (begin\n    (send\n      (int 3) :<<\n      (lvar :bitshift)))) >> ","byte & ","3 << ","6 - ","(send\n  (lvar :index) :&\n  (int 3)) << ","index & ","(send\n  (lvar :byte) :&\n  (begin\n    (send\n      (int 3) :<<\n      (lvar :6 - )))) >> "]}," ChunkyPNG Canvas PNGDecoding decode_png_extract_4bit_value":{"type":"method","name":"decode_png_extract_4bit_value","children":[],"call":["byte & ","(send\n  (lvar :byte) :&\n  (int 240)) >> ","index & == ","index & "]}," ChunkyPNG Chunk ImageData read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Palette determine_bit_depth":{"type":"method","name":"determine_bit_depth","children":[],"call":[" size "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_method":{"type":"method","name":"encode_png_pixels_to_scanline_method","children":[],"call":[" raise "," respond_to? "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_grayscale_alpha_8bit":{"type":"method","name":"encode_png_pixels_to_scanline_grayscale_alpha_8bit","children":[],"call":["pixels pack "," width "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_grayscale_8bit":{"type":"method","name":"encode_png_pixels_to_scanline_grayscale_8bit","children":[],"call":["(send\n  (lvar :pixels) :map) pack "," width ","p >> ","pixels map "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_indexed_8bit":{"type":"method","name":"encode_png_pixels_to_scanline_indexed_8bit","children":[],"call":["(send\n  (lvar :pixels) :map) pack "," width "," encoding_palette index "," encoding_palette ","pixels map "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_indexed_4bit":{"type":"method","name":"encode_png_pixels_to_scanline_indexed_4bit","children":[],"call":["chars pack ","chars << ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 4)) | "," encoding_palette index "," encoding_palette "," encoding_palette index << ","pixels each_slice "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_indexed_2bit":{"type":"method","name":"encode_png_pixels_to_scanline_indexed_2bit","children":[],"call":["chars pack ","chars << ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 6)) | | | "," encoding_palette index "," encoding_palette ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 6)) | | "," encoding_palette index << ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 6)) | ","pixels each_slice "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_indexed_1bit":{"type":"method","name":"encode_png_pixels_to_scanline_indexed_1bit","children":[],"call":["chars pack ","chars << ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | | | | | | "," encoding_palette index "," encoding_palette ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | | | | | "," encoding_palette index << ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | | | | ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | | | ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | | ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | | ","(send\n  (send\n    (send nil :encoding_palette) :index\n    (lvar :p1)) :<<\n  (int 7)) | ","pixels each_slice "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_truecolor_alpha_8bit":{"type":"method","name":"encode_png_pixels_to_scanline_truecolor_alpha_8bit","children":[],"call":["pixels pack "," width "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_truecolor_8bit":{"type":"method","name":"encode_png_pixels_to_scanline_truecolor_8bit","children":[],"call":["pixels pack ","x + ","NX * "," width "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline_paeth":{"type":"method","name":"encode_png_scanline_paeth","children":[],"call":["(const\n  (const nil :ChunkyPNG) :FILTER_PAETH) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :i)) :-\n  (lvar :pr)) % ","original_bytes [] - ","original_bytes [] ","pb <= ","pa <= ","(send\n  (lvar :p) :-\n  (lvar :c)) abs ","p - ","(send\n  (lvar :p) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) abs ","a + - ","a + ","previous_bytes [] ","i - ","i >= ","original_bytes length times ","original_bytes length ","(previous_bytes [] onst\n  (previous_bytes [] onst nil :ChunkyPNG) :FILTER_PAETH) + ","enprevious_bytes [] oded_bytes []= ","encoded_previous_bytes [] ytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :i)) :-\n  (lvar :a + - r)) % ","(send\n  (send\n    (lvar :original_previous_bytes [] ytes) :[]\n    (lvar :i)) :-\n  (lvar :pr)) % ","(send\n  (send\n    (lvoriginal_bytes [] r :originoriginal_bytes [] l_bytes) :[]\n    (lvoriginal_bytes [] r :i)) :-\n  (lvoriginal_bytes [] r :pr)) % ","original_previous_bytes [] ytes [] - ","originoriginal_bytes [] l_bytes [] - ","original_previous_bytes [] ytes [] ","originoriginal_bytes [] l_bytes [] ","(send\n  (lvar :p) :-\n  (lvar :b)) abs  <= ","a + - b <= ","pprevious_bytes []  <= ","(send\n  (lvar :p) :-\n  (lvar :a)) abs  <= ","a + - a <= ","poriginal_bytes []  <= ","(send\n  (lvar :a + - ) :-\n  (lvar :c)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) abs ","(send\n  (lvar :p) :-\n  (lvar :c)) aprevious_bytes [] s ","(send\n  (lvoriginal_bytes [] r :p) :-\n  (lvoriginal_bytes [] r :c)) original_bytes [] bs ","a + -  - ","(send\n  (lvar :a + - ) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) aprevious_bytes [] s ","(send\n  (lvoriginal_bytes [] r :p) :-\n  (lvoriginal_bytes [] r :b)) original_bytes [] bs ","(send\n  (lvar :a + - ) :-\n  (lvar :a)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) aprevious_bytes [] s ","(send\n  (lvoriginal_bytes [] r :p) :-\n  (lvoriginal_bytes [] r :original_bytes [] )) original_bytes [] bs ","original_bytes []  + - ","original_bytes []  + ","a + - revious_bytes [] ","previous_previous_bytes [] ytes [] ","original_previous_bytes [] ytes length times ","originoriginal_bytes [] l_bytes length times ","original_previous_bytes [] ytes length ","originoriginal_bytes [] l_bytes length "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline_average":{"type":"method","name":"encode_png_scanline_average","children":[],"call":["(const\n  (const nil :ChunkyPNG) :FILTER_AVERAGE) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (send\n    (begin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :b) :/\n          (int 2)))) :floor)) % ","original_bytes [] - ","(send\n  (lvar :a) :+\n  (send\n    (lvar :b) :/\n    (int 2))) floor ","a + ","b / ","original_bytes [] ","previous_bytes [] ","index - ","index >= ","original_bytes length times ","original_bytes length ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :a) :+\n          (lvar :b))) :>>\n      (int 1)))) % ","(send\n  (lvar :a) :+\n  (lvar :b)) >> ","encoded_previous_bytes [] ytes []= ","(send\n  (send\n    (lvar :original_previous_bytes [] ytes) :[]\n    (lvar :index)) :-\n  (send\n    (previous_bytes [] egin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :previous_bytes [] ) :/\n          (int 2)))) :floor)) % ","(send\n  (send\n    (lvoriginal_bytes [] r :originoriginal_bytes [] l_bytes) :[]\n    (lvoriginal_bytes [] r :index)) :-\n  (send\n    (begin\n      (send\n        (lvoriginal_bytes [] r :original_bytes [] ) :+\n        (send\n          (lvoriginal_bytes [] r :b) :/\n          (int 2)))) :floor)) % ","original_previous_bytes [] ytes [] - ","originoriginal_bytes [] l_bytes [] - ","(send\n  (lvar :a) :+\n  (send\n    (lvar :previous_bytes [] ) :/\n    (int 2))) floor ","(send\n  (lvoriginal_bytes [] r :original_bytes [] ) :+\n  (send\n    (lvoriginal_bytes [] r :b) :/\n    (int 2))) floor ","original_bytes []  + ","previous_bytes []  / ","original_previous_bytes [] ytes [] ","originoriginal_bytes [] l_bytes [] ","previous_previous_bytes [] ytes [] ","original_previous_bytes [] ytes length times ","originoriginal_bytes [] l_bytes length times ","original_previous_bytes [] ytes length ","originoriginal_bytes [] l_bytes length ","(send\n  (send\n    (lvar :original_previous_bytes [] ytes) :[]\n    (lvar :index)) :-\n  (previous_bytes [] egin\n    (send\n      (previous_bytes [] egin\n        (send\n          (lvar :a) :+\n          (lvar :previous_bytes [] ))) :>>\n      (int 1)))) % ","(send\n  (send\n    (lvoriginal_bytes [] r :originoriginal_bytes [] l_bytes) :[]\n    (lvoriginal_bytes [] r :index)) :-\n  (begin\n    (send\n      (begin\n        (send\n          (lvoriginal_bytes [] r :original_bytes [] ) :+\n          (lvoriginal_bytes [] r :b))) :>>\n      (int 1)))) % ","(send\n  (lvar :a) :+\n  (lvar :previous_bytes [] )) >> ","(send\n  (lvoriginal_bytes [] r :original_bytes [] ) :+\n  (lvoriginal_bytes [] r :b)) >> "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline_up":{"type":"method","name":"encode_png_scanline_up","children":[],"call":["(const\n  (const nil :ChunkyPNG) :FILTER_UP) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (lvar :b)) % ","original_bytes [] - ","original_bytes [] ","previous_bytes [] ","original_bytes length times ","original_bytes length ","encoded_previous_bytes [] ytes []= ","(send\n  (send\n    (lvar :original_previous_bytes [] ytes) :[]\n    (lvar :index)) :-\n  (lvar :previous_bytes [] )) % ","original_previous_bytes [] ytes [] - ","original_previous_bytes [] ytes [] ","previous_previous_bytes [] ytes [] ","original_previous_bytes [] ytes length times ","original_previous_bytes [] ytes length "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline_sub":{"type":"method","name":"encode_png_scanline_sub","children":[],"call":["(const\n  (const nil :ChunkyPNG) :FILTER_SUB) + ","encoded_bytes []= ","(send\n  (send\n    (lvar :original_bytes) :[]\n    (lvar :index)) :-\n  (lvar :a)) % ","original_bytes [] - ","original_bytes [] ","index - ","index >= ","original_bytes length times ","original_bytes length ","(send\n  (send\n    (lvoriginal_bytes [] r :originoriginal_bytes [] l_bytes) :[]\n    (lvoriginal_bytes [] r :index)) :-\n  (lvoriginal_bytes [] r :original_bytes [] )) % ","originoriginal_bytes [] l_bytes [] - ","originoriginal_bytes [] l_bytes [] ","originoriginal_bytes [] l_bytes length times ","originoriginal_bytes [] l_bytes length "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline_none":{"type":"method","name":"encode_png_scanline_none","children":[],"call":["(const\n  (const nil :ChunkyPNG) :FILTER_NONE) + "]}," ChunkyPNG Canvas PNGEncoding encode_png_scanline":{"type":"method","name":"encode_png_scanline","children":[],"call":[" raise "," encode_png_scanline_paeth "," encode_png_scanline_average "," encode_png_scanline_up "," encode_png_scanline_sub "," encode_png_scanline_none "]}," ChunkyPNG Canvas PNGEncoding each_scanline":{"type":"method","name":"each_scanline","children":[],"call":[" pixels [] "," width "," width * "," pixels "," height times "," height "]}," ChunkyPNG Canvas PNGEncoding encode_png":{"type":"method","name":"encode_png","children":[],"call":["result []= "," encode_png_pixelstream ","encoding [] ","encoding [] to_trns_chunk ","encoding [] opaque? ","encoding [] to_plte_chunk ","encoding [] == "," height "," width "," determine_png_encoding "," encoding_palette to_trns_chunk "," encoding_palette "," encoding_palette opaque? "," encoding_palette to_plte_chunk "," determine_png_encoding  [] "," determine_png_encoding  [] to_trns_chunk "," determine_png_encoding  [] opaque? "," determine_png_encoding  [] to_plte_chunk "," determine_png_encoding  [] == "," determine_png_ determine_png_encoding  ","  determine_png_encoding _palette to_trns_chunk ","  determine_png_encoding _palette ","  determine_png_encoding _palette opaque? ","  determine_png_encoding _palette to_plte_chunk "]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline_paeth":{"type":"method","name":"decode_png_scanline_paeth","children":[],"call":["bytes []= ","(send\n  (lvar :byte) :+\n  (lvar :pr)) % ","byte + ","pb <= ","pa <= ","(send\n  (lvar :p) :-\n  (lvar :c)) abs ","p - ","(send\n  (lvar :p) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) abs ","a + - ","a + ","previous_bytes [] ","i - ","i >= ","bytes [] ","bytes each_with_index ","previous_bytes [] ytes []= ","(send\n  (lvar :byte) :+\n  (lvar :a + - r)) % ","(send\n  (lvar :previous_bytes [] yte) :+\n  (lvar :pr)) % ","(send\n  (lvbytes [] r :byte) :+\n  (lvbytes [] r :pr)) % ","previous_bytes [] yte + ","(send\n  (lvar :p) :-\n  (lvar :b)) abs  <= ","a + - b <= ","pprevious_bytes []  <= ","(send\n  (lvar :p) :-\n  (lvar :a)) abs  <= ","a + - a <= ","pbytes []  <= ","(send\n  (lvar :a + - ) :-\n  (lvar :c)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) abs ","(send\n  (lvar :p) :-\n  (lvar :c)) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :c)) bytes [] bs ","a + -  - ","(send\n  (lvar :a + - ) :-\n  (lvar :b)) abs ","(send\n  (lvar :p) :-\n  (lvar :previous_bytes [] )) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :b)) bytes [] bs ","(send\n  (lvar :a + - ) :-\n  (lvar :a)) abs ","(send\n  (lvar :p) :-\n  (lvar :a)) aprevious_bytes [] s ","(send\n  (lvbytes [] r :p) :-\n  (lvbytes [] r :bytes [] )) bytes [] bs ","bytes []  + - ","bytes []  + ","a + - revious_bytes [] ","previous_previous_bytes [] ytes [] ","previous_bytes [] ytes [] ","bytes eaprevious_bytes [] h_with_index ","previous_bytes [] ytes each_with_index ","bytes ebytes [] ch_with_index "]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline_average":{"type":"method","name":"decode_png_scanline_average","children":[],"call":["bytes []= ","(send\n  (lvar :byte) :+\n  (send\n    (begin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :b) :/\n          (int 2)))) :floor)) % ","byte + ","(send\n  (lvar :a) :+\n  (send\n    (lvar :b) :/\n    (int 2))) floor ","a + ","b / ","previous_bytes [] ","bytes [] ","i - ","i >= ","bytes each_with_index ","(send\n  (lvar :byte) :+\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :a) :+\n          (lvar :b))) :>>\n      (int 1)))) % ","(send\n  (lvar :a) :+\n  (lvar :b)) >> ","previous_bytes [] ytes []= ","(send\n  (lvar :previous_bytes [] yte) :+\n  (send\n    (previous_bytes [] egin\n      (send\n        (lvar :a) :+\n        (send\n          (lvar :previous_bytes [] ) :/\n          (int 2)))) :floor)) % ","(send\n  (lvbytes [] r :byte) :+\n  (send\n    (begin\n      (send\n        (lvbytes [] r :bytes [] ) :+\n        (send\n          (lvbytes [] r :b) :/\n          (int 2)))) :floor)) % ","previous_bytes [] yte + ","(send\n  (lvar :a) :+\n  (send\n    (lvar :previous_bytes [] ) :/\n    (int 2))) floor ","(send\n  (lvbytes [] r :bytes [] ) :+\n  (send\n    (lvbytes [] r :b) :/\n    (int 2))) floor ","bytes []  + ","previous_bytes []  / ","previous_previous_bytes [] ytes [] ","previous_bytes [] ytes [] ","previous_bytes [] ytes each_with_index ","bytes ebytes [] ch_with_index ","(send\n  (lvar :previous_bytes [] yte) :+\n  (previous_bytes [] egin\n    (send\n      (previous_bytes [] egin\n        (send\n          (lvar :a) :+\n          (lvar :previous_bytes [] ))) :>>\n      (int 1)))) % ","(send\n  (lvbytes [] r :byte) :+\n  (begin\n    (send\n      (begin\n        (send\n          (lvbytes [] r :bytes [] ) :+\n          (lvbytes [] r :b))) :>>\n      (int 1)))) % ","(send\n  (lvar :a) :+\n  (lvar :previous_bytes [] )) >> ","(send\n  (lvbytes [] r :bytes [] ) :+\n  (lvbytes [] r :b)) >> "]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline_up":{"type":"method","name":"decode_png_scanline_up","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (send\n    (lvar :previous_bytes) :[]\n    (lvar :i))) % ","b + ","previous_bytes [] ","bytes each_with_index "]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline_sub":{"type":"method","name":"decode_png_scanline_sub","children":[],"call":["bytes []= ","(send\n  (lvar :b) :+\n  (begin\n    (if\n      (send\n        (lvar :i) :>=\n        (lvar :pixelsize))\n      (send\n        (lvar :bytes) :[]\n        (send\n          (lvar :i) :-\n          (lvar :pixelsize)))\n      (int 0)))) % ","b + ","bytes [] ","i - ","i >= ","bytes each_with_index "]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline_none":{"type":"method","name":"decode_png_scanline_none","children":[],"call":[]}," ChunkyPNG Canvas PNGDecoding decode_png_scanline":{"type":"method","name":"decode_png_scanline","children":[],"call":[" raise "," decode_png_scanline_paeth "," decode_png_scanline_average "," decode_png_scanline_up "," decode_png_scanline_sub "," decode_png_scanline_none "]}," ChunkyPNG Canvas include?":{"type":"method","name":"include?","children":[],"call":["(erange\n  (int 0)\n  (send nil :height)) include? "," height ","(erange\n  (int 0)\n  (send nil :width)) include? "," width "]}," ChunkyPNG Vector multiple_from_string":{"type":"method","name":"multiple_from_string","children":[],"call":[]}," ChunkyPNG Vector multiple_from_array":{"type":"method","name":"multiple_from_array","children":[],"call":[]}," ChunkyPNG Vector dimension":{"type":"method","name":"dimension","children":[],"call":["ChunkyPNG Dimension  new "," height "," width "]}," ChunkyPNG Vector height":{"type":"method","name":"height","children":[],"call":["1 + "," max_y - "," min_y "," max_y "]}," ChunkyPNG Vector width":{"type":"method","name":"width","children":[],"call":["1 + "," max_x - "," min_x "," max_x "]}," ChunkyPNG Vector offset":{"type":"method","name":"offset","children":[],"call":["ChunkyPNG Point  new "," min_y "," min_x "]}," ChunkyPNG Vector max_y":{"type":"method","name":"max_y","children":[],"call":[" y_range last "," y_range "]}," ChunkyPNG Vector min_y":{"type":"method","name":"min_y","children":[],"call":[" y_range first "," y_range "]}," ChunkyPNG Vector max_x":{"type":"method","name":"max_x","children":[],"call":[" x_range last "," x_range "]}," ChunkyPNG Vector min_x":{"type":"method","name":"min_x","children":[],"call":[" x_range first "," x_range "]}," ChunkyPNG Vector y_range":{"type":"method","name":"y_range","children":[],"call":["Range  new ","(send\n  (send nil :points) :map) minmax ","p y "," points map "," points "]}," ChunkyPNG Vector x_range":{"type":"method","name":"x_range","children":[],"call":["Range  new ","(send\n  (send nil :points) :map) minmax ","p x "," points map "," points "]}," ChunkyPNG Vector eql?":{"type":"method","name":"eql?","children":[],"call":["other points == "," points ","other points "]}," ChunkyPNG Vector each":{"type":"method","name":"each","children":[],"call":[" points each "," points "]}," ChunkyPNG Vector length":{"type":"method","name":"length","children":[],"call":[" points length "," points "]}," ChunkyPNG Vector edges":{"type":"method","name":"edges","children":[],"call":["Enumerator  new "," to_enum "]}," ChunkyPNG Vector each_edge":{"type":"method","name":"each_edge","children":[],"call":[" points first "," points "," points last "," points each_cons "," raise "," length < "," length "]}," ChunkyPNG Vector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Vector":{"type":"method","name":"Vector","children":[],"call":[]}," ChunkyPNG Point within_bounds?":{"type":"method","name":"within_bounds?","children":[],"call":["ChunkyPNG  Dimension include? ","ChunkyPNG  Dimension "]}," ChunkyPNG Point to_a":{"type":"method","name":"to_a","children":[],"call":[" y "," x "]}," ChunkyPNG Point <=>":{"type":"method","name":"<=>","children":[],"call":[" y <=> ","other y "," y "," x <=> ","other x "," x ","(send\n  (send nil :y) :<=>\n  (send\n    (lvar :other) :y)) == "]}," ChunkyPNG Point eql?":{"type":"method","name":"eql?","children":[],"call":["other y == "," y ","other y ","other x == "," x ","other x "]}," ChunkyPNG Point initialize":{"type":"method","name":"initialize","children":[],"call":["y to_i ","x to_i "]}," ChunkyPNG Point":{"type":"method","name":"Point","children":[],"call":[]}," ChunkyPNG Palette best_color_settings":{"type":"method","name":"best_color_settings","children":[],"call":[" opaque? "," determine_bit_depth "," indexable? "," grayscale? "," black_and_white? "]}," ChunkyPNG Palette black_and_white?":{"type":"method","name":"black_and_white?","children":[],"call":[" entries == "," entries "]}," ChunkyPNG Dimension to_a":{"type":"method","name":"to_a","children":[],"call":[" height "," width "]}," ChunkyPNG Dimension <=>":{"type":"method","name":"<=>","children":[],"call":["other area <=> "," area ","other area "]}," ChunkyPNG Dimension eql?":{"type":"method","name":"eql?","children":[],"call":["other height == "," height ","other height ","other width == "," width ","other width ","other respond_to? "]}," ChunkyPNG Dimension include?":{"type":"method","name":"include?","children":[],"call":["point y < "," height ","point y ","point y >= ","point x < "," width ","point x ","point x >= ","ChunkyPNG  Point ","ChunkyPNG  Point  y < ","ChunkyPNG  Point  y ","ChunkyPNG  Point  y >= ","ChunkyPNG  Point  x < ","ChunkyPNG  Point  x ","ChunkyPNG  Point  x >= "]}," ChunkyPNG Dimension area":{"type":"method","name":"area","children":[],"call":[" width * "," height "," width "]}," ChunkyPNG Dimension initialize":{"type":"method","name":"initialize","children":[],"call":["height to_i ","width to_i "]}," ChunkyPNG Dimension":{"type":"method","name":"Dimension","children":[],"call":[]}," Enumerable minmax":{"type":"method","name":"minmax","children":[],"call":[" max "," min "]}," ChunkyPNG Color html_color":{"type":"method","name":"html_color","children":[],"call":[" raise ","PREDEFINED_COLORS  [] | ","PREDEFINED_COLORS  [] ","PREDEFINED_COLORS  has_key? ","1 gsub downcase to_sym ","1 gsub downcase ","1 gsub ","(send\n  (send\n    (nth-ref 2) :to_f) :*\n  (float 255.0)) round ","2 to_f * ","2 to_f ","color_name to_s =~ ","color_name to_s ","PREDEFINED_COLORS  key? "]}," ChunkyPNG Color":{"type":"method","name":"Color","children":[],"call":[]}," ChunkyPNG Canvas replace_canvas!":{"type":"method","name":"replace_canvas!","children":[],"call":[" raise ","new_width * ","new_pixels length == ","new_pixels length "]}," ChunkyPNG Canvas include_point?":{"type":"method","name":"include_point?","children":[],"call":[" dimension include? ","ChunkyPNG  Point "," dimension "]}," ChunkyPNG Canvas set_pixel_if_within_bounds":{"type":"method","name":"set_pixel_if_within_bounds","children":[],"call":["@pixels []= ","y * + ","y * "," width "," include_xy? "]}," ChunkyPNG Canvas area":{"type":"method","name":"area","children":[],"call":[" pixels length "," pixels "]}," ChunkyPNG Canvas dimension":{"type":"method","name":"dimension","children":[],"call":["ChunkyPNG Dimension  new "," height "," width "]}," ChunkyPNG Canvas Resampling resample_nearest_neighbor":{"type":"method","name":"resample_nearest_neighbor","children":[],"call":[" dup resample_nearest_neighbor! "," dup ","resampled_image set_pixel "," get_pixel ","(send\n  (lvar :input_y) :-\n  (int 1)) max ","input_y - ","(send\n  (lvar :input_x) :-\n  (int 1)) max ","input_x - ","y - ","x - ","source_x to_i ","(send\n  (lvar :x) :-\n  (float 0.5)) * + ","(send\n  (lvar :x) :-\n  (float 0.5)) * ","source_y to_i ","(send\n  (lvar :y) :-\n  (float 0.5)) * + ","(send\n  (lvar :y) :-\n  (float 0.5)) * "," height to_f / ","new_height to_f "," height to_f "," height "," width to_f / ","new_width to_f "," width to_f "," width "," class new ","new_height to_i ","new_width to_i "," class "," class new  set_pixel ","(send\n  (lvar :source_y to_i ) :-\n  (int 1)) max ","source_y to_i  - ","(send\n  (lvar :source_x to_i ) :-\n  (int 1)) max ","source_x to_i  - ","(send\n  (lvar :x) :-\n  (float 0.5)) * +  to_i ","(send\n  (lvar :y) :-\n  (float 0.5)) * +  to_i "]}," ChunkyPNG Canvas Resampling resample_nearest_neighbor!":{"type":"method","name":"resample_nearest_neighbor!","children":[],"call":[" replace_canvas! ","new_height to_i ","new_width to_i ","pixels << "," get_pixel ","(send\n  (lvar :input_y) :-\n  (int 1)) max ","input_y - ","(send\n  (lvar :input_x) :-\n  (int 1)) max ","input_x - ","source_x to_i ","(send\n  (lvar :x) :-\n  (float 0.5)) * + ","(send\n  (lvar :x) :-\n  (float 0.5)) * ","x - ","source_y to_i ","(send\n  (lvar :y) :-\n  (float 0.5)) * + ","(send\n  (lvar :y) :-\n  (float 0.5)) * ","y - "," height to_f / ","new_height to_f "," height to_f "," height "," width to_f / ","new_width to_f "," width to_f "," width "," class new "," class ","pixels []= "," Array ","new_width * "," steps ","Array  new "," Array  << ","Array  new  << ","(send\n  (lvar :source_y to_i ) :-\n  (int 1)) max ","source_y to_i  - ","(send\n  (lvar :source_x to_i ) :-\n  (int 1)) max ","source_x to_i  - ","(send\n  (lvar :x) :-\n  (float 0.5)) * +  to_i ","(send\n  (lvar :y) :-\n  (float 0.5)) * +  to_i "," Array  []= ","Array  new  []= "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_grayscale_4bit":{"type":"method","name":"encode_png_pixels_to_scanline_grayscale_4bit","children":[],"call":["chars pack ","chars << ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (begin\n      (send\n        (begin\n          (send\n            (lvar :p1) :&\n            (int 65535))) :>>\n        (int 12))) :<<\n    (int 4))) | ","(send\n  (lvar :p2) :&\n  (int 65535)) >> ","p2 & ","p2 nil? ","(send\n  (begin\n    (send\n      (lvar :p1) :&\n      (int 65535))) :>>\n  (int 12)) << ","(send\n  (lvar :p1) :&\n  (int 65535)) >> ","p1 & ","p1 nil? ","pixels each_slice "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_grayscale_2bit":{"type":"method","name":"encode_png_pixels_to_scanline_grayscale_2bit","children":[],"call":["chars pack ","chars << ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 14)) :<<\n    (int 6))) | | | ","(send\n  (lvar :p4) :&\n  (int 65535)) >> ","p4 & ","p4 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 14)) :<<\n    (int 6))) | | ","(send\n  (lvar :p3) :&\n  (int 65535)) >> << ","(send\n  (lvar :p3) :&\n  (int 65535)) >> ","p3 & ","p3 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 14)) :<<\n    (int 6))) | ","(send\n  (lvar :p2) :&\n  (int 65535)) >> << ","(send\n  (lvar :p2) :&\n  (int 65535)) >> ","p2 & ","p2 nil? ","(send\n  (lvar :p1) :&\n  (int 65535)) >> << ","(send\n  (lvar :p1) :&\n  (int 65535)) >> ","p1 & ","p1 nil? ","pixels each_slice "]}," ChunkyPNG Canvas PNGEncoding encode_png_pixels_to_scanline_grayscale_1bit":{"type":"method","name":"encode_png_pixels_to_scanline_grayscale_1bit","children":[],"call":["chars pack ","chars << ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | | | | | | ","(send\n  (lvar :p8) :&\n  (int 65535)) >> ","p8 & ","p8 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | | | | | ","(send\n  (lvar :p7) :&\n  (int 65535)) >> << ","(send\n  (lvar :p7) :&\n  (int 65535)) >> ","p7 & ","p7 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | | | | ","(send\n  (lvar :p6) :&\n  (int 65535)) >> << ","(send\n  (lvar :p6) :&\n  (int 65535)) >> ","p6 & ","p6 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | | | ","(send\n  (lvar :p5) :&\n  (int 65535)) >> << ","(send\n  (lvar :p5) :&\n  (int 65535)) >> ","p5 & ","p5 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | | ","(send\n  (lvar :p4) :&\n  (int 65535)) >> << ","(send\n  (lvar :p4) :&\n  (int 65535)) >> ","p4 & ","p4 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | | ","(send\n  (lvar :p3) :&\n  (int 65535)) >> << ","(send\n  (lvar :p3) :&\n  (int 65535)) >> ","p3 & ","p3 nil? ","(if\n  (send\n    (lvar :p1) :nil?)\n  (int 0)\n  (send\n    (send\n      (begin\n        (send\n          (lvar :p1) :&\n          (int 65535))) :>>\n      (int 15)) :<<\n    (int 7))) | ","(send\n  (lvar :p2) :&\n  (int 65535)) >> << ","(send\n  (lvar :p2) :&\n  (int 65535)) >> ","p2 & ","p2 nil? ","(send\n  (lvar :p1) :&\n  (int 65535)) >> << ","(send\n  (lvar :p1) :&\n  (int 65535)) >> ","p1 & ","p1 nil? ","pixels each_slice "]}," ChunkyPNG Canvas Operations rotate_180!":{"type":"method","name":"rotate_180!","children":[],"call":[" pixels reverse! "," pixels "]}," ChunkyPNG Canvas Operations rotate_left!":{"type":"method","name":"rotate_left!","children":[],"call":[" replace_canvas! "," width "," height "," column ","(send\n  (send nil :width) :-\n  (int 1)) downto "," width - "]}," ChunkyPNG Canvas Operations rotate_right!":{"type":"method","name":"rotate_right!","children":[],"call":[" replace_canvas! "," width "," height "," column reverse "," column ","0 upto "," width - "," class new "," class "]}," ChunkyPNG Canvas Operations flip_vertically!":{"type":"method","name":"flip_vertically!","children":[],"call":[" replace_row! "," row reverse "," row "," height "]}," ChunkyPNG Canvas Operations flip_horizontally!":{"type":"method","name":"flip_horizontally!","children":[],"call":[" replace_row! "," row "," height - ","y + "," height ","(send\n  (send nil :height) :-\n  (int 1)) >> "]}," ChunkyPNG Canvas Operations crop!":{"type":"method","name":"crop!","children":[],"call":[" replace_canvas! "," pixels slice ","(send\n  (lvar :cy) :+\n  (lvar :y)) * + ","(send\n  (lvar :cy) :+\n  (lvar :y)) * "," width ","cy + "," pixels "," raise ","crop_height + > "," height ","crop_height + ","crop_width + > ","crop_width + ","new_pixels concat "," width * ","y * ","x == ","crop_width == "]}," ChunkyPNG Canvas Operations replace!":{"type":"method","name":"replace!","children":[],"call":[" pixels []= ","other pixels [] ","other width ","y * ","other pixels ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * + ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * "," width ","y + "," pixels ","other height "," check_size_constraints! ","y * + ","(send\n  (lvar :y) :+\n  (lvar :offset_y)) * + + "]}," ChunkyPNG Canvas Operations compose!":{"type":"method","name":"compose!","children":[],"call":[" set_pixel ","ChunkyPNG Color  compose "," get_pixel ","y + ","x + ","other get_pixel ","other width ","other height "," check_size_constraints! "]}," ChunkyPNG Canvas Masking change_mask_color!":{"type":"method","name":"change_mask_color!","children":[],"call":["(send\n  (lvar :new_color) :&\n  (int 4294967040)) | ","ChunkyPNG Color  a ","new_color & "," pixels map! "," pixels "," raise "," palette opaque_palette size != "," palette opaque_palette size "," palette opaque_palette "," palette "]}," ChunkyPNG Canvas Masking extract_mask":{"type":"method","name":"extract_mask","children":[],"call":[" class new "," height "," width "," class ","base_pixels << ","mask_pixels << ","mask_color & ","ChunkyPNG Color  decompose_color ","ChunkyPNG Color  alpha_decomposable? "," pixels each "," pixels "]}," ChunkyPNG Canvas Masking change_theme_color!":{"type":"method","name":"change_theme_color!","children":[],"call":[" replace! ","base compose! ","mask change_mask_color! "," extract_mask "]}," ChunkyPNG Canvas Drawing circle":{"type":"method","name":"circle","children":[],"call":[" line ","y0 + ","x0 + ","x0 - ","y > ","length > ","y0 - ","lines each_with_index ","fill_color == "," compose_pixel ","x == ","lines []= ","y - ","(send\n  (lvar :lines) :[]\n  (lvar :x)) min ","lines [] ","x - ","(send\n  (lvar :lines) :[]\n  (lvar :y)) min ","f >= ","x < ","radius - ","-2 * ","1 - ","ChunkyPNG  Color ","ChunkyPNG Color  parse ","y_offset > ","1 - ill_color == ","ChunkyPNG  Color  == ","ChunkyPNG Color  parse  == ","1 -  >= ","y_o1 - 1 - set > "]}," ChunkyPNG Canvas Drawing polygon":{"type":"method","name":"polygon","children":[],"call":[" line ","vector each_edge "," compose_pixel ","intersections [] upto ","intersections [] ","i + ","0 step ","intersections length - ","intersections length ","intersections sort! ","intersections << ","(send\n  (send\n    (lvar :p1) :x) :+\n  (send\n    (send\n      (send\n        (begin\n          (send\n            (lvar :y) :-\n            (send\n              (lvar :p1) :y))) :to_f) :/\n      (begin\n        (send\n          (send\n            (lvar :p2) :y) :-\n          (send\n            (lvar :p1) :y)))) :*\n    (begin\n      (send\n        (send\n          (lvar :p2) :x) :-\n        (send\n          (lvar :p1) :x))))) round ","p1 x + ","(send\n  (lvar :y) :-\n  (send\n    (lvar :p1) :y)) to_f / * ","p2 x - ","p1 x ","p2 x ","(send\n  (lvar :y) :-\n  (send\n    (lvar :p1) :y)) to_f / ","p2 y - ","p1 y ","p2 y ","(send\n  (lvar :y) :-\n  (send\n    (lvar :p1) :y)) to_f ","y - ","p1 y >= ","p2 y < ","p2 y >= ","p1 y < ","vector edges each ","vector edges ","vector y_range each ","vector y_range ","fill_color == ","ChunkyPNG  Color "," raise ","path length < ","path length ","ChunkyPNG  Vector ","ChunkyPNG Color  parse ","ChunkyPNG  Vector  each_edge ","ChunkyPNG  Vector  edges each ","ChunkyPNG  Vector  edges ","ChunkyPNG  Vector  y_range each ","ChunkyPNG  Vector  y_range ","ChunkyPNG  Color  == ","ChunkyPNG Color  parse  == "]}," ChunkyPNG Canvas Drawing compose_pixel":{"type":"method","name":"compose_pixel","children":[],"call":[" set_pixel ","ChunkyPNG Color  compose "," get_pixel ","point y ","point x ","ChunkyPNG  Color ","args last "," include? ","ChunkyPNG  Point ","args [] ","args first ","args length == ","args length "," compose_pixel_unsafe ","ChunkyPNG Color  parse "," include_xy? ","ChunkyPNG  Point  y ","ChunkyPNG  Point  x "]}," ChunkyPNG Vector to_a":{"type":"method","name":"to_a","children":[],"call":[" edges "]}," ChunkyPNG Color parse":{"type":"method","name":"parse","children":[],"call":[" raise ","source inspect ","ChunkyPNG Color  html_color ","source to_s ","ChunkyPNG Color  from_hex ","source to_s to_i ","source kind_of? "," html_color "," from_hex ","source is_a? "]}," ChunkyPNG Canvas Drawing compose_pixel_unsafe":{"type":"method","name":"compose_pixel_unsafe","children":[],"call":[" set_pixel ","ChunkyPNG Color  compose "," get_pixel "]}," ChunkyPNG Vector []":{"type":"method","name":"[]","children":[],"call":[" points [] "," points "]}," ChunkyPNG Canvas Drawing binomial_coefficient":{"type":"method","name":"binomial_coefficient","children":[],"call":["fact_n / ","fact_k * ","carry * ","(irange\n  (int 2)\n  (begin\n    (send\n      (lvar :n) :-\n      (lvar :k)))) inject ","n - ","(irange\n  (int 2)\n  (lvar :k)) inject ","(irange\n  (int 2)\n  (lvar :n)) inject ","n < ","k == ","n == "]}," ChunkyPNG Canvas Drawing bezier_curve":{"type":"method","name":"bezier_curve","children":[],"call":[" line_xiaolin_wu ","p2 y round ","p2 y ","p2 x round ","p2 x ","p1 y round ","p1 y ","p1 x round ","p1 x ","curve_points each_cons ","curve_points << ","(send\n  (lvar :t_f) :**\n  (lvar :n)) * ","points [] y ","points [] ","t_f ** ","cur_p y ","points [] x ","cur_p x ","(send\n  (lvar :bicof) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t_f))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * * ","(send\n  (lvar :bicof) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t_f))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * ","bicof * ","(send\n  (int 1) :-\n  (lvar :t_f)) ** ","n - ","1 - "," binomial_coefficient ","points length - ","points length ","(send\n  (begin\n    (send\n      (int 1) :-\n      (lvar :t_f))) :**\n  (lvar :n)) * ","t / ","ChunkyPNG Point  new ","t <= ","Array  new "," line ","ChunkyPNG  Vector "," lipoints length - e_xiaolipoints length - _wu ","p2 y roupoints length - d ","p2 x roupoints length - d ","p1 y roupoints length - d ","p1 x roupoints length - d ","curve_poipoints length - ts each_copoints length - s ","Array  new  each_cons ","curve_ChunkyPNG  Vector  each_cons ","curve_poipoints length - ts << ","Array  new  << ","curve_ChunkyPNG  Vector  << ","(send\n  (lvar :t / ) :**\n  (lvar :n)) * ","(sepoints length - d\n  (lvar :t_f) :**\n  (lvar :points length - )) * ","poipoints length - ts [] y ","ChunkyPNG  Vector  [] y ","poipoints length - ts [] ","ChunkyPNG  Vector  [] ","t /  ** ","ChunkyPNG Point  new  y ","poipoints length - ts [] x ","ChunkyPNG  Vector  [] x ","ChunkyPNG Point  new  x ","(send\n  (lvar : binomial_coefficient ) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t_f))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * * ","(send\n  (lvar :bicof) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t / ))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * * ","(sepoints length - d\n  (lvar :bicof) :*\n  (sepoints length - d\n    (begipoints length - \n      (sepoints length - d\n        (ipoints length - t 1) :-\n        (lvar :t_f))) :**\n    (begipoints length - \n      (sepoints length - d\n        (lvar :points length - ) :-\n        (lvar :i))))) * * ","(send\n  (lvar : binomial_coefficient ) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t_f))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * ","(send\n  (lvar :bicof) :*\n  (send\n    (begin\n      (send\n        (int 1) :-\n        (lvar :t / ))) :**\n    (begin\n      (send\n        (lvar :n) :-\n        (lvar :i))))) * ","(sepoints length - d\n  (lvar :bicof) :*\n  (sepoints length - d\n    (begipoints length - \n      (sepoints length - d\n        (ipoints length - t 1) :-\n        (lvar :t_f))) :**\n    (begipoints length - \n      (sepoints length - d\n        (lvar :points length - ) :-\n        (lvar :i))))) * "," binomial_coefficient  * ","(send\n  (int 1) :-\n  (lvar :t / )) ** ","(sepoints length - d\n  (ipoints length - t 1) :-\n  (lvar :t_f)) ** ","points length -  - "," bipoints length - omial_coefficiepoints length - t ","poipoints length - ts lepoints length - gth - ","ChunkyPNG  Vector  length - ","poipoints length - ts lepoints length - gth ","ChunkyPNG  Vector  length ","(send\n  (begin\n    (send\n      (int 1) :-\n      (lvar :t / ))) :**\n  (lvar :n)) * ","(sepoints length - d\n  (begipoints length - \n    (sepoints length - d\n      (ipoints length - t 1) :-\n      (lvar :t_f))) :**\n  (lvar :points length - )) * ","Chupoints length - kyPNG Poipoints length - t  points length - ew ","Array  points length - ew "," lipoints length - e ","Chupoints length - kyPNG  Vector "]}," ChunkyPNG Canvas StreamExporting to_grayscale_stream":{"type":"method","name":"to_grayscale_stream","children":[],"call":[" pixels pack ","nX * "," pixels length "," pixels "]}," ChunkyPNG Canvas StreamExporting to_alpha_channel_stream":{"type":"method","name":"to_alpha_channel_stream","children":[],"call":[" pixels pack "," pixels "]}," ChunkyPNG Color to_grayscale":{"type":"method","name":"to_grayscale","children":[],"call":[" grayscale_alpha "," a "," grayscale_teint "]}," ChunkyPNG Color grayscale_teint":{"type":"method","name":"grayscale_teint","children":[],"call":["(send\n  (send\n    (send\n      (send nil :r\n        (lvar :color)) :*\n      (float 0.3)) :+\n    (send\n      (send nil :g\n        (lvar :color)) :*\n      (float 0.59))) :+\n  (send\n    (send nil :b\n      (lvar :color)) :*\n    (float 0.11))) round "," r * + + "," b * "," b "," r * + "," g * "," g "," r * "," r "]}," ChunkyPNG Canvas Operations grayscale":{"type":"method","name":"grayscale","children":[],"call":[" dup grayscale! "," dup "]}," ChunkyPNG Canvas Operations grayscale!":{"type":"method","name":"grayscale!","children":[],"call":["ChunkyPNG Color  to_grayscale "," pixels map! "," pixels "]}," ChunkyPNG Chunk Transparency grayscale_entry":{"type":"method","name":"grayscale_entry","children":[],"call":["ChunkyPNG Color  grayscale ","ChunkyPNG Canvas  send "," content unpack [] "," content unpack "," content "]}," ChunkyPNG Chunk Transparency truecolor_entry":{"type":"method","name":"truecolor_entry","children":[],"call":["ChunkyPNG Color  rgb ","ChunkyPNG Canvas  send "," content unpack map "," content unpack "," content "]}," ChunkyPNG Chunk Transparency palette_alpha_channel":{"type":"method","name":"palette_alpha_channel","children":[],"call":[" content unpack "," content "]}," ChunkyPNG Canvas PNGDecoding decode_png_resample_1bit_value":{"type":"method","name":"decode_png_resample_1bit_value","children":[],"call":["value == "]}," ChunkyPNG Canvas PNGDecoding decode_png_resample_8bit_value":{"type":"method","name":"decode_png_resample_8bit_value","children":[],"call":[]}," ChunkyPNG Color interpolate_quick":{"type":"method","name":"interpolate_quick","children":[],"call":[" rgba "," int8_mult + "," int8_mult "," a "," b "," g "," r ","255 - ","alpha <= ","alpha >= "]}," ChunkyPNG Canvas Resampling resample_bilinear":{"type":"method","name":"resample_bilinear","children":[],"call":[" dup resample_bilinear! "," dup "]}," ChunkyPNG Canvas Resampling resample_bilinear!":{"type":"method","name":"resample_bilinear!","children":[],"call":[" replace_canvas! ","new_height to_i ","new_width to_i ","pixels []= ","ChunkyPNG Color  interpolate_quick "," get_pixel ","interp_x [] ","x - ","(send\n  (send\n    (lvar :index_x) :[]\n    (send\n      (lvar :x) :-\n      (int 1))) :+\n  (int 1)) min "," width - "," width ","index_x [] + ","index_x [] ","(send\n  (lvar :index_x) :[]\n  (send\n    (lvar :x) :-\n    (int 1))) max ","interp_y [] ","y - ","(send\n  (send\n    (lvar :index_y) :[]\n    (send\n      (lvar :y) :-\n      (int 1))) :+\n  (int 1)) min "," height - "," height ","index_y [] + ","index_y [] ","(send\n  (lvar :index_y) :[]\n  (send\n    (lvar :y) :-\n    (int 1))) max "," Array ","new_width * "," steps_residues ","Array  new "," Array  []= ","Array  new  []= "]}," ChunkyPNG Canvas Resampling steps_residues":{"type":"method","name":"steps_residues","children":[],"call":["err >= ","residues []= ","(send\n  (send\n    (float 255.0) :*\n    (send\n      (lvar :err) :to_f)) :/\n  (send\n    (lvar :denominator) :to_f)) round ","255.0 * / ","denominator to_f ","255.0 * ","err to_f ","i - ","indicies []= ","(send\n  (lvar :width) :-\n  (lvar :new_width)) % ","width - ","(send\n  (lvar :width) :-\n  (lvar :new_width)) / ","(lvar :new_width) << ","(send\n  (lvar :width) :%\n  (lvar :new_width)) << ","width % ","width / ","Array  new ","new_width << ","(send\n  (lvar :width) :-\n  (lvar :new_width)) %  >= ","Array  new  []= ","(send\n  (send\n    (float 255.0) :*\n    (send\n      (lvar :(send\n  (lvar :width) :-\n  (lvar :new_width)) % ) :to_f)) :/\n  (send\n    (lvar :denominator) :to_f)) round ","(send\n  (send\n    (float 255.0) :*\n    (send\n      (lvar :err) :to_f)) :/\n  (send\n    (lvar :(lvar :new_width) << ) :to_f)) round ","(send\n  (send\n    (float 255.0) :*\n    (send\n      (lvar :err) :to_f)) :/\n  (send\n    (lvar :new_width << ) :to_f)) round ","(lvar :new_width) <<  to_f ","new_width <<  to_f ","(send\n  (lvar :width) :-\n  (lvar :new_width)) %  to_f "]}," ChunkyPNG Canvas Resampling steps":{"type":"method","name":"steps","children":[],"call":["indicies []= ","indicies [] + ","(send\n  (send\n    (lvar :residues) :[]\n    (send\n      (lvar :i) :-\n      (int 1))) :+\n  (int 127)) / ","residues [] + ","residues [] ","i - ","indicies [] "," steps_residues "]}," ChunkyPNG Canvas DataUrlExporting to_data_url":{"type":"method","name":"to_data_url","children":[],"call":["(str \"data:image/png;base64,\") pack "," to_blob ","(str \"data:image/png;base64,\") pack gsub ","(str \"data:image/png;base64,\") pack delete "]}," ChunkyPNG Canvas DataUrlImporting from_data_url":{"type":"method","name":"from_data_url","children":[],"call":[" raise "," from_blob ","1 unpack first ","1 unpack ","string =~ "]}," ChunkyPNG force_binary":{"type":"method","name":"force_binary","children":[],"call":[]}," ChunkyPNG Canvas Operations border!":{"type":"method","name":"border!","children":[],"call":[" replace_canvas! ","bg pixels ","Canvas  new replace ","Canvas  new "," height + ","size * "," height "," width + "," width ","Canvas  new replace  pixels "]}," ChunkyPNG Canvas Operations border":{"type":"method","name":"border","children":[],"call":[" dup border! "," dup "]}," ChunkyPNG Canvas Operations trim!":{"type":"method","name":"trim!","children":[],"call":[" crop! ","y2 - + ","y2 - ","x2 - + ","x2 - "," row uniq != "," row uniq "," row ","(splat\n  (erange\n    (int 0)\n    (send nil :height))) rindex "," height ","(splat\n  (erange\n    (int 0)\n    (send nil :height))) index "," column uniq != "," column uniq "," column ","(splat\n  (erange\n    (int 0)\n    (send nil :width))) rindex "," width ","(splat\n  (erange\n    (int 0)\n    (send nil :width))) index "]}," ChunkyPNG Canvas Operations trim":{"type":"method","name":"trim","children":[],"call":[" dup trim! "," dup "]}," ChunkyPNG Color euclidean_distance_rgba":{"type":"method","name":"euclidean_distance_rgba","children":[],"call":["Math  sqrt ","(send\n  (send nil :r\n    (lvar :pixel_after)) :-\n  (send nil :r\n    (lvar :pixel_before))) ** + + + ","(send\n  (send nil :a\n    (lvar :pixel_after)) :-\n  (send nil :a\n    (lvar :pixel_before))) ** "," a - "," a ","(send\n  (send nil :r\n    (lvar :pixel_after)) :-\n  (send nil :r\n    (lvar :pixel_before))) ** + + ","(send\n  (send nil :b\n    (lvar :pixel_after)) :-\n  (send nil :b\n    (lvar :pixel_before))) ** "," b - "," b ","(send\n  (send nil :r\n    (lvar :pixel_after)) :-\n  (send nil :r\n    (lvar :pixel_before))) ** + ","(send\n  (send nil :g\n    (lvar :pixel_after)) :-\n  (send nil :g\n    (lvar :pixel_before))) ** "," g - "," g ","(send\n  (send nil :r\n    (lvar :pixel_after)) :-\n  (send nil :r\n    (lvar :pixel_before))) ** "," r - "," r ","pixel_after == "]}," ChunkyPNG build_point_from_object":{"type":"method","name":"build_point_from_object","children":[],"call":[]}," ChunkyPNG build_dimension_from_object":{"type":"method","name":"build_dimension_from_object","children":[],"call":[]}," ChunkyPNG Color hue_and_chroma":{"type":"method","name":"hue_and_chroma","children":[],"call":["hue round ","60 * ","(send\n  (lvar :r) :-\n  (lvar :g)) fdiv + ","(send\n  (lvar :r) :-\n  (lvar :g)) fdiv ","r - ","(send\n  (lvar :b) :-\n  (lvar :r)) fdiv + ","(send\n  (lvar :b) :-\n  (lvar :r)) fdiv ","b - ","(send\n  (lvar :g) :-\n  (lvar :b)) fdiv ","g - ","chroma zero? ","max - ","scaled_rgb minmax ","component fdiv ","scaled_rgb map! "," to_truecolor_bytes ","60 *  round ","max -  zero? "," to_truecolor_bytes  minmax "," to_truecolor_bytes  map! "]}," ChunkyPNG Color to_hsl":{"type":"method","name":"to_hsl","children":[],"call":[" a ","chroma fdiv ","1 - ","(send\n  (send\n    (int 2) :*\n    (lvar :lightness)) :-\n  (int 1)) abs ","2 * - ","2 * ","chroma zero? ","0.5 * ","max + "," hue_and_chroma ","(send\n  (send\n    (int 2) :*\n    (lvar :0.5 * )) :-\n  (int 1)) abs "]}," ChunkyPNG Color to_hsv":{"type":"method","name":"to_hsv","children":[],"call":[" a ","chroma fdiv ","chroma zero? "," hue_and_chroma "]}," ChunkyPNG Color cylindrical_to_cubic":{"type":"method","name":"cylindrical_to_cubic","children":[],"call":["chroma * ","1 - ","(send\n  (send\n    (lvar :hue_prime) :%\n    (int 2)) :-\n  (int 1)) abs ","hue_prime % - ","hue_prime % ","hue fdiv ","(send\n  (send\n    (lvar :hue fdiv ) :%\n    (int 2)) :-\n  (int 1)) abs ","hue fdiv  % - ","hue fdiv  % "]}," ChunkyPNG Color from_hsl":{"type":"method","name":"from_hsl","children":[],"call":[" rgba ","rgb << ","(send\n  (begin\n    (send\n      (send\n        (lvar :component) :+\n        (lvar :lightness)) :-\n      (send\n        (float 0.5) :*\n        (lvar :chroma)))) :*\n  (int 255)) to_i ","(send\n  (send\n    (lvar :component) :+\n    (lvar :lightness)) :-\n  (send\n    (float 0.5) :*\n    (lvar :chroma))) * ","component + - ","0.5 * ","component + ","rgb map! "," cylindrical_to_cubic ","(send\n  (int 1) :-\n  (send\n    (begin\n      (send\n        (send\n          (int 2) :*\n          (lvar :lightness)) :-\n        (int 1))) :abs)) * ","1 - ","(send\n  (send\n    (int 2) :*\n    (lvar :lightness)) :-\n  (int 1)) abs ","2 * - ","2 * "," raise ","(irange\n  (int 0)\n  (int 1)) include? ","(irange\n  (int 0)\n  (int 360)) include? ","(irange\n  (int 0)\n  (int 1)) cover? ","(irange\n  (int 0)\n  (int 360)) cover? ","  cylindrical_to_cubic a "," cylindrical_to_cubic  << ","(send\n  (begin\n    (send\n      (send\n        (lvar :component) :+\n        (lvar :lightness)) :-\n      (send\n        (float 0.5) :*\n        (lvar :(send\n  (int 1) :-\n  (send\n    (begin\n      (send\n        (send\n          (int 2) :*\n          (lvar :lightness)) :-\n        (int 1))) :abs)) * )))) :*\n  (int 255)) to_i ","(send\n  (send\n    (lvar :component) :+\n    (lvar :lightness)) :-\n  (send\n    (float 0.5) :*\n    (lvar :(send\n  (int 1) :-\n  (send\n    (begin\n      (send\n        (send\n          (int 2) :*\n          (lvar :lightness)) :-\n        (int 1))) :abs)) * ))) * "," cylindrical_to_cubic  map! "]}," ChunkyPNG Color from_hsv":{"type":"method","name":"from_hsv","children":[],"call":[" rgba ","rgb << ","(send\n  (begin\n    (send\n      (send\n        (lvar :component) :+\n        (lvar :value)) :-\n      (lvar :chroma))) :*\n  (int 255)) to_i ","(send\n  (send\n    (lvar :component) :+\n    (lvar :value)) :-\n  (lvar :chroma)) * ","component + - ","component + ","rgb map! "," cylindrical_to_cubic ","value * "," raise ","(irange\n  (int 0)\n  (int 1)) include? ","(irange\n  (int 0)\n  (int 360)) include? ","(irange\n  (int 0)\n  (int 1)) cover? ","(irange\n  (int 0)\n  (int 360)) cover? ","  cylindrical_to_cubic a "," cylindrical_to_cubic  << ","(send\n  (begin\n    (send\n      (send\n        (lvar :component) :+\n        (lvar :value)) :-\n      (lvar :value * ))) :*\n  (int 255)) to_i ","(send\n  (send\n    (lvar :component) :+\n    (lvar :value)) :-\n  (lvar :value * )) * "," cylindrical_to_cubic  map! "]}," ChunkyPNG Chunk InternationalText content":{"type":"method","name":"content","children":[],"call":["(send nil :keyword) pack "," translated_keyword encode "," translated_keyword "," language_tag "," compression "," compressed "," keyword ","Zlib Deflate  deflate "," compressed == "," text encode "," text "]}," ChunkyPNG Chunk InternationalText read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk InternationalText initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChunkyPNG Chunk Physical content":{"type":"method","name":"content","children":[],"call":["(send nil :ppux) pack "," unit == "," unit "," ppuy "," ppux "]}," ChunkyPNG Chunk Physical read":{"type":"method","name":"read","children":[],"call":[]}," ChunkyPNG Chunk Physical dpiy":{"type":"method","name":"dpiy","children":[],"call":[" ppuy * "," ppuy "," raise "," unit == "," unit "]}," ChunkyPNG Chunk Physical dpix":{"type":"method","name":"dpix","children":[],"call":[" ppux * "," ppux "," raise "," unit == "," unit "]}," ChunkyPNG Chunk Physical initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(sym :meters) member? "]}," ChunkyPNG Chunk read_bytes":{"type":"method","name":"read_bytes","children":[],"call":[]}," ChunkyPNG Dimension hash":{"type":"method","name":"hash","children":[],"call":["(send nil :width) hash "," height "," width "]}}