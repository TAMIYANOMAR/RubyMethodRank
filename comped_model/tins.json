{" Tins Array uniq_by!":{"type":"method","name":"uniq_by!","children":[],"call":[" replace "," uniq_by "]}," Tins Hash subhash!":{"type":"method","name":"subhash!","children":[],"call":[" replace "," subhash "]}," Module named":{"type":"method","name":"named","children":[],"call":[" include "," __send__ ","args + "," define_method ","Module  new "]}," Object named":{"type":"method","name":"named","children":[],"call":[" extend "," __send__ ","args + "," define_method ","Module  new "]}," Tins Method inspect":{"type":"method","name":"inspect","children":[],"call":[" description "," class "]}," Tins UnboundMethod inspect":{"type":"method","name":"inspect","children":[],"call":[" description "," class "]}," Tins Object examine":{"type":"method","name":"examine","children":[],"call":["IRB  examine "]}," Tins IRB examine":{"type":"method","name":"examine","children":[],"call":[]}," Tins Full all_full?":{"type":"method","name":"all_full?","children":[],"call":[" block_given? "," all? "," respond_to? "]}," Tins Full full?":{"type":"method","name":"full?","children":[],"call":[" block_given? ","obj blank? "," __send__ "," blank? "," __send__  blank? "]}," Tins Blank Numeric blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Tins Blank String blank?":{"type":"method","name":"blank?","children":[],"call":[" !~ "]}," Tins Blank Hash included":{"type":"method","name":"included","children":[],"call":[]}," Tins Blank Array included":{"type":"method","name":"included","children":[],"call":[]}," Tins Blank TrueClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Tins Blank FalseClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Tins Blank NilClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Tins Blank Object present?":{"type":"method","name":"present?","children":[],"call":[" blank? ! "," blank? "]}," Tins Blank Object blank?":{"type":"method","name":"blank?","children":[],"call":[" ! "," empty? "," respond_to? "]}," Tins Write extended":{"type":"method","name":"extended","children":[],"call":[]}," Tins UniqBy uniq_by":{"type":"method","name":"uniq_by","children":[],"call":["(send nil :inject\n  (hash)) values ","h [] ","b [] "," inject "," lambda "]}," Tins Token initialize":{"type":"method","name":"initialize","children":[],"call":["token << ","alphabet [] "," rand ","alphabet size ","length times "," bits= ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (send\n        (lvar :alphabet) :size) :**\n      (lvar :length))) :/\n  (send\n    (const nil :Math) :log\n    (int 2))) floor ","Math  log / ","Math  log ","alphabet size ** ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (int 1) :<<\n      (lvar :bits))) :/\n  (send\n    (const nil :Math) :log\n    (send\n      (lvar :alphabet) :size))) ceil ","1 << "," raise ","bits > ","length > ","alphabet size > ","options [] ","random random_number ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (int 1) :<<\n      (lvar :bits))) :/\n  (send\n    (const nil :Math) :log\n    (send\n      (lvar :alphabet) :size))) ceil  times ","options []  times ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (send\n        (lvar :alphabet) :size) :**\n      (lvar :(send\n  (send\n    (const nil :Math) :log\n    (send\n      (int 1) :<<\n      (lvar :bits))) :/\n  (send\n    (const nil :Math) :log\n    (send\n      (lvar :alphabet) :size))) ceil ))) :/\n  (send\n    (const nil :Math) :log\n    (int 2))) floor ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (send\n        (lvar :alphabet) :size) :**\n      (lvar :options [] ))) :/\n  (send\n    (const nil :Math) :log\n    (int 2))) floor ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (int 1) :<<\n      (lvar :bits))) :/\n  (send\n    (const nil :Math) :log\n    (send\n      (lvar :alphabet) :size))) ceil  > ","options []  > "]}," Tins ToProc to_proc":{"type":"method","name":"to_proc","children":[],"call":["obj __send__ ","args [] "," lambda "]}," Tins To to":{"type":"method","name":"to","children":[],"call":["string gsub ","(send\n  (lvar :string) :[]\n  (regexp\n    (str \"\\\\A\\\\s*\")\n    (regopt))) size ","string [] "]}," Tins TimeDummy included":{"type":"method","name":"included","children":[{"type":"method","name":"dummy=","children":[],"asgn":[null,{"type":"local","name":"value","value":"Time  parse "},["Time  parse "]],"call":["Time  parse ","value to_str ","value respond_to? "]},{"type":"method","name":"dummy","children":[],"asgn":[null],"call":[" dummy= "," dummy= ","value nil? "]},{"type":"method","name":"new","children":[],"asgn":[],"call":[" really_new "," really_now "," caller first =~ "," caller first "," caller "," dummy dup "," dummy "," dummy "]},{"type":"method","name":"now","children":[],"asgn":[],"call":[" new "]}],"call":[]}," Tins Terminal cols":{"type":"method","name":"cols","children":[],"call":[" columns "]}," Tins Terminal columns":{"type":"method","name":"columns","children":[],"call":["(str \"tput cols 2>/dev/null\") to_i nonzero? ","(str \"tput cols 2>/dev/null\") to_i ","(str \"stty size 2>/dev/null\") split [] to_i nonzero? ","(str \"stty size 2>/dev/null\") split [] to_i ","(str \"stty size 2>/dev/null\") split [] ","(str \"stty size 2>/dev/null\") split ","IO  ask_and_send ask_and_send ask_and_send ","IO  ask_and_send ask_and_send ","IO  ask_and_send "," winsize [] "," winsize "]}," Tins Terminal lines":{"type":"method","name":"lines","children":[],"call":[" rows "]}," Tins Terminal rows":{"type":"method","name":"rows","children":[],"call":["(str \"tput lines 2>/dev/null\") to_i nonzero? ","(str \"tput lines 2>/dev/null\") to_i ","(str \"stty size 2>/dev/null\") split [] to_i nonzero? ","(str \"stty size 2>/dev/null\") split [] to_i ","(str \"stty size 2>/dev/null\") split [] ","(str \"stty size 2>/dev/null\") split ","IO  ask_and_send ask_and_send ask_and_send ","IO  ask_and_send ask_and_send ","IO  ask_and_send "," winsize [] "," winsize "]}," Tins Subhash subhash":{"type":"method","name":"subhash","children":[],"call":["result []= ","pat === ","k to_s ","patterns any? "," each ","patterns each "," block_given? "," class new "," default "," class "," default_proc ","pat to_s ","pat respond_to? ","pat to_sym to_s ","pat to_sym ","patterns map! "," class new  []= ","pat to_sym to_s  === ","pat to_sym to_s terns any? ","pat to_sym to_s terns each ","pat to_sym to_s  to_s ","pat to_sym to_s  respond_to? ","pat to_sym to_s  to_sym to_s ","pat to_sym to_s  to_sym ","pat to_sym to_s terns map! "]}," Tins StringVersion version":{"type":"method","name":"version","children":[],"call":["Version  new "," frozen? "]}," Tins StringVersion Version version":{"type":"method","name":"version","children":[],"call":[]}," Tins StringVersion Version to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Tins StringVersion Version array":{"type":"method","name":"array","children":[],"call":["@version split map ","@version split ","x to_i "]}," Tins StringVersion Version ==":{"type":"method","name":"==","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) zero? "," <=> "]}," Tins StringVersion Version <=>":{"type":"method","name":"<=>","children":[],"call":["a <=> ","pairs transpose ","b nil? ","a nil? ","pairs map! "," array zip ","other array "," array ","b to_i ","a to_i "," array zip  transpose "," array zip  map! "]}," Tins StringVersion Version pred!":{"type":"method","name":"pred!","children":[],"call":[" [] "]}," Tins StringVersion Version succ!":{"type":"method","name":"succ!","children":[],"call":[" [] "]}," Tins StringVersion Version []=":{"type":"method","name":"[]=","children":[],"call":["@version replace ","a * ","x nil? ","a map! ","a []= "," array "," raise ","value >= ","value to_i "," level_of ","@version repl array ce "," array  * "," array  m array p! "," array  []= ","  array rr array y "," r array ise ","v array lue >= ","value to_i  >= ","v array lue to_i ","value to_i  to_i ","  level_of _of "]}," Tins StringVersion Version []":{"type":"method","name":"[]","children":[],"call":[" array [] "," array "," level_of "]}," Tins StringVersion Version revision=":{"type":"method","name":"revision=","children":[],"call":[" []= "]}," Tins StringVersion Version revision":{"type":"method","name":"revision","children":[],"call":[" [] "]}," Tins StringVersion Version build=":{"type":"method","name":"build=","children":[],"call":[" []= "]}," Tins StringVersion Version build":{"type":"method","name":"build","children":[],"call":[" [] "]}," Tins StringVersion Version minor=":{"type":"method","name":"minor=","children":[],"call":[" []= "]}," Tins StringVersion Version minor":{"type":"method","name":"minor","children":[],"call":[" [] "]}," Tins StringVersion Version major=":{"type":"method","name":"major=","children":[],"call":[" []= "]}," Tins StringVersion Version major":{"type":"method","name":"major","children":[],"call":[" [] "]}," Tins StringVersion Version initialize":{"type":"method","name":"initialize","children":[],"call":["string dup ","string frozen? "," raise ","string inspect ","string =~ "]}," Tins StringUnderscore underscore":{"type":"method","name":"underscore","children":[],"call":["word downcase! ","word tr! ","word gsub! "," dup "," dup  downcase! "," dup  tr! "," dup  gsub! "]}," Tins StringCamelize camelize":{"type":"method","name":"camelize","children":[],"call":[" [] chr downcase + "," camelize [] "," camelize "," [] chr downcase "," [] chr "," [] ","1 upcase ","(send nil :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub "," gsub "]}," Tins Shuffle shuffle":{"type":"method","name":"shuffle","children":[],"call":[" dup shuffle! "," dup "]}," Tins Shuffle shuffle!":{"type":"method","name":"shuffle!","children":[],"call":[" [] "," []= "," rand ","i + ","(send\n  (send nil :size) :-\n  (int 1)) downto "," size - "," size "]}," Tins included":{"type":"method","name":"included","children":[{"type":"method","name":"respond_to_missing?","children":[],"asgn":[],"call":[" instance respond_to? "," instance "]},{"type":"method","name":"respond_to?","children":[],"asgn":[],"call":[" instance respond_to? "," instance "]},{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" instance __send__ "," instance "," instance respond_to? "," instance "]}],"call":[" instance __send__ "," instance "," instance respond_to? ","Object  method_defined? ","(sclass\n  (lvar :klass)\n  (self)) class_eval "," __old_singleton_included__ "]}," Tins SecureWrite secure_write":{"type":"method","name":"secure_write","children":[],"call":["File  unlink ","temp path ","File  file? ","temp close ","temp closed? ! ","temp closed? ","File  rename ","temp stat size ","temp stat ","temp fsync "," raise ","temp write ","content nil? ! ","content nil? "," block_given? ","File  new ","filename + ","Time  now to_f ","Time  now ","File  new  path ","File  new  close ","File  new  closed? ! ","File  new  closed? ","temp stat temp stat size  ","File  new  stat size ","File  new  stat ","File  new  fsync ","File  new  write "]}," Tins Round round":{"type":"method","name":"round","children":[],"call":["result to_i ","t nan? ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil ","t - ","t < ","(send\n  (lvar :t) :+\n  (float 0.5)) floor ","t + ","t >= ","t infinite? ","10.0 ** "," raise ","max_places ceil ","max_places > ","Math  log -@ / ","Math  log ","Math  log -@ "," abs + "," abs ","places < ","places to_int ","places respond_to? "," __old_round__ ","places == ","result to_i  to_i ","resul(send\n  (lvar :t) :-\n  (float 0.5)) ceil  (send\n  (lvar :t) :-\n  (float 0.5)) ceil o_i ","resul(send\n  (lvar :t) :+\n  (float 0.5)) floor  (send\n  (lvar :t) :+\n  (float 0.5)) floor o_i ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  nan? ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  nan? ","(send\n  (lvar :(send\n  (lvar :t) :-\n  (float 0.5)) ceil ) :-\n  (floa(send\n  (lvar :t) :-\n  (float 0.5)) ceil  0.5)) ceil ","(send\n  (lvar :(send\n  (lvar :t) :+\n  (float 0.5)) floor ) :-\n  (floa(send\n  (lvar :t) :+\n  (float 0.5)) floor  0.5)) ceil ","(send\n  (lvar :t) :-\n  (10.0 ** loat 0.5)) ceil ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  - ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  - ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  < ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  < ","(send\n  (lvar :(send\n  (lvar :t) :-\n  (float 0.5)) ceil ) :+\n  (floa(send\n  (lvar :t) :-\n  (float 0.5)) ceil  0.5)) floor ","(send\n  (lvar :(send\n  (lvar :t) :+\n  (float 0.5)) floor ) :+\n  (floa(send\n  (lvar :t) :+\n  (float 0.5)) floor  0.5)) floor ","(send\n  (lvar :t) :+\n  (10.0 ** loat 0.5)) 10.0 ** loor ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  + ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  + ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  >= ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  >= ","(send\n  (lvar :t) :-\n  (float 0.5)) ceil  infini(send\n  (lvar :t) :-\n  (float 0.5)) ceil e? ","(send\n  (lvar :t) :+\n  (float 0.5)) floor  infini(send\n  (lvar :t) :+\n  (float 0.5)) floor e? ","t in10.0 ** inite? ","Math  log -@ /  ceil ","max_places to_int  ceil ","Math  log -@ /  > ","max_places to_int  > ","Ma(send\n  (lvar :t) :-\n  (float 0.5)) ceil h  log -@ / ","Ma(send\n  (lvar :t) :+\n  (float 0.5)) floor h  log -@ / ","Ma(send\n  (lvar :t) :-\n  (float 0.5)) ceil h  log ","Ma(send\n  (lvar :t) :+\n  (float 0.5)) floor h  log ","Ma(send\n  (lvar :t) :-\n  (float 0.5)) ceil h  log -@ ","Ma(send\n  (lvar :t) :+\n  (float 0.5)) floor h  log -@ ","places to_int  < ","places (send\n  (lvar :t) :-\n  (float 0.5)) ceil o_in(send\n  (lvar :t) :-\n  (float 0.5)) ceil  ","places (send\n  (lvar :t) :+\n  (float 0.5)) floor o_in(send\n  (lvar :t) :+\n  (float 0.5)) floor  ","places to_int  to_int ","places respond_(send\n  (lvar :t) :-\n  (float 0.5)) ceil o? ","places respond_(send\n  (lvar :t) :+\n  (float 0.5)) floor o? ","places to_int  respond_to? ","places to_int  == "]}," Tins Round included":{"type":"method","name":"included","children":[],"call":[]}," Tins Rotate rotate":{"type":"method","name":"rotate","children":[],"call":[" clone rotate! "," clone "]}," Tins Rotate rotate!":{"type":"method","name":"rotate!","children":[],"call":[" unshift "," pop ","(send\n  (lvar :n) :-@) times ","n -@ "," push "," shift ","n times ","n >= "]}," Tins Responding responding?":{"type":"method","name":"responding?","children":[],"call":["(send\n  (const nil :Class) :new) new ","object respond_to? ","method_names all? "," define_method ","method_names * ","Class  new "]}," Tins RequireMaybe require_maybe":{"type":"method","name":"require_maybe","children":[],"call":[" block_given? "," require "]}," Tins RangePlus +":{"type":"method","name":"+","children":[],"call":[" to_a + ","other to_a "," to_a "]}," Tins ProcPrelude from":{"type":"method","name":"from","children":[],"call":["my_self __send__ "," lambda "," eval ","block binding ","block call "," eval  __send__ "]}," Tins ProcPrelude nth":{"type":"method","name":"nth","children":[],"call":["list [] "," lambda "]}," Tins ProcPrelude const":{"type":"method","name":"const","children":[],"call":[" lambda ","my_proc call "]}," Tins ProcPrelude id1":{"type":"method","name":"id1","children":[],"call":[" lambda "]}," Tins ProcPrelude rotate":{"type":"method","name":"rotate","children":[],"call":["list rotate "," lambda "]}," Tins ProcPrelude last":{"type":"method","name":"last","children":[],"call":["list last "," lambda "]}," Tins ProcPrelude tail":{"type":"method","name":"tail","children":[],"call":["list [] "," lambda "]}," Tins ProcPrelude second":{"type":"method","name":"second","children":[],"call":["list [] "," lambda "]}," Tins ProcPrelude first":{"type":"method","name":"first","children":[],"call":["list first "," lambda "]}," Tins ProcPrelude array":{"type":"method","name":"array","children":[],"call":[" lambda "]}," Tins ProcPrelude call":{"type":"method","name":"call","children":[],"call":["obj instance_eval "," raise "]}," Tins ProcPrelude map_apply":{"type":"method","name":"map_apply","children":[],"call":["my_proc call ","y __send__ "," lambda "," raise "]}," Tins ProcPrelude apply":{"type":"method","name":"apply","children":[],"call":["my_proc call "," lambda "," raise "]}," Tins ProcCompose compose":{"type":"method","name":"compose","children":[],"call":[" call ","other to_proc call ","other to_proc ","other call ","other respond_to? "," class new "," class "]}," Tins PartialApplication partial":{"type":"method","name":"partial","children":[],"call":["f instance_variable_set "," arity - ","args size "," arity "," call ","args + "," lambda "," raise ","args size > "," dup ","args empty? "]}," Tins PartialApplication included":{"type":"method","name":"included","children":[],"call":[]}," Tins P pp!":{"type":"method","name":"pp!","children":[],"call":[" raise ","\n + ","(if\n  (send\n    (send\n      (lvar :objs) :size) :<\n    (int 2))\n  (send\n    (lvar :objs) :first)\n  (lvar :objs)) pretty_inspect chomp ","(if\n  (send\n    (send\n      (lvar :objs) :size) :<\n    (int 2))\n  (send\n    (lvar :objs) :first)\n  (lvar :objs)) pretty_inspect ","objs first ","objs size < ","objs size "]}," Tins P p!":{"type":"method","name":"p!","children":[],"call":[" raise ","(if\n  (send\n    (send\n      (lvar :objs) :size) :<\n    (int 2))\n  (send\n    (lvar :objs) :first)\n  (lvar :objs)) inspect ","objs first ","objs size < ","objs size "]}," Tins Once try_only_once":{"type":"method","name":"try_only_once","children":[],"call":[" only_once ","LOCK_EX  | "]}," Tins Once only_once":{"type":"method","name":"only_once","children":[],"call":["f close ","f flock ","File  new ","File  new  close ","File  new  File  new lock "]}," Tins Null Kernel Null":{"type":"method","name":"Null","children":[],"call":["value nil? "]}," Tins Null blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Tins Null nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Tins Null inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Tins Null to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," Tins Null to_a":{"type":"method","name":"to_a","children":[],"call":[]}," Tins Null to_int":{"type":"method","name":"to_int","children":[],"call":[]}," Tins Null to_i":{"type":"method","name":"to_i","children":[],"call":[]}," Tins Null to_f":{"type":"method","name":"to_f","children":[],"call":[]}," Tins Null to_str":{"type":"method","name":"to_str","children":[],"call":[]}," Tins Null to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Tins Null const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Tins Null method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Tins NamedSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tins ModuleGroup []":{"type":"method","name":"[]","children":[],"call":[]}," Tins Minimize unminimize!":{"type":"method","name":"unminimize!","children":[],"call":[" replace "," unminimize "]}," Tins Minimize unminimize":{"type":"method","name":"unminimize","children":[],"call":["result << "]}," Tins Minimize minimize!":{"type":"method","name":"minimize!","children":[],"call":[" replace "," minimize "]}," Tins Minimize minimize":{"type":"method","name":"minimize","children":[],"call":["result map! ","result << "," [] ","i + ","i == ","result [] << ","result [] "," [] succ != "," [] succ "," size times "," size "," size - "]}," Tins MethodDescription description":{"type":"method","name":"description","children":[],"call":["result << "," arity to_s "," arity ","(send\n  (send nil :parameters) :map) * ","(lvar :p_name) * ","generated_name succ! "," parameters map "," parameters "," respond_to? ","result << << "," name to_s "," name "," owner name to_s "," owner name "," owner "," receiver to_s "," receiver "," owner <= ","(sym :namespace) include? ","(or\n  (lvar :signature)\n  (send nil :arity)) to_s ","style == ","Signature  new ","Parameters  build ","generated_name succ "," raise ","valid_styles * ","valid_styles include? ","generated_name succ! dup ","generated_name succ  succ! ","(or\n  (lvar :Signature  new )\n  (send nil :arity)) to_s ","generated_name succ  succ ","generated_name succ  succ! dup "]}," Tins Memoize Module memoize_function":{"type":"method","name":"memoize_function","children":[],"call":[" warn ","result inspect ","args inspect ","args empty? "," class ","result freeze ","opts [] ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :method_id))\n  (hash)) []= ","orig_method bind call ","orig_method bind ","mc [] ","mc [] [] ","mc key? "," __send__ "," instance_method ","method_id to_s to_sym ","method_id to_s ","function_ids each "," __memoize_cache__ ","function_ids extract_last_argument_options ","function_ids extend ","function_ids first ","function_ids size == ","function_ids size ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :function_id))\n  (hash)) []= ","orig_function bind call ","orig_function bind ","function_id to_s to_sym ","function_id to_s "," memoize_apply_visibility ","orig_method bind call  inspect ","mc [] []  inspect ","orig_function bind call  inspect ","orig_method bind call  freeze ","mc [] []  freeze ","orig_function bind call  freeze ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :method_id to_s to_sym ))\n  (hash)) []= ","(or-asgn\n  (send\n    (lvar : __memoize_cache__ ) :[]\n    (lvar :method_id))\n  (hash)) []= "," instance_method  bind call "," instance_method  bind "," __memoize_cache__  [] "," __memoize_cache__  [] [] "," __memoize_cache__  key? ","method_id to_s to_sym  to_s to_sym ","method_id to_s to_sym  to_s ","function_id to_s to_sym s each ","function_id to_s to_sym s extract_last_argument_options ","function_id to_s to_sym s extend ","function_id to_s to_sym s first ","function_id to_s to_sym s size == ","function_id to_s to_sym s size ","(or-asgn\n  (send\n    (lvar : __memoize_cache__ ) :[]\n    (lvar :function_id))\n  (hash)) []= ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :function_id to_s to_sym ))\n  (hash)) []= ","function_id to_s to_sym  to_s to_sym ","function_id to_s to_sym  to_s "]}," Tins Memoize Module memoize_method":{"type":"method","name":"memoize_method","children":[],"call":["result freeze ","opts [] "," warn "," __id__ ","result inspect ","args inspect ","args empty? "," class ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :method_id))\n  (hash)) []= ","orig_method bind call ","orig_method bind ","mc [] ","mc [] [] ","mc key? "," __memoize_cache__ "," __send__ "," instance_method ","method_id to_s to_sym ","method_id to_s ","method_ids each "," include ","method_ids extract_last_argument_options ","method_ids extend ","ObjectSpace  define_finalizer "," Module  __memoize_cache_delete__ "," Module  __memoize_cache__ [] "," Module  __memoize_cache__ ","method_ids first ","method_ids size == ","method_ids size "," memoize_apply_visibility ","orig_method bind call  freeze ","mc [] []  freeze ","orig_method bind call  inspect ","mc [] []  inspect ","(or-asgn\n  (send\n    (lvar : __memoize_cache__ ) :[]\n    (lvar :method_id))\n  (hash)) []= ","(or-asgn\n  (send\n    (lvar : Module  __memoize_cache__ [] ) :[]\n    (lvar :method_id))\n  (hash)) []= ","(or-asgn\n  (send\n    (lvar :mc) :[]\n    (lvar :method_id to_s to_sym ))\n  (hash)) []= "," instance_method  bind call "," instance_method  bind "," __memoize_cache__  [] "," Module  __memoize_cache__ []  [] "," __memoize_cache__  [] [] "," Module  __memoize_cache__ []  [] [] "," __memoize_cache__  key? "," Module  __memoize_cache__ []  key? ","method_id to_s to_sym  to_s to_sym ","method_id to_s to_sym  to_s ","method_id to_s to_sym s each ","method_id to_s to_sym s extract_last_argument_options ","method_id to_s to_sym s extend ","method_id to_s to_sym s first ","method_id to_s to_sym s size == ","method_id to_s to_sym s size "]}," Tins Memoize CacheMethods memoize_cache_clear":{"type":"method","name":"memoize_cache_clear","children":[],"call":[" __memoize_cache__ clear "," __memoize_cache__ "]}," Tins Memoize CacheMethods __memoize_cache__":{"type":"method","name":"__memoize_cache__","children":[],"call":[]}," Tins LinesFile inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," class "]}," Tins LinesFile to_s":{"type":"method","name":"to_s","children":[],"call":[" line chomp "," line "," line_number "]}," Tins LinesFile match_forward":{"type":"method","name":"match_forward","children":[],"call":["$~ captures "," next! "," line =~ "," line "]}," Tins LinesFile match_backward":{"type":"method","name":"match_backward","children":[],"call":["$~ captures "," previous! "," line =~ "," line "]}," Tins LinesFile file_linenumber":{"type":"method","name":"file_linenumber","children":[],"call":[" line_number "," filename "]}," Tins LinesFile line":{"type":"method","name":"line","children":[],"call":["@lines [] ","index >= "," line_number - "," line_number "," line_number -  >= "]}," Tins LinesFile each":{"type":"method","name":"each","children":[],"call":[" line_number= ","block call "," line ","1 upto "," last_line_number "," line_number "," empty? "]}," Tins LinesFile empty?":{"type":"method","name":"empty?","children":[],"call":["@lines empty? "]}," Tins LinesFile last_line_number":{"type":"method","name":"last_line_number","children":[],"call":["@lines size "]}," Tins LinesFile line_number=":{"type":"method","name":"line_number=","children":[],"call":["number <= "," last_line_number ","number > ","number to_i ","number to_i  <= "," last_line_number to_i  ","number to_i  > ","number to_i  to_i "]}," Tins LinesFile previous!":{"type":"method","name":"previous!","children":[],"call":[" line_number < "," line_number "]}," Tins LinesFile next!":{"type":"method","name":"next!","children":[],"call":[" line_number > "," line_number "]}," Tins LinesFile rewind":{"type":"method","name":"rewind","children":[],"call":[" line_number= "]}," Tins LinesFile initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","@lines empty? ","line instance_variable_set ","i + ","line extend ","@lines each_with_index "]}," Tins LinesFile for_lines":{"type":"method","name":"for_lines","children":[],"call":[]}," Tins LinesFile for_file":{"type":"method","name":"for_file","children":[],"call":[]}," Tins LinesFile for_filename":{"type":"method","name":"for_filename","children":[],"call":[]}," Tins LinesFile LineExtension filename":{"type":"method","name":"filename","children":[],"call":[" lines_file filename dup "," lines_file filename "," lines_file "]}," Tins Limited execute":{"type":"method","name":"execute","children":[],"call":["@continue wait ","@continue signal ","@mutex synchronize ","Thread  new ","@count < "," loop ","@tg add ","Thread  current "]}," Tins Limited initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@maximum < "," Integer ","ConditionVariable  new ","Mutex  new ","ThreadGroup  new "," Integer  < "]}," Tins IfPredicate if?":{"type":"method","name":"if?","children":[],"call":[]}," Tins HashUnion |":{"type":"method","name":"|","children":[],"call":["other merge ","other to_h ","other respond_to? ","other to_hash ","other to_h  merge ","other to_hash  merge ","other to_h  to_h ","other to_hash  to_h ","other to_h  respond_to? ","other to_hash  respond_to? ","other to_h  to_hash ","other to_hash  to_hash "]}," Tins HashSymbolizeKeysRecursive symbolize_keys_recursive!":{"type":"method","name":"symbolize_keys_recursive!","children":[],"call":[" replace "," symbolize_keys_recursive "]}," Tins HashSymbolizeKeysRecursive symbolize_keys_recursive":{"type":"method","name":"symbolize_keys_recursive","children":[],"call":["h []= ","k to_sym ","a []= ","x symbolize_keys_recursive ","Hash  === ","v each_with_index ","v dup ","v symbolize_keys_recursive ","k empty? ","k to_s "," inject "," class new "," class "," seen= "," _symbolize_keys_recursive ","k to_s  to_sym ","v dup  []= ","x symbolize_k to_s eys_recursive ","Hv dup sh  === ","v ev dup ch_with_index ","v symbolize_k to_s eys_recursive ","k to_s  empty? ","k to_s  to_s "," clv dup ss new "," clv dup ss "," _symbolize_k to_s eys_recursive "]}," Tins GO go":{"type":"method","name":"go","children":[],"call":["b merge ","args unshift ","b [] ","b []= ","b [] == ","b key? ","v [] push ","v [] ","v []= ","a push ","a extend ","a dup ","v [] nil? ","args shift ","p == ","v key? ","p slice! ","a !~ ","t [] []= ","t [] ","a == ","s scan inject ","s scan ","args map ","args replace ","r << ","v [] << ","a << ","args empty? ","p empty? ","(send\n  (const nil :EnumerableExtension) :===\n  (send\n    (lvar :v) :[]\n    (lvar :o))) ! ","EnumerableExtension  === ","d [] to_s ","d [] ","(int 0) include? ","d key? ","v each_key ","d [] to_int ","d [] respond_to? ","b each_key ","r reject! ","a dup rgs unshift ","args shift rgs unshift ","a == rgs unshift ","args map  unshift ","a dup  push ","args shift  push ","a ==  push ","a dup  extend ","args shift  extend ","a ==  extend ","a dup  dup ","args shift  dup ","a ==  dup ","a dup rgs shift ","args shift rgs shift ","a == rgs shift ","args map  shift ","a dup  !~ ","args shift  !~ ","a ==  !~ ","a dup  == ","args shift  == ","a ==  == ","s sca dup n inject ","s scargs shift n inject ","s sca == n inject ","s sca dup n ","s scargs shift n ","s sca == n ","a dup rgs ma dup p ","args shift rgs margs shift p ","a == rgs ma == p ","args map  map ","a dup rgs repla dup ce ","args shift rgs replargs shift ce ","a == rgs repla == ce ","args map  replace ","a dup  << ","args shift  << ","a ==  << ","a dup rgs empty? ","args shift rgs empty? ","a == rgs empty? ","args map  empty? ","(send\n  (const nil :Enumera dup bleExtension) :===\n  (send\n    (lva dup r :v) :[]\n    (lva dup r :o))) ! ","(send\n  (const nil :Enumerargs shift bleExtension) :===\n  (send\n    (lvargs shift r :v) :[]\n    (lvargs shift r :o))) ! ","(send\n  (const nil :Enumera == bleExtension) :===\n  (send\n    (lva == r :v) :[]\n    (lva == r :o))) ! ","(send\n  (cp slice! nst nil :EnumerableExtensip slice! n) :===\n  (send\n    (lvar :v) :[]\n    (lvar :p slice! ))) ! ","Enumera dup bleExtension  === ","Enumerargs shift bleExtension  === ","Enumera == bleExtension  === ","EnumerableExtensip slice! n  === ","d [] tp slice! _s ","v ea dup ch_key ","v eargs shift ch_key ","v ea == ch_key ","d [] tp slice! _int ","d [] respp slice! nd_tp slice! ? ","b ea dup ch_key ","b eargs shift ch_key ","b ea == ch_key "]}," Tins GO EnumerableExtension each":{"type":"method","name":"each","children":[],"call":["@arguments each "]}," Tins GO EnumerableExtension push":{"type":"method","name":"push","children":[],"call":["@arguments push "]}," Tins Generator size":{"type":"method","name":"size","children":[],"call":["@enums size "]}," Tins Generator add_dimension":{"type":"method","name":"add_dimension","children":[],"call":["@iterators << ","@enums << "]}," Tins Generator recurse":{"type":"method","name":"recurse","children":[],"call":["tuple dup ","tuple []= ","@enums [] __send__ ","@iterators [] ","@enums [] "," recurse ","i + ","i < ","@n - "]}," Tins Generator each":{"type":"method","name":"each","children":[],"call":[" recurse "]}," Tins Generator initialize":{"type":"method","name":"initialize","children":[],"call":[" add_dimension ","enums each "]}," Tins Generator []":{"type":"method","name":"[]","children":[],"call":[]}," Tins Find prune":{"type":"method","name":"prune","children":[],"call":[" throw "]}," Tins Find find":{"type":"method","name":"find","children":[],"call":["Finder  new find ","Finder  new ","paths pop ","Hash  === ","paths last "]}," Tins Find Finder protect_from_errors":{"type":"method","name":"protect_from_errors","children":[],"call":[" raise "," raise_errors "]}," Tins Find Finder prepare_path":{"type":"method","name":"prepare_path","children":[],"call":["path finder= ","path extend ","path dup taint ","path dup ","path dup taint  finder= ","path dup  finder= ","path dup taint  extend ","path dup  extend ","path dup taint  dup taint ","path dup  dup taint ","path dup taint  dup ","path dup  dup "]}," Tins Find Finder find":{"type":"method","name":"find","children":[],"call":["paths unshift ","p untaint ","File  join ","p start_with? ","@show_hidden ! ","p == ","ps reverse_each ","ps sort! ","Dir  entries "," protect_from_errors ","stat directory? "," visit_path? ","path finder_stat "," catch "," prepare_path ","paths shift ","d dup ","paths collect! "," enum_for "," __method__ "," block_given? "," raise ","path stat directory? ","path stat ","File  join aths unshift "," prepare_path s unshift ","paths shift s unshift ","File  join  untaint ","File  join  start_with? ","File  join  == ","File  join s reverse_each ","Dir  entries  reverse_each ","File  join s sort! ","Dir  entries  sort! "," File  join rotect_from_errors ","path finder_stat  directory? "," visit_File  join ath? "," visit_ prepare_path ? "," visit_paths shift ? ","File  join ath finder_stat ","path finder_path finder_stat  "," prepare_path  finder_stat ","paths shift  finder_stat "," File  join reFile  join are_File  join ath "," prepare_ prepare_path  "," prepare_paths shift  ","File  join aths shift "," prepare_path s shift ","paths shift s shift ","d duFile  join  ","File  join aths collect! "," prepare_path s collect! ","paths shift s collect! ","File  join ath stat directory? ","path path finder_stat  directory? "," prepare_path  stat directory? ","paths shift  stat directory? ","File  join ath stat ","path path finder_stat  "," prepare_path  stat ","paths shift  stat "]}," Tins Find Finder visit_path?":{"type":"method","name":"visit_path?","children":[],"call":["@suffix include? ","path suffix ","@suffix nil? ","@visit call ","@visit nil? ","(ivar :@visit) ! "]}," Tins Find Finder initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] full? ","opts [] ","opts fetch ","@suffix include? ","path suffix ","@suffix empty? ","@suffix nil? "," lambda "," Array ","opts key? "," raise "," Array  include? "," Array  empty? "," Array  nil? "]}," Tins Find Finder PathExtension suffix":{"type":"method","name":"suffix","children":[],"call":[" pathname extname [] "," pathname extname "," pathname "]}," Tins Find Finder PathExtension pathname":{"type":"method","name":"pathname","children":[],"call":["Pathname  new "]}," Tins Find Finder PathExtension lstat":{"type":"method","name":"lstat","children":[],"call":["File  lstat "," finder protect_from_errors "," finder "]}," Tins Find Finder PathExtension stat":{"type":"method","name":"stat","children":[],"call":["File  stat "," finder protect_from_errors "," finder "]}," Tins Find Finder PathExtension exist?":{"type":"method","name":"exist?","children":[],"call":["File  exist? "," finder protect_from_errors "," finder "]}," Tins Find Finder PathExtension directory?":{"type":"method","name":"directory?","children":[],"call":["s directory? "," finder_stat "," finder protect_from_errors "," finder "," finder_stat  directory? "," finder_ finder_stat tat "," finder protect_from_error finder_stat  "]}," Tins Find Finder PathExtension file?":{"type":"method","name":"file?","children":[],"call":["s file? "," finder_stat "," finder protect_from_errors "," finder "," finder_stat  file? "," finder_ finder_stat tat "," finder protect_from_error finder_stat  "]}," Tins Find Finder PathExtension file":{"type":"method","name":"file","children":[],"call":["File  new "," file? "," finder protect_from_errors "," finder "]}," Tins Find Finder PathExtension finder_stat":{"type":"method","name":"finder_stat","children":[],"call":["File  lstat ","File  stat "," finder follow_symlinks "," finder "," finder protect_from_errors "]}," Tins ExtractLastArgumentOptions extract_last_argument_options":{"type":"method","name":"extract_last_argument_options","children":[],"call":[" dup "," [] ","last_argument to_hash dup ","last_argument to_hash ","last_argument respond_to? "," last "," last  to_hash dup "," last  to_hash "," last  respond_to? "]}," Tins DeepDup deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["Marshal  load ","Marshal  dump "]}," Tins DeepConstGet deep_const_get":{"type":"method","name":"deep_const_get","children":[],"call":[" raise ","p const_missing ","p const_get "," Tins DeepConstGet  const_defined_in? ","start_module inspect ","start_module == ","c empty? ","path to_s split inject ","path to_s split ","path to_s "," Tins DeepConstGet  deep_const_get "]}," Tins DeepConstGet const_defined_in?":{"type":"method","name":"const_defined_in?","children":[],"call":[]}," Tins DateTimeDummy included":{"type":"method","name":"included","children":[{"type":"method","name":"dummy","children":[],"asgn":[null,null,null],"call":["value nil? "]},{"type":"method","name":"now","children":[],"asgn":[],"call":[" really_now "," dummy dup "," dummy "," dummy "]}],"call":[]}," Tins DateDummy included":{"type":"method","name":"included","children":[{"type":"method","name":"dummy","children":[],"asgn":[null,null,null],"call":["value nil? "]},{"type":"method","name":"today","children":[],"asgn":[],"call":[" really_today "," dummy dup "," dummy "," dummy "]}],"call":[]}," Tins CountBy count_by":{"type":"method","name":"count_by","children":[],"call":["b [] "," inject "," lambda "]}," Tins Concern included":{"type":"method","name":"included","children":[],"call":["base nil? "]}," Tins Concern append_features":{"type":"method","name":"append_features","children":[],"call":["base class_eval "," instance_variable_defined? ","base extend "," const_get "," const_defined? ","base send ","@_dependencies each ","base < ","base instance_variable_get << ","base instance_variable_get ","base instance_variable_defined? ","Thread  current []= ","Thread  current "]}," Tins Concern extended":{"type":"method","name":"extended","children":[],"call":[]}," Tins Bijection []=":{"type":"method","name":"[]=","children":[],"call":["@inverted []= "," key? "]}," Tins Bijection freeze":{"type":"method","name":"freeze","children":[],"call":["@inverted freeze ","@inverted frozen? "]}," Tins Bijection fill":{"type":"method","name":"fill","children":[],"call":[" freeze "," empty? "]}," Tins Bijection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tins Bijection []":{"type":"method","name":"[]","children":[],"call":[]}," Tins Attempt sleep_duration":{"type":"method","name":"sleep_duration","children":[],"call":[" sleep ","duration call "]}," Tins Attempt attempt":{"type":"method","name":"attempt","children":[],"call":[" raise "," sleep_duration ","count < ","block call ","count == ","exception_class nil? ","attempts <= ","opts [] ","opts key? ","Numeric  === "," interpret_sleep ","attempts >= ","$! message ","$! class ","Exception  class ","reraise call "," opts [] _duration ","  interpret_sleep _duration ","opts []  nil? "," interpret_opts []  "," interpret_ interpret_sleep  ","opts []  call "]}," Tins AskAndSend ask_and_send!":{"type":"method","name":"ask_and_send!","children":[],"call":[" __send__ "," respond_to? "]}," Tins AskAndSend ask_and_send":{"type":"method","name":"ask_and_send","children":[],"call":[" __send__ "," respond_to? "]}," Annotate annotate":{"type":"method","name":"annotate","children":[],"call":[" instance_variable_set "," __send__ []= "," __send__ "," instance_variable_get ","old_method_added bind call ","old_method_added bind "," define_method "," instance_method "," instance_variable_defined? "," __send__ [] ","(self) class_eval "," class __send__ "," class "," singleton_class class_eval "," singleton_class "," instance_method  bind call "," instance_method  bind "]}," Tins NullPlus initialize":{"type":"method","name":"initialize","children":[],"call":[" define_method ","opts each ","(self) class_eval "," singleton_class class_eval "," singleton_class "]}," Tins Null Kernel null_plus":{"type":"method","name":"null_plus","children":[],"call":["Tins NullPlus  new ","value nil? ","opts []= "," caller_locations "," respond_to? "," caller ","opts [] ","opts []  nil? "]}," Tins Null Kernel null":{"type":"method","name":"null","children":[],"call":["value nil? "]}," Tins Concern ModuleMixin tins_concern_args":{"type":"method","name":"tins_concern_args","children":[],"call":["Thread  current [] ","Thread  current "]}," Tins Concern ModuleMixin []":{"type":"method","name":"[]","children":[],"call":["Thread  current []= ","Thread  current "]}," Tins StringByteOrderMark bom_encoding":{"type":"method","name":"bom_encoding","children":[],"call":[" [] force_encoding "," [] "]}," Tins TimeDummy ClassMethods new":{"type":"method","name":"new","children":[],"call":[" really_new "," dummy dup "," dummy "]}," Tins Memoize Module memoize_cache_clear":{"type":"method","name":"memoize_cache_clear","children":[],"call":["mc clear "," Module  __memoize_cache__ "," Module  __memoize_cache__  clear "]}," Tins Memoize Module __memoize_cache__":{"type":"method","name":"__memoize_cache__","children":[],"call":[]}," Tins Memoize Module __memoize_cache_delete__":{"type":"method","name":"__memoize_cache_delete__","children":[],"call":[" __memoize_cache__ delete "," __memoize_cache__ "," warn "," lambda "]}," Tins TimeDummy ClassMethods dummy":{"type":"method","name":"dummy","children":[],"call":["value nil? "]}," Tins Find PathExtension file":{"type":"method","name":"file","children":[],"call":["File  new "," stat file? "," stat "]}," Tins Find PathExtension stat":{"type":"method","name":"stat","children":[],"call":[" raise "," finder raise_errors "," finder ","File  lstat ","File  stat "," finder follow_symlinks "]}," Tins ThreadLocal instance_thread_local":{"type":"method","name":"instance_thread_local","children":[],"call":["sc thread_local "," extend ","(self) thread_local "]}," Tins ThreadLocal thread_local":{"type":"method","name":"thread_local","children":[],"call":["Thread  current [] []= ","Thread  current [] ","Thread  current ","Thread  current []= "," define_method ","Thread  current [] [] ","ObjectSpace  define_finalizer "," __id__ ","name to_s "," raise "," is_a? ","values [] ","values []= ","default call ","values key? ! ","values key? "," lambda ","name to_s  to_s "]}," Tins DynamicScope method_missing":{"type":"method","name":"method_missing","children":[],"call":["c []= ","args first "," scope_top "," dynamic_scope_name ","id to_s =~ ","id to_s ","args size == ","args size ","c [] ","c key? "," scope_reverse ","args empty? "," scope_top  []= "," s scope_top ope_top "," dynami scope_top _s scope_top ope_name "," scope_top  [] "," scope_top  key? "," s scope_top ope_reverse "]}," Tins DynamicScope dynamic_scope":{"type":"method","name":"dynamic_scope","children":[],"call":[" scope_block "," dynamic_scope_name ","Context  new "]}," Tins DynamicScope dynamic_defined?":{"type":"method","name":"dynamic_defined?","children":[],"call":["c key? "," scope_reverse "," dynamic_scope_name "]}," Tins DynamicScope Context []=":{"type":"method","name":"[]=","children":[],"call":["name to_sym "]}," Tins DynamicScope Context []":{"type":"method","name":"[]","children":[],"call":["name to_sym "]}," Tins Scope scope":{"type":"method","name":"scope","children":[],"call":[" scope_get dup "," scope_get "]}," Tins Scope scope_get":{"type":"method","name":"scope_get","children":[],"call":["Thread  current [] ","Thread  current "]}," Tins Scope scope_block":{"type":"method","name":"scope_block","children":[],"call":[" scope_pop "," scope_push "]}," Tins Scope scope_reverse":{"type":"method","name":"scope_reverse","children":[],"call":[" scope_get reverse_each "," scope_get "]}," Tins Scope scope_top":{"type":"method","name":"scope_top","children":[],"call":[" scope_get last "," scope_get "]}," Tins Scope scope_pop":{"type":"method","name":"scope_pop","children":[],"call":["Thread  current []= ","Thread  current "," scope_get empty? "," scope_get "," scope_get pop "]}," Tins Scope scope_push":{"type":"method","name":"scope_push","children":[],"call":[" scope_get push "," scope_get "]}," Tins FromModule parameterize":{"type":"method","name":"parameterize","children":[],"call":["result __send__ ","remove_methods each ","modul instance_methods map - ","import_methods map ","modul instance_methods map ","modul instance_methods ","modul dup "," Array ","opts [] "," raise ","modul dup  __send__ ","modul instance_methods map -  each ","opts []  instance_methods map - "," Array  map ","opts []  instance_methods map ","opts []  instance_methods ","opts []  dup "]}," Tins ParameterizedModule parameterize_for":{"type":"method","name":"parameterize_for","children":[],"call":[" parameterize "," respond_to? "]}," Tins MethodMissingDelegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" method_missing_delegator __send__ "," method_missing_delegator "," method_missing_delegator nil? "]}," Tins MethodMissingDelegator DelegatorModule initialize":{"type":"method","name":"initialize","children":[],"call":[" method_missing_delegator= "]}," Tins BlockSelf block_self":{"type":"method","name":"block_self","children":[],"call":[" eval ","block __send__ "]}," Tins Delegate delegate":{"type":"method","name":"delegate","children":[],"call":[" class_eval ","obj [] == ","obj [] ","obj to_s "," raise "," __send__ __send__ "," __send__ "," define_method ","Tins DeepConstGet  deep_const_get __send__ ","Tins DeepConstGet  deep_const_get ","(irange\n  (str \"A\")\n  (str \"Z\")) include? ","to [] "," instance_variable_get __send__ "," instance_variable_get ","to [] == "," class class_variable_get __send__ "," class class_variable_get "," class ","to to_s ","to == ","opts [] "," instance_variable_defined? "," class class_variable_defined? ","obj to_s  [] == ","obj to_s  [] ","obj to_s  to_s ","obj to to_s _s ","to to_s  [] ","to to_s  [] == ","to to_s  to to_s _s ","to to_s  == "]}," Tins Deflect deflect_stop":{"type":"method","name":"deflect_stop","children":[],"call":[" remove_method ","from instance_eval "," raise ","Deflect  deflecting delete ","Deflect  deflecting ","@@sync synchronize "]}," Tins Deflect deflect":{"type":"method","name":"deflect","children":[],"call":[" deflect_stop "," deflect_start ","@@sync synchronize "]}," Tins Deflect deflect?":{"type":"method","name":"deflect?","children":[],"call":["Deflect  deflect? "]}," Tins Deflect deflect_start":{"type":"method","name":"deflect_start","children":[],"call":["d call ","Deflect  deflecting find "," class ","Deflect  deflecting "," define_method ","from class_eval ","Deflect  deflecting add "," raise ","Deflect  deflecting member? ","DeflectorCollection  new ","@@sync synchronize ","Deflect  deflecting find  call ","Deflect  Deflect  deflecting find eflecting finDeflect  deflecting find  ","Deflect  Deflect  deflecting find eflecting "," Deflect  deflecting find efine_methoDeflect  deflecting find  ","Deflect  Deflect  deflecting find eflecting aDeflect  deflecting find Deflect  deflecting find  ","Deflect  Deflect  deflecting find eflecting member? "]}," Tins Deflect DeflectorCollection find":{"type":"method","name":"find","children":[],"call":["d [] ","id to_s ","@classes [] ","klass ancestors find ","klass ancestors ","d []  [] ","@classes []  [] ","id []  to_s ","i@classes []  to_s ","klass ancestors find []  ","klass ancestors fin@classes []  "]}," Tins Deflect DeflectorCollection delete":{"type":"method","name":"delete","children":[],"call":["@classes delete ","k empty? ","k delete ","id to_s ","@classes [] ","@classes k delete elete ","@classes []  empty? ","k k delete elete ","@classes []  delete ","ik delete  to_s "]}," Tins Deflect DeflectorCollection member?":{"type":"method","name":"member?","children":[],"call":["(and\n  (lvasgn :k\n    (send\n      (ivar :@classes) :[]\n      (lvar :klass)))\n  (send\n    (lvar :k) :key?\n    (send\n      (lvar :id) :to_s))) ! ! ","(and\n  (lvasgn :k\n    (send\n      (ivar :@classes) :[]\n      (lvar :klass)))\n  (send\n    (lvar :k) :key?\n    (send\n      (lvar :id) :to_s))) ! ","k key? ","id to_s ","@classes [] ","(and\n  (lvasgn :@classes [] \n    (send\n      (ivar :@classes) :[]\n      (lvar :@classes [] lass)))\n  (send\n    (lvar :@classes [] ) :@classes [] ey?\n    (send\n      (lvar :id) :to_s))) ! ! ","(and\n  (lvasgn :@classes [] \n    (send\n      (ivar :@classes) :[]\n      (lvar :@classes [] lass)))\n  (send\n    (lvar :@classes [] ) :@classes [] ey?\n    (send\n      (lvar :id) :to_s))) ! ","@classes []  @classes [] ey? "]}," Tins Deflect DeflectorCollection add":{"type":"method","name":"add","children":[],"call":["k []= ","id to_s ","@classes []= ","@classes [] ","@classes []=  []= ","@classes []  []= "]}," Tins Deflect DeflectorCollection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tins BlankSlate with":{"type":"method","name":"with","children":[],"call":[]}," Tins ConstantMaker const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Tins SymbolMaker method_missing":{"type":"method","name":"method_missing","children":[],"call":["args empty? "]}," Tins DSLAccessor dsl_reader":{"type":"method","name":"dsl_reader","children":[],"call":[" raise ","args size ","default first ","default size == ","default size "," instance_eval ","default empty? ","result nil? "," instance_variable_get ","args empty? "," define_method "," instance_variable_defined? "," instance_variable_get  nil? "]}," Tins DSLAccessor dsl_accessor":{"type":"method","name":"dsl_accessor","children":[],"call":[" instance_variable_set ","args first ","args size == ","args size ","default first ","default size == ","default size "," instance_eval ","default empty? ","result nil? "," instance_variable_get ","args empty? "," define_method "," instance_variable_defined? "," instance_variable_get  nil? "]}," Tins Constant constant":{"type":"method","name":"constant","children":[],"call":[" define_method ","value freeze "]}," Tins Interpreter interpret_with_binding":{"type":"method","name":"interpret_with_binding","children":[],"call":[" instance_exec "," eval call "," eval "," lambda ","source to_io read ","source to_io ","source path ","source respond_to? ","source to_io read  to_io read ","source to_io read  to_io ","source to_io read  path ","source source path  ","source to_io read  respond_to? "]}," Tins Interpreter interpret":{"type":"method","name":"interpret","children":[],"call":[" interpret_with_binding "," binding "]}," Tins InstanceExec instance_exec_fetch_symbol":{"type":"method","name":"instance_exec_fetch_symbol","children":[],"call":["InstanceExec  pool shift ","InstanceExec  pool ","InstanceExec  count ","InstanceExec  pool empty? ","@@mutex synchronize "]}," Tins InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":["InstanceExec  pool << ","InstanceExec  pool "," remove_method "," method_defined? ","instance __send__ "," define_method ","InstanceExec  module_eval "," instance_exec_fetch_symbol "]}," Tins ThreadGlobal instance_thread_global":{"type":"method","name":"instance_thread_global","children":[],"call":["sc thread_global "," extend "]}," Tins ThreadGlobal thread_global":{"type":"method","name":"thread_global","children":[],"call":["modul instance_variable_set ","lock synchronize "," define_method ","name + ","modul instance_variable_get ","Mutex  new "," __id__ abs "," __id__ ","name to_s "," raise "," is_a? ","default call ","modul instance_variable_defined? ! ","modul instance_variable_defined? "," lambda ","Mutex  new  synchronize ","name to_s  + ","name to_s  to_s "]}," Tins ClassMethod class_attr_writer":{"type":"method","name":"class_attr_writer","children":[],"call":[" attr_writer "," eigenclass_eval "]}," Tins ClassMethod class_attr_reader":{"type":"method","name":"class_attr_reader","children":[],"call":[" attr_reader "," eigenclass_eval "]}," Tins ClassMethod class_attr_accessor":{"type":"method","name":"class_attr_accessor","children":[],"call":[" attr_accessor "," eigenclass_eval "]}," Tins ClassMethod class_define_method":{"type":"method","name":"class_define_method","children":[],"call":[" define_method "," eigenclass_eval "]}," Tins Eigenclass eigenclass_eval":{"type":"method","name":"eigenclass_eval","children":[],"call":[" eigenclass instance_eval "," eigenclass "]}," Tins Eigenclass eigenclass":{"type":"method","name":"eigenclass","children":[],"call":[]}," Tins Null to_json":{"type":"method","name":"to_json","children":[],"call":[]}," Tins Null as_json":{"type":"method","name":"as_json","children":[],"call":[]}," TimeFreezer freeze":{"type":"method","name":"freeze","children":[],"call":[]}," Tins Concern ModuleMixin tins_concern_configure":{"type":"method","name":"tins_concern_configure","children":[],"call":["Thread  current []= ","Thread  current "]}," Tins Terminal winsize":{"type":"method","name":"winsize","children":[],"call":["console winsize ","console respond_to? ","IO  console ","IO  respond_to? ","IO  console  winsize ","IO  console  respond_to? ","IO  IO  console  "]}," Tins StringVersion Version initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["source instance_variable_get dup ","source instance_variable_get "]}," Tins StringVersion Version level_of":{"type":"method","name":"level_of","children":[],"call":["LEVELS  fetch ","specifier respond_to? "]}," Tins StringVersion Version bump":{"type":"method","name":"bump","children":[],"call":[" [] ","level succ "," level_of "," level_of  succ ","  level_of _of "]}," Tins MethodDescription signature":{"type":"method","name":"signature","children":[],"call":[" description "]}," Tins MethodDescription Signature inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," class "]}," Tins MethodDescription Signature to_s":{"type":"method","name":"to_s","children":[],"call":["@parameters * "]}," Tins MethodDescription Signature ===":{"type":"method","name":"===","children":[],"call":[" == ","method signature "]}," Tins MethodDescription Signature ==":{"type":"method","name":"==","children":[],"call":["@parameters == ","other parameters "]}," Tins MethodDescription Signature eql?":{"type":"method","name":"eql?","children":[],"call":["@parameters eql? ","other parameters "]}," Tins MethodDescription Signature initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tins MethodDescription Parameters build":{"type":"method","name":"build","children":[],"call":[]}," Tins MethodDescription Parameters GenericParameter to_s":{"type":"method","name":"to_s","children":[],"call":["(send nil :name) * "," type "," name "]}," Tins MethodDescription Parameters BlockParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters KeyreqParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters KeyParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters OptParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters ReqParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name to_s "," name "]}," Tins MethodDescription Parameters KeyrestParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters RestParameter to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tins MethodDescription Parameters Parameter inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," class "]}," Tins MethodDescription Parameters Parameter ==":{"type":"method","name":"==","children":[],"call":[" type == ","other type "," type "]}," Tins Memoize CacheMethods memoize_apply_visibility":{"type":"method","name":"memoize_apply_visibility","children":[],"call":[" __send__ "," protected_method_defined? "," private_method_defined? "," instance_eval "]}," Tins Implement implement_in_submodule":{"type":"method","name":"implement_in_submodule","children":[],"call":[" implement "]}," Tins Implement implement":{"type":"method","name":"implement","children":[],"call":[" raise "," define_method ","msg % ","m description ","m extend "," instance_method "," implement ","msg fetch ","MESSAGES  fetch ","method_name nil? "," Symbol  === ","msg %  % ","MESSAGES  fetch  % ","msg %  fetch ","MESSAGES  fetch  fetch "]}," Tins Duration to_s":{"type":"method","name":"to_s","children":[],"call":[" format ","template << "," fractional_seconds? ","template prepend "," days? "," format_smart "]}," Tins Duration format":{"type":"method","name":"format","children":[],"call":["result gsub! ","fractional_seconds [] ","%f % ","(str \"%.\") % ","result include? ","template gsub ","%02u % "," format_smart "," negative? ","template gsub  gsub! ","%f %  [] ","(str \"%.\") %  [] ","template gsub  include? "]}," Tins Duration fractional_seconds?":{"type":"method","name":"fractional_seconds?","children":[],"call":["@fractional_seconds > "]}," Tins Duration seconds?":{"type":"method","name":"seconds?","children":[],"call":["@seconds > "]}," Tins Duration minutes?":{"type":"method","name":"minutes?","children":[],"call":["@minutes > "]}," Tins Duration hours?":{"type":"method","name":"hours?","children":[],"call":["@hours > "]}," Tins Duration days?":{"type":"method","name":"days?","children":[],"call":["@days > "]}," Tins Duration initialize":{"type":"method","name":"initialize","children":[],"call":["r << ","s divmod ","d > ","(int 86400) inject ","seconds abs ","seconds < ","seconds abs  abs ","seconds abs  < "]}," Tins InstanceExec included":{"type":"method","name":"included","children":[],"call":[]}," Tins Complete complete":{"type":"method","name":"complete","children":[],"call":["Readline  readline ","Readline  output= ","Readline  input= ","Readline  completion_proc= ","@@sync synchronize "]}," Tins CasePredicate case?":{"type":"method","name":"case?","children":[],"call":["a === ","args find "]}," Tins Attempt interpret_sleep":{"type":"method","name":"interpret_sleep","children":[],"call":["duration_base ** "," lambda "," compute_duration_base ","sleep -@ ","attempts > ","sleep < ","Numeric  === "," raise "," compute_duration_base  ** "," compute_ compute_duration_base  ","sleep -@  -@ ","sleep -@  < "]}," Tins Attempt compute_duration_base":{"type":"method","name":"compute_duration_base","children":[],"call":[" result "," raise ","fmid == ","dx abs < ","dx abs ","fmid < ","function [] ","root + ","n times ","x1 - ","x2 - ","f < ","1 << ","sleep inspect ","f * >= ","f * ","(send\n  (begin\n    (erange\n      (int 0)\n      (lvar :attempts))) :inject) - ","s + ","x ** ","(erange\n  (int 0)\n  (lvar :attempts)) inject "," lambda ","x1 >= ","attempts <= ","function []  == ","x1 -  abs < ","x2 -  abs < ","x1 -  abs ","x2 -  abs ","function []  < ","fu1 << ctio1 <<  [] ","1 <<  times ","sleep i1 << spect ","(se1 << d\n  (begi1 << \n    (era1 << ge\n      (i1 << t 0)\n      (lvar :attempts))) :i1 << ject) - ","(era1 << ge\n  (i1 << t 0)\n  (lvar :attempts)) i1 << ject "]}," Tins AskAndSend ask_and_send_or_self!":{"type":"method","name":"ask_and_send_or_self!","children":[],"call":[" __send__ "," respond_to? "]}," Tins AskAndSend ask_and_send_or_self":{"type":"method","name":"ask_and_send_or_self","children":[],"call":[" __send__ "," respond_to? "]}," Unit parse":{"type":"method","name":"parse","children":[],"call":["FormatParser  new parse ","FormatParser  new ","UnitParser  new "," prefixes ","  prefixes  "]}," Unit FormatParser parse":{"type":"method","name":"parse","children":[],"call":["@unit_parser number "," raise ","@unit_parser string inspect ","@unit_parser string "," string inspect "," string ","@unit_parser eos? "," eos? "," location ","char inspect ","@unit_parser scan_char "," scan ","% inspect ","@unit_parser scan_unit ","@unit_parser scan_number "," reset "," scan  inspect ","@unit_parser scan_ scan  "]}," Unit FormatParser location":{"type":"method","name":"location","children":[],"call":["@unit_parser peek inspect ","@unit_parser peek "]}," Unit FormatParser reset":{"type":"method","name":"reset","children":[],"call":["@unit_parser reset "]}," Unit FormatParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Unit UnitParser parse":{"type":"method","name":"parse","children":[],"call":[" raise "]}," Unit UnitParser scan_char":{"type":"method","name":"scan_char","children":[],"call":[" scan "]}," Unit UnitParser scan_unit":{"type":"method","name":"scan_unit","children":[],"call":["prefix multiplier ","pre name == "," [] ","pre name ","@unit_uc_re prefixes find ","@unit_uc_re prefixes "," scan ","@unit_lc_re prefixes find ","@unit_lc_re prefixes ","@unit_re prefixes find ","@unit_re prefixes ","@ scan _uc_re prefixes find ","@ scan _uc_re prefixes ","@ scan _lc_re prefixes find ","@ scan _lc_re prefixes ","@ scan _re prefixes find ","@ scan _re prefixes "]}," Unit UnitParser scan_number":{"type":"method","name":"scan_number","children":[],"call":[" BigDecimal "," [] "," scan "]}," Unit UnitParser scan":{"type":"method","name":"scan","children":[],"call":["re nil? "]}," Unit UnitParser unit_re":{"type":"method","name":"unit_re","children":[],"call":[" define_method ","re singleton_class class_eval ","re singleton_class ","Regexp  new ","(send\n  (send\n    (lvar :prefixes) :reverse) :map) * ","Regexp  quote ","pre name ","prefixes reverse map ","prefixes reverse ","Regexp  new  singleton_class class_eval ","Regexp  new  singleton_class ","(send\n  (send\n    (lvar :pRegexp  new fixes) :Regexp  new verse) :map) * ","pRegexp  new  name ","pRegexp  new fixes Regexp  new verse map ","pRegexp  new fixes Regexp  new verse "]}," Unit UnitParser initialize":{"type":"method","name":"initialize","children":[],"call":[" unit_re ","Tins Unit  prefixes "]}," Unit format":{"type":"method","name":"format","children":[],"call":["value / ","prefix multiplier to_f ","prefix multiplier ","format sub ","prefix name ","prefixes [] ","(if\n  (send\n    (lvar :first_prefix) :fraction)\n  (int -1)\n  (int 1)) * / ","Math  log ","first_prefix step ","(if\n  (send\n    (lvar :first_prefix) :fraction)\n  (int -1)\n  (int 1)) * ","first_prefix fraction "," raise ","prefixes first "," prefixes ","value zero? ","value abs ","prefixes []  multiplier to_f ","prefixes []  multiplier ","prefixes []  name ","prefixes [] es [] "," prefixes  [] ","(if\n  (send\n    (lvar :first_prefixes [] ) :fraction)\n  (int -1)\n  (int 1)) * / ","(if\n  (send\n    (lvar :prefixes first ) :fraction)\n  (int -1)\n  (int 1)) * / ","first_prefixes []  step ","prefixes first  step ","(if\n  (send\n    (lvar :first_prefixes [] ) :fraction)\n  (int -1)\n  (int 1)) * ","(if\n  (send\n    (lvar :prefixes first ) :fraction)\n  (int -1)\n  (int 1)) * ","first_prefixes []  fraction ","prefixes first  fraction ","prefixes [] es first "," prefixes  first "," prefixes [] es ","  prefixes  "]}," Unit prefixes":{"type":"method","name":"prefixes","children":[],"call":[]}," Unit parse?":{"type":"method","name":"parse?","children":[],"call":[" parse "]}," Tins Expose expose":{"type":"method","name":"expose","children":[],"call":[" __send__ "," public ","o singleton_class class_eval ","o singleton_class "," dup "," private_methods + "," protected_methods "," private_methods ","method_name nil? "," instance_eval "," dup  singlet dup n_class class_eval "," dup  singlet dup n_class "," private_meth dup ds + "," private_ private_methods +  + "," pr dup tected_meth dup ds "," protected_ private_methods +  "," private_meth dup ds "," private_ private_methods +  ","meth dup d_name nil? "]}," Tins Duration <=>":{"type":"method","name":"<=>","children":[],"call":[" to_f <=> ","other to_f "," to_f "]}," Tins Duration to_f":{"type":"method","name":"to_f","children":[],"call":["@original_seconds to_f "]}," Tins Duration format_smart":{"type":"method","name":"format_smart","children":[],"call":[" format ","template << "," fractional_seconds? ","template prepend "," days? "]}," Tins TempIO temp_io":{"type":"method","name":"temp_io","children":[],"call":["io rewind ","io write ","content call ","content respond_to? ","Tempfile  open "," __method__ to_s "," __method__ ","content arity == ","content arity ","File  open ","Dir  chdir ","Dir  mktmpdir ","File  basename ","name to_s ","File  join "," raise ","content nil? ","content call  call ","content call  respond_to? ","content call  arity == ","content call  arity ","File  baseFile  basename  ","File  baseFile  join  ","File  basename  to_s ","File  join  to_s ","content call  nil? "]}," Tins TempIO Enum initialize":{"type":"method","name":"initialize","children":[],"call":["enum define_singleton_method ","(super) tap ","y yield ","file read ","file eof? "," temp_io "," raise "]}," Tins Duration negative?":{"type":"method","name":"negative?","children":[],"call":[]}," Tins HashSymbolizeKeysRecursive _symbolize_keys_recursive":{"type":"method","name":"_symbolize_keys_recursive","children":[],"call":[" _symbolize_keys_recursive ","object map! "," seen []= ","object __id__ "," seen ","Array  === ","object replace ","result []= ","k to_s to_sym ","k to_s ","object each ","Hash  === ","circular != "," seen [] ","object frozen? ","object map ","new_object []= ","object each_with_index ","new_object __id__ ","object class new ","object size ","object class ","object class new  []= ","object class new  __id__ "]}," Tins Limited wait":{"type":"method","name":"wait","children":[],"call":["@tg list each ","@tg list "]}," Tins Limited process":{"type":"method","name":"process","children":[],"call":[" wait "]}," TimedCache stored_value":{"type":"method","name":"stored_value","children":[],"call":[" JSON  parse ","@redis get full? ","@redis get "," namespaced "]}," TimedCache new_value":{"type":"method","name":"new_value","children":[],"call":["Value  new ","now to_i ","@block call "]}," TimedCache value":{"type":"method","name":"value","children":[],"call":["nv value ","@redis set ","nv to_json "," namespaced "," new_value ","stored value "," new_value to_json "," stored_value timestamp <= ","stored timestamp "," stored_value timestamp "," stored_value "," sleep ","Thread  new ","(send\n  (lvar :now) :-\n  (ivar :@ttl)) to_i >= ","(send\n  (lvar :now) :-\n  (ivar :@ttl)) to_i ","now - ","Time  now "," new_value  value "," new_value  to_json "," stored_value  value ","  stored_value _value timestamp <= "," stored_value  timestamp ","  stored_value _value timestamp ","  stored_value _value ","(send\n  (lvar :Time  now ) :-\n  (ivar :@ttl)) to_i >= ","(send\n  (lvar :Time  now ) :-\n  (ivar :@ttl)) to_i ","Time  now  - ","Time  Time  now  "]}," TimedCache namespaced":{"type":"method","name":"namespaced","children":[],"call":[]}," TimedCache initialize":{"type":"method","name":"initialize","children":[],"call":["Redis  new "," raise "]}," TimedCache Value as_json":{"type":"method","name":"as_json","children":[],"call":[" | "," class name "," class ","JSON  create_id "]}," TimedCache Value json_create":{"type":"method","name":"json_create","children":[],"call":[]}," Tins LRUCache not_exist":{"type":"method","name":"not_exist","children":[],"call":[" class send "," class "]}," Tins LRUCache size":{"type":"method","name":"size","children":[],"call":["@data size "]}," Tins LRUCache clear":{"type":"method","name":"clear","children":[],"call":["@data clear "]}," Tins LRUCache delete":{"type":"method","name":"delete","children":[],"call":["@data delete "]}," Tins LRUCache each":{"type":"method","name":"each","children":[],"call":["@data reverse_each "]}," Tins LRUCache []=":{"type":"method","name":"[]=","children":[],"call":["@data delete ","@data keys first ","@data keys ","@data size > ","@data size ","@data []= "]}," Tins LRUCache []":{"type":"method","name":"[]","children":[],"call":["@data []= "," not_exist ","@data delete "]}," Tins LRUCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tins StringVersion":{"type":"method","name":"StringVersion","children":[],"call":[]}}