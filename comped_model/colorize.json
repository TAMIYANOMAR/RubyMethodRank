{" String color_matrix":{"type":"method","name":"color_matrix","children":[],"call":[" puts ","| rjust * ","size - ","| rjust ","txt length ","String  colors reverse each_with_index ","String  colors reverse ","String  colors "," print ","txt colorize ","String  colors each ","String  colors length "," fail ","String  colors length  - "]}," String colors":{"type":"method","name":"colors","children":[],"call":["keys << ","COLORS  each_key ","COLORS  keys "]}," String modes":{"type":"method","name":"modes","children":[],"call":["keys << ","MODES  each_key ","MODES  keys "]}," String colorized?":{"type":"method","name":"colorized?","children":[],"call":["@uncolorized nil? ! ","@uncolorized nil? ","(ivar :@uncolorized) nil? ! ","(ivar :@uncolorized) nil? ","(send\n  (send\n    (self) :scan\n    (const nil :REGEXP_PATTERN)) :reject) any? ","match last "," scan reject "," scan "," scan reject any? "]}," String uncolorize":{"type":"method","name":"uncolorize","children":[],"call":["str << ","match [] "," scan inject "," scan "]}," String colorize":{"type":"method","name":"colorize","children":[],"call":["(str \"\\e[\") set_color_parameters ","color_parameters [] ","color_parameters [] + ","color_parameters [] > "," dup ","color_parameters []= ","COLORS  [] ","params instance_of? ","MODES  [] ","params [] "," raise "," require ","PLATFORM  =~ ","STDOUT  isatty ","RUBY_PLATFORM  =~ ","str << ","match [] ","match []= ","COLORS  [] + "," scan inject "," scan "," set_from_params "," set_defaults "," windows_requires "]}," String set_color_parameters":{"type":"method","name":"set_color_parameters","children":[],"call":["params [] ","params instance_of? "]}," String color_samples":{"type":"method","name":"color_samples","children":[],"call":[" puts ","(begin\n  (send\n    (send\n      (lvar :color) :inspect) :rjust\n    (int 15))) colorize + ","background inspect ljust ","background inspect ","color inspect rjust ","color inspect ","(begin\n  (send\n    (send\n      (lvar :color) :inspect) :rjust\n    (int 15))) colorize ","String  colors permutation each ","String  colors permutation ","String  colors "]}," String set_from_symbol":{"type":"method","name":"set_from_symbol","children":[],"call":["match []= ","COLORS  [] + ","COLORS  [] "]}," String set_from_hash":{"type":"method","name":"set_from_hash","children":[],"call":["match []= ","COLORS  [] + ","COLORS  [] ","hash [] ","MODES  [] "]}," String set_from_params":{"type":"method","name":"set_from_params","children":[],"call":[" set_from_symbol "," set_from_hash "]}," String set_defaults":{"type":"method","name":"set_defaults","children":[],"call":["match [] ","COLORS  [] + ","COLORS  [] ","MODES  [] "]}," String windows_requires":{"type":"method","name":"windows_requires","children":[],"call":[" raise "," require ","RUBY_PLATFORM  =~ ","RUBY_VERSION  < "]}," Colorize InstanceMethods require_windows_libs":{"type":"method","name":"require_windows_libs","children":[],"call":[" raise "," require ","RUBY_PLATFORM  =~ ","RUBY_VERSION  < ","RUBY_PLATFORM  include? "]}," Colorize InstanceMethods scan_for_colors":{"type":"method","name":"scan_for_colors","children":[],"call":[" scan "," split_colors "," scan map "," scan_for_colors_regex "]}," Colorize InstanceMethods mode":{"type":"method","name":"mode","children":[],"call":[" class mode_codes [] "," class mode_codes "," class "]}," Colorize InstanceMethods background_color":{"type":"method","name":"background_color","children":[],"call":[" class color_codes [] + "," class color_codes [] "," class color_codes "," class "]}," Colorize InstanceMethods color":{"type":"method","name":"color","children":[],"call":[" class color_codes [] + "," class color_codes [] "," class color_codes "," class "]}," Colorize InstanceMethods color_from_symbol":{"type":"method","name":"color_from_symbol","children":[],"call":["match []= "," color ","match [] "," class prevent_colors "," class "]}," Colorize InstanceMethods colors_from_hash":{"type":"method","name":"colors_from_hash","children":[],"call":["match []= "," background_color ","hash [] "," color "," mode ","match [] "," class prevent_colors "," class "]}," Colorize InstanceMethods colors_from_params":{"type":"method","name":"colors_from_params","children":[],"call":[" color_from_symbol "," colors_from_hash "]}," Colorize InstanceMethods defaults_colors":{"type":"method","name":"defaults_colors","children":[],"call":["match [] "," background_color "," color "," mode "]}," Colorize InstanceMethods colorized?":{"type":"method","name":"colorized?","children":[],"call":[" scan_for_colors reject any? "," scan_for_colors reject "," scan_for_colors ","(send\n  (send nil :scan_for_colors) :inject\n  (array)) flatten compact any? ","(send\n  (send nil :scan_for_colors) :inject\n  (array)) flatten compact ","(send\n  (send nil :scan_for_colors) :inject\n  (array)) flatten ","colors << ","match tap "," scan_for_colors inject "]}," Colorize InstanceMethods uncolorize":{"type":"method","name":"uncolorize","children":[],"call":["str << ","match [] "," scan_for_colors inject "," scan_for_colors "," class new "," class "]}," Colorize InstanceMethods colorize":{"type":"method","name":"colorize","children":[],"call":["str << ","match [] "," colors_from_params "," defaults_colors "," scan_for_colors inject "," scan_for_colors "," require_windows_libs "," class disable_colorization "," class "," class new "," colorized_string "]}," Colorize ClassMethods color_matrix":{"type":"method","name":"color_matrix","children":[],"call":[" fail "]}," Colorize ClassMethods color_samples":{"type":"method","name":"color_samples","children":[],"call":[" puts ","sample_text colorize ","background inspect ljust ","background inspect ","color inspect rjust ","color inspect "," colors permutation each "," colors permutation "," colors "," new colorize "," new "]}," Colorize ClassMethods modes_methods":{"type":"method","name":"modes_methods","children":[],"call":[" colorize "," define_method ","key == "," modes each "," modes "]}," Colorize ClassMethods color_methods":{"type":"method","name":"color_methods","children":[],"call":[" colorize "," define_method ","key == "," colors each "," colors "," add_color_method "]}," Colorize ClassMethods modes":{"type":"method","name":"modes","children":[],"call":[" mode_codes keys "," mode_codes "]}," Colorize ClassMethods mode_codes":{"type":"method","name":"mode_codes","children":[],"call":[]}," Colorize ClassMethods colors":{"type":"method","name":"colors","children":[],"call":[" color_codes keys "," color_codes "]}," Colorize ClassMethods color_codes":{"type":"method","name":"color_codes","children":[],"call":[]}," Colorize ClassMethods disable_colorization=":{"type":"method","name":"disable_colorization=","children":[],"call":[]}," Colorize ClassMethods disable_colorization":{"type":"method","name":"disable_colorization","children":[],"call":["value nil? "]}," Colorize InstanceMethods split_colors":{"type":"method","name":"split_colors","children":[],"call":["array []= ","match [] ","colors length == ","colors length ","Array  new tap ","Array  new ","(or\n  (send\n    (lvar :match) :[]\n    (int 0))\n  (str \"\")) split ","Array  new  []= ","(or\n  (send\n    (lvar :match) :[]\n    (int 0))\n  (str \"\")) split  length == ","(or\n  (send\n    (lvar :match) :[]\n    (int 0))\n  (str \"\")) split  length "]}," ColorizedString []":{"type":"method","name":"[]","children":[],"call":[]}," Colorize ClassMethods check_if_color_exist!":{"type":"method","name":"check_if_color_exist!","children":[],"call":[" fail "," color_codes [] "," color_codes "," color_exist? "]}," Colorize ClassMethods check_if_color_available!":{"type":"method","name":"check_if_color_available!","children":[],"call":[" fail "," color_codes [] "," color_codes "," color_exist? "]}," Colorize ClassMethods parse_color_alias_params":{"type":"method","name":"parse_color_alias_params","children":[],"call":["param to_a ","param is_a? ","param length == ","param length ","params flat_map ","params length == ","params length ","params is_a? "]}," Colorize ClassMethods add_color_method":{"type":"method","name":"add_color_method","children":[],"call":[" colorize "," define_method "]}," Colorize ClassMethods add_color_code":{"type":"method","name":"add_color_code","children":[],"call":["@@color_codes []= "]}," Colorize ClassMethods add_color_alias":{"type":"method","name":"add_color_alias","children":[],"call":[" add_color_method "," add_color_code "," color_codes [] "," color_codes "," check_if_color_exist! "," check_if_color_available! "," parse_color_alias_params each "," parse_color_alias_params "]}," Colorize ClassMethods prevent_colors=":{"type":"method","name":"prevent_colors=","children":[],"call":[]}," Colorize ClassMethods prevent_colors":{"type":"method","name":"prevent_colors","children":[],"call":["value nil? "]}," Colorize ClassMethods color_exist?":{"type":"method","name":"color_exist?","children":[],"call":[" color_codes [] nil? ! "," color_codes [] nil? "," color_codes [] "," color_codes "]}," Colorize InstanceMethods scan_for_colors_regex":{"type":"method","name":"scan_for_colors_regex","children":[],"call":[" class enable_readline_support "," class "]}," Colorize InstanceMethods colorized_string":{"type":"method","name":"colorized_string","children":[],"call":[" class enable_readline_support "," class "]}," Colorize ClassMethods enable_readline_support=":{"type":"method","name":"enable_readline_support=","children":[],"call":[]}," Colorize ClassMethods enable_readline_support":{"type":"method","name":"enable_readline_support","children":[],"call":["value nil? "]}}