{" Gitolite SSHKey hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@owner) hash "]}," Gitolite SSHKey ==":{"type":"method","name":"==","children":[],"call":["@location == ","key location ","@owner == ","key owner ","@email == ","key email ","@blob == ","key blob ","@type == ","key type "]}," Gitolite SSHKey filename":{"type":"method","name":"filename","children":[],"call":["@location empty? "]}," Gitolite SSHKey to_file":{"type":"method","name":"to_file","children":[],"call":["f write "," to_s ","f sync= ","File  open ","File  join "," filename "]}," Gitolite SSHKey to_s":{"type":"method","name":"to_s","children":[],"call":["(ivar :@type) join "]}," Gitolite SSHKey from_string":{"type":"method","name":"from_string","children":[],"call":[" new ","email nil? "," raise ","blob nil? ","type nil? ","key_string split ","owner nil? "]}," Gitolite SSHKey from_file":{"type":"method","name":"from_file","children":[],"call":[" from_string ","File  read ","File  basename =~ ","File  basename "," raise ","File  exists? "]}," Gitolite SSHKey initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Gitolite GitoliteAdmin list_keys":{"type":"method","name":"list_keys","children":[],"call":["Dir  glob ","path + ","@key_dir_path + ","Dir  chdir ","(str \" find \") chomp split ","(str \" find \") chomp "]}," Gitolite GitoliteAdmin load_config":{"type":"method","name":"load_config","children":[],"call":["Config  new ","File  join "]}," Gitolite GitoliteAdmin load_keys":{"type":"method","name":"load_keys","children":[],"call":["set clean_up! ","keys values each ","keys values ","keys [] << ","keys [] ","new_key owner ","SSHKey  from_file "," list_keys each "," list_keys ","k []= ","DirtyProxy  new ","Hash  new ","File  join ","new_key new_key owner  ","SSHKey  from_file  owner "]}," Gitolite GitoliteAdmin config=":{"type":"method","name":"config=","children":[],"call":[]}," Gitolite GitoliteAdmin config":{"type":"method","name":"config","children":[],"call":[" load_config "]}," Gitolite GitoliteAdmin ssh_keys":{"type":"method","name":"ssh_keys","children":[],"call":[" load_keys "]}," Gitolite GitoliteAdmin is_gitolite_admin_repo?":{"type":"method","name":"is_gitolite_admin_repo?","children":[],"call":["Dir  glob empty? ! ","Dir  glob empty? ","Dir  glob ","File  join ","File  exists? ","Grit Repo  new "]}," Gitolite GitoliteAdmin rm_key":{"type":"method","name":"rm_key","children":[],"call":[" ssh_keys [] delete "," ssh_keys [] ","key owner "," ssh_keys "," raise ","key instance_of? "]}," Gitolite GitoliteAdmin add_key":{"type":"method","name":"add_key","children":[],"call":[" ssh_keys [] << "," ssh_keys [] ","key owner "," ssh_keys "," raise ","key instance_of? "]}," Gitolite GitoliteAdmin update":{"type":"method","name":"update","children":[],"call":[" reload! ","@gl_admin git native ","options [] ","@gl_admin working_dir ","@gl_admin git "," reset! ","(pair\n  (sym :reset)\n  (true)) merge ","@gl_admin git pull ","Dir  chdir ","@git_options merge "," git_options merge "," git_options ","(pair\n  (sym :reset)\n  (true)) merge  [] ","@git_(pair\n  (sym :reset)\n  (true)) merge  merge "," git_(pair\n  (sym :reset)\n  (true)) merge  merge "," git_(pair\n  (sym :reset)\n  (true)) merge  "]}," Gitolite GitoliteAdmin save_and_apply":{"type":"method","name":"save_and_apply","children":[],"call":[" apply "," save "]}," Gitolite GitoliteAdmin apply":{"type":"method","name":"apply","children":[],"call":["@gl_admin git native ","@gl_admin working_dir ","@gl_admin git ","@gl_admin git push ","@gl_admin commit_index "," git_options "]}," Gitolite GitoliteAdmin reload!":{"type":"method","name":"reload!","children":[],"call":[" load_config "," load_keys "]}," Gitolite GitoliteAdmin reset!":{"type":"method","name":"reset!","children":[],"call":[" reload! ","@gl_admin git clean ","@gl_admin git ","@gl_admin git reset ","Dir  chdir ","@gl_admin working_dir ","@gl_admin git native ","@git_options merge "," git_options merge "," git_options "]}," Gitolite GitoliteAdmin save":{"type":"method","name":"save","children":[],"call":["@gl_admin git native ","@gl_admin working_dir ","@gl_admin git ","k to_file gsub ","@gl_admin working_dir + ","k to_file ","key each ","key dirty? ! ","key dirty? ","key respond_to? ","@ssh_keys each_value ","to_remove each ","File  join ","(send\n  (lvar :files) :-\n  (lvar :keys)) map ","files - ","(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten ","t filename ","f map ","@ssh_keys values map ","@ssh_keys values ","File  basename "," list_keys map "," list_keys ","@config to_file gsub ","@config to_file ","args join ","args << ","options [] ","options [] empty? ! ","options [] empty? ","options has_key? ","@gl_admin add ","@gl_admin remove ","Dir  chdir ","@gl_admin commit_index "," git_options ","@ssh_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten  each_value ","(send\n  (lvar :files) :-\n  (lvar :(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten )) map ","(send\n  (send\n    (ivar :@ssh_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten ) :values) :map) flatten ","@ssh_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten  values map ","@ssh_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten  values "," list_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten  map "," list_(send\n  (send\n    (ivar :@ssh_keys) :values) :map) flatten  "]}," Gitolite GitoliteAdmin bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[" new ","gl_admin git native ","options [] ","gl_admin working_dir ","gl_admin git ","Grit Repo  init ","c to_file ","File  join ","c add_repo ","r add_permission ","Config Repo  new ","Config  init ","FileUtils  mkdir_p ","FileUtils  rm_rf "," is_gitolite_admin_repo? ","Grit Repo  init  git native ","Grit Repo  init  working_dir ","gl_admin woConfig Repo  new king_diConfig Repo  new  ","Grit Repo  init  git ","GConfig Repo  new it Repo  init ","Config  init  to_file ","c add_Config Repo  new epo ","Config  init  add_repo ","Config Repo  new  add_peConfig Repo  new mission ","FileUtils  mkdiConfig Repo  new _p ","FileUtils  Config Repo  new m_Config Repo  new f "," is_gitolite_admin_Config Repo  new epo? "]}," Gitolite GitoliteAdmin initialize":{"type":"method","name":"initialize","children":[],"call":["Grit  debug= ","options [] ","Grit Repo  new "," reload! ","Grit Git  git_timeout= ","File  join "]}," Gitolite DirtyProxy clean_up!":{"type":"method","name":"clean_up!","children":[],"call":["@target hash "]}," Gitolite DirtyProxy dirty?":{"type":"method","name":"dirty?","children":[],"call":["@clean_hash != ","@target hash "]}," Gitolite DirtyProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["(sym :dirty?) include? ","symbol to_sym "]}," Gitolite DirtyProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@target send "]}," Gitolite DirtyProxy initialize":{"type":"method","name":"initialize","children":[],"call":[" clean_up! "]}," Gitolite Config build_groups_depgraph":{"type":"method","name":"build_groups_depgraph","children":[],"call":[" raise ","@groups empty? ","dep_order empty? ","dp topsort ","dp add_edge! ","subgroups each "," get_group ","g gsub ","(send\n  (send\n    (lvar :group) :users) :select) map ","u =~ ","group users select ","group users ","dp add_vertex! ","@groups each_value "," GRATR Digraph  new "," Plexus Digraph  new ","dp topsort  empty? "," GRATR Digraph  new  topsort "," Plexus Digraph  new  topsort "," GRATR Digraph  new  add_edge! "," Plexus Digraph  new  add_edge! "," GRATR Digraph  new  add_vertex! "," Plexus Digraph  new  add_vertex! "]}," Gitolite Config method_missing":{"type":"method","name":"method_missing","children":[],"call":[" normalize_name ","args [] ","meth to_s =~ ","meth to_s "]}," Gitolite Config normalize_name":{"type":"method","name":"normalize_name","children":[],"call":["context to_s ","context name "]}," Gitolite Config process_config":{"type":"method","name":"process_config","children":[],"call":[" raise ","r description= ","r owner= "," add_repo ","Repo  new ","@repos [] "," has_repo? ","repo =~ ","description nil? ","@groups [] add_users ","@groups [] ","@groups []= ","Group  new "," has_group? ","2 split ","@repos [] set_gitolite_option ","context each "," repo ","value nil? ","@repos [] set_git_config ","@repos [] add_permission ","3 split ","@repos []= ","context << ","repos each ","1 split ","line empty? "," cleanup_config_line ","File  open each ","File  open "," Repo  new aise "," @repos [] aise ","Repo  new  descRepo  new iption= ","@repos []  desc@repos [] iption= ","Repo  new  owneRepo  new = ","@repos []  owne@repos [] = "," add_Repo  new epo "," add_@repos [] epo ","@Repo  new epos [] ","@@repos [] epos [] ","@1 split  [] "," has_Repo  new epo? "," has_@repos [] epo? ","Repo  new epo =~ ","@repos [] epo =~ ","descRepo  new iption nil? ","desc@repos [] iption nil? ","@gRepo  new oups [] add_useRepo  new s ","@g@repos [] oups [] add_use@repos [] s ","@groups [] add_2 split  ","@groups [] add_3 split  ","@gRepo  new oups [] ","@g@repos [] oups [] ","@gRepo  new oups []= ","@g@repos [] oups []= ","GRepo  new oup  new ","G@repos [] oup  new "," has_gRepo  new oup? "," has_g@repos [] oup? ","@Repo  new epos [] set_gitolite_option ","@@repos [] epos [] set_gitolite_option ","@1 split  [] set_gitolite_option "," Repo  new epo "," @repos [] epo ","@Repo  new epos [] set_git_config ","@@repos [] epos [] set_git_config ","@1 split  [] set_git_config ","@Repo  new epos [] add_peRepo  new mission ","@@repos [] epos [] add_pe@repos [] mission ","@1 split  [] add_permission ","@Repo  new epos []= ","@@repos [] epos []= ","@1 split  []= ","Repo  new epos each ","@repos [] epos each ","1 split  each "," cleanup_config_line  empty? "," cleanup_config_ cleanup_config_line  "]}," Gitolite Config cleanup_config_line":{"type":"method","name":"cleanup_config_line","children":[],"call":["line strip ","line gsub! "]}," Gitolite Config to_file":{"type":"method","name":"to_file","children":[],"call":["f write ","gitweb_descs join ","gitweb_descs push ","gwd nil? ","v gitweb_description ","v to_s ","@repos sort each ","@repos sort ","group to_s ","dep_order each "," build_groups_depgraph ","f sync= ","File  open ","File  join "," raise ","File  directory? ","v gitweb_description  nil? "," build_groups_depgraph  each "]}," Gitolite Config get_group":{"type":"method","name":"get_group","children":[],"call":["@groups [] "," normalize_group_name "," normalize_group_ normalize_group_name  "]}," Gitolite Config has_group?":{"type":"method","name":"has_group?","children":[],"call":["@groups has_key? "," normalize_group_name "," normalize_group_ normalize_group_name  "]}," Gitolite Config rm_group":{"type":"method","name":"rm_group","children":[],"call":["@groups delete "," normalize_group_name "," normalize_group_ normalize_group_name  "]}," Gitolite Config add_group":{"type":"method","name":"add_group","children":[],"call":["@groups []= ","group name "," raise ","group instance_of? "]}," Gitolite Config get_repo":{"type":"method","name":"get_repo","children":[],"call":["@repos [] "," normalize_repo_name "," normalize_repo_ normalize_repo_name  "]}," Gitolite Config has_repo?":{"type":"method","name":"has_repo?","children":[],"call":["@repos has_key? "," normalize_repo_name "," normalize_repo_ normalize_repo_name  "]}," Gitolite Config rm_repo":{"type":"method","name":"rm_repo","children":[],"call":["@repos delete "," normalize_repo_name "," normalize_repo_ normalize_repo_name  "]}," Gitolite Config add_repo":{"type":"method","name":"add_repo","children":[],"call":["@repos []= ","repo name "," raise ","repo instance_of? "]}," Gitolite Config init":{"type":"method","name":"init","children":[],"call":[]}," Gitolite Config initialize":{"type":"method","name":"initialize","children":[],"call":[" process_config ","File  basename "]}," Gitolite Config Repo gitweb_description":{"type":"method","name":"gitweb_description","children":[],"call":["@owner nil? ","@description nil? "]}," Gitolite Config Repo to_s":{"type":"method","name":"to_s","children":[],"call":["  option  + + + + ","  option  + + + ","  option  + + ","  option  + ","@options each ","  config  + + + + ","  config  + + + ","  config  + + ","  config  + ","@config each ","   + + + + + ","   + + + + ","users join ","   + + + ","   + + ","refex ljust ","   + ","perm ljust ","list each ","perm_hash each ","@permissions each "]}," Gitolite Config Repo unset_gitolite_option":{"type":"method","name":"unset_gitolite_option","children":[],"call":["@options delete "]}," Gitolite Config Repo set_gitolite_option":{"type":"method","name":"set_gitolite_option","children":[],"call":["@options []= "]}," Gitolite Config Repo unset_git_config":{"type":"method","name":"unset_git_config","children":[],"call":["@config delete "]}," Gitolite Config Repo set_git_config":{"type":"method","name":"set_git_config","children":[],"call":["@config []= "]}," Gitolite Config Repo add_permission":{"type":"method","name":"add_permission","children":[],"call":[" raise ","@permissions last [] [] uniq! ","@permissions last [] [] ","@permissions last [] ","@permissions last ","@permissions last [] [] concat ","users flatten ","@permissions push ","@perm_hash_lambda call ","perm == ","perm =~ "]}," Gitolite Config Repo clean_permissions":{"type":"method","name":"clean_permissions","children":[],"call":["Array  new push ","@perm_hash_lambda call ","Array  new "]}," Gitolite Config Repo initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new push ","@perm_hash_lambda call ","Array  new ","k []= ","k2 []= ","Hash  new "," lambda ","OrderedHash  new "]}," Gitolite Config Group to_s":{"type":"method","name":"to_s","children":[],"call":["name ljust ","@users join "]}," Gitolite Config Group size":{"type":"method","name":"size","children":[],"call":["@users length "]}," Gitolite Config Group has_user?":{"type":"method","name":"has_user?","children":[],"call":["@users include? ","user to_s "]}," Gitolite Config Group rm_user":{"type":"method","name":"rm_user","children":[],"call":["@users delete ","user to_s "]}," Gitolite Config Group add_users":{"type":"method","name":"add_users","children":[],"call":["@users concat sort! uniq! ","@users concat sort! ","@users concat ","u to_s ","users flatten map ","users flatten "]}," Gitolite Config Group add_user":{"type":"method","name":"add_user","children":[],"call":["@users push sort! ","@users push ","user to_s "," has_user? "]}," Gitolite Config Group empty!":{"type":"method","name":"empty!","children":[],"call":["@users clear "]}," Gitolite Config Group initialize":{"type":"method","name":"initialize","children":[],"call":["name gsub "]}," Gitolite GitoliteAdmin git_options":{"type":"method","name":"git_options","children":[],"call":["@git_options clone "]}}