{" TTY Screen jruby?":{"type":"method","name":"jruby?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," TTY Screen nonzero_column?":{"type":"method","name":"nonzero_column?","children":[],"call":["column to_i > ","column to_i "]}," TTY Screen run_command":{"type":"method","name":"run_command","children":[],"call":["args join ","out close ","out read ","out rewind ","result nil? "," system ","out path ","Tempfile  new "," require ","Tempfile  new  close ","Tempfile  new  read ","Tempfile  new  rewind "," system  nil? ","Tempfile  new  path "]}," TTY Screen from_ansicon":{"type":"method","name":"from_ansicon","children":[],"call":[" nonzero_column? ","size [] ","(nth-ref 2) map ","ENV  [] =~ ","ENV  [] ","(nth-ref 2) map  [] "]}," TTY Screen from_env":{"type":"method","name":"from_env","children":[],"call":[" nonzero_column? ","size [] ","ENV  [] to_i ","ENV  [] ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"LINES\"))\n  (send\n    (const nil :ENV) :[]\n    (str \"ROWS\"))) to_i ","ENV  [] =~ "]}," TTY Screen from_stty":{"type":"method","name":"from_stty","children":[],"call":[" nonzero_column? ","size [] "," run_command split map "," run_command split "," run_command "," output tty? "," output "," run_command split map  [] "]}," TTY Screen from_tput":{"type":"method","name":"from_tput","children":[],"call":[" nonzero_column? "," run_command to_i "," run_command "," output tty? "," output "]}," TTY Screen from_readline":{"type":"method","name":"from_readline","children":[],"call":[" nonzero_column? ","size [] ","Readline  get_screen_size ","Readline  get_screen_size  [] ","Readline  get_screen_Readline  get_screen_size  "]}," TTY Screen from_io_console":{"type":"method","name":"from_io_console","children":[],"call":[" nonzero_column? ","size [] ","IO  console winsize ","IO  console ","Kernel  require "," jruby? ","IO  respond_to? "," try_io_console ","IO  console winsize  [] ","IO  console winIO  console winsize  "]}," TTY Screen width":{"type":"method","name":"width","children":[],"call":[" size [] "," size "]}," TTY Screen height":{"type":"method","name":"height","children":[],"call":[" size [] "," size "]}," TTY Screen default_size":{"type":"method","name":"default_size","children":[],"call":["ENV  [] to_i nonzero? ","ENV  [] to_i ","ENV  [] "]}," TTY Screen size":{"type":"method","name":"size","children":[],"call":[" default_size "," from_ansicon "," from_env "," from_stty "," from_tput "," from_readline "," from_io_console ","@size size "," size_from_ansicon "," size_from_env "," size_from_stty "," size_from_tput "," size_from_readline "," size_from_io_console "," size_from_ioctl "," size_from_win_api "," size_from_java "," size_from_default "," default_ from_io_console  "," default_ size_from_java  ","@ from_io_console   from_io_console  ","@ size_from_java   size_from_java  ","  from_io_console _from_ansicon ","  size_from_java _from_ansicon ","  from_io_console _from_env ","  size_from_java _from_env ","  from_io_console _from_stty ","  size_from_java _from_stty ","  from_io_console _from_tput ","  size_from_java _from_tput ","  from_io_console _from_readline ","  size_from_java _from_readline ","  from_io_console _from_io_console ","  size_from_java _from_io_console ","  from_io_console _from_ioctl ","  size_from_java _from_ioctl ","  from_io_console _from_win_api ","  size_from_java _from_win_api ","  from_io_console _from_java ","  size_from_java _from_java ","  from_io_console _from_default ","  size_from_java _from_default "]}," TTY Screen initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","Size  new ","Color  new "]}," TTY Screen try_io_console":{"type":"method","name":"try_io_console","children":[],"call":[" warn "," output winsize "," output ","IO  method_defined? "," output tty? "," require "]}," TTY Screen color?":{"type":"method","name":"color?","children":[],"call":["@color supports? "]}," TTY Screen Size jruby?":{"type":"method","name":"jruby?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," TTY Screen Size nonzero_column?":{"type":"method","name":"nonzero_column?","children":[],"call":["column to_i > ","column to_i "]}," TTY Screen Size run_command":{"type":"method","name":"run_command","children":[],"call":["args join ","out close ","out read ","out rewind ","result nil? "," system ","out path ","Tempfile  new "," require ","Tempfile  new  close ","Tempfile  new  read ","Tempfile  new  rewind "," system  nil? ","Tempfile  new  path "]}," TTY Screen Size default_size":{"type":"method","name":"default_size","children":[],"call":["ENV  [] to_i nonzero? ","ENV  [] to_i ","ENV  [] ","@env [] to_i nonzero? ","@env [] to_i ","@env [] "]}," TTY Screen Size from_ansicon":{"type":"method","name":"from_ansicon","children":[],"call":[" nonzero_column? ","size [] ","(nth-ref 2) map ","ENV  [] =~ ","ENV  [] ","@env [] =~ ","@env [] ","(nth-ref 2) map  [] "]}," TTY Screen Size from_env":{"type":"method","name":"from_env","children":[],"call":[" nonzero_column? ","size [] ","ENV  [] to_i ","ENV  [] ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"LINES\"))\n  (send\n    (const nil :ENV) :[]\n    (str \"ROWS\"))) to_i ","ENV  [] =~ ","@env [] to_i ","@env [] ","(or\n  (send\n    (ivar :@env) :[]\n    (str \"LINES\"))\n  (send\n    (ivar :@env) :[]\n    (str \"ROWS\"))) to_i ","@env [] =~ "]}," TTY Screen Size from_stty":{"type":"method","name":"from_stty","children":[],"call":[" nonzero_column? ","size [] "," run_command split map "," run_command split "," run_command "," output tty? "," output ","out split map ","out split "," run_command split map  [] ","out split map  [] ","  run_command put tty? ","  run_command put "," run_command  split map "," run_command  split "]}," TTY Screen Size from_tput":{"type":"method","name":"from_tput","children":[],"call":[" nonzero_column? "," run_command to_i "," run_command "," output tty? "," output "]}," TTY Screen Size from_readline":{"type":"method","name":"from_readline","children":[],"call":[" nonzero_column? ","size [] ","Readline  get_screen_size ","Readline  respond_to? ","Readline  get_screen_size  [] ","Readline  get_screen_Readline  get_screen_size  "]}," TTY Screen Size try_io_console":{"type":"method","name":"try_io_console","children":[],"call":[" warn "," output winsize "," output ","IO  method_defined? "," output tty? "," require "]}," TTY Screen Size from_io_console":{"type":"method","name":"from_io_console","children":[],"call":[" nonzero_column? ","size [] "," try_io_console "," jruby? "]}," TTY Screen Size size":{"type":"method","name":"size","children":[],"call":[" default_size "," from_ansicon "," from_env "," from_stty "," from_tput "," from_readline "," from_io_console "," default_ from_io_console  "]}," TTY Screen Size initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," TTY Screen Color tty?":{"type":"method","name":"tty?","children":[],"call":[" output tty? "," output "]}," TTY Screen Color from_env":{"type":"method","name":"from_env","children":[],"call":["ENV  include? "]}," TTY Screen Color from_term":{"type":"method","name":"from_term","children":[],"call":["ENV  [] =~ ","ENV  [] ","ENV  [] == "]}," TTY Screen Color from_tput":{"type":"method","name":"from_tput","children":[],"call":["(str \"tput colors 2>/dev/null\") to_i > ","(str \"tput colors 2>/dev/null\") to_i "]}," TTY Screen Color from_curses":{"type":"method","name":"from_curses","children":[],"call":[" warn ","curses_class close_screen ","curses_class has_colors? ","curses_class init_screen "," require ","curses_class curses_class has_colors? s? "]}," TTY Screen Color supports?":{"type":"method","name":"supports?","children":[],"call":[" from_env "," from_term "," from_tput "," from_curses "," tty? ","value == ","(lvasgn :value\n  (send nil :public_send\n    (lvar :from_check))) != "," public_send ","(str \"from_curses\") each "," public_send  == ","(lvasgn : public_send \n  (send nil :public_send\n    (lvar :from_check))) != "]}," TTY Screen Color initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," TTY Screen size_from_ansicon":{"type":"method","name":"size_from_ansicon","children":[],"call":[" nonzero_column? ","size [] ","(nth-ref 2) map ","@env [] =~ ","@env [] ","(nth-ref 2) map  [] "]}," TTY Screen size_from_env":{"type":"method","name":"size_from_env","children":[],"call":[" nonzero_column? ","size [] ","@env [] to_i ","@env [] ","(or\n  (send\n    (ivar :@env) :[]\n    (str \"LINES\"))\n  (send\n    (ivar :@env) :[]\n    (str \"ROWS\"))) to_i ","@env [] =~ "]}," TTY Screen size_from_stty":{"type":"method","name":"size_from_stty","children":[],"call":[" nonzero_column? ","size [] ","out split map ","out split "," run_command ","@output tty? "," command_exist? ","out split map  [] "," run_command  split map "," run_command  split ","@ run_command put tty? "]}," TTY Screen size_from_tput":{"type":"method","name":"size_from_tput","children":[],"call":[" nonzero_column? "," run_command to_i "," run_command ","@output tty? ","cols to_i ","lines to_i "," command_exist? "," run_command to_i  to_i "," run_command  to_i "]}," TTY Screen size_from_readline":{"type":"method","name":"size_from_readline","children":[],"call":[" nonzero_column? ","size [] ","Readline  get_screen_size ","Readline  respond_to? "," warn "," Readline  get_screen_size "," Readline  respond_to? "," require ","Readline  get_screen_size  [] "," Readline  get_screen_size  [] ","Readline  get_screen_Readline  get_screen_size  ","Readline  get_screen_ Readline  get_screen_size  "," Readline  get_screen_Readline  get_screen_size  "," Readline  get_screen_ Readline  get_screen_size  "]}," TTY Screen ioctl?":{"type":"method","name":"ioctl?","children":[],"call":["@output ioctl >= ","@output ioctl ","$stderr ioctl >= ","$stderr ioctl ","$stdin ioctl >= ","$stdin ioctl ","$stdout ioctl >= ","$stdout ioctl "]}," TTY Screen size_from_ioctl":{"type":"method","name":"size_from_ioctl","children":[],"call":["buffer unpack [] ","buffer unpack "," ioctl? ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack ","(int 0) * ","format size ","@output respond_to? "," jruby? "," nonzero_column? ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack [] ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack "]}," TTY Screen size_from_io_console":{"type":"method","name":"size_from_io_console","children":[],"call":[" warn "," nonzero_column? ","size [] ","@output winsize ","IO  method_defined? ","@output tty? "," require "," jruby? ","@output respond_to? ","@output winsize  [] ","@output win@output winsize  "]}," TTY Screen size_from_java":{"type":"method","name":"size_from_java","children":[],"call":[" warn ","terminal get_width ","terminal get_height ","TerminalFactory  get "," java_import "," require "," jruby? "," nonzero_column? ","size [] ","TerminalFactory  get  get_width ","TerminalFactory  get  get_height "]}," TTY Screen size_from_win_api":{"type":"method","name":"size_from_win_api","children":[],"call":[" warn ","right - + ","right - ","bottom - + ","bottom - ","buffer unpack ","get_console_buffer_info call ","get_std_handle call ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack ","(int 0) * ","format size ","Fiddle Function  new ","kernel32 [] ","Fiddle TYPE_INT  -@ ","Fiddle Handle  new "," require "," nonzero_column? ","size [] - ","size [] ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack ","get_console_(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack _info call ","Fiddle Function  new  call ","Fiddle Handle  new  [] "]}," TTY Screen private_module_function":{"type":"method","name":"private_module_function","children":[],"call":[]}," TTY Screen command_exist?":{"type":"method","name":"command_exist?","children":[],"call":[" File  exist? ","exts any? "," File  join "," env fetch split any? "," env fetch split "," env fetch "," env "," env fetch split  any? "]}," TTY Screen size_from_default":{"type":"method","name":"size_from_default","children":[],"call":[]}," TTY Screen windows?":{"type":"method","name":"windows?","children":[],"call":[]}}