{" Net NTLM Message Type3 create":{"type":"method","name":"create","children":[],"call":["t flag= ","arg [] ","t enable ","t session_key= "," session_key ","t workstation= ","t user= ","t domain= ","t ntlm_response= ","t lm_response= "," new ","NTLM  encode_utf16le ","Socket  gethostname "," new  flag= "," new  enable "," new  session_key= "," new  works new a new ion= "," new  user= "," new  domain= "," new  n new lm_response= "," new  lm_response= ","NTLM  encode_u new f16le ","Socke new   ge new hos new name "]}," Net NTLM Message Type3 parse":{"type":"method","name":"parse","children":[],"call":["t parse "," new "," new  parse "]}," Net NTLM Message Type2 response":{"type":"method","name":"response","children":[],"call":["Type3  create "," flag ","NTLM  ntlm_response ","NTLM  lm_response ","NTLM  ntlm2_session ","NTLM  ntlm_hash "," has_flag? ","NTLM  ntlmv2_response ","NTLM  lmv2_response ","NTLM  ntlmv2_hash ","opt [] "," [] serialize "," [] "," target_info "," target_name ","opt []= ","NTLM  encode_utf16le ","opt [] ! ","NTLM  decode_utf16le ","NTLM  pack_int64le ","cc is_a? "," rand "," raise ","pwd nil? ","usr nil? ","arg [] ","Socket  gethostname ","NTLM EncodeUtil  encode_utf16le ","NTLM EncodeUtil  decode_utf16le ","arg [] upcase ","NTLM  lm_hash ","NTLM  NTLM  ntlm_response ponse ","NTLM  NTLM  ntlmv2_response ponse ","NTLM  ntNTLM  lm_response ponse ","NTLM  ntNTLM  lmv2_response ponse ","NTLM  NTLM  lm_response ponse ","NTLM  NTLM  lmv2_response ponse ","NTLM  pack_int64le  is_a? "," rand  is_a? ","opt []  is_a? ","NTLM  encode_utf16le  nil? ","NTLM  decode_utf16le  nil? ","arg []  nil? ","NTLM EncodeUtil  encode_utf16le  nil? ","NTLM EncodeUtil  decode_utf16le  nil? ","NTLM EncodeU target_info l  encode_utf16le ","NTLM EncodeU target_info l  decode_utf16le "]}," Net NTLM Message Type2 parse":{"type":"method","name":"parse","children":[],"call":[" padding= ","\u0000 * ","(lvasgn :len\n  (send\n    (send nil :data_edge) :-\n    (send nil :head_size))) > "," data_edge - "," head_size "," data_edge "," enable "," has_flag? ","t parse "," new ","(lvasgn : data_edge - \n  (send\n    (send nil :data_edge) :-\n    (send nil :head_size))) > ","(lvasgn :len\n  (send\n    (send nil :da new a_edge) :-\n    (send nil :head_size))) > "," da new a_edge - "," da new a_edge "," new  parse "]}," Net NTLM Message Type1 parse":{"type":"method","name":"parse","children":[],"call":[" padding= ","\u0000 * ","(lvasgn :len\n  (send\n    (send nil :data_edge) :-\n    (send nil :head_size))) > "," data_edge - "," head_size "," data_edge "," enable "," has_flag? ","t parse "," new ","(lvasgn : data_edge - \n  (send\n    (send nil :data_edge) :-\n    (send nil :head_size))) > ","(lvasgn :len\n  (send\n    (send nil :da new a_edge) :-\n    (send nil :head_size))) > "," da new a_edge - "," da new a_edge "," new  parse "]}," Net NTLM Message data_edge":{"type":"method","name":"data_edge","children":[],"call":["(send\n  (send nil :security_buffers) :map) min "," size ","f offset ","f active "," security_buffers map "," security_buffers "]}," Net NTLM Message deflag":{"type":"method","name":"deflag","children":[],"call":["a [] data_size ","a [] ","a [] offset= "," security_buffers inject "," head_size "," security_buffers "]}," Net NTLM Message security_buffers":{"type":"method","name":"security_buffers","children":[],"call":["f instance_of? ","@alist find_all "]}," Net NTLM Message size":{"type":"method","name":"size","children":[],"call":[" head_size + "," data_size "," head_size "]}," Net NTLM Message data_size":{"type":"method","name":"data_size","children":[],"call":["a [] data_size ","a [] "," security_buffers inject "," security_buffers "]}," Net NTLM Message decode64":{"type":"method","name":"decode64","children":[],"call":[" parse ","Base64  decode64 "]}," Net NTLM Message encode64":{"type":"method","name":"encode64","children":[],"call":["Base64  encode64 gsub ","Base64  encode64 "," serialize "]}," Net NTLM Message serialize":{"type":"method","name":"serialize","children":[],"call":[" + ","(send\n  (send nil :security_buffers) :map) join ","f value "," security_buffers map "," security_buffers "," deflag "]}," Net NTLM Message dump_flags":{"type":"method","name":"dump_flags","children":[],"call":[" print "," flag? ","FLAG_KEYS  each "," has_flag? "]}," Net NTLM Message set_flag":{"type":"method","name":"set_flag","children":[],"call":["FLAGS  [] "," [] value "," [] "]}," Net NTLM Message has_flag?":{"type":"method","name":"has_flag?","children":[],"call":["(send\n  (send\n    (send\n      (self) :[]\n      (sym :flag)) :value) :&\n  (send\n    (const nil :FLAGS) :[]\n    (lvar :flag))) == ","FLAGS  [] "," [] value & "," [] value "," [] "]}," Net NTLM Message parse":{"type":"method","name":"parse","children":[],"call":[" raise ","m type ","Type3  parse ","Type2  parse ","Type1  parse ","m parse ","Type0  new "," enable "," [] active ! "," [] active "," [] "," class names find "," class names "," class "," serialize size < ","str size "," serialize size "," serialize "," has_disabled_fields? ","Type3  new parse ","Type3  new ","Type2  new parse ","Type2  new ","Type1  new parse ","Type1  new ","m Type3  parse ype ","m Type2  parse ype ","m Type1  parse ype ","m Type3  new parse ype ","m Type2  new parse ype ","m Type1  new parse ype ","Type0  new  type ","Type0  new  parse "," [] acType3  parse ive ! "," [] acType2  parse ive ! "," [] acType1  parse ive ! "," [] acType3  new parse ive ! "," [] acType2  new parse ive ! "," [] acType1  new parse ive ! "," [] acType3  parse ive "," [] acType2  parse ive "," [] acType1  parse ive "," [] acType3  new parse ive "," [] acType2  new parse ive "," [] acType1  new parse ive "," class naType0  new es find "," class naType0  new es ","sType3  parse r size ","sType2  parse r size ","sType1  parse r size ","sType3  new parse r size ","sType2  new parse r size ","sType1  new parse r size "]}," Net NTLM SecurityBuffer data_size":{"type":"method","name":"data_size","children":[],"call":["@value size "]}," Net NTLM SecurityBuffer value=":{"type":"method","name":"value=","children":[],"call":[" length= "," allocated= ","val size "]}," Net NTLM SecurityBuffer value":{"type":"method","name":"value","children":[],"call":[]}," Net NTLM SecurityBuffer serialize":{"type":"method","name":"serialize","children":[],"call":[]}," Net NTLM SecurityBuffer parse":{"type":"method","name":"parse","children":[],"call":["str [] "," length "," offset ","str size >= ","offset + ","str size "]}," Net NTLM SecurityBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","opts [] nil? "]}," Net NTLM FieldSet disable":{"type":"method","name":"disable","children":[],"call":[" [] active= "," [] "]}," Net NTLM FieldSet enable":{"type":"method","name":"enable","children":[],"call":[" [] active= "," [] "]}," Net NTLM FieldSet []=":{"type":"method","name":"[]=","children":[],"call":["a []= "," raise ","@alist assoc ","name to_s intern ","name to_s ","@alist assoc  []= "," r@alist assoc ise ","@@alist assoc list @alist assoc ssoc ","n@alist assoc me to_s intern ","n@alist assoc me to_s "]}," Net NTLM FieldSet []":{"type":"method","name":"[]","children":[],"call":["a [] "," raise ","@alist assoc ","name to_s intern ","name to_s ","@alist assoc  [] "," r@alist assoc ise ","@@alist assoc list @alist assoc ssoc ","n@alist assoc me to_s intern ","n@alist assoc me to_s "]}," Net NTLM FieldSet size":{"type":"method","name":"size","children":[],"call":["a [] size ","a [] ","@alist inject "]}," Net NTLM FieldSet parse":{"type":"method","name":"parse","children":[],"call":["a [] parse ","a [] ","@alist inject "]}," Net NTLM FieldSet serialize":{"type":"method","name":"serialize","children":[],"call":["(send\n  (ivar :@alist) :map) join ","f serialize ","@alist map "]}," Net NTLM FieldSet initialize":{"type":"method","name":"initialize","children":[],"call":["t new "," class prototypes map "," class prototypes "," class "]}," Net NTLM FieldSet define_accessor":{"type":"method","name":"define_accessor","children":[],"call":[" module_eval ","418 + ","420 + ","454 + ","478 + ","75 + "]}," Net NTLM FieldSet add_field":{"type":"method","name":"add_field","children":[],"call":[" define_accessor ","(or-asgn\n  (ivasgn :@proto)\n  (array)) push "]}," Net NTLM FieldSet opts":{"type":"method","name":"opts","children":[],"call":["@proto map ","@proto nil? "]}," Net NTLM FieldSet types":{"type":"method","name":"types","children":[],"call":["@proto map ","@proto nil? "]}," Net NTLM FieldSet names":{"type":"method","name":"names","children":[],"call":["@proto map ","@proto nil? "]}," Net NTLM FieldSet prototypes":{"type":"method","name":"prototypes","children":[],"call":[]}," Net NTLM FieldSet security_buffer":{"type":"method","name":"security_buffer","children":[],"call":[" add_field "]}," Net NTLM FieldSet int64LE":{"type":"method","name":"int64LE","children":[],"call":[" add_field "]}," Net NTLM FieldSet int32LE":{"type":"method","name":"int32LE","children":[],"call":[" add_field "]}," Net NTLM FieldSet int16LE":{"type":"method","name":"int16LE","children":[],"call":[" add_field "]}," Net NTLM FieldSet string":{"type":"method","name":"string","children":[],"call":[" add_field "]}," Net NTLM FieldSet define":{"type":"method","name":"define","children":[{"type":"method","name":"inherited","children":[],"asgn":[],"call":[]}],"call":["c module_eval ","subclass instance_eval ","Class  new ","Class  new  module_eval ","subClass  new lass instanClass  new e_eval "]}," Net NTLM Int64LE serialize":{"type":"method","name":"serialize","children":[],"call":["(send\n  (ivar :@value) :&\n  (int 4294967295)) pack ","@value >> ","@value & "]}," Net NTLM Int64LE parse":{"type":"method","name":"parse","children":[],"call":["u * + ","u * ","str slice unpack ","str slice ","str size >= ","offset + ","str size "]}," Net NTLM Int64LE initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM Int32LE serialize":{"type":"method","name":"serialize","children":[],"call":["(ivar :@value) pack "]}," Net NTLM Int32LE parse":{"type":"method","name":"parse","children":[],"call":["str slice unpack [] ","str slice unpack ","str slice ","str size >= ","offset + ","str size "]}," Net NTLM Int32LE initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM Int16LE serialize":{"type":"method","name":"serialize","children":[],"call":["(ivar :@value) pack "]}," Net NTLM Int16LE parse":{"type":"method","name":"parse","children":[],"call":["str [] unpack [] ","str [] unpack ","str [] ","str size >= ","offset + ","str size "]}," Net NTLM Int16LE initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM String value=":{"type":"method","name":"value=","children":[],"call":["@size > ","@value size ","@value nil? ","@value size  > "]}," Net NTLM String serialize":{"type":"method","name":"serialize","children":[],"call":["@value to_s "]}," Net NTLM String parse":{"type":"method","name":"parse","children":[],"call":["str [] ","str size >= ","offset + ","str size "]}," Net NTLM String initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Net NTLM Field size":{"type":"method","name":"size","children":[],"call":[]}," Net NTLM Field initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","opts [] nil? "]}," Net NTLM ntlm2_session":{"type":"method","name":"ntlm2_session","children":[],"call":["cc ljust "," apply_des join "," apply_des ","OpenSSL Digest MD5  digest slice ","OpenSSL Digest MD5  digest ","chal + "," gen_keys ","passwd_hash ljust ","NTLM  pack_int64le ","cc is_a? "," rand ","opt [] "," raise ","arg [] ","chal is_a? ","NTLM  pack_int64le  ljust "," rand  ljust ","opt []  ljust ","arg []  + ","NTLM  pack_int64le  + "," gen_ gen_keys  ","arg []  ljust ","NTLM  pack_int64le  is_a? "," rand  is_a? ","opt []  is_a? ","arg []  is_a? "]}," Net NTLM lmv2_response":{"type":"method","name":"lmv2_response","children":[],"call":["OpenSSL HMAC  digest + ","OpenSSL HMAC  digest ","chal + ","OpenSSL Digest MD5  new ","NTLM  pack_int64le ","cc is_a? "," rand ","opt [] ","chal is_a? ","arg [] ","NTLM  pack_int64le  + ","arg []  + ","NTLM  pack_int64le  is_a? "," rand  is_a? ","opt []  is_a? ","arg []  is_a? "]}," Net NTLM ntlmv2_response":{"type":"method","name":"ntlmv2_response","children":[],"call":["OpenSSL HMAC  digest + ","OpenSSL HMAC  digest ","chal + ","OpenSSL Digest MD5  new ","blob serialize ","blob target_info= ","blob challenge= ","blob timestamp= ","Blob  new ","10000000 * ","ts + ","Time  now to_i ","Time  now ","opt [] ","NTLM  pack_int64le ","cc is_a? "," rand ","NTL  pack_int64le ","chal is_a? "," raise ","arg [] ","NTL  pack_int64le  + ","arg []  + ","NTLM  pack_int64le  + ","Blob  new  serialize ","Blob  new  target_info= ","Blob  new  challenge= ","blob NTL  pack_int64le lenge= ","blob arg [] lenge= ","blob NTLM  pack_int64le lenge= ","Blob  new  timestamp= ","blob arg [] mestamp= ","10000000 *  + ","Time  now to_i  + ","opt []  + ","NTLM  pack_int64le  is_a? "," rand  is_a? ","opt []  is_a? ","NTL  pack_int64le  is_a? ","arg []  is_a? "]}," Net NTLM ntlm_response":{"type":"method","name":"ntlm_response","children":[],"call":[" apply_des join "," apply_des "," gen_keys ","hash ljust ","NTL  pack_int64le ","chal is_a? ","arg [] ","NTLM  pack_int64le "," gen_ gen_keys  ","arg []  ljust ","NTL  pack_int64le  is_a? ","arg []  is_a? ","NTLM  pack_int64le  is_a? "]}," Net NTLM lm_response":{"type":"method","name":"lm_response","children":[],"call":[" apply_des join "," apply_des "," gen_keys ","hash ljust ","NTL  pack_int64le ","chal is_a? "," raise ","arg [] ","NTLM  pack_int64le "," gen_ gen_keys  ","arg []  ljust ","NTL  pack_int64le  is_a? ","arg []  is_a? ","NTLM  pack_int64le  is_a? "]}," Net NTLM ntlmv2_hash":{"type":"method","name":"ntlmv2_hash","children":[],"call":["OpenSSL HMAC  digest ","OpenSSL Digest MD5  new "," encode_utf16le ","opt [] ","(send\n  (lvar :user) :+\n  (lvar :target)) upcase ","user + "," ntlm_hash ","EncodeUtil  encode_utf16le ","user upcase + ","user upcase ","(send\n  (send\n    (lvar :decoded_password) :upcase) :[]\n  (int 33)\n  (int 65)) pack ","decoded_password upcase [] ","decoded_password upcase ","EncodeUtil  decode_utf16le "," is_ntlm_hash? ","(send\n  (send\n    (lvar :EncodeUtil  decode_utf16le ) :upcase) :[]\n  (int 33)\n  (int 65)) pack ","EncodeUtil  decode_utf16le  upcase [] ","EncodeUtil  decode_utf16le  upcase "]}," Net NTLM ntlm_hash":{"type":"method","name":"ntlm_hash","children":[],"call":["OpenSSL Digest MD4  digest "," encode_utf16le ","opt [] ","password dup ","EncodeUtil  encode_utf16le "]}," Net NTLM lm_hash":{"type":"method","name":"lm_hash","children":[],"call":[" apply_des join "," apply_des "," gen_keys ","password upcase ljust ","password upcase "," gen_ gen_keys  "]}," Net NTLM apply_des":{"type":"method","name":"apply_des","children":[],"call":["dec encrypt update ","dec encrypt ","dec key= ","keys map ","OpenSSL Cipher DES  new ","dec encrypt update + ","dec final ","dec padding= ","OpenSSL Cipher Cipher  new ","OpenSSL Cipher  new ","dec update + ","dec update ","OpenSSL Cipher  new encrypt ","OpenSSL Cipher DES  new  encrypt update ","OpenSSL Cipher Cipher  new  encrypt update ","OpenSSL Cipher  new  encrypt update ","OpenSSL Cipher  new encrypt  encrypt update ","OpenSSL Cipher DES  new  encrypt ","OpenSSL Cipher Cipher  new  encrypt ","OpenSSL Cipher  new  encrypt ","OpenSSL Cipher  new encrypt  encrypt ","OpenSSL Cipher DES  new  key= ","OpenSSL Cipher Cipher  new  key= ","OpenSSL Cipher  new  key= ","OpenSSL Cipher  new encrypt  key= ","OpenSSL Cipher DES  new  encrypt update + ","OpenSSL Cipher Cipher  new  encrypt update + ","OpenSSL Cipher  new  encrypt update + ","OpenSSL Cipher  new encrypt  encrypt update + ","OpenSSL Cipher DES  new  final ","OpenSSL Cipher Cipher  new  final ","OpenSSL Cipher  new  final ","OpenSSL Cipher  new encrypt  final ","OpenSSL Cipher DES  new  padding= ","OpenSSL Cipher Cipher  new  padding= ","OpenSSL Cipher  new  padding= ","OpenSSL Cipher  new encrypt  padding= ","OpenSSL Cipher DES  new  update + ","OpenSSL Cipher Cipher  new  update + ","OpenSSL Cipher  new  update + ","OpenSSL Cipher  new encrypt  update + ","OpenSSL Cipher DES  new  update ","OpenSSL Cipher Cipher  new  update ","OpenSSL Cipher  new  update ","OpenSSL Cipher  new encrypt  update "]}," Net NTLM gen_keys":{"type":"method","name":"gen_keys","children":[],"call":["(lvar :bits) pack ","tkn + ","(send\n  (send\n    (send\n      (lvar :tkn) :gsub\n      (str \"1\")\n      (str \"\")) :size) :%\n  (int 2)) to_s ","tkn gsub size % ","tkn gsub size ","tkn gsub "," split7 inject "," split7 ","str7 unpack [] ","str7 unpack "," split7 map "]}," Net NTLM split7":{"type":"method","name":"split7","children":[],"call":["(or-asgn\n  (lvasgn :ret)\n  (array)) push ","s slice! ","s empty? ","str dup ","(or-astr dup gn\n  (lvastr dup gn :ret)\n  (array)) pustr dup h ","str dup  str dup lice! ","str dup  empty? ","str dup tr dup "]}," Net NTLM swap16":{"type":"method","name":"swap16","children":[],"call":["str unpack pack ","str unpack "]}," Net NTLM pack_int64le":{"type":"method","name":"pack_int64le","children":[],"call":["(send\n  (lvar :val) :&\n  (int 4294967295)) pack ","val >> ","val & "]}," Net NTLM encode_utf16le":{"type":"method","name":"encode_utf16le","children":[],"call":[" swap16 ","Kconv  kconv ","str force_encoding encode force_encoding ","str force_encoding encode ","str force_encoding ","(const\n  (const\n    (cbase) :Encoding) :ASCII_8BIT) include? ","str encoding ","str force_encoding  force_encoding encode force_encoding ","str force_encoding  force_encoding encode ","str force_encoding  force_encoding ","str force_encoding  encoding "]}," Net NTLM decode_utf16le":{"type":"method","name":"decode_utf16le","children":[],"call":["Kconv  kconv "," swap16 ","str encode force_encoding ","str encode "]}," Net NTLM EncodeUtil encode_utf16le":{"type":"method","name":"encode_utf16le","children":[],"call":[]}," Net NTLM EncodeUtil decode_utf16le":{"type":"method","name":"decode_utf16le","children":[],"call":[]}," Net NTLM EncodeUtil swap16":{"type":"method","name":"swap16","children":[],"call":[]}," Net NTLM Field parse":{"type":"method","name":"parse","children":[],"call":[" raise "]}," Net NTLM Field serialize":{"type":"method","name":"serialize","children":[],"call":[" raise "]}," Net NTLM Message Type3 ntlmv2_password?":{"type":"method","name":"ntlmv2_password?","children":[],"call":["empty_hash == "," ntlm_response ","NTLM  ntlmv2_response ","(send\n  (send\n    (lvar :blob) :timestamp) :/\n  (int 10000000)) - ","blob timestamp / ","blob timestamp ","blob challenge ","blob target_info ","NTLM  ntlmv2_hash "," domain "," user ","blob parse "," ntlm_response [] ","Blob  new ","NTLM  ntlmv2_response  == ","(send\n  (send\n    (lvar :Blob  new ) :timestamp) :/\n  (int 10000000)) - ","Blob  new  timestamp / ","Blob  new  timestamp ","Blob  new  challenge ","Blob  new  target_info ","Blob  new  parse "]}," Net NTLM Message Type3 ntlm2_session_password?":{"type":"method","name":"ntlm2_session_password?","children":[],"call":["hash == ","NTLM  ntlm2_session "," lm_response [] "," lm_response ","NTLM  ntlm_hash "," ntlm_response "," ntlm_response  == ","NTLM  ntlm_ ntlm_response  "]}," Net NTLM Message Type3 ntlm_version":{"type":"method","name":"ntlm_version","children":[],"call":[" ntlm_response size > "," ntlm_response size "," ntlm_response "," ntlm_response size == "," lm_response [] == ","\u0000 * "," lm_response [] "," lm_response "," lm_response [] != "]}," Net NTLM Message Type3 password?":{"type":"method","name":"password?","children":[],"call":[" raise "," ntlmv2_password? "," ntlm2_session_password? "," ntlm_version "]}," Net NTLM Message Type3 blank_password?":{"type":"method","name":"blank_password?","children":[],"call":[" password? "]}," Net NTLM FieldSet has_disabled_fields?":{"type":"method","name":"has_disabled_fields?","children":[],"call":["field active ! ","field active ","@alist any? "]}," Net NTLM Client type1_message":{"type":"method","name":"type1_message","children":[],"call":["type1 workstation= "," workstation ","type1 domain= "," domain ","type1 [] value= "," flags ","type1 [] ","Message Type1  new ","Message Type1  new  workstation= ","Message Type1  new  domain= ","Message Type1  new  [] value= ","Message Type1  new  [] "]}," Net NTLM Client session":{"type":"method","name":"session","children":[],"call":[]}," Net NTLM Client init_context":{"type":"method","name":"init_context","children":[],"call":["@session authenticate! ","Client Session  new ","Net NTLM Message  decode64 "," type1_message ","resp nil? ","Client Session  new  authenticate! "]}," Net NTLM Client initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Net NTLM Session blob":{"type":"method","name":"blob","children":[],"call":["b serialize ","b target_info= "," challenge_message target_info "," challenge_message ","b challenge= "," client_challenge ","b timestamp= "," timestamp ","Blob  new "," target_info ","Blob  new  serialize ","Blob  new  target_info= ","Blob  new  challenge= ","Blob  new  timestamp= ","BloBlob  new   new "]}," Net NTLM Session nt_proof_str":{"type":"method","name":"nt_proof_str","children":[],"call":["OpenSSL HMAC  digest "," server_challenge + "," blob "," server_challenge "," ntlmv2_hash ","OpenSSL Digest MD5  new "]}," Net NTLM Session ntlmv2_resp":{"type":"method","name":"ntlmv2_resp","children":[],"call":[" nt_proof_str + "," blob "," nt_proof_str "]}," Net NTLM Session lmv2_resp":{"type":"method","name":"lmv2_resp","children":[],"call":["OpenSSL HMAC  digest + "," client_challenge ","OpenSSL HMAC  digest "," server_challenge + "," server_challenge "," ntlmv2_hash ","OpenSSL Digest MD5  new "]}," Net NTLM Session calculate_user_session_key!":{"type":"method","name":"calculate_user_session_key!","children":[],"call":["OpenSSL HMAC  digest "," nt_proof_str "," ntlmv2_hash ","OpenSSL Digest MD5  new "]}," Net NTLM Session ntlmv2_hash":{"type":"method","name":"ntlmv2_hash","children":[],"call":["NTLM  ntlmv2_hash "," use_oem_strings? ! "," use_oem_strings? "," client_challenge "," domain "," password "," username "]}," Net NTLM Session oem_or_unicode_str":{"type":"method","name":"oem_or_unicode_str","children":[],"call":["NTLM EncodeUtil  encode_utf16le ","NTLM EncodeUtil  decode_utf16le "," use_oem_strings? "]}," Net NTLM Session domain":{"type":"method","name":"domain","children":[],"call":[" oem_or_unicode_str "," client domain "," client "]}," Net NTLM Session workstation":{"type":"method","name":"workstation","children":[],"call":[" oem_or_unicode_str "," client workstation "," client "," client domain "]}," Net NTLM Session password":{"type":"method","name":"password","children":[],"call":[" oem_or_unicode_str "," client password "," client "]}," Net NTLM Session username":{"type":"method","name":"username","children":[],"call":[" oem_or_unicode_str "," client username "," client "]}," Net NTLM Session negotiate_key_exchange?":{"type":"method","name":"negotiate_key_exchange?","children":[],"call":[" challenge_message has_flag? "," challenge_message "]}," Net NTLM Session use_oem_strings?":{"type":"method","name":"use_oem_strings?","children":[],"call":[" challenge_message has_flag? "," challenge_message "]}," Net NTLM Session timestamp":{"type":"method","name":"timestamp","children":[],"call":["10000000 * ","Time  now to_i + ","Time  now to_i ","Time  now "]}," Net NTLM Session server_challenge":{"type":"method","name":"server_challenge","children":[],"call":[" challenge_message [] serialize "," challenge_message [] "," challenge_message "]}," Net NTLM Session client_challenge":{"type":"method","name":"client_challenge","children":[],"call":["NTLM  pack_int64le "," rand "]}," Net NTLM Session server_cipher":{"type":"method","name":"server_cipher","children":[],"call":["rc4 key= "," server_seal_key ","rc4 decrypt ","OpenSSL Cipher Cipher  new ","OpenSSL Cipher  new ","OpenSSL Cipher Cipher  new  key= ","OpenSSL Cipher  new  key= ","OpenSSL Cipher Cipher  new  decrypt ","OpenSSL Cipher  new  decrypt "]}," Net NTLM Session client_cipher":{"type":"method","name":"client_cipher","children":[],"call":["rc4 key= "," client_seal_key ","rc4 encrypt ","OpenSSL Cipher Cipher  new ","OpenSSL Cipher  new ","OpenSSL Cipher Cipher  new  key= ","OpenSSL Cipher  new  key= ","OpenSSL Cipher Cipher  new  encrypt ","OpenSSL Cipher  new  encrypt "]}," Net NTLM Session server_seal_key":{"type":"method","name":"server_seal_key","children":[],"call":["OpenSSL Digest MD5  digest "," master_key "," exported_session_key "]}," Net NTLM Session client_seal_key":{"type":"method","name":"client_seal_key","children":[],"call":["OpenSSL Digest MD5  digest "," master_key "," exported_session_key "]}," Net NTLM Session server_sign_key":{"type":"method","name":"server_sign_key","children":[],"call":["OpenSSL Digest MD5  digest "," master_key "," exported_session_key "]}," Net NTLM Session client_sign_key":{"type":"method","name":"client_sign_key","children":[],"call":["OpenSSL Digest MD5  digest "," master_key "," exported_session_key "]}," Net NTLM Session raw_sequence":{"type":"method","name":"raw_sequence","children":[],"call":[]}," Net NTLM Session sequence":{"type":"method","name":"sequence","children":[],"call":["(send nil :raw_sequence) pack "," raw_sequence "]}," Net NTLM Session master_key":{"type":"method","name":"master_key","children":[],"call":[" user_session_key ","OpenSSL Cipher  new random_key ","OpenSSL Cipher  new "," negotiate_key_exchange? "]}," Net NTLM Session user_session_key":{"type":"method","name":"user_session_key","children":[],"call":[]}," Net NTLM Session unseal_message":{"type":"method","name":"unseal_message","children":[],"call":["message + "," server_cipher final "," server_cipher "," server_cipher update "," server_cipher update  + "]}," Net NTLM Session seal_message":{"type":"method","name":"seal_message","children":[],"call":["emessage + "," client_cipher final "," client_cipher "," client_cipher update "," client_cipher update  + "]}," Net NTLM Session verify_signature":{"type":"method","name":"verify_signature","children":[],"call":["(begin\n  (const nil :VERSION_MAGIC)) == ","sig << "," server_cipher final "," server_cipher "," server_cipher update "," negotiate_key_exchange? ","OpenSSL HMAC  digest [] ","OpenSSL HMAC  digest "," server_sign_key ","OpenSSL Digest MD5  new ","signature [] "," server_cipher update  << ","OpenSSL HMAC  digest []  << "," server_ server_cipher update n_key "," server_OpenSSL HMAC  digest [] n_key "," server_cipher update nature [] ","OpenSSL HMAC  digest [] nature [] "]}," Net NTLM Session sign_message":{"type":"method","name":"sign_message","children":[],"call":["sig << "," client_cipher final "," client_cipher "," client_cipher update "," negotiate_key_exchange? ","OpenSSL HMAC  digest [] ","OpenSSL HMAC  digest "," client_sign_key ","OpenSSL Digest MD5  new "," sequence "," client_cipher update  << ","OpenSSL HMAC  digest []  << "," client_ client_cipher update n_key "," client_OpenSSL HMAC  digest [] n_key ","  sequence uence "]}," Net NTLM Session authenticate!":{"type":"method","name":"authenticate!","children":[],"call":["t3 session_key= ","sk << ","rc4 final ","rc4 update "," master_key ","rc4 key= "," user_session_key ","rc4 encrypt ","OpenSSL Cipher Cipher  new ","t3 enable "," negotiate_key_exchange? ","Message Type3  create "," challenge_message flag & "," client flags "," client "," challenge_message flag "," challenge_message "," workstation "," username "," domain "," ntlmv2_resp "," lmv2_resp "," calculate_user_session_key! "," exported_session_key ","OpenSSL Cipher  new ","Message Type3  create  session_key= ","rc4 update  << ","OpenSSL Cipher Cipher  new  final ","OpenSSL Cipher  new  final ","OpenSSL Cipher Cipher  new  update ","OpenSSL Cipher  new  update ","OpenSSL Cipher Cipher  new  key= ","OpenSSL Cipher  new  key= ","OpenSSL Cipher Cipher  new  encrypt ","OpenSSL Cipher  new  encrypt ","Message Type3  create  enable "]}," Net NTLM Session initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM Blob parse":{"type":"method","name":"parse","children":[],"call":[" [] value= ","str [] "," [] "," enable ","str size > ","str size "]}," Net NTLM Client session_key":{"type":"method","name":"session_key","children":[],"call":["@session exported_session_key "]}," Net NTLM Session exported_session_key":{"type":"method","name":"exported_session_key","children":[],"call":[" user_session_key ","OpenSSL Cipher  new random_key ","OpenSSL Cipher  new "," negotiate_key_exchange? "]}," Net NTLM is_ntlm_hash?":{"type":"method","name":"is_ntlm_hash?","children":[],"call":["DATA_REGEXP  match ","EncodeUtil  decode_utf16le ","data dup "]}," Net NTLM TargetInfo to_hex":{"type":"method","name":"to_hex","children":[],"call":["(send\n  (send\n    (lvar :str) :bytes) :map) join ","0x + ","b to_s rjust upcase ","b to_s rjust ","b to_s ","str bytes map ","str bytes ","str nil? "]}," Net NTLM TargetInfo read_pairs":{"type":"method","name":"read_pairs","children":[],"call":["4 + ","result []= ","av_pair_sequence [] ","offset + + - ","offset + + ","offset + ","length > ","av_pair_sequence [] unpack [] to_i ","av_pair_sequence [] unpack [] ","av_pair_sequence [] unpack "," raise ","Net NTLM InvalidTargetDataError  new "," to_hex ","VALID_PAIR_ID  include? ","offset >= ","av_pair_sequence length ","av_pair_sequence nil? ","av_pair_sequence [] unpack [] to_i  > ","Net NTLM Invalav_pair_sequence [] TargetDataError  new ","av_pair_sequence av_pair_sequence [] unpack [] to_i  "]}," Net NTLM TargetInfo to_s":{"type":"method","name":"to_s","children":[],"call":["result force_encoding ","result << ","(int 0) pack ","(send\n  (lvar :v) :length) pack ","v length "," av_pairs each "," av_pairs "]}," Net NTLM TargetInfo initialize":{"type":"method","name":"initialize","children":[],"call":[" read_pairs "]}," Net NTLM InvalidTargetDataError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM Session target_info":{"type":"method","name":"target_info","children":[],"call":[" challenge_message target_info "," challenge_message ","t to_s ","t av_pairs []= "," channel_binding channel_binding_token "," channel_binding ","t av_pairs ","Net NTLM TargetInfo  new "," challenge_message Net NTLM TargetInfo  new argeNet NTLM TargetInfo  new _info ","Net NTLM TargetInfo  new  Net NTLM TargetInfo  new o_s ","Net NTLM TargetInfo  new  av_pairs []= "," channel_binding channel_binding_Net NTLM TargetInfo  new oken ","Net NTLM TargetInfo  new  av_pairs ","NeNet NTLM TargetInfo  new  NTLM TargeNet NTLM TargetInfo  new Info  new "]}," Net NTLM ChannelBinding application_data":{"type":"method","name":"application_data","children":[],"call":["data << "," channel_hash digest "," channel_hash "," unique_prefix "," unique_prefix  << "]}," Net NTLM ChannelBinding channel_hash":{"type":"method","name":"channel_hash","children":[],"call":["OpenSSL Digest SHA256  new "," channel to_der "," channel "]}," Net NTLM ChannelBinding gss_channel_bindings_struct":{"type":"method","name":"gss_channel_bindings_struct","children":[],"call":["token << "," application_data ","(send\n  (send nil :application_data) :length) pack "," application_data length ","(send nil :acceptor_address_length) pack "," acceptor_address_length ","(send nil :acceptor_addrtype) pack "," acceptor_addrtype ","(send nil :initiator_address_length) pack "," initiator_address_length ","(send nil :initiator_addtype) pack "," initiator_addtype ","(send nil :initiator_addtype) pack  << "]}," Net NTLM ChannelBinding channel_binding_token":{"type":"method","name":"channel_binding_token","children":[],"call":["OpenSSL Digest MD5  new digest ","OpenSSL Digest MD5  new "," gss_channel_bindings_struct "]}," Net NTLM ChannelBinding initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net NTLM ChannelBinding create":{"type":"method","name":"create","children":[],"call":[]}}