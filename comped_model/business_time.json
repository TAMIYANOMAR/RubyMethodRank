{" Time weekday?":{"type":"method","name":"weekday?","children":[],"call":["(int 1) include? "," wday ","day wday ","BusinessTime Config  weekdays include? ","BusinessTime Config  weekdays "]}," Time workday?":{"type":"method","name":"workday?","children":[],"call":["BusinessTime Config  holidays include? ! ","BusinessTime Config  holidays include? "," to_date ","BusinessTime Config  holidays "," weekday? ","day to_date ","Time  weekday? "]}," Time beginning_of_workday":{"type":"method","name":"beginning_of_workday","children":[],"call":["Time  parse "," strftime ","BusinessTime Config  beginning_of_workday ","day strftime ","Time  zone parse ","Time  zone "," change_time ","beginning_of_workday sec ","beginning_of_workday min ","beginning_of_workday hour "," change_business_time ","BusinessTime Config  Time  parse  ","Time  parse  sec ","Time  parse  min ","Time  parse  hour "]}," Time end_of_workday":{"type":"method","name":"end_of_workday","children":[],"call":["Time  parse "," strftime ","BusinessTime Config  end_of_workday ","day strftime ","Time  zone parse ","Time  zone "," change_time ","end_of_workday sec ","end_of_workday min ","end_of_workday hour "," change_business_time ","BusinessTime Config  Time  parse  ","Time  parse  sec ","Time  parse  min ","Time  parse  hour "]}," Fixnum business_days":{"type":"method","name":"business_days","children":[],"call":["BusinessDays  new ","BusinessTime BusinessDays  new "]}," Fixnum business_hours":{"type":"method","name":"business_hours","children":[],"call":["BusinessHours  new ","BusinessTime BusinessHours  new "]}," Date weekday?":{"type":"method","name":"weekday?","children":[],"call":["(int 1) include? "," wday ","BusinessTime Config  weekdays include? ","BusinessTime Config  weekdays "]}," Date workday?":{"type":"method","name":"workday?","children":[],"call":["BusinessTime Config  holidays include? ! ","BusinessTime Config  holidays include? ","BusinessTime Config  holidays "," weekday? "]}," BusinessTime BusinessHours off_hours":{"type":"method","name":"off_hours","children":[],"call":["Time  parse - ","1 day ","Time  parse ","BusinessTime Config  end_of_workday ","BusinessTime Config  beginning_of_workday ","gap_end - ","Time  zone parse - ","Time  zone parse ","Time  zone ","Time  parse  - ","Time  zone parse  - "]}," BusinessTime BusinessHours before":{"type":"method","name":"before","children":[],"call":["time - ","1 day ","time workday? ! ","time workday? "," off_hours ","time < ","time beginning_of_workday ","1 hour ","@hours times "," calculate_after ","@hours -@ "," calculate_before "," non_negative_hours? ","time roll_forward ","before_time - ","Time  workday? ! ","Time  workday? ","before_time < ","Time  beginning_of_workday ","Time  roll_forward ","time_roll_backward - ","1 second ","time_roll_backward to_s =~ ","time_roll_backward to_s ","Time  roll_backward ","Time  beginning_of_workday - ","before_time <= ","before_time sec == ","before_time sec ","before_time min == ","before_time min ","before_time hour == ","before_time hour ","before_time workday? ! ","before_time workday? ","time_roll_backward iso8601 =~ ","time_roll_backward iso8601 "," positive_hours? ","time -  - ","time roll_forward  - ","time -  workday? ! ","time roll_forward  workday? ! ","time -  workday? ","time roll_forward  workday? ","time -  < ","time roll_forward  < ","time -  beginning_of_workday ","time roll_forward  beginning_of_workday ","@hours time - s ","@hours time roll_forward s ","time -  roll_forward ","time roll_forward  roll_forward ","before_time -  - ","before_time roll_forward  - ","Time  roll_forward  - ","time_roll_backward -  - ","Time  roll_backward  - ","before_time -  < ","before_time roll_forward  < ","Time  roll_forward  < ","time_roll_backward -  < ","Time  roll_backward  < ","time - _roll_backward - ","time roll_forward _roll_backward - ","time - _roll_backward to_s =~ ","time roll_forward _roll_backward to_s =~ ","Time  roll_backward  to_s =~ ","time - _roll_backward to_s ","time roll_forward _roll_backward to_s ","Time  roll_backward  to_s ","before_time -  <= ","before_time roll_forward  <= ","Time  roll_forward  <= ","time_roll_backward -  <= ","Time  roll_backward  <= ","before_time -  sec == ","before_time roll_forward  sec == ","Time  roll_forward  sec == ","time_roll_backward -  sec == ","Time  roll_backward  sec == ","before_time -  sec ","before_time roll_forward  sec ","Time  roll_forward  sec ","time_roll_backward -  sec ","Time  roll_backward  sec ","before_time -  min == ","before_time roll_forward  min == ","Time  roll_forward  min == ","time_roll_backward -  min == ","Time  roll_backward  min == ","before_time -  min ","before_time roll_forward  min ","Time  roll_forward  min ","time_roll_backward -  min ","Time  roll_backward  min ","before_time -  hour == ","before_time roll_forward  hour == ","Time  roll_forward  hour == ","time_roll_backward -  hour == ","Time  roll_backward  hour == ","before_time -  hour ","before_time roll_forward  hour ","Time  roll_forward  hour ","time_roll_backward -  hour ","Time  roll_backward  hour ","before_time -  workday? ! ","before_time roll_forward  workday? ! ","Time  roll_forward  workday? ! ","time_roll_backward -  workday? ! ","Time  roll_backward  workday? ! ","before_time -  workday? ","before_time roll_forward  workday? ","Time  roll_forward  workday? ","time_roll_backward -  workday? ","Time  roll_backward  workday? ","time - _roll_backward iso8601 =~ ","time roll_forward _roll_backward iso8601 =~ ","Time  roll_backward  iso8601 =~ ","time - _roll_backward iso8601 ","time roll_forward _roll_backward iso8601 ","Time  roll_backward  iso8601 "]}," BusinessTime BusinessHours after":{"type":"method","name":"after","children":[],"call":["time + ","1 day ","time workday? ! ","time workday? "," off_hours ","time > ","time end_of_workday ","1 hour ","@hours times "," calculate_before ","@hours -@ "," calculate_after "," non_negative_hours? ","time roll_forward ","after_time + ","Time  workday? ! ","Time  workday? ","after_time > ","Time  end_of_workday ","Time  roll_forward ","Time  roll_forward + ","after_time - ","after_time >= ","1 second ","after_time sec == ","after_time sec ","after_time min == ","after_time min ","after_time hour == ","after_time hour ","after_time workday? ! ","after_time workday? "," positive_hours? ","time +  + ","time roll_forward  + ","time +  workday? ! ","time roll_forward  workday? ! ","time +  workday? ","time roll_forward  workday? ","time +  > ","time roll_forward  > ","time +  end_of_workday ","time roll_forward  end_of_workday ","@hours time + s ","@hours time roll_forward s ","time +  roll_forward ","time roll_forward  roll_forward ","after_time +  + ","after_time roll_forward  + ","Time  roll_forward  + ","Time  roll_forward +  + ","after_time -  + ","after_time +  > ","after_time roll_forward  > ","Time  roll_forward  > ","Time  roll_forward +  > ","after_time -  > ","after_time +  - ","after_time roll_forward  - ","Time  roll_forward  - ","Time  roll_forward +  - ","after_time -  - ","after_time +  >= ","after_time roll_forward  >= ","Time  roll_forward  >= ","Time  roll_forward +  >= ","after_time -  >= ","after_time +  sec == ","after_time roll_forward  sec == ","Time  roll_forward  sec == ","Time  roll_forward +  sec == ","after_time -  sec == ","after_time +  sec ","after_time roll_forward  sec ","Time  roll_forward  sec ","Time  roll_forward +  sec ","after_time -  sec ","after_time +  min == ","after_time roll_forward  min == ","Time  roll_forward  min == ","Time  roll_forward +  min == ","after_time -  min == ","after_time +  min ","after_time roll_forward  min ","Time  roll_forward  min ","Time  roll_forward +  min ","after_time -  min ","after_time +  hour == ","after_time roll_forward  hour == ","Time  roll_forward  hour == ","Time  roll_forward +  hour == ","after_time -  hour == ","after_time +  hour ","after_time roll_forward  hour ","Time  roll_forward  hour ","Time  roll_forward +  hour ","after_time -  hour ","after_time +  workday? ! ","after_time roll_forward  workday? ! ","Time  roll_forward  workday? ! ","Time  roll_forward +  workday? ! ","after_time -  workday? ! ","after_time +  workday? ","after_time roll_forward  workday? ","Time  roll_forward  workday? ","Time  roll_forward +  workday? ","after_time -  workday? "]}," BusinessTime BusinessHours from_now":{"type":"method","name":"from_now","children":[],"call":[" after ","Time  now ","Time  zone now ","Time  zone "]}," BusinessTime BusinessHours ago":{"type":"method","name":"ago","children":[],"call":[" before ","Time  now ","Time  zone now ","Time  zone "]}," BusinessTime BusinessHours initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BusinessTime BusinessDays before":{"type":"method","name":"before","children":[],"call":["time - ","1 day ","time workday? ","@days times "," calculate_after ","@days -@ "," calculate_before "," non_negative_days? ","Time  workday? ","Time  parse ","time to_s ","Time  zone parse ","Time  zone ","Time  workday? ! ","days > ","time rfc822 ","time workday? ! ","Time  beginning_of_workday ","Time  roll_backward ","time during_business_hours? ","time is_a? "," positive_days? ","time -  - ","Time  parse  - ","Time  zone parse  - ","Time  beginning_of_workday  - ","time -  workday? ","Time  parse  workday? ","Time  zone parse  workday? ","Time  beginning_of_workday  workday? ","@days time - s ","@days Time  parse s ","@days Time  zone parse s ","@days Time  beginning_of_workday s ","time -  to_s ","Time  parse  to_s ","Time  zone parse  to_s ","Time  beginning_of_workday  to_s ","time -  rfc822 ","Time  parse  rfc822 ","Time  zone parse  rfc822 ","Time  beginning_of_workday  rfc822 ","time -  workday? ! ","Time  parse  workday? ! ","Time  zone parse  workday? ! ","Time  beginning_of_workday  workday? ! ","time -  during_business_hours? ","Time  parse  during_business_hours? ","Time  zone parse  during_business_hours? ","Time  beginning_of_workday  during_business_hours? ","time -  is_a? ","Time  parse  is_a? ","Time  zone parse  is_a? ","Time  beginning_of_workday  is_a? "]}," BusinessTime BusinessDays after":{"type":"method","name":"after","children":[],"call":["time + ","1 day ","time workday? ","@days times "," calculate_before ","@days -@ "," calculate_after "," non_negative_days? ","Time  workday? ","Time  parse ","time to_s ","Time  zone parse ","Time  zone ","Time  workday? ! ","days > ","time strftime ","time workday? ! ","Time  roll_forward ","time during_business_hours? ","time is_a? "," positive_days? ","time +  + ","Time  parse  + ","Time  zone parse  + ","Time  roll_forward  + ","time +  workday? ","Time  parse  workday? ","Time  zone parse  workday? ","Time  roll_forward  workday? ","@days time + s ","@days Time  parse s ","@days Time  zone parse s ","@days Time  roll_forward s ","time +  to_s ","Time  parse  to_s ","Time  zone parse  to_s ","Time  roll_forward  to_s ","time +  strftime +  ","Time  parse  strfTime  parse  ","Time  zone parse  strfTime  zone parse  ","Time  roll_forward  strfTime  roll_forward  ","time +  workday? ! ","Time  parse  workday? ! ","Time  zone parse  workday? ! ","Time  roll_forward  workday? ! ","time +  during_business_hours? ","Time  parse  during_business_hours? ","Time  zone parse  during_business_hours? ","Time  roll_forward  during_business_hours? ","time +  is_a? ","Time  parse  is_a? ","Time  zone parse  is_a? ","Time  roll_forward  is_a? "]}," BusinessTime BusinessDays from_now":{"type":"method","name":"from_now","children":[],"call":[" after ","Time  now "]}," BusinessTime BusinessDays ago":{"type":"method","name":"ago","children":[],"call":[" before ","Time  now "]}," BusinessTime BusinessDays initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BusinessTime Generators ConfigGenerator generate":{"type":"method","name":"generate","children":[],"call":[" template ","File  join "]}," BusinessTime Generators ConfigGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," BusinessTime Generators ConfigGenerator gem_root":{"type":"method","name":"gem_root","children":[],"call":[]}," BusinessTime TimeExtensions consecutive_days":{"type":"method","name":"consecutive_days","children":[],"call":["(send\n  (lvar :days) :<<\n  (self)) sort ","days << ","1 day "," - "," + "]}," BusinessTime TimeExtensions consecutive_non_working_days":{"type":"method","name":"consecutive_non_working_days","children":[],"call":["date workday? ! ","date workday? "," consecutive_days "," workday? ! "," workday? "]}," BusinessTime TimeExtensions consecutive_workdays":{"type":"method","name":"consecutive_workdays","children":[],"call":["date workday? "," consecutive_days "," workday? "]}," BusinessTime TimeExtensions during_business_hours?":{"type":"method","name":"during_business_hours?","children":[],"call":[" to_i between? ","Time  end_of_workday to_i ","Time  end_of_workday ","Time  beginning_of_workday to_i ","Time  beginning_of_workday "," to_i "," workday? "]}," BusinessTime TimeExtensions business_time_until":{"type":"method","name":"business_time_until","children":[],"call":["(send\n  (send\n    (lvar :time_a) :to_date) :==\n  (send\n    (lvar :time_b) :to_date)) * ","first_day + + ","first_day + ","time_b - ","Time  beginning_of_workday ","Time  work_hours_total ","(irange\n  (begin\n    (send\n      (send\n        (lvar :time_a) :to_date) :+\n      (int 1)))\n  (begin\n    (send\n      (send\n        (lvar :time_b) :to_date) :-\n      (int 1)))) sum ","time_b to_date - ","time_b to_date ","time_a to_date + ","time_a to_date ","end_of_workday - ","end_of_workday to_s =~ ","end_of_workday to_s ","Time  end_of_workday ","time_a to_date == ","Time  roll_forward "," < ","(send\n  (send\n    (lvar :time_a) :to_date) :==\n  (send\n    (lvar :Time  roll_forward ) :to_date)) * ","(send\n  (send\n    (lvar :Time  roll_forward ) :to_date) :==\n  (send\n    (lvar :time_b) :to_date)) * ","end_of_workday -  + + ","end_of_workday -  + ","Time  roll_forward  - ","(irange\n  (begin\n    (send\n      (send\n        (lvar :time_a) :to_date) :+\n      (int 1)))\n  (begin\n    (send\n      (send\n        (lvar :Time  roll_forward ) :to_date) :-\n      (int 1)))) sum ","(irange\n  (begin\n    (send\n      (send\n        (lvar :Time  roll_forward ) :to_date) :+\n      (int 1)))\n  (begin\n    (send\n      (send\n        (lvar :time_b) :to_date) :-\n      (int 1)))) sum ","Time  roll_forward  to_date - ","Time  roll_forward  to_date ","Time  roll_forward  to_date + ","Time  end_of_workday  - ","Time  end_of_workday  to_s =~ ","Time  end_of_workday  to_s ","Time  Time  end_of_workday  ","Time  roll_forward  to_date == "]}," BusinessTime TimeExtensions ClassMethods change_business_time":{"type":"method","name":"change_business_time","children":[],"call":["time change ","time in_time_zone change ","time in_time_zone ","Time  zone "]}," BusinessTime TimeExtensions ClassMethods work_hours_total":{"type":"method","name":"work_hours_total","children":[],"call":["BusinessTime Config  end_of_workday - ","BusinessTime Config  beginning_of_workday ","BusinessTime Config  end_of_workday ","BusinessTime Config  work_hours_total [] ","BusinessTime Config  work_hours_total ","hours_last - ","hours first ","(send\n  (send\n    (const nil :ParsedTime) :new\n    (int 23)\n    (int 59)) :-\n  (send\n    (lvar :hours) :first)) + ","1 minute ","ParsedTime  new - ","ParsedTime  new ","hours_last == ","hours last ","BusinessTime Config  work_hours [] ","BusinessTime Config  work_hours ","day strftime downcase to_sym ","day strftime downcase ","day strftime ","day workday? ","Time  parse - ","Time  parse ","(send\n  (send\n    (const nil :Time) :parse\n    (str \"23:59\")) :-\n  (send\n    (const nil :Time) :parse\n    (send\n      (lvar :hours) :first))) + ","Time  workday? ","BusinessTime Config  end_of_workday strftime downcase to_sym  - ","BusinessTime Config  beginning_of_workday strftime downcase to_sym  ","BusinessTime Config  end_of_workday strftime downcase to_sym  ","BusinessTime Config  work_BusinessTime Config  work_hours [] _total [] ","BusinessTime Config  work_BusinessTime Config  work_hours [] _total ","hours last  - ","BusinessTime Config  work_hours [] _last - ","BusinessTime Config  work_hours []  first ","(send\n  (send\n    (const nil :ParsedTime) :new\n    (int 23)\n    (int 59)) :-\n  (send\n    (lvar :BusinessTime Config  work_hours [] ) :first)) + ","hours last  == ","BusinessTime Config  work_hours [] _last == ","BusinessTime Config  work_hours []  last ","BusinessTime Config  work_BusinessTime Config  work_hours []  [] ","BusinessTime Config  work_BusinessTime Config  work_hours []  ","day strftime downcase to_sym  strftime downcase to_sym ","day strftime downcase to_sym  strftime downcase ","day strftime downcase to_sym  strftime ","day strftime downcase to_sym  workday strftime downcase to_sym ? ","(send\n  (send\n    (const nil :Time) :parse\n    (str \"23:59\")) :-\n  (send\n    (const nil :Time) :parse\n    (send\n      (lvar :BusinessTime Config  work_hours [] ) :first))) + ","Time  workday strftime downcase to_sym ? "]}," BusinessTime TimeExtensions ClassMethods previous_business_day":{"type":"method","name":"previous_business_day","children":[],"call":["time - ","1 day ","time workday? ! ","time workday? ","time -  - ","time -  workday? ! ","time -  workday? "]}," BusinessTime TimeExtensions ClassMethods roll_backward":{"type":"method","name":"roll_backward","children":[],"call":["Time  end_of_workday ","prev_business_time - ","1 day ","prev_business_time workday? ! ","prev_business_time workday? ","time clone ","Time  after_business_hours? ","time - ","time workday? ! ","time workday? ","Time  before_business_hours? ","Time  workday? ! ","Time  workday? ","Time  end_of_workday  - ","Time  end_of_workday  workday? ! ","Time  end_of_workday  workday? "]}," BusinessTime TimeExtensions ClassMethods first_business_day":{"type":"method","name":"first_business_day","children":[],"call":["time + ","1 day ","time workday? ! ","time workday? ","time +  + ","time +  workday? ! ","time +  workday? "]}," BusinessTime TimeExtensions ClassMethods roll_forward":{"type":"method","name":"roll_forward","children":[],"call":["Time  beginning_of_workday ","next_business_time + ","1 day ","next_business_time workday? ! ","next_business_time workday? ","time clone ","time + ","Time  end_of_workday == ","Time  end_of_workday ","Time  after_business_hours? ","time workday? ! ","time workday? ","Time  before_business_hours? ","Time  workday? ! ","Time  workday? ","Time  beginning_of_workday  + ","time clone  + ","Time  beginning_of_workday  workday? ! ","time clone  workday? ! ","Time  beginning_of_workday  workday? ","time clone  workday? "]}," BusinessTime TimeExtensions ClassMethods after_business_hours?":{"type":"method","name":"after_business_hours?","children":[],"call":["time to_i > "," end_of_workday to_i "," end_of_workday ","time to_i "]}," BusinessTime TimeExtensions ClassMethods before_business_hours?":{"type":"method","name":"before_business_hours?","children":[],"call":["time to_i < "," beginning_of_workday to_i "," beginning_of_workday ","time to_i "]}," BusinessTime TimeExtensions ClassMethods weekday?":{"type":"method","name":"weekday?","children":[],"call":["day weekday? ","ActiveSupport Deprecation  warn ","BusinessTime Config  weekdays include? ","day wday ","BusinessTime Config  weekdays "]}," BusinessTime TimeExtensions ClassMethods workday?":{"type":"method","name":"workday?","children":[],"call":["day workday? ","ActiveSupport Deprecation  warn ","BusinessTime Config  holidays include? ! ","BusinessTime Config  holidays include? ","day to_date ","BusinessTime Config  holidays ","Time  weekday? "]}," BusinessTime TimeExtensions ClassMethods beginning_of_workday":{"type":"method","name":"beginning_of_workday","children":[],"call":[" change_business_time ","beginning_of_workday sec ","beginning_of_workday min ","beginning_of_workday hour ","BusinessTime Config  beginning_of_workday ","Time  parse ","BusinessTime Config  beginning_of_workday  sec ","Time  parse  sec ","BusinessTime Config  beginning_of_workday  min ","Time  parse  min ","BusinessTime Config  beginning_of_workday  hour ","Time  parse  hour ","BusinessTime Config  BusinessTime Config  beginning_of_workday  ","BusinessTime Config  Time  parse  "]}," BusinessTime TimeExtensions ClassMethods end_of_workday":{"type":"method","name":"end_of_workday","children":[],"call":[" change_business_time ","end_of_workday sec ","end_of_workday min ","end_of_workday hour ","BusinessTime Config  end_of_workday ","Time  parse ","BusinessTime Config  end_of_workday  sec ","Time  parse  sec ","BusinessTime Config  end_of_workday  min ","Time  parse  min ","BusinessTime Config  end_of_workday  hour ","Time  parse  hour ","BusinessTime Config  BusinessTime Config  end_of_workday  ","BusinessTime Config  Time  parse  "]}," BusinessTime TimeExtensions weekday?":{"type":"method","name":"weekday?","children":[],"call":["BusinessTime Config  weekdays include? "," wday ","BusinessTime Config  weekdays "]}," BusinessTime TimeExtensions workday?":{"type":"method","name":"workday?","children":[],"call":["BusinessTime Config  holidays include? ! ","BusinessTime Config  holidays include? "," to_date ","BusinessTime Config  holidays "," weekday? "," to_array_of_dates include? ! "," to_array_of_dates include? "," to_array_of_dates ","options [] "]}," BusinessTime ParsedTime <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :hour) <=> ","other sec ","other min ","other hour "," sec "," min "," hour "]}," BusinessTime ParsedTime -":{"type":"method","name":"-","children":[],"call":["(send\n  (send nil :hour) :-\n  (send\n    (lvar :other) :hour)) * + + - ","other sec ","(send\n  (send nil :hour) :-\n  (send\n    (lvar :other) :hour)) * + + "," sec ","(send\n  (send nil :hour) :-\n  (send\n    (lvar :other) :hour)) * + ","(send\n  (send nil :min) :-\n  (send\n    (lvar :other) :min)) * "," min - ","other min "," min ","(send\n  (send nil :hour) :-\n  (send\n    (lvar :other) :hour)) * "," hour - ","other hour "," hour "]}," BusinessTime ParsedTime to_s":{"type":"method","name":"to_s","children":[],"call":[" sec "," min "," hour "]}," BusinessTime ParsedTime parse":{"type":"method","name":"parse","children":[],"call":[]}," BusinessTime ParsedTime initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Integer business_days":{"type":"method","name":"business_days","children":[],"call":["BusinessTime BusinessDays  new "]}," Integer business_hours":{"type":"method","name":"business_hours","children":[],"call":["BusinessTime BusinessHours  new "]}," Date fiscal_year_yday":{"type":"method","name":"fiscal_year_yday","children":[],"call":["shifted_year_day <= "," yday - "," yday "," Time  days_in_month "," year ","1 upto "," fiscal_month_offset - "," fiscal_month_offset "," yday -  <= "]}," Date fiscal_year":{"type":"method","name":"fiscal_year","children":[],"call":[" year "," year + "," month >= "," fiscal_month_offset "," month "]}," Date fiscal_year_quarter":{"type":"method","name":"fiscal_year_quarter","children":[],"call":["(send\n  (begin\n    (send\n      (send nil :fiscal_year_month) :-\n      (int 1))) :/\n  (int 3)) + ","(send\n  (send nil :fiscal_year_month) :-\n  (int 1)) / "," fiscal_year_month - "," fiscal_year_month "]}," Date fiscal_year_month":{"type":"method","name":"fiscal_year_month","children":[],"call":["shifted_month <= "," month - "," fiscal_month_offset - "," fiscal_month_offset "," month "," month -  <= "]}," Date fiscal_year_week":{"type":"method","name":"fiscal_year_week","children":[],"call":["fyw == ","(send\n  (begin\n    (send\n      (send nil :fiscal_year_yday) :-\n      (int 1))) :/\n  (int 7)) + ","(send\n  (send nil :fiscal_year_yday) :-\n  (int 1)) / "," fiscal_year_yday - "," fiscal_year_yday ","(send\n  (begin\n    (send\n      (send nil :fiscal_year_yday) :-\n      (int 1))) :/\n  (int 7)) +  == "]}," Date fiscal_month_offset":{"type":"method","name":"fiscal_month_offset","children":[],"call":["BusinessTime Config  fiscal_month_offset "]}," Date quarter":{"type":"method","name":"quarter","children":[],"call":["(send\n  (begin\n    (send\n      (send nil :month) :-\n      (int 1))) :/\n  (int 3)) + ","(send\n  (send nil :month) :-\n  (int 1)) / "," month - "," month "]}," Date week":{"type":"method","name":"week","children":[],"call":["cyw == ","(send\n  (begin\n    (send\n      (send nil :yday) :-\n      (int 1))) :/\n  (int 7)) + ","(send\n  (send nil :yday) :-\n  (int 1)) / "," yday - "," yday ","(send\n  (begin\n    (send\n      (send nil :yday) :-\n      (int 1))) :/\n  (int 7)) +  == "]}," Date business_dates_until":{"type":"method","name":"business_dates_until","children":[],"call":["(erange\n  (self)\n  (lvar :to_date)) select ","(irange\n  (self)\n  (lvar :to_date)) select ","this_date workday? ","day workday? "]}," Date business_days_until":{"type":"method","name":"business_days_until","children":[],"call":[" business_dates_until size "," business_dates_until ","(send\n  (begin\n    (erange\n      (self)\n      (lvar :to_date))) :select) size ","day workday? ","(erange\n  (self)\n  (lvar :to_date)) select "]}," BusinessTime Config deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["Marshal  load ","Marshal  dump "]}," BusinessTime Config reset":{"type":"method","name":"reset","children":[],"call":[" config= "," default_config "," local_config_stack clear "," local_config_stack "," _weekdays= "," work_hours= "," work_week= "," end_of_workday= "," beginning_of_workday= "," holidays= "," local_config= "]}," BusinessTime Config int_to_wday":{"type":"method","name":"int_to_wday","children":[],"call":[" Time RFC2822_DAY_NAME  map map [] "," Time RFC2822_DAY_NAME  map map "," Time RFC2822_DAY_NAME  map ","DAY_NAMES  map map [] ","DAY_NAMES  map map ","DAY_NAMES  map "]}," BusinessTime Config wday_to_int":{"type":"method","name":"wday_to_int","children":[],"call":["lowercase_day_names find_index ","day_name to_s downcase ","day_name to_s "," Time RFC2822_DAY_NAME  map ","DAY_NAMES  map "," Time RFC2822_DAY_NAME  map  find_index ","DAY_NAMES  map  find_index "]}," BusinessTime Config default_config":{"type":"method","name":"default_config","children":[],"call":[" deep_dup "]}," BusinessTime Config with":{"type":"method","name":"with","children":[],"call":[" local_config_stack pop "," local_config_stack "," send ","config each "," local_config_stack push "," config dup "," config "," config= "," local_config= "]}," BusinessTime Config load":{"type":"method","name":"load","children":[],"call":[" holidays << ","Date  parse "," holidays ","(or\n  (send\n    (lvar :config) :[]\n    (str \"holidays\"))\n  (array)) each ","config [] "," send "," respond_to? ","config_vars each ","data [] ","YAML  load ","File  open ","file respond_to? "," reset ","YAML  load  [] "]}," BusinessTime Config weekdays":{"type":"method","name":"weekdays","children":[],"call":[" _weekdays= ","SortedSet  new ","(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact "," wday_to_int ","(if\n  (send\n    (send\n      (send nil :work_hours) :empty?) :!)\n  (send\n    (send nil :work_hours) :keys)\n  (send nil :work_week)) map "," work_week "," work_hours keys "," work_hours "," work_hours empty? ! "," work_hours empty? "," _weekdays "," _weekdays nil? ","days sort to_set ","days sort ","days << ","day_num nil? ","(if\n  (send\n    (send\n      (send nil :work_hours) :empty?) :!)\n  (send\n    (send nil :work_hours) :keys)\n  (send nil :work_week)) each_with_object "," _week(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact = "," _week(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact  "," _week(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact  nil? ","(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact  sort to_set ","(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact  sort ","(send\n  (begin\n    (if\n      (send\n        (send\n          (send nil :work_hours) :empty?) :!)\n      (send\n        (send nil :work_hours) :keys)\n      (send nil :work_week))) :map) compact  << "," wday_to_int  nil? "]}," BusinessTime Config work_week=":{"type":"method","name":"work_week=","children":[],"call":[" _weekdays= "," config []= "," config "]}," BusinessTime Config beginning_of_workday":{"type":"method","name":"beginning_of_workday","children":[],"call":[" config [] "," config ","wday first "," work_hours [] "," int_to_wday ","day wday "," work_hours "," work_hours []  first "," int_to_ work_hours []  ","day  work_hours []  "]}," BusinessTime Config end_of_workday":{"type":"method","name":"end_of_workday","children":[],"call":[" config [] "," config ","wday last ","ParsedTime  new ","wday last == "," work_hours [] "," int_to_wday ","day wday "," work_hours ","wday last =~ "," work_hours []  last "," work_hours []  last == "," int_to_ work_hours []  ","day  work_hours []  "," work_hours []  last =~ "]}," BusinessTime Config threadsafe_cattr_setter":{"type":"method","name":"threadsafe_cattr_setter","children":[],"call":[" config []= "," config "," define_singleton_method "]}," BusinessTime Config threadsafe_cattr_reader":{"type":"method","name":"threadsafe_cattr_reader","children":[],"call":[" config [] "," config "," define_singleton_method "]}," BusinessTime Config threadsafe_cattr_accessor":{"type":"method","name":"threadsafe_cattr_accessor","children":[],"call":[" threadsafe_cattr_setter "," threadsafe_cattr_reader "," config []= "," config "," define_singleton_method "," config [] "]}," BusinessTime Config local_config?":{"type":"method","name":"local_config?","children":[],"call":[" local_config_stack empty? ! "," local_config_stack empty? "," local_config_stack "," local_config nil? ! "," local_config nil? "," local_config "]}," BusinessTime Config local_config_stack":{"type":"method","name":"local_config_stack","children":[],"call":["Thread  current [] ","Thread  current "]}," BusinessTime Config local_config=":{"type":"method","name":"local_config=","children":[],"call":[" local_config_stack last replace "," local_config_stack last "," local_config_stack ","Thread  current []= ","Thread  current "]}," BusinessTime Config local_config":{"type":"method","name":"local_config","children":[],"call":[" local_config_stack last "," local_config_stack ","Thread  current [] ","Thread  current "]}," BusinessTime Config config=":{"type":"method","name":"config=","children":[],"call":["Thread  main []= ","Thread  main "," local_config= "," local_config? ","Thread  current []= ","Thread  current "]}," BusinessTime Config config":{"type":"method","name":"config","children":[],"call":[" default_config ","Thread  main [] ","Thread  main "," local_config "," local_config? ","Thread  current [] ","Thread  current "]}," BusinessTime Config work_hours=":{"type":"method","name":"work_hours=","children":[],"call":["c []= ","ParsedTime  parse ","hours map ","work_hours each_with_object "," config []= "," config "]}," BusinessTime Config end_of_workday=":{"type":"method","name":"end_of_workday=","children":[],"call":[" config []= ","ParsedTime  parse "," config "]}," BusinessTime Config beginning_of_workday=":{"type":"method","name":"beginning_of_workday=","children":[],"call":[" config []= ","ParsedTime  parse "," config "]}," BusinessTime BusinessHours calculate_before":{"type":"method","name":"calculate_before","children":[],"call":["before_time - ","1 day ","before_time workday? ! ","before_time workday? ","time_roll_backward - ","1 second ","time_roll_backward iso8601 =~ ","time_roll_backward iso8601 ","Time  roll_backward ","Time  beginning_of_workday - ","Time  beginning_of_workday ","before_time <= ","before_time sec == ","before_time sec ","before_time min == ","before_time min ","before_time hour == ","before_time hour ","1 hour ","hours times ","before_time -  - ","time_roll_backward -  - ","Time  roll_backward  - ","before_time -  workday? ! ","time_roll_backward -  workday? ! ","Time  roll_backward  workday? ! ","before_time -  workday? ","time_roll_backward -  workday? ","Time  roll_backward  workday? ","Time  roll_backward  iso8601 =~ ","Time  roll_backward  iso8601 ","before_time -  <= ","time_roll_backward -  <= ","Time  roll_backward  <= ","before_time -  sec == ","time_roll_backward -  sec == ","Time  roll_backward  sec == ","before_time -  sec ","time_roll_backward -  sec ","Time  roll_backward  sec ","before_time -  min == ","time_roll_backward -  min == ","Time  roll_backward  min == ","before_time -  min ","time_roll_backward -  min ","Time  roll_backward  min ","before_time -  hour == ","time_roll_backward -  hour == ","Time  roll_backward  hour == ","before_time -  hour ","time_roll_backward -  hour ","Time  roll_backward  hour "]}," BusinessTime BusinessHours calculate_after":{"type":"method","name":"calculate_after","children":[],"call":["after_time + ","1 day ","after_time workday? ! ","after_time workday? ","Time  roll_forward + ","Time  roll_forward ","after_time - ","Time  end_of_workday ","after_time > ","after_time sec == ","after_time sec ","after_time min == ","after_time min ","after_time hour == ","after_time hour ","1 hour ","hours times ","after_time +  + ","Time  roll_forward +  + ","Time  roll_forward  + ","after_time +  workday? ! ","Time  roll_forward +  workday? ! ","Time  roll_forward  workday? ! ","after_time +  workday? ","Time  roll_forward +  workday? ","Time  roll_forward  workday? ","after_time +  - ","Time  roll_forward +  - ","Time  roll_forward  - ","after_time +  > ","Time  roll_forward +  > ","Time  roll_forward  > ","after_time +  sec == ","Time  roll_forward +  sec == ","Time  roll_forward  sec == ","after_time +  sec ","Time  roll_forward +  sec ","Time  roll_forward  sec ","after_time +  min == ","Time  roll_forward +  min == ","Time  roll_forward  min == ","after_time +  min ","Time  roll_forward +  min ","Time  roll_forward  min ","after_time +  hour == ","Time  roll_forward +  hour == ","Time  roll_forward  hour == ","after_time +  hour ","Time  roll_forward +  hour ","Time  roll_forward  hour "]}," BusinessTime BusinessHours non_negative_hours?":{"type":"method","name":"non_negative_hours?","children":[],"call":["@hours >= "]}," BusinessTime BusinessHours <=>":{"type":"method","name":"<=>","children":[],"call":[" hours <=> ","other hours "," hours "," raise ","ArgumentError  new ","other class to_s ","other class "," class to_s "," class ","other class != "]}," BusinessTime BusinessDays calculate_before":{"type":"method","name":"calculate_before","children":[],"call":["Time  beginning_of_workday ","Time  roll_backward ","time during_business_hours? ","time is_a? ","1 day ","time workday? ","time workday? ! ","days > ","Time  beginning_of_workday  during_business_hours? ","Time  beginning_of_workday  is_a? ","Time  beginning_of_workday  workday? ","Time  beginning_of_workday  workday? ! "]}," BusinessTime BusinessDays calculate_after":{"type":"method","name":"calculate_after","children":[],"call":["Time  roll_forward ","time during_business_hours? ","time is_a? ","1 day ","time workday? ","time workday? ! ","days > ","Time  beginning_of_workday ","Time  roll_forward  during_business_hours? ","Time  beginning_of_workday  during_business_hours? ","Time  roll_forward  is_a? ","Time  beginning_of_workday  is_a? ","Time  roll_forward  workday? ","Time  beginning_of_workday  workday? ","Time  roll_forward  workday? ! ","Time  beginning_of_workday  workday? ! "]}," BusinessTime BusinessDays non_negative_days?":{"type":"method","name":"non_negative_days?","children":[],"call":["@days >= "]}," BusinessTime BusinessDays <=>":{"type":"method","name":"<=>","children":[],"call":[" days <=> ","other days "," days "," raise ","ArgumentError  new ","other class "," class ","other class != "]}," BusinessTime TimeExtensions to_array_of_dates":{"type":"method","name":"to_array_of_dates","children":[],"call":["Array  wrap map ","Array  wrap "]}," Time after_business_hours?":{"type":"method","name":"after_business_hours?","children":[],"call":[" > "," end_of_workday ","time > ","time to_i > "," end_of_workday to_i ","time to_i "]}," Time before_business_hours?":{"type":"method","name":"before_business_hours?","children":[],"call":[" < "," beginning_of_workday ","time < ","time to_i < "," beginning_of_workday to_i ","time to_i "]}," Time roll_forward":{"type":"method","name":"roll_forward","children":[],"call":["next_business_time + ","1 day ","next_business_time workday? ! ","next_business_time workday? "," beginning_of_workday + "," beginning_of_workday "," after_business_hours? "," workday? ! "," workday? "," before_business_hours? ","Time  workday? ! ","Time  workday? ","time clone ","Time  beginning_of_workday + ","Time  beginning_of_workday ","Time  after_business_hours? ","Time  before_business_hours? ","time + ","Time  end_of_workday == ","Time  end_of_workday ","next_business_time +  + "," beginning_of_workday +  + "," beginning_of_workday  + ","time clone  + ","Time  beginning_of_workday +  + ","Time  beginning_of_workday  + ","next_business_time +  workday? ! "," beginning_of_workday +  workday? ! "," beginning_of_workday  workday? ! ","time clone  workday? ! ","Time  beginning_of_workday +  workday? ! ","Time  beginning_of_workday  workday? ! ","next_business_time +  workday? "," beginning_of_workday +  workday? "," beginning_of_workday  workday? ","time clone  workday? ","Time  beginning_of_workday +  workday? ","Time  beginning_of_workday  workday? "]}," Time outsize_business_hours?":{"type":"method","name":"outsize_business_hours?","children":[],"call":[" workday? ! "," workday? "," after_business_hours? "," before_business_hours? "]}," Time business_time_until":{"type":"method","name":"business_time_until","children":[],"call":["(send\n  (send\n    (send\n      (lvar :time_a) :to_date) :business_days_until\n    (send\n      (lvar :time_b) :to_date)) :-\n  (int 1)) * ","time_a to_date business_days_until - ","time_a to_date business_days_until ","time_b to_date ","time_a to_date ","Time  parse - ","Time  parse ","BusinessTime Config  beginning_of_workday ","BusinessTime Config  end_of_workday ","time_b - ","time_b strftime + ","time_b strftime ","time_a strftime + ","time_a strftime ","time_a to_date == ","Time  roll_forward "," < ","end_of_workday to_s =~ ","end_of_workday to_s ","end_of_workday - ","end_of_workday < ","time_c to_date == ","time_c to_date ","Time  end_of_workday ","time_c to_i < ","time_b to_i ","time_c to_i ","result * ","(send\n  (send\n    (send\n      (lvar :time_a) :to_date) :business_days_until\n    (send\n      (lvar :Time  roll_forward ) :to_date)) :-\n  (int 1)) * ","(send\n  (send\n    (send\n      (lvar :Time  roll_forward ) :to_date) :business_days_until\n    (send\n      (lvar :time_b) :to_date)) :-\n  (int 1)) * ","Time  roll_forward  to_date business_days_until - ","Time  roll_forward  to_date business_days_until ","Time  roll_forward  to_date ","BusinessTime Config  Time  end_of_workday  ","Time  roll_forward  - ","Time  roll_forward  strftime + ","Time  roll_forward  strftime ","Time  roll_forward  to_date == ","Time  end_of_workday  to_s =~ ","Time  end_of_workday  to_s ","Time  end_of_workday  - ","Time  end_of_workday  < ","Time  Time  end_of_workday  ","Time  roll_forward  to_i < ","Time  roll_forward  to_i ","Time  parse -  * ","time_b -  * "]}," Time change_time":{"type":"method","name":"change_time","children":[],"call":["time change ","time in_time_zone change ","time in_time_zone ","Time  zone "]}," Time roll_backward":{"type":"method","name":"roll_backward","children":[],"call":["1 day ","Time  workday? ! ","Time  workday? ","time clone ","Time  end_of_workday ","Time  after_business_hours? ","Time  end_of_workday - ","Time  before_business_hours? "]}," Time change_business_time":{"type":"method","name":"change_business_time","children":[],"call":["time change ","time in_time_zone change ","time in_time_zone ","Time  zone "]}," BusinessTime TimeExtensions included":{"type":"method","name":"included","children":[],"call":[]}," BusinessTime BusinessHours positive_hours?":{"type":"method","name":"positive_hours?","children":[],"call":["@hours > "]}," BusinessTime BusinessDays positive_days?":{"type":"method","name":"positive_days?","children":[],"call":["@days > "]}}