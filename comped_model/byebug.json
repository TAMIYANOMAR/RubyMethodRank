{" Kernel binding_n":{"type":"method","name":"binding_n","children":[],"call":["Byebug  current_context frame_binding ","n + ","Byebug  current_context ","Byebug  skip ","Byebug  context frame_binding ","Byebug  context "]}," Kernel byebug":{"type":"method","name":"byebug","children":[],"call":["Byebug  current_context stop_next= ","Byebug  current_context ","Byebug  current_context stop_frame= ","0 == ","Byebug  run_init_script ","StringIO  new ","Byebug  start ","Byebug  context step_into ","Byebug  context ","Byebug  context step_out ","steps_into >= ","Byebug  context stop_return ","steps_out >= ","Byebug  attach ","Byebug  mode == ","Byebug  mode "," require "," require_relative ","Byebug  current_context step_into ","Byebug  current_context stop_return ","Byebug  current_context stack_size > ","Byebug  current_context stack_size ","Byebug  current_context calced_stack_size > ","Byebug  current_context calced_stack_size ","Byebug  current_context step_out ","steps_out + "]}," Module debug_method":{"type":"method","name":"debug_method","children":[],"call":[" class_eval "," alias_method ","old_meth to_sym ","old_meth =~ "]}," Byebug run_script":{"type":"method","name":"run_script","children":[],"call":["processor process_commands ","ControlCommandProcessor  new ","ScriptInterface  new ","File  expand_path "," handler interface "," handler ","Context  interface= ","ScriptProcessor  new process_commands ","ScriptProcessor  new ","Context  interface ","ControlCommandProcessor  new  process_commands "," handler ScriptInterface  new  ","Context  ScriptInterface  new = ","Context  ScriptInterface  new  "]}," Byebug run_init_script":{"type":"method","name":"run_init_script","children":[],"call":[" run_script ","cwd_script_file != ","File  exists? ","File  expand_path ","File  join "," home_script_file ","cwd_script != ","ENV  [] to_s ","ENV  [] "," script_file "," run_rc_file ","File  exist? "," init_file "," rc_dirs each "," rc_dirs "," handler interface "," handler ","cwd_rc != ","Dir  pwd ","Dir  pwd == ","File  expand_path  != ","File  expand_path _file != "," File  expand_path  "," File  expand_path _file "," run_File  expand_path  "]}," Byebug start_client":{"type":"method","name":"start_client","children":[],"call":["socket close "," print ","socket puts "," throw ","interface confirm ","interface read_command ","socket gets "," catch "," puts ","TCPSocket  new ","Byebug LocalInterface  new "," require "," client start "," client ","LocalInterface  new ","Regexp  last_match [] ","Regexp  last_match "," handler interface confirm "," handler interface "," handler "," handler interface read_command "," handler interface= ","Context  interface confirm ","Context  interface ","Context  interface read_command ","Context  interface= ","interface readline ","TCPSocket  new  close ","TCPSocket  new  puts ","Byebug LocalInterface  new  confirm ","LocalInterface  new  confirm ","Byebug LocalInterface  new  read_command ","LocalInterface  new  read_command ","TCPSocket  new  gets "," handler Byebug LocalInterface  new  confirm "," handler LocalInterface  new  confirm "," handler Byebug LocalInterface  new  "," handler LocalInterface  new  "," handler Byebug LocalInterface  new  read_command "," handler LocalInterface  new  read_command "," handler Byebug LocalInterface  new = "," handler LocalInterface  new = ","Context  Byebug LocalInterface  new  confirm ","Context  LocalInterface  new  confirm ","Context  Byebug LocalInterface  new  ","Context  LocalInterface  new  ","Context  Byebug LocalInterface  new  read_command ","Context  LocalInterface  new  read_command ","Context  Byebug LocalInterface  new = ","Context  LocalInterface  new = ","interface readsocket gets  ","Byebug LocalInterface  new  readline ","LocalInterface  new  readline "]}," Byebug start_control":{"type":"method","name":"start_control","children":[],"call":["processor process_commands ","ControlCommandProcessor  new ","RemoteInterface  new ","server accept ","DebugThread  new ","server addr [] ","server addr ","TCPServer  new ","Thread  new "," control start "," control "," processor process_commands "," processor ","ControlCommandProcessor  new process_commands "," handler interface "," handler "," handler interface= ","Byebug  current_context ","Context  interface= ","ControlProcessor  new process_commands ","ControlProcessor  new ","ControlCommandProcessor  new  process_commands ","TCPServer  new  accept ","TCPServer  new  addr [] ","TCPServer  new  addr "," ControlCommandProcessor  new  process_commands "," ControlCommandProcessor  new  "," handler RemoteInterface  new  "," handler RemoteInterface  new = ","Context  RemoteInterface  new = "]}," Byebug start_remote":{"type":"method","name":"start_remote","children":[],"call":["proceed wait ","mutex synchronize "," wait_connection ","proceed signal "," interface= ","RemoteInterface  new ","server accept ","DebugThread  new ","server addr [] ","server addr ","TCPServer  new ","ConditionVariable  new ","Mutex  new "," block_given? "," start_control ","port + ","port kind_of? "," start ","ConditionVariable  new  wait ","Mutex  new  synchronize ","ConditionVariable  new  signal ","TCPServer  new  accept ","TCPServer  new  addr [] ","TCPServer  new  addr "]}," Byebug start":{"type":"method","name":"start","children":[],"call":[" post_mortem ","options [] ","Byebug  _start ","block call ","Byebug  started? ","Byebug  const_set ","Dir  pwd ","ARGV  clone ","Byebug DEFAULT_START_SETTINGS  merge ","Byebug  tracing= ","options [] nil? ","Byebug  start_sentinal= "," caller [] "," caller ","Byebug History  save "," at_exit ","Byebug DEFAULT_START_SETTINGS  merge  [] ","Byebug DEFAULT_START_SETTINGS  merge  [] nil? "]}," Byebug interface=":{"type":"method","name":"interface=","children":[],"call":[" handler interface= "," handler "]}," Byebug remove_breakpoint":{"type":"method","name":"remove_breakpoint","children":[],"call":["Breakpoint  remove "," breakpoints "," breakpoints delete_at ","b id == ","b id "," breakpoints reject! "]}," Byebug add_breakpoint":{"type":"method","name":"add_breakpoint","children":[],"call":[" breakpoints << "," breakpoints ","Breakpoint  new "," Breakpoint  new s << "," Breakpoint  new s "]}," Byebug line_at":{"type":"method","name":"line_at","children":[],"call":["line gsub chomp ","line gsub ","LineCache  getline ","Tracer Single  get_line ","File  exist? "," source_reload ","LineCache  getline  gsub chomp ","Tracer Single  get_line  gsub chomp ","LineCache  getline  gsub ","Tracer Single  get_line  gsub ","LineCache  getLineCache  getline  ","LineCache  getTracer Single  get_line  ","Tracer Single  get_LineCache  getline  ","Tracer Single  get_Tracer Single  get_line  "]}," Byebug source_reload":{"type":"method","name":"source_reload","children":[],"call":["LineCache  clear_file_cache ","Object  const_set ","Object  send ","Object  const_defined? "]}," Byebug interrupt_last":{"type":"method","name":"interrupt_last","children":[],"call":["context interrupt ","context thread alive? ","context thread "," last_context "," last_context  interrupt "," last_context  thread alive? "," last_context  thread "," last_ last_context  "]}," Byebug interrupt":{"type":"method","name":"interrupt","children":[],"call":[" current_context interrupt "," current_context "]}," Byebug ControlCommandProcessor State file":{"type":"method","name":"file","children":[],"call":[" throw "," errmsg "]}," Byebug ControlCommandProcessor State context":{"type":"method","name":"context","children":[],"call":[]}," Byebug ControlCommandProcessor State confirm":{"type":"method","name":"confirm","children":[],"call":[]}," Byebug ControlCommandProcessor State print":{"type":"method","name":"print","children":[],"call":["@interface print "]}," Byebug ControlCommandProcessor State errmsg":{"type":"method","name":"errmsg","children":[],"call":["@interface print "]}," Byebug ControlCommandProcessor State proceed":{"type":"method","name":"proceed","children":[],"call":[]}," Byebug ControlCommandProcessor State initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug ControlCommandProcessor prompt":{"type":"method","name":"prompt","children":[],"call":[" afmt + + + "," afmt "," afmt + + "," afmt + ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "]}," Byebug ControlCommandProcessor process_commands":{"type":"method","name":"process_commands","children":[],"call":["@interface close "," print ","(send\n  (send\n    (gvar :$!) :backtrace) :map) join ","$! backtrace map ","$! backtrace "," errmsg ","cmd execute ","c match ","commands find "," catch ","@interface read_command "," prompt "," aprint ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","cmd new ","control_cmds map ","State  new ","cmd allow_in_control ","Command  commands select ","Command  commands "," puts ","(send\n  (send\n    (gvar :$ERROR_INFO) :backtrace) :map) join ","$ERROR_INFO backtrace map ","$ERROR_INFO backtrace "," without_exceptions "," commands find "," commands ","ControlState  new "," interface "]}," Byebug ControlCommandProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug CommandProcessor State proceed":{"type":"method","name":"proceed","children":[],"call":[]}," Byebug CommandProcessor State proceed?":{"type":"method","name":"proceed?","children":[],"call":[]}," Byebug CommandProcessor State confirm":{"type":"method","name":"confirm","children":[],"call":["@interface confirm "]}," Byebug CommandProcessor State print":{"type":"method","name":"print","children":[],"call":["@interface print "]}," Byebug CommandProcessor State errmsg":{"type":"method","name":"errmsg","children":[],"call":["@interface errmsg "]}," Byebug CommandProcessor State initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug CommandProcessor display_annotations":{"type":"method","name":"display_annotations","children":[],"call":[" annotation "," display empty? "," display ","d [] "," display find "]}," Byebug CommandProcessor breakpoint_annotations":{"type":"method","name":"breakpoint_annotations","children":[],"call":["Byebug  breakpoints empty? ","Byebug  breakpoints "," annotation "]}," Byebug CommandProcessor annotation":{"type":"method","name":"annotation","children":[],"call":[" one_cmd "," print "," afmt "]}," Byebug CommandProcessor postloop":{"type":"method","name":"postloop","children":[],"call":["@interface history clear ","@interface history ","@interface history save ","Setting  [] "]}," Byebug CommandProcessor postcmd":{"type":"method","name":"postcmd","children":[],"call":[" aprint ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","cmd =~ ","@@Show_annotations_run find ","context dead? ! ","context dead? "," annotation ","context stack_size > ","context stack_size ","@@Show_annotations_postcmd find "," display_annotations "," breakpoint_annotations ","@@Show_breakpoints_postcmd find "," afmt "]}," Byebug CommandProcessor preloop":{"type":"method","name":"preloop","children":[],"call":[" annotation ","context dead? "," display_annotations "," breakpoint_annotations ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "," print "," aprint ","@byebug_context_was_dead ! ","@context_was_dead ! "," puts ","@interface history restore ","@interface history ","Setting  [] ","state location ","Setting  [] == ","Thread  current thread_variable_set ","Thread  current "," always_run "]}," Byebug CommandProcessor one_cmd":{"type":"method","name":"one_cmd","children":[],"call":[" errmsg ","unknown_cmd execute ","c class unknown ","c class ","commands find ","cmd execute "," print "," p ","cmd class need_context ","cmd class ","context dead? ","c match ","cmd class allow_in_post_mortem ! ","cmd class allow_in_post_mortem "," one_unknown_cmd "," match_cmd ","unknown_ match_cmd  execute "," match_cmd  execute "," match_cmd  class need_context "," match_cmd  class "," match_cmd  class allow_in_post_mortem ! "," match_cmd  class allow_in_post_mortem "," one_unknown_ match_cmd  "," match_ match_cmd  "]}," Byebug CommandProcessor process_commands":{"type":"method","name":"process_commands","children":[],"call":[" postloop "," postcmd "," one_cmd ","splitter [] each ","splitter [] ","input == "," catch ","@interface command_queue shift ","@interface command_queue ","@interface read_command "," prompt ","@interface command_queue empty? ","state proceed? ! ","state proceed? ","CommandProcessor  print_location_and_text "," preloop ","m << ","m last << << ","m last << ","m last ","m last []= ","m last [] == ","m last [] ","m empty? ","str split inject ","str split "," lambda ","Command  settings [] ","Command  settings "," always_run ","Command  settings [] ! ","Command  settings [] == ","file == "," split_commands each "," split_commands "," aprint ","state location "," after_repl "," repl "," before_repl "," print ","Thread  current thread_variable_set ","Thread  current ","Setting  [] == ","Setting  [] "," puts ","@interface autosave ","@interface autorestore "," state location "," state "," program_just_finished? ","@interface command_queue shift  == ","@interface read_command  == "]}," Byebug CommandProcessor always_run":{"type":"method","name":"always_run","children":[],"call":["cmd execute ","(send\n  (lvar :commands) :select) each ","cmd class always_run >= ","cmd class always_run ","cmd class ","commands select ","cmd new ","event_cmds map ","@interface state= ","@interface respond_to? ","s commands= ","s interface= "," interface ","s display= "," display ","s binding= ","context frame_binding ","s line= ","s file= ","s context= ","State  new ","cmd allow_in_post_mortem ","event_cmds find_all ","context dead? ","cmd event ","Command  commands select ","Command  commands ","Command  settings []= ","Command  settings ","file == ","(str \"(irb)\") include? ","cmds map ","cmds find_all ","Setting  []= ","cmd_class new ","cmd new execute "," state ","cmd always_run >= ","cmd always_run ","Command  commands each ","RegularState  new "," commands each "," commands ","cmd_class new  execute ","cmd_class new  class always_run >= ","cmd_class new  class always_run ","cmd_class new  class ","cmd_class new  new ","event_Command  commands  map ","event_cmd_class new s map ","@interface State  new = ","cmd_class new  allow_in_post_mortem ","event_Command  commands  find_all ","event_cmd_class new s find_all ","cmd_class new  event ","Command  commands  map ","cmd_class new s map ","Command  commands  find_all ","cmd_class new s find_all ","cmd_class new _class new ","cmd_class new  new execute "," State  new  ","cmd_class new  always_run >= ","cmd_class new  always_run "]}," Byebug CommandProcessor prompt":{"type":"method","name":"prompt","children":[],"call":[" afmt + + + "," afmt "," afmt + + "," afmt + ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","(rdb:%s)  % ","context thnum ","context dead? ","(byebug:%s)  % "]}," Byebug CommandProcessor at_return":{"type":"method","name":"at_return","children":[],"call":[" process_commands ","context stop_frame= "," puts "," safe_inspect "]}," Byebug CommandProcessor at_line":{"type":"method","name":"at_line","children":[],"call":[" process_commands ","Byebug  source_reload ","Command  settings [] ","Command  settings ","Setting  [] "]}," Byebug CommandProcessor at_tracing":{"type":"method","name":"at_tracing","children":[],"call":[" always_run "," print ","Byebug  line_at ","Command  settings [] ","Command  settings ","@last_line == ","file == ","CommandProcessor  canonic_file ","Byebug RDEBUG_FILE  == ","line == ","line != ","file != ","tracing_plus == ","Byebug BYEBUG_BIN  == ","Byebug BYEBUG_SCRIPT  == ","Command  settings [] == "," run_auto_cmds "," puts "," context full_location "," context ","Setting  [] "," get_line "," class canonic_file "," class "," normalize "," run_auto_commands ","CommandProcessor  canonic_file  == ","CommandProcessor  canonic_CommandProcessor  canonic_file  ","CommandProcessor  canonic_file  != ","Command  settings []  == "," class canonic_CommandProcessor  canonic_file  "]}," Byebug CommandProcessor at_catchpoint":{"type":"method","name":"at_catchpoint","children":[],"call":[" print "," caller [] ","fs -@ "," caller ","context stack_size ","excpt class "," afmt ","%s:%d % ","ENV  [] ","context frame_line ","CommandProcessor  canonic_file ","context frame_file "," aprint ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "," puts "," context location "," context "," print_backtrace "," class canonic_file "," class "," normalize ","context stack_size  -@ ","context frame_context frame_line  ","CommandProcessor  canonic_CommandProcessor  canonic_file  ","CommandProcessor  canonic_ class canonic_file  ","CommandProcessor  canonic_ normalize  ","context frame_CommandProcessor  canonic_file  ","context frame_ class canonic_file  ","context frame_ normalize  "," class canonic_CommandProcessor  canonic_file  "," class canonic_ class canonic_file  "," class canonic_ normalize  "]}," Byebug CommandProcessor at_breakpoint":{"type":"method","name":"at_breakpoint","children":[],"call":[" print "," afmt ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","breakpoint pos ","CommandProcessor  canonic_file ","breakpoint source ","Byebug  breakpoints index + ","Byebug  breakpoints index ","Byebug  breakpoints "," aprint "," puts "," frame line "," frame "," frame file "," class canonic_file "," class "," normalize "," priByebug  breakpoints index + t ","Byebug  aByebug  breakpoints index + Byebug  breakpoints index + otate to_i > ","Byebug  aByebug  breakpoints index + Byebug  breakpoints index + otate to_i ","Byebug  aByebug  breakpoints index + Byebug  breakpoints index + otate ","breakpoiByebug  breakpoints index + t pos ","CommandProcessor  canonic_CommandProcessor  canonic_file  ","CommandProcessor  canonic_ class canonic_file  ","CommandProcessor  canonic_ normalize  ","CommaByebug  breakpoints index + dProcessor  caByebug  breakpoints index + oByebug  breakpoints index + ic_file ","breakpoiByebug  breakpoints index + t source ","Byebug  breakpoiByebug  breakpoints index + ts iByebug  breakpoints index + dex + ","Byebug  breakpoiByebug  breakpoints index + ts iByebug  breakpoints index + dex ","Byebug  breakpoiByebug  breakpoints index + ts "," apriByebug  breakpoints index + t "," frame breakpoint pos  "," frame liByebug  breakpoints index + e "," frame CommandProcessor  canonic_file  "," frame  class canonic_file  "," frame  normalize  "," class canonic_CommandProcessor  canonic_file  "," class canonic_ class canonic_file  "," class canonic_ normalize  "," class caByebug  breakpoints index + oByebug  breakpoints index + ic_file "," Byebug  breakpoints index + ormalize "]}," Byebug CommandProcessor protect":{"type":"method","name":"protect","children":[],"call":[]}," Byebug CommandProcessor print_location_and_text":{"type":"method","name":"print_location_and_text","children":[],"call":[]}," Byebug CommandProcessor canonic_file":{"type":"method","name":"canonic_file","children":[],"call":[]}," Byebug CommandProcessor interface=":{"type":"method","name":"interface=","children":[],"call":["@interface close ","@mutex synchronize "]}," Byebug CommandProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Byebug Processor print":{"type":"method","name":"print","children":[],"call":["@interface print "]}," Byebug Processor errmsg":{"type":"method","name":"errmsg","children":[],"call":["@interface errmsg "]}," Byebug Processor aprint":{"type":"method","name":"aprint","children":[],"call":[" print "," afmt ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "]}," Byebug Processor afmt":{"type":"method","name":"afmt","children":[],"call":[]}," Byebug ScriptInterface close":{"type":"method","name":"close","children":[],"call":["@file close "," input close "," input "]}," Byebug ScriptInterface print":{"type":"method","name":"print","children":[],"call":["@out printf "]}," Byebug ScriptInterface confirm":{"type":"method","name":"confirm","children":[],"call":[]}," Byebug ScriptInterface readline_support?":{"type":"method","name":"readline_support?","children":[],"call":[]}," Byebug ScriptInterface read_command":{"type":"method","name":"read_command","children":[],"call":["result chomp! "," raise ","result strip empty? ","result strip ","result =~ "," puts ","@file gets "," readline ","result chomp ","@file gets  chomp! ","@file gets  strip empty? ","@file gets  strip ","@file gets  =~ ","@file gets  chomp "]}," Byebug ScriptInterface finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Byebug ScriptInterface initialize":{"type":"method","name":"initialize","children":[],"call":[" open ","file respond_to? ","StringIO  new ","File  open "]}," Byebug RemoteInterface send_command":{"type":"method","name":"send_command","children":[],"call":["result chomp "," raise ","@socket gets ","@socket puts "," fail ","@socket gets  chomp "]}," Byebug RemoteInterface print":{"type":"method","name":"print","children":[],"call":["@socket printf "," escape "," format "]}," Byebug RemoteInterface readline_support?":{"type":"method","name":"readline_support?","children":[],"call":[]}," Byebug RemoteInterface read_command":{"type":"method","name":"read_command","children":[],"call":[" send_command "]}," Byebug RemoteInterface finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Byebug RemoteInterface confirm":{"type":"method","name":"confirm","children":[],"call":[" send_command "]}," Byebug RemoteInterface close":{"type":"method","name":"close","children":[],"call":["@socket close "," output close "," output "," errmsg "]}," Byebug RemoteInterface initialize":{"type":"method","name":"initialize","children":[],"call":["History  new "]}," Byebug LocalInterface readline":{"type":"method","name":"readline","children":[],"call":["line chomp! "," exit ","STDIN  gets ","STDOUT  flush ","STDOUT  print ","Readline  readline "," print "," with_repl_like_sigint "," without_readline_completion "," puts "," save_history ","hist ! ","STDIN  gets  chomp! ","Readline  readline  chomp! ","ReadSTDIN  gets   readSTDIN  gets  ","ReadReadline  readline   readReadline  readline  "," without_readSTDIN  gets _completion "," without_readReadline  readline _completion "]}," Byebug LocalInterface readline_support?":{"type":"method","name":"readline_support?","children":[],"call":[]}," Byebug LocalInterface finalize":{"type":"method","name":"finalize","children":[],"call":["Byebug  save_history ","Byebug  respond_to? "," print ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","Byebug  method_defined? "]}," Byebug LocalInterface close":{"type":"method","name":"close","children":[],"call":["History  save "]}," Byebug LocalInterface print":{"type":"method","name":"print","children":[],"call":["STDOUT  printf "," format "," escape "]}," Byebug LocalInterface confirm":{"type":"method","name":"confirm","children":[],"call":[" readline "]}," Byebug LocalInterface read_command":{"type":"method","name":"read_command","children":[],"call":[" readline "]}," Byebug LocalInterface initialize":{"type":"method","name":"initialize","children":[],"call":["Readline HISTORY  << ","line chomp! ","file each "," open ","File  exist? ","File  join ","ENV  [] ","ENV  [] to_i ","History  load ","Readline  output= ","Readline  input= ","IO  console "]}," Byebug Interface aprint":{"type":"method","name":"aprint","children":[],"call":[" print "," afmt ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "]}," Byebug Interface afmt":{"type":"method","name":"afmt","children":[],"call":[]}," Byebug Interface errmsg":{"type":"method","name":"errmsg","children":[],"call":[" print "," aprint ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate "," error print "," error "]}," Byebug Interface initialize":{"type":"method","name":"initialize","children":[],"call":["History  new "]}," Byebug ParseFunctions syntax_valid?":{"type":"method","name":"syntax_valid?","children":[],"call":[" eval ","RubyVM InstructionSequence  compile "," without_stderr "]}," Byebug ParseFunctions show_onoff":{"type":"method","name":"show_onoff","children":[],"call":["(const nil :TrueClass) member? ! ","(const nil :TrueClass) member? ","bool class "]}," Byebug ParseFunctions get_onoff":{"type":"method","name":"get_onoff","children":[],"call":[" raise "," print ","Expecting 'on', 1, 'off', or 0. Got: %s.\n % ","arg to_s ","arg downcase ","default nil? ","arg == ","arg nil? "]}," Byebug ParseFunctions get_int":{"type":"method","name":"get_int","children":[],"call":[" print ","%s argument '%s' needs to be a number.\n % ","%s argument '%s' needs to at most %s.\n % ","int > ","%s argument '%s' needs to at least %s.\n % ","int < "," Integer ","str to_i ","str !~ "," pr "," pr Integer  "," prstr to_i  "," Integer  > ","str to_i  > "," Integer  < ","str to_i  < "]}," Byebug Context at_return":{"type":"method","name":"at_return","children":[],"call":[" handler at_return "," handler ","IGNORED_FILES  include? "," processor at_return "," processor "," ignored_file? "," file "," new_processor at_return "," new_processor "]}," Byebug Context at_line":{"type":"method","name":"at_line","children":[],"call":[" handler at_line "," handler ","File  identical? ","IGNORED_FILES  include? "," processor at_line "," processor "," ignored_file? "," file "," frame= "," new_processor at_line "," new_processor "]}," Byebug Context at_tracing":{"type":"method","name":"at_tracing","children":[],"call":[" handler at_tracing "," handler ","File  identical? ","IGNORED_FILES  include? "," processor at_tracing "," processor "," ignored_file? "," file "," new_processor at_tracing "," new_processor "]}," Byebug Context at_catchpoint":{"type":"method","name":"at_catchpoint","children":[],"call":[" handler at_catchpoint "," handler "," processor at_catchpoint "," processor "," new_processor at_catchpoint "," new_processor "]}," Byebug Context at_breakpoint":{"type":"method","name":"at_breakpoint","children":[],"call":[" handler at_breakpoint "," handler ","IGNORED_FILES  include? ","breakpoint source "," processor at_breakpoint "," processor "," new_processor at_breakpoint "," new_processor "]}," Byebug Context handler":{"type":"method","name":"handler","children":[],"call":[" raise ","Byebug  handler "," fail "]}," Byebug Context interrupt":{"type":"method","name":"interrupt","children":[],"call":[" stop_next= "," step_into "]}," Byebug Context frame_args_info":{"type":"method","name":"frame_args_info","children":[],"call":[" eval "," frame_binding "," frame_no "," frame_ frame_binding ing "]}," Byebug Context frame_class":{"type":"method","name":"frame_class","children":[],"call":[" frame_self class "," frame_self "]}," Byebug Context frame_locals":{"type":"method","name":"frame_locals","children":[],"call":["result []= "," eval ","local to_s ","locals each "," frame_binding ","bind eval "," eval  each "," frame_ frame_binding  "," frame_ frame_binding ing "," frame_binding  eval "]}," Byebug VarInheritCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarInheritCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarInheritCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","@match post_match "," print "," debug_eval "," puts ","@state context "," bb_eval "]}," Byebug VarInheritCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarLocalCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarLocalCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarLocalCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","locals [] ","locals keys sort each ","locals keys sort ","locals keys ","@state context frame_self ","@state frame_pos ","@state context ","@state context frame_locals "," var_local ","@state context frame_locals  [] ","@state context frame_locals  keys sort each ","@state context frame_locals  keys sort ","@state context frame_locals  keys ","@state context frame@state context frame_self  ","@state context frame_@state context frame_locals  "]}," Byebug VarLocalCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarInstanceCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarInstanceCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarInstanceCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_list "," binding ","obj instance_eval ","obj instance_variables "," debug_eval ","@match post_match ","@match post_match empty? "," bb_eval "," var_instance "," debug_eval  instance_eval "," bb_eval  instance_eval "," debug_eval  instance_variables "," bb_eval  instance_variables "]}," Byebug VarInstanceCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarGlobalCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarGlobalCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarGlobalCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_list "," global_variables "," var_global "]}," Byebug VarGlobalCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarConstantCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarConstantCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarConstantCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","@match post_match ","obj const_get ","c =~ ","constants sort! "," debug_eval ","obj kind_of? "," bb_eval "," puts "," format ","constants each ","obj is_a? "," debug_eval  const_get "," bb_eval  const_get "," debug_eval  sort! "," bb_eval  sort! "," debug_eval  kind_of? "," bb_eval  kind_of? "," debug_eval  each "," bb_eval  each "," debug_eval  is_a? "," bb_eval  is_a? "]}," Byebug VarConstantCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarClassVarCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug VarClassVarCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug VarClassVarCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_class_self "," errmsg ","@state context "]}," Byebug VarClassVarCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarFunctions var_class_self":{"type":"method","name":"var_class_self","children":[],"call":[" var_list "," get_binding ","obj class class_variables ","obj class "," debug_eval "," bb_eval "," debug_eval  class class_variables "," bb_eval  class class_variables "," debug_eval  class "," bb_eval  class "]}," Byebug VarFunctions var_list":{"type":"method","name":"var_list","children":[],"call":[" print ","s []= "," class settings [] - "," class settings [] "," class settings "," class ","s size > ","s size "," debug_eval to_s "," debug_eval ","v to_s "," debug_eval inspect ","ary sort! ","v == "," pad_with_dots "," bb_eval to_s "," bb_eval "," bb_eval inspect ","Setting  [] - ","Setting  [] "," puts ","ary each "," prv ","b eval to_s ","b eval ","b eval inspect ","ary sort map ","ary sort "," debug_eval to_s  []= "," debug_eval inspect  []= "," bb_eval to_s  []= "," bb_eval inspect  []= "," cla debug_eval to_s  debug_eval to_s   debug_eval to_s etting debug_eval to_s  [] - "," cla debug_eval inspect  debug_eval inspect   debug_eval inspect etting debug_eval inspect  [] - "," cla bb_eval to_s  bb_eval to_s   bb_eval to_s etting bb_eval to_s  [] - "," cla bb_eval inspect  bb_eval inspect   bb_eval inspect etting bb_eval inspect  [] - "," cla debug_eval to_s  debug_eval to_s   debug_eval to_s etting debug_eval to_s  [] "," cla debug_eval inspect  debug_eval inspect   debug_eval inspect etting debug_eval inspect  [] "," cla bb_eval to_s  bb_eval to_s   bb_eval to_s etting bb_eval to_s  [] "," cla bb_eval inspect  bb_eval inspect   bb_eval inspect etting bb_eval inspect  [] "," cla debug_eval to_s  debug_eval to_s   debug_eval to_s etting debug_eval to_s  "," cla debug_eval inspect  debug_eval inspect   debug_eval inspect etting debug_eval inspect  "," cla bb_eval to_s  bb_eval to_s   bb_eval to_s etting bb_eval to_s  "," cla bb_eval inspect  bb_eval inspect   bb_eval inspect etting bb_eval inspect  "," cla debug_eval to_s  debug_eval to_s  "," cla debug_eval inspect  debug_eval inspect  "," cla bb_eval to_s  bb_eval to_s  "," cla bb_eval inspect  bb_eval inspect  "," debug_eval to_s   debug_eval to_s ize > "," debug_eval inspect   debug_eval inspect ize > "," bb_eval to_s   bb_eval to_s ize > "," bb_eval inspect   bb_eval inspect ize > "," debug_eval to_s   debug_eval to_s ize "," debug_eval inspect   debug_eval inspect ize "," bb_eval to_s   bb_eval to_s ize "," bb_eval inspect   bb_eval inspect ize "," debug_eval to_ debug_eval to_s  "," debug_eval to_ debug_eval inspect  "," debug_eval to_ bb_eval to_s  "," debug_eval to_ bb_eval inspect  ","v to_ debug_eval to_s  ","v to_ debug_eval inspect  ","v to_ bb_eval to_s  ","v to_ bb_eval inspect  "," debug_eval in debug_eval to_s pect "," debug_eval in debug_eval inspect pect "," debug_eval in bb_eval to_s pect "," debug_eval in bb_eval inspect pect ","ary  debug_eval to_s ort! ","ary  debug_eval inspect ort! ","ary  bb_eval to_s ort! ","ary  bb_eval inspect ort! "," pad_with_dot debug_eval to_s  "," pad_with_dot debug_eval inspect  "," pad_with_dot bb_eval to_s  "," pad_with_dot bb_eval inspect  "," bb_eval to_ debug_eval to_s  "," bb_eval to_ debug_eval inspect  "," bb_eval to_ bb_eval to_s  "," bb_eval to_ bb_eval inspect  "," bb_eval in debug_eval to_s pect "," bb_eval in debug_eval inspect pect "," bb_eval in bb_eval to_s pect "," bb_eval in bb_eval inspect pect "," put debug_eval to_s  "," put debug_eval inspect  "," put bb_eval to_s  "," put bb_eval inspect  ","b eval to_ debug_eval to_s  ","b eval to_ debug_eval inspect  ","b eval to_ bb_eval to_s  ","b eval to_ bb_eval inspect  ","b eval in debug_eval to_s pect ","b eval in debug_eval inspect pect ","b eval in bb_eval to_s pect ","b eval in bb_eval inspect pect ","ary  debug_eval to_s ort map ","ary  debug_eval inspect ort map ","ary  bb_eval to_s ort map ","ary  bb_eval inspect ort map ","ary  debug_eval to_s ort ","ary  debug_eval inspect ort ","ary  bb_eval to_s ort ","ary  bb_eval inspect ort "]}," Byebug TraceCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug TraceCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug TraceCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","expecting 'on', 'off', 'var' or 'variable'; got: %s\n % ","@match [] "," eval ","@match [] !~ ","expecting 'stop' or 'nostop'; got %s\n % "," debug_eval ","@match [] =~ "," print ","Tracing %s on current thread.\n % ","Byebug  current_context tracing= ","Byebug  current_context ","Tracing %s all threads.\n % ","Byebug  tracing= ","on == "," show_setting "," bb_eval "," global_variables include? ","(str \"$\") to_sym "," global_variables "," puts ","expecting 'on', 'off', '@match [] ' or '@match [] iable'; got: %s\n % "," global_@match [] iables include? "," global_@match [] iables "]}," Byebug TraceCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug TextMateCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug TextMateCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug TextMateCommand execute":{"type":"method","name":"execute","children":[],"call":["File  expand_path ","@state line ","@state file ","@state context frame_line ","frm_n - ","@state context ","@state context frame_file "," print ","frm_n == ","frm_n > ","@state context stack_size ","@match [] to_i ","@match [] ","@match [] to_i  - ","@match [] to_i  == ","@match [] to_i  > "]}," Byebug TextMateCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCurrentCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ThreadCurrentCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ThreadCurrentCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","@state context "]}," Byebug ThreadCurrentCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadSwitchCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ThreadSwitchCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ThreadSwitchCommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","c thread run ","c thread ","c stop_next= "," display_context "," parse_thread_num_for_cmd ","@match [] ","c step_into "," errmsg ","@match [] =~ ","c switch ","@state pro parse_thread_num_for_cmd eed "," parse_thread_num_for_cmd  thread run "," parse_thread_num_for_cmd  thread "," parse_thread_num_for_cmd  stop_next= "," display_ parse_thread_num_for_cmd ontext "," parse_thread_num_for_ parse_thread_num_for_cmd md ","@mat parse_thread_num_for_cmd h [] "," parse_thread_num_for_cmd  step_into ","@mat parse_thread_num_for_cmd h [] =~ "," parse_thread_num_for_cmd  swit parse_thread_num_for_cmd h "]}," Byebug ThreadSwitchCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadResumeCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ThreadResumeCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ThreadResumeCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","c resume "," print ","c thread stop? ! ","c thread stop? ","c thread "," parse_thread_num_for_cmd ","@match [] "," errmsg ","c suspended? ! ","c suspended? "," pr "," display_ parse_thread_num_for_cmd ontext "," parse_thread_num_for_cmd  resume "," parse_thread_num_for_cmd  thread stop? ! "," parse_thread_num_for_cmd  thread stop? "," parse_thread_num_for_cmd  thread "," parse_thread_num_for_ parse_thread_num_for_cmd md ","@mat parse_thread_num_for_cmd h [] "," parse_thread_num_for_cmd  suspended? ! "," parse_thread_num_for_cmd  suspended? "]}," Byebug ThreadResumeCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadStopCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ThreadStopCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ThreadStopCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","c suspend "," parse_thread_num_for_cmd ","@match [] "," errmsg "," display_ parse_thread_num_for_cmd ontext "," parse_thread_num_for_cmd  suspend "," parse_thread_num_for_ parse_thread_num_for_cmd md ","@mat parse_thread_num_for_cmd h [] "]}," Byebug ThreadStopCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadListCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ThreadListCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ThreadListCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","(send\n  (send\n    (const nil :Byebug) :contexts) :sort_by) each ","c thnum ","Byebug  contexts sort_by ","Byebug  contexts ","Byebug  contexts sort_by each ","(send\n  (send\n    (const nil :Byebug) :contexts) :select) sort_by each ","(send\n  (send\n    (const nil :Byebug) :contexts) :select) sort_by ","Thread  list include? ","c thread ","Thread  list ","Byebug  contexts select "," print "," thread_arguments "," prc ","(send\n  (send\n    (const nil :Byebug) :Byebug  contexts sort_by ) :sort_by) each ","Byebug  Byebug  contexts sort_by  sort_by ","Byebug  Byebug  contexts sort_by  ","Byebug  Byebug  contexts sort_by  sort_by each ","(send\n  (send\n    (const nil :Byebug) :Byebug  contexts sort_by ) :select) sort_by each ","(send\n  (send\n    (const nil :Byebug) :Byebug  contexts sort_by ) :select) sort_by ","Byebug  Byebug  contexts sort_by  select "]}," Byebug ThreadListCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadFunctions parse_thread_num_for_cmd":{"type":"method","name":"parse_thread_num_for_cmd","children":[],"call":[" errmsg ","c ignored? ","@state context == ","@state context "," == "," parse_thread_num "," pr ","c nil? "," parse_thread_num  ignored? ","@state  parse_thread_num ontext == ","@state  parse_thread_num ontext "," parse_thread_num  nil? "]}," Byebug ThreadFunctions parse_thread_num":{"type":"method","name":"parse_thread_num","children":[],"call":[" get_context "," get_int "," errmsg ","'%s' needs a thread number\n % "," == ","c thnum == "," thnum ","c thnum ","Byebug  contexts find ","Byebug  contexts "]}," Byebug ThreadFunctions display_context":{"type":"method","name":"display_context","children":[],"call":[" print ","c frame_line ","c frame_file ","c stack_size > ","c stack_size ","c thread inspect ","c thread ","c thnum ","c ignored? ","c suspended? ","c thread == ","Thread  current ","args [] "," thread_arguments "," puts "," format "," pr "," thread_arguments  [] "]}," Byebug StepCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug StepCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug StepCommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","@state context step ","@state context "," parse_stepping_args ","@state context step_into "," processor proceed! "," processor "," context step_into "," context frame pos "," context frame "," context "," errmsg "," parse_steps ","@match [] "," parse_force ","@state frame "]}," Byebug StepCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug NextCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug NextCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug NextCommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","@state context step_over ","@state frame_pos ","@state context "," parse_stepping_args "," processor proceed! "," processor "," context step_over "," context frame pos "," context frame "," context "," errmsg "," parse_steps ","@match [] "," parse_force ","@state frame "]}," Byebug NextCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug SteppingFunctions parse_stepping_args":{"type":"method","name":"parse_stepping_args","children":[],"call":[" get_int ","match [] ","match [] == ","Command  settings [] ","Command  settings ","match [] nil? ","Setting  [] "]}," Byebug SourceCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug SourceCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug SourceCommand execute":{"type":"method","name":"execute","children":[],"call":["Byebug  run_script ","File  open readlines ","File  open ","@state interface command_queue ","@state interface "," errmsg ","File  exist? ","File  expand_path strip ","File  expand_path ","@match [] "," print ","SourceCommand  help ","SourceCommand  names include? ","SourceCommand  names "," processor interface read_file "," processor interface "," processor "," pr "," puts "," help "," class help "," class "," class names include? "," class names ","@state interface read_file "," processor interface read_File  expand_path strip  ","@state interface read_File  expand_path strip  "]}," Byebug SourceCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug SkipCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug SkipCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug SkipCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","Byebug  skip_next_exception ","Byebug  stop ","Byebug  stoppable? "," processor proceed! "," processor "," initialize_attributes "," auto_run "]}," Byebug SkipCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ShowCommand help":{"type":"method","name":"help","children":[],"call":["subcmd short_help ","subcmd name ","args [] ","\n + ","subcmd long_help ","subcmd short_help + ","try_subcmd name [] == ","try_subcmd name [] ","s size - ","s size ","try_subcmd name ","s size >= ","try_subcmd min ","Subcommands  find "," find "," format_subcmds ","ShowCommad  description + ","ShowCommad  description "," description + ","Setting  format "," description ","setting help ","setting to_sym ","Setting  help ","subcmds first ","Setting  help_all ","args [] ubcmd args [] hort_help "," find  short_help ","args [] ubcmd name "," find  name ","argargs []  [] ","args [] ubcmd long_help "," find  long_help ","args [] ubcmd args [] hort_help + "," find  short_help + ","try_args [] ubcmd name [] == ","try_ find  name [] == ","try_args [] ubcmd name [] ","try_ find  name [] ","args []  args [] ize - ","args []  args [] ize ","try_args [] ubcmd name ","try_ find  name ","args []  args [] ize >= ","try_args [] ubcmd min ","try_ find  min ","Subcommandargs []   find "," format_args [] ubcmdargs []  "," format_ find s ","ShowCommad  deargs [] cription + ","ShowCommad  deargs [] cription "," deargs [] cription + "," deargs [] cription ","args [] etting help ","args [] etting to_args [] ym ","args [] ubcmdargs []  firargs [] t "," find s first "]}," Byebug ShowCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ShowCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","%s\n % "," show_setting ","subcmd name "," find ","args shift ","@match [] split ","@match [] ","subcmd short_help ","@match [] ! "," print_subcommands "," print_subcmds "," format_subcmds ","ShowCommand  help ","Command  find "," puts ","Setting  settings [] ","setting to_sym ","Setting  settings "," errmsg "," pr ","Setting  find "," help ","Setting  settings [] to_s ","full_key to_sym ","key nil? "," class help "," class "," show_Setting  find  "," find  name ","Command  find  name ","@match [] split  shift "," find  short_help ","Command  find  short_help "," print_ find s "," print_Command  find s "," format_ find s "," format_Command  find s ","Setting  Setting  find s [] ","Setting  find  to_sym ","Setting  Setting  find s ","Setting  Setting  find s [] to_s ","full_@match []  to_sym ","@match []  nil? "]}," Byebug ShowCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ShowFunctions show_setting":{"type":"method","name":"show_setting","children":[],"call":[" class settings [] "," class settings "," class "," show_onoff ","Command  settings [] ","Command  settings ","s join ","s << ","(if\n  (lvar :prefix)\n  (str \"size: \")\n  (str \"\")) + ","interface history_length ","(if\n  (lvar :prefix)\n  (str \"save: \")\n  (str \"\")) + ","interface history_save ","(if\n  (lvar :prefix)\n  (str \"filename: \")\n  (str \"\")) + + ","interface histfile inspect ","interface histfile ","(if\n  (lvar :prefix)\n  (str \"filename: \")\n  (str \"\")) + ","args [] == ","args [] ","@state interface ","@match [] split ","@match [] ","%5d  %s\n % ","commands each ","Readline HISTORY  to_a ","Readline HISTORY  length - ","Readline HISTORY  length ","Readline HISTORY  to_a [] ","Readline HISTORY  length > ","last_line > ","first_line <= ","first_line > ","first_line + - ","first_line + ","args [] to_i - ","args [] to_i ","@state interface readline_support? ","Command  settings [] > ","Command  settings [] join ","Command  settings [] [] join ","Command  settings [] [] ","Command  settings [] size > ","Command  settings [] size ","Byebug  annotate ","Byebug  tracing ","Byebug  tracing? ","Byebug  post_mortem? ","Byebug  verbose ","setting_name to_sym ","Byebug History  max_size ","Byebug History  file ","history to_s "," get_int ","history max_size "," class settReadline HISTORY  length - ngs [] "," class settReadline HISTORY  length - ngs ","Command  settReadline HISTORY  length - ngs [] ","Command  settReadline HISTORY  length - ngs ","s joReadline HISTORY  length - n ","(Readline HISTORY  length - f\n  (lvar :prefReadline HISTORY  length - x)\n  (str \"sReadline HISTORY  length - ze: \")\n  (str \"\")) + ","(if\n  (lvar :prefix)\n  (str \" get_int : \")\n  (str \"\")) + ","@state interface  history_length ","Readline HISTORY  length - nterface hReadline HISTORY  length - story_length ","(Readline HISTORY  length - f\n  (lvar :prefReadline HISTORY  length - x)\n  (str \"save: \")\n  (str \"\")) + ","@state interface  history_save ","Readline HISTORY  length - nterface hReadline HISTORY  length - story_save ","(Readline HISTORY  length - f\n  (lvar :prefReadline HISTORY  length - x)\n  (str \"fReadline HISTORY  length - lename: \")\n  (str \"\")) + + ","@state interface  histfile inspect ","Readline HISTORY  length - nterface hReadline HISTORY  length - stfReadline HISTORY  length - le Readline HISTORY  length - nspect ","@state interface  histfile ","Readline HISTORY  length - nterface hReadline HISTORY  length - stfReadline HISTORY  length - le ","(Readline HISTORY  length - f\n  (lvar :prefReadline HISTORY  length - x)\n  (str \"fReadline HISTORY  length - lename: \")\n  (str \"\")) + ","@match [] split  [] == ","Command  settings [] join  [] == ","Command  settings [] [] join  [] == ","@match [] split  [] ","Command  settings [] join  [] ","Command  settings [] [] join  [] ","@state @state interface  ","@state Readline HISTORY  length - nterface ","@match [] splReadline HISTORY  length - t ","Readline HISTORY  to_a  each ","Readline HISTORY  to_a []  each ","ReadlReadline HISTORY  length - ne HISTORY  to_a ","ReadlReadline HISTORY  length - ne HISTORY  length - ","ReadlReadline HISTORY  length - ne HISTORY  length ","ReadlReadline HISTORY  length - ne HISTORY  to_a [] ","ReadlReadline HISTORY  length - ne HISTORY  length > ","last_lReadline HISTORY  length - ne > ","Readline HISTORY  length  > ","first_line + -  > ","fReadline HISTORY  length - rst_lReadline HISTORY  length - ne <= ","args [] to_i -  <= ","fReadline HISTORY  length - rst_lReadline HISTORY  length - ne > ","args [] to_i -  > ","fReadline HISTORY  length - rst_lReadline HISTORY  length - ne + - ","args [] to_i -  + - ","fReadline HISTORY  length - rst_lReadline HISTORY  length - ne + ","args [] to_i -  + ","@match [] split  [] to_i - ","Command  settings [] join  [] to_i - ","Command  settings [] [] join  [] to_i - ","args [] to_Readline HISTORY  length -  - ","@match [] split  [] to_i ","Command  settings [] join  [] to_i ","Command  settings [] [] join  [] to_i ","args [] to_Readline HISTORY  length -  ","@state @state interface  readline_support? ","@state Readline HISTORY  length - nterface readlReadline HISTORY  length - ne_support? ","Command  settReadline HISTORY  length - ngs [] > ","Command  settReadline HISTORY  length - ngs [] joReadline HISTORY  length - n ","Command  settReadline HISTORY  length - ngs [] [] joReadline HISTORY  length - n ","Command  settReadline HISTORY  length - ngs [] [] ","Command  settReadline HISTORY  length - ngs [] sReadline HISTORY  length - ze > ","Command  settings []  get_int  > ","Command  settReadline HISTORY  length - ngs [] sReadline HISTORY  length - ze ","Command  settings []  get_int  ","Byebug  tracReadline HISTORY  length - ng ","Byebug  tracReadline HISTORY  length - ng? ","settReadline HISTORY  length - ng_name to_sym ","Byebug HReadline HISTORY  length - story  max_sReadline HISTORY  length - ze ","Byebug History  max_ get_int  ","Byebug HReadline HISTORY  length - story  fReadline HISTORY  length - le ","hReadline HISTORY  length - story to_s "," get_Readline HISTORY  length - nt ","hReadline HISTORY  length - story max_sReadline HISTORY  length - ze ","history max_ get_int  "]}," Byebug SetCommand help":{"type":"method","name":"help","children":[],"call":["subcmd short_help ","subcmd name ","args [] ","\n + ","subcmd long_help ","subcmd short_help + ","try_subcmd name [] == ","try_subcmd name [] ","s size - ","s size ","try_subcmd name ","s size >= ","try_subcmd min ","Subcommands  find "," find "," format_subcmds "," description + ","SetCommand  new format_subcmds ","SetCommand  new "," description ","SetCommand  new find ","Setting  format ","setting help ","setting to_sym ","Setting  help ","subcmds first ","Setting  help_all ","args [] ubcmd args [] hort_help "," find  short_help ","SetCommand  new find  short_help ","args [] ubcmd name "," find  name ","SetCommand  new find  name ","argargs []  [] ","args [] ubcmd long_help "," find  long_help ","SetCommand  new find  long_help ","args [] ubcmd args [] hort_help + "," find  short_help + ","SetCommand  new find  short_help + ","try_args [] ubcmd name [] == ","try_ find  name [] == ","try_SetCommand  new find  name [] == ","try_args [] ubcmd name [] ","try_ find  name [] ","try_SetCommand  new find  name [] ","args []  args [] ize - ","args []  args [] ize ","try_args [] ubcmd name ","try_ find  name ","try_SetCommand  new find  name ","args []  args [] ize >= ","try_args [] ubcmd min ","try_ find  min ","try_SetCommand  new find  min ","Subcommandargs []   find "," format_args [] ubcmdargs []  "," format_ find s "," format_SetCommand  new find s "," deargs [] cription + ","SetCommand  new format_args [] ubcmdargs []  ","SetCommand  new format_ find s ","SetCommand  new format_SetCommand  new find s "," deargs [] cription ","args [] etting help ","args [] etting to_args [] ym ","args [] ubcmdargs []  firargs [] t "," find s first ","SetCommand  new find s first "]}," Byebug SetCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug SetCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","%s\n % "," show_setting ","try_subcmd name ","@match [] ","ENV  []= ","width to_s "," class settings []= "," class settings "," class "," get_int ","args [] ","Command  settings []= ","Command  settings ","args size ","interface histfile= ","File  join ","ENV  [] ","interface history_length= ","interface history_save= "," get_onoff ","@state interface ","2 == ","(str \"Invalid call style \") + ","args [] downcase to_sym ","args [] downcase ","Command  settings [] []= ","Command  settings [] ","Byebug  annotate= ","args size > ","try_subcmd is_bool ","try_subcmd name [] == ","try_subcmd name [] ","subcmd size - ","subcmd size ","subcmd size >= ","try_subcmd min ","subcmd [] ","subcmd =~ ","subcmd downcase! ","args shift ","@match [] split ","subcmd short_help ","subcmd name ","@match [] ! "," print_subcommands ","subcmd is_bool "," find ","try_subcmd [] ","try_subcmd =~ ","try_subcmd downcase! "," print_subcmds "," format_subcmds ","SetCommand  help ","SetCommand  names include? ","SetCommand  names ","Byebug  tracing= ","Command  find "," arg [] to_sym "," arg [] "," arg "," arg [] == ","args [] == ","args [] to_sym "," puts ","setting to_s ","setting value= "," errmsg ","value nil? ","setting to_sym ","setting integer? ","key =~ ","setting boolean? "," pr ","setting boolean? ! ","Setting  find "," help ","key nil? ","(str \"^no\") match? "," set_setting ","Setting  settings [] to_s ","Setting  settings [] ","full_key to_sym ","Setting  settings ","Setting  []= ","Setting  integer? ","Setting  boolean? ","Setting  boolean? ! "," show_Setting  find  ","try_subcmd []  name ","try_args shift  name ","try_ find  name ","try_Command  find  name ","args shift  name "," get_int  to_s "," class Setting  find s []= "," class Setting  find s ","args [] downcase to_sym s [] ","@match [] split  [] ","Command  Setting  find s []= ","Command  Setting  find s ","args [] downcase to_sym s size ","@match [] split  size ","@state interface  histfile= ","@state interface  history_length= ","@state interface  history_save= ","@state @state interface  ","args [] downcase to_sym s [] downcase to_sym ","@match [] split  [] downcase to_sym ","args [] downcase to_sym s [] downcase ","@match [] split  [] downcase ","Command  Setting  find s [] []= ","Command  Setting  find s [] ","args [] downcase to_sym s size > ","@match [] split  size > ","try_subcmd []  is_bool ","try_args shift  is_bool ","try_ find  is_bool ","try_Command  find  is_bool ","args shift  is_bool ","try_subcmd []  name [] == ","try_args shift  name [] == ","try_ find  name [] == ","try_Command  find  name [] == ","args shift  name [] == ","try_subcmd []  name [] ","try_args shift  name [] ","try_ find  name [] ","try_Command  find  name [] ","args shift  name [] ","subcmd []  size - ","args shift  size - "," find  size - ","Command  find  size - ","subcmd []  size ","args shift  size "," find  size ","Command  find  size ","subcmd []  size >= ","args shift  size >= "," find  size >= ","Command  find  size >= ","try_subcmd []  min ","try_args shift  min ","try_ find  min ","try_Command  find  min ","args shift  min ","subcmd []  [] ","args shift  [] "," find  [] ","Command  find  [] ","subcmd []  =~ ","args shift  =~ "," find  =~ ","Command  find  =~ ","subcmd []  downcase! ","args shift  downcase! "," find  downcase! ","Command  find  downcase! ","args [] downcase to_sym s shift ","@match [] split  shift ","subcmd []  short_help ","args shift  short_help "," find  short_help ","Command  find  short_help ","subcmd []  name "," find  name ","Command  find  name ","subcmd []  is_bool "," find  is_bool ","Command  find  is_bool ","try_subcmd []  [] ","try_args shift  [] ","try_ find  [] ","try_Command  find  [] ","try_subcmd []  =~ ","try_args shift  =~ ","try_ find  =~ ","try_Command  find  =~ ","try_subcmd []  downcase! ","try_args shift  downcase! ","try_ find  downcase! ","try_Command  find  downcase! "," print_subcmd [] s "," print_args shift s "," print_ find s "," print_Command  find s "," format_subcmd [] s "," format_args shift s "," format_ find s "," format_Command  find s "," args [] downcase to_sym  [] to_sym "," args [] downcase to_sym  [] "," args [] downcase to_sym  "," args [] downcase to_sym  [] == ","args [] downcase to_sym s [] == ","@match [] split  [] == ","args [] downcase to_sym s [] to_sym ","@match [] split  [] to_sym ","Setting  find  to_s ","Setting  find  value= ","setting @match [] = ","setting  get_int = ","setting  get_onoff = ","  pr msg ","@match []  nil? "," get_int  nil? "," get_onoff  nil? ","Setting  find  to_sym ","Setting  find  integer? ","@match []  =~ ","Setting  find  boolean? ","Setting  find  boolean? ! "," set_Setting  find  ","Setting  Setting  find s [] to_s ","Setting  Setting  find s [] ","full_@match []  to_sym ","Setting  Setting  find s "]}," Byebug SetCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug SaveCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug SaveCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug SaveCommand execute":{"type":"method","name":"execute","children":[],"call":["file close ","@state interface restart_file= ","file path ","@state interface "," print "," save_settings "," save_catchpoints "," save_breakpoints "," open ","@match [] "," open_save ","@match [] strip empty? ","@match [] strip ","@match [] ! "," save_displays "," pr ","File  open ","Setting  [] "," puts "," open  close "," open_save  close ","File  open  close ","@state interface restart_ open = ","@state interface restart_ open_save = ","@state interface restart_File  open = "," open  path "," open_save  path ","File  open  path "]}," Byebug SaveCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug SaveCommand save_settings":{"type":"method","name":"save_settings","children":[],"call":["file puts "," show_onoff ","Command  settings [] > ","Command  settings [] ","setting to_sym ","Command  settings ","(str \"autolist\") each ","(str \"autoeval\") each ","Setting  [] ","(str \"autoirb\") each "]}," Byebug SaveCommand save_displays":{"type":"method","name":"save_displays","children":[],"call":["file puts ","d [] ","@state display ","Byebug  displays each ","Byebug  displays ","@state display each "]}," Byebug SaveCommand save_catchpoints":{"type":"method","name":"save_catchpoints","children":[],"call":["file puts ","Byebug  catchpoints keys each ","Byebug  catchpoints keys ","Byebug  catchpoints ","Byebug  catchpoints each_key "]}," Byebug SaveCommand save_breakpoints":{"type":"method","name":"save_breakpoints","children":[],"call":["file puts ","b expr ","b pos ","b source ","Byebug  breakpoints each ","Byebug  breakpoints "]}," Byebug SaveFunctions open_save":{"type":"method","name":"open_save","children":[{"type":"method","name":"close","children":[],"asgn":[],"call":[]}],"call":["@tmpfile close ","Tempfile  new "," require ","@tmpTempfile  new  close ","TempTempfile  new   new "]}," Byebug ReloadCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ReloadCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ReloadCommand source_reloading":{"type":"method","name":"source_reloading","children":[],"call":["Byebug  reload_source_on_change ","Command  settings [] ","Command  settings "]}," Byebug ReloadCommand execute":{"type":"method","name":"execute","children":[],"call":[" print "," source_reloading ","Byebug  source_reload ","Command  settings [] ","Command  settings ","Setting  [] "," puts "]}," Byebug ReloadCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug QuitCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug QuitCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug QuitCommand execute":{"type":"method","name":"execute","children":[],"call":[" exit! ","@state interface finalize ","@state interface "," confirm ","@match [] ","Process  exit! "," processor interface close "," processor interface "," processor "," processor interface autosave "," pr ","@state interface close ","@state interface autosave "]}," Byebug QuitCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug MethodCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug MethodCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug MethodCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","@match post_match "," columnize "," class settings [] "," class settings "," class ","obj instance_methods sort ","obj instance_methods ","obj kind_of? "," debug_eval ","obj methods sort ","obj methods ","@match [] ","obj instance_variable_get inspect ","obj instance_variable_get ","obj instance_variables sort each ","obj instance_variables sort ","obj instance_variables ","@match [] == ","Command  settings [] ","Command  settings "," puts "," prc "," pr ","obj is_a? ! ","obj is_a? "," warning_eval "," bb_eval ","Setting  [] ","obj kind_of? ! "," single_thread_eval "," debug_eval  instance_methods sort "," warning_eval  instance_methods sort "," bb_eval  instance_methods sort "," single_thread_eval  instance_methods sort "," debug_eval  instance_methods "," warning_eval  instance_methods "," bb_eval  instance_methods "," single_thread_eval  instance_methods "," debug_eval  kind_of? "," warning_eval  kind_of? "," bb_eval  kind_of? "," single_thread_eval  kind_of? "," debug_eval  methods sort "," warning_eval  methods sort "," bb_eval  methods sort "," single_thread_eval  methods sort "," debug_eval  methods "," warning_eval  methods "," bb_eval  methods "," single_thread_eval  methods "," debug_eval  instance_variable_get inspect "," warning_eval  instance_variable_get inspect "," bb_eval  instance_variable_get inspect "," single_thread_eval  instance_variable_get inspect "," debug_eval  instance_variable_get "," warning_eval  instance_variable_get "," bb_eval  instance_variable_get "," single_thread_eval  instance_variable_get "," debug_eval  instance_variables sort each "," warning_eval  instance_variables sort each "," bb_eval  instance_variables sort each "," single_thread_eval  instance_variables sort each "," debug_eval  instance_variables sort "," warning_eval  instance_variables sort "," bb_eval  instance_variables sort "," single_thread_eval  instance_variables sort "," debug_eval  instance_variables "," warning_eval  instance_variables "," bb_eval  instance_variables "," single_thread_eval  instance_variables "," debug_eval  is_a? ! "," warning_eval  is_a? ! "," bb_eval  is_a? ! "," single_thread_eval  is_a? ! "," debug_eval  is_a? "," warning_eval  is_a? "," bb_eval  is_a? "," single_thread_eval  is_a? "," debug_eval  kind_of? ! "," warning_eval  kind_of? ! "," bb_eval  kind_of? ! "," single_thread_eval  kind_of? ! "]}," Byebug MethodCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug MethodSigCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug MethodSigCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug MethodSigCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","@match [] "," print ","obj signature to_s ","obj signature ","obj is_a? "," debug_eval ","method(:%s) % "," bb_eval "," debug_eval  signature to_s "," bb_eval  signature to_s "," debug_eval  signature "," bb_eval  signature "," debug_eval  is_a? "," bb_eval  is_a? "]}," Byebug MethodSigCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ListCommand display_list":{"type":"method","name":"display_list","children":[],"call":["@state previous_line ","e == ","lines size "," errmsg "," print ","lines [] chomp ","lines [] ","n - ","n == ","n > ","(lvar :b) max upto ","(lvar :b) max ","lines size < ","b >= ","LineCache  getlines ","Command  settings [] ","Command  settings ","b upto ","e to_s size ","e to_s "," puts "," format ","@statlines size  prlines size vious_linlines size  ","lines size  == ","linlines size s sizlines size  ","LineCache  getlines  size "," lines size rrmsg ","linlines size s [] chomp ","LineCache  getlines  [] chomp ","linlines size s [] ","LineCache  getlines  [] ","linlines size s sizlines size  < ","LineCache  getlines  size < ","Linlines size Cachlines size   glines size tlinlines size s ","LineCache  getLineCache  getlines  ","Command  slines size ttings [] ","Command  slines size ttings ","lines size  to_s sizlines size  ","lines size  to_s "]}," Byebug ListCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ListCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ListCommand execute":{"type":"method","name":"execute","children":[],"call":["@state previous_line= "," display_list ","@state line ","@state file ","b + - ","b + ","b to_i - ","listsize / ","b to_i ","e to_i ","@match [] split ","@match [] ","@state line - ","@match [] == ","@state previous_line ","@state previous_line - ","@state previous_line > ","@state previous_line + ","(or\n  (send\n    (ivar :@match) :[]\n    (int 1))\n  (send\n    (ivar :@match) :[]\n    (int 2))) ! ","@match ! ","Command  settings [] ","Command  settings "," print ","b < "," set_line_range ","lines size "," errmsg ","lines ! ","LineCache  getlines ","Byebug  source_reload ","@state file != "," processor prev_line= "," processor "," display_lines "," range "," raise ","File  exist? "," frame file "," frame "," getlines ","Setting  [] "," get_lines "," puts ","b > ","@state prev_line= "," valid_range? "," match "," n_lines "," fail ","@statb + -  prb + - vious_linb + - = ","@state to_i  pre to_i vious_line to_i = ","@statb + -  linb + -  ","@state to_i  line to_i  ","@statb + -  filb + -  ","@state to_i  file to_i  ","b to_i -  + - ","b to_i  + - ","@state line -  + - ","@state previous_line +  + - ","b to_i -  + ","b to_i  + ","@state line -  + ","@state previous_line +  + ","b to_i -  to_i - ","b to_i  to_i - ","@state line -  to_i - ","@state previous_line +  to_i - ","listsizb + -  / ","listsize to_i  / ","Command  settings []  / ","b to_i -  to_i ","b to_i  to_i ","@state line -  to_i ","@state previous_line +  to_i ","b + -  to_i ","e to_i  to_i ","@statb + -  linb + -  - ","@state to_i  line to_i  - ","@statb + -  prb + - vious_linb + -  ","@state to_i  pre to_i vious_line to_i  ","@statb + -  prb + - vious_linb + -  - ","@state to_i  pre to_i vious_line to_i  - ","@statb + -  prb + - vious_linb + -  > ","@state to_i  pre to_i vious_line to_i  > ","@statb + -  prb + - vious_linb + -  + ","@state to_i  pre to_i vious_line to_i  + ","(or\n  (sb + - nd\n    (ivar :@match) :[]\n    (int 1))\n  (sb + - nd\n    (ivar :@match) :[]\n    (int 2))) ! ","(or\n  (se to_i nd\n    (ivar :@match) :[]\n    (int 1))\n  (se to_i nd\n    (ivar :@match) :[]\n    (int 2))) ! ","Command  sb + - ttings [] ","Command  se to_i ttings [] ","Command  sb + - ttings ","Command  se to_i ttings ","b to_i -  < ","b to_i  < ","@state line -  < ","@state previous_line +  < "," sb + - t_linb + - _rangb + -  "," se to_i t_line to_i _range to_i  ","linb + - s sizb + -  ","line to_i s size to_i  ","LineCache  getlines  size "," getlines  size "," get_lines  size "," b + - rrmsg "," e to_i rrmsg ","linb + - s ! ","line to_i s ! ","LineCache  getlines  ! "," getlines  ! "," get_lines  ! ","Linb + - Cachb + -   gb + - tlinb + - s ","Line to_i Cache to_i   ge to_i tline to_i s ","LineCache  getLineCache  getlines  ","LineCache  get getlines  ","LineCache  get get_lines  ","Byb + - bug  sourcb + - _rb + - load ","Bye to_i bug  source to_i _re to_i load ","Byeb to_i - ug  source_reload ","Byeb to_i ug  source_reload ","Bye@state line - ug  source_reload ","Bye@state previous_line + ug  source_reload ","@statb + -  filb + -  != ","@state to_i  file to_i  != "," procb + - ssor prb + - v_linb + - = "," proce to_i ssor pre to_i v_line to_i = "," procb + - ssor "," proce to_i ssor "," display_linb + - s "," display_line to_i s "," display_LineCache  getlines  "," display_ getlines  "," display_ get_lines  "," rangb + -  "," range to_i  "," raisb + -  "," raise to_i  ","Filb + -   b + - xist? ","File to_i   e to_i xist? ","File  File  exist? ? "," framb + -  filb + -  "," frame to_i  file to_i  "," framb + -  "," frame to_i  "," gb + - tlinb + - s "," ge to_i tline to_i s "," getLineCache  getlines  "," get getlines  "," get get_lines  ","Sb + - tting  [] ","Se to_i tting  [] "," gb + - t_linb + - s "," ge to_i t_line to_i s "," get_LineCache  getlines  "," get_ getlines  "," get_ get_lines  ","b to_i -  > ","b to_i  > ","@state line -  > ","@state previous_line +  > ","@statb + -  prb + - v_linb + - = ","@state to_i  pre to_i v_line to_i = "," valid_rangb + - ? "," valid_range to_i ? "," n_linb + - s "," n_line to_i s "," n_LineCache  getlines  "," n_ getlines  "," n_ get_lines  "]}," Byebug ListCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug KillCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug KillCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug KillCommand execute":{"type":"method","name":"execute","children":[],"call":["Process  kill ","Process  pid "," confirm ! "," confirm ","@state interface finalize ","@state interface ","KILL == "," errmsg ","Signal  list member? ","Signal  list ","@match [] "," puts "," processor interface close "," processor interface "," processor ","signame == ","@state interface close ","@match []  == "]}," Byebug KillCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug JumpCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug JumpCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug JumpCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","Couldn't find active code at  + + + + ","Couldn't find active code at  + + + ","line to_s ","Couldn't find active code at  + + ","Couldn't find active code at  + ","@state proceed ","Byebug  current_context jump ","Byebug  current_context ","@state context frame_file ","@state context ","file ! ","file to_i "," numeric? ","@match [] ","CommandProcessor  print_location_and_text ","line == ","@state context frame_line ","@state context frame_line + ","@match [] [] == ","@match [] [] ","@match [] to_i ","Bad line number:  + "," numeric? ! ","@match [] ! ","Byebug  context jump ","Byebug  context "," aprint ","@state location ","@state context frame_line +  to_s ","@match [] to_i  to_s ","@state context frame_@state context frame_file  ","@state context frame_@match []  ","@state context frame_file  ! ","@match []  ! ","@state context frame_file  to_i ","@match []  to_i ","@state context frame_line +  == ","@match [] to_i  == ","@state context frame_@state context frame_line +  ","@state context frame_@match [] to_i  ","@state context frame_@state context frame_line +  + ","@state context frame_@match [] to_i  + ","Bad @state context frame_line +  number:  + ","Bad @match [] to_i  number:  + "]}," Byebug JumpCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug JumpCommand numeric?":{"type":"method","name":"numeric?","children":[],"call":[" Float "]}," Byebug IRBCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug IRBCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug IRBCommand execute":{"type":"method","name":"execute","children":[],"call":[" trap ","@state previous_line= ","CommandProcessor  print_location_and_text ","@state context frame_line ","@state context ","@state context frame_file ","@state proceed ","@state context step_over ","@state frame_pos ","Command  settings [] ","Command  settings ","@state context step ","IRB  start_session "," get_binding ","-d == ","@match [] ","@match is_a? "," throw "," print ","@state interface kind_of? ","@state interface ","@state context step_into ","@state location ","@state previous_@state context frame_line = ","@state context frame_@state context frame_line  ","@state IRB  start_session ext frame_line ","@state IRB  start_session ext ","@state context frame_@state context frame_file  ","@state IRB  start_session ext frame_file ","@state IRB  start_session ext step_over ","@state IRB  start_session ext step ","@state IRB  start_session ext step_into "]}," Byebug IRBCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," IRB start_session":{"type":"method","name":"start_session","children":[],"call":[]}," IRB ExtendCommand Step execute":{"type":"method","name":"execute","children":[],"call":[]}," IRB ExtendCommand Next execute":{"type":"method","name":"execute","children":[],"call":[]}," IRB ExtendCommand Continue execute":{"type":"method","name":"execute","children":[],"call":[]}," Byebug InfoCommand help":{"type":"method","name":"help","children":[],"call":["subcmd short_help ","subcmd name ","args [] ","\n + ","subcmd long_help ","\n + + ","subsubcmd short_help ","try_subcmd name [] == ","try_subcmd name [] ","s size - ","s size ","try_subcmd name ","s size >= ","try_subcmd min ","InfoFileSubcommands  find ","file == ","subcmd short_help + ","Subcommands  find "," find "," format_subcmds "," print ","InfoCommand  description + ","InfoCommand  description "," subcmd short_help + "," subcmd short_help "," subcmd "," format_subcmd "," description + "," description ","Command  find "," args [] "," args ","subcmds [] ","subcmds first ","subcmds empty? ","args [] ubcmd args [] hort_help "," find  short_help ","subcmds first  short_help ","args [] ubcmd name "," find  name ","subcmds first  name ","argargs []  [] ","args [] ubcmd long_help "," find  long_help ","subcmds first  long_help ","args [] ubargs [] ubcmd args [] hort_help ","Command  find  short_help ","sub find  short_help ","subsubcmds first  short_help ","try_args [] ubcmd name [] == ","try_ find  name [] == ","try_subcmds first  name [] == ","try_args [] ubcmd name [] ","try_ find  name [] ","try_subcmds first  name [] ","args []  args [] ize - ","args []  args [] ize ","try_args [] ubcmd name ","try_ find  name ","try_subcmds first  name ","args []  args [] ize >= ","try_args [] ubcmd min ","try_ find  min ","try_subcmds first  min ","InfoFileSubcommandargs []   find ","args [] ubcmd args [] hort_help + "," find  short_help + ","subcmds first  short_help + ","Subcommandargs []   find "," format_args [] ubcmdargs []  "," format_ find s "," format_subcmds first s ","InfoCommand  deargs [] cription + ","InfoCommand  deargs [] cription "," args [] ubcmd args [] hort_help + ","  find  short_help + "," subcmds first  short_help + "," args [] ubcmd args [] hort_help ","  find  short_help "," subcmds first  short_help "," args [] ubcmd ","  find  "," subcmds first  "," format_args [] ubcmd "," format_ find  "," format_subcmds first  "," deargs [] cription + "," deargs [] cription "," argargs []  [] "," argargs []  ","args [] ubcmdargs []  [] "," find s [] ","subcmds first s [] ","args [] ubcmdargs []  firargs [] t "," find s first ","subcmds first s first ","args [] ubcmdargs []  empty? "," find s empty? ","subcmds first s empty? "]}," Byebug InfoCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug InfoCommand info_variables":{"type":"method","name":"info_variables","children":[],"call":[" var_class_self "," var_list "," binding ","obj instance_eval ","obj instance_variables "," print ","s gsub! ","s []= "," class settings [] - "," class settings [] "," class settings "," class ","s size > ","s size ","locals [] to_s ","locals [] ","locals [] inspect ","name =~ ","locals keys sort each ","locals keys sort ","locals keys ","locals []= ","@state context frame_self ","@state frame_pos ","@state context ","@state context frame_locals "," debug_eval "," errmsg ","@state context ! "," pad_with_dots "," print_hash "," bb_eval "," debug_eval  instance_eval "," bb_eval  instance_eval "," debug_eval  instance_variables "," bb_eval  instance_variables ","@state context frame_locals  [] to_s ","@state context frame_locals  [] ","@state context frame_locals  [] inspect ","@state context frame_locals  keys sort each ","@state context frame_locals  keys sort ","@state context frame_locals  keys ","@state context frame_locals  []= ","@state context frame_@state context frame_locals  "]}," Byebug InfoCommand info_global_variables":{"type":"method","name":"info_global_variables","children":[],"call":[" var_list "," global_variables "," errmsg ","@state context "," var_global "]}," Byebug InfoCommand info_stack":{"type":"method","name":"info_stack","children":[],"call":[" print_frame "," print ","idx == ","@state frame_pos ","(erange\n  (int 0)\n  (send\n    (send\n      (ivar :@state) :context) :stack_size)) each ","@state context stack_size ","@state context "," errmsg ","@state context ! "," print_backtrace "]}," Byebug InfoCommand info_program":{"type":"method","name":"info_program","children":[],"call":[" print ","unknown reason: %s\n % ","@state context stop_reason to_s ","@state context stop_reason ","@state context ","Byebug  last_exception inspect ","Byebug  last_exception ","@state context dead? ","@state context ! "," info_stop_reason "," + ","The program crashed.\n + "," errmsg "]}," Byebug InfoCommand info_locals":{"type":"method","name":"info_locals","children":[],"call":[" print ","s []= "," class settings [] - "," class settings [] "," class settings "," class ","s size > ","s size ","locals [] to_s ","locals [] ","locals [] inspect ","locals keys sort each ","locals keys sort ","locals keys ","@state context frame_locals ","@state frame_pos ","@state context "," errmsg "," pad_with_dots "," print_hash ","@state context frame_locals  [] to_s ","@state context frame_locals  [] ","@state context frame_locals  [] inspect ","@state context frame_locals  keys sort each ","@state context frame_locals  keys sort ","@state context frame_locals  keys ","@state context frame_@state context frame_locals  "]}," Byebug InfoCommand info_line":{"type":"method","name":"info_line","children":[],"call":[" print ","@state file ","@state line "," errmsg ","@state context "]}," Byebug InfoCommand info_instance_variables":{"type":"method","name":"info_instance_variables","children":[],"call":[" var_list ","obj instance_variables "," debug_eval "," print ","@state context "," errmsg "," bb_eval "," debug_eval  instance_variables "," bb_eval  instance_variables "]}," Byebug InfoCommand info_files":{"type":"method","name":"info_files","children":[],"call":[" print ","stat mtime ","path != ","LineCache  path ","LineCache  stat ","files uniq sort each ","files uniq sort ","files uniq ","SCRIPT_LINES__  keys ","stat == ","args [] ","LineCache  cached_files "," info_file_mtime "," info_file_path ","LineCache  stat  mtime ","LineCache  path  != ","LineCache  LineCache  path  ","LineCache  LineCache  stat  ","LineCache  cached_files  uniq sort each ","SCRIPT_LINES__  keys  uniq sort each ","LineCache  cached_files  uniq sort ","SCRIPT_LINES__  keys  uniq sort ","LineCache  cached_files  uniq ","SCRIPT_LINES__  keys  uniq ","LineCache  stat  == ","LineCache  cached_LineCache  cached_files  ","LineCache  cached_SCRIPT_LINES__  keys  "," info_file_LineCache  path  "]}," Byebug InfoCommand info_file":{"type":"method","name":"info_file","children":[],"call":[" print ","LineCache  sha1 ","(str \"all\") member? ","subcmd name ","stat mtime ","LineCache  stat "," columnize "," class settings [] "," class settings "," class ","breakpoints to_a sort ","breakpoints to_a ","LineCache  trace_line_numbers ","LineCache  size ","path != ","LineCache  path ","LineCache  cache ","Command  settings [] ","Command  settings ","LineCache  cached_script? ","LineCache  cached? "," errmsg "," find ","args [] "," info_files "," info_file_sha1 "," info_file_mtime "," info_file_breakpoints "," info_file_lines "," info_file_path ","Command  find "," send ","subcmd name != ","subcmd name == "," puts ","(str \"\\n\") gsub "," info_file_basic "," pr ","File  exist? ","@state file "," find  name ","Command  find  name ","LineCache  stat  mtime ","LineCache  LineCache  stat  ","LineCache  trace_line_numbers  to_a sort ","LineCache  trace_line_numbers  to_a ","LineCache  path  != ","LineCache  LineCache  path  "," info_args [] s "," info_args [] _sha1 "," info_args [] _mtime "," info_file_LineCache  trace_line_numbers  "," info_args [] _breakpoints "," info_file_LineCache  size  "," info_args [] _lines "," info_file_LineCache  path  "," info_args [] _path "," find  name != ","Command  find  name != "," find  name == ","Command  find  name == "," info_args [] _basic ","@LineCache  stat e file ","@state args []  "]}," Byebug InfoCommand info_display":{"type":"method","name":"info_display","children":[],"call":[" print ","d [] ","d [] != ","@state display ","@state display find ","@state context ","%3d: %s  %s\n % "," errmsg "]}," Byebug InfoCommand info_breakpoints":{"type":"method","name":"info_breakpoints","children":[],"call":[" print ","hits > ","b hit_count ","b expr ","b pos ","b source ","b enabled? ","b id ","b expr nil? ","brkpts each "," errmsg ","brkpts empty? ","indices member? ","brkpts select ","a to_i ","args map ","args empty? ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints empty? ","@state context "," info_breakpoint ","b hit_count  > "]}," Byebug InfoCommand info_args":{"type":"method","name":"info_args","children":[],"call":[" print ","s []= "," class settings [] - "," class settings [] "," class settings "," class ","s size > ","s size ","locals [] inspect ","locals [] ","args each ","@state context frame_args ","@state frame_pos ","@state context ","@state context frame_locals "," pad_with_dots "," errmsg ","args map ","args == ","Setting  [] - ","Setting  [] ","@state context frame_locals  [] inspect ","@state context frame_locals  [] ","@state context frame_args  each ","@state context frame_@state context frame_args  ","@state context frame_@state context frame_locals  ","@state context frame_args  map ","@state context frame_args  == "]}," Byebug InfoCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg "," send ","subcmd name "," find ","args shift ","@match [] split ","@match [] "," print ","subcmd short_help ","@match [] ! "," print_subcommands "," print_subcmds "," format_subcmds "," help ","InfoCommand  help ","Command  find ","@state context "," puts "," class help "," class "," find  name ","Command  find  name ","@match [] split  shift "," find  short_help ","Command  find  short_help "," print_ find s "," print_Command  find s "," format_ find s "," format_Command  find s "]}," Byebug InfoCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoFunctions info_catch":{"type":"method","name":"info_catch","children":[],"call":[" print ","Byebug  catchpoints each ","Byebug  catchpoints ","Byebug  catchpoints empty? ! ","Byebug  catchpoints empty? ","@state context ","exception is_a? "," puts "]}," Byebug HelpCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug HelpCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug HelpCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","help join ","help pop ","help last empty? ","help last ","help shift ","help first empty? ","help first ","l gsub ","help split map ","help split ","(send\n  (lvar :cmds) :map) join ","cmd help ","cmds map "," columnize "," class settings [] "," class settings "," class ","cmds flatten uniq sort ","cmds flatten uniq ","cmds flatten ","cmd help_command ","@state commands map ","@state commands "," errmsg ","args [] ","cmds empty? ","@match [] ","(send\n  (lvar :cmd) :help_command) flatten include? ","(send\n  (lvar :cmd) :help_command) flatten ","@state commands select ","@match [] split ","Command  settings [] ","Command  settings ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten ","cmd names ","help join + ","cmd names include? "," help_for "," subcommand "," command "," help_for_all ","Setting  [] "," puts ","c help ","cmd each "," pr ","cmd any? ","c names include? ","c names ","Command  commands select ","Command  commands "," class help ","subcmd help ","cmd subcommands find ","cmd subcommands ","cmd new ","c to_name == ","c to_name ","Byebug  commands find ","Byebug  commands "," help ","e message ","(send\n  (lvar :cmds) :map) join  join ","(send\n  (lvar :cmds) :map) join  pop ","(send\n  (lvar :cmds) :map) join  last empty? ","(send\n  (lvar :cmds) :map) join  last ","(send\n  (lvar :cmds) :map) join  shift ","(send\n  (lvar :cmds) :map) join  first empty? ","(send\n  (lvar :cmds) :map) join  first ","(send\n  (lvar :cmds) :map) join  split map ","(send\n  (lvar :cmds) :map) join  split ","(send\n  (lvar :cmds flatten uniq sort ) :map) join ","(send\n  (lvar :(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort ) :map) join ","(send\n  (lvar :cmd new s) :map) join ","cmd (send\n  (lvar :cmds) :map) join  ","cmd new  help ","cmds flatten uniq sort  map ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort  map ","cmd new s map ","cmds flatten uniq sort  flatten uniq sort ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort  flatten uniq sort ","cmd new s flatten uniq sort ","cmds flatten uniq sort  flatten uniq ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort  flatten uniq ","cmd new s flatten uniq ","cmds flatten uniq sort  flatten ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort  flatten ","cmd new s flatten ","cmd (send\n  (lvar :cmds) :map) join _command ","cmd new  help_command ","@match []  [] ","@match [] split  [] ","cmds flatten uniq sort  empty? ","(send\n  (send\n    (ivar :@state) :commands) :map) flatten uniq sort  empty? ","cmd new s empty? ","(send\n  (lvar :cmd) :(send\n  (lvar :cmds) :map) join _command) flatten include? ","(send\n  (lvar :cmd new ) :help_command) flatten include? ","(send\n  (lvar :cmd) :(send\n  (lvar :cmds) :map) join _command) flatten ","(send\n  (lvar :cmd new ) :help_command) flatten ","cmd new  names ","(send\n  (lvar :cmds) :map) join  join + ","cmd new  names include? "," (send\n  (lvar :cmds) :map) join _for "," (send\n  (lvar :cmds) :map) join _for_all ","c (send\n  (lvar :cmds) :map) join  ","cmd new  each ","cmd new  any? "," class (send\n  (lvar :cmds) :map) join  ","subcmd (send\n  (lvar :cmds) :map) join  ","cmd subcommands find  help ","subcmd new  help ","cmd new  subcommands find ","cmd new  subcommands ","cmd new  new "," (send\n  (lvar :cmds) :map) join  "]}," Byebug HelpCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug FrameCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug FrameCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug FrameCommand execute":{"type":"method","name":"execute","children":[],"call":[" adjust_frame ","@state context "," get_int ","@match [] ","@match [] ! "," print_frame ","@state frame_pos ","ListCommand  new execute ","ListCommand  new "," processor ","Setting  [] "," switch_to_frame "," errmsg "," print "," pr "," context frame to_hash "," context frame "," context "," get_pr_arguments ","@state frame ","@state @state context  ","@state frame_ get_int  "," @state context  frame to_hash "," @state context  frame "," @state context  "]}," Byebug FrameCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DownCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug DownCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug DownCommand execute":{"type":"method","name":"execute","children":[],"call":[" adjust_frame ","pos -@ "," get_int ","@match [] ","ListCommand  new execute ","ListCommand  new "," processor ","Setting  [] "," jump_frames "," errmsg "," parse_steps "," get_int  -@ "]}," Byebug DownCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug UpCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug UpCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug UpCommand execute":{"type":"method","name":"execute","children":[],"call":[" adjust_frame "," get_int ","@match [] ","ListCommand  new execute ","ListCommand  new "," processor ","Setting  [] "," jump_frames "," errmsg "," parse_steps "]}," Byebug UpCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug WhereCommand help":{"type":"method","name":"help","children":[],"call":["cmd == "]}," Byebug WhereCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug WhereCommand execute":{"type":"method","name":"execute","children":[],"call":[" truncated_callstack? ","Byebug  start_sentinal ","@state context "," print_frame "," print ","idx == ","@state frame_pos ","(erange\n  (int 0)\n  (send\n    (send\n      (ivar :@state) :context) :stack_size)) each ","@state context stack_size "," print_backtrace "]}," Byebug WhereCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug FrameFunctions truncated_callstack?":{"type":"method","name":"truncated_callstack?","children":[],"call":["f == ","cs [] any? ","cs [] ","recorded_size + ","cs [] != ","cs size > ","cs size ","fl == ","fl gsub! ","cs each_with_index ","context frame_line ","context frame_file ","context stack_size ","@state context frame_line ","@state context ","@state context frame_file ","@state context stack_size ","cs []  [] any? ","cs []  [] ","context stack_size  + ","@state context stack_size  + ","cs []  [] != ","cs []  size > ","cs []  size ","cs []  each_with_index "]}," Byebug FrameFunctions print_frame":{"type":"method","name":"print_frame","children":[],"call":[" print ","fmt % ","CommandProcessor  canonic_file ","Byebug  annotate to_i > ","Byebug  annotate to_i ","Byebug  annotate ","ENV  [] ","at line %s:%d\n % ","#%d  % ","path_components join ","path_components []= ","path_components size > ","path_components size ","file split ","Command  settings [] ","Command  settings ","context frame_class ","context frame_line ","context frame_file ","call_str size + + > "," class settings [] "," class settings "," class ","call_str size + + ","file_line size ","call_str size + ","frame_num size ","call_str size ","call_str empty? "," get_frame_call ","frame_str size + + > ","frame_str size + + ","frame_str size + ","frame_str size "," sprintf ","pos == ","@state frame_pos ","@state context frame_line ","@state context ","@state context frame_file "," c_frame? ","Setting  [] "," shortpath "," puts "," format ","CommandProcessor  canonic_path_components join  ","CommandProcessor  canonic_context frame_file  ","CommandProcessor  canonic_@state context frame_file  ","CommandProcessor  canonic_ shortpath  ","at context frame_line  %s:%d\n % ","at @state context frame_line  %s:%d\n % ","file split  join ","file split  []= ","file split  size > ","file split  size ","path_components join  split ","context frame_file  split ","@state context frame_file  split "," shortpath  split ","context frame_context frame_line  ","context frame_@state context frame_line  ","context frame_path_components join  ","context frame_context frame_file  ","context frame_@state context frame_file  ","context frame_ shortpath  "," get_frame_call  size + + > "," get_frame_call  size + + ","at line %s:%d\n %  size ","path_components join _line size ","context frame_file _line size ","@state context frame_file _line size "," shortpath _line size ","file_context frame_line  size ","file_@state context frame_line  size "," get_frame_call  size + ","#%d  %  size "," get_frame_call  size "," get_frame_call  empty? ","@state context frame_context frame_line  ","@state context frame_@state context frame_line  ","@state context frame_path_components join  ","@state context frame_context frame_file  ","@state context frame_@state context frame_file  ","@state context frame_ shortpath  "]}," Byebug FrameFunctions get_frame_call":{"type":"method","name":"get_frame_call","children":[],"call":["call_str []= ","call_str size > "," class settings [] - ","prefix size "," class settings [] "," class settings "," class ","call_str size ","%s,  % ","arg_info [] inspect ","arg_info [] ","arg_info size > ","arg_info size ","%s#%s,  % ","klass inspect [] + ","klass inspect [] ","klass inspect ","klass inspect size > ","20 + ","klass inspect size ","locals [] class ","locals [] ","Command  settings [] ","Command  settings ","args each_with_index ","call_str << ","args any? ","id id2name ","context frame_args_info ","Command  settings [] == ","Command  settings [] != ","context frame_locals ","context frame_args ","context frame_class ","context frame_method ","Command  settings [] - "," context frame_args_info "," context ","@state context frame_locals ","@state context ","@state context frame_args ","@state context frame_class ","@state context frame_method ","call_str [] + ","call_str [] ","max_call_str_size - ","frame_class + + ","frame_class + "," get_frame_args "," get_frame_class ","frame_block + + + ","frame_block + + ","frame_block + "," get_frame_block_and_method ","Setting  [] - ","Setting  [] ","call_str [] +  []= ","frame_class + +  []= ","frame_block + + +  []= ","call_str [] +  size > ","frame_class + +  size > ","frame_block + + +  size > ","call_str [] +  size ","frame_class + +  size ","frame_block + + +  size ","context frame_args_info  [] inspect "," context frame_args_info  [] inspect ","context frame_args_info  [] "," context frame_args_info  [] ","context frame_args_info  size > "," context frame_args_info  size > ","context frame_args_info  size "," context frame_args_info  size ","klass inspect [] +  inspect [] + ","locals [] class  inspect [] + ","context frame_class  inspect [] + ","@state context frame_class  inspect [] + ","klass inspect [] +  inspect [] ","locals [] class  inspect [] ","context frame_class  inspect [] ","@state context frame_class  inspect [] ","klass inspect [] +  inspect ","locals [] class  inspect ","context frame_class  inspect ","@state context frame_class  inspect ","klass inspect [] +  inspect size > ","locals [] class  inspect size > ","context frame_class  inspect size > ","@state context frame_class  inspect size > ","klass inspect [] +  inspect size ","locals [] class  inspect size ","context frame_class  inspect size ","@state context frame_class  inspect size ","context frame_locals  [] class ","@state context frame_locals  [] class ","context frame_locals  [] ","@state context frame_locals  [] ","context frame_args  each_with_index ","@state context frame_args  each_with_index ","call_str [] +  << ","frame_class + +  << ","frame_block + + +  << ","context frame_args  any? ","@state context frame_args  any? ","context frame_method  context frame_method 2name ","@state context frame_method  @state context frame_method 2name ","context frame_context frame_args _info ","context frame_@state context frame_args _info ","context  get_frame_args _info ","context frame_context frame_locals  ","context frame_@state context frame_locals  ","context frame_context frame_args  ","context frame_@state context frame_args  ","context  get_frame_args  ","context  get_frame_class  "," context frame_context frame_args _info "," context frame_@state context frame_args _info "," context  get_frame_args _info ","@state context frame_context frame_locals  ","@state context frame_@state context frame_locals  ","@state context frame_context frame_args  ","@state context frame_@state context frame_args  ","@state context  get_frame_args  ","@state context  get_frame_class  ","call_str [] +  [] + ","frame_class + +  [] + ","frame_block + + +  [] + ","call_str [] +  [] ","frame_class + +  [] ","frame_block + + +  [] ","max_call_str [] + _size - ","max_frame_class + + _size - ","max_frame_block + + + _size - ","Command  settings [] -  - ","Setting  [] -  - "," get_frame_class  + + "," get_frame_class  + "," get_frame_context frame_args  "," get_frame_@state context frame_args  "," get_ get_frame_args  "," get_ get_frame_class  "]}," Byebug FrameFunctions adjust_frame":{"type":"method","name":"adjust_frame","children":[],"call":[" print_frame ","@state frame_pos ","@state line= ","context frame_line ","@state file= ","context frame_file ","@state frame_pos= ","@state previous_line= ","@state frame_pos != "," errmsg ","abs_frame_pos < ","abs_frame_pos >= ","context stack_size ","@state frame_pos + ","context stack_size + ","frame_pos < ","context != ","@state context ","@state context frame_line ","@state context frame_file ","ListCommand  new execute ","ListCommand  new ","@state context stack_size "," navigate_to_frame "," c_frame? "," switch_to_frame ","Context  stack_size ","@state prev_line= ","Setting  [] ","@state frame ","@state frame= "," pr ","abs_frame < ","abs_frame >= ","@state c_frame? ","@state frame_pos +  < ","context stack_size +  < "," navigate_to_frame  < "," switch_to_frame  < "," navigate_to_frame _pos < "," switch_to_frame _pos < ","@state frame_pos +  >= ","context stack_size +  >= "," navigate_to_frame  >= "," switch_to_frame  >= "," navigate_to_frame _pos >= "," switch_to_frame _pos >= "]}," Byebug FinishCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug FinishCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug FinishCommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","@state frame_pos= ","@state context stop_frame= ","@state context "," get_int ","max_frame - ","@match [] ","@state frame_pos ","@match [] empty? ","@match [] ! ","@state context stack_size - ","@state context stack_size ","@state context step_out "," processor proceed! "," processor "," context frame= "," context "," context step_out "," context frame pos + "," context frame pos "," context frame ","n_frames zero? "," errmsg "," max_frames - "," max_frames ","Context  stack_size - ","Context  stack_size ","@state frame_pos + ","n_frames == ","max_frames - ","@state frame= ","@state frame + ","@state frame ","@state  get_int = ","@state @state frame_pos = ","@state context stack_size -  - ","Context  stack_size -  - ","@state  get_int  ","@state @state frame_pos  "," get_int  zero? "," @state context stack_size - s - "," Context  stack_size - s - "," Context  stack_size -  - "," @state context stack_size -  - "," @state context stack_size - s "," Context  stack_size - s "," Context  stack_size -  "," @state context stack_size -  ","@state  get_int  + ","@state @state frame_pos  + "," get_int  == ","@state context stack_size - s - ","Context  stack_size - s - "]}," Byebug FinishCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PSCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug PSCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug PSCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$! message "," print ","out string ","PP  pp "," columnize "," class settings [] "," class settings "," class ","vals sort! ","item to_s ","vals map ","vals is_a? "," debug_eval ","@match post_match "," run_with_binding ","StringIO  new ","Command  settings [] ","Command  settings "," bb_warning_eval "," bb_eval ","Setting  [] ","$ERROR_INFO message "," puts ","res map sort! ","res map ","res is_a? "," eval_with_setting ","StringIO  new  puts ","StringIO  new  string "," debug_eval  sort! "," bb_warning_eval  sort! "," bb_eval  sort! "," debug_eval  map "," bb_warning_eval  map "," bb_eval  map "," debug_eval  is_a? "," bb_warning_eval  is_a? "," bb_eval  is_a? "," eval_with_setting  map sort! "," eval_with_setting  map "," eval_with_setting  is_a? "]}," Byebug PSCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PutLCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug PutLCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug PutLCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$! message "," print ","out string ","PP  pp "," columnize "," class settings [] "," class settings "," class ","item to_s ","vals map ","vals is_a? "," debug_eval ","@match post_match "," run_with_binding ","StringIO  new ","Command  settings [] ","Command  settings "," bb_warning_eval "," bb_eval ","Setting  [] ","$ERROR_INFO message "," puts ","res map ","res is_a? "," eval_with_setting ","StringIO  new  puts ","StringIO  new  string "," debug_eval  map "," bb_warning_eval  map "," bb_eval  map "," debug_eval  is_a? "," bb_warning_eval  is_a? "," bb_eval  is_a? "," eval_with_setting  map "," eval_with_setting  is_a? "]}," Byebug PutLCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PPCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug PPCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug PPCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$! message "," print ","out string ","PP  pp "," debug_eval ","@match post_match "," run_with_binding ","StringIO  new "," bb_warning_eval "," bb_eval ","Command  settings [] ","Command  settings ","Setting  [] ","$ERROR_INFO message "," puts ","StringIO  new  puts ","StringIO  new  string "]}," Byebug PPCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EvalCommand help":{"type":"method","name":"help","children":[],"call":["cmd == "]}," Byebug EvalCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug EvalCommand execute":{"type":"method","name":"execute","children":[],"call":[" print "," debug_eval inspect "," debug_eval "," run_with_binding ","@match post_match ","$! message ","$! class "," bb_warning_eval inspect "," bb_warning_eval "," bb_eval inspect "," bb_eval ","Command  settings [] ","Command  settings ","Setting  [] "," puts ","$ERROR_INFO message ","$ERROR_INFO class "," pr ","res inspect "," eval_with_setting "," eval_with_setting  inspect "]}," Byebug EvalCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EvalCommand match":{"type":"method","name":"match","children":[],"call":[]}," Byebug EvalFunctions run_with_binding":{"type":"method","name":"run_with_binding","children":[],"call":[" eval ","@state interface "," get_binding ","@state context "," get_ get_binding  "]}," Byebug DisableCommand help":{"type":"method","name":"help","children":[],"call":["subcmd short_help ","subcmd name ","args [] ","\n + ","subcmd long_help ","subcmd short_help + ","try_subcmd name [] == ","try_subcmd name [] ","s size - ","s size ","try_subcmd name ","s size >= ","try_subcmd min ","Subcommands  find "," find ","\\n + "," format_subcmds ","DisableCommand  description + ","DisableCommand  description ","args [] ubcmd args [] hort_help "," find  short_help ","args [] ubcmd name "," find  name ","argargs []  [] ","args [] ubcmd long_help "," find  long_help ","args [] ubcmd args [] hort_help + "," find  short_help + ","try_args [] ubcmd name [] == ","try_ find  name [] == ","try_args [] ubcmd name [] ","try_ find  name [] ","args []  args [] ize - ","args []  args [] ize ","try_args [] ubcmd name ","try_ find  name ","args []  args [] ize >= ","try_args [] ubcmd min ","try_ find  min ","Subcommandargs []   find "," format_args [] ubcmdargs []  "," format_ find s ","Diargs [] ableCommand  deargs [] cription + ","Diargs [] ableCommand  deargs [] cription "]}," Byebug DisableCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug DisableCommand disable_display":{"type":"method","name":"disable_display","children":[],"call":[" enable_disable_display "]}," Byebug DisableCommand disable_breakpoints":{"type":"method","name":"disable_breakpoints","children":[],"call":[" enable_disable_breakpoints "]}," Byebug DisableCommand execute":{"type":"method","name":"execute","children":[],"call":[" send ","args unshift ","subcmd name "," find ","args shift ","@match [] split ","@match [] "," errmsg ","\"disable\" must be followed \"display\", \"breakpoints\" + ","@match [] ! ","Command  find ","@match [] split  unshift "," find  name ","Command  find  name ","@match [] split  shift "]}," Byebug DisableCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EnableCommand help":{"type":"method","name":"help","children":[],"call":["subcmd short_help ","subcmd name ","args [] ","\n + ","subcmd long_help ","subcmd short_help + ","try_subcmd name [] == ","try_subcmd name [] ","s size - ","s size ","try_subcmd name ","s size >= ","try_subcmd min ","Subcommands  find "," find ","\\n + "," format_subcmds ","EnableCommand  description + ","EnableCommand  description "," args [] "," args ","args [] ubcmd args [] hort_help "," find  short_help ","args [] ubcmd name "," find  name ","argargs []  [] ","args [] ubcmd long_help "," find  long_help ","args [] ubcmd args [] hort_help + "," find  short_help + ","try_args [] ubcmd name [] == ","try_ find  name [] == ","try_args [] ubcmd name [] ","try_ find  name [] ","args []  args [] ize - ","args []  args [] ize ","try_args [] ubcmd name ","try_ find  name ","args []  args [] ize >= ","try_args [] ubcmd min ","try_ find  min ","Subcommandargs []   find "," format_args [] ubcmdargs []  "," format_ find s ","EnableCommand  deargs [] cription + ","EnableCommand  deargs [] cription "," argargs []  [] "," argargs []  "]}," Byebug EnableCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug EnableCommand enable_display":{"type":"method","name":"enable_display","children":[],"call":[" enable_disable_display "]}," Byebug EnableCommand enable_breakpoints":{"type":"method","name":"enable_breakpoints","children":[],"call":[" enable_disable_breakpoints "]}," Byebug EnableCommand execute":{"type":"method","name":"execute","children":[],"call":[" send ","args unshift ","subcmd name "," find ","args shift ","@match [] split ","@match [] "," errmsg ","\"enable\" must be followed \"display\", \"breakpoints\" + ","@match [] ! ","Command  find ","@match [] split  unshift "," find  name ","Command  find  name ","@match [] split  shift "]}," Byebug EnableCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EnableDisableFunctions enable_disable_display":{"type":"method","name":"enable_disable_display","children":[],"call":["@state display [] []= ","Enable == ","@state display [] ","pos - ","@state display "," get_int ","@state display size ","args each "," errmsg ","0 == ","enable == ","err nil? "," pr "," get_int  - "]}," Byebug EnableDisableFunctions enable_disable_breakpoints":{"type":"method","name":"enable_disable_breakpoints","children":[],"call":["b enabled= ","Enable == "," errmsg ","b expr "," syntax_valid? ","b id == ","b id ","breakpoints each "," get_int ","args each ","0 == ","b id > ","breakpoints inject ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","enable == "," syntax_valid? ! ","selected_breakpoints each ","selected_ids include? ","all_breakpoints select ","selected_ids << ","all_breakpoints last id ","all_breakpoints last ","args ! ","Byebug  breakpoints empty? ","args empty? ","Breakpoint  none? "," pr ","Byebug  breakpoints sort_by  select ","Byebug  breakpoints sort_by  last id ","Byebug  breakpoints sort_by  last "]}," Byebug Edit help":{"type":"method","name":"help","children":[],"call":[]}," Byebug Edit help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug Edit execute":{"type":"method","name":"execute","children":[],"call":[" errmsg "," system ","File  readable? ","ENV  [] ","@match [] ","@pos_match captures ","(str \"([^:]+)[:]([0-9]+)\") match ","@state line ","@state file ","@state context ","@match [] strip empty? ","@match [] strip ","@match [] ! ","File  exist? ","(str \"([^:]+)[:]([0-9]+)\") match  captures ","@state @state line  ","@state @state file  ","@state @match []  "]}," Byebug Edit regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DeleteDisplayCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug DeleteDisplayCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug DeleteDisplayCommand execute":{"type":"method","name":"execute","children":[],"call":["d []= ","@state display "," confirm "," errmsg ","@state display [] []= ","@state display [] ","pos - "," get_int ","@match [] "," get_int  - ","@match []  - "]}," Byebug DeleteDisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisplayCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug DisplayCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug DisplayCommand execute":{"type":"method","name":"execute","children":[],"call":[" print_display_expressions "," display_expression ","@match [] ","Byebug  displays push ","Byebug  displays ","@state display push ","@state display "]}," Byebug DisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisplayCommand always_run":{"type":"method","name":"always_run","children":[],"call":[]}," Byebug AddDisplayCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AddDisplayCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug AddDisplayCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_expression "," print ","@state display size ","@state display ","@state display push ","@match [] "," puts "," display_@match [] ression "]}," Byebug AddDisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisplayFunctions print_display_expressions":{"type":"method","name":"print_display_expressions","children":[],"call":[" display_expression ","d [] "," print ","@state display "," puts ","@state display each "]}," Byebug DisplayFunctions active_display_expressions?":{"type":"method","name":"active_display_expressions?","children":[],"call":["(send\n  (send\n    (ivar :@state) :display) :select) size > ","(send\n  (send\n    (ivar :@state) :display) :select) size ","d [] ","@state display select ","@state display "]}," Byebug DisplayFunctions display_expression":{"type":"method","name":"display_expression","children":[],"call":[" print "," debug_silent_eval to_s "," debug_silent_eval "," debug_silent_eval inspect "," bb_warning_eval inspect "," bb_warning_eval "]}," Byebug InterruptCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug InterruptCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug InterruptCommand execute":{"type":"method","name":"execute","children":[],"call":["context interrupt ","Byebug  thread_context ","Thread  main ","Byebug  interrupt_last ","Byebug  thread_context interrupt ","Byebug  start ","Byebug  thread_context  interrupt ","Byebug  thread_Byebug  thread_context  ","Byebug  thread_Byebug  thread_context  interrupt "]}," Byebug InterruptCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug RestartCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug RestartCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug RestartCommand execute":{"type":"method","name":"execute","children":[],"call":[" print "," exec "," p ","argv join ","Command  settings [] ","Command  settings "," errmsg ","(send\n  (send\n    (const nil :Command) :settings) :[]\n  (sym :argv)) ! ","(const\n  (const nil :Byebug) :PROG_SCRIPT) + ","@match [] split ","@match [] ","Dir  chdir "," prog_script ","$: join ","Gem  ruby ","File  executable? ! ","File  executable? ","(const\n  (const nil :Byebug) :RDEBUG_SCRIPT) ! ","File  exist? ! ","File  exist? ","File  expand_path ","(const\n  (const nil :Byebug) :PROG_SCRIPT) ! ","argv compact join ","argv compact ","Command  settings [] compact shelljoin ","Command  settings [] compact "," require ","(const\n  (const nil :Byebug) :BYEBUG_SCRIPT) ! ","Kernel  exec "," puts "," pr ","cmd shelljoin ","@match [] shellsplit "," prepend_ruby_bin "," prepend_byebug_bin ","ARGV  compact shelljoin ","ARGV  compact ","$LOAD_PATH join ","Byebug  debugged_program ","$ARGV compact shelljoin ","$ARGV compact ","Gem  bin_path ","Byebug  mode == ","Byebug  mode ","argv shelljoin ","argv unshift "," bin_file ","Command  settings []  join ","(const\n  (const nil :Byebug) :PROG_SCRIPT) +  join ","(send\n  (send\n    (const nil :Command) :settings) :[]\n  (sym :Command  settings [] )) ! ","(send\n  (send\n    (const nil :Command) :settings) :[]\n  (sym :(const\n  (const nil :Byebug) :PROG_SCRIPT) + )) ! "," Byebug  debugged_program _script ","Command  settings []  compact join ","(const\n  (const nil :Byebug) :PROG_SCRIPT) +  compact join ","Command  settings []  compact ","(const\n  (const nil :Byebug) :PROG_SCRIPT) +  compact "," prepend_ruby_bin  shelljoin "," prepend_byebug_bin  shelljoin ","Byebug  debugged_Byebug  debugged_program ram ","Command  settings []  shelljoin ","(const\n  (const nil :Byebug) :PROG_SCRIPT) +  shelljoin ","Command  settings []  unshift ","(const\n  (const nil :Byebug) :PROG_SCRIPT) +  unshift "]}," Byebug RestartCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ContinueCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ContinueCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ContinueCommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","Byebug  add_breakpoint "," errmsg ","LineCache  trace_line_numbers member? ","LineCache  trace_line_numbers "," get_int ","@match [] ","File  expand_path ","@state file ","@state context dead? ! ","@state context dead? ","@state context ","Byebug  stop ","Byebug  stoppable? "," processor proceed! "," processor ","Breakpoint  add "," pr ","Breakpoint  potential_line? "," frame file "," frame "," unconditionally? "," modifier "," until_line? ","Byebug  mode= ","LineCache  trace_ get_int s member? ","LineCache  trace_ get_int s "]}," Byebug ContinueCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ConditionCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ConditionCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug ConditionCommand execute":{"type":"method","name":"execute","children":[],"call":["b expr= ","@match [] ","@match [] empty? ","b id == ","b id ","breakpoints each "," get_int "," print ","0 == ","b id > ","breakpoints inject ","Byebug  breakpoints sort_by ","Byebug  breakpoints "," errmsg ","@match [] ! ","(send\n  (lvar :breakpoints) :select) first ","breakpoints select ","ConditionCommand  help ","breakpoint expr= "," pr "," syntax_valid? ","breakpoints find ","breakpoints empty? "," puts "," help ","breakpoints last id ","breakpoints last ","breakpoints any? "," class help "," class ","(send\n  (lvar :breakpoints) :select) first  expr= ","(send\n  (lvar :breakpoints) :select) first  id == ","(send\n  (lvar :breakpoints) :select) first  id ","(send\n  (lvar :breakpoints) :select) first reakpoints each ","Byebug  breakpoints sort_by  each ","(send\n  (lvar :breakpoints) :select) first s each ","(send\n  (lvar :breakpoints) :select) first  id > ","(send\n  (lvar :breakpoints) :select) first reakpoints inject ","Byebug  breakpoints sort_by  inject ","(send\n  (lvar :breakpoints) :select) first s inject ","Bye(send\n  (lvar :breakpoints) :select) first ug  (send\n  (lvar :breakpoints) :select) first reakpoints sort_(send\n  (lvar :breakpoints) :select) first y ","Byebug  Byebug  breakpoints sort_by  sort_by ","Byebug  (send\n  (lvar :breakpoints) :select) first s sort_by ","Bye(send\n  (lvar :breakpoints) :select) first ug  (send\n  (lvar :breakpoints) :select) first reakpoints ","Byebug  Byebug  breakpoints sort_by  ","Byebug  (send\n  (lvar :breakpoints) :select) first s ","(send\n  (lvar :(send\n  (lvar :breakpoints) :select) first reakpoints) :select) first ","(send\n  (lvar :Byebug  breakpoints sort_by ) :select) first ","(send\n  (lvar :(send\n  (lvar :breakpoints) :select) first s) :select) first ","(send\n  (lvar :breakpoints) :select) first reakpoints select ","Byebug  breakpoints sort_by  select ","(send\n  (lvar :breakpoints) :select) first s select ","(send\n  (lvar :breakpoints) :select) first reakpoint expr= ","(send\n  (lvar :breakpoints) :select) first reakpoints find ","Byebug  breakpoints sort_by  find ","(send\n  (lvar :breakpoints) :select) first s find ","(send\n  (lvar :breakpoints) :select) first reakpoints empty? ","Byebug  breakpoints sort_by  empty? ","(send\n  (lvar :breakpoints) :select) first s empty? ","(send\n  (lvar :breakpoints) :select) first reakpoints last id ","Byebug  breakpoints sort_by  last id ","(send\n  (lvar :breakpoints) :select) first s last id ","(send\n  (lvar :breakpoints) :select) first reakpoints last ","Byebug  breakpoints sort_by  last ","(send\n  (lvar :breakpoints) :select) first s last ","(send\n  (lvar :breakpoints) :select) first reakpoints any? ","Byebug  breakpoints sort_by  any? ","(send\n  (lvar :breakpoints) :select) first s any? "]}," Byebug ConditionCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug CatchCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug CatchCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug CatchCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg "," print ","Byebug  catchpoints delete ","Byebug  catchpoints ","Byebug  catchpoints member? ","@match [] ","@match [] != ","Byebug  add_catchpoint "," debug_eval "," get_binding ","@state context ","Byebug  catchpoints clear "," confirm ","off == ","@match [] ! "," info_catch ","excn ! "," match [] "," match "," remove "," pr "," cmd ","@match [] == "," add "," clear "," info "," bb_eval "," puts ","cmd == ","ex is_a? "," get_ get_binding  ","@state cont@match [] t ","@match []  ! ","@match [] cn ! "," @match []  ","@match []  == ","@match []  is_a? "]}," Byebug CatchCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DeleteBreakpointCommand help":{"type":"method","name":"help","children":[],"call":[]}," Byebug DeleteBreakpointCommand help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug DeleteBreakpointCommand execute":{"type":"method","name":"execute","children":[],"call":["Byebug  breakpoints clear ","Byebug  breakpoints "," confirm "," errmsg ","Byebug  remove_breakpoint "," get_int ","brkpts split each ","brkpts split ","@match [] ","@state context ","@match []  split each ","@match []  split "]}," Byebug DeleteBreakpointCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug AddBreakpoint help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AddBreakpoint help_command":{"type":"method","name":"help_command","children":[],"call":[]}," Byebug AddBreakpoint execute":{"type":"method","name":"execute","children":[],"call":[" print ","method to_s ","b id ","Byebug  add_breakpoint ","line intern ","b enabled= "," errmsg "," syntax_valid? ","line to_s ","@state context "," confirm ","No source file named %s\n % ","LineCache  trace_line_numbers member? ","LineCache  trace_line_numbers ","line > ","LineCache  size ","LineCache  cache ","Command  settings [] ","Command  settings ","line to_i ","line =~ ","File  expand_path ","file index "," throw ","klass name ","klass kind_of? "," debug_silent_eval ","line !~ ","@state line to_s ","@state line ","line nil? ","File  basename ","@state file ","file nil? ","expr !~ ","@match captures ","@match [] ","CommandProcessor  canonic_file ","AddBreakpoint  help ","AddBreakpoint  names include? ","AddBreakpoint  names ","line intern  to_s ","Byebug  add_breakpoint  id ","ByeByebug  add_breakpoint ug  add_Byebug  add_breakpoint reakpoint ","line to_i  intern ","@state line to_s  intern ","Byebug  add_breakpoint  enaByebug  add_breakpoint led= ","line to_i  to_s ","@state line to_s  to_s ","No source File  expand_path  named %s\n % ","No source File  basename  named %s\n % ","LineCache  trace_line_numByebug  add_breakpoint ers memByebug  add_breakpoint er? ","LineCache  trace_line to_i _numbers member? ","LineCache  trace_@state line to_s _numbers member? ","LineCache  trace_line_numByebug  add_breakpoint ers ","LineCache  trace_line to_i _numbers ","LineCache  trace_@state line to_s _numbers ","line to_i  > ","@state line to_s  > ","line to_i  to_i ","@state line to_s  to_i ","line to_i  =~ ","@state line to_s  =~ ","File  expand_path  index ","File  basename  index "," debug_silent_eval  name "," debug_silent_eval  kind_of? "," deByebug  add_breakpoint ug_silent_eval ","line to_i  !~ ","@state line to_s  !~ ","@state line to_i  to_s ","@state @state line to_s  to_s ","@state line to_i  ","@state @state line to_s  ","line to_i  nil? ","@state line to_s  nil? ","File  Byebug  add_breakpoint asename ","@state File  expand_path  ","@state File  basename  ","File  expand_path  nil? ","File  basename  nil? ","CommandProcessor  canonic_File  expand_path  ","CommandProcessor  canonic_File  basename  "]}," Byebug AddBreakpoint regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug settings":{"type":"method","name":"settings","children":[],"call":[]}," Byebug Command get_context":{"type":"method","name":"get_context","children":[],"call":["c thnum == ","c thnum ","Byebug  contexts find ","Byebug  contexts "]}," Byebug Command line_at":{"type":"method","name":"line_at","children":[],"call":["Byebug  line_at "]}," Byebug Command get_binding":{"type":"method","name":"get_binding","children":[],"call":["@state context frame_binding ","@state frame_pos ","@state context "]}," Byebug Command debug_silent_eval":{"type":"method","name":"debug_silent_eval","children":[],"call":[" eval "," get_binding "]}," Byebug Command debug_eval":{"type":"method","name":"debug_eval","children":[],"call":[" throw "," print ","e message ","e class ","e to_s sub ","e to_s ","at shift "," eval ","Command  settings [] ","Command  settings "," eval  shift "," e eval  "]}," Byebug Command confirm":{"type":"method","name":"confirm","children":[],"call":["@state confirm == ","@state confirm "]}," Byebug Command print":{"type":"method","name":"print","children":[],"call":["@state print "]}," Byebug Command errmsg":{"type":"method","name":"errmsg","children":[],"call":["@state errmsg "]}," Byebug Command match":{"type":"method","name":"match","children":[],"call":[" regexp match "," regexp "]}," Byebug Command initialize":{"type":"method","name":"initialize","children":[],"call":[" match "]}," Byebug Command register_setting_set":{"type":"method","name":"register_setting_set","children":[],"call":[" settings_map [] []= "," settings_map [] "," settings_map "]}," Byebug Command register_setting_get":{"type":"method","name":"register_setting_get","children":[],"call":[" settings_map [] []= "," settings_map [] "," settings_map "]}," Byebug Command register_setting_var":{"type":"method","name":"register_setting_var","children":[],"call":[" class_variable_set "," register_setting_set "," class_variable_get "," register_setting_get "]}," Byebug Command settings":{"type":"method","name":"settings","children":[],"call":["map [] [] call ","map [] [] ","map [] "," raise ","map has_key? ","c send ","c funcall ","c respond_to? "," settings_map ","Object  new "," settings_map  [] [] call "," settings_map  [] [] "," settings_map  [] "," settings_map  has_key? "," settings_ settings_map  "]}," Byebug Command settings_map":{"type":"method","name":"settings_map","children":[],"call":[]}," Byebug Command options":{"type":"method","name":"options","children":[],"call":[]}," Byebug Command method_missing":{"type":"method","name":"method_missing","children":[],"call":["@options [] ","@options has_key? ","@options []= ","args first ","1 intern ","meth to_s =~ ","meth to_s "," options [] "," options "," options has_key? "," options []= "]}," Byebug Command load_commands":{"type":"method","name":"load_commands","children":[],"call":[" include ","(send\n  (send\n    (send\n      (const nil :Byebug) :constants) :grep\n    (regexp\n      (str \"Functions$\")\n      (regopt))) :map) each ","Byebug  const_get ","Byebug  constants grep map ","Byebug  constants grep ","Byebug  constants "," require ","file =~ ","Dir  [] each ","Dir  [] ","File  join ","File  dirname ","Dir  glob each ","Dir  glob ","File  expand_path "]}," Byebug Command inherited":{"type":"method","name":"inherited","children":[],"call":[" commands << "," commands ","klass options []= ","klass options ","klass options [] nil? ","klass options [] ","DEF_OPTIONS  each "]}," Byebug Command commands":{"type":"method","name":"commands","children":[],"call":[]}," Byebug Command find":{"type":"method","name":"find","children":[],"call":["try_subcmd name [] == ","try_subcmd name [] ","param size - ","param size ","try_subcmd name ","param size >= ","try_subcmd min ","param downcase! ","subcmd name [] == ","subcmd name [] ","str size - ","str size ","subcmd name ","str size >= ","subcmd min ","subcmds each ","str downcase! "]}," Byebug VarFunctions var_global":{"type":"method","name":"var_global","children":[],"call":[" var_list ","(sym :$=) include? "," global_variables reject "," global_variables ","(sym :$IGNORECASE) include? "]}," Byebug Command print_subcommands":{"type":"method","name":"print_subcommands","children":[],"call":[" print ","subcmd short_help ","subcmd name "," errmsg "," class name chomp downcase "," class name chomp "," class name "," class "]}," Byebug CommandFunctions pad_with_dots":{"type":"method","name":"pad_with_dots","children":[],"call":["string []= ","Command  settings [] - ","Command  settings [] ","Command  settings ","string size > ","string size "]}," Byebug FrameFunctions print_backtrace":{"type":"method","name":"print_backtrace","children":[],"call":[" print_frame "," print ","idx == ","@state frame_pos ","(erange\n  (int 0)\n  (send\n    (send\n      (ivar :@state) :context) :stack_size)) each ","@state context stack_size ","@state context ","(erange\n  (int 0)\n  (lvar :realsize)) each "," errmsg ","@state context stack_size != ","(send\n  (send nil :caller) :drop_while) size ","e [] "," caller drop_while "," caller ","(send\n  (block\n    (send\n      (send nil :caller_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","IGNORED_FILES  include? ! ","IGNORED_FILES  include? ","l path ","(send\n  (send nil :caller_locations) :drop_while) take_while ","l path == "," caller_locations drop_while "," caller_locations ","size != ","(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (send\n    (send\n      (const nil :Thread) :current) :backtrace_locations) :drop_while) take_while ","Thread  current backtrace_locations drop_while ","Thread  current backtrace_locations ","Thread  current ","Byebug  post_mortem? ","(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations\n        (int 1)) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (send\n    (send\n      (const nil :Thread) :current) :backtrace_locations\n    (int 1)) :drop_while) take_while ","Context  real_stack_size ","calcedsize != ","@state context calced_stack_size ","Context  stack_size ","(erange\n  (int 0)\n  (lvar :stacksize)) each ","(erange\n  (int 0)\n  (send\n    (send\n      (ivar :@state) :context) :stack_@state context stack_size )) each ","@state context stack_@state context stack_size  ","(erange\n  (int 0)\n  (lvar :(send\n  (send nil :caller) :drop_while) size )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (block\n    (send\n      (send nil :caller_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size )) each ","(erange\n  (int 0)\n  (lvar :@state context stack_size )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations\n        (int 1)) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size )) each ","(erange\n  (int 0)\n  (lvar :Context  real_stack_size )) each ","(erange\n  (int 0)\n  (lvar :Context  stack_size )) each ","(erange\n  (int 0)\n  (lvar :real@state context stack_size )) each ","@state context stack_@state context stack_size  != ","(send\n  (send nil :caller) :drop_while) @state context stack_size  ","(send\n  (block\n    (send\n      (send nil :caller_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) @state context stack_size  ","@state context stack_size  != ","(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) @state context stack_size  ","(send\n  (block\n    (send\n      (send\n        (send\n          (const nil :Thread) :current) :backtrace_locations\n        (int 1)) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send\n        (const nil :IGNORED_FILES) :include?\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) @state context stack_size  ","Context  real_stack_@state context stack_size  ","calced@state context stack_size  != ","@state context calced_stack_size  != ","@state context calced_stack_@state context stack_size  ","Context  stack_@state context stack_size  ","(erange\n  (int 0)\n  (lvar :stack@state context stack_size )) each "]}," Byebug Command print_subcmds":{"type":"method","name":"print_subcmds","children":[],"call":[" print ","subcmd short_help ","subcmd name "," errmsg "," class name [] downcase "," class name [] "," class name "," class "]}," Byebug Context frame_args":{"type":"method","name":"frame_args","children":[],"call":[" print ","e message ","e class "," eval "," frame_binding "," ruby_frame_args "," c_frame_args ","bind nil? "," frame_ frame_binding ing "," frame_binding  nil? "]}," Byebug ListCommand set_line_range":{"type":"method","name":"set_line_range","children":[],"call":["(int 1) max ","e - + ","e - ","e > ","b + - ","b + "," errmsg ","b > ","b to_i - ","listsize / ","b to_i ","e to_i ","@match [] split ","@match [] ","@state line - ","@state line ","@state previous_line= ","@match [] == ","@state previous_line ","@state previous_line - ","@state previous_line > ","@state previous_line + ","(or\n  (send\n    (ivar :@match) :[]\n    (int 1))\n  (send\n    (ivar :@match) :[]\n    (int 2))) ! ","@match ! ","e to_i  - + ","e to_i  - ","e to_i  > ","(int 1) max  + - ","e - +  + - ","b to_i -  + - ","b to_i  + - ","@state line -  + - ","@state previous_line +  + - ","(int 1) max  + ","e - +  + ","b to_i -  + ","b to_i  + ","@state line -  + ","@state previous_line +  + "," e to_i rrmsg ","(int 1) max  > ","e - +  > ","b to_i -  > ","b to_i  > ","@state line -  > ","@state previous_line +  > ","(int 1) max  to_i - ","e - +  to_i - ","b to_i -  to_i - ","b to_i  to_i - ","@state line -  to_i - ","@state previous_line +  to_i - ","listsize to_i  / ","(int 1) max  to_i ","e - +  to_i ","b to_i -  to_i ","b to_i  to_i ","@state line -  to_i ","@state previous_line +  to_i ","e to_i  to_i ","@state to_i  line to_i  - ","@state to_i  line to_i  ","@state to_i  pre to_i vious_line to_i = ","@state to_i  pre to_i vious_line to_i  ","@state to_i  pre to_i vious_line to_i  - ","@state to_i  pre to_i vious_line to_i  > ","@state to_i  pre to_i vious_line to_i  + ","(or\n  (se to_i nd\n    (ivar :@match) :[]\n    (int 1))\n  (se to_i nd\n    (ivar :@match) :[]\n    (int 2))) ! "]}," Byebug InfoCommand info_thread":{"type":"method","name":"info_thread","children":[],"call":[" print_frame "," print ","(erange\n  (int 0)\n  (send\n    (lvar :c) :stack_size)) each ","c stack_size ","c ignored? ! ","c ignored? "," display_context ","verbose ! "," parse_thread_num ","args [] "," info_thread_preamble "," info_threads ","(erange\n  (int 0)\n  (send\n    (lvar : parse_thread_num ) :sta parse_thread_num k_size)) ea parse_thread_num h "," parse_thread_num  sta parse_thread_num k_size "," parse_thread_num  ignored? ! "," parse_thread_num  ignored? "," display_ parse_thread_num ontext "]}," Byebug InfoCommand info_threads":{"type":"method","name":"info_threads","children":[],"call":[" print_frame "," print ","(erange\n  (int 0)\n  (send\n    (lvar :c) :stack_size)) each ","c stack_size ","c ignored? ! ","c ignored? "," display_context ","verbose ! ","(send\n  (send\n    (const nil :Byebug) :contexts) :sort_by) each ","c thnum ","Byebug  contexts sort_by ","Byebug  contexts "," info_thread_preamble ","args [] "]}," Byebug InfoCommand info_thread_preamble":{"type":"method","name":"info_thread_preamble","children":[],"call":["verbose == ","subcmd name "," errmsg "," find ","@state context ! ","@state context "," find  name "]}," Byebug InfoCommand info_file_sha1":{"type":"method","name":"info_file_sha1","children":[],"call":[" print ","LineCache  sha1 ","Digest SHA1  hexdigest "]}," Byebug InfoCommand info_file_mtime":{"type":"method","name":"info_file_mtime","children":[],"call":[" print ","stat mtime ","LineCache  stat ","File  stat ","LineCache  stat  mtime ","File  stat  mtime ","LineCache  LineCache  stat  ","LineCache  File  stat  ","File  LineCache  stat  ","File  File  stat  "]}," Byebug InfoCommand info_file_breakpoints":{"type":"method","name":"info_file_breakpoints","children":[],"call":[" print "," columnize "," class settings [] "," class settings "," class ","breakpoints to_a sort ","breakpoints to_a ","LineCache  trace_line_numbers ","Command  settings [] ","Command  settings ","Setting  [] ","LineCache  trace_line_numbers  to_a sort ","LineCache  trace_line_numbers  to_a "]}," Byebug InfoCommand info_file_lines":{"type":"method","name":"info_file_lines","children":[],"call":[" print ","LineCache  size ","lines count ","File  foreach ","LineCache  size  count ","File  foreach  count "]}," Byebug InfoCommand info_file_path":{"type":"method","name":"info_file_path","children":[],"call":[" print ","path != ","LineCache  path ","File  expand_path ","LineCache  path  != ","File  expand_path  != ","LineCache  LineCache  path  ","LineCache  File  expand_path  ","File  expand_LineCache  path  ","File  expand_File  expand_path  "]}," Byebug Command debug_warning_eval":{"type":"method","name":"debug_warning_eval","children":[],"call":[" print ","e message ","e class "," debug_eval "," eval "]}," Module post_mortem_method":{"type":"method","name":"post_mortem_method","children":[],"call":[" class_eval "," alias_method ","old_meth to_sym ","old_meth =~ "]}," Byebug handle_post_mortem":{"type":"method","name":"handle_post_mortem","children":[],"call":["Byebug  current_context tracing= ","Byebug  current_context ","Byebug  tracing= "," handler at_line ","exp __debug_line ","exp __debug_file ","exp __debug_context "," handler ","Byebug  last_exception= ","Byebug  current_context tracing ","Byebug  tracing? ","exp __debug_context stack_size == ","exp __debug_context stack_size ","exp __debug_context ! ","exp ! ","exp __bb_line ","exp __bb_file ","exp __bb_context ","exp __bb_context stack_size == ","exp __bb_context stack_size ","exp __bb_context ! ","exp __bb_context calced_stack_size ! ","exp __bb_context calced_stack_size "," raised_exception __bb_line "," raised_exception "," raised_exception __bb_file "," raised_exception __bb_context ","Byebug  current_ raised_exception __bb_context  tracing= ","Byebug  current_ raised_exception __bb_context  "," handler at_ raised_exception __bb_line  ","exp __debug_ raised_exception __bb_line  ","exp __debug_ raised_exception __bb_file  ","exp __debug_ raised_exception __bb_context  ","Byebug  current_ raised_exception __bb_context  tracing ","exp __debug_ raised_exception __bb_context  stack_size == ","exp __debug_ raised_exception __bb_context  stack_size ","exp __debug_ raised_exception __bb_context  ! ","exp __bb_ raised_exception __bb_line  ","exp __bb_ raised_exception __bb_file  ","exp __bb_ raised_exception __bb_context  ","exp __bb_ raised_exception __bb_context  stack_size == ","exp __bb_ raised_exception __bb_context  stack_size ","exp __bb_ raised_exception __bb_context  ! ","exp __bb_ raised_exception __bb_context  calced_stack_size ! ","exp __bb_ raised_exception __bb_context  calced_stack_size "," raised_exception __bb_ raised_exception __bb_line  "," raised_exception __bb_ raised_exception __bb_file  "," raised_exception __bb_ raised_exception __bb_context  "]}," Byebug post_mortem":{"type":"method","name":"post_mortem","children":[],"call":[" handle_post_mortem "," post_mortem? "," debug_at_exit "," post_mortem= "," raise "," block_given? "," at_exit "]}," Byebug InfoCommand info_stop_reason":{"type":"method","name":"info_stop_reason","children":[],"call":[" print ","unknown reason: %s\n % ","@state context stop_reason to_s ","@state context stop_reason ","@state context "]}," Byebug Command format_subcmds":{"type":"method","name":"format_subcmds","children":[],"call":["subcmd short_help ","subcmd name "," class name [] downcase "," class name [] "," class name "," class "," sprintf "," Subcommands  map max_by size "," Subcommands  map max_by "," Subcommands  map "," names join "," names ","subcmd help ","s + "," format "," Subcommands  each "," class name [] do Subcommands  map max_by size ncase "]}," Byebug VarInheritCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarInheritCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarLocalCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarLocalCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarInstanceCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarInstanceCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarGlobalCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarGlobalCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarConstantCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarConstantCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarClassVarCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarClassVarCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug TraceCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug TraceCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug StepCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug StepCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug NextCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug NextCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug SourceCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug SourceCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug SkipCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug SkipCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ShowCommand description":{"type":"method","name":"description","children":[],"call":["(str \"\\n\") gsub "," prettify "]}," Byebug ShowCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug SetCommand description":{"type":"method","name":"description","children":[],"call":["(str \"\\n\") gsub "," prettify "]}," Byebug SetCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug SaveCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug SaveCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ReloadCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ReloadCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug QuitCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug QuitCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug MethodCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug MethodCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug MethodSigCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug MethodSigCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ListCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug KillCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug KillCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug JumpCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug JumpCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug IRBCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug IRBCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug InfoCommand description":{"type":"method","name":"description","children":[],"call":["(str \"\\n\") gsub "," prettify "]}," Byebug InfoCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug HelpCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug HelpCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug FrameCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DownCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug DownCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug UpCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug UpCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug WhereCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug WhereCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug FinishCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug FinishCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug PSCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug PSCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug PutLCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug PutLCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug PPCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug PPCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug EvalCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug EvalCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DisableCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DisableCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug EnableCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug EnableCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug Edit description":{"type":"method","name":"description","children":[],"call":[]}," Byebug Edit names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DeleteDisplayCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DeleteDisplayCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DisplayCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug DisplayCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug AddDisplayCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug AddDisplayCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug RestartCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug RestartCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ContinueCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ContinueCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ConditionCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ConditionCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug CatchCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug CatchCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DeleteBreakpointCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DeleteBreakpointCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug AddBreakpoint description":{"type":"method","name":"description","children":[],"call":[]}," Byebug AddBreakpoint names":{"type":"method","name":"names","children":[],"call":[]}," Byebug Command help":{"type":"method","name":"help","children":[],"call":["output join + ","output join ","output pop ","output last empty? ","output last ","output shift ","output first empty? ","output first ","l gsub "," description split map "," description split "," description "," format_subcmd ","args [] "," format_subcmds "," description gsub "," prettify "," description gsub + ","output join +  join + "," description gsub  join + "," description gsub +  join + "," format_subcmd  join + "," description  join + ","output join +  join "," description gsub  join "," description gsub +  join "," format_subcmd  join "," description  join ","output join +  pop "," description gsub  pop "," description gsub +  pop "," format_subcmd  pop "," description  pop ","output join +  last empty? "," description gsub  last empty? "," description gsub +  last empty? "," format_subcmd  last empty? "," description  last empty? ","output join +  last "," description gsub  last "," description gsub +  last "," format_subcmd  last "," description  last ","output join +  shift "," description gsub  shift "," description gsub +  shift "," format_subcmd  shift "," description  shift ","output join +  first empty? "," description gsub  first empty? "," description gsub +  first empty? "," format_subcmd  first empty? "," description  first empty? ","output join +  first "," description gsub  first "," description gsub +  first "," format_subcmd  first "," description  first "]}," Byebug CommandFunctions format_subcmds":{"type":"method","name":"format_subcmds","children":[],"call":["subcmd short_help ","subcmd name "," class names join "," class names "," class "," sprintf ","subcmds map max_by size ","subcmds map max_by ","subcmds map "]}," Byebug CommandFunctions find":{"type":"method","name":"find","children":[],"call":["try_subcmd name [] == ","try_subcmd name [] ","param size - ","param size ","try_subcmd name ","param size >= ","try_subcmd min ","param downcase! "]}," Byebug PryCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug PryCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug PryCommand execute":{"type":"method","name":"execute","children":[],"call":[" get_binding pry "," get_binding ","-d == ","@match [] ","@match is_a? "," throw "," print ","@state interface kind_of? ","@state interface ","Pry  start "," context frame _binding "," context frame "," context "," errmsg "," pr "," require "," processor interface instance_of? "," processor interface "," processor ","@state interface is_a? "," context binding pry "," context binding "," processor interface is_a? "]}," Byebug PryCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Rails Rack Debugger call":{"type":"method","name":"call","children":[],"call":["@app call "]}," Rails Rack Debugger initialize":{"type":"method","name":"initialize","children":[],"call":[" exit "," puts "," Byebug  start "," require ","ARGV  clear "]}," Byebug Interface format":{"type":"method","name":"format","children":[],"call":["new_args gsub ","new_args % ","args [] ","args [] empty? ","args first ","args is_a? ","new_args %  gsub ","args first  gsub ","new_args %  % ","args first  % "]}," Byebug ListCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug InfoCommand info_breakpoint":{"type":"method","name":"info_breakpoint","children":[],"call":[" print ","hits > ","brkpt hit_count ","%-3d %-3s at %s:%s%s\n % ","brkpt pos ","brkpt source ","brkpt enabled? ","brkpt id ","brkpt expr ","brkpt expr nil? ","brkpt hit_count  > "]}," Byebug FrameCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug DeleteCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug DeleteCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug DeleteCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","Byebug  remove_breakpoint "," get_int ","@match [] split each ","@match [] split ","@match [] ","Byebug  breakpoints clear ","Byebug  breakpoints "," confirm ","@match [] ! ","@state context "," pr "," puts ","Breakpoint  remove "]}," Byebug DeleteCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug BreakCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "," short_description "]}," Byebug BreakCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug BreakCommand execute":{"type":"method","name":"execute","children":[],"call":[" print ","method to_s ","b id ","Byebug  add_breakpoint ","line intern ","b enabled= "," errmsg "," syntax_valid? ","line to_s ","CommandProcessor  canonic_file ","@state context "," confirm ","LineCache  trace_line_numbers member? ","LineCache  trace_line_numbers ","line > ","LineCache  size ","LineCache  cache ","Command  settings [] ","Command  settings ","line to_i ","line =~ "," throw ","klass name ","klass kind_of? "," debug_silent_eval ","line !~ ","@state line to_s ","@state line ","line nil? ","@state file ","file nil? ","expr !~ ","@match captures ","@match [] "," class help "," class "," class names include? "," class names ","BreakCommand  help ","BreakCommand  names include? ","BreakCommand  names "," pr "," puts ","b pos ","b source "," method_breakpoint "," line_breakpoint "," help "," bb_warning_eval ","Setting  [] "," syntax_valid? ! ","possible_lines member? ! ","possible_lines member? ","File  foreach count ","File  foreach ","File  exist? ","@state context ! ","Breakpoint  add ","kl name ","kl is_a? ","l > ","e message ","brkpt enabled= ","brkpt pos ","brkpt source ","brkpt id ","line intern  to_s ","Byebug  add_breakpoint  id ","Breakpoint  add  id ","ByeByebug  add_breakpoint ug  add_Byebug  add_breakpoint reakpoint ","ByeBreakpoint  add ug  add_Breakpoint  add reakpoint ","line to_i  intern ","@state line to_s  intern ","Byebug  add_breakpoint  enaByebug  add_breakpoint led= ","Breakpoint  add  enaBreakpoint  add led= ","line to_i  to_s ","@state line to_s  to_s ","CommandProcessor  canonic_@state file  ","LineCache  trace_line_numByebug  add_breakpoint ers memByebug  add_breakpoint er? ","LineCache  trace_line_numBreakpoint  add ers memBreakpoint  add er? ","LineCache  trace_line to_i _numbers member? ","LineCache  trace_@state line to_s _numbers member? ","LineCache  trace_line_numByebug  add_breakpoint ers ","LineCache  trace_line_numBreakpoint  add ers ","LineCache  trace_line to_i _numbers ","LineCache  trace_@state line to_s _numbers ","line to_i  > ","@state line to_s  > ","line to_i  to_i ","@state line to_s  to_i ","line to_i  =~ ","@state line to_s  =~ "," debug_silent_eval  name "," bb_warning_eval  name "," bb_warning_eval ass name "," debug_silent_eval  kind_of? "," bb_warning_eval  kind_of? "," bb_warning_eval ass kind_of? "," deByebug  add_breakpoint ug_silent_eval "," deBreakpoint  add ug_silent_eval ","line to_i  !~ ","@state line to_s  !~ ","@state line to_i  to_s ","@state @state line to_s  to_s ","@state line to_i  ","@state @state line to_s  ","line to_i  nil? ","@state line to_s  nil? ","@state @state file  ","@state file  nil? ","Byebug  add_breakpoint  pos ","Breakpoint  add  pos ","Byebug  add_breakpoint  source ","Breakpoint  add  source "," method_Byebug  add_breakpoint reakpoint "," method_Breakpoint  add reakpoint "," line intern _breakpoint "," line_Byebug  add_breakpoint reakpoint "," line_Breakpoint  add reakpoint "," line to_i _breakpoint "," @state line to_s _breakpoint "," Byebug  add_breakpoint Byebug  add_breakpoint _warning_eval "," Breakpoint  add Breakpoint  add _warning_eval ","possiByebug  add_breakpoint le_lines memByebug  add_breakpoint er? ! ","possiBreakpoint  add le_lines memBreakpoint  add er? ! ","possible_line to_i s member? ! ","possible_@state line to_s s member? ! ","LineCache  trace_line_numbers  member? ! ","possiByebug  add_breakpoint le_lines memByebug  add_breakpoint er? ","possiBreakpoint  add le_lines memBreakpoint  add er? ","possible_line to_i s member? ","possible_@state line to_s s member? ","LineCache  trace_line_numbers  member? "," bb_warning_eval  is_a? ","Byebug  add_breakpoint rkpt enaByebug  add_breakpoint led= ","Breakpoint  add rkpt enaBreakpoint  add led= ","Byebug  add_breakpoint rkpt pos ","Breakpoint  add rkpt pos ","Byebug  add_breakpoint rkpt source ","Breakpoint  add rkpt source ","Byebug  add_breakpoint rkpt id ","Breakpoint  add rkpt id "]}," Byebug BreakCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug Command format_subcmd":{"type":"method","name":"format_subcmd","children":[],"call":["subcmd long_help ","subcmd short_help "," args [] "," args "," names join "," names "," find ","subcmd help "," find  long_help "," find  short_help "," find  help "]}," Rails Console require_debugger":{"type":"method","name":"require_debugger","children":[],"call":[" exit "," puts "," require "]}," Byebug FrameFunctions get_frame_args":{"type":"method","name":"get_frame_args","children":[],"call":["frame_args == ","(send\n  (lvar :args) :map) join ","locals [] class ","locals [] ","args map ","@state context frame_locals ","@state context ","style == ","args == ","@state context frame_args ","my_args join ","arg [] ","args empty? ","(send\n  (lvar :args) :map) join  == ","frame_@state context frame_args  == ","(send\n  (lvar :@state context frame_args ) :map) join ","@state context frame_locals  [] class ","@state context frame_locals  [] ","@state context frame_args  map ","@state context frame_@state context frame_locals  ","@state context frame_args  == ","@state context (send\n  (lvar :args) :map) join  ","@state context frame_@state context frame_args  ","my_@state context frame_args  join ","@state context frame_args  empty? "]}," Byebug FrameFunctions get_frame_class":{"type":"method","name":"get_frame_class","children":[],"call":["frame_class == ","@state context frame_class ","@state context ","style == "]}," Byebug CommandProcessor split_commands":{"type":"method","name":"split_commands","children":[],"call":["m << ","m last << << ","m last << ","m last ","m last []= ","m last [] == ","m last [] ","m empty? ","cmd_line split inject ","cmd_line split ","cmd_line split each_with_object "]}," Byebug Command terminal_width":{"type":"method","name":"terminal_width","children":[],"call":["(str \"stty size\") scan [] to_i ","(str \"stty size\") scan [] ","(str \"stty size\") scan "," command_exists? ","STDIN  tty? ","ENV  [] to_i ","ENV  [] ","ENV  [] =~ "]}," Byebug Command command_exists?":{"type":"method","name":"command_exists?","children":[],"call":["File  exists? ","File  join ","ENV  [] split any? ","ENV  [] split ","ENV  [] ","File  exist? "]}," Byebug Context ruby_frame_args":{"type":"method","name":"ruby_frame_args","children":[],"call":[" print ","e message ","e class "," eval "," puts ","Byebug  errmsg ","bind eval "]}," Byebug Context c_frame_args":{"type":"method","name":"c_frame_args","children":[],"call":["myself send parameters ","myself send "," frame_method ","myself to_s != ","myself to_s "," frame_self ","myself method parameters ","myself method "," frame_self  send parameters "," frame_self  send "," frame_self  to_s != "," frame_self  to_s "," frame_self  method parameters "," frame_self  method "]}," Byebug FrameFunctions get_frame_block_and_method":{"type":"method","name":"get_frame_block_and_method","children":[],"call":["x nil? ","frame_block_and_method map ","frame_deco_regexp match [] ","frame_deco_regexp match ","@state context frame_method ","@state context ","frame_deco_regexp match []  map "]}," Byebug FrameFunctions navigate_to_frame":{"type":"method","name":"navigate_to_frame","children":[],"call":["current_jumps == "," c_frame? ","new_pos >= ","@state context stack_size ","@state context ","new_pos < "," loop ","jump_no / ","@state frame_pos ","jump_no abs ","jump_no == ","Context  stack_size ","@state c_frame? ","@state frame "]}," Byebug FrameFunctions switch_to_frame":{"type":"method","name":"switch_to_frame","children":[],"call":["@state context stack_size + ","@state context stack_size ","@state context ","frame_no < ","Context  stack_size + ","Context  stack_size ","frame_no >= "]}," Byebug FrameFunctions c_frame?":{"type":"method","name":"c_frame?","children":[],"call":["@state context frame_binding nil? ","@state context frame_binding ","@state context "]}," Byebug start_server":{"type":"method","name":"start_server","children":[],"call":["proceed wait ","mutex synchronize "," wait_connection ","proceed signal "," interface= ","RemoteInterface  new ","server accept ","Thread  new ","server addr [] ","server addr ","TCPServer  new ","ConditionVariable  new ","Mutex  new "," block_given? "," start_control ","port + ","port kind_of? "," start "," server start "," server ","port zero? ","DebugThread  new "," actual_port= ","port == "," handler interface= "," handler ","Context  interface= ","ConditionVariable  new  wait ","Mutex  new  synchronize ","ConditionVariable  new  signal ","TCPServer  new  accept ","TCPServer  new  addr [] ","TCPServer  new  addr "," TCPServer  new  start "," TCPServer  new  "]}," Byebug CommandProcessor State location":{"type":"method","name":"location","children":[],"call":["Byebug  line_at ","(str \"(irb)\") include? ","CommandProcessor  canonic_file "," get_line "," class canonic_file "," class "]}," Byebug Processor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug Interface escape":{"type":"method","name":"escape","children":[],"call":["msg gsub "]}," Byebug Subcommands ClassMethods subcommand_list":{"type":"method","name":"subcommand_list","children":[],"call":["CommandList  new "," commands "]}," Byebug Subcommands ClassMethods help":{"type":"method","name":"help","children":[],"call":[" + "," subcommand_list to_s "," subcommand_list "]}," Byebug Subcommands execute":{"type":"method","name":"execute","children":[],"call":["subcmd new execute ","subcmd new "," arguments "," processor "," raise ","CommandNotFound  new "," class "," subcommand_list match "," subcommand_list "," puts "," help ","@match [] ","subcmd execute "," errmsg "," subcommands find "," subcommands "," fail ","e message "," subcommand_list match  new execute "," subcommands find  new execute "," subcommand_list match  new "," subcommands find  new "," subcommand_list match  execute "," subcommands find  execute "]}," Byebug Subcommands included":{"type":"method","name":"included","children":[],"call":[]}," Byebug SourceFileFormatter amend":{"type":"method","name":"amend","children":[],"call":["(lvar :ceiling) min ","(int 1) max "]}," Byebug SourceFileFormatter size":{"type":"method","name":"size","children":[],"call":["(send\n  (const nil :Setting) :[]\n  (sym :listsize)) min "," max_line ","Setting  [] "]}," Byebug SourceFileFormatter max_line":{"type":"method","name":"max_line","children":[],"call":[" n_lines "," file "]}," Byebug SourceFileFormatter max_initial_line":{"type":"method","name":"max_initial_line","children":[],"call":[" max_line - + "," max_line - "," size "," max_line "]}," Byebug SourceFileFormatter amend_final":{"type":"method","name":"amend_final","children":[],"call":[" amend "," max_line "]}," Byebug SourceFileFormatter amend_initial":{"type":"method","name":"amend_initial","children":[],"call":[" amend "," max_initial_line "]}," Byebug SourceFileFormatter range_from":{"type":"method","name":"range_from","children":[],"call":["first + - ","first + "," size "," amend_initial "," amend_initial  + - "," amend_initial  + "]}," Byebug SourceFileFormatter range_around":{"type":"method","name":"range_around","children":[],"call":[" range_from ","center - "," size / "," size "]}," Byebug SourceFileFormatter lines_around":{"type":"method","name":"lines_around","children":[],"call":[" lines "," range_around "]}," Byebug SourceFileFormatter lines":{"type":"method","name":"lines","children":[],"call":[" format ","lineno + "," annotator call "," annotator ","max to_s size ","max to_s ","(irange\n  (lvar :min)\n  (lvar :max)) cover? ","File  foreach with_index map ","File  foreach with_index ","File  foreach "," file "]}," Byebug SourceFileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug WidthSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug WidthSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug StackOnErrorSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug SavefileSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug SavefileSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug PostMortemSetting value":{"type":"method","name":"value","children":[],"call":["Byebug  post_mortem? "]}," Byebug PostMortemSetting value=":{"type":"method","name":"value=","children":[],"call":["Byebug  post_mortem= ","Byebug  post_mortem "," handle_post_mortem ","Byebug  post_mortem? "," at_exit "]}," Byebug PostMortemSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug PostMortemSetting initialize":{"type":"method","name":"initialize","children":[],"call":["Byebug  post_mortem= "]}," Byebug ListsizeSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug ListsizeSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug LinetraceSetting value":{"type":"method","name":"value","children":[],"call":["Byebug  tracing? "]}," Byebug LinetraceSetting value=":{"type":"method","name":"value=","children":[],"call":["Byebug  tracing= "]}," Byebug LinetraceSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug HistsizeSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug HistsizeSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug HistfileSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug HistfileSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug FullpathSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug CallstyleSetting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," Byebug CallstyleSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug BasenameSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutosaveSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutoprySetting value":{"type":"method","name":"value","children":[],"call":["PryCommand  always_run == ","PryCommand  always_run "]}," Byebug AutoprySetting value=":{"type":"method","name":"value=","children":[],"call":["PryCommand  always_run= "]}," Byebug AutoprySetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutoprySetting initialize":{"type":"method","name":"initialize","children":[],"call":["PryCommand  always_run= "]}," Byebug AutolistSetting value":{"type":"method","name":"value","children":[],"call":["ListCommand  always_run == ","ListCommand  always_run "]}," Byebug AutolistSetting value=":{"type":"method","name":"value=","children":[],"call":["ListCommand  always_run= "]}," Byebug AutolistSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutolistSetting initialize":{"type":"method","name":"initialize","children":[],"call":["ListCommand  always_run= "]}," Byebug AutoirbSetting value":{"type":"method","name":"value","children":[],"call":["IrbCommand  always_run == ","IrbCommand  always_run "]}," Byebug AutoirbSetting value=":{"type":"method","name":"value=","children":[],"call":["IrbCommand  always_run= "]}," Byebug AutoirbSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutoirbSetting initialize":{"type":"method","name":"initialize","children":[],"call":["IrbCommand  always_run= "]}," Byebug Setting help_all":{"type":"method","name":"help_all","children":[],"call":["output + "," format ","sett banner ","sett to_sym "," settings each_value "," settings "," settings keys max_by size "," settings keys max_by "," settings keys ","output << "," settings values each "," settings values "]}," Byebug Setting find":{"type":"method","name":"find","children":[],"call":["matches values first ","matches values ","matches size == ","matches size ","key =~ ","value boolean? "," settings select "," settings ","shortcut [] ","shortcut =~ ","(str \"^no\") match? "]}," Byebug Setting []=":{"type":"method","name":"[]=","children":[],"call":[" settings [] value= "," settings [] "," settings "]}," Byebug Setting []":{"type":"method","name":"[]","children":[],"call":[" settings [] value "," settings [] "," settings "]}," Byebug Setting settings":{"type":"method","name":"settings","children":[],"call":[]}," Byebug Setting to_s":{"type":"method","name":"to_s","children":[],"call":[" value "," to_sym "]}," Byebug Setting to_sym":{"type":"method","name":"to_sym","children":[],"call":["name gsub downcase to_sym ","name gsub downcase ","name gsub "," class name gsub gsub "," class name gsub "," class name "," class "," class name gsub gsub  gsub downcase to_sym "," class name gsub gsub  gsub downcase "," class name gsub gsub  gsub "," class  class name gsub gsub  gsub gsub "," class  class name gsub gsub  gsub "," class  class name gsub gsub  "]}," Byebug Setting help":{"type":"method","name":"help","children":[],"call":[" prettify "," banner ","setting banner ","setting to_sym "," find ","command description + "," help_all ","command description ","Byebug  const_get ","cmd capitalize "," find  banner "," find  to_sym ","Byebug  const_get  description + ","Byebug  const_get  description "]}," Byebug Setting integer?":{"type":"method","name":"integer?","children":[],"call":[" Integer "," value "]}," Byebug Setting boolean?":{"type":"method","name":"boolean?","children":[],"call":["(true) include? "," value "]}," Byebug Setting initialize":{"type":"method","name":"initialize","children":[],"call":[" class "]}," Byebug Runner print_error":{"type":"method","name":"print_error","children":[],"call":[" interface puts "," option_parser help "," option_parser "," interface "," interface errmsg "]}," Byebug Runner debug_program":{"type":"method","name":"debug_program","children":[],"call":[" puts ","error backtrace ","Byebug  debug_load "," stop "," program ","Byebug  puts ","status backtrace ","options [] "," exit ","$CHILD_STATUS exitstatus ","$CHILD_STATUS exitstatus != ","Byebug  debugged_program ","File  executable? "," check_syntax "," status backtrace "," status "," fail "," syntax_valid? ","File  read "," raise ","Byebug  debug_load  backtrace ","$CHILD_STATUS exitByebug  debug_load  ","$CHILD_STATUS exitByebug  debug_load  != "," Byebug  debug_load  backtrace "," Byebug  debug_load  "]}," Byebug Runner invalid_script?":{"type":"method","name":"invalid_script?","children":[],"call":[" print_error "," syntax_valid? ","File  read "," program "]}," Byebug Runner non_existing_script?":{"type":"method","name":"non_existing_script?","children":[],"call":[" print_error "," program "," which ","$ARGV shift ","program == ","Byebug  mode= ","  which  "," which  == "]}," Byebug Runner no_script?":{"type":"method","name":"no_script?","children":[],"call":[" print_error ","$ARGV empty? "]}," Byebug Runner error_in_script?":{"type":"method","name":"error_in_script?","children":[],"call":[" invalid_script? "," non_existing_script? "," no_script? "]}," Byebug Runner non_script_option?":{"type":"method","name":"non_script_option?","children":[],"call":[" remote "," help "," version "]}," Byebug Runner program":{"type":"method","name":"program","children":[],"call":[" which ","$ARGV shift ","(send nil :which\n  (str \"ruby\")) include? ","RbConfig  ruby ","candidate == "," which  == "]}," Byebug Runner option_parser":{"type":"method","name":"option_parser","children":[],"call":["OptionSetter  new setup ","OptionSetter  new ","opts banner= "," banner ","OptionParser  new "]}," Byebug Runner interface":{"type":"method","name":"interface","children":[],"call":["Context  interface ","LocalInterface  new "]}," Byebug Runner run":{"type":"method","name":"run","children":[],"call":["ControlProcessor  new process_commands ","ControlProcessor  new "," interface "," quit "," debug_program "," loop ","Byebug  run_init_script "," init_script "," program "," error_in_script? "," non_script_option? "," option_parser order! "," option_parser ","Byebug  mode= ","processor process_commands ","Byebug ControlCommandProcessor  new ","opts [] ","Byebug Setting  []= ","StringIO  new ","Byebug  start ","Byebug  const_set ","File  expand_path ","Byebug  send ","Byebug  const_defined? "," whence_file ","File  exist? ","ARGV  pop "," abort ","Byebug  puts ","ARGV  empty? ","Byebug  start_client ","opts [] pop ","opts [] pop to_i ","opts help ","Byebug Options  parse "," save_debugged_program ","Byebug  debugged_program= "," debugged_program_from_argv "," abort_with_err ","Byebug  debugged_program ","Byebug  setup_cmd_line_args "," remote "," help "," version "," prepare_options order! "," prepare_options "," setup_cmd_line_args ","Byebug ControlCommandProcessor  new  process_commands ","Byebug Options  parse  [] ","Byebug Options  parse  [] pop ","Byebug Options  parse  [] pop to_i ","Byebug Options  parse  help "]}," Byebug Runner banner":{"type":"method","name":"banner","children":[],"call":[" prettify ","(str \"\\n\") gsub "]}," Byebug Runner init_script":{"type":"method","name":"init_script","children":[],"call":[]}," Byebug Runner remote=":{"type":"method","name":"remote=","children":[],"call":["Byebug  start_client ","Byebug  parse_host_and_port "]}," Byebug Runner version=":{"type":"method","name":"version=","children":[],"call":[" interface puts "," prettify "," interface "]}," Byebug Runner help=":{"type":"method","name":"help=","children":[],"call":[" interface puts "," interface "]}," Byebug Runner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug control":{"type":"method","name":"control","children":[],"call":["ControlProcessor  new process_commands ","ControlProcessor  new ","RemoteInterface  new ","Byebug  current_context ","Remote Server  new ","Byebug  current_Byebug  current_context  "]}," Byebug server":{"type":"method","name":"server","children":[],"call":["Context  interface= ","RemoteInterface  new ","Remote Server  new "," wait_connection "]}," Byebug client":{"type":"method","name":"client","children":[],"call":["Remote Client  new ","Context  interface "]}," Byebug parse_host_and_port":{"type":"method","name":"parse_host_and_port","children":[],"call":["location [] ","location [] to_i ","host_port_spec split ","host_port_spec split  [] ","host_port_spec split  [] to_i "]}," Byebug actual_control_port":{"type":"method","name":"actual_control_port","children":[],"call":[" control actual_port "," control "]}," Byebug actual_port":{"type":"method","name":"actual_port","children":[],"call":[" server actual_port "," server "]}," Byebug Remote Server start":{"type":"method","name":"start","children":[],"call":["proceed wait ","mutex synchronize "," wait_connection ","proceed signal ","@main_loop call ","server accept ","DebugThread  new "," block_given? ","server addr [] ","server addr ","TCPServer  new ","ConditionVariable  new ","Mutex  new ","ConditionVariable  new  wait ","Mutex  new  synchronize ","ConditionVariable  new  signal ","TCPServer  new  accept ","TCPServer  new  addr [] ","TCPServer  new  addr "]}," Byebug Remote Server initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug Remote Client connect_at":{"type":"method","name":"connect_at","children":[],"call":[" interface puts "," interface ","TCPSocket  new "]}," Byebug Remote Client started?":{"type":"method","name":"started?","children":[],"call":[" socket nil? ! "," socket nil? "," socket "]}," Byebug Remote Client start":{"type":"method","name":"start","children":[],"call":[" socket close "," socket "," interface puts "," interface "," socket puts "," interface readline ","Regexp  last_match [] ","Regexp  last_match "," interface read_command "," socket gets "," connect_at "," interface read socket gets  "]}," Byebug Remote Client initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug ScriptProcessor without_exceptions":{"type":"method","name":"without_exceptions","children":[],"call":[]}," Byebug ScriptProcessor prompt":{"type":"method","name":"prompt","children":[],"call":[]}," Byebug ScriptProcessor after_repl":{"type":"method","name":"after_repl","children":[],"call":[" interface close "," interface "]}," Byebug ScriptProcessor repl":{"type":"method","name":"repl","children":[],"call":["command new execute ","command new "," raise ","CommandNotFound  new "," command_list match "," command_list "," safely "," interface read_command "," prompt "," interface "," command_list match  new execute "," command_list match  new ","  command_list match _list match ","  command_list match _list "," interface read_ command_list match  "]}," Byebug ScriptProcessor commands":{"type":"method","name":"commands","children":[],"call":[" select "]}," Byebug PostMortemProcessor prompt":{"type":"method","name":"prompt","children":[],"call":[]}," Byebug PostMortemProcessor commands":{"type":"method","name":"commands","children":[],"call":[" select "]}," Byebug ControlProcessor prompt":{"type":"method","name":"prompt","children":[],"call":[]}," Byebug ControlProcessor commands":{"type":"method","name":"commands","children":[],"call":[" select "]}," Byebug CommandProcessor safely":{"type":"method","name":"safely","children":[],"call":[" errmsg ","e message "]}," Byebug CommandProcessor run_cmd":{"type":"method","name":"run_cmd","children":[],"call":[" puts "," safe_inspect "," multiple_thread_eval ","command new execute ","command new "," command_list match "," command_list "," safely "," errmsg "," thread_safe_eval ","e message "," command_list match  new execute "," command_list match  new ","  command_list match _list match ","  command_list match _list "]}," Byebug CommandProcessor run_auto_cmds":{"type":"method","name":"run_auto_cmds","children":[],"call":["cmd new execute ","cmd new "," auto_cmds_for each "," auto_cmds_for "," safely "]}," Byebug CommandProcessor auto_cmds_for":{"type":"method","name":"auto_cmds_for","children":[],"call":["cmd always_run >= ","cmd always_run "," command_list select "," command_list "]}," Byebug CommandProcessor repl":{"type":"method","name":"repl","children":[],"call":[" run_cmd ","cmd == ","cmd nil? "," interface read_command "," prompt "," interface "," one_cmd "," split_commands each "," split_commands ","input == ","@interface command_queue shift ","@interface command_queue ","@interface read_command ","@interface command_queue empty? ","state proceed? ","cmd empty? ","@last_cmd nil? "," state proceed? "," state "," run_ interface read_command  "," run_@interface read_command  "," interface read_command  == ","@interface read_command  == "," interface read_command  nil? ","@interface read_command  nil? "," one_ interface read_command  "," one_@interface read_command  ","@interface command_queue shift  == "," interface read_command  empty? ","@interface read_command  empty? ","@last_ interface read_command  nil? ","@last_@interface read_command  nil? "]}," Byebug CommandProcessor after_repl":{"type":"method","name":"after_repl","children":[],"call":[" interface autosave "," interface "]}," Byebug CommandProcessor before_repl":{"type":"method","name":"before_repl","children":[],"call":[" interface autorestore "," interface "," run_auto_cmds "," run_auto_commands "]}," Byebug CommandProcessor proceed!":{"type":"method","name":"proceed!","children":[],"call":[]}," Byebug CommandProcessor at_end":{"type":"method","name":"at_end","children":[],"call":[" process_commands "]}," Byebug CommandProcessor command_list":{"type":"method","name":"command_list","children":[],"call":["CommandList  new "," commands "]}," Byebug CommandProcessor printer":{"type":"method","name":"printer","children":[],"call":["Printers Plain  new "]}," Byebug Printers Plain contents_files":{"type":"method","name":"contents_files","children":[],"call":["(send\n  (const nil :File) :join\n  (send nil :__dir__)\n  (str \"texts\")\n  (str \"plain.yml\")) + ","File  join "," __dir__ ","(send\n  (const nil :File) :expand_path\n  (send\n    (const nil :File) :join\n    (str \"..\")\n    (str \"texts\")\n    (str \"plain.yml\"))\n  (str \"(string)\")) + ","File  expand_path "]}," Byebug Printers Plain print_variables":{"type":"method","name":"print_variables","children":[],"call":["value [] + ","value [] ","Setting  [] - - ","Setting  [] - ","Setting  [] ","(begin\n  (lvar :key)) size ","(begin\n  (lvar :key)) size > ","value to_s ","value nil? "," print_collection ","value [] +  [] + ","value to_s  [] + ","value [] +  [] ","value to_s  [] ","value [] +  to_s ","value to_s  to_s ","value [] +  nil? ","value to_s  nil? "]}," Byebug Printers Plain print_collection":{"type":"method","name":"print_collection","children":[],"call":["lines join "," print "," array_of_args map "," array_of_args "," columnize ","Setting  [] ","l gsub ","lines map ","modifier == "," get_modifier "," get_modifier  == "," get_ get_modifier  "]}," Byebug Printers Plain print":{"type":"method","name":"print","children":[],"call":["message << "," parts include? "," parts "," translate "," locate "," translate  << "]}," Byebug Printers Base contents_files":{"type":"method","name":"contents_files","children":[],"call":["File  join "," __dir__ ","File  expand_path "]}," Byebug Printers Base array_of_args":{"type":"method","name":"array_of_args","children":[],"call":["array << ","collection_with_index each_with_object ","collection each with_index ","collection each ","block call ","collection each with_index  each_with_object "]}," Byebug Printers Base contents":{"type":"method","name":"contents","children":[],"call":["hash []= ","YAML  load_file "," contents_files each_with_object "," contents_files "]}," Byebug Printers Base parts":{"type":"method","name":"parts","children":[],"call":["path split "]}," Byebug Printers Base translate":{"type":"method","name":"translate","children":[],"call":["args [] ","key to_sym ","Regexp  last_match [] ","Regexp  last_match "," raise ","args key? ","Regexp  last_match [] to_s ","string gsub gsub ","string gsub "," fail ","Regexp  last_match [] to_s  to_sym ","args Regexp  last_match [] to_s ? "]}," Byebug Printers Base locate":{"type":"method","name":"locate","children":[],"call":[" raise ","r [] ","r key? "," parts reduce "," parts "," contents each_value "," contents "," fail "," contents each "]}," Byebug Printers Base type":{"type":"method","name":"type","children":[],"call":[" class name split last downcase "," class name split last "," class name split "," class name "," class "]}," Byebug OptionSetter help":{"type":"method","name":"help","children":[],"call":["@runner help= ","@opts help ","@opts on "]}," Byebug OptionSetter version":{"type":"method","name":"version","children":[],"call":["@runner version= ","@opts on "]}," Byebug OptionSetter trace":{"type":"method","name":"trace","children":[],"call":["Setting  []= ","@opts on "]}," Byebug OptionSetter remote":{"type":"method","name":"remote","children":[],"call":["@runner remote= ","@opts on "]}," Byebug OptionSetter require_flag":{"type":"method","name":"require_flag","children":[],"call":[" require ","@opts on "]}," Byebug OptionSetter stop":{"type":"method","name":"stop","children":[],"call":["@runner stop= ","@opts on "]}," Byebug OptionSetter rc":{"type":"method","name":"rc","children":[],"call":["@runner init_script= ","@opts on ","Byebug  run_init_script "]}," Byebug OptionSetter quit":{"type":"method","name":"quit","children":[],"call":["@runner quit= ","@opts on "]}," Byebug OptionSetter post_mortem":{"type":"method","name":"post_mortem","children":[],"call":["Setting  []= ","@opts on "]}," Byebug OptionSetter include_flag":{"type":"method","name":"include_flag","children":[],"call":["$LOAD_PATH push flatten! ","$LOAD_PATH push ","list split ","@opts on "]}," Byebug OptionSetter debug":{"type":"method","name":"debug","children":[],"call":["@opts on "]}," Byebug OptionSetter setup":{"type":"method","name":"setup","children":[],"call":[" help "," version "," trace "," remote "," require_flag "," stop "," rc "," quit "," post_mortem "," include_flag "," debug "]}," Byebug OptionSetter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug TestInterface prepare":{"type":"method","name":"prepare","children":[],"call":["message to_s split ","message to_s ","message map ","message respond_to? "]}," Byebug TestInterface readline":{"type":"method","name":"readline","children":[],"call":["cmd call ","cmd is_a? "," input shift "," input "," puts "," input shift  call "," input shift  is_a? "]}," Byebug TestInterface inspect":{"type":"method","name":"inspect","children":[],"call":["(str \"Input:\") join "," error join "," error "," output join "," output "," input join "," input "]}," Byebug TestInterface clear":{"type":"method","name":"clear","children":[],"call":[" history clear "," history "]}," Byebug TestInterface read_command":{"type":"method","name":"read_command","children":[],"call":[" test_block= "," test_block call "," test_block ","cmd nil? "]}," Byebug TestInterface puts":{"type":"method","name":"puts","children":[],"call":[" output concat "," prepare "," output ","message to_s split ","message to_s "]}," Byebug TestInterface print":{"type":"method","name":"print","children":[],"call":[" output concat "," prepare "," output ","message to_s split ","message to_s "]}," Byebug TestInterface errmsg":{"type":"method","name":"errmsg","children":[],"call":[" error concat "," prepare "," error ","message to_s split ","message to_s "]}," Byebug TestInterface initialize":{"type":"method","name":"initialize","children":[],"call":[" clear "]}," Byebug ScriptInterface readline":{"type":"method","name":"readline","children":[],"call":["result chomp ","result =~ "," output puts "," output "," input gets "," input ","(str \"^\\\\s*#\") match? "," input gets  chomp "," input gets  =~ "]}," Byebug RemoteInterface readline":{"type":"method","name":"readline","children":[],"call":["(or\n  (send\n    (send nil :input) :gets)\n  (str \"continue\")) chomp "," input gets "," input "," puts ","result chomp "," fail "," output puts "," output "," raise "," input gets  chomp "]}," Byebug RemoteInterface puts":{"type":"method","name":"puts","children":[],"call":["@socket puts "]}," Byebug LocalInterface with_repl_like_sigint":{"type":"method","name":"with_repl_like_sigint","children":[],"call":[" trap "," puts "," raise "]}," Byebug Interface split_commands":{"type":"method","name":"split_commands","children":[],"call":["m last << << ","m last << ","m last ","m last []= ","m << ","v strip ","m last [] != ","m last [] ","m empty? ","cmd_line split each_with_object ","cmd_line split ","cmd_line empty? "]}," Byebug Interface autorestore":{"type":"method","name":"autorestore","children":[],"call":[" history restore "," history ","Setting  [] "]}," Byebug Interface autosave":{"type":"method","name":"autosave","children":[],"call":[" history clear "," history "," history save ","Setting  [] "]}," Byebug Interface close":{"type":"method","name":"close","children":[],"call":[]}," Byebug Interface confirm":{"type":"method","name":"confirm","children":[],"call":[" readline == "," readline "]}," Byebug Interface print":{"type":"method","name":"print","children":[],"call":[" output print "," output "]}," Byebug Interface puts":{"type":"method","name":"puts","children":[],"call":[" output puts "," output "]}," Byebug Interface prepare_input":{"type":"method","name":"prepare_input","children":[],"call":[" last_if_empty "," readline "," read readline  "]}," Byebug Interface read_input":{"type":"method","name":"read_input","children":[],"call":[" command_queue shift "," command_queue "," command_queue concat "," split_commands "," history push "," history "," prepare_input "," readline "," read prepare_input  "," read readline  "]}," Byebug Interface read_file":{"type":"method","name":"read_file","children":[],"call":[" command_queue concat "," get_lines "," command_queue "]}," Byebug Interface read_command":{"type":"method","name":"read_command","children":[],"call":[" read_input "," command_queue shift "," command_queue "," command_queue empty? "," command_queue concat "]}," Byebug Interface last_if_empty":{"type":"method","name":"last_if_empty","children":[],"call":["input empty? "]}," Byebug History ignore?":{"type":"method","name":"ignore?","children":[],"call":[" buffer [] == "," buffer [] ","Readline HISTORY  length - ","Readline HISTORY  length "," buffer ","Readline HISTORY  empty? ","(str \"^\\\\s*$\") match? ","Readline HISTORY  [] == ","Readline HISTORY  [] ","Readline HISTORY  length == "]}," Byebug History specific_max_size":{"type":"method","name":"specific_max_size","children":[],"call":["(send\n  (self) :size) min "," size "]}," Byebug History default_max_size":{"type":"method","name":"default_max_size","children":[],"call":["(send\n  (const nil :Setting) :[]\n  (sym :histsize)) min "," size ","Setting  [] "]}," Byebug History last_ids":{"type":"method","name":"last_ids","children":[],"call":["(irange\n  (send\n    (send\n      (int 1) :+\n      (send nil :size)) :-\n    (lvar :n))\n  (send nil :size)) to_a "," size ","1 + - ","1 + ","(irange\n  (send\n    (send\n      (int 1) :+\n      (send nil :size)) :-\n    (lvar :number))\n  (send nil :size)) to_a ","(irange\n  (lvar :from)\n  (lvar :to)) to_a "]}," Byebug History to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar :commands)) :map) join "," format ","l [] "," last_ids zip map "," last_ids zip "," last_ids "," buffer last "," buffer "," default_max_size "," specific_max_size ","%5d  %s\n % ","first + + ","first + ","commands each_with_index ","Readline HISTORY  to_a last ","Readline HISTORY  to_a ","Readline HISTORY  length - ","Readline HISTORY  length ","Readline HISTORY  length < ","rl_size - ","rl_size < ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar :show_size)) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip map ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar :show_size)) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar :show_size)) :+\n    (int 1))\n  (send\n    (self) :size)) to_a "," size "," size - + "," size - ","(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar : buffer last )) :map) join + ","(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar :Readline HISTORY  to_a last )) :map) join + ","(send\n  (send\n    (send nil :last_ids\n      (lvar : default_max_size )) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send nil :last_ids\n      (lvar : specific_max_size )) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar : buffer last )) :map) join ","(send\n  (send\n    (send nil :last_ids\n      (lvar :show_size)) :zip\n    (lvar :Readline HISTORY  to_a last )) :map) join ","(send\n  (send\n    (send nil :last_ids\n      (lvar : default_max_size )) :zip\n    (lvar :commands)) :map) join ","(send\n  (send\n    (send nil :last_ids\n      (lvar : specific_max_size )) :zip\n    (lvar :commands)) :map) join ","Readline HISTORY  length -  + + ","rl_size -  + + ","Readline HISTORY  length -  + ","rl_size -  + "," buffer last  each_with_index ","Readline HISTORY  to_a last  each_with_index ","Readline HISTORY  length  - ","Readline HISTORY  length  < ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar : buffer last )) :map) join + ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :Readline HISTORY  to_a last )) :map) join + ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar : default_max_size )) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar : specific_max_size )) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join + ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar : buffer last )) :map) join ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar :show_size)) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :Readline HISTORY  to_a last )) :map) join ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar : default_max_size )) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join ","(send\n  (send\n    (send\n      (begin\n        (irange\n          (send\n            (send\n              (send\n                (self) :size) :-\n              (lvar : specific_max_size )) :+\n            (int 1))\n          (send\n            (self) :size))) :to_a) :zip\n    (lvar :commands)) :map) join ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : default_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip map ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : specific_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip map ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : default_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : specific_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a zip ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : default_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a ","(irange\n  (send\n    (send\n      (send\n        (self) :size) :-\n      (lvar : specific_max_size )) :+\n    (int 1))\n  (send\n    (self) :size)) to_a "]}," Byebug History pop":{"type":"method","name":"pop","children":[],"call":["Readline HISTORY  pop "," size "]}," Byebug History push":{"type":"method","name":"push","children":[],"call":["Readline HISTORY  push "," size "," ignore? "]}," Byebug History clear":{"type":"method","name":"clear","children":[],"call":[" pop "," size times "," size "]}," Byebug History save":{"type":"method","name":"save","children":[],"call":[" clear ","file puts "," pop ","n_cmds times "," open ","Setting  [] "," size ","Setting  [] > ","File  open ","line strip empty? ","line strip ","Readline HISTORY  to_a last each ","Readline HISTORY  to_a last ","Readline HISTORY  to_a ","Setting  []  times "," size  times "]}," Byebug History restore":{"type":"method","name":"restore","children":[],"call":[" push ","l chomp ","File  readlines reverse_each ","File  readlines ","Setting  [] ","File  exist? ","File  readlines reverse each ","File  readlines reverse "]}," Byebug History buffer":{"type":"method","name":"buffer","children":[],"call":["Readline HISTORY  to_a "]}," Byebug History initialize":{"type":"method","name":"initialize","children":[],"call":[" size= "]}," Byebug Helpers VarHelper var_args":{"type":"method","name":"var_args","children":[],"call":[" puts "," prv ","locals [] ","locals keys sort map ","locals keys sort ","locals keys ","arg_values include? ","all_locals select ","arg [] ","args map "," context frame locals "," context frame "," context ","args == "," context frame args "," context frame locals  select "," context frame args  map "," context frame args  == "," context frame  context frame args  "]}," Byebug Helpers VarHelper var_local":{"type":"method","name":"var_local","children":[],"call":[" puts "," prv ","locals [] ","locals keys sort map ","locals keys sort ","locals keys ","locals []= ","cur_self to_s == ","cur_self to_s "," context frame _self "," context frame "," context "," context frame locals ","@state context frame_self ","@state frame ","@state context ","@state context frame_locals "," context frame locals  [] ","@state context frame_locals  [] "," context frame locals  keys sort map ","@state context frame_locals  keys sort map "," context frame locals  keys sort ","@state context frame_locals  keys sort "," context frame locals  keys ","@state context frame_locals  keys "," context frame locals  []= ","@state context frame_locals  []= "," context frame _self  to_s == ","@state context frame_self  to_s == "," context frame _self  to_s ","@state context frame_self  to_s "," context frame  context frame locals  "," context frame @state context frame_locals  ","@state context frame_ context frame locals  ","@state context frame_@state context frame_locals  "]}," Byebug Helpers VarHelper var_instance":{"type":"method","name":"var_instance","children":[],"call":[" var_list "," binding ","obj instance_eval ","obj instance_variables "," warning_eval "," bb_warning_eval "," single_thread_eval "," warning_eval  instance_eval "," bb_warning_eval  instance_eval "," single_thread_eval  instance_eval "," warning_eval  instance_variables "," bb_warning_eval  instance_variables "," single_thread_eval  instance_variables "]}," Byebug Helpers VarHelper var_global":{"type":"method","name":"var_global","children":[],"call":[" var_list ","(sym :$IGNORECASE) include? "," global_variables reject "," global_variables "]}," Byebug Helpers VarHelper var_list":{"type":"method","name":"var_list","children":[],"call":[" puts "," prv "," safe_inspect "," silent_eval ","name to_s ","ary sort map ","ary sort ","b eval to_s ","b eval ","v to_s ","b eval inspect "]}," Byebug Helpers ToggleHelper n_displays":{"type":"method","name":"n_displays","children":[],"call":["Byebug  displays size ","Byebug  displays "]}," Byebug Helpers ToggleHelper select_breakpoints":{"type":"method","name":"select_breakpoints","children":[],"call":["selected_ids include? ","b id ","all_breakpoints select ","selected_ids << "," raise "," get_int ","all_breakpoints last id ","all_breakpoints last ","args split each ","args split ","args nil? ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints sort_by  select ","Byebug  breakpoints sort_by  last id ","Byebug  breakpoints sort_by  last "]}," Byebug Helpers ToggleHelper enable_disable_display":{"type":"method","name":"enable_disable_display","children":[],"call":["Byebug  displays [] []= ","is_enable == ","Byebug  displays [] ","pos - ","Byebug  displays "," raise ","err nil? "," get_int "," n_displays ","selected_displays each "," n_displays + ","args split "," pr "," n_displays zero? ","display [] []= ","enable == ","display [] "," errmsg ","display size ","display size + ","args nil? ","0 == ","@state display ","Byebug  @state display s [] []= ","Byebug  @state display s [] ","Byebug  @state display s "," n_@state display s ","args split  each ","selected_@state display s each "," n_@state display s + "," n_@state display s zero? ","@state display  [] []= ","@state display  [] ","@state display  size ","@state display  size + ","@state @state display  "]}," Byebug Helpers ToggleHelper enable_disable_breakpoints":{"type":"method","name":"enable_disable_breakpoints","children":[],"call":["b enabled= "," puts "," pr ","b id "," raise ","b expr "," syntax_valid? ! "," syntax_valid? ","is_enable == "," select_breakpoints each "," select_breakpoints ","Breakpoint  none? "," errmsg ","enable == ","selected_breakpoints each ","selected_ids include? ","all_breakpoints select ","selected_ids << "," get_int ","all_breakpoints last id ","all_breakpoints last ","args split each ","args split ","args nil? ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints sort_by  select ","Byebug  breakpoints sort_by  last id ","Byebug  breakpoints sort_by  last "]}," Byebug Helpers ThreadHelper debug_flag":{"type":"method","name":"debug_flag","children":[],"call":["ctx ignored? "]}," Byebug Helpers ThreadHelper status_flag":{"type":"method","name":"status_flag","children":[],"call":[" current_thread? ","ctx suspended? "]}," Byebug Helpers ThreadHelper location":{"type":"method","name":"location","children":[],"call":["backtrace [] lineno ","backtrace [] ","backtrace [] path ","ctx thread backtrace_locations ","ctx thread "," context location "," context ","ctx == ","Byebug  current_context ","ctx thread backtrace_locations  [] lineno ","ctx thread backtrace_locations  [] ","ctx thread backtrace_locations  [] path ","ctx thread ctx thread backtrace_locations _locations "]}," Byebug Helpers ThreadHelper context_from_thread":{"type":"method","name":"context_from_thread","children":[],"call":[" pr ","ctx ignored? ","ctx == "," context ","ctx nil? ","c thnum to_s == ","c thnum to_s ","c thnum ","Byebug  contexts find ","Byebug  contexts ","@state context "]}," Byebug Helpers ThreadHelper current_thread?":{"type":"method","name":"current_thread?","children":[],"call":["ctx thread == ","Thread  current ","ctx thread "]}," Byebug Helpers ThreadHelper thread_arguments":{"type":"method","name":"thread_arguments","children":[],"call":[" current_thread? ","ctx thread status ","ctx thread ","Process  pid "," location ","ctx thread inspect ","ctx thnum "," debug_flag "," status_flag ","context thread == ","Thread  current ","context thread ","context thread status ","context thread inspect ","context thnum ","backtrace [] lineno ","backtrace [] ","backtrace [] path ","context thread backtrace_locations ","@state line ","@state file ","context == ","Byebug  current_context ","context ignored? ","context suspended? ","ctx thread backtrace_locations "," context location "," context ","ctx == ","ctx ignored? ","ctx suspended? ","context thread backtrace_locations  [] lineno ","ctx thread backtrace_locations  [] lineno ","context thread backtrace_locations  [] ","ctx thread backtrace_locations  [] ","context thread backtrace_locations  [] path ","ctx thread backtrace_locations  [] path ","context thread context thread backtrace_locations _locations ","context thread ctx thread backtrace_locations _locations ","ctx thread context thread backtrace_locations _locations ","ctx thread ctx thread backtrace_locations _locations "]}," Byebug Helpers ThreadHelper display_context":{"type":"method","name":"display_context","children":[],"call":[" puts "," pr "," thread_arguments "]}," Byebug Helpers StringHelper deindent":{"type":"method","name":"deindent","children":[],"call":["str gsub "]}," Byebug Helpers StringHelper prettify":{"type":"method","name":"prettify","children":[],"call":["\n + + ","\n + "," deindent ","str gsub "]}," Byebug Helpers StringHelper camelize":{"type":"method","name":"camelize","children":[],"call":["str dup split map join ","str dup split map ","str dup split ","str dup "]}," Byebug Helpers ReflectionHelper commands":{"type":"method","name":"commands","children":[],"call":["c name =~ ","c name ","c is_a? ","(send\n  (send nil :constants\n    (false)) :map) select "," const_get "," constants map "," constants "]}," Byebug Helpers PathHelper glob_for":{"type":"method","name":"glob_for","children":[],"call":["Dir  glob ","File  join "," root_path "]}," Byebug Helpers PathHelper all_files":{"type":"method","name":"all_files","children":[],"call":[" gem_files + "," test_files "," gem_files ","Dir  glob ","File  expand_path "]}," Byebug Helpers PathHelper gem_files":{"type":"method","name":"gem_files","children":[],"call":["(send nil :bin_file) + "," lib_files "," bin_file ","(send nil :bin_file) + + "," ext_files "]}," Byebug Helpers PathHelper test_files":{"type":"method","name":"test_files","children":[],"call":[" glob_for "," expand_from_root "]}," Byebug Helpers PathHelper lib_files":{"type":"method","name":"lib_files","children":[],"call":[" glob_for ","Dir  glob ","File  expand_path "," expand_from_root "]}," Byebug Helpers PathHelper root_path":{"type":"method","name":"root_path","children":[],"call":["File  expand_path "," __dir__ ","File  join "," bin_file "]}," Byebug Helpers PathHelper bin_file":{"type":"method","name":"bin_file","children":[],"call":["File  join "," root_path ","Gem  bin_path "]}," Byebug Helpers ParseHelper without_stderr":{"type":"method","name":"without_stderr","children":[],"call":["StringIO  new ","$stderr reopen ","StringIO  new  reopen "]}," Byebug Helpers ParseHelper parse_steps":{"type":"method","name":"parse_steps","children":[],"call":[" get_int "]}," Byebug Helpers ParseHelper syntax_valid?":{"type":"method","name":"syntax_valid?","children":[],"call":["RubyVM InstructionSequence  compile "," without_stderr "]}," Byebug Helpers ParseHelper get_int":{"type":"method","name":"get_int","children":[],"call":[" pr ","int > ","int < ","str to_i ","str !~ ","(str \"\\\\A-?[0-9]+\\\\z\") match? "," errmsg ","str to_i  > ","str to_i  < ","  pr msg "]}," Byebug Helpers FrameHelper index_from_start":{"type":"method","name":"index_from_start","children":[],"call":[" context stack_size + "," context stack_size "," context ","i >= ","index >= "]}," Byebug Helpers FrameHelper direction":{"type":"method","name":"direction","children":[],"call":["step / ","step abs "]}," Byebug Helpers FrameHelper frame_err":{"type":"method","name":"frame_err","children":[],"call":[" errmsg "," pr "]}," Byebug Helpers FrameHelper out_of_bounds?":{"type":"method","name":"out_of_bounds?","children":[],"call":["(erange\n  (int 0)\n  (send\n    (send nil :context) :stack_size)) cover? ! ","(erange\n  (int 0)\n  (send\n    (send nil :context) :stack_size)) cover? "," context stack_size "," context ","(erange\n  (int 0)\n  (send\n    (send nil :context) :stack_size)) include? ! ","(erange\n  (int 0)\n  (send\n    (send nil :context) :stack_size)) include? "]}," Byebug Helpers FrameHelper navigate_to_frame":{"type":"method","name":"navigate_to_frame","children":[],"call":["current_jumps == ","jump_no abs ","Frame  new c_frame? ","Frame  new "," context "," out_of_bounds? "," direction "," loop "," context frame pos "," context frame ","@state c_frame? ","current_pos >= ","@state context stack_size ","@state context ","current_pos < ","@state frame ","jump_no == "," context frame pos  >= ","@state frame  >= "," context frame pos  < ","@state frame  < "]}," Byebug Helpers FrameHelper adjust_frame":{"type":"method","name":"adjust_frame","children":[],"call":[" processor prev_line= "," processor "," context frame= "," context "," frame_err ","new_frame < ","new_frame >= "," context stack_size ","new_frame negative? ","@state prev_line= ","@state line= ","@state context frame_line ","@state frame ","@state context ","@state file= ","@state context frame_file ","@state frame= "," errmsg "," pr ","abs_frame < ","abs_frame >= ","@state context stack_size "," navigate_to_frame ","@state c_frame? "," switch_to_frame "," navigate_to_frame  < "," switch_to_frame  < "," navigate_to_frame  >= "," switch_to_frame  >= "]}," Byebug Helpers FrameHelper jump_frames":{"type":"method","name":"jump_frames","children":[],"call":[" adjust_frame "," navigate_to_frame "]}," Byebug Helpers FrameHelper switch_to_frame":{"type":"method","name":"switch_to_frame","children":[],"call":[" adjust_frame "," frame_err ","Frame  new c_frame? ","Frame  new "," context "," index_from_start ","@state context stack_size + ","@state context stack_size ","@state context ","frame_no >= "]}," Byebug Helpers FileHelper virtual_file?":{"type":"method","name":"virtual_file?","children":[],"call":["(str \"(irb)\") include? "]}," Byebug Helpers FileHelper shortpath":{"type":"method","name":"shortpath","children":[],"call":["File  join ","components [] ","components size <= ","components size "," Pathname each_filename to_a "," Pathname each_filename "," Pathname "," Pathname each_filename to_a  [] "," Pathname each_filename to_a  size <= "," Pathname each_filename to_a  size "]}," Byebug Helpers FileHelper normalize":{"type":"method","name":"normalize","children":[],"call":["File  realpath ","File  exist? ","File  basename ","Setting  [] "," virtual_file? ","File  expand_path ","(str \"(irb)\") include? ","File  realFile  expand_path  ","File  expand_File  expand_path  "]}," Byebug Helpers FileHelper n_lines":{"type":"method","name":"n_lines","children":[],"call":["acc + ","File  foreach reduce ","File  foreach ","a + "]}," Byebug Helpers FileHelper get_line":{"type":"method","name":"get_line","children":[],"call":["f gets ","f lineno == ","lineno - ","f lineno ","File  open "]}," Byebug Helpers FileHelper get_lines":{"type":"method","name":"get_lines","children":[],"call":["acc << ","elem chomp ","File  foreach reduce ","File  foreach ","a << ","e chomp "]}," Byebug Helpers EvalHelper safe_to_s":{"type":"method","name":"safe_to_s","children":[],"call":["var to_s "]}," Byebug Helpers EvalHelper safe_inspect":{"type":"method","name":"safe_inspect","children":[],"call":[" safe_to_s ","var inspect "]}," Byebug Helpers EvalHelper in_new_thread":{"type":"method","name":"in_new_thread","children":[],"call":["(send\n  (const nil :Thread) :new) join ","Thread  new "]}," Byebug Helpers EvalHelper allowing_other_threads":{"type":"method","name":"allowing_other_threads","children":[],"call":["Byebug  lock ","Byebug  unlock ","(send\n  (const nil :Thread) :new) join ","Thread  new "]}," Byebug Helpers EvalHelper warning_msg":{"type":"method","name":"warning_msg","children":[],"call":["e message ","e class ","exception message ","exception class "," pr "]}," Byebug Helpers EvalHelper error_msg":{"type":"method","name":"error_msg","children":[],"call":["locations join ","at map "," warning_msg ","at shift ","e backtrace ","exception backtrace "," pr ","e message ","e class ","loce backtrace ions join ","locexception backtrace ions join ","e backtrace  map ","exception backtrace  map ","e backtrace  shift ","exception backtrace  shift "]}," Byebug Helpers EvalHelper msg":{"type":"method","name":"msg","children":[],"call":[" pr "," warning_msg "," error_msg ","Setting  [] "," warning_ warning_msg  "," warning_ error_msg  "," error_ warning_msg  "," error_ error_msg  "]}," Byebug Helpers EvalHelper safe_eval":{"type":"method","name":"safe_eval","children":[],"call":["binding eval ","str gsub "," raise "]}," Byebug Helpers EvalHelper warning_eval":{"type":"method","name":"warning_eval","children":[],"call":[" errmsg "," msg "," safe_eval "," warning_msg "]}," Byebug Helpers EvalHelper error_eval":{"type":"method","name":"error_eval","children":[],"call":[" raise "," msg "," safe_eval "," error_msg "," fail "]}," Byebug Helpers EvalHelper silent_eval":{"type":"method","name":"silent_eval","children":[],"call":[" safe_eval ","binding eval "]}," Byebug Helpers EvalHelper multiple_thread_eval":{"type":"method","name":"multiple_thread_eval","children":[],"call":[" warning_eval "," allowing_other_threads "]}," Byebug Helpers EvalHelper separate_thread_eval":{"type":"method","name":"separate_thread_eval","children":[],"call":[" warning_eval "," in_new_thread "," allowing_other_threads "]}," Byebug Helpers BinHelper real_executable?":{"type":"method","name":"real_executable?","children":[],"call":["File  directory? ! ","File  directory? ","File  executable? "]}," Byebug Helpers BinHelper executable_file_extensions":{"type":"method","name":"executable_file_extensions","children":[],"call":["ENV  [] split ","ENV  [] "]}," Byebug Helpers BinHelper search_paths":{"type":"method","name":"search_paths","children":[],"call":["ENV  [] split ","ENV  [] "]}," Byebug Helpers BinHelper find_executable":{"type":"method","name":"find_executable","children":[],"call":[" real_executable? ","File  expand_path ","cmd + "," executable_file_extensions each "," executable_file_extensions "," real_File  expand_path cutable? "," File  expand_path cutable_file_extensions each "," File  expand_path cutable_file_extensions "]}," Byebug Helpers BinHelper which":{"type":"method","name":"which","children":[],"call":[" find_executable ","(nil) each "," search_paths ","File  expand_path ","File  exist? ","File  directory? ! ","File  directory? ","File  executable? ","File  join ","exts each ","ENV  [] split each ","ENV  [] split ","ENV  [] "," find_ find_executable cutable "," find_File  join cutable ","File   find_executable cutable? ","File  File  join cutable? ","ENV  [] split  each "]}," Byebug Frame prefix_and_default":{"type":"method","name":"prefix_and_default","children":[],"call":["arg_type == "]}," Byebug Frame use_short_style?":{"type":"method","name":"use_short_style?","children":[],"call":[" locals empty? "," locals ","arg [] nil? ","arg [] ","Setting  [] == ","Setting  [] "]}," Byebug Frame ruby_args":{"type":"method","name":"ruby_args","children":[],"call":["meth_obj parameters "," _class instance_method "," _class "," _binding eval "," _binding "," _self method "," _self "," _class instance_method  parameters "," _self method  parameters "]}," Byebug Frame c_args":{"type":"method","name":"c_args","children":[],"call":[" _class instance_method parameters "," _class instance_method "," _method "," _class "," _self to_s != "," _self to_s "," _self "," _self method parameters "," _self method "]}," Byebug Frame to_hash":{"type":"method","name":"to_hash","children":[],"call":["File  expand_path "," deco_file "," line "," deco_call "," deco_pos "," mark "]}," Byebug Frame c_frame?":{"type":"method","name":"c_frame?","children":[],"call":[" _binding nil? "," _binding "]}," Byebug Frame mark":{"type":"method","name":"mark","children":[],"call":[" c_frame? "," current? "]}," Byebug Frame deco_pos":{"type":"method","name":"deco_pos","children":[],"call":[" format "," pos "]}," Byebug Frame deco_file":{"type":"method","name":"deco_file","children":[],"call":[" shortpath "," file ","File  expand_path ","Setting  [] "]}," Byebug Frame deco_call":{"type":"method","name":"deco_call","children":[],"call":[" deco_block + + + "," deco_args "," deco_block + + "," deco_method "," deco_block + "," deco_class "," deco_block "]}," Byebug Frame deco_args":{"type":"method","name":"deco_args","children":[],"call":["my_args join ","arg [] "," locals [] class "," locals [] "," locals "," use_short_style? "," prefix_and_default "," args map "," args "," args empty? "]}," Byebug Frame deco_method":{"type":"method","name":"deco_method","children":[],"call":[" _method [] "," _method "]}," Byebug Frame deco_block":{"type":"method","name":"deco_block","children":[],"call":[" _method [] "," _method "]}," Byebug Frame deco_class":{"type":"method","name":"deco_class","children":[],"call":[" _class "," _class to_s empty? "," _class to_s ","Setting  [] == ","Setting  [] "]}," Byebug Frame args":{"type":"method","name":"args","children":[],"call":[" ruby_args "," c_args "," _binding "]}," Byebug Frame locals":{"type":"method","name":"locals","children":[],"call":["a []= "," _binding local_variable_get "," _binding "," _binding local_variables each_with_object "," _binding local_variables "," _binding eval "," _binding eval each_with_object "]}," Byebug Frame current?":{"type":"method","name":"current?","children":[],"call":["@context frame pos == "," pos ","@context frame pos ","@context frame "]}," Byebug Frame _method":{"type":"method","name":"_method","children":[],"call":["@context frame_method "," pos "]}," Byebug Frame _class":{"type":"method","name":"_class","children":[],"call":["@context frame_class "," pos "]}," Byebug Frame _binding":{"type":"method","name":"_binding","children":[],"call":["@context frame_binding "," pos "]}," Byebug Frame _self":{"type":"method","name":"_self","children":[],"call":["@context frame_self "," pos "]}," Byebug Frame line":{"type":"method","name":"line","children":[],"call":["@context frame_line "," pos "]}," Byebug Frame file":{"type":"method","name":"file","children":[],"call":["@context frame_file "," pos "]}," Byebug Frame initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug CommandNotFound build_cmd":{"type":"method","name":"build_cmd","children":[],"call":["args compact join ","args compact "]}," Byebug CommandNotFound help":{"type":"method","name":"help","children":[],"call":[" build_cmd "]}," Byebug CommandNotFound name":{"type":"method","name":"name","children":[],"call":[" build_cmd "]}," Byebug CommandNotFound initialize":{"type":"method","name":"initialize","children":[],"call":[" help "," name "]}," Byebug rc_dirs":{"type":"method","name":"rc_dirs","children":[],"call":["(send\n  (const nil :ENV) :[]\n  (str \"HOME\")) compact uniq ","(send\n  (const nil :ENV) :[]\n  (str \"HOME\")) compact ","Dir  pwd ","ENV  [] "]}," Byebug run_rc_file":{"type":"method","name":"run_rc_file","children":[],"call":["ScriptProcessor  new process_commands ","ScriptProcessor  new ","ScriptInterface  new ","Context  interface= ","File  exist? ","File  expand_path ","File  join "," init_file ","Context  interface ","Context  ScriptInterface  new = ","Context  ScriptInterface  new  "]}," Byebug load_settings":{"type":"method","name":"load_settings","children":[],"call":[]}," Byebug Context ignored_file?":{"type":"method","name":"ignored_file?","children":[],"call":[" class ignored_files include? "," class ignored_files "," class "]}," Byebug Context processor":{"type":"method","name":"processor","children":[],"call":[" class processor new "," class interface "," class "," class processor "]}," Byebug Context at_end":{"type":"method","name":"at_end","children":[],"call":[" processor at_end "," processor "," ignored_file? "," file "]}," Byebug Context stack_size":{"type":"method","name":"stack_size","children":[],"call":["(send\n  (block\n    (send\n      (send nil :backtrace) :drop_while)\n    (args\n      (arg :l))\n    (send nil :ignored_file?\n      (send\n        (send\n          (lvar :l) :first) :path))) :take_while) size "," ignored_file? ! "," ignored_file? ","l first path ","l first ","(send\n  (send nil :backtrace) :drop_while) take_while "," backtrace drop_while "," backtrace ","(send\n  (block\n    (send\n      (lvar :backtrace) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size "," ignored ! "," ignored ","l path ","(send\n  (lvar :backtrace) :drop_while) take_while ","l path == ","backtrace drop_while ","Thread  current backtrace_locations ","Thread  current "," print ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :backtrace) :drop_while)\n        (args\n          (arg :l))\n        (send\n          (send nil :ignored\n            (send\n              (lvar :l) :path)) :!)) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (block\n    (send\n      (lvar :backtrace) :drop_while)\n    (args\n      (arg :l))\n    (send\n      (send nil :ignored\n        (send\n          (lvar :l) :path)) :!)) :drop_while) take_while ","(send\n  (lvar :backtrace) :drop_while) drop_while ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :backtrace) :drop_while)\n        (args\n          (arg :l))\n        (send\n          (send nil :ignored\n            (send\n              (lvar :l) :path)) :!)) :drop_while)\n    (args\n      (arg :l))\n    (send nil :ignored\n      (send\n        (lvar :l) :path))) :take_while) size ","backtrace size ","(send\n  (block\n    (send\n      (send nil :Thread  current backtrace_locations ) :drop_while)\n    (args\n      (arg :l))\n    (send nil :ignored_file?\n      (send\n        (send\n          (lvar :l) :first) :path))) :take_while) size ","(send\n  (send nil :Thread  current backtrace_locations ) :drop_while) take_while "," Thread  current backtrace_locations  drop_while "," Thread  current backtrace_locations  ","(send\n  (block\n    (send\n      (lvar :Thread  current backtrace_locations ) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (lvar :Thread  current backtrace_locations ) :drop_while) take_while ","Thread  current backtrace_locations  drop_while ","Thread  current Thread  current backtrace_locations _locations ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :Thread  current backtrace_locations ) :drop_while)\n        (args\n          (arg :l))\n        (send\n          (send nil :ignored\n            (send\n              (lvar :l) :path)) :!)) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (block\n    (send\n      (lvar :Thread  current backtrace_locations ) :drop_while)\n    (args\n      (arg :l))\n    (send\n      (send nil :ignored\n        (send\n          (lvar :l) :path)) :!)) :drop_while) take_while ","(send\n  (lvar :Thread  current backtrace_locations ) :drop_while) drop_while ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :Thread  current backtrace_locations ) :drop_while)\n        (args\n          (arg :l))\n        (send\n          (send nil :ignored\n            (send\n              (lvar :l) :path)) :!)) :drop_while)\n    (args\n      (arg :l))\n    (send nil :ignored\n      (send\n        (lvar :l) :path))) :take_while) size ","Thread  current backtrace_locations  size "]}," Byebug Context full_location":{"type":"method","name":"full_location","children":[],"call":[" get_line "," line "," file "," location "," virtual_file? "]}," Byebug Context location":{"type":"method","name":"location","children":[],"call":[" line "," normalize "," file "]}," Byebug Context frame=":{"type":"method","name":"frame=","children":[],"call":["Frame  new "]}," Byebug Context frame":{"type":"method","name":"frame","children":[],"call":["Frame  new "]}," Byebug Context interface":{"type":"method","name":"interface","children":[],"call":["LocalInterface  new "]}," Byebug Context ignored_files":{"type":"method","name":"ignored_files","children":[],"call":[" lib_files "," lib_files + "," bin_file ","Byebug  mode == ","Byebug  mode "]}," Byebug WhereCommand print_backtrace":{"type":"method","name":"print_backtrace","children":[],"call":[" print ","Frame  new to_hash ","Frame  new "," context "," prc "," context stack_size "," get_pr_arguments ","@state context stack_size ","@state context "]}," Byebug WhereCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug VarCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand LocalCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_local "]}," Byebug VarCommand LocalCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand LocalCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand LocalCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand InstanceCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_instance ","@match [] "]}," Byebug VarCommand InstanceCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand InstanceCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand InstanceCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand GlobalCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_global "]}," Byebug VarCommand GlobalCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand GlobalCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand GlobalCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand ConstCommand str_obj":{"type":"method","name":"str_obj","children":[],"call":["@match [] "]}," Byebug VarCommand ConstCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," prv ","obj const_get ","constants sort map ","constants sort "," warning_eval "," str_obj "," errmsg "," pr ","obj is_a? "," single_thread_eval "," warning_eval  const_get "," single_thread_eval  const_get "," warning_eval  sort map "," single_thread_eval  sort map "," warning_eval  sort "," single_thread_eval  sort "," str_ warning_eval  "," str_ single_thread_eval  "," warning_eval  is_a? "," single_thread_eval  is_a? "]}," Byebug VarCommand ConstCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand ConstCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand ConstCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand ArgsCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_args "]}," Byebug VarCommand ArgsCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand ArgsCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand ArgsCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand AllCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_local "," var_instance "," var_global "]}," Byebug VarCommand AllCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand AllCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarCommand AllCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug UpCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug UntracevarCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg "," pr "," puts "," untrace_var "," global_variables include? "," global_variables ","@match [] "," eval "," untrace_@match []  "," global_@match [] iables include? "," global_@match [] iables "]}," Byebug UntracevarCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug UntracevarCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug UntracevarCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug UndisplayCommand execute":{"type":"method","name":"execute","children":[],"call":["d []= ","Byebug  displays each ","Byebug  displays "," confirm "," pr ","Byebug  displays [] []= ","Byebug  displays [] ","pos - "," errmsg ","err nil? "," get_int ","Byebug  displays size ","@match [] ","last_display []= ","@state display each ","@state display ","@state display [] []= ","@state display [] ","@state display size ","Byebug  displays []  []= "]}," Byebug UndisplayCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug UndisplayCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug UndisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug TracevarCommand on_change":{"type":"method","name":"on_change","children":[],"call":[" context step_out "," context "," puts "," pr "," byebug ","@state context step_out ","@state context "]}," Byebug TracevarCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," pr "," on_change "," trace_var "," instance_eval ","@match [] !~ ","@match [] "," errmsg "," global_variables include? "," global_variables "," trace_@match []  "," global_@match [] iables include? "," global_@match [] iables "]}," Byebug TracevarCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug TracevarCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug TracevarCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand SwitchCommand execute":{"type":"method","name":"execute","children":[],"call":[" processor proceed! "," processor ","context switch "," display_context "," errmsg "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand SwitchCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand SwitchCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ThreadCommand SwitchCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand StopCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","context suspend "," errmsg "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand StopCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand StopCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ThreadCommand StopCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand ResumeCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","context resume "," errmsg "," pr ","context suspended? "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand ResumeCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand ResumeCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ThreadCommand ResumeCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand ListCommand execute":{"type":"method","name":"execute","children":[],"call":[" print "," thread_arguments "," prc ","Byebug  contexts sort_by ","Byebug  contexts ","Byebug  Byebug  contexts sort_by  sort_by ","Byebug  Byebug  contexts sort_by  "]}," Byebug ThreadCommand ListCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand ListCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ThreadCommand ListCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand CurrentCommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context "," context "]}," Byebug ThreadCommand CurrentCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand CurrentCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug ThreadCommand CurrentCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug StepCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug SourceCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ShowCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug SetCommand get_onoff":{"type":"method","name":"get_onoff","children":[],"call":[" pr ","arg nil? "," raise "," print "]}," Byebug SetCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug SaveCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug RestartCommand prepend_ruby_bin":{"type":"method","name":"prepend_ruby_bin","children":[],"call":["cmd unshift ","RbConfig  ruby "," which != "," which ","cmd first "]}," Byebug RestartCommand prepend_byebug_bin":{"type":"method","name":"prepend_byebug_bin","children":[],"call":["cmd unshift "," bin_file ","Byebug  mode == ","Byebug  mode "]}," Byebug RestartCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug QuitCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug PryCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug NextCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug MethodCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ListCommand source_file_formatter":{"type":"method","name":"source_file_formatter","children":[],"call":["SourceFileFormatter  new ","n == "," frame line "," frame "," lambda "," frame file "]}," Byebug ListCommand split_range":{"type":"method","name":"split_range","children":[],"call":["str split "]}," Byebug ListCommand upper_bound":{"type":"method","name":"upper_bound","children":[],"call":[" split_range [] "," split_range "]}," Byebug ListCommand lower_bound":{"type":"method","name":"lower_bound","children":[],"call":[" split_range [] "," split_range "]}," Byebug ListCommand display_lines":{"type":"method","name":"display_lines","children":[],"call":[" puts "," source_file_formatter lines join "," source_file_formatter lines "," source_file_formatter "," frame file "," frame "," format ","l [] ","max to_s size ","max to_s ","l [] == ","@state line ","(irange\n  (lvar :min)\n  (lvar :max)) to_a zip map ","(irange\n  (lvar :min)\n  (lvar :max)) to_a zip ","lines [] ","max - ","min - ","(irange\n  (lvar :min)\n  (lvar :max)) to_a ","@state file ","lineno + ","lineno + == ","(irange\n  (lvar :min)\n  (lvar :max)) include? ","lineno + > ","File  foreach with_index ","File  foreach "," frame line ","(irange\n  (lvar :min)\n  (lvar :max)) cover? "]}," Byebug ListCommand move":{"type":"method","name":"move","children":[],"call":["line send "]}," Byebug ListCommand parse_range":{"type":"method","name":"parse_range","children":[],"call":[" move "," size - "," size "," size / "," amend_final "," raise "," get_int "," max_line "," upper_bound "," lower_bound ","size - ","size / "," amend ","input split [] ","input split "," fail "]}," Byebug ListCommand auto_range":{"type":"method","name":"auto_range","children":[],"call":[" source_file_formatter range_from "," move "," size "," source_file_formatter "," source_file_formatter range_around "," frame line "," frame ","prev_line nil? ","direction == "," processor prev_line "," processor "," processor prev_line  nil? "," processor  processor prev_line  "]}," Byebug ListCommand valid_range?":{"type":"method","name":"valid_range?","children":[],"call":["(irange\n  (int 1)\n  (send nil :max_line)) cover? "," max_line ","first <= ","(irange\n  (int 1)\n  (lvar :max)) include? ","(irange\n  (int 1)\n  (lvar :max)) cover? "]}," Byebug ListCommand range":{"type":"method","name":"range","children":[],"call":[" raise "," valid_range? "," parse_range "," auto_range ","@match [] "," set_range ","(send\n  (const nil :Setting) :[]\n  (sym :listsize)) min ","Setting  [] ","(send\n  (const nil :Setting) :[]\n  (sym :list(send\n  (const nil :Setting) :[]\n  (sym :listsize)) min )) min "]}," Byebug ListCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug KillCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug IrbCommand with_clean_argv":{"type":"method","name":"with_clean_argv","children":[],"call":["$ARGV concat ","$ARGV clear ","$ARGV dup ","ARGV  concat ","ARGV  clear ","ARGV  dup "]}," Byebug IrbCommand execute":{"type":"method","name":"execute","children":[],"call":["IRB  start "," with_clean_argv "," errmsg "," pr "," processor interface instance_of? "," processor interface "," processor ","@state previous_line= "," print ","@state location ","@state proceed ","@state context step_over ","@state frame_pos ","@state context ","Command  settings [] ","Command  settings ","@state context step_into ","IRB  start_session "," get_binding "," throw ","@state interface kind_of? ","@state interface ","Setting  [] ","@state interface is_a? "," processor interface is_a? ","@state IRB  start_session ext step_over ","@state IRB  start_session ext ","@state IRB  start_session ext step_into "]}," Byebug IrbCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug IrbCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug IrbCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InterruptCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InterruptCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug InfoCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand ProgramCommand format_stop_reason":{"type":"method","name":"format_stop_reason","children":[],"call":[" puts "]}," Byebug InfoCommand ProgramCommand execute":{"type":"method","name":"execute","children":[],"call":[" format_stop_reason "," context stop_reason "," context "," puts "]}," Byebug InfoCommand ProgramCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand ProgramCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug InfoCommand ProgramCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand LineCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," frame file "," frame "," frame line "]}," Byebug InfoCommand LineCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand LineCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug InfoCommand LineCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand FileCommand info_file_sha1":{"type":"method","name":"info_file_sha1","children":[],"call":["Digest SHA1  hexdigest "," require "]}," Byebug InfoCommand FileCommand info_file_mtime":{"type":"method","name":"info_file_mtime","children":[],"call":["File  stat mtime ","File  stat "]}," Byebug InfoCommand FileCommand info_file_breakpoints":{"type":"method","name":"info_file_breakpoints","children":[],"call":["breakpoints to_a sort join ","breakpoints to_a sort ","breakpoints to_a ","Breakpoint  potential_lines ","Breakpoint  potential_lines  to_a sort join ","Breakpoint  potential_lines  to_a sort ","Breakpoint  potential_lines  to_a "]}," Byebug InfoCommand FileCommand info_file_basic":{"type":"method","name":"info_file_basic","children":[],"call":[" n_lines "," n_lines == ","File  exist? ","File  expand_path ","File  expand_File  expand_path  "]}," Byebug InfoCommand FileCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," prettify "," info_file_sha1 "," info_file_mtime "," info_file_breakpoints "," info_file_basic "," errmsg "," pr ","File  exist? "," frame file "," frame ","@match [] ","(str \"\\n\") gsub "]}," Byebug InfoCommand FileCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand FileCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug InfoCommand FileCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand DisplayCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," format ","d [] ","i + ","Byebug  displays each_with_index ","Byebug  displays ","Byebug  displays find "]}," Byebug InfoCommand DisplayCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand DisplayCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug InfoCommand DisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand BreakpointsCommand info_breakpoint":{"type":"method","name":"info_breakpoint","children":[],"call":[" puts ","hits > ","brkpt hit_count "," format ","brkpt expr ","brkpt expr nil? ","brkpt pos ","brkpt source ","brkpt enabled? ","brkpt id ","hits positive? ","brkpt hit_count  > ","brkpt hit_count  positive? "]}," Byebug InfoCommand BreakpointsCommand execute":{"type":"method","name":"execute","children":[],"call":[" info_breakpoint ","breakpoints each "," puts "," errmsg ","breakpoints empty? ","indices member? ","b id ","breakpoints select ","@match [] split map ","@match [] split ","@match [] ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints empty? ","Byebug  breakpoints sort_by  each ","Byebug  breakpoints sort_by  empty? ","@match [] split map  member? ","Byebug  breakpoints sort_by  select ","Byebug  Byebug  breakpoints sort_by  sort_by ","Byebug  Byebug  breakpoints sort_by  ","Byebug  Byebug  breakpoints sort_by  empty? "]}," Byebug InfoCommand BreakpointsCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand BreakpointsCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug InfoCommand BreakpointsCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug HistoryCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts ","history to_s "," get_int ","@match [] "," processor interface history "," processor interface "," processor "," errmsg "," print ","Byebug History  to_s ","Byebug Setting  [] ","History  to_s ","Setting  [] "," err ","history size ","@state interface history ","@state interface "," processor interface history  to_s ","@state interface history  to_s "," processor interface  processor interface history  "," processor interface @state interface history  "," processor interface history  size ","@state interface history  size ","history  get_int  ","@state interface  processor interface history  ","@state interface @state interface history  "]}," Byebug HistoryCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug HistoryCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug HistoryCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug HelpCommand subcommand":{"type":"method","name":"subcommand","children":[],"call":[" command subcommand_list match ","@match [] "," command subcommand_list "," command "]}," Byebug HelpCommand command":{"type":"method","name":"command","children":[],"call":[" processor command_list match ","@match [] "," processor command_list "," processor "]}," Byebug HelpCommand help_for":{"type":"method","name":"help_for","children":[],"call":[" puts ","cmd help "," raise ","CommandNotFound  new "," command "," fail "]}," Byebug HelpCommand help_for_all":{"type":"method","name":"help_for_all","children":[],"call":[" puts "," processor command_list to_s "," processor command_list "," processor "]}," Byebug HelpCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug FrameCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug FinishCommand max_frames":{"type":"method","name":"max_frames","children":[],"call":[" context stack_size - "," context frame pos "," context frame "," context "," context stack_size "]}," Byebug FinishCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand DisplayCommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_display ","@match [] "]}," Byebug EnableCommand DisplayCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand DisplayCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug EnableCommand DisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EnableCommand BreakpointsCommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_breakpoints ","@match [] "]}," Byebug EnableCommand BreakpointsCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand BreakpointsCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug EnableCommand BreakpointsCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EditCommand edit_error":{"type":"method","name":"edit_error","children":[],"call":[" errmsg "," pr "]}," Byebug EditCommand editor":{"type":"method","name":"editor","children":[],"call":["ENV  [] "]}," Byebug EditCommand location":{"type":"method","name":"location","children":[],"call":["File  expand_path ","@pos_match captures ","(str \"([^:]+)[:]([0-9]+)\") match "," frame line "," frame "," errmsg "," pr "," frame file ","matched nil? ","(str \"([^:]+)[:]([0-9]+)\") match  captures "," frame  frame line  "," frame  frame file  "]}," Byebug EditCommand execute":{"type":"method","name":"execute","children":[],"call":["Kernel  system "," editor "," edit_error ","File  readable? ","File  exist? "," location ","@match [] "," errmsg "," system ","ENV  [] ","@pos_match captures ","(str \"([^:]+)[:]([0-9]+)\") match ","@state line ","@state file ","@match [] ! "," pr ","File  expand_path ","(str \"([^:]+)[:]([0-9]+)\") match  captures ","@state @state line  ","@state @match []  ","@state @state file  ","@state File  expand_path  "]}," Byebug EditCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EditCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug EditCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DownCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisplayCommand eval_expr":{"type":"method","name":"eval_expr","children":[],"call":[" error_eval inspect "," error_eval "," thread_safe_eval inspect "," thread_safe_eval "]}," Byebug DisplayCommand print_display_expressions":{"type":"method","name":"print_display_expressions","children":[],"call":[" print "," eval_expr ","index + "," prc ","Byebug  displays "," bb_warning_eval inspect "," bb_warning_eval ","@state display "]}," Byebug DisplayCommand display_expression":{"type":"method","name":"display_expression","children":[],"call":[" print "," pr "," eval_expr ","Byebug  displays size ","Byebug  displays "," bb_warning_eval inspect "," bb_warning_eval ","@state display size ","@state display "]}," Byebug DisplayCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand DisplayCommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_display ","@match [] "]}," Byebug DisableCommand DisplayCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand DisplayCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DisableCommand DisplayCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisableCommand BreakpointsCommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_breakpoints ","@match [] "]}," Byebug DisableCommand BreakpointsCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand BreakpointsCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DisableCommand BreakpointsCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DeleteCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DebugCommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," safe_inspect "," separate_thread_eval ","@match [] "," help "]}," Byebug DebugCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DebugCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug DebugCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ContinueCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ConditionCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug CatchCommand info":{"type":"method","name":"info","children":[],"call":[" puts ","exception is_a? ","Byebug  catchpoints each_key ","Byebug  catchpoints ","Byebug  catchpoints empty? ! ","Byebug  catchpoints empty? ","Byebug  catchpoints each "]}," Byebug CatchCommand clear":{"type":"method","name":"clear","children":[],"call":["Byebug  catchpoints clear ","Byebug  catchpoints "," confirm "," pr "]}," Byebug CatchCommand add":{"type":"method","name":"add","children":[],"call":["Byebug  add_catchpoint "," puts "," pr "," errmsg "," warning_eval ","exception is_a? to_s ","exception is_a? "," single_thread_eval "]}," Byebug CatchCommand remove":{"type":"method","name":"remove","children":[],"call":["Byebug  catchpoints delete ","Byebug  catchpoints "," puts "," pr "," errmsg ","Byebug  catchpoints member? "]}," Byebug CatchCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug BreakCommand valid_breakpoints_for":{"type":"method","name":"valid_breakpoints_for","children":[],"call":["source_file_formatter lines_around join chomp ","source_file_formatter lines_around join ","source_file_formatter lines_around ","SourceFileFormatter  new ","potential_lines include? "," lambda ","Breakpoint  potential_lines ","SourceFileFormatter  new  lines_around join chomp ","SourceFileFormatter  new  lines_around join ","SourceFileFormatter  new  lines_around ","Breakpoint  potential_lines  include? ","Breakpoint  Breakpoint  potential_lines  "]}," Byebug BreakCommand add_line_breakpoint":{"type":"method","name":"add_line_breakpoint","children":[],"call":["Breakpoint  add ","@match [] "," raise "," pr "," valid_breakpoints_for ","Breakpoint  potential_line? "," n_lines ","line > ","File  realpath ","File  exist? "," fail "]}," Byebug BreakCommand target_object":{"type":"method","name":"target_object","children":[],"call":[" errmsg ","k name ","k is_a? "," error_eval "," warning_eval "," error_eval  name "," warning_eval  name "," error_eval  is_a? "," warning_eval  is_a? "]}," Byebug BreakCommand method_breakpoint":{"type":"method","name":"method_breakpoint","children":[],"call":["Breakpoint  add ","@match [] ","match [] intern ","match [] "," target_object ","location match ","m intern ","k name ","k is_a? "," bb_warning_eval ","Brea bb_warning_eval point  add ","@match [] atch [] ","match [] atch [] intern ","match [] atch [] ","location match [] atch ","match []  intern ","k namatch [] e "," bb_warning_eval  name "," bb_warning_eval  is_a? "]}," Byebug BreakCommand line_breakpoint":{"type":"method","name":"line_breakpoint","children":[],"call":[" add_line_breakpoint ","file_line_match [] to_i ","file_line_match [] ","line_match [] to_i ","line_match [] "," frame file "," frame ","location match ","Breakpoint  add ","@match [] ","l to_i ","File  expand_path "," check_errors ","file_line [] ","line [] ","@state file ","loc match "," add_file_line_match [] to_i _breakpoint "," add_line_match [] to_i _breakpoint "," add_loc match _breakpoint ","file_file_line_match [] to_i _match [] to_i ","file_line_match [] to_i _match [] to_i ","file_loc match _match [] to_i ","file_line_match [] _line_match [] to_i "," frame file _line_match [] to_i ","location match  [] to_i ","file_location match  [] to_i ","loc match _match [] to_i ","file_file_line_match [] to_i _match [] ","file_line_match [] to_i _match [] ","file_loc match _match [] ","file_line_match [] _line_match [] "," frame file _line_match [] ","location match  [] ","file_location match  [] ","loc match _match [] ","line_match [] to_i _match [] to_i ","line_match [] to_i _match [] "," frame file_line_match []  "," frame  frame file  ","file_file_line_match [] to_i  [] ","file_line_match [] to_i  [] ","file_loc match  [] ","file_line_match [] _line [] "," frame file _line [] ","loc match  [] ","line_match [] to_i  [] ","@state file_line_match []  ","@state  frame file  "]}," Byebug BreakCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug CommandList width":{"type":"method","name":"width","children":[],"call":[" map max_by size "," map max_by "," map "]}," Byebug CommandList to_s":{"type":"method","name":"to_s","children":[],"call":["\n + + ","\n + ","(send nil :map) join ","cmd columnize "," width "," map "]}," Byebug CommandList each":{"type":"method","name":"each","children":[],"call":["@commands each "]}," Byebug CommandList match":{"type":"method","name":"match","children":[],"call":["cmd match "," find "]}," Byebug CommandList initialize":{"type":"method","name":"initialize","children":[],"call":["commands sort_by "]}," Byebug Command columnize":{"type":"method","name":"columnize","children":[],"call":[" format "," short_description "," to_s "]}," Byebug Command to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send\n    (send nil :name) :split\n    (str \"::\")) :map) compact join ","(send\n  (send\n    (send nil :name) :split\n    (str \"::\")) :map) compact ","n gsub downcase ","n gsub ","n =~ "," name split map "," name split "," name ","(str \"Command$\") match? "]}," Byebug Command always_run":{"type":"method","name":"always_run","children":[],"call":[]}," Byebug Command arguments":{"type":"method","name":"arguments","children":[],"call":["@match [] split drop join ","@match [] split drop ","@match [] split ","@match [] "]}," Byebug Command frame":{"type":"method","name":"frame","children":[],"call":[" context frame "," context "]}," Byebug Command context":{"type":"method","name":"context","children":[],"call":[" processor context "," processor "]}," Byebug Breakpoint inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (lvar :meths) :map) join "," send ","meths map "]}," Byebug Breakpoint none?":{"type":"method","name":"none?","children":[],"call":[]}," Byebug Breakpoint potential_line?":{"type":"method","name":"potential_line?","children":[],"call":[]}," Byebug Breakpoint potential_lines_without_trace_points":{"type":"method","name":"potential_lines_without_trace_points","children":[],"call":[]}," Byebug Breakpoint potential_lines_with_trace_points":{"type":"method","name":"potential_lines_with_trace_points","children":[],"call":[]}," Byebug Breakpoint potential_lines":{"type":"method","name":"potential_lines","children":[],"call":[]}," Byebug Breakpoint remove":{"type":"method","name":"remove","children":[],"call":[]}," Byebug Breakpoint add":{"type":"method","name":"add","children":[],"call":[]}," Byebug Breakpoint last":{"type":"method","name":"last","children":[],"call":[]}," Byebug Breakpoint first":{"type":"method","name":"first","children":[],"call":[]}," Kernel remote_byebug":{"type":"method","name":"remote_byebug","children":[],"call":["Byebug  attach ","Byebug  spawn "]}," Byebug spawn":{"type":"method","name":"spawn","children":[],"call":[]}," Byebug attach":{"type":"method","name":"attach","children":[],"call":[]}," Byebug SkipCommand auto_run":{"type":"method","name":"auto_run","children":[],"call":[" reset_attributes "," processor proceed! "," processor "," keep_execution "," class always_run == "," class always_run "," class "]}," Byebug SkipCommand reset_attributes":{"type":"method","name":"reset_attributes","children":[],"call":[" class always_run= "," class "," class restore_autolist ","ListCommand  new execute ","ListCommand  new "," processor "," class previous_autolist == "," class previous_autolist "]}," Byebug SkipCommand keep_execution":{"type":"method","name":"keep_execution","children":[],"call":["(send\n  (send\n    (self) :class) :file_path) == "," frame line "," frame "," frame file "," class file_line "," class "," class file_path "]}," Byebug SkipCommand initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":[" class file_line= "," frame line "," frame "," class "," class file_path= "," frame file "," class always_run= "," class setup_autolist "]}," Byebug SkipCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug SkipCommand file_path":{"type":"method","name":"file_path","children":[],"call":[]}," Byebug SkipCommand file_line":{"type":"method","name":"file_line","children":[],"call":[]}," Byebug ContinueCommand modifier":{"type":"method","name":"modifier","children":[],"call":["@match [] lstrip ","@match [] "]}," Byebug ContinueCommand unconditionally?":{"type":"method","name":"unconditionally?","children":[],"call":["(str \"!\") include? "," modifier ","@match [] "]}," Byebug ContinueCommand until_line?":{"type":"method","name":"until_line?","children":[],"call":["(str \"!\") include? ! ","(str \"!\") include? "," modifier ","@match [] "]}," Byebug SkipCommand restore_autolist":{"type":"method","name":"restore_autolist","children":[],"call":["ListCommand  always_run= "]}," Byebug SkipCommand setup_autolist":{"type":"method","name":"setup_autolist","children":[],"call":["ListCommand  always_run= ","ListCommand  always_run "]}," Byebug LocalInterface without_readline_completion":{"type":"method","name":"without_readline_completion","children":[],"call":["Readline  completion_proc= ","Readline  completion_proc "," lambda "]}," Byebug ThreadSwitchCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadSwitchCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadResumeCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadResumeCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadStopCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadStopCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadCurrentCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadCurrentCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadListCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug ThreadListCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadFunctions thread_arguments":{"type":"method","name":"thread_arguments","children":[],"call":["context thread inspect ","context thread ","context thnum ","context thread backtrace_locations [] lineno ","context thread backtrace_locations [] ","context thread backtrace_locations ","context thread backtrace_locations [] path ","@state context frame_line ","@state context ","@state context frame_file ","context thread == ","Thread  current ","context ignored? ","context suspended? ","context frame_line ","context frame_file ","context dead? ! ","context dead? ","backtrace [] lineno ","backtrace [] ","backtrace [] path ","@state line ","@state file ","context == ","Byebug  current_context ","context thread backtrace_locations [] context thread backtrace_locations [] lineno no ","context thread backtrace_locations [] @state context frame_line no ","context thread backtrace_locations [] context frame_line no ","context thread context thread backtrace_locations _locations [] lineno ","context thread context thread backtrace_locations _locations [] ","context thread context thread backtrace_locations _locations ","context thread context thread backtrace_locations _locations [] path ","@state context frame_context thread backtrace_locations [] lineno  ","@state context frame_@state context frame_line  ","@state context frame_context frame_line  ","@state context frame_context thread backtrace_locations [] path  ","@state context frame_@state context frame_file  ","@state context frame_context frame_file  ","context frame_context thread backtrace_locations [] lineno  ","context frame_@state context frame_line  ","context frame_context frame_line  ","context frame_context thread backtrace_locations [] path  ","context frame_@state context frame_file  ","context frame_context frame_file  ","backtrace [] context thread backtrace_locations [] lineno no ","backtrace [] @state context frame_line no ","backtrace [] context frame_line no ","context thread backtrace_locations  [] lineno ","context thread backtrace_locations  [] ","context thread backtrace_locations  [] path ","@state context thread backtrace_locations [] lineno  ","@state @state context frame_line  ","@state context frame_line  ","@state context thread backtrace_locations [] path  ","@state @state context frame_file  ","@state context frame_file  "]}," Byebug SetFunctions set_setting":{"type":"method","name":"set_setting","children":[],"call":[" print ","@match [] ","Command  settings []= ","setting_name to_sym ","Command  settings ","Byebug  post_mortem= ","Byebug  post_mortem "," get_int ","setting_args [] ","Byebug  tracing= ","iface histfile= ","File  join ","ENV  [] ","iface history_length= ","iface history_save= "," get_onoff ","subcmd name ","@state interface ","Command  find ","setting_args [] to_sym ","(str \"short\") include? ","Command  settings [] []= ","Command  settings [] ","Byebug  verbose= ","setting_value == ","Byebug History  max_size= ","Byebug History  file= ","File  expand_path ","@state interface  histfile= ","@state interface  history_length= ","@state interface  history_save= ","Command  find  name "]}," Byebug InfoCommand print_hash":{"type":"method","name":"print_hash","children":[],"call":[" print "," pad_with_dots ","vars [] to_s ","vars [] ","vars [] inspect ","vars keys sort each ","vars keys sort ","vars keys ","s []= ","Setting  [] - ","Setting  [] ","s size > ","s size "]}," Byebug Context ignored":{"type":"method","name":"ignored","children":[],"call":["IGNORED_FILES  include? "]}," Byebug Context real_stack_size":{"type":"method","name":"real_stack_size","children":[],"call":["(send\n  (block\n    (send\n      (lvar :backtrace) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size "," ignored ! "," ignored ","l path ","(send\n  (lvar :backtrace) :drop_while) take_while ","l path == ","backtrace drop_while ","Thread  current backtrace_locations ","Thread  current ","backtrace size ","(send\n  (block\n    (send\n      (lvar :Thread  current backtrace_locations ) :drop_while)\n    (args\n      (arg :l))\n    (or\n      (send nil :ignored\n        (send\n          (lvar :l) :path))\n      (send\n        (send\n          (lvar :l) :path) :==\n        (str \"(eval)\")))) :take_while) size ","(send\n  (lvar :Thread  current backtrace_locations ) :drop_while) take_while ","Thread  current backtrace_locations  drop_while ","Thread  current Thread  current backtrace_locations _locations ","Thread  current backtrace_locations  size "]}," Byebug ReloadFunctions getlines":{"type":"method","name":"getlines","children":[],"call":["lines == ","SCRIPT_LINES__  [] ","Tracer Single  get_line ","File  exist? ","lines != ","SCRIPT_LINES__  []  == ","SCRIPT_LINES__  []  != "]}," Byebug Command bb_warning_eval":{"type":"method","name":"bb_warning_eval","children":[],"call":[" print ","e message ","e class "," eval "," puts "," errmsg "," pr ","b eval "]}," Byebug Command bb_eval":{"type":"method","name":"bb_eval","children":[],"call":[" print ","e message ","e class ","at shift "," eval "," puts ","at each "," errmsg "," pr ","locations join ","at map ","locations << ","e backtrace ","b eval "," eval  shift ","e backtrace  shift "," eval  each ","e backtrace  each ","loc eval ions join ","loce backtrace ions join "," eval  map ","e backtrace  map ","loc eval ions << ","loce backtrace ions << "]}," Byebug Command allow_in_post_mortem":{"type":"method","name":"allow_in_post_mortem","children":[],"call":["(ivar :@allow_in_post_mortem) ! "]}," Byebug InterruptCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug History load":{"type":"method","name":"load","children":[],"call":["Readline HISTORY  << ","line chomp! ","file each "," open ","File  exist? ","Setting  [] "]}," Byebug VarClassCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarClassCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarClassCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_class_self "," errmsg ","@state context "]}," Byebug VarClassCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug IrbCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug EditCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug WidthSetting exists?":{"type":"method","name":"exists?","children":[],"call":["File  exist? ","File  join ","ENV  [] split any? ","ENV  [] split ","ENV  [] "]}," Byebug WidthSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug WidthSetting initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"stty size\") scan [] to_i ","(str \"stty size\") scan [] ","(str \"stty size\") scan "," exists? ","STDIN  tty? ","ENV  [] to_i ","ENV  [] ","ENV  [] =~ "]}," Byebug VerboseSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug TracingPlusSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug TestingSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug StackOnErrorSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug PostMortemSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ListsizeSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug ListsizeSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug LinetraceSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug HistsizeSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug HistsizeSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug HistfileSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug HistfileSetting initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","ENV  [] "]}," Byebug FullpathSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug FullpathSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug ForcestepSetting print":{"type":"method","name":"print","children":[],"call":[" getter "]}," Byebug ForcestepSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug CallstyleSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug CallstyleSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug BasenameSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutosaveSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutosaveSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug AutoreloadSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutoreloadSetting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug AutolistSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutoirbSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutoevalSetting value":{"type":"method","name":"value","children":[],"call":["EvalCommand  unknown "]}," Byebug AutoevalSetting value=":{"type":"method","name":"value=","children":[],"call":["EvalCommand  unknown= "]}," Byebug AutoevalSetting help":{"type":"method","name":"help","children":[],"call":[]}," Byebug AutoevalSetting initialize":{"type":"method","name":"initialize","children":[],"call":["EvalCommand  unknown= "]}," Byebug Setting format":{"type":"method","name":"format","children":[],"call":[]}," Byebug Setting load":{"type":"method","name":"load","children":[],"call":[]}," Byebug Setting exists?":{"type":"method","name":"exists?","children":[],"call":[]}," Byebug HistoryCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug PostMortemSetting handle_post_mortem":{"type":"method","name":"handle_post_mortem","children":[],"call":["Byebug  handler at_line ","Byebug  handler ","Byebug  raised_exception __bb_line ","Byebug  raised_exception ","Byebug  raised_exception __bb_file ","Byebug  raised_exception __bb_context ","Byebug  handler at_Byebug  raised_exception __bb_line  ","Byebug  raised_exception __bb_Byebug  raised_exception __bb_line  ","Byebug  raised_exception __bb_Byebug  raised_exception __bb_file  ","Byebug  raised_exception __bb_Byebug  raised_exception __bb_context  "]}," Byebug ParseFunctions get_line":{"type":"method","name":"get_line","children":[],"call":["lines [] ","lineno - "," get_lines "," get_lines  [] "," get_ get_lines  "]}," Byebug ParseFunctions get_lines":{"type":"method","name":"get_lines","children":[],"call":["SCRIPT_LINES__  []= ","File  readlines ","SCRIPT_LINES__  [] ","File  exist? "," lines ","File  readSCRIPT_LINES__  []  "," SCRIPT_LINES__  []  "]}," Byebug FrameFunctions shortpath":{"type":"method","name":"shortpath","children":[],"call":["(str \"...\") + ","fullpath split [] join ","fullpath split [] ","fullpath split ","File  join ","components [] ","components size <= ","components size "," Pathname each_filename to_a "," Pathname each_filename "," Pathname "," Pathname each_filename to_a  [] "," Pathname each_filename to_a  size <= "," Pathname each_filename to_a  size "]}," Byebug VerboseSetting value":{"type":"method","name":"value","children":[],"call":["Byebug  verbose? "]}," Byebug VerboseSetting value=":{"type":"method","name":"value=","children":[],"call":["Byebug  verbose= "]}," Byebug VerboseSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug TracingPlusSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug TestingSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug ForcestepSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutoreloadSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug AutoevalSetting banner":{"type":"method","name":"banner","children":[],"call":[]}," Byebug Runner whence_file":{"type":"method","name":"whence_file","children":[],"call":["File  exist? ","File  join ","ENV  [] split each ","ENV  [] split ","ENV  [] ","prog_script index "]}," Byebug CommandProcessor one_unknown_cmd":{"type":"method","name":"one_unknown_cmd","children":[],"call":["(send\n  (lvar :commands) :find) execute ","c is_a? ","commands find "," errmsg ","Setting  [] ","eval_cmd execute ","eval_cmd match ","EvalCommand  new "," state ","EvalCommand  new  execute ","EvalCommand  new  match "]}," Byebug Processor without_exceptions":{"type":"method","name":"without_exceptions","children":[],"call":[]}," Byebug Options parse":{"type":"method","name":"parse","children":[],"call":[]}," Byebug ScriptInterface puts":{"type":"method","name":"puts","children":[],"call":["@out printf "]}," Byebug LocalInterface puts":{"type":"method","name":"puts","children":[],"call":["STDOUT  puts "]}," Byebug ParseFunctions parse_steps":{"type":"method","name":"parse_steps","children":[],"call":[" get_int "]}," Byebug ParseFunctions lines":{"type":"method","name":"lines","children":[],"call":["File  readlines ","SCRIPT_LINES__  [] "]}," Byebug puts":{"type":"method","name":"puts","children":[],"call":[]}," Byebug VarAllCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug VarAllCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarAllCommand execute":{"type":"method","name":"execute","children":[],"call":[" var_local "," var_instance "," var_global "," var_class_self "]}," Byebug VarAllCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarFunctions var_local":{"type":"method","name":"var_local","children":[],"call":[" puts "," format ","locals [] ","locals keys sort each ","locals keys sort ","locals keys ","@state context frame_locals ","@state context ","@state context frame_self ","@state frame_pos "," prv ","locals keys sort map ","@state frame ","@state context frame_locals  [] ","@state context frame_locals  keys sort each ","@state context frame_locals  keys sort ","@state context frame_locals  keys ","@state context frame_@state context frame_locals  ","@state context frame@state context frame_self  ","@state context frame_locals  keys sort map "]}," Byebug VarFunctions var_instance":{"type":"method","name":"var_instance","children":[],"call":[" var_list "," binding ","obj instance_eval ","obj instance_variables "," bb_eval "," bb_warning_eval "," bb_eval  instance_eval "," bb_warning_eval  instance_eval "," bb_eval  instance_variables "," bb_warning_eval  instance_variables "]}," Byebug UndisplayCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug SteppingFunctions parse_force":{"type":"method","name":"parse_force","children":[],"call":["Setting  [] "]}," Byebug InfoFunctions info_variables":{"type":"method","name":"info_variables","children":[],"call":[" var_class_self "," var_list "," binding ","obj instance_eval ","obj instance_variables "," bb_eval "," print_hash ","locals []= ","@state context frame_self ","@state frame_pos ","@state context ","@state context frame_locals "," bb_eval  instance_eval "," bb_eval  instance_variables ","@state context frame_locals  []= ","@state context frame_@state context frame_locals  "]}," Byebug InfoFunctions info_program":{"type":"method","name":"info_program","children":[],"call":[" info_stop_reason ","@state context stop_reason ","@state context "," puts ","excpt inspect ","Byebug  last_exception ","@state context dead? ","Byebug  last_exception  inspect "]}," Byebug InfoFunctions info_stop_reason":{"type":"method","name":"info_stop_reason","children":[],"call":[" puts ","@state context stop_reason ","@state context "]}," Byebug InfoFunctions print_hash":{"type":"method","name":"print_hash","children":[],"call":[" puts ","s []= ","Setting  [] - ","Setting  [] ","s size > ","s size ","vars [] ","vars [] inspect ","vars keys sort each ","vars keys sort ","vars keys "]}," Byebug InfoFunctions info_line":{"type":"method","name":"info_line","children":[],"call":[" puts ","@state file ","@state line "]}," Byebug InfoFunctions info_files":{"type":"method","name":"info_files","children":[],"call":[" info_file_mtime "," info_file_path ","files uniq sort each ","files uniq sort ","files uniq ","SCRIPT_LINES__  keys ","SCRIPT_LINES__  keys  uniq sort each ","SCRIPT_LINES__  keys  uniq sort ","SCRIPT_LINES__  keys  uniq "]}," Byebug InfoFunctions info_file_sha1":{"type":"method","name":"info_file_sha1","children":[],"call":[" puts ","Digest SHA1  hexdigest "," require "]}," Byebug InfoFunctions info_file_mtime":{"type":"method","name":"info_file_mtime","children":[],"call":[" puts ","stat mtime ","File  stat ","File  stat mtime ","File  stat  mtime ","File  File  stat  ","File  File  stat  mtime "]}," Byebug InfoFunctions info_file_breakpoints":{"type":"method","name":"info_file_breakpoints","children":[],"call":[" puts "," columnize ","Setting  [] ","breakpoints to_a sort ","breakpoints to_a ","LineCache  trace_line_numbers ","breakpoints to_a sort columnize ","Breakpoint  potential_lines ","LineCache  trace_line_numbers  to_a sort ","Breakpoint  potential_lines  to_a sort ","LineCache  trace_line_numbers  to_a ","Breakpoint  potential_lines  to_a ","LineCache  trace_line_numbers  to_a sort columnize ","Breakpoint  potential_lines  to_a sort columnize "]}," Byebug InfoFunctions info_file_lines":{"type":"method","name":"info_file_lines","children":[],"call":[" puts ","lines count ","File  foreach ","File  foreach  count "]}," Byebug InfoFunctions info_file_path":{"type":"method","name":"info_file_path","children":[],"call":[" puts ","path != ","File  expand_path ","File  expand_path  != ","File  expand_File  expand_path  "]}," Byebug InfoFunctions info_display":{"type":"method","name":"info_display","children":[],"call":[" puts "," format ","d [] ","@state display each ","@state display ","@state display find "]}," Byebug InfoFunctions info_breakpoints":{"type":"method","name":"info_breakpoints","children":[],"call":[" info_breakpoint ","brkpts each "," puts "," errmsg ","brkpts empty? ","indices member? ","b id ","brkpts select ","a to_i ","args map ","args empty? ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints empty? ","Byebug  breakpoints sort_by  each ","Byebug  breakpoints sort_by  empty? ","args map  member? ","Byebug  breakpoints sort_by  select "]}," Byebug InfoFunctions info_breakpoint":{"type":"method","name":"info_breakpoint","children":[],"call":[" puts ","hits > ","brkpt hit_count "," format ","brkpt pos ","brkpt source ","brkpt id ","brkpt enabled? ","brkpt expr ","brkpt expr nil? ","brkpt hit_count  > "]}," Byebug InfoFunctions info_args":{"type":"method","name":"info_args","children":[],"call":[" puts ","s []= ","Setting  [] - ","Setting  [] ","s size > ","s size ","locals [] inspect ","locals [] ","args map ","args == ","@state context frame_args ","@state context ","@state context frame_locals ","@state context frame_locals  [] inspect ","@state context frame_locals  [] ","@state context frame_args  map ","@state context frame_args  == ","@state context frame_@state context frame_args  ","@state context frame_@state context frame_locals  "]}," Byebug EnableDisableCommand description":{"type":"method","name":"description","children":[],"call":[" prettify "]}," Byebug EnableDisableCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug EnableDisableCommand disable_display":{"type":"method","name":"disable_display","children":[],"call":[" enable_disable_display "]}," Byebug EnableDisableCommand disable_breakpoints":{"type":"method","name":"disable_breakpoints","children":[],"call":[" enable_disable_breakpoints "]}," Byebug EnableDisableCommand enable_display":{"type":"method","name":"enable_display","children":[],"call":[" enable_disable_display "]}," Byebug EnableDisableCommand enable_breakpoints":{"type":"method","name":"enable_breakpoints","children":[],"call":[" enable_disable_breakpoints "]}," Byebug EnableDisableCommand execute":{"type":"method","name":"execute","children":[],"call":[" send ","args unshift ","subcmd name ","Command  find ","args shift ","@match [] split ","@match [] "," errmsg ","@match [] == "," pr ","@match [] split  unshift ","Command  find  name ","@match [] split  shift "]}," Byebug EnableDisableCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug Runner save_debugged_program":{"type":"method","name":"save_debugged_program","children":[],"call":["Byebug  debugged_program= ","File  expand_path "," whence_file ","File  exist? ","ARGV  first "," abort ","Byebug  puts ","ARGV  empty? "]}," Byebug debugged_program":{"type":"method","name":"debugged_program","children":[],"call":[]}," Byebug Runner debugged_program_from_argv":{"type":"method","name":"debugged_program_from_argv","children":[],"call":[" which ","ARGV  first ","ARGV  shift ","prog_script_try == "," abort ","Byebug  puts ","ARGV  empty? "," abort_with_err "," which  == "]}," Byebug MiscUtils which":{"type":"method","name":"which","children":[],"call":["File  directory? ! ","File  directory? ","File  executable? ","File  join ","exts each ","ENV  [] split each ","ENV  [] split ","ENV  [] ","File  expand_path ","File  exist? ","File  File  join cutable? ","ENV  [] split  each "]}," Byebug Runner abort_with_err":{"type":"method","name":"abort_with_err","children":[],"call":[" abort ","Byebug  errmsg "]}," Byebug Interface save_history":{"type":"method","name":"save_history","children":[],"call":["@history push ","@history ignore? "]}," Byebug ListCommand lower":{"type":"method","name":"lower","children":[],"call":[" move ","@state prev_line ","@state line - ","size / ","@state line ","@state prev_line ! ","direction == "," frame line - "," frame line "," frame ","prev_line nil? "," processor prev_line "," processor ","@state  processor prev_line  ","@state  processor prev_line  ! "," processor prev_line  nil? "," processor  processor prev_line  "]}," Byebug ListCommand amend":{"type":"method","name":"amend","children":[],"call":["(lvar :max_line) min ","line < "]}," Byebug ListCommand set_range":{"type":"method","name":"set_range","children":[],"call":[" move ","size - "," amend ","max_line - + ","max_line - "," lower ","@match [] "]}," Byebug RegularState shortpath":{"type":"method","name":"shortpath","children":[],"call":["File  join ","components [] ","components size <= ","components size "," Pathname each_filename to_a "," Pathname each_filename "," Pathname "," Pathname each_filename to_a  [] "," Pathname each_filename to_a  size <= "," Pathname each_filename to_a  size "]}," Byebug RegularState c_frame?":{"type":"method","name":"c_frame?","children":[],"call":[" context frame_binding nil? "," context frame_binding "," context "]}," Byebug RegularState frame_mark":{"type":"method","name":"frame_mark","children":[],"call":["mark + "," c_frame? "," frame == "," frame "]}," Byebug RegularState frame_pos":{"type":"method","name":"frame_pos","children":[],"call":[" format "]}," Byebug RegularState frame_line":{"type":"method","name":"frame_line","children":[],"call":[" context frame_line "," context "]}," Byebug RegularState frame_file":{"type":"method","name":"frame_file","children":[],"call":[" shortpath ","Setting  [] "," context frame_file "," context "]}," Byebug RegularState frame_call":{"type":"method","name":"frame_call","children":[],"call":["block + + + "," frame_args ","block + + ","block + "," frame_class "," frame_block_and_method "]}," Byebug RegularState frame_args":{"type":"method","name":"frame_args","children":[],"call":["my_args join ","arg [] ","locals [] class ","locals [] ","locals empty? ","arg [] nil? ","Setting  [] == ","Setting  [] ","args map "," context frame_locals "," context ","args empty? "," context frame_args "," prefix_and_default_from ","my_ context frame_args  join "," context frame_locals  [] class "," context frame_locals  [] "," context frame_locals  empty? "," context frame_args  map "," context frame_ context frame_locals  "," context frame_args  empty? "," context frame_ context frame_args  "]}," Byebug RegularState frame_block_and_method":{"type":"method","name":"frame_block_and_method","children":[],"call":["x nil? ","block_and_method map ","deco_regexp match [] ","deco_regexp match "," context frame_method "," context ","deco_regexp match []  map "]}," Byebug RegularState frame_class":{"type":"method","name":"frame_class","children":[],"call":["klass to_s empty? ","klass to_s "," context frame_class "," context ","Setting  [] == ","Setting  [] "," context frame_class  to_s empty? "," context frame_class  to_s "]}," Byebug RegularState location":{"type":"method","name":"location","children":[],"call":[" get_line "," line "," file ","(str \"(irb)\") include? "," normalize "]}," Byebug RegularState proceed":{"type":"method","name":"proceed","children":[],"call":[]}," Byebug RegularState proceed?":{"type":"method","name":"proceed?","children":[],"call":[]}," Byebug RegularState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug ControlState file":{"type":"method","name":"file","children":[],"call":[" errmsg "]}," Byebug ControlState context":{"type":"method","name":"context","children":[],"call":[]}," Byebug ControlState confirm":{"type":"method","name":"confirm","children":[],"call":[]}," Byebug ControlState proceed":{"type":"method","name":"proceed","children":[],"call":[]}," Byebug State initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug Runner prepare_options":{"type":"method","name":"prepare_options","children":[],"call":[" help= ","opts help ","opts on "," version= ","Setting  []= "," remote= ","Byebug  parse_host_and_port "," require ","Byebug  run_init_script ","$LOAD_PATH push flatten! ","$LOAD_PATH push ","list split ","opts banner= "," banner ","OptionParser  new ","OptionSetter  new setup ","OptionSetter  new "]}," Byebug Runner check_syntax":{"type":"method","name":"check_syntax","children":[],"call":[" exit ","$CHILD_STATUS exitstatus ","Byebug  errmsg ","$CHILD_STATUS exitstatus != "]}," Byebug ControlCommandProcessor commands":{"type":"method","name":"commands","children":[],"call":["cmd new "," state ","Command  commands select map ","Command  commands select ","Command  commands ","Byebug  commands select map ","Byebug  commands select ","Byebug  commands "]}," Byebug CommandProcessor program_just_finished?":{"type":"method","name":"program_just_finished?","children":[],"call":["result == ","@context_was_dead ! ","context dead? "]}," Byebug CommandProcessor match_cmd":{"type":"method","name":"match_cmd","children":[],"call":["cmd match ","c new "," state ","Command  commands each ","Command  commands "," commands find "," commands ","c new  match "]}," Byebug Processor load_settings":{"type":"method","name":"load_settings","children":[],"call":[]}," Byebug Processor load_commands":{"type":"method","name":"load_commands","children":[],"call":[]}," Byebug Printers Plain get_modifier":{"type":"method","name":"get_modifier","children":[],"call":["modifier_match [] "," locate match "," locate "," locate match  [] "]}," Byebug StringFunctions prettify":{"type":"method","name":"prettify","children":[],"call":["\n + + ","\n + ","str gsub "]}," Byebug StringFunctions camelize":{"type":"method","name":"camelize","children":[],"call":["str dup split map join ","str dup split map ","str dup split ","str dup "]}," Byebug FileFunctions normalize":{"type":"method","name":"normalize","children":[],"call":["File  realpath ","File  exist? ","File  expand_path ","File  basename ","Setting  [] ","(str \"(irb)\") include? ","File  realFile  expand_path  ","File  expand_File  expand_path  "]}," Byebug FileFunctions n_lines":{"type":"method","name":"n_lines","children":[],"call":["a + ","File  foreach reduce ","File  foreach "]}," Byebug FileFunctions get_line":{"type":"method","name":"get_line","children":[],"call":["f gets ","f lineno == ","lineno - ","f lineno ","File  open "]}," Byebug FileFunctions get_lines":{"type":"method","name":"get_lines","children":[],"call":["a << ","e chomp ","File  foreach reduce ","File  foreach "]}," Byebug which":{"type":"method","name":"which","children":[],"call":["File  directory? ! ","File  directory? ","File  executable? ","File  join ","exts each ","ENV  [] split each ","ENV  [] split ","ENV  [] ","File  expand_path ","File  exist? ","File  File  join cutable? ","ENV  [] split  each "]}," Byebug setup_cmd_line_args":{"type":"method","name":"setup_cmd_line_args","children":[],"call":[" fail "," which ","$ARGV shift ","program == ","$ARGV empty? "," mode= ","$PROGRAM_NAME include? "," which  == "]}," Byebug Context lib_files":{"type":"method","name":"lib_files","children":[],"call":[]}," Byebug Context bin_file":{"type":"method","name":"bin_file","children":[],"call":[]}," Byebug VarCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug VarCommand execute":{"type":"method","name":"execute","children":[],"call":[" errmsg ","subcmd name "," send ","@match [] ","@state context ","Command  find "," puts "," class help "," class ","Command  find  name "]}," Byebug VarFunctions var_all":{"type":"method","name":"var_all","children":[],"call":[" var_local "," var_instance "," var_global "]}," Byebug VarFunctions var_constant":{"type":"method","name":"var_constant","children":[],"call":[" puts "," prv ","obj const_get ","constants sort map ","constants sort "," bb_eval "," errmsg "," pr ","obj is_a? "," bb_warning_eval "," bb_warning_eval  const_get "," bb_eval  sort map "," bb_eval  sort "," bb_warning_eval  is_a? "]}," Byebug UntracevarCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug TracevarCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug InfoFunctions info_file_basic":{"type":"method","name":"info_file_basic","children":[],"call":[" n_lines "," n_lines == ","File  exist? ","File  expand_path ","File  expand_File  expand_path  "]}," Byebug FrameFunctions get_pr_arguments":{"type":"method","name":"get_pr_arguments","children":[],"call":["@state frame_pos ","@state frame_mark ","@state frame_call ","@state frame_line ","@state frame_file ","@state frame_@state frame_pos  ","@state frame_@state frame_mark  ","@state frame_@state frame_call  ","@state frame_@state frame_line  ","@state frame_@state frame_file  "]}," Byebug EvalFunctions eval_with_setting":{"type":"method","name":"eval_with_setting","children":[],"call":[" bb_warning_eval "," bb_eval "," allowing_other_threads "]}," Byebug EvalFunctions allowing_other_threads":{"type":"method","name":"allowing_other_threads","children":[],"call":["Byebug  lock ","Byebug  unlock "]}," Byebug AddDisplayCommand display_expression":{"type":"method","name":"display_expression","children":[],"call":[" print "," pr "," bb_warning_eval inspect "," bb_warning_eval ","@state display size ","@state display "]}," Byebug BreakCommand check_errors":{"type":"method","name":"check_errors","children":[],"call":[" fail "," pr ","Breakpoint  potential_line? "," n_lines ","line > ","File  exist? "," normalize ","File  expand_path ","File  expand_File  expand_path  "]}," Byebug Runner which":{"type":"method","name":"which","children":[],"call":["File  directory? ! ","File  directory? ","File  executable? ","File  join ","exts each ","ENV  [] split each ","ENV  [] split ","ENV  [] ","File  expand_path ","File  exist? ","File  File  join cutable? ","ENV  [] split  each "]}," Byebug Runner setup_cmd_line_args":{"type":"method","name":"setup_cmd_line_args","children":[],"call":[" fail "," which ","$ARGV shift ","program == ","$ARGV empty? ","Byebug  mode= "," raise "," which  == "]}," Byebug ParseFunctions without_stderr":{"type":"method","name":"without_stderr","children":[],"call":["$stderr reopen "]}," Byebug ThreadCommand parse_thread_num_for_cmd":{"type":"method","name":"parse_thread_num_for_cmd","children":[],"call":[" pr ","c ignored? ","@state context == ","@state context ","c nil? "," parse_thread_num "]}," Byebug ThreadCommand parse_thread_num":{"type":"method","name":"parse_thread_num","children":[],"call":["c thnum == ","c thnum ","Byebug  contexts find ","Byebug  contexts "," get_int "]}," Byebug ThreadCommand thread_arguments":{"type":"method","name":"thread_arguments","children":[],"call":["context thread inspect ","context thread ","context thnum ","backtrace [] lineno ","backtrace [] ","backtrace [] path ","context thread backtrace_locations ","@state line ","@state file ","context == ","Byebug  current_context ","context ignored? ","context thread == ","Thread  current ","context suspended? ","context thread backtrace_locations  [] lineno ","context thread backtrace_locations  [] ","context thread backtrace_locations  [] path ","context thread context thread backtrace_locations _locations "]}," Byebug ThreadCommand display_context":{"type":"method","name":"display_context","children":[],"call":[" puts "," pr "," thread_arguments "]}," Byebug ThreadCommand thread_switch":{"type":"method","name":"thread_switch","children":[],"call":["@state proceed ","ctx switch "," display_context "," errmsg "," parse_thread_num_for_cmd "]}," Byebug ThreadCommand thread_resume":{"type":"method","name":"thread_resume","children":[],"call":[" display_context ","ctx resume "," errmsg "," pr ","ctx suspended? "," parse_thread_num_for_cmd "]}," Byebug ThreadCommand thread_stop":{"type":"method","name":"thread_stop","children":[],"call":[" display_context ","ctx suspend "," errmsg "," parse_thread_num_for_cmd "]}," Byebug ThreadCommand thread_current":{"type":"method","name":"thread_current","children":[],"call":[" display_context ","@state context "," errmsg ","thnum nil? "]}," Byebug ThreadCommand thread_list":{"type":"method","name":"thread_list","children":[],"call":[" print "," thread_arguments "," prc ","Byebug  contexts sort_by ","Byebug  contexts "," errmsg ","thnum nil? ","Byebug  Byebug  contexts sort_by  sort_by ","Byebug  Byebug  contexts sort_by  "]}," Byebug ThreadCommand names":{"type":"method","name":"names","children":[],"call":[]}," Byebug ThreadCommand execute":{"type":"method","name":"execute","children":[],"call":[" send ","subcmd name "," errmsg ","Command  find ","@match [] split [] ","@match [] split ","@match [] "," puts "," class help "," class ","Command  find  name "]}," Byebug Subcommands subcommands":{"type":"method","name":"subcommands","children":[],"call":["SubcommandList  new "," class name "," class ","cmd new ","subcmd_klasses map ","subcmd_klasses any? "," class subcommands "," class subcommands  map "," class subcommands  any? "]}," Byebug Subcommands help":{"type":"method","name":"help","children":[],"call":[" prettify "," subcommands "," to_name "," description "]}," Byebug Subcommands short_description":{"type":"method","name":"short_description","children":[],"call":[" fail "]}," Byebug SubcommandList to_s":{"type":"method","name":"to_s","children":[],"call":["formatted_cmds join "," format ","subcmd short_description ","subcmd to_name ","@commands map ","@commands map max_by size ","@commands map max_by "]}," Byebug SubcommandList help":{"type":"method","name":"help","children":[],"call":["subcmd help "," errmsg "," find "," find  help "]}," Byebug SubcommandList find":{"type":"method","name":"find","children":[],"call":["cmd match ","@commands find "]}," Byebug SubcommandList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug RegularState prefix_and_default_from":{"type":"method","name":"prefix_and_default_from","children":[],"call":[]}," Byebug CommandProcessor commands":{"type":"method","name":"commands","children":[],"call":["cmd new "," state ","Byebug  commands map ","Byebug  commands "]}," Byebug Helpers FrameHelper get_pr_arguments":{"type":"method","name":"get_pr_arguments","children":[],"call":["@state frame_pos ","@state frame_mark ","@state frame_call ","@state frame_line ","File  expand_path ","@state frame_file ","@state frame_@state frame_pos  ","@state frame_@state frame_mark  ","@state frame_@state frame_call  ","@state frame_@state frame_line  ","@state frame_@state frame_file  "]}," Byebug Helpers EvalHelper eval_with_setting":{"type":"method","name":"eval_with_setting","children":[],"call":[" bb_warning_eval "," bb_eval "," allowing_other_threads "]}," Byebug Helpers EvalHelper run_with_binding":{"type":"method","name":"run_with_binding","children":[],"call":[" get_binding "," get_ get_binding  "]}," Byebug commands":{"type":"method","name":"commands","children":[],"call":["c name =~ ","c name ","c is_a? ","const_list select "," const_get "," constants map "," constants "]}," Byebug VarCommand LocalSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug VarCommand LocalSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand LocalSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" var_local "]}," Byebug VarCommand LocalSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand InstanceSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug VarCommand InstanceSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand InstanceSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" var_instance ","@match [] "]}," Byebug VarCommand InstanceSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand GlobalSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug VarCommand GlobalSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand GlobalSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" var_global "]}," Byebug VarCommand GlobalSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand ConstSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug VarCommand ConstSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand ConstSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," prv ","obj const_get ","constants sort map ","constants sort "," bb_eval "," errmsg "," pr ","obj is_a? "," bb_warning_eval ","@match [] "," bb_warning_eval  const_get "," bb_eval  sort map "," bb_eval  sort "," bb_warning_eval  is_a? "]}," Byebug VarCommand ConstSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug VarCommand AllSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug VarCommand AllSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug VarCommand AllSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" var_local "," var_instance "," var_global "]}," Byebug VarCommand AllSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand SwitchSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug ThreadCommand SwitchSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand SwitchSubcommand execute":{"type":"method","name":"execute","children":[],"call":["@state proceed ","context switch "," display_context "," errmsg "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand SwitchSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand StopSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug ThreadCommand StopSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand StopSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","context suspend "," errmsg "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand StopSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand ResumeSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug ThreadCommand ResumeSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand ResumeSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","context resume "," errmsg "," pr ","context suspended? "," context_from_thread ","@match [] "," puts "," help "]}," Byebug ThreadCommand ResumeSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand ListSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug ThreadCommand ListSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand ListSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" print "," thread_arguments "," prc ","Byebug  contexts sort_by ","Byebug  contexts ","Byebug  Byebug  contexts sort_by  sort_by ","Byebug  Byebug  contexts sort_by  "]}," Byebug ThreadCommand ListSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug ThreadCommand CurrentSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug ThreadCommand CurrentSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ThreadCommand CurrentSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" display_context ","@state context "]}," Byebug ThreadCommand CurrentSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PutlCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug PutlCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$ERROR_INFO message "," puts ","out string ","PP  pp "," columnize ","Setting  [] ","res map ","res is_a? "," eval_with_setting ","@match [] "," run_with_binding ","StringIO  new ","StringIO  new  puts ","StringIO  new  string "," eval_with_setting  map "," eval_with_setting  is_a? "]}," Byebug PutlCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PsCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug PsCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$ERROR_INFO message "," puts ","out string ","PP  pp "," columnize ","Setting  [] ","res map sort! ","res map ","res is_a? "," eval_with_setting ","@match post_match "," run_with_binding ","StringIO  new "," print "," pr ","@match [] ","res sort ","res respond_to? "," thread_safe_eval "," help ","StringIO  new  puts ","PP  pp  puts ","StringIO  new  string ","PP  pp  string "," eval_with_setting  map sort! ","res sort  map sort! "," thread_safe_eval  map sort! "," eval_with_setting  map ","res sort  map "," thread_safe_eval  map "," eval_with_setting  is_a? ","res sort  is_a? "," thread_safe_eval  is_a? "," eval_with_setting  sort ","res sort  sort "," thread_safe_eval  sort "," eval_with_setting   eval_with_setting pond_to? ","res sort  res sort pond_to? "," thread_safe_eval   thread_safe_eval pond_to? "]}," Byebug PsCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug PpCommand description":{"type":"method","name":"description","children":[],"call":[]}," Byebug PpCommand execute":{"type":"method","name":"execute","children":[],"call":["out puts ","$ERROR_INFO message "," puts ","out string ","PP  pp "," bb_warning_eval ","@match post_match "," bb_eval ","Setting  [] "," run_with_binding ","StringIO  new ","StringIO  new  puts ","StringIO  new  string "]}," Byebug PpCommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand ProgramSubcommand format_stop_reason":{"type":"method","name":"format_stop_reason","children":[],"call":[" puts "]}," Byebug InfoCommand ProgramSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand ProgramSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand ProgramSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" format_stop_reason ","@state context stop_reason ","@state context "," puts ","excpt inspect ","Byebug  last_exception ","@state context dead? ","Byebug  last_exception  inspect "]}," Byebug InfoCommand ProgramSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand LineSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand LineSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand LineSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts ","@state file ","@state line "]}," Byebug InfoCommand LineSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand FileSubcommand info_file_sha1":{"type":"method","name":"info_file_sha1","children":[],"call":["Digest SHA1  hexdigest "," require "]}," Byebug InfoCommand FileSubcommand info_file_mtime":{"type":"method","name":"info_file_mtime","children":[],"call":["File  stat mtime ","File  stat "]}," Byebug InfoCommand FileSubcommand info_file_breakpoints":{"type":"method","name":"info_file_breakpoints","children":[],"call":["breakpoints to_a sort columnize ","Setting  [] ","breakpoints to_a sort ","breakpoints to_a ","Breakpoint  potential_lines ","Breakpoint  potential_lines  to_a sort columnize ","Breakpoint  potential_lines  to_a sort ","Breakpoint  potential_lines  to_a "]}," Byebug InfoCommand FileSubcommand info_file_basic":{"type":"method","name":"info_file_basic","children":[],"call":[" n_lines "," n_lines == ","File  exist? ","File  expand_path ","File  expand_File  expand_path  "]}," Byebug InfoCommand FileSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand FileSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand FileSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts ","(str \"\\n\") gsub "," info_file_sha1 "," info_file_mtime "," info_file_breakpoints "," info_file_basic "," errmsg "," pr ","File  exist? ","@state file ","@match [] "]}," Byebug InfoCommand FileSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand DisplaySubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand DisplaySubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand DisplaySubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts "," format ","d [] ","i + ","display each_with_index ","display find ","@state display ","@state display  each_with_index ","@state display  find ","@state @state display  "]}," Byebug InfoCommand DisplaySubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand CatchSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand CatchSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand CatchSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts ","exception is_a? ","Byebug  catchpoints each ","Byebug  catchpoints ","Byebug  catchpoints empty? ! ","Byebug  catchpoints empty? ","@state context "]}," Byebug InfoCommand CatchSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand BreakpointsSubcommand info_breakpoint":{"type":"method","name":"info_breakpoint","children":[],"call":[" puts ","hits > ","brkpt hit_count "," format ","brkpt pos ","brkpt source ","brkpt id ","brkpt enabled? ","brkpt expr ","brkpt expr nil? ","brkpt hit_count  > "]}," Byebug InfoCommand BreakpointsSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand BreakpointsSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand BreakpointsSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" info_breakpoint ","breakpoints each "," puts "," errmsg ","breakpoints empty? ","indices member? ","b id ","breakpoints select ","@match [] split map ","@match [] split ","@match [] ","Byebug  breakpoints sort_by ","Byebug  breakpoints ","Byebug  breakpoints empty? ","Byebug  breakpoints sort_by  each ","Byebug  breakpoints sort_by  empty? ","@match [] split map  member? ","Byebug  breakpoints sort_by  select ","Byebug  Byebug  breakpoints sort_by  sort_by ","Byebug  Byebug  breakpoints sort_by  ","Byebug  Byebug  breakpoints sort_by  empty? "]}," Byebug InfoCommand BreakpointsSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug InfoCommand ArgsSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug InfoCommand ArgsSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug InfoCommand ArgsSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" puts ","s []= ","Setting  [] - ","Setting  [] ","s size > ","s size ","locals [] inspect ","locals [] ","args map ","args == ","@state context frame_args ","@state context ","@state context frame_locals ","@state context frame_locals  [] inspect ","@state context frame_locals  [] ","@state context frame_args  map ","@state context frame_args  == ","@state context frame_@state context frame_args  ","@state context frame_@state context frame_locals  "]}," Byebug InfoCommand ArgsSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EnableCommand DisplaySubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug EnableCommand DisplaySubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand DisplaySubcommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_display ","@match [] "]}," Byebug EnableCommand DisplaySubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug EnableCommand BreakpointsSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug EnableCommand BreakpointsSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug EnableCommand BreakpointsSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_breakpoints ","@match [] "]}," Byebug EnableCommand BreakpointsSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisableCommand DisplaySubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug DisableCommand DisplaySubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand DisplaySubcommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_display ","@match [] "]}," Byebug DisableCommand DisplaySubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug DisableCommand BreakpointsSubcommand description":{"type":"method","name":"description","children":[],"call":[" short_description "]}," Byebug DisableCommand BreakpointsSubcommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug DisableCommand BreakpointsSubcommand execute":{"type":"method","name":"execute","children":[],"call":[" enable_disable_breakpoints ","@match [] "]}," Byebug DisableCommand BreakpointsSubcommand regexp":{"type":"method","name":"regexp","children":[],"call":[]}," Byebug Command subcommands":{"type":"method","name":"subcommands","children":[],"call":["c is_a? ","const_list select "," const_get "," constants map "," constants "]}," Byebug Command to_name":{"type":"method","name":"to_name","children":[],"call":[" name gsub gsub downcase "," name gsub gsub "," name gsub "," name "]}," Byebug ScriptProcessor process_commands":{"type":"method","name":"process_commands","children":[],"call":[" puts ","(send\n  (send\n    (gvar :$ERROR_INFO) :backtrace) :map) join ","$ERROR_INFO backtrace map ","$ERROR_INFO backtrace "," without_exceptions "," interface close "," interface "," errmsg ","command new execute ","command new "," command_list match "," command_list "," interface read_command "," prompt "," command_list match  new execute "," command_list match  new ","  command_list match _list match ","  command_list match _list "," interface read_ command_list match  "]}," Byebug CommandProcessor run_auto_commands":{"type":"method","name":"run_auto_commands","children":[],"call":["cmd new execute ","cmd new "," auto_commands_for each "," auto_commands_for "]}," Byebug CommandProcessor auto_commands_for":{"type":"method","name":"auto_commands_for","children":[],"call":["cmd always_run >= ","cmd always_run "," command_list select "," command_list "]}," Byebug CommandProcessor frame":{"type":"method","name":"frame","children":[],"call":["@context frame "]}," Byebug CommandProcessor interface":{"type":"method","name":"interface","children":[],"call":[" context class interface "," context class "," context ","Context  interface "]}," Byebug Helpers VarHelper safe_to_s":{"type":"method","name":"safe_to_s","children":[],"call":["var to_s "]}," Byebug Helpers VarHelper safe_inspect":{"type":"method","name":"safe_inspect","children":[],"call":[" safe_to_s ","var inspect "]}," Byebug Helpers EvalHelper single_thread_eval":{"type":"method","name":"single_thread_eval","children":[],"call":[" warning_eval "," error_eval ","Setting  [] "]}," Byebug Helpers EvalHelper thread_safe_eval":{"type":"method","name":"thread_safe_eval","children":[],"call":[" single_thread_eval "," allowing_other_threads "]}," Byebug Context new_processor":{"type":"method","name":"new_processor","children":[],"call":[" class processor new "," class processor "," class "]}," Byebug Context line":{"type":"method","name":"line","children":[],"call":[" frame line "," frame "]}," Byebug Context file":{"type":"method","name":"file","children":[],"call":[" frame file "," frame "]}," Byebug PsCommand short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Byebug ControlProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Byebug Helpers PathHelper expand_from_root":{"type":"method","name":"expand_from_root","children":[],"call":["Dir  glob ","File  expand_path "," root_path "]}," Byebug Helpers PathHelper ext_files":{"type":"method","name":"ext_files","children":[],"call":[" expand_from_root "]}}