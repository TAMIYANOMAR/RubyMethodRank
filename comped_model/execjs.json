{" ExecJS windows?":{"type":"method","name":"windows?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," ExecJS root":{"type":"method","name":"root","children":[],"call":["File  expand_path "]}," ExecJS runtime":{"type":"method","name":"runtime","children":[],"call":[]}," ExecJS runtimes":{"type":"method","name":"runtimes","children":[],"call":["Runtimes  runtimes "]}," ExecJS compile":{"type":"method","name":"compile","children":[],"call":[" runtime compile "," runtime "]}," ExecJS eval":{"type":"method","name":"eval","children":[],"call":[" runtime eval "," runtime "]}," ExecJS exec":{"type":"method","name":"exec","children":[],"call":[" runtime exec "," runtime "]}," ExecJS Runtimes runtimes":{"type":"method","name":"runtimes","children":[],"call":[]}," ExecJS Runtimes best_available":{"type":"method","name":"best_available","children":[],"call":[]}," ExecJS RubyRhinoRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS RubyRhinoRuntime compile":{"type":"method","name":"compile","children":[],"call":["Context  new "]}," ExecJS RubyRhinoRuntime eval":{"type":"method","name":"eval","children":[],"call":["context eval ","Context  new ","Context  new  eval "]}," ExecJS RubyRhinoRuntime exec":{"type":"method","name":"exec","children":[],"call":["context exec ","Context  new ","Context  new  exec "]}," ExecJS RubyRhinoRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS RubyRhinoRuntime Context unbox":{"type":"method","name":"unbox","children":[],"call":["vs []= "," unbox ","v is_a? ","value inject ","value map "," Rhino To  ruby "," Rhino  to_ruby "," Rhino To  ruby  inject "," Rhino  to_ruby  inject "," Rhino To  ruby  map "," Rhino  to_ruby  map "]}," ExecJS RubyRhinoRuntime Context call":{"type":"method","name":"call","children":[],"call":[" raise ","e message == ","e message "," unbox ","@rhino_context eval call ","@rhino_context eval "," reraise_error "," wrap_error ","JSON  parse ","JSON  generate "]}," ExecJS RubyRhinoRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" raise ","e message == ","e message "," unbox ","@rhino_context eval ","source encode ","source respond_to? ","e message =~ "," encode "," reraise_error "," wrap_error ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS RubyRhinoRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS RubyRhinoRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["@rhino_context eval "," Rhino Context  new "," fix_memory_limit! ","source encode ","source respond_to? "," encode "," reraise_error "," raise "," wrap_error "," Rhino Context  new  eval ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS RubyRacerRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS RubyRacerRuntime compile":{"type":"method","name":"compile","children":[],"call":["Context  new "]}," ExecJS RubyRacerRuntime eval":{"type":"method","name":"eval","children":[],"call":["context eval ","Context  new ","Context  new  eval "]}," ExecJS RubyRacerRuntime exec":{"type":"method","name":"exec","children":[],"call":["context exec ","Context  new ","Context  new  exec "]}," ExecJS RubyRacerRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS RubyRacerRuntime Context unbox":{"type":"method","name":"unbox","children":[],"call":["vs []= "," unbox ","v is_a? ","value inject ","value map ","value force_encoding ","value respond_to? "]}," ExecJS RubyRacerRuntime Context call":{"type":"method","name":"call","children":[],"call":[" raise ","e value [] == ","e value [] ","e value "," unbox ","@v8_context eval call ","@v8_context eval ","e message "," lock ","e value to_s "," wrap_error "]}," ExecJS RubyRacerRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" raise ","e value [] == ","e value [] ","e value "," unbox ","@v8_context eval ","source encode ","source respond_to? ","e message "," lock ","e value to_s "," encode "," wrap_error ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS RubyRacerRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS RubyRacerRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["@v8_context eval "," V8 Context  new ","source encode ","source respond_to? "," lock "," encode "," raise ","e value to_s ","e value ","e value [] == ","e value [] "," wrap_error "," V8 Context  new  eval ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS ExternalRuntime sh":{"type":"method","name":"sh","children":[],"call":["Iconv  iconv first ","Iconv  iconv ","@conversion [] ","f read ","IO  popen ","output force_encoding ","options []= ","Iconv  new iconv ","Iconv  new ","Encoding  default_internal "," Encoding  default_internal ","f read  force_encoding "]}," ExecJS ExternalRuntime which":{"type":"method","name":"which","children":[],"call":["result strip split first ","result strip split ","result strip ","ExecJS  root ","ExecJS  windows? ","name split first ","name split "," Array find "," Array "," Array each "," which_unix "," which_windows "," locate_executable ","Shellwords  join "," shell_escape ","name split first  split first ","name split first  split "]}," ExecJS ExternalRuntime locate_binary":{"type":"method","name":"locate_binary","children":[],"call":["output match "," which "," shell_escape ","Shellwords  join "]}," ExecJS ExternalRuntime exec_runtime":{"type":"method","name":"exec_runtime","children":[],"call":[" raise ","$? success? "," sh "," shell_escape "," binary split << "," binary split "," binary ","f read ","IO  popen ","Shellwords  join ","@binary split << ","@binary split ","File  unlink ","File  open ","options []= "," Encoding  default_internal ","Dir Tmpname  create "," binary split + ","io close ","io read ","@popen_options merge "," exec_runtime_error ","optIO  popen ns []= ","IO  popen  close ","IO  popen  read ","@popen_optIO  popen ns merge "]}," ExecJS ExternalRuntime runner_source":{"type":"method","name":"runner_source","children":[],"call":["IO  read "]}," ExecJS ExternalRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "," binary "]}," ExecJS ExternalRuntime compile":{"type":"method","name":"compile","children":[],"call":["Context  new "]}," ExecJS ExternalRuntime eval":{"type":"method","name":"eval","children":[],"call":["context eval ","Context  new ","Context  new  eval "]}," ExecJS ExternalRuntime exec":{"type":"method","name":"exec","children":[],"call":["context exec ","Context  new ","Context  new  exec "]}," ExecJS ExternalRuntime initialize":{"type":"method","name":"initialize","children":[],"call":[" locate_binary ","options [] ","options [] ! ! ","options [] ! "," instance_eval "," generate_compile_method ","@popen_options []= "," Encoding  default_internal ","IO  read "]}," ExecJS ExternalRuntime Context extract_result":{"type":"method","name":"extract_result","children":[],"call":[" raise ","status == ","JSON  parse ","output empty? ","MultiJson  decode ","value =~ ","value == "," json_decode ","JSON  decode "," JSON  load "," JSON  parse ","error set_backtrace ","stack + "," caller ","error_class new ","stack shift ","stack [] to_s include? ","stack [] to_s ","stack [] ","(str \"eval code\") include? ","stack reject! ","line sub sub sub strip ","line sub sub sub ","line sub sub ","line sub ","stack split map ","stack split ","File  realpath ","error_class new  set_backtrace ","error_class new _class new "]}," ExecJS ExternalRuntime Context compile":{"type":"method","name":"compile","children":[],"call":["IO  read ","ExecJS  root + ","ExecJS  root ","output sub! ","@runtime send dup tap ","@runtime send dup ","@runtime send ","MultiJson  encode "," encode_unicode_codepoints "," json_encode ","JSON  encode "," JSON  dump "," JSON  generate "]}," ExecJS ExternalRuntime Context compile_to_tempfile":{"type":"method","name":"compile_to_tempfile","children":[],"call":["tempfile close! ","tempfile close ","tempfile write "," compile ","Tempfile  open ","Tempfile  open  close! ","Tempfile  open  close ","Tempfile  open  write "]}," ExecJS ExternalRuntime Context call":{"type":"method","name":"call","children":[],"call":[" eval ","args to_json ","MultiJson  encode "," json_encode ","JSON  encode "," JSON  dump "," JSON  generate "]}," ExecJS ExternalRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" extract_result ","@runtime send ","file path "," compile_to_tempfile ","(ivar :@source) join ","source encode ","source respond_to? "," encode ","File  unlink ","@runtime exec_runtime ","tmpfile path "," write_to_tempfile ","@runtime compile_source ","@source != ","(str \"cygpath -m \") rstrip ","ExecJS  cygwin? ","(ivar :@source encode ) join ","(ivar :@ encode ) join ","(ivar :@@runtime compile_source ) join ","source encode  encode "," encode  encode ","@runtime compile_source  encode ","source encode  respond_to? "," encode  respond_to? ","@runtime compile_source  respond_to? "," write_to_tempfile  path ","@runtime compile_source encode  ","@runtime compile_ encode  ","@runtime compile_@runtime compile_source  ","@source encode  != ","@ encode  != ","@@runtime compile_source  != "]}," ExecJS ExternalRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" exec ","(str \"(\") to_json ","MultiJson  encode ","source encode ","source respond_to? "," json_encode ","JSON  encode "," encode "," JSON  dump "," JSON  generate ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS ExternalRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["source encode ","source respond_to? "," encode "," exec ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS MustangRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS MustangRuntime compile":{"type":"method","name":"compile","children":[],"call":["Context  new "]}," ExecJS MustangRuntime eval":{"type":"method","name":"eval","children":[],"call":["context eval ","Context  new ","Context  new  eval "]}," ExecJS MustangRuntime exec":{"type":"method","name":"exec","children":[],"call":["context exec ","Context  new ","Context  new  exec "]}," ExecJS MustangRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS MustangRuntime Context unbox":{"type":"method","name":"unbox","children":[],"call":["value delegate ","value respond_to? "," raise ","value message ","value to_bool "," unbox ","value map ","h []= ","value inject "," unbox alue delegate "," unbox alue respond_to? "," unbox alue message "," unbox alue to_bool "," unbox alue map "," unbox alue inject "]}," ExecJS MustangRuntime Context call":{"type":"method","name":"call","children":[],"call":[" raise ","e message "," unbox ","@v8_context eval call ","@v8_context eval "]}," ExecJS MustangRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" unbox ","@v8_context eval ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS MustangRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS MustangRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["@v8_context eval "," Mustang Context  new ","source encode ","source respond_to? "," encode "," Mustang Context  new  eval ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS runtime=":{"type":"method","name":"runtime=","children":[],"call":[" raise ","runtime name ","runtime available? "]}," ExecJS Runtimes names":{"type":"method","name":"names","children":[],"call":[]}," ExecJS Runtimes from_environment":{"type":"method","name":"from_environment","children":[],"call":[]}," ExecJS Runtimes autodetect":{"type":"method","name":"autodetect","children":[],"call":[]}," ExecJS RubyRhinoRuntime Context fix_memory_limit!":{"type":"method","name":"fix_memory_limit!","children":[],"call":["@native setOptimizationLevel ","context instance_eval ","context optimization_level= ","context respond_to? "]}," ExecJS RubyRacerRuntime Context lock":{"type":"method","name":"lock","children":[],"call":[" raise ","V8 C  Locker "]}," ExecJS JohnsonRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS JohnsonRuntime compile":{"type":"method","name":"compile","children":[],"call":["Context  new "]}," ExecJS JohnsonRuntime eval":{"type":"method","name":"eval","children":[],"call":["context eval ","Context  new ","Context  new  eval "]}," ExecJS JohnsonRuntime exec":{"type":"method","name":"exec","children":[],"call":["context exec ","Context  new ","Context  new  exec "]}," ExecJS JohnsonRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS JohnsonRuntime Context array_test":{"type":"method","name":"array_test","children":[],"call":["@runtime evaluate "]}," ExecJS JohnsonRuntime Context object?":{"type":"method","name":"object?","children":[],"call":["value respond_to? "]}," ExecJS JohnsonRuntime Context array?":{"type":"method","name":"array?","children":[],"call":[" array_test call "," array_test "]}," ExecJS JohnsonRuntime Context string?":{"type":"method","name":"string?","children":[],"call":["value is_a? "]}," ExecJS JohnsonRuntime Context function?":{"type":"method","name":"function?","children":[],"call":["value function? ","value respond_to? "]}," ExecJS JohnsonRuntime Context syntax_error?":{"type":"method","name":"syntax_error?","children":[],"call":["error message =~ ","error message "]}," ExecJS JohnsonRuntime Context unbox":{"type":"method","name":"unbox","children":[],"call":["vs []= "," unbox "," function? ","value inject "," object? ","value map "," array? ","value force_encoding ","value respond_to? "," string? "]}," ExecJS JohnsonRuntime Context call":{"type":"method","name":"call","children":[],"call":[" raise ","e message "," syntax_error? "," unbox ","@runtime evaluate call ","@runtime evaluate "]}," ExecJS JohnsonRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" raise ","e message "," syntax_error? "," unbox ","@runtime evaluate ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS JohnsonRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval ","source encode ","source respond_to? "," encode ","source encode  encode "," encode  encode ","source encode  respond_to? "," encode  respond_to? "]}," ExecJS JohnsonRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["@runtime evaluate ","Johnson Runtime  new "," encode ","Johnson Runtime  new  evaluate "]}," ExecJS ExternalRuntime shell_escape":{"type":"method","name":"shell_escape","children":[],"call":["Shellwords  join ","(send\n  (lvar :args) :map) join ","arg gsub ","arg match ","args map "]}," ExecJS ExternalRuntime which_unix":{"type":"method","name":"which_unix","children":[],"call":["File  expand_path "," cmd ","File  executable? ","File  join ","ENV  [] split find ","ENV  [] split ","ENV  [] "]}," ExecJS ExternalRuntime which_windows":{"type":"method","name":"which_windows","children":[],"call":["result strip split first ","result strip split ","result strip "," shell_escape ","ExecJS  root "]}," ExecJS ExternalRuntime binary":{"type":"method","name":"binary","children":[],"call":[" locate_binary "," which "]}," ExecJS ExternalRuntime Context encode_unicode_codepoints":{"type":"method","name":"encode_unicode_codepoints","children":[],"call":["\\u%04x % ","ch unpack ","str gsub ","ch codepoints to_a ","ch codepoints ","(send\n  (send\n    (lvar :str) :unpack\n    (str \"U*\")) :map) join ","b chr ","b >= ","str unpack map ","str unpack "]}," ExecJS ExternalRuntime locate_executable":{"type":"method","name":"locate_executable","children":[],"call":["File  expand_path ","File  executable? ","File  join ","ENV  [] split find ","ENV  [] split ","ENV  [] ","cmd << ","File  extname == ","File  extname ","ExecJS  windows? ","File  file? ","commands find ","commands << ","command + ","ENV  [] split each "," Array "," Array  find "," Array  << "]}," ExecJS DisabledRuntime available?":{"type":"method","name":"available?","children":[],"call":[]}," ExecJS DisabledRuntime compile":{"type":"method","name":"compile","children":[],"call":[" raise "]}," ExecJS DisabledRuntime eval":{"type":"method","name":"eval","children":[],"call":[" raise "]}," ExecJS DisabledRuntime exec":{"type":"method","name":"exec","children":[],"call":[" raise "]}," ExecJS DisabledRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS ExternalRuntime Context json_encode":{"type":"method","name":"json_encode","children":[],"call":["MultiJson  encode ","MultiJson  dump "]}," ExecJS ExternalRuntime Context json_decode":{"type":"method","name":"json_decode","children":[],"call":["MultiJson  decode ","MultiJson  load "]}," ExecJS Runtime available?":{"type":"method","name":"available?","children":[],"call":[" raise "]}," ExecJS Runtime deprecated?":{"type":"method","name":"deprecated?","children":[],"call":[]}," ExecJS Runtime compile":{"type":"method","name":"compile","children":[],"call":[" context_class new "," context_class "," context_class instance_method arity == "," context_class instance_method arity "," context_class instance_method "]}," ExecJS Runtime eval":{"type":"method","name":"eval","children":[],"call":["context eval "," context_class new "," context_class ","context method arity == ","context method arity ","context method "," compile "," context_class new  eval "," compile  eval ","  context_class new _class new ","  compile _class new ","  context_class new _class ","  compile _class "," context_class new  method arity == "," compile  method arity == "," context_class new  method arity "," compile  method arity "," context_class new  method "," compile  method "]}," ExecJS Runtime exec":{"type":"method","name":"exec","children":[],"call":["context exec "," context_class new "," context_class ","context method arity == ","context method arity ","context method "," compile "," context_class new  exec "," compile  exec ","  context_class new _class new ","  compile _class new ","  context_class new _class ","  compile _class "," context_class new  method arity == "," compile  method arity == "," context_class new  method arity "," compile  method arity "," context_class new  method "," compile  method "]}," ExecJS Runtime context_class":{"type":"method","name":"context_class","children":[],"call":[" class "]}," ExecJS Runtime name":{"type":"method","name":"name","children":[],"call":[" raise "]}," ExecJS Runtime Context call":{"type":"method","name":"call","children":[],"call":[" raise "]}," ExecJS Runtime Context eval":{"type":"method","name":"eval","children":[],"call":[" raise "]}," ExecJS Runtime Context exec":{"type":"method","name":"exec","children":[],"call":[" raise "]}," ExecJS Runtime Context initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ExecJS MustangRuntime deprecated?":{"type":"method","name":"deprecated?","children":[],"call":[]}," ExecJS JSON encode":{"type":"method","name":"encode","children":[],"call":[]}," ExecJS JSON decode":{"type":"method","name":"decode","children":[],"call":[]}," ExecJS JohnsonRuntime deprecated?":{"type":"method","name":"deprecated?","children":[],"call":[]}," ExecJS ExternalRuntime deprecated?":{"type":"method","name":"deprecated?","children":[],"call":[]}," ExecJS Encoding encode":{"type":"method","name":"encode","children":[],"call":["string encode "," raise ","string dump ","data valid_encoding? ","data force_encoding ","string dup ","string encoding name == ","string encoding name ","string encoding ","string encode  valid_encoding? ","string dup  valid_encoding? ","string encode  force_encoding ","string dup  force_encoding "]}," ExecJS DisabledRuntime deprecated?":{"type":"method","name":"deprecated?","children":[],"call":[]}," ExecJS ExternalRuntime encode_unicode_codepoints":{"type":"method","name":"encode_unicode_codepoints","children":[],"call":["\\u%04x % ","ch codepoints to_a ","ch codepoints ","str gsub "]}," ExecJS ExternalRuntime encode_source":{"type":"method","name":"encode_source","children":[],"call":[" JSON  generate "," encode_unicode_codepoints "]}," ExecJS ExternalRuntime json2_source":{"type":"method","name":"json2_source","children":[],"call":["IO  read ","ExecJS  root + ","ExecJS  root "]}," ExecJS ExternalRuntime generate_compile_method":{"type":"method","name":"generate_compile_method","children":[],"call":["IO  read "]}," ExecJS ExternalRuntime Context write_to_tempfile":{"type":"method","name":"write_to_tempfile","children":[],"call":["tmpfile close ","tmpfile write "," create_tempfile "," create_tempfile  close "," create_tempfile  write "]}," ExecJS ExternalRuntime Context create_tempfile":{"type":"method","name":"create_tempfile","children":[],"call":["File  open ","File WRONLY  | | ","File WRONLY  | ","Dir Tmpname  create "]}," ExecJS RubyRhinoRuntime Context reraise_error":{"type":"method","name":"reraise_error","children":[],"call":[" raise ","e message ","e message == "]}," ExecJS RubyRhinoRuntime Context wrap_error":{"type":"method","name":"wrap_error","children":[],"call":["error set_backtrace ","error_class new ","e value to_s ","e value ","stack unshift ","e javascript_backtrace empty? ","e javascript_backtrace ","line sub sub strip ","line sub sub ","line sub ","stack map ","e backtrace ","e message == ","e message ","e is_a? ","error_class new  set_backtrace ","error_class new _class new ","e backtrace  unshift ","e backtrace  map "]}," ExecJS RubyRacerRuntime Context wrap_error":{"type":"method","name":"wrap_error","children":[],"call":["error set_backtrace ","stack + "," caller ","error_class new ","e value to_s ","e value ","line sub sub strip ","line sub sub ","line sub ","stack map ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\\\d+:\\\\d+\")\n    (regopt))\n  (int 0)) compact ","e message [] ","e message ","stack empty? ","stack shift ","stack split ","e value [] ","e value [] == ","error_class new  set_backtrace ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\d+:\\d+\")\n    (regopt))\n  (int 0)) compact  + ","stack split  + ","error_class new _class new ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\d+:\\d+\")\n    (regopt))\n  (int 0)) compact  map ","stack split  map ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\d+:\\d+\")\n    (regopt))\n  (int 0)) compact  empty? ","stack split  empty? ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\d+:\\d+\")\n    (regopt))\n  (int 0)) compact  shift ","stack split  shift ","(send\n  (send\n    (lvar :e) :message) :[]\n  (regexp\n    (str \"<eval>:\\d+:\\d+\")\n    (regopt))\n  (int 0)) compact  split ","stack split  split "]}," ExecJS ExternalRuntime exec_runtime_error":{"type":"method","name":"exec_runtime_error","children":[],"call":["error set_backtrace ","(dstr\n  (str \"(execjs):\")\n  (begin\n    (lvar :lineno))) + "," caller ","lines [] [] ","lines [] ","output split ","RuntimeError  new ","RuntimeError  new  set_backtrace ","(dstr\n  (str \"(execjs):\")\n  (begin\n    (lvar :lines [] [] ))) + ","output split  [] [] ","output split  [] "]}," ExecJS cygwin?":{"type":"method","name":"cygwin?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," ExecJS DuktapeRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS DuktapeRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS DuktapeRuntime Context wrap_error":{"type":"method","name":"wrap_error","children":[],"call":["error set_backtrace ","(dstr\n  (str \"(execjs):\")\n  (begin\n    (lvar :lineno))) + ","e backtrace ","klass new ","e message sub ","e message ","e message [] ","klass new  set_backtrace "]}," ExecJS DuktapeRuntime Context call":{"type":"method","name":"call","children":[],"call":[" raise "," wrap_error ","@ctx call_prop ","identifier split ","@ctx exec_string "]}," ExecJS DuktapeRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" raise "," wrap_error ","@ctx eval_string "," encode ","source encode "]}," ExecJS DuktapeRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" raise "," wrap_error ","@ctx eval_string "," encode ","source encode "]}," ExecJS DuktapeRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," wrap_error ","@ctx exec_string "," encode ","Duktape Context  new ","source encode ","Duktape Context  new  exec_string "]}," ExecJS MiniRacerRuntime available?":{"type":"method","name":"available?","children":[],"call":[" require "]}," ExecJS MiniRacerRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS MiniRacerRuntime Context translate":{"type":"method","name":"translate","children":[],"call":[" raise ","ex set_backtrace ","(str \"(execjs):1\") + ","e backtrace ","RuntimeError  new ","e message ","line sub sub strip ","line sub sub ","line sub ","line =~ ","backtrace map ","ProgramError  new "," strip_functions! ","RuntimeError  new  set_backtrace ","ProgramError  new  set_backtrace ","ex set_e backtrace  ","(str \"(RuntimeError  new ecjs):1\") + ","(str \"(ProgramError  new ecjs):1\") + ","e e backtrace  ","e backtrace  map "]}," ExecJS MiniRacerRuntime Context strip_functions!":{"type":"method","name":"strip_functions!","children":[],"call":["MiniRacer JavaScriptFunction  === ","value []= "," strip_functions! ","value delete ","value each ","Hash  === ","value map! ","Array  === "]}," ExecJS MiniRacerRuntime Context call":{"type":"method","name":"call","children":[],"call":[" eval "," JSON  generate "]}," ExecJS MiniRacerRuntime Context eval":{"type":"method","name":"eval","children":[],"call":["@context eval "," translate "," encode ","source encode "," encode  encode ","source encode  encode "]}," ExecJS MiniRacerRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval "," encode ","source encode "," encode  encode ","source encode  encode "]}," ExecJS MiniRacerRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":["@context eval "," translate "," MiniRacer Context  new "," encode ","source encode "," MiniRacer Context  new  eval "," encode  encode ","source encode  encode "]}," ExecJS GraalJSRuntime available?":{"type":"method","name":"available?","children":[],"call":[" warn "," class ","Polyglot  languages include? ","Polyglot  languages ","RUBY_ENGINE  == "]}," ExecJS GraalJSRuntime name":{"type":"method","name":"name","children":[],"call":[]}," ExecJS GraalJSRuntime Context convert_ruby_to_js":{"type":"method","name":"convert_ruby_to_js","children":[],"call":[" raise ","value inspect ","h []= "," convert_ruby_to_js ","value each_pair ","@js_object new ","value map ","Truffle Interop  as_truffle_string ","@js_object new  []= ","value eac@js_object new _pair "]}," ExecJS GraalJSRuntime Context convert_js_to_ruby":{"type":"method","name":"convert_js_to_ruby","children":[],"call":["h []= "," convert_js_to_ruby ","member to_s ","v respond_to? ","object [] ","object instance_variables each ","object instance_variables ","e respond_to? ","value to_ary map ","value to_ary ","value respond_to? ","value to_str ","value nil? "," conobject [] ert_js_to_ruby ","object []  respond_to? ","object instance_object [] ariables each ","object instance_object [] ariables ","object [] alue to_ary map ","object [] alue to_ary ","object [] alue respond_to? ","object [] alue to_str ","object [] alue nil? "]}," ExecJS GraalJSRuntime Context translate":{"type":"method","name":"translate","children":[],"call":[" raise ","e message ","line sub ","(or\n  (send\n    (lvar :e) :backtrace)\n  (array)) map ","e backtrace ","e message start_with? "," convert_js_to_ruby "]}," ExecJS GraalJSRuntime Context call":{"type":"method","name":"call","children":[],"call":["function call "," convert_ruby_to_js "," eval_in_context "," translate ","(str \"\\\\S\") match? ","source encode "," eval_in_context  call ","source encode  encode "]}," ExecJS GraalJSRuntime Context eval":{"type":"method","name":"eval","children":[],"call":[" eval_in_context "," translate ","(str \"\\\\S\") match? ","source encode ","source encode  encode "]}," ExecJS GraalJSRuntime Context exec":{"type":"method","name":"exec","children":[],"call":[" eval_in_context "," translate ","(str \"\\\\S\") match? ","source encode ","source encode  encode "]}," ExecJS GraalJSRuntime Context initialize":{"type":"method","name":"initialize","children":[],"call":[" eval_in_context "," translate ","source empty? ","source encode ","@context eval ","Polyglot InnerContext  new ","source encode  empty? ","source encode  encode ","Polyglot InnerContext  new  eval "]}}