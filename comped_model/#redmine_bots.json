{" RedmineBots Utils daemonize":{"type":"method","name":"daemonize","children":[],"call":["Logger  new "]}," Telegram init_bot":{"type":"method","name":"init_bot","children":[],"call":[]}," Telegram update_manager":{"type":"method","name":"update_manager","children":[],"call":[]}," Telegram bot_token":{"type":"method","name":"bot_token","children":[],"call":[]}," Telegram set_locale":{"type":"method","name":"set_locale","children":[],"call":[]}," Telegram Utils auth_hash":{"type":"method","name":"auth_hash","children":[],"call":[]}," UpdateManager handle_common_command":{"type":"method","name":"handle_common_command","children":[],"call":["RedmineBots Telegram Bot  new call ","RedmineBots Telegram Bot  new ","RedmineBots Telegram  bot_token "]}," UpdateManager handle_message":{"type":"method","name":"handle_message","children":[],"call":["handler call ","@handlers each "," handle_common_command ","COMMON_COMMANDS  include? ","message text to_s scan flatten first ","message text to_s scan flatten ","message text to_s scan ","message text to_s ","message text ","message is_a? "]}," UpdateManager add_handler":{"type":"method","name":"add_handler","children":[],"call":["@handlers << "]}," UpdateManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tdlib ToggleChatAdmin call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready ","(send\n  (send\n    (send nil :client) :get_user\n    (lvar :user_id)) :then) flat "," client set_chat_member_status "," client "," client get_user then "," client get_user ","TD Types ChatMemberStatus Member  new ","TD Types ChatMemberStatus Administrator  new ","(send\n  (send\n    (send nil :client) :get_user\n    (hash\n      (pair\n        (sym :user_id)\n        (lvar :user_id)))) :then) flat "," client set_chat_member_TD Types ChatMemberStatus Member  new  "," client set_chat_member_TD Types ChatMemberStatus Administrator  new  "]}," Tdlib RenameChat call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready "," client set_chat_title "," client "]}," Tdlib GetUser call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready "," client get_user "," client "]}," Tdlib GetMe call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready "," client get_me "," client "]}," Tdlib GetChatLink call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready "," client generate_chat_invite_link "," client "," client create_chat_invite_link "]}," Tdlib GetChat call":{"type":"method","name":"call","children":[],"call":["client fetch ","@client on_ready "," client get_chat "," client "]}," Tdlib DependencyProviders GetUser get_user":{"type":"method","name":"get_user","children":[],"call":["RedmineBots Telegram Tdlib GetUser  new "," client "]}," Tdlib DependencyProviders AddBot add_bot":{"type":"method","name":"add_bot","children":[],"call":["RedmineBots Telegram Tdlib AddBot  new "," client "]}," Tdlib DependencyProviders ToggleChatAdmin toggle_chat_admin":{"type":"method","name":"toggle_chat_admin","children":[],"call":["RedmineBots Telegram Tdlib ToggleChatAdmin  new "," client "]}," Tdlib DependencyProviders GetChat get_chat":{"type":"method","name":"get_chat","children":[],"call":["RedmineBots Telegram Tdlib GetChat  new "," client "]}," Tdlib DependencyProviders RenameChat rename_chat":{"type":"method","name":"rename_chat","children":[],"call":["RedmineBots Telegram Tdlib RenameChat  new "," client "]}," Tdlib DependencyProviders CloseChat close_chat":{"type":"method","name":"close_chat","children":[],"call":["RedmineBots Telegram Tdlib CloseChat  new "," client "]}," Tdlib DependencyProviders GetMe get_me":{"type":"method","name":"get_me","children":[],"call":["RedmineBots Telegram Tdlib GetMe  new "," client "]}," Tdlib DependencyProviders GetChatLink get_chat_link":{"type":"method","name":"get_chat_link","children":[],"call":["RedmineBots Telegram Tdlib GetChatLink  new "," client "]}," Tdlib DependencyProviders CreateChat create_chat":{"type":"method","name":"create_chat","children":[],"call":["RedmineBots Telegram Tdlib CreateChat  new "," client "]}," Tdlib DependencyProviders Authenticate authenticate":{"type":"method","name":"authenticate","children":[],"call":["RedmineBots Telegram Tdlib Authenticate  new "," logger "," client "]}," Tdlib DependencyProviders Client client":{"type":"method","name":"client","children":[],"call":["TD Client  new ","settings [] ","Rails  root join to_s ","Rails  root join ","Rails  root ","TD Api  set_log_file_path ","Setting  plugin_redmine_bots ","LazyObject  new ","Setting  find_by_name value ","Setting  find_by_name ","Setting  plugin_redmine_bots  [] ","Setting  find_by_name value  [] "]}," Tdlib CreateChat call":{"type":"method","name":"call","children":[],"call":["client fetch ","chat dig "," sleep ","user_ids each ","@client on_ready ","(send\n  (send\n    (const nil :Promises) :zip\n    (splat\n      (send\n        (lvar :user_ids) :map\n        (block-pass\n          (send\n            (send nil :client) :method\n            (sym :get_user)))))) :then) flat "," client toggle_basic_group_administrators ","chat type basic_group_id ","chat type "," client "," client create_new_basic_group_chat then "," client create_new_basic_group_chat ","Promises  zip then ","Promises  zip ","user_ids map "," client method ","(send\n  (send\n    (send nil :client) :create_new_basic_group_chat\n    (lvar :user_ids)\n    (lvar :title)) :then) flat "," client set_chat_permissions then "," client set_chat_permissions "," permissions ","chat id ","(send\n  (send\n    (const nil :Promises) :zip\n    (splat\n      (block\n        (send\n          (lvar :user_ids) :map)\n        (args\n          (arg :id))\n        (send\n          (send nil :client) :get_user\n          (hash\n            (pair\n              (sym :user_id)\n              (lvar :id))))))) :then) flat ","(send\n  (send\n    (send nil :client) :create_new_supergroup_chat\n    (hash\n      (pair\n        (sym :title)\n        (lvar :title))\n      (pair\n        (sym :is_channel)\n        (false))\n      (pair\n        (sym :description)\n        (str \"\"))\n      (pair\n        (sym :location)\n        (nil))\n      (pair\n        (sym :for_import)\n        (false)))) :then) flat ","(send\n  (send\n    (send nil :client) :add_chat_members\n    (hash\n      (pair\n        (sym :chat_id)\n        (send\n          (lvar :chat) :id))\n      (pair\n        (sym :user_ids)\n        (lvar :user_ids)))) :then) flat "," client add_chat_members then "," client add_chat_members "," client create_new_supergroup_chat then "," client create_new_supergroup_chat "," client get_user "," puts ","(send\n  (send\n    (send nil :client) :create_new_supergroup_chat\n    (hash\n      (pair\n        (sym :title)\n        (lvar :title))\n      (pair\n        (sym :is_channel)\n        (false))\n      (pair\n        (sym :description)\n        (str \"\"))\n      (pair\n        (sym :location)\n        (nil)))) :then) flat ","client fetch  dig ","client fetch  type basic_group_id ","client fetch  type "," client create_new_basic_group_client fetch  then "," client create_new_basic_group_client fetch  ","(send\n  (send\n    (send nil :client) :create_new_basic_group_client fetch \n    (lvar :user_ids)\n    (lvar :title)) :then) flat "," client set_client fetch _permissions then "," client set_client fetch _permissions ","client fetch  id ","(send\n  (send\n    (send nil :client) :create_new_supergroup_client fetch \n    (hash\n      (pair\n        (sym :title)\n        (lvar :title))\n      (pair\n        (sym :is_channel)\n        (false))\n      (pair\n        (sym :description)\n        (str \"\"))\n      (pair\n        (sym :location)\n        (nil))\n      (pair\n        (sym :for_import)\n        (false)))) :then) flat ","(send\n  (send\n    (send nil :client) :add_client fetch _members\n    (hash\n      (pair\n        (sym :client fetch _id)\n        (send\n          (lvar :client fetch ) :id))\n      (pair\n        (sym :user_ids)\n        (lvar :user_ids)))) :then) flat "," client add_client fetch _members then "," client add_client fetch _members "," client create_new_supergroup_client fetch  then "," client create_new_supergroup_client fetch  ","(send\n  (send\n    (send nil :client) :create_new_supergroup_client fetch \n    (hash\n      (pair\n        (sym :title)\n        (lvar :title))\n      (pair\n        (sym :is_channel)\n        (false))\n      (pair\n        (sym :description)\n        (str \"\"))\n      (pair\n        (sym :location)\n        (nil)))) :then) flat "]}," Tdlib Command Callable call":{"type":"method","name":"call","children":[],"call":["@client close ","(op-asgn\n  (lvasgn :tries) :-\n  (int 1)) zero? "," sleep "," Filelock ","Rails  root join ","Rails  root ","(send\n  (send nil :connect) :then) flat "," connect then "," connect "," auto_connect? "]}," Tdlib Command initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tdlib Command inherited":{"type":"method","name":"inherited","children":[],"call":["klass prepend "]}," Tdlib CloseChat delete_member":{"type":"method","name":"delete_member","children":[],"call":["@client fetch "," client set_chat_member_status ","ChatMemberStatus Left  new "," client "]}," Tdlib CloseChat call":{"type":"method","name":"call","children":[],"call":[" delete_member ","me [] ","user_id in? ","(send\n  (send\n    (lvar :group_info) :[]\n    (str \"members\")) :map) each ","m [] ","group_info [] map ","group_info [] ","group_info [] == ","client fetch ","chat dig ","Setting  find_by value [] to_i ","Setting  find_by value [] ","Setting  find_by value ","Setting  find_by ","@client on_ready ","(send\n  (send\n    (const nil :Promises) :zip\n    (block\n      (send\n        (const nil :Promises) :future)\n      (args)\n      (send\n        (send\n          (send\n            (send\n              (const nil :Setting) :find_by\n              (hash\n                (pair\n                  (sym :name)\n                  (str \"plugin_redmine_bots\")))) :value) :[]\n          (str \"telegram_bot_id\")) :to_i))\n    (send\n      (send\n        (send nil :client) :get_me) :then\n      (block-pass\n        (sym :id)))) :then) flat ","(send\n  (send\n    (block\n      (send\n        (send\n          (send nil :client) :get_chat\n          (lvar :chat_id)) :then)\n      (args\n        (arg :chat))\n      (send\n        (send nil :client) :get_basic_group_full_info\n        (send\n          (send\n            (lvar :chat) :type) :basic_group_id))) :flat) :then) flat ","(send\n  (lvar :promise) :then) flat ","promise then ","member_ids reduce ","Promises  fulfilled_future ","regular_member_ids + + ","bot_member_ids & ","regular_member_ids + ","arr map ","(send\n  (send\n    (lvar :group_info) :members) :partition) map ","m user_id in? ","m user_id ","group_info members partition ","group_info members ","(send\n  (send\n    (send nil :client) :get_chat\n    (lvar :chat_id)) :then) flat then ","(send\n  (send\n    (send nil :client) :get_chat\n    (lvar :chat_id)) :then) flat "," client get_basic_group_full_info ","chat type basic_group_id ","chat type "," client "," client get_chat then "," client get_chat ","Promises  zip then ","Promises  zip "," client get_me then "," client get_me ","Promises  future "," raise "," close_super_group ","(send\n  (send nil :fetch_robot_ids) :then) flat "," close_basic_group "," fetch_robot_ids then "," fetch_robot_ids ","(send\n  (send\n    (send nil :client) :get_chat\n    (hash\n      (pair\n        (sym :chat_id)\n        (lvar :chat_id)))) :then) flat "," client delete_chat "," delete_client fetch mber ","client fetch  [] ","(send\n  (send\n    (lvar :client fetch ) :[]\n    (str \"members\")) :map) each ","(send\n  (send\n    (lvar :group_info) :[]\n    (str \"client fetch mbers\")) :map) each ","client fetch  [] map ","client fetch  [] == ","client fetch  dig ","(send\n  (send\n    (const nil :Promises) :zip\n    (block\n      (send\n        (const nil :Promises) :future)\n      (args)\n      (send\n        (send\n          (send\n            (send\n              (const nil :Setting) :find_by\n              (hash\n                (pair\n                  (sym :name)\n                  (str \"plugin_redmine_bots\")))) :value) :[]\n          (str \"telegram_Setting  find_by value [] to_i \")) :to_i))\n    (send\n      (send\n        (send nil :client) :get_me) :then\n      (block-pass\n        (sym :id)))) :then) flat ","(send\n  (send\n    (const nil :Promises) :zip\n    (block\n      (send\n        (const nil :Promises) :future)\n      (args)\n      (send\n        (send\n          (send\n            (send\n              (const nil :Setting) :find_by\n              (hash\n                (pair\n                  (sym :naclient fetch )\n                  (str \"plugin_redmine_bots\")))) :value) :[]\n          (str \"telegram_bot_id\")) :to_i))\n    (send\n      (send\n        (send nil :client) :get_client fetch ) :then\n      (block-pass\n        (sym :id)))) :then) flat ","(send\n  (send\n    (block\n      (send\n        (send\n          (send nil :client) :get_client fetch \n          (lvar :client fetch _id)) :then)\n      (args\n        (arg :client fetch ))\n      (send\n        (send nil :client) :get_basic_group_full_info\n        (send\n          (send\n            (lvar :client fetch ) :type) :basic_group_id))) :flat) :then) flat ","client fetch mber_ids reduce ","regular_client fetch mber_ids + + ","bot_client fetch mber_ids & ","regular_client fetch mber_ids + ","(send\n  (send\n    (lvar :client fetch ) :members) :partition) map ","(send\n  (send\n    (lvar :group_info) :client fetch mbers) :partition) map ","client fetch  members partition ","group_info client fetch mbers partition ","client fetch  members ","group_info client fetch mbers ","(send\n  (send\n    (send nil :client) :get_client fetch \n    (lvar :client fetch _id)) :then) flat then ","(send\n  (send\n    (send nil :client) :get_client fetch \n    (lvar :client fetch _id)) :then) flat ","client fetch  type basic_group_id ","client fetch  type "," client get_client fetch  then "," client get_client fetch  ","(send\n  (send nil :fetch_roSetting  find_by value [] to_i s) :then) flat "," fetch_roSetting  find_by value [] to_i s then "," fetch_roSetting  find_by value [] to_i s ","(send\n  (send\n    (send nil :client) :get_client fetch \n    (hash\n      (pair\n        (sym :client fetch _id)\n        (lvar :client fetch _id)))) :then) flat "," client delete_client fetch  "]}," Tdlib Authenticate error_handler":{"type":"method","name":"error_handler","children":[],"call":[" raise ","AuthenticationError  new ","@logger fatal ","result [] ","result [] == "," proc "]}," Tdlib Authenticate check_code":{"type":"method","name":"check_code","children":[],"call":["@client fetch tap "," error_handler ","@client fetch "]}," Tdlib Authenticate set_phone":{"type":"method","name":"set_phone","children":[],"call":["@client fetch tap "," error_handler ","@client fetch "]}," Tdlib Authenticate fetch_all_chats":{"type":"method","name":"fetch_all_chats","children":[],"call":["last_chat values_at ","@client fetch tap "," error_handler ","@client fetch ","chat_ids last ","chat_ids empty? ","@client fetch tap [] "," loop ","2 ** - ","2 ** ","@client fetch tap  values_at ","@client fetch tap []  last ","@client fetch tap []  empty? "]}," Tdlib Authenticate call":{"type":"method","name":"call","children":[],"call":[" raise ","AuthenticationError  new ","@logger fatal "," fetch_all_chats "," check_code ","params [] ","params key? "," set_phone "," loop ","update dig ","@client on ","(send\n  (send nil :connect) :then) flat ","TD Error  new ","TD Types Error  new ","result nil? ","condition wait ","mutex synchronize ","Promises  future "," connect then "," connect ","condition broadcast ","(send\n  (lvar :promise) :then) on_error ","promise then ","Promises  fulfilled_future "," client check_authentication_code "," client "," client set_authentication_phone_number ","update authorization_state "," client on ","ConditionVariable  new ","Mutex  new "," puts ","ConditionVariable  new  wait ","Mutex  new  synchronize ","ConditionVariable  new  broadcast ","(send\n  (lvar :promise) :then) on_TD Types Error  new  ","(send\n  (lvar :Promises  fulfilled_future ) :then) on_error ","(send\n  (lvar : client check_authentication_code ) :then) on_error ","(send\n  (lvar : client set_authentication_phone_number ) :then) on_error ","Promises  fulfilled_future  then "," client check_authentication_code  then "," client set_authentication_phone_number  then "]}," Tdlib Authenticate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tdlib AddBot call":{"type":"method","name":"call","children":[],"call":["client fetch ","chat [] ","@client on_ready ","(send\n  (send\n    (send nil :client) :search_public_chat\n    (lvar :bot_name)) :then) flat "," client send_message ","chat id "," client ","TD Types InputMessageContent Text  new ","TD Types FormattedText  new "," client search_public_chat then "," client search_public_chat ","(send\n  (send\n    (send nil :client) :search_public_chat\n    (hash\n      (pair\n        (sym :username)\n        (lvar :bot_name)))) :then) flat ","client fetch  [] ","(send\n  (send\n    (send nil :client) :search_public_client fetch \n    (lvar :bot_name)) :then) flat "," client send_TD Types InputMessageContent Text  new  ","client fetch  id "," client search_public_client fetch  then "," client search_public_client fetch  ","(send\n  (send\n    (send nil :client) :search_public_client fetch \n    (hash\n      (pair\n        (sym :username)\n        (lvar :bot_name)))) :then) flat "]}," RedmineBots Telegram Patches UserPatch included":{"type":"method","name":"included","children":[],"call":[]}," Telegram Jwt issuer":{"type":"method","name":"issuer","children":[],"call":["Setting  host_name "]}," Telegram Jwt secret":{"type":"method","name":"secret","children":[],"call":["Rails  application config secret_key_base ","Rails  application config ","Rails  application "]}," Telegram Jwt decode_token":{"type":"method","name":"decode_token","children":[],"call":["JWT  decode "," issuer "," secret "]}," Telegram Jwt encode":{"type":"method","name":"encode","children":[],"call":["JWT  encode "," secret "," issuer ","Time  now to_i + ","Time  now to_i ","Time  now "]}," Telegram Exceptions Telegram initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Telegram BotCommand Token token":{"type":"method","name":"token","children":[],"call":[" send_message ","Setting  host_name ","Setting  protocol ","I18n  t ","Jwt  encode "," chat_id "]}," Telegram BotCommand Start write_log_about_new_user":{"type":"method","name":"write_log_about_new_user","children":[],"call":[" logger info "," user username "," user "," user last_name "," user first_name "," logger "]}," Telegram BotCommand Start update_account":{"type":"method","name":"update_account","children":[],"call":[" account save! "," account "," write_log_about_new_user "," account new_record? "," logger "," account assign_attributes "," user last_name "," user "," user first_name "," user username "]}," Telegram BotCommand Start start":{"type":"method","name":"start","children":[],"call":[" send_message ","I18n  t "," account user present? "," account user "," account "," update_account "," send_I18n  t  "]}," Telegram BotCommand Help group_help_message":{"type":"method","name":"group_help_message","children":[],"call":["(send\n  (const nil :I18n) :t\n  (str \"redmine_bots.telegram.bot.group.no_commands\")) join "," private_help_message ","I18n  t "]}," Telegram BotCommand Help help_command_list":{"type":"method","name":"help_command_list","children":[],"call":["(send\n  (lvar :list) :map) join ","(str \"/\") chomp ","I18n  t ","list map "]}," Telegram BotCommand Help private_help_message":{"type":"method","name":"private_help_message","children":[],"call":[" help_command_list "," private_commands "]}," Telegram BotCommand Help group_commands":{"type":"method","name":"group_commands","children":[],"call":[]}," Telegram BotCommand Help private_commands":{"type":"method","name":"private_commands","children":[],"call":[]}," Telegram BotCommand Help help":{"type":"method","name":"help","children":[],"call":[" send_message "," group_help_message "," private_help_message "," private_command? "," send_ group_help_message  "," send_ private_help_message  "," group_help_ group_help_message  "," group_help_ private_help_message  "," private_help_ group_help_message  "," private_help_ private_help_message  "]}," Telegram BotCommand Connect connect":{"type":"method","name":"connect","children":[],"call":[" send_message ","I18n  t ","Setting  host_name ","Setting  protocol ","redmine_user present? "," logger debug ","redmine_user inspect "," logger "," account "," command text downcase "," command text "," command "," send_I18n  t  "]}," Telegram Bot default_logger":{"type":"method","name":"default_logger","children":[],"call":["Logger  new ","Rails  root join ","Rails  root "]}," Telegram Bot fetch_account":{"type":"method","name":"fetch_account","children":[],"call":["TelegramAccount  where first_or_create ","TelegramAccount  where "," user id "," user "]}," Telegram Bot account":{"type":"method","name":"account","children":[],"call":[" fetch_account "]}," Telegram Bot user":{"type":"method","name":"user","children":[],"call":[" command from "," command "]}," Telegram Bot chat_id":{"type":"method","name":"chat_id","children":[],"call":[" command chat id "," command chat "," command "]}," Telegram Bot send_message":{"type":"method","name":"send_message","children":[],"call":["MessageSender  call "," logger debug "," logger "," chat_id ","(pair\n  (sym :chat_id)\n  (send nil :chat_id)) merge "," bot_token "," api send_message "," api "," throttle apply "," throttle "," handle_errors ","(pair\n  (sym :parse_mode)\n  (str \"HTML\")) merge "]}," Telegram Bot command_name":{"type":"method","name":"command_name","children":[],"call":[" command_text scan flatten first "," command_text scan flatten "," command_text scan "," command_text "]}," Telegram Bot command_text":{"type":"method","name":"command_text","children":[],"call":[" command text to_s "," command text "," command "]}," Telegram Bot execute_group_command":{"type":"method","name":"execute_group_command","children":[],"call":[" send_message ","I18n  t "," send "," command_name "," group_commands include? "," group_commands "]}," Telegram Bot execute_private_command":{"type":"method","name":"execute_private_command","children":[],"call":[" send_message ","I18n  t "," send "," command_name "," private_commands include? "," private_commands "]}," Telegram Bot available_commands":{"type":"method","name":"available_commands","children":[],"call":["(send\n  (send nil :private_commands) :+\n  (send nil :group_commands)) uniq "," private_commands + "," group_commands "," private_commands "]}," Telegram Bot private_command?":{"type":"method","name":"private_command?","children":[],"call":[" command chat type == "," command chat type "," command chat "," command "]}," Telegram Bot execute_command":{"type":"method","name":"execute_command","children":[],"call":[" execute_group_command "," execute_private_command "," private_command? "," available_commands include? "," command_name "," available_commands "]}," Telegram Bot initialize_command":{"type":"method","name":"initialize_command","children":[],"call":[" Telegram Bot Types Message  new ","command is_a? ","command to_unsafe_h "]}," Telegram Bot plugin_name":{"type":"method","name":"plugin_name","children":[],"call":["bot_token_setting name ","bot_token_setting present? ","Setting  where first ","Setting  where "," bot_token ","Setting  where first  name ","Setting  where first  present? "]}," Telegram Bot call":{"type":"method","name":"call","children":[],"call":[" execute_command ","RedmineBots Telegram  set_locale "]}," Telegram Bot initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_command "," default_keyboard= "," Telegram Bot Types ReplyKeyboardRemove  new ","Set  new "]}," RedmineBots SendSignInLink call":{"type":"method","name":"call","children":[],"call":["RedmineBots Telegram Bot MessageSender  call ","RedmineBots Telegram  bot_token ","(pair\n  (sym :token)\n  (lvar :token)) merge to_query ","(pair\n  (sym :token)\n  (lvar :token)) merge ","Setting  host_name ","Setting  protocol ","I18n  t ","telegram_account telegram_id "," encode ","@user telegram_connection ","@user telegram_account ","RedmineBots Telegram  bot_ encode  ","(pair\n  (sym : encode )\n  (lvar : encode )) merge to_query ","(pair\n  (sym : encode )\n  (lvar : encode )) merge "]}," RedmineBots SendSignInLink initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Telegram Bot MessageSender logger":{"type":"method","name":"logger","children":[],"call":["Logger  new ","Rails  root join ","Rails  root "]}," Telegram Bot MessageSender bot":{"type":"method","name":"bot","children":[],"call":[" Telegram Bot Client  new "," bot_token "]}," Telegram Bot MessageSender call":{"type":"method","name":"call","children":[],"call":[" raise ","(op-asgn\n  (lvasgn :tries) :-\n  (int 1)) zero? "," sleep "," logger warn "," logger "," params inspect "," params "," chat_id "," bot api send_message "," bot api "," bot ","(pair\n  (sym :chat_id)\n  (send nil :chat_id)) merge "," message ","FARADAY_SLEEP_TIME  * ","TRIES  - + ","TRIES  - ","(or\n  (send\n    (send\n      (lvar :e) :send\n      (sym :data)) :dig\n    (str \"parameters\")\n    (str \"retry_after\"))\n  (const nil :SLEEP_TIME)) * ","e send dig ","e send "]}," Telegram Bot MessageSender initialize":{"type":"method","name":"initialize","children":[],"call":["params except ","params fetch ","RedmineBots Telegram  bot_token "]}," Telegram Bot MessageSender FloodError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram Bot MessageSender BotKickedError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram FaradayAdapter fetch_proxy_from_settings":{"type":"method","name":"fetch_proxy_from_settings","children":[],"call":["settings [] ","Setting  plugin_redmine_bots ","Setting  find_by_name value ","Setting  find_by_name ","Setting  plugin_redmine_bots  [] ","Setting  find_by_name value  [] "]}," Telegram FaradayAdapter net_http_connection":{"type":"method","name":"net_http_connection","children":[],"call":["(lvasgn :proxy\n  (send nil :fetch_proxy_from_settings)) new ","env [] scheme == ","env [] scheme ","env [] ","env [] port ","env [] hostname ","Net HTTP  Proxy ","proxy [] "," fetch_proxy_from_settings ","(lvasgn : fetch_proxy_from_settings \n  (send nil :fetch_ fetch_proxy_from_settings _from_settings)) new "," fetch_proxy_from_settings  [] "," fetch_ fetch_proxy_from_settings _from_settings "]}," RedmineBots Telegram AuthenticateByToken failure":{"type":"method","name":"failure","children":[],"call":["Result  new "]}," RedmineBots Telegram AuthenticateByToken success":{"type":"method","name":"success","children":[],"call":["Result  new "]}," RedmineBots Telegram AuthenticateByToken prepare_telegram_account":{"type":"method","name":"prepare_telegram_account","children":[],"call":["telegram_account user_id= ","@user id ","telegram_account user_id == ","telegram_account user_id ","model_class find_or_initialize_by ","telegram_account telegram_id= ","telegram_id == ","telegram_account telegram_id ","telegram_account present? ","model_class find_by ","telegram_data [] to_i ","telegram_data [] ","Jwt  decode_token first ","Jwt  decode_token ","model_class find_or_initialize_by  user_id= ","model_class find_by  user_id= ","model_class find_or_initialize_by  user_id == ","model_class find_by  user_id == ","model_class find_or_initialize_by  user_id ","model_class find_by  user_id ","model_class find_or_initialize_by  telegram_id= ","model_class find_by  telegram_id= ","telegram_account telegram_data [] to_i = ","telegram_data [] to_i  == ","model_class find_or_initialize_by  telegram_id ","model_class find_by  telegram_id ","telegram_account telegram_data [] to_i  ","model_class find_or_initialize_by  present? ","model_class find_by  present? ","Jwt  decode_token first  [] to_i ","Jwt  decode_token first  [] "]}," RedmineBots Telegram AuthenticateByToken call":{"type":"method","name":"call","children":[],"call":[" failure ","I18n  t "," success ","telegram_account save "," prepare_telegram_account ","@user anonymous? "," RedmineBots Telegram Bot UpdateSignInMessage  call "," prepare_telegram_account  save "," prepare_ prepare_telegram_account  "]}," RedmineBots Telegram AuthenticateByToken initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineBots Telegram Authenticate failure":{"type":"method","name":"failure","children":[],"call":["Result  new "]}," RedmineBots Telegram Authenticate success":{"type":"method","name":"success","children":[],"call":["Result  new "]}," RedmineBots Telegram Authenticate up_to_date?":{"type":"method","name":"up_to_date?","children":[],"call":["Time  at > ","Time  now - ","Time  now ","Time  at ","@auth_data [] to_i ","@auth_data [] "]}," RedmineBots Telegram Authenticate hash_valid?":{"type":"method","name":"hash_valid?","children":[],"call":["Utils  auth_hash == ","@auth_data [] ","Utils  auth_hash "]}," RedmineBots Telegram Authenticate prepare_telegram_account":{"type":"method","name":"prepare_telegram_account","children":[],"call":["telegram_account user_id= ","@user id ","telegram_account user_id == ","telegram_account user_id ","model_class find_or_initialize_by ","@auth_data [] ","telegram_account telegram_id= ","@auth_data [] to_i == ","telegram_account telegram_id ","@auth_data [] to_i ","telegram_account present? ","model_class find_by ","model_class find_or_initialize_by  user_id= ","model_class find_by  user_id= ","model_class find_or_initialize_by  user_id == ","model_class find_by  user_id == ","model_class find_or_initialize_by  user_id ","model_class find_by  user_id ","model_class find_or_initialize_by  telegram_id= ","model_class find_by  telegram_id= ","model_class find_or_initialize_by  telegram_id ","model_class find_by  telegram_id ","model_class find_or_initialize_by  present? ","model_class find_by  present? "]}," RedmineBots Telegram Authenticate call":{"type":"method","name":"call","children":[],"call":[" failure ","I18n  t "," success ","telegram_account save ","telegram_account assign_attributes ","@auth_data slice "," prepare_telegram_account "," up_to_date? "," hash_valid? ","@user logged? "," prepare_telegram_account  save "," prepare_telegram_account  assign_attributes "," prepare_ prepare_telegram_account  "]}," RedmineBots Telegram Authenticate initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  [] ","auth_data sort_by ","auth_data to_h sort_by ","auth_data to_h "]}," Slack bot_client":{"type":"method","name":"bot_client","children":[],"call":[]}," Slack robot_client":{"type":"method","name":"robot_client","children":[],"call":[]}," Slack client":{"type":"method","name":"client","children":[],"call":[]}," Slack configured?":{"type":"method","name":"configured?","children":[],"call":[]}," Slack SignIn client_secret":{"type":"method","name":"client_secret","children":[],"call":["Setting  plugin_redmine_bots [] ","Setting  plugin_redmine_bots "]}," Slack SignIn client_id":{"type":"method","name":"client_id","children":[],"call":["Setting  plugin_redmine_bots [] ","Setting  plugin_redmine_bots "]}," Slack SignIn current_user":{"type":"method","name":"current_user","children":[],"call":["User  current "]}," Slack SignIn call":{"type":"method","name":"call","children":[],"call":["slack_account save ","slack_account name= ","user_identity user name ","user_identity user ","slack_account slice symbolize_keys == ","slack_account slice symbolize_keys ","slack_account slice ","slack_account assign_attributes ","slack_account new_record? ","user_identity team id ","user_identity team ","user_identity user id ","SlackAccount  find_or_initialize_by "," current_user id "," current_user ","user_client users_identity "," Slack Web Client  new ","oauth access_token ","@client oauth_access ","params [] "," client_secret "," client_id "," current_user anonymous? ","SlackAccount  find_or_initialize_by  save ","SlackAccount  find_or_initialize_by  name= ","user_client users_identity  user name ","user_client users_identity  user ","SlackAccount  find_or_initialize_by  slice symbolize_keys == ","SlackAccount  find_or_initialize_by  slice symbolize_keys ","SlackAccount  find_or_initialize_by  slice ","SlackAccount  find_or_initialize_by  assign_attributes ","SlackAccount  find_or_initialize_by  new_record? ","user_client users_identity  team id ","user_client users_identity  team ","user_client users_identity  user id "," Slack Web Client  new  users_identity ","@client oauth_access  access_token ","@client @client oauth_access _access "]}," Slack SignIn initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slack EventHandler reply":{"type":"method","name":"reply","children":[],"call":[" client say ","attrs merge "," data channel "," data "," client "]}," Slack EventHandler call":{"type":"method","name":"call","children":[],"call":[" raise "]}," Slack EventHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slack EventHandler to_proc":{"type":"method","name":"to_proc","children":[],"call":[]}," Slack EventHandler event":{"type":"method","name":"event","children":[],"call":[]}," Commands Help help_message":{"type":"method","name":"help_message","children":[],"call":["(send\n  (send\n    (const\n      (const\n        (const nil :RedmineBots) :Slack) :Bot) :commands) :map) join ","command description ","command names join ","command names ","RedmineBots Slack Bot  commands map ","RedmineBots Slack Bot  commands "]}," Commands Help call":{"type":"method","name":"call","children":[],"call":[" reply "," help_message "]}," Commands Connect sign_in_link":{"type":"method","name":"sign_in_link","children":[],"call":["Setting  host_name ","Setting  protocol "]}," Commands Connect call":{"type":"method","name":"call","children":[],"call":[" reply "," sign_in_link "," current_user logged? "," current_user "]}," Commands Base group_only?":{"type":"method","name":"group_only?","children":[],"call":[" class group_only? "," class "]}," Commands Base private_only?":{"type":"method","name":"private_only?","children":[],"call":[" class private_only? "," class "]}," Commands Base group?":{"type":"method","name":"group?","children":[],"call":[" private? ! "," private? "," private_only? ! "," private_only? "]}," Commands Base private?":{"type":"method","name":"private?","children":[],"call":[" channel is_im "," channel "," group_only? ! "," group_only? "]}," Commands Base channel":{"type":"method","name":"channel","children":[],"call":[" client web_client conversations_info channel "," client web_client conversations_info "," data channel "," data "," client web_client "," client "]}," Commands Base group_only":{"type":"method","name":"group_only","children":[],"call":[" client say "," data channel "," data "," client "," define_singleton_method "]}," Commands Base private_only":{"type":"method","name":"private_only","children":[],"call":[" client say "," data channel "," data "," client "," define_singleton_method "]}," Commands Base not_authorized":{"type":"method","name":"not_authorized","children":[],"call":[" client say "," data channel "," data "," client "]}," Commands Base authorized?":{"type":"method","name":"authorized?","children":[],"call":[]}," Commands Base current_user":{"type":"method","name":"current_user","children":[],"call":["User  anonymous ","SlackAccount  find_by "," data user "," data "]}," Commands Base reply":{"type":"method","name":"reply","children":[],"call":[" client say ","attrs merge "," data channel "," data "," client "]}," Commands Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Commands Base description":{"type":"method","name":"description","children":[],"call":["I18n  t "," name demodulize underscore "," name demodulize "," name "]}," Commands Base described_as":{"type":"method","name":"described_as","children":[],"call":[" define_singleton_method "]}," Commands Base responds_to":{"type":"method","name":"responds_to","children":[],"call":["names map "," define_singleton_method "]}," Commands Base to_proc":{"type":"method","name":"to_proc","children":[],"call":[" new call "," new "," lambda "]}," Commands Base inherited":{"type":"method","name":"inherited","children":[{"type":"method","name":"call","children":[],"asgn":[],"call":[" group_only "," group? ! "," group? "," group_only? "," private_only "," private? ! "," private? "," private_only? "," not_authorized "," authorized? ","I18n  locale= ","Setting  [] "]}],"call":["klass prepend "," group_only "," group? ! "," group? "," group_only? "," private_only "," private? ! "," private? "," private_only? "," not_authorized "," authorized? ","I18n  locale= ","Setting  [] ","Module  new "]}," Slack Bot register_handlers":{"type":"method","name":"register_handlers","children":[],"call":[]}," Slack Bot register_commands":{"type":"method","name":"register_commands","children":[],"call":[]}," Slack Bot instance":{"type":"method","name":"instance","children":[],"call":[]}," RedmineBots Result failure?":{"type":"method","name":"failure?","children":[],"call":[" success? ! "," success? "]}," RedmineBots Result success?":{"type":"method","name":"success?","children":[],"call":[]}," RedmineBots Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Telegram webhook_secret":{"type":"method","name":"webhook_secret","children":[],"call":[]}," RedmineBots Telegram UpdateSignInMessage call":{"type":"method","name":"call","children":[],"call":["bot api edit_message_text ","I18n  t ","@telegram_account telegram_id ","bot api "," Telegram Bot Client  new ","RedmineBots Telegram  bot_token "," Telegram Bot Client  new  api edit_message_text "," Telegram Bot Client  new  api ","RedmineBots Telegram   Telegram Bot Client  new _token "]}," RedmineBots Telegram UpdateSignInMessage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineBots Telegram AuthenticateByToken bot":{"type":"method","name":"bot","children":[],"call":[" Telegram Bot Client  new ","RedmineBots Telegram  bot_token "]}," RedmineBots deprecated_plugins":{"type":"method","name":"deprecated_plugins","children":[],"call":[]}," Telegram tdlib_client":{"type":"method","name":"tdlib_client","children":[],"call":[]}," Tdlib FetchAllChats fetch":{"type":"method","name":"fetch","children":[],"call":["(send\n  (send\n    (send nil :client) :get_chats\n    (send nil :offset_chat_id)\n    (send nil :limit)\n    (hash\n      (pair\n        (sym :offset_order)\n        (send nil :offset_order)))) :then) flat ","(send\n  (send\n    (send nil :client) :get_chat\n    (send\n      (lvar :chat_ids) :last)) :then) flat "," fetch wait! "," fetch ","chat order ","chat id "," offset_order= "," offset_chat_id= "," client get_chat then "," client get_chat ","chat_ids last "," client ","Concurrent Promises  fulfilled_future ","chat_ids empty? ","update chat_ids "," client get_chats then "," client get_chats "," offset_order "," limit "," offset_chat_id ","(send\n  (send\n    (send nil :client) :get_chats\n    (send nil :chat_list)\n    (send nil :offset_order)\n    (send nil :offset_chat_id)\n    (send nil :limit)) :then) flat "," chat_list ","(send\n  (send\n    (send nil :client) :get_chats\n    (hash\n      (pair\n        (sym :chat_list)\n        (send nil :chat_list))\n      (pair\n        (sym :offset_order)\n        (send nil :offset_order))\n      (pair\n        (sym :offset_chat_id)\n        (send nil :offset_chat_id))\n      (pair\n        (sym :limit)\n        (send nil :limit)))) :then) flat ","(send\n  (send\n    (send nil :client) :get_chat\n    (hash\n      (pair\n        (sym :chat_id)\n        (send\n          (lvar :chat_ids) :last)))) :then) flat ","(send\n  (send\n    (lvar :chat) :positions) :find) order ","p list is_a? ","p list ","chat positions find ","chat positions ","(send\n  (send\n    (send nil :client) :get_chat\n    (send\n      (lvar :update chat_ids ) :last)) :then) flat ","update chat_ids  last ","update chat_ids  empty? ","update update chat_ids  ","(send\n  (send\n    (send nil :client) :get_chat\n    (hash\n      (pair\n        (sym :chat_id)\n        (send\n          (lvar :update chat_ids ) :last)))) :then) flat "]}," Tdlib FetchAllChats call":{"type":"method","name":"call","children":[],"call":[" fetch "]}," Tdlib FetchAllChats initialize":{"type":"method","name":"initialize","children":[],"call":["2 ** - ","2 ** ","ChatList Main  new "]}," Tdlib Command connect":{"type":"method","name":"connect","children":[],"call":[" client ready "," client ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (lvar :type)\n    (false)) :then) flat then ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (lvar :type)\n    (false)) :then) flat "," client enable_proxy ","td_proxy id "," client add_proxy then "," client add_proxy ","proxy port ","proxy host ","TD Types ProxyType Socks5  new ","proxy password ","proxy user ","TelegramProxy  alive socks5 first ","TelegramProxy  alive socks5 ","TelegramProxy  alive ","settings [] ","Setting  find_by_name value ","Setting  find_by_name "," client connect ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (false)\n    (lvar :type)) :then) flat then ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (false)\n    (lvar :type)) :then) flat ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (lvar :TD Types ProxyType Socks5  new )\n    (false)) :then) flat then ","(send\n  (send\n    (send nil :client) :add_TelegramProxy  alive socks5 first \n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :host)\n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :port)\n    (lvar :type)\n    (false)) :then) flat then ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (lvar :TD Types ProxyType Socks5  new )\n    (false)) :then) flat ","(send\n  (send\n    (send nil :client) :add_TelegramProxy  alive socks5 first \n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :host)\n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :port)\n    (lvar :type)\n    (false)) :then) flat "," client enable_TelegramProxy  alive socks5 first  ","td_TelegramProxy  alive socks5 first  id "," client add_TelegramProxy  alive socks5 first  then "," client add_TelegramProxy  alive socks5 first  ","TelegramProxy  alive socks5 first  port ","TelegramProxy  alive socks5 first  host ","TelegramProxy  alive socks5 first  password ","TelegramProxy  alive socks5 first  user ","Setting  find_by_name value  [] ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (false)\n    (lvar :TD Types ProxyType Socks5  new )) :then) flat then ","(send\n  (send\n    (send nil :client) :add_TelegramProxy  alive socks5 first \n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :host)\n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :port)\n    (false)\n    (lvar :type)) :then) flat then ","(send\n  (send\n    (send nil :client) :add_proxy\n    (send\n      (lvar :proxy) :host)\n    (send\n      (lvar :proxy) :port)\n    (false)\n    (lvar :TD Types ProxyType Socks5  new )) :then) flat ","(send\n  (send\n    (send nil :client) :add_TelegramProxy  alive socks5 first \n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :host)\n    (send\n      (lvar :TelegramProxy  alive socks5 first ) :port)\n    (false)\n    (lvar :type)) :then) flat "]}," Tdlib Command auto_connect?":{"type":"method","name":"auto_connect?","children":[],"call":[]}," Tdlib Command call":{"type":"method","name":"call","children":[],"call":["Concurrent Promises  reject ","client dispose "," new call wait "," new call "," new ","RedmineBots Telegram  tdlib_client "," Filelock ","Rails  root join ","Rails  root ","RedmineBots Telegram  tdlib_client  dispose ","RedmineBots Telegram  tdlib_RedmineBots Telegram  tdlib_client  "]}," Tdlib Authenticate auto_connect?":{"type":"method","name":"auto_connect?","children":[],"call":[]}," Telegram FaradayAdapter connection_timed_out_message?":{"type":"method","name":"connection_timed_out_message?","children":[],"call":["message include? ","CURL_TIMEOUT_MESSAGES  any? "]}," Telegram FaradayAdapter telegram_proxy=":{"type":"method","name":"telegram_proxy=","children":[],"call":[]}," Telegram FaradayAdapter configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["session insecure= ","session cacert= ","ssl [] ","ssl fetch "]}," Telegram FaradayAdapter call":{"type":"method","name":"call","children":[],"call":[" raise ","err message include? ","err message "," connection_timed_out_message? ","@app call "," save_response ","response headers ","response body ","response status ","response status_line gsub ","response status_line ","session request ","env [] ","env [] to_s ","session proxy= ","proxy url ","TelegramProxy  alive first ","TelegramProxy  alive ","settings [] ","Setting  find_by_name value ","Setting  find_by_name ","session connect_timeout= ","req [] ","session timeout= "," configure_ssl ","env [] scheme == ","env [] scheme ","@config_block call "," Patron Session  new ","env []= ","env [] read ","env [] respond_to? ","session force_ipv4= ","session env [] uest "," Patron Session  new  request ","session TelegramProxy  alive first = "," Patron Session  new  proxy= ","TelegramProxy  alive first  url ","Setting  find_by_name value  [] "," Patron Session  new  connect_timeout= ","env []  [] "," Patron Session  new  timeout= "," Patron Session  new  force_ipv4= "]}," Tdlib permit_concurrent_loads":{"type":"method","name":"permit_concurrent_loads","children":[],"call":["ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock ","Rails VERSION MAJOR  < "]}," Tdlib wrap":{"type":"method","name":"wrap","children":[],"call":["Rails  application executor wrap ","Rails  application executor ","Rails  application ","Rails VERSION MAJOR  < "]}," Tdlib CreateChat permissions":{"type":"method","name":"permissions","children":[],"call":["ChatPermissions  new "]}," Tdlib CloseChat close_super_group":{"type":"method","name":"close_super_group","children":[],"call":[" client delete_supergroup ","chat_type supergroup_id "," client "]}," Tdlib CloseChat close_basic_group":{"type":"method","name":"close_basic_group","children":[],"call":["(send\n  (send\n    (send nil :client) :get_basic_group_full_info\n    (send\n      (send\n        (lvar :chat) :type) :basic_group_id)) :then) flat ","(send\n  (lvar :promise) :then) flat "," delete_member ","chat id ","promise then ","member_ids reduce ","Promises  fulfilled_future ","regular_member_ids + + ","bot_member_ids & ","regular_member_ids + ","arr map ","(send\n  (send\n    (lvar :group_info) :members) :partition) map ","m user_id in? ","m user_id ","group_info members partition ","group_info members "," client get_basic_group_full_info then "," client get_basic_group_full_info ","chat type basic_group_id ","chat type "," client ","(send\n  (send\n    (send nil :client) :get_basic_group_full_info\n    (hash\n      (pair\n        (sym :basic_group_id)\n        (send\n          (send\n            (lvar :chat) :type) :basic_group_id)))) :then) flat "]}," Tdlib CloseChat fetch_robot_ids":{"type":"method","name":"fetch_robot_ids","children":[],"call":["Promises  zip "," client get_me then "," client get_me "," client ","Setting  find_by value [] to_i ","Setting  find_by value [] ","Setting  find_by value ","Setting  find_by ","Promises  future ","ActiveRecord Base  connection_pool with_connection ","ActiveRecord Base  connection_pool "]}," Telegram Bot MessageSender ChatNotFoundError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram Bot MessageSender ForbiddenError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram Bot MessageSender BotBlockedError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram Bot MessageSender UserDeactivatedError ===":{"type":"method","name":"===","children":[],"call":[]}," RedmineBots Telegram AuthenticateByToken MessageNotModifiedError ===":{"type":"method","name":"===","children":[],"call":[]}," Telegram init":{"type":"method","name":"init","children":[],"call":[]}," Telegram bot":{"type":"method","name":"bot","children":[],"call":[]}," Tdlib AddToChat call":{"type":"method","name":"call","children":[],"call":["(send\n  (send\n    (send nil :client) :search_public_chat\n    (hash\n      (pair\n        (sym :username)\n        (lvar :user_name)))) :then) flat ","(send\n  (send\n    (send nil :client) :get_user\n    (hash\n      (pair\n        (sym :user_id)\n        (send\n          (lvar :user_chat) :id)))) :then) flat "," client add_chat_member ","user_chat id "," client "," client get_user then "," client get_user "," client search_public_chat then "," client search_public_chat "]}," Telegram Bot handle_errors":{"type":"method","name":"handle_errors","children":[],"call":[" log ","e message ","e class "]}," Telegram Bot log":{"type":"method","name":"log","children":[],"call":["Rails  logger info ","Rails  logger "]}," Telegram Bot commands":{"type":"method","name":"commands","children":[],"call":[" handlers select "," handlers "]}," Telegram Bot register_persistent_command":{"type":"method","name":"register_persistent_command","children":[],"call":["@persistent_commands << "]}," Telegram Bot register_handler":{"type":"method","name":"register_handler","children":[],"call":["@handlers << "]}," Telegram Bot async":{"type":"method","name":"async","children":[],"call":[" async_handler_class new "," async_handler_class "]}," Telegram Bot webhook_secret":{"type":"method","name":"webhook_secret","children":[],"call":["Digest SHA256  hexdigest ","Rails  application secrets [] ","Rails  application secrets ","Rails  application "]}," Telegram Bot set_webhook":{"type":"method","name":"set_webhook","children":[],"call":[" api set_webhook "," api "," webhook_secret ","Setting  host_name "]}," Telegram Bot promote_chat_member":{"type":"method","name":"promote_chat_member","children":[],"call":[" api promote_chat_member "," api "," throttle apply "," throttle "," handle_errors "]}," Telegram Bot edit_message_text":{"type":"method","name":"edit_message_text","children":[],"call":[" api edit_message_text "," api "," throttle apply "," throttle "," handle_errors "]}," Telegram Bot get_chat":{"type":"method","name":"get_chat","children":[],"call":[" api get_chat "," api "," throttle apply "," throttle "," handle_errors "]}," Telegram Bot handle_update":{"type":"method","name":"handle_update","children":[],"call":["h call ","h match? "," handlers each "," handlers ","command resume! ","command_class retrieve ","action from_id "," persistent_commands each "," persistent_commands ","UserAction  from_payload ","RedmineBots Telegram  set_locale ","command_class retrieve  resume! ","command_class retrieve _class retrieve ","UserAction  from_payload  from_id "," persistent_command_class retrieve s each "," persistent_command_class retrieve s "]}," Telegram Bot IgnoredError ===":{"type":"method","name":"===","children":[],"call":[]}," Bot UserAction user":{"type":"method","name":"user","children":[],"call":["User  anonymous "," telegram_account "]}," Bot UserAction group?":{"type":"method","name":"group?","children":[],"call":[" private? ! "," private? "]}," Bot UserAction private?":{"type":"method","name":"private?","children":[],"call":[" message chat type == "," message chat type "," message chat "," message "," message? "]}," Bot UserAction command":{"type":"method","name":"command","children":[],"call":[" message text match try "," message text match "," message text "," message "," message text match [] "," command? "]}," Bot UserAction command?":{"type":"method","name":"command?","children":[],"call":[" message text "," message "," message is_a? "]}," Bot UserAction text":{"type":"method","name":"text","children":[],"call":[" message text to_s "," message text "," message "," message? "]}," Bot UserAction callback_query?":{"type":"method","name":"callback_query?","children":[],"call":[" message is_a? "," message "]}," Bot UserAction message?":{"type":"method","name":"message?","children":[],"call":[" message is_a? "," message "]}," Bot UserAction telegram_account":{"type":"method","name":"telegram_account","children":[],"call":["TelegramAccount  find_by "," message from id "," message from "," message "]}," Bot UserAction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bot UserAction from_payload":{"type":"method","name":"from_payload","children":[],"call":[]}," Bot Token to_s":{"type":"method","name":"to_s","children":[],"call":["Setting  find_by_name value [] ","Setting  find_by_name value ","Setting  find_by_name "]}," Bot NullThrottle apply":{"type":"method","name":"apply","children":[],"call":[]}," Bot HelpMessage to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (block\n    (send\n      (lvar :commands) :select)\n    (args\n      (arg :command))\n    (send\n      (lvar :command) :allowed?\n      (send\n        (send nil :action) :user))) :map) join ","(str \"/\") chomp ","command description ","command name ","(send\n  (lvar :commands) :select) map ","command allowed? "," action user "," action ","commands select "," bot commands select "," bot commands "," bot "," action private? ","(send\n  (block\n    (send\n      (lvar : bot commands select ) :select)\n    (args\n      (arg :command))\n    (send\n      (lvar :command) :allowed?\n      (send\n        (send nil :action) :user))) :map) join ","(send\n  (lvar : bot commands select ) :select) map "," bot commands select  select "," bot  bot commands select  select "," bot  bot commands select  "]}," Bot HelpMessage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Handlers StartCommand instruction_message":{"type":"method","name":"instruction_message","children":[],"call":["I18n  t "]}," Handlers StartCommand hello_message":{"type":"method","name":"hello_message","children":[],"call":["I18n  t "]}," Handlers StartCommand call":{"type":"method","name":"call","children":[],"call":["bot async send_message ","keyboard to_json ","action chat_id ","bot async "," Telegram Bot Types ReplyKeyboardRemove  new ","bot default_keyboard ","action user "," instruction_message "," hello_message ","bot async send_ instruction_message  ","bot async send_ hello_message  "," Telegram Bot Types ReplyKeyboardRemove  new  to_json ","bot default_keyboard  to_json ","bot default_ Telegram Bot Types ReplyKeyboardRemove  new  ","bot default_bot default_keyboard  "," instruction_ instruction_message  "," instruction_ hello_message  "," hello_ instruction_message  "," hello_ hello_message  "]}," Handlers StartCommand description":{"type":"method","name":"description","children":[],"call":["I18n  t "]}," Handlers StartCommand allowed?":{"type":"method","name":"allowed?","children":[],"call":[]}," Handlers StartCommand name":{"type":"method","name":"name","children":[],"call":[]}," Handlers StartCommand command?":{"type":"method","name":"command?","children":[],"call":[]}," Handlers StartCommand private?":{"type":"method","name":"private?","children":[],"call":[]}," Handlers HelpCommand call":{"type":"method","name":"call","children":[],"call":["bot async send_message ","keyboard to_json ","action chat_id ","bot async "," Telegram Bot Types ReplyKeyboardRemove  new ","bot default_keyboard ","action user ","RedmineBots Telegram Bot HelpMessage  new to_s ","RedmineBots Telegram Bot HelpMessage  new ","bot async send_RedmineBots Telegram Bot HelpMessage  new to_s  "," Telegram Bot Types ReplyKeyboardRemove  new  to_json ","bot default_keyboard  to_json ","bot default_ Telegram Bot Types ReplyKeyboardRemove  new  ","bot default_bot default_keyboard  "]}," Handlers HelpCommand command?":{"type":"method","name":"command?","children":[],"call":[]}," Handlers HelpCommand allowed?":{"type":"method","name":"allowed?","children":[],"call":[]}," Handlers HelpCommand description":{"type":"method","name":"description","children":[],"call":["I18n  t "]}," Handlers HelpCommand name":{"type":"method","name":"name","children":[],"call":[]}," Handlers HelpCommand group?":{"type":"method","name":"group?","children":[],"call":[]}," Handlers HelpCommand private?":{"type":"method","name":"private?","children":[],"call":[]}," Handlers HandlerBehaviour allowed?":{"type":"method","name":"allowed?","children":[],"call":[]}," Handlers HandlerBehaviour description":{"type":"method","name":"description","children":[],"call":[" raise "]}," Handlers HandlerBehaviour group?":{"type":"method","name":"group?","children":[],"call":[]}," Handlers HandlerBehaviour private?":{"type":"method","name":"private?","children":[],"call":[]}," Handlers HandlerBehaviour name":{"type":"method","name":"name","children":[],"call":[" raise "]}," Handlers HandlerBehaviour command?":{"type":"method","name":"command?","children":[],"call":[]}," Handlers HandlerBehaviour match?":{"type":"method","name":"match?","children":[],"call":["command == "," name ","action command "," command? "," group? ","action group? "," private? ","action private? "]}," Handlers ConnectCommand instruction_message":{"type":"method","name":"instruction_message","children":[],"call":["I18n  t "]}," Handlers ConnectCommand hello_message":{"type":"method","name":"hello_message","children":[],"call":["I18n  t "]}," Handlers ConnectCommand call":{"type":"method","name":"call","children":[],"call":["bot async send_message ","action chat_id ","bot async ","I18n  t ","Setting  host_name ","Setting  protocol ","action user active? ","action user ","bot async send_I18n  t  "]}," Handlers ConnectCommand description":{"type":"method","name":"description","children":[],"call":["I18n  t "]}," Handlers ConnectCommand allowed?":{"type":"method","name":"allowed?","children":[],"call":["user anonymous? "]}," Handlers ConnectCommand name":{"type":"method","name":"name","children":[],"call":[]}," Handlers ConnectCommand command?":{"type":"method","name":"command?","children":[],"call":[]}," Handlers ConnectCommand private?":{"type":"method","name":"private?","children":[],"call":[]}," Bot AsyncHandler promote_chat_member":{"type":"method","name":"promote_chat_member","children":[],"call":["AsyncBotHandlerWorker  perform_async "]}," Bot AsyncHandler send_message":{"type":"method","name":"send_message","children":[],"call":["AsyncBotHandlerWorker  perform_async "]}," Bot AsyncHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}}