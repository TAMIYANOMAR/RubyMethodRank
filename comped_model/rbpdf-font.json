{" RBPDFFontDescriptor getfontpath":{"type":"method","name":"getfontpath","children":[],"call":[]}," RBPDFFontDescriptor define":{"type":"method","name":"define","children":[],"call":[]}," RBPDFFontDescriptor font":{"type":"method","name":"font","children":[],"call":[]}," CheckTTF":{"type":"method","name":"CheckTTF","children":[],"call":[" print ","e ! ","pp ! ","f close ","(send\n  (lvar :fsType) :&\n  (int 8)) != ","fsType & ","(send\n  (lvar :fsType) :&\n  (int 4)) != ","(send\n  (lvar :fsType) :&\n  (int 2)) != "," ReadShort ","f seek "," ReadLong ","found ! ","f read == ","f read ","nb times "," abort ","Error: unable to open  + ","f ! "," open ","(send\n  (lvar :fsType) :&\n  (int 8)) !=  ! ","(send\n  (lvar :fsType) :&\n  (int 4)) !=  ! ","f clos(send\n  (lvar :fsType) :&\n  (int 8)) !=  "," open  close ","(s(send\n  (lvar :fsType) :&\n  (int 8)) != nd\n  (lvar :fsTyp(send\n  (lvar :fsType) :&\n  (int 8)) != ) :&\n  (int 8)) != ","(send\n  (lvar : ReadShort ) :&\n  (int 8)) != ","(send\n  (lvar : open sType) :&\n  (int 8)) != ","fsTyp(send\n  (lvar :fsType) :&\n  (int 8)) !=  & "," ReadShort  & "," open sType & ","(s(send\n  (lvar :fsType) :&\n  (int 8)) != nd\n  (lvar :fsTyp(send\n  (lvar :fsType) :&\n  (int 8)) != ) :&\n  (int 4)) != ","(send\n  (lvar : ReadShort ) :&\n  (int 4)) != ","(send\n  (lvar : open sType) :&\n  (int 4)) != ","(s(send\n  (lvar :fsType) :&\n  (int 8)) != nd\n  (lvar :fsTyp(send\n  (lvar :fsType) :&\n  (int 8)) != ) :&\n  (int 2)) != ","(send\n  (lvar : ReadShort ) :&\n  (int 2)) != ","(send\n  (lvar : open sType) :&\n  (int 2)) != "," R(send\n  (lvar :fsType) :&\n  (int 8)) != adShort ","f s(send\n  (lvar :fsType) :&\n  (int 8)) != (send\n  (lvar :fsType) :&\n  (int 8)) != k "," open  seek "," R(send\n  (lvar :fsType) :&\n  (int 8)) != adLong "," open ound ! ","f r(send\n  (lvar :fsType) :&\n  (int 8)) != ad == "," open  read == ","f r(send\n  (lvar :fsType) :&\n  (int 8)) != ad "," open  read ","nb tim(send\n  (lvar :fsType) :&\n  (int 8)) != s "," ReadShort  times ","Error: unabl(send\n  (lvar :fsType) :&\n  (int 8)) !=  to op(send\n  (lvar :fsType) :&\n  (int 8)) != n  + "," open  ! "," op(send\n  (lvar :fsType) :&\n  (int 8)) != n "]}," ReadLong":{"type":"method","name":"ReadLong","children":[],"call":["a [] ","f read unpack ","f read ","f read unpack  [] ","f ref read unpack d unpf read unpack ck ","f ref read unpack d "]}," ReadShort":{"type":"method","name":"ReadShort","children":[],"call":["a [] ","f read unpack ","f read ","f read unpack  [] ","f ref read unpack d unpf read unpack ck ","f ref read unpack d "]}," SaveToFile":{"type":"method","name":"SaveToFile","children":[],"call":["f close ","f write "," abort ","Can't write to file  + ","f ! "," open ","w + "," open  close "," open  write ","Can't write to  open ile  + "," open  ! "]}," MakeFontEncoding":{"type":"method","name":"MakeFontEncoding","children":[],"call":["s rstrip ","s << ","/ + + ","/ + ","map [] ","i to_s + ","i to_s ","i != ","last + ","map [] != ","ref [] ","32 upto "," ReadMap "," ReadMap  [] "]}," MakeWidthArray":{"type":"method","name":"MakeWidthArray","children":[],"call":["s << ","els join ","els push ","(if\n  (begin\n    (send\n      (begin\n        (send\n          (begin\n            (op-asgn\n              (lvasgn :c) :+\n              (int 1))) :%\n          (int 10))) :==\n      (int 0)))\n  (str \"\\n  \")\n  (str \"\")) + + + ","w to_s ","(if\n  (begin\n    (send\n      (begin\n        (send\n          (begin\n            (op-asgn\n              (lvasgn :c) :+\n              (int 1))) :%\n          (int 10))) :==\n      (int 0)))\n  (str \"\\n  \")\n  (str \"\")) + + ","(if\n  (begin\n    (send\n      (begin\n        (send\n          (begin\n            (op-asgn\n              (lvasgn :c) :+\n              (int 1))) :%\n          (int 10))) :==\n      (int 0)))\n  (str \"\\n  \")\n  (str \"\")) + ","i to_s ","(send\n  (begin\n    (op-asgn\n      (lvasgn :c) :+\n      (int 1))) :%\n  (int 10)) == ","(op-asgn\n  (lvasgn :c) :+\n  (int 1)) % ","i is_a? ","cw each ","fm [] ","fm []  each "]}," MakeFontDescriptor":{"type":"method","name":"MakeFontDescriptor","children":[],"call":["fd << ",",'MissingWidth'=> + ","fm [] to_s ","fm [] ",",'StemV'=> + ","stemv to_s ","fm [] =~ ",",'ItalicAngle'=> + ","ia to_s ",",'FontBBox'=>'[ + + + + + + + + ",",'FontBBox'=>'[ + + + + + + + ","fbb [] to_s ","fbb [] ",",'FontBBox'=>'[ + + + + + + ",",'FontBBox'=>'[ + + + + + ",",'FontBBox'=>'[ + + + + ",",'FontBBox'=>'[ + + + ",",'FontBBox'=>'[ + + ",",'FontBBox'=>'[ + ","asc + ","desc - ",",'Flags'=> + ","flags to_s ","1 << ","fm [] != ","fm [] == ",",'CapHeight'=> + ","ch to_s ",",'Descent'=> + ","desc to_s ","{'Ascent'=> + ","asc to_s ","{'Ascent'=> +  << ","fm []  to_s ","fm []  [] to_s ","fm []  [] ","fm []  + ","fm []  - "]}," ReadAFM":{"type":"method","name":"ReadAFM","children":[],"call":["fm []= ","widths []= ","widths [] ","map [] "," print ","Warning: character  + + ","Warning: character  + ","widths [] nil? ","256 times ","map empty? ! ","map empty? "," abort ","fm [] nil? ","fm [] ","param to_i ","code == ","e [] ","param == ","param to_f ","gn == ","map []= ","n == ","fix [] ","map each_with_index ","gn [] == ","gn [] ","e [] to_i ","e length < ","e length ","l rstrip split ","l rstrip ","a each ","a empty? ","File  open readlines ","File  open ","e [] idths []= ","e [] idths [] ","mFile  open readlines p [] ","Warning: charactl rstrip split r  + + ","WFile  open readlines rning: chFile  open readlines rFile  open readlines cter  + + ","Warning: charactl rstrip split r  + ","WFile  open readlines rning: chFile  open readlines rFile  open readlines cter  + ","e [] idths [] nil? ","256 timl rstrip split s ","map l rstrip split mpty? ! ","mFile  open readlines p empty? ! ","map l rstrip split mpty? ","mFile  open readlines p empty? "," File  open readlines bort ","e []  to_i ","pFile  open readlines rFile  open readlines m to_i ","e []  == ","codl rstrip split  == ","l rstrip split  [] ","pFile  open readlines rFile  open readlines m == ","e []  to_f ","pFile  open readlines rFile  open readlines m to_f ","mFile  open readlines p []= ","map each_e [] ith_index ","map l rstrip split ach_with_indl rstrip split x ","mFile  open readlines p eFile  open readlines ch_with_index ","e []  [] == ","e []  [] ","l rstrip split  [] to_i ","l rstrip split  ll rstrip split ngth < ","l rstrip split  ll rstrip split ngth ","a l rstrip split ach ","File  open readlines  eFile  open readlines ch ","a l rstrip split mpty? ","File  open readlines  empty? ","Fill rstrip split   opl rstrip split n rl rstrip split adlinl rstrip split s ","File  open reFile  open readlines dlines ","Fill rstrip split   opl rstrip split n "]}," ReadUFM":{"type":"method","name":"ReadUFM","children":[],"call":["fm []= "," abort ","fm [] nil? ","fm [] ","param to_i ","code == ","e [] ","param == ","param to_f ","gn == ","cidtogidmap []= ","(send\n  (lvar :glyph) :&\n  (int 255)) chr ","glyph & ","cc * + ","cc * ","(send\n  (lvar :glyph) :>>\n  (int 8)) chr ","glyph >> ","cc < ","cc >= ","cc == ","X unpack [] ","X unpack ","widths []= ","e [] to_i ","cc != ","e length < ","e length ","l rstrip split ","l rstrip ","a each ","a empty? ","File  open readlines ","File  open "," ljust ","256 * * ","256 * "," File  open readlines bort ","e []  to_i ","pFile  open readlines rFile  open readlines m to_i ","e []  == ","codl rstrip split  == ","l rstrip split  [] ","pFile  open readlines rFile  open readlines m == ","e []  to_f ","pFile  open readlines rFile  open readlines m to_f ","cidtogidmFile  open readlines p []= "," ljust  []= ","(send\n  (lvar :e [] to_i ) :&\n  (int 255)) chr ","(sl rstrip split nd\n  (lvar :glyph) :&\n  (int 255)) chr ","(send\n  (lvFile  open readlines r :glyph) :&\n  (int 255)) chr ","e [] to_i  & ","e [] to_i  * + ","e [] to_i  * ","(send\n  (lvar :e [] to_i ) :>>\n  (int 8)) chr ","(sl rstrip split nd\n  (lvar :glyph) :>>\n  (int 8)) chr ","(send\n  (lvFile  open readlines r :glyph) :>>\n  (int 8)) chr ","e [] to_i  >> ","e [] to_i  < ","e [] to_i  >= ","e [] to_i  == ","X unpFile  open readlines ck [] ","X unpFile  open readlines ck ","e [] to_i idths []= ","l rstrip split  [] to_i ","e [] to_i  != ","l rstrip split  ll rstrip split ngth < ","l rstrip split  ll rstrip split ngth ","a l rstrip split ach ","File  open readlines  eFile  open readlines ch ","a l rstrip split mpty? ","File  open readlines  empty? ","Fill rstrip split   opl rstrip split n rl rstrip split adlinl rstrip split s ","File  open reFile  open readlines dlines ","Fill rstrip split   opl rstrip split n "]}," ReadMap":{"type":"method","name":"ReadMap","children":[],"call":["cc2gn []= ","cc2gn [] nil? ","cc2gn [] ","256 times ","e [] ","e [] [] hex ","e [] [] ","l rstrip split ","l rstrip ","l [] == ","l [] ","a each "," abort ","Error: encoding not found:  + ","a empty? ","File  open readlines ","File  open ","File  dirname + + + ","File  dirname + + ","enc downcase ","File  dirname + ","File  dirname ","cc2e []  []= ","e [] [] hex 2gn []= ","cc2e []  [] nil? ","e [] [] hex 2gn [] nil? ","cc2e []  [] ","e [] [] hex 2gn [] ","256 timl rstrip split s ","l rstrip split  [] ","l rstrip split  [] [] hl rstrip split x ","l rstrip split  [] [] ","a l rstrip split ach ","File  open readlines  eFile  open readlines ch "," File  open readlines bort ","Error: l rstrip split ncoding not found:  + ","a l rstrip split mpty? ","File  open readlines  empty? ","Fill rstrip split   opl rstrip split n rl rstrip split adlinl rstrip split s ","File  open reFile  open readlines dlines ","Fill rstrip split   opl rstrip split n ","Fill rstrip split   dirnaml rstrip split  + + + ","File  dirnFile  open readlines me + + + ","Fill rstrip split   dirnaml rstrip split  + + ","File  dirnFile  open readlines me + + ","l rstrip split nc downcasl rstrip split  ","enc downcFile  open readlines se ","Fill rstrip split   dirnaml rstrip split  + ","File  dirnFile  open readlines me + ","Fill rstrip split   dirnaml rstrip split  ","File  dirnFile  open readlines me "]}," MakeFont":{"type":"method","name":"MakeFont","children":[],"call":[" print ","Font definition file generated ( + + ","Font definition file generated ( + "," SaveToFile ","basename + ","s << ","  font[:file]= + ","  font[:originalsize]= + + ","  font[:originalsize]= + ","File  stat size to_s ","File  stat size ","File  stat ","  font[:size2]= + + ","  font[:size2]= + ","  font[:size1]= + + ","  font[:size1]= + ","type == ","  font[:ctg]=' + + ","  font[:ctg]=' + ","CIDToGIDMap created ( + + ","CIDToGIDMap created ( + ","f close ","f write "," open ","cidtogidmap empty? ! ","cidtogidmap empty? ","file=' + + ","file=' + ","File  basename ","CIDToGIDMap created and compressed ( + + ","CIDToGIDMap created and compressed ( + ","Zlib Deflate  deflate ","Font file compressed ( + + ","Font file compressed ( + ","  font[:file]=' + + ","  font[:file]=' + ","Object  const_defined? ","basename downcase ","file [] ","size1 + ","pos - "," abort ","pos nil? ","file index ","file [] + ","(send nil :file) unpack [] == ","(send nil :file) unpack [] ","(send nil :file) unpack "," file ","pos + ","file [] unpack [] == ","file [] unpack [] ","file [] unpack ","f read ","Error: Unable to open  + ","f ! "," CheckTTF ","  font[:diff]=' + + ","  font[:diff]=' + ","  font[:enc]=' + + ","  font[:enc]=' + ","  font[:cw]= + + ","  font[:cw]= + "," MakeWidthArray ","  font[:dw]= + + ","  font[:dw]= + ","dw to_s ","fm [] [] to_i ","fm [] [] ","fm [] ","fm [] [] to_i > ","dw <= ","  font[:ut]= + + ","  font[:ut]= + ","fm [] to_s ","  font[:up]= + + ","  font[:up]= + ","fm []= ","fm [] nil? ","  font[:desc]= + + ","  font[:desc]= + ","  font[:name]=' + + ","  font[:name]=' + ","  font[:type]=' + + ","  font[:type]=' + ","RBPDFFontDescriptor.define(' + + ","RBPDFFontDescriptor.define(' + ","File  basename downcase "," MakeFontDescriptor "," ReadUFM ","Error: not a TrueType font:  + ","ffext == ","fmext == ","map empty? "," MakeFontEncoding "," ReadAFM ","map []= ","patch each "," ReadMap ","Error: unrecognized font file extension:  + ","fmfile [] downcase ","fmfile [] ","fontfile [] downcase ","fontfile [] ","Error: file not found:  + ","File  exist? ","Font de open inition  open ile generated ( + + ","Font definition file []  generated ( + + ","Font definition file [] +  generated ( + + ","Font definition f read  generated ( + + ","Font de open inition  open ile generated ( + ","Font definition file []  generated ( + ","Font definition file [] +  generated ( + ","Font definition f read  generated ( + ","basename downcase  + ","File  basename downcase  + ","baRBPDFFontDescriptor.define(' + + ename + ","RBPDFFontDescriptor.define(' + +  << ","   open ont[: open ile]= + ","  font[:file [] ]= + ","  font[:file [] + ]= + ","  font[:f read ]= + ","   open ont[:originalsize]= + + ","  font[:originalRBPDFFontDescriptor.define(' + + ize]= + + ","   open ont[:originalsize]= + ","  font[:originalRBPDFFontDescriptor.define(' + + ize]= + ","File  RBPDFFontDescriptor.define(' + + tat RBPDFFontDescriptor.define(' + + ize to_RBPDFFontDescriptor.define(' + +  ","File  RBPDFFontDescriptor.define(' + + tat RBPDFFontDescriptor.define(' + + ize ","File  RBPDFFontDescriptor.define(' + + tat ","   open ont[:size2]= + + ","  font[:pos - ]= + + ","  font[:RBPDFFontDescriptor.define(' + + ize2]= + + ","   open ont[:size2]= + ","  font[:pos - ]= + ","  font[:RBPDFFontDescriptor.define(' + + ize2]= + ","   open ont[:size1]= + + ","  font[:pos + ]= + + ","  font[:RBPDFFontDescriptor.define(' + + ize1]= + + ","   open ont[:size1]= + ","  font[:pos + ]= + ","  font[:RBPDFFontDescriptor.define(' + + ize1]= + ","   open ont[:ctg]=' + + ","   open ont[:ctg]=' + "," open  close ","f cloRBPDFFontDescriptor.define(' + + e "," open  write ","cidtogid ReadMap  empty? ! ","cidtogid ReadMap  empty? "," open ile=' + + ","file [] =' + + ","file [] + =' + + ","f read =' + + "," open ile=' + ","file [] =' + ","file [] + =' + ","f read =' + ","File  basename downcase  ","File  File  basename downcase  ","File  baRBPDFFontDescriptor.define(' + + ename ","CIDToGIDMap created and compreRBPDFFontDescriptor.define(' + + RBPDFFontDescriptor.define(' + + ed ( + + ","CIDToGIDMap created and compreRBPDFFontDescriptor.define(' + + RBPDFFontDescriptor.define(' + + ed ( + ","Zlib De open late  de open late ","Font  open ile compressed ( + + ","Font file []  compressed ( + + ","Font file [] +  compressed ( + + ","Font f read  compressed ( + + ","Font file compreRBPDFFontDescriptor.define(' + + RBPDFFontDescriptor.define(' + + ed ( + + ","Font  open ile compressed ( + ","Font file []  compressed ( + ","Font file [] +  compressed ( + ","Font f read  compressed ( + ","Font file compreRBPDFFontDescriptor.define(' + + RBPDFFontDescriptor.define(' + + ed ( + ","   open ont[: open ile]=' + + ","  font[:file [] ]=' + + ","  font[:file [] + ]=' + + ","  font[:f read ]=' + + ","   open ont[: open ile]=' + ","  font[:file [] ]=' + ","  font[:file [] + ]=' + ","  font[:f read ]=' + ","Object  const_de open ined? ","Object  conRBPDFFontDescriptor.define(' + + t_defined? ","basename downcase  downcase ","File  basename downcase  downcase ","baRBPDFFontDescriptor.define(' + + ename downcaRBPDFFontDescriptor.define(' + + e "," open ile [] ","file []  [] ","file [] +  [] ","f read  [] ","pos +  + ","RBPDFFontDescriptor.define(' + + ize1 + ","file index  - ","poRBPDFFontDescriptor.define(' + +  - ","file index  nil? ","poRBPDFFontDescriptor.define(' + +  nil? "," open ile index ","file []  index ","file [] +  index ","f read  index "," open ile [] + ","file []  [] + ","file [] +  [] + ","f read  [] + ","(send nil : open ile) unpack [] == ","(send nil :file [] ) unpack [] == ","(send nil :file [] + ) unpack [] == ","(send nil :f read ) unpack [] == ","(RBPDFFontDescriptor.define(' + + end nil :file) unpack [] == ","(send nil : open ile) unpack [] ","(send nil :file [] ) unpack [] ","(send nil :file [] + ) unpack [] ","(send nil :f read ) unpack [] ","(RBPDFFontDescriptor.define(' + + end nil :file) unpack [] ","(send nil : open ile) unpack ","(send nil :file [] ) unpack ","(send nil :file [] + ) unpack ","(send nil :f read ) unpack ","(RBPDFFontDescriptor.define(' + + end nil :file) unpack ","  open ile "," file []  "," file [] +  "," f read  ","file index  + ","poRBPDFFontDescriptor.define(' + +  + "," open ile [] unpack [] == ","file []  [] unpack [] == ","file [] +  [] unpack [] == ","f read  [] unpack [] == "," open ile [] unpack [] ","file []  [] unpack [] ","file [] +  [] unpack [] ","f read  [] unpack [] "," open ile [] unpack ","file []  [] unpack ","file [] +  [] unpack ","f read  [] unpack "," open  read "," open  ! ","   open ont[:di open  open ]=' + + ","  font[: MakeFontEncoding ]=' + + ","   open ont[:di open  open ]=' + ","  font[: MakeFontEncoding ]=' + ","   open ont[:enc]=' + + ","   open ont[:enc]=' + ","   open ont[:cw]= + + ","   open ont[:cw]= + ","   open ont[:dw]= + + ","  font[:fm [] [] to_i ]= + + ","  font[:fm [] ]= + + ","   open ont[:dw]= + ","  font[:fm [] [] to_i ]= + ","  font[:fm [] ]= + ","fm [] [] to_i  to_s ","fm []  to_s ","dw to_RBPDFFontDescriptor.define(' + +  "," open m [] [] to_i "," open m [] [] "," open m [] "," open m [] [] to_i > ","fm [] [] to_i  <= ","fm []  <= ","   open ont[:ut]= + + ","   open ont[:ut]= + "," open m [] to_s ","fm [] to_RBPDFFontDescriptor.define(' + +  ","   open ont[:up]= + + ","   open ont[:up]= + "," open m []= "," open m [] nil? ","   open ont[:desc]= + + ","  font[:deRBPDFFontDescriptor.define(' + + c]= + + ","   open ont[:desc]= + ","  font[:deRBPDFFontDescriptor.define(' + + c]= + ","   open ont[:name]=' + + ","   open ont[:name]=' + ","   open ont[:type]=' + + ","   open ont[:type]=' + ","RBPDFFontDescriptor.de open ine(' + + ","RBPDFFontDeRBPDFFontDescriptor.define(' + + criptor.define(' + + ","RBPDFFontDescriptor.de open ine(' + ","RBPDFFontDeRBPDFFontDescriptor.define(' + + criptor.define(' + ","File  File  basename downcase  downcase ","File  baRBPDFFontDescriptor.define(' + + ename downcaRBPDFFontDescriptor.define(' + + e "," MakeFontDeRBPDFFontDescriptor.define(' + + criptor ","Error: not a TrueType  open ont:  + "," open  open ext == ","fontfile [] downcase  == "," open mext == ","fmfile [] downcase  == "," ReadMap  empty? "," ReadMap  []= ","Error: unrecognized  open ont  open ile extension:  + ","Error: unrecognized font file []  extension:  + ","Error: unrecognized font file [] +  extension:  + ","Error: unrecognized font f read  extension:  + ","Error: unrecognized font file extenRBPDFFontDescriptor.define(' + + ion:  + "," open m open ile [] downcase ","fmfile []  [] downcase ","fmfile [] +  [] downcase ","fmf read  [] downcase ","fmfile [] downcaRBPDFFontDescriptor.define(' + + e "," open m open ile [] ","fmfile []  [] ","fmfile [] +  [] ","fmf read  [] "," open ont open ile [] downcase ","fontfile []  [] downcase ","fontfile [] +  [] downcase ","fontf read  [] downcase ","fontfile [] downcaRBPDFFontDescriptor.define(' + + e "," open ont open ile [] ","fontfile []  [] ","fontfile [] +  [] ","fontf read  [] ","Error:  open ile not  open ound:  + ","Error: file []  not found:  + ","Error: file [] +  not found:  + ","Error: f read  not found:  + ","File  exiRBPDFFontDescriptor.define(' + + t? "]}}