{" Sidekiq server_middleware":{"type":"method","name":"server_middleware","children":[],"call":[]}," Sidekiq client_middleware":{"type":"method","name":"client_middleware","children":[],"call":[]}," Sidekiq redis=":{"type":"method","name":"redis=","children":[],"call":[]}," Sidekiq redis":{"type":"method","name":"redis","children":[],"call":[]}," Sidekiq server?":{"type":"method","name":"server?","children":[],"call":[]}," Sidekiq configure_client":{"type":"method","name":"configure_client","children":[],"call":[]}," Sidekiq configure_server":{"type":"method","name":"configure_server","children":[],"call":[]}," Sidekiq options=":{"type":"method","name":"options=","children":[],"call":[]}," Sidekiq options":{"type":"method","name":"options","children":[],"call":[]}," Sidekiq Worker ClassMethods queue":{"type":"method","name":"queue","children":[],"call":["Sidekiq Client  queue_mappings []= ","name to_s "," name ","Sidekiq Client  queue_mappings "," puts ","Sidekiq Client  queues []= ","Sidekiq Client  queues "," sidekiq_options [] to_s "," sidekiq_options [] "," sidekiq_options "," get_sidekiq_options [] "," get_sidekiq_options "]}," Sidekiq Worker ClassMethods perform_async":{"type":"method","name":"perform_async","children":[],"call":["Sidekiq Client  push "," name "," jobs << "," jobs "," new perform "," new ","Sidekiq  load_json ","Sidekiq  dump_json "," client_push ","args freeze ","class freeze ","Setter  new perform_async ","Setter  new "]}," Sidekiq Worker included":{"type":"method","name":"included","children":[],"call":[]}," Sidekiq Web current_status":{"type":"method","name":"current_status","children":[],"call":["(send\n  (send nil :workers) :map) compact size == ","(send\n  (send nil :workers) :map) compact size ","(send\n  (send nil :workers) :map) compact ","x [] "," workers map "," workers "," workers size > "," workers size "," workers size == "," workers_size == "," workers_size "]}," Sidekiq Web root_path":{"type":"method","name":"root_path","children":[],"call":[" env [] "," env "]}," Sidekiq Web location":{"type":"method","name":"location","children":[],"call":["conn client location ","conn client ","Sidekiq  redis ","Sidekiq  redis client location ","Sidekiq  redis client "]}," Sidekiq Web queues":{"type":"method","name":"queues","children":[],"call":["x [] <=> ","y [] ","x [] ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"queues\")) :map) sort ","conn llen ","conn smembers map ","conn smembers ","Sidekiq  redis ","Sidekiq  redis with_connection ","Sidekiq  info [] ","Sidekiq  info "]}," Sidekiq Web retries":{"type":"method","name":"retries","children":[],"call":[" Float ","MultiJson  decode ","results each_slice map ","results each_slice ","conn zrange ","Sidekiq  redis ","Sidekiq  load_json "," zcontents ","conn zrange  each_slice map ","conn zrange  each_slice "]}," Sidekiq Web retry_count":{"type":"method","name":"retry_count","children":[],"call":["conn zcard ","Sidekiq  redis "]}," Sidekiq Web failed":{"type":"method","name":"failed","children":[],"call":["conn get ","Sidekiq  redis ","Sidekiq  redis get "," info [] "," info "]}," Sidekiq Web processed":{"type":"method","name":"processed","children":[],"call":["conn get ","Sidekiq  redis ","Sidekiq  redis get "," info [] "," info "]}," Sidekiq Web workers":{"type":"method","name":"workers","children":[],"call":["x [] ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"workers\")) :map) sort ","MultiJson  decode ","conn get ","conn smembers map ","conn smembers ","Sidekiq  redis ","Sidekiq  redis with_connection ","Sidekiq  load_json ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"workers\")) :map) compact sort ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"workers\")) :map) compact ","conn srem ","to_rem size > ","to_rem size ","to_rem << "]}," Sidekiq SprocketsMiddleware call":{"type":"method","name":"call","children":[],"call":["@environment call ","env [] sub! ","env [] ","@app call ","@matcher =~ ","env [] == "]}," Sidekiq SprocketsMiddleware initialize":{"type":"method","name":"initialize","children":[],"call":["@environment append_path "," Sprockets Environment  new ","options [] ","config http_stylesheets_path= ","config http_javascripts_path= ","config http_generated_images_path= ","config http_images_path= ","config fonts_dir= ","config javascripts_dir= ","config css_dir= ","config sass_dir= ","config images_dir= ","config project_path= ","Compass  configuration "," Sprockets Environment  new  append_path "]}," Sidekiq Util process_id":{"type":"method","name":"process_id","children":[],"call":["Process  pid ","Sidekiq Util  process_id ","SecureRandom  hex "]}," Sidekiq Util redis":{"type":"method","name":"redis","children":[],"call":["Sidekiq  redis ","Sidekiq Manager  redis "]}," Sidekiq Util logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq Util  logger ","Sidekiq  logger "]}," Sidekiq Util watchdog":{"type":"method","name":"watchdog","children":[],"call":[" logger error ","ex backtrace join ","ex backtrace "," logger ","STDERR  puts "," handle_exception "," raise "]}," Sidekiq Util constantize":{"type":"method","name":"constantize","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names each ","names shift ","names first empty? ","names first ","names empty? ","camel_cased_word split ","constant const_missing  const_missing ","constant const_get  const_missing ","constant const_missing  const_get ","constant const_get  const_get ","constant const_missing  const_defined? ","constant const_get  const_defined? ","camel_cased_word split  each ","camel_cased_word split  shift ","camel_cased_word split  first empty? ","camel_cased_word split  first ","camel_cased_word split  empty? "]}," Sidekiq Util logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Sidekiq Util Pretty call":{"type":"method","name":"call","children":[],"call":["Thread  current object_id to_s ","Thread  current object_id ","Thread  current ","Process  pid ","time utc iso8601 ","time utc "]}," Sidekiq Worker ClassMethods jobs":{"type":"method","name":"jobs","children":[],"call":["Worker  jobs [] ","Worker  jobs ","job [] == "," to_s ","job [] ","Queues  jobs [] select ","Queues  jobs [] "," queue ","Queues  jobs ","Queues  jobs_by_worker [] ","Queues  jobs_by_worker "]}," Sidekiq Retry Poller poll":{"type":"method","name":"poll","children":[],"call":[" poll "," after ","conn rpush ","msg [] ","MultiJson  decode "," logger debug "," logger ","messages each ","conn zremrangebyscore ","conn zrangebyscore ","conn multi ","Time  now to_f to_s ","Time  now to_f ","Time  now ","Sidekiq  redis "," watchdog ","Sidekiq  load_json ","MultiJson  decode  [] ","Sidekiq  load_json  [] ","Time  Time  now to_f to_s  to_f to_s ","Time  Time  now to_f to_s  to_f ","Time  Time  now to_f to_s  "]}," Sidekiq RedisConnection build_client":{"type":"method","name":"build_client","children":[],"call":["Redis Namespace  new "," require ","Redis  connect ","Redis  new "," client_opts ","options [] "," exit ","Sidekiq  logger error ","Sidekiq  logger "," Redis  connect _opts "," Redis  new _opts "]}," Sidekiq RedisConnection create":{"type":"method","name":"create","children":[],"call":[" build_client ","options [] ","ConnectionPool  new "," log_info ","Sidekiq  options [] + ","Sidekiq  options [] ","Sidekiq  options ","Sidekiq  server? "," determine_redis_provider ","options []= "," verify_sizing ","options symbolize_keys ","options delete ","key to_sym ","options keys each ","options keys ","options has_key? ! ","options has_key? "," Integer ","ENV  [] "," Process  pid ","options key? ","options [] ! ","symbolized_options [] ","symbolized_options []= ","symbolized_options [] ! ","options transform_keys ","redis_config new_client "," adapter new "," adapter ","Sidekiq  [] ","Sidekiq  [] + ","Sidekiq RedisClientAdapter  new ","symbolized_options delete "," scrub "," raise ","symbolized_options [] == "," b determine_redis_provider ild_client ","options symbolize_keys  [] ","Sidekiq  options symbolize_keys  [] + ","Sidekiq  options symbolize_keys  [] ","Sidekiq  options symbolize_keys  ","options symbolize_keys  []= ","options symbolize_keys  symbolize_keys ","options symbolize_keys  delete ","options symbolize_keys  keys each ","options symbolize_keys  keys ","options symbolize_keys  has_key? ! ","options symbolize_keys  has_key? ","options symbolize_keys  key? ","options symbolize_keys  [] ! ","symbolized_options symbolize_keys  [] ","options transform_keys  [] ","symbolized_options symbolize_keys  []= ","options transform_keys  []= ","symbolized_options symbolize_keys  [] ! ","options transform_keys  [] ! ","options symbolize_keys  transform_keys "," adapter new  new_client ","Sidekiq RedisClientAdapter  new  new_client ","symbolized_options symbolize_keys  delete ","options transform_keys  delete "," scr determine_redis_provider b ","symbolized_options symbolize_keys  [] == ","options transform_keys  [] == "]}," Sidekiq hook_rails!":{"type":"method","name":"hook_rails!","children":[],"call":[]}," Sidekiq Processor hostname":{"type":"method","name":"hostname","children":[],"call":["(str \"hostname\") strip ","Socket  gethostname "]}," Sidekiq Processor stats":{"type":"method","name":"stats","children":[],"call":["conn incrby ","conn del ","conn multi "," redis "," raise ","conn srem ","conn set ","MultiJson  encode ","Time  now strftime ","Time  now ","Time  now to_s "," redis with_connection ","Sidekiq  dump_json ","conn setex ","conn sadd ","Time  now utc to_date ","Time  now utc "," identity ","Time  now to_i ","conn expire ","result last == ","result last "," retry_and_suppress_exceptions ","conn hdel "," thread_identity ","Sidekiq  redis ","60 * ","conn hmset ","60 * * ","stat:processed freeze ","stat:failed freeze ","Time  now utc strftime ","%Y-%m-%d freeze ","PROCESSED  increment ","WORKER_STATE  delete ","FAILURE  increment ","WORKER_STATE  []= "," cloned ","Sidekiq Logging  tid ","PROCESSED  incr ","FAILURE  incr ","WORKER_STATE  set "," tid ","WORK_STATE  delete ","WORK_STATE  set ","Sidekiq Logging   thread_identity  ","Sidekiq Logging  Sidekiq Logging  tid  ","  thread_identity  "," Sidekiq Logging  tid  "]}," Sidekiq Processor to_s":{"type":"method","name":"to_s","children":[],"call":["Thread  current object_id ","Thread  current "," process_id "," hostname ","Process  pid "]}," Sidekiq Processor inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," object_id "," object_id to_s "]}," Sidekiq Processor process":{"type":"method","name":"process","children":[],"call":["@boss processor_done! "," current_actor ","worker perform ","msg [] ","Sidekiq  server_middleware invoke ","Sidekiq  server_middleware "," stats ","klass new "," constantize "," defer "," invoke_chain "," class middleware invoke "," class middleware "," class ","Sidekiq  load_json "," raise "," handle_exception "," cloned ","@boss async processor_done ","@boss async ","work acknowledge ","worker jid= ","msg [] constantize ","Thread  current ","work queue_name ","work message ","@boss async real_thread "," proxy_id "," do_defer "," execute_job ","args freeze ","jid freeze ","class freeze ","job [] ","job [] constantize ","work job ","@reloader call ","job_hash [] ","@executor call ","Sidekiq Logging  with_context "," log_context ","job_hash [] constantize "," job ","ex cause ","ex is_a? "," dispatch "," send_to_morgue ","Sidekiq  logger error ","Sidekiq  logger ","DeadSet  new kill ","DeadSet  new ","h cause ","Thread  handle_interrupt ","uow acknowledge ","uow queue_name ","uow job ","@config server_middleware invoke ","@config server_middleware ","xa zremrangebyrank "," config [] -@ "," config [] "," config ","xa zremrangebyscore ","now - ","xa zadd ","now to_s ","conn multi "," config redis ","Time  now to_f ","Time  now "," config server_middleware invoke "," config server_middleware ","@capsule config [] -@ ","@capsule config [] ","@capsule config "," redis ","@boss procex cause ssor_donex cause ! ","@boss proch cause ssor_donh cause ! "," currex cause nt_actor "," currh cause nt_actor ","klass new  perform ","workex cause r pex cause rform ","workh cause r ph cause rform ","Sidekiq  load_json  [] ","Sidex cause kiq  sex cause rvex cause r_middlex cause warex cause  invokex cause  ","Sidh cause kiq  sh cause rvh cause r_middlh cause warh cause  invokh cause  ","Sidex cause kiq  sex cause rvex cause r_middlex cause warex cause  ","Sidh cause kiq  sh cause rvh cause r_middlh cause warh cause  "," constantize  new ","msg [] constantize  new ","job [] constantize  new ","job_hash [] constantize  new ","klass nex cause w ","klass nh cause w "," constantizex cause  "," constantizh cause  "," dex cause fex cause r "," dh cause fh cause r "," invokex cause _chain "," invokh cause _chain "," class middlex cause warex cause  invokex cause  "," class middlh cause warh cause  invokh cause  "," class middlex cause warex cause  "," class middlh cause warh cause  ","Sidex cause kiq  load_json ","Sidh cause kiq  load_json "," raisex cause  "," raish cause  "," handlex cause _ex cause xcex cause ption "," handlh cause _h cause xch cause ption "," clonex cause d "," clonh cause d ","@boss async procex cause ssor_donex cause  ","@boss async proch cause ssor_donh cause  ","work acknowlex cause dgex cause  ","work acknowlh cause dgh cause  ","work ackTime  now to_f ledge ","klass new  jid= ","workex cause r jid= ","workh cause r jid= ","Sidekiq  load_json  [] constantize ","msg [] constantizex cause  ","msg [] constantizh cause  ","Threx cause ad  currex cause nt ","Thrh cause ad  currh cause nt ","work work queue_name _name ","work uow queue_name _name ","work quex cause uex cause _namex cause  ","work quh cause uh cause _namh cause  ","work mex cause ssagex cause  ","work mh cause ssagh cause  ","@boss async rex cause al_threx cause ad ","@boss async rh cause al_thrh cause ad "," do_dex cause fex cause r "," do_dh cause fh cause r "," execute_Sidekiq  load_json  "," ex cause xex cause cutex cause _job "," h cause xh cause cuth cause _job ","args frex cause ex cause zex cause  ","args frh cause h cause zh cause  ","jid frex cause ex cause zex cause  ","jid frh cause h cause zh cause  ","class frex cause ex cause zex cause  ","class frh cause h cause zh cause  ","job [] constantizex cause  ","job [] constantizh cause  ","work Sidekiq  load_json  ","@rex cause loadex cause r call ","@rh cause loadh cause r call ","Sidekiq  load_json _hash [] ","@ex cause xex cause cutor call ","@h cause xh cause cutor call ","Sidex cause kiq Logging  with_contex cause xt ","Sidh cause kiq Logging  with_conth cause xt "," log_contex cause xt "," log_conth cause xt ","Sidekiq  load_json _hash [] constantize ","job_hash [] constantizex cause  ","job_hash [] constantizh cause  "," Sidekiq  load_json  ","ex cause x causex cause  ","h cause x caush cause  ","ex cause x is_a? ","h cause x is_a? "," sex cause nd_to_morguex cause  "," sh cause nd_to_morguh cause  ","Sidex cause kiq  loggex cause r ex cause rror ","Sidh cause kiq  loggh cause r h cause rror ","Sidex cause kiq  loggex cause r ","Sidh cause kiq  loggh cause r ","Dex cause adSex cause t  nex cause w kill ","Dh cause adSh cause t  nh cause w kill ","Dex cause adSex cause t  nex cause w ","Dh cause adSh cause t  nh cause w ","h causex cause  ","h caush cause  ","Threx cause ad  handlex cause _intex cause rrupt ","Thrh cause ad  handlh cause _inth cause rrupt ","uow acknowlex cause dgex cause  ","uow acknowlh cause dgh cause  ","uow ackTime  now to_f ledge ","uow work queue_name _name ","uow uow queue_name _name ","uow quex cause uex cause _namex cause  ","uow quh cause uh cause _namh cause  ","uow Sidekiq  load_json  ","@config sex cause rvex cause r_middlex cause warex cause  invokex cause  ","@config sh cause rvh cause r_middlh cause warh cause  invokh cause  ","@config sex cause rvex cause r_middlex cause warex cause  ","@config sh cause rvh cause r_middlh cause warh cause  ","xa zrex cause mrangex cause byrank ","xa zrh cause mrangh cause byrank ","xa zrex cause mrangex cause byscorex cause  ","xa zrh cause mrangh cause byscorh cause  ","Time  now to_f  - ","Time  now to_f  to_s "," config rex cause dis "," config rh cause dis ","Timex cause   now to_f ","Timh cause   now to_f ","Time  Time  now to_f  to_f ","Timex cause   now ","Timh cause   now ","Time  Time  now to_f  "," config sex cause rvex cause r_middlex cause warex cause  invokex cause  "," config sh cause rvh cause r_middlh cause warh cause  invokh cause  "," config sex cause rvex cause r_middlex cause warex cause  "," config sh cause rvh cause r_middlh cause warh cause  ","@capsulex cause  config [] -@ ","@capsulh cause  config [] -@ ","@capsulex cause  config [] ","@capsulh cause  config [] ","@capsulex cause  config ","@capsulh cause  config "," rex cause dis "," rh cause dis "]}," Sidekiq Processor initialize":{"type":"method","name":"initialize","children":[],"call":["x sadd "," redis "," redis sadd ","(or\n  (send\n    (send\n      (lvar :mgr) :options) :[]\n    (sym :fetch))\n  (const\n    (const nil :Sidekiq) :BasicFetch)) new ","mgr options ","mgr options [] ","Sidekiq  options [] ","Sidekiq  options ","Sidekiq JobRetry  new ","Sidekiq JobLogger  new ","(or\n  (send\n    (send\n      (lvar :mgr) :options) :[]\n    (sym :job_logger))\n  (const\n    (const nil :Sidekiq) :JobLogger)) new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :job_logger))\n  (const\n    (const nil :Sidekiq) :JobLogger)) new ","options [] ","block call "," proc ","(or\n  (send\n    (send\n      (lvar :capsule) :config) :[]\n    (sym :job_logger))\n  (const\n    (const nil :Sidekiq) :JobLogger)) new "," logger ","capsule config [] ","capsule config ","Sidekiq  default_configuration [] ","Sidekiq  default_configuration "]}," Sidekiq Processor default_middleware":{"type":"method","name":"default_middleware","children":[],"call":[]}," Sidekiq Processor middleware":{"type":"method","name":"middleware","children":[],"call":[]}," Sidekiq Middleware Server UniqueJobs call":{"type":"method","name":"call","children":[],"call":["conn del ","Sidekiq  redis ","Digest MD5  hexdigest ","MultiJson  encode ","args [] ","@redis del ","Sidekiq  redis del ","Sidekiq  dump_json ","Sidekiq  dump_MultiJson  encode  ","Sidekiq  dump_Sidekiq  dump_json  "]}," Sidekiq Middleware Server RetryJobs call":{"type":"method","name":"call","children":[],"call":[" raise "," logger debug "," logger ","conn zadd ","retry_at to_s ","Sidekiq  redis ","MultiJson  encode ","Time  now to_f + ","Time  now to_f ","Time  now ","DELAY  call ","count <= ","msg []= ","Time  now utc ","msg [] ","e class name ","e class ","e message ","Sidekiq  dump_json ","e backtrace [] ","msg [] to_i ","e backtrace ","msg [] to_i != ","msg [] == "," retries_exhausted "," seconds_to_delay ","count < "," retry_attempts_from "," delay_for "," exception_caused_by_shutdown? ","e message [] ","m scrub! ","m force_encoding ","m respond_to? "," attempt_retry ","Time  now to_f +  to_s ","Tie message [] e  now to_f + ","Tie message [] e  now to_f ","Tie message [] e  now ","e message [] sg []= ","Tie message [] e  now utc ","e message [] sg [] ","e class nae message [] e ","e e message [] essage ","Sidekiq  due message [] p_json ","e message [] sg [] to_i ","e message [] sg [] to_i != ","e message [] sg [] == "," seconds_to_DELAY  call  "," seconds_to_ seconds_to_delay  "," seconds_to_ delay_for  "," Time  now to_f + tempts_from "," retry_attee message [] pts_froe message []  "," DELAY  call _for ","  seconds_to_delay _for ","  delay_for _for ","e e message [] essage [] ","e message []  scrub! ","e message []  force_encoding ","e message []  respond_to? "," attee message [] pt_retry "]}," Sidekiq Middleware Server Logging logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq Util  logger ","Sidekiq  logger "]}," Sidekiq Middleware Server Logging elapsed":{"type":"method","name":"elapsed","children":[],"call":["(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :start)) to_f round ","(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :start)) to_f ","Time  now - ","Time  now ","(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :start)) round "]}," Sidekiq Middleware Server Logging call":{"type":"method","name":"call","children":[],"call":[" raise "," elapsed "," logger info "," logger ","Time  now ","args [] object_id to_s ","args [] object_id ","args [] ","args [] class to_s ","args [] class "," logger info? ","Sidekiq Logging  with_context ","item [] ","worker class to_s ","worker class "," log_context ","start freeze ","Time  now  freeze "]}," Sidekiq Middleware Server FailureJobs call":{"type":"method","name":"call","children":[],"call":[" raise ","conn rpush ","MultiJson  encode ","Sidekiq  redis ","args [] ","args [] [] ","e backtrace ","e to_s ","e class to_s ","e class ","Time  now strftime ","Time  now ","Sidekiq  redis rpush ","Sidekiq  dump_json "]}," Sidekiq Middleware Server ExceptionHandler send_to_exception_notifier":{"type":"method","name":"send_to_exception_notifier","children":[],"call":[" ExceptionNotifier Notifier  background_exception_notification "]}," Sidekiq Middleware Server ExceptionHandler send_to_exceptional":{"type":"method","name":"send_to_exceptional","children":[],"call":[" Exceptional Remote  error "," Exceptional ExceptionData  new "," Exceptional  context "," Exceptional Config  should_send_to_api? "]}," Sidekiq Middleware Server ExceptionHandler send_to_airbrake":{"type":"method","name":"send_to_airbrake","children":[],"call":[" Airbrake  notify "]}," Sidekiq Middleware Server ExceptionHandler call":{"type":"method","name":"call","children":[],"call":[" raise "," send_to_exception_notifier ","args [] "," send_to_exceptional "," send_to_airbrake "," logger warn ","ex backtrace join ","ex backtrace "," logger "]}," Sidekiq Middleware Server ActiveRecord call":{"type":"method","name":"call","children":[],"call":[" ActiveRecord Base  clear_active_connections! "]}," Sidekiq Middleware Client UniqueJobs call":{"type":"method","name":"call","children":[],"call":["conn setex ","conn multi ","conn unwatch ","conn get ","conn watch ","Sidekiq  redis ","Digest MD5  hexdigest ","MultiJson  encode ","worker_class get_sidekiq_options [] ","worker_class get_sidekiq_options ","@redis setex "," already_scheduled? ","redis setex ","redis get ","Sidekiq  redis with_connection ","Sidekiq  dump_json "]}," Sidekiq Middleware Entry make_new":{"type":"method","name":"make_new","children":[],"call":["@klass new ","x config= ","x respond_to? ","@klass new  config= ","@klass new  respond_to? "]}," Sidekiq Middleware Entry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Middleware Chain invoke":{"type":"method","name":"invoke","children":[],"call":["traverse_chain call ","chain shift call ","chain shift ","final_action call ","chain empty? "," lambda "," retrieve dup "," retrieve "," empty? "," proc "," traverse ","traverse_ retrieve dup  call ","traverse_ retrieve  call "," retrieve dup  shift call "," retrieve  shift call "," retrieve dup  shift "," retrieve  shift "," retrieve dup  empty? "," retrieve  empty? "]}," Sidekiq Middleware Chain clear":{"type":"method","name":"clear","children":[],"call":[" entries clear "," entries "]}," Sidekiq Middleware Chain retrieve":{"type":"method","name":"retrieve","children":[],"call":[" entries map "," entries "," map "]}," Sidekiq Middleware Chain exists?":{"type":"method","name":"exists?","children":[],"call":["entry klass == ","entry klass "," entries any? "," entries "," any? "]}," Sidekiq Middleware Chain add":{"type":"method","name":"add","children":[],"call":[" entries << ","Entry  new "," entries "," exists? "," remove "]}," Sidekiq Middleware Chain remove":{"type":"method","name":"remove","children":[],"call":["entry klass == ","entry klass "," entries delete_if "," entries "]}," Sidekiq Middleware Chain initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," Sidekiq Manager stopped?":{"type":"method","name":"stopped?","children":[],"call":[]}," Sidekiq Manager dispatch":{"type":"method","name":"dispatch","children":[],"call":[" dispatch "," after "," find_work ","@queues sample ","@ready size times ","@ready size "," logger debug "," logger ","@ready empty? "," loop "," raise ","@busy empty? "," stopped? "," watchdog ","@fetcher fetch! "," verbose ","found ! ","queue_idx % == ","queue_idx % ","@queues size ","@ready size == ","@fetcher async fetch ","@fetcher async "]}," Sidekiq Manager find_work":{"type":"method","name":"find_work","children":[],"call":["msg ! ! ","msg ! ","processor process! ","MultiJson  decode ","@busy << ","@ready pop ","x lpop "," redis ","@redis lpop ","@queues [] "," redis lpop ","processor queue= ","processor msg= ","@redis lpop  ! ! "," redis lpop  ! ! ","@redis lpop  ! "," redis lpop  ! ","@ready pop  process! ","@ready pop  queue= ","@ready pop  msg= ","processor @redis lpop = ","processor  redis lpop = "]}," Sidekiq Manager processor_died":{"type":"method","name":"processor_died","children":[],"call":[" dispatch ","@ready << ","Processor  new_link "," current_actor "," signal ","@busy empty? "," stopped? ","@busy delete "," watchdog ","@in_progress delete ","processor object_id "," log ","reason backtrace join ","reason backtrace ","p proxy_id= ","p object_id ","Processor  new_link tap ","@threads delete "," shutdown ","p start ","@workers << ","Processor  new ","@workers delete ","@plock synchronize "," options "," disProcessor  new_link atch "," disProcessor  new atch ","@busy emProcessor  new_link ty? ","@busy emProcessor  new ty? "," stoProcessor  new_link Processor  new_link ed? "," stoProcessor  new Processor  new ed? ","@in_Processor  new_link rogress delete ","@in_Processor  new rogress delete ","Processor  new_link rocessor object_id ","Processor  new rocessor object_id ","Processor  new_link  Processor  new_link roxy_id= ","Processor  new  Processor  new roxy_id= ","Processor  new_link  object_id ","Processor  new  object_id ","Processor  new_link taProcessor  new_link  ","Processor  new_link taProcessor  new  ","Processor  new_link  start ","Processor  new  start ","@Processor  new_link lock synchronize ","@Processor  new lock synchronize "," oProcessor  new_link tions "," oProcessor  new tions "]}," Sidekiq Manager processor_done":{"type":"method","name":"processor_done","children":[],"call":[" dispatch ","@ready << ","processor alive? "," signal ","@busy empty? ","processor terminate "," stopped? ","@busy delete ","@done_callback call "," watchdog ","@in_progress delete ","processor object_id ","processor msg= ","processor queue= ","@threads delete "," shutdown "]}," Sidekiq Manager when_done":{"type":"method","name":"when_done","children":[],"call":["Proc  new "]}," Sidekiq Manager start":{"type":"method","name":"start","children":[],"call":[" dispatch ","@ready each ","x start ","@workers each "]}," Sidekiq Manager stop":{"type":"method","name":"stop","children":[],"call":[" signal ","x terminate ","x alive? ","@busy each "," after "," logger info "," logger ","@busy empty? ","conn srem ","name =~ "," process_id ","workers each ","conn smembers "," redis ","@ready clear ","@ready each ","options [] ","@fetcher terminate ","@fetcher alive? "," watchdog "," hard_shutdown_in ","Sidekiq  redis "," logger debug ","@ready size ","Process  pid ","conn smembers each "," redis with_connection ","conn lpush ","busy msg ","busy queue ","conn multi ","@fetcher terminate! ","Sidekiq Fetcher  done! "," clear_worker_set ","@fetcher async terminate ","@fetcher async "," clean_up_for_graceful_shutdown "," hard_shutdown ","@workers empty? ","deadline - ","Time  now "," sleep ","remaining > "," fire_event "," quiet "," Process  clock_gettime "," wait_for "," capsule stop "," capsule ","conn smembers  each "," hard_options [] _in "," clean_up_for_graceful_options []  "," hard_options []  ","@conn smembers  empty? ","deadline -  > "]}," Sidekiq Manager initialize":{"type":"method","name":"initialize","children":[],"call":["Processor  new_link "," current_actor ","@count times map ","@count times ","options [] ","options inspect "," logger debug "," logger "," logger info ","x client location ","x client "," redis ","Fetcher  new ","@ready << ","Redis  connect ","@queues size "," verbose "," log "," redis client location "," redis client "," procline ","x client id ","options [] ! ! ","options [] ! ","p proxy_id= ","p object_id ","Processor  new_link tap "," raise ","@count < ","Mutex  new ","@workers << ","Processor  new ","Set  new "," method ","capsule concurrency ","@count times maProcessor  new_link  ","capsule concurrency  times map ","capsule concurrency  times ","oProcessor  new_link tions [] ","oProcessor  new_link tions insProcessor  new_link ect ","options []  size "," Processor  new_link rocline ","oProcessor  new_link tions [] ! ! ","oProcessor  new_link tions [] ! ","Processor  new_link  Processor  new_link roxy_id= ","Processor  new_link  object_id ","Processor  new_link taProcessor  new_link  ","capsule concurrency  < ","Set  new  << ","caProcessor  new_link sule concurrency "]}," Sidekiq Extensions Proxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@performable perform_async "," YAML  dump "," Sidekiq Client  push ","@performable name ","@performable perform_at ","@performable client_push ","(pair\n  (str \"class\")\n  (ivar :@performable)) merge ","marshalled bytesize "," Sidekiq  logger warn "," Sidekiq  logger ","marshalled size > ","marshalled size "," YAML  dump  bytesize "," YAML  dump  size > "," YAML  dump  size "]}," Sidekiq Extensions Proxy initialize":{"type":"method","name":"initialize","children":[],"call":["options transform_keys "]}," Sidekiq Extensions ActiveRecord delay":{"type":"method","name":"delay","children":[],"call":["Proxy  new "]}," Sidekiq Extensions DelayedModel perform":{"type":"method","name":"perform","children":[],"call":["target send ","YAML  load ","target __send__ ","kwargs empty? "]}," Sidekiq Extensions ActionMailer delay":{"type":"method","name":"delay","children":[],"call":["Proxy  new "]}," Sidekiq Extensions DelayedMailer perform":{"type":"method","name":"perform","children":[],"call":["target send deliver ","target send ","YAML  load ","msg deliver ","msg from ","msg bcc ","msg cc ","msg to ","target __send__ ","target public_send "," deliver "," raise ","target name ","msg deliver_now ","kwargs empty? ","target send  deliver ","target __send__  deliver ","target public_send  deliver ","target send  from ","target __send__  from ","target public_send  from ","target send  bcc ","target __send__  bcc ","target public_send  bcc ","target send  cc ","target __send__  cc ","target public_send  cc ","target send  to ","target __send__  to ","target public_send  to ","target send  deliver_now ","target __send__  deliver_now ","target public_send  deliver_now "]}," Sidekiq Client enqueue":{"type":"method","name":"enqueue","children":[],"call":["klass client_push ","args freeze ","class freeze "]}," Sidekiq Client push":{"type":"method","name":"push","children":[],"call":["payload [] "," raw_push "," process_single ","item [] "," normalize_item "," default push "," default ","hash [] new perform ","Sidekiq  load_json ","Sidekiq  dump_json ","hash [] ","hash [] new "," new push "," new ","jid freeze ","class freeze "," verify_json "," middleware invoke ","normed [] "," middleware "," process_single  [] "," normalize_item  [] "]}," Sidekiq Client queue_mappings":{"type":"method","name":"queue_mappings","children":[],"call":[]}," Sidekiq Client registered_queues":{"type":"method","name":"registered_queues","children":[],"call":["x smembers ","Sidekiq  redis ","Sidekiq Queue  all map ","Sidekiq Queue  all "," puts "]}," Sidekiq Client registered_workers":{"type":"method","name":"registered_workers","children":[],"call":["x smembers ","Sidekiq  redis "," puts "]}," Sidekiq Client default_middleware":{"type":"method","name":"default_middleware","children":[],"call":["Middleware Chain  new "]}," Sidekiq Client middleware":{"type":"method","name":"middleware","children":[],"call":["@chain dup "," block_given? ","Sidekiq  client_middleware ","@chain dup  dup "]}," Sidekiq CLI parse_queues":{"type":"method","name":"parse_queues","children":[],"call":["(or-asgn\n  (send\n    (lvar :opts) :[]\n    (sym :queues))\n  (array)) << ","opts [] ","(or\n  (lvar :weight)\n  (int 1)) to_i times ","(or\n  (lvar :weight)\n  (int 1)) to_i ","(send\n  (lvar :weight) :to_i) max times ","(send\n  (lvar :weight) :to_i) max ","weight to_i ","opts []= ","weight to_s empty? ","weight to_s ","queues_and_weights all? "," parse_queue ","queues_and_weights each "]}," Sidekiq CLI parse_config":{"type":"method","name":"parse_config","children":[],"call":[" parse_queues ","queues each ","opts delete ","YAML  load_file ","cli [] ","File  exist? ","Sidekiq  logger warn ","Sidekiq  logger ","opts merge "," environment ","YAML  load ","ERB  new result ","ERB  new ","IO  read "," puts "," raise "," environment to_sym "," symbolize_keys_deep! ","opts deep_symbolize_keys! ","opts respond_to? ","File  read ","erb result ","erb filename= ","File  expand_path "," load_yaml ","YAML  safe_load ","YAML  load_file  delete ","opts merge  delete ","YAML  load  delete ","YAML  load_file  merge ","opts merge  merge ","YAML  load  merge ","YAML  load_file  deep_symbolize_keys! ","opts merge  deep_symbolize_keys! ","YAML  load  deep_symbolize_keys! ","YAML  load_file  respond_to? ","opts merge  respond_to? ","YAML  load  respond_to? ","ERB  new  result ","ERB  new  filename= "]}," Sidekiq CLI write_pid":{"type":"method","name":"write_pid","children":[],"call":["f puts ","Process  pid ","File  open "," options [] "," options ","FileUtils  rm_f "," at_exit ","File  expand_path "," Process  pid ","File  expand_ options []  "]}," Sidekiq CLI parse_options":{"type":"method","name":"parse_options","children":[],"call":["@parser parse! "," die "," logger info "," logger ","@parser on_tail ","@parser banner= ","opts []= ","o on ","arg to_i ","Sidekiq Util  logger level= ","Sidekiq Util  logger "," parse_queues ","arg split ","OptionParser  new "," puts "," exit "," log ","@options []= ","@options [] << ","@options [] ","(or\n  (lvar :weight)\n  (int 1)) times ","ENV  [] ","(or\n  (lvar :weight)\n  (int 1)) to_i times ","(or\n  (lvar :weight)\n  (int 1)) to_i "," set_logger_level_to_debug ","Sidekiq  logger level= ","Sidekiq  logger ","weight != ","queues_and_weights collect none? ","queues_and_weights collect ","queues_and_weights each ","arg scan "," Integer ","arg match [] ","arg match "," parse_queue ","opts [] ","File  exist? ","(str \"config/sidekiq.yml\") each "," option_parser "," option_parser  parse! "," option_parser  on_tail "," option_parser  banner= ","arg scan  collect none? ","arg scan  collect ","arg scan  each "]}," Sidekiq CLI validate!":{"type":"method","name":"validate!","children":[],"call":[" die "," logger info "," logger ","File  exist? ! ","File  exist? "," options [] "," options ","File  directory? "," options [] shuffle! "," options [] << "," options [] empty? "," exit "," log ","@options [] ","@options [] shuffle! ","@options [] << ","@options [] empty? "," raise "," options [] to_i <= "," options [] to_i "," options has_key? ","(sym :concurrency) each "," options key? ","@config [] ","@config [] to_i <= ","@config [] to_i "]}," Sidekiq CLI boot_system":{"type":"method","name":"boot_system","children":[],"call":[" require "," options [] "," options "," Rails  application eager_load! "," Rails  application ","File  expand_path ","File  directory? "," raise ","File  exist? ","ENV  []= "," detected_environment ","@options [] ","File  exist? ! "," default_tag "," environment ","File  basename "," Rails  root "," Rails  application config eager_load= "," Rails  application config "," Rails Application  initializer "," Rails VERSION MAJOR  < ","(begin\n  (send\n    (send nil :options) :[]\n    (sym :require))) + ","Sidekiq  options []= ","Sidekiq Rails Reloader  new ","Sidekiq  options "," Rails VERSION MAJOR  == "," environment != "," Rails VERSION MAJOR  >= "]}," Sidekiq CLI detected_environment":{"type":"method","name":"detected_environment","children":[],"call":["ENV  [] "," options [] "," options ","@options [] "]}," Sidekiq CLI options":{"type":"method","name":"options","children":[],"call":["Sidekiq  options "]}," Sidekiq CLI die":{"type":"method","name":"die","children":[],"call":[" exit "]}," Sidekiq CLI run":{"type":"method","name":"run","children":[],"call":["@manager wait ","@manager stop! "," options [] "," options ","poller terminate "," logger info "," logger "," sleep ","poller poll! ","@manager start! ","Sidekiq Retry Poller  new ","Sidekiq Manager  new "," exit ","manager wait ","manager stop! "," log ","manager start! ","@options [] "," Sidekiq Client  redis= ","Redis  connect ","ConnectionPool  new ","Sidekiq Manager  redis= ","RedisConnection  create ","Sidekiq  redis "," manager wait "," manager "," manager stop! "," manager start! ","poller alive? ","poller terminate! ","Sidekiq Scheduled Poller  new "," launcher stop "," launcher "," handle_signal ","readable_io first [] gets strip ","readable_io first [] gets ","readable_io first [] ","readable_io first ","IO  select "," launcher run ","RubyProf  start "," require "," launcher procline ","Sidekiq Launcher  new "," options [] ! ","Sidekiq Stats History  cleanup ","x client id ","x client "," redis ","self_write puts "," trap ","(str \"INT\") each ","IO  pipe "," puts ","@manager async stop ","@manager async ","poller async terminate ","poller async ","poller async poll ","@manager async start "," handle_signals "," fire_event ","$stdout tty? "," environment == "," environment "," boot_system "," print_banner ","Sidekiq  server_middleware map join ","Sidekiq  server_middleware map ","Sidekiq  server_middleware "," logger debug "," raise ","ver < ","conn info [] ","conn info ","Sidekiq  client_middleware map join ","Sidekiq  client_middleware map ","Sidekiq  client_middleware ","Sidekiq  redis_info [] ","Sidekiq  redis_info ","sigs each ","sigs << "," jruby? ! "," jruby? "," opts []= "," identity "," opts ","Sidekiq  options []= ","Sidekiq  options ","self_write write ","cursize < ","Sidekiq  options [] + ","Sidekiq  options [] ","Sidekiq  redis_pool size ","Sidekiq  redis_pool "," launch "," logger warn "," write_pid "," daemonize ","Sidekiq  log_formatter is_a? ","Sidekiq  log_formatter "," Rails  version "," rails_app? "," boot_application ","Sidekiq  pro? ","maxmemory_policy != ","info [] ","(dstr\n  (str \"Error in \")\n  (begin\n    (lvar :sig))\n  (str \" handler\")) inspect ","old_handler call ","old_handler respond_to? ","Signal  trap ","@config server_middleware map join ","@config server_middleware map ","@config server_middleware ","@config client_middleware map join ","@config client_middleware map ","@config client_middleware ","@config []= ","@config [] + ","@config [] ","@config redis_pool size ","@config redis_pool ","@config redis_info ","@config log_formatter is_a? ","@config log_formatter ","@config default_capsule server_middleware map join ","@config default_capsule server_middleware map ","@config default_capsule server_middleware ","@config default_capsule ","@config default_capsule client_middleware map join ","@config default_capsule client_middleware map ","@config default_capsule client_middleware ","cap redis_pool size < ","cap concurrency ","cap redis_pool size ","cap redis_pool ","@config capsules each_pair ","@config capsules ","Gem Version  new ","@config logger formatter is_a? ","@config logger formatter ","@config logger ","Sidekiq Manager  new  wait ","@Sidekiq Manager  new  wait ","Sidekiq Manager  new  stop! ","@Sidekiq Manager  new  stop! ","Sidekiq Retry Poller  new  terminate ","Sidekiq Scheduled Poller  new  terminate "," logger Sidekiq  redis_info  "," logger @config redis_info  ","Sidekiq Retry Poller  new  poll! ","Sidekiq Scheduled Poller  new  poll! ","Sidekiq Manager  new  start! ","@Sidekiq Manager  new  start! "," Sidekiq Manager  new  wait "," Sidekiq Manager  new  "," Sidekiq Manager  new  stop! "," Sidekiq Manager  new  start! ","Sidekiq Retry Poller  new  alive? ","Sidekiq Scheduled Poller  new  alive? ","Sidekiq Retry Poller  new  terminate! ","Sidekiq Scheduled Poller  new  terminate! "," handle_readable_io first [] gets strip  ","IO  select  first [] gets strip ","IO  select  first [] gets ","IO  select  first [] ","IO  select  first ","Sidekiq Manager  new  async stop ","@Sidekiq Manager  new  async stop ","Sidekiq Manager  new  async ","@Sidekiq Manager  new  async ","Sidekiq Retry Poller  new  async terminate ","Sidekiq Scheduled Poller  new  async terminate ","Sidekiq Retry Poller  new  async ","Sidekiq Scheduled Poller  new  async ","Sidekiq Retry Poller  new  async poll ","Sidekiq Scheduled Poller  new  async poll ","Sidekiq Manager  new  async start ","@Sidekiq Manager  new  async start "," handle_readable_io first [] gets strip s ","Sidekiq  serconn info [] _middleware map join ","Sidekiq  serSidekiq  redis_info [] _middleware map join ","Sidekiq  serinfo [] _middleware map join ","Sidekiq  serGem Version  new _middleware map join ","Sidekiq  serconn info [] _middleware map ","Sidekiq  serSidekiq  redis_info [] _middleware map ","Sidekiq  serinfo [] _middleware map ","Sidekiq  serGem Version  new _middleware map ","Sidekiq  serconn info [] _middleware ","Sidekiq  serSidekiq  redis_info [] _middleware ","Sidekiq  serinfo [] _middleware ","Sidekiq  serGem Version  new _middleware ","conn info []  < ","Sidekiq  redis_info []  < ","info []  < ","Gem Version  new  < ","conn Sidekiq  redis_info  [] ","conn @config redis_info  [] ","conn Sidekiq  redis_info  ","conn @config redis_info  ","Sidekiq  redis_Sidekiq  redis_info  [] ","Sidekiq  redis_@config redis_info  [] ","Sidekiq  redis_Sidekiq  redis_info  ","Sidekiq  redis_@config redis_info  ","Sidekiq  redis_pool size  < ","@config redis_pool size  < "," Rails  conn info [] sion "," Rails  Sidekiq  redis_info [] sion "," Rails  info [] sion "," Rails  Gem Version  new sion ","info []  != ","Sidekiq  redis_info  [] ","@config redis_info  [] ","@config serconn info [] _middleware map join ","@config serSidekiq  redis_info [] _middleware map join ","@config serinfo [] _middleware map join ","@config serGem Version  new _middleware map join ","@config serconn info [] _middleware map ","@config serSidekiq  redis_info [] _middleware map ","@config serinfo [] _middleware map ","@config serGem Version  new _middleware map ","@config serconn info [] _middleware ","@config serSidekiq  redis_info [] _middleware ","@config serinfo [] _middleware ","@config serGem Version  new _middleware ","@config redis_Sidekiq  redis_info  ","@config redis_@config redis_info  ","@config default_capsule serconn info [] _middleware map join ","@config default_capsule serSidekiq  redis_info [] _middleware map join ","@config default_capsule serinfo [] _middleware map join ","@config default_capsule serGem Version  new _middleware map join ","@config default_capsule serconn info [] _middleware map ","@config default_capsule serSidekiq  redis_info [] _middleware map ","@config default_capsule serinfo [] _middleware map ","@config default_capsule serGem Version  new _middleware map ","@config default_capsule serconn info [] _middleware ","@config default_capsule serSidekiq  redis_info [] _middleware ","@config default_capsule serinfo [] _middleware ","@config default_capsule serGem Version  new _middleware "]}," Sidekiq CLI parse":{"type":"method","name":"parse","children":[],"call":[" boot_system "," write_pid "," validate! ","Celluloid  logger= ","Sidekiq Util  logger level= ","Sidekiq Util  logger "," options [] "," options "," options merge! ","config merge "," parse_config "," parse_options "," set_logger_level_to_debug ","Sidekiq  logger level= ","Sidekiq  logger "," load_celluloid "," daemonize "," initialize_logger "," setup_options "," print_banner ","Bundler  require "," environment ","@config [] << ","@config method ","@config [] ","@config [] clear ","Sidekiq  default_configuration "," parse_config  merge "," parse_ parse_config  ","@ parse_config  [] << ","@ parse_config  method ","@ parse_config  [] ","@ parse_config  [] clear ","Sidekiq  default_ parse_config uration "]}," Sidekiq CLI initialize":{"type":"method","name":"initialize","children":[],"call":[" boot_rails "," validate! "," parse_options ","Mutex  new "]}," Sidekiq Web relative_time":{"type":"method","name":"relative_time","children":[],"call":["time getutc iso8601 ","time getutc "]}," Sidekiq Web retries_with_score":{"type":"method","name":"retries_with_score","children":[],"call":["MultiJson  decode ","results map ","conn zrangebyscore ","Sidekiq  redis ","Sidekiq  load_json ","conn zrangebyscore  map "]}," Sidekiq Web reset_worker_list":{"type":"method","name":"reset_worker_list","children":[],"call":["conn srem ","workers each ","conn smembers ","Sidekiq  redis ","workers empty? ! ","workers empty? ","conn smembers  each ","conn smembers  empty? ! ","conn smembers  empty? "]}," Sidekiq Worker ClassMethods stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":["hash []= ","hash delete ","key to_s ","hash keys each ","hash keys "]}," Sidekiq Worker ClassMethods get_sidekiq_options":{"type":"method","name":"get_sidekiq_options","children":[],"call":[" sidekiq_options_hash ","Sidekiq  default_worker_options "]}," Sidekiq Worker ClassMethods sidekiq_options":{"type":"method","name":"sidekiq_options","children":[],"call":[" get_sidekiq_options merge "," stringify_keys "," get_sidekiq_options "," sidekiq_options_hash= ","(or\n  (lvar :opts)\n  (hash)) stringify_keys "," Sidekiq  logger warn "," name "," Sidekiq  logger ","opts include? ","opts stringify_keys ","Hash  [] ","k to_s ","opts map "]}," Sidekiq Manager assign":{"type":"method","name":"assign","children":[],"call":["processor process! ","MultiJson  decode ","@busy << ","@ready pop "," watchdog ","@in_progress []= ","processor object_id ","conn lpush ","Sidekiq  redis "," stopped? ","Sidekiq  load_json ","processor async process ","processor async ","work requeue ","@ready pop  process! ","@ready pop  object_id ","@ready pop  async process ","@ready pop  async "]}," Sidekiq Fetcher fetch":{"type":"method","name":"fetch","children":[],"call":[" fetch "," after ","@mgr assign! ","queue gsub ","conn blpop ","Sidekiq  redis "," watchdog "," queues_cmd "," sleep "," logger error ","ex backtrace first ","ex backtrace "," logger ","Sidekiq Fetcher  done? ","@mgr async assign ","@mgr async ","@strategy retrieve_work "," handle_exception "," Sidekiq  logger info ","Time  now to_f - ","@down to_f ","Time  now to_f ","Time  now "," Sidekiq  logger "," handle_fetch_exception ","Time  now - ","@strategy retrieve_@strategy retrieve_work  "]}," Sidekiq Fetcher initialize":{"type":"method","name":"initialize","children":[],"call":["@cmd << ","queues map ","queues uniq size ","queues uniq ","@queues uniq ","Fetcher  strategy new ","Fetcher  strategy ","klass new ","Sidekiq  options [] ","Sidekiq  options "]}," Sidekiq Fetcher queues_cmd":{"type":"method","name":"queues_cmd","children":[],"call":["cmd << ","@queues sample ","queues << ","queues concat ","@unique_queues - ","@queues sample uniq ","@unique_queues size ","@unique_queues dup << ","@unique_queues dup ","@queues sample  << ","@@queues sample uniq  sample ","@queues sample uniq  << ","@queues sample uniq  concat ","@unique_@queues sample uniq  - ","@@queues sample uniq  sample uniq ","@unique_@queues sample uniq  size ","@unique_@queues sample uniq  dup << ","@unique_@queues sample uniq  dup "]}," Sidekiq Manager hard_shutdown_in":{"type":"method","name":"hard_shutdown_in","children":[],"call":[" signal "," after "," logger info ","@busy size "," logger ","conn lpush ","@in_progress [] ","processor object_id ","@busy each ","Sidekiq  redis "," watchdog ","t raise ","processor alive? ","processor bare_object actual_work_thread ","processor bare_object "," logger debug ","Sidekiq Fetcher  strategy bulk_requeue ","@in_progress values ","Sidekiq Fetcher  strategy ","@threads delete "," signal_shutdown "," logger warn "," requeue ","@in_progress values inspect ","processor terminate ","conn srem ","name =~ "," process_id ","workers each ","conn smembers ","worker_name =~ ","workers select ","Sidekiq  options [] bulk_requeue ","Sidekiq  options [] ","Sidekiq  options ","workers_to_remove empty? ! ","workers_to_remove empty? ","@finished signal "," afprocessor bare_object actual_work_thread er "," af@threads delete er ","processor objecprocessor bare_object actual_work_thread _id ","processor objec@threads delete _id "," waprocessor bare_object actual_work_thread chdog "," wa@threads delete chdog ","processor bare_object actual_work_thread  raise ","@threads delete  raise ","processor bare_objecprocessor bare_object actual_work_thread  acprocessor bare_object actual_work_thread ual_work_processor bare_object actual_work_thread hread ","processor bare_objec@threads delete  ac@threads delete ual_work_@threads delete hread ","processor bare_objecprocessor bare_object actual_work_thread  ","processor bare_objec@threads delete  ","Sidekiq Feprocessor bare_object actual_work_thread cher  sprocessor bare_object actual_work_thread raprocessor bare_object actual_work_thread egy bulk_requeue ","Sidekiq Fe@threads delete cher  s@threads delete ra@threads delete egy bulk_requeue ","Sidekiq Feprocessor bare_object actual_work_thread cher  sprocessor bare_object actual_work_thread raprocessor bare_object actual_work_thread egy ","Sidekiq Fe@threads delete cher  s@threads delete ra@threads delete egy ","@processor bare_object actual_work_thread hreads deleprocessor bare_object actual_work_thread e ","@@threads delete hreads dele@threads delete e "," signal_shuprocessor bare_object actual_work_thread down "," signal_shu@threads delete down ","@in_progress values inspecprocessor bare_object actual_work_thread  ","@in_progress values inspec@threads delete  ","processor processor bare_object actual_work_thread erminaprocessor bare_object actual_work_thread e ","processor @threads delete ermina@threads delete e ","conn smembers  each ","workers selecprocessor bare_object actual_work_thread  ","workers selec@threads delete  ","conn smembers  select ","Sidekiq  opprocessor bare_object actual_work_thread ions [] bulk_requeue ","Sidekiq  op@threads delete ions [] bulk_requeue ","Sidekiq  opprocessor bare_object actual_work_thread ions [] ","Sidekiq  op@threads delete ions [] ","Sidekiq  opprocessor bare_object actual_work_thread ions ","Sidekiq  op@threads delete ions ","workers_processor bare_object actual_work_thread o_remove empprocessor bare_object actual_work_thread y? ! ","workers_@threads delete o_remove emp@threads delete y? ! ","conn smembers _to_remove empty? ! ","workers_processor bare_object actual_work_thread o_remove empprocessor bare_object actual_work_thread y? ","workers_@threads delete o_remove emp@threads delete y? ","conn smembers _to_remove empty? "]}," Sidekiq Worker debug":{"type":"method","name":"debug","children":[],"call":[" print "]}," Sidekiq Worker info":{"type":"method","name":"info","children":[],"call":[" print "]}," Sidekiq Util verbose":{"type":"method","name":"verbose","children":[],"call":["STDOUT  puts "]}," Sidekiq Util log":{"type":"method","name":"log","children":[],"call":["STDOUT  puts "]}," Sidekiq Util err":{"type":"method","name":"err","children":[],"call":["STDERR  puts "]}," Sidekiq Processor invoke_chain":{"type":"method","name":"invoke_chain","children":[],"call":["traverse_chain call ","chain shift call ","chain shift ","worker perform ","msg [] ","chain empty? "," lambda ","Sidekiq Middleware Chain  retrieve dup ","Sidekiq Middleware Chain  retrieve ","traverse_Sidekiq Middleware Chain  retrieve dup  call ","Sidekiq Middleware Chain  retrieve dup  shift call ","Sidekiq Middleware Chain  retrieve dup  shift ","Sidekiq Middleware Chain  retrieve dup  empty? "]}," Sidekiq ActiveRecord call":{"type":"method","name":"call","children":[],"call":["ActiveRecord Base  clear_active_connections! "," ActiveRecord Base  clear_active_connections! "]}," Sidekiq ActiveRecord initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Airbrake send_to_airbrake":{"type":"method","name":"send_to_airbrake","children":[],"call":[" Airbrake  notify ","ex message ","ex class name ","ex class "]}," Sidekiq Airbrake call":{"type":"method","name":"call","children":[],"call":[" raise "," send_to_airbrake "]}," Sidekiq Airbrake initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Middleware Chain chain":{"type":"method","name":"chain","children":[],"call":[]}," Sidekiq Middleware Chain use":{"type":"method","name":"use","children":[],"call":[" entries << ","Entry  new "," entries "," exists? "]}," Sidekiq Middleware Chain default":{"type":"method","name":"default","children":[],"call":[]}," Sidekiq Middleware Chain register":{"type":"method","name":"register","children":[],"call":[" instance_eval "]}," Sidekiq Client redis=":{"type":"method","name":"redis=","children":[],"call":[]}," Sidekiq Client redis":{"type":"method","name":"redis","children":[],"call":[]}," Sidekiq CLI boot_rails":{"type":"method","name":"boot_rails","children":[],"call":[" Rails  application eager_load! "," Rails  application "," require ","File  expand_path ","@options [] ","ENV  []= "]}," Sidekiq Worker logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq Util  logger ","Sidekiq  logger "]}," Sidekiq Middleware Server UniqueJobs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Middleware Server Airbrake send_to_airbrake":{"type":"method","name":"send_to_airbrake","children":[],"call":[" Airbrake  notify ","ex message ","ex class name ","ex class "]}," Sidekiq Middleware Server Airbrake call":{"type":"method","name":"call","children":[],"call":[" raise "," send_to_airbrake ","args [] "," logger warn ","ex backtrace join ","ex backtrace "," logger "]}," Sidekiq Middleware Client UniqueJobs already_scheduled?":{"type":"method","name":"already_scheduled?","children":[],"call":["@redis get ! ! ","@redis get ! ","@redis get "]}," Sidekiq Middleware Client UniqueJobs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Middleware Client ResqueWebCompatibility call":{"type":"method","name":"call","children":[],"call":["@redis sadd ","Sidekiq  redis sadd ","Sidekiq  redis "]}," Sidekiq Middleware Client ResqueWebCompatibility initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Middleware Chain unregister":{"type":"method","name":"unregister","children":[],"call":["entry klass == ","entry klass "," entries delete_if "," entries "]}," Sidekiq Client queues":{"type":"method","name":"queues","children":[],"call":[]}," Sidekiq CLI set_logger_level_to_debug":{"type":"method","name":"set_logger_level_to_debug","children":[],"call":["Sidekiq Util  logger level= ","Sidekiq Util  logger "]}," Sidekiq Web status":{"type":"method","name":"status","children":[],"call":["(send\n  (send nil :workers) :map) compact size == ","(send\n  (send nil :workers) :map) compact size ","(send\n  (send nil :workers) :map) compact ","x [] "," workers map "," workers "," workers size > "," workers size "," workers size == "]}," Sidekiq Manager procline":{"type":"method","name":"procline","children":[],"call":[" procline "," after ","@busy size "," stopped? "]}," Sidekiq dump_json":{"type":"method","name":"dump_json","children":[],"call":[]}," Sidekiq load_json":{"type":"method","name":"load_json","children":[],"call":[]}," Base to_yaml_properties":{"type":"method","name":"to_yaml_properties","children":[],"call":[]}," Base yaml_new":{"type":"method","name":"yaml_new","children":[],"call":[]}," Sidekiq Worker ClassMethods drain":{"type":"method","name":"drain","children":[],"call":[" new perform ","job [] "," new "," jobs shift "," jobs ","worker perform ","worker jid= "," execute_job ","worker bid= ","worker respond_to? "," process_job ","job [] == ","next_job [] ","Queues  jobs [] delete_if ","Queues  jobs [] "," queue ","Queues  jobs "," jobs first "," jobs any? ","Queues  delete_for "," to_s "," jobs shift  [] ","  jobs shift s shift ","  jobs shift s "," new  perform "," new  jid= "," execute_ jobs shift  "," new  bid= "," new  respond_to? "," process_ jobs shift  "," jobs shift  [] == ","next_ jobs shift  [] "," jobs first  [] ","Queues   jobs shift s [] delete_if ","Queues   jobs shift s [] ","Queues   jobs shift s ","  jobs shift s first ","  jobs shift s any? "]}," Sidekiq Middleware Server Timeout call":{"type":"method","name":"call","children":[],"call":[" Timeout  timeout ","msg [] to_i ","msg [] ","msg [] to_i != "]}," Sidekiq logger":{"type":"method","name":"logger","children":[],"call":[]}," Sidekiq Web process_score":{"type":"method","name":"process_score","children":[],"call":["conn zremrangebyscore ","Sidekiq  redis ","conn rpush ","msg [] ","Sidekiq  load_json ","results map ","conn zrangebyscore ","Sidekiq  dump_json ","msg []= ","msg [] - ","Sidekiq  load_json  [] ","conn zrangebyscore  map ","Sidekiq  load_json  []= ","Sidekiq  load_json  [] - "]}," Sidekiq Web display_args":{"type":"method","name":"display_args","children":[],"call":["(send\n  (lvar :args) :map) join ","a [] ","a size > ","a size ","arg inspect ","args map "," truncate ","(send\n  (lvarg inspect r :arg inspect rgs) :marg inspect p) join ","arg inspect  [] ","arg inspect  size > ","arg inspect  size ","arg inspect rg inspect ","arg inspect rgs marg inspect p "," truncarg inspect te "]}," Sidekiq Logging logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq Logging  logger "]}," Sidekiq Logging logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Sidekiq Logging with_context":{"type":"method","name":"with_context","children":[],"call":[]}," Sidekiq Logging Pretty context":{"type":"method","name":"context","children":[],"call":["Thread  current [] ","Thread  current ","c join ","c any? ","Thread  Thread  current [] urrent [] ","Thread  Thread  current [] urrent ","Thread  current []  join ","Thread  current []  any? "]}," Sidekiq Logging Pretty call":{"type":"method","name":"call","children":[],"call":[" context ","Thread  current object_id to_s ","Thread  current object_id ","Thread  current ","Process  pid ","time utc iso8601 ","time utc "," Process  pid ","Sidekiq Logging  tid "]}," Sidekiq Fetcher done?":{"type":"method","name":"done?","children":[],"call":[]}," Sidekiq Fetcher done!":{"type":"method","name":"done!","children":[],"call":[]}," Sidekiq Worker ClassMethods perform_in":{"type":"method","name":"perform_in","children":[],"call":["Sidekiq Client  push ","Time  now to_f + ","Time  now to_f ","Time  now ","int < ","interval to_f "," jobs << "," name "," jobs "," client_push "," perform_async ","ts <= ","now + ","item delete ","at freeze ","now to_f ","(send\n  (lvar :now) :+\n  (lvar :interval)) to_f ","args freeze ","class freeze ","item []= ","ts > ","Time  Time  now to_f  to_f + ","Time  Time  now  to_f + ","Time  Time  now to_f  to_f ","Time  Time  now  to_f ","Time  Time  now to_f  ","Time  Time  now  ","interval to_f  < ","interval to_f erval to_f ","Time  now to_f  + ","Time  now  + ","Time  now to_f  to_f ","Time  now  to_f ","(send\n  (lvar :now) :+\n  (lvar :interval to_f erval)) to_f ","(send\n  (lvar :Time  now to_f ) :+\n  (lvar :interval)) to_f ","(send\n  (lvar :Time  now ) :+\n  (lvar :interval)) to_f "]}," Sidekiq Web backlog":{"type":"method","name":"backlog","children":[],"call":["memo + ","(send\n  (send nil :queues) :map) inject "," queues map "," queues "," info [] "," info "]}," Sidekiq Web zcontents":{"type":"method","name":"zcontents","children":[],"call":["Sidekiq  load_json ","results map ","conn zrange ","Sidekiq  redis ","conn zrange  map "]}," Sidekiq Web scheduled":{"type":"method","name":"scheduled","children":[],"call":[" zcontents "]}," Sidekiq Web zcard":{"type":"method","name":"zcard","children":[],"call":["conn zcard ","Sidekiq  redis "]}," Sidekiq Scheduled Poller poll":{"type":"method","name":"poll","children":[],"call":[" poll "," after ","conn rpush ","msg [] ","Sidekiq  load_json "," logger debug "," logger ","messages each ","conn zremrangebyscore ","conn zrangebyscore ","conn multi ","SETS  each ","Sidekiq  redis ","Time  now to_f to_s ","Time  now to_f ","Time  now "," watchdog "," add_jitter "," poll_interval ","conn sadd "," logger warn ","ex message "," logger error ","ex backtrace first ","ex backtrace "," logger debug? ","conn zrem ","conn zrangebyscore first ","conn lpush ","Sidekiq Client  push "," poll_interval * "," rand "," initial_wait "," poll_interval * * ","@enq enqueue_jobs "," random_poll_interval ","Sidekiq  load_json  [] ","conn zrangebyscore first s each ","Time  Time  now to_f to_s  to_f to_s ","Time  Time  now to_f to_s  to_f ","Time  Time  now to_f to_s  ","ex conn zrangebyscore first  ","@enq enqueue_conn zrangebyscore first s "]}," Sidekiq Extensions ActiveRecord delay_for":{"type":"method","name":"delay_for","children":[],"call":["Proxy  new ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now ","options merge "]}," Sidekiq Extensions ActionMailer delay_for":{"type":"method","name":"delay_for","children":[],"call":["Proxy  new ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now ","options merge "]}," Sidekiq CLI interrupt":{"type":"method","name":"interrupt","children":[],"call":["Thread  main raise ","Thread  main ","@interrupt_mutex synchronize "]}," Sidekiq Scheduled Poller add_jitter":{"type":"method","name":"add_jitter","children":[],"call":[" sleep ","POLL_INTERVAL  * "," rand "," poll_interval * "," poll_interval "]}," Class singleton_class?":{"type":"method","name":"singleton_class?","children":[],"call":[" ancestors first != "," ancestors first "," ancestors "]}," Class class_attribute":{"type":"method","name":"class_attribute","children":[],"call":[" attr_writer "," class_eval ","13 + ","attrs each ","12 + "]}," Sidekiq poll_interval=":{"type":"method","name":"poll_interval=","children":[],"call":[]}," Sidekiq logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Sidekiq Worker ClassMethods client_push":{"type":"method","name":"client_push","children":[],"call":["Sidekiq Client  push "," jobs << "," jobs ","item stringify_keys "," stringify_keys ","opts object_id ","Sidekiq Client  new push ","Sidekiq Client  new ","Sidekiq  redis_pool "," get_sidekiq_options [] "," get_sidekiq_options ","Thread  current [] ","Thread  current ","x stringify_keys merge ","x stringify_keys ","Thread  current []= ","pool freeze ","item []= ","item delete ","key to_s ","item keys each ","item keys ","item transform_keys "," build_client push "," build_client "," raise ","k is_a? ","item any? "]}," Sidekiq Scheduled Poller poll_interval":{"type":"method","name":"poll_interval","children":[],"call":["Sidekiq  options [] ","Sidekiq  options ","pcount * * ","pcount * ","c scard ","Sidekiq  redis ","pcount == ","ps size ","Sidekiq ProcessSet  new ","ps size  * * ","ps size  * ","ps size  == ","Sidekiq ProcessSet  new  size "]}," Sidekiq Paginator page":{"type":"method","name":"page","children":[],"call":[" raise ","conn lrange ","conn llen ","conn zrange ","conn zcard ","conn type ","Sidekiq  redis ","starting + - ","starting + ","pageidx * ","current_page - ","pageidx to_i ","pageidx to_i < ","conn multi ","conn zrevrange ","opts try ","opts [] ","items reverse! ","starting -@ - ","starting -@ ","ending -@ - ","ending -@ ","transaction lrange ","transaction llen ","transaction zrange ","transaction zrevrange ","transaction zcard ","conn conn type  ","pageidx *  + - ","pageidx *  + ","current_page -  * ","pageidx to_i  - ","current_page -  to_i ","current_page -  to_i < ","conn zopts try range ","conn lrange  reverse! ","conn zrange  reverse! ","items opts try erse! ","pageidx *  -@ - ","pageidx *  -@ ","starting + -  -@ - ","starting + -  -@ ","transaction zopts try range "]}," Sidekiq Processor cloned":{"type":"method","name":"cloned","children":[],"call":["val clone ","SINGLETON_CLASSES  include? ","val class ","ary map ","Marshal  load ","Marshal  dump "]}," Sidekiq ExceptionHandler send_to_exception_notifier":{"type":"method","name":"send_to_exception_notifier","children":[],"call":[" ExceptionNotifier Notifier  background_exception_notification "," ExceptionNotifier Notifier  background_exception_notification deliver "," ExceptionNotifier  notify_exception "]}," Sidekiq ExceptionHandler send_to_exceptional":{"type":"method","name":"send_to_exceptional","children":[],"call":[" Exceptional Remote  error "," Exceptional ExceptionData  new "," Exceptional  context "," Exceptional Config  should_send_to_api? "]}," Sidekiq ExceptionHandler send_to_airbrake":{"type":"method","name":"send_to_airbrake","children":[],"call":[" Airbrake  notify "," Airbrake  notify_or_ignore "]}," Sidekiq ExceptionHandler handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" send_to_exception_notifier "," send_to_exceptional "," send_to_airbrake ","Sidekiq  logger warn ","ex backtrace join ","ex backtrace ","Sidekiq  logger "," send_to_honeybadger ","ctxHash empty? ! ","ctxHash empty? ","ex backtrace nil? ","Sidekiq  logger error ","handler call ","Sidekiq  error_handlers each ","Sidekiq  error_handlers "]}," Sidekiq ❨╯°□°❩╯︵┻━┻":{"type":"method","name":"❨╯°□°❩╯︵┻━┻","children":[],"call":[]}," Sidekiq Web tabs":{"type":"method","name":"tabs","children":[],"call":[" class tabs "," class "]}," Sidekiq Web redis_keys":{"type":"method","name":"redis_keys","children":[],"call":[]}," Sidekiq Web number_with_delimiter":{"type":"method","name":"number_with_delimiter","children":[],"call":["parts join ","options [] ","parts [] gsub! ","parts [] ","number to_s to_str split ","number to_s to_str ","number to_s "," Float ","number to_s to_str split  join ","number to_s to_str split  [] gsub! ","number to_s to_str split  [] "]}," Sidekiq Web parse_params":{"type":"method","name":"parse_params","children":[],"call":["score to_f ","params split "]}," Sidekiq Web job_params":{"type":"method","name":"job_params","children":[],"call":["job [] "]}," Sidekiq Web current_path":{"type":"method","name":"current_path","children":[],"call":[" request path_info gsub "," request path_info "," request "]}," Sidekiq Web namespace":{"type":"method","name":"namespace","children":[],"call":["conn namespace ","conn respond_to? ","Sidekiq  redis ","Sidekiq  options [] ","Sidekiq  options "]}," Sidekiq Web stats":{"type":"method","name":"stats","children":[],"call":["Sidekiq Stats  new "]}," Sidekiq Web t":{"type":"method","name":"t","children":[],"call":["I18n  t ","options merge "," get_locale ","string % "," strings [] fetch "," strings [] "," strings "," get_locale [] "," strings [] fetch  % ","  strings [] fetch s [] fetch ","  strings [] fetch s [] ","  strings [] fetch s "]}," Sidekiq Web get_locale":{"type":"method","name":"get_locale","children":[],"call":["(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] "," request env [] "," request env "," request "," strings [] "," strings "," locale "]}," Sidekiq Util hostname":{"type":"method","name":"hostname","children":[],"call":["Socket  gethostname ","ENV  [] "]}," Sidekiq Worker drain_all":{"type":"method","name":"drain_all","children":[],"call":[" jobs keys each "," jobs keys "," jobs "," jobs values all? "," jobs values "," clear_all ","worker_class constantize drain ","worker_class constantize ","worker_classes each ","(send\n  (send nil :jobs) :map) uniq ","job [] "," jobs map "," jobs any? ","Sidekiq Testing  constantize drain ","Sidekiq Testing  constantize ","(send\n  (send nil :jobs) :map) uniq  each "]}," Sidekiq Worker clear_all":{"type":"method","name":"clear_all","children":[],"call":[" jobs clear "," jobs ","Queues  clear_all "]}," Sidekiq Worker jobs":{"type":"method","name":"jobs","children":[],"call":["hash []= ","Hash  new ","Queues  jobs values flatten ","Queues  jobs values ","Queues  jobs ","Queues  jobs_by_queue values flatten ","Queues  jobs_by_queue values ","Queues  jobs_by_queue "]}," Sidekiq Worker ClassMethods clear":{"type":"method","name":"clear","children":[],"call":[" jobs clear "," jobs ","Queues  jobs [] clear ","Queues  jobs [] "," queue ","Queues  jobs ","Queues  clear_for "," to_s "]}," Sidekiq Client raw_push":{"type":"method","name":"raw_push","children":[],"call":["job [] constantize jobs << ","Sidekiq  load_json ","Sidekiq  dump_json ","job [] constantize jobs ","job [] constantize ","job [] ","payloads each ","marshalled [] constantize new perform ","marshalled [] ","marshalled [] constantize new ","marshalled [] constantize ","(lvar :payload) flatten each ","(lvar :payload) flatten ","conn lpush ","conn sadd ","conn multi ","payloads map ","payloads first [] ","payloads first ","conn zadd ","hash [] to_s ","hash [] ","Sidekiq  redis ","hash delete to_s ","hash delete "," raw_push_real ","Sidekiq Testing  inline? ","Sidekiq Testing  fake? ","worker perform ","worker jid= ","SecureRandom  hex ","item [] ","hash [] constantize new perform ","hash [] constantize new ","hash [] constantize ","normed [] constantize new perform ","Sidekiq  load_json [] ","normed [] constantize new ","normed [] constantize ","normed [] ","Array  wrap each ","Array  wrap "," Array each "," Array ","@redis_pool with "," atomic_push ","klass perform_one ","klass jobs unshift ","klass jobs ","klass process_job ","Queues  jobs [] << ","Queues  jobs [] ","Queues  jobs ","Queues  push ","job merge! ","Time  now to_f ","Time  now ","Sidekiq Testing  constantize ","conn pipelined "," raise ","conn disconnect! ","ex message =~ ","ex message ","RedisConnection  adapter ","conn close ","Sidekiq  load_json  [] constantize Sidekiq  load_json s << ","Sidekipayloads first []   load_json ","Sidekipayloads first []   dump_json ","Sidekiq  load_json  [] constantize Sidekiq  load_json s ","Sidekiq  load_json  [] constantize ","Sidekiq  load_json  [] ","Sidekiq  load_json  [] constantize new perform ","Sidekiq  load_json  [] constantize new ","(lvar :payload) flhash delete to_s ten each ","(lvar :payload) flhash delete to_s ten ","Sidekipayloads first []   redis ","Sidekipayloads first []  Testing  inline? ","Sidekipayloads first []  Testing  fake? ","marshalled [] constantize new  perform ","marshalled [] constantize new  jid= ","Sidekipayloads first []   load_json [] "," hash delete to_s omic_push ","job [] constantize  perform_one ","Sidekiq Testing  constantize  perform_one ","job [] constantize  jobs unshift ","Sidekiq Testing  constantize  jobs unshift ","klass Sidekiq  load_json s unshift ","job [] constantize  jobs ","Sidekiq Testing  constantize  jobs ","klass Sidekiq  load_json s ","job [] constantize  process_job ","Sidekiq Testing  constantize  process_job ","klass process_Sidekiq  load_json  ","Queues  Sidekiq  load_json s [] << ","Queues  Sidekiq  load_json s [] ","Queues  Sidekiq  load_json s ","Sidekiq  load_json  merge! ","Sidekipayloads first []  Testing  constantize "]}," Sidekiq RedisConnection determine_redis_provider":{"type":"method","name":"determine_redis_provider","children":[],"call":["ENV  [] ","Sidekiq  logger error ","Sidekiq  logger ","p =~ "," raise ","ENV  []  =~ "]}," Sidekiq Processor identity":{"type":"method","name":"identity","children":[],"call":["Thread  current object_id ","Thread  current "," process_id "," hostname "]}," Sidekiq Middleware Server RetryJobs seconds_to_delay":{"type":"method","name":"seconds_to_delay","children":[],"call":["(send\n  (lvar :count) :**\n  (int 4)) + + "," rand * ","count + "," rand ","(send\n  (lvar :count) :**\n  (int 4)) + ","count ** "]}," Sidekiq Middleware Server RetryJobs retry_attempts_from":{"type":"method","name":"retry_attempts_from","children":[],"call":["msg_retry is_a? "]}," Sidekiq Middleware Server RetryJobs retries_exhausted":{"type":"method","name":"retries_exhausted","children":[],"call":[" handle_exception ","worker retries_exhausted ","msg [] ","worker respond_to? "," logger debug "," logger ","worker sidekiq_retries_exhausted_block call ","worker sidekiq_retries_exhausted_block ","worker sidekiq_retries_exhausted_block? ","worker class name ","worker class "," logger warn "," send_to_morgue ","msg [] == ","block call ","Sidekiq  default_retries_exhausted "]}," I18n Server call":{"type":"method","name":"call","children":[],"call":["I18n  locale= ","I18n  default_locale ","msg [] ","I18n  with_locale ","msg fetch ","job fetch "]}," I18n Client call":{"type":"method","name":"call","children":[],"call":["msg []= ","I18n  locale ","msg [] ","job [] "]}," Sidekiq Middleware Chain insert_after":{"type":"method","name":"insert_after","children":[],"call":[" entries insert ","i + "," entries "," entries count - "," entries count ","entry klass == ","entry klass "," entries find_index "," entries delete_at ","Entry  new ","i nil? "," entries index "]}," Sidekiq Middleware Chain insert_before":{"type":"method","name":"insert_before","children":[],"call":[" entries insert "," entries ","entry klass == ","entry klass "," entries find_index "," entries delete_at ","Entry  new ","i nil? "," entries index "]}," Sidekiq Manager clear_worker_set":{"type":"method","name":"clear_worker_set","children":[],"call":["conn srem ","workers_to_remove empty? ! ","workers_to_remove empty? ","worker_name =~ "," process_id ","workers select ","conn smembers ","Sidekiq  redis "," logger debug "," logger ","Sidekiq  logger warn ","ex message ","Sidekiq  logger ","conn smembers _to_remove empty? ! ","conn smembers _to_remove empty? ","conn smembers  select "]}," Sidekiq Logging initialize_logger":{"type":"method","name":"initialize_logger","children":[],"call":[]}," Sidekiq Launcher procline":{"type":"method","name":"procline","children":[],"call":[" procline "," manager after "," manager "," manager procline "]}," Sidekiq Launcher stop":{"type":"method","name":"stop","children":[],"call":[" manager wait "," manager "," manager async stop "," options [] "," options "," manager async "," poller async terminate "," poller async "," poller "," poller alive? ","@options [] "," fetcher async terminate "," fetcher async "," fetcher "," fetcher alive? ","Sidekiq Fetcher  done! "," watchdog ","Sidekiq Fetcher  strategy bulk_requeue ","Sidekiq Fetcher  strategy "," poller terminate "," fetcher terminate "," stop_heartbeat "," manager alive? "," manager terminate ","@condvar wait "," fire_event "," clear_heartbeat ","strategy bulk_requeue ","@manager stop ","@poller terminate ","@manager quiet ","Time  now + ","Time  now "," Process  clock_gettime + "," Process  clock_gettime ","@config [] ","stoppers each ","mgr stop ","Thread  new ","@managers map "," quiet ","Sidekiq Fetcher  @options []  bulk_requeue ","Sidekiq Fetcher  @config []  bulk_requeue ","Sidekiq Fetcher  @options []  ","Sidekiq Fetcher  @config []  ","@options []  bulk_requeue ","@config []  bulk_requeue "]}," Sidekiq Launcher run":{"type":"method","name":"run","children":[],"call":[" poller async poll "," poller async "," poller "," manager async start "," manager async "," manager "," watchdog "," start_heartbeat ","@manager start ","@poller start "," safe_thread "," method ","@managers each ","Sidekiq  freeze! ","@config merge! "," logger debug "," logger "]}," Sidekiq Launcher initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq Scheduled Poller  new ","Sidekiq Manager  new ","@manager fetcher= ","Sidekiq Fetcher  new_link ","Sidekiq Scheduled Poller  new_link ","Sidekiq Manager  new_link ","Celluloid Condition  new ","BasicFetch  new ","options [] ","config capsules values map ","config capsules values ","config capsules ","Sidekiq Manager  new  fetcher= ","Sidekiq Manager  new_link  fetcher= "]}," Sidekiq BasicFetch queues_cmd":{"type":"method","name":"queues_cmd","children":[],"call":["queues << ","@queues shuffle uniq ","@queues shuffle ","@unique_queues dup ","queues concat ","@unique_queues - ","@queues sample uniq ","@queues sample ","@unique_queues size ","@unique_queues dup << ","@queues shuffle! uniq ","@queues shuffle! ","permute << ","permute uniq! ","@queues shuffle uniq  << ","@unique_queues dup  << ","@queues sample uniq  << ","@queues shuffle! uniq  << ","@@queues shuffle uniq  shuffle uniq ","@@unique_queues dup  shuffle uniq ","@@queues sample uniq  shuffle uniq ","@@queues shuffle! uniq  shuffle uniq ","@@queues shuffle uniq  shuffle ","@@unique_queues dup  shuffle ","@@queues sample uniq  shuffle ","@@queues shuffle! uniq  shuffle ","@unique_@queues shuffle uniq  dup ","@unique_@unique_queues dup  dup ","@unique_@queues sample uniq  dup ","@unique_@queues shuffle! uniq  dup ","@queues shuffle uniq  concat ","@unique_queues dup  concat ","@queues sample uniq  concat ","@queues shuffle! uniq  concat ","@unique_@queues shuffle uniq  - ","@unique_@unique_queues dup  - ","@unique_@queues sample uniq  - ","@unique_@queues shuffle! uniq  - ","@@queues shuffle uniq  sample uniq ","@@unique_queues dup  sample uniq ","@@queues sample uniq  sample uniq ","@@queues shuffle! uniq  sample uniq ","@@queues shuffle uniq  sample ","@@unique_queues dup  sample ","@@queues sample uniq  sample ","@@queues shuffle! uniq  sample ","@unique_@queues shuffle uniq  size ","@unique_@unique_queues dup  size ","@unique_@queues sample uniq  size ","@unique_@queues shuffle! uniq  size ","@unique_@queues shuffle uniq  dup << ","@unique_@unique_queues dup  dup << ","@unique_@queues sample uniq  dup << ","@unique_@queues shuffle! uniq  dup << ","@@queues shuffle uniq  shuffle! uniq ","@@unique_queues dup  shuffle! uniq ","@@queues sample uniq  shuffle! uniq ","@@queues shuffle! uniq  shuffle! uniq ","@@queues shuffle uniq  shuffle! ","@@unique_queues dup  shuffle! ","@@queues sample uniq  shuffle! ","@@queues shuffle! uniq  shuffle! ","@queues shuffle  << ","@queues shuffle  uniq! "]}," Sidekiq BasicFetch requeue":{"type":"method","name":"requeue","children":[],"call":["conn rpush "," message "," queue_name ","Sidekiq  redis "," queue "," job "," config redis "," config "]}," Sidekiq BasicFetch queue_name":{"type":"method","name":"queue_name","children":[],"call":[" queue gsub "," queue "," freeze "," queue sub "," queue delete_prefix "]}," Sidekiq BasicFetch acknowledge":{"type":"method","name":"acknowledge","children":[],"call":[]}," Sidekiq BasicFetch bulk_requeue":{"type":"method","name":"bulk_requeue","children":[],"call":["Sidekiq  logger warn ","ex message ","inprogress size ","Sidekiq  logger ","Sidekiq  logger info ","conn rpush ","jobs_to_requeue each ","conn pipelined ","Sidekiq  redis ","jobs_to_requeue [] << ","unit_of_work job ","jobs_to_requeue [] ","unit_of_work queue ","inprogress each ","Sidekiq  logger debug ","inprogress empty? ","pipeline rpush "," logger warn "," logger "," logger info "," redis "," logger debug "]}," Sidekiq BasicFetch retrieve_work":{"type":"method","name":"retrieve_work","children":[],"call":["UnitOfWork  new ","conn brpop "," queues_cmd ","Sidekiq  redis "," sleep ","qs size <= ","qs size "," config "," redis ","conn blocking_call ","TIMEOUT  + ","conn read_timeout + ","conn read_timeout "," queues_cmd  size <= "," queues_cmd  size "]}," Sidekiq BasicFetch initialize":{"type":"method","name":"initialize","children":[],"call":["@queues uniq ","options [] map ","options [] ","options [] ! ! ","options [] ! ","@queues << ","@queues uniq! ","@options [] map ","@options [] ","@options [] ! ! ","@options [] ! "," raise ","@config [] map ","@config [] ","@config [] ! ! ","@config [] ! ","config [] "," config queues map "," config queues "," config "," config queues size == "," config queues uniq size "," config queues uniq "," config queues size ","cap queues ","cap mode == ","cap mode ","@queues uniq  uniq ","@queues uniq  << ","@queues uniq  uniq! "]}," Sidekiq Fetcher strategy":{"type":"method","name":"strategy","children":[],"call":[]}," Sidekiq Extensions Klass delay_until":{"type":"method","name":"delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq Extensions Klass delay_for":{"type":"method","name":"delay_for","children":[],"call":["Proxy  new ","options merge ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now "]}," Sidekiq Extensions Klass delay":{"type":"method","name":"delay","children":[],"call":["Proxy  new "]}," Sidekiq Extensions DelayedClass perform":{"type":"method","name":"perform","children":[],"call":["target send ","YAML  load ","target __send__ ","kwargs empty? "]}," Sidekiq Extensions ActiveRecord delay_until":{"type":"method","name":"delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq Extensions ActionMailer delay_until":{"type":"method","name":"delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq ExceptionHandler send_to_honeybadger":{"type":"method","name":"send_to_honeybadger","children":[],"call":[" Honeybadger  notify_or_ignore "]}," String constantize":{"type":"method","name":"constantize","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names each ","names shift ","names first empty? ","names first ","names empty? "," split ","constant const_missing  const_missing ","constant const_get  const_missing ","constant const_missing  const_get ","constant const_get  const_get ","constant const_missing  const_defined? ","constant const_get  const_defined? "," split  each "," split  shift "," split  first empty? "," split  first "," split  empty? "]}," Hash symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[" []= "," delete ","key to_sym "," keys each "," keys "]}," Hash stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":[" []= "," delete ","key to_s "," keys each "," keys ","hash []= ","hash delete ","hash keys each ","hash keys "]}," Sidekiq Client normalize_item":{"type":"method","name":"normalize_item","children":[],"call":["normalized_item []= ","SecureRandom  hex ","Sidekiq Worker ClassMethods DEFAULT_OPTIONS  merge ","normalized_item [] to_s ","normalized_item [] ","item [] get_sidekiq_options merge ","item [] get_sidekiq_options ","item [] "," raise ","item [] ancestors inspect ","item [] ancestors ","item [] respond_to? ! ","item [] respond_to? ","item [] is_a? ","item inspect ","item [] ! ","item is_a? ","Time  now to_f ","Time  now ","Sidekiq  default_worker_options merge ","Sidekiq  default_worker_options ","enqueued_at freeze ","jid freeze ","item []= ","item [] to_s ","queue freeze ","class freeze ","item [] nil? "," normalized_hash each "," normalized_hash ","created_at freeze ","item has_key? ","args freeze ","item [] is_a? ! ","at freeze ","item key? ","item delete ","defaults merge ","item [] == "," validate ","Sidekiq Worker ClassMethods DEFAULT_OPTIONS  merge  []= ","item [] get_sidekiq_options merge  []= ","Sidekiq  default_worker_options merge  []= ","normalized_defaults merge  []= ","Sidekiq Worker ClassMethods DEFAULT_OPTIONS  merge  [] to_s ","item [] get_sidekiq_options merge  [] to_s ","Sidekiq  default_worker_options merge  [] to_s ","normalized_defaults merge  [] to_s ","Sidekiq Worker ClassMethods DEFAULT_OPTIONS  merge  [] ","item [] get_sidekiq_options merge  [] ","Sidekiq  default_worker_options merge  [] ","normalized_defaults merge  [] ","defaults merge  [] get_sidekiq_options merge ","defaults merge  [] get_sidekiq_options ","defaults merge  [] ","defaults merge  [] ancestors inspect ","defaults merge  [] ancestors ","defaults merge  [] respond_to? ! ","defaults merge  [] respond_to? ","defaults merge  [] is_a? ","defaults merge  inspect ","defaults merge  [] ! ","defaults merge  is_a? ","defaults merge  []= ","defaults merge  [] to_s ","defaults merge  [] nil? ","defaults merge  has_key? ","defaults merge  [] is_a? ! ","defaults merge  key? ","defaults merge  delete ","defaults merge  merge "," normalized_hash  merge ","defaults merge  [] == "]}," Sidekiq Client process_single":{"type":"method","name":"process_single","children":[],"call":["Sidekiq  client_middleware invoke ","Sidekiq  client_middleware ","item [] "," middleware invoke "," middleware ","queue freeze ","item []  freeze "]}," Sidekiq Client enqueue_to":{"type":"method","name":"enqueue_to","children":[],"call":["klass client_push ","args freeze ","class freeze ","queue freeze "]}," Sidekiq Client push_bulk":{"type":"method","name":"push_bulk","children":[],"call":["payloads size "," raw_push ","payloads empty? ! ","payloads empty? ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact "," process_single ","normed merge ","SecureRandom  hex ","items [] "," raise ","args is_a? ! ","args is_a? ","items [] map "," normalize_item ","Time  now to_f ","Time  now "," default push_bulk "," default ","payload [] ","payloads collect "," new push_bulk "," new ","arg is_a? ! ","arg is_a? ","items [] first ","jid freeze ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact ","class freeze ","enqueued_at freeze ","args freeze ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact ","at [] ","at is_a? ","items [] map with_index "," Array all? ! "," Array all? "," Array "," Array empty? ","items delete ","copy []= ","(send\n  (send\n    (lvar :args) :map) :with_index) compact ","args map with_index ","args map ","at size != ","args size ","at size ","args empty? ","args all? ","(send\n  (send nil :Array\n    (lvar :at)) :all?) ! ","entry is_a? "," verify_json "," middleware invoke ","copy [] "," middleware ","args size > ","result force ","result is_a? ","payloads map ","to_push empty? ","payloads compact ","slice map with_index ","slice map ","slice empty? ","slice all? ","slice is_a? ","args each_slice flat_map ","args each_slice ","slice_index + ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  size ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  size ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  size ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  size ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  empty? ! ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  empty? ! ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  empty? ! ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  empty? ! ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  empty? ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  empty? ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  empty? ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  empty? ","(send\n  (send\n    (lvar :items) :[]\n    (str \"items [] first s\")) :map) compact ","(send\n  (send\n    (lvar :items) :[]\n    (str \"items [] \")) :map) compact "," normalize_item  merge ","items [] first s is_a? ! ","items []  is_a? ! ","items [] first s is_a? ","items []  is_a? ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  collect ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  collect ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  collect ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  collect ","items [] first  is_a? ! ","items [] first  is_a? ","items delete  freeze ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"items [] first s\") :freeze)) :map) compact ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"items [] \") :freeze)) :map) compact ","enqueued_items delete  freeze ","items [] first s freeze ","items []  freeze ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"items [] first s\")) :map) :with_index) compact ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"items [] \")) :map) :with_index) compact ","items delete  [] ","items delete  is_a? ","normed merge  []= ","(send\n  (send\n    (lvar :items [] first s) :map) :with_index) compact ","(send\n  (send\n    (lvar :items [] ) :map) :with_index) compact ","items [] first s map with_index ","items []  map with_index ","items [] first s map ","items []  map ","items delete  size != ","items [] first s size ","items []  size ","items delete  size ","items [] first s empty? ","items []  empty? ","items [] first s all? ","items []  all? ","(send\n  (send nil :Array\n    (lvar :items delete )) :all?) ! ","normed merge  [] ","items [] first s size > ","items []  size > "," process_single  force "," process_single  is_a? ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  map ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  map ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  map ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  map ","payloads compact  empty? ","(send\n  (send\n    (lvar :items) :[]\n    (str \"args\")) :map) compact  compact ","(send\n  (send\n    (lvar :items) :[]\n    (send\n      (str \"args\") :freeze)) :map) compact  compact ","(send\n  (send\n    (send\n      (lvar :items) :[]\n      (str \"args\")) :map) :with_index) compact  compact ","(send\n  (send\n    (lvar :args) :map) :with_index) compact  compact ","items [] first s each_slice flat_map ","args each_slice flitems delete _map ","items []  each_slice flat_map ","items [] first s each_slice ","items []  each_slice "]}," Sidekiq CLI parse_queue":{"type":"method","name":"parse_queue","children":[],"call":["(or-asgn\n  (send\n    (lvar :opts) :[]\n    (sym :queues))\n  (array)) << ","opts [] ","(send\n  (lvar :weight) :to_i) max times ","(send\n  (lvar :weight) :to_i) max ","weight to_i ","opts []= ","weight to_i > ","opts [] << "," raise ","opts [] include? ","opts [] nil? ","queue to_s "]}," Sidekiq CLI initialize_logger":{"type":"method","name":"initialize_logger","children":[],"call":["Sidekiq  logger level= ","Sidekiq  logger "," options [] "," options ","Sidekiq Logging  initialize_logger ","Celluloid  logger= ","@config logger level= ","@config logger ","@config [] "]}," Sidekiq CLI default_tag":{"type":"method","name":"default_tag","children":[],"call":["File  basename ","File  dirname ","File  basename == ","name to_i != ","name to_i "," Rails  root ","File  baseFile  basename  ","File  dirFile  basename  ","File   Rails  root name ","File  baseFile  basename  == ","File  basename  to_i != ","File  basename  to_i "]}," Sidekiq CLI setup_options":{"type":"method","name":"setup_options","children":[],"call":[" options merge! ","config merge "," options "," parse_config ","cli [] "," set_environment "," parse_options ","opts []= ","opts [] nil? ","opts [] "," parse_config merge "," identity "," Integer ","ENV  [] ","opts [] ! "," Array << "," Array ","opts [] empty? ","File  exist? ","File  join ","(str \"sidekiq.yml\") each "," options [] ","File  directory? ","opts [] to_s "," raise ","File  exist? ! ","File  expand_path ","(str \"config/sidekiq.yml\") each ","@config merge! ","@config [] ","cap concurrency= ","cap_config [] ","cap queues= ","@config capsule ","name to_s ","@config default_capsule tap ","@config default_capsule "," parse_options  [] "," parse_config merge  []= "," parse_options  []= "," parse_config merge  [] nil? "," parse_options  [] nil? "," parse_config merge  [] "," parse_config merge  [] ! "," parse_options  [] ! "," parse_config merge  [] empty? "," parse_options  [] empty? "," parse_config merge  [] to_s "," parse_options  [] to_s ","File  expand_File  join  ","File  expand_File  expand_path  "]}," Sidekiq CLI set_environment":{"type":"method","name":"set_environment","children":[],"call":["ENV  [] "," config []= "," config "]}," Sidekiq CLI daemonize":{"type":"method","name":"daemonize","children":[],"call":[" initialize_logger ","$stdin reopen ","io sync= ","io reopen ","File  open "," options [] "," options ","(gvar :$stdout) each ","file sync= ","file reopen ","file path ","files_to_reopen each ","Process  daemon ","files_to_reopen << ","file closed? ","ObjectSpace  each_object "," raise "," Process  daemon ","f closed? ","ObjectSpace  each_object reject "]}," Sidekiq CLI load_celluloid":{"type":"method","name":"load_celluloid","children":[],"call":[" require ","Celluloid  logger= ","Sidekiq  logger "," options [] "," options "," raise "]}," Sidekiq CLI handle_signal":{"type":"method","name":"handle_signal","children":[],"call":["Sidekiq  logger info ","Sidekiq  logger ","thread backtrace join ","thread backtrace ","thread [] ","thread object_id to_s ","thread object_id ","Thread  list each ","Thread  list ","Sidekiq Logging  initialize_logger ","Sidekiq  options [] ","Sidekiq  options "," launcher manager async stop "," launcher manager async "," launcher manager "," launcher "," raise ","printer print ","File  open ","RubyProf GraphHtmlPrinter  new ","RubyProf  stop ","Sidekiq  logger debug "," initialize_logger ","Sidekiq Logging  reopen_logs "," fire_event ","Sidekiq  logger warn "," launcher quiet ","handy call ","SIGNAL_HANDLERS  [] ","SIGNAL_HANDLERS  [] call "," logger debug "," logger ","RubyProf GraphHtmlPrinter  new  print ","SIGNAL_HANDLERS  []  call "]}," for_each_process":{"type":"method","name":"for_each_process","children":[],"call":[" fetch ","idx == "," fetch times ","process == ","0 upto "," fetch - "]}," Sidekiq Workers size":{"type":"method","name":"size","children":[],"call":["(send\n  (const nil :Sidekiq) :redis) to_i ","conn scard ","Sidekiq  redis ","(send\n  (lvar :conn) :pipelined) map inject ","(send\n  (lvar :conn) :pipelined) map ","conn hget ","procs each ","conn pipelined ","procs empty? ","conn smembers "," sscan ","conn sscan_each to_a ","conn sscan_each ","(send\n  (lvar :conn) :pipelined) sum ","conn smembers  each "," sscan  each ","conn sscan_each to_a  each ","conn smembers  empty? "," sscan  empty? ","conn sscan_each to_a  empty? "]}," Sidekiq Workers each":{"type":"method","name":"each","children":[],"call":["block call ","Sidekiq  load_json ","conn get ","workers each ","conn smembers ","Sidekiq  redis ","conn multi ","conn mget ","Time  at to_s ","Time  at ","msg [] ","workers each_pair ","conn hgetall ","conn exists ","conn pipelined ","procs sort each ","procs sort "," sscan ","conn exists? ","conn sscan_each to_a ","conn sscan_each ","hsh []= ","p is_a? ","hsh [] ","(send\n  (lvar :results) :sort_by) each ","results sort_by ","results << ","Sidekiq  load_conn get  ","conn smembers  each ","conn get  [] ","Sidekiq  load_json  [] ","conn smembers  each_pair ","workers each_hsh [] air ","conn hsh [] ihsh [] elined ","conn smembers  sort each "," sscan  sort each ","conn sscan_each to_a  sort each ","hsh [] rocs sort each ","conn smembers  sort "," sscan  sort ","conn sscan_each to_a  sort ","hsh [] rocs sort ","Sidekiq  load_json  []= ","hsh []  is_a? "]}," Sidekiq RetrySet retry_all":{"type":"method","name":"retry_all","children":[],"call":[" each "," size > "," size "]}," Sidekiq RetrySet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq ScheduledSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq SortedSet clear":{"type":"method","name":"clear","children":[],"call":["conn del ","Sidekiq  redis "," name ","conn unlink "]}," Sidekiq SortedSet delete":{"type":"method","name":"delete","children":[],"call":["count != ","conn zremrangebyscore ","Sidekiq  redis ","elements_with_jid count != ","elements_with_jid count ","conn zrem ","message [] == ","message [] ","Sidekiq  load_json ","elements map ","conn zrangebyscore ","conn zcard ","conn multi "," name ","Sidekiq  load_json  [] == ","Sidekiq  load_json  [] "]}," Sidekiq SortedSet fetch":{"type":"method","name":"fetch","children":[],"call":["result << ","entry jid == ","entry jid ","SortedEntry  new ","elements inject ","conn zrangebyscore ","Sidekiq  redis "," name ","SortedEntry  new  jid == ","SortedEntry  new  jid "]}," Sidekiq SortedSet each":{"type":"method","name":"each","children":[],"call":["block call ","SortedEntry  new ","elements each ","elements empty? ","conn zrange ","(send\n  (lvar :page) :*\n  (lvar :page_size)) + ","page_size - ","page * ","Sidekiq  redis "," loop ","initial_size - "," size ","page * + + ","page * + "," name "," size  - "]}," Sidekiq SortedSet schedule":{"type":"method","name":"schedule","children":[],"call":["conn zadd ","Sidekiq  dump_json ","timestamp to_s ","Sidekiq  redis ","timestamp to_f to_s ","timestamp to_f "," name "]}," Sidekiq SortedSet size":{"type":"method","name":"size","children":[],"call":["c zcard ","Sidekiq  redis "," name "]}," Sidekiq SortedSet initialize":{"type":"method","name":"initialize","children":[],"call":[" size "]}," Sidekiq SortedEntry retry":{"type":"method","name":"retry","children":[],"call":["conn rpush ","Sidekiq  dump_json ","msg [] ","msg []= ","msg [] - ","Sidekiq  load_json ","results map ","conn zremrangebyscore "," score ","conn zrangebyscore ","Sidekiq  redis "," raise "," item [] "," item ","conn lpush ","Sidekiq Client  push ","(send\n  (lvar :conn) :multi) first ","conn multi "," parent name "," parent "," remove_job ","Sidekiq  load_json  [] ","Sidekiq  load_json  []= ","Sidekiq  load_json  [] - ","conn zrangebyscore  map ","(send\n  (lvar :conn) :multi) first  map "]}," Sidekiq SortedEntry reschedule":{"type":"method","name":"reschedule","children":[],"call":["@parent schedule "," item ","@parent delete "," jid "," score "," delete ","conn zincrby ","Sidekiq  dump_json ","at - ","@parent name ","Sidekiq  redis ","at to_f - ","at to_f "]}," Sidekiq SortedEntry delete":{"type":"method","name":"delete","children":[],"call":["@parent delete "," jid "," score ","@parent delete_by_jid ","@parent delete_by_value ","@parent name "]}," Sidekiq SortedEntry at":{"type":"method","name":"at","children":[],"call":["Time  at "," score ","Time  at utc "]}," Sidekiq SortedEntry initialize":{"type":"method","name":"initialize","children":[],"call":[" Float "]}," Sidekiq Job []":{"type":"method","name":"[]","children":[],"call":["@item send ","@item __send__ ","@item [] "]}," Sidekiq Job delete":{"type":"method","name":"delete","children":[],"call":["count != ","conn lrem ","Sidekiq  redis "]}," Sidekiq Job queue":{"type":"method","name":"queue","children":[],"call":[]}," Sidekiq Job jid":{"type":"method","name":"jid","children":[],"call":["@item [] "," [] "]}," Sidekiq Job args":{"type":"method","name":"args","children":[],"call":["@item [] "," [] "]}," Sidekiq Job klass":{"type":"method","name":"klass","children":[],"call":["@item [] "," [] "]}," Sidekiq Job initialize":{"type":"method","name":"initialize","children":[],"call":["@item [] ","Sidekiq  load_json ","item is_a? "," parse "," [] ","Sidekiq  load_json  [] "," parse  [] "]}," Sidekiq Queue clear":{"type":"method","name":"clear","children":[],"call":["conn srem "," name ","conn del ","conn multi ","Sidekiq  redis ","queues freeze ","conn unlink ","transaction srem ","transaction unlink "]}," Sidekiq Queue each":{"type":"method","name":"each","children":[],"call":["block call ","Job  new ","entries each ","entries empty? ","conn lrange ","(send\n  (lvar :page) :*\n  (lvar :page_size)) + - ","(send\n  (lvar :page) :*\n  (lvar :page_size)) + ","page * ","Sidekiq  redis "," loop ","initial_size - "," size ","page * - + ","page_size - ","page * - ","range_start + - ","range_start + ","JobRecord  new "," size  - ","page * -  + - ","page * -  + "]}," Sidekiq Queue size":{"type":"method","name":"size","children":[],"call":["con llen ","Sidekiq  redis "]}," Sidekiq Queue initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Sidekiq Stats History date_stat_hash":{"type":"method","name":"date_stat_hash","children":[],"call":["stat_hash []= ","value to_i ","date to_s ","conn get ","@start_date - ","i < ","Sidekiq  redis ","dates [] to_s ","dates [] ","conn mget each_with_index ","conn mget ","dates << ","keys << ","date strftime ","%Y-%m-%d freeze ","dates map ","@start_date downto map ","@start_date downto ","@start_date - + ","RedisConnection  adapter ","conn get  to_i ","@start_date -  to_s ","@start_@start_date -  - ","@start_date - s [] to_s ","@start_date - s [] ","@start_date - s << ","@start_date -  strftime ","@start_date - s map ","@start_@start_date -  downto map ","@start_@start_date -  downto ","@start_@start_date -  - + "]}," Sidekiq Stats History cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," Sidekiq Stats History failed":{"type":"method","name":"failed","children":[],"call":[" date_stat_hash "]}," Sidekiq Stats History processed":{"type":"method","name":"processed","children":[],"call":[" date_stat_hash "]}," Sidekiq Stats History initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now utc to_date ","Time  now utc ","Time  now "," raise ","days_previous > ","5 * ","days_previous < "]}," Sidekiq Stats retry_size":{"type":"method","name":"retry_size","children":[],"call":["c zcard ","Sidekiq  redis "," stat "]}," Sidekiq Stats scheduled_size":{"type":"method","name":"scheduled_size","children":[],"call":["c zcard ","Sidekiq  redis "," stat "]}," Sidekiq Stats enqueued":{"type":"method","name":"enqueued","children":[],"call":[" queues values inject "," queues values "," queues "," stat "]}," Sidekiq Stats queues":{"type":"method","name":"queues","children":[],"call":["Hash  [] ","array_of_arrays reverse ","(send\n  (lvar :queues) :inject\n  (hash)) sort_by ","memo []= ","conn llen ","queues inject ","conn smembers ","Sidekiq  redis ","lengths [] ","queues each ","conn pipelined ","Sidekiq Stats Queues  new lengths ","Sidekiq Stats Queues  new ","array_of_arrays to_h ","size -@ ","queues zip sort_by ","queues zip ","pipeline llen ","conn sscan to_a ","conn sscan ","(send\n  (lvar :conn smembers ) :inject\n  (hash)) sort_by ","(send\n  (lvar :conn sscan to_a ) :inject\n  (hash)) sort_by ","conn smembers  inject ","conn sscan to_a  inject ","conn smembers  each ","conn sscan to_a  each ","conn smembers  zip sort_by ","conn sscan to_a  zip sort_by ","conn smembers  zip ","conn sscan to_a  zip "]}," Sidekiq Stats failed":{"type":"method","name":"failed","children":[],"call":["count to_i ","count nil? ","conn get ","Sidekiq  redis ","(send\n  (const nil :Sidekiq) :redis) to_i "," stat "]}," Sidekiq Stats processed":{"type":"method","name":"processed","children":[],"call":["count to_i ","count nil? ","conn get ","Sidekiq  redis ","(send\n  (const nil :Sidekiq) :redis) to_i "," stat "]}," Sidekiq Web custom_tabs":{"type":"method","name":"custom_tabs","children":[],"call":[" class tabs "," class "]}," Sidekiq Web strings":{"type":"method","name":"strings","children":[],"call":["memo merge ","YAML  load ","File  read ","Dir  [] inject ","Dir  [] "," settings locales "," settings ","File  open "]}," Sidekiq RedisConnection log_info":{"type":"method","name":"log_info","children":[],"call":["Sidekiq  logger info ","Sidekiq  logger ","Sidekiq  server? ","opts delete ","options dup ","scrubbed_options []= ","uri to_s ","uri password= ","uri password ","URI  parse ","scrubbed_options [] ","Sidekiq  logger debug ","sentinel []= ","sentinel [] ","Marshal  load ","Marshal  dump ","options slice ","keys delete ","options keys ","options keys - "," adapter name "," adapter ","options dup  delete ","options dup  []= ","Marshal  load  []= ","URI  parse  to_s ","URI  parse  password= ","URI  parse  password ","options dup  [] ","Marshal  load  [] ","options keys  delete ","options keys -  delete ","options options keys  ","options options keys -  ","options options keys  - ","options options keys -  - "]}," Sidekiq SortedSet find_job":{"type":"method","name":"find_job","children":[],"call":["j jid == ","j jid "," detect "]}," Sidekiq Queue find_job":{"type":"method","name":"find_job","children":[],"call":["j jid == ","j jid "," detect "]}," Sidekiq Stats reset":{"type":"method","name":"reset","children":[],"call":["conn set ","Sidekiq  redis ","stats each ","all & ","stats flatten compact map ","stats flatten compact ","stats flatten ","stats empty? ","conn mset ","mset_args << ","all &  each ","all &  flatten compact map ","all &  flatten compact ","all &  flatten ","all &  empty? "]}," Sidekiq Fetcher handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" fetch "," after "," sleep ","Time  now "," logger error "," logger ","ex backtrace each ","ex backtrace ","@down ! "]}," Sidekiq Actor included":{"type":"method","name":"included","children":[],"call":[]}," Sidekiq Actor watchdog":{"type":"method","name":"watchdog","children":[],"call":[]}," Sidekiq Actor signal":{"type":"method","name":"signal","children":[],"call":[]}," Sidekiq Actor async":{"type":"method","name":"async","children":[],"call":[]}," Sidekiq Actor terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Sidekiq Actor alive?":{"type":"method","name":"alive?","children":[],"call":["@dead ! "]}," Sidekiq Actor current_actor":{"type":"method","name":"current_actor","children":[],"call":[]}," Sidekiq Actor defer":{"type":"method","name":"defer","children":[],"call":[]}," Sidekiq Actor after":{"type":"method","name":"after","children":[],"call":[]}," Sidekiq Actor sleep":{"type":"method","name":"sleep","children":[],"call":[]}," Sidekiq Web retry_extra_items":{"type":"method","name":"retry_extra_items","children":[],"call":["extra []= ","RETRY_JOB_KEYS  include? ","retry_job item each ","retry_job item "," tap "]}," Sidekiq Worker ClassMethods perform_one":{"type":"method","name":"perform_one","children":[],"call":[" new perform ","job [] "," new "," jobs shift "," jobs "," raise "," jobs empty? ","worker perform ","worker jid= "," execute_job ","worker bid= ","worker respond_to? "," process_job ","job [] == ","next_job [] ","Queues  jobs [] delete_if ","Queues  jobs [] "," queue ","Queues  jobs "," jobs first ","Queues  delete_for "," to_s "," jobs shift  [] ","  jobs shift s shift ","  jobs shift s ","  jobs shift s empty? "," new  perform "," new  jid= "," execute_ jobs shift  "," new  bid= "," new  respond_to? "," process_ jobs shift  "," jobs shift  [] == ","next_ jobs shift  [] "," jobs first  [] ","Queues   jobs shift s [] delete_if ","Queues   jobs shift s [] ","Queues   jobs shift s ","  jobs shift s first "]}," Sidekiq Job latency":{"type":"method","name":"latency","children":[],"call":["Time  now to_f - ","@item [] ","Time  now to_f ","Time  now ","now - "," [] ","Time  Time  now to_f  to_f - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","Time  now to_f  - "]}," Sidekiq Job enqueued_at":{"type":"method","name":"enqueued_at","children":[],"call":["Time  at ","@item [] ","Time  at utc "," [] "]}," Sidekiq Queue latency":{"type":"method","name":"latency","children":[],"call":["Time  now to_f - ","Sidekiq  load_json [] ","Sidekiq  load_json ","Time  now to_f ","Time  now ","(send\n  (const nil :Sidekiq) :redis) first ","conn lrange ","Sidekiq  redis ","now - ","job [] ","conn lindex ","Time  Time  now to_f  to_f - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","Time  now to_f  - ","Sidekiq  load_json  [] "]}," Sidekiq Processor do_defer":{"type":"method","name":"do_defer","children":[],"call":[" defer "]}," Sidekiq Manager real_thread":{"type":"method","name":"real_thread","children":[],"call":["@threads []= ","thr alive? "]}," Sidekiq Queue all":{"type":"method","name":"all","children":[],"call":[]}," Sidekiq Worker ClassMethods sidekiq_retries_exhausted":{"type":"method","name":"sidekiq_retries_exhausted","children":[],"call":[" sidekiq_retries_exhausted_block= "]}," Sidekiq Worker ClassMethods sidekiq_retry_in":{"type":"method","name":"sidekiq_retry_in","children":[],"call":[" sidekiq_retry_in_block= "]}," Sidekiq Web workers_size":{"type":"method","name":"workers_size","children":[],"call":["conn scard ","Sidekiq  redis "]}," Sidekiq Middleware Server RetryJobs retry_in":{"type":"method","name":"retry_in","children":[],"call":["e message ","worker class name ","worker class "," logger error "," logger ","worker sidekiq_retry_in_block call ","worker sidekiq_retry_in_block "," handle_exception ","worker sidekiq_retry_in_block call to_i "]}," Sidekiq Middleware Server RetryJobs delay_for":{"type":"method","name":"delay_for","children":[],"call":[" seconds_to_delay "," retry_in ","worker sidekiq_retry_in_block? "]}," Sidekiq SortedEntry add_to_queue":{"type":"method","name":"add_to_queue","children":[],"call":["Sidekiq Client  push ","Sidekiq  load_json ","results map ","conn zremrangebyscore "," score ","conn zrangebyscore ","Sidekiq  redis ","(send\n  (lvar :conn) :multi) first ","conn multi "," remove_job ","conn zrangebyscore  map ","(send\n  (lvar :conn) :multi) first  map "]}," Sidekiq Web locale":{"type":"method","name":"locale","children":[],"call":[" strings [] "," strings ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] "," request env [] "," request env "," request "]}," Sidekiq RedisConnection client_opts":{"type":"method","name":"client_opts","children":[],"call":["opts []= ","opts [] ","opts delete ","options dup ","ruby freeze ","Redis Connection  drivers last ","Redis Connection  drivers ","options dup  []= ","options dup  [] ","options dup  delete "]}," Sidekiq Middleware Server RetryJobs initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Sidekiq Middleware Chain each":{"type":"method","name":"each","children":[],"call":[" entries each "," entries "]}," Sidekiq Web h":{"type":"method","name":"h","children":[],"call":["ERB Util  h "]}," Sidekiq default_worker_options":{"type":"method","name":"default_worker_options","children":[],"call":[]}," Sidekiq default_worker_options=":{"type":"method","name":"default_worker_options=","children":[],"call":[]}," Sidekiq Web truncate":{"type":"method","name":"truncate","children":[],"call":["text [] ","text size > ","text size "]}," Sidekiq Testing inline?":{"type":"method","name":"inline?","children":[],"call":[" __test_mode == "," __test_mode "]}," Sidekiq Testing fake?":{"type":"method","name":"fake?","children":[],"call":[" __test_mode == "," __test_mode "]}," Sidekiq Testing disabled?":{"type":"method","name":"disabled?","children":[],"call":[" __test_mode == "," __test_mode "]}," Sidekiq Testing enabled?":{"type":"method","name":"enabled?","children":[],"call":[" __test_mode != "," __test_mode "]}," Sidekiq Testing inline!":{"type":"method","name":"inline!","children":[],"call":[" __set_test_mode "]}," Sidekiq Testing fake!":{"type":"method","name":"fake!","children":[],"call":[" __set_test_mode "]}," Sidekiq Testing disable!":{"type":"method","name":"disable!","children":[],"call":[" __set_test_mode "]}," Sidekiq Testing __set_test_mode":{"type":"method","name":"__set_test_mode","children":[],"call":[" __test_mode= ","block call "," __test_mode "," block_given? "," __global_test_mode= "," __local_test_mode= "," raise "," __local_test_mode "]}," Sidekiq Launcher actor_died":{"type":"method","name":"actor_died","children":[],"call":[" exit "," handle_exception ","Sidekiq  logger warn ","Sidekiq  logger ","reason ! "]}," Sidekiq Client enqueue_in":{"type":"method","name":"enqueue_in","children":[],"call":["klass perform_in "]}," Sidekiq Client enqueue_to_in":{"type":"method","name":"enqueue_to_in","children":[],"call":["klass client_push ","item delete ","ts <= ","now + ","int < ","Time  now to_f ","Time  now ","interval to_f ","at freeze ","queue freeze ","args freeze ","class freeze ","Time  now to_f  + ","interval to_f  < ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","interval to_f erval to_f "]}," Sidekiq WebHelpers redirect_with_query":{"type":"method","name":"redirect_with_query","children":[],"call":[" redirect ","ref query "," URI ","r =~ "," request referer "," request ","  request referer edi request referer ect "," URI  query "," request referer ef que request referer y "," request referer  =~ "," request  URI erer ","  request referer equest  request referer efe request referer e request referer  ","  request referer equest "]}," Sidekiq WebHelpers h":{"type":"method","name":"h","children":[],"call":["ERB Util  h ","Rack Utils  escape_html ","text encode! encode! ","text encode! "," raise ","e message eql? ","e message "," Rack Utils  escape_html "]}," Sidekiq WebHelpers number_with_delimiter":{"type":"method","name":"number_with_delimiter","children":[],"call":["parts join ","options [] ","parts [] gsub! ","parts [] ","number to_s to_str split ","number to_s to_str ","number to_s "," Float ","number nil? ","number round ","number to_s to_str split  join ","number to_s to_str split  [] gsub! ","number to_s to_str split  [] "]}," Sidekiq WebHelpers retry_extra_items":{"type":"method","name":"retry_extra_items","children":[],"call":["extra []= ","RETRY_JOB_KEYS  include? ","retry_job item each ","retry_job item "," tap "]}," Sidekiq WebHelpers display_args":{"type":"method","name":"display_args","children":[],"call":["(send\n  (lvar :args) :map) join "," truncate ","arg inspect ","args map "," h "," to_display ","args inspect ","args class name ","args class ","args is_a? ! ","args is_a? ","args == ","args nil? ","(send\n  (lvarg inspect r :arg inspect rgs) :marg inspect p) join "," truncarg inspect te ","arg inspect rg inspect ","arg inspect rgs marg inspect p "," to_displarg inspect y ","arg inspect rgs inspect ","arg inspect rgs clarg inspect ss narg inspect me ","arg inspect rgs clarg inspect ss ","arg inspect rgs is_arg inspect ? ! ","arg inspect rgs is_arg inspect ? ","arg inspect rgs == ","arg inspect rgs nil? "]}," Sidekiq WebHelpers truncate":{"type":"method","name":"truncate","children":[],"call":["text [] ","text size > ","text size "]}," Sidekiq WebHelpers parse_params":{"type":"method","name":"parse_params","children":[],"call":["score to_f ","params split "]}," Sidekiq WebHelpers job_params":{"type":"method","name":"job_params","children":[],"call":["job [] "]}," Sidekiq WebHelpers relative_time":{"type":"method","name":"relative_time","children":[],"call":["time getutc iso8601 ","time getutc "]}," Sidekiq WebHelpers current_status":{"type":"method","name":"current_status","children":[],"call":[" workers_size == "," workers_size "," workers size == "," workers size "," workers "," workset size == "," workset size "," workset "]}," Sidekiq WebHelpers current_path":{"type":"method","name":"current_path","children":[],"call":[" request path_info gsub "," request path_info "," request "]}," Sidekiq WebHelpers root_path":{"type":"method","name":"root_path","children":[],"call":[" env [] "," env "]}," Sidekiq WebHelpers namespace":{"type":"method","name":"namespace","children":[],"call":["conn namespace ","conn respond_to? ","Sidekiq  redis "]}," Sidekiq WebHelpers location":{"type":"method","name":"location","children":[],"call":["conn client location ","conn client ","Sidekiq  redis "]}," Sidekiq WebHelpers retries_with_score":{"type":"method","name":"retries_with_score","children":[],"call":["Sidekiq  load_json ","(send\n  (const nil :Sidekiq) :redis) map ","conn zrangebyscore ","Sidekiq  redis "]}," Sidekiq WebHelpers stats":{"type":"method","name":"stats","children":[],"call":["Sidekiq Stats  new "]}," Sidekiq WebHelpers workers":{"type":"method","name":"workers","children":[],"call":["conn srem ","Sidekiq  redis ","to_rem size > ","to_rem size ","x [] ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"workers\")) :map) compact sort ","(send\n  (send\n    (lvar :conn) :smembers\n    (str \"workers\")) :map) compact ","to_rem << ","Sidekiq  load_json ","conn get ","conn smembers map ","conn smembers ","w prune ","Sidekiq Workers  new tap ","Sidekiq Workers  new "]}," Sidekiq WebHelpers workers_size":{"type":"method","name":"workers_size","children":[],"call":["conn scard ","Sidekiq  redis "," workers size "," workers "]}," Sidekiq WebHelpers reset_worker_list":{"type":"method","name":"reset_worker_list","children":[],"call":["conn srem ","workers empty? ! ","workers empty? ","conn smembers ","Sidekiq  redis ","conn smembers  empty? ! ","conn smembers  empty? "]}," Sidekiq WebHelpers t":{"type":"method","name":"t","children":[],"call":["string % "," get_locale [] "," get_locale ","options empty? "," strings [] "," strings "]}," Sidekiq WebHelpers get_locale":{"type":"method","name":"get_locale","children":[],"call":[" strings [] "," locale "," strings "]}," Sidekiq WebHelpers locale":{"type":"method","name":"locale","children":[],"call":[" strings [] "," strings ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] "," request env [] "," request env "," request ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split "," find_locale_files any? "," find_locale_files ","lang split [] ","lang split ","; freeze ","languages downcase split each ","languages downcase split ",", freeze ","languages downcase ","en freeze ","HTTP_ACCEPT_LANGUAGE freeze ","lang == ","* freeze "," env [] "," env ","(send\n  (send nil :user_preferred_languages) :map) compact first ","(send\n  (send nil :user_preferred_languages) :map) compact ","lang_group min_by ","lang_group find ","preferred_language == ","available split first ","available split "," available_locales select "," available_locales ","preferred split first ","preferred split "," user_preferred_languages map "," user_preferred_languages "," find_en freeze _files any? "," find_en freeze _files ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) []  split [] ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase  split [] ","lang split []  split [] ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) []  split ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase  split ","lang split []  split ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages downcase split each ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages downcase split each ","lang split [] uages downcase split each ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages downcase split ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages downcase split ","lang split [] uages downcase split ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages downcase ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages downcase ","lang split [] uages downcase ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) []  == ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase  == ","lang split []  == ","(send\n  (send nil :user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages) :map) compact first ","(send\n  (send nil :user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages) :map) compact first ","(send\n  (send nil :user_preferred_lang split [] uages) :map) compact first ","(send\n  (send nil :user_preferred split first s) :map) compact first ","(send\n  (send nil :user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages) :map) compact ","(send\n  (send nil :user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages) :map) compact ","(send\n  (send nil :user_preferred_lang split [] uages) :map) compact ","(send\n  (send nil :user_preferred split first s) :map) compact ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] _group min_by ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase _group min_by ","lang split [] _group min_by ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] _group find ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase _group find ","lang split [] _group find ","preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uage == ","preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uage == ","preferred_lang split [] uage == ","preferred split first  == "," available_en freeze s select "," available_en freeze s "," user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages map "," user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages map "," user_preferred_lang split [] uages map "," user_preferred split first s map "," user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) [] uages "," user_preferred_(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_ACCEPT_LANGUAGE\"))\n  (str \"en\")) split [] downcase uages "," user_preferred_lang split [] uages "," user_preferred split first s "]}," Sidekiq WebHelpers strings":{"type":"method","name":"strings","children":[],"call":["memo merge ","YAML  load ","File  open ","Dir  [] inject ","Dir  [] "," settings locales "," settings ","hash deep_merge! ","Dir  [] each_with_object "," settings locales each_with_object ","global deep_merge! ","strs [] "," find_locale_files each "," find_locale_files ","@@strings [] ","global merge! ","@strings [] ","YAML  safe_load ","File  read ","YAML  load  [] ","YAML  safe_load  [] "]}," Sidekiq Web default_tabs":{"type":"method","name":"default_tabs","children":[],"call":[]}," Sidekiq WebHelpers qparams":{"type":"method","name":"qparams","children":[],"call":["(send\n  (send\n    (send nil :params) :merge\n    (lvar :options)) :map) join ","SAFE_QPARAMS  include? "," params merge map "," params merge "," params ","options stringify_keys ","(send\n  (send\n    (send nil :params) :merge\n    (lvar :options)) :map) compact join ","(send\n  (send\n    (send nil :params) :merge\n    (lvar :options)) :map) compact ","CGI  escape ","value to_s ","options []= ","options delete ","key to_s ","options keys each ","options keys "," to_query_string ","options transform_keys ","(send\n  (send\n    (send nil :params) :merge\n    (lvar :options stringify_keys )) :map) join ","options stringify_keys  stringify_keys ","(send\n  (send\n    (send nil :params) :merge\n    (lvar :options stringify_keys )) :map) compact join ","(send\n  (send\n    (send nil :params) :merge\n    (lvar :options stringify_keys )) :map) compact ","options stringify_keys  []= ","options stringify_keys  delete ","options stringify_keys  keys each ","options stringify_keys  keys ","options stringify_keys  transform_keys "]}," Sidekiq WebHelpers redis_connection":{"type":"method","name":"redis_connection","children":[],"call":["conn client id ","conn client ","Sidekiq  redis ","attrs [] ","conn connection ","c db ","c location ","conn _client ","c [] ","conn connection [] ","conn _client onn conn _client lient id ","conn connection onn conn connection lient id ","conn _client onn conn _client lient ","conn connection onn conn connection lient ","conn _client onn conn _client onneconn _client tion ","conn connection onn conn connection onneconn connection tion ","conn _client  db ","conn connection  db ","conn _client  loconn _client ation ","conn connection  loconn connection ation ","conn _client onn _conn _client lient ","conn connection onn _conn connection lient ","conn _client  [] ","conn connection  [] ","conn _client onn conn _client onneconn _client tion [] ","conn connection onn conn connection onneconn connection tion [] "]}," Sidekiq Middleware Chain initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["copy instance_variable_set "," entries dup "," entries "]}," Hash deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" []= ","block call ","tv deep_merge ","v is_a? ","tv is_a? "," [] ","other_hash each_pair "," []  deep_merge "," []  is_a? "]}," Hash deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" dup deep_merge! "," dup "]}," Sidekiq Client default":{"type":"method","name":"default","children":[],"call":[" new "]}," Sidekiq WebHelpers filtering":{"type":"method","name":"filtering","children":[],"call":[" erb "]}," Sidekiq Manager requeue":{"type":"method","name":"requeue","children":[],"call":["@in_progress clear ","Sidekiq Fetcher  strategy bulk_requeue ","@in_progress values ","Sidekiq Fetcher  strategy "]}," Sidekiq Manager signal_shutdown":{"type":"method","name":"signal_shutdown","children":[],"call":[" signal "," after "]}," Sidekiq Manager shutdown":{"type":"method","name":"shutdown","children":[],"call":[" signal_shutdown "," requeue ","@finished signal "]}," Sidekiq Manager clean_up_for_graceful_shutdown":{"type":"method","name":"clean_up_for_graceful_shutdown","children":[],"call":[" clean_up_for_graceful_shutdown "," after "," shutdown ","@busy empty? "]}," Sidekiq Fetcher handle_fetch_exception":{"type":"method","name":"handle_fetch_exception","children":[],"call":[" fetch "," after "," sleep ","Time  now "," logger error "," logger ","ex backtrace each ","ex backtrace ","@down ! "," pause "]}," Sidekiq Extensions Klass sidekiq_delay_until":{"type":"method","name":"sidekiq_delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq Extensions Klass sidekiq_delay_for":{"type":"method","name":"sidekiq_delay_for","children":[],"call":["Proxy  new ","options merge ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now "]}," Sidekiq Extensions Klass sidekiq_delay":{"type":"method","name":"sidekiq_delay","children":[],"call":["Proxy  new "]}," Sidekiq Extensions ActiveRecord sidekiq_delay_until":{"type":"method","name":"sidekiq_delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq Extensions ActiveRecord sidekiq_delay_for":{"type":"method","name":"sidekiq_delay_for","children":[],"call":["Proxy  new ","options merge ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now "]}," Sidekiq Extensions ActiveRecord sidekiq_delay":{"type":"method","name":"sidekiq_delay","children":[],"call":["Proxy  new "]}," Sidekiq Extensions ActionMailer sidekiq_delay_until":{"type":"method","name":"sidekiq_delay_until","children":[],"call":["Proxy  new ","options merge ","timestamp to_f "]}," Sidekiq Extensions ActionMailer sidekiq_delay_for":{"type":"method","name":"sidekiq_delay_for","children":[],"call":["Proxy  new ","options merge ","Time  now to_f + ","interval to_f ","Time  now to_f ","Time  now "]}," Sidekiq Extensions ActionMailer sidekiq_delay":{"type":"method","name":"sidekiq_delay","children":[],"call":["Proxy  new "]}," Sidekiq Logging reopen_logs":{"type":"method","name":"reopen_logs","children":[],"call":[]}," Sidekiq Fetcher reset":{"type":"method","name":"reset","children":[],"call":[]}," Sidekiq Fetcher pause":{"type":"method","name":"pause","children":[],"call":[" sleep "]}," Sidekiq Actor InstanceMethods defer":{"type":"method","name":"defer","children":[],"call":[]}," Sidekiq Actor InstanceMethods terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Sidekiq Actor InstanceMethods alive?":{"type":"method","name":"alive?","children":[],"call":["@dead ! "]}," Sidekiq Actor InstanceMethods after":{"type":"method","name":"after","children":[],"call":[]}," Sidekiq Actor InstanceMethods current_actor":{"type":"method","name":"current_actor","children":[],"call":[]}," Sidekiq Actor ClassMethods new_link":{"type":"method","name":"new_link","children":[],"call":[" new "]}," Sidekiq Actor ClassMethods trap_exit":{"type":"method","name":"trap_exit","children":[],"call":[]}," Sidekiq Processor retry_and_suppress_exceptions":{"type":"method","name":"retry_and_suppress_exceptions","children":[],"call":["e inspect ","Sidekiq  logger info ","Sidekiq  logger "," sleep ","Sidekiq  logger debug ","retry_count <= "," handle_exception "," pause_for_recovery "]}," Sidekiq Workers prune":{"type":"method","name":"prune","children":[],"call":["to_rem size ","conn srem ","Sidekiq  redis ","to_rem size > ","to_rem << ","run_at < ","Time  now - ","Time  now ","Time  at ","m [] ","Sidekiq  load_json ","msg ! ","conn get ","conn smembers each ","conn smembers ","to_reSidekiq  load_json  size ","conn sreSidekiq  load_json  ","to_reSidekiq  load_json  size > ","to_reSidekiq  load_json  << ","Time  at  < ","TiSidekiq  load_json e  now - ","TiSidekiq  load_json e  now ","TiSidekiq  load_json e  at ","Sidekiq  load_json  [] ","Sidekiq  load_json sg ! ","conn get  ! ","conn sSidekiq  load_json eSidekiq  load_json bers each ","conn sSidekiq  load_json eSidekiq  load_json bers "]}," Sidekiq Web info":{"type":"method","name":"info","children":[],"call":["Sidekiq  info "]}," Sidekiq size":{"type":"method","name":"size","children":[],"call":["(send\n  (const nil :Sidekiq) :redis) inject ","conn llen ","queues map ","conn multi ","Sidekiq  redis "," info [] "," info ","queues empty? ","Sidekiq Stats  new enqueued ","Sidekiq Stats  new "]}," Sidekiq info":{"type":"method","name":"info","children":[],"call":["results []= ","memo + ","(send\n  (send\n    (lvar :results) :[]\n    (sym :queues_with_sizes)) :map) inject ","results [] map ","results [] ","(or\n  (lvar :failed)\n  (int 0)) to_i ","(or\n  (lvar :processed)\n  (int 0)) to_i ","(send\n  (lvar :queues) :inject\n  (hash)) sort_by ","memo []= ","conn llen ","queues inject ","Sidekiq  redis ","conn smembers ","conn get ","conn multi "]}," Sidekiq Web retry_job_count":{"type":"method","name":"retry_job_count","children":[],"call":["Sidekiq RetrySet  new size ","Sidekiq RetrySet  new "]}," Sidekiq Web scheduled_job_count":{"type":"method","name":"scheduled_job_count","children":[],"call":["Sidekiq ScheduledSet  new size ","Sidekiq ScheduledSet  new "]}," Sidekiq ❨╯°□°❩╯︵":{"type":"method","name":"❨╯°□°❩╯︵","children":[],"call":[]}," Sidekiq CLI handle_signals":{"type":"method","name":"handle_signals","children":[],"call":["Sidekiq  logger info ","Sidekiq  logger ","thread backtrace join ","thread backtrace ","thread [] ","thread object_id to_s ","thread object_id ","Thread  list each ","Thread  list ","Sidekiq Logging  initialize_logger ","Sidekiq  options [] ","Sidekiq  options "," launcher manager async stop "," launcher manager async "," launcher manager "," launcher "," raise ","printer print ","File  open ","RubyProf GraphHtmlPrinter  new ","RubyProf  stop ","Sidekiq  logger debug ","$sidekiq_signals shift ","RubyProf GraphHtmlPrinter  new  print ","$sidekiq_$sidekiq_signals shift nals shift "]}," Sidekiq on":{"type":"method","name":"on","children":[],"call":[]}," Sidekiq error_handlers":{"type":"method","name":"error_handlers","children":[],"call":[]}," Sidekiq redis_pool":{"type":"method","name":"redis_pool","children":[],"call":[]}," Sidekiq Util identity":{"type":"method","name":"identity","children":[],"call":[" hostname "," process_nonce "," Process  pid "]}," Sidekiq Processor thread_identity":{"type":"method","name":"thread_identity","children":[],"call":["Thread  current object_id to_s ","Thread  current object_id ","Thread  current "]}," Sidekiq Middleware Server RetryJobs send_to_morgue":{"type":"method","name":"send_to_morgue","children":[],"call":["conn zremrangebyrank ","MAX_JOBS  -@ ","conn zremrangebyscore ","now - ","conn zadd ","conn multi ","Sidekiq  redis ","Time  now to_f ","Time  now ","Sidekiq  dump_json ","msg [] ","Sidekiq  logger info ","Sidekiq  logger ","DeadSet MAX_JOBS  -@ ","DeadSet  max_jobs -@ ","DeadSet  max_jobs ","DeadSet  timeout ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Sidekiq Manager ❤":{"type":"method","name":"❤","children":[],"call":[" logger error ","e message "," logger ","conn expire ","conn hmset ","Time  now to_f ","Time  now ","@busy size ","conn multi ","Sidekiq  redis "," Process  kill ","conn rpop ","conn sadd ","Sidekiq CLI  instance handle_signal ","Sidekiq CLI  instance ","JVM_RESERVED_SIGNALS  include? "]}," Sidekiq Manager heartbeat":{"type":"method","name":"heartbeat","children":[],"call":[" heartbeat "," after "," ❤ "," stopped? ","data [] ","@busy size ","proctitle join ","proctitle << ","data [] empty? ","results join ","results compact! ","x call ","PROCTITLES  map "]}," Sidekiq Launcher stop_heartbeat":{"type":"method","name":"stop_heartbeat","children":[],"call":["conn srem "," identity ","Sidekiq  redis ","conn del ","conn pipelined "]}," Sidekiq Launcher start_heartbeat":{"type":"method","name":"start_heartbeat","children":[],"call":[" manager heartbeat "," manager ","conn expire ","conn hset ","Sidekiq  dump_json ","conn sadd ","conn multi ","Sidekiq  redis ","@options [] uniq ","@options [] ","Time  now to_f ","Time  now "," hostname "," identity ","Sidekiq  options [] ","Sidekiq  options ","Sidekiq  logger info ","Sidekiq  logger "," sleep "," heartbeat "," loop "," logger info "," logger "," beat ","Sidekiq  dump_Sidekiq  dump_json  ","Side identity iq  dump_json ","Side identity iq  redis ","Side identity iq  options [] ","Side identity iq  options ","Side identity iq  logger info ","Side identity iq  logger "]}," Sidekiq ExceptionHandler Logger call":{"type":"method","name":"call","children":[],"call":["Sidekiq  logger warn ","ex backtrace join ","ex backtrace ","Sidekiq  logger ","ex backtrace nil? ","ctxHash empty? ! ","ctxHash empty? ","ex message ","ex class name ","ex class ","Sidekiq  dump_json ","ctx empty? "]}," Sidekiq Client via":{"type":"method","name":"via","children":[],"call":[]}," Sidekiq Client initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq  redis_pool ","Thread  current [] ","Thread  current "," raise ","kwargs [] ","Sidekiq  default_configuration ","Sidekiq  default_configuration client_middleware ","args [] "," warn "," caller ","kwargs size == ","kwargs size ","args size == ","args size "]}," Sidekiq CLI fire_event":{"type":"method","name":"fire_event","children":[],"call":[" handle_exception ","block call ","Sidekiq  options [] [] each ","Sidekiq  options [] [] ","Sidekiq  options [] ","Sidekiq  options "]}," Sidekiq ProcessSet size":{"type":"method","name":"size","children":[],"call":["conn scard ","Sidekiq  redis "]}," Sidekiq ProcessSet each":{"type":"method","name":"each","children":[],"call":["conn srem ","Sidekiq  redis ","to_prune empty? ","hash merge ","at_s to_f ","busy to_i ","Sidekiq  load_json ","to_prune << ","sorted [] ","info nil? ","result each_with_index ","conn hmget ","sorted each ","conn pipelined ","procs sort ","conn smembers ","Process  new ","procs each ","(send\n  (const nil :Sidekiq) :redis) sort ","result each "," sscan ","conn sscan_each to_a ","conn sscan_each ","conn sscan_each to_a sort ","rtt to_i ","rss to_i ","pipeline hmget ","conn sscan to_a sort ","conn sscan to_a ","conn sscan ","rtt_us to_i ","beat to_f ","Sidekiq  load_json  merge ","procs sort  [] ","procs sort  each ","(send\n  (const nil :Sidekiq) :redis) sort  sort ","conn sscan_each to_a sort  sort ","conn sscan to_a sort  sort ","(send\n  (const nil :Sidekiq) :redis) sort  each ","conn sscan_each to_a sort  each ","conn sscan to_a sort  each "]}," Sidekiq DeadSet retry_all":{"type":"method","name":"retry_all","children":[],"call":[" each "," size > "," size "]}," Sidekiq DeadSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq JobSet delete":{"type":"method","name":"delete","children":[],"call":["count != ","conn zcard "," name ","conn zremrangebyscore ","conn multi ","Sidekiq  redis ","elements_with_jid count != ","elements_with_jid count ","conn zrem ","message [] == ","message [] ","Sidekiq  load_json ","elements map ","conn zrangebyscore ","Sidekiq  load_json  [] == ","Sidekiq  load_json  [] "]}," Sidekiq JobSet find_job":{"type":"method","name":"find_job","children":[],"call":["j jid == ","j jid "," detect ","SortedEntry  new ","job [] == ","job [] ","JSON  parse ","conn zscan_each "," name ","Sidekiq  redis ","conn zscan ","Sidekiq  load_json ","JSON  parse  [] == ","Sidekiq  load_json  [] == ","JSON  parse  [] ","Sidekiq  load_json  [] "]}," Sidekiq JobSet fetch":{"type":"method","name":"fetch","children":[],"call":["result << ","entry jid == ","entry jid ","SortedEntry  new ","elements inject ","conn zrangebyscore "," name ","Sidekiq  redis ","elements each_with_object ","jid nil? ","score last ","score first ","score is_a? ","conn zrange ","SortedEntry  new  jid == ","SortedEntry  new  jid "]}," Sidekiq JobSet each":{"type":"method","name":"each","children":[],"call":["initial_size - ","block call ","SortedEntry  new ","elements each ","elements empty? ","conn zrange "," name ","Sidekiq  redis ","page * + + ","page_size - ","page * + ","page * "," loop ","range_start + - ","range_start + ","elements reverse each ","elements reverse ","elements reverse_each ","page * +  + - ","page * +  + "]}," Sidekiq JobSet schedule":{"type":"method","name":"schedule","children":[],"call":["conn zadd ","Sidekiq  dump_json ","timestamp to_f to_s ","timestamp to_f "," name ","Sidekiq  redis "]}," Sidekiq Stats dead_size":{"type":"method","name":"dead_size","children":[],"call":["c zcard ","Sidekiq  redis "," stat "]}," Sidekiq Queue paused?":{"type":"method","name":"paused?","children":[],"call":[]}," Sidekiq Web delete_or_add_queue":{"type":"method","name":"delete_or_add_queue","children":[],"call":["job add_to_queue ","params [] ","job delete "]}," Sidekiq Web retry_or_delete":{"type":"method","name":"retry_or_delete","children":[],"call":["job delete ","params [] ","job retry "]}," Sidekiq Util fire_event":{"type":"method","name":"fire_event","children":[],"call":[" handle_exception ","block call ","Sidekiq  options [] [] each ","Sidekiq  options [] [] ","Sidekiq  options [] ","Sidekiq  options ","arr each ","arr reverse! ","arr clear "," raise ","options [] ","Sidekiq  options [] []  each ","Sidekiq  options [] []  reverse! ","arr options [] ! ","Sidekiq  options [] []  clear "]}," Sidekiq remove_delay!":{"type":"method","name":"remove_delay!","children":[],"call":[]}," Sidekiq CLI print_banner":{"type":"method","name":"print_banner","children":[],"call":[" puts ","$stdout tty? "," environment == "," environment ","Sidekiq CLI  banner "]}," Sidekiq Process identity":{"type":"method","name":"identity","children":[],"call":[" [] "]}," Sidekiq Process signal":{"type":"method","name":"signal","children":[],"call":["c expire ","c lpush ","c multi ","Sidekiq  redis "," identity ","transaction expire ","transaction lpush "]}," Sidekiq Process stop!":{"type":"method","name":"stop!","children":[],"call":[" signal "," raise "," embedded? "]}," Sidekiq Process quiet!":{"type":"method","name":"quiet!","children":[],"call":[" signal "," raise "," embedded? "]}," Sidekiq Process []":{"type":"method","name":"[]","children":[],"call":["@attribs [] "]}," Sidekiq Process initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Job display_args":{"type":"method","name":"display_args","children":[],"call":[" args "," args [] ","YAML  load "," klass "," safe_load "," args [] [] ","@item [] ","job_args drop ","ActionMailer::DeliveryJob == "," args []= ","[encrypted data] freeze "," [] ","encrypt freeze ","(or\n  (send\n    (self) :[]\n    (str \"wrapped\"))\n  (send\n    (send nil :args) :[]\n    (int 0))) == ","job_args drop first [] ","job_args drop first "," args [] []  drop "," args [] []  drop first [] "," args [] []  drop first "]}," Sidekiq Job display_class":{"type":"method","name":"display_class","children":[],"call":[" klass "," args [] "," args ","YAML  load "," safe_load ","@item [] "," args [] [] [] join "," args [] [] [] "," args [] [] ","ActionMailer::DeliveryJob == ","job_class == "]}," Sidekiq Scheduled Poller initial_wait":{"type":"method","name":"initial_wait","children":[],"call":[" sleep ","5 * "," rand ","Sidekiq  options [] ","Sidekiq  options ","@sleeper pop ","@config [] "," cleanup "]}," Sidekiq CLI banner":{"type":"method","name":"banner","children":[],"call":[]}," Sidekiq SortedEntry remove_job":{"type":"method","name":"remove_job","children":[],"call":["conn zadd "," score to_f to_s "," score to_f "," score "," parent name "," parent ","hash [] each ","hash [] ","conn multi ","hash [] first ","msg [] == "," jid ","msg [] ","Sidekiq  load_json ","message index ","results group_by ","results first ","results size == ","results size ","(send\n  (lvar :conn) :multi) first ","conn zremrangebyscore ","conn zrangebyscore ","Sidekiq  redis ","hash fetch each ","hash fetch ","hash fetch first ","nonmatched each ","matched first ","results partition ","transaction zadd ","transaction zremrangebyscore ","transaction zrangebyscore ","transaction zrange ","Sidekiq  load_json  [] == ","hash fetch first  [] == ","matched first  [] == ","Sidekiq  load_json  [] ","hash fetch first  [] ","matched first  [] ","hash [] first  index ","(send\n  (lvar :conn) :multi) first  group_by ","(send\n  (lvar :conn) :multi) first  first ","(send\n  (lvar :conn) :multi) first  size == ","(send\n  (lvar :conn) :multi) first  size ","(send\n  (lvar :conn) :multi) first  partition "]}," Sidekiq Job safe_load":{"type":"method","name":"safe_load","children":[],"call":["Sidekiq  logger warn ","ex message ","Sidekiq  logger ","Sidekiq  options [] == ","Sidekiq  options [] ","Sidekiq  options ","YAML  load "]}," Sidekiq Middleware Server RetryJobs exception_caused_by_shutdown?":{"type":"method","name":"exception_caused_by_shutdown?","children":[],"call":[" exception_caused_by_shutdown? ","e cause ","e cause instance_of? ","checked_causes include? ","e cause object_id ","checked_causes << ","e object_id "]}," Sidekiq WebHelpers redis_info":{"type":"method","name":"redis_info","children":[],"call":["conn info ","conn redis info ","conn redis ","conn respond_to? ","Sidekiq  redis ","Sidekiq  redis_info ","Sidekiq  default_configuration redis_info ","Sidekiq  default_configuration "]}," Sidekiq Web retry_or_delete_or_kill":{"type":"method","name":"retry_or_delete_or_kill","children":[],"call":["job kill ","params [] ","job delete ","job retry "]}," Sidekiq Process labels":{"type":"method","name":"labels","children":[],"call":[" Array "," [] "," [] to_a "]}," Sidekiq Process tag":{"type":"method","name":"tag","children":[],"call":[" [] "]}," Sidekiq SortedEntry kill":{"type":"method","name":"kill","children":[],"call":["conn zremrangebyrank ","DeadSet MAX_JOBS  -@ ","conn zremrangebyscore ","now - ","conn zadd ","conn multi ","Sidekiq  redis ","Time  now to_f ","Time  now ","message [] ","Sidekiq  logger info ","Sidekiq  logger "," remove_job "," raise "," item [] "," item ","DeadSet  max_jobs -@ ","DeadSet  max_jobs ","DeadSet  timeout ","DeadSet  new kill ","DeadSet  new ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Sidekiq Client atomic_push":{"type":"method","name":"atomic_push","children":[],"call":["conn lpush ","conn sadd ","Sidekiq  dump_json ","payloads map ","payloads first [] ","payloads first ","conn zadd ","hash delete to_s ","hash delete ","queues freeze ","at freeze ","schedule freeze ","entry []= ","enqueued_at freeze ","Time  now to_f ","Time  now ","queue freeze ","entry [] ","payloads first key? ","payloads flat_map ","Sidekipayloads first []   dump_json ","payloads first [] ueues freeze ","payloads first [] s freeze ","hash delete to_s  freeze ","enpayloads first [] ueued_at freeze ","enqueued_hash delete to_s  freeze ","enpayloads first [] d_at freeze ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","payloads first [] ueue freeze ","payloads first []  freeze ","payloads flhash delete to_s _map "]}," Sidekiq Generators WorkerGenerator create_worker_test":{"type":"method","name":"create_worker_test","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators WorkerGenerator create_worker_spec":{"type":"method","name":"create_worker_spec","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators WorkerGenerator create_test_file":{"type":"method","name":"create_test_file","children":[],"call":[" create_worker_test "," create_worker_spec "," test_framework "," test_framework == "]}," Sidekiq Generators WorkerGenerator create_worker_file":{"type":"method","name":"create_worker_file","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators WorkerGenerator default_generator_root":{"type":"method","name":"default_generator_root","children":[],"call":[]}," Sidekiq Middleware Server RetryJobs attempt_retry":{"type":"method","name":"attempt_retry","children":[],"call":[" raise "," retries_exhausted ","conn zadd ","retry_at to_s ","Sidekiq  redis ","Sidekiq  dump_json ","Time  now to_f + ","Time  now to_f ","Time  now "," logger debug "," logger "," delay_for ","count < ","msg []= ","exception backtrace [] ","msg [] to_i ","msg [] ","exception backtrace ","msg [] to_i != ","msg [] == ","exception class name ","exception class ","m scrub! ","m force_encoding ","m respond_to? ","exception message [] ","exception message "," retry_attempts_from ","msg [] ! ","exception message to_s [] ","exception message to_s ","Time  now to_f +  to_s ","Sidekiq  duexception message [] p_json ","Sidekiq  duexception message to_s [] p_json ","Tiexception message [] e  now to_f + ","Tiexception message to_s [] e  now to_f + ","Tiexception message [] e  now to_f ","Tiexception message to_s [] e  now to_f ","Tiexception message [] e  now ","Tiexception message to_s [] e  now ","  delay_for _for ","exception message [] sg []= ","exception message to_s [] sg []= ","exception message [] sg [] to_i ","exception message to_s [] sg [] to_i ","exception message [] sg [] ","exception message to_s [] sg [] ","exception message [] sg [] to_i != ","exception message to_s [] sg [] to_i != ","exception message [] sg [] == ","exception message to_s [] sg [] == ","exception class naexception message [] e ","exception class naexception message to_s [] e ","exception message []  scrub! ","exception message to_s []  scrub! ","exception message []  force_encoding ","exception message to_s []  force_encoding ","exception message []  respond_to? ","exception message to_s []  respond_to? ","exception exception message [] essage [] ","exception exception message to_s [] essage [] ","exception exception message [] essage ","exception exception message to_s [] essage "," Time  now to_f + tempts_from "," retry_atteexception message [] pts_froexception message []  "," retry_atteexception message to_s [] pts_froexception message to_s []  ","exception message [] sg [] ! ","exception message to_s [] sg [] ! ","exception exception message [] essage to_s [] ","exception exception message to_s [] essage to_s [] ","exception exception message [] essage to_s ","exception exception message to_s [] essage to_s "]}," Sidekiq WebHelpers environment_title_prefix":{"type":"method","name":"environment_title_prefix","children":[],"call":["environment upcase ","environment == ","ENV  [] ","Sidekiq  options [] ","Sidekiq  options ","Sidekiq  [] ","Sidekiq  default_configuration [] ","Sidekiq  default_configuration "]}," Sidekiq Worker ClassMethods execute_job":{"type":"method","name":"execute_job","children":[],"call":["worker perform "]}," Sidekiq Processor execute_job":{"type":"method","name":"execute_job","children":[],"call":["worker perform ","inst perform "]}," Sidekiq Extensions DelayedMailer deliver":{"type":"method","name":"deliver","children":[],"call":["msg deliver ","msg deliver_now ","ActiveSupport Deprecation  warn ","msg respond_to? "]}," Sidekiq ProcessSet cleanup":{"type":"method","name":"cleanup","children":[],"call":["conn srem ","to_prune empty? ","to_prune << ","procs [] ","beat nil? ","heartbeats each_with_index ","conn hget ","procs each ","conn pipelined "," sscan sort "," sscan ","Sidekiq  redis ","conn sscan_each to_a sort ","conn sscan_each to_a ","conn sscan_each ","heartbeats [] nil? ","heartbeats [] ","procs select with_index ","procs select ","pipeline hget ","conn set ","conn sscan to_a ","conn sscan "," sscan sort  [] ","conn sscan_each to_a sort  [] ","conn sscan_each to_a  [] ","conn sscan to_a  [] "," sscan sort  each ","conn sscan_each to_a sort  each ","conn sscan_each to_a  each ","conn sscan to_a  each "," sscan sort  select with_index ","conn sscan_each to_a sort  select with_index ","conn sscan_each to_a  select with_index ","conn sscan to_a  select with_index "," sscan sort  select ","conn sscan_each to_a sort  select ","conn sscan_each to_a  select ","conn sscan to_a  select "]}," Sidekiq ProcessSet initialize":{"type":"method","name":"initialize","children":[],"call":[" class cleanup "," class "," cleanup "]}," Sidekiq Middleware Chain prepend":{"type":"method","name":"prepend","children":[],"call":[" entries insert ","Entry  new "," entries "," remove "," exists? "]}," Sidekiq WebHelpers product_version":{"type":"method","name":"product_version","children":[],"call":[]}," Sidekiq WebHelpers processes":{"type":"method","name":"processes","children":[],"call":["Sidekiq ProcessSet  new "]}," Sidekiq Util process_nonce":{"type":"method","name":"process_nonce","children":[],"call":["SecureRandom  hex "]}," Sidekiq Stats Queues lengths":{"type":"method","name":"lengths","children":[],"call":["Hash  [] ","array_of_arrays reverse ","(send\n  (lvar :queues) :inject\n  (hash)) sort_by ","memo []= ","lengths [] ","queues inject ","conn llen ","queues each ","conn pipelined ","conn smembers ","queues freeze ","Sidekiq  redis "," sscan ","(send\n  (lvar :queues) :each_with_object\n  (hash)) sort_by ","queues each_with_object ","conn sscan_each to_a ","conn sscan_each ","size -@ ","queues zip sort_by ","queues zip ","array_of_arrays to_h ","pipeline llen ","(send\n  (lvar :conn smembers ) :inject\n  (hash)) sort_by ","(send\n  (lvar : sscan ) :inject\n  (hash)) sort_by ","(send\n  (lvar :conn sscan_each to_a ) :inject\n  (hash)) sort_by ","conn smembers  inject "," sscan  inject ","conn sscan_each to_a  inject ","conn smembers  each "," sscan  each ","conn sscan_each to_a  each ","conn smembers  freeze "," sscan  freeze ","conn sscan_each to_a  freeze ","(send\n  (lvar :conn smembers ) :each_with_object\n  (hash)) sort_by ","(send\n  (lvar : sscan ) :each_with_object\n  (hash)) sort_by ","(send\n  (lvar :conn sscan_each to_a ) :each_with_object\n  (hash)) sort_by ","conn smembers  each_with_object "," sscan  each_with_object ","conn sscan_each to_a  each_with_object ","conn smembers  zip sort_by "," sscan  zip sort_by ","conn sscan_each to_a  zip sort_by ","conn smembers  zip "," sscan  zip ","conn sscan_each to_a  zip "]}," Sidekiq Stats stat":{"type":"method","name":"stat","children":[],"call":["@stats [] "," raise "," fetch_stats_slow! ","@stats [] nil? "]}," Sidekiq Stats fetch_stats!":{"type":"method","name":"fetch_stats!","children":[],"call":["pipe1_res [] ","pipe1_res [] to_i ","Time  now to_f - ","Sidekiq  load_json [] ","enqueued_at freeze ","Sidekiq  load_json ","Time  now to_f ","Time  now ","pipe1_res [] first ","pipe2_res [] map inject ","pipe2_res [] map ","pipe2_res [] ","pipe1_res [] size ","conn llen ","pipe1_res [] each ","conn hget ","busy freeze ","conn pipelined ","Sidekiq  redis ","conn smembers ","queues freeze ","processes freeze ","conn lrange ","queue:default freeze ","conn scard ","conn zcard ","dead freeze ","retry freeze ","schedule freeze ","conn get ","stat:failed freeze ","stat:processed freeze ","now - ","job [] ","processes size ","queues each ","processes each "," sscan ","conn sscan_each to_a ","conn sscan_each ","pipe2_res [] sum "," fetch_stats_slow! "," fetch_stats_fast! ","pipe1_repipe1_res [] size  [] ","pipe1_reprocesses size  [] ","pipe1_repipe1_res [] size  [] to_i ","pipe1_reprocesses size  [] to_i ","Time  Time  now to_f  to_f - ","Sidekiq  load_jpipe1_res [] size on [] ","Sidekiq  load_jprocesses size on [] ","pipe2_res [] map inject _at freeze ","pipe2_res [] sum _at freeze ","Sidekiq  load_jpipe1_res [] size on ","Sidekiq  load_jprocesses size on ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","pipe1_repipe1_res [] size  [] firpipe1_res [] size t ","pipe1_reprocesses size  [] firprocesses size t ","pipe2_repipe1_res [] size  [] map inject ","pipe2_reprocesses size  [] map inject ","pipe2_repipe1_res [] size  [] map ","pipe2_reprocesses size  [] map ","pipe2_repipe1_res [] size  [] ","pipe2_reprocesses size  [] ","pipe1_repipe1_res [] size  [] pipe1_res [] size ize ","pipe1_reprocesses size  [] processes size ize ","pipe1_repipe1_res [] size  [] each ","pipe1_reprocesses size  [] each ","bupipe1_res [] size y freeze ","buprocesses size y freeze ","Sidekiq  redipipe1_res [] size  ","Sidekiq  rediprocesses size  ","conn pipe1_res [] size memberpipe1_res [] size  ","conn processes size memberprocesses size  ","queuepipe1_res [] size  freeze ","queueprocesses size  freeze ","procepipe1_res [] size pipe1_res [] size epipe1_res [] size  freeze ","proceprocesses size processes size eprocesses size  freeze ","conn pipe1_res [] size card ","conn processes size card ","pipe1_res [] size chedule freeze ","processes size chedule freeze ","pipe1_res [] size tat:failed freeze ","processes size tat:failed freeze ","pipe1_res [] size tat:procepipe1_res [] size pipe1_res [] size ed freeze ","processes size tat:proceprocesses size processes size ed freeze ","Time  now to_f  - ","Sidekiq  load_json  [] ","procepipe1_res [] size pipe1_res [] size epipe1_res [] size  pipe1_res [] size ize ","proceprocesses size processes size eprocesses size  processes size ize ","queuepipe1_res [] size  each ","queueprocesses size  each ","procepipe1_res [] size pipe1_res [] size epipe1_res [] size  each ","proceprocesses size processes size eprocesses size  each "," pipe1_res [] size pipe1_res [] size can "," processes size processes size can ","conn pipe1_res [] size pipe1_res [] size can_each to_a ","conn processes size processes size can_each to_a ","conn pipe1_res [] size pipe1_res [] size can_each ","conn processes size processes size can_each ","pipe2_repipe1_res [] size  [] pipe1_res [] size um ","pipe2_reprocesses size  [] processes size um "," fetch_pipe1_res [] size tatpipe1_res [] size _pipe1_res [] size low! "," fetch_processes size tatprocesses size _processes size low! "," fetch_pipe1_res [] size tatpipe1_res [] size _fapipe1_res [] size t! "," fetch_processes size tatprocesses size _faprocesses size t! "]}," Sidekiq Stats default_queue_latency":{"type":"method","name":"default_queue_latency","children":[],"call":[" stat "]}," Sidekiq Stats workers_size":{"type":"method","name":"workers_size","children":[],"call":[" stat "]}," Sidekiq Stats processes_size":{"type":"method","name":"processes_size","children":[],"call":[" stat "]}," Sidekiq Stats initialize":{"type":"method","name":"initialize","children":[],"call":[" fetch_stats! "," fetch_stats_fast! "]}," Sidekiq Scheduled Poller initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :scheduled_enq))\n  (const\n    (const\n      (const nil :Sidekiq) :Scheduled) :Enq)) new ","Sidekiq  options [] ","Sidekiq  options ","ConnectionPool TimedStack  new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :scheduled_enq))\n  (const\n    (const\n      (const nil :Sidekiq) :Scheduled) :Enq)) new ","options [] ","(or\n  (send\n    (lvar :config) :[]\n    (sym :scheduled_enq))\n  (const\n    (const\n      (const nil :Sidekiq) :Scheduled) :Enq)) new ","config [] "]}," Sidekiq Scheduled Enq enqueue_jobs":{"type":"method","name":"enqueue_jobs","children":[],"call":["Sidekiq Logging  logger debug ","Sidekiq Logging  logger ","Sidekiq Client  push ","Sidekiq  load_json ","conn zrem ","conn zrangebyscore first ","conn zrangebyscore ","sorted_sets each ","Sidekiq  redis ","-inf freeze ","Sidekiq  logger debug ","Sidekiq  logger ","jobs each ","(lvasgn :jobs\n  (send\n    (lvar :conn) :zrangebyscore\n    (lvar :sorted_set)\n    (str \"-inf\")\n    (lvar :now)\n    (hash\n      (pair\n        (sym :limit)\n        (array\n          (int 0)\n          (int 100)))))) empty? "," zpopbyscore ","Time  now to_f to_s ","Time  now to_f ","Time  now ","@done ! "," logger debug "," logger ","@client push "," redis ","conn zrangebyscore first s each "," zpopbyscore s each ","conn zrangebyscore  each ","(lvasgn :conn zrangebyscore first s\n  (send\n    (lvar :conn) :zrangebyscore\n    (lvar :sorted_set)\n    (str \"-inf\")\n    (lvar :now)\n    (hash\n      (pair\n        (sym :limit)\n        (array\n          (int 0)\n          (int 100)))))) empty? ","(lvasgn : zpopbyscore s\n  (send\n    (lvar :conn) :zrangebyscore\n    (lvar :sorted_set)\n    (str \"-inf\")\n    (lvar :now)\n    (hash\n      (pair\n        (sym :limit)\n        (array\n          (int 0)\n          (int 100)))))) empty? ","(lvasgn :conn zrangebyscore \n  (send\n    (lvar :conn) :zrangebyscore\n    (lvar :sorted_set)\n    (str \"-inf\")\n    (lvar :now)\n    (hash\n      (pair\n        (sym :limit)\n        (array\n          (int 0)\n          (int 100)))))) empty? "]}," Sidekiq DeadSet timeout":{"type":"method","name":"timeout","children":[],"call":[]}," Sidekiq DeadSet max_jobs":{"type":"method","name":"max_jobs","children":[],"call":[]}," Sidekiq WebHelpers capture":{"type":"method","name":"capture","children":[],"call":[" eval ","block binding ","block call "]}," Sidekiq WebHelpers display_custom_head":{"type":"method","name":"display_custom_head","children":[],"call":["(send\n  (ivar :@head_html) :map) join "," capture ","@head_html map ","@head_html join "]}," Sidekiq WebHelpers add_to_head":{"type":"method","name":"add_to_head","children":[],"call":["@head_html << "," block_given? "," dup "]}," Sidekiq WebHelpers find_locale_files":{"type":"method","name":"find_locale_files","children":[],"call":["file =~ "," locale_files select "," locale_files "]}," Sidekiq WebHelpers locale_files":{"type":"method","name":"locale_files","children":[],"call":["Dir  [] "," settings locales flat_map "," settings locales "," settings "]}," Sidekiq Client normalized_hash":{"type":"method","name":"normalized_hash","children":[],"call":["Sidekiq  default_worker_options ","item_class get_sidekiq_options "," raise ","item_class ancestors inspect ","item_class ancestors ","item_class respond_to? ! ","item_class respond_to? ","get_sidekiq_options freeze ","item_class is_a? "]}," Sidekiq Process dump_threads":{"type":"method","name":"dump_threads","children":[],"call":[" signal "]}," Sidekiq average_scheduled_poll_interval=":{"type":"method","name":"average_scheduled_poll_interval=","children":[],"call":[]}," Sidekiq Scheduled Poller scaled_poll_interval":{"type":"method","name":"scaled_poll_interval","children":[],"call":["pcount * ","Sidekiq  options [] ","Sidekiq  options ","pcount == ","Sidekiq ProcessSet  new size ","Sidekiq ProcessSet  new "," process_count * "," process_count ","@config [] ","process_count * ","Sidekiq ProcessSet  new size  * ","Sidekiq ProcessSet  new size  == "]}," Sidekiq Scheduled Poller poll_interval_average":{"type":"method","name":"poll_interval_average","children":[],"call":[" scaled_poll_interval ","Sidekiq  options [] ","Sidekiq  options ","@config [] "]}," Sidekiq Scheduled Poller random_poll_interval":{"type":"method","name":"random_poll_interval","children":[],"call":[" poll_interval_average * + "," poll_interval_average to_f / "," poll_interval_average to_f "," poll_interval_average "," poll_interval_average * "," rand "," process_count < "," process_count ","interval * ","interval * + ","interval to_f / ","interval to_f ","count < "," poll_ poll_interval_average _average * + "," poll_ poll_interval_average _average to_f / "," poll_ poll_interval_average _average to_f "," poll_ poll_interval_average _average "," poll_ poll_interval_average _average * "," process_ process_count  < "," process_ process_count  "," poll_interval_average  * "," poll_interval_average  * + "," poll_interval_average  to_f / "," poll_interval_average  to_f "," process_count  < "]}," Sidekiq Processor pause_for_recovery":{"type":"method","name":"pause_for_recovery","children":[],"call":[" sleep "]}," Sidekiq Logging WithoutTimestamp call":{"type":"method","name":"call","children":[],"call":[" context ","Thread  current object_id to_s ","Thread  current object_id ","Thread  current "," Process  pid ","Sidekiq Logging  tid "]}," Sidekiq Job created_at":{"type":"method","name":"created_at","children":[],"call":["Time  at utc ","Time  at ","@item [] "," [] "]}," Sidekiq WebHelpers to_display":{"type":"method","name":"to_display","children":[],"call":["ex message ","ex class name ","ex class ","arg to_s ","arg inspect "]}," Sidekiq WebHelpers csrf_tag":{"type":"method","name":"csrf_tag","children":[],"call":[" session [] "," session "," env [] "," env "]}," Sidekiq Util want_a_hertz_donut?":{"type":"method","name":"want_a_hertz_donut?","children":[],"call":["info [] ","Sidekiq  logger debug ","Sidekiq  logger ","Sidekiq  logger warn ","info [] to_i >= ","info [] to_i ","info [] to_i > ","c info ","Sidekiq  redis "]}," Session each":{"type":"method","name":"each","children":[],"call":["hash each "," to_hash "," to_hash  each "," to_ to_hash  "]}," Sidekiq Middleware Server Logging log_context":{"type":"method","name":"log_context","children":[],"call":["item [] ","bid freeze ","jid freeze ","worker class to_s ","worker class ","wrapped freeze "]}," Sidekiq JobSet delete_by_jid":{"type":"method","name":"delete_by_jid","children":[],"call":["conn zrem "," name ","message [] == ","message [] ","Sidekiq  load_json ","elements each ","conn zrangebyscore ","Sidekiq  redis ","element index ","conn zrange ","Sidekiq  load_json  [] == ","Sidekiq  load_json  [] ","conn zrangebyscore  each ","conn zrange  each "]}," Sidekiq JobSet delete_by_value":{"type":"method","name":"delete_by_value","children":[],"call":["conn zrem ","Sidekiq  redis "]}," Sidekiq Worker ClassMethods process_job":{"type":"method","name":"process_job","children":[],"call":[" execute_job ","job [] ","Sidekiq Testing  server_middleware invoke ","Sidekiq Testing  server_middleware ","worker bid= ","worker respond_to? ","worker jid= "," new "," new  bid= "," new  respond_to? "," new  jid= "]}," Sidekiq Testing server_middleware":{"type":"method","name":"server_middleware","children":[],"call":[" block_given? ","Middleware Chain  new ","Sidekiq  default_configuration "]}," Sidekiq Worker ClassMethods delay_until":{"type":"method","name":"delay_until","children":[],"call":[" raise "]}," Sidekiq Worker ClassMethods delay_for":{"type":"method","name":"delay_for","children":[],"call":[" raise "]}," Sidekiq Worker ClassMethods delay":{"type":"method","name":"delay","children":[],"call":[" raise "]}," Sidekiq default_server_middleware":{"type":"method","name":"default_server_middleware","children":[],"call":[]}," Sidekiq WebHelpers redis_connection_and_namespace":{"type":"method","name":"redis_connection_and_namespace","children":[],"call":[" redis_connection "," namespace "," namespace == "," namespace nil? "]}," Sidekiq Util safe_thread":{"type":"method","name":"safe_thread","children":[],"call":[" watchdog ","Thread  new ","Thread  current []= ","Thread  current ","sidekiq_label freeze ","Thread  current name= "]}," Sidekiq Queues clear_all":{"type":"method","name":"clear_all","children":[],"call":[" jobs clear "," jobs "," jobs_by_worker clear "," jobs_by_worker "," jobs_by_queue clear "," jobs_by_queue "," jobs_by_class clear "," jobs_by_class "]}," Sidekiq Queues jobs":{"type":"method","name":"jobs","children":[],"call":["hash []= ","Hash  new "]}," Sidekiq Queues []":{"type":"method","name":"[]","children":[],"call":[" jobs [] ","queue to_s "," jobs "," jobs_by_queue [] "," jobs_by_queue "]}," Sidekiq Scheduled Poller wait":{"type":"method","name":"wait","children":[],"call":["@sleeper pop "," random_poll_interval "," sleep "," logger error ","ex backtrace first ","ex backtrace "," logger ","ex message "," handle_exception "]}," Sidekiq Scheduled Poller enqueue":{"type":"method","name":"enqueue","children":[],"call":[" logger error ","ex backtrace first ","ex backtrace "," logger ","ex message ","@enq enqueue_jobs ","ex backtrace each "," handle_exception "]}," Sidekiq Scheduled Poller start":{"type":"method","name":"start","children":[],"call":["Sidekiq  logger info ","Sidekiq  logger "," wait "," enqueue ","@done ! "," initial_wait "," safe_thread "," logger info "," logger "]}," Sidekiq Scheduled Poller terminate":{"type":"method","name":"terminate","children":[],"call":["t value ","@sleeper << ","@enq terminate ","@enq respond_to? "]}," Sidekiq RedisConnection verify_sizing":{"type":"method","name":"verify_sizing","children":[],"call":[" raise ","concurrency + ","size <= ","size < "]}," Sidekiq Processor handle_fetch_exception":{"type":"method","name":"handle_fetch_exception","children":[],"call":[" sleep "," logger error "," logger ","ex backtrace each ","ex backtrace ","Time  now ","@down ! "," handle_exception "," Process  clock_gettime ","Time  now  ! "," Process  clock_gettime  ! "]}," Sidekiq Processor fetch":{"type":"method","name":"fetch","children":[],"call":["j requeue "," get_one "," get_one  requeue "]}," Sidekiq Processor get_one":{"type":"method","name":"get_one","children":[],"call":[" handle_fetch_exception ","Time  now - ","Time  now "," logger info "," logger ","@strategy retrieve_work "," Process  clock_gettime - "," Process  clock_gettime "," capsule fetcher retrieve_work "," capsule fetcher "," capsule ","@strategy retrieve_@strategy retrieve_work  "," capsule fetcher retrieve_@strategy retrieve_work  "]}," Sidekiq Processor process_one":{"type":"method","name":"process_one","children":[],"call":[" process "," fetch "]}," Sidekiq Processor run":{"type":"method","name":"run","children":[],"call":["@mgr processor_died ","@mgr processor_stopped "," process_one ","@done ! ","@callback call ","Thread  current []= ","Thread  current "]}," Sidekiq Processor start":{"type":"method","name":"start","children":[],"call":[" safe_thread "," method "," config name "," config "]}," Sidekiq Processor kill":{"type":"method","name":"kill","children":[],"call":["@thread value ","@thread raise ","@thread ! "]}," Sidekiq Processor terminate":{"type":"method","name":"terminate","children":[],"call":["@thread value ","@thread ! "]}," Sidekiq Manager hard_shutdown":{"type":"method","name":"hard_shutdown","children":[],"call":["processor kill ","cleanup each ","strategy bulk_requeue ","@options [] ","jobs inspect "," logger warn "," logger ","cleanup size ","(send\n  (lvar :cleanup) :map) compact ","p job ","cleanup map ","cleanup size > ","@workers dup ","@plock synchronize ","@workers empty? "," wait_for "," Process  clock_gettime + "," Process  clock_gettime ","@config [] "," logger debug "," capsule fetcher bulk_requeue "," capsule fetcher "," capsule ","@workers dup  each ","@options []  bulk_requeue ","@config []  bulk_requeue ","(send\n  (lvar :cleanup) :map) compact  inspect ","@workers dup  size ","(send\n  (lvar :@workers dup ) :map) compact ","@workers dup  map ","@workers dup  size > "]}," Sidekiq Manager processor_stopped":{"type":"method","name":"processor_stopped","children":[],"call":["@workers delete ","@plock synchronize "]}," Sidekiq Manager quiet":{"type":"method","name":"quiet","children":[],"call":[" fire_event ","x terminate ","@workers each "," logger info "," logger "," capsule name "," capsule "]}," Sidekiq Launcher clear_heartbeat":{"type":"method","name":"clear_heartbeat","children":[],"call":["conn del "," identity ","conn srem ","conn pipelined ","Sidekiq  redis ","conn unlink ","pipeline unlink ","pipeline srem "," redis "," flush_stats "]}," Sidekiq Launcher ❤":{"type":"method","name":"❤","children":[],"call":["FAILURE  increment ","PROCESSED  increment "," logger error ","e message "," logger "," Process  kill ","Sidekiq CLI  instance handle_signal ","Sidekiq CLI  instance ","JVM_RESERVED_SIGNALS  include? ","conn rpop ","conn expire ","conn hmset ","Time  now to_f ","Time  now ","Processor WORKER_STATE  size ","conn sadd ","conn pipelined ","Sidekiq  redis ","conn hset ","Sidekiq  dump_json ","Processor WORKER_STATE  each_pair ","conn del ","conn incrby ","stat:failed freeze ","stat:processed freeze ","Time  now utc strftime ","%Y-%m-%d freeze ","Time  now utc ","(begin\n  (lvar :key)) freeze ","Processor PROCESSED  update ","Processor FAILURE  update ","Processor FAILURE  increment ","Processor PROCESSED  increment ","conn multi "," fire_event ","exists ! ","conn exists "," to_json "," identity ","Processor FAILURE  incr ","Processor PROCESSED  incr ","Processor PROCESSED  reset ","Processor FAILURE  reset ","curstate size ","curstate each_pair ","Processor WORKER_STATE  dup ","conn exists? "," Process  pid ","conn unlink "," memory_usage "," check_rtt ","transaction rpop ","transaction expire ","transaction hmset ","transaction exists? ","transaction sadd ","transaction hset ","transaction unlink ","transaction incrby ","Processor WORK_STATE  dup ","@done to_s "," redis ","exists > ","transaction exists "," flush_stats ","@embedded ! ","(begin\n  (lvar : identity )) freeze ","Processor WORKER_STATE  dup  size ","Processor WORK_STATE  dup  size ","Processor WORKER_STATE  dup  each_pair ","Processor WORK_STATE  dup  each_pair "," check_ check_rtt  "]}," Sidekiq Launcher heartbeat":{"type":"method","name":"heartbeat","children":[],"call":[" ❤ ","results join ","results compact! ","x call ","Sidekiq CLI PROCTITLES  map "," to_data ","(send\n  (const nil :PROCTITLES) :map) compact join ","(send\n  (const nil :PROCTITLES) :map) compact ","proc call ","PROCTITLES  map "]}," Sidekiq Launcher stopping?":{"type":"method","name":"stopping?","children":[],"call":[]}," Sidekiq Launcher quiet":{"type":"method","name":"quiet","children":[],"call":["@poller terminate ","@manager quiet "," fire_event ","@managers each "]}," Sidekiq WebHelpers clear_caches":{"type":"method","name":"clear_caches","children":[],"call":[]}," Sidekiq Queues clear_for":{"type":"method","name":"clear_for","children":[],"call":[" jobs_by_worker [] clear "," jobs_by_worker [] "," jobs_by_worker "," jobs_by_queue [] clear "," jobs_by_queue [] "," jobs_by_queue "," jobs_by_class [] clear "," jobs_by_class [] "," jobs_by_class ","queue to_s "]}," Sidekiq Queues delete_for":{"type":"method","name":"delete_for","children":[],"call":["job [] == ","job [] "," jobs_by_worker [] delete_if "," jobs_by_worker [] "," jobs_by_worker "," jobs_by_queue [] delete_if "," jobs_by_queue [] "," jobs_by_queue ","queue to_s "," jobs_by_class [] delete_if "," jobs_by_class [] "," jobs_by_class "]}," Sidekiq Queues jobs_by_worker":{"type":"method","name":"jobs_by_worker","children":[],"call":["hash []= ","Hash  new "]}," Sidekiq Queues jobs_by_queue":{"type":"method","name":"jobs_by_queue","children":[],"call":["hash []= ","Hash  new "]}," Sidekiq Queues push":{"type":"method","name":"push","children":[],"call":[" jobs_by_worker [] << "," jobs_by_worker [] "," jobs_by_worker "," jobs_by_queue [] << "," jobs_by_queue [] "," jobs_by_queue "," jobs_by_class [] << "," jobs_by_class [] "," jobs_by_class "]}," Sidekiq Worker ClassMethods set":{"type":"method","name":"set","children":[],"call":["Thread  current []= ","Thread  current ","Setter  new ","options merge! ","class freeze "]}," Sidekiq Process stopping?":{"type":"method","name":"stopping?","children":[],"call":[" [] == "," [] "]}," Sidekiq default_retries_exhausted":{"type":"method","name":"default_retries_exhausted","children":[],"call":[]}," Sidekiq default_retries_exhausted=":{"type":"method","name":"default_retries_exhausted=","children":[],"call":[]}," Sidekiq redis_info":{"type":"method","name":"redis_info","children":[],"call":[]}," Sidekiq Web build":{"type":"method","name":"build","children":[],"call":[" run ","WebApplication  new "," use ","middlewares each "," Rack File  new "," map ","(str \"stylesheets\") each "," Rack Builder  new ","middlewares unshift ","SecureRandom  hex "," require ","Web  session_secret "," using? ","ENV  [] == ","ENV  [] "," class "," middlewares "," build_sessions ","m each "," middlewares  each "," middlewares iddlewares each ","  middlewares ap "," middlewares  unshift "," middlewares iddlewares unshift ","SecureRando middlewares   hex ","Web  session_SecureRandom  hex  ","Web  session_Web  session_secret  ","  middlewares  ","  middlewares iddlewares "]}," Sidekiq Web using?":{"type":"method","name":"using?","children":[],"call":["m [] kind_of? ","m [] ","m [] == ","m kind_of? "," middlewares any? "," middlewares ","m [] is_a? ","m is_a? "]}," Sidekiq Web register":{"type":"method","name":"register","children":[],"call":[]}," Sidekiq Web app":{"type":"method","name":"app","children":[],"call":[" build "]}," Sidekiq Web call":{"type":"method","name":"call","children":[],"call":[" app call "," app "]}," Sidekiq Web middlewares":{"type":"method","name":"middlewares","children":[],"call":["Web  middlewares dup ","Web  middlewares "," class middlewares "," class "]}," Sidekiq Web use":{"type":"method","name":"use","children":[],"call":[" middlewares << "," middlewares "]}," Sidekiq Web settings":{"type":"method","name":"settings","children":[],"call":[" class settings "," class "]}," Sidekiq Web views":{"type":"method","name":"views","children":[],"call":[]}," Sidekiq Web locales":{"type":"method","name":"locales","children":[],"call":[]}," Sidekiq WebRoute match":{"type":"method","name":"match","children":[],"call":["Hash  [] ","path_match names map zip ","path_match captures ","path_match names map ","path_match names ","path match "," matcher ","path == ","path match  names map zip ","path match  captures ","path match  names map ","path match  names "]}," Sidekiq WebRoute compile":{"type":"method","name":"compile","children":[],"call":[" pattern ","Regexp  new "," pattern gsub "," pattern match "," pattern match? ","  pattern gsub attern ","Regex pattern gsub   new ","  pattern gsub attern gsub ","  pattern gsub attern match ","  pattern gsub attern match? "]}," Sidekiq WebRoute matcher":{"type":"method","name":"matcher","children":[],"call":[" compile "]}," Sidekiq WebRoute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq WebRouter match":{"type":"method","name":"match","children":[],"call":["WebAction  new ","route block ","env []= ","route match ","@routes [] each ","@routes [] "," Rack Utils  unescape ","env [] ","path_info == "," Rack Utils  unescape  == "]}," Sidekiq WebRouter route":{"type":"method","name":"route","children":[],"call":["@routes [] << ","WebRoute  new ","@routes [] ","method == "]}," Sidekiq WebRouter delete":{"type":"method","name":"delete","children":[],"call":[" route "]}," Sidekiq WebRouter patch":{"type":"method","name":"patch","children":[],"call":[" route "]}," Sidekiq WebRouter put":{"type":"method","name":"put","children":[],"call":[" route "]}," Sidekiq WebRouter post":{"type":"method","name":"post","children":[],"call":[" route "]}," Sidekiq WebRouter get":{"type":"method","name":"get","children":[],"call":[" route "]}," Sidekiq WebHelpers delete_or_add_queue":{"type":"method","name":"delete_or_add_queue","children":[],"call":["job add_to_queue ","params [] ","job delete "]}," Sidekiq WebHelpers retry_or_delete_or_kill":{"type":"method","name":"retry_or_delete_or_kill","children":[],"call":["job kill ","params [] ","job delete ","job retry "]}," Sidekiq WebHelpers poll_path":{"type":"method","name":"poll_path","children":[],"call":[" root_path + "," current_path "," root_path "," params [] "," params "," current_path != ","query_string empty? "," to_query_string "," params slice "," params keys - "," params keys "," root_ root_path +  + "," current_ root_path +  "," root_ root_path +  "," current_ root_path +  != "," to_query_string  empty? "," to_ to_query_string  "]}," Sidekiq WebApplication afters":{"type":"method","name":"afters","children":[],"call":[]}," Sidekiq WebApplication befores":{"type":"method","name":"befores","children":[],"call":[]}," Sidekiq WebApplication run_hooks":{"type":"method","name":"run_hooks","children":[],"call":[]}," Sidekiq WebApplication run_afters":{"type":"method","name":"run_afters","children":[],"call":[]}," Sidekiq WebApplication run_befores":{"type":"method","name":"run_befores","children":[],"call":[]}," Sidekiq WebApplication after":{"type":"method","name":"after","children":[],"call":[]}," Sidekiq WebApplication before":{"type":"method","name":"before","children":[],"call":[]}," Sidekiq WebApplication helpers":{"type":"method","name":"helpers","children":[],"call":[]}," Sidekiq WebApplication call":{"type":"method","name":"call","children":[],"call":["resp [] []= ","(send\n  (send\n    (lvar :resp) :[]\n    (int 2)) :inject\n  (int 0)) to_s ","l + ","p bytesize ","resp [] inject ","resp [] ","action type "," class run_afters "," class ","action instance_exec ","action block "," class run_befores "," catch "," class match ","resp []= ","resp [] dup ","action locale ","resp [] sum to_s ","resp [] sum ","action instance_exec  [] []= ","(send\n  (send\n    (lvar :action instance_exec ) :[]\n    (int 2)) :inject\n  (int 0)) to_s ","action instance_exec  [] inject ","action instance_exec  [] "," class match  type "," class match  instance_exec "," class match  block ","action instance_exec  []= ","action instance_exec  [] dup "," class match  locale ","action instance_exec  [] sum to_s ","action instance_exec  [] sum "]}," Sidekiq WebApplication set":{"type":"method","name":"set","children":[],"call":[]}," Sidekiq WebApplication tabs":{"type":"method","name":"tabs","children":[],"call":[]}," Sidekiq WebApplication settings":{"type":"method","name":"settings","children":[],"call":["@klass settings "]}," Sidekiq WebApplication initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq WebAction _erb":{"type":"method","name":"_erb","children":[],"call":[" send ","ERB  new result "," binding ","ERB  new ","file kind_of? "," define_singleton_method ","locals each "," singleton_methods include? "," singleton_methods ","file is_a? "]}," Sidekiq WebAction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq WebAction json":{"type":"method","name":"json","children":[],"call":["Sidekiq  dump_json "]}," Sidekiq WebAction render":{"type":"method","name":"render","children":[],"call":[" erb "," raise ","engine != "]}," Sidekiq WebAction erb":{"type":"method","name":"erb","children":[],"call":[" _render "," _erb ","options [] ","WebAction  class_eval ","ERB  new src ","ERB  new ","File  read ","Web  settings views ","Web  settings "," respond_to? ","content kind_of? ","46 + ","content is_a? ","ERB  new ERB  new src  "," _erb  kind_of? "," _erb  is_a? "]}," Sidekiq WebAction content_type":{"type":"method","name":"content_type","children":[],"call":[]}," Sidekiq WebAction session":{"type":"method","name":"session","children":[],"call":[" env [] "," env "]}," Sidekiq WebAction route_params":{"type":"method","name":"route_params","children":[],"call":[" env [] "," env "]}," Sidekiq WebAction params":{"type":"method","name":"params","children":[],"call":["indifferent_hash []= ","k to_s "," route_params each "," route_params ","indifferent_hash merge! "," request params "," request ","hash [] ","key to_s ","Symbol  === ","Hash  new "]}," Sidekiq WebAction redirect":{"type":"method","name":"redirect","children":[],"call":[" throw "," request base_url "," request "]}," Sidekiq WebAction halt":{"type":"method","name":"halt","children":[],"call":[" throw ","res to_s "]}," Sidekiq WebAction request":{"type":"method","name":"request","children":[],"call":[" Rack Request  new "," env "]}," Sidekiq WebAction settings":{"type":"method","name":"settings","children":[],"call":["Web  settings "]}," Sidekiq Rails Reloader inspect":{"type":"method","name":"inspect","children":[],"call":["@app class name ","@app class "]}," Sidekiq Rails Reloader call":{"type":"method","name":"call","children":[],"call":["@app reloader wrap ","@app reloader "," Rails VERSION STRING  >= "]}," Sidekiq Rails Reloader initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq  logger debug ","Sidekiq  logger ","app config cache_classes ","app config "]}," Sidekiq Web set":{"type":"method","name":"set","children":[],"call":[" send "]}," Sidekiq Web build_sessions":{"type":"method","name":"build_sessions","children":[],"call":["middlewares unshift ","options merge ","s to_hash ","s respond_to? ","SecureRandom  hex "," require ","Web  session_secret "," using? "," sessions ","ENV  [] == ","ENV  [] "," middlewares "," using? ! ","ENV  [] != ","middleware sessions  un sessions hift "," middlewares  unshift ","options merge  merge ","option sessions  merge "," sessions  to_ha sessions h "," sessions  re sessions pond_to? ","Web  session_SecureRandom  hex  ","Web  session_Web  session_secret  ","Web   sessions e sessions  sessions ion_ sessions ecret "," u sessions ing? ","  sessions e sessions  sessions ion sessions  "," middleware sessions  ","  middlewares  "," u sessions ing? ! "]}," Sidekiq Web sessions":{"type":"method","name":"sessions","children":[],"call":["@sessions to_hash dup ","@sessions to_hash ","@sessions respond_to? "," class sessions "," class "," instance_variable_defined? ","@sessions to_hash dup  to_hash dup "," class sessions  to_hash dup ","@sessions to_hash dup  to_hash "," class sessions  to_hash ","@sessions to_hash dup  respond_to? "," class sessions  respond_to? "]}," Sidekiq Web disable":{"type":"method","name":"disable","children":[],"call":[" set ","opts each "]}," Sidekiq Web enable":{"type":"method","name":"enable","children":[],"call":[" set ","opts each "]}," Sidekiq Web inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Sidekiq WebHelpers unfiltered?":{"type":"method","name":"unfiltered?","children":[],"call":[" env [] start_with? "," env [] "," env "]}," Sidekiq Rails PsychAutoload resolve_class":{"type":"method","name":"resolve_class","children":[],"call":["klass_name constantize "]}," Sidekiq Rails Executor inspect":{"type":"method","name":"inspect","children":[],"call":["@app class name ","@app class "]}," Sidekiq Rails Executor call":{"type":"method","name":"call","children":[],"call":["@app executor wrap ","@app executor "]}," Sidekiq Rails Executor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Processor log_context":{"type":"method","name":"log_context","children":[],"call":["item [] ","bid freeze ","jid freeze ","class freeze ","wrapped freeze "]}," Sidekiq Launcher to_json":{"type":"method","name":"to_json","children":[],"call":["Sidekiq  dump_json "," to_data "]}," Sidekiq Launcher to_data":{"type":"method","name":"to_data","children":[],"call":[" identity ","@options [] ","@options [] uniq ","Time  now to_f ","Time  now "," hostname "," Process  pid ","@config [] ","@config [] uniq ","@config [] to_a ","(send\n  (send\n    (send\n      (ivar :@config) :capsules) :values) :map) flatten uniq ","(send\n  (send\n    (send\n      (ivar :@config) :capsules) :values) :map) flatten ","cap queues ","@config capsules values map ","@config capsules values ","@config capsules ","@config total_concurrency ","(send\n  (send\n    (send\n      (ivar :@config) :capsules) :values) :flat_map) tally ","@config capsules values flat_map ","(send\n  (send\n    (send\n      (ivar :@config) :capsules) :values) :flat_map) uniq "," to_weights "]}," Kernel silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Sidekiq SortedEntry error?":{"type":"method","name":"error?","children":[],"call":[" item [] ! ! "," item [] ! "," item [] "," item "]}," Sidekiq Worker Setter perform_in":{"type":"method","name":"perform_in","children":[],"call":["@opts [] client_push ","@opts [] ","class freeze ","@opts delete ","at freeze ","ts <= ","@opts merge! ","args freeze ","now + ","int < ","Time  now to_f ","Time  now ","interval to_f ","@klass client_push ","payload delete ","@opts merge ","payload []= ","ts > "," at perform_async "," at ","Time  now to_f  + ","interval to_f  < ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","interval to_f erval to_f ","@opts merge  delete ","@opts merge  []= "]}," Sidekiq Worker Setter perform_async":{"type":"method","name":"perform_async","children":[],"call":["@opts [] client_push ","@opts merge! ","args freeze ","@opts [] ","class freeze ","@klass client_push ","@opts merge "," perform_inline ","@opts [] == "]}," Sidekiq Worker Setter initialize":{"type":"method","name":"initialize","children":[],"call":[" at ","@opts delete ","opts transform_keys ","opts transform_keys  delete "]}," Sidekiq WebHelpers rtl?":{"type":"method","name":"rtl?","children":[],"call":[" text_direction == "," text_direction "]}," Sidekiq WebHelpers text_direction":{"type":"method","name":"text_direction","children":[],"call":[" get_locale [] "," get_locale "]}," Sidekiq Processor send_to_morgue":{"type":"method","name":"send_to_morgue","children":[],"call":["conn zremrangebyrank ","DeadSet  max_jobs -@ ","DeadSet  max_jobs ","conn zremrangebyscore ","now - ","DeadSet  timeout ","conn zadd ","conn multi ","Sidekiq  redis ","Time  now to_f ","Time  now ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Sidekiq Processor dispatch":{"type":"method","name":"dispatch","children":[],"call":["@retrier local ","worker jid= ","job_hash [] ","jid freeze ","klass new ","job_hash [] constantize ","class freeze ","@reloader call "," stats ","@logging call ","@retrier global ","Sidekiq Logging  with_context ","bid freeze ","wrapped freeze "," cloned "," constantize ","Sidekiq Logging  with_job_hash_context ","@job_logger call ","@job_logger with_job_hash_context ","@job_logger prepare "," json_clone ","inst jid= ","Object  const_get ","klass new  jid= ","job_hash [] constantize  new "," constantize  new ","Object  const_get  new "]}," Sidekiq Middleware Server ActiveRecord initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," Rails VERSION MAJOR  >= "]}," Sidekiq JobRetry exception_caused_by_shutdown?":{"type":"method","name":"exception_caused_by_shutdown?","children":[],"call":[" exception_caused_by_shutdown? ","e cause ","e cause instance_of? ","checked_causes include? ","e cause object_id ","checked_causes << ","e object_id "]}," Sidekiq JobRetry retry_in":{"type":"method","name":"retry_in","children":[],"call":[" handle_exception ","worker class name ","worker class ","worker sidekiq_retry_in_block call to_i ","worker sidekiq_retry_in_block call ","worker sidekiq_retry_in_block ","jobinst class name ","jobinst class ","jobinst sidekiq_retry_in_block call ","jobinst sidekiq_retry_in_block "]}," Sidekiq JobRetry seconds_to_delay":{"type":"method","name":"seconds_to_delay","children":[],"call":["(send\n  (lvar :count) :**\n  (int 4)) + + "," rand * ","count + "," rand ","(send\n  (lvar :count) :**\n  (int 4)) + ","count ** "]}," Sidekiq JobRetry delay_for":{"type":"method","name":"delay_for","children":[],"call":[" seconds_to_delay "," retry_in ","worker sidekiq_retry_in_block? ","worker sidekiq_retry_in_block ","custom_retry_in > "," retry_in to_i ","(send\n  (lvar :count) :**\n  (int 4)) + + ","(send\n  (lvar :count) :**\n  (int 4)) + ","count ** ","custom_retry_in + "," rand * ","count + "," rand ","rv == ","rv > ","Integer  === "," handle_exception ","jobinst class name ","jobinst class ","rv to_i ","rv respond_to? ","wrapped sidekiq_retry_in_block ","wrapped respond_to? ","Object  const_get ","msg [] ","msg [] nil? "," seconds_to_(send\n  (lvar :count) :**\n  (int 4)) +  ","worker sidekiq_retry_in_wrapped sidekiq_retry_in_block ? ","worker sidekiq_retry_in_wrapped sidekiq_retry_in_block  "," retry_in to_i  > "," retry_in to_i  + ","rv to_i  == ","rv to_i  > ","rv to_i  to_i ","rv to_i  respond_to? ","wrapped sidekiq_retry_in_wrapped sidekiq_retry_in_block  ","Object  const_get  sidekiq_retry_in_block ","Object  const_get  respond_to? "]}," Sidekiq JobRetry retry_attempts_from":{"type":"method","name":"retry_attempts_from","children":[],"call":["msg_retry is_a? "]}," Sidekiq JobRetry send_to_morgue":{"type":"method","name":"send_to_morgue","children":[],"call":["conn zremrangebyrank ","DeadSet  max_jobs -@ ","DeadSet  max_jobs ","conn zremrangebyscore ","now - ","DeadSet  timeout ","conn zadd ","conn multi ","Sidekiq  redis ","Time  now to_f ","Time  now ","Sidekiq  dump_json ","msg [] ","Sidekiq  logger info ","Sidekiq  logger ","DeadSet  new kill ","DeadSet  new "," logger info "," logger ","xa zremrangebyrank "," config [] -@ "," config [] "," config ","xa zremrangebyscore ","xa zadd ","now to_s "," config redis ","@capsule config [] -@ ","@capsule config [] ","@capsule config "," redis ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","Time  now to_f  to_s "]}," Sidekiq JobRetry retries_exhausted":{"type":"method","name":"retries_exhausted","children":[],"call":[" send_to_morgue ","msg [] == ","msg [] "," handle_exception ","block call ","Sidekiq  default_retries_exhausted ","worker sidekiq_retries_exhausted_block "," logger debug "," logger ","handler call ","Sidekiq  death_handlers each ","Sidekiq  death_handlers "," config death_handlers each "," config death_handlers "," config ","@capsule config death_handlers each ","@capsule config death_handlers ","@capsule config ","wrapped sidekiq_retries_exhausted_block ","wrapped respond_to? ","Object  const_get ","msg [] nil? ","rv == ","wrapped sidekiq_retries_exhausted_block  call ","worker sidekiq_retries_exhausted_wrapped sidekiq_retries_exhausted_block  ","wrapped sidekiq_retries_exhausted_wrapped sidekiq_retries_exhausted_block  ","Object  const_get  sidekiq_retries_exhausted_block ","Object  const_get  respond_to? "]}," Sidekiq JobRetry attempt_retry":{"type":"method","name":"attempt_retry","children":[],"call":[" retries_exhausted ","conn zadd ","retry_at to_s ","Sidekiq  redis ","Sidekiq  dump_json ","Time  now to_f + ","Time  now to_f ","Time  now "," logger debug "," logger "," delay_for ","count < ","msg []= ","exception backtrace [] ","msg [] to_i ","msg [] ","exception backtrace ","msg [] to_i != ","msg [] ! ","msg [] == ","exception class name ","exception class ","m scrub! ","m force_encoding ","m respond_to? ","exception message to_s [] ","exception message to_s ","exception message "," retry_attempts_from "," raise "," exception_message "," compress_backtrace "," redis ","Time  now to_f +  to_s ","Sidekiq  duexception message to_s [] p_json ","Sidekiq  du exception_message p_json ","Tiexception message to_s [] e  now to_f + ","Ti exception_message e  now to_f + ","Tiexception message to_s [] e  now to_f ","Ti exception_message e  now to_f ","Tiexception message to_s [] e  now ","Ti exception_message e  now ","  delay_for _for ","exception message to_s [] sg []= "," exception_message sg []= ","exception message to_s [] sg [] to_i "," exception_message sg [] to_i ","exception message to_s [] sg [] "," exception_message sg [] ","exception message to_s [] sg [] to_i != "," exception_message sg [] to_i != ","exception message to_s [] sg [] ! "," exception_message sg [] ! ","exception message to_s [] sg [] == "," exception_message sg [] == ","exception class naexception message to_s [] e ","exception class na exception_message e ","exception message to_s []  scrub! "," exception_message  scrub! ","exception message to_s []  force_encoding "," exception_message  force_encoding ","exception message to_s []  respond_to? "," exception_message  respond_to? ","exception exception message to_s [] essage to_s [] ","exception  exception_message essage to_s [] ","exception exception message to_s [] essage to_s ","exception  exception_message essage to_s ","exception exception message to_s [] essage ","exception  exception_message essage "," Time  now to_f + tempts_from "," retry_atteexception message to_s [] pts_froexception message to_s []  "," retry_atte exception_message pts_fro exception_message  "," exception_exception message to_s [] essage "," exception_ exception_message essage "," coexception message to_s [] press_backtrace "," co exception_message press_backtrace "]}," Sidekiq JobRetry local":{"type":"method","name":"local","children":[],"call":[" raise "," attempt_retry ","msg [] ","msg []= ","worker class get_sidekiq_options [] ","worker class get_sidekiq_options ","worker class ","msg [] == "," exception_caused_by_shutdown? ","msg [] nil? ","Sidekiq  load_json ","jobinst class get_sidekiq_options [] ","jobinst class get_sidekiq_options ","jobinst class "," process_retry ","Sidekiq  load_json  [] ","Sidekiq  load_json  []= ","Sidekiq  load_json  [] == ","Sidekiq  load_json  [] nil? "]}," Sidekiq JobRetry global":{"type":"method","name":"global","children":[],"call":[" raise "," attempt_retry ","msg [] "," exception_caused_by_shutdown? "," handle_exception ","handler call ","Sidekiq  death_handlers each ","Sidekiq  death_handlers ","Sidekiq  load_json "," process_retry ","@capsule config death_handlers each ","@capsule config death_handlers ","@capsule config ","Sidekiq  load_json  [] "]}," Sidekiq JobRetry initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq  options merge fetch ","Sidekiq  options merge ","Sidekiq  options ","@config [] ","Sidekiq  default_configuration [] ","Sidekiq  default_configuration "]}," Sidekiq JobLogger logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq  logger "]}," Sidekiq JobLogger elapsed":{"type":"method","name":"elapsed","children":[],"call":["(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :start)) round ","Time  now - ","Time  now ","(send\n  (send\n    (const\n      (cbase) :Process) :clock_gettime\n    (const\n      (const\n        (cbase) :Process) :CLOCK_MONOTONIC)) :-\n  (lvar :start)) round "," Process  clock_gettime - "," Process  clock_gettime "]}," Sidekiq JobLogger call":{"type":"method","name":"call","children":[],"call":[" raise "," logger info "," elapsed "," logger ","start freeze ","Time  now ","Sidekiq Logging  with_context "," log_context "," Process  clock_gettime ","@logger info "," with_elapsed_time_context ","Sidekiq Context  add ","Time  now  freeze "," Process  clock_gettime  freeze "]}," Sidekiq Extensions enable_delay!":{"type":"method","name":"enable_delay!","children":[],"call":[]}," Sidekiq CLI jruby?":{"type":"method","name":"jruby?","children":[],"call":[]}," Sidekiq Job parse":{"type":"method","name":"parse","children":[],"call":["Sidekiq  load_json "]}," Sidekiq JobLogger log_context":{"type":"method","name":"log_context","children":[],"call":["item [] ","bid freeze ","jid freeze ","class freeze ","wrapped freeze "]}," Sidekiq Worker ClassMethods class_attribute":{"type":"method","name":"class_attribute","children":[],"call":[" attr_writer "," undef_method "," private_method_defined? "," method_defined? "," class public_send "," class "," instance_variable_get "," instance_variable_defined? "," define_method "," singleton_class send "," singleton_class "," class_eval "," singleton_class? "," singleton_class class_eval "," define_singleton_method "," singleton_class instance_eval ","attrs each "]}," Sidekiq WebHelpers server_utc_time":{"type":"method","name":"server_utc_time","children":[],"call":["Time  now utc strftime ","Time  now utc ","Time  now "]}," Sidekiq WebHelpers user_preferred_languages":{"type":"method","name":"user_preferred_languages","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :languages) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality\n        (if\n          (lvar :quality)\n          (send\n            (lvar :quality) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality)))) :sort) map compact ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :languages) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality\n        (if\n          (lvar :quality)\n          (send\n            (lvar :quality) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality)))) :sort) map ","right <=> ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :languages) :to_s) :downcase) :gsub\n      (regexp\n        (str \"\\\\s+\")\n        (regopt))\n      (str \"\")) :split\n    (str \",\")) :map) sort ","quality to_f ","locale == ","language split ","languages to_s downcase gsub split map ","languages to_s downcase gsub split ","languages to_s downcase gsub ","languages to_s downcase ","languages to_s "," env [] ","HTTP_ACCEPT_LANGUAGE freeze "," env ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :languages) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality to_f ))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality to_f \n        (if\n          (lvar :quality to_f )\n          (send\n            (lvar :quality to_f ) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality to_f )))) :sort) map compact ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar : env [] ) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality\n        (if\n          (lvar :quality)\n          (send\n            (lvar :quality) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality)))) :sort) map compact ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :languages) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality to_f ))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality to_f \n        (if\n          (lvar :quality to_f )\n          (send\n            (lvar :quality to_f ) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality to_f )))) :sort) map ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar : env [] ) :to_s) :downcase) :gsub\n          (regexp\n            (str \"\\\\s+\")\n            (regopt))\n          (str \"\")) :split\n        (str \",\")) :map)\n    (args\n      (arg :language))\n    (begin\n      (masgn\n        (mlhs\n          (lvasgn :locale)\n          (lvasgn :quality))\n        (send\n          (lvar :language) :split\n          (str \";q=\")\n          (int 2)))\n      (if\n        (send\n          (lvar :locale) :==\n          (str \"*\"))\n        (lvasgn :locale\n          (nil)) nil)\n      (lvasgn :quality\n        (if\n          (lvar :quality)\n          (send\n            (lvar :quality) :to_f)\n          (float 1.0)))\n      (array\n        (lvar :locale)\n        (lvar :quality)))) :sort) map ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar : env [] ) :to_s) :downcase) :gsub\n      (regexp\n        (str \"\\\\s+\")\n        (regopt))\n      (str \"\")) :split\n    (str \",\")) :map) sort ","quality to_f  to_f "," env []  to_s downcase gsub split map "," env []  to_s downcase gsub split "," env []  to_s downcase gsub "," env []  to_s downcase "," env []  to_s "]}," Sidekiq WebHelpers available_locales":{"type":"method","name":"available_locales","children":[],"call":["(send\n  (send nil :locale_files) :map) uniq ","File  basename "," locale_files map "," locale_files "]}," Sidekiq Testing constantize":{"type":"method","name":"constantize","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names inject ","names shift ","names first empty? ","names first ","names empty? ","str split ","str split  inject ","str split  shift ","str split  first empty? ","str split  first ","str split  empty? "]}," Sidekiq Processor constantize":{"type":"method","name":"constantize","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names inject ","names shift ","names first empty? ","names first ","names empty? ","str split ","Object  const_get ","str include? ","str split  inject ","str split  shift ","str split  first empty? ","str split  first ","str split  empty? "]}," Sidekiq Logging with_job_hash_context":{"type":"method","name":"with_job_hash_context","children":[],"call":[]}," Sidekiq Logging job_hash_context":{"type":"method","name":"job_hash_context","children":[],"call":[]}," Sidekiq ProcessSet leader":{"type":"method","name":"leader","children":[],"call":["c get ","Sidekiq  redis "]}," Sidekiq Worker ClassMethods sidekiq_class_attribute":{"type":"method","name":"sidekiq_class_attribute","children":[],"call":[" attr_writer "," undef_method "," private_method_defined? "," method_defined? "," class public_send "," class "," instance_variable_get "," instance_variable_defined? "," define_method "," singleton_class send "," singleton_class "," class_eval "," singleton_class? "," singleton_class class_eval "," define_singleton_method "," singleton_class instance_eval ","attrs each ","ACCESSOR_MUTEX  synchronize "," send "," private "]}," Sidekiq Extensions PsychAutoload resolve_class":{"type":"method","name":"resolve_class","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names inject ","names shift ","names first empty? ","names first ","names empty? ","klass_name split ","klass_name empty? ","klass_name ! ","klass_name split  inject ","klass_name split  shift ","klass_name split  first empty? ","klass_name split  first ","klass_name split  empty? "]}," Sidekiq DeadSet kill":{"type":"method","name":"kill","children":[],"call":["conn zremrangebyrank "," class max_jobs -@ "," class max_jobs "," class "," name ","conn zremrangebyscore ","now - "," class timeout ","conn zadd ","now to_s ","conn multi ","Sidekiq  redis ","Time  now to_f ","Time  now ","handle call ","Sidekiq  death_handlers each ","Sidekiq  death_handlers ","r set_backtrace "," caller ","RuntimeError  new ","Sidekiq  load_json ","opts [] != ","opts [] ","transaction zremrangebyrank ","transaction zremrangebyscore ","transaction zadd ","Sidekiq  default_configuration death_handlers each ","Sidekiq  default_configuration death_handlers ","Sidekiq  default_configuration ","Sidekiq Config DEFAULTS  [] -@ ","Sidekiq Config DEFAULTS  [] ","conn zRuntimeError  new emRuntimeError  new angebyRuntimeError  new ank "," class max_Sidekiq  load_json s -@ "," class max_Sidekiq  load_json s ","conn zRuntimeError  new emRuntimeError  new angebyscoRuntimeError  new e ","Time  now to_f  - ","Time  now to_f  to_s ","Sidekiq  RuntimeError  new edis ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","Sidekiq  death_handleRuntimeError  new s each ","Sidekiq  death_handleRuntimeError  new s ","RuntimeError  new  set_backtRuntimeError  new ace "," calleRuntimeError  new  ","RuntimeERuntimeError  new RuntimeError  new oRuntimeError  new   new ","tRuntimeError  new ansaction zRuntimeError  new emRuntimeError  new angebyRuntimeError  new ank ","tRuntimeError  new ansaction zRuntimeError  new emRuntimeError  new angebyscoRuntimeError  new e ","tRuntimeError  new ansaction zadd ","Sidekiq  default_configuRuntimeError  new ation death_handleRuntimeError  new s each ","Sidekiq  default_configuRuntimeError  new ation death_handleRuntimeError  new s ","Sidekiq  default_configuRuntimeError  new ation "]}," Sidekiq death_handlers":{"type":"method","name":"death_handlers","children":[],"call":[]}," Sidekiq Middleware Server ActiveRecordCache call":{"type":"method","name":"call","children":[],"call":[" ActiveRecord Base  cache "]}," Sidekiq Logging tid":{"type":"method","name":"tid","children":[],"call":[]}," Sidekiq CLI symbolize_keys_deep!":{"type":"method","name":"symbolize_keys_deep!","children":[],"call":[" symbolize_keys_deep! ","hash [] ","hash [] kind_of? ","hash []= ","hash delete ","k to_sym ","k respond_to? ","hash keys each ","hash keys ","hash [] is_a? "]}," Sidekiq TestingClient raw_push":{"type":"method","name":"raw_push","children":[],"call":["klass process_job ","Sidekiq  load_json ","Sidekiq  dump_json ","SecureRandom  hex ","job [] ","Sidekiq Testing  constantize ","payloads each ","Sidekiq Testing  inline? ","Queues  push ","job merge! ","Time  now to_f ","Time  now ","Sidekiq Testing  fake? ","job []= ","Object  const_get ","Sidekiq Testing  constantize  process_job ","Object  const_get  process_job ","klass process_Sidekiq  load_json  ","Sidekiq  load_json  [] ","Sidekiq  load_json  merge! ","Sidekiq  load_json  []= "]}," Sidekiq Scheduled Poller process_count":{"type":"method","name":"process_count","children":[],"call":["pcount == ","Sidekiq ProcessSet  new size ","Sidekiq ProcessSet  new ","@count_calls % == ","@count_calls % ","conn scard ","Sidekiq  redis ","Sidekiq ProcessSet  new size  == "]}," Sidekiq Processor Counter reset":{"type":"method","name":"reset","children":[],"call":["@lock synchronize "]}," Sidekiq Processor Counter incr":{"type":"method","name":"incr","children":[],"call":["@value + ","@lock synchronize ","@value +  + "]}," Sidekiq Processor Counter initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Sidekiq RedisScanner sscan":{"type":"method","name":"sscan","children":[],"call":["cursor == ","result push ","conn sscan "," loop "]}," Sidekiq Worker Setter set":{"type":"method","name":"set","children":[],"call":["@opts merge! "," at ","options delete ","@opts delete ","hash delete ","options transform_keys ","options transform_keys  delete "]}," Sidekiq Processor SharedWorkerState clear":{"type":"method","name":"clear","children":[],"call":["@worker_state clear ","@lock synchronize "]}," Sidekiq Processor SharedWorkerState size":{"type":"method","name":"size","children":[],"call":["@worker_state size ","@lock synchronize "]}," Sidekiq Processor SharedWorkerState dup":{"type":"method","name":"dup","children":[],"call":["@worker_state dup ","@lock synchronize "]}," Sidekiq Processor SharedWorkerState delete":{"type":"method","name":"delete","children":[],"call":["@worker_state delete ","@lock synchronize "]}," Sidekiq Processor SharedWorkerState set":{"type":"method","name":"set","children":[],"call":["@worker_state []= ","@lock synchronize "]}," Sidekiq Processor SharedWorkerState initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Sidekiq JobRetry exception_message":{"type":"method","name":"exception_message","children":[],"call":["!!! ERROR MESSAGE THREW AN ERROR !!! dup ","exception message to_s [] ","exception message to_s ","exception message ","!!! ERROR MESSAGE THREW AN ERROR !!! +@ "]}," Ctl Status stats":{"type":"method","name":"stats","children":[],"call":["Sidekiq Stats  new "]}," Ctl Status process_set":{"type":"method","name":"process_set","children":[],"call":["Sidekiq ProcessSet  new "]}," Ctl Status queue_data":{"type":"method","name":"queue_data","children":[],"call":["QUEUE_STRUCT  new "," sprintf ","q latency ","q size to_s ","q size ","q name ","Sidekiq Queue  all map ","Sidekiq Queue  all "]}," Ctl Status time_ago":{"type":"method","name":"time_ago","children":[],"call":["seconds floor / / ","seconds floor / ","seconds floor ","seconds < ","Time  now - ","Time  at ","Time  now ","Time  now -  floor / / ","Time  now -  floor / ","Time  now -  floor ","Time  now -  < "]}," Ctl Status tags_for":{"type":"method","name":"tags_for","children":[],"call":["tags join ","tags any? ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten ","process [] == ","process [] ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact  join ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact  any? "]}," Ctl Status split_multiline":{"type":"method","name":"split_multiline","children":[],"call":["out join ","out << ","line [] ","line << ","value + ","  * ","(send\n  (send\n    (lvar :line) :length) :+\n  (send\n    (lvar :value) :length)) > ","line length + ","value length ","line length ","values each ","80 - ","opts [] ","  *  [] ","  *  << ","(send\n  (send\n    (lvar :  * ) :length) :+\n  (send\n    (lvar :value) :length)) > ","  *  length + ","  *  length "]}," Ctl Status delimit":{"type":"method","name":"delimit","children":[],"call":["number to_s reverse scan join reverse ","number to_s reverse scan join ","number to_s reverse scan ","number to_s reverse ","number to_s "]}," Ctl Status queues":{"type":"method","name":"queues","children":[],"call":[" puts "," print ","q send public_send ","q send ","columns each "," queue_data each "," queue_data ","col to_s upcase public_send ","col to_s upcase ","col to_s ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map max + ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map max ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map ","(str \"latency\") + "," queue_data map ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map max + ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map max ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map ","(str \"size\") + ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map max + ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map max ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map ","(str \"name\") + "," queue_data size "]}," Ctl Status processes":{"type":"method","name":"processes","children":[],"call":[" puts ","(send\n  (lvar :index) :+\n  (int 1)) == "," process_set size "," process_set ","index + "," split_multiline ","process [] sort ","process [] "," time_ago ","Time  at "," tags_for "," process_set each_with_index "]}," Ctl Status overview":{"type":"method","name":"overview","children":[],"call":[" puts "," delimit "," stats dead_size "," stats "," stats scheduled_size "," stats retry_size "," stats enqueued "," stats workers_size "," stats failed "," stats processed "]}," Ctl Status version":{"type":"method","name":"version","children":[],"call":[" puts ","Time  now "]}," Ctl Status all":{"type":"method","name":"all","children":[],"call":[" queues "," puts "," processes "," overview "," version "]}," Ctl Status display":{"type":"method","name":"display","children":[],"call":[" puts "," send ","VALID_SECTIONS  join ","VALID_SECTIONS  include? "]}," Ctl stop":{"type":"method","name":"stop","children":[],"call":[" done ","FileUtils  rm_f "," pidfile "," pid "," sleep ","Process  kill "," kill_timeout times "," kill_timeout "]}," Ctl quiet":{"type":"method","name":"quiet","children":[],"call":[" pid "]}," Ctl pid":{"type":"method","name":"pid","children":[],"call":["File  read to_i ","File  read "," pidfile "]}," Ctl exit_signal":{"type":"method","name":"exit_signal","children":[],"call":["error == "]}," Ctl done":{"type":"method","name":"done","children":[],"call":[" exit "," exit_signal "," puts "]}," Ctl fetch_process":{"type":"method","name":"fetch_process","children":[],"call":[" pid "," done ","Process  kill "]}," Ctl initialize":{"type":"method","name":"initialize","children":[],"call":[" done "," send "," fetch_process "," pid == "," pid ","File  exist? ! ","File  exist? ","pidfile ! "]}," Ctl print_usage":{"type":"method","name":"print_usage","children":[],"call":[]}," Sidekiq CLI launch":{"type":"method","name":"launch","children":[],"call":[" exit "," logger info "," logger "," launcher stop "," launcher "," handle_signal ","readable_io first [] gets strip ","readable_io first [] gets ","readable_io first [] ","readable_io first ","IO  select "," launcher run ","Sidekiq Launcher  new "," options "," options [] ! "," options [] ","$stdout tty? "," environment == "," environment ","readable_io gets strip ","readable_io gets ","self_read wait_readable ","self_read gets strip ","self_read gets "," handle_readable_io first [] gets strip  "," handle_readable_io gets strip  "," handle_self_read gets strip  ","IO  select  first [] gets strip ","self_read wait_readable  first [] gets strip ","IO  select  first [] gets ","self_read wait_readable  first [] gets ","IO  select  first [] ","self_read wait_readable  first [] ","IO  select  first ","self_read wait_readable  first ","IO  select  gets strip ","self_read wait_readable  gets strip ","IO  select  gets ","self_read wait_readable  gets "]}," Sidekiq RetrySet kill_all":{"type":"method","name":"kill_all","children":[],"call":[" each "," size > "," size "]}," Sidekiq log_formatter=":{"type":"method","name":"log_formatter=","children":[],"call":[]}," Sidekiq log_formatter":{"type":"method","name":"log_formatter","children":[],"call":[]}," Sidekiq Worker Options ClassMethods sidekiq_class_attribute":{"type":"method","name":"sidekiq_class_attribute","children":[],"call":[" attr_writer "," undef_method "," private_method_defined? "," method_defined? "," class public_send "," class "," instance_variable_get "," instance_variable_defined? "," define_method "," singleton_class send "," singleton_class "," class_eval "," singleton_class? ","ACCESSOR_MUTEX  synchronize "," singleton_class class_eval "," define_singleton_method "," singleton_class instance_eval "," send "," private ","attrs each "]}," Sidekiq Worker Options ClassMethods get_sidekiq_options":{"type":"method","name":"get_sidekiq_options","children":[],"call":["Sidekiq  default_worker_options "," sidekiq_options_hash ","Sidekiq  default_job_options "]}," Sidekiq Worker Options ClassMethods sidekiq_retries_exhausted":{"type":"method","name":"sidekiq_retries_exhausted","children":[],"call":[" sidekiq_retries_exhausted_block= "]}," Sidekiq Worker Options ClassMethods sidekiq_retry_in":{"type":"method","name":"sidekiq_retry_in","children":[],"call":[" sidekiq_retry_in_block= "]}," Sidekiq Worker Options ClassMethods sidekiq_options":{"type":"method","name":"sidekiq_options","children":[],"call":[" sidekiq_options_hash= "," get_sidekiq_options merge ","Hash  [] ","k to_s ","opts map "," get_sidekiq_options ","opts transform_keys ","Hash  []  map ","opts transform_keys  map ","Hash  []  transform_keys ","opts transform_keys  transform_keys "]}," Sidekiq Worker Options included":{"type":"method","name":"included","children":[],"call":[]}," Sidekiq Util tid":{"type":"method","name":"tid","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Thread) :current) :object_id) :^\n  (send\n    (const\n      (cbase) :Process) :pid)) to_s ","Thread  current object_id ^ "," Process  pid ","Thread  current object_id ","Thread  current ","Thread  current [] "]}," Monitor Status stats":{"type":"method","name":"stats","children":[],"call":["Sidekiq Stats  new "]}," Monitor Status process_set":{"type":"method","name":"process_set","children":[],"call":["Sidekiq ProcessSet  new "]}," Monitor Status queue_data":{"type":"method","name":"queue_data","children":[],"call":["QUEUE_STRUCT  new "," sprintf ","q latency ","q size to_s ","q size ","q name ","Sidekiq Queue  all map ","Sidekiq Queue  all "]}," Monitor Status time_ago":{"type":"method","name":"time_ago","children":[],"call":["seconds floor / / ","seconds floor / ","seconds floor ","seconds < ","Time  now - ","Time  at ","Time  now ","Time  now -  floor / / ","Time  now -  floor / ","Time  now -  floor ","Time  now -  < "]}," Monitor Status tags_for":{"type":"method","name":"tags_for","children":[],"call":["tags join ","tags any? ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten ","process [] == ","process [] ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact  join ","(send\n  (lvar :process) :[]\n  (str \"tag\")) flatten compact  any? "]}," Monitor Status split_multiline":{"type":"method","name":"split_multiline","children":[],"call":["out join ","out << ","line [] ","line << ","value + ","  * ","(send\n  (send\n    (lvar :line) :length) :+\n  (send\n    (lvar :value) :length)) > ","line length + ","value length ","line length ","values each ","80 - ","opts [] ","  *  [] ","  *  << ","(send\n  (send\n    (lvar :  * ) :length) :+\n  (send\n    (lvar :value) :length)) > ","  *  length + ","  *  length "]}," Monitor Status delimit":{"type":"method","name":"delimit","children":[],"call":["number to_s reverse scan join reverse ","number to_s reverse scan join ","number to_s reverse scan ","number to_s reverse ","number to_s "]}," Monitor Status queues":{"type":"method","name":"queues","children":[],"call":[" puts "," print ","q send public_send ","q send ","columns each "," queue_data each "," queue_data ","col to_s upcase public_send ","col to_s upcase ","col to_s ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map max + ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map max ","(send\n  (array\n    (str \"latency\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :latency)))) map ","(str \"latency\") + "," queue_data map ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map max + ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map max ","(send\n  (array\n    (str \"size\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :size)))) map ","(str \"size\") + ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map max + ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map max ","(send\n  (array\n    (str \"name\")) :+\n  (send\n    (send nil :queue_data) :map\n    (block-pass\n      (sym :name)))) map ","(str \"name\") + "," queue_data size "]}," Monitor Status processes":{"type":"method","name":"processes","children":[],"call":[" puts ","(send\n  (lvar :index) :+\n  (int 1)) == "," process_set size "," process_set ","index + "," split_multiline ","process [] sort ","process [] "," time_ago ","Time  at "," tags_for "," process_set each_with_index ","process [] != ","queue join ","(send\n  (send\n    (lvar :process) :[]\n    (str \"weights\")) :sort_by) map ","queue [] ","process [] sort_by ","(send\n  (lvar :capsule) :map) join ","weight > ","capsule map "]}," Monitor Status overview":{"type":"method","name":"overview","children":[],"call":[" puts "," delimit "," stats dead_size "," stats "," stats scheduled_size "," stats retry_size "," stats enqueued "," stats workers_size "," stats failed "," stats processed "]}," Monitor Status version":{"type":"method","name":"version","children":[],"call":[" puts ","Time  now ","Time  now utc "]}," Monitor Status all":{"type":"method","name":"all","children":[],"call":[" queues "," puts "," processes "," overview "," version "]}," Monitor Status display":{"type":"method","name":"display","children":[],"call":[" puts "," send ","VALID_SECTIONS  join ","VALID_SECTIONS  include? "," abort "]}," Monitor print_usage":{"type":"method","name":"print_usage","children":[],"call":[]}," Sidekiq Logger Formatters JSON call":{"type":"method","name":"call","children":[],"call":["Sidekiq  dump_json << ","Sidekiq  dump_json ","hash []= ","c empty? "," ctx "," tid "," Process  pid ","time utc iso8601 ","time utc "," ctx  empty? ","  ctx tx "," Pro ctx ess  pid ","time ut ctx  iso8601 ","time ut ctx  "]}," Sidekiq Logger Formatters WithoutTimestamp call":{"type":"method","name":"call","children":[],"call":[" format_context "," tid "," Process  pid "]}," Sidekiq Logger Formatters Pretty call":{"type":"method","name":"call","children":[],"call":[" format_context "," tid "," Process  pid ","time utc iso8601 ","time utc "]}," Sidekiq Logger Formatters Base format_context":{"type":"method","name":"format_context","children":[],"call":["  + ","(send\n  (send\n    (send nil :ctx) :compact) :map) join "," ctx compact map "," ctx compact "," ctx "," ctx any? ","v join "]}," Sidekiq Logger Formatters Base ctx":{"type":"method","name":"ctx","children":[],"call":["Thread  current [] ","Thread  current ","Sidekiq Context  current "]}," Sidekiq Logger Formatters Base tid":{"type":"method","name":"tid","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Thread) :current) :object_id) :^\n  (send\n    (const\n      (cbase) :Process) :pid)) to_s ","Thread  current object_id ^ "," Process  pid ","Thread  current object_id ","Thread  current ","Thread  current [] "]}," Sidekiq Logger ctx":{"type":"method","name":"ctx","children":[],"call":["Thread  current [] ","Thread  current "]}," Sidekiq Logger with_context":{"type":"method","name":"with_context","children":[],"call":[" ctx delete "," ctx ","hash keys each ","hash keys "," ctx merge! "]}," Sidekiq Logger initialize":{"type":"method","name":"initialize","children":[],"call":[" formatter= ","Sidekiq  log_formatter "]}," Sidekiq JobLogger elapsed_time_context":{"type":"method","name":"elapsed_time_context","children":[],"call":[" elapsed to_s "," elapsed "]}," Sidekiq JobLogger with_elapsed_time_context":{"type":"method","name":"with_elapsed_time_context","children":[],"call":["@logger with_context "," elapsed_time_context ","Sidekiq Context  with "]}," Sidekiq JobLogger job_hash_context":{"type":"method","name":"job_hash_context","children":[],"call":["h []= ","job_hash [] "]}," Sidekiq JobLogger with_job_hash_context":{"type":"method","name":"with_job_hash_context","children":[],"call":["@logger with_context "," job_hash_context "]}," Sidekiq JobLogger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq CLI reset":{"type":"method","name":"reset","children":[],"call":[]}," Sidekiq CLI b":{"type":"method","name":"b","children":[],"call":[]}," Sidekiq CLI r":{"type":"method","name":"r","children":[],"call":[]}," Sidekiq CLI w":{"type":"method","name":"w","children":[],"call":[]}," Sidekiq WebHelpers to_query_string":{"type":"method","name":"to_query_string","children":[],"call":["(send\n  (lvar :params) :map) compact join ","(send\n  (lvar :params) :map) compact ","CGI  escape ","value to_s ","SAFE_QPARAMS  include? ","params map "]}," Sidekiq WebHelpers sort_direction_label":{"type":"method","name":"sort_direction_label","children":[],"call":[" params [] == "," params [] "," params "]}," Sidekiq WebHelpers display_tags":{"type":"method","name":"display_tags","children":[],"call":["(send\n  (send\n    (lvar :job) :tags) :map) join "," Rack Utils  escape_html ","job tags map ","job tags "," filter_link "]}," Sidekiq TestingExtensions jobs_for":{"type":"method","name":"jobs_for","children":[],"call":["YAML  load [] == ","YAML  load [] ","YAML  load ","marshalled index ","klass to_s ","job [] [] ","job [] "," jobs select "," jobs ","YAML  safe_load [] == ","YAML  safe_load [] ","YAML  safe_load ","job [] []  index "]}," Sidekiq Processor json_clone":{"type":"method","name":"json_clone","children":[],"call":["obj dup ","duped []= "," json_clone ","duped each_pair ","Hash  === ","obj each_with_index ","Array  new ","obj size ","Array  === ","String  === ","NilClass  === ","FalseClass  === ","TrueClass  === ","Float  === ","Integer  === ","obj dup  []= ","Array  new  []= ","obj dup  each_pair ","Array  new  each_pair "]}," Sidekiq Middleware Chain empty?":{"type":"method","name":"empty?","children":[],"call":["@entries empty? ","@entries nil? "]}," Sidekiq Middleware Chain entries":{"type":"method","name":"entries","children":[],"call":[]}," Sidekiq LoggingUtils add":{"type":"method","name":"add","children":[],"call":["@logdev write "," format_message ","Time  now "," format_severity "," block_given? ","message nil? ","severity < "," level ","@logdev nil? "]}," Sidekiq LoggingUtils log_at":{"type":"method","name":"log_at","children":[],"call":[" local_level= "," local_level "]}," Sidekiq LoggingUtils level":{"type":"method","name":"level","children":[],"call":[" local_level "]}," Sidekiq LoggingUtils local_level=":{"type":"method","name":"local_level=","children":[],"call":[" raise ","level inspect ","Thread  current []= ","Thread  current ","LEVELS  [] ","level to_s "]}," Sidekiq LoggingUtils local_level":{"type":"method","name":"local_level","children":[],"call":["Thread  current [] ","Thread  current "]}," Sidekiq LoggingUtils fatal?":{"type":"method","name":"fatal?","children":[],"call":[" level >= "," level "," level <= "]}," Sidekiq LoggingUtils error?":{"type":"method","name":"error?","children":[],"call":[" level >= "," level "," level <= "]}," Sidekiq LoggingUtils warn?":{"type":"method","name":"warn?","children":[],"call":[" level >= "," level "," level <= "]}," Sidekiq LoggingUtils info?":{"type":"method","name":"info?","children":[],"call":[" level >= "," level "," level <= "]}," Sidekiq LoggingUtils debug?":{"type":"method","name":"debug?","children":[],"call":[" level >= "," level "," level <= "]}," Sidekiq Context current":{"type":"method","name":"current","children":[],"call":[]}," Sidekiq Context with":{"type":"method","name":"with","children":[],"call":[]}," Sidekiq JobRetry compress_backtrace":{"type":"method","name":"compress_backtrace","children":[],"call":["Base64  encode64 ","Zlib Deflate  deflate ","Marshal  dump ","Sidekiq  dump_json "]}," Sidekiq JobLogger prepare":{"type":"method","name":"prepare","children":[],"call":["Sidekiq Context  with "," job_hash_context ","@logger log_at ","job_hash [] ","Thread  current []= ","Thread  current ","h []= ","job_hash has_key? ","@logger respond_to? "]}," Sidekiq CLI option_parser":{"type":"method","name":"option_parser","children":[],"call":[" die "," logger info "," logger ","parser on_tail ","parser banner= "," puts ","o on ","opts []= "," Integer "," parse_queue ","arg split ","OptionParser  new ","opts [] << ","opts [] "]}," Sidekiq SortedSet scan":{"type":"method","name":"scan","children":[],"call":["SortedEntry  new ","conn zscan_each "," name ","Sidekiq  redis ","match include? "," to_enum "," block_given? ","conn zscan "]}," Sidekiq Job uncompress_backtrace":{"type":"method","name":"uncompress_backtrace","children":[],"call":["Marshal  load ","Zlib Inflate  inflate ","Base64  decode64 ","backtrace is_a? ","Sidekiq  load_json "]}," Sidekiq Job error_backtrace":{"type":"method","name":"error_backtrace","children":[],"call":[" uncompress_backtrace "," [] "]}," Sidekiq Job tags":{"type":"method","name":"tags","children":[],"call":[" [] "]}," Sidekiq Generators WorkerGenerator test_framework":{"type":"method","name":"test_framework","children":[],"call":[" Rails  application config generators options [] [] "," Rails  application config generators options [] "," Rails  application config generators options "," Rails  application config generators "," Rails  application config "," Rails  application "]}," Sidekiq Generators WorkerGenerator file_name":{"type":"method","name":"file_name","children":[],"call":[" sub "]}," Sidekiq pro?":{"type":"method","name":"pro?","children":[],"call":[]}," Sidekiq CLI rails_app?":{"type":"method","name":"rails_app?","children":[],"call":[" Rails  respond_to? "]}," Sidekiq start_watchdog":{"type":"method","name":"start_watchdog","children":[],"call":[]}," Sidekiq SdNotify notify":{"type":"method","name":"notify","children":[],"call":[]}," Sidekiq SdNotify watchdog?":{"type":"method","name":"watchdog?","children":[],"call":[]}," Sidekiq SdNotify fdstore":{"type":"method","name":"fdstore","children":[],"call":[]}," Sidekiq SdNotify watchdog":{"type":"method","name":"watchdog","children":[],"call":[]}," Sidekiq SdNotify mainpid":{"type":"method","name":"mainpid","children":[],"call":[]}," Sidekiq SdNotify errno":{"type":"method","name":"errno","children":[],"call":[]}," Sidekiq SdNotify status":{"type":"method","name":"status","children":[],"call":[]}," Sidekiq SdNotify stopping":{"type":"method","name":"stopping","children":[],"call":[]}," Sidekiq SdNotify reloading":{"type":"method","name":"reloading","children":[],"call":[]}," Sidekiq SdNotify ready":{"type":"method","name":"ready","children":[],"call":[]}," Sidekiq Launcher flush_stats":{"type":"method","name":"flush_stats","children":[],"call":["Sidekiq  logger warn ","Sidekiq  logger ","pipeline expire ","pipeline incrby ","conn pipelined ","Sidekiq  redis ","Time  now utc strftime ","Time  now utc ","Time  now ","fails + == ","fails + ","Processor PROCESSED  reset ","Processor FAILURE  reset "," logger warn "," logger "," redis ","Processor FAILURE  reset  + == ","Processor FAILURE  reset  + "]}," Sidekiq Web CsrfProtection xor_byte_strings":{"type":"method","name":"xor_byte_strings","children":[],"call":["(send\n  (send\n    (send\n      (lvar :s1) :bytes) :zip\n    (send\n      (lvar :s2) :bytes)) :map) pack ","c1 ^ ","s1 bytes zip map ","s1 bytes zip ","s2 bytes ","s1 bytes "]}," Sidekiq Web CsrfProtection decode_token":{"type":"method","name":"decode_token","children":[],"call":["Base64  strict_decode64 ","Base64  urlsafe_decode64 "]}," Sidekiq Web CsrfProtection compare_with_real_token":{"type":"method","name":"compare_with_real_token","children":[],"call":["Rack Utils  secure_compare "," decode_token to_s "," decode_token ","token to_s "," Rack Utils  secure_compare "]}," Sidekiq Web CsrfProtection masked_token?":{"type":"method","name":"masked_token?","children":[],"call":["token length == ","TOKEN_LENGTH  * ","token length "]}," Sidekiq Web CsrfProtection unmasked_token?":{"type":"method","name":"unmasked_token?","children":[],"call":["token length == ","token length "]}," Sidekiq Web CsrfProtection unmask_token":{"type":"method","name":"unmask_token","children":[],"call":[" xor_byte_strings ","masked_token [] ","masked_token length / ","masked_token length "]}," Sidekiq Web CsrfProtection mask_token":{"type":"method","name":"mask_token","children":[],"call":["Base64  strict_encode64 ","one_time_pad + "," xor_byte_strings ","SecureRandom  random_bytes ","token length "," decode_token ","Base64  urlsafe_encode64 ","SecureRandom  random_bytes  + "," decode_token  length "," decode_ decode_token  "]}," Sidekiq Web CsrfProtection valid_token?":{"type":"method","name":"valid_token?","children":[],"call":[" compare_with_real_token "," unmask_token "," masked_token? "," unmasked_token? ","sess []= ","SecureRandom  base64 ","sess [] "," session "," decode_token ","giventoken empty? ","giventoken nil? ","sess empty? ","localtoken nil? "," compare_with_real_ decode_token  "," unmask_ decode_token  "," masked_ decode_token ? ","  unmask_token _token? "," unmasked_ decode_token ? "," session  []= "," session  [] ","  session ion "," decode_ decode_token  ","given decode_token  empty? ","given decode_token  nil? "," session  empty? ","sess []  nil? ","local decode_token  nil? "]}," Sidekiq Web CsrfProtection accept?":{"type":"method","name":"accept?","children":[],"call":[" valid_token? ","Rack Request  new params [] ","Rack Request  new params ","Rack Request  new "," safe? "," Rack Request  new params [] "," Rack Request  new params "," Rack Request  new "]}," Sidekiq Web CsrfProtection session":{"type":"method","name":"session","children":[],"call":[" fail "," class ","env [] "]}," Sidekiq Web CsrfProtection deny":{"type":"method","name":"deny","children":[],"call":[" logger warn "," class "," logger "]}," Sidekiq Web CsrfProtection logger":{"type":"method","name":"logger","children":[],"call":[" Logger  new ","env [] "]}," Sidekiq Web CsrfProtection safe?":{"type":"method","name":"safe?","children":[],"call":["(str \"GET\") include? ","env [] "]}," Sidekiq Web CsrfProtection admit":{"type":"method","name":"admit","children":[],"call":["@app call ","env []= "," mask_token ","s [] ","SecureRandom  base64 "," session "," ma session k_token "," session  [] ","SecureRandom  ba session e64 ","  session e session  session ion "]}," Sidekiq Web CsrfProtection call":{"type":"method","name":"call","children":[],"call":[" deny "," admit "," accept? "]}," Sidekiq Web CsrfProtection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Client validate":{"type":"method","name":"validate","children":[],"call":[" raise ","item [] is_a? ! ","item [] is_a? ","item [] ","item key? ","item is_a? "]}," Sidekiq CLI boot_application":{"type":"method","name":"boot_application","children":[],"call":[" require "," options [] "," options "," default_tag ","File  expand_path "," raise "," Rails VERSION MAJOR  < ","File  directory? ","ENV  []= "," environment ","@config [] "," warn "]}," Sidekiq WebHelpers format_memory":{"type":"method","name":"format_memory","children":[],"call":[" number_with_delimiter ","(send\n  (lvar :rss_kb) :/\n  (float 1024.0)) to_i ","rss_kb / ","rss_kb < ","rss_kb == ","rss_kb nil? ","(send\n  (lvar :rss_kb) :/\n  (begin\n    (send\n      (float 1024.0) :*\n      (float 1024.0)))) round ","1024.0 * "]}," Sidekiq Launcher memory_usage":{"type":"method","name":"memory_usage","children":[],"call":["MEMORY_GRABBER  call "]}," Sidekiq Web sessions=":{"type":"method","name":"sessions=","children":[],"call":[" puts "," caller [] first "," caller [] "," caller "," caller first "]}," Sidekiq Web session_secret=":{"type":"method","name":"session_secret=","children":[],"call":[" puts "," caller first "," caller "]}," Sidekiq WebRouter head":{"type":"method","name":"head","children":[],"call":[" route "]}," Sidekiq WebHelpers singularize":{"type":"method","name":"singularize","children":[],"call":["str singularize ","str respond_to? ","count == "]}," Sidekiq Launcher check_rtt":{"type":"method","name":"check_rtt","children":[],"call":["Sidekiq  logger warn ","Sidekiq  logger ","rtt > ","b - "," Process  clock_gettime ","x ping ","Sidekiq  redis ","RTT_READINGS  reset ","RTT_READINGS  buffer inspect ","RTT_READINGS  buffer ","x > ","RTT_READINGS  all? ","RTT_READINGS  << "," logger warn "," logger "," redis ","Sidekiq  logger w Process  clock_gettime rn ","b -  > "," Process  clock_gettime  - ","RTT_READINGS   Process  clock_gettime uffer inspect ","RTT_READINGS   Process  clock_gettime uffer ","RTT_READINGS   Process  clock_gettime ll? "," logger w Process  clock_gettime rn "]}," Sidekiq ProcessSet total_rss":{"type":"method","name":"total_rss","children":[],"call":["x [] "," sum "]}," Sidekiq ProcessSet total_concurrency":{"type":"method","name":"total_concurrency","children":[],"call":["x [] "," sum ","x [] to_i "]}," Sidekiq RingBuffer reset":{"type":"method","name":"reset","children":[],"call":["@buf fill "]}," Sidekiq RingBuffer buffer":{"type":"method","name":"buffer","children":[],"call":[]}," Sidekiq RingBuffer <<":{"type":"method","name":"<<","children":[],"call":["@buf []= ","@index % "]}," Sidekiq RingBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Sidekiq WorkSet size":{"type":"method","name":"size","children":[],"call":["(send\n  (lvar :conn) :pipelined) sum ","conn hget ","procs each ","conn pipelined ","procs empty? ","conn sscan_each to_a ","conn sscan_each ","Sidekiq  redis ","pipeline hget ","conn sscan to_a ","conn sscan ","conn sscan_each to_a  each ","conn sscan to_a  each ","conn sscan_each to_a  empty? ","conn sscan to_a  empty? "]}," Sidekiq WorkSet each":{"type":"method","name":"each","children":[],"call":["(send\n  (lvar :results) :sort_by) each ","hsh [] ","results sort_by ","results << ","hsh []= ","Sidekiq  load_json ","p is_a? ","workers each_pair ","conn hgetall ","conn exists? ","conn pipelined ","procs sort each ","procs sort ","conn sscan_each to_a ","conn sscan_each ","Sidekiq  redis ","pipeline hgetall ","pipeline exists? ","json empty? ","procs zip each ","procs zip ","procs each ","conn sscan_each to_a sort ","conn sscan to_a sort ","conn sscan to_a ","conn sscan ","valid > ","pipeline exists ","Sidekiq  load_json  [] ","Sidekiq  load_json  []= ","hsh []  is_a? ","workers each_hsh [] air ","conn hsh [] ihsh [] elined ","hsh [] rocs sort each ","conn sscan_each to_a  sort each ","conn sscan_each to_a sort  sort each ","conn sscan to_a sort  sort each ","conn sscan to_a  sort each ","hsh [] rocs sort ","conn sscan_each to_a  sort ","conn sscan_each to_a sort  sort ","conn sscan to_a sort  sort ","conn sscan to_a  sort ","hsh [] ihsh [] eline hgetall ","hsh [] ihsh [] eline exists? ","json emhsh [] ty? ","hsh [] rocs zihsh []  each ","conn sscan_each to_a  zip each ","conn sscan_each to_a sort  zip each ","conn sscan to_a sort  zip each ","conn sscan to_a  zip each ","hsh [] rocs zihsh []  ","conn sscan_each to_a  zip ","conn sscan_each to_a sort  zip ","conn sscan to_a sort  zip ","conn sscan to_a  zip ","hsh [] rocs each ","conn sscan_each to_a  each ","conn sscan_each to_a sort  each ","conn sscan to_a sort  each ","conn sscan to_a  each ","hsh [] ihsh [] eline exists "]}," Sidekiq Process queues":{"type":"method","name":"queues","children":[],"call":[" [] "]}," Sidekiq ProcessSet total_rss_in_kb":{"type":"method","name":"total_rss_in_kb","children":[],"call":["x [] to_i ","x [] "," sum "]}," Sidekiq JobRecord uncompress_backtrace":{"type":"method","name":"uncompress_backtrace","children":[],"call":["Marshal  load ","Sidekiq  load_json ","Zlib Inflate  inflate ","Base64  decode64 ","backtrace is_a? "]}," Sidekiq JobRecord safe_load":{"type":"method","name":"safe_load","children":[],"call":["Sidekiq  logger warn ","ex message ","Sidekiq  logger ","Sidekiq  options [] == ","Sidekiq  options [] ","Sidekiq  options ","YAML  load ","Sidekiq  config [] == ","Sidekiq  config [] ","Sidekiq  config "]}," Sidekiq JobRecord []":{"type":"method","name":"[]","children":[],"call":["@item [] "]}," Sidekiq JobRecord delete":{"type":"method","name":"delete","children":[],"call":["count != ","conn lrem ","Sidekiq  redis "]}," Sidekiq JobRecord latency":{"type":"method","name":"latency","children":[],"call":["now - ","@item [] ","Time  now to_f ","Time  now ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Sidekiq JobRecord error_backtrace":{"type":"method","name":"error_backtrace","children":[],"call":[" uncompress_backtrace "," [] "]}," Sidekiq JobRecord tags":{"type":"method","name":"tags","children":[],"call":[" [] "]}," Sidekiq JobRecord created_at":{"type":"method","name":"created_at","children":[],"call":["Time  at utc ","Time  at "," [] "]}," Sidekiq JobRecord enqueued_at":{"type":"method","name":"enqueued_at","children":[],"call":["Time  at utc ","Time  at "," [] "]}," Sidekiq JobRecord jid":{"type":"method","name":"jid","children":[],"call":[" [] "]}," Sidekiq JobRecord args":{"type":"method","name":"args","children":[],"call":["@item [] "]}," Sidekiq JobRecord display_args":{"type":"method","name":"display_args","children":[],"call":[" args "," args []= "," [] ","job_args drop first [] ","job_args drop first ","job_args drop ","(or\n  (send\n    (self) :[]\n    (str \"wrapped\"))\n  (send\n    (send nil :args) :[]\n    (int 0))) == "," args [] "," args [] [] "," safe_load "," klass ","kwarg empty? ","kwarg ! "," klass == ","job_args drop first values_at "," deserialize_argument "," args [] []  drop first [] "," deserialize_argument  drop first [] "," args [] []  drop first "," deserialize_argument  drop first "," args [] []  drop "," deserialize_argument  drop "," args [] []  drop first values_at "," deserialize_argument  drop first values_at "]}," Sidekiq JobRecord display_class":{"type":"method","name":"display_class","children":[],"call":[" klass "," args [] [] [] join "," args [] [] [] "," args [] [] "," args [] "," args ","job_class == ","@item [] "," safe_load "," [] "," klass == "]}," Sidekiq JobRecord klass":{"type":"method","name":"klass","children":[],"call":[" [] "]}," Sidekiq JobRecord parse":{"type":"method","name":"parse","children":[],"call":["Sidekiq  load_json "]}," Sidekiq JobRecord initialize":{"type":"method","name":"initialize","children":[],"call":["@item [] "," parse ","item is_a? "," parse  [] "]}," Sidekiq Stats fetch_stats_slow!":{"type":"method","name":"fetch_stats_slow!","children":[],"call":["@stats []= ","pipe2_res [] sum ","pipe2_res [] ","processes size ","conn llen ","queues each ","conn hget ","processes each ","conn pipelined ","Sidekiq  redis ","conn sscan_each to_a ","conn sscan_each ","pipeline llen ","pipeline hget ","conn sscan to_a ","conn sscan ","@processes size tatprocesses size  []= ","pipe2_reprocesses size  [] processes size um ","pipe2_reprocesses size  [] ","proceprocesses size processes size eprocesses size  processes size ize ","queueprocesses size  each ","proceprocesses size processes size eprocesses size  each ","Sidekiq  rediprocesses size  ","conn processes size processes size can_each to_a ","conn processes size processes size can_each ","conn processes size processes size can to_a ","conn processes size processes size can "]}," Sidekiq Stats fetch_stats_fast!":{"type":"method","name":"fetch_stats_fast!","children":[],"call":["pipe1_res [] ","pipe1_res [] to_i ","now - ","job [] ","Time  now to_f ","Time  now ","Sidekiq  load_json ","pipe1_res [] first ","conn lrange ","conn scard ","conn zcard ","conn get ","conn pipelined ","Sidekiq  redis ","pipeline lrange ","pipeline scard ","pipeline zcard ","pipeline get ","pipeline lindex ","Time  now to_f  - ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Sidekiq Worker ClassMethods perform_bulk":{"type":"method","name":"perform_bulk","children":[],"call":["Sidekiq Client  push_bulk ","items each_slice flat_map ","items each_slice ","result force ","result is_a? ","Setter  new perform_bulk ","Setter  new "]}," Sidekiq Worker ClassMethods queue_as":{"type":"method","name":"queue_as","children":[],"call":[" sidekiq_options ","q to_s "]}," Sidekiq Worker Setter at":{"type":"method","name":"at","children":[],"call":["@opts []= ","ts > ","now + ","int < ","Time  now to_f ","Time  now ","interval to_f ","Time  now to_f  + ","interval to_f  < ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","interval to_f erval to_f "]}," Sidekiq Worker Setter perform_bulk":{"type":"method","name":"perform_bulk","children":[],"call":["Sidekiq Client  push_bulk ","@opts merge ","args each_slice flat_map ","args each_slice ","result force ","result is_a? ","hash merge ","@opts transform_keys ","client push_bulk ","Sidekiq Client  new ","Sidekiq  redis_pool ","@klass get_sidekiq_options [] ","@klass get_sidekiq_options ","Thread  current [] ","Thread  current ","@klass build_client ","@opts transform_keys  merge ","Sidekiq Client  new  push_bulk ","@klass build_client  push_bulk ","@klass build_Sidekiq Client  new  ","@klass build_@klass build_client  "]}," Sidekiq Scheduled Enq zpopbyscore":{"type":"method","name":"zpopbyscore","children":[],"call":[" raise ","e message start_with? ","e message ","conn evalsha ","conn script ","@lua_zpopbyscore_sha nil? ","raw_conn script ","conn redis ","conn respond_to? ","RedisConnection  adapter ","conn call ","keys size ","conn script  nil? ","raw_conn script  nil? ","conn redis  script "]}," Sidekiq Scheduled Enq initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq Client  new "]}," Sidekiq CurrentAttributes persist":{"type":"method","name":"persist","children":[],"call":["Sidekiq  default_configuration ","config server_middleware add ","config server_middleware ","config client_middleware add ","config client_middleware "," build_cattrs_hash "," build_ build_cattrs_hash _hash "]}," Sidekiq CurrentAttributes Load call":{"type":"method","name":"call","children":[],"call":["@klass set ","job [] ","job has_key? ","@strklass constantize set ","@strklass constantize ","cattrs_to_reset each ","constklass public_send ","job [] each ","cattrs_to_reset << ","strklass constantize ","@cattrs each ","strklass constantize  public_send "]}," Sidekiq CurrentAttributes Load initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq CurrentAttributes Save call":{"type":"method","name":"call","children":[],"call":["job []= ","@klass attributes ","job [] merge! ","job [] ","job has_key? ","attrs any? ","@strklass constantize attributes ","@strklass constantize ","job has_key? ! ","strklass constantize attributes ","strklass constantize ","@cattrs each ","@klass attributes  any? ","@strklass constantize attributes  any? ","strklass constantize attributes  any? ","@c@klass attributes  each ","@c@strklass constantize attributes  each ","@cstrklass constantize attributes  each "]}," Sidekiq CurrentAttributes Save initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq strict_args!":{"type":"method","name":"strict_args!","children":[],"call":[]}," Sidekiq Worker ClassMethods perform_inline":{"type":"method","name":"perform_inline","children":[],"call":["Setter  new perform_inline ","Setter  new "]}," Sidekiq Worker Setter perform_inline":{"type":"method","name":"perform_inline","children":[],"call":["job perform ","msg [] ","Sidekiq  server_middleware invoke ","Sidekiq  server_middleware ","job bid= ","job respond_to? ","job jid= ","klass new ","msg [] constantize ","Sidekiq  load_json ","Sidekiq  dump_json ","Sidekiq  client_middleware invoke ","Sidekiq  redis_pool ","item [] ","Sidekiq  client_middleware "," normalize_item ","@opts merge transform_keys ","@opts merge ","klass new  perform ","Sidekiq  load_json  [] ","klass new  bid= ","klass new  respond_to? ","klass new  jid= ","msg [] constantize  new ","Sidekiq  load_json  [] constantize "," normalize_item  [] "," normalize_ normalize_item  "]}," Sidekiq Util wait_for":{"type":"method","name":"wait_for","children":[],"call":["deadline - "," Process  clock_gettime "," sleep ","condblock call ","remaining > ","deadline -  > "]}," Sidekiq Scheduled Enq terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Sidekiq JobUtil json_safe?":{"type":"method","name":"json_safe?","children":[],"call":["JSON  parse == ","item [] ","JSON  parse ","JSON  dump ","RECURSIVE_JSON_SAFE  [] call ","RECURSIVE_JSON_SAFE  [] ","item class "]}," Sidekiq JobUtil normalized_hash":{"type":"method","name":"normalized_hash","children":[],"call":["Sidekiq  default_worker_options ","item_class get_sidekiq_options "," raise ","item_class ancestors inspect ","item_class ancestors ","item_class respond_to? ","item_class is_a? ","Sidekiq  default_job_options "]}," Sidekiq JobUtil normalize_item":{"type":"method","name":"normalize_item","children":[],"call":["Time  now to_f ","Time  now ","item [] ","SecureRandom  hex ","item []= ","item [] to_s "," raise ","item [] == ","item [] nil? ","defaults merge ","item [] get_sidekiq_options ","item [] respond_to? "," normalized_hash "," validate ","item delete ","TRANSIENT_ATTRIBUTES  each ","item [] to_i ","defaults merge  [] ","defaults merge  []= ","defaults merge  [] to_s ","defaults merge  [] == ","defaults merge  [] nil? ","defaults merge  merge "," normalized_hash  merge ","defaults merge  [] get_sidekiq_options ","defaults merge  [] respond_to? ","defaults merge  delete ","defaults merge  [] to_i "]}," Sidekiq JobUtil validate":{"type":"method","name":"validate","children":[],"call":["Sidekiq  logger warn ","item [] ","Sidekiq  logger "," json_safe? ","Sidekiq  options [] == ","Sidekiq  options [] ","Sidekiq  options "," raise ","item [] is_a? ! ","item [] is_a? ","item key? ","item is_a? ","item [] > "]}," Sidekiq Generators JobGenerator test_framework":{"type":"method","name":"test_framework","children":[],"call":[" Rails  application config generators options [] [] "," Rails  application config generators options [] "," Rails  application config generators options "," Rails  application config generators "," Rails  application config "," Rails  application "]}," Sidekiq Generators JobGenerator file_name":{"type":"method","name":"file_name","children":[],"call":[" sub "]}," Sidekiq Generators JobGenerator create_job_test":{"type":"method","name":"create_job_test","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators JobGenerator create_job_spec":{"type":"method","name":"create_job_spec","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators JobGenerator create_test_file":{"type":"method","name":"create_test_file","children":[],"call":[" create_job_test "," create_job_spec "," test_framework == "," test_framework "]}," Sidekiq Generators JobGenerator create_job_file":{"type":"method","name":"create_job_file","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," Sidekiq Generators JobGenerator default_generator_root":{"type":"method","name":"default_generator_root","children":[],"call":[]}," Sidekiq Context add":{"type":"method","name":"add","children":[],"call":[]}," Sidekiq CLI load_yaml":{"type":"method","name":"load_yaml","children":[],"call":["YAML  load ","YAML  safe_load ","Psych VERSION  > "]}," Sidekiq ent?":{"type":"method","name":"ent?","children":[],"call":[]}," Sidekiq default_job_options":{"type":"method","name":"default_job_options","children":[],"call":[]}," Sidekiq default_job_options=":{"type":"method","name":"default_job_options=","children":[],"call":[]}," Sidekiq Worker ClassMethods build_client":{"type":"method","name":"build_client","children":[],"call":["Sidekiq Client  new ","Sidekiq  redis_pool "," get_sidekiq_options [] "," get_sidekiq_options ","Thread  current [] ","Thread  current ","client_class new "]}," Sidekiq WebHelpers workset":{"type":"method","name":"workset","children":[],"call":["Sidekiq WorkSet  new "]}," Sidekiq Job drain_all":{"type":"method","name":"drain_all","children":[],"call":["Sidekiq Testing  constantize drain ","Sidekiq Testing  constantize ","job_classes each ","(send\n  (send nil :jobs) :map) uniq ","job [] "," jobs map "," jobs "," jobs any? ","Object  const_get drain ","Object  const_get ","(send\n  (send nil :jobs) :map) uniq  each "]}," Sidekiq Job clear_all":{"type":"method","name":"clear_all","children":[],"call":["Queues  clear_all "]}," Sidekiq Job jobs":{"type":"method","name":"jobs","children":[],"call":["Queues  jobs_by_queue values flatten ","Queues  jobs_by_queue values ","Queues  jobs_by_queue "]}," Sidekiq Job ClassMethods execute_job":{"type":"method","name":"execute_job","children":[],"call":["worker perform "]}," Sidekiq Job ClassMethods process_job":{"type":"method","name":"process_job","children":[],"call":[" execute_job ","job [] ","Sidekiq Testing  server_middleware invoke ","Sidekiq Testing  server_middleware ","inst bid= ","inst respond_to? ","inst jid= "," new "," new  bid= "," new  respond_to? "," new  jid= "]}," Sidekiq Job ClassMethods perform_one":{"type":"method","name":"perform_one","children":[],"call":[" process_job ","Queues  delete_for "," to_s "," queue ","next_job [] "," jobs first "," jobs "," raise "," jobs empty? "," jobs first  [] "]}," Sidekiq Job ClassMethods drain":{"type":"method","name":"drain","children":[],"call":[" process_job ","Queues  delete_for "," to_s ","next_job [] "," jobs first "," jobs "," jobs any? "," jobs first  [] "]}," Sidekiq Job ClassMethods clear":{"type":"method","name":"clear","children":[],"call":["Queues  clear_for "," to_s "," queue "]}," Sidekiq Job ClassMethods jobs":{"type":"method","name":"jobs","children":[],"call":["Queues  jobs_by_class [] "," to_s ","Queues  jobs_by_class "]}," Sidekiq Job ClassMethods queue":{"type":"method","name":"queue","children":[],"call":[" get_sidekiq_options [] "," get_sidekiq_options "]}," Sidekiq Queues jobs_by_class":{"type":"method","name":"jobs_by_class","children":[],"call":["hash []= ","Hash  new "]}," Sidekiq Processor SharedWorkState clear":{"type":"method","name":"clear","children":[],"call":["@work_state clear ","@lock synchronize "]}," Sidekiq Processor SharedWorkState size":{"type":"method","name":"size","children":[],"call":["@work_state size ","@lock synchronize "]}," Sidekiq Processor SharedWorkState dup":{"type":"method","name":"dup","children":[],"call":["@work_state dup ","@lock synchronize "]}," Sidekiq Processor SharedWorkState delete":{"type":"method","name":"delete","children":[],"call":["@work_state delete ","@lock synchronize "]}," Sidekiq Processor SharedWorkState set":{"type":"method","name":"set","children":[],"call":["@work_state []= ","@lock synchronize "]}," Sidekiq Processor SharedWorkState initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Sidekiq JobUtil verify_json":{"type":"method","name":"verify_json","children":[],"call":["Sidekiq  logger warn ","Sidekiq  logger "," json_safe? ","Sidekiq  options [] == ","Sidekiq  options [] ","Sidekiq  options "," raise ","item [] ","Sidekiq  [] == ","Sidekiq  [] "," warn ","Sidekiq Config DEFAULTS  [] == ","Sidekiq Config DEFAULTS  [] ","mode == ","unsafe_item class ","unsafe_item inspect "," json_unsafe_item "," json_unsafe? ","Sidekiq Config DEFAULTS  []  == "," json_unsafe_item  class "," json_unsafe?  class "," json_unsafe_item  inspect "," json_unsafe?  inspect "," json_ json_unsafe_item  "," json_ json_unsafe?  "]}," Sidekiq handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[]}," Sidekiq fetch":{"type":"method","name":"fetch","children":[],"call":[]}," Sidekiq merge!":{"type":"method","name":"merge!","children":[],"call":[]}," Sidekiq []=":{"type":"method","name":"[]=","children":[],"call":[]}," Sidekiq []":{"type":"method","name":"[]","children":[],"call":[]}," Sidekiq default_error_handler":{"type":"method","name":"default_error_handler","children":[],"call":[]}," Sidekiq queues=":{"type":"method","name":"queues=","children":[],"call":[]}," Sidekiq concurrency=":{"type":"method","name":"concurrency=","children":[],"call":[]}," Sidekiq transactional_push!":{"type":"method","name":"transactional_push!","children":[],"call":[]}," Sidekiq TransactionAwareClient push_bulk":{"type":"method","name":"push_bulk","children":[],"call":["@redis_client push_bulk "]}," Sidekiq TransactionAwareClient push":{"type":"method","name":"push","children":[],"call":["item [] ","@redis_client push ","AfterCommitEverywhere  after_commit ","SecureRandom  hex "]}," Sidekiq TransactionAwareClient initialize":{"type":"method","name":"initialize","children":[],"call":["Client  new "]}," Sidekiq RedisConnection adapter=":{"type":"method","name":"adapter=","children":[],"call":[" require "," raise ","adapter == "]}," Sidekiq RedisConnection RedisAdapter client_opts":{"type":"method","name":"client_opts","children":[],"call":["opts [] ","Redis Connection  drivers last ","Redis Connection  drivers ","opts delete ","opts []= ","options dup ","options dup  [] ","options dup  delete ","options dup  []= "]}," Sidekiq RedisConnection RedisAdapter new_client":{"type":"method","name":"new_client","children":[],"call":[" exit ","Sidekiq  logger error ","Sidekiq  logger ","Redis Namespace  new "," require ","Redis  new "," client_opts ","@options [] "," Redis  new _opts "]}," Sidekiq RedisConnection RedisAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" warn "," caller ","ENV  [] == ","ENV  [] "]}," Sidekiq RedisClientAdapter client_opts":{"type":"method","name":"client_opts","children":[],"call":["opts [] ","opts delete ","opts key? ","opts []= ","opts [] to_sym ","Kernel  exit ","Sidekiq  logger error ","Sidekiq  logger ","options dup "," raise ","options dup  [] ","options dup  delete ","options dup  key? ","options dup  []= ","options dup  [] to_sym "]}," Sidekiq RedisClientAdapter new_client":{"type":"method","name":"new_client","children":[],"call":["CompatClient  new ","@config new_client "]}," Sidekiq RedisClientAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["RedisClient  config ","RedisClient  sentinel ","opts key? "," client_opts "," client_opts  key? "," client_ client_opts  "]}," Sidekiq RedisClientAdapter CompatClient subscribe":{"type":"method","name":"subscribe","children":[],"call":["@queue << ","evt [] == ","evt [] ","evt nil? ","pubsub next_event "," loop ","pubsub call ","@client pubsub "," Queue  new "," Queue  new  << ","pubsub next_event  [] == ","pubsub next_event  [] ","pubsub next_event  nil? ","@client pubsub  next_event ","@client pubsub  call ","@client @client pubsub  "]}," Sidekiq RedisClientAdapter CompatClient message":{"type":"method","name":"message","children":[],"call":["@queue pop "]}," Sidekiq RedisClientAdapter CompatClient _client":{"type":"method","name":"_client","children":[],"call":[]}," Sidekiq RedisClientAdapter CompatClient redis":{"type":"method","name":"redis","children":[],"call":[]}," Sidekiq RedisClientAdapter CompatClient connection":{"type":"method","name":"connection","children":[],"call":["@client id "]}," Sidekiq RedisClientAdapter CompatClient disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@client close "]}," Sidekiq RedisClientAdapter CompatMethods respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[]}," Sidekiq RedisClientAdapter CompatMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":["@client call "," warn "," caller ","args first ","DEPRECATED_COMMANDS  include? "]}," Sidekiq RedisClientAdapter CompatMethods exists?":{"type":"method","name":"exists?","children":[],"call":["c > ","@client call "]}," Sidekiq RedisClientAdapter CompatMethods sismember":{"type":"method","name":"sismember","children":[],"call":["c > ","@client call "]}," Sidekiq RedisClientAdapter CompatMethods set":{"type":"method","name":"set","children":[],"call":["r == ","@client call "]}," Sidekiq RedisClientAdapter CompatMethods brpop":{"type":"method","name":"brpop","children":[],"call":["@client blocking_call "]}," Sidekiq RedisClientAdapter CompatMethods brpoplpush":{"type":"method","name":"brpoplpush","children":[],"call":["@client blocking_call "]}," Sidekiq RedisClientAdapter CompatMethods evalsha":{"type":"method","name":"evalsha","children":[],"call":["@client call ","keys size "]}," Sidekiq RedisClientAdapter CompatMethods info":{"type":"method","name":"info","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :i) :lines\n        (hash\n          (pair\n            (sym :chomp)\n            (true)))) :map)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :split\n      (str \":\")\n      (int 2))) :select) to_h ","l size == ","l size ","(send\n  (send\n    (lvar :i) :lines\n    (hash\n      (pair\n        (sym :chomp)\n        (true)))) :map) select ","l split ","i lines map ","i lines ","@client call "]}," Sidekiq ServerMiddleware redis":{"type":"method","name":"redis","children":[],"call":[" config redis "," config "]}," Sidekiq ServerMiddleware logger":{"type":"method","name":"logger","children":[],"call":[" config logger "," config "]}," Sidekiq ServerMiddleware redis_pool":{"type":"method","name":"redis_pool","children":[],"call":[" config redis_pool "," config "]}," Sidekiq Manager wait_for":{"type":"method","name":"wait_for","children":[],"call":["deadline - "," Process  clock_gettime "," sleep ","condblock call ","remaining > ","deadline -  > "]}," Sidekiq Manager processor_result":{"type":"method","name":"processor_result","children":[],"call":["p start ","@workers << ","Processor  new "," method ","@workers delete ","@plock synchronize ","Processor  new  start ","@Processor  new lock synchronize "]}," Sidekiq Component fire_event":{"type":"method","name":"fire_event","children":[],"call":["arr clear "," raise "," handle_exception ","block call ","arr each ","arr reverse! "," config [] [] "," config [] "," config ","options [] ","options fetch "," logger debug "," logger "," config [] []  clear "," config [] []  each "," config [] []  reverse! ","arr options [] ! "]}," Sidekiq Component handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" config handle_exception "," config "]}," Sidekiq Component identity":{"type":"method","name":"identity","children":[],"call":[" process_nonce "," Process  pid "," hostname "]}," Sidekiq Component process_nonce":{"type":"method","name":"process_nonce","children":[],"call":["SecureRandom  hex "]}," Sidekiq Component hostname":{"type":"method","name":"hostname","children":[],"call":["Socket  gethostname ","ENV  [] "]}," Sidekiq Component tid":{"type":"method","name":"tid","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Thread) :current) :object_id) :^\n  (send\n    (const\n      (cbase) :Process) :pid)) to_s ","Thread  current object_id ^ "," Process  pid ","Thread  current object_id ","Thread  current ","Thread  current [] "]}," Sidekiq Component redis":{"type":"method","name":"redis","children":[],"call":[" config redis "," config "]}," Sidekiq Component logger":{"type":"method","name":"logger","children":[],"call":[" config logger "," config "]}," Sidekiq Component safe_thread":{"type":"method","name":"safe_thread","children":[],"call":[" watchdog ","Thread  current name= ","Thread  current ","Thread  new "]}," Sidekiq Component watchdog":{"type":"method","name":"watchdog","children":[],"call":[" raise "," handle_exception "]}," Sidekiq SortedSet as_json":{"type":"method","name":"as_json","children":[],"call":[" name "]}," Sidekiq Queue as_json":{"type":"method","name":"as_json","children":[],"call":[" name "]}," Sidekiq WebHelpers sorted_processes":{"type":"method","name":"sorted_processes","children":[],"call":["a to_i ","(str \"\\\\d+\") match? ","process [] split map ","process [] split ","process [] "," processes to_a sort_by "," processes to_a "," processes ","p [] "," processes all? ","substring rjust ","substring [] match? ","substring [] ","(send\n  (send nil :processes) :flat_map) map max ","(send\n  (send nil :processes) :flat_map) map ","p [] split "," processes flat_map "]}," Sidekiq Scheduled Poller cleanup":{"type":"method","name":"cleanup","children":[],"call":["conn srem ","to_prune empty? ","heartbeats [] nil? ","heartbeats [] ","procs select with_index ","procs select ","pipeline hget ","procs each ","conn pipelined ","conn sscan_each to_a ","conn sscan_each ","Sidekiq  redis ","conn set ","conn sscan to_a ","conn sscan "," redis ","conn sscan_each to_a  select with_index ","conn sscan to_a  select with_index ","conn sscan_each to_a  select ","conn sscan to_a  select ","conn sscan_each to_a  each ","conn sscan to_a  each "]}," Sidekiq Paginator page_items":{"type":"method","name":"page_items","children":[],"call":["items [] ","items size ","items to_a ","pageidx * ","current_page - ","pageidx to_i ","pageidx to_i < ","items to_a  [] ","items to_a  size ","items to_a  to_a ","current_page -  * ","pageidx to_i  - ","current_page -  to_i ","current_page -  to_i < "]}," Sidekiq Metrics Middleware call":{"type":"method","name":"call","children":[],"call":["@exec track ","hash [] "]}," Sidekiq Metrics Middleware initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Metrics ExecutionTracker reset":{"type":"method","name":"reset","children":[],"call":["hash []= ","Histogram  new ","Hash  new ","@lock synchronize "]}," Sidekiq Metrics ExecutionTracker flush":{"type":"method","name":"flush","children":[],"call":[" logger info "," logger ","xa expire ","xa hincrby ","data each_pair ","conn pipelined ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :nowdate)\n  (const nil :LONG_TERM)) each ","gram persist ","grams each ","grams size > ","grams size "," redis ","now strftime ","time utc ","fails == ","procd == ","totals [] "," reset "," logger debug ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :nowmin)\n  (const nil :SHORT_TERM)) each ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :now strftime )\n  (const nil :LONG_TERM)) each ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :time utc date)\n  (const nil :LONG_TERM)) each ","time utc  strftime ","totals []  == ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :now strftime )\n  (const nil :SHORT_TERM)) each ","(array\n  (str \"j\")\n  (lvar :jobs)\n  (lvar :time utc min)\n  (const nil :SHORT_TERM)) each "]}," Sidekiq Metrics ExecutionTracker track":{"type":"method","name":"track","children":[],"call":["@totals [] ","@jobs [] ","@lock synchronize "," raise ","@grams [] record_time ","@grams [] ","finish - "," Process  clock_gettime "," Process  clock_gettime  - "]}," Sidekiq Metrics ExecutionTracker initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","hash []= ","Histogram  new ","Hash  new "]}," Sidekiq Metrics Histogram persist":{"type":"method","name":"persist","children":[],"call":["conn expire ","conn bitfield ","cmd size > ","cmd size ","cmd << << << << ","val to_s ","cmd << << << ","cmd << << ","cmd << ","val > ","counter value ","buckets each_with_index ","now utc strftime ","now utc ","counter value  to_s ","counter value  > ","counter counter value ue "]}," Sidekiq Metrics Histogram fetch":{"type":"method","name":"fetch","children":[],"call":["conn bitfield ","now utc strftime ","now utc ","conn bitfield_ro "]}," Sidekiq Metrics Histogram record_time":{"type":"method","name":"record_time","children":[],"call":["@buckets [] increment ","@buckets [] ","ms < ","BUCKET_INTERVALS  [] ","BUCKET_INTERVALS  each_index "]}," Sidekiq Metrics Histogram initialize":{"type":"method","name":"initialize","children":[],"call":["Counter  new ","Array  new ","BUCKET_INTERVALS  size "]}," Sidekiq Metrics Histogram label":{"type":"method","name":"label","children":[],"call":["LABELS  [] "]}," Sidekiq Metrics Histogram each":{"type":"method","name":"each","children":[],"call":["counter value "," buckets each "," buckets "]}," Sidekiq Metrics Query fetch_marks":{"type":"method","name":"fetch_marks","children":[],"call":["result << ","MarkResult  new ","time_range cover? ","Time  parse ","marks each ","c hgetall ","@time strftime ","@pool with "," tap ","Time  parse _range cover? ","@Time  parse  strfTime  parse  "]}," Sidekiq Metrics Query MarkResult bucket":{"type":"method","name":"bucket","children":[],"call":[" time strftime "," time "]}," Sidekiq Metrics Query JobResult series_avg":{"type":"method","name":"series_avg","children":[],"call":["result []= ","value to_f / ","value to_f ","completed == "," series dig - "," series dig "," series "," series [] each_with_object ","Hash  new "," series [] "," series dig -  == "]}," Sidekiq Metrics Query JobResult total_avg":{"type":"method","name":"total_avg","children":[],"call":[" totals [] to_f / "," totals [] to_f "," totals [] "," totals "," totals [] - "]}," Sidekiq Metrics Query JobResult add_hist":{"type":"method","name":"add_hist","children":[],"call":[" hist []= ","time strftime "," hist "]}," Sidekiq Metrics Query JobResult add_metric":{"type":"method","name":"add_metric","children":[],"call":[" add_metric ","value / ","metric == "," series [] [] ","time strftime "," series [] "," series "," totals [] "," totals "]}," Sidekiq Metrics Query JobResult initialize":{"type":"method","name":"initialize","children":[],"call":[" totals= ","Hash  new "," hist= ","h []= "," series= "]}," Sidekiq Metrics Query Result prepend_bucket":{"type":"method","name":"prepend_bucket","children":[],"call":[" starts_at= "," ends_at "," buckets unshift ","time strftime "," buckets "]}," Sidekiq Metrics Query Result initialize":{"type":"method","name":"initialize","children":[],"call":[" job_results= ","h []= ","JobResult  new ","Hash  new "," marks= "," buckets= "]}," Sidekiq Metrics Query for_job":{"type":"method","name":"for_job","children":[],"call":["result marks= "," fetch_marks ","result ends_at ","result starts_at ","result job_results [] add_hist ","Histogram  new fetch ","Histogram  new ","result job_results [] ","result job_results ","result job_results [] add_metric ","f to_i ","p to_i ","ms to_i ","redis_results each ","@pool with ","result prepend_bucket ","pipe hmget ","time min ","time hour ","time strftime ","minutes times ","conn pipelined ","Result  new ","resultset []= ","x []= ","marks [] ","x [] ","(pair\n  (sym :time)\n  (send\n    (lvar :tm) :iso8601)) tap ","hist fetch ","tm to_i ","tm iso8601 ","Time  utc ","time mday ","time month ","time year ","initial map ","60 times ","c hgetall ","@time strftime ","@time to_date ","Histogram  new fetch reverse ","Result  new  marks= ","Result  new  ends_at ","Result  new  starts_at ","Result  new  job_Result  new s [] add_hist ","result job_results [] add_Histogram  new  ","Result  new  job_Result  new s [] ","Result  new  job_Result  new s ","Result  new  job_Result  new s [] add_metric ","redis_Result  new s each ","Result  new  prepend_bucket ","Result  new set []= ","(pair\n  (sym :time)\n  (send\n    (lvar :Time  utc ) :iso8601)) tap ","Histogram  new  fetch ","Time  utc  to_i ","Time  utc  iso8601 "]}," Sidekiq Metrics Query top_jobs":{"type":"method","name":"top_jobs","children":[],"call":["result marks= "," fetch_marks ","result ends_at ","result starts_at ","result job_results [] add_metric ","v to_i ","result job_results [] ","result job_results ","k split ","hash each ","redis_results each ","result prepend_bucket ","pipe hgetall ","time min ","time hour ","time strftime ","minutes times ","conn pipelined ","@pool with ","Result  new ","resultset []= ","sorted []= ","(send\n  (lvar :hash) :sort_by) reverse to_h ","(send\n  (lvar :hash) :sort_by) reverse ","hash sort_by ","top each_pair ","memo [] []= ","memo [] ","Hash  new ","t each_with_object ","item size < ","item size ","klsset delete_if ","klsset merge ","k split [] ","hash keys map ","hash keys ","t []= ","t [] + ","t [] ","results each ","Set  new ","60 times ","@time to_date ","class_filter match? ! ","class_filter match? ","Result  new  marks= ","resulHash  new  marks= "," feHash  new ch_marks ","Result  new  ends_at ","resulHash  new  ends_aHash  new  ","Result  new  starts_at ","resulHash  new  sHash  new arHash  new s_aHash  new  ","Result  new  job_Result  new s [] add_metric ","resulHash  new  job_resulHash  new s [] add_meHash  new ric ","v Hash  new o_i ","Result  new  job_Result  new s [] ","resulHash  new  job_resulHash  new s [] ","Result  new  job_Result  new s ","resulHash  new  job_resulHash  new s ","k spliHash  new  ","redis_Result  new s each ","redis_resulHash  new s each ","Result  new  prepend_bucket ","resulHash  new  prepend_buckeHash  new  ","pipe hgeHash  new all ","Hash  new ime min ","Hash  new ime hour ","Hash  new ime sHash  new rfHash  new ime ","minuHash  new es Hash  new imes ","@pool wiHash  new h ","ResulHash  new   new ","Result  new set []= ","resulHash  new seHash  new  []= ","sorHash  new ed []= ","(send\n  (lvar :hash) :sorHash  new _by) reverse Hash  new o_h ","(send\n  (lvar :hash) :sorHash  new _by) reverse ","hash sorHash  new _by ","Hash  new op each_pair ","Hash  new  each_wiHash  new h_objecHash  new  ","iHash  new em size < ","iHash  new em size ","Set  new  delete_if ","klsseHash  new  deleHash  new e_if ","Set  new  merge ","klsseHash  new  merge ","k spliHash  new  [] ","Hash  new  []= ","Hash  new  [] + ","Hash  new  [] ","Result  new s each ","resulHash  new s each ","SeHash  new   new ","60 Hash  new imes ","@Hash  new ime Hash  new o_daHash  new e ","class_filHash  new er maHash  new ch? ! ","class_filHash  new er maHash  new ch? "]}," Sidekiq Metrics Query initialize":{"type":"method","name":"initialize","children":[],"call":["now utc ","Sidekiq  default_configuration redis_pool ","Sidekiq  default_configuration "]}," Sidekiq Metrics Deploy fetch":{"type":"method","name":"fetch","children":[],"call":["c hgetall ","@pool with ","date strftime "]}," Sidekiq Metrics Deploy mark":{"type":"method","name":"mark","children":[],"call":["pipe expire ","pipe hsetnx ","floor iso8601 ","c pipelined ","@pool with ","floor strftime ","Time  utc ","whence min ","whence hour ","whence mday ","whence month ","whence year ","at utc ","floor rfc3339 ","Time  utc  iso8601 ","Time  utc  strftime ","at utc  min ","at utc  hour ","at utc  mday ","at utc  month ","at utc  year ","Time  utc  rfc3339 "]}," Sidekiq Metrics Deploy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq JobRetry process_retry":{"type":"method","name":"process_retry","children":[],"call":["conn zadd ","retry_at to_s "," redis ","Sidekiq  dump_json ","Time  now to_f + + ","Time  now to_f + ","Time  now to_f ","Time  now "," rand * ","count + "," rand "," retries_exhausted "," delay_for ","count >= ","msg []= "," compress_backtrace ","exception backtrace [] ","msg [] to_i ","msg [] ","exception backtrace ","msg [] == ","exception class name ","exception class ","m scrub! ","m force_encoding ","m respond_to? "," exception_message "," retry_attempts_from ","backtrace [] ","@backtrace_cleaner call ","(send\n  (send\n    (lvar :msg) :[]\n    (str \"failed_at\")) :+\n  (lvar :rf)) < ","msg [] + ","Time  now to_f + +  to_s ","Sidekiq  du exception_message p_json ","Ti exception_message e  now to_f + + ","Ti exception_message e  now to_f + ","Ti exception_message e  now to_f ","Ti exception_message e  now "," exception_message sg []= "," co exception_message press_backtrace "," compress_@backtrace_cleaner call  ","exception @backtrace_cleaner call  [] "," exception_message sg [] to_i "," exception_message sg [] ","exception @backtrace_cleaner call  "," exception_message sg [] == ","exception class na exception_message e "," exception_message  scrub! "," exception_message  force_encoding "," exception_message  respond_to? "," exception_ exception_message essage "," Time  now to_f + + tempts_from "," retry_atte exception_message pts_fro exception_message  ","@backtrace_cleaner call  [] ","@@backtrace_cleaner call _cleaner call ","(send\n  (send\n    (lvar : exception_message sg) :[]\n    (str \"failed_at\")) :+\n  (lvar :rf)) < ","(send\n  (send\n    (lvar :msg) :[]\n    (str \"failed_at\")) :+\n  (lvar :msg [] )) < "," exception_message sg [] + "]}," Sidekiq configure_embed":{"type":"method","name":"configure_embed","children":[],"call":[]}," Sidekiq freeze!":{"type":"method","name":"freeze!","children":[],"call":[]}," Sidekiq default_configuration":{"type":"method","name":"default_configuration","children":[],"call":[]}," Sidekiq WebHelpers redis_url":{"type":"method","name":"redis_url","children":[],"call":["conn _config server_url ","conn _config ","Sidekiq  redis ","conn config server_url ","conn config "]}," Sidekiq RedisConnection scrub":{"type":"method","name":"scrub","children":[],"call":["sentinel []= ","sentinel [] ","scrubbed_options [] ","scrubbed_options []= ","uri to_s ","uri password= ","uri password ","URI  parse ","Marshal  load ","Marshal  dump ","options slice ","options keys - ","options keys ","Marshal  load  [] ","Marshal  load  []= ","URI  parse  to_s ","URI  parse  password= ","URI  parse  password ","options options keys -  - ","options options keys -  "]}," Sidekiq RedisClientAdapter CompatClient _config":{"type":"method","name":"_config","children":[],"call":["@client config "]}," Sidekiq Middleware Chain copy_for":{"type":"method","name":"copy_for","children":[],"call":["chain instance_variable_set "," entries dup "," entries ","Sidekiq Middleware Chain  new ","Sidekiq Middleware Chain  new  instance_variable_set "]}," Sidekiq Job ClassMethods build_client":{"type":"method","name":"build_client","children":[],"call":["client_class new "," get_sidekiq_options [] "," get_sidekiq_options ","Sidekiq  default_configuration redis_pool ","Sidekiq  default_configuration ","Thread  current [] ","Thread  current "]}," Sidekiq Job ClassMethods client_push":{"type":"method","name":"client_push","children":[],"call":["Thread  current []= ","Thread  current "," build_client push "," build_client ","item delete ","Thread  current [] "," raise ","k is_a? ","item any? "]}," Sidekiq Job ClassMethods sidekiq_options":{"type":"method","name":"sidekiq_options","children":[],"call":[]}," Sidekiq Job ClassMethods perform_in":{"type":"method","name":"perform_in","children":[],"call":[" client_push ","item []= ","ts > ","now + ","int < ","Time  now to_f ","Time  now ","interval to_f ","Time  now to_f  + ","interval to_f  < ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","interval to_f erval to_f "]}," Sidekiq Job ClassMethods perform_bulk":{"type":"method","name":"perform_bulk","children":[],"call":["Setter  new perform_bulk ","Setter  new "]}," Sidekiq Job ClassMethods perform_inline":{"type":"method","name":"perform_inline","children":[],"call":["Setter  new perform_inline ","Setter  new "]}," Sidekiq Job ClassMethods perform_async":{"type":"method","name":"perform_async","children":[],"call":["Setter  new perform_async ","Setter  new "]}," Sidekiq Job ClassMethods set":{"type":"method","name":"set","children":[],"call":["Setter  new "]}," Sidekiq Job ClassMethods queue_as":{"type":"method","name":"queue_as","children":[],"call":[" sidekiq_options ","q to_s "]}," Sidekiq Job ClassMethods delay_until":{"type":"method","name":"delay_until","children":[],"call":[" raise "]}," Sidekiq Job ClassMethods delay_for":{"type":"method","name":"delay_for","children":[],"call":[" raise "]}," Sidekiq Job ClassMethods delay":{"type":"method","name":"delay","children":[],"call":[" raise "]}," Sidekiq Job Setter at":{"type":"method","name":"at","children":[],"call":["@opts []= ","ts > ","now + ","int < ","Time  now to_f ","Time  now ","interval to_f ","Time  now to_f  + ","interval to_f  < ","Time  Time  now to_f  to_f ","Time  Time  now to_f  ","interval to_f erval to_f "]}," Sidekiq Job Setter perform_in":{"type":"method","name":"perform_in","children":[],"call":[" at perform_async "," at "]}," Sidekiq Job Setter perform_bulk":{"type":"method","name":"perform_bulk","children":[],"call":["result force ","result is_a? ","client push_bulk ","@opts merge ","args each_slice flat_map ","args each_slice ","@klass build_client ","@klass build_client  push_bulk ","@klass build_@klass build_client  "]}," Sidekiq Job Setter perform_inline":{"type":"method","name":"perform_inline","children":[],"call":["job perform ","msg [] ","cfg server_middleware invoke ","cfg server_middleware ","job bid= ","job respond_to? ","job jid= ","klass new ","Object  const_get ","Sidekiq  load_json ","Sidekiq  dump_json ","cfg client_middleware invoke ","cfg redis_pool ","item [] ","cfg client_middleware ","Sidekiq  default_configuration "," normalize_item ","@opts merge ","klass new  perform ","Sidekiq  load_json  [] ","Sidekiq  default_configuration  server_middleware invoke ","Sidekiq  default_configuration  server_middleware ","klass new  bid= ","klass new  respond_to? ","klass new  jid= ","Object  const_get  new ","Sidekiq  default_configuration  client_middleware invoke ","Sidekiq  default_configuration  redis_pool "," normalize_item  [] ","Sidekiq  default_configuration  client_middleware "," normalize_ normalize_item  "]}," Sidekiq Job Setter perform_async":{"type":"method","name":"perform_async","children":[],"call":["@klass client_push ","@opts merge "," perform_inline ","@opts [] == ","@opts [] "]}," Sidekiq Job Setter set":{"type":"method","name":"set","children":[],"call":[" at ","@opts merge! ","@opts delete ","hash delete ","options transform_keys ","options transform_keys  delete "]}," Sidekiq Job Setter initialize":{"type":"method","name":"initialize","children":[],"call":[" at ","@opts delete ","opts transform_keys ","opts transform_keys  delete "]}," Sidekiq Job logger":{"type":"method","name":"logger","children":[],"call":["Sidekiq  logger "]}," Sidekiq Job included":{"type":"method","name":"included","children":[],"call":[]}," Sidekiq Job Options ClassMethods sidekiq_class_attribute":{"type":"method","name":"sidekiq_class_attribute","children":[],"call":[" attr_writer "," undef_method "," private_method_defined? "," method_defined? "," class public_send "," class "," instance_variable_get "," instance_variable_defined? "," define_method "," singleton_class send "," singleton_class "," class_eval "," singleton_class? ","ACCESSOR_MUTEX  synchronize "," singleton_class class_eval "," define_singleton_method "," singleton_class instance_eval "," send "," private ","attrs each "]}," Sidekiq Job Options ClassMethods get_sidekiq_options":{"type":"method","name":"get_sidekiq_options","children":[],"call":["Sidekiq  default_job_options "," sidekiq_options_hash "]}," Sidekiq Job Options ClassMethods sidekiq_retries_exhausted":{"type":"method","name":"sidekiq_retries_exhausted","children":[],"call":[" sidekiq_retries_exhausted_block= "]}," Sidekiq Job Options ClassMethods sidekiq_retry_in":{"type":"method","name":"sidekiq_retry_in","children":[],"call":[" sidekiq_retry_in_block= "]}," Sidekiq Job Options ClassMethods sidekiq_options":{"type":"method","name":"sidekiq_options","children":[],"call":[" sidekiq_options_hash= "," get_sidekiq_options merge "," get_sidekiq_options ","opts transform_keys ","opts transform_keys  transform_keys "]}," Sidekiq Job Options included":{"type":"method","name":"included","children":[],"call":[]}," Sidekiq Embedded housekeeping":{"type":"method","name":"housekeeping","children":[],"call":["@config default_capsule server_middleware map join ","@config default_capsule server_middleware map ","@config default_capsule server_middleware ","@config default_capsule "," logger debug "," logger ","@config default_capsule client_middleware map join ","@config default_capsule client_middleware map ","@config default_capsule client_middleware "," logger warn ","maxmemory_policy != ","info [] "," raise ","ver < ","Gem Version  new "," config redis_info "," config "," logger info ","@config default_capsule serGem Version  new _middleware map join ","@config default_capsule serGem Version  new _middleware map ","@config default_capsule serGem Version  new _middleware ","info []  != "," config redis_info  [] ","Gem Version  new  < "," config redis_ config redis_info  "," logger  config redis_info  "]}," Sidekiq Embedded stop":{"type":"method","name":"stop","children":[],"call":[]}," Sidekiq Embedded quiet":{"type":"method","name":"quiet","children":[],"call":[]}," Sidekiq Embedded run":{"type":"method","name":"run","children":[],"call":["Thread  list map ","Thread  list "," logger debug "," logger "," logger info ","Thread  list size "," sleep ","@launcher run ","Sidekiq Launcher  new "," fire_event "," housekeeping ","Sidekiq Launcher  new  run "]}," Sidekiq Embedded initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Deploy fetch":{"type":"method","name":"fetch","children":[],"call":["c hgetall ","@pool with ","date strftime "]}," Sidekiq Deploy mark":{"type":"method","name":"mark","children":[],"call":["pipe expire ","pipe hsetnx ","c multi ","c set ","@pool with ","floor iso8601 ","floor strftime ","Time  utc ","whence min ","whence hour ","whence mday ","whence month ","whence year ","at utc ","Time  utc  iso8601 ","Time  utc  strftime ","at utc  min ","at utc  hour ","at utc  mday ","at utc  month ","at utc  year "]}," Sidekiq Deploy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sidekiq Deploy mark!":{"type":"method","name":"mark!","children":[],"call":["pipe expire ","pipe hsetnx ","c multi ","c set ","@pool with ","floor iso8601 ","floor strftime ","Time  utc ","whence min ","whence hour ","whence mday ","whence month ","whence year ","at utc ","LABEL_MAKER  call ","Time  utc  iso8601 ","Time  utc  strftime ","at utc  min ","at utc  hour ","at utc  mday ","at utc  month ","at utc  year "]}," Sidekiq Config handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["l error ","e backtrace join ","e backtrace ","e backtrace nil? "," logger ","handler call ","@options [] each ","@options [] ","ctx []= "," p ","@options [] size == ","@options [] size ","(pair\n  (sym :_config)\n  (self)) merge "," logger info ","handler arity == ","handler arity "," arity == "," arity "," parameter_size == "," parameter_size "," logger  error ","e backtrace ni logger ? ","  logger ogger ","hand logger er ca logger  logger  ","(pair\n  (sym :_config)\n  (se logger f)) merge ","  logger ogger info ","hand logger er arity == ","hand logger er arity "]}," Sidekiq Config logger=":{"type":"method","name":"logger=","children":[],"call":["logger extend "," logger level= "," logger ","logger nil? "]}," Sidekiq Config logger":{"type":"method","name":"logger","children":[],"call":["log formatter= ","Sidekiq Logger Formatters Pretty  new ","Sidekiq Logger Formatters WithoutTimestamp  new ","ENV  [] ","log level= ","Sidekiq Logger  new tap ","Sidekiq Logger  new "]}," Sidekiq Config on":{"type":"method","name":"on","children":[],"call":["@options [] [] << ","@options [] [] ","@options [] "," raise ","@options [] key? ","event is_a? "]}," Sidekiq Config error_handlers":{"type":"method","name":"error_handlers","children":[],"call":["@options [] "]}," Sidekiq Config average_scheduled_poll_interval=":{"type":"method","name":"average_scheduled_poll_interval=","children":[],"call":["@options []= "]}," Sidekiq Config death_handlers":{"type":"method","name":"death_handlers","children":[],"call":["@options [] "]}," Sidekiq Config lookup":{"type":"method","name":"lookup","children":[],"call":["@directory []= ","default_class new ","@directory fetch "]}," Sidekiq Config register":{"type":"method","name":"register","children":[],"call":["@directory []= "]}," Sidekiq Config redis":{"type":"method","name":"redis","children":[],"call":[" raise ","conn close ","ex message =~ ","ex message "," redis_pool with "," redis_pool "," block_given? "]}," Sidekiq Config redis_info":{"type":"method","name":"redis_info","children":[],"call":["(pair\n  (str \"redis_version\")\n  (str \"9.9.9\")) freeze "," raise ","(str \"unknown command\") match? ","ex message ","conn info "," redis ","(send\n  (block\n    (send\n      (send\n        (lvar :i) :lines\n        (hash\n          (pair\n            (sym :chomp)\n            (true)))) :map)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :split\n      (str \":\")\n      (int 2))) :select) to_h ","l size == ","l size ","(send\n  (send\n    (lvar :i) :lines\n    (hash\n      (pair\n        (sym :chomp)\n        (true)))) :map) select ","l split ","i lines map ","i lines ","conn call "]}," Sidekiq Config new_redis_pool":{"type":"method","name":"new_redis_pool","children":[],"call":["RedisConnection  create ","@redis_config merge "," logger ","(pair\n  (sym :size)\n  (lvar :size)) merge "]}," Sidekiq Config local_redis_pool":{"type":"method","name":"local_redis_pool","children":[],"call":[" new_redis_pool "]}," Sidekiq Config redis_pool":{"type":"method","name":"redis_pool","children":[],"call":[" local_redis_pool ","Thread  current [] ","Thread  current "]}," Sidekiq Config redis=":{"type":"method","name":"redis=","children":[],"call":["@redis_config merge ","@redis_config merge  merge "]}," Sidekiq Config capsule":{"type":"method","name":"capsule","children":[],"call":[" block_given? ","@capsules []= ","Sidekiq Capsule  new ","@capsules fetch ","name to_s ","@Sidekiq Capsule  new sules []= ","@Sidekiq Capsule  new sules fetch "]}," Sidekiq Config default_capsule":{"type":"method","name":"default_capsule","children":[],"call":[" capsule "]}," Sidekiq Config server_middleware":{"type":"method","name":"server_middleware","children":[],"call":[" block_given? ","Sidekiq Middleware Chain  new "]}," Sidekiq Config client_middleware":{"type":"method","name":"client_middleware","children":[],"call":[" block_given? ","Sidekiq Middleware Chain  new "]}," Sidekiq Config queues":{"type":"method","name":"queues","children":[],"call":[" default_capsule queues "," default_capsule "]}," Sidekiq Config queues=":{"type":"method","name":"queues=","children":[],"call":[" default_capsule queues= "," default_capsule "]}," Sidekiq Config total_concurrency":{"type":"method","name":"total_concurrency","children":[],"call":[" capsules each_value sum "," capsules each_value "," capsules "]}," Sidekiq Config concurrency":{"type":"method","name":"concurrency","children":[],"call":[" default_capsule concurrency "," default_capsule "]}," Sidekiq Config concurrency=":{"type":"method","name":"concurrency=","children":[],"call":[" default_capsule concurrency= "," Integer "," default_capsule "]}," Sidekiq Config initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] << ","@options [] ","@options [] empty? ","DEFAULTS  merge ","DEFAULTS  merge  [] << ","DEFAULTS  merge  [] ","DEFAULTS  merge  [] empty? "]}," Sidekiq CLI day":{"type":"method","name":"day","children":[],"call":[]}," Sidekiq Capsule logger":{"type":"method","name":"logger","children":[],"call":[" config logger "," config "]}," Sidekiq Capsule lookup":{"type":"method","name":"lookup","children":[],"call":[" config lookup "," config "]}," Sidekiq Capsule redis":{"type":"method","name":"redis","children":[],"call":[" raise ","conn close ","ex message =~ ","ex message "," redis_pool with "," redis_pool "," block_given? "]}," Sidekiq Capsule local_redis_pool":{"type":"method","name":"local_redis_pool","children":[],"call":[" config new_redis_pool "," name "," config "]}," Sidekiq Capsule redis_pool":{"type":"method","name":"redis_pool","children":[],"call":[" local_redis_pool ","Thread  current [] ","Thread  current "]}," Sidekiq Capsule server_middleware":{"type":"method","name":"server_middleware","children":[],"call":[" block_given? "," config server_middleware copy_for "," config server_middleware "," config "]}," Sidekiq Capsule client_middleware":{"type":"method","name":"client_middleware","children":[],"call":[" block_given? "," config client_middleware copy_for "," config client_middleware "," config "]}," Sidekiq Capsule queues=":{"type":"method","name":"queues=","children":[],"call":["memo << ","(send\n  (lvar :weight) :to_i) max times ","(send\n  (lvar :weight) :to_i) max ","weight to_i ","qstr split ","qstr is_a? "," Array each_with_object "," Array ","x == ","@weights values all? ","@weights values ","@weights []= "]}," Sidekiq Capsule stop":{"type":"method","name":"stop","children":[],"call":[" fetcher "]}," Sidekiq Capsule fetcher":{"type":"method","name":"fetcher","children":[],"call":["inst setup "," config [] "," config ","inst respond_to? ","(or\n  (send\n    (send nil :config) :[]\n    (sym :fetch_class))\n  (const\n    (const nil :Sidekiq) :BasicFetch)) new ","(or\n  (send\n    (send nil :config) :[]\n    (sym :fetch_class))\n  (const\n    (const nil :Sidekiq) :BasicFetch)) new  setup ","(or\n  (send\n    (send nil :config) :[]\n    (sym :fetch_class))\n  (const\n    (const nil :Sidekiq) :BasicFetch)) new  respond_to? "]}," Sidekiq Capsule initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Sidekiq PoolAccess redis_pool":{"type":"method","name":"redis_pool","children":[],"call":["Sidekiq RedisConnection  create ","Thread  current [] ","Thread  current "]}," Sidekiq WebHelpers pollable?":{"type":"method","name":"pollable?","children":[],"call":["(or\n  (send\n    (send nil :current_path) :==\n    (str \"\"))\n  (send\n    (send nil :current_path) :starts_with?\n    (str \"metrics\"))) ! "," current_path starts_with? "," current_path "," current_path == ","(or\n  (send\n    (send nil :current_path) :==\n    (str \"\"))\n  (send\n    (send nil :current_path) :start_with?\n    (str \"metrics\"))) ! "," current_path start_with? "]}," Sidekiq Launcher beat":{"type":"method","name":"beat","children":[],"call":[" ❤ ","(send\n  (const nil :PROCTITLES) :map) compact join ","(send\n  (const nil :PROCTITLES) :map) compact ","proc call "," to_data ","PROCTITLES  map "]}," Sidekiq Web custom_job_info_rows":{"type":"method","name":"custom_job_info_rows","children":[],"call":[]}," Sidekiq RedisClientAdapter CompatClient config":{"type":"method","name":"config","children":[],"call":["@client config "]}," Sidekiq Process version":{"type":"method","name":"version","children":[],"call":[" [] "]}," Sidekiq Process weights":{"type":"method","name":"weights","children":[],"call":[" [] "]}," Sidekiq JobRecord bid":{"type":"method","name":"bid","children":[],"call":[" [] "]}," Sidekiq WebHelpers busy_weights":{"type":"method","name":"busy_weights","children":[],"call":["(send\n  (lvar :cw) :map) join ","(send\n  (lvar :hash) :map) join ","name +@ << << ","weight to_s ","name +@ << ","name +@ ","weight > ","hash map ","cw map ","(lvar :capsule_weights) flatten ","(send\n  (lvar :(lvar :capsule_weights) flatten ) :map) join ","(lvar :capsule_weights) flatten  map "]}," Sidekiq Launcher to_weights":{"type":"method","name":"to_weights","children":[],"call":["@config capsules values map ","@config capsules values ","@config capsules "]}," Sidekiq Process embedded?":{"type":"method","name":"embedded?","children":[],"call":[" [] "]}," Sidekiq ProcessSet []":{"type":"method","name":"[]","children":[],"call":[]}," Sidekiq Middleware Chain traverse":{"type":"method","name":"traverse","children":[],"call":[" traverse ","index + ","chain [] call ","chain [] ","index >= ","chain size "]}," Sidekiq JobUtil json_unsafe_item":{"type":"method","name":"json_unsafe_item","children":[],"call":["unsafe_item nil? "," json_unsafe_item ","String  === ","item each "," json_unsafe_item  nil? "," json_ json_unsafe_item  "]}," Sidekiq JobUtil json_unsafe?":{"type":"method","name":"json_unsafe?","children":[],"call":["RECURSIVE_JSON_UNSAFE  [] call ","RECURSIVE_JSON_UNSAFE  [] ","item class "]}," Sidekiq JobRecord serialized_global_id?":{"type":"method","name":"serialized_global_id?","children":[],"call":["hash include? ","hash size == ","hash size "]}," Sidekiq JobRecord deserialize_argument":{"type":"method","name":"deserialize_argument","children":[],"call":["k start_with? ","(send\n  (lvar :argument) :transform_values) reject "," deserialize_argument ","argument transform_values ","argument [] "," serialized_global_id? ","argument map "]}," Sidekiq CurrentAttributes key_at":{"type":"method","name":"key_at","children":[],"call":["index == "]}," Sidekiq CurrentAttributes build_cattrs_hash":{"type":"method","name":"build_cattrs_hash","children":[],"call":["klass_or_array to_s "," key_at ","hash []= ","klass to_s ","klass_or_array each_with_index "," tap ","klass_or_array is_a? "]}," Sidekiq Rails Reloader to_json":{"type":"method","name":"to_json","children":[],"call":["Sidekiq  dump_json "," inspect "]}," Sidekiq Config to_json":{"type":"method","name":"to_json","children":[],"call":["Sidekiq  dump_json "]}," Sidekiq WebHelpers filter_link":{"type":"method","name":"filter_link","children":[],"call":[" Rack Utils  escape_html "," root_path ","within nil? "]}," Sidekiq WebHelpers search":{"type":"method","name":"search","children":[],"call":["resultset size ","jobset scan to_a ","jobset scan ","jobset scan to_a  size "]}," Sidekiq TestingClient atomic_push":{"type":"method","name":"atomic_push","children":[],"call":["klass process_job ","Sidekiq  load_json ","Sidekiq  dump_json ","SecureRandom  hex ","job [] ","Object  const_get ","payloads each ","Sidekiq Testing  inline? ","Queues  push ","job []= ","Time  now to_f ","Time  now ","Sidekiq Testing  fake? ","Object  const_get  process_job ","klass process_Sidekiq  load_json  ","Sidekiq  load_json  [] ","Sidekiq  load_json  []= "]}," Sidekiq Testing __local_test_mode=":{"type":"method","name":"__local_test_mode=","children":[],"call":["Thread  current []= ","Thread  current "]}," Sidekiq Testing __local_test_mode":{"type":"method","name":"__local_test_mode","children":[],"call":["Thread  current [] ","Thread  current "]}," Sidekiq Testing __test_mode":{"type":"method","name":"__test_mode","children":[],"call":[" __global_test_mode "," __local_test_mode "]}," Sidekiq Config arity":{"type":"method","name":"arity","children":[],"call":["handler method arity ","handler method ","handler arity ","handler is_a? "]}," Sidekiq WebHelpers to_json":{"type":"method","name":"to_json","children":[],"call":["Sidekiq  dump_json "]}," Sidekiq Config parameter_size":{"type":"method","name":"parameter_size","children":[],"call":["target parameters size ","target parameters ","handler method ","handler is_a? ","handler method  parameters size ","handler method  parameters "]}}