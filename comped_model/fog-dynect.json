{" Fog Dynect Mock version":{"type":"method","name":"version","children":[],"call":[]}," Fog Dynect Mock token":{"type":"method","name":"token","children":[],"call":[]}," Fog Dynect Mock job_id":{"type":"method","name":"job_id","children":[],"call":[]}," Fog DNS Dynect Mock put_zone":{"type":"method","name":"put_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id "," raise ","zone []= ","options [] ","zone [] ","r [] == ","record [] ","r [] ","zone [] [] delete_if ","zone [] [] ","zone [] each ","response status= ","Excon Response  new ","options size == ","options size "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  []= "," data [] []  [] "," data [] []  [] [] delete_if "," data [] []  [] [] "," data [] []  [] each ","Excon Response  new  status= "]}," Fog DNS Dynect Real put_zone":{"type":"method","name":"put_zone","children":[],"call":[" request ","Zone/ << ","Fog JSON  encode "]}," Fog DNS Dynect Mock put_record":{"type":"method","name":"put_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","response status= ","Excon Response  new ","records [] << ","records [] ","zone [] ","options [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= ","zone []  [] << ","zone []  [] "," data [] []  [] "]}," Fog DNS Dynect Real put_record":{"type":"method","name":"put_record","children":[],"call":[" request ","Fog JSON  encode ","options delete ","options [] ","(dstr\n  (begin\n    (lvar :type))\n  (str \"Record\")) join ","type to_s upcase! ","type to_s ","options merge! "]}," Fog DNS Dynect Mock post_zone":{"type":"method","name":"post_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","new_zone [] ","response status= ","Excon Response  new "," data [] []= ","options [] ","records_hash []= ","Hash  new "," data [] "," data ","Excon Response  new  body= "," data [] []=  [] ","Excon Response  new  status= "]}," Fog DNS Dynect Real post_zone":{"type":"method","name":"post_zone","children":[],"call":[" request ","Zone/ << ","Fog JSON  encode ","(pair\n  (sym :rname)\n  (lvar :rname)) merge! "," auth_token "]}," Fog DNS Dynect Mock post_session":{"type":"method","name":"post_session","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","Fog Dynect Mock  version "," auth_token ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog DNS Dynect Real post_session":{"type":"method","name":"post_session","children":[],"call":[" request ","Fog JSON  encode "]}," Fog DNS Dynect Mock post_record":{"type":"method","name":"post_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","response status= ","Excon Response  new ","records [] << ","records [] ","zone [] ","options [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= ","zone []  [] << ","zone []  [] "," data [] []  [] "]}," Fog DNS Dynect Real post_record":{"type":"method","name":"post_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) join ","type to_s upcase ","type to_s ","Fog JSON  encode ","options merge! "]}," Fog DNS Dynect Mock get_zone":{"type":"method","name":"get_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new ","data size "," data [] map "," data [] "," data ","zone [] "," raise "," data [] [] ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog DNS Dynect Real get_zone":{"type":"method","name":"get_zone","children":[],"call":[" request ","(str \"Zone\") compact join ","(str \"Zone\") compact ","options [] "]}," Fog DNS Dynect Mock get_record":{"type":"method","name":"get_record","children":[],"call":["response body= ","records size ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","records map ","record [] == ","zone [] [] select ","zone [] [] ","zone [] ","zone [] values flatten select ","zone [] values flatten ","zone [] values ","type == "," raise ","record_id to_i ","zone [] [] find ","options [] ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","(str \"AAAA\") include? ","Excon Response  new  body= "," data [] []  [] [] select "," data [] []  [] [] "," data [] []  [] "," data [] []  [] values flatten select "," data [] []  [] values flatten "," data [] []  [] values ","options []  to_i "," data [] []  [] [] find ","Excon Response  new  status= "]}," Fog DNS Dynect Real get_record":{"type":"method","name":"get_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) compact join ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) compact ","options [] ","type to_s upcase ","type to_s "]}," Fog DNS Dynect Mock get_node_list":{"type":"method","name":"get_node_list","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","data | ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten ","record [] ","records map ","zone [] map ","zone [] ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten compact ","record [] == ","records select ","options [] ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","data |  | ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten "," data [] []  [] map "," data [] []  [] ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten compact ","Excon Response  new  status= "," data |  [] [] "," data |  [] "," data |  "]}," Fog DNS Dynect Real get_node_list":{"type":"method","name":"get_node_list","children":[],"call":[" request ","(str \"AllRecord\") compact join ","(str \"AllRecord\") compact ","options [] "]}," Fog DNS Dynect Mock get_all_records":{"type":"method","name":"get_all_records","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","data | ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten ","record [] ","records map ","zone [] map ","zone [] ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten compact ","record [] == ","records select ","options [] ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","data |  | ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten "," data [] []  [] map "," data [] []  [] ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten compact ","Excon Response  new  status= "," data |  [] [] "," data |  [] "," data |  "]}," Fog DNS Dynect Real get_all_records":{"type":"method","name":"get_all_records","children":[],"call":[" request ","(str \"AllRecord\") compact join ","(str \"AllRecord\") compact ","options [] "]}," Fog DNS Dynect Mock delete_zone":{"type":"method","name":"delete_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog DNS Dynect Real delete_zone":{"type":"method","name":"delete_zone","children":[],"call":[" request "]}," Fog DNS Dynect Mock delete_record":{"type":"method","name":"delete_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new ","zone [] << ","record_id to_i ","zone [] "," raise ","record [] == ","record [] ","zone [] [] find ","zone [] [] "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," data [] []  [] [] find "," data [] []  [] [] "]}," Fog DNS Dynect Real delete_record":{"type":"method","name":"delete_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) join ","type to_s upcase ","type to_s "]}," Fog DNS Dynect Zones get":{"type":"method","name":"get","children":[],"call":[" new "," service get_zone body [] "," service get_zone body "," service get_zone "," service "]}," Fog DNS Dynect Zones all":{"type":"method","name":"all","children":[],"call":[" load "," service get_zone body [] map "," service get_zone body [] "," service get_zone body "," service get_zone "," service "]}," Fog DNS Dynect Zone save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service post_zone body [] "," service post_zone body "," service post_zone "," domain "," ttl "," email "," service "," requires "]}," Fog DNS Dynect Zone nameservers":{"type":"method","name":"nameservers","children":[],"call":[" raise "]}," Fog DNS Dynect Zone records":{"type":"method","name":"records","children":[],"call":["Fog DNS Dynect Records  new "," service "]}," Fog DNS Dynect Zone publish":{"type":"method","name":"publish","children":[],"call":[" service put_zone "," identity "," service "," requires "]}," Fog DNS Dynect Zone domain=":{"type":"method","name":"domain=","children":[],"call":[" attributes []= ","new_domain split last ","new_domain split "," attributes "]}," Fog DNS Dynect Zone destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_zone "," domain "," service "," requires "]}," Fog DNS Dynect Zone initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog DNS Dynect Records new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :zone)\n  (send nil :zone)) merge! "," zone "," requires "]}," Fog DNS Dynect Records get":{"type":"method","name":"get","children":[],"call":["e id == ","e id ","list detect "," all "," requires "," all  detect "]}," Fog DNS Dynect Records all":{"type":"method","name":"all","children":[],"call":[" load ","data << ","record [] ","list each "," service get_all_records body [] each "," service get_all_records body [] "," service get_all_records body "," service get_all_records "," zone domain "," zone "," service "," requires "]}," Fog DNS Dynect Record zone=":{"type":"method","name":"zone=","children":[],"call":[]}," Fog DNS Dynect Record zone":{"type":"method","name":"zone","children":[],"call":[]}," Fog DNS Dynect Record save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","record [] == "," type ","record [] ","records find ","tokens [] [] ","tokens [] ","tokens last ","record split ","records map! "," service get_record body [] "," service get_record body "," service get_record "," name "," zone identity "," zone "," service "," zone publish ","key == ","data reject "," service post_record body [] "," service post_record body "," service post_record "," rdata "," service put_record body [] "," service put_record body "," service put_record ","value nil? ","options delete_if "," ttl "," requires "," refresh_id ","options []= "," identity "," identity nil? ! "," identity nil? "," service get_record body []  find ","record split  [] [] ","record split  [] ","record split  last "," service get_record body []  map! "," service post_record body []  reject "," service put_record body []  reject "," r service post_record body []  "," r service put_record body []  "]}," Fog DNS Dynect Record destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_record "," identity "," name "," zone identity "," zone "," type "," service "," requires "]}," Fog DNS Dynect Real poll_job":{"type":"method","name":"poll_job","children":[],"call":[" raise ","JobIncomplete  new ","response body [] ","response body ","response body [] == ","response body [] != "," request ","Fog  wait_for ","response headers [] ","response headers "," request  body [] "," request  body "," request  body [] == "," request  body [] != "," request  headers [] "," request  headers "]}," Fog DNS Dynect Real request":{"type":"method","name":"request","children":[],"call":[" raise ","error message =~ ","error message "," poll_job ","params [] ","response headers []= ","response body [] ","response body ","response headers ","response body [] eql? ","response status == ","response status ","params [] !~ ","response body [] first [] ","response body [] first ","response body [] == ","response body= ","Fog JSON  decode ","response headers [] == ","response headers [] ","response body empty? ","@connection request ","params []= ","params [] =~ ","Regexp  escape ","params [] []= "," auth_token ","params [] == "," Array | "," Array "," poll_job  headers []= ","@connection request  headers []= "," poll_job  body [] ","@connection request  body [] "," poll_job  body ","@connection request  body "," poll_job  headers ","@connection request  headers "," poll_job  body [] eql? ","@connection request  body [] eql? "," poll_job  status == ","@connection request  status == "," poll_job  status ","@connection request  status "," poll_job  body [] first [] ","@connection request  body [] first [] "," poll_job  body [] first ","@connection request  body [] first "," poll_job  body [] == ","@connection request  body [] == "," poll_job  body= ","@connection request  body= "," poll_job  headers [] == ","@connection request  headers [] == "," poll_job  headers [] ","@connection request  headers [] "," poll_job  body empty? ","@connection request  body empty? "]}," Fog DNS Dynect Real auth_token":{"type":"method","name":"auth_token","children":[],"call":[" post_session body [] [] "," post_session body [] "," post_session body "," post_session "]}," Fog DNS Dynect Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "]}," Fog DNS Dynect Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class reset "," class "]}," Fog DNS Dynect Mock data":{"type":"method","name":"data","children":[],"call":[" class data "," class "]}," Fog DNS Dynect Mock auth_token":{"type":"method","name":"auth_token","children":[],"call":["Fog Dynect Mock  token "]}," Fog DNS Dynect Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog DNS Dynect Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Dynect services":{"type":"method","name":"services","children":[],"call":[]}," Dynect []":{"type":"method","name":"[]","children":[],"call":["@@connections [] ","hash []= "," raise ","Fog DNS  new ","Hash  new "]}," Dynect class_for":{"type":"method","name":"class_for","children":[],"call":[" raise "]}," Fog DNS Dynect Record refresh_id":{"type":"method","name":"refresh_id","children":[],"call":[" merge_attributes ","record [] == "," type ","record [] ","records find ","tokens [] [] ","tokens [] ","tokens last ","record split ","records map! "," service get_record body [] "," service get_record body "," service get_record "," name "," zone identity "," zone "," service "," service get_record body []  find ","record split  [] [] ","record split  [] ","record split  last "," service get_record body []  map! "]}," Fog Dynect DNS Mock put_zone":{"type":"method","name":"put_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id "," raise ","zone []= ","options [] ","zone [] ","r [] == ","record [] ","r [] ","zone [] [] delete_if ","zone [] [] ","zone [] each ","response status= ","Excon Response  new ","options size == ","options size "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  []= "," data [] []  [] "," data [] []  [] [] delete_if "," data [] []  [] [] "," data [] []  [] each ","Excon Response  new  status= "]}," Fog Dynect DNS Real put_zone":{"type":"method","name":"put_zone","children":[],"call":[" request ","Zone/ << ","Fog JSON  encode "]}," Fog Dynect DNS Mock put_record":{"type":"method","name":"put_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","response status= ","Excon Response  new ","records [] << ","records [] ","zone [] ","options [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= ","zone []  [] << ","zone []  [] "," data [] []  [] "]}," Fog Dynect DNS Real put_record":{"type":"method","name":"put_record","children":[],"call":[" request ","Fog JSON  encode ","options delete ","options [] ","(dstr\n  (begin\n    (lvar :type))\n  (str \"Record\")) join ","type to_s upcase! ","type to_s ","options merge! "]}," Fog Dynect DNS Mock post_zone":{"type":"method","name":"post_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","new_zone [] ","response status= ","Excon Response  new "," data [] []= ","options [] ","records_hash []= ","Hash  new "," data [] "," data ","Excon Response  new  body= "," data [] []=  [] ","Excon Response  new  status= "]}," Fog Dynect DNS Real post_zone":{"type":"method","name":"post_zone","children":[],"call":[" request ","Zone/ << ","Fog JSON  encode ","(pair\n  (sym :rname)\n  (lvar :rname)) merge! "," auth_token "]}," Fog Dynect DNS Mock post_session":{"type":"method","name":"post_session","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","Fog Dynect Mock  version "," auth_token ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Dynect DNS Real post_session":{"type":"method","name":"post_session","children":[],"call":[" request ","Fog JSON  encode "]}," Fog Dynect DNS Mock post_record":{"type":"method","name":"post_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","response status= ","Excon Response  new ","records [] << ","records [] ","zone [] ","options [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= ","zone []  [] << ","zone []  [] "," data [] []  [] "]}," Fog Dynect DNS Real post_record":{"type":"method","name":"post_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) join ","type to_s upcase ","type to_s ","Fog JSON  encode ","options merge! "]}," Fog Dynect DNS Mock get_zone":{"type":"method","name":"get_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new ","data size "," data [] map "," data [] "," data ","zone [] "," raise "," data [] [] ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog Dynect DNS Real get_zone":{"type":"method","name":"get_zone","children":[],"call":[" request ","(str \"Zone\") compact join ","(str \"Zone\") compact ","options [] "]}," Fog Dynect DNS Mock get_record":{"type":"method","name":"get_record","children":[],"call":["response body= ","records size ","Fog Dynect Mock  job_id ","record [] ","record [] [] ","records map ","record [] == ","zone [] [] select ","zone [] [] ","zone [] ","zone [] values flatten select ","zone [] values flatten ","zone [] values ","type == "," raise ","record_id to_i ","zone [] [] find ","options [] ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","(str \"AAAA\") include? ","Excon Response  new  body= "," data [] []  [] [] select "," data [] []  [] [] "," data [] []  [] "," data [] []  [] values flatten select "," data [] []  [] values flatten "," data [] []  [] values ","options []  to_i "," data [] []  [] [] find ","Excon Response  new  status= "]}," Fog Dynect DNS Real get_record":{"type":"method","name":"get_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) compact join ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) compact ","options [] ","type to_s upcase ","type to_s "]}," Fog Dynect DNS Mock get_node_list":{"type":"method","name":"get_node_list","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","data | ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten ","record [] ","records map ","zone [] map ","zone [] ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten compact ","record [] == ","records select ","options [] ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","data |  | ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten "," data [] []  [] map "," data [] []  [] ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten compact ","Excon Response  new  status= "," data |  [] [] "," data |  [] "," data |  "]}," Fog Dynect DNS Real get_node_list":{"type":"method","name":"get_node_list","children":[],"call":[" request ","(str \"AllRecord\") compact join ","(str \"AllRecord\") compact ","options [] "]}," Fog Dynect DNS Mock get_all_records":{"type":"method","name":"get_all_records","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","data | ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten ","record [] ","records map ","zone [] map ","zone [] ","(send\n  (send\n    (lvar :zone) :[]\n    (sym :records)) :map) flatten compact ","record [] == ","records select ","options [] ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","data |  | ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten "," data [] []  [] map "," data [] []  [] ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :records)) :map) flatten compact ","Excon Response  new  status= "," data |  [] [] "," data |  [] "," data |  "]}," Fog Dynect DNS Real get_all_records":{"type":"method","name":"get_all_records","children":[],"call":[" request ","(str \"AllRecord\") compact join ","(str \"AllRecord\") compact ","options [] "]}," Fog Dynect DNS Mock delete_zone":{"type":"method","name":"delete_zone","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Dynect DNS Real delete_zone":{"type":"method","name":"delete_zone","children":[],"call":[" request "]}," Fog Dynect DNS Mock delete_record":{"type":"method","name":"delete_record","children":[],"call":["response body= ","Fog Dynect Mock  job_id ","response status= ","Excon Response  new ","zone [] << ","record_id to_i ","zone [] "," raise ","record [] == ","record [] ","zone [] [] find ","zone [] [] "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," data [] []  [] [] find "," data [] []  [] [] "]}," Fog Dynect DNS Real delete_record":{"type":"method","name":"delete_record","children":[],"call":[" request ","(dstr\n  (begin\n    (send\n      (send\n        (lvar :type) :to_s) :upcase))\n  (str \"Record\")) join ","type to_s upcase ","type to_s "]}," Fog Dynect DNS Zones get":{"type":"method","name":"get","children":[],"call":[" new "," service get_zone body [] "," service get_zone body "," service get_zone "," service "]}," Fog Dynect DNS Zones all":{"type":"method","name":"all","children":[],"call":[" load "," service get_zone body [] map "," service get_zone body [] "," service get_zone body "," service get_zone "," service "]}," Fog Dynect DNS Zone save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service post_zone body [] "," service post_zone body "," service post_zone "," domain "," ttl "," email "," service "," requires "]}," Fog Dynect DNS Zone nameservers":{"type":"method","name":"nameservers","children":[],"call":[" raise "]}," Fog Dynect DNS Zone records":{"type":"method","name":"records","children":[],"call":["Fog Dynect DNS Records  new "," service "]}," Fog Dynect DNS Zone publish":{"type":"method","name":"publish","children":[],"call":[" service put_zone "," identity "," service "," requires "]}," Fog Dynect DNS Zone domain=":{"type":"method","name":"domain=","children":[],"call":[" attributes []= ","new_domain split last ","new_domain split "," attributes "]}," Fog Dynect DNS Zone destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_zone "," domain "," service "," requires "]}," Fog Dynect DNS Zone initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Dynect DNS Records new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :zone)\n  (send nil :zone)) merge! "," zone "," requires "]}," Fog Dynect DNS Records get":{"type":"method","name":"get","children":[],"call":["e id == ","e id ","list detect "," all "," requires "," all  detect "]}," Fog Dynect DNS Records all":{"type":"method","name":"all","children":[],"call":[" load ","data << ","record [] ","list each "," service get_all_records body [] each "," service get_all_records body [] "," service get_all_records body "," service get_all_records "," zone domain "," zone "," service "," requires "]}," Fog Dynect DNS Record refresh_id":{"type":"method","name":"refresh_id","children":[],"call":[" merge_attributes ","record [] == "," type ","record [] ","records find ","tokens [] [] ","tokens [] ","tokens last ","record split ","records map! "," service get_record body [] "," service get_record body "," service get_record "," name "," zone identity "," zone "," service "," service get_record body []  find ","record split  [] [] ","record split  [] ","record split  last "," service get_record body []  map! "]}," Fog Dynect DNS Record zone=":{"type":"method","name":"zone=","children":[],"call":[]}," Fog Dynect DNS Record zone":{"type":"method","name":"zone","children":[],"call":[]}," Fog Dynect DNS Record save":{"type":"method","name":"save","children":[],"call":[" refresh_id "," zone publish "," zone "," merge_attributes ","key == ","data reject "," service post_record body [] "," service post_record body "," service post_record "," rdata "," name "," zone identity "," type "," service "," service put_record body [] "," service put_record body "," service put_record ","options []= "," identity "," identity nil? ! "," identity nil? ","value nil? ","options delete_if "," ttl "," requires "," service post_record body []  reject "," service put_record body []  reject "," r service post_record body []  "," r service put_record body []  "]}," Fog Dynect DNS Record destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_record "," identity "," name "," zone identity "," zone "," type "," service "," requires "]}," Fog DNS Dynect new":{"type":"method","name":"new","children":[],"call":[]}," Fog Dynect DNS Real poll_job":{"type":"method","name":"poll_job","children":[],"call":[" raise ","JobIncomplete  new ","response body [] ","response body ","response body [] == ","response body [] != "," request ","Fog  wait_for ","response headers [] ","response headers "," request  body [] "," request  body "," request  body [] == "," request  body [] != "," request  headers [] "," request  headers "]}," Fog Dynect DNS Real request":{"type":"method","name":"request","children":[],"call":[" raise ","error message =~ ","error message "," poll_job ","params [] ","response headers []= ","response body [] ","response body ","response headers ","response body [] eql? ","response status == ","response status ","params [] !~ ","response body [] first [] ","response body [] first ","response body [] == ","response body= ","Fog JSON  decode ","response headers [] == ","response headers [] ","response body empty? ","@connection request ","params []= ","params [] =~ ","Regexp  escape ","params [] []= "," auth_token ","params [] == "," Array | "," Array "," poll_job  headers []= ","@connection request  headers []= "," poll_job  body [] ","@connection request  body [] "," poll_job  body ","@connection request  body "," poll_job  headers ","@connection request  headers "," poll_job  body [] eql? ","@connection request  body [] eql? "," poll_job  status == ","@connection request  status == "," poll_job  status ","@connection request  status "," poll_job  body [] first [] ","@connection request  body [] first [] "," poll_job  body [] first ","@connection request  body [] first "," poll_job  body [] == ","@connection request  body [] == "," poll_job  body= ","@connection request  body= "," poll_job  headers [] == ","@connection request  headers [] == "," poll_job  headers [] ","@connection request  headers [] "," poll_job  body empty? ","@connection request  body empty? "]}," Fog Dynect DNS Real auth_token":{"type":"method","name":"auth_token","children":[],"call":[" post_session body [] [] "," post_session body [] "," post_session body "," post_session "]}," Fog Dynect DNS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "]}," Fog Dynect DNS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class reset "," class "]}," Fog Dynect DNS Mock data":{"type":"method","name":"data","children":[],"call":[" class data "," class "]}," Fog Dynect DNS Mock auth_token":{"type":"method","name":"auth_token","children":[],"call":["Fog Dynect Mock  token "]}," Fog Dynect DNS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Dynect DNS Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}}