{" RedmineRt JournalsControllerPatch InstanceMethods destroy":{"type":"method","name":"destroy","children":[],"call":[" render ","format api "," respond_to ","@journal destroy "," raise ","@journal editable_by? ","User  current ","Journal  find "," params [] "," params ","Journal  find  destroy ","Journal  find  editable_by? "]}," RedmineRt JournalsControllerPatch InstanceMethods show":{"type":"method","name":"show","children":[],"call":[" render ","(pair\n  (sym :journal)\n  (ivar :@journal)) to_json ","@journal details ","format api ","Rails VERSION MAJOR  >= "," headers []= ","@issue lock_version to_s ","@issue lock_version "," headers ","format html "," respond_to ","@issue notes_addable? ","User  current allowed_to? ! ","User  current allowed_to? ","@issue project ","User  current ","@journal user != ","@journal user ","@journal private_notes ","@journal indice= "," params [] "," params "," raise ","user allowed_to? ! ","user allowed_to? ","@journal private_notes? ","Issue  find ","@journal journalized_id ","Journal  includes includes find ","Journal  includes includes ","Journal  includes ","(pair\n  (sym :journal)\n  (ivar :Journal  includes includes find )) to_json ","Journal  includes includes find  details ","Issue  find  lock_version to_s ","Issue  find  lock_version ","Issue  find  notes_addable? ","Issue  find  project ","@journal User  current  != ","Journal  includes includes find  user != ","@journal User  current  ","Journal  includes includes find  user ","Journal  includes includes find  private_notes ","Journal  includes includes find  indice= ","User  current  allowed_to? ! ","User  current  allowed_to? ","Journal  includes includes find  private_notes? ","Journal  includes includes find  journalized_id "]}," RedmineRt JournalsControllerPatch included":{"type":"method","name":"included","children":[],"call":[]}," RedmineRt InstanceMethods handle_journal_after_destroy":{"type":"method","name":"handle_journal_after_destroy","children":[],"call":["Broadcaster  broadcast "," id ","journal  + + ","journal  + "," id to_s "," journalized_id "," journalized_type != "," journalized_type "," logger debug "," logger "]}," RedmineRt InstanceMethods handle_journal_after_save":{"type":"method","name":"handle_journal_after_save","children":[],"call":["Broadcaster  broadcast "," id ","journal  + + ","journal  + "," id to_s "," journalized_id "," journalized_type != "," journalized_type "," logger debug "," logger "]}," RedmineRt JournalPatch included":{"type":"method","name":"included","children":[],"call":[]}," RedmineRt IssuesControllerPatch InstanceMethods add_quick_notes":{"type":"method","name":"add_quick_notes","children":[],"call":[" render "," save_issue_with_child_records "," update_issue_from_params "," raise ","User  current allowed_to? ","@issue project ","User  current "]}," RedmineRt IssuesControllerPatch included":{"type":"method","name":"included","children":[],"call":[]}," RedmineRt IssuesControllerPatch sample_helper_method":{"type":"method","name":"sample_helper_method","children":[],"call":[]}," RedmineRt InstanceMethods handle_issue_after_destroy":{"type":"method","name":"handle_issue_after_destroy","children":[],"call":["Broadcaster  broadcast "," id ","issue  + + ","issue  + "," id to_s "]}," RedmineRt InstanceMethods handle_issue_after_save":{"type":"method","name":"handle_issue_after_save","children":[],"call":["Broadcaster  broadcast "," id ","issue  + + ","issue  + "," id to_s "]}," RedmineRt IssuePatch included":{"type":"method","name":"included","children":[],"call":[]}," ChannelsController post_msg":{"type":"method","name":"post_msg","children":[],"call":[" render ","RedmineRt Broadcaster  broadcast "," params [] "," params "," params except "," raise ","User  current login == ","User  current login ","User  current ","User  current ! "]}," ChannelsController session_info":{"type":"method","name":"session_info","children":[],"call":[" render "," null ","User  current login ","User  current ","Rails VERSION MAJOR  >= "]}," ChannelsController info":{"type":"method","name":"info","children":[],"call":[" render ","Rails VERSION MAJOR  >= "]}," RedmineRt Channel receive":{"type":"method","name":"receive","children":[],"call":["Broadcaster  broadcast ","data [] [] ","data [] ","data [] == "]}," RedmineRt Channel subscribed":{"type":"method","name":"subscribed","children":[],"call":[" stream_from "," params [] "," params ","ActionCable  server broadcast ","ActionCable  server "," params [] == "," params [] ! "," current_user [] "," current_user "," current_user ! "]}," ApplicationCable Connection find_verified_user":{"type":"method","name":"find_verified_user","children":[],"call":[" request params []= "," request params "," request ","User  find ","token user_id ","token ! ","Token  find_by "," cookies [] "," cookies "," request params [] ","Token  find_by  user_id ","Token  find_by  ! "]}," ApplicationCable Connection connect":{"type":"method","name":"connect","children":[],"call":[" current_user= "," find_verified_user "]}," RedmineRt Broadcaster broadcast":{"type":"method","name":"broadcast","children":[],"call":["WebsocketRails  [] trigger ","WebsocketRails  [] ","ActionCable  server broadcast ","ActionCable  server ","Rails VERSION MAJOR  >= "]}," RedmineRt AuthorizationController post_msg":{"type":"method","name":"post_msg","children":[],"call":["WebsocketRails  [] trigger "," message [] "," message ","WebsocketRails  [] "]}," RedmineRt AuthorizationController handle_subscribe_private":{"type":"method","name":"handle_subscribe_private","children":[],"call":[" deny_channel "," accept_channel ","User  find ","token user_id ","Token  find_by "," request cookies [] "," request cookies "," request ","token ! "," request params [] "," request params ","Token  find_by  user_id ","Token  find_by  ! "]}," RedmineRt AuthorizationController handle_subscribe":{"type":"method","name":"handle_subscribe","children":[],"call":["channel make_private ","WebsocketRails  [] "," message [] "," message ","WebsocketRails  []  make_private "]}," RedmineRt InstanceMethods handle_journal_after_create":{"type":"method","name":"handle_journal_after_create","children":[],"call":["Broadcaster  broadcast ","user login ","User  find ","issue author_id ","user_id != "," user_id ","(send\n  (lvar :issue) :author_id) uniq each ","(send\n  (lvar :issue) :author_id) uniq ","issue assigned_to_id "," notes [] "," notes ","issue subject ","issue id ","issue ! ","Issue  find "," journalized_id "," logger debug "," logger ","User  find  login ","Issue  find  author_id ","User  find _id != "," User  find _id ","(send\n  (lvar :Issue  find ) :author_id) uniq each ","(send\n  (lvar :Issue  find ) :author_id) uniq ","Issue  find  assigned_to_id ","Issue  find  subject ","Issue  find  id ","Issue  find  ! "]}," RedmineRt IssuesControllerPatch issue_history_tabs_for_redmine_rt":{"type":"method","name":"issue_history_tabs_for_redmine_rt","children":[],"call":["tabs << "," issue_path "," tab_issue_path ","@issue spent_hours > ","@issue spent_hours ","User  current allowed_to? ","User  current ","value notes blank? ","value notes ","@journals reject ","@journals select "]}}