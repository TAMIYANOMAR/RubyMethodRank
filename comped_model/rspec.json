{" Spec exit?":{"type":"method","name":"exit?","children":[],"call":["Test Unit  run? ","Object  const_defined? ! ","Object  const_defined? "]}," Spec run":{"type":"method","name":"run","children":[],"call":[" rspec_options run_examples "," rspec_options "," run? ","Runner  options run_examples ","Runner  options "]}," Spec run?":{"type":"method","name":"run?","children":[],"call":[" rspec_options examples_run? "," rspec_options ","Runner  options examples_run? ","Runner  options "]}," Spec Translator standard_matcher?":{"type":"method","name":"standard_matcher?","children":[],"call":["matched nil? ! ","matched nil? ","matcher =~ ","patterns detect "]}," Spec Translator translate_line":{"type":"method","name":"translate_line","children":[],"call":["post gsub! "," standard_matcher? ","line =~ ","post =~ ","line gsub! "]}," Spec Translator translate_file":{"type":"method","name":"translate_file","children":[],"call":["io write ","File  open ","translation << "," translate_line ","io each_line "," translate "]}," Spec Translator translate_dir":{"type":"method","name":"translate_dir","children":[],"call":[" translate ","File  join ","sub_from [] ","from length + ","from length ","Dir  [] each ","Dir  [] ","FileUtils  mkdir_p ","File  directory? "," translate_file "," translate_dir ","File  expand_path ","sub_File  expand_path  [] ","File  expand_path  length + ","File  expand_path  length ","File  direcFile  expand_path ry? ","File  expand_sub_from []  "]}," Spec Translator translate":{"type":"method","name":"translate","children":[],"call":[" translate_file ","from =~ "," translate_dir ","File  directory? ","File  expand_path "," standard_matcher? ","post gsub! ","line =~ ","post =~ ","File  expand_path  =~ ","File  direcFile  expand_path ry? "]}," Spec Story World And":{"type":"method","name":"And","children":[],"call":["World  store_and_call "]}," Spec Story World Then":{"type":"method","name":"Then","children":[],"call":["World  store_and_call "]}," Spec Story World When":{"type":"method","name":"When","children":[],"call":["World  store_and_call "]}," Spec Story World Given":{"type":"method","name":"Given","children":[],"call":["World  store_and_call "]}," Spec Story World GivenScenario":{"type":"method","name":"GivenScenario","children":[],"call":["World  run_given_scenario_with_suspended_listeners ","GivenScenario  new "]}," Spec Story World errors":{"type":"method","name":"errors","children":[],"call":["World  errors "]}," Spec Story World start_collecting_errors":{"type":"method","name":"start_collecting_errors","children":[],"call":[" errors clear "," errors "]}," Spec Story World dry_run":{"type":"method","name":"dry_run","children":[],"call":[" Spec Story Runner  dry_run "]}," Spec Story World store_and_call":{"type":"method","name":"store_and_call","children":[],"call":[" errors << "," errors ","l step_failed ","@listeners each ","l step_pending ","l step_succeeded "," listeners each "," listeners ","step perform "," dry_run ","l step_upcoming ","step parse_args ","args empty? "," step_names << "," step_names ","step name "," step_mother find "," step_mother "," step_mother store ","Step  new "," block_given? "," Spec Story Runner  dry_run ","l  step_mother find _failed ","l  step_mother find _pending ","l  step_mother find _succeeded "," step_mother find  perform ","l  step_mother find _upcoming ","step parse_step parse_args  "," step_mother find  parse_args ","step parse_args  empty? "," step name s << ","  step_mother find _names << "," step name s ","  step_mother find _names "," step_mother find  name ","  step_mother find _mother find ","  step_mother find _mother ","  step_mother find _mother store "]}," Spec Story World run_given_scenario_with_suspended_listeners":{"type":"method","name":"run_given_scenario_with_suspended_listeners","children":[],"call":["@listeners replace ","scenario perform "," dry_run ","@listeners clear ","l found_scenario "," listeners each "," listeners ","Array  new "," Spec Story Runner  dry_run "]}," Spec Story World step_names":{"type":"method","name":"step_names","children":[],"call":[]}," Spec Story World use":{"type":"method","name":"use","children":[],"call":[" step_mother use "," step_mother "]}," Spec Story World step_mother":{"type":"method","name":"step_mother","children":[],"call":["StepMother  new "]}," Spec Story World add_listener":{"type":"method","name":"add_listener","children":[],"call":[" listeners << "," listeners "]}," Spec Story World listeners":{"type":"method","name":"listeners","children":[],"call":[]}," Spec Story World create":{"type":"method","name":"create","children":[],"call":["cls new extend ","cls new "]}," Spec Story Story steps_for":{"type":"method","name":"steps_for","children":[],"call":["$rspec_story_steps [] "]}," Spec Story Story assign_steps_to":{"type":"method","name":"assign_steps_to","children":[],"call":["assignee use "," steps_for ","step is_a? ","steps each ","steps is_a? ","@params [] ","keys each "," @params [] _for ","@params []  each ","@params []  is_a? "]}," Spec Story Story run_in":{"type":"method","name":"run_in","children":[],"call":["obj instance_eval "]}," Spec Story Story []":{"type":"method","name":"[]","children":[],"call":["@params [] "]}," Spec Story Story initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story StepMother empty?":{"type":"method","name":"empty?","children":[],"call":["@steps empty? "]}," Spec Story StepMother clear":{"type":"method","name":"clear","children":[],"call":["@steps clear "]}," Spec Story StepMother find":{"type":"method","name":"find","children":[],"call":["@steps find ","@steps add "," raise ","Spec Example ExamplePendingError  new ","Step  new ","@steps find nil? ","unstripped_name strip ","unstripped_unstripped_name strip  strip "]}," Spec Story StepMother store":{"type":"method","name":"store","children":[],"call":["@steps add "]}," Spec Story StepMother use":{"type":"method","name":"use","children":[],"call":["@steps << "]}," Spec Story StepMother initialize":{"type":"method","name":"initialize","children":[],"call":["StepGroup  new "]}," Spec Story StepGroup create_matcher":{"type":"method","name":"create_matcher","children":[],"call":["@hash_of_lists_of_steps [] << ","@hash_of_lists_of_steps [] ","Step  new "]}," Spec Story StepGroup <<":{"type":"method","name":"<<","children":[],"call":["other_step_matchers add_to ","other_step_matchers respond_to? "]}," Spec Story StepGroup add_to":{"type":"method","name":"add_to","children":[],"call":["other_step_matchers add ","@hash_of_lists_of_steps [] ","(sym :given_scenario) each "]}," Spec Story StepGroup empty?":{"type":"method","name":"empty?","children":[],"call":["@hash_of_lists_of_steps [] empty? ","@hash_of_lists_of_steps [] ","(sym :given_scenario) each "]}," Spec Story StepGroup clear":{"type":"method","name":"clear","children":[],"call":["@hash_of_lists_of_steps clear "]}," Spec Story StepGroup add":{"type":"method","name":"add","children":[],"call":["(send\n  (send\n    (ivar :@hash_of_lists_of_steps) :[]\n    (lvar :type)) :<<\n  (lvar :steps)) flatten! ","@hash_of_lists_of_steps [] << ","@hash_of_lists_of_steps [] "]}," Spec Story StepGroup Then":{"type":"method","name":"Then","children":[],"call":[" create_matcher "]}," Spec Story StepGroup When":{"type":"method","name":"When","children":[],"call":[" create_matcher "]}," Spec Story StepGroup Given":{"type":"method","name":"Given","children":[],"call":[" create_matcher "]}," Spec Story StepGroup GivenScenario":{"type":"method","name":"GivenScenario","children":[],"call":[" create_matcher "]}," Spec Story StepGroup find":{"type":"method","name":"find","children":[],"call":["step matches? ","@hash_of_lists_of_steps [] each ","@hash_of_lists_of_steps [] "]}," Spec Story StepGroup initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval "," class steps add_to "," class steps "," class ","h []= ","Hash  new "]}," Spec Story StepGroup steps":{"type":"method","name":"steps","children":[],"call":[]}," Spec Story StepGroupHash initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Spec Story StepGroup  new "]}," Spec Story Step init_expression":{"type":"method","name":"init_expression","children":[],"call":["Regexp  new ","expression gsub! ","expression =~ ","string_or_regexp source ","Regexp  === ","(str \"?\") each ","string_or_regexp dup ","String  === ","expression sub! ","string_or_regexp source  gsub! ","string_or_regexp dup  gsub! ","string_or_regexp source  =~ ","string_or_regexp dup  =~ ","string_or_regexp source  sub! ","string_or_regexp dup  sub! "]}," Spec Story Step init_name":{"type":"method","name":"init_name","children":[],"call":[]}," Spec Story Step pending?":{"type":"method","name":"pending?","children":[],"call":["@pending == "]}," Spec Story Step set_pending":{"type":"method","name":"set_pending","children":[],"call":[]}," Spec Story Step init_module":{"type":"method","name":"init_module","children":[],"call":[" define_method ","Module  new "," sanitize ","name to_s "]}," Spec Story Step sanitize":{"type":"method","name":"sanitize","children":[],"call":["a_string_or_regexp to_s ","a_string_or_regexp source ","Regexp  == "]}," Spec Story Step parse_args":{"type":"method","name":"parse_args","children":[],"call":["name match [] ","name match ","name strip match [] ","name strip match ","name strip "]}," Spec Story Step matches?":{"type":"method","name":"matches?","children":[],"call":["(lvasgn :matches\n  (send\n    (lvar :name) :match\n    (ivar :@expression))) nil? ! ","(lvasgn :matches\n  (send\n    (lvar :name) :match\n    (ivar :@expression))) nil? ","name match ","(send\n  (send\n    (lvar :name) :strip) :=~\n  (ivar :@expression)) nil? ! ","(send\n  (send\n    (lvar :name) :strip) :=~\n  (ivar :@expression)) nil? ","name strip =~ ","name strip ","(lvasgn :name match \n  (send\n    (lvar :name) :match\n    (ivar :@expression))) nil? ! ","(lvasgn :name match \n  (send\n    (lvar :name) :match\n    (ivar :@expression))) nil? "]}," Spec Story Step perform":{"type":"method","name":"perform","children":[],"call":["instance __send__ "," sanitize ","instance extend "," raise ","Spec Example ExamplePendingError  new "," pending? "]}," Spec Story Step initialize":{"type":"method","name":"initialize","children":[],"call":[" set_pending "," init_module "," block_given? "," init_expression "," init_name "," assign_expression "]}," Spec Story Scenario initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner dry_run":{"type":"method","name":"dry_run","children":[],"call":[" run_options dry_run "," run_options "]}," Spec Story Runner register_exit_hook":{"type":"method","name":"register_exit_hook","children":[],"call":[" exit ","Runner  story_runner run_stories ","Runner  story_runner "," at_exit "]}," Spec Story Runner register_listener":{"type":"method","name":"register_listener","children":[],"call":[" scenario_runner add_listener "," scenario_runner "," world_creator add_listener "," world_creator "," story_runner add_listener "," story_runner "]}," Spec Story Runner create_story_runner":{"type":"method","name":"create_story_runner","children":[],"call":["StoryRunner  new "," world_creator "," scenario_runner ","Runner StoryRunner  new "]}," Spec Story Runner world_creator":{"type":"method","name":"world_creator","children":[],"call":[]}," Spec Story Runner scenario_runner":{"type":"method","name":"scenario_runner","children":[],"call":["ScenarioRunner  new "]}," Spec Story Runner story_runner":{"type":"method","name":"story_runner","children":[],"call":[" register_exit_hook "," register_listener "," run_options story_formatters each "," run_options story_formatters "," run_options "," create_story_runner ","Runner  register_exit_hook ","StoryRunner  new "," world_creator "," scenario_runner "]}," Spec Story Runner run_options":{"type":"method","name":"run_options","children":[],"call":[" rspec_options "," Spec Runner OptionParser  parse ","Spec Runner  options "]}," Spec Story Runner StoryRunner scenario_from_current_story":{"type":"method","name":"scenario_from_current_story","children":[],"call":["s name == ","s name ","@scenarios_by_story [] find ","@scenarios_by_story [] ","@current_story title "," current_story_runner scenario_from_current_story "," current_story_runner "]}," Spec Story Runner StoryRunner add_listener":{"type":"method","name":"add_listener","children":[],"call":["@listeners << "]}," Spec Story Runner StoryRunner run_stories":{"type":"method","name":"run_stories","children":[],"call":["l run_ended ","@listeners each ","l collected_steps ","(block\n  (send\n    (send\n      (const nil :World) :step_names) :collect)\n  (args\n    (arg :n))\n  (if\n    (send\n      (const nil :Regexp) :===\n      (lvar :n))\n    (send\n      (lvar :n) :source)\n    (send\n      (lvar :n) :to_s))) uniq sort ","(block\n  (send\n    (send\n      (const nil :World) :step_names) :collect)\n  (args\n    (arg :n))\n  (if\n    (send\n      (const nil :Regexp) :===\n      (lvar :n))\n    (send\n      (lvar :n) :source)\n    (send\n      (lvar :n) :to_s))) uniq ","n to_s ","n source ","Regexp  === ","World  step_names collect ","World  step_names ","World  step_mother clear ","World  step_mother ","l story_ended ","story narrative ","story title ","success & ","@scenario_runner run ","@world_creator create ","story [] ","scenarios each ","@scenarios_by_story [] ","l story_started ","story assign_steps_to ","@stories each ","l run_started "," scenarios size "," scenarios ","@stories empty? ","World  step_names uniq sort ","World  step_names uniq ","success &  & ","@@world_creator create _creator create ","@scenarios_by_story []  each ","@@scenarios_by_story [] _by_story [] "," @scenarios_by_story []  size "," @scenarios_by_story []  "]}," Spec Story Runner StoryRunner Story":{"type":"method","name":"Story","children":[],"call":["@scenarios_by_story []= ","collector scenarios ","story title ","story run_in ","ScenarioCollector  new ","@stories << ","Story  new ","@scenarios_by_Story  new  []= ","ScenarioCollector  new  scenarios ","Story  new  title ","Story  new  run_in "]}," Spec Story Runner StoryRunner initialize":{"type":"method","name":"initialize","children":[],"call":["StoryRunner  current_story_runner= "]}," Spec Story Runner StoryParser ThenState other":{"type":"method","name":"other","children":[],"call":["@parser add_to_last "]}," Spec Story Runner StoryParser ThenState outcome":{"type":"method","name":"outcome","children":[],"call":["@parser create_then "," remove_tag_from "]}," Spec Story Runner StoryParser ThenState one_more_of_the_same":{"type":"method","name":"one_more_of_the_same","children":[],"call":["@parser create_then "," remove_tag_from "]}," Spec Story Runner StoryParser WhenState other":{"type":"method","name":"other","children":[],"call":["@parser add_to_last "]}," Spec Story Runner StoryParser WhenState event":{"type":"method","name":"event","children":[],"call":["@parser create_when "," remove_tag_from "]}," Spec Story Runner StoryParser WhenState one_more_of_the_same":{"type":"method","name":"one_more_of_the_same","children":[],"call":["@parser create_when "," remove_tag_from "]}," Spec Story Runner StoryParser GivenState other":{"type":"method","name":"other","children":[],"call":["@parser add_to_last "]}," Spec Story Runner StoryParser GivenState given":{"type":"method","name":"given","children":[],"call":["@parser create_given "," remove_tag_from "]}," Spec Story Runner StoryParser GivenState one_more_of_the_same":{"type":"method","name":"one_more_of_the_same","children":[],"call":["@parser create_given "," remove_tag_from "]}," Spec Story Runner StoryParser ScenarioState scenario":{"type":"method","name":"scenario","children":[],"call":["@parser create_scenario "]}," Spec Story Runner StoryParser ScenarioState one_more_of_the_same":{"type":"method","name":"one_more_of_the_same","children":[],"call":[" raise ","IllegalStepError  new "]}," Spec Story Runner StoryParser StoryState eof":{"type":"method","name":"eof","children":[],"call":["@parser create_story "]}," Spec Story Runner StoryParser StoryState other":{"type":"method","name":"other","children":[],"call":["@parser add_story_line "]}," Spec Story Runner StoryParser StoryState outcome":{"type":"method","name":"outcome","children":[],"call":[" other "]}," Spec Story Runner StoryParser StoryState event":{"type":"method","name":"event","children":[],"call":[" other "]}," Spec Story Runner StoryParser StoryState given":{"type":"method","name":"given","children":[],"call":[" other "]}," Spec Story Runner StoryParser StoryState scenario":{"type":"method","name":"scenario","children":[],"call":["@parser transition_to ","@parser create_scenario ","@parser create_story "]}," Spec Story Runner StoryParser StoryState story":{"type":"method","name":"story","children":[],"call":["@parser add_story_line ","@parser create_story "]}," Spec Story Runner StoryParser StoryState one_more_of_the_same":{"type":"method","name":"one_more_of_the_same","children":[],"call":[" other "]}," Spec Story Runner StoryParser StartingState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryParser State comment":{"type":"method","name":"comment","children":[],"call":[]}," Spec Story Runner StoryParser State other":{"type":"method","name":"other","children":[],"call":[]}," Spec Story Runner StoryParser State eof":{"type":"method","name":"eof","children":[],"call":[]}," Spec Story Runner StoryParser State remove_tag_from":{"type":"method","name":"remove_tag_from","children":[],"call":["tokens [] join ","tokens [] ","tokens [] downcase match ","tag to_s ","tokens [] downcase ","line split ","line split  [] join ","line split  [] ","line split  [] downcase match ","line split  [] downcase "]}," Spec Story Runner StoryParser State outcome":{"type":"method","name":"outcome","children":[],"call":["@parser transition_to ","@parser create_then "," remove_tag_from "]}," Spec Story Runner StoryParser State event":{"type":"method","name":"event","children":[],"call":["@parser transition_to ","@parser create_when "," remove_tag_from "]}," Spec Story Runner StoryParser State given_scenario":{"type":"method","name":"given_scenario","children":[],"call":["@parser transition_to ","@parser create_given_scenario "," remove_tag_from "]}," Spec Story Runner StoryParser State given":{"type":"method","name":"given","children":[],"call":["@parser transition_to ","@parser create_given "," remove_tag_from "]}," Spec Story Runner StoryParser State scenario":{"type":"method","name":"scenario","children":[],"call":["@parser transition_to ","@parser create_scenario "]}," Spec Story Runner StoryParser State story":{"type":"method","name":"story","children":[],"call":["@parser transition_to ","@parser init_story "]}," Spec Story Runner StoryParser State initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryParser states":{"type":"method","name":"states","children":[],"call":["ThenState  new ","WhenState  new ","GivenState  new ","ScenarioState  new ","StoryState  new ","StartingState  new "]}," Spec Story Runner StoryParser transition_to":{"type":"method","name":"transition_to","children":[],"call":[" states [] "," states "]}," Spec Story Runner StoryParser add_to_last":{"type":"method","name":"add_to_last","children":[],"call":["@story_mediator add_to_last "]}," Spec Story Runner StoryParser create_then":{"type":"method","name":"create_then","children":[],"call":["@story_mediator create_then "]}," Spec Story Runner StoryParser create_when":{"type":"method","name":"create_when","children":[],"call":["@story_mediator create_when "]}," Spec Story Runner StoryParser create_given_scenario":{"type":"method","name":"create_given_scenario","children":[],"call":["@story_mediator create_given_scenario "]}," Spec Story Runner StoryParser create_given":{"type":"method","name":"create_given","children":[],"call":["@story_mediator create_given "]}," Spec Story Runner StoryParser create_scenario":{"type":"method","name":"create_scenario","children":[],"call":["@story_mediator create_scenario ","title gsub "]}," Spec Story Runner StoryParser create_story":{"type":"method","name":"create_story","children":[],"call":["@current_story_lines clear ","@story_mediator create_story ","@current_story_lines [] join ","@current_story_lines [] ","@current_story_lines [] gsub ","@current_story_lines empty? "]}," Spec Story Runner StoryParser add_story_line":{"type":"method","name":"add_story_line","children":[],"call":["@current_story_lines << "]}," Spec Story Runner StoryParser init_story":{"type":"method","name":"init_story","children":[],"call":[" add_story_line ","@current_story_lines clear "]}," Spec Story Runner StoryParser process_line":{"type":"method","name":"process_line","children":[],"call":["@state other ","@state one_more_of_the_same ","@state outcome ","@state event ","@state given_scenario ","@state given ","@state scenario ","@state story ","@state comment ","line strip! "]}," Spec Story Runner StoryParser parse":{"type":"method","name":"parse","children":[],"call":["@state eof "," process_line ","lines shift ","lines empty? ","line == ","lines reject! "]}," Spec Story Runner StoryParser initialize":{"type":"method","name":"initialize","children":[],"call":[" transition_to "]}," Spec Story Runner IllegalStepError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryMediator Step to_proc":{"type":"method","name":"to_proc","children":[],"call":[" send "," lambda "]}," Spec Story Runner StoryMediator Step initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryMediator Scenario last_step":{"type":"method","name":"last_step","children":[],"call":["@steps last "]}," Spec Story Runner StoryMediator Scenario add_step":{"type":"method","name":"add_step","children":[],"call":["@steps << "]}," Spec Story Runner StoryMediator Scenario to_proc":{"type":"method","name":"to_proc","children":[],"call":[" instance_eval ","steps each "," Scenario "," lambda ","step to_proc ","@steps collect "]}," Spec Story Runner StoryMediator Scenario initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryMediator Story current_scenario":{"type":"method","name":"current_scenario","children":[],"call":["@scenarios last "]}," Spec Story Runner StoryMediator Story add_scenario":{"type":"method","name":"add_scenario","children":[],"call":["@scenarios << "]}," Spec Story Runner StoryMediator Story to_proc":{"type":"method","name":"to_proc","children":[],"call":[" instance_eval ","scenarios each "," Story "," lambda ","@options merge ","scenario to_proc ","@scenarios collect ","@@options merge  merge "]}," Spec Story Runner StoryMediator Story initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner StoryMediator current_scenario":{"type":"method","name":"current_scenario","children":[],"call":[" current_story current_scenario "," current_story "]}," Spec Story Runner StoryMediator current_story":{"type":"method","name":"current_story","children":[],"call":["@stories last "]}," Spec Story Runner StoryMediator run_stories":{"type":"method","name":"run_stories","children":[],"call":["@runner instance_eval "," stories each "," stories "]}," Spec Story Runner StoryMediator add_to_last":{"type":"method","name":"add_to_last","children":[],"call":[" last_step name << "," last_step name "," last_step "]}," Spec Story Runner StoryMediator last_step":{"type":"method","name":"last_step","children":[],"call":[" current_scenario last_step "," current_scenario "]}," Spec Story Runner StoryMediator create_then":{"type":"method","name":"create_then","children":[],"call":[" current_scenario add_step ","Step  new "," current_scenario "]}," Spec Story Runner StoryMediator create_when":{"type":"method","name":"create_when","children":[],"call":[" current_scenario add_step ","Step  new "," current_scenario "]}," Spec Story Runner StoryMediator create_given_scenario":{"type":"method","name":"create_given_scenario","children":[],"call":[" current_scenario add_step ","Step  new "," current_scenario "]}," Spec Story Runner StoryMediator create_given":{"type":"method","name":"create_given","children":[],"call":[" current_scenario add_step ","Step  new "," current_scenario "]}," Spec Story Runner StoryMediator create_scenario":{"type":"method","name":"create_scenario","children":[],"call":[" current_story add_scenario ","Scenario  new "," current_story "]}," Spec Story Runner StoryMediator create_story":{"type":"method","name":"create_story","children":[],"call":["@stories << ","Story  new "]}," Spec Story Runner StoryMediator stories":{"type":"method","name":"stories","children":[],"call":["p to_proc ","@stories collect "]}," Spec Story Runner StoryMediator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner ScenarioRunner run_story_ignoring_scenarios":{"type":"method","name":"run_story_ignoring_scenarios","children":[{"type":"method","name":"Scenario","children":[],"asgn":[],"call":[]}],"call":[" remove_method ","story run_in "]}," Spec Story Runner ScenarioRunner add_listener":{"type":"method","name":"add_listener","children":[],"call":["@listeners << "]}," Spec Story Runner ScenarioRunner run":{"type":"method","name":"run","children":[],"call":["l scenario_failed ","scenario name ","scenario story title ","scenario story ","@listeners each ","l scenario_pending ","e message ","Spec Example ExamplePendingError  === ","world errors first ","world errors ","l scenario_succeeded ","world errors empty? ","world instance_eval ","scenario body ","world start_collecting_errors "," run_story_ignoring_scenarios ","l scenario_started ","l scworld errors first nario_failworld errors first d ","scworld errors first nario namworld errors first  ","scworld errors first nario story titlworld errors first  ","scworld errors first nario story ","@listworld errors first nworld errors first rs world errors first ach ","l scworld errors first nario_pworld errors first nding ","world errors first  mworld errors first ssagworld errors first  ","Spworld errors first c Examplworld errors first  Examplworld errors first Pworld errors first ndingError  === ","world world errors first rrors first ","world world errors first rrors ","l scworld errors first nario_succworld errors first world errors first dworld errors first d ","world world errors first rrors world errors first mpty? ","world instancworld errors first _world errors first val ","scworld errors first nario body ","world start_collworld errors first cting_world errors first rrors "," run_story_ignoring_scworld errors first narios ","l scworld errors first nario_startworld errors first d "]}," Spec Story Runner ScenarioRunner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner ScenarioCollector Scenario":{"type":"method","name":"Scenario","children":[],"call":["@scenarios << ","Scenario  new "]}," Spec Story Runner ScenarioCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Story Runner PlainTextStoryRunner steps":{"type":"method","name":"steps","children":[],"call":[" block_given? ","Spec Story StepGroup  new "]}," Spec Story Runner PlainTextStoryRunner run":{"type":"method","name":"run","children":[],"call":["mediator run_stories ","parser parse ","story_text split ","File  read ","Spec Story Runner StoryParser  new ","Spec Story Runner StoryMediator  new "," steps "," raise ","@story_file nil? ","Spec Story Runner  story_runner ","Spec Story Runner StoryMediator  new  run_stories ","Spec Story Runner StoryParser  new  parse ","File  read  split "]}," Spec Story Runner PlainTextStoryRunner load":{"type":"method","name":"load","children":[],"call":[]}," Spec Story Runner PlainTextStoryRunner []=":{"type":"method","name":"[]=","children":[],"call":["@options []= "]}," Spec Story Runner PlainTextStoryRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","args shift ","args empty? ","args pop ","Hash  === ","args last "]}," Spec Story GivenScenario perform":{"type":"method","name":"perform","children":[],"call":["Runner ScenarioRunner  new run ","Runner ScenarioRunner  new ","Runner StoryRunner  scenario_from_current_story ","Runner StoryRunner  Runner StoryRunner  scenario_from_current_story _from_current_story "]}," Spec Story GivenScenario initialize":{"type":"method","name":"initialize","children":[],"call":[]}," String arg_regexp":{"type":"method","name":"arg_regexp","children":[],"call":[]}," String step_name":{"type":"method","name":"step_name","children":[],"call":[]}," Regexp arg_regexp":{"type":"method","name":"arg_regexp","children":[],"call":[]}," Regexp step_name":{"type":"method","name":"step_name","children":[],"call":[" source gsub "," source "]}," Spec Story Extensions Main rspec_story_steps":{"type":"method","name":"rspec_story_steps","children":[],"call":["Spec Story StepGroupHash  new "]}," Spec Story Extensions Main StoryRunnerStepGroupAdapter run":{"type":"method","name":"run","children":[],"call":["runner run ","runner steps << ","runner steps ","Spec Story Runner PlainTextStoryRunner  new ","Spec Story Runner PlainTextStoryRunner  new  run ","Spec Story Runner PlainTextStoryRunner  new  steps << ","Spec Story Runner PlainTextStoryRunner  new  steps "]}," Spec Story Extensions Main with_steps_for":{"type":"method","name":"with_steps_for","children":[],"call":["steps instance_eval ","steps << "," rspec_story_steps [] "," rspec_story_steps ","tags each "," extend ","Spec Story StepGroup  new "]}," Spec Story Extensions Main steps_for":{"type":"method","name":"steps_for","children":[],"call":["steps instance_eval "," rspec_story_steps [] "," rspec_story_steps "," rspec_story_steps []  instance_eval "," rspec_story_ rspec_story_steps []  [] "," rspec_story_ rspec_story_steps []  "]}," Spec Story Extensions Main run_story":{"type":"method","name":"run_story","children":[],"call":["runner run ","runner instance_eval ","Spec Story Runner PlainTextStoryRunner  new ","Spec Story Runner PlainTextStoryRunner  new  run ","Spec Story Runner PlainTextStoryRunner  new  instance_eval "]}," Spec Story Extensions Main Story":{"type":"method","name":"Story","children":[],"call":[" Spec Story Runner  story_runner Story "," Spec Story Runner  story_runner "]}," Spec Runner register_at_exit_hook":{"type":"method","name":"register_at_exit_hook","children":[],"call":[" exit ","Spec  exit? ","Spec  run ","Spec  run? "," at_exit ","Spec Example ExampleGroupFactory  all_registered? "," options example_groups "," options "," exit? "," run ","Spec Example ExampleGroupFactory  registered_or_ancestor_of_registered? "," run? "]}," Spec Runner configure":{"type":"method","name":"configure","children":[],"call":[" configuration ","@configuration nil? "]}," Spec Runner configuration":{"type":"method","name":"configuration","children":[],"call":["Spec Example Configuration  new ","Spec DSL Configuration  new ","Spec Runner Configuration  new "]}," Spec Runner SpecParser parse_backtrace":{"type":"method","name":"parse_backtrace","children":[],"call":[" Integer ","split_line [] ","trace_line split ","backtrace collect ","trace_line =~ "," Array collect "," Array ","trace_line split  [] "]}," Spec Runner SpecParser is_best_match?":{"type":"method","name":"is_best_match?","children":[],"call":["example_line > "," best_match [] to_i "," best_match [] "," best_match ","example_line <= ","file == ","File  expand_path "]}," Spec Runner SpecParser consider_example_for_best_match":{"type":"method","name":"consider_example_for_best_match","children":[],"call":[" best_match []= "," best_match "," best_match clear "," is_best_match? ","parsed_backtrace each "," parse_backtrace ","example implementation_backtrace ","example backtrace "," parse_location ","example location "," parse_backtrace  each "]}," Spec Runner SpecParser consider_example_groups_for_best_match":{"type":"method","name":"consider_example_groups_for_best_match","children":[],"call":[" best_match []= "," best_match "," best_match clear "," is_best_match? ","parsed_backtrace each "," parse_backtrace ","example_group registration_backtrace "," parse_backtrace  each "]}," Spec Runner SpecParser spec_name_for":{"type":"method","name":"spec_name_for","children":[],"call":[" best_match [] description "," best_match [] "," best_match "," consider_example_for_best_match ","example_group examples each ","example_group examples "," consider_example_groups_for_best_match "," rspec_options example_groups each "," rspec_options example_groups "," rspec_options ","File  expand_path "," best_match clear "," spec_at_line "," context_at_line ","io read ","behaviour_line < "," example_at_line "," behaviour_at_line ","example_group_line < "," example_group_at_line ","Spec Runner  options example_groups each ","Spec Runner  options example_groups ","Spec Runner  options "," consider_example_group_for_best_match ","@run_options example_groups each ","@run_options example_groups ","example_group location "," r spec_at_line _options example_groups each "," r spec_at_line _options example_groups "," r spec_at_line _options ","  spec_at_line _at_line ","  context_at_line _at_line "]}," Spec Runner SpecParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Reporter Failure example_name":{"type":"method","name":"example_name","children":[],"call":["@example __full_description ","@example full_description ","@example description "]}," Spec Runner Reporter Failure expectation_not_met?":{"type":"method","name":"expectation_not_met?","children":[],"call":["@exception is_a? "]}," Spec Runner Reporter Failure pending_fixed?":{"type":"method","name":"pending_fixed?","children":[],"call":["@exception is_a? "]}," Spec Runner Reporter Failure header":{"type":"method","name":"header","children":[],"call":[" example_name ","@exception class name ","@exception class "," pending_fixed? "," expectation_not_met? "," class_name "]}," Spec Runner Reporter Failure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Reporter example_pending":{"type":"method","name":"example_pending","children":[],"call":["f example_pending "," formatters each "," formatters ","@formatters each ","example_group description ","formatter example_pending ","Kernel  warn "," formatter_uses_deprecated_example_pending_method? ","example location ","Spec  warn "]}," Spec Runner Reporter example_passed":{"type":"method","name":"example_passed","children":[],"call":["f example_passed "," formatters each "," formatters ","@formatters each ","STDOUT  flush "]}," Spec Runner Reporter duration":{"type":"method","name":"duration","children":[],"call":["@end_time - ","@start_time nil? ","@end_time nil? "]}," Spec Runner Reporter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":["f dump_pending "," formatters each "," formatters "]}," Spec Runner Reporter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":["index + ","f dump_failure "," formatters each "," formatters ","@failures inject ","@failures empty? ","@formatter dump_failure ","@formatters each ","STDOUT  flush "]}," Spec Runner Reporter clear":{"type":"method","name":"clear","children":[],"call":[]}," Spec Runner Reporter backtrace_tweaker":{"type":"method","name":"backtrace_tweaker","children":[],"call":["@options backtrace_tweaker "]}," Spec Runner Reporter formatters":{"type":"method","name":"formatters","children":[],"call":["@options formatters "]}," Spec Runner Reporter dump":{"type":"method","name":"dump","children":[],"call":["@failures length ","f close ","f dump_summary ","@examples length "," duration "," formatters each "," formatters "," dump_failures "," dump_pending ","f start_dump ","@formatter dump_summary ","@spec_names length ","@formatter start_dump ","@context_names length ","STDOUT  flush ","@example_names length ","@formatters each "]}," Spec Runner Reporter end":{"type":"method","name":"end","children":[],"call":["Time  new "]}," Spec Runner Reporter start":{"type":"method","name":"start","children":[],"call":["f start "," formatters each "," formatters ","Time  new "," clear ","@formatter start "," clear! ","STDOUT  flush ","@formatters each "]}," Spec Runner Reporter failure":{"type":"method","name":"failure","children":[],"call":["f example_failed ","@failures length "," formatters each "," formatters ","@failures << ","Failure  new "," backtrace_tweaker tweak_backtrace "," backtrace_tweaker ","example description "," example_groups last description "," example_groups last "," example_groups ","@Failure  new s length ","@Failure  new s << "]}," Spec Runner Reporter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" example_failed "," example_pending ","error message ","Spec Example ExamplePendingError  === "," example_passed ","error nil? ","@examples << ","STDOUT  flush ","@example_names << "," example_not_implemented ","@behaviour_names last ","Spec DSL ExamplePendingError  === "," example_groups last "," example_groups ","error pending_caller ","example location "]}," Spec Runner Reporter example_started":{"type":"method","name":"example_started","children":[],"call":["f example_started "," formatters each "," formatters ","STDOUT  flush ","@formatters each "]}," Spec Runner Reporter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" example_groups << "," example_groups ","f add_example_group "," formatters each "," formatters "]}," Spec Runner Reporter initialize":{"type":"method","name":"initialize","children":[],"call":[" clear ","@options reporter= "," clear! "]}," Spec Runner Options stderr?":{"type":"method","name":"stderr?","children":[],"call":["@error_stream == "]}," Spec Runner Options set_spec_from_line_number":{"type":"method","name":"set_spec_from_line_number","children":[],"call":[" exit "," stderr? "," error_stream puts "," error_stream "," files inspect "," files ","SpecParser  new spec_name_for "," line_number "," files [] ","SpecParser  new ","File  directory? "," files length == "," files length "," examples empty? "," examples ","LineNumberQuery  new spec_name_for ","LineNumberQuery  new "," SpecParser  new spec_name_for s empty? "," LineNumberQuery  new spec_name_for s empty? "," SpecParser  new spec_name_for s "," LineNumberQuery  new spec_name_for s "]}," Spec Runner Options default_differ":{"type":"method","name":"default_differ","children":[],"call":[" differ_class= "," require "]}," Spec Runner Options sorter":{"type":"method","name":"sorter","children":[],"call":["FILE_SORTERS  [] "," loadby "]}," Spec Runner Options sorted_files":{"type":"method","name":"sorted_files","children":[],"call":[" files "," files sort "," sorter "]}," Spec Runner Options heckle":{"type":"method","name":"heckle","children":[],"call":["heckle_runner heckle_with "," heckle_runner= "," heckle_runner "," heckle_runner heckle_with "," heckle_runner  heckle_with ","  heckle_runner = ","  heckle_runner  ","  heckle_runner  heckle_with "]}," Spec Runner Options custom_runner?":{"type":"method","name":"custom_runner?","children":[],"call":[" user_input_for_runner "]}," Spec Runner Options custom_runner":{"type":"method","name":"custom_runner","children":[],"call":["runner_type new "," load_class ","ClassAndArgumentsParser  parse "," user_input_for_runner "," custom_runner? "," load_class  new "]}," Spec Runner Options load_class":{"type":"method","name":"load_class","children":[],"call":[" exit "," raise ","@error_stream puts "," eval "," binding ","name inspect ","2 == ","name =~ ","@err puts "]}," Spec Runner Options differ_class=":{"type":"method","name":"differ_class=","children":[],"call":["Spec Expectations  differ= "," differ_class new "," differ_class "]}," Spec Runner Options examples_should_be_run?":{"type":"method","name":"examples_should_be_run?","children":[],"call":["@examples_should_be_run nil? "]}," Spec Runner Options files_to_load":{"type":"method","name":"files_to_load","children":[],"call":[" raise ","result << ","File  file? ","Dir  [] ","File  expand_path ","pattern strip "," filename_pattern split each "," filename_pattern split "," filename_pattern ","File  directory? "," sorted_files each "," sorted_files "," test "]}," Spec Runner Options number_of_examples":{"type":"method","name":"number_of_examples","children":[],"call":["example_group number_of_examples ","@example_groups each ","sum + ","@example_groups inject ","group number_of_examples "," examples size "," examples "," examples empty? "]}," Spec Runner Options load_heckle_runner":{"type":"method","name":"load_heckle_runner","children":[],"call":["HeckleRunner  new "," require ","p =~ ","(regexp\n  (str \"mswin\")\n  (regopt)) detect "," Spec Runner HeckleRunner  new ","Spec Ruby  version to_f == ","Spec Ruby  version to_f ","Spec Ruby  version "," which_heckle_runner "]}," Spec Runner Options load_formatters":{"type":"method","name":"load_formatters","children":[],"call":["formatter_type new "," load_class "," eval "," binding ","formatters [] [] ","formatters [] "," require ","format_options map "," formatter_options "," load_class  new "]}," Spec Runner Options story_formatters":{"type":"method","name":"story_formatters","children":[],"call":[" load_formatters "]}," Spec Runner Options formatters":{"type":"method","name":"formatters","children":[],"call":[" load_formatters "]}," Spec Runner Options parse_format":{"type":"method","name":"parse_format","children":[],"call":["@format_options << "," raise ","ClassAndArgumentsParser  parse "," exit ","out_stream == ","error_stream puts ","@formatters << ","formatter_type new "," eval ","BUILT_IN_FORMATTERS  [] ","2 != ","format =~ "," load_class ","where nil? "," split_at_colon "]}," Spec Runner Options parse_example":{"type":"method","name":"parse_example","children":[],"call":["File  open read split ","File  open read ","File  open ","File  file? ","(send\n  (send\n    (send\n      (const nil :File) :open\n      (lvar :example)) :read) :split\n  (str \"\\n\")) flatten "]}," Spec Runner Options parse_diff":{"type":"method","name":"parse_diff","children":[],"call":[" differ_class= "," load_class "," default_differ "," exit ","out_stream == ","error_stream puts "," eval "," require ","(sym :context) include? "]}," Spec Runner Options colour=":{"type":"method","name":"colour=","children":[],"call":[" warn "," require ","RUBY_PLATFORM  =~ "," raise ","PLATFORM  =~ ","@output_stream equal? ","ENV  [] ","Config CONFIG  [] =~ ","Config CONFIG  [] "]}," Spec Runner Options examples_should_not_be_run":{"type":"method","name":"examples_should_not_be_run","children":[],"call":[]}," Spec Runner Options examples_run?":{"type":"method","name":"examples_run?","children":[],"call":[]}," Spec Runner Options run_examples":{"type":"method","name":"run_examples","children":[],"call":["part call "," after_suite_parts each "," after_suite_parts "," heckle "," heckle_runner ","runner run "," set_spec_from_line_number "," line_number "," example_groups empty? "," example_groups ","runner load_files "," files_to_load ","ExampleGroupRunner  new "," custom_runner "," before_suite_parts each "," before_suite_parts "," examples_should_be_run? ","part arity < ","part arity "," plugin_mock_framework "," define_predicate_matchers "," require_ruby_debug "," debug "," ignore_backtrace_patterns "," add_dir_from_project_root_to_load_path ","(str \"spec\") each "]}," Spec Runner Options remove_example_group":{"type":"method","name":"remove_example_group","children":[],"call":["@example_groups delete "]}," Spec Runner Options add_example_group":{"type":"method","name":"add_example_group","children":[],"call":["@example_groups << "]}," Spec Runner Options initialize":{"type":"method","name":"initialize","children":[],"call":["Reporter  new ","QuietBacktraceTweaker  new "]}," Spec Runner OptionParser stdout?":{"type":"method","name":"stdout?","children":[],"call":["@out_stream == "]}," Spec Runner OptionParser parse_help":{"type":"method","name":"parse_help","children":[],"call":[" exit "," stdout? ","@out_stream puts ","out_stream == ","out_stream puts "]}," Spec Runner OptionParser parse_version":{"type":"method","name":"parse_version","children":[],"call":[" exit "," stdout? ","@out_stream puts ","out_stream == ","out_stream puts "]}," Spec Runner OptionParser parse_drb":{"type":"method","name":"parse_drb","children":[],"call":["DrbCommandLine  run "," class parse "," class ","@options examples_should_not_be_run ","argv delete ","OPTIONS  [] [] ","OPTIONS  [] ","@options argv ","args_copy delete_at ","args_copy index ","@error_stream puts ","@options argv  delete ","@options @options argv  "]}," Spec Runner OptionParser write_generated_options":{"type":"method","name":"write_generated_options","children":[],"call":["@options examples_should_not_be_run ","@out_stream puts ","io puts ","@argv join ","File  open "]}," Spec Runner OptionParser parse_generate_options":{"type":"method","name":"parse_generate_options","children":[],"call":[" write_generated_options ","@argv delete_at ","@argv index ","(str \"-G\") each ","@argv @argv index  "]}," Spec Runner OptionParser parse_options_file":{"type":"method","name":"parse_options_file","children":[],"call":[" parse_drb ","@argv push ","(send\n  (send\n    (const nil :IO) :readlines\n    (lvar :options_file)) :map) flatten ","l chomp split ","l chomp ","IO  readlines map ","IO  readlines ","CommandLine  run ","args_copy + ","args_copy delete_at ","args_copy index ","(send\n  (send\n    (const nil :File) :readlines\n    (lvar :options_file)) :map) flatten ","File  readlines map ","File  readlines "]}," Spec Runner OptionParser invoke_requires":{"type":"method","name":"invoke_requires","children":[],"call":[" require ","requires split each ","requires split "]}," Spec Runner OptionParser order!":{"type":"method","name":"order!","children":[],"call":["blk call ","@options files << ","@options files "," parse_drb "," parse_generate_options ","@options argv= ","@argv dup "," set_spec_from_line_number ","@options line_number ","Spec  spec_command? ","@argv empty? ","argv dup "," class spec_command? "," class "," parse_file_options ","@argv empty? & ","@options line_number= ","2 to_i ","file =~ ","argv dup  dup ","argv dup  empty? ","argv dup  empty? & "]}," Spec Runner OptionParser initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_help "," on_tail ","OPTIONS  [] "," parse_version "," on ","@options user_input_for_runner= "," parse_options_file ","@options dry_run= ","@options load_heckle_runner ","@options timeout= ","timeout to_f ","@options reverse= ","@options loadby= ","@options backtrace_tweaker= ","NoisyBacktraceTweaker  new "," invoke_requires ","@options parse_format ","@options line_number= ","line_number to_i ","@options parse_example ","@options colour= ","@options parse_diff ","@options filename_pattern= "," separator "," banner= ","Options  new ","SpecParser  new ","@options autospec= ","@options debug= ","@options drb_port= ","Options  new  user_input_for_runner= ","Options  new  dry_run= ","Options  new  load_heckle_runner ","Options  new  timeout= ","Options  new  reverse= ","Options  new  loadby= ","Options  new  backtrace_tweaker= ","Options  new  parse_format ","Options  new  line_number= ","Options  new  parse_example ","Options  new  colour= ","Options  new  parse_diff ","Options  new  filename_pattern= ","Options  new  autospec= ","Options  new  debug= ","Options  new  drb_port= "]}," Spec Runner OptionParser parse":{"type":"method","name":"parse","children":[],"call":["parser options ","parser parse "," new "," set_spec_from_line_number ","options line_number "," exit ","err == ","err puts ","args empty? ","opts parse! ","out == ","out puts ","opts on_tail ","opts on ","options dry_run= ","options backtrace_tweaker= ","NoisyBacktraceTweaker  new "," require ","options formatter_type= "," eval ","options line_number= ","line_number to_i ","options spec_name= ","options colour= ","options differ_class= ","options diff_format= ","(sym :context) include? ","options diff_format ","options context_lines= ","opts separator ","opts banner= "," OptionParser  new ","QuietBacktraceTweaker  new ","options out= ","OpenStruct  new ","File  new ","options heckle_runner= ","HeckleRunner  new ","DrbCommandLine  run ","args_copy delete_at ","args_copy index ","options generate= ","io puts ","args_copy join ","File  open ","CommandLine  run ","args_copy + ","s chomp! ","IO  readlines each ","IO  readlines ","PLATFORM  == ","req split each ","req split ","args dup ","options formatters << ","Formatter ProgressBarFormatter  new ","options formatters ","options formatters empty? ","options runner_type= ","(send\n  (send\n    (const nil :IO) :readlines\n    (lvar :options_file)) :map) flatten ","l chomp split ","l chomp ","IO  readlines map ","options timeout= ","timeout to_f ","options reverse= ","options loadby= ","formatter_type new ","BUILT_IN_FORMATTERS  [] "," raise ","2 != ","format =~ ","options examples= ","File  open read split ","File  open read ","File  file? ","options formatters= ","Options  new "," parse_help ","COMMAND_LINE  [] "," parse_version ","opts rspec_on "," parse_drb ","options parse_runner ","options parse_generate_options "," parse_options_file ","options parse_heckle ","options parse_require ","options parse_format ","options parse_example ","options parse_diff "," on ","options runner_arg= "," new  options ","parser OpenStruct  new  ","parser Options  new  "," new  parse ","OpenStruct  new  line_number ","Options  new  line_number ","OpenStruct  new  dry_run= ","Options  new  dry_run= ","OpenStruct  new  backtrace_tweaker= ","Options  new  backtrace_tweaker= ","OpenStruct  new  formatter_type= ","Options  new  formatter_type= ","OpenStruct  new  line_number= ","Options  new  line_number= ","OpenStruct  new  spec_name= ","Options  new  spec_name= ","OpenStruct  new  colour= ","Options  new  colour= ","OpenStruct  new  differ_class= ","Options  new  differ_class= ","OpenStruct  new  diff_format= ","Options  new  diff_format= ","OpenStruct  new  diff_format ","Options  new  diff_format ","OpenStruct  new  context_lines= ","Options  new  context_lines= ","OpenStruct  new  out= ","Options  new  out= ","OpenStruct  new  heckle_runner= ","Options  new  heckle_runner= ","args dup  delete_at ","args dup  index ","OpenStruct  new  generate= ","Options  new  generate= ","args dup  join ","args dup  + ","OpenStruct  new  formatters << ","Options  new  formatters << ","OpenStruct  new  formatters ","Options  new  formatters ","OpenStruct  new  formatters empty? ","Options  new  formatters empty? ","OpenStruct  new  runner_type= ","Options  new  runner_type= ","(send\n  (send\n    (const nil :IO) :readlines\n    (lvar :OpenStruct  new _file)) :map) flatten ","(send\n  (send\n    (const nil :IO) :readlines\n    (lvar :Options  new _file)) :map) flatten ","OpenStruct  new  timeout= ","Options  new  timeout= ","OpenStruct  new  reverse= ","Options  new  reverse= ","OpenStruct  new  loadby= ","Options  new  loadby= ","OpenStruct  new  examples= ","Options  new  examples= ","OpenStruct  new  formatters= ","Options  new  formatters= ","OpenStruct  new  parse_runner ","Options  new  parse_runner ","OpenStruct  new  parse_generate_OpenStruct  new  ","Options  new  parse_generate_Options  new  "," parse_OpenStruct  new _file "," parse_Options  new _file ","OpenStruct  new  parse_heckle ","Options  new  parse_heckle ","OpenStruct  new  parse_require ","Options  new  parse_require ","OpenStruct  new  parse_format ","Options  new  parse_format ","OpenStruct  new  parse_example ","Options  new  parse_example ","OpenStruct  new  parse_diff ","Options  new  parse_diff ","OpenStruct  new  runner_arg= ","Options  new  runner_arg= "]}," Spec Runner HeckleRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," Spec Runner Heckler tests_pass?":{"type":"method","name":"tests_pass?","children":[],"call":["@rspec_options run_examples ","failure_count == ","@context_runner run ","@behaviour_runner run ","@context_runner run  == ","@behaviour_runner run  == "]}," Spec Runner Heckler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner HeckleRunner verify_constant":{"type":"method","name":"verify_constant","children":[],"call":[" raise ","name to_class "]}," Spec Runner HeckleRunner heckle_class_or_module":{"type":"method","name":"heckle_class_or_module","children":[],"call":["heckle validate ","@heckle_class new "," rspec_options ","klass name ","klass instance_methods each ","klass instance_methods ","classes each ","classes << ","klass name =~ ","ObjectSpace  each_object "," verify_constant "," context_runner "," behaviour_runner ","Spec Runner  options ","@heckle_class new  validate ","@@heckle_class new _class new "]}," Spec Runner HeckleRunner heckle_method":{"type":"method","name":"heckle_method","children":[],"call":["heckle validate ","@heckle_class new "," rspec_options "," verify_constant "," context_runner "," behaviour_runner ","Spec Runner  options ","@heckle_class new  validate ","@@heckle_class new _class new "]}," Spec Runner HeckleRunner heckle_with":{"type":"method","name":"heckle_with","children":[],"call":[" heckle_class_or_module "," heckle_method ","@filter =~ "," heckle_module ","heckle validate ","@heckle_class new "," heckle_class_method "," @heckle_class new _class_or_module "," @heckle_class new _method "," @heckle_class new _module ","@heckle_class new  validate ","@@heckle_class new _class new "," @heckle_class new _class_method "]}," Spec Runner Formatter TextMateFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["File  expand_path ","line gsub "]}," Spec Runner Formatter Story PlainTextFormatter found_step":{"type":"method","name":"found_step","children":[],"call":["type == "," green "," red "," yellow ","text << ","args [] ","desc_string gsub ","type to_s capitalize ","type to_s ","description arg_regexp ","description step_name ","@output print ","description gsub ","description step_name  gsub ","description description arg_regexp  "]}," Spec Runner Formatter Story PlainTextFormatter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Spec Runner Formatter Story PlainTextFormatter collected_steps":{"type":"method","name":"collected_steps","children":[],"call":[]}," Spec Runner Formatter Story PlainTextFormatter step_failed":{"type":"method","name":"step_failed","children":[],"call":[" red "," yellow "," found_step ","@output print "]}," Spec Runner Formatter Story PlainTextFormatter step_pending":{"type":"method","name":"step_pending","children":[],"call":[" yellow ","@pending_steps << "," found_step ","@output print "]}," Spec Runner Formatter Story PlainTextFormatter step_succeeded":{"type":"method","name":"step_succeeded","children":[],"call":[" found_step "]}," Spec Runner Formatter Story PlainTextFormatter step_upcoming":{"type":"method","name":"step_upcoming","children":[],"call":[]}," Spec Runner Formatter Story PlainTextFormatter run_ended":{"type":"method","name":"run_ended","children":[],"call":["@output print ","err backtrace join ","err backtrace ","err message ","err class ","i + ","@failed_scenarios each_with_index ","@failed_scenarios empty? ","@output puts ","@pending_steps each_with_index ","@pending_steps empty? ","@failed_scenarios size "," red "," green "," yellow ","@pending_steps empty? ! ","@failed_scenarios empty? ! "]}," Spec Runner Formatter Story PlainTextFormatter scenario_ended":{"type":"method","name":"scenario_ended","children":[],"call":[" green "," yellow "," red "]}," Spec Runner Formatter Story PlainTextFormatter scenario_pending":{"type":"method","name":"scenario_pending","children":[],"call":[" scenario_ended ","@pending_steps << "]}," Spec Runner Formatter Story PlainTextFormatter scenario_failed":{"type":"method","name":"scenario_failed","children":[],"call":[" scenario_ended ","@failed_scenarios << ","@options backtrace_tweaker tweak_backtrace ","@options backtrace_tweaker "]}," Spec Runner Formatter Story PlainTextFormatter scenario_succeeded":{"type":"method","name":"scenario_succeeded","children":[],"call":[" scenario_ended "]}," Spec Runner Formatter Story PlainTextFormatter scenario_started":{"type":"method","name":"scenario_started","children":[],"call":["@output print "]}," Spec Runner Formatter Story PlainTextFormatter story_ended":{"type":"method","name":"story_ended","children":[],"call":["@output puts ","@output print "," green "," yellow ","@pending_scenario_count >= ","@pre_story_successful_count == "," red "]}," Spec Runner Formatter Story PlainTextFormatter story_started":{"type":"method","name":"story_started","children":[],"call":["narrative each_line ","@output print ","@output puts "]}," Spec Runner Formatter Story PlainTextFormatter run_started":{"type":"method","name":"run_started","children":[],"call":["@output puts "]}," Spec Runner Formatter Story PlainTextFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter Story HtmlFormatter print_step":{"type":"method","name":"print_step","children":[],"call":["type to_s capitalize + + ","spans [] ","desc_string gsub ","type to_s capitalize + ","type to_s capitalize ","type to_s ","description arg_regexp ","description step_name ","args map ","@output puts ","description gsub ","type == ","description step_name  gsub ","description description arg_regexp  "]}," Spec Runner Formatter Story HtmlFormatter step_failed":{"type":"method","name":"step_failed","children":[],"call":[" print_step "]}," Spec Runner Formatter Story HtmlFormatter step_pending":{"type":"method","name":"step_pending","children":[],"call":[" print_step "]}," Spec Runner Formatter Story HtmlFormatter step_succeeded":{"type":"method","name":"step_succeeded","children":[],"call":[" print_step "]}," Spec Runner Formatter Story HtmlFormatter step_upcoming":{"type":"method","name":"step_upcoming","children":[],"call":[]}," Spec Runner Formatter Story HtmlFormatter scenario_failed":{"type":"method","name":"scenario_failed","children":[],"call":[" scenario_ended "]}," Spec Runner Formatter Story HtmlFormatter scenario_pending":{"type":"method","name":"scenario_pending","children":[],"call":[" scenario_ended "]}," Spec Runner Formatter Story HtmlFormatter scenario_succeeded":{"type":"method","name":"scenario_succeeded","children":[],"call":[" scenario_ended "]}," Spec Runner Formatter Story HtmlFormatter found_scenario":{"type":"method","name":"found_scenario","children":[],"call":[]}," Spec Runner Formatter Story HtmlFormatter scenario_ended":{"type":"method","name":"scenario_ended","children":[],"call":["@output puts "]}," Spec Runner Formatter Story HtmlFormatter scenario_started":{"type":"method","name":"scenario_started","children":[],"call":[" h ","@output puts "]}," Spec Runner Formatter Story HtmlFormatter story_ended":{"type":"method","name":"story_ended","children":[],"call":["@output puts "]}," Spec Runner Formatter Story HtmlFormatter story_started":{"type":"method","name":"story_started","children":[],"call":[" h split join "," h split "," h ","@output puts "]}," Spec Runner Formatter Story HtmlFormatter run_ended":{"type":"method","name":"run_ended","children":[],"call":["@output puts "]}," Spec Runner Formatter Story HtmlFormatter collected_steps":{"type":"method","name":"collected_steps","children":[],"call":["@output puts ","steps each ","steps empty? "]}," Spec Runner Formatter Story HtmlFormatter run_started":{"type":"method","name":"run_started","children":[],"call":["@output puts "]}," Spec Runner Formatter Story HtmlFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter SpecdocFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" output flush "," output "," output puts "," yellow ","example description ","@output flush ","@output puts "]}," Spec Runner Formatter SpecdocFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" output flush "," output "," output puts "," green ","example description ","@output flush ","@output print ","@output puts "]}," Spec Runner Formatter SpecdocFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output flush "," output "," output puts "," magenta "," red ","failure expectation_not_met? ","example description ","@output flush ","@output puts "]}," Spec Runner Formatter SpecdocFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" output flush "," output "," output puts ","example_group description ","example_group to_s ","example_group description == ","example_group description nil? "]}," Spec Runner Formatter SnippetExtractor post_process":{"type":"method","name":"post_process","children":[],"call":["new_lines join ","new_lines << ","i == ","offending_line + - ","offending_line + ","highlighted split each_with_index ","highlighted split "]}," Spec Runner Formatter SnippetExtractor lines_around":{"type":"method","name":"lines_around","children":[],"call":["lines [] join ","lines [] ","selected_lines join ","(send\n  (lvar :line) :+\n  (int 1)) min ","lines length - ","lines length ","line + ","(int 0) max ","line - ","File  open read split ","File  open read ","File  open ","File  file? ","File  open read split  [] join ","File  open read split  [] ","selected_File  open read split  join ","(send\n  (lvar :line) :+\n  (int 1)) (int 0) max  ","File  open read split  length - ","File  open read split  length ","(int 0) (send\n  (lvar :line) :+\n  (int 1)) min  "]}," Spec Runner Formatter SnippetExtractor snippet_for":{"type":"method","name":"snippet_for","children":[],"call":[" lines_around ","2 to_i ","error_line =~ "," 2 to_i s_around ","error_2 to_i  =~ "]}," Spec Runner Formatter SnippetExtractor snippet":{"type":"method","name":"snippet","children":[],"call":[" post_process ","highlighted << ","@@converter is_a? ","@@converter convert "," snippet_for ","error backtrace [] ","error backtrace ","@@converter convert  << "]}," Spec Runner Formatter SnippetExtractor NullConverter convert":{"type":"method","name":"convert","children":[],"call":[]}," Spec Runner Formatter ProgressBarFormatter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Spec Runner Formatter ProgressBarFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output flush ","@output puts ","@output << ","STDOUT  flush "]}," Spec Runner Formatter ProgressBarFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@output flush ","@output print "," yellow "]}," Spec Runner Formatter ProgressBarFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@output flush ","@output print "," green "]}," Spec Runner Formatter ProgressBarFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output print "," colourise "," magenta "," red ","failure expectation_not_met? "," colorize_failure "]}," Spec Runner Formatter ProfileFormatter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Spec Runner Formatter ProfileFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output flush ","@output puts ","@output print "," red "," sprintf ","@example_times [] each ","@example_times [] ","(send\n  (ivar :@example_times) :sort_by) reverse ","@example_times sort_by ","(send\n  (ivar :@example_times) :sort_by) reverse  [] each ","(send\n  (ivar :@example_times) :sort_by) reverse  [] ","(send\n  (ivar :(send\n  (ivar :@example_times) :sort_by) reverse ) :sort_by) reverse ","(send\n  (ivar :@example_times) :sort_by) reverse  sort_by "]}," Spec Runner Formatter ProfileFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@example_times << ","Time  now - ","Time  now ","example description "," example_group description "," example_group "]}," Spec Runner Formatter ProfileFormatter example_started":{"type":"method","name":"example_started","children":[],"call":["Time  now "]}," Spec Runner Formatter ProfileFormatter start":{"type":"method","name":"start","children":[],"call":["@output puts "]}," Spec Runner Formatter ProfileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter NestedTextFormatter described_example_group_chain":{"type":"method","name":"described_example_group_chain","children":[],"call":["example_group_chain << ","parent_example_group description_args empty? ! ","parent_example_group description_args empty? ","parent_example_group description_args "," example_group send "," example_group ","example_group_class description_args empty? ","example_group_class description_args "," example_group __send__ "," example_group __send__ each "]}," Spec Runner Formatter NestedTextFormatter current_indentation":{"type":"method","name":"current_indentation","children":[],"call":["   * "," previous_nested_example_groups length "," previous_nested_example_groups ","@last_nested_descriptions length ","INDENT  * "]}," Spec Runner Formatter NestedTextFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" output flush "," output "," output puts "," yellow ","example description "," current_indentation "]}," Spec Runner Formatter NestedTextFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" output flush "," output "," output puts "," green ","example description "," current_indentation "]}," Spec Runner Formatter NestedTextFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output flush "," output "," output puts "," magenta "," red ","failure expectation_not_met? ","example description "," current_indentation "]}," Spec Runner Formatter NestedTextFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" described_example_group_chain "," output puts ","nested_example_group description_args ","   * "," output ","nested_example_group == "," previous_nested_example_groups [] "," previous_nested_example_groups ","current_nested_example_groups each_with_index ","nested_example_group description_args join ","example_group nested_descriptions ","nested_description == ","@last_nested_descriptions [] ","example_group nested_descriptions each_with_index "," described_example_group_chain  each_with_index ","example_group nested_descriptions  [] "]}," Spec Runner Formatter NestedTextFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter global_styles":{"type":"method","name":"global_styles","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter global_scripts":{"type":"method","name":"global_scripts","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter report_header":{"type":"method","name":"report_header","children":[],"call":[" global_styles "," global_scripts "]}," Spec Runner Formatter HtmlFormatter html_header":{"type":"method","name":"html_header","children":[],"call":[" global_styles "," global_scripts "]}," Spec Runner Formatter HtmlFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@output flush ","@output puts ","totals << ","pending_count > ","failure_count == ","example_count == "," dry_run? ","@output << ","STDOUT  flush ","@output print ","spec_count == ","not_implemented_count > "]}," Spec Runner Formatter HtmlFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter percent_done":{"type":"method","name":"percent_done","children":[],"call":["(send\n  (send\n    (send\n      (begin\n        (send nil :example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (begin\n        (send nil :example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i ","(send nil :example_number) to_f / * ","(send nil :example_number) to_f / ","@example_count to_f ","(send nil :example_number) to_f "," example_number ","@example_count != ","(send\n  (send\n    (send\n      (begin\n        (send nil :current_example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (begin\n        (send nil :current_example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i ","(send nil :current_example_number) to_f / * ","(send nil :current_example_number) to_f / ","(send nil :current_example_number) to_f "," current_example_number "]}," Spec Runner Formatter HtmlFormatter move_progress":{"type":"method","name":"move_progress","children":[],"call":["@output flush ","@output puts "," percent_done ","(send\n  (send\n    (send\n      (ivar :@current_count) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (ivar :@current_count) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i ","@current_count to_f / * ","@current_count to_f / ","@spec_count to_f ","@current_count to_f ","@spec_count == ","(send\n  (send\n    (send\n      (ivar :@current_spec_number) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (ivar :@current_spec_number) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i ","@current_spec_number to_f / * ","@current_spec_number to_f / ","@current_spec_number to_f ","(send\n  (send\n    (send\n      (send nil :current_example_number) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (send nil :current_example_number) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i "," current_example_number to_f / * "," current_example_number to_f / ","@example_count to_f "," current_example_number to_f "," current_example_number ","@example_count == ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :current_example_number) :+\n          (int 1))) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :current_example_number) :+\n          (int 1))) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i ","(send\n  (send nil :current_example_number) :+\n  (int 1)) to_f / * ","(send\n  (send nil :current_example_number) :+\n  (int 1)) to_f / ","(send\n  (send nil :current_example_number) :+\n  (int 1)) to_f "," current_example_number + "," (send\n  (send\n    (send\n      (ivar :@current_count) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i /  "," (send\n  (send\n    (send\n      (ivar :@current_spec_number) :to_f) :/\n    (send\n      (ivar :@spec_count) :to_f)) :*\n  (int 1000)) to_i /  "," (send\n  (send\n    (send\n      (send nil :current_example_number) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i /  "," (send\n  (send\n    (send\n      (begin\n        (send\n          (send nil :current_example_number) :+\n          (int 1))) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i /  "]}," Spec Runner Formatter HtmlFormatter extra_failure_content":{"type":"method","name":"extra_failure_content","children":[],"call":["@snippet_extractor snippet ","failure exception ","SnippetExtractor  new "," require "]}," Spec Runner Formatter HtmlFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@output flush ","@output puts "," h ","example description "," move_progress "," example_group_number "," current_behaviour_number "," current_example_group_number "]}," Spec Runner Formatter HtmlFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output puts ","extra == "," format_backtrace ","failure exception backtrace ","failure exception ","failure exception nil? "," h ","failure exception message ","example description "," move_progress "," example_group_number ","failure pending_fixed? "," extra_failure_content "," escape "," current_behaviour_number "," current_example_group_number "," extra_failure_content  == ","  extra_failure_content _failure_content "]}," Spec Runner Formatter HtmlFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@output flush ","@output puts "," h ","example description "," move_progress "," escape "]}," Spec Runner Formatter HtmlFormatter example_started":{"type":"method","name":"example_started","children":[],"call":["example number "]}," Spec Runner Formatter HtmlFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output flush ","@output puts ","STDOUT  flush "]}," Spec Runner Formatter HtmlFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":["@output flush ","@output puts "," h ","example_group description "," example_group_number "," example_group_number == "," current_example_group_number "," current_example_group_number == "]}," Spec Runner Formatter HtmlFormatter start":{"type":"method","name":"start","children":[],"call":["@output flush ","@output puts "," report_header "," html_header ","STDOUT  flush "," extra_header_content "," extra_header_content nil? "]}," Spec Runner Formatter HtmlFormatter example_number":{"type":"method","name":"example_number","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter example_group_number":{"type":"method","name":"example_group_number","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter FailingExamplesFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," Spec Runner Formatter FailingExamplesFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner Formatter FailingExamplesFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output puts ","example description "," example_group description "," example_group "]}," Spec Runner Formatter FailingExampleGroupsFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," Spec Runner Formatter FailingExampleGroupsFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner Formatter FailingExampleGroupsFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output puts "," Spec Example ExampleGroupMethods  description_text ","description =~ ","@example_group description_parts collect ","@example_group description_parts ","@example_group_description_parts collect ","@example_group filtered_description ","@example_group description gsub ","@example_group description "]}," Spec Runner Formatter BaseTextFormatter blue":{"type":"method","name":"blue","children":[],"call":[" colour "]}," Spec Runner Formatter BaseTextFormatter yellow":{"type":"method","name":"yellow","children":[],"call":[" colour "]}," Spec Runner Formatter BaseTextFormatter magenta":{"type":"method","name":"magenta","children":[],"call":[" colour "," red ","Kernel  warn ","Spec  deprecate "]}," Spec Runner Formatter BaseTextFormatter red":{"type":"method","name":"red","children":[],"call":[" colour "]}," Spec Runner Formatter BaseTextFormatter green":{"type":"method","name":"green","children":[],"call":[" colour "]}," Spec Runner Formatter BaseTextFormatter output_to_tty?":{"type":"method","name":"output_to_tty?","children":[],"call":["@output tty? ","@output == ","ENV  has_key? "]}," Spec Runner Formatter BaseTextFormatter colour":{"type":"method","name":"colour","children":[],"call":[" output_to_tty? "," colour? ","@output == "," colour? & "," autospec? ","ENV  [] "," output_to_file? "]}," Spec Runner Formatter BaseTextFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["line sub "]}," Spec Runner Formatter BaseTextFormatter dry_run?":{"type":"method","name":"dry_run?","children":[],"call":["@options dry_run ","@options dry_run ! ! ","@options dry_run ! "]}," Spec Runner Formatter BaseTextFormatter colour?":{"type":"method","name":"colour?","children":[],"call":["@options colour ","@options colour ! ! ","@options colour ! "]}," Spec Runner Formatter BaseTextFormatter format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["(send\n  (lvar :backtrace) :map) join "," backtrace_line ","backtrace map ","backtrace nil? ","backtrace join "]}," Spec Runner Formatter BaseTextFormatter close":{"type":"method","name":"close","children":[],"call":["@output close ","IO  === ","@output != ","(send\n  (const nil :IO) :===\n  (ivar :@output)) & "]}," Spec Runner Formatter BaseTextFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":["@output flush ","@output puts ","pending_example [] ","@pending_examples each ","@pending_examples empty? "]}," Spec Runner Formatter BaseTextFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@output flush ","@output puts "," red "," green "," yellow ","pending_count > ","failure_count == ","summary << ","example_count == "," dry_run? ","@output << ","spec_count == ","@output << << << ","@output << << ","(lvar :duration) to_s ","summary_output puts ","@output == ","not_implemented_count > "," dump_pending "]}," Spec Runner Formatter BaseTextFormatter colourise":{"type":"method","name":"colourise","children":[],"call":[" magenta "," blue ","failure pending_fixed? "," red ","failure expectation_not_met? "," colorize_failure ","Kernel  warn ","Spec  deprecate "]}," Spec Runner Formatter BaseTextFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":["@output flush ","@output puts "," format_backtrace ","failure exception backtrace ","failure exception "," colourise ","failure exception message ","failure header ","counter to_s ","@output << ","failure backtrace ","failure message ","@output << << ","STDOUT  flush ","failure exception backtrace join "," magenta "," red ","failure expectation_not_met? "," colorize_failure "]}," Spec Runner Formatter BaseTextFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@pending_examples << ","example __full_description ","example description ","example full_description ","@example_group description ","example location "]}," Spec Runner Formatter BaseTextFormatter initialize":{"type":"method","name":"initialize","children":[{"type":"method","name":"flush","children":[],"asgn":[],"call":[]}],"call":["STDOUT  flush ","where == ","File  open ","where is_a? "," raise "," require ","PLATFORM  =~ ","SnippetExtractor  new ","FileUtils  mkdir_p ","File  dirname ","String  === "]}," Spec Runner Formatter BaseFormatter close":{"type":"method","name":"close","children":[],"call":[]}," Spec Runner Formatter BaseFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," Spec Runner Formatter BaseFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," Spec Runner Formatter BaseFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner Formatter BaseFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Spec Runner Formatter BaseFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[]}," Spec Runner Formatter BaseFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[]}," Spec Runner Formatter BaseFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[]}," Spec Runner Formatter BaseFormatter example_started":{"type":"method","name":"example_started","children":[],"call":[]}," Spec Runner Formatter BaseFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" example_group_started ","Spec  deprecate "]}," Spec Runner Formatter BaseFormatter start":{"type":"method","name":"start","children":[],"call":[]}," Spec Runner Formatter BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner ExampleGroupRunner number_of_examples":{"type":"method","name":"number_of_examples","children":[],"call":["@options number_of_examples "]}," Spec Runner ExampleGroupRunner example_groups":{"type":"method","name":"example_groups","children":[],"call":["@options example_groups "]}," Spec Runner ExampleGroupRunner reverse":{"type":"method","name":"reverse","children":[],"call":["@options reverse "]}," Spec Runner ExampleGroupRunner reporter":{"type":"method","name":"reporter","children":[],"call":["@options reporter "]}," Spec Runner ExampleGroupRunner finish":{"type":"method","name":"finish","children":[],"call":[" reporter dump "," reporter "," reporter end "]}," Spec Runner ExampleGroupRunner prepare":{"type":"method","name":"prepare","children":[],"call":[" example_groups reverse! "," example_groups "," reverse "," reporter start "," number_of_examples "," reporter "]}," Spec Runner ExampleGroupRunner run":{"type":"method","name":"run","children":[],"call":[" finish ","success & ","example_group run "," example_groups each "," example_groups "," prepare ","success &  & "]}," Spec Runner ExampleGroupRunner load_files":{"type":"method","name":"load_files","children":[],"call":[" load ","files each ","RUBY_VERSION  < ","RUBY_VERSION  to_f < ","RUBY_VERSION  to_f "]}," Spec Runner ExampleGroupRunner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner DrbCommandLine run":{"type":"method","name":"run","children":[],"call":[]}," Spec Runner CommandLine run":{"type":"method","name":"run","children":[],"call":[" Spec  run= ","$rspec_options run_examples "," rspec_options "," init_rspec_options ","Spec Runner  use ","tmp_options run_examples ","Spec Runner  options "]}," Spec Runner ClassAndArgumentsParser parse":{"type":"method","name":"parse","children":[],"call":[" raise ","s inspect ","2 == ","s =~ "]}," Spec Runner QuietBacktraceTweaker tweak_backtrace":{"type":"method","name":"tweak_backtrace","children":[],"call":["error backtrace compact! ","error backtrace ","line =~ ","IGNORE_PATTERNS  each "," clean_up_double_slashes ","error backtrace collect! ","error backtrace nil? "," tweak_instance_exec_line ","kept_lines join ","kept_lines empty? ","message split select ","message split ","error set_backtrace ","tweaked select ","error backtrace collect "," tweak_instance_exec_line  =~ "," tweak_instance_exec_ tweak_instance_exec_line  ","kept_ tweak_instance_exec_line s join ","kept_ tweak_instance_exec_line s empty? "]}," Spec Runner NoisyBacktraceTweaker tweak_backtrace":{"type":"method","name":"tweak_backtrace","children":[],"call":[" clean_up_double_slashes ","error backtrace each ","error backtrace ","error backtrace nil? ","error backtrace compact! "," tweak_instance_exec_line ","error backtrace collect! ","error set_backtrace ","error backtrace collect "]}," Spec Runner BacktraceTweaker clean_up_double_slashes":{"type":"method","name":"clean_up_double_slashes","children":[],"call":["line gsub! "]}," RCov VerifyTask define":{"type":"method","name":"define","children":[],"call":[" raise "," threshold "," require_exact_threshold ","total_coverage > ","total_coverage < "," puts "," verbose "," eval ","line =~ ","File  open each_line ","File  open "," index_html "," task "," desc ","1 to_f "," eval  > ","1 to_f  > "," eval  < ","1 to_f  < "]}," RCov VerifyTask initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," raise ","@threshold nil? "," block_given? "]}," Spec Rake SpecTask spec_file_list":{"type":"method","name":"spec_file_list","children":[],"call":["FileList  [] ","FileList  [] to_a "," pattern "," spec_files to_a "," spec_files ","ENV  [] ","@spec_files to_a "]}," Spec Rake SpecTask evaluate":{"type":"method","name":"evaluate","children":[],"call":["o call "]}," Spec Rake SpecTask spec_option_list":{"type":"method","name":"spec_option_list","children":[],"call":[" spec_opts join "," spec_opts ","ENV  [] ","STDERR  puts ","@spec_opts join "]}," Spec Rake SpecTask rcov_option_list":{"type":"method","name":"rcov_option_list","children":[],"call":[" rcov_opts join "," rcov_opts ","ENV  [] "," rcov ","@rcov_opts join "]}," Spec Rake SpecTask define":{"type":"method","name":"define","children":[],"call":[" task "," paste "," rm_r "," rcov_dir "," desc "," rcov "," raise "," fail_on_error ","STDERR  puts "," failure_message "," system "," puts "," verbose ","cmd_parts join ","cmd_parts << "," out "," spec_option_list "," spec_file_list collect "," spec_file_list "," rcov_option_list "," warning "," ruby_opts "," spec_file_list empty? ","RakeFileUtils  verbose "," name ","Run specs + "," Rake  application last_comment "," Rake  application "," name keys first "," name keys ","Hash  === "," libs join "," libs ","File  expand_path ","File  dirname + ","File  dirname "," ruby ","@ruby_opts join + + + "," option_list ","@ruby_opts join + + ","(send\n  (send nil :file_list) :collect) join "," file_list collect "," file_list ","@ruby_opts join + ","@ruby_opts join ","@ruby_opts unshift "," rake_loader ","@name == ","@libs join "," run ","@ruby_opts join + + + + + ","@ruby_opts join + + + + ","(send\n  (lvar :specs) :collect) join ","specs collect ","@spec_opts join ","@out nil? ","specs empty? ","$? != ","ruby_opts join + + + + + + + + + + + ","ruby_opts join + + + + + + + + + + ","ruby_opts join + + + + + + + + + ","ruby_opts join + + + + + + + + ","ruby_opts join + + + + + + + ","ruby_opts join + + + + + + ","ruby_opts join + + + + + ","ruby_opts join + + + + ","ruby_opts join + + + ","ruby_opts join + + ","ruby_opts join + ","ruby_opts join ","ruby_opts push ","@ruby_opts clone ","(str \"Run RSpec for \") + ","ruby_opts join + + + + + + + + + + + + + ","ruby_opts join + + + + + + + + + + + + "," file_list empty? ","File  dirname + + "," drb ","(send\n  (send nil :spec_file_list) :collect) join ","cmd << ","ruby_opts << ","rb_opts join ","rb_opts << "," ruby_opts clone ","File  join ","Config CONFIG  [] "," ruby_cmd ","cmd_parts join _parts join ","cmd_parts join _parts << "," File  expand_path _option_list "," File  dirname + _option_list "," File  expand_path _file_list collect "," File  dirname + _file_list collect "," File  expand_path _file_list "," File  dirname + _file_list "," @ruby_opts clone  "," File  expand_path _file_list empty? "," File  dirname + _file_list empty? ","Run File  expand_path s + ","Run File  dirname + s + ","Run  file_list  + ","@@ruby_opts clone  join + + + ","@@ruby_opts clone  join + + ","@@ruby_opts clone  join + ","@@ruby_opts clone  join ","@@ruby_opts clone  unshift ","@@ruby_opts clone  join + + + + + ","@@ruby_opts clone  join + + + + ","(send\n  (lvar :File  expand_path s) :collect) join ","(send\n  (lvar :File  dirname + s) :collect) join ","(send\n  (lvar : file_list ) :collect) join ","File  expand_path s collect ","File  dirname + s collect "," file_list  collect ","@File  expand_path _opts join ","@File  dirname + _opts join ","File  expand_path s empty? ","File  dirname + s empty? "," file_list  empty? ","@ruby_opts clone  join + + + + + + + + + + + ","@ruby_opts clone  join + + + + + + + + + + ","@ruby_opts clone  join + + + + + + + + + ","@ruby_opts clone  join + + + + + + + + ","@ruby_opts clone  join + + + + + + + ","@ruby_opts clone  join + + + + + + ","@ruby_opts clone  join + + + + + ","@ruby_opts clone  join + + + + ","@ruby_opts clone  join + + + ","@ruby_opts clone  join + + ","@ruby_opts clone  join + ","@ruby_opts clone  join ","@ruby_opts clone  push ","@@ruby_opts clone  clone ","@ruby_opts clone  join + + + + + + + + + + + + + ","@ruby_opts clone  join + + + + + + + + + + + + ","(send\n  (send nil :File  expand_path _file_list) :collect) join ","(send\n  (send nil :File  dirname + _file_list) :collect) join ","cmd_parts join  << ","@ruby_opts clone  << "," ruby_opts clone  join "," ruby_opts clone  << "," @ruby_opts clone  clone "," ruby_cmd_parts join  "]}," Spec Rake SpecTask initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," spec_files nil? "," spec_files "," pattern nil? "," pattern "," block_given? ","File  expand_path ","File  dirname + ","File  dirname ","@spec_files nil? ","@pattern nil? "]}," Spec Rake SpecTask attr_accessor":{"type":"method","name":"attr_accessor","children":[],"call":[" module_eval ","names each "]}," Spec Mocks ExampleMethods stub_everything":{"type":"method","name":"stub_everything","children":[],"call":[" mock ","Kernel  warn ","Spec  warn "]}," Spec Mocks ExampleMethods mock":{"type":"method","name":"mock","children":[],"call":["Spec Mocks Mock  new "," __declare_double "]}," Spec Mocks Space mocks":{"type":"method","name":"mocks","children":[],"call":[]}," Spec Mocks Space reset_all":{"type":"method","name":"reset_all","children":[],"call":[" mocks clear "," mocks ","mock rspec_reset "," mocks each "]}," Spec Mocks Space verify_all":{"type":"method","name":"verify_all","children":[],"call":["mock rspec_verify "," mocks each "," mocks "]}," Spec Mocks Space add":{"type":"method","name":"add","children":[],"call":[" mocks << "," mocks ","m equal? "," mocks detect "," mocks include? "]}," Spec Mocks Proxy find_matching_method_stub":{"type":"method","name":"find_matching_method_stub","children":[],"call":["stub matches ","@stubs find "]}," Spec Mocks Proxy find_almost_matching_expectation":{"type":"method","name":"find_almost_matching_expectation","children":[],"call":["expectation matches_name_but_not_args ","@expectations find "]}," Spec Mocks Proxy find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find ","expectation called_max_times? ! ","expectation called_max_times? "]}," Spec Mocks Proxy reset_proxied_methods":{"type":"method","name":"reset_proxied_methods","children":[],"call":[" undef_method "," alias_method "," method_defined? ","munged_sym to_s "," target_metaclass instance_eval "," target_metaclass "," munge ","@proxied_methods each "," metaclass __send__ "," metaclass "," metaclass instance_methods include? "," munge to_s "," metaclass instance_methods "," metaclass instance_eval "," remove_method "," reset_proxied_method ","@proxied_methods map "," munge  to_s "]}," Spec Mocks Proxy verify_expectations":{"type":"method","name":"verify_expectations","children":[],"call":["expectation verify_messages_received ","@expectations each ","e verify_messages_received ","@expectations map "]}," Spec Mocks Proxy target_metaclass":{"type":"method","name":"target_metaclass","children":[],"call":[]}," Spec Mocks Proxy clear_proxied_methods":{"type":"method","name":"clear_proxied_methods","children":[],"call":["@proxied_methods clear "]}," Spec Mocks Proxy clear_stubs":{"type":"method","name":"clear_stubs","children":[],"call":["@stubs clear "]}," Spec Mocks Proxy clear_expectations":{"type":"method","name":"clear_expectations","children":[],"call":["@expectations clear "]}," Spec Mocks Proxy munge":{"type":"method","name":"munge","children":[],"call":["(str \"proxied_by_rspec__\") to_sym ","sym to_s "]}," Spec Mocks Proxy visibility":{"type":"method","name":"visibility","children":[],"call":[" target_metaclass protected_method_defined? "," target_metaclass "," target_metaclass private_method_defined? ","Mock  === "]}," Spec Mocks Proxy target_responds_to?":{"type":"method","name":"target_responds_to?","children":[],"call":["@target respond_to? ","sym == ","@target send "," munge ","@target __send__ "]}," Spec Mocks Proxy define_expected_method":{"type":"method","name":"define_expected_method","children":[],"call":[" target_metaclass class_eval "," target_metaclass ","@proxied_methods << "," alias_method "," method_defined? ","sym to_s "," target_metaclass instance_eval "," munge "," target_metaclass method_defined? ! "," target_metaclass method_defined? "," target_responds_to? "," visibility "," metaclass_eval "," metaclass __send__ "," metaclass ","@proxied_methods include? ! ","@proxied_methods include? "," metaclass instance_methods include? "," metaclass instance_methods "," metaclass instance_eval "," metaclass method_defined? ! "," metaclass method_defined? "]}," Spec Mocks Proxy __add":{"type":"method","name":"__add","children":[],"call":[" define_expected_method ","$rspec_mocks add ","$rspec_mocks nil? "]}," Spec Mocks Proxy raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":["@error_generator raise_unexpected_message_error "]}," Spec Mocks Proxy raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":["@error_generator raise_unexpected_message_args_error "]}," Spec Mocks Proxy message_received":{"type":"method","name":"message_received","children":[],"call":["@target send "," raise_unexpected_message_args_error "," null_object? "," has_negative_expectation? ","expectation advise ","expectation expected_messages_received? "," find_almost_matching_expectation ","stub invoke "," find_matching_method_stub ","expectation invoke "," find_matching_expectation ","expectation ! ","expectation called_max_times? ","@target __send__ "," record_almost_matching_expectation "," invoke_expectation "," record_stub "," ok_to_invoke_stub? ","@target superclass send ","@target superclass ","@target is_a? ","@target superclass respond_to? ","stub advise "," find_almost_matching_stub "," has_negative_ find_almost_matching_expectation ? "," has_negative_ find_matching_expectation ? "," find_almost_matching_expectation  advise "," find_matching_expectation  advise "," find_almost_matching_expectation  expected_messages_received? "," find_matching_expectation  expected_messages_received? "," find_almost_matching_ find_almost_matching_expectation  "," find_almost_matching_ find_matching_expectation  "," find_matching_method_stub  invoke "," find_almost_matching_stub  invoke "," find_matching_method_ find_matching_method_stub  "," find_matching_method_ find_almost_matching_stub  "," find_almost_matching_expectation  invoke "," find_matching_expectation  invoke "," find_matching_ find_almost_matching_expectation  "," find_matching_ find_matching_expectation  "," find_almost_matching_expectation  ! "," find_matching_expectation  ! "," find_almost_matching_expectation  called_max_times? "," find_matching_expectation  called_max_times? "," record_almost_matching_ find_almost_matching_expectation  "," record_almost_matching_ find_matching_expectation  "," invoke_ find_almost_matching_expectation  "," invoke_ find_matching_expectation  "," record_ find_matching_method_stub  "," record_ find_almost_matching_stub  "," ok_to_invoke_ find_matching_method_stub ? "," ok_to_invoke_ find_almost_matching_stub ? "," find_matching_method_stub  advise "," find_almost_matching_stub  advise "," find_almost_matching_ find_matching_method_stub  "," find_almost_matching_ find_almost_matching_stub  "]}," Spec Mocks Proxy has_negative_expectation?":{"type":"method","name":"has_negative_expectation?","children":[],"call":["expectation negative_expectation_for? ","@expectations detect ","@expectations any? "]}," Spec Mocks Proxy received_message?":{"type":"method","name":"received_message?","children":[],"call":["array == ","@messages_received any? ","@messages_received find "]}," Spec Mocks Proxy reset":{"type":"method","name":"reset","children":[],"call":[" clear_proxied_methods "," reset_proxied_methods "," clear_stubs "," clear_expectations "," reset_nil_expectations_warning "]}," Spec Mocks Proxy verify":{"type":"method","name":"verify","children":[],"call":[" reset "," verify_expectations "]}," Spec Mocks Proxy add_stub":{"type":"method","name":"add_stub","children":[],"call":["@stubs first ","@stubs unshift ","MessageExpectation  new "," __add ","MethodStub  new "]}," Spec Mocks Proxy add_negative_message_expectation":{"type":"method","name":"add_negative_message_expectation","children":[],"call":["@expectations last ","@expectations << ","NegativeMessageExpectation  new "," block_given? "," __add "," warn_if_nil_class "]}," Spec Mocks Proxy add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":["@expectations last ","@expectations << ","MessageExpectation  new "," block_given? "," __add ","existing_stub build_child ","s sym == ","s sym ","@stubs detect "," warn_if_nil_class "," build_expectation ","@MessageExpectation  new s last ","@existing_stub build_child s last ","@MessageExpectation  new s << ","@existing_stub build_child s << "," build_MessageExpectation  new  "," build_existing_stub build_child  "]}," Spec Mocks Proxy null_object?":{"type":"method","name":"null_object?","children":[],"call":["@options [] "]}," Spec Mocks Proxy initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup ","OrderGroup  new ","ErrorGenerator  new "]}," Spec Mocks OrderGroup handle_order_constraint":{"type":"method","name":"handle_order_constraint","children":[],"call":["@error_generator raise_out_of_order_error ","expectation sym "," consume "," ready_for? ","@ordering include? "]}," Spec Mocks OrderGroup consume":{"type":"method","name":"consume","children":[],"call":["@ordering shift "]}," Spec Mocks OrderGroup ready_for?":{"type":"method","name":"ready_for?","children":[],"call":["@ordering first == ","@ordering first "]}," Spec Mocks OrderGroup register":{"type":"method","name":"register","children":[],"call":["@ordering << "]}," Spec Mocks OrderGroup initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Spec Mocks Mock assign_stubs":{"type":"method","name":"assign_stubs","children":[],"call":[" stub! and_return "," stub! ","stubs each_pair "]}," Spec Mocks Mock parse_options":{"type":"method","name":"parse_options","children":[],"call":["options delete ","options has_key? "]}," Spec Mocks Mock to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect gsub gsub "," inspect gsub "," inspect "]}," Spec Mocks Mock inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," sprintf "," object_id "," class "]}," Spec Mocks Mock method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_proxy raise_unexpected_message_error "," __mock_proxy "," __mock_proxy null_object? ","@messages_received << "," __mock_proxy instance_eval "," __mock_handler raise_unexpected_message_error "," __mock_handler "," __mock_handler null_object? "," __mock_handler instance_eval "," __mock_proxy record_message_received "]}," Spec Mocks Mock ==":{"type":"method","name":"==","children":[],"call":["other == "," __mock_proxy "]}," Spec Mocks Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" assign_stubs "," parse_options "," build_name_from_options ","stubs_and_options empty? ","name is_a? "," extract_options "]}," Spec Mocks Methods __mock_proxy":{"type":"method","name":"__mock_proxy","children":[],"call":["Proxy  new "," class name "," class ","Mock  === "]}," Spec Mocks Methods rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[" __mock_proxy reset "," __mock_proxy "]}," Spec Mocks Methods rspec_verify":{"type":"method","name":"rspec_verify","children":[],"call":[" __mock_proxy verify "," __mock_proxy "]}," Spec Mocks Methods received_message?":{"type":"method","name":"received_message?","children":[],"call":[" __mock_proxy received_message? ","sym to_sym "," __mock_proxy "," __mock_handler received_message? "," __mock_handler "]}," Spec Mocks Methods stub!":{"type":"method","name":"stub!","children":[],"call":[" __mock_proxy add_stub ","sym to_sym "," caller [] "," caller "," __mock_proxy "," __mock_handler add_stub "," __mock_handler ","sym_or_hash to_sym "," stub! and_return "," stub! ","sym_or_hash each ","Hash  === "]}," Spec Mocks Methods should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" __mock_proxy add_negative_message_expectation ","sym to_sym "," caller [] "," caller "," __mock_proxy "," __mock_handler add_negative_message_expectation "," __mock_handler "]}," Spec Mocks Methods should_receive":{"type":"method","name":"should_receive","children":[],"call":[" __mock_proxy add_message_expectation ","sym to_sym "," caller [] "," caller ","opts [] "," __mock_proxy "," __mock_handler add_message_expectation "," __mock_handler "]}," Spec Mocks NegativeMessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":["@sym == "]}," Spec Mocks NegativeMessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks MessageExpectation set_expected_received_count":{"type":"method","name":"set_expected_received_count","children":[],"call":["relativity == ","n kind_of? ","n == "]}," Spec Mocks MessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":[]}," Spec Mocks MessageExpectation ordered":{"type":"method","name":"ordered","children":[],"call":["@order_group register ","@ordering register "]}," Spec Mocks MessageExpectation twice":{"type":"method","name":"twice","children":[],"call":[]}," Spec Mocks MessageExpectation once":{"type":"method","name":"once","children":[],"call":[]}," Spec Mocks MessageExpectation never":{"type":"method","name":"never","children":[],"call":[]}," Spec Mocks MessageExpectation any_number_of_times":{"type":"method","name":"any_number_of_times","children":[],"call":[]}," Spec Mocks MessageExpectation times":{"type":"method","name":"times","children":[],"call":[]}," Spec Mocks MessageExpectation at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_received_count "]}," Spec Mocks MessageExpectation at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_received_count "]}," Spec Mocks MessageExpectation exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_received_count "]}," Spec Mocks MessageExpectation with":{"type":"method","name":"with","children":[],"call":["ArgumentExpectation  new "]}," Spec Mocks MessageExpectation generate_error":{"type":"method","name":"generate_error","children":[],"call":["@error_generator raise_unexpected_message_args_error ","@similar_messages first ","@error_generator raise_expectation_error ","@args_expectation args "," similar_messages empty? "," similar_messages "]}," Spec Mocks MessageExpectation advise":{"type":"method","name":"advise","children":[],"call":[" similar_messages << "," similar_messages "]}," Spec Mocks MessageExpectation similar_messages":{"type":"method","name":"similar_messages","children":[],"call":[]}," Spec Mocks MessageExpectation matches_exact_count?":{"type":"method","name":"matches_exact_count?","children":[],"call":["@expected_received_count == "]}," Spec Mocks MessageExpectation matches_at_most_count?":{"type":"method","name":"matches_at_most_count?","children":[],"call":["@actual_received_count <= "]}," Spec Mocks MessageExpectation matches_at_least_count?":{"type":"method","name":"matches_at_least_count?","children":[],"call":["@actual_received_count >= "]}," Spec Mocks MessageExpectation ignoring_args?":{"type":"method","name":"ignoring_args?","children":[],"call":["@expected_received_count == "]}," Spec Mocks MessageExpectation expected_messages_received?":{"type":"method","name":"expected_messages_received?","children":[],"call":[" matches_at_most_count? "," matches_at_least_count? "," matches_exact_count? "," ignoring_args? "]}," Spec Mocks MessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":["Kernel  raise ","error backtrace insert ","error backtrace "," generate_error "," expected_messages_received? "," make_count_message ","@expected_received_count == ","@received_count <= ","@received_count >= ","@error_generator raise_expectation_error ","@args_expectation args "," matches_at_most_count? "," matches_at_least_count? "," matches_exact_count? "," ignoring_args? "," failed_fast? "," make_ make_count_message  "]}," Spec Mocks MessageExpectation matches_name_but_not_args":{"type":"method","name":"matches_name_but_not_args","children":[],"call":["@args_expectation check_args ! ","@args_expectation check_args ","@sym == ","@args_expectation args_match? ! ","@args_expectation args_match? "," matches_name? "]}," Spec Mocks BaseExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["@return_block call ","args << ","block nil? ","@return_block arity > ","@return_block arity ","@return_block arity == "]}," Spec Mocks BaseExpectation invoke_consecutive_return_block":{"type":"method","name":"invoke_consecutive_return_block","children":[],"call":["value [] ","(ivar :@actual_received_count) min ","value size - ","value size ","@return_block call ","args << ","block nil? ","(ivar :@received_count) min "," invoke_return_block ","@return_block call  [] "," invoke_return_block  [] ","@return_block call  size - "," invoke_return_block  size - ","@return_block call  size "," invoke_return_block  size "]}," Spec Mocks BaseExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":["block call ","@error_generator raise_wrong_arity_error ","block arity ","args_to_yield_this_time length != ","args_to_yield_this_time length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","block nil? ","@args_to_yield length != ","@args_to_yield length "," eval_block "]}," Spec Mocks BaseExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["@error_generator raise_block_failed_error ","detail message ","@method_block call "]}," Spec Mocks BaseExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_return_block "," invoke_consecutive_return_block "," invoke_with_yield ","@args_to_yield size > ","@args_to_yield size "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise nil? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error ","@expected_received_count == ","@args_to_yield nil? ! ","@args_to_yield nil? ","@exception_to_raise new ","@exception_to_raise class == ","@exception_to_raise class "]}," Spec Mocks BaseExpectation matches":{"type":"method","name":"matches","children":[],"call":["@args_expectation check_args ","@sym == ","@args_expectation args_match? "]}," Spec Mocks BaseExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":["@args_to_yield << ","@args_to_yield clear ","@eval_context extend ","Object  new "," require ","Object  new  extend "]}," Spec Mocks BaseExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":[]}," Spec Mocks BaseExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":[]}," Spec Mocks BaseExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" block_given? ! "," block_given? "," lambda ","values size ","@expected_received_count < "," ignoring_args? ! "," ignoring_args? ","values [] ","Kernel  raise ","@method_block nil? ","values size == ","@expected_received_count != ","values [] s size ","values size  < ","values [] s [] ","values [] s size == ","values size  != "]}," Spec Mocks BaseExpectation expected_args":{"type":"method","name":"expected_args","children":[],"call":["@args_expectation args "]}," Spec Mocks BaseExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["ArgumentExpectation  new ","AnyArgsConstraint  new ","@error_generator opts= "," lambda ","ArgumentConstraints AnyArgsConstraint  new ","ArgumentMatchers AnyArgsMatcher  new "]}," Spec Mocks ErrorGenerator pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["count == "]}," Spec Mocks ErrorGenerator count_message":{"type":"method","name":"count_message","children":[],"call":[" pretty_print ","count abs ","count < "]}," Spec Mocks ErrorGenerator arg_list":{"type":"method","name":"arg_list","children":[],"call":["(send\n  (lvar :args) :collect) join ","arg inspect ","arg description ","arg respond_to? ","args collect "]}," Spec Mocks ErrorGenerator format_args":{"type":"method","name":"format_args","children":[],"call":["( + + ","( + "," arg_list ","args == ","args empty? ","(sym :any_args) == "]}," Spec Mocks ErrorGenerator arg_message":{"type":"method","name":"arg_message","children":[],"call":[" with  + "," format_args "," with [ + + "," with [ + "," arg_list ","args empty? ","(sym :any_args) == "]}," Spec Mocks ErrorGenerator __raise":{"type":"method","name":"__raise","children":[],"call":["Kernel  raise "," opts [] "," opts "," opts [] nil? "]}," Spec Mocks ErrorGenerator intro":{"type":"method","name":"intro","children":[],"call":["@target inspect ","@target to_s ","@target nil? ","@target class == ","@target class ","Class  === ","Mock  === ","@name inspect "]}," Spec Mocks ErrorGenerator raise_wrong_arity_error":{"type":"method","name":"raise_wrong_arity_error","children":[],"call":[" __raise "," arg_list "," intro "]}," Spec Mocks ErrorGenerator raise_missing_block_error":{"type":"method","name":"raise_missing_block_error","children":[],"call":[" __raise "," arg_list "," intro "]}," Spec Mocks ErrorGenerator raise_block_failed_error":{"type":"method","name":"raise_block_failed_error","children":[],"call":[" __raise "," intro "]}," Spec Mocks ErrorGenerator raise_out_of_order_error":{"type":"method","name":"raise_out_of_order_error","children":[],"call":[" __raise "," intro "]}," Spec Mocks ErrorGenerator raise_expectation_error":{"type":"method","name":"raise_expectation_error","children":[],"call":[" __raise "," count_message "," arg_message "," intro "]}," Spec Mocks ErrorGenerator raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":[" __raise ","expectation sym inspect ","expectation sym "," intro "," format_args ","args empty? ","expectation expected_args ","expectation expected_args == ","expectation  format_args  ","expectation  format_args  == "]}," Spec Mocks ErrorGenerator raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":[" __raise "," arg_message "," intro "]}," Spec Mocks ErrorGenerator opts":{"type":"method","name":"opts","children":[],"call":[]}," Spec Mocks ErrorGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Spec Mocks ArgumentExpectation constraints_match?":{"type":"method","name":"constraints_match?","children":[],"call":["@expected_params [] matches? ","args [] ","@expected_params [] ","@expected_params each_index ","args length != ","@expected_params length ","args length ","@constraints == "]}," Spec Mocks ArgumentExpectation check_args":{"type":"method","name":"check_args","children":[],"call":[" constraints_match? ","@expected_params == ","@expected_params nil? ","@constraints_block call "]}," Spec Mocks ArgumentExpectation is_matcher?":{"type":"method","name":"is_matcher?","children":[],"call":["obj respond_to? ","obj respond_to? & "]}," Spec Mocks ArgumentExpectation convert_constraint":{"type":"method","name":"convert_constraint","children":[],"call":["LiteralArgConstraint  new ","RegexpArgConstraint  new ","constraint is_a? ","MatcherConstraint  new "," is_matcher? ","@@constraint_classes [] new ","@@constraint_classes [] "," warn_deprecated ","constraint inspect ","(sym :anything) include? "]}," Spec Mocks ArgumentExpectation warn_deprecated":{"type":"method","name":"warn_deprecated","children":[],"call":["Kernel  warn ","STDERR  puts "]}," Spec Mocks ArgumentExpectation process_arg_constraints":{"type":"method","name":"process_arg_constraints","children":[],"call":[" convert_constraint ","constraints collect "]}," Spec Mocks ArgumentExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" process_arg_constraints ","args [] is_a? ","args [] ","args length == ","args length "," warn_deprecated ","no_args inspect ","(sym :no_args) == ","any_args inspect ","(sym :any_args) == "," constraint_for ","args collect ","ArgumentConstraints NoArgsConstraint  === ","args first ","ArgumentConstraints AnyArgsConstraint  === "," warn_constraint_symbol_deprecated "," matcher_for ","ArgumentMatchers NoArgsMatcher  === ","ArgumentMatchers AnyArgsMatcher  === "]}," Spec Mocks HashIncludingConstraint description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Spec Mocks HashIncludingConstraint matches?":{"type":"method","name":"matches?","children":[],"call":[" == "]}," Spec Mocks HashIncludingConstraint ==":{"type":"method","name":"==","children":[],"call":["actual [] == ","actual [] ","actual has_key? ","@expected each "]}," Spec Mocks HashIncludingConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks DuckTypeArgConstraint description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks DuckTypeArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value respond_to? ","@methods_to_respond_to all? ","@methods_to_respond_do all? "]}," Spec Mocks DuckTypeArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks StringArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Mocks StringArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks BooleanArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Mocks BooleanArgConstraint ==":{"type":"method","name":"==","children":[],"call":[" matches? "]}," Spec Mocks BooleanArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks NumericArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Mocks NumericArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks NoArgsConstraint ==":{"type":"method","name":"==","children":[],"call":["args == "]}," Spec Mocks NoArgsConstraint description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks AnyArgsConstraint description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks AnyArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":[]}," Spec Mocks AnyArgConstraint ==":{"type":"method","name":"==","children":[],"call":[]}," Spec Mocks AnyArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks RegexpArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value == ","value =~ ","value is_a? "]}," Spec Mocks RegexpArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks LiteralArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["@literal_value == "]}," Spec Mocks LiteralArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks MatcherConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["@matcher matches? "]}," Spec Mocks MatcherConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraintMatchers no_args":{"type":"method","name":"no_args","children":[],"call":["NoArgsConstraint  new "]}," Spec Mocks ArgumentConstraintMatchers hash_including":{"type":"method","name":"hash_including","children":[],"call":["HashIncludingConstraint  new "]}," Spec Mocks ArgumentConstraintMatchers boolean":{"type":"method","name":"boolean","children":[],"call":["BooleanArgConstraint  new "]}," Spec Mocks ArgumentConstraintMatchers anything":{"type":"method","name":"anything","children":[],"call":["AnyArgConstraint  new "]}," Spec Mocks ArgumentConstraintMatchers any_args":{"type":"method","name":"any_args","children":[],"call":["AnyArgsConstraint  new "]}," Spec Mocks ArgumentConstraintMatchers duck_type":{"type":"method","name":"duck_type","children":[],"call":["DuckTypeArgConstraint  new ","Spec Mocks DuckTypeArgConstraint  new "]}," Spec Matchers method_missing":{"type":"method","name":"method_missing","children":[],"call":["Matchers Has  new ","sym starts_with? ","Matchers Be  new "," has ","sym to_s =~ ","sym to_s ","Matchers BePredicate  new "]}," Spec Matchers ModuleMethods clear_generated_description":{"type":"method","name":"clear_generated_description","children":[],"call":[" generated_description= "," last_should= "," last_matcher= "]}," Spec Matchers throw_symbol":{"type":"method","name":"throw_symbol","children":[],"call":["Matchers ThrowSymbol  new "]}," Spec Matchers ThrowSymbol expected":{"type":"method","name":"expected","children":[],"call":["@expected inspect ","@expected nil? "," args ","@expected_symbol inspect ","@expected_symbol nil? "]}," Spec Matchers ThrowSymbol description":{"type":"method","name":"description","children":[],"call":[" expected "]}," Spec Matchers ThrowSymbol negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expected "]}," Spec Matchers ThrowSymbol failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expected ","@actual inspect ","@caught_symbol inspect "]}," Spec Matchers ThrowSymbol matches?":{"type":"method","name":"matches?","children":[],"call":["@actual == ","@actual nil? ","@expected nil? ","e name to_sym ","e name "," raise ","e message =~ ","e message ","proc call "," extract_sym_from_name_error ","given_proc call ","@caught_arg == ","@caught_symbol == ","@expected_arg nil? ","@caught_symbol nil? ! ","@caught_symbol nil? ","@expected_symbol nil? ","2 to_sym "," throw "," catch ","(send\n  (ivar :@caught_symbol) :==\n  (ivar :@expected_symbol)) & ","e name to_sym  == "," extract_sym_from_name_error  == ","e name to_sym  nil? "," extract_sym_from_name_error  nil? ","2 to_sym  == ","2 to_sym  nil? ! ","2 to_sym  nil? ","(send\n  (ivar :2 to_sym ) :==\n  (ivar :@expected_symbol)) & "]}," Spec Matchers ThrowSymbol initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers simple_matcher":{"type":"method","name":"simple_matcher","children":[],"call":["SimpleMatcher  new ","Spec  deprecate "]}," Spec Matchers SimpleMatcher explanation":{"type":"method","name":"explanation","children":[],"call":[]}," Spec Matchers SimpleMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@actual inspect ","@description inspect "," explanation ","@description nil? ","@given inspect "]}," Spec Matchers SimpleMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect ","@description inspect "," explanation ","@description nil? ","@given inspect "]}," Spec Matchers SimpleMatcher description":{"type":"method","name":"description","children":[],"call":[" explanation "]}," Spec Matchers SimpleMatcher matches?":{"type":"method","name":"matches?","children":[],"call":["@match_block call ","@match_block arity "]}," Spec Matchers SimpleMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers satisfy":{"type":"method","name":"satisfy","children":[],"call":["Matchers Satisfy  new "]}," Spec Matchers Satisfy negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Spec Matchers Satisfy failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Spec Matchers Satisfy matches?":{"type":"method","name":"matches?","children":[],"call":["@block call "]}," Spec Matchers Satisfy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers respond_to":{"type":"method","name":"respond_to","children":[],"call":["Matchers RespondTo  new "]}," Spec Matchers RespondTo description":{"type":"method","name":"description","children":[],"call":["@names to_s ","@sym to_s "," with_arity "," pp_names "]}," Spec Matchers RespondTo negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["(send\n  (ivar :@names) :collect) join ","name inspect ","@names collect ","@sym inspect ","@given inspect ","@actual inspect "]}," Spec Matchers RespondTo failure_message":{"type":"method","name":"failure_message","children":[],"call":["(send\n  (ivar :@names_not_responded_to) :collect) join ","name inspect ","@names_not_responded_to collect ","@sym inspect ","@given inspect "," with_arity ","@actual inspect "]}," Spec Matchers RespondTo matches?":{"type":"method","name":"matches?","children":[],"call":["@names_not_responded_to empty? ","@names_not_responded_to << ","target respond_to? ","@names each ","given respond_to? "," matches_arity? ","actual respond_to? "]}," Spec Matchers RespondTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers raise_error":{"type":"method","name":"raise_error","children":[],"call":["Matchers RaiseError  new "]}," Spec Matchers RaiseError negative_expectation?":{"type":"method","name":"negative_expectation?","children":[],"call":["s =~ "," caller first find "," caller first "," caller "]}," Spec Matchers RaiseError actual_error":{"type":"method","name":"actual_error","children":[],"call":["@actual_error inspect ","@actual_error nil? "]}," Spec Matchers RaiseError expected_error":{"type":"method","name":"expected_error","children":[],"call":["@expected_message inspect "]}," Spec Matchers RaiseError description":{"type":"method","name":"description","children":[],"call":[" expected_error "]}," Spec Matchers RaiseError negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" actual_error "," expected_error "," given_error "]}," Spec Matchers RaiseError failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual_error "," expected_error ","@actual_error message ","@raised_expected_error ! "," given_error ","@given_error message "]}," Spec Matchers RaiseError verify_message":{"type":"method","name":"verify_message","children":[],"call":["@expected_message == ","@actual_error message ","@expected_message =~ ","@given_error message "]}," Spec Matchers RaiseError eval_block":{"type":"method","name":"eval_block","children":[],"call":["@block [] "]}," Spec Matchers RaiseError matches?":{"type":"method","name":"matches?","children":[],"call":[" eval_block "," negative_expectation? "," verify_message ","proc call ","@actual_error message == ","@actual_error message ","@expected_message =~ ","@expected_message nil? ","@expected_message == ","given_proc call ","@raised_expected_error & "]}," Spec Matchers RaiseError initialize":{"type":"method","name":"initialize","children":[],"call":["String  === "]}," Spec Matchers NegativeOperatorMatcher __delegate_method_missing_to_target":{"type":"method","name":"__delegate_method_missing_to_target","children":[],"call":[" fail_with_message ","@target inspect ","operator gsub ","expected inspect ","@target send "," Spec Matchers  generated_description= ","@target __send__ "," Spec Matchers  last_matcher= "]}," Spec Matchers PositiveOperatorMatcher __delegate_method_missing_to_target":{"type":"method","name":"__delegate_method_missing_to_target","children":[],"call":[" fail_with_message ","@target inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","@target send "," Spec Matchers  generated_description= ","@target __send__ "," Spec Matchers  last_matcher= "]}," Spec Matchers BaseOperatorMatcher fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Spec Expectations  fail_with "]}," Spec Matchers BaseOperatorMatcher <=":{"type":"method","name":"<=","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher <":{"type":"method","name":"<","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher >=":{"type":"method","name":">=","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher >":{"type":"method","name":">","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher =~":{"type":"method","name":"=~","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher ===":{"type":"method","name":"===","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher ==":{"type":"method","name":"==","children":[],"call":[" __delegate_method_missing_to_target "," __delegate_method_missing_to_given "]}," Spec Matchers BaseOperatorMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers match":{"type":"method","name":"match","children":[],"call":["Matchers Match  new ","actual =~ ","matcher description= ","regexp inspect ","matcher negative_failure_message= ","actual inspect ","matcher failure_message= "," simple_matcher ","Match  new "," match ","Matcher  new ","actual match "]}," Spec Matchers Match description":{"type":"method","name":"description","children":[],"call":["@expected inspect ","@regexp inspect "]}," Spec Matchers Match negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@expected inspect ","@actual inspect ","@regexp inspect ","@given inspect "]}," Spec Matchers Match failure_message":{"type":"method","name":"failure_message","children":[],"call":["@expected inspect ","@actual inspect ","@regexp inspect ","@given inspect "]}," Spec Matchers Match matches?":{"type":"method","name":"matches?","children":[],"call":["actual =~ ","given =~ "]}," Spec Matchers Match initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers include":{"type":"method","name":"include","children":[],"call":["Matchers Include  new ","actual include? ","actual has_key? ","actual [] == ","actual [] ","expected each_pair ","expected is_a? ","actual is_a? ","expecteds each "," helper "," match ","Matcher  new ","_expected_ each "]}," Spec Matchers Include _pretty_print":{"type":"method","name":"_pretty_print","children":[],"call":["result << ","item inspect ","index < ","array length - ","array length ","array each_with_index "]}," Spec Matchers Include _message":{"type":"method","name":"_message","children":[],"call":[" _pretty_print ","@actual inspect ","@expected inspect ","@given inspect "]}," Spec Matchers Include description":{"type":"method","name":"description","children":[],"call":[" _pretty_print ","@expected inspect "]}," Spec Matchers Include negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" _message "]}," Spec Matchers Include failure_message":{"type":"method","name":"failure_message","children":[],"call":[" _message "]}," Spec Matchers Include matches?":{"type":"method","name":"matches?","children":[],"call":["actual include? ","@expecteds each ","given include? ","given [] == ","given [] ","expected each_pair ","actual has_key? ","actual [] == ","actual [] ","expected is_a? ","actual is_a? "]}," Spec Matchers Include initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers have_at_most":{"type":"method","name":"have_at_most","children":[],"call":["Matchers Have  new "]}," Spec Matchers have_at_least":{"type":"method","name":"have_at_least","children":[],"call":["Matchers Have  new "]}," Spec Matchers have":{"type":"method","name":"have","children":[],"call":["Matchers Have  new "]}," Spec Matchers Have relative_expectation":{"type":"method","name":"relative_expectation","children":[],"call":[" relativities [] "," relativities "]}," Spec Matchers Have description":{"type":"method","name":"description","children":[],"call":[" relative_expectation "," collection_name "]}," Spec Matchers Have negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@expected - ","@relativity == ","@expected + "," collection_name "]}," Spec Matchers Have failure_message":{"type":"method","name":"failure_message","children":[],"call":[" relative_expectation "," collection_name "]}," Spec Matchers Have not_a_collection":{"type":"method","name":"not_a_collection","children":[],"call":[]}," Spec Matchers Have matches?":{"type":"method","name":"matches?","children":[],"call":["@actual == ","@actual <= ","@relativity == ","@actual >= "," raise "," not_a_collection ","@actual nil? ","collection length ","collection respond_to? ","collection size ","collection_owner send ","collection_owner respond_to? "," collection_name ","@given == ","@given <= ","@given >= ","@given nil? ","collection_owner __send__ ","collection length  == ","collection size  == ","collection length  <= ","collection size  <= ","collection length  >= ","collection size  >= "," not_a_collection_owner send  "," not_a_collection_owner __send__  ","collection length  nil? ","collection size  nil? ","collection_owner send  length ","collection_owner __send__  length ","collection_owner send  respond_to? ","collection_owner __send__  respond_to? ","collection_owner send  size ","collection_owner __send__  size ","collection_owner send _owner send ","collection_owner __send__ _owner send ","collection_owner send _owner respond_to? ","collection_owner __send__ _owner respond_to? "," collection_owner send _name "," collection_owner __send__ _name ","collection_owner send _owner __send__ ","collection_owner __send__ _owner __send__ "]}," Spec Matchers Have method_missing":{"type":"method","name":"method_missing","children":[],"call":["Inflector  pluralize ","sym to_s ","Object  const_defined? ","ActiveSupport Inflector  pluralize ","inflector pluralize "]}," Spec Matchers Have relativities":{"type":"method","name":"relativities","children":[],"call":[]}," Spec Matchers Have initialize":{"type":"method","name":"initialize","children":[],"call":["expected == "]}," Spec Matchers Has predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (send\n      (ivar :@sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","@sym to_s sub ","@sym to_s ","(begin\n  (send\n    (send\n      (lvar :sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","sym to_s sub ","sym to_s "]}," Spec Matchers Has description":{"type":"method","name":"description","children":[],"call":["@args [] inspect ","@args [] "]}," Spec Matchers Has negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@args [] inspect ","@args [] "," predicate "," raise "]}," Spec Matchers Has failure_message":{"type":"method","name":"failure_message","children":[],"call":["@args [] inspect ","@args [] "," predicate "," raise "]}," Spec Matchers Has matches?":{"type":"method","name":"matches?","children":[],"call":["target send "," predicate ","given __send__ ","target __send__ ","actual __send__ "]}," Spec Matchers Has initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers exist":{"type":"method","name":"exist","children":[],"call":["Exist  new ","actual exist? ","matcher negative_failure_message= ","actual inspect ","matcher failure_message= "," simple_matcher "," match ","Matcher  new "]}," Spec Matchers Exist negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@actual inspect ","@given inspect "]}," Spec Matchers Exist failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect ","@given inspect "]}," Spec Matchers Exist matches?":{"type":"method","name":"matches?","children":[],"call":["@actual exist? ","@given exist? ","actual exist? "]}," Spec Matchers equal":{"type":"method","name":"equal","children":[],"call":["Matchers Equal  new ","actual equal? ","matcher description= ","expected inspect ","matcher negative_failure_message= ","actual inspect ","matcher failure_message= "," simple_matcher ","Equal  new "," failure_message_for_should_not "," failure_message_for_should "," match ","Matcher  new "," inspect_object ","o inspect ","o object_id ","o class "]}," Spec Matchers Equal description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," Spec Matchers Equal negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@expected inspect ","@actual inspect ","@given inspect "]}," Spec Matchers Equal failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect ","@expected inspect ","@given inspect "]}," Spec Matchers Equal matches?":{"type":"method","name":"matches?","children":[],"call":["@actual equal? ","@given equal? "]}," Spec Matchers Equal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers eql":{"type":"method","name":"eql","children":[],"call":["Matchers Eql  new ","actual eql? ","matcher description= ","expected inspect ","matcher negative_failure_message= ","actual inspect ","matcher failure_message= "," simple_matcher ","Eql  new "," failure_message_for_should_not "," failure_message_for_should "," match ","Matcher  new ","_expected_ inspect "]}," Spec Matchers Eql description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," Spec Matchers Eql negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@expected inspect ","@actual inspect ","@given inspect "]}," Spec Matchers Eql failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect ","@expected inspect ","@given inspect "]}," Spec Matchers Eql matches?":{"type":"method","name":"matches?","children":[],"call":["@actual eql? ","@given eql? "]}," Spec Matchers Eql initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers change":{"type":"method","name":"change","children":[],"call":["Matchers Change  new "]}," Spec Matchers Change from":{"type":"method","name":"from","children":[],"call":[]}," Spec Matchers Change to":{"type":"method","name":"to","children":[],"call":[]}," Spec Matchers Change by_at_most":{"type":"method","name":"by_at_most","children":[],"call":[]}," Spec Matchers Change by_at_least":{"type":"method","name":"by_at_least","children":[],"call":[]}," Spec Matchers Change by":{"type":"method","name":"by","children":[],"call":[]}," Spec Matchers Change negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@after inspect ","@before inspect "," result "]}," Spec Matchers Change actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@after - "]}," Spec Matchers Change result":{"type":"method","name":"result","children":[],"call":[]}," Spec Matchers Change failure_message":{"type":"method","name":"failure_message","children":[],"call":["@before inspect "," result "," actual_delta inspect "," actual_delta ","@maximum inspect ","@minimum inspect ","@amount inspect ","@from inspect ","@after inspect ","@to inspect "]}," Spec Matchers Change execute_change":{"type":"method","name":"execute_change","children":[],"call":["@block call ","@receiver send ","@block nil? ","@target call "]}," Spec Matchers Change matches?":{"type":"method","name":"matches?","children":[],"call":["@before != ","(send\n  (ivar :@after) :-\n  (ivar :@before)) <= ","@after - ","(send\n  (ivar :@after) :-\n  (ivar :@before)) >= ","@before + == ","@before + ","@to != ","@from != "," execute_change "," raise ","MatcherError  new ","@to == ","@from == "," evaluate_value_proc ","event_proc call "," raise_block_syntax_error "," block_given? "," evaluate_value_proc  != ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) <= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) <= "," evaluate_value_proc  - ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) >= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) >= "," evaluate_value_proc  + == "," evaluate_value_proc  + "]}," Spec Matchers Change initialize":{"type":"method","name":"initialize","children":[],"call":["receiver __send__ "," lambda "]}," Spec Matchers be_close":{"type":"method","name":"be_close","children":[],"call":["Matchers BeClose  new ","(send\n  (lvar :actual) :-\n  (lvar :expected)) abs < ","(send\n  (lvar :actual) :-\n  (lvar :expected)) abs ","actual - ","matcher description= ","matcher failure_message= "," simple_matcher ","BeClose  new "," description "," failure_message_for_should_not "," failure_message_for_should "," match ","Matcher  new ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs < ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs "]}," Spec Matchers BeClose description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers BeClose failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Spec Matchers BeClose matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (ivar :@actual) :-\n  (ivar :@expected)) abs < ","(send\n  (ivar :@actual) :-\n  (ivar :@expected)) abs ","@actual - ","(send\n  (ivar :@given) :-\n  (ivar :@expected)) abs < ","(send\n  (ivar :@given) :-\n  (ivar :@expected)) abs ","@given - "]}," Spec Matchers BeClose initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers be":{"type":"method","name":"be","children":[],"call":["Matchers Be  new ","Matchers BeSameAs  new ","args empty? "]}," Spec Matchers Be args_to_sentence":{"type":"method","name":"args_to_sentence","children":[],"call":["@args [] ","@args [] join ","@args length "," to_sentence "]}," Spec Matchers Be split_words":{"type":"method","name":"split_words","children":[],"call":["sym to_s gsub ","sym to_s "]}," Spec Matchers Be prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words "," prefix "]}," Spec Matchers Be expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" split_words "," expected "]}," Spec Matchers Be comparison":{"type":"method","name":"comparison","children":[],"call":["@comparison_method to_s ","@comparison_method nil? "]}," Spec Matchers Be args_to_s":{"type":"method","name":"args_to_s","children":[],"call":["inspected_args join ","a inspect ","@args collect ","@args empty? ","transformed_args join "," parenthesize "," inspected_args join "," inspected_args "]}," Spec Matchers Be present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (send\n    (ivar :@expected) :to_s)) to_sym ","@expected to_s "]}," Spec Matchers Be predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (ivar :@expected) :to_s)) to_sym ","@expected to_s "]}," Spec Matchers Be handling_predicate?":{"type":"method","name":"handling_predicate?","children":[],"call":["(sym :true) include? ","(true) include? "," expected "]}," Spec Matchers Be parse_expected":{"type":"method","name":"parse_expected","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :expected) :to_s) :sub\n    (ivar :@prefix)\n    (str \"\"))) to_sym ","expected to_s sub ","expected to_s ","expected starts_with? ","(str \"be_an_\") each ","Symbol  === ","(begin\n  (send\n    (send\n      (lvar :expected) :to_s) :sub\n    (lvar :prefix)\n    (str \"\"))) to_sym ","expected to_sym ","val to_s == ","val to_s ","(true) each "," set_prefix "," handling_predicate! ","expected to_s =~ ","(begin\n  (send\n    (send\n      (lvar :expected to_s sub ) :to_s) :sub\n    (ivar :@prefix)\n    (str \"\"))) to_sym ","expected to_s sub  to_s sub ","expected to_s sub  to_s ","expected to_s sub  starts_with? ","(begin\n  (send\n    (send\n      (lvar :expected to_s sub ) :to_s) :sub\n    (lvar :prefix)\n    (str \"\"))) to_sym ","expected to_s sub  to_sym ","expected to_s sub  to_s =~ "]}," Spec Matchers Be description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "," comparison "," prefix_to_sentence ","(begin\n  (send nil :prefix_to_sentence)) gsub "]}," Spec Matchers Be >":{"type":"method","name":">","children":[],"call":[]}," Spec Matchers Be >=":{"type":"method","name":">=","children":[],"call":[]}," Spec Matchers Be <=":{"type":"method","name":"<=","children":[],"call":[]}," Spec Matchers Be <":{"type":"method","name":"<","children":[],"call":[]}," Spec Matchers Be ===":{"type":"method","name":"===","children":[],"call":[]}," Spec Matchers Be ==":{"type":"method","name":"==","children":[],"call":[]}," Spec Matchers Be match_or_compare":{"type":"method","name":"match_or_compare","children":[],"call":["@actual equal? ","@actual === ","@actual == ","@actual > ","@actual >= ","@actual <= ","@actual < ","@actual nil? ","@expected == ","@given equal? ","@given === ","@given == ","@given > ","@given >= ","@given <= ","@given < ","@given nil? ","@actual __send__ "," comparison_method ","TrueClass  === "]}," Spec Matchers Be expected":{"type":"method","name":"expected","children":[],"call":["@expected inspect ","@expected == "]}," Spec Matchers Be negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@result inspect "," args_to_s "," predicate ","@actual inspect "," expected "," handling_predicate? ","@given inspect "," raise ","message << ","(sym :===) include? "]}," Spec Matchers Be failure_message":{"type":"method","name":"failure_message","children":[],"call":["@result inspect "," args_to_s "," predicate ","@actual inspect "," expected "," handling_predicate? ","@given inspect ","(str \"expected \") gsub "]}," Spec Matchers Be matches?":{"type":"method","name":"matches?","children":[],"call":[" match_or_compare "," raise ","actual __send__ "," present_tense_predicate "," predicate "," handling_predicate? ","given __send__ "," run_predicate_on ","@actual ! ! ","@actual ! "]}," Spec Matchers Be initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_expected ","args shift ","args empty? "," set_expected "]}," Test Unit UI Console TestRunner setup_mediator_with_rspec":{"type":"method","name":"setup_mediator_with_rspec","children":[],"call":[" setup_mediator_without_rspec ","StringIO  new "]}," Test Unit UI Console TestRunner finished_with_rspec":{"type":"method","name":"finished_with_rspec","children":[],"call":[" finished_without_rspec "]}," Test Unit UI Console TestRunner test_finished_with_rspec":{"type":"method","name":"test_finished_with_rspec","children":[],"call":[" test_finished_without_rspec "]}," Test Unit UI Console TestRunner test_started_with_rspec":{"type":"method","name":"test_started_with_rspec","children":[],"call":[" test_started_without_rspec "," output ","@rspec_io read ","@rspec_io rewind "]}," Test Unit UI Console TestRunner started_with_rspec":{"type":"method","name":"started_with_rspec","children":[],"call":[]}," Test Unit TestSuiteAdapter empty?":{"type":"method","name":"empty?","children":[],"call":[" examples empty? "," examples "]}," Test Unit TestSuiteAdapter delete":{"type":"method","name":"delete","children":[],"call":[" examples delete "," examples "]}," Test Unit TestSuiteAdapter size":{"type":"method","name":"size","children":[],"call":[" example_group number_of_examples "," example_group "]}," Test Unit TestSuiteAdapter run":{"type":"method","name":"run","children":[],"call":[" example_group run "," example_group ","args empty? ","Spec Runner  options "]}," Test Unit TestSuiteAdapter name":{"type":"method","name":"name","children":[],"call":[" example_group description "," example_group "]}," Test Unit TestSuiteAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["example_group examples "]}," TestResult passed?":{"type":"method","name":"passed?","children":[],"call":[" tu_passed? & "," Spec  run "," tu_passed? "," Spec Runner  run "]}," Test Unit TestCase run":{"type":"method","name":"run","children":[],"call":[]}," Test Unit TestCase initialize":{"type":"method","name":"initialize","children":[],"call":[" Test Unit TestResult  new "," pending_implementation "," caller ","description description "]}," Test Unit TestCase test_method?":{"type":"method","name":"test_method?","children":[],"call":[" instance_method arity == "," instance_method arity "," instance_method ","method_name =~ "]}," Test Unit TestCase example_method?":{"type":"method","name":"example_method?","children":[],"call":[" test_method? "," should_method? "]}," Test Unit TestCase suite":{"type":"method","name":"suite","children":[],"call":["Test Unit TestSuiteAdapter  new "]}," AutoRunner process_args":{"type":"method","name":"process_args","children":[],"call":[]}," Object args_and_options":{"type":"method","name":"args_and_options","children":[],"call":["args pop ","Hash  === ","args last "]}," Spec MetaClass metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Spec Extensions Main init_rspec_options":{"type":"method","name":"init_rspec_options","children":[],"call":["$rspec_options nil? "]}," Spec Extensions Main rspec_options":{"type":"method","name":"rspec_options","children":[],"call":["parser options ","parser order! "," Spec Runner OptionParser  new "," Spec Runner OptionParser  new  options "," Spec Runner OptionParser  new  order! "]}," Spec Extensions Main share_as":{"type":"method","name":"share_as","children":[],"call":[" raise ","NameError  new ","e message + ","e message ","Object  const_set "," share_examples_for "]}," Spec Extensions Main share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":[" describe "]}," Spec Extensions Main describe":{"type":"method","name":"describe","children":[],"call":["Spec Example ExampleGroupFactory  create_example_group ","args last []= "," caller [] "," caller ","args last ","args << ","Hash  === "," raise ","args empty? ","File  expand_path "]}," Class class_count!":{"type":"method","name":"class_count!","children":[],"call":[]}," Class subclass":{"type":"method","name":"subclass","children":[],"call":["klass instance_eval "," const_set "," instance_eval "," class_count! ","Class  new ","Class  new  instance_eval "]}," Spec Expectations fail_with":{"type":"method","name":"fail_with","children":[],"call":["Kernel  raise ","Spec Expectations ExpectationNotMetError  new ","message << << "," differ diff_as_object "," differ ","message << ","target is_a? ! ","target is_a? "," differ diff_as_string ","target to_s ","expected is_a? ","target nil? ","expected nil? "," differ nil? ","message [] ","message length == ","message length ","Array  === "," Spec  warn ","(send\n  (const nil :Array) :===\n  (lvar :message)) & "," raise ","Failure message is nil. Does your matcher define the  + ","message nil? "," differ diff_as_hash "]}," Spec Expectations NegativeExpectationMatcherHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":["Spec Expectations  fail_with ","matcher negative_failure_message "," Spec Matchers  generated_description= "," describe_matcher ","matcher matches? ","matcher respond_to? "," raise ","matcher inspect ","Spec Matchers NegativeOperatorMatcher  new ","use_operator_matcher == "," describe ","matcher nil? "," Spec Matchers  last_matcher= "," Spec Matchers  last_should= ","matcher matches? er negative_failure_message "," describe_matcher matches? er ","matcher matches? er matcher matches? es? ","matcher matches? er respond_to? ","matcher matches? er inspect ","use_operator_matcher matches? er == ","matcher matches? er nil? "," Spec Matchers  last_matcher matches? er= "]}," Spec Expectations ExpectationMatcherHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":["Spec Expectations  fail_with ","matcher failure_message "," Spec Matchers  generated_description= "," describe_matcher ","matcher matches? "," raise ","matcher inspect ","matcher respond_to? ","Spec Matchers PositiveOperatorMatcher  new ","use_operator_matcher == "," describe ","matcher nil? "," Spec Matchers  last_matcher= "," Spec Matchers  last_should= ","matcher matches? er failure_message "," describe_matcher matches? er ","matcher matches? er matcher matches? es? ","matcher matches? er inspect ","matcher matches? er respond_to? ","use_operator_matcher matches? er == ","matcher matches? er nil? "," Spec Matchers  last_matcher matches? er= "]}," Spec Expectations MatcherHandlerHelper describe_matcher":{"type":"method","name":"describe_matcher","children":[],"call":["matcher class name ","matcher class ","matcher description ","matcher respond_to? "]}," Spec Expectations StringHelpers starts_with?":{"type":"method","name":"starts_with?","children":[],"call":[" to_s [] == ","prefix to_s "," to_s [] ","prefix to_s length - ","prefix to_s length "," to_s ","prefix length - ","prefix length "]}," Spec Expectations ObjectExpectations should_not":{"type":"method","name":"should_not","children":[],"call":["NegativeExpectationMatcherHandler  handle_matcher "," should not "," should ","Spec Matchers NegativeOperatorMatcher  new ","default_parameter == "]}," Spec Expectations ObjectExpectations should":{"type":"method","name":"should","children":[],"call":["ExpectationMatcherHandler  handle_matcher ","ShouldHelper  new ","Should Should  new ","Spec Matchers PositiveOperatorMatcher  new ","default_parameter == "]}," Spec Expectations Differs Default context_lines":{"type":"method","name":"context_lines","children":[],"call":["@options context_lines "]}," Spec Expectations Differs Default format":{"type":"method","name":"format","children":[],"call":["@options diff_format "]}," Spec Expectations Differs Default diff_as_object":{"type":"method","name":"diff_as_object","children":[],"call":[" diff_as_string ","PP  pp "]}," Spec Expectations Differs Default diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":["output << << ","output << ","oldhunk diff "," format ","hunk unshift ","hunk overlaps? "," context_lines > "," context_lines ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each ","diffs empty? ","Diff LCS  diff ","e chomp ","data_new split map! ","data_new split ","data_old split map! ","data_old split ","@context_lines > ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","Diff LCS  diff  empty? "]}," Spec Expectations Differs Default initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Example SharedExampleGroup execute_in_class_hierarchy":{"type":"method","name":"execute_in_class_hierarchy","children":[],"call":["classes each ","classes unshift ","classes << "]}," Spec Example SharedExampleGroup included":{"type":"method","name":"included","children":[],"call":["mod module_eval "]}," Spec Example SharedExampleGroup initialize":{"type":"method","name":"initialize","children":[],"call":[" class add_shared_example_group "," class "," describe "," set_description "]}," Spec Example SharedExampleGroup spec_path":{"type":"method","name":"spec_path","children":[],"call":["File  expand_path ","example_group spec_path "]}," Spec Example SharedExampleGroup guard_against_redefining_existing_example_group":{"type":"method","name":"guard_against_redefining_existing_example_group","children":[],"call":[" raise ","ArgumentError  new ","existing_example_group description "," spec_path == "," spec_path ","new_example_group equal? "," find_shared_example_group ","new_example_group description "," find_shared_example_group  description "]}," Spec Example SharedExampleGroup shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":[]}," Spec Example SharedExampleGroup find_shared_example_group":{"type":"method","name":"find_shared_example_group","children":[],"call":["b description == ","b description "," shared_example_groups find "," shared_example_groups "]}," Spec Example SharedExampleGroup add_shared_example_group":{"type":"method","name":"add_shared_example_group","children":[],"call":[" shared_example_groups << "," shared_example_groups "," guard_against_redefining_existing_example_group "]}," Spec Example Pending pending":{"type":"method","name":"pending","children":[],"call":[" raise ","Spec Example ExamplePendingError  new ","Spec Example PendingExampleFixedError  new "," block_given? "," caller [] "," caller "]}," Spec Example ModuleReopeningFix include":{"type":"method","name":"include","children":[],"call":["child_module __send__ "," child_modules each "," child_modules "]}," Spec Example ModuleReopeningFix included":{"type":"method","name":"included","children":[],"call":[" child_modules << "," child_modules "]}," Spec Example ModuleReopeningFix child_modules":{"type":"method","name":"child_modules","children":[],"call":[]}," Spec Example ModuleInclusionWarnings method_missing":{"type":"method","name":"method_missing","children":[],"call":["md call "," respond_to? ","MethodDispatcher  new "," class described_module "," class ","MethodDispatcher  new  call "]}," Spec Example ModuleInclusionWarnings respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["MethodDispatcher  new respond_to? ","MethodDispatcher  new "," class described_module "," class "]}," Spec Example ModuleInclusionWarnings MethodDispatcher call":{"type":"method","name":"call","children":[],"call":["@target send ","@target extend ","Kernel  warn "," caller [] "," caller "]}," Spec Example ModuleInclusionWarnings MethodDispatcher respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@mod instance_methods include? ","sym to_s ","@mod instance_methods "]}," Spec Example ModuleInclusionWarnings MethodDispatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Example ExampleMethods after_example":{"type":"method","name":"after_example","children":[],"call":[" teardown_mocks_for_rspec "," verify_mocks_for_rspec "," class run_after_each "," class "]}," Spec Example ExampleMethods before_example":{"type":"method","name":"before_example","children":[],"call":[" class run_before_each "," class "," setup_mocks_for_rspec "]}," Spec Example ExampleMethods implementation_backtrace":{"type":"method","name":"implementation_backtrace","children":[],"call":[" eval "," backtrace ","Kernel  warn "]}," Spec Example ExampleMethods run_with_description_capturing":{"type":"method","name":"run_with_description_capturing","children":[],"call":["Spec Matchers  clear_generated_description ","Spec Matchers  generated_description "," instance_eval ","Matchers  capture_generated_description "]}," Spec Example ExampleMethods set_instance_variables_from_hash":{"type":"method","name":"set_instance_variables_from_hash","children":[],"call":[" instance_variable_set ","(str \"@_implementation\") include? ","variable_name to_s ","ivars each ","(str \"@_implementation\") index ","instance_variables each ","(str \"@_defined_description\") include? ","(str \"@_proxy\") include? "]}," Spec Example ExampleMethods __full_description":{"type":"method","name":"__full_description","children":[],"call":[" description "," class description "," class "]}," Spec Example ExampleMethods description":{"type":"method","name":"description","children":[],"call":[" Spec Matchers  generated_description ","@_proxy description "," raise ","Spec Example NoDescriptionError  new ","@_proxy location ","Spec  warn ","Spec Example NoDescriptionError  message "]}," Spec Example ExampleMethods eval_each_fail_slow":{"type":"method","name":"eval_each_fail_slow","children":[],"call":[" raise "," instance_eval ","procs each ","examples each ","blocks each "]}," Spec Example ExampleMethods eval_each_fail_fast":{"type":"method","name":"eval_each_fail_fast","children":[],"call":[" instance_eval ","procs each ","examples each ","blocks each "]}," Spec Example ExampleMethods violated":{"type":"method","name":"violated","children":[],"call":[" raise ","Spec Expectations ExpectationNotMetError  new "]}," Spec Example ExampleMethods instance_variable_hash":{"type":"method","name":"instance_variable_hash","children":[],"call":["variable_hash []= "," instance_variable_get "," instance_variables inject "," instance_variables "]}," Spec Example ExampleMethods execute":{"type":"method","name":"execute","children":[],"call":["ExamplePendingError  === ","execution_error nil? ","options reporter example_finished ","options reporter "," after_example "," run_with_description_capturing "," before_example ","Timeout  timeout ","options timeout "," set_instance_variables_from_hash ","options reporter example_started "," after_each_example "," eval_block "," before_each_example ","run_options reporter example_finished ","ExampleDescription  new "," options "," description ","run_options reporter "," instance_eval ","run_options timeout ","run_options reporter example_started ","@_proxy update "," puts "," caller "," caller [] =~ "," caller [] "," exit "]}," Spec Example ExampleMatcher example_regexp":{"type":"method","name":"example_regexp","children":[],"call":["Regexp  escape "]}," Spec Example ExampleMatcher example_group_regex_not_considering_modules":{"type":"method","name":"example_group_regex_not_considering_modules","children":[],"call":["Regexp  escape ","@example_group_description split last ","@example_group_description split "]}," Spec Example ExampleMatcher example_group_with_before_all_regexp":{"type":"method","name":"example_group_with_before_all_regexp","children":[],"call":["Regexp  escape "]}," Spec Example ExampleMatcher example_group_regex":{"type":"method","name":"example_group_regex","children":[],"call":["Regexp  escape "]}," Spec Example ExampleMatcher matches_example_not_considering_modules?":{"type":"method","name":"matches_example_not_considering_modules?","children":[],"call":["specified_example =~ "," example_regexp "," example_group_regex_not_considering_modules "]}," Spec Example ExampleMatcher matches_literal_example?":{"type":"method","name":"matches_literal_example?","children":[],"call":["specified_example =~ "," example_regexp "," example_group_with_before_all_regexp "," example_group_regex "]}," Spec Example ExampleMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_example_not_considering_modules? "," matches_literal_example? ","specified_examples each ","specified_examples any? "]}," Spec Example ExampleMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Example ExampleGroupMethods should_method?":{"type":"method","name":"should_method?","children":[],"call":[" instance_method arity == "," instance_method arity "," instance_method ","method_name =~ ","(send\n  (lvar :method_name) :=~\n  (regexp\n    (str \"^should(_not)?$\")\n    (regopt))) ! ","(int -1) include? "," instance_method arity < "]}," Spec Example ExampleGroupMethods example_method?":{"type":"method","name":"example_method?","children":[],"call":[" should_method? "]}," Spec Example ExampleGroupMethods add_method_examples":{"type":"method","name":"add_method_examples","children":[],"call":["examples << "," __send__ "," new "," example_method? "," instance_methods sort each "," instance_methods sort "," instance_methods "," instance_methods each "]}," Spec Example ExampleGroupMethods before_eval":{"type":"method","name":"before_eval","children":[],"call":[]}," Spec Example ExampleGroupMethods after_parts_from_scope":{"type":"method","name":"after_parts_from_scope","children":[],"call":[" rspec_options after_suite_parts "," rspec_options "," after_all_parts "," after_each_parts ","Spec Runner  options after_suite_parts ","Spec Runner  options "]}," Spec Example ExampleGroupMethods before_parts_from_scope":{"type":"method","name":"before_parts_from_scope","children":[],"call":[" rspec_options before_suite_parts "," rspec_options "," before_all_parts "," before_each_parts ","Spec Runner  options before_suite_parts ","Spec Runner  options "]}," Spec Example ExampleGroupMethods scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":["args [] "," args_and_options "]}," Spec Example ExampleGroupMethods define_methods_from_predicate_matchers":{"type":"method","name":"define_methods_from_predicate_matchers","children":[],"call":[" eval ","method_on_object to_s gsub ","method_on_object to_s "," define_method ","all_predicate_matchers each_pair "," predicate_matchers merge ","Spec Runner  configuration predicate_matchers ","Spec Runner  configuration "," predicate_matchers ","run_options predicate_matchers "," predicate_matchers merge  each_pair "]}," Spec Example ExampleGroupMethods plugin_mock_framework":{"type":"method","name":"plugin_mock_framework","children":[],"call":[" include "," require ","Spec Runner  configuration mock_framework ","Spec Runner  configuration ","run_options mock_framework ","Spec Runner  configuration Spec Runner  configuration mock_framework  ","Spec Runner  configuration run_options mock_framework  ","run_options Spec Runner  configuration mock_framework  ","run_options run_options mock_framework  "]}," Spec Example ExampleGroupMethods is_example_group?":{"type":"method","name":"is_example_group?","children":[],"call":["klass kind_of? ","Module  === "]}," Spec Example ExampleGroupMethods execute_in_class_hierarchy":{"type":"method","name":"execute_in_class_hierarchy","children":[],"call":["classes each ","classes unshift ","classes << ","current_class superclass "," is_example_group? ","current_class superclass  superclass "]}," Spec Example ExampleGroupMethods example_objects":{"type":"method","name":"example_objects","children":[],"call":[]}," Spec Example ExampleGroupMethods dry_run?":{"type":"method","name":"dry_run?","children":[],"call":[" rspec_options dry_run "," rspec_options ","Spec Runner  options dry_run ","Spec Runner  options "]}," Spec Example ExampleGroupMethods reporter":{"type":"method","name":"reporter","children":[],"call":[" rspec_options reporter "," rspec_options ","Spec Runner  options reporter ","Spec Runner  options "]}," Spec Example ExampleGroupMethods specified_examples":{"type":"method","name":"specified_examples","children":[],"call":[" rspec_options examples "," rspec_options ","Spec Runner  options examples ","Spec Runner  options "]}," Spec Example ExampleGroupMethods specified_examples?":{"type":"method","name":"specified_examples?","children":[],"call":[" specified_examples empty? ! "," specified_examples empty? "," specified_examples ","run_options examples empty? ! ","run_options examples empty? ","run_options examples "]}," Spec Example ExampleGroupMethods examples_to_run":{"type":"method","name":"examples_to_run","children":[],"call":["matcher matches? ! ","matcher matches? "," specified_examples ","ExampleGroupMethods  matcher_class new ","example description "," description to_s "," description ","ExampleGroupMethods  matcher_class ","all_examples reject "," specified_examples? "," examples ","ExampleMatcher  new ","run_options examples "," example_descriptions reject "," example_descriptions "," example_proxies reject "," example_proxies ","proxy description "," examples_were_specified? ","proxy location =~ ","run_options example_line ","proxy location "," example_proxies select "," location =~ "," location ","run_options line_number_requested? ","ExampleGroupMethods  matcher_class new  matches? ! ","ExampleMatcher  new  matches? ! ","ExampleGroupMethods  matcher_class new  matches? ","ExampleMatcher  new  matches? ","ExampleGroupMethods  ExampleGroupMethods  matcher_class new _class new ","ExampleGroupMethods  ExampleMatcher  new _class new ","ExampleGroupMethods  ExampleGroupMethods  matcher_class new _class ","ExampleGroupMethods  ExampleMatcher  new _class "," examples  reject "]}," Spec Example ExampleGroupMethods run_after_all":{"type":"method","name":"run_after_all","children":[],"call":[" reporter failure "," reporter ","after_all eval_each_fail_slow ","example_group after_all_parts "," execute_in_class_hierarchy ","after_all set_instance_variables_from_hash "," new ","example_group_class after_all_parts "," each_ancestor_example_group_class ","run_options reporter failure ","run_options reporter "," example_group_hierarchy reverse each "," example_group_hierarchy reverse "," example_group_hierarchy ","run_options reporter example_failed ","ExampleDescription  new "," example_group_hierarchy run_after_all "," example_group_hierarchy after_all_parts empty? "," example_group_hierarchy after_all_parts ","ExampleProxy  new "," new  eval_each_fail_slow ","example_group  new _parts "," new  set_instance_variables_from_hash ","example_group_class  new _parts "," example_group_hierarchy run_ new  "," example_group_hierarchy  new _parts empty? "," example_group_hierarchy  new _parts "]}," Spec Example ExampleGroupMethods execute_examples":{"type":"method","name":"execute_examples","children":[],"call":["example_group_instance instance_variable_hash ","example_group_instance execute "," rspec_options ","examples each ","Spec Runner  options "," new "," example_implementations [] "," example_implementations ","example options ","example description "," new  instance_variable_hash "," new  execute "]}," Spec Example ExampleGroupMethods run_before_all":{"type":"method","name":"run_before_all","children":[],"call":["before_all instance_variable_hash "," reporter failure "," reporter ","before_all eval_each_fail_fast ","example_group before_all_parts "," execute_in_class_hierarchy "," new ","example_group_class before_all_parts "," each_ancestor_example_group_class ","run_options reporter failure ","run_options reporter "," example_group_hierarchy each "," example_group_hierarchy ","run_options reporter example_failed ","ExampleDescription  new "," example_group_hierarchy run_before_all "," example_group_hierarchy before_all_parts empty? "," example_group_hierarchy before_all_parts ","ExampleProxy  new "," new  instance_variable_hash "," new  eval_each_fail_fast ","example_group  new _parts ","example_group_class  new _parts "," example_group_hierarchy run_ new  "," example_group_hierarchy  new _parts empty? "," example_group_hierarchy  new _parts "]}," Spec Example ExampleGroupMethods dry_run":{"type":"method","name":"dry_run","children":[],"call":[" rspec_options reporter example_finished "," rspec_options reporter "," rspec_options "," rspec_options reporter example_started ","examples each ","Spec Runner  options reporter example_finished ","Spec Runner  options reporter ","Spec Runner  options ","Spec Runner  options reporter example_started ","run_options reporter example_finished ","run_options reporter ","run_options reporter example_started "]}," Spec Example ExampleGroupMethods run_after_each":{"type":"method","name":"run_after_each","children":[],"call":["example eval_each_fail_slow ","example_group after_each_parts "," execute_in_class_hierarchy ","example_group_class after_each_parts "," each_ancestor_example_group_class "," example_group_hierarchy reverse each "," example_group_hierarchy reverse "," example_group_hierarchy "]}," Spec Example ExampleGroupMethods run_before_each":{"type":"method","name":"run_before_each","children":[],"call":["example eval_each_fail_fast ","example_group before_each_parts "," execute_in_class_hierarchy ","example_group_class before_each_parts "," each_ancestor_example_group_class "," all_before_each_parts "]}," Spec Example ExampleGroupMethods registration_backtrace":{"type":"method","name":"registration_backtrace","children":[],"call":[" eval "," registration_binding_block "," registration_binding_block binding "]}," Spec Example ExampleGroupMethods unregister":{"type":"method","name":"unregister","children":[],"call":[" rspec_options remove_example_group "," rspec_options ","Spec Runner  options remove_example_group ","Spec Runner  options "]}," Spec Example ExampleGroupMethods register":{"type":"method","name":"register","children":[],"call":[" rspec_options add_example_group "," rspec_options ","Spec Runner  options add_example_group ","Spec Runner  options "]}," Spec Example ExampleGroupMethods reset":{"type":"method","name":"reset","children":[],"call":[]}," Spec Example ExampleGroupMethods after_each_parts":{"type":"method","name":"after_each_parts","children":[],"call":[]}," Spec Example ExampleGroupMethods before_each_parts":{"type":"method","name":"before_each_parts","children":[],"call":[]}," Spec Example ExampleGroupMethods after_all_parts":{"type":"method","name":"after_all_parts","children":[],"call":[]}," Spec Example ExampleGroupMethods before_all_parts":{"type":"method","name":"before_all_parts","children":[],"call":[]}," Spec Example ExampleGroupMethods teardown":{"type":"method","name":"teardown","children":[],"call":[" after "]}," Spec Example ExampleGroupMethods setup":{"type":"method","name":"setup","children":[],"call":[" before "]}," Spec Example ExampleGroupMethods remove_after":{"type":"method","name":"remove_after","children":[],"call":[" after_each_parts delete "," after_each_parts "]}," Spec Example ExampleGroupMethods append_after":{"type":"method","name":"append_after","children":[],"call":["parts << "," after_parts_from_scope "," scope_and_options "," after_parts_from_scope  << "," after_ after_parts_from_scope _from_scope "]}," Spec Example ExampleGroupMethods prepend_after":{"type":"method","name":"prepend_after","children":[],"call":["parts unshift "," after_parts_from_scope "," scope_and_options "," after_parts_from_scope  unshift "," after_ after_parts_from_scope _from_scope "]}," Spec Example ExampleGroupMethods append_before":{"type":"method","name":"append_before","children":[],"call":["parts << "," before_parts_from_scope "," scope_and_options "," before_parts_from_scope  << "," before_ before_parts_from_scope _from_scope "]}," Spec Example ExampleGroupMethods prepend_before":{"type":"method","name":"prepend_before","children":[],"call":["parts unshift "," before_parts_from_scope "," scope_and_options "," before_parts_from_scope  unshift "," before_ before_parts_from_scope _from_scope "]}," Spec Example ExampleGroupMethods number_of_examples":{"type":"method","name":"number_of_examples","children":[],"call":[" examples length "," examples "," example_descriptions length "," example_descriptions "," example_proxies length "," example_proxies "]}," Spec Example ExampleGroupMethods examples":{"type":"method","name":"examples","children":[],"call":["examples reverse "," rspec_options reverse "," rspec_options "," add_method_examples "," example_objects dup "," example_objects ","Spec Runner  options reverse ","Spec Runner  options ","run_options reverse "," example_descriptions "," example_descriptions reverse "," example_proxies "," example_proxies reverse "," example_objects dup  reverse "," add_method_ example_objects dup  "]}," Spec Example ExampleGroupMethods set_description":{"type":"method","name":"set_description","children":[],"call":[" described_type "," described_type class == "," described_type class ","File  expand_path ","options [] ","ExampleGroupMethods  description_text "," args_and_options "," include "," caller ","Spec Example  args_and_options "," options [] "," options "]}," Spec Example ExampleGroupMethods description_parts":{"type":"method","name":"description_parts","children":[],"call":["parts flatten compact ","parts flatten ","parts << ","example_group description_args "," execute_in_class_hierarchy ","example_group_class description_args "," each_ancestor_example_group_class ","(send\n  (lvar :parts) :<<\n  (send\n    (lvar :example_group_class) :description_args)) flatten "," example_group_hierarchy inject "," example_group_hierarchy "]}," Spec Example ExampleGroupMethods described_type":{"type":"method","name":"described_type","children":[],"call":["part is_a? "," description_parts find "," description_parts "," description_parts reverse find "," description_parts reverse "]}," Spec Example ExampleGroupMethods description":{"type":"method","name":"description","children":[],"call":[" to_s ","result == ","result nil? ","ExampleGroupMethods  description_text "," description_parts "," build_description_from ","ExampleGroupMethods  build_description_from ","ExampleGroupMethods  description_text  == ","ExampleGroupMethods  description_text  nil? "]}," Spec Example ExampleGroupMethods run":{"type":"method","name":"run","children":[],"call":[" run_after_all "," execute_examples "," run_before_all "," define_methods_from_predicate_matchers "," plugin_mock_framework "," dry_run "," dry_run? ","examples empty? "," reporter add_example_group "," reporter "," examples_to_run empty? "," examples_to_run ","run_options dry_run? ","run_options reporter add_example_group ","run_options reporter "," notify "," run_examples "," execute_ examples_to_run  "," examples_to_run  empty? ","  examples_to_run _to_run empty? ","  examples_to_run _to_run "," run_ examples_to_run  "]}," Spec Example ExampleGroupMethods xit":{"type":"method","name":"xit","children":[],"call":["Kernel  warn "]}," Spec Example ExampleGroupMethods it":{"type":"method","name":"it","children":[],"call":[" example_objects << "," example_objects "," new ","  new xampl new _obj new cts << ","  new xampl new _obj new cts "," n new w "]}," Spec Example ExampleGroupMethods predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":[]}," Spec Example ExampleGroupMethods it_should_behave_like":{"type":"method","name":"it_should_behave_like","children":[],"call":[" include "," raise ","RuntimeError  new ","SharedExampleGroup  find_shared_example_group "," include_shared_example_group ","shared_example_groups each ","SharedExampleGroup  find_shared_SharedExampleGroup  find_shared_example_group  "," include_shared_SharedExampleGroup  find_shared_example_group  ","shared_SharedExampleGroup  find_shared_example_group s each "]}," Spec Example ExampleGroupMethods describe":{"type":"method","name":"describe","children":[],"call":[" before_eval "," set_description "," module_eval "," describe "," subclass ","SharedExampleGroup  new ","params [] ","params []= "," eval ","args last ","args << ","Hash  === "," create_nested_example_group "," create_shared_example_group ","options [] ","options []= "," create_example_group_subclass ","Spec Example  add_spec_path_to ","ExampleGroupFactory  create_shared_example_group ","Spec Example  set_location "," caller [] "," caller "," set_location "," add_options "," raise ","Spec Example NoDescriptionError  new ","args empty? ","args last  [] ","args last  []= "," add_options  [] "," add_options  []= "," add_args last  "," add_ add_options  "]}," Spec Example ExampleGroupMethods inherited":{"type":"method","name":"inherited","children":[],"call":["Spec Runner  register_at_exit_hook ","klass register "," register_example_group ","ExampleGroupFactory  register_example_group "]}," Spec Example ExampleGroupMethods description_text":{"type":"method","name":"description_text","children":[],"call":["result << ","arg to_s ","arg to_s =~ ","result == ","args inject ","description << ","description == "]}," Spec Example ExampleGroupFactory determine_superclass":{"type":"method","name":"determine_superclass","children":[],"call":[" get ","2 to_sym ","2 == ","opts [] =~ ","@example_group_types keys join ","@example_group_types keys ","opts [] ","@example_group_types opts [] s join ","@example_group_types opts [] s "]}," Spec Example ExampleGroupFactory create_example_group":{"type":"method","name":"create_example_group","children":[],"call":["superclass describe "," determine_superclass ","args last ","Hash  === ","SharedExampleGroup  new ","opts [] "," determine_superclass  describe "," determine_ determine_superclass  ","args last  [] "]}," Spec Example ExampleGroupFactory get":{"type":"method","name":"get","children":[],"call":["@example_group_types [] ","@example_group_types values include? ","@example_group_types values "]}," Spec Example ExampleGroupFactory default":{"type":"method","name":"default","children":[],"call":["@example_group_types merge! ","Hash  new ","@example_group_types merge ","Hash  new  merge! ","Hash  new  merge "]}," Spec Example ExampleGroupFactory register":{"type":"method","name":"register","children":[],"call":["@example_group_types []= "]}," Spec Example ExampleGroupFactory reset":{"type":"method","name":"reset","children":[],"call":[" default "]}," Spec Example ExampleGroup initialize":{"type":"method","name":"initialize","children":[],"call":[" pending_implementation "," caller "]}," Spec Example Configuration mock_framework_path":{"type":"method","name":"mock_framework_path","children":[],"call":["File  expand_path ","File  join ","File  dirname "]}," Spec Example Configuration get_type_from_options":{"type":"method","name":"get_type_from_options","children":[],"call":["options [] "]}," Spec Example Configuration scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":["args [] "," args_and_options "]}," Spec Example Configuration append_after":{"type":"method","name":"append_after","children":[],"call":["example_group append_after ","ExampleGroupFactory  get "," get_type_from_options "," scope_and_options ","ExampleGroupFactory  get  append_after "]}," Spec Example Configuration prepend_after":{"type":"method","name":"prepend_after","children":[],"call":["example_group prepend_after ","ExampleGroupFactory  get "," get_type_from_options "," scope_and_options ","ExampleGroupFactory  get  prepend_after "]}," Spec Example Configuration append_before":{"type":"method","name":"append_before","children":[],"call":["example_group append_before ","ExampleGroupFactory  get "," get_type_from_options "," scope_and_options ","ExampleGroupFactory  get  append_before "]}," Spec Example Configuration prepend_before":{"type":"method","name":"prepend_before","children":[],"call":["example_group prepend_before ","ExampleGroupFactory  get "," get_type_from_options "," scope_and_options ","ExampleGroupFactory  get  prepend_before "]}," Spec Example Configuration predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":[]}," Spec Example Configuration include":{"type":"method","name":"include","children":[],"call":["ExampleGroupFactory  get send ","ExampleGroupFactory  get ","modules each ","required_example_group to_sym "," get_type_from_options "," args_and_options ","args << ","Hash  === ","args last "," include_or_extend ","required_example_group to_sym  to_sym "," get_type_from_options  to_sym "]}," Spec Example Configuration mock_framework":{"type":"method","name":"mock_framework","children":[],"call":[" mock_framework_path "]}," Spec Example Configuration mock_with":{"type":"method","name":"mock_with","children":[],"call":[" mock_framework_path ","mock_framework to_s "]}," Spec Adapters RubyEngine adapter":{"type":"method","name":"adapter","children":[],"call":[]}," Spec Adapters RubyEngine engine":{"type":"method","name":"engine","children":[],"call":[]}," Rspec spec_commands":{"type":"method","name":"spec_commands","children":[],"call":["File  join ","Config CONFIG  [] ","File  expand_path ","File  dirname "]}," Rspec spec_command":{"type":"method","name":"spec_command","children":[],"call":["@spec_command gsub! "," raise ","File  exists? "," spec_commands find "," spec_commands ","spec gsub! ","File ALT_SEPARATOR  nil? ","File  join ","Config CONFIG  [] ","command gsub "," spec_commands each ","@File  join _command gsub! "," File  join _commands find "," File  join _commands ","File  join  gsub! "," File  join _commands each "]}," Rspec add_options_if_present":{"type":"method","name":"add_options_if_present","children":[],"call":["File  exist? ","File  join "]}," Rspec make_test_cmd":{"type":"method","name":"make_test_cmd","children":[],"call":["files_to_test keys flatten join ","files_to_test keys flatten ","files_to_test keys "," add_options_if_present "," spec_command "," ruby ","cmds join ","cmds push ","methods map ","partial each ","cmds << ","(send\n  (lvar :full) :map) flatten join ","(send\n  (lvar :full) :map) flatten ","full map ","full empty? ","v empty? ","files_to_test partition ","files_to_test empty? ","File  expand_path ","File  join ","File  dirname "," normalize keys flatten join "," normalize keys flatten "," normalize keys "," normalize ","(send\n  (lvar :full) :map) flatten join _to_test keys flatten join ","(send\n  (lvar :full) :map) flatten join _to_test keys flatten ","(send\n  (lvar :full) :map) flatten join _to_test keys ","(send\n  (lvar :full) :map) flatten join _to_test partition ","(send\n  (lvar :full) :map) flatten join _to_test empty? "]}," Rspec consolidate_failures":{"type":"method","name":"consolidate_failures","children":[],"call":["filters [] << ","filters [] ","trace =~ ","failed each "," new_hash_of_arrays ","failed_trace =~ ","Regexp  new ","(send\n  (send\n    (ivar :@files) :keys) :select) each ","f =~ ","@files keys select ","@files keys ","h []= ","Hash  new "," test_files_for find "," test_files_for "," new_hash_of_arrays  [] << "," new_hash_of_arrays  [] "]}," Rspec initialize":{"type":"method","name":"initialize","children":[],"call":[" completed_re= "," failed_results_re= ","m [] "," proc "," files_matching ","kernel proc "," spec_command "]}," Spec TextRunner dump_counts":{"type":"method","name":"dump_counts","children":[],"call":["@output << << ","@output << ","@failures length to_s ","@failures length ","@expectation_count to_s ","@output << << << ","@specification_count to_s ","@failure_count to_s "]}," Spec TextRunner dump_duration":{"type":"method","name":"dump_duration","children":[],"call":["@output << << << ","@output << << ","duration to_s ","@output << "]}," Spec TextRunner dump_backtrace":{"type":"method","name":"dump_backtrace","children":[],"call":["@output << ","lines join ","line include? ","trace reject ","(send\n  (lvar :trace) :reject) reject "]}," Spec TextRunner dump_failures":{"type":"method","name":"dump_failures","children":[],"call":["index + "," dump_backtrace ","exception backtrace ","@output << << ","@output << ","exception to_s ","index to_s ","@failures inject ","exception class name ","exception class ","exception message "]}," Spec TextRunner end_run":{"type":"method","name":"end_run","children":[],"call":[" dump_counts "," dump_duration ","@end_time - "," dump_failures ","@output << ","Time  new ","Time  new  - "]}," Spec TextRunner start_run":{"type":"method","name":"start_run","children":[],"call":["Time  new ","@output << "]}," Spec TextRunner spec":{"type":"method","name":"spec","children":[],"call":[]}," Spec TextRunner failure":{"type":"method","name":"failure","children":[],"call":["@failures << ","@output << "]}," Spec TextRunner pass":{"type":"method","name":"pass","children":[],"call":["@output << "]}," Spec TextRunner run":{"type":"method","name":"run","children":[],"call":[" end_run ","context run ","context_or_collection collection each ","context_or_collection collection "," start_run "]}," Spec TextRunner common_initialization":{"type":"method","name":"common_initialization","children":[],"call":["Array  new "]}," Spec TextRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" common_initialization ","Array  new "]}," MockExpectation returns":{"type":"method","name":"returns","children":[],"call":[" proc "," block_given? "]}," MockExpectation twice":{"type":"method","name":"twice","children":[],"call":[]}," MockExpectation once":{"type":"method","name":"once","children":[],"call":[]}," MockExpectation never":{"type":"method","name":"never","children":[],"call":[]}," MockExpectation at_least_once":{"type":"method","name":"at_least_once","children":[],"call":[]}," MockExpectation with_any_args":{"type":"method","name":"with_any_args","children":[],"call":[" nill "]}," MockExpectation with_no_args":{"type":"method","name":"with_no_args","children":[],"call":[]}," MockExpectation with":{"type":"method","name":"with","children":[],"call":[]}," MockExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" proc "]}," MockExpectation verify_call":{"type":"method","name":"verify_call","children":[],"call":["@block call ","@call_count + ","args << ","block nil? "," raise ","message + ","@expected_params == ","@expected_params nil? ","@method_block call ","@method_block nil? ","Call expectation violated with:  + ","@call_count +  + "]}," MockExpectation verify":{"type":"method","name":"verify","children":[],"call":[" raise ","message + ","@expected_call_count == "]}," Mock method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","Unexpected method  + + ","Unexpected method  + ","sym to_s ","expectation verify_call ","@expectations [] ","@options [] ","expectation verify_message "," find_matching_expectation ","(str \"Mock '\") + ","(send\n  (lvar :args) :collect) join ","arg class name ","arg class ","args collect ","@expectations []  verify_call "," find_matching_expectation  verify_call ","@@expectations [] s [] ","@ find_matching_expectation s [] ","@expectations []  verify_message "," find_matching_expectation  verify_message "," find_matching_@expectations []  "," find_matching_ find_matching_expectation  "]}," Mock ignore_missing":{"type":"method","name":"ignore_missing","children":[],"call":[]}," Mock __verify":{"type":"method","name":"__verify","children":[],"call":["@expectations [] verify ","method to_s ","@expectations [] ","@expectations keys each ","@expectations keys ","expectation verify_messages_received ","@expectations each "]}," Mock __expects":{"type":"method","name":"__expects","children":[],"call":["@expectations [] ","@expectations []= ","MockExpectation  new "," block_given? "]}," Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup "]}," Spec Expectations should_be_false":{"type":"method","name":"should_be_false","children":[],"call":[" ! "," should "]}," Spec Expectations should_be_true":{"type":"method","name":"should_be_true","children":[],"call":[" should "]}," Spec Expectations should_not_include":{"type":"method","name":"should_not_include","children":[],"call":[" include? ! "," include? "," should ","sub inspect "," inspect "]}," Spec Expectations should_include":{"type":"method","name":"should_include","children":[],"call":[" include? "," should ","sub inspect "," inspect "]}," Spec Expectations should_not_be_empty":{"type":"method","name":"should_not_be_empty","children":[],"call":[" empty? ! "," empty? "," should "," inspect "]}," Spec Expectations should_be_empty":{"type":"method","name":"should_be_empty","children":[],"call":[" empty? "," should "," inspect "]}," Spec Expectations should_not_be_nil":{"type":"method","name":"should_not_be_nil","children":[],"call":[" nil? ! "," nil? "," should "]}," Spec Expectations should_be_nil":{"type":"method","name":"should_be_nil","children":[],"call":[" nil? "," should "]}," Spec Expectations should_not_equal":{"type":"method","name":"should_not_equal","children":[],"call":[" eql? ! "," eql? "," should "," == ! "," == "," default_message "]}," Spec Expectations should_equal":{"type":"method","name":"should_equal","children":[],"call":[" eql? "," should "," == "," default_message "]}," Spec Expectations should":{"type":"method","name":"should","children":[],"call":[" raise ","Spec Exceptions ExpectationNotMetError  new "," ! "]}," Spec Context violated":{"type":"method","name":"violated","children":[],"call":[" raise ","Spec Exceptions ExpectationNotMetError  new "]}," Spec Context specification_name?":{"type":"method","name":"specification_name?","children":[],"call":[]}," Spec Context my_methods":{"type":"method","name":"my_methods","children":[],"call":[]}," Spec Context specifications":{"type":"method","name":"specifications","children":[],"call":[]}," Spec Context collection":{"type":"method","name":"collection","children":[],"call":[]}," Spec Context teardown":{"type":"method","name":"teardown","children":[],"call":[]}," Spec Context setup":{"type":"method","name":"setup","children":[],"call":[]}," Spec Context run":{"type":"method","name":"run","children":[],"call":[" teardown ","result_listener failure ","result_listener pass "," __send__ "," setup ","result_listener spec "," verify_mocks "]}," Spec Context initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec initialize":{"type":"method","name":"initialize","children":[],"call":[" require ","args each "]}," Spec Expectations should_not_be_same_as":{"type":"method","name":"should_not_be_same_as","children":[],"call":[" equal? ! "," equal? "," should "," default_message "]}," Spec Expectations should_be_same_as":{"type":"method","name":"should_be_same_as","children":[],"call":[" equal? "," should "," default_message "]}," Spec Expectations default_message":{"type":"method","name":"default_message","children":[],"call":["expected class ","expected inspect "," class "," inspect "]}," Spec Expectations should_not_match":{"type":"method","name":"should_not_match","children":[],"call":[" =~ ! "," =~ "," should "," default_message "]}," Spec Expectations should_match":{"type":"method","name":"should_match","children":[],"call":[" =~ "," should "," default_message "]}," MessageExpectation returns":{"type":"method","name":"returns","children":[],"call":[" proc "," block_given? "]}," MessageExpectation twice":{"type":"method","name":"twice","children":[],"call":[]}," MessageExpectation once":{"type":"method","name":"once","children":[],"call":[]}," MessageExpectation never":{"type":"method","name":"never","children":[],"call":[]}," MessageExpectation at_least_once":{"type":"method","name":"at_least_once","children":[],"call":[]}," MessageExpectation with_any_args":{"type":"method","name":"with_any_args","children":[],"call":[]}," MessageExpectation with_no_args":{"type":"method","name":"with_no_args","children":[],"call":[]}," MessageExpectation with":{"type":"method","name":"with","children":[],"call":[]}," MessageExpectation verify_message":{"type":"method","name":"verify_message","children":[],"call":["@block call ","args << ","block nil? "," raise ","@expected_params == ","@expected_params nil? ","Call expectation violated with:  + ","@method_block call ","@method_block nil? ","value [] ","(ivar :@received_count) min - ","(ivar :@received_count) min ","value size ","@block call  [] ","@block call  size "]}," MessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":[" raise ","(send\n  (ivar :@expected_params) :collect) join ","param class name ","param class ","@expected_params collect ","@expected_params nil? ","@expected_received_count == ","@received_count > ","(send\n  (ivar :@expected_(send\n  (ivar :@expected_params) :collect) join ) :collect) join ","@expected_(send\n  (ivar :@expected_params) :collect) join  collect ","@expected_(send\n  (ivar :@expected_params) :collect) join  nil? "]}," MessageExpectation matches":{"type":"method","name":"matches","children":[],"call":["@sym == ","@expected_params == ","@expected_params nil? "]}," MessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" proc "]}," Mock find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find "]}," Mock should_receive":{"type":"method","name":"should_receive","children":[],"call":["@expectations << ","MessageExpectation  new "," block_given? "," caller [] "," caller "," receive ","@MessageExpectation  new s << "]}," Spec Context verify_mocks":{"type":"method","name":"verify_mocks","children":[],"call":["m __verify ","@mocks each "]}," Spec Context mock":{"type":"method","name":"mock","children":[],"call":["@mocks << ","Mock  new ","@Mock  new s << "]}," Spec Collector collection":{"type":"method","name":"collection","children":[],"call":[]}," MessageExpectation returns_consecutively":{"type":"method","name":"returns_consecutively","children":[],"call":[" proc "," block_given? "]}," MessageExpectation any_number_of_times":{"type":"method","name":"any_number_of_times","children":[],"call":[]}," Spec GuiRunner dump_backtrace":{"type":"method","name":"dump_backtrace","children":[],"call":["@socket << ","lines join ","line include? ","(send\n  (lvar :trace) :reject) reject ","trace reject "]}," Spec GuiRunner dump_failure":{"type":"method","name":"dump_failure","children":[],"call":["@socket << "," dump_backtrace ","exception backtrace ","exception class name ","exception class ","exception message "]}," Spec GuiRunner end_run":{"type":"method","name":"end_run","children":[],"call":["@socket << "]}," Spec GuiRunner start_run":{"type":"method","name":"start_run","children":[],"call":["@socket << ","number_of_specs to_i "]}," Spec GuiRunner failure":{"type":"method","name":"failure","children":[],"call":[" dump_failure ","@socket << "]}," Spec GuiRunner pass":{"type":"method","name":"pass","children":[],"call":["@socket << "]}," Spec GuiRunner spec":{"type":"method","name":"spec","children":[],"call":[]}," Spec GuiRunner run":{"type":"method","name":"run","children":[],"call":["@socket shutdown "," end_run ","spec run ","specs each "," start_run ","specs size ","context_or_collection collection ","context_or_collection collection  each ","context_or_collection collection  size "]}," Spec GuiRunner initialize":{"type":"method","name":"initialize","children":[],"call":["@socket << ","TCPSocket  new ","Array  new ","TCPSocket  new  << "]}," Spec ProcExpectations should_not_raise":{"type":"method","name":"should_not_raise","children":[],"call":[" call "," should "," default_message ","exception class to_s ","exception class "]}," Spec ProcExpectations should_raise":{"type":"method","name":"should_raise","children":[],"call":[" call "," should "," default_message ","exception class to_s ","exception class "]}," Spec ObjectExpectations should_be_false":{"type":"method","name":"should_be_false","children":[],"call":[" ! "," should "]}," Spec ObjectExpectations should_be_true":{"type":"method","name":"should_be_true","children":[],"call":[" should "]}," Spec ObjectExpectations should_not_include":{"type":"method","name":"should_not_include","children":[],"call":[" include? ! "," include? "," should ","sub inspect "," inspect "]}," Spec ObjectExpectations should_include":{"type":"method","name":"should_include","children":[],"call":[" include? "," should ","sub inspect "," inspect "]}," Spec ObjectExpectations should_not_be_empty":{"type":"method","name":"should_not_be_empty","children":[],"call":[" empty? ! "," empty? "," should "," inspect "]}," Spec ObjectExpectations should_be_empty":{"type":"method","name":"should_be_empty","children":[],"call":[" empty? "," should "," inspect "]}," Spec ObjectExpectations should_not_be_nil":{"type":"method","name":"should_not_be_nil","children":[],"call":[" nil? ! "," nil? "," should "]}," Spec ObjectExpectations should_be_nil":{"type":"method","name":"should_be_nil","children":[],"call":[" nil? "," should "]}," Spec ObjectExpectations should_not_match":{"type":"method","name":"should_not_match","children":[],"call":[" =~ ! "," =~ "," should "," default_message "]}," Spec ObjectExpectations should_match":{"type":"method","name":"should_match","children":[],"call":[" =~ "," should "," default_message "]}," Spec ObjectExpectations should_not_be_same_as":{"type":"method","name":"should_not_be_same_as","children":[],"call":[" equal? ! "," equal? "," should "," default_message "]}," Spec ObjectExpectations should_be_same_as":{"type":"method","name":"should_be_same_as","children":[],"call":[" equal? "," should "," default_message "]}," Spec ObjectExpectations should_not_equal":{"type":"method","name":"should_not_equal","children":[],"call":[" == ! "," == "," should "," default_message "]}," Spec ObjectExpectations should_equal":{"type":"method","name":"should_equal","children":[],"call":[" == "," should "," default_message "]}," Spec ExpectationHelperMethods default_message":{"type":"method","name":"default_message","children":[],"call":["expected class ","expected inspect "," class "," inspect "]}," Spec ExpectationHelperMethods should":{"type":"method","name":"should","children":[],"call":[" raise ","Spec Exceptions ExpectationNotMetError  new "," ! "]}," DSLExtensions specification":{"type":"method","name":"specification","children":[],"call":["$current_context add_specification ","name to_sym ","$current_context nil? ","Class  new "]}," DSLExtensions context":{"type":"method","name":"context","children":[],"call":[" eval "]}," Spec Context add_specification":{"type":"method","name":"add_specification","children":[],"call":[]}," Spec ShouldNegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," default_message ","(str \"should not be \") + ","  + ","args join ","args empty? ","@target send ","(str \"should not \") + "]}," Spec ShouldNegator raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message "," default_message ","exception inspect ","@target call ","e inspect ","e instance_of? ","e message == ","e message ","message nil? "]}," Spec ShouldNegator include":{"type":"method","name":"include","children":[],"call":[" fail_with_message "," default_message ","@target include? "]}," Spec ShouldNegator match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec ShouldNegator respond":{"type":"method","name":"respond","children":[],"call":["RespondNegator  new "]}," Spec ShouldNegator kind":{"type":"method","name":"kind","children":[],"call":["KindNegator  new "]}," Spec ShouldNegator instance":{"type":"method","name":"instance","children":[],"call":["InstanceNegator  new "]}," Spec ShouldNegator a":{"type":"method","name":"a","children":[],"call":[]}," Spec ShouldNegator be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","expected == "]}," Spec ShouldNegator equal":{"type":"method","name":"equal","children":[],"call":[" fail_with_message "," default_message ","@target == "]}," Spec ShouldNegator satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message "]}," Spec ShouldNegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec ShouldHelper raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message "," default_message ","exception inspect ","@target call ","e inspect ","e message should equal ","e message should ","e message ","message nil? ","e message should_equal "]}," Spec ShouldHelper include":{"type":"method","name":"include","children":[],"call":[" fail_with_message "," default_message ","@target include? "]}," Spec ShouldHelper match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec ShouldHelper method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," default_message ","(str \"should be \") + ","  + ","args join ","args empty? ","@target send ","(str \"should \") + "]}," Spec ShouldHelper respond":{"type":"method","name":"respond","children":[],"call":["RespondHelper  new "]}," Spec ShouldHelper kind":{"type":"method","name":"kind","children":[],"call":["KindHelper  new "]}," Spec ShouldHelper instance":{"type":"method","name":"instance","children":[],"call":["InstanceHelper  new "]}," Spec ShouldHelper a":{"type":"method","name":"a","children":[],"call":[]}," Spec ShouldHelper be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","@target nil? ","expected == ","@target != ","@target nil? ! "]}," Spec ShouldHelper equal":{"type":"method","name":"equal","children":[],"call":[" fail_with_message "," default_message ","@target == "]}," Spec ShouldHelper satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message ","(ivar :@target) ! ","block call "]}," Spec ShouldHelper have":{"type":"method","name":"have","children":[],"call":["HaveHelper  new "]}," Spec ShouldHelper not":{"type":"method","name":"not","children":[],"call":["ShouldNegator  new "]}," Spec ShouldHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec ShouldBase fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Kernel  raise ","Spec Exceptions ExpectationNotMetError  new ","Spec Api ExpectationNotMetError  new "]}," Spec ShouldBase wrap":{"type":"method","name":"wrap","children":[],"call":["obj class ","obj inspect ","obj kind_of? ","obj nil? ","obj == ","obj inspect include? "]}," Spec ShouldBase default_message":{"type":"method","name":"default_message","children":[],"call":["  + "," wrap ","expected != ","message << << ","expected inspect_for_expectation_not_met_error ","message << ","@target inspect_for_expectation_not_met_error ","result << << "," diff_as_string ","@target to_s ","result << ","expected is_a? "," old_default_message "," wrap  << << "," wrap  << "," old_default_message  << << "," old_default_message  << "," old_default_ wrap  "]}," Spec RespondNegator to":{"type":"method","name":"to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec RespondNegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec RespondHelper to":{"type":"method","name":"to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec RespondHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec KindNegator of":{"type":"method","name":"of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec KindNegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec KindHelper of":{"type":"method","name":"of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec KindHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec InstanceNegator of":{"type":"method","name":"of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec InstanceNegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec InstanceHelper of":{"type":"method","name":"of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec InstanceHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec HaveHelper most":{"type":"method","name":"most","children":[],"call":[]}," Spec HaveHelper least":{"type":"method","name":"least","children":[],"call":[]}," Spec HaveHelper at":{"type":"method","name":"at","children":[],"call":[]}," Spec HaveHelper as_specified?":{"type":"method","name":"as_specified?","children":[],"call":[" actual_size == "," actual_size "," collection "," actual_size <= "," actual_size >= "]}," Spec HaveHelper build_message":{"type":"method","name":"build_message","children":[],"call":[" actual_size "," collection ","@target class to_s ","@target class "]}," Spec HaveHelper actual_size":{"type":"method","name":"actual_size","children":[],"call":["collection size ","collection respond_to? ","collection length "]}," Spec HaveHelper collection":{"type":"method","name":"collection","children":[],"call":["@target send "]}," Spec HaveHelper method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," build_message "," as_specified? "]}," Spec HaveHelper initialize":{"type":"method","name":"initialize","children":[],"call":["expected == ","relativity == "]}," Spec ObjectExpectations should":{"type":"method","name":"should","children":[],"call":["ShouldHelper  new "]}," Spec Tool TestUnitTranslator translate":{"type":"method","name":"translate","children":[],"call":["line nil? ","line =~ ","arg strip ","args split collect ","args split ","assertion == ","suffix =~ ","RAISE_TRANSLATIONS  [] ","ONE_ARG_TRANSLATIONS  [] ","TWO_ARG_TRANSLATIONS  [] ","suffix == ","args =~ ","method_meaning gsub capitalize ","method_meaning gsub ","class_name match [] ","class_name match ","content each ","File  open "," process ","ParseTree  new parse_tree first ","ParseTree  new parse_tree ","ParseTree  new ","File  open  each "]}," Spec Tool CommandLine write_translation":{"type":"method","name":"write_translation","children":[],"call":["io write ","@translator translate ","File  open ","FileUtils  mkdir_p ","File  directory? ","File  dirname ","FileUtils  mkFile  dirname _p ","File  File  dirname ectory? ","File  File  dirname name "]}," Spec Tool CommandLine run":{"type":"method","name":"run","children":[],"call":["@filesystem write_translation ","out puts "," raise ","FileTest  directory? "," run ","File  join ","path [] ","source length + ","source length ","File  extname == ","File  extname ","FileTest  file? ","Find  find "]}," Spec Tool CommandLine initialize":{"type":"method","name":"initialize","children":[],"call":["TestUnitTranslator  new ","filesystem nil? "]}," Spec Runner Specification add_mock":{"type":"method","name":"add_mock","children":[],"call":["@mocks << "]}," Spec Runner Specification run_docs":{"type":"method","name":"run_docs","children":[],"call":["reporter add_spec "]}," Spec Runner Specification run":{"type":"method","name":"run","children":[],"call":["reporter add_spec ","reporter nil? ","@errors << ","mock __verify ","@mocks each ","execution_context instance_exec ","teardown_block nil? ","setup_block nil? "," Spec Runner ExecutionContext  new ","reporter spec_finished "," failure_location ","errors first ","errors << ","reporter spec_started "," first_error ","SpecShouldRaiseHandler  new handle ","SpecShouldRaiseHandler  new "," notify_after_teardown "," clear_current "," teardown_spec "," execute_spec "," setup_spec "," set_current "," name "," Spec Runner ExecutionContext  new  instance_exec "]}," Spec Runner Specification initialize":{"type":"method","name":"initialize","children":[],"call":[" caller [] split [] "," caller [] split "," caller [] "," caller "," lambda "]}," Spec Runner SimpleTextReporter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output << ","error backtrace join ","error backtrace ","error class name ","error class ","error message ","@errors << ","@spec_names << ","@failures length ","@failures << ","Failure  new ","@context_names last [] ","@context_names last ","@errors length "]}," Spec Runner SimpleTextReporter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output << ","@spec_names << "]}," Spec Runner SimpleTextReporter duration":{"type":"method","name":"duration","children":[],"call":["@end_time - ","@start_time nil? ","@end_time nil? "]}," Spec Runner SimpleTextReporter dump_backtrace":{"type":"method","name":"dump_backtrace","children":[],"call":["@output << ","trace join ","trace nil? "]}," Spec Runner SimpleTextReporter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":["index + "," dump_backtrace ","error backtrace ","@output << ","error class name ","error class ","error message ","@output << << ","index to_s ","index > ","@errors inject ","@errors empty? ","failure error backtrace ","failure error ","failure spec_line ","failure spec_name ","failure context_line ","failure context_name ","failure error class name ","failure error class ","failure error message ","@failures inject "]}," Spec Runner SimpleTextReporter dump":{"type":"method","name":"dump","children":[],"call":["@output << ","@errors length == ","@errors length ","@spec_names length == ","@spec_names length ","@context_names length == ","@context_names length ","@output << << << ","@output << << ","(send nil :duration) to_s "," duration ","@errors empty? "," dump_failures "," dump_errors "]}," Spec Runner SimpleTextReporter end":{"type":"method","name":"end","children":[],"call":["Time  new "]}," Spec Runner SimpleTextReporter start":{"type":"method","name":"start","children":[],"call":["Time  new "]}," Spec Runner SimpleTextReporter add_spec":{"type":"method","name":"add_spec","children":[],"call":[" spec_failed ","errors [] ","@backtrace_tweaker tweak_backtrace ","errors each "," spec_passed ","errors empty? "]}," Spec Runner SimpleTextReporter add_context":{"type":"method","name":"add_context","children":[],"call":["@context_names << ","@output << ","@context_names empty? "]}," Spec Runner SimpleTextReporter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner RDocFormatter add_spec":{"type":"method","name":"add_spec","children":[],"call":["@output << "]}," Spec Runner RDocFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output << "]}," Spec Runner RDocFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Kernel context":{"type":"method","name":"context","children":[],"call":["Spec Runner DocumentationContext  new ","Spec Runner Context  new ","runner run ","runner standalone ","runner add_context "," context_runner "," context_runner add_context "," context_runner  run "," context_runner  standalone "," context_runner  add_context ","runner add_Spec Runner Context  new  "," context_ context_runner  "," Spec Runner Context  new _runner "," context_ context_runner  add_context "," Spec Runner Context  new _runner add_Spec Runner Context  new  "]}," Object instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" undef_method ","InstanceExecHelper  module_eval "," send "," define_method "," object_id abs "," object_id ","Thread  current object_id abs ","Thread  current object_id ","Thread  current "," remove_method ","Thread  critical= "," respond_to? ","Thread  critical "]}," Spec Runner ExecutionContext mock":{"type":"method","name":"mock","children":[],"call":["@spec add_mock ","Api Mock  new ","@spec add_Api Mock  new  "]}," Spec Runner ExecutionContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner ContextRunner run_docs":{"type":"method","name":"run_docs","children":[],"call":["context run_docs ","@contexts each "]}," Spec Runner ContextRunner run_specs":{"type":"method","name":"run_specs","children":[],"call":["@listener dump ","@listener end ","context run ","@contexts each ","@listener start "]}," Spec Runner ContextRunner run":{"type":"method","name":"run","children":[],"call":[" run_docs "," run_specs "," exit ","failure_count == ","@reporter dump ","@reporter end ","context run ","@contexts each ","@reporter start "," number_of_specs "," exit! ","heckle_runner heckle_with ","context_runner instance_variable_set "," class new "," class ","@options heckle_runner= ","@options heckle_runner ","@options heckle_runner nil? ! ","@options heckle_runner nil? ","@options reporter dump ","@options reporter ","@options reporter end ","@options dry_run ","@options reporter start ","@reporter dump  == ","@options reporter dump  == ","@options heckle_runner  heckle_with "," class new  instance_variable_set ","@options @options heckle_runner = ","@options @options heckle_runner  ","@options @options heckle_runner  nil? ! ","@options @options heckle_runner  nil? "]}," Spec Runner ContextRunner add_context":{"type":"method","name":"add_context","children":[],"call":["@contexts << ","context run_single_spec ","context matches? ","@single_spec nil? ! ","@single_spec nil? ","context isolate ","@options spec_name ","@options spec_name nil? ! ","@options spec_name nil? "," spec_description "," spec_description nil? "]}," Spec Runner ContextRunner initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleTextReporter  new ","options verbose ","RDocFormatter  new ","options doc ","File  open ","@out is_a? ","options out ","OptionParser  parse ","OptionParser  parse  verbose ","OptionParser  parse  doc ","File  open  is_a? ","options out  is_a? ","OptionParser  parse  out "]}," Spec Runner ContextRunner standalone":{"type":"method","name":"standalone","children":[],"call":[]}," Spec Runner Context specify":{"type":"method","name":"specify","children":[],"call":["@specifications << ","Specification  new "]}," Spec Runner Context teardown":{"type":"method","name":"teardown","children":[],"call":[]}," Spec Runner Context setup":{"type":"method","name":"setup","children":[],"call":[]}," Spec Runner Context run_docs":{"type":"method","name":"run_docs","children":[],"call":["specification run_docs ","@specifications each ","reporter add_context "]}," Spec Runner Context run":{"type":"method","name":"run","children":[],"call":["specification run ","@specifications each ","reporter add_context "]}," Spec Runner Context initialize":{"type":"method","name":"initialize","children":[],"call":["ContextRunner  standalone ","@@context_runner nil? ","@@context_runner add_context "," instance_exec "," caller [] split [] "," caller [] split "," caller [] "," caller "]}," Spec Runner Context context_runner=":{"type":"method","name":"context_runner=","children":[],"call":[]}," Spec Runner BacktraceTweaker tweak_backtrace":{"type":"method","name":"tweak_backtrace","children":[],"call":["error set_backtrace ","tweaked_backtrace push ","line split [] + ","line split [] ","line split ","line include? ","error backtrace each ","error backtrace ","error backtrace nil? ","line nil? ","error backtrace compact! ","error backtrace collect! ","line =~ ","tweaked select ","kept_lines join ","kept_lines empty? "," ignored_patterns each "," ignored_patterns ","message split select ","message split "," clean_up_double_slashes ","error backtrace collect ","line split [] +  split [] + ","line split [] +  split [] ","line split [] +  split ","line split [] +  include? ","line split [] +  nil? ","line split [] +  =~ ","kept_line split [] + s join ","kept_line split [] + s empty? "]}," Spec Rake SpecTask find_file":{"type":"method","name":"find_file","children":[],"call":["File  exist? ","File  join ","$LOAD_PATH each "]}," Spec Rake SpecTask rake_loader":{"type":"method","name":"rake_loader","children":[],"call":[" fail "," find_file "]}," Spec Rake SpecTask file_list":{"type":"method","name":"file_list","children":[],"call":["FileList  [] ","FileList  [] to_a ","@spec_files to_a ","ENV  [] "]}," Spec Rake SpecTask option_list":{"type":"method","name":"option_list","children":[],"call":["ENV  [] "]}," Spec Rake SpecTask spec_files=":{"type":"method","name":"spec_files=","children":[],"call":[]}," Spec Api MessageExpectation returns_consecutively":{"type":"method","name":"returns_consecutively","children":[],"call":[" proc "," block_given? "]}," Spec Api MessageExpectation returns":{"type":"method","name":"returns","children":[],"call":[" proc "," block_given? "]}," Spec Api MessageExpectation twice":{"type":"method","name":"twice","children":[],"call":[]}," Spec Api MessageExpectation once":{"type":"method","name":"once","children":[],"call":[]}," Spec Api MessageExpectation never":{"type":"method","name":"never","children":[],"call":[]}," Spec Api MessageExpectation any_number_of_times":{"type":"method","name":"any_number_of_times","children":[],"call":[]}," Spec Api MessageExpectation at_least_once":{"type":"method","name":"at_least_once","children":[],"call":[]}," Spec Api MessageExpectation with_any_args":{"type":"method","name":"with_any_args","children":[],"call":[]}," Spec Api MessageExpectation with_no_args":{"type":"method","name":"with_no_args","children":[],"call":[]}," Spec Api MessageExpectation with":{"type":"method","name":"with","children":[],"call":["args == ","ArgumentExpectation  new "]}," Spec Api MessageExpectation verify_message":{"type":"method","name":"verify_message","children":[],"call":["value [] ","(ivar :@received_count) min - ","(ivar :@received_count) min ","value size ","@block call ","args << ","block nil? "," raise ","@expected_params == ","@expected_params nil? ","Call expectation violated with:  + ","@method_block call ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise new ","@exception_to_raise nil? "," constraints_match? ","block call ","@args_to_yield size ","@args_to_yield length != ","block arity ","@args_to_yield length ","@args_to_yield nil? "," handle_order_constraint ","@block call  [] ","@block call  size "]}," Spec Api MessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":[" raise ","error backtrace insert ","error backtrace ","@expected_received_count == ","(send\n  (ivar :@expected_params) :collect) join ","param class name ","param class ","@expected_params collect ","@expected_params nil? ","@received_count > ","Kernel  raise "," make_count_message ","@received_count >= ","@expected_received_count abs ","@expected_received_count < ","@received_count <= ","(send\n  (ivar :@expected_(send\n  (ivar :@expected_params) :collect) join ) :collect) join ","@expected_(send\n  (ivar :@expected_params) :collect) join  collect ","@expected_(send\n  (ivar :@expected_params) :collect) join  nil? "," make_ make_count_message  "]}," Spec Api MessageExpectation matches":{"type":"method","name":"matches","children":[],"call":["@expected_params == ","@expected_params nil? ","@sym == "," constraints_match? ","@args_expectation check_args "]}," Spec Api MessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" proc ","ArgumentExpectation  new "," lambda "]}," Spec Api Mock find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find "]}," Spec Api Mock method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","(str \"Mock '\") + ","(send\n  (lvar :args) :collect) join ","arg class name ","arg class ","args collect ","sym to_s ","@options [] ","expectation verify_message "," find_matching_expectation ","Kernel  raise ","expectation invoke "," find_matching_expectation  verify_message "," find_matching_ find_matching_expectation  "," find_matching_expectation  invoke "]}," Spec Api Mock __verify":{"type":"method","name":"__verify","children":[],"call":["expectation verify_messages_received ","@expectations each "]}," Spec Api Mock should_receive":{"type":"method","name":"should_receive","children":[],"call":["@expectations << ","MessageExpectation  new "," block_given? "," caller [] "," caller ","@MessageExpectation  new s << "]}," Spec Api Mock initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup ","OrderGroup  new "]}," Spec ShouldNegator throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch "]}," Spec ShouldHelper throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch "]}," Numeric close?":{"type":"method","name":"close?","children":[],"call":["(send\n  (self) :-\n  (lvar :other)) abs < ","(send\n  (self) :-\n  (lvar :other)) abs "," - "]}," Spec Runner Failure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api MessageExpectation throw":{"type":"method","name":"throw","children":[],"call":[]}," Spec Api MessageExpectation raise":{"type":"method","name":"raise","children":[],"call":[]}," Spec Api MessageExpectation return":{"type":"method","name":"return","children":[],"call":[" proc "," block_given? ","value instance_of? "," lambda ","Kernel  raise ","@method_block nil? "]}," Spec Api MessageExpectation and":{"type":"method","name":"and","children":[],"call":[]}," Spec Api MessageExpectation times":{"type":"method","name":"times","children":[],"call":[]}," Spec Api MessageExpectation of":{"type":"method","name":"of","children":[],"call":[]}," Spec Api MessageExpectation number":{"type":"method","name":"number","children":[],"call":[]}," Spec Api MessageExpectation any":{"type":"method","name":"any","children":[],"call":[]}," Spec Api MessageExpectation least":{"type":"method","name":"least","children":[],"call":["arg -@ ","arg kind_of? ","arg == "]}," Spec Api MessageExpectation exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_received_count "]}," Spec Api MessageExpectation at":{"type":"method","name":"at","children":[],"call":[]}," Spec Api MessageExpectation pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["count == "]}," Spec Api MessageExpectation make_count_message":{"type":"method","name":"make_count_message","children":[],"call":[" pretty_print ","count > ","count abs ","count < "]}," Spec Api MessageExpectation constraints_match?":{"type":"method","name":"constraints_match?","children":[],"call":["args [] == ","@expected_params [] ","args [] ","args [] is_a? ","@expected_params [] == ","@expected_params length ","args length != ","args length ","@expected_params each_index ","@expected_params length == ","@expected_params [] walks_like? ","@expected_params [] is_a? "]}," Spec Api Mock receive":{"type":"method","name":"receive","children":[],"call":["@expectations << ","MessageExpectation  new "," block_given? "," caller [] "," caller ","@MessageExpectation  new s << "]}," Spec Api Mock should":{"type":"method","name":"should","children":[],"call":[]}," Spec TestToSpec TranslationTestRunner underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s "]}," Spec TestToSpec TranslationTestRunner force_file_collision?":{"type":"method","name":"force_file_collision?","children":[],"call":[" raise "," puts "," log ","$test2spec_options []= ","$stdin gets ","$stdout print "]}," Spec TestToSpec TranslationTestRunner identical?":{"type":"method","name":"identical?","children":[],"call":["source == ","IO  read ","File  directory? "]}," Spec TestToSpec TranslationTestRunner write":{"type":"method","name":"write","children":[],"call":[" system ","$test2spec_options [] "," chmod ","df write ","File  open "," log "," mkdir_p ","File  directory? ","File  dirname "," force_file_collision? ","(send\n  (gvar :$test2spec_options) :[]\n  (sym :collision)) to_sym "," identical? ","File  exists? "," destination_path "," mkFile  dirname _p ","File  File  dirname ectory? ","File  File  dirname name ","  destination_path _path "]}," Spec TestToSpec TranslationTestRunner destination_path":{"type":"method","name":"destination_path","children":[],"call":["File  join ","$test2spec_options [] "]}," Spec TestToSpec TranslationTestRunner quiet?":{"type":"method","name":"quiet?","children":[],"call":["$test2spec_options [] == ","$test2spec_options [] "]}," Spec TestToSpec TranslationTestRunner log":{"type":"method","name":"log","children":[],"call":[" puts "," quiet? "]}," Spec TestToSpec TranslationTestRunner render":{"type":"method","name":"render","children":[],"call":["erb result "," binding ","ERB  new ","relative_path split length - ","relative_path split length ","relative_path split ","template nil? ","ERB  new  result "]}," Spec TestToSpec TranslationTestRunner passed?":{"type":"method","name":"passed?","children":[],"call":[]}," Spec TestToSpec TranslationTestRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" puts "," log "," write ","relative_path gsub! "," render ","IO  read ","$test2spec_options [] "," underscore ","klass name ","klass to_rspec ","klass < ","ObjectSpace  each_object ","e backtrace join ","e backtrace ","e message "," verbose "," underscore  gsub! "]}," Spec TestToSpec TranslationTestRunner run":{"type":"method","name":"run","children":[],"call":[]}," Test Unit TestCase to_rspec":{"type":"method","name":"to_rspec","children":[],"call":[]}," Spec TestToSpec SexpTransformer process_lvar":{"type":"method","name":"process_lvar","children":[],"call":["exp clear ","result []= ","exp dup ","exp dup  []= "]}," Spec TestToSpec SexpTransformer process_fcall":{"type":"method","name":"process_fcall","children":[],"call":["exp clear "," process ","expected << ","(sym :assert_not_nil) index ","test_unit_fcall == ","expected delete_at ","args delete_at ","(sym :assert) index ","exp [] ","exp dup ","rspec_should nil? ","TRANSLATIONS  [] ","exp []  == ","exp []  delete_at ","TRANSLATIONS  []  nil? "]}," Spec TestToSpec SexpTransformer process_iter":{"type":"method","name":"process_iter","children":[],"call":["exp clear ","result << ","test_unit_fcall == ","args nil? ","args delete_at ","exp [] [] ","exp [] "," process ","exp shift ","exp empty? ","rspec_should nil? ","TRANSLATIONS  [] ","exp [] []  == ","exp [] []  nil? ","exp [] []  delete_at ","TRANSLATIONS  []  nil? "]}," Spec TestToSpec SexpTransformer process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":["exp clear ","@dasgn_decl_tail << ","@dasgn_decl empty? ","result [] dup ","result [] ","result []= ","exp dup ","@dasgn_result [] dup _tail << ","@dasgn_result [] dup  empty? ","exp dup  [] dup ","exp dup  [] ","exp dup  []= "]}," Spec TestToSpec SexpTransformer process_defn":{"type":"method","name":"process_defn","children":[],"call":["result [] ","block_body == ","@dasgn_decl empty? ","result << ","method_name to_sym ","block_body << "," process ","test_body shift ","test_body empty? ","exp clear ","exp [] [] [] ","exp [] [] ","exp [] ","method_name == ","1 gsub ","method_name =~ ","exp [] to_s ","(send\n  (lvar :exp) :shift) + ","exp shift ","(send\n  (lvar :exp) :shift) +  [] ","(send\n  (lvar :exp) :shift) +  << ","exp [] to_s  to_sym ","exp [] [] []  shift ","exp [] [] []  empty? ","exp [] to_s  == ","exp [] to_s  =~ "]}," Spec TestToSpec SexpTransformer process_class":{"type":"method","name":"process_class","children":[],"call":["result << ","(sym :block) + ","context_body length > ","context_body length ","exp clear ","context_body << "," process ","rest shift ","rest empty? ","tests shift ","tests empty? ","teardown shift ","teardown empty? ","setup_block [] ","setup_block length == ","setup_block length ","methods empty? ","setup shift ","setup empty? ","setup []= ","methods empty? ! ","e [] == ","e [] ","rest partition ","e [] to_s =~ ","e [] to_s ","e [] to_s == ","exp shift ","class_name match [] ","class_name match ","exp shift to_s split last ","exp shift to_s split ","exp shift to_s ","translated_methods << ","methods shift "," process  [] "," process  length == "," process  length ","exp shift to_s split last  match [] ","exp shift to_s split last  match "]}," Spec TestToSpec SexpTransformer process":{"type":"method","name":"process","children":[],"call":[]}," Spec TestToSpec SexpTransformer initialize":{"type":"method","name":"initialize","children":[],"call":[" expected= "]}," RubyToRuby process_bmethod":{"type":"method","name":"process_bmethod","children":[],"call":[" raise ","exp clear "]}," RubyToRuby cond_loop":{"type":"method","name":"cond_loop","children":[],"call":["code join ","code << ","exp shift ","exp empty? "," cond_indent_process "," process ","  process _indent_process "]}," RubyToRuby process_zsuper":{"type":"method","name":"process_zsuper","children":[],"call":[]}," RubyToRuby process_zarray":{"type":"method","name":"process_zarray","children":[],"call":[]}," RubyToRuby process_yield":{"type":"method","name":"process_yield","children":[],"call":[" process [] "," process ","exp shift ","exp empty? "]}," RubyToRuby process_while":{"type":"method","name":"process_while","children":[],"call":[" cond_loop "]}," RubyToRuby process_when":{"type":"method","name":"process_when","children":[],"call":[" indent "," process ","exp shift "," process to_s [] "," process to_s "]}," RubyToRuby process_vcall":{"type":"method","name":"process_vcall","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_until":{"type":"method","name":"process_until","children":[],"call":[" cond_loop "]}," RubyToRuby process_true":{"type":"method","name":"process_true","children":[],"call":[]}," RubyToRuby process_super":{"type":"method","name":"process_super","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_str":{"type":"method","name":"process_str","children":[],"call":["exp shift dump ","exp shift "]}," RubyToRuby process_self":{"type":"method","name":"process_self","children":[],"call":[]}," RubyToRuby process_scope":{"type":"method","name":"process_scope","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_return":{"type":"method","name":"process_return","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_retry":{"type":"method","name":"process_retry","children":[],"call":[]}," RubyToRuby process_rescue":{"type":"method","name":"process_rescue","children":[],"call":["s << "," process to_s + "," process to_s "," process ","exp shift ","exp empty? "]}," RubyToRuby process_resbody":{"type":"method","name":"process_resbody","children":[],"call":["s << "," process to_s + "," process to_s "," process ","exp shift ","exp empty? "," process [] ","exp first first == ","exp first first ","exp first "]}," RubyToRuby process_or":{"type":"method","name":"process_or","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_not":{"type":"method","name":"process_not","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_nil":{"type":"method","name":"process_nil","children":[],"call":[]}," RubyToRuby process_module":{"type":"method","name":"process_module","children":[],"call":["s + + ","s + "," indent ","body << "," process ","exp shift ","exp empty? "]}," RubyToRuby process_masgn":{"type":"method","name":"process_masgn","children":[],"call":[" process [] "," process ","exp shift "]}," RubyToRuby process_lvar":{"type":"method","name":"process_lvar","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_lit":{"type":"method","name":"process_lit","children":[],"call":["obj inspect ","( + + ","( + ","obj is_a? ","exp shift ","exp shift  inspect ","exp shift  is_a? "]}," RubyToRuby process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" process ","exp shift ","exp empty? "]}," RubyToRuby process_ivar":{"type":"method","name":"process_ivar","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_iter":{"type":"method","name":"process_iter","children":[],"call":["(begin\n  (send nil :process\n    (lvar :owner))) + + ","(begin\n  (send nil :process\n    (lvar :owner))) + "," indent "," process ","exp shift ","processed_args nil? ","args nil? ! ","args nil? ","(begin\n  (send nil :process\n    (lvar :exp shift ))) + + ","(begin\n  (send nil :process\n    (lvar :exp shift ))) + "," process  nil? ","processed_exp shift  nil? ","exp shift  nil? ! ","exp shift  nil? "]}," RubyToRuby process_if":{"type":"method","name":"process_if","children":[],"call":["s join ","s << "," cond_indent_process ","exp shift ","exp empty? "," process "]}," RubyToRuby cond_indent_process":{"type":"method","name":"cond_indent_process","children":[],"call":[" indent "," process ","pt first == ","pt first "]}," RubyToRuby process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_hash":{"type":"method","name":"process_hash","children":[],"call":["{ + + ","{ + ","\n + + ","\n + "," indent ","body join ","body empty? ","body << "," process ","exp shift ","exp empty? "]}," RubyToRuby process_gvar":{"type":"method","name":"process_gvar","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_for":{"type":"method","name":"process_for","children":[],"call":[" indent "," process ","exp shift ","2 times ","exp [] "]}," RubyToRuby process_fcall":{"type":"method","name":"process_fcall","children":[],"call":["code join ","code << "," process ","args shift ","args empty? "," assert_type ","args nil? ","exp shift ","exp shift to_s ","exp deep_clone ","exp shift  shift ","exp shift  empty? ","exp shift  nil? "]}," RubyToRuby process_fbody":{"type":"method","name":"process_fbody","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_false":{"type":"method","name":"process_false","children":[],"call":[]}," RubyToRuby process_ensure":{"type":"method","name":"process_ensure","children":[],"call":[" process + + + "," indent "," process ","exp shift "," process + + "," process + "]}," RubyToRuby process_dvar":{"type":"method","name":"process_dvar","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_dstr":{"type":"method","name":"process_dstr","children":[],"call":["s + ","s << ","#{ + + ","#{ + "," process "," process [] ","pt first == ","pt first ","exp shift ","exp empty? ","exp shift dump [] ","exp shift dump ","exp shift dump []  + ","exp shift dump []  << "," proceexp shift dump [] exp shift dump []  "," proceexp shift dump [] exp shift dump []  [] ","exp shift  first == ","pt firexp shift dump [] t == ","exp shift  first ","pt firexp shift dump [] t ","exp exp shift dump [] hift ","exp emexp shift y? ","exp exp shift dump [] hift dump [] ","exp exp shift dump [] hift dump "]}," RubyToRuby process_dot3":{"type":"method","name":"process_dot3","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_dot2":{"type":"method","name":"process_dot2","children":[],"call":[" process ","exp shift "]}," RubyToRuby process_defn":{"type":"method","name":"process_defn","children":[],"call":["(str \"def \") gsub "," process ","exp shift ","exp [] first == ","exp [] first ","exp [] "]}," RubyToRuby process_dasgn_curr":{"type":"method","name":"process_dasgn_curr","children":[],"call":["= + "," process ","exp shift ","exp empty? ","exp shift to_s "," proceexp shift to_s exp shift to_s  ","exp exp shift to_s hift ","exp exp shift to_s hift to_exp shift to_s  "]}," RubyToRuby process_const":{"type":"method","name":"process_const","children":[],"call":["exp shift to_s ","exp shift "]}," RubyToRuby process_colon2":{"type":"method","name":"process_colon2","children":[],"call":["exp shift "," process "]}," RubyToRuby process_class":{"type":"method","name":"process_class","children":[],"call":["s + + ","s + "," indent ","body << "," process ","exp shift ","exp empty? "]}," RubyToRuby process_case":{"type":"method","name":"process_case","children":[],"call":["s + ","s << "," indent "," process ","pt first == ","pt first ","exp shift ","exp empty? ","exp shift  first == ","exp shift  first ","exp emexp shift y? "]}," RubyToRuby process_call":{"type":"method","name":"process_call","children":[],"call":[" process "," process [] ","args_exp first == ","args_exp first ","exp shift "," process _exp first == ","exp shift  first == "," process _exp first ","exp shift  first "]}," RubyToRuby process_block_pass":{"type":"method","name":"process_block_pass","children":[],"call":["fcall [] ","fcall [] == "," process ","exp shift "," process  [] "," process  [] == "]}," RubyToRuby process_block_arg":{"type":"method","name":"process_block_arg","children":[],"call":["exp shift "]}," RubyToRuby process_block":{"type":"method","name":"process_block","children":[],"call":["code join ","code << "," indent "," process ","exp shift ","(sym :ensure) include? ","exp first first ","exp first ","exp first first == ","code []= ","code [] [] + ","code [] [] ","code [] ","exp empty? "]}," RubyToRuby process_begin":{"type":"method","name":"process_begin","children":[],"call":["s + ","s << "," process to_s + "," process to_s "," process ","exp shift ","exp empty? "]}," RubyToRuby process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_call "]}," RubyToRuby process_array":{"type":"method","name":"process_array","children":[],"call":["[ + + ","[ + ","code join ","code << "," process ","exp shift ","exp empty? "]}," RubyToRuby process_args":{"type":"method","name":"process_args","children":[],"call":["args join ","args empty? ","args << ","args []= "," process ","arg [] map ","arg [] ","(send\n  (send\n    (lvar :arg) :size) :-\n  (int 1)) -@ ","arg size - ","arg size ","arg is_a? ","exp shift ","exp empty? ","exp shift s join ","exp shift s empty? ","exp shift s << ","exp shift s []= ","exp shift  [] map ","exp shift  [] ","(send\n  (send\n    (lvar :exp shift ) :size) :-\n  (int 1)) -@ ","exp shift  size - ","exp shift  size ","exp shift  is_a? "]}," RubyToRuby process_and":{"type":"method","name":"process_and","children":[],"call":[" process ","exp shift "]}," RubyToRuby indent":{"type":"method","name":"indent","children":[],"call":["(send\n  (send\n    (lvar :s) :to_s) :map) join ","@indent + ","s to_s map ","s to_s "]}," RubyToRuby initialize":{"type":"method","name":"initialize","children":[],"call":[" expected= "," strict= "," auto_shift_type= ","Environment  new "]}," RubyToRuby translate":{"type":"method","name":"translate","children":[],"call":[]}," Method name":{"type":"method","name":"name","children":[],"call":["full_name split last ","full_name split "," to_s split last chop "," to_s split last "," to_s split "," to_s "," to_s split last chop  split last "," to_s split last chop  split "]}," Method defined_in":{"type":"method","name":"defined_in","children":[],"call":["o const_get ","klass_name split inject ","klass_name split ","klass_name split last chop ","klass_name split last ","klass_name include? ","full_name split first ","full_name split "," to_s split last chop "," to_s split last "," to_s split "," to_s ","klass_name split last chop  split inject ","full_name split first  split inject ","klass_name split last chop  split ","full_name split first  split ","klass_name split last chop  split last chop ","full_name split first  split last chop ","klass_name split last chop  split last ","full_name split first  split last ","klass_name split last chop  include? ","full_name split first  include? "," to_s split last chop  split first "," to_s split last chop  split "]}," Object source":{"type":"method","name":"source","children":[],"call":["RubySource  new ","RubyToRuby  new process "," parse_tree ","RubyToRuby  new "]}," Object parse_tree":{"type":"method","name":"parse_tree","children":[],"call":["ParseTree  new parse_tree first ","ParseTree  new parse_tree ","ParseTree  new "," class "," is_a? ","ParseTree  new parse_tree_for_method ","m name ","m defined_in "," method ","ParseTree  new parse_tree_for_ method ethod "," method  na method e "," method  defined_in ","  method ethod "]}," RubySource inspect":{"type":"method","name":"inspect","children":[],"call":["\n + "," to_s "]}," Spec Runner Specification failure_location":{"type":"method","name":"failure_location","children":[],"call":[" name "]}," Spec Runner Specification matches_matcher?":{"type":"method","name":"matches_matcher?","children":[],"call":["matcher matches? "]}," Spec Runner SpecdocFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output << ","@output flush "]}," Spec Runner SpecdocFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output << ","@output flush "]}," Spec Runner SpecdocFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output << ","@output flush "]}," SpecMatcher matches_spec?":{"type":"method","name":"matches_spec?","children":[],"call":["@name_to_match =~ ","Regexp  escape "]}," SpecMatcher matches_context?":{"type":"method","name":"matches_context?","children":[],"call":["@name_to_match =~ ","Regexp  escape "]}," SpecMatcher context_only?":{"type":"method","name":"context_only?","children":[],"call":["@name_to_match == "]}," SpecMatcher spec_only?":{"type":"method","name":"spec_only?","children":[],"call":["@name_to_match == "]}," SpecMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" spec_only? "," matches_spec? "," context_only? "," matches_context? "]}," SpecMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Reporter Failure class_name":{"type":"method","name":"class_name","children":[],"call":["@error class name split last ","@error class name split ","@error class name ","@error class ","@exception class name split last ","@exception class name split ","@exception class name ","@exception class "]}," Spec Runner Reporter Failure backtrace":{"type":"method","name":"backtrace","children":[],"call":["@error backtrace join ","@error backtrace ","@error backtrace nil? ","@exception backtrace join ","@exception backtrace ","@exception backtrace nil? "]}," Spec Runner Reporter Failure message":{"type":"method","name":"message","children":[],"call":["@error message ","@exception message "]}," Spec Runner Reporter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@formatter spec_failed ","@failures length ","@failures << ","@spec_names << "]}," Spec Runner Reporter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@formatter spec_passed ","@spec_names << "]}," Spec Runner Reporter spec_finished":{"type":"method","name":"spec_finished","children":[],"call":[" spec_failed ","Failure  new ","@context_names last ","@backtrace_tweaker tweak_backtrace "," spec_passed ","error nil? "]}," Spec Runner Reporter spec_started":{"type":"method","name":"spec_started","children":[],"call":["@formatter spec_started ","@spec_names << "]}," Spec Runner Reporter add_context":{"type":"method","name":"add_context","children":[],"call":["@context_names << ","@formatter add_context ","@context_names empty? "]}," Spec Runner RdocFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output << ","@output flush "]}," Spec Runner RdocFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output << ","@output flush "]}," Spec Runner RdocFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output << ","@output flush "]}," Spec Runner ProgressBarFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output << ","@output flush "]}," Spec Runner ProgressBarFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output << ","@output flush "]}," Spec Runner ProgressBarFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output << ","@output flush "]}," Spec Runner ProgressBarFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output << ","@output flush "]}," Spec Runner OptionParser create_context_runner":{"type":"method","name":"create_context_runner","children":[],"call":["ContextRunner  new ","options spec_name ","options dry_run ","Spec Expectations Should Base  differ= ","options differ_class new ","options colour ","options context_lines ","options diff_format ","options differ_class ","Reporter  new ","options backtrace_tweaker ","options formatter_type new ","options out ","options formatter_type "," parse ","options reporter= ","options generate ","Spec Expectations  differ= ","options is_a? "," parse  spec_name "," parse  dry_run "," parse  differ_class new "," parse  colour "," parse  context_lines "," parse  diff_format "," parse  differ_class "," parse  backtrace_tweaker ","options options formatter_type new _type new "," parse  formatter_type new "," parse  out ","options options formatter_type new _type "," parse  formatter_type ","options Reporter  new = "," parse  reporter= "," parse  generate "," parse  is_a? "]}," Kernel context_runner":{"type":"method","name":"context_runner","children":[],"call":[" Spec Runner OptionParser  create_context_runner ","ARGV  dup ","$context_runner run "," at_exit ","$context_runner nil? "," Spec Runner OptionParser  new create_context_runner "," Spec Runner OptionParser  new "," Spec Runner OptionParser  create_context_runner  run "," Spec Runner OptionParser  new create_context_runner  run "," Spec Runner OptionParser  create_context_runner  nil? "," Spec Runner OptionParser  new create_context_runner  nil? "]}," Spec Runner ExecutionContext violated":{"type":"method","name":"violated","children":[],"call":[" raise ","Spec Api ExpectationNotMetError  new "]}," Spec Runner ExecutionContext duck_type":{"type":"method","name":"duck_type","children":[],"call":["Api DuckTypeArgConstraint  new ","Api DuckType  new "]}," Spec Runner ContextRunner number_of_specs":{"type":"method","name":"number_of_specs","children":[],"call":["sum + ","context number_of_specs ","@contexts inject "]}," Spec Runner Context run_single_spec":{"type":"method","name":"run_single_spec","children":[],"call":["spec matches_matcher? ! ","spec matches_matcher? ","@specifications reject! ","SpecMatcher  new ","@name == ","spec matches_SpecMatcher  new ? ! ","spec matches_SpecMatcher  new ? "]}," Spec Runner Context matches?":{"type":"method","name":"matches?","children":[],"call":["spec matches_matcher? ","@specifications each ","SpecMatcher  new ","spec matches? ","name [] ","@name length + ","@name length ","name =~ "]}," Spec Runner Context number_of_specs":{"type":"method","name":"number_of_specs","children":[],"call":["@specifications length "]}," Spec Runner BaseTextFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@output << ","failure_count == ","spec_count == ","@output << << << ","@output << << ","(lvar :duration) to_s ","@output flush ","context_count == "]}," Spec Runner BaseTextFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":["@output << ","failure backtrace ","failure message ","failure header ","@output << << ","counter to_s ","@output flush "]}," Spec Runner BaseTextFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Spec Runner BaseTextFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":[]}," Spec Runner BaseTextFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":[]}," Spec Runner BaseTextFormatter spec_started":{"type":"method","name":"spec_started","children":[],"call":[]}," Spec Runner BaseTextFormatter add_context":{"type":"method","name":"add_context","children":[],"call":[]}," Spec Runner BaseTextFormatter start":{"type":"method","name":"start","children":[],"call":[]}," Spec Runner BaseTextFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner BacktraceTweaker tweak_instance_exec_line":{"type":"method","name":"tweak_instance_exec_line","children":[],"call":["line split [] + ","line split [] ","line split ","line include? ","line split [] +  split [] + ","line split [] +  split [] ","line split [] +  split ","line split [] +  include? "]}," Spec Rake SpecTask run":{"type":"method","name":"run","children":[],"call":[" sh ","(lvar :interpreter) + + ","(lvar :interpreter) + ","args length > ","args length ","args pop ","Hash  === ","args last "]}," Spec Api MessageExpectationSugar __is_sweetened?":{"type":"method","name":"__is_sweetened?","children":[],"call":["sym to_s =~ ","sym to_s "]}," Spec Api Sugar __is_sweetened?":{"type":"method","name":"__is_sweetened?","children":[],"call":["sym to_s =~ ","sym to_s "]}," Spec Api Sugar method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __orig_method_missing ","object __send__ ","calls join ","call == ","calls shift ","calls length > ","calls length ","sym to_s split ","sym to_s "," __is_sweetened? ","(str \"an\") include? ","calls [] ","object __send__  __send__ ","calls shift s join ","sym to_s split  join ","calls shift  == ","calls shift s shift ","sym to_s split  shift ","calls shift s length > ","sym to_s split  length > ","calls shift s length ","sym to_s split  length ","calls shift s [] ","sym to_s split  [] "]}," Spec Api OrderGroup consume":{"type":"method","name":"consume","children":[],"call":["@ordering shift "]}," Spec Api OrderGroup ready_for?":{"type":"method","name":"ready_for?","children":[],"call":["@ordering first == ","@ordering first "]}," Spec Api OrderGroup register":{"type":"method","name":"register","children":[],"call":["@ordering << "]}," Spec Api OrderGroup initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Spec Api MessageExpectation yield":{"type":"method","name":"yield","children":[],"call":[]}," Spec Api MessageExpectation ordered":{"type":"method","name":"ordered","children":[],"call":["@ordering register "]}," Spec Api MessageExpectation handle_order_constraint":{"type":"method","name":"handle_order_constraint","children":[],"call":["Kernel  raise ","@ordering consume ","@ordering ready_for? "]}," Spec Api ArgumentExpectation constraints_match?":{"type":"method","name":"constraints_match?","children":[],"call":["@expected_params [] matches? ","args [] ","@expected_params [] ","@expected_params each_index ","args length != ","@expected_params length ","args length "]}," Spec Api ArgumentExpectation check_args":{"type":"method","name":"check_args","children":[],"call":[" constraints_match? ","@expected_params == ","@expected_params nil? "]}," Spec Api ArgumentExpectation convert_constraint":{"type":"method","name":"convert_constraint","children":[],"call":["LiteralArgConstraint  new ","constraint is_a? ","@@constraint_classes [] new ","@@constraint_classes [] "]}," Spec Api ArgumentExpectation process_arg_constraints":{"type":"method","name":"process_arg_constraints","children":[],"call":[" convert_constraint ","constraints collect "]}," Spec Api ArgumentExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" process_arg_constraints ","args == ","(sym :no_args) == ","(sym :any_args) == "]}," Spec Api DuckTypeArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value respond_to? ","@methods_to_respond_do all? "]}," Spec Api DuckTypeArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api StringArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Api StringArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api BooleanArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Api BooleanArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api NumericArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["value is_a? "]}," Spec Api NumericArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api AnyArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":[]}," Spec Api AnyArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Api LiteralArgConstraint matches?":{"type":"method","name":"matches?","children":[],"call":["@literal_value == "]}," Spec Api LiteralArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Object inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" inspect "," class "," inspect include? "]}," String inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" inspect "]}," Array inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" inspect "]}," Proc inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[]}," Class inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" name "]}," NilClass inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[]}," FalseClass inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[]}," TrueClass inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[]}," Spec TestToSpec TranslationTestRunner verbose?":{"type":"method","name":"verbose?","children":[],"call":["$test2spec_options [] == ","$test2spec_options [] "," quiet? ! "," quiet? "]}," Spec TestToSpec TranslationTestRunner verbose":{"type":"method","name":"verbose","children":[],"call":[" puts "," verbose? "]}," Spec Runner HtmlFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@output flush ","@output << "]}," Spec Runner HtmlFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner HtmlFormatter escape":{"type":"method","name":"escape","children":[],"call":["string gsub gsub gsub gsub ","string gsub gsub gsub ","string gsub gsub ","string gsub "]}," Spec Runner HtmlFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output flush ","@output puts "," escape ","failure backtrace ","failure backtrace == ","failure message ","failure message == ","failure header ","failure header == "]}," Spec Runner HtmlFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output puts "," escape "]}," Spec Runner HtmlFormatter spec_started":{"type":"method","name":"spec_started","children":[],"call":[]}," Spec Runner HtmlFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output flush ","@output puts "]}," Spec Runner HtmlFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output puts "]}," Spec Runner HtmlFormatter start":{"type":"method","name":"start","children":[],"call":["@output flush ","@output puts "]}," Spec Runner HtmlFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec ShouldBase diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":["output << << ","output << ","oldhunk diff ","hunk unshift ","hunk overlaps? ","context_lines > ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each ","diffs empty? ","Diff LCS  diff ","e chomp ","data_new split map! ","data_new split ","data_old split map! ","data_old split ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","Diff LCS  diff  empty? "]}," Spec Runner Formatter SpecdocFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "," green "]}," Spec Runner Formatter SpecdocFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "," red ","@output puts "," magenta ","failure expectation_not_met? "]}," Spec Runner Formatter SpecdocFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output puts "]}," Spec Runner Formatter RdocFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "]}," Spec Runner Formatter RdocFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "]}," Spec Runner Formatter RdocFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "]}," Spec Runner Formatter ProgressBarFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "," green "]}," Spec Runner Formatter ProgressBarFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output print "," red "," magenta ","failure expectation_not_met? "]}," Spec Runner Formatter ProgressBarFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output flush ","@output << ","STDOUT  flush ","@output puts "]}," Spec Runner Formatter HtmlFormatter escape":{"type":"method","name":"escape","children":[],"call":["string gsub gsub gsub gsub ","string gsub gsub gsub ","string gsub gsub ","string gsub "]}," Spec Runner Formatter HtmlFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":["@output flush ","@output puts "," escape ","failure backtrace ","failure backtrace == ","failure message ","failure message == ","failure header ","failure header == ","STDOUT  flush "," format_backtrace ","failure exception backtrace ","failure exception ","failure exception nil? ","failure exception message "," move_progress "," extra_failure_content "," extra_failure_content nil? "]}," Spec Runner Formatter HtmlFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":["@output puts "," escape ","STDOUT  flush "," move_progress "]}," Spec Runner Formatter HtmlFormatter spec_started":{"type":"method","name":"spec_started","children":[],"call":["STDOUT  flush "]}," Spec Runner Formatter HtmlFormatter add_context":{"type":"method","name":"add_context","children":[],"call":["@output puts ","STDOUT  flush "]}," Spec Runner Formatter BaseTextFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Spec Runner Formatter BaseTextFormatter spec_passed":{"type":"method","name":"spec_passed","children":[],"call":[]}," Spec Runner Formatter BaseTextFormatter spec_failed":{"type":"method","name":"spec_failed","children":[],"call":[]}," Spec Runner Formatter BaseTextFormatter spec_started":{"type":"method","name":"spec_started","children":[],"call":[]}," Spec Runner Formatter BaseTextFormatter add_context":{"type":"method","name":"add_context","children":[],"call":[]}," Spec Runner Formatter BaseTextFormatter start":{"type":"method","name":"start","children":[],"call":[]}," Spec Api MessageExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["value [] ","(ivar :@received_count) min ","value size - ","value size ","@return_block call ","args << ","block nil? ","@return_block call  [] ","@return_block call  size - ","@return_block call  size "]}," Spec Api MessageExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":["block call ","Kernel  raise ","@args_to_yield size ","@args_to_yield length != ","block arity ","@args_to_yield length ","block nil? "]}," Spec Api MessageExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["Kernel  raise ","Call expectation violated with:  + ","@method_block call "]}," Spec Api MessageExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_return_block "," invoke_with_yield ","@args_to_yield nil? ! ","@args_to_yield nil? "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise new ","@exception_to_raise nil? "," handle_order_constraint "]}," Spec Runner ExecutionContext InstanceMethods violated":{"type":"method","name":"violated","children":[],"call":[" raise ","Spec Api ExpectationNotMetError  new ","Spec Expectations ExpectationNotMetError  new "]}," Spec Runner ExecutionContext InstanceMethods duck_type":{"type":"method","name":"duck_type","children":[],"call":["Api DuckTypeArgConstraint  new ","Spec Mocks DuckTypeArgConstraint  new "]}," Spec Runner ExecutionContext InstanceMethods mock":{"type":"method","name":"mock","children":[],"call":["@spec add_mock ","Api Mock  new ","Spec Mocks Mock  new ","@spec add_Api Mock  new  ","@spec add_Spec Mocks Mock  new  "]}," Spec Runner ExecutionContext InstanceMethods initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods context_modules":{"type":"method","name":"context_modules","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods context_superclass":{"type":"method","name":"context_superclass","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods execution_context_class":{"type":"method","name":"execution_context_class","children":[],"call":[" derive_execution_context_class_from "," context_superclass "," derive_execution_context_class_from_context_superclass "]}," Spec Runner ContextEval ModuleMethods derive_execution_context_class_from":{"type":"method","name":"derive_execution_context_class_from","children":[],"call":[" include ","@execution_context_class class_eval ","Class  new ","Class  new  class_eval "]}," Spec Runner ContextEval ModuleMethods specifications":{"type":"method","name":"specifications","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":[" context_superclass send "," context_superclass "," execution_context_class send "," execution_context_class "," context_superclass respond_to? "]}," Spec Runner ContextEval ModuleMethods methods":{"type":"method","name":"methods","children":[],"call":[" context_superclass methods "," context_superclass "]}," Spec Runner ContextEval ModuleMethods specify":{"type":"method","name":"specify","children":[],"call":[" specifications << ","Specification  new "," specifications "]}," Spec Runner ContextEval ModuleMethods teardown":{"type":"method","name":"teardown","children":[],"call":[" teardown_parts << "," teardown_parts "]}," Spec Runner ContextEval ModuleMethods setup":{"type":"method","name":"setup","children":[],"call":[" setup_parts << "," setup_parts "]}," Spec Runner ContextEval ModuleMethods include":{"type":"method","name":"include","children":[],"call":[" context_modules << "," context_modules ","mod send "]}," Spec Runner ContextEval ModuleMethods inherit":{"type":"method","name":"inherit","children":[],"call":[" derive_execution_context_class_from "," context_superclass "," derive_execution_context_class_from_context_superclass "]}," Spec Runner Context InstanceMethods context_superclass":{"type":"method","name":"context_superclass","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods execution_context_class":{"type":"method","name":"execution_context_class","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods context_modules":{"type":"method","name":"context_modules","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods weave_in_teardown_method":{"type":"method","name":"weave_in_teardown_method","children":[],"call":[" teardown_block= "," instance_exec ","super_teardown bind call ","super_teardown bind "," proc "," teardown_block "," context_superclass instance_method "," context_superclass "," context_superclass method_defined? "," context_superclass instance_method  bind call "," context_superclass instance_method  bind "]}," Spec Runner Context InstanceMethods weave_in_setup_method":{"type":"method","name":"weave_in_setup_method","children":[],"call":[" setup_block= "," instance_exec ","super_setup bind call ","super_setup bind "," proc "," setup_block "," context_superclass instance_method "," context_superclass "," context_superclass method_defined? "," context_superclass instance_method  bind call "," context_superclass instance_method  bind "]}," Spec Runner Context InstanceMethods weave_in_context_modules":{"type":"method","name":"weave_in_context_modules","children":[],"call":[" include ","mods each "," execution_context_class class_eval "," execution_context_class "," context_modules "," context_modules  each "]}," Spec Runner Context InstanceMethods prepare_execution_context_class":{"type":"method","name":"prepare_execution_context_class","children":[],"call":[" execution_context_class "," weave_in_teardown_method "," weave_in_setup_method "," weave_in_context_modules "]}," Spec Runner Context InstanceMethods teardown_block=":{"type":"method","name":"teardown_block=","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods teardown_block":{"type":"method","name":"teardown_block","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods setup_block=":{"type":"method","name":"setup_block=","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods setup_block":{"type":"method","name":"setup_block","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods specifications":{"type":"method","name":"specifications","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":["@context_eval_module send ","@context_eval_module method_missing "]}," Spec Runner Context InstanceMethods methods":{"type":"method","name":"methods","children":[],"call":["@context_eval_module methods "]}," Spec Runner Context InstanceMethods run_single_spec":{"type":"method","name":"run_single_spec","children":[],"call":["spec matches_matcher? ! ","spec matches_matcher? "," specifications reject! "," specifications ","SpecMatcher  new ","@name == ","spec matches? ! ","spec matches? ","@description == ","spec matches_SpecMatcher  new ? ! ","spec matches_SpecMatcher  new ? "]}," Spec Runner Context InstanceMethods matches?":{"type":"method","name":"matches?","children":[],"call":["spec matches_matcher? "," specifications each "," specifications ","SpecMatcher  new ","spec matches? "]}," Spec Runner Context InstanceMethods number_of_specs":{"type":"method","name":"number_of_specs","children":[],"call":[" specifications length "," specifications "]}," Spec Runner Context InstanceMethods run":{"type":"method","name":"run","children":[],"call":["specification run "," teardown_block "," setup_block "," execution_context_class new "," execution_context_class "," specifications each "," specifications "," prepare_execution_context_class ","reporter add_context "," execution_context "," run_context_teardown ","specification_execution_context copy_instance_variables_from "," context_setup_block nil? "," context_setup_block ","errors length > ","errors length "," run_context_setup ","  execution_context_class new _class new ","  execution_context_class new _class "," prepare_ execution_context_class new _class ","  execution_context_class new  ","specification_ execution_context_class new  copy_instance_variables_from "," execution_context  copy_instance_variables_from "," run_context_setup  length > "," run_context_setup  length "]}," Spec Runner Context InstanceMethods specify":{"type":"method","name":"specify","children":[],"call":["@context_eval_module specify "]}," Spec Runner Context InstanceMethods teardown":{"type":"method","name":"teardown","children":[],"call":["@context_eval_module teardown "]}," Spec Runner Context InstanceMethods setup":{"type":"method","name":"setup","children":[],"call":["@context_eval_module setup "]}," Spec Runner Context InstanceMethods include":{"type":"method","name":"include","children":[],"call":["@context_eval_module include "]}," Spec Runner Context InstanceMethods inherit":{"type":"method","name":"inherit","children":[],"call":["@context_eval_module inherit "]}," Spec Runner Context InstanceMethods initialize":{"type":"method","name":"initialize","children":[],"call":["@context_eval_module class_eval ","@context_eval_module extend ","Module  new "," before_context_eval ","@context_eval_module include ","ContextEvalModule  new ","Module  new  class_eval ","ContextEvalModule  new  class_eval ","Module  new  extend ","ContextEvalModule  new  extend ","Module  new  include ","ContextEvalModule  new  include "]}," Spec ShouldNegator decrement":{"type":"method","name":"decrement","children":[],"call":[" increment ","difference -@ "]}," Spec ShouldNegator increment":{"type":"method","name":"increment","children":[],"call":["object __send__ should not equal ","initial_value + ","object __send__ should not ","object __send__ should ","object __send__ ","@target call ","object __send__  + "]}," Spec ShouldHelper decrement":{"type":"method","name":"decrement","children":[],"call":[" increment ","difference -@ "]}," Spec ShouldHelper increment":{"type":"method","name":"increment","children":[],"call":["object __send__ should equal ","initial_value + ","object __send__ should ","object __send__ ","@target call ","object __send__  + "]}," Spec Runner ContextEval ModuleMethods derive_execution_context_class_from_context_superclass":{"type":"method","name":"derive_execution_context_class_from_context_superclass","children":[],"call":[" include ","@execution_context_class class_eval ","Class  new "," context_superclass ","Class  new  class_eval "]}," Spec Runner ContextEval ModuleMethods create_block_from_parts":{"type":"method","name":"create_block_from_parts","children":[],"call":[" instance_exec ","part bind call ","part bind ","part is_a? ","parts each "," proc "," instance_eval "]}," Spec Runner ContextEval ModuleMethods teardown_block":{"type":"method","name":"teardown_block","children":[],"call":[" create_block_from_parts ","parts unshift "," context_superclass instance_method "," context_superclass "," teardown_parts dup "," teardown_parts "," add_context_superclass_method "," create_block_from_ teardown_parts dup  "," teardown_parts dup  unshift "," teardown_ teardown_parts dup  dup "," teardown_ teardown_parts dup  "]}," Spec Runner ContextEval ModuleMethods setup_block":{"type":"method","name":"setup_block","children":[],"call":[" create_block_from_parts ","parts unshift "," context_superclass instance_method "," context_superclass "," setup_parts dup "," setup_parts "," add_context_superclass_method "," create_block_from_ setup_parts dup  "," setup_parts dup  unshift "," setup_ setup_parts dup  dup "," setup_ setup_parts dup  "]}," Spec Runner ContextEval ModuleMethods teardown_parts":{"type":"method","name":"teardown_parts","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods setup_parts":{"type":"method","name":"setup_parts","children":[],"call":[]}," Spec Runner Context InstanceMethods teardown_parts":{"type":"method","name":"teardown_parts","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods setup_parts":{"type":"method","name":"setup_parts","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods before_context_eval":{"type":"method","name":"before_context_eval","children":[],"call":[]}," Spec Api Sugar sugarize_for_rspec!":{"type":"method","name":"sugarize_for_rspec!","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" _method_missing "]},{"type":"method","name":"__is_sweetened?","children":[],"asgn":[],"call":["sym to_s =~ ","sym to_s "]}],"call":["sym to_s =~ ","sym to_s ","object __send__ ","calls join ","call == ","(str \"an\") include? ","calls [] ","calls shift ","calls length > ","calls length ","sym to_s split ","original_method_missing bind call ","original_method_missing bind "," __is_sweetened? "," define_method "," _method_missing "," include "," class_eval "," instance_method ","object __send__  __send__ ","calls shift s join ","sym to_s split  join ","calls shift  == ","calls shift s [] ","sym to_s split  [] ","calls shift s shift ","sym to_s split  shift ","calls shift s length > ","sym to_s split  length > ","calls shift s length ","sym to_s split  length ","original_method_missing bind calls shift  "," instance_method  bind call "," instance_method  bind "]}," Spec Runner SimpleTextReporter dump_errors":{"type":"method","name":"dump_errors","children":[],"call":["index + "," dump_backtrace ","error backtrace ","@output << ","error class name ","error class ","error message ","@output << << ","index to_s ","index > ","@errors inject ","@errors empty? "]}," Spec Api DuckType walks_like?":{"type":"method","name":"walks_like?","children":[],"call":["obj respond_to? ","@methods_to_respond_do each "]}," Spec Api DuckType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Specification first_error":{"type":"method","name":"first_error","children":[],"call":["errors [] "]}," Spec Runner Specification matches?":{"type":"method","name":"matches?","children":[],"call":["name == ","matcher matches? ","matcher spec_desc= "," name "]}," Spec Runner SpecdocFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Spec Runner Reporter add_spec":{"type":"method","name":"add_spec","children":[],"call":[" spec_failed ","Failure  new ","@context_names last ","@backtrace_tweaker tweak_backtrace "," spec_passed ","error nil? "]}," Spec Runner RdocFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Spec Runner RdocFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner RdocFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Context isolate":{"type":"method","name":"isolate","children":[],"call":["spec matches? ! ","spec matches? ","name [] ","@name length + ","@name length ","@specifications reject! "]}," Spec Tool TranslationTestRunner underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s "]}," Spec Tool TranslationTestRunner force_file_collision?":{"type":"method","name":"force_file_collision?","children":[],"call":[" raise ","$stdout puts ","$test2spec_options []= ","$stdin gets ","$stdout print "," puts "," log "]}," Spec Tool TranslationTestRunner identical?":{"type":"method","name":"identical?","children":[],"call":["source == ","IO  read ","File  directory? "]}," Spec Tool TranslationTestRunner write":{"type":"method","name":"write","children":[],"call":[" system ","$test2spec_options [] "," chmod ","df write ","File  open "," puts "," mkdir_p ","File  directory? ","File  dirname "," raise ","$test2spec_options [] inspect "," force_file_collision? ","(send\n  (gvar :$test2spec_options) :[]\n  (sym :collision)) to_sym "," identical? ","File  exists? "," destination_path "," log "," mkFile  dirname _p ","File  File  dirname ectory? ","File  File  dirname name ","  destination_path _path "]}," Spec Tool TranslationTestRunner destination_path":{"type":"method","name":"destination_path","children":[],"call":["File  join ","$test2spec_options [] "]}," Spec Tool TranslationTestRunner passed?":{"type":"method","name":"passed?","children":[],"call":[]}," Spec Tool TranslationTestRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" puts "," write ","relative_path gsub! "," underscore ","klass name ","$test2spec_options [] ","translator translate ","klass < ","ObjectSpace  each_object ","TestUnitTranslator  new "," log "," render ","IO  read "," underscore  gsub! ","TestUnitTranslator  new  translate "]}," Spec Tool TranslationTestRunner run":{"type":"method","name":"run","children":[],"call":[]}," Spec Tool TestUnitTranslator process_iter":{"type":"method","name":"process_iter","children":[],"call":[]}," Spec Tool TestUnitTranslator process_fcall":{"type":"method","name":"process_fcall","children":[],"call":["BLOCK_TRANSLATIONS  [] ","code [] ","code empty? ","code << "," process ","args shift ","args empty? "," assert_type ","args nil? ","exp shift ","exp shift to_s ","exp [] to_s =~ ","exp [] to_s ","exp [] "," raise ","translation nil? ","PLAIN_TRANSLATIONS  [] ","name == ","ONE_ARG_ASSERTIONS  index ","exp shift  shift ","exp shift  empty? ","exp shift  nil? ","PLAIN_TRANSLATIONS  []  nil? ","exp shift to_s  == "]}," Spec Tool TestUnitTranslator process_defn":{"type":"method","name":"process_defn","children":[],"call":["(str \"specify \\\"\") gsub "," process ","exp shift ","1 gsub ","method_name =~ ","(begin\n  (lvar :method_name)) gsub ","method_name == ","exp [] first != ","exp [] first ","exp [] ","exp [] to_s ","method_exp shift  =~ ","exp [] to_s  =~ ","(begin\n  (lvar :method_exp shift )) gsub ","(begin\n  (lvar :exp [] to_s )) gsub ","method_exp shift  == ","exp [] to_s  == "]}," Spec Tool TestUnitTranslator process_class":{"type":"method","name":"process_class","children":[],"call":["(send\n  (lvar :modules) :collect) join ","modules collect ","modules empty? "," indent + "," indent ","body << "," process ","exp shift ","exp empty? ","s << ","class_name match [] ","class_name match ","exp shift to_s ","module_and_class_name [] ","exp shift to_s split ","exp [] to_s == ","exp [] to_s ","exp [] ","(send\n  (lvar :module_and_class_name [] ) :collect) join ","module_and_class_name []  collect ","module_and_class_name []  empty? ","module_and_class_name []  match [] ","module_and_class_name []  match ","module_and_module_and_class_name []  [] ","exp shift to_s split  [] "]}," Spec Tool TranslationTestRunner quiet?":{"type":"method","name":"quiet?","children":[],"call":["$test2spec_options [] == ","$test2spec_options [] "]}," Spec Tool TranslationTestRunner log":{"type":"method","name":"log","children":[],"call":[" puts "," quiet? "]}," Spec Tool TranslationTestRunner render":{"type":"method","name":"render","children":[],"call":["erb result "," binding ","ERB  new ","relative_path split length - ","relative_path split length ","relative_path split ","template nil? ","ERB  new  result "]}," Spec Api UnderscoreSugar sugarize_for_rspec!":{"type":"method","name":"sugarize_for_rspec!","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" _method_missing "]},{"type":"method","name":"__is_sweetened?","children":[],"asgn":[],"call":["sym to_s =~ ","sym to_s "]}],"call":["sym to_s =~ ","sym to_s ","object __send__ ","calls join ","call == ","calls shift ","object respond_to? ","calls length > ","calls length ","sym to_s split ","original_method_missing bind call ","original_method_missing bind "," __is_sweetened? "," define_method "," _method_missing "," include "," class_eval "," instance_method ","object __send__  __send__ ","calls shift s join ","sym to_s split  join ","calls shift  == ","calls shift s shift ","sym to_s split  shift ","object __send__  respond_to? ","calls shift s length > ","sym to_s split  length > ","calls shift s length ","sym to_s split  length ","original_method_missing bind calls shift  "," instance_method  bind call "," instance_method  bind "]}," Spec Api Mock should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[]}," Spec Api MessageExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":[]}," Spec Api MessageExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":[]}," Spec Api MessageExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":[]}," Spec Api MessageExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" lambda "," block_given? ","value instance_of? ","Kernel  raise ","@method_block nil? "]}," Spec Api MessageExpectation set_expected_received_count":{"type":"method","name":"set_expected_received_count","children":[],"call":["n kind_of? ","n == ","relativity == "]}," Spec Api MessageExpectation at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_received_count "]}," Spec Api MessageExpectation at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_received_count "]}," Spec ShouldNegator respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec ShouldNegator a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec ShouldNegator an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec ShouldHelper respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec ShouldHelper a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec ShouldHelper an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec ShouldHelper have_at_most":{"type":"method","name":"have_at_most","children":[],"call":["HaveHelper  new "]}," Spec ShouldHelper have_at_least":{"type":"method","name":"have_at_least","children":[],"call":["HaveHelper  new "]}," Spec ShouldHelper have_exactly":{"type":"method","name":"have_exactly","children":[],"call":["HaveHelper  new "]}," Spec Runner ExecutionContext InstanceMethods stub_space":{"type":"method","name":"stub_space","children":[],"call":["@spec stub_space "]}," Spec Runner ExecutionContext InstanceMethods stub":{"type":"method","name":"stub","children":[],"call":[" stub_space create_stub "," stub_space "]}," Spec Mocks MockInstanceMethods find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find "]}," Spec Mocks MockInstanceMethods message_received":{"type":"method","name":"message_received","children":[],"call":[" method_missing ","expectation invoke "," find_matching_expectation "," find_matching_expectation  invoke "," find_matching_ find_matching_expectation  "]}," Spec Mocks MockInstanceMethods define_expected_method":{"type":"method","name":"define_expected_method","children":[],"call":[" metaclass __send__ "," metaclass "]}," Spec Mocks MockInstanceMethods metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Spec Mocks MockInstanceMethods add":{"type":"method","name":"add","children":[],"call":["@expectations << ","expectation_class send "," block_given? "," define_expected_method ","@expectation_class send s << ","expectation_class send _class send "]}," Spec Mocks MockInstanceMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":["Kernel  raise ","(send\n  (lvar :args) :collect) join ","arg class name ","arg class ","args collect ","@options [] "]}," Spec Mocks MockInstanceMethods __verify":{"type":"method","name":"__verify","children":[],"call":["expectation verify_messages_received ","@expectations each "]}," Spec Mocks MockInstanceMethods should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" add "," caller [] "," caller "]}," Spec Mocks MockInstanceMethods should_receive":{"type":"method","name":"should_receive","children":[],"call":[" add "," caller [] "," caller "]}," Spec Mocks MockInstanceMethods initialize":{"type":"method","name":"initialize","children":[],"call":["OrderGroup  new ","DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup "]}," Spec Mocks MessageExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":[]}," Spec Mocks MessageExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":[]}," Spec Mocks MessageExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":[]}," Spec Mocks MessageExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" lambda "," block_given? ","value instance_of? ","Kernel  raise ","@method_block nil? "]}," Spec Mocks MessageExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["value [] ","(ivar :@received_count) min ","value size - ","value size ","@return_block call ","args << ","block nil? ","@return_block call  [] ","@return_block call  size - ","@return_block call  size "]}," Spec Mocks MessageExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":["block call ","Kernel  raise ","@args_to_yield size ","@args_to_yield length != ","block arity ","@args_to_yield length ","block nil? "]}," Spec Mocks MessageExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["Kernel  raise ","Call expectation violated with:  + ","@method_block call "]}," Spec Mocks MessageExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_return_block "," invoke_with_yield ","@args_to_yield nil? ! ","@args_to_yield nil? "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise new ","@exception_to_raise nil? "," handle_order_constraint "]}," Spec Mocks MessageExpectation handle_order_constraint":{"type":"method","name":"handle_order_constraint","children":[],"call":["Kernel  raise ","@ordering consume ","@ordering ready_for? "]}," Spec Mocks MessageExpectation pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["count == "]}," Spec Mocks MessageExpectation make_count_message":{"type":"method","name":"make_count_message","children":[],"call":[" pretty_print ","count > ","count abs ","count < "]}," Spec Mocks MessageExpectation matches":{"type":"method","name":"matches","children":[],"call":["@args_expectation check_args ","@sym == "]}," Spec Mocks MessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["ArgumentExpectation  new "," lambda "]}," Spec Expectations UnderscoreSugar handle_underscores_for_rspec!":{"type":"method","name":"handle_underscores_for_rspec!","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" _method_missing "]},{"type":"method","name":"__sweetened?","children":[],"asgn":[],"call":["sym to_s =~ ","sym to_s "]}],"call":["sym to_s =~ ","sym to_s ","object __send__ ","calls join ","call == ","calls shift ","object respond_to? ","calls length > ","calls length ","sym to_s split ","original_method_missing bind call ","original_method_missing bind "," __sweetened? "," define_method "," _method_missing "," include "," class_eval "," instance_method ","sym to_s [] ","Spec Expectations Should Should  new __send__ "," __strip_should ","Spec Expectations Should Should  new ","Spec Matchers Matcher  new "," should "," __matcher __send__ "," __matcher "," __matcher respond_to? ","Spec Expectations Should Not  new __send__ "," __strip_should_not ","Spec Expectations Should Not  new "," should_not ","object __send__  __send__ ","calls shift s join ","sym to_s split  join ","calls shift  == ","calls shift s shift ","sym to_s split  shift ","object __send__  respond_to? ","calls shift s length > ","sym to_s split  length > ","calls shift s length ","sym to_s split  length ","original_method_missing bind calls shift  "," instance_method  bind call "," instance_method  bind "]}," Spec Expectations ShouldNegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," default_message ","(str \"should not\") + ","  + ","args join ","args empty? ","@target __send__ "," find_supported_sym "]}," Spec Expectations ShouldNegator throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch "]}," Spec Expectations ShouldNegator raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message ","e inspect "," default_message ","e instance_of? ","e message == ","e message ","message nil? ","@target call "]}," Spec Expectations ShouldNegator match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec Expectations ShouldNegator respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec Expectations ShouldNegator a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec Expectations ShouldNegator an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec Expectations ShouldNegator be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","expected == "]}," Spec Expectations ShouldNegator equal":{"type":"method","name":"equal","children":[],"call":[" fail_with_message "," default_message ","@target == "]}," Spec Expectations ShouldNegator satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message "]}," Spec Expectations ShouldNegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations ShouldHelper throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch "]}," Spec Expectations ShouldHelper raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message "," default_message ","e inspect ","e message should_equal ","e message ","message nil? ","@target call "]}," Spec Expectations ShouldHelper match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec Expectations ShouldHelper method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," default_message ","(str \"should\") + ","  + ","args join ","args empty? ","@target send "," find_supported_sym "]}," Spec Expectations ShouldHelper respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec Expectations ShouldHelper a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec Expectations ShouldHelper an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec Expectations ShouldHelper be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","@target != ","@target nil? ! ","@target nil? ","expected == "]}," Spec Expectations ShouldHelper equal":{"type":"method","name":"equal","children":[],"call":[" fail_with_message "," default_message ","@target == "]}," Spec Expectations ShouldHelper satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message ","block call "]}," Spec Expectations ShouldHelper have_at_most":{"type":"method","name":"have_at_most","children":[],"call":["HaveHelper  new "]}," Spec Expectations ShouldHelper have_at_least":{"type":"method","name":"have_at_least","children":[],"call":["HaveHelper  new "]}," Spec Expectations ShouldHelper have_exactly":{"type":"method","name":"have_exactly","children":[],"call":["HaveHelper  new "]}," Spec Expectations ShouldHelper have":{"type":"method","name":"have","children":[],"call":["HaveHelper  new "]}," Spec Expectations ShouldHelper not":{"type":"method","name":"not","children":[],"call":["ShouldNegator  new "]}," Spec Expectations ShouldHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations ShouldBase find_supported_sym":{"type":"method","name":"find_supported_sym","children":[],"call":["original_sym supported_by_rspec? ","alternate_sym to_s ","@target respond_to? ","(dstr\n  (begin\n    (lvar :original_sym))\n  (str \"?\")) each "]}," Spec Expectations ShouldBase respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@target respond_to? ","sym to_s "]}," Spec Expectations ShouldBase fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Kernel  raise ","Spec Expectations ExpectationNotMetError  new "]}," Spec Expectations ShouldBase default_message":{"type":"method","name":"default_message","children":[],"call":["message << << ","expected inspect_for_expectation_not_met_error ","message << ","expected != ","@target inspect_for_expectation_not_met_error ","result << << "," diff_as_string ","@target to_s ","result << ","expected is_a? "," old_default_message "," old_default_message  << << "," old_default_message  << "]}," Numeric inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" inspect "]}," Symbol supported_by_rspec?":{"type":"method","name":"supported_by_rspec?","children":[],"call":["(str \"<\") include? "," to_s "]}," Spec Expectations HaveHelper as_specified?":{"type":"method","name":"as_specified?","children":[],"call":[" actual_size == "," actual_size "," collection "," actual_size <= "," actual_size >= "]}," Spec Expectations HaveHelper build_message":{"type":"method","name":"build_message","children":[],"call":[" actual_size "," collection ","@target inspect_for_expectation_not_met_error "]}," Spec Expectations HaveHelper actual_size":{"type":"method","name":"actual_size","children":[],"call":["collection size ","collection respond_to? ","collection length "]}," Spec Expectations HaveHelper collection":{"type":"method","name":"collection","children":[],"call":["@target send "]}," Spec Expectations HaveHelper method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail_with_message "," build_message "," as_specified? "]}," Spec Expectations HaveHelper initialize":{"type":"method","name":"initialize","children":[],"call":["relativity == ","expected == "]}," Spec Expectations ShouldBase diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":["output << << ","output << ","oldhunk diff ","hunk unshift ","hunk overlaps? ","context_lines > ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each ","diffs empty? ","Diff LCS  diff ","e chomp ","data_new split map! ","data_new split ","data_old split map! ","data_old split ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","Diff LCS  diff  empty? "]}," Spec Runner Specification notify_after_teardown":{"type":"method","name":"notify_after_teardown","children":[],"call":["errors << ","listener spec_finished ","listener respond_to? ","@listeners each "," class send "," append_errors "," class "," notify_callbacks "," notify_class_callbacks "]}," Spec Runner Specification add_listener":{"type":"method","name":"add_listener","children":[],"call":["@listeners << "]}," Spec Runner SpecShouldRaiseHandler handle":{"type":"method","name":"handle","children":[],"call":["errors delete ","errors insert ","Spec Expectations ExpectationNotMetError  new "," build_message ","errors [] ","error_to_remove nil? "," error_matches? ","errors detect ","errors << ","errors empty? "]}," Spec Runner SpecShouldRaiseHandler error_matches?":{"type":"method","name":"error_matches?","children":[],"call":["error message == ","error message ","error message =~ ","@expected_error_message is_a? ","@expected_error_message nil? ","error kind_of? "]}," Spec Runner SpecShouldRaiseHandler build_message":{"type":"method","name":"build_message","children":[],"call":["message << ","exception inspect ","@expected_error_class new inspect ","@expected_error_class new ","@expected_error_message to_s ","@expected_error_class to_s ","@expected_error_message nil? "]}," Spec Runner SpecShouldRaiseHandler determine_error_message":{"type":"method","name":"determine_error_message","children":[],"call":["candidate [] ","candidate is_a? ","opts [] ","opts []  [] ","opts []  is_a? "]}," Spec Runner SpecShouldRaiseHandler determine_error_class":{"type":"method","name":"determine_error_class","children":[],"call":["candidate [] ","candidate is_a? ","opts [] ","opts []  [] ","opts []  is_a? "]}," Spec Runner SpecShouldRaiseHandler initialize":{"type":"method","name":"initialize","children":[],"call":[" determine_error_message "," determine_error_class "]}," Spec Runner ContextEval ModuleMethods add_context_superclass_method":{"type":"method","name":"add_context_superclass_method","children":[],"call":["parts unshift "," context_superclass instance_method "," context_superclass "]}," Spec Runner Context InstanceMethods execution_context":{"type":"method","name":"execution_context","children":[],"call":[" execution_context_class new "," execution_context_class "]}," Spec Mocks MockMethods __mock_handler":{"type":"method","name":"__mock_handler","children":[],"call":["MockHandler  new "]}," Spec Mocks MockMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_handler raise_unexpected_message_error "," __mock_handler "," __mock_handler null_object? ","@messages_received << "," __mock_handler instance_eval "]}," Spec Mocks MockMethods __reset_mock":{"type":"method","name":"__reset_mock","children":[],"call":[" __mock_handler reset "," __mock_handler "]}," Spec Mocks MockMethods __verify":{"type":"method","name":"__verify","children":[],"call":[" __mock_handler verify "," __mock_handler "]}," Spec Mocks MockMethods received_message?":{"type":"method","name":"received_message?","children":[],"call":[" __mock_handler received_message? "," __mock_handler "]}," Spec Mocks MockMethods stub!":{"type":"method","name":"stub!","children":[],"call":[" __mock_handler add_stub "," caller [] "," caller "," __mock_handler "]}," Spec Mocks MockMethods should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" __mock_handler add_negative_message_expectation "," caller [] "," caller "," __mock_handler "]}," Spec Mocks MockMethods should_receive":{"type":"method","name":"should_receive","children":[],"call":[" __mock_handler add_message_expectation "," caller [] "," caller ","opts [] "," __mock_handler "]}," Spec Mocks MockHandler raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":["@error_generator raise_unexpected_message_error "]}," Spec Mocks MockHandler message_received":{"type":"method","name":"message_received","children":[],"call":["@target send "," raise_unexpected_message_error "," has_negative_expectation? "," null_object? "," find_almost_matching_expectation ","stub invoke "," find_matching_method_stub ","expectation invoke "," find_matching_expectation "," raise_unexpected_message_args_error "," has_negative_ find_almost_matching_expectation ? "," has_negative_ find_matching_expectation ? "," find_almost_matching_ find_almost_matching_expectation  "," find_almost_matching_ find_matching_expectation  "," find_matching_method_stub  invoke "," find_matching_method_ find_matching_method_stub  "," find_almost_matching_expectation  invoke "," find_matching_expectation  invoke "," find_matching_ find_almost_matching_expectation  "," find_matching_ find_matching_expectation  "]}," Spec Mocks MockHandler has_negative_expectation?":{"type":"method","name":"has_negative_expectation?","children":[],"call":["expectation negative_expectation_for? ","@expectations detect "]}," Spec Mocks MockHandler find_matching_method_stub":{"type":"method","name":"find_matching_method_stub","children":[],"call":["stub matches ","@stubs find "]}," Spec Mocks MockHandler find_almost_matching_expectation":{"type":"method","name":"find_almost_matching_expectation","children":[],"call":["expectation matches_name_but_not_args ","@expectations find "]}," Spec Mocks MockHandler find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find "]}," Spec Mocks MockHandler received_message?":{"type":"method","name":"received_message?","children":[],"call":["array == ","@messages_received find "]}," Spec Mocks MockHandler metaclass_eval":{"type":"method","name":"metaclass_eval","children":[],"call":["(sclass\n  (ivar :@target)\n  (self)) class_eval "," metaclass class_eval "," metaclass "]}," Spec Mocks MockHandler clear_proxied_methods":{"type":"method","name":"clear_proxied_methods","children":[],"call":["@proxied_methods clear "]}," Spec Mocks MockHandler clear_stubs":{"type":"method","name":"clear_stubs","children":[],"call":["@stubs clear "]}," Spec Mocks MockHandler clear_expectations":{"type":"method","name":"clear_expectations","children":[],"call":["@expectations clear "]}," Spec Mocks MockHandler reset_proxied_methods":{"type":"method","name":"reset_proxied_methods","children":[],"call":[" metaclass_eval "," __pre_proxied_method_name ","@target respond_to? ","@proxied_methods each "," define_instance_method "," metaclass __send__ "," munge "," metaclass "]}," Spec Mocks MockHandler verify_expectations":{"type":"method","name":"verify_expectations","children":[],"call":["expectation verify_messages_received ","@expectations each "]}," Spec Mocks MockHandler reset":{"type":"method","name":"reset","children":[],"call":[" clear_proxied_methods "," reset_proxied_methods "," clear_stubs "," clear_expectations "]}," Spec Mocks MockHandler verify":{"type":"method","name":"verify","children":[],"call":[" reset "," verify_expectations "]}," Spec Mocks MockHandler __pre_proxied_method_name":{"type":"method","name":"__pre_proxied_method_name","children":[],"call":["method_name to_s delete delete delete ","method_name to_s delete delete ","method_name to_s delete ","method_name to_s "]}," Spec Mocks MockHandler define_expected_method":{"type":"method","name":"define_expected_method","children":[],"call":[" metaclass_eval ","@proxied_methods << "," __pre_proxied_method_name ","@target respond_to? ","@proxied_methods []= ","@target method ","@proxied_methods [] ! ","@proxied_methods [] "," metaclass __send__ "," munge "," metaclass ","@proxied_methods include? ! ","@proxied_methods include? "," target_responds_to? "]}," Spec Mocks MockHandler spec_finished":{"type":"method","name":"spec_finished","children":[],"call":[" verify "]}," Spec Mocks MockHandler __add":{"type":"method","name":"__add","children":[],"call":[" define_expected_method ","Runner Specification  add_listener ","@options [] "," verify ","current_spec after_teardown ","Runner Specification  current ","Runner Specification  current  after_teardown "]}," Spec Mocks MockHandler add_stub":{"type":"method","name":"add_stub","children":[],"call":["@stubs last ","@stubs << ","MethodStub  new "," __add ","@stubs first ","@stubs unshift "]}," Spec Mocks MockHandler add_negative_message_expectation":{"type":"method","name":"add_negative_message_expectation","children":[],"call":["@expectations last ","@expectations << ","NegativeMessageExpectation  new "," block_given? "," __add "]}," Spec Mocks MockHandler add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":["@expectations last ","@expectations << ","MessageExpectation  new "," block_given? "," __add "]}," Spec Mocks MockHandler null_object?":{"type":"method","name":"null_object?","children":[],"call":["@options [] "]}," Spec Mocks MockHandler initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup ","OrderGroup  new ","ErrorGenerator  new "]}," Spec Mocks MethodStub initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations Should Should throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch ","e inspect "]}," Spec Expectations Should Should raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message "," default_message ","e inspect ","e message should_eql ","e message ","e message should_match ","message is_a? ","message nil? ","@target call ","e message should == ","e message should ","e message should =~ ","message inspect "]}," Spec Expectations Should Should match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec Expectations Should Should __delegate_method_missing_to_target":{"type":"method","name":"__delegate_method_missing_to_target","children":[],"call":[" fail_with_message "," default_message ","args [] ","@target send ","(str \"should\") + ","  + ","args [] inspect ","args empty? "," Spec Matchers  generated_description= "," fail_with_ default_message  "," default_ default_message  "]}," Spec Expectations Should Should respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec Expectations Should Should a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec Expectations Should Should an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec Expectations Should Should be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","expected == ","Symbol  === "]}," Spec Expectations Should Should satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message "]}," Spec Expectations Should Should not":{"type":"method","name":"not","children":[],"call":["Not  new "]}," Spec Expectations Should Should have":{"type":"method","name":"have","children":[],"call":["Have  new "]}," Spec Expectations Should Should initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations Should Not __delegate_method_missing_to_target":{"type":"method","name":"__delegate_method_missing_to_target","children":[],"call":[" fail_with_message "," default_message ","(str \"should not\") + ","  + ","args join ","args empty? ","@target __send__ ","args [] inspect ","args [] "," Spec Matchers  generated_description= "]}," Spec Expectations Should Not throw":{"type":"method","name":"throw","children":[],"call":[" fail_with_message "," default_message ","symbol inspect ","@target call "," catch "]}," Spec Expectations Should Not raise":{"type":"method","name":"raise","children":[],"call":[" fail_with_message ","e inspect "," default_message ","e instance_of? ","e message =~ ","e message ","message is_a? ","e message == ","message nil? ","@target call ","failure_message << << ","failure_message << ","message inspect ","exception to_s ","e kind_of? "]}," Spec Expectations Should Not match":{"type":"method","name":"match","children":[],"call":[" fail_with_message "," default_message ","@target =~ "]}," Spec Expectations Should Not respond_to":{"type":"method","name":"respond_to","children":[],"call":[" fail_with_message "," default_message ","@target respond_to? "]}," Spec Expectations Should Not a_kind_of":{"type":"method","name":"a_kind_of","children":[],"call":[" fail_with_message "," default_message ","@target kind_of? "]}," Spec Expectations Should Not an_instance_of":{"type":"method","name":"an_instance_of","children":[],"call":[" fail_with_message "," default_message ","@target instance_of? "]}," Spec Expectations Should Not be":{"type":"method","name":"be","children":[],"call":[" fail_with_message "," default_message ","@target equal? ","expected == "]}," Spec Expectations Should Not satisfy":{"type":"method","name":"satisfy","children":[],"call":[" fail_with_message "]}," Spec Expectations Should Not have":{"type":"method","name":"have","children":[],"call":["Have  new ","NotHave  new "]}," Spec Expectations Should Not initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations Should Have collection":{"type":"method","name":"collection","children":[],"call":["@target send "]}," Spec Expectations Should Have as_specified?":{"type":"method","name":"as_specified?","children":[],"call":[" actual_size == "," actual_size "," collection "," actual_size <= "," actual_size >= "]}," Spec Expectations Should Have build_message":{"type":"method","name":"build_message","children":[],"call":[" actual_size "," collection ","@target inspect_for_expectation_not_met_error ","@target inspect "]}," Spec Expectations Should Have actual_size":{"type":"method","name":"actual_size","children":[],"call":["collection size ","collection respond_to? ","collection length "]}," Spec Expectations Should Have msg":{"type":"method","name":"msg","children":[],"call":["(send\n  (lvar :args) :collect) join ","arg inspect_for_expectation_not_met_error ","args collect ","@target inspect_for_expectation_not_met_error ","arg inspect ","@target inspect "]}," Spec Expectations Should Have method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","NoMethodError  new ","@target inspect "," fail_with_message "," msg ","@target send ","@target respond_to? "," build_message "," as_specified? "," check_has_sym ","@item_handler handle_message ","@item_handler wants_to_handle ","@collection_handler handle_message ","@collection_handler wants_to_handle ","Spec Expectations  fail_with "]}," Spec Expectations Should Have at_most":{"type":"method","name":"at_most","children":[],"call":["expected_number == "]}," Spec Expectations Should Have at_least":{"type":"method","name":"at_least","children":[],"call":["expected_number == "]}," Spec Expectations Should Have exactly":{"type":"method","name":"exactly","children":[],"call":["expected_number == "]}," Spec Expectations Should Have initialize":{"type":"method","name":"initialize","children":[],"call":["relativity == ","expected == "," init_item_handler "," init_collection_handler "]}," Spec Expectations Should Base method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __delegate_method_missing_to_target "," find_supported_sym "," have __send__ ","original_sym to_s [] to_sym ","original_sym to_s [] ","original_sym to_s "," have ","original_sym to_s =~ "," __send__ ","Not  new __send__ ","Not  new "," sym "]}," Spec Expectations Should Base find_supported_sym":{"type":"method","name":"find_supported_sym","children":[],"call":["original_sym supported_by_rspec? ","alternate_sym to_s ","@target respond_to? ","(dstr\n  (begin\n    (lvar :original_sym))\n  (str \"?\")) each ","(str \"<\") include? "]}," Spec Expectations Should Base fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Kernel  raise ","Spec Expectations ExpectationNotMetError  new ","Spec Expectations  fail_with "]}," Spec Expectations Should Base default_message":{"type":"method","name":"default_message","children":[],"call":["message << << ","expected inspect_for_expectation_not_met_error ","message << ","expected != ","@target inspect_for_expectation_not_met_error ","result << << ","@@differ diff_as_object ","result << ","@target is_a? ! ","@target is_a? ","@@differ diff_as_string ","@target to_s ","expected is_a? "," old_default_message ","expected inspect ","@target inspect ","@@differ nil? ","Spec Expectations  build_message ","expectation == "," old_default_message  << << "," old_default_message  << "]}," Spec Expectations Should Base differ=":{"type":"method","name":"differ=","children":[],"call":[]}," Spec Runner QuietBacktraceTweaker tweak_instance_exec_line":{"type":"method","name":"tweak_instance_exec_line","children":[],"call":["line split [] ","line split ","line include? ","line split []  split [] ","line split []  split ","line split []  include? "]}," Spec Runner NoisyBacktraceTweaker tweak_instance_exec_line":{"type":"method","name":"tweak_instance_exec_line","children":[],"call":["line split [] + ","line split [] ","line split ","line include? ","line split [] +  split [] + ","line split [] +  split [] ","line split [] +  split ","line split [] +  include? "]}," Spec Mocks MockHandler define_instance_method":{"type":"method","name":"define_instance_method","children":[],"call":[" define_method ","(sclass\n  (ivar :@target)\n  (self)) class_eval "]}," Spec Runner SpecParser lines_above_reversed":{"type":"method","name":"lines_above_reversed","children":[],"call":["lines [] reverse ","lines [] ","source split ","source split  [] reverse ","source split  [] "]}," Spec Runner SpecParser find_above":{"type":"method","name":"find_above","children":[],"call":["line =~ "," lines_above_reversed each "," lines_above_reversed ","line_number - "," parse_description "," lines_above_reversed each_with_index "]}," Spec Runner SpecParser spec_at_line":{"type":"method","name":"spec_at_line","children":[],"call":[" find_above "]}," Spec Runner SpecParser context_at_line":{"type":"method","name":"context_at_line","children":[],"call":[" find_above "]}," Spec Runner OptionParser set_spec_from_line_number":{"type":"method","name":"set_spec_from_line_number","children":[],"call":[" exit ","err == ","err puts ","args [] ","@file_factory directory? ","options spec_name= ","@spec_parser spec_name_for ","options line_number ","@file_factory open ","@file_factory file? ","args length == ","args length ","options spec_name ","args inspect ","options examples= ","options examples empty? ","options examples ","options parse_example "," stderr? ","@error_stream puts ","@options files inspect ","@options files ","@options files [] ","@options parse_example ","@options line_number ","@options files length == ","@options files length ","@options examples empty? ","@options examples ","options @spec_parser spec_name_for s= ","options @spec_parser spec_name_for s empty? ","options @spec_parser spec_name_for s ","options parse_@spec_parser spec_name_for  ","@options parse_@spec_parser spec_name_for  ","@options @spec_parser spec_name_for s empty? ","@options @spec_parser spec_name_for s "]}," Spec Expectations Should Should change":{"type":"method","name":"change","children":[],"call":["Change  new "]}," Spec Expectations Should Not change":{"type":"method","name":"change","children":[],"call":["NotChange  new "]}," Spec Expectations Should NotHave check_has_sym":{"type":"method","name":"check_has_sym","children":[],"call":[" fail_with_message "," msg ","@target send "]}," Spec Expectations Should Have check_has_sym":{"type":"method","name":"check_has_sym","children":[],"call":[" fail_with_message "," msg ","@target send "]}," Spec Expectations Should NotChange evaluate_change":{"type":"method","name":"evaluate_change","children":[],"call":[" fail_with_message ","@after_change inspect ","@before_change != ","@before_change inspect "]}," Spec Expectations Should Change actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@after_change - "]}," Spec Expectations Should Change by":{"type":"method","name":"by","children":[],"call":[" fail_with_message "," actual_delta "," actual_delta != "," message "]}," Spec Expectations Should Change to":{"type":"method","name":"to","children":[],"call":[" fail_with_message ","@after_change inspect ","value inspect ","@after_change != "," message "]}," Spec Expectations Should Change from":{"type":"method","name":"from","children":[],"call":[" fail_with_message ","@before_change inspect ","value inspect ","@before_change != "," message "]}," Spec Expectations Should Change evaluate_change":{"type":"method","name":"evaluate_change","children":[],"call":[" fail_with_message ","@after_change inspect ","@before_change == "," message "]}," Spec Expectations Should Change execute_change":{"type":"method","name":"execute_change","children":[],"call":["@receiver send ","@target call ","@block call ","@block nil? "]}," Spec Expectations Should Change initialize":{"type":"method","name":"initialize","children":[],"call":[" evaluate_change "," execute_change "]}," Spec Expectations ObjectExpectations should_not_throw":{"type":"method","name":"should_not_throw","children":[],"call":[" should not throw "," should not "," should "]}," Spec Expectations ObjectExpectations should_throw":{"type":"method","name":"should_throw","children":[],"call":[" should throw "," should "]}," Spec Expectations ObjectExpectations should_not_raise":{"type":"method","name":"should_not_raise","children":[],"call":[" should not raise "," should not "," should "]}," Spec Expectations ObjectExpectations should_raise":{"type":"method","name":"should_raise","children":[],"call":[" should raise "," should "]}," Spec Expectations ObjectExpectations should_not_match":{"type":"method","name":"should_not_match","children":[],"call":[" should not match "," should not "," should "]}," Spec Expectations ObjectExpectations should_match":{"type":"method","name":"should_match","children":[],"call":[" should match "," should "]}," Spec Expectations ObjectExpectations should_not_respond_to":{"type":"method","name":"should_not_respond_to","children":[],"call":[" should not respond_to "," should not "," should "]}," Spec Expectations ObjectExpectations should_respond_to":{"type":"method","name":"should_respond_to","children":[],"call":[" should respond_to "," should "]}," Spec Expectations ObjectExpectations should_not_be_a_kind_of":{"type":"method","name":"should_not_be_a_kind_of","children":[],"call":[" should not be a_kind_of "," should not be "," should not "," should "]}," Spec Expectations ObjectExpectations should_be_a_kind_of":{"type":"method","name":"should_be_a_kind_of","children":[],"call":[" should be a_kind_of "," should be "," should "]}," Spec Expectations ObjectExpectations should_not_be_an_instance_of":{"type":"method","name":"should_not_be_an_instance_of","children":[],"call":[" should not be an_instance_of "," should not be "," should not "," should "]}," Spec Expectations ObjectExpectations should_be_an_instance_of":{"type":"method","name":"should_be_an_instance_of","children":[],"call":[" should be an_instance_of "," should be "," should "]}," Spec Expectations ObjectExpectations should_not_satisfy":{"type":"method","name":"should_not_satisfy","children":[],"call":[" should not satisfy "," should not "," should "]}," Spec Expectations ObjectExpectations should_satisfy":{"type":"method","name":"should_satisfy","children":[],"call":[" should satisfy "," should "]}," Spec Expectations ObjectExpectations should_not_be":{"type":"method","name":"should_not_be","children":[],"call":[" should not be "," should not "," should "," should_not be "," should_not "]}," Spec Expectations ObjectExpectations should_be":{"type":"method","name":"should_be","children":[],"call":[" should be "," should "]}," Spec Expectations ObjectExpectations should_not_change":{"type":"method","name":"should_not_change","children":[],"call":[" should not change "," should not "," should "]}," Spec Expectations ObjectExpectations should_change":{"type":"method","name":"should_change","children":[],"call":[" should change "," should "]}," Spec Expectations ObjectExpectations should_not_include":{"type":"method","name":"should_not_include","children":[],"call":[" should not include "," should not "," should "]}," Spec Expectations ObjectExpectations should_include":{"type":"method","name":"should_include","children":[],"call":[" should include "," should "]}," Spec Expectations ObjectExpectations should_have_at_most":{"type":"method","name":"should_have_at_most","children":[],"call":[" should have at_most "," should have "," should "]}," Spec Expectations ObjectExpectations should_have_at_least":{"type":"method","name":"should_have_at_least","children":[],"call":[" should have at_least "," should have "," should "]}," Spec Expectations ObjectExpectations should_have":{"type":"method","name":"should_have","children":[],"call":[" should have "," should "]}," Spec Expectations ObjectExpectations should_not_eql":{"type":"method","name":"should_not_eql","children":[],"call":[" should not eql "," should not "," should "]}," Spec Expectations ObjectExpectations should_eql":{"type":"method","name":"should_eql","children":[],"call":[" should eql "," should "]}," Spec Expectations ObjectExpectations should_not_equal":{"type":"method","name":"should_not_equal","children":[],"call":[" should not equal "," should not "," should "]}," Spec Expectations ObjectExpectations should_equal":{"type":"method","name":"should_equal","children":[],"call":[" should equal "," should "]}," Hash inspect_for_expectation_not_met_error":{"type":"method","name":"inspect_for_expectation_not_met_error","children":[],"call":[" inspect "]}," Spec Runner Specification clear_current":{"type":"method","name":"clear_current","children":[],"call":[" class send "," class ","Spec Matchers  unregister_callback "]}," Spec Runner Specification set_current":{"type":"method","name":"set_current","children":[],"call":[" class send "," class ","Spec Matchers  description_generated "]}," Spec Runner Specification append_errors":{"type":"method","name":"append_errors","children":[],"call":["errors << "," proc "]}," Spec Runner Specification notify_before_setup":{"type":"method","name":"notify_before_setup","children":[],"call":[" notify_callbacks "," append_errors "," class send "," class "," notify_class_callbacks "]}," Spec Runner Specification teardown_spec":{"type":"method","name":"teardown_spec","children":[],"call":["errors << ","errors empty? "," notify_after_teardown ","execution_context instance_eval "]}," Spec Runner Specification execute_spec":{"type":"method","name":"execute_spec","children":[],"call":["errors << ","execution_context instance_eval "," command "," spec_block "]}," Spec Runner Specification setup_spec":{"type":"method","name":"setup_spec","children":[],"call":["errors << ","errors empty? ","execution_context instance_eval "," notify_before_setup "]}," Spec Mocks MockHandler raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":["@error_generator raise_unexpected_message_args_error "]}," Spec Expectations Should Base >":{"type":"method","name":">","children":[],"call":[" __delegate_method_missing_to_target "]}," Spec Expectations Should Base >=":{"type":"method","name":">=","children":[],"call":[" __delegate_method_missing_to_target "]}," Spec Expectations Should Base =~":{"type":"method","name":"=~","children":[],"call":[" __delegate_method_missing_to_target "]}," Spec Expectations Should Base ==":{"type":"method","name":"==","children":[],"call":[" __delegate_method_missing_to_target "]}," Spec Expectations Should Base <=":{"type":"method","name":"<=","children":[],"call":[" __delegate_method_missing_to_target "]}," Spec Expectations Should Base <":{"type":"method","name":"<","children":[],"call":[" __delegate_method_missing_to_target "]}," Numeric _close_for_rspec?":{"type":"method","name":"_close_for_rspec?","children":[],"call":["(send\n  (self) :-\n  (lvar :other)) abs < ","(send\n  (self) :-\n  (lvar :other)) abs "," - "]}," Numeric should_be_close":{"type":"method","name":"should_be_close","children":[],"call":[" should be _close_for_rspec "," should be "," should "]}," Callback InstanceMethods callbacks":{"type":"method","name":"callbacks","children":[],"call":["CallbackContainer  new "]}," Callback InstanceMethods notify_callbacks":{"type":"method","name":"notify_callbacks","children":[],"call":[" callbacks notify "," callbacks "]}," Callback InstanceMethods unregister_callback":{"type":"method","name":"unregister_callback","children":[],"call":[" callbacks undefine "," callbacks "]}," Callback InstanceMethods register_callback":{"type":"method","name":"register_callback","children":[],"call":[" callbacks define "," callbacks "]}," Callback ModuleMethods define_callback_event":{"type":"method","name":"define_callback_event","children":[],"call":[" module_eval "]}," Callback ModuleMethods callback_events":{"type":"method","name":"callback_events","children":[],"call":[" define_callback_event ","event_names each "]}," Callback CallbackContainer extract_callback":{"type":"method","name":"extract_callback","children":[],"call":["callback respond_to? "]}," Callback CallbackContainer clear":{"type":"method","name":"clear","children":[],"call":["@callback_registry clear "]}," Callback CallbackContainer notify":{"type":"method","name":"notify","children":[],"call":["callback call ","@callback_registry [] collect ","@callback_registry [] "]}," Callback CallbackContainer undefine":{"type":"method","name":"undefine","children":[],"call":["@callback_registry [] delete ","@callback_registry [] "," raise "," extract_callback "]}," Callback CallbackContainer define":{"type":"method","name":"define","children":[],"call":["@callback_registry [] << ","@callback_registry [] "," raise "," extract_callback "]}," Callback CallbackContainer initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","Array  new ","Hash  new "]}," Spec Runner Reporter clear!":{"type":"method","name":"clear!","children":[],"call":[]}," Spec Runner HeckleRunner heckle_module":{"type":"method","name":"heckle_module","children":[],"call":["heckle validate ","@heckle_class new "," context_runner ","klass name ","klass instance_methods each ","klass instance_methods ","classes each ","classes << ","klass name =~ ","ObjectSpace  each_object ","@heckle_class new  validate ","@@heckle_class new _class new "]}," Object copy_instance_variables_from":{"type":"method","name":"copy_instance_variables_from","children":[],"call":[" instance_variable_set ","object instance_variable_get ","instance_variables each ","object instance_variables - ","name to_s ","exclude map ","object instance_variables ","object protected_instance_variables ","object respond_to? ","object instance_variables -  each ","object object instance_variables -  - ","object object instance_variables -  ","object protected_object instance_variables -  "]}," Spec Runner ContextEval ModuleMethods context_teardown_parts":{"type":"method","name":"context_teardown_parts","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods context_setup_parts":{"type":"method","name":"context_setup_parts","children":[],"call":[]}," Spec Runner ContextEval ModuleMethods context_teardown_block":{"type":"method","name":"context_teardown_block","children":[],"call":[" create_block_from_parts "," add_context_superclass_method "," context_teardown_parts dup "," context_teardown_parts "," create_block_from_ context_teardown_parts dup  "," context_teardown_ context_teardown_parts dup  dup "," context_teardown_ context_teardown_parts dup  "]}," Spec Runner ContextEval ModuleMethods context_setup_block":{"type":"method","name":"context_setup_block","children":[],"call":[" create_block_from_parts "," add_context_superclass_method "," context_setup_parts dup "," context_setup_parts "," create_block_from_ context_setup_parts dup  "," context_setup_ context_setup_parts dup  dup "," context_setup_ context_setup_parts dup  "]}," Spec Runner ContextEval ModuleMethods context_teardown":{"type":"method","name":"context_teardown","children":[],"call":[" context_teardown_parts << "," context_teardown_parts "]}," Spec Runner ContextEval ModuleMethods context_setup":{"type":"method","name":"context_setup","children":[],"call":[" context_setup_parts << "," context_setup_parts "]}," Spec Runner Context InstanceMethods run_context_teardown":{"type":"method","name":"run_context_teardown","children":[],"call":["reporter spec_finished ","@once_only_execution_context_instance instance_eval "," context_teardown_block "," execution_context "]}," Spec Runner Context InstanceMethods run_context_setup":{"type":"method","name":"run_context_setup","children":[],"call":["reporter spec_finished ","errors << ","@once_only_execution_context_instance instance_eval "," context_setup_block "," execution_context "," execution_context  instance_eval "]}," Spec Runner Context InstanceMethods context_teardown_block":{"type":"method","name":"context_teardown_block","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods context_setup_block":{"type":"method","name":"context_setup_block","children":[],"call":["@context_eval_module send "]}," Spec Runner Context InstanceMethods context_teardown":{"type":"method","name":"context_teardown","children":[],"call":["@context_eval_module context_teardown "]}," Spec Runner Context InstanceMethods context_setup":{"type":"method","name":"context_setup","children":[],"call":["@context_eval_module context_setup "]}," Spec Expectations message_builder":{"type":"method","name":"message_builder","children":[],"call":["MessageBuilder  new "]}," Spec Expectations build_message":{"type":"method","name":"build_message","children":[],"call":[" message_builder build_message "," message_builder "]}," Spec Expectations Should NegativeItemHandler item_expectation":{"type":"method","name":"item_expectation","children":[],"call":[]}," Spec Expectations Should NegativeItemHandler handle_message":{"type":"method","name":"handle_message","children":[],"call":[" fail_with "," build_message ","@target send ","(send\n  (lvar :args) :collect) join ","arg inspect ","args collect "]}," Spec Expectations Should PositiveItemHandler item_expectation":{"type":"method","name":"item_expectation","children":[],"call":[]}," Spec Expectations Should PositiveItemHandler handle_message":{"type":"method","name":"handle_message","children":[],"call":[" fail_with "," build_message ","@target send ","(send\n  (lvar :args) :collect) join ","arg inspect ","args collect "]}," Spec Expectations Should ItemHandler fail_with":{"type":"method","name":"fail_with","children":[],"call":["Spec Expectations  fail_with "]}," Spec Expectations Should ItemHandler build_message":{"type":"method","name":"build_message","children":[],"call":["(send\n  (lvar :args) :collect) join ","arg inspect ","args collect "," item_expectation ","@target inspect "]}," Spec Expectations Should ItemHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Expectations Should ItemHandler wants_to_handle":{"type":"method","name":"wants_to_handle","children":[],"call":["@target respond_to? "]}," Spec Expectations Should CollectionHandler actual_size_of":{"type":"method","name":"actual_size_of","children":[],"call":["collection size ","collection respond_to? ","collection length "]}," Spec Expectations Should CollectionHandler collection":{"type":"method","name":"collection","children":[],"call":["@target send "]}," Spec Expectations Should CollectionHandler as_specified?":{"type":"method","name":"as_specified?","children":[],"call":[" actual_size_of == "," actual_size_of "," collection "," actual_size_of <= "," actual_size_of >= "]}," Spec Expectations Should CollectionHandler build_message":{"type":"method","name":"build_message","children":[],"call":[" actual_size_of "," collection ","@target inspect "]}," Spec Expectations Should CollectionHandler handle_message":{"type":"method","name":"handle_message","children":[],"call":["Spec Expectations  fail_with "," build_message "," as_specified? "," at_most ","args [] ","sym == "," at_least "]}," Spec Expectations Should CollectionHandler wants_to_handle":{"type":"method","name":"wants_to_handle","children":[],"call":["@target respond_to? "," respond_to? "]}," Spec Expectations Should CollectionHandler method_missing":{"type":"method","name":"method_missing","children":[],"call":[" handle_message ","@target respond_to? "]}," Spec Expectations Should CollectionHandler at_most":{"type":"method","name":"at_most","children":[],"call":["expected_number == "]}," Spec Expectations Should CollectionHandler at_least":{"type":"method","name":"at_least","children":[],"call":["expected_number == "]}," Spec Expectations Should CollectionHandler initialize":{"type":"method","name":"initialize","children":[],"call":["relativity == ","expected == "]}," Spec Expectations Should NotHave init_item_handler":{"type":"method","name":"init_item_handler","children":[],"call":["NegativeItemHandler  new "]}," Spec Expectations Should Have init_item_handler":{"type":"method","name":"init_item_handler","children":[],"call":["PositiveItemHandler  new "]}," Spec Expectations Should Have init_collection_handler":{"type":"method","name":"init_collection_handler","children":[],"call":["CollectionHandler  new "]}," Spec Expectations Should Change message":{"type":"method","name":"message","children":[],"call":["@message nil? "]}," Spec Expectations MessageBuilder build_message":{"type":"method","name":"build_message","children":[],"call":["expected inspect ","actual inspect "]}," Spec Expectations StringExpectations should_not_match":{"type":"method","name":"should_not_match","children":[],"call":[" should not match "," should not "," should "]}," Spec Expectations StringExpectations should_match":{"type":"method","name":"should_match","children":[],"call":[" should match "," should "]}," Spec Expectations ProcExpectations should_not_throw":{"type":"method","name":"should_not_throw","children":[],"call":[" should not throw "," should not "," should "]}," Spec Expectations ProcExpectations should_throw":{"type":"method","name":"should_throw","children":[],"call":[" should throw "," should "]}," Spec Expectations ProcExpectations should_not_raise":{"type":"method","name":"should_not_raise","children":[],"call":[" should not raise "," should not "," should "]}," Spec Expectations ProcExpectations should_raise":{"type":"method","name":"should_raise","children":[],"call":[" should raise "," should "]}," Spec Expectations ProcExpectations should_not_change":{"type":"method","name":"should_not_change","children":[],"call":[" should not change "," should not "," should "]}," Spec Expectations ProcExpectations should_change":{"type":"method","name":"should_change","children":[],"call":[" should change "," should "]}," Spec Expectations NumericExpectations _close_for_rspec?":{"type":"method","name":"_close_for_rspec?","children":[],"call":["(send\n  (self) :-\n  (lvar :other)) abs < ","(send\n  (self) :-\n  (lvar :other)) abs "," - "]}," Spec Expectations NumericExpectations should_be_close":{"type":"method","name":"should_be_close","children":[],"call":[" should be _close_for_rspec "," should be "," should "]}," Spec VERSION build_tag":{"type":"method","name":"build_tag","children":[],"call":[]}," Spec Runner Specification generated_description":{"type":"method","name":"generated_description","children":[],"call":[]}," Spec Runner Specification name":{"type":"method","name":"name","children":[],"call":[" generated_description ","@description == "]}," Spec Runner SpecMatcher spec_regexp":{"type":"method","name":"spec_regexp","children":[],"call":["Regexp  escape "]}," Spec Runner SpecMatcher context_regexp":{"type":"method","name":"context_regexp","children":[],"call":["Regexp  escape "]}," Spec Runner SpecMatcher matches?":{"type":"method","name":"matches?","children":[],"call":["desc =~ "," spec_regexp "," context_regexp "]}," Spec Runner SpecMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter extra_header_content":{"type":"method","name":"extra_header_content","children":[],"call":[]}," Spec Runner ContextRunner spec_description":{"type":"method","name":"spec_description","children":[],"call":["@options spec_name "]}," Spec Runner Context InstanceMethods inherit_context_eval_module_from":{"type":"method","name":"inherit_context_eval_module_from","children":[],"call":["@context_eval_module inherit "]}," Spec Mocks duck_type":{"type":"method","name":"duck_type","children":[],"call":["Spec Mocks DuckTypeArgConstraint  new "]}," Spec Mocks stub":{"type":"method","name":"stub","children":[],"call":["object_stub stub! and_return ","object_stub stub! ","stubs each "," mock "," mock  stub! and_return "," mock  stub! "]}," Spec Mocks mock":{"type":"method","name":"mock","children":[],"call":["Spec Mocks Mock  new "]}," Spec Mocks MockHandler metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Spec Mocks MockHandler munge":{"type":"method","name":"munge","children":[],"call":["(str \"proxied_by_rspec__\") to_sym ","sym to_s "]}," Spec Mocks MockHandler target_responds_to?":{"type":"method","name":"target_responds_to?","children":[],"call":["@target respond_to? ","sym == ","@target send "," munge "]}," Spec Mocks Methods __mock_handler":{"type":"method","name":"__mock_handler","children":[],"call":["MockHandler  new "]}," Spec Mocks Methods method_missing":{"type":"method","name":"method_missing","children":[],"call":["@messages_received << "," __mock_handler instance_eval "," __mock_handler "]}," Spec Mocks Methods __reset_mock":{"type":"method","name":"__reset_mock","children":[],"call":[" __mock_handler reset "," __mock_handler "]}," Spec Mocks Methods __verify":{"type":"method","name":"__verify","children":[],"call":[" __mock_handler verify "," __mock_handler "]}," Spec Matchers Matcher respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["sym to_s [] == ","sym to_s [] ","sym to_s "]}," Spec Matchers generated_description=":{"type":"method","name":"generated_description=","children":[],"call":[" notify_callbacks "]}," Spec Matchers ThrowSymbol extract_sym_from_name_error":{"type":"method","name":"extract_sym_from_name_error","children":[],"call":["(begin\n  (send\n    (send\n      (send\n        (send\n          (send\n            (lvar :error) :message) :split\n          (str \"`\")) :last) :split\n      (str \"'\")) :first)) to_sym ","error message split last split first ","error message split last split ","error message split last ","error message split ","error message "]}," Spec Matchers Have collection_name":{"type":"method","name":"collection_name","children":[],"call":[]}," Spec Expectations MatcherHandlerHelper describe":{"type":"method","name":"describe","children":[],"call":["matcher class name ","matcher class ","matcher description ","matcher respond_to? "]}," deprecated":{"type":"method","name":"deprecated","children":[],"call":["block call ","ENV  [] == ","ENV  [] "]}," Callback InstanceMethods notify_class_callbacks":{"type":"method","name":"notify_class_callbacks","children":[],"call":[" class send "," class "]}," Object metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Spec Runner SpecParser parse_description":{"type":"method","name":"parse_description","children":[],"call":["matches [] ","(str \"^(.*)\\\\s*,\\\\s*['\\\"](.*)['\\\"]$\") match ","str [] ","str =~ "," Spec DSL Description  generate_description "," Spec Example ExampleGroupMethods  description_text ","(str \"^(.*)\\\\s*,\\\\s*['\\\"](.*)['\\\"](,.*)?$\") match ","(str \"^['\\\"](.*)['\\\"](,.*)?$\") match ","(str \"^(.*)\\s*,\\s*['\\\"](.*)['\\\"]$\") match  [] ","(str \"^(.*)\\s*,\\s*['\\\"](.*)['\\\"](,.*)?$\") match  [] ","(str \"^['\\\"](.*)['\\\"](,.*)?$\") match  [] "]}," Spec Runner SpecParser example_at_line":{"type":"method","name":"example_at_line","children":[],"call":[" find_above "]}," Spec Runner SpecParser behaviour_at_line":{"type":"method","name":"behaviour_at_line","children":[],"call":[" find_above "]}," Spec Runner Reporter example_failed":{"type":"method","name":"example_failed","children":[],"call":["STDOUT  flush ","f example_failed ","@failures length ","@formatters each ","@failures << ","Failure  new ","@failure_io puts ","@failure_io nil? ","@behaviour_names last ","@backtrace_tweaker tweak_backtrace "," formatters each "," formatters "," example_groups last description "," example_groups last "," example_groups "," example_groups empty? "," backtrace_tweaker tweak_backtrace "," backtrace_tweaker ","example description ","@example_group description ","@Failure  new s length ","@Failure  new s << ","@Failure  new _io puts ","@Failure  new _io nil? "]}," Spec Runner Reporter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["STDOUT  flush ","@behaviour_names << ","f add_behaviour ","@formatters each "]}," Spec Runner OptionParser create_behaviour_runner":{"type":"method","name":"create_behaviour_runner","children":[],"call":["BehaviourRunner  new ","options runner_type new ","options runner_type ","options generate ","Spec Expectations  differ= ","options differ_class new ","options colour ","options context_lines ","options diff_format ","options differ_class ","options reporter= ","Reporter  new ","options backtrace_tweaker ","options formatters ","formatter dry_run= ","options dry_run ","formatter respond_to? ","formatter colour= ","options formatters each ","options is_a? "," parse ","options create_behaviour_runner ","options behaviour_runner ","options configure "," parse  runner_type new "," parse  runner_type "," parse  generate "," parse  differ_class new "," parse  colour "," parse  context_lines "," parse  diff_format "," parse  differ_class "," parse  reporter= "," parse  backtrace_tweaker "," parse  formatters "," parse  dry_run "," parse  formatters each "," parse  is_a? "," parse  create_behaviour_runner "," parse  behaviour_runner "," parse  configure "]}," Spec Runner Formatter SpecdocFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["@output flush ","@output puts "]}," Spec Runner Formatter RdocFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output print ","@output puts ","example description "]}," Spec Runner Formatter RdocFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@output flush ","@output print ","@output puts ","example description "]}," Spec Runner Formatter RdocFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["@output flush ","@output print ","@output puts "]}," Spec Runner Formatter ProgressBarFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["@output flush ","@output puts "," escape "," current_behaviour_number "," current_behaviour_number == "," h "]}," Spec Runner Formatter HtmlFormatter current_example_number":{"type":"method","name":"current_example_number","children":[],"call":[]}," Spec Runner Formatter HtmlFormatter current_behaviour_number":{"type":"method","name":"current_behaviour_number","children":[],"call":[]}," Spec Runner Formatter FailingExamplesFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":[]}," Spec Runner Formatter FailingBehavioursFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," Spec Runner Formatter FailingBehavioursFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[]}," Spec Runner Formatter FailingBehavioursFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output puts ","@behaviour_name nil? "]}," Spec Runner Formatter FailingBehavioursFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["behaviour_name =~ "]}," Spec Runner Formatter BaseTextFormatter colour=":{"type":"method","name":"colour=","children":[],"call":[" raise "," require ","PLATFORM  =~ "]}," Spec Runner Formatter BaseFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":[]}," Kernel behaviour_runner":{"type":"method","name":"behaviour_runner","children":[],"call":["$behaviour_runner run "," at_exit "," Spec Runner OptionParser  new create_behaviour_runner ","ARGV  dup "," Spec Runner OptionParser  new "," Spec Runner OptionParser  new create_behaviour_runner  run "]}," Kernel register_behaviour":{"type":"method","name":"register_behaviour","children":[],"call":[" behaviour_runner add_behaviour "," behaviour_runner ","Spec DSL Behaviour  add_shared_behaviour ","behaviour shared? "]}," Kernel respond_to":{"type":"method","name":"respond_to","children":[],"call":["Spec Matchers RespondTo  new "]}," Kernel describe":{"type":"method","name":"describe","children":[],"call":[" register_behaviour ","Spec DSL BehaviourFactory  create "," raise ","args empty? ","args last []= "," caller [] "," caller ","args last ","args << ","Hash  === "]}," Spec Runner BehaviourRunner heckle":{"type":"method","name":"heckle","children":[],"call":["heckle_runner heckle_with ","behaviour_runner instance_variable_set "," class new "," class ","@options heckle_runner= ","@options heckle_runner ","@options heckle_runner  heckle_with "," class new  instance_variable_set ","@options @options heckle_runner = ","@options @options heckle_runner  "]}," Spec Runner BehaviourRunner specified_examples":{"type":"method","name":"specified_examples","children":[],"call":["@options examples "]}," Spec Runner BehaviourRunner load_specs":{"type":"method","name":"load_specs","children":[],"call":[" load ","paths each "," require "]}," Spec Runner BehaviourRunner find_paths":{"type":"method","name":"find_paths","children":[],"call":[" raise ","result << ","File  file? ","Dir  [] ","File  directory? ","paths each "]}," Spec Runner BehaviourRunner sort_paths":{"type":"method","name":"sort_paths","children":[],"call":["paths sort ","sorter nil? "," sorter ","paths sort  sort "," sorter  nil? ","  sorter  "]}," Spec Runner BehaviourRunner sorter":{"type":"method","name":"sorter","children":[],"call":["FILE_SORTERS  [] ","@options loadby "]}," Spec Runner BehaviourRunner number_of_examples":{"type":"method","name":"number_of_examples","children":[],"call":["sum + ","behaviour number_of_examples ","@behaviours inject "]}," Spec Runner BehaviourRunner run_behaviours":{"type":"method","name":"run_behaviours","children":[],"call":["behaviour run ","@options reverse ","@options dry_run ","@options reporter ","behaviours each ","@options timeout ","@behaviours each "]}," Spec Runner BehaviourRunner run":{"type":"method","name":"run","children":[],"call":[" exit ","failure_count == "," heckle ","@options heckle_runner nil? ! ","@options heckle_runner nil? ","@options heckle_runner ","@options reporter dump ","@options reporter ","@options reporter end "," run_behaviours ","@behaviours reverse ","@options reverse ","@options reporter start "," number_of_examples "," load_specs "," sort_paths "," find_paths ","paths nil? "," report_dump "," report_end "," prepare! ","@options reporter dump  == "," report_dump  == "," run_@behaviours reverse  ","@@behaviours reverse  reverse "," sort_ find_paths  "," find_ find_paths  "," find_paths  nil? "]}," Spec Runner BehaviourRunner add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":["@behaviours << ","behaviour number_of_examples == ","behaviour number_of_examples ","behaviour retain_examples_matching! "," specified_examples "," specified_examples empty? "," specified_examples nil? ","behaviour shared? ! ","behaviour shared? ","behaviour number_of_examples != "," specified_examples empty? ! "," specified_examples nil? ! "]}," Spec Runner BehaviourRunner initialize":{"type":"method","name":"initialize","children":[],"call":["Kernel  warn "]}," Spec Mocks SpecMethods stub":{"type":"method","name":"stub","children":[],"call":["object_stub stub! and_return ","object_stub stub! ","stubs each "," mock "," mock  stub! and_return "," mock  stub! "]}," Spec Mocks SpecMethods mock":{"type":"method","name":"mock","children":[],"call":["Spec Mocks Mock  new "]}," Spec Mocks Proxy metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Spec Mocks Proxy metaclass_eval":{"type":"method","name":"metaclass_eval","children":[],"call":[" metaclass class_eval "," metaclass "]}," Spec Matchers ModuleMethods description_generated_callbacks":{"type":"method","name":"description_generated_callbacks","children":[],"call":[]}," Spec Matchers ModuleMethods generated_description=":{"type":"method","name":"generated_description=","children":[],"call":["callback call "," description_generated_callbacks each "," description_generated_callbacks "]}," Spec Matchers ModuleMethods unregister_description_generated":{"type":"method","name":"unregister_description_generated","children":[],"call":[" description_generated_callbacks delete "," description_generated_callbacks "]}," Spec Matchers ModuleMethods description_generated":{"type":"method","name":"description_generated","children":[],"call":[" description_generated_callbacks << "," description_generated_callbacks "]}," Spec DSL ExampleShouldRaiseHandler handle":{"type":"method","name":"handle","children":[],"call":["errors delete ","errors insert ","Spec Expectations ExpectationNotMetError  new "," build_message ","errors [] ","error_to_remove nil? "," error_matches? ","errors detect ","errors << ","errors empty? "]}," Spec DSL ExampleShouldRaiseHandler error_matches?":{"type":"method","name":"error_matches?","children":[],"call":["error message == ","error message ","error message =~ ","@expected_error_message is_a? ","@expected_error_message nil? ","error kind_of? "]}," Spec DSL ExampleShouldRaiseHandler build_message":{"type":"method","name":"build_message","children":[],"call":["message << ","exception inspect ","@expected_error_class new inspect ","@expected_error_class new ","@expected_error_message to_s ","@expected_error_class to_s ","@expected_error_message nil? "]}," Spec DSL ExampleShouldRaiseHandler determine_error_message":{"type":"method","name":"determine_error_message","children":[],"call":["candidate [] ","candidate is_a? ","opts [] ","opts []  [] ","opts []  is_a? "]}," Spec DSL ExampleShouldRaiseHandler determine_error_class":{"type":"method","name":"determine_error_class","children":[],"call":["candidate [] ","candidate is_a? ","opts [] ","opts []  [] ","opts []  is_a? "]}," Spec DSL ExampleShouldRaiseHandler initialize":{"type":"method","name":"initialize","children":[],"call":[" determine_error_message "," determine_error_class "]}," Spec DSL ExampleMatcher example_regexp":{"type":"method","name":"example_regexp","children":[],"call":["Regexp  escape "]}," Spec DSL ExampleMatcher context_regexp":{"type":"method","name":"context_regexp","children":[],"call":["Regexp  escape ","@context_desc split last ","@context_desc split "]}," Spec DSL ExampleMatcher matches?":{"type":"method","name":"matches?","children":[],"call":["specified_example =~ "," example_regexp "," context_regexp ","specified_examples each "," matches_example_not_considering_modules? "," matches_literal_example? "]}," Spec DSL ExampleMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec DSL Example failure_location":{"type":"method","name":"failure_location","children":[],"call":[" description "]}," Spec DSL Example append_errors":{"type":"method","name":"append_errors","children":[],"call":["errors << "," proc "]}," Spec DSL Example teardown_mocks":{"type":"method","name":"teardown_mocks","children":[],"call":["execution_context teardown_mocks_for_rspec ","execution_context respond_to? "]}," Spec DSL Example verify_mocks":{"type":"method","name":"verify_mocks","children":[],"call":["execution_context verify_mocks_for_rspec ","execution_context respond_to? "]}," Spec DSL Example setup_mocks":{"type":"method","name":"setup_mocks","children":[],"call":["execution_context setup_mocks_for_rspec ","execution_context respond_to? "]}," Spec DSL Example teardown_example":{"type":"method","name":"teardown_example","children":[],"call":["errors << ","errors empty? ","execution_context instance_eval ","builder proc "," append_errors ","CompositeProcBuilder  new ","Spec Matchers  unregister_description_generated "," teardown_mocks "," verify_mocks ","CompositeProcBuilder  new  proc "]}," Spec DSL Example run_example":{"type":"method","name":"run_example","children":[],"call":["errors << ","execution_context instance_eval "]}," Spec DSL Example setup_example":{"type":"method","name":"setup_example","children":[],"call":["errors << ","errors empty? ","execution_context instance_eval ","builder proc "," append_errors ","CompositeProcBuilder  new ","Spec Matchers  description_generated "," setup_mocks ","CompositeProcBuilder  new  proc "]}," Spec DSL Example generated_description":{"type":"method","name":"generated_description","children":[],"call":[]}," Spec DSL Example description":{"type":"method","name":"description","children":[],"call":[" generated_description ","@description == "]}," Spec DSL Example matches?":{"type":"method","name":"matches?","children":[],"call":["matcher matches? ","matcher example_desc= "," description "]}," Spec DSL Example run":{"type":"method","name":"run","children":[],"call":["reporter example_finished ","errors first "," description ","ExampleShouldRaiseHandler  new handle ","ExampleShouldRaiseHandler  new "," failure_location "," teardown_example "," run_example "," setup_example ","Timeout  timeout ","reporter example_started ","@example_block nil? "," after_example "," before_example "," failure_ failure_location  "]}," Spec DSL Example initialize":{"type":"method","name":"initialize","children":[],"call":[" lambda "," caller [] "," caller "]}," Spec DSL Description ==":{"type":"method","name":"==","children":[],"call":["@description == ","value description "]}," Spec DSL Description to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spec DSL Description []=":{"type":"method","name":"[]=","children":[],"call":["@options []= "]}," Spec DSL Description []":{"type":"method","name":"[]","children":[],"call":["@options [] "]}," Spec DSL Description initialize":{"type":"method","name":"initialize","children":[],"call":["@description << ","args shift to_s ","args shift ","args empty? ","args first ","args first is_a? "," args_and_options ","suffix =~ "," class generate_description "," class "," init_description "," init_described_type "," init_behaviour_type "," init_spec_path ","args shift to_s  << "," class generate_description  << ","args shift to_s  =~ "]}," Spec DSL Configuration mock_framework_path":{"type":"method","name":"mock_framework_path","children":[],"call":["File  expand_path ","File  join ","File  dirname "]}," Spec DSL Configuration predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":[]}," Spec DSL Configuration included_modules":{"type":"method","name":"included_modules","children":[],"call":[]}," Spec DSL Configuration include":{"type":"method","name":"include","children":[],"call":[" included_modules << "," included_modules "," included_modules push ","@modules [] ","required_behaviour_type to_sym ","required_behaviour_type nil? ","options [] "," args_and_options ","args << ","Hash  === ","args last ","required_behaviour_type to_sym  to_sym ","options []  to_sym ","required_behaviour_type to_sym  nil? ","options []  nil? "]}," Spec DSL Configuration mock_framework":{"type":"method","name":"mock_framework","children":[],"call":[" mock_framework_path "]}," Spec DSL Configuration mock_with":{"type":"method","name":"mock_with","children":[],"call":[" mock_framework_path ","mock_framework to_s "]}," Spec DSL CompositeProcBuilder proc":{"type":"method","name":"proc","children":[],"call":["error_handler call "," raise "," instance_eval ","part bind call ","part bind ","part is_a? ","parts collect ","Proc  new ","errors first ","errors empty? ","errors << "]}," Spec DSL CompositeProcBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[" push "]}," Spec DSL BehaviourFactory behaviour_type":{"type":"method","name":"behaviour_type","children":[],"call":["opts [] ","args last ","Hash  === ","args last  [] "]}," Spec DSL BehaviourFactory create":{"type":"method","name":"create","children":[],"call":["BEHAVIOUR_CLASSES  [] new ","BEHAVIOUR_CLASSES  [] "," behaviour_type ","1 to_sym ","opts [] =~ ","BEHAVIOUR_CLASSES  keys join ","BEHAVIOUR_CLASSES  keys ","opts [] ","args last ","Hash  === ","2 to_sym "," 1 to_sym  "," opts []  "," 2 to_sym  ","args last  [] =~ ","args last  [] "]}," Spec DSL BehaviourFactory remove_behaviour_class":{"type":"method","name":"remove_behaviour_class","children":[],"call":["BEHAVIOUR_CLASSES  delete "]}," Spec DSL BehaviourFactory add_behaviour_class":{"type":"method","name":"add_behaviour_class","children":[],"call":["BEHAVIOUR_CLASSES  []= "]}," Spec DSL BehaviourEval InstanceMethods violated":{"type":"method","name":"violated","children":[],"call":[" raise ","Spec Expectations ExpectationNotMetError  new "]}," Spec DSL BehaviourEval InstanceMethods initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec DSL BehaviourEval ModuleMethods examples":{"type":"method","name":"examples","children":[],"call":[]}," Spec DSL BehaviourEval ModuleMethods included_modules":{"type":"method","name":"included_modules","children":[],"call":[]}," Spec DSL BehaviourEval ModuleMethods behaviour_superclass":{"type":"method","name":"behaviour_superclass","children":[],"call":[]}," Spec DSL BehaviourEval ModuleMethods derive_execution_context_class_from_behaviour_superclass":{"type":"method","name":"derive_execution_context_class_from_behaviour_superclass","children":[],"call":["Class  new "," behaviour_superclass "," behaviour_superclass spec_inherited "," behaviour_superclass respond_to? "]}," Spec DSL BehaviourEval ModuleMethods execution_context_class":{"type":"method","name":"execution_context_class","children":[],"call":[" derive_execution_context_class_from_behaviour_superclass "]}," Spec DSL BehaviourEval ModuleMethods add_superclass_method":{"type":"method","name":"add_superclass_method","children":[],"call":["parts << "," behaviour_superclass instance_method "," behaviour_superclass "," behaviour_superclass instance_methods include? "," behaviour_superclass instance_methods "]}," Spec DSL BehaviourEval ModuleMethods after_each_proc":{"type":"method","name":"after_each_proc","children":[],"call":["CompositeProcBuilder  new proc ","CompositeProcBuilder  new ","parts push ","Behaviour  after_each_parts "," add_superclass_method "," after_each_parts ","behaviour_type nil? "]}," Spec DSL BehaviourEval ModuleMethods before_each_proc":{"type":"method","name":"before_each_proc","children":[],"call":["CompositeProcBuilder  new proc ","CompositeProcBuilder  new ","parts push "," before_each_parts ","Behaviour  before_each_parts "," add_superclass_method ","behaviour_type nil? "]}," Spec DSL BehaviourEval ModuleMethods after_all_proc":{"type":"method","name":"after_all_proc","children":[],"call":["CompositeProcBuilder  new proc ","CompositeProcBuilder  new ","parts push ","Behaviour  after_all_parts "," after_all_parts ","behaviour_type nil? "]}," Spec DSL BehaviourEval ModuleMethods before_all_proc":{"type":"method","name":"before_all_proc","children":[],"call":["CompositeProcBuilder  new proc ","CompositeProcBuilder  new ","parts push "," before_all_parts ","Behaviour  before_all_parts ","behaviour_type nil? "]}," Spec DSL BehaviourEval ModuleMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":[" execution_context_class send "," execution_context_class "," behaviour_superclass respond_to? "," behaviour_superclass "]}," Spec DSL BehaviourEval ModuleMethods methods":{"type":"method","name":"methods","children":[],"call":[" behaviour_superclass methods "," behaviour_superclass "]}," Spec DSL BehaviourEval ModuleMethods specify":{"type":"method","name":"specify","children":[],"call":[" it "]}," Spec DSL BehaviourEval ModuleMethods it":{"type":"method","name":"it","children":[],"call":[" examples << ","Example  new "," examples "]}," Spec DSL BehaviourEval ModuleMethods define_predicate_matchers":{"type":"method","name":"define_predicate_matchers","children":[],"call":[" eval ","method_on_object to_s gsub ","method_on_object to_s "," define_method ","hash each_pair "," define_predicate_matchers ","Spec Runner  configuration predicate_matchers ","Spec Runner  configuration "," predicate_matchers ","hash nil? "]}," Spec DSL BehaviourEval ModuleMethods predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":[]}," Spec DSL BehaviourEval ModuleMethods copy_to":{"type":"method","name":"copy_to","children":[],"call":["eval_module included_modules << ","eval_module included_modules "," included_modules each "," included_modules ","eval_module after_all_parts << ","eval_module after_all_parts "," after_all_parts each "," after_all_parts ","eval_module before_all_parts << ","eval_module before_all_parts "," before_all_parts each "," before_all_parts ","eval_module after_each_parts << ","eval_module after_each_parts "," after_each_parts each "," after_each_parts ","eval_module before_each_parts << ","eval_module before_each_parts "," before_each_parts each "," before_each_parts ","eval_module examples << ","eval_module examples "," examples each "," examples "]}," Spec DSL BehaviourEval ModuleMethods it_should_behave_like":{"type":"method","name":"it_should_behave_like","children":[],"call":["behaviour copy_to "," raise ","RuntimeError  new ","behaviour nil? ","@behaviour class find_shared_behaviour ","@behaviour class ","@behaviour class find_shared_behaviour  copy_to ","@behaviour class find_shared_behaviour  nil? ","@@behaviour class find_shared_behaviour  class find_shared_@behaviour class find_shared_behaviour  ","@@behaviour class find_shared_behaviour  class "]}," Spec DSL BehaviourEval ModuleMethods include":{"type":"method","name":"include","children":[],"call":["mod send "," included_modules << "," included_modules ","mods each "]}," Spec DSL BehaviourEval ModuleMethods inherit":{"type":"method","name":"inherit","children":[],"call":[" derive_execution_context_class_from_behaviour_superclass "," raise ","ArgumentError  new ","@behaviour shared? "]}," Spec DSL BehaviourCallbacks after_each_parts":{"type":"method","name":"after_each_parts","children":[],"call":["@after_each_parts [] "]}," Spec DSL BehaviourCallbacks before_each_parts":{"type":"method","name":"before_each_parts","children":[],"call":["@before_each_parts [] "]}," Spec DSL BehaviourCallbacks after_all_parts":{"type":"method","name":"after_all_parts","children":[],"call":["@after_all_parts [] "]}," Spec DSL BehaviourCallbacks before_all_parts":{"type":"method","name":"before_all_parts","children":[],"call":["@before_all_parts [] "]}," Spec DSL BehaviourCallbacks teardown":{"type":"method","name":"teardown","children":[],"call":[" after "]}," Spec DSL BehaviourCallbacks setup":{"type":"method","name":"setup","children":[],"call":[" before "]}," Spec DSL BehaviourCallbacks after":{"type":"method","name":"after","children":[],"call":[" after_all_parts unshift "," after_all_parts "," after_each_parts unshift "," after_each_parts "]}," Spec DSL BehaviourCallbacks before":{"type":"method","name":"before","children":[],"call":[" before_all_parts << "," before_all_parts "," before_each_parts << "," before_each_parts "]}," Spec DSL Behaviour described_type":{"type":"method","name":"described_type","children":[],"call":["@description described_type "]}," Spec DSL Behaviour description":{"type":"method","name":"description","children":[],"call":["@description to_s "]}," Spec DSL Behaviour plugin_mock_framework":{"type":"method","name":"plugin_mock_framework","children":[],"call":[" include "," require ","Spec Runner  configuration mock_framework ","Spec Runner  configuration ","Spec Runner  configuration Spec Runner  configuration mock_framework  "]}," Spec DSL Behaviour run_after_all":{"type":"method","name":"run_after_all","children":[],"call":["reporter example_finished ","@before_and_after_all_context_instance instance_eval "," after_all_proc "," execution_context "," behaviour_type ","Example  new "]}," Spec DSL Behaviour run_before_all":{"type":"method","name":"run_before_all","children":[],"call":["reporter example_finished ","errors << ","@before_and_after_all_context_instance instance_eval "," before_all_proc "," execution_context "," behaviour_type ","Example  new "," execution_context  instance_eval "]}," Spec DSL Behaviour execution_context":{"type":"method","name":"execution_context","children":[],"call":[" execution_context_class new "," execution_context_class "]}," Spec DSL Behaviour weave_in_included_modules":{"type":"method","name":"weave_in_included_modules","children":[],"call":[" include ","mods each ","Spec Runner  configuration included_modules each ","Spec Runner  configuration included_modules ","Spec Runner  configuration "," execution_context_class class_eval "," execution_context_class "," included_modules ","mods flatten each ","mods flatten ","mods << ","Spec Runner  configuration modules_for "," behaviour_type "," included_modules dup "," included_modules  each "," included_modules  flatten each "," included_modules  flatten "," included_modules  << "]}," Spec DSL Behaviour prepare_execution_context_class":{"type":"method","name":"prepare_execution_context_class","children":[],"call":[" execution_context_class "," define_predicate_matchers "," weave_in_included_modules "," plugin_mock_framework "]}," Spec DSL Behaviour method_missing":{"type":"method","name":"method_missing","children":[],"call":["@eval_module send "]}," Spec DSL Behaviour methods":{"type":"method","name":"methods","children":[],"call":["@eval_module methods "]}," Spec DSL Behaviour retain_examples_matching!":{"type":"method","name":"retain_examples_matching!","children":[],"call":["example matches? ! ","example matches? "," examples reject! "," examples ","ExampleMatcher  new "," description ","specified_examples index "]}," Spec DSL Behaviour shared?":{"type":"method","name":"shared?","children":[],"call":["@description [] "]}," Spec DSL Behaviour matches?":{"type":"method","name":"matches?","children":[],"call":["example matches? "," examples each "," examples ","ExampleMatcher  new "," description "]}," Spec DSL Behaviour number_of_examples":{"type":"method","name":"number_of_examples","children":[],"call":[" examples length "," examples "]}," Spec DSL Behaviour run":{"type":"method","name":"run","children":[],"call":[" run_after_all ","@before_and_after_all_context_instance copy_instance_variables_from "," after_all_proc nil? "," after_all_proc ","example run "," after_each_proc "," before_each_proc ","example_execution_context copy_instance_variables_from "," before_all_proc nil? "," before_all_proc "," execution_context ","specs each ","errors empty? "," examples "," examples reverse "," run_before_all "," prepare_execution_context_class ","reporter add_behaviour "," description "," shared? "," raise "," behaviour_type ","exs each ","before_all_errors empty? "," execution_context  copy_instance_variables_from "," examples  each "," examples reverse  each "," run_before_all  empty? ","before_all_ run_before_all  empty? "]}," Spec DSL Behaviour before_eval":{"type":"method","name":"before_eval","children":[],"call":[]}," Spec DSL Behaviour eval_behaviour":{"type":"method","name":"eval_behaviour","children":[],"call":["@eval_module class_eval "]}," Spec DSL Behaviour init_eval_module":{"type":"method","name":"init_eval_module","children":[],"call":["@eval_module description= ","@eval_module behaviour= ","@eval_module include ","@eval_module extend ","EvalModule  new "," described_type "," described_type class == "," described_type class ","EvalModule  new  description= ","EvalModule  new  behaviour= ","EvalModule  new  include ","EvalModule  new  extend "]}," Spec DSL Behaviour init_description":{"type":"method","name":"init_description","children":[],"call":["Description  new ","args last []= "," class ","args last ","args << ","Hash  === "," class == "]}," Spec DSL Behaviour initialize":{"type":"method","name":"initialize","children":[],"call":[" eval_behaviour "," before_eval "," init_eval_module "," init_description "]}," Spec DSL Behaviour shared_behaviours":{"type":"method","name":"shared_behaviours","children":[],"call":[]}," Spec DSL Behaviour find_shared_behaviour":{"type":"method","name":"find_shared_behaviour","children":[],"call":["b description == ","b description "," shared_behaviours find "," shared_behaviours "]}," Spec DSL Behaviour add_shared_behaviour":{"type":"method","name":"add_shared_behaviour","children":[],"call":[" shared_behaviours << "," shared_behaviours "," raise ","ArgumentError  new ","behaviour description "," find_shared_behaviour ","behaviour equal? ","behaviour description [] == ","found_behaviour description [] ","found_behaviour description ","behaviour description [] ","File  expand_path == ","File  expand_path "," find_shared_behaviour  description [] "," find_shared_behaviour  description "]}," Spec Runner Options parse_runner":{"type":"method","name":"parse_runner","children":[],"call":[" exit ","out_stream == ","error_stream puts "," eval "]}," Spec Runner Options parse_generate_options":{"type":"method","name":"parse_generate_options","children":[],"call":["out_stream puts ","io puts ","args_copy join ","File  open ","args_copy delete_at ","args_copy index "]}," Spec Runner Options parse_heckle":{"type":"method","name":"parse_heckle","children":[],"call":["HeckleRunner  new "," require ","PLATFORM  == ","p =~ ","(regexp\n  (str \"mswin\")\n  (regopt)) detect "]}," Spec Runner Options parse_require":{"type":"method","name":"parse_require","children":[],"call":[" require ","req split each ","req split "]}," Spec Runner Options parse_line":{"type":"method","name":"parse_line","children":[],"call":["line_number to_i "]}," Spec Runner Options create_behaviour_runner":{"type":"method","name":"create_behaviour_runner","children":[],"call":["BehaviourRunner  new ","@runner_type new ","Spec Expectations  differ= ","@differ_class new ","Reporter  new ","formatter dry_run= ","formatter respond_to? ","formatter colour= ","@formatters each ","runner_type new "," load_class "," split_at_colon ","@ load_class  new "," load_class  new "]}," Spec DSL BehaviourCallbacks append_after":{"type":"method","name":"append_after","children":[],"call":[" after_all_parts << "," after_all_parts "," after_each_parts << "," after_each_parts "," add "," scope_and_options "]}," Spec DSL BehaviourCallbacks prepend_after":{"type":"method","name":"prepend_after","children":[],"call":[" after_all_parts unshift "," after_all_parts "," after_each_parts unshift "," after_each_parts "," add "," scope_and_options "]}," Spec DSL BehaviourCallbacks append_before":{"type":"method","name":"append_before","children":[],"call":[" before_all_parts << "," before_all_parts "," before_each_parts << "," before_each_parts "," add "," scope_and_options "]}," Spec DSL BehaviourCallbacks prepend_before":{"type":"method","name":"prepend_before","children":[],"call":[" before_all_parts unshift "," before_all_parts "," before_each_parts unshift "," before_each_parts "," add "," scope_and_options "]}," Spec Runner Reporter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":["f example_not_implemented ","@formatters each "]}," Spec Runner Formatter SpecdocFormatter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":["@output flush ","@output puts "," yellow "]}," Spec Runner Formatter RdocFormatter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":["@output puts "]}," Spec Runner Formatter ProgressBarFormatter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":["@output flush ","@output print "," yellow "]}," Spec Runner Formatter HtmlFormatter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":["@output flush ","@output puts "," escape "," move_progress "," current_behaviour_number "]}," Spec Runner Formatter BaseFormatter example_not_implemented":{"type":"method","name":"example_not_implemented","children":[],"call":[]}," Spec DSL Description ClassMethods generate_description":{"type":"method","name":"generate_description","children":[],"call":["description << ","suffix =~ ","args shift to_s ","args shift ","args empty? ","args shift to_s  << ","args shift to_s  =~ "]}," Spec DSL Configuration append_after":{"type":"method","name":"append_after","children":[],"call":["Behaviour  append_after "]}," Spec DSL Configuration prepend_after":{"type":"method","name":"prepend_after","children":[],"call":["Behaviour  prepend_after "]}," Spec DSL Configuration append_before":{"type":"method","name":"append_before","children":[],"call":["Behaviour  append_before "]}," Spec DSL Configuration prepend_before":{"type":"method","name":"prepend_before","children":[],"call":["Behaviour  prepend_before "]}," Spec DSL BehaviourCallbacks clear_before_and_after!":{"type":"method","name":"clear_before_and_after!","children":[],"call":[]}," Spec DSL BehaviourCallbacks add":{"type":"method","name":"add","children":[],"call":[" __send__ __send__ "," __send__ ","options [] "]}," Spec DSL BehaviourCallbacks scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":["args [] "," args_and_options "]}," Spec DSL Behaviour behaviour_type":{"type":"method","name":"behaviour_type","children":[],"call":["@description [] "]}," Spec DSL Behaviour include":{"type":"method","name":"include","children":[],"call":["@eval_module include ","required_behaviour_type to_sym == "," behaviour_type to_sym "," behaviour_type ","required_behaviour_type to_sym ","required_behaviour_type nil? ","options [] "," args_and_options ","args << ","Hash  === ","args last ","options []  to_sym == ","options []  to_sym ","options []  nil? "]}," Spec DSL BehaviourEval InstanceMethods inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Rspec handle_results":{"type":"method","name":"handle_results","children":[],"call":["@files_to_test empty? "," hook "," consolidate_failures ","results scan "," failed_results "," consolidate_failures  empty? "," results scan _results "]}," Rspec tests_for_file":{"type":"method","name":"tests_for_file","children":[],"call":["@files has_key? "," select "]}," Spec DSL ExampleMatcher context_regexp_not_considering_modules":{"type":"method","name":"context_regexp_not_considering_modules","children":[],"call":["Regexp  escape ","@behaviour_desc split last ","@behaviour_desc split "]}," Spec DSL ExampleMatcher matches_example_not_considering_modules?":{"type":"method","name":"matches_example_not_considering_modules?","children":[],"call":["specified_example =~ "," example_regexp "," context_regexp_not_considering_modules "]}," Spec DSL ExampleMatcher matches_literal_example?":{"type":"method","name":"matches_literal_example?","children":[],"call":["specified_example =~ "," example_regexp "," context_regexp "]}," Spec DSL Description parse_behaviour_type":{"type":"method","name":"parse_behaviour_type","children":[],"call":["behaviour_class to_s split reverse [] gsub! downcase to_sym ","behaviour_class to_s split reverse [] gsub! downcase ","behaviour_class to_s split reverse [] gsub! ","behaviour_class to_s split reverse [] ","behaviour_class to_s split reverse ","behaviour_class to_s split ","behaviour_class to_s "]}," Spec DSL Description init_described_type":{"type":"method","name":"init_described_type","children":[],"call":["args first ","args first is_a? "]}," Spec DSL Description init_description":{"type":"method","name":"init_description","children":[],"call":[" class generate_description "," class "]}," Spec DSL Description init_behaviour_type":{"type":"method","name":"init_behaviour_type","children":[],"call":["options []= "," parse_behaviour_type ","@options [] ","options [] ancestors include? ","options [] ancestors ","options [] "]}," Spec Runner Options split_at_colon":{"type":"method","name":"split_at_colon","children":[],"call":[" raise ","s inspect ","2 == ","s =~ "]}," Spec Runner Options configure_differ":{"type":"method","name":"configure_differ","children":[],"call":["Spec Expectations  differ= ","@differ_class new "]}," Spec Runner Options create_reporter":{"type":"method","name":"create_reporter","children":[],"call":["Reporter  new "]}," Spec Runner Options configure_formatters":{"type":"method","name":"configure_formatters","children":[],"call":["formatter dry_run= ","formatter respond_to? ","formatter colour= ","@formatters each "]}," Spec Runner Options configure":{"type":"method","name":"configure","children":[],"call":[" create_behaviour_runner "," configure_differ "," create_reporter "," configure_formatters "]}," Spec Runner Formatter RdocFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@output puts "]}," Spec Runner BehaviourRunner set_sequence_numbers":{"type":"method","name":"set_sequence_numbers","children":[],"call":["behaviour set_sequence_numbers ","@options reverse ","@behaviours each ","behaviour set_sequence_behaviour set_sequence_numbers s "]}," Spec Runner BehaviourRunner prepare!":{"type":"method","name":"prepare!","children":[],"call":[" set_sequence_numbers ","@behaviours reverse! ","@options reverse ","@options reporter start "," number_of_examples ","@options reporter "," load_specs "," sort_paths "," find_paths ","paths nil? "," sort_ find_paths  "," find_ find_paths  "," find_paths  nil? "]}," Spec Runner BehaviourRunner report_dump":{"type":"method","name":"report_dump","children":[],"call":["@options reporter dump ","@options reporter "]}," Spec Runner BehaviourRunner report_end":{"type":"method","name":"report_end","children":[],"call":["@options reporter end ","@options reporter "]}," Spec DSL Example after_example":{"type":"method","name":"after_example","children":[],"call":["errors << ","errors empty? ","execution_context instance_eval ","builder proc "," append_errors ","CompositeProcBuilder  new ","Spec Matchers  unregister_description_generated "," teardown_mocks "," verify_mocks ","CompositeProcBuilder  new  proc "]}," Spec DSL Example before_example":{"type":"method","name":"before_example","children":[],"call":["errors << ","errors empty? ","execution_context instance_eval ","builder proc "," append_errors ","CompositeProcBuilder  new ","Spec Matchers  description_generated "," setup_mocks ","CompositeProcBuilder  new  proc "]}," Spec DSL Example to_s":{"type":"method","name":"to_s","children":[],"call":[" description "]}," Spec DSL Description init_spec_path":{"type":"method","name":"init_spec_path","children":[],"call":["options []= ","File  expand_path ","@options [] ","options has_key? "]}," Spec DSL Configuration exclude":{"type":"method","name":"exclude","children":[],"call":["mods delete ","modules each ","@modules each "]}," Spec DSL Configuration modules_for":{"type":"method","name":"modules_for","children":[],"call":["modules uniq compact ","modules uniq ","modules << ","@modules [] ","required_behaviour_type to_sym ","required_behaviour_type nil? "]}," Spec DSL BehaviourEval InstanceMethods pending":{"type":"method","name":"pending","children":[],"call":[" raise ","Spec DSL ExamplePendingError  new ","Spec DSL PendingFixedError  new "," block_given? "]}," Spec DSL BehaviourCallbacks remove_after":{"type":"method","name":"remove_after","children":[],"call":[" after_each_parts delete "," after_each_parts "]}," Spec DSL Behaviour set_sequence_numbers":{"type":"method","name":"set_sequence_numbers","children":[],"call":["example number= ","exs each "," examples "," examples reverse "," examples  each "," examples reverse  each "]}," Rspec failed_results":{"type":"method","name":"failed_results","children":[],"call":["results scan "]}," Spec Story Step assign_expression":{"type":"method","name":"assign_expression","children":[],"call":["Regexp  new ","expression gsub! ","expression =~ ","String  === ","name dup ","string_or_regexp source ","Regexp  === ","string_or_regexp dup ","name dup  gsub! ","string_or_regexp source  gsub! ","string_or_regexp dup  gsub! ","name dup  =~ ","string_or_regexp source  =~ ","string_or_regexp dup  =~ "]}," Spec Runner SpecParser example_group_at_line":{"type":"method","name":"example_group_at_line","children":[],"call":[" find_above "]}," Spec Runner OptionParser stderr?":{"type":"method","name":"stderr?","children":[],"call":["@error_stream == "]}," Spec Runner Formatter HtmlFormatter current_example_group_number":{"type":"method","name":"current_example_group_number","children":[],"call":[]}," Spec Runner Formatter FailingExampleGroupsFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":["example_group description_parts "]}," Spec Matchers ModuleMethods capture_generated_description":{"type":"method","name":"capture_generated_description","children":[],"call":[" clear_generated_description "," generated_description "," clear_generated_ generated_description  "," generated_ generated_description  "]}," Spec Extensions Main shared_examples_for":{"type":"method","name":"shared_examples_for","children":[],"call":[" describe "]}," Spec spec_command?":{"type":"method","name":"spec_command?","children":[],"call":["$0 split last == ","$0 split last ","$0 split "]}," Spec Runner use":{"type":"method","name":"use","children":[],"call":[]}," Spec Runner options":{"type":"method","name":"options","children":[],"call":["parser options ","parser order! "," Spec Runner OptionParser  new "," Spec Runner OptionParser  new  options "," Spec Runner OptionParser  new  order! "]}," Spec Runner Reporter formatter_uses_deprecated_example_pending_method?":{"type":"method","name":"formatter_uses_deprecated_example_pending_method?","children":[],"call":["formatter method arity == ","formatter method arity ","formatter method "]}," Spec Runner Formatter Story ProgressBarFormatter scenario_ended":{"type":"method","name":"scenario_ended","children":[],"call":["@output flush ","@output print "," green "," yellow "," red "]}," Spec Runner Formatter Story ProgressBarFormatter run_ended":{"type":"method","name":"run_ended","children":[],"call":["@output puts ","Finished in %f seconds % ","Time  now - ","Time  now "]}," Spec Runner Formatter Story ProgressBarFormatter run_started":{"type":"method","name":"run_started","children":[],"call":["Time  now "]}," Spec Runner Formatter Story ProgressBarFormatter story_ended":{"type":"method","name":"story_ended","children":[],"call":[]}," Spec Runner Formatter Story ProgressBarFormatter story_started":{"type":"method","name":"story_started","children":[],"call":[]}," Spec Mocks ExampleMethods allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":["Proxy  allow_message_expectations_on_nil "]}," Spec Mocks Proxy reset_nil_expectations_warning":{"type":"method","name":"reset_nil_expectations_warning","children":[],"call":[" proxy_for_nil_class? "]}," Spec Mocks Proxy proxy_for_nil_class?":{"type":"method","name":"proxy_for_nil_class?","children":[],"call":["@target nil? ","@name == "]}," Spec Mocks Proxy warn_if_nil_class":{"type":"method","name":"warn_if_nil_class","children":[],"call":["Kernel  warn "," caller [] "," caller "," proxy_for_nil_class? "," proxy_for_nil_class? & "]}," Spec Mocks Proxy as_null_object":{"type":"method","name":"as_null_object","children":[],"call":["@options []= "]}," Spec Mocks Proxy allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":[]}," Spec Mocks Methods null_object?":{"type":"method","name":"null_object?","children":[],"call":[" __mock_proxy null_object? "," __mock_proxy "]}," Spec Mocks Methods as_null_object":{"type":"method","name":"as_null_object","children":[],"call":[" __mock_proxy as_null_object "," __mock_proxy "," __mock_proxy act_as_null_object "]}," Spec Mocks BaseExpectation failed_fast?":{"type":"method","name":"failed_fast?","children":[],"call":[]}," Spec Mocks BaseExpectation clone_args_to_yield":{"type":"method","name":"clone_args_to_yield","children":[],"call":["args clone "]}," Spec Mocks BaseExpectation called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":["@actual_received_count >= ","@expected_received_count > ","@expected_received_count != "]}," Spec Mocks BaseExpectation error_generator_opts=":{"type":"method","name":"error_generator_opts=","children":[],"call":["@error_generator opts= "]}," Spec Mocks BaseExpectation build_child":{"type":"method","name":"build_child","children":[],"call":["child clone_args_to_yield ","child error_generator= ","new_gen opts= "," error_generator clone "," error_generator ","child expected_received_count= ","child method_block= ","child expected_from= "," clone ","child clear_actual_received_count! ","child args_to_yield= ","@args_to_yield clone "," clone  clone_args_to_yield "," clone  error_generator= "," error_generator clone  opts= "," clone  expected_received_count= "," clone  method_block= "," clone  expected_from= "," clone  clear_actual_received_count! "," clone  args_to_yield= "]}," Spec Mocks ArgumentExpectation match_any_args?":{"type":"method","name":"match_any_args?","children":[],"call":[]}," Spec Mocks ArgumentExpectation constraints_block_matches?":{"type":"method","name":"constraints_block_matches?","children":[],"call":["@constraints_block call "]}," Spec Mocks ArgumentExpectation args_match?":{"type":"method","name":"args_match?","children":[],"call":[" constraints_match? "," constraints_block_matches? "," match_any_args? ","@expected_args == ","@expected_args nil? ","@constraints_block call "," matchers_match? "," matchers_block_matches? "]}," Spec Mocks ArgumentExpectation constraint_for":{"type":"method","name":"constraint_for","children":[],"call":["ArgumentConstraints EqualityProxy  new ","ArgumentConstraints RegexpConstraint  new ","arg is_a? ","ArgumentConstraints MatcherConstraint  new "," is_matcher? ","ArgumentConstraints RegexpArgConstraint  new ","@@constraint_classes [] new ","@@constraint_classes [] "," warn_constraint_symbol_deprecated ","arg inspect ","(sym :anything) include? "]}," Spec Mocks ArgumentConstraints hash_including":{"type":"method","name":"hash_including","children":[],"call":["HashIncludingConstraint  new "," anythingize_lonely_keys "]}," Spec Mocks ArgumentConstraints boolean":{"type":"method","name":"boolean","children":[],"call":["BooleanConstraint  new ","BooleanArgConstraint  new "]}," Spec Mocks ArgumentConstraints duck_type":{"type":"method","name":"duck_type","children":[],"call":["DuckTypeConstraint  new ","DuckTypeArgConstraint  new "]}," Spec Mocks ArgumentConstraints no_args":{"type":"method","name":"no_args","children":[],"call":["NoArgsConstraint  new "]}," Spec Mocks ArgumentConstraints anything":{"type":"method","name":"anything","children":[],"call":["AnyArgConstraint  new "]}," Spec Mocks ArgumentConstraints any_args":{"type":"method","name":"any_args","children":[],"call":["AnyArgsConstraint  new "]}," Spec Mocks ArgumentConstraints EqualityProxy ==":{"type":"method","name":"==","children":[],"call":["@given == "]}," Spec Mocks ArgumentConstraints EqualityProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints MatcherConstraint ==":{"type":"method","name":"==","children":[],"call":["@matcher matches? "]}," Spec Mocks ArgumentConstraints MatcherConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints DuckTypeConstraint ==":{"type":"method","name":"==","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," Spec Mocks ArgumentConstraints DuckTypeConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints HashIncludingConstraint description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Spec Mocks ArgumentConstraints HashIncludingConstraint ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Spec Mocks ArgumentConstraints HashIncludingConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints BooleanConstraint ==":{"type":"method","name":"==","children":[],"call":["FalseClass  === ","TrueClass  === "]}," Spec Mocks ArgumentConstraints BooleanConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints RegexpConstraint ==":{"type":"method","name":"==","children":[],"call":["value == ","value =~ ","value is_a? "]}," Spec Mocks ArgumentConstraints RegexpConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints NoArgsConstraint ==":{"type":"method","name":"==","children":[],"call":["args == "]}," Spec Mocks ArgumentConstraints NoArgsConstraint description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks ArgumentConstraints AnyArgConstraint ==":{"type":"method","name":"==","children":[],"call":[]}," Spec Mocks ArgumentConstraints AnyArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints AnyArgsConstraint description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers ModuleMethods generated_description":{"type":"method","name":"generated_description","children":[],"call":[" last_matcher description "," last_matcher "," last_matcher respond_to? "," last_should "," last_should nil? "]}," Spec Matchers RaiseError given_error":{"type":"method","name":"given_error","children":[],"call":["@given_error inspect ","@given_error nil? ","@actual_error inspect ","@actual_error nil? "]}," Spec Matchers NegativeOperatorMatcher __delegate_method_missing_to_given":{"type":"method","name":"__delegate_method_missing_to_given","children":[],"call":[" fail_with_message ","@given inspect ","operator gsub ","expected inspect ","@given __send__ "," Spec Matchers  last_matcher= "]}," Spec Matchers PositiveOperatorMatcher __delegate_method_missing_to_given":{"type":"method","name":"__delegate_method_missing_to_given","children":[],"call":[" fail_with_message ","@given inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","@given __send__ "," Spec Matchers  last_matcher= "]}," Spec Matchers BaseOperatorMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," Spec Matchers Have respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@expected respond_to? "]}," Spec Matchers Change evaluate_value_proc":{"type":"method","name":"evaluate_value_proc","children":[],"call":["@value_proc call "]}," Spec Matchers Change raise_block_syntax_error":{"type":"method","name":"raise_block_syntax_error","children":[],"call":[" raise ","MatcherError  new "]}," Test Unit TestCase pending_implementation":{"type":"method","name":"pending_implementation","children":[],"call":[" raise "," lambda ","Spec Example NotYetImplementedError  new "," caller "]}," Spec Example SharedExampleGroup each_ancestor_example_group_class":{"type":"method","name":"each_ancestor_example_group_class","children":[],"call":[]}," Spec Example SharedExampleGroup ClassMethods spec_path":{"type":"method","name":"spec_path","children":[],"call":["File  expand_path ","example_group spec_path "]}," Spec Example SharedExampleGroup ClassMethods guard_against_redefining_existing_example_group":{"type":"method","name":"guard_against_redefining_existing_example_group","children":[],"call":[" raise ","ArgumentError  new ","existing_example_group description "," spec_path == "," spec_path ","new_example_group equal? "," find_shared_example_group ","new_example_group description "," find_shared_example_group  description "]}," Spec Example SharedExampleGroup ClassMethods shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":[]}," Spec Example SharedExampleGroup ClassMethods find_shared_example_group":{"type":"method","name":"find_shared_example_group","children":[],"call":["b description == ","b description "," shared_example_groups find "," shared_example_groups "]}," Spec Example SharedExampleGroup ClassMethods add_shared_example_group":{"type":"method","name":"add_shared_example_group","children":[],"call":[" shared_example_groups << "," shared_example_groups "," guard_against_redefining_existing_example_group "]}," Spec Example ExampleMethods after_each_example":{"type":"method","name":"after_each_example","children":[],"call":[" teardown_mocks_for_rspec "," verify_mocks_for_rspec "," class run_after_each "," class "," run_after_each "]}," Spec Example ExampleMethods before_each_example":{"type":"method","name":"before_each_example","children":[],"call":[" class run_before_each "," class "," setup_mocks_for_rspec "," run_before_each "]}," Spec Example ExampleMethods eval_block":{"type":"method","name":"eval_block","children":[],"call":[" instance_eval "]}," Spec Example ExampleMethods options":{"type":"method","name":"options","children":[],"call":["@_proxy options "]}," Spec Example ExampleGroupMethods include_shared_example_group":{"type":"method","name":"include_shared_example_group","children":[],"call":[" include "," raise ","RuntimeError  new ","SharedExampleGroup  find_shared_example_group ","SharedExampleGroup  find ","SharedExampleGroup  find_shared_SharedExampleGroup  find_shared_example_group  ","SharedExampleGroup  find_shared_SharedExampleGroup  find  "]}," Spec Example ExampleGroupMethods is_example_group_class?":{"type":"method","name":"is_example_group_class?","children":[],"call":["klass included_modules include? ","klass included_modules ","klass kind_of? "]}," Spec Example ExampleGroupMethods each_ancestor_example_group_class":{"type":"method","name":"each_ancestor_example_group_class","children":[],"call":["classes each ","current_class superclass ","classes unshift ","classes << "," is_example_group_class? ","current_class superclass  superclass "]}," Spec Example ExampleGroupMethods xexample":{"type":"method","name":"xexample","children":[],"call":["Kernel  warn "]}," Spec Example ExampleGroupMethods example":{"type":"method","name":"example","children":[],"call":[" example_objects << "," example_objects "," new "," example_implementations []= "," pending_implementation "," example_implementations "," example_descriptions << "," example_descriptions ","ExampleDescription  new "," caller [] "," caller "," example_proxies << "," example_proxies ","ExampleProxy  new ","  new xampl new _obj new cts << ","  new xampl new _obj new cts "," n new w ","  new xampl new _impl new m new ntations []= "," p new nding_impl new m new ntation ","  new xampl new _impl new m new ntations ","  new xampl new _d new scriptions << "," ExampleDescription  new s << ","  new xampl new _d new scriptions "," ExampleDescription  new s ","Exampl new D new scription  n new w "," call new r [] "," call new r ","  new xampl new _proxi new s << ","  new xampl new _proxi new s ","Exampl new Proxy  n new w "]}," Spec Example ExampleGroupMethods create_nested_example_group":{"type":"method","name":"create_nested_example_group","children":[],"call":[" module_eval "," describe "," subclass "]}," Spec Example ExampleGroupMethods create_shared_example_group":{"type":"method","name":"create_shared_example_group","children":[],"call":["SharedExampleGroup  new ","SharedExampleGroup  register "]}," Spec Example ExampleGroupMethods description_args":{"type":"method","name":"description_args","children":[],"call":[]}," Spec Example ExampleGroupFactory registered_types":{"type":"method","name":"registered_types","children":[],"call":["@example_group_types values "]}," Spec Example ExampleGroupFactory registered_or_ancestor_of_registered?":{"type":"method","name":"registered_or_ancestor_of_registered?","children":[],"call":["registered_type ancestors include? ","registered_type ancestors "," registered_types any? "," registered_types "]}," Spec Example ExampleGroupFactory all_registered?":{"type":"method","name":"all_registered?","children":[],"call":[" registered_or_ancestor_of_registered? ","example_group_classes each "]}," Spec Example ExampleGroup pending_implementation":{"type":"method","name":"pending_implementation","children":[],"call":[" raise "," lambda ","NotYetImplementedError  new "," caller "]}," Spec Example NotYetImplementedError pending_caller_from":{"type":"method","name":"pending_caller_from","children":[],"call":["line include? ! ","line include? ","backtrace detect "]}," Spec Example NotYetImplementedError initialize":{"type":"method","name":"initialize","children":[],"call":[" pending_caller_from "]}," Spec Example ExamplePendingError initialize":{"type":"method","name":"initialize","children":[],"call":[" caller [] "," caller "]}," Spec Example Configuration include_or_extend":{"type":"method","name":"include_or_extend","children":[],"call":["ExampleGroupFactory  get send ","ExampleGroupFactory  get ","modules each ","required_example_group to_sym "," get_type_from_options "," args_and_options ","args << ","Hash  === ","args last ","args shift ","required_example_group to_sym  to_sym "," get_type_from_options  to_sym "]}," Spec Example Configuration extend":{"type":"method","name":"extend","children":[],"call":[" include_or_extend "]}," Spec Example BeforeAndAfterHooks after_parts_from_scope":{"type":"method","name":"after_parts_from_scope","children":[],"call":["Spec Runner  options after_suite_parts ","Spec Runner  options "," after_all_parts "," after_each_parts "]}," Spec Example BeforeAndAfterHooks before_parts_from_scope":{"type":"method","name":"before_parts_from_scope","children":[],"call":["Spec Runner  options before_suite_parts ","Spec Runner  options "," before_all_parts "," before_each_parts "]}," Spec Example BeforeAndAfterHooks scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":["args [] "," args_and_options "]}," Spec Example BeforeAndAfterHooks after_each_parts":{"type":"method","name":"after_each_parts","children":[],"call":[]}," Spec Example BeforeAndAfterHooks before_each_parts":{"type":"method","name":"before_each_parts","children":[],"call":[]}," Spec Example BeforeAndAfterHooks after_all_parts":{"type":"method","name":"after_all_parts","children":[],"call":[]}," Spec Example BeforeAndAfterHooks before_all_parts":{"type":"method","name":"before_all_parts","children":[],"call":[]}," Spec Example BeforeAndAfterHooks teardown":{"type":"method","name":"teardown","children":[],"call":[" after "]}," Spec Example BeforeAndAfterHooks setup":{"type":"method","name":"setup","children":[],"call":[" before "]}," Spec Example BeforeAndAfterHooks remove_after":{"type":"method","name":"remove_after","children":[],"call":[" after_each_parts delete "," after_each_parts "]}," Spec Example BeforeAndAfterHooks append_after":{"type":"method","name":"append_after","children":[],"call":["parts << "," after_parts_from_scope "," scope_and_options "," after_parts << "," after_parts "," after_parts_from_scope  << "," after_ after_parts_from_scope _from_scope "," after_ after_parts_from_scope  << "," after_ after_parts_from_scope  "]}," Spec Example BeforeAndAfterHooks prepend_after":{"type":"method","name":"prepend_after","children":[],"call":["parts unshift "," after_parts_from_scope "," scope_and_options "," after_parts unshift "," after_parts "," after_parts_from_scope  unshift "," after_ after_parts_from_scope _from_scope "," after_ after_parts_from_scope  unshift "," after_ after_parts_from_scope  "]}," Spec Example BeforeAndAfterHooks append_before":{"type":"method","name":"append_before","children":[],"call":["parts << "," before_parts_from_scope "," scope_and_options "," before_parts << "," before_parts "," before_parts_from_scope  << "," before_ before_parts_from_scope _from_scope "," before_ before_parts_from_scope  << "," before_ before_parts_from_scope  "]}," Spec Example BeforeAndAfterHooks prepend_before":{"type":"method","name":"prepend_before","children":[],"call":["parts unshift "," before_parts_from_scope "," scope_and_options "," before_parts unshift "," before_parts "," before_parts_from_scope  unshift "," before_ before_parts_from_scope _from_scope "," before_ before_parts_from_scope  unshift "," before_ before_parts_from_scope  "]}," Spec Story Runner StoryRunner current_story_runner=":{"type":"method","name":"current_story_runner=","children":[],"call":[]}," Spec Story Runner StoryRunner current_story_runner":{"type":"method","name":"current_story_runner","children":[],"call":[]}," Spec Runner exit?":{"type":"method","name":"exit?","children":[],"call":["Test Unit  run? "," test_unit_defined? ! "," test_unit_defined? "]}," Spec Runner run":{"type":"method","name":"run","children":[],"call":[" options run_examples "," options "," run? "," options examples_run? "]}," Spec Runner run?":{"type":"method","name":"run?","children":[],"call":["Runner  options examples_run? ","Runner  options "]}," Spec Runner test_unit_defined?":{"type":"method","name":"test_unit_defined?","children":[],"call":["Test Unit  respond_to? ","Test  const_defined? ","Object  const_defined? "]}," Spec Runner ExampleGroupCreationListener register_example_group":{"type":"method","name":"register_example_group","children":[],"call":["Spec Runner  register_at_exit_hook ","Spec Runner  options add_example_group ","Spec Runner  options "]}," Spec Runner SpecParser consider_example_group_for_best_match":{"type":"method","name":"consider_example_group_for_best_match","children":[],"call":[" best_match []= "," best_match "," best_match clear "," is_best_match? ","parsed_backtrace each "," parse_backtrace ","example_group backtrace "," parse_location ","example_group location "," parse_backtrace  each "]}," Spec Runner Options dry_run?":{"type":"method","name":"dry_run?","children":[],"call":["@dry_run == "]}," Spec Runner Options mock_framework":{"type":"method","name":"mock_framework","children":[],"call":["Spec Runner  configuration mock_framework ","Spec Runner  configuration "]}," Spec Runner Options predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":["Spec Runner  configuration predicate_matchers ","Spec Runner  configuration "]}," Spec Runner Options after_suite_parts":{"type":"method","name":"after_suite_parts","children":[],"call":["Spec Example BeforeAndAfterHooks  after_suite_parts "]}," Spec Runner Options before_suite_parts":{"type":"method","name":"before_suite_parts","children":[],"call":["Spec Example BeforeAndAfterHooks  before_suite_parts "]}," Spec Runner OptionParser spec_command?":{"type":"method","name":"spec_command?","children":[],"call":["$0 split last == ","$0 split last ","$0 split "]}," Spec Runner Configuration mock_framework_path":{"type":"method","name":"mock_framework_path","children":[],"call":["File  expand_path ","File  join ","File  dirname "]}," Spec Runner Configuration get_type_from_options":{"type":"method","name":"get_type_from_options","children":[],"call":["options [] "]}," Spec Runner Configuration add_callback":{"type":"method","name":"add_callback","children":[],"call":["example_group __send__ ","Spec Example ExampleGroupFactory  get "," get_type_from_options ","Spec Example  scope_and_options ","Spec Example ExampleGroupFactory  [] "," scope_and_options ","Spec Example ExampleGroupFactory  get  __send__ ","Spec Example ExampleGroupFactory  []  __send__ "]}," Spec Runner Configuration include_or_extend":{"type":"method","name":"include_or_extend","children":[],"call":["Spec Example ExampleGroupFactory  get __send__ ","Spec Example ExampleGroupFactory  get ","modules each ","required_example_group to_sym ","(send nil :get_type_from_options\n  (lvar :options)) flatten each ","(send nil :get_type_from_options\n  (lvar :options)) flatten "," get_type_from_options ","Spec Example  args_and_options ","Spec Example ExampleGroupFactory  [] __send__ ","Spec Example ExampleGroupFactory  [] "," args_and_options ","required_example_group to_sym  to_sym "]}," Spec Runner Configuration append_after":{"type":"method","name":"append_after","children":[],"call":[" add_callback "]}," Spec Runner Configuration prepend_after":{"type":"method","name":"prepend_after","children":[],"call":[" add_callback "]}," Spec Runner Configuration append_before":{"type":"method","name":"append_before","children":[],"call":[" add_callback "]}," Spec Runner Configuration prepend_before":{"type":"method","name":"prepend_before","children":[],"call":[" add_callback "]}," Spec Runner Configuration predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":["Spec HashWithDeprecationNotice  new "]}," Spec Runner Configuration extend":{"type":"method","name":"extend","children":[],"call":[" include_or_extend "]}," Spec Runner Configuration include":{"type":"method","name":"include","children":[],"call":[" include_or_extend "]}," Spec Runner Configuration mock_framework":{"type":"method","name":"mock_framework","children":[],"call":[" mock_framework_path "]}," Spec Runner Configuration mock_with":{"type":"method","name":"mock_with","children":[],"call":[" mock_framework_path ","mock_framework to_s "]}," Spec Ruby version":{"type":"method","name":"version","children":[],"call":[]}," Spec Mocks MessageExpectation clear_actual_received_count!":{"type":"method","name":"clear_actual_received_count!","children":[],"call":[]}," Spec Mocks ArgumentConstraints anythingize_lonely_keys":{"type":"method","name":"anythingize_lonely_keys","children":[],"call":["hash []= "," anything ","args each ","args delete_at ","args last class == ","args last class ","args last ","args delete_at  []= "]}," Spec Mocks ArgumentConstraints kind_of":{"type":"method","name":"kind_of","children":[],"call":["KindOf  new "]}," Spec Mocks ArgumentConstraints instance_of":{"type":"method","name":"instance_of","children":[],"call":["InstanceOf  new "]}," Spec Mocks ArgumentConstraints hash_not_including":{"type":"method","name":"hash_not_including","children":[],"call":["HashNotIncludingConstraint  new "," anythingize_lonely_keys "]}," Spec Mocks ArgumentConstraints KindOf ==":{"type":"method","name":"==","children":[],"call":["actual kind_of? "]}," Spec Mocks ArgumentConstraints KindOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints InstanceOf ==":{"type":"method","name":"==","children":[],"call":["actual instance_of? "]}," Spec Mocks ArgumentConstraints InstanceOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints HashNotIncludingConstraint description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Spec Mocks ArgumentConstraints HashNotIncludingConstraint ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Spec Mocks ArgumentConstraints HashNotIncludingConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers wrap_expectation":{"type":"method","name":"wrap_expectation","children":[],"call":["matcher failure_message= ","e message ","block call "]}," Spec Matchers ThrowSymbol args":{"type":"method","name":"args","children":[],"call":["@expected_arg inspect ","@expected_arg nil? "]}," Spec Matchers RespondTo pp_names":{"type":"method","name":"pp_names","children":[],"call":["@names inspect ","@names first ","@names length == ","@names length "]}," Spec Matchers RespondTo with_arity":{"type":"method","name":"with_arity","children":[],"call":["@expected_arity == ","@expected_arity nil? "]}," Spec Matchers RespondTo matches_arity?":{"type":"method","name":"matches_arity?","children":[],"call":["@expected_arity == ","actual method arity ","actual method ","@expected_arity nil? "]}," Spec Matchers RespondTo argument":{"type":"method","name":"argument","children":[],"call":[]}," Spec Matchers RespondTo with":{"type":"method","name":"with","children":[],"call":[]}," Spec Matchers NegativeOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","actual __send__ "]}," Spec Matchers PositiveOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","actual __send__ "]}," Spec Matchers OperatorMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," Spec Matchers OperatorMatcher fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Spec Expectations  fail_with "]}," Spec Matchers OperatorMatcher use_custom_matcher_or_delegate":{"type":"method","name":"use_custom_matcher_or_delegate","children":[],"call":[]}," Spec Matchers OperatorMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers OperatorMatcher get":{"type":"method","name":"get","children":[],"call":[" registry [] [] "," registry [] "," registry ","klass <= "," registry keys detect "," registry keys "]}," Spec Matchers OperatorMatcher register":{"type":"method","name":"register","children":[],"call":[" registry [] []= "," registry [] "," registry "]}," Spec Matchers OperatorMatcher registry":{"type":"method","name":"registry","children":[],"call":["h []= ","Hash  new "]}," Spec Matchers MatchArray _pretty_print":{"type":"method","name":"_pretty_print","children":[],"call":["result << ","item inspect ","index < ","array length - ","array length ","array each_with_index "]}," Spec Matchers MatchArray difference_between_arrays":{"type":"method","name":"difference_between_arrays","children":[],"call":["difference delete_at ","difference index ","array_2 each ","array_1 dup ","array_1 dup  delete_at ","difference difference index  ","array_1 dup  index "]}," Spec Matchers MatchArray description":{"type":"method","name":"description","children":[],"call":[" _pretty_print "]}," Spec Matchers MatchArray negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Spec Matchers MatchArray failure_message":{"type":"method","name":"failure_message","children":[],"call":["@extra_items sort inspect ","@extra_items sort ","@extra_items empty? ","@missing_items sort inspect ","@missing_items sort ","@missing_items empty? ","@actual sort inspect ","@actual sort ","@expected sort inspect ","@expected sort "]}," Spec Matchers MatchArray matches?":{"type":"method","name":"matches?","children":[],"call":["@missing_items empty? ","@extra_items empty? "," difference_between_arrays ","@extra_items empty? & "," difference_between_arrays  empty? "," difference_between_arrays  empty? & "]}," Spec Matchers MatchArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","sym to_s sub ","sym to_s "]}," Spec Matchers has":{"type":"method","name":"has","children":[],"call":["actual __send__ "," predicate ","matcher description= ","args [] inspect ","args [] ","matcher negative_failure_message= ","matcher failure_message= "," simple_matcher "]}," Spec Matchers last_description":{"type":"method","name":"last_description","children":[],"call":[]}," Spec Matchers generated_description":{"type":"method","name":"generated_description","children":[],"call":[]}," Spec Matchers clear_generated_description":{"type":"method","name":"clear_generated_description","children":[],"call":[]}," Spec Matchers last_should=":{"type":"method","name":"last_should=","children":[],"call":[]}," Spec Matchers last_should":{"type":"method","name":"last_should","children":[],"call":[]}," Spec Matchers last_matcher=":{"type":"method","name":"last_matcher=","children":[],"call":[]}," Spec Matchers last_matcher":{"type":"method","name":"last_matcher","children":[],"call":[]}," Spec Matchers be_a":{"type":"method","name":"be_a","children":[],"call":[" be_a_kind_of "]}," Spec Matchers Be inspected_args":{"type":"method","name":"inspected_args","children":[],"call":["a inspect ","@args collect "]}," Spec Matchers Be parenthesize":{"type":"method","name":"parenthesize","children":[],"call":[]}," Spec Matchers Be handling_predicate!":{"type":"method","name":"handling_predicate!","children":[],"call":[]}," Spec Matchers Be prefix":{"type":"method","name":"prefix","children":[],"call":[]}," Spec Matchers Be set_prefix":{"type":"method","name":"set_prefix","children":[],"call":[]}," Spec Matchers Be set_expected":{"type":"method","name":"set_expected","children":[],"call":[" parse_expected ","Symbol  === "]}," Spec Matchers Be compare_to":{"type":"method","name":"compare_to","children":[],"call":["opts [] "]}," Spec Matchers Be comparison_method":{"type":"method","name":"comparison_method","children":[],"call":[]}," Spec Matchers Be run_predicate_on":{"type":"method","name":"run_predicate_on","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "]}," Spec Expectations differ=":{"type":"method","name":"differ=","children":[],"call":[]}," Spec Expectations differ":{"type":"method","name":"differ","children":[],"call":[]}," Spec Example with_options_from":{"type":"method","name":"with_options_from","children":[],"call":["args pop ","Hash  === ","args last "," block_given? "]}," Spec Example add_spec_path_to":{"type":"method","name":"add_spec_path_to","children":[],"call":[" caller [] "," caller ","args last [] ","args last ","args << ","Hash  === "]}," Spec Example scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":[" scope_from "," args_and_options "]}," Spec Example scope_from":{"type":"method","name":"scope_from","children":[],"call":["args [] "]}," Spec Example args_and_options":{"type":"method","name":"args_and_options","children":[],"call":[" with_options_from "]}," Spec Example SharedExampleGroup ClassMethods expanded_path":{"type":"method","name":"expanded_path","children":[],"call":["File  expand_path ","example_group spec_path ","example_group location "]}," Spec Example SharedExampleGroup ClassMethods already_registered?":{"type":"method","name":"already_registered?","children":[],"call":[" raise ","ArgumentError  new ","existing_example_group description "," expanded_path == "," expanded_path ","new_example_group equal? "," find ","new_example_group description "," find  description "]}," Spec Example SharedExampleGroup ClassMethods count":{"type":"method","name":"count","children":[],"call":[" shared_example_groups length "," shared_example_groups "]}," Spec Example SharedExampleGroup ClassMethods include?":{"type":"method","name":"include?","children":[],"call":[" shared_example_groups include? "," shared_example_groups "]}," Spec Example SharedExampleGroup ClassMethods clear":{"type":"method","name":"clear","children":[],"call":[" shared_example_groups clear "," shared_example_groups "]}," Spec Example SharedExampleGroup ClassMethods find":{"type":"method","name":"find","children":[],"call":["b description == ","b description "," shared_example_groups find "," shared_example_groups "]}," Spec Example SharedExampleGroup ClassMethods register":{"type":"method","name":"register","children":[],"call":[" shared_example_groups << "," shared_example_groups "," already_registered? "," new "]}," Spec Example ExampleMethods underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s "]}," Spec Example ExampleMethods described_type":{"type":"method","name":"described_type","children":[],"call":[" class described_type "," class "]}," Spec Example ExampleMethods described_class":{"type":"method","name":"described_class","children":[],"call":[" described_type ","Class  === "," class described_class "," class "]}," Spec Example ExampleMethods subject_variable_name":{"type":"method","name":"subject_variable_name","children":[],"call":["@ << "," underscore "," described_class name "," described_class "]}," Spec Example ExampleMethods backtrace":{"type":"method","name":"backtrace","children":[],"call":[]}," Spec Example ExampleMethods full_description":{"type":"method","name":"full_description","children":[],"call":[" description "," class description "," class "]}," Spec Example ExampleMethods should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "]}," Spec Example ExampleMethods should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "]}," Spec Example ExampleMethods subject":{"type":"method","name":"subject","children":[],"call":[" described_class new "," described_class "," instance_eval "," class subject_block "," class "," instance_variable_get "," subject_variable_name "]}," Spec Example ExampleGroupMethods example_group_hierarchy":{"type":"method","name":"example_group_hierarchy","children":[],"call":["ExampleGroupHierarchy  new "]}," Spec Example ExampleGroupMethods ExampleGroupHierarchy initialize":{"type":"method","name":"initialize","children":[],"call":["current_class superclass ","current_class respond_to? "," unshift ","current_class kind_of? ","current_class superclass  superclass ","current_class superclass  respond_to? ","current_class superclass  kind_of? "]}," Spec Example ExampleGroupMethods all_before_each_parts":{"type":"method","name":"all_before_each_parts","children":[],"call":["example_group_class before_each_parts "," example_group_hierarchy each "," example_group_hierarchy "]}," Spec Example ExampleGroupMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[" lambda "]}," Spec Example ExampleGroupMethods subject":{"type":"method","name":"subject","children":[],"call":[]}," Spec Example ExampleGroupMethods create_example_group_subclass":{"type":"method","name":"create_example_group_subclass","children":[],"call":["klass module_eval ","ExampleGroupFactory  include_constants_in ","args last [] ","args last ","klass set_description "," const_set ","Class  new "," const_set  module_eval "," const_set  set_description "]}," Spec Example ExampleGroupMethods register_example_group":{"type":"method","name":"register_example_group","children":[],"call":["l register_example_group ","ExampleGroupMethods  example_group_creation_listeners each ","ExampleGroupMethods  example_group_creation_listeners "]}," Spec Example ExampleGroupMethods example_group_backtrace":{"type":"method","name":"example_group_backtrace","children":[],"call":[" backtrace ","Kernel  warn "]}," Spec Example ExampleGroupMethods backtrace":{"type":"method","name":"backtrace","children":[],"call":[]}," Spec Example ExampleGroupMethods example_group_creation_listeners":{"type":"method","name":"example_group_creation_listeners","children":[],"call":[]}," Spec Example ExampleGroupFactory ClassMethods registered_types":{"type":"method","name":"registered_types","children":[],"call":["@example_group_types values "]}," Spec Example ExampleGroupFactory ClassMethods determine_superclass":{"type":"method","name":"determine_superclass","children":[],"call":[" get ","2 to_sym ","2 == ","opts [] =~ ","@example_group_types keys join ","@example_group_types keys ","opts [] "," [] ","(send\n  (send\n    (ivar :@example_group_types) :keys) :sort_by) reverse join ","(send\n  (send\n    (ivar :@example_group_types) :keys) :sort_by) reverse ","k to_s length ","k to_s ","@example_group_types keys sort_by ","@example_group_types opts [] s join ","@example_group_opts [] s keys join ","@example_group_types opts [] s ","@example_group_opts [] s keys ","(send\n  (send\n    (ivar :@example_group_types) :opts [] s) :sort_by) reverse join ","(send\n  (send\n    (ivar :@example_group_opts [] s) :keys) :sort_by) reverse join ","(send\n  (send\n    (ivar :@example_group_types) :opts [] s) :sort_by) reverse ","(send\n  (send\n    (ivar :@example_group_opts [] s) :keys) :sort_by) reverse ","@example_group_types opts [] s sort_by ","@example_group_opts [] s keys sort_by "]}," Spec Example ExampleGroupFactory ClassMethods assign_scope":{"type":"method","name":"assign_scope","children":[],"call":["args last []= ","args last "]}," Spec Example ExampleGroupFactory ClassMethods include_constants_in":{"type":"method","name":"include_constants_in","children":[],"call":[" instance_eval "," include "," lambda ","(send\n  (const nil :Class) :===\n  (lvar :context)) ! ","Class  === ","Module  === ","Spec Ruby  version to_f >= ","Spec Ruby  version to_f ","Spec Ruby  version "]}," Spec Example ExampleGroupFactory ClassMethods create_shared_example_group":{"type":"method","name":"create_shared_example_group","children":[],"call":["SharedExampleGroup  register ","Spec Example  add_spec_path_to "," Spec Example SharedExampleGroup  register "," Spec Example  add_spec_path_to "]}," Spec Example ExampleGroupFactory ClassMethods create_example_group":{"type":"method","name":"create_example_group","children":[],"call":["superclass describe "," determine_superclass ","args last ","Spec Example  add_spec_path_to "," raise ","args empty? "," add_options ","block nil? "," determine_superclass  describe "," determine_ determine_superclass  "]}," Spec Example ExampleGroupFactory ClassMethods get":{"type":"method","name":"get","children":[],"call":["@example_group_types [] ","@example_group_types values include? ","@example_group_types values "]}," Spec Example ExampleGroupFactory ClassMethods default":{"type":"method","name":"default","children":[],"call":["@example_group_types merge! ","Hash  new ","Spec  const_set ","Spec  __send__ ","Spec  const_defined? ","Hash  new  merge! "]}," Spec Example ExampleGroupFactory ClassMethods register":{"type":"method","name":"register","children":[],"call":["@example_group_types []= ","key to_sym "]}," Spec Example ExampleGroupFactory ClassMethods registered_or_ancestor_of_registered?":{"type":"method","name":"registered_or_ancestor_of_registered?","children":[],"call":["registered_type ancestors include? ","registered_type ancestors "," registered_types any? "," registered_types ","example_group_classes each "]}," Spec Example ExampleGroupFactory ClassMethods reset":{"type":"method","name":"reset","children":[],"call":[" default "]}," Spec Example BeforeAndAfterHooks after_parts":{"type":"method","name":"after_parts","children":[],"call":[" after_suite_parts "," after_all_parts "," after_each_parts ","Spec Example  scope_from "]}," Spec Example BeforeAndAfterHooks before_parts":{"type":"method","name":"before_parts","children":[],"call":[" before_suite_parts "," before_all_parts "," before_each_parts ","Spec Example  scope_from "]}," Spec Example BeforeAndAfterHooks after_suite_parts":{"type":"method","name":"after_suite_parts","children":[],"call":["BeforeAndAfterHooks  after_suite_parts "]}," Spec Example BeforeAndAfterHooks before_suite_parts":{"type":"method","name":"before_suite_parts","children":[],"call":["BeforeAndAfterHooks  before_suite_parts "]}," Spec DSL Main share_as":{"type":"method","name":"share_as","children":[],"call":[" raise ","NameError  new ","e message + ","e message ","Object  const_set ","Spec Example ExampleGroupFactory  create_shared_example_group ","Spec Example  add_spec_path_to ","Spec Example  set_location "," caller [] "," caller "," set_location ","args options "," add_options ","Spec  deprecate "]}," Spec DSL Main share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["Spec Example ExampleGroupFactory  create_shared_example_group ","Spec Example  add_spec_path_to ","Spec Example  set_location "," caller [] "," caller "," set_location ","args options "," add_options "]}," Spec DSL Main describe":{"type":"method","name":"describe","children":[],"call":["Spec Example ExampleGroupFactory  create_example_group ","Spec Example ExampleGroupFactory  assign_scope ","Spec Example  add_spec_path_to ","Spec Example  set_location "," caller [] "," caller "," set_location ","args options "," add_options "," raise ","Spec Example NoDescriptionError  new ","args empty? "]}," Spec Adapters MockFramework teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":["$rspec_mocks reset_all ","RR Space  instance reset ","RR Space  instance "," mocha_teardown "," flexmock_close "]}," Spec Adapters MockFramework verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":["$rspec_mocks verify_all ","RR Space  instance verify_doubles ","RR Space  instance "," mocha_verify "," flexmock_verify "]}," Spec Adapters MockFramework setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":["Spec Mocks Space  new ","RR Space  instance reset ","RR Space  instance "," mocha_setup "]}," Spec Mocks Proxy act_as_null_object":{"type":"method","name":"act_as_null_object","children":[],"call":["@options []= "]}," Spec Mocks ArgumentExpectation warn_constraint_symbol_deprecated":{"type":"method","name":"warn_constraint_symbol_deprecated","children":[],"call":["Kernel  warn "]}," Spec Mocks ArgumentConstraints Deprecated StringArgConstraint ==":{"type":"method","name":"==","children":[],"call":["String  === "]}," Spec Mocks ArgumentConstraints Deprecated StringArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints Deprecated NumericArgConstraint ==":{"type":"method","name":"==","children":[],"call":["value is_a? "]}," Spec Mocks ArgumentConstraints Deprecated NumericArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints DuckTypeArgConstraint ==":{"type":"method","name":"==","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," Spec Mocks ArgumentConstraints DuckTypeArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints BooleanArgConstraint ==":{"type":"method","name":"==","children":[],"call":["FalseClass  === ","TrueClass  === "]}," Spec Mocks ArgumentConstraints BooleanArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentConstraints RegexpArgConstraint ==":{"type":"method","name":"==","children":[],"call":["value == ","value =~ ","value is_a? "]}," Spec Mocks ArgumentConstraints RegexpArgConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Runner autorun":{"type":"method","name":"autorun","children":[],"call":[" exit "," run "," at_exit "]}," Spec Runner Options plugin_mock_framework":{"type":"method","name":"plugin_mock_framework","children":[],"call":["Spec Example ExampleMethods  __send__ "," require "," mock_framework "]}," Spec Runner Options define_predicate_matchers":{"type":"method","name":"define_predicate_matchers","children":[],"call":[" eval ","method_on_object to_s gsub ","method_on_object to_s ","Spec Example ExampleMethods  __send__ ","Spec Runner  configuration predicate_matchers each_pair ","Spec Runner  configuration predicate_matchers ","Spec Runner  configuration "]}," Spec Runner OptionParser parse_file_options":{"type":"method","name":"parse_file_options","children":[],"call":[" send ","@argv delete_at ","@argv index ","options_list each ","options_list [] gsub! ","options_list [] ","OPTIONS  [] [] ","OPTIONS  [] ","(send\n  (ivar :@argv) :any?) ! ","a =~ ","@argv any? ","File  exist? ","options_file nil? ","@argv @argv index  ","OPTIONS  [] []  each ","OPTIONS  [] []  [] gsub! ","OPTIONS  [] []  [] ","@argv delete_at  nil? "]}," Spec Runner Formatter BaseTextFormatter autospec?":{"type":"method","name":"autospec?","children":[],"call":["@options autospec ! ! ","@options autospec ! ","@options autospec ","ENV  has_key? "]}," Spec Runner Formatter BaseTextFormatter colorize_failure":{"type":"method","name":"colorize_failure","children":[],"call":[" red "," blue ","failure pending_fixed? "]}," Spec Mocks Proxy record_message_received":{"type":"method","name":"record_message_received","children":[],"call":["@messages_received << "]}," Spec Mocks ArgumentMatchers anythingize_lonely_keys":{"type":"method","name":"anythingize_lonely_keys","children":[],"call":["hash []= "," anything ","args each ","args delete_at ","args last class == ","args last class ","args last ","args delete_at  []= "]}," Spec Mocks ArgumentMatchers kind_of":{"type":"method","name":"kind_of","children":[],"call":["KindOf  new "]}," Spec Mocks ArgumentMatchers instance_of":{"type":"method","name":"instance_of","children":[],"call":["InstanceOf  new "]}," Spec Mocks ArgumentMatchers hash_not_including":{"type":"method","name":"hash_not_including","children":[],"call":["HashNotIncludingMatcher  new "," anythingize_lonely_keys "]}," Spec Mocks ArgumentMatchers hash_including":{"type":"method","name":"hash_including","children":[],"call":["HashIncludingMatcher  new "," anythingize_lonely_keys "]}," Spec Mocks ArgumentMatchers boolean":{"type":"method","name":"boolean","children":[],"call":["BooleanMatcher  new "]}," Spec Mocks ArgumentMatchers duck_type":{"type":"method","name":"duck_type","children":[],"call":["DuckTypeMatcher  new "]}," Spec Mocks ArgumentMatchers no_args":{"type":"method","name":"no_args","children":[],"call":["NoArgsMatcher  new "]}," Spec Mocks ArgumentMatchers anything":{"type":"method","name":"anything","children":[],"call":["AnyArgMatcher  new "]}," Spec Mocks ArgumentMatchers any_args":{"type":"method","name":"any_args","children":[],"call":["AnyArgsMatcher  new "]}," Spec Mocks ArgumentMatchers KindOf ==":{"type":"method","name":"==","children":[],"call":["actual kind_of? "]}," Spec Mocks ArgumentMatchers KindOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers InstanceOf ==":{"type":"method","name":"==","children":[],"call":["actual instance_of? "]}," Spec Mocks ArgumentMatchers InstanceOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers EqualityProxy ==":{"type":"method","name":"==","children":[],"call":["@given == "]}," Spec Mocks ArgumentMatchers EqualityProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers MatcherMatcher ==":{"type":"method","name":"==","children":[],"call":["@matcher matches? "]}," Spec Mocks ArgumentMatchers MatcherMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers DuckTypeMatcher ==":{"type":"method","name":"==","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," Spec Mocks ArgumentMatchers DuckTypeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers HashNotIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Spec Mocks ArgumentMatchers HashNotIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Spec Mocks ArgumentMatchers HashNotIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers HashIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Spec Mocks ArgumentMatchers HashIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Spec Mocks ArgumentMatchers HashIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers BooleanMatcher ==":{"type":"method","name":"==","children":[],"call":["FalseClass  === ","TrueClass  === "]}," Spec Mocks ArgumentMatchers BooleanMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers RegexpMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","value =~ ","value is_a? "]}," Spec Mocks ArgumentMatchers RegexpMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers NoArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks ArgumentMatchers AnyArgMatcher ==":{"type":"method","name":"==","children":[],"call":[]}," Spec Mocks ArgumentMatchers AnyArgMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks ArgumentMatchers AnyArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Spec Mocks ArgumentExpectation matchers_match?":{"type":"method","name":"matchers_match?","children":[],"call":["@matchers == "]}," Spec Mocks ArgumentExpectation matchers_block_matches?":{"type":"method","name":"matchers_block_matches?","children":[],"call":["@matchers_block call "]}," Spec Mocks ArgumentExpectation matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["ArgumentMatchers EqualityProxy  new ","ArgumentMatchers RegexpMatcher  new ","arg is_a? ","ArgumentMatchers MatcherMatcher  new "," is_matcher? "]}," Spec Matchers ThrowSymbol failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected "]}," Spec Matchers ThrowSymbol failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected ","@caught_symbol inspect "]}," Spec Matchers Satisfy failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," Spec Matchers Satisfy failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[]}," Spec Matchers RespondTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["(send\n  (ivar :@names) :collect) join ","name inspect ","@names collect ","@actual inspect "]}," Spec Matchers RespondTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" with_arity ","(send\n  (ivar :@names_not_responded_to) :collect) join ","name inspect ","@names_not_responded_to collect ","@actual inspect "]}," Spec Matchers RaiseError failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" given_error "," expected_error "]}," Spec Matchers RaiseError failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" given_error "," expected_error ","@given_error message ","@actual_error message "]}," Spec Matchers OperatorMatcher eval_match":{"type":"method","name":"eval_match","children":[],"call":[" __delegate_operator "," Spec Matchers  last_matcher= "]}," Spec Matchers Matcher name_to_sentence":{"type":"method","name":"name_to_sentence","children":[],"call":["@name to_s gsub ","@name to_s "," split_words "]}," Spec Matchers Matcher cache_or_call_cached":{"type":"method","name":"cache_or_call_cached","children":[],"call":["@messages [] call ","@messages [] ","actual nil? ","@messages []= "," call_cached "," cache "]}," Spec Matchers Matcher match":{"type":"method","name":"match","children":[],"call":[]}," Spec Matchers Matcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" cache_or_call_cached "," actual "]}," Spec Matchers Matcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" cache_or_call_cached "," actual "]}," Spec Matchers Matcher description":{"type":"method","name":"description","children":[],"call":[" cache_or_call_cached "]}," Spec Matchers Matcher matches?":{"type":"method","name":"matches?","children":[],"call":[" instance_exec "]}," Spec Matchers Matcher initialize":{"type":"method","name":"initialize","children":[],"call":[" name_to_sentence "," lambda "," expected_to_sentence ","actual inspect "," instance_exec "," making_declared_methods_public "]}," Spec Matchers MatchArray failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," Spec Matchers MatchArray failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@extra_items sort inspect ","@extra_items sort ","@extra_items empty? ","@missing_items sort inspect ","@missing_items sort ","@missing_items empty? ","@actual sort inspect ","@actual sort ","@expected sort inspect ","@expected sort "," safe_sort inspect "," safe_sort "]}," Spec Matchers Match failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected inspect ","@actual inspect "]}," Spec Matchers Match failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@expected inspect ","@actual inspect "]}," Spec Matchers Include failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" _message "]}," Spec Matchers Include failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" _message "]}," Spec Matchers Have failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected - ","@relativity == ","@expected + "]}," Spec Matchers Have failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" relative_expectation "]}," Spec Matchers Has failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@args [] inspect ","@args [] "," predicate "]}," Spec Matchers Has failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@args [] inspect ","@args [] "," predicate "]}," Spec Matchers Exist description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers Exist failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," Spec Matchers Exist failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Spec Matchers Equal failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected inspect ","@actual inspect "]}," Spec Matchers Equal failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect ","@expected inspect "]}," Spec Matchers Eql failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected inspect ","@actual inspect "]}," Spec Matchers Eql failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect ","@expected inspect "]}," Spec Matchers Change description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers Change failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@after inspect ","@before inspect "]}," Spec Matchers Change failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@before inspect "," actual_delta inspect "," actual_delta ","@maximum inspect ","@minimum inspect ","@amount inspect ","@from inspect ","@after inspect ","@to inspect "]}," Spec Matchers be_kind_of":{"type":"method","name":"be_kind_of","children":[],"call":["BeKindOf  new "]}," Spec Matchers BeKindOf failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," Spec Matchers BeKindOf failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Spec Matchers BeKindOf description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers BeKindOf matches?":{"type":"method","name":"matches?","children":[],"call":["@actual kind_of? "]}," Spec Matchers BeKindOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers be_instance_of":{"type":"method","name":"be_instance_of","children":[],"call":["BeInstanceOf  new "]}," Spec Matchers BeInstanceOf failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," Spec Matchers BeInstanceOf failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Spec Matchers BeInstanceOf description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers BeInstanceOf matches?":{"type":"method","name":"matches?","children":[],"call":["@actual instance_of? "]}," Spec Matchers BeInstanceOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers BeClose failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[]}," Spec Matchers Be failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "," expected ","@result inspect "," args_to_s "," predicate "," handling_predicate? "," predicate == ","@actual inspect "]}," Spec Matchers Be failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["(str \"expected \") gsub ","@actual inspect "," expected ","@result inspect "," args_to_s "," predicate "," handling_predicate? "," predicate == "]}," Spec Example Subject ExampleMethods should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "," __should_not_for_example_group__ "," == "]}," Spec Example Subject ExampleMethods should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "," __should_for_example_group__ "," == "]}," Spec Example Subject ExampleMethods subject":{"type":"method","name":"subject","children":[],"call":[" instance_eval "," class subject "," class "]}," Spec Example Subject ExampleGroupMethods subject":{"type":"method","name":"subject","children":[],"call":[" description_args first "," description_args "," lambda "," described_class new "," described_class ","block nil? "," implicit_subject "," explicit_subject "]}," Spec Example PredicateMatchers define_methods_from_predicate_matchers":{"type":"method","name":"define_methods_from_predicate_matchers","children":[],"call":[" eval ","method_on_object to_s gsub ","method_on_object to_s "," define_method "," predicate_matchers each_pair "," predicate_matchers "]}," Spec Example PredicateMatchers predicate_matchers":{"type":"method","name":"predicate_matchers","children":[],"call":["Spec HashWithDeprecationNotice  new "]}," Spec Example ExampleMethods example_group_hierarchy":{"type":"method","name":"example_group_hierarchy","children":[],"call":[" class example_group_hierarchy "," class "]}," Spec Example ExampleMethods description_args":{"type":"method","name":"description_args","children":[],"call":[" class description_args "," class "]}," Spec Example ExampleMethods initialize":{"type":"method","name":"initialize","children":[],"call":[" caller "]}," Spec Example ExampleMethods run_after_each":{"type":"method","name":"run_after_each","children":[],"call":[" example_group_hierarchy run_after_each "," example_group_hierarchy "]}," Spec Example ExampleMethods run_before_each":{"type":"method","name":"run_before_each","children":[],"call":[" example_group_hierarchy run_before_each "," example_group_hierarchy "]}," Spec Example ExampleGroupMethods build_description_from":{"type":"method","name":"build_description_from","children":[],"call":["text == ","description << ","arg to_s ","arg to_s =~ ","description == ","args inject "]}," Spec Example ExampleGroupMethods method_added":{"type":"method","name":"method_added","children":[],"call":[" __send__ ","name to_s "," example "," caller [] "," caller "," example_method? "]}," Spec Example ExampleGroupMethods subclass":{"type":"method","name":"subclass","children":[],"call":["klass module_eval ","klass include_constants_in ","args last [] ","args last ","klass set_description "," const_set ","Class  new "," const_set  module_eval "," const_set  include_constants_in "," const_set  set_description "]}," Spec Example ExampleGroupMethods include_constants_in":{"type":"method","name":"include_constants_in","children":[],"call":[" include ","(send\n  (send\n    (send\n      (const\n        (const nil :Spec) :Ruby) :version) :to_f) :>=\n  (float 1.9)) & & ","(send\n  (const nil :Class) :===\n  (lvar :mod)) ! ","Class  === ","(send\n  (send\n    (send\n      (const\n        (const nil :Spec) :Ruby) :version) :to_f) :>=\n  (float 1.9)) & ","Module  === ","Spec Ruby  version to_f >= ","Spec Ruby  version to_f ","Spec Ruby  version "]}," Spec Example ExampleGroupMethods nested_descriptions":{"type":"method","name":"nested_descriptions","children":[],"call":[" example_group_hierarchy nested_descriptions "," example_group_hierarchy "]}," Spec Example ExampleGroupMethods filtered_description":{"type":"method","name":"filtered_description","children":[],"call":[" build_description_from ","description =~ "," nested_descriptions collect "," nested_descriptions "]}," Spec Example ExampleGroupMethods example_implementations":{"type":"method","name":"example_implementations","children":[],"call":[]}," Spec Example ExampleGroupMethods example_descriptions":{"type":"method","name":"example_descriptions","children":[],"call":[]}," Spec Example ExampleGroupMethods described_class":{"type":"method","name":"described_class","children":[],"call":[" described_type ","Class  === "]}," Spec Example ExampleGroupMethods notify":{"type":"method","name":"notify","children":[],"call":["listener add_example_group ","ExampleGroupProxy  new ","reporter example_group_started "]}," Spec Example ExampleGroupMethods pending_implementation":{"type":"method","name":"pending_implementation","children":[],"call":[" raise "," lambda ","Spec Example NotYetImplementedError  new "," caller "]}," Spec Example ExampleGroupHierarchy nested_description_from":{"type":"method","name":"nested_description_from","children":[],"call":["example_group description_args join ","example_group description_args "]}," Spec Example ExampleGroupHierarchy nested_descriptions":{"type":"method","name":"nested_descriptions","children":[],"call":["(send nil :collect) compact "," nested_description_from "," nested_description_from == "," collect "]}," Spec Example ExampleGroupHierarchy after_all_parts":{"type":"method","name":"after_all_parts","children":[],"call":["(send\n  (send nil :reverse) :collect) flatten ","klass after_all_parts "," reverse collect "," reverse "]}," Spec Example ExampleGroupHierarchy after_each_parts":{"type":"method","name":"after_each_parts","children":[],"call":["(send\n  (send nil :reverse) :collect) flatten ","klass after_each_parts "," reverse collect "," reverse "]}," Spec Example ExampleGroupHierarchy before_each_parts":{"type":"method","name":"before_each_parts","children":[],"call":["(send nil :collect) flatten ","klass before_each_parts "," collect "]}," Spec Example ExampleGroupHierarchy before_all_parts":{"type":"method","name":"before_all_parts","children":[],"call":["(send nil :collect) flatten ","klass before_all_parts "," collect "]}," Spec Example ExampleGroupHierarchy run_after_all":{"type":"method","name":"run_after_all","children":[],"call":["example eval_each_fail_slow "," after_all_parts "]}," Spec Example ExampleGroupHierarchy run_after_each":{"type":"method","name":"run_after_each","children":[],"call":["example eval_each_fail_slow "," after_each_parts "]}," Spec Example ExampleGroupHierarchy run_before_each":{"type":"method","name":"run_before_each","children":[],"call":["example eval_each_fail_fast "," before_each_parts "]}," Spec Example ExampleGroupHierarchy run_before_all":{"type":"method","name":"run_before_all","children":[],"call":["example eval_each_fail_fast "," before_all_parts "]}," Spec Example ExampleGroupHierarchy initialize":{"type":"method","name":"initialize","children":[],"call":[" flatten! "," unshift ","example_group_class superclass example_group_hierarchy ","example_group_class superclass ","example_group_class superclass respond_to? ","example_group_class respond_to? "," push "]}," Spec Example ExampleGroupFactory ClassMethods []":{"type":"method","name":"[]","children":[],"call":["@example_group_types [] "]}," Spec Example ExampleGroupFactory ClassMethods register_example_group":{"type":"method","name":"register_example_group","children":[],"call":["listener register_example_group "," example_group_creation_listeners each "," example_group_creation_listeners "]}," Spec Example ExampleGroupFactory ClassMethods example_group_creation_listeners":{"type":"method","name":"example_group_creation_listeners","children":[],"call":[]}," Spec Example ExampleDescription ==":{"type":"method","name":"==","children":[],"call":["(send\n  (send\n    (lvar :other) :description) :==\n  (send nil :description)) & ","other backtrace == "," backtrace ","other backtrace ","other description == "," description ","other description "]}," Spec Example ExampleDescription initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec DSL Matchers create":{"type":"method","name":"create","children":[],"call":["Spec Matchers Matcher  new "," define_method "]}," Spec Runner SpecParser parse_location":{"type":"method","name":"parse_location","children":[],"call":[" Integer ","location =~ "]}," Spec Runner Options require_ruby_debug":{"type":"method","name":"require_ruby_debug","children":[],"call":[" require ","ENV  [] "]}," Kernel debugger":{"type":"method","name":"debugger","children":[],"call":["$stderr puts "]}," Spec Matchers Pretty _pretty_print":{"type":"method","name":"_pretty_print","children":[],"call":["result << ","item inspect ","index < ","array length - ","array length ","array each_with_index "]}," Spec Matchers Pretty to_sentence":{"type":"method","name":"to_sentence","children":[],"call":["words [] ","words [] join ","words length ","w inspect ","words map "]}," Spec Matchers Pretty split_words":{"type":"method","name":"split_words","children":[],"call":["sym to_s gsub ","sym to_s "]}," Spec Matchers Matcher expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" to_sentence "]}," Spec Matchers DSL create":{"type":"method","name":"create","children":[],"call":["Spec Matchers Matcher  new "," define_method "," define ","Spec  deprecate "]}," Spec Example set_location":{"type":"method","name":"set_location","children":[],"call":["args last [] ","args last ","args << ","Hash  === "]}," Spec Example Subject ExampleGroupMethods implicit_subject":{"type":"method","name":"implicit_subject","children":[],"call":[" description_args first "," description_args "," lambda "," described_class new "," described_class "," proc "]}," Spec Example Subject ExampleGroupMethods explicit_subject":{"type":"method","name":"explicit_subject","children":[],"call":[" superclass instance_variable_get "," superclass ","group superclass ","group explicit_subject_block ","group respond_to? ","group superclass  superclass ","group superclass  explicit_subject_block ","group superclass  respond_to? "]}," Spec Example ExampleProxy ==":{"type":"method","name":"==","children":[],"call":["(send\n  (send\n    (lvar :other) :description) :==\n  (send nil :description)) & ","other backtrace == "," backtrace ","other backtrace ","other description == "," description ","other description ","other location == "," location ","other location "]}," Spec Example ExampleProxy update":{"type":"method","name":"update","children":[],"call":[]}," Spec Example ExampleProxy backtrace":{"type":"method","name":"backtrace","children":[],"call":[" location ","Spec  deprecate "]}," Spec Example ExampleProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Example ExampleGroupProxy build_description_from":{"type":"method","name":"build_description_from","children":[],"call":["text == ","description << ","arg to_s ","arg to_s =~ ","description == ","args inject "]}," Spec Example ExampleGroupProxy ==":{"type":"method","name":"==","children":[],"call":["other description == "," description ","other description "]}," Spec Example ExampleGroupProxy filtered_description":{"type":"method","name":"filtered_description","children":[],"call":[" build_description_from ","description =~ "," nested_descriptions collect "," nested_descriptions ","ExampleGroupMethods  build_description_from ","description gsub ","Spec  deprecate "]}," Spec Example ExampleGroupProxy backtrace":{"type":"method","name":"backtrace","children":[],"call":["Spec  deprecate "]}," Spec Example ExampleGroupProxy initialize":{"type":"method","name":"initialize","children":[],"call":["example_group backtrace ","example_group location ","example_group example_proxies ","example_group nested_descriptions ","example_group description ","@options delete ","example_group options dup ","example_group options ","example_group options dup  delete "]}," Spec Example ExampleGroupMethods example_proxies":{"type":"method","name":"example_proxies","children":[],"call":[]}," Spec Runner Reporter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["f example_group_started "," formatters each "," formatters "]}," Spec Runner Options formatter_options":{"type":"method","name":"formatter_options","children":[],"call":["OpenStruct  new "," dry_run "," autospec "," colour "]}," Spec Runner Formatter SpecdocFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":[" output flush "," output "," output puts ","example_group description "]}," Spec Runner Formatter NOOPMethodMissing method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Spec Runner Formatter NOOPMethodMissing respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" private_methods include? ! "," private_methods include? ","message to_s "," private_methods ","(send\n  (send nil :private_methods) :any?) ! ","(send\n  (lvar :message) :to_s) include? ","message to_sym "," private_methods any? "]}," Spec Runner Formatter NestedTextFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["example_group nested_descriptions "," output puts ","   * "," output ","nested_description == ","@last_nested_descriptions [] ","example_group nested_descriptions each_with_index ","INDENT  * ","example_group nested_descriptions [] == ","example_group nested_descriptions [] ","example_group nested_descriptions  [] "]}," Spec Runner Formatter HtmlFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["@output flush ","@output puts "," h ","example_group description "," example_group_number "," example_group_number == "]}," Spec Runner Formatter BaseTextFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":[]}," Spec Runner Formatter BaseFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":[]}," Spec Runner Configuration scope_from":{"type":"method","name":"scope_from","children":[],"call":["args [] "]}," Spec Runner Configuration scope_and_options":{"type":"method","name":"scope_and_options","children":[],"call":[" scope_from "," args_and_options "]}," Spec Matchers SimpleMatcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@given inspect ","@description inspect "," explanation ","@description nil? "]}," Spec Matchers SimpleMatcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@given inspect ","@description inspect "," explanation ","@description nil? "]}," Spec Matchers Matcher diffable":{"type":"method","name":"diffable","children":[],"call":[]}," Spec Matchers Matcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," Spec Matchers MatchArray safe_sort":{"type":"method","name":"safe_sort","children":[],"call":["array sort ","item respond_to? ","array all? "]}," Spec Matchers DSL define":{"type":"method","name":"define","children":[],"call":["Spec Matchers Matcher  new "," define_method "]}," Spec Matchers be_a_kind_of":{"type":"method","name":"be_a_kind_of","children":[],"call":["actual kind_of? "," match ","Matcher  new "]}," Spec Matchers be_an_instance_of":{"type":"method","name":"be_an_instance_of","children":[],"call":["actual instance_of? "," match ","Matcher  new "]}," Spec Expectations NegativeExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," Spec Expectations PositiveExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," Kernel should_not":{"type":"method","name":"should_not","children":[],"call":["Spec Expectations NegativeExpectationHandler  handle_matcher "]}," Kernel should":{"type":"method","name":"should","children":[],"call":["Spec Expectations PositiveExpectationHandler  handle_matcher "]}," Spec Example ExampleGroupMethods examples_were_specified?":{"type":"method","name":"examples_were_specified?","children":[],"call":["run_options examples empty? ! ","run_options examples empty? ","run_options examples "]}," Spec Example ExampleGroupMethods run_examples":{"type":"method","name":"run_examples","children":[],"call":["example_group_instance instance_variable_hash ","example_group_instance execute "," new "," example_implementations [] "," example_implementations ","examples each "," new  instance_variable_hash "," new  execute "]}," Spec Example NoDescriptionError initialize":{"type":"method","name":"initialize","children":[],"call":[" class message "," class "]}," Spec Example ArgsAndOptions WithOptions options":{"type":"method","name":"options","children":[],"call":[" last "]}," Spec Example ArgsAndOptions set_location":{"type":"method","name":"set_location","children":[],"call":["options [] "]}," Spec Example ArgsAndOptions add_options":{"type":"method","name":"add_options","children":[],"call":["args options ","args options merge! ","args extend ","args << ","Hash  === ","args last "]}," Spec Example ArgsAndOptions args_and_options":{"type":"method","name":"args_and_options","children":[],"call":["args pop ","Hash  === ","args last "]}," Spec HashWithDeprecationNotice []=":{"type":"method","name":"[]=","children":[],"call":["Spec  deprecate "]}," Spec HashWithDeprecationNotice initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec warn":{"type":"method","name":"warn","children":[],"call":["Kernel  warn "]}," Spec deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "," caller [] "," caller ","Spec Runner  configuration suppress_deprecation_warnings? ","Spec Runner  configuration "]}," Spec Mocks Mock build_name_from_options":{"type":"method","name":"build_name_from_options","children":[],"call":["{ + + ","{ + ","vals join ","coll << ","pair last inspect ","pair last ","pair first ","options inject "]}," Spec Mocks Methods stub_chain":{"type":"method","name":"stub_chain","children":[],"call":[" stub! ","methods shift "," stub! and_return ","methods length > ","methods length ","next_in_chain stub_chain ","Object  new ","matching_stub invoke_return_block stub_chain ","matching_stub invoke_return_block "," __mock_proxy find_matching_method_stub ","methods [] "," __mock_proxy ","Object  new  stub_chain "," __mock_proxy find_matching_method_stub  invoke_return_block stub_chain "," __mock_proxy find_matching_method_stub  invoke_return_block "]}," Spec Example ExampleMethods expect":{"type":"method","name":"expect","children":[],"call":["block extend "]}," Spec Example ExampleGroupMethods options":{"type":"method","name":"options","children":[],"call":[]}," Spec Runner Options example_line":{"type":"method","name":"example_line","children":[],"call":["Spec Runner LineNumberQuery  new example_line_for "," line_number "," files first "," files ","Spec Runner LineNumberQuery  new "]}," Spec Runner Options line_number_requested?":{"type":"method","name":"line_number_requested?","children":[],"call":[" line_number ! ! "," line_number ! "," line_number "]}," Spec Runner LineNumberQuery parse_location":{"type":"method","name":"parse_location","children":[],"call":[" Integer ","location =~ "]}," Spec Runner LineNumberQuery is_best_match?":{"type":"method","name":"is_best_match?","children":[],"call":["example_line > "," best_match [] to_i "," best_match [] "," best_match ","example_line <= ","file == ","File  expand_path "]}," Spec Runner LineNumberQuery consider_example_for_best_match":{"type":"method","name":"consider_example_for_best_match","children":[],"call":[" best_match []= "," best_match "," best_match clear "," is_best_match? "," parse_location ","example location "]}," Spec Runner LineNumberQuery consider_example_group_for_best_match":{"type":"method","name":"consider_example_group_for_best_match","children":[],"call":[" best_match []= "," best_match "," best_match clear "," is_best_match? "," parse_location ","example_group location "]}," Spec Runner LineNumberQuery determine_best_match":{"type":"method","name":"determine_best_match","children":[],"call":[" consider_example_for_best_match ","example_group examples each ","example_group examples "," consider_example_group_for_best_match ","example_group location ","@run_options example_groups each ","@run_options example_groups ","File  expand_path "," best_match clear "," best_match "]}," Spec Runner LineNumberQuery example_line_for":{"type":"method","name":"example_line_for","children":[],"call":[" best_match [] "," best_match "," determine_best_match "]}," Spec Runner LineNumberQuery spec_name_for":{"type":"method","name":"spec_name_for","children":[],"call":[" best_match [] description "," best_match [] "," best_match "," determine_best_match ","File  expand_path "," best_match clear "]}," Spec Runner LineNumberQuery initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers Matcher making_declared_methods_public":{"type":"method","name":"making_declared_methods_public","children":[],"call":["st __send__ ","(send\n  (send nil :private_methods) :-\n  (lvar :orig_private_methods)) each "," private_methods - "," private_methods ","(send\n  (send nil :private_methods) :-\n  (lvar : private_methods )) each "]}," Spec Example NoDescriptionError message":{"type":"method","name":"message","children":[],"call":[]}," Spec Expectations Differs Default diff_as_hash":{"type":"method","name":"diff_as_hash","children":[],"call":["o << "," diff_as_object ","target [] inspect ","target [] ","expected [] inspect ","expected [] ","key inspect ","(send\n  (send\n    (lvar :expected) :keys) :sort) each ","a to_s <=> ","b to_s ","a to_s ","expected keys sort ","expected keys ","target [] == ","value is_a? ","expected delete_if ","o << << << ","o << << ","extra_target_keys inspect ","extra_target_keys empty? ! ","extra_target_keys empty? ","extra_expected_keys inspect ","extra_expected_keys empty? ! ","extra_expected_keys empty? ","target keys - ","target keys ","expected keys - ","target keys -  inspect ","target keys -  empty? ! ","target keys -  empty? ","expected keys -  inspect ","expected keys -  empty? ! ","expected keys -  empty? "]}," Spec Mocks Proxy reset_proxied_method":{"type":"method","name":"reset_proxied_method","children":[],"call":[" remove_method "," alias_method "," method_defined? "," target_metaclass instance_eval "," target_metaclass "," munge "]}," Spec Mocks Proxy remove_stub":{"type":"method","name":"remove_stub","children":[],"call":[" raise ","@stubs delete "," reset_proxied_method ","s matches_name? ","@stubs detect ","message to_sym ","message to_sym  to_sym "]}," Spec Mocks Methods unstub!":{"type":"method","name":"unstub!","children":[],"call":[" __mock_proxy remove_stub "," __mock_proxy "]}," Spec Mocks MessageExpectation matches_name?":{"type":"method","name":"matches_name?","children":[],"call":["@sym == "]}," Spec Runner Options ignore_backtrace_patterns":{"type":"method","name":"ignore_backtrace_patterns","children":[],"call":["@backtrace_tweaker ignore_patterns ","Spec Runner  configuration ignored_backtrace_patterns ","Spec Runner  configuration "]}," Spec Runner Options which_heckle_runner":{"type":"method","name":"which_heckle_runner","children":[],"call":["Spec Ruby  version to_f == ","Spec Ruby  version to_f ","Spec Ruby  version ","p =~ ","(regexp\n  (str \"mswin\")\n  (regopt)) detect "]}," Spec Runner Options add_dir_from_project_root_to_load_path":{"type":"method","name":"add_dir_from_project_root_to_load_path","children":[],"call":["load_path unshift ","load_path include? ","File  join "," project_root "," project_root nil? "]}," Spec Runner Options determine_project_root":{"type":"method","name":"determine_project_root","children":[],"call":["File  exists? ","File  join "," Pathname ascend "," Pathname ","File  expand_path "]}," Spec Runner Options project_root":{"type":"method","name":"project_root","children":[],"call":[" determine_project_root "," require "]}," Spec Runner OptionParser write_options_file":{"type":"method","name":"write_options_file","children":[],"call":["@options examples_should_not_be_run ","@out_stream puts ","io puts ","@argv join ","File  open "]}," Spec Runner Formatter BaseTextFormatter output_to_file?":{"type":"method","name":"output_to_file?","children":[],"call":["File  === "]}," Spec Runner Configuration ignored_backtrace_patterns":{"type":"method","name":"ignored_backtrace_patterns","children":[],"call":[]}," Spec Runner Configuration ignore_backtrace_patterns":{"type":"method","name":"ignore_backtrace_patterns","children":[],"call":[]}," Spec Runner QuietBacktraceTweaker ignored_patterns":{"type":"method","name":"ignored_patterns","children":[],"call":["IGNORE_PATTERNS  + "]}," Spec Runner QuietBacktraceTweaker ignore_patterns":{"type":"method","name":"ignore_patterns","children":[],"call":["Regexp  new ","patterns flatten map ","patterns flatten "]}," Spec Runner QuietBacktraceTweaker initialize":{"type":"method","name":"initialize","children":[],"call":[" ignore_patterns "]}," Spec Runner BacktraceTweaker ignored_patterns":{"type":"method","name":"ignored_patterns","children":[],"call":[]}," Spec Runner BacktraceTweaker ignore_patterns":{"type":"method","name":"ignore_patterns","children":[],"call":[]}," Spec Runner BacktraceTweaker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Mocks Mock extract_option":{"type":"method","name":"extract_option","children":[],"call":["target []= ","source delete ","source [] "]}," Spec Mocks Mock extract_options":{"type":"method","name":"extract_options","children":[],"call":[" extract_option "]}," Spec Mocks ExampleMethods __declare_double":{"type":"method","name":"__declare_double","children":[],"call":["Spec Mocks Mock  new ","args last []= ","args last ","args << ","Hash  === "]}," Spec Mocks ExampleMethods stub":{"type":"method","name":"stub","children":[],"call":[" __declare_double "]}," Spec Mocks ExampleMethods double":{"type":"method","name":"double","children":[],"call":[" __declare_double "]}," Spec Mocks ArgumentMatchers AnyArgMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Spec Matchers InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," Spec Example Subject ExampleGroupMethods its":{"type":"method","name":"its","children":[],"call":[" it "," send "," define_method "," describe "," instance_eval "," class class_eval "," class "," example "]}," Spec Example ExampleGroupMethods let":{"type":"method","name":"let","children":[],"call":[" instance_eval ","@assignments [] "," define_method "]}," Spec Runner Options drb_port":{"type":"method","name":"drb_port","children":[],"call":["@drb_port to_i "]}," Spec Runner DrbCommandLine port":{"type":"method","name":"port","children":[],"call":[]}," Spec Mocks Proxy almost_matching_expectation":{"type":"method","name":"almost_matching_expectation","children":[],"call":[" find_almost_matching_expectation "," find_almost_matching_ find_almost_matching_expectation xp find_almost_matching_expectation ctation "]}," Spec Mocks Proxy ok_to_invoke_stub?":{"type":"method","name":"ok_to_invoke_stub?","children":[],"call":["expectation called_max_times? ","expectation ! "]}," Spec Mocks Proxy record_almost_matching_expectation":{"type":"method","name":"record_almost_matching_expectation","children":[],"call":[" raise_unexpected_message_args_error "," has_negative_expectation? "," null_object? ","expectation advise "]}," Spec Mocks Proxy invoke_expectation":{"type":"method","name":"invoke_expectation","children":[],"call":["expectation invoke "]}," Spec Mocks Proxy record_stub":{"type":"method","name":"record_stub","children":[],"call":["stub invoke ","e advise "," almost_matching_expectation "]}," Spec Mocks Proxy build_expectation":{"type":"method","name":"build_expectation","children":[],"call":["MessageExpectation  new "," block_given? ","stub build_child "," find_matching_method_stub "," find_matching_method_stub  build_child "," find_matching_method_ find_matching_method_stub  "]}," Spec Mocks BaseExpectation eval_block":{"type":"method","name":"eval_block","children":[],"call":["block call ","@eval_context instance_exec "]}," Spec Matchers raise_exception":{"type":"method","name":"raise_exception","children":[],"call":["Matchers RaiseException  new "]}," Spec Matchers RaiseException negative_expectation?":{"type":"method","name":"negative_expectation?","children":[],"call":["s =~ "," caller first find "," caller first "," caller "]}," Spec Matchers RaiseException given_exception":{"type":"method","name":"given_exception","children":[],"call":["@actual_exception inspect ","@actual_exception nil? "]}," Spec Matchers RaiseException expected_exception":{"type":"method","name":"expected_exception","children":[],"call":["@expected_message inspect "]}," Spec Matchers RaiseException description":{"type":"method","name":"description","children":[],"call":[" expected_exception "]}," Spec Matchers RaiseException failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" given_exception "," expected_exception "]}," Spec Matchers RaiseException failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" given_exception "," expected_exception ","@actual_exception message "]}," Spec Matchers RaiseException verify_message":{"type":"method","name":"verify_message","children":[],"call":["@expected_message == ","@actual_exception message ","@expected_message =~ "]}," Spec Matchers RaiseException eval_block":{"type":"method","name":"eval_block","children":[],"call":["@block [] "]}," Spec Matchers RaiseException matches?":{"type":"method","name":"matches?","children":[],"call":["@raised_expected_exception & "," eval_block "," negative_expectation? "," verify_message ","given_proc call "]}," Spec Matchers RaiseException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spec Matchers Matcher call_cached":{"type":"method","name":"call_cached","children":[],"call":["@messages [] call ","@messages [] ","@messages [] arity == ","@messages [] arity "]}," Spec Matchers Matcher cache":{"type":"method","name":"cache","children":[],"call":["@messages []= "]}," Spec Matchers Matcher chain":{"type":"method","name":"chain","children":[],"call":["block call "," define_method "," class class_eval "," class "]}," Spec Matchers Matcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[" match "]}," Spec Matchers BeSameAs description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," Spec Matchers BeSameAs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," Spec Matchers BeSameAs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Spec Matchers BeSameAs matches?":{"type":"method","name":"matches?","children":[],"call":["@actual equal? "]}," Spec Matchers BeSameAs initialize":{"type":"method","name":"initialize","children":[],"call":["args shift "]}," Spec Matchers BePredicate prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words "]}," Spec Matchers BePredicate prefix_and_expected":{"type":"method","name":"prefix_and_expected","children":[],"call":["symbol to_s =~ ","symbol to_s "]}," Spec Matchers BePredicate parse_expected":{"type":"method","name":"parse_expected","children":[],"call":[" prefix_and_expected "]}," Spec Matchers BePredicate present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," Spec Matchers BePredicate predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," Spec Matchers BePredicate description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "," prefix_to_sentence "]}," Spec Matchers BePredicate failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," Spec Matchers BePredicate failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," Spec Matchers BePredicate matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "]}," Spec Matchers BePredicate initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_expected ","args shift "]}," Spec Matchers BeComparedTo description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," Spec Matchers BeComparedTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "]}," Spec Matchers BeComparedTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Spec Matchers BeComparedTo matches?":{"type":"method","name":"matches?","children":[],"call":["@actual __send__ "]}," Spec Matchers BeComparedTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec normalize":{"type":"method","name":"normalize","children":[],"call":["result []= ","File  expand_path ","files_to_test keys inject ","files_to_test keys "]}," Spec Runner Configuration suppress_deprecation_warnings?":{"type":"method","name":"suppress_deprecation_warnings?","children":[],"call":[]}," Spec Runner Configuration suppress_deprecation_warnings!":{"type":"method","name":"suppress_deprecation_warnings!","children":[],"call":[]}," Spec Example ExampleGroupMethods let!":{"type":"method","name":"let!","children":[],"call":[" __send__ "," before "," let "]}," Spec Runner HeckleRunner heckle_class_method":{"type":"method","name":"heckle_class_method","children":[],"call":[" heckle_method "]}," Spec Mocks Proxy find_almost_matching_stub":{"type":"method","name":"find_almost_matching_stub","children":[],"call":["stub matches_name_but_not_args ","@stubs find "]}}