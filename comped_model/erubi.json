{" Tilt ErubiTemplate precompiled":{"type":"method","name":"precompiled","children":[],"call":["offset - "]}," Tilt ErubiTemplate precompiled_postamble":{"type":"method","name":"precompiled_postamble","children":[],"call":["(ivar :@outvar) join "]}," Tilt ErubiTemplate precompiled_preamble":{"type":"method","name":"precompiled_preamble","children":[],"call":["(zsuper) join "]}," Tilt ErubiTemplate prepare":{"type":"method","name":"prepare","children":[],"call":["@engine bufvar ","Erubi Engine  new "," data ","@options merge! ","engine_class new ","@options [] ","@engine src dup ","@engine src ","capture == ","Erubi Engine  new  bufvar ","engine_class new  bufvar ","@options []  new ","Erubi Engine  new  src dup ","engine_class new  src dup ","Erubi Engine  new  src ","engine_class new  src ","@options []  == "]}," Erubi Engine add_code":{"type":"method","name":"add_code","children":[],"call":["@src << ","code [] == ","code [] "," terminate_expression "]}," Erubi Engine add_text":{"type":"method","name":"add_text","children":[],"call":["@src << << << ","@src << << ","text gsub ","@src << ","text empty? ","@src << << << << << ","@src << << << << ","text gsub! ","text frozen? "," with_buffer ","text gsub  gsub ","text gsub  empty? ","text gsub  gsub! ","text gsub  frozen? "]}," Erubi Engine initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","src << ","src [] == ","src [] "," add_text ","input [] ","pos == "," add_code ","ch == ","\n * ","code count + ","code count ","src << << << ","src << << ","(send\n  (lvar :indicator) :==\n  (str \"=\")) ^ ","indicator == ","tailch empty? ! ","tailch empty? ","text empty? ! ","text empty? ","text []= ","text dup ","text =~ ","s =~ ","text [] ","rindex + ","text rindex ","text [] == ","indicator [] ","match end ","match begin - ","match begin ","Regexp  last_match ","input scan ","properties [] ","String  new ","properties [] != ","properties fetch "," handle ","src freeze "," add_postamble "," add_expression ","(str \"\\\\A[ \\\\t]*\\\\z\") send ","RUBY_VERSION  >= "," add_expression_result_escaped "," add_expression_result ","text [] rc << ","String  new  << ","text [] rc [] == ","String  new  [] == ","text [] rc [] ","String  new  [] "," add_input []  ","icode count + put [] ","potext []  == ","match end  == ","indicator []  == ","code coucode count + t + ","code coucode count + t ","text [] rc << << << ","String  new  << << << ","text [] rc << << ","String  new  << << ","(secode count + d\n  (lvar :icode count + dicator) :==\n  (str \"=\")) ^ ","(text [] end\n  (lvar :indicator) :==\n  (text [] tr \"=\")) ^ ","icode count + dicator == ","tailindicator []  empty? ! ","tailindicator []  empty? ","input []  empty? ! ","input []  empty? ","input []  []= ","input []  dup ","input []  =~ ","text []  =~ ","input []  [] ","ricode count + dex + ","text rindex  + ","text ricode count + dex ","text text rindex  ","input []  rindex ","input []  [] == ","icode count + dicator [] ","match ecode count + d ","matindicator []  end ","Regexp  last_match  end ","match begicode count +  - ","matindicator []  begin - ","Regexp  last_match  begin - ","match begicode count +  ","matindicator []  begin ","Regexp  last_match  begin ","Regexp  latext [] t_match ","Regexp  last_matindicator []  ","Regexp  last_Regexp  last_match  ","icode count + put scacode count +  ","input text [] can ","propertietext []  [] ","Stricode count + g  code count + ew ","propertietext []  [] != ","propertietext []  fetch ","properties fetindicator []  "," hacode count + dle ","text [] rc freeze ","String  new  freeze "," add_potext [] tamble "," add_match end tamble "," add_expressiocode count +  "," add_expretext [] text [] ion ","(str \"\\\\A[ \\\\t]*\\\\z\") secode count + d ","(text [] tr \"\\\\A[ \\\\t]*\\\\z\") text [] end "," add_expressiocode count + _result_escaped "," add_expretext [] text [] ion_retext [] ult_etext [] caped "," add_expressiocode count + _result "," add_expretext [] text [] ion_retext [] ult "]}," Erubi h":{"type":"method","name":"h","children":[],"call":[]}," Tilt ErubiTemplate precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":["@engine src "]}," Erubi Engine handle":{"type":"method","name":"handle","children":[],"call":[" raise "]}," Erubi CaptureEngine handle":{"type":"method","name":"handle","children":[],"call":[" add_text "," src << << "," src << "," src ","(send\n  (lvar :indicator) :==\n  (str \"|=\")) ^ ","indicator == ","tailch empty? ! ","tailch empty? "]}," Erubi CaptureEngine initialize":{"type":"method","name":"initialize","children":[],"call":["properties [] ","properties fetch ","Hash  [] ","Hash  []  [] ","Hash  []  fetch "]}," Erubi Buffer escape":{"type":"method","name":"escape","children":[],"call":[" Erubi  h "]}," Erubi Buffer new_buffer":{"type":"method","name":"new_buffer","children":[],"call":["String  new "]}," Erubi Buffer to_s":{"type":"method","name":"to_s","children":[],"call":[" buffer to_s "," buffer "]}," Erubi Buffer escape=":{"type":"method","name":"escape=","children":[],"call":[" buffer << "," escape ","buf to_s "," buffer ","@bufs pop "," @bufs pop fer << ","@bufs pop  to_s "," @bufs pop fer ","@@bufs pop s pop "]}," Erubi Buffer append=":{"type":"method","name":"append=","children":[],"call":[" buffer << ","buf to_s "," buffer ","@bufs pop "," @bufs pop fer << ","@bufs pop  to_s "," @bufs pop fer ","@@bufs pop s pop "]}," Erubi Buffer before_append!":{"type":"method","name":"before_append!","children":[],"call":["@bufs << "," new_buffer "]}," Erubi Buffer <<":{"type":"method","name":"<<","children":[],"call":[" buffer << "," buffer "]}," Erubi Buffer buffer":{"type":"method","name":"buffer","children":[],"call":["@bufs last "]}," Erubi Buffer initialize":{"type":"method","name":"initialize","children":[],"call":[" new_buffer "]}," Erubi Engine add_postamble":{"type":"method","name":"add_postamble","children":[],"call":[" src << "," src ","@src << "," terminate_expression "]}," Erubi Engine add_expression_result_escaped":{"type":"method","name":"add_expression_result_escaped","children":[],"call":["@src << << << << << << << ","@src << << << << << << ","@src << << << << << ","@src << << << << ","@src << << << ","@src << << ","@src << "," with_buffer "]}," Erubi Engine add_expression_result":{"type":"method","name":"add_expression_result","children":[],"call":["@src << << << << << ","@src << << << << ","@src << << << ","@src << << ","@src << "," with_buffer "]}," Erubi Engine add_expression":{"type":"method","name":"add_expression","children":[],"call":[" add_expression_result_escaped "," add_expression_result ","(send\n  (lvar :indicator) :==\n  (str \"=\")) ^ ","indicator == "]}," Erubi CaptureEndEngine handle":{"type":"method","name":"handle","children":[],"call":[" add_text "," src << << << "," src << << "," src << "," src ","tailch empty? ! ","tailch empty? ","(send\n  (begin\n    (send\n      (lvar :indicator) :==\n      (str \"|=\"))) :^\n  (ivar :@escape_capture)) ! ","(send\n  (lvar :indicator) :==\n  (str \"|=\")) ^ ","indicator == ","@src << << ","@src << "," terminate_expression ","(send\n  (begin\n    (send\n      (lvar :indicator) :==\n      (str \"|=\"))) :^\n  (ivar :@(send\n  (begin\n    (send\n      (lvar :indicator) :==\n      (str \"|=\"))) :^\n  (ivar :@escape_capture)) ! )) ! "]}," Erubi CaptureEndEngine initialize":{"type":"method","name":"initialize","children":[],"call":["properties [] ","properties fetch ","Hash  [] ","Hash  []  [] ","Hash  []  fetch "]}," Erubi Engine terminate_expression":{"type":"method","name":"terminate_expression","children":[],"call":["@src << "]}," Erubi Engine with_buffer":{"type":"method","name":"with_buffer","children":[],"call":["@src << ","@src << << "]}}