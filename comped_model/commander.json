{" Commander UI ProgressBar erase_line":{"type":"method","name":"erase_line","children":[],"call":["$terminal instance_variable_get print ","$terminal instance_variable_get ","HighLine  default_instance instance_variable_get print ","HighLine  default_instance instance_variable_get ","HighLine  default_instance "]}," Commander UI ProgressBar increment":{"type":"method","name":"increment","children":[],"call":[" show ","@tokens merge! ","tokens is_a? "]}," Commander UI ProgressBar completed?":{"type":"method","name":"completed?","children":[],"call":["@step == "]}," Commander UI ProgressBar finished?":{"type":"method","name":"finished?","children":[],"call":["@step == ","@total_steps + "]}," Commander UI ProgressBar show":{"type":"method","name":"show","children":[],"call":["$terminal say ","UI  replace_tokens << ","UI  replace_tokens "," generate_tokens ","@complete_message is_a? "," completed? "," erase_line "," finished? ","HighLine  default_instance say ","HighLine  default_instance "]}," Commander UI ProgressBar generate_tokens":{"type":"method","name":"generate_tokens","children":[],"call":["(pair\n  (sym :title)\n  (ivar :@title)) merge! ","%0.2fs % "," time_remaining "," time_elapsed "," steps_remaining "," progress_bar "," percent_complete ","@step > "," format ","@step positive? "]}," Commander UI ProgressBar progress_bar":{"type":"method","name":"progress_bar","children":[],"call":["(send\n  (ivar :@progress_str) :*\n  (begin\n    (send\n      (send\n        (ivar :@width) :*\n        (send nil :percent_complete)) :/\n      (int 100)))) ljust ","@progress_str * ","@width * / ","@width * "," percent_complete "]}," Commander UI ProgressBar steps_remaining":{"type":"method","name":"steps_remaining","children":[],"call":["@total_steps - "]}," Commander UI ProgressBar time_remaining":{"type":"method","name":"time_remaining","children":[],"call":["(send\n  (send nil :time_elapsed) :/\n  (ivar :@step)) * "," steps_remaining "," time_elapsed / "," time_elapsed "]}," Commander UI ProgressBar time_elapsed":{"type":"method","name":"time_elapsed","children":[],"call":["Time  now - ","Time  now "]}," Commander UI ProgressBar percent_complete":{"type":"method","name":"percent_complete","children":[],"call":["@step * / ","@step * ","@total_steps zero? "]}," Commander UI ProgressBar initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","Time  now "]}," Commander UI replace_tokens":{"type":"method","name":"replace_tokens","children":[],"call":["str gsub ","value to_s ","hash inject ","string gsub "]}," Commander UI AskForClass method_missing":{"type":"method","name":"method_missing","children":[],"call":["$terminal ask ","Kernel  const_get ","1 capitalize ","args first ","meth to_s ","k to_s downcase == ","k to_s downcase ","k to_s ","available_classes find ","const respond_to? ","const class == ","const class ","(send\n  (begin\n    (send\n      (send\n        (const nil :Object) :constants) :-\n      (const nil :DEPRECATED_CONSTANTS))) :map) select ","Object  const_get ","(send\n  (send\n    (const nil :Object) :constants) :-\n  (const nil :DEPRECATED_CONSTANTS)) map ","Object  constants - ","Object  constants ","Regexp  last_match [] ","Regexp  last_match ","arguments first "," fail ","arguments count ","arguments count != ","method_name to_s =~ ","method_name to_s ","HighLine  default_instance ask ","HighLine  default_instance ","const instance_of? ","(send\n  (begin\n    (send\n      (send\n        (const nil :Object) :constants) :-\n      (const nil :DEPRECATED_CONSTANTS))) :map) compact select ","(send\n  (begin\n    (send\n      (send\n        (const nil :Object) :constants) :-\n      (const nil :DEPRECATED_CONSTANTS))) :map) compact "]}," Commander UI progress":{"type":"method","name":"progress","children":[],"call":["bar increment ","arr each ","ProgressBar  new ","arr length ","bar show ","ProgressBar  new  increment ","ProgressBar  new  show "]}," Commander UI enable_paging":{"type":"method","name":"enable_paging","children":[],"call":["write close ","read close ","$stderr reopen ","$stderr tty? ","$stdout reopen "," exec ","ENV  [] ","ENV  []= ","Kernel  select ","$stdin reopen ","Kernel  fork ","IO  pipe ","$stdout tty? ","Platform  jruby? ","read closed? ! ","read closed? ","write closed? ! ","write closed? ","Process  respond_to? ","ENV  key? "]}," Commander UI ask_editor":{"type":"method","name":"ask_editor","children":[],"call":["pipe read ","pipe close_write ","pipe puts ","input to_s ","input nil? ","IO  popen ","editor to_s ","tmpfile unlink ","IO  read ","tmpfile path "," system ","tmpfile path shellescape ","tmpfile close ","tmpfile write ","Tempfile  new ","Commander Runner  instance program downcase ","Commander Runner  instance program ","Commander Runner  instance "," available_editor "," available_editor  to_s ","Tempfile  new  unlink ","Tempfile  new  path ","Tempfile  new  path shellescape ","Tempfile  new  close ","Tempfile  new  write "," available_ available_editor  "]}," Commander UI reset_io":{"type":"method","name":"reset_io","children":[],"call":[]}," Commander UI io":{"type":"method","name":"io","children":[],"call":[" reset_io ","File  new "]}," Commander UI applescript":{"type":"method","name":"applescript","children":[],"call":["script gsub "]}," Commander UI converse":{"type":"method","name":"converse","children":[],"call":[" applescript strip to_sym "," applescript strip "," applescript ","statement << << ","statement << ","(op-asgn\n  (lvasgn :i) :+\n  (int 1)) == ","responses inject ","(send\n  (lvar :responses) :map) join ","value inspect ","responses map ","inner_statement << << ","inner_statement << "]}," Commander UI speak":{"type":"method","name":"speak","children":[],"call":[" applescript ","voice to_s inspect ","voice to_s ","message inspect ","Thread  new "]}," Commander UI log":{"type":"method","name":"log","children":[],"call":[" say ","%15s  %s % ","args join "," format "]}," Commander UI choose":{"type":"method","name":"choose","children":[],"call":[" say "]}," Commander UI password":{"type":"method","name":"password","children":[],"call":[" password ","pass empty? ","pass nil? ","q echo= "," ask ","  password word "," password  empty? "," password  nil? "]}," Commander Runner say":{"type":"method","name":"say","children":[],"call":["$terminal say ","HighLine  default_instance say ","HighLine  default_instance "]}," Commander Runner run_active_command":{"type":"method","name":"run_active_command","children":[],"call":[" active_command run "," args_without_command_name "," active_command ","@aliases [] + ","@aliases [] "," command_name_from_args to_s "," command_name_from_args "," alias? "," require_valid_command "]}," Commander Runner switch_to_sym":{"type":"method","name":"switch_to_sym","children":[],"call":[]}," Commander Runner separate_switches_from_description":{"type":"method","name":"separate_switches_from_description","children":[],"call":[]}," Commander Runner require_program":{"type":"method","name":"require_program","children":[],"call":[" raise "," program empty? "," program "," program nil? ","keys each "," fail "]}," Commander Runner global_option_proc":{"type":"method","name":"global_option_proc","children":[],"call":["value nil? ! ","value nil? "," active_command proxy_options << ","Runner  switch_to_sym ","switches last "," active_command proxy_options "," active_command "," active_command nil? "," lambda "," active_command global_options << "," active_command global_options "]}," Commander Runner parse_global_options":{"type":"method","name":"parse_global_options","children":[],"call":["(send\n  (send nil :options) :inject\n  (send\n    (const nil :OptionParser) :new)) parse! ","@args dup ","options on "," global_option_proc ","option [] "," options inject ","OptionParser  new "," options ","e args include? ","e args ","options reject ","parser parse! ","(send\n  (send nil :@args dup ) :inject\n  (send\n    (const nil :OptionParser) :new)) parse! ","@args dup  on "," @args dup  inject "," @args dup  ","@args dup  reject "]}," Commander Runner remove_global_options":{"type":"method","name":"remove_global_options","children":[],"call":["arg !~ ","arg_removed ! ","switch match ","switches any? ","args delete_if ","option [] ","options each ","switchHasArg ! ","arg [] == ","arg [] ","s length ","s [] ","s index ","switches map! ","s =~ ","switches empty? ","option [] dup ","switch_has_arg ! ","s [] == ","arg length "," expand_optionally_negative_switches ","arg == ","token !~ ","token_contains_option_argument ! ","token length ","index_of_equals nil? ! ","index_of_equals nil? ","token [] ","token index ","token == ","switchHasArg !  ! ","switch_has_arg !  ! ","option []  any? ","option [] dup  any? "," expand_optionally_negative_switches  any? ","option []  map! ","option [] dup  map! "," expand_optionally_negative_switches  map! ","option []  empty? ","option [] dup  empty? "," expand_optionally_negative_switches  empty? "," expand_optionally_negative_option []  "," expand_optionally_negative_option [] dup  "," expand_optionally_negative_ expand_optionally_negative_switches  ","token []  !~ ","index_of_equals nil? !  ! ","token [] _contains_option_argument ! ","token []  length ","token index  nil? ! ","token index  nil? ","token []  [] ","token []  index ","token []  == "]}," Commander Runner require_valid_command":{"type":"method","name":"require_valid_command","children":[],"call":[" raise "," caller ","command nil? "," fail "]}," Commander Runner create_default_commands":{"type":"method","name":"create_default_commands","children":[],"call":[" say "," help_formatter render_command "," help_formatter "," require_valid_command "," command ","args join "," help_formatter render ","args empty? "," enable_paging ","c when_called ","c example ","c description= ","c syntax= "," abort ","UI  enable_paging "," program "," longest_valid_command_name_from "," help_formatter render_ command  "," require_valid_ command  ","  command  "," longest_valid_ command _name_from "]}," Commander Runner program_defaults":{"type":"method","name":"program_defaults","children":[],"call":["File  basename "]}," Commander Runner help_formatter_alias_defaults":{"type":"method","name":"help_formatter_alias_defaults","children":[],"call":[]}," Commander Runner args_without_command_name":{"type":"method","name":"args_without_command_name","children":[],"call":["removed << ","removed include? ! ","removed include? ","parts include? ","@args dup delete_if ","@args dup "," command_name_from_args split "," command_name_from_args "]}," Commander Runner help_formatter":{"type":"method","name":"help_formatter","children":[],"call":[" program new "," program "]}," Commander Runner valid_command_names_from":{"type":"method","name":"valid_command_names_from","children":[],"call":["(str \"^\") match "," commands keys find_all "," commands keys "," commands ","(send\n  (lvar :args) :delete_if) join ","value =~ ","args delete_if ","arg_string =~ "," remove_global_options "," options ","(send\n  (lvar :args) :delete_if) join  =~ "]}," Commander Runner command_name_from_args":{"type":"method","name":"command_name_from_args","children":[],"call":[" valid_command_names_from sort last "," valid_command_names_from sort "," valid_command_names_from ","@args dup "," longest_valid_command_name_from "]}," Commander Runner active_command":{"type":"method","name":"active_command","children":[],"call":[" command "," command_name_from_args "]}," Commander Runner command_exists?":{"type":"method","name":"command_exists?","children":[],"call":["@commands [] ","name to_s "]}," Commander Runner alias?":{"type":"method","name":"alias?","children":[],"call":["@aliases include? ","name to_s "]}," Commander Runner add_command":{"type":"method","name":"add_command","children":[],"call":["@commands []= ","command name "]}," Commander Runner default_command":{"type":"method","name":"default_command","children":[],"call":[]}," Commander Runner alias_command":{"type":"method","name":"alias_command","children":[],"call":["@aliases []= ","alias_name to_s ","@commands []= "," command "]}," Commander Runner global_option":{"type":"method","name":"global_option","children":[],"call":["@options << ","Runner  separate_switches_from_description "]}," Commander Runner command":{"type":"method","name":"command","children":[],"call":["@commands [] ","name to_s "," add_command ","Commander Command  new "]}," Commander Runner program":{"type":"method","name":"program","children":[],"call":["@program [] ","@program []= ","args empty? ","args first ","@help_formatter_aliases [] ","args empty? ! ","key == ","@program [] []= ","args at ","args [] ","args count == ","args count "]}," Commander Runner version":{"type":"method","name":"version","children":[],"call":["%s %s % "," program "," format "]}," Commander Runner run!":{"type":"method","name":"run!","children":[],"call":[" abort "," run_active_command "," remove_global_options "," options "," parse_global_options "," global_option "," say "," version "," command run ","@args [] "," command "," program "," trap "," require_program "," program call ","e to_s ","@args - ","@@args -  [] ","@@args -  - "]}," Commander Runner instance":{"type":"method","name":"instance","children":[],"call":[]}," Commander Runner initialize":{"type":"method","name":"initialize","children":[],"call":[" create_default_commands "," program_defaults "," help_formatter_alias_defaults "]}," Commander HelpFormatter TerminalCompact template":{"type":"method","name":"template","children":[],"call":["ERB  new ","File  read ","File  join ","File  dirname ","RUBY_VERSION  < "]}," Commander HelpFormatter Terminal template":{"type":"method","name":"template","children":[],"call":["ERB  new ","File  read ","File  join ","File  dirname ","RUBY_VERSION  < "]}," Commander HelpFormatter Terminal render_command":{"type":"method","name":"render_command","children":[],"call":[" template result ","command get_binding "," template ","Context  new get_binding ","Context  new "]}," Commander HelpFormatter Terminal render":{"type":"method","name":"render","children":[],"call":[" template result ","@runner get_binding "," template ","ProgramContext  new get_binding ","ProgramContext  new "]}," Commander HelpFormatter Base render_command":{"type":"method","name":"render_command","children":[],"call":["command name "]}," Commander HelpFormatter Base render":{"type":"method","name":"render","children":[],"call":[]}," Commander HelpFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Object get_binding":{"type":"method","name":"get_binding","children":[],"call":[" binding "]}," Array parse":{"type":"method","name":"parse","children":[],"call":[]}," Commander Command inspect":{"type":"method","name":"inspect","children":[],"call":[" name "]}," Commander Command option_proc":{"type":"method","name":"option_proc","children":[],"call":[" proxy_options << ","Runner  switch_to_sym ","switches last "," proxy_options "," lambda "]}," Commander Command proxy_option_struct":{"type":"method","name":"proxy_option_struct","children":[],"call":["options __send__ "," proxy_options inject ","Options  new "," proxy_options ","value nil? "," proxy_options each_with_object ","(send\n  (send nil :global_options) :+\n  (send nil :proxy_options)) each_with_object "," global_options + "," global_options "]}," Commander Command call":{"type":"method","name":"call","children":[],"call":["object send ","object new ","object new send ","meth != ","object call "," proxy_option_struct ","@when_called shift "," proxy_options clear "," proxy_options ","@when_called [] ","meth == ","@when_called shift  send ","@when_called shift  new ","@when_called shift  new send ","@when_called shift  call "," proxy_ proxy_option_struct  clear "," proxy_ proxy_option_struct  "]}," Commander Command parse_options_and_call_procs":{"type":"method","name":"parse_options_and_call_procs","children":[],"call":["(send\n  (ivar :@options) :inject\n  (send\n    (const nil :OptionParser) :new)) parse! ","opts on ","option [] ","@options inject ","OptionParser  new ","args empty? ","(send\n  (ivar :@options) :each_with_object\n  (send\n    (const nil :OptionParser) :new)) parse! ","@options each_with_object "," proxy_options clear "," proxy_options "]}," Commander Command run":{"type":"method","name":"run","children":[],"call":[" call "," parse_options_and_call_procs "]}," Commander Command when_called":{"type":"method","name":"when_called","children":[],"call":[" raise ","block ! ","args empty? "," fail "]}," Commander Command option":{"type":"method","name":"option","children":[],"call":["@options << "," option_proc ","Runner  separate_switches_from_description "]}," Commander Command example":{"type":"method","name":"example","children":[],"call":["@examples << "]}," Commander Command initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Commander Command Options inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (send nil :__hash__) :map) join ","v inspect "," __hash__ map "," __hash__ "]}," Commander Command Options default":{"type":"method","name":"default","children":[],"call":["defaults merge! "]}," Commander Command Options method_missing":{"type":"method","name":"method_missing","children":[],"call":["@table [] ","@table []= ","args first ","meth to_s chop to_sym ","meth to_s chop ","meth to_s ","meth to_s =~ "]}," Commander Command Options __hash__":{"type":"method","name":"__hash__","children":[],"call":[]}," Commander Command Options initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Blank included":{"type":"method","name":"included","children":[],"call":[]}," Commander Platform jruby?":{"type":"method","name":"jruby?","children":[],"call":[]}," Commander UI color":{"type":"method","name":"color","children":[],"call":[" say ","$terminal color ","HighLine  default_instance color ","HighLine  default_instance "]}," Commander UI say_error":{"type":"method","name":"say_error","children":[],"call":[" say ","$terminal color ","args each ","HighLine  default_instance color ","HighLine  default_instance "]}," Commander UI say_warning":{"type":"method","name":"say_warning","children":[],"call":[" say ","$terminal color ","args each ","HighLine  default_instance color ","HighLine  default_instance "]}," Commander UI say_ok":{"type":"method","name":"say_ok","children":[],"call":[" say ","$terminal color ","args each ","HighLine  default_instance color ","HighLine  default_instance "]}," Commander UI available_editor":{"type":"method","name":"available_editor","children":[],"call":[" system ","name split first ","name split ","(lvar :preferred) compact find ","(lvar :preferred) compact ","ENV  [] "]}," Commander HelpFormatter indent":{"type":"method","name":"indent","children":[],"call":["text gsub ","\n + ","  * ","text to_s gsub ","text to_s "]}," Commander Runner never_trace!":{"type":"method","name":"never_trace!","children":[],"call":[]}," Commander Runner always_trace!":{"type":"method","name":"always_trace!","children":[],"call":[]}," Commander configure":{"type":"method","name":"configure","children":[],"call":[" run! ","configuration_module class_exec ","configuration_module extend ","Module  new ","Module  new  class_exec ","Module  new  extend "]}," Commander Delegates defined_commands":{"type":"method","name":"defined_commands","children":[],"call":[" Commander Runner  instance commands "," Commander Runner  instance "]}," Commander HelpFormatter ProgramContext max_key_length":{"type":"method","name":"max_key_length","children":[],"call":["longest size ","hash keys max_by ","hash keys ","hash keys max_by  size "]}," Commander HelpFormatter ProgramContext max_aliases_length":{"type":"method","name":"max_aliases_length","children":[],"call":[" max_key_length ","bind eval "]}," Commander HelpFormatter ProgramContext max_command_length":{"type":"method","name":"max_command_length","children":[],"call":[" max_key_length ","bind eval "]}," Commander HelpFormatter ProgramContext decorate_binding":{"type":"method","name":"decorate_binding","children":[],"call":["bind eval "," max_aliases_length "," max_command_length "]}," Commander HelpFormatter Context decorate_binding":{"type":"method","name":"decorate_binding","children":[],"call":[]}," Commander HelpFormatter Context get_binding":{"type":"method","name":"get_binding","children":[],"call":[" decorate_binding ","(send\n  (ivar :@target) :instance_eval) tap "," binding ","@target instance_eval "]}," Commander HelpFormatter Context initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Commander Runner expand_optionally_negative_switches":{"type":"method","name":"expand_optionally_negative_switches","children":[],"call":["memo << ","val gsub ","val =~ ","switches reduce "]}," Commander UI AskForClass respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["method_name to_s start_with? ","method_name to_s "]}," Commander Runner longest_valid_command_name_from":{"type":"method","name":"longest_valid_command_name_from","children":[],"call":[" valid_command_names_from max "," valid_command_names_from ","args dup "]}}