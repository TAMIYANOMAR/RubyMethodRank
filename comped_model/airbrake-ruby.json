{" Airbrake call_notifier":{"type":"method","name":"call_notifier","children":[],"call":[" raise ","@notifiers [] __send__ ","@notifiers [] ","@notifiers key? ","args first ","args first class == ","args first class "," configured? "]}," Airbrake create_deploy":{"type":"method","name":"create_deploy","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] create_deploy ","@notifiers [] ","@deploy_notifiers [] notify ","@deploy_notifiers [] "," notify_deploy "," warn ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake close":{"type":"method","name":"close","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] close ","@notifiers [] ","@notice_notifiers [] close ","@notice_notifiers [] ","@notice_notifier close ","@performance_notifier close "," notice_notifier close "," notice_notifier "," performance_notifier close "," performance_notifier ","@remote_settings stop_polling "]}," Airbrake build_notice":{"type":"method","name":"build_notice","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] build_notice ","@notifiers [] ","@notice_notifiers [] build_notice ","@notice_notifiers [] ","@notice_notifier build_notice "," notice_notifier build_notice "," notice_notifier "]}," Airbrake blacklist_keys":{"type":"method","name":"blacklist_keys","children":[],"call":[" call_notifier "," __method__ "]}," Airbrake whitelist_keys":{"type":"method","name":"whitelist_keys","children":[],"call":[" call_notifier "," __method__ "]}," Airbrake add_filter":{"type":"method","name":"add_filter","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] add_filter ","@notifiers [] ","@notice_notifiers [] add_filter ","@notice_notifiers [] ","@notice_notifier add_filter "," notice_notifier add_filter "," notice_notifier "]}," Airbrake notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] notify_sync ","@notifiers [] ","@notice_notifiers [] notify_sync ","@notice_notifiers [] ","@notice_notifier notify_sync "," notice_notifier notify_sync "," notice_notifier "]}," Airbrake notify":{"type":"method","name":"notify","children":[],"call":[" call_notifier "," __method__ "," deprecation_warn ","@notifiers [] notify ","@notifiers [] ","@notice_notifiers [] notify ","@notice_notifiers [] ","@notice_notifier notify "," notice_notifier notify "," notice_notifier "]}," Airbrake configure":{"type":"method","name":"configure","children":[],"call":["@notifiers []= ","Notifier  new "," raise ","@notifiers key? ","Airbrake Config  new "," configured? ","@deploy_notifiers []= ","DeployNotifier  new ","@performance_notifiers []= ","PerformanceNotifier  new ","@notice_notifiers []= ","NoticeNotifier  new ","config validation_error_message ","config valid? ","@notice_notifiers key? "," warn ","loc lineno ","loc path "," caller_locations first "," caller_locations ","notifier_name == ","Airbrake Loggable  instance= ","Airbrake Config  instance ","config logger ","result value [] ","result value ","(lvasgn :result\n  (send\n    (lvar :config) :validate)) rejected? ","config validate "," process_config_options "," reset "," deploy_notifier "," notice_notifier "," performance_notifier ","config_processor add_filters ","config_processor process_remote_configuration ","config_processor process_allowlist ","config_processor process_blocklist ","Airbrake Config Processor  new "," Airbrake Config  new ured? "," Airbrake Config  instance ured? ","DeployNotifier  new s []= ","PerformanceNotifier  new s []= ","NoticeNotifier  new s []= ","Airbrake Config  new  validation_error_message ","Airbrake Config  instance  validation_error_message ","Airbrake Config  new  valid? ","Airbrake Config  instance  valid? ","NoticeNotifier  new s key? "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations ","Airbrake Config  new  logger ","Airbrake Config  instance  logger ","config validate  value [] ","config validate  value ","(lvasgn :result\n  (send\n    (lvar :Airbrake Config  new ) :validate)) rejected? ","(lvasgn :result\n  (send\n    (lvar :Airbrake Config  instance ) :validate)) rejected? ","(lvasgn :config validate \n  (send\n    (lvar :config) :validate)) rejected? ","Airbrake Config  new  validate ","Airbrake Config  instance  validate "," process_Airbrake Config  new _options "," process_Airbrake Config  instance _options ","Airbrake Config  new _processor add_filters ","Airbrake Config  instance _processor add_filters ","Airbrake Config Processor  new  add_filters ","Airbrake Config  new _processor process_remote_Airbrake Config  new uration ","Airbrake Config  instance _processor process_remote_Airbrake Config  instance uration ","Airbrake Config Processor  new  process_remote_configuration ","Airbrake Config  new _processor process_allowlist ","Airbrake Config  instance _processor process_allowlist ","Airbrake Config Processor  new  process_allowlist ","Airbrake Config  new _processor process_blocklist ","Airbrake Config  instance _processor process_blocklist ","config_processor process_b caller_locations first klist ","Airbrake Config Processor  new  process_blocklist "]}," Airbrake SyncSender proxy_params":{"type":"method","name":"proxy_params","children":[],"call":["@config proxy [] ","@config proxy ","@config proxy key? "]}," Airbrake SyncSender build_post_request":{"type":"method","name":"build_post_request","children":[],"call":["req []= ","Airbrake Notice NOTIFIER  [] ","req body= ","notice to_json ","Net HTTP Post  new tap ","Net HTTP Post  new ","uri request_uri ","@config project_key "]}," Airbrake SyncSender build_https":{"type":"method","name":"build_https","children":[],"call":["https use_ssl= ","uri is_a? ","Net HTTP  new tap ","Net HTTP  new "," proxy_params ","uri port ","uri host ","https read_timeout= ","@config timeout ","https open_timeout= "]}," Airbrake SyncSender send":{"type":"method","name":"send","children":[],"call":["Response  parse ","@config logger ","@config logger error ","https request "," build_https "," build_post_request ","req body nil? ","req body ","promise resolve ","promise reject ","parsed_resp [] ","parsed_resp key? "," missing_body? "," rate_limited_ip? "," build_request "," logger error "," logger ","@backlog << "," add_to_backlog? "," handle_rate_limit "," build_https request "," build_https  request ","https  build_post_request uest ","https  build_request uest "," build_ build_https  "," build_post_ build_post_request uest "," build_post_ build_request uest "," build_post_request  body nil? "," build_request  body nil? "," build_post_request  body "," build_request  body ","Response  parse  [] ","Response  parse  key? "," build_ build_post_request uest "," build_ build_request uest "," build_ build_https  request "," build_https  build_post_request uest "," build_https  build_request uest "]}," Airbrake SyncSender initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now ","Airbrake Config  instance ","Backlog  new ","@config backlog ","Airbrake Config  instance  backlog "]}," Airbrake Response truncated_body":{"type":"method","name":"truncated_body","children":[],"call":[]}," Airbrake Response parse":{"type":"method","name":"parse","children":[],"call":[]}," Airbrake PayloadTruncator truncate_set":{"type":"method","name":"truncate_set","children":[],"call":[" truncate ","(send\n  (send\n    (lvar :set) :keep_if) :with_index) map! ","idx < ","set keep_if with_index ","set keep_if "]}," Airbrake PayloadTruncator truncate_array":{"type":"method","name":"truncate_array","children":[],"call":[" truncate ","array slice map! ","array slice "]}," Airbrake PayloadTruncator truncate_hash":{"type":"method","name":"truncate_hash","children":[],"call":["hash delete ","hash []= "," truncate ","idx < ","hash each_with_index "]}," Airbrake PayloadTruncator replace_invalid_characters!":{"type":"method","name":"replace_invalid_characters!","children":[],"call":["str encode! ","str valid_encoding? ","encoding == ","str encoding ","str dup ","str frozen? ","str dup  encode! ","str valid_str encoding ? ","str dup  valid_encoding? ","str encoding  == ","str str encoding  ","str dup  encoding ","str dup  dup ","str dup  frozen? "]}," Airbrake PayloadTruncator truncate_string":{"type":"method","name":"truncate_string","children":[],"call":["str slice + ","[Truncated] freeze ","str slice ","str length <= ","str length "," replace_invalid_characters! "," replace_invalid_characters!  slice + "," replace_invalid_characters!  slice "," replace_invalid_characters!  length <= "," replace_invalid_characters!  length "]}," Airbrake PayloadTruncator truncate":{"type":"method","name":"truncate","children":[],"call":[" truncate_string ","val to_s ","val to_json "," truncate_object "]}," Airbrake PayloadTruncator reduce_max_size":{"type":"method","name":"reduce_max_size","children":[],"call":[]}," Airbrake PayloadTruncator truncate_object":{"type":"method","name":"truncate_object","children":[],"call":["seen []= "," raise ","object class "," truncate_set ","object is_a? "," truncate_array "," truncate_hash ","[Circular] freeze ","seen [] "]}," Airbrake PayloadTruncator truncate_error":{"type":"method","name":"truncate_error","children":[],"call":["@logger info ","error [] ","error []= ","error [] slice ","(lvasgn :dropped_frames\n  (send\n    (send\n      (send\n        (lvar :error) :[]\n        (sym :backtrace)) :size) :-\n    (ivar :@max_size))) < ","error [] size - ","error [] size "," truncate_string ","error [] length > ","error [] length ","(lvasgn :error [] size - \n  (send\n    (send\n      (send\n        (lvar :error) :[]\n        (sym :backtrace)) :size) :-\n    (ivar :@max_size))) < "]}," Airbrake PayloadTruncator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Notifier clean_backtrace":{"type":"method","name":"clean_backtrace","children":[],"call":["frame include? "," caller drop_while "," caller ","clean_bt empty? ","caller_copy drop_while ","Kernel  caller ","Kernel  caller  drop_while "]}," Airbrake Notifier default_sender":{"type":"method","name":"default_sender","children":[],"call":["@config logger warn ","@config logger ","@async_sender has_workers? "]}," Airbrake Notifier send_notice":{"type":"method","name":"send_notice","children":[],"call":["sender send ","notice ignored? ","@filter_chain refine "," build_notice ","@config ignore_environments include? ","@config environment ","@config ignore_environments ","@config ignore_environments any? ","@config ignored_environment? ","promise reject ","Airbrake Promise  new ","notice ignored? ! "," block_given? "," build_notice  ignored? "," build_ build_notice  ","Airbrake Promise  new  reject "," build_notice  ignored? ! "]}," Airbrake Notifier convert_to_exception":{"type":"method","name":"convert_to_exception","children":[],"call":["e set_backtrace "," clean_backtrace ","RuntimeError  new ","ex to_s ","ex set_backtrace ","ex backtrace ","Backtrace  java_exception? ","ex is_a? ","RuntimeError  new  sRuntimeError  new t_backtracRuntimeError  new  "," clRuntimeError  new an_backtracRuntimeError  new  ","RuntimRuntimeError  new Error  nRuntimeError  new w ","RuntimeError  new x to_s ","RuntimeError  new x sRuntimeError  new t_backtracRuntimeError  new  ","RuntimeError  new x backtracRuntimeError  new  ","BacktracRuntimeError  new   java_RuntimeError  new xcRuntimeError  new ption? ","RuntimeError  new x is_a? "]}," Airbrake Notifier create_deploy":{"type":"method","name":"create_deploy","children":[],"call":["@sync_sender send ","URI  join ","@config project_key ","@config project_id ","@config endpoint to_s split first ","@config endpoint to_s split ","@config endpoint path ","@config endpoint ","@config endpoint to_s ","@config environment ","deploy_params [] ","Airbrake Promise  new ","@config host ","@config @config endpoint to_s split first  "]}," Airbrake Notifier close":{"type":"method","name":"close","children":[],"call":["@async_sender close "]}," Airbrake Notifier build_notice":{"type":"method","name":"build_notice","children":[],"call":["Notice  new "," convert_to_exception ","exception is_a? "," raise ","@async_sender closed? ","exception [] merge! ","exception [] ","params dup "]}," Airbrake Notifier blacklist_keys":{"type":"method","name":"blacklist_keys","children":[],"call":[" add_filter ","Filters KeysBlacklist  new ","@config logger warn ","@config logger "]}," Airbrake Notifier whitelist_keys":{"type":"method","name":"whitelist_keys","children":[],"call":[" add_filter ","Filters KeysWhitelist  new ","@config logger warn ","@config logger "]}," Airbrake Notifier add_filter":{"type":"method","name":"add_filter","children":[],"call":["@filter_chain add_filter "," block_given? "]}," Airbrake Notifier notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[" send_notice "," send_notice value "]}," Airbrake Notifier notify":{"type":"method","name":"notify","children":[],"call":[" send_notice "," default_sender "]}," Airbrake Notifier initialize":{"type":"method","name":"initialize","children":[],"call":["SyncSender  new ","AsyncSender  new ","FilterChain  new "," raise ","(send\n  (ivar :@config) :project_id) all? ","@config project_key ","@config project_id ","Config  new ","user_config is_a? "," add_filter ","Filters KeysWhitelist  new ","@config whitelist_keys ","@config whitelist_keys any? ","Filters KeysBlacklist  new ","@config blacklist_keys ","@config blacklist_keys any? ","@config valid? ","@config validation_error_message "," add_filters_for_config_keys "," add_default_filters ","RouteSender  new "]}," Airbrake Notice truncate_payload":{"type":"method","name":"truncate_payload","children":[],"call":["@truncator reduce_max_size ","@truncator truncate_object ","@modifiable_payload [] ","Filters FILTERABLE_KEYS  each ","@truncator truncate_error ","@modifiable_payload [] each ","@config logger error "," payload ","@config logger ","new_max_size zero? ","@payload [] ","@payload [] each ","@truncator reduce_max_size  zero? "]}," Airbrake Notice errors":{"type":"method","name":"errors","children":[],"call":["Backtrace  parse ","e message ","e class name ","e class ","exception_list map ","exception cause ","exception respond_to? ","exception_list << ","exception_list size < ","exception_list size ","exception cause _list map ","exception cause  cause ","exception cause  respond_to? ","exception cause _list << ","exception cause _list size < ","exception cause _list size "]}," Airbrake Notice payload":{"type":"method","name":"payload","children":[],"call":["@modifiable_payload merge "]}," Airbrake Notice raise_if_non_hash_value":{"type":"method","name":"raise_if_non_hash_value","children":[],"call":[" raise ","value class ","value respond_to? "]}," Airbrake Notice raise_if_unrecognized_key":{"type":"method","name":"raise_if_unrecognized_key","children":[],"call":[" raise ","WRITABLE_KEYS  include? "]}," Airbrake Notice raise_if_ignored":{"type":"method","name":"raise_if_ignored","children":[],"call":[" raise "," ignored? "]}," Airbrake Notice context":{"type":"method","name":"context","children":[],"call":["val empty? ","val nil? ","(pair\n  (sym :version)\n  (send\n    (ivar :@config) :app_version)) merge delete_if ","(pair\n  (sym :version)\n  (send\n    (ivar :@config) :app_version)) merge ","params delete ","@config environment ","@config root_directory to_s ","@config root_directory ","@config app_version ","ctx merge delete_if ","ctx merge ","@config logger warn ","@config logger ","params key? ","@config versions ","@truncator truncate ","exception message "]}," Airbrake Notice []=":{"type":"method","name":"[]=","children":[],"call":["@modifiable_payload []= ","value to_hash "," raise_if_non_hash_value "," raise_if_unrecognized_key "," raise_if_ignored ","@payload []= "," raise ","value class ","value respond_to? ","WRITABLE_KEYS  include? "]}," Airbrake Notice []":{"type":"method","name":"[]","children":[],"call":["@modifiable_payload [] "," raise_if_ignored ","@payload [] "]}," Airbrake Notice ignored?":{"type":"method","name":"ignored?","children":[],"call":["@modifiable_payload nil? ","@payload nil? "]}," Airbrake Notice ignore!":{"type":"method","name":"ignore!","children":[],"call":[]}," Airbrake Notice to_json":{"type":"method","name":"to_json","children":[],"call":[" truncate_payload ","json bytesize <= ","json bytesize ","@config logger debug ","ex to_s chomp ","ex to_s ","@config logger "," payload to_json "," payload "," loop "," truncate_payload zero? ","ex class ","@payload to_json "," truncate == "," truncate "," logger debug "," logger "," payload to_json  bytesize <= ","@payload to_json  bytesize <= "," payload to_json  bytesize ","@payload to_json  bytesize "," payload to_ payload to_json  "," payload to_@payload to_json  ","@payload to_ payload to_json  ","@payload to_@payload to_json  "]}," Airbrake Notice initialize":{"type":"method","name":"initialize","children":[],"call":["PayloadTruncator  new ","@config logger "," context "," errors ","(pair\n  (sym :notifier)\n  (const nil :NOTIFIER)) freeze ","NestedException  new as_json ","NestedException  new "," extract_custom_attributes ","Airbrake Truncator  new ","Airbrake Config  instance "," stash []= "," stash ","Airbrake Config  instance  logger "]}," Airbrake Filters KeysWhitelist should_filter?":{"type":"method","name":"should_filter?","children":[],"call":["key to_s match ","key to_s ","@patterns none? ","key to_s == ","pattern to_s ","key match ","pattern is_a? "]}," Airbrake Filters KeysFilter filter_url_params":{"type":"method","name":"filter_url_params","children":[],"call":["url to_s ","url query= ","(send\n  (send\n    (const nil :Hash) :[]\n    (send\n      (const nil :URI) :decode_www_form\n      (send\n        (lvar :url) :query))) :map) join "," should_filter? ","Hash  [] map ","Hash  [] ","URI  decode_www_form ","url query ","URI  encode_www_form_component ","(send\n  (send\n    (send\n      (const nil :URI) :decode_www_form\n      (send\n        (lvar :url) :query)) :to_h) :map) join ","URI  decode_www_form to_h map ","URI  decode_www_form to_h "]}," Airbrake Filters KeysFilter filter_hash":{"type":"method","name":"filter_hash","children":[],"call":[" filter_hash ","hash [] ","hash [] is_a? ","hash []= ","[Filtered] freeze "," should_filter? ","hash each_key ","hash [] each ","key to_s ","hash is_a? ","hash_copy [] []= ","hash_copy [] ","hash_copy [] each_with_index ","hash_copy []= ","hash_copy [] is_a? ","hash dup ","hash dup  [] []= ","hash dup  [] ","hash dup  [] each_with_index ","hash dup  []= ","hash dup  [] is_a? "]}," Airbrake Filters KeysFilter should_filter?":{"type":"method","name":"should_filter?","children":[],"call":[" raise "]}," Airbrake Filters KeysFilter call":{"type":"method","name":"call","children":[],"call":["notice [] []= "," filter_url_params ","notice [] ","url query nil? ","url query ","url nil? "," URI ","notice [] [] "," filter_hash ","FILTERABLE_KEYS  each "," should_filter? "," filter_url "," validate_patterns "," eval_proc_patterns! "," filter_context_key ","FILTERABLE_CONTEXT_KEYS  each ","notice []= "," filter_ URI _params "," URI  query nil? "," URI  query "," URI  nil? "," filter_ URI  "]}," Airbrake Filters KeysFilter initialize":{"type":"method","name":"initialize","children":[],"call":["patterns map "]}," Airbrake Filters KeysBlacklist should_filter?":{"type":"method","name":"should_filter?","children":[],"call":["key to_s match ","key to_s ","@patterns any? ","key to_s == ","pattern to_s ","key match ","pattern is_a? "]}," Airbrake FilterChain env_filter":{"type":"method","name":"env_filter","children":[],"call":["notice ignore! ","ignore_environments include? "," proc "]}," Airbrake FilterChain root_directory_filter":{"type":"method","name":"root_directory_filter","children":[],"call":["frame [] sub! ","[PROJECT_ROOT] freeze ","frame [] ","error [] each ","error [] ","notice [] each ","notice [] "," proc ","file sub! ","frame []  sub! "]}," Airbrake FilterChain refine":{"type":"method","name":"refine","children":[],"call":["filter call ","notice ignored? ","@filters each ","(send\n  (ivar :@filters) :+\n  (ivar :@keys_filters)) each ","@filters + "]}," Airbrake FilterChain add_filter":{"type":"method","name":"add_filter","children":[],"call":["@filters << ","@keys_filters << ","KEYS_FILTERS  include? ","filter class ","@filters insert ","i + ","f to_s start_with? ","f to_s ","@filters rindex ","filter to_s start_with? ","filter to_s ","(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse! ","f weight ","f respond_to? ","(send\n  (ivar :@filters) :<<\n  (lvar :filter)) sort_by ","(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse!  << ","(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse!  insert ","(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse!  rindex ","(send\n  (begin\n    (send\n      (ivar :(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse! ) :<<\n      (lvar :filter))) :sort_by) reverse! ","(send\n  (ivar :(send\n  (begin\n    (send\n      (ivar :@filters) :<<\n      (lvar :filter))) :sort_by) reverse! ) :<<\n  (lvar :filter)) sort_by "]}," Airbrake FilterChain initialize":{"type":"method","name":"initialize","children":[],"call":[" add_filter "," root_directory_filter ","config root_directory ","(const nil :SYSTEM_EXIT_FILTER) each "," env_filter ","config ignore_environments ","config environment ","config ignore_environments any? ","@filters << ","Airbrake Filters RootDirectoryFilter  new ","filter new ","(const\n  (const\n    (const nil :Airbrake) :Filters) :SystemExitFilter) each ","f new ","DEFAULT_FILTERS  each ","Airbrake Filters KeysBlacklist  new ","config blacklist_keys ","config logger ","config blacklist_keys any? ","Airbrake Filters KeysWhitelist  new ","config whitelist_keys ","config whitelist_keys any? "," add_default_filters "," config root_directory _filter ","config config root_directory  "]}," Airbrake Config set_endpoint":{"type":"method","name":"set_endpoint","children":[],"call":["URI  join ","https:// << ","host !~ "]}," Airbrake Config set_option":{"type":"method","name":"set_option","children":[],"call":[" raise "," __send__ "]}," Airbrake Config merge":{"type":"method","name":"merge","children":[],"call":[" set_option ","config_hash each_pair "]}," Airbrake Config logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Airbrake Config endpoint":{"type":"method","name":"endpoint","children":[],"call":["URI  join "," host "," project_key "," project_id "," host= ","https:// << "," host !~ "]}," Airbrake Config initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "," ignore_environments= "," host= "," project_key= ","user_config [] "," project_id= "," logger level= "," logger "," logger= ","Logger  new "," workers= "," queue_size= "," proxy= "," timeout= "," whitelist_keys= "," blacklist_keys= ","Config Validator  new "," root_directory= ","File  expand_path ","Dir  pwd ","Bundler  root ","File  realpath "," versions= "," code_hunks= "," route_stats_flush_period= "," route_stats= "," performance_stats_flush_period= "," performance_stats= "," Logger  new "," query_stats= "," job_stats= ","l level= "," Logger  new tap "," allowlist_keys= "," blocklist_keys= "," error_notifications= "," remote_config_host= "," apm_host= "," error_host= "," __remote_configuration= "," remote_config= "," backlog= "]}," Airbrake Backtrace match_frame":{"type":"method","name":"match_frame","children":[],"call":[" raise ","GENERIC_STACKFRAME_REGEXP  match ","regexp match ","Patterns GENERIC  match ","GENERIC_STACKFRAME_REGEXP  GENERIC_STACKFRAME_REGEXP  match  ","GENERIC_STACKFRAME_REGEXP  regexp match  ","regexp GENERIC_STACKFRAME_REGEXP  match  ","regexp regexp match  ","Patterns GENERIC  GENERIC_STACKFRAME_REGEXP  match  ","Patterns GENERIC  regexp match  "]}," Airbrake Backtrace stack_frame":{"type":"method","name":"stack_frame","children":[],"call":["match [] "," Integer ","config logger error ","config logger "," match_frame "," populate_code ","config code_hunks "," logger error "," logger "," match_frame  [] ","  match_frame _frame "]}," Airbrake Backtrace java_exception?":{"type":"method","name":"java_exception?","children":[],"call":[]}," Airbrake Backtrace parse":{"type":"method","name":"parse","children":[],"call":[]}," Airbrake AsyncSender spawn_worker":{"type":"method","name":"spawn_worker","children":[],"call":["@sender send ","(lvasgn :notice\n  (send\n    (ivar :@unsent) :pop)) != ","@unsent pop ","Thread  new ","message first == ","message first ","(lvasgn :@unsent pop \n  (send\n    (ivar :@unsent) :pop)) != ","@unsent pop  first == ","@unsent pop  first "]}," Airbrake AsyncSender has_workers?":{"type":"method","name":"has_workers?","children":[],"call":["@workers list any? ","@workers list ","@closed ! "," spawn_workers ","Process  pid ","@workers list empty? ","@pid != ","@mutex synchronize "," thread_pool has_workers? "," thread_pool ","Process  pid  != "]}," Airbrake AsyncSender closed?":{"type":"method","name":"closed?","children":[],"call":[" thread_pool closed? "," thread_pool "]}," Airbrake AsyncSender close":{"type":"method","name":"close","children":[],"call":["@config logger debug ","@config logger ","@workers list each ","@workers list ","@unsent << ","@config workers times ","@config workers ","msg + ","@unsent size ","@unsent empty? "," raise "," closed? ","threads each ","@workers list dup ","@mutex synchronize ","Airbrake Promise  new "," logger debug "," logger "," thread_pool close "," thread_pool ","@sync_sender close "]}," Airbrake AsyncSender send":{"type":"method","name":"send","children":[],"call":["@unsent << "," will_not_deliver ","@unsent size >= ","@unsent max ","@unsent size "," thread_pool << "," thread_pool ","promise reject ","@config queue_size "]}," Airbrake AsyncSender initialize":{"type":"method","name":"initialize","children":[],"call":["@workers enclose ","@workers add "," spawn_worker ","(erange\n  (int 0)\n  (send\n    (lvar :config) :workers)) each ","config workers ","ThreadGroup  new ","SyncSender  new ","SizedQueue  new ","config queue_size ","Mutex  new ","Airbrake Config  instance queue_size ","Airbrake Config  instance ","ThreadGroup  new  enclose ","ThreadGroup  new  add "]}," Airbrake NestedException unwind_exceptions":{"type":"method","name":"unwind_exceptions","children":[],"call":["exception cause ","exception respond_to? ","exception_list << ","exception_list size < ","exception_list size "]}," Airbrake NestedException as_json":{"type":"method","name":"as_json","children":[],"call":["Backtrace  parse ","exception message ","exception class name ","exception class "," unwind_exceptions map "," unwind_exceptions ","exception message split first ","exception message split "," message "]}," Airbrake NestedException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake AsyncSender spawn_workers":{"type":"method","name":"spawn_workers","children":[],"call":["@workers enclose ","@workers add "," spawn_worker ","@config workers times ","@config workers ","ThreadGroup  new ","ThreadGroup  new  enclose ","ThreadGroup  new  add "]}," Airbrake AsyncSender will_not_deliver":{"type":"method","name":"will_not_deliver","children":[],"call":["@config logger error ","(dstr\n  (begin\n    (const nil :LOG_LABEL))\n  (str \" AsyncSender has reached its capacity of \")) + ","backtrace join ","notice [] [] [] ","notice [] [] ","notice [] ","@unsent max ","@config logger ","line [] ","notice [] [] [] map "," logger error "," logger ","promise reject ","@config queue_size "," format ","(send\n  (send\n    (lvar :error) :[]\n    (sym :backtrace)) :map) join ","error [] map ","error [] ","notice [] first ","@config logger notice [] first  "," logger notice [] first  ","(send\n  (send\n    (lvar :notice [] first ) :[]\n    (sym :backtrace)) :map) join ","notice [] first  [] map ","notice [] first  [] "]}," Airbrake Filters KeysFilter filter_url":{"type":"method","name":"filter_url","children":[],"call":["notice [] []= "," filter_url_params ","notice [] ","url query "," URI ","notice [] [] "," filter_ URI _params "," URI  query "]}," Airbrake configured?":{"type":"method","name":"configured?","children":[],"call":["@notifiers key? ","@notifiers [] configured? ","@notifiers [] ","@notice_notifiers [] configured? ","@notice_notifiers [] ","@notice_notifier configured? "," notice_notifier configured? "," notice_notifier "]}," Airbrake Config ignored_environment?":{"type":"method","name":"ignored_environment?","children":[],"call":[" ignore_environments include? "," environment "," ignore_environments "," logger warn "," logger "," environment nil? "," ignore_environments any? "," ignore_environments map include? "," environment to_s "," ignore_environments map ","env == ","pattern to_s ","env match ","pattern is_a? "," check_notify_ability rejected? "," check_notify_ability "," ignore_ environment to_s ironments include? ","  environment to_s ironment "," ignore_ environment to_s ironments ","  environment to_s ironment nil? "," ignore_ environment to_s ironments any? "," ignore_ environment to_s ironments map include? ","  environment to_s ironment to_s "," ignore_ environment to_s ironments map "," environment to_s  == "," environment to_s  match "]}," Airbrake Config valid?":{"type":"method","name":"valid?","children":[],"call":[" project_key empty? ! "," project_key empty? "," project_key "," project_key is_a? "," project_id is_a? "," project_id "," ignored_environment? "," project_id to_i zero? "," project_id to_i ","@validator valid_environment? ","@validator valid_project_key? ","@validator valid_project_id? "," validate resolved? "," validate "]}," Airbrake Backtrace oci_exception?":{"type":"method","name":"oci_exception?","children":[],"call":["exception is_a? "]}," Airbrake Backtrace execjs_exception?":{"type":"method","name":"execjs_exception?","children":[],"call":["exception cause is_a? ","exception cause ","exception is_a? ","frame =~ ","exception backtrace [] each ","exception backtrace [] ","exception backtrace "]}," Airbrake Backtrace best_regexp_for":{"type":"method","name":"best_regexp_for","children":[],"call":[" execjs_exception? "," oci_exception? "," java_exception? "]}," Airbrake Notice extract_custom_attributes":{"type":"method","name":"extract_custom_attributes","children":[],"call":["@config logger error ","exception class ","@config logger ","@modifiable_payload merge! ","ex class ","exception to_airbrake ","exception respond_to? ","@payload merge! "]}," Airbrake Config validation_error_message":{"type":"method","name":"validation_error_message","children":[],"call":["@validator error_message "]}," Airbrake Config Validator valid_environment?":{"type":"method","name":"valid_environment?","children":[],"call":[" format ","environment class ","environment is_a? ","VALID_ENV_TYPES  any? ","@config environment ","config environment is_a? ","config environment ","@config environment  class ","@config environment  is_a? ","@config @config environment  ","config @config environment  is_a? ","config @config environment  "]}," Airbrake Config Validator valid_project_key?":{"type":"method","name":"valid_project_key?","children":[],"call":["@config project_key empty? ! ","@config project_key empty? ","@config project_key ","@config project_key is_a? ","config project_key empty? ","config project_key ","config project_key is_a? "]}," Airbrake Config Validator valid_project_id?":{"type":"method","name":"valid_project_id?","children":[],"call":["@config project_id to_i > ","@config project_id to_i ","@config project_id ","config project_id to_i > ","config project_id to_i ","config project_id "]}," Airbrake Config Validator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Notifier add_filters_for_config_keys":{"type":"method","name":"add_filters_for_config_keys","children":[],"call":[" add_filter ","Filters KeysWhitelist  new ","@config whitelist_keys ","@config logger ","@config whitelist_keys none? ","Filters KeysBlacklist  new ","@config blacklist_keys ","@config blacklist_keys any? "]}," Airbrake Filters KeysFilter validate_patterns":{"type":"method","name":"validate_patterns","children":[],"call":["@logger error "," class ","pattern is_a? ","VALID_PATTERN_CLASSES  any? ","@patterns all? "," logger error "," logger "]}," Airbrake Filters KeysFilter eval_proc_patterns!":{"type":"method","name":"eval_proc_patterns!","children":[],"call":["pattern call ","pattern respond_to? ","@patterns flat_map ","pattern is_a? ","@patterns any? "]}," Airbrake Promise reject":{"type":"method","name":"reject","children":[],"call":["callback call ","@on_rejected each ","@value []= ","@mutex synchronize "]}," Airbrake Promise resolve":{"type":"method","name":"resolve","children":[],"call":["callback call ","@on_resolved each ","@mutex synchronize ","@value []= "]}," Airbrake Promise rescue":{"type":"method","name":"rescue","children":[],"call":["@on_rejected << ","@value [] ","@value key? ","@mutex synchronize "]}," Airbrake Promise then":{"type":"method","name":"then","children":[],"call":["@on_resolved << ","@value key? ","@mutex synchronize ","@value [] "]}," Airbrake Promise initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Airbrake deprecation_warn":{"type":"method","name":"deprecation_warn","children":[],"call":[" warn "]}," Airbrake []":{"type":"method","name":"[]","children":[],"call":["@notifiers [] ","@notice_notifiers [] "," warn ","loc lineno ","loc path "," __method__ "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake NilNotifier create_deploy":{"type":"method","name":"create_deploy","children":[],"call":[]}," Airbrake NilNotifier close":{"type":"method","name":"close","children":[],"call":[]}," Airbrake NilNotifier build_notice":{"type":"method","name":"build_notice","children":[],"call":[]}," Airbrake NilNotifier add_filter":{"type":"method","name":"add_filter","children":[],"call":[]}," Airbrake NilNotifier notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[]}," Airbrake NilNotifier notify":{"type":"method","name":"notify","children":[],"call":[]}," Airbrake Filters ThreadFilter add_thread_info":{"type":"method","name":"add_thread_info","children":[],"call":["thread_info []= ","th safe_level ","th priority ","th group list map ","th group list ","th group ","th inspect "]}," Airbrake Filters ThreadFilter fiber_variables":{"type":"method","name":"fiber_variables","children":[],"call":["h []= ","th [] inspect ","th [] ","th keys map with_object ","th keys map ","th keys "," sanitize_value ","key to_s start_with? ","key to_s ","(lvasgn :value\n  (send\n    (lvar :th) :[]\n    (lvar :key))) is_a? ","key == ","v == ","IGNORED_FIBER_VARIABLES  any? "," sanitize_th []  ","(lvasgn :th [] \n  (send\n    (lvar :th) :[]\n    (lvar :key))) is_a? "]}," Airbrake Filters ThreadFilter thread_variables":{"type":"method","name":"thread_variables","children":[],"call":["h []= ","th thread_variable_get inspect ","th thread_variable_get ","th thread_variables map with_object ","th thread_variables map ","th thread_variables "," sanitize_value ","var to_s start_with? ","var to_s ","(lvasgn :value\n  (send\n    (lvar :th) :thread_variable_get\n    (lvar :var))) is_a? "," sanitize_th thread_variable_get  ","(lvasgn :th thread_variable_get \n  (send\n    (lvar :th) :thread_variable_get\n    (lvar :var))) is_a? "]}," Airbrake Filters ThreadFilter call":{"type":"method","name":"call","children":[],"call":["notice [] []= ","notice [] "," add_thread_info ","thread_info []= ","th name ","th respond_to? ","(lvasgn :vars\n  (send nil :fiber_variables\n    (lvar :th))) any? "," fiber_variables ","(lvasgn :vars\n  (send nil :thread_variables\n    (lvar :th))) any? "," thread_variables ","Thread  current "," add_Thread  current read_info ","Thread  current read_info []= ","th th name  ","Thread  current  name ","Thread  current  respond_to? ","(lvasgn : fiber_variables \n  (send nil :fiber_variables\n    (lvar :th))) any? ","(lvasgn : thread_variables \n  (send nil :fiber_variables\n    (lvar :th))) any? ","(lvasgn :vars\n  (send nil :fiber_variables\n    (lvar :Thread  current ))) any? ","(lvasgn : fiber_variables \n  (send nil :thread_variables\n    (lvar :th))) any? ","(lvasgn : thread_variables \n  (send nil :thread_variables\n    (lvar :th))) any? ","(lvasgn :vars\n  (send nil :Thread  current read_variables\n    (lvar :Thread  current ))) any? "," Thread  current read_variables "]}," Airbrake Filters SystemExitFilter call":{"type":"method","name":"call","children":[],"call":["notice ignore! ","error [] == ","error [] ","notice [] none? ","notice [] "]}," Airbrake Filters RootDirectoryFilter call":{"type":"method","name":"call","children":[],"call":["file sub! ","frame [] ","error [] each ","error [] ","notice [] each ","notice [] ","frame []  sub! "]}," Airbrake Filters RootDirectoryFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters GemRootFilter call":{"type":"method","name":"call","children":[],"call":["file sub! ","frame [] ","error [] each ","error [] ","Gem  path each ","Gem  path ","notice [] each ","notice [] ","frame []= ","file sub ","frame []  sub! ","frame []  sub "]}," Airbrake merge_context":{"type":"method","name":"merge_context","children":[],"call":["@notifiers [] merge_context ","@notifiers [] ","@notice_notifiers [] merge_context ","@notice_notifiers [] ","@notice_notifier merge_context "," notice_notifier merge_context "," notice_notifier "]}," Airbrake NilNotifier merge_context":{"type":"method","name":"merge_context","children":[],"call":[]}," Airbrake NilNotifier configured?":{"type":"method","name":"configured?","children":[],"call":[]}," Airbrake Truncator replace_invalid_characters":{"type":"method","name":"replace_invalid_characters","children":[],"call":["temp_str encode! ","str dup ","str valid_encoding? ","encoding == ","str encoding ","SUPPORTED_ENCODINGS  include? ","str dup  encode! ","str valid_str encoding ? ","str encoding  == ","str str encoding  "]}," Airbrake Truncator truncate_set":{"type":"method","name":"truncate_set","children":[],"call":["truncated_set freeze ","truncated_set size >= ","truncated_set size ","truncated_set << "," truncate ","set each ","Set  new ","(send\n  (send\n    (lvar :set) :keep_if) :with_index) map! ","idx < ","set keep_if with_index ","set keep_if ","Set  new  freeze ","Set  new  size >= ","Set  new  size ","Set  new  << "]}," Airbrake Truncator truncate_array":{"type":"method","name":"truncate_array","children":[],"call":["(send\n  (send\n    (lvar :array) :slice\n    (int 0)\n    (ivar :@max_size)) :map!) freeze "," truncate ","array slice map! ","array slice "]}," Airbrake Truncator truncate_hash":{"type":"method","name":"truncate_hash","children":[],"call":["truncated_hash freeze ","truncated_hash []= "," truncate ","idx + > ","idx + ","hash each_with_index ","hash delete ","hash []= ","idx < "]}," Airbrake Truncator stringify_object":{"type":"method","name":"stringify_object","children":[],"call":["object to_s ","object to_json "]}," Airbrake Truncator truncate_string":{"type":"method","name":"truncate_string","children":[],"call":["(send\n  (send\n    (lvar :fixed_str) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  (const nil :TRUNCATED)) freeze ","fixed_str slice + ","fixed_str slice ","fixed_str length <= ","fixed_str length "," replace_invalid_characters ","str slice + ","[Truncated] freeze ","str slice ","str length <= ","str length "," replace_invalid_characters! ","(send\n  (send\n    (lvar :fixed_str) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  (str \"[Truncated]\")) freeze ","(send\n  (send\n    (lvar : replace_invalid_characters ) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  (const nil :TRUNCATED)) freeze ","(send\n  (send\n    (lvar :fixed_ replace_invalid_characters! ) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  (const nil :TRUNCATED)) freeze "," replace_invalid_characters  slice + ","fixed_ replace_invalid_characters!  slice + "," replace_invalid_characters  slice ","fixed_ replace_invalid_characters!  slice "," replace_invalid_characters  length <= ","fixed_ replace_invalid_characters!  length <= "," replace_invalid_characters  length ","fixed_ replace_invalid_characters!  length "," replace_invalid_characters!  slice + "," replace_invalid_characters!  slice "," replace_invalid_characters!  length <= "," replace_invalid_characters!  length ","(send\n  (send\n    (lvar : replace_invalid_characters ) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  (str \"[Truncated]\")) freeze ","(send\n  (send\n    (lvar :fixed_ replace_invalid_characters! ) :slice\n    (int 0)\n    (ivar :@max_size)) :+\n  ( replace_invalid_characters!  \"[Truncated]\")) freeze "]}," Airbrake Truncator truncate_object":{"type":"method","name":"truncate_object","children":[],"call":[" truncate_string "," stringify_object "," truncate_set "," truncate_array "," truncate_hash ","seen []= "," raise ","object class ","object is_a? ","[Circular] freeze ","seen [] "]}," Airbrake Truncator reduce_max_size":{"type":"method","name":"reduce_max_size","children":[],"call":[]}," Airbrake Truncator truncate":{"type":"method","name":"truncate","children":[],"call":[" truncate_object ","seen << ","object object_id ","object is_a? ","CIRCULAR_TYPES  any? ","seen include? "," truncate_string ","val to_s ","val to_json ","[Circular] freeze "]}," Airbrake Truncator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake SyncSender missing_body?":{"type":"method","name":"missing_body?","children":[],"call":["promise reject ","@config logger error ","@config logger ","req body nil? ","req body "," logger error "," logger "]}," Airbrake SyncSender rate_limited_ip?":{"type":"method","name":"rate_limited_ip?","children":[],"call":["promise reject ","Time  now < ","Time  now "]}," Airbrake Response rate_limit_reset":{"type":"method","name":"rate_limit_reset","children":[],"call":[]}," Airbrake Notifier add_default_filters":{"type":"method","name":"add_default_filters","children":[],"call":["@filter_chain add_filter ","Airbrake Filters RootDirectoryFilter  new ","@config root_directory ","Airbrake Filters ExceptionAttributesFilter  new ","@config logger ","Airbrake Filters ContextFilter  new ","Airbrake Filters KeysBlacklist  new ","(lvasgn :blacklist_keys\n  (send\n    (ivar :@config) :blacklist_keys)) any? ","@config blacklist_keys ","Airbrake Filters KeysWhitelist  new ","(lvasgn :whitelist_keys\n  (send\n    (ivar :@config) :whitelist_keys)) any? ","@config whitelist_keys ","Airbrake Filters GitRevisionFilter  new ","Airbrake Filters GitLastCheckoutFilter  new ","filter new ","(const\n  (const\n    (const nil :Airbrake) :Filters) :RootDirectoryFilter) each ","@config @config root_directory  ","(lvasgn :@config blacklist_keys \n  (send\n    (ivar :@config) :@config blacklist_keys )) any? ","@config @config blacklist_keys  ","(lvasgn :@config whitelist_keys \n  (send\n    (ivar :@config) :@config whitelist_keys )) any? ","@config @config whitelist_keys  "]}," Airbrake Notifier merge_context":{"type":"method","name":"merge_context","children":[],"call":["@context merge! "]}," Airbrake Notifier configured?":{"type":"method","name":"configured?","children":[],"call":["@config valid? "]}," Airbrake Notice truncate":{"type":"method","name":"truncate","children":[],"call":["@config logger error ","@config logger ","new_max_size == ","@truncator reduce_max_size ","@payload []= ","@truncator truncate ","@payload [] ","TRUNCATABLE_KEYS  each ","@truncator truncate_object "," [] "," logger error "," logger ","@truncator reduce_max_size  == "]}," Airbrake Filters ThreadFilter sanitize_value":{"type":"method","name":"sanitize_value","children":[],"call":["value to_s ","Hash  [] "," sanitize_value ","value map ","value is_a? ","SAFE_CLASSES  any? ","value transform_values "]}," Airbrake Filters ThreadFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters SystemExitFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters KeysWhitelist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters KeysFilter filter_context_key":{"type":"method","name":"filter_context_key","children":[],"call":["notice [] []= ","notice [] "," filter_hash ","notice [] [] "," should_filter? ","notice [] [] == "]}," Airbrake Filters KeysBlacklist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters GemRootFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters ExceptionAttributesFilter call":{"type":"method","name":"call","children":[],"call":["notice []= ","notice [] merge! ","notice [] ","attributes each ","@logger error ","attributes class "," class ","attributes is_a? ","ex class ","exception class ","exception to_airbrake ","exception respond_to? ","notice stash [] ","notice stash "," logger error "," logger ","exception to_airbrake  each ","exception to_airbrake  class ","exception to_airbrake  is_a? ","notice stash []  class ","notice stash []  to_airbrake ","notice stash []  respond_to? "]}," Airbrake Filters ExceptionAttributesFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters DependencyFilter git_version":{"type":"method","name":"git_version","children":[],"call":["spec git_version to_s ","spec git_version ","spec respond_to? "]}," Airbrake Filters DependencyFilter call":{"type":"method","name":"call","children":[],"call":["notice [] [] []= ","notice [] [] ","notice [] ","notice [] []= ","notice [] key? ","h []= "," git_version ","spec version ","Gem  loaded_specs map with_object ","Gem  loaded_specs map ","Gem  loaded_specs "]}," Airbrake Filters DependencyFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters ContextFilter call":{"type":"method","name":"call","children":[],"call":["@context clear ","notice [] []= ","@context dup ","notice [] ","@context empty? ","@mutex synchronize ","Airbrake Context  current clear ","Airbrake Context  current ","Airbrake Context  current to_h ","Airbrake Context  current empty? "]}," Airbrake Filters ContextFilter initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Airbrake FileCache data":{"type":"method","name":"data","children":[],"call":[]}," Airbrake FileCache empty?":{"type":"method","name":"empty?","children":[],"call":[]}," Airbrake FileCache []":{"type":"method","name":"[]","children":[],"call":[]}," Airbrake FileCache []=":{"type":"method","name":"[]=","children":[],"call":[]}," Airbrake CodeHunk get_lines":{"type":"method","name":"get_lines","children":[],"call":["lines []= ","l [] rstrip ","l [] ","i > ","i < ","cached_file with_index "," get_from_cache "," get_from_cache  with_index "]}," Airbrake CodeHunk get_from_cache":{"type":"method","name":"get_from_cache","children":[],"call":["@config logger error "," class name "," class ","@config logger ","File  foreach ","Airbrake FileCache  [] "," logger error "," logger "]}," Airbrake CodeHunk get":{"type":"method","name":"get","children":[],"call":["lines empty? "," get_lines ","line + ","(send\n  (lvar :line) :-\n  (const nil :NLINES)) max ","line - ","File  exist? ","@config logger error "," __method__ "," class name "," class ","@config logger ","lines []= ","l [] rstrip ","l [] ","i > ","i < "," get_from_cache with_index "," get_from_cache ","ex backtrace "]}," Airbrake CodeHunk initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Backtrace frame_in_root?":{"type":"method","name":"frame_in_root?","children":[],"call":["frame [] !~ ","frame [] ","frame [] start_with? "]}," Airbrake Backtrace populate_code":{"type":"method","name":"populate_code","children":[],"call":["frame []= ","Airbrake CodeHunk  new get ","frame [] ","Airbrake CodeHunk  new "]}," Airbrake Backtrace parse_backtrace":{"type":"method","name":"parse_backtrace","children":[],"call":[" populate_code ","i < "," frame_in_root? ","root_directory empty? ! ","root_directory empty? ","frame [] nil? ","frame [] ","config code_hunks ! ","config code_hunks "," stack_frame ","exception backtrace map with_index ","exception backtrace map ","exception backtrace ","config root_directory to_s ","config root_directory "," best_regexp_for ","frame [] start_with? ","config code_hunks nil? ","config logger error ","config logger "," match_frame ","Airbrake Config  instance code_hunks ! ","Airbrake Config  instance code_hunks ","Airbrake Config  instance ","Airbrake Config  instance root_directory to_s ","Airbrake Config  instance root_directory ","  stack_frame _in_root? ","config root_directory to_s  empty? ! ","Airbrake Config  instance root_directory to_s  empty? ! ","config root_directory to_s  empty? ","Airbrake Config  instance root_directory to_s  empty? "," stack_frame  [] nil? "," stack_frame  [] "," stack_ stack_frame  ","config config root_directory to_s  to_s ","config Airbrake Config  instance root_directory to_s  to_s ","config config root_directory to_s  ","config Airbrake Config  instance root_directory to_s  "," best_ best_regexp_for _for "," stack_frame  [] start_with? "," match_ stack_frame  ","  match_frame _frame ","Airbrake Config  instance config root_directory to_s  to_s ","Airbrake Config  instance Airbrake Config  instance root_directory to_s  to_s ","Airbrake Config  instance config root_directory to_s  ","Airbrake Config  instance Airbrake Config  instance root_directory to_s  "]}," Airbrake Filters GitRevisionFilter find_from_packed_refs":{"type":"method","name":"find_from_packed_refs","children":[],"call":["parts first ","parts last == ","parts last ","(lvasgn :parts\n  (send\n    (lvar :line) :split\n    (str \" \"))) size == ","(lvasgn :parts\n  (send\n    (lvar :line) :split\n    (str \" \"))) size ","line split ","(str \"#\") include? ","line [] ","File  readlines each ","File  readlines ","File  exist? ","File  join ","(lvasgn :parts\n  (send\n    (lvar :line) :split)) size == ","(lvasgn :parts\n  (send\n    (lvar :line) :split)) size ","line split  first ","line split  last == ","line split  last ","(lvasgn :line split \n  (send\n    (lvar :line) :split\n    (str \" \"))) size == ","(lvasgn :line split \n  (send\n    (lvar :line) :split\n    (str \" \"))) size ","(lvasgn :line split \n  (send\n    (lvar :line) :split)) size == ","(lvasgn :line split \n  (send\n    (lvar :line) :split)) size "]}," Airbrake Filters GitRevisionFilter find_revision":{"type":"method","name":"find_revision","children":[],"call":[" find_from_packed_refs ","File  read chomp ","File  read ","File  exist? ","File  join ","head chomp [] ","PREFIX  size ","head chomp ","head start_with? ","head chomp []  chomp [] ","File  read  chomp [] ","head chomp []  chomp ","File  read  chomp ","head chomp []  start_with? ","File  read  start_with? "]}," Airbrake Filters GitRevisionFilter call":{"type":"method","name":"call","children":[],"call":["notice [] []= ","notice [] "," find_revision ","File  exist? ","notice [] key? "," find_ find_revision  "]}," Airbrake Filters GitRevisionFilter initialize":{"type":"method","name":"initialize","children":[],"call":["File  join "]}," Airbrake Filters GitRepositoryFilter call":{"type":"method","name":"call","children":[],"call":["notice [] []= ","notice [] ","(str \"cd \") chomp ","File  exist? ","notice [] key? ","@git_version >= ","Gem Version  new "," attach_repository "]}," Airbrake Filters GitRepositoryFilter initialize":{"type":"method","name":"initialize","children":[],"call":["File  join ","Gem Version  new ","(str \"git --version\") split last ","(str \"git --version\") split ","(str \"git --version\") split [] "," detect_git_version "]}," Airbrake Filters GitLastCheckoutFilter timestamp":{"type":"method","name":"timestamp","children":[],"call":["Time  at to_datetime rfc3339 ","Time  at to_datetime ","Time  at "]}," Airbrake Filters GitLastCheckoutFilter checkout_line?":{"type":"method","name":"checkout_line?","children":[],"call":["line include? "]}," Airbrake Filters GitLastCheckoutFilter last_checkout_line":{"type":"method","name":"last_checkout_line","children":[],"call":[" checkout_line? ","IO  foreach ","File  exist? ","File  join ","File  foreach "]}," Airbrake Filters GitLastCheckoutFilter last_checkout":{"type":"method","name":"last_checkout","children":[],"call":[" timestamp ","parts [] to_i ","parts [] ","parts [] [] ","author [] join ","author [] ","@logger error "," class name "," class ","parts size < ","parts size ","line chomp split first split ","line chomp split first ","line chomp split ","line chomp "," last_checkout_line "," logger error "," logger ","line chomp split first split  [] to_i ","line chomp split first split  [] ","line chomp split first split  [] [] ","parts []  [] join ","parts []  [] ","line chomp split first split  size < ","line chomp split first split  size "," last_checkout_line  chomp split first split "," last_checkout_line  chomp split first "," last_checkout_line  chomp split "," last_checkout_line  chomp "," last_checkout_ last_checkout_line  "]}," Airbrake Filters GitLastCheckoutFilter call":{"type":"method","name":"call","children":[],"call":["notice [] []= ","notice [] "," last_checkout ","File  exist? ","notice [] key? "," last_ last_checkout  "]}," Airbrake Filters GitLastCheckoutFilter initialize":{"type":"method","name":"initialize","children":[],"call":["File  join ","ENV  [] ","ENV  fetch "]}," Airbrake inc_request":{"type":"method","name":"inc_request","children":[],"call":["@notifiers [] inc_request ","@notifiers [] "]}," Airbrake NilNotifier inc_request":{"type":"method","name":"inc_request","children":[],"call":[]}," Airbrake SyncSender build_request_body":{"type":"method","name":"build_request_body","children":[],"call":["req []= ","Airbrake Notice NOTIFIER  [] ","@config project_key ","req body= ","data to_json ","Airbrake NOTIFIER_INFO  [] "]}," Airbrake SyncSender build_request":{"type":"method","name":"build_request","children":[],"call":[" build_request_body ","Net HTTP Post  new ","uri request_uri ","Net HTTP Put  new ","@method == "," build_Net HTTP Post  new uest_body "," build_Net HTTP Put  new uest_body ","uri Net HTTP Post  new uest_uri ","uri Net HTTP Put  new uest_uri "]}," Airbrake RouteSender send":{"type":"method","name":"send","children":[],"call":["@sender send ","URI  join ","@config project_id ","@config host ","k to_h merge ","v to_h ","k to_h ","routes map ","@config logger debug ","@config logger "," raise "," __method__ "," class name "," class ","routes none? "]}," Airbrake RouteSender schedule_flush":{"type":"method","name":"schedule_flush","children":[],"call":["@thread name= ","@thread respond_to? "," send ","@mutex synchronize "," sleep ","Thread  new "]}," Airbrake RouteSender increment_stats":{"type":"method","name":"increment_stats","children":[],"call":["stat max= ","ms > ","stat max ","stat min= ","stat min == ","stat min ","ms < ","ms * ","stat sumsq ","stat sum ","dur to_f ","stat count ","stat tdigest push ","stat tdigest ","(send\n  (lvar :end_time) :-\n  (send\n    (lvar :request_info) :[]\n    (sym :start_time))) * ","end_time - ","request_info [] ","Time  new ","(or\n  (send\n    (lvar :request_info) :[]\n    (sym :end_time))\n  (send\n    (const nil :Time) :now)) - ","Time  now ","dur to_f  > ","(send\n  (lvar :end_time) :-\n  (send\n    (lvar :request_info) :[]\n    (sym :start_time))) *  > ","(or\n  (send\n    (lvar :request_info) :[]\n    (sym :end_time))\n  (send\n    (const nil :Time) :now)) -  > ","dur to_f  < ","(send\n  (lvar :end_time) :-\n  (send\n    (lvar :request_info) :[]\n    (sym :start_time))) *  < ","(or\n  (send\n    (lvar :request_info) :[]\n    (sym :end_time))\n  (send\n    (const nil :Time) :now)) -  < ","dur to_f  * ","(send\n  (lvar :end_time) :-\n  (send\n    (lvar :request_info) :[]\n    (sym :start_time))) *  * ","(or\n  (send\n    (lvar :request_info) :[]\n    (sym :end_time))\n  (send\n    (const nil :Time) :now)) -  * ","stat sudur to_f q ","stat su(send\n  (lvar :end_time) :-\n  (send\n    (lvar :request_info) :[]\n    (sym :start_time))) * q ","stat su(or\n  (send\n    (lvar :request_info) :[]\n    (sym :end_time))\n  (send\n    (const nil :Time) :now)) - q "]}," Airbrake RouteSender create_route_key":{"type":"method","name":"create_route_key","children":[],"call":["RouteKey  new ","time rfc3339 ","DateTime  new ","tm zone ","tm min ","tm hour ","tm day ","tm month ","tm year ","DateTime  new  rfc3339 "]}," Airbrake RouteSender inc_request":{"type":"method","name":"inc_request","children":[],"call":[" send "," schedule_flush ","@flush_period > "," increment_stats ","@routes [] ","RouteStat  new ","@mutex synchronize ","Airbrake Promise  new "," create_route_key ","@ create_route_key s [] "," create_ create_route_key _key "]}," Airbrake RouteSender initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","SyncSender  new ","config route_stats_flush_period "]}," Airbrake Notifier inc_request":{"type":"method","name":"inc_request","children":[],"call":["@route_sender inc_request "]}," Airbrake Truncator replace_invalid_characters!":{"type":"method","name":"replace_invalid_characters!","children":[],"call":["str encode! ","str dup ","str frozen? ","str valid_encoding? ","encoding == ","str encoding ","str dup  encode! ","str dup  dup ","str dup  frozen? ","str dup  valid_encoding? ","str valid_str encoding ? ","str encoding  == ","str dup  encoding ","str str encoding  "]}," Airbrake notify_request":{"type":"method","name":"notify_request","children":[],"call":["@notifiers [] notify_request ","@notifiers [] ","@performance_notifiers [] notify ","Request  new ","@performance_notifiers [] ","@performance_notifier notify "," performance_notifier notify "," performance_notifier ","request stash merge! ","request stash ","@notifiers [] notify_Request  new  ","Request  new  stash merge! ","Request  new  stash "]}," Airbrake NilNotifier notify_request":{"type":"method","name":"notify_request","children":[],"call":[]}," Airbrake RouteSender utc_truncate_minutes":{"type":"method","name":"utc_truncate_minutes","children":[],"call":["Time  utc ","time_array []= ","time to_a ","time to_a  []= "]}," Airbrake RouteSender notify_request":{"type":"method","name":"notify_request","children":[],"call":[" send "," schedule_flush ","@flush_period > "," increment_stats ","@routes [] ","RouteStat  new ","@mutex synchronize "," create_route_key "," utc_truncate_minutes ","request_info [] ","Airbrake Promise  new ","@ create_route_key s [] "," create_ create_route_key _key "]}," Airbrake RouteSender to_h":{"type":"method","name":"to_h","children":[],"call":["Base64  strict_encode64 "," tdigest as_small_bytes "," tdigest "," sumsq "," sum "," count "," tdigest compress! "]}," Airbrake RouteSender TDigestBigEndianness as_small_bytes":{"type":"method","name":"as_small_bytes","children":[],"call":["output pack ","arr << "," raise ","k > ","n >> ","128 | ","127 & ","n > ","n < ","c n ","@centroids each_with_object ","c mean ","c mean - ","@centroids map "," compression "," class ","@centroids size ","n >>  >> ","c n  >> ","n >>  > ","c n  > ","n >>  < ","c n  < ","c n >>  ","c c n  ","@cen >> troids each_with_object ","@cec n troids each_with_object ","@centroids each_with_o128 | ject ","c mean >>  ","c meac n  ","c mean >>  - ","c meac n  - ","@cen >> troids map ","@cec n troids map "," compression >>  "," compressioc n  ","@cen >> troids size ","@cec n troids size ","@centroids @centroids size  "]}," Airbrake Notifier pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q pp ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "," class "]}," Airbrake Notifier inspect":{"type":"method","name":"inspect","children":[],"call":[" format ","@filter_chain inspect ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "]}," Airbrake Notifier notify_request":{"type":"method","name":"notify_request","children":[],"call":["@route_sender notify_request ","promise reject ","@config route_stats ","@config environment ","@config ignored_environment? ","Airbrake Promise  new ","Airbrake Promise  new  reject "]}," Airbrake FilterChain add_default_filters":{"type":"method","name":"add_default_filters","children":[],"call":[" add_filter ","Airbrake Filters GitLastCheckoutFilter  new ","@config logger ","filter new ","(const\n  (const\n    (const nil :Airbrake) :Filters) :RootDirectoryFilter) each ","@config root_directory ","Airbrake Filters ExceptionAttributesFilter  new ","Airbrake Filters ContextFilter  new ","Airbrake Filters KeysBlacklist  new ","(lvasgn :blacklist_keys\n  (send\n    (ivar :@config) :blacklist_keys)) any? ","@config blacklist_keys ","Airbrake Filters KeysWhitelist  new ","(lvasgn :whitelist_keys\n  (send\n    (ivar :@config) :whitelist_keys)) any? ","@config whitelist_keys ","@config @config root_directory  ","(lvasgn :@config blacklist_keys \n  (send\n    (ivar :@config) :@config blacklist_keys )) any? ","@config @config blacklist_keys  ","(lvasgn :@config whitelist_keys \n  (send\n    (ivar :@config) :@config whitelist_keys )) any? ","@config @config whitelist_keys  "]}," Airbrake FilterChain pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q pp ","f class ","q seplist ","q nest ","q breakable ","@filters any? "]}," Airbrake FilterChain inspect":{"type":"method","name":"inspect","children":[],"call":["@filters map ","@filters map to_s "," filter_classes to_s "," filter_classes "]}," Airbrake delete_filter":{"type":"method","name":"delete_filter","children":[],"call":["@notifiers [] delete_filter ","@notifiers [] ","@notice_notifiers [] delete_filter ","@notice_notifiers [] ","@notice_notifier delete_filter "," notice_notifier delete_filter "," notice_notifier "]}," Airbrake NilNotifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":[]}," Airbrake Notifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":["@filter_chain delete_filter "]}," Airbrake FilterChain delete_filter":{"type":"method","name":"delete_filter","children":[],"call":["@filters delete_at ","f class name == ","filter_class name ","f class name ","f class ","@filters index "]}," Airbrake delete_performance_filter":{"type":"method","name":"delete_performance_filter","children":[],"call":["@performance_notifiers [] delete_filter ","@performance_notifiers [] ","@performance_notifier delete_filter "," performance_notifier delete_filter "," performance_notifier "]}," Airbrake add_performance_filter":{"type":"method","name":"add_performance_filter","children":[],"call":["@performance_notifiers [] add_filter ","@performance_notifiers [] ","@performance_notifier add_filter "," performance_notifier add_filter "," performance_notifier "]}," Airbrake notify_query":{"type":"method","name":"notify_query","children":[],"call":["@performance_notifiers [] notify ","Query  new ","@performance_notifiers [] ","@performance_notifier notify "," performance_notifier notify "," performance_notifier ","query stash merge! ","query stash ","Query  new  stash merge! ","Query  new  stash "]}," Airbrake notifiers":{"type":"method","name":"notifiers","children":[],"call":[" warn ","loc lineno ","loc path "," __method__ "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake NilDeployNotifier notify":{"type":"method","name":"notify","children":[],"call":[]}," Airbrake NilPerformanceNotifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":[]}," Airbrake NilPerformanceNotifier add_filter":{"type":"method","name":"add_filter","children":[],"call":[]}," Airbrake NilPerformanceNotifier notify":{"type":"method","name":"notify","children":[],"call":[]}," Airbrake NilNoticeNotifier merge_context":{"type":"method","name":"merge_context","children":[],"call":[]}," Airbrake NilNoticeNotifier configured?":{"type":"method","name":"configured?","children":[],"call":[]}," Airbrake NilNoticeNotifier close":{"type":"method","name":"close","children":[],"call":[]}," Airbrake NilNoticeNotifier build_notice":{"type":"method","name":"build_notice","children":[],"call":[]}," Airbrake NilNoticeNotifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":[]}," Airbrake NilNoticeNotifier add_filter":{"type":"method","name":"add_filter","children":[],"call":[]}," Airbrake NilNoticeNotifier notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[]}," Airbrake NilNoticeNotifier notify":{"type":"method","name":"notify","children":[],"call":[]}," Airbrake TimeTruncate utc_truncate_minutes":{"type":"method","name":"utc_truncate_minutes","children":[],"call":[]}," Airbrake TDigest _new_centroid":{"type":"method","name":"_new_centroid","children":[],"call":["@centroids []= ","Centroid  new ","@Centroid  new entroids []= "]}," Airbrake TDigest _digest":{"type":"method","name":"_digest","children":[],"call":[" compress! ","@centroids size > ","@k / ","@centroids size "," _cumulate "," _new_centroid ","nearest cumn "," _add_weight ","max_n - >= ","max_n - ","nearest n ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@n)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor ","4 * * * * ","1 - ","4 * * * ","4 * * ","4 * ","nearest mean_cumn to_f / ","nearest mean_cumn to_f ","nearest mean_cumn ","nearest == ","nearest mean == ","nearest mean "," find_nearest ","max [] ","max nil? ","min [] ","min nil? ","@centroids last ","@centroids first ","@centroids []= ","Centroid  new ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@size)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor ","max last ","min last "," comnearest mean_cumn to_f / ress! "," find_nearest  cumn ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@n)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor  - >= ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@size)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor  - >= ","max [] _n - >= ","@centroids last _n - >= ","max last _n - >= ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@n)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor  - ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@size)) :*\n      (ivar :@delta)) :*\n    (lvar :p)) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :p)))) floor  - ","max [] _n - ","@centroids last _n - ","max last _n - "," find_nearest  n ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@n)) :*\n      (ivar :@delta)) :*\n    (lvar :nearest mean_cumn to_f / )) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :nearest mean_cumn to_f / )))) floor "," find_nearest  mean_cumn to_f / "," find_nearest  mean_cumn to_f "," find_nearest  mean_cumn "," find_nearest  == "," find_nearest  mean == "," find_nearest  mean "," find_ find_nearest  ","max []  [] ","@centroids last  [] ","max last  [] ","max []  nil? ","@centroids last  nil? ","max last  nil? ","min []  [] ","@centroids first  [] ","min last  [] ","min []  nil? ","@centroids first  nil? ","min last  nil? ","(send\n  (send\n    (send\n      (send\n        (int 4) :*\n        (ivar :@size)) :*\n      (ivar :@delta)) :*\n    (lvar :nearest mean_cumn to_f / )) :*\n  (begin\n    (send\n      (int 1) :-\n      (lvar :nearest mean_cumn to_f / )))) floor ","max []  last ","@centroids last  last ","max last  last ","min []  last ","@centroids first  last ","min last  last "]}," Airbrake TDigest _cumulate":{"type":"method","name":"_cumulate","children":[],"call":["c cumn= ","cumn + ","c n ","c mean_cumn= ","c n / ","@centroids each ","@cx > ","exact ! ","@n == ","@n to_f / ","@n to_f ","@last_cumulate == ","@centroids each_value ","@size == ","@size to_f / ","@size to_f ","c c cumn= = ","c cumn=  + ","c mean_c cumn= = "]}," Airbrake TDigest _add_weight":{"type":"method","name":"_add_weight","children":[],"call":["nearest n ","n / ","nearest mean_cumn ","nearest cumn "," _cumulate ","nearest mean_cumn nil? ","n * / ","nearest n + ","n * ","x - ","nearest mean ","x == ","centroid n ","centroid mean_cumn ","centroid cumn ","centroid mean_cumn nil? ","centroid n + ","centroid mean "]}," Airbrake TDigest from_json":{"type":"method","name":"from_json","children":[],"call":[]}," Airbrake TDigest from_bytes":{"type":"method","name":"from_bytes","children":[],"call":[]}," Airbrake TDigest to_a":{"type":"method","name":"to_a","children":[],"call":["@centroids map ","@centroids each_value to_a ","@centroids each_value "]}," Airbrake TDigest size":{"type":"method","name":"size","children":[],"call":[]}," Airbrake TDigest reset!":{"type":"method","name":"reset!","children":[],"call":["@centroids clear "]}," Airbrake TDigest push_centroid":{"type":"method","name":"push_centroid","children":[],"call":[" _digest ","centroid n ","centroid mean ","c each ","c is_a? "]}," Airbrake TDigest push":{"type":"method","name":"push","children":[],"call":[" _digest ","x each ","x is_a? "]}," Airbrake TDigest percentile":{"type":"method","name":"percentile","children":[],"call":["p first ","upper mean ","lower mean ","h == ","lower mean_cumn ","(or\n  (lvar :lower)\n  (lvar :upper)) mean ","upper nil? ","lower nil? ","upper == "," bound_mean_cumn ","@n * "," _cumulate "," size == "," size "," raise ","(irange\n  (int 0)\n  (int 1)) cover? ","p map! ","p is_a? ","@size * ","@n *  == ","@size *  == "]}," Airbrake TDigest p_rank":{"type":"method","name":"p_rank","children":[],"call":["x first ","mean_cumn / ","(send\n  (lvar :item) :-\n  (send\n    (lvar :lower) :mean)) * / ","upper mean - ","lower mean ","upper mean ","(send\n  (lvar :item) :-\n  (send\n    (lvar :lower) :mean)) * ","upper mean_cumn - ","lower mean_cumn ","upper mean_cumn ","item - ","lower != "," bound_mean "," _cumulate ","item > ","max [] mean ","max [] ","item < ","min [] mean ","min [] "," size == "," size ","x map! ","@centroids last ","@centroids first ","x is_a? ","lower mean_cumn  / ","upper lower mean_cumn  - ","lower lower mean_cumn  ","upper lower mean_cumn  ","  bound_mean _mean ","@centroids last  [] mean ","@centroids last  [] ","@centroids first  [] mean ","@centroids first  [] "]}," Airbrake TDigest merge!":{"type":"method","name":"merge!","children":[],"call":[" push_centroid ","other centroids values shuffle ","other centroids values ","other centroids "]}," Airbrake TDigest find_nearest":{"type":"method","name":"find_nearest","children":[],"call":["ceil [] ","floor [] ","(send\n  (lvar :floor_key) :-\n  (lvar :x)) abs < ","(send\n  (lvar :ceil_key) :-\n  (lvar :x)) abs ","ceil_key - ","(send\n  (lvar :floor_key) :-\n  (lvar :x)) abs ","floor_key - ","floor nil? ","ceil nil? ","@centroids lower_bound ","@centroids upper_bound "," size == "," size ","(send\n  (lvar :lower_key) :-\n  (lvar :x)) abs < ","(send\n  (lvar :upper_key) :-\n  (lvar :x)) abs ","upper_key - ","(send\n  (lvar :lower_key) :-\n  (lvar :x)) abs ","lower_key - ","@centroids upper_bound  [] ","@centroids lower_bound  [] ","(send\n  (lvar :floor [] ) :-\n  (lvar :x)) abs < ","(send\n  (lvar :@centroids lower_bound _key) :-\n  (lvar :x)) abs < ","(send\n  (lvar :ceil [] ) :-\n  (lvar :x)) abs ","(send\n  (lvar :@centroids upper_bound _key) :-\n  (lvar :x)) abs ","ceil []  - ","@centroids upper_bound _key - ","(send\n  (lvar :floor [] ) :-\n  (lvar :x)) abs ","(send\n  (lvar :@centroids lower_bound _key) :-\n  (lvar :x)) abs ","floor []  - ","@centroids lower_bound _key - ","@centroids lower_bound  nil? ","@centroids upper_bound  nil? "]}," Airbrake TDigest compression":{"type":"method","name":"compression","children":[],"call":["1 / "]}," Airbrake TDigest compress!":{"type":"method","name":"compress!","children":[],"call":[" _cumulate "," push_centroid ","points shuffle "," reset! "," to_a "," to_a  shuffle "]}," Airbrake TDigest bound_mean_cumn":{"type":"method","name":"bound_mean_cumn","children":[],"call":["bounds << ","last_c nil? ! ","last_c nil? ","bounds empty? ","v mean_cumn > ","v mean_cumn ","v mean_cumn == ","@centroids each_value "]}," Airbrake TDigest bound_mean":{"type":"method","name":"bound_mean","children":[],"call":["upper [] ","lower [] ","@centroids lower_bound ","@centroids upper_bound ","@centroids upper_bound  [] ","@centroids lower_bound  [] ","@centroids @centroids lower_bound _bound ","@centroids @centroids upper_bound _bound "]}," Airbrake TDigest as_json":{"type":"method","name":"as_json","children":[],"call":["c as_json ","@centroids map ","@centroids each_value map ","@centroids each_value "]}," Airbrake TDigest as_small_bytes":{"type":"method","name":"as_small_bytes","children":[],"call":["output pack ","arr << "," raise ","k > ","n >> ","128 | ","127 & ","n > ","n < ","c n ","@centroids each_with_object ","c mean ","c mean - ","@centroids map "," compression "," class ","@centroids size ","@centroids each_value each_with_object ","@centroids each_value ","@centroids each_value map ","@centroids each_value with_object ","n >>  >> ","c n  >> ","n >>  > ","c n  > ","n >>  < ","c n  < ","c n >>  ","c c n  ","@cen >> troids each_with_object ","@cec n troids each_with_object ","@centroids each_with_o128 | ject ","c mean >>  ","c meac n  ","c mean >>  - ","c meac n  - ","@cen >> troids map ","@cec n troids map "," compression >>  "," compressioc n  ","@cen >> troids size ","@cec n troids size ","@centroids @centroids size  ","@cen >> troids each_value each_with_object ","@cec n troids each_value each_with_object ","@centroids each_value each_with_o128 | ject ","@centroids each_c mean - ue each_with_object ","@cen >> troids each_value ","@cec n troids each_value ","@centroids each_c mean - ue ","@cen >> troids each_value map ","@cec n troids each_value map ","@centroids each_c mean - ue map ","@cen >> troids each_value with_object ","@cec n troids each_value with_object ","@centroids each_value with_o128 | ject ","@centroids each_c mean - ue with_object "]}," Airbrake TDigest as_bytes":{"type":"method","name":"as_bytes","children":[],"call":["output pack ","c n ","@centroids map ","c mean "," compression ","@centroids size ","@centroids each_value map ","@centroids each_value ","@centroids @centroids size  "]}," Airbrake TDigest +":{"type":"method","name":"+","children":[],"call":["t push_centroid ","data delete_at "," rand ","data length ","data any? "," centroids values + ","other centroids values ","other centroids "," centroids values "," centroids "," class new "," class "," class new  push_cen class new roid "," centroids values +  delete_at ","da class new a dele class new e_a class new  "," centroids values +  length ","da class new a leng class new h "," centroids values +  any? ","da class new a any? "," cen class new roids values + ","o class new her cen class new roids values ","o class new her cen class new roids "," cen class new roids values "," cen class new roids "]}," Airbrake TDigest initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! ","RBTree  new "]}," Airbrake TDigest Centroid as_json":{"type":"method","name":"as_json","children":[],"call":[" n "," mean "]}," Airbrake TDigest Centroid initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake increment":{"type":"method","name":"increment","children":[],"call":[" tdigest push "," tdigest ","ms * "," sumsq "," sum ","(send\n  (lvar :end_time) :-\n  (lvar :start_time)) * ","end_time - "," count ","Time  new "," increment_ms ","(send\n  (lvar :end_time) :-\n  (lvar :start_time)) *  * "," su(send\n  (lvar :end_time) :-\n  (lvar :start_time)) * q "," increment_(send\n  (lvar :end_time) :-\n  (lvar :start_time)) *  "]}," Airbrake to_h":{"type":"method","name":"to_h","children":[],"call":["Base64  strict_encode64 "," tdigest as_small_bytes "," tdigest "," sumsq "," sum "," count "," tdigest compress! ","TimeTruncate  utc_truncate_minutes "," start_time "," query "," route "," method "," status_code ","val nil? ","(pair\n  (str \"environment\")\n  (send nil :environment)) delete_if "," environment "," line "," file "," func ","(pair\n  (str \"method\")\n  (send nil :method)) delete_if "," error_count "," queue "," response_type "]}," Airbrake initialize":{"type":"method","name":"initialize","children":[],"call":["TimeTruncate  utc_truncate_minutes "]}," Airbrake name":{"type":"method","name":"name","children":[],"call":[]}," Airbrake PerformanceNotifier send":{"type":"method","name":"send","children":[],"call":["@sender send ","URI  join ","@config project_id ","@config host ","k to_h merge! ","v to_h ","k to_h ","data map ","(send\n  (lvar :payload) :group_by) each ","k name ","payload group_by ","@config logger debug ","@config logger "," raise ","payload none? "," __method__ "," class name "," class ","data []= ","@config environment "," logger debug "," logger ","sender send "," with_grouped_payload ","@config apm_host "]}," Airbrake PerformanceNotifier schedule_flush":{"type":"method","name":"schedule_flush","children":[],"call":[" send ","@mutex synchronize "," sleep ","Thread  new "," spawn_timer "," logger error "," logger ","@schedule_flush run ","@schedule_flush status == ","@schedule_flush status ","@payload empty? ","@payload clear ","Airbrake Promise  new ","@payload none? ","@has_payload wait ","(send\n  (send\n    (const nil :MonotonicTime) :time_in_s) :-\n  (ivar :@last_flush_time)) < ","MonotonicTime  time_in_s - ","MonotonicTime  time_in_s ","@payload synchronize "," loop "]}," Airbrake PerformanceNotifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":["@filter_chain delete_filter "]}," Airbrake PerformanceNotifier add_filter":{"type":"method","name":"add_filter","children":[],"call":["@filter_chain add_filter "," block_given? "]}," Airbrake PerformanceNotifier notify":{"type":"method","name":"notify","children":[],"call":[" send "," schedule_flush ","@flush_period > ","@payload [] increment ","resource end_time ","resource start_time ","@payload [] ","Airbrake Stat  new ","@mutex synchronize ","resource ignored? ","@filter_chain refine ","promise reject ","@config performance_stats ","@config environment ","@config ignored_environment? ","Airbrake Promise  new ","promise rejected? ","@config check_configuration "," send_resource ","@payload synchronize "," update_payload ","@config check_performance_options ","promise resolve "," send_metric ","Airbrake Promise  new  reject ","@config check_configuration  reject ","@config check_performance_options  reject ","Airbrake Promise  new  rejected? ","@config check_configuration  rejected? ","@config check_performance_options  rejected? ","Airbrake Promise  new  resolve ","@config check_configuration  resolve ","@config check_performance_options  resolve "]}," Airbrake PerformanceNotifier initialize":{"type":"method","name":"initialize","children":[],"call":["FilterChain  new ","Mutex  new ","SyncSender  new ","@config performance_stats_flush_period ","Config  new "," warn ","loc lineno ","loc path "," __method__ "," class name "," class "," caller_locations first "," caller_locations ","config is_a? ","Airbrake Config  instance performance_stats_flush_period ","Airbrake Config  instance ","AsyncSender  new ","@payload new_cond "," extend ","Airbrake Config  instance  performance_stats_flush_period "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "," extend  new_cond "]}," Airbrake NoticeNotifier add_default_filters":{"type":"method","name":"add_default_filters","children":[],"call":[" add_filter ","Airbrake Filters GitLastCheckoutFilter  new ","@config logger ","filter new ","(const\n  (const\n    (const nil :Airbrake) :Filters) :RootDirectoryFilter) each ","@config root_directory ","Airbrake Filters ExceptionAttributesFilter  new ","Airbrake Filters ContextFilter  new ","Airbrake Filters KeysBlacklist  new ","(lvasgn :blacklist_keys\n  (send\n    (ivar :@config) :blacklist_keys)) any? ","@config blacklist_keys ","Airbrake Filters KeysWhitelist  new ","(lvasgn :whitelist_keys\n  (send\n    (ivar :@config) :whitelist_keys)) any? ","@config whitelist_keys ","f new ","DEFAULT_FILTERS  each ","@config @config root_directory  ","(lvasgn :@config blacklist_keys \n  (send\n    (ivar :@config) :@config blacklist_keys )) any? ","@config @config blacklist_keys  ","(lvasgn :@config whitelist_keys \n  (send\n    (ivar :@config) :@config whitelist_keys )) any? ","@config @config whitelist_keys  "]}," Airbrake NoticeNotifier clean_backtrace":{"type":"method","name":"clean_backtrace","children":[],"call":["clean_bt empty? ","frame include? ","caller_copy drop_while ","Kernel  caller ","Kernel  caller  drop_while "]}," Airbrake NoticeNotifier default_sender":{"type":"method","name":"default_sender","children":[],"call":["@config logger warn ","@config logger ","@async_sender has_workers? "," logger warn "," logger "]}," Airbrake NoticeNotifier send_notice":{"type":"method","name":"send_notice","children":[],"call":["sender send ","promise reject ","notice ignored? ","@filter_chain refine "," block_given? "," build_notice ","@config environment ","@config ignored_environment? ","Airbrake Promise  new ","promise rejected? ","@config check_configuration ","Airbrake Promise  new  reject ","@config check_configuration  reject "," build_notice  ignored? "," build_ build_notice  ","Airbrake Promise  new  rejected? ","@config check_configuration  rejected? "]}," Airbrake NoticeNotifier convert_to_exception":{"type":"method","name":"convert_to_exception","children":[],"call":["e set_backtrace "," clean_backtrace ","RuntimeError  new ","ex to_s ","ex set_backtrace ","ex backtrace ","Backtrace  java_exception? ","ex is_a? ","RuntimeError  new  sRuntimeError  new t_backtracRuntimeError  new  "," clRuntimeError  new an_backtracRuntimeError  new  ","RuntimRuntimeError  new Error  nRuntimeError  new w ","RuntimeError  new x to_s ","RuntimeError  new x sRuntimeError  new t_backtracRuntimeError  new  ","RuntimeError  new x backtracRuntimeError  new  ","BacktracRuntimeError  new   java_RuntimeError  new xcRuntimeError  new ption? ","RuntimeError  new x is_a? "]}," Airbrake NoticeNotifier pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q pp ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "," class "]}," Airbrake NoticeNotifier inspect":{"type":"method","name":"inspect","children":[],"call":[" format ","@filter_chain inspect ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "]}," Airbrake NoticeNotifier merge_context":{"type":"method","name":"merge_context","children":[],"call":["@context merge! ","Airbrake Context  current merge! ","Airbrake Context  current "]}," Airbrake NoticeNotifier configured?":{"type":"method","name":"configured?","children":[],"call":["@config valid? "]}," Airbrake NoticeNotifier close":{"type":"method","name":"close","children":[],"call":["@async_sender close ","@sync_sender close "]}," Airbrake NoticeNotifier build_notice":{"type":"method","name":"build_notice","children":[],"call":["Notice  new ","params dup "," convert_to_exception ","exception [] merge! ","exception [] ","exception is_a? "," raise ","@async_sender closed? ","exception class "]}," Airbrake NoticeNotifier delete_filter":{"type":"method","name":"delete_filter","children":[],"call":["@filter_chain delete_filter "]}," Airbrake NoticeNotifier add_filter":{"type":"method","name":"add_filter","children":[],"call":["@filter_chain add_filter "," block_given? "]}," Airbrake NoticeNotifier notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[" send_notice value "," send_notice "]}," Airbrake NoticeNotifier notify":{"type":"method","name":"notify","children":[],"call":[" send_notice "," default_sender "]}," Airbrake NoticeNotifier initialize":{"type":"method","name":"initialize","children":[],"call":[" add_default_filters ","SyncSender  new ","AsyncSender  new ","FilterChain  new ","Config  new "," warn ","loc lineno ","loc path "," __method__ "," class name "," class "," caller_locations first "," caller_locations ","config is_a? ","Airbrake Config  instance "," add_filter ","Airbrake Filters ExceptionAttributesFilter  new ","Airbrake Filters ContextFilter  new ","filter new ","DEFAULT_FILTERS  each "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake Ignorable raise_if_ignored":{"type":"method","name":"raise_if_ignored","children":[],"call":[" raise "," class "," ignored? "]}," Airbrake Ignorable ignore!":{"type":"method","name":"ignore!","children":[],"call":[" ignored= "]}," Airbrake Ignorable ignored?":{"type":"method","name":"ignored?","children":[],"call":[" ignored ! ! "," ignored ! "," ignored "]}," Airbrake HashKeyable hash":{"type":"method","name":"hash","children":[],"call":[" to_h hash "," to_h "]}," Airbrake HashKeyable eql?":{"type":"method","name":"eql?","children":[],"call":["other hash == "," hash ","other hash ","other is_a? "," class "]}," Airbrake Filters SqlFilter call":{"type":"method","name":"call","children":[],"call":["resource query= ","UNMATCHED_PAIR  [] =~ ","UNMATCHED_PAIR  [] ","resource query gsub ","resource query ","resource respond_to? ","q gsub! ","q =~ ","query gsub ","resource ignore! ","IGNORED_QUERIES  any? ","metric query= ","metric ignore! ","metric query ","metric respond_to? ","resource resource query gsub uery= ","resource query gsub uery= ","resource resource query = ","resource metric query = ","resource resource query gsub uery gsub ","resource query gsub uery gsub ","resource resource query  gsub ","resource metric query  gsub ","resource resource query gsub uery ","resource query gsub uery ","resource resource query  ","resource metric query  ","resource query gsub  gsub! ","query gsub  gsub! ","resource query gsub  =~ ","query gsub  =~ ","query gsub uery gsub ","resource query  gsub ","metric query  gsub ","metric resource query gsub uery= ","metric query gsub uery= ","metric resource query = ","metric metric query = ","metric resource query gsub uery ","metric query gsub uery ","metric resource query  ","metric metric query  "]}," Airbrake Filters SqlFilter initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  union ","ALL_FEATURES  [] ","DIALECT_FEATURES  [] map ","DIALECT_FEATURES  [] "]}," Airbrake DeployNotifier notify":{"type":"method","name":"notify","children":[],"call":["@sender send ","URI  join ","@config project_id ","@config host ","@config environment ","deploy_info [] ","promise reject ","@config ignored_environment? ","Airbrake Promise  new ","promise rejected? ","@config check_configuration ","@config error_host ","Airbrake Promise  new  reject ","@config check_configuration  reject ","Airbrake Promise  new  rejected? ","@config check_configuration  rejected? "]}," Airbrake DeployNotifier initialize":{"type":"method","name":"initialize","children":[],"call":["SyncSender  new ","Config  new "," warn ","loc lineno ","loc path "," __method__ "," class name "," class "," caller_locations first "," caller_locations ","config is_a? ","Airbrake Config  instance "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake Config route_stats_flush_period=":{"type":"method","name":"route_stats_flush_period=","children":[],"call":[" logger warn "," logger "]}," Airbrake Config route_stats_flush_period":{"type":"method","name":"route_stats_flush_period","children":[],"call":[" logger warn "," logger "]}," Airbrake Config route_stats=":{"type":"method","name":"route_stats=","children":[],"call":[" logger warn "," logger "]}," Airbrake Config route_stats":{"type":"method","name":"route_stats","children":[],"call":[" logger warn "," logger "]}," Airbrake NoticeNotifier notify_request":{"type":"method","name":"notify_request","children":[],"call":["@perf_notifier notify ","Request  new ","@config logger info "," __method__ "," class ","@config logger "]}," Airbrake Filters GitRepositoryFilter which":{"type":"method","name":"which","children":[],"call":["File  directory? ! ","File  directory? ","File  executable? ","File  join ","exts find ","ENV  [] split find ","ENV  [] split ","ENV  [] ","File  File  join cutable? ","ENV  [] split  find "]}," Airbrake Filters GitRepositoryFilter detect_git_version":{"type":"method","name":"detect_git_version","children":[],"call":["Gem Version  new ","(str \"git --version\") split [] ","(str \"git --version\") split "," which "]}," Airbrake Filters GitRepositoryFilter attach_repository":{"type":"method","name":"attach_repository","children":[],"call":["notice [] []= ","notice [] ","(str \"cd \") chomp ","@git_version >= ","Gem Version  new ","File  exist? "]}," Airbrake notify_deploy":{"type":"method","name":"notify_deploy","children":[],"call":["@deploy_notifiers [] notify ","@deploy_notifiers [] ","@deploy_notifier notify "," deploy_notifier notify "," deploy_notifier "]}," Airbrake Inspectable pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q pp ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "," class "]}," Airbrake Inspectable inspect":{"type":"method","name":"inspect","children":[],"call":[" format ","@filter_chain inspect ","@config host ","@config project_key ","@config project_id ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "," class name "," class "]}," Airbrake Loggable logger":{"type":"method","name":"logger","children":[],"call":["Loggable  instance "]}," Airbrake Loggable instance":{"type":"method","name":"instance","children":[],"call":[" Logger  new ","l level= "," Logger  new tap "]}," Airbrake Config instance":{"type":"method","name":"instance","children":[],"call":[" new "]}," Airbrake Promise value":{"type":"method","name":"value","children":[],"call":["@value [] "," resolved? "]}," Airbrake Promise resolved?":{"type":"method","name":"resolved?","children":[],"call":["@value key? "]}," Airbrake Promise rejected?":{"type":"method","name":"rejected?","children":[],"call":["@value key? "]}," Airbrake Config check_configuration":{"type":"method","name":"check_configuration","children":[],"call":[" check_notify_ability ","promise rejected? "," validate "," validate  rejected? "]}," Airbrake Config check_notify_ability":{"type":"method","name":"check_notify_ability","children":[],"call":["Validator  check_notify_ability "]}," Airbrake Config validate":{"type":"method","name":"validate","children":[],"call":["Validator  validate "]}," Airbrake Config Validator ignored_environment?":{"type":"method","name":"ignored_environment?","children":[],"call":["env == ","pattern to_s ","env match ","pattern is_a? ","config ignore_environments any? ","config ignore_environments ","config environment to_s ","config environment ","config environment ! ","config ignore_environments none? ","config logger warn ","config logger ","config environment nil? ","config environment to_s  == ","config environment to_s  match ","config ignore_config environment to_s ironments any? ","config ignore_config environment to_s ironments ","config config environment to_s ironment to_s ","config config environment to_s ironment ","config config environment to_s ironment ! ","config ignore_config environment to_s ironments none? ","config config environment to_s ironment nil? "]}," Airbrake Config Validator check_notify_ability":{"type":"method","name":"check_notify_ability","children":[],"call":["promise resolve ","promise reject ","config environment "," ignored_environment? ","Airbrake Promise  new ","config error_notifications ","Airbrake Promise  new  resolve ","Airbrake Promise  new  reject "]}," Airbrake Config Validator validate":{"type":"method","name":"validate","children":[],"call":["promise resolve ","promise reject ","config environment ","config environment class "," valid_environment? "," valid_project_key? "," valid_project_id? ","Airbrake Promise  new ","Airbrake Promise  new  resolve ","Airbrake Promise  new  reject "]}," Airbrake process_config_options":{"type":"method","name":"process_config_options","children":[],"call":[" notice_notifier add_filter ","filter new ","config root_directory "," notice_notifier ","(const\n  (const\n    (const nil :Airbrake) :Filters) :RootDirectoryFilter) each ","Airbrake Filters KeysWhitelist  new ","config whitelist_keys ","config whitelist_keys any? ","Airbrake Filters KeysBlacklist  new ","config blacklist_keys ","config blacklist_keys any? "," configured? "," notice_notifier has_filter? ","Airbrake Filters KeysAllowlist  new ","config allowlist_keys ","config allowlist_keys any? ","Airbrake Filters KeysBlocklist  new ","config blocklist_keys ","config blocklist_keys any? ","config Airbrake Filters KeysWhitelist  new _keys ","config Airbrake Filters KeysWhitelist  new _keys any? ","config Airbrake Filters KeysBlacklist  new _keys ","config Airbrake Filters KeysBlacklist  new _keys any? ","config Airbrake Filters KeysAllowlist  new _keys ","config Airbrake Filters KeysAllowlist  new _keys any? ","config Airbrake Filters KeysBlocklist  new _keys ","config Airbrake Filters KeysBlocklist  new _keys any? "]}," Airbrake reset":{"type":"method","name":"reset","children":[],"call":[" deploy_notifier= ","DeployNotifier  new "," notice_notifier= ","NoticeNotifier  new "," performance_notifier= ","PerformanceNotifier  new "," close "," configured? "," notice_notifier "]}," Airbrake notify_queue_sync":{"type":"method","name":"notify_queue_sync","children":[],"call":[" performance_notifier notify_sync "," performance_notifier ","queue stash merge! ","queue stash ","Queue  new ","Queue  new  stash merge! ","Queue  new  stash "]}," Airbrake notify_queue":{"type":"method","name":"notify_queue","children":[],"call":[" performance_notifier notify "," performance_notifier ","queue stash merge! ","queue stash ","Queue  new ","Queue  new  stash merge! ","Queue  new  stash "]}," Airbrake notify_performance_breakdown_sync":{"type":"method","name":"notify_performance_breakdown_sync","children":[],"call":[" performance_notifier notify_sync "," performance_notifier ","performance_breakdown stash merge! ","performance_breakdown stash ","PerformanceBreakdown  new ","PerformanceBreakdown  new  stash merge! ","PerformanceBreakdown  new  stash "]}," Airbrake notify_performance_breakdown":{"type":"method","name":"notify_performance_breakdown","children":[],"call":[" performance_notifier notify "," performance_notifier ","performance_breakdown stash merge! ","performance_breakdown stash ","PerformanceBreakdown  new ","@performance_notifier notify ","PerformanceBreakdown  new  stash merge! ","PerformanceBreakdown  new  stash "]}," Airbrake notify_query_sync":{"type":"method","name":"notify_query_sync","children":[],"call":[" performance_notifier notify_sync "," performance_notifier ","query stash merge! ","query stash ","Query  new ","Query  new  stash merge! ","Query  new  stash "]}," Airbrake notify_request_sync":{"type":"method","name":"notify_request_sync","children":[],"call":[" performance_notifier notify_sync "," performance_notifier ","request stash merge! ","request stash ","Request  new ","Request  new  stash merge! ","Request  new  stash "]}," Airbrake deploy_notifier":{"type":"method","name":"deploy_notifier","children":[],"call":["DeployNotifier  new ","PerformanceNotifier  new "]}," Airbrake notice_notifier":{"type":"method","name":"notice_notifier","children":[],"call":["NoticeNotifier  new "]}," Airbrake performance_notifier":{"type":"method","name":"performance_notifier","children":[],"call":["PerformanceNotifier  new ","NoticeNotifier  new "]}," Airbrake TimedTrace spans":{"type":"method","name":"spans","children":[],"call":["new_spans []= ","benchmark duration ","@spans each_with_object ","@spans transform_values "]}," Airbrake TimedTrace stop_span":{"type":"method","name":"stop_span","children":[],"call":["@spans [] stop ","@spans [] ","@spans key? "]}," Airbrake TimedTrace start_span":{"type":"method","name":"start_span","children":[],"call":["@spans []= ","Airbrake Benchmark  new ","@spans key? "]}," Airbrake TimedTrace span":{"type":"method","name":"span","children":[],"call":[" stop_span "," start_span "]}," Airbrake TimedTrace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake ThreadPool spawn_worker":{"type":"method","name":"spawn_worker","children":[],"call":["@block call ","message == ","@queue pop ","Thread  new ","@queue pop  == "]}," Airbrake ThreadPool spawn_workers":{"type":"method","name":"spawn_workers","children":[],"call":["@workers enclose ","@workers add "," spawn_worker ","@worker_size times "]}," Airbrake ThreadPool closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Airbrake ThreadPool close":{"type":"method","name":"close","children":[],"call":[" logger debug "," logger ","threads each ","@workers list dup ","@workers list ","@queue << ","@worker_size times ","msg + ","@queue size ","@queue empty? "," raise ","@mutex synchronize "]}," Airbrake ThreadPool has_workers?":{"type":"method","name":"has_workers?","children":[],"call":["@workers list any? ","@workers list ","@closed ! "," spawn_workers ","Process  pid ","@workers list empty? ","@pid != ","@mutex synchronize ","ThreadGroup  new ","ThreadGroup  new  list any? ","ThreadGroup  new  list ","ThreadGroup  new  list empty? ","Process  pid  != "]}," Airbrake ThreadPool backlog":{"type":"method","name":"backlog","children":[],"call":["@queue size "]}," Airbrake ThreadPool <<":{"type":"method","name":"<<","children":[],"call":["@queue << "," backlog >= "," backlog "," logger error ","message inspect "," logger "," logger info "]}," Airbrake ThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":[" has_workers? ","Mutex  new ","ThreadGroup  new ","SizedQueue  new "]}," Airbrake inspect":{"type":"method","name":"inspect","children":[],"call":[" sumsq "," sum "," count "]}," Airbrake increment_ms":{"type":"method","name":"increment_ms","children":[],"call":[" tdigest push "," tdigest ","ms * "," sumsq "," sum "," count "]}," Airbrake Stashable stash":{"type":"method","name":"stash","children":[],"call":[]}," Airbrake cargo":{"type":"method","name":"cargo","children":[],"call":[]}," Airbrake destination":{"type":"method","name":"destination","children":[],"call":[]}," Airbrake merge":{"type":"method","name":"merge","children":[],"call":["other error_count "," error_count "]}," Airbrake hash":{"type":"method","name":"hash","children":[],"call":["(pair\n  (str \"queue\")\n  (send nil :queue)) hash "," queue "]}," Airbrake PerformanceNotifier serialize_resources":{"type":"method","name":"serialize_resources","children":[],"call":["resource_hash []= ","stat to_h ","group_stats merge ","name == ","stats reject ","resource groups any? ","resource groups ","resource to_h merge! ","stats [] to_h ","stats [] ","resource to_h ","resources map ","resource to_h merge!  []= "]}," Airbrake PerformanceNotifier with_grouped_payload":{"type":"method","name":"with_grouped_payload","children":[],"call":["payload []= ","@config environment "," serialize_resources ","grouped_payload each ","resource destination ","resource cargo ","raw_payload group_by "," serialize_metrics ","metric destination ","metric cargo "]}," Airbrake PerformanceNotifier send_resource":{"type":"method","name":"send_resource","children":[],"call":[" schedule_flush "," send ","@flush_period == "," update_payload ","@mutex synchronize ","resource ignored? ","@filter_chain refine ","promise rejected? ","@config check_performance_options ","@config check_configuration ","Promise  new reject ","resource class ","Promise  new "," check_configuration ","@has_payload signal ","@config check_performance_options  rejected? ","@config check_configuration  rejected? "," check_configuration  rejected? "]}," Airbrake PerformanceNotifier spawn_timer":{"type":"method","name":"spawn_timer","children":[],"call":[" send ","Airbrake Promise  new ","@mutex synchronize "," sleep ","Thread  stop ","@payload none? "," loop ","Thread  new "]}," Airbrake PerformanceNotifier update_payload":{"type":"method","name":"update_payload","children":[],"call":["@payload [] [] increment_ms ","@payload [] [] ","@payload [] ","Airbrake Stat  new ","resource groups each ","resource groups ","@payload [] [] increment ","resource end_time ","resource start_time ","@payload []= ","@payload key merge ","@payload key "," update_total ","resource timing ","metric groups each ","metric groups ","metric timing "]}," Airbrake PerformanceNotifier close":{"type":"method","name":"close","children":[],"call":[" logger debug "," logger ","@async_sender close ","@schedule_flush kill ","@mutex synchronize ","@payload synchronize ","@sender close ","@sync_sender close "]}," Airbrake PerformanceNotifier notify_sync":{"type":"method","name":"notify_sync","children":[],"call":[" send_resource value "," send_resource "," send_metric value "," send_metric "]}," Airbrake MonotonicTime time_in_nanoseconds":{"type":"method","name":"time_in_nanoseconds","children":[],"call":["time to_i * + ","time nsec ","time to_i * ","10 ** ","time to_i ","Time  now "," java lang System nanoTime "," java lang System "," java lang "," java ","Process  clock_gettime ","(send\n  (send\n    (lvar :time) :to_i) :*\n  (begin\n    (send\n      (int 10) :**\n      (int 9)))) + ","Time  now  to_i * + ","Time  now  nsec ","Time  now  to_i * ","Time  now  to_i ","Process  clock_getTime  now  ","(send\n  (send\n    (lvar :Time  now ) :to_i) :*\n  (begin\n    (send\n      (int 10) :**\n      (int 9)))) + "]}," Airbrake MonotonicTime time_in_ms":{"type":"method","name":"time_in_ms","children":[],"call":[" time_in_nanoseconds / ","10.0 ** "," time_in_nanoseconds "]}," Airbrake Mergeable merge":{"type":"method","name":"merge","children":[],"call":[]}," Airbrake Grouppable groups":{"type":"method","name":"groups","children":[],"call":[]}," Airbrake FileCache reset":{"type":"method","name":"reset","children":[],"call":[]}," Airbrake Config check_performance_options":{"type":"method","name":"check_performance_options","children":[],"call":["promise reject "," query_stats ! "," query_stats ","resource is_a? "," performance_stats ! "," performance_stats ","Airbrake Promise  new "," job_stats ! "," job_stats ","metric is_a? ","Airbrake Promise  new  reject "]}," Airbrake Benchmark stop":{"type":"method","name":"stop","children":[],"call":["MonotonicTime  time_in_ms - ","MonotonicTime  time_in_ms ","@duration > ","MonotonicTime  time_in_ms -  > "]}," Airbrake Benchmark initialize":{"type":"method","name":"initialize","children":[],"call":["MonotonicTime  time_in_ms "]}," Airbrake Benchmark measure":{"type":"method","name":"measure","children":[],"call":[]}," Airbrake AsyncSender thread_pool":{"type":"method","name":"thread_pool","children":[],"call":["ThreadPool  new ","sender send "," proc ","@config queue_size ","@config workers ","SyncSender  new ","@sync_sender send ","SyncSender  new  send ","@sync_SyncSender  new  send "]}," Airbrake PerformanceNotifier update_total":{"type":"method","name":"update_total","children":[],"call":["total increment ","resource end_time ","resource start_time ","Kernel  warn ","loc lineno ","loc path "," caller_locations first "," caller_locations ","total increment_ms ","resource timing "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake PerformanceNotifier check_configuration":{"type":"method","name":"check_configuration","children":[],"call":["Promise  new ","Promise  new reject ","resource timing == ","resource timing ","promise rejected? ","@config check_performance_options ","@config check_configuration ","metric timing == ","metric timing ","@config check_performance_options  rejected? ","@config check_configuration  rejected? "]}," Airbrake Stat inspect":{"type":"method","name":"inspect","children":[],"call":[" sumsq "," sum "," count "," tdigest size "," tdigest "]}," Airbrake Stat increment_ms":{"type":"method","name":"increment_ms","children":[],"call":[" tdigest push "," tdigest ","ms * "," sumsq "," sum "," count ","@mutex synchronize "]}," Airbrake Stat increment":{"type":"method","name":"increment","children":[],"call":[" increment_ms ","(send\n  (lvar :end_time) :-\n  (lvar :start_time)) * ","end_time - ","Time  new "]}," Airbrake Stat to_h":{"type":"method","name":"to_h","children":[],"call":["Base64  strict_encode64 "," tdigest as_small_bytes "," tdigest "," sumsq "," sum "," count "," tdigest compress! "," tdigest size ","@mutex synchronize "]}," Airbrake Stat initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Airbrake Request to_h":{"type":"method","name":"to_h","children":[],"call":["val nil? ","(pair\n  (str \"method\")\n  (send nil :method)) delete_if "," status_code "," route "," method "]}," Airbrake Request cargo":{"type":"method","name":"cargo","children":[],"call":[]}," Airbrake Request destination":{"type":"method","name":"destination","children":[],"call":[]}," Airbrake Request initialize":{"type":"method","name":"initialize","children":[],"call":["TimeTruncate  utc_truncate_minutes "]}," Airbrake Queue route":{"type":"method","name":"route","children":[],"call":[]}," Airbrake Queue merge":{"type":"method","name":"merge","children":[],"call":["other error_count "," error_count "]}," Airbrake Queue hash":{"type":"method","name":"hash","children":[],"call":["(pair\n  (str \"queue\")\n  (send nil :queue)) hash "," queue "]}," Airbrake Queue to_h":{"type":"method","name":"to_h","children":[],"call":[" error_count "," queue "]}," Airbrake Queue cargo":{"type":"method","name":"cargo","children":[],"call":[]}," Airbrake Queue destination":{"type":"method","name":"destination","children":[],"call":[]}," Airbrake Queue initialize":{"type":"method","name":"initialize","children":[],"call":["TimeTruncate  utc_truncate_minutes "]}," Airbrake Query to_h":{"type":"method","name":"to_h","children":[],"call":["val nil? ","(pair\n  (str \"method\")\n  (send nil :method)) delete_if "," line "," file "," func "," query "," route "," method "]}," Airbrake Query cargo":{"type":"method","name":"cargo","children":[],"call":[]}," Airbrake Query destination":{"type":"method","name":"destination","children":[],"call":[]}," Airbrake Query initialize":{"type":"method","name":"initialize","children":[],"call":["TimeTruncate  utc_truncate_minutes "]}," Airbrake PerformanceBreakdown to_h":{"type":"method","name":"to_h","children":[],"call":["val nil? ","(pair\n  (str \"method\")\n  (send nil :method)) delete_if "," response_type "," route "," method "]}," Airbrake PerformanceBreakdown cargo":{"type":"method","name":"cargo","children":[],"call":[]}," Airbrake PerformanceBreakdown destination":{"type":"method","name":"destination","children":[],"call":[]}," Airbrake PerformanceBreakdown initialize":{"type":"method","name":"initialize","children":[],"call":["TimeTruncate  utc_truncate_minutes "]}," Airbrake MonotonicTime time_in_s":{"type":"method","name":"time_in_s","children":[],"call":[" time_in_nanoseconds / ","10.0 ** "," time_in_nanoseconds "]}," Airbrake NoticeNotifier has_filter?":{"type":"method","name":"has_filter?","children":[],"call":["@filter_chain includes? "]}," Airbrake FilterChain filter_classes":{"type":"method","name":"filter_classes","children":[],"call":["@filters map "]}," Airbrake FilterChain includes?":{"type":"method","name":"includes?","children":[],"call":[" filter_classes include? "," filter_classes "]}," Airbrake Filters KeysBlocklist should_filter?":{"type":"method","name":"should_filter?","children":[],"call":["key to_s == ","pattern to_s ","key to_s ","key match ","pattern is_a? ","@patterns any? "]}," Airbrake Filters KeysBlocklist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Filters KeysAllowlist should_filter?":{"type":"method","name":"should_filter?","children":[],"call":["key to_s == ","pattern to_s ","key to_s ","key match ","pattern is_a? ","@patterns none? "]}," Airbrake Filters KeysAllowlist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Config whitelist_keys=":{"type":"method","name":"whitelist_keys=","children":[],"call":[" allowlist_keys= ","Kernel  warn ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake Config blacklist_keys=":{"type":"method","name":"blacklist_keys=","children":[],"call":[" blocklist_keys= ","Kernel  warn ","loc lineno ","loc path "," caller_locations first "," caller_locations "," b caller_locations first klist_keys= "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Airbrake groups":{"type":"method","name":"groups","children":[],"call":[]}," Airbrake RemoteSettings dump_config":{"type":"method","name":"dump_config","children":[],"call":["File  write ","JSON  dump ","@data to_h ","Dir  mkdir ","File  directory? ","File  dirname "]}," Airbrake RemoteSettings load_config":{"type":"method","name":"load_config","children":[],"call":["@data merge! ","JSON  parse ","File  read ","File  exist? ","Dir  mkdir ","File  directory? ","File  dirname "]}," Airbrake RemoteSettings build_config_uri":{"type":"method","name":"build_config_uri","children":[],"call":["uri query= "," URI ","@data config_route "," URI  query= "]}," Airbrake RemoteSettings fetch_config":{"type":"method","name":"fetch_config","children":[],"call":[" logger error "," logger ","JSON  parse ","response start_with? ","Net HTTP  get "," build_config_uri "," URI ","@data config_route ","response body ","response code == ","response code ","Net HTTP  get_response ","https request ","Net HTTP Get  new ","uri request_uri "," build_https ","Net HTTP  get  start_with? ","Net HTTP  get_response  start_with? ","https request  start_with? "," build_config_ build_config_uri  ","Net HTTP  get  body ","Net HTTP  get_response  body ","https request  body ","Net HTTP  get  code == ","Net HTTP  get_response  code == ","https request  code == ","Net HTTP  get  code ","Net HTTP  get_response  code ","https request  code ","Net HTTP  get_Net HTTP  get  ","Net HTTP  get_Net HTTP  get_response  ","Net HTTP  get_https request  ","https Net HTTP Get  new uest "," build_https  request ","uri Net HTTP Get  new uest_uri "," build_config_uri  request_ build_config_uri  "," build_ build_https  "]}," Airbrake RemoteSettings stop_polling":{"type":"method","name":"stop_polling","children":[],"call":[" logger error "," logger "," dump_config ","@poll kill "]}," Airbrake RemoteSettings poll":{"type":"method","name":"poll","children":[],"call":[" sleep ","@data interval ","@block call ","@data merge! "," fetch_config "," loop "," logger error "," logger "," load_config ","Thread  new "]}," Airbrake RemoteSettings initialize":{"type":"method","name":"initialize","children":[],"call":["SettingsData  new ","Airbrake Config  instance "]}," Airbrake RemoteSettings SettingsData find_setting":{"type":"method","name":"find_setting","children":[],"call":["s [] == ","s [] ","@data [] find ","@data [] ","@data key? "]}," Airbrake RemoteSettings SettingsData to_h":{"type":"method","name":"to_h","children":[],"call":["@data dup "]}," Airbrake RemoteSettings SettingsData apm_host":{"type":"method","name":"apm_host","children":[],"call":["s [] "," find_setting ","SETTINGS  [] "," find_setting  [] "," find_ find_setting etting "]}," Airbrake RemoteSettings SettingsData error_host":{"type":"method","name":"error_host","children":[],"call":["s [] "," find_setting ","SETTINGS  [] "," find_setting  [] "," find_ find_setting etting "]}," Airbrake RemoteSettings SettingsData performance_stats?":{"type":"method","name":"performance_stats?","children":[],"call":["s [] "," find_setting ","SETTINGS  [] "," find_setting  [] "," find_ find_setting etting "]}," Airbrake RemoteSettings SettingsData error_notifications?":{"type":"method","name":"error_notifications?","children":[],"call":["s [] "," find_setting ","SETTINGS  [] "," find_setting  [] "," find_ find_setting etting "]}," Airbrake RemoteSettings SettingsData config_route":{"type":"method","name":"config_route","children":[],"call":[" format ","@data [] chomp ","@data [] ","remote_config_host chomp ","@data [] ! ","@data key? ! ","@data key? ","@data [] empty? ! ","@data [] empty? ","remote_config_host chomp + + ","remote_config_host chomp + "]}," Airbrake RemoteSettings SettingsData interval":{"type":"method","name":"interval","children":[],"call":["@data [] ","@data [] > ","@data [] ! ","@data key? ! ","@data key? "]}," Airbrake RemoteSettings SettingsData merge!":{"type":"method","name":"merge!","children":[],"call":["@data merge! "]}," Airbrake RemoteSettings SettingsData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Airbrake Config error_endpoint":{"type":"method","name":"error_endpoint","children":[],"call":["URI  join "," error_host "," project_id "," error_host= ","https:// << "," error_host !~ "]}," Airbrake Config Processor poll_callback":{"type":"method","name":"poll_callback","children":[],"call":["@config performance_stats= ","data performance_stats? ","@config error_notifications= ","data error_notifications? ","@config apm_host= ","data apm_host ","@config error_host= ","data error_host ","@config logger debug ","data to_h ","@config logger "]}," Airbrake Config Processor add_filters":{"type":"method","name":"add_filters","children":[],"call":["notifier add_filter ","filter new ","@config root_directory ","notifier has_filter? ","(const\n  (const\n    (const nil :Airbrake) :Filters) :RootDirectoryFilter) each "]}," Airbrake Config Processor process_remote_configuration":{"type":"method","name":"process_remote_configuration","children":[],"call":["RemoteSettings  poll "," method ","@config remote_config_host ","@config __remote_configuration ! ","@config __remote_configuration ","@project_id ! ","@poll_callback call ","@config environment == ","@config environment ","@config remote_config ","@config ignore_environments include? ","@config ignore_environments "]}," Airbrake Config Processor process_allowlist":{"type":"method","name":"process_allowlist","children":[],"call":["notifier add_filter ","Airbrake Filters KeysAllowlist  new ","@allowlist_keys none? ","@Airbrake Filters KeysAllowlist  new _keys none? "]}," Airbrake Config Processor process_blocklist":{"type":"method","name":"process_blocklist","children":[],"call":["notifier add_filter ","Airbrake Filters KeysBlocklist  new ","@blocklist_keys none? ","@Airbrake Filters KeysBlocklist  new _keys none? "]}," Airbrake Config Processor initialize":{"type":"method","name":"initialize","children":[],"call":["@config project_id ","@config allowlist_keys ","@config blocklist_keys ","Airbrake RemoteSettings Callback  new "]}," Airbrake Config Processor process":{"type":"method","name":"process","children":[],"call":[]}," Airbrake RemoteSettings Callback process_performance_stats":{"type":"method","name":"process_performance_stats","children":[],"call":["@config performance_stats= ","data performance_stats? "]}," Airbrake RemoteSettings Callback process_error_notifications":{"type":"method","name":"process_error_notifications","children":[],"call":["@config error_notifications= ","data error_notifications? "]}," Airbrake RemoteSettings Callback call":{"type":"method","name":"call","children":[],"call":[" process_performance_stats "," process_error_notifications ","@config apm_host= ","data apm_host ","@config error_host= ","data error_host ","@config logger debug ","data to_h ","@config logger "]}," Airbrake RemoteSettings Callback initialize":{"type":"method","name":"initialize","children":[],"call":["config performance_stats ","config error_notifications "]}," Airbrake Context empty?":{"type":"method","name":"empty?","children":[],"call":["@context empty? "]}," Airbrake Context clear":{"type":"method","name":"clear","children":[],"call":["@context clear ","@mutex synchronize "]}," Airbrake Context to_h":{"type":"method","name":"to_h","children":[],"call":["@context dup ","@mutex synchronize "]}," Airbrake Context merge!":{"type":"method","name":"merge!","children":[],"call":["@context merge! ","@mutex synchronize "]}," Airbrake Context initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Airbrake Context current":{"type":"method","name":"current","children":[],"call":[]}," Airbrake RemoteSettings proxy_params":{"type":"method","name":"proxy_params","children":[],"call":["@config proxy [] ","@config proxy ","@config proxy key? "]}," Airbrake RemoteSettings build_https":{"type":"method","name":"build_https","children":[],"call":["https read_timeout= ","@config timeout ","https open_timeout= ","https use_ssl= ","uri is_a? ","Net HTTP  new tap ","Net HTTP  new "," proxy_params ","uri port ","uri host "]}," Airbrake PerformanceNotifier serialize_metrics":{"type":"method","name":"serialize_metrics","children":[],"call":["metric_hash []= ","stat to_h ","group_stats merge ","name == ","stats reject ","metric groups any? ","metric groups ","metric to_h merge! ","stats [] to_h ","stats [] ","metric to_h ","metrics map ","metric to_h merge!  []= "]}," Airbrake PerformanceNotifier send_metric":{"type":"method","name":"send_metric","children":[],"call":[" schedule_flush ","@has_payload signal "," send ","@flush_period == "," update_payload ","Promise  new reject ","metric class ","Promise  new ","metric ignored? ","@filter_chain refine ","promise rejected? "," check_configuration "," check_configuration  rejected? "]}," Airbrake NestedException message":{"type":"method","name":"message","children":[],"call":["msg encode split first ","msg encode split ","msg encode ","exception message ","exception message  encode split first ","exception message  encode split ","exception message  encode "]}," Airbrake SyncSender add_to_backlog?":{"type":"method","name":"add_to_backlog?","children":[],"call":["BACKLOGGABLE_STATUS_CODES  include? ","parsed_resp [] ","parsed_resp key? "]}," Airbrake SyncSender handle_rate_limit":{"type":"method","name":"handle_rate_limit","children":[],"call":["parsed_resp [] ","parsed_resp key? "]}," Airbrake SyncSender close":{"type":"method","name":"close","children":[],"call":["@backlog close "]}," Airbrake Backlog flush":{"type":"method","name":"flush","children":[],"call":["@seen clear "," logger debug "," logger ","failed > ","promise rejected? ","@sync_sender send ","Airbrake Promise  new ","@queue pop ","@queue empty? ","@queue size ","Airbrake Promise  new  rejected? "]}," Airbrake Backlog last_flush":{"type":"method","name":"last_flush","children":[],"call":["MonotonicTime  time_in_s "]}," Airbrake Backlog time_elapsed":{"type":"method","name":"time_elapsed","children":[],"call":["MonotonicTime  time_in_s - "," last_flush ","MonotonicTime  time_in_s "]}," Airbrake Backlog wait":{"type":"method","name":"wait","children":[],"call":["@has_backlog_data wait "," time_elapsed < "," time_elapsed "]}," Airbrake Backlog schedule_flush":{"type":"method","name":"schedule_flush","children":[],"call":[" flush ","@queue empty? "," wait ","@queue synchronize "," loop ","Thread  new "]}," Airbrake Backlog close":{"type":"method","name":"close","children":[],"call":[" logger debug "," logger ","@schedule_flush kill ","@queue synchronize "]}," Airbrake Backlog <<":{"type":"method","name":"<<","children":[],"call":[" schedule_flush ","@has_backlog_data signal "," logger error "," logger ","@queue push ","@seen << ","@seen include? ","@queue synchronize "]}," Airbrake Backlog initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","@queue new_cond ","SizedQueue  new extend ","SizedQueue  new ","SizedQueue  new extend  new_cond "]}," Airbrake Config host=":{"type":"method","name":"host=","children":[],"call":[" logger warn "," logger "]}," Airbrake Config host":{"type":"method","name":"host","children":[],"call":[" logger warn "," logger "]}}