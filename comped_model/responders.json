{" Responders HttpCacheResponder to_format":{"type":"method","name":"to_format","children":[],"call":[" head "," request fresh? "," controller response "," controller "," request "," controller response last_modified= ","(send\n  (send\n    (send nil :resources) :flatten) :map) compact max ","(send\n  (send\n    (send nil :resources) :flatten) :map) compact ","resource updated_at utc ","resource updated_at ","resource respond_to? "," resources flatten map "," resources flatten "," resources "," controller response last_modified nil? "," controller response last_modified ","@http_cache != "," get? ","(or\n  (send\n    (lvar :resource) :updated_at)\n  (send\n    (const nil :Time) :now)) utc ","Time  now "," do_http_cache? "," do_http_cache! "]}," Responders HttpCacheResponder initialize":{"type":"method","name":"initialize","children":[],"call":["options delete "]}," Responders FlashResponder flash_defaults_by_namespace":{"type":"method","name":"flash_defaults_by_namespace","children":[],"call":["defaults << ","slices shift "," controller action_name "," controller ","slices fill join ","slices fill "," controller controller_name ","slices size > ","slices size "," controller controller_path split "," controller controller_path ","Responders FlashResponder  namespace_lookup "," controller controller_path split  shift "," controller controller_path split  fill join "," controller controller_path split  fill "," controller controller_path split  size > "," controller controller_path split  size ","Responders FlashResponder  namespace_Responders FlashResponder  namespace_lookup  "]}," Responders FlashResponder navigation_behavior":{"type":"method","name":"navigation_behavior","children":[],"call":[" controller send []= "," controller send "," controller ","message blank? "," I18n  t ","options [] shift ","options [] ","options merge! "," controller respond_to? ","resource_name downcase "," flash_defaults_by_namespace "," resource class name underscore humanize "," resource class name underscore "," resource class name "," resource class "," resource "," resource class human_name "," resource class respond_to? "," controller send [] present? "," controller send [] "," has_errors? ","@flash == "," get? "," I18n  t  blank? "," resource class name underscore humanize  downcase "," resource class human_name  downcase "]}," Responders FlashResponder initialize":{"type":"method","name":"initialize","children":[],"call":["options delete "]}," RespondersInstallGenerator create_responder_initializer":{"type":"method","name":"create_responder_initializer","children":[],"call":[" create_file ","Rails  application class name ","Rails  application class ","Rails  application "]}," Rails Generators RespondersControllerGenerator flash?":{"type":"method","name":"flash?","children":[],"call":["ApplicationController  responder ancestors include? ! ","ApplicationController  responder ancestors include? ","ApplicationController  responder ancestors ","ApplicationController  responder ","Rails  application config responders flash_keys blank? ","Rails  application config responders flash_keys ","Rails  application config responders ","Rails  application config ","Rails  application "]}," Rails Generators RespondersControllerGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Responders FlashResponder mount_i18n_options":{"type":"method","name":"mount_i18n_options","children":[],"call":["options merge! "," controller send "," controller "," controller respond_to? ","resource_name downcase "," flash_defaults_by_namespace "," resource class name underscore humanize "," resource class name underscore "," resource class name "," resource class "," resource "," resource class human_name "," resource class respond_to? "," resource class model_name human "," resource class model_name "," controller_interpolation_options "," resource_name downcase "," resource_name "," resource class name underscore humanize  downcase "," resource class human_name  downcase "," resource class model_name human  downcase ","  resource class name underscore humanize  downcase ","  resource class human_name  downcase ","  resource class model_name human  downcase ","  resource class name underscore humanize  ","  resource class human_name  ","  resource class model_name human  "]}," Responders FlashResponder to_html":{"type":"method","name":"to_html","children":[],"call":[" controller flash []= "," controller flash "," controller ","message blank? "," I18n  t ","options [] shift ","options [] "," mount_i18n_options "," controller flash [] present? "," controller flash [] ","Responders FlashResponder  flash_keys first ","Responders FlashResponder  flash_keys ","Responders FlashResponder  flash_keys last "," has_errors? ","@flash == "," get? "," respond_to? ! "," respond_to? "," format "," set_i18n_flash? "," set_flash_message! "," set_flash_message? "," I18n  t  blank? "," mount_i18n_options  [] shift "," mount_i18n_options  [] "," mount_i18n_ mount_i18n_options  "," set_flash_ I18n  t ! "," set_flash_ I18n  t ? "]}," Responders HttpCacheResponder new_record?":{"type":"method","name":"new_record?","children":[],"call":[" resource new_record? "," resource "," resource respond_to? "]}," Responders HttpCacheResponder do_http_cache?":{"type":"method","name":"do_http_cache?","children":[],"call":[" controller response last_modified nil? "," controller response last_modified "," controller response "," controller "," new_record? ! "," new_record? ","@http_cache != "," get? ","ActionController Base  perform_caching "," resource respond_to? "," resource "," resourceful? "," persisted? "]}," Responders FlashResponder set_i18n_flash?":{"type":"method","name":"set_i18n_flash?","children":[],"call":["@flash != "," get? ! "," get? "]}," Responders HttpCacheResponder do_http_cache!":{"type":"method","name":"do_http_cache!","children":[],"call":[" head "," request fresh? "," controller response "," controller "," request "," controller response last_modified= ","(send\n  (send\n    (send nil :resources) :flatten) :map) compact max ","(send\n  (send\n    (send nil :resources) :flatten) :map) compact ","(or\n  (send\n    (lvar :resource) :updated_at)\n  (send\n    (const nil :Time) :now)) utc ","Time  now ","resource updated_at ","resource respond_to? "," resources flatten map "," resources flatten "," resources "," controller response last_modified ","resource updated_at utc ","resource updated_at try "," resource updated_at try "," resource updated_at "," resource "," resource respond_to? ","(send\n  (send nil :resources) :map) compact max ","(send\n  (send nil :resources) :map) compact "," resources map "," request  request fresh? ? "]}," Responders FlashResponder set_flash_message?":{"type":"method","name":"set_flash_message?","children":[],"call":["@flash != "," get? ! "," get? "]}," Responders FlashResponder set_flash_message!":{"type":"method","name":"set_flash_message!","children":[],"call":[" controller flash []= "," controller flash "," controller ","message blank? "," I18n  t ","options [] shift ","options [] "," mount_i18n_options "," controller flash [] present? "," controller flash [] ","Responders FlashResponder  flash_keys first ","Responders FlashResponder  flash_keys ","Responders FlashResponder  flash_keys last "," has_errors? "," set_flash ","Responders FlashResponder  helper t ","Responders FlashResponder  helper "," controller helpers t "," controller helpers "," I18n  t  blank? ","Responders FlashResponder  helper t  blank? "," controller helpers t  blank? "," mount_i18n_options  [] shift "," mount_i18n_options  [] "," mount_i18n_ mount_i18n_options  "]}," Responders FlashResponder set_flash":{"type":"method","name":"set_flash","children":[],"call":["flash [] ","flash now "," controller flash "," controller ","value blank? "," set_flash_now? ","flash now  [] "," controller flash  [] ","flash now  now "," controller flash  now "," controller flash now  "," controller  controller flash  "," set_flash now _now? "," set_ controller flash _now? "]}," Responders FlashResponder set_flash_now?":{"type":"method","name":"set_flash_now?","children":[],"call":["@flash_now == "," has_errors? "," format == "," format "," default_action "]}," Responders FlashResponder to_js":{"type":"method","name":"to_js","children":[],"call":[" to_format "," set_flash_message! "," set_flash_message? "]}," RespondersInstallGenerator copy_locale":{"type":"method","name":"copy_locale","children":[],"call":[" copy_file "]}," RespondersInstallGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Responders ControllerMethod responders":{"type":"method","name":"responders","children":[],"call":[" responder= ","klass send "," raise ","(begin\n  (send\n    (send\n      (lvar :responder) :to_s) :classify)) constantize ","responder to_s classify ","responder to_s ","responders inject ","Class  new "," responder ","Responders  const_get ","responder to_s camelize "]}," Responders HttpCacheResponder persisted?":{"type":"method","name":"persisted?","children":[],"call":[" resource persisted? "," resource "," resource respond_to? "]}," Responder default_action":{"type":"method","name":"default_action","children":[],"call":["ACTIONS_FOR_VERBS  [] "," request request_method_symbol "," request "]}," Responders Generators InstallGenerator copy_locale":{"type":"method","name":"copy_locale","children":[],"call":[" copy_file "]}," Responders Generators InstallGenerator update_application_controller":{"type":"method","name":"update_application_controller","children":[],"call":[" inject_into_class "," prepend_file "]}," Responders Generators InstallGenerator create_responder_file":{"type":"method","name":"create_responder_file","children":[],"call":[" create_file "]}," Responders Generators InstallGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Responders CollectionResponder navigation_location":{"type":"method","name":"navigation_location","children":[],"call":[" resources "," resources [] << ","klass model_name plural to_sym ","klass model_name plural ","klass model_name "," resources [] ","klass respond_to? "," resources last class "," resources last "," options [] "," options ","klass model_name route_key to_sym ","klass model_name route_key "," resources last class  model_name plural to_sym "," resources last class  model_name plural "," resources last class  model_name "," resources last class  respond_to? "," resources last class  model_name route_key to_sym "," resources last class  model_name route_key "]}," Rails Generators RespondersControllerGenerator strong_parameters_defined?":{"type":"method","name":"strong_parameters_defined?","children":[],"call":[]}," Rails Generators RespondersControllerGenerator attributes_params":{"type":"method","name":"attributes_params","children":[],"call":[" file_name "," strong_parameters_defined? "," singular_table_name "]}," Rails Generators RespondersControllerGenerator controller_before_filter":{"type":"method","name":"controller_before_filter","children":[],"call":["ActionController Base  respond_to? "]}," Rails Generators RespondersControllerGenerator orm_instance_update":{"type":"method","name":"orm_instance_update","children":[],"call":[" orm_instance update_attributes "," orm_instance "," orm_instance update "," orm_instance respond_to? "]}," Responders LocationResponder initialize":{"type":"method","name":"initialize","children":[],"call":["options []= ","location call "," has_errors? ","options delete ","options [] respond_to? ","options [] ","options delete  call "]}," ActionController Responder response_overridden?":{"type":"method","name":"response_overridden?","children":[],"call":["@default_response present? "]}," ActionController Responder json_resource_errors":{"type":"method","name":"json_resource_errors","children":[],"call":[" resource errors "," resource "]}," ActionController Responder resource_errors":{"type":"method","name":"resource_errors","children":[],"call":[" resource errors "," resource "," send "," format "," respond_to? "]}," ActionController Responder default_action":{"type":"method","name":"default_action","children":[],"call":["DEFAULT_ACTIONS_FOR_VERBS  [] "," request request_method_symbol "," request "]}," ActionController Responder has_renderer?":{"type":"method","name":"has_renderer?","children":[],"call":["Renderers RENDERERS  include? "," format "]}," ActionController Responder has_errors?":{"type":"method","name":"has_errors?","children":[],"call":[" resource errors empty? ! "," resource errors empty? "," resource errors "," resource "," resource respond_to? "]}," ActionController Responder display_errors":{"type":"method","name":"display_errors","children":[],"call":[" controller render "," resource_errors "," format "," controller "]}," ActionController Responder display":{"type":"method","name":"display","children":[],"call":[" controller render ","given_options merge! merge! "," format ","given_options merge! "," options "," controller "]}," ActionController Responder default_render":{"type":"method","name":"default_render","children":[],"call":[" controller default_render "," options "," controller ","@default_response call "," controller render ","(pair\n  (sym :status)\n  (send nil :error_status)) merge! "," error_status "," has_errors? "," get? ! "," get? "]}," ActionController Responder resource_location":{"type":"method","name":"resource_location","children":[],"call":[" resources "," options [] "," options "]}," ActionController Responder resourceful?":{"type":"method","name":"resourceful?","children":[],"call":[" resource respond_to? "," format "," resource "]}," ActionController Responder api_behavior":{"type":"method","name":"api_behavior","children":[],"call":[" head "," display "," api_location "," resource "," post? "," get? "," raise ","MissingRenderer  new "," format "," has_renderer? "," resourceful? "]}," ActionController Responder navigation_behavior":{"type":"method","name":"navigation_behavior","children":[],"call":[" redirect_to "," navigation_location "," render "," default_action "," has_errors? "," raise "," get? "," rendering_options "," redirect_status "," error_rendering_options "]}," ActionController Responder to_format":{"type":"method","name":"to_format","children":[],"call":[" api_behavior "," display_errors "," default_render "," response_overridden? "," has_errors? ! "," has_errors? "," get? "," has_view_rendering? "," response_overridden? ! "," get? ! "]}," ActionController Responder to_js":{"type":"method","name":"to_js","children":[],"call":[" default_render "]}," ActionController Responder to_html":{"type":"method","name":"to_html","children":[],"call":[" navigation_behavior "," default_render "]}," ActionController Responder respond":{"type":"method","name":"respond","children":[],"call":[" to_format "," send "," respond_to? "," format "]}," ActionController Responder call":{"type":"method","name":"call","children":[],"call":[]}," ActionController Responder initialize":{"type":"method","name":"initialize","children":[],"call":["options []= ","location call "," has_errors? ","options delete ","options [] respond_to? ","options [] ","resources last ","@controller formats first ","@controller formats ","@controller request ","options delete  call "]}," ActionController RespondWith collect_mimes_from_class_level":{"type":"method","name":"collect_mimes_from_class_level","children":[],"call":["config [] include? ","config [] ","config [] include? ! "," class mimes_for_respond_to [] "," class mimes_for_respond_to "," class "," class mimes_for_respond_to keys select "," class mimes_for_respond_to keys "," action_name to_s "," action_name "," action_name to_sym "," class mimes_for_respond_to []  [] include? "," class mimes_for_respond_to []  [] "," class mimes_for_respond_to []  [] include? ! ","  action_name to_s _name to_s ","  action_name to_sym _name to_s ","  action_name to_s _name ","  action_name to_sym _name ","  action_name to_s _name to_sym ","  action_name to_sym _name to_sym "]}," ActionController RespondWith respond_with":{"type":"method","name":"respond_with","children":[],"call":[" raise ","(or\n  (send\n    (lvar :options) :delete\n    (sym :responder))\n  (send\n    (send\n      (self) :class) :responder)) call "," class responder "," class ","options delete ","options []= ","collector response ","options clone ","resources extract_options! ","resources size == ","resources size "," _process_format ","collector negotiate_format "," request ","block call "," block_given? ","ActionController MimeResponds Collector  new "," request variant "," collect_mimes_from_class_level "," class mimes_for_respond_to empty? "," class mimes_for_respond_to ","(or\n  (send\n    (lvar :options clone ) :delete\n    (sym :responder))\n  (send\n    (send\n      (self) :class) :responder)) call ","(or\n  (send\n    (lvar :resources extract_options! ) :delete\n    (sym :responder))\n  (send\n    (send\n      (self) :class) :responder)) call ","options clone  delete ","resources extract_options!  delete ","options clone  []= ","resources extract_options!  []= ","ActionController MimeResponds Collector  new  response ","options clone  clone ","resources extract_options!  clone ","resources extract_options clone ! ","resources extract_resources extract_options! ! "," _process_collector negotiate_format  ","collector negotiate_collector negotiate_format  ","ActionController MimeResponds Collector  new  negotiate_format "," collect_ collect_mimes_from_class_level _from_class_level "," class  collect_mimes_from_class_level _for_respond_to empty? "," class  collect_mimes_from_class_level _for_respond_to "]}," ActionController RespondWith ClassMethods clear_respond_to":{"type":"method","name":"clear_respond_to","children":[],"call":[" mimes_for_respond_to= ","Hash  new freeze ","Hash  new "]}," ActionController RespondWith ClassMethods respond_to":{"type":"method","name":"respond_to","children":[],"call":[" mimes_for_respond_to= ","new freeze ","new [] []= ","new [] ","except_actions empty? ","only_actions empty? ","new []= ","mime to_sym ","mimes each "," mimes_for_respond_to dup "," mimes_for_respond_to "," Array map "," Array ","options delete ","mimes extract_options! ","hash freeze ","hash [] []= ","hash [] ","hash []= "," mime to_sym s_for_respond_to= "," mimes_for_respond_to dup  freeze "," mimes_for_respond_to dup  [] []= "," mimes_for_respond_to dup  [] "," Array map  empty? "," mimes_for_respond_to dup  []= ","mime to_sym  to_sym ","mime to_sym s each "," mime to_sym s_for_respond_to dup "," mime to_sym s_for_respond_to ","mimes extract_options!  delete ","mime to_sym s extract_options! ","mimes extract_mimes extract_options! ! "]}," Responders LocationResponder included":{"type":"method","name":"included","children":[],"call":[]}," Responders Generators InstallGenerator update_application":{"type":"method","name":"update_application","children":[],"call":[" inject_into_class "]}," ActionController Responder has_view_rendering?":{"type":"method","name":"has_view_rendering?","children":[],"call":[" controller class include? "," controller class "," controller "]}," ActionController RespondWith verify_request_format!":{"type":"method","name":"verify_request_format!","children":[],"call":[" raise ","collector negotiate_format "," request ","ActionController MimeResponds Collector  new "," request variant "," collect_mimes_from_class_level ","ActionController MimeResponds Collector  new  negotiate_format "," collect_ collect_mimes_from_class_level _from_class_level "]}," Responders FlashResponder resource_name":{"type":"method","name":"resource_name","children":[],"call":[" resource class name underscore humanize "," resource class name underscore "," resource class name "," resource class "," resource "," resource class model_name human "," resource class model_name "," resource class respond_to? "]}," Responders FlashResponder controller_interpolation_options":{"type":"method","name":"controller_interpolation_options","children":[],"call":[" controller send "," controller ","ActiveSupport Deprecation  warn "," controller class "," controller respond_to? "]}," ActionController RespondWith verify_requested_format!":{"type":"method","name":"verify_requested_format!","children":[],"call":[" raise ","collector negotiate_format "," request ","ActionController MimeResponds Collector  new "," request variant "," collect_mimes_from_class_level ","ActionController MimeResponds Collector  new  negotiate_format "," collect_ collect_mimes_from_class_level _from_class_level "]}," ActionController Responder rendering_options":{"type":"method","name":"rendering_options","children":[],"call":[" default_action "," options [] "," options "]}," ActionController Responder error_rendering_options":{"type":"method","name":"error_rendering_options","children":[],"call":[" error_status "," default_action "," options [] "," options "]}}