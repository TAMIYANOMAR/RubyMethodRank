{" Rackup Server exit_with_pid":{"type":"method","name":"exit_with_pid","children":[],"call":[" exit ","$stderr puts "," options [] "," options "]}," Rackup Server check_pid!":{"type":"method","name":"check_pid!","children":[],"call":[" exit_with_pid "," File  delete "," options [] "," options ","Process  kill "," raise ","pid == "," File  read to_i "," File  read "," File  exist? "," exit_with_ File  read to_i  "," File  read to_i  == "]}," Rackup Server write_pid":{"type":"method","name":"write_pid","children":[],"call":[" check_pid! "," FileUtils  rm_f "," options [] "," options "," at_exit ","f write ","Process  pid "," File  open "," File CREAT  | | "," File CREAT  | "]}," Rackup Server daemonize_app":{"type":"method","name":"daemonize_app","children":[],"call":["Process  daemon "," options [] == "," options [] "," options "]}," Rackup Server wrapped_app":{"type":"method","name":"wrapped_app","children":[],"call":[" build_app "," app "]}," Rackup Server build_app":{"type":"method","name":"build_app","children":[],"call":["klass new ","middleware call ","middleware respond_to? "," middleware [] reverse_each "," middleware [] "," options [] "," options "," middleware ","middleware call  call ","middleware call  respond_to? "," middleware call  [] reverse_each "," middleware call  [] "," middleware call  "]}," Rackup Server opt_parser":{"type":"method","name":"opt_parser","children":[],"call":["Options  new "]}," Rackup Server parse_options":{"type":"method","name":"parse_options","children":[],"call":["ENV  []= "," options [] "," options ","@options []= "," File  expand_path "," opt_parser parse! "," opt_parser ","args clear ","ENV  include? "," opt_parser parse!  []= "]}," Rackup Server build_app_from_string":{"type":"method","name":"build_app_from_string","children":[],"call":["Rack Builder  new_from_string "," options [] "," options "]}," Rackup Server make_profile_name":{"type":"method","name":"make_profile_name","children":[],"call":[" Dir Tmpname  create "]}," Rackup Server handle_profiling":{"type":"method","name":"handle_profiling","children":[],"call":[" exit "," puts ","StackProf  run "," File  open "," make_profile_name "," require ","ObjectSpace  dump_all ","GC  start ","ObjectSpace  trace_object_allocations_start "]}," Rackup Server build_app_and_options_from_config":{"type":"method","name":"build_app_and_options_from_config","children":[],"call":["Rack Builder  parse_file "," options [] "," options "," abort "," File  exist? ! "," File  exist? "]}," Rackup Server server":{"type":"method","name":"server","children":[],"call":["Handler  default ","Handler  get "," options [] "," options "]}," Rackup Server start":{"type":"method","name":"start","children":[],"call":[" server run "," options "," wrapped_app "," server "," exit "," server shutdown "," server respond_to? "," trap "," write_pid "," options [] "," daemonize_app "," handle_profiling "," check_pid! "," pp "," app "," p "," require "," Array each "," Array ","$LOAD_PATH unshift "]}," Rackup Server middleware":{"type":"method","name":"middleware","children":[],"call":[" class middleware "," class "," default_middleware_by_environment "]}," Rackup Server default_middleware_by_environment":{"type":"method","name":"default_middleware_by_environment","children":[],"call":["m []= "," logging_middleware ","h []= ","Hash  new "]}," Rackup Server logging_middleware":{"type":"method","name":"logging_middleware","children":[],"call":["server options [] ","server options ","(str \"CGI\") match? ","server server name ","server server "," lambda "]}," Rackup Server app":{"type":"method","name":"app","children":[],"call":[" build_app_and_options_from_config "," build_app_from_string "," options [] "," options "]}," Rackup Server default_options":{"type":"method","name":"default_options","children":[],"call":["environment == ","ENV  [] "]}," Rackup Server options":{"type":"method","name":"options","children":[],"call":["@ignore_options include? ","merged_options reject "," default_options merge "," default_options "," default_options merge  reject "]}," Rackup Server initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","options [] "]}," Rackup Server Options handler_opts":{"type":"method","name":"handler_opts","children":[],"call":["options [] ","info join ","has_options ! ","info << "," sprintf ","(str \"^(Host|Port)[^a-zA-Z]\") match? ","name to_s ","server valid_options each ","server valid_options ","server name ","server respond_to? ","Rackup Handler  default ","Rackup Handler  get "]}," Rackup Server Options parse!":{"type":"method","name":"parse!","children":[],"call":["options []= ","args last ","args last empty? ! ","args last empty? "," abort ","opt_parser to_s "," warn ","e message ","opt_parser parse! "," exit "," puts ","opts on_tail "," handler_opts ","opts separator ","e to_sym "," raise ","(str \"cpu\") include? ","opts on "," File  expand_path ","options [] ","name to_sym ","value nil? ","name split ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :require))\n  (array)) << ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :include))\n  (array)) concat ","path split "," eval ","opts banner= ","OptionParser  new "]}," Rackup Lobster call":{"type":"method","name":"call","children":[],"call":["res finish ","res write ","Response  new "," raise ","req GET [] == ","req GET [] ","req GET ","(send\n  (send\n    (const nil :LobsterString) :split\n    (str \"\\n\")) :map) join ","line ljust reverse gsub gsub gsub gsub gsub ","line ljust reverse gsub gsub gsub gsub ","line ljust reverse gsub gsub gsub ","line ljust reverse gsub gsub ","line ljust reverse gsub ","line ljust reverse ","line ljust ","LobsterString  split map ","LobsterString  split ","Request  new ","Response  new  finish ","Response  new  write ","Request  new  GET [] == ","Request  new  GET [] ","Request  new  GET "]}," Rackup Handler require_handler":{"type":"method","name":"require_handler","children":[],"call":[]}," Rackup Handler default":{"type":"method","name":"default","children":[],"call":[]}," Rackup Handler pick":{"type":"method","name":"pick","children":[],"call":[]}," Rackup Handler register":{"type":"method","name":"register","children":[],"call":[]}," Rackup Handler get":{"type":"method","name":"get","children":[],"call":[]}," Rackup Handler []":{"type":"method","name":"[]","children":[],"call":[]}," Rackup Handler WEBrick service":{"type":"method","name":"service","children":[],"call":["body close ","body respond_to? ","res body << ","res body ","body each ","res body= "," File  open ","body to_path ","io_lambda call ","res chunked= ","IO  pipe ","res []= "," Array join "," Array ","res cookies concat ","res cookies ","key == ","headers each ","res status= ","status to_i ","@app call ","(send\n  (lvar :env) :[]\n  (const nil :SCRIPT_NAME)) join ","env [] ","env []= ","path [] ","path length - ","path length ","env [] length ","req request_uri path ","req request_uri ","env [] == ","env update ","(str \"yes\") include? ","rack_input set_encoding ","StringIO  new ","req body to_s ","req body ","v nil? ","env delete_if ","req meta_vars ","res rack= ","value join ","Array  === ","key start_with? ","headers delete ","body respond_to? ! ","headers [] ","buffer << ","String  new ","res upgrade! ","(send\n  (lvar :env) :[]\n  (const\n    (const\n      (cbase) :Rack) :SCRIPT_NAME)) join ","Input  new ","(send\n  (lvar :req meta_vars ) :[]\n  (const nil :SCRIPT_NAME)) join ","req meta_vars  [] ","req meta_vars  []= ","req meta_vars  [] length ","req meta_vars  [] == ","req meta_vars  update ","StringIO  new  set_encoding ","rack_Input  new  set_encoding ","req meta_vars  delete_if ","value join  join ","headers delete  join ","headers []  join ","String  new  << ","(send\n  (lvar :req meta_vars ) :[]\n  (const\n    (const\n      (cbase) :Rack) :SCRIPT_NAME)) join "]}," Rackup Handler WEBrick initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rackup Handler WEBrick shutdown":{"type":"method","name":"shutdown","children":[],"call":[]}," Rackup Handler WEBrick valid_options":{"type":"method","name":"valid_options","children":[],"call":[]}," Rackup Handler WEBrick run":{"type":"method","name":"run","children":[],"call":[]}," HTTPResponse setup_header":{"type":"method","name":"setup_header","children":[],"call":[" _rack_setup_header ","@header [] == ","@header [] "," rack "]}," Rackup Handler CGI send_body":{"type":"method","name":"send_body","children":[],"call":[]}," Rackup Handler CGI send_headers":{"type":"method","name":"send_headers","children":[],"call":[]}," Rackup Handler CGI serve":{"type":"method","name":"serve","children":[],"call":[]}," Rackup Handler CGI run":{"type":"method","name":"run","children":[],"call":[]}," Rackup Stream read_next":{"type":"method","name":"read_next","children":[],"call":[" raise ","@input read "]}," Rackup Stream empty?":{"type":"method","name":"empty?","children":[],"call":["@output empty? "]}," Rackup Stream closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Rackup Stream close":{"type":"method","name":"close","children":[],"call":[" close_write "," close_read "]}," Rackup Stream close_write":{"type":"method","name":"close_write","children":[],"call":["@output respond_to? "]}," Rackup Stream close_read":{"type":"method","name":"close_read","children":[],"call":[]}," Rackup Stream flush":{"type":"method","name":"flush","children":[],"call":[]}," Rackup Stream <<":{"type":"method","name":"<<","children":[],"call":[" write "]}," Rackup Stream write_nonblock":{"type":"method","name":"write_nonblock","children":[],"call":[" write "]}," Rackup Stream write":{"type":"method","name":"write","children":[],"call":[" raise ","buffer bytesize ","@output write "]}," Rackup Stream Reader read_nonblock":{"type":"method","name":"read_nonblock","children":[],"call":["buffer replace ","@buffer byteslice ","@buffer bytesize ","@buffer bytesize > "," read_next ","@buffer byteslice  byteslice ","@buffer byteslice  bytesize ","@buffer byteslice  bytesize > "]}," Rackup Stream Reader each":{"type":"method","name":"each","children":[],"call":[" read_partial "]}," Rackup Stream Reader gets":{"type":"method","name":"gets","children":[],"call":[" read_partial "]}," Rackup Stream Reader read_partial":{"type":"method","name":"read_partial","children":[],"call":["buffer slice! ","buffer bytesize ","buffer byteslice ","buffer force_encoding ","buffer bytesize > "," read_next "," read_next  slice! "," read_next  bytesize "," read_next  byteslice "," read_next  force_encoding "," read_next  bytesize > "]}," Rackup Stream Reader read":{"type":"method","name":"read","children":[],"call":["buffer << "," read_next ","buffer empty? ","buffer slice! ","buffer bytesize ","buffer byteslice ","buffer force_encoding ","buffer bytesize < ","buffer clear ","buffer replace ","String  new force_encoding ","String  new ","length == "]}," Rackup Stream initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","output respond_to? "]}," Rackup Handler WEBrick Input read_next":{"type":"method","name":"read_next","children":[],"call":[]}," Rackup Handler WEBrick Input close":{"type":"method","name":"close","children":[],"call":[]}," Rackup Handler WEBrick Input initialize":{"type":"method","name":"initialize","children":[],"call":["Fiber  yield ","@request body ","Fiber  new "]}}