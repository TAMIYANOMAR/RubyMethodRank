{" Raabro rep":{"type":"method","name":"rep","children":[],"call":[]}," Raabro alt":{"type":"method","name":"alt","children":[],"call":[]}," Raabro seq":{"type":"method","name":"seq","children":[],"call":[]}," Raabro parse":{"type":"method","name":"parse","children":[],"call":[]}," Raabro narrow":{"type":"method","name":"narrow","children":[],"call":[]}," Raabro rex":{"type":"method","name":"rex","children":[],"call":[]}," Raabro str":{"type":"method","name":"str","children":[],"call":[]}," Raabro match":{"type":"method","name":"match","children":[],"call":[]}," Raabro Tree to_a":{"type":"method","name":"to_a","children":[],"call":["e to_a ","@children collect ","@input string [] ","@input string ","@children empty? ","@result == ","opts [] "," string ","h []= "," Array inject "," Array ","opts is_a? ","@children length ","opts [] != "]}," Raabro Tree initialize":{"type":"method","name":"initialize","children":[],"call":["input offset "]}," Raabro Input match":{"type":"method","name":"match","children":[],"call":["@string [] == ","@string [] ","s length ","str_or_regex to_s ","m [] length ","m [] ","@string [] match ","str_or_regex is_a? ","m offset first == ","m offset first ","m offset ","@str_or_regex to_s tring [] == ","@str_or_regex to_s tring [] ","s s length ength ","str_or_regex to_s  length ","str_or_regex to_s tr_or_regex to_str_or_regex to_s  ","m [] s length ength ","@string [] match  [] length ","@string [] match  [] ","@str_or_regex to_s tring [] match ","@string [] @string [] match atch ","str_or_regex to_s tr_or_regex istr_or_regex to_s _a? ","m offstr_or_regex to_s et firstr_or_regex to_s t == ","@string [] match  offset first == ","m offstr_or_regex to_s et firstr_or_regex to_s t ","@string [] match  offset first ","m offstr_or_regex to_s et ","@string [] match  offset "]}," Raabro Input initialize":{"type":"method","name":"initialize","children":[],"call":["offset is_a? "]}," Raabro included":{"type":"method","name":"included","children":[],"call":[]}," Raabro ModuleMethods eseq":{"type":"method","name":"eseq","children":[],"call":["r prune! ","input options [] ","input options ","input offset= ","r length= ","input offset - ","input offset ","r result == ","r result ","r result= ","c result != ","c result ","r children << ","r children "," _parse ","count < ","i == ","(send\n  (lvar :i) :+\n  (int 1)) % ","i + "," loop "," Raabro Tree  new ","endpa nil? ","seppa nil? ","et result != ","et result ","et == ","et empty? ","st empty? ","et result == ","st result == ","st result ","st == ","i > ","lsep offset ","lsep result= ","r children [] ","count > ","cr result != ","cr result ","r children push ","cr result= ","empty_stack > ","empty_stack + ","cr empty? ","on_elt ! "," Raabro Tree  new  p Raabro Tree  new une! ","(send\n  (lvar :i) :+\n  (int 1)) % nput opt(send\n  (lvar :i) :+\n  (int 1)) % ons [] ","i + nput opti + ons [] ","(send\n  (lvar :i) :+\n  (int 1)) % nput opt(send\n  (lvar :i) :+\n  (int 1)) % ons ","i + nput opti + ons ","(send\n  (lvar :i) :+\n  (int 1)) % nput offset= ","i + nput offset= ","input offs _parse = "," Raabro Tree  new  length= ","(send\n  (lvar :i) :+\n  (int 1)) % nput offset - ","i + nput offset - ","input offs _parse  - ","(send\n  (lvar :i) :+\n  (int 1)) % nput offset ","i + nput offset ","input offs _parse  "," Raabro Tree  new   Raabro Tree  new esult == "," Raabro Tree  new   Raabro Tree  new esult "," Raabro Tree  new   Raabro Tree  new esult= "," _parse  result != ","c  Raabro Tree  new esult != "," _parse  result ","c  Raabro Tree  new esult ","r  _parse hildren << ","r ch(send\n  (lvar :i) :+\n  (int 1)) % ldren << ","r chi + ldren << "," Raabro Tree  new  child Raabro Tree  new en << ","r  _parse hildren ","r ch(send\n  (lvar :i) :+\n  (int 1)) % ldren ","r chi + ldren "," Raabro Tree  new  child Raabro Tree  new en "," _pa Raabro Tree  new se "," _parse ount < ","(send\n  (lvar :i) :+\n  (int 1)) %  == ","i +  == ","(send\n  (lvar :(send\n  (lvar :i) :+\n  (int 1)) % ) :+\n  ((send\n  (lvar :i) :+\n  (int 1)) % nt 1)) % ","(send\n  (lvar :i + ) :+\n  (i + nt 1)) % ","(send\n  (lva Raabro Tree  new  :i) :+\n  (int 1)) % ","(send\n  (lvar :i) :+\n  (int 1)) %  + ","i +  + "," Raab Raabro Tree  new o T Raabro Tree  new ee  new ","endpa n(send\n  (lvar :i) :+\n  (int 1)) % l? ","endpa ni + l? ","seppa n(send\n  (lvar :i) :+\n  (int 1)) % l? ","seppa ni + l? ","et  Raabro Tree  new esult != ","et  Raabro Tree  new esult "," _parse  == "," _parse  empty? ","et  Raabro Tree  new esult == "," _parse  result == ","st  Raabro Tree  new esult == ","st  Raabro Tree  new esult ","(send\n  (lvar :i) :+\n  (int 1)) %  > ","i +  > ","lsep offs _parse  ","r children []  offset ","lsep  Raabro Tree  new esult= ","r children []  result= ","r  _parse hildren [] ","r ch(send\n  (lvar :i) :+\n  (int 1)) % ldren [] ","r chi + ldren [] "," Raabro Tree  new  child Raabro Tree  new en [] "," _parse ount > "," _parse r result != ","c Raabro Tree  new   Raabro Tree  new esult != "," _parse r result ","c Raabro Tree  new   Raabro Tree  new esult ","r  _parse hildren push ","r ch(send\n  (lvar :i) :+\n  (int 1)) % ldren push ","r chi + ldren push "," Raabro Tree  new  child Raabro Tree  new en push "," _parse r result= ","c Raabro Tree  new   Raabro Tree  new esult= "," _parse  result= ","empty_sta _parse k > ","empty_ _parse ack > ","empty_stack +  > ","empty_sta _parse k + ","empty_ _parse ack + ","empty_stack +  + "," _parse r empty? ","c Raabro Tree  new  empty? ","on_elt !  ! "]}," Raabro ModuleMethods all":{"type":"method","name":"all","children":[],"call":["r length= ","c length ","r result= ","input offset= ","c length < ","r children << ","r children "," _parse "," Raabro Tree  new ","input string length - ","input offset ","input string length ","input string "," Raabro Tree  new  length= ","r input string length - = "," _parse  length ","c input string length -  "," Raabro Tree  new   Raabro Tree  new esult= "," _parse  length < ","c input string length -  < ","r  _parse hildren << "," Raabro Tree  new  child Raabro Tree  new en << ","r  _parse hildren "," Raabro Tree  new  child Raabro Tree  new en "," _pa Raabro Tree  new se "," Raab Raabro Tree  new o T Raabro Tree  new ee  new ","input st Raabro Tree  new ing length - ","input string input string length -  - ","input st Raabro Tree  new ing length ","input string input string length -  ","input st Raabro Tree  new ing "]}," Raabro ModuleMethods ren":{"type":"method","name":"ren","children":[],"call":["r name= "," _parse "," _parse  name= "," _pa _parse se "]}," Raabro ModuleMethods rep":{"type":"method","name":"rep","children":[],"call":["r prune! ","input options [] ","input options ","input offset= ","r length= ","input offset - ","input offset ","r result= ","count <= ","max == ","count >= ","count == ","c result != ","c result ","r children << ","r children "," _parse "," loop "," Raabro Tree  new ","max < ","max nil? ","min < ","min == ","c length < ","c length "," Raabro Tree  new  p Raabro Tree  new une! "," Raabro Tree  new  length= "," Raabro Tree  new   Raabro Tree  new esult= "," _parse ount <= "," _parse ount >= "," _parse ount == "," _parse  result != ","c  Raabro Tree  new esult != "," _parse  result ","c  Raabro Tree  new esult ","r  _parse hildren << "," Raabro Tree  new  child Raabro Tree  new en << ","r  _parse hildren "," Raabro Tree  new  child Raabro Tree  new en "," _pa Raabro Tree  new se "," Raab Raabro Tree  new o T Raabro Tree  new ee  new "," _parse  length < "," _parse  length "]}," Raabro ModuleMethods altg":{"type":"method","name":"altg","children":[],"call":[" alt "]}," Raabro ModuleMethods alt":{"type":"method","name":"alt","children":[],"call":["r prune! ","input options [] ","input options ","input offset= ","start + ","r length ","r length= ","c length ","r result= ","c result == ","c result ","c result= ","cc length > ","cc length ","cc result == ","cc result ","r children << ","r children "," _parse ","parsers each ","input offset "," Raabro Tree  new ","parsers pop ","parsers last == ","parsers last ","cc result= ","cc length >= "," Raabro Tree  new  p Raabro Tree  new une! ","input offset  + ","sta Raabro Tree  new t + "," Raabro Tree  new  length "," Raabro Tree  new  length= "," Raabro Tree  new   Raabro Tree  new esult= ","c  Raabro Tree  new esult == ","c  Raabro Tree  new esult ","c  Raabro Tree  new esult= "," _parse  length > "," _parse  length "," _parse  result == ","cc  Raabro Tree  new esult == "," _parse  result ","cc  Raabro Tree  new esult "," Raabro Tree  new  child Raabro Tree  new en << "," Raabro Tree  new  child Raabro Tree  new en "," _pa Raabro Tree  new se ","pa Raabro Tree  new se Raabro Tree  new s each "," Raab Raabro Tree  new o T Raabro Tree  new ee  new ","pa Raabro Tree  new se Raabro Tree  new s pop ","pa Raabro Tree  new se Raabro Tree  new s last == ","pa Raabro Tree  new se Raabro Tree  new s last "," _parse  result= ","cc  Raabro Tree  new esult= "," _parse  length >= "]}," Raabro ModuleMethods seq":{"type":"method","name":"seq","children":[],"call":["input offset= ","r length= ","input offset - ","input offset ","r result= ","c result == ","c result ","c result != ","r children << ","r children "," _parse ","r children concat ","c children "," rep ","parsers shift "," _quantify ","parsers first "," loop "," Raabro Tree  new "," nott ","parsers first == "," Raabro Tree  new  length= "," Raabro Tree  new   Raabro Tree  new esult= "," _parse  result == "," rep  result == "," nott  result == ","c  Raabro Tree  new esult == "," _parse  result "," rep  result "," nott  result ","c  Raabro Tree  new esult "," _parse  result != "," rep  result != "," nott  result != ","c  Raabro Tree  new esult != ","r  _parse hildren << ","r  rep hildren << ","r  nott hildren << "," Raabro Tree  new  child Raabro Tree  new en << ","r  _parse hildren ","r  rep hildren ","r  nott hildren "," Raabro Tree  new  child Raabro Tree  new en "," _parsers shift rse "," _pa Raabro Tree  new se ","r  _parse hildren  _parse on _parse at ","r  rep hildren  rep on rep at ","r  nott hildren  nott on nott at "," Raabro Tree  new  child Raabro Tree  new en concat "," _parse   _parse hildren "," rep   rep hildren "," nott   nott hildren ","c child Raabro Tree  new en ","  Raabro Tree  new ep ","parsers shift rsers shift ","pa Raabro Tree  new se Raabro Tree  new s shift "," _ _quantify uantify ","parsers shift rsers first ","pa Raabro Tree  new se Raabro Tree  new s fi Raabro Tree  new st "," Raab Raabro Tree  new o T Raabro Tree  new ee  new ","parsers shift rsers first == ","pa Raabro Tree  new se Raabro Tree  new s fi Raabro Tree  new st == "]}," Raabro ModuleMethods _parse":{"type":"method","name":"_parse","children":[],"call":[" _narrow call "," _narrow "]}," Raabro ModuleMethods _narrow":{"type":"method","name":"_narrow","children":[],"call":["Kernel  const_get method ","Kernel  const_get ","parser to_s split ","parser to_s "," method ","parser is_a? "," raise ","ArgumentError  new "," _quantify ","parser to_sym "," fail "]}," Raabro ModuleMethods _quantify":{"type":"method","name":"_quantify","children":[],"call":[" respond_to? ","parser is_a? "]}," Raabro ModuleMethods rex":{"type":"method","name":"rex","children":[],"call":[" _match ","Regexp  new "]}," Raabro ModuleMethods str":{"type":"method","name":"str","children":[],"call":[" _match "]}," Raabro ModuleMethods _match":{"type":"method","name":"_match","children":[],"call":["input offset ","r length= ","r result= ","input match ","Raabro Tree  new ","r input match ength= ","Raabro Tree  new  length= ","r resuinput match t= ","Raabro Tree  new  Raabro Tree  new esult= ","RaabRaabro Tree  new o TRaabro Tree  new ee  new "]}," Raabro Tree to_s":{"type":"method","name":"to_s","children":[],"call":["io string ","depth == ","c to_s ","depth + ","@children each ","io print ","  + "," string inspect "," string "," children size == "," children size "," children "," result == "," result ","@name inspect ","   * ","depth > "]}," Raabro Tree gather":{"type":"method","name":"gather","children":[],"call":["c gather ","@children each ","acc << ","@name to_s == ","@name to_s ","name to_s "," subgather ","name == ","@name to_s  to_s == ","@name to_s  to_s ","name to_s  to_s ","name to_s  == "]}," Raabro Tree lookup":{"type":"method","name":"lookup","children":[],"call":["c lookup ","@children each ","@name to_s == ","@name to_s ","name to_s "," sublookup ","name == ","@childrec lookup  each ","@c lookup ame to_s == ","@name to_s  to_s == ","@c lookup ame to_s ","@name to_s  to_s ","c lookup ame to_s ","name to_s  to_s ","c lookup ame == ","name to_s  == "]}," Raabro Tree string":{"type":"method","name":"string","children":[],"call":["@input string [] ","@input string "]}," Raabro Tree shrink!":{"type":"method","name":"shrink!","children":[],"call":["a << ","c shrink! ","c name ","c result == ","c result ","@children inject "]}," Raabro Tree prune!":{"type":"method","name":"prune!","children":[],"call":[" successful_children "]}," Raabro Tree successful_children":{"type":"method","name":"successful_children","children":[],"call":["c result == ","c result ","@children select "]}," Raabro ModuleMethods method_added":{"type":"method","name":"method_added","children":[],"call":["name to_sym ","m parameters [] [] == ","m parameters [] [] ","m parameters [] ","m parameters ","m arity == ","m arity "," method ","na method e to_sy method  "," method  para method eters [] [] == "," method  para method eters [] [] "," method  para method eters [] "," method  para method eters "," method  arity == "," method  arity ","  method ethod "]}," Raabro ModuleMethods parse":{"type":"method","name":"parse","children":[],"call":[" rewrite "," respond_to? ","t shrink! ","opts [] == ","opts [] ","t children first ","t children ","t parter == ","t parter ","t result != ","t result "," all ","Raabro Input  new "," _parse ","opts [] != ","opts []= ","opts has_key? "," rewrite == ","d > ","opts [] to_i "," reparse_for_error "," rewrit shrink! e "," rewrit children first e "," rewri all e "," rewri _parse e "," respond_t shrink! o? "," respond_t children first o? "," respond_ all o? "," respond_ _parse o? "," responopts [] to_i _to? ","t shrink!  shrink! ","t children first  shrink! "," all  shrink! "," _parse  shrink! ","opt shrink! s [] == ","opt children first s [] == ","op all s [] == ","op _parse s [] == ","opt shrink! s [] ","opt children first s [] ","op all s [] ","op _parse s [] ","t shrink!  children first shrink!  ","t children first  children first children first  "," all  children firs all  "," _parse  children firs _parse  ","t chilopts [] to_i ren first ","t shrink!  children ","t children first  children "," all  children "," _parse  children ","t chilopts [] to_i ren ","t shrink!  part shrink! er == ","t children first  part children first er == "," all  par all er == "," _parse  par _parse er == ","t shrink!  part shrink! er ","t children first  part children first er "," all  par all er "," _parse  par _parse er ","t shrink!  result shrink!  != ","t children first  result children first  != "," all  resul all  != "," _parse  resul _parse  != ","t shrink!  result shrink!  ","t children first  result children first  "," all  resul all  "," _parse  resul _parse  ","Raabro Input shrink!   new ","Raabro Input children first   new ","Raabro Inpu all   new ","Raabro Inpu _parse   new ","opt shrink! s [] != ","opt children first s [] != ","op all s [] != ","op _parse s [] != ","opt shrink! s []= ","opt children first s []= ","op all s []= ","op _parse s []= ","opt shrink! s has_key? ","opt children first s has_key? ","op all s has_key? ","op _parse s has_key? "," rewrit shrink! e == "," rewrit children first e == "," rewri all e == "," rewri _parse e == ","opts [] to_i  > ","opt shrink! s [] t shrink! o_i ","opt children first s [] t children first o_i ","op all s []  all o_i ","op _parse s []  _parse o_i "]}," Raabro ModuleMethods rewrite":{"type":"method","name":"rewrite","children":[],"call":[" send ","tree name ","(send\n  (send nil :methods) :find) ! ! ","(send\n  (send nil :methods) :find) ! ","m to_s match ","m to_s "," methods find "," methods ","tree == ","m to_s match? ","m to_s start_with? "]}," Raabro ModuleMethods make_includable":{"type":"method","name":"make_includable","children":[{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":[" extend ","target instance_eval "]}," Raabro ModuleMethods rewrite_":{"type":"method","name":"rewrite_","children":[],"call":[" rewrite ","tree lookup "," rewritree lookup e ","tree lookup ree lookup "]}," Raabro Tree even_children":{"type":"method","name":"even_children","children":[],"call":["cs << ","i even? ","@children each_with_index "]}," Raabro Tree odd_children":{"type":"method","name":"odd_children","children":[],"call":["cs << ","i odd? ","@children each_with_index "]}," Raabro Tree subgather":{"type":"method","name":"subgather","children":[],"call":["c gather ","@children each "]}," Raabro Tree sublookup":{"type":"method","name":"sublookup","children":[],"call":["c lookup ","@children each ","@childrec lookup  each "]}," Raabro Tree empty?":{"type":"method","name":"empty?","children":[],"call":["@length == ","@result == "]}," Raabro Tree c4":{"type":"method","name":"c4","children":[],"call":["@children [] "]}," Raabro Tree c3":{"type":"method","name":"c3","children":[],"call":["@children [] "]}," Raabro Tree c2":{"type":"method","name":"c2","children":[],"call":["@children [] "]}," Raabro Tree c1":{"type":"method","name":"c1","children":[],"call":["@children [] "]}," Raabro Tree c0":{"type":"method","name":"c0","children":[],"call":["@children [] "]}," Raabro Input tring":{"type":"method","name":"tring","children":[],"call":["@string [] ","l < "]}," Raabro Tree clast":{"type":"method","name":"clast","children":[],"call":["@children last "]}," Raabro pp":{"type":"method","name":"pp","children":[],"call":[]}," Raabro Tree nonstring":{"type":"method","name":"nonstring","children":[],"call":["@input string [] ","@input string "]}," Raabro ModuleMethods reparse_for_error":{"type":"method","name":"reparse_for_error","children":[],"call":["t extract_error "," parse ","opts merge ","opts [] == ","opts [] "," parse  ex parse rac parse _error ","op parse s merge ","op parse s [] == ","op parse s [] "]}," Raabro Tree visual":{"type":"method","name":"visual","children":[],"call":["@input string split [] + + + ","@input string split [] + + ","  * ","column - ","@input string split [] + ","@input string split [] ","line - ","@input string split ","@input string "]}," Raabro Tree line_and_column":{"type":"method","name":"line_and_column","children":[],"call":["@input at == ","@input at ","(irange\n  (int 0)\n  (lvar :offset)) each "]}," Raabro Tree lookup_all_error":{"type":"method","name":"lookup_all_error","children":[],"call":["c lookup_all_error ","@children reverse each ","@children reverse ","c result == ","c result ","@children each ","c rc lookup_all_error ult == ","c rc lookup_all_error ult "]}," Raabro Tree lookup_error":{"type":"method","name":"lookup_error","children":[],"call":["c lookup_error ","stack dup push "," name ","stack dup ","@children each ","@children empty? ","@result != ","@rc lookup_error ult != "]}," Raabro Tree extract_error":{"type":"method","name":"extract_error","children":[],"call":["err_tree offset "," visual ","stack compact reverse take reverse collect join ","stack compact reverse take reverse collect ","stack compact reverse take reverse ","stack compact reverse take ","stack compact reverse ","stack compact "," line_and_column "," lookup_all_error "," lookup_error ","  visual  "]}," Raabro Input at":{"type":"method","name":"at","children":[],"call":["@string [] "]}," Raabro ModuleMethods nott":{"type":"method","name":"nott","children":[],"call":["input offset= ","r result= ","c result == ","c result ","r length= ","r children << ","r children "," _parse "," Raabro Tree  new ","input offset "," Raabro Tree  new   Raabro Tree  new esult= "," _parse  result == ","c  Raabro Tree  new esult == "," _parse  result ","c  Raabro Tree  new esult "," Raabro Tree  new  length= ","r  _parse hildren << "," Raabro Tree  new  child Raabro Tree  new en << ","r  _parse hildren "," Raabro Tree  new  child Raabro Tree  new en "," _pa Raabro Tree  new se "," Raab Raabro Tree  new o T Raabro Tree  new ee  new "]}," Raabro Tree strinp":{"type":"method","name":"strinp","children":[],"call":["@input string [] strip ","@input string [] ","@input string "," string strip "," string "]}," Raabro Tree symbold":{"type":"method","name":"symbold","children":[],"call":[" symbol downcase "," symbol "]}," Raabro Tree symbol":{"type":"method","name":"symbol","children":[],"call":[" strinp to_sym "," strinp "]}," Raabro Tree stringpd":{"type":"method","name":"stringpd","children":[],"call":[" strinp downcase "," strinp "]}," Raabro Tree stringd":{"type":"method","name":"stringd","children":[],"call":[" string downcase "," string "]}}