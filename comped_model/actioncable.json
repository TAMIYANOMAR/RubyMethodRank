{" Rails Generators ChannelGenerator generate_application_cable_files":{"type":"method","name":"generate_application_cable_files","children":[],"call":[" template ","File  exist? ! ","File  exist? ","File  join ","files each "," behavior != "," behavior "]}," Rails Generators ChannelGenerator file_name":{"type":"method","name":"file_name","children":[],"call":[" gsub "," sub "]}," Rails Generators ChannelGenerator create_channel_file":{"type":"method","name":"create_channel_file","children":[],"call":[" generate_application_cable_files "," js_template ","File  join "," file_name "," class_path "," template "," behavior == "," behavior "," options [] "," options "]}," ActionCable server":{"type":"method","name":"server","children":[],"call":["ActionCable Server Base  new "]}," ActionCable version":{"type":"method","name":"version","children":[],"call":[]}," ActionCable SubscriptionAdapter SubscriberMap invoke_callback":{"type":"method","name":"invoke_callback","children":[],"call":["callback call "]}," ActionCable SubscriptionAdapter SubscriberMap remove_channel":{"type":"method","name":"remove_channel","children":[],"call":[]}," ActionCable SubscriptionAdapter SubscriberMap add_channel":{"type":"method","name":"add_channel","children":[],"call":["on_success call "]}," ActionCable SubscriptionAdapter SubscriberMap broadcast":{"type":"method","name":"broadcast","children":[],"call":[" invoke_callback ","list each ","@subscribers [] dup ","@subscribers [] ","@sync synchronize ","@subscribers key? ! ","@subscribers key? "]}," ActionCable SubscriptionAdapter SubscriberMap remove_subscriber":{"type":"method","name":"remove_subscriber","children":[],"call":[" remove_channel ","@subscribers delete ","@subscribers [] empty? ","@subscribers [] ","@subscribers [] delete ","@sync synchronize "]}," ActionCable SubscriptionAdapter SubscriberMap add_subscriber":{"type":"method","name":"add_subscriber","children":[],"call":["on_success call "," add_channel ","@subscribers [] << ","@subscribers [] ","@subscribers key? ! ","@subscribers key? ","@sync synchronize "]}," ActionCable SubscriptionAdapter SubscriberMap initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","h []= ","Hash  new "]}," ActionCable SubscriptionAdapter Redis Listener send_command":{"type":"method","name":"send_command","children":[],"call":["very_raw_connection flush ","very_raw_connection respond_to? ","@raw_client connection instance_variable_get ","@raw_client connection ","@raw_client connection instance_variable_defined? ","@raw_client write "]}," ActionCable SubscriptionAdapter Redis Listener when_connected":{"type":"method","name":"when_connected","children":[],"call":["@when_connected << ","block call "]}," ActionCable SubscriptionAdapter Redis Listener ensure_listener_running":{"type":"method","name":"ensure_listener_running","children":[],"call":[" listen ","@adapter redis_connection_for_subscriptions ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "," resubscribe "," when_connected "," retry_connecting? "," reset ","@adapter redis_@adapter redis_connection_for_subscriptions ection_for_subscriptions "," when_@adapter redis_connection_for_subscriptions ected "," retry_@adapter redis_connection_for_subscriptions ecting? "]}," ActionCable SubscriptionAdapter Redis Listener invoke_callback":{"type":"method","name":"invoke_callback","children":[],"call":["@event_loop post ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable SubscriptionAdapter Redis Listener remove_channel":{"type":"method","name":"remove_channel","children":[],"call":[" send_command "," when_connected ","@subscription_lock synchronize ","@subscribed_client unsubscribe "]}," ActionCable SubscriptionAdapter Redis Listener add_channel":{"type":"method","name":"add_channel","children":[],"call":[" send_command "," when_connected ","@subscribe_callbacks [] << ","@subscribe_callbacks [] "," ensure_listener_running ","@subscription_lock synchronize ","@subscribed_client subscribe "]}," ActionCable SubscriptionAdapter Redis Listener shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  pass ","@thread alive? "," send_command "," when_connected ","@thread nil? ","@subscription_lock synchronize ","@subscribed_client unsubscribe "]}," ActionCable SubscriptionAdapter Redis Listener listen":{"type":"method","name":"listen","children":[],"call":["@subscription_lock synchronize ","count == ","on unsubscribe "," broadcast ","on message ","@subscribe_callbacks delete ","callbacks empty? ","@event_loop post ","callbacks shift ","@subscribe_callbacks [] ","@when_connected shift call ","@when_connected shift ","@when_connected empty? ","on subscribe ","conn subscribe ","conn client ","conn without_reconnect ","Concurrent  global_io_executor << ","Concurrent  global_io_executor ","conn _client ","conn respond_to? "," extract_subscribed_client ","@subscribe_@subscribe_callbacks []  delete ","@subscribe_callbacks []  empty? ","@subscribe_callbacks []  shift ","@subscribe_@subscribe_callbacks []  [] "]}," ActionCable SubscriptionAdapter Redis Listener initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","h []= ","Hash  new ","Array  new ","@reconnect_attempts is_a? ","config_options fetch ","Array  new  is_a? ","config_options fetch  is_a? "]}," ActionCable SubscriptionAdapter Redis redis_connection":{"type":"method","name":"redis_connection","children":[],"call":[" class redis_connector call ","@server config cable ","@server config "," class redis_connector "," class ","@server config cable merge "," identifier ","@server config cable symbolize_keys merge ","@server config cable symbolize_keys "," config_options "]}," ActionCable SubscriptionAdapter Redis redis_connection_for_broadcasts":{"type":"method","name":"redis_connection_for_broadcasts","children":[],"call":[" redis_connection ","@server mutex synchronize ","@server mutex "," Redis  new ","@server config cable ","@server config "," class redis_connector call "," class redis_connector "," class "]}," ActionCable SubscriptionAdapter Redis listener":{"type":"method","name":"listener","children":[],"call":["Listener  new ","@server event_loop ","@server mutex synchronize ","@server mutex "," config_options "]}," ActionCable SubscriptionAdapter Redis redis_connection_for_subscriptions":{"type":"method","name":"redis_connection_for_subscriptions","children":[],"call":[" redis_connection "," Redis  new ","@server config cable ","@server config "]}," ActionCable SubscriptionAdapter Redis shutdown":{"type":"method","name":"shutdown","children":[],"call":["@listener shutdown "]}," ActionCable SubscriptionAdapter Redis unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" listener remove_subscriber "," listener "]}," ActionCable SubscriptionAdapter Redis subscribe":{"type":"method","name":"subscribe","children":[],"call":[" listener add_subscriber "," listener "]}," ActionCable SubscriptionAdapter Redis broadcast":{"type":"method","name":"broadcast","children":[],"call":[" redis_connection_for_broadcasts publish "," redis_connection_for_broadcasts "]}," ActionCable SubscriptionAdapter Redis initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable SubscriptionAdapter PostgreSQL Listener invoke_callback":{"type":"method","name":"invoke_callback","children":[],"call":["@event_loop post ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable SubscriptionAdapter PostgreSQL Listener remove_channel":{"type":"method","name":"remove_channel","children":[],"call":["@queue push "]}," ActionCable SubscriptionAdapter PostgreSQL Listener add_channel":{"type":"method","name":"add_channel","children":[],"call":["@queue push "]}," ActionCable SubscriptionAdapter PostgreSQL Listener shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  pass ","@thread alive? ","@queue push "]}," ActionCable SubscriptionAdapter PostgreSQL Listener listen":{"type":"method","name":"listen","children":[],"call":[" broadcast ","pg_conn wait_for_notify "," throw ","pg_conn exec ","pg_conn escape_identifier ","@event_loop post ","@queue pop ","@queue empty? "," loop "," catch ","@adapter with_connection ","Concurrent  global_io_executor << ","Concurrent  global_io_executor ","@adapter with_subscriptions_connection "]}," ActionCable SubscriptionAdapter PostgreSQL Listener initialize":{"type":"method","name":"initialize","children":[],"call":[" listen ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","Queue  new "]}," ActionCable SubscriptionAdapter PostgreSQL listener":{"type":"method","name":"listener","children":[],"call":["Listener  new ","@server event_loop ","@server mutex synchronize ","@server mutex "]}," ActionCable SubscriptionAdapter PostgreSQL with_connection":{"type":"method","name":"with_connection","children":[],"call":[" raise ","pg_conn is_a? ","ar_conn raw_connection ","ActiveRecord Base  connection_pool with_connection ","ActiveRecord Base  connection_pool ","ar_conn raw_connection  is_a? "]}," ActionCable SubscriptionAdapter PostgreSQL shutdown":{"type":"method","name":"shutdown","children":[],"call":[" listener shutdown "," listener "]}," ActionCable SubscriptionAdapter PostgreSQL unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" listener remove_subscriber "," listener "," channel_identifier "]}," ActionCable SubscriptionAdapter PostgreSQL subscribe":{"type":"method","name":"subscribe","children":[],"call":[" listener add_subscriber "," listener "," channel_identifier "]}," ActionCable SubscriptionAdapter PostgreSQL broadcast":{"type":"method","name":"broadcast","children":[],"call":["pg_conn exec ","pg_conn escape_string ","pg_conn escape_identifier "," with_connection "," channel_identifier "," with_broadcast_connection "]}," ActionCable SubscriptionAdapter PostgreSQL initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable SubscriptionAdapter Inline new_subscriber_map":{"type":"method","name":"new_subscriber_map","children":[],"call":["SubscriberMap  new "]}," ActionCable SubscriptionAdapter Inline subscriber_map":{"type":"method","name":"subscriber_map","children":[],"call":[" new_subscriber_map ","@server mutex synchronize ","@server mutex "]}," ActionCable SubscriptionAdapter Inline shutdown":{"type":"method","name":"shutdown","children":[],"call":[]}," ActionCable SubscriptionAdapter Inline unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" subscriber_map remove_subscriber "," subscriber_map "]}," ActionCable SubscriptionAdapter Inline subscribe":{"type":"method","name":"subscribe","children":[],"call":[" subscriber_map add_subscriber "," subscriber_map "]}," ActionCable SubscriptionAdapter Inline broadcast":{"type":"method","name":"broadcast","children":[],"call":[" subscriber_map broadcast "," subscriber_map "]}," ActionCable SubscriptionAdapter Inline initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable SubscriptionAdapter EventedRedis ensure_reactor_running":{"type":"method","name":"ensure_reactor_running","children":[],"call":["Thread  pass ","EventMachine  reactor_running? ","EventMachine  run ","Thread  new ","@@mutex synchronize ","EventMachine  reactor_thread "]}," ActionCable SubscriptionAdapter EventedRedis redis_connection_for_broadcasts":{"type":"method","name":"redis_connection_for_broadcasts","children":[],"call":[" class redis_connector call ","@server config cable ","@server config "," class redis_connector "," class ","@server mutex synchronize ","@server mutex "," Redis  new "]}," ActionCable SubscriptionAdapter EventedRedis redis_connection_for_subscriptions":{"type":"method","name":"redis_connection_for_subscriptions","children":[],"call":["@logger error ","redis on "," class em_redis_connector call tap "," class em_redis_connector call ","@server config cable ","@server config "," class em_redis_connector "," class ","@server mutex synchronize ","@server mutex "," ensure_reactor_running ","@logger info ","EM Hiredis  connect tap ","EM Hiredis  connect ","@server config cable [] "]}," ActionCable SubscriptionAdapter EventedRedis shutdown":{"type":"method","name":"shutdown","children":[],"call":[" redis_connection_for_subscriptions pubsub close_connection "," redis_connection_for_subscriptions pubsub "," redis_connection_for_subscriptions "]}," ActionCable SubscriptionAdapter EventedRedis unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" redis_connection_for_subscriptions pubsub unsubscribe_proc "," redis_connection_for_subscriptions pubsub "," redis_connection_for_subscriptions "]}," ActionCable SubscriptionAdapter EventedRedis subscribe":{"type":"method","name":"subscribe","children":[],"call":["success_callback call ","result callback "," redis_connection_for_subscriptions pubsub subscribe tap "," redis_connection_for_subscriptions pubsub subscribe "," redis_connection_for_subscriptions pubsub "," redis_connection_for_subscriptions "]}," ActionCable SubscriptionAdapter EventedRedis broadcast":{"type":"method","name":"broadcast","children":[],"call":[" redis_connection_for_broadcasts publish "," redis_connection_for_broadcasts "]}," ActionCable SubscriptionAdapter EventedRedis initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"          The \\\"evented_redis\\\" subscription adapter is deprecated and\\n\") squish "]}," ActionCable SubscriptionAdapter Base shutdown":{"type":"method","name":"shutdown","children":[],"call":[" raise "]}," ActionCable SubscriptionAdapter Base unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" raise "]}," ActionCable SubscriptionAdapter Base subscribe":{"type":"method","name":"subscribe","children":[],"call":[" raise "]}," ActionCable SubscriptionAdapter Base broadcast":{"type":"method","name":"broadcast","children":[],"call":[" raise "]}," ActionCable SubscriptionAdapter Base initialize":{"type":"method","name":"initialize","children":[],"call":["@server logger "]}," ActionCable SubscriptionAdapter Async AsyncSubscriberMap invoke_callback":{"type":"method","name":"invoke_callback","children":[],"call":["@event_loop post ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable SubscriptionAdapter Async AsyncSubscriberMap add_subscriber":{"type":"method","name":"add_subscriber","children":[],"call":["@event_loop post ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable SubscriptionAdapter Async AsyncSubscriberMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable SubscriptionAdapter Async new_subscriber_map":{"type":"method","name":"new_subscriber_map","children":[],"call":["AsyncSubscriberMap  new "," server event_loop "," server "]}," ActionCable Server Worker logger":{"type":"method","name":"logger","children":[],"call":["ActionCable  server logger ","ActionCable  server "]}," ActionCable Server Worker invoke":{"type":"method","name":"invoke","children":[],"call":["receiver handle_exception ","receiver respond_to? "," logger error ","e backtrace join ","e backtrace "," logger ","e message ","e class ","receiver send "," work "," run_callbacks "," connection= "]}," ActionCable Server Worker async_invoke":{"type":"method","name":"async_invoke","children":[],"call":[" invoke ","@executor post ","@pool post "]}," ActionCable Server Worker async_exec":{"type":"method","name":"async_exec","children":[],"call":[" async_invoke "]}," ActionCable Server Worker work":{"type":"method","name":"work","children":[],"call":[" connection= "," run_callbacks "]}," ActionCable Server Worker stopping?":{"type":"method","name":"stopping?","children":[],"call":["@executor shuttingdown? "]}," ActionCable Server Worker halt":{"type":"method","name":"halt","children":[],"call":["@executor kill ","@executor shutdown "]}," ActionCable Server Worker initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent ThreadPoolExecutor  new "]}," ActionCable Server Worker ActiveRecordConnectionManagement with_database_connections":{"type":"method","name":"with_database_connections","children":[],"call":[" connection logger tag ","ActiveRecord Base  logger "," connection logger "," connection ","ActiveRecord Base  clear_active_connections! "]}," ActionCable Server Connections open_connections_statistics":{"type":"method","name":"open_connections_statistics","children":[],"call":[" connections map "," connections "]}," ActionCable Server Connections setup_heartbeat_timer":{"type":"method","name":"setup_heartbeat_timer","children":[],"call":[" connections map "," connections "," event_loop post "," event_loop "," event_loop timer ","EM  next_tick ","EventMachine  add_periodic_timer ","(send\n  (const\n    (const nil :Concurrent) :TimerTask) :new\n  (hash\n    (pair\n      (sym :execution_interval)\n      (const nil :BEAT_INTERVAL)))) tap ","Concurrent  global_io_executor post ","Concurrent  global_io_executor ","Concurrent TimerTask  new "," connections each "]}," ActionCable Server Connections remove_connection":{"type":"method","name":"remove_connection","children":[],"call":[" connections delete "," connections "]}," ActionCable Server Connections add_connection":{"type":"method","name":"add_connection","children":[],"call":[" connections << "," connections "]}," ActionCable Server Connections connections":{"type":"method","name":"connections","children":[],"call":[]}," ActionCable Server Configuration client_socket_class":{"type":"method","name":"client_socket_class","children":[],"call":[" use_faye "]}," ActionCable Server Configuration event_loop_class":{"type":"method","name":"event_loop_class","children":[],"call":[" use_faye "]}," ActionCable Server Configuration pubsub_adapter":{"type":"method","name":"pubsub_adapter","children":[],"call":["(str \"ActionCable::SubscriptionAdapter::\") constantize ","adapter == ","adapter camelize "," raise ","e backtrace ","e name "," require "," cable fetch "," cable ","e message ","e class ","e path == ","e path ","adapter camelize  == ","adapter camelize  camelize "]}," ActionCable Server Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" lambda ","Rails  root join ","Rails  root ","Time  now httpdate ","Time  now "]}," ActionCable Server Broadcasting Broadcaster broadcast":{"type":"method","name":"broadcast","children":[],"call":[" server pubsub broadcast "," broadcasting "," server pubsub "," server "," coder encode "," coder "," server logger info ","message inspect "," server logger "," server broadcasting_redis publish ","ActiveSupport JSON  encode "," server broadcasting_redis ","ActiveSupport Notifications  instrument "," server logger debug ","message inspect truncate "]}," ActionCable Server Broadcasting Broadcaster initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Server Broadcasting broadcaster_for":{"type":"method","name":"broadcaster_for","children":[],"call":["Broadcaster  new "," String "]}," ActionCable Server Broadcasting broadcast":{"type":"method","name":"broadcast","children":[],"call":[" broadcaster_for broadcast "," broadcaster_for "]}," ActionCable Server Base connection_identifiers":{"type":"method","name":"connection_identifiers","children":[],"call":[" config connection_class call identifiers "," config connection_class call "," config connection_class "," config "," config connection_class identifiers "]}," ActionCable Server Base pubsub":{"type":"method","name":"pubsub","children":[],"call":[" config pubsub_adapter new "," config pubsub_adapter "," config ","@mutex synchronize "," redis pubsub "," redis "]}," ActionCable Server Base worker_pool":{"type":"method","name":"worker_pool","children":[],"call":["ActionCable Server Worker  new "," config worker_pool_size "," config ","@mutex synchronize ","ActionCable Server Worker  pool "]}," ActionCable Server Base event_loop":{"type":"method","name":"event_loop","children":[],"call":[" config event_loop_class new "," config event_loop_class "," config ","@mutex synchronize ","ActionCable Connection StreamEventLoop  new "]}," ActionCable Server Base remote_connections":{"type":"method","name":"remote_connections","children":[],"call":["RemoteConnections  new ","@mutex synchronize "]}," ActionCable Server Base restart":{"type":"method","name":"restart","children":[],"call":[" worker_pool halt "," worker_pool ","@mutex synchronize "," connections each "," connections ","@pubsub shutdown ","@worker_pool halt ","connection close ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "]}," ActionCable Server Base disconnect":{"type":"method","name":"disconnect","children":[],"call":[" remote_connections where disconnect "," remote_connections where "," remote_connections "]}," ActionCable Server Base call":{"type":"method","name":"call","children":[],"call":[" config connection_class call new process "," config connection_class call new "," config connection_class call "," config connection_class "," config "," setup_heartbeat_timer "," config connection_class new process "," config connection_class new "," config health_check_application call "," config health_check_application ","env [] == "," config health_check_path ","env [] "]}," ActionCable Server Base initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new ","Mutex  new "]}," ActionCable Server Base logger":{"type":"method","name":"logger","children":[],"call":[]}," ActionCable RemoteConnections RemoteConnection valid_identifiers?":{"type":"method","name":"valid_identifiers?","children":[],"call":["keys include? "," identifiers all? "," identifiers ","ids keys ","ids keys  include? ","ids ids keys  "]}," ActionCable RemoteConnections RemoteConnection set_identifier_instance_vars":{"type":"method","name":"set_identifier_instance_vars","children":[],"call":[" instance_variable_set ","ids each "," raise "," valid_identifiers? "]}," ActionCable RemoteConnections RemoteConnection identifiers":{"type":"method","name":"identifiers","children":[],"call":[" server connection_identifiers "," server "]}," ActionCable RemoteConnections RemoteConnection disconnect":{"type":"method","name":"disconnect","children":[],"call":[" server broadcast "," internal_channel "," server "," internal_redis_channel "]}," ActionCable RemoteConnections RemoteConnection initialize":{"type":"method","name":"initialize","children":[],"call":[" set_identifier_instance_vars "]}," ActionCable RemoteConnections where":{"type":"method","name":"where","children":[],"call":["RemoteConnection  new "," server "]}," ActionCable RemoteConnections initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Helpers ActionCableHelper action_cable_meta_tag":{"type":"method","name":"action_cable_meta_tag","children":[],"call":[" tag "," raise ","ActionCable  server config mount_path ","ActionCable  server config ","ActionCable  server ","ActionCable  server config url ","Rails  application config action_cable url ","Rails  application config action_cable ","Rails  application config ","Rails  application "]}," ActionCable gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," ActionCable Connection WebSocket rack_response":{"type":"method","name":"rack_response","children":[],"call":[" websocket rack_response "," websocket "]}," ActionCable Connection WebSocket protocol":{"type":"method","name":"protocol","children":[],"call":[" websocket protocol "," websocket "]}," ActionCable Connection WebSocket close":{"type":"method","name":"close","children":[],"call":[" websocket close "," websocket "]}," ActionCable Connection WebSocket transmit":{"type":"method","name":"transmit","children":[],"call":[" websocket transmit "," websocket "," websocket send "]}," ActionCable Connection WebSocket alive?":{"type":"method","name":"alive?","children":[],"call":[" websocket alive? "," websocket "," websocket ready_state == "," websocket ready_state "]}," ActionCable Connection WebSocket possible?":{"type":"method","name":"possible?","children":[],"call":[" websocket "]}," ActionCable Connection WebSocket initialize":{"type":"method","name":"initialize","children":[],"call":["client_socket_class new "," WebSocket Driver  websocket? ","Faye WebSocket  new ","Faye WebSocket  websocket? ","ClientSocket  new "]}," ActionCable Connection TaggedLoggerProxy log":{"type":"method","name":"log","children":[],"call":["@logger send "," tag "]}," ActionCable Connection TaggedLoggerProxy tag":{"type":"method","name":"tag","children":[],"call":["logger tagged "," tags - ","logger formatter current_tags ","logger formatter "," tags ","logger respond_to? ","logger formatter  tags -  "]}," ActionCable Connection TaggedLoggerProxy add_tags":{"type":"method","name":"add_tags","children":[],"call":["@tags uniq ","tags flatten ","@tags uniq  uniq "]}," ActionCable Connection TaggedLoggerProxy initialize":{"type":"method","name":"initialize","children":[],"call":["tags flatten "]}," ActionCable Connection Subscriptions find":{"type":"method","name":"find","children":[],"call":[" raise ","data [] "," subscriptions [] "," subscriptions ","  subscriptions [] s [] ","  subscriptions [] s "]}," ActionCable Connection Subscriptions unsubscribe_from_all":{"type":"method","name":"unsubscribe_from_all","children":[],"call":[" remove_subscription "," subscriptions each "," subscriptions ","channel unsubscribe_from_channel "]}," ActionCable Connection Subscriptions identifiers":{"type":"method","name":"identifiers","children":[],"call":[" subscriptions keys "," subscriptions "]}," ActionCable Connection Subscriptions perform_action":{"type":"method","name":"perform_action","children":[],"call":[" find perform_action ","ActiveSupport JSON  decode ","data [] "," find "]}," ActionCable Connection Subscriptions remove_subscription":{"type":"method","name":"remove_subscription","children":[],"call":[" subscriptions delete ","subscription identifier "," subscriptions ","subscription unsubscribe_from_channel "]}," ActionCable Connection Subscriptions remove":{"type":"method","name":"remove","children":[],"call":[" remove_subscription "," subscriptions [] ","data [] "," subscriptions "," logger info "," logger "," find "]}," ActionCable Connection Subscriptions add":{"type":"method","name":"add","children":[],"call":[" logger error ","id_options [] inspect ","id_options [] "," logger ","subscription_klass new "," connection "," subscriptions [] "," subscriptions ","ActionCable Channel Base  >= ","id_options [] safe_constantize ","ActiveSupport JSON  decode with_indifferent_access ","ActiveSupport JSON  decode ","data [] ","data inspect "," connection server channel_classes [] "," connection server channel_classes "," connection server ","subscription subscribe_to_channel "," subscriptions []= "," subscriptions key? ","ActionCable Channel Base  > ","ActiveSupport JSON  decode with_indifferent_access  [] inspect ","ActiveSupport JSON  decode with_indifferent_access  [] ","id_options [] safe_constantize  new "," connection server channel_classes []  new ","subscription_klass new _klass new "," subscription_klass new s [] "," subscription_klass new s ","ActiveSupport JSON  decode with_indifferent_access  [] safe_constantize ","subscription_klass new  subscribe_to_channel "," subscription_klass new s []= "," subscription_klass new s key? "]}," ActionCable Connection Subscriptions execute_command":{"type":"method","name":"execute_command","children":[],"call":[" logger error ","e backtrace first join ","e backtrace first ","e backtrace ","e message ","e class ","data inspect "," logger "," perform_action "," remove "," add ","data [] ","@connection rescue_with_handler "]}," ActionCable Connection Subscriptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Connection StreamEventLoop run":{"type":"method","name":"run","children":[],"call":["@map delete ","@nio deregister ","stream close ","stream receive ","io read_nonblock ","@map [] ","monitor io ","monitors each ","@nio select ","@todo pop call ","@todo pop ","@todo empty? ","@nio close "," loop ","monitor readable? ","monitor interests= ","stream flush_write_buffer ","monitor writable? ","monitor value ","@nmonitor io  deregister ","@map []  close ","monitor value  close ","@map []  receive ","monitor value  receive ","monitor io  read_nonblock ","monitor monitor io  ","@nio select  each ","@nmonitor io  select ","@nmonitor io  close ","@map []  flush_write_buffer ","monitor value  flush_write_buffer "]}," ActionCable Connection StreamEventLoop wakeup":{"type":"method","name":"wakeup","children":[],"call":["@nio wakeup "," spawn "]}," ActionCable Connection StreamEventLoop spawn":{"type":"method","name":"spawn","children":[],"call":[" run ","Thread  new ","NIO Selector  new ","@thread status ","@spawn_mutex synchronize ","Concurrent ThreadPoolExecutor  new "]}," ActionCable Connection StreamEventLoop stop":{"type":"method","name":"stop","children":[],"call":[" wakeup "]}," ActionCable Connection StreamEventLoop detach":{"type":"method","name":"detach","children":[],"call":[" wakeup ","@todo << ","@map delete ","@nio deregister "," lambda ","io close "]}," ActionCable Connection StreamEventLoop attach":{"type":"method","name":"attach","children":[],"call":[" wakeup ","@todo << ","@nio register ","@map []= "," lambda ","@map [] value= ","@map [] "]}," ActionCable Connection StreamEventLoop post":{"type":"method","name":"post","children":[],"call":["Concurrent  global_io_executor << ","Concurrent  global_io_executor ","@executor << "," spawn "]}," ActionCable Connection StreamEventLoop timer":{"type":"method","name":"timer","children":[],"call":["Concurrent TimerTask  new tap ","Concurrent TimerTask  new "]}," ActionCable Connection StreamEventLoop initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","Queue  new "," spawn "]}," ActionCable Connection Stream clean_rack_hijack":{"type":"method","name":"clean_rack_hijack","children":[],"call":["@event_loop detach "]}," ActionCable Connection Stream hijack_rack_socket":{"type":"method","name":"hijack_rack_socket","children":[],"call":["@event_loop attach ","@socket_object env [] ","@socket_object env ","@socket_object env [] call "]}," ActionCable Connection Stream receive":{"type":"method","name":"receive","children":[],"call":["@socket_object parse "]}," ActionCable Connection Stream write":{"type":"method","name":"write","children":[],"call":["@socket_object client_gone ","@stream_send call ","@rack_hijack_io write ","data bytesize ","@event_loop writes_pending ","@write_buffer << ","@write_lock unlock ","data byteslice ","@rack_hijack_io write_nonblock ","@write_buffer empty? ","@write_head nil? ","@write_lock try_lock ","data byteslice  nil? "]}," ActionCable Connection Stream shutdown":{"type":"method","name":"shutdown","children":[],"call":[" clean_rack_hijack "]}," ActionCable Connection Stream close":{"type":"method","name":"close","children":[],"call":["@socket_object client_gone "," shutdown "]}," ActionCable Connection Stream each":{"type":"method","name":"each","children":[],"call":[]}," ActionCable Connection Stream initialize":{"type":"method","name":"initialize","children":[],"call":["socket env [] ","socket env "," hijack_rack_socket ","Queue  new ","Mutex  new "]}," ActionCable Connection MessageBuffer receive_buffered_messages":{"type":"method","name":"receive_buffered_messages","children":[],"call":[" receive "," buffered_messages shift "," buffered_messages "," buffered_messages empty? "]}," ActionCable Connection MessageBuffer buffer":{"type":"method","name":"buffer","children":[],"call":[" buffered_messages << "," buffered_messages "]}," ActionCable Connection MessageBuffer receive":{"type":"method","name":"receive","children":[],"call":[" connection receive "," connection "," connection send_async "]}," ActionCable Connection MessageBuffer valid?":{"type":"method","name":"valid?","children":[],"call":["message is_a? "]}," ActionCable Connection MessageBuffer process!":{"type":"method","name":"process!","children":[],"call":[" receive_buffered_messages "]}," ActionCable Connection MessageBuffer processing?":{"type":"method","name":"processing?","children":[],"call":[]}," ActionCable Connection MessageBuffer append":{"type":"method","name":"append","children":[],"call":[" connection logger error ","message class "," connection logger "," connection "," buffer "," receive "," processing? "," valid? "]}," ActionCable Connection MessageBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Connection InternalChannel process_internal_message":{"type":"method","name":"process_internal_message","children":[],"call":[" close "," logger error ","e backtrace join ","e backtrace "," logger ","e message ","e class "," websocket close "," websocket "," logger info "," connection_identifier ","message [] ","ActiveSupport JSON  decode ","message fetch ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] ","e ActiveSupport JSON  decode  ","ActiveSupport JSON  decode  [] ","ActiveSupport JSON  decode  fetch "]}," ActionCable Connection InternalChannel unsubscribe_from_internal_channel":{"type":"method","name":"unsubscribe_from_internal_channel","children":[],"call":[" pubsub unsubscribe "," pubsub "," server event_loop post "," server event_loop "," server ","@_internal_subscriptions each ","@_internal_subscriptions present? "," pubsub unsubscribe_proc ","EM  next_tick ","@_internal_redis_subscriptions each ","@_internal_redis_subscriptions present? ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable Connection InternalChannel subscribe_to_internal_channel":{"type":"method","name":"subscribe_to_internal_channel","children":[],"call":[" logger info "," connection_identifier "," logger "," pubsub subscribe "," internal_channel "," pubsub "," server event_loop post "," server event_loop "," server ","@_internal_subscriptions << "," process_internal_message "," decode "," lambda "," connection_identifier present? "," internal_redis_channel ","EM  next_tick ","@_internal_redis_subscriptions << ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "]}," ActionCable Connection InternalChannel internal_channel":{"type":"method","name":"internal_channel","children":[],"call":[" connection_identifier "]}," ActionCable Connection Identification connection_gid":{"type":"method","name":"connection_gid","children":[],"call":["(send\n  (lvar :ids) :map) sort join ","(send\n  (lvar :ids) :map) sort ","o to_s ","o to_gid_param ","o respond_to? ","ids map "]}," ActionCable Connection Identification connection_identifier":{"type":"method","name":"connection_identifier","children":[],"call":[" connection_gid ","(send\n  (send nil :identifiers) :map) compact "," instance_variable_get "," identifiers map "," identifiers "," identifiers filter_map "]}," ActionCable Connection Identification identified_by":{"type":"method","name":"identified_by","children":[],"call":[" identifiers "," attr_accessor "," Array each "," Array "]}," ActionCable Connection FayeEventLoop EMTimer shutdown":{"type":"method","name":"shutdown","children":[],"call":["@inner cancel "]}," ActionCable Connection FayeEventLoop EMTimer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Connection FayeEventLoop ensure_reactor_running":{"type":"method","name":"ensure_reactor_running","children":[],"call":["Thread  pass ","EventMachine  reactor_running? ","EventMachine  run ","Thread  new ","@@mutex synchronize "]}," ActionCable Connection FayeEventLoop post":{"type":"method","name":"post","children":[],"call":[" EM  next_tick "," ensure_reactor_running "]}," ActionCable Connection FayeEventLoop timer":{"type":"method","name":"timer","children":[],"call":["EMTimer  new "," EM PeriodicTimer  new "," ensure_reactor_running "]}," ActionCable Connection FayeClientSocket connect":{"type":"method","name":"connect","children":[],"call":["@event_target on_error ","event message ","@faye on ","@event_target on_close ","event code ","event reason ","@event_target on_message ","event data ","@event_target on_open ","Faye WebSocket  new ","Faye WebSocket  new  on "]}," ActionCable Connection FayeClientSocket rack_response":{"type":"method","name":"rack_response","children":[],"call":["@faye rack_response "," connect "]}," ActionCable Connection FayeClientSocket protocol":{"type":"method","name":"protocol","children":[],"call":["@faye protocol "]}," ActionCable Connection FayeClientSocket close":{"type":"method","name":"close","children":[],"call":["@faye close "]}," ActionCable Connection FayeClientSocket transmit":{"type":"method","name":"transmit","children":[],"call":["@faye send "," connect "]}," ActionCable Connection FayeClientSocket alive?":{"type":"method","name":"alive?","children":[],"call":["@faye ready_state == ","@faye ready_state "]}," ActionCable Connection FayeClientSocket initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable Connection ClientSocket finalize_close":{"type":"method","name":"finalize_close","children":[],"call":["@event_target on_close ","@ready_state == "]}," ActionCable Connection ClientSocket begin_close":{"type":"method","name":"begin_close","children":[],"call":[" finalize_close ","@stream shutdown ","@ready_state == "]}," ActionCable Connection ClientSocket emit_error":{"type":"method","name":"emit_error","children":[],"call":["@event_target on_error ","@ready_state >= "]}," ActionCable Connection ClientSocket receive_message":{"type":"method","name":"receive_message","children":[],"call":["@event_target on_message ","@ready_state == "]}," ActionCable Connection ClientSocket open":{"type":"method","name":"open","children":[],"call":["@event_target on_open ","@ready_state == "]}," ActionCable Connection ClientSocket protocol":{"type":"method","name":"protocol","children":[],"call":["@driver protocol "]}," ActionCable Connection ClientSocket alive?":{"type":"method","name":"alive?","children":[],"call":["@ready_state == "]}," ActionCable Connection ClientSocket client_gone":{"type":"method","name":"client_gone","children":[],"call":[" finalize_close "]}," ActionCable Connection ClientSocket parse":{"type":"method","name":"parse","children":[],"call":["@driver parse "]}," ActionCable Connection ClientSocket close":{"type":"method","name":"close","children":[],"call":["@driver close ","@ready_state == "," raise ","Failed to execute 'close' on WebSocket:  + + ","Failed to execute 'close' on WebSocket:  + ","code <= ","code >= ","code == "]}," ActionCable Connection ClientSocket transmit":{"type":"method","name":"transmit","children":[],"call":["@driver binary ","@driver text ","message to_s ","@ready_state > "]}," ActionCable Connection ClientSocket write":{"type":"method","name":"write","children":[],"call":[" emit_error ","e message ","@stream write "]}," ActionCable Connection ClientSocket rack_response":{"type":"method","name":"rack_response","children":[],"call":[" start_driver "]}," ActionCable Connection ClientSocket start_driver":{"type":"method","name":"start_driver","children":[],"call":["@driver start ","callback call ","@env [] ","@stream hijack_rack_socket ","@driver nil? ","@env []  call "]}," ActionCable Connection ClientSocket initialize":{"type":"method","name":"initialize","children":[],"call":["ActionCable Connection Stream  new "," emit_error ","e message ","@driver on "," begin_close ","e code ","e reason "," receive_message ","e data "," open "," WebSocket Driver  rack ","ClientSocket  determine_url ","callback call ","@env [] "," WebSocket Driver  rack  on ","@env []  call "]}," ActionCable Connection ClientSocket secure_request?":{"type":"method","name":"secure_request?","children":[],"call":[]}," ActionCable Connection ClientSocket determine_url":{"type":"method","name":"determine_url","children":[],"call":[]}," ActionCable Connection Base successful_request_message":{"type":"method","name":"successful_request_message","children":[],"call":["Successfully upgraded to WebSocket (REQUEST_METHOD: %s, HTTP_CONNECTION: %s, HTTP_UPGRADE: %s) % "," env [] "," env "]}," ActionCable Connection Base invalid_request_message":{"type":"method","name":"invalid_request_message","children":[],"call":["Failed to upgrade to WebSocket (REQUEST_METHOD: %s, HTTP_CONNECTION: %s, HTTP_UPGRADE: %s) % "," env [] "," env "]}," ActionCable Connection Base finished_request_message":{"type":"method","name":"finished_request_message","children":[],"call":["Finished \"%s\"%s for %s at %s % ","Time  now to_s ","Time  now "," request ip "," request "," websocket possible? "," websocket "," request filtered_path ","Time  now to_default_s "]}," ActionCable Connection Base started_request_message":{"type":"method","name":"started_request_message","children":[],"call":["Started %s \"%s\"%s for %s at %s % ","Time  now to_s ","Time  now "," request ip "," request "," websocket possible? "," websocket "," request filtered_path "," request request_method ","Time  now to_default_s "]}," ActionCable Connection Base new_tagged_logger":{"type":"method","name":"new_tagged_logger","children":[],"call":["TaggedLoggerProxy  new ","tag to_s camelize ","tag to_s ","tag call "," request ","tag respond_to? "," server config log_tags map "," server config log_tags "," server config "," server "," server logger "]}," ActionCable Connection Base respond_to_invalid_request":{"type":"method","name":"respond_to_invalid_request","children":[],"call":[" logger info "," finished_request_message "," logger "," logger error "," invalid_request_message "," close "," websocket alive? "," websocket ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "]}," ActionCable Connection Base respond_to_successful_request":{"type":"method","name":"respond_to_successful_request","children":[],"call":[" websocket rack_response "," websocket "," logger info "," successful_request_message "," logger "]}," ActionCable Connection Base allow_request_origin?":{"type":"method","name":"allow_request_origin?","children":[],"call":[" logger error "," env [] "," env "," logger ","allowed_origin === "," Array any? "," Array "," server config allowed_request_origins "," server config "," server "," server config disable_request_forgery_protection "," env [] == "," server config allow_same_origin_as_host ","Rack Request  new ssl? ","Rack Request  new "]}," ActionCable Connection Base send_welcome_message":{"type":"method","name":"send_welcome_message","children":[],"call":[" transmit ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "]}," ActionCable Connection Base handle_close":{"type":"method","name":"handle_close","children":[],"call":[" disconnect "," respond_to? "," unsubscribe_from_internal_channel "," subscriptions unsubscribe_from_all "," subscriptions "," server remove_connection "," server "," logger info "," finished_request_message "," logger "]}," ActionCable Connection Base handle_open":{"type":"method","name":"handle_open","children":[],"call":[" respond_to_invalid_request "," server add_connection "," server "," message_buffer process! "," message_buffer "," send_welcome_message "," subscribe_to_internal_channel "," connect "," respond_to? "," websocket protocol "," websocket "," beat "," confirm_connection_monitor_subscription "," close ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "," websocket alive? "]}," ActionCable Connection Base decode":{"type":"method","name":"decode","children":[],"call":["@coder decode "]}," ActionCable Connection Base encode":{"type":"method","name":"encode","children":[],"call":["@coder encode "]}," ActionCable Connection Base cookies":{"type":"method","name":"cookies","children":[],"call":[" request cookie_jar "," request "]}," ActionCable Connection Base request":{"type":"method","name":"request","children":[],"call":["ActionDispatch Request  new "," env ","Rails  application env_config merge ","Rails  application env_config ","Rails  application "]}," ActionCable Connection Base on_close":{"type":"method","name":"on_close","children":[],"call":[" send_async "," disconnect "," respond_to? "," unsubscribe_from_internal_channel "," subscriptions unsubscribe_from_all "," subscriptions "," server remove_connection "," server "," logger info "," finished_request_message "," logger "]}," ActionCable Connection Base on_error":{"type":"method","name":"on_error","children":[],"call":[" logger error "," logger "]}," ActionCable Connection Base on_message":{"type":"method","name":"on_message","children":[],"call":[" message_buffer append "," message_buffer "]}," ActionCable Connection Base on_open":{"type":"method","name":"on_open","children":[],"call":[" send_async "," respond_to_invalid_request "," server add_connection "," server "," message_buffer process! "," message_buffer "," beat "," subscribe_to_internal_channel "," connect "," respond_to? "]}," ActionCable Connection Base beat":{"type":"method","name":"beat","children":[],"call":[" transmit ","Time  now to_i ","Time  now ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] ","ActiveSupport JSON  encode "]}," ActionCable Connection Base statistics":{"type":"method","name":"statistics","children":[],"call":["@env [] "," subscriptions identifiers "," subscriptions "," connection_identifier "]}," ActionCable Connection Base send_async":{"type":"method","name":"send_async","children":[],"call":[" worker_pool async_invoke "," worker_pool "," worker_pool async invoke "," worker_pool async "]}," ActionCable Connection Base close":{"type":"method","name":"close","children":[],"call":[" websocket close "," websocket "," transmit ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "]}," ActionCable Connection Base transmit":{"type":"method","name":"transmit","children":[],"call":[" websocket transmit "," encode "," websocket "]}," ActionCable Connection Base dispatch_websocket_message":{"type":"method","name":"dispatch_websocket_message","children":[],"call":[" logger error ","websocket_message inspect "," logger "," subscriptions execute_command "," decode "," subscriptions "," websocket alive? "," websocket "," handle_channel_command "]}," ActionCable Connection Base receive":{"type":"method","name":"receive","children":[],"call":[" send_async "," logger error ","data_in_json inspect "," logger "," subscriptions execute_command ","ActiveSupport JSON  decode "," subscriptions "," websocket alive? "," websocket "]}," ActionCable Connection Base process":{"type":"method","name":"process","children":[],"call":[" respond_to_invalid_request "," respond_to_successful_request "," allow_request_origin? "," websocket possible? "," websocket "," logger info "," started_request_message "," logger "," send_async "," websocket on "," on_message ","event data "]}," ActionCable Connection Base initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now ","ActionCable Connection MessageBuffer  new ","ActionCable Connection Subscriptions  new ","ActionCable Connection WebSocket  new ","server config client_socket_class ","server config "," event_loop "," new_tagged_logger ","server worker_pool "," stream_event_loop "]}," ActionCable Connection Authorization reject_unauthorized_connection":{"type":"method","name":"reject_unauthorized_connection","children":[],"call":[" raise "," logger error "," logger "]}," ActionCable Channel Streams identity_handler":{"type":"method","name":"identity_handler","children":[],"call":[" lambda "]}," ActionCable Channel Streams stream_transmitter":{"type":"method","name":"stream_transmitter","children":[],"call":[" transmit ","handler call "," lambda "]}," ActionCable Channel Streams stream_decoder":{"type":"method","name":"stream_decoder","children":[],"call":["handler call ","coder decode "," lambda "]}," ActionCable Channel Streams default_stream_handler":{"type":"method","name":"default_stream_handler","children":[],"call":[" stream_transmitter "," stream_decoder "]}," ActionCable Channel Streams stream_handler":{"type":"method","name":"stream_handler","children":[],"call":[" default_stream_handler "," stream_decoder "]}," ActionCable Channel Streams worker_pool_stream_handler":{"type":"method","name":"worker_pool_stream_handler","children":[],"call":[" connection worker_pool async_invoke "," connection "," connection worker_pool "," lambda "," stream_handler "," stream_ stream_handler  "]}," ActionCable Channel Streams streams":{"type":"method","name":"streams","children":[],"call":[]}," ActionCable Channel Streams stop_all_streams":{"type":"method","name":"stop_all_streams","children":[],"call":["(send\n  (send nil :streams) :each) clear "," logger info "," class name "," class "," logger "," pubsub unsubscribe "," pubsub "," streams each "," streams "," pubsub unsubscribe_proc "]}," ActionCable Channel Streams stream_for":{"type":"method","name":"stream_for","children":[],"call":[" stream_from "," broadcasting_for "," channel_name "]}," ActionCable Channel Streams stream_from":{"type":"method","name":"stream_from","children":[],"call":[" pubsub subscribe "," logger info "," class name "," class "," logger "," transmit_subscription_confirmation "," lambda "," pubsub "," connection server event_loop post "," connection server event_loop "," connection server "," connection "," streams << "," streams "," worker_pool_stream_handler "," defer_subscription_confirmation! "," String "," pubsub subscribe callback ","EM  next_tick "," default_stream_callback ","Concurrent  global_io_executor post ","Concurrent  global_io_executor "," ensure_confirmation_sent "," streams []= "," worker_pool_stream_ worker_pool_stream_handler  "]}," ActionCable Channel PeriodicTimers stop_periodic_timers":{"type":"method","name":"stop_periodic_timers","children":[],"call":[" active_periodic_timers clear "," active_periodic_timers ","timer shutdown "," active_periodic_timers each ","timer cancel "]}," ActionCable Channel PeriodicTimers start_periodic_timer":{"type":"method","name":"start_periodic_timer","children":[],"call":[" connection worker_pool async_exec "," connection "," connection worker_pool "," connection server event_loop timer "," connection server event_loop "," connection server "," instance_exec "," connection worker_pool async_invoke "]}," ActionCable Channel PeriodicTimers start_periodic_timers":{"type":"method","name":"start_periodic_timers","children":[],"call":[" active_periodic_timers << "," start_periodic_timer ","options fetch "," active_periodic_timers "," class periodic_timers each "," class periodic_timers "," class "," connection worker_pool async run_periodic_timer "," connection worker_pool async "," connection worker_pool "," connection ","EventMachine PeriodicTimer  new ","options [] "," connection worker_pool async_run_periodic_timer ","Concurrent TimerTask  new "]}," ActionCable Channel PeriodicTimers active_periodic_timers":{"type":"method","name":"active_periodic_timers","children":[],"call":[]}," ActionCable Channel PeriodicTimers ClassMethods periodically":{"type":"method","name":"periodically","children":[],"call":[" periodic_timers "," raise ","every inspect ","every > ","every kind_of? ","callback_or_method_name inspect "," __send__ "," lambda "," block_given? "]}," ActionCable Channel Naming channel_name":{"type":"method","name":"channel_name","children":[],"call":[" name sub gsub underscore "," name sub gsub "," name sub "," name "]}," ActionCable Channel Callbacks after_unsubscribe":{"type":"method","name":"after_unsubscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks before_unsubscribe":{"type":"method","name":"before_unsubscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks after_subscribe":{"type":"method","name":"after_subscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks before_subscribe":{"type":"method","name":"before_subscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Broadcasting broadcasting_for":{"type":"method","name":"broadcasting_for","children":[],"call":["model to_param ","model to_gid_param ","model respond_to? ","(send\n  (lvar :model) :map) join "," broadcasting_for ","model map ","model is_a? "]}," ActionCable Channel Broadcasting broadcast_to":{"type":"method","name":"broadcast_to","children":[],"call":["ActionCable  server broadcast "," broadcasting_for "," channel_name ","ActionCable  server "]}," ActionCable Channel Base transmit_subscription_rejection":{"type":"method","name":"transmit_subscription_rejection","children":[],"call":[" connection transmit ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "," connection ","ActiveSupport Notifications  instrument "," class name "," class "," logger info "," logger ","ActiveSupport JSON  encode "," logger debug "]}," ActionCable Channel Base reject_subscription":{"type":"method","name":"reject_subscription","children":[],"call":[" transmit_subscription_rejection "," connection subscriptions remove_subscription "," connection subscriptions "," connection "]}," ActionCable Channel Base transmit_subscription_confirmation":{"type":"method","name":"transmit_subscription_confirmation","children":[],"call":[" connection transmit ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "," connection ","ActiveSupport Notifications  instrument "," class name "," class "," logger info "," logger "," subscription_confirmation_sent? ","ActiveSupport JSON  encode "," logger debug "]}," ActionCable Channel Base action_signature":{"type":"method","name":"action_signature","children":[],"call":["signature << ","arguments inspect ","(lvasgn :arguments\n  (send\n    (lvar :data) :except\n    (str \"action\"))) any? ","data except ","(begin\n  (send\n    (send\n      (self) :class) :name)) tap "," class name "," class ","(begin\n  (send\n    (send\n      (self) :class) :name)) dup tap ","(begin\n  (send\n    (send\n      (self) :class) :name)) dup ","(send\n  (dstr\n    (begin\n      (send\n        (send\n          (self) :class) :name))\n    (str \"#\")\n    (begin\n      (lvar :action))) :+@) tap ","(begin\n  (send\n    (send\n      (self) :class) :name)) +@ "," parameter_filter filter "," parameter_filter ","arguments any? ","data except  inspect "," parameter_filter filter  inspect ","(lvasgn :data except \n  (send\n    (lvar :data) :except\n    (str \"action\"))) any? ","(lvasgn : parameter_filter filter \n  (send\n    (lvar :data) :except\n    (str \"action\"))) any? ","data except  any? "," parameter_filter filter  any? "]}," ActionCable Channel Base dispatch_action":{"type":"method","name":"dispatch_action","children":[],"call":[" public_send "," method arity == "," method arity "," method "," logger info "," action_signature "," logger "," raise "," rescue_with_handler "," logger debug "]}," ActionCable Channel Base processable_action?":{"type":"method","name":"processable_action?","children":[],"call":[" class action_methods include? ","action to_s "," class action_methods "," class "," subscription_rejected? "]}," ActionCable Channel Base extract_action":{"type":"method","name":"extract_action","children":[],"call":["(or\n  (send\n    (send\n      (lvar :data) :[]\n      (str \"action\")) :presence)\n  (sym :receive)) to_sym ","data [] presence ","data [] "]}," ActionCable Channel Base subscribe_to_channel":{"type":"method","name":"subscribe_to_channel","children":[],"call":[" transmit_subscription_confirmation "," defer_subscription_confirmation? "," reject_subscription "," subscription_rejected? "," subscribed "," run_callbacks "," ensure_confirmation_sent "]}," ActionCable Channel Base delegate_connection_identifiers":{"type":"method","name":"delegate_connection_identifiers","children":[],"call":[" connection send "," connection "," define_singleton_method "," connection identifiers each "," connection identifiers "]}," ActionCable Channel Base subscription_rejected?":{"type":"method","name":"subscription_rejected?","children":[],"call":[]}," ActionCable Channel Base reject":{"type":"method","name":"reject","children":[],"call":[]}," ActionCable Channel Base subscription_confirmation_sent?":{"type":"method","name":"subscription_confirmation_sent?","children":[],"call":[]}," ActionCable Channel Base defer_subscription_confirmation?":{"type":"method","name":"defer_subscription_confirmation?","children":[],"call":["@defer_subscription_confirmation_counter value > ","@defer_subscription_confirmation_counter value "]}," ActionCable Channel Base defer_subscription_confirmation!":{"type":"method","name":"defer_subscription_confirmation!","children":[],"call":["@defer_subscription_confirmation_counter increment "]}," ActionCable Channel Base transmit":{"type":"method","name":"transmit","children":[],"call":[" connection transmit "," connection ","ActiveSupport Notifications  instrument "," class name "," class "," logger info ","m << ","(begin\n  (send\n    (send\n      (self) :class) :name)) tap ","data inspect truncate ","data inspect "," logger ","ActiveSupport JSON  encode "," logger debug "]}," ActionCable Channel Base unsubscribed":{"type":"method","name":"unsubscribed","children":[],"call":[]}," ActionCable Channel Base subscribed":{"type":"method","name":"subscribed","children":[],"call":[]}," ActionCable Channel Base unsubscribe_from_channel":{"type":"method","name":"unsubscribe_from_channel","children":[],"call":[" unsubscribed "," run_callbacks "]}," ActionCable Channel Base perform_action":{"type":"method","name":"perform_action","children":[],"call":[" logger error "," action_signature "," logger "," dispatch_action ","ActiveSupport Notifications  instrument "," class name "," class "," processable_action? "," extract_action ","  extract_action _signature "," dispatch_ extract_action  "," processable_ extract_action ? "," extract_ extract_action  "]}," ActionCable Channel Base initialize":{"type":"method","name":"initialize","children":[],"call":[" subscribe_to_channel "," delegate_connection_identifiers ","Concurrent AtomicFixnum  new "]}," ActionCable Channel Base method_added":{"type":"method","name":"method_added","children":[],"call":[" clear_action_methods! "]}," ActionCable Channel Base clear_action_methods!":{"type":"method","name":"clear_action_methods!","children":[],"call":[]}," ActionCable Channel Base action_methods":{"type":"method","name":"action_methods","children":[],"call":["methods to_set ","(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map ","(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq "," public_instance_methods - + "," public_instance_methods "," public_instance_methods - ","ActionCable Channel Base  public_instance_methods ","(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map  to_set ","(send\n  (send\n    (send nil :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n      (true))) :+\n  (send nil :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n    (false))) uniq map ","(send\n  (send\n    (send nil :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n      (true))) :+\n  (send nil :public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map \n    (false))) uniq "," public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map  - + "," public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map  "," public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map  - ","ActionCable Channel Base  public_instance_(send\n  (send\n    (send nil :public_instance_methods\n      (true)) :-\n    (send\n      (const\n        (const\n          (const nil :ActionCable) :Channel) :Base) :public_instance_methods\n      (true))) :+\n  (send nil :public_instance_methods\n    (false))) uniq map  "]}," ActionCable Server Worker run_periodic_timer":{"type":"method","name":"run_periodic_timer","children":[],"call":["channel send ","channel instance_exec ","callback respond_to? "," run_callbacks ","channel connection "," connection= "]}," ActionCable Server Configuration channel_class_names":{"type":"method","name":"channel_class_names","children":[],"call":["Pathname  new basename to_s split first camelize ","Pathname  new basename to_s split first ","Pathname  new basename to_s split ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new "," channel_paths collect "," channel_paths "]}," ActionCable Server Configuration channel_paths":{"type":"method","name":"channel_paths","children":[],"call":["Dir  [] "," channels_path "," channel_load_paths flat_map "," channel_load_paths "]}," ActionCable Server Broadcasting broadcasting_redis":{"type":"method","name":"broadcasting_redis","children":[],"call":["Redis  new "," config redis "," config "]}," ActionCable Server Base redis":{"type":"method","name":"redis","children":[],"call":[" logger info "," logger ","redis on ","EM Hiredis  connect tap ","EM Hiredis  connect "," config redis [] "," config redis "," config "]}," ActionCable Server Base channel_classes":{"type":"method","name":"channel_classes","children":[],"call":["hash []= ","name constantize "," config channel_class_names each_with_object "," config channel_class_names "," config "," require "," config channel_paths each "," config channel_paths ","@mutex synchronize "]}," ActionCable Connection InternalChannel internal_redis_channel":{"type":"method","name":"internal_redis_channel","children":[],"call":[" connection_identifier "]}," ActionCable Channel Streams default_stream_callback":{"type":"method","name":"default_stream_callback","children":[],"call":[" transmit ","ActiveSupport JSON  decode "," lambda "]}," ActionCable Server Worker async_run_periodic_timer":{"type":"method","name":"async_run_periodic_timer","children":[],"call":[" run_periodic_timer ","@pool post "]}," ActionCable Server Base stream_event_loop":{"type":"method","name":"stream_event_loop","children":[],"call":["ActionCable Connection StreamEventLoop  new ","@mutex synchronize "]}," ActionCable Connection Base confirm_connection_monitor_subscription":{"type":"method","name":"confirm_connection_monitor_subscription","children":[],"call":[" transmit ","ActiveSupport JSON  encode ","ActionCable INTERNAL  [] [] ","ActionCable INTERNAL  [] "]}," ActionCable Connection StreamEventLoop writes_pending":{"type":"method","name":"writes_pending","children":[],"call":[" wakeup ","@todo << ","monitor interests= ","@map [] "," lambda ","@map []  interests= "]}," ActionCable Connection Stream flush_write_buffer":{"type":"method","name":"flush_write_buffer","children":[],"call":["@write_head byteslice ","@write_head bytesize ","@rack_hijack_io write_nonblock ","@write_buffer pop ","@write_buffer empty? ","@write_head nil? "," loop ","@write_lock synchronize ","@write_head byteslice  byteslice ","@write_buffer pop  byteslice ","@write_head byteslice  bytesize ","@write_buffer pop  bytesize ","@write_head byteslice  nil? ","@write_buffer pop  nil? "]}," ActionCable Channel Base ensure_confirmation_sent":{"type":"method","name":"ensure_confirmation_sent","children":[],"call":[" transmit_subscription_confirmation "," defer_subscription_confirmation? ","@defer_subscription_confirmation_counter decrement "," subscription_rejected? "]}," ActionCable SubscriptionAdapter ChannelPrefix channel_with_prefix":{"type":"method","name":"channel_with_prefix","children":[],"call":["(send\n  (send\n    (send\n      (ivar :@server) :config) :cable) :[]\n  (sym :channel_prefix)) compact join ","(send\n  (send\n    (send\n      (ivar :@server) :config) :cable) :[]\n  (sym :channel_prefix)) compact ","@server config cable [] ","@server config cable ","@server config "]}," ActionCable SubscriptionAdapter ChannelPrefix unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" channel_with_prefix ","  channel_with_prefix _with_prefix "]}," ActionCable SubscriptionAdapter ChannelPrefix subscribe":{"type":"method","name":"subscribe","children":[],"call":[" channel_with_prefix ","  channel_with_prefix _with_prefix "]}," ActionCable SubscriptionAdapter ChannelPrefix broadcast":{"type":"method","name":"broadcast","children":[],"call":[" channel_with_prefix ","  channel_with_prefix _with_prefix "]}," ActionCable SubscriptionAdapter PostgreSQL channel_identifier":{"type":"method","name":"channel_identifier","children":[],"call":["Digest SHA1  hexdigest ","channel size > ","channel size ","OpenSSL Digest SHA1  hexdigest "]}," ActionCable Connection Identification ClassMethods identified_by":{"type":"method","name":"identified_by","children":[],"call":[" identifiers "," attr_accessor "," Array each "," Array "]}," ActionCable Channel Naming ClassMethods channel_name":{"type":"method","name":"channel_name","children":[],"call":[" name sub gsub underscore "," name sub gsub "," name sub "," name "," name delete_suffix gsub underscore "," name delete_suffix gsub "," name delete_suffix "]}," ActionCable Channel Callbacks ClassMethods after_unsubscribe":{"type":"method","name":"after_unsubscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks ClassMethods before_unsubscribe":{"type":"method","name":"before_unsubscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks ClassMethods after_subscribe":{"type":"method","name":"after_subscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Callbacks ClassMethods before_subscribe":{"type":"method","name":"before_subscribe","children":[],"call":[" set_callback "]}," ActionCable Channel Broadcasting ClassMethods broadcasting_for":{"type":"method","name":"broadcasting_for","children":[],"call":["model to_param ","model to_gid_param ","model respond_to? ","(send\n  (lvar :model) :map) join "," broadcasting_for ","model map ","model is_a? "," serialize_broadcasting "," channel_name "]}," ActionCable Channel Broadcasting ClassMethods broadcast_to":{"type":"method","name":"broadcast_to","children":[],"call":["ActionCable  server broadcast "," broadcasting_for "," channel_name ","ActionCable  server "]}," TestUnit Generators ChannelGenerator file_name":{"type":"method","name":"file_name","children":[],"call":[" sub "]}," TestUnit Generators ChannelGenerator create_test_files":{"type":"method","name":"create_test_files","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," ActionCable TestHelper broadcasts_size":{"type":"method","name":"broadcasts_size","children":[],"call":[" broadcasts size "," broadcasts "]}," ActionCable TestHelper pubsub_adapter":{"type":"method","name":"pubsub_adapter","children":[],"call":["ActionCable  server pubsub ","ActionCable  server "]}," ActionCable TestHelper assert_broadcast_on":{"type":"method","name":"assert_broadcast_on","children":[],"call":[" assert ","ActiveSupport JSON  decode == ","ActiveSupport JSON  decode ","new_messages find "," pubsub_adapter broadcast "," pubsub_adapter ","(send\n  (lvar :old_messages) :+\n  (lvar :new_messages)) each ","old_messages + "," clear_messages "," broadcasts "," block_given? ","ActiveSupport JSON  encode "," assert_nothing_raised "," _assert_nothing_raised_or_warn ","error_message + ","new_messages inject ","new_messages any? "," new_broadcasts_from "," broadcasts  find "," new_broadcasts_from  find ","(send\n  (lvar :old_messages) :+\n  (lvar : broadcasts )) each ","(send\n  (lvar :old_messages) :+\n  (lvar : new_broadcasts_from )) each "," broadcasts  inject "," new_broadcasts_from  inject "," broadcasts  any? "," new_broadcasts_from  any? "]}," ActionCable TestHelper assert_no_broadcasts":{"type":"method","name":"assert_no_broadcasts","children":[],"call":[" assert_broadcasts "]}," ActionCable TestHelper assert_broadcasts":{"type":"method","name":"assert_broadcasts","children":[],"call":[" assert_equal "," broadcasts_size ","new_count - "," block_given? "," assert_nothing_raised "," _assert_nothing_raised_or_warn "," broadcasts size "," broadcasts ","new_messages size "," new_broadcasts_from "," broadcasts_size  - "," new_broadcasts_from  size "]}," ActionCable TestHelper after_teardown":{"type":"method","name":"after_teardown","children":[],"call":["ActionCable  server instance_variable_set ","ActionCable  server "]}," ActionCable TestHelper before_setup":{"type":"method","name":"before_setup","children":[],"call":["server instance_variable_set ","server pubsub ","ActionCable SubscriptionAdapter Test  new ","ActionCable  server ","ActionCable  server  instance_variable_set ","ActionCable  server  pubsub ","ActionCable  ActionCable  server  "]}," ActionCable SubscriptionAdapter Test channels_data":{"type":"method","name":"channels_data","children":[],"call":[]}," ActionCable SubscriptionAdapter Test clear":{"type":"method","name":"clear","children":[],"call":[]}," ActionCable SubscriptionAdapter Test clear_messages":{"type":"method","name":"clear_messages","children":[],"call":[" channels_data []= "," channels_data "]}," ActionCable SubscriptionAdapter Test broadcasts":{"type":"method","name":"broadcasts","children":[],"call":[" channels_data [] "," channels_data "]}," ActionCable SubscriptionAdapter Test broadcast":{"type":"method","name":"broadcast","children":[],"call":[" broadcasts << "," broadcasts "]}," ActionCable SubscriptionAdapter PostgreSQL verify!":{"type":"method","name":"verify!","children":[],"call":[" raise ","pg_conn is_a? "]}," ActionCable SubscriptionAdapter PostgreSQL with_broadcast_connection":{"type":"method","name":"with_broadcast_connection","children":[],"call":[" verify! ","ar_conn raw_connection ","ActiveRecord Base  connection_pool with_connection ","ActiveRecord Base  connection_pool "]}," ActionCable SubscriptionAdapter PostgreSQL with_subscriptions_connection":{"type":"method","name":"with_subscriptions_connection","children":[],"call":["ar_conn disconnect! "," verify! ","ar_conn raw_connection ","ActiveRecord Base  connection_pool remove ","ActiveRecord Base  connection_pool ","ActiveRecord Base  connection_pool checkout tap ","ActiveRecord Base  connection_pool checkout ","pg_conn exec ","pg_conn escape_identifier "," identifier ","ar_conn raw_connection  exec ","ar_conn raw_connection  escape_identifier "]}," ActionCable Connection TestCase Behavior build_test_request":{"type":"method","name":"build_test_request","children":[],"call":["request cookie_jar= "," cookies ","request session= ","session with_indifferent_access ","TestRequest  create tap ","TestRequest  create ","ActionDispatch Http Headers  from_hash merge! ","ActionDispatch Http Headers  from_hash ","wrapped_headers present? ","(pair\n  (str \"QUERY_STRING\")\n  (lvar :query_string)) merge ","uri path ","params to_query ","uri query ","params nil? ","URI  parse ","ActionDispatch Http Headers  from_hash  present? ","(pair\n  (str \"QUERY_STRING\")\n  (lvar :params to_query )) merge ","(pair\n  (str \"QUERY_STRING\")\n  (lvar :uri query )) merge ","URI  parse  path ","URI  parse  query "]}," ActionCable Connection TestCase Behavior cookies":{"type":"method","name":"cookies","children":[],"call":["TestCookieJar  new "]}," ActionCable Connection TestCase Behavior disconnect":{"type":"method","name":"disconnect","children":[],"call":[" connection disconnect "," connection "," connection respond_to? "," raise "," connection nil? "]}," ActionCable Connection TestCase Behavior connect":{"type":"method","name":"connect","children":[],"call":["connection connect ","connection respond_to? ","connection send "," build_test_request ","connection singleton_class include ","connection singleton_class "," class connection_class allocate "," class connection_class "," class "," class connection_class allocate  connect "," class connection_class allocate  respond_to? "," class connection_class allocate  send "," class connection_class allocate  singleton_class include "," class connection_class allocate  singleton_class "," class  class connection_class allocate _class allocate "," class  class connection_class allocate _class "]}," ActionCable Connection TestCase Behavior ClassMethods determine_default_connection":{"type":"method","name":"determine_default_connection","children":[],"call":[" raise ","NonInferrableConnectionError  new ","connection nil? ","constant < ","Class  === "," determine_constant_from_test_name "]}," ActionCable Connection TestCase Behavior ClassMethods connection_class":{"type":"method","name":"connection_class","children":[],"call":[" tests "," determine_default_connection "," name "," _connection_class "," determine_default_ _connection_class  "," _ _connection_class _class "]}," ActionCable Connection TestCase Behavior ClassMethods tests":{"type":"method","name":"tests","children":[],"call":[" raise ","NonInferrableConnectionError  new "," _connection_class= ","connection to_s camelize constantize ","connection to_s camelize ","connection to_s "]}," ActionCable Connection TestConnection initialize":{"type":"method","name":"initialize","children":[],"call":["request env ","ActionCable Connection TaggedLoggerProxy  new ","ActiveSupport TaggedLogging  new ","ActiveSupport Logger  new ","StringIO  new "]}," ActionCable Connection TestCookieJar encrypted":{"type":"method","name":"encrypted","children":[],"call":[" with_indifferent_access "," [] "]}," ActionCable Connection TestCookieJar signed":{"type":"method","name":"signed","children":[],"call":[" with_indifferent_access "," [] "]}," ActionCable Connection Assertions assert_reject_connection":{"type":"method","name":"assert_reject_connection","children":[],"call":[" assert_raises "]}," ActionCable Connection NonInferrableConnectionError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"Unable to determine the connection to test from \") + + ","(str \"Unable to determine the connection to test from \") + "]}," ActionCable Channel TestCase Behavior broadcasting_for":{"type":"method","name":"broadcasting_for","children":[],"call":[" class channel_class broadcasting_for "," class channel_class "," class ","stream_or_object is_a? "," class channel_class channel_name "]}," ActionCable Channel TestCase Behavior check_subscribed!":{"type":"method","name":"check_subscribed!","children":[],"call":[" raise "," subscription rejected? "," subscription "," subscription nil? "]}," ActionCable Channel TestCase Behavior assert_has_stream_for":{"type":"method","name":"assert_has_stream_for","children":[],"call":[" assert_has_stream "," broadcasting_for "]}," ActionCable Channel TestCase Behavior assert_has_stream":{"type":"method","name":"assert_has_stream","children":[],"call":[" assert "," subscription streams include? "," subscription streams "," subscription "]}," ActionCable Channel TestCase Behavior assert_no_streams":{"type":"method","name":"assert_no_streams","children":[],"call":[" assert "," subscription streams count "," subscription streams "," subscription "," subscription streams empty? "]}," ActionCable Channel TestCase Behavior assert_broadcast_on":{"type":"method","name":"assert_broadcast_on","children":[],"call":[" broadcasting_for "]}," ActionCable Channel TestCase Behavior assert_broadcasts":{"type":"method","name":"assert_broadcasts","children":[],"call":[" broadcasting_for "]}," ActionCable Channel TestCase Behavior transmissions":{"type":"method","name":"transmissions","children":[],"call":["(send\n  (send\n    (send nil :connection) :transmissions) :map) compact ","data [] "," connection transmissions map "," connection transmissions "," connection "," connection transmissions filter_map "]}," ActionCable Channel TestCase Behavior perform":{"type":"method","name":"perform","children":[],"call":[" subscription perform_action ","data stringify_keys merge ","action to_s ","data stringify_keys "," subscription "," check_subscribed! "]}," ActionCable Channel TestCase Behavior unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" subscription unsubscribe_from_channel "," subscription "," check_subscribed! "]}," ActionCable Channel TestCase Behavior subscribe":{"type":"method","name":"subscribe","children":[],"call":["@subscription subscribe_to_channel ","@subscription singleton_class include ","@subscription singleton_class "," class channel_class new ","params with_indifferent_access "," connection "," class channel_class "," class "," stub_connection "," class channel_class new  subscribe_to_channel "," class channel_class new  singleton_class include "," class channel_class new  singleton_class "]}," ActionCable Channel TestCase Behavior stub_connection":{"type":"method","name":"stub_connection","children":[],"call":["ConnectionStub  new "]}," ActionCable Channel TestCase Behavior ClassMethods determine_default_channel":{"type":"method","name":"determine_default_channel","children":[],"call":[" raise ","NonInferrableChannelError  new ","channel nil? ","constant < ","Class  === "," determine_constant_from_test_name "]}," ActionCable Channel TestCase Behavior ClassMethods channel_class":{"type":"method","name":"channel_class","children":[],"call":[" tests "," determine_default_channel "," name "," _channel_class "," determine_default_ _channel_class  "," _ _channel_class _class "]}," ActionCable Channel TestCase Behavior ClassMethods tests":{"type":"method","name":"tests","children":[],"call":[" raise ","NonInferrableChannelError  new "," _channel_class= ","channel to_s camelize constantize ","channel to_s camelize ","channel to_s "]}," ActionCable Channel ConnectionStub transmit":{"type":"method","name":"transmit","children":[],"call":[" transmissions << ","cable_message with_indifferent_access "," transmissions "]}," ActionCable Channel ConnectionStub initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport TaggedLogging  new ","ActiveSupport Logger  new ","StringIO  new ","identifiers keys ","ActionCable Connection Subscriptions  new "," define_singleton_method ","identifiers each ","ActionCable  server "]}," ActionCable Channel ChannelStub start_periodic_timers":{"type":"method","name":"start_periodic_timers","children":[],"call":[]}," ActionCable Channel ChannelStub streams":{"type":"method","name":"streams","children":[],"call":[]}," ActionCable Channel ChannelStub stop_all_streams":{"type":"method","name":"stop_all_streams","children":[],"call":[]}," ActionCable Channel ChannelStub stream_from":{"type":"method","name":"stream_from","children":[],"call":[" streams << "," streams "]}," ActionCable Channel ChannelStub rejected?":{"type":"method","name":"rejected?","children":[],"call":[" subscription_rejected? "]}," ActionCable Channel ChannelStub confirmed?":{"type":"method","name":"confirmed?","children":[],"call":[" subscription_confirmation_sent? "]}," ActionCable Channel NonInferrableChannelError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"Unable to determine the channel to test from \") + + ","(str \"Unable to determine the channel to test from \") + "]}," ActionCable Channel Broadcasting ClassMethods serialize_broadcasting":{"type":"method","name":"serialize_broadcasting","children":[],"call":["object to_param ","object to_gid_param ","object respond_to? ","(send\n  (lvar :object) :map) join "," serialize_broadcasting ","object map ","object is_a? "]}," ActionCable SubscriptionAdapter Base identifier":{"type":"method","name":"identifier","children":[],"call":["@server config cable [] ","@server config cable ","@server config "]}," ActionCable Channel Streams stream_or_reject_for":{"type":"method","name":"stream_or_reject_for","children":[],"call":[" reject "," stream_for "]}," ActionCable Channel Streams stop_stream_for":{"type":"method","name":"stop_stream_for","children":[],"call":[" stop_stream_from "," broadcasting_for "]}," ActionCable Channel Streams stop_stream_from":{"type":"method","name":"stop_stream_from","children":[],"call":[" logger info "," class name "," class "," logger "," pubsub unsubscribe "," pubsub "," streams delete "," streams "]}," Rails Generators ChannelGenerator root":{"type":"method","name":"root","children":[],"call":[" Pathname "," destination_root "]}," Rails Generators ChannelGenerator using_importmap?":{"type":"method","name":"using_importmap?","children":[],"call":[" root join exist? "," root join "," root "]}," Rails Generators ChannelGenerator using_node?":{"type":"method","name":"using_node?","children":[],"call":[" root join exist? "," root join "," root "," root join exist? ! "," using_js_runtime? "]}," Rails Generators ChannelGenerator using_javascript?":{"type":"method","name":"using_javascript?","children":[],"call":[" root join exist? "," root join "," root "," options [] "," options "]}," Rails Generators ChannelGenerator first_setup_required?":{"type":"method","name":"first_setup_required?","children":[],"call":[" root join exist? ! "," root join exist? "," root join "," root "]}," Rails Generators ChannelGenerator pin_javascript_dependencies":{"type":"method","name":"pin_javascript_dependencies","children":[],"call":[" append_to_file "]}," Rails Generators ChannelGenerator install_javascript_dependencies":{"type":"method","name":"install_javascript_dependencies","children":[],"call":[" run "," say "," using_node? "," using_bun? "]}," Rails Generators ChannelGenerator import_channel_in_javascript_entrypoint":{"type":"method","name":"import_channel_in_javascript_entrypoint","children":[],"call":[" append_to_file "," file_name "," using_node? "," using_js_runtime? "]}," Rails Generators ChannelGenerator import_channels_in_javascript_entrypoint":{"type":"method","name":"import_channels_in_javascript_entrypoint","children":[],"call":[" append_to_file "," using_node? "," using_js_runtime? "]}," Rails Generators ChannelGenerator create_channel_javascript_file":{"type":"method","name":"create_channel_javascript_file","children":[],"call":[" gsub_file "," using_node? "," js_template ","File  join "," file_name "," class_path "," using_js_runtime? "]}," Rails Generators ChannelGenerator create_shared_channel_javascript_files":{"type":"method","name":"create_shared_channel_javascript_files","children":[],"call":[" template "]}," Rails Generators ChannelGenerator create_shared_channel_files":{"type":"method","name":"create_shared_channel_files","children":[],"call":[" copy_file "," __dir__ "," behavior != "," behavior "]}," Rails Generators ChannelGenerator create_channel_files":{"type":"method","name":"create_channel_files","children":[],"call":[" import_channel_in_javascript_entrypoint "," create_channel_javascript_file "," install_javascript_dependencies "," using_node? "," pin_javascript_dependencies "," using_importmap? "," import_channels_in_javascript_entrypoint "," create_shared_channel_javascript_files "," first_setup_required? "," using_javascript? "," create_channel_file "," create_shared_channel_files "," using_js_runtime? "]}," ActionCable Channel ConnectionStub connection_gid":{"type":"method","name":"connection_gid","children":[],"call":["(send\n  (lvar :ids) :map) sort join ","(send\n  (lvar :ids) :map) sort ","o to_s ","o to_gid_param ","o respond_to? ","ids map "]}," ActionCable Channel ConnectionStub connection_identifier":{"type":"method","name":"connection_identifier","children":[],"call":[" connection_gid "," send ","id to_sym "," identifiers filter_map "," identifiers "]}," ActionCable SubscriptionAdapter Redis Listener extract_subscribed_client":{"type":"method","name":"extract_subscribed_client","children":[],"call":["SubscribedClient  new ","conn client ","conn _client ","conn respond_to? "]}," ActionCable SubscriptionAdapter Redis Listener SubscribedClient send_command":{"type":"method","name":"send_command","children":[],"call":["very_raw_connection flush ","very_raw_connection respond_to? ","@raw_client connection instance_variable_get ","@raw_client connection ","@raw_client connection instance_variable_defined? ","@raw_client write "]}," ActionCable SubscriptionAdapter Redis Listener SubscribedClient unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" send_command "]}," ActionCable SubscriptionAdapter Redis Listener SubscribedClient subscribe":{"type":"method","name":"subscribe","children":[],"call":[" send_command "]}," ActionCable SubscriptionAdapter Redis Listener SubscribedClient initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActionCable SubscriptionAdapter Redis Listener reset":{"type":"method","name":"reset","children":[],"call":["@when_connected clear ","@subscribe_callbacks clear ","@subscription_lock synchronize "]}," ActionCable SubscriptionAdapter Redis Listener resubscribe":{"type":"method","name":"resubscribe","children":[],"call":["@subscribed_client subscribe ","channels empty? ","@subscribers keys ","@sync synchronize "]}," ActionCable SubscriptionAdapter Redis Listener retry_connecting?":{"type":"method","name":"retry_connecting?","children":[],"call":[" sleep ","sleep_t > ","@reconnect_attempts [] ","@reconnect_attempt - ","@reconnect_attempt > ","@reconnect_attempts size ","@reconnect_attempts []  > "]}," ActionCable SubscriptionAdapter Redis config_options":{"type":"method","name":"config_options","children":[],"call":["@server config cable symbolize_keys merge "," identifier ","@server config cable symbolize_keys ","@server config cable ","@server config ","@server config cable deep_symbolize_keys merge ","@server config cable deep_symbolize_keys "]}," Rails Generators ChannelGenerator using_bun?":{"type":"method","name":"using_bun?","children":[],"call":[" root join exist? "," root join "," root "," using_js_runtime? "]}," Rails Generators ChannelGenerator using_js_runtime?":{"type":"method","name":"using_js_runtime?","children":[],"call":[" root join exist? "," root join "," root "]}," ActionCable TestHelper new_broadcasts_from":{"type":"method","name":"new_broadcasts_from","children":[],"call":[" pubsub_adapter broadcast "," pubsub_adapter ","(send\n  (lvar :old_messages) :+\n  (lvar :new_messages)) each ","old_messages + "," clear_messages "," broadcasts "," _assert_nothing_raised_or_warn ","(send\n  (lvar :old_messages) :+\n  (lvar : broadcasts )) each "]}," ActionCable TestHelper capture_broadcasts":{"type":"method","name":"capture_broadcasts","children":[],"call":["ActiveSupport JSON  decode "," new_broadcasts_from map "," new_broadcasts_from "," broadcasts "]}," ActionCable deprecator":{"type":"method","name":"deprecator","children":[],"call":[]}," ActionCable Connection Callbacks ClassMethods around_command":{"type":"method","name":"around_command","children":[],"call":[" set_callback "]}," ActionCable Connection Callbacks ClassMethods after_command":{"type":"method","name":"after_command","children":[],"call":[" set_callback "]}," ActionCable Connection Callbacks ClassMethods before_command":{"type":"method","name":"before_command","children":[],"call":[" set_callback "]}," ActionCable Connection Base inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActionCable Connection Base handle_channel_command":{"type":"method","name":"handle_channel_command","children":[],"call":[" subscriptions execute_command "," subscriptions "," run_callbacks "]}," ActionCable Channel Base parameter_filter":{"type":"method","name":"parameter_filter","children":[],"call":["ActiveSupport ParameterFilter  new "," connection config filter_parameters "," connection config "," connection "]}}