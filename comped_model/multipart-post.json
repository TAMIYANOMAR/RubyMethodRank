{" Net HTTP Post Multipart initialize":{"type":"method","name":"initialize","children":[],"call":[" body_stream= ","CompositeReadIO  new "," content_length= ","sum + ","i length ","parts inject "," set_content_type ","p to_io ","parts map ","parts << ","EpiloguePart  new ","Part  new ","params map "]}," Net HTTP Post EpiloguePart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "]}," Net HTTP Post FilePart build_head":{"type":"method","name":"build_head","children":[],"call":["part << ","name to_s "]}," Net HTTP Post FilePart initialize":{"type":"method","name":"initialize","children":[],"call":["CompositeReadIO  new ","StringIO  new ","@head length + ","@head length ","File  size ","io local_path ","io length ","io respond_to? "," build_head ","io content_type ","io original_filename "," build_head  length + "," build_head  length "]}," Net HTTP Post ParamPart build_part":{"type":"method","name":"build_part","children":[],"call":["part << ","name to_s "]}," Net HTTP Post ParamPart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "," build_part "]}," Net HTTP Post Part to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Net HTTP Post Part length":{"type":"method","name":"length","children":[],"call":["@part length "]}," Net HTTP Post Part new":{"type":"method","name":"new","children":[],"call":[]}," UploadIO convert!":{"type":"method","name":"convert!","children":[],"call":[]}," UploadIO new":{"type":"method","name":"new","children":[],"call":[]}," CompositeReadIO read":{"type":"method","name":"read","children":[],"call":["buffer length > ","buffer length ","result == ","partial_amount <= ","result length ","result != ","buffer << ","@ios shift ","(lvasgn :result\n  (send\n    (send\n      (ivar :@ios) :first) :read\n    (lvar :partial_amount))) == ","@ios first read ","@ios first ","@ios empty? ! ","@ios empty? "," loop ","result force_encoding ","result respond_to? ","parts shift ","(lvasgn :result\n  (send\n    (send\n      (lvar :parts) :first) :read\n    (lvar :partial_amount))) == ","parts first read ","parts first ","parts empty? ! ","parts empty? ","@ios dup ","got_result ! "," advance_io ","length == ","outbuf << ","result nil? ! ","result nil? ","io read "," current_io ","outbuf replace ","@ios first read  == ","parts first read  == ","io read  == ","@ios first read  length ","parts first read  length ","io read  length ","@ios first read  != ","parts first read  != ","io read  != ","@ current_io s shift ","(lvasgn :@ios first read \n  (send\n    (send\n      (ivar :@ios) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :parts first read \n  (send\n    (send\n      (ivar :@ios) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :io read \n  (send\n    (send\n      (ivar :@ios) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :result\n  (send\n    (send\n      (ivar :@ current_io s) :first) :read\n    (lvar :partial_amount))) == ","@ current_io s first read ","@ current_io s first ","@ current_io s empty? ! ","@ current_io s empty? ","@ios first read  force_encoding ","parts first read  force_encoding ","io read  force_encoding ","@ios first read  respond_to? ","parts first read  respond_to? ","io read  respond_to? ","@ios dup  shift ","(lvasgn :@ios first read \n  (send\n    (send\n      (lvar :parts) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :parts first read \n  (send\n    (send\n      (lvar :parts) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :io read \n  (send\n    (send\n      (lvar :parts) :first) :read\n    (lvar :partial_amount))) == ","(lvasgn :result\n  (send\n    (send\n      (lvar :@ios dup ) :first) :read\n    (lvar :partial_amount))) == ","@ios dup  first read ","@ios dup  first ","@ios dup  empty? ! ","@ios dup  empty? ","@ current_io s dup ","got_@ios first read  ! ","got_parts first read  ! ","got_io read  ! "," advance_ current_io  ","outbuf replace  << ","@ios first read  nil? ! ","parts first read  nil? ! ","io read  nil? ! ","@ios first read  nil? ","parts first read  nil? ","io read  nil? "," current_io  read "," current_ current_io  ","outbuf replace  replace "]}," CompositeReadIO initialize":{"type":"method","name":"initialize","children":[],"call":["ios flatten "]}," Parts EpiloguePart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "]}," Parts FilePart build_head":{"type":"method","name":"build_head","children":[],"call":["part << ","name to_s ","opts [] ","Content-Type:  + + ","Content-Type:  + ","headers [] ","headers [] != ","opts each ","opts [] != ","opts delete ","opts clone ","opts clone  [] ","opts clone  each ","opts clone  [] != ","opts clone  delete ","opts clone  clone "]}," Parts FilePart initialize":{"type":"method","name":"initialize","children":[],"call":["CompositeReadIO  new ","StringIO  new ","@head length + ","@head length "," build_head ","io content_type ","io original_filename ","File  size ","io local_path ","io length ","io respond_to? ","@head length + + ","@foot length ","io opts ","@head bytesize + + ","@head bytesize + ","@head bytesize ","io opts merge "," build_head  length + "," build_head  length "," build_head  length + + "," build_head  bytesize + + "," build_head  bytesize + "," build_head  bytesize "]}," Parts ParamPart build_part":{"type":"method","name":"build_part","children":[],"call":["part << ","name to_s ","headers [] "]}," Parts ParamPart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "," build_part "]}," Parts Part to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Parts Part length":{"type":"method","name":"length","children":[],"call":["@part length "]}," Parts Part new":{"type":"method","name":"new","children":[],"call":[]}," Multipartable initialize":{"type":"method","name":"initialize","children":[],"call":[" body_stream= ","CompositeReadIO  new "," content_length= ","sum + ","i length ","parts inject "," set_content_type ","p to_io ","parts map ","parts << ","Parts EpiloguePart  new ","Parts Part  new ","params map ","headers [] ","(send\n  (lvar :params) :map) flatten ","parts_headers [] ","v map ","headers delete ","headers clone ","(send\n  (lvar :params) :map) flatten  inject ","(send\n  (lvar :params) :map) flatten  map ","(send\n  (lvar :params) :map) flatten  << ","headers clone  [] ","(send\n  (lvar :params) :map) flatten _headers [] ","parts_headers clone  [] ","headers clone  delete ","headers clone  clone "]}," UploadIO respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@io respond_to? "]}," UploadIO method_missing":{"type":"method","name":"method_missing","children":[],"call":["@io send "]}," UploadIO initialize":{"type":"method","name":"initialize","children":[],"call":["File  basename ","File  open ","filename_or_io path ","io respond_to? ","filename_or_io respond_to? ","filename_or_File  open  path ","File  open  respond_to? ","filename_or_File  open  respond_to? "]}," Parts ParamPart length":{"type":"method","name":"length","children":[],"call":["@part bytesize "]}," CompositeReadIO rewind":{"type":"method","name":"rewind","children":[],"call":["io rewind ","@ios each "]}," CompositeReadIO advance_io":{"type":"method","name":"advance_io","children":[],"call":[]}," CompositeReadIO current_io":{"type":"method","name":"current_io","children":[],"call":["@ios [] "]}," Parts Part file?":{"type":"method","name":"file?","children":[],"call":[]}," Multipartable secure_boundary":{"type":"method","name":"secure_boundary","children":[],"call":[]}," Multipart Post UploadIO respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@io respond_to? "]}," Multipart Post UploadIO method_missing":{"type":"method","name":"method_missing","children":[],"call":["@io send "]}," Multipart Post UploadIO convert!":{"type":"method","name":"convert!","children":[],"call":[]}," Multipart Post UploadIO initialize":{"type":"method","name":"initialize","children":[],"call":["File  basename ","File  open ","filename_or_io path ","filename_or_io respond_to? ","io respond_to? ","filename_or_File  open  path ","filename_or_File  open  respond_to? ","File  open  respond_to? "]}," Multipart Post Parts EpiloguePart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new ","String  new "]}," Multipart Post Parts FilePart build_head":{"type":"method","name":"build_head","children":[],"call":["part << ","opts each ","Content-Type:  + + ","Content-Type:  + ","opts [] ","opts [] != ","opts delete ","name to_s ","String  new ","opts clone ","String  new  << ","opts clone  each ","opts clone  [] ","opts clone  [] != ","opts clone  delete ","opts clone  clone "]}," Multipart Post Parts FilePart initialize":{"type":"method","name":"initialize","children":[],"call":["CompositeReadIO  new ","StringIO  new ","@head bytesize + + ","@foot length ","@head bytesize + ","@head bytesize "," build_head ","io opts merge ","io opts ","io respond_to? ","io content_type ","io original_filename ","File  size ","io local_path ","io length "," build_head  bytesize + + "," build_head  bytesize + "," build_head  bytesize "]}," Multipart Post Parts ParamPart build_part":{"type":"method","name":"build_part","children":[],"call":["part << ","headers [] ","name to_s ","String  new ","String  new  << "]}," Multipart Post Parts ParamPart length":{"type":"method","name":"length","children":[],"call":["@part bytesize "]}," Multipart Post Parts ParamPart initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "," build_part "]}," Multipart Post Parts Part to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Multipart Post Parts Part length":{"type":"method","name":"length","children":[],"call":["@part length "]}," Multipart Post Parts Part file?":{"type":"method","name":"file?","children":[],"call":[]}," Multipart Post Parts Part new":{"type":"method","name":"new","children":[],"call":[]}," Multipart Post Multipartable initialize":{"type":"method","name":"initialize","children":[],"call":[" body_stream= ","CompositeReadIO  new "," content_length= ","sum + ","i length ","parts inject "," set_content_type ","headers [] ","p to_io ","parts map ","parts << ","Parts EpiloguePart  new ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten ","Parts Part  new ","parts_headers [] ","v map ","params transform_keys map ","params transform_keys ","parts_headers transform_keys! ","headers delete ","headers clone ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten "," symbolize_keys map "," symbolize_keys ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten  inject ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten  inject ","headers clone  [] ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten  map ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten  map ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten  << ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten  << ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten _headers [] ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten _headers [] ","parts_headers clone  [] "," symbolize_keys  [] ","(send\n  (send\n    (lvar :params) :transform_keys\n    (block-pass\n      (sym :to_sym))) :map) flatten _headers transform_keys! ","(send\n  (send nil :symbolize_keys\n    (lvar :params)) :map) flatten _headers transform_keys! ","parts_headers clone  transform_keys! "," symbolize_keys  transform_keys! ","headers clone  delete ","headers clone  clone "]}," Multipart Post Multipartable secure_boundary":{"type":"method","name":"secure_boundary","children":[],"call":[]}," Multipart Post CompositeReadIO advance_io":{"type":"method","name":"advance_io","children":[],"call":[]}," Multipart Post CompositeReadIO current_io":{"type":"method","name":"current_io","children":[],"call":["@ios [] "]}," Multipart Post CompositeReadIO rewind":{"type":"method","name":"rewind","children":[],"call":["io rewind ","@ios each "]}," Multipart Post CompositeReadIO read":{"type":"method","name":"read","children":[],"call":["got_result ! "," advance_io ","length == ","result length ","outbuf << ","result force_encoding ","result respond_to? ","result nil? ! ","result nil? ","io read "," current_io ","String  new ","outbuf replace ","got_io read  ! "," advance_ current_io  ","io read  length ","String  new  << ","outbuf replace  << ","io read  force_encoding ","io read  respond_to? ","io read  nil? ! ","io read  nil? "," current_io  read "," current_ current_io  ","String  new  replace ","outbuf replace  replace "]}," Multipart Post CompositeReadIO initialize":{"type":"method","name":"initialize","children":[],"call":["ios flatten "]}," Multipart Post Multipartable symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["(send\n  (lvar :hash) :map) to_h ","key to_sym ","hash map ","hash transform_keys "]}}