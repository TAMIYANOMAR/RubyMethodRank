{" AST Sexp s":{"type":"method","name":"s","children":[],"call":["Node  new "]}," AST Processor handler_missing":{"type":"method","name":"handler_missing","children":[],"call":[]}," AST Processor process_all":{"type":"method","name":"process_all","children":[],"call":[" process ","nodes to_a map ","nodes to_a "]}," AST Processor process":{"type":"method","name":"process","children":[],"call":[" handler_missing "," send "," respond_to? ","node type ","node to_ast ","node nil? ","node to_ast  type ","node to_ast  to_ast ","node to_ast  nil? "]}," AST Node fancy_type":{"type":"method","name":"fancy_type","children":[],"call":["@type to_s gsub ","@type to_s "]}," AST Node to_ast":{"type":"method","name":"to_ast","children":[],"call":[]}," AST Node to_sexp":{"type":"method","name":"to_sexp","children":[],"call":["sexp << ","child inspect ","child to_sexp ","indent + ","idx >= ","child is_a? "," children each_with_index "," children "," children count "," children index "," fancy_type ","   * "," children each "]}," AST Node to_a":{"type":"method","name":"to_a","children":[],"call":[" children "]}," AST Node to_s":{"type":"method","name":"to_s","children":[],"call":[" fancy_type "]}," AST Node append":{"type":"method","name":"append","children":[],"call":[" updated ","@children + "]}," AST Node concat":{"type":"method","name":"concat","children":[],"call":[" updated ","@children + ","array to_a "]}," AST Node ==":{"type":"method","name":"==","children":[],"call":["other children == "," children ","other children ","other type == "," type ","other type ","other to_ast ","other respond_to? "," equal? ","other to_ast  children == ","other to_ast  children ","other to_ast  type == ","other to_ast  type ","other to_ast  to_ast ","other to_ast  respond_to? "]}," AST Node updated":{"type":"method","name":"updated","children":[],"call":[" original_dup send "," original_dup ","properties nil? ","@children == ","@type == ","copy send "," original_dup  send "]}," AST Node dup":{"type":"method","name":"dup","children":[],"call":[]}," AST Node assign_properties":{"type":"method","name":"assign_properties","children":[],"call":[" instance_variable_set ","properties each "]}," AST Node initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze "," assign_properties ","children to_a freeze ","children to_a ","type to_sym ","(ivar :@type) hash "," class "]}," AST Node eql?":{"type":"method","name":"eql?","children":[],"call":["@children eql? ","other children ","@type eql? ","other type "," class eql? ","other class "," class "]}," AST Processor Mixin handler_missing":{"type":"method","name":"handler_missing","children":[],"call":[]}," AST Processor Mixin process_all":{"type":"method","name":"process_all","children":[],"call":[" process ","nodes to_a map ","nodes to_a "]}," AST Processor Mixin process":{"type":"method","name":"process","children":[],"call":[" handler_missing "," send "," respond_to? ","node type ","node to_ast ","node nil? ","node to_ast  type ","node to_ast  to_ast ","node to_ast  nil? "]}," AST Node inspect":{"type":"method","name":"inspect","children":[],"call":["sexp << ","child inspect ","indent + ","idx >= ","child is_a? "," children each_with_index "," children "," children count "," children index ","   * "," children each "]}," AST Node to_sexp_array":{"type":"method","name":"to_sexp_array","children":[],"call":[" type ","child to_sexp_array ","child is_a? "," children map "," children "]}," AST Node deconstruct":{"type":"method","name":"deconstruct","children":[],"call":[" children "," type "]}}