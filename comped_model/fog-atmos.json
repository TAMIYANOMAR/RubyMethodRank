{" Fog Storage Atmos Real request":{"type":"method","name":"request","children":[],"call":["response body= ","document body ","parser finish ","parser << ","response body ","Nokogiri XML SAX PushParser  new ","Fog ToHashDocument  new ","response body empty? "," raise ","Fog Storage Atmos NotFound  slurp ","@connection request ","params delete ","params [] []= ","params [] ","Base64  encode64 chomp ","Base64  encode64 ","@hmac sign ","signstring chomp ","key + + + ","key + + ","value strip chomp squeeze ","value strip chomp ","value strip ","key + ","header_arr each ","customheaders sort ","customheaders []= ","key downcase ","params [] each ","? + ","query_str empty? ","(send\n  (send\n    (lvar :params) :[]\n    (sym :query)) :map) join ","params [] map ","/rest/ + ","URI  unescape downcase ","URI  unescape ","params [] [] ","Time  now httpdate ","Time  now ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","params merge! ","@connection request  body= ","Fog ToHashDocument  new  body ","Nokogiri XML SAX PushParser  new  finish ","params delete r finish ","Nokogiri XML SAX PushParser  new  << ","params delete r << ","@connection request  body ","@connection request  body empty? ","(pair\n  (sym :method)\n  (str \"GET\")) merge  delete ","(pair\n  (sym :method)\n  (str \"GET\")) merge  [] []= ","(pair\n  (sym :method)\n  (str \"GET\")) merge  [] ","customheaders sort  each ","(pair\n  (sym :method)\n  (str \"GET\")) merge  [] each ","(send\n  (send\n    (lvar :params) :[]\n    (sym :query)) :map) join  empty? ","(send\n  (send\n    (lvar :(pair\n  (sym :method)\n  (str \"GET\")) merge ) :[]\n    (sym :query)) :map) join ","(pair\n  (sym :method)\n  (str \"GET\")) merge  [] map ","(pair\n  (sym :method)\n  (str \"GET\")) merge  [] [] ","(pair\n  (sym :method)\n  (str \"GET\")) merge  merge! "]}," Fog Storage Atmos Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog Storage Atmos Real sign":{"type":"method","name":"sign","children":[],"call":["Base64  encode64 chomp ","Base64  encode64 ","@hmac sign "]}," Fog Storage Atmos Real uid":{"type":"method","name":"uid","children":[],"call":[]}," Fog Storage Atmos Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options fetch ","Fog HMAC  new ","options [] "," setup_credentials "]}," Fog Storage Atmos Mock request":{"type":"method","name":"request","children":[],"call":[" raise "]}," Fog Storage Atmos Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials "]}," Fog Storage Atmos Utils setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":[" api_path "," port "," host "," ssl? ","options [] ","Base64  decode64 "]}," Fog Storage Atmos Utils api_path":{"type":"method","name":"api_path","children":[],"call":["@endpoint match [] ","@endpoint match "]}," Fog Storage Atmos Utils host":{"type":"method","name":"host","children":[],"call":["@endpoint match [] ","@endpoint match "]}," Fog Storage Atmos Utils port":{"type":"method","name":"port","children":[],"call":["port split [] to_i ","port split [] ","port split "," ssl? ","port nil? ","@endpoint match [] ","@endpoint match ","@endpoint match []  split [] to_i ","@endpoint match []  split [] ","@endpoint match []  split ","@endpoint match []  nil? "]}," Fog Storage Atmos Utils ssl?":{"type":"method","name":"ssl?","children":[],"call":[" raise ","protocol == ","protocol nil? ","@endpoint match [] ","@endpoint match ","@endpoint match []  == ","@endpoint match []  nil? "]}," Fog Storage Atmos Real put_namespace":{"type":"method","name":"put_namespace","children":[],"call":[" request ","(pair\n  (sym :expects)\n  (int 200)) merge ","namespace/ + ","value nil? ","options reject "]}," Fog Storage Atmos Real post_namespace":{"type":"method","name":"post_namespace","children":[],"call":[" request ","(pair\n  (sym :expects)\n  (int 201)) merge ","namespace/ + ","value nil? ","options reject "]}," Fog Storage Atmos Real head_namespace":{"type":"method","name":"head_namespace","children":[],"call":[" request ","(pair\n  (sym :expects)\n  (int 200)) merge ","namespace/ + ","URI  escape ","value nil? ","options reject "]}," Fog Storage Atmos Real get_namespace":{"type":"method","name":"get_namespace","children":[],"call":[" request ","(pair\n  (sym :expects)\n  (int 200)) merge ","namespace/ + ","URI  escape ","options []= ","Proc  new "," block_given? ","value nil? ","options reject "]}," Fog Storage Atmos Real delete_namespace":{"type":"method","name":"delete_namespace","children":[],"call":[" request ","(pair\n  (sym :expects)\n  (int 204)) merge ","namespace/ + ","value nil? ","options reject "]}," Fog Storage Atmos Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog Storage Atmos Files head":{"type":"method","name":"head","children":[],"call":[" new ","data headers merge ","data body ","data headers "," service head_namespace "," directory key + "," directory key "," directory "," service "," requires "," service head_namespace  headers merge "," service head_namespace  body "," service head_namespace  headers "]}," Fog Storage Atmos Files get_url":{"type":"method","name":"get_url","children":[],"call":[" directory public_url "," directory "," requires "]}," Fog Storage Atmos Files get":{"type":"method","name":"get","children":[],"call":[" new ","data headers merge ","data body ","data headers "," service get_namespace "," directory key + "," directory key "," directory "," service "," requires "," service get_namespace  headers merge "," service get_namespace  body "," service get_namespace  headers "]}," Fog Storage Atmos Files all":{"type":"method","name":"all","children":[],"call":[" load ","s []= "," directory ","headers [] ","data headers [] ","data headers ","Hash  [] ","s split ","data headers [] split map ","data headers [] split "," service head_namespace "," directory key + ","s [] "," directory key "," service ","files each ","de [] == ","de [] ","data [] select ","data [] ","data []= ","data [] kind_of? ","data kind_of? "," service get_namespace body [] "," service get_namespace body "," service get_namespace ","ns + ","ns =~ "," requires ","Hash  []  [] ","data Hash  []  [] "," service head_namespace  headers [] "," service get_namespace body []  headers [] ","data Hash  []  "," service head_namespace  headers "," service get_namespace body []  headers ","data Hash  []  [] split map "," service head_namespace  headers [] split map "," service get_namespace body []  headers [] split map ","data Hash  []  [] split "," service head_namespace  headers [] split "," service get_namespace body []  headers [] split "," service head_namespace  [] select "," service get_namespace body []  [] select "," service head_namespace  [] "," service get_namespace body []  [] "," service head_namespace  []= "," service get_namespace body []  []= "," service head_namespace  [] kind_of? "," service get_namespace body []  [] kind_of? "," service head_namespace  kind_of? "," service get_namespace body []  kind_of? ","ns +  + "," directory key  + ","ns +  =~ "," directory key  =~ "]}," Fog Storage Atmos File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog Storage Atmos File save":{"type":"method","name":"save","children":[],"call":[" raise "," service put_namespace "," service ","error message =~ ","error message "," objectid= ","data headers [] split [] ","data headers [] split ","data headers [] ","data headers "," service post_namespace ","options []= "," body ","options [] []= "," content_type ","options [] "," key "," directory "," directory key "," directory kind_of? "," requires "," service put_namespace  headers [] split [] "," service post_namespace  headers [] split [] "," service put_namespace  headers [] split "," service post_namespace  headers [] split "," service put_namespace  headers [] "," service post_namespace  headers [] "," service put_namespace  headers "," service post_namespace  headers ","optio directory  []= ","optio directory key  []= ","optio directory  [] []= ","optio directory key  [] []= ","optio directory  [] ","optio directory key  [] "]}," Fog Storage Atmos File public_url":{"type":"method","name":"public_url","children":[],"call":["uri to_s ","uri query= ","CGI  escape ","expires to_i "," service uid "," service "," service sign "," String "," service uid + ","uri path downcase + ","uri path downcase ","uri path ","klass build "," objectid "," service port to_i "," service port "," service host "," service ssl? "," objectid to_s strip != "," objectid to_s strip "," objectid to_s "," objectid= ","file attributes [] scan flatten [] ","file attributes [] scan flatten ","file attributes [] scan ","file attributes [] ","file attributes ","file to_s strip != ","file to_s strip ","file to_s "," directory files head "," key "," directory files "," directory ","klass build  to_s ","klass build  query= ","klass build  path downcase + ","klass build  path downcase ","klass build  path "," directory files head  attributes [] scan flatten [] "," directory files head  attributes [] scan flatten "," directory files head  attributes [] scan "," directory files head  attributes [] "," directory files head  attributes "," directory files head  to_s strip != "," directory files head  to_s strip "," directory files head  to_s "," directory  directory files head s head "," directory  directory files head s "]}," Fog Storage Atmos File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Storage Atmos File file_size":{"type":"method","name":"file_size","children":[],"call":[" meta_data headers [] match to_s gsub "," meta_data headers [] match to_s "," meta_data headers [] match "," meta_data headers [] "," meta_data headers "," meta_data "," meta_ meta_data  headers [] match to_s gsub "," meta_ meta_data  headers [] match to_s "," meta_ meta_data  headers [] match "," meta_ meta_data  headers [] "," meta_ meta_data  headers "," meta_ meta_data  "]}," Fog Storage Atmos File meta_data":{"type":"method","name":"meta_data","children":[],"call":[" service get_namespace ","(send\n  (send nil :directory) :key) join + ","(send\n  (send nil :directory) :key) join "," key "," directory key "," directory "," service "," requires "]}," Fog Storage Atmos File destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_namespace ","(send\n  (send nil :directory) :key) join "," key "," directory key "," directory "," service "," requires "]}," Fog Storage Atmos File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files create "," body ","target_directory files "," service directories new "," service directories "," service "," service directories new  files create "," service directories new  files "]}," Fog Storage Atmos File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog Storage Atmos File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog Storage Atmos File body":{"type":"method","name":"body","children":[],"call":[" collection get body "," collection get "," identity "," collection "," objectid "," attributes [] "," attributes "]}," Fog Storage Atmos Directory destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_namespace "," key "," service ","d destroy ","f destroy ","d files each ","d files "," directories each "," directories "," files each "," files ","opts [] "]}," Fog Storage Atmos Directory save":{"type":"method","name":"save","children":[],"call":[" reload "," service post_namespace "," key "," service "," key= "," key + "," key =~ "," attributes [] key + "," attributes [] key "," attributes [] "," attributes "]}," Fog Storage Atmos Directory directories":{"type":"method","name":"directories","children":[],"call":["Fog Storage Atmos Directories  new "," service "]}," Fog Storage Atmos Directory files":{"type":"method","name":"files","children":[],"call":["Fog Storage Atmos Files  new "," service "]}," Fog Storage Atmos Directories new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge "," directory "]}," Fog Storage Atmos Directories get":{"type":"method","name":"get","children":[],"call":[" new ","emc_meta scan flatten [] ","emc_meta scan flatten ","emc_meta scan ","res headers [] ","res headers "," service get_namespace "," service ","key + ","key =~ ","key == ","res headers []  scan flatten [] ","res headers []  scan flatten ","res headers []  scan "," service get_namespace  headers [] "," service get_namespace  headers "]}," Fog Storage Atmos Directories all":{"type":"method","name":"all","children":[],"call":[" load ","d [] ","d [] =~ ","d []= ","ns + "," directory ","dirs each ","de [] == ","de [] ","data [] select ","data [] ","data []= ","data [] kind_of? ","data kind_of? "," service get_namespace body [] "," service get_namespace body "," service get_namespace "," service ","ns =~ "," directory key ","ns +  + "," directory key  + "," service get_namespace body []  [] select "," service get_namespace body []  [] "," service get_namespace body []  []= "," service get_namespace body []  [] kind_of? "," service get_namespace body []  kind_of? ","ns +  =~ "," directory key  =~ "]}," Atmos services":{"type":"method","name":"services","children":[],"call":["Fog Atmos  services "]}," Atmos []":{"type":"method","name":"[]","children":[],"call":["@@connections [] ","hash []= "," raise ","Fog Storage  new ","Fog Logger  warning ","Hash  new "]}," Atmos class_for":{"type":"method","name":"class_for","children":[],"call":[" raise "]}}