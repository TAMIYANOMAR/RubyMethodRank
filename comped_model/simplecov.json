{" SimpleCov usable?":{"type":"method","name":"usable?","children":[],"call":[" require ","@usable nil? ! ","@usable nil? "," warn ","1.9 respond_to? "]}," SimpleCov load_adapter":{"type":"method","name":"load_adapter","children":[],"call":[" load_profile "," warn ","Kernel  caller first ","Kernel  caller "," adapters load "," adapters "]}," SimpleCov load_profile":{"type":"method","name":"load_profile","children":[],"call":[" profiles load "," profiles "]}," SimpleCov grouped":{"type":"method","name":"grouped","children":[],"call":["grouped []= ","SimpleCov FileList  new ","(lvasgn :other_files\n  (block\n    (send\n      (lvar :files) :reject)\n    (args\n      (arg :source_file))\n    (send\n      (lvar :grouped_files) :include?\n      (lvar :source_file)))) length > ","(lvasgn :other_files\n  (block\n    (send\n      (lvar :files) :reject)\n    (args\n      (arg :source_file))\n    (send\n      (lvar :grouped_files) :include?\n      (lvar :source_file)))) length ","grouped_files include? ","files reject "," groups length > "," groups length "," groups ","grouped [] ","filter matches? ","files select "," groups each ","(lvasgn :other_files\n  (block\n    (send\n      (lvar :files) :reject)\n    (args\n      (arg :source_file))\n    (send\n      (lvar :grouped_files) :include?\n      (lvar :source_file)))) empty? ! ","(lvasgn :other_files\n  (block\n    (send\n      (lvar :files) :reject)\n    (args\n      (arg :source_file))\n    (send\n      (lvar :grouped_files) :include?\n      (lvar :source_file)))) empty? "," groups empty? ! "," groups empty? ","filter passes? ! ","filter passes? "]}," SimpleCov filtered":{"type":"method","name":"filtered","children":[],"call":["SimpleCov FileList  new ","filter matches? ","result reject "," filters each "," filters ","files clone ","filter passes? ","result select ","files clone  reject ","files clone  select "]}," SimpleCov result?":{"type":"method","name":"result?","children":[],"call":[]}," SimpleCov result":{"type":"method","name":"result","children":[],"call":[" running= ","SimpleCov ResultMerger  merged_result ","SimpleCov ResultMerger  store_result "," use_merging ","SimpleCov Result  new ","Coverage  result "," running "," add_not_loaded_files "," result? "," result? ! "," wait_for_other_processes "," process_coverage_result ","lockfile lock "," Lockfile  new ","ResultMerger  resultset_path + ","ResultMerger  resultset_path "," Lockfile  new  lock "]}," SimpleCov start":{"type":"method","name":"start","children":[],"call":[" warn ","Coverage  start "," pid= ","Process  pid "," running= "," configure "," block_given? "," load_profile ","SimpleCov  usable? "," start_coverage_measurement "," initial_setup "," require "," start_coverage_measurment "," make_parallel_tests_available "," require_relative ","SimpleCov  enabled_for_subprocesses? "," Process  respond_to? "," load_adapter ","adapter nil? ","1.9 respond_to? "]}," SimpleCov pre":{"type":"method","name":"pre","children":[],"call":[]}," SimpleCov patch":{"type":"method","name":"patch","children":[],"call":[]}," SimpleCov minor":{"type":"method","name":"minor","children":[],"call":[]}," SimpleCov major":{"type":"method","name":"major","children":[],"call":[]}," SimpleCov to_a":{"type":"method","name":"to_a","children":[],"call":[]}," SimpleCov SourceFile round_float":{"type":"method","name":"round_float","children":[],"call":[" Float ","(send\n  (lvar :float) :*\n  (lvar :factor)) round / ","(send\n  (lvar :float) :*\n  (lvar :factor)) round ","float * ","10 * ","(send\n  (int 10) :*\n  (lvar :places)) to_f ","(send\n  (lvar :float) :*\n  (lvar : Float )) round / ","(send\n  (lvar :float) :*\n  (lvar :(send\n  (int 10) :*\n  (lvar :places)) to_f )) round / ","(send\n  (lvar :float) :*\n  (lvar : Float )) round ","(send\n  (lvar :float) :*\n  (lvar :(send\n  (int 10) :*\n  (lvar :places)) to_f )) round "]}," SimpleCov SourceFile process_skipped_lines!":{"type":"method","name":"process_skipped_lines!","children":[],"call":["line skipped! ","skipping ! ","line src =~ ","SimpleCov  nocov_token ","line src "," lines each "," lines ","skipping !  ! "]}," SimpleCov SourceFile lines_of_code":{"type":"method","name":"lines_of_code","children":[],"call":[" covered_lines count + "," missed_lines count "," missed_lines "," covered_lines count "," covered_lines "," covered_lines size + "," missed_lines size "," covered_lines size "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov SourceFile skipped_lines":{"type":"method","name":"skipped_lines","children":[],"call":[" lines select "," lines ","c skipped? "]}," SimpleCov SourceFile never_lines":{"type":"method","name":"never_lines","children":[],"call":[" lines select "," lines ","c never? "]}," SimpleCov SourceFile missed_lines":{"type":"method","name":"missed_lines","children":[],"call":[" lines select "," lines ","c missed? "]}," SimpleCov SourceFile covered_lines":{"type":"method","name":"covered_lines","children":[],"call":[" lines select "," lines ","c covered? "]}," SimpleCov SourceFile covered_strength":{"type":"method","name":"covered_strength","children":[],"call":[" round_float ","lines_strength / ","effective_lines_count zero? "," Float "," lines count - - "," skipped_lines count "," skipped_lines "," lines count - "," never_lines count "," never_lines "," lines count "," lines ","c coverage "," lines each "," lines length == "," lines length "," lines length zero? "," lines_strength / "," relevant_lines to_f "," relevant_lines "," lines_strength "," no_lines? "," relevant_lines zero? "," coverage_statistics [] "," coverage_statistics ","(send\n  (send nil :lines_strength) :/\n  (send\n    (send nil :relevant_lines) :to_f)) round ","(send\n  (send\n    (send\n      (send nil :lines) :count) :-\n    (send\n      (send nil :never_lines) :count)) :-\n  (send\n    (send nil :skipped_lines) :count)) to_f ","effective_lines_count == ","lines_lines_strength /  / "," Float  zero? ","(send\n  (send\n    (send\n      (send nil :lines) :count) :-\n    (send\n      (send nil :never_lines) :count)) :-\n  (send\n    (send nil :skipped_lines) :count)) to_f  zero? "," lines_lines_strength /  / "," lines_lines_strength /  ","(send\n  (send nil :lines_lines_strength / ) :/\n  (send\n    (send nil :relevant_lines) :to_f)) round "," Float  == ","(send\n  (send\n    (send\n      (send nil :lines) :count) :-\n    (send\n      (send nil :never_lines) :count)) :-\n  (send\n    (send nil :skipped_lines) :count)) to_f  == "]}," SimpleCov SourceFile covered_percent":{"type":"method","name":"covered_percent","children":[],"call":[" Float ","(send\n  (send nil :covered_lines) :count) * / ","relevant_lines to_f ","(send\n  (send nil :covered_lines) :count) * "," covered_lines count "," covered_lines ","relevant_lines zero? "," lines count - - "," skipped_lines count "," skipped_lines "," lines count - "," never_lines count "," never_lines "," lines count "," lines "," lines length == "," lines length "," lines length zero? "," covered_lines count * / "," covered_lines count * "," covered_lines size * / "," relevant_lines to_f "," relevant_lines "," covered_lines size * "," covered_lines size "," relevant_lines zero? "," no_lines? "," coverage_statistics [] "," coverage_statistics ","(send\n  (send\n    (send nil :lines) :count) :-\n  (send\n    (send nil :never_lines) :count)) to_f ","(send\n  (send\n    (send\n      (send nil :lines) :count) :-\n    (send\n      (send nil :never_lines) :count)) :-\n  (send\n    (send nil :skipped_lines) :count)) to_f ","relevant_lines == "," lines count - -  to_f "," lines count - -  zero? ","  lines count - -  to_f ","  lines count - -  ","  lines count - -  zero? "," lines count - -  == "]}," SimpleCov SourceFile line":{"type":"method","name":"line","children":[],"call":[" lines [] ","number - "," lines "]}," SimpleCov SourceFile lines":{"type":"method","name":"lines","children":[],"call":[" process_skipped_lines! ","@lines << ","SimpleCov SourceFile Line  new "," coverage [] "," coverage ","i + "," src each_with_index "," src ","$stderr puts "," src size "," filename "," coverage size "," coverage size > "," build_lines "," src [] "," coverage each_with_index ","@lines nil? ","@skipped_line_numbers include? "]}," SimpleCov SourceFile initialize":{"type":"method","name":"initialize","children":[],"call":["f readlines ","File  open ","filename to_s ","@lines << ","SimpleCov SourceFile Line  new ","i + "," src [] "," src ","coverage each_with_index ","File  readlines "," process_skipped_lines "]}," SimpleCov SourceFile Line status":{"type":"method","name":"status","children":[],"call":[" covered? "," missed? "," never? "," skipped? "]}," SimpleCov SourceFile Line skipped?":{"type":"method","name":"skipped?","children":[],"call":[" skipped ! ! "," skipped ! "," skipped "]}," SimpleCov SourceFile Line skipped!":{"type":"method","name":"skipped!","children":[],"call":[]}," SimpleCov SourceFile Line never?":{"type":"method","name":"never?","children":[],"call":[" coverage nil? "," coverage "," skipped? ! "," skipped? "]}," SimpleCov SourceFile Line covered?":{"type":"method","name":"covered?","children":[],"call":[" coverage > "," coverage "," skipped? ! "," skipped? "," never? ! "," never? "," coverage positive? "]}," SimpleCov SourceFile Line missed?":{"type":"method","name":"missed?","children":[],"call":[" coverage zero? "," coverage "," skipped? ! "," skipped? "," never? ! "," never? "," coverage == "]}," SimpleCov SourceFile Line initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","coverage nil? ","coverage is_a? ","line_number is_a? ","src is_a? "," raise ","coverage kind_of? ","line_number kind_of? ","src kind_of? ","@src encode! ","@src respond_to? "]}," SimpleCov ResultMerger store_result":{"type":"method","name":"store_result","children":[],"call":["f_ puts ","JSON  pretty_generate ","File  open "," resultset_path ","new_set []= ","result to_hash first ","result to_hash "," resultset ","f flock "," resultset_writelock "," clear_resultset "," synchronize_resultset ","new_resultset []= "," read_resultset "," resultset  []= "," read_resultset  []= "]}," SimpleCov ResultMerger merged_result":{"type":"method","name":"merged_result","children":[],"call":["result command_name= "," results map sort join "," results map sort "," results map "," results ","SimpleCov Result  new ","result original_result merge_resultset ","result original_result "," results each "," merge_results "," create_result "," merge_valid_results "," read_resultset ","SimpleCov Result  new  command_name= "," SimpleCov Result  new s map sort join "," SimpleCov Result  new s map sort "," SimpleCov Result  new s map "," SimpleCov Result  new s ","SimpleCov Result  new  original_SimpleCov Result  new  merge_SimpleCov Result  new set ","SimpleCov Result  new  original_SimpleCov Result  new  "," SimpleCov Result  new s each "," merge_SimpleCov Result  new s "," create_SimpleCov Result  new  "," merge_valid_SimpleCov Result  new s "," read_SimpleCov Result  new set "]}," SimpleCov ResultMerger results":{"type":"method","name":"results","children":[],"call":["results << ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (lvar :result) :created_at)) < ","SimpleCov  merge_timeout ","Time  now - ","result created_at ","Time  now ","SimpleCov Result  from_hash "," resultset each "," resultset ","result time_since_creation < ","result time_since_creation ","results select ","Result  from_hash ","SimpleCov Result  from_hash s << ","Result  from_hash  << ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (lvar :SimpleCov Result  from_hash ) :created_at)) < ","SimpleCov Result  from_hash  created_at "," SimpleCov Result  from_hash set each "," Result  from_hash et each "," SimpleCov Result  from_hash set "," Result  from_hash et ","SimpleCov Result  from_hash  time_since_creation < ","SimpleCov Result  from_hash  time_since_creation ","SimpleCov Result  from_hash s select ","Result  from_hash  select "]}," SimpleCov ResultMerger stored_data":{"type":"method","name":"stored_data","children":[],"call":["data length < ","data length ","data nil? ","File  read "," resultset_path ","File  exist? "," synchronize_resultset ","File  read  length < ","File  read  length ","File  read  nil? "]}," SimpleCov ResultMerger resultset":{"type":"method","name":"resultset","children":[],"call":["JSON  parse "," stored_data "," stored_ stored_data  "]}," SimpleCov ResultMerger resultset_writelock":{"type":"method","name":"resultset_writelock","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," SimpleCov ResultMerger resultset_path":{"type":"method","name":"resultset_path","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," SimpleCov Result filter!":{"type":"method","name":"filter!","children":[],"call":["SimpleCov  filtered "," files "]}," SimpleCov Result from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," SimpleCov Result to_hash":{"type":"method","name":"to_hash","children":[],"call":[" created_at to_i "," created_at "," filenames include? ! "," filenames include? "," filenames "," original_result reject "," original_result "," command_name "," coverage "]}," SimpleCov Result command_name":{"type":"method","name":"command_name","children":[],"call":["SimpleCov  command_name "]}," SimpleCov Result created_at":{"type":"method","name":"created_at","children":[],"call":["Time  now "]}," SimpleCov Result format!":{"type":"method","name":"format!","children":[],"call":["SimpleCov  formatter new format ","SimpleCov  formatter new ","SimpleCov  formatter "]}," SimpleCov Result groups":{"type":"method","name":"groups","children":[],"call":["SimpleCov  grouped "," files "]}," SimpleCov Result filenames":{"type":"method","name":"filenames","children":[],"call":[" files map "," files "]}," SimpleCov Result initialize":{"type":"method","name":"initialize","children":[],"call":[" filter! ","SimpleCov FileList  new ","(send\n  (lvar :original_result) :map) compact sort_by ","(send\n  (lvar :original_result) :map) compact ","SimpleCov SourceFile  new ","File  file? ","original_result map ","original_result freeze ","original_result dup extend ","original_result dup ","original_result is_a? ","(send\n  (lvar :result) :map) compact sort_by ","(send\n  (lvar :result) :map) compact ","JSON  parse ","JSON  dump ","result map ","result freeze "," adapt_result ","filename to_s ","(send\n  (lvar :original_result) :map) sort_by ","(send\n  (ivar :@original_result) :map) compact sort_by ","(send\n  (ivar :@original_result) :map) compact ","@original_result map ","@original_result []= ","@original_result delete ","File  expand_path ","@original_result keys each ","@original_result keys ","(send\n  (lvar :original_result dup extend ) :map) compact sort_by ","(send\n  (lvar :original_ adapt_result ) :map) compact sort_by ","(send\n  (lvar :original_result dup extend ) :map) compact ","(send\n  (lvar :original_ adapt_result ) :map) compact ","original_result dup extend  map ","original_ adapt_result  map ","original_result dup extend  freeze ","original_ adapt_result  freeze ","original_result dup extend  dup extend ","original_ adapt_result  dup extend ","original_result dup extend  dup ","original_ adapt_result  dup ","original_result dup extend  is_a? ","original_ adapt_result  is_a? ","(send\n  (lvar : adapt_result ) :map) compact sort_by ","(send\n  (lvar : adapt_result ) :map) compact "," adapt_result  map "," adapt_result  freeze "," adapt_ adapt_result  ","(send\n  (lvar :original_result dup extend ) :map) sort_by ","(send\n  (lvar :original_ adapt_result ) :map) sort_by ","(send\n  (ivar :original_result freeze ) :map) compact sort_by ","(send\n  (ivar :result freeze ) :map) compact sort_by ","(send\n  (ivar :original_result dup ) :map) compact sort_by ","(send\n  (ivar :@original_result dup extend ) :map) compact sort_by ","(send\n  (ivar :@original_ adapt_result ) :map) compact sort_by ","(send\n  (ivar :original_result freeze ) :map) compact ","(send\n  (ivar :result freeze ) :map) compact ","(send\n  (ivar :original_result dup ) :map) compact ","(send\n  (ivar :@original_result dup extend ) :map) compact ","(send\n  (ivar :@original_ adapt_result ) :map) compact ","original_result freeze  map ","result freeze  map ","original_result dup  map ","@original_result dup extend  map ","@original_ adapt_result  map ","original_result freeze  []= ","result freeze  []= ","original_result dup  []= ","@original_result dup extend  []= ","@original_ adapt_result  []= ","original_result freeze  delete ","result freeze  delete ","original_result dup  delete ","@original_result dup extend  delete ","@original_ adapt_result  delete ","original_result freeze  keys each ","result freeze  keys each ","original_result dup  keys each ","@original_result dup extend  keys each ","@original_ adapt_result  keys each ","original_result freeze  keys ","result freeze  keys ","original_result dup  keys ","@original_result dup extend  keys ","@original_ adapt_result  keys "]}," SimpleCov Profiles load":{"type":"method","name":"load","children":[],"call":["SimpleCov  configure "," [] "," fail "," key? ","name to_sym "," raise ","name to_sym  to_sym "]}," SimpleCov Profiles define":{"type":"method","name":"define","children":[],"call":[" []= "," fail "," [] nil? "," [] ","name to_sym "," raise ","name to_sym  to_sym "]}," SimpleCov HashMergeHelper merge_resultset":{"type":"method","name":"merge_resultset","children":[],"call":["new_resultset []= ","(or\n  (send\n    (self) :[]\n    (lvar :filename))\n  (array)) merge_resultset ","hash [] "," [] ","new_resultset each_key ","(send\n  (send nil :keys) :+\n  (send\n    (lvar :hash) :keys)) each "," keys + ","hash keys "," keys ","(or\n  (send\n    (self) :[]\n    (lvar :filename))\n  (array)) extend merge_resultset ","(or\n  (send\n    (self) :[]\n    (lvar :filename))\n  (array)) extend ","(or\n  (lvar :result1)\n  (lvar :result2)) dup ","result1 extend merge_resultset ","result1 extend ","(or\n  (lvar :result1)\n  (lvar :hash [] )) dup ","(or\n  (lvar : [] )\n  (lvar :result2)) dup "," []  extend merge_resultset "," []  extend "]}," SimpleCov ArrayMergeHelper merge_resultset":{"type":"method","name":"merge_resultset","children":[],"call":["new_array []= ","local_value + ","new_array [] ","new_array [] nil? ","element nil? ","array each_with_index "," dup ","element to_i + ","new_array [] to_i ","element to_i ","pair map all? ","pair map ","pair any? "," dup  []= "," dup  [] "," dup  [] nil? "," dup  [] to_i "]}," SimpleCov LastRun write":{"type":"method","name":"write","children":[],"call":["f puts ","JSON  pretty_generate ","File  open "," last_run_path "]}," SimpleCov LastRun read":{"type":"method","name":"read","children":[],"call":["JSON  parse ","File  read "," last_run_path ","File  exist? ","json strip empty? ","json strip ","File  read  strip empty? ","File  read  strip "]}," SimpleCov LastRun last_run_path":{"type":"method","name":"last_run_path","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," Coverage result":{"type":"method","name":"result","children":[],"call":["fixed []= ","File  expand_path ","first > ","covered_lines detect ","process [] ","JRuby  parse ","File  read ","node child_nodes each ","node child_nodes ","covered_lines [] ","pos line ","node position ","node node_type == ","node node_type "," lambda ","executed_lines dup ","File  file? "," __broken_result__ each "," __broken_result__ ","executed_lines dup  detect ","executed_lines dup  [] ","node position  line ","node node position ition "]}," SimpleCov Formatter SimpleFormatter format":{"type":"method","name":"format","children":[],"call":["output << ","file covered_percent round ","file covered_percent ","file filename ","files each ","= * ","result groups each ","result groups "," dup "," +@ "," dup  << "," +@  << "]}," SimpleCov Formatter MultiFormatter formatters":{"type":"method","name":"formatters","children":[],"call":[]}," SimpleCov Formatter MultiFormatter format":{"type":"method","name":"format","children":[],"call":["STDERR  puts ","e backtrace first ","e backtrace ","e message ","e class ","formatter new format ","formatter new "," formatters map "," formatters "]}," SimpleCov Formatter MultiFormatter []":{"type":"method","name":"[]","children":[],"call":[]}," SimpleCov ArrayFilter matches?":{"type":"method","name":"matches?","children":[],"call":["source_files_list filename =~ ","source_files_list filename "," filter_argument any? "," filter_argument ","arg matches? "]}," SimpleCov BlockFilter matches?":{"type":"method","name":"matches?","children":[],"call":[" filter_argument call "," filter_argument "]}," SimpleCov StringFilter matches?":{"type":"method","name":"matches?","children":[],"call":["source_file filename =~ "," filter_argument ","source_file filename ","source_file project_filename =~ ","source_file project_filename ","source_file project_filename include? "]}," SimpleCov Filter passes?":{"type":"method","name":"passes?","children":[],"call":[" matches? "," warn ","Kernel  caller first ","Kernel  caller "," raise "]}," SimpleCov Filter matches?":{"type":"method","name":"matches?","children":[],"call":[" fail "," raise "]}," SimpleCov Filter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov FileList covered_strength":{"type":"method","name":"covered_strength","children":[],"call":[" Float ","(send nil :map) inject / "," lines_of_code ","(send nil :map) inject ","f covered_strength * ","f lines_of_code ","f covered_strength "," map "," lines_of_code zero? "," empty? "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov FileList covered_percent":{"type":"method","name":"covered_percent","children":[],"call":[" Float "," covered_lines * / "," lines_of_code "," covered_lines * "," covered_lines "," lines_of_code zero? "," empty? "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov FileList lines_of_code":{"type":"method","name":"lines_of_code","children":[],"call":[" covered_lines + "," missed_lines "," covered_lines "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov FileList skipped_lines":{"type":"method","name":"skipped_lines","children":[],"call":["(send nil :map) inject ","f skipped_lines count ","f skipped_lines "," map "," empty? "]}," SimpleCov FileList never_lines":{"type":"method","name":"never_lines","children":[],"call":["(send nil :map) inject ","f never_lines count ","f never_lines "," map "," empty? "]}," SimpleCov FileList missed_lines":{"type":"method","name":"missed_lines","children":[],"call":["(send nil :map) inject ","f missed_lines count ","f missed_lines "," map "," empty? "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov FileList covered_lines":{"type":"method","name":"covered_lines","children":[],"call":["(send nil :map) inject ","f covered_lines count ","f covered_lines "," map "," empty? "," coverage_statistics [] "," coverage_statistics "]}," SimpleCov Configuration parse_filter":{"type":"method","name":"parse_filter","children":[],"call":[" fail ","SimpleCov ArrayFilter  new ","filter_argument is_a? ","SimpleCov BlockFilter  new ","SimpleCov StringFilter  new "," raise ","SimpleCov Filter  build_filter "]}," SimpleCov Configuration add_group":{"type":"method","name":"add_group","children":[],"call":[" groups []= "," parse_filter "," groups "]}," SimpleCov Configuration add_filter":{"type":"method","name":"add_filter","children":[],"call":[" filters << "," parse_filter "," filters "]}," SimpleCov Configuration refuse_coverage_drop":{"type":"method","name":"refuse_coverage_drop","children":[],"call":[" maximum_coverage_drop ","(send\n  (lvar :criteria) :map) to_h ","criteria map "," coverage_criteria ","criteria empty? ","(send\n  (lvar : coverage_criteria ) :map) to_h "," coverage_criteria  map "," coverage_ coverage_criteria  "," coverage_criteria  empty? "]}," SimpleCov Configuration maximum_coverage_drop":{"type":"method","name":"maximum_coverage_drop","children":[],"call":["(or\n  (lvar :coverage_drop)\n  (int 100)) to_f round ","(or\n  (lvar :coverage_drop)\n  (int 100)) to_f "," raise_on_invalid_coverage "," primary_coverage ","coverage_drop is_a? "]}," SimpleCov Configuration minimum_coverage":{"type":"method","name":"minimum_coverage","children":[],"call":["(or\n  (lvar :coverage)\n  (int 0)) to_f round ","(or\n  (lvar :coverage)\n  (int 0)) to_f "," minimum_possible_coverage_exceeded ","percent > ","coverage values each ","coverage values "," raise_if_criterion_disabled ","coverage keys each ","coverage keys ","coverage is_a? ","coverage > ","coverage each_value ","coverage each_key "," raise_on_invalid_coverage "," primary_coverage "]}," SimpleCov Configuration merge_timeout":{"type":"method","name":"merge_timeout","children":[],"call":["seconds is_a? "]}," SimpleCov Configuration use_merging":{"type":"method","name":"use_merging","children":[],"call":["@use_merging == ","use nil? "]}," SimpleCov Configuration project_name":{"type":"method","name":"project_name","children":[],"call":["File  basename capitalize gsub ","File  basename capitalize ","File  basename "," root split last "," root split "," root ","new_name is_a? ","new_name nil? ","File  basename capitalize tr "]}," SimpleCov Configuration at_exit":{"type":"method","name":"at_exit","children":[],"call":["SimpleCov  result format! ","SimpleCov  result "," proc "," block_given? "," running ","Proc  new "]}," SimpleCov Configuration configure":{"type":"method","name":"configure","children":[],"call":["Docile  dsl_eval ","SimpleCov  usable? "]}," SimpleCov Configuration adapters":{"type":"method","name":"adapters","children":[],"call":[" profiles "," warn ","Kernel  caller first ","Kernel  caller "]}," SimpleCov Configuration profiles":{"type":"method","name":"profiles","children":[],"call":["SimpleCov Profiles  new "]}," SimpleCov Configuration groups":{"type":"method","name":"groups","children":[],"call":[]}," SimpleCov Configuration nocov_token":{"type":"method","name":"nocov_token","children":[],"call":["nocov_token nil? "]}," SimpleCov Configuration formatters":{"type":"method","name":"formatters","children":[],"call":[" Array "," formatter ","@formatter formatters ","@formatter is_a? "]}," SimpleCov Configuration formatters=":{"type":"method","name":"formatters=","children":[],"call":["SimpleCov Formatter MultiFormatter  [] ","SimpleCov Formatter MultiFormatter  new "]}," SimpleCov Configuration formatter":{"type":"method","name":"formatter","children":[],"call":[" fail ","formatter nil? "," raise "]}," SimpleCov Configuration command_name":{"type":"method","name":"command_name","children":[],"call":["SimpleCov CommandGuesser  guess ","name nil? "]}," SimpleCov Configuration filters":{"type":"method","name":"filters","children":[],"call":[]}," SimpleCov Configuration coverage_path":{"type":"method","name":"coverage_path","children":[],"call":["FileUtils  mkdir_p ","File  expand_path "," root "," coverage_dir "]}," SimpleCov Configuration coverage_dir":{"type":"method","name":"coverage_dir","children":[],"call":["dir nil? "]}," SimpleCov Configuration root":{"type":"method","name":"root","children":[],"call":["File  expand_path ","Dir  getwd ","root nil? "]}," SimpleCov CommandGuesser from_defined_constants":{"type":"method","name":"from_defined_constants","children":[],"call":[" warn "]}," SimpleCov CommandGuesser from_command_line_options":{"type":"method","name":"from_command_line_options","children":[],"call":[" original_run_command "]}," SimpleCov CommandGuesser from_env":{"type":"method","name":"from_env","children":[],"call":["ENV  [] ","number empty? ","ENV  []  empty? "]}," SimpleCov CommandGuesser guess":{"type":"method","name":"guess","children":[],"call":[" from_defined_constants "," from_command_line_options "," from_env "]}," SimpleCov add_not_loaded_files":{"type":"method","name":"add_not_loaded_files","children":[],"call":["(int 0) * ","File  foreach count ","File  foreach ","result [] ","File  expand_path ","Dir  [] each ","Dir  [] ","result dup "," track_files "," tracked_files ","LinesClassifier  new classify ","LinesClassifier  new ","SimulateCoverage  call ","result dup  [] ","result dup  dup "]}," SimpleCov Formatter MultiFormatter new":{"type":"method","name":"new","children":[],"call":[]}," SimpleCov Formatter MultiFormatter InstanceMethods format":{"type":"method","name":"format","children":[],"call":["STDERR  puts ","e backtrace first ","e backtrace ","e message ","e class ","formatter new format ","formatter new "," formatters map "," formatters "," warn "]}," SimpleCov FileList least_covered_file":{"type":"method","name":"least_covered_file","children":[],"call":[" sort_by first filename "," sort_by first "," sort_by "," min_by filename "," min_by "]}," SimpleCov FileList covered_percentages":{"type":"method","name":"covered_percentages","children":[],"call":[" map "]}," SimpleCov Configuration minimum_coverage_by_file":{"type":"method","name":"minimum_coverage_by_file","children":[],"call":["(or\n  (lvar :coverage)\n  (int 0)) to_f round ","(or\n  (lvar :coverage)\n  (int 0)) to_f "," minimum_possible_coverage_exceeded ","coverage > "," raise_on_invalid_coverage "," primary_coverage ","coverage is_a? "]}," SimpleCov Configuration track_files":{"type":"method","name":"track_files","children":[],"call":["glob nil? "]}," SimpleCov SourceFile src":{"type":"method","name":"src","children":[],"call":["File  open "," filename "," load_source "]}," SimpleCov Result coverage":{"type":"method","name":"coverage","children":[],"call":["Hash  [] ","keys zip "," original_result values_at "," original_result "," original_result keys & "," filenames "," original_result keys "," original_result keys &  zip "," original_result  original_result keys &  & "," original_result  original_result keys &  "]}," SimpleCov SourceFile process_skipped_lines":{"type":"method","name":"process_skipped_lines","children":[],"call":["line skipped! ","skipping ! ","line src =~ ","SimpleCov  nocov_token ","line src ","lines each ","SimpleCov LinesClassifier  no_cov_line ","SimpleCov LinesClassifier  no_cov_line? ","lines [] each ","lines [] ","chunk end - ","chunk end ","chunk begin - ","chunk begin "," no_cov_chunks each "," no_cov_chunks ","skipped_line_numbers << ","i + ","line =~ ","@src each_with_index ","skipping !  ! "]}," SimpleCov SourceFile relevant_lines":{"type":"method","name":"relevant_lines","children":[],"call":[" lines size - - "," skipped_lines size "," skipped_lines "," lines size - "," never_lines size "," never_lines "," lines size "," lines "]}," SimpleCov SourceFile lines_strength":{"type":"method","name":"lines_strength","children":[],"call":[" lines map compact reduce "," lines map compact "," lines map "," lines ","line coverage to_i ","line coverage "," lines sum "]}," SimpleCov SourceFile no_lines?":{"type":"method","name":"no_lines?","children":[],"call":[" lines length == "," never_lines size "," never_lines "," lines length "," lines "," lines length zero? "]}," SimpleCov SourceFile coverage_exceeding_source_warn":{"type":"method","name":"coverage_exceeding_source_warn","children":[],"call":["$stderr puts "," src size "," src "," filename "," coverage size "," coverage "," warn "," coverage_data [] size "," coverage_data [] "," coverage_data "," coverage [] size "," coverage [] "]}," SimpleCov SourceFile build_lines":{"type":"method","name":"build_lines","children":[],"call":[" process_skipped_lines ","SimpleCov SourceFile Line  new "," coverage [] ","i - "," coverage "," src map with_index "," src map "," src "," coverage_exceeding_source_warn "," coverage size > "," src size "," coverage size "," coverage_data [] [] "," coverage_data [] "," coverage_data "," coverage_data [] size > "," coverage_data [] size "," coverage [] [] "," coverage [] size > "," coverage [] size "]}," SimpleCov ResultMerger merge_results":{"type":"method","name":"merge_results","children":[],"call":["result command_name= ","results map sort join ","results map sort ","results map ","SimpleCov Result  new ","SimpleCov RawCoverage  merge_results ","SimpleCov Combine ResultsCombiner  combine ","JSON  parse ","JSON  dump "," create_result "," merge_coverage "," valid_results ","file_paths reduce ","file_paths shift ","SimpleCov Result  new  command_name= ","SimpleCov Result  new s map sort join ","SimpleCov Result  new s map sort ","SimpleCov Result  new s map ","SimpleCov RawCoverage  merge_SimpleCov Result  new s "," create_SimpleCov Result  new  "," valid_SimpleCov Result  new s "]}," SimpleCov RawCoverage merge_line_coverage":{"type":"method","name":"merge_line_coverage","children":[],"call":["count2 nil? ","count1 nil? ","sum zero? ","count1 to_i + ","count2 to_i ","count1 to_i ","count1 to_i +  zero? "]}," SimpleCov RawCoverage merge_file_coverage":{"type":"method","name":"merge_file_coverage","children":[],"call":[" merge_line_coverage ","file2 [] ","file1 map with_index ","file1 map ","(or\n  (lvar :file1)\n  (lvar :file2)) dup "]}," SimpleCov RawCoverage merge_resultsets":{"type":"method","name":"merge_resultsets","children":[],"call":["merged []= "," merge_file_coverage ","result2 [] ","result1 [] ","(send\n  (send\n    (lvar :result1) :keys) :|\n  (send\n    (lvar :result2) :keys)) each_with_object ","result1 keys | ","result2 keys ","result1 keys "]}," SimpleCov RawCoverage merge_results":{"type":"method","name":"merge_results","children":[],"call":[" merge_resultsets ","results reduce "]}," SimpleCov Configuration tracked_files":{"type":"method","name":"tracked_files","children":[],"call":[]}," SimpleCov clear_result":{"type":"method","name":"clear_result","children":[],"call":[]}," SimpleCov SourceFile project_filename":{"type":"method","name":"project_filename","children":[],"call":["@filename sub ","SimpleCov  root ","Regexp  new ","Regexp  escape ","@filename delete_prefix "]}," SimpleCov ResultMerger clear_resultset":{"type":"method","name":"clear_resultset","children":[],"call":[]}," SimpleCov ResultMerger synchronize_resultset":{"type":"method","name":"synchronize_resultset","children":[],"call":["f flock ","File  open "," resultset_writelock "]}," SimpleCov LinesClassifier classify":{"type":"method","name":"classify","children":[],"call":["line =~ ","skipping ! "," class no_cov_line "," class ","lines map "," class whitespace_line? "," class no_cov_line? ","skipping !  ! "]}," SimpleCov LinesClassifier no_cov_line":{"type":"method","name":"no_cov_line","children":[],"call":[]}," SimpleCov ArrayFilter initialize":{"type":"method","name":"initialize","children":[],"call":["Filter  build_filter ","filter_argument map "]}," SimpleCov RegexFilter matches?":{"type":"method","name":"matches?","children":[],"call":["source_file project_filename =~ "," filter_argument ","source_file project_filename "]}," SimpleCov Filter class_for_argument":{"type":"method","name":"class_for_argument","children":[],"call":[]}," SimpleCov Filter build_filter":{"type":"method","name":"build_filter","children":[],"call":[]}," SimpleCov write_last_run":{"type":"method","name":"write_last_run","children":[],"call":["SimpleCov LastRun  write "," round_coverage ","result covered_percent ","stats percent ","result coverage_statistics transform_values ","result coverage_statistics "]}," SimpleCov result_exit_status":{"type":"method","name":"result_exit_status","children":[],"call":["$stderr printf ","SimpleCov  maximum_coverage_drop ","coverage_diff > ","last_run [] [] - ","last_run [] [] ","last_run [] ","SimpleCov LastRun  read ","SimpleCov  minimum_coverage_by_file ","covered_percentages min ","result least_covered_file ","p < ","covered_percentages any? ","SimpleCov  minimum_coverage ","covered_percent < ","percentage round ","result covered_percentages map ","result covered_percentages "," report_minimum_violated ","(lvasgn :minimum_violations\n  (send nil :minimum_coverage_violated\n    (lvar :result))) any? "," minimum_coverage_violated ","percentage floor ","ExitCodes ExitCodeHandling  call ","CoverageLimits  new "," maximum_coverage_drop "," minimum_coverage_by_file "," minimum_coverage ","last_run [] [] -  > ","SimpleCov LastRun  read  [] [] - ","SimpleCov LastRun  read  [] [] ","SimpleCov LastRun  read  [] ","(lvasgn : minimum_coverage_violated \n  (send nil :minimum_coverage_violated\n    (lvar :result))) any? "]}," SimpleCov process_result":{"type":"method","name":"process_result","children":[],"call":[" write_last_run ","result_exit_status == "," result_exit_status ","result covered_percent round ","result covered_percent ","exit_status != ","SimpleCov  result? "," final_result_process? ","result covered_percent floor "," result_exit_status  == ","  result_exit_status  ","result result covered_percent round  round ","result result covered_percent floor  round ","result result covered_percent round  ","result result covered_percent floor  ","result result covered_percent round  floor ","result result covered_percent floor  floor "]}," SimpleCov run_exit_tasks!":{"type":"method","name":"run_exit_tasks!","children":[],"call":["Kernel  exit ","exit_status > ","SimpleCov  process_result ","SimpleCov  result ","SimpleCov  at_exit call ","SimpleCov  at_exit ","SimpleCov  exit_status_from_exception ","$stderr printf ","SimpleCov  result? "," print_error_status "," set_exit_exception "," process_results_and_report_error "," ready_to_process_results? "," exit_and_report_previous_error "," previous_error? "," at_exit call "," at_exit "," exit_status_from_exception ","SimpleCov  process_result  > ","SimpleCov  exit_status_from_exception  > ","SimpleCov  SimpleCov  process_result _from_exception ","SimpleCov  SimpleCov  exit_status_from_exception _from_exception "," SimpleCov  process_result _from_exception "," SimpleCov  exit_status_from_exception _from_exception "]}," SimpleCov exit_status_from_exception":{"type":"method","name":"exit_status_from_exception","children":[],"call":[" exit_exception status "," exit_exception "," exit_exception is_a? ","@exit_exception status ","@exit_exception is_a? "]}," SimpleCov set_exit_exception":{"type":"method","name":"set_exit_exception","children":[],"call":[]}," SimpleCov LinesClassifier whitespace_line?":{"type":"method","name":"whitespace_line?","children":[],"call":[]}," SimpleCov LinesClassifier no_cov_line?":{"type":"method","name":"no_cov_line?","children":[],"call":[]}," SimpleCov wait_for_other_processes":{"type":"method","name":"wait_for_other_processes","children":[],"call":["ParallelTests  wait_for_other_processes_to_finish "," final_result_process? "]}," SimpleCov final_result_process?":{"type":"method","name":"final_result_process?","children":[],"call":["ParallelTests  last_process? ","(const nil :ParallelTests) ! ","ParallelTests  number_of_running_processes <= ","ParallelTests  number_of_running_processes ","ENV  [] ! ","ENV  [] "]}," SimpleCov report_minimum_violated":{"type":"method","name":"report_minimum_violated","children":[],"call":["$stderr printf ","violation fetch capitalize ","violation fetch ","violation fetch floor ","violations each "]}," SimpleCov minimum_coverage_violated":{"type":"method","name":"minimum_coverage_violated","children":[],"call":["achieved fetch < ","achieved fetch ","coverage_achieved select ","result coverage_statistics [] percent ","result coverage_statistics [] ","result coverage_statistics "," minimum_coverage map "," minimum_coverage "]}," SimpleCov result_with_not_loaded_files":{"type":"method","name":"result_with_not_loaded_files","children":[],"call":["SimpleCov Result  new "," add_not_loaded_files "]}," SimpleCov remove_useless_results":{"type":"method","name":"remove_useless_results","children":[],"call":["SimpleCov UselessResultsRemover  call "]}," SimpleCov adapt_coverage_result":{"type":"method","name":"adapt_coverage_result","children":[],"call":["SimpleCov ResultAdapter  call ","Coverage  result "]}," SimpleCov process_coverage_result":{"type":"method","name":"process_coverage_result","children":[],"call":[" result_with_not_loaded_files "," remove_useless_results "," adapt_coverage_result "]}," SimpleCov lookup_corresponding_ruby_coverage_name":{"type":"method","name":"lookup_corresponding_ruby_coverage_name","children":[],"call":["CRITERION_TO_RUBY_COVERAGE  fetch "]}," SimpleCov start_coverage_with_criteria":{"type":"method","name":"start_coverage_with_criteria","children":[],"call":["Coverage  start ","(send\n  (send nil :coverage_criteria) :map) to_h "," lookup_corresponding_ruby_coverage_name "," coverage_criteria map "," coverage_criteria ","Coverage  running? ","start_arguments []= "," coverage_for_eval_enabled? ","(send\n  (send nil :coverage_criteria) :map) to_h  []= "]}," SimpleCov start_coverage_measurement":{"type":"method","name":"start_coverage_measurement","children":[],"call":["Coverage  start "," start_coverage_with_criteria "," coverage_start_arguments_supported? ","Coverage  running? "]}," SimpleCov initial_setup":{"type":"method","name":"initial_setup","children":[],"call":[" running= "," configure "," block_given? "," load_profile "]}," SimpleCov collate":{"type":"method","name":"collate","children":[],"call":[" run_exit_tasks! ","SimpleCov ResultMerger  merge_and_store ","SimpleCov Result  from_hash ","(or\n  (send\n    (const nil :JSON) :parse\n    (send\n      (const nil :File) :read\n      (lvar :filename)))\n  (hash)) map ","JSON  parse ","File  read ","result_filenames flat_map "," initial_setup "," raise ","result_filenames empty? ","ResultMerger  merge_and_store ","Result  from_hash "]}," SimpleCov UselessResultsRemover call":{"type":"method","name":"call","children":[],"call":[]}," SimpleCov SourceFile branch_coverage_statistics":{"type":"method","name":"branch_coverage_statistics","children":[],"call":["CoverageStatistics  new "," missed_branches size "," missed_branches "," covered_branches size "," covered_branches "]}," SimpleCov SourceFile line_coverage_statistics":{"type":"method","name":"line_coverage_statistics","children":[],"call":["CoverageStatistics  new "," missed_lines size "," missed_lines "," covered_lines size "," covered_lines "," lines_strength "]}," SimpleCov SourceFile build_branch":{"type":"method","name":"build_branch","children":[],"call":["SourceFile Branch  new ","start_line == "," positive_branch? "]}," SimpleCov SourceFile build_branches_from":{"type":"method","name":"build_branches_from","children":[],"call":[" build_branch "," restore_ruby_data_structure ","branches map ","(send\n  (block\n    (send\n      (lvar :branches) :map)\n    (args\n      (arg :branch_data)\n      (arg :hit_count))\n    (array\n      (send nil :restore_ruby_data_structure\n        (lvar :branch_data))\n      (lvar :hit_count))) :reject) map "," ignore_branch? ","(send\n  (lvar :branches) :map) reject ","(send\n  (block\n    (send\n      (lvar :branches) :map)\n    (args\n      (arg : restore_ruby_data_structure )\n      (arg :hit_count))\n    (array\n      (send nil :restore_ruby_data_structure\n        (lvar : restore_ruby_data_structure ))\n      (lvar :hit_count))) :reject) map "]}," SimpleCov SourceFile restore_ruby_data_structure":{"type":"method","name":"restore_ruby_data_structure","children":[],"call":[" eval ","structure is_a? ","structure to_s "]}," SimpleCov SourceFile process_skipped_branches":{"type":"method","name":"process_skipped_branches","children":[],"call":["branch skipped! ","branch overlaps_with? "," no_cov_chunks any? "," no_cov_chunks ","branches each "," no_cov_chunks empty? "]}," SimpleCov SourceFile build_branches":{"type":"method","name":"build_branches","children":[],"call":[" process_skipped_branches "," build_branches_from ","coverage_branch_data flat_map "," coverage_data fetch "," coverage_data "," coverage fetch "," coverage "," coverage_data fetch  flat_map "," coverage fetch  flat_map "]}," SimpleCov SourceFile build_branches_report":{"type":"method","name":"build_branches_report","children":[],"call":["coverage_statistics [] << ","branch report ","coverage_statistics [] ","branch report_line "," branches reject each_with_object "," branches reject "," branches "]}," SimpleCov SourceFile build_no_cov_chunks":{"type":"method","name":"build_no_cov_chunks","children":[],"call":["no_cov_lines each_slice map ","no_cov_lines each_slice "," warn ","no_cov_lines size odd? ","no_cov_lines size ","LinesClassifier  no_cov_line? "," src map with_index select "," src map with_index "," src map "," src ","no_cov_lines << "," src size "]}," SimpleCov SourceFile no_cov_chunks":{"type":"method","name":"no_cov_chunks","children":[],"call":[" build_no_cov_chunks "]}," SimpleCov SourceFile line_with_missed_branch?":{"type":"method","name":"line_with_missed_branch?","children":[],"call":["(send\n  (send nil :branches_for_line\n    (lvar :line_number)) :select) any? ","count zero? "," branches_for_line select "," branches_for_line "]}," SimpleCov SourceFile branches_for_line":{"type":"method","name":"branches_for_line","children":[],"call":[" branches_report fetch "," branches_report "]}," SimpleCov SourceFile missed_branches":{"type":"method","name":"missed_branches","children":[],"call":[" branches select "," branches "]}," SimpleCov SourceFile covered_branches":{"type":"method","name":"covered_branches","children":[],"call":[" branches select "," branches "]}," SimpleCov SourceFile branches_report":{"type":"method","name":"branches_report","children":[],"call":[" build_branches_report "]}," SimpleCov SourceFile total_branches":{"type":"method","name":"total_branches","children":[],"call":[" covered_branches + "," missed_branches "," covered_branches "]}," SimpleCov SourceFile branches_coverage_percent":{"type":"method","name":"branches_coverage_percent","children":[],"call":[" coverage_statistics [] "," coverage_statistics "," Float "," covered_branches size * / "," total_branches size to_f "," total_branches size "," total_branches "," covered_branches size * "," covered_branches size "," covered_branches "," covered_branches empty? "," no_branches? "]}," SimpleCov SourceFile no_branches?":{"type":"method","name":"no_branches?","children":[],"call":[" total_branches empty? "," total_branches "]}," SimpleCov SourceFile branches":{"type":"method","name":"branches","children":[],"call":[" build_branches "]}," SimpleCov SourceFile coverage_statistics":{"type":"method","name":"coverage_statistics","children":[],"call":[" branch_coverage_statistics "," line_coverage_statistics "]}," SimpleCov SourceFile Branch report":{"type":"method","name":"report","children":[],"call":[" coverage "," type "," badge "]}," SimpleCov SourceFile Branch overlaps_with?":{"type":"method","name":"overlaps_with?","children":[],"call":[" end_line >= ","line_range begin "," end_line "," start_line <= ","line_range end "," start_line "]}," SimpleCov SourceFile Branch skipped?":{"type":"method","name":"skipped?","children":[],"call":[]}," SimpleCov SourceFile Branch skipped!":{"type":"method","name":"skipped!","children":[],"call":[]}," SimpleCov SourceFile Branch report_line":{"type":"method","name":"report_line","children":[],"call":[" start_line - "," start_line "," inline? "]}," SimpleCov SourceFile Branch missed?":{"type":"method","name":"missed?","children":[],"call":[" coverage zero? "," coverage "," skipped? ! "," skipped? "]}," SimpleCov SourceFile Branch covered?":{"type":"method","name":"covered?","children":[],"call":[" coverage positive? "," coverage "," skipped? ! "," skipped? "]}," SimpleCov SourceFile Branch inline?":{"type":"method","name":"inline?","children":[],"call":[]}," SimpleCov SourceFile Branch initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov SimulateCoverage call":{"type":"method","name":"call","children":[],"call":["LinesClassifier  new classify ","LinesClassifier  new ","File  foreach "]}," SimpleCov ResultMerger merge_and_store":{"type":"method","name":"merge_and_store","children":[],"call":[" store_result "," merge_results "," store_ merge_results  "," merge_ merge_results s "]}," SimpleCov ResultAdapter adapt":{"type":"method","name":"adapt","children":[],"call":["adapted_result merge! ","cover_statistic is_a? "," result each_with_object "," result "]}," SimpleCov ResultAdapter call":{"type":"method","name":"call","children":[],"call":[]}," SimpleCov ResultAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov Result adapt_pre_simplecov_0_18_result":{"type":"method","name":"adapt_pre_simplecov_0_18_result","children":[],"call":["(send\n  (lvar :result) :map) to_h ","result map ","result transform_values "]}," SimpleCov Result pre_simplecov_0_18_result?":{"type":"method","name":"pre_simplecov_0_18_result?","children":[],"call":["data is_a? ","result first "]}," SimpleCov Result adapt_result":{"type":"method","name":"adapt_result","children":[],"call":[" adapt_pre_simplecov_0_18_result "," pre_simplecov_0_18_result? "]}," SimpleCov FileList compute_coverage_statistics":{"type":"method","name":"compute_coverage_statistics","children":[],"call":["coverage_statistics []= ","CoverageStatistics  from ","total_coverage_statistics [] ","SimpleCov  branch_coverage? ","together [] << ","file coverage_statistics [] ","file coverage_statistics ","together [] ","@files each_with_object "," coverage_statistics_by_file [] "," coverage_statistics_by_file "]}," SimpleCov FileList branch_covered_percent":{"type":"method","name":"branch_covered_percent","children":[],"call":[" coverage_statistics [] "," coverage_statistics "]}," SimpleCov FileList missed_branches":{"type":"method","name":"missed_branches","children":[],"call":[" coverage_statistics [] "," coverage_statistics ","(send nil :map) inject ","file missed_branches count ","file missed_branches "," map "," empty? "]}," SimpleCov FileList covered_branches":{"type":"method","name":"covered_branches","children":[],"call":[" coverage_statistics [] "," coverage_statistics ","(send nil :map) inject ","file covered_branches count ","file covered_branches "," map "," empty? "]}," SimpleCov FileList total_branches":{"type":"method","name":"total_branches","children":[],"call":[" coverage_statistics [] "," coverage_statistics ","(send nil :map) inject ","file total_branches count ","file total_branches "," map "," empty? "]}," SimpleCov FileList coverage_statistics":{"type":"method","name":"coverage_statistics","children":[],"call":[" compute_coverage_statistics "]}," SimpleCov FileList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov CoverageStatistics compute_strength":{"type":"method","name":"compute_strength","children":[],"call":["total_strength to_f / ","total_strength to_f ","total zero? "]}," SimpleCov CoverageStatistics compute_percent":{"type":"method","name":"compute_percent","children":[],"call":["covered * / ","covered * ","total zero? ","missed zero? "]}," SimpleCov CoverageStatistics initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_strength "," compute_percent "," total ","covered + "]}," SimpleCov CoverageStatistics from":{"type":"method","name":"from","children":[],"call":[]}," SimpleCov Configuration minimum_possible_coverage_exceeded":{"type":"method","name":"minimum_possible_coverage_exceeded","children":[],"call":[" warn "]}," SimpleCov Configuration raise_if_criterion_unsupported":{"type":"method","name":"raise_if_criterion_unsupported","children":[],"call":[" raise ","SUPPORTED_COVERAGE_CRITERIA  member? "," raise_criterion_unsupported "]}," SimpleCov Configuration raise_if_criterion_disabled":{"type":"method","name":"raise_if_criterion_disabled","children":[],"call":[" raise "," coverage_criterion_enabled? "," raise_if_criterion_unsupported "]}," SimpleCov Configuration coverage_start_arguments_supported?":{"type":"method","name":"coverage_start_arguments_supported?","children":[],"call":["Coverage  method arity zero? ! ","Coverage  method arity zero? ","Coverage  method arity ","Coverage  method "," require "]}," SimpleCov Configuration branch_coverage?":{"type":"method","name":"branch_coverage?","children":[],"call":[" coverage_criterion_enabled? "," branch_coverage_supported? "," coverage_criteria member? "," coverage_criteria "]}," SimpleCov Configuration clear_coverage_criteria":{"type":"method","name":"clear_coverage_criteria","children":[],"call":[]}," SimpleCov Configuration coverage_criterion_enabled?":{"type":"method","name":"coverage_criterion_enabled?","children":[],"call":[" coverage_criteria member? "," coverage_criteria "]}," SimpleCov Configuration coverage_criteria":{"type":"method","name":"coverage_criteria","children":[],"call":["Set  [] "," primary_coverage "]}," SimpleCov Configuration enable_coverage":{"type":"method","name":"enable_coverage","children":[],"call":[" coverage_criteria << "," coverage_criteria "," raise_if_criterion_unsupported "]}," SimpleCov Configuration coverage_criterion":{"type":"method","name":"coverage_criterion","children":[],"call":[" raise_if_criterion_unsupported "," primary_coverage "]}," SimpleCov Configuration print_error_status":{"type":"method","name":"print_error_status","children":[],"call":[]}," SimpleCov Combine existing_coverage":{"type":"method","name":"existing_coverage","children":[],"call":[]}," SimpleCov Combine empty_coverage?":{"type":"method","name":"empty_coverage?","children":[],"call":["(and\n  (lvar :coverage_a)\n  (lvar :coverage_b)) ! "]}," SimpleCov Combine combine":{"type":"method","name":"combine","children":[],"call":["combiner_module combine "," existing_coverage "," empty_coverage? "]}," SimpleCov Combine ResultsCombiner combine_file_coverage":{"type":"method","name":"combine_file_coverage","children":[],"call":["Combine  combine "]}," SimpleCov Combine ResultsCombiner combine_result_sets":{"type":"method","name":"combine_result_sets","children":[],"call":["file_combination []= "," combine_file_coverage ","result [] ","combined_results [] ","results_files each_with_object ","combined_results keys | ","result keys ","combined_results keys ","combined_results []= ","result_b [] ","result_a [] ","result_a keys | ","result_b keys ","result_a keys "," warn_wrong_format "," correct_format? ","combined_results keys |  each_with_object ","result_a keys |  each_with_object "]}," SimpleCov Combine ResultsCombiner combine":{"type":"method","name":"combine","children":[],"call":[" combine_result_sets ","results reduce "]}," SimpleCov Combine LinesCombiner merge_line_coverage":{"type":"method","name":"merge_line_coverage","children":[],"call":["second_val nil? ","first_val nil? ","sum zero? ","first_val to_i + ","second_val to_i ","first_val to_i ","first_val to_i +  zero? "]}," SimpleCov Combine LinesCombiner combine":{"type":"method","name":"combine","children":[],"call":[" merge_line_coverage ","coverage_a zip map ","coverage_a zip "]}," SimpleCov Combine FilesCombiner combine":{"type":"method","name":"combine","children":[],"call":["combination []= ","Combine  combine ","coverage_b [] ","coverage_a [] ","SimpleCov  branch_coverage? "]}," SimpleCov Combine BranchesCombiner combine":{"type":"method","name":"combine","children":[],"call":["a_count + ","branches_inside_a merge ","coverage_a merge "]}," SimpleCov start_coverage_measurment":{"type":"method","name":"start_coverage_measurment","children":[],"call":["Coverage  start "," branch_coverage? "]}," SimpleCov SourceFile positive_branch?":{"type":"method","name":"positive_branch?","children":[],"call":["branch_id == ","1 + ","branch_type == "]}," SimpleCov SourceFile ignore_branch?":{"type":"method","name":"ignore_branch?","children":[],"call":["condition_start_line == ","branch_type == ","condition_type == ","branch_data [] ","branch_data []  == "]}," SimpleCov SourceFile Branch badge":{"type":"method","name":"badge","children":[],"call":[" positive? "]}," SimpleCov SourceFile Branch negative?":{"type":"method","name":"negative?","children":[],"call":[" positive? ! "," positive? "]}," SimpleCov SourceFile Branch positive?":{"type":"method","name":"positive?","children":[],"call":[]}," SimpleCov Result symbolize_names_of_coverage_results":{"type":"method","name":"symbolize_names_of_coverage_results","children":[],"call":[]}," SimpleCov Configuration raise_criterion_unsupported":{"type":"method","name":"raise_criterion_unsupported","children":[],"call":[" raise "]}," SimpleCov Configuration branch_coverage_supported?":{"type":"method","name":"branch_coverage_supported?","children":[],"call":["Coverage  method arity zero? ! ","Coverage  method arity zero? ","Coverage  method arity ","Coverage  method "," require ","RUBY_ENGINE  != "," coverage_start_arguments_supported? "]}," SimpleCov Combine ResultsCombiner warn_wrong_format":{"type":"method","name":"warn_wrong_format","children":[],"call":[" warn "]}," SimpleCov Combine ResultsCombiner second_level_choice_of_criterion?":{"type":"method","name":"second_level_choice_of_criterion?","children":[],"call":["SECOND_LEVEL_KEYS  member? ","data first "]}," SimpleCov Combine ResultsCombiner matches_current_format?":{"type":"method","name":"matches_current_format?","children":[],"call":[" second_level_choice_of_criterion? ","key is_a? ","result first "]}," SimpleCov Combine ResultsCombiner correct_format?":{"type":"method","name":"correct_format?","children":[],"call":[" matches_current_format? ","result empty? "]}," SimpleCov at_exit_behavior":{"type":"method","name":"at_exit_behavior","children":[],"call":["SimpleCov  run_exit_tasks! ","SimpleCov  running ","SimpleCov  pid != ","Process  pid ","SimpleCov  pid "]}," SimpleCov SourceFile ensure_remove_undefs":{"type":"method","name":"ensure_remove_undefs","children":[],"call":["line encode! ","file_lines each ","line encoding == ","line encoding "]}," SimpleCov SourceFile set_encoding_based_on_magic_comment":{"type":"method","name":"set_encoding_based_on_magic_comment","children":[],"call":["file set_encoding ","match [] ","RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX  match ","RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX  match  [] ","RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX  RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX  match  "]}," SimpleCov SourceFile read_lines":{"type":"method","name":"read_lines","children":[],"call":["lines concat "," ensure_remove_undefs ","file readlines "," set_encoding_based_on_magic_comment "]}," SimpleCov SourceFile shebang?":{"type":"method","name":"shebang?","children":[],"call":["SHEBANG_REGEX  match? "]}," SimpleCov SourceFile load_source":{"type":"method","name":"load_source","children":[],"call":[" read_lines ","file gets ","lines << "," shebang? ","File  open "," filename "]}," Minitest plugin_simplecov_init":{"type":"method","name":"plugin_simplecov_init","children":[],"call":[]}," SimpleCov probably_running_parallel_tests?":{"type":"method","name":"probably_running_parallel_tests?","children":[],"call":["ENV  [] "]}," SimpleCov make_parallel_tests_available":{"type":"method","name":"make_parallel_tests_available","children":[],"call":[" warn "," require "," probably_running_parallel_tests? "]}," SimpleCov round_coverage":{"type":"method","name":"round_coverage","children":[],"call":["coverage floor "]}," SimpleCov process_results_and_report_error":{"type":"method","name":"process_results_and_report_error","children":[],"call":["Kernel  exit "," warn "," print_error_status ","exit_status positive? "," process_result "," result "," process_result  positive? "]}," SimpleCov ready_to_process_results?":{"type":"method","name":"ready_to_process_results?","children":[],"call":[" result? "," final_result_process? "]}," SimpleCov exit_and_report_previous_error":{"type":"method","name":"exit_and_report_previous_error","children":[],"call":["Kernel  exit "," warn "," print_error_status "]}," SimpleCov previous_error?":{"type":"method","name":"previous_error?","children":[],"call":["error_exit_status != "]}," SimpleCov UselessResultsRemover root_regx":{"type":"method","name":"root_regx","children":[],"call":[]}," SimpleCov Result time_since_creation":{"type":"method","name":"time_since_creation","children":[],"call":["Time  now - "," created_at ","Time  now "]}," Process fork_with_simplecov":{"type":"method","name":"fork_with_simplecov","children":[],"call":[" fork_without_simplecov ","block call "," block_given? ","SimpleCov  at_fork call ","Process  pid ","SimpleCov  at_fork ","SimpleCov  running "]}," SimpleCov ExitCodes MinimumOverallCoverageCheck calculate_minimum_violations":{"type":"method","name":"calculate_minimum_violations","children":[],"call":["achieved fetch < ","achieved fetch ","coverage_achieved select "," result coverage_statistics fetch percent "," result coverage_statistics fetch "," result coverage_statistics "," result "," minimum_coverage map "," minimum_coverage "]}," SimpleCov ExitCodes MinimumOverallCoverageCheck minimum_violations":{"type":"method","name":"minimum_violations","children":[],"call":[" calculate_minimum_violations "]}," SimpleCov ExitCodes MinimumOverallCoverageCheck exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," SimpleCov ExitCodes MinimumOverallCoverageCheck report":{"type":"method","name":"report","children":[],"call":["$stderr printf ","violation fetch capitalize ","violation fetch ","SimpleCov  round_coverage "," minimum_violations each "," minimum_violations "]}," SimpleCov ExitCodes MinimumOverallCoverageCheck failing?":{"type":"method","name":"failing?","children":[],"call":[" minimum_violations any? "," minimum_violations "]}," SimpleCov ExitCodes MinimumOverallCoverageCheck initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov ExitCodes MinimumCoverageByFileCheck covered_percentages":{"type":"method","name":"covered_percentages","children":[],"call":["SimpleCov  round_coverage "," result covered_percentages map "," result covered_percentages "," result "]}," SimpleCov ExitCodes MinimumCoverageByFileCheck exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," SimpleCov ExitCodes MinimumCoverageByFileCheck report":{"type":"method","name":"report","children":[],"call":["$stderr printf "," minimum_coverage_by_file "," covered_percentages min "," covered_percentages "," result least_covered_file "," result ","violation fetch capitalize ","violation fetch ","SimpleCov  round_coverage "," minimum_violations each "," minimum_violations "]}," SimpleCov ExitCodes MinimumCoverageByFileCheck failing?":{"type":"method","name":"failing?","children":[],"call":["p < "," minimum_coverage_by_file "," covered_percentages any? "," covered_percentages "," minimum_violations any? "," minimum_violations "]}," SimpleCov ExitCodes MinimumCoverageByFileCheck initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov ExitCodes MaximumCoverageDropCheck covered_percent":{"type":"method","name":"covered_percent","children":[],"call":["SimpleCov  round_coverage "," result covered_percent "," result "]}," SimpleCov ExitCodes MaximumCoverageDropCheck coverage_diff":{"type":"method","name":"coverage_diff","children":[],"call":[" last_run [] [] - "," covered_percent "," last_run [] [] "," last_run [] "," last_run "," raise "]}," SimpleCov ExitCodes MaximumCoverageDropCheck last_run":{"type":"method","name":"last_run","children":[],"call":["SimpleCov LastRun  read "]}," SimpleCov ExitCodes MaximumCoverageDropCheck exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," SimpleCov ExitCodes MaximumCoverageDropCheck report":{"type":"method","name":"report","children":[],"call":["$stderr printf "," maximum_coverage_drop "," coverage_diff ","violation [] ","SimpleCov  round_coverage ","violation [] capitalize "," coverage_drop_violations each "," coverage_drop_violations "]}," SimpleCov ExitCodes MaximumCoverageDropCheck failing?":{"type":"method","name":"failing?","children":[],"call":[" coverage_diff > "," maximum_coverage_drop "," coverage_diff "," last_run "," coverage_drop_violations any? "," coverage_drop_violations "]}," SimpleCov ExitCodes MaximumCoverageDropCheck initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SimpleCov ExitCodes ExitCodeHandling coverage_checks":{"type":"method","name":"coverage_checks","children":[],"call":["MaximumCoverageDropCheck  new ","coverage_limits maximum_coverage_drop ","MinimumCoverageByFileCheck  new ","coverage_limits minimum_coverage_by_file ","MinimumOverallCoverageCheck  new ","coverage_limits minimum_coverage "]}," SimpleCov ExitCodes ExitCodeHandling call":{"type":"method","name":"call","children":[],"call":["failing_check exit_code ","failing_check report ","checks find "," coverage_checks ","checks find  exit_code ","checks find  report "," coverage_checks  find "," coverage_ coverage_checks  "]}," SimpleCov Configuration at_fork":{"type":"method","name":"at_fork","children":[],"call":["SimpleCov  start ","SimpleCov  minimum_coverage ","SimpleCov  formatter ","SimpleCov  print_error_status= ","SimpleCov  command_name "," lambda "," block_given? "]}," SimpleCov Configuration enabled_for_subprocesses?":{"type":"method","name":"enabled_for_subprocesses?","children":[],"call":[" enable_for_subprocesses "]}," SimpleCov Configuration enable_for_subprocesses":{"type":"method","name":"enable_for_subprocesses","children":[],"call":["value nil? "]}," SimpleCov Formatter from_env":{"type":"method","name":"from_env","children":[],"call":["formatters push "," require ","env fetch "]}," SimpleCov ResultMerger adapt_pre_simplecov_0_18_result":{"type":"method","name":"adapt_pre_simplecov_0_18_result","children":[],"call":["result transform_values "]}," SimpleCov ResultMerger pre_simplecov_0_18_result?":{"type":"method","name":"pre_simplecov_0_18_result?","children":[],"call":["data is_a? ","result first "]}," SimpleCov ResultMerger adapt_result":{"type":"method","name":"adapt_result","children":[],"call":[" adapt_pre_simplecov_0_18_result "," pre_simplecov_0_18_result? "]}," SimpleCov ResultMerger read_resultset":{"type":"method","name":"read_resultset","children":[],"call":[" parse_json "," read_file "," resultset_path "," synchronize_resultset "]}," SimpleCov ResultMerger merge_coverage":{"type":"method","name":"merge_coverage","children":[],"call":["memo_command + ","Combine  combine ","results reduce ","results first ","results size == ","results size ","results empty? "]}," SimpleCov ResultMerger create_result":{"type":"method","name":"create_result","children":[],"call":["SimpleCov Result  new ","command_names reject sort join ","command_names reject sort ","command_names reject ","command_names reject sort join s reject sort join ","command_names reject sort join s reject sort ","command_names reject sort join s reject "]}," SimpleCov ResultMerger time_since_result_creation":{"type":"method","name":"time_since_result_creation","children":[],"call":["Time  now - ","Time  at ","data fetch ","Time  now "]}," SimpleCov ResultMerger within_merge_timeout?":{"type":"method","name":"within_merge_timeout?","children":[],"call":[" time_since_result_creation < ","SimpleCov  merge_timeout "," time_since_result_creation "]}," SimpleCov ResultMerger merge_valid_results":{"type":"method","name":"merge_valid_results","children":[],"call":[" merge_coverage "," adapt_result ","data fetch ","results map "," within_merge_timeout? ","results select "]}," SimpleCov ResultMerger parse_json":{"type":"method","name":"parse_json","children":[],"call":[" warn ","JSON  parse "]}," SimpleCov ResultMerger read_file":{"type":"method","name":"read_file","children":[],"call":["data length < ","data length ","data nil? ","File  read ","File  exist? ","File  read  length < ","File  read  length ","File  read  nil? "]}," SimpleCov ResultMerger parse_file":{"type":"method","name":"parse_file","children":[],"call":[" parse_json "," read_file "]}," SimpleCov ResultMerger valid_results":{"type":"method","name":"valid_results","children":[],"call":[" merge_valid_results "," parse_file "," merge_valid_ parse_file  "]}," SimpleCov FileList compute_coverage_statistics_by_file":{"type":"method","name":"compute_coverage_statistics_by_file","children":[],"call":["together [] << ","file coverage_statistics [] ","file coverage_statistics ","together [] ","SimpleCov  branch_coverage? ","@files each_with_object ","file coverage_statistics fetch "]}," SimpleCov FileList coverage_statistics_by_file":{"type":"method","name":"coverage_statistics_by_file","children":[],"call":[" compute_coverage_statistics_by_file "]}," SimpleCov ExitCodes MinimumCoverageByFileCheck compute_minimum_coverage_data":{"type":"method","name":"compute_minimum_coverage_data","children":[],"call":["SimpleCov  round_coverage "," result coverage_statistics_by_file [] map "," result coverage_statistics_by_file [] "," result coverage_statistics_by_file "," result "," minimum_coverage_by_file flat_map "," minimum_coverage_by_file ","actual_coverage percent "," result coverage_statistics_by_file fetch map "," result coverage_statistics_by_file fetch "]}," SimpleCov ExitCodes MinimumCoverageByFileCheck minimum_violations":{"type":"method","name":"minimum_violations","children":[],"call":["achieved fetch < ","achieved fetch "," compute_minimum_coverage_data select "," compute_minimum_coverage_data "]}," SimpleCov ExitCodes MaximumCoverageDropCheck last_coverage":{"type":"method","name":"last_coverage","children":[],"call":[" last_run [] [] "," last_run [] "," last_run ","criterion == ","last_coverage_percent ! "," last_run [] []  ! "]}," SimpleCov ExitCodes MaximumCoverageDropCheck compute_coverage_drop_data":{"type":"method","name":"compute_coverage_drop_data","children":[],"call":[" last_coverage - ","SimpleCov  round_coverage "," result coverage_statistics fetch percent "," result coverage_statistics fetch "," result coverage_statistics "," result "," last_coverage "," maximum_coverage_drop map "," maximum_coverage_drop "," drop_percent "]}," SimpleCov ExitCodes MaximumCoverageDropCheck coverage_drop_violations":{"type":"method","name":"coverage_drop_violations","children":[],"call":["achieved fetch < ","achieved fetch "," compute_coverage_drop_data select "," compute_coverage_drop_data "]}," SimpleCov Configuration primary_coverage":{"type":"method","name":"primary_coverage","children":[],"call":[" raise_if_criterion_disabled ","criterion nil? "]}," SimpleCov Configuration raise_on_invalid_coverage":{"type":"method","name":"raise_on_invalid_coverage","children":[],"call":[" minimum_possible_coverage_exceeded ","percent > ","coverage each_value "," raise_if_criterion_disabled ","coverage each_key "]}," SimpleCov ExitCodes MaximumCoverageDropCheck drop_percent":{"type":"method","name":"drop_percent","children":[],"call":["drop floor "," last_coverage - ","SimpleCov  round_coverage "," result coverage_statistics fetch percent "," result coverage_statistics fetch "," result coverage_statistics "," result "," last_coverage "," last_coverage -  floor "]}," SimpleCov Configuration enable_coverage_for_eval":{"type":"method","name":"enable_coverage_for_eval","children":[],"call":[" warn "," coverage_for_eval_supported? "]}," SimpleCov Configuration coverage_for_eval_enabled?":{"type":"method","name":"coverage_for_eval_enabled?","children":[],"call":[]}," SimpleCov Configuration coverage_for_eval_supported?":{"type":"method","name":"coverage_for_eval_supported?","children":[],"call":["Coverage  supported? "," require "]}," SimpleCov project_name":{"type":"method","name":"project_name","children":[],"call":["File  basename capitalize gsub ","File  basename capitalize ","File  basename "," root split last "," root split "," root "]}," ResultMerger store_result":{"type":"method","name":"store_result","children":[],"call":["f puts ","new_set to_yaml ","File  open "," resultset_path ","new_set []= ","result to_hash first ","result to_hash "," resultset ","MultiJson  encode ","JSON  pretty_generate ","MultiJson  dump ","MultiJson  respond_to? ","SimpleCov JSON  dump ","f flock ","f_ puts "," resultset_writelock "," resultset  to_yaml "," resultset  []= "]}," ResultMerger merged_result":{"type":"method","name":"merged_result","children":[],"call":["result command_name= "," results map join "," results map "," results ","SimpleCov Result  new ","result original_result merge_resultset ","result original_result "," results each "," results map sort join "," results map sort ","SimpleCov Result  new  command_name= "," SimpleCov Result  new s map join "," SimpleCov Result  new s map "," SimpleCov Result  new s ","SimpleCov Result  new  original_SimpleCov Result  new  merge_SimpleCov Result  new set ","SimpleCov Result  new  original_SimpleCov Result  new  "," SimpleCov Result  new s each "," SimpleCov Result  new s map sort join "," SimpleCov Result  new s map sort "]}," ResultMerger results":{"type":"method","name":"results","children":[],"call":["results << ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (lvar :result) :created_at)) < ","SimpleCov  merge_timeout ","Time  now - ","result created_at ","Time  now ","SimpleCov Result  from_hash "," resultset each "," resultset ","SimpleCov Result  from_hash s << ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (lvar :SimpleCov Result  from_hash ) :created_at)) < ","SimpleCov Result  from_hash  created_at "," SimpleCov Result  from_hash set each "," SimpleCov Result  from_hash set "]}," ResultMerger resultset":{"type":"method","name":"resultset","children":[],"call":["YAML  load ","File  read "," resultset_path ","File  exist? ","MultiJson  decode "," stored_data ","MultiJson  load ","MultiJson  respond_to? ","SimpleCov JSON  parse "]}," ResultMerger resultset_path":{"type":"method","name":"resultset_path","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," SimpleCov Result from_yaml":{"type":"method","name":"from_yaml","children":[],"call":[]}," SimpleCov Result to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" to_hash to_yaml "," to_hash "]}," SimpleCov Result covered_percent":{"type":"method","name":"covered_percent","children":[],"call":[" files map inject / "," files count to_f "," files count "," files "," files map inject "," files map ","100.0 * / ","missed_lines + ","100.0 * "," original_result [] each "," original_result [] ","file filename "," original_result ","@files each ","total_lines zero? "," total_lines "," covered_lines "," total_lines zero? "]}," HashMergeHelper merge_resultset":{"type":"method","name":"merge_resultset","children":[],"call":["new_resultset []= ","(or\n  (send\n    (self) :[]\n    (lvar :filename))\n  (array)) merge_resultset ","hash [] "," [] ","new_resultset each ","(send\n  (send\n    (self) :keys) :+\n  (send\n    (lvar :hash) :keys)) each "," keys + ","hash keys "," keys "]}," ArrayMergeHelper merge_resultset":{"type":"method","name":"merge_resultset","children":[],"call":["new_array []= ","local_value + ","new_array [] ","new_array [] nil? ","element nil? ","array each_with_index "," each_with_index "]}," SimpleFormatter format":{"type":"method","name":"format","children":[],"call":["output << ","file covered_percent round ","file covered_percent ","file filename ","files each ","= * ","result groups each ","result groups "]}," SimpleCov BlockFilter passes?":{"type":"method","name":"passes?","children":[],"call":[" filter_argument call ! "," filter_argument call "," filter_argument "]}," SimpleCov StringFilter passes?":{"type":"method","name":"passes?","children":[],"call":["(send\n  (send\n    (lvar :source_file) :filename) :=~\n  (regexp\n    (begin\n      (send nil :filter_argument))\n    (regopt))) ! ","source_file filename =~ "," filter_argument ","source_file filename "]}," Configuration parse_filter":{"type":"method","name":"parse_filter","children":[],"call":[" raise ","SimpleCov BlockFilter  new ","SimpleCov StringFilter  new ","filter_argument kind_of? "]}," Configuration add_group":{"type":"method","name":"add_group","children":[],"call":[" groups []= "," parse_filter "," groups "]}," Configuration add_filter":{"type":"method","name":"add_filter","children":[],"call":[" filters << "," parse_filter "," filters "]}," Configuration merge_timeout":{"type":"method","name":"merge_timeout","children":[],"call":["seconds kind_of? ","seconds nil? ! ","seconds nil? "]}," Configuration use_merging":{"type":"method","name":"use_merging","children":[],"call":["@use_merging != ","use nil? ","@use_merging == "]}," Configuration at_exit":{"type":"method","name":"at_exit","children":[],"call":["SimpleCov  result format! ","SimpleCov  result ","Proc  new "," block_given? "," running "]}," Configuration configure":{"type":"method","name":"configure","children":[],"call":[" instance_exec ","SimpleCov  usable? ","Docile  dsl_eval "]}," Configuration adapters":{"type":"method","name":"adapters","children":[],"call":["SimpleCov Adapters  new "," profiles "," warn "]}," Configuration groups":{"type":"method","name":"groups","children":[],"call":[]}," Configuration formatter":{"type":"method","name":"formatter","children":[],"call":[" raise ","formatter nil? "]}," Configuration command_name":{"type":"method","name":"command_name","children":[],"call":["ARGV  join ","name nil? ","SimpleCov CommandGuesser  guess "]}," Configuration filters":{"type":"method","name":"filters","children":[],"call":[]}," Configuration coverage_path":{"type":"method","name":"coverage_path","children":[],"call":[" system ","File  join "," coverage_dir "," root ","FileUtils  mkdir_p ","File  expand_path "]}," Configuration coverage_dir":{"type":"method","name":"coverage_dir","children":[],"call":["dir nil? "]}," Configuration root":{"type":"method","name":"root","children":[],"call":["File  expand_path ","Dir  getwd ","root nil? "]}," Adapters load":{"type":"method","name":"load","children":[],"call":["SimpleCov  configure "," [] "," raise "," has_key? ","name to_sym ","name to_sym  to_sym "]}," Adapters define":{"type":"method","name":"define","children":[],"call":[" []= "," raise "," [] nil? "," [] ","name to_sym ","name to_sym  to_sym "]}," Configuration project_name":{"type":"method","name":"project_name","children":[],"call":["File  basename capitalize gsub ","File  basename capitalize ","File  basename "," root split last "," root split "," root ","new_name kind_of? ","new_name nil? "]}," CommandGuesser guess":{"type":"method","name":"guess","children":[],"call":[" from_defined_constants "," from_command_line_options "," from_env "]}," Float round":{"type":"method","name":"round","children":[],"call":[" precisionless_round ","(send\n  (self) :*\n  (lvar :magnitude)) round / ","(send\n  (self) :*\n  (lvar :magnitude)) round "," * ","10.0 ** ","(send\n  (self) :*\n  (lvar :10.0 ** )) round / ","(send\n  (self) :*\n  (lvar :10.0 ** )) round "]}," SimpleCov Result total_lines":{"type":"method","name":"total_lines","children":[],"call":[" covered_lines + "," missed_lines "," covered_lines "]}," SimpleCov Result missed_lines":{"type":"method","name":"missed_lines","children":[],"call":["line_result == "," original_result [] each "," original_result [] ","file filename "," original_result ","@files each "]}," SimpleCov Result covered_lines":{"type":"method","name":"covered_lines","children":[],"call":["line_result > "," original_result [] each "," original_result [] ","file filename "," original_result ","@files each "]}," ResultMerger stored_data":{"type":"method","name":"stored_data","children":[],"call":["stored_data length >= ","stored_data length ","File  read "," resultset_path ","File  exist? ","File  read  length >= ","File  read  length "]}," SimpleCov Result covered_strength":{"type":"method","name":"covered_strength","children":[],"call":["m to_f / "," total_lines ","m to_f "," original_result [] each "," original_result [] ","file filename "," original_result ","@files each "," total_lines zero? "]}," FileList covered_strength":{"type":"method","name":"covered_strength","children":[],"call":["(send nil :map) inject / "," size ","(send nil :map) inject ","f covered_strength "," map "," lines_of_code == "," lines_of_code "," empty? ","(send nil :map) inject to_f / ","(send nil :map) inject to_f ","f covered_strength * ","f lines_of_code "," Float "]}," FileList covered_percent":{"type":"method","name":"covered_percent","children":[],"call":[" covered_lines * / "," lines_of_code "," covered_lines * "," covered_lines "," lines_of_code == "," empty? "," Float "]}," FileList lines_of_code":{"type":"method","name":"lines_of_code","children":[],"call":[" covered_lines + "," missed_lines "," covered_lines "]}," FileList skipped_lines":{"type":"method","name":"skipped_lines","children":[],"call":["(send nil :map) inject ","f skipped_lines count ","f skipped_lines "," map "," empty? "]}," FileList never_lines":{"type":"method","name":"never_lines","children":[],"call":["(send nil :map) inject ","f never_lines count ","f never_lines "," map "," empty? "]}," FileList missed_lines":{"type":"method","name":"missed_lines","children":[],"call":["(send nil :map) inject ","f missed_lines count ","f missed_lines "," map "," empty? "]}," FileList covered_lines":{"type":"method","name":"covered_lines","children":[],"call":["(send nil :map) inject ","f covered_lines count ","f covered_lines "," map "," empty? "]}," Configuration nocov_token":{"type":"method","name":"nocov_token","children":[],"call":["nocov_token nil? "]}," CommandGuesser from_defined_constants":{"type":"method","name":"from_defined_constants","children":[],"call":[" warn "]}," CommandGuesser from_command_line_options":{"type":"method","name":"from_command_line_options","children":[],"call":[" original_run_command "]}," LastRun write":{"type":"method","name":"write","children":[],"call":["f puts ","SimpleCov JSON  dump ","File  open "," last_run_path "]}," LastRun read":{"type":"method","name":"read","children":[],"call":["SimpleCov JSON  parse ","File  read "," last_run_path ","File  exist? "]}," LastRun last_run_path":{"type":"method","name":"last_run_path","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," JSON dump":{"type":"method","name":"dump","children":[],"call":["MultiJson  encode ","MultiJson  dump ","MultiJson  respond_to? "," JSON  pretty_generate "]}," JSON parse":{"type":"method","name":"parse","children":[],"call":["MultiJson  decode ","MultiJson  load ","MultiJson  respond_to? "]}," MultiFormatter formatters":{"type":"method","name":"formatters","children":[],"call":[]}," MultiFormatter format":{"type":"method","name":"format","children":[],"call":["STDERR  puts ","e backtrace first ","e backtrace ","e message ","e class ","formatter new format ","formatter new "," formatters map "," formatters "]}," MultiFormatter []":{"type":"method","name":"[]","children":[],"call":[]}," Configuration refuse_coverage_drop":{"type":"method","name":"refuse_coverage_drop","children":[],"call":[" maximum_coverage_drop "]}," Configuration maximum_coverage_drop":{"type":"method","name":"maximum_coverage_drop","children":[],"call":["(or\n  (lvar :coverage_drop)\n  (int 100)) to_f round ","(or\n  (lvar :coverage_drop)\n  (int 100)) to_f "]}," Configuration minimum_coverage":{"type":"method","name":"minimum_coverage","children":[],"call":["(or\n  (lvar :coverage)\n  (int 0)) to_f round ","(or\n  (lvar :coverage)\n  (int 0)) to_f "]}," Profiles load":{"type":"method","name":"load","children":[],"call":["SimpleCov  configure "," [] "," raise "," has_key? ","name to_sym ","name to_sym  to_sym "]}," Profiles define":{"type":"method","name":"define","children":[],"call":[" []= "," raise "," [] nil? "," [] ","name to_sym ","name to_sym  to_sym "]}," Configuration profiles":{"type":"method","name":"profiles","children":[],"call":["SimpleCov Profiles  new "]}," CommandGuesser from_env":{"type":"method","name":"from_env","children":[],"call":["ENV  [] ","number == ","ENV  []  == "]}," ResultMerger resultset_writelock":{"type":"method","name":"resultset_writelock","children":[],"call":["File  join ","SimpleCov  coverage_path "]}," Configuration formatters":{"type":"method","name":"formatters","children":[],"call":[" Array "," formatter ","@formatter formatters ","@formatter is_a? "]}," Configuration formatters=":{"type":"method","name":"formatters=","children":[],"call":["SimpleCov Formatter MultiFormatter  [] "]}}