{" ExpressionParser Token unknown?":{"type":"method","name":"unknown?","children":[],"call":["@kind nil? "]}," ExpressionParser Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ExpressionParser Parser number":{"type":"method","name":"number","children":[],"call":[" raise ","token value ","token kind == ","token kind ","expected_rparen kind == ","expected_rparen kind ","@lexer get_next_token "," expression ","token token value  ","token  expression  ","@lexer get_next_token  value ","@lexer get_next_token  kind == ","@lexer get_next_token  kind ","@lexer get_next_@lexer get_next_token  "]}," ExpressionParser Parser factor":{"type":"method","name":"factor","children":[],"call":["@lexer revert ","@lexer get_next_token ","token kind == ","token kind "," number ","multiplicative_operators include? ","@lexer get_next_@lexer get_next_token  ","@lexer get_next_token  kind == ","@lexer get_next_token  kind "]}," ExpressionParser Parser expression":{"type":"method","name":"expression","children":[],"call":["@lexer revert ","@lexer get_next_token ","token kind == ","token kind "," factor ","additive_operators include? ","@lexer get_next_@lexer get_next_token  ","@lexer get_next_token  kind == ","@lexer get_next_token  kind "]}," ExpressionParser Parser parse":{"type":"method","name":"parse","children":[],"call":[" raise ","expression_value <= "," expression ","expression_value >= ","expression_value != ","expression_value == ","expression_value < ","expression_value > ","token kind ","token kind == ","@lexer get_next_token ","Lexer  new "," expression  <= "," expression  >= "," expression  != "," expression  == "," expression  < "," expression  > ","@lexer get_next_token  kind ","@lexer get_next_token  kind == ","@lexer get_next_@lexer get_next_token  ","Lexer  new  get_next_token "]}," ExpressionParser Lexer revert":{"type":"method","name":"revert","children":[],"call":[]}," ExpressionParser Lexer get_next_token":{"type":"method","name":"get_next_token","children":[],"call":[" raise ","token unknown? ","token kind= ","token value= ","$& to_f ","@input lstrip! ","Token  new ","Token  new  unknown? ","Token  new  kind= ","Token  new  value= "]}," ExpressionParser Lexer initialize":{"type":"method","name":"initialize","children":[],"call":[]}}