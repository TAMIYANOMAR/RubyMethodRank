{" Persistent ssl":{"type":"method","name":"ssl","children":[],"call":["connection verify_mode= ","connection key= ","connection cert= ","connection verify_callback= ","connection ca_file= ","connection use_ssl= "," require ","store set_default_paths ","OpenSSL X509 Store  new ","connection cert_store ","connection cert_store= "," warn ","connection port ","connection address ","Object  const_defined? ! ","Object  const_defined? ","OpenSSL SSL VERIFY_PEER  == ","connection ssl_version= ","connection ca_path= ","connection verify_depth= ","connection ssl_timeout= ","connection ciphers= ","connection max_version= ","connection min_version= ","OpenSSL X509 Store  new  set_default_paths ","connection cert_OpenSSL X509 Store  new  ","connection cert_OpenSSL X509 Store  new = "]}," Persistent request":{"type":"method","name":"request","children":[],"call":[" raise "," reset "," error_message ","e class ","e message ","connection request ","Thread  current [] [] ","Thread  current [] ","Thread  current ","connection object_id "," connection_for ","req add_field "," headers each "," headers ","Net HTTP Get  new ","uri request_uri ","Hash  new "," idempotent? ! "," idempotent? "," finish ","response http_version ","@http_versions [] ","uri port ","uri host "," can_retry? ! "," can_retry? ","Thread  current [] []= ","Time  now ","req [] ","connection finish "," connection_close? "," connection_keep_alive? ! "," connection_keep_alive? ","response http_version <= ","req []= ","@override_headers each ","@headers each "," request_failed "," request_setup ","connection last_use= ","response connection_close? ","response connection_keep_alive? ! ","response connection_keep_alive? ","req connection_close? ","http request ","connection requests ","connection http "," URI ","uri hostname "," error_ error_message  ","e  error_message  "," connection_for  request ","connection Net HTTP Get  new uest ","connection  request_setup uest "," connection_for  object_id ","  connection_for _for ","Net HTTP Get  new  add_field "," request_setup  add_field ","uri Net HTTP Get  new uest_uri ","uri  request_setup uest_uri "," URI  request_ URI  ","connection request  http_version ","http request  http_version ","response connection http _version ","@connection http _versions [] "," URI  port "," URI  host ","Net HTTP Get  new  [] "," request_setup  [] "," connection_for  finish ","  connection_for _close? ","  connection_for _keep_alive? ! ","  connection_for _keep_alive? ","connection request  http_version <= ","http request  http_version <= ","response connection http _version <= ","Net HTTP Get  new  []= "," request_setup  []= "," Net HTTP Get  new uest_failed ","  request_setup uest_failed "," Net HTTP Get  new uest_setup ","  request_setup uest_setup "," connection_for  last_use= ","connection request  connection_close? ","http request  connection_close? ","response  connection_for _close? ","connection request  connection_keep_alive? ! ","http request  connection_keep_alive? ! ","response  connection_for _keep_alive? ! ","connection request  connection_keep_alive? ","http request  connection_keep_alive? ","response  connection_for _keep_alive? ","req  connection_for _close? ","Net HTTP Get  new  connection_close? "," request_setup  connection_close? ","http Net HTTP Get  new uest ","http  request_setup uest ","connection http  request "," connection_for  requests ","connection Net HTTP Get  new uests ","connection  request_setup uests "," connection_for  http ","connection connection http  "," URI  hostname "]}," Persistent reset":{"type":"method","name":"reset","children":[],"call":[" raise ","connection port ","connection address ","connection start ","connection finish ","Thread  current [] delete ","connection object_id ","Thread  current [] ","Thread  current "," finish "," start ","e set_backtrace ","Error  new ","http port ","http address ","connection http "," raisError  new  ","connError  new ction port ","connError  new ction addrError  new ss ","connError  new ction start ","connError  new ction finish ","ThrError  new ad  currError  new nt [] dError  new lError  new tError  new  ","connError  new ction objError  new ct_id ","ThrError  new ad  currError  new nt [] ","ThrError  new ad  currError  new nt ","Error  new  sError  new t_backtracError  new  ","Error  nError  new w ","connection http  port ","http addrError  new ss ","connection http  address ","connError  new ction http ","connection connection http  "]}," Persistent error_message":{"type":"method","name":"error_message","children":[],"call":["connection object_id ","Thread  current [] [] ","Thread  current [] ","Thread  current ","Time  now - ","Time  now ","Thread  current [] [] - ","connection http object_id ","connection http ","connection requests ","connection last_use ","connection Thread  current [] []  ","connection Thread  current [] [] -  "]}," Persistent connection_for":{"type":"method","name":"connection_for","children":[],"call":[" raise ","connection port ","connection address ","connection start ","connection started? "," ssl ","connection started? ! ","uri scheme == ","uri scheme ","connections [] ","Net HTTP  new ","uri port ","uri host ","(send\n  (lvar :uri) :host) join ","Thread  current [] ","Thread  current ","connection set_debug_output ","net_http_args concat ","connection_id << ","net_http_args join ","connection read_timeout= ","connection open_timeout= ","connections []= ","Hash  new ","socket io setsockopt ","socket io ","connection instance_variable_get ","Socket  const_defined? ","@socket_options each ","uri scheme downcase == ","uri scheme downcase "," http_class new "," http_class "," reset ","last_used > "," max_age ","Thread  current [] [] ","connection object_id "," ssl_cleanup ","h []= "," cleanup "," expired? ","connection proxy_port ","connection proxy_address "," start "," proxy_bypass? ! "," proxy_bypass? ","connection keep_alive_timeout= ","connection respond_to? ","@pool checkin ","http port ","http proxy_port ","http address ","http proxy_address ","http keep_alive_timeout= ","http read_timeout= ","http started? ! ","http started? ","connection ressl ","connection ssl_generation != ","connection ssl_generation ","connection http ","@pool checkout ","http write_timeout= ","http respond_to? ","uri hostname ","http max_retries= ","connections []  port ","@pool checkout  port ","connections []  address ","@pool checkout  address ","connections []  start ","@pool checkout  start ","connections []  started? ","@pool checkout  started? ","connections []  started? ! ","@pool checkout  started? ! ","connections [] s [] ","@pool checkout s [] ","Thread  current []  [] ","Thread  current [] []  [] ","connections []  set_debug_output ","@pool checkout  set_debug_output ","net_connection http _args concat ","connections [] _id << ","@pool checkout _id << ","(send\n  (lvar :uri) :host) join  << ","net_http_args join  << ","net_connection http _args join ","connections []  read_timeout= ","@pool checkout  read_timeout= ","connections []  open_timeout= ","@pool checkout  open_timeout= ","connections [] s []= ","@pool checkout s []= ","Thread  current []  []= ","Thread  current [] []  []= ","connection instance_variable_get  io setsockopt ","connection instance_variable_get  io ","connections []  instance_variable_get ","@pool checkout  instance_variable_get ","@connection instance_variable_get _options each "," connection http _class new "," connection http _class ","Thread  current [] []  > ","connections []  object_id ","@pool checkout  object_id ","connections []  proxy_port ","@pool checkout  proxy_port ","connections []  proxy_address ","@pool checkout  proxy_address ","connections []  keep_alive_timeout= ","@pool checkout  keep_alive_timeout= ","connections []  respond_to? ","@pool checkout  respond_to? ","connection http  port ","connection http  proxy_port ","connection http  address ","connection http  proxy_address ","connection http  keep_alive_timeout= ","connection http  read_timeout= ","connection http  started? ! ","connection http  started? ","connections []  ressl ","@pool checkout  ressl ","connections []  ssl_generation != ","@pool checkout  ssl_generation != ","connections []  ssl_generation ","@pool checkout  ssl_generation ","connections []  http ","@pool checkout  http ","connection connection http  ","connection http  write_timeout= ","connection http  respond_to? ","connection http  max_retries= "]}," Persistent initialize":{"type":"method","name":"initialize","children":[],"call":["key intern ","(str \"net_http_persistent\") compact join ","(str \"net_http_persistent\") compact ","(nil) join ","@proxy_uri password ","@proxy_uri user ","@proxy_uri port ","@proxy_uri host "," raise "," proxy_from_env ","@socket_options << ","Socket  const_defined? ","(lvar :key) join intern ","(lvar :key) join "," proxy= ","OpenSSL SSL  const_defined? ","@ruby_1 ! ","RUBY_VERSION  < ","Net HTTP Persistent Connection  new ","Net HTTP Persistent Pool  new ","(str \"net_http_persistent\") compact join  intern ","(str \"net_http_persistent\") compact  intern ","(lvar :(str \"net_http_persistent\") compact join ) join intern ","(lvar :(str \"net_http_persistent\") compact ) join intern ","(lvar :(str \"net_http_persistent\") compact join ) join ","(lvar :(str \"net_http_persistent\") compact ) join ","RUBY_VERSION  <  ! "]}," BufferedIO rbuf_fill":{"type":"method","name":"rbuf_fill","children":[],"call":["@rbuf << ","@io sysread "," timeout "," raise ","e message ","IO  select ","@io read_nonblock ","@io respond_to? "]}," Persistent shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  current []= ","Thread  current ","connection finish ","Thread  current [] each ","Thread  current [] ","connections each ","thread []= ","thread [] "," ssl_cleanup "," reconnect_ssl "," cleanup "," reconnect ","http finish ","@pool available shutdown ","@pool available ","@pool shutdown ","Thread  current []  each ","thread []  each "]}," Persistent proxy_from_env":{"type":"method","name":"proxy_from_env","children":[],"call":["uri password= "," escape ","ENV  [] ","uri user= ","uri password ","uri user ","URI  parse "," normalize_uri ","env_proxy empty? ","env_proxy nil? "," URI ","uri query= ","env_no_proxy == ","URI  parse  password= "," URI  password= ","URI  parse  user= "," URI  user= ","URI  parse  password "," URI  password ","URI  parse  user "," URI  user "," normalize_URI  parse  "," normalize_ URI  ","URI  parse  query= "," URI  query= "]}," Persistent normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["uri =~ "]}," Persistent idempotent?":{"type":"method","name":"idempotent?","children":[],"call":["req method "]}," Persistent escape":{"type":"method","name":"escape","children":[],"call":["URI  escape ","CGI  escape "]}," Persistent finish":{"type":"method","name":"finish","children":[],"call":["connection finish ","Thread  current [] delete ","connection object_id ","Thread  current [] ","Thread  current ","requests delete ","thread [] ","connection http instance_variable_set ","connection http ","thread []  delete "]}," Persistent http_version":{"type":"method","name":"http_version","children":[],"call":["@http_versions [] ","uri port ","uri host ","uri hostname "]}," Persistent shutdown_in_all_threads":{"type":"method","name":"shutdown_in_all_threads","children":[],"call":[" shutdown ","Thread  list each ","Thread  list "]}," Persistent pipeline":{"type":"method","name":"pipeline","children":[],"call":["connection pipeline "," connection_for ","connection http pipeline ","connection http "," connection_for  pipeline ","  connection_for _for "," connection_for  http pipeline "," connection_for  http "]}," Persistent can_retry?":{"type":"method","name":"can_retry?","children":[],"call":[" idempotent? "," retry_change_requests "," idempotent? ! "]}," Persistent http_class":{"type":"method","name":"http_class","children":[],"call":["@reuse_ssl_sessions ! ","Object  const_defined? ","(sym :FakeWeb) any? ","(sym :Artifice) any? ","RUBY_VERSION  > "]}," SSLReuse connect":{"type":"method","name":"connect","children":[],"call":[" on_connect ","s session ","s post_connection_check ","@ssl_context verify_mode != ","@ssl_context verify_mode ","s connect ","HTTPResponse  read_new value ","HTTPResponse  read_new ","@socket writeline ","credential delete! ","(dstr\n  (begin\n    (send nil :proxy_user))\n  (str \":\")\n  (begin\n    (send nil :proxy_pass))) pack "," proxy_pass "," proxy_user "," sprintf "," proxy? "," use_ssl? ","@socket debug_output= ","@socket read_timeout= ","Net BufferedIO  new ","s sync_close= ","s session= ","OpenSSL SSL SSLSocket  new ","@ssl_context verify_mode= "," warn "," D ","TCPSocket  open "," conn_port "," conn_address "," timeout "," raise ","@socket close ","@socket closed? ! ","@socket closed? ","s hostname= ","s respond_to? ","@socket continue_timeout= ","@socket respond_to? ","@ssl_context set_params ","OpenSSL SSL SSLContext  new ","ssl_parameters []= "," instance_variable_get ","iv_list include? ","(str \"@\") intern ","SSL_ATTRIBUTES  each "," instance_variables ","Hash  new ","Net HTTPResponse  read_new value ","Net HTTPResponse  read_new ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new eOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ion ","OpenSSL SSL SSLSocket  new  poOpenSSL SSL SSLSocket  new t_connection_check ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode != ","OpenSSL SSL SSLContext  new  verify_mode != ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode ","OpenSSL SSL SSLContext  new  verify_mode ","OpenSSL SSL SSLSocket  new  connect ","HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new value ","HTTPResponse  read_new  instance_variable_get  ","HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new ","Net BufferedIO  new  writeline ","@OpenSSL SSL SSLSocket  new ocket writeline ","(dstr\n  (begin\n    (send nil :proxy_user))\n  (str \":\")\n  (begin\n    (send nil :proxy_pass))) pack  delete! ","(dOpenSSL SSL SSLSocket  new tr\n  (begin\n    (OpenSSL SSL SSLSocket  new end nil :proxy_uOpenSSL SSL SSLSocket  new er))\n  (OpenSSL SSL SSLSocket  new tr \":\")\n  (begin\n    (OpenSSL SSL SSLSocket  new end nil :proxy_paOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ))) pack "," proxy_paOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new  "," proxy_uOpenSSL SSL SSLSocket  new er "," OpenSSL SSL SSLSocket  new printf "," uOpenSSL SSL SSLSocket  new e_OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l? ","Net BufferedIO  new  debug_output= ","@OpenSSL SSL SSLSocket  new ocket debug_output= ","Net BufferedIO  new  read_timeout= ","@OpenSSL SSL SSLSocket  new ocket read_timeout= ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new ync_cloOpenSSL SSL SSLSocket  new e= ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new eOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ion= ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode= ","OpenSSL SSL SSLContext  new  verify_mode= "," conn_addreOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new  "," raiOpenSSL SSL SSLSocket  new e ","Net BufferedIO  new  close ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new e ","Net BufferedIO  new  closed? ! ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new ed? ! ","Net BufferedIO  new  closed? ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new ed? ","OpenSSL SSL SSLSocket  new  hoOpenSSL SSL SSLSocket  new tname= ","OpenSSL SSL SSLSocket  new  reOpenSSL SSL SSLSocket  new pond_to? ","Net BufferedIO  new  continue_timeout= ","@OpenSSL SSL SSLSocket  new ocket continue_timeout= ","Net BufferedIO  new  respond_to? ","@OpenSSL SSL SSLSocket  new ocket reOpenSSL SSL SSLSocket  new pond_to? ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context OpenSSL SSL SSLSocket  new et_paramOpenSSL SSL SSLSocket  new  ","OpenSSL SSL SSLContext  new  set_params ","OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_parameterOpenSSL SSL SSLSocket  new  []= ","Hash  new  []= "," inOpenSSL SSL SSLSocket  new tance_variable_get ","iv_liOpenSSL SSL SSLSocket  new t include? "," instance_variables  include? ","(OpenSSL SSL SSLSocket  new tr \"@\") intern "," inOpenSSL SSL SSLSocket  new tance_variableOpenSSL SSL SSLSocket  new  ","HaOpenSSL SSL SSLSocket  new h  new ","Net HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new value ","Net HTTPResponse  read_new  instance_variable_get  ","Net HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new "]}," SSLReuse initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Persistent max_age":{"type":"method","name":"max_age","children":[],"call":["Time  now - ","Time  now ","Time  now + "]}," Persistent connection_keep_alive?":{"type":"method","name":"connection_keep_alive?","children":[],"call":["header [] =~ ","header [] ","header connection_keep_alive? "]}," Persistent connection_close?":{"type":"method","name":"connection_close?","children":[],"call":["header [] =~ ","header [] ","header connection_close? "]}," Persistent verify_callback=":{"type":"method","name":"verify_callback=","children":[],"call":[" reconnect_ssl "]}," Persistent verify_mode=":{"type":"method","name":"verify_mode=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_cleanup":{"type":"method","name":"ssl_cleanup","children":[],"call":["Thread  current [] delete ","ssl_conn object_id ","Thread  current [] ","Thread  current "," finish ","ssl_conns each_value ","(erange\n  (int 0)\n  (send nil :ssl_generation)) each "," ssl_generation "," cleanup ","Thread  current [] delete  each_value "]}," Persistent reconnect_ssl":{"type":"method","name":"reconnect_ssl","children":[],"call":[]}," Persistent private_key=":{"type":"method","name":"private_key=","children":[],"call":[" reconnect_ssl "]}," Persistent cert_store=":{"type":"method","name":"cert_store=","children":[],"call":[" reconnect_ssl "]}," Persistent ca_file=":{"type":"method","name":"ca_file=","children":[],"call":[" reconnect_ssl "]}," Persistent certificate=":{"type":"method","name":"certificate=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_version=":{"type":"method","name":"ssl_version=","children":[],"call":[" reconnect_ssl "]}," Persistent reconnect":{"type":"method","name":"reconnect","children":[],"call":[]}," Persistent proxy=":{"type":"method","name":"proxy=","children":[],"call":[" reconnect_ssl "," reconnect ","(nil) join ","@proxy_uri password ","@proxy_uri user ","@proxy_uri port ","@proxy_uri host "," raise "," proxy_from_env ","x empty? ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :CGI) :parse\n            (send\n              (ivar :@proxy_uri) :query)) :[]\n          (str \"no_proxy\")) :join\n        (str \",\")) :downcase) :split\n    (str \",\")) :map) reject ","x strip ","CGI  parse [] join downcase split map ","CGI  parse [] join downcase split ","CGI  parse [] join downcase ","CGI  parse [] join ","CGI  parse [] ","CGI  parse ","@proxy_uri query ","@no_proxy clear ","@proxy_uri password= "," unescape ","@proxy_uri user= ","@proxy_uri hostname "]}," Persistent cleanup":{"type":"method","name":"cleanup","children":[],"call":["timeouts delete ","conn object_id "," finish ","conns each_value ","thread [] delete ","thread [] ","(erange\n  (int 0)\n  (lvar :generation)) each ","thread []  delete ","thread [] delete  each_value "]}," Persistent expired?":{"type":"method","name":"expired?","children":[],"call":["Time  now - > ","Time  now - ","Time  now ","Thread  current [] [] ","connection object_id ","Thread  current [] ","Thread  current ","@idle_timeout zero? ","requests >= ","connection last_use ","connection requests >= ","connection requests ","Thread  current [] []  >= ","connection Thread  current [] []  >= ","connection Thread  current [] []  "]}," Persistent proxy_bypass?":{"type":"method","name":"proxy_bypass?","children":[],"call":["host_port [] == ","host_port [] ","name length ","name length -@ ","host [] == ","host [] ","@no_proxy each ","(lvar :host) join ","host downcase ","(lvar :host) join  [] == ","host downcase _port [] == ","(lvar :host) join  [] ","host downcase _port [] ","host downcase  [] == ","host downcase  [] ","(lvar :host downcase ) join ","host downcase  downcase "]}," Persistent start":{"type":"method","name":"start","children":[],"call":["socket io setsockopt ","socket io ","@socket_options each ","connection instance_variable_get ","connection start ","connection open_timeout= ","connection set_debug_output ","http instance_variable_get ","http start ","http open_timeout= ","http set_debug_output ","connection instance_variable_get  io setsockopt ","http instance_variable_get  io setsockopt ","connection instance_variable_get  io ","http instance_variable_get  io ","@connection instance_variable_get _options each ","@http instance_variable_get _options each "]}," Persistent detect_idle_timeout":{"type":"method","name":"detect_idle_timeout","children":[],"call":[]}," Persistent request_setup":{"type":"method","name":"request_setup","children":[],"call":["req add_field ","req [] ","req []= ","@override_headers each ","@headers each ","Net HTTP Get  new ","req_or_uri request_uri ","URI  === ","req_or_uri respond_to? ","Net HTTP Get  new  add_field ","Net HTTP Get  new  [] ","Net HTTP Get  new  []= ","Net HTTP Get  new _or_uri Net HTTP Get  new uest_uri ","Net HTTP Get  new _or_uri respond_to? "]}," Persistent request_failed":{"type":"method","name":"request_failed","children":[],"call":[" raise ","exception backtrace "," finish "," error_message ","exception class ","exception message "]}," Persistent unescape":{"type":"method","name":"unescape","children":[],"call":["CGI  unescape "]}," Persistent verify_depth=":{"type":"method","name":"verify_depth=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_timeout=":{"type":"method","name":"ssl_timeout=","children":[],"call":[" reconnect_ssl "]}," Persistent ciphers=":{"type":"method","name":"ciphers=","children":[],"call":[" reconnect_ssl "]}," Persistent ca_path=":{"type":"method","name":"ca_path=","children":[],"call":[" reconnect_ssl "]}," TimedStackMulti try_create":{"type":"method","name":"try_create","children":[],"call":["@create_block call "," lru_update ","@created < ","@ques [] pop ","@ques [] ","@lru delete ","@lru first ","@enqueued >= ","@created >= ","options [] "]}," TimedStackMulti store_connection":{"type":"method","name":"store_connection","children":[],"call":["@ques [] push ","@ques [] ","options [] "]}," TimedStackMulti shutdown_connections":{"type":"method","name":"shutdown_connections","children":[],"call":["@ques each_key "]}," TimedStackMulti lru_update":{"type":"method","name":"lru_update","children":[],"call":["@lru []= ","@lru delete "]}," TimedStackMulti fetch_connection":{"type":"method","name":"fetch_connection","children":[],"call":["@ques [] pop ","@ques [] "," lru_update ","options [] "]}," TimedStackMulti connection_stored?":{"type":"method","name":"connection_stored?","children":[],"call":["@ques [] empty? ! ","@ques [] empty? ","@ques [] ","options [] "]}," TimedStackMulti length":{"type":"method","name":"length","children":[],"call":["@max - + ","@max - "]}," TimedStackMulti empty?":{"type":"method","name":"empty?","children":[],"call":["(send\n  (ivar :@created) :-\n  (ivar :@enqueued)) >= ","@created - "]}," TimedStackMulti initialize":{"type":"method","name":"initialize","children":[],"call":[" object_id ","h []= ","Hash  new "," class hash_of_arrays "," class "]}," Pool checkout":{"type":"method","name":"checkout","children":[],"call":["stack push ","stack last ","@available pop ","stack empty? ","stacks [] ","h []= ","Hash  new ","Thread  current [] ","Thread  current ","stacks []  push ","stacks []  last ","stacks []  empty? ","stacks [] s [] "]}," Pool checkin":{"type":"method","name":"checkin","children":[],"call":["@available push ","stack empty? ","stack pop "," raise ","Thread  current [] [] ","Thread  current [] ","Thread  current ","Thread  current []= ","Thread  current [] empty? ","Thread  current [] delete ","connections clear ","connections each ","stacks each ","net_http_args [] ","net_http_args size == ","net_http_args size ","net_http_args is_a? ","Thread  current [] []  empty? ","Thread  current [] []  pop ","stack pop ections clear ","stack pop ections each ","Thread  current [] [] s each ","Thread  current []  each "]}," Pool initialize":{"type":"method","name":"initialize","children":[],"call":["@available object_id ","Net HTTP Persistent TimedStackMulti  new ","Net HTTP Persistent TimedStackMulti  new  object_id "]}," Connection ressl":{"type":"method","name":"ressl","children":[],"call":[" finish "]}," Connection reset":{"type":"method","name":"reset","children":[],"call":[]}," Connection finish":{"type":"method","name":"finish","children":[],"call":[" reset ","@http finish "]}," Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","http_class new "]}," Persistent max_version=":{"type":"method","name":"max_version=","children":[],"call":[" reconnect_ssl "]}," Persistent min_version=":{"type":"method","name":"min_version=","children":[],"call":[" reconnect_ssl "]}," Pool shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  current []= ","Thread  current "]}," TimedStackMulti hash_of_arrays":{"type":"method","name":"hash_of_arrays","children":[],"call":[]}," Persistent max_retries=":{"type":"method","name":"max_retries=","children":[],"call":[" reconnect "," raise ","retries < ","retries to_int ","retries to_int  < ","retries to_int  to_int "]}}