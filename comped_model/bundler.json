{" Bundler logger":{"type":"method","name":"logger","children":[],"call":["logger formatter= "," proc ","Logger  new ","Logger  new  formatter= "]}," Bundler ManifestBuilder gem":{"type":"method","name":"gem","children":[],"call":["@manifest_file dependencies << ","Dependency  new ","options merge ","@manifest_file dependencies ","args last ","args pop ","args last is_a? ","dep require ","@manifest_file Dependency  new endencies << ","args pop  merge ","@manifest_file Dependency  new endencies ","Dependency  new  require "]}," Bundler ManifestBuilder sources":{"type":"method","name":"sources","children":[],"call":["@manifest_file sources "]}," Bundler ManifestBuilder source":{"type":"method","name":"source","children":[],"call":["@manifest_file sources uniq! ","@manifest_file sources ","@manifest_file sources << ","@manifest_file sources include? ","Source  new ","@manifest_file add_source ","@manifest_file Source  new s uniq! ","@manifest_file Source  new s ","@manifest_file Source  new s << ","@manifest_file Source  new s include? ","@manifest_file add_Source  new  "]}," Bundler ManifestBuilder disable_system_gems":{"type":"method","name":"disable_system_gems","children":[],"call":["@manifest_file system_gems= "]}," Bundler ManifestBuilder disable_rubygems":{"type":"method","name":"disable_rubygems","children":[],"call":["@manifest_file rubygems= "]}," Bundler ManifestBuilder bin_path":{"type":"method","name":"bin_path","children":[],"call":["@manifest_file bindir= ","(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send\n      (ivar :@manifest_file) :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path ","@manifest_file root join ","@manifest_file root ","path relative? ","Pathname  new ","(if\n  (send\n    (lvar :Pathname  new ) :relative?)\n  (send\n    (send\n      (ivar :@manifest_file) :root) :join\n    (lvar :Pathname  new ))\n  (lvar :Pathname  new )) expand_Pathname  new  ","Pathname  new  relative? "]}," Bundler ManifestBuilder bundle_path":{"type":"method","name":"bundle_path","children":[],"call":["@manifest_file gem_path= ","(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send\n      (ivar :@manifest_file) :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path ","@manifest_file root join ","@manifest_file root ","path relative? ","Pathname  new ","@manifest_file gem_Pathname  new = ","(if\n  (send\n    (lvar :Pathname  new ) :relative?)\n  (send\n    (send\n      (ivar :@manifest_file) :root) :join\n    (lvar :Pathname  new ))\n  (lvar :Pathname  new )) expand_Pathname  new  ","Pathname  new  relative? "]}," Bundler ManifestBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler ManifestBuilder load":{"type":"method","name":"load","children":[],"call":[]}," Bundler ManifestBuilder build":{"type":"method","name":"build","children":[],"call":[]}," Bundler Resolver resolve_requirement":{"type":"method","name":"resolve_requirement","children":[],"call":[" resolve "," catch ","requirement name ","reqs << ","dep required_by << ","dep required_by ","dep type == ","dep type ","spec dependencies each ","spec dependencies ","activated []= ","spec name ","spec required_by replace ","requirement required_by ","spec required_by ","@stack slice! ","@stack << ","@stack length ","spec required_by << ","dep required_by replace ","dep version_requirements ","dep name "," debug ","(send\n  (send\n    (lvar :spec) :required_by) :map) join ","d version_requirements ","d name ","spec required_by map ","spec version ","dep requirement ","spec bundler_dependencies each ","spec bundler_dependencies ","d requirement ","dependencies each ","spec_group activate_platform ","requirement __platform ","(send\n  (send\n    (lvar :spec_group) :required_by) :map) join ","spec_group required_by map ","spec_group required_by ","spec_group version ","spec_group name ","spec_group required_by << ","spec_group required_by replace ","(send\n  (send\n    (send nil :spec) :required_by) :map) join "," spec required_by map "," spec required_by "," spec "," spec version "," spec name "," clear_search_cache "," gems_size ","@gems_size [] "," safe_catch ","spec spec_group activate_platform  each ","spec spec_group activate_platform  ","@stack @stack length  ","spec bundler_spec_group activate_platform  each ","spec bundler_spec_group activate_platform  ","spec_group activate_platform  each "]}," Bundler Resolver resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve_requirement ","activated dup ","reqs dup ","@index search reverse_each ","@index search "," throw ","parent name ","existing required_by last ","existing required_by ","current required_by last ","current required_by ","@errors []= ","existing name "," resolve ","@errors delete ","current version_requirements satisfied_by? ","existing version ","current version_requirements ","activated [] ","current name ","reqs shift ","@index search size ","req name ","reqs sort_by ","reqs empty? ","Gem  source_index ","conflicts include? ","@stack reverse_each ","conflicts empty? ! ","conflicts empty? ","current required_by empty? ","conflicts << ","matching_versions reverse_each ","Set  new ","existing required_by last name ","Bundler  logger warn ","Bundler  logger "," raise ","matching_versions empty? "," search "," search size ","a name ","a version_requirements prerelease? ","a version_requirements "," debug ","(send\n  (send\n    (lvar :current) :required_by) :map) join ","d version_requirements ","d name ","current required_by map ","Requirements:\n + ","(send\n  (lvar :reqs) :map) join ","r version_requirements ","r name ","reqs map ","Activated:\n + ","(send\n  (send\n    (lvar :activated) :values) :map) join ","a version ","activated values map ","activated values ","@errors [] "," print ","STDIN  gets ","@by_gem [] ","current source to_s ","current source ","message << ","versions join ","versions any? ","s version ","@source_requirements [] [] map ","@source_requirements [] [] ","@source_requirements [] ","d requirement ","current requirement satisfied_by? ","current requirement ","r requirement ","a requirement prerelease? ","a requirement ","@index sources include? ","@index sources ","Gem Dependency  new ","reqs first type ","reqs first ","ENV  [] ","activated [] ! ","reqs first name == ","reqs first name ","@missing_gems [] ","@missing_gems [] >= ","base first version ","base first ","base empty? ! ","base empty? ","@base [] "," version_conflict ","existing respond_to? ","reqs concat ","existing activate_platform ","current __platform ","activated []= "," search first ","DepProxy  new ","existing ! ","current name == "," successify ","existing required_by last ! ","existing respond_to? ! "," p ","required_by name ","parent name != ","existing required_by << "," gems_size ","@index source_types include? ","@index source_types ","@gems_size [] ","dep type == ","dep type ","dependencies each ","GemVersionPromoter  new ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :req_name)\n    (send\n      (send\n        (send\n          (lvar :current) :required_by) :last) :name))) last ","@stack & ","current required_by last name ","@errors reverse_each ","current required_by empty? ! ","Bundler  ui info ","Bundler  ui ","(send\n  (ivar :@iteration_counter) :%\n  (int 10000)) == ","@iteration_counter % ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :name)\n    (send\n      (send\n        (send\n          (lvar :current) :required_by) :last) :name))) last "," indicate_progress "," safe_throw ","depth + ","$stderr puts ","  * "," activate_gem ","state possibles pop ","state possibles ","states << ","State  new "," resolve_conflict "," handle_conflict ","parent name == ","parent nil? "," other_possible? ","existing required_by [] ","state possibles any? "," other_possible? ! "," state_any? ","i name ","states reverse detect ","states reverse ","@prereleases_cache [] "," resolve_state possibles pop  ","activated dup  dup ","parent current name  ","current required_by last  name "," handle_conflict  name ","activated []  required_by last "," search first  required_by last ","activated []  required_by "," search first  required_by ","reqs shift  required_by last ","Gem Dependency  new  required_by last ","reqs shift  required_by ","Gem Dependency  new  required_by ","activated []  name "," search first  name ","existing current name  ","reqs shift  version_requirements satisfied_by? ","Gem Dependency  new  version_requirements satisfied_by? ","current base first version _requirements satisfied_by? ","current version_state possibles pop s satisfied_by? ","activated []  version "," search first  version ","existing base first version  ","reqs shift  version_requirements ","Gem Dependency  new  version_requirements ","current base first version _requirements ","current version_state possibles pop s ","activated dup  [] ","reqs shift  name ","Gem Dependency  new  name ","current current name  ","req current name  "," resolve_requirement s include? ","Set  new  include? "," resolve_requirement s empty? ! ","Set  new  empty? ! "," resolve_requirement s empty? ","Set  new  empty? ","reqs shift  required_by empty? ","Gem Dependency  new  required_by empty? "," resolve_requirement s << ","Set  new  << ","@index search  reverse_each "," search  reverse_each ","matching_base first version s reverse_each ","activated []  required_by last name "," search first  required_by last name ","existing required_by last current name  ","@index search  empty? "," search  empty? ","matching_base first version s empty? ","a current name  ","a base first version _requirements prerelease? ","a version_state possibles pop s prerelease? ","a base first version _requirements ","a version_state possibles pop s ","(send\n  (send\n    (lvar :reqs shift ) :required_by) :map) join ","(send\n  (send\n    (lvar :Gem Dependency  new ) :required_by) :map) join ","d base first version _requirements ","d version_state possibles pop s ","d current name  ","reqs shift  required_by map ","Gem Dependency  new  required_by map ","r base first version _requirements ","r version_state possibles pop s ","r current name  ","(send\n  (send\n    (lvar :activated dup ) :values) :map) join ","a base first version  ","activated dup  values map ","activated dup  values ","reqs shift  source to_s ","Gem Dependency  new  source to_s ","reqs shift  source ","Gem Dependency  new  source ","base first version s join ","base first version s any? ","s base first version  ","@source_state possibles pop s [] [] map ","@source_state possibles pop s [] [] ","@source_state possibles pop s [] ","d state possibles pop  ","reqs shift  requirement satisfied_by? ","Gem Dependency  new  requirement satisfied_by? ","current state possibles pop  satisfied_by? ","reqs shift  requirement ","Gem Dependency  new  requirement ","current state possibles pop  ","r state possibles pop  ","a state possibles pop  prerelease? ","a state possibles pop  ","activated dup  [] ! ","reqs first current name  == ","reqs first current name  ","base first base first version  ","@base []  first version ","@base []  first ","@base []  empty? ! ","@base []  empty? ","@@base []  [] "," version_ resolve_requirement  "," base first version _conflict ","activated []  respond_to? "," search first  respond_to? ","activated []  activate_platform "," search first  activate_platform ","reqs shift  __platform ","Gem Dependency  new  __platform ","activated dup  []= ","activated []  ! "," search first  ! ","reqs shift  name == ","Gem Dependency  new  name == ","current current name  == ","activated []  required_by last ! "," search first  required_by last ! ","activated []  respond_to? ! "," search first  respond_to? ! ","required_by current name  ","parent current name  != ","current required_by last  name != "," handle_conflict  name != ","activated []  required_by << "," search first  required_by << ","existing activate_platform  each ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :req_name)\n    (send\n      (send\n        (send\n          (lvar :reqs shift ) :required_by) :last) :name))) last ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :req_name)\n    (send\n      (send\n        (send\n          (lvar :Gem Dependency  new ) :required_by) :last) :name))) last ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :req_current name )\n    (send\n      (send\n        (send\n          (lvar :current) :required_by) :last) :current name ))) last ","reqs shift  required_by last name ","Gem Dependency  new  required_by last name ","current required_by last current name  ","reqs shift  required_by empty? ! ","Gem Dependency  new  required_by empty? ! ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :name)\n    (send\n      (send\n        (send\n          (lvar :reqs shift ) :required_by) :last) :name))) last ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :name)\n    (send\n      (send\n        (send\n          (lvar :Gem Dependency  new ) :required_by) :last) :name))) last ","(send\n  (ivar :@stack) :&\n  (array\n    (lvar :current name )\n    (send\n      (send\n        (send\n          (lvar :current) :required_by) :last) :current name ))) last ","State  new  possibles pop ","State  new  possibles ","State  new s << "," resolve_ resolve_requirement  "," handle_ resolve_requirement  ","parent current name  == ","current required_by last  name == "," handle_conflict  name == ","current required_by last  nil? "," handle_conflict  nil? ","activated []  required_by [] "," search first  required_by [] ","State  new  possibles any? "," State  new _any? ","i current name  ","State  new s reverse detect ","State  new s reverse "]}," Bundler Resolver initialize":{"type":"method","name":"initialize","children":[],"call":["@specs [] []= ","spec version ","@specs [] ","spec name ","Gem Platform  match ","spec platform ","spec source= ","source gems values each ","source gems values ","source gems ","sources reverse_each ","h []= ","Hash  new ","@specs [] << ","s version == ","s version ","@specs [] any? ","(lvar :specs) flatten compact each ","(lvar :specs) flatten compact ","(lvar :specs) flatten ","source gems each ","sources each ","s platform == ","s platform ","specs compact each ","specs compact ","specs is_a? ","@base_dg add_root_vertex ","Dependency  new ","ls version ","ls name ","@base each ","Molinillo DependencyGraph  new ","Molinillo Resolver  new ","k prerelease? ","Gem Version  create ","@base_dg add_vertex ","d name ","additional_base_requirements each ","DepProxy  new ","ls platform ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Bundler  feature_flag allow_bundler_dependency_conflicts? ","@gem_version_promoter major? ! ","@gem_version_promoter major? ","Bundler  feature_flag use_gem_version_promoter_for_major_updates? ","Time  now ","Bundler  feature_flag disable_multisource? ","@source_requirements [] nil? ","@source_requirements [] ","platforms == "," generic == "," generic ","(send\n  (lvar :platforms) :-\n  (array\n    (lvar :p))) any? ","platforms - ","p != ","platforms reject ","DepProxy  get_proxy ","index_requirements []= ","source specs ","name == ","source_requirements each_with_object ","ls source= "," source_for ","@source_requirements [] is_a? ","base materialized_for_resolution ","base each ","Resolver Base  new ","base source_requirements ","Molinillo DependencyGraph  new  add_root_vertex ","Resolver Base  new _dg add_root_vertex ","Resolver Base  new  each ","Molinillo DependencyGraph  new  add_vertex ","Resolver Base  new _dg add_vertex ","Bundler  feature_flag allow_bundler_Dependency  new endency_conflicts? ","base source_requirements  [] nil? ","base source_requirements  [] ","base source_requirements  [] is_a? "]}," Gem Specification required_by":{"type":"method","name":"required_by","children":[],"call":[]}," Gem Dependency required_by":{"type":"method","name":"required_by","children":[],"call":[]}," Bundler Repository installed?":{"type":"method","name":"installed?","children":[],"call":["File  basename == ","File  basename "," gems any? "," gems "," spec_files any? "," spec_files "]}," Bundler Repository gems":{"type":"method","name":"gems","children":[],"call":["Dir  [] "," gem_path join "," gem_path ","gems concat ","repo gems "," each_repo "," source_index gems values "," source_index gems "," source_index "]}," Bundler Repository gem_path":{"type":"method","name":"gem_path","children":[],"call":["@path join "]}," Bundler Repository spec_files":{"type":"method","name":"spec_files","children":[],"call":["Dir  [] "," spec_path join "," spec_path "]}," Bundler Repository spec_path":{"type":"method","name":"spec_path","children":[],"call":["@path join "]}," Bundler Repository cached_gems":{"type":"method","name":"cached_gems","children":[],"call":["full_name split ","File  basename gsub ","File  basename "," cache_files map "," cache_files ","File  basename gsub  split "]}," Bundler Repository cache_files":{"type":"method","name":"cache_files","children":[],"call":["Dir  [] "," cache_path join "," cache_path "]}," Bundler Repository cache_path":{"type":"method","name":"cache_path","children":[],"call":["@path join "]}," Bundler Repository install_cached_gem":{"type":"method","name":"install_cached_gem","children":[],"call":["installer install ","Gem Installer  new ","options merge ","cached_gem to_s ","Bundler  logger info ","Bundler  logger ","cached_gem file? "," cache_path join "," cache_path ","Gem Installer  new  install "," cache_path join  to_s "," cache_path join  file? "]}," Bundler Repository install_cached_gems":{"type":"method","name":"install_cached_gems","children":[],"call":[" install_cached_gem "," installed? "," cached_gems each "," cached_gems "]}," Bundler Repository valid?":{"type":"method","name":"valid?","children":[],"call":["(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"{cache,doc,gems,environments,specifications}\")))) empty? ","Dir  [] - ","Dir  [] ","@path join ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"{cache,doc,gems,environment.rb,specifications}\")))) empty? ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@path) :join\n      (str \"{cache,doc,gems,bundler,environment.rb,specifications}\")))) empty? "]}," Bundler Repository source_index":{"type":"method","name":"source_index","children":[],"call":["Gem SourceIndex  from_gems_in ","@path join ","index gems merge! ","repo source_index gems ","repo source_index ","index gems "," each_repo ","Gem SourceIndex  new ","spec loaded_from= ","spec full_name ","index each ","Gem SourceIndex  new  gems merge! ","Gem SourceIndex  from_gems_in  gems merge! ","repo source_Gem SourceIndex  new  gems ","repo source_Gem SourceIndex  from_gems_in  gems ","repo source_Gem SourceIndex  new  ","repo source_Gem SourceIndex  from_gems_in  ","Gem SourceIndex  new  gems ","Gem SourceIndex  from_gems_in  gems ","Gem SourceIndex  new  each ","Gem SourceIndex  from_gems_in  each "]}," Bundler Repository initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," valid? ","Pathname  new ","@path join ","Directory  new ","Gems  new ","FileUtils  mkdir_p ","GemDirectorySource  new ","Pathname  new  join "]}," Bundler ManifestFile find_manifest_file":{"type":"method","name":"find_manifest_file","children":[],"call":[" raise ","current parent ","filename exist? ","current join ","current root? ","Pathname  new ","Dir  pwd ","current parent  parent ","Pathname  new  parent ","current join  exist? ","current parent  join ","Pathname  new  join ","current parent  root? ","Pathname  new  root? "]}," Bundler ManifestFile filename":{"type":"method","name":"filename","children":[],"call":[" find_manifest_file ","Pathname  new "]}," Bundler ManifestFile root":{"type":"method","name":"root","children":[],"call":[" filename parent "," filename "]}," Bundler ManifestFile bindir":{"type":"method","name":"bindir","children":[],"call":[" root join "," root "]}," Bundler ManifestFile gem_path":{"type":"method","name":"gem_path","children":[],"call":[" root join "," root "]}," Bundler ManifestFile load_manifest":{"type":"method","name":"load_manifest","children":[],"call":["Manifest  new "," system_gems "," rubygems "," gem_path "," bindir "," dependencies "," sources ","ManifestBuilder  load "," filename "]}," Bundler ManifestFile setup_environment":{"type":"method","name":"setup_environment","children":[],"call":["ENV  []= ","ENV  [] "]}," Bundler ManifestFile install":{"type":"method","name":"install","children":[],"call":[" manifest install "," manifest "]}," Bundler ManifestFile manifest":{"type":"method","name":"manifest","children":[],"call":[" load_manifest "]}," Bundler ManifestFile load":{"type":"method","name":"load","children":[],"call":[" manifest "]}," Bundler ManifestFile initialize":{"type":"method","name":"initialize","children":[],"call":["Source  new "]}," Bundler Manifest spec_files_for_specs":{"type":"method","name":"spec_files_for_specs","children":[],"call":["files []= ","path join expand_path ","path join ","s full_name ","s name ","specs each ","File  join "]}," Bundler Manifest load_paths_for_specs":{"type":"method","name":"load_paths_for_specs","children":[],"call":["load_paths << ","File  join ","spec full_gem_path ","spec require_paths each ","spec require_paths ","spec bindir ","specs each ","gem_path join relative_path_from to_s ","gem_path join relative_path_from ","gem_path join ","Pathname  new ","spec full_Pathname  new  ","Pathname  new  join relative_path_from to_s ","Pathname  new  join relative_path_from ","Pathname  new  join "]}," Bundler Manifest create_environment_file":{"type":"method","name":"create_environment_file","children":[],"call":["file puts ","erb result "," binding ","ERB  new ","File  read ","File  join ","File  dirname ","File  open ","path join ","@filename relative_path_from to_s ","@filename relative_path_from ","@bindir relative_path_from to_s ","@bindir relative_path_from "," load_paths_for_specs "," spec_files_for_specs "," gems ","FileUtils  mkdir_p ","ERB  new  result ","@@filename relative_path_from to_s  relative_path_from to_s ","@@filename relative_path_from to_s  relative_path_from ","@@bindir relative_path_from to_s  relative_path_from to_s ","@@bindir relative_path_from to_s  relative_path_from ","  load_paths_for_specs _for_specs "," load_paths_for_ gems  ","  spec_files_for_specs _for_specs "," spec_files_for_ gems  "]}," Bundler Manifest create_environment_files":{"type":"method","name":"create_environment_files","children":[],"call":[" create_environment_file "," load_paths_for_specs "," spec_files_for_specs "," gems_for "," environments each "," environments ","FileUtils  mkdir_p ","  load_paths_for_specs _for_specs "," load_paths_for_ gems_for  "," spec_ spec_files_for_specs _for_specs "," spec_files_for_ gems_for  "]}," Bundler Manifest cleanup_removed_gems":{"type":"method","name":"cleanup_removed_gems","children":[],"call":["FileUtils  rm_rf ","Bundler  logger info ","File  basename ","Bundler  logger ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}\"))))) each ","Dir  [] - ","Dir  [] ","@bindir join ","(send\n  (send nil :gems) :map) flatten join ","(send\n  (send nil :gems) :map) flatten ","g executables "," gems map "," gems ","File  basename =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each ","base join ","@repository path join ","@repository path ","(send\n  (send nil :gems) :map) join ","g full_name ","File  @repository path join name ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (send nil :gems) :map) flatten join ))\n        (str \"}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (send nil :gems) :map) join ))\n        (str \"}\"))))) each ","File  @repository path join name =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (send nil :gems) :map) flatten join ))\n        (str \"}{.gemspec,.gem,}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (send nil :gems) :map) join ))\n        (str \"}{.gemspec,.gem,}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :@repository path join ) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :@repository path join ) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each ","@repository path join  join "]}," Bundler Manifest all_gems_installed?":{"type":"method","name":"all_gems_installed?","children":[],"call":["dep version_requirements satisfied_by? ","downloaded_gems [] ","dep name ","dep version_requirements "," gem_dependencies all? "," gem_dependencies ","downloaded_gems []= ","Gem Version  new ","file =~ ","Dir  [] each ","Dir  [] ","@repository path join ","@repository path "," repository path join "," repository path "," repository "]}," Bundler Manifest gem_dependencies":{"type":"method","name":"gem_dependencies","children":[],"call":["d to_gem_dependency "," dependencies map "," dependencies "]}," Bundler Manifest fetch":{"type":"method","name":"fetch","children":[],"call":["bundle download ","@repository path "," raise ","(send\n  (ivar :@dependencies) :map) join ","d to_s ","@dependencies map ","finder resolve "," gem_dependencies ","Finder  new "," sources "," all_gems_installed? ! "," all_gems_installed? "," repository "," repository cleanup ","Resolver  resolve "," finder ","finder resolve  download ","Resolver  resolve  download ","Finder  new  resolve "," all_(send\n  (ivar :@dependencies) :map) join _installed? ! "," all_(send\n  (ivar :@dependencies) :map) join _installed? "," Finder  new  "]}," Bundler Manifest environments":{"type":"method","name":"environments","children":[],"call":["envs << ","(send\n  (send nil :dependencies) :map) flatten "," Array + "," Array ","dep except ","dep only "," dependencies map "," dependencies ","(send\n  (send nil :dependencies) :map) flatten  << "]}," Bundler Manifest gems_for":{"type":"method","name":"gems_for","children":[],"call":["Resolver  resolve ","@repository source_index ","d to_gem_dependency ","deps map ","d in? ","deps select "," dependencies "," dependencies  map "," dependencies  select "]}," Bundler Manifest require_all":{"type":"method","name":"require_all","children":[],"call":[" require ","dep require_as each ","dep require_as "," dependencies each "," dependencies "]}," Bundler Manifest activate":{"type":"method","name":"activate","children":[],"call":[" require ","@repository path join ","@repository path "]}," Bundler Manifest install":{"type":"method","name":"install","children":[],"call":["Bundler  logger info ","Bundler  logger "," create_environment_files ","@repository path join ","@repository path "," cleanup_removed_gems ","@repository install_cached_gems "," fetch "," create_environment_file "," repository path "," repository "," repository cleanup "," gems "," repository install_cached_gems "," create_bundler_runtime "]}," Bundler Manifest initialize":{"type":"method","name":"initialize","children":[],"call":["Repository  new ","URI  parse ","s is_a? ","sources map! "," repository path join "," repository path "," repository "]}," Gem Specification source=":{"type":"method","name":"source=","children":[],"call":[" raise ","@source absolute? ","URI  parse ","source is_a? ","Bundler Source  new ","URI  parse  absolute? ","@Bundler Source  new  absolute? ","Bundler Source  new  is_a? "]}," Gem Installer app_script_text":{"type":"method","name":"app_script_text","children":[],"call":["erb result "," binding ","ERB  new ","File  read ","File  join ","File  dirname ","ERB  new  result "]}," Bundler GemBundle download":{"type":"method","name":"download","children":[],"call":["Gem RemoteFetcher  fetcher download ","spec source ","Gem RemoteFetcher  fetcher ","Bundler  logger info ","spec full_name ","Bundler  logger ","directory join file? ","directory join "," each ","FileUtils  mkdir_p ","repository download ","(send nil :sort_by) each ","s full_name downcase ","s full_name "," sort_by ","spec source download "]}," Bundler Finder search":{"type":"method","name":"search","children":[],"call":["s version ","(send\n  (lvar :possibilities) :select) sort_by ","dependency =~ ","possibilities select ","@index [] values ","@index [] ","dependency name ","@results [] ","dependency hash ","(send\n  (send nil :find_by_name\n    (send\n      (lvar :dependency) :name)) :select) sort_by "," find_by_name select "," find_by_name ","@cache [] ","(send\n  (lvar :@index [] values ) :select) sort_by ","@index [] values  select "]}," Bundler Finder append":{"type":"method","name":"append","children":[],"call":["@index [] [] ","spec version ","@index [] ","spec name ","spec source= ","Gem Platform  match ","spec platform ","index gems values each ","index gems values ","index gems "]}," Bundler Finder fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","e message "," append ","Marshal  load ","Gem  inflate ","Gem RemoteFetcher  fetcher fetch_path ","Gem RemoteFetcher  fetcher ","Bundler  logger info ","Bundler  logger "]}," Bundler Finder resolve":{"type":"method","name":"resolve","children":[],"call":["GemBundle  new ","Resolver  resolve ","Bundler  logger info ","Bundler  logger "]}," Bundler Finder initialize":{"type":"method","name":"initialize","children":[],"call":[" fetch ","sources each ","h []= ","Hash  new "]}," Bundler Dependency ==":{"type":"method","name":"==","children":[],"call":["(send nil :name) == ","o except ","o only ","o require_as ","o version ","o name "," except "," only "," require_as "," version "," name "]}," Bundler Dependency to_gem_dependency":{"type":"method","name":"to_gem_dependency","children":[],"call":["Gem Dependency  new "," version "," name "]}," Bundler Dependency to_s":{"type":"method","name":"to_s","children":[],"call":[" to_gem_dependency to_s "," to_gem_dependency "]}," Bundler Dependency in?":{"type":"method","name":"in?","children":[],"call":["@except include? ","@only include? ","@only ! ","environment to_s ","environment to_s  to_s "]}," Bundler Dependency initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@except include? ","@only include? ","e to_s "," Array map "," Array ","options [] ","options []= ","k to_s ","options each ","options key? ","@autorequire is_a? ","options include? ","g to_sym ","options fetch ","options []  include? "," Array  is_a? "]}," ExecCommand execute":{"type":"method","name":"execute","children":[],"call":["Bundler CLI  run "," options "," require "]}," ExecCommand description":{"type":"method","name":"description","children":[],"call":["      Run in context of a bundle\n gsub "]}," ExecCommand arguments":{"type":"method","name":"arguments","children":[],"call":[]}," ExecCommand usage":{"type":"method","name":"usage","children":[],"call":[" program_name "]}," ExecCommand initialize":{"type":"method","name":"initialize","children":[],"call":["options []= ","Pathname  new "," add_option "]}," BundleCommand execute":{"type":"method","name":"execute","children":[],"call":["Bundler CLI  run "," options "," require "," options [] "]}," BundleCommand description":{"type":"method","name":"description","children":[],"call":[]}," BundleCommand usage":{"type":"method","name":"usage","children":[],"call":[" program_name "]}," BundleCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" options []= "," options "," add_option ","options []= ","Pathname  new ","options [] << ","options [] ","YAML  load_file ","File  exist? "]}," Bundler CLI run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  logger error ","e message ","Bundler  logger "," send "]}," Bundler CLI exec":{"type":"method","name":"exec","children":[],"call":["@options [] ","@manifest_file setup_environment ","@manifest setup_environment ","@environment setup_environment ","@bundle setup_environment ","Kernel  exec ","ENV  []= ","(dstr\n  (str \"-I\")\n  (begin\n    (send\n      (const nil :File) :expand_path\n      (str \"../..\")\n      (str \"(string)\")))) compact join ","(dstr\n  (str \"-I\")\n  (begin\n    (send\n      (const nil :File) :expand_path\n      (str \"../..\")\n      (str \"(string)\")))) compact ","ENV  [] ","File  expand_path ","ARGV  delete ","rubyopt join ","rubyopt unshift ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact ","Bundler SharedHelpers  default_gemfile to_s ","Bundler SharedHelpers  default_gemfile ","paths uniq join ","paths uniq ","paths unshift ","Bundler  bundle_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split ","locked_env to_s ","locked_env exist? ","Bundler  root join ","Bundler  root ","Bundler  ui warn ","Bundler  ui ","Bundler  ui error ","ARGV  first ","rubyopt first !~ ","rubyopt first ","rubyopt empty? ","Bundler  default_gemfile "," exit ","Bundler  setup ","ARGV  shift ","Bundler  load setup_environment ","Bundler  load ","Exec  new run ","Exec  new "," options "," require ","args first ","Bundler  definition validate_ruby! ","Bundler  definition "," options keep_file_descriptors? ","args << "," options keep_file_descriptors? ! ","RUBY_VERSION  >= "," require_relative ","SharedHelpers  major_deprecation ","ARGV  include? ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  join ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  unshift ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  unshift ","Bundler  root join  to_s ","Bundler  root join  exist? ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first !~ ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  empty? "]}," Bundler CLI bundle":{"type":"method","name":"bundle","children":[],"call":["@manifest_file install ","@options [] ","@manifest install ","@environment install ","@bundle install "]}," Bundler CLI initialize":{"type":"method","name":"initialize","children":[],"call":["Bundler ManifestFile  load ","@options [] ","Bundler Environment  load ","Dsl  load_gemfile ","Bundle  load ","Bundler  mode= ","options [] ","Gem DefaultUserInteraction  ui= ","UI RGProxy  new ","Bundler  ui ","Bundler  ui= ","UI Shell  new "," shell ","Thor Shell Basic  new "," options [] "," options ","Bundler  ui debug! ","Bundler  rubygems ui= ","Bundler  rubygems ","Bundler  ui level= "," raise ","e message "," auto_install ","AUTO_INSTALL_CMDS  include? ","Bundler  settings []= ","Bundler  settings ","ENV  []= ","File  expand_path ","Bundler  settings [] ","args last [] name ","args last [] ","args last ","Bundler  ui warn ","ENV  [] empty? ! ","ENV  [] empty? ","ENV  [] ","custom_gemfile empty? ! ","custom_gemfile empty? ","Bundler  settings cli_flags_given= "," options empty? ! "," options empty? ","Bundler  reset! ","unprinted_warnings each ","Bundler  ui unprinted_warnings ","Bundler  reset_paths! ","Bundler  settings set_command_option_if_given ","Bundler SharedHelpers  set_env "," warn_on_incompatible_ruby_or_rubygems ","Bundler Retry  attempts= ","Bundler  reset_settings! ","Bundler  reset_settings_and_root! ","Bundler  self_manager restart_with_locked_bundler_if_needed ","Bundler  self_manager ","Bundler  ui unprinted_warnings  each ","Bundler  ui Bundler  ui unprinted_warnings  "]}," Bundler Source fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":[" raise ","e message "," to_s ","specs [] []= ","spec version ","specs [] ","spec name ","spec source= ","Gem Platform  match ","spec platform ","index gems values each ","index gems values ","index gems ","h []= ","Hash  new ","Marshal  load ","Gem  inflate ","Gem RemoteFetcher  fetcher fetch_path "," uri ","Gem RemoteFetcher  fetcher ","Bundler  logger info ","Bundler  logger ","Marshal  load  gems values each ","Marshal  load  gems values ","Marshal  load  gems "]}," Bundler Source download":{"type":"method","name":"download","children":[],"call":["Gem RemoteFetcher  fetcher download "," uri ","Gem RemoteFetcher  fetcher ","Bundler  logger info ","spec full_name ","Bundler  logger "]}," Bundler Source to_s":{"type":"method","name":"to_s","children":[],"call":["@uri to_s "]}," Bundler Source ==":{"type":"method","name":"==","children":[],"call":[" uri == ","other uri "," uri "]}," Bundler Source specs":{"type":"method","name":"specs","children":[],"call":[" fetch_specs "]}," Bundler Source initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@uri absolute? ","URI  parse ","uri is_a? ","URI  parse  absolute? "]}," Bundler Repository download":{"type":"method","name":"download","children":[],"call":["spec source download ","spec source ","@path join file? ","@path join ","spec full_name ","FileUtils  mkdir_p ","options [] include? ","spec name ","options [] ","(send\n  (lvar :bundle) :sort_by) each ","s full_name downcase ","s full_name ","bundle sort_by "]}," Bundler Finder find_by_name":{"type":"method","name":"find_by_name","children":[],"call":["matches values ","versions merge! ","source specs [] ","source specs ","@sources reverse_each ","@index [] "]}," Bundler ManifestBuilder clear_sources":{"type":"method","name":"clear_sources","children":[],"call":["@manifest_file clear_sources "]}," Bundler ManifestBuilder run":{"type":"method","name":"run","children":[],"call":[]}," Bundler require":{"type":"method","name":"require","children":[],"call":[" load require "," load "," default_gemfile "," setup require "," setup "," default_ default_gemfile  "]}," Bundler Repository cleanup":{"type":"method","name":"cleanup","children":[],"call":["FileUtils  rm_rf ","Bundler  logger info ","File  basename ","Bundler  logger ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}\"))))) each ","Dir  [] - ","Dir  [] ","@bindir join ","(send\n  (lvar :gems) :map) flatten join ","(send\n  (lvar :gems) :map) flatten ","g executables ","gems map ","File  basename =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each ","base join "," path join "," path ","(send\n  (lvar :gems) :map) join ","g full_name ","repo cleanup "," each_repo ","valid_executables include? ","spec executables each ","spec executables ","@path join ","spec full_name ","spec version ","spec name ","to_delete each ","(send\n  (lvar :valid) :map) flatten compact ","(send\n  (lvar :valid) :map) flatten ","s executables ","valid map ","spec version == ","other version ","spec name == ","other name ","valid any? ","to_delete delete_if "," gems ","File  baseFile  basename  ","File   path join name ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (lvar :gems) :map) flatten join ))\n        (str \"}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (lvar :gems) :map) join ))\n        (str \"}\"))))) each ","File  baseFile  basename  =~ ","File   path join name =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (lvar :gems) :map) flatten join ))\n        (str \"}{.gemspec,.gem,}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (lvar :gems) :map) join ))\n        (str \"}{.gemspec,.gem,}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar : path join ) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar : path join ) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each "," path join  join ","g full_File  basename  ","(send\n  (lvar :valid) :map) flatten compact  include? ","spec full_File  basename  ","spec File  basename  "," gems  each ","spec File  basename  == ","other File  basename  "," gems  delete_if "]}," Bundler ManifestFile clear_sources":{"type":"method","name":"clear_sources","children":[],"call":["@default_sources clear ","@sources clear "]}," Bundler ManifestFile add_source":{"type":"method","name":"add_source","children":[],"call":["@sources << "]}," Bundler ManifestFile sources":{"type":"method","name":"sources","children":[],"call":["@sources + "]}," Bundler Manifest repository":{"type":"method","name":"repository","children":[],"call":["Repository  new "]}," Bundler Manifest finder":{"type":"method","name":"finder","children":[],"call":["Finder  new "," sources "]}," Bundler Manifest gems":{"type":"method","name":"gems","children":[],"call":["Resolver  resolve "," repository source_index "," repository ","d to_gem_dependency ","deps map "," dependencies "," dependencies  map "]}," Gem Specification specification_version":{"type":"method","name":"specification_version","children":[],"call":["@specification_version to_i "]}," Bundler Dependency require":{"type":"method","name":"require","children":[],"call":["@block call ","@require_as each "," in? "]}," Bundler Manifest create_bundler_runtime":{"type":"method","name":"create_bundler_runtime","children":[],"call":["FileUtils  cp_r ","here join ","FileUtils  cp ","there mkdir ","FileUtils  rm_rf ","Bundler  logger info ","Bundler  logger "," path join "," path ","Pathname  new dirname ","Pathname  new ","Pathname  new dirname  join "," path join  mkdir ","tPathname  new dirname  mkdir "]}," Bundler GitSource download":{"type":"method","name":"download","children":[],"call":["FileUtils  mv "," tmp_path join ","spec name "," tmp_path ","FileUtils  mkdir_p ","dest dirname ","spec name == ","repository add_spec ","File  join ","spec require_paths map! ","spec require_paths ","repository download_path_for join ","repository download_path_for ","repository download_path_for join  dirname "]}," Bundler GitSource gems":{"type":"method","name":"gems","children":[],"call":["Dir  chdir ","@branch != ","Bundler  logger info ","Bundler  logger "," tmp_path join "," tmp_path ","FileUtils  mkdir_p "," location "," location dirname "," raise "," local "," location directory? "," checkout "," update ","Bundler  writable? ","Bundler  remote? "]}," Bundler GitSource initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Bundler DirectorySource download":{"type":"method","name":"download","children":[],"call":["repository add_spec ","File  join ","spec require_paths map! ","spec require_paths "]}," Bundler DirectorySource to_s":{"type":"method","name":"to_s","children":[],"call":[" location "]}," Bundler DirectorySource ==":{"type":"method","name":"==","children":[],"call":["other is_a? "]}," Bundler DirectorySource gems":{"type":"method","name":"gems","children":[],"call":["specs []= ","default full_name ","s version= ","Gem Version  new ","s name= ","Gem Specification  new "," raise ","Gem Version  correct? ! ","Gem Version  correct? ","@version nil? ","specs keys grep empty? ","specs keys grep ","Regexp  escape ","specs keys ","spec full_name ","path join ","spec require_paths map! ","spec require_paths "," eval ","File  read ","Pathname  new relative_path_from dirname ","Pathname  new relative_path_from ","Pathname  new ","Dir  [] each ","Dir  [] ","@location join ","s location= "," location ","spec location= ","file dirname expand_path ","file dirname "," validate_gemspec "," process_source_gems ","v name == ","v name ","specs any? "," required_specs each "," required_specs "," merge_defined_specs "," locate_gemspecs "," eval s []= "," merge_defined_specs  []= "," locate_gemspecs  []= "," eval s keys grep empty? "," merge_defined_specs  keys grep empty? "," locate_gemspecs  keys grep empty? "," eval s keys grep "," merge_defined_specs  keys grep "," locate_gemspecs  keys grep "," eval s keys "," merge_defined_specs  keys "," locate_gemspecs  keys "," eval  full_name ","Pathname  new relative_path_from dirname  join "," eval  require_paths map! ","spec require_Pathname  new relative_path_from dirname s map! "," eval  require_paths ","spec require_Pathname  new relative_path_from dirname s ","Pathname  new relative_Pathname  new relative_path_from dirname _from dirname ","Pathname  new relative_Pathname  new relative_path_from dirname _from "," eval  location= ","file dirname expand_Pathname  new relative_path_from dirname  ","Pathname  new  dirname expand_path ","Pathname  new  dirname "," validate_gem eval  "," eval s any? "," merge_defined_specs  any? "," locate_gemspecs  any? "," required_ eval s each "," required_ merge_defined_specs  each "," required_ locate_gemspecs  each "," required_ eval s "," required_ merge_defined_specs  "," required_ locate_gemspecs  "," merge_defined_ eval s "," merge_defined_ merge_defined_specs  "," merge_defined_ locate_gemspecs  "," locate_gem eval s "," locate_gem merge_defined_specs  "," locate_gem locate_gemspecs  "]}," Bundler DirectorySource initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","Pathname  new expand_path ","Pathname  new "]}," Bundler GemSource fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":[" raise ","e message "," to_s ","index gems ","Marshal  load ","Gem  inflate ","Gem RemoteFetcher  fetcher fetch_path "," uri ","Gem RemoteFetcher  fetcher ","Bundler  logger info ","Bundler  logger ","gems []= ","spec full_name ","RemoteSpecification  new ","index each ","Bundler  logger warn ","Marshal  load + ","fetcher fetch_path ","gems [] << ","gems [] ","spec name ","Gem Platform  match ","spec platform ","spec source= ","h []= ","Hash  new "," build_gem_index "," fetch_main_specs + "," fetch_prerelease_specs "," fetch_main_specs ","Marshal  load  gems ","Marshal  load +  gems ","Gem RemoteFetcher  Gem RemoteFetcher  fetcher  fetch_path ","Gem RemoteFetcher  Gem RemoteFetcher  fetcher  ","RemoteSpecification  new  full_name ","Marshal  load  each ","Marshal  load +  each ","Gem RemoteFetcher  fetcher  fetch_path ","RemoteSpecification  new  name ","RemoteSpecification  new  platform ","RemoteSpecification  new  source= "," build_gem_Marshal  load  "," build_gem_Marshal  load +  "," fetch_main_RemoteSpecification  new s + "," fetch_prerelease_RemoteSpecification  new s "," fetch_main_RemoteSpecification  new s "]}," Bundler GemSource download":{"type":"method","name":"download","children":[],"call":["Gem RemoteFetcher  fetcher download ","repository download_path_for "," uri ","Gem RemoteFetcher  fetcher "," raise ","destination writable? ","Bundler  logger info ","spec full_name ","Bundler  logger ","spec __swap__ ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path ","destination join "," repository path "," repository "," bundle gem_path "," bundle ","repository download_path_for  writable? "," repository path  writable? "," bundle gem_path  writable? ","repository download_path_for  join "," repository path  join "," bundle gem_path  join "]}," Bundler GemSource to_s":{"type":"method","name":"to_s","children":[],"call":["@uri to_s "]}," Bundler GemSource ==":{"type":"method","name":"==","children":[],"call":[" uri == ","other uri "," uri "]}," Bundler GemSource gems":{"type":"method","name":"gems","children":[],"call":[" fetch_specs "]}," Bundler GemSource initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@uri absolute? ","URI  parse ","@uri is_a? ","options [] ","URI  parse  absolute? ","options []  absolute? ","URI  parse  is_a? ","options []  is_a? "]}," Bundler Resolver search":{"type":"method","name":"search","children":[],"call":["s version ","(send\n  (send\n    (send\n      (ivar :@specs) :[]\n      (send\n        (lvar :dependency) :name)) :values) :select) sort_by ","dependency =~ ","@specs [] values select ","@specs [] values ","@specs [] ","dependency name ","@cache [] ","dependency hash ","dependency version_requirements prerelease? ","dependency version_requirements ","spec version prerelease? ","spec version ","(send\n  (send\n    (lvar :collection) :[]\n    (send\n      (lvar :dependency) :name)) :select) sort_by ","collection [] select ","collection [] ","@by_gem [] gems ","@by_gem [] ","s platform ","s platform == ","found sort_by ","found reject! ","specs select ","specs all? ","(or\n  (lvar :pinned)\n  (ivar :@specs)) [] ","s platform to_s ","s platform to_s == ","index search ","@source_requirements [] ","dep name ","sg for? ","dep __platform ","(send\n  (lvar :nested) :map) select ","SpecGroup  new ","nested map ","nested last << ","nested last ","nested << ","spec version != ","results each ","results first version ","results first ","results any? ","index search_for_all_platforms ","@base [] ","d name ","dep dep ","Gem Dependency  new ","(send\n  (send\n    (lvar :dep) :requirement) :as_list) flatten ","base first version ","base first ","dep requirement as_list ","dep requirement ","base first name ","base any? ","results empty? ","(send\n  (send\n    (lvar :dep) :requirement) :as_list) flatten compact ","base first version to_s ","@deps_for [] ","d hash ","@deps_for []= ","dep to_s ","s spec version  ","s results first version  ","(send\n  (send\n    (send\n      (ivar :@(or\n  (lvar :pinned)\n  (ivar :@specs)) [] ) :[]\n      (send\n        (lvar :dependency) :name)) :values) :select) sort_by ","(sendep dep \n  (sendep dep \n    (sendep dep \n      (ivar :@specs) :[]\n      (sendep dep \n        (lvar :dep dep ependep dep ency) :name)) :values) :select) sort_by ","(senGem Dependency  new \n  (senGem Dependency  new \n    (senGem Dependency  new \n      (ivar :@specs) :[]\n      (senGem Dependency  new \n        (lvar :Gem Dependency  new epenGem Dependency  new ency) :name)) :values) :select) sort_by ","dep dep ependep dep ency =~ ","Gem Dependency  new epenGem Dependency  new ency =~ ","@(or\n  (lvar :pinned)\n  (ivar :@specs)) []  [] values select ","@(or\n  (lvar :pinned)\n  (ivar :@specs)) []  [] values ","@(or\n  (lvar :pinned)\n  (ivar :@specs)) []  [] ","dep dep ependep dep ency name ","Gem Dependency  new epenGem Dependency  new ency name ","dep dep ependep dep ency hash ","Gem Dependency  new epenGem Dependency  new ency hash ","dependency spec version _requirements prerelease? ","dependency results first version _requirements prerelease? ","dep dep ependep dep ency version_requirements prerelease? ","Gem Dependency  new epenGem Dependency  new ency version_requirements prerelease? ","dependency spec version _requirements ","dependency results first version _requirements ","dep dep ependep dep ency version_requirements ","Gem Dependency  new epenGem Dependency  new ency version_requirements ","spec spec version  prerelease? ","spec results first version  prerelease? ","spec spec version  ","spec results first version  ","(send\n  (send\n    (lvar :@by_gem [] gems ) :[]\n    (send\n      (lvar :dependency) :name)) :select) sort_by ","(sendep dep \n  (sendep dep \n    (lvar :collection) :[]\n    (sendep dep \n      (lvar :dep dep ependep dep ency) :name)) :select) sort_by ","(senGem Dependency  new \n  (senGem Dependency  new \n    (lvar :collection) :[]\n    (senGem Dependency  new \n      (lvar :Gem Dependency  new epenGem Dependency  new ency) :name)) :select) sort_by ","@by_gem [] gems  [] select ","@by_gem [] gems  [] ","foundep dep  sort_by ","founGem Dependency  new  sort_by ","foundep dep  reject! ","founGem Dependency  new  reject! ","(or\n  (lvar :pinned)\n  (ivar :@specs)) []  select ","(or\n  (lvar :pinned)\n  (ivar :@specs)) []  all? ","(or\n  (lvar :pinned)\n  (ivar :@(or\n  (lvar :pinned)\n  (ivar :@specs)) [] )) [] ","(or\n  (lvar :@by_gem [] gems )\n  (ivar :@specs)) [] ","(or\n  (lvar :pinnedep dep )\n  (ivar :@specs)) [] ","(or\n  (lvar :pinneGem Dependency  new )\n  (ivar :@specs)) [] ","indep dep ex search ","inGem Dependency  new ex search ","dep dep ep name ","Gem Dependency  new ep name ","dep dep ep __platform ","Gem Dependency  new ep __platform ","(sendep dep \n  (lvar :nestedep dep ) :map) select ","(senGem Dependency  new \n  (lvar :nesteGem Dependency  new ) :map) select ","nestedep dep  map ","nesteGem Dependency  new  map ","nestedep dep  last << ","nesteGem Dependency  new  last << ","nestedep dep  last ","nesteGem Dependency  new  last ","nestedep dep  << ","nesteGem Dependency  new  << ","spec spec version  != ","spec results first version  != ","index search_for_all_platforms  each ","@base []  each ","index search  each ","results first spec version  ","results first results first version  ","index search_for_all_platforms  first version ","@base []  first version ","index search  first version ","index search_for_all_platforms  first ","@base []  first ","index search  first ","index search_for_all_platforms  any? ","@base []  any? ","index search  any? ","indep dep ex search_for_all_platforms ","inGem Dependency  new ex search_for_all_platforms ","@@base []  [] ","dep dep  name ","Gem Dependency  new  name ","dep dep ep dep dep ep ","Gem Dependency  new ep Gem Dependency  new ep ","Gem Dependep dep ency  new ","Gem DepenGem Dependency  new ency  new ","(sendep dep \n  (sendep dep \n    (lvar :dep dep ep) :requirement) :as_list) flatten ","(senGem Dependency  new \n  (senGem Dependency  new \n    (lvar :Gem Dependency  new ep) :requirement) :as_list) flatten ","base first spec version  ","base first results first version  ","dep dep ep requirement as_list ","Gem Dependency  new ep requirement as_list ","dep dep ep requirement ","Gem Dependency  new ep requirement ","@base []  first name ","index search_for_all_platforms  empty? ","@base []  empty? ","index search  empty? ","(sendep dep \n  (sendep dep \n    (lvar :dep dep ep) :requirement) :as_list) flatten compact ","(senGem Dependency  new \n  (senGem Dependency  new \n    (lvar :Gem Dependency  new ep) :requirement) :as_list) flatten compact ","base first spec version  to_s ","base first results first version  to_s ","@base []  first version to_s ","@dep dep eps_for [] ","@Gem Dependency  new eps_for [] ","dep dep  hash ","Gem Dependency  new  hash ","@dep dep eps_for []= ","@Gem Dependency  new eps_for []= ","dep dep ep to_s ","Gem Dependency  new ep to_s "]}," Bundler Repository require_code":{"type":"method","name":"require_code","children":[],"call":["file inspect ","dep except inspect ","dep except ","dep only inspect ","dep only "]}," Bundler Repository load_paths_for_specs":{"type":"method","name":"load_paths_for_specs","children":[],"call":["load_paths << ","gem_path join relative_path_from to_s ","gem_path join relative_path_from ","gem_path join ","spec require_paths each ","spec require_paths ","spec bindir ","Pathname  new ","spec full_gem_path ","specs each "," load_path_for ","options [] include? ","spec name ","options [] ","Pathname  new  join relative_path_from to_s ","Pathname  new  join relative_path_from ","Pathname  new  join ","spec full_Pathname  new  "]}," Bundler Repository generate_environment":{"type":"method","name":"generate_environment","children":[],"call":["file puts ","erb result "," binding ","ERB  new ","File  read ","File  join ","File  dirname ","File  open "," path join "," path ","hash merge! ","spec name ","spec loaded_from relative_path_from to_s ","spec loaded_from relative_path_from ","spec loaded_from ","specs inject ","options [] relative_path_from to_s ","options [] relative_path_from ","options [] ","@bindir relative_path_from to_s ","@bindir relative_path_from "," load_paths_for_specs "," gems ","FileUtils  mkdir_p ","ERB  new  result ","spec loaded_from spec loaded_from relative_path_from to_s _path_from to_s ","spec loaded_from spec loaded_from relative_path_from to_s _path_from "," gems  inject ","options [] spec loaded_from relative_path_from to_s _path_from to_s ","options [] spec loaded_from relative_path_from to_s _path_from ","@bindir spec loaded_from relative_path_from to_s _path_from to_s ","@@bindir relative_path_from to_s  relative_path_from to_s ","@bindir spec loaded_from relative_path_from to_s _path_from ","@@bindir relative_path_from to_s  relative_path_from ","  load_paths_for_specs _for_specs "," load_paths_for_ gems  "]}," Bundler Repository configure":{"type":"method","name":"configure","children":[],"call":[" generate_environment "]}," Bundler Repository expand":{"type":"method","name":"expand","children":[],"call":["repo expand "," each_repo "]}," Bundler Repository sync":{"type":"method","name":"sync","children":[],"call":["FileUtils  rm_rf ","Bundler  logger info ","File  basename ","Bundler  logger ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}\"))))) each ","Dir  [] - ","Dir  [] ","@bindir join ","(send\n  (send nil :gems) :map) flatten join ","(send\n  (send nil :gems) :map) flatten ","g executables "," gems map "," gems ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (ivar :@bindir) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (send nil :gems) :map) flatten join ))\n        (str \"}\"))))) each "]}," Bundler Repository fetch":{"type":"method","name":"fetch","children":[],"call":["bundle download "," cleanup ","Resolver  resolve ","Resolver  resolve  download "]}," Bundler Repository each_repo":{"type":"method","name":"each_repo","children":[],"call":["@repos each "]}," Bundler Repository download_path_for":{"type":"method","name":"download_path_for","children":[],"call":["@repos [] download_path_for ","@repos [] "]}," Bundler Repository add_spec":{"type":"method","name":"add_spec","children":[],"call":["@repos [] add_spec ","@repos [] ","f puts ","spec to_ruby ","File  open ","destination join ","spec full_name ","destination mkdir ","destination exist? "," path join "," path "," path join  join "," path join  mkdir "," path join  exist? "]}," Bundler Repository satisfies?":{"type":"method","name":"satisfies?","children":[],"call":["index search size > ","index search size ","index search ","dependencies all? "," source_index "," source_index  search size > "," source_index  search size "," source_index  search "," source_ source_index  "]}," Bundler Repository install":{"type":"method","name":"install","children":[],"call":[" sync "," configure "," cleanup ","Resolver  resolve "," source_index "," expand "," fetch "," satisfies? ! "," satisfies? ","options [] "," do_install ","(ivar :@cache) + ","Bundler  logger info ","Bundler  logger ","valid ! ","s can_be_local? ","sources select ","s local= ","s repository= ","sources each "," generate_bins "," download "," only_local ","source_requirements []= ","SystemGemSource  instance ","options [] each ","dep to_gem_dependency ","dep source ","dep name ","dependencies map ","Resolver  resolve  ! "," only_local  select "," only_local  each "]}," Bundler Repository Gems install_cached_gem":{"type":"method","name":"install_cached_gem","children":[],"call":["installer install ","Gem Installer  new ","options merge ","cached_gem to_s ","Bundler  logger info ","Bundler  logger ","cached_gem file? "," cache_path join "," cache_path ","Gem Installer  new  install "," cache_path join  to_s "," cache_path join  file? "]}," Bundler Repository Gems installed?":{"type":"method","name":"installed?","children":[],"call":["File  basename == ","File  basename "," gem_paths any? "," gem_paths "," spec_files any? "," spec_files "]}," Bundler Repository Gems gem_paths":{"type":"method","name":"gem_paths","children":[],"call":["Dir  [] "," gem_path join "," gem_path "]}," Bundler Repository Gems gem_path":{"type":"method","name":"gem_path","children":[],"call":["@path join "]}," Bundler Repository Gems spec_files":{"type":"method","name":"spec_files","children":[],"call":["Dir  [] "," spec_path join "," spec_path "]}," Bundler Repository Gems spec_path":{"type":"method","name":"spec_path","children":[],"call":["@path join "]}," Bundler Repository Gems cached_gems":{"type":"method","name":"cached_gems","children":[],"call":["full_name split ","File  basename gsub ","File  basename "," cache_files map "," cache_files ","File  basename gsub  split "]}," Bundler Repository Gems cache_files":{"type":"method","name":"cache_files","children":[],"call":["Dir  [] "," cache_path join "," cache_path "]}," Bundler Repository Gems cache_path":{"type":"method","name":"cache_path","children":[],"call":["@path join "]}," Bundler Repository Gems download_path_for":{"type":"method","name":"download_path_for","children":[],"call":[" path "]}," Bundler Repository Gems add_spec":{"type":"method","name":"add_spec","children":[],"call":[" raise "]}," Bundler Repository Gems cleanup":{"type":"method","name":"cleanup","children":[],"call":["FileUtils  rm_rf ","Bundler  logger info ","Bundler  logger ","File  basename ","File  basename =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each ","Dir  [] - ","Dir  [] ","base join "," path join "," path ","(send\n  (lvar :gems) :map) join ","g full_name ","gems map ","File  baseFile  basename  ","File   path join name ","File  baseFile  basename  =~ ","File   path join name =~ ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar : path join ) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar : path join ) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :glob))\n        (str \"}{.gemspec,.gem,}\"))))) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (str \"*\"))) :-\n  (send\n    (const nil :Dir) :[]\n    (send\n      (lvar :base) :join\n      (dstr\n        (str \"{\")\n        (begin\n          (lvar :(send\n  (lvar :gems) :map) join ))\n        (str \"}{.gemspec,.gem,}\"))))) each "," path join  join ","g full_File  basename  "]}," Bundler Repository Gems expand":{"type":"method","name":"expand","children":[],"call":[" install_cached_gem "," installed? "," cached_gems each "," cached_gems "]}," Bundler Repository Gems gems":{"type":"method","name":"gems","children":[],"call":[" source_index gems values "," source_index gems "," source_index "]}," Bundler Repository Gems source_index":{"type":"method","name":"source_index","children":[],"call":["spec loaded_from= ","@path join ","spec full_name ","index each ","Gem SourceIndex  from_gems_in ","Gem SourceIndex  from_gems_in  each "]}," Bundler Repository Gems initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Repository Directory cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," Bundler Repository Directory expand":{"type":"method","name":"expand","children":[],"call":[]}," Bundler Repository Directory download_path_for":{"type":"method","name":"download_path_for","children":[],"call":["@path join "]}," Bundler Repository Directory add_spec":{"type":"method","name":"add_spec","children":[],"call":["f puts ","spec to_ruby ","File  open ","destination join ","spec full_name ","destination mkdir ","destination exist? "," path join "," path "," path join  join "," path join  mkdir "," path join  exist? "]}," Bundler Repository Directory gems":{"type":"method","name":"gems","children":[],"call":[" source_index gems values "," source_index gems "," source_index "]}," Bundler Repository Directory source_index":{"type":"method","name":"source_index","children":[],"call":["spec loaded_from= ","@path join ","spec full_name ","index each ","Gem SourceIndex  from_gems_in ","Gem SourceIndex  from_gems_in  each "]}," Bundler Repository Directory initialize":{"type":"method","name":"initialize","children":[],"call":["FileUtils  mkdir_p ","path to_s "]}," Gem Specification full_gem_path":{"type":"method","name":"full_gem_path","children":[],"call":[" full_gem_path_without_location "," rg_full_gem_path ","Pathname  new dirname expand_path to_s ","Pathname  new dirname expand_path ","Pathname  new dirname ","Pathname  new "," loaded_from "," source respond_to? "," source ","Bundler  root ","Pathname  new dirname expand_path to_s untaint "," source root "," source is_a? "," source bundler_plugin_api_source? ","x untaint ","RUBY_VERSION  < ","Pathname  new dirname expand_path to_s tap "]}," Bundler Environment gem_dependencies":{"type":"method","name":"gem_dependencies","children":[],"call":["d to_gem_dependency "," dependencies map "," dependencies "]}," Bundler Environment repository":{"type":"method","name":"repository","children":[],"call":["Repository  new "," bindir "," gem_path ","Bundle  new "]}," Bundler Environment clear_sources":{"type":"method","name":"clear_sources","children":[],"call":["@default_sources clear ","@sources clear "]}," Bundler Environment add_priority_source":{"type":"method","name":"add_priority_source","children":[],"call":["@priority_sources << "]}," Bundler Environment add_source":{"type":"method","name":"add_source","children":[],"call":["@sources << "]}," Bundler Environment sources":{"type":"method","name":"sources","children":[],"call":["@priority_sources + + ","@priority_sources + ","@priority_sources + + + ","SystemGemSource  new ","s local? ! ","s local? ","sources reject! ","Bundler  local? ","@definition sources ","@priority_@priority_sources + + +  + + ","@priority_@priority_sources + + +  + ","@priority_@priority_sources + + +  + + + ","@priority_sources + + +  reject! ","@definition @priority_sources + + +  "]}," Bundler Environment bindir":{"type":"method","name":"bindir","children":[],"call":[" root join "," root "]}," Bundler Environment gem_path":{"type":"method","name":"gem_path","children":[],"call":[" root join "," root "," class default_gem_path "," class "]}," Bundler Environment root":{"type":"method","name":"root","children":[],"call":[" filename parent "," filename "]}," Bundler Environment require_env":{"type":"method","name":"require_env","children":[],"call":["d require_env "," dependencies each "," dependencies "]}," Bundler Environment setup_environment":{"type":"method","name":"setup_environment","children":[],"call":["ENV  []= ","ENV  [] "," gem_path "," bindir "," system_gems "]}," Bundler Environment install":{"type":"method","name":"install","children":[],"call":["Bundler  logger info ","Bundler  logger ","FileUtils  rm_rf "," repository install "," filename "," system_gems "," rubygems "," sources "," gem_dependencies "," repository ","s tmp_path= "," sources each ","FileUtils  mkdir_p "," filename dirname join "," filename dirname ","options [] ","(send\n  (send nil :dependencies) :map) compact ","dep name ","dep bundle ! ","dep bundle "," dependencies map "," dependencies ","(send\n  (lvar :only_envs) :any?) ! ","d in? ","only_envs any? "," dependencies reject! ","dep source == ","SystemGemSource  instance ","dep source ","s  filename dirname join = ","(send\n  (lvar :options [] ) :any?) ! ","options []  any? "]}," Bundler Environment initialize":{"type":"method","name":"initialize","children":[],"call":["builder instance_eval ","File  read ","Dsl  new ","GemSource  new ","SystemGemSource  new ","Dsl  evaluate "," default_sources ","env_file rmtree ","env_file exist? ","Bundler  app_config_path join ","Bundler  app_config_path ","root join ","Dsl  new  instance_eval ","Bundler  app_config_path join  rmtree ","root join  rmtree ","Bundler  app_config_path join  exist? ","root join  exist? "]}," Bundler Environment default_manifest_file":{"type":"method","name":"default_manifest_file","children":[],"call":[]}," Bundler Environment load":{"type":"method","name":"load","children":[],"call":[]}," Bundler Dsl _combine_excepts":{"type":"method","name":"_combine_excepts","children":[],"call":["o to_s ","(lvar :except) flatten compact uniq map ","(lvar :except) flatten compact uniq ","(lvar :except) flatten compact ","(lvar :except) flatten "]}," Bundler Dsl _combine_onlys":{"type":"method","name":"_combine_onlys","children":[],"call":["o to_s ","(lvar :only) flatten compact uniq map ","(lvar :only) flatten compact uniq ","(lvar :only) flatten compact ","(lvar :only) flatten "]}," Bundler Dsl gem":{"type":"method","name":"gem","children":[],"call":["@environment dependencies << ","@environment dependencies ","@environment add_priority_source ","GitSource  new ","options [] ","@sources [] [] ","@sources [] ","DirectorySource  new ","vendored_at to_s ","@environment filename dirname join ","@environment filename dirname ","@environment filename ","vendored_at relative? ","Pathname  new ","Dependency  new ","options merge ","options []= "," _combine_excepts "," _combine_onlys ","args last ","args pop ","args last is_a? "," _handle_vendored_option "," _handle_git_option ","options [] ! ","options key? "," _combine_except "," _combine_only "," warn "," caller [] "," caller ","options delete ","dep source= ","SystemGemSource  instance "," raise ","invalid join ","keys join ","(lvasgn :invalid\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (lvar :keys))) empty? ","options keys - ","options keys ","(str \"vendored_at\") map ","SystemGemSource  new ","@dependencies << "," _normalize_options ","Hash  === "," _deprecated_options ","options [] to_sym ","dep source ","current source ","dep requirement ","dep name ","current source != ","current requirement ","current name ","current requirement != ","d name == ","d name ","@dependencies find ","name to_s ","name is_a? ","dep type == ","dep type ","@dependencies delete ","current type == ","current type ","Bundler  ui warn ","Bundler  ui "," normalize_options ","args pop dup ","current requirements_list include? ","current requirements_list ","current requirements_list include? ! ","dep requirements_list include? ","dep requirements_list ","File  basename == ","File  basename ","@environment Dependency  new endencies << ","@environment Dependency  new endencies ","@environment add_priority_GitSource  new  ","@environment add_priority_DirectorySource  new  ","args pop  [] ","args pop dup  [] ","@GitSource  new s [] [] ","@DirectorySource  new s [] [] ","@GitSource  new s [] ","@DirectorySource  new s [] ","@environment filename dirname join  to_s ","Pathname  new  to_s ","options []  to_s ","@environment filename dirname join  relative? ","Pathname  new  relative? ","options []  relative? ","args pop  merge ","args pop dup  merge ","args pop  []= ","args pop dup  []= "," _handle_options [] _option ","args pop  [] ! ","args pop dup  [] ! ","args pop  key? ","args pop dup  key? ","args pop  delete ","args pop dup  delete ","dep GitSource  new = ","dep DirectorySource  new = ","Dependency  new  source= ","options keys -  join ","(str \"vendored_at\") map  join ","(lvasgn :invalid\n  (send\n    (send\n      (lvar :args pop ) :keys) :-\n    (lvar :keys))) empty? ","(lvasgn :invalid\n  (send\n    (send\n      (lvar :args pop dup ) :keys) :-\n    (lvar :keys))) empty? ","(lvasgn :options keys - \n  (send\n    (send\n      (lvar :options) :keys) :-\n    (lvar :keys))) empty? ","(lvasgn :invalid\n  (send\n    (send\n      (lvar :options) :(str \"vendored_at\") map ) :-\n    (lvar :(str \"vendored_at\") map ))) empty? ","args pop  keys - ","args pop dup  keys - ","options (str \"vendored_at\") map  - ","args pop  keys ","args pop dup  keys ","options (str \"vendored_at\") map  ","(str \"@environment filename dirname join \") map ","(str \"Pathname  new \") map ","(str \"options [] \") map ","@Dependency  new endencies << "," _normalize_args pop  "," _normalize_args pop dup  "," _Dependency  new recated_options "," _deprecated_args pop  "," _deprecated_args pop dup  ","args pop  [] to_sym ","args pop dup  [] to_sym ","dep GitSource  new  ","dep DirectorySource  new  ","Dependency  new  source ","current GitSource  new  ","current DirectorySource  new  ","Dependency  new  requirement ","Dependency  new  name ","current GitSource  new  != ","current DirectorySource  new  != ","@Dependency  new endencies find ","Dependency  new  type == ","Dependency  new  type ","@Dependency  new endencies delete "," normalize_args pop  "," normalize_args pop dup  ","Dependency  new  requirements_list include? ","Dependency  new  requirements_list "]}," Bundler Dsl clear_sources":{"type":"method","name":"clear_sources","children":[],"call":["@environment clear_sources "]}," Bundler Dsl except":{"type":"method","name":"except","children":[],"call":[" _combine_excepts "," _combine_except "]}," Bundler Dsl only":{"type":"method","name":"only","children":[],"call":[" _combine_onlys "," _combine_only "]}," Bundler Dsl source":{"type":"method","name":"source","children":[],"call":["@environment add_source ","@environment sources include? ","@environment sources ","GemSource  new ","@sources << ","@sources unshift ","options [] ","Source Rubygems  new "," block_given? "," rubygems_source ","@sources | ","(ivar :@source) | ","@rubygems_source add_remote ","@sources add_rubygems_remote "," check_primary_source_safety "," with_source ","@sources add_rubygems_source "," normalize_source ","@sources add_plugin_source ","options merge "," raise ","Plugin  source? ","options []= ","options [] to_s ","options key? "," normalize_hash ","args pop dup ","args pop ","args last is_a? ","args last ","@sources global_rubygems_source= ","Bundler  ui warn ","Bundler  ui "," rubygems_source add_remote ","@global_rubygems_sources << ","@sources add_global_rubygems_remote ","@environment add_GemSource  new  ","@environment add_ normalize_source  ","@environment GemSource  new s include? ","@environment  normalize_source s include? ","@environment GemSource  new s ","@environment  normalize_source s ","@GemSource  new s << ","@ normalize_source s << ","@sources |  << ","(ivar :@source) |  << ","@GemSource  new s unshift ","@ normalize_source s unshift ","@sources |  unshift ","(ivar :@source) |  unshift "," normalize_hash  [] ","args pop dup  [] "," rubygems_GemSource  new  "," rubygems_ normalize_source  ","@GemSource  new s | ","@ normalize_source s | ","@sources |  | ","(ivar :@source) |  | ","(ivar :@GemSource  new ) | ","(ivar :@ normalize_source ) | ","@rubygems_GemSource  new  add_remote ","@rubygems_ normalize_source  add_remote ","@GemSource  new s add_rubygems_remote ","@ normalize_source s add_rubygems_remote ","@sources |  add_rubygems_remote ","(ivar :@source) |  add_rubygems_remote "," check_primary_GemSource  new _safety "," check_primary_ normalize_source _safety "," with_GemSource  new  "," with_ normalize_source  ","@GemSource  new s add_rubygems_GemSource  new  ","@ normalize_source s add_rubygems_ normalize_source  ","@sources |  add_rubygems_source ","(ivar :@source) |  add_rubygems_source "," normalize_GemSource  new  "," normalize_ normalize_source  ","@GemSource  new s add_plugin_GemSource  new  ","@ normalize_source s add_plugin_ normalize_source  ","@sources |  add_plugin_source ","(ivar :@source) |  add_plugin_source "," normalize_hash  merge ","args pop dup  merge ","Plugin  GemSource  new ? ","Plugin   normalize_source ? "," normalize_hash  []= ","args pop dup  []= "," normalize_hash  [] to_s ","args pop dup  [] to_s "," normalize_hash  key? ","args pop dup  key? ","@GemSource  new s global_rubygems_GemSource  new = ","@ normalize_source s global_rubygems_ normalize_source = ","@sources |  global_rubygems_source= ","(ivar :@source) |  global_rubygems_source= "," rubygems_GemSource  new  add_remote "," rubygems_ normalize_source  add_remote ","@global_rubygems_GemSource  new s << ","@global_rubygems_ normalize_source s << ","@GemSource  new s add_global_rubygems_remote ","@ normalize_source s add_global_rubygems_remote ","@sources |  add_global_rubygems_remote ","(ivar :@source) |  add_global_rubygems_remote "]}," Bundler Dsl disable_system_gems":{"type":"method","name":"disable_system_gems","children":[],"call":["@environment system_gems= "]}," Bundler Dsl disable_rubygems":{"type":"method","name":"disable_rubygems","children":[],"call":["@environment rubygems= "]}," Bundler Dsl bin_path":{"type":"method","name":"bin_path","children":[],"call":["@environment bindir= ","(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send\n      (ivar :@environment) :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path ","@environment root join ","@environment root ","path relative? ","Pathname  new ","@bundle bindir= ","(if\n  (send\n    (lvar :Pathname  new ) :relative?)\n  (send\n    (send\n      (ivar :@environment) :root) :join\n    (lvar :Pathname  new ))\n  (lvar :Pathname  new )) expand_Pathname  new  ","Pathname  new  relative? "]}," Bundler Dsl bundle_path":{"type":"method","name":"bundle_path","children":[],"call":["@environment gem_path= ","(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send\n      (ivar :@environment) :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path ","@environment root join ","@environment root ","path relative? ","Pathname  new ","@bundle path= ","@environment gem_Pathname  new = ","(if\n  (send\n    (lvar :Pathname  new ) :relative?)\n  (send\n    (send\n      (ivar :@environment) :root) :join\n    (lvar :Pathname  new ))\n  (lvar :Pathname  new )) expand_Pathname  new  ","Pathname  new  relative? ","@bundle Pathname  new = "]}," Bundler Dsl initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new ","Source Rubygems  new "," add_git_sources ","SourceList  new "," add_github_sources "]}," Bundler Dependency require_env":{"type":"method","name":"require_env","children":[],"call":["@block call "," require ","@require_as each "," in? "," name "," Array each "," Array "]}," Bundler GitSource location":{"type":"method","name":"location","children":[],"call":[" repository path join ","File  basename "," repository path "," repository "," bundle gem_path join "," bundle gem_path "," bundle "]}," Bundler DirectorySource validate_gemspec":{"type":"method","name":"validate_gemspec","children":[],"call":["Bundler  logger warn ","File  join ","spec bindir ","Bundler  logger ","base join file? ","base join ","(or\n  (send\n    (lvar :spec) :executables)\n  (array)) each ","spec executables ","base join directory? ","(or\n  (send\n    (lvar :spec) :require_paths)\n  (array)) each ","spec require_paths ","spec version ","spec name ","file dirname ","path join file? ","path join ","path join directory? ","Pathname  new ","file dirname  join file? ","file dirname  join ","file dirname  join directory? ","(or\n  (send\n    (lvar :spec) :require_Pathname  new s)\n  (array)) each ","spec require_Pathname  new s ","Pathname  new  join file? ","Pathname  new  join ","Pathname  new  join directory? "]}," Bundler DirectorySource can_be_local?":{"type":"method","name":"can_be_local?","children":[],"call":[]}," Bundler GemDirectorySource fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":["specs []= ","spec full_name ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path ","Dir  [] each ","Dir  [] ","specs [] << ","specs [] ","spec name ","spec source= ","h []= ","Hash  new ","Gem Format  from_file_by_path spec s []= ","Gem Format  from_file_by_path spec  full_name ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec  ","Gem Format  from_file_by_path spec s [] << ","Gem Format  from_file_by_path spec s [] ","Gem Format  from_file_by_path spec  name ","Gem Format  from_file_by_path spec  source= "]}," Bundler GemDirectorySource download":{"type":"method","name":"download","children":[],"call":[]}," Bundler GemDirectorySource to_s":{"type":"method","name":"to_s","children":[],"call":[" location to_s "," location "]}," Bundler GemDirectorySource ==":{"type":"method","name":"==","children":[],"call":[" location == ","other location "," location "]}," Bundler GemDirectorySource gems":{"type":"method","name":"gems","children":[],"call":[" fetch_specs "]}," Bundler GemDirectorySource can_be_local?":{"type":"method","name":"can_be_local?","children":[],"call":[]}," Bundler GemDirectorySource initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Bundler SystemGemSource fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":[]}," Bundler SystemGemSource download":{"type":"method","name":"download","children":[],"call":[" repository cache "," repository ","gemfile dirname join ","spec full_name ","gemfile dirname ","Pathname  new ","spec loaded_from "," bundle cache "," bundle ","gemfile dirname join  dirname join ","Pathname  new  dirname join ","gemfile dirname join  dirname ","Pathname  new  dirname "]}," Bundler SystemGemSource to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler SystemGemSource ==":{"type":"method","name":"==","children":[],"call":["other is_a? "]}," Bundler SystemGemSource gems":{"type":"method","name":"gems","children":[],"call":["Gem SourceIndex  from_installed_gems gems ","Gem SourceIndex  from_installed_gems "," process_source_gems ","@source gems "]}," Bundler SystemGemSource can_be_local?":{"type":"method","name":"can_be_local?","children":[],"call":[]}," Bundler SystemGemSource initialize":{"type":"method","name":"initialize","children":[],"call":["Gem SourceIndex  from_installed_gems "]}," Bundler GemSource can_be_local?":{"type":"method","name":"can_be_local?","children":[],"call":[]}," Bundler Repository expand_vendored_gem":{"type":"method","name":"expand_vendored_gem","children":[],"call":["installer generate_bin ","path join ","spec full_name ","installer instance_eval ","Gem Installer  allocate ","File  symlink ","@path join ","spec location ","FileUtils  mkdir_p "," add_spec ","Gem Installer  allocate  generate_bin ","Gem Installer  allocate  instance_eval "]}," Bundler Repository expand_gemfile":{"type":"method","name":"expand_gemfile","children":[],"call":["installer install ","Gem Installer  new ","options merge ","@path join to_s ","@path join ","spec full_name ","Bundler  logger info ","spec version ","spec name ","Bundler  logger ","Gem Command  build_args= ","build_args map ","options [] [] ","options [] ","Gem Installer  new  install "]}," Bundler Repository do_install":{"type":"method","name":"do_install","children":[],"call":[" expand_vendored_gem "," expand_gemfile ","spec source ","@path join directory? ","@path join ","spec full_name ","spec loaded_from= ","bundle each ","bundle download ","options [] include? ","spec name ","options [] "]}," Bundler Repository prune":{"type":"method","name":"prune","children":[],"call":["FileUtils  rm ","@path join ","spec full_name ","Bundler  logger info ","spec version ","spec name ","Bundler  logger ","s version == ","s version ","s name == ","s name ","bundle any? ","@cache gems each ","@cache gems ","Resolver  resolve ","(ivar :@cache) + ","s can_be_local? ","sources select ","s local= ","s repository= ","sources each ","specs each "," only_local ","Resolver  resolve  any? "," only_local  select "," only_local  each "]}," Bundler Repository cache":{"type":"method","name":"cache","children":[],"call":["FileUtils  cp ","@path join ","Bundler  logger info ","File  basename ","Bundler  logger ","gemfiles each ","FileUtils  mkdir_p "]}," Bundler RemoteSpecification method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _remote_specification send "," _remote_specification ","Gem Specification  new respond_to? ","Gem Specification  new "]}," Bundler RemoteSpecification _remote_specification":{"type":"method","name":"_remote_specification","children":[],"call":["Marshal  load ","Gem  inflate ","Gem RemoteFetcher  fetcher fetch_path "," _remote_uri ","Gem RemoteFetcher  fetcher ","Gem SpecFetcher  new fetch_spec "," URI ","@source_uri to_s ","Gem SpecFetcher  new ","Bundler  ui debug "," full_name ","Bundler  ui ","@spec_fetcher fetch_spec "," raise "]}," Bundler RemoteSpecification _remote_uri":{"type":"method","name":"_remote_uri","children":[],"call":["tuple join ","tuple - ","tuple -  join ","tuple -  - "]}," Bundler RemoteSpecification __swap__":{"type":"method","name":"__swap__","children":[],"call":[" raise ","extra_deps map map join ","extra_deps map map ","extra_deps map "," full_name ","Bundler  ui debug ","spec runtime_dependencies "," dependencies "," remote ","Bundler  ui ","extra_deps any? ","spec runtime_dependencies map - "," dependencies map ","spec runtime_dependencies map ","Gem Dependency  new ","d requirements_list ","d name "," proc ","SharedHelpers  ensure_same_dependencies ","spec dependencies ","d is_a? ","spec dependencies all? ","spec runtime_dependencies map -  map map join ","spec runtime_dependencies map -  map map ","spec runtime_dependencies map -  map ","spec runtime_dependencies map -  any? "]}," Bundler RemoteSpecification full_name":{"type":"method","name":"full_name","children":[],"call":[" platform "," platform nil? "," platform == ","@original_platform == ","@platform == "]}," Bundler RemoteSpecification initialize":{"type":"method","name":"initialize","children":[],"call":["Gem Version  create ","Gem Platform  new "]}," Bundler Environment list":{"type":"method","name":"list","children":[],"call":["Bundler  logger info ","spec version ","spec name ","Bundler  logger "," repository gems each "," repository gems "," repository "]}," Bundler Environment prune":{"type":"method","name":"prune","children":[],"call":[" repository prune "," sources "," gem_dependencies "," repository "]}," Bundler Environment cache":{"type":"method","name":"cache","children":[],"call":[" repository cache "," repository ","gemfile dirname join expand_path ","gemfile dirname join ","local full_name ","gemfile dirname ","Pathname  new ","local loaded_from "," raise ","local ! ","Gem SourceIndex  from_installed_gems find_name last ","Gem SourceIndex  from_installed_gems find_name ","Gem SourceIndex  from_installed_gems ","gemfiles empty? ","Dir  [] ","File  directory? ! ","File  directory? ","gemfile include? ","File  exist? ! ","File  exist? ","File  extname == ","File  extname ","options [] ","gemfile dirname join expand_path  dirname join expand_path ","Pathname  new  dirname join expand_path ","options []  dirname join expand_path ","gemfile dirname join expand_path  dirname join ","Pathname  new  dirname join ","options []  dirname join ","Gem SourceIndex  from_installed_gems find_name last  full_name ","gemfile dirname join expand_path  dirname ","Pathname  new  dirname ","options []  dirname ","Gem SourceIndex  from_installed_gems find_name last  loaded_from ","Gem SourceIndex  from_installed_gems find_name last  ! ","gemfile dirname join expand_path s empty? ","Pathname  new s empty? ","options [] s empty? ","Dir  []  empty? ","gemfile dirname join expand_path  include? ","Pathname  new  include? ","options []  include? "]}," Bundler CLI list":{"type":"method","name":"list","children":[],"call":["@manifest list ","@environment list ","@bundle list ","List  new run ","List  new "," options "," require "," require_relative "]}," Bundler CLI prune":{"type":"method","name":"prune","children":[],"call":["@manifest prune ","@environment prune ","@bundle prune ","Bundler  mode= "]}," Bundler CLI cache":{"type":"method","name":"cache","children":[],"call":["@manifest cache ","@environment cache "," raise ","@bundle cache ","gemfiles empty? ","Dir  [] ","File  directory? ! ","File  directory? ","gemfile include? ","File  exist? ! ","File  exist? ","File  extname == ","File  extname ","@options [] "," exit ","Bundler  ui info ","Bundler  ui ","Bundler  ui error ","e message ","environment cache ","Bundler  load ","Bundler  runtime cache ","Bundler  runtime ","Bundler  ui warn ","Bundler  runtime prune_cache "," options [] "," options ","Bundler  load lock ","Bundler  settings []= ","Bundler  settings ","Bundler  load cache ","Bundler  definition resolve_with_cache! ","Bundler  definition ","Bundler  load prune_cache ","Cache  new run ","Cache  new "," require "," setup_cache_all ","Bundler  definition validate_ruby! "," require_relative ","SharedHelpers  major_deprecation ","ARGV  include? ","@Bundler  load  cache ","Dir  []  empty? ","@options [] s empty? ","@options []  include? ","Bundler  load  cache "]}," Bundler DirectorySource merge_defined_specs":{"type":"method","name":"merge_defined_specs","children":[],"call":["specs []= ","spec full_name "," raise "," validate_gemspec ! "," validate_gemspec ","spec location ","existing version ","spec version ","spec name ","existing version != ","s name == ","s name ","specs values find ","specs values ","spec location= "," location ","@specs each "]}," Bundler DirectorySource locate_gemspecs":{"type":"method","name":"locate_gemspecs","children":[],"call":["specs []= ","spec full_name ","spec location= ","file dirname expand_path ","file dirname "," validate_gemspec "," eval ","File  read ","Pathname  new ","Dir  [] inject ","Dir  [] "," location "," eval s []= "," eval  full_name "," eval  location= ","Pathname  new  dirname expand_path ","Pathname  new  dirname "," validate_gem eval  "]}," Bundler DirectorySource add_spec":{"type":"method","name":"add_spec","children":[],"call":["@specs []= ","s version= ","Gem Version  new ","s name= ","Gem Specification  new ","path to_s "," raise ","@specs [] "]}," Bundler SystemGemSource instance":{"type":"method","name":"instance","children":[],"call":[]}," Bundler Source process_source_gems":{"type":"method","name":"process_source_gems","children":[],"call":["new_gems [] << ","new_gems [] ","spec name ","spec source= ","gems values each ","gems values ","h []= ","Hash  new "]}," Bundler Repository spec_file_for":{"type":"method","name":"spec_file_for","children":[],"call":["spec loaded_from relative_path_from to_s ","spec loaded_from relative_path_from ","spec loaded_from "]}," Bundler Repository load_path_for":{"type":"method","name":"load_path_for","children":[],"call":["gem_path join relative_path_from to_s ","gem_path join relative_path_from ","gem_path join "]}," Bundler Repository generate_bins":{"type":"method","name":"generate_bins","children":[],"call":["installer generate_bin ","path join ","spec full_name ","installer instance_eval ","Gem Installer  allocate ","options [] include? ","spec name ","options [] ","bundle each ","Gem Installer  allocate  generate_bin ","Gem Installer  allocate  instance_eval "]}," Bundler Repository only_local":{"type":"method","name":"only_local","children":[],"call":["s can_be_local? ","sources select "]}," Bundler Repository outdated_gems":{"type":"method","name":"outdated_gems","children":[],"call":[" source_index outdated sort "," source_index outdated "," source_index "]}," Bundler Environment default_sources":{"type":"method","name":"default_sources","children":[],"call":["SystemGemSource  instance ","GemSource  new "]}," Bundler Environment list_outdated":{"type":"method","name":"list_outdated","children":[],"call":["Bundler  logger info ","Bundler  logger ","outdated_gems each ","outdated_gems empty? "," repository outdated_gems "," repository "," repository outdated_gems  each "," repository outdated_gems  empty? "," repository  repository outdated_gems  "]}," Bundler Dsl _combine_except":{"type":"method","name":"_combine_except","children":[],"call":["o to_s "," Array compact uniq map "," Array compact uniq "," Array compact "," Array "]}," Bundler Dsl _combine_only":{"type":"method","name":"_combine_only","children":[],"call":["o to_s "," Array compact uniq map "," Array compact uniq "," Array compact "," Array "]}," Bundler Dsl _handle_git_option":{"type":"method","name":"_handle_git_option","children":[],"call":[" _handle_git_option "," git ","source add_spec ","Pathname  new ","options [] ","source required_specs << ","source required_specs "," raise ","source branch ","source branch != ","source ref ","source ref != ","@git_sources [] ","options [] to_s "," _version? "," _handle_options [] to_s _option "," options [] to_s  ","source options []  ","source options []  != ","@options [] to_s _sources [] "]}," Bundler Dsl _find_directory_source":{"type":"method","name":"_find_directory_source","children":[],"call":["path relative_path_from ","s location ","s location expand_path to_s < ","path expand_path to_s ","path expand_path ","s location expand_path to_s ","s location expand_path ","@directory_sources each ","@environment filename dirname join ","@environment filename dirname ","@environment filename ","Pathname  new ","@bundle gemfile dirname join ","@bundle gemfile dirname ","@bundle gemfile ","@environment filename dirname join  relative_@environment filename dirname join _from ","@bundle gemfile dirname join  relative_@bundle gemfile dirname join _from ","s location expand_@environment filename dirname join  to_s < ","s location expand_@bundle gemfile dirname join  to_s < ","@environment filename dirname join  expand_@environment filename dirname join  to_s ","@bundle gemfile dirname join  expand_@bundle gemfile dirname join  to_s ","@environment filename dirname join  expand_@environment filename dirname join  ","@bundle gemfile dirname join  expand_@bundle gemfile dirname join  ","s location expand_@environment filename dirname join  to_s ","s location expand_@bundle gemfile dirname join  to_s ","s location expand_@environment filename dirname join  ","s location expand_@bundle gemfile dirname join  "]}," Bundler Dsl _handle_vendored_option":{"type":"method","name":"_handle_vendored_option","children":[],"call":[" _handle_vendored_option "," directory ","options [] ","dir add_spec ","dir required_specs << ","dir required_specs "," _find_directory_source "," _version? "]}," Bundler Dsl git":{"type":"method","name":"git","children":[],"call":[" block_given? ","@environment add_priority_source ","@git_sources []= ","GitSource  new ","options merge "," raise "," source ","Source Git  new "," _normalize_hash merge "," _normalize_hash "," with_source ","@sources add_git_source "," normalize_hash merge "," normalize_hash ","GitSource  new _sources []= "]}," Bundler Dsl directory":{"type":"method","name":"directory","children":[],"call":[" block_given? ","@environment add_priority_source ","@directory_sources << ","DirectorySource  new ","options merge "," raise ","DirectorySource  new _sources << "]}," Bundler Dsl evaluate":{"type":"method","name":"evaluate","children":[],"call":[]}," Bundler CLI list_outdated":{"type":"method","name":"list_outdated","children":[],"call":["@environment list_outdated ","@bundle list_outdated "]}," Bundler Resolver debug":{"type":"method","name":"debug","children":[],"call":[" puts ","$stderr puts ","debug_info inpsect ","debug_info is_a? ","ENV  [] ","debug_info inspect ","STDERR  puts ","   * + ","   * ","debug_info split map ","debug_info split "," debug? "," warn ","BUNDLER:  + + ","BUNDLER:  + ","depth == ","debug_info inpsect  inpsect ","debug_info inspect  inpsect ","debug_info inpsect  is_a? ","debug_info inspect  is_a? ","debug_info inpsect  inspect ","debug_info inspect  inspect ","debug_info inpsect  split map ","debug_info inspect  split map ","debug_info inpsect  split ","debug_info inspect  split "]}," Bundler GitSource to_s":{"type":"method","name":"to_s","children":[],"call":[" uri "]}," Bundler Dsl _version?":{"type":"method","name":"_version?","children":[],"call":["Gem Version  new "]}," Bundler Dsl default_gemfile":{"type":"method","name":"default_gemfile","children":[],"call":[]}," Bundler Dsl load_gemfile":{"type":"method","name":"load_gemfile","children":[],"call":[]}," Bundler Bundle require_code":{"type":"method","name":"require_code","children":[],"call":["file inspect ","dep except inspect ","dep except ","dep only inspect ","dep only "]}," Bundler Bundle spec_file_for":{"type":"method","name":"spec_file_for","children":[],"call":["spec loaded_from relative_path_from to_s ","spec loaded_from relative_path_from ","spec loaded_from "]}," Bundler Bundle load_path_for":{"type":"method","name":"load_path_for","children":[],"call":["gem_path join relative_path_from to_s ","gem_path join relative_path_from ","gem_path join "]}," Bundler Bundle load_paths_for_specs":{"type":"method","name":"load_paths_for_specs","children":[],"call":["load_paths << "," load_path_for ","spec require_paths each ","spec require_paths ","spec bindir ","Pathname  new ","spec full_gem_path ","options [] include? ","spec name ","options [] ","specs each ","gem_path join exist? ","gem_path join ","spec full_Pathname  new  ","Pathname  new  join exist? ","Pathname  new  join "]}," Bundler Bundle generate_environment":{"type":"method","name":"generate_environment","children":[],"call":["file puts ","erb result "," binding ","ERB  new ","File  read ","File  join ","File  dirname ","File  open "," path join "," path ","options [] relative_path_from to_s ","options [] relative_path_from ","options [] ","@bindir relative_path_from to_s ","@bindir relative_path_from "," load_paths_for_specs ","FileUtils  mkdir_p ","ERB  new  result ","@@bindir relative_path_from to_s  relative_path_from to_s ","@@bindir relative_path_from to_s  relative_path_from ","  load_paths_for_specs _for_specs "]}," Bundler Bundle configure":{"type":"method","name":"configure","children":[],"call":[" generate_environment "," generate_environment_picker ","FileUtils  mkdir_p "," path ","file puts ","@environment environment_rb ","File  open "," gem_path join "," gem_path "]}," Bundler Bundle expand":{"type":"method","name":"expand","children":[],"call":["repo expand "," each_repo "]}," Bundler Bundle cleanup_spec":{"type":"method","name":"cleanup_spec","children":[],"call":["FileUtils  rm_rf ","@path join ","spec full_name ","@gems_path join ","@specs_path join "]}," Bundler Bundle cleanup":{"type":"method","name":"cleanup","children":[],"call":["FileUtils  rm_rf ","@bindir join ","Bundler  logger info ","Bundler  logger ","valid_executables include? ","spec executables each ","spec executables "," cleanup_spec ","spec version ","spec name ","to_delete each ","(send\n  (lvar :valid) :map) flatten compact ","(send\n  (lvar :valid) :map) flatten ","s executables ","valid map ","spec version == ","other version ","spec name == ","other name ","valid any? ","to_delete delete_if "," gems "," bindir join "," bindir ","(send\n  (lvar :valid) :map) flatten compact  include? "," gems  each "," gems  delete_if "]}," Bundler Bundle add_spec":{"type":"method","name":"add_spec","children":[],"call":["f puts ","spec to_ruby ","File  open ","destination join ","spec full_name ","destination mkdir ","destination exist? "," path join "," path "," path join  join "," path join  mkdir "," path join  exist? "]}," Bundler Bundle expand_vendored_gem":{"type":"method","name":"expand_vendored_gem","children":[],"call":["File  symlink ","@path join ","spec full_name ","spec location ","FileUtils  mkdir_p "," add_spec ","@gems_path join "]}," Bundler Bundle expand_gemfile":{"type":"method","name":"expand_gemfile","children":[],"call":["Gem Command  build_args= "," raise "," cleanup_spec ","installer install ","Gem Installer  new ","options merge ","build_args map ","options [] [] ","spec name ","options [] ","@path join to_s ","@path join ","spec full_name ","Bundler  logger info ","spec version ","Bundler  logger ","@cache_path join to_s ","@cache_path join "," bindir "," gem_path ","Gem Installer  new  install "]}," Bundler Bundle generate_bins":{"type":"method","name":"generate_bins","children":[],"call":["installer generate_bin ","path join ","spec full_name ","installer instance_eval ","Gem Installer  allocate ","options [] include? ","spec name ","options [] ","bundle each ","gems_path join "," gem_path "," bindir ","spec no_bundle? ","Gem Installer  allocate  generate_bin "," gem_path  join ","Gem Installer  allocate  instance_eval ","gems_ gem_path  join "," gem_ gem_path  "]}," Bundler Bundle do_install":{"type":"method","name":"do_install","children":[],"call":[" expand_vendored_gem "," expand_gemfile ","spec source ","@path join directory? ","@path join ","spec full_name ","spec loaded_from= ","options [] include? ","spec name ","options [] ","bundle each ","@gems_path join directory? ","@gems_path join ","@specs_path join ","spec no_bundle? "]}," Bundler Bundle download":{"type":"method","name":"download","children":[],"call":["spec source download ","spec source ","options [] include? ","spec name ","options [] ","(send\n  (lvar :bundle) :sort_by) each ","s full_name downcase ","s full_name ","bundle sort_by ","spec no_bundle? "]}," Bundler Bundle only_local":{"type":"method","name":"only_local","children":[],"call":["s can_be_local? ","sources select ","s local? "]}," Bundler Bundle download_path_for":{"type":"method","name":"download_path_for","children":[],"call":["@repos [] download_path_for ","@repos [] "]}," Bundler Bundle source_index":{"type":"method","name":"source_index","children":[],"call":["spec loaded_from= ","@path join ","spec full_name ","index each ","Gem SourceIndex  from_gems_in ","@specs_path join ","Gem SourceIndex  from_gems_in  each "]}," Bundler Bundle outdated_gems":{"type":"method","name":"outdated_gems","children":[],"call":[" source_index outdated sort "," source_index outdated "," source_index "]}," Bundler Bundle gems":{"type":"method","name":"gems","children":[],"call":[" source_index gems values "," source_index gems "," source_index "]}," Bundler Bundle prune":{"type":"method","name":"prune","children":[],"call":["FileUtils  rm ","@path join ","spec full_name ","Bundler  logger info ","spec version ","spec name ","Bundler  logger ","s version == ","s version ","s name == ","s name ","bundle any? ","specs each ","@cache gems each ","@cache gems ","Resolver  resolve ","(ivar :@cache) + "," only_local ","s local= ","s repository= ","sources each ","@cache_path join ","@environment sources ","@environment gem_dependencies ","@environment dependencies ","Resolver  resolve  any? "," only_local  each ","@environment  only_local  "]}," Bundler Bundle cache":{"type":"method","name":"cache","children":[],"call":["FileUtils  cp ","@path join ","Bundler  logger info ","File  basename ","Bundler  logger ","gemfiles each ","FileUtils  mkdir_p "]}," Bundler Bundle install":{"type":"method","name":"install","children":[],"call":[" configure "," cleanup "," generate_bins "," do_install "," download ","Resolver  resolve ","(ivar :@cache) + ","Bundler  logger info ","Bundler  logger ","valid ! ","options [] "," only_local ","dep to_gem_dependency ","source_requirements []= ","dep source ","dep name ","dependencies map ","s local= ","s repository= ","sources each ","(send\n  (lvar :only_envs) :any?) ! ","d in? ","only_envs any? ","dependencies reject! ","@environment sources ","@environment dependencies ","@environment dependencies  map "," only_local  each ","@environment sources  each ","(send\n  (lvar :options [] ) :any?) ! ","options []  any? ","@environment dependencies  reject! ","@environment  only_local  ","@environment @environment sources  ","@environment @environment dependencies  "]}," Bundler Bundle initialize":{"type":"method","name":"initialize","children":[],"call":["GemDirectorySource  new ","@path join ","Pathname  new ","FileUtils  mkdir_p "," gem_path join "," gem_path ","Dsl  evaluate ","Environment  new ","Pathname  new  join "]}," Bundler GitSource checkout":{"type":"method","name":"checkout","children":[],"call":["Dir  chdir "," location "]}," Bundler GitSource clone":{"type":"method","name":"clone","children":[],"call":[" location ","FileUtils  mkdir_p "," location dirname ","Bundler  logger info ","Bundler  logger "," raise "," local "]}," Bundler GitSource fetch":{"type":"method","name":"fetch","children":[],"call":["Dir  chdir "," location ","Bundler  logger info ","Bundler  logger "," local "]}," Bundler GitSource update":{"type":"method","name":"update","children":[],"call":[" clone "," fetch "," location directory? "," location "]}," Bundler GemSource fetch_prerelease_specs":{"type":"method","name":"fetch_prerelease_specs","children":[],"call":["Bundler  logger warn "," uri ","Bundler  logger ","Marshal  load ","Gem RemoteFetcher  fetcher fetch_path ","Gem RemoteFetcher  fetcher "]}," Bundler GemSource fetch_main_specs":{"type":"method","name":"fetch_main_specs","children":[],"call":[" raise ","e message "," to_s ","Marshal  load ","Gem RemoteFetcher  fetcher fetch_path "," uri ","Gem RemoteFetcher  fetcher "]}," Bundler GemSource build_gem_index":{"type":"method","name":"build_gem_index","children":[],"call":["gems [] << ","gems [] ","spec name ","Gem Platform  match ","spec platform ","spec source= ","RemoteSpecification  new ","index each ","h []= ","Hash  new ","RemoteSpecification  new  name ","RemoteSpecification  new  platform ","RemoteSpecification  new  source= "]}," Bundler Environment default_gem_path":{"type":"method","name":"default_gem_path","children":[],"call":[]}," Bundler Bundle generate_environment_picker":{"type":"method","name":"generate_environment_picker","children":[],"call":["FileUtils  cp "," path join "," path ","File  dirname "]}," Bundler SystemGemSource new":{"type":"method","name":"new","children":[],"call":[]}," Bundler Environment spec_file_for":{"type":"method","name":"spec_file_for","children":[],"call":["spec loaded_from relative_path_from to_s ","spec loaded_from relative_path_from ","@bundle gem_path ","spec loaded_from "]}," Bundler Environment load_path_for":{"type":"method","name":"load_path_for","children":[],"call":["gem_path join relative_path_from to_s ","gem_path join relative_path_from ","@bundle gem_path ","gem_path join "]}," Bundler Environment load_paths_for_specs":{"type":"method","name":"load_paths_for_specs","children":[],"call":["load_paths << "," load_path_for ","spec require_paths each ","spec require_paths ","spec bindir ","Pathname  new ","spec full_gem_path ","spec no_bundle? ","specs each ","spec Pathname  new  "]}," Bundler Environment environment_rb":{"type":"method","name":"environment_rb","children":[],"call":["erb result "," binding ","ERB  new ","File  read ","File  join ","File  dirname ","@bundle gemfile relative_path_from to_s ","@bundle gemfile relative_path_from ","@bundle gem_path ","@bundle gemfile ","@bundle bindir relative_path_from to_s ","@bundle bindir relative_path_from ","@bundle bindir "," load_paths_for_specs ","ERB  new  result ","@bundle @bundle bindir relative_path_from to_s  relative_path_from to_s ","@bundle @bundle bindir relative_path_from to_s  relative_path_from ","@bundle @bundle bindir relative_path_from to_s  ","  load_paths_for_specs _for_specs "]}," Bundler Dependency no_bundle?":{"type":"method","name":"no_bundle?","children":[],"call":[" source == ","SystemGemSource  instance "," source "]}," Bundler Bundle setup_environment":{"type":"method","name":"setup_environment","children":[],"call":["ENV  []= ","ENV  [] "," gem_path "," bindir ","@environment system_gems "]}," Bundler Bundle list":{"type":"method","name":"list","children":[],"call":["Bundler  logger info ","spec version ","spec name ","Bundler  logger "," gems each "," gems "]}," Bundler Bundle list_outdated":{"type":"method","name":"list_outdated","children":[],"call":["Bundler  logger info ","Bundler  logger ","outdated_gems each ","outdated_gems empty? "," source_index outdated sort "," source_index outdated "," source_index "," source_index outdated sort  each "," source_index outdated sort  empty? "]}," Bundler Bundle bindir=":{"type":"method","name":"bindir=","children":[],"call":["(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send nil :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path "," root join "," root ","path relative? "]}," Bundler Bundle bindir":{"type":"method","name":"bindir","children":[],"call":[" root join "," root "]}," Bundler Bundle gem_path":{"type":"method","name":"gem_path","children":[],"call":[" path join ","Gem ConfigMap  [] ","Gem  ruby_engine "," path "]}," Bundler Bundle path=":{"type":"method","name":"path=","children":[],"call":["(if\n  (send\n    (lvar :path) :relative?)\n  (send\n    (send nil :root) :join\n    (lvar :path))\n  (lvar :path)) expand_path "," root join "," root ","path relative? "]}," Bundler Bundle path":{"type":"method","name":"path","children":[],"call":[" root join "," root "]}," Bundler Bundle root":{"type":"method","name":"root","children":[],"call":[" gemfile parent "," gemfile "]}," Bundler Bundle default_gemfile":{"type":"method","name":"default_gemfile","children":[],"call":[]}," Bundler Bundle load":{"type":"method","name":"load","children":[],"call":[]}," Bundler remote?":{"type":"method","name":"remote?","children":[],"call":["@mode == "]}," Bundler writable?":{"type":"method","name":"writable?","children":[],"call":["@mode != "]}," Bundler local?":{"type":"method","name":"local?","children":[],"call":["@mode == "]}," Bundler GitSource local?":{"type":"method","name":"local?","children":[],"call":[" raise "," location directory? "," location "]}," Bundler DirectorySource local?":{"type":"method","name":"local?","children":[],"call":[]}," Bundler GemDirectorySource local?":{"type":"method","name":"local?","children":[],"call":[]}," Bundler SystemGemSource local?":{"type":"method","name":"local?","children":[],"call":[]}," Bundler GemSource local?":{"type":"method","name":"local?","children":[],"call":[]}," Bundler configure_gem_home_and_path":{"type":"method","name":"configure_gem_home_and_path","children":[],"call":["Gem  clear_paths ","ENV  []= "," bundle_path to_s "," bundle_path ","(lvar :gem_home) flatten compact join ","(lvar :gem_home) flatten compact ","(lvar :gem_home) flatten ","Gem  path ","Gem  dir ","File  expand_path "," root "," settings [] "," settings ","paths join ","p empty? ","(send\n  (const nil :Gem) :dir) flatten compact reject ","(send\n  (const nil :Gem) :dir) flatten compact ","(send\n  (const nil :Gem) :dir) flatten ","(send\n  (const nil :Gem) :dir) flatten compact uniq reject ","(send\n  (const nil :Gem) :dir) flatten compact uniq ","Gem  dir != ","FileUtils  mkdir_p ","Bundler  rubygems clear_paths ","Bundler  rubygems ","possibles flatten compact uniq reject ","possibles flatten compact uniq ","possibles flatten compact ","possibles flatten ","Bundler  rubygems gem_path ","Bundler  rubygems gem_dir ","Bundler  rubygems gem_dir != ","Bundler  rubygems refresh "," configure_gem_home ","ENV  [] empty? ","ENV  [] ","ENV  [] nil? "," configure_gem_path ","Gem  clear_ settings [] s ","Gem  clear_possibles flatten compact uniq reject  "," bundle_ settings []  to_s "," bundle_ settings []  ","Gem   settings []  ","File  expand_ settings []  "," settings [] s join ","possibles flatten compact uniq reject  join ","Bundler  rubygems clear_ settings [] s ","Bundler  rubygems clear_possibles flatten compact uniq reject  ","Bundler  rubygems gem_ settings []  "," configure_gem_ settings []  "]}," Bundler default_gemfile":{"type":"method","name":"default_gemfile","children":[],"call":[" raise ","current parent ","filename exist? ","current join ","current root? ","Pathname  new ","Dir  pwd ","SharedHelpers  default_gemfile ","ENV  [] ","current parent  parent ","Pathname  new  parent ","current join  exist? ","current parent  join ","Pathname  new  join ","current parent  root? ","Pathname  new  root? "]}," Bundler settings":{"type":"method","name":"settings","children":[],"call":["Settings  new "," root "," app_config_path ","Pathname  new expand_path ","Pathname  new "]}," Bundler root":{"type":"method","name":"root","children":[],"call":[" default_gemfile dirname "," default_gemfile "," default_gemfile dirname expand_path ","Pathname  new ","File  expand_path "," raise "," default_bundle_dir ","SharedHelpers  root "," default_ default_bundle_dir  "]}," Bundler cache":{"type":"method","name":"cache","children":[],"call":[" home join "," home "," bundle_path join "," bundle_path "]}," Bundler install_path":{"type":"method","name":"install_path","children":[],"call":[" home join "," home "]}," Bundler home":{"type":"method","name":"home","children":[],"call":["Pathname  new join ","Pathname  new "," bundle_path "," bundle_path join "]}," Bundler definition":{"type":"method","name":"definition","children":[],"call":["Definition  from_gemfile ","Definition  from_lock ","lockfile exist? ","root join ","Pathname  new dirname ","Pathname  new "," configure "," default_gemfile "," root join "," root ","Definition  build "," default_lockfile "," upgrade_lockfile ","root join  exist? "," root join  exist? ","Pathname  new dirname  join "," Pathname  new dirname  join "," Pathname  new dirname  "," default_root join  "," default_ root join  "," upgrade_root join  "," upgrade_ root join  "]}," Bundler load":{"type":"method","name":"load","children":[],"call":["Environment  new "," definition ","Pathname  new dirname ","Pathname  new "," default_gemfile ","Runtime  new "," runtime ","Kernel  require "," env_file ","SharedHelpers  gem_loaded= "," current_env_file? "," update_env_file? ! "," update_env_file? "," root "," Pathname  new dirname  "]}," Bundler setup":{"type":"method","name":"setup","children":[],"call":[" load setup "," load "," default_gemfile ","unloaded any? ","groups | ","groups - ","groups empty? "," definition validate_ruby! "," definition ","SharedHelpers  print_major_deprecations! "," definition validate_runtime! "," default_ default_gemfile  ","groups -  any? "]}," Bundler bundle_path":{"type":"method","name":"bundle_path","children":[],"call":["Pathname  new expand_path "," root ","Pathname  new ","Gem  user_home "," settings [] "," settings ","Gem  dir "," env [] "," env ","Gem ConfigMap  [] ","Gem  ruby_engine "," settings path "," configured_bundle_path path "," configured_bundle_path "]}," Bundler ui":{"type":"method","name":"ui","children":[],"call":["UI  new "," ui= ","UI Silent  new ","UI Shell  new "]}," Bundler configure":{"type":"method","name":"configure","children":[],"call":[" configure_gem_home_and_path "," point_gem_home "," env [] "," env "]}," Bundler BundlerError status_code":{"type":"method","name":"status_code","children":[],"call":[" class status_code "," class "]}," Thor help":{"type":"method","name":"help","children":[],"call":[" class help "," shell "," class "," class task_help "," class_options_help ","shell say ","shell print_table ","a [] <=> ","b [] ","a [] ","list sort! ","klass printable_tasks ","Thor Util  thor_classes_in each ","Thor Util  thor_classes_in "," printable_tasks "," class command_help "," class subcommand_classes [] help "," class subcommand_classes [] "," class subcommand_classes "," class subcommands include? "," class subcommands ","klass printable_commands ","Bundler Thor Util  thor_classes_in each ","Bundler Thor Util  thor_classes_in "," printable_commands "," printable_tasks  sort! "," printable_commands  sort! "]}," Thor normalize_task_name":{"type":"method","name":"normalize_task_name","children":[],"call":["meth to_s gsub ","meth to_s "," default_task "," map [] "," map "," find_subcommand_and_update_argv ","possibilities first ","possibilities size < ","possibilities size "," raise ","possibilities join ","possibilities size > "," find_task_possibilities "," default_task to_s gsub "," default_task to_s ","possibilities first  to_s gsub "," map []  to_s gsub ","possibilities first  to_s "," map []  to_s "," find_task_possibilities  first "," find_task_possibilities  size < "," find_task_possibilities  size "," find_task_possibilities  join "," find_task_possibilities  size > "," find_task_ find_task_possibilities  "]}," Thor initialize_added":{"type":"method","name":"initialize_added","children":[],"call":[" class_options merge! "," method_options "," class_options "]}," Thor create_task":{"type":"method","name":"create_task","children":[],"call":[" puts ","(str \"[WARNING] Attempted to create task \") << << "," caller [] inspect "," caller [] "," caller ","(str \"[WARNING] Attempted to create task \") << ","meth inspect ","meth to_sym == ","meth to_sym "," all_tasks [] ","meth to_s "," all_tasks "," tasks []= ","Thor Task  new "," method_options "," tasks ","meth == ","base_class new "]}," Thor baseclass":{"type":"method","name":"baseclass","children":[],"call":[]}," Thor banner":{"type":"method","name":"banner","children":[],"call":["task formatted_usage ","base == ","File  basename ","$0 split first ","$0 split ","thor  + "," banner_base == "," banner_base ","File  basename split first ","File  basename split "," basename ","command formatted_usage ","(send\n  (send\n    (send\n      (lvar :command) :formatted_usage\n      (self)\n      (gvar :$thor_runner)\n      (lvar :subcommand)) :split\n    (str \"\\n\")) :map) join ","command formatted_usage split map ","command formatted_usage split ","File  basename  == ","File  basename split first  == ","File  File  basename name ","File  File  basename split first name "," banner_File  basename  == "," banner_File  basename split first  == "," banner_File  basename  "," banner_File  basename split first  ","File  File  basename name split first ","File  File  basename split first name split first ","File  File  basename name split ","File  File  basename split first name split "," File  basename name "," File  basename split first name "]}," Thor printable_tasks":{"type":"method","name":"printable_tasks","children":[],"call":["item << ","task description gsub ","task description "," banner ","(if\n  (lvar :all)\n  (send nil :all_tasks)\n  (send nil :tasks)) map "," tasks "," all_tasks ","(send\n  (begin\n    (if\n      (lvar :all)\n      (send nil :all_tasks)\n      (send nil :tasks))) :map) compact ","task hidden? "]}," Thor task_help":{"type":"method","name":"task_help","children":[],"call":["shell say ","task description "," class_options_help ","task options map ","task options "," banner "," raise "," namespace "," all_tasks [] "," all_tasks "," handle_no_task_error "," normalize_task_name ","shell print_wrapped ","task long_description "," all_tasks []  description "," all_tasks []  options map "," all_tasks []  options "," all_ all_tasks [] s [] "," all_ all_tasks [] s "," handle_no_ all_tasks [] _error "," normalize_ all_tasks [] _name "," all_tasks []  long_description "]}," Thor start":{"type":"method","name":"start","children":[],"call":[" new invoke "," new ","args [] ","Range  new "," arguments size "," arguments ","Thor Task Dynamic  new ","config merge! ","task options ","Thor Options  split "," all_tasks [] "," all_tasks "," normalize_task_name ","given_args shift ","meth !~ "," map [] "," map ","meth empty? ! ","meth empty? ","given_args first to_s ","given_args first ","Thor DynamicTask  new "," all_tasks []  options "," all_ all_tasks [] s [] "," all_ all_tasks [] s "," normalize_ all_tasks [] _name "," normalize_task_name  !~ ","given_args first to_s  !~ "," normalize_task_name  empty? ! ","given_args first to_s  empty? ! "," normalize_task_name  empty? ","given_args first to_s  empty? "]}," Thor method_option":{"type":"method","name":"method_option","children":[],"call":[" build_option "," method_options "," find_and_refresh_task options "," find_and_refresh_task ","options [] "," find_and_refresh_command options "," find_and_refresh_command "]}," Thor method_options":{"type":"method","name":"method_options","children":[],"call":[" build_options "]}," Thor map":{"type":"method","name":"map","children":[],"call":["@map []= ","key each ","key respond_to? ","mappings each "," from_superclass ","kw merge! ","kw empty? ! ","kw empty? ","kw merge!  each "]}," Thor desc":{"type":"method","name":"desc","children":[],"call":["task description= ","task usage= "," find_and_refresh_task ","options [] ","command description= ","command usage= "," find_and_refresh_command "," find_and_refresh_task  description= "," find_and_refresh_task  usage= "," find_and_refresh_ find_and_refresh_task  "," find_and_refresh_command  description= "," find_and_refresh_command  usage= "," find_and_refresh_ find_and_refresh_command  "]}," Thor default_task":{"type":"method","name":"default_task","children":[],"call":["meth to_s "," from_superclass "]}," Thor Util ruby_command":{"type":"method","name":"ruby_command","children":[],"call":["ruby sub! ","linked_ruby == ","File  readlink ","File  symlink? ","alternate_ruby << ","RbConfig CONFIG  [] ","File  join ","File  respond_to? ","ruby_name != ","ruby << ","File  join  sub! ","File  readlink  == ","linked_File  join  == ","File  join  << ","alternate_File  join  << ","File  join _name != ","RbConfig CONFIG  []  != "]}," Thor Util globs_for":{"type":"method","name":"globs_for","children":[],"call":[" escape_globs "]}," Thor Util thor_root_glob":{"type":"method","name":"thor_root_glob","children":[],"call":["File  join ","File  directory? ","files map! ","Dir  [] "," escape_globs "," thor_root ","Dir  []  map! "]}," Thor Util thor_root":{"type":"method","name":"thor_root","children":[],"call":["File  join gsub ","File  join "," user_home ","File  join tr "]}," Thor Util user_home":{"type":"method","name":"user_home","children":[],"call":["File  expand_path ","ENV  [] ","File  join "]}," Thor Util load_thorfile":{"type":"method","name":"load_thorfile","children":[],"call":["$stderr puts ","e backtrace first ","e backtrace ","e message ","path inspect ","Bundler Thor Sandbox  class_eval ","File  binread ","Thor Sandbox  class_eval "]}," Thor Util namespace_to_thor_class_and_task":{"type":"method","name":"namespace_to_thor_class_and_task","children":[],"call":[]}," Thor Util camel_case":{"type":"method","name":"camel_case","children":[],"call":["(send\n  (send\n    (lvar :str) :split\n    (str \"_\")) :map) join ","i capitalize ","str split map ","str split ","str =~ ","str !~ ","str split map join "]}," Thor Util snake_case":{"type":"method","name":"snake_case","children":[],"call":["$+ downcase ","str gsub squeeze =~ ","str gsub squeeze ","str gsub ","str downcase ","str =~ "]}," Thor Util thor_classes_in":{"type":"method","name":"thor_classes_in","children":[],"call":["stringfied_constants include? ","subclass name gsub ","klass name ","subclass name ","Bundler Thor Base  subclasses select ","Bundler Thor Base  subclasses ","c to_s ","klass constants map ","klass constants ","Thor Base  subclasses select ","Thor Base  subclasses ","klass constants map  include? "]}," Thor Util namespaces_in_content":{"type":"method","name":"namespaces_in_content","children":[],"call":["new_constants compact! ","c namespace ","new_constants map! ","Bundler Thor Base  subclasses replace ","Bundler Thor Base  subclasses ","Bundler Thor Base  subclasses dup "," load_thorfile ","Bundler Thor Base  subclasses clear ","Thor Base  subclasses replace ","Thor Base  subclasses ","Thor Base  subclasses dup ","Thor Base  subclasses clear ","Bundler Thor Base  subclasses dup  compact! ","Thor Base  subclasses dup  compact! ","Bundler Thor Base  subclasses dup  map! ","Thor Base  subclasses dup  map! "]}," Thor Util namespace_from_thor_class":{"type":"method","name":"namespace_from_thor_class","children":[],"call":[" snake_case squeeze "," snake_case ","constant to_s gsub ","constant to_s "," snake_case squeeze  to_s gsub ","constant to_s gsub  to_s gsub "," snake_case squeeze  to_s ","constant to_s gsub  to_s "]}," Thor Util find_by_namespace":{"type":"method","name":"find_by_namespace","children":[],"call":["klass namespace == ","klass namespace ","Bundler Thor Base  subclasses detect ","Bundler Thor Base  subclasses ","namespace =~ ","namespace empty? ","Thor Base  subclasses find ","Thor Base  subclasses ","Thor Base  subclasses detect "]}," Thor Task parse_no_method_error":{"type":"method","name":"parse_no_method_error","children":[],"call":[" raise ","(str \"The \") << "," name ","instance class namespace ","instance class ","e message =~ ","Regexp  escape ","instance to_s ","e message "]}," Thor Task parse_argument_error":{"type":"method","name":"parse_argument_error","children":[],"call":[" raise ","(str \"'\") << "," formatted_usage ","instance class "," name ","instance is_a? ","e message =~ ","e message ","backtrace empty? "," sans_backtrace ","e backtrace "," backtrace_match? ","e backtrace first to_s ","e backtrace first "," sans_backtrace  empty? "," sans_ sans_backtrace  ","e  sans_backtrace  ","  sans_backtrace _match? ","e  sans_backtrace  first to_s ","e  sans_backtrace  first "]}," Thor Task sans_backtrace":{"type":"method","name":"sans_backtrace","children":[],"call":["frame =~ ","backtrace reject ","RUBY_PLATFORM  =~ "]}," Thor Task public_method?":{"type":"method","name":"public_method?","children":[],"call":["(send\n  (lvar :collection) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","collection & "," name to_sym "," name "," name to_s ","instance private_methods + ","instance protected_methods ","instance private_methods ","(send\n  (send\n    (lvar :instance) :public_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ! ","(send\n  (send\n    (lvar :instance) :public_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance public_methods & ","instance public_methods ","(send\n  (lvar :instance private_methods + ) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance private_methods +  & "]}," Thor Task required_options":{"type":"method","name":"required_options","children":[],"call":["(send\n  (send nil :options) :map) compact sort join ","(send\n  (send nil :options) :map) compact sort ","(send\n  (send nil :options) :map) compact ","o usage ","o required? "," options map "," options "]}," Thor Task formatted_usage":{"type":"method","name":"formatted_usage","children":[],"call":["formatted strip ","formatted << "," required_options "," usage to_s "," usage ","match << << ","(send\n  (send\n    (lvar :klass) :arguments) :map) compact join ","(send\n  (send\n    (lvar :klass) :arguments) :map) compact ","a usage ","klass arguments map ","klass arguments ","match << "," usage to_s gsub "," name ","klass arguments empty? ! ","klass arguments empty? ","namespace gsub ","klass namespace ","namespace == ","namespace nil? ","formatted sub! ","klass namespace split last ","klass namespace split ","klass namespace  gsub ","klass klass namespace  ","klass namespace  == ","klass namespace  nil? ","klass klass namespace  split last ","klass klass namespace  split "]}," Thor Task run":{"type":"method","name":"run","children":[],"call":[" parse_no_method_error "," raise ","instance class debugging ","instance class ","instance class respond_to? "," parse_argument_error "," caller ","instance send "," name "," public_method? ","instance class handle_no_task_error "," handle_no_method_error? ","instance class handle_argument_error "," handle_argument_error? "," name to_sym "," local_method? ","instance method arity ","instance method "," private_method? ","instance __send__ ","instance method instance method arity  "]}," Thor Task initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" options= ","other options dup ","other options "]}," Thor Task initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Thor Task Dynamic run":{"type":"method","name":"run","children":[],"call":[" raise "," name ","(send\n  (send\n    (lvar :instance) :methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance methods & "," name to_sym "," name to_s ","instance methods ","instance class handle_no_task_error ","instance class "]}," Thor Task Dynamic initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Thor Shell _shared_configuration":{"type":"method","name":"_shared_configuration","children":[],"call":[" merge! "," shell "]}," Thor Shell shell=":{"type":"method","name":"shell=","children":[],"call":[]}," Thor Shell shell":{"type":"method","name":"shell","children":[],"call":["Thor Base  shell new ","Thor Base  shell ","Bundler Thor Base  shell new ","Bundler Thor Base  shell "]}," Thor Shell initialize":{"type":"method","name":"initialize","children":[],"call":[" shell base "," shell "," shell respond_to? "," shell= ","config [] "]}," Thor Base shell=":{"type":"method","name":"shell=","children":[],"call":[]}," Thor Base shell":{"type":"method","name":"shell","children":[],"call":["ENV  [] ! ","ENV  [] ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] ","Bundler Thor Shell  const_get ","ENV  [] size > ","ENV  [] size ","ENV  [] empty? ! ","ENV  [] empty? ","Thor Shell  const_get "]}," Thor Shell Color diff_lcs_loaded?":{"type":"method","name":"diff_lcs_loaded?","children":[],"call":[" require ","@diff_lcs_loaded nil? "]}," Thor Shell Color output_diff_line":{"type":"method","name":"output_diff_line","children":[],"call":[" say ","diff old_element chomp ","diff old_element ","diff new_element chomp ","diff new_element ","diff action "]}," Thor Shell Color show_diff":{"type":"method","name":"show_diff","children":[],"call":[" output_diff_line ","Diff LCS  sdiff each ","Diff LCS  sdiff ","content to_s split ","content to_s ","File  binread to_s split ","File  binread to_s ","File  binread ","ENV  [] nil? ","ENV  [] "," diff_lcs_loaded? ","content to_s split  to_s split ","content to_s split  to_s "]}," Thor Shell Color set_color":{"type":"method","name":"set_color","children":[],"call":[" class const_get ","color to_s upcase ","color to_s "," class ","color is_a? ","foreground to_s upcase ","foreground to_s ","foreground is_a? ","ansi_colors join "," lookup_color ","colors map ","colors all? "," can_display_colors? ! "," can_display_colors? ","colors compact empty? ","colors compact "," class const_get  to_s upcase "," class const_get  to_s "," class const_get  is_a? ","ansi_ class const_get s join "," lookup_ class const_get  "," class const_get s map "," class const_get s all? "," can_display_ class const_get s? ! "," can_display_ class const_get s? "," class const_get s compact empty? "," class const_get s compact "]}," Thor Shell Basic truncate":{"type":"method","name":"truncate","children":[],"call":["(or\n  (send\n    (lvar :string) :[]\n    (int 0)\n    (send\n      (lvar :width) :-\n      (int 3)))\n  (str \"\")) + ","string [] ","width - ","string length <= ","string length ","(send\n  (send\n    (lvar :chars) :[]\n    (int 0)\n    (send\n      (lvar :width) :-\n      (int 3))) :join) + ","chars [] join ","chars [] ","chars join ","chars length <= ","chars length ","string chars to_a ","string chars "," as_unicode ","chars [] join + ","(send\n  (send\n    (lvar :string chars to_a ) :[]\n    (int 0)\n    (send\n      (lvar :width) :-\n      (int 3))) :join) + ","string chars to_a  [] join ","string chars to_a  [] ","string chars to_a  join ","string chars to_a  length <= ","string chars to_a  length ","string string chars to_a  to_a ","string string chars to_a  ","string chars to_a  [] join + "]}," Thor Shell Basic unix?":{"type":"method","name":"unix?","children":[],"call":["RUBY_PLATFORM  =~ "]}," Thor Shell Basic dynamic_width_tput":{"type":"method","name":"dynamic_width_tput","children":[],"call":["(str \"tput cols 2>/dev/null\") to_i "]}," Thor Shell Basic dynamic_width_stty":{"type":"method","name":"dynamic_width_stty","children":[],"call":["(str \"stty size 2>/dev/null\") split [] to_i ","(str \"stty size 2>/dev/null\") split [] ","(str \"stty size 2>/dev/null\") split "]}," Thor Shell Basic dynamic_width":{"type":"method","name":"dynamic_width","children":[],"call":[" dynamic_width_tput "," dynamic_width_stty nonzero? "," dynamic_width_stty "]}," Thor Shell Basic terminal_width":{"type":"method","name":"terminal_width","children":[],"call":["result < "," dynamic_width "," unix? ","ENV  [] to_i ","ENV  [] "," dynamic_width  < ","ENV  [] to_i  < "]}," Thor Shell Basic quiet?":{"type":"method","name":"quiet?","children":[],"call":[" base options [] "," base options "," base "," mute? "]}," Thor Shell Basic show_diff":{"type":"method","name":"show_diff","children":[],"call":[" system ","temp path ","temp rewind ","temp write ","Tempfile  open ","File  dirname ","File  basename ","ENV  [] "," require "]}," Thor Shell Basic file_collision_help":{"type":"method","name":"file_collision_help","children":[],"call":[]}," Thor Shell Basic is?":{"type":"method","name":"is?","children":[],"call":["value [] ","value size == ","value size ","value to_s ","value to_s  [] ","value to_s  size == ","value to_s  size ","value to_s  to_s "]}," Thor Shell Basic set_color":{"type":"method","name":"set_color","children":[],"call":[]}," Thor Shell Basic error":{"type":"method","name":"error","children":[],"call":["$stderr puts "," stderr puts "," stderr "]}," Thor Shell Basic file_collision":{"type":"method","name":"file_collision","children":[],"call":[" say "," file_collision_help "," show_diff "," block_given? "," is? "," raise "," ask "," fail "," loop "," merge "," merge_tool empty? ! "," merge_tool empty? "," merge_tool "]}," Thor Shell Basic print_table":{"type":"method","name":"print_table","children":[],"call":["$stdout puts "," truncate ","options [] ","sentence << ","formats [] % ","column to_s ","formats [] ","row each_with_index ","table each ","formats << ","formats []= ","formats [] insert ","  * ","maxima + ","(send\n  (lvar :table) :max) [] size ","(send\n  (lvar :table) :max) [] ","a [] size <=> ","b [] size ","b [] ","a [] size ","a [] ","table max ","0 upto ","table first length - ","table first length ","table first ","options []= "," terminal_width ","options [] == ","options [] to_i ","table empty? ","start upto ","colwidth + "," stdout puts "," stdout ","f % ","index == ","row size - ","row size ","column is_a? ","maximas [] ","array each ","colcount - ","maximas << ","(send\n  (lvar :array) :map) max ","row [] to_s size ","row [] to_s ","row [] ","array map ","(send\n  (lvar :array) :max) size ","a size <=> ","b size ","a size ","array max ","array empty? "," dup ","(str \"%-\") dup ","%-s dup "," truncate  << "," dup  << ","formats [] ormats [] % ","formats [] ormats [] ","formats [] ormats << ","formats [] ormats []= ","formats [] ormats [] insert ","(send\n  (lvar :table) :max) [] size  + ","maximas []  + ","(send\n  (lvar :array) :map) max  + ","table formats [] irst length - ","table formats [] irst length ","table formats [] irst ","options []  + ","formats []  % ","(send\n  (lvar :table) :max) [] size s [] ","maximas [] s [] ","(send\n  (lvar :array) :map) max s [] ","(send\n  (lvar :array) :max) size  - ","(send\n  (lvar :table) :max) [] size s << ","maximas [] s << ","(send\n  (lvar :array) :map) max s << "]}," Thor Shell Basic no?":{"type":"method","name":"no?","children":[],"call":[" yes? ! "," yes? ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)\n    (hash\n      (pair\n        (sym :add_to_history)\n        (false)))) :=~\n  (send nil :is?\n    (sym :no))) ! ! ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)\n    (hash\n      (pair\n        (sym :add_to_history)\n        (false)))) :=~\n  (send nil :is?\n    (sym :no))) ! "," ask =~ "," is? "," ask "]}," Thor Shell Basic yes?":{"type":"method","name":"yes?","children":[],"call":[" ask =~ "," is? "," ask ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)) :=~\n  (send nil :is?\n    (sym :yes))) ! ! ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)) :=~\n  (send nil :is?\n    (sym :yes))) ! ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)\n    (hash\n      (pair\n        (sym :add_to_history)\n        (false)))) :=~\n  (send nil :is?\n    (sym :yes))) ! ! ","(send\n  (send nil :ask\n    (lvar :statement)\n    (lvar :color)\n    (hash\n      (pair\n        (sym :add_to_history)\n        (false)))) :=~\n  (send nil :is?\n    (sym :yes))) ! "]}," Thor Shell Basic say_status":{"type":"method","name":"say_status","children":[],"call":[" say "," set_color ","status to_s rjust ","status to_s ","log_status is_a? ","   * "," padding + "," padding ","log_status == "," quiet? ","$stdout flush ","$stdout puts "," stdout flush "," stdout "," stdout puts "," stdout print ","buffer << ","buffer end_with? ","message to_s chomp gsub ","message to_s chomp ","message to_s ","  * + ","  * ","status length "," set_color  to_s rjust ","status to_s rjust  to_s rjust "," set_color  to_s ","status to_s rjust  to_s ","log_ set_color  is_a? ","log_status to_s rjust  is_a? ","log_ set_color  == ","log_status to_s rjust  == ","message to_s chomp gsub  to_s chomp gsub ","message to_s chomp gsub  to_s chomp ","message to_s chomp gsub  to_s "," set_color  length ","status to_s rjust  length "]}," Thor Shell Basic say":{"type":"method","name":"say","children":[],"call":["$stdout flush ","$stdout print ","$stdout puts "," set_color ","message to_s ","spaces + ","   * "," padding "," stdout flush "," stdout "," stdout print "," stdout puts ","buffer << ","message to_s end_with? ! ","message to_s end_with? "," prepare_message "," can_display_colors? ","message end_with? ! ","message end_with? "," quiet? "," set_color  to_s ","message to_s  to_s ","   *  + "," prepare_message  << ","   *  << "," set_color  to_s end_with? ! ","message to_s  to_s end_with? ! "," set_color  to_s end_with? ","message to_s  to_s end_with? "," prepare_ set_color  "," prepare_message to_s  "," set_color  end_with? ! ","message to_s  end_with? ! "," set_color  end_with? ","message to_s  end_with? "]}," Thor Shell Basic ask":{"type":"method","name":"ask","children":[],"call":["$stdin gets strip ","$stdin gets "," say "," stdin gets strip "," stdin gets "," stdin "," ask_simply "," ask_filtered ","options [] ","args first ","args pop ","args last is_a? ","args last ","args pop  [] "]}," Thor Shell Basic padding=":{"type":"method","name":"padding=","children":[],"call":["(int 0) max "]}," Thor Shell Basic initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor Options parse_peek":{"type":"method","name":"parse_peek","children":[],"call":[" send ","option type ","@non_assigned_required delete "," raise ","option human_name ","option required? ! ","option required? ","option string? "," no_or_skip? ","option boolean? "," current_is_value? ","option default "," last? "," current_is_switch_formatted? ","option lazy_default "," fail "," parsing_options? "]}," Thor Options parse_boolean":{"type":"method","name":"parse_boolean","children":[],"call":[" no_or_skip? ! "," no_or_skip? ","@switches key? ","(str \"true\") include? "," shift "," current_is_value? ","(str \"false\") include? "," peek "]}," Thor Options normalize_switch":{"type":"method","name":"normalize_switch","children":[],"call":["@shorts [] ","@shorts key? ","(or\n  (send\n    (ivar :@shorts) :[]\n    (lvar :arg))\n  (lvar :arg)) tr "]}," Thor Options no_or_skip?":{"type":"method","name":"no_or_skip?","children":[],"call":["arg =~ "]}," Thor Options switch_option":{"type":"method","name":"switch_option","children":[],"call":["@switches [] "," no_or_skip? "]}," Thor Options switch?":{"type":"method","name":"switch?","children":[],"call":["@shorts key? "," switch_option "," normalize_switch "," switch_option nil? ! "," switch_option nil? "]}," Thor Options current_is_switch?":{"type":"method","name":"current_is_switch?","children":[],"call":[" switch? ","1 split any? ","1 split "," peek "]}," Thor Options parse":{"type":"method","name":"parse","children":[],"call":[" check_requirement! "," shift ","@assigns []= "," parse_peek ","option human_name "," switch_option "," normalize_switch "," unshift ","1 split map ","1 split "," current_is_switch? "," peek ","args dup ","assigns freeze ","Thor CoreExt HashWithIndifferentAccess  new ","@unknown << "," peek =~ "," current_is_switch_formatted? ","Bundler Thor CoreExt HashWithIndifferentAccess  new ","@extra << "," peek !~ "," parsing_options? ","@extra size "," assign_result! ","@Thor CoreExt HashWithIndifferentAccess  new  []= ","@Bundler Thor CoreExt HashWithIndifferentAccess  new  []= "," switch_option  human_name "," switch_ switch_option  ","  normalize_switch _option "," normalize_ normalize_switch  "," current_is_ normalize_switch ? ","Thor CoreExt HashWithIndifferentAccess  new  freeze ","Bundler Thor CoreExt HashWithIndifferentAccess  new  freeze "," current_is_ normalize_switch _formatted? "," parsing_ switch_option s? "," assign_ parse_peek ! "]}," Thor Options initialize":{"type":"method","name":"initialize","children":[],"call":["option switch_name ","@shorts [] ","short to_s ","option aliases each ","option aliases ","@switches []= ","options each ","options values ","@non_assigned_required delete ","hash_options [] ","@assigns []= ","key to_s ","defaults each ","hash_options values ","short to_s sub ","option switch_short to_s sub  ","options values  each ","hash_options values  each ","options values  values ","hash_options values  values ","hash_options values  [] ","hash_hash_options values  [] ","hash_hash_options values  values "]}," Thor Options to_switches":{"type":"method","name":"to_switches","children":[],"call":[]}," Thor Option dasherize":{"type":"method","name":"dasherize","children":[],"call":["(if\n  (send\n    (send\n      (lvar :str) :length) :>\n    (int 1))\n  (str \"--\")\n  (str \"-\")) + ","str gsub ","str length > ","str length ","str tr "]}," Thor Option undasherize":{"type":"method","name":"undasherize","children":[],"call":["str sub "]}," Thor Option dasherized?":{"type":"method","name":"dasherized?","children":[],"call":[" name index == "," name index "," name "]}," Thor Option valid_type?":{"type":"method","name":"valid_type?","children":[],"call":["VALID_TYPES  include? ","type to_sym "]}," Thor Option validate!":{"type":"method","name":"validate!","children":[],"call":[" raise "," required? "," boolean? "," fail "," validate_default_type! "]}," Thor Option method_missing":{"type":"method","name":"method_missing","children":[],"call":[" type == "," type "," valid_type? ","method to_s sub to_sym ","method to_s sub ","method to_s "]}," Thor Option usage":{"type":"method","name":"usage","children":[],"call":[" aliases join "," aliases ","(send\n  (str \" \") :*\n  (lvar :padding)) << ","  * "," aliases empty? "," required? "," switch_name "," banner "," banner to_s empty? ! "," banner to_s empty? "," banner to_s ","sample << "," dasherize ","no- + "," human_name "," name == "," name "," boolean? "," name start_with? ","(str \"[\") dup ","(begin\n  (send nil :switch_name)) dup "," switch_name  << ","(str \"[\") dup  << ","(begin\n  (send nil :switch_name)) dup  << "]}," Thor Option human_name":{"type":"method","name":"human_name","children":[],"call":[" name "," undasherize "," dasherized? "]}," Thor Option switch_name":{"type":"method","name":"switch_name","children":[],"call":[" dasherize "," name "," dasherized? "]}," Thor Option parse":{"type":"method","name":"parse","children":[],"call":[]}," Thor Option initialize":{"type":"method","name":"initialize","children":[],"call":["group to_s capitalize ","group to_s ","(splat\n  (lvar :aliases)) compact ","options [] "," Array ","options [] to_s capitalize ","options [] to_s ","options []= ","options key? ","options fetch "]}," Thor Arguments check_requirement!":{"type":"method","name":"check_requirement!","children":[],"call":[" raise "," class name split last downcase "," class name split last "," class name split "," class name "," class ","(send\n  (ivar :@non_assigned_required) :map) join ","o human_name ","o switch_name ","o respond_to? ","@non_assigned_required map ","@non_assigned_required empty? "," fail "]}," Thor Arguments parse_string":{"type":"method","name":"parse_string","children":[],"call":[" shift "," no_or_skip? "," fail ","switch enum join ","switch enum ","switch enum include? ! ","switch enum include? ","@switches [] ","@switches is_a? "," raise ","@switches []  enum join ","@switches []  enum ","@switches []  enum include? ! ","@switches []  enum include? ","@@switches [] es [] ","@@switches [] es is_a? "]}," Thor Arguments parse_numeric":{"type":"method","name":"parse_numeric","children":[],"call":[" shift to_i "," shift "," shift to_f ","$& index "," raise "," peek inspect "," peek ","$& == "," peek =~ "," peek is_a? "," fail ","switch enum join ","switch enum ","switch enum include? ! ","switch enum include? ","@switches [] ","@switches is_a? ","@switches []  enum join ","@switches []  enum ","@switches []  enum include? ! ","@switches []  enum include? ","@@switches [] es [] ","@@switches [] es is_a? "]}," Thor Arguments parse_array":{"type":"method","name":"parse_array","children":[],"call":["array << "," shift "," current_is_value? "," peek is_a? "," peek "]}," Thor Arguments parse_hash":{"type":"method","name":"parse_hash","children":[],"call":["hash []= "," shift split "," shift "," peek include? "," peek "," current_is_value? "," peek is_a? "," raise ","hash [] ","hash include? "]}," Thor Arguments current_is_value?":{"type":"method","name":"current_is_value?","children":[],"call":[" peek to_s !~ "," peek to_s "," peek "]}," Thor Arguments unshift":{"type":"method","name":"unshift","children":[],"call":["@pile unshift ","arg + ","arg kind_of? ","arg is_a? ","arg +  unshift "]}," Thor Arguments shift":{"type":"method","name":"shift","children":[],"call":["@pile shift "]}," Thor Arguments peek":{"type":"method","name":"peek","children":[],"call":["@pile first "]}," Thor Arguments parse":{"type":"method","name":"parse","children":[],"call":[" check_requirement! ","@assigns []= "," send ","argument human_name ","argument type ","@non_assigned_required delete "," peek ","@switches each ","args dup "]}," Thor Arguments initialize":{"type":"method","name":"initialize","children":[],"call":["@non_assigned_required << ","argument required? ","@assigns []= ","argument default ","argument human_name ","arguments each ","argument default != ","argument default nil? ! ","argument default nil? ","argument default dup "]}," Thor Arguments split":{"type":"method","name":"split","children":[],"call":[]}," Thor Argument default_banner":{"type":"method","name":"default_banner","children":[],"call":[" human_name upcase "," human_name "," type "]}," Thor Argument valid_type?":{"type":"method","name":"valid_type?","children":[],"call":["VALID_TYPES  include? ","type to_sym "," class VALID_TYPES  include? "," class "]}," Thor Argument validate!":{"type":"method","name":"validate!","children":[],"call":[" raise "," default nil? ! "," default nil? "," default "," required? "," fail ","@enum is_a? ! ","@enum is_a? "]}," Thor Argument show_default?":{"type":"method","name":"show_default?","children":[],"call":[" default "," default empty? ! "," default empty? "]}," Thor Argument required?":{"type":"method","name":"required?","children":[],"call":[" required "]}," Thor Argument usage":{"type":"method","name":"usage","children":[],"call":[" banner "," required? "]}," Thor Argument initialize":{"type":"method","name":"initialize","children":[],"call":[" validate! "," default_banner ","(or\n  (lvar :type)\n  (sym :string)) to_sym ","name to_s "," raise ","class_name downcase "," valid_type? ! "," valid_type? ","name nil? "," class name split last "," class name split "," class name "," class ","options [] ","options key? "," fail ","(or\n  (lvar :options [] )\n  (sym :string)) to_sym "," class name split last  downcase "," valid_options [] ? ! "," valid_options [] ? "]}," Thor Invocation _initialize_klass_with_initializer":{"type":"method","name":"_initialize_klass_with_initializer","children":[],"call":["object class ","klass new ","stored_config merge merge! ","stored_config merge "," _shared_configuration ","stored_opts dup ","stored_args dup ","object is_a? ","stored_stored_config merge merge!  merge merge! ","stored_stored_config merge merge!  merge "," _shared_stored_config merge merge! uration "]}," Thor Invocation _validate_task":{"type":"method","name":"_validate_task","children":[],"call":["Thor Task Dynamic  new ","klass all_tasks [] ","task to_s ","klass all_tasks ","task is_a? ! ","task is_a? ","klass default_task ","klass <= "," raise ","object class ","object is_a? ","klass respond_to? ","Thor DynamicTask  new ","object class  all_tasks [] ","object class  all_tasks ","object class  default_task ","object class  <= ","object class  respond_to? "]}," Thor Invocation _prepare_for_invocation":{"type":"method","name":"_prepare_for_invocation","children":[],"call":[" _validate_task "," class prepare_for_invocation "," class "," class all_tasks [] ","name to_s "," class all_tasks ","name is_a? "," _validate_ class all_tasks []  "," class all_ class all_tasks [] s [] "," class all_ class all_tasks [] s "]}," Thor Invocation _shared_configuration":{"type":"method","name":"_shared_configuration","children":[],"call":[]}," Thor Invocation invoke":{"type":"method","name":"invoke","children":[],"call":["klass all_tasks map ","klass all_tasks ","iterator call ","args [] ","Range  new ","klass arguments size ","klass arguments ","task run ","current << ","task name ","current include? "," proc ","@_invocations [] "," _initialize_klass_with_initializer "," _prepare_for_invocation ","args is_a? ","task is_a? ","task nil? ","args unshift ","NilClass  === ","args first ","Array  === ","klass send "," _parse_initialization_options "," raise ","klass <= "," _retrieve_class_and_task "," invoke_all "," warn "," caller join "," caller ","name nil? ","instance parent_options= "," options "," fail "," _retrieve_class_and_command ","args first nil? ","args first is_a? ","@_invocations []  << ","@_invocations []  include? "]}," Thor Invocation initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new ","config [] "]}," Thor Invocation ClassMethods prepare_for_invocation":{"type":"method","name":"prepare_for_invocation","children":[],"call":["Thor Util  namespace_to_thor_class_and_task ","name to_s ","Thor Util  find_class_and_task_by_namespace ","key ! ","Bundler Thor Util  find_class_and_command_by_namespace ","Thor Util  find_class_and_command_by_namespace "]}," Thor Invocation included":{"type":"method","name":"included","children":[],"call":[]}," Thor CoreExt OrderedHash empty?":{"type":"method","name":"empty?","children":[],"call":["@hash empty? "]}," Thor CoreExt OrderedHash merge":{"type":"method","name":"merge","children":[],"call":["hash []= ","other each "," each "," class new "," class "," dup merge! "," dup "," class new  []= "]}," Thor CoreExt OrderedHash each":{"type":"method","name":"each","children":[],"call":["node value ","node key ","node next ","@first value ","@first key "," [] ","@keys each "," to_enum "," block_given? ","node next  value ","node next  key ","node next  next "]}," Thor CoreExt OrderedHash values":{"type":"method","name":"values","children":[],"call":[" map "," [] ","@keys map "]}," Thor CoreExt OrderedHash keys":{"type":"method","name":"keys","children":[],"call":[" map ","@keys dup "]}," Thor CoreExt OrderedHash delete":{"type":"method","name":"delete","children":[],"call":["@hash delete ","node value ","@last == ","@first == ","prev_node next= ","next_node prev= ","node next ","node prev ","@hash [] ","@keys delete_at ","@keys index "," key? ","node node value  ","@hash []  value ","node prev  next= ","prev_@hash []  next= ","node next  prev= ","next_@hash []  prev= ","@hash []  next ","@hash []  prev ","@keys @keys index  "]}," Thor CoreExt OrderedHash []=":{"type":"method","name":"[]=","children":[],"call":["@hash []= ","@last next= ","node prev= ","@first nil? ","Node  new ","node value= ","@hash [] ","(ivar :@first) ! ","@keys << "," key? ","Node  new  prev= ","@hash []  prev= ","Node  new  value= ","@hash []  value= "]}," Thor CoreExt OrderedHash []":{"type":"method","name":"[]","children":[],"call":["@hash [] value ","@hash [] "]}," Thor CoreExt OrderedHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor CoreExt HashWithIndifferentAccess method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] "," [] == ","args first "," [] ! ! "," [] ! ","args empty? ","method =~ ","method to_s ","method to_s  =~ ","method to_s  to_s "]}," Thor CoreExt HashWithIndifferentAccess convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s ","key is_a? "]}," Thor CoreExt HashWithIndifferentAccess merge!":{"type":"method","name":"merge!","children":[],"call":[" []= "," convert_key ","other each "]}," Thor CoreExt HashWithIndifferentAccess merge":{"type":"method","name":"merge","children":[],"call":[" dup merge! "," dup "]}," Thor CoreExt HashWithIndifferentAccess values_at":{"type":"method","name":"values_at","children":[],"call":[" [] "," convert_key ","indices collect ","indices map "]}," Thor CoreExt HashWithIndifferentAccess delete":{"type":"method","name":"delete","children":[],"call":[" convert_key "]}," Thor CoreExt HashWithIndifferentAccess []=":{"type":"method","name":"[]=","children":[],"call":[" convert_key "]}," Thor CoreExt HashWithIndifferentAccess []":{"type":"method","name":"[]","children":[],"call":[" convert_key "]}," Thor CoreExt HashWithIndifferentAccess initialize":{"type":"method","name":"initialize","children":[],"call":[" []= "," convert_key ","hash each "]}," File binread":{"type":"method","name":"binread","children":[],"call":[]}," Thor Base ClassMethods initialize_added":{"type":"method","name":"initialize_added","children":[],"call":[]}," Thor Base ClassMethods create_task":{"type":"method","name":"create_task","children":[],"call":[]}," Thor Base ClassMethods baseclass":{"type":"method","name":"baseclass","children":[],"call":[]}," Thor Base ClassMethods exit_on_failure?":{"type":"method","name":"exit_on_failure?","children":[],"call":["Bundler Thor  deprecation_warning "," name "]}," Thor Base ClassMethods from_superclass":{"type":"method","name":"from_superclass","children":[],"call":["value dup "," superclass send "," superclass "," superclass respond_to? ! "," superclass respond_to? "," == "," baseclass ","value is_a? "," superclass send  dup "," superclass send  is_a? "]}," Thor Base ClassMethods method_added":{"type":"method","name":"method_added","children":[],"call":["Thor Base  register_klass_file "," is_thor_reserved_word? "," create_task ! "," create_task "," public_instance_methods include? ","meth to_sym "," public_instance_methods "," initialize_added ","meth == ","meth to_s ","Bundler Thor Base  register_klass_file "," create_command ! "," create_command "," public_method_defined? "," no_commands? "," public_instance_meth to_s ods include? ","meth to_s  to_sym "," public_instance_meth to_s ods ","meth to_s  == ","meth to_s  to_s "," public_meth to_s od_defined? "]}," Thor Base ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["Thor Base  register_klass_file ","klass instance_variable_set ","Bundler Thor Base  register_klass_file "]}," Thor Base ClassMethods find_and_refresh_task":{"type":"method","name":"find_and_refresh_task","children":[],"call":[" raise ","name inspect "," tasks []= ","task clone ","name to_s "," tasks "," all_tasks [] "," all_tasks "," tasks [] ","  all_tasks [] s []= ","  tasks [] s []= "," all_tasks []  clone "," tasks []  clone ","  all_tasks [] s ","  tasks [] s "," all_ all_tasks [] s [] "," all_ tasks [] s [] "," all_ all_tasks [] s "," all_ tasks [] s ","  all_tasks [] s [] ","  tasks [] s [] "]}," Thor Base ClassMethods build_options":{"type":"method","name":"build_options","children":[],"call":["scope []= ","Thor Option  parse ","options each ","Bundler Thor Option  parse "]}," Thor Base ClassMethods build_option":{"type":"method","name":"build_option","children":[],"call":["scope []= ","Thor Option  new ","options [] ","Bundler Thor Option  new ","options merge "," check_default_type? ","(pair\n  (sym :check_default_type)\n  (send nil :check_default_type)) merge! "," check_default_type "]}," Thor Base ClassMethods is_thor_reserved_word?":{"type":"method","name":"is_thor_reserved_word?","children":[],"call":[" raise ","word inspect ","THOR_RESERVED_WORDS  include? ","word to_s "," fail "]}," Thor Base ClassMethods print_options":{"type":"method","name":"print_options","children":[],"call":["shell say ","shell print_table ","list << ","option default ","option show_default? ","item push ","option description ","option usage ","options each ","(send\n  (lvar :options) :collect) max to_i * ","(send\n  (lvar :options) :collect) max to_i ","(send\n  (lvar :options) :collect) max ","o aliases size ","o aliases ","options collect ","options empty? ","option enum join ","option enum ","option hide ","(send\n  (lvar :options) :map) max to_i * ","(send\n  (lvar :options) :map) max to_i ","(send\n  (lvar :options) :map) max ","options map "]}," Thor Base ClassMethods class_options_help":{"type":"method","name":"class_options_help","children":[],"call":[" print_options ","groups each ","groups delete ","groups [] << ","groups [] ","value group "," class_options each "," class_options "]}," Thor Base ClassMethods start":{"type":"method","name":"start","children":[],"call":[" exit "," exit_on_failure? ","config [] error ","e message ","config [] "," raise "," debugging ","Thor Base  shell new ","Thor Base  shell "," debugging= ","given_args include? ","given_args dup "," dispatch ","given_args delete ","ENV  [] == ","ENV  [] ","Bundler Thor Base  shell new ","Bundler Thor Base  shell "]}," Thor Base ClassMethods namespace":{"type":"method","name":"namespace","children":[],"call":["name to_s ","Thor Util  namespace_from_thor_class ","Bundler Thor Util  namespace_from_thor_class "]}," Thor Base ClassMethods no_tasks":{"type":"method","name":"no_tasks","children":[],"call":[]}," Thor Base ClassMethods remove_task":{"type":"method","name":"remove_task","children":[],"call":[" undef_method ","options [] "," all_tasks delete ","name to_s "," all_tasks "," tasks delete "," tasks ","names each ","names pop ","names last is_a? ","names last ","names pop  [] "]}," Thor Base ClassMethods all_tasks":{"type":"method","name":"all_tasks","children":[],"call":["@all_tasks merge "," tasks "," from_superclass ","Thor CoreExt OrderedHash  new "]}," Thor Base ClassMethods tasks":{"type":"method","name":"tasks","children":[],"call":["Thor CoreExt OrderedHash  new "]}," Thor Base ClassMethods group":{"type":"method","name":"group","children":[],"call":["name to_s "," from_superclass "]}," Thor Base ClassMethods remove_class_option":{"type":"method","name":"remove_class_option","children":[],"call":[" class_options delete "," class_options ","names each "]}," Thor Base ClassMethods remove_argument":{"type":"method","name":"remove_argument","children":[],"call":[" undef_method ","options [] ","a name == ","name to_s ","a name "," arguments delete_if "," arguments ","names each ","names pop ","names last is_a? ","names last ","names pop  [] "]}," Thor Base ClassMethods class_option":{"type":"method","name":"class_option","children":[],"call":[" build_option "," class_options "]}," Thor Base ClassMethods class_options":{"type":"method","name":"class_options","children":[],"call":[" build_options "," from_superclass "]}," Thor Base ClassMethods arguments":{"type":"method","name":"arguments","children":[],"call":[" from_superclass "]}," Thor Base ClassMethods argument":{"type":"method","name":"argument","children":[],"call":[" arguments << ","Thor Argument  new ","options [] "," arguments "," raise ","(str \"You cannot have \") << ","argument human_name inspect ","argument human_name ","name to_s inspect ","name to_s ","argument required? "," arguments each "," remove_argument ","options [] nil? ","options key? ","options [] ! "," attr_accessor "," no_tasks "," is_thor_reserved_word? ","Bundler Thor Argument  new ","options []= "," fail "," no_commands ","argument options [] ! ? "]}," Thor Base ClassMethods attr_accessor":{"type":"method","name":"attr_accessor","children":[],"call":[" no_tasks "," no_commands "]}," Thor Base ClassMethods attr_writer":{"type":"method","name":"attr_writer","children":[],"call":[" no_tasks "," no_commands "]}," Thor Base ClassMethods attr_reader":{"type":"method","name":"attr_reader","children":[],"call":[" no_tasks "," no_commands "]}," Thor Base register_klass_file":{"type":"method","name":"register_klass_file","children":[],"call":["file_subclasses << ","file_subclasses include? ","Thor Base  subclass_files [] ","File  expand_path ","Thor Base  subclass_files ","Thor Base  subclasses << ","Thor Base  subclasses ","Thor Base  subclasses include? "," caller [] match [] "," caller [] match "," caller [] "," caller ","Bundler Thor Base  subclass_files [] ","Bundler Thor Base  subclass_files ","Bundler Thor Base  subclasses << ","Bundler Thor Base  subclasses ","Bundler Thor Base  subclasses include? ","Thor Base  subclass_files []  << ","Bundler Thor Base  subclass_files []  << "," caller [] match [] _subclasses << ","Thor Base  subclass_files []  include? ","Bundler Thor Base  subclass_files []  include? "," caller [] match [] _subclasses include? ","Thor Base  subclass_ caller [] match [] s [] ","Thor Base  subclass_ caller [] match [] s ","Bundler Thor Base  subclass_ caller [] match [] s [] ","Bundler Thor Base  subclass_ caller [] match [] s "]}," Thor Base subclass_files":{"type":"method","name":"subclass_files","children":[],"call":["h []= ","Hash  new "]}," Thor Base subclasses":{"type":"method","name":"subclasses","children":[],"call":[]}," Thor Base included":{"type":"method","name":"included","children":[],"call":["base send ","base extend "]}," Thor Base initialize":{"type":"method","name":"initialize","children":[],"call":[" options freeze "," options "," options= ","Thor CoreExt HashWithIndifferentAccess  new merge! ","Thor CoreExt HashWithIndifferentAccess  new ","Thor Options  parse ","parse_options merge ","config delete ","options is_a? "," class class_options "," class "," send ","Thor Arguments  parse each ","Thor Arguments  parse "," class arguments ","opts check_unknown! "," class check_unknown_options? ","opts parse ","Thor Options  new ","args each ","thor_args remaining "," __send__ ","thor_args parse each ","thor_args parse ","Bundler Thor Arguments  new ","opts remaining "," class strict_args_position? ","config [] merge ","config [] ","Bundler Thor Options  new "," class stop_on_unknown_option? ","local_options is_a? ","config [] disable_class_options "," class disable_required_check? ","args + ","Thor Arguments  new "," Thor Options  parse  freeze "," Thor Options  parse  "," Thor Options  parse = ","parse_Thor Options  parse  merge ","parse_options merge  merge "," class class_options  merge ","Thor Options  parse  is_a? "," class class_Thor Options  parse  ","Thor Options  new  check_unknown! ","Bundler Thor Options  new  check_unknown! "," class check_unknown_Thor Options  parse ? ","Thor Options  new  parse ","Bundler Thor Options  new  parse ","Thor Arguments  parse  each ","thor_args remaining  each ","thor_Thor Arguments  parse  remaining ","thor_thor_args remaining  remaining ","Bundler Thor Arguments  new  remaining ","Thor Arguments  new  remaining ","thor_Thor Arguments  parse  parse each ","thor_thor_args remaining  parse each ","Bundler Thor Arguments  new  parse each ","Thor Arguments  new  parse each ","thor_Thor Arguments  parse  parse ","thor_thor_args remaining  parse ","Bundler Thor Arguments  new  parse ","Thor Arguments  new  parse ","Thor Options  new  remaining ","Bundler Thor Options  new  remaining "," class strict_Thor Arguments  parse _position? "," class strict_thor_args remaining _position? "," class  class stop_on_unknown_option? _option? ","local_Thor Options  parse  is_a? ","config [] disable_class_Thor Options  parse  "," class  class disable_required_check? ? ","Thor Arguments  parse  + ","thor_args remaining  + "]}," Bundler UI RGProxy say":{"type":"method","name":"say","children":[],"call":["@ui debug ","@ui info ","message =~ "]}," Bundler UI RGProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler UI Shell error":{"type":"method","name":"error","children":[],"call":["@shell say "," tell_me "," level "," tell_err ","Bundler  feature_flag error_on_stderr? ","Bundler  feature_flag "," error? "]}," Bundler UI Shell warn":{"type":"method","name":"warn","children":[],"call":["@shell say "," tell_me "," level ","@warning_history << ","@warning_history include? "," tell_err ","Bundler  feature_flag error_on_stderr? ","Bundler  feature_flag "," warn? "]}," Bundler UI Shell confirm":{"type":"method","name":"confirm","children":[],"call":["@shell say ","@quiet ! "," tell_me "," level "," confirm? "]}," Bundler UI Shell info":{"type":"method","name":"info","children":[],"call":["@shell say ","@quiet ! "," tell_me "," level "," info? "]}," Bundler UI Shell debug":{"type":"method","name":"debug","children":[],"call":["@shell say ","ENV  [] ","@quiet ! "," tell_me "," debug? "," debugging? "," level "]}," Bundler UI Shell initialize":{"type":"method","name":"initialize","children":[],"call":["ENV  [] ","Thor Base  shell new ","Thor Base  shell ","Thor Base  shell= ","STDOUT  tty? ! ","STDOUT  tty? ","options [] ","$stdout tty? ! ","$stdout tty? "]}," Bundler UI confirm":{"type":"method","name":"confirm","children":[],"call":[]}," Bundler UI info":{"type":"method","name":"info","children":[],"call":[]}," Bundler UI error":{"type":"method","name":"error","children":[],"call":[]}," Bundler UI warn":{"type":"method","name":"warn","children":[],"call":[]}," Bundler Specification full_gem_path":{"type":"method","name":"full_gem_path","children":[],"call":[" loaded_from dirname expand_path "," loaded_from dirname "," loaded_from ","Pathname  new dirname expand_path ","Pathname  new dirname ","Pathname  new ","Pathname  new dirname expand_path to_s "]}," Bundler Specification loaded_from":{"type":"method","name":"loaded_from","children":[],"call":[" source path join "," relative_loaded_from "," source path "," source "," source path join to_s "]}," Bundler Specification from_gemspec":{"type":"method","name":"from_gemspec","children":[],"call":[]}," Bundler Source Git in_cache":{"type":"method","name":"in_cache","children":[],"call":["Dir  chdir "," cache_path "," cache "," cached? "]}," Bundler Source Git revision":{"type":"method","name":"revision","children":[],"call":[" git strip "," git "," ref "," in_cache ","(str \"git rev-parse \") strip "," raise "," uri "," allow_git_ops? "," git_proxy revision "," git_proxy "]}," Bundler Source Git cache":{"type":"method","name":"cache","children":[],"call":[" git "," cache_path "," uri ","FileUtils  mkdir_p "," cache_path dirname ","Bundler  ui info ","Bundler  ui "," in_cache "," cache_path exist? "," cached? "," has_revision_cached? ","Bundler  mkdir_p "," uri_escaped "," serialize_gemspecs_in "," git_proxy copy_to "," git_proxy "," git_proxy checkout "," requires_checkout? ","FileUtils  rm_rf "," cached! "," path == "," path ","Bundler  settings [] ","Bundler  settings "," app_cache_path ","Bundler  feature_flag cache_all? ","Bundler  feature_flag ","FileUtils  touch "," app_cache_path join "," path expand_path to_s index == "," path expand_path to_s index ","Bundler  root to_s ","Bundler  root "," path expand_path to_s "," path expand_path ","file print ","spec to_ruby ","File  open ","File  basename ","spec loaded_from ","  app_cache_path  ","  app_cache_path  join "]}," Bundler Source Git cache_path":{"type":"method","name":"cache_path","children":[],"call":["Bundler  cache join "," uri_hash "," base_name ","Bundler  cache ","Bundler  user_bundle_path join ","Bundler  user_bundle_path ","Bundler  requires_sudo? ","(or\n  (send\n    (const nil :Bundler) :requires_sudo?)\n  (send\n    (send\n      (const nil :Bundler) :feature_flag) :global_gem_cache?)) join "," git_scope ","Bundler  bundle_path join ","Bundler  bundle_path ","Bundler  user_cache ","Bundler  feature_flag global_gem_cache? ","Bundler  feature_flag ","(send\n  (send\n    (const nil :Bundler) :feature_flag) :global_gem_cache?) join "]}," Bundler Source Git uri_hash":{"type":"method","name":"uri_hash","children":[],"call":["Digest SHA1  hexdigest ","URI  parse normalize to_s sub ","URI  parse normalize to_s ","URI  parse normalize ","URI  parse "," uri "," uri =~ ","SharedHelpers  digest hexdigest ","SharedHelpers  digest ","Bundler URI  parse normalize to_s sub ","Bundler URI  parse normalize to_s ","Bundler URI  parse normalize ","Bundler URI  parse ","Bundler Digest  sha1 ","(str \"^\\\\w+://(\\\\w+@)?\") match? "]}," Bundler Source Git base_name":{"type":"method","name":"base_name","children":[],"call":["File  basename "," uri "," uri sub "]}," Bundler Source Git git":{"type":"method","name":"git","children":[],"call":[" raise ","$? != "," caller join "," caller "," allow_git_ops? ","Bundler  requires_sudo? ","$? exitstatus != ","$? exitstatus ","Git error:  + + ","Git error:  + ","Dir  pwd ","msg << "," cache_path "," cached? ","Git error:  + +  << "]}," Bundler Source Git install":{"type":"method","name":"install","children":[],"call":[" git "," revision "," path "," cache_path ","File  exist? ","Dir  chdir ","FileUtils  mkdir_p ","Bundler  ui debug "," ref ","Bundler  ui "," uri ","Bundler  ui info "," checkout "," generate_bin "," allow_git_ops? "," to_s ","spec version ","spec name "," version_message ","Installer  post_install_messages []= ","spec post_install_message ","Installer  post_install_messages "," requires_checkout? "," serialize_gemspecs_in "," install_path "," git_proxy copy_to "," submodules "," git_proxy ","force ! ","@copied ! ","Bundler  rubygems spec_missing_extensions? ! ","Bundler  rubygems spec_missing_extensions? ","Bundler  rubygems ","options [] "," print_using_message ","@installed ! ","Bundler  settings [] ","Bundler  settings ","options []  ! "]}," Bundler Source Git specs":{"type":"method","name":"specs","children":[],"call":["index freeze ","index << "," default_spec ","index empty? ","spec source= ","spec relative_loaded_from= ","Specification  from_gemspec "," eval ","line =~ ","lines each ","l =~ ","out split select ","out split ","(str \"git ls-tree -r \") strip "," revision "," in_cache "," cache ","Index  new "," load_spec_files "," checkout "," local_specs ","@update ! "," allow_git_ops? "," serialize_gemspecs_in "," install_path "," git_proxy copy_to "," submodules "," git_proxy "," git_proxy checkout ","@copied ! "," requires_checkout? "," set_local! "," app_cache_path "," local? ! "," local? "," has_app_cache? "," fetch ","Index  new  freeze ","Index  new  << "," default_Specification  from_gemspec  "," default_ eval  ","Index  new  empty? ","Specification  from_gemspec  source= "," eval  source= ","Specification  from_gemspec  relative_loaded_from= "," eval  relative_loaded_from= ","Specification  from_gemSpecification  from_gemspec  ","Specification  from_gem eval  ","(str \"git ls-tree -r \") strip  split select ","(str \"git ls-tree -r \") strip  split "," load_Specification  from_gemspec _files "," load_ eval _files "," check(str \"git ls-tree -r \") strip  "," local_Specification  from_gemspec s "," local_ eval s "," serialize_gemSpecification  from_gemspec s_in "," serialize_gem eval s_in "," git_proxy check(str \"git ls-tree -r \") strip  "," requires_check(str \"git ls-tree -r \") strip ? "]}," Bundler Source Git path":{"type":"method","name":"path","children":[],"call":["Bundler  install_path join "," ref "," uri_hash "," base_name ","Bundler  install_path ","Bundler  user_bundle_path join join ","Bundler  user_bundle_path join ","Bundler  ruby_scope ","Bundler  user_bundle_path ","Bundler  requires_sudo? "," shortref_for_path "," revision "," shortref_for "]}," Bundler Source Git options":{"type":"method","name":"options","children":[],"call":["@options merge "," revision "]}," Bundler Source Git to_s":{"type":"method","name":"to_s","children":[],"call":["@options [] [] ","@options [] "," shortref_for_display "," shortref_for "," uri "," ref "," options [] "," options "," path "," local? "," revision "," ref =~ "," git_proxy branch "," git_proxy ","specifiers join ","specifiers any? ","(lvar :rev) compact "," glob_for_display "," current_branch ","(str \"\\\\A[a-z0-9]{4,}\\\\z\") match? "," uri_with_specifiers "," humanized_ref "," short@options [] [] _for_display "," short shortref_for_display _for_display "," short shortref_for _for_display "," short@options [] [] _for "," short shortref_for_display _for "," short shortref_for _for "," @options [] []  ","  shortref_for_display  ","  shortref_for  "," p path h "," @options [] []  =~ ","  shortref_for_display  =~ ","  shortref_for  =~ ","(lvar :rev) compact  join ","(lvar :rev) compact  any? ","(str \"\\\\A[a-z0-9]{4,}\\\\z\") m path ch? "," uri_with_(lvar :rev) compact  "," humanized_@options [] []  "," humanized_ shortref_for_display  "," humanized_ shortref_for  "]}," Bundler Source Git initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options []= ","options [] to_s ","(str \"ref\") each ","options [] to_s strip gsub ","options [] to_s strip ","URICredentialsFilter  credential_filtered_uri ","URINormalizer  normalize_suffix "]}," Bundler Source Path install":{"type":"method","name":"install","children":[],"call":["Bundler  ui debug "," path ","Bundler  ui ","Bundler  ui info "," generate_bin ","Installer  new generate_bin ","Installer  new "," to_s ","spec version ","spec name "," version_message "," print_using_message ","spec executables empty? ","spec executables ","options [] "]}," Bundler Source Path local_specs":{"type":"method","name":"local_specs","children":[],"call":["index freeze ","index << "," default_spec ","index empty? ","spec source= ","spec loaded_from= ","Specification  from_gemspec "," eval ","File  read ","Dir  chdir "," path ","Pathname  new ","Dir  [] each ","Dir  [] ","File  directory? ","Index  new "," load_spec_files ","file relative_path_from ","Index  new  freeze ","Index  new  << "," default_Specification  from_gemspec  "," default_ eval  ","Index  new  empty? ","Specification  from_gemspec  source= "," eval  source= ","Specification  from_gemspec  loaded_from= "," eval  loaded_from= ","Specification  from_gemSpecification  from_gemspec  ","Specification  from_gem eval  "," load_Specification  from_gemspec _files "," load_ eval _files "," load_spec_Pathname  new s ","Pathname  new  relative_path_from ","file file relative_path_from _from "]}," Bundler Source Path default_spec":{"type":"method","name":"default_spec","children":[],"call":["s relative_loaded_from= ","s version= ","Gem Version  new ","s source= ","s name= ","Specification  new ","args empty? "]}," Bundler Source Path to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source Path initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","s relative_loaded_from= ","s summary= ","s version= ","Gem Version  new ","s source= ","s name= ","Specification  new ","Pathname  new expand_path ","Bundler  root ","Pathname  new ","s virtual= ","@path expand_path ","@path relative? "," expand ","options dup ","expanded_path relative_path_from "," root_path expand_path "," root_path "," root ","options []  expand_path ","Pathname  new expand_path  expand_path ","@path expand_path  expand_path ","Pathname  new  expand_path "," expand  expand_path ","expanded_path relative_path_from  expand_path ","options []  relative? ","Pathname  new expand_path  relative? ","@path expand_path  relative? ","Pathname  new  relative? "," expand  relative? ","expanded_path relative_path_from  relative? "," expand  relative_path_from "]}," Bundler Source GemCache install":{"type":"method","name":"install","children":[],"call":["installer install ","Gem Installer  new ","Gem  dir ","spec full_name ","Bundler  ui debug ","Bundler  ui ","Bundler  ui info ","spec loaded_from= ","Gem Installer  new  install "]}," Bundler Source GemCache specs":{"type":"method","name":"specs","children":[],"call":["index freeze ","index << ","spec source= ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path ","Dir  [] each ","Dir  [] ","Index  new ","s source= ","specs each ","Index  from_cached_specs ","Gem Platform  match ","spec platform ","Index  new  freeze ","Index  new  << ","Gem Format  from_file_by_path spec  source= ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec  ","Gem Format  from_file_by_path spec s each ","Index  from_cached_specs  each ","Index  from_cached_Gem Format  from_file_by_path spec s ","Index  from_cached_Index  from_cached_specs  ","Gem Format  from_file_by_path spec  platform "]}," Bundler Source GemCache to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source GemCache initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Bundler Source SystemGems install":{"type":"method","name":"install","children":[],"call":["Bundler  ui debug ","Bundler  ui ","Bundler  ui info "]}," Bundler Source SystemGems to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source SystemGems specs":{"type":"method","name":"specs","children":[],"call":["index << ","spec source= ","Gem SourceIndex  from_installed_gems each ","Gem SourceIndex  from_installed_gems ","Index  new ","Gem SourceIndex  from_installed_gems to_a reverse each ","Gem SourceIndex  from_installed_gems to_a reverse ","Gem SourceIndex  from_installed_gems to_a ","system_index to_a reverse each ","system_index to_a reverse ","system_index to_a ","Gem SourceIndex  from_gems_in ","d == ","Bundler  specs_path to_s ","Bundler  specs_path ","system_paths reject! ","Gem SourceIndex  installed_spec_directories ","Gem SourceIndex  from_installed_gems reverse_each ","Index  new  << ","system_Index  new  to_a reverse each ","Gem SourceIndex  from_gems_in  to_a reverse each ","system_Index  new  to_a reverse ","Gem SourceIndex  from_gems_in  to_a reverse ","system_Index  new  to_a ","Gem SourceIndex  from_gems_in  to_a ","Gem SourceIndex  installed_spec_directories  reject! "]}," Bundler Source Rubygems prerelease_specs":{"type":"method","name":"prerelease_specs","children":[],"call":["Bundler  logger warn "," uri ","Bundler  logger ","Marshal  load ","Gem RemoteFetcher  fetcher fetch_path ","Gem RemoteFetcher  fetcher ","Bundler  ui warn ","Bundler  ui "]}," Bundler Source Rubygems main_specs":{"type":"method","name":"main_specs","children":[],"call":[" raise ","e message "," to_s ","Marshal  load ","Gem RemoteFetcher  fetcher fetch_path "," uri ","Gem RemoteFetcher  fetcher "]}," Bundler Source Rubygems fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":["index freeze ","index << ","spec source= ","RemoteSpecification  new ","Gem Platform  match ","(send\n  (send nil :main_specs) :+\n  (send nil :prerelease_specs)) each "," main_specs + "," prerelease_specs "," main_specs ","Bundler  ui info "," uri ","Bundler  ui ","Index  new ","Gem  sources= ","v each "," fetch_all_specs ","Gem  sources ","idx use "," remote_specs "," cached_specs "," installed_specs ","Index  build "," remote_specs dup ","Index  new  freeze ","Index  new  << ","RemoteSpecification  new  source= ","(send\n  (send nil :main_RemoteSpecification  new s) :+\n  (send nil :prerelease_RemoteSpecification  new s)) each "," main_RemoteSpecification  new s + "," prerelease_RemoteSpecification  new s "," main_RemoteSpecification  new s "," fetch_all_RemoteSpecification  new s ","Index  new  use "," remote_specs dup  use "," remote_RemoteSpecification  new s "," cached_RemoteSpecification  new s "," installed_RemoteSpecification  new s "," remote_RemoteSpecification  new s dup "]}," Bundler Source Rubygems install":{"type":"method","name":"install","children":[],"call":["installer install ","Gem Installer  new ","Gem  dir ","Bundler  ui debug ","Bundler  ui ","Gem RemoteFetcher  fetcher download "," uri ","Gem RemoteFetcher  fetcher ","Bundler  ui info ","Index  from_installed_gems [] any? ","Index  from_installed_gems [] ","Index  from_installed_gems ","spec version ","spec name "," gem_path ","spec loaded_from= ","spec full_name "," sudo ","Gem  bindir ","Bundler  tmp ","spec executables each ","spec executables ","Bundler  requires_sudo? ","options merge! ","spec executables empty? ","spec executables nil? "," installed_specs [] any? "," installed_specs [] "," installed_specs "," cached_gem ","@installed [] ","Bundler  sudo ","Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  rubygems gem_bindir ","Bundler  rubygems preserve_paths ","Bundler GemInstaller  new ","Bundler  system_bindir ","Bundler  mkdir_p ","Installer  post_install_messages []= ","spec post_install_message ","Installer  post_install_messages ","Bundler GemInstaller  new install ","bin_path to_s ","install_path to_s ","install_path join ","Bundler  rubygems bindir ","Bundler  rm_rf "," version_message "," loaded_from ","installed_spec loaded_from= ","Dir  [] any? ","Dir  [] ","File  dirname ","File  join ","ext_src gsub! ","src [] ","Dir  glob first ","Dir  glob ","Dir  glob any? ","name == ","Bundler  rubygems repository_subdirectories each ","Bundler  rubygems repository_subdirectories ","Bundler  settings [] ","Bundler  settings ","spec __swap__ ","Bundler  rubygems spec_from_gem "," fetch_gem ","Installer  ambiguous_gems << ","Installer  ambiguous_gems ","uris length > ","uris length ","uris uniq! ","remote anonymized_uri "," remotes_for_spec map "," remotes_for_spec ","spec remote anonymized_uri ","spec remote ","force ! "," cached_built_in_gem "," cached_path ! "," cached_path "," builtin_gem? ","opts [] ","FileUtils  remove_entry_secure ","Bundler  ui confirm ","message << ","spec extensions any? ","spec extensions ","spec name eql? "," installed? ","SharedHelpers  filesystem_access ","Bundler RubyGemsGemInstaller  new install ","Bundler RubyGemsGemInstaller  new "," requires_sudo? "," rubygems_dir ","spec full_gem_path= ","installed_spec full_gem_path ","Bundler RubyGemsGemInstaller  at install ","Bundler RubyGemsGemInstaller  at ","spec checksum ","spec respond_to? "," extension_cache_path "," print_using_message ","Bundler  rubygems provides? "," gem_dir_exists? ","Fetcher  download_gem_from_uri ","spec source_uri ","spec loaded_from ","uris compact! "," source_uris_for_spec ","spec source_uri without_credentials "," raise ","Plugin  installed? "," require_relative ","spec file_name ","spec default_gem? ","options [] ","installed_spec loaded_from ","e message ","File  basename ","installer spec ","Bundler  rubygems security_policies [] ","Bundler  rubygems security_policies ","(send\n  (lvar :spec) :remote) map uniq ","(send\n  (lvar :spec) :remote) map "," fetch_gem_if_possible ","Gem Installer  new  install ","Bundler GemInstaller  new  install ","Bundler RubyGemsGemInstaller  at  install ","inBundler  rubygems spec_from_gem taller inBundler  rubygems spec_from_gem tall ","Gem InBundler  rubygems spec_from_gem taller  new ","Index  from_inBundler  rubygems spec_from_gem talled_gemBundler  rubygems spec_from_gem  [] any? ","Index  from_inBundler  rubygems spec_from_gem talled_gemBundler  rubygems spec_from_gem  [] ","Index  from_inBundler  rubygems spec_from_gem talled_gemBundler  rubygems spec_from_gem  ","Bundler  rubygems spec_from_gem pec verBundler  rubygems spec_from_gem ion ","Bundler  rubygems spec_from_gem pec name "," Gem RemoteFetcher  fetcher download  "," gem_ cached_gem  "," gem_Fetcher  download_gem_from_uri  "," gem_ fetch_gem  "," gem_ fetch_gem_if_possible  ","Bundler  rubygems spec_from_gem pec loaded_from= ","Bundler  rubygems spec_from_gem pec full_name "," Bundler  rubygems spec_from_gem udo ","Bundler  rubygems spec_from_gem pec executableBundler  rubygems spec_from_gem  each ","Bundler  rubygems spec_from_gem pec executableBundler  rubygems spec_from_gem  ","Bundler  requireBundler  rubygems spec_from_gem _Bundler  rubygems spec_from_gem udo? ","optionBundler  rubygems spec_from_gem  merge! ","Bundler  rubygems spec_from_gem pec executableBundler  rubygems spec_from_gem  empty? ","Bundler  rubygems spec_from_gem pec executableBundler  rubygems spec_from_gem  nil? "," Bundler GemInstaller  new install s [] any? "," Bundler RubyGemsGemInstaller  new install s [] any? "," Bundler RubyGemsGemInstaller  at install s [] any? "," installer install s [] any? "," inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pecBundler  rubygems spec_from_gem  [] any? "," Bundler GemInstaller  new install s [] "," Bundler RubyGemsGemInstaller  new install s [] "," Bundler RubyGemsGemInstaller  at install s [] "," installer install s [] "," inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pecBundler  rubygems spec_from_gem  [] "," Bundler GemInstaller  new install s "," Bundler RubyGemsGemInstaller  new install s "," Bundler RubyGemsGemInstaller  at install s "," installer install s "," inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pecBundler  rubygems spec_from_gem  ","@inBundler  rubygems spec_from_gem talled [] ","Bundler  Bundler  rubygems spec_from_gem udo ","Bundler  rubygemBundler  rubygems spec_from_gem  gem_dir ","Bundler  rubygemBundler  rubygems spec_from_gem  ","Bundler  rubygemBundler  rubygems spec_from_gem  gem_bindir ","Bundler  rubygems preserve_ cached_gem s ","Bundler  rubygems preserve_Fetcher  download_gem_from_uri s ","Bundler  rubygems preserve_ fetch_gem s ","Bundler  rubygems preserve_ fetch_gem_if_possible s ","Bundler  rubygemBundler  rubygems spec_from_gem  preBundler  rubygems spec_from_gem erve_pathBundler  rubygems spec_from_gem  ","Bundler GemInBundler  rubygems spec_from_gem taller  new ","Bundler  Bundler  rubygems spec_from_gem yBundler  rubygems spec_from_gem tem_bindir ","InBundler  rubygems spec_from_gem taller  poBundler  rubygems spec_from_gem t_inBundler  rubygems spec_from_gem tall_meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem ageBundler  rubygems spec_from_gem  []= ","Bundler  rubygems spec_from_gem pec poBundler  rubygems spec_from_gem t_inBundler  rubygems spec_from_gem tall_meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age ","InBundler  rubygems spec_from_gem taller  poBundler  rubygems spec_from_gem t_inBundler  rubygems spec_from_gem tall_meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem ageBundler  rubygems spec_from_gem  ","Bundler GemInBundler  rubygems spec_from_gem taller  new inBundler  rubygems spec_from_gem tall ","bin_ cached_gem  to_s ","bin_Fetcher  download_gem_from_uri  to_s ","bin_ fetch_gem  to_s ","bin_ fetch_gem_if_possible  to_s ","Bundler  system_bindir  to_s ","install_path join  to_s ","bin_path to_Bundler  rubygems spec_from_gem  ","Gem  dir  to_s ","Bundler  tmp  to_s ","Bundler  rubygems gem_dir  to_s "," rubygems_dir  to_s ","install_ cached_gem  to_s ","install_Fetcher  download_gem_from_uri  to_s ","install_ fetch_gem  to_s ","install_ fetch_gem_if_possible  to_s ","inBundler  rubygems spec_from_gem tall_path to_Bundler  rubygems spec_from_gem  ","Gem  dir  join ","Bundler  tmp  join ","Bundler  rubygems gem_dir  join "," rubygems_dir  join ","install_ cached_gem  join ","install_Fetcher  download_gem_from_uri  join ","install_ fetch_gem  join ","install_ fetch_gem_if_possible  join ","inBundler  rubygems spec_from_gem tall_path join ","Bundler  rubygemBundler  rubygems spec_from_gem  bindir "," verBundler  rubygems spec_from_gem ion_meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age ","Bundler GemInstaller  new install  loaded_from= ","Bundler RubyGemsGemInstaller  new install  loaded_from= ","Bundler RubyGemsGemInstaller  at install  loaded_from= ","installer install  loaded_from= ","inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pec loaded_from= ","Dir  glob first  gsub! ","ext_File  join  gsub! ","ext_Bundler  rubygems spec_from_gem rc gBundler  rubygems spec_from_gem ub! ","File  join  [] ","Bundler  rubygems spec_from_gem rc [] ","Dir  glob firBundler  rubygems spec_from_gem t ","Bundler  rubygemBundler  rubygems spec_from_gem  repoBundler  rubygems spec_from_gem itory_Bundler  rubygems spec_from_gem ubdirectorieBundler  rubygems spec_from_gem  each ","Bundler  rubygemBundler  rubygems spec_from_gem  repoBundler  rubygems spec_from_gem itory_Bundler  rubygems spec_from_gem ubdirectorieBundler  rubygems spec_from_gem  ","Bundler  Bundler  rubygems spec_from_gem ettingBundler  rubygems spec_from_gem  [] ","Bundler  Bundler  rubygems spec_from_gem ettingBundler  rubygems spec_from_gem  ","Bundler  rubygems spec_from_gem pec __Bundler  rubygems spec_from_gem wap__ ","Bundler  rubygemBundler  rubygems spec_from_gem  Bundler  rubygems spec_from_gem pec_from_gem ","InBundler  rubygems spec_from_gem taller  ambiguouBundler  rubygems spec_from_gem _gemBundler  rubygems spec_from_gem  << ","InBundler  rubygems spec_from_gem taller  ambiguouBundler  rubygems spec_from_gem _gemBundler  rubygems spec_from_gem  ","uriBundler  rubygems spec_from_gem  length > ","(send\n  (lvar :spec) :remote) map uniq  length > ","uriBundler  rubygems spec_from_gem  length ","(send\n  (lvar :spec) :remote) map uniq  length ","uriBundler  rubygems spec_from_gem  uniq! ","(send\n  (lvar :spec) :remote) map uniq  uniq! "," remoteBundler  rubygems spec_from_gem _for_Bundler  rubygems spec_from_gem pec map "," remoteBundler  rubygems spec_from_gem _for_Bundler  rubygems spec_from_gem pec ","Bundler  rubygems spec_from_gem pec remote anonymized_uri ","Bundler  rubygems spec_from_gem pec remote ","opts []  ! ","options []  ! "," cached_ cached_gem  ! "," cached_Fetcher  download_gem_from_uri  ! "," cached_ fetch_gem  ! "," cached_ fetch_gem_if_possible  ! "," cached_ cached_gem  "," cached_Fetcher  download_gem_from_uri  "," cached_ fetch_gem  "," cached_ fetch_gem_if_possible  ","optBundler  rubygems spec_from_gem  [] ","FileUtilBundler  rubygems spec_from_gem   remove_entry_Bundler  rubygems spec_from_gem ecure ","meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age << ","Bundler  rubygems spec_from_gem pec extenBundler  rubygems spec_from_gem ionBundler  rubygems spec_from_gem  any? ","Bundler  rubygems spec_from_gem pec extenBundler  rubygems spec_from_gem ionBundler  rubygems spec_from_gem  ","Bundler  rubygems spec_from_gem pec name eql? "," inBundler  rubygems spec_from_gem talled? ","SharedHelperBundler  rubygems spec_from_gem   fileBundler  rubygems spec_from_gem yBundler  rubygems spec_from_gem tem_acceBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem  ","Bundler RubyGemBundler  rubygems spec_from_gem GemInBundler  rubygems spec_from_gem taller  new inBundler  rubygems spec_from_gem tall ","Bundler RubyGemBundler  rubygems spec_from_gem GemInBundler  rubygems spec_from_gem taller  new "," requireBundler  rubygems spec_from_gem _Bundler  rubygems spec_from_gem udo? "," rubygemBundler  rubygems spec_from_gem _dir ","spec full_Gem RemoteFetcher  fetcher download = ","spec full_gem_ cached_gem = ","spec full_gem_Fetcher  download_gem_from_uri = ","spec full_gem_ fetch_gem = ","spec full_gem_ fetch_gem_if_possible = ","Bundler  rubygems spec_from_gem pec full_gem_path= ","installed_spec full_Gem RemoteFetcher  fetcher download  ","installed_spec full_gem_ cached_gem  ","installed_spec full_gem_Fetcher  download_gem_from_uri  ","installed_spec full_gem_ fetch_gem  ","installed_spec full_gem_ fetch_gem_if_possible  ","Bundler GemInstaller  new install  full_gem_path ","Bundler RubyGemsGemInstaller  new install  full_gem_path ","Bundler RubyGemsGemInstaller  at install  full_gem_path ","installer install  full_gem_path ","inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pec full_gem_path ","Bundler RubyGemBundler  rubygems spec_from_gem GemInBundler  rubygems spec_from_gem taller  at inBundler  rubygems spec_from_gem tall ","Bundler RubyGemBundler  rubygems spec_from_gem GemInBundler  rubygems spec_from_gem taller  at ","Bundler  rubygems spec_from_gem pec checkBundler  rubygems spec_from_gem um ","Bundler  rubygems spec_from_gem pec reBundler  rubygems spec_from_gem pond_to? "," extension_cache_ cached_gem  "," extension_cache_Fetcher  download_gem_from_uri  "," extension_cache_ fetch_gem  "," extension_cache_ fetch_gem_if_possible  "," extenBundler  rubygems spec_from_gem ion_cache_path "," print_uBundler  rubygems spec_from_gem ing_meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age ","Bundler  rubygemBundler  rubygems spec_from_gem  provideBundler  rubygems spec_from_gem ? "," gem_dir_exiBundler  rubygems spec_from_gem tBundler  rubygems spec_from_gem ? ","Bundler  rubygems spec_from_gem pec Bundler  rubygems spec_from_gem ource_uri ","Bundler  rubygems spec_from_gem pec loaded_from ","uriBundler  rubygems spec_from_gem  compact! ","(send\n  (lvar :spec) :remote) map uniq  compact! "," Bundler  rubygems spec_from_gem ource_uriBundler  rubygems spec_from_gem _for_Bundler  rubygems spec_from_gem pec "," source_(send\n  (lvar :spec) :remote) map uniq _for_spec ","Bundler  rubygems spec_from_gem pec Bundler  rubygems spec_from_gem ource_uri without_credentialBundler  rubygems spec_from_gem  "," raiBundler  rubygems spec_from_gem e ","Plugin  inBundler  rubygems spec_from_gem talled? ","Bundler  rubygems spec_from_gem pec file_name ","Bundler  rubygems spec_from_gem pec default_gem? ","optionBundler  rubygems spec_from_gem  [] ","Bundler GemInstaller  new install  loaded_from ","Bundler RubyGemsGemInstaller  new install  loaded_from ","Bundler RubyGemsGemInstaller  at install  loaded_from ","installer install  loaded_from ","inBundler  rubygems spec_from_gem talled_Bundler  rubygems spec_from_gem pec loaded_from ","e meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age ","File  baBundler  rubygems spec_from_gem ename ","Gem Installer  new  spec ","Bundler GemInstaller  new  spec ","Bundler RubyGemsGemInstaller  at  spec ","inBundler  rubygems spec_from_gem taller Bundler  rubygems spec_from_gem pec ","Bundler  rubygemBundler  rubygems spec_from_gem  Bundler  rubygems spec_from_gem ecurity_policieBundler  rubygems spec_from_gem  [] ","Bundler  rubygemBundler  rubygems spec_from_gem  Bundler  rubygems spec_from_gem ecurity_policieBundler  rubygems spec_from_gem  ","(Bundler  rubygems spec_from_gem end\n  (lvar :Bundler  rubygems spec_from_gem pec) :remote) map uniq ","(Bundler  rubygems spec_from_gem end\n  (lvar :Bundler  rubygems spec_from_gem pec) :remote) map "," fetch_gem_if_poBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem ible "]}," Bundler Source Rubygems specs":{"type":"method","name":"specs","children":[],"call":[" fetch_specs "," installed_specs ","idx use "," cached_specs ","Index  new "," remote_specs dup "," remote_specs ","Index  new  use "," remote_specs dup  use "]}," Bundler Source Rubygems to_s":{"type":"method","name":"to_s","children":[],"call":[" uri ","(send\n  (send\n    (self) :remotes) :map) join ","r to_s "," remotes map "," remotes "," remotes map join "," remotes empty? "," remote_names ","(send\n  (send\n    (self) :(send\n  (send\n    (self) :remotes) :map) join ) :map) join "," (send\n  (send\n    (self) :remotes) :map) join  map "," (send\n  (send\n    (self) :remotes) :map) join  "," (send\n  (send\n    (self) :remotes) :map) join  map join "," (send\n  (send\n    (self) :remotes) :map) join  empty? ","  remotes map join  "]}," Bundler Source Rubygems initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@uri absolute? ","URI  parse ","@uri is_a? ","options [] "," uri ","@uri =~ ","options [] to_s ","(send\n  (const nil :Bundler) :app_cache) + ","File  expand_path ","Gem  path map ","Gem  path ","Bundler  app_cache "," normalize_uri ","(or\n  (send\n    (lvar :options) :[]\n    (str \"remotes\"))\n  (array)) map ","Bundler  rubygems gem_path map ","Bundler  rubygems gem_path ","Bundler  rubygems ","@caches << "," add_remote "," Array reverse_each "," Array ","Bundler  rubygems gem_cache "," cache_path ","URI  parse  absolute? ","options []  absolute? ","options [] to_s  absolute? ","URI  parse  is_a? ","options []  is_a? ","options [] to_s  is_a? ","URI  parse  =~ ","options []  =~ ","options [] to_s  =~ ","(send\n  (const nil :Bundler) :app_cache) +  << "]}," Bundler Settings config_file":{"type":"method","name":"config_file","children":[],"call":["Pathname  new "]}," Bundler Settings []=":{"type":"method","name":"[]=","children":[],"call":["f puts ","@config to_yaml ","File  open "," config_file ","FileUtils  mkdir_p "," config_file dirname ","@config []= ","key to_s upcase ","key to_s "," set_key "," local_config_file ","@config [] == ","@config [] "," key_for "," raise ","Bundler SharedHelpers  major_deprecation "," Array join "," Array ","value nil? "," cli_flags_given "," key_for  to_s upcase "," key_for  to_s "," set_ key_for  ","  key_for _for "]}," Bundler Settings []":{"type":"method","name":"[]","children":[],"call":["ENV  [] ","@config [] ","key to_s upcase ","key to_s ","@global_config [] ","@local_config [] "," key_for ","value to_i "," is_num ","value nil? ! ","value nil? "," to_bool "," is_bool ","DEFAULT_CONFIG  [] ","value == ","DEFAULT_CONFIG  fetch ","@global_config fetch ","ENV  fetch ","@local_config fetch ","@temporary fetch "," converted_value ","(send\n  (send\n    (send nil :configs) :values) :map) compact first ","(send\n  (send\n    (send nil :configs) :values) :map) compact ","config [] "," configs values map "," configs values "," configs "," key_for  to_s upcase "," key_for  to_s ","  key_for _for ","(send\n  (send\n    (send nil :configs) :values) :map) compact first  to_i ","(send\n  (send\n    (send nil :configs) :values) :map) compact first  nil? ! ","(send\n  (send\n    (send nil :configs) :values) :map) compact first  nil? ","(send\n  (send\n    (send nil :configs) :values) :map) compact first  == "," converted_(send\n  (send\n    (send nil :configs) :values) :map) compact first  ","(send\n  (send\n    (send nil :configs) :(send\n  (send\n    (send nil :configs) :values) :map) compact first s) :map) compact first ","(send\n  (send\n    (send nil :configs) :(send\n  (send\n    (send nil :configs) :values) :map) compact first s) :map) compact "," configs (send\n  (send\n    (send nil :configs) :values) :map) compact first s map "," configs (send\n  (send\n    (send nil :configs) :values) :map) compact first s "]}," Bundler Settings initialize":{"type":"method","name":"initialize","children":[],"call":["YAML  load_file "," config_file ","File  exist? "," global_config_file "," local_config_file "," load_config ","key =~ ","ENV  to_h select ","ENV  to_h "]}," Gem Specification groups":{"type":"method","name":"groups","children":[],"call":[]}," Gem Specification load_paths":{"type":"method","name":"load_paths","children":[],"call":["File  join "," full_gem_path "," require_paths map "," require_paths ","require_path include? "," full_require_paths "," respond_to? "]}," Bundler Installer cache_source":{"type":"method","name":"cache_source","children":[],"call":["Source GemCache  new "," root "]}," Bundler Installer local_index":{"type":"method","name":"local_index","children":[],"call":["Index  from_installed_gems merge ","Index  from_installed_gems "," cache_source specs merge freeze "," cache_source specs merge "," cache_source specs "," cache_source ","File  directory? "," root ","source local_specs merge ","source local_specs ","source respond_to? "," sources each "," sources ","Index  new ","Index  from_installed_gems freeze ","Index  from_cached_specs merge ","Index  from_cached_specs ","Bundler  bundle_path "]}," Bundler Installer index":{"type":"method","name":"index","children":[],"call":["i merge freeze ","i merge ","Bundler  ui debug ","Bundler  ui ","source specs ","rg_sources each ","Index  from_installed_gems merge ","Index  from_installed_gems ","other_sources each ","s is_a? ! ","s is_a? "," sources select "," sources "," cache_source specs merge freeze "," cache_source specs merge "," cache_source specs "," cache_source ","File  directory? "," root ","Index  new ","Bundler  ui info "," sources each "," local_index ","Index  from_cached_specs merge ","Index  from_cached_specs ","Bundler  bundle_path ","source specs  merge freeze ","source specs  merge ","Bundler  usource specs  debug ","Bundler  usource specs  ","Index  from_source specs nstalled_gems merge ","Index  from_source specs nstalled_gems ","s source specs s_a? ! ","s source specs s_a? ","Fsource specs le  dsource specs rectory? ","Bundler  usource specs  source specs nfo "," local_i merge freeze  "," local_Index  from_installed_gems merge  "," local_ cache_source specs merge freeze  "," local_Index  new  "," local_ local_index  "," local_i merge  "," local_ cache_source specs merge  "," local_Index  from_cached_specs merge  "," local_source specs ndex "]}," Bundler Installer ambiguous?":{"type":"method","name":"ambiguous?","children":[],"call":["op != ","dep version_requirements requirements any? ","dep version_requirements requirements ","dep version_requirements ","dep requirement requirements any? ","dep requirement requirements ","dep requirement "]}," Bundler Installer group_spec":{"type":"method","name":"group_spec","children":[],"call":[" group_spec ","s name == ","d name ","s name ","specs find ","(send\n  (send\n    (lvar :spec) :dependencies) :select) each ","d type != ","d type ","spec dependencies select ","spec dependencies ","spec groups uniq! ","spec groups ","spec groups << "]}," Bundler Installer group_specs":{"type":"method","name":"group_specs","children":[],"call":[" group_spec ","d group ","s name == ","d name ","s name ","specs find "," dependencies each "," dependencies "]}," Bundler Installer resolve_remotely":{"type":"method","name":"resolve_remotely","children":[],"call":["Resolver  resolve "," index "," dependencies ","source_requirements []= ","dep source specs ","dep source ","dep name "," dependencies each ","Bundler  ui info ","Bundler  ui "," actual_dependencies "," actual_dependencies each "," remote_index "," resolve ","dep source Resolver  resolve  "]}," Bundler Installer resolve_locally":{"type":"method","name":"resolve_locally","children":[],"call":[" raise ","ENV  [] ","specs length == "," dependencies length "," dependencies ","specs length ","Resolver  resolve "," local_index ","source_requirements []= ","dep source local_specs ","dep source ","dep name ","dep source respond_to? "," dependencies each "," ambiguous? "," dependencies any? ","source local_specs merge ","source local_specs ","source respond_to? "," sources each "," sources "," unambiguous? "," dependencies all? "," actual_dependencies length "," actual_dependencies "," actual_dependencies each "," actual_dependencies any? "," index ","Resolver  resolve  length == ","Resolver  resolve  length "," local_source local_specs merge  "," local_ local_index  ","dep source local_Resolver  resolve  ","source local_Resolver  resolve  merge ","source local_Resolver  resolve  "," source local_specs merge  ","  local_index  "]}," Bundler Installer sources":{"type":"method","name":"sources","children":[],"call":["@definition sources "]}," Bundler Installer specs":{"type":"method","name":"specs","children":[],"call":[" group_specs "," resolve_remotely "," resolve_locally "]}," Bundler Installer dependencies":{"type":"method","name":"dependencies","children":[],"call":["@definition actual_dependencies ","@definition dependencies "]}," Bundler Installer run":{"type":"method","name":"run","children":[],"call":["Bundler  ui confirm ","Bundler  ui ","Bundler  ui info ","spec source install ","spec source ","Bundler  ui debug ","(send\n  (send\n    (lvar :spec) :groups) :&\n  (send\n    (lvar :options) :[]\n    (sym :without))) any? ","spec groups & ","options [] ","spec groups ","spec version ","spec name ","(send\n  (send nil :specs) :sort_by) each ","s name "," specs sort_by "," specs ","Bundler  ui warn "," dependencies empty? "," dependencies ","spec source respond_to? "," specs each ","spec groups & == ","Bundler  settings without ","Bundler  settings ","spec source fetch ","FileUtils  mkdir_p ","Bundler  bundle_path "," actual_dependencies empty? "," actual_dependencies "," write_rb_lock "," locked? "," requested_specs include? "," requested_specs ","(const\n  (const nil :Source) :Rubygems) include? ","spec source class ","spec == "," specs last "," lock ","FileUtils  rm_rf ","Bundler  tmp "," generate_bundler_executable_stubs ","Bundler  settings [] ","Gem Command  build_args= ","Gem Command  build_args ","Bundler  mkdir_p ","File  exist? ","@definition resolve_remotely! ","@definition resolve_with_cache! ","tmpdef missing_specs any? ","tmpdef missing_specs ","tmpdef new_platform? ","Definition  build ","Bundler  default_lockfile ","Bundler  default_gemfile ","options [] ! ","Bundler  default_lockfile exist? ","@definition ensure_equivalent_gemfile_and_lockfile ","missing_specs any? ","Definition  build missing_specs ","Bundler  root join ","Bundler  root ","Bundler  root join exist? ","spec loaded_from ","Bundler  rubygems with_build_args ","Bundler  rubygems "," raise ","(str \"Could not install to path `\") + ","Bundler  bundle_path mkpath ","Bundler  bundle_path exist? "," install_gem_from_spec "," generate_standalone ","Installer  post_install_messages= ","Bundler Fetcher  fetch ","spec source is_a? "," install_sequentially "," install_in_parallel "," require "," can_install_in_parallel? ","jobs > ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max ","Bundler  settings [] to_i - ","Bundler  settings [] to_i ","Bundler  ui silence "," create_bundle_path ","Standalone  new generate ","Standalone  new "," install "," resolve_if_need "," ensure_specs_are_compatible! ","@definition dependencies empty? ","@definition dependencies ","Bundler  frozen? ","options []= ","options delete "," load_plugins "," warn_on_incompatible_bundler_deps "," resolve_if_needed ","ProcessLock  lock ","Bundler  frozen_bundle? ","Bundler  ui= ","Bundler UI  new "," can_install_parallely? ","size > ","(lvar :size) max ","(send\n  (send\n    (lvar :options) :[]\n    (sym :jobs)) :to_i) max ","options [] to_i ","(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :jobs)) :to_i) max ","Bundler Retry  new attempts ","Bundler Retry  new ","Gem Specification  reset ","Bundler  create_bundle_path ","Definition  build  missing_specs any? ","tmpdef Definition  build missing_specs  any? ","Definition  build  missing_specs ","tmpdef Definition  build missing_specs  ","Definition  build  new_platform? ","Definition  build missing_specs  any? ","Definition  build Definition  build missing_specs  ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max  > ","(send\n  (send\n    (lvar :options) :[]\n    (sym :jobs)) :to_i) max  > ","(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :jobs)) :to_i) max  > ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max )) :to_i) :-\n  (int 1)) max ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :(send\n  (send\n    (lvar :options) :[]\n    (sym :jobs)) :to_i) max )) :to_i) :-\n  (int 1)) max ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :jobs)) :to_i) max )) :to_i) :-\n  (int 1)) max ","(lvar :size) max  > ","(lvar :(lvar :size) max ) max ","(send\n  (send\n    (lvar :options) :[]\n    (sym :(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max )) :to_i) max ","(send\n  (send\n    (lvar :options) :[]\n    (sym :(send\n  (send\n    (lvar :options) :[]\n    (sym :jobs)) :to_i) max )) :to_i) max ","(send\n  (send\n    (lvar :options) :[]\n    (sym :(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :jobs)) :to_i) max )) :to_i) max ","(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max )) :to_i) max ","(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :(send\n  (send\n    (lvar :options) :[]\n    (sym :jobs)) :to_i) max )) :to_i) max ","(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :(send\n  (send\n    (send\n      (const nil :Bundler) :settings) :[]\n    (sym :jobs)) :to_i) max )) :to_i) max "]}," Bundler Installer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Installer install":{"type":"method","name":"install","children":[],"call":[" install_in_parallel ","options [] ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max ","Bundler  settings [] to_i - ","Bundler  settings [] to_i ","Bundler  settings [] ","Bundler  settings "," can_install_in_parallel? ","Bundler  rubygems load_plugins ","Bundler  rubygems ","options delete "," installation_parallelization ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym :jobs)) :to_i) :-\n  (int 1)) max )) :to_i) :-\n  (int 1)) max ","(send\n  (send\n    (send\n      (send\n        (const nil :Bundler) :settings) :[]\n      (sym : installation_parallelization )) :to_i) :-\n  (int 1)) max "]}," Bundler Index search_by_dependency":{"type":"method","name":"search_by_dependency","children":[],"call":["s platform to_s ","s platform ","s platform to_s == ","s version ","found sort_by ","spec version prerelease? ","spec version ","found reject! ","dependency =~ ","specs select ","specs all? ","dependency version_requirements prerelease? ","dependency version_requirements ","@specs [] ","dependency name ","@cache [] ","dependency hash ","dependency requirement prerelease? ","dependency requirement ","Gem Platform  match ","spec platform ","dependency matches_spec? "," specs_by_name + "," specs_by_name ","@cache [] [] ","dependency hash ^ ","base hash ","spec source is_a? ","spec source ","base_spec version prerelease? ","base_spec version ","base any? ","Gem Platform  match_spec? ","Gem Platform  respond_to? ","@specs []  select "," specs_by_name +  select "," specs_by_name  select ","@specs []  all? "," specs_by_name +  all? "," specs_by_name  all? ","@@specs []  [] ","@ specs_by_name +  [] ","@ specs_by_name  [] "," @specs [] _by_name + ","  specs_by_name + _by_name + ","  specs_by_name _by_name + "," @specs [] _by_name ","  specs_by_name + _by_name ","  specs_by_name _by_name "]}," Bundler Index search_by_spec":{"type":"method","name":"search_by_spec","children":[],"call":["s version == ","spec version ","s version ","@specs [] select ","@specs [] ","spec name ","s platform == ","spec platform ","s platform ","Gem Platform  new == ","Gem Platform  new "," same_version? "," specs_by_name select "," specs_by_name ","@specs [] [] ","spec full_name ","@specs [] []  version ","@@specs [] [] s [] select ","@@specs [] [] s [] ","@specs [] []  name ","@specs [] []  platform "," @specs [] [] s_by_name select "," @specs [] [] s_by_name ","@@specs [] [] s [] [] ","@specs [] []  full_name "]}," Bundler Index freeze":{"type":"method","name":"freeze","children":[],"call":["v freeze ","@specs each "]}," Bundler Index merge":{"type":"method","name":"merge","children":[],"call":[" dup merge! "," dup "]}," Bundler Index merge!":{"type":"method","name":"merge!","children":[],"call":[" << ","other each "]}," Bundler Index each":{"type":"method","name":"each","children":[],"call":["specs each ","@specs values each ","@specs values ","@specs values flatten each ","@specs values flatten "," specs values each "," specs values "," specs ","spec_sets values each ","spec_sets values ","s each "," sources each "," sources "," enum_for "]}," Bundler Index <<":{"type":"method","name":"<<","children":[],"call":["arr << ","s platform == ","spec platform ","s platform ","s version == ","spec version ","s version ","arr delete_if ","@specs [] ","spec name "," same_version? "," specs_by_name ","@specs [] []= ","spec full_name ","@specs []  << "," specs_by_name  << ","@specs []  delete_if "," specs_by_name  delete_if "]}," Bundler Index search":{"type":"method","name":"search","children":[],"call":[" search_by_dependency ","@specs [] "," search_by_spec ","seen << ","spec platform ","spec version ","spec name ","results << ","seen include? ","source search each ","source search ","@sources each ","Set  new ","results map "," local_search "," raise ","query inspect "," specs_by_name ","s platform to_s ","s platform ","s platform to_s == ","s version ","results sort_by "," sort_specs ","seen add? ","spec full_name ","results map to_set ","platform_string == "," unsorted_search ","results uniq ","results concat ","@sources any? ","Set  new  << ","results map to_set  << "," local_search  << ","Set  new  include? ","results map to_set  include? "," local_search  map "," local_search  sort_by ","Set  new  add? ","results map to_set  add? "," local_search  map to_set ","s platform to_s  == "," local_search  uniq "," local_search  concat "]}," Bundler Index empty?":{"type":"method","name":"empty?","children":[],"call":[" each ","@specs values flatten empty? ","@specs values flatten ","@specs values "]}," Bundler Index initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" merge! ","h []= ","Hash  new ","@specs []= ","array dup ","o specs each ","o specs ","@sources dup ","@all_specs []= ","o all_specs each ","o all_specs ","hash dup ","o sources dup ","o sources ","@sources dup  dup ","o sources dup  dup "]}," Bundler Index initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," Bundler Index from_installed_gems":{"type":"method","name":"from_installed_gems","children":[],"call":[]}," Bundler Environment details":{"type":"method","name":"details","children":[],"call":["details []= ","d version_requirements to_s ","d version_requirements ","d name "," dependencies map "," dependencies ","s name ","options []= "," sources index ","s source "," sources "," sources include? ","s version to_s ","s version "," specs map "," specs ","s options ","s class name split last ","s class name split ","s class name ","s class "," sources map "]}," Bundler Environment write_yml_lock":{"type":"method","name":"write_yml_lock","children":[],"call":["f puts ","File  open "," root "," details to_yaml "," details "]}," Bundler Environment write_rb_lock":{"type":"method","name":"write_rb_lock","children":[],"call":["f puts ","erb result "," binding ","File  open "," root ","ERB  new ","File  read ","File  expand_path "," rb_lock_file ","FileUtils  mkdir_p "," rb_lock_file dirname ","Bundler  env_file ","Bundler  env_file dirname mkpath ","Bundler  env_file dirname ","ERB  new  result "]}," Bundler Environment cripple_rubygems":{"type":"method","name":"cripple_rubygems","children":[{"type":"method","name":"gem","children":[],"asgn":[],"call":[]}],"call":[" private_method_defined? "," Kernel  class_eval ","$LOAD_PATH uniq! ","$LOAD_PATH unshift ","p include? ","Gem  path any? ","Gem  path ","p != ","File  dirname ","$LOAD_PATH reject! ","File  expand_path "," private_File  expand_path thod_defined? ","File  dirnaFile  expand_path  "]}," Bundler Environment load_paths":{"type":"method","name":"load_paths","children":[],"call":["(send\n  (send nil :specs) :map) flatten ","s load_paths "," specs map "," specs "]}," Bundler Environment pack":{"type":"method","name":"pack","children":[],"call":["FileUtils  cp ","File  expand_path == ","File  expand_path ","File  dirname ","Bundler  ui info ","File  basename ","Bundler  ui ","File  exist? ","possibilities find ","spec full_name ","Gem  path map ","Gem  path ","spec source is_a? ","spec source "," specs each "," specs ","FileUtils  mkdir_p "," root ","spec source is_a? ! "]}," Bundler Environment index":{"type":"method","name":"index","children":[],"call":["@definition local_index ","idx use ","Index  cached_gems "," runtime_gems ","Index  build ","@definition index "]}," Bundler Environment specs":{"type":"method","name":"specs","children":[],"call":["Resolver  resolve "," index ","@definition actual_dependencies ","source_requirements []= ","dep source local_specs ","dep source ","dep name ","dep source respond_to? "," dependencies each "," dependencies "," resolve_remotely "," resolve_locally ","@definition specs "]}," Bundler Environment specs_for":{"type":"method","name":"specs_for","children":[],"call":["Resolver  resolve "," index ","groups include? ","d group ","@definition actual_dependencies select ","@definition actual_dependencies "," specs ","groups empty? "," specs for ","(send\n  (send\n    (lvar :d) :groups) :&\n  (lvar :groups)) any? ","d groups & ","d groups "," dependencies select "," dependencies "]}," Bundler Environment locked?":{"type":"method","name":"locked?","children":[],"call":["File  exist? "," root "]}," Bundler Environment unlock":{"type":"method","name":"unlock","children":[],"call":["Bundler  ui info ","Bundler  ui ","FileUtils  rm_f "," root "," locked? "]}," Bundler Environment lock":{"type":"method","name":"lock","children":[],"call":["Bundler  ui info ","Bundler  ui "," write_rb_lock "," write_yml_lock ","FileUtils  mkdir_p "," root "," locked? ","@definition lock ","Bundler  default_lockfile ","f puts ","@definition to_lock ","File  open "," root join ","env_file rmtree ","env_file exist? ","opts [] "," root join  rmtree "," root join  exist? "]}," Bundler Environment dependencies":{"type":"method","name":"dependencies","children":[],"call":["@definition actual_dependencies ","@definition dependencies "]}," Bundler Environment setup":{"type":"method","name":"setup","children":[],"call":["$LOAD_PATH unshift ","spec load_paths ","Gem  loaded_specs []= ","spec name ","Gem  loaded_specs "," specs_for each "," specs_for "," cripple_rubygems "]}," Bundler Dsl _normalize_options":{"type":"method","name":"_normalize_options","children":[],"call":["opts []= ","source default_spec "," _version? "," send ","opts dup ","opts [] ","(str \"git\") each ","opts delete "," _normalize_hash "," _normalize_git_options ","k to_s ","opts each ","opts merge "," raise ","invalid_keys join ","invalid_keys size > ","invalid_keys size ","invalid_keys any? ","opts keys - ","opts keys ","message << ","(send\n  (lvar :invalid_keys) :map) join ",": + ","invalid_keys map ","@platforms dup ","version first =~ ","version first ","VALID_PLATFORMS  inspect ","VALID_PLATFORMS  include? ","platforms each ","p to_sym ","platforms map! ","platforms concat "," Array ","groups empty? ","groups concat ","@groups dup ","platforms dup ","github include? ","valid_keys join "," send  default_spec "," _normalize_git_opts dup  "," _normalize_git_opts merge  ","opts keys -  join ","opts keys -  size > ","opts keys -  size ","opts keys -  any? ","(send\n  (lvar :opts keys - ) :map) join ","opts keys -  map ","@@platforms dup  dup ","@platforms dup  each ","@platforms dup  map! ","@platforms dup  concat ","@groups dup  empty? ","@groups dup  concat ","@@groups dup  dup ","@platforms dup  dup ","opts delete  include? "]}," Bundler Dsl _normalize_hash":{"type":"method","name":"_normalize_hash","children":[],"call":["opts []= ","k to_s ","opts delete ","String  === ","opts each ","opts [] ","opts keys each ","opts keys "]}," Bundler Dsl group":{"type":"method","name":"group","children":[],"call":["name to_sym ","@groups pop ","args each ","@groups concat ","@optional_groups concat ","args - ","opts [] "," normalize_group_options ","args pop dup ","args pop ","Hash  === ","args last ","options [] ","args last is_a? ","@args -  concat ","args pop dup  [] "," normalize_group_args pop dup  "]}," Bundler Dsl to_definition":{"type":"method","name":"to_definition","children":[],"call":["Definition  new ","@sources uniq! ","@sources << ","@sources include? "," rubygems_source "," check_primary_source_safety "]}," Bundler Dsl path":{"type":"method","name":"path","children":[],"call":[" source ","Source Path  new "," _normalize_hash merge "," _normalize_hash ","options merge ","Pathname  new "," with_source ","@sources add_path_source "," normalize_hash merge "," normalize_hash "," gemfile_root ","g name == ","options [] ","g name "," gemspecs find "," gemspecs ","SharedHelpers  major_deprecation ","msg strip "," raise ","Bundler  feature_flag disable_multisource? ","Bundler  feature_flag "," block_given? ","source_options []= "," @sources add_path_source  "," with_@sources add_path_source  ","@@sources add_path_source s add_path_@sources add_path_source  ","Bundler  feature_flag disable_multi@sources add_path_source ? ","@sources add_path_source _options []= "," normalize_hash merge  []= "]}," Bundler Definition Locked dependencies":{"type":"method","name":"dependencies","children":[],"call":["Bundler Dependency  new ","args to_a flatten ","args to_a ","@details [] map ","@details [] ","Gem Dependency  new ","opts delete "]}," Bundler Definition Locked actual_dependencies":{"type":"method","name":"actual_dependencies","children":[],"call":["Bundler Dependency  new ","details delete ","details []= "," sources [] ","details [] "," sources ","details include? ","args to_a flatten ","args to_a ","@details [] map ","@details [] ","Gem Dependency  new "]}," Bundler Definition Locked sources":{"type":"method","name":"sources","children":[],"call":["Bundler Source  const_get new ","Bundler Source  const_get ","args to_a flatten ","args to_a ","@details [] map ","@details [] "]}," Bundler Definition Locked initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Definition local_index":{"type":"method","name":"local_index","children":[],"call":["Index  from_installed_gems merge ","Index  from_installed_gems ","source local_specs merge ","source local_specs ","source respond_to? "," sources each "," sources ","Index  new ","Index  from_cached_specs merge ","Index  from_cached_specs ","Bundler  bundle_path "]}," Bundler Definition initialize":{"type":"method","name":"initialize","children":[],"call":[" converge_dependencies "," converge_sources ","@unlock []= ","s name ","@locked_specs for map ","@locked_specs for "," expand_dependencies ","@unlock [] ","@platforms include? ! ","@platforms include? ","(send\n  (send\n    (const nil :Gem) :platforms) :map) compact last ","(send\n  (send\n    (const nil :Gem) :platforms) :map) compact "," generic ","Gem  platforms map ","Gem  platforms ","SpecSet  new ","locked sources ","locked specs ","locked dependencies ","unlock != ","locked platforms ","LockfileParser  new ","Bundler  read_file ","File  exists? "," converge ","p to_generic ","File  read "," ensure_equivalent_gemfile_and_lockfile ","Bundler  production? ","Bundler  deployment ","(send\n  (send\n    (send\n      (const nil :Bundler) :rubygems) :platforms) :map) compact last ","(send\n  (send\n    (send\n      (const nil :Bundler) :rubygems) :platforms) :map) compact ","Bundler  rubygems platforms map ","Bundler  rubygems platforms ","Bundler  rubygems "," fixup_dependency_types! ","source specs != ","source specs ","locked ! ","locked_spec source != ","locked_spec source ","@locked_specs any? ","locked specs any? ","ls path == ","source path ","ls path ","ls class == ","source class ","ls class ","@locked_sources find ","source instance_of? ","@sources any? ","unlock empty? ! ","unlock empty? ","unlock == "," converge_locals "," converge_paths ","locked bundler_version ","File  exist? ","locked ruby_version ","String  new "," compute_requires "," add_platform "," create_gem_version_promoter ","@locked_ruby_version ! ^ ","@ruby_version ! ","@locked_ruby_version ! ","@ruby_version diff "," raise ","RubyVersion  from_string ","@locked_gems sources ","@locked_gems specs ","@locked_gems dependencies ","@locked_gems ruby_version ","@locked_gems bundler_version ","@locked_gems platforms "," add_current_platform ","Bundler  settings [] ","Bundler  settings "," locked_ruby_version_object ","@locked_platforms dup "," converge_gemspec_sources "," converge_path_sources_to_gemspec_sources ","Bundler  frozen? "," Array empty? "," Array ","unlock delete_if ","unlock delete ","unlock dup ","(true) include? ","Bundler  frozen_bundle? "," add_platforms "," current_ruby_platform_locked? ","@locked_gem_sources each ","@sources allow_multisource! ","Bundler SharedHelpers  major_deprecation ","s remotes size > ","s remotes size ","s remotes ","@locked_gem_sources none? ","Bundler  frozen_bundle? ! ","s is_a? ","@locked_sources select ","@sources merged_gem_lockfile_sections! ","@locked_gem_sources all? ","sources aggregate_global_source? ","@locked_gem_sources any? ","@dependencies map ","locked_gem_sources first ","locked_gem_sources first multiple_remotes? ","locked_gem_sources size == ","locked_gem_sources size "," Array empty? ! ","unlock any? ","@locked_specs for ! "," requested_dependencies & "," locked_dependencies "," requested_dependencies "," platforms ","@locked_specs for map uniq ","Dependency  new ","(or\n  (send\n    (ivar :@unlock) :[]\n    (sym :gems))\n  (array)) map "," check_missing_lockfile_specs "," check_missing_lockfile_dep ","@unlock dup  []= ","SpecSet  new  for map ","@LockfileParser  new _specs for map ","SpecSet  new  for ","@LockfileParser  new _specs for ","@unlock dup  [] ","locked platforms  include? ! ","@locked_gems platforms  include? ! ","@locked_platforms dup  include? ! ","locked platforms  include? ","@locked_gems platforms  include? ","@locked_platforms dup  include? ","LockfileParser  new  sources ","LockfileParser  new  specs ","LockfileParser  new  dependencies ","unlock dup  != ","LockfileParser  new  platforms ","LockfileParser  new  ! ","LockfileParser  new _spec source != ","LockfileParser  new _spec source ","SpecSet  new  any? ","@LockfileParser  new _specs any? ","LockfileParser  new  specs any? ","locked sources  find ","@locked_gems sources  find ","@LockfileParser  new _sources find ","unlock dup  empty? ! ","unlock dup  empty? ","unlock dup  == ","LockfileParser  new  bundler_version ","LockfileParser  new  ruby_version ","@LockfileParser  new _ruby_version ! ^ ","locked ruby_version  ! ^ ","@locked_gems ruby_version  ! ^ ","@LockfileParser  new _ruby_version ! ","locked ruby_version  ! ","@locked_gems ruby_version  ! ","@LockfileParser  new _gems sources ","@LockfileParser  new _gems specs ","@LockfileParser  new _gems dependencies ","@LockfileParser  new _gems ruby_version ","@LockfileParser  new _gems bundler_version ","@LockfileParser  new _gems platforms "," add_(send\n  (send\n    (const nil :Gem) :platforms) :map) compact last  "," add_(send\n  (send\n    (send\n      (const nil :Bundler) :rubygems) :platforms) :map) compact last  "," LockfileParser  new _ruby_version_object "," RubyVersion  from_string  ","@LockfileParser  new _platforms dup ","@locked_gems platforms  dup ","unlock dup  delete_if ","unlock dup  delete ","unlock dup  dup "," current_ruby_platform_LockfileParser  new ? ","@LockfileParser  new _gem_sources each ","@LockfileParser  new _gem_sources none? ","locked sources  select ","@locked_gems sources  select ","@LockfileParser  new _sources select ","@LockfileParser  new _gem_sources all? ","@LockfileParser  new _gem_sources any? ","LockfileParser  new _gem_sources first ","LockfileParser  new _gem_sources first multiple_remotes? ","LockfileParser  new _gem_sources size == ","LockfileParser  new _gem_sources size ","unlock dup  any? ","SpecSet  new  for ! ","@LockfileParser  new _specs for ! "," LockfileParser  new _dependencies ","SpecSet  new  for map uniq ","@LockfileParser  new _specs for map uniq ","(or\n  (send\n    (ivar :@unlock dup ) :[]\n    (sym :gems))\n  (array)) map "]}," Bundler Definition from_lock":{"type":"method","name":"from_lock","children":[],"call":[]}," Bundler Definition from_gemfile":{"type":"method","name":"from_gemfile","children":[],"call":[]}," Bundler CLI pack":{"type":"method","name":"pack","children":[],"call":["environment pack ","Bundler  load ","Bundler  load  pack "]}," Bundler CLI show":{"type":"method","name":"show","children":[],"call":["Bundler  ui info ","s version ","s name ","Bundler  ui ","(send\n  (send\n    (lvar :environment) :specs) :sort_by) each ","environment specs sort_by ","environment specs ","Bundler  load "," locate_gem ","s git_version ","(send\n  (send\n    (send\n      (const nil :Bundler) :runtime) :specs) :sort_by) each ","Bundler  runtime specs sort_by ","Bundler  runtime specs ","Bundler  runtime ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) each ","Bundler  load specs sort_by ","Bundler  load specs ","Bundler  load lock "," options [] "," options ","Show  new run ","Show  new "," require ","Bundler SharedHelpers  major_deprecation ","ARGV  [] == ","ARGV  [] ","(lvar :new_command) join ","new_arguments compact ","ARGV  join ","new_command == ","arg != ","rest map ","arg start_with? ! ","arg start_with? ","rest find ","Bundler  definition validate_ruby! ","Bundler  definition ","s full_gem_path ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) map ","Bundler  ui warn ","File  directory? ! ","File  directory? ","spec full_gem_path "," select_spec ","File  expand_path ","gem_name == ","Bundler  ui silence "," require_relative ","(str \"--verbose\") include? ","SharedHelpers  major_deprecation ","ARGV  include? ","(send\n  (send\n    (lvar :Bundler  load ) :specs) :sort_by) each ","(send\n  (send\n    (lvar :environment) : select_spec s) :sort_by) each ","Bundler  load  specs sort_by ","environment  select_spec s sort_by ","Bundler  load  specs ","environment  select_spec s ","(send\n  (send\n    (send\n      (const nil :Bundler) :runtime) : select_spec s) :sort_by) each ","Bundler  runtime  select_spec s sort_by ","Bundler  runtime  select_spec s ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) : select_spec s) :sort_by) each ","Bundler  load  select_spec s sort_by ","Bundler  load  select_spec s ","ARGV  []  map ","ARGV  []  find ","s full_gem_spec full_gem_path  ","s full_gem_File  expand_path  ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) : select_spec s) :sort_by) map ","spec full_gem_spec full_gem_path  ","spec full_gem_File  expand_path  "," select_spec  full_gem_path "," select_ select_spec  ","File  expand_spec full_gem_path  ","File  expand_File  expand_path  "]}," Bundler CLI unlock":{"type":"method","name":"unlock","children":[],"call":["environment unlock ","Bundler  load ","Bundler  ui info ","Bundler  ui "," remove_lockfiles "," locked? ","Bundler  ui warn ","Bundler  load  unlock "]}," Bundler CLI lock":{"type":"method","name":"lock","children":[],"call":["environment lock ","Bundler  load ","Bundler  root ","Bundler  ui info ","Bundler  ui ","File  exist? "," exit ","Bundler  ui error ","e message "," remove_lockfiles "," locked? ","Bundler  ui warn ","Bundler  runtime lock ","Bundler  runtime ","Bundler  ui confirm ","Your bundle is now locked.  + ","Lock  new run ","Lock  new "," options "," require "," require_relative ","Bundler  load  lock "]}," Bundler CLI install":{"type":"method","name":"install","children":[],"call":["Installer  install ","Bundler  definition ","Bundler  root ","Bundler  settings []= ","Bundler  settings ","g to_sym ","opts [] map! ","opts [] "," options dup "," options "," exit "," puts ","e message "," lock "," options [] ","Bundler  load "," remove_lockfiles ","Bundler  settings without= ","ENV  []= "," raise ","Bundler  ui warn ","Bundler  ui ","Bundler  definition sources empty? ","Bundler  definition sources "," cache ","Bundler  root join exist? ","Bundler  root join ","Bundler  ui confirm ","Your bundle is complete!  + ","You changed your Gemfile after locking.  + "," options [] ! ","Bundler  definition no_sources? ","Bundler  settings [] ","Bundler  load cache ","Bundler  ui be_quiet! ","opts []= ","Bundler  default_lockfile exist? ","Bundler  default_lockfile ","Bundler  ui error ","File  expand_path ","Bundler  production= ","Bundler  deployment= ","The path argument to `bundle install` is deprecated.  + + ","The path argument to `bundle install` is deprecated.  + ","./ + ","relative_path [] == ","relative_path [] ","opts [] empty? ","Bundler  ui shell= ","Thor Shell Basic  new ","opts [] flatten! ","g split ","opts [] size == ","opts [] size ","Bundler  settings delete ","opts [] == ","Bundler  app_cache exist? ","Bundler  app_cache ","File  expand_path sub ","opts [] map ","absolute_path sub "," clean ","Installer  post_install_messages to_a each ","Installer  post_install_messages to_a ","Installer  post_install_messages ","Gem  load_env_plugins ","Gem  respond_to? ","Bundler Fetcher  disable_endpoint= ","Gem  load_plugins ","Install  new run ","Install  new "," require ","no_install nil? ","no_install == ","Bundler  settings temporary ","SharedHelpers  major_deprecation ","ARGV  include? ","definition validate_ruby! ","Bundler  ui quiet= ","Gem Security Policies  keys join ","Gem Security Policies  keys ","Gem Security Policies  keys include? ","g tr ","Bundler  ui level= ","Bundler  rubygems security_policies keys join ","Bundler  rubygems security_policies keys ","Bundler  rubygems security_policies ","Bundler  rubygems ","Bundler  rubygems security_policies keys include? ","Bundler  ui info "," without_groups_message ","Bundler  settings without any? ","Bundler  settings without ","Bundler  definition rubygems_remotes empty? ","Bundler  definition rubygems_remotes ","opts [] ! "," require_relative "," remembered_flag_deprecation ","(str \"clean\") each "," remembered_negative_flag_deprecation ","Bundler  Bundler  definition  "," options dup  [] map! "," options dup  [] ","Bundler  Bundler  definition  sources empty? ","Bundler  Bundler  definition  sources ","Bundler  Bundler  definition  no_sources? "," options dup  []= ","./ +  [] == ","Bundler  settings []  [] == ","File  expand_path sub  [] == ","absolute_path sub  [] == ","./ +  [] ","Bundler  settings []  [] ","File  expand_path sub  [] ","absolute_path sub  [] "," options dup  [] empty? "," options dup  [] flatten! "," options dup  [] size == "," options dup  [] size "," options dup  [] == "," options dup  [] map ","File  expand_path  sub ","Bundler  settings []  nil? ","Bundler  settings []  == ","Bundler  definition  validate_ruby! ","Bundler  Bundler  definition  rubygems_remotes empty? ","Bundler  Bundler  definition  rubygems_remotes "," options dup  [] ! "]}," Bundler CLI check":{"type":"method","name":"check","children":[],"call":[" puts ","env specs ","missing each ","missing any? ","env index search empty? ","env index search ","env index ","env dependencies select ","env dependencies ","Bundler  load ","e message "," with_rescue "," exit ","Bundler  ui info ","Bundler  ui ","Bundler  ui error ","s version ","s name ","not_installed each ","not_installed any? ","spec loaded_from ! ","spec loaded_from ","env specs select ","env requested_specs select ","env requested_specs ","Bundler  ui warn ","Bundler  runtime ","Bundler  load lock ","Bundler  definition missing_specs ","Bundler  definition ","ENV  []= ","File  expand_path "," options [] "," options ","Bundler  settings []= ","Bundler  settings ","Check  new run ","Check  new "," require ","Bundler  settings [] ","Bundler  default_lockfile exist? ! ","Bundler  default_lockfile exist? ","Bundler  default_lockfile ","definition missing_specs ","definition validate_ruby! "," require_relative "," remembered_flag_deprecation ","Bundler  load  specs ","Bundler  runtime  specs ","Bundler  load  index search empty? ","Bundler  runtime  index search empty? ","Bundler  load  index search ","Bundler  runtime  index search ","Bundler  load  index ","Bundler  runtime  index ","Bundler  load  dependencies select ","Bundler  runtime  dependencies select ","Bundler  load  dependencies ","Bundler  runtime  dependencies ","Bundler  definition missing_specs  each ","definition missing_specs  each ","Bundler  definition missing_specs  any? ","definition missing_specs  any? ","Bundler  load  specs select ","Bundler  runtime  specs select ","Bundler  load  requested_specs select ","Bundler  runtime  requested_specs select ","Bundler  load  requested_specs ","Bundler  runtime  requested_specs ","Bundler  Bundler  definition  missing_specs ","Bundler  Bundler  definition  ","Bundler  definition  missing_specs ","Bundler  definition  validate_ruby! "]}," Bundler CLI init":{"type":"method","name":"init","children":[],"call":["FileUtils  cp ","File  expand_path "," puts ","Dir  pwd ","File  exist? ","file << ","spec to_gemfile ","File  open ","Gem Specification  load "," exit ","Bundler  ui error ","Bundler  ui ","opts [] "," options dup "," options ","Init  new run ","Init  new "," require "," require_relative ","Gem Specification  load  to_gemfile "," options dup  [] "]}," Bundler ui=":{"type":"method","name":"ui=","children":[],"call":["Bundler  rubygems ui= ","UI RGProxy  new ","Bundler  rubygems "]}," Thor Task backtrace_match?":{"type":"method","name":"backtrace_match?","children":[],"call":["backtrace =~ ","Regexp  escape "," name split last "," name split "," name "]}," Runner show_modules":{"type":"method","name":"show_modules","children":[],"call":[" say "," print_table ","info << ","hash [] join ","hash [] "," thor_yaml each "," thor_yaml ","- * ","labels [] size ","labels [] "]}," Runner display_tasks":{"type":"method","name":"display_tasks","children":[],"call":[" say "," print_table ","- * ","namespace size "," shell set_color "," shell ","a [] <=> ","b [] ","a [] ","list sort! "]}," Runner display_klasses":{"type":"method","name":"display_klasses","children":[],"call":[" display_tasks ","tasks empty? ","list each ","a [] sub <=> ","b [] sub ","b [] ","a [] sub ","a [] ","list sort ","list []= ","k printable_tasks first ","k printable_tasks ","groups map! ","list [] ","k namespace ","(send\n  (lvar :klasses) :-\n  (lvar :groups)) each ","klasses - ","k ancestors include? ","k ancestors ","klasses select ","h []= ","Hash  new ","Thor Util  thor_classes_in ","klasses dup each ","klasses dup "," show_modules "," thor_yaml empty? ! "," thor_yaml empty? "," thor_yaml "," raise ","klasses empty? ","k namespace split first ","k namespace split "," display_commands ","commands empty? ","k printable_commands first ","k printable_commands "," fail "]}," Runner thorfiles_relevant_to":{"type":"method","name":"thorfiles_relevant_to","children":[],"call":["File  join ","v [] "," thor_root ","files map ","(send\n  (send\n    (lvar :v) :[]\n    (sym :namespaces)) :&\n  (lvar :lookup)) empty? ! ","(send\n  (send\n    (lvar :v) :[]\n    (sym :namespaces)) :&\n  (lvar :lookup)) empty? ","v [] & "," thor_yaml select "," thor_yaml ","meth split [] join ","meth split [] ","meth split ","(send\n  (lvar :v) :[]\n  (sym :filename)) to_s "]}," Runner thorfiles":{"type":"method","name":"thorfiles","children":[],"call":["File  join ","File  directory? ","files map! "," thor_root ","Thor Util  thor_root_glob "," thorfiles_relevant_to ","thorfiles empty? ","(send\n  (send\n    (const\n      (const nil :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten ","Dir  [] ","Thor Util  globs_for map ","Thor Util  globs_for ","Pathname  pwd ascend ","Pathname  pwd ","Bundler Thor Util  thor_root_glob ","(send\n  (send\n    (const\n      (const\n        (const nil :Bundler) :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten ","Bundler Thor Util  globs_for map ","Bundler Thor Util  globs_for "," (send\n  (send\n    (const\n      (const nil :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten _relevant_to "," (send\n  (send\n    (const\n      (const\n        (const nil :Bundler) :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten _relevant_to ","(send\n  (send\n    (const\n      (const nil :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten  empty? ","(send\n  (send\n    (const\n      (const\n        (const nil :Bundler) :Thor) :Util) :globs_for\n    (lvar :path)) :map) flatten  empty? "]}," Runner initialize_thorfiles":{"type":"method","name":"initialize_thorfiles","children":[],"call":["Thor Util  load_thorfile ","Thor Base  subclass_files keys include? ","File  expand_path ","Thor Base  subclass_files keys ","Thor Base  subclass_files "," thorfiles each "," thorfiles "," options [] "," options ","Bundler Thor Util  load_thorfile ","Bundler Thor Base  subclass_files keys include? ","Bundler Thor Base  subclass_files keys ","Bundler Thor Base  subclass_files "]}," Runner exit_on_failure?":{"type":"method","name":"exit_on_failure?","children":[],"call":[]}," Runner save_yaml":{"type":"method","name":"save_yaml","children":[],"call":["f puts ","yaml to_yaml ","File  open ","FileUtils  touch ","File  join "," thor_root ","FileUtils  mkdir_p ","File  exists? ","File  exist? "," require "]}," Runner thor_yaml":{"type":"method","name":"thor_yaml","children":[],"call":["YAML  load_file ","File  exists? ","File  join "," thor_root ","File  exist? "]}," Runner thor_root":{"type":"method","name":"thor_root","children":[],"call":["Thor Util  thor_root ","Bundler Thor Util  thor_root "]}," Runner banner":{"type":"method","name":"banner","children":[],"call":[]}," Runner list":{"type":"method","name":"list","children":[],"call":[" display_klasses ","k namespace =~ ","k namespace ","k group == ","k group "," options [] "," options ","Thor Base  subclasses select ","Thor Base  subclasses "," initialize_thorfiles ","Bundler Thor Base  subclasses select ","Bundler Thor Base  subclasses "]}," Runner installed":{"type":"method","name":"installed","children":[],"call":[" display_klasses "," options [] "," options "," initialize_thorfiles "]}," Runner update":{"type":"method","name":"update","children":[],"call":["File  delete ","File  join "," thor_root ","filename == "," install "," thor_yaml [] [] "," thor_yaml [] "," thor_yaml "," options= "," options merge "," options "," say "," raise "," thor_yaml [] [] ! "," thor_yaml [] ! "," save_yaml "," thor_yaml delete ","FileUtils  rm_rf ","File  directory? ","File  expand_path "," fail "," require "," install  == "]}," Runner uninstall":{"type":"method","name":"uninstall","children":[],"call":[" puts "," save_yaml "," thor_yaml "," thor_yaml delete ","FileUtils  rm_rf ","File  join "," thor_yaml [] [] "," thor_yaml [] "," thor_root "," say "," raise "," fail ","(send\n  (send\n    (send nil :thor_yaml) :[]\n    (lvar :name)) :[]\n  (sym :filename)) to_s "," require "]}," Runner install":{"type":"method","name":"install","children":[],"call":[" thor_yaml [] [] "," thor_yaml [] "," thor_yaml ","FileUtils  cp_r ","f puts ","File  open ","package == ","File  join "," thor_root "," say "," save_yaml "," thor_yaml []= ","Thor Util  namespaces_in_content ","Digest MD5  hexdigest ","name + ","File  expand_path ","name =~ "," options [] "," options ","as empty? "," ask ","File  basename ","match [] strip ","match [] ","first_line match ","contents split [] ","contents split "," no? "," raise "," open read "," open ","File  directory? "," initialize_thorfiles ","input read ","Bundler Thor Util  namespaces_in_content "," fail "," require "," Digest hexdigest "," Digest "," ask  empty? ","  ask k ","File  b ask ename ","File  File  basename  ","File  File  join name ","first_line match  [] strip ","first_line match  [] ","first_line first_line match  ","contents split []  match "," open read  split [] "," open  split [] "," open read  split "," open  split "]}," Runner method_missing":{"type":"method","name":"method_missing","children":[],"call":["klass start "," shell ","args unshift ","Thor Util  namespace_to_thor_class_and_task "," initialize_thorfiles ","meth to_s ","Thor Util  find_class_and_task_by_namespace "," class handle_no_command_error "," class ","klass nil? ","Bundler Thor Util  find_class_and_command_by_namespace "," class handle_no_task_error ","Thor Util  find_class_and_command_by_namespace ","meth to_s  to_s "]}," Runner help":{"type":"method","name":"help","children":[],"call":["klass start "," shell ","(str \"-h\") compact ","Thor Util  namespace_to_thor_class_and_task "," initialize_thorfiles "," respond_to? ! "," respond_to? ","Thor Util  find_class_and_task_by_namespace "," class handle_no_command_error "," class ","klass nil? ","Bundler Thor Util  find_class_and_command_by_namespace "," class handle_no_task_error ","Thor Util  find_class_and_command_by_namespace "]}," Object namespace":{"type":"method","name":"namespace","children":[],"call":["Thor RakeCompat  rake_classes pop ","Thor RakeCompat  rake_classes "," rake_namespace ","Thor RakeCompat  rake_classes << ","klass const_get ","klass const_set ","Class  new ","Thor Util  camel_case to_sym ","Thor Util  camel_case ","name to_s ","Thor RakeCompat  rake_classes last ","Thor RakeCompat  rake_classes last  const_get ","Thor RakeCompat  rake_classes last  const_set "]}," Object task":{"type":"method","name":"task","children":[],"call":["Rake Task  [] invoke ","Rake Task  [] ","task name to_sym ","task name ","klass send ","klass desc ","task comment ","description strip! ","description << ","(send\n  (send\n    (lvar :task) :arg_names) :map) join ","n to_s upcase ","n to_s ","task arg_names map ","task arg_names ","task name split last ","task name split ","Thor RakeCompat  rake_classes last ","Thor RakeCompat  rake_classes "," rake_task "," rake_task  name to_sym "," rake_task  name ","Thor RakeCompat  rake_classes last  send ","Thor RakeCompat  rake_classes last  desc "," rake_task  comment ","(send\n  (send\n    (lvar : rake_task ) :arg_names) :map) join "," rake_task  arg_names map "," rake_task  arg_names "," rake_task  name split last "," rake_task  name split "," rake_ rake_task  "]}," Thor RakeCompat included":{"type":"method","name":"included","children":[],"call":[]}," Thor RakeCompat rake_classes":{"type":"method","name":"rake_classes","children":[],"call":[]}," Group _invoke_for_class_method":{"type":"method","name":"_invoke_for_class_method","children":[],"call":[" shell padding "," shell "," invoke ","block call ","block arity == ","block arity "," block_given? "," instance_exec "," with_padding "]}," Group create_task":{"type":"method","name":"create_task","children":[],"call":[" tasks []= ","Thor Task  new ","meth to_s "," tasks "]}," Group baseclass":{"type":"method","name":"baseclass","children":[],"call":[]}," Group self_task":{"type":"method","name":"self_task","children":[],"call":["Thor Task Dynamic  new "," class_options "," namespace ","Thor DynamicTask  new "]}," Group banner":{"type":"method","name":"banner","children":[],"call":[" self_task formatted_usage "," self_task "," basename "," self_command formatted_usage "," self_command "]}," Group printable_tasks":{"type":"method","name":"printable_tasks","children":[],"call":["item << "," desc gsub "," desc "," banner "]}," Group get_options_from_invocations":{"type":"method","name":"get_options_from_invocations","children":[],"call":[" block_given? ","(send\n  (send\n    (send\n      (lvar :group_options) :values) :flatten) :any?) ! ","i name == ","option name ","i name ","group_options values flatten any? ","group_options values flatten ","group_options values ","option group nil? ","option group ","base_options [] nil? ","base_options [] ","option name to_sym ","klass class_options values select ","klass class_options values ","klass class_options ","group_options [] ","value classify ","value respond_to? ","value to_s ","klass respond_to? "," prepare_for_invocation ","option default ","option type == ","option type "," class_options [] "," class_options "," invocations each "," invocations ","class_option name ","class_option group nil? ","class_option group ","class_option name to_sym ","(send\n  (send\n    (send\n      (lvar :group_options) :value to_s s) :flatten) :any?) ! ","(send\n  (send\n    (send\n      (lvar :group_ class_options [] s) :values) :flatten) :any?) ! "," class_options []  name ","group_options value to_s s flatten any? ","group_ class_options [] s values flatten any? ","group_options value to_s s flatten ","group_ class_options [] s values flatten ","group_options value to_s s ","group_ class_options [] s values "," class_options []  group nil? "," class_options []  group ","base_ class_options [] s [] nil? ","base_ class_options [] s [] "," class_options []  name to_sym ","klass class_options value to_s s select ","klass class_ class_options [] s values select ","klass class_options value to_s s ","klass class_ class_options [] s values ","klass class_ class_options [] s ","group_ class_options [] s [] ","value to_s  classify ","value to_s  respond_to? ","value to_s  to_s "," class_options []  default "," class_options []  type == "," class_options []  type "," class_ class_options [] s [] "," class_ class_options [] s ","class_ class_options []  name ","class_ class_options []  group nil? ","class_ class_options []  group ","class_ class_options []  name to_sym "]}," Group class_options_help":{"type":"method","name":"class_options_help","children":[],"call":["klass send "," class_options "," get_options_from_invocations "]}," Group remove_invocation":{"type":"method","name":"remove_invocation","children":[],"call":[" invocation_blocks delete "," invocation_blocks "," invocations delete "," invocations "," remove_class_option "," remove_task ","names each "," remove_command "]}," Group invoke_from_option":{"type":"method","name":"invoke_from_option","children":[],"call":[" class_eval ","name inspect ","verbose inspect ","name to_s gsub ","name to_s "," invocation_blocks []= "," invocation_blocks "," block_given? "," invocations []= "," invocations "," raise ","(str \"You have to define the option \") << "," class_options key? "," class_options ","names each ","options fetch ","names pop ","names last is_a? ","names last "," fail ","123 + ","options fetch  inspect "," class_names pop  key? "," class_names pop  ","names pop  fetch "]}," Group invoke":{"type":"method","name":"invoke","children":[],"call":[" class_eval ","name inspect ","verbose inspect ","name to_s gsub ","name to_s "," invocation_blocks []= "," invocation_blocks "," block_given? "," invocations []= "," invocations ","names each ","options fetch ","names pop ","names last is_a? ","names last ","64 + ","options fetch  inspect ","names pop  fetch "]}," Group invocation_blocks":{"type":"method","name":"invocation_blocks","children":[],"call":[" from_superclass "]}," Group invocations":{"type":"method","name":"invocations","children":[],"call":[" from_superclass "]}," Group help":{"type":"method","name":"help","children":[],"call":["shell say "," desc "," class_options_help "," banner "]}," Group start":{"type":"method","name":"start","children":[],"call":[" new invoke "," new ","Thor Options  split "," help ","config [] ","Thor HELP_MAPPINGS  include? ","given_args first "]}," Group desc":{"type":"method","name":"desc","children":[],"call":[" from_superclass "]}," Thor Actions _cleanup_options_and_set":{"type":"method","name":"_cleanup_options_and_set","children":[],"call":["options merge! ","options delete ","(sym :force) each ","options << ","(str \"--force\") each "]}," Thor Actions _shared_configuration":{"type":"method","name":"_shared_configuration","children":[],"call":[" merge! "," destination_root "]}," Thor Actions thor":{"type":"method","name":"thor","children":[],"call":[" run ","args join strip ","args join ","args push ","Thor Options  to_switches ","args unshift ","config delete ","config key? ","args pop ","args last is_a? ","args last ","Bundler Thor Options  to_switches ","args pop  delete ","args pop  key? "]}," Thor Actions run_ruby_script":{"type":"method","name":"run_ruby_script","children":[],"call":[" run ","config merge ","Thor Util  ruby_command "," behavior == "," behavior ","Bundler Thor Util  ruby_command "]}," Thor Actions run":{"type":"method","name":"run","children":[],"call":[" system "," options [] "," options "," say_status ","config fetch ","config [] ","File  basename ","config [] to_s ","destination inspect "," relative_to_original_destination_root "," destination_root "," behavior == "," behavior ","command to_s "," options [] ! "," abort ","$? success? "," class exit_on_failure? "," class ","success ! ","status success? ","Open3  capture2e "," require "," relative_to_original_destination_root  inspect "," relative_to_original_ relative_to_original_destination_root _root ","  relative_to_original_destination_root _root ","$? $? success? ? ","$? status success? ? ","$? success?  ! ","status success?  ! ","status $? success? ? ","status status success? ? "]}," Thor Actions apply":{"type":"method","name":"apply","children":[],"call":[" shell padding "," shell "," instance_eval "," open read "," open "," say_status "," find_in_source_paths ","path =~ ","config fetch ","io read "," require ","URI  open "," find_in_source_ find_in_source_paths s "," find_in_source_paths  =~ "]}," Thor Actions in_root":{"type":"method","name":"in_root","children":[],"call":[" inside ","@destination_stack first "]}," Thor Actions inside":{"type":"method","name":"inside","children":[],"call":[" shell padding "," shell ","@destination_stack pop "," destination_root ","block arity == ","block arity ","FileUtils  cd ","FileUtils  mkdir_p ","File  exist? ","@destination_stack push ","File  expand_path "," say_status ","config fetch ","pretend ! ","File  exist? ! "," options [] "," options "," require "," options []  ! "]}," Thor Actions find_in_source_paths":{"type":"method","name":"find_in_source_paths","children":[],"call":[" raise ","file inspect ","(str \"You don't have any source path defined for class \") << "," class name "," class "," source_paths empty? "," source_paths ","File  exists? ","File  expand_path ","File  join "," source_paths each "," relative_to_original_destination_root "," destination_root ","message << "," source_paths join "," class source_root "," fail ","File  exist? ","possible_files each ","file + ","(str \"Could not find \") dup ","(str \"Could not find \") dup  << "]}," Thor Actions source_paths":{"type":"method","name":"source_paths","children":[],"call":[" class source_paths_for_search "," class "]}," Thor Actions relative_to_original_destination_root":{"type":"method","name":"relative_to_original_destination_root","children":[],"call":["path [] ","path gsub ","@destination_stack [] ","path gsub! ","path dup ","path =~ ","path []= ","root size ","(const\n  (const nil :File) :SEPARATOR) include? ","path start_with? ","path gsub  [] ","path dup  [] ","path gsub  gsub ","path dup  gsub ","path gsub  gsub! ","path dup  gsub! ","path gsub  dup ","path dup  dup ","path gsub  =~ ","path dup  =~ ","path gsub  []= ","path dup  []= ","@destination_stack []  size ","path gsub  start_with? ","path dup  start_with? "]}," Thor Actions destination_root=":{"type":"method","name":"destination_root=","children":[],"call":["@destination_stack []= ","File  expand_path "]}," Thor Actions destination_root":{"type":"method","name":"destination_root","children":[],"call":["@destination_stack last "]}," Thor Actions action":{"type":"method","name":"action","children":[],"call":["instance invoke! ","instance revoke! "," behavior == "," behavior "]}," Thor Actions initialize":{"type":"method","name":"initialize","children":[],"call":[" destination_root= ","config [] "," behavior= "," _cleanup_options_and_set ","config [] to_s "]}," Thor Actions ClassMethods add_runtime_options!":{"type":"method","name":"add_runtime_options!","children":[],"call":[" class_option "]}," Thor Actions ClassMethods source_paths_for_search":{"type":"method","name":"source_paths_for_search","children":[],"call":[" from_superclass ","paths << "," source_root "," respond_to? "," source_paths "]}," Thor Actions ClassMethods source_paths":{"type":"method","name":"source_paths","children":[],"call":[]}," Thor Actions included":{"type":"method","name":"included","children":[],"call":[]}," Thor Actions InjectIntoFile replace!":{"type":"method","name":"replace!","children":[],"call":["file write ","File  open "," destination ","content gsub! ","File  binread "," base options [] "," base options "," base ","content include? ! ","content include? "," replacement ","File  read "," pretend? ","snippet include? ! ","snippet include? ","(if\n  (send\n    (send nil :behavior) :==\n    (sym :after))\n  (lvar :after)\n  (lvar :before)) to_s "," behavior == "," behavior ","content split ","File  binread  gsub! ","File  read  gsub! ","File  binread  include? ! ","File  read  include? ! ","File  binread  include? ","File  read  include? ","(if\n  (send\n    (send nil :behavior) :==\n    (sym :after))\n  (lvar :after)\n  (lvar :before)) to_s  include? ! ","(if\n  (send\n    (send nil :behavior) :==\n    (sym :after))\n  (lvar :after)\n  (lvar :before)) to_s  include? ","File  binread  split ","File  read  split "]}," Thor Actions InjectIntoFile say_status":{"type":"method","name":"say_status","children":[],"call":[" config [] "," config ","behavior == "," flag == "," flag "]}," Thor Actions InjectIntoFile revoke!":{"type":"method","name":"revoke!","children":[],"call":[" replace! "," flag ","Regexp  escape "," replacement ","@behavior == "," say_status "]}," Thor Actions InjectIntoFile invoke!":{"type":"method","name":"invoke!","children":[],"call":[" replace! "," flag "," replacement + "," replacement ","\\0 + ","@behavior == "," say_status "," config [] "," config "," raise "," destination "," pretend? "," exists? ","WARNINGS  [] "]}," Thor Actions InjectIntoFile initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  escape ","@flag is_a? ","data call ","data is_a? ","@config delete ","@config key? ","(pair\n  (sym :verbose)\n  (true)) merge ","Regexp  escape  is_a? "]}," Thor Actions inject_into_file":{"type":"method","name":"inject_into_file","children":[],"call":[" action ","InjectIntoFile  new ","args shift "," block_given? "]}," Thor Actions remove_file":{"type":"method","name":"remove_file","children":[],"call":[" FileUtils  rm_rf ","File  exists? "," options [] ! "," options [] "," options "," say_status ","config fetch "," relative_to_original_destination_root ","File  expand_path "," destination_root "," behavior == "," behavior ","File  exist? "," require ","File  symlink? ","File  expand_File  expand_path  "]}," Thor Actions gsub_file":{"type":"method","name":"gsub_file","children":[],"call":["file write ","File  open ","content gsub! ","File  binread "," options [] "," options "," say_status ","config fetch "," relative_to_original_destination_root ","File  expand_path "," destination_root ","args pop ","args last is_a? ","args last "," behavior == "," behavior ","File  binread  gsub! ","args pop  fetch ","File  expand_File  expand_path  "]}," Thor Actions inject_into_class":{"type":"method","name":"inject_into_class","children":[],"call":[" inject_into_file ","args << ","config merge! ","args pop ","args last is_a? ","args last "," insert_into_file ","config []= ","args pop  merge! ","args pop  []= "]}," Thor Actions append_file":{"type":"method","name":"append_file","children":[],"call":[" inject_into_file ","args << ","config merge! ","args pop ","args last is_a? ","args last ","args pop  merge! "]}," Thor Actions prepend_file":{"type":"method","name":"prepend_file","children":[],"call":[" inject_into_file ","args << ","config merge! ","args pop ","args last is_a? ","args last ","args pop  merge! "]}," Thor Actions chmod":{"type":"method","name":"chmod","children":[],"call":["FileUtils  chmod_R "," options [] "," options "," say_status ","config fetch "," relative_to_original_destination_root ","File  expand_path "," destination_root "," behavior == "," behavior "," require ","File  expand_File  expand_path  "]}," Thor Actions template":{"type":"method","name":"template","children":[],"call":["block call ","ERB  new result ","ERB  new "," File  binread "," create_file "," instance_eval ","File  expand_path "," find_in_source_paths ","source to_s ","args first ","args pop ","args last is_a? ","args last ","source sub ","CapturableERB  new result ","CapturableERB  new ","config delete ","(send\n  (send\n    (const nil :CapturableERB) :new\n    (send\n      (const\n        (cbase) :File) :binread\n      (lvar :source))\n    (nil)\n    (str \"-\")\n    (str \"@output_buffer\")) :tap) result ","erb filename= ","CapturableERB  new tap ","(send\n  (lvar :capturable_erb) :tap) result ","capturable_erb tap ","match [] >= ","match [] ","ERB  version match ","ERB  version "," find_in_File  expand_path _paths ","File  expand_path  to_s ","File  expand_path  sub ","args pop  delete ","(send\n  (send\n    (const nil :CapturableERB) :new\n    (send\n      (const\n        (cbase) :File) :binread\n      (lvar :File  expand_path ))\n    (nil)\n    (str \"-\")\n    (str \"@output_buffer\")) :tap) result ","(send\n  (lvar :CapturableERB  new ) :tap) result ","CapturableERB  new  tap ","ERB  version match  [] >= ","ERB  version match  [] ","ERB  version ERB  version match  "]}," Thor Actions get":{"type":"method","name":"get","children":[],"call":[" create_file ","File  basename ","block call ","block arity == ","block arity "," block_given? ","File  binread ","File  expand_path "," find_in_source_paths ","source to_s ","source =~ ","input binmode read ","input binmode "," open ","args first ","args pop ","args last is_a? ","args last "," require ","URI  send "," find_in_File  expand_path _paths ","File  expand_path  to_s ","File  expand_path  =~ "]}," Thor Actions copy_file":{"type":"method","name":"copy_file","children":[],"call":["block call ","File  binread "," create_file ","File  expand_path "," find_in_source_paths ","source to_s ","args first ","args pop ","args last is_a? ","args last "," chmod ","File  stat mode ","File  stat ","config [] == ","config [] "," find_in_File  expand_path _paths ","File  expand_path  to_s ","File  stat File  stat mode  ","args pop  [] == ","args pop  [] "]}," Thor Actions EmptyDirectory say_status":{"type":"method","name":"say_status","children":[],"call":[" base shell say_status "," relative_destination "," base shell "," base "," config [] "," config "]}," Thor Actions EmptyDirectory on_conflict_behavior":{"type":"method","name":"on_conflict_behavior","children":[],"call":[" say_status "]}," Thor Actions EmptyDirectory invoke_with_conflict_check":{"type":"method","name":"invoke_with_conflict_check","children":[],"call":[" destination ","block call "," pretend? "," say_status "," on_conflict_behavior "," exists? "," on_file_clash_behavior "]}," Thor Actions EmptyDirectory convert_encoded_instructions":{"type":"method","name":"convert_encoded_instructions","children":[],"call":[" base send "," base "," base respond_to? ","1 strip ","filename gsub "," call_public_method "," call_public_1 strip  "]}," Thor Actions EmptyDirectory destination=":{"type":"method","name":"destination=","children":[],"call":[" base relative_to_original_destination_root "," base "," File  expand_path "," base destination_root "," convert_encoded_instructions ","destination to_s "]}," Thor Actions EmptyDirectory pretend?":{"type":"method","name":"pretend?","children":[],"call":[" base options [] "," base options "," base "]}," Thor Actions EmptyDirectory revoke!":{"type":"method","name":"revoke!","children":[],"call":[" given_destination "," FileUtils  rm_rf "," destination "," exists? "," pretend? ! "," pretend? "," say_status "," require "]}," Thor Actions EmptyDirectory invoke!":{"type":"method","name":"invoke!","children":[],"call":[" FileUtils  mkdir_p "," destination "," invoke_with_conflict_check "," require "]}," Thor Actions EmptyDirectory exists?":{"type":"method","name":"exists?","children":[],"call":[" File  exists? "," destination "," File  exist? "]}," Thor Actions EmptyDirectory initialize":{"type":"method","name":"initialize","children":[],"call":[" destination= ","(pair\n  (sym :verbose)\n  (true)) merge "]}," Thor Actions empty_directory":{"type":"method","name":"empty_directory","children":[],"call":[" action ","EmptyDirectory  new "]}," Thor Actions Directory execute!":{"type":"method","name":"execute!","children":[],"call":[" base copy_file "," config "," base "," base template ","file_destination [] "," base empty_directory ","dirname == "," given_destination ","File  dirname gsub ","File  dirname ","file_destination gsub! ","File  join ","file_source gsub "," source ","File  directory? ","Dir  [] each ","Dir  [] "," config [] ","Dir  [] sort each ","Dir  [] sort ","file_source match "," files sort each "," files sort "," files "," file_level_lookup ","Util  escape_globs ","file_ base copy_file  [] ","file_ base template  [] ","File  join  [] ","File  dirname gsub  == "," given_ base copy_file  "," given_ base template  ","File  File  dirname gsub  gsub ","File  File  dirname gsub  ","file_ base copy_file  gsub! ","file_ base template  gsub! ","File  join  gsub! "," file_level_File  join  "," file_level_ source  "," file_level_ file_level_lookup  "," file_level_Util  escape_globs  "]}," Thor Actions Directory revoke!":{"type":"method","name":"revoke!","children":[],"call":[" execute! "]}," Thor Actions Directory invoke!":{"type":"method","name":"invoke!","children":[],"call":[" execute! "," base empty_directory "," config "," given_destination "," base "]}," Thor Actions Directory initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :recursive)\n  (true)) merge ","File  expand_path ","base find_in_source_paths ","source to_s ","Dir  [] first ","Dir  [] ","Util  escape_globs "]}," Thor Actions directory":{"type":"method","name":"directory","children":[],"call":[" action ","Directory  new ","args first ","args pop ","args last is_a? ","args last "]}," Thor Actions CreateFile force_on_collision?":{"type":"method","name":"force_on_collision?","children":[],"call":[" render "," base shell file_collision "," destination "," base shell "," base "]}," Thor Actions CreateFile force_or_skip_or_conflict":{"type":"method","name":"force_or_skip_or_conflict","children":[],"call":[" force_or_skip_or_conflict "," force_on_collision? "," say_status ","block call "," pretend? "]}," Thor Actions CreateFile on_conflict_behavior":{"type":"method","name":"on_conflict_behavior","children":[],"call":[" force_or_skip_or_conflict ","options [] "," base options merge "," config "," base options "," base "," say_status "," identical? "," base options merge  [] "," base  base options merge  merge "," base  base options merge  "]}," Thor Actions CreateFile invoke!":{"type":"method","name":"invoke!","children":[],"call":[" given_destination ","f write "," render ","File  open "," destination ","FileUtils  mkdir_p ","File  dirname "," invoke_with_conflict_check "," require "]}," Thor Actions CreateFile render":{"type":"method","name":"render","children":[],"call":[" data "," data call "," data is_a? "]}," Thor Actions CreateFile identical?":{"type":"method","name":"identical?","children":[],"call":["File  binread == "," render ","File  binread "," destination "," exists? "]}," Thor Actions CreateFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor Actions create_file":{"type":"method","name":"create_file","children":[],"call":[" action ","CreateFile  new ","data to_s ","args first ","args pop ","args last is_a? ","args last ","args first  to_s "]}," Bundler Installer unambiguous?":{"type":"method","name":"unambiguous?","children":[],"call":["op == ","dep version_requirements requirements all? ","dep version_requirements requirements ","dep version_requirements "]}," Bundler Index from_gem_index":{"type":"method","name":"from_gem_index","children":[],"call":[]}," Bundler Dsl _normalize_git_options":{"type":"method","name":"_normalize_git_options","children":[],"call":["opts []= ","source default_spec "," _version? "," git ","opts [] "," git  default_spec "]}," Bundler CLI with_rescue":{"type":"method","name":"with_rescue","children":[],"call":[" exit "," puts ","e message "]}," Bundler CLI banner":{"type":"method","name":"banner","children":[],"call":[]}," Bundler point_gem_home":{"type":"method","name":"point_gem_home","children":[],"call":["Gem  clear_paths ","ENV  []= ","File  expand_path "," root "]}," Bundler env":{"type":"method","name":"env","children":[],"call":["env []= ","ENV  [] ","config [] ","key downcase to_sym ","key downcase ","(str \"BUNDLE_PATH\") each ","YAML  load_file ","File  exist? "," root ","YAML  load_file  [] "]}," Bundler Source Git checkout":{"type":"method","name":"checkout","children":[],"call":[" git "," revision "," path "," cache_path ","File  exist? ","Dir  chdir ","FileUtils  mkdir_p "," path join "," path dirname ","FileUtils  rm_rf ","File  chmod ","511 & ","File  umask ~ ","File  umask "]}," Bundler Source Git lock":{"type":"method","name":"lock","children":[],"call":[" checkout ","@options []= "," revision "]}," Bundler Runtime autorequires_for_groups":{"type":"method","name":"autorequires_for_groups","children":[],"call":["h []= ","autorequires [] ","groups inject ","groups empty? ","autorequires [] concat ","dep autorequire ","dep groups each ","dep groups ","@definition dependencies each ","@definition dependencies ","Hash  new ","autorequires [] << ","dep name ","dep autorequire each ","ordered_deps each ","ordered_deps << ","ordered_deps include? ! ","ordered_deps include? ","d name == ","g name ","d name ","@definition dependencies find "," specs_for each "," specs_for ","g to_sym ","groups map! "]}," Bundler Runtime details":{"type":"method","name":"details","children":[],"call":["details []= ","d version_requirements to_s ","d version_requirements ","d name ","@definition dependencies map ","@definition dependencies ","s name ","options []= "," sources index ","s source "," sources "," sources include? ","s version to_s ","s version "," specs map "," specs ","s options ","s class name split last ","s class name split ","s class name ","s class "," sources map ","h merge ","info merge! ","d autorequire ","d groups ","d requirement to_s ","d requirement ","@definition dependencies inject "," gemfile_fingerprint ","Digest SHA1  hexdigest ","File  read "," root ","h merge! ","h [] []= ","h [] "]}," Bundler Runtime write_yml_lock":{"type":"method","name":"write_yml_lock","children":[],"call":["f puts ","File  open "," root "," details to_yaml "," details "]}," Bundler Runtime write_rb_lock":{"type":"method","name":"write_rb_lock","children":[],"call":["f puts ","erb result "," binding ","File  open "," root ","ERB  new ","File  read ","File  expand_path "," rb_lock_file ","FileUtils  mkdir_p "," rb_lock_file dirname ","ERB  new  result "]}," Bundler Runtime cripple_rubygems":{"type":"method","name":"cripple_rubygems","children":[{"type":"method","name":"gem","children":[],"asgn":[],"call":[]}],"call":[" private_method_defined? "," Kernel  class_eval ","$LOAD_PATH uniq! ","$LOAD_PATH unshift ","p include? ","Gem  path any? ","Gem  path ","p != ","File  dirname ","$LOAD_PATH reject! ","File  expand_path ","File  join ","spec bindir ","spec full_gem_path "," raise ","spec full_name ","spec default_executable ","s name == ","s name ","specs find ","s executables include? ","s executables ","gem_class send ","source_index add_specs ","Gem SourceIndex  new ","source_index_class send ","e version_requirement= ","dep version_requirements ","e name= ","dep name ","Gem LoadError  new ","dep !~ ","spec nil? ","Gem Dependency  new ","dep respond_to? ","reqs pop ","reqs last is_a? ","reqs last ","executables include? ","File  basename "," caller first split first "," caller first split "," caller first "," caller "," Kernel  send ","(send\n  (lvar :specs) :map) flatten ","specs map "," reverse_rubygems_kernel_mixin ","source_index spec_dirs= "," private_File  expand_path thod_defined? "," privatGem LoadError  new _mGem LoadError  new thod_dGem LoadError  new finGem LoadError  new d? "," KGem LoadError  new rnGem LoadError  new l  class_Gem LoadError  new val ","p includGem LoadError  new ? ","GGem LoadError  new m  path any? ","GGem LoadError  new m  path ","File  dirnaFile  expand_path  ","FilGem LoadError  new   dirnamGem LoadError  new  ","$LOAD_PATH rGem LoadError  new jGem LoadError  new ct! ","FilGem LoadError  new   Gem LoadError  new xpand_path ","FilGem LoadError  new   join ","spGem LoadError  new c bindir ","spGem LoadError  new c full_gGem LoadError  new m_path "," raisGem LoadError  new  ","spec full_naFile  expand_path  ","spGem LoadError  new c full_namGem LoadError  new  ","spGem LoadError  new c dGem LoadError  new fault_Gem LoadError  new xGem LoadError  new cutablGem LoadError  new  ","s naFile  expand_path  == ","s namGem LoadError  new  == ","s naFile  expand_path  ","s namGem LoadError  new  ","spGem LoadError  new cs find ","s Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s includGem LoadError  new ? ","s (send\n  (lvar :specs) :map) flatten  include? ","s Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s ","s (send\n  (lvar :specs) :map) flatten  ","gGem LoadError  new m_class sGem LoadError  new nd ","Gem SourceIndex  new  add_specs ","sourcGem LoadError  new _indGem LoadError  new x add_spGem LoadError  new cs ","GGem LoadError  new m SourcGem LoadError  new IndGem LoadError  new x  nGem LoadError  new w ","Gem SourceIndex  new _class send ","sourcGem LoadError  new _indGem LoadError  new x_class sGem LoadError  new nd ","e version_requireFile  expand_path nt= ","Gem LoadError  new  vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","dep version_requireFile  expand_path nts ","dGem LoadError  new p vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nts ","Gem Dependency  new  version_requirements ","e naFile  expand_path = ","Gem LoadError  new  namGem LoadError  new = ","dep naFile  expand_path  ","dGem LoadError  new p namGem LoadError  new  ","Gem Dependency  new  name ","GGem LoadError  new m LoadError  nGem LoadError  new w ","dGem LoadError  new p !~ ","Gem Dependency  new  !~ ","spGem LoadError  new c nil? ","GGem LoadError  new m DGem LoadError  new pGem LoadError  new ndGem LoadError  new ncy  nGem LoadError  new w ","dGem LoadError  new p rGem LoadError  new spond_to? ","Gem Dependency  new  respond_to? ","rGem LoadError  new qs pop ","rGem LoadError  new qs last is_a? ","rGem LoadError  new qs last ","Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s includGem LoadError  new ? ","(send\n  (lvar :specs) :map) flatten  include? ","File  basenaFile  expand_path  ","FilGem LoadError  new   basGem LoadError  new namGem LoadError  new  "," callGem LoadError  new r first split first "," callGem LoadError  new r first split "," callGem LoadError  new r first "," callGem LoadError  new r "," KGem LoadError  new rnGem LoadError  new l  sGem LoadError  new nd ","(sGem LoadError  new nd\n  (lvar :spGem LoadError  new cs) :map) flattGem LoadError  new n ","spGem LoadError  new cs map "," rGem LoadError  new vGem LoadError  new rsGem LoadError  new _rubygGem LoadError  new ms_kGem LoadError  new rnGem LoadError  new l_mixin ","Gem SourceIndex  new  spec_dirs= ","sourcGem LoadError  new _indGem LoadError  new x spGem LoadError  new c_dirs= "]}," Bundler Runtime load_paths":{"type":"method","name":"load_paths","children":[],"call":["(send\n  (send nil :specs) :map) flatten ","s load_paths "," specs map "," specs "]}," Bundler Runtime sources":{"type":"method","name":"sources","children":[],"call":["@definition sources "]}," Bundler Runtime pack":{"type":"method","name":"pack","children":[],"call":["FileUtils  cp ","File  expand_path == ","File  expand_path ","File  dirname ","Bundler  ui info ","File  basename ","Bundler  ui ","File  exist? ","possibilities find ","spec full_name ","Gem  path map ","Gem  path ","spec source is_a? ","spec source "," specs each "," specs ","FileUtils  mkdir_p "," root "]}," Bundler Runtime index":{"type":"method","name":"index","children":[],"call":["@definition local_index "]}," Bundler Runtime specs":{"type":"method","name":"specs","children":[],"call":["Resolver  resolve "," index ","@definition actual_dependencies ","source_requirements []= ","dep source local_specs ","dep source ","dep name ","dep source respond_to? "," dependencies each "," dependencies "," group_specs "," actual_dependencies each "," actual_dependencies "]}," Bundler Runtime specs_for":{"type":"method","name":"specs_for","children":[],"call":["Resolver  resolve "," index "," dependencies_for "," specs ","groups empty? ","(send\n  (send\n    (lvar :s) :groups) :&\n  (lvar :groups)) any? ","s groups & ","s groups "," specs select ","g to_sym ","groups map! ","Bundler  settings without ","Bundler  settings ","@definition groups ","@definition groups  empty? ","(send\n  (send\n    (lvar :s) :@definition groups ) :&\n  (lvar :@definition groups )) any? ","s @definition groups  & ","s @definition groups  ","@definition groups  map! ","@definition @definition groups  "]}," Bundler Runtime dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":["(send\n  (lvar :groups) :&\n  (send\n    (lvar :d) :groups)) any? ","groups & ","d groups "," dependencies select "," dependencies ","groups empty? "]}," Bundler Runtime locked?":{"type":"method","name":"locked?","children":[],"call":["File  exist? "," root "]}," Bundler Runtime lock":{"type":"method","name":"lock","children":[],"call":["Bundler  ui info ","Bundler  ui "," write_rb_lock "," write_yml_lock ","FileUtils  mkdir_p "," root ","s lock ","s respond_to? "," sources each "," sources "," locked? ","Bundler  ui confirm ","@definition lock ","opts [] ","Bundler  default_lockfile ","@definition unlocking? ! ","@definition unlocking? ","@definition nothing_changed? ","@definition no_resolve_needed? "]}," Bundler Runtime unlock":{"type":"method","name":"unlock","children":[],"call":["Bundler  ui info ","Bundler  ui ","FileUtils  rm_f "," root "," locked? "]}," Bundler Runtime dependencies":{"type":"method","name":"dependencies","children":[],"call":["@definition actual_dependencies ","@definition dependencies "]}," Bundler Runtime require":{"type":"method","name":"require","children":[],"call":["Kernel  require ","(or\n  (send\n    (lvar :autorequires) :[]\n    (lvar :group))\n  (array)) each ","autorequires [] ","groups each "," autorequires_for_groups ","groups empty? ","(or\n  (send\n    (lvar :autorequires) :[]\n    (lvar :group))\n  (array\n    (array))) each ","g to_sym ","groups map! "," raise ","1 != ","dep autorequire ","r =~ ","e message ","REGEXPS  find "," Array each "," Array ","dep name ","dep current_platform? ","(send\n  (send\n    (lvar :dep) :groups) :&\n  (lvar :groups)) any? ","dep groups & ","dep groups ","@definition dependencies each ","@definition dependencies ","1 gsub != ","1 gsub ","dep name gsub ","dep name include? ","dep autorequire nil? ","REQUIRE_ERRORS  find ","file == ","dep name tr ","Bundler GemRequireError  new ","e is_a? ","dep should_include? ","regex_name nil? ","regex_name gsub != ","regex_name gsub ","Bundler  ui warn ","e class ","Bundler  ui ","Bundler  ui debug ","e path != ","e path ","(or\n  (send\n    (lvar : autorequires_for_groups ) :[]\n    (lvar :group))\n  (array)) each "," autorequires_for_groups  [] ","  autorequires_for_groups _for_groups ","(or\n  (send\n    (lvar : autorequires_for_groups ) :[]\n    (lvar :group))\n  (array\n    (array))) each ","dep name  == "]}," Bundler Runtime setup":{"type":"method","name":"setup","children":[],"call":["$LOAD_PATH unshift ","spec load_paths ","Gem  loaded_specs []= ","spec name ","Gem  loaded_specs "," specs_for each "," specs_for "," cripple_rubygems ","specs each "," clean_load_path "," raise ","spec full_name ","spec loaded_from "," requested_specs ","groups any? ","$LOAD_PATH include? ","spec load_paths each ","unloaded any? ","groups | ","groups - "," replace_rubygems_paths "," lock ","spec load_paths reject ","e version_requirement= ","Gem Requirement  new ","spec version to_s ","spec version ","e name= ","Gem LoadError  new ","activated_spec version ","activated_spec name ","activated_spec version != ","Gem  loaded_specs [] "," setup_environment ","@definition specs_for ","e requirement= ","e respond_to? ","Bundler  rubygems mark_loaded ","Bundler  rubygems ","Bundler  rubygems loaded_specs ","Bundler  rubygems replace_entrypoints "," setup_manpath ","g to_sym ","groups map! ","$LOAD_PATH insert ","Bundler  rubygems load_path_insert_index ","SharedHelpers  set_bundle_environment ","(send\n  (lvar :specs) :map) reverse flatten ","(send\n  (lvar :specs) :map) reverse ","specs map "," check_for_activated_spec! ","@definition ensure_equivalent_gemfile_and_lockfile ","Bundler  settings [] ","Bundler  settings ","Bundler  frozen? ","Bundler  frozen_bundle? ","Bundler  rubygems add_to_load_path ","spGem LoadError  new c load_paths ","spec (send\n  (lvar :specs) :map) reverse flatten  ","Gem  loaded_ specs_for  []= ","Gem  loaded_ requested_specs  []= ","Gem  loaded_@definition specs_for  []= ","GGem LoadError  new m  loadGem LoadError  new d_spGem LoadError  new cs []= ","spGem LoadError  new c namGem LoadError  new  ","Gem  loaded_ specs_for  ","Gem  loaded_ requested_specs  ","Gem  loaded_@definition specs_for  ","GGem LoadError  new m  loadGem LoadError  new d_spGem LoadError  new cs ","  specs_for _for each ","  requested_specs _for each "," @definition specs_for _for each "," spGem LoadError  new cs_for Gem LoadError  new ach ","  specs_for _for ","  requested_specs _for "," @definition specs_for _for "," spGem LoadError  new cs_for "," cripplGem LoadError  new _rubygGem LoadError  new ms "," specs_for  each "," requested_specs  each ","@definition specs_for  each ","spGem LoadError  new cs Gem LoadError  new ach "," clGem LoadError  new an_load_path "," raisGem LoadError  new  ","spGem LoadError  new c full_namGem LoadError  new  ","spGem LoadError  new c loadGem LoadError  new d_from "," requested_ specs_for  "," requested_ requested_specs  "," requested_@definition specs_for  "," rGem LoadError  new quGem LoadError  new stGem LoadError  new d_spGem LoadError  new cs ","$LOAD_PATH includGem LoadError  new ? ","spGem LoadError  new c load_paths Gem LoadError  new ach ","spec (send\n  (lvar :specs) :map) reverse flatten  each ","groups -  any? ","unloadGem LoadError  new d any? "," rGem LoadError  new placGem LoadError  new _rubygGem LoadError  new ms_paths ","spGem LoadError  new c load_paths rGem LoadError  new jGem LoadError  new ct ","spec (send\n  (lvar :specs) :map) reverse flatten  reject ","Gem LoadError  new  vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","GGem LoadError  new m RGem LoadError  new quirGem LoadError  new mGem LoadError  new nt  nGem LoadError  new w ","spGem LoadError  new c vGem LoadError  new rsion to_s ","spGem LoadError  new c vGem LoadError  new rsion ","Gem LoadError  new  namGem LoadError  new = ","GGem LoadError  new m LoadError  nGem LoadError  new w ","activatGem LoadError  new d_spGem LoadError  new c vGem LoadError  new rsion ","Gem  loaded_specs []  version ","Bundler  rubygems loaded_specs  version ","activatGem LoadError  new d_spGem LoadError  new c namGem LoadError  new  ","Gem  loaded_specs []  name ","Bundler  rubygems loaded_specs  name ","activatGem LoadError  new d_spGem LoadError  new c vGem LoadError  new rsion != ","Gem  loaded_specs []  version != ","Bundler  rubygems loaded_specs  version != ","Gem  loaded_ specs_for  [] ","Gem  loaded_ requested_specs  [] ","Gem  loaded_@definition specs_for  [] ","GGem LoadError  new m  loadGem LoadError  new d_spGem LoadError  new cs [] "," sGem LoadError  new tup_Gem LoadError  new nvironmGem LoadError  new nt ","@definition  specs_for _for ","@definition  requested_specs _for ","@definition @definition specs_for _for ","@dGem LoadError  new finition spGem LoadError  new cs_for ","Gem LoadError  new  rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","Gem LoadError  new  rGem LoadError  new spond_to? ","BundlGem LoadError  new r  rubygGem LoadError  new ms mark_loadGem LoadError  new d ","BundlGem LoadError  new r  rubygGem LoadError  new ms ","Bundler  rubygems loaded_ specs_for  ","Bundler  rubygems loaded_ requested_specs  ","Bundler  rubygems loaded_@definition specs_for  ","BundlGem LoadError  new r  rubygGem LoadError  new ms loadGem LoadError  new d_spGem LoadError  new cs ","BundlGem LoadError  new r  rubygGem LoadError  new ms rGem LoadError  new placGem LoadError  new _Gem LoadError  new ntrypoints "," sGem LoadError  new tup_manpath ","$LOAD_PATH insGem LoadError  new rt ","BundlGem LoadError  new r  rubygGem LoadError  new ms load_path_insGem LoadError  new rt_indGem LoadError  new x ","Bundler  rubygems load_path_Bundler  rubygems load_path_insert_index  ","SharGem LoadError  new dHGem LoadError  new lpGem LoadError  new rs  sGem LoadError  new t_bundlGem LoadError  new _Gem LoadError  new nvironmGem LoadError  new nt ","(send\n  (lvar : specs_for ) :map) reverse flatten ","(send\n  (lvar : requested_specs ) :map) reverse flatten ","(send\n  (lvar :@definition specs_for ) :map) reverse flatten ","(sGem LoadError  new nd\n  (lvar :spGem LoadError  new cs) :map) rGem LoadError  new vGem LoadError  new rsGem LoadError  new  flattGem LoadError  new n ","(send\n  (lvar : specs_for ) :map) reverse ","(send\n  (lvar : requested_specs ) :map) reverse ","(send\n  (lvar :@definition specs_for ) :map) reverse ","(sGem LoadError  new nd\n  (lvar :spGem LoadError  new cs) :map) rGem LoadError  new vGem LoadError  new rsGem LoadError  new  "," specs_for  map "," requested_specs  map ","@definition specs_for  map ","spGem LoadError  new cs map "," chGem LoadError  new ck_for_activatGem LoadError  new d_spGem LoadError  new c! "," check_for_Gem  loaded_specs [] ! "," check_for_Bundler  rubygems loaded_specs ! ","@dGem LoadError  new finition Gem LoadError  new nsurGem LoadError  new _Gem LoadError  new quivalGem LoadError  new nt_gGem LoadError  new mfilGem LoadError  new _and_lockfilGem LoadError  new  ","BundlGem LoadError  new r  sGem LoadError  new ttings [] ","BundlGem LoadError  new r  sGem LoadError  new ttings ","BundlGem LoadError  new r  frozGem LoadError  new n? ","BundlGem LoadError  new r  frozGem LoadError  new n_bundlGem LoadError  new ? ","BundlGem LoadError  new r  rubygGem LoadError  new ms add_to_load_path "]}," Bundler Environment group_spec":{"type":"method","name":"group_spec","children":[],"call":[" group_spec ","s name == ","d name ","s name ","specs find ","(send\n  (send\n    (lvar :spec) :dependencies) :select) each ","d type != ","d type ","spec dependencies select ","spec dependencies ","spec groups uniq! ","spec groups ","spec groups concat ","(send\n  (send\n    (lvar :spec) :bundler_dependencies) :select) each ","spec bundler_dependencies select ","spec bundler_dependencies "]}," Bundler Environment group_specs":{"type":"method","name":"group_specs","children":[],"call":[" group_spec ","d groups ","s name == ","d name ","s name ","specs find "," dependencies each "," dependencies "]}," Bundler Dsl _deprecated_options":{"type":"method","name":"_deprecated_options","children":[],"call":[" raise ","options include? "]}," Bundler Dsl deprecate":{"type":"method","name":"deprecate","children":[],"call":[]}," Thor handle_argument_error":{"type":"method","name":"handle_argument_error","children":[],"call":[" raise ","task formatted_usage inspect ","task formatted_usage "," banner_base == "," banner_base ","task name inspect ","task name "]}," Thor Util find_class_and_task_by_namespace!":{"type":"method","name":"find_class_and_task_by_namespace!","children":[],"call":[]}," Thor Util find_class_and_task_by_namespace":{"type":"method","name":"find_class_and_task_by_namespace","children":[],"call":[]}," Thor Task handle_no_method_error?":{"type":"method","name":"handle_no_method_error?","children":[],"call":["error message =~ ","Regexp  escape ","instance to_s "," name ","error message "," not_debugging? "]}," Thor Task handle_argument_error?":{"type":"method","name":"handle_argument_error?","children":[],"call":[" sans_backtrace empty? "," sans_backtrace ","error backtrace ","error message =~ ","error message "," not_debugging? ","RUBY_VERSION  >= ","saned size == ","saned size ","saned empty? "," sans_backtrace  size == "," sans_backtrace  size "," sans_backtrace  empty? "]}," Thor Task not_debugging?":{"type":"method","name":"not_debugging?","children":[],"call":["(and\n  (send\n    (send\n      (lvar :instance) :class) :respond_to?\n    (sym :debugging))\n  (send\n    (send\n      (lvar :instance) :class) :debugging)) ! ","instance class debugging ","instance class ","instance class respond_to? "]}," Thor Options check_unknown!":{"type":"method","name":"check_unknown!","children":[],"call":[" raise ","@unknown join ","@unknown empty? ","ARGV  include? "," fail ","unknown join ","unknown empty? ","str =~ ","@extra select ","UnknownArgumentError  new ","@switches keys ","to_check select ","@extra [] ","@extra []  select "]}," Thor Base ClassMethods banner_base":{"type":"method","name":"banner_base","children":[],"call":["File  basename ","$0 split first ","$0 split "]}," Thor Base ClassMethods handle_no_task_error":{"type":"method","name":"handle_no_task_error","children":[],"call":[" raise ","task inspect "," namespace inspect "," namespace "," banner_base == "," banner_base "]}," Thor Base ClassMethods check_unknown_options?":{"type":"method","name":"check_unknown_options?","children":[],"call":[" check_unknown_options ! ! "," check_unknown_options ! "," check_unknown_options "]}," Thor Base ClassMethods check_unknown_options!":{"type":"method","name":"check_unknown_options!","children":[],"call":[]}," Bundler Source Path generate_bin":{"type":"method","name":"generate_bin","children":[],"call":["Bundler  ui warn ","e message ","Bundler  ui ","spec emails join ","spec emails ","spec emails empty? ! ","spec emails empty? ","spec extensions empty? ! ","spec extensions empty? ","spec extensions ","spec full_gem_path ","spec name ","installer generate_bin ","installer build_extensions ","installer instance_eval ","Gem Installer  new ","Gem  dir ","File  join ","Gem Builder  new build ","Gem Builder  new ","Dir  chdir ","spec email ","spec email empty? ! ","spec email empty? ","FileUtils  rm_rf ","File  exist? ","spec files= ","(send\n  (send\n    (lvar :spec) :files) :map) compact ","Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  new ","File  directory? ","spec files map ","spec files ","Gem Installer  allocate ","Installer  new "," run_hooks ","Path Installer  new ","SharedHelpers  chdir "," build_extensions ","installer post_install ","p =~ ","options [] "," extension_cache_path ","Bundler  rubygems build_gem ","Bundler  rubygems ","gem_dir join ","(str \"\\\\A\") match? ","Gem Installer  new  generate_bin ","Gem Installer  allocate  generate_bin ","Installer  new  generate_bin ","Path Installer  new  generate_bin ","Gem Installer  new  build_extensions ","Gem Installer  allocate  build_extensions ","Installer  new  build_extensions ","Path Installer  new  build_extensions ","Gem Installer  new  instance_eval ","Gem Installer  allocate  instance_eval ","Installer  new  instance_eval ","Path Installer  new  instance_eval ","Gem Installer  new  post_install ","Gem Installer  allocate  post_install ","Installer  new  post_install ","Path Installer  new  post_install ","spec full_gem_path  join ","Pathname  new  join "]}," Bundler Source Path load_spec_files":{"type":"method","name":"load_spec_files","children":[],"call":["index freeze ","index << "," default_spec ","index empty? ","spec source= ","spec loaded_from= ","file to_s ","Specification  from_gemspec "," eval ","File  read ","file basename ","Dir  chdir ","file dirname ","Pathname  new ","Dir  [] each ","Dir  [] "," path ","File  directory? ","Index  new "," raise ","file expand_path to_s ","file expand_path "," binding ","s executables= ","c basename to_s ","c basename "," path join children map "," path join children "," path join "," path join exist? ","s relative_loaded_from= ","s summary= ","s version= ","Gem Version  new ","s source= ","s name= ","Specification  new ","(str \"There was a LoadError while evaluating \") + ","Gem Specification  from_yaml ","s platform= ","Gem Specification  new ","Bundler  load_gemspec ","msg << ","RUBY_VERSION  >= ","e message ","line include? ","e backtrace find ","e backtrace ","expanded_path join children map ","expanded_path join children ","expanded_path join ","expanded_path join exist? "," path expand_path ","Bundler  root ","binaries map ","binaries reject! ","s authors= ","executables map ","executables reject! "," expanded_path ","File  exist? "," expanded_path join children "," expanded_path join "," expanded_path join exist? ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (send nil :expanded_path))\n      (str \"/\")\n      (begin\n        (ivar :@glob)))) :sort_by) each ","p split size -@ ","p split size ","p split ","Dir  [] sort_by ","message << ","String  new ","Bundler  rubygems validate ","Bundler  rubygems ","Bundler  rubygems set_installed_by_version "," validate_spec "," load_gemspec ","File  exists? "," expand ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (ivar :@glob)\n    (send nil :expanded_path)) :sort_by) each ","Gem Util  glob_files_in_dir sort_by ","Gem Util  glob_files_in_dir ","Index  new  freeze ","Index  new  << "," default_Specification  from_gemspec  "," default_Bundler  load_gemspec  "," default_ load_gemspec  ","Index  new  empty? ","Specification  from_gemspec  source= ","Bundler  load_gemspec  source= "," load_gemspec  source= ","Specification  from_gemspec  loaded_from= ","Bundler  load_gemspec  loaded_from= "," load_gemspec  loaded_from= ","Pathname  new  to_s ","Specification  from_gemSpecification  from_gemspec  ","Specification  from_gemBundler  load_gemspec  ","Specification  from_gem load_gemspec  ","Pathname  new  basename ","Pathname  new  dirname ","Pathname  new  expand_path to_s ","Pathname  new  expand_path ","s expanded_path join children = ","s  expanded_path join children = ","Bundler  load_gemSpecification  from_gemspec  ","Bundler  load_gemBundler  load_gemspec  ","Bundler  load_gem load_gemspec  ","e String  new  "," path expand_path  join children map "," expand  join children map "," path expand_path  join children "," expand  join children "," path expand_path  join "," expand  join "," path expand_path  join exist? "," expand  join exist? ","expanded_path join children  map ","expanded_path join children  reject! "," expanded_path join children  map "," expanded_path join children  reject! ","  path expand_path  ","  expand  ","  path expand_path  join children ","  expand  join children ","  path expand_path  join ","  expand  join ","  path expand_path  join exist? ","  expand  join exist? ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (send nil : path expand_path ))\n      (str \"/\")\n      (begin\n        (ivar :@glob)))) :sort_by) each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (send nil : expand ))\n      (str \"/\")\n      (begin\n        (ivar :@glob)))) :sort_by) each ","String  new  << "," validate_Specification  from_gemspec  "," validate_Bundler  load_gemspec  "," validate_ load_gemspec  "," load_gemSpecification  from_gemspec  "," load_gemBundler  load_gemspec  "," load_gem load_gemspec  ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_Pathname  new s_in_dir\n    (ivar :@glob)\n    (send nil :expanded_path)) :sort_by) each ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (ivar :@glob)\n    (send nil : path expand_path )) :sort_by) each ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (ivar :@glob)\n    (send nil : expand )) :sort_by) each ","Gem Util  glob_Pathname  new s_in_dir sort_by ","Gem Util  glob_Pathname  new s_in_dir "]}," Bundler Source Rubygems fetch_all_specs":{"type":"method","name":"fetch_all_specs","children":[],"call":["Gem SpecFetcher  new list each ","Gem SpecFetcher  new list ","Gem SpecFetcher  new ","Bundler  ui warn ","Bundler  ui "]}," Bundler Source Rubygems gem_path":{"type":"method","name":"gem_path","children":[],"call":["spec full_name ","Gem  dir "]}," Bundler Source Rubygems fetch":{"type":"method","name":"fetch","children":[],"call":["Gem RemoteFetcher  fetcher download ","Gem  dir "," uri ","Gem RemoteFetcher  fetcher ","Bundler  ui debug ","Bundler  ui ","spec fetch_platform ","spec __swap__ ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path "," download_gem_from_uri ","@spec_fetch_map [] ","spec full_name ","action call ","Bundler  rubygems spec_from_gem ","Bundler  rubygems ","spec is_a? ","Gem Format  from_file_by_path spec pec fetch_platform ","Bundler  rubygems spec_from_gem pec fetch_platform ","Gem Format  from_file_by_path spec pec __Gem Format  from_file_by_path spec wap__ ","Bundler  rubygems spec_from_gem pec __Bundler  rubygems spec_from_gem wap__ ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec pec ","Gem Format  from_file_by_path Bundler  rubygems spec_from_gem pec ","Gem Format  from_file_by_ download_gem_from_uri  spec ","Gem Format  from_file_by_ download_gem_from_uri  ","@Gem Format  from_file_by_path spec pec_fetch_map [] ","@Bundler  rubygems spec_from_gem pec_fetch_map [] ","Gem Format  from_file_by_path spec pec full_name ","Bundler  rubygems spec_from_gem pec full_name ","@spec_fetch_map []  call ","Bundler  rubygemGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec pec_from_gem ","Bundler  rubygemBundler  rubygems spec_from_gem  Bundler  rubygems spec_from_gem pec_from_gem ","Bundler  rubygemGem Format  from_file_by_path spec  ","Bundler  rubygemBundler  rubygems spec_from_gem  ","Gem Format  from_file_by_path spec pec iGem Format  from_file_by_path spec _a? ","Bundler  rubygems spec_from_gem pec iBundler  rubygems spec_from_gem _a? "]}," Bundler SharedHelpers cripple_rubygems":{"type":"method","name":"cripple_rubygems","children":[{"type":"method","name":"gem","children":[],"asgn":[],"call":[]}],"call":["File  join ","spec bindir ","spec full_gem_path "," raise ","spec full_name ","spec default_executable ","s name == ","s name ","specs find ","s executables include? ","s executables ","gem_class send ","source_index add_specs ","source_index spec_dirs= ","Gem SourceIndex  new ","source_index_class send ","e version_requirement= ","dep requirement ","e name= ","dep name ","Gem LoadError  new ","dep !~ ","spec nil? ","Gem Dependency  new ","dep respond_to? ","reqs pop ","reqs last is_a? ","reqs last ","executables include? ","File  basename "," caller first split first "," caller first split "," caller first "," caller "," Kernel  send ","Gem  source_index "," private "," Kernel  class_eval ","(send\n  (lvar :specs) :map) flatten ","specs map "," reverse_rubygems_kernel_mixin ","File  exist? ","File  dirname ","spec loaded_from ","dep version_requirements ","Gem  clear_paths ","ENV  [] ","exec_name == ","e requirement= ","e respond_to? "," add_specs ","Gem SourceIndex  send ","Gem Version  new >= ","Gem Version  new "," spec_dirs= ","FilGem LoadError  new   join ","spGem LoadError  new c bindir ","spGem LoadError  new c full_gGem LoadError  new m_path "," raisGem LoadError  new  ","spGem LoadError  new c full_namGem LoadError  new  ","spGem LoadError  new c dGem LoadError  new fault_Gem LoadError  new xGem LoadError  new cutablGem LoadError  new  ","s namGem LoadError  new  == ","s namGem LoadError  new  ","spGem LoadError  new cs find ","s Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s includGem LoadError  new ? ","s (send\n  (lvar :specs) :map) flatten  include? ","s Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s ","s (send\n  (lvar :specs) :map) flatten  ","gGem LoadError  new m_class sGem LoadError  new nd ","Gem SourceIndex  new  add_specs ","sourcGem LoadError  new _indGem LoadError  new x add_spGem LoadError  new cs ","Gem SourceIndex  new  spec_dirs= ","sourcGem LoadError  new _indGem LoadError  new x spGem LoadError  new c_dirs= ","GGem LoadError  new m SourcGem LoadError  new IndGem LoadError  new x  nGem LoadError  new w ","Gem SourceIndex  new _class send ","sourcGem LoadError  new _indGem LoadError  new x_class sGem LoadError  new nd ","Gem LoadError  new  vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","dGem LoadError  new p rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt ","Gem Dependency  new  requirement ","Gem LoadError  new  namGem LoadError  new = ","dGem LoadError  new p namGem LoadError  new  ","Gem Dependency  new  name ","GGem LoadError  new m LoadError  nGem LoadError  new w ","dGem LoadError  new p !~ ","Gem Dependency  new  !~ ","spGem LoadError  new c nil? ","GGem LoadError  new m DGem LoadError  new pGem LoadError  new ndGem LoadError  new ncy  nGem LoadError  new w ","dGem LoadError  new p rGem LoadError  new spond_to? ","Gem Dependency  new  respond_to? ","rGem LoadError  new qs pop ","rGem LoadError  new qs last is_a? ","rGem LoadError  new qs last ","Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s includGem LoadError  new ? ","(send\n  (lvar :specs) :map) flatten  include? ","FilGem LoadError  new   basGem LoadError  new namGem LoadError  new  "," callGem LoadError  new r first split first "," callGem LoadError  new r first split "," callGem LoadError  new r first "," callGem LoadError  new r "," KGem LoadError  new rnGem LoadError  new l  sGem LoadError  new nd ","Gem  Gem SourceIndex  new  ","GGem LoadError  new m  sourcGem LoadError  new _indGem LoadError  new x "," privatGem LoadError  new  "," KGem LoadError  new rnGem LoadError  new l  class_Gem LoadError  new val ","(sGem LoadError  new nd\n  (lvar :spGem LoadError  new cs) :map) flattGem LoadError  new n ","spGem LoadError  new cs map "," rGem LoadError  new vGem LoadError  new rsGem LoadError  new _rubygGem LoadError  new ms_kGem LoadError  new rnGem LoadError  new l_mixin ","FilGem LoadError  new   Gem LoadError  new xist? ","FilGem LoadError  new   dirnamGem LoadError  new  ","spGem LoadError  new c loadGem LoadError  new d_from ","dGem LoadError  new p vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nts ","Gem Dependency  new  version_requirements ","GGem LoadError  new m  clGem LoadError  new ar_paths ","spec default_executable  == ","Gem LoadError  new xGem LoadError  new c_namGem LoadError  new  == ","Gem LoadError  new  rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","Gem LoadError  new  rGem LoadError  new spond_to? "," add_spGem LoadError  new cs ","GGem LoadError  new m SourcGem LoadError  new IndGem LoadError  new x  sGem LoadError  new nd ","GGem LoadError  new m VGem LoadError  new rsion  nGem LoadError  new w >= ","GGem LoadError  new m VGem LoadError  new rsion  nGem LoadError  new w "," spGem LoadError  new c_dirs= "]}," Bundler SharedHelpers reverse_rubygems_kernel_mixin":{"type":"method","name":"reverse_rubygems_kernel_mixin","children":[],"call":[" private_method_defined? "," Kernel  class_eval "," require "]}," Bundler SharedHelpers clean_load_path":{"type":"method","name":"clean_load_path","children":[],"call":["$LOAD_PATH uniq! ","p include? ","Gem  path any? ","Gem  path ","p != ","File  dirname ","File  expand_path include? ","File  expand_path ","$LOAD_PATH reject! ","p =~ ","File  expand_path =~ ","Bundler  rubygems gem_path any? ","Bundler  rubygems gem_path ","Bundler  rubygems ","Regexp  escape ","loaded_gem_paths delete ","Bundler  rubygems loaded_gem_paths ","File  expand_path start_with? "," bundler_ruby_lib "," resolve_path start_with? "," resolve_path ","lf start_with? ","$LOADED_FEATURES any? ","File  dirnaFile  expand_path  ","Bundler  rubygems loaded_gem_paths  delete ","Bundler  rubygems Bundler  rubygems loaded_gem_paths  "]}," Bundler SharedHelpers find_gemfile":{"type":"method","name":"find_gemfile","children":[],"call":["File  expand_path ","File  file? ","File  join ","current == ","File  directory? ! ","File  directory? ","Dir  pwd ","ENV  [] ","given empty? ! ","given empty? "," find_file ","names reverse! ","Bundler  feature_flag prefer_gems_rb? ","Bundler  feature_flag "," gemfile_names ","SharedHelpers  pwd ","File  expand_path  == ","ENV  []  empty? ! ","ENV  []  empty? "," gemfile_names  reverse! "," gemfile_ gemfile_names  "]}," Bundler SharedHelpers in_bundle?":{"type":"method","name":"in_bundle?","children":[],"call":[" find_gemfile "]}," Bundler SharedHelpers default_gemfile":{"type":"method","name":"default_gemfile","children":[],"call":["Pathname  new "," raise "," find_gemfile ","Pathname  new untaint ","Pathname  new untaint expand_path ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar :gemfile)) :tap) expand_path ","x untaint ","RUBY_VERSION  < ","Pathname  new tap "," find_ find_gemfile  ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar : find_gemfile )) :tap) expand_path "]}," Gem Dependency requirement":{"type":"method","name":"requirement","children":[],"call":[" version_requirements "]}," Bundler Settings without":{"type":"method","name":"without","children":[],"call":["w to_sym "," [] split map "," [] split "," [] "," get_array "]}," Bundler Settings without=":{"type":"method","name":"without=","children":[],"call":[" []= ","array join "," without empty? "," without ","array empty? "," set_array "]}," Bundler Runtime specs_for_lock_file":{"type":"method","name":"specs_for_lock_file","children":[],"call":["hash []= ","s load_paths ","s loaded_from to_s ","s loaded_from "," specs_for map "," specs_for ","spec load_paths ","spec groups ","spec version to_s ","spec version ","spec name ","d name == ","d name ","@definition dependencies find ","@definition dependencies "," specs map "," specs "]}," Bundler Runtime gemfile_fingerprint":{"type":"method","name":"gemfile_fingerprint","children":[],"call":["Digest SHA1  hexdigest ","File  read "," root "]}," Bundler Runtime rb_lock_file":{"type":"method","name":"rb_lock_file","children":[],"call":[" root join "," root "]}," Bundler Runtime cache":{"type":"method","name":"cache","children":[],"call":["FileUtils  cp ","File  expand_path == ","File  expand_path ","File  dirname ","Bundler  ui info ","File  basename ","Bundler  ui "," raise ","spec full_name ","File  exist? ","possibilities find ","Gem  path map ","Gem  path ","spec source is_a? ","spec source "," specs each "," specs ","FileUtils  mkdir_p "," root "," cache_path ","p to_s "," prune_cache ","Bundler  settings [] ","Bundler  settings ","spec source cache ","spec source respond_to? ","spec name == ","spec name ","File  exists? ","FileUtils  touch ","FileUtils  rm_rf ","Dir  [] each ","Dir  [] ","cache_path join ","spec source send ","Bundler  settings app_cache_path ","Bundler  app_cache ","SharedHelpers  filesystem_access ","spec source class == ","spec source class ","gemspec name ","gemspec nil? ","gemspec_cache_hash values first ","gemspec_cache_hash values ","Bundler  instance_variable_get ","Dir  glob empty? ! ","Dir  glob empty? ","Dir  glob ","specs_to_cache each ","@definition resolve materialized_for_all_platforms ","@definition resolve "," cache_path join ","Bundler  ui warn "," Bundler  app_cache  ","  cache_path  ","Bundler  app_cache  join "," cache_path  join ","Bundler  settings app_Bundler  app_cache  ","Bundler  settings app_ cache_path  ","gemspec_cache_hash values first  name ","gemspec_cache_hash values first  nil? ","gemspec_cache_hash values first _cache_hash values first ","Bundler  instance_variable_get  values first ","gemspec_cache_hash values first _cache_hash values ","Bundler  instance_variable_get  values "," specs  each ","@definition resolve materialized_for_all_platforms  each "," Bundler  app_cache  join ","  cache_path  join "]}," Bundler Runtime actual_dependencies":{"type":"method","name":"actual_dependencies","children":[],"call":["@definition actual_dependencies "]}," Bundler Runtime initialize":{"type":"method","name":"initialize","children":[],"call":[" write_rb_lock "," locked? ","(const\n  (const nil :Bundler) :ENV_LOADED) ! "," lock "]}," Gem Specification implicit_rake_dependency?":{"type":"method","name":"implicit_rake_dependency?","children":[],"call":["e =~ "," extensions any? "," extensions "]}," Gem Specification bundler_dependencies":{"type":"method","name":"bundler_dependencies","children":[],"call":["original << ","Dependency  new "," implicit_rake_dependency? "," dependencies "," dependencies  << "]}," Bundler Installer actual_dependencies":{"type":"method","name":"actual_dependencies","children":[],"call":["@definition actual_dependencies "]}," Bundler Index from_cached_specs":{"type":"method","name":"from_cached_specs","children":[],"call":[]}," Bundler Definition Locked hash":{"type":"method","name":"hash","children":[],"call":["@details [] "]}," Bundler Definition groups":{"type":"method","name":"groups","children":[],"call":["(send\n  (send nil :dependencies) :map) flatten uniq ","(send\n  (send nil :dependencies) :map) flatten ","d groups "," dependencies map "," dependencies "," dependencies map flatten uniq "," dependencies map flatten "]}," Bundler CLI printable_tasks":{"type":"method","name":"printable_tasks","children":[],"call":[]}," Bundler CLI remove_lockfiles":{"type":"method","name":"remove_lockfiles","children":[],"call":["FileUtils  rm_f ","Bundler  root "]}," Bundler CLI locked?":{"type":"method","name":"locked?","children":[],"call":["File  exist? ","Bundler  root "]}," Bundler CLI version":{"type":"method","name":"version","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  feature_flag print_only_version_number? ","Bundler  feature_flag ","cli_help ! ","BuildMetadata  git_commit_sha ","BuildMetadata  built_at ","ARGV  include? "," current_command name == "," current_command name "," current_command "," current_command name ==  ! "]}," Bundler CLI package":{"type":"method","name":"package","children":[],"call":[" cache "," lock ","Bundler  load cache ","Bundler  load "," install ","Package  new run ","Package  new "," options "," require "," setup_cache_all ","Bundler  ui level= ","Bundler  ui "," options [] ","Pathname  new ","Bundler  settings []= ","File  expand_path ","Bundler  settings "," require_relative "]}," Thor Shell with_padding":{"type":"method","name":"with_padding","children":[],"call":[" shell padding "," shell "]}," Thor Options current_is_switch_formatted?":{"type":"method","name":"current_is_switch_formatted?","children":[],"call":[" switch_formatted? "," peek "]}," Thor Options switch_formatted?":{"type":"method","name":"switch_formatted?","children":[],"call":[]}," Thor Arguments last?":{"type":"method","name":"last?","children":[],"call":["@pile empty? "]}," Thor Invocation invoke_with_padding":{"type":"method","name":"invoke_with_padding","children":[],"call":[" invoke "," with_padding "]}," Bundler Source Git load_spec_files":{"type":"method","name":"load_spec_files","children":[],"call":[" raise "," to_s "," cache_path exist? "," cache_path ","Bundler  ui trace ","Bundler  ui "]}," Gem Dependency to_yaml_properties":{"type":"method","name":"to_yaml_properties","children":[],"call":["(str \"@source\") include? ","p to_s "," to_yaml_properties_before_crazy reject "," to_yaml_properties_before_crazy "," instance_variables reject "," instance_variables "]}," Bundler CLI locate_gem":{"type":"method","name":"locate_gem","children":[],"call":["spec full_gem_path "," raise ","s name == ","s name ","Bundler  load specs find ","Bundler  load specs ","Bundler  load ","Bundler  runtime specs find ","Bundler  runtime specs ","Bundler  runtime ","File  expand_path ","spec name == ","spec name "," not_found_message "]}," Bundler CLI open":{"type":"method","name":"open","children":[],"call":["Bundler  ui info ","Bundler  ui "," system "," locate_gem ","editor empty? ","editor nil? ","ENV  [] ","e empty? ! ","e empty? ","e nil? ! ","e nil? ","(send\n  (const nil :ENV) :[]\n  (str \"VISUAL\")) find ","(send\n  (const nil :ENV) :[]\n  (str \"BUNDLER_EDITOR\")) find ","Dir  chdir ","Open  new run ","Open  new "," options "," require ","spec full_gem_path "," select_spec "," require_relative ","ENV  []  empty? ","ENV  []  nil? ","spec full_ locate_gem  "," select_spec  full_gem_path ","spec spec full_gem_path  "," select_ select_spec  "]}," Bundler SpecSet tsort_each_child":{"type":"method","name":"tsort_each_child","children":[],"call":[" lookup [] ","d name "," lookup ","d type == ","d type ","(send\n  (send\n    (lvar :s) :dependencies) :sort_by) each ","s dependencies sort_by ","s dependencies "," lookup [] each ","s dependencies sort_by each "]}," Bundler SpecSet tsort_each_node":{"type":"method","name":"tsort_each_node","children":[],"call":["@specs each ","@specs sort_by each ","@specs sort_by "]}," Bundler SpecSet lookup":{"type":"method","name":"lookup","children":[],"call":["h []= ","s name == ","s name ","@specs find ","Hash  new ","lookup [] << ","lookup [] ","specs reverse_each ","s platform to_s ","s platform ","s platform to_s == ","@specs sort_by ","Index  sort_specs reverse_each ","Index  sort_specs ","@specs each "]}," Bundler SpecSet sorted":{"type":"method","name":"sorted","children":[],"call":["(send\n  (array\n    (send\n      (send nil :lookup) :[]\n      (str \"rake\"))) :+\n  (send nil :tsort)) compact uniq ","(send\n  (array\n    (send\n      (send nil :lookup) :[]\n      (str \"rake\"))) :+\n  (send nil :tsort)) compact ","(send\n  (send nil :lookup) :[]\n  (str \"rake\")) + "," tsort "," lookup [] "," lookup ","(send\n  (array\n    (lvar :rake)) :+\n  (send nil :tsort)) compact uniq ","(send\n  (array\n    (lvar :rake)) :+\n  (send nil :tsort)) compact ","(lvar :rake) + ","s name == ","s name ","@specs find "," raise ","cgems [] "," extract_circular_gems "," extract_circular_gems  [] "]}," Bundler SpecSet append_subgraph":{"type":"method","name":"append_subgraph","children":[],"call":[" append_subgraph "," lookup [] ","dep name "," lookup ","dep type == ","dep type ","current dependencies each ","current dependencies ","specs []= ","current name ","specs [] "]}," Bundler SpecSet to_a":{"type":"method","name":"to_a","children":[],"call":[" sorted dup "," sorted "]}," Bundler SpecSet for":{"type":"method","name":"for","children":[],"call":["specs [] ","s name "," sorted select "," sorted "," append_subgraph "," lookup [] ","dep name ","dep respond_to? "," lookup ","deps flatten each ","deps flatten ","SpecSet  new ","specs << "," lookup [] first ","deps << ","DepProxy  new ","dep __platform ","d type == ","d type ","spec dependencies each ","spec dependencies ","handled []= ","s match_platform ","Gem Platform  match ","s platform "," lookup [] find ","skip include? ","handled [] ","deps shift ","deps empty? ","skip << ","dependencies dup "," spec_for_dependency "," loop "," raise ","handled add? ! ","handled add? ","Set  new ","others join ","others empty? ! ","others empty? ","DepProxy  get_proxy ","specs_for_dep first dependencies each ","specs_for_dep first dependencies ","specs_for_dep first ","specs_for_dep any? ","handled << ","handled include? ","dep name == ","d __platform == ","d __platform ","d name == ","d name ","handled any? ","specs uniq! ","specs concat "," specs_for_dependency ","handled [] << ","handled [] any? ","h []= ","Hash  new ","Dependency  new ","d requirement ","IncompleteSpecification  new ","dep [] ","handled key? ","dep force_ruby_platform ","dependencies product map ","dependencies product ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h ","(str \"bundler\") product map ","(str \"bundler\") product ","dep [] name ","specs uniq ","LazySpecification  new "," lookup [] any? "," lookup [] empty? ","d name != "," lookup [] first s [] "," spec_for_dependency s [] ","s dep [] name  "," sorteDepProxy  new  select "," sorteDepProxy  get_proxy  select "," sorteDepProxy  new  "," sorteDepProxy  get_proxy  "," appenDepProxy  new _subgraph "," appenDepProxy  get_proxy _subgraph ","DepProxy  new ep name ","DepProxy  get_proxy ep name ","deps shift  name ","dep dep [] name  ","DepProxy  new ep responDepProxy  new _to? ","DepProxy  get_proxy ep responDepProxy  get_proxy _to? ","deps shift  respond_to? ","DepProxy  new eps flatten each ","DepProxy  get_proxy eps flatten each ","deps shift s flatten each ","dependencies dup  flatten each ","dependencies product  flatten each ","DepProxy  new eps flatten ","DepProxy  get_proxy eps flatten ","deps shift s flatten ","dependencies dup  flatten ","dependencies product  flatten "," lookup [] first s << "," spec_for_dependency s << ","DepProxy  new eps << ","DepProxy  get_proxy eps << ","deps shift s << ","dependencies dup  << ","dependencies product  << ","DepProxy  new ep __platform ","DepProxy  get_proxy ep __platform ","deps shift  __platform ","dep __dep []  ","DepProxy  new  type == ","DepProxy  get_proxy  type == ","DepProxy  new  type ","DepProxy  get_proxy  type "," lookup [] first  dependencies each "," spec_for_dependency  dependencies each ","spec DepProxy  new epenDepProxy  new encies each ","spec DepProxy  get_proxy epenDepProxy  get_proxy encies each ","spec deps shift endencies each "," lookup [] first  dependencies "," spec_for_dependency  dependencies ","spec DepProxy  new epenDepProxy  new encies ","spec DepProxy  get_proxy epenDepProxy  get_proxy encies ","spec deps shift endencies ","hanDepProxy  new leDepProxy  new  []= ","hanDepProxy  get_proxy leDepProxy  get_proxy  []= ","Set  new  []= ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  []= ","s match_dep []  ","s dep []  "," lookup [] finDepProxy  new  "," lookup [] finDepProxy  get_proxy  ","skip incluDepProxy  new e? ","skip incluDepProxy  get_proxy e? ","hanDepProxy  new leDepProxy  new  [] ","hanDepProxy  get_proxy leDepProxy  get_proxy  [] ","Set  new  [] ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  [] ","DepProxy  new eps shift ","DepProxy  get_proxy eps shift ","deps shift s shift ","dependencies dup  shift ","dependencies product  shift ","DepProxy  new eps empty? ","DepProxy  get_proxy eps empty? ","deps shift s empty? ","dependencies dup  empty? ","dependencies product  empty? ","DepProxy  new epenDepProxy  new encies DepProxy  new up ","DepProxy  get_proxy epenDepProxy  get_proxy encies DepProxy  get_proxy up ","deps shift endencies dup ","  lookup [] first _for_dependency ","  spec_for_dependency _for_dependency "," spec_for_DepProxy  new epenDepProxy  new ency "," spec_for_DepProxy  get_proxy epenDepProxy  get_proxy ency "," spec_for_deps shift endency ","hanDepProxy  new leDepProxy  new  aDepProxy  new DepProxy  new ? ! ","hanDepProxy  get_proxy leDepProxy  get_proxy  aDepProxy  get_proxy DepProxy  get_proxy ? ! ","Set  new  add? ! ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  add? ! ","hanDepProxy  new leDepProxy  new  aDepProxy  new DepProxy  new ? ","hanDepProxy  get_proxy leDepProxy  get_proxy  aDepProxy  get_proxy DepProxy  get_proxy ? ","Set  new  add? ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  add? "," lookup []  join "," lookup []  empty? ! "," lookup []  empty? "," lookup [] first s_for_dep first dependencies each "," spec_for_dependency s_for_dep first dependencies each ","specs_for_DepProxy  new ep first DepProxy  new epenDepProxy  new encies each ","specs_for_DepProxy  get_proxy ep first DepProxy  get_proxy epenDepProxy  get_proxy encies each ","specs_for_deps shift  first deps shift endencies each "," spec_for_dependency  first dependencies each "," specs_for_dependency  first dependencies each "," lookup [] first s_for_dep first dependencies "," spec_for_dependency s_for_dep first dependencies ","specs_for_DepProxy  new ep first DepProxy  new epenDepProxy  new encies ","specs_for_DepProxy  get_proxy ep first DepProxy  get_proxy epenDepProxy  get_proxy encies ","specs_for_deps shift  first deps shift endencies "," spec_for_dependency  first dependencies "," specs_for_dependency  first dependencies "," lookup [] first s_for_dep first "," spec_for_dependency s_for_dep first ","specs_for_DepProxy  new ep first ","specs_for_DepProxy  get_proxy ep first ","specs_for_deps shift  first "," spec_for_dependency  first "," specs_for_dependency  first "," lookup [] first s_for_dep any? "," spec_for_dependency s_for_dep any? ","specs_for_DepProxy  new ep any? ","specs_for_DepProxy  get_proxy ep any? ","specs_for_deps shift  any? "," spec_for_dependency  any? "," specs_for_dependency  any? ","hanDepProxy  new leDepProxy  new  << ","hanDepProxy  get_proxy leDepProxy  get_proxy  << ","Set  new  << ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  << ","hanDepProxy  new leDepProxy  new  incluDepProxy  new e? ","hanDepProxy  get_proxy leDepProxy  get_proxy  incluDepProxy  get_proxy e? ","Set  new  include? ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  include? ","DepProxy  new ep name == ","DepProxy  get_proxy ep name == ","deps shift  name == ","dep dep [] name  == ","DepProxy  new  __platform == ","DepProxy  get_proxy  __platform == ","d __dep []  == ","DepProxy  new  __platform ","DepProxy  get_proxy  __platform ","d __dep []  ","DepProxy  new  name == ","DepProxy  get_proxy  name == ","d dep [] name  == ","DepProxy  new  name ","DepProxy  get_proxy  name ","d dep [] name  ","hanDepProxy  new leDepProxy  new  any? ","hanDepProxy  get_proxy leDepProxy  get_proxy  any? ","Set  new  any? ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  any? "," lookup [] first s uniq! "," spec_for_dependency s uniq! "," lookup [] first s concat "," spec_for_dependency s concat ","  lookup [] first s_for_dependency ","  spec_for_dependency s_for_dependency "," specs_for_DepProxy  new epenDepProxy  new ency "," specs_for_DepProxy  get_proxy epenDepProxy  get_proxy ency "," specs_for_deps shift endency ","  spec_for_dependency endency ","  specs_for_dependency endency ","hanDepProxy  new leDepProxy  new  [] << ","hanDepProxy  get_proxy leDepProxy  get_proxy  [] << ","Set  new  [] << ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  [] << ","hanDepProxy  new leDepProxy  new  [] any? ","hanDepProxy  get_proxy leDepProxy  get_proxy  [] any? ","Set  new  [] any? ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  [] any? ","DepenDepProxy  new ency  new ","DepenDepProxy  get_proxy ency  new ","DepProxy  new  requirement ","DepProxy  get_proxy  requirement ","DepProxy  new ep [] ","DepProxy  get_proxy ep [] ","deps shift  [] ","hanDepProxy  new leDepProxy  new  key? ","hanDepProxy  get_proxy leDepProxy  get_proxy  key? ","Set  new  key? ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :platforms)) :map) to_h  key? ","DepProxy  new ep force_ruby_platform ","DepProxy  get_proxy ep force_ruby_platform ","deps shift  force_ruby_platform ","dep force_ruby_dep []  ","DepProxy  new epenDepProxy  new encies proDepProxy  new uct map ","DepProxy  get_proxy epenDepProxy  get_proxy encies proDepProxy  get_proxy uct map ","deps shift endencies product map ","DepProxy  new epenDepProxy  new encies proDepProxy  new uct ","DepProxy  get_proxy epenDepProxy  get_proxy encies proDepProxy  get_proxy uct ","deps shift endencies product ","(senDepProxy  new \n  (senDepProxy  new \n    (array\n      (str \"bunDepProxy  new ler\")) :proDepProxy  new uct\n    (lvar :platforms)) :map) to_h ","(senDepProxy  get_proxy \n  (senDepProxy  get_proxy \n    (array\n      (str \"bunDepProxy  get_proxy ler\")) :proDepProxy  get_proxy uct\n    (lvar :platforms)) :map) to_h ","(send\n  (send\n    (array\n      (str \"bundler\")) :product\n    (lvar :dep [] s)) :map) to_h ","(str \"bunDepProxy  new ler\") proDepProxy  new uct map ","(str \"bunDepProxy  get_proxy ler\") proDepProxy  get_proxy uct map ","(str \"bunDepProxy  new ler\") proDepProxy  new uct ","(str \"bunDepProxy  get_proxy ler\") proDepProxy  get_proxy uct ","DepProxy  new ep [] name ","DepProxy  get_proxy ep [] name ","deps shift  [] name ","dep [] dep [] name  "," lookup [] first s uniq "," spec_for_dependency s uniq ","DepProxy  new  name != ","DepProxy  get_proxy  name != ","d dep [] name  != "]}," Bundler SpecSet length":{"type":"method","name":"length","children":[],"call":["@specs length "]}," Bundler SpecSet each":{"type":"method","name":"each","children":[],"call":[" sorted each "," sorted "]}," Bundler SpecSet initialize":{"type":"method","name":"initialize","children":[],"call":["s name ","specs sort_by "]}," Bundler Installer remote_index":{"type":"method","name":"remote_index","children":[],"call":["idx use ","source specs ","Bundler  ui debug ","Bundler  ui ","rubygems each ","Index  cached_gems ","Index  installed_gems ","other each ","Source Rubygems  === "," sources partition "," sources ","Index  build "]}," Bundler Index use":{"type":"method","name":"use","children":[],"call":["@specs [] << ","@specs [] ","s name "," search_by_spec any? "," search_by_spec ","other each ","dupes any? "," << ","@all_specs []= ","(lvar :s) + ","dupes << ","dupes empty? ! ","dupes empty? "," search_by_spec  any? "," search_by_spec  << "," search_by_spec  empty? ! "," search_by_spec  empty? "]}," Bundler Index system_cached_gems":{"type":"method","name":"system_cached_gems","children":[],"call":[]}," Bundler Index application_cached_gems":{"type":"method","name":"application_cached_gems","children":[],"call":[]}," Bundler Index cached_gems":{"type":"method","name":"cached_gems","children":[],"call":[]}," Bundler Index installed_gems":{"type":"method","name":"installed_gems","children":[],"call":[]}," Bundler Index build":{"type":"method","name":"build","children":[],"call":[]}," Bundler Environment autorequires_for_groups":{"type":"method","name":"autorequires_for_groups","children":[],"call":["h []= ","autorequires [] ","groups inject ","groups empty? ","autorequires [] << ","dep name ","dep autorequire each ","dep autorequire ","dep groups each ","dep groups ","ordered_deps each ","ordered_deps << ","ordered_deps include? ! ","ordered_deps include? ","d name == ","g name ","d name ","@definition dependencies find ","@definition dependencies ","specs each "," requested_specs "," specs_for ","groups any? ","Hash  new ","g to_sym ","groups map! "," requested_specs  each "," specs_for  each "," requested_ requested_specs  "," requested_ specs_for  ","  requested_specs _for ","  specs_for _for "]}," Bundler Environment specs_for_lock_file":{"type":"method","name":"specs_for_lock_file","children":[],"call":["hash []= ","s loaded_from to_s ","s loaded_from ","s to_ruby ","s virtual ","s respond_to? ","s load_paths ","s name "," requested_specs map "," requested_specs ","s relative_loaded_from "]}," Bundler Environment gemfile_fingerprint":{"type":"method","name":"gemfile_fingerprint","children":[],"call":["Digest SHA1  hexdigest ","File  read "," root "]}," Bundler Environment rb_lock_file":{"type":"method","name":"rb_lock_file","children":[],"call":[" root join "," root "]}," Bundler Environment runtime_gems":{"type":"method","name":"runtime_gems","children":[],"call":["i use ","Index  installed_gems ","s local_specs ","s respond_to? "," sources each "," sources ","Index  build "]}," Bundler Environment requested_specs":{"type":"method","name":"requested_specs","children":[],"call":[" specs_for ","groups any? ","g to_sym ","groups map! ","@definition groups - ","Bundler  settings without ","Bundler  settings ","@definition groups ","@definition requested_specs ","@definition groups -  any? ","@definition groups -  map! ","@definition @definition groups -  - ","@definition @definition groups -  "]}," Bundler Environment resolve_remotely":{"type":"method","name":"resolve_remotely","children":[],"call":[" raise "]}," Bundler Environment resolve_locally":{"type":"method","name":"resolve_locally","children":[],"call":[" resolve "," index "]}," Bundler Environment resolve":{"type":"method","name":"resolve","children":[],"call":["Resolver  resolve "," actual_dependencies ","source_requirements []= ","dep source send ","dep source ","dep name ","dep source respond_to? "," actual_dependencies each "]}," Bundler with_clean_env":{"type":"method","name":"with_clean_env","children":[],"call":["ENV  replace ","bundled_env to_hash ","ENV  to_hash ","ENV  []= ","ENV  [] sub ","File  expand_path ","ENV  [] ","ENV  has_key? ","k [] == ","k [] ","ENV  delete_if "," with_original_env ","rubylib join ","rubylib delete ","ENV  [] split ","ENV  key? "," with_env "," clean_env "," unbundled_env ","Bundler SharedHelpers  major_deprecation ","ENV  to_hash  to_hash ","ENV  [] split  join ","ENV  [] split  delete "," unENV  to_hash  "]}," Bundler specs_path":{"type":"method","name":"specs_path","children":[],"call":[" bundle_path join "," bundle_path "]}," Bundler Source Git cached?":{"type":"method","name":"cached?","children":[],"call":[" cache_path exist? "," cache_path "]}," Bundler Source BundlerGems to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source BundlerGems specs":{"type":"method","name":"specs","children":[],"call":["index << ","spec source= ","bundle_index to_a reverse each ","bundle_index to_a reverse ","bundle_index to_a ","Gem SourceIndex  from_gems_in ","Bundler  specs_path ","Index  new ","Index  new  << ","Gem SourceIndex  from_gems_in  to_a reverse each ","bundle_Index  new  to_a reverse each ","Gem SourceIndex  from_gems_in  to_a reverse ","bundle_Index  new  to_a reverse ","Gem SourceIndex  from_gems_in  to_a ","bundle_Index  new  to_a "]}," Gem Specification dependencies_to_gemfile":{"type":"method","name":"dependencies_to_gemfile","children":[],"call":["gemfile << ","dependency requirements_list first ","dependency requirements_list ","dependency name ","dependencies each ","dependencies any? ","String  new ","String  new  << ","dependency dependency requirements_list first uirements_list first ","dependency dependency requirements_list first uirements_list "]}," Gem Specification to_gemfile":{"type":"method","name":"to_gemfile","children":[],"call":["gemfile << "," dependencies_to_gemfile "," development_dependencies "," dependencies "," development_dependencies empty? "," nondevelopment_dependencies ","String  new ","String  new  << "," dependencies_to_String  new  "]}," Gem Specification git_version":{"type":"method","name":"git_version","children":[],"call":["branch empty? ","(str \"git show-branch --no-color 2>/dev/null\") strip [] ","(str \"git show-branch --no-color 2>/dev/null\") strip ","(str \"git rev-parse HEAD\") strip [] ","(str \"git rev-parse HEAD\") strip ","Dir  chdir "," full_gem_path ","File  exist? ","File  join ","sha [] ","branch != "," full_gem_path split [] "," full_gem_path split "," source revision [] "," source revision "," source "," source is_a? "," loaded_from ","Bundler SharedHelpers  chdir ","(str \"git show-branch --no-color 2>/dev/null\") strip []  empty? "," full_gem_path split []  empty? ","(str \"git show-(str \"git show-branch --no-color 2>/dev/null\") strip []  --no-color 2>/dev/null\") strip [] ","(str \"git show- full_gem_path split []  --no-color 2>/dev/null\") strip [] ","(str \"git show-(str \"git show-branch --no-color 2>/dev/null\") strip []  --no-color 2>/dev/null\") strip ","(str \"git show- full_gem_path split []  --no-color 2>/dev/null\") strip ","(str \"git (str \"git rev-parse HEAD\") strip [] -parse HEAD\") strip [] ","(str \"git (str \"git rev-parse HEAD\") strip [] -parse HEAD\") strip ","(str \"git show-branch --no-color 2>/dev/null\") strip []  != "," full_gem_path split []  != "," source (str \"git rev-parse HEAD\") strip [] ision [] "," source (str \"git rev-parse HEAD\") strip [] ision "]}," Bundler Index system_gems":{"type":"method","name":"system_gems","children":[],"call":[]}," Bundler Index bundler_gems":{"type":"method","name":"bundler_gems","children":[],"call":[]}," Bundler current_env_file?":{"type":"method","name":"current_env_file?","children":[],"call":[" env_file read =~ "," env_file read "," env_file "," env_file exist? "]}," Bundler env_file":{"type":"method","name":"env_file","children":[],"call":["SharedHelpers  env_file "]}," Bundler runtime":{"type":"method","name":"runtime","children":[],"call":["Runtime  new "," definition "," root "]}," Bundler SharedHelpers env_file":{"type":"method","name":"env_file","children":[],"call":[" default_gemfile dirname join "," default_gemfile dirname "," default_gemfile "]}," Bundler Index sources":{"type":"method","name":"sources","children":[],"call":["(send\n  (send\n    (ivar :@specs) :values) :map) flatten uniq ","(send\n  (send\n    (ivar :@specs) :values) :map) flatten ","s source class ","s source ","specs map ","@specs values map ","@specs values ","(send\n  (send\n    (send nil :specs) :values) :map) flatten uniq ","(send\n  (send\n    (send nil :specs) :values) :map) flatten "," specs values map "," specs values "," specs "]}," Gem Specification add_bundler_dependencies":{"type":"method","name":"add_bundler_dependencies","children":[],"call":[" add_dependency ","dep requirement to_s ","dep requirement ","dep name ","(send\n  (send\n    (lvar :dep) :groups) :&\n  (lvar :groups)) any? ","dep groups & ","dep groups "," add_development_dependency ","dep groups include? ","Bundler  definition dependencies each ","Bundler  definition dependencies ","Bundler  definition ","groups empty? ","Bundler  ui warn ","Bundler  ui "]}," Bundler Runtime replace_rubygems_paths":{"type":"method","name":"replace_rubygems_paths","children":[{"type":"method","name":"path","children":[],"asgn":[],"call":["Bundler  bundle_path to_s ","Bundler  bundle_path "]},{"type":"method","name":"source_index","children":[],"asgn":[null],"call":["Gem SourceIndex  from_installed_gems "]}],"call":["Gem SourceIndex  from_installed_gems ","Bundler  bundle_path to_s ","Bundler  bundle_path ","Gem  instance_eval "]}," Bundler CLI console":{"type":"method","name":"console","children":[],"call":["IRB  start "," require ","ARGV  clear ","Bundler  require ","g to_sym ","group split map! ","group split ","Console  new run ","Console  new "," options ","console start ","Bundler  ui error ","Bundler  ui ","e inspect ","Object  const_get ","CONSOLES  [] ","Bundler  ui info ","Bundler  settings [] ","Bundler  settings "," require_relative "]}," Bundler gem_require":{"type":"method","name":"gem_require","children":[],"call":[" setup require "," setup "]}," Bundler gem_setup":{"type":"method","name":"gem_setup","children":[],"call":[" exit! ","STDERR  puts ","e message "," load "," load setup ","unloaded any? ","groups | ","groups - ","groups empty? ","groups -  any? "]}," Bundler Runtime cache_path":{"type":"method","name":"cache_path","children":[],"call":[" root join "," root ","path join "]}," Bundler Runtime prune_cache":{"type":"method","name":"prune_cache","children":[],"call":["gemfile rmtree "," specs include? "," specs ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path "," cache_path children each "," cache_path children "," cache_path ","Bundler  ui info ","Bundler  ui ","FileUtils  mkdir_p ","gem_path rmtree ","File  basename ","s full_name == ","cached_spec full_name ","s full_name "," specs any? ","cached_spec platform =~ ","Gem Platform  local ","cached_spec platform ","Gem Platform  match ","Pathname  glob each ","Pathname  glob "," cache_path join ","gem_path to_s "," cache_path join to_s ","File  delete ","cached each ","cached any? ","s version == ","spec version ","s version ","s name == ","spec name ","s name ","resolve any? ","cached delete_if ","Dir  [] ","@definition resolve ","s source is_a? ! ","s source is_a? ","s source ","Bundler  rubygems spec_from_gem ","Bundler  rubygems ","File  exists? "," prune_git_and_path_cache "," prune_gem_cache ","File  exist? ","SharedHelpers  filesystem_access "," Gem Format  from_file_by_path spec s include? "," Bundler  rubygems spec_from_gem s include? "," Gem Format  from_file_by_path spec s "," Bundler  rubygems spec_from_gem s ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec  ","Gem Format  from_file_by_path Bundler  rubygems spec_from_gem  ","  cache_path  children each ","  cache_path  children ","  cache_path  ","cached_Gem Format  from_file_by_path spec  full_name ","cached_Bundler  rubygems spec_from_gem  full_name ","Gem Format  from_file_by_path spec  full_name ","Dir  [] _spec full_name "," Gem Format  from_file_by_path spec s any? "," Bundler  rubygems spec_from_gem s any? ","cached_Gem Format  from_file_by_path spec  platform =~ ","cached_Bundler  rubygems spec_from_gem  platform =~ ","Gem Format  from_file_by_path spec  platform =~ ","Dir  [] _spec platform =~ ","cached_Gem Format  from_file_by_path spec  platform ","cached_Bundler  rubygems spec_from_gem  platform ","Gem Format  from_file_by_path spec  platform ","Dir  [] _spec platform ","  cache_path  join ","  cache_path  join to_s ","Dir  []  each ","Dir  []  any? ","Gem Format  from_file_by_path spec  version ","Bundler  rubygems spec_from_gem  version ","Gem Format  from_file_by_path spec  name ","Bundler  rubygems spec_from_gem  name ","@definition resolve  any? ","Dir  []  delete_if ","@definition @definition resolve  ","Bundler  rubygems Gem Format  from_file_by_path spec _from_gem ","Bundler  rubygems Bundler  rubygems spec_from_gem _from_gem "]}," Gem Specification nondevelopment_dependencies":{"type":"method","name":"nondevelopment_dependencies","children":[],"call":[" dependencies - "," development_dependencies "," dependencies "]}," Bundler RemoteSpecification fetch_platform":{"type":"method","name":"fetch_platform","children":[],"call":[" _remote_specification platform "," _remote_specification "]}," Bundler update_env_file?":{"type":"method","name":"update_env_file?","children":[],"call":["STDERR  puts ","writable ! "," env_file writable? "," env_file "," env_file read !~ "," env_file read "," env_file exist? "," env_file writable?  ! "," env_file  env_file writable? ? "]}," Bundler SpecSet last":{"type":"method","name":"last","children":[],"call":[" sorted last "," sorted "]}," Bundler Runtime reverse_rubygems_kernel_mixin":{"type":"method","name":"reverse_rubygems_kernel_mixin","children":[],"call":[" private_method_defined? "," Kernel  class_eval "]}," Bundler Runtime clean_load_path":{"type":"method","name":"clean_load_path","children":[],"call":["$LOAD_PATH uniq! ","$LOAD_PATH unshift ","p include? ","Gem  path any? ","Gem  path ","p != ","File  dirname ","$LOAD_PATH reject! ","File  expand_path ","File  dirnaFile  expand_path  "]}," Gem Specification dependencies":{"type":"method","name":"dependencies","children":[],"call":["original << ","Dependency  new ","e =~ "," extensions any? "," extensions "," old_dependencies "," old_dependencies  << "]}," Gem Specification ImplicitRakeDependency implicit_rake_dependency?":{"type":"method","name":"implicit_rake_dependency?","children":[],"call":["e =~ "," extensions any? "," extensions "]}," Gem Specification ImplicitRakeDependency dependencies":{"type":"method","name":"dependencies","children":[],"call":["original << ","Dependency  new "," implicit_rake_dependency? "]}," Bundler upgrade_lockfile":{"type":"method","name":"upgrade_lockfile","children":[],"call":["lockfile rmtree ","Bundler  ui warn ","Bundler  ui ","lockfile read == ","lockfile read ","lockfile exist? "," default_lockfile "," root join "," root "," default_lockfile  rmtree "," root join  rmtree "," default_lockfile  read == "," root join  read == "," default_lockfile  read "," root join  read "," default_lockfile  exist? "," root join  exist? "," default_ default_lockfile  "," default_ root join  "]}," Bundler load_gemspec":{"type":"method","name":"load_gemspec","children":[],"call":[" raise ","msg << ","RUBY_VERSION  >= ","e message ","path basename ","line include? ","path to_s ","e backtrace find ","e backtrace "," eval ","path expand_path to_s ","path expand_path ","File  read ","Gem Specification  from_yaml ","Dir  chdir ","path dirname ","Pathname  new ","path basename to_s ","path dirname to_s ","@gemspec_cache [] dup ","@gemspec_cache [] "," load_gemspec_uncached ","File  expand_path ","spec dup ","Pathname  new  basename ","Pathname  new  to_s ","Pathname  new  expand_Pathname  new  to_s ","Pathname  new  expand_Pathname  new  ","Pathname  new  dirname ","Pathname  new  basename to_s ","Pathname  new  dirname to_s ","File  expand_Pathname  new  "]}," Bundler read_file":{"type":"method","name":"read_file","children":[],"call":["file read ","File  open ","f read ","SharedHelpers  filesystem_access "]}," Bundler sudo":{"type":"method","name":"sudo","children":[],"call":["\n\n + + ","\n\n + ","(str \"      Your user account isn't allowed to install to the system Rubygems.\\n\") gsub strip ","(str \"      Your user account isn't allowed to install to the system Rubygems.\\n\") gsub ","(str \"        Your user account isn't allowed to install to the system Rubygems.\\n\") gsub strip ","(str \"        Your user account isn't allowed to install to the system Rubygems.\\n\") gsub ","SUDO_MUTEX  synchronize "," raise "," system ","(str \"        Your user account isn't allowed to install to the system RubyGems.\\n\") gsub strip ","(str \"        Your user account isn't allowed to install to the system RubyGems.\\n\") gsub "]}," Bundler mkdir_p":{"type":"method","name":"mkdir_p","children":[],"call":["FileUtils  mkdir_p "," sudo ","File  exist? "," requires_sudo? ","SharedHelpers  filesystem_access ","options [] ! ","options [] "]}," Bundler requires_sudo?":{"type":"method","name":"requires_sudo?","children":[],"call":["File  writable? ! ","File  writable? "," settings allow_sudo? "," settings ","(str \"which sudo 2>\") empty? ! ","(str \"which sudo 2>\") empty? ","path parent ","path exist? "," bundle_path ","File  owned? ","(rescue\n  (xstr\n    (str \"which sudo\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ! ","(rescue\n  (xstr\n    (str \"which sudo\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ","bin_dir parent ","bin_dir exist? ","Pathname  new ","Bundler  system_bindir "," which ","Bundler  rubygems gem_bindir ","Bundler  rubygems ","files any? ","(lvar :path) | | ","Dir  [] ","path join to_s ","path join ","(lvar :path) | ","Bundler  ui warn ","unwritable_files sort map join ","unwritable_files sort map ","unwritable_files sort ","Bundler  ui ","unwritable_files empty? ! ","unwritable_files empty? ","files reject "," bundle_path join to_s "," bundle_path join ","unwritable_files map sort join ","unwritable_files map sort ","unwritable_files map ","dirs find ","path parent  parent "," bundle_path  parent ","path parent  exist? "," bundle_path  exist? "," bundle_path parent  "," bundle_ bundle_path  ","bin_dir parent  parent ","Pathname  new  parent ","bin_dir parent  exist? ","Pathname  new  exist? ","(lvar :path) | |  any? ","(lvar :path parent ) | | ","(lvar : bundle_path ) | | ","path parent  join to_s "," bundle_path  join to_s ","path parent  join "," bundle_path  join ","(lvar :path parent ) | ","(lvar : bundle_path ) | ","unwritable_(lvar :path) | |  sort map join ","unwritable_(lvar :path) | |  sort map ","unwritable_(lvar :path) | |  sort ","unwritable_(lvar :path) | |  empty? ! ","unwritable_(lvar :path) | |  empty? ","(lvar :path) | |  reject "," bundle_path parent  join to_s "," bundle_ bundle_path  join to_s "," bundle_path parent  join "," bundle_ bundle_path  join ","unwritable_(lvar :path) | |  map sort join ","unwritable_(lvar :path) | |  map sort ","unwritable_(lvar :path) | |  map ","(lvar :path) |  find "]}," Bundler default_lockfile":{"type":"method","name":"default_lockfile","children":[],"call":["SharedHelpers  default_lockfile "]}," Bundler tmp":{"type":"method","name":"tmp","children":[],"call":[" user_bundle_path join ","Process  pid to_s ","Process  pid "," user_bundle_path ","Gem  user_home ","Pathname  new ","Dir  mktmpdir ","@tmp join ","Kernel  send "]}," Bundler app_cache":{"type":"method","name":"app_cache","children":[],"call":[" root join "," root ","path join "," settings app_cache_path "," settings ","Pathname  new join ","Pathname  new "]}," Bundler app_config_path":{"type":"method","name":"app_config_path","children":[],"call":[" root join "," root ","Pathname  new expand_path ","Pathname  new ","ENV  [] ","app_config_pathname expand_path ","app_config_pathname absolute? ","ENV  [] _pathname expand_path ","Pathname  new  expand_path ","ENV  [] _pathname absolute? ","Pathname  new  absolute? "]}," Bundler user_bundle_path":{"type":"method","name":"user_bundle_path","children":[],"call":["Pathname  new join ","Pathname  new ","Gem  user_home ","Bundler  rubygems user_home ","Bundler  rubygems "," user_home ","ENV  fetch "," raise "," user_bundle_path join "," user_bundle_path "," proc "]}," Bundler ruby_scope":{"type":"method","name":"ruby_scope","children":[],"call":["Gem ConfigMap  [] ","Gem  ruby_engine ","Bundler  rubygems ruby_engine ","Bundler  rubygems ","Bundler  rubygems config_map [] ","Bundler  rubygems config_map ","RbConfig CONFIG  [] "]}," Bundler environment":{"type":"method","name":"environment","children":[],"call":["Bundler Environment  new "," definition "," root "," load ","SharedHelpers  major_deprecation "]}," Bundler bin_path":{"type":"method","name":"bin_path","children":[],"call":["Pathname  new expand_path ","Pathname  new ","FileUtils  mkdir_p "," root "," settings [] "," settings ","Gem  user_home ","Pathname  new expand_path expand_path ","SharedHelpers  filesystem_access ","Pathname  new expand_Pathname  new expand_path  ","Pathname  new expand_Pathname  new expand_path expand_path  ","Pathname  new expand_Pathname  new expand_path  expand_Pathname  new expand_path  ","Pathname  new expand_Pathname  new expand_path expand_path  expand_Pathname  new expand_path expand_path  "]}," Bundler VersionConflict initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor subcommand_help":{"type":"method","name":"subcommand_help","children":[],"call":[" class_eval "," desc "]}," Thor retrieve_task_name":{"type":"method","name":"retrieve_task_name","children":[],"call":["args shift ","meth !~ "," map [] "," map ","args first to_s ","args first ","args empty? ","args first to_s  !~ "]}," Thor dispatch":{"type":"method","name":"dispatch","children":[],"call":[" new invoke_task "," new ","args [] ","Range  new "," arguments size "," arguments ","config merge! ","task options ","Thor DynamicTask  new ","Thor Options  split "," all_tasks [] "," normalize_task_name "," all_tasks "," retrieve_task_name ","instance invoke_command ","instance args "," block_given? ","command options "," dynamic_command_class new "," dynamic_command_class ","opts clear ","args concat ","args empty? ! ","args empty? "," stop_on_unknown_option? ","Bundler Thor Options  split "," all_commands [] "," normalize_command_name "," default_command "," all_commands ","given_args unshift ","config [] ","command ! "," retrieve_command_name ","config []= ","instance invoke_task "," default_task ","given_args dup ","given_args first != ","given_args first "," default_task != ","given_args size >= ","given_args size ","Thor DynamicCommand  new "," default_command != "," new invoke_Thor DynamicTask  new  "," new invoke_ all_tasks []  ","instance args  [] ","Thor DynamicTask  new  options "," all_tasks []  options "," all_Thor DynamicTask  new s [] "," all_ all_tasks [] s [] "," normalize_Thor DynamicTask  new _name "," normalize_ all_tasks [] _name "," all_Thor DynamicTask  new s "," all_ all_tasks [] s "," retrieve_Thor DynamicTask  new _name "," retrieve_ all_tasks [] _name "," new  invoke_command ","instance invoke_ dynamic_command_class new  ","instance invoke_ all_commands []  ","instance invoke_Thor DynamicCommand  new  ","instance instance args  "," new  args "," dynamic_command_class new  options "," all_commands []  options ","Thor DynamicCommand  new  options "," dynamic_ dynamic_command_class new _class new "," dynamic_ all_commands [] _class new "," dynamic_Thor DynamicCommand  new _class new "," dynamic_ dynamic_command_class new _class "," dynamic_ all_commands [] _class "," dynamic_Thor DynamicCommand  new _class ","instance args  concat ","instance args  empty? ! ","instance args  empty? "," all_ dynamic_command_class new s [] "," all_ all_commands [] s [] "," all_Thor DynamicCommand  new s [] "," normalize_ dynamic_command_class new _name "," normalize_ all_commands [] _name "," normalize_Thor DynamicCommand  new _name "," default_ dynamic_command_class new  "," default_ all_commands []  "," default_Thor DynamicCommand  new  "," all_ dynamic_command_class new s "," all_ all_commands [] s "," all_Thor DynamicCommand  new s ","given_instance args  unshift "," dynamic_command_class new  ! "," all_commands []  ! ","Thor DynamicCommand  new  ! "," retrieve_ dynamic_command_class new _name "," retrieve_ all_commands [] _name "," retrieve_Thor DynamicCommand  new _name ","instance invoke_Thor DynamicTask  new  ","instance invoke_ all_tasks []  "," new  invoke_task "," default_Thor DynamicTask  new  "," default_ all_tasks []  ","given_instance args  dup ","given_instance args  first != ","given_instance args  first "," default_Thor DynamicTask  new  != "," default_ all_tasks []  != ","given_instance args  size >= ","given_instance args  size "," default_ dynamic_command_class new  != "," default_ all_commands []  != "," default_Thor DynamicCommand  new  != "]}," Thor check_unknown_options?":{"type":"method","name":"check_unknown_options?","children":[],"call":["options [] include? ","name to_sym ","options [] ","options [] include? ! "," subcommands include? "," subcommands ","task name ","config [] "," check_unknown_options ","command name "," check_unknown_options  [] include? ","task name  to_sym ","command name  to_sym "," check_unknown_options  [] "," check_unknown_options  [] include? ! "," subconfig [] s include? "," subconfig [] s ","task task name  ","task command name  ","config []  name "," check_unknown_ check_unknown_options  ","command task name  ","command command name  "]}," Thor check_unknown_options!":{"type":"method","name":"check_unknown_options!","children":[],"call":["@check_unknown_options delete ","@check_unknown_options []= "," Array ","options each ","Hash  new "]}," Thor subcommand":{"type":"method","name":"subcommand","children":[],"call":[" invoke "," define_method ","subcommand_class subcommand_help "," subcommands << ","subcommand to_s "," subcommands ","subcommand_class start "," subcommand_args "," subcommands []= "," options ","args unshift ","opts include? ","Bundler Thor Arguments  split "," subcommand_classes []= "," subcommand_classes ","invoke_args unshift ","opts delete ","command ancestor_name= ","subcommand_class commands each ","subcommand_class commands ","Thor Arguments  split ","subcommand to_s _class subcommand to_s _help "," subcommand to_s s << ","subcommand to_s  to_s "," subcommand to_s s ","subcommand to_s _class start "," subcommand to_s _args "," subcommand to_s s []= "," subcommand to_s _classes []= "," subcommand to_s _classes ","subcommand to_s _class commands each ","subcommand to_s _class commands "]}," Thor subcommands":{"type":"method","name":"subcommands","children":[],"call":[" from_superclass "]}," Thor long_desc":{"type":"method","name":"long_desc","children":[],"call":["task long_description= "," find_and_refresh_task ","options [] ","command long_description= "," find_and_refresh_command "," find_and_refresh_task  long_description= "," find_and_refresh_ find_and_refresh_task  "," find_and_refresh_command  long_description= "," find_and_refresh_ find_and_refresh_command  "]}," Thor DynamicTask run":{"type":"method","name":"run","children":[],"call":["instance class handle_no_task_error "," name ","instance class ","(send\n  (send\n    (lvar :instance) :methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance methods & "," name to_sym "," name to_s ","instance methods "]}," Thor DynamicTask initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Thor HiddenTask hidden?":{"type":"method","name":"hidden?","children":[],"call":[]}," Thor Task hidden?":{"type":"method","name":"hidden?","children":[],"call":[]}," Thor Shell HTML diff_lcs_loaded?":{"type":"method","name":"diff_lcs_loaded?","children":[],"call":[" require ","@diff_lcs_loaded nil? "]}," Thor Shell HTML output_diff_line":{"type":"method","name":"output_diff_line","children":[],"call":[" say ","diff old_element chomp ","diff old_element ","diff new_element chomp ","diff new_element ","diff action "]}," Thor Shell HTML show_diff":{"type":"method","name":"show_diff","children":[],"call":[" output_diff_line ","Diff LCS  sdiff each ","Diff LCS  sdiff ","content to_s split ","content to_s ","File  binread to_s split ","File  binread to_s ","File  binread ","ENV  [] nil? ","ENV  [] "," diff_lcs_loaded? ","content to_s split  to_s split ","content to_s split  to_s "]}," Thor Shell HTML ask":{"type":"method","name":"ask","children":[],"call":[" raise "," fail "]}," Thor Shell HTML set_color":{"type":"method","name":"set_color","children":[],"call":[" class const_get ","color to_s upcase ","color to_s "," class ","color is_a? ","styles join ","styles << ","html_colors join "," lookup_color ","colors map ","colors all? ","Bundler Thor Util  escape_html "," class const_get  to_s upcase "," class const_get  to_s "," class const_get  is_a? ","html_ class const_get s join "," class const_get s join "," lookup_ class const_get  "," class const_get s map "," class const_get s all? "]}," Thor Shell Basic print_wrapped":{"type":"method","name":"print_wrapped","children":[],"call":["$stdout puts ","para == ","paras last ","line insert ","  * ","para split each ","para split ","paras each ","(send\n  (back-ref :$&) :+\n  (send\n    (int 5) :chr)) gsub gsub ","(send\n  (back-ref :$&) :+\n  (send\n    (int 5) :chr)) gsub ","$& + ","5 chr ","unwrapped strip gsub squeeze gsub ","unwrapped strip gsub squeeze ","unwrapped strip gsub ","unwrapped strip ","paras map! ","message split "," terminal_width - "," terminal_width ","options [] "," stdout puts "," stdout ","unwrapped strip tr squeeze gsub ","unwrapped strip tr squeeze ","unwrapped strip tr ","(send\n  (lvar :paras) :map!) compact! ","word length ","word length + ","(send\n  (send\n    (lvar :counter) :+\n    (send\n      (lvar :word) :length)) :+\n  (int 1)) < ","counter + + ","counter + ","word include? ","word gsub gsub ","word gsub ","unwrapped split inject ","unwrapped split ","words inject ","words first length ","words first ","message split  last ","message split  each ","message split  map! "," terminal_ terminal_width -  - "," terminal_ terminal_width -  ","(send\n  (lvar :message split ) :map!) compact! ","word gsub gsub  length ","word gsub gsub  length + ","(send\n  (send\n    (lvar :word length ) :+\n    (send\n      (lvar :word) :length)) :+\n  (int 1)) < ","(send\n  (send\n    (lvar :words first length ) :+\n    (send\n      (lvar :word) :length)) :+\n  (int 1)) < ","(send\n  (send\n    (lvar :counter) :+\n    (send\n      (lvar :word gsub gsub ) :length)) :+\n  (int 1)) < ","word length  + + ","words first length  + + ","word length  + ","words first length  + ","word gsub gsub  include? ","word gsub gsub  gsub gsub ","word gsub gsub  gsub ","word gsub gsub s inject ","unwrapped split  inject ","word gsub gsub s first length ","unwrapped split  first length ","word gsub gsub s first ","unwrapped split  first "]}," Thor Arguments no_or_skip?":{"type":"method","name":"no_or_skip?","children":[],"call":["arg =~ "]}," Thor Invocation _parse_initialization_options":{"type":"method","name":"_parse_initialization_options","children":[],"call":["stored_config merge merge! ","stored_config merge "," _shared_configuration ","stored_opts dup ","stored_args dup ","stored_stored_config merge merge!  merge merge! ","stored_stored_config merge merge!  merge "," _shared_stored_config merge merge! uration "]}," Thor Invocation _retrieve_class_and_task":{"type":"method","name":"_retrieve_class_and_task","children":[],"call":[" class prepare_for_invocation "," class ","name to_s "," class all_tasks [] "," class all_tasks ","name nil? "]}," Thor Invocation invoke_all":{"type":"method","name":"invoke_all","children":[],"call":[" invoke_task "," class all_tasks map "," class all_tasks "," class "," invoke_command "," class all_commands map "," class all_commands "]}," Thor Invocation invoke_task":{"type":"method","name":"invoke_task","children":[],"call":["task run ","current << ","task name ","current include? ","@_invocations [] "," class ","@_invocations []  << ","@_invocations []  include? "]}," Thor Base ClassMethods dispatch":{"type":"method","name":"dispatch","children":[],"call":[" raise "," fail "]}," Thor Base ClassMethods handle_argument_error":{"type":"method","name":"handle_argument_error","children":[],"call":[" raise "," banner inspect "," banner ","task name inspect ","task name "," fail ","msg << ","msg << << ","args inspect ","args empty? ","command name "," basename ","(str \"ERROR: \\\"\") dup ","(send\n  (lvar :command) :ancestor_name) compact join ","(send\n  (lvar :command) :ancestor_name) compact ","command ancestor_name ","required > ","-1 - ","arity < ","args empty? ! "," banner split join "," banner split ","task (send\n  (lvar :command) :ancestor_name) compact join  inspect ","task (send\n  (lvar :command) :ancestor_name) compact join  ","(str \"ERROR: \\\"\") dup  << ","(str \"ERROR: \\\"\") dup  << << ","command (send\n  (lvar :command) :ancestor_name) compact join  "," base(send\n  (lvar :command) :ancestor_name) compact join  ","(send\n  (lvar :command) :ancestor_(send\n  (lvar :command) :ancestor_name) compact join ) compact join ","(send\n  (lvar :command) :ancestor_(send\n  (lvar :command) :ancestor_name) compact join ) compact ","command ancestor_(send\n  (lvar :command) :ancestor_name) compact join  "]}," Thor Base ClassMethods check_unknown_options":{"type":"method","name":"check_unknown_options","children":[],"call":[" from_superclass "]}," Thor Actions ClassMethods source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Bundler UI Shell be_quiet!":{"type":"method","name":"be_quiet!","children":[],"call":[]}," Bundler SpecSet merge":{"type":"method","name":"merge","children":[],"call":["SpecSet  new ","arr << ","s2 platform == ","s platform ","s2 platform ","s2 version == ","s version ","s2 version ","s2 name == ","s name ","s2 name ","arr any? ","set each "," sorted dup "," sorted "," sorted + ","set to_a ","spec full_name == ","spec full_name ","set_spec full_name "," sorted dup  << "," sorted dup  any? ","spec set_spec full_name  == ","spec set_spec full_name  ","set_spec set_spec full_name  "]}," Bundler SpecSet materialize":{"type":"method","name":"materialize","children":[],"call":["SpecSet  new ","materialized compact "," raise ","s full_name ","missing_specs << ","s __materialize__ ","s is_a? ","materialized map! "," for to_a "," for ","s source dependency_names= ","s source ","s source respond_to? ","(send\n  (lvar :materialized) :map) uniq ","s name ","materialized map ","s source dependencies= ","d name ","deps map ","materialized map uniq ","missing_specs ! ","s source local! ","source double_check_for ","specs map uniq ","specs map "," lambda ","source local! ","specs any? ","materialized group_by each ","materialized group_by ","s materialize_for_installation "," for uniq "," incomplete_specs "," for to_a  compact "," for  compact "," for uniq  compact ","missing_s __materialize__ s << "," for to_a  map! "," for  map! "," for uniq  map! ","(send\n  (lvar : for to_a ) :map) uniq ","(send\n  (lvar : for ) :map) uniq ","(send\n  (lvar : for uniq ) :map) uniq "," for to_a  map "," for  map "," for uniq  map ","(send\n  (lvar :materialized) :map) uniq  map ","materialized map uniq  map "," for to_a  map uniq "," for  map uniq "," for uniq  map uniq ","missing_s __materialize__ s ! ","s __materialize__ s map uniq ","s __materialize__ s map ","s __materialize__ s any? "," for to_a  group_by each "," for  group_by each "," for uniq  group_by each "," for to_a  group_by "," for  group_by "," for uniq  group_by "," incomplete_s __materialize__ s "]}," Bundler SpecSet to_hash":{"type":"method","name":"to_hash","children":[],"call":[" lookup dup "," lookup "]}," Bundler SpecSet []=":{"type":"method","name":"[]=","children":[],"call":["@specs << "]}," Bundler SpecSet []":{"type":"method","name":"[]","children":[],"call":[" lookup [] reverse "," lookup [] "," lookup ","key name ","key respond_to? ","key name  name ","key name  respond_to? "]}," Bundler SpecSet valid_for?":{"type":"method","name":"valid_for?","children":[],"call":[" for "]}," Bundler Source Git allow_git_ops?":{"type":"method","name":"allow_git_ops?","children":[],"call":[]}," Bundler Source Git has_revision_cached?":{"type":"method","name":"has_revision_cached?","children":[],"call":[" git "," in_cache ","$? == "]}," Bundler Source Git shortref_for_path":{"type":"method","name":"shortref_for_path","children":[],"call":["ref [] "]}," Bundler Source Git shortref_for_display":{"type":"method","name":"shortref_for_display","children":[],"call":["ref [] "]}," Bundler Source Git unlock!":{"type":"method","name":"unlock!","children":[],"call":[" git_proxy revision= "," git_proxy "," options []= "," options "]}," Bundler Source Git name":{"type":"method","name":"name","children":[],"call":["File  basename "]}," Bundler Source Git eql?":{"type":"method","name":"eql?","children":[],"call":[" submodules == ","o submodules "," submodules "," version == ","o version "," version "," name == ","o name "," name "," ref == ","o ref "," ref "," uri == ","o uri "," uri ","Git  === "," branch == ","o branch "," branch ","o is_a? ","other submodules ","other version ","other name ","other branch ","other ref ","other uri ","other is_a? "," glob == ","other glob "," glob "]}," Bundler Source Git to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << ","@glob == "," options [] "," options ","(str \"ref\") each "," revision "," shortref_for ","String  new "," default_glob? ","String  new  << "]}," Bundler Source Git from_lock":{"type":"method","name":"from_lock","children":[],"call":[]}," Bundler Source Path relative_path":{"type":"method","name":"relative_path","children":[],"call":[" path "," path relative_path_from ","Bundler  root "," path to_s include? ","Bundler  root to_s "," path to_s "," path to_s match ","Regexp  escape "," path to_s start_with? "," root_path "," root_path to_s ","path relative_path_from ","path to_s start_with? ","path to_s "]}," Bundler Source Path cache":{"type":"method","name":"cache","children":[],"call":["Bundler  ui warn "," path ","spec name ","Bundler  ui "," path to_s index == "," path to_s index ","Bundler  root to_s ","Bundler  root "," path to_s "," path expand_path to_s index == "," path expand_path to_s index "," path expand_path to_s "," path expand_path ","FileUtils  touch ","app_cache_path join ","FileUtils  cp_r ","FileUtils  rm_rf "," raise "," to_s "," version_message ","@original_path exist? "," expand to_s index == "," expand to_s index "," expand to_s "," expand ","Bundler  settings [] ","Bundler  settings "," app_cache_path ","Bundler  root to_s + "," root_path to_s + "," root_path to_s "," root_path ","Bundler  feature_flag cache_all? ","Bundler  feature_flag "," app_cache_path join ","@original_path expand_path to_s index == ","@original_path expand_path to_s index ","@original_path expand_path to_s ","@original_path expand_path "," app_cache_path  join ","  app_cache_path  ","  app_cache_path  join "]}," Bundler Source Path Installer generate_bin":{"type":"method","name":"generate_bin","children":[],"call":["Bundler  sudo ","Gem  dir ","Bundler  tmp "," spec executables each "," spec executables "," spec ","Bundler  mkdir_p ","Bundler  requires_sudo? ","FileUtils  mkdir_p ","File  exist? "," spec executables empty? "," spec executables nil? ","Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  rm_rf ","SharedHelpers  filesystem_access "]}," Bundler Source Path Installer initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","spec full_gem_path ","Gem  dir ","Bundler  tmp ","Bundler  requires_sudo? ","Bundler  rubygems path ","Bundler  rubygems ","Bundler  rubygems gem_dir ","Bundler  tmp to_s ","spec full_name ","Bundler  rubygems build_args "]}," Bundler Source Path name":{"type":"method","name":"name","children":[],"call":["File  basename ","@path to_s "," path expand_path to_s "," path expand_path ","Bundler  root "," path "," expanded_path to_s "," expanded_path "," expand to_s "," expand "]}," Bundler Source Path eql?":{"type":"method","name":"eql?","children":[],"call":[" version == ","o version "," version "," name == ","o name "," name "," path == ","o path "," path ","o instance_of? ","Path  === "," path expand_path == ","o path expand_path ","Bundler  root "," path expand_path "," expanded_path == "," expand "," expanded_path ","other version ","other path ","other instance_of? ","other class == "," class ","other class "," expand == ","other original_path "," expanded_original_path == ","other expanded_original_path "," expanded_original_path "]}," Bundler Source Path hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class ","(send\n  (self) :class) hash "," version "," expanded_path "]}," Bundler Source Path to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << ","@glob == "," relative_path ","String  new "," lockfile_path ","String  new  << "]}," Bundler Source Path from_lock":{"type":"method","name":"from_lock","children":[],"call":[]}," Bundler Source Path cached!":{"type":"method","name":"cached!","children":[],"call":[]}," Bundler Source Path remote!":{"type":"method","name":"remote!","children":[],"call":[]}," Bundler Source Rubygems download_gem_from_uri":{"type":"method","name":"download_gem_from_uri","children":[],"call":[" sudo ","spec full_name ","Bundler  tmp ","Gem  dir ","Bundler  requires_sudo? ","Gem RemoteFetcher  fetcher download ","Gem RemoteFetcher  fetcher ","FileUtils  mkdir_p ","spec fetch_platform ","Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  rubygems download_gem "]}," Bundler Source Rubygems fetch_all_remote_specs":{"type":"method","name":"fetch_all_remote_specs","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Gem SpecFetcher  new list each ","Gem SpecFetcher  new list ","Gem SpecFetcher  new "]}," Bundler Source Rubygems remote_specs":{"type":"method","name":"remote_specs","children":[],"call":["Gem  sources= ","idx << ","@spec_fetch_map []= ","spec full_name ","spec source= ","RemoteSpecification  new ","name == ","v each "," fetch_all_remote_specs ","Bundler  ui info ","Bundler  ui "," remotes each "," remotes ","Gem  sources ","Index  new ","spec __swap__ ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path "," download_gem_from_uri "," lambda ","remotes each ","uri to_s "," remotes map ","Bundler  rubygems sources= ","Bundler  rubygems ","Bundler  rubygems sources ","idx use ","fetcher specs ","api_fetchers each ","Bundler Fetcher  disable_endpoint= ","unmet_dependency_names any? ","Bundler  ui debug ","idx unmet_dependency_names ","sources [] < ","sources [] ","modern_index_fetchers all? ","api_fetchers any? ","fetchers - ","fetcher has_api ","fetchers select ","sources keys ","sources []= ","specs size "," dependency_names ","Bundler Fetcher  new ","@fetchers [] ","@fetchers [] fetch_remote_specs ","d name ","dependencies map ","@fetchers []= ","@fetchers [] specs "," dependencies map "," dependencies ","f specs ","f uri "," api_fetchers each "," api_fetchers ","Bundler  ui debug? ! ","Bundler  ui debug? ","unmet any? "," api_fetchers any? ","idx dependency_names ","idx size ","idxcount == "," dependency_names size < "," dependency_names size ","idx size < ","index_fetchers each "," fetchers - "," fetchers ","Index  build ","f specs_with_retry "," loop "," fetch_names ","api_fetchers empty? ","f use_api ","allow_api ! ","api_fetchers all? "," api_fetchers all? "," fetchers select "," multiple_remotes? ! "," multiple_remotes? ","Gem  Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec = ","Index  new  << ","@RemoteSpecification  new _fetch_map []= ","@Gem Format  from_file_by_path spec pec_fetch_map []= ","RemoteSpecification  new  full_name ","Gem Format  from_file_by_path spec pec full_name ","RemoteSpecification  new  source= ","Gem Format  from_file_by_path spec pec Gem Format  from_file_by_path spec ource= "," fetch_all_remote_RemoteSpecification  new s "," fetch_all_remote_Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  "," fetch_all_remote_fetcher specs  "," remoteGem Format  from_file_by_path spec  each "," remoteGem Format  from_file_by_path spec  ","Gem  Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  ","RemoteSpecification  new  __swap__ ","Gem Format  from_file_by_path spec pec __Gem Format  from_file_by_path spec wap__ ","Gem Format  from_file_by_path RemoteSpecification  new  ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec pec ","Gem Format  from_file_by_ download_gem_from_uri  spec ","Gem Format  from_file_by_ download_gem_from_uri  ","remoteGem Format  from_file_by_path spec  each ","uri to_Gem Format  from_file_by_path spec  "," remoteGem Format  from_file_by_path spec  map ","Bundler  rubygemGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec = ","Bundler  rubygemGem Format  from_file_by_path spec  ","Bundler  rubygemGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  ","Index  new  use ","idx uGem Format  from_file_by_path spec e ","fetcher RemoteSpecification  new s ","fetcher Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  ","fetcher fetcher specs  ","Bundler Fetcher  new  specs ","api_fetcherGem Format  from_file_by_path spec  each ","api_sources keys  each ","api_Bundler Fetcher  new s each ","Bundler Fetcher  diGem Format  from_file_by_path spec able_endpoint= ","unmet_dependency_nameGem Format  from_file_by_path spec  any? ","idx unmet_dependency_names  any? ","idx unmet_dependency_names _dependency_names any? ","Index  new  unmet_dependency_names ","idx unmet_dependency_nameGem Format  from_file_by_path spec  ","idx idx unmet_dependency_names  ","idx idx unmet_dependency_names _dependency_names ","Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  [] < ","Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  [] ","modern_index_fetcherGem Format  from_file_by_path spec  all? ","fetchers -  all? ","modern_index_sources keys  all? ","modern_index_Bundler Fetcher  new s all? ","modern_ fetchers -  all? ","modern_fetchers -  all? ","api_fetcherGem Format  from_file_by_path spec  any? ","api_sources keys  any? ","api_Bundler Fetcher  new s any? ","fetcherGem Format  from_file_by_path spec  - ","sources keys  - ","Bundler Fetcher  new s - ","fetcher haGem Format  from_file_by_path spec _api ","Bundler Fetcher  new  has_api ","fetcherGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec elect ","sources keys  select ","Bundler Fetcher  new s select ","Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  keyGem Format  from_file_by_path spec  ","Gem Format  from_file_by_path spec ourceGem Format  from_file_by_path spec  []= ","RemoteSpecification  new s size ","Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ize ","fetcher specs  size "," dependency_nameGem Format  from_file_by_path spec  ","@fetcherGem Format  from_file_by_path spec  [] ","@sources keys  [] ","@Bundler Fetcher  new s [] ","@fetchers [] fetch_remote_RemoteSpecification  new s ","@fetcherGem Format  from_file_by_path spec  [] fetch_remote_Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  ","@sources keys  [] fetch_remote_specs ","@fetchers [] fetch_remote_fetcher specs  ","@Bundler Fetcher  new s [] fetch_remote_specs ","dependencieGem Format  from_file_by_path spec  map ","@fetcherGem Format  from_file_by_path spec  []= ","@sources keys  []= ","@Bundler Fetcher  new s []= ","@fetchers [] RemoteSpecification  new s ","@fetcherGem Format  from_file_by_path spec  [] Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  ","@sources keys  [] specs ","@fetchers [] fetcher specs  ","@Bundler Fetcher  new s [] specs "," dependencieGem Format  from_file_by_path spec  map "," dependencieGem Format  from_file_by_path spec  ","f RemoteSpecification  new s ","f Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  ","f fetcher specs  "," api_fetcherGem Format  from_file_by_path spec  each "," api_sources keys  each "," api_Bundler Fetcher  new s each "," api_fetcherGem Format  from_file_by_path spec  "," api_sources keys  "," api_Bundler Fetcher  new s "," api_fetcherGem Format  from_file_by_path spec  any? "," api_sources keys  any? "," api_Bundler Fetcher  new s any? ","Index  new  dependency_names ","idx dependency_nameGem Format  from_file_by_path spec  ","Index  new  size ","idx Gem Format  from_file_by_path spec ize ","Index  new count == ","idx size  == "," dependency_nameGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ize < "," dependency_nameGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ize ","Index  new  size < ","idx Gem Format  from_file_by_path spec ize < ","index_fetcherGem Format  from_file_by_path spec  each ","index_sources keys  each ","index_Bundler Fetcher  new s each "," fetchers -  each ","fetchers -  each "," fetcherGem Format  from_file_by_path spec  - "," sources keys  - "," Bundler Fetcher  new s - "," fetcherGem Format  from_file_by_path spec  "," sources keys  "," Bundler Fetcher  new s ","f RemoteSpecification  new s_with_retry ","f Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec _with_retry ","f fetcher specs _with_retry "," fetch_nameGem Format  from_file_by_path spec  ","api_fetcherGem Format  from_file_by_path spec  empty? ","api_sources keys  empty? ","api_Bundler Fetcher  new s empty? ","f uGem Format  from_file_by_path spec e_api "," multiple_remotes? !  ! ","api_fetcherGem Format  from_file_by_path spec  all? ","api_sources keys  all? ","api_Bundler Fetcher  new s all? "," api_fetcherGem Format  from_file_by_path spec  all? "," api_sources keys  all? "," api_Bundler Fetcher  new s all? "," fetcherGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec elect "," sources keys  select "," Bundler Fetcher  new s select "," multiple_remoteGem Format  from_file_by_path spec ? ! "," multiple_remoteGem Format  from_file_by_path spec ? "]}," Bundler Source Rubygems cached_specs":{"type":"method","name":"cached_specs","children":[],"call":["idx << ","s source= ","Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path "," name == "," name ","Dir  [] each ","Dir  [] ","@caches each ","Index  new "," raise ","gemfile =~ ","Bundler  app_cache "," installed_specs dup "," installed_specs ","Bundler  rubygems spec_from_gem ","Bundler  rubygems ","Gem Specification  load ","File  exist? ","gemfile gsub "," cache_path ","Bundler  ui debug ","Bundler  ui ","Bundler  rubygems spec_missing_extensions? ","(str \"^bundler\\\\-[\\\\d\\\\.]+?\\\\.gem\") match? ","Index  new  << "," installed_specs dup  << ","Gem Format  from_file_by_path spec  Gem Format  from_file_by_path spec ource= ","Gem Specification  load  Gem Specification  load ource= ","Gem Format  from_file_by_path Gem Format  from_file_by_path spec pec ","Gem Format  from_file_by_path Gem Specification  load pec ","Gem Format  from_file_by_Bundler  app_cache  spec ","Gem Format  from_file_by_Bundler  app_cache  ","@cacheGem Format  from_file_by_path spec  each ","@cacheGem Specification  load  each "," raiGem Format  from_file_by_path spec e "," raiGem Specification  load e "," inGem Format  from_file_by_path spec talled_Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  dup "," inGem Specification  load talled_Gem Specification  load pecGem Specification  load  dup "," inGem Format  from_file_by_path spec talled_Gem Format  from_file_by_path spec pecGem Format  from_file_by_path spec  "," inGem Specification  load talled_Gem Specification  load pecGem Specification  load  ","Bundler  rubygemGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec pec_from_gem ","Bundler  rubygemGem Specification  load  Gem Specification  load pec_from_gem ","Bundler  rubygemGem Format  from_file_by_path spec  ","Bundler  rubygemGem Specification  load  ","File  exiGem Format  from_file_by_path spec t? ","File  exiGem Specification  load t? ","gemfile gGem Format  from_file_by_path spec ub ","gemfile gGem Specification  load ub "," cache_Bundler  app_cache  ","Bundler  rubygemGem Format  from_file_by_path spec  Gem Format  from_file_by_path spec pec_miGem Format  from_file_by_path spec Gem Format  from_file_by_path spec ing_extenGem Format  from_file_by_path spec ionGem Format  from_file_by_path spec ? ","Bundler  rubygemGem Specification  load  Gem Specification  load pec_miGem Specification  load Gem Specification  load ing_extenGem Specification  load ionGem Specification  load ? ","(Gem Format  from_file_by_path spec tr \"^bundler\\\\-[\\\\d\\\\.]+?\\\\.gem\") match? ","(Gem Specification  load tr \"^bundler\\\\-[\\\\d\\\\.]+?\\\\.gem\") match? "]}," Bundler Source Rubygems installed_specs":{"type":"method","name":"installed_specs","children":[],"call":["idx << ","s loaded_from= ","s source= ","s platform= ","s version= ","s name= ","Gem Specification  new ","spec source= ","spec name == ","spec name ","spec version to_s != ","spec version to_s ","spec version ","Gem SourceIndex  from_installed_gems to_a reverse each ","Gem SourceIndex  from_installed_gems to_a reverse ","Gem SourceIndex  from_installed_gems to_a ","Gem SourceIndex  from_installed_gems ","Index  new ","@installed []= ","spec full_name ","name == ","File  expand_path ","Gem  source_index to_a reverse each ","Gem  source_index to_a reverse ","Gem  source_index to_a ","Gem  source_index ","s authors= ","Bundler  rubygems all_specs reverse each ","Bundler  rubygems all_specs reverse ","Bundler  rubygems all_specs ","Bundler  rubygems ","Bundler  rubygems all_specs reverse_each ","Bundler  ui debug ","Bundler  ui ","Bundler  rubygems spec_missing_extensions? ","spec version to_s == ","Index  build ","Index  new  << "]}," Bundler Source Rubygems normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":[" raise ","uri absolute? "," URI ","uri =~ ","uri to_s ","uri host nil? ","uri host ","uri is_a? ","uri absolute? ! ","Bundler  URI "," require_relative ","(str \"/$\") match? ","URINormalizer  normalize_suffix "," URI  absolute? ","uri to_s  absolute? ","Bundler  URI  absolute? ","URINormalizer  normalize_suffix  absolute? "," URI  =~ ","uri to_s  =~ ","Bundler  URI  =~ ","URINormalizer  normalize_suffix  =~ "," URI  to_s ","uri to_s  to_s ","Bundler  URI  to_s ","URINormalizer  normalize_suffix  to_s "," URI  host nil? ","uri to_s  host nil? ","Bundler  URI  host nil? ","URINormalizer  normalize_suffix  host nil? "," URI  host ","uri to_s  host ","Bundler  URI  host ","URINormalizer  normalize_suffix  host "," URI  is_a? ","uri to_s  is_a? ","Bundler  URI  is_a? ","URINormalizer  normalize_suffix  is_a? "," URI  absolute? ! ","uri to_s  absolute? ! ","Bundler  URI  absolute? ! ","URINormalizer  normalize_suffix  absolute? ! "]}," Bundler Source Rubygems cached_gem":{"type":"method","name":"cached_gem","children":[],"call":["File  exist? ","possibilities find ","spec full_name ","@caches map ","spec file_name "," raise "," cached_path "," cached_built_in_gem ","spec default_gem? "]}," Bundler Source Rubygems merge_remotes":{"type":"method","name":"merge_remotes","children":[],"call":[" add_remote ","r to_s ","source remotes each ","source remotes "]}," Bundler Source Rubygems add_remote":{"type":"method","name":"add_remote","children":[],"call":["@remotes << "," normalize_uri ","@remotes unshift ","@remotes include? "," normalize_ normalize_uri  "]}," Bundler Source Rubygems cache":{"type":"method","name":"cache","children":[],"call":["FileUtils  cp ","Bundler  app_cache ","Bundler  ui info ","File  basename ","Bundler  ui ","File  dirname == ","Bundler  app_cache to_s ","File  dirname "," raise ","spec full_name "," cached_gem ","e message ","Bundler  ui debug "," cached_built_in_gem "," builtin_gem? "," fetch_gem "," remote_specs search first "," remote_specs search "," remote_specs ","spec file_name "," fetch_gem_if_possible ","Bundler  settings [] ","Bundler  settings ","  remote_specs search first s search first ","  remote_specs search first s search ","  remote_specs search first s "]}," Bundler Source Rubygems sudo":{"type":"method","name":"sudo","children":[],"call":["Bundler  sudo "]}," Bundler Source Rubygems to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << ","(send\n  (send nil :remotes) :map) join "," remotes map "," remotes "," suppress_configured_credentials "," remotes reverse_each ","String  new ","String  new  << "]}," Bundler Source Rubygems from_lock":{"type":"method","name":"from_lock","children":[],"call":[]}," Bundler Source Rubygems options":{"type":"method","name":"options","children":[],"call":["r to_s ","@remotes map "]}," Bundler Source Rubygems name":{"type":"method","name":"name","children":[],"call":[]}," Bundler Source Rubygems eql?":{"type":"method","name":"eql?","children":[],"call":["Rubygems  === ","o credless_remotes == "," credless_remotes ","o credless_remotes ","o is_a? ","other credless_remotes == ","other credless_remotes ","other is_a? "," remotes == ","o remotes "," remotes "," remotes_equal? "]}," Bundler Source Rubygems hash":{"type":"method","name":"hash","children":[],"call":["Rubygems  hash ","@remotes hash "]}," Bundler Source Rubygems cached!":{"type":"method","name":"cached!","children":[],"call":[]}," Bundler Source Rubygems remote!":{"type":"method","name":"remote!","children":[],"call":[]}," Bundler SharedHelpers default_lockfile":{"type":"method","name":"default_lockfile","children":[],"call":["Pathname  new "," default_gemfile ","gemfile sub ","gemfile basename to_s ","gemfile basename ","(send\n  (send\n    (lvar :gemfile) :basename) :to_s) untaint ","x untaint ","RUBY_VERSION  < ","(send\n  (send\n    (lvar :gemfile) :basename) :to_s) tap "," default_ default_gemfile  "," default_gemfile  sub "," default_gemfile  basename to_s "," default_gemfile  basename ","(send\n  (send\n    (lvar : default_gemfile ) :basename) :to_s) untaint ","(send\n  (send\n    (lvar : default_gemfile ) :basename) :to_s) tap "]}," Bundler Settings local_config_file":{"type":"method","name":"local_config_file","children":[],"call":["Pathname  new ","Pathname  new join "]}," Bundler Settings global_config_file":{"type":"method","name":"global_config_file","children":[],"call":["Pathname  new ","File  join ","Gem  user_home ","ENV  [] ","Bundler  rubygems user_home ","Bundler  rubygems ","Bundler  user_bundle_path join ","Bundler  user_bundle_path ","ENV  [] empty? ! ","ENV  [] empty? ","Pathname  new join ","Bundler  rubygems user_home empty? ! ","Bundler  rubygems user_home empty? "]}," Bundler Settings set_key":{"type":"method","name":"set_key","children":[],"call":["f puts ","hash to_yaml ","File  open ","FileUtils  mkdir_p ","file dirname ","hash delete ","value nil? ","hash []= ","hash [] == ","hash [] "," key_for ","YAML  dump "," require ","p dirname ","SharedHelpers  filesystem_access ","f write ","YAMLSerializer  dump ","p open ","Validator  validate! "," converted_value "," array_to_s "," is_array ","raw_key to_s "," require_relative "," array_to_s  nil? ","  key_for _for "," converted_ array_to_s  ","raw_ key_for  to_s ","raw_key to_s  to_s "]}," Bundler Settings key_for":{"type":"method","name":"key_for","children":[],"call":["key to_s sub upcase ","key to_s sub ","key to_s ","key to_s upcase ","key to_s gsub upcase ","key to_s gsub "," normalize_uri to_s "," normalize_uri ","key is_a? ","Settings  normalize_uri to_s ","Settings  normalize_uri ","key include? "," class key_for "," class ","key to_s sub upcase  to_s sub upcase ","key to_s gsub upcase  to_s sub upcase "," normalize_uri to_s  to_s sub upcase ","Settings  normalize_uri to_s  to_s sub upcase ","key to_s sub upcase  to_s sub ","key to_s gsub upcase  to_s sub "," normalize_uri to_s  to_s sub ","Settings  normalize_uri to_s  to_s sub ","key to_s sub upcase  to_s ","key to_s gsub upcase  to_s "," normalize_uri to_s  to_s ","Settings  normalize_uri to_s  to_s ","key to_s sub upcase  to_s upcase ","key to_s gsub upcase  to_s upcase "," normalize_uri to_s  to_s upcase ","Settings  normalize_uri to_s  to_s upcase ","key to_s sub upcase  to_s gsub upcase ","key to_s gsub upcase  to_s gsub upcase "," normalize_uri to_s  to_s gsub upcase ","Settings  normalize_uri to_s  to_s gsub upcase ","key to_s sub upcase  to_s gsub ","key to_s gsub upcase  to_s gsub "," normalize_uri to_s  to_s gsub ","Settings  normalize_uri to_s  to_s gsub ","key to_s sub upcase  is_a? ","key to_s gsub upcase  is_a? "," normalize_uri to_s  is_a? ","Settings  normalize_uri to_s  is_a? ","key to_s sub upcase  include? ","key to_s gsub upcase  include? "," normalize_uri to_s  include? ","Settings  normalize_uri to_s  include? "," class key to_s sub upcase _for "," class key to_s gsub upcase _for "," class  normalize_uri to_s _for "," class Settings  normalize_uri to_s _for "]}," Bundler Settings allow_sudo?":{"type":"method","name":"allow_sudo?","children":[],"call":["@local_config key? ! ","@local_config key? "," key_for ","path_configured ! ","@temporary key? ","@local_config  key_for ? ! ","@local_config  key_for ? ","  key_for _for ","@temporary  key_for ? "]}," Bundler Settings path":{"type":"method","name":"path","children":[],"call":["Gem  dir ","Bundler  ruby_scope "," [] ","@local_config key? ! ","@local_config key? "," key_for ","@global_config [] ","ENV  [] ","@config key? ! ","@config key? ","Bundler  rubygems gem_dir ","Bundler  rubygems ","File  join "," use_system_gems? ! "," use_system_gems? "," append_ruby_scope "," base_path ","Path  new ","Bundler  feature_flag default_install_uses_path? ","Bundler  feature_flag "," [] == ","@temporary key? ! ","@temporary key? ","Bundler  feature_flag global_path_appends_ruby_scope? ","disabled_shared_gems == ","disabled_shared_gems nil? ","path_system nil? ","path nil? "," value_for "," configs each "," configs ","@local_config  key_for ? ! ","@local_config  key_for ? ","  key_for _for ","@config  key_for ? ! ","@config  key_for ? "," base_ []  "," base_ENV  []  "," base_File  join  "," base_ base_path  "," base_ value_for  ","Bundler  feature_flag default_install_uses_ [] ? ","Bundler  feature_flag default_install_uses_ENV  [] ? ","Bundler  feature_flag default_install_uses_File  join ? ","Bundler  feature_flag default_install_uses_ base_path ? ","Bundler  feature_flag default_install_uses_ value_for ? ","@temporary  key_for ? ! ","@temporary  key_for ? ","Bundler  feature_flag global_ [] _appends_ruby_scope? ","Bundler  feature_flag global_ENV  [] _appends_ruby_scope? ","Bundler  feature_flag global_File  join _appends_ruby_scope? ","Bundler  feature_flag global_ base_path _appends_ruby_scope? ","Bundler  feature_flag global_ value_for _appends_ruby_scope? "," value_for  == "," value_for  nil? "," [] _system nil? ","ENV  [] _system nil? ","File  join _system nil? "," base_path _system nil? "," value_for _system nil? "," []  nil? ","ENV  []  nil? ","File  join  nil? "," base_path  nil? "]}," Bundler Settings pretty_values_for":{"type":"method","name":"pretty_values_for","children":[],"call":["locations empty? ","locations << ","@global_config [] inspect ","@global_config [] "," global_config_file ","@global_config key? ","value inspect "," key_for ","ENV  [] ","@local_config [] inspect ","@local_config [] "," local_config_file ","@local_config key? "," converted_value inspect "," converted_value ","@temporary [] ","@temporary key? ","@env_config [] "," printable_value inspect "," printable_value ","@global_config  key_for ? ","ENV  []  inspect ","@global_config []  inspect ","@env_config []  inspect ","@local_config []  inspect ","@temporary []  inspect ","  key_for _for ","@local_config  key_for ? "," converted_ENV  []  inspect "," converted_@global_config []  inspect "," converted_@env_config []  inspect "," converted_@local_config []  inspect "," converted_@temporary []  inspect "," converted_ENV  []  "," converted_@global_config []  "," converted_@env_config []  "," converted_@local_config []  "," converted_@temporary []  ","@temporary  key_for ? "," printable_ENV  []  inspect "," printable_@global_config []  inspect "," printable_@env_config []  inspect "," printable_@local_config []  inspect "," printable_@temporary []  inspect "," printable_ENV  []  "," printable_@global_config []  "," printable_@env_config []  "," printable_@local_config []  "," printable_@temporary []  "]}," Bundler Settings locations":{"type":"method","name":"locations","children":[],"call":["locations []= ","@global_config [] ","@global_config key? ","ENV  [] ","@local_config [] ","@local_config key? "," key_for ","DEFAULT_CONFIG  [] ","DEFAULT_CONFIG  key? ","@temporary [] ","@temporary key? ","partial_locations []= ","value_on_level nil? "," configs [] [] "," configs [] "," configs "," configs keys inject "," configs keys ","@global_config  key_for ? ","@local_config  key_for ? ","  key_for _for ","DEFAULT_CONFIG   key_for ? ","@temporary  key_for ? "," configs [] []  nil? "," configs  key_for s inject "," configs  key_for s "]}," Bundler Settings all":{"type":"method","name":"all","children":[],"call":["key sub gsub downcase ","key sub gsub ","key sub ","keys map ","@global_config keys | | ","@global_config keys | ","@local_config keys ","@global_config keys ","k =~ ","ENV  keys select ","ENV  keys ","@temporary keys | | | ","@temporary keys | | ","@temporary keys | ","@temporary keys ","ENV  keys grep ","@env_config keys ","(send\n  (lvar :keys) :map) sort ","key sub gsub gsub downcase ","key sub gsub gsub ","@global_config keys | |  map ","@temporary keys | | |  map ","@global_config @global_config keys | |  | | ","@global_config @temporary keys | | |  | | ","@global_config @global_config keys | |  | ","@global_config @temporary keys | | |  | ","@local_config @global_config keys | |  ","@local_config @temporary keys | | |  ","@global_config @global_config keys | |  ","@global_config @temporary keys | | |  ","ENV  @global_config keys | |  select ","ENV  @temporary keys | | |  select ","ENV  @global_config keys | |  ","ENV  @temporary keys | | |  ","@temporary @global_config keys | |  | | | ","@temporary @temporary keys | | |  | | | ","@temporary @global_config keys | |  | | ","@temporary @temporary keys | | |  | | ","@temporary @global_config keys | |  | ","@temporary @temporary keys | | |  | ","@temporary @global_config keys | |  ","@temporary @temporary keys | | |  ","ENV  @global_config keys | |  grep ","ENV  @temporary keys | | |  grep ","@env_config @global_config keys | |  ","@env_config @temporary keys | | |  ","(send\n  (lvar :@global_config keys | | ) :map) sort ","(send\n  (lvar :@temporary keys | | | ) :map) sort "]}," Bundler Settings set_global":{"type":"method","name":"set_global","children":[],"call":[" set_key "," global_config_file "]}," Bundler Settings delete":{"type":"method","name":"delete","children":[],"call":["@local_config delete "," key_for "]}," Bundler Runtime setup_environment":{"type":"method","name":"setup_environment","children":[],"call":["ENV  []= ","rubyopt join ","rubyopt unshift ","File  expand_path ","rubyopt first !~ ","rubyopt first ","rubyopt empty? ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact ","ENV  [] "," default_gemfile to_s "," default_gemfile ","paths uniq join ","paths uniq ","paths unshift ","Bundler  bundle_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split ","Gem  bin_path ","Bundler  rubygems bin_path ","Bundler  rubygems ","SharedHelpers  set_bundle_environment ","rubylib uniq join ","rubylib uniq ","rubylib unshift ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  join ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  unshift ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first !~ ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  empty? ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  unshift ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  unshift "]}," Bundler MatchPlatform match_platform":{"type":"method","name":"match_platform","children":[],"call":[" generic == "," generic ","Gem Platform  new "," platform ","p == "," platform nil? ","Gem Platform RUBY  == "," generic === ","MatchPlatform  platforms_match? "," platform === "]}," Bundler GemHelpers generic":{"type":"method","name":"generic","children":[],"call":["p =~ ","GENERICS  find ","GENERIC_CACHE  [] ","p == ","p os == ","p2 os ","p os ","p2 is_a? ","p cpu == ","match cpu ","p cpu ","match cpu ! ","match os "]}," Bundler DepProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@dep send "]}," Bundler DepProxy to_s":{"type":"method","name":"to_s","children":[],"call":["@dep to_s "," __platform "," requirement "," name ","s << "," __platform == "," requirement == ","Gem Requirement  default "," name dup ","@dep to_ name dup  "," name dup  << "]}," Bundler DepProxy type":{"type":"method","name":"type","children":[],"call":["@dep type "]}," Bundler DepProxy ==":{"type":"method","name":"==","children":[],"call":[" __platform == ","o __platform "," __platform "," dep == ","o dep "," dep ","other __platform ","other dep ","other nil? ","other class != "," class ","other class "]}," Bundler DepProxy hash":{"type":"method","name":"hash","children":[],"call":[" dep hash "," dep ","(send nil :dep) hash "," __platform "]}," Bundler DepProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Gem Platform hash":{"type":"method","name":"hash","children":[],"call":["@cpu hash + + ","@version hash ","@cpu hash + ","@os hash ","@cpu hash ","@cpu hash ^ ^ ","@cpu hash ^ "]}," Gem Dependency to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << "," requirement to_s "," requirement "," requirement == ","Gem Requirement  default "," name ","reqs join "," requirement requirements map "," requirement requirements ","(send\n  (send\n    (send nil :requirement) :requirements) :map) sort reverse ","(send\n  (send\n    (send nil :requirement) :requirements) :map) sort ","String  new "," requirement none? ","String  new  << ","(send\n  (send\n    (send nil :requirement) :requirements) :map) sort reverse  join "]}," Gem Specification loaded_from":{"type":"method","name":"loaded_from","children":[],"call":[" rg_loaded_from "," source path join to_s "," source path join "," relative_loaded_from "," source path "," source "]}," Bundler Resolver error_message":{"type":"method","name":"error_message","children":[],"call":["o << "," clean_req ","requirement required_by first ","requirement required_by "," gem_message ","conflict inspect ","@base [] first ","@base [] ","origin required_by first ","origin required_by ","origin respond_to? ","origin name "," errors inject "," errors ","origin version ","origin name == ","(send\n  (send\n    (lvar :origin) :required_by) :first) ! ","origin respond_to? ! ","requirement requirement > ","Gem Requirement  new ","requirement requirement ","requirement requirement satisfied_by? ! ","requirement requirement satisfied_by? ","(lvasgn :required_by\n  (send\n    (send\n      (lvar :origin) :required_by) :first)) ! ","origin required_by [] ","requirement origin required_by first  first ","requirement requirement required_by  first ","requirement origin required_by []  first ","requirement origin required_by first  ","requirement requirement required_by  ","requirement origin required_by []  ","origin origin required_by first  first ","origin requirement required_by  first ","origin origin required_by []  first ","origin origin required_by first  ","origin requirement required_by  ","origin origin required_by []  ","(send\n  (send\n    (lvar :origin) :origin required_by first ) :first) ! ","(send\n  (send\n    (lvar :origin) :requirement required_by ) :first) ! ","(send\n  (send\n    (lvar :origin) :origin required_by [] ) :first) ! ","(lvasgn :origin required_by first \n  (send\n    (send\n      (lvar :origin) :origin required_by first ) :first)) ! ","(lvasgn :requirement required_by \n  (send\n    (send\n      (lvar :origin) :requirement required_by ) :first)) ! ","(lvasgn :origin required_by [] \n  (send\n    (send\n      (lvar :origin) :origin required_by [] ) :first)) ! ","origin origin required_by first  [] ","origin requirement required_by  [] ","origin origin required_by []  [] "]}," Bundler Resolver gem_message":{"type":"method","name":"gem_message","children":[],"call":["m << "," clean_req ","requirement required_by first ","requirement required_by ","requirement required_by first name != ","requirement name ","requirement required_by first name "," dependency_tree "]}," Bundler Resolver version_conflict":{"type":"method","name":"version_conflict","children":[],"call":["VersionConflict  new "," error_message "," errors keys "," errors "," start "," initial_reqs "," reset_state "," raise "]}," Bundler Resolver clean_req":{"type":"method","name":"clean_req","children":[],"call":["req to_s gsub ","req to_s ","req to_s include? "]}," Bundler Resolver start":{"type":"method","name":"start","children":[],"call":[" resolve ","Hash  [] "," gems_size ","reqs map "," raise ","names join ","names count > ","names count ","d name ","e dependencies sort_by map ","e dependencies sort_by ","e dependencies ","VersionConflict  new ","e message ","e conflicts keys uniq ","e conflicts keys ","e conflicts ","dg map map flatten ","dg map map ","dg map ","@resolver resolve "," verify_gemfile_dependencies_are_found! ","(send\n  (send\n    (lvar :dg) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (lvar :dg) :map\n    (block-pass\n      (sym :payload))) :reject) map ","sg name end_with? ","sg name ","dg map reject "," version_conflict_message ","dep prerelease? ","@prerelease_specified [] ","dep name ","requirements each ","@gem_version_promoter prerelease_specified= ","reqs dup ","(send\n  (send\n    (block\n      (send\n        (lvar :dg) :tap)\n      (args\n        (arg :resolved))\n      (send nil :validate_resolved_specs!\n        (lvar :resolved))) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (block\n      (send\n        (lvar :dg) :tap)\n      (args\n        (arg :resolved))\n      (send nil :validate_resolved_specs!\n        (lvar :resolved))) :map\n    (block-pass\n      (sym :payload))) :reject) map ","(send\n  (lvar :dg) :tap) map reject ","(send\n  (lvar :dg) :tap) map "," validate_resolved_specs! ","dg tap ","SpecSet  new ","SpecSet  new for ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :@base_dg)) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :@base_dg)) :map\n    (block-pass\n      (sym :payload))) :reject) map ","@resolver resolve map reject ","@resolver resolve map ","@base_dg add_vertex ","@additional_base_requirements each ","DepProxy  get_proxy ","ls platform ","ls name ","Dependency  new ","ls version ","@base each ","Molinillo DependencyGraph  new "," remove_from_candidates ","exclude_specs each ","dep name end_with? ","requirements partition ","conflicts keys uniq ","conflicts keys "," reset_spec_cache ","@base unlock_deps ","deps_to_unlock any? ","(send\n  (send\n    (send\n      (lvar :conflict) :requirement_trees) :flatten) :map) compact "," base_requirements [] ","req name "," base_requirements ","conflict requirement_trees flatten map ","conflict requirement_trees flatten ","conflict requirement_trees ","conflicts values inject ","conflicts values ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)) :map\n    (block-pass\n      (sym :payload))) :reject) map "," prerelease_specified [] "," prerelease_specified "," solve_versions ","Bundler  ui info ","Bundler  ui "," setup_solver ","@base packages ","@base requirements ","e Dependency  new endencies sort_by map ","e Dependency  new endencies sort_by ","e Dependency  new endencies ","e  version_conflict_message  ","e e conflicts  keys uniq ","e e conflicts  keys ","e e conflicts  ","@resolver resolve  map map flatten ","@resolver resolve  map map ","@resolver resolve  map "," verify_gemfile_Dependency  new endencies_are_found! ","(send\n  (send\n    (lvar :@resolver resolve ) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (lvar :@resolver resolve ) :map\n    (block-pass\n      (sym :payload))) :reject) map ","@resolver resolve  map reject "," version_conflict_ version_conflict_message  ","Dependency  new  prerelease? ","Dependency  new  name ","(send\n  (send\n    (block\n      (send\n        (lvar :@resolver resolve ) :tap)\n      (args\n        (arg :resolved))\n      (send nil :validate_resolved_specs!\n        (lvar :resolved))) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (block\n      (send\n        (lvar :@resolver resolve ) :tap)\n      (args\n        (arg :resolved))\n      (send nil :validate_resolved_specs!\n        (lvar :resolved))) :map\n    (block-pass\n      (sym :payload))) :reject) map ","(send\n  (lvar :@resolver resolve ) :tap) map reject ","(send\n  (lvar :@resolver resolve ) :tap) map ","@resolver resolve  tap ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :@base_@resolver resolve )) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :Molinillo DependencyGraph  new )) :map\n    (block-pass\n      (sym :payload))) :reject) map flatten ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :@base_@resolver resolve )) :map\n    (block-pass\n      (sym :payload))) :reject) map ","(send\n  (send\n    (send\n      (ivar :@resolver) :resolve\n      (lvar :requirements)\n      (ivar :Molinillo DependencyGraph  new )) :map\n    (block-pass\n      (sym :payload))) :reject) map ","@base_@resolver resolve  add_vertex ","Molinillo DependencyGraph  new  add_vertex ","Dependency  new  name end_with? ","e conflicts  keys uniq ","e conflicts  keys ","@base unlock_Dependency  new s ","Dependency  new s_to_unlock any? ","e conflicts  values inject ","e conflicts  values "]}," Bundler Resolver successify":{"type":"method","name":"successify","children":[],"call":["(send\n  (send\n    (lvar :activated) :values) :map) flatten compact ","(send\n  (send\n    (lvar :activated) :values) :map) flatten ","s to_specs ","activated values map ","activated values "]}," Bundler Resolver SpecGroup __dependencies":{"type":"method","name":"__dependencies","children":[],"call":["dependencies [] << ","DepProxy  new ","dependencies [] ","dep type == ","dep type ","spec dependencies each ","spec dependencies ","dependencies []= ","@specs [] ","ALL  each ","Hash  new ","dep name == ","bundler freeze ","dep name ","dependencies << ","DepProxy  get_proxy ","@specs [] first dependencies each ","@specs [] first dependencies ","@specs [] first ","specs first ","Dependency  new ","dep requirement ","@specs []  dependencies each ","specs first  dependencies each ","@specs []  dependencies ","specs first  dependencies ","@@specs [] s [] ","@specs first s [] ","@@specs []  [] ","@@specs [] s [] first dependencies each ","@specs first s [] first dependencies each ","@@specs []  [] first dependencies each ","@@specs [] s [] first dependencies ","@specs first s [] first dependencies ","@@specs []  [] first dependencies ","@@specs [] s [] first ","@specs first s [] first ","@@specs []  [] first ","@specs [] s first ","specs first s first ","@specs []  first "]}," Bundler Resolver SpecGroup to_s":{"type":"method","name":"to_s","children":[],"call":[" version "," name "," sorted_activated_platforms join "," sorted_activated_platforms "," sorted_spec_names join "," sorted_spec_names "]}," Bundler Resolver SpecGroup for?":{"type":"method","name":"for?","children":[],"call":["@specs [] ","spec_required_ruby_version satisfied_by? ","spec required_ruby_version ","spec respond_to? ","required_ruby_version gem_version ","spec required_ruby_version satisfied_by? ","ruby_version to_gem_version_with_patchlevel ","spec required_ruby_version nil? ","spec is_a? ! ","spec is_a? ","ruby_version nil? ","required_ruby_version to_gem_version_with_patchlevel ","spec nil? ! ","spec nil? "," spec_for nil? ! "," spec_for nil? "," spec_for ","@specs [] any? ","@@specs [] s [] ","spec required_ruby_version  satisfied_by? ","@specs [] _required_ruby_version satisfied_by? ","@specs []  required_ruby_version ","@specs []  respond_to? ","@specs []  required_ruby_version satisfied_by? ","@specs []  required_ruby_version nil? ","@specs []  is_a? ! ","@specs []  is_a? ","@specs []  nil? ! ","@specs []  nil? "," @specs [] _for nil? ! "," @specs [] _for nil? "," @specs [] _for ","@@specs [] s [] any? "]}," Bundler Resolver SpecGroup source":{"type":"method","name":"source","children":[],"call":[" first source "," first "," exemplary_spec source "," exemplary_spec "]}," Bundler Resolver SpecGroup version":{"type":"method","name":"version","children":[],"call":[" first version "," first "," exemplary_spec version "," exemplary_spec "]}," Bundler Resolver SpecGroup name":{"type":"method","name":"name","children":[],"call":[" first name "," first "," exemplary_spec name "," exemplary_spec "]}," Bundler Resolver SpecGroup activate_platform":{"type":"method","name":"activate_platform","children":[],"call":[" __dependencies [] "," __dependencies ","@activated << ","@activated include? "," for? "]}," Bundler Resolver SpecGroup to_specs":{"type":"method","name":"to_specs","children":[],"call":["specs values ","specs []= ","lazy_spec dependencies replace ","s dependencies ","lazy_spec dependencies ","LazySpecification  new "," source "," version "," name ","specs [] "," generic ","Gem Platform  new ","s platform ","@specs [] ","@activated each ","s source ","s version ","s name "," each ","Gem Platform  new to_generic ","(send\n  (ivar :@activated_platforms) :map) compact ","@activated_platforms map ","(send\n  (ivar :@activated_platforms) :map) compact uniq ","(send\n  (send nil :activated_platforms) :map) flatten compact uniq ","(send\n  (send nil :activated_platforms) :map) flatten compact ","(send\n  (send nil :activated_platforms) :map) flatten ","specs map ","specs any? "," activated_platforms map "," activated_platforms ","(send\n  (ivar :@activated_platforms) :map) flatten compact uniq ","(send\n  (ivar :@activated_platforms) :map) flatten compact ","(send\n  (ivar :@activated_platforms) :map) flatten ","lazy_spec force_ruby_platform= "," force_ruby_platform ","@specs map ","@specs [] pec@specs []  value@specs []  ","@specs []  values ","@specs [] pec@specs []  []= ","@specs []  []= ","LazySpecification  new  dependencies replace ","lazy_@specs [] pec dependencie@specs []  replace ","@specs []  dependencie@specs []  ","LazySpecification  new  dependencies ","lazy_@specs [] pec dependencie@specs []  "," @specs [] ource "," ver@specs [] ion ","@specs [] pec@specs []  [] ","@specs []  [] ","s  generic  ","s Gem Platform  new to_generic  ","@specs []  platform ","@@specs [] pec@specs []  [] ","@@specs []  [] ","@specs []  @specs [] ource ","@specs []  ver@specs [] ion ","@specs []  name ","(send\n  (ivar :@activated_ generic s) :map) compact ","(send\n  (ivar :@activated_Gem Platform  new to_generic s) :map) compact ","(@specs [] end\n  (ivar :@activated_platform@specs [] ) :map) compact ","@activated_ generic s map ","@activated_Gem Platform  new to_generic s map ","@activated_platform@specs []  map ","(send\n  (ivar :@activated_ generic s) :map) compact uniq ","(send\n  (ivar :@activated_Gem Platform  new to_generic s) :map) compact uniq ","(@specs [] end\n  (ivar :@activated_platform@specs [] ) :map) compact uniq ","(send\n  (send nil :activated_ generic s) :map) flatten compact uniq ","(send\n  (send nil :activated_Gem Platform  new to_generic s) :map) flatten compact uniq ","(@specs [] end\n  (@specs [] end nil :activated_platform@specs [] ) :map) flatten compact uniq ","(send\n  (send nil :activated_ generic s) :map) flatten compact ","(send\n  (send nil :activated_Gem Platform  new to_generic s) :map) flatten compact ","(@specs [] end\n  (@specs [] end nil :activated_platform@specs [] ) :map) flatten compact ","(send\n  (send nil :activated_ generic s) :map) flatten ","(send\n  (send nil :activated_Gem Platform  new to_generic s) :map) flatten ","(@specs [] end\n  (@specs [] end nil :activated_platform@specs [] ) :map) flatten ","@specs [] pec@specs []  map ","@specs []  map ","@specs [] pec@specs []  any? ","@specs []  any? "," activated_ generic s map "," activated_Gem Platform  new to_generic s map "," activated_platform@specs []  map "," activated_ generic s "," activated_Gem Platform  new to_generic s "," activated_platform@specs []  ","(send\n  (ivar :@activated_ generic s) :map) flatten compact uniq ","(send\n  (ivar :@activated_Gem Platform  new to_generic s) :map) flatten compact uniq ","(@specs [] end\n  (ivar :@activated_platform@specs [] ) :map) flatten compact uniq ","(send\n  (ivar :@activated_ generic s) :map) flatten compact ","(send\n  (ivar :@activated_Gem Platform  new to_generic s) :map) flatten compact ","(@specs [] end\n  (ivar :@activated_platform@specs [] ) :map) flatten compact ","(send\n  (ivar :@activated_ generic s) :map) flatten ","(send\n  (ivar :@activated_Gem Platform  new to_generic s) :map) flatten ","(@specs [] end\n  (ivar :@activated_platform@specs [] ) :map) flatten ","LazySpecification  new  force_ruby_platform= ","lazy_spec force_ruby_ generic = ","lazy_spec force_ruby_Gem Platform  new to_generic = ","lazy_@specs [] pec force_ruby_platform= "," force_ruby_ generic  "," force_ruby_Gem Platform  new to_generic  ","@@specs [] pec@specs []  map ","@@specs []  map "]}," Bundler Resolver SpecGroup initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["o activated dup ","o activated ","o required_by dup ","o required_by "]}," Bundler Resolver SpecGroup initialize":{"type":"method","name":"initialize","children":[],"call":["@specs []= ","s match_platform "," reverse find "," reverse ","ALL  each ","specs []= "," select_best_platform_match ","Hash  new ","exemplary_spec source ","exemplary_spec version ","exemplary_spec name "," raise ","all_specs first ","partitioned_dependency_names []= "," partitioned_dependency_names_for ","dependencies []= "," dependencies_for ","@exemplary_spec source ","@exemplary_spec version ","@exemplary_spec name ","specs first ","all_specs first  source ","all_specs first  version ","all_specs first  name ","@all_specs first  source ","specs first  source ","@all_specs first  version ","specs first  version ","@all_specs first  name ","specs first  name "]}," Bundler LockfileParser parse_platform":{"type":"method","name":"parse_platform","children":[],"call":["@platforms << ","Gem Platform  new ","line =~ "]}," Bundler LockfileParser parse_spec":{"type":"method","name":"parse_spec","children":[],"call":["@current_spec dependencies << ","@current_spec dependencies ","Gem Dependency  new ","d strip ","version split map ","version split ","line =~ ","@specs << ","@current_spec source= ","LazySpecification  new ","Gem Platform  new ","Gem Version  new ","@specs include? ","@specs [] ","@current_spec identifier ","spaces size == ","spaces size ","@specs []= ","@current_source add_dependency_names ","@current_spec full_name ","@current_spec Gem Dependency  new endencies << ","LazySpecification  new  dependencies << ","@current_spec Gem Dependency  new endencies ","LazySpecification  new  dependencies ","version split map  split map ","Gem Version  new  split map ","version split map  split ","Gem Version  new  split ","LazySpecification  new  source= ","LazySpecification  new  identifier ","@current_source add_Gem Dependency  new endency_names ","LazySpecification  new  full_name "]}," Bundler LockfileParser parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["@dependencies << ","dep source version= ","dep source ","dep source name= ","dep source is_a? ","version first =~ ","version first ","version size == ","version size ","dep source= ","spec source ","s name == ","dep name ","s name ","@specs find ","dep name != ","Bundler Dependency  new ","d strip ","version split map ","version split ","line =~ ","version =~ ","(send\n  (ivar :@specs) :find) source ","spec last source ","spec last ","v name == ","v name ","@dependencies []= ","spaces size == ","spaces size ","@Bundler Dependency  new endencies << ","Bundler Dependency  new  source version= ","dep source version split map = ","Bundler Dependency  new  source ","Bundler Dependency  new  source name= ","Bundler Dependency  new  source is_a? ","version split map  first =~ ","version split map  first ","version split map  size == ","version split map  size ","Bundler Dependency  new  source= ","Bundler Dependency  new  name ","Bundler Dependency  new  name != ","version split map  split map ","version split map  split ","version split map  =~ ","@Bundler Dependency  new endencies []= "]}," Bundler LockfileParser parse_source":{"type":"method","name":"parse_source","children":[],"call":[" parse_spec ","@opts []= ","@opts [] << ","@opts [] "," Array ","value == ","@sources << ","TYPES  [] from_lock ","TYPES  [] ","s == ","@sources find ","@sources include? ","@current_source is_a? ","@rubygems_aggregate add_remote "," Array each ","Plugin  source_from_lock ","@opts delete ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","@type == ","Bundler  feature_flag disable_multisource? "," rubygems_aggregate "," rubygems_aggregate add_remote ","source_remotes each ","source_remotes size == ","source_remotes size "," Array reverse ","TYPES  [] from_lock  is_a? ","Plugin  source_from_lock  is_a? "," rubygems_aggregate  is_a? "," Array  each "," Array  size == "," Array  size "]}," Bundler LockfileParser initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","line == ","lockfile split each ","lockfile split "," raise ","Bundler  ui debug ","Bundler  ui "," warn_for_outdated_bundler_version ","@specs values ","@sources << ","line =~ "," parse_source ","SOURCE  include? ","lockfile match ","Source Rubygems  new ","Bundler  default_lockfile relative_path_from ","SharedHelpers  pwd ","Bundler  default_lockfile ","@specs values sort_by ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Source LocalRubygems  new ","Bundler  feature_flag disable_multisource? ","(str \"^[^\\\\s]\") match? ","lockfile match? ","@specs values  values ","@specs values sort_by  values ","@specs values  values sort_by ","@specs values sort_by  values sort_by "]}," Bundler LazySpecification method_missing":{"type":"method","name":"method_missing","children":[],"call":["@specification send "," raise ","args inspect ","Gem Specification  new respond_to? ","Gem Specification  new "," respond_to? ","method == "]}," Bundler LazySpecification to_s":{"type":"method","name":"to_s","children":[],"call":[" version "," name "," platform "," platform nil? "," platform == "]}," Bundler LazySpecification respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@specification respond_to? "]}," Bundler LazySpecification __materialize__":{"type":"method","name":"__materialize__","children":[],"call":[" source specs search last "," source specs search ","Gem Dependency  new "," version "," name "," source specs "," source "," source [] ","s source= "," source gemspec tap "," source gemspec "," source gemspec name == "," source gemspec name "," source is_a? ","Dependency  new ","Bundler  settings [] ","Bundler  settings ","Bundler  ui warn "," platform ","search platform ","Bundler  ui ","search runtime_dependencies - empty? ! ","search runtime_dependencies - empty? ","search runtime_dependencies - ","d type == ","d type "," dependencies reject "," dependencies ","search runtime_dependencies ","search platform != ","Gem Platform  new != ","Gem Platform  new ","search dependencies= ","search is_a? ","Bundler  feature_flag specific_platform? ","Bundler  feature_flag ","candidates last ","same_platform_candidates last ","MatchPlatform  platforms_match? ","spec platform ","candidates select "," ruby_platform_materializes_to_ruby_platform? ","installable_candidates last ","spec required_rubygems_version satisfied_by? ","Gem  rubygems_version ","spec required_rubygems_version ","spec required_ruby_version satisfied_by? ","Gem  ruby_version ","spec required_ruby_version ","spec is_a? ! ","spec is_a? ","same_platform_candidates select ","Gem Platform  local ","search full_name == "," full_name ","search full_name ","Bundler  frozen_bundle? ","search nil? ","candidates reverse find ","candidates reverse ","spec matches_current_rubygems? ","spec matches_current_ruby? "," source specs  source specs search last  last "," source specs installable_candidates last  last "," source specs candidates last  last "," source specs  source specs search last  "," source specs installable_candidates last  "," source specs candidates last  "," source specs search last  platform ","installable_candidates last  platform ","candidates last  platform "," source specs search last  runtime_dependencies - empty? ! ","installable_candidates last  runtime_dependencies - empty? ! ","candidates last  runtime_dependencies - empty? ! "," source specs search last  runtime_dependencies - empty? ","installable_candidates last  runtime_dependencies - empty? ","candidates last  runtime_dependencies - empty? "," source specs search last  runtime_dependencies - ","installable_candidates last  runtime_dependencies - ","candidates last  runtime_dependencies - "," source specs search last  runtime_dependencies ","installable_candidates last  runtime_dependencies ","candidates last  runtime_dependencies "," source specs search last  platform != ","installable_candidates last  platform != ","candidates last  platform != "," source specs search last  dependencies= ","installable_candidates last  dependencies= ","candidates last  dependencies= "," source specs search last  is_a? ","installable_candidates last  is_a? ","candidates last  is_a? "," source specs search  last ","same_platform_ source specs search  last "," source specs search  select ","installable_ source specs search  last ","same_platform_ source specs search  select "," source specs search last  full_name == ","installable_candidates last  full_name == ","candidates last  full_name == "," source specs search last  full_name ","installable_candidates last  full_name ","candidates last  full_name "," source specs search last  nil? ","installable_candidates last  nil? ","candidates last  nil? "," source specs search  reverse find "," source specs search  reverse "]}," Bundler LazySpecification to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << ","dep to_lock ","dep type == ","dep type ","(send\n  (send nil :dependencies) :sort_by) each ","d name "," dependencies sort_by "," dependencies "," platform "," version "," name "," platform nil? "," platform == ","d to_s ","(send\n  (send nil :dependencies) :sort_by) uniq each ","(send\n  (send nil :dependencies) :sort_by) uniq "," dependencies sort_by uniq each "," dependencies sort_by uniq ","String  new ","String  new  << "]}," Bundler LazySpecification satisfies?":{"type":"method","name":"satisfies?","children":[],"call":["dependency requirement satisfied_by? ","Gem Version  new ","dependency requirement ","@name == ","dependency name ","effective_requirement satisfied_by? ","Gem Requirement  new ","dependency requirement == ","Gem Requirement  default ","dependency requirement  satisfied_by? ","Gem Requirement  new  satisfied_by? "]}," Bundler LazySpecification full_name":{"type":"method","name":"full_name","children":[],"call":[" platform "," platform nil? "," platform == "]}," Bundler LazySpecification initialize":{"type":"method","name":"initialize","children":[],"call":[" default_force_ruby_platform "]}," Bundler Installer generate_bundler_executable_stubs":{"type":"method","name":"generate_bundler_executable_stubs","children":[],"call":["f puts ","ERB  new result "," binding ","ERB  new ","File  open ","executable == ","spec executables each ","spec executables ","Bundler  default_gemfile relative_path_from ","Bundler  default_gemfile ","File  read ","File  expand_path ","Bundler  bin_path ","Thor Util  ruby_command ","Bundler  ui warn ","Bundler  ui ","(lvar :items) compact join ","(lvar :items) compact ","exists [] ","exists [] join ","exists [] empty? ","exists join ","exists size ","exists any? ","options [] ","511 & ","File  umask ~ ","File  umask ","exists << ","options [] ! ","File  exist? ","spec name ","bins join ","options each ","(begin\n  (send\n    (lvar :spec) :name)) + ","options any? ","options []= ","dep name ","bins empty? ","@definition specs [] first executables ","@definition specs [] first ","@definition specs [] ","@definition specs ","spec runtime_dependencies each ","spec runtime_dependencies ","spec executables empty? ","spec executables= ","spec name == ","RUBY_VERSION  >= ","File  exists? ","Bundler  definition specs [] first executables ","Bundler  definition specs [] first ","Bundler  definition specs [] ","Bundler  definition specs ","Bundler  definition ","exists empty? ! ","exists empty? ","spec dependencies each ","spec dependencies ","File  write ","prefix + "," require ","Gem  win_platform? "," __dir__ ","Bundler  Bundler  bin_path  ","Thor Util  Thor Util  ruby_command  ","(lvar :exists [] join ) compact join ","(lvar :exists [] join ) compact ","@definition specs [] first executables  join ","Bundler  definition specs [] first executables  join ","@definition specs [] first executables  empty? ","Bundler  definition specs [] first executables  empty? "]}," Bundler Index ==":{"type":"method","name":"==","children":[],"call":["(send\n  (send\n    (lvar :s) :dependencies) :&\n  (send\n    (lvar :s2) :dependencies)) empty? ","s dependencies & ","s2 dependencies ","s dependencies ","o [] first ","o [] "," all? ","spec source == ","other_spec source ","spec source ","(send\n  (send\n    (lvar :spec) :dependencies) :&\n  (send\n    (lvar :other_spec) :dependencies)) empty? ","spec dependencies & ","other_spec dependencies ","spec dependencies ","other [] first ","other [] "," dependencies_eql? ","(send\n  (send\n    (lvar :s) :dependencies) :&\n  (send\n    (lvar :o [] first ) :dependencies)) empty? ","o [] first  dependencies ","o [] first  source ","other [] first  source ","(send\n  (send\n    (lvar :spec) :dependencies) :&\n  (send\n    (lvar :o [] first ) :dependencies)) empty? ","(send\n  (send\n    (lvar :spec) :dependencies) :&\n  (send\n    (lvar :other [] first ) :dependencies)) empty? ","other [] first  dependencies "]}," Bundler Index search_for_all_platforms":{"type":"method","name":"search_for_all_platforms","children":[],"call":["s platform to_s ","s platform ","s platform to_s == ","s version ","found sort_by ","spec version prerelease? ","spec version ","found reject! ","dependency =~ ","specs select ","specs all? ","dependency requirement prerelease? ","dependency requirement ","@specs [] + ","@specs [] ","dependency name ","dependency matches_spec? "," specs_by_name + "," specs_by_name ","@specs [] +  select ","@specs []  select "," specs_by_name +  select ","@specs [] +  all? ","@specs []  all? "," specs_by_name +  all? ","@@specs [] +  [] + ","@@specs []  [] + ","@ specs_by_name +  [] + ","@@specs [] +  [] ","@@specs []  [] ","@ specs_by_name +  [] "," @specs [] + _by_name + "," @specs [] _by_name + ","  specs_by_name + _by_name + "," @specs [] + _by_name "," @specs [] _by_name ","  specs_by_name + _by_name "]}," Bundler GraphNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Graph populate":{"type":"method","name":"populate","children":[],"call":["@groups freeze ","@nodes freeze ","from dependencies << ","from dependencies ","spec runtime_dependencies each ","spec runtime_dependencies ","@nodes [] ","spec name ","@env specs each ","@env specs ","group << ","@groups []= ","@groups [] ","@groups has_key? ","dependency groups each ","dependency groups ","node is_user= ","dependency name ","@env current_dependencies each ","@env current_dependencies ","@nodes []= ","GraphNode  new ","spec version ","@@groups []= s freeze ","@@groups [] s freeze ","@@nodes [] s freeze ","@nodes []  dependencies << ","@nodes []  dependencies ","@@nodes [] s [] ","@groups []=  << ","@groups []  << ","@@groups []= s []= ","@@groups [] s []= ","@@groups []= s [] ","@@groups [] s [] ","@@groups []= s has_key? ","@@groups [] s has_key? ","dependency @groups []= s each ","dependency @groups [] s each ","dependency @groups []= s ","dependency @groups [] s ","@nodes []  is_user= ","@@nodes [] s []= "]}," Bundler Graph viz":{"type":"method","name":"viz","children":[],"call":["graph_viz output ","graph_viz add_edge ","viz_nodes [] ","dependency name ","options []= ","dependency requirement to_s ","dependency requirement ","dependency requirement to_s != "," nodes [] is_user "," nodes [] "," nodes "," nodes [] dependencies each "," nodes [] dependencies ","viz_nodes each ","group_nodes [] ","(send\n  (send\n    (ivar :@groups) :keys) :select) each ","group != ","@groups keys select ","@groups keys ","dependencies each ","group_nodes []= ","graph_viz add_node ","(pair\n  (sym :shape)\n  (str \"folder\")) merge ","name to_s ","@groups each ","viz_nodes []= ","options merge! ","node is_user ","label << ","node version ","name dup "," nodes each ","graph_viz edge []= ","graph_viz edge ","graph_viz node []= ","graph_viz node ","GraphViz  new "," populate "," require ","(pair\n  (sym :shape)\n  (str \"box3d\")) merge ","GraphVizClient  new run ","GraphVizClient  new ","GraphViz  new  output ","GraphViz  new  add_edge ","GraphViz  new  add_node ","name dup  << ","GraphViz  new  edge []= ","GraphViz  new  edge ","GraphViz  new  node []= ","GraphViz  new  node "]}," Bundler Graph groups":{"type":"method","name":"groups","children":[],"call":[" populate "]}," Bundler Graph nodes":{"type":"method","name":"nodes","children":[],"call":[" populate "]}," Bundler Graph initialize":{"type":"method","name":"initialize","children":[],"call":[" _populate_relations ","h []= ","Set  new ","Hash  new "," _patching_gem_dependency_class ","without map "]}," Bundler GemHelper sh_with_code":{"type":"method","name":"sh_with_code","children":[],"call":["block call ","stderr read ","stdout read ","$? == ","Open3  popen3 ","Dir  chdir "," base ","Bundler  ui debug ","Bundler  ui ","cmd << ","SharedHelpers  chdir ","status zero? ","$? exitstatus ","String  new ","$? exitstatus  zero? ","$? exit$? exitstatus  "]}," Bundler GemHelper sh":{"type":"method","name":"sh","children":[],"call":[" raise ","out empty? ","code == "," sh_with_code ","code zero? ","cmd shelljoin ","cmd respond_to? ","status success? "," sh_with_status ","cmd shelljoin  shelljoin ","cmd shelljoin  respond_to? "]}," Bundler GemHelper name":{"type":"method","name":"name","children":[],"call":[" gemspec name "," gemspec "]}," Bundler GemHelper version_tag":{"type":"method","name":"version_tag","children":[],"call":[" version "]}," Bundler GemHelper version":{"type":"method","name":"version","children":[],"call":[" gemspec version "," gemspec "]}," Bundler GemHelper tagged_sha":{"type":"method","name":"tagged_sha","children":[],"call":[" sh split first [] "," sh split first "," sh split "," sh "," version_tag "]}," Bundler GemHelper tag_version":{"type":"method","name":"tag_version","children":[],"call":[" raise "," sh "," version_tag ","Bundler  ui error "," tagged_sha ","Bundler  ui "," block_given? ","Bundler  ui confirm "," version "," current_version_tag "," sh_with_code "," sh_with_status "]}," Bundler GemHelper clean?":{"type":"method","name":"clean?","children":[],"call":[" sh split size zero? "," sh split size "," sh split "," sh "," sh_with_code [] == "," sh_with_code [] "," sh_with_code ","code == "," sh_with_status [] success? "," sh_with_status [] "," sh_with_status "]}," Bundler GemHelper guard_clean":{"type":"method","name":"guard_clean","children":[],"call":[" raise "," clean? "," committed? "]}," Bundler GemHelper guard_already_tagged":{"type":"method","name":"guard_already_tagged","children":[],"call":[" raise "," sh split include? "," version_tag "," sh split "," sh "," current_version_tag "]}," Bundler GemHelper perform_git_push":{"type":"method","name":"perform_git_push","children":[],"call":[" raise ","err == "," sh_with_code ","code == ","cmd shelljoin ","cmd respond_to? ","status success? "," sh_with_status ","cmd shellsplit ","cmd shelljoin  shelljoin ","cmd shelljoin  respond_to? ","cmd shelljoin  shellsplit "]}," Bundler GemHelper git_push":{"type":"method","name":"git_push","children":[],"call":["Bundler  ui confirm ","Bundler  ui "," perform_git_push "," sh "," version_tag "," default_remote "," current_branch ","(str \"git push \") shellsplit "]}," Bundler GemHelper built_gem_path":{"type":"method","name":"built_gem_path","children":[],"call":["(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (send nil :base)\n      (dstr\n        (begin\n          (send nil :name))\n        (str \"-*.gem\")))) :sort_by) last ","File  mtime ","Dir  [] sort_by ","Dir  [] ","File  join "," name "," base ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (dstr\n      (begin\n        (send nil :name))\n      (str \"-*.gem\"))\n    (send nil :base)) :sort_by) last ","Gem Util  glob_files_in_dir sort_by ","Gem Util  glob_files_in_dir "]}," Bundler GemHelper rubygem_push":{"type":"method","name":"rubygem_push","children":[],"call":["Bundler  ui confirm "," version "," name ","Bundler  ui "," sh "," raise ","out [] ","Pathname  new expand_path exist? ","Pathname  new expand_path ","Pathname  new ","gem_command << ","@gemspec metadata [] ","@gemspec metadata ","@gemspec respond_to? "," gemspec respond_to? "," gemspec ","Pathname  new expand_path file? ","Bundler  user_home join file? ","Bundler  user_home join ","Bundler  user_home "," gem_key "," gem_push_host "," allowed_push_host "," sh_with_input ","gem_command << << ","cmd << << ","cmd << "," gem_command "," @gemspec metadata []  "]}," Bundler GemHelper release_gem":{"type":"method","name":"release_gem","children":[],"call":[" rubygem_push "," git_push "," tag_version "," build_gem "," guard_already_tagged "," guard_clean "," gem_push? "," already_tagged? "]}," Bundler GemHelper install_gem":{"type":"method","name":"install_gem","children":[],"call":["Bundler  ui confirm "," version "," name ","Bundler  ui ","Bundler  ui error ","err [] "," sh_with_code "," build_gem "," sh "," raise ","out [] ","status success? "," sh_with_status ","cmd << ","ENV  [] ","cmd shellsplit "," gem_command ","built_gem_path to_s "," build_ENV  []  "," ENV  [] _command "," build_gem  to_s ","built_ENV  [] _path to_s "]}," Bundler GemHelper build_gem":{"type":"method","name":"build_gem","children":[],"call":["File  join "," base ","Bundler  ui confirm "," version "," name ","Bundler  ui ","FileUtils  mv "," built_gem_path ","FileUtils  mkdir_p ","File  basename "," raise ","err [] "," sh "," spec_path ","out [] ","out [] ! ","SharedHelpers  filesystem_access ","ENV  [] ","(begin\n  (send nil :gem_command)) shellsplit "," gem_command ","(begin\n  (lvar :gem)) shellsplit "," spec_path shellescape "," built_ENV  [] _path ","(begin\n  (send nil :ENV  [] _command)) shellsplit "," ENV  [] _command ","(begin\n  (lvar :ENV  [] )) shellsplit "]}," Bundler GemHelper install":{"type":"method","name":"install","children":[],"call":[" release_gem "," task "," desc "," version "," name "," version_tag "," install_gem "," build_gem "," push_gem "," current_version "," current_version_tag ","GemHelper  instance= "," rubygem_push "," gem_push? "," git_push "," tag_version "," already_tagged? "," guard_clean ","args [] "," gem_push_host "," build_checksum "]}," Bundler GemHelper initialize":{"type":"method","name":"initialize","children":[],"call":["Bundler  load_gemspec ","gemspecs first "," raise ","gemspecs size == ","gemspecs size ","Dir  [] ","File  join ","Bundler  ui= ","UI Shell  new ","Thor Shell Color  new "," determine_name ","Thor Base  shell new ","Thor Base  shell ","SharedHelpers  pwd ","Dir  pwd ","Gem Util  glob_files_in_dir ","File  expand_path ","Dir  []  first ","Gem Util  glob_files_in_dir  first ","Dir  []  size == ","Gem Util  glob_files_in_dir  size == ","Dir  []  size ","Gem Util  glob_files_in_dir  size "]}," Bundler GemHelper install_tasks":{"type":"method","name":"install_tasks","children":[],"call":[" new install "," new ","opts [] "]}," Bundler Environment update":{"type":"method","name":"update","children":[],"call":[]}," Bundler Environment current_dependencies":{"type":"method","name":"current_dependencies","children":[],"call":["@definition current_dependencies "]}," Bundler Environment inspect":{"type":"method","name":"inspect","children":[],"call":["@definition to_lock inspect ","@definition to_lock "]}," Bundler Dsl rubygems_source":{"type":"method","name":"rubygems_source","children":[],"call":["@sources << ","@rubygems_source add_remote ","Source Rubygems  new "]}," Bundler Dsl env":{"type":"method","name":"env","children":[],"call":[]}," Bundler Dsl platforms":{"type":"method","name":"platforms","children":[],"call":["@platforms pop ","platforms each ","@platforms concat "]}," Bundler Dsl gemspec":{"type":"method","name":"gemspec","children":[],"call":[" raise "," gem ","dep requirement to_s ","dep requirement ","dep name ","spec development_dependencies each ","spec development_dependencies "," group ","spec runtime_dependencies each ","spec runtime_dependencies ","spec name ","Gem Specification  load ","gemspecs first ","gemspecs size ","Dir  [] ","File  join ","File  expand_path ","Bundler  default_gemfile dirname ","Bundler  default_gemfile ","opts [] ","dep requirement as_list ","Bundler  load_gemspec ","dep requirement as_list + "," file ","@gemspecs << ","Bundler Dependency REVERSE_PLATFORM_MAP  [] ","spec platform ","Bundler GemHelpers  generic_local_platform "," gemfile_root join "," gemfile_root ","specs first ","s match_platform ","Gem Platform  local ","specs find ","specs_by_name_and_version values first ","specs_by_name_and_version values ","specs_by_name_and_version size ","s version ","s name ","gemspecs group_by ","Index  sort_specs ","s name != ","gemspecs reject! ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact ","Dir  [] map ","Bundler  local_platform ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact ","Gem Util  glob_files_in_dir map ","Gem Util  glob_files_in_dir ","dep opts []  ","Gem Specification  load  development_dependencies each ","Bundler  load_gemspec  development_dependencies each ","Gem Specification  load  development_dependencies ","Bundler  load_gemspec  development_dependencies ","Gem Specification  load  runtime_dependencies each ","Bundler  load_gemspec  runtime_dependencies each ","Gem Specification  load  runtime_dependencies ","Bundler  load_gemspec  runtime_dependencies ","Gem Specification  load  name ","Bundler  load_gemspec  name ","spec opts []  ","gemGem Specification  load s first ","gemBundler  load_gemspec s first ","Dir  []  first ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact  first ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact  first ","gemspecs_by_name_and_version values first  first ","gemGem Specification  load s size ","gemBundler  load_gemspec s size ","Dir  []  size ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact  size ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact  size ","gemspecs_by_name_and_version values first  size ","File  expand_File  expand_path  ","Bundler  default_gemfile diropts []  ","Bundler  load_gemGem Specification  load  ","Bundler  load_gemBundler  load_gemspec  ","@gemGem Specification  load s << ","@gemBundler  load_gemspec s << ","@Dir  []  << ","@(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact  << ","@(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact  << ","@gemspecs_by_name_and_version values first  << ","Gem Specification  load  platform ","Bundler  load_gemspec  platform ","Gem Specification  load s first ","Bundler  load_gemspec s first ","specs_by_name_and_version values first  first ","Gem Specification  load s find ","Bundler  load_gemspec s find ","specs_by_name_and_version values first  find ","Gem Specification  load s_by_name_and_version values first ","Bundler  load_gemspec s_by_name_and_version values first ","specs_by_name_and_version values first _by_name_and_version values first ","specs_by_opts [] _and_version values first ","Gem Specification  load s_by_name_and_version values ","Bundler  load_gemspec s_by_name_and_version values ","specs_by_name_and_version values first _by_name_and_version values ","specs_by_opts [] _and_version values ","Gem Specification  load s_by_name_and_version size ","Bundler  load_gemspec s_by_name_and_version size ","specs_by_name_and_version values first _by_name_and_version size ","specs_by_opts [] _and_version size ","s opts []  ","gemGem Specification  load s group_by ","gemBundler  load_gemspec s group_by ","Dir  []  group_by ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact  group_by ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact  group_by ","gemspecs_by_name_and_version values first  group_by ","Index  sort_Gem Specification  load s ","Index  sort_Bundler  load_gemspec s ","Index  sort_specs_by_name_and_version values first  ","s opts []  != ","gemGem Specification  load s reject! ","gemBundler  load_gemspec s reject! ","Dir  []  reject! ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemspec\"))) :map) compact  reject! ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact  reject! ","gemspecs_by_name_and_version values first  reject! ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemGem Specification  load \"))) :map) compact ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_path)\n      (str \"{,*}.gemBundler  load_gemspec \"))) :map) compact ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :expanded_File  expand_path )\n      (str \"{,*}.gemspec\"))) :map) compact ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar :File  expand_path )\n      (str \"{,*}.gemspec\"))) :map) compact ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (const nil :File) :join\n      (lvar : gemfile_root join )\n      (str \"{,*}.gemspec\"))) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemGem Specification  load \")\n    (lvar :expanded_path)) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemBundler  load_gemspec \")\n    (lvar :expanded_path)) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_File  expand_path )) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :File  expand_path )) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :glob_files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar : gemfile_root join )) :map) compact ","(send\n  (send\n    (const\n      (const nil :Gem) :Util) :opts [] _files_in_dir\n    (str \"{,*}.gemspec\")\n    (lvar :expanded_path)) :map) compact ","Gem Util  opts [] _files_in_dir map ","Gem Util  opts [] _files_in_dir "]}," Bundler Dependency mswin?":{"type":"method","name":"mswin?","children":[],"call":[]}," Bundler Dependency jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_ENGINE  == "]}," Bundler Dependency mri_19?":{"type":"method","name":"mri_19?","children":[],"call":["RUBY_VERSION  >= "," mri? ","RUBY_VERSION  < "," on_19? "]}," Bundler Dependency mri_18?":{"type":"method","name":"mri_18?","children":[],"call":["RUBY_VERSION  < "," mri? "," on_18? "]}," Bundler Dependency mri?":{"type":"method","name":"mri?","children":[],"call":["RUBY_ENGINE  == ","(const nil :RUBY_ENGINE) ! "," mswin? ! "," mswin? "]}," Bundler Dependency ruby_19?":{"type":"method","name":"ruby_19?","children":[],"call":["RUBY_VERSION  >= "," ruby? ","RUBY_VERSION  < "," on_19? "]}," Bundler Dependency ruby_18?":{"type":"method","name":"ruby_18?","children":[],"call":["RUBY_VERSION  < "," ruby? "," on_18? "]}," Bundler Dependency ruby?":{"type":"method","name":"ruby?","children":[],"call":["RUBY_ENGINE  == ","(const nil :RUBY_ENGINE) ! "," mswin? ! "," mswin? "]}," Bundler Dependency to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << "," source "," requirement to_s "," requirement "," requirement == ","Gem Requirement  default "," name ","reqs join "," requirement requirements map "," requirement requirements "]}," Bundler Dependency current_platform?":{"type":"method","name":"current_platform?","children":[],"call":[" send ","@platforms any? ","@platforms empty? ","Bundler  current_ruby send ","Bundler  current_ruby "]}," Bundler Dependency current_env?":{"type":"method","name":"current_env?","children":[],"call":["ENV  [] ","@env to_s ","ENV  [] =~ ","key to_s ","ENV  [] == ","String  === ","@env all? ","Hash  === ","val is_a? ","@env is_a? "]}," Bundler Dependency should_include?":{"type":"method","name":"should_include?","children":[],"call":[" current_platform? "," current_env? "]}," Bundler Dependency gem_platforms":{"type":"method","name":"gem_platforms","children":[],"call":["valid_platforms include? ","PLATFORM_MAP  [] ","@platforms each ","@platforms empty? ","valid_platforms & ","(send\n  (ivar :@platforms) :map) compact uniq ","(send\n  (ivar :@platforms) :map) compact ","@platforms map "," expanded_platforms compact uniq "," expanded_platforms compact "," expanded_platforms ","(send\n  (lvar :valid_generic_platforms) :select) keys ","filtered_generic_platforms include? ","valid_generic_platforms select ","valid_generic_platforms values & ","valid_generic_platforms values ","(send\n  (lvar :valid_platforms) :map) to_h ","GemHelpers  generic ","valid_platforms map "," expanded_platforms include? ","valid_platforms select "," force_ruby_platform ","valid_PLATFORM_MAP  [] s include? ","@PLATFORM_MAP  [] s each ","@PLATFORM_MAP  [] s empty? ","valid_PLATFORM_MAP  [] s & ","(send\n  (ivar :@PLATFORM_MAP  [] s) :map) compact uniq ","(send\n  (ivar :@PLATFORM_MAP  [] s) :map) compact ","@PLATFORM_MAP  [] s map "," expanded_PLATFORM_MAP  [] s compact uniq "," expanded_PLATFORM_MAP  [] s compact "," expanded_PLATFORM_MAP  [] s ","(send\n  (lvar :valid_generic_PLATFORM_MAP  [] s) :select) keys ","(send\n  (lvar :(send\n  (lvar :valid_platforms) :map) to_h ) :select) keys ","filtered_generic_PLATFORM_MAP  [] s include? ","valid_generic_platforms values &  include? ","valid_generic_PLATFORM_MAP  [] s select ","(send\n  (lvar :valid_platforms) :map) to_h  select ","valid_generic_PLATFORM_MAP  [] s values & ","(send\n  (lvar :valid_platforms) :map) to_h  values & ","valid_generic_PLATFORM_MAP  [] s values ","(send\n  (lvar :valid_platforms) :map) to_h  values ","(send\n  (lvar :valid_PLATFORM_MAP  [] s) :map) to_h ","valid_PLATFORM_MAP  [] s map "," expanded_PLATFORM_MAP  [] s include? ","valid_PLATFORM_MAP  [] s select "," force_ruby_PLATFORM_MAP  []  "]}," Bundler Definition requested_dependencies":{"type":"method","name":"requested_dependencies","children":[],"call":["(send\n  (send\n    (lvar :d) :groups) :&\n  (lvar :groups)) empty? ","d groups & ","d groups ","d should_include? ! ","d should_include? "," dependencies reject "," dependencies ","g to_sym ","groups map! "," groups - ","Bundler  settings without ","Bundler  settings "," groups "," requested_groups "," dependencies_for ","(send\n  (send\n    (lvar :d) : groups - ) :&\n  (lvar : groups - )) empty? ","(send\n  (send\n    (lvar :d) : requested_groups ) :&\n  (lvar : requested_groups )) empty? ","d  groups -  & ","d  requested_groups  & ","d  groups -  ","d  requested_groups  "," groups -  map! "," requested_groups  map! ","  groups -  - ","  requested_groups  - ","  groups -  ","  requested_groups  "," requested_ groups -  "," requested_ requested_groups  "]}," Bundler Definition sorted_sources":{"type":"method","name":"sorted_sources","children":[],"call":["s to_s ","s is_a? ","@sources sort_by "]}," Bundler Definition expand_dependencies":{"type":"method","name":"expand_dependencies","children":[],"call":["deps << ","DepProxy  new ","p == "," generic ","Gem Platform  local ","dep gem_platforms each ","dep gem_platforms ","Dependency  new ","dep respond_to? ","dependencies each ","Gem Platform  local to_generic ","dep current_platform? "," generic_local_platform ","platforms each ","Bundler  ui warn ","dep platforms join ","dep platforms ","(send\n  (send\n    (lvar :dep) :platforms) :map) join ","Dependency PLATFORM_MAP  [] ","dep platforms map ","@platforms join ","Bundler  ui ","platforms empty? ","dep current_platform? ! ","remote ! ","mapped_platforms join ","Resolver  sort_platforms ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","dep expanded_platforms "," expand_dependency_with_platforms ","Dependency  new s << ","Dependency  new  gem_platforms each ","dep gem_dep gem_platforms  each ","Dependency  new  gem_platforms ","dep gem_dep gem_platforms  ","Dependency  new  respond_to? ","Dependency  new endencies each ","Dependency  new  current_platform? ","dep gem_platforms  each ","Dependency  new  platforms join ","dep dep gem_platforms  join ","Dependency  new  platforms ","dep dep gem_platforms  ","(send\n  (send\n    (lvar :Dependency  new ) :platforms) :map) join ","(send\n  (send\n    (lvar :dep) :dep gem_platforms ) :map) join ","Dependency  new  platforms map ","dep dep gem_platforms  map ","@dep gem_platforms  join ","dep gem_platforms  empty? ","Dependency  new  current_platform? ! ","mapped_dep gem_platforms  join ","dep expanded_platforms  join ","Resolver  sort_dep gem_platforms  ","Dependency  new  expanded_platforms ","dep expanded_dep gem_platforms  "," expand_Dependency  new endency_with_platforms "," expand_dependency_with_dep gem_platforms  "]}," Bundler Definition expanded_dependencies":{"type":"method","name":"expanded_dependencies","children":[],"call":[" expand_dependencies "," dependencies "," dependencies + ","Dependency  new "," concat_ruby_version_requirements "," locked_ruby_version_object ","@unlock [] ","RubyVersion  system ","@ruby_version exact? ! ","@ruby_version exact? ","ruby_versions empty? "," metadata_dependencies "," remove_ruby_from_platforms_if_necessary! "," dependencies_with_bundler + "," dependencies_with_bundler "," concat_ruby_version_requirements  empty? "]}," Bundler Definition satisfies_locked_spec?":{"type":"method","name":"satisfies_locked_spec?","children":[],"call":["s source == ","dep source ","s source ","dep source ! ","s satisfies? ","@locked_specs any? ","@last_resolve any? ","s source include? ","@locked_specs [] any? ","@locked_specs [] "]}," Bundler Definition in_locked_deps?":{"type":"method","name":"in_locked_deps?","children":[],"call":["dep source == ","d source ","dep source ","dep == ","@locked_deps any? ","locked_dep source include? ","locked_dep source "]}," Bundler Definition converge_locked_specs":{"type":"method","name":"converge_locked_specs","children":[],"call":["source unlock! ","s source == ","s source ","diff any? ","resolve any? ","source respond_to? ","@sources each ","@locked_specs to_a - ","resolve to_a ","@locked_specs to_a ","resolve for ","@unlock [] "," expand_dependencies ","SpecSet  new ","converged << ","s dependencies sort == ","other dependencies sort ","other dependencies ","s dependencies sort ","s dependencies ","s source specs [] first ","s source specs [] ","s source specs ","s source instance_of? ","@unlock [] include? ","s name ","s source nil? ","s source= ","@sources find ","@locked_specs each ","@unlock [] << ","dep source specs each ","dep source specs ","dep source ","dep source unlock! ","dep source respond_to? ","dep source != ","locked_dep source ","locked_dep ! ","dep source is_a? ","deps << "," satisfies_locked_spec? "," in_locked_deps? ","dep == ","@locked_deps find ","@dependencies each ","@last_resolve select! ","resolve names ","@last_resolve each ","s source specs [] empty? ","@last_resolve to_a - ","@last_resolve to_a ","diff empty? ! ","diff empty? ","dep current_platform? ","deps2 sort ","d type != ","d type ","other dependencies select "," sources all_sources each "," sources all_sources "," sources "," sources get ","s satisfies? ","@dependencies find ","locked_deps_hash [] ","hsh []= ","@locked_deps inject ","s source name ","runtime_dependencies sort == ","runtime_dependencies sort ","s dependencies select ","locked_dep == ","@locked_deps [] ","dep name ","other_sources_specs [] first ","other_sources_specs [] "," raise ","locked_spec source == ","locked_spec source ","@locked_specs for none? ","@locked_specs for "," requested_dependencies ","Bundler  feature_flag unlock_source_unlocks_spec? ","Bundler  feature_flag ","resolve for ! ","s dependencies replace ","new_spec dependencies ","new_runtime_deps all? ","new_runtime_deps sort == ","old_runtime_deps sort ","new_runtime_deps sort ","new_spec dependencies select ","new_specs [] first ","new_specs [] "," requested_dependencies & ","resolve for reject "," multisource_allowed? "," converge_specs ","converged reject ","@locked_specs to_a -  any? ","@last_resolve to_a -  any? ","resolve for  any? ","SpecSet  new  any? "," converge_specs  any? ","resolve for  to_a ","SpecSet  new  to_a "," converge_specs  to_a ","resolve for  for ","SpecSet  new  for "," converge_specs  for "," converge_specs  << ","s source specs [] first  dependencies sort ","other_sources_specs [] first  dependencies sort ","s source specs [] first  dependencies ","other_sources_specs [] first  dependencies ","locked_deps_hash []  source ","@locked_deps []  source ","locked_deps_hash []  ! ","@locked_deps []  ! "," in_locked_deps_hash [] s? "," in_@locked_deps [] s? ","@locked_deps_hash [] s find ","@@locked_deps [] s find ","@last_resolve for  select! ","@last_SpecSet  new  select! ","@last_ converge_specs  select! ","resolve for  names ","SpecSet  new  names "," converge_specs  names ","@last_resolve for  each ","@last_SpecSet  new  each ","@last_ converge_specs  each ","@last_resolve for  to_a - ","@last_SpecSet  new  to_a - ","@last_ converge_specs  to_a - ","@last_resolve for  to_a ","@last_SpecSet  new  to_a ","@last_ converge_specs  to_a ","@locked_specs to_a -  empty? ! ","@last_resolve to_a -  empty? ! ","@locked_specs to_a -  empty? ","@last_resolve to_a -  empty? ","s source specs [] first  dependencies select ","other_sources_specs [] first  dependencies select ","locked_deps_hash [] s_hash [] ","@locked_deps [] s_hash [] ","@locked_deps_hash [] s inject ","@@locked_deps [] s inject ","locked_deps_hash []  == ","@locked_deps []  == ","@locked_deps_hash [] s [] ","@@locked_deps [] s [] ","s source specs [] first _sources_specs [] first ","other_sources_specs [] first _sources_specs [] first ","s source specs [] first _sources_specs [] ","other_sources_specs [] first _sources_specs [] ","Bundler  feature_flag Bundler  feature_flag unlock_source_unlocks_spec? ? ","resolve for  for ! ","SpecSet  new  for ! "," converge_specs  for ! ","new_specs [] first  dependencies ","new_specs [] first  dependencies select ","new_specs [] first s [] first ","new_specs [] first s [] ","resolve for  for reject ","SpecSet  new  for reject "," converge_specs  for reject "," converge_specs  reject "]}," Bundler Definition converge_dependencies":{"type":"method","name":"converge_dependencies","children":[],"call":["dep source= ","dep source == ","dep source ","@sources find ","(send\n  (ivar :@dependencies) :+\n  (ivar :@locked_deps)) each ","@dependencies + "," raise ","Set  new != ","Set  new "," sources get "," sources ","dep platforms concat uniq! ","dep platforms concat ","(send\n  (ivar :@platforms) :map) flatten ","Dependency REVERSE_PLATFORM_MAP  [] ","@platforms map ","dep platforms ","dep source is_a? ","locked_source source ","locked_source source path exist? ","locked_source source path ","locked_source source instance_of? ","locked_source respond_to? ","locked_source nil? ! ","locked_source nil? ","Bundler  settings [] ","Bundler  settings ","(send\n  (ivar :@locked_deps) :select) last ","d name == ","dep name ","d name ","@locked_deps select ","@locked_deps map ","@dependencies map ","Gem Dependency  new ","d requirement as_list ","d requirement "," proc ","dependency requirement != ","locked_dep requirement ","dependency requirement ","locked_dep instance_variable_set ","dependency type ","@locked_deps [] ","dependency name ","@dependencies each ","(send\n  (ivar :@dependencies) :+\n  (send\n    (ivar :@locked_deps) :values)) each ","@locked_deps values ","Bundler  frozen? ","Bundler  frozen_bundle? ","(send\n  (ivar :@dependencies) :+\n  (send nil :locked_dependencies)) each "," locked_dependencies ","dep requirement != ","dep requirement ","dep type "," unlocking? ","(send\n  (ivar :@dependencies) :+\n  (ivar :@@locked_deps [] s)) each ","(send\n  (ivar :@locked_deps) :select) last  source ","@locked_deps []  source ","(send\n  (ivar :@locked_deps) :select) last  source path exist? ","@locked_deps []  source path exist? ","(send\n  (ivar :@locked_deps) :select) last  source path ","@locked_deps []  source path ","(send\n  (ivar :@locked_deps) :select) last  source instance_of? ","@locked_deps []  source instance_of? ","(send\n  (ivar :@locked_deps) :select) last  respond_to? ","@locked_deps []  respond_to? ","(send\n  (ivar :@locked_deps) :select) last  nil? ! ","@locked_deps []  nil? ! ","(send\n  (ivar :@locked_deps) :select) last  nil? ","@locked_deps []  nil? ","(send\n  (ivar :@@locked_deps [] s) :select) last ","@@locked_deps [] s select ","@@locked_deps [] s map ","@locked_deps []  requirement ","@locked_deps []  instance_variable_set ","@@locked_deps [] s [] ","(send\n  (ivar :@dependencies) :+\n  (send\n    (ivar :@@locked_deps [] s) :values)) each ","@@locked_deps [] s values ","Bundler  Bundler  settings [] ? ","Bundler  Bundler  frozen? ? ","Bundler  Bundler  frozen_bundle? ? ","Bundler  Bundler  settings [] _bundle? ","Bundler  Bundler  frozen? _bundle? ","Bundler  Bundler  frozen_bundle? _bundle? ","(send\n  (ivar :@dependencies) :+\n  (send nil :@locked_deps [] endencies)) each "," @locked_deps [] endencies "]}," Bundler Definition converge_sources":{"type":"method","name":"converge_sources","children":[],"call":["source unlock! ","@unlock [] include? ","source name ","@unlock [] ","source respond_to? ","@sources each ","s == ","@locked_sources find ","@sources map! ","locked_gem merge_remotes ","Source Rubygems  === ","@sources find ","(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) | ","@locked_sources & ","changes | ","Set  new != ","Set  new ","locked_gem replace_remotes "," sources all_sources each "," sources all_sources "," sources "," sources replace_sources! ","locked_gem_sources each ","actual_remotes empty? ! ","actual_remotes empty? ","locked_gem_sources empty? ! ","locked_gem_sources empty? "," sources rubygems_remotes ","s kind_of? ","@locked_sources select ","s is_a? "," converge_path_source_to_gemspec_source ","spec source ","@locked_specs each ","@locked_sources map! "," converge_rubygems_sources ","gemfile_sources each ","actual_gem_sources map flatten uniq ","actual_gem_sources map flatten ","actual_gem_sources map ","actual_gem_sources empty? ","@sources rubygems_sources ","(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) |  each ","(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) |  map! ","(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) |  find ","(send\n  (ivar :@locked_sources) :&\n  (ivar :(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) | )) | ","changes |  | "," sources replace_sources!  | "," sources rubygems_remotes  empty? ! ","actual_gem_sources map flatten uniq  empty? ! "," sources rubygems_remotes  empty? ","actual_gem_sources map flatten uniq  empty? "," sources all_sources  each ","@sources rubygems_sources  map flatten uniq ","@sources rubygems_sources  map flatten ","@sources rubygems_sources  map ","@sources rubygems_sources  empty? ","(send\n  (ivar :@locked_sources) :&\n  (ivar :@sources)) |  rubygems_sources "]}," Bundler Definition pretty_dep":{"type":"method","name":"pretty_dep","children":[],"call":["msg << ","dep source ","dep requirement ","dep requirement == ","Gem Requirement  default ","dep name ","String  new ","SharedHelpers  pretty_dependency ","String  new  << "]}," Bundler Definition ensure_equivalent_gemfile_and_lockfile":{"type":"method","name":"ensure_equivalent_gemfile_and_lockfile","children":[],"call":[" raise ","changed any? ","deleted any? ","added any? ","msg << << ","changed join ","msg << ","deleted join ","added join ","changed << ","sources [] ","both_sources each ","deleted concat "," pretty_dep ","deleted_deps map ","deleted_deps any? ","added concat ","new_deps map ","new_deps any? ","@locked_deps - ","@dependencies - ","@dependencies != ","v [] == ","v [] ","both_sources delete_if ","both_sources [] []= ","d source ","both_sources [] ","d name ","@locked_deps each ","@dependencies each ","h []= ","Hash  new ","deleted_sources map ","deleted_sources any? ","new_sources map ","new_sources any? ","@locked_sources - ","@sources - ","@locked_sources != ","dep source ","lock_source can_lock? ! ","lock_source can_lock? ","lock_source nil? ! ","lock_source nil? ","dep nil? ! ","dep nil? ","gemfile_sources - "," sources lock_sources "," sources ","Bundler  default_gemfile ","Bundler  default_lockfile relative_path_from ","SharedHelpers  pwd ","Bundler  default_lockfile ","String  new ","source path exist? ","source path ","source is_a_path? ","deleted_sources reject! ","new_sources reject! ","deleted_sources empty? ! ","deleted_sources empty? ","new_sources empty? ! ","new_sources empty? ","deleted_deps empty? ","new_deps empty? ","deleted_platforms map ","new_platforms map ","@locked_platforms - ","@platforms - "," nothing_changed? ! "," nothing_changed? "," change_reason split join "," change_reason split "," change_reason ","reason split map join ","reason split map ","reason split ","reason strip empty? ","reason strip ","@locked_deps values - ","@locked_deps values ","Bundler  settings locations [] == ","Bundler  settings locations [] ","Bundler  settings locations ","Bundler  settings "," equivalent_rubygems_remotes? ","source path? ","Bundler  settings locations keys & any? ","Bundler  settings locations keys & ","Bundler  settings locations keys "," sources all_sources "," locked_dependencies - "," locked_dependencies ","lock_source identifier ","lock_dep source ","gemfile_source identifier ","lock_source include? "," sources default_source ","lock_dep nil? "," locked_dependencies each ","@locked_specs [] empty? ","@locked_specs [] ","Bundler  feature_flag bundler_3_mode? ! ","Bundler  feature_flag bundler_3_mode? ","Bundler  feature_flag "," deleted_deps map "," deleted_deps "," deleted_deps any? "," new_deps map "," new_deps "," new_deps any? ","Bundler  settings locations keys include? ","Bundler  default_gemfile relative_path_from ","reason capitalize strip ","reason capitalize "," current_locked_dependencies each "," current_locked_dependencies "," current_dependencies each "," current_dependencies ","lock_source to_gemfile ","gemfile_source to_gemfile "," default_source ","String  new  << << ","String  new  << ","@locked_deps -  map ","@locked_deps values -  map "," locked_dependencies -  map ","@locked_deps -  any? ","@locked_deps values -  any? "," locked_dependencies -  any? ","@dependencies -  map ","@dependencies -  any? ","@locked_sources -  map ","@locked_sources -  any? ","@sources -  map ","gemfile_sources -  map ","@sources -  any? ","gemfile_sources -  any? "," sources lock_sources  - "," sources all_sources  - ","@locked_sources -  reject! ","@sources -  reject! ","gemfile_sources -  reject! ","@locked_sources -  empty? ! ","@locked_sources -  empty? ","@sources -  empty? ! ","gemfile_sources -  empty? ! ","@sources -  empty? ","gemfile_sources -  empty? ","@locked_deps -  empty? ","@locked_deps values -  empty? "," locked_dependencies -  empty? ","@dependencies -  empty? ","@locked_platforms -  map ","@platforms -  map "," change_ change_reason  split join "," change_ change_reason  split "," change_ change_reason  "," change_reason  split map join "," change_reason  split map "," change_reason  split "," change_reason  strip empty? "," change_reason  strip "," @locked_deps -  map "," @locked_deps values -  map ","  locked_dependencies -  map "," @locked_deps -  "," @locked_deps values -  ","  locked_dependencies -  "," @locked_deps -  any? "," @locked_deps values -  any? ","  locked_dependencies -  any? "," @dependencies -  map "," @dependencies -  "," @dependencies -  any? "," change_reason  capitalize strip "," change_reason  capitalize "]}," Bundler Definition to_lock":{"type":"method","name":"to_lock","children":[],"call":["handled << ","dep name ","out << ","dep to_lock ","handled include? ","(send\n  (send nil :dependencies) :sort_by) each ","d name "," dependencies sort_by "," dependencies ","(send\n  (send nil :platforms) :map) sort each ","(send\n  (send nil :platforms) :map) sort ","p to_s "," platforms map "," platforms ","spec to_lock ","spec name == ","spec name ","(send\n  (block\n    (send\n      (send nil :resolve) :select)\n    (args\n      (arg :s))\n    (send\n      (send\n        (lvar :s) :source) :==\n      (lvar :source))) :sort_by) each ","s full_name ","(send\n  (send nil :resolve) :select) sort_by ","s source == ","s source "," resolve select "," resolve ","source to_lock "," sorted_sources each "," sorted_sources ","s platform to_s ","s platform ","s platform to_s == ","s name ","d to_s "," lock_version ","(send\n  (block\n    (send\n      (send nil :resolve) :select)\n    (args\n      (arg :s))\n    (send\n      (lvar :source) :can_lock?\n      (lvar :s))) :sort_by) each ","source can_lock? "," sources lock_sources each "," sources lock_sources "," sources "," dependencies sort_by each "," platforms map sort each "," platforms map sort ","(send\n  (send nil :resolve) :select) sort_by each "," locked_bundler_version "," locked_ruby_version ","String  new ","LockfileGenerator  generate "," require ","out << << << ","out << << ","@lockfile_contents =~ "," require_relative ","String  new  << ","String  new  << << << ","String  new  << << "]}," Bundler Definition lock":{"type":"method","name":"lock","children":[],"call":["f puts ","File  open ","Bundler  settings [] ","Bundler  settings ","@lockfile_contents == "," to_lock ","contents gsub! ","@lockfile_contents match "," raise ","File  expand_path ","Bundler  ui warn ","@locked_bundler_version segments first ","@locked_bundler_version segments ","Bundler VERSION  split first ","Bundler VERSION  split ","Bundler  ui ","locked_major < ","Gem Version  create segments first ","Gem Version  create segments ","Gem Version  create ","Bundler  ui error "," lockfiles_equal? ","@unlocking ! ","updating_major ! ","SharedHelpers  filesystem_access "," unlocking? ! "," unlocking? ","Bundler  frozen? ","(or\n  (send nil :unlocking?)\n  (ivar :@unlocking_bundler)) ! ","Bundler  frozen_bundle? ","File  exist? ","Bundler  feature_flag lockfile_upgrade_warning? ","Bundler  feature_flag ","Definition  no_lock ","Bundler  gem_version segments first ","Bundler  gem_version segments ","Bundler  gem_version ","@lockfile_contents match? "," bundler_version_to_lock segments first "," bundler_version_to_lock segments "," bundler_version_to_lock ","@lockfile_ to_lock  == "," to_lock  gsub! ","@lockfile_ to_lock  match ","@locked_bundler_version segments first  < ","locked_major <  ! ","@lockfile_ to_lock  match? "]}," Bundler Definition no_sources?":{"type":"method","name":"no_sources?","children":[],"call":["@sources first remotes empty? ","@sources first remotes ","@sources first ","@sources length == ","@sources length "]}," Bundler Definition index":{"type":"method","name":"index","children":[],"call":["idx use ","s specs ","@sources each ","Index  build ","idx add_source ","source_index unmet_dependency_names ","s dependency_names= ","dependency_names uniq ","s is_a? ","d name ","dependency_names map! ","@dependencies dup ","rubygems_sources each ","other_sources each ","@sources find_all ","s is_a? ! ","s dependencies= ","dependency_names push uniq! ","dependency_names push ","source unmet_deps "," pinned_spec_names ","source specs ","source dependency_names= ","dependency_names dup "," sources all_sources each "," sources all_sources "," sources ","@dependencies map ","dependency_names concat uniq! ","dependency_names concat ","idx << ","Gem Specification  new ","RubyVersion  system to_gem_version_with_patchlevel ","RubyVersion  system "," double_check_for_index ","dependency_names - ","s unmet_deps ","dependency_names delete ","spec name ","s specs each ","(send\n  (send\n    (lvar :source) :specs) :map) uniq ","s name ","source specs map ","source is_a? ","s specs  unmet_dependency_names ","source_index unmet_@dependencies map  ","s @dependencies map = ","@dependencies map  uniq ","@dependencies map  map! ","@dependencies map  push uniq! ","@dependencies map  push ","source @dependencies map = ","@dependencies map  dup ","@dependencies map  concat uniq! ","@dependencies map  concat ","@dependencies map  - ","@dependencies map  delete "]}," Bundler Definition resolve":{"type":"method","name":"resolve","children":[],"call":["last_resolve merge ","Resolver  resolve "," index "," expanded_dependencies ","source_requirements []= ","dep source specs ","dep source ","dep name "," dependencies each "," dependencies "," converge_locked_specs ","Bundler  settings [] ","Bundler  settings ","@last_resolve valid_for? ","@last_resolve merge "," unlocked? ","@path_changes ! ","@new_platform ! ","@dependency_changes ! ","@source_changes ! ","@unlocking ! "," source_requirements "," nothing_changed? "," ruby_version version "," ruby_version "," additional_base_requirements_for_resolve "," gem_version_promoter ","Bundler  ui debug "," change_reason ","Bundler  ui "," platforms "," unlocking? ! "," unlocking? ","Bundler  frozen? ","Bundler  frozen_bundle? ","resolve for "," expand_dependencies "," generic ","platforms_for_resolve map "," dependencies + "," metadata_dependencies ","p == "," platforms reject "," generic == "," platforms one? ","SpecSet  new "," filter_specs ","@locked_specs [] any? ","@locked_specs [] ","@dependencies select ","@locked_gems may_include_redundant_platform_specific_gems? ","@dependencies - "," deleted_deps "," deleted_deps any? "," reresolve "," resolver start "," resolver "," start_resolution "," no_resolve_needed? "," converge_locked_specs  merge ","  expand_dependencies  ","@ converge_locked_specs  valid_for? ","@ converge_locked_specs  merge "," platforms  map "]}," Bundler Definition specs_for":{"type":"method","name":"specs_for","children":[],"call":[" specs for "," expand_dependencies "," specs ","d should_include? ! ","d should_include? ","deps delete_if ","(send\n  (send\n    (lvar :d) :groups) :&\n  (lvar :groups)) any? ","d groups & ","d groups "," dependencies select "," dependencies "," dependencies_for ","SpecSet  new "," add_bundler_to "," resolve materialize "," resolve "," requested_groups ","groups empty? "," materialize "," dependencies_for  delete_if ","(send\n  (send\n    (lvar :d) : requested_groups ) :&\n  (lvar : requested_groups )) any? ","d  requested_groups  & ","d  requested_groups  "," requested_ requested_groups  "," requested_groups  empty? "]}," Bundler Definition current_dependencies":{"type":"method","name":"current_dependencies","children":[],"call":["d should_include? ! ","d should_include? "," dependencies reject "," dependencies "," dependencies select ","d gem_platforms empty? ! ","d gem_platforms empty? ","d gem_platforms "," generic_local_platform "," filter_relevant "]}," Bundler Definition requested_specs":{"type":"method","name":"requested_specs","children":[],"call":[" specs_for ","g to_sym ","groups map! "," groups - ","Bundler  settings without ","Bundler  settings "," groups "," requested_groups "," groups -  map! "," requested_groups  map! ","  groups -  - ","  requested_groups  - ","  groups -  ","  requested_groups  "," requested_ groups -  "," requested_ requested_groups  "]}," Bundler Definition missing_specs":{"type":"method","name":"missing_specs","children":[],"call":[" resolve materialize "," requested_dependencies "," resolve "," resolve materialize missing_specs "]}," Bundler Definition new_platform?":{"type":"method","name":"new_platform?","children":[],"call":[]}," Bundler Definition removed_specs":{"type":"method","name":"removed_specs","children":[],"call":["@locked_specs - "," specs "]}," Bundler Definition new_specs":{"type":"method","name":"new_specs","children":[],"call":[" specs - "," specs "]}," Bundler Definition specs":{"type":"method","name":"specs","children":[],"call":["specs []= "," index search last "," index search ","Gem Dependency  new "," index ","specs [] any? ","specs [] "," resolve materialize "," requested_dependencies "," resolve ","local search last ","local search "," rubygems_index ","Bundler  settings [] ","Bundler  settings "," dependencies "," raise ","locked_gem version to_s != ","locked_gem version to_s ","locked_gem version ","locked_gem nil? ","@locked_specs [] last ","@locked_specs [] "," extract_gem_info ","@remote ! "," sources metadata_source specs search last "," sources metadata_source specs search "," sources metadata_source specs "," sources metadata_source "," sources ","locked_gem source "," add_bundler_to "," materialize "," resolve materialize  []= "," resolve materialize  [] any? "," resolve materialize  [] "," index  search last "," rubygems_index  search last "," index  search "," rubygems_index  search ","@locked_specs [] last  version to_s != ","@locked_specs [] last  version to_s ","@locked_specs [] last  version ","@locked_specs [] last  nil? ","@locked_ resolve materialize  [] last ","@locked_ resolve materialize  [] "," sources metadata_source  resolve materialize  search last "," sources metadata_source  resolve materialize  search "," sources metadata_source  resolve materialize  ","@locked_specs [] last  source "," add_ index search last _to "," add_local search last _to "," add_ sources metadata_source specs search last _to "]}," Bundler Definition resolve_remotely!":{"type":"method","name":"resolve_remotely!","children":[],"call":[" specs ","s remote! ","@sources each "," raise "," sources remote! "," sources "," resolve "]}," Bundler Definition resolve_with_cache!":{"type":"method","name":"resolve_with_cache!","children":[],"call":[" specs ","s cached! ","@sources each "," raise "," sources cached! "," sources "," resolve "]}," Bundler Definition build":{"type":"method","name":"build","children":[],"call":[]}," Bundler CLI have_groff?":{"type":"method","name":"have_groff?","children":[],"call":["$? == ","(rescue\n  (xstr\n    (str \"which groff\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ! ","(rescue\n  (xstr\n    (str \"which groff\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? "]}," Bundler CLI source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Bundler CLI gem":{"type":"method","name":"gem","children":[],"call":["Dir  chdir ","Bundler  ui info ","Bundler  ui "," template ","File  join ","FileUtils  mkdir_p ","constant_name split ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join ","q capitalize ","constant_name split map ","constant_name =~ ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join ","p capitalize ","name split map ","name split "," exit ","Bundler  ui error ","Dir  pwd ","File  exist? "," options [] "," options ","git_author_email empty? ","git_author_name empty? ","(str \"git config user.email\") chomp ","(str \"git config user.name\") chomp ","q [] upcase + ","q [] ","q [] upcase ","p [] upcase + ","p [] ","p [] upcase ","name chomp ","git_user_email empty? ","git_user_name empty? ","Gem  new run ","Gem  new "," require "," run ","name tr ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  split ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  split ","constant_name chomp  split ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :constant_name chomp ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  split map ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  split map ","constant_name chomp  split map ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  =~ ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  =~ ","constant_name chomp  =~ ","(send\n  (send\n    (lvar :name chomp ) :split\n    (str \"_\")) :map) join ","name chomp  split map ","name chomp  split ","(str \"git config user.email\") chomp  empty? ","(str \"git config user.name\") chomp  empty? ","git_author_name chomp  empty? ","(str \"git config user.name chomp \") chomp ","name chomp  chomp ","git_user_name chomp  empty? ","name chomp  tr "]}," Bundler CLI viz":{"type":"method","name":"viz","children":[],"call":[" raise ","Bundler  ui warn ","Bundler  ui ","Bundler  ui error ","e message ","e message =~ ","e inspect ","Bundler  ui info ","graph viz "," options [] "," options ","Graph  new ","Bundler  load ","File  expand_path ","Viz  new run ","Viz  new "," require "," options dup ","SharedHelpers  major_deprecation "," require_relative ","Graph  new  viz "]}," Bundler CLI config":{"type":"method","name":"config","children":[],"call":["Bundler  settings set_global ","values join ","Bundler  settings ","Bundler  ui info ","Bundler  ui ","locations [] ","local inspect ","Bundler  settings locations ","Bundler  settings pretty_values_for each ","Bundler  settings pretty_values_for "," with_padding ","Bundler  ui confirm ","values empty? ","Bundler  settings all each ","Bundler  settings all ","values shift ","ARGV  dup ","locations each ","Config  new run ","Config  new "," options "," require "," exit ","Bundler  ui error ","Bundler  settings send ","args join ","scope == ","global inspect ","env inspect ","args empty? ","Bundler  settings set_local ","args shift ","peek =~ ","pathname expand_path to_s ","pathname expand_path ","pathname directory? ","Pathname  new ","name match ","Bundler  settings set_locations []  ","ARGV  dup  join ","Bundler  settings locations  [] ","locations []  inspect ","Bundler  settings Bundler  settings locations  ","Bundler  settings pretty_ARGV  dup _for each ","Bundler  settings pretty_ARGV  dup _for ","ARGV  dup  empty? ","ARGV  dup  shift ","Bundler  settings locations  each ","args shift  =~ ","values shift  =~ ","Pathname  new  expand_path to_s ","Pathname  new  expand_path ","Pathname  new  directory? "]}," Bundler CLI update":{"type":"method","name":"update","children":[],"call":["Bundler  ui confirm ","Your bundle is updated!  + ","Bundler  ui ","Bundler  load cache ","Bundler  load ","Bundler  root join exist? ","Bundler  root join ","Bundler  root ","Installer  install ","Bundler  definition ","sources empty? ","gems empty? "," Array "," options [] "," options ","FileUtils  rm "," cache ","FileUtils  rm_f "," clean ","Bundler  settings [] ","Bundler  settings ","Gem  load_env_plugins ","Gem  respond_to? ","Gem  load_plugins ","Update  new run ","Update  new "," require ","SharedHelpers  major_deprecation ","ARGV  include? ","Bundler  definition validate_ruby! ","Bundler Fetcher  disable_endpoint= ","Bundler  ui be_quiet! ","Bundler  ui quiet= "," raise "," not_found_message ","names include? ","gems each ","s name ","LockfileParser  new specs map ","LockfileParser  new specs ","LockfileParser  new ","Bundler  read_file ","Bundler  default_lockfile "," gem_dependency_with_name ","Bundler  ui level= "," without_groups_message ","Bundler  settings without any? ","Bundler  settings without ","Bundler  locked_gems specs map ","Bundler  locked_gems specs ","Bundler  locked_gems ","Bundler  settings []= ","opts [] ","opts []= "," options dup ","sources concat ","specs map ","Bundler  definition specs_for ","groups any? ","groups empty? "," Array map ","Bundler  settings temporary "," require_relative "," Array  empty? ","LockfileParser  new Bundler  definition specs_for  map ","LockfileParser  new Bundler  definition specs_for  ","Bundler  default_Bundler  read_file file "," without_ Array map _message ","Bundler  Bundler  read_file ed_gems specs map ","Bundler  locked_gems Bundler  definition specs_for  map ","Bundler  Bundler  read_file ed_gems specs ","Bundler  locked_gems Bundler  definition specs_for  ","Bundler  Bundler  read_file ed_gems "," options dup  [] "," options dup  []= "," Array  concat ","Bundler  definition specs_for  map ","Bundler  definition Bundler  definition specs_for _for "," Array map  any? "," Array map  empty? "]}," Bundler CLI help":{"type":"method","name":"help","children":[],"call":[" puts ","File  read ","Kernel  exec ","ENV  [] "," have_groff? ","File  expand_path ","manpages include? ","root !~ ","Bundler  which ","File  basename ","man_pages [] ","man_path !~ ","man_pages include? ","Hash  [] ","Dir  glob grep collect ","Dir  glob grep ","Dir  glob ","File  join "," pager_system ","RbConfig CONFIG  [] ","File  directory? ","File  dirname "," __dir__ ","File  expand_path  !~ ","Hash  []  [] ","man_pages [] s [] ","RbConfig CONFIG  []  !~ ","Hash  []  include? ","man_pages [] s include? ","  pager_system _system "]}," Bundler SpecSet select!":{"type":"method","name":"select!","children":[],"call":["names include? ! ","names include? ","s name ","@specs delete_if "]}," Bundler SpecSet names":{"type":"method","name":"names","children":[],"call":[" lookup keys "," lookup "]}," Bundler Source Git shortref_for":{"type":"method","name":"shortref_for","children":[],"call":["ref [] "]}," Bundler Source Path []":{"type":"method","name":"[]","children":[],"call":[" specs [] first "," specs [] "," specs "]}," Bundler Source Rubygems []":{"type":"method","name":"[]","children":[],"call":[" remote_specs [] first "," remote_specs [] "," remote_specs "," cached_specs [] first "," cached_specs [] "," cached_specs "," installed_specs [] first "," installed_specs [] "," installed_specs "]}," Gem Platform to_generic":{"type":"method","name":"to_generic","children":[],"call":[" =~ ","GENERICS  find ","GENERIC_CACHE  [] "]}," Gem MatchPlatform match_platform":{"type":"method","name":"match_platform","children":[],"call":["Gem Platform  new to_generic == ","Gem Platform  new to_generic ","Gem Platform  new "," platform ","p == "," platform nil? ","Gem Platform RUBY  == "]}," Bundler Definition converge":{"type":"method","name":"converge","children":[],"call":[" converge_locked_specs "," converge_dependencies "," converge_sources "]}," Thor subcommand_args":{"type":"method","name":"subcommand_args","children":[],"call":["@@original_args [] "]}," Bundler production=":{"type":"method","name":"production=","children":[],"call":[]}," Bundler production?":{"type":"method","name":"production?","children":[],"call":[]}," Bundler GemHelper current_version_tag":{"type":"method","name":"current_version_tag","children":[],"call":[" current_version "]}," Bundler GemHelper version_file_path":{"type":"method","name":"version_file_path","children":[],"call":["File  join "," name "," base "]}," Bundler GemHelper current_version":{"type":"method","name":"current_version","children":[],"call":["File  read [] ","File  read "," version_file_path "," raise ","File  exist? "]}," Bundler GemHelper determine_name":{"type":"method","name":"determine_name","children":[],"call":["Gem Specification  load name ","Gem Specification  load ","File  join ","File  basename [] ","File  basename ","gemspecs first "," base "," raise ","gemspecs size == ","gemspecs size ","Dir  [] ","Dir  []  first ","Dir  []  size == ","Dir  []  size "]}," Bundler GemHelper push_gem":{"type":"method","name":"push_gem","children":[],"call":[" rubygem_push "," build_gem "," git_push "," tag_version "," guard_already_tagged "," guard_clean "]}," Bundler UI Shell debug!":{"type":"method","name":"debug!","children":[],"call":[]}," Bundler UI debug":{"type":"method","name":"debug","children":[],"call":[]}," Gem Requirement none?":{"type":"method","name":"none?","children":[],"call":[" to_s == "," to_s "]}," Gem Dependency matches_spec?":{"type":"method","name":"matches_spec?","children":[],"call":[" requirement satisfied_by? ","spec version "," requirement "," requirement none? "," name === ","spec name "," name "]}," Gem Dependency encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," instance_variable_get ","ivar to_s sub ","ivar to_s "," to_yaml_properties each "," to_yaml_properties "]}," Bundler Resolver gems_size":{"type":"method","name":"gems_size","children":[],"call":[" search size "," search ","@gems_size [] "]}," Bundler Index spec_satisfies_dependency?":{"type":"method","name":"spec_satisfies_dependency?","children":[],"call":["dep requirement satisfied_by? ","spec version ","dep requirement ","dep name === ","spec name ","dep name ","dep name == "]}," Bundler Index same_version?":{"type":"method","name":"same_version?","children":[],"call":["a to_s [] == ","b to_s [] ","b to_s ","a to_s [] ","a to_s ","a == "]}," Bundler Deployment define_task":{"type":"method","name":"define_task","children":[],"call":[]}," Bundler Dependency mingw_19?":{"type":"method","name":"mingw_19?","children":[],"call":["RUBY_VERSION  >= "," mingw? "," on_19? "]}," Bundler Dependency mingw_18?":{"type":"method","name":"mingw_18?","children":[],"call":["RUBY_VERSION  < "," mingw? "," on_18? "]}," Bundler Dependency mingw?":{"type":"method","name":"mingw?","children":[],"call":["Gem Platform  local os == ","Gem Platform  local os ","Gem Platform  local "]}," Bundler Definition rubygems_index":{"type":"method","name":"rubygems_index","children":[],"call":["idx use ","s specs ","(send\n  (ivar :@sources) :find_all) each ","s is_a? ","@sources find_all ","Index  build ","idx add_source ","rubygems specs ","@sources find "," sources rubygems_sources each "," sources rubygems_sources "," sources "]}," Bundler RubygemsIntegration Transitional stub_rubygems":{"type":"method","name":"stub_rubygems","children":[],"call":[" stub_source_index170 "," stub_source_index "]}," Bundler RubygemsIntegration Legacy find_name":{"type":"method","name":"find_name","children":[],"call":["Gem  source_index find_name ","Gem  source_index "]}," Bundler RubygemsIntegration Legacy all_specs":{"type":"method","name":"all_specs","children":[],"call":["Gem  source_index all_gems values ","Gem  source_index all_gems ","Gem  source_index ","Gem  source_index gems values ","Gem  source_index gems "]}," Bundler RubygemsIntegration Legacy stub_rubygems":{"type":"method","name":"stub_rubygems","children":[],"call":[" stub_source_index137 ","source_index add_specs ","source_index spec_dirs= ","Gem SourceIndex  new ","source_index_class send ","Gem SourceIndex  new tap "," redefine_method "," stub_Gem SourceIndex  new 137 ","Gem SourceIndex  new  add_specs ","Gem SourceIndex  new  spec_dirs= ","Gem SourceIndex  new _class send "]}," Bundler RubygemsIntegration Modern find_name":{"type":"method","name":"find_name","children":[],"call":["Gem Specification  find_all_by_name "]}," Bundler RubygemsIntegration Modern all_specs":{"type":"method","name":"all_specs","children":[],"call":["Gem Specification  to_a "]}," Bundler RubygemsIntegration Modern stub_rubygems":{"type":"method","name":"stub_rubygems","children":[],"call":[" stub_source_index170 ","Gem Specification  all= ","Gem  post_reset "," stub_source_index "]}," Bundler RubygemsIntegration replace_entrypoints":{"type":"method","name":"replace_entrypoints","children":[],"call":["Gem  clear_paths "," replace_refresh "," replace_bin_path "," stub_rubygems "," replace_gem "," reverse_rubygems_kernel_mixin ","h []= ","s name ","specs reduce ","specs_by_name []= ","specs << ","specs_by_name key? ","default_spec name ","stub to_spec ","Bundler  rubygems default_stubs each ","Bundler  rubygems default_stubs ","Bundler  rubygems "," add_default_gems_to "," add_default_gems_to  []= "," add_default_gems_to  key? ","stub to_spec  name "]}," Bundler RubygemsIntegration replace_refresh":{"type":"method","name":"replace_refresh","children":[],"call":["gem_class send "," redefine_method "]}," Bundler RubygemsIntegration replace_bin_path":{"type":"method","name":"replace_bin_path","children":[],"call":["File  exist? ","File  join ","spec bindir ","File  dirname ","spec loaded_from ","spec full_gem_path "," raise ","spec full_name ","spec default_executable ","s name == ","s name ","specs find ","s executables include? ","s executables ","ENV  [] ","exec_name == ","gem_class send ","args first "," warn ","spec name == ","spec name "," redefine_method "," find_spec_for_exe ","Bundler SharedHelpers  major_deprecation "," name ","spec bin_file ","spec activate ","Gem LOADED_SPECS_MUTEX  synchronize ","args last ","Bundler  default_gemfile basename ","Bundler  default_gemfile ","spec_with_name nil? ","exec_name ! ","spec_with_name executables include? ","spec_with_name executables ","specs_by_name [] ","matching_specs_by_exec_name map join ","matching_specs_by_exec_name map ","matching_specs_by_exec_name empty? ","matching_specs_by_exec_name shift ","matching_specs_by_exec_name empty? ! ","matching_specs_by_exec_name delete ","specs_by_name values select ","specs_by_name values "," find_spec_for_exe  bindir ","matching_specs_by_exec_name shift  bindir ","matching_specs_by_exec_name delete  bindir "," find_spec_for_exe  loaded_from ","matching_specs_by_exec_name shift  loaded_from ","matching_specs_by_exec_name delete  loaded_from "," find_spec_for_exe  full_gem_path ","matching_specs_by_exec_name shift  full_gem_path ","matching_specs_by_exec_name delete  full_gem_path "," find_spec_for_exe  full_name ","matching_specs_by_exec_name shift  full_name ","matching_specs_by_exec_name delete  full_name "," find_spec_for_exe  default_executable ","matching_specs_by_exec_name shift  default_executable ","matching_specs_by_exec_name delete  default_executable "," find_spec_for_exe s find ","matching_specs_by_exec_name shift s find ","matching_specs_by_exec_name delete s find ","spec default_executable  == ","args first  == "," find_spec_for_exe  name == ","matching_specs_by_exec_name shift  name == ","matching_specs_by_exec_name delete  name == "," find_spec_for_exe  name ","matching_specs_by_exec_name shift  name ","matching_specs_by_exec_name delete  name "," find_ find_spec_for_exe _for_exe "," find_matching_specs_by_exec_name shift _for_exe "," find_matching_specs_by_exec_name delete _for_exe "," find_spec_for_exe  bin_file ","matching_specs_by_exec_name shift  bin_file ","matching_specs_by_exec_name delete  bin_file "," find_spec_for_exe  activate ","matching_specs_by_exec_name shift  activate ","matching_specs_by_exec_name delete  activate "," find_spec_for_exe _with_name nil? ","matching_specs_by_exec_name shift _with_name nil? ","matching_specs_by_exec_name delete _with_name nil? ","specs_by_name []  nil? ","spec default_executable  ! ","args first  ! "," find_spec_for_exe _with_name executables include? ","matching_specs_by_exec_name shift _with_name executables include? ","matching_specs_by_exec_name delete _with_name executables include? ","specs_by_name []  executables include? "," find_spec_for_exe _with_name executables ","matching_specs_by_exec_name shift _with_name executables ","matching_specs_by_exec_name delete _with_name executables ","specs_by_name []  executables "," find_spec_for_exe s_by_name [] ","matching_specs_by_exec_name shift s_by_name [] ","matching_specs_by_exec_name delete s_by_name [] ","matching_specs_by_spec default_executable  map join ","matching_specs_by_args first  map join ","matching_ find_spec_for_exe s_by_exec_name map join ","matching_matching_specs_by_exec_name shift s_by_exec_name map join ","matching_matching_specs_by_exec_name delete s_by_exec_name map join ","matching_specs_by_spec default_executable  map ","matching_specs_by_args first  map ","matching_ find_spec_for_exe s_by_exec_name map ","matching_matching_specs_by_exec_name shift s_by_exec_name map ","matching_matching_specs_by_exec_name delete s_by_exec_name map ","matching_specs_by_spec default_executable  empty? ","matching_specs_by_args first  empty? ","matching_ find_spec_for_exe s_by_exec_name empty? ","matching_matching_specs_by_exec_name shift s_by_exec_name empty? ","matching_matching_specs_by_exec_name delete s_by_exec_name empty? ","matching_specs_by_spec default_executable  shift ","matching_specs_by_args first  shift ","matching_ find_spec_for_exe s_by_exec_name shift ","matching_matching_specs_by_exec_name shift s_by_exec_name shift ","matching_matching_specs_by_exec_name delete s_by_exec_name shift ","matching_specs_by_spec default_executable  empty? ! ","matching_specs_by_args first  empty? ! ","matching_ find_spec_for_exe s_by_exec_name empty? ! ","matching_matching_specs_by_exec_name shift s_by_exec_name empty? ! ","matching_matching_specs_by_exec_name delete s_by_exec_name empty? ! ","matching_specs_by_spec default_executable  delete ","matching_specs_by_args first  delete ","matching_ find_spec_for_exe s_by_exec_name delete ","matching_matching_specs_by_exec_name shift s_by_exec_name delete ","matching_matching_specs_by_exec_name delete s_by_exec_name delete "," find_spec_for_exe s_by_name values select ","matching_specs_by_exec_name shift s_by_name values select ","matching_specs_by_exec_name delete s_by_name values select "," find_spec_for_exe s_by_name values ","matching_specs_by_exec_name shift s_by_name values ","matching_specs_by_exec_name delete s_by_name values "]}," Bundler RubygemsIntegration stub_source_index170":{"type":"method","name":"stub_source_index170","children":[],"call":[" add_specs "," spec_dirs= ","Gem SourceIndex  send ","Deprecate  skip_during "]}," Bundler RubygemsIntegration stub_source_index137":{"type":"method","name":"stub_source_index137","children":[],"call":["source_index add_specs ","source_index spec_dirs= ","Gem SourceIndex  new ","source_index_class send ","Gem SourceIndex  new  add_specs ","Gem SourceIndex  new  spec_dirs= ","Gem SourceIndex  new _class send "]}," Bundler RubygemsIntegration replace_gem":{"type":"method","name":"replace_gem","children":[],"call":[" raise ","e version_requirement= ","dep requirement ","e requirement= ","e respond_to? ","e name= ","dep name ","Gem LoadError  new ","spec full_name ","dep !~ ","spec nil? ","s name == ","s name ","specs find ","Gem Dependency  new ","dep respond_to? ","reqs pop ","reqs last is_a? ","reqs last ","executables include? ","File  basename "," caller first split first "," caller first split "," caller first "," caller "," Kernel  send ","(send\n  (lvar :specs) :map) flatten ","s executables ","specs map "," reverse_rubygems_kernel_mixin ","specs map flatten "," redefine_method ","(lvar :kernel) each ","kernel_class send ","Bundler  default_gemfile basename ","Bundler  default_gemfile ","dep matches_spec? ","specs_by_name [] "," Bundler  rubygems binstubs_call_gem? "," Bundler  rubygems ","Bundler  feature_flag setup_makes_kernel_gem_public? ","Bundler  feature_flag "," raisGem LoadError  new  ","Gem LoadError  new  vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","dGem LoadError  new p rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt ","Gem Dependency  new  requirement ","Gem LoadError  new  rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","Gem LoadError  new  rGem LoadError  new spond_to? ","Gem LoadError  new  namGem LoadError  new = ","dGem LoadError  new p namGem LoadError  new  ","Gem Dependency  new  name ","GGem LoadError  new m LoadError  nGem LoadError  new w ","spGem LoadError  new c full_namGem LoadError  new  ","specs_by_name []  full_name ","dGem LoadError  new p !~ ","Gem Dependency  new  !~ ","spGem LoadError  new c nil? ","specs_by_name []  nil? ","s namGem LoadError  new  == ","s namGem LoadError  new  ","spGem LoadError  new cs find ","specs_by_name [] s find ","GGem LoadError  new m DGem LoadError  new pGem LoadError  new ndGem LoadError  new ncy  nGem LoadError  new w ","dGem LoadError  new p rGem LoadError  new spond_to? ","Gem Dependency  new  respond_to? ","rGem LoadError  new qs pop ","rGem LoadError  new qs last is_a? ","rGem LoadError  new qs last ","Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s includGem LoadError  new ? ","(send\n  (lvar :specs) :map) flatten  include? ","specs map flatten  include? ","FilGem LoadError  new   basGem LoadError  new namGem LoadError  new  "," callGem LoadError  new r first split first "," callGem LoadError  new r first split "," callGem LoadError  new r first "," callGem LoadError  new r "," KGem LoadError  new rnGem LoadError  new l  sGem LoadError  new nd ","(sGem LoadError  new nd\n  (lvar :spGem LoadError  new cs) :map) flattGem LoadError  new n ","(send\n  (lvar :specs_by_name [] s) :map) flatten ","s Gem LoadError  new xGem LoadError  new cutablGem LoadError  new s ","s (send\n  (lvar :specs) :map) flatten  ","s specs map flatten  ","spGem LoadError  new cs map ","specs_by_name [] s map "," rGem LoadError  new vGem LoadError  new rsGem LoadError  new _rubygGem LoadError  new ms_kGem LoadError  new rnGem LoadError  new l_mixin ","spGem LoadError  new cs map flattGem LoadError  new n ","specs_by_name [] s map flatten "," rGem LoadError  new dGem LoadError  new finGem LoadError  new _mGem LoadError  new thod ","(lvar :kGem LoadError  new rnGem LoadError  new l) Gem LoadError  new ach ","kGem LoadError  new rnGem LoadError  new l_class sGem LoadError  new nd ","BundlGem LoadError  new r  dGem LoadError  new fault_gGem LoadError  new mfilGem LoadError  new  basGem LoadError  new namGem LoadError  new  ","BundlGem LoadError  new r  dGem LoadError  new fault_gGem LoadError  new mfilGem LoadError  new  ","dGem LoadError  new p matchGem LoadError  new s_spGem LoadError  new c? ","Gem Dependency  new  matches_spec? ","dep matches_specs_by_name [] ? ","spGem LoadError  new cs_by_namGem LoadError  new  [] ","specs_by_name [] s_by_name [] "," BundlGem LoadError  new r  rubygGem LoadError  new ms binstubs_call_gGem LoadError  new m? "," BundlGem LoadError  new r  rubygGem LoadError  new ms ","BundlGem LoadError  new r  fGem LoadError  new aturGem LoadError  new _flag sGem LoadError  new tup_makGem LoadError  new s_kGem LoadError  new rnGem LoadError  new l_gGem LoadError  new m_public? ","BundlGem LoadError  new r  fGem LoadError  new aturGem LoadError  new _flag "]}," Bundler RubygemsIntegration reverse_rubygems_kernel_mixin":{"type":"method","name":"reverse_rubygems_kernel_mixin","children":[],"call":[" private_method_defined? "," Kernel  class_eval "," alias_method "," redefine_method ","k instance_method ","k private_method_defined? ","(lvar :kernel) each ","Gem  discover_gems_on_require= ","Gem  respond_to? "]}," Bundler RubygemsIntegration download_gem":{"type":"method","name":"download_gem","children":[],"call":["Gem RemoteFetcher  fetcher download ","Gem RemoteFetcher  fetcher ","fetcher download ","Gem RemoteFetcher  new "," configuration [] "," configuration ","Bundler  settings mirror_for ","Bundler  settings ","Bundler Retry  new attempts ","Bundler Retry  new ","Bundler Source  mirror_for ","fetcher headers= ","spec remote original_uri to_s ","spec remote original_uri ","spec remote "," gem_remote_fetcher "," raise ","e message ","gem_file_name == ","spec original_name ","spec original_platform == ","spec platform ","spec original_platform ","fetcher cache_update_path ","SharedHelpers  filesystem_access ","remote_gem_path to_s "," provides? ","uri + ","File  exist? ","File  join ","spec file_name "," require ","Gem RemoteFetcher  Gem RemoteFetcher  new  download ","Gem RemoteFetcher   gem_remote_fetcher  download ","Gem RemoteFetcher  Gem RemoteFetcher  new  ","Gem RemoteFetcher   gem_remote_fetcher  ","Gem RemoteFetcher  new  download "," gem_remote_fetcher  download ","Gem RemoteFetcher  new  headers= "," gem_remote_fetcher  headers= ","spec remote original_Bundler  settings mirror_for  to_s ","spec remote original_Bundler Source  mirror_for  to_s ","spec remote original_Bundler  settings mirror_for  ","spec remote original_Bundler Source  mirror_for  "," gem_remote_Gem RemoteFetcher  new  "," gem_remote_ gem_remote_fetcher  ","spec file_name  == ","Gem RemoteFetcher  new  cache_update_path "," gem_remote_fetcher  cache_update_path ","remote_gem_path to_s  to_s ","uri +  to_s ","Bundler  settings mirror_for  + ","Bundler Source  mirror_for  + "]}," Bundler RubygemsIntegration spec_from_gem":{"type":"method","name":"spec_from_gem","children":[],"call":["Gem Format  from_file_by_path spec ","Gem Format  from_file_by_path "," raise ","e message ","File  basename ","e message =~ ","e is_a? "," gem_from_path spec "," gem_from_path "," security_policies [] "," security_policies "," require ","Gem Security Policies  [] "," require_relative ","Gem Package  new spec ","Gem Package  new "]}," Bundler RubygemsIntegration with_build_args":{"type":"method","name":"with_build_args","children":[],"call":["Gem Command  build_args= ","Gem Command  build_args "," build_args= "," build_args "," ext_lock synchronize "," ext_lock "]}," Bundler RubygemsIntegration fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":["Gem SpecFetcher  new list each ","Gem SpecFetcher  new list ","Gem SpecFetcher  new ","specs each "," block_given? "," require "," raise ","name == ","Bundler  load_marshal ","fetcher fetch_path ","fetcher headers= ","remote original_uri to_s ","remote original_uri "," gem_remote_fetcher ","remote uri to_s + ","Gem  marshal_version ","remote uri to_s ","remote uri ","source + ","Bundler  safe_load_marshal ","Gem SpecFetcher  new list  each "," gem_remote_fetcher  fetch_path ","fetcher fetch_remote uri to_s +  ","fetcher fetch_source +  "," gem_remote_fetcher  headers= "," gem_remote_ gem_remote_fetcher  "]}," Bundler RubygemsIntegration ui=":{"type":"method","name":"ui=","children":[],"call":["Gem DefaultUserInteraction  ui= "]}," Bundler RubygemsIntegration bin_path":{"type":"method","name":"bin_path","children":[],"call":["Gem  bin_path "]}," Bundler RubygemsIntegration clear_paths":{"type":"method","name":"clear_paths","children":[],"call":["Gem  clear_paths "]}," Bundler RubygemsIntegration marshal_spec_dir":{"type":"method","name":"marshal_spec_dir","children":[],"call":[]}," Bundler RubygemsIntegration gem_path":{"type":"method","name":"gem_path","children":[],"call":["x to_s ","Gem  path map ","Gem  path ","Gem  path to_s "]}," Bundler RubygemsIntegration user_home":{"type":"method","name":"user_home","children":[],"call":["Gem  user_home "]}," Bundler RubygemsIntegration gem_bindir":{"type":"method","name":"gem_bindir","children":[],"call":["Gem  bindir ","File  join ","Gem  dir "]}," Bundler RubygemsIntegration gem_dir":{"type":"method","name":"gem_dir","children":[],"call":["Gem  dir to_s ","Gem  dir "]}," Bundler RubygemsIntegration sources":{"type":"method","name":"sources","children":[],"call":["Gem  sources "]}," Bundler RubygemsIntegration sources=":{"type":"method","name":"sources=","children":[],"call":["Gem  sources= "," configuration "]}," Bundler RubygemsIntegration inflate":{"type":"method","name":"inflate","children":[],"call":["Gem  inflate ","Gem Util  inflate "," require "]}," Bundler RubygemsIntegration read_binary":{"type":"method","name":"read_binary","children":[],"call":["Gem  read_binary "]}," Bundler RubygemsIntegration ruby_engine":{"type":"method","name":"ruby_engine","children":[],"call":["Gem  ruby_engine "]}," Bundler RubygemsIntegration configuration":{"type":"method","name":"configuration","children":[],"call":["Gem  configuration "," raise ","Bundler  ui trace ","Bundler  ui ","Bundler  ui error ","e message ","e class ","YAMLSyntaxError  new ","YamlSyntaxError  new "," require "," require_relative "]}," Bundler RubygemsIntegration platforms":{"type":"method","name":"platforms","children":[],"call":["Gem  platforms ","Bundler  settings [] ","Bundler  settings "]}," Bundler RubygemsIntegration path":{"type":"method","name":"path","children":[],"call":["obj to_s ","Gem Path  path "]}," Bundler RubygemsIntegration mark_loaded":{"type":"method","name":"mark_loaded","children":[],"call":["Gem  loaded_specs []= ","spec name ","Gem  loaded_specs ","spec activated= ","current activated= ","Gem  loaded_specs [] ","spec respond_to? ","Gem  loaded_specs []  activated= "]}," Bundler RubygemsIntegration loaded_specs":{"type":"method","name":"loaded_specs","children":[],"call":["Gem  loaded_specs [] ","Gem  loaded_specs "]}," Bundler RubygemsIntegration initialize":{"type":"method","name":"initialize","children":[],"call":[" configuration "," backport_ext_builder_monitor "]}," Gem Specification gem_dir":{"type":"method","name":"gem_dir","children":[],"call":[" full_gem_path "]}," Bundler Source Git uri_escaped":{"type":"method","name":"uri_escaped","children":[],"call":[" uri gsub "," uri ","' + + ","' + ","\" + + ","\" + "]}," Bundler RubygemsIntegration Modern preserve_paths":{"type":"method","name":"preserve_paths","children":[],"call":["Gem  use_paths "," gem_path "," gem_dir "]}," Bundler RubygemsIntegration preserve_paths":{"type":"method","name":"preserve_paths","children":[],"call":[]}," Bundler Dependency rbx?":{"type":"method","name":"rbx?","children":[],"call":["RUBY_ENGINE  == "," ruby? "]}," Bundler RubygemsIntegration AlmostModern preserve_paths":{"type":"method","name":"preserve_paths","children":[],"call":["Gem  use_paths "," gem_path "," gem_dir "]}," Bundler RubygemsIntegration Deprecate skip_during":{"type":"method","name":"skip_during","children":[],"call":[]}," Thor find_subcommand_possibilities":{"type":"method","name":"find_subcommand_possibilities","children":[],"call":["subcmd_name == ","n [] ","(send\n  (send nil :all_tasks) :map) select ","t first "," all_tasks map "," all_tasks ","subcmd_name length ","subcmd_name subcmd_name length gth "]}," Thor find_subcommand":{"type":"method","name":"find_subcommand","children":[],"call":["possibilities first ","possibilities size < ","possibilities size "," raise ","possibilities join ","possibilities size > "," find_subcommand_possibilities "," find_subcommand_possibilities  first "," find_subcommand_possibilities  size < "," find_subcommand_possibilities  size "," find_subcommand_possibilities  join "," find_subcommand_possibilities  size > "," find_subcommand_ find_subcommand_possibilities  "]}," Thor find_subcommand_and_update_argv":{"type":"method","name":"find_subcommand_and_update_argv","children":[],"call":["ARGV  []= "," find_subcommand "]}," Thor register":{"type":"method","name":"register","children":[],"call":[" subcommand "," desc "," invoke "," define_method ","klass <= "]}," Thor Shell Basic stderr":{"type":"method","name":"stderr","children":[],"call":[]}," Thor Shell Basic stdin":{"type":"method","name":"stdin","children":[],"call":[]}," Thor Shell Basic stdout":{"type":"method","name":"stdout","children":[],"call":[]}," Thor Shell Basic mute?":{"type":"method","name":"mute?","children":[],"call":[]}," Thor Shell Basic mute":{"type":"method","name":"mute","children":[],"call":[]}," Runner version":{"type":"method","name":"version","children":[],"call":[" say "," require "," require_relative "]}," Group dispatch":{"type":"method","name":"dispatch","children":[],"call":[" new invoke_all "," new "," new invoke_task "," all_tasks [] "," all_tasks ","Thor Options  split "," help ","config [] ","Thor HELP_MAPPINGS  include? ","given_args first ","instance invoke_all ","instance invoke_command "," all_commands [] "," all_commands "," block_given? ","Bundler Thor Options  split ","Bundler Thor HELP_MAPPINGS  include? ","instance invoke_task ","instance args ","given_instance args  first "," new  invoke_all "," new  invoke_command "," new  invoke_task "," new  args ","instance instance args  "]}," Group handle_argument_error":{"type":"method","name":"handle_argument_error","children":[],"call":[" raise ","task name inspect ","task name "," fail ","msg << ","arity > ","command name "," basename ","(begin\n  (send nil :basename)) dup ","(begin\n  (send nil :basename)) dup  << "]}," Thor Base ClassMethods basename":{"type":"method","name":"basename","children":[],"call":["File  basename split first ","File  basename split ","File  basename "]}," Thor Base ClassMethods public_task":{"type":"method","name":"public_task","children":[],"call":[" class_eval ","names each "]}," Thor Actions insert_into_file":{"type":"method","name":"insert_into_file","children":[],"call":[" action ","InjectIntoFile  new ","args shift "," block_given? ","config []= ","config key? ","args shift  []= ","args shift  key? "]}," Thor Actions with_output_buffer":{"type":"method","name":"with_output_buffer","children":[],"call":[" output_buffer= "," output_buffer "," raise ","buf frozen? "]}," Thor Actions capture":{"type":"method","name":"capture","children":[],"call":["block call "," with_output_buffer "]}," Thor Actions concat":{"type":"method","name":"concat","children":[],"call":["@output_buffer concat "]}," Thor Actions append_to_file":{"type":"method","name":"append_to_file","children":[],"call":[" insert_into_file ","args << ","config merge! ","args pop ","args last is_a? ","args last ","config []= ","args pop  merge! ","args pop  []= "]}," Thor Actions prepend_to_file":{"type":"method","name":"prepend_to_file","children":[],"call":[" insert_into_file ","args << ","config merge! ","args pop ","args last is_a? ","args last ","config []= ","args pop  merge! ","args pop  []= "]}," Thor Actions link_file":{"type":"method","name":"link_file","children":[],"call":[" create_link ","File  expand_path "," find_in_source_paths ","source to_s ","args first ","args pop ","args last is_a? ","args last "," find_in_File  expand_path _paths ","File  expand_path  to_s "]}," Thor Actions CreateLink invoke!":{"type":"method","name":"invoke!","children":[],"call":[" given_destination ","File  link "," destination "," render ","File  symlink "," config [] "," config ","File  unlink "," exists? ","FileUtils  mkdir_p ","File  dirname "," invoke_with_conflict_check "," config []= "," config [] nil? "," require "]}," Thor Actions CreateLink identical?":{"type":"method","name":"identical?","children":[],"call":["File  identical? "," destination "," render "," exists? ","File  expand_path ","File  dirname "]}," Thor Actions create_link":{"type":"method","name":"create_link","children":[],"call":[" action ","CreateLink  new ","args first ","args pop ","args last is_a? ","args last "]}," Bundler SpecSet sort!":{"type":"method","name":"sort!","children":[],"call":[]}," Bundler RubygemsIntegration Ancient initialize":{"type":"method","name":"initialize","children":[],"call":[" backport_segment_generation "]}," Bundler RubygemsIntegration backport_segment_generation":{"type":"method","name":"backport_segment_generation","children":[],"call":["s to_i ","@version scan map ","@version scan ","Gem Version  send "," redefine_method "]}," Bundler LazySpecification to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," Bundler Installer install_gem_from_spec":{"type":"method","name":"install_gem_from_spec","children":[],"call":[" raise ","msg << ","spec version ","spec name ","Bundler  ui warn ","e message ","e class ","Bundler  ui ","FileUtils  rm_rf ","Bundler  tmp "," generate_bundler_executable_stubs ","Bundler  settings [] ","Bundler  settings ","Bundler  ui info ","Bundler  ui debug ","spec loaded_from ","spec source install ","spec source ","Bundler  rubygems with_build_args ","Bundler  rubygems ","spec source fetch ","spec source respond_to? ","e is_a? "," generate_standalone_bundler_executable_stubs ","Bundler Fetcher  fetch ","spec source is_a? ","e backtrace join ","e backtrace ","spec source options [] ","spec source options ","Bundler  ui confirm ","install_message include? "," logger error "," logger "," logger info ","e spec source install  ","Bundler  Bundler  settings []  [] ","Bundler  Bundler  settings []  ","install_spec source install  include? "]}," Bundler GemInstaller check_executable_overwrite":{"type":"method","name":"check_executable_overwrite","children":[],"call":[]}," Bundler Dependency maglev?":{"type":"method","name":"maglev?","children":[],"call":["RUBY_ENGINE  == "]}," Bundler Definition fixup_dependency_types!":{"type":"method","name":"fixup_dependency_types!","children":[],"call":["ld instance_variable_set ","d type ","l name == ","d name ","l name ","@locked_deps find ","@dependencies each "]}," Bundler Definition unlocked?":{"type":"method","name":"unlocked?","children":[],"call":["@lockfile_contents empty? "]}," Bundler configure_gem_home":{"type":"method","name":"configure_gem_home","children":[],"call":["Bundler  rubygems clear_paths ","Bundler  rubygems ","ENV  []= ","File  expand_path "," root "," bundle_path ","FileUtils  mkdir_p "," bundle_path to_s ","Bundler SharedHelpers  set_env ","path to_s "]}," Bundler which":{"type":"method","name":"which","children":[],"call":["File  expand_path ","File  executable? ","File  join ","ENV  [] split find ","ENV  [] split ","ENV  [] ","File  file? ","path [] ","path end_with? ","path start_with? ","paths split find ","paths split ","\" freeze ","path split find ","path split ","File  expand_path []  ","File  expand_ENV  []  ","path []  [] ","ENV  []  [] ","path []  end_with? ","ENV  []  end_with? ","path []  start_with? ","ENV  []  start_with? ","path [] s split find ","ENV  [] s split find ","ENV  []  split find ","path [] s split ","ENV  [] s split ","ENV  []  split ","path []  split find ","path []  split "]}," Bundler system_bindir":{"type":"method","name":"system_bindir","children":[],"call":["Bundler  rubygems gem_bindir ","Bundler  rubygems ","Bundler  settings [] ","Bundler  settings "]}," Bundler clean_exec":{"type":"method","name":"clean_exec","children":[],"call":["Kernel  exec "," with_clean_env "," with_env "," unbundled_env ","Bundler SharedHelpers  major_deprecation "]}," Bundler clean_system":{"type":"method","name":"clean_system","children":[],"call":["Kernel  system "," with_clean_env "," with_env "," unbundled_env ","Bundler SharedHelpers  major_deprecation "]}," Bundler with_original_env":{"type":"method","name":"with_original_env","children":[],"call":["ENV  replace ","bundled_env to_hash ","ENV  to_hash "," with_env "," original_env ","ENV  to_hash  to_hash "]}," Persistent ssl":{"type":"method","name":"ssl","children":[],"call":["connection verify_mode= ","connection key= ","connection cert= ","connection verify_callback= ","connection ca_file= ","connection use_ssl= "," require ","connection cert_store= ","store set_default_paths ","OpenSSL X509 Store  new "," warn ","connection port ","connection address ","Object  const_defined? ! ","Object  const_defined? ","OpenSSL SSL VERIFY_PEER  == ","connection ssl_version= ","connection ca_path= ","connection verify_depth= ","connection max_version= ","connection min_version= ","connection ssl_timeout= ","connection ciphers= ","connection cert_OpenSSL X509 Store  new = ","OpenSSL X509 Store  new  set_default_paths "]}," Persistent shutdown_in_all_threads":{"type":"method","name":"shutdown_in_all_threads","children":[],"call":[" shutdown ","Thread  list each ","Thread  list "]}," Persistent shutdown":{"type":"method","name":"shutdown","children":[],"call":["thread []= ","connection finish ","connections each ","thread [] "," cleanup "," reconnect_ssl "," reconnect ","http finish ","@pool shutdown ","thread []  each "]}," Persistent request":{"type":"method","name":"request","children":[],"call":["response http_version ","@http_versions [] ","uri port ","uri host "," reset "," raise "," finish "," error_message ","e class ","e message "," idempotent? ! "," idempotent? ","connection request ","Thread  current [] [] ","Thread  current [] ","Thread  current ","connection object_id "," connection_for ","req add_field ","req basic_auth ","uri password ","uri user "," headers each "," headers ","Net HTTP Get  new ","uri request_uri ","Thread  current [] []= ","Time  now "," request_failed "," can_retry? ! "," can_retry? ","connection finish "," connection_close? "," connection_keep_alive? ! "," connection_keep_alive? ","response http_version <= "," request_setup ","req [] ","req []= ","@override_headers each ","@headers each ","connection last_use= ","response connection_close? ","response connection_keep_alive? ! ","response connection_keep_alive? ","req connection_close? ","http request ","connection requests ","connection http ","Bundler  URI "," URI ","uri hostname ","connection request  http_version ","http request  http_version ","response connection http _version ","@connection http _versions [] ","Bundler  URI  port "," URI  port ","Bundler  URI  host "," URI  host "," error_ error_message  ","e  error_message  "," connection_for  request ","connection Net HTTP Get  new uest ","connection  request_setup uest "," connection_for  object_id ","  connection_for _for ","Net HTTP Get  new  add_field "," request_setup  add_field ","Net HTTP Get  new  basic_auth "," request_setup  basic_auth ","Bundler  URI  password "," URI  password ","Bundler  URI  user "," URI  user ","uri Net HTTP Get  new uest_uri ","uri  request_setup uest_uri ","Bundler  URI  request_Bundler  URI  "," URI  request_ URI  "," Net HTTP Get  new uest_failed ","  request_setup uest_failed "," connection_for  finish ","  connection_for _close? ","  connection_for _keep_alive? ! ","  connection_for _keep_alive? ","connection request  http_version <= ","http request  http_version <= ","response connection http _version <= "," Net HTTP Get  new uest_setup ","  request_setup uest_setup ","Net HTTP Get  new  [] "," request_setup  [] ","Net HTTP Get  new  []= "," request_setup  []= "," connection_for  last_use= ","connection request  connection_close? ","http request  connection_close? ","response  connection_for _close? ","connection request  connection_keep_alive? ! ","http request  connection_keep_alive? ! ","response  connection_for _keep_alive? ! ","connection request  connection_keep_alive? ","http request  connection_keep_alive? ","response  connection_for _keep_alive? ","req  connection_for _close? ","Net HTTP Get  new  connection_close? "," request_setup  connection_close? ","http Net HTTP Get  new uest ","http  request_setup uest ","connection http  request "," connection_for  requests ","connection Net HTTP Get  new uests ","connection  request_setup uests "," connection_for  http ","connection connection http  ","Bundler  URI  hostname "," URI  hostname "]}," Persistent reset":{"type":"method","name":"reset","children":[],"call":[" raise ","connection port ","connection address ","connection start "," finish ","Thread  current [] delete ","connection object_id ","Thread  current [] ","Thread  current ","e set_backtrace ","Error  new "," start ","http port ","http address ","connection http "," raisError  new  ","connError  new ction port ","connError  new ction addrError  new ss ","connError  new ction start ","ThrError  new ad  currError  new nt [] dError  new lError  new tError  new  ","connError  new ction objError  new ct_id ","ThrError  new ad  currError  new nt [] ","ThrError  new ad  currError  new nt ","Error  new  sError  new t_backtracError  new  ","Error  nError  new w ","connection http  port ","http addrError  new ss ","connection http  address ","connError  new ction http ","connection connection http  "]}," Persistent proxy_from_env":{"type":"method","name":"proxy_from_env","children":[],"call":["uri password= "," escape ","ENV  [] ","uri user= ","uri password ","uri user ","URI  parse "," normalize_uri ","env_proxy empty? ","env_proxy nil? ","uri query= ","env_no_proxy == "," URI ","Bundler  URI ","URI  parse  password= "," URI  password= ","Bundler  URI  password= ","URI  parse  user= "," URI  user= ","Bundler  URI  user= ","URI  parse  password "," URI  password ","Bundler  URI  password ","URI  parse  user "," URI  user ","Bundler  URI  user "," normalize_URI  parse  "," normalize_ URI  "," normalize_Bundler  URI  ","URI  parse  query= "," URI  query= ","Bundler  URI  query= "]}," Persistent normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["uri =~ "]}," Persistent idempotent?":{"type":"method","name":"idempotent?","children":[],"call":["req method "]}," Persistent http_version":{"type":"method","name":"http_version","children":[],"call":["@http_versions [] ","uri port ","uri host ","uri hostname "]}," Persistent finish":{"type":"method","name":"finish","children":[],"call":["connection finish ","Thread  current [] delete ","connection object_id ","Thread  current [] ","Thread  current ","requests delete ","thread [] ","connection http instance_variable_set ","connection http ","thread []  delete "]}," Persistent escape":{"type":"method","name":"escape","children":[],"call":["CGI  escape "]}," Persistent error_message":{"type":"method","name":"error_message","children":[],"call":["connection object_id ","Thread  current [] [] ","Thread  current [] ","Thread  current ","Time  now - ","Time  now ","Thread  current [] [] - ","connection http object_id ","connection http ","connection requests ","connection last_use ","connection Thread  current [] []  ","connection Thread  current [] [] -  "]}," Persistent connection_for":{"type":"method","name":"connection_for","children":[],"call":[" raise ","connection port ","connection address ","connection start ","connection read_timeout= ","connection open_timeout= ","connection set_debug_output ","connection started? "," ssl ","uri scheme == ","uri scheme ","connections [] ","connections []= ","Net HTTP  new ","net_http_args concat ","connection_id << ","net_http_args join ","uri port ","uri host ","Thread  current [] ","Thread  current ","Hash  new ","connection proxy_port ","connection proxy_address ","connection keep_alive_timeout= ","connection respond_to? "," start "," http_class new "," http_class "," reset "," expired? "," proxy_bypass? ! "," proxy_bypass? ","Thread  current [] [] "," cleanup "," ssl_cleanup ","uri scheme downcase == ","uri scheme downcase ","h []= ","@pool checkin ","http port ","http proxy_port ","http address ","http proxy_address ","http keep_alive_timeout= ","http write_timeout= ","http respond_to? ","http read_timeout= ","http started? ! ","http started? ","connection ressl ","connection ssl_generation != ","connection ssl_generation ","connection http ","@pool checkout ","uri hostname ","http max_retries= ","connections []  port ","@pool checkout  port ","connections []  address ","@pool checkout  address ","connections []  start ","@pool checkout  start ","connections []  read_timeout= ","@pool checkout  read_timeout= ","connections []  open_timeout= ","@pool checkout  open_timeout= ","connections []  set_debug_output ","@pool checkout  set_debug_output ","connections []  started? ","@pool checkout  started? ","connections [] s [] ","@pool checkout s [] ","Thread  current []  [] ","Thread  current [] []  [] ","connections [] s []= ","@pool checkout s []= ","Thread  current []  []= ","Thread  current [] []  []= ","net_connection http _args concat ","connections [] _id << ","@pool checkout _id << ","net_http_args join  << ","net_connection http _args join ","connections []  proxy_port ","@pool checkout  proxy_port ","connections []  proxy_address ","@pool checkout  proxy_address ","connections []  keep_alive_timeout= ","@pool checkout  keep_alive_timeout= ","connections []  respond_to? ","@pool checkout  respond_to? "," connection http _class new "," connection http _class ","connection http  port ","connection http  proxy_port ","connection http  address ","connection http  proxy_address ","connection http  keep_alive_timeout= ","connection http  write_timeout= ","connection http  respond_to? ","connection http  read_timeout= ","connection http  started? ! ","connection http  started? ","connections []  ressl ","@pool checkout  ressl ","connections []  ssl_generation != ","@pool checkout  ssl_generation != ","connections []  ssl_generation ","@pool checkout  ssl_generation ","connections []  http ","@pool checkout  http ","connection connection http  ","connection http  max_retries= "]}," Persistent initialize":{"type":"method","name":"initialize","children":[],"call":["key intern ","(str \"net_http_persistent\") compact join ","(str \"net_http_persistent\") compact ","(nil) join ","@proxy_uri password ","@proxy_uri user ","@proxy_uri port ","@proxy_uri host "," raise "," proxy_from_env "," proxy= ","@ruby_1 ! ","RUBY_VERSION  < ","OpenSSL SSL  const_defined? ","(lvar :key) join intern ","(lvar :key) join ","@socket_options << ","Socket  const_defined? ","Bundler Persistent Net HTTP Persistent Connection  new ","Bundler Persistent Net HTTP Persistent Pool  new ","(str \"net_http_persistent\") compact join  intern ","(str \"net_http_persistent\") compact  intern ","RUBY_VERSION  <  ! ","(lvar :(str \"net_http_persistent\") compact join ) join intern ","(lvar :(str \"net_http_persistent\") compact ) join intern ","(lvar :(str \"net_http_persistent\") compact join ) join ","(lvar :(str \"net_http_persistent\") compact ) join "]}," BufferedIO rbuf_fill":{"type":"method","name":"rbuf_fill","children":[],"call":["@rbuf << ","@io sysread "," timeout "," raise ","e message ","IO  select ","@io read_nonblock ","@io respond_to? "]}," Bundler UI Shell tell_me":{"type":"method","name":"tell_me","children":[],"call":["@shell say ","newline nil? "," word_wrap ","newline [] ","newline is_a? "]}," Bundler UI Shell debug?":{"type":"method","name":"debug?","children":[],"call":["@quiet ! ","@debug ! ! ","@debug ! "," level "]}," Bundler UI debug?":{"type":"method","name":"debug?","children":[],"call":[]}," Bundler Source Path run_hooks":{"type":"method","name":"run_hooks","children":[],"call":[" raise ","installer spec full_name ","installer spec ","hook inspect =~ ","hook inspect ","result == ","hook call ","Gem  send each ","Gem  send ","Gem  respond_to? ","hook call  == "]}," Bundler Source Rubygems replace_remotes":{"type":"method","name":"replace_remotes","children":[],"call":[" add_remote ","r to_s ","source remotes each ","source remotes ","source remotes == ","other_remotes reverse_each ","other_remotes == ","equivalent ! "," equivalent_remotes? "]}," Bundler Runtime clean":{"type":"method","name":"clean","children":[],"call":["FileUtils  rm_rf ","File  exists? ","stale_git_cache_dirs each ","FileUtils  rm ","stale_gemspec_files each ","stale_gem_files each ","(send\n  (lvar :stale_gem_dirs) :collect) + ","Bundler  ui info ","Bundler  ui ","parts [] ","parts [] join ","full_name split ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new ","stale_git_dirs collect ","parts last ","stale_gem_dirs collect ","stale_gem_bins each ","gemspec_files - ","gem_files - ","gem_dirs - ","git_cache_dirs - ","git_dirs - ","gem_bins - ","spec_gem_executables flatten! ","spec_gem_paths uniq! ","spec_git_cache_dirs << ","spec source cache_path to_s ","spec source cache_path ","spec source ","spec source is_a? ","spec_gemspec_paths << ","spec spec_file ","spec_cache_paths << ","spec cache_file ","spec_gem_executables << ","Bundler  rubygems gem_bindir ","Bundler  rubygems ","spec executables collect ","spec executables ","spec_git_paths << ","md [] ","(str \"(.+bundler/gems/.+-[a-f0-9]{7,12})\") match ","spec full_gem_path ","spec_gem_paths << "," specs each "," specs ","Dir  [] ","Gem  dir ","(send\n  (send nil :specs) :collect) flatten ","spec bindir "," specs collect ","Bundler  settings [] == ","Bundler  settings [] ","Bundler  settings ","(str \"(.+bundler/gems/.+-[a-f0-9]{12})\") match ","File  exist? ","@definition spec_git_paths ","stale_files each ","stale_gem_bins + + ","stale_gem_bins + ","removed_stale_gem_dirs + "," remove_dir ","git_dirs - - ","SharedHelpers  filesystem_access ","File  dirname ","stale_dirs each ","stale_git_cache_dirs + ","extension_dirs - ","spec_extension_paths << ","spec extension_dir ","spec respond_to? ","@definition all_specs each ","@definition all_specs ","s path to_s ","s path ","(send\n  (send\n    (ivar :@definition) :sources) :select) map ","s is_a? ","@definition sources select ","@definition sources ","Dir  [] + ","Bundler  rubygems add_default_gems_to values each ","Bundler  rubygems add_default_gems_to values ","Bundler  rubygems add_default_gems_to ","git_cache_dirs -  each ","stale_Dir  []  each ","gemspec_files -  each ","gem_files -  each ","(send\n  (lvar :gem_dirs - ) :collect) + ","(send\n  (lvar :stale_Dir  [] ) :collect) + ","full_name split  [] ","full_name split  [] join ","full_parts [] join  split ","Pathname  new basename to_s  split ","Pathparts [] join   new baseparts [] join  to_s ","Pathparts [] join   new baseparts [] join  ","Pathparts [] join   new ","git_dirs -  collect ","git_dirs - -  collect ","stale_Dir  []  collect ","full_name split  last ","gem_dirs -  collect ","gem_bins -  each ","Dir  []  - ","(send\n  (send nil :specs) :collect) flatten  flatten! ","spec_Dir  []  << ","(send\n  (send nil :specs) :collect) flatten  << ","@definition spec_git_paths  << ","(str \"(.+bundler/gems/.+-[a-f0-9]{7,12})\") match  [] ","(str \"(.+bundler/gems/.+-[a-f0-9]{12})\") match  [] ","@definition @definition spec_git_paths  ","stale_gem_bins + +  each ","gem_bins -  + + ","stale_Dir  []  + + ","gem_bins -  + ","stale_Dir  []  + ","removed_gem_dirs -  + ","removed_stale_Dir  []  + ","Dir  []  - - ","File  dirparts [] join  ","stale_git_cache_dirs +  each ","git_cache_dirs -  + ","Dir  [] +  - "]}," Bundler RubygemsIntegration Legacy initialize":{"type":"method","name":"initialize","children":[],"call":[" backport_spec_file "," backport_cache_file "," backport_base_dir "," backport_yaml_initialize "]}," Bundler RubygemsIntegration backport_spec_file":{"type":"method","name":"backport_spec_file","children":[],"call":["File  join "," full_name "," spec_dir ","Gem Specification  send "," base_dir "," redefine_method "]}," Bundler RubygemsIntegration backport_cache_file":{"type":"method","name":"backport_cache_file","children":[],"call":["File  join "," full_name "," cache_dir ","Gem Specification  send "," base_dir "," redefine_method "]}," Bundler RubygemsIntegration backport_base_dir":{"type":"method","name":"backport_base_dir","children":[],"call":["File  dirname "," loaded_from ","Gem  dir ","Gem Specification  send "," installation_path "," redefine_method "]}," Bundler RubygemsIntegration refresh":{"type":"method","name":"refresh","children":[],"call":["Gem  refresh "]}," Bundler Resolver clear_search_cache":{"type":"method","name":"clear_search_cache","children":[],"call":[]}," Bundler LazySpecification ==":{"type":"method","name":"==","children":[],"call":["(send nil :name) == ","other source ","other platform ","other dependencies ","other version ","other name "," source "," platform "," dependencies "," version "," name "," identifier == ","other identifier "," identifier "," full_name == ","other full_name "," full_name "]}," Bundler Installer generate_standalone":{"type":"method","name":"generate_standalone","children":[],"call":["file puts ","paths each ","File  open ","File  join ","paths << ","Pathname  new relative_path_from ","Bundler  root join ","Bundler  root ","Pathname  new ","spec full_gem_path ","spec require_paths each ","spec require_paths ","spec name == ","spec name ","specs each ","Bundler  definition specs_for ","g to_sym ","groups map ","Bundler  definition ","Bundler  definition requested_specs ","groups empty? ","FileUtils  mkdir_p ","Bundler  settings [] ","Bundler  settings ","gem_path to_s sub ","RbConfig CONFIG  [] ","Bundler  ruby_version engine ","Bundler  ruby_version ","gem_path to_s ","spec require_paths nil? ","@definition specs_for ","@definition requested_specs ","SystemRubyVersion  new engine ","SystemRubyVersion  new ","Bundler  settings [] s each ","Bundler  settings [] s << ","Pathname  new relative_Bundler  settings [] _from ","spec full_gem_Bundler  settings []  ","spec full_Pathname  new relative_path_from  ","spec require_Bundler  settings [] s each ","spec require_Bundler  settings [] s ","Bundler  definition specs_for  each ","Bundler  definition requested_specs  each ","@definition specs_for  each ","@definition requested_specs  each ","Bundler  definition Bundler  definition specs_for _for ","Bundler  definition Bundler  definition requested_specs _for ","Bundler  definition @definition specs_for _for ","Bundler  definition @definition requested_specs _for ","Bundler  definition requested_Bundler  definition specs_for  ","Bundler  definition requested_Bundler  definition requested_specs  ","Bundler  definition requested_@definition specs_for  ","Bundler  definition requested_@definition requested_specs  ","gem_Bundler  settings []  to_s sub ","Pathname  new relative_path_from  to_s sub ","gem_Bundler  settings []  to_s ","Pathname  new relative_path_from  to_s ","spec require_Bundler  settings [] s nil? ","@definition Bundler  definition specs_for _for ","@definition Bundler  definition requested_specs _for ","@definition @definition specs_for _for ","@definition @definition requested_specs _for ","@definition requested_Bundler  definition specs_for  ","@definition requested_Bundler  definition requested_specs  ","@definition requested_@definition specs_for  ","@definition requested_@definition requested_specs  "]}," Bundler Installer generate_standalone_bundler_executable_stubs":{"type":"method","name":"generate_standalone_bundler_executable_stubs","children":[],"call":["f puts ","ERB  new result "," binding ","ERB  new ","File  open "," Pathname join relative_path_from "," Pathname join ","spec bindir "," Pathname ","spec full_gem_path "," Pathname expand_path relative_path_from "," Pathname expand_path ","Bundler  settings [] ","Bundler  settings ","executable == ","spec executables each ","spec executables ","Thor Util  ruby_command ","File  read ","File  expand_path ","Bundler  bin_path ","Bundler  root join relative_path_from ","Bundler  root join ","Bundler  root "," raise ","RUBY_VERSION  >= ","File  write ","prefix + ","options [] "," require ","Gem  win_platform? "," __dir__ "," Pathname join relative_Bundler  settings [] _from ","spec full_gem_Bundler  settings []  "," Pathname expand_Bundler  settings []  relative_Bundler  settings [] _from "," Pathname expand_Bundler  settings []  ","Thor Util  Thor Util  ruby_command  ","File  expand_Bundler  settings []  ","Bundler  Bundler  bin_path  ","Bundler  bin_Bundler  settings []  ","Bundler  root join relative_Bundler  settings [] _from "]}," Bundler Index specs_by_name":{"type":"method","name":"specs_by_name","children":[],"call":["@specs [] ","@specs [] values "]}," Bundler Index add_source":{"type":"method","name":"add_source","children":[],"call":[" raise ","index class ","@sources uniq! ","@sources << ","index is_a? "]}," Bundler Index size":{"type":"method","name":"size","children":[],"call":["source size ","@sources inject ","@specs size "]}," Bundler Index unmet_dependency_names":{"type":"method","name":"unmet_dependency_names","children":[],"call":[" specs_by_name empty? "," specs_by_name ","dependency_names select ","(send\n  (send\n    (send nil :specs) :values) :map) flatten uniq ","(send\n  (send\n    (send nil :specs) :values) :map) flatten ","d name ","s dependencies map ","s dependencies ","array_of_s map "," specs values map "," specs values "," specs "," search empty? "," search ","names select ","n == ","names delete_if "," dependency_names ","name != "," dependency_names select ","names uniq! ","names push "," each ","(send\n  (send\n    (send nil :specs) :values) :map) flatten uniq  select ","dependency_ dependency_names  select "," dependency_names  select "," dependency_names  delete_if "," (send\n  (send\n    (send nil :specs) :values) :map) flatten uniq  "," dependency_ dependency_names  "," (send\n  (send\n    (send nil :specs) :values) :map) flatten uniq  select "," dependency_ dependency_names  select "," dependency_names  uniq! "," dependency_names  push "]}," Bundler Index source_types":{"type":"method","name":"source_types","children":[],"call":["(send\n  (send nil :sources) :map) uniq ","s class "," sources map "," sources "]}," Bundler Index local_search":{"type":"method","name":"local_search","children":[],"call":[" raise ","query inspect "," search_by_dependency "," specs_by_name "," search_by_spec ","query dep "," specs_by_name_and_version "]}," Bundler Index inspect":{"type":"method","name":"inspect","children":[],"call":[" specs size "," specs ","s inspect "," sources map "," sources "," object_id "," class "]}," Bundler Graph GraphVizClient run":{"type":"method","name":"run","children":[],"call":[" raise ","$stderr puts ","Bundler  ui info ","Bundler  ui "," g output ","@output_format to_sym "," g ","$stdout puts ","@output_format to_s == ","@output_format to_s "," g add_edge ","@edge_options [] "," g add_node ","@node_options [] ","(pair\n  (sym :constraint)\n  (false)) merge ","(pair\n  (sym :style)\n  (str \"filled\")) merge ","@groups include? ","children each ","@relations each ","@groups each "," g add_edges "," g add_nodes "," warn "]}," Bundler Graph GraphVizClient g":{"type":"method","name":"g","children":[],"call":["g edge []= ","g edge ","g node []= ","g node "," GraphViz  digraph "," require "]}," Bundler Graph GraphVizClient initialize":{"type":"method","name":"initialize","children":[],"call":["graph_instance output_format ","graph_instance output_file ","graph_instance edge_options ","graph_instance node_options ","graph_instance relations ","graph_instance groups ","graph_instance class "]}," Bundler Graph _make_label":{"type":"method","name":"_make_label","children":[],"call":[" raise ","tmp != ","symbol_or_string_or_dependency requirements_list join ","symbol_or_string_or_dependency requirements_list ","symbol_or_string_or_dependency respond_to? ","symbol_or_string_or_dependency to_s ","label << ","symbol_or_string_or_dependency to_spec version to_s ","symbol_or_string_or_dependency to_spec version ","symbol_or_string_or_dependency to_spec ","symbol_or_string_or_dependency name dup ","symbol_or_string_or_dependency name ","symbol_or_string_or_dependency is_a? ","element_type to_sym ","label nil? "," spec_for_dependency version "," spec_for_dependency ","symbol_or_string_or_dependency requirements_list join  != ","symbol_or_string_or_dependency to_s  << ","symbol_or_string_or_dependency name dup  << ","symbol_or_string_or_dependency to_s  nil? ","symbol_or_string_or_dependency name dup  nil? "]}," Bundler Graph _groups":{"type":"method","name":"_groups","children":[],"call":["relations keys ","@edge_options []= "," _make_label ","dependency name ","@node_options [] ","group to_s ","@relations [] add ","@relations [] ","relations [] add ","relations [] ","dependency groups each ","dependency groups ","@env current_dependencies each ","@env current_dependencies ","h []= ","Set  new ","Hash  new ","@without_groups include? "]}," Bundler Graph _populate_relations":{"type":"method","name":"_populate_relations","children":[],"call":["@edge_options []= "," _make_label ","c_dependency name ","dependency name ","child_dependencies each ","@node_options []= ","child_dependencies map to_set ","child_dependencies map ","@relations [] ","child_dependencies to_set ","relations [] ","dependency to_spec runtime_dependencies to_set ","dependency to_spec runtime_dependencies ","dependency to_spec ","parent_dependencies each ","Set  new ","parent_dependencies empty? "," _groups values to_set flatten "," _groups values to_set "," _groups values "," _groups ","h []= ","Hash  new ","dependency prerelease= "," loop "," spec_for_dependency runtime_dependencies to_set "," spec_for_dependency runtime_dependencies "," spec_for_dependency ","dependency to_spec runtime_dependencies to_set  each "," spec_for_dependency runtime_dependencies to_set  each ","dependency to_spec runtime_dependencies to_set  map to_set "," spec_for_dependency runtime_dependencies to_set  map to_set ","dependency to_spec runtime_dependencies to_set  map "," spec_for_dependency runtime_dependencies to_set  map ","dependency to_spec runtime_dependencies to_set  to_set "," spec_for_dependency runtime_dependencies to_set  to_set "," _groups values to_set flatten  each "," _groups values to_set flatten  empty? "]}," Bundler Fetcher strip_user_pass_from_uri":{"type":"method","name":"strip_user_pass_from_uri","children":[],"call":["uri_dup password= ","uri_dup password ","uri_dup user= ","uri_dup user ","uri dup ","uri dup  password= ","uri dup  password ","uri dup  user= ","uri dup  user "]}," Bundler Fetcher fetch_all_remote_specs":{"type":"method","name":"fetch_all_remote_specs","children":[],"call":[" raise "," strip_user_pass_from_uri ","Bundler  ui debug ","Bundler  ui ","spec_list [] ","Gem SpecFetcher  new list each ","Gem SpecFetcher  new list ","Gem SpecFetcher  new ","h []= ","Hash  new ","Gem  sources= ","Bundler  ui warn ","Bundler  ui info ","CertificateFailureError  new ","e message match ","e message ","Bundler  rubygems fetch_all_remote_specs ","Bundler  rubygems ","Bundler  rubygems sources= ","Bundler  ui trace "," uri "," fetch_all_remote_specs "," retry_with_auth ","@remote_uri to_s ","Bundler  rubygems sources "," remote_uri "," remote_uri userinfo "," remote_uri to_s ","Gem SpecFetcher  new list  [] "]}," Bundler Fetcher fetch_dependency_remote_specs":{"type":"method","name":"fetch_dependency_remote_specs","children":[],"call":["deps_list uniq ","s [] ","Gem Version  new ","deps_list << ","dep name "," raise ","(str \"Unfortunately, the gem \") + + + ","(str \"Unfortunately, the gem \") + + ","(str \"Unfortunately, the gem \") + "," puts ","e message include? ","e message ","Gem Dependency  new ","requirement split ","s [] map ","gem_list map ","Marshal  load "," fetch ","URI  parse ","gem_names join ","Bundler  ui debug ","Bundler  ui ","URI  encode ","(send\n  (lvar :gem_list) :map) flatten uniq ","(send\n  (lvar :gem_list) :map) flatten ","d first ","s [] collect ","(str \"Unfortunately, the gem \") + + + + "," well_formed_dependency ","Bundler  load_marshal "," dependency_api_uri ","gem_names each_slice ","Gem Dependency  new s_list uniq "," well_formed_dependency s_list uniq ","(send\n  (lvar :gem_list) :map) flatten uniq  uniq ","Gem Dependency  new s_list << "," well_formed_dependency s_list << ","(send\n  (lvar :gem_list) :map) flatten uniq  << ","Gem Dependency  new  name "," well_formed_dependency  name ","Marshal  load  map ","Bundler  load_marshal  map ","(send\n  (lvar :Marshal  load ) :map) flatten uniq ","(send\n  (lvar :Bundler  load_marshal ) :map) flatten uniq ","(send\n  (lvar :Marshal  load ) :map) flatten ","(send\n  (lvar :Bundler  load_marshal ) :map) flatten "," well_formed_Gem Dependency  new endency "," well_formed_ well_formed_dependency endency "," Gem Dependency  new endency_api_uri ","  well_formed_dependency endency_api_uri "," dependency_api_URI  parse  "]}," Bundler Fetcher fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","Bundler  ui debug ","Bundler  ui ","response body "," fetch ","counter + ","new_uri password= ","uri password ","new_uri user= ","uri user ","URI  parse ","response [] ","@@connection request ","counter >= ","spec __swap__ ","Bundler  rubygems spec_from_gem ","Bundler  rubygems "," download_gem_from_uri ","@@spec_fetch_map [] ","spec full_name ","spec is_a? ","response class ","new_uri host == ","uri host ","new_uri host ","@connection request ","Net HTTP Get  new ","uri request_uri ","Bundler  settings [] ","Bundler  settings ","CertificateFailureError  new ","@connection is_a? ","req basic_auth ","connection request ","Net HTTP  new ","uri port ","uri port == ","@connection port ","uri host == ","@connection address "," connection request "," connection "," request ","response message ","response code "," remote_uri "," remote_uri host "," raiBundler  rubygems spec_from_gem e ","@@connection request  body ","@connection request  body ","connection request  body "," connection request  body "," request  body ","reBundler  rubygems spec_from_gem ponBundler  rubygems spec_from_gem e body ","URI  parse  password= ","new_uri paBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem word= ","new_URI  parse  password= ","uri paBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem word ","URI  parse  password ","URI  parse  user= ","new_uri uBundler  rubygems spec_from_gem er= ","new_URI  parse  user= ","uri uBundler  rubygems spec_from_gem er ","URI  parse  user ","URI  parBundler  rubygems spec_from_gem e ","@@connection request  [] ","@connection request  [] ","connection request  [] "," connection request  [] "," request  [] ","reBundler  rubygems spec_from_gem ponBundler  rubygems spec_from_gem e [] ","@@connection requeBundler  rubygems spec_from_gem t ","@@connection Net HTTP Get  new uest ","@@Net HTTP  new  request ","Bundler  rubygems spec_from_gem pec __Bundler  rubygems spec_from_gem wap__ ","Bundler  rubygemBundler  rubygems spec_from_gem  Bundler  rubygems spec_from_gem pec_from_gem ","Bundler  rubygemBundler  rubygems spec_from_gem  "," download_gem_from_URI  parse  ","@@Bundler  rubygems spec_from_gem pec_fetch_map [] ","Bundler  rubygems spec_from_gem pec full_name ","Bundler  rubygems spec_from_gem pec iBundler  rubygems spec_from_gem _a? ","@@connection request  class ","@connection request  class ","connection request  class "," connection request  class "," request  class ","reBundler  rubygems spec_from_gem ponBundler  rubygems spec_from_gem e claBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem  ","URI  parse  host == ","new_uri hoBundler  rubygems spec_from_gem t == ","new_URI  parse  host == ","uri hoBundler  rubygems spec_from_gem t ","URI  parse  host ","new_uri hoBundler  rubygems spec_from_gem t ","new_URI  parse  host ","@connection requeBundler  rubygems spec_from_gem t ","@connection Net HTTP Get  new uest ","@Net HTTP  new  request ","uri requeBundler  rubygems spec_from_gem t_uri ","URI  parse  request_URI  parse  ","uri Net HTTP Get  new uest_uri ","Bundler  Bundler  rubygems spec_from_gem ettingBundler  rubygems spec_from_gem  [] ","Bundler  Bundler  rubygems spec_from_gem ettingBundler  rubygems spec_from_gem  ","@connection iBundler  rubygems spec_from_gem _a? ","@Net HTTP  new  is_a? ","req baBundler  rubygems spec_from_gem ic_auth ","Net HTTP Get  new  basic_auth ","connection requeBundler  rubygems spec_from_gem t ","connection Net HTTP Get  new uest ","Net HTTP  new  request ","URI  parse  port ","URI  parse  port == ","@Net HTTP  new  port ","uri hoBundler  rubygems spec_from_gem t == ","@connection addreBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem  ","@Net HTTP  new  address "," connection requeBundler  rubygems spec_from_gem t "," connection Net HTTP Get  new uest "," Net HTTP  new  request "," Net HTTP  new  "," requeBundler  rubygems spec_from_gem t "," Net HTTP Get  new uest ","@@connection request  message ","@connection request  message ","connection request  message "," connection request  message "," request  message ","reBundler  rubygems spec_from_gem ponBundler  rubygems spec_from_gem e meBundler  rubygems spec_from_gem Bundler  rubygems spec_from_gem age ","@@connection request  code ","@connection request  code ","connection request  code "," connection request  code "," request  code ","reBundler  rubygems spec_from_gem ponBundler  rubygems spec_from_gem e code "," remote_URI  parse  "," remote_uri hoBundler  rubygems spec_from_gem t "," remote_URI  parse  host "]}," Bundler Fetcher fetch_remote_specs":{"type":"method","name":"fetch_remote_specs","children":[],"call":[" fetch_remote_specs ","spec_list + ","full_dependency_list + ","(send\n  (lvar :spec_list) :map) uniq ","spec first ","spec_list map "," fetch_dependency_remote_specs ","query_list empty? ","Bundler  ui info ","Bundler  ui ","Bundler  ui debug ","query_list inspect ","Bundler  ui debug? ","gem_names - "," fetch_all_remote_specs ","e backtrace ","e message ","e class ","(pair\n  (ivar :@remote_uri)\n  (lvar :last_spec_list)) each ","@remote_uri scheme != ","@remote_uri scheme ","full_dependency_list empty? ","Bundler Fetcher  disable_endpoint ","@remote_uri scheme == ","gem_names ! ","e backtrace join ","@current_retries < ","Bundler Retry  new attempts ","Bundler Retry  new "," remote_uri ","gem_names -  empty? ","gem_names -  inspect "]}," Bundler Fetcher specs":{"type":"method","name":"specs","children":[],"call":["index << ","@@spec_fetch_map []= ","spec full_name ","spec source= ","RemoteSpecification  new ","EndpointSpecification  new ","name == ","specs [] each ","specs [] ","Bundler  ui info ","Bundler  ui ","Bundler  ui debug? "," fetch_all_remote_specs "," strip_user_pass_from_uri ","Bundler  ui debug ","e backtrace ","e message ","e class ","@remote_uri to_s include? ","@remote_uri to_s "," fetch_remote_specs ","Bundler Fetcher  disable_endpoint ","@remote_uri scheme == ","@remote_uri scheme ","gem_names ! ","Index  new "," raise ","e message include? "," fetch_remote_specs [] each "," fetch_remote_specs [] ","spec_fetch_map []= ","Bundler  rubygems sources= ","Bundler  rubygems "," use_api ","spec remote= "," remote_uri "," fetchers none? "," fetchers "," fetchers delete ","f specs ","f api_fetcher? "," fetchers dup each "," fetchers dup ","Bundler Index  new ","Bundler  rubygems sources ","specs ! ","specs each "," fetchers shift "," fetchers empty? "," fetchers first available? "," fetchers first "," fetchers last specs "," fetchers last ","FallbackError  === ","CertificateFailureError  new ","use_full_source_index ! ","specs nil? ","Bundler  ui debug? ! ","spec source_uri= ","Bundler Retry  new attempts ","Bundler Retry  new ","f available? ! ","f available? "," fetchers drop_while ","Index  new  << ","Bundler Index  new  << ","@@RemoteSpecification  new _fetch_map []= ","@@EndpointSpecification  new _fetch_map []= ","RemoteSpecification  new  full_name ","EndpointSpecification  new  full_name ","RemoteSpecification  new  source= ","EndpointSpecification  new  source= ","RemoteSpecification  new s [] each ","EndpointSpecification  new s [] each "," fetch_all_remote_specs  [] each "," fetch_remote_specs  [] each ","f specs  [] each "," fetchers last specs  [] each ","RemoteSpecification  new s [] ","EndpointSpecification  new s [] "," fetch_all_remote_specs  [] "," fetch_remote_specs  [] ","f specs  [] "," fetchers last specs  [] "," fetch_all_remote_RemoteSpecification  new s "," fetch_all_remote_EndpointSpecification  new s "," fetch_all_remote_ fetch_all_remote_specs  "," fetch_all_remote_ fetch_remote_specs  "," fetch_all_remote_f specs  "," fetch_all_remote_ fetchers last specs  "," fetch_remote_RemoteSpecification  new s "," fetch_remote_EndpointSpecification  new s "," fetch_remote_ fetch_all_remote_specs  "," fetch_remote_ fetch_remote_specs  "," fetch_remote_f specs  "," fetch_remote_ fetchers last specs  "," fetch_remote_RemoteSpecification  new s [] each "," fetch_remote_EndpointSpecification  new s [] each "," fetch_remote_ fetch_all_remote_specs  [] each "," fetch_remote_ fetch_remote_specs  [] each "," fetch_remote_f specs  [] each "," fetch_remote_ fetchers last specs  [] each "," fetch_remote_RemoteSpecification  new s [] "," fetch_remote_EndpointSpecification  new s [] "," fetch_remote_ fetch_all_remote_specs  [] "," fetch_remote_ fetch_remote_specs  [] "," fetch_remote_f specs  [] "," fetch_remote_ fetchers last specs  [] ","RemoteSpecification  new _fetch_map []= ","EndpointSpecification  new _fetch_map []= ","RemoteSpecification  new  remote= ","EndpointSpecification  new  remote= ","f RemoteSpecification  new s ","f EndpointSpecification  new s ","f  fetch_all_remote_specs  ","f  fetch_remote_specs  ","f f specs  ","f  fetchers last specs  ","RemoteSpecification  new s ! ","EndpointSpecification  new s ! "," fetch_all_remote_specs  ! "," fetch_remote_specs  ! ","f specs  ! "," fetchers last specs  ! ","RemoteSpecification  new s each ","EndpointSpecification  new s each "," fetch_all_remote_specs  each "," fetch_remote_specs  each ","f specs  each "," fetchers last specs  each "," fetchers last RemoteSpecification  new s "," fetchers last EndpointSpecification  new s "," fetchers last  fetch_all_remote_specs  "," fetchers last  fetch_remote_specs  "," fetchers last f specs  "," fetchers last  fetchers last specs  ","use_full_source_Index  new  ! ","use_full_source_Bundler Index  new  ! ","RemoteSpecification  new s nil? ","EndpointSpecification  new s nil? "," fetch_all_remote_specs  nil? "," fetch_remote_specs  nil? ","f specs  nil? "," fetchers last specs  nil? ","RemoteSpecification  new  source_uri= ","EndpointSpecification  new  source_uri= "]}," Bundler Fetcher fetch_spec":{"type":"method","name":"fetch_spec","children":[],"call":["Marshal  load ","Gem  inflate "," fetch ","Gem  read_binary ","uri path ","uri scheme == ","uri scheme ","URI  parse ","spec join ","spec - "," raise ","Bundler  load_marshal "," downloader fetch "," downloader ","Bundler  load_gemspec "," gemspec_cached_path "," remote_uri "," downloader fetch body ","Bundler  rubygems inflate ","Bundler  rubygems ","Bundler  rubygems correct_for_windows_path ","Bundler URI  parse ","Bundler  safe_load_marshal ","URI  parse  path ","Bundler URI  parse  path ","uri Bundler  rubygems correct_for_windows_path  ","URI  parse  scheme == ","Bundler URI  parse  scheme == ","URI  parse  scheme ","Bundler URI  parse  scheme ","spec -  join ","spec -  - ","Bundler  load_gemspec -  "," gemspec - _cached_path "," gemspec_cached_Bundler  rubygems correct_for_windows_path  "," remote_URI  parse  "," remote_Bundler URI  parse  ","Bundler  rubygems correct_for_windows_Bundler  rubygems correct_for_windows_path  "]}," Bundler Fetcher initialize":{"type":"method","name":"initialize","children":[],"call":["Net HTTP Persistent  new "," connection ","Socket  do_not_reverse_lookup= ","@@connection read_timeout= ","@connection read_timeout= ","Net HTTP  new ","@remote_uri port ","@remote_uri host "," raise ","@remote_uri scheme == ","@remote_uri scheme ","@public_uri password= ","@public_uri user= ","remote_uri dup ","@connection cert_store= "," bundler_cert_store ","@connection verify_mode= ","Bundler  settings [] ","Bundler  settings ","@remote_uri dup ","Bundler Source  mirror_for ","AnonymizableURI  new ","@remote_uri nil? "," resolve_remote_uri "," configured_uri_for ","@Net HTTP  new  read_timeout= ","@Net HTTP Persistent  new  read_timeout= ","Net HTTP  new  read_timeout= ","Net HTTP Persistent  new  read_timeout= ","Bundler Source  mirror_for  port ","Bundler Source  mirror_for  host ","Bundler Source  mirror_for  scheme == ","Bundler Source  mirror_for  scheme ","remote_uri dup  password= ","@remote_uri dup  password= ","remote_uri dup  user= ","@remote_uri dup  user= ","Net HTTP  new  cert_store= ","Net HTTP Persistent  new  cert_store= ","Net HTTP  new  verify_mode= ","Net HTTP Persistent  new  verify_mode= ","Bundler Source  mirror_for  dup ","Bundler Source  mirror_for  nil? "]}," Bundler Fetcher download_gem_from_uri":{"type":"method","name":"download_gem_from_uri","children":[],"call":["Bundler  sudo ","spec full_name ","Bundler  tmp ","Bundler  mkdir_p ","Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  requires_sudo? ","Bundler  rubygems download_gem ","FileUtils  mkdir_p ","spec fetch_platform ","Bundler  rm_rf "]}," Bundler EndpointSpecification local_specification_path":{"type":"method","name":"local_specification_path","children":[],"call":[" full_name "," base_dir "," installation_path "]}," Bundler EndpointSpecification __swap__":{"type":"method","name":"__swap__","children":[],"call":[" raise ","extra_deps map join ","extra_deps map "," full_name ","Bundler  ui debug ","spec runtime_dependencies "," dependencies "," remote ","Bundler  ui ","extra_deps any? ","spec runtime_dependencies map - "," dependencies map ","spec runtime_dependencies map ","Gem Dependency  new ","d requirements_list sort ","d requirements_list ","d name "," proc ","SharedHelpers  ensure_same_dependencies ","spec dependencies ","spec runtime_dependencies map -  map join ","spec runtime_dependencies map -  map ","spec runtime_dependencies map -  any? "]}," Bundler EndpointSpecification _local_specification":{"type":"method","name":"_local_specification","children":[],"call":[" eval ","File  read "," local_specification_path ","File  exists? ","File  exist? ","spec loaded_from= "," eval tap "]}," Bundler EndpointSpecification post_install_message":{"type":"method","name":"post_install_message","children":[],"call":[" _local_specification post_install_message "," _local_specification ","@remote_specification post_install_message "]}," Bundler EndpointSpecification bindir":{"type":"method","name":"bindir","children":[],"call":[" _local_specification bindir "," _local_specification ","@remote_specification bindir "]}," Bundler EndpointSpecification executables":{"type":"method","name":"executables","children":[],"call":[" _local_specification executables "," _local_specification ","@remote_specification executables "]}," Bundler EndpointSpecification require_paths":{"type":"method","name":"require_paths","children":[],"call":[" _local_specification require_paths "," _local_specification ","@remote_specification require_paths "]}," Bundler EndpointSpecification fetch_platform":{"type":"method","name":"fetch_platform","children":[],"call":[]}," Bundler EndpointSpecification initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_metadata "," build_dependency ","dependencies map ","Gem Version  create ","Gem Platform  new "]}," Bundler DepProxy requirement":{"type":"method","name":"requirement","children":[],"call":["@dep requirement "]}," Bundler DepProxy name":{"type":"method","name":"name","children":[],"call":["@dep name "]}," Bundler CLI clean":{"type":"method","name":"clean","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Bundler  load clean ","Bundler  load "," options [] "," options ","Bundler  settings [] ","Bundler  settings ","clean_output ! ","Clean  new run ","Clean  new "," options dup "," require ","Bundler  settings []= "," require_relative ","Bundler  load clean  ! "]}," Bundler CLI outdated":{"type":"method","name":"outdated","children":[],"call":["Bundler  ui info ","Bundler  ui ","out_count < ","Bundler  ui debug ","active_spec loaded_from ","active_spec name ","current_spec git_version ","current_spec version ","active_spec git_version ","active_spec version ","current_spec git_version != ","Gem Version  new > ","Gem Version  new ","active_spec nil? ","active_spec last ","b version prerelease? ","b version ","b respond_to? ","active_spec delete_if ","active_spec size > ","active_spec size "," options [] ! "," options [] "," options ","current_spec version prerelease? ! ","current_spec version prerelease? ","definition index [] sort_by ","definition index [] ","current_spec name ","definition index ","gems include? ! ","gems include? ","gems empty? ! ","gems empty? ","current_specs each ","definition resolve_remotely! ","definition resolve_with_cache! ","Bundler  definition ","sources empty? ","Bundler  load specs ","Bundler  load "," Array ","spec loaded_from ","spec name ","current git_version ","current version ","spec git_version ","spec version ","current git_version != ","spec nil? ","spec last ","spec delete_if ","spec size > ","spec size ","current version prerelease? ! ","current version prerelease? ","current name ","current nil? ","spec name == ","s name ","current_specs find ","spec source is_a? ","spec source ","spec source fetch ","spec source respond_to? ","definition specs each ","definition specs ","spec source outdated ","Outdated  new run ","Outdated  new "," require ","Bundler  definition validate_ruby! "," exit ","out_count zero? ","out_count == ","(send\n  (lvar :current_specs) :sort_by) each ","current_specs sort_by ","Bundler  ui silence ","(str \"  * \") rstrip ","dependency requirement ","dependency specific? ","current_dependencies [] ","(send\n  (lvar :gemfile_specs) :sort_by\n  (block-pass\n    (sym :name))) flatten each ","(send\n  (lvar :gemfile_specs) :sort_by\n  (block-pass\n    (sym :name))) flatten ","dependency_specs sort_by ","gemfile_specs sort_by ","current_dependencies has_key? ","current_specs partition ","current_dependencies []= ","dep name ","Bundler  load dependencies each ","Bundler  load dependencies "," select_spec ","gems each ","dependency requirement satisfied_by? ","active_spec reverse detect ","active_spec reverse "," require_relative ","active_spec last  loaded_from ","active_spec last  name ","current_spec last  git_version ","current_spec last  version ","active_spec last  git_version ","active_spec last  version ","current_spec last  git_version != ","active_spec last  nil? ","active_spec last  last ","active_spec last  delete_if ","active_spec last  size > ","active_spec last  size ","current_spec last  version prerelease? ! ","current_spec last  version prerelease? ","Bundler  definition  index [] sort_by ","Bundler  definition  index [] ","current_spec last  name ","Bundler  definition  index ","Bundler  load specs  each ","current_spec last s each ","Bundler  definition  resolve_remotely! ","Bundler  definition  resolve_with_cache! ","Bundler  Bundler  definition  "," Array  empty? ","Bundler  load spec last s ","spec last  loaded_from ","spec last  name ","spec last  git_version ","spec last  version ","spec last  nil? ","spec last  last ","spec last  delete_if ","spec last  size > ","spec last  size ","spec last  name == ","Bundler  load specs  find ","current_spec last s find ","spec last  source is_a? ","spec last  source ","spec last  source fetch ","spec last  source respond_to? ","Bundler  definition  specs each ","definition spec last s each ","Bundler  definition  specs ","definition spec last s ","spec last  source outdated ","Bundler  Bundler  definition  validate_ruby! ","(send\n  (lvar :Bundler  load specs ) :sort_by) each ","(send\n  (lvar :current_spec last s) :sort_by) each ","Bundler  load specs  sort_by ","current_spec last s sort_by ","current_dependencies []  requirement ","dependency spec last ific? ","current_dependencies []  specific? ","(send\n  (lvar :gemfile_spec last s) :sort_by\n  (block-pass\n    (sym :name))) flatten each ","(send\n  (lvar :gemfile_spec last s) :sort_by\n  (block-pass\n    (sym :name))) flatten ","dependency_spec last s sort_by ","current_dependencies [] _specs sort_by ","gemfile_spec last s sort_by ","Bundler  load specs  partition ","current_spec last s partition "," select_spec last  ","current_dependencies []  requirement satisfied_by? ","active_spec last  reverse detect ","active_spec last  reverse "]}," Bundler RubygemsIntegration backport_yaml_initialize":{"type":"method","name":"backport_yaml_initialize","children":[],"call":["map [] ","Gem Version  send "," redefine_method "]}," Bundler Settings load_config":{"type":"method","name":"load_config","children":[],"call":["YAML  load_file ","config_file size zero? ! ","config_file size zero? ","config_file size ","config_file exist? ","Hash  [] ","value gsub tr ","value gsub "," convert_to_backward_compatible_key ","config_file read scan map ","config_file read scan ","config_file read "," ignore_config? ! "," ignore_config? "," raise ","PermissionError  new ","config_file readable? ","valid_file ! ","SharedHelpers  filesystem_access ","YAMLSerializer  load ","file read "," require ","file size zero? ! ","file size zero? ","file size ","file exist? ","config_file ! ","n gsub ","m compact map ","m compact ","n gsub tr "," require_relative ","config []= ","k gsub ","Bundler  ui warn ","Bundler  ui ","k include? ","YAMLSerializer  load inject "]}," Bundler Dsl ruby":{"type":"method","name":"ruby","children":[],"call":["Bundler  ui warn ","Bundler  ui ","RubyVersion  new ","options [] "," raise ","ruby_version != ","options [] == ","options [] nil? "]}," Bundler UI Shell debugging?":{"type":"method","name":"debugging?","children":[],"call":["@quiet ! "]}," Bundler UI debugging?":{"type":"method","name":"debugging?","children":[],"call":[]}," Bundler RubygemsIntegration Transitional path":{"type":"method","name":"path","children":[],"call":["obj to_s "]}," Bundler RubygemsIntegration Legacy path":{"type":"method","name":"path","children":[],"call":["obj to_s "]}," Bundler RubygemsIntegration fully_load!":{"type":"method","name":"fully_load!","children":[],"call":["Gem  source_index "," is_19? "]}," Bundler RubygemsIntegration is_19?":{"type":"method","name":"is_19?","children":[],"call":[]}," Bundler Source Rubygems outdated":{"type":"method","name":"outdated","children":[],"call":["Bundler  ui info ","installed_spec version ","spec version ","spec name ","Bundler  ui ","Bundler  ui debug ","spec version == ","installed_spec first "," installed_specs [] "," installed_specs ","installed_spec first  version "," installed_specs []  version ","installed_spec first  first "," installed_specs []  first "," installed_spec first s [] ","  installed_specs [] s [] "," installed_spec first s ","  installed_specs [] s "]}," Bundler eval_gemspec":{"type":"method","name":"eval_gemspec","children":[],"call":[" raise ","msg << ","RUBY_VERSION  >= ","e is_a? ","e message ","path basename ","e class ","line include? ","path to_s ","e backtrace find ","e backtrace "," eval ","path expand_path to_s ","path expand_path ","String  new ","Dsl DSLError  new ","TOPLEVEL_BINDING  dup ","String  new  << "]}," Bundler eval_yaml_gemspec":{"type":"method","name":"eval_yaml_gemspec","children":[],"call":[" eval_gemspec ","Gem Specification  from_yaml ","Kernel  send "," require_relative ","Kernel  require "]}," Bundler reset!":{"type":"method","name":"reset!","children":[],"call":[" rubygems reset "," rubygems "," rubygems undo_replacements ","Plugin  reset! "," reset_rubygems! "," reset_paths! "]}," Bundler ruby_version":{"type":"method","name":"ruby_version","children":[],"call":["SystemRubyVersion  new "]}," Bundler git_present?":{"type":"method","name":"git_present?","children":[],"call":["Bundler  which ","RbConfig CONFIG  [] "]}," Bundler clear_gemspec_cache":{"type":"method","name":"clear_gemspec_cache","children":[],"call":[]}," Bundler load_gemspec_uncached":{"type":"method","name":"load_gemspec_uncached","children":[],"call":[" raise ","e message ","Bundler  rubygems validate ","Bundler  rubygems "," eval_gemspec "," eval_yaml_gemspec ","contents [] == ","contents [] ","path read ","SharedHelpers  chdir ","path dirname to_s ","path dirname ","Pathname  new ","Bundler  ui warn ","Bundler  ui ","UI Shell  new warn ","UI Shell  new ","spec loaded_from= ","path expand_path to_s ","path expand_path ","Gem InvalidSpecificationException  new ","contents start_with? "," read_file ","File  open ","msg << ","RUBY_VERSION  >= ","e is_a? ","path basename ","e class ","line include? ","path to_s ","e backtrace find ","e backtrace "," eval ","Gem Specification  from_yaml ","File  read ","path basename to_s ","Dir  chdir ","contents =~ "," eval_gem eval_gemspec  "," eval_gem eval_yaml_gemspec  "," eval_yaml_gem eval_gemspec  "," eval_yaml_gem eval_yaml_gemspec  ","path read  [] == "," read_file  [] == ","File  open  [] == ","File  read  [] == ","path read  [] "," read_file  [] ","File  open  [] ","File  read  [] ","Pathname  new  read ","Pathname  new  dirname to_s ","Pathname  new  dirname "," eval_gemspec  loaded_from= "," eval_yaml_gemspec  loaded_from= ","Pathname  new  expand_Pathname  new  to_s ","Pathname  new  expand_Pathname  new  ","path read  start_with? "," read_file  start_with? ","File  open  start_with? ","File  read  start_with? ","Pathname  new  basename ","Pathname  new  to_s ","Pathname  new  basename to_s ","path read  =~ "," read_file  =~ ","File  open  =~ ","File  read  =~ "]}," Bundler load_marshal":{"type":"method","name":"load_marshal","children":[],"call":[" raise ","e message ","e class ","Marshal  load "]}," Bundler default_bundle_dir":{"type":"method","name":"default_bundle_dir","children":[],"call":["SharedHelpers  default_bundle_dir "]}," Bundler rm_rf":{"type":"method","name":"rm_rf","children":[],"call":["FileUtils  remove_entry_secure ","File  exist? "," raise ","Bundler  ui warn ","Bundler  ui ","File  world_writable? "]}," Bundler locked_gems":{"type":"method","name":"locked_gems","children":[],"call":["LockfileParser  new ","Bundler  read_file ","Bundler  default_lockfile ","Bundler  default_lockfile exist? "," definition locked_gems "," definition ","Bundler  default_lockfile file? ","Bundler  default_Bundler  read_file file ","Bundler  default_Bundler  read_file file exist? "," definition Bundler  read_file ed_gems ","Bundler  default_Bundler  read_file file file? "]}," Bundler Worker abort_threads":{"type":"method","name":"abort_threads","children":[],"call":[" exit ","i exit ","@threads each ","Bundler  ui debug "," caller join "," caller ","Bundler  ui "]}," Bundler Worker stop_threads":{"type":"method","name":"stop_threads","children":[],"call":["thread join ","@threads each ","@request_queue enq "," remove_interrupt_handler "]}," Bundler Worker apply_func":{"type":"method","name":"apply_func","children":[],"call":["WrappedException  new ","@func call "]}," Bundler Worker process_queue":{"type":"method","name":"process_queue","children":[],"call":["@response_queue enq "," apply_func ","obj equal? ","@request_queue deq "," loop ","@request_queue deq  equal? "]}," Bundler Worker stop":{"type":"method","name":"stop","children":[],"call":[" stop_threads "]}," Bundler Worker deq":{"type":"method","name":"deq","children":[],"call":[" raise ","result exception ","result is_a? ","@response_queue deq ","@response_queue deq  exception ","@response_queue deq  is_a? "]}," Bundler Worker enq":{"type":"method","name":"enq","children":[],"call":["@request_queue enq "," create_threads "]}," Bundler Worker initialize":{"type":"method","name":"initialize","children":[],"call":[" abort_threads "," trap "," process_queue ","Thread  start ","size times map ","size times ","Queue  new ","thread name= ","thread respond_to? ","(send\n  (const nil :Thread) :start) tap ","Array  new ","SharedHelpers  trap ","Thread Queue  new "]}," Bundler Worker WrappedException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor find_command_possibilities":{"type":"method","name":"find_command_possibilities","children":[],"call":["unique_possibilities size == ","unique_possibilities size ","possibilities include? ","(send\n  (lvar :possibilities) :map) uniq "," map [] "," map ","possibilities map ","(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort ","meth == ","n [] "," all_commands merge keys select "," all_commands merge keys "," all_commands merge "," all_commands ","meth to_s length ","meth to_s ","(send\n  (lvar :possibilities) :map) uniq  size == ","unique_(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort  size == ","(send\n  (lvar :possibilities) :map) uniq  size ","unique_(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort  size ","(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort  include? ","(send\n  (lvar :(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort ) :map) uniq ","(send\n  (send\n    (send\n      (send nil :all_commands) :merge\n      (send nil :map)) :keys) :select) sort  map ","meth to_s meth to_s length gth "]}," Thor normalize_command_name":{"type":"method","name":"normalize_command_name","children":[],"call":["meth to_s gsub ","meth to_s ","possibilities first "," map [] "," map "," default_command ","possibilities size < ","possibilities size "," fail ","possibilities join ","possibilities size > "," find_command_possibilities "," default_command to_s gsub "," default_command to_s ","meth to_s tr ","possibilities empty? "," raise "," default_command to_s tr ","possibilities first  to_s gsub "," map []  to_s gsub ","possibilities first  to_s "," map []  to_s "," find_command_possibilities  first "," find_command_possibilities  size < "," find_command_possibilities  size "," find_command_possibilities  join "," find_command_possibilities  size > "," find_command_ find_command_possibilities  ","possibilities first  to_s tr "," map []  to_s tr "," find_command_possibilities  empty? "]}," Thor retrieve_command_name":{"type":"method","name":"retrieve_command_name","children":[],"call":["args shift ","meth !~ "," map [] "," map ","args first to_s ","args first ","args empty? ","args first to_s  !~ "]}," Thor create_command":{"type":"method","name":"create_command","children":[],"call":[" puts ","(str \"[WARNING] Attempted to create command \") << << "," caller [] inspect "," caller [] "," caller ","(str \"[WARNING] Attempted to create command \") << ","meth inspect ","meth == "," all_commands [] "," all_commands "," commands []= ","base_class new "," method_options "," commands "]}," Thor dynamic_command_class":{"type":"method","name":"dynamic_command_class","children":[],"call":[]}," Thor stop_on_unknown_option":{"type":"method","name":"stop_on_unknown_option","children":[],"call":["Set  new "]}," Thor stop_on_unknown_option?":{"type":"method","name":"stop_on_unknown_option?","children":[],"call":[" stop_on_unknown_option include? ","command name to_sym ","command name "," stop_on_unknown_option ","@stop_on_unknown_option include? ","task name to_sym ","task name ","@stop_on_unknown_option ! ! ","@stop_on_unknown_option ! ","@stop_on_unknown_option nil? ! ","@stop_on_unknown_option nil? "]}," Thor stop_on_unknown_option!":{"type":"method","name":"stop_on_unknown_option!","children":[],"call":[" stop_on_unknown_option merge "," stop_on_unknown_option ","@stop_on_unknown_option merge ","Set  new "," stop_on_unknown_option | "," stop_on_unknown_option |  merge "]}," Thor subcommand_classes":{"type":"method","name":"subcommand_classes","children":[],"call":[]}," Thor printable_commands":{"type":"method","name":"printable_commands","children":[],"call":["(send\n  (begin\n    (if\n      (lvar :all)\n      (send nil :all_commands)\n      (send nil :commands))) :map) compact ","item << ","command description gsub ","command description "," banner ","command hidden? ","(if\n  (lvar :all)\n  (send nil :all_commands)\n  (send nil :commands)) map "," commands "," all_commands "]}," Thor command_help":{"type":"method","name":"command_help","children":[],"call":["shell say ","command description ","shell print_wrapped ","command long_description "," class_options_help ","command options map ","command options "," banner "," handle_no_command_error "," all_commands [] "," all_commands "," normalize_command_name ","command options values "," banner split join "," banner split "," all_commands []  description "," all_commands []  long_description "," all_commands []  options map "," all_commands []  options "," handle_no_ all_commands [] _error "," all_ all_commands [] s [] "," all_ all_commands [] s "," normalize_ all_commands [] _name "," all_commands []  options values "]}," Thor default_command":{"type":"method","name":"default_command","children":[],"call":[" from_superclass ","meth to_s ","meth == "]}," Thor package_name":{"type":"method","name":"package_name","children":[],"call":["name == ","name nil? "]}," Thor Util escape_globs":{"type":"method","name":"escape_globs","children":[],"call":["path to_s gsub ","path to_s "]}," Thor Util find_class_and_command_by_namespace":{"type":"method","name":"find_class_and_command_by_namespace","children":[],"call":["Bundler Thor Util  find_by_namespace ","klass ! ","pieces join ","pieces pop ","namespace split ","namespace include? ","Thor Util  find_by_namespace ","Bundler Thor Util  find_by_namespace  ! ","Thor Util  find_by_namespace  ! ","namespace split  join ","namespace split  pop "]}," Thor Shell HTML can_display_colors?":{"type":"method","name":"can_display_colors?","children":[],"call":[]}," Thor Shell Color can_display_colors?":{"type":"method","name":"can_display_colors?","children":[],"call":[" stdout tty? "," stdout "," are_colors_disabled? ! "," are_colors_disabled? "," are_colors_supported? "]}," Thor Shell Basic ask_filtered":{"type":"method","name":"ask_filtered","children":[],"call":[" say ","answer_set include? "," ask_simply ","answer_set join ","options [] ","answer_set map join ","answer_set map ","answer_set inspect "," answer_match ","options fetch "," ask_simply _set include? ","options []  include? "," ask_simply _set join ","options []  join "," ask_simply _set map join ","options []  map join "," ask_simply _set map ","options []  map "," ask_simply _set inspect ","options []  inspect ","  ask_simply _match "]}," Thor Shell Basic ask_simply":{"type":"method","name":"ask_simply","children":[],"call":["result == ","result strip! ","Bundler Thor LineEditor  readline "," prepare_message ","(lvar :statement) uniq join ","(lvar :statement) uniq ","options [] ","result strip "," stdin gets strip "," stdin gets "," stdin "," say ","text strip! "," stdin gets tap ","Thor LineEditor  readline ","Bundler Thor LineEditor  readline  == ","result strip  == "," stdin gets  == ","Thor LineEditor  readline  == ","Bundler Thor LineEditor  readline  strip! ","result strip  strip! "," stdin gets  strip! ","Thor LineEditor  readline  strip! "," prepare_ prepare_message  "," prepare_(lvar :statement) uniq join  ","Bundler Thor LineEditor  readline  strip ","result strip  strip "," stdin gets  strip ","Thor LineEditor  readline  strip "]}," Thor Shell Basic as_unicode":{"type":"method","name":"as_unicode","children":[],"call":[]}," Thor Shell Basic lookup_color":{"type":"method","name":"lookup_color","children":[],"call":[" class const_get ","color to_s upcase ","color to_s "," class ","color is_a? "]}," Thor Shell Basic can_display_colors?":{"type":"method","name":"can_display_colors?","children":[],"call":[]}," Thor Shell Basic prepare_message":{"type":"method","name":"prepare_message","children":[],"call":["spaces + "," set_color ","message to_s ","   * "," padding ","   *  + "]}," Thor Shell Basic print_in_columns":{"type":"method","name":"print_in_columns","children":[],"call":[" stdout printf "," stdout "," stdout puts ","index + == ","array length ","index + ","index zero? ! ","index zero? ","(begin\n  (send\n    (begin\n      (send\n        (lvar :index) :+\n        (int 1))) :%\n    (begin\n      (send\n        (send nil :terminal_width) :/\n        (lvar :colwidth))))) zero? ","(send\n  (lvar :index) :+\n  (int 1)) % "," terminal_width / "," terminal_width ","array each_with_index ","(or\n  (send\n    (block\n      (send\n        (lvar :array) :map)\n      (args\n        (arg :el))\n      (send\n        (send\n          (lvar :el) :to_s) :size)) :max)\n  (int 0)) + ","(send\n  (lvar :array) :map) max ","el to_s size ","el to_s ","array map ","array empty? ","(begin\n  (send\n    (begin\n      (send\n        (lvar :index) :+\n        (int 1))) :%\n    (begin\n      (send\n        (send nil :terminal_width) :/\n        (lvar :(or\n  (send\n    (block\n      (send\n        (lvar :array) :map)\n      (args\n        (arg :el))\n      (send\n        (send\n          (lvar :el) :to_s) :size)) :max)\n  (int 0)) + ))))) zero? "]}," Runner display_commands":{"type":"method","name":"display_commands","children":[],"call":[" say "," print_table ","- * ","namespace size "," shell set_color "," shell ","a [] <=> ","b [] ","a [] ","list sort! "]}," namespace":{"type":"method","name":"namespace","children":[],"call":["Bundler Thor RakeCompat  rake_classes pop ","Bundler Thor RakeCompat  rake_classes ","Bundler Thor RakeCompat  rake_classes << ","klass const_get ","klass const_set ","Class  new ","Bundler Thor Util  camel_case to_sym ","Bundler Thor Util  camel_case ","name to_s ","Bundler Thor RakeCompat  rake_classes last ","Thor RakeCompat  rake_classes pop ","Thor RakeCompat  rake_classes ","Thor RakeCompat  rake_classes << ","Thor Util  camel_case to_sym ","Thor Util  camel_case ","Thor RakeCompat  rake_classes last ","Bundler Thor RakeCompat  rake_classes last  const_get ","Thor RakeCompat  rake_classes last  const_get ","Bundler Thor RakeCompat  rake_classes last  const_set ","Thor RakeCompat  rake_classes last  const_set "]}," task":{"type":"method","name":"task","children":[],"call":["Rake Task  [] invoke ","Rake Task  [] ","task name to_sym ","task name ","klass send ","Rake  application last_description= ","Rake  application ","klass desc ","Rake  application last_description ","description strip! ","description << ","(send\n  (send\n    (lvar :task) :arg_names) :map) join ","n to_s upcase ","n to_s ","task arg_names map ","task arg_names ","task name split last ","task name split ","Bundler Thor RakeCompat  rake_classes last ","Bundler Thor RakeCompat  rake_classes ","Thor RakeCompat  rake_classes last ","Thor RakeCompat  rake_classes ","Bundler Thor RakeCompat  rake_classes last  send ","Thor RakeCompat  rake_classes last  send ","Bundler Thor RakeCompat  rake_classes last  desc ","Thor RakeCompat  rake_classes last  desc "]}," Thor Options parsing_options?":{"type":"method","name":"parsing_options?","children":[],"call":[" peek "]}," Thor Options current_is_value?":{"type":"method","name":"current_is_value?","children":[],"call":[" parsing_options? ! "," parsing_options? "," peek "]}," Thor Options peek":{"type":"method","name":"peek","children":[],"call":[" shift ","result == ","@extra size "]}," Thor Options remaining":{"type":"method","name":"remaining","children":[],"call":[]}," Thor Arguments remaining":{"type":"method","name":"remaining","children":[],"call":[]}," Thor LineEditor best_available":{"type":"method","name":"best_available","children":[],"call":[]}," Thor LineEditor readline":{"type":"method","name":"readline","children":[],"call":[]}," Thor LineEditor Readline PathCompletion base_path":{"type":"method","name":"base_path","children":[],"call":["Dir  pwd "]}," Thor LineEditor Readline PathCompletion glob_pattern":{"type":"method","name":"glob_pattern","children":[],"call":[" text "," base_path "]}," Thor LineEditor Readline PathCompletion absolute_matches":{"type":"method","name":"absolute_matches","children":[],"call":["File  directory? ","Dir  [] map ","Dir  [] "," glob_pattern "]}," Thor LineEditor Readline PathCompletion relative_matches":{"type":"method","name":"relative_matches","children":[],"call":["path sub "," base_path "," absolute_matches map "," absolute_matches "]}," Thor LineEditor Readline PathCompletion matches":{"type":"method","name":"matches","children":[],"call":[" relative_matches "]}," Thor LineEditor Readline PathCompletion initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor LineEditor Readline use_path_completion?":{"type":"method","name":"use_path_completion?","children":[],"call":[" options fetch "," options "]}," Thor LineEditor Readline completion_options":{"type":"method","name":"completion_options","children":[],"call":[" options fetch "," options "]}," Thor LineEditor Readline completion_proc":{"type":"method","name":"completion_proc","children":[],"call":["option start_with? "," completion_options select "," completion_options "," proc "," completion_options any? ","PathCompletion  new matches ","PathCompletion  new "," use_path_completion? ","Proc  new "]}," Thor LineEditor Readline add_to_history?":{"type":"method","name":"add_to_history?","children":[],"call":[" options fetch "," options "]}," Thor LineEditor Readline readline":{"type":"method","name":"readline","children":[],"call":[" Readline  readline "," add_to_history? "," prompt "," Readline  completion_proc= "," completion_proc "," Readline  completion_append_character= "," echo? "]}," Thor LineEditor Readline available?":{"type":"method","name":"available?","children":[],"call":[]}," Thor LineEditor Basic echo?":{"type":"method","name":"echo?","children":[],"call":[" options fetch "," options "]}," Thor LineEditor Basic get_input":{"type":"method","name":"get_input","children":[],"call":["$stdin noecho ","$stdin gets "," echo? "," require ","RUBY_VERSION  > "]}," Thor LineEditor Basic readline":{"type":"method","name":"readline","children":[],"call":[" get_input ","$stdout print "," prompt "]}," Thor LineEditor Basic initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor LineEditor Basic available?":{"type":"method","name":"available?","children":[],"call":[]}," Thor Invocation _retrieve_class_and_command":{"type":"method","name":"_retrieve_class_and_command","children":[],"call":[" class prepare_for_invocation "," class ","name to_s "," class all_commands [] "," class all_commands ","name nil? "]}," Thor Invocation invoke_command":{"type":"method","name":"invoke_command","children":[],"call":["command run ","current << ","command name ","current include? ","@_invocations [] "," class ","@_invocations []  << ","@_invocations []  include? "]}," Thor Invocation current_command_chain":{"type":"method","name":"current_command_chain","children":[],"call":["@_invocations values flatten map ","@_invocations values flatten ","@_invocations values "]}," Group create_command":{"type":"method","name":"create_command","children":[],"call":[" commands []= ","Bundler Thor Command  new ","meth to_s "," commands ","Thor Command  new "]}," Group self_command":{"type":"method","name":"self_command","children":[],"call":["Bundler Thor DynamicCommand  new "," class_options "," namespace ","Thor DynamicCommand  new "]}," Group printable_commands":{"type":"method","name":"printable_commands","children":[],"call":["item << "," desc gsub "," desc "," banner "]}," IO binread":{"type":"method","name":"binread","children":[],"call":["f read ","File  open "," fail ","1 + ","args size ","args size < "," raise "]}," Thor CoreExt HashWithIndifferentAccess to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  new merge! ","Hash  new "," default "]}," Thor DynamicCommand run":{"type":"method","name":"run","children":[],"call":["instance class handle_no_command_error "," name ","instance class ","(send\n  (send\n    (lvar :instance) :methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance methods & "," name to_sym "," name to_s ","instance methods "]}," Thor DynamicCommand initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Thor HiddenCommand hidden?":{"type":"method","name":"hidden?","children":[],"call":[]}," Thor Command handle_no_method_error?":{"type":"method","name":"handle_no_method_error?","children":[],"call":["error message =~ ","Regexp  escape ","instance to_s "," name ","error message "," not_debugging? "]}," Thor Command handle_argument_error?":{"type":"method","name":"handle_argument_error?","children":[],"call":["RUBY_VERSION  >= ","saned size == ","saned size ","saned empty? "," sans_backtrace ","error backtrace ","error message =~ ","error message "," not_debugging? "," sans_backtrace  size == "," sans_backtrace  size "," sans_backtrace  empty? "]}," Thor Command sans_backtrace":{"type":"method","name":"sans_backtrace","children":[],"call":["saned - ","RUBY_ENGINE  =~ ","frame =~ ","RUBY_PLATFORM  =~ ","backtrace reject "]}," Thor Command local_method?":{"type":"method","name":"local_method?","children":[],"call":["(send\n  (lvar :methods) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ! ","(send\n  (lvar :methods) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ","methods & ","name to_sym ","name to_s ","instance public_methods + + ","instance protected_methods ","instance public_methods + ","instance private_methods ","instance public_methods ","(send\n  (lvar :instance public_methods + + ) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ! ","(send\n  (lvar :instance public_methods + + ) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ","instance public_methods + +  & ","instance public_instance public_methods + +  + + ","instance protected_instance public_methods + +  ","instance public_instance public_methods + +  + ","instance private_instance public_methods + +  ","instance public_instance public_methods + +  "]}," Thor Command private_method?":{"type":"method","name":"private_method?","children":[],"call":["(send\n  (send\n    (lvar :instance) :private_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ! ","(send\n  (send\n    (lvar :instance) :private_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance private_methods & "," name to_sym "," name "," name to_s ","instance private_methods "]}," Thor Command public_method?":{"type":"method","name":"public_method?","children":[],"call":["(send\n  (send\n    (lvar :instance) :public_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ! ","(send\n  (send\n    (lvar :instance) :public_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance public_methods & "," name to_sym "," name "," name to_s ","instance public_methods "]}," Thor Command required_options":{"type":"method","name":"required_options","children":[],"call":["(send\n  (send nil :options) :map) compact sort join ","(send\n  (send nil :options) :map) compact sort ","(send\n  (send nil :options) :map) compact ","o usage ","o required? "," options map "," options "]}," Thor Command not_debugging?":{"type":"method","name":"not_debugging?","children":[],"call":["(and\n  (send\n    (send\n      (lvar :instance) :class) :respond_to?\n    (sym :debugging))\n  (send\n    (send\n      (lvar :instance) :class) :debugging)) ! ","instance class debugging ","instance class ","instance class respond_to? "]}," Thor Command formatted_usage":{"type":"method","name":"formatted_usage","children":[],"call":["formatted strip ","formatted << "," required_options "," usage to_s "," usage ","match << << ","(send\n  (send\n    (lvar :klass) :arguments) :map) compact join ","(send\n  (send\n    (lvar :klass) :arguments) :map) compact ","a usage ","klass arguments map ","klass arguments ","match << "," usage to_s gsub "," name ","klass arguments empty? ! ","klass arguments empty? ","klass namespace split last ","klass namespace split ","klass namespace ","namespace gsub ","klass arguments map compact join ","klass arguments map compact "," dup ","(begin\n  (send\n    (send\n      (send\n        (lvar :klass) :namespace) :split\n      (str \":\")) :last)) dup ","(begin\n  (send\n    (lvar :namespace) :gsub\n    (regexp\n      (str \"^(default)\")\n      (regopt))\n    (str \"\"))) dup ","(begin\n  (send nil :ancestor_name)) dup "," ancestor_name ","(send\n  (send nil :Array\n    (send nil :usage)) :map) join ","formatted_specific_usage strip "," required_arguments_for "," Array map "," Array ","(begin\n  (send\n    (lvar :namespace) :gsub\n    (regexp\n      (str \"^(default)\")\n      (regopt))\n    (str \"\"))) dup  strip ","(begin\n  (send nil :ancestor_name)) dup  strip ","(begin\n  (send\n    (lvar :namespace) :gsub\n    (regexp\n      (str \"^(default)\")\n      (regopt))\n    (str \"\"))) dup  << ","(begin\n  (send nil :ancestor_name)) dup  << ","klass klass namespace  split last ","klass klass namespace  split ","klass klass namespace  ","klass namespace  gsub ","(begin\n  (send\n    (send\n      (send\n        (lvar :klass) :klass namespace ) :split\n      (str \":\")) :last)) dup ","(begin\n  (send\n    (lvar :klass namespace ) :gsub\n    (regexp\n      (str \"^(default)\")\n      (regopt))\n    (str \"\"))) dup ","(begin\n  (send\n    (lvar :namespace) :gsub\n    (regexp\n      (str \"^(default)\")\n      (regopt))\n    (str \"\"))) dup _specific_usage strip ","(begin\n  (send nil :ancestor_name)) dup _specific_usage strip "]}," Thor Command run":{"type":"method","name":"run","children":[],"call":[" fail ","instance class handle_no_command_error "," name ","instance class "," handle_no_method_error? "," caller "," raise ","instance class handle_argument_error "," handle_argument_error? ","instance __send__ "," name to_sym "," local_method? ","instance method arity ","instance method "," public_method? "," private_method? ","instance method instance method arity  "]}," Thor Command hidden?":{"type":"method","name":"hidden?","children":[],"call":[]}," Thor Command initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" options= ","other options dup ","other options "]}," Thor Command initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s "]}," Thor Base ClassMethods create_command":{"type":"method","name":"create_command","children":[],"call":[]}," Thor Base ClassMethods find_and_refresh_command":{"type":"method","name":"find_and_refresh_command","children":[],"call":[" fail ","name inspect "," commands []= ","command clone ","name to_s "," commands "," all_commands [] "," all_commands "," commands [] "," raise ","  all_commands [] s []= ","  commands [] s []= "," all_commands []  clone "," commands []  clone ","  all_commands [] s ","  commands [] s "," all_ all_commands [] s [] "," all_ commands [] s [] "," all_ all_commands [] s "," all_ commands [] s ","  all_commands [] s [] ","  commands [] s [] "]}," Thor Base ClassMethods handle_no_command_error":{"type":"method","name":"handle_no_command_error","children":[],"call":[" fail ","command inspect "," namespace inspect "," namespace "," raise ","UndefinedCommandError  new "," all_commands keys "," all_commands "]}," Thor Base ClassMethods public_command":{"type":"method","name":"public_command","children":[],"call":[" class_eval ","names each "]}," Thor Base ClassMethods no_commands":{"type":"method","name":"no_commands","children":[],"call":[" no_commands_context enter "," no_commands_context "]}," Thor Base ClassMethods remove_command":{"type":"method","name":"remove_command","children":[],"call":[" undef_method ","options [] "," all_commands delete ","name to_s "," all_commands "," commands delete "," commands ","names each ","names pop ","names last is_a? ","names last ","names pop  [] "]}," Thor Base ClassMethods all_commands":{"type":"method","name":"all_commands","children":[],"call":["@all_commands merge "," commands "," from_superclass ","Bundler Thor CoreExt OrderedHash  new ","@all_commands merge! ","Thor CoreExt OrderedHash  new ","Hash  new "]}," Thor Base ClassMethods commands":{"type":"method","name":"commands","children":[],"call":["Bundler Thor CoreExt OrderedHash  new ","Thor CoreExt OrderedHash  new ","Hash  new "]}," Thor Base ClassMethods strict_args_position?":{"type":"method","name":"strict_args_position?","children":[],"call":[" strict_args_position ! ! "," strict_args_position ! "," strict_args_position "]}," Thor Base ClassMethods strict_args_position":{"type":"method","name":"strict_args_position","children":[],"call":[" from_superclass "]}," Thor Base ClassMethods strict_args_position!":{"type":"method","name":"strict_args_position!","children":[],"call":[]}," Thor Base ClassMethods stop_on_unknown_option?":{"type":"method","name":"stop_on_unknown_option?","children":[],"call":[]}," Thor Actions comment_lines":{"type":"method","name":"comment_lines","children":[],"call":[" gsub_file ","flag source ","flag respond_to? ","flag source  source ","flag source  respond_to? "]}," Thor Actions uncomment_lines":{"type":"method","name":"uncomment_lines","children":[],"call":[" gsub_file ","flag source ","flag respond_to? ","flag source  source ","flag source  respond_to? "]}," Thor Actions Directory files":{"type":"method","name":"files","children":[],"call":["Dir  glob ","Dir  [] "]}," Thor Actions Directory file_level_lookup":{"type":"method","name":"file_level_lookup","children":[],"call":["File  join "]}," Thor Actions CreateLink exists?":{"type":"method","name":"exists?","children":[],"call":["File  symlink? "," destination "]}," Persistent verify_callback=":{"type":"method","name":"verify_callback=","children":[],"call":[" reconnect_ssl "]}," Persistent verify_mode=":{"type":"method","name":"verify_mode=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_version=":{"type":"method","name":"ssl_version=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_cleanup":{"type":"method","name":"ssl_cleanup","children":[],"call":[" cleanup ","Thread  current "]}," Persistent request_setup":{"type":"method","name":"request_setup","children":[],"call":["req add_field ","req [] ","req []= ","@override_headers each ","@headers each ","Net HTTP Get  new ","req_or_uri request_uri ","req_or_uri is_a? ","URI  === ","Bundler URI  === ","req_or_uri respond_to? ","Net HTTP Get  new  add_field ","Net HTTP Get  new  [] ","Net HTTP Get  new  []= ","Net HTTP Get  new _or_uri Net HTTP Get  new uest_uri ","Net HTTP Get  new _or_uri is_a? ","Net HTTP Get  new _or_uri respond_to? "]}," Persistent request_failed":{"type":"method","name":"request_failed","children":[],"call":[" raise ","exception backtrace "," finish "," error_message ","exception class ","exception message "]}," Persistent reconnect_ssl":{"type":"method","name":"reconnect_ssl","children":[],"call":[]}," Persistent reconnect":{"type":"method","name":"reconnect","children":[],"call":[]}," Persistent proxy_bypass?":{"type":"method","name":"proxy_bypass?","children":[],"call":["host_port [] == ","host_port [] ","name length ","name length -@ ","host [] == ","host [] ","@no_proxy each ","(lvar :host) join ","host downcase ","(lvar :host) join  [] == ","host downcase _port [] == ","(lvar :host) join  [] ","host downcase _port [] ","host downcase  [] == ","host downcase  [] ","(lvar :host downcase ) join ","host downcase  downcase "]}," Persistent proxy=":{"type":"method","name":"proxy=","children":[],"call":[" reconnect_ssl "," reconnect ","x empty? ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :CGI) :parse\n            (send\n              (ivar :@proxy_uri) :query)) :[]\n          (str \"no_proxy\")) :join\n        (str \",\")) :downcase) :split\n    (str \",\")) :map) reject ","x strip ","CGI  parse [] join downcase split map ","CGI  parse [] join downcase split ","CGI  parse [] join downcase ","CGI  parse [] join ","CGI  parse [] ","CGI  parse ","@proxy_uri query ","(nil) join "," unescape ","@proxy_uri password ","@proxy_uri user ","@proxy_uri port ","@proxy_uri host ","@no_proxy clear "," raise "," proxy_from_env ","@proxy_uri hostname "]}," Persistent private_key=":{"type":"method","name":"private_key=","children":[],"call":[" reconnect_ssl "]}," Persistent pipeline":{"type":"method","name":"pipeline","children":[],"call":["connection pipeline "," connection_for ","connection http pipeline ","connection http "," connection_for  pipeline ","  connection_for _for "," connection_for  http pipeline "," connection_for  http "]}," Persistent max_age":{"type":"method","name":"max_age","children":[],"call":["Time  now - ","Time  now ","Time  now + "]}," Persistent connection_keep_alive?":{"type":"method","name":"connection_keep_alive?","children":[],"call":["header [] =~ ","header [] ","header connection_keep_alive? "]}," Persistent connection_close?":{"type":"method","name":"connection_close?","children":[],"call":["header [] =~ ","header [] ","header connection_close? "]}," Persistent can_retry?":{"type":"method","name":"can_retry?","children":[],"call":[" idempotent? "," idempotent? ! "," retry_change_requests "]}," Persistent http_class":{"type":"method","name":"http_class","children":[],"call":["@reuse_ssl_sessions ! ","Object  const_defined? ","(sym :Artifice) any? ","RUBY_VERSION  > "]}," Persistent start":{"type":"method","name":"start","children":[],"call":["socket io setsockopt ","socket io ","@socket_options each ","connection instance_variable_get ","connection start ","connection open_timeout= ","connection set_debug_output ","http instance_variable_get ","http start ","http open_timeout= ","http set_debug_output ","connection instance_variable_get  io setsockopt ","http instance_variable_get  io setsockopt ","connection instance_variable_get  io ","http instance_variable_get  io ","@connection instance_variable_get _options each ","@http instance_variable_get _options each "]}," Persistent expired?":{"type":"method","name":"expired?","children":[],"call":["Time  now - > ","Time  now - ","Time  now ","Thread  current [] [] ","connection object_id ","Thread  current [] ","Thread  current ","@idle_timeout zero? ","requests >= ","connection last_use ","connection requests >= ","connection requests ","Thread  current [] []  >= ","connection Thread  current [] []  >= ","connection Thread  current [] []  "]}," Persistent unescape":{"type":"method","name":"unescape","children":[],"call":["CGI  unescape "]}," Persistent cleanup":{"type":"method","name":"cleanup","children":[],"call":["timeouts delete ","conn object_id "," finish ","conns each_value ","thread [] delete ","thread [] ","(erange\n  (int 0)\n  (lvar :generation)) each ","thread []  delete ","thread [] delete  each_value "]}," Persistent cert_store=":{"type":"method","name":"cert_store=","children":[],"call":[" reconnect_ssl "]}," Persistent ca_file=":{"type":"method","name":"ca_file=","children":[],"call":[" reconnect_ssl "]}," Persistent certificate=":{"type":"method","name":"certificate=","children":[],"call":[" reconnect_ssl "]}," Persistent detect_idle_timeout":{"type":"method","name":"detect_idle_timeout","children":[],"call":[]}," SSLReuse connect":{"type":"method","name":"connect","children":[],"call":[" on_connect ","s session ","s post_connection_check ","@ssl_context verify_mode != ","@ssl_context verify_mode ","s connect ","s session= ","Net HTTPResponse  read_new value ","Net HTTPResponse  read_new ","@socket writeline ","credential delete! ","(dstr\n  (begin\n    (send nil :proxy_user))\n  (str \":\")\n  (begin\n    (send nil :proxy_pass))) pack "," proxy_pass "," proxy_user "," sprintf "," proxy? "," use_ssl? ","@socket debug_output= ","@socket read_timeout= ","Net BufferedIO  new ","s sync_close= ","OpenSSL SSL SSLSocket  new ","@ssl_context verify_mode= "," warn "," D ","TCPSocket  open "," conn_port "," conn_address "," timeout "," raise ","@socket close ","@socket closed? ! ","@socket closed? ","s hostname= ","s respond_to? ","@socket continue_timeout= ","@socket respond_to? ","@ssl_context set_params ","OpenSSL SSL SSLContext  new ","ssl_parameters []= "," instance_variable_get ","iv_list include? ","(str \"@\") intern ","SSL_ATTRIBUTES  each "," instance_variables ","Hash  new ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new eOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ion ","OpenSSL SSL SSLSocket  new  poOpenSSL SSL SSLSocket  new t_connection_check ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode != ","OpenSSL SSL SSLContext  new  verify_mode != ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode ","OpenSSL SSL SSLContext  new  verify_mode ","OpenSSL SSL SSLSocket  new  connect ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new eOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ion= ","Net HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new value ","Net HTTPResponse  read_new  instance_variable_get  ","Net HTTPReOpenSSL SSL SSLSocket  new ponOpenSSL SSL SSLSocket  new e  read_new ","Net BufferedIO  new  writeline ","@OpenSSL SSL SSLSocket  new ocket writeline ","(dstr\n  (begin\n    (send nil :proxy_user))\n  (str \":\")\n  (begin\n    (send nil :proxy_pass))) pack  delete! ","(dOpenSSL SSL SSLSocket  new tr\n  (begin\n    (OpenSSL SSL SSLSocket  new end nil :proxy_uOpenSSL SSL SSLSocket  new er))\n  (OpenSSL SSL SSLSocket  new tr \":\")\n  (begin\n    (OpenSSL SSL SSLSocket  new end nil :proxy_paOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new ))) pack "," proxy_paOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new  "," proxy_uOpenSSL SSL SSLSocket  new er "," OpenSSL SSL SSLSocket  new printf "," uOpenSSL SSL SSLSocket  new e_OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l? ","Net BufferedIO  new  debug_output= ","@OpenSSL SSL SSLSocket  new ocket debug_output= ","Net BufferedIO  new  read_timeout= ","@OpenSSL SSL SSLSocket  new ocket read_timeout= ","OpenSSL SSL SSLSocket  new  OpenSSL SSL SSLSocket  new ync_cloOpenSSL SSL SSLSocket  new e= ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context verify_mode= ","OpenSSL SSL SSLContext  new  verify_mode= "," conn_addreOpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new  "," raiOpenSSL SSL SSLSocket  new e ","Net BufferedIO  new  close ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new e ","Net BufferedIO  new  closed? ! ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new ed? ! ","Net BufferedIO  new  closed? ","@OpenSSL SSL SSLSocket  new ocket cloOpenSSL SSL SSLSocket  new ed? ","OpenSSL SSL SSLSocket  new  hoOpenSSL SSL SSLSocket  new tname= ","OpenSSL SSL SSLSocket  new  reOpenSSL SSL SSLSocket  new pond_to? ","Net BufferedIO  new  continue_timeout= ","@OpenSSL SSL SSLSocket  new ocket continue_timeout= ","Net BufferedIO  new  respond_to? ","@OpenSSL SSL SSLSocket  new ocket reOpenSSL SSL SSLSocket  new pond_to? ","@OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_context OpenSSL SSL SSLSocket  new et_paramOpenSSL SSL SSLSocket  new  ","OpenSSL SSL SSLContext  new  set_params ","OpenSSL SSL SSLSocket  new OpenSSL SSL SSLSocket  new l_parameterOpenSSL SSL SSLSocket  new  []= ","Hash  new  []= "," inOpenSSL SSL SSLSocket  new tance_variable_get ","iv_liOpenSSL SSL SSLSocket  new t include? "," instance_variables  include? ","(OpenSSL SSL SSLSocket  new tr \"@\") intern "," inOpenSSL SSL SSLSocket  new tance_variableOpenSSL SSL SSLSocket  new  ","HaOpenSSL SSL SSLSocket  new h  new "]}," SSLReuse initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyState pop_possibility_state":{"type":"method","name":"pop_possibility_state","children":[],"call":["PossibilityState  new "," conflicts dup "," conflicts "," depth + "," depth "," possibilities pop "," possibilities "," requirement "," activated dup "," activated "," requirements dup "," requirements "," name ","state activated tag ","state activated ","PossibilityState  new tap "," unused_unwind_options dup "," unused_unwind_options "]}," Molinillo Resolver resolve":{"type":"method","name":"resolve","children":[],"call":["Resolution  new resolve ","Resolution  new "," resolver_ui "," specification_provider "]}," Molinillo Resolver initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo Resolver Resolution push_state_for_requirements":{"type":"method","name":"push_state_for_requirements","children":[],"call":[" states push ","DependencyState  new "," conflicts dup "," conflicts "," depth "," search_for "," activated dup "," activated "," name_for "," states ","new_requirements shift "," sort_dependencies ","new_requirements uniq "," handle_missing_or_push_dependency_state "," freeze "," unused_unwind_options dup "," unused_unwind_options "," possibilities_for_requirement ","s requirement == ","s requirement "," states none? ","new_requirement nil? "," loop ","new_requirements shift s shift "," sort_dependencies  shift ","new_requirements shift s uniq "," sort_dependencies  uniq ","  search_for _for_requirement ","  possibilities_for_requirement _for_requirement ","new_requirements shift  nil? "]}," Molinillo Resolver Resolution require_nested_dependencies_for":{"type":"method","name":"require_nested_dependencies_for","children":[],"call":[" push_state_for_requirements "," requirements + "," requirements "," activated add_child_vertex "," name_for "," activated ","nested_dependencies each ","nested_dependencies map join ","nested_dependencies map "," debug "," depth "," dependencies_for ","nested_dependencies size > ","nested_dependencies size ","nested_dependencies join ","nested_dependencies empty? ! ","nested_dependencies empty? ","@parent_of []= "," requirement ","@parent_of [] "," states size - "," states size "," states ","parents << ","parents empty? ","@parents_of [] ","possibility_set latest_version "," dependencies_for  each "," dependencies_for  map join "," dependencies_for  map "," dependencies_for  size > "," dependencies_for  size "," dependencies_for  join "," dependencies_for  empty? ! "," dependencies_for  empty? ","@parents_of []  << ","@parents_of []  empty? ","@@parents_of [] _of [] "]}," Molinillo Resolver Resolution activate_spec":{"type":"method","name":"activate_spec","children":[],"call":[" require_nested_dependencies_for "," possibility ","vertex payload= "," activated vertex_named "," name "," activated ","Activated  + + + "," possibility to_s ","Activated  + + ","Activated  + "," debug "," depth "," conflicts delete "," conflicts "," activated set_payload "," activated vertex_named  payload= "," activated  activated vertex_named _named "]}," Molinillo Resolver Resolution locked_requirement_named":{"type":"method","name":"locked_requirement_named","children":[],"call":["vertex payload "," base vertex_named "," base "," base vertex_named  payload "," base  base vertex_named _named "]}," Molinillo Resolver Resolution attempt_to_activate_new_spec":{"type":"method","name":"attempt_to_activate_new_spec","children":[],"call":[" unwind_for_conflict "," create_conflict "," activate_spec "," debug "," depth "," requirement_satisfied_by? "," possibility "," activated ","locked_requirement ! "," requirement "," locked_requirement_named "," name "," new_spec_satisfied? "," locked_requirement_named  ! ","  locked_requirement_named _named "]}," Molinillo Resolver Resolution attempt_to_swap_possibility":{"type":"method","name":"attempt_to_swap_possibility","children":[],"call":[" attempt_to_activate_new_spec "," requirement_satisfied_by? "," possibility ","swapped vertex_named requirements all? ","swapped vertex_named requirements ","swapped vertex_named "," name ","swapped vertex_named payload= "," activated dup "," activated "," activate_spec "," fixup_swapped_children ","actual_vertex payload= "," activated vertex_named "," new_spec_satisfied? ","vertex requirements all? ","vertex requirements ","vertex payload= "," activated rewind_to "," new_spec_satisfied? ! ","(send\n  (send\n    (lvar :vertex) :requirements) :all?) ! "," activated set_payload "," activated tag "," activated dup  vertex_named requirements all? ","swapped swapped vertex_named _named requirements all? ","swapped  activated vertex_named _named requirements all? "," activated dup  vertex_named requirements ","swapped swapped vertex_named _named requirements ","swapped  activated vertex_named _named requirements "," activated dup  vertex_named ","swapped swapped vertex_named _named ","swapped  activated vertex_named _named "," activated dup  vertex_named payload= ","swapped swapped vertex_named _named payload= ","swapped  activated vertex_named _named payload= "," fixup_ activated dup _children "," activated vertex_named  payload= ","actual_swapped vertex_named  payload= ","actual_ activated vertex_named  payload= "," activated swapped vertex_named _named "," activated  activated vertex_named _named ","swapped vertex_named  requirements all? "," activated vertex_named  requirements all? ","swapped vertex_named  requirements "," activated vertex_named  requirements ","swapped vertex_named  payload= ","(send\n  (send\n    (lvar :swapped vertex_named ) :requirements) :all?) ! ","(send\n  (send\n    (lvar : activated vertex_named ) :requirements) :all?) ! "]}," Molinillo Resolver Resolution attempt_to_activate_existing_spec":{"type":"method","name":"attempt_to_activate_existing_spec","children":[],"call":[" unwind_for_conflict ","existing_node payload "," debug "," depth "," create_conflict "," attempt_to_swap_possibility "," push_state_for_requirements "," requirements dup "," requirements "," requirement_satisfied_by? "," activated "," requirement "]}," Molinillo Resolver Resolution attempt_to_activate":{"type":"method","name":"attempt_to_activate","children":[],"call":[" attempt_to_activate_new_spec "," attempt_to_activate_existing_spec ","existing_node payload "," debug "," depth "," activated vertex_named "," name "," activated ","Attempting to activate  + "," possibility to_s "," possibility "," activate_new_spec "," unwind_for_conflict "," create_conflict "," possibility possibilities << "," possibility possibilities "," possibility latest_version nil? "," possibility latest_version "," requirement_satisfied_by? ! "," requirement_satisfied_by? "," requirement "," possibility possibilities reject! "," attempt_to_filter_existing_spec ","existing_vertex payload "," possibility possibilities select! "," activated vertex_named  payload "," possibility  possibility latest_version _version nil? "," possibility  possibility latest_version _version "]}," Molinillo Resolver Resolution debug":{"type":"method","name":"debug","children":[],"call":[" resolver_ui debug "," resolver_ui "]}," Molinillo Resolver Resolution indicate_progress":{"type":"method","name":"indicate_progress","children":[],"call":[" resolver_ui indicate_progress "," resolver_ui ","(send\n  (ivar :@iteration_counter) :%\n  (send nil :iteration_rate)) == ","@iteration_counter % "," iteration_rate "," iteration_rate= ","Time  now - >= ","Time  now - "," started_at ","Time  now "," iteration_rate nil? "," resolver_ui progress_rate "]}," Molinillo Resolver Resolution requirement_tree_for":{"type":"method","name":"requirement_tree_for","children":[],"call":[" parent_of ","tree unshift "]}," Molinillo Resolver Resolution requirement_trees":{"type":"method","name":"requirement_trees","children":[],"call":[" requirement_tree_for "," activated vertex_named requirements map "," activated vertex_named requirements "," activated vertex_named "," name "," activated ","vertex requirements map ","vertex requirements "," activated  activated vertex_named _named requirements map "," activated  activated vertex_named _named requirements "," activated  activated vertex_named _named "," activated vertex_named  requirements map "," activated vertex_named  requirements "]}," Molinillo Resolver Resolution create_conflict":{"type":"method","name":"create_conflict","children":[],"call":[" conflicts []= ","Conflict  new "," requirement_trees "," locked_requirement_named "," name "," possibility ","vertex payload ","Hash  [] ","r empty? ! ","r empty? ","requirements select "," requirement "," conflicts ","(or-asgn\n  (send\n    (lvar :requirements) :[]\n    (send\n      (send\n        (lvar :edge) :origin) :payload))\n  (array)) unshift ","edge requirements ","requirements [] ","edge origin payload ","edge origin ","vertex incoming_edges each ","vertex incoming_edges "," Array "," name_for_locking_dependency_source ","vertex explicit_requirements "," name_for_explicit_dependency_source "," activated vertex_named "," activated ","(send\n  (send nil :activated) :map) select ","v payload ","v name "," activated map ","edge requirement ","activated_by_name []= "," activated each ","requirements []= ","vertex explicit_requirements empty? ","vertex payload latest_version ","v payload latest_version ","(or-asgn\n  (send\n    (lvar :requirements) :[]\n    (send\n      (send\n        (send\n          (lvar :edge) :origin) :payload) :latest_version))\n  (array)) unshift ","edge origin payload latest_version ","  locked_requirement_named _named "," activated vertex_named  payload "," activated vertex_named  incoming_edges each "," activated vertex_named  incoming_edges "," activated vertex_named  explicit_requirements "," activated  activated vertex_named _named "," activated vertex_named  explicit_requirements empty? "," activated vertex_named  payload latest_version "]}," Molinillo Resolver Resolution state_any?":{"type":"method","name":"state_any?","children":[],"call":["state possibilities any? ","state possibilities "]}," Molinillo Resolver Resolution find_state_for":{"type":"method","name":"find_state_for","children":[],"call":["i is_a? ","requirement == ","i requirement "," states reverse_each find "," states reverse_each "," states "," states find "]}," Molinillo Resolver Resolution requirement_for_existing_name":{"type":"method","name":"requirement_for_existing_name","children":[],"call":["(send\n  (send\n    (send nil :states) :reverse_each) :find) requirement ","s activated vertex_named payload ! ","s activated vertex_named payload ","s activated vertex_named ","s activated "," states reverse_each find "," states reverse_each "," states "," activated vertex_named payload "," activated vertex_named "," activated ","(send\n  (send nil :states) :find) requirement ","s name == ","s name "," states find ","vertex payload ","s activated  activated vertex_named _named payload ! ","s activated  activated vertex_named _named payload ","s activated  activated vertex_named _named "," activated  activated vertex_named _named payload "," activated  activated vertex_named _named "," activated vertex_named  payload "]}," Molinillo Resolver Resolution parent_of":{"type":"method","name":"parent_of","children":[],"call":["state requirement ","s requirements include? ! ","s requirements include? ","s requirements ","s requirement != ","s requirement ","s requirement == "," states reverse_each find "," states reverse_each "," states ","@parent_of [] ","parent_state requirement ","@states [] ","@parents_of [] last ","@parents_of [] ","@states []  requirement "]}," Molinillo Resolver Resolution state_index_for_unwind":{"type":"method","name":"state_index_for_unwind","children":[],"call":[" parent_of "," states index "," states "," state_any? "," find_state_for ","existing_requirement nil? ","current_requirement nil? "," requirement_for_existing_name "," name "," requirement ","current_index > ","r nil? ","(lvar :current_requirement) each "," pa parent_of ent_of "," find_state_fo parent_of  "," parent_of  nil? "," requirement_for_existing_name  nil? ","existing_ parent_of equi parent_of ement nil? "," requirement  nil? ","cu parent_of  parent_of ent_ parent_of equi parent_of ement nil? ","  parent_of equi parent_of ement_fo parent_of _existing_name ","  parent_of equi parent_of ement ","cu parent_of  parent_of ent_index > "," states index  > ","(lvar : parent_of ) each ","(lvar : requirement ) each ","(lva parent_of  :cu parent_of  parent_of ent_ parent_of equi parent_of ement) each "]}," Molinillo Resolver Resolution unwind_for_conflict":{"type":"method","name":"unwind_for_conflict","children":[],"call":[" state conflicts= "," state "," raise ","VersionConflict  new "," states slice! "," state_index_for_unwind + "," state_index_for_unwind "," states "," conflicts tap "," conflicts "," requirement "," debug "," depth "," activated rewind_to ","sliced_states first "," activated ","i >= ","@parent_of reject! "," states size - "," states size ","a reject! ","@parents_of each "," state_index_for_unwind / ","uw state_index >= ","uw state_index "," state unused_unwind_options reject! "," state unused_unwind_options "," filter_possibilities_after_unwind "," state unused_unwind_options= "," raise_error_unless_state ","details_for_unwind state_index + ","details_for_unwind state_index ","details_for_unwind state_index / "," unused_unwind_options "," build_details_for_unwind "," state_ states size - _for_unwind + "," state_ states size - _for_unwind "," states slice!  first "," state_ states size - _for_unwind / ","uw state_ states size -  >= ","uw state_ states size -  "," state unused_ unused_unwind_options  reject! "," state unused_ unused_unwind_options  "," state unused_ unused_unwind_options = ","details_for_unwind state_ states size -  + "," build_details_for_unwind  state_index + ","details_for_unwind state_ states size -  "," build_details_for_unwind  state_index ","details_for_unwind state_ states size -  / "," build_details_for_unwind  state_index / "," unused_ unused_unwind_options  "," build_ build_details_for_unwind  "]}," Molinillo Resolver Resolution initial_state":{"type":"method","name":"initial_state","children":[],"call":["DependencyState  new "," search_for "," name_for ","requirements shift "," sort_dependencies "," original_requested ","v explicit_requirements << ","v explicit_requirements ","dg add_root_vertex tap ","dg add_root_vertex "," original_requested each ","DependencyGraph  new tap ","DependencyGraph  new ","dg add_vertex tap ","dg add_vertex ","dg tag "," possibilities_for_requirement ","vertex explicit_requirements << ","vertex explicit_requirements "," sort_dependencies  shift ","v explicit_ sort_dependencies  << ","v explicit_ sort_dependencies  ","dg add_root_dg add_vertex  tap ","dg add_root_dg add_vertex  ","dg add_dg add_vertex  tap ","dg add_dg add_vertex  ","vertex explicit_ sort_dependencies  << ","dg add_vertex  explicit_requirements << ","vertex explicit_ sort_dependencies  ","dg add_vertex  explicit_requirements "]}," Molinillo Resolver Resolution state":{"type":"method","name":"state","children":[],"call":[" states last "," states "]}," Molinillo Resolver Resolution possibility":{"type":"method","name":"possibility","children":[],"call":[" possibilities last "," possibilities "]}," Molinillo Resolver Resolution process_topmost_state":{"type":"method","name":"process_topmost_state","children":[],"call":[" unwind_for_conflict "," state is_a? "," state "," possibility "," create_conflict "," attempt_to_activate "]}," Molinillo Resolver Resolution end_resolution":{"type":"method","name":"end_resolution","children":[],"call":["Activated:  + ","Hash  [] keys join ","Hash  [] keys ","Hash  [] ","v payload "," activated vertices select "," activated vertices "," activated "," debug "," state ","Unactivated:  + "," activated vertices reject ","(lvasgn :ended_at\n  (send\n    (const nil :Time) :now)) - ","Time  now "," resolver_ui after_resolution "," resolver_ui ","(lvasgn :Time  now \n  (send\n    (const nil :Time) :now)) - "]}," Molinillo Resolver Resolution start_resolution":{"type":"method","name":"start_resolution","children":[],"call":[" resolver_ui before_resolution "," resolver_ui "," debug "," states push "," initial_state "," states ","Time  now "," handle_missing_or_push_dependency_state "," original_requested "," push_initial_state "]}," Molinillo Resolver Resolution resolve":{"type":"method","name":"resolve","children":[],"call":[" end_resolution "," activated freeze "," activated "," process_topmost_state "," states push "," states "," state pop_possibility_state tap "," state pop_possibility_state "," state "," possibilities count "," possibilities "," requirement "," debug "," depth "," state respond_to? "," indicate_progress "," state requirement "," state requirements any? "," state requirements "," start_resolution "," activated tag "," resolve_activated_specs "," state requirements empty? "," state requirement ! "]}," Molinillo Resolver Resolution initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," Molinillo UI debug?":{"type":"method","name":"debug?","children":[],"call":["ENV  [] "]}," Molinillo UI debug":{"type":"method","name":"debug","children":[],"call":[" output puts ","   * + ","   * ","debug_info split map ","debug_info split "," output ","debug_info inspect ","debug_info is_a? "," debug? ","  * + ","  * ","depth to_s rjust ","depth to_s ","debug_info inspect  split map ","debug_info inspect  split ","debug_info inspect  inspect ","debug_info inspect  is_a? "]}," Molinillo UI after_resolution":{"type":"method","name":"after_resolution","children":[],"call":[" output puts "," output "]}," Molinillo UI before_resolution":{"type":"method","name":"before_resolution","children":[],"call":[" output print "," output "]}," Molinillo UI progress_rate":{"type":"method","name":"progress_rate","children":[],"call":[]}," Molinillo UI indicate_progress":{"type":"method","name":"indicate_progress","children":[],"call":[" output print "," output "," debug? "]}," Molinillo UI output":{"type":"method","name":"output","children":[],"call":[]}," Molinillo SpecificationProvider sort_dependencies":{"type":"method","name":"sort_dependencies","children":[],"call":["conflicts [] ","activated vertex_named payload ","activated vertex_named "," name_for ","dependencies sort_by ","activated vertex_ name_for d payload ","activated vertex_ name_for d ","  name_for _for "]}," Molinillo SpecificationProvider name_for_locking_dependency_source":{"type":"method","name":"name_for_locking_dependency_source","children":[],"call":[]}," Molinillo SpecificationProvider name_for_explicit_dependency_source":{"type":"method","name":"name_for_explicit_dependency_source","children":[],"call":[]}," Molinillo SpecificationProvider name_for":{"type":"method","name":"name_for","children":[],"call":["dependency to_s "]}," Molinillo SpecificationProvider requirement_satisfied_by?":{"type":"method","name":"requirement_satisfied_by?","children":[],"call":[]}," Molinillo SpecificationProvider dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":[]}," Molinillo SpecificationProvider search_for":{"type":"method","name":"search_for","children":[],"call":[]}," Molinillo VersionConflict initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :pairs) :map) join ","pairs map ","pairs << ","conflict_requirements each ","conflicting each ","conflicts values flatten map flatten each ","conflicts values flatten map flatten ","conflicts values flatten map ","conflicts values flatten ","conflicts values ","Compatibility  flat_map each ","Compatibility  flat_map ","conflicts values flat_map each ","conflicts values flat_map "]}," Molinillo CircularDependencyError initialize":{"type":"method","name":"initialize","children":[],"call":["nodes map to_set ","nodes map ","nodes map join ","(send\n  (lvar :vertices) :map) to_set ","vertex payload possibilities last ","vertex payload possibilities ","vertex payload ","vertices map ","vertices map join "]}," Molinillo NoSuchDependencyError message":{"type":"method","name":"message","children":[],"call":["message << ","sources empty? "," dependency ","(send\n  (send nil :required_by) :map) join "," required_by map "," required_by ","(send\n  (send nil :required_by) :map) join  empty? "]}," Molinillo NoSuchDependencyError initialize":{"type":"method","name":"initialize","children":[],"call":["required_by uniq "]}," Molinillo DependencyGraph Vertex ancestor?":{"type":"method","name":"ancestor?","children":[],"call":["v ancestor? "," predecessors any? "," predecessors "," predecessors include? ","other path_to? "]}," Molinillo DependencyGraph Vertex path_to?":{"type":"method","name":"path_to?","children":[],"call":["v path_to? "," successors any? "," successors "," successors include? "," equal? "," _path_to? "]}," Molinillo DependencyGraph Vertex hash":{"type":"method","name":"hash","children":[],"call":[" name hash "," name "]}," Molinillo DependencyGraph Vertex shallow_eql?":{"type":"method","name":"shallow_eql?","children":[],"call":[" payload == ","other payload "," payload "," name == ","other name "," name "," equal? "]}," Molinillo DependencyGraph Vertex ==":{"type":"method","name":"==","children":[],"call":[" successors == ","other successors "," successors "," shallow_eql? "," successors to_set == ","other successors to_set "," successors to_set "," equal? "]}," Molinillo DependencyGraph Vertex inspect":{"type":"method","name":"inspect","children":[],"call":[" payload inspect "," payload "," name "," class "]}," Molinillo DependencyGraph Vertex recursive_successors":{"type":"method","name":"recursive_successors","children":[],"call":[" successors + "," successors map reduce ","Set  new "," successors map "," successors ","vertices uniq! ","vertices map flatten ","vertices map ","Compatibility  flat_map "," _recursive_successors "," successors  uniq! "," successors  map flatten "," successors  map "]}," Molinillo DependencyGraph Vertex successors":{"type":"method","name":"successors","children":[],"call":[" outgoing_edges map to_set "," outgoing_edges map "," outgoing_edges "]}," Molinillo DependencyGraph Vertex predecessors":{"type":"method","name":"predecessors","children":[],"call":[" incoming_edges map to_set "," incoming_edges map "," incoming_edges "]}," Molinillo DependencyGraph Vertex incoming_edges":{"type":"method","name":"incoming_edges","children":[],"call":["e destination shallow_eql? ","e destination "," graph edges select "," graph edges "," graph "]}," Molinillo DependencyGraph Vertex outgoing_edges":{"type":"method","name":"outgoing_edges","children":[],"call":["e origin shallow_eql? ","e origin "," graph edges select "," graph edges "," graph "]}," Molinillo DependencyGraph Vertex requirements":{"type":"method","name":"requirements","children":[],"call":[" incoming_edges map flatten + "," explicit_requirements "," incoming_edges map flatten "," incoming_edges map "," incoming_edges "," incoming_edges map + ","(send\n  (send\n    (send nil :incoming_edges) :map\n    (block-pass\n      (sym :requirement))) :+\n  (send nil :explicit_requirements)) uniq "]}," Molinillo DependencyGraph Vertex initialize":{"type":"method","name":"initialize","children":[],"call":["name dup freeze ","name dup ","name frozen? "]}," Molinillo DependencyGraph add_edge":{"type":"method","name":"add_edge","children":[],"call":[" edges << "," edges ","Edge  new tap ","Edge  new "," raise ","CircularDependencyError  new ","destination path_to? ","origin == "," add_edge_no_circular "," path "]}," Molinillo DependencyGraph root_vertex_named":{"type":"method","name":"root_vertex_named","children":[],"call":[" root_vertices [] "," root_vertices ","vertex root? "," vertex_named "," vertex_named  root? ","  vertex_named _named "]}," Molinillo DependencyGraph vertex_named":{"type":"method","name":"vertex_named","children":[],"call":[" vertices [] "," vertices "]}," Molinillo DependencyGraph detach_vertex_named":{"type":"method","name":"detach_vertex_named","children":[],"call":[" detach_vertex_named ","v name ","v predecessors any? ","v predecessors "," root_vertices [] "," root_vertices ","successors each ","e destination == ","e destination ","e origin == ","e origin "," edges reject! "," edges "," vertices delete "," vertices ","vertex successors "," vertex_named ","v root? ","v incoming_edges delete ","v incoming_edges ","vertex outgoing_edges each ","vertex outgoing_edges ","v outgoing_edges delete ","v outgoing_edges ","vertex incoming_edges each ","vertex incoming_edges "," log detach_vertex_named "," log "," detach_ vertex_named _named "," detach_ vertices delete _named "," detach_e destination ertex_named "," detach_e origin ertex_named ","e destination  name ","e origin  name ","e destination  predecessors any? ","e origin  predecessors any? ","e destination  predecessors ","e origin  predecessors "," root_e destination ertices [] "," root_e origin ertices [] "," root_e destination ertices "," root_e origin ertices ","vertex successors  each "," e destination ertices delete "," e origin ertices delete "," e destination ertices "," e origin ertices ","vertex vertex successors  "," vertex_named  successors "," vertices delete  successors ","e destination ertex successors ","e origin ertex successors ","  vertex_named _named ","  vertices delete _named "," e destination ertex_named "," e origin ertex_named ","e destination  root? ","e origin  root? ","e destination  incoming_edges delete ","e origin  incoming_edges delete ","e destination  incoming_edges ","e origin  incoming_edges "," vertex_named  outgoing_edges each "," vertices delete  outgoing_edges each ","e destination ertex outgoing_edges each ","e origin ertex outgoing_edges each "," vertex_named  outgoing_edges "," vertices delete  outgoing_edges ","e destination ertex outgoing_edges ","e origin ertex outgoing_edges ","e destination  outgoing_edges delete ","e origin  outgoing_edges delete ","e destination  outgoing_edges ","e origin  outgoing_edges "," vertex_named  incoming_edges each "," vertices delete  incoming_edges each ","e destination ertex incoming_edges each ","e origin ertex incoming_edges each "," vertex_named  incoming_edges "," vertices delete  incoming_edges ","e destination ertex incoming_edges ","e origin ertex incoming_edges "," log detach_ vertex_named _named "," log detach_ vertices delete _named "," log detach_e destination ertex_named "," log detach_e origin ertex_named "]}," Molinillo DependencyGraph add_root_vertex":{"type":"method","name":"add_root_vertex","children":[],"call":[" root_vertices []= "," root_vertices "," add_vertex tap "," add_vertex "]}," Molinillo DependencyGraph add_vertex":{"type":"method","name":"add_vertex","children":[],"call":["v payload= ","vertex tap ","Vertex  new "," vertices [] "," vertices ","vertex root ","vertex payload "," log add_vertex "," log "]}," Molinillo DependencyGraph add_child_vertex":{"type":"method","name":"add_child_vertex","children":[],"call":[" add_edge ","parent_nodes each ","vertex payload "," add_vertex "," add_root_vertex "," vertex_named ","parent_names compact map ","parent_names compact ","parent_names include? ","vertex root= ","parent_names each ","(send\n  (lvar :parent_names) :delete\n  (nil)) ! ","parent_names delete ","vertex explicit_requirements << ","vertex explicit_requirements "," vertex_named s each "," add_vertex  payload "," add_ add_vertex  "," add_root_ add_vertex  "," add_(send\n  (lvar :parent_names) :delete\n  (nil)) ! _vertex ","  add_vertex _named "," add_vertex  root= ","vertex (send\n  (lvar :parent_names) :delete\n  (nil)) ! = "," add_vertex  explicit_requirements << "," add_vertex  explicit_requirements "]}," Molinillo DependencyGraph ==":{"type":"method","name":"==","children":[],"call":[" root_vertices == ","other root_vertices "," root_vertices ","other_vertex successors map to_set == ","vertex successors map to_set ","vertex successors map ","vertex successors ","other_vertex successors map to_set ","other_vertex successors map ","other_vertex successors ","other vertex_named "," vertices each "," vertices "," equal? ","other_vertex successors to_set == ","vertex successors to_set ","other_vertex successors to_set ","vertex payload == ","other_vertex payload ","vertex payload ","other vertex_named  successors map to_set == ","other vertex_named  successors map to_set ","other vertex_named  successors map ","other vertex_named  successors ","other vertex_named  successors to_set == ","other vertex_named  successors to_set ","other vertex_named  payload "]}," Molinillo DependencyGraph inspect":{"type":"method","name":"inspect","children":[],"call":[" vertices values inspect "," vertices values "," vertices "," class "]}," Molinillo DependencyGraph initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["Edge  new ","edge requirements dup ","edge requirements "," vertex_named ","edge destination name ","edge destination ","edge origin name ","edge origin ","other edges map ","other edges ","Hash  [] ","other root_vertices [] ","other root_vertices ","@vertices select ","hash []= ","v graph= ","vertex dup tap ","vertex dup ","vertices tap ","other vertices reduce ","other vertices ","traverse call ","new_vertex explicit_requirements replace ","vertex explicit_requirements ","new_vertex explicit_requirements "," add_vertex ","vertex root? ","vertex payload ","other vertices each "," add_edge_no_circular ","edge requirement ","edge destination payload ","old_v outgoing_edges each ","old_v outgoing_edges ","new_v outgoing_edges size == ","old_v outgoing_edges size ","new_v outgoing_edges size ","new_v outgoing_edges "," lambda ","other log dup ","other log "," vertices select "," vertices ","edge  add_vertex  name ","edge  add_vertex  "," add_vertex  explicit_requirements replace "," add_vertex  explicit_requirements ","edge  add_vertex  payload "]}," Molinillo DependencyGraph initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","Log  new "]}," Molinillo DependencyGraph tsort":{"type":"method","name":"tsort","children":[],"call":[]}," Molinillo DependencyGraph tsort_each_child":{"type":"method","name":"tsort_each_child","children":[],"call":["vertex successors each ","vertex successors "]}," Molinillo DependencyGraph each":{"type":"method","name":"each","children":[],"call":[" vertices values each "," vertices values "," vertices "," block_given? "]}," Bundler UI Silent silence":{"type":"method","name":"silence","children":[],"call":[]}," Bundler UI Silent trace":{"type":"method","name":"trace","children":[],"call":[]}," Bundler UI Silent level":{"type":"method","name":"level","children":[],"call":[]}," Bundler UI Silent level=":{"type":"method","name":"level=","children":[],"call":[]}," Bundler UI Silent ask":{"type":"method","name":"ask","children":[],"call":[]}," Bundler UI Silent quiet?":{"type":"method","name":"quiet?","children":[],"call":[]}," Bundler UI Silent debug?":{"type":"method","name":"debug?","children":[],"call":[]}," Bundler UI Silent debug":{"type":"method","name":"debug","children":[],"call":[]}," Bundler UI Silent error":{"type":"method","name":"error","children":[],"call":[]}," Bundler UI Silent warn":{"type":"method","name":"warn","children":[],"call":[]}," Bundler UI Silent confirm":{"type":"method","name":"confirm","children":[],"call":[]}," Bundler UI Silent info":{"type":"method","name":"info","children":[],"call":[]}," Bundler UI Shell word_wrap":{"type":"method","name":"word_wrap","children":[],"call":["(send\n  (send\n    (send nil :strip_leading_spaces\n      (lvar :text)) :split\n    (str \"\\n\")) :collect) * ","line gsub strip ","line gsub ","line length > ","line length "," strip_leading_spaces split collect "," strip_leading_spaces split "," strip_leading_spaces ","(send\n  (send\n    (lvar :text) :split\n    (str \"\\n\")) :collect) * ","text split collect ","text split "]}," Bundler UI Shell strip_leading_spaces":{"type":"method","name":"strip_leading_spaces","children":[],"call":["text gsub ","text [] "]}," Bundler UI Shell silence":{"type":"method","name":"silence","children":[],"call":[" with_level "]}," Bundler UI Shell trace":{"type":"method","name":"trace","children":[],"call":[" tell_me ","e backtrace join ","e backtrace ","e message ","e class "," debug? ","STDERR  puts ","(dstr\n  (begin\n    (send\n      (lvar :e) :class))\n  (str \": \")\n  (begin\n    (send\n      (lvar :e) :message))) join "," tell_err "]}," Bundler UI Shell level":{"type":"method","name":"level","children":[],"call":["LEVELS  index <= ","LEVELS  index ","index <= "," raise ","name inspect ","LEVELS  LEVELS  index  <= ","LEVELS  LEVELS  index  ","LEVELS  index  <= "]}," Bundler UI Shell level=":{"type":"method","name":"level=","children":[],"call":[" raise ","LEVELS  include? ","level to_s "]}," Bundler UI Shell no?":{"type":"method","name":"no?","children":[],"call":["@shell no? "," msg "]}," Bundler UI Shell yes?":{"type":"method","name":"yes?","children":[],"call":["@shell yes? "]}," Bundler UI Shell ask":{"type":"method","name":"ask","children":[],"call":["@shell ask "]}," Bundler UI Shell quiet?":{"type":"method","name":"quiet?","children":[],"call":["LEVELS  index <= ","LEVELS  index "," level "]}," Bundler SSLCerts CertificateManager store":{"type":"method","name":"store","children":[],"call":["store add_file "," bundler_certs each "," bundler_certs ","OpenSSL X509 Store  new ","OpenSSL X509 Store  new  add_file "]}," Bundler SSLCerts CertificateManager certificates_in":{"type":"method","name":"certificates_in","children":[],"call":["Dir  [] sort ","Dir  [] ","File  join "]}," Bundler SSLCerts CertificateManager connect_to":{"type":"method","name":"connect_to","children":[],"call":["http head ","http cert_store= "," store ","http verify_mode= ","http use_ssl= ","Net HTTP  new ","Net HTTP  new  head ","Net HTTP  new  cert_store= ","Net HTTP  new  verify_mode= ","Net HTTP  new  use_ssl= "]}," Bundler SSLCerts CertificateManager update!":{"type":"method","name":"update!","children":[],"call":["FileUtils  cp "," bundler_cert_path "," rubygems_certs ","FileUtils  rm "," bundler_certs "," up_to_date? "]}," Bundler SSLCerts CertificateManager up_to_date?":{"type":"method","name":"up_to_date?","children":[],"call":["FileUtils  compare_file ","File  basename == ","File  basename "," bundler_certs find "," bundler_certs "," rubygems_certs all? "," rubygems_certs "," bundler_certs zip all? "," bundler_certs zip "]}," Bundler SSLCerts CertificateManager initialize":{"type":"method","name":"initialize","children":[],"call":[" certificates_in "," bundler_cert_path ","File  expand_path ","File  join "]}," Bundler SSLCerts CertificateManager update_from!":{"type":"method","name":"update_from!","children":[],"call":[]}," Bundler SpecSet extract_circular_gems":{"type":"method","name":"extract_circular_gems","children":[],"call":["error message scan flatten ","error message scan ","error message ","Bundler  current_ruby on_19? ","Bundler  current_ruby ","Bundler  current_ruby mri? "]}," Bundler SourceList combine_rubygems_sources":{"type":"method","name":"combine_rubygems_sources","children":[],"call":["Source Rubygems  new "," rubygems_remotes "," rubygems_sources map flatten uniq reverse "," rubygems_sources map flatten uniq "," rubygems_sources map flatten "," rubygems_sources map "," rubygems_sources ","aggregate_source allow_multisource! "," disable_multisource? ","Source Rubygems  new  allow_multisource! "]}," Bundler SourceList source_list_for":{"type":"method","name":"source_list_for","children":[],"call":[" raise ","source inspect "," rubygems_sources "," path_sources "," git_sources "," plugin_sources "]}," Bundler SourceList add_source_to_list":{"type":"method","name":"add_source_to_list","children":[],"call":["list unshift uniq! ","list unshift "]}," Bundler SourceList rubygems_primary_remotes":{"type":"method","name":"rubygems_primary_remotes","children":[],"call":["@rubygems_aggregate remotes "]}," Bundler SourceList remote!":{"type":"method","name":"remote!","children":[],"call":[" all_sources each "," all_sources "]}," Bundler SourceList cached!":{"type":"method","name":"cached!","children":[],"call":[" all_sources each "," all_sources "]}," Bundler SourceList replace_sources!":{"type":"method","name":"replace_sources!","children":[],"call":[" rubygems_remotes to_set != ","replacement_rubygems remotes to_set ","replacement_rubygems remotes "," rubygems_remotes to_set "," rubygems_remotes "," lock_sources to_set != ","replacement_sources to_set "," lock_sources to_set "," lock_sources ","s is_a? ","replacement_sources detect ","s == ","replacement_sources find ","source_list map! ","(send nil :path_sources) each "," git_sources "," path_sources ","replacement_sources empty? "," plugin_sources "," equivalent_sources? ! "," equivalent_sources? "," equal_sources? ! "," equal_sources? ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ! ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag "," rubygems_sources "," all_sources to_set != "," all_sources to_set "," all_sources ","Bundler  feature_flag disable_multisource? ! ","Bundler  feature_flag disable_multisource? "," rubygems_remotes sort_by != ","replacement_rubygems remotes sort_by "," rubygems_remotes sort_by "," disable_multisource? ! "," disable_multisource? "," merged_gem_lockfile_sections? "," different_sources? "," map_sources "," global_replacement_source "]}," Bundler SourceList lock_sources":{"type":"method","name":"lock_sources","children":[],"call":["lock_sources << "," combine_rubygems_sources ","(send\n  (send nil :path_sources) :+\n  (send nil :git_sources)) sort_by "," path_sources + "," git_sources "," path_sources ","(send\n  (send\n    (send nil :path_sources) :+\n    (send nil :git_sources)) :+\n  (send nil :plugin_sources)) sort_by "," path_sources + + "," plugin_sources ","(send\n  (array\n    (array\n      (send nil :default_source))\n    (ivar :@rubygems_sources)\n    (send nil :git_sources)\n    (send nil :path_sources)\n    (send nil :plugin_sources)) :map) flatten ","sources sort_by ","(array\n  (send nil :default_source)) map "," default_source ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","(send\n  (send nil :path_sources) :+\n  (send nil :git_sources)) << ","lock_sources + "," rubygems_sources sort_by "," rubygems_sources ","Bundler  feature_flag disable_multisource? "," disable_multisource? "," rubygems_sources sort_by uniq "," lock_other_sources + "," lock_rubygems_sources "," lock_other_sources ","(send\n  (send nil :path_sources) :+\n  (send nil :git_sources)) sort_by  << ","(send\n  (send\n    (send nil :path_sources) :+\n    (send nil :git_sources)) :+\n  (send nil :plugin_sources)) sort_by  << ","(send\n  (send nil :path_sources) :+\n  (send nil :git_sources)) sort_by  + ","(send\n  (send\n    (send nil :path_sources) :+\n    (send nil :git_sources)) :+\n  (send nil :plugin_sources)) sort_by  + "]}," Bundler SourceList get":{"type":"method","name":"get","children":[],"call":["source == "," source_list_for find "," source_list_for "," equivalent_source? "," equal_source? "]}," Bundler SourceList all_sources":{"type":"method","name":"all_sources","children":[],"call":[" path_sources + + "," rubygems_sources "," path_sources + "," git_sources "," path_sources "," path_sources + + + "," plugin_sources "," path_sources + + + + "," metadata_source "]}," Bundler SourceList rubygems_remotes":{"type":"method","name":"rubygems_remotes","children":[],"call":[" rubygems_sources map flatten uniq "," rubygems_sources map flatten "," rubygems_sources map "," rubygems_sources "]}," Bundler SourceList rubygems_sources":{"type":"method","name":"rubygems_sources","children":[],"call":["@rubygems_sources + "," default_source "," global_rubygems_source "," non_global_rubygems_sources + "," non_global_rubygems_sources "]}," Bundler SourceList add_rubygems_remote":{"type":"method","name":"add_rubygems_remote","children":[],"call":["@rubygems_aggregate add_remote "," raise ","Bundler  feature_flag disable_multisource? ","Bundler  feature_flag ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? "," global_rubygems_source "," global_rubygems_source add_remote "]}," Bundler SourceList add_rubygems_source":{"type":"method","name":"add_rubygems_source","children":[],"call":[" add_source_to_list ","Source Rubygems  new ","@global_rubygems_source == "]}," Bundler SourceList add_git_source":{"type":"method","name":"add_git_source","children":[],"call":[" add_source_to_list "," git_sources ","Source Git  new "," warn_on_git_protocol "," add_source_to_list tap "]}," Bundler SourceList add_path_source":{"type":"method","name":"add_path_source","children":[],"call":[" add_source_to_list "," path_sources ","Source Path  new ","Source Gemspec  new ","options [] ","  add_source_to_list s "]}," Bundler SourceList initialize":{"type":"method","name":"initialize","children":[],"call":["Source Rubygems  new ","Source Metadata  new "," rubygems_aggregate_class new "," rubygems_aggregate_class ","Source LocalRubygems  new "]}," Bundler Source include?":{"type":"method","name":"include?","children":[],"call":["other == "]}," Bundler Source can_lock?":{"type":"method","name":"can_lock?","children":[],"call":["spec source == ","spec source "]}," Bundler Source version_message":{"type":"method","name":"version_message","children":[],"call":["message << ","spec version != ","spec version ","locked_spec version ","s name == ","spec name ","s name ","Bundler  locked_gems specs find ","Bundler  locked_gems specs ","Bundler  locked_gems ","Bundler  ui add_color ","Bundler  ui ","spec platform ","spec platform nil? ! ","spec platform nil? ","spec platform != "," version_color "]}," Bundler Source unmet_deps":{"type":"method","name":"unmet_deps","children":[],"call":[" specs unmet_dependency_names "," specs "]}," Bundler Source Rubygems builtin_gem?":{"type":"method","name":"builtin_gem?","children":[],"call":["spec loaded_from include? ","spec loaded_from ","spec summary =~ ","spec summary "]}," Bundler Source Rubygems fetch_gem":{"type":"method","name":"fetch_gem","children":[],"call":["Bundler  rm_rf ","Bundler  requires_sudo? ","Bundler  sudo ","spec full_name ","Bundler  mkdir_p ","Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  rubygems download_gem ","FileUtils  mkdir_p ","Bundler  tmp ","spec fetch_platform ","spec remote uri ","spec remote ","SharedHelpers  filesystem_access "," requires_sudo? "," rubygems_dir ","Bundler  ui confirm "," version_message ","Bundler  ui "," download_gem ","Fetcher  download_gem_from_uri ","spec source_uri ","spec source_uri original_uri ","spec file_name "," default_cache_path_for "," download_cache_path "," package_path ","File  exist? ","spec remote spec remote uri  ","Fetcher  download_gem_from_spec remote uri  ","spec source_spec remote uri  ","spec source_spec remote uri  original_spec remote uri  ","  default_cache_path_for  "]}," Bundler Source Rubygems api_fetchers":{"type":"method","name":"api_fetchers","children":[],"call":[" fetchers select "," fetchers ","f fetchers first api_fetcher? ","f fetchers first ","f fetchers ","f use_api "]}," Bundler Source Rubygems suppress_configured_credentials":{"type":"method","name":"suppress_configured_credentials","children":[],"call":["remote userinfo == ","Bundler  settings [] ","Bundler  settings ","remote userinfo ","(send\n  (send\n    (lvar :remote) :dup) :tap) to_s ","uri user= ","uri password= ","remote dup tap ","remote dup "," remove_auth ","(send\n  (lvar :remote) :tap) to_s ","remote tap "]}," Bundler Source Rubygems cached_path":{"type":"method","name":"cached_path","children":[],"call":["File  exist? ","possibilities find ","spec file_name ","@caches map ","@caches << "," download_cache_path "," package_path "," caches map "," caches "," caches << "]}," Bundler Source Rubygems loaded_from":{"type":"method","name":"loaded_from","children":[],"call":["spec full_name ","Bundler  rubygems gem_dir ","Bundler  rubygems "," rubygems_dir "]}," Bundler Source Rubygems remotes_for_spec":{"type":"method","name":"remotes_for_spec","children":[],"call":["uris << ","s remote "," specs search_all inject "," specs search_all ","spec name "," specs "]}," Bundler Source Rubygems credless_remotes":{"type":"method","name":"credless_remotes","children":[],"call":[" remotes map "," method "," remotes ","Bundler  settings [] ","Bundler  settings "]}," Bundler Source Rubygems fetchers":{"type":"method","name":"fetchers","children":[],"call":["Bundler Fetcher  new ","Source Rubygems Remote  new "," remotes map "," remotes "," Source Rubygems Remote  new s map "," Source Rubygems Remote  new s "]}," Bundler Source Rubygems unmet_deps":{"type":"method","name":"unmet_deps","children":[],"call":[" remote_specs unmet_dependency_names "," remote_specs "," api_fetchers any? "," api_fetchers ","f use_api "," fetchers all? "," fetchers "," fetchers any? "," dependency_api_available? "]}," Bundler Source Rubygems cached_built_in_gem":{"type":"method","name":"cached_built_in_gem","children":[],"call":[" fetch_gem "," remote_specs search first "," remote_specs search "," remote_specs ","cached_path nil? "," cached_path ","Bundler  ui warn ","spec full_name ","Bundler  ui ","  remote_specs search first s search first ","  remote_specs search first s search ","  remote_specs search first s "," fetch_gem  nil? "," cached_path  nil? ","  fetch_gem  ","  cached_path  "]}," Bundler Source Rubygems can_lock?":{"type":"method","name":"can_lock?","children":[],"call":["spec source is_a? ","spec source ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Bundler  feature_flag disable_multisource? "," disable_multisource? "," multiple_remotes? "," include? "]}," Bundler Source Rubygems include?":{"type":"method","name":"include?","children":[],"call":["(send\n  (send\n    (lvar :o) :credless_remotes) :-\n  (send nil :credless_remotes)) empty? ","o credless_remotes - "," credless_remotes ","o credless_remotes ","o is_a? "]}," Bundler Source Rubygems Remote remove_auth":{"type":"method","name":"remove_auth","children":[],"call":["uri user= ","uri password= ","uri dup ","uri userinfo ","uri dup  user= ","uri dup  password= ","uri dup  dup ","uri dup  userinfo "]}," Bundler Source Rubygems Remote apply_auth":{"type":"method","name":"apply_auth","children":[],"call":["uri userinfo= ","uri dup ","uri userinfo nil? ","uri userinfo "," raise ","HTTPError  new ","uri dup  userinfo= ","uri dup  dup ","uri dup  userinfo nil? ","uri dup  userinfo "]}," Bundler Source Rubygems Remote initialize":{"type":"method","name":"initialize","children":[],"call":[" remove_auth freeze "," remove_auth "," apply_auth freeze "," apply_auth ","Bundler  settings credentials_for ","Bundler  settings ","Bundler  settings mirror_for ","orig_uri != ","orig_Bundler  settings mirror_for  != "]}," Bundler Source Path has_app_cache?":{"type":"method","name":"has_app_cache?","children":[],"call":[" app_cache_path exist? "," app_cache_path ","SharedHelpers  in_bundle? "]}," Bundler Source Path app_cache_path":{"type":"method","name":"app_cache_path","children":[],"call":["Bundler  app_cache join "," app_cache_dirname ","Bundler  app_cache "," name "]}," Bundler Source Path expand":{"type":"method","name":"expand","children":[],"call":[" raise ","e message ","Bundler  ui debug ","Bundler  ui ","somepath expand_path ","Bundler  root "," root_path ","somepath expand_path expand_path ","Bundler  current_ruby jruby? ","Bundler  current_ruby "]}," Bundler Source Path expanded_path":{"type":"method","name":"expanded_path","children":[],"call":[" expand "," path "]}," Bundler Source Path app_cache_dirname":{"type":"method","name":"app_cache_dirname","children":[],"call":[" name "]}," Bundler Source Path specs":{"type":"method","name":"specs","children":[],"call":[" local_specs "," app_cache_path "," has_app_cache? "]}," Bundler Source Git git_proxy":{"type":"method","name":"git_proxy","children":[],"call":["GitProxy  new "," cached_revision "," ref "," uri "," cache_path "," allow_git_ops? "," options "]}," Bundler Source Git cached_revision":{"type":"method","name":"cached_revision","children":[],"call":[" options [] "," options "]}," Bundler Source Git requires_checkout?":{"type":"method","name":"requires_checkout?","children":[],"call":[" local? ! "," local? "," allow_git_ops? "," cached_revision_checked_out? ! "," cached_revision_checked_out? "]}," Bundler Source Git local?":{"type":"method","name":"local?","children":[],"call":[]}," Bundler Source Git has_app_cache?":{"type":"method","name":"has_app_cache?","children":[],"call":[" cached_revision "]}," Bundler Source Git set_local!":{"type":"method","name":"set_local!","children":[],"call":[]}," Bundler Source Git serialize_gemspecs_in":{"type":"method","name":"serialize_gemspecs_in","children":[],"call":["file write ","spec to_ruby ","File  open ","Bundler  load_gemspec ","Dir  [] each ","Dir  [] ","destination expand_path ","Bundler  root ","destination relative? ","Bundler  rubygems validate ","Bundler  rubygems ","Bundler  rubygems set_installed_by_version ","Bundler  load_gemspec  to_ruby ","Bundler  load_gemBundler  load_gemspec  ","destination expand_path  expand_path ","destination expand_path  relative? "]}," Bundler Source Git app_cache_dirname":{"type":"method","name":"app_cache_dirname","children":[],"call":[" shortref_for_path "," revision "," cached_revision "," base_name "]}," Bundler Source Git local_override!":{"type":"method","name":"local_override!","children":[],"call":[" raise "," name "," shortref_for_display "," cached_revision "," git_proxy contains? ! "," git_proxy contains? "," git_proxy ","@unlocked ! "," cached_revision != "," git_proxy revision "," options [] "," options "," git_proxy branch ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings "," git_proxy branch != ","GitProxy  new "," ref "," uri "," set_local! ","path exist? ","path expand_path ","Bundler  root ","path relative? ","Pathname  new "," local? "," override_for "," revision "," branch "," current_branch "," current_branch != ","path expand_path  exist? ","Pathname  new  exist? ","path expand_path  expand_path expand_path  ","Pathname  new  expand_Pathname  new  ","path expand_path  relative? ","Pathname  new  relative? "]}," Bundler Source Git extension_dir_name":{"type":"method","name":"extension_dir_name","children":[],"call":[" shortref_for_path "," revision "," base_name "]}," Bundler Source Git install_path":{"type":"method","name":"install_path","children":[],"call":["Bundler  user_bundle_path join join ","Bundler  user_bundle_path join ","Bundler  ruby_scope ","Bundler  user_bundle_path ","Bundler  requires_sudo? ","path exist? ! ","path exist? ","Bundler  install_path join ","Bundler  install_path "," shortref_for_path "," revision "," base_name ","Bundler  user_bundle_Bundler  install_path join  join join ","Bundler  user_bundle_Bundler  install_path join  join ","Bundler  user_bundle_Bundler  install_path join  ","Bundler  install_path join  exist? ! ","Bundler  install_path join  exist? ","Bundler  install_Bundler  install_path join  join ","Bundler  install_Bundler  install_path join  "," shortref_for_Bundler  install_path join  "]}," Bundler Source Git hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," submodules "," version "," name "," branch "," ref "," uri "," class "," glob "]}," Bundler Source Git GitProxy allowed_in_path":{"type":"method","name":"allowed_in_path","children":[],"call":[" raise "," uri "," in_path "," allow? "]}," Bundler Source Git GitProxy in_path":{"type":"method","name":"in_path","children":[],"call":["SharedHelpers  chdir "," path "," checkout "," path exist? ","Dir  chdir "]}," Bundler Source Git GitProxy allow?":{"type":"method","name":"allow?","children":[],"call":["@git allow_git_ops? ","@allow call "," raise ","GitNotInstalledError  new ","Bundler  git_present? ! ","Bundler  git_present? "]}," Bundler Source Git GitProxy uri_escaped":{"type":"method","name":"uri_escaped","children":[],"call":["' + + ","' + "," uri gsub "," uri ","\" + + ","\" + "]}," Bundler Source Git GitProxy has_revision_cached?":{"type":"method","name":"has_revision_cached?","children":[],"call":[" git "," in_path "," path "," with_path "," path exist? "]}," Bundler Source Git GitProxy git":{"type":"method","name":"git","children":[],"call":[" raise ","GitCommandError  new "," path ","$? success? ! ","$? success? ","SharedHelpers  with_clean_git_env ","GitNotAllowedError  new "," allow? ","URICredentialsFilter  credential_filtered_string "," uri "," capture_and_filter_stderr "," caller join "," caller ","msg << "," path exist? ","Dir  pwd ","$? exitstatus != ","$? exitstatus ","Bundler Retry  new attempts ","Bundler Retry  new ","GitNotInstalledError  new ","Bundler  git_present? ","status success? ! ","status success? ","dir to_s "," check_allowed ","SharedHelpers  pwd "," capture3_args_for ","Bundler  ui warn ","Bundler  ui ","err empty? "," capture "," run_command "]}," Bundler Source Git GitProxy git_retry":{"type":"method","name":"git_retry","children":[],"call":[" git ","Bundler Retry  new attempts ","Bundler Retry  new ","URICredentialsFilter  credential_filtered_string "," uri ","SharedHelpers  pwd "," check_allowed ","command shelljoin "]}," Bundler Source Git GitProxy git_null":{"type":"method","name":"git_null","children":[],"call":[" git ","File  exist? ","Bundler WINDOWS  ! ","URICredentialsFilter  credential_filtered_string "," uri "," capture_and_ignore_stderr ","SharedHelpers  with_clean_git_env "," raise ","GitNotAllowedError  new "," allow? ","dir to_s "," check_allowed "," capture3_args_for "," capture "]}," Bundler Source Git GitProxy copy_to":{"type":"method","name":"copy_to","children":[],"call":[" git_retry "," git "," path ","SharedHelpers  chdir ","File  chmod ","511 & ","File  umask ~ ","File  umask ","FileUtils  rm_rf ","FileUtils  mkdir_p ","destination dirname ","File  exist? ","destination join ","(send\n  (send\n    (send\n      (const nil :File) :stat\n      (lvar :destination)) :mode) :|\n  (int 511)) & ","File  stat mode | ","File  stat mode ","File  stat "," raise ","e message [] ","e message ","SharedHelpers  filesystem_access ","Gem Version  create >= ","Gem Version  create "," version ","MissingGitRevisionError  new ","URICredentialsFilter  credential_filtered_uri "," uri ","Dir  chdir ","e command ","inner_command gsub "," path to_s ","destination to_s "," extra_fetch_args "]}," Bundler Source Git GitProxy checkout":{"type":"method","name":"checkout","children":[],"call":[" git_retry "," path "," uri_escaped ","FileUtils  mkdir_p "," path dirname ","Bundler  ui info "," uri ","Bundler  ui "," in_path ","Bundler  ui confirm "," has_revision_cached? "," path exist? "," uri_escaped_with_configured_credentials ","SharedHelpers  filesystem_access ","URICredentialsFilter  credential_filtered_uri ","Shellwords  shellescape "," ref "," ref start_with? "," git ","Bundler  ui quiet? "," with_path ","(str \"fetch\") compact "," path to_s "," configured_uri_for to_s "," configured_uri_for "," git_remote_fetch "," depth_args "," clone_needs_unshallow? "," clone_needs_extra_fetch? "," credential_filtered_uri ","  configured_uri_for to_s _for to_s ","  configured_uri_for to_s _for "]}," Bundler Source Git GitProxy version":{"type":"method","name":"version","children":[],"call":[" git sub strip "," git sub "," git "," git match [] "," git match "," full_version match [] "," full_version match "," full_version "]}," Bundler Source Git GitProxy contains?":{"type":"method","name":"contains?","children":[],"call":["result =~ ","$? == "," git_null "," allowed_in_path ","status success? "," path "," allowed_with_path "," git_null  =~ "]}," Bundler Source Git GitProxy branch":{"type":"method","name":"branch","children":[],"call":["1 strip "," git =~ "," git "," allowed_in_path "," git strip "," path "," allowed_with_path "]}," Bundler Source Git GitProxy revision":{"type":"method","name":"revision","children":[],"call":[" git strip "," git "," ref "," allowed_in_path "," raise ","MissingGitRevisionError  new "," uri "," find_local_revision ","URICredentialsFilter  credential_filtered_uri "," path ","e command "," allowed_with_path "]}," Bundler Source Git GitProxy initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","GitNotInstalledError  new ","Bundler  git_present? ! ","Bundler  git_present? "," allow? ","Proc  new "," ref "," tag "," branch ","options [] "]}," Bundler Source Git GitCommandError initialize":{"type":"method","name":"initialize","children":[],"call":["msg << ","path exist? ","Dir  pwd ","SharedHelpers  pwd ","String  new ","String  new  << "]}," Bundler Source Git GitNotAllowedError initialize":{"type":"method","name":"initialize","children":[],"call":["msg << "," caller join "," caller ","String  new "," mag << "," mag ","String  new  << "]}," Bundler Source Git GitNotInstalledError initialize":{"type":"method","name":"initialize","children":[],"call":["msg << ","String  new ","String  new  << "]}," Bundler SimilarityDetector levenshtein_distance":{"type":"method","name":"levenshtein_distance","children":[],"call":["dm [] [] ","this length ","dm [] ","that length ","dm [] []= ","(send\n  (send\n    (send\n      (lvar :dm) :[]\n      (send\n        (lvar :i) :-\n        (int 1))) :[]\n    (send\n      (lvar :j) :-\n      (int 1))) :+\n  (begin\n    (if\n      (send\n        (send\n          (lvar :this) :[]\n          (send\n            (lvar :j) :-\n            (int 1))) :==\n        (send\n          (lvar :that) :[]\n          (send\n            (lvar :i) :-\n            (int 1))))\n      (int 0)\n      (lvar :sub)))) min ","dm [] [] + ","i - ","j - ","this [] == ","that [] ","this [] ","dm []= ","fill flatten ","i * ","(int 0) * ","this length - ","(irange\n  (int 0)\n  (send\n    (lvar :this) :length)) collect ","that nil? ","this nil? ","(irange\n  (int 1)\n  (send\n    (lvar :this) :length)) each ","(irange\n  (int 1)\n  (send\n    (lvar :that) :length)) each ","(int 0) *  flatten "]}," Bundler SimilarityDetector similar_word_list":{"type":"method","name":"similar_word_list","children":[],"call":["(send\n  (send\n    (lvar :words) :[]\n    (irange\n      (int 0)\n      (int -2))) :join\n  (str \", \")) join ","words [] ","words [] join ","words length > ","words length ","words length == "," similar_words ","(send\n  (send\n    (lvar : similar_words ) :[]\n    (irange\n      (int 0)\n      (int -2))) :join\n  (str \", \")) join "," similar_words  [] "," similar_words  [] join "," similar_words  length > "," similar_words  length "," similar_words  length == "," similar_ similar_words  "]}," Bundler SimilarityDetector similar_words":{"type":"method","name":"similar_words","children":[],"call":["(send\n  (lvar :words_by_similarity) :select) sort_by map ","(send\n  (lvar :words_by_similarity) :select) sort_by ","s distance <= ","s distance ","words_by_similarity select ","SimilarityScore  new "," levenshtein_distance ","@corpus map "]}," Bundler SimilarityDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler SharedHelpers search_up":{"type":"method","name":"search_up","children":[],"call":["File  expand_path ","File  join ","names each ","File  file? ","ENV  [] ","current == ","File  directory? ! ","File  directory? ","SharedHelpers  pwd ","File  expand_path untaint ","x untaint ","RUBY_VERSION  < ","File  expand_path tap ","File  expand_path  == ","File  expand_path untaint  == "]}," Bundler SharedHelpers find_directory":{"type":"method","name":"find_directory","children":[],"call":["File  directory? "," search_up "]}," Bundler SharedHelpers find_file":{"type":"method","name":"find_file","children":[],"call":["File  file? "," search_up "]}," Bundler SharedHelpers set_bundle_environment":{"type":"method","name":"set_bundle_environment","children":[],"call":["ENV  []= ","rubylib uniq join ","rubylib uniq ","rubylib unshift ","File  expand_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split ","ENV  [] ","rubyopt join ","rubyopt unshift ","rubyopt first !~ ","rubyopt first ","rubyopt empty? ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact ","paths uniq join ","paths uniq ","paths unshift ","Bundler  bundle_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split "," set_rubylib "," set_rubyopt "," set_path "," set_bundle_variables ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  unshift ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  join ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  unshift ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first !~ ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  empty? ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  unshift "," set_(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  "," set_(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  "]}," Bundler SharedHelpers with_clean_git_env":{"type":"method","name":"with_clean_git_env","children":[],"call":["ENV  []= ","old_env [] ","keys each ","block call ","ENV  delete ","h update ","ENV  [] ","keys inject "]}," Bundler SharedHelpers pwd":{"type":"method","name":"pwd","children":[],"call":["Dir  pwd ","Bundler  rubygems ext_lock synchronize ","Bundler  rubygems ext_lock ","Bundler  rubygems ","Pathname  pwd ","@chdir_monitor synchronize "," chdir_monitor synchronize "," chdir_monitor "]}," Bundler SharedHelpers chdir":{"type":"method","name":"chdir","children":[],"call":["Dir  chdir ","Bundler  rubygems ext_lock synchronize ","Bundler  rubygems ext_lock ","Bundler  rubygems ","@chdir_monitor synchronize "," chdir_monitor synchronize "," chdir_monitor "]}," Bundler SharedHelpers default_bundle_dir":{"type":"method","name":"default_bundle_dir","children":[],"call":["Pathname  new ","bundle_dir == ","File  join ","Bundler  rubygems user_home ","Bundler  rubygems "," find_directory ","Bundler  user_home join ","Bundler  user_home ","bundle_dir != "," find_directory  == ","Pathname  new  == "," find_directory  != ","Pathname  new  != "]}," Bundler Settings normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":[" raise ","uri absolute? "," URI ","uri =~ ","uri to_s "," mirror_source "," URI  absolute? ","uri to_s  absolute? "," URI  =~ ","uri to_s  =~ "," URI  to_s ","uri to_s  to_s "]}," Bundler Settings convert_to_backward_compatible_key":{"type":"method","name":"convert_to_backward_compatible_key","children":[],"call":["key gsub ","key include? ","key !~ ","key =~ ","key gsub  gsub ","key gsub  include? ","key gsub  !~ ","key gsub  =~ "]}," Bundler Settings set_array":{"type":"method","name":"set_array","children":[],"call":[" []= ","array join ","array empty? "]}," Bundler Settings get_array":{"type":"method","name":"get_array","children":[],"call":["w to_sym "," [] split map "," [] split "," [] "]}," Bundler Settings is_num":{"type":"method","name":"is_num","children":[],"call":["NUMBER_KEYS  include? ","value to_s ","key to_s "]}," Bundler Settings to_bool":{"type":"method","name":"to_bool","children":[],"call":["(or\n  (or\n    (or\n      (send\n        (lvar :value) :nil?)\n      (send\n        (lvar :value) :==\n        (str \"\")))\n    (send\n      (lvar :value) :=~\n      (regexp\n        (str \"^(false|f|no|n|0)$\")\n        (regopt :i))))\n  (send\n    (lvar :value) :==\n    (false))) ! ","value == ","value =~ ","value nil? ","(or\n  (or\n    (send\n      (lvar :value) :nil?)\n    (send\n      (lvar :value) :==\n      (str \"\")))\n  (send\n    (lvar :value) :=~\n    (regexp\n      (str \"^(false|f|no|n|0)$\")\n      (regopt :i)))) ! "]}," Bundler Settings is_bool":{"type":"method","name":"is_bool","children":[],"call":["BOOL_KEYS  include? "," parent_setting_for ","name to_s ","(str \"frozen\") include? ","key to_s "]}," Bundler Settings split_specfic_setting_for":{"type":"method","name":"split_specfic_setting_for","children":[],"call":["name split "]}," Bundler Settings specfic_gem_for":{"type":"method","name":"specfic_gem_for","children":[],"call":[" split_specfic_setting_for [] "," split_specfic_setting_for "]}," Bundler Settings parent_setting_for":{"type":"method","name":"parent_setting_for","children":[],"call":[" split_specfic_setting_for [] "," split_specfic_setting_for "," split_specific_setting_for [] "," split_specific_setting_for "]}," Bundler Settings app_cache_path":{"type":"method","name":"app_cache_path","children":[],"call":[" raise ","path start_with? "," [] "]}," Bundler Settings ignore_config?":{"type":"method","name":"ignore_config?","children":[],"call":["ENV  [] "]}," Bundler Settings with":{"type":"method","name":"with","children":[],"call":[" get_array "]}," Bundler Settings with=":{"type":"method","name":"with=","children":[],"call":[" set_array "]}," Bundler Settings gem_mirrors":{"type":"method","name":"gem_mirrors","children":[],"call":["h []= "," normalize_uri "," [] ","k =~ "," all inject "," all ","mirrors parse ","Mirrors  new ","k start_with? "," normalize_ normalize_uri  "]}," Bundler Settings credentials_for":{"type":"method","name":"credentials_for","children":[],"call":[" [] ","uri host ","uri to_s "]}," Bundler Settings mirror_for":{"type":"method","name":"mirror_for","children":[],"call":[" gem_mirrors [] "," gem_mirrors "," normalize_uri ","uri to_s downcase ","uri to_s "," URI ","uri is_a? "," gem_mirrors for uri "," gem_mirrors for ","Bundler  URI "," require_relative "," normalize_ URI  "," normalize_Bundler  URI  "," URI  to_s downcase ","Bundler  URI  to_s downcase "," URI  to_s ","Bundler  URI  to_s "," URI  is_a? ","Bundler  URI  is_a? "," gem_mirrors for  URI  "," gem_mirrors for Bundler  URI  "]}," Bundler Settings local_overrides":{"type":"method","name":"local_overrides","children":[],"call":["repos []= "," [] ","k =~ "," all each "," all "]}," Bundler Runtime setup_manpath":{"type":"method","name":"setup_manpath","children":[],"call":["ENV  []= ","manuals concat uniq join ","manuals concat uniq ","manuals concat ","ENV  [] to_s split ","ENV  [] to_s ","ENV  [] ","manuals empty? ","(send\n  (gvar :$LOAD_PATH) :map) compact ","Dir  [] empty? ","Dir  [] ","man_subdir + ","path sub ","$LOAD_PATH map ","Bundler SharedHelpers  set_env ","(send\n  (gvar :$LOAD_PATH) :map) compact  concat uniq join ","(send\n  (gvar :$LOAD_PATH) :map) compact  concat uniq ","(send\n  (gvar :$LOAD_PATH) :map) compact  concat ","(send\n  (gvar :$LOAD_PATH) :map) compact  empty? ","path sub  + "]}," Bundler Runtime prune_git_and_path_cache":{"type":"method","name":"prune_git_and_path_cache","children":[],"call":["FileUtils  rm_rf ","Bundler  ui info ","File  basename ","Bundler  ui ","File  dirname ","cached each ","Bundler  settings app_cache_path ","Bundler  settings ","cached any? ","source app_cache_dirname == ","source app_cache_dirname ","source respond_to? ","s source ","resolve any? ","cached delete_if ","Dir  [] "," cache_path ","File  baseFile  basename  ","File  dirFile  basename  ","Dir  []  each ","Bundler  settings app_cache_File  dirname  ","Dir  []  any? ","s source  app_cache_dirname == ","source app_cache_dirFile  basename  == ","s source  app_cache_dirname ","source app_cache_dirFile  basename  ","s source  respond_to? ","s s source  ","Dir  []  delete_if "," cache_File  dirname  "]}," Bundler Runtime prune_gem_cache":{"type":"method","name":"prune_gem_cache","children":[],"call":["File  delete ","Bundler  ui info ","File  basename ","Bundler  ui ","cached each ","Bundler  settings app_cache_path ","Bundler  settings ","cached any? ","s source is_a? ! ","s source is_a? ","s source ","s version == ","spec version ","s version ","s name == ","spec name ","s name ","resolve any? ","Bundler  rubygems spec_from_gem ","Bundler  rubygems ","cached delete_if ","Dir  [] "," cache_path ","Dir  []  each ","Dir  []  any? ","Bundler  rubygems spec_from_gem  version ","Bundler  rubygems spec_from_gem  name ","Bundler  rubygems Bundler  rubygems spec_from_gem _from_gem ","Dir  []  delete_if "]}," Bundler RubygemsIntegration MoreFuture find_name":{"type":"method","name":"find_name","children":[],"call":["(send\n  (send\n    (const\n      (const nil :Gem) :Specification) :stubs) :find_all) map ","spec name == ","spec name ","Gem Specification  stubs find_all ","Gem Specification  stubs ","Gem Specification  stubs_for map ","Gem Specification  stubs_for "]}," Bundler RubygemsIntegration MoreFuture backport_ext_builder_monitor":{"type":"method","name":"backport_ext_builder_monitor","children":[],"call":[" const_set "," const_get "," remove_const "," const_defined? ","Monitor  new "," const_defined? ! ","Gem Ext Builder  class_eval "," require ","Gem  module_eval ","786 + ","778 + ","782 + ","788 + ","818 + ","817 + ","824 + ","831 + "]}," Bundler RubygemsIntegration MoreFuture all_specs":{"type":"method","name":"all_specs","children":[],"call":["StubSpecification  from_stub ","Gem Specification  stubs map ","Gem Specification  stubs "," require "]}," Bundler RubygemsIntegration MoreFuture initialize":{"type":"method","name":"initialize","children":[],"call":[" backport_ext_builder_monitor "]}," Bundler RubygemsIntegration Future repository_subdirectories":{"type":"method","name":"repository_subdirectories","children":[],"call":[]}," Bundler RubygemsIntegration Future build":{"type":"method","name":"build","children":[],"call":["Gem Package  build "," require "]}," Bundler RubygemsIntegration Future gem_from_path":{"type":"method","name":"gem_from_path","children":[],"call":["p security_policy= ","Gem Package  new "," require ","Gem Package  new  security_Gem Package  new olicy= "]}," Bundler RubygemsIntegration Future download_gem":{"type":"method","name":"download_gem","children":[],"call":["fetcher download ","Gem RemoteFetcher  new ","Resolv DNS  new "," configuration [] "," configuration ","Bundler  settings mirror_for ","Bundler  settings "," require ","fetcher headers= ","spec remote original_uri to_s ","spec remote original_uri ","spec remote "," gem_remote_fetcher ","Bundler Retry  new attempts ","Bundler Retry  new ","Bundler Source  mirror_for ","Gem RemoteFetcher  new  download "," gem_remote_fetcher  download ","Gem RemoteFetcher  new  headers= "," gem_remote_fetcher  headers= ","spec remote original_Bundler  settings mirror_for  to_s ","spec remote original_Bundler Source  mirror_for  to_s ","spec remote original_Bundler  settings mirror_for  ","spec remote original_Bundler Source  mirror_for  "," gem_remote_Gem RemoteFetcher  new  "," gem_remote_ gem_remote_fetcher  "]}," Bundler RubygemsIntegration Future fetch_all_remote_specs":{"type":"method","name":"fetch_all_remote_specs","children":[],"call":["hash [] push ","hash [] ","pres empty? ! ","pres empty? "," fetch_specs ","hash []= ","URI  parse ","source to_s ","source is_a? ","Gem  sources each ","Gem  sources ","remote uri ","specs push ","remote uri is_a? ","specs concat ","tuple to_a ","tuples map ","source uri ","fetched each "," raise ","Gem RemoteFetcher FetchError  new ","error source ","error error ","e is_a? ","errors detect ","fetched empty? ","Gem SpecFetcher  new available_specs ","Gem SpecFetcher  new ","tuples each ","tuples empty? "," fetch_specs  empty? ! "," fetch_specs  empty? "," fetch_ fetch_specs  ","URI  parse  to_s ","remote uri  to_s ","URI  parse  is_a? ","remote uri  is_a? ","Gem  URI  parse s each ","Gem  remote uri s each ","Gem  URI  parse s ","Gem  remote uri s "," fetch_specs  push "," fetch_specs  concat ","URI  parse  uri ","remote uri  uri ","error URI  parse  ","error remote uri  ","Gem SpecFetcher  new available_ fetch_specs  "]}," Bundler RubygemsIntegration Future fetch_specs":{"type":"method","name":"fetch_specs","children":[],"call":[" raise ","name == ","Bundler  load_marshal ","Gem RemoteFetcher  fetcher fetch_path ","Gem RemoteFetcher  fetcher ","source + ","Gem  marshal_version ","fetcher fetch_path ","fetcher headers= ","remote original_uri to_s ","remote original_uri "," gem_remote_fetcher ","Gem RemoteFetcher  fetcher fetch_source +  ","Gem RemoteFetcher   gem_remote_fetcher  fetch_path ","Gem RemoteFetcher   gem_remote_fetcher  ","fetcher fetch_source +  "," gem_remote_fetcher  fetch_path "," gem_remote_fetcher  headers= "," gem_remote_ gem_remote_fetcher  "]}," Bundler RubygemsIntegration Future find_name":{"type":"method","name":"find_name","children":[],"call":["Gem Specification  find_all_by_name "]}," Bundler RubygemsIntegration Future all_specs":{"type":"method","name":"all_specs","children":[],"call":["Gem Specification  to_a "]}," Bundler RubygemsIntegration Future stub_rubygems":{"type":"method","name":"stub_rubygems","children":[],"call":["Gem Specification  all= ","Gem  post_reset "," redefine_method "]}," Bundler RubygemsIntegration MoreModern build":{"type":"method","name":"build","children":[],"call":["Gem Builder  new build ","Gem Builder  new "," require "]}," Bundler RubygemsIntegration Legacy validate":{"type":"method","name":"validate","children":[],"call":["spec summary ","spec validate ","Bundler  ui silence ","Bundler  ui "]}," Bundler RubygemsIntegration redefine_method":{"type":"method","name":"redefine_method","children":[],"call":["klass send ","klass instance_methods include? ","klass instance_methods ","@replaced_methods []= ","method != ","klass instance_method "," method_visibility ","klass klass instance_method s include? ","klass klass instance_method s ","klass klass instance_method  "," method_ method_visibility  "]}," Bundler RubygemsIntegration stub_source_index":{"type":"method","name":"stub_source_index","children":[],"call":[" add_specs "," spec_dirs= ","Deprecate  skip_during "," redefine_method ","Gem SourceIndex  send "]}," Bundler RubygemsIntegration security_policies":{"type":"method","name":"security_policies","children":[],"call":[" require "]}," Bundler RubygemsIntegration security_policy_keys":{"type":"method","name":"security_policy_keys","children":[],"call":["(str \"High\") map "]}," Bundler RubygemsIntegration build_gem":{"type":"method","name":"build_gem","children":[],"call":[" build ","Dir  chdir ","SharedHelpers  chdir "]}," Bundler RubygemsIntegration build":{"type":"method","name":"build","children":[],"call":["Gem Builder  new build ","Gem Builder  new "," require ","Gem Package  build "]}," Bundler RubygemsIntegration gem_from_path":{"type":"method","name":"gem_from_path","children":[],"call":["Gem Format  from_file_by_path "," require ","p security_policy= ","Gem Package  new ","Gem Format  from_file_by_Gem Package  new ath ","Gem Package  new  security_Gem Package  new olicy= "]}," Bundler RubygemsIntegration fetch_all_remote_specs":{"type":"method","name":"fetch_all_remote_specs","children":[],"call":["spec_list [] "," fetch_prerelease_specs each "," fetch_prerelease_specs "," fetch_specs ","Bundler  rubygems sources= ","Bundler  rubygems ","remote uri to_s ","remote uri ","Bundler  rubygems sources ","spec_list values first ","spec_list values ","spec_list [] push ","spec_list [] concat ","Gem SpecFetcher  new list each ","Gem SpecFetcher  new list ","Gem SpecFetcher  new ","h []= ","Hash  new ","specs concat ","URI  parse ","source to_s ","remote uri is_a? "," fetch_specs  [] ","Gem SpecFetcher  new list  [] "," fetch_prerelease_ fetch_specs  each "," fetch_prerelease_ fetch_specs  "," fetch_ fetch_specs  ","Bundler  rubygems URI  parse s= ","Bundler  rubygems remote uri s= ","Bundler  rubygems URI  parse s ","Bundler  rubygems remote uri s "," fetch_specs  values first ","Gem SpecFetcher  new list  values first "," fetch_specs  values ","Gem SpecFetcher  new list  values "," fetch_specs  [] push ","Gem SpecFetcher  new list  [] push "," fetch_specs  [] concat ","Gem SpecFetcher  new list  [] concat "," fetch_specs  concat ","URI  parse  to_s ","remote uri  to_s "]}," Bundler RubygemsIntegration fetch_prerelease_specs":{"type":"method","name":"fetch_prerelease_specs","children":[],"call":[" fetch_specs "]}," Bundler RubygemsIntegration ext_lock":{"type":"method","name":"ext_lock","children":[],"call":["Monitor  new "]}," Bundler RubygemsIntegration loaded_gem_paths":{"type":"method","name":"loaded_gem_paths","children":[],"call":["p =~ ","Regexp  escape ","Bundler  rubygems gem_path any? ","Bundler  rubygems gem_path ","Bundler  rubygems ","$LOAD_PATH select ","loaded_gem_paths flatten ","s full_require_paths ","Gem  loaded_specs map ","Gem  loaded_specs ","Gem Specification  method_defined? "]}," Bundler RubygemsIntegration repository_subdirectories":{"type":"method","name":"repository_subdirectories","children":[],"call":[]}," Bundler RubygemsIntegration config_map":{"type":"method","name":"config_map","children":[],"call":[]}," Bundler RubygemsIntegration spec_cache_dirs":{"type":"method","name":"spec_cache_dirs","children":[],"call":["File  directory? ","dirs uniq select ","dirs uniq ","dirs << ","Gem  spec_cache_dir ","Gem  respond_to? ","File  join "," gem_path map "," gem_path "]}," Bundler RubygemsIntegration gem_cache":{"type":"method","name":"gem_cache","children":[],"call":["File  expand_path "," gem_path map "," gem_path "]}," Bundler RubygemsIntegration validate":{"type":"method","name":"validate","children":[],"call":["spec validate ","Bundler  ui silence ","Bundler  ui "," raise ","Gem InvalidSpecificationException  new ","e message ","spec loaded_from "]}," Bundler RubygemsIntegration build_args=":{"type":"method","name":"build_args=","children":[],"call":["Gem Command  build_args= "," require "]}," Bundler RubygemsIntegration build_args":{"type":"method","name":"build_args","children":[],"call":["Gem Command  build_args "," require "]}," Bundler RubygemsIntegration provides?":{"type":"method","name":"provides?","children":[],"call":[" class provides? "," class ","Gem Requirement  new satisfied_by? "," version ","Gem Requirement  new "]}," Bundler RubygemsIntegration version":{"type":"method","name":"version","children":[],"call":[" class version "," class ","Gem  rubygems_version "]}," Gem Specification extension_dir":{"type":"method","name":"extension_dir","children":[],"call":[" rg_extension_dir ","File  expand_path ","File  join "," source extension_dir_name "," source "," extensions_dir "," source respond_to? ","(send\n  (send nil :source) :extension_dir_name) uniq join ","(send\n  (send nil :source) :extension_dir_name) uniq ","File  basename "," full_gem_path "]}," Bundler SystemRubyVersion patchlevel":{"type":"method","name":"patchlevel","children":[],"call":["RUBY_PATCHLEVEL  to_s "]}," Bundler SystemRubyVersion engine_version":{"type":"method","name":"engine_version","children":[],"call":[" raise ","JRUBY_VERSION  dup ","Rubinius VERSION  dup ","RUBY_VERSION  dup "," engine "]}," Bundler SystemRubyVersion engine":{"type":"method","name":"engine","children":[],"call":["RUBY_ENGINE  dup "]}," Bundler SystemRubyVersion gem_version":{"type":"method","name":"gem_version","children":[],"call":["Gem Version  new "," version "]}," Bundler SystemRubyVersion version":{"type":"method","name":"version","children":[],"call":["RUBY_VERSION  dup "]}," Bundler SystemRubyVersion initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler RubyVersion host":{"type":"method","name":"host","children":[],"call":["(send\n  (const\n    (const nil :RbConfig) :CONFIG) :[]\n  (str \"host_cpu\")) join ","RbConfig CONFIG  [] "]}," Bundler RubyVersion diff":{"type":"method","name":"diff","children":[],"call":["other patchlevel "," patchlevel "," patchlevel != ","other engine_version "," engine_version "," engine_version != ","other version "," version "," version != ","other engine "," engine "," engine != "," matches? ! "," matches? ","other patchlevel is_a? ! ","other patchlevel is_a? "," patchlevel is_a? ! "," patchlevel is_a? "," versions_string ","other engine_versions "," engine_versions ","other engine_gem_version ","other versions "," versions ","other gem_version "," versions empty? "," raise ","other is_a? ","other class "]}," Bundler RubyVersion ==":{"type":"method","name":"==","children":[],"call":[" patchlevel == ","other patchlevel "," patchlevel "," engine_version == ","other engine_version "," engine_version "," engine == ","other engine "," engine "," version == ","other version "," version "," engine_versions == ","other engine_versions "," engine_versions "," versions == ","other versions "," versions "]}," Bundler RubyVersion to_s":{"type":"method","name":"to_s","children":[],"call":["output << "," engine_version "," engine "," engine == "," patchlevel "," version "," versions_string "," engine_versions ","String  new "," patchlevel != ","String  new  << "]}," Bundler RubyVersion initialize":{"type":"method","name":"initialize","children":[],"call":["Gem Requirement  create requirements first last ","Gem Requirement  create requirements first ","Gem Requirement  create requirements ","Gem Requirement  create ","@engine_versions first "," Array ","@versions first ","engine to_s ","v to_s ","op == ","Gem Requirement  parse "," Array map ","@gem_version prerelease? "," Array  first ","Gem Requirement  create requirements first last  prerelease? "]}," Bundler RubyDsl ruby":{"type":"method","name":"ruby","children":[],"call":["RubyVersion  new ","options [] "," raise ","ruby_version != ","options [] == ","options [] nil? "," Array ","ruby_version flatten! ","ruby_version pop ","ruby_version last is_a? ","ruby_version last ","ruby_version << ","Bundler  read_file strip ","Bundler  read_file ","ruby_version any? ","ruby_version pop  [] ","ruby_version pop  [] == ","ruby_version pop  [] nil? "]}," Bundler Retry last_attempt?":{"type":"method","name":"last_attempt?","children":[],"call":[" current_run >= "," total_runs "," current_run "]}," Bundler Retry keep_trying?":{"type":"method","name":"keep_trying?","children":[],"call":[" last_attempt? "," current_run zero? "," current_run "]}," Bundler Retry fail":{"type":"method","name":"fail","children":[],"call":["Bundler  ui warn ","e message ","e class "," total_runs "," current_run next "," current_run "," name ","Bundler  ui "," raise ","e is_a? ","@exceptions any? "," last_attempt? ","k === "]}," Bundler Retry run":{"type":"method","name":"run","children":[],"call":[" fail ","block call "," fail_attempt "]}," Bundler Retry attempt":{"type":"method","name":"attempt","children":[],"call":[" run "," keep_trying? "]}," Bundler Retry initialize":{"type":"method","name":"initialize","children":[],"call":["@retries + "," Array ","attempts next "," default_attempts "]}," Bundler Retry default_retries":{"type":"method","name":"default_retries","children":[],"call":["Bundler  settings [] ","Bundler  settings "]}," Bundler Retry default_attempts":{"type":"method","name":"default_attempts","children":[],"call":[" default_retries + "," default_retries "," Integer "," class attempts "," class "]}," Bundler Resolver verify_gemfile_dependencies_are_found!":{"type":"method","name":"verify_gemfile_dependencies_are_found!","children":[],"call":[" raise ","message << ","versions join ","versions any? ","requirement source ","s version ","@source_requirements [] [] map ","@source_requirements [] [] ","@source_requirements [] ","requirement name ","requirement requirement ","base first version ","base first ","base empty? ! ","base empty? ","@base [] "," search_for empty? "," search_for ","requirement name == ","requirements each "," formatted_versions_with_platforms ","versions_with_platforms any? ","String  new ","s platform ","specs map ","Bundler  settings app_cache_path ","Bundler  settings ","Bundler  app_cache exist? ","Bundler  app_cache ","SharedHelpers  pretty_dependency ","source specs [] ","source specs ","name == ","@index source_types include? ","@index source_types ","source specs search ","source to_err "," source_for "," gem_not_found_message ","(send\n  (lvar :requirements) :map!) compact! ","requirement current_platform? ","requirements map! ","requirement gem_platforms empty? ","requirement gem_platforms ","String  new  << "," gem_not_found_message  << ","base first version s join ","@source_requirements [] [] map  join ","base first version s any? ","@source_requirements [] [] map  any? ","requirement @source_requirements []  ","requirement  source_for  ","s base first version  ","@@source_requirements [] _requirements [] [] map ","@ source_for _requirements [] [] map ","@@source_requirements [] _requirements [] [] ","@ source_for _requirements [] [] ","@@source_requirements [] _requirements [] ","@ source_for _requirements [] ","requirement requirement name  ","base first base first version  ","@base []  first version ","@base []  first ","@base []  empty? ! ","@base []  empty? ","@@base []  [] ","requirement requirement name  == "," formatted_base first version s_with_platforms "," formatted_@source_requirements [] [] map _with_platforms ","base first version s_with_platforms any? ","@source_requirements [] [] map _with_platforms any? ","@source_requirements [] []  map ","source specs []  map ","source specs search  map ","source @source_requirements [] []  [] ","source source specs []  [] ","source source specs search  [] ","@source_requirements []  specs [] "," source_for  specs [] ","source @source_requirements [] []  ","source source specs []  ","source source specs search  ","@source_requirements []  specs "," source_for  specs ","requirement name  == ","@index @source_requirements [] _types include? ","@index  source_for _types include? ","@index @source_requirements [] _types ","@index  source_for _types ","source @source_requirements [] []  search ","source source specs []  search ","source source specs search  search ","@source_requirements []  specs search "," source_for  specs search ","@source_requirements []  to_err "," source_for  to_err "," @source_requirements [] _for ","  source_for _for "," gem_not_found_String  new  "," gem_not_found_ gem_not_found_message  "]}," Bundler Resolver amount_constrained":{"type":"method","name":"amount_constrained","children":[],"call":[" search_for size to_f / ","all size to_f ","all size "," search_for size to_f "," search_for size "," search_for ","all size == ","DepProxy  new ","dependency __platform ","Dependency  new ","dependency name ","@amount_constrained [] ","dependency requirement satisfied_by? ","base first version ","base first ","dependency requirement ","base empty? ! ","base empty? ","@base [] ","search / ","all == ","(lvasgn :search\n  (send\n    (send\n      (send nil :search_for\n        (lvar :dependency)) :size) :to_f)) == ","all zero? ","search - ","all <= "," index_for search size "," index_for search "," index_for ","all - ","s version prerelease? ! ","s version prerelease? ","s version ","search count ","@prerelease_specified [] "," prerelease_specified [] "," prerelease_specified ","  search_for size to_f _for size to_f / ","  search_for size _for size to_f / "," search count _for size to_f / ","  search_for _for size to_f / "," search_for  size to_f "," search_for size to_f  size to_f "," index_for search size  size to_f "," search_for  size "," search_for size to_f  size "," index_for search size  size ","  search_for size to_f _for size to_f ","  search_for size _for size to_f "," search count _for size to_f ","  search_for _for size to_f ","  search_for size to_f _for size ","  search_for size _for size "," search count _for size ","  search_for _for size ","  search_for size to_f _for ","  search_for size _for "," search count _for ","  search_for _for "," search_for  size == "," search_for size to_f  size == "," index_for search size  size == ","@base []  first version ","@base []  first ","@base []  empty? ! ","@base []  empty? ","@@base []  [] "," search_for size to_f  / "," search_for size  / ","search count  / "," search_for  / "," search_for  == "," search_for size to_f  == "," index_for search size  == ","(lvasgn : search_for size to_f \n  (send\n    (send\n      (send nil : search_for size to_f _for\n        (lvar :dependency)) :size) :to_f)) == ","(lvasgn : search_for size \n  (send\n    (send\n      (send nil : search_for size _for\n        (lvar :dependency)) :size) :to_f)) == ","(lvasgn :search count \n  (send\n    (send\n      (send nil :search count _for\n        (lvar :dependency)) :size) :to_f)) == ","(lvasgn : search_for \n  (send\n    (send\n      (send nil : search_for _for\n        (lvar :dependency)) :size) :to_f)) == "," search_for  zero? "," search_for size to_f  zero? "," index_for search size  zero? "," search_for size to_f  - "," search_for size  - ","search count  - "," search_for  - "," search_for  <= "," search_for size to_f  <= "," index_for search size  <= "," index_for  search_for size to_f  size "," index_for  search_for size  size "," index_for search count  size "," index_for  search_for  size "," index_for  search_for size to_f  "," index_for  search_for size  "," index_for search count  "," index_for  search_for  "," index_for search size  - "," search_for size to_f  count "," search_for size  count ","search count  count "," search_for  count "]}," Bundler Resolver sort_dependencies":{"type":"method","name":"sort_dependencies","children":[],"call":[" search_for count "," search_for ","activated vertex_named payload ","activated vertex_named ","conflicts [] "," amount_constrained "," name_for ","dependencies sort_by ","@prereleases_cache [] ","dependency requirement ","@base_dg vertex_named "," class platform_sort_key ","dependency __platform "," class ","vertex payload ","vertex root? ","dependency all_sources= "," relevant_sources_for_vertex ","dependency name ","@base [] any? ","@base [] ","activated vertex_ name_for d payload ","activated activated vertex_named _named payload ","activated vertex_ name_for d ","activated activated vertex_named _named ","  name_for _for ","@base_dg vertex_ name_for d ","@base_dg activated vertex_named _named ","activated vertex_named  payload ","activated vertex_named  root? "," relevant_sources_for_activated vertex_named  ","dependency  name_for  "]}," Bundler Resolver requirement_satisfied_by?":{"type":"method","name":"requirement_satisfied_by?","children":[],"call":["requirement matches_spec? ","spec source is_a? ","spec source ","spec for? ","requirement __platform ","spec activate_platform! ","@platforms include? ","@platforms ! ","vertex requirements none? ","vertex requirements ","activated vertex_named ","spec name ","sg version prerelease? ! ","sg version prerelease? ","sg version "," search_for any? "," search_for ","requirement prerelease? ! ","requirement prerelease? ","spec version prerelease? ","spec version ","requirement satisfied_by? ","activated vertex_named  requirements none? ","activated vertex_named  requirements ","activated activated vertex_named _named "]}," Bundler Resolver name_for_locking_dependency_source":{"type":"method","name":"name_for_locking_dependency_source","children":[],"call":["Bundler  default_lockfile basename to_s ","Bundler  default_lockfile basename ","Bundler  default_lockfile "]}," Bundler Resolver name_for_explicit_dependency_source":{"type":"method","name":"name_for_explicit_dependency_source","children":[],"call":["Bundler  default_gemfile basename to_s ","Bundler  default_gemfile basename ","Bundler  default_gemfile "]}," Bundler Resolver name_for":{"type":"method","name":"name_for","children":[],"call":["dependency name "]}," Bundler Resolver search_for":{"type":"method","name":"search_for","children":[],"call":["sg activate_platform ","(send\n  (lvar :search) :select) each ","sg for? ","search select ","locked_requirement satisfied_by? ","sg version ","groups select ","locked_requirement ! ","SpecGroup  new ","nested map ","nested last << ","nested last ","spec version ","nested << ","spec version != ","results each ","results first version ","results first ","results any? ","vertex payload requirement ","vertex payload ","@base_dg vertex_named ","dependency name ","index search ","@base [] ","@source_requirements [] ","@search_for [] ","dependency dep ","dependency is_a? ","dependency __platform ","sg activate_platform! ","@gem_version_promoter sort_versions ","@gem_version_promoter major? ","groups << ","locked_requirement satisfied_by? ! ","nested reduce ","specs << ","version == "," index_for ","spec_group ignores_bundler_dependencies= ","pre + ","spec version prerelease? ","results partition ","@prerelease_specified [] ","locked_requirement nil? ","@use_gvp ! ","@prerelease_specified [] ! ","selected_sgs << ","sg_all_platforms activate_platform! ","sg copy_for ","sg_all_platforms nil? "," class sort_platforms reverse_each "," class sort_platforms "," class ","@platforms + ","search each ","sorted_all_platforms reverse_each ","all_platforms to_a == ","all_platforms to_a ","selected_sgs insert ","sg_all_platforms activated_platforms == ","sg_all_platforms activated_platforms "," class sort_platforms reverse ","dependency_proxy dep ","dependency_proxy __platform ","sg activate_all_platforms! ","@generic_names include? ","search_result each ","@variant_specific_names include? ","search_result empty? ","SpecGroup  create_for ","current_specs []= "," select_best_platform_match ","Hash  new "," results_for ","sg_ruby_deps != ","sg_all_platforms dependencies_for_activated_platforms map ","sg_all_platforms dependencies_for_activated_platforms ","sg_ruby dependencies_for_activated_platforms map ","sg_ruby dependencies_for_activated_platforms ","spec match_platform ","specs any? ","dependency force_ruby_platform ","spec_group_ruby force_ruby_platform= "," results_for + "," requirement_satisfied_by? ","@base [] select ","results group_by reduce ","results group_by ","locked_results empty? ","results select "," base_requirements [] "," base_requirements ","platform_specs == ","relevant_platforms flat_map ","ruby_specs any? ","relevant_platforms any? ","dep_platforms select ","@gem_version_promoter sort_versions group_by reduce ","@gem_version_promoter sort_versions group_by ","dependency gem_platforms ","sg activate_dependency __platform  ","sg activate_dependency_proxy __platform  ","(send\n  (lvar :@gem_version_promoter sort_versions ) :select) each ","@gem_version_promoter sort_versions  select ","vertex payload requirement  satisfied_by? "," base_requirements []  satisfied_by? ","sg spec version  ","sg results first version  ","vertex payload requirement  ! "," base_requirements []  ! ","spec spec version  ","spec results first version  ","spec spec version  != ","spec results first version  != ","index search  each ","pre +  each "," results_for  each "," results_for +  each ","@gem_version_promoter sort_versions  each ","results first spec version  ","results first results first version  ","index search  first version ","pre +  first version "," results_for  first version "," results_for +  first version ","@gem_version_promoter sort_versions  first version ","index search  first ","pre +  first "," results_for  first "," results_for +  first ","@gem_version_promoter sort_versions  first ","index search  any? ","pre +  any? "," results_for  any? "," results_for +  any? ","@gem_version_promoter sort_versions  any? ","@base_dg vertex_named  payload requirement ","@base_dg vertex_named  payload ","@base_dg @base_dg vertex_named _named ","@base_dg vertex_dependency name d ","dependency dep  name ","dependency_proxy dep  name ","dependency dependency name  "," index_for  search ","index @gem_version_promoter sort_versions  ","@@gem_version_promoter sort_versions _for [] ","dependency dep  dep ","dependency_proxy dep  dep ","dependency dep  is_a? ","dependency_proxy dep  is_a? ","dependency dep  __platform ","dependency_proxy dep  __platform ","dependency __dependency __platform  ","dependency __dependency_proxy __platform  ","sg activate_dependency __platform ! ","sg activate_dependency_proxy __platform ! ","@gem_spec version _promoter sort_spec version s ","@gem_results first version _promoter sort_results first version s ","@gem_spec version _promoter major? ","@gem_results first version _promoter major? ","vertex payload requirement  satisfied_by? ! "," base_requirements []  satisfied_by? ! ","spec version  == ","results first version  == ","  index_for _for ","SpecGroup  new  ignores_bundler_dependencies= ","SpecGroup  create_for  ignores_bundler_dependencies= ","spec spec version  prerelease? ","spec results first version  prerelease? ","index search  partition ","pre +  partition "," results_for  partition "," results_for +  partition ","@gem_version_promoter sort_versions  partition ","vertex payload requirement  nil? "," base_requirements []  nil? ","sg_all_dependency __platform s activate_dependency __platform ! ","sg_all_dependency_proxy __platform s activate_dependency_proxy __platform ! ","sg copy_for  activate_platform! ","sg_@platforms +  activate_platform! ","sg_all_dependency __platform s nil? ","sg_all_dependency_proxy __platform s nil? ","sg copy_for  nil? ","sg_@platforms +  nil? "," class sort_dependency __platform s reverse_each "," class sort_dependency_proxy __platform s reverse_each "," class sort_dependency __platform s "," class sort_dependency_proxy __platform s ","@dependency __platform s + ","@dependency_proxy __platform s + ","sorted_all_dependency __platform s reverse_each ","sorted_all_dependency_proxy __platform s reverse_each ","sorted_@platforms +  reverse_each "," class sort_platforms  reverse_each ","all_dependency __platform s to_a == ","all_dependency_proxy __platform s to_a == ","@platforms +  to_a == ","all_dependency __platform s to_a ","all_dependency_proxy __platform s to_a ","@platforms +  to_a ","sg_all_dependency __platform s activated_dependency __platform s == ","sg_all_dependency_proxy __platform s activated_dependency_proxy __platform s == ","sg copy_for  activated_platforms == ","sg_@platforms +  activated_platforms == ","sg_all_dependency __platform s activated_dependency __platform s ","sg_all_dependency_proxy __platform s activated_dependency_proxy __platform s ","sg copy_for  activated_platforms ","sg_@platforms +  activated_platforms "," class sort_dependency __platform s reverse "," class sort_dependency_proxy __platform s reverse ","dependency dep _proxy dep ","dependency_proxy dep _proxy dep ","dependency dep _proxy __platform ","dependency_proxy dep _proxy __platform ","dependency_proxy __dependency __platform  ","dependency_proxy __dependency_proxy __platform  ","sg activate_all_dependency __platform s! ","sg activate_all_dependency_proxy __platform s! ","sg activate_@platforms + ! ","@generic_dependency name s include? ","@gem_version_promoter sort_versions _result each ","@variant_specific_dependency name s include? ","@gem_version_promoter sort_versions _result empty? "," select_best_dependency __platform _match "," select_best_dependency_proxy __platform _match "," index search _for "," pre + _for ","  results_for _for ","  results_for + _for "," @gem_version_promoter sort_versions _for ","sg copy_for _deps != ","sg_ruby dependencies_for_activated_platforms map  != ","sg_all_dependency __platform s dependencies_for_activated_dependency __platform s map ","sg_all_dependency_proxy __platform s dependencies_for_activated_dependency_proxy __platform s map ","sg copy_for  dependencies_for_activated_platforms map ","sg_@platforms +  dependencies_for_activated_platforms map ","sg_all_dependency __platform s dependencies_for_activated_dependency __platform s ","sg_all_dependency_proxy __platform s dependencies_for_activated_dependency_proxy __platform s ","sg copy_for  dependencies_for_activated_platforms ","sg_@platforms +  dependencies_for_activated_platforms ","sg_ruby dependencies_for_activated_dependency __platform s map ","sg_ruby dependencies_for_activated_dependency_proxy __platform s map ","sg_ruby dependencies_for_activated_dependency __platform s ","sg_ruby dependencies_for_activated_dependency_proxy __platform s ","spec match_dependency __platform  ","spec match_dependency_proxy __platform  ","dependency dep  force_ruby_platform ","dependency_proxy dep  force_ruby_platform ","dependency force_ruby_dependency __platform  ","dependency force_ruby_dependency_proxy __platform  ","spec_group_ruby force_ruby_dependency __platform = ","spec_group_ruby force_ruby_dependency_proxy __platform = ","SpecGroup  new _ruby force_ruby_platform= ","SpecGroup  create_for _ruby force_ruby_platform= ","SpecGroup  create_for  force_ruby_platform= ","SpecGroup  new  force_ruby_platform= "," index search _for + "," pre + _for + ","  results_for _for + ","  results_for + _for + "," @gem_version_promoter sort_versions _for + ","index search  group_by reduce ","pre +  group_by reduce "," results_for  group_by reduce "," results_for +  group_by reduce ","@gem_version_promoter sort_versions  group_by reduce ","index search  group_by ","pre +  group_by "," results_for  group_by "," results_for +  group_by ","@gem_version_promoter sort_versions  group_by ","locked_index search  empty? ","locked_pre +  empty? ","locked_ results_for  empty? ","locked_ results_for +  empty? ","locked_@gem_version_promoter sort_versions  empty? ","index search  select ","pre +  select "," results_for  select "," results_for +  select ","dependency __platform _specs == ","dependency_proxy __platform _specs == ","relevant_dependency __platform s flat_map ","relevant_dependency_proxy __platform s flat_map "," select_best_platform_match  any? ","relevant_dependency __platform s any? ","relevant_dependency_proxy __platform s any? ","dep_dependency __platform s select ","dep_dependency_proxy __platform s select ","dependency gem_platforms  select ","@gem_spec version _promoter sort_spec version s group_by reduce ","@gem_results first version _promoter sort_results first version s group_by reduce ","@gem_spec version _promoter sort_spec version s group_by ","@gem_results first version _promoter sort_results first version s group_by ","dependency dep  gem_platforms ","dependency_proxy dep  gem_platforms ","dependency gem_dependency __platform s ","dependency gem_dependency_proxy __platform s "]}," Bundler Resolver dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":["specification dependencies_for_activated_platforms ","variant_specific_names - ","specification partitioned_dependency_names_for_activated_platforms ","all_dependencies map - ","all_dependencies map ","@variant_specific_names include? ","specification name ","specification dependencies_for_activated_platforms  map - ","specification dependencies_for_activated_platforms  map "]}," Bundler Resolver indicate_progress":{"type":"method","name":"indicate_progress","children":[],"call":["Bundler  ui info ","Bundler  ui "," debug? ","(send\n  (send nil :iteration_counter) :%\n  (send nil :iteration_rate)) == "," iteration_counter % "," iteration_rate "," iteration_counter ","(send\n  (begin\n    (send\n      (send\n        (const nil :Time) :now) :-\n      (send nil :started_at))) :%\n  (int 3600)) round >= ","(send\n  (begin\n    (send\n      (send\n        (const nil :Time) :now) :-\n      (send nil :started_at))) :%\n  (int 3600)) round ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send nil :started_at)) % ","Time  now - "," started_at ","Time  now "," iteration_rate nil? "]}," Bundler Resolver after_resolution":{"type":"method","name":"after_resolution","children":[],"call":["Bundler  ui info ","Bundler  ui "]}," Bundler Resolver before_resolution":{"type":"method","name":"before_resolution","children":[],"call":["Bundler  ui info ","Bundler  ui "," debug? "]}," Bundler Resolver debug?":{"type":"method","name":"debug?","children":[],"call":["ENV  [] "]}," Bundler Resolver SpecGroup platforms_for_dependency_named":{"type":"method","name":"platforms_for_dependency_named","children":[],"call":["(send\n  (send nil :__dependencies) :select) keys ","deps map include? ","deps map "," __dependencies select "," __dependencies "]}," Bundler Resolver SpecGroup dependencies_for_activated_platforms":{"type":"method","name":"dependencies_for_activated_platforms","children":[],"call":["(send\n  (ivar :@activated) :map) flatten "," __dependencies [] "," __dependencies ","@activated map ","dependencies concat flatten ","dependencies concat "," metadata_dependencies ","@specs [] ","@activated_platforms map ","@dependencies [] "," activated_platforms ","@specs [] first ","(send\n  (ivar :@specs) :map) flatten uniq ","(send\n  (ivar :@specs) :map) flatten "," __dependencies + ","@specs map "]}," Bundler Resolver VersionConflict message":{"type":"method","name":"message","children":[],"call":["o << "," clean_req ","conflict requirement ","conflict requirement_trees first [] ","conflict requirement_trees first ","conflict requirement_trees ","conflict requirement_trees first size > ","conflict requirement_trees first size ","conflict existing ! ","conflict existing ","conflict locked_requirement ","conflict requirement name == ","conflict requirement name ","conflict requirement requirement satisfied_by? ! ","conflict requirement requirement satisfied_by? ","Gem Version  new ","conflict requirement requirement ","(send\n  (send\n    (lvar :conflict) :requirement_trees) :map) join ","t << ","tree [] == ","tree [] ","t << << ","   * ","tree each ","conflict requirement_trees map "," conflicts values flatten reduce "," conflicts values flatten "," conflicts values "," conflicts ","name == ","(send\n  (block\n    (send\n      (send\n        (lvar :conflict) :requirement_trees) :sort_by)\n    (args\n      (arg :t))\n    (send\n      (send\n        (lvar :t) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","spec version ","conflict activated_by_name [] ","req name ","conflict activated_by_name ","tree last == ","tree last ","req to_s ","(send\n  (send\n    (lvar :conflict) :requirement_trees) :sort_by) map ","t reverse map ","t reverse ","conflict requirement_trees sort_by "," printable_dep ","Bundler  default_lockfile basename ","Bundler  default_lockfile "," conflicts sort reduce "," conflicts sort ","String  new ","(send\n  (send\n    (send nil :conflicts) :sort) :reduce\n  (send\n    (const nil :String) :new)) strip ","(send\n  (block\n    (send\n      (lvar :trees) :sort_by)\n    (args\n      (arg :t))\n    (send\n      (send\n        (lvar :t) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","(send\n  (lvar :trees) :sort_by) map ","trees sort_by ","maximal include? ! ","maximal include? ","t last ","trees reject! ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by ","Bundler VersionRanges  empty? ","Bundler VersionRanges  for_many ","deps map ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :trees) :size)) :map) flatten select ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :trees) :size)) :map) flatten ","trees map flatten combination to_a ","trees map flatten combination ","trees map flatten ","trees map ","1 upto map ","1 upto ","trees size ","conflicString  new  requiremenString  new  ","conflicString  new  requiremenString  new _String  new rees firsString  new  [] ","conflict requirement_conflict requirement_trees  first [] ","conflicString  new  requiremenString  new _String  new rees firsString  new  ","conflict requirement_conflict requirement_trees  first ","conflicString  new  requiremenString  new _String  new rees ","conflict requirement_conflict requirement_trees  ","conflicString  new  requiremenString  new _String  new rees firsString  new  size > ","conflict requirement_conflict requirement_trees  first size > ","conflicString  new  requiremenString  new _String  new rees firsString  new  size ","conflict requirement_conflict requirement_trees  first size ","conflicString  new  exisString  new ing ! ","conflicString  new  exisString  new ing ","conflicString  new  locked_requiremenString  new  ","conflicString  new  requiremenString  new  name == ","conflicString  new  requiremenString  new  name ","conflicString  new  requiremenString  new  requiremenString  new  saString  new isfied_by? ! ","conflicString  new  requiremenString  new  requiremenString  new  saString  new isfied_by? ","conflicString  new  requiremenString  new  requiremenString  new  ","(send\n  (send\n    (lvar :conflicString  new ) :requiremenString  new _String  new rees) :map) join ","(send\n  (send\n    (lvar :conflict) :requirement_conflict requirement_trees ) :map) join ","String  new  << ","String  new ree [] == ","String  new ree [] ","String  new  << << ","String  new ree each ","conflicString  new  requiremenString  new _String  new rees map ","conflict requirement_conflict requirement_trees  map "," conflicString  new s values flaString  new String  new en reduce "," conflicString  new s values flaString  new String  new en "," conflicString  new s values "," conflicString  new s ","(send\n  (block\n    (send\n      (send\n        (lvar :conflicString  new ) :requiremenString  new _String  new rees) :sorString  new _by)\n    (args\n      (arg :String  new ))\n    (send\n      (send\n        (lvar :String  new ) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","(send\n  (block\n    (send\n      (send\n        (lvar :conflict) :requirement_conflict requirement_trees ) :sort_by)\n    (args\n      (arg :t))\n    (send\n      (send\n        (lvar :t) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","conflict activated_by_name []  version ","conflicString  new  acString  new ivaString  new ed_by_name [] ","conflicString  new  acString  new ivaString  new ed_by_name ","String  new ree lasString  new  == ","String  new ree lasString  new  ","req String  new o_s ","(send\n  (send\n    (lvar :conflicString  new ) :requiremenString  new _String  new rees) :sorString  new _by) map ","(send\n  (send\n    (lvar :conflict) :requirement_conflict requirement_trees ) :sort_by) map ","String  new  reverse map ","String  new  reverse ","conflicString  new  requiremenString  new _String  new rees sorString  new _by ","conflict requirement_conflict requirement_trees  sort_by "," prinString  new able_dep ","Bundler  defaulString  new _lockfile basename ","Bundler  defaulString  new _lockfile "," conflicString  new s sorString  new  reduce "," conflicString  new s sorString  new  ","SString  new ring  new ","(send\n  (send\n    (send nil :conflicString  new s) :sorString  new ) :reduce\n  (send\n    (consString  new  nil :SString  new ring) :new)) sString  new rip ","(send\n  (block\n    (send\n      (lvar :String  new rees) :sorString  new _by)\n    (args\n      (arg :String  new ))\n    (send\n      (send\n        (lvar :String  new ) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","(send\n  (block\n    (send\n      (lvar :conflict requirement_trees ) :sort_by)\n    (args\n      (arg :t))\n    (send\n      (send\n        (lvar :t) :reverse) :map\n      (block-pass\n        (sym :name)))) :map) join ","(send\n  (lvar :String  new rees) :sorString  new _by) map ","(send\n  (lvar :conflict requirement_trees ) :sort_by) map ","String  new rees sorString  new _by ","conflict requirement_trees  sort_by ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by  include? ! ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by  include? ","String  new  lasString  new  ","String  new rees rejecString  new ! ","conflict requirement_trees  reject! ","(send\n  (send\n    (block\n      (send\n        (send\n          (inString  new  1) :upString  new o\n          (send\n            (lvar :String  new rees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :String  new rees) :map\n              (block-pass\n                (sym :lasString  new ))) :flaString  new String  new en\n            (inString  new  1)) :combinaString  new ion\n          (lvar :size)) :String  new o_a)) :flaString  new String  new en\n    (inString  new  1)) :selecString  new ) min_by ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :conflict requirement_trees ) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :conflict requirement_trees ) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by ","Bundler VersionRanges  empString  new y? ","(send\n  (send\n    (inString  new  1) :upString  new o\n    (send\n      (lvar :String  new rees) :size)) :map) flaString  new String  new en selecString  new  ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :conflict requirement_trees ) :size)) :map) flatten select ","(send\n  (send\n    (inString  new  1) :upString  new o\n    (send\n      (lvar :String  new rees) :size)) :map) flaString  new String  new en ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :conflict requirement_trees ) :size)) :map) flatten ","String  new rees map flaString  new String  new en combinaString  new ion String  new o_a ","conflict requirement_trees  map flatten combination to_a ","String  new rees map flaString  new String  new en combinaString  new ion ","conflict requirement_trees  map flatten combination ","String  new rees map flaString  new String  new en ","conflict requirement_trees  map flatten ","String  new rees map ","conflict requirement_trees  map ","1 upString  new o map ","1 upString  new o ","String  new rees size ","conflict requirement_trees  size "]}," Bundler Resolver VersionConflict clean_req":{"type":"method","name":"clean_req","children":[],"call":["req to_s gsub ","req to_s ","req to_s include? "]}," Bundler StubSpecification _remote_specification":{"type":"method","name":"_remote_specification","children":[],"call":[" stub to_spec "," stub ","rs source= "," source "," raise "," version "," name "," loaded_from "," full_name ","Bundler  rubygems stub_set_spec ","Bundler  rubygems ","Gem Specification  load ","rs equal? ","Gem Specification  load  source= "," stub to_spec  source= "," veGem Specification  load ion "," ve stub to_spec ion ","Gem Specification  load  equal? "," stub to_spec  equal? "]}," Bundler StubSpecification to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" _remote_specification to_yaml "," _remote_specification "]}," Bundler StubSpecification from_stub":{"type":"method","name":"from_stub","children":[],"call":[]}," Bundler LockfileParser parse_bundled_with":{"type":"method","name":"parse_bundled_with","children":[],"call":["Gem Version  create ","Gem Version  correct? ","line strip ","line [] ","line strip  strip ","line []  strip ","line strip  [] ","line []  [] "]}," Bundler LockfileParser warn_for_outdated_bundler_version":{"type":"method","name":"warn_for_outdated_bundler_version","children":[],"call":["Bundler  ui warn ","Bundler  ui ","current_version < "," bundler_version "," raise "," bundler_version segments first "," bundler_version segments ","current_version segments first <=> ","current_version segments first ","current_version segments ","Gem Version  create "," bundler_version prerelease? ","Gem Version  new < ","Gem Version  new "," bundler_version segments last == "," bundler_version segments last ","Gem Version  create  < ","Gem Version  create  segments first <=> ","Gem Version  create  segments first ","Gem Version  create  segments "]}," Bundler LazySpecification identifier":{"type":"method","name":"identifier","children":[],"call":["(send nil :name) hash "," dependencies "," platform "," source "," version "," name ","Identifier  new "," platform_string "," platform to_s "]}," Bundler Installer create_bundle_path":{"type":"method","name":"create_bundle_path","children":[],"call":[" raise ","(str \"Could not install to path `\") + ","Bundler  settings [] ","Bundler  settings ","Bundler  mkdir_p ","Bundler  bundle_path to_s ","Bundler  bundle_path ","Bundler  bundle_path exist? ","SharedHelpers  filesystem_access "]}," Bundler Installer install_in_parallel":{"type":"method","name":"install_in_parallel","children":[],"call":["ParallelInstaller  call "," specs "," post_install_messages []= ","installation post_install_message ","installation name "," post_install_messages ","installation has_post_install_message? ","spec_installations each ","@definition specs ","worker_pool stop ","enqueued []= ","worker_pool enq ","deps empty? ","dep type != ","dep type ","remains [] ","dep name ","spec dependencies select ","spec dependencies ","name2spec [] ","enqueued [] ","remains keys each ","remains keys ","Installer  post_install_messages []= ","message [] ","Installer  post_install_messages ","remains delete ","worker_pool deq ","remains empty? ","spec name "," specs each ","ParallelWorkers  worker_pool "," install_gem_from_spec "," lambda ","remains []= ","name2spec []= "," check_rubygems_cache_dir "," ready_to_install? ","enqueue_remaining_specs call ","Worker  new "," name2spec [] s "," post_install_worker_pool deq s []= "," post_install_ install_gem_from_spec s []= ","installation post_install_worker_pool deq  ","installation post_install_ install_gem_from_spec  "," post_install_worker_pool deq s "," post_install_ install_gem_from_spec s ","installation has_post_install_worker_pool deq ? ","installation has_post_install_ install_gem_from_spec ? ","ParallelInstaller  call  each ","name2spec [] _installations each ","@definition name2spec [] s ","ParallelWorkers  worker_pool  stop ","Worker  new  stop ","ParallelWorkers  worker_pool  enq ","Worker  new  enq ","name2spec []  dependencies select ","name2spec []  dependencies ","name2name2spec []  [] ","Installer  post_install_worker_pool deq s []= ","Installer  post_install_ install_gem_from_spec s []= ","worker_pool deq  [] "," install_gem_from_spec  [] ","Installer  post_install_worker_pool deq s ","Installer  post_install_ install_gem_from_spec s ","ParallelWorkers  worker_pool  deq ","Worker  new  deq ","name2spec []  name "," name2spec [] s each ","ParallelWorkers  ParallelWorkers  worker_pool  ","ParallelWorkers  Worker  new  "," install_gem_from_name2spec []  ","name2name2spec []  []= ","enqueue_remaining_name2spec [] s call "]}," Bundler Installer install_sequentially":{"type":"method","name":"install_sequentially","children":[],"call":["Installer  post_install_messages []= ","spec name ","Installer  post_install_messages "," install_gem_from_spec "," specs each "," specs ","Installer  post_install_ install_gem_from_spec s []= ","Installer  post_install_ install_gem_from_spec s "]}," Bundler Installer can_install_in_parallel?":{"type":"method","name":"can_install_in_parallel?","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  rubygems provides? ","Bundler  rubygems ","Bundler  current_ruby mri? ","Bundler  current_ruby "]}," ParallelInstaller enqueue_specs":{"type":"method","name":"enqueue_specs","children":[],"call":["spec state= "," worker_pool enq "," worker_pool ","spec dependencies_installed? ","@specs select each ","@specs select "]}," ParallelInstaller collect_post_install_message":{"type":"method","name":"collect_post_install_message","children":[],"call":["Bundler Installer  post_install_messages []= ","spec post_install_message ","spec name ","Bundler Installer  post_install_messages "]}," ParallelInstaller process_specs":{"type":"method","name":"process_specs","children":[],"call":[" enqueue_specs "," collect_post_install_message ","spec has_post_install_message? ","spec state= "," worker_pool deq "," worker_pool "," enqueue_ worker_pool deq s "," worker_pool deq  has_post_install_message? "," worker_pool deq  state= "]}," ParallelInstaller worker_pool":{"type":"method","name":"worker_pool","children":[],"call":["Bundler Worker  new ","spec_install post_install_message= ","message nil? ","@installer install_gem_from_spec ","spec_install spec "," lambda ","Bundler GemInstaller  new install_from_spec ","Bundler GemInstaller  new ","spec_install post_install_@installer install_gem_from_spec = ","spec_install post_install_Bundler GemInstaller  new install_from_spec = ","@installer install_gem_from_spec  nil? ","Bundler GemInstaller  new install_from_spec  nil? "]}," ParallelInstaller call":{"type":"method","name":"call","children":[],"call":[" worker_pool stop "," worker_pool "," process_specs ","@specs all? "," enqueue_specs "]}," ParallelInstaller initialize":{"type":"method","name":"initialize","children":[],"call":["SpecInstallation  new ","all_specs map "]}," ParallelInstaller max_threads":{"type":"method","name":"max_threads","children":[],"call":[]}," ParallelInstaller SpecInstallation all_dependencies":{"type":"method","name":"all_dependencies","children":[],"call":["@spec dependencies "]}," ParallelInstaller SpecInstallation dependencies":{"type":"method","name":"dependencies","children":[],"call":[" ignorable_dependency? "," all_dependencies reject "," all_dependencies "," raise ","missing map join ","missing map ","missing size > ","missing size ","all_spec_names include? ","dep name ","deps reject ","missing empty? "]}," ParallelInstaller SpecInstallation dependencies_installed?":{"type":"method","name":"dependencies_installed?","children":[],"call":["already_installed [] "," dependencies all? "," dependencies ","installed_specs include? ","dep name "," lambda ","remaining_specs reject map ","remaining_specs reject ","d name ","all_specs select map ","all_specs select ","all_specs map ","remaining_specs reject map  include? ","all_specs select map  include? "]}," ParallelInstaller SpecInstallation ignorable_dependency?":{"type":"method","name":"ignorable_dependency?","children":[],"call":["dep name == ","dep name ","dep type == ","dep type "]}," ParallelInstaller SpecInstallation has_post_install_message?":{"type":"method","name":"has_post_install_message?","children":[],"call":[" post_install_message empty? ! "," post_install_message empty? "," post_install_message "]}," ParallelInstaller SpecInstallation ready_to_enqueue?":{"type":"method","name":"ready_to_enqueue?","children":[],"call":[" enqueued? ! "," enqueued? "," installed? ! "," installed? "]}," ParallelInstaller SpecInstallation enqueued?":{"type":"method","name":"enqueued?","children":[],"call":[" state == "," state "]}," ParallelInstaller SpecInstallation installed?":{"type":"method","name":"installed?","children":[],"call":[" state == "," state "]}," ParallelInstaller SpecInstallation initialize":{"type":"method","name":"initialize","children":[],"call":["spec name "]}," gemfile":{"type":"method","name":"gemfile","children":[{"type":"method","name":"root","children":[],"asgn":[],"call":[]},{"type":"method","name":"lock","children":[],"asgn":[],"call":[]}],"call":["bundler_module send ","runtime setup require ","runtime setup ","runtime setup_environment ","Bundler Runtime  new ","Bundler  ui info ","Bundler  ui ","Bundler Installer  post_install_messages each ","Bundler Installer  post_install_messages ","Bundler Installer  install ","Bundler  root ","Bundler  ui= ","Bundler UI Shell  new ","definition validate_ruby! ","builder to_definition ","builder instance_eval ","Bundler Dsl  new ","ENV  [] ","Pathname  pwd expand_path ","Pathname  pwd ","Bundler  method "," require ","Bundler SharedHelpers  pwd expand_path ","Bundler SharedHelpers  pwd "," raise ","opts keys join ","opts keys ","opts empty? ","opts delete ","options dup ","installer post_install_messages each ","installer post_install_messages ","missing_specs call ","definition instance_variable_set ","definition missing_specs empty? ! ","definition missing_specs empty? ","definition missing_specs "," proc ","Bundler Plugin  gemfile_install ","Bundler  settings [] ","Bundler  settings ","definition validate_runtime! ","Bundler  feature_flag plugins? ","Bundler  feature_flag ","ENV  []= ","Bundler  settings temporary ","definition missing_specs? ","Bundler SharedHelpers  set_env ","ENV  delete ","Bundler UI Silent  new ","ui level= "," require_relative ","builder check_primary_source_safety ","Bundler  instance_variable_set ","Pathname  new ","Gem  dir ","install ! ","ENV  [] nil? ","Bundler  with_unbundled_env ","Bundler  reset! ","Bundler Runtime  new  setup require ","Bundler Runtime  new  setup ","Bundler Runtime  new  setup_environment ","builder to_definition  validate_ruby! ","builder to_builder to_definition  ","Bundler Dsl  new  to_definition ","Bundler Dsl  new  instance_eval ","options dup  keys join ","options dup  keys ","options dup  empty? ","options dup  delete ","Bundler Installer  install  post_install_messages each ","Bundler Installer  install  post_install_messages ","builder to_definition  instance_variable_set ","builder to_definition  missing_specs empty? ! ","builder to_definition  missing_specs empty? ","builder to_definition  missing_specs ","definition validate_Bundler Runtime  new ! ","builder to_definition  validate_runtime! ","builder to_definition  missing_specs? ","Bundler Dsl  new  check_primary_source_safety "]}," Bundler Injector append_to":{"type":"method","name":"append_to","children":[],"call":["f puts "," new_gem_lines ","(str \"whoami\") chomp ","Time  now ","gemfile_path open ","@options [] nil? ","@options [] "]}," Bundler Injector new_gem_lines":{"type":"method","name":"new_gem_lines","children":[],"call":["(send\n  (ivar :@new_deps) :map) join ","d requirement ","d name ","@new_deps map ","d source ","d source nil? ","d groups inspect ","d groups ","d groups != "," Array "]}," Bundler Injector inject":{"type":"method","name":"inject","children":[],"call":["Bundler  settings []= ","Bundler  settings ","definition lock ","Bundler  default_lockfile "," append_to ","@new_deps any? ","definition resolve_remotely! ","builder to_definition ","builder eval_gemfile "," new_gem_lines ","builder dependencies ","Dsl  new ","Bundler  settings delete ","Bundler  definition ensure_equivalent_gemfile_and_lockfile ","Bundler  definition ","Bundler  settings [] ","@definition lock "," build_gem_lines ","@options [] ","@definition resolve_remotely! ","Bundler  reset_paths! ","Bundler  settings temporary ","Bundler  frozen? ","Bundler  frozen_bundle? ","@deps any? ","builder to_definition  lock ","builder to_definition  resolve_remotely! ","builder to_builder to_definition  ","Dsl  new  to_definition ","Dsl  new  eval_gemfile ","Dsl  new  dependencies ","Bundler  builder to_definition  ensure_equivalent_gemfile_and_lockfile ","Bundler  builder to_definition  ","@builder to_definition  lock ","@builder to_definition  resolve_remotely! ","Bundler  Bundler  settings delete ? ","Bundler  Bundler  settings delete _bundle? "]}," Bundler Injector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Index dependency_names":{"type":"method","name":"dependency_names","children":[],"call":["names uniq ","names push ","d name ","s dependencies map ","s dependencies "," each ","names concat ","names << ","dep name ","dep type == ","dep type ","spec dependencies each ","spec dependencies "]}," Bundler Index search_all":{"type":"method","name":"search_all","children":[],"call":["all_matches concat ","source search_all ","@sources each ","@all_specs [] + "," local_search ","@all_specs [] "," local_search + ","@all_specs [] +  concat "," local_search +  concat "]}," Bundler Graph _patching_gem_dependency_class":{"type":"method","name":"_patching_gem_dependency_class","children":[{"type":"method","name":"matching_specs","children":[],"asgn":[null,null],"call":["s sort_obj ","matches sort_by ","Gem Platform  match ! ","Gem Platform  match ","spec platform ","matches reject! "," requirement satisfied_by? ","spec version "," requirement "," name == ","spec name "," name ","Bundler  load specs select ","Bundler  load specs ","Bundler  load "]}],"call":["s sort_obj ","matches sort_by ","Gem Platform  match ! ","Gem Platform  match ","spec platform ","matches reject! "," requirement satisfied_by? ","spec version "," requirement "," name == ","spec name "," name ","Bundler  load specs select ","Bundler  load specs ","Bundler  load ","Gem Dependency  class_eval ","matches select! "," name === ","matches sort_by  sort_by ","matches sort_by  reject! ","matches sort_by  select! "]}," Bundler preserve_gem_path":{"type":"method","name":"preserve_gem_path","children":[],"call":[]}," Bundler GemHelper gem_push?":{"type":"method","name":"gem_push?","children":[],"call":["(str \"n\") include? ! ","(str \"n\") include? ","ENV  [] to_s downcase ","ENV  [] to_s ","ENV  [] "]}," Bundler GemHelper committed?":{"type":"method","name":"committed?","children":[],"call":[" sh_with_code [] == "," sh_with_code [] "," sh_with_code "," sh_with_status [] success? "," sh_with_status [] "," sh_with_status "]}," Bundler GemHelper already_tagged?":{"type":"method","name":"already_tagged?","children":[],"call":["Bundler  ui confirm "," version_tag ","Bundler  ui "," sh split include? "," sh split "," sh "]}," Bundler GemHelper gemspec":{"type":"method","name":"gemspec","children":[],"call":["block call "," instance gemspec "," instance "," instance  instance gemspec  "]}," Bundler issues_url":{"type":"method","name":"issues_url","children":[],"call":[]}," Bundler request_issue_report_for":{"type":"method","name":"request_issue_report_for","children":[],"call":[]}," Bundler with_friendly_errors":{"type":"method","name":"with_friendly_errors","children":[],"call":[]}," Bundler Fetcher downloader":{"type":"method","name":"downloader","children":[],"call":["Downloader  new "," class redirect_limit "," class "," connection "]}," Bundler Fetcher remote_uri":{"type":"method","name":"remote_uri","children":[],"call":["@remote uri ","@anonymizable_uri original_uri "]}," Bundler Fetcher fetch_uri":{"type":"method","name":"fetch_uri","children":[],"call":[" remote_uri ","uri host= "," remote_uri dup "," remote_uri host == "," remote_uri host ","@remote_uri dup ","@remote_uri host == ","@remote_uri host "," remote_ remote_uri dup  "," remote_@remote_uri dup  "," remote_uri dup  host= ","@remote_uri dup  host= "," remote_ remote_uri dup  dup "," remote_@remote_uri dup  dup "," remote_ remote_uri dup  host == "," remote_@remote_uri dup  host == "," remote_ remote_uri dup  host "," remote_@remote_uri dup  host ","@remote_ remote_uri dup  dup ","@remote_@remote_uri dup  dup ","@remote_ remote_uri dup  host == ","@remote_@remote_uri dup  host == ","@remote_ remote_uri dup  host ","@remote_@remote_uri dup  host "]}," Bundler Fetcher bundler_cert_store":{"type":"method","name":"bundler_cert_store","children":[],"call":["store add_file ","Dir  glob each ","Dir  glob ","File  expand_path ","store set_default_paths ","Bundler  settings [] ","Bundler  settings ","store add_path ","File  directory? ","OpenSSL X509 Store  new ","Bundler  rubygems configuration ssl_ca_cert ","Bundler  rubygems configuration ","Bundler  rubygems ","Bundler  rubygems configuration respond_to? ","Gem Request  get_cert_files each ","Gem Request  get_cert_files ","Gem  configuration ssl_ca_cert ","Gem  configuration ","Gem  configuration respond_to? ","OpenSSL X509 Store  new  add_file ","OpenSSL X509 Store  new  set_default_paths ","OpenSSL X509 Store  new  add_path "]}," Bundler Fetcher gemspec_cached_path":{"type":"method","name":"gemspec_cached_path","children":[],"call":["paths first ","File  file? ","paths select ","File  join ","Bundler  rubygems spec_cache_dirs map ","Bundler  rubygems spec_cache_dirs ","Bundler  rubygems ","paths find "]}," Bundler Fetcher connection":{"type":"method","name":"connection","children":[],"call":["con override_headers []= "," user_agent ","con override_headers ","con read_timeout= ","Fetcher  api_timeout ","con key= ","OpenSSL PKey RSA  new ","con cert= ","OpenSSL X509 Certificate  new ","File  read ","Bundler  settings [] ","Bundler  settings ","con cert_store= "," bundler_cert_store ","con verify_mode= "," remote_uri scheme == "," remote_uri scheme "," remote_uri ","Net HTTP Persistent  new "," raise ","(const\n  (const nil :OpenSSL) :SSL) ! ","@remote original_uri to_s ","@remote original_uri ","con proxy= ","URI  parse ","Bundler  rubygems configuration [] ","Bundler  rubygems configuration ","Bundler  rubygems ","gem_proxy != ","con open_timeout= ","Bundler Persistent Net HTTP Persistent  new ","Bundler  rubygems configuration ssl_client_cert ","Bundler  rubygems configuration respond_to? ","PersistentHTTP  new ","@connection override_headers []= "," class user_agent "," class ","@connection override_headers ","@connection read_timeout= ","@connection key= ","@connection cert= ","@connection cert_store= ","@connection verify_mode= ","@remote_uri scheme == ","@remote_uri scheme ","(const nil :OpenSSL) ! ","Bundler URI  parse ","Gem  configuration ssl_client_cert ","Gem  configuration ","Gem  configuration respond_to? ","Gem  configuration [] ","Net HTTP Persistent  new  override_headers []= ","Bundler Persistent Net HTTP Persistent  new  override_headers []= ","PersistentHTTP  new  override_headers []= ","Net HTTP Persistent  new  override_headers ","Bundler Persistent Net HTTP Persistent  new  override_headers ","PersistentHTTP  new  override_headers ","Net HTTP Persistent  new  read_timeout= ","Bundler Persistent Net HTTP Persistent  new  read_timeout= ","PersistentHTTP  new  read_timeout= ","Net HTTP Persistent  new  key= ","Bundler Persistent Net HTTP Persistent  new  key= ","PersistentHTTP  new  key= ","Net HTTP Persistent  new  cert= ","Bundler Persistent Net HTTP Persistent  new  cert= ","PersistentHTTP  new  cert= ","Net HTTP Persistent  new  cert_store= ","Bundler Persistent Net HTTP Persistent  new  cert_store= ","PersistentHTTP  new  cert_store= ","Net HTTP Persistent  new  verify_mode= ","Bundler Persistent Net HTTP Persistent  new  verify_mode= ","PersistentHTTP  new  verify_mode= ","(Net HTTP Persistent  new st\n  (Net HTTP Persistent  new st nil :OpenSSL) :SSL) ! ","(Bundler Persistent Net HTTP Persistent  new st\n  (Bundler Persistent Net HTTP Persistent  new st nil :OpenSSL) :SSL) ! ","(PersistentHTTP  new st\n  (PersistentHTTP  new st nil :OpenSSL) :SSL) ! ","Net HTTP Persistent  new  proxy= ","Bundler Persistent Net HTTP Persistent  new  proxy= ","PersistentHTTP  new  proxy= ","Bundler  rubygems Net HTTP Persistent  new figuration [] ","Bundler  rubygems Bundler Persistent Net HTTP Persistent  new figuration [] ","Bundler  rubygems PersistentHTTP  new figuration [] ","Bundler  rubygems Net HTTP Persistent  new figuration ","Bundler  rubygems Bundler Persistent Net HTTP Persistent  new figuration ","Bundler  rubygems PersistentHTTP  new figuration ","Bundler  rubygems configuration []  != ","Gem  configuration []  != ","Net HTTP Persistent  new  open_timeout= ","Bundler Persistent Net HTTP Persistent  new  open_timeout= ","PersistentHTTP  new  open_timeout= ","Bundler  rubygems Net HTTP Persistent  new figuration ssl_client_cert ","Bundler  rubygems Bundler Persistent Net HTTP Persistent  new figuration ssl_client_cert ","Bundler  rubygems PersistentHTTP  new figuration ssl_client_cert ","Bundler  rubygems Net HTTP Persistent  new figuration respond_to? ","Bundler  rubygems Bundler Persistent Net HTTP Persistent  new figuration respond_to? ","Bundler  rubygems PersistentHTTP  new figuration respond_to? ","@Net HTTP Persistent  new nection override_headers []= ","@Bundler Persistent Net HTTP Persistent  new nection override_headers []= ","@PersistentHTTP  new nection override_headers []= ","@Net HTTP Persistent  new nection override_headers ","@Bundler Persistent Net HTTP Persistent  new nection override_headers ","@PersistentHTTP  new nection override_headers ","@Net HTTP Persistent  new nection read_timeout= ","@Bundler Persistent Net HTTP Persistent  new nection read_timeout= ","@PersistentHTTP  new nection read_timeout= ","@Net HTTP Persistent  new nection key= ","@Bundler Persistent Net HTTP Persistent  new nection key= ","@PersistentHTTP  new nection key= ","@Net HTTP Persistent  new nection cert= ","@Bundler Persistent Net HTTP Persistent  new nection cert= ","@PersistentHTTP  new nection cert= ","@Net HTTP Persistent  new nection cert_store= ","@Bundler Persistent Net HTTP Persistent  new nection cert_store= ","@PersistentHTTP  new nection cert_store= ","@Net HTTP Persistent  new nection verify_mode= ","@Bundler Persistent Net HTTP Persistent  new nection verify_mode= ","@PersistentHTTP  new nection verify_mode= ","(Net HTTP Persistent  new st nil :OpenSSL) ! ","(Bundler Persistent Net HTTP Persistent  new st nil :OpenSSL) ! ","(PersistentHTTP  new st nil :OpenSSL) ! ","Gem  Net HTTP Persistent  new figuration ssl_client_cert ","Gem  Bundler Persistent Net HTTP Persistent  new figuration ssl_client_cert ","Gem  PersistentHTTP  new figuration ssl_client_cert ","Gem  Net HTTP Persistent  new figuration ","Gem  Bundler Persistent Net HTTP Persistent  new figuration ","Gem  PersistentHTTP  new figuration ","Gem  Net HTTP Persistent  new figuration respond_to? ","Gem  Bundler Persistent Net HTTP Persistent  new figuration respond_to? ","Gem  PersistentHTTP  new figuration respond_to? ","Gem  Net HTTP Persistent  new figuration [] ","Gem  Bundler Persistent Net HTTP Persistent  new figuration [] ","Gem  PersistentHTTP  new figuration [] "]}," Bundler Fetcher cis":{"type":"method","name":"cis","children":[],"call":["(send\n  (lvar :env_cis) :find_all) map ","ENV  [] ","env_cis find_all "]}," Bundler Fetcher inspect":{"type":"method","name":"inspect","children":[],"call":[" uri "," object_id "," class ","@public_uri to_s "]}," Bundler Fetcher fetchers":{"type":"method","name":"fetchers","children":[],"call":["f new "," uri "," fetch_uri "," remote_uri "," downloader ","FETCHERS  map "]}," Bundler Fetcher user_agent":{"type":"method","name":"user_agent","children":[],"call":["agent << << ","agent << ","Bundler  settings [] ","Bundler  settings ","SecureRandom  hex "," cis join "," cis "," cis any? ","Bundler  settings all join ","Bundler  settings all ","ruby engine ","ruby engine_version ","ruby engine != ","ARGV  first ","ruby host ","ruby version ","Bundler  ruby_version ","ruby versions_string ","ruby engine_versions ","ruby versions ","String  new ","Bundler RubyVersion  system ","String  new  << << ","String  new  << ","Bundler  ruby_version  engine ","Bundler RubyVersion  system  engine ","Bundler  ruby_version  engine_version ","Bundler RubyVersion  system  engine_version ","Bundler  ruby_version  engine != ","Bundler RubyVersion  system  engine != ","Bundler  ruby_version  host ","Bundler RubyVersion  system  host ","Bundler  ruby_version  version ","Bundler RubyVersion  system  version ","Bundler  Bundler  ruby_version _version ","Bundler  Bundler RubyVersion  system _version ","Bundler  ruby_version  versions_string ","Bundler RubyVersion  system  versions_string ","Bundler  ruby_version  engine_versions ","Bundler RubyVersion  system  engine_versions ","Bundler  ruby_version  versions ","Bundler RubyVersion  system  versions "]}," Bundler Fetcher use_api":{"type":"method","name":"use_api","children":[],"call":[" fetchers any? "," fetchers ","f api_available? ! ","f api_available? ","f api_fetcher? "," fetchers reject! ","Bundler Fetcher  disable_endpoint "," remote_uri scheme == "," remote_uri scheme "," remote_uri "," fetchers first api_fetcher? "," fetchers first "," fetchers shift "," fetchers first available? "," fetch "," dependency_api_uri ","@remote_uri scheme == ","@remote_uri scheme "," _use_api "," retry_with_auth "," raise ","e message "]}," Bundler Fetcher uri":{"type":"method","name":"uri","children":[],"call":["@remote anonymized_uri ","@anonymizable_uri without_credentials ","@anonymizable_uri nil? "]}," Bundler Fetcher BadAuthenticationError initialize":{"type":"method","name":"initialize","children":[],"call":[" filter_uri "]}," Bundler Fetcher AuthenticationRequiredError initialize":{"type":"method","name":"initialize","children":[],"call":[" filter_uri ","Settings  key_for "]}," Bundler Fetcher SSLError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Fetcher CertificateFailureError initialize":{"type":"method","name":"initialize","children":[],"call":[" filter_uri "]}," Bundler Fetcher Index specs":{"type":"method","name":"specs","children":[],"call":["Bundler  rubygems sources= ","Bundler  rubygems "," raise "," display_uri ","Bundler  ui trace ","Bundler  ui "," remote_uri "," remote_uri userinfo ","CertificateFailureError  new ","e message ","Bundler  rubygems fetch_all_remote_specs "," remote_uri to_s ","Bundler  rubygems sources "," remote "]}," Bundler Fetcher Downloader request":{"type":"method","name":"request","children":[],"call":[" raise ","uri host ","e message ","Bundler  ui trace ","Bundler  ui ","CertificateFailureError  new "," connection request "," connection ","req basic_auth ","CGI  unescape ","uri password ","uri user ","Net HTTP Get  new ","uri request_uri ","Bundler  ui debug ","LoadError  new ","e message include? ","(str \"undefined method\") all? ","URICredentialsFilter  credential_filtered_uri "," validate_uri_scheme! ","e message =~ ","e is_a? ","e message to_s include? ","e message to_s "," connection Net HTTP Get  new uest ","Net HTTP Get  new  basic_auth ","uri CGI  unescape  ","uri Net HTTP Get  new uest_uri ","URICredentialsFilter  credential_URICredentialsFilter  credential_filtered_uri  "]}," Bundler Fetcher Downloader fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","response body ","response class ","uri host "," fetch ","counter + ","new_uri password= ","uri password ","new_uri user= ","uri user ","new_uri host == ","new_uri host ","URI  parse ","response [] ","Bundler  ui debug ","response message ","response code ","Bundler  ui "," request ","counter >= "," redirect_limit ","response body empty? ","new_headers []= ","new_headers delete ","headers dup ","URICredentialsFilter  credential_filtered_uri ","uri userinfo ","Bundler URI  parse "," request  body "," request  class ","URI  parse  password= ","Bundler URI  parse  password= ","URI  parse  user= ","Bundler URI  parse  user= ","URI  parse  host == ","Bundler URI  parse  host == ","URI  parse  host ","Bundler URI  parse  host "," request  [] "," request  message "," request  code "," request  body empty? ","headers dup  []= ","headers dup  delete ","URICredentialsFilter  credential_URICredentialsFilter  credential_filtered_uri  "]}," Bundler Fetcher Downloader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Fetcher Dependency well_formed_dependency":{"type":"method","name":"well_formed_dependency","children":[],"call":[" raise "," s [] "," s "," puts ","e message include? ","e message ","Gem Dependency  new "]}," Bundler Fetcher Dependency dependency_api_uri":{"type":"method","name":"dependency_api_uri","children":[],"call":["uri query= ","URI  encode ","gem_names join ","gem_names any? "," fetch_uri + "," fetch_uri ","CGI  escape ","gem_names sort join ","gem_names sort "," fetch_uri +  query= "," fetch_ fetch_uri +  + "," fetch_ fetch_uri +  "]}," Bundler Fetcher Dependency dependency_specs":{"type":"method","name":"dependency_specs","children":[],"call":["deps_list uniq ","s [] ","Gem Version  new ","deps_list << ","dep name "," well_formed_dependency ","requirement split ","s [] map ","gem_list map ","Bundler  load_marshal "," downloader fetch "," dependency_api_uri "," downloader ","gem_names each_slice ","Bundler  ui debug ","gem_names join ","Bundler  ui "," get_formatted_specs_and_deps "," unmarshalled_dep_gems "," well_formed_dependency s_list uniq "," well_formed_dependency s_list << "," well_formed_dependency  name "," well_formed_ well_formed_dependency endency "," unmarshalled_dep_gems  map ","  well_formed_dependency endency_api_uri "," get_formatted_specs_and_ well_formed_dependency s "," unmarshalled_ well_formed_dependency _gems "]}," Bundler Fetcher Dependency specs":{"type":"method","name":"specs","children":[],"call":["Bundler  ui debug ","Bundler  ui ","Bundler  ui info ","Bundler  ui debug? "," specs ","spec_list + ","full_dependency_list + ","spec_list map uniq ","spec_list map "," dependency_specs ","Bundler Retry  new attempts ","Bundler Retry  new "," remote_uri ","query_list empty? ","query_list inspect ","gem_names - "," log_specs ","gem_names uniq - ","gem_names uniq ","gem_names -  empty? ","gem_names uniq -  empty? ","gem_names -  inspect ","gem_names uniq -  inspect "]}," Bundler Fetcher Dependency api_fetcher?":{"type":"method","name":"api_fetcher?","children":[],"call":[]}," Bundler Fetcher Dependency api_available?":{"type":"method","name":"api_available?","children":[],"call":[" raise ","e message "," downloader fetch "," dependency_api_uri "," downloader "]}," Bundler Fetcher Base api_fetcher?":{"type":"method","name":"api_fetcher?","children":[],"call":[]}," Bundler Fetcher Base api_available?":{"type":"method","name":"api_available?","children":[],"call":[" api_fetcher? "]}," Bundler Fetcher Base initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," class == "," class "]}," Bundler Env git_version":{"type":"method","name":"git_version","children":[],"call":["Bundler Source Git GitProxy  new version ","Bundler Source Git GitProxy  new ","Bundler Source Git GitProxy  new full_version "]}," Bundler Env ruby_version":{"type":"method","name":"ruby_version","children":[],"call":["str << ","RUBY_VERSION  < ","String  new ","String  new  << "]}," Bundler Env read_file":{"type":"method","name":"read_file","children":[],"call":["e message ","e class ","File  read strip ","File  read ","filename to_s "]}," Bundler Env report":{"type":"method","name":"report","children":[],"call":["out << << << ","out << << "," read_file gsub "," read_file ","Bundler  default_lockfile ","out << ","Bundler  default_gemfile ","Bundler  settings pretty_values_for each ","Bundler  settings pretty_values_for ","Bundler  settings ","Bundler  settings all each ","Bundler  settings all ","Bundler  settings all empty? ","specs map join ","specs map ","specs empty? ","Bundler  rubygems find_name ","Bundler  rubygems ","(str \"rubygems-bundler\") each "," git_version ","ENV  [] ","ENV  [] == ","ENV  [] empty? ","ENV  [] nil? "," ruby_version ","options delete ","Pathname  new basename ","Pathname  new ","dsl gemspecs each ","dsl gemspecs ","d eval_gemfile ","Dsl  new tap ","Dsl  new ","Bundler  default_lockfile relative_path_from ","SharedHelpers  pwd ","Bundler  default_gemfile relative_path_from ","String  new ","gs loaded_from ","File  basename "," read_file chomp ","dsl gemspecs empty? ","SharedHelpers  in_bundle? ","Gem Platform  local ","s name == ","s name ","Gem Specification  find_all ","String  new  << << << ","String  new  << << ","String  new  << ","Bundler  rubygems find_name  map join ","Bundler  rubygems find_name  map ","Bundler  rubygems find_name  empty? ","dsl gemBundler  rubygems find_name  each ","dsl gemBundler  rubygems find_name  ","dsl gemBundler  rubygems find_name  empty? "]}," Bundler Env write":{"type":"method","name":"write","children":[],"call":["io write "," report "]}," Bundler Dsl DSLError parse_line_number_from_description":{"type":"method","name":"parse_line_number_from_description","children":[],"call":["description sub sub ","description sub ","Regexp  quote ","Regexp  last_match [] ","Regexp  last_match ","description =~ "," dsl_path to_s "," dsl_path ","File  expand_path "," description ","description sub sub sub ","description sub sub  sub sub "," description  sub sub ","description sub sub sub  sub sub ","description sub sub  sub "," description  sub ","description sub sub sub  sub ","description sub sub  =~ "," description  =~ ","description sub sub sub  =~ "," description sub sub  ","  description  "," description sub sub sub  ","description sub sub  sub sub sub "," description  sub sub sub ","description sub sub sub  sub sub sub "]}," Bundler Dsl DSLError message":{"type":"method","name":"message","children":[],"call":["m << ","m end_with? ","lines [] ","line_numer + ","line_numer - ","trace_line gsub ","line_numer == ","lines count - ","lines count ","line_numer zero? ","indent gsub "," contents lines to_a "," contents lines "," contents ","trace_line split [] to_i - ","trace_line split [] to_i ","trace_line split [] ","trace_line split ","l include? "," dsl_path to_s "," dsl_path "," backtrace find "," backtrace "," parse_line_number_from_description "," contents lines to_a  [] ","trace_line split [] to_i -  + ","trace_line split [] to_i -  - ","trace_line split [] to_i -  == "," contents lines to_a  count - "," contents lines to_a  count ","trace_line split [] to_i -  zero? "," contents  contents lines to_a  to_a "," contents  contents lines to_a  "]}," Bundler Dsl DSLError contents":{"type":"method","name":"contents","children":[],"call":["File  read "," dsl_path ","File  exist? "]}," Bundler Dsl DSLError status_code":{"type":"method","name":"status_code","children":[],"call":[]}," Bundler Dsl DSLError initialize":{"type":"method","name":"initialize","children":[],"call":["$! status_code ","$! respond_to? "]}," Bundler Dsl check_primary_source_safety":{"type":"method","name":"check_primary_source_safety","children":[],"call":["Bundler  ui warn ","Bundler  ui "," raise ","Bundler  settings [] ","Bundler  settings ","source rubygems_primary_remotes any? ","source rubygems_primary_remotes ","Bundler SharedHelpers  major_deprecation ","Bundler  feature_flag bundler_2_mode? ","Bundler  feature_flag ","Bundler  feature_flag disable_multisource? ","source_list global_rubygems_source nil? ","source_list global_rubygems_source ","source_list rubygems_primary_remotes empty? ","source_list rubygems_primary_remotes ","Bundler  feature_flag bundler_3_mode? "," check_rubygems_source_safety "," check_path_source_safety "]}," Bundler Dsl normalize_source":{"type":"method","name":"normalize_source","children":[],"call":[" raise ","Bundler  ui warn ","Bundler  ui ","Bundler SharedHelpers  major_deprecation "]}," Bundler Dsl validate_keys":{"type":"method","name":"validate_keys","children":[],"call":[" raise ","message << ","valid_keys join ","invalid_keys size > ","invalid_keys size ","(send\n  (lvar :invalid_keys) :map) join ",": + ","invalid_keys map ","invalid_keys any? ","opts keys - ","opts keys ","String  new ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (str \"git\"))\n    (send\n      (lvar :opts) :[]\n      (str \"github\")))\n  (send\n    (lvar :git_source) :any?)) ! ","git_source any? ","opts [] ","opts keys & ","@git_sources keys map ","@git_sources keys ","String  new  << ","opts keys -  size > ","opts keys -  size ","(send\n  (lvar :opts keys - ) :map) join ","opts keys -  map ","opts keys -  any? ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (str \"git\"))\n    (send\n      (lvar :opts) :[]\n      (str \"github\")))\n  (send\n    (lvar :opts keys & ) :any?)) ! ","opts keys &  any? ","@opts keys & s keys map ","@opts keys & s keys "]}," Bundler Dsl normalize_group_options":{"type":"method","name":"normalize_group_options","children":[],"call":["opts [] "," validate_keys ","(send\n  (lvar :groups) :map) join ","groups map "," normalize_hash ","(send\n  (lvar :(send\n  (lvar :groups) :map) join ) :map) join ","(send\n  (lvar :groups) :map) join  map "]}," Bundler Dsl normalize_options":{"type":"method","name":"normalize_options","children":[],"call":["opts []= ","platforms dup ","opts [] "," send ","opts dup ","opts merge ","version first =~ ","version first ","(str \"git\") each ","@git_sources [] call ","@git_sources [] ","(send\n  (lvar :git_names) :&\n  (send\n    (lvar :opts) :keys)) last ","git_names & ","opts keys ","@sources add_rubygems_source "," normalize_source ","opts has_key? "," raise ","VALID_PLATFORMS  inspect ","VALID_PLATFORMS  include? ","platforms each ","p to_sym ","platforms map! ","platforms concat "," Array ","opts delete ","@platforms dup ","val call ","val respond_to? ","install_if reduce ","install_if concat ","@install_conditionals dup ","groups empty? ","groups concat ","@groups dup "," validate_keys "," valid_keys + "," valid_keys ","@git_sources keys map ","@git_sources keys "," normalize_hash ","name =~ ","name is_a? ","opts key? ","name empty? ","message << "," valid_keys join ","invalid_keys size > ","invalid_keys size ","(send\n  (lvar :invalid_keys) :map) join ",": + ","invalid_keys map ","invalid_keys any? ","opts keys - ","name to_s ","opts [] inspect ","opts merge! ","git_opts is_a? ","(str \"\\\\s\") match? ","@platforms dup  dup ","@git_ normalize_source s [] call ","@git_ normalize_source s [] ","(send\n  (lvar :(send\n  (lvar :git_names) :&\n  (send\n    (lvar :opts) :keys)) last s) :&\n  (send\n    (lvar :opts) :keys)) last ","(send\n  (lvar :@git_sources keys map ) :&\n  (send\n    (lvar :opts) :keys)) last ","(send\n  (lvar :git_names) :&\n  (send\n    (lvar :opts) :keys)) last s & ","@git_sources keys map  & ","@ normalize_source s add_rubygems_ normalize_source  "," normalize_ normalize_source  ","@platforms dup  each ","@platforms dup  map! ","@platforms dup  concat ","@@platforms dup  dup ","@install_conditionals dup  reduce ","@install_conditionals dup  concat ","@groups dup  empty? ","@groups dup  concat ","@@groups dup  dup ","@git_ normalize_source s keys map ","@git_ normalize_source s keys ","opts keys -  size > ","opts keys -  size ","(send\n  (lvar :opts keys - ) :map) join ","opts keys -  map ","opts keys -  any? ","@git_sources [] call  is_a? "]}," Bundler Dsl valid_keys":{"type":"method","name":"valid_keys","children":[],"call":[]}," Bundler Dsl normalize_hash":{"type":"method","name":"normalize_hash","children":[],"call":["opts []= ","opts delete ","k to_s ","k is_a? ","opts keys each ","opts keys "]}," Bundler Dsl with_source":{"type":"method","name":"with_source","children":[],"call":[" block_given? "]}," Bundler Dsl add_git_sources":{"type":"method","name":"add_git_sources","children":[],"call":["repo_name split "," git_source ","repo_name include? "," warn_deprecated_git_source "," warn_github_source_change ","Bundler  settings [] ","Bundler  settings ","(str \"user_name, repo_name = repo_name.split(\\\"/\\\")\\n\") strip ","Bundler SharedHelpers  major_deprecation ","\"https://github.com/#{repo_name}.git\"\n strip ","Bundler  feature_flag skip_default_git_sources? ","Bundler  feature_flag ","Bundler  feature_flag github_https? ","repo_name =~ "]}," Bundler Dsl method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise "," caller [] split [] join "," caller [] split [] "," caller [] split "," caller [] "," caller "]}," Bundler Dsl install_if":{"type":"method","name":"install_if","children":[],"call":["@groups pop ","args each ","blk call ","@install_conditionals concat ","@install_conditionals pop "]}," Bundler Dsl github":{"type":"method","name":"github","children":[],"call":[" with_source ","@sources add_git_source "," normalize_hash merge "," normalize_hash ","@git_sources [] call ","@git_sources [] "," raise "," block_given? ","Bundler  feature_flag skip_default_git_sources? ","Bundler  feature_flag ","@sources add_@sources add_git_source  ","@@sources add_git_source s [] call ","@@sources add_git_source s [] ","Bundler  feature_flag skip_default_@sources add_git_source s? "]}," Bundler Dsl git_source":{"type":"method","name":"git_source","children":[],"call":["@git_sources []= ","name to_s "," raise "," valid_keys join "," valid_keys "," valid_keys include? "," block_given? "]}," Bundler Dsl eval_gemfile":{"type":"method","name":"eval_gemfile","children":[],"call":[" raise ","DSLError  new ","e backtrace ","e message ","File  basename ","gemfile to_s "," instance_eval ","Bundler  read_file ","e is_a? ","Pathname  new ","contents dup untaint ","contents dup ","Pathname  new expand_path ","@gemfile to_s ","@gemfiles << ","@gemfile parent ","(str \"Gemfile syntax error:\") join ","e message split [] ","e message split ","Bundler  ui warn ","e backtrace join ","Bundler  ui ","e backtrace []= ","e class ","e backtrace [] ","e message gsub ","x untaint ","RUBY_VERSION  < ","contents dup tap "," check_primary_source_safety ","Pathname  new  to_s ","Pathname  new s << ","Pathname  new  parent "]}," Bundler skip_during":{"type":"method","name":"skip_during","children":[],"call":[]}," Bundler Dependency specific?":{"type":"method","name":"specific?","children":[],"call":[" requirement != "," requirement "]}," Bundler Definition requested_groups":{"type":"method","name":"requested_groups","children":[],"call":[" groups - - + ","Bundler  settings with ","Bundler  settings "," groups - - "," groups - ","Bundler  settings without "," groups ","Bundler  settings [] ","Bundler  settings [] empty? "]}," Bundler Definition pinned_spec_names":{"type":"method","name":"pinned_spec_names","children":[],"call":["names uniq! ","names << ","s name ","s source is_a? ","s source ","specs each ","pinned_names << ","dep name ","dep_source == ","dep source ","@dependencies each "," sources default_source "," sources ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Bundler  feature_flag disable_multisource? ","(send\n  (send nil :dependency_source_requirements) :reject) keys ","source == "," dependency_source_requirements reject "," dependency_source_requirements "]}," Bundler Definition source_requirements":{"type":"method","name":"source_requirements","children":[],"call":["source_requirements []= ","dep source specs ","dep source ","dep name "," dependencies each "," dependencies "," index "," sources metadata_source "," sources "," metadata_dependencies each "," metadata_dependencies ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag "," sources default_source "," dependencies each_with_object ","Bundler  feature_flag disable_multisource? ","source_requirements [] "," disable_multisource? ","(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge "," dependency_source_requirements ","(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge "," source_map direct_requirements "," source_map ","Source RubygemsAggregate  new "," source_map all_requirements "," precompute_source_requirements_for_indirect_dependencies? ","source_requirements merge! "," source_map locked_requirements "," verify_changed_sources! "," pin_locally_available_names ","default_bundler_source add_dependency_names "," default_source ","(pair\n  (sym :default)\n  (send nil :default_source)) merge ","(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge  []= ","(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge  []= "," sources  sources default_source _source ","(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge  [] ","(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge  [] ","(pair\n  (sym : sources default_source )\n  (send\n    (send nil :sources) : sources default_source _source)) merge "," dependency_(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge  "," dependency_(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge  ","(pair\n  (sym : sources default_source )\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge "," source_map  pin_locally_available_names  "," source_map  source_map all_requirements  "," precompute_(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge _for_indirect_dependencies? "," precompute_(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge _for_indirect_dependencies? ","(pair\n  (sym :default)\n  (send\n    (send nil :sources) :default_source)) merge  merge! ","(pair\n  (sym :default)\n  (send\n    (const\n      (const nil :Source) :RubygemsAggregate) :new\n    (send nil :sources)\n    (send nil :source_map))) merge  merge! "," sources default_source _bundler_source add_dependency_names ","  sources default_source _source ","(pair\n  (sym : sources default_source )\n  (send nil : sources default_source _source)) merge "]}," Bundler Definition converge_paths":{"type":"method","name":"converge_paths","children":[],"call":["ls path == ","source path ","ls path ","ls class == ","source class ","ls class "," specs_changed? "," sources path_sources any? "," sources path_sources "," sources ","source instance_of? ","@sources any? "]}," Bundler Definition converge_locals":{"type":"method","name":"converge_locals","children":[],"call":["source uri == ","o uri ","source uri ","source class == ","o class ","source class "," specs_changed? ","locals any? ","locals << ","source local_override! ","source unlock! ","@unlock [] include? ","spec name ","@unlock [] ","source respond_to? ","spec source ","s name == ","s name ","@dependencies find ","Bundler  settings local_overrides map ","Bundler  settings local_overrides ","Bundler  settings ","(send\n  (lvar :sources_with_changes) :each) empty? ! ","(send\n  (lvar :sources_with_changes) :each) empty? ","@unlock [] << ","source name ","sources_with_changes each ","(send\n  (lvar :locals) :select) map ","locals select ","source class === ","(send\n  (lvar :(send\n  (lvar :locals) :select) map ) :each) empty? ! ","(send\n  (lvar :(send\n  (lvar :locals) :select) map ) :each) empty? ","(send\n  (lvar :locals) :select) map  each "]}," Bundler Definition dependencies_for_source_changed?":{"type":"method","name":"dependencies_for_source_changed?","children":[],"call":["deps_for_source != ","s source == ","s source ","@locked_deps select ","@dependencies select ","Set  new != ","Set  new ","dep source == ","dep source ","@locked_deps values select ","@locked_deps values ","deps_for_source sort != ","locked_deps_for_source sort ","deps_for_source sort ","deps_for_source uniq sort != ","deps_for_source uniq sort ","deps_for_source uniq "," locked_dependencies select "," locked_dependencies "]}," Bundler Definition specs_changed?":{"type":"method","name":"specs_changed?","children":[],"call":["source specs != ","locked specs ","source specs "," dependencies_for_source_changed? ","locked ! ","locked_spec source != ","locked_spec source ","locked_spec source class == ","locked class ","locked_spec source class ","@locked_specs any? ","@locked_sources find "," specs_for_source_changed? ","s == ","locked specs any? ","@locked_sources find  specs ","@locked_sources find  ! ","@locked_sources find _spec source != ","@locked_sources find _spec source ","@locked_sources find _spec source class == ","@locked_sources find  class ","@locked_sources find _spec source class ","@@locked_sources find _specs any? ","@@locked_sources find _sources find ","@locked_sources find  specs any? "]}," Bundler Definition nothing_changed?":{"type":"method","name":"nothing_changed?","children":[],"call":["@local_changes ! ","@path_changes ! ","@new_platform ! ","@dependency_changes ! ","@source_changes ! ","@locked_specs_incomplete_for_platform ! ","@incomplete_lockfile ! ","@unlocking_bundler ! ","@missing_lockfile_dep ! "]}," Bundler Definition validate_ruby!":{"type":"method","name":"validate_ruby!","children":[],"call":[" raise ","expected is_a? ! ","expected is_a? "," ruby_version engine "," ruby_version ","Bundler  ruby_version engine ","Bundler  ruby_version "," ruby_version diff ","Bundler RubyVersion  system engine ","Bundler RubyVersion  system ","system_ruby_version engine ","Bundler SystemRubyVersion  new "," ruby_version  ruby_version diff  ","Bundler SystemRubyVersion  new  engine "]}," Bundler Definition lock_version":{"type":"method","name":"lock_version","children":[],"call":["@locked_bundler_version < ","Gem Version  new "]}," Bundler Definition spec_git_paths":{"type":"method","name":"spec_git_paths","children":[],"call":["s path to_s ","s path "," sources git_sources map "," sources git_sources "," sources ","(send\n  (send\n    (send nil :sources) :git_sources) :map) compact ","File  realpath ","File  exist? "]}," Bundler Definition has_local_dependencies?":{"type":"method","name":"has_local_dependencies?","children":[],"call":[" sources git_sources empty? ! "," sources git_sources empty? "," sources git_sources "," sources "," sources path_sources empty? ! "," sources path_sources empty? "," sources path_sources "]}," Bundler Definition has_rubygems_remotes?":{"type":"method","name":"has_rubygems_remotes?","children":[],"call":["s remotes any? ","s remotes "," sources rubygems_sources any? "," sources rubygems_sources "," sources "]}," Bundler CurrentRuby x64_mingw_22?":{"type":"method","name":"x64_mingw_22?","children":[],"call":[" on_22? "," x64_mingw? "]}," Bundler CurrentRuby x64_mingw_21?":{"type":"method","name":"x64_mingw_21?","children":[],"call":[" on_21? "," x64_mingw? "]}," Bundler CurrentRuby x64_mingw_20?":{"type":"method","name":"x64_mingw_20?","children":[],"call":[" on_20? "," x64_mingw? "]}," Bundler CurrentRuby x64_mingw?":{"type":"method","name":"x64_mingw?","children":[],"call":["Gem Platform  local cpu == ","Gem Platform  local cpu ","Gem Platform  local ","Gem Platform  local os == ","Gem Platform  local os ","Bundler  local_platform cpu == ","Bundler  local_platform cpu ","Bundler  local_platform ","Bundler  local_platform os == ","Bundler  local_platform os ","Bundler  local_platform != ","Gem  win_platform? ","Bundler  local_platform os start_with? "]}," Bundler CurrentRuby mingw_22?":{"type":"method","name":"mingw_22?","children":[],"call":[" on_22? "," mingw? "]}," Bundler CurrentRuby mingw_21?":{"type":"method","name":"mingw_21?","children":[],"call":[" on_21? "," mingw? "]}," Bundler CurrentRuby mingw_20?":{"type":"method","name":"mingw_20?","children":[],"call":[" on_20? "," mingw? "]}," Bundler CurrentRuby mingw_19?":{"type":"method","name":"mingw_19?","children":[],"call":[" on_19? "," mingw? "]}," Bundler CurrentRuby mingw_18?":{"type":"method","name":"mingw_18?","children":[],"call":[" on_18? "," mingw? "]}," Bundler CurrentRuby mingw?":{"type":"method","name":"mingw?","children":[],"call":["Gem Platform  local cpu != ","Gem Platform  local cpu ","Gem Platform  local ","Gem Platform  local os == ","Gem Platform  local os ","Bundler  local_platform cpu != ","Bundler  local_platform cpu ","Bundler  local_platform ","Bundler  local_platform os == ","Bundler  local_platform os ","Bundler  local_platform != ","Gem  win_platform? "," windows? "]}," Bundler CurrentRuby mswin64_22?":{"type":"method","name":"mswin64_22?","children":[],"call":[" on_22? "," mswin64? "]}," Bundler CurrentRuby mswin64_21?":{"type":"method","name":"mswin64_21?","children":[],"call":[" on_21? "," mswin64? "]}," Bundler CurrentRuby mswin64_20?":{"type":"method","name":"mswin64_20?","children":[],"call":[" on_20? "," mswin64? "]}," Bundler CurrentRuby mswin64_19?":{"type":"method","name":"mswin64_19?","children":[],"call":[" on_19? "," mswin64? "]}," Bundler CurrentRuby mswin64?":{"type":"method","name":"mswin64?","children":[],"call":["Gem Platform  local cpu == ","Gem Platform  local cpu ","Gem Platform  local ","Gem Platform  local os == ","Gem Platform  local os ","Bundler  local_platform cpu == ","Bundler  local_platform cpu ","Bundler  local_platform ","Bundler  local_platform os == ","Bundler  local_platform os ","Bundler  local_platform != ","Gem  win_platform? "," windows? "]}," Bundler CurrentRuby mswin_22?":{"type":"method","name":"mswin_22?","children":[],"call":[" on_22? "," mswin? "]}," Bundler CurrentRuby mswin_21?":{"type":"method","name":"mswin_21?","children":[],"call":[" on_21? "," mswin? "]}," Bundler CurrentRuby mswin_20?":{"type":"method","name":"mswin_20?","children":[],"call":[" on_20? "," mswin? "]}," Bundler CurrentRuby mswin_19?":{"type":"method","name":"mswin_19?","children":[],"call":[" on_19? "," mswin? "]}," Bundler CurrentRuby mswin_18?":{"type":"method","name":"mswin_18?","children":[],"call":[" on_18? "," mswin? "]}," Bundler CurrentRuby mswin?":{"type":"method","name":"mswin?","children":[],"call":["Gem  win_platform? "," windows? "]}," Bundler CurrentRuby maglev?":{"type":"method","name":"maglev?","children":[],"call":["RUBY_ENGINE  == "]}," Bundler CurrentRuby jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":[" on_19? "," jruby? "]}," Bundler CurrentRuby jruby_18?":{"type":"method","name":"jruby_18?","children":[],"call":[" on_18? "," jruby? "]}," Bundler CurrentRuby jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_ENGINE  == "]}," Bundler CurrentRuby rbx?":{"type":"method","name":"rbx?","children":[],"call":["RUBY_ENGINE  == "," ruby? "]}," Bundler CurrentRuby mri_22?":{"type":"method","name":"mri_22?","children":[],"call":[" on_22? "," mri? "]}," Bundler CurrentRuby mri_21?":{"type":"method","name":"mri_21?","children":[],"call":[" on_21? "," mri? "]}," Bundler CurrentRuby mri_20?":{"type":"method","name":"mri_20?","children":[],"call":[" on_20? "," mri? "]}," Bundler CurrentRuby mri_19?":{"type":"method","name":"mri_19?","children":[],"call":[" on_19? "," mri? "]}," Bundler CurrentRuby mri_18?":{"type":"method","name":"mri_18?","children":[],"call":[" on_18? "," mri? "]}," Bundler CurrentRuby mri?":{"type":"method","name":"mri?","children":[],"call":["RUBY_ENGINE  == ","(const nil :RUBY_ENGINE) ! "," mswin? ! "," mswin? "," windows? ! "," windows? "]}," Bundler CurrentRuby ruby_22?":{"type":"method","name":"ruby_22?","children":[],"call":[" on_22? "," ruby? "]}," Bundler CurrentRuby ruby_21?":{"type":"method","name":"ruby_21?","children":[],"call":[" on_21? "," ruby? "]}," Bundler CurrentRuby ruby_20?":{"type":"method","name":"ruby_20?","children":[],"call":[" on_20? "," ruby? "]}," Bundler CurrentRuby ruby_19?":{"type":"method","name":"ruby_19?","children":[],"call":[" on_19? "," ruby? "]}," Bundler CurrentRuby ruby_18?":{"type":"method","name":"ruby_18?","children":[],"call":[" on_18? "," ruby? "]}," Bundler CurrentRuby ruby?":{"type":"method","name":"ruby?","children":[],"call":["RUBY_ENGINE  == ","(const nil :RUBY_ENGINE) ! "," mswin? ! "," mswin? ","Bundler GemHelpers  generic_local_platform == ","Bundler GemHelpers  generic_local_platform "," windows? ! "," windows? "]}," Bundler CurrentRuby on_22?":{"type":"method","name":"on_22?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler CurrentRuby on_21?":{"type":"method","name":"on_21?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler CurrentRuby on_20?":{"type":"method","name":"on_20?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler CurrentRuby on_19?":{"type":"method","name":"on_19?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler CurrentRuby on_18?":{"type":"method","name":"on_18?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler current_ruby":{"type":"method","name":"current_ruby","children":[],"call":[]}," Bundler CLI auto_install":{"type":"method","name":"auto_install","children":[],"call":["Bundler  reset! "," invoke ","Bundler  ui info ","Bundler  ui ","Bundler  definition specs ","Bundler  definition ","Bundler  settings [] ","Bundler  settings "]}," Bundler CLI env":{"type":"method","name":"env","children":[],"call":["Env  new write ","Env  new ","Env  write "]}," Bundler CLI inject":{"type":"method","name":"inject","children":[],"call":["Inject  new run ","Inject  new "," options "," require ","SharedHelpers  major_deprecation "," options dup ","Bundler  ui confirm ","Bundler  ui ","(send\n  (lvar :added) :map) join ","added map ","added any? ","Injector  inject ","deps << ","Bundler Dependency  new ","gems each_slice ","gems unshift unshift ","gems unshift "," require_relative ","(send\n  (lvar :Injector  inject ) :map) join ","Injector  inject  map ","Injector  inject  any? "]}," Bundler CLI platform":{"type":"method","name":"platform","children":[],"call":["Platform  new run ","Platform  new "," options "," require ","Bundler  ui info ","output join ","Bundler  ui ","output << ","e message ","Bundler  definition validate_ruby! ","Bundler  definition ","platforms join "," options [] ","Bundler  definition ruby_version ","Bundler  definition platforms map ","Bundler  definition platforms ","Bundler  ui silence "," require_relative ","Bundler  definition Bundler  definition ruby_version  "]}," Bundler CLI licenses":{"type":"method","name":"licenses","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui warn ","license empty? ","s licenses ","s license ","s name ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) reverse each ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) reverse ","s license to_s ","Bundler  load specs sort_by ","Bundler  load specs ","Bundler  load ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) reverse_each "]}," Bundler CLI binstubs":{"type":"method","name":"binstubs","children":[],"call":["Binstubs  new run ","Binstubs  new "," options "," require ","installer generate_bundler_executable_stubs "," options [] ","Bundler  ui warn ","Bundler  ui ","spec name == ","spec name "," raise "," not_found_message ","Bundler  definition specs ","Bundler  definition ","s name == ","s name ","installer specs find ","installer specs ","Installer  new ","Bundler  root ","Bundler  settings []= ","Bundler  settings "," options [] empty? ","Bundler  definition validate_ruby! ","Bundler  load specs ","Bundler  load "," name ","gems each "," exit ","Bundler  ui error ","gems empty? "," require_relative ","Installer  new  generate_bundler_executable_stubs ","Installer  new  specs find ","Installer  new  specs "]}," Bundler CLI handle_no_command_error":{"type":"method","name":"handle_no_command_error","children":[],"call":[]}," Bundler CLI start":{"type":"method","name":"start","children":[],"call":[]}," Bundler Viz run":{"type":"method","name":"run","children":[],"call":[" raise ","Bundler  ui warn ","Bundler  ui ","Bundler  ui error ","e message ","e message =~ ","e inspect ","graph viz ","Graph  new "," options [] "," options ","Bundler  load ","File  expand_path "," require "," options []= "," options [] join tr split "," options [] join tr "," options [] join "," gem ","e message to_s include? ","e message to_s ","Graph  new  viz "]}," Bundler Viz initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Update without_groups_messages":{"type":"method","name":"without_groups_messages","children":[],"call":["Bundler  ui confirm ","Bundler CLI Common  without_groups_message ","Bundler  ui "," require ","Bundler  settings without any? ","Bundler  settings without ","Bundler  settings "]}," Bundler Update run":{"type":"method","name":"run","children":[],"call":[" without_groups_messages ","Bundler  ui confirm ","Bundler  ui ","Bundler CLI Clean  new run ","Bundler CLI Clean  new "," options "," require ","Bundler  settings [] ","Bundler  settings ","Bundler  load cache ","Bundler  load ","Bundler  app_cache exist? ","Bundler  app_cache ","Installer  install ","Bundler  definition ","Bundler  root ","Bundler  definition validate_ruby! ","Gem  load_env_plugins ","Gem  respond_to? ","Bundler  settings []= ","opts [] ","opts []= "," options [] "," options dup ","Bundler Fetcher  disable_endpoint= "," gems ","sources concat ","specs map ","Bundler  definition specs_for ","groups any? "," raise ","Bundler CLI Common  gem_not_found_message ","names include? "," gems each ","s name ","Bundler  locked_gems specs map ","Bundler  locked_gems specs ","Bundler  locked_gems ","Bundler  default_lockfile exist? ","Bundler  default_lockfile ","groups empty? ","sources empty? "," gems empty? "," Array map "," Array ","Bundler  ui level= "," gems concat "," options [] ! ","gvp strict= ","gvp level= ","patch_level first ","Bundler  definition gem_version_promoter tap ","Bundler  definition gem_version_promoter ","patch_level join ","patch_level length <= ","patch_level length "," options keys include? ","v to_s "," options keys ","(sym :major) select ","Plugin  gemfile_install ","Bundler  default_gemfile ","Bundler CLI Common  output_post_install_messages ","installer post_install_messages ","Bundler CLI Common  output_without_groups_message ","Bundler  definition validate_runtime! ","Bundler CLI Common  configure_gem_version_promoter ","Bundler  feature_flag plugins? ","Bundler  feature_flag ","Bundler CLI Common  ensure_all_gems_in_lockfile! ","Bundler  ui warn ","new_version == ","new_version < ","new_version ! ","new_version version ","Bundler  definition specs [] first ","Bundler  definition specs [] ","Bundler  definition specs ","(send\n  (send\n    (lvar :locked_gems) :specs) :find) version ","s name == ","locked_gems specs find ","locked_gems specs ","Bundler  definition locked_gems ","CLI Common  clean_after_install? ","Bundler  settings set_command_option_if_given ","full_update ! ","SharedHelpers  major_deprecation ","Bundler  feature_flag update_requires_all_flag? ","locked_version version ","deps map ","(send\n  (send\n    (lvar :d) :groups) :&\n  (lvar :groups)) any? ","d groups & ","d groups ","Bundler  definition dependencies select ","Bundler  definition dependencies ","Bundler  root join exist? ","Bundler  root join ","locked_info [] ","new_spec version ","locked_source != ","new_spec source to_s ","new_spec source ","locked_spec match_platform ","Bundler  rubygems platforms none? ","Bundler  rubygems platforms ","Bundler  rubygems ","previous_locked_info [] "," require_relative ","h []= ","s source to_s ","s source ","s version ","locked_gems specs reduce ","Bundler CLI Common  output_fund_metadata_summary ","Bundler  local_platform ","new_spec source identifier ","s source identifier ","update_bundler ! ","Bundler  self_manager update_bundler_and_restart_with_it_if_needed ","Bundler  self_manager "," without_ Array map _messages "," options dup  [] "," options dup  []= "," Array  concat ","Bundler  definition specs_for  map ","Bundler  definition Bundler  definition specs_for _for "," Array map  any? ","Bundler  locked_gems specs map  include? ","Bundler  locked_gems Bundler  definition specs_for  map ","Bundler  Bundler  definition locked_gems  specs map ","Bundler  locked_gems Bundler  definition specs_for  ","Bundler  Bundler  definition locked_gems  specs ","Bundler  Bundler  definition locked_gems  "," Array map  empty? "," Array  empty? ","Installer  install  post_install_messages ","Bundler CLI Common  output_without_ Array map _message ","Bundler  definition specs [] first  == ","new_spec version  == ","Bundler  definition specs [] first  < ","new_spec version  < ","Bundler  definition specs [] first  ! ","new_spec version  ! ","Bundler  definition specs [] first  version ","new_spec version  version ","Bundler  definition Bundler  definition specs_for  [] first ","Bundler  definition Bundler  definition specs_for  [] ","Bundler  definition Bundler  definition specs_for  ","(send\n  (send\n    (lvar :locked_gems) :Bundler  definition specs_for ) :find) version ","(send\n  (send\n    (lvar :Bundler  definition locked_gems ) :specs) :find) version ","locked_gems Bundler  definition specs_for  find ","Bundler  definition locked_gems  specs find ","locked_gems Bundler  definition specs_for  ","Bundler  definition locked_gems  specs ","Bundler  definition Bundler  definition locked_gems  ","(send\n  (send\n    (lvar :locked_gems) :specs) :find) version  version ","locked_info []  version ","(send\n  (send\n    (lvar :d) : Array map ) :&\n  (lvar : Array map )) any? ","d  Array map  & ","d  Array map  ","previous_locked_info []  [] ","locked_info []  != ","Bundler  definition specs [] first  source to_s ","Bundler  definition specs [] first  source ","locked_info []  match_platform ","previous_previous_locked_info []  [] ","locked_gems Bundler  definition specs_for  reduce ","Bundler  definition locked_gems  specs reduce ","Bundler  definition specs [] first  source identifier "," options []  ! ","Bundler  self_manager  options [] _and_restart_with_it_if_needed "]}," Bundler Update initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Show outdated?":{"type":"method","name":"outdated?","children":[],"call":["Gem Version  new < ","Gem Version  new ","latest version ","current version "]}," Bundler Show fetch_latest_specs":{"type":"method","name":"fetch_latest_specs","children":[],"call":["definition specs ","definition resolve_with_cache! ","definition resolve_remotely! ","Bundler  ui silence ","Bundler  ui ","Bundler  ui info "," options [] "," options ","Bundler  definition ","Bundler  reset! ","Bundler  definition  specs ","Bundler  definition  resolve_with_cache! ","Bundler  definition  resolve_remotely! ","Bundler  Bundler  definition  "]}," Bundler Show run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","Bundler  ui ","(str \"              \") gsub ","latest version ","s version "," outdated? ","s homepage ","s summary ","l name == ","s name ","l name "," latest_specs find "," latest_specs ","s git_version ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) each ","Bundler  load specs sort_by ","Bundler  load specs ","Bundler  load ","s full_gem_path ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :sort_by) map "," options [] "," options ","Bundler  ui warn "," gem_name ","File  directory? ! ","File  directory? ","spec full_gem_path ","Bundler CLI Common  select_spec ","File  expand_path "," gem_name == ","Bundler  load lock ","Bundler  definition validate_ruby! ","Bundler  definition ","Bundler  ui silence ","Bundler  load specs sort_by each ","Bundler  load specs sort_by map ","Bundler  definition validate_runtime! ","@options [] "," __dir__ "," latest_Bundler CLI Common  select_spec s find "," latest_Bundler CLI Common  select_spec s ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :Bundler CLI Common  select_spec s) :sort_by) each ","Bundler  load Bundler CLI Common  select_spec s sort_by ","Bundler  load Bundler CLI Common  select_spec s ","s full_gem_spec full_gem_path  ","s full_gem_File  expand_path  ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :Bundler CLI Common  select_spec s) :sort_by) map ","spec full_gem_spec full_gem_path  ","spec full_gem_File  expand_path  ","Bundler CLI Common  select_spec  full_gem_path ","Bundler CLI Common  select_Bundler CLI Common  select_spec  ","File  expand_spec full_gem_path  ","File  expand_File  expand_path  ","Bundler  load Bundler CLI Common  select_spec s sort_by each ","Bundler  load Bundler CLI Common  select_spec s sort_by map "]}," Bundler Show initialize":{"type":"method","name":"initialize","children":[],"call":[" fetch_latest_specs ","options [] "]}," Bundler Platform run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","output join ","Bundler  ui ","output << ","e message ","Bundler  definition validate_ruby! ","Bundler  definition ","platforms join "," options [] "," options ","Bundler  definition ruby_version ","Bundler  definition platforms map ","Bundler  definition platforms ","Bundler  ui silence ","Bundler  definition ruby_version single_version_string ","Bundler  locked_gems ruby_version ","Bundler  locked_gems ","Bundler  definition validate_runtime! ","Gem Platform  local ","Bundler  locked_gems ruby_version gsub "]}," Bundler Platform initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Package setup_cache_all":{"type":"method","name":"setup_cache_all","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","Bundler  definition has_local_dependencies? ","Bundler  definition ","Bundler  settings []= "," options [] "," options "," options key? ","Bundler  feature_flag cache_all? ! ","Bundler  feature_flag cache_all? ","Bundler  feature_flag ","Bundler  settings set_command_option_if_given "," options fetch ","Bundler  feature_flag cache_command_is_package? ","s is_a? ! ","s is_a? ","Bundler  definition sources any? ","Bundler  definition sources ","Bundler  feature_flag cache_ options fetch ? ! ","Bundler  feature_flag cache_ options fetch ? "]}," Bundler Package install":{"type":"method","name":"install","children":[],"call":["Bundler CLI Install  new run ","Bundler CLI Install  new ","options []= ","Bundler  settings [] ","Bundler  settings "," options dup "," options "," require "," require_relative "," options dup  []= ","  options dup  dup ","  options dup  "]}," Bundler Package run":{"type":"method","name":"run","children":[],"call":["Bundler  load cache ","Bundler  load ","Pathname  new "," options [] "," options "," install "," setup_cache_all ","Bundler  settings []= ","Bundler  settings "," options key? ","File  expand_path ","Bundler  ui level= ","Bundler  ui ","Bundler  settings [] ","Bundler  settings set_command_option_if_given ","Bundler  settings temporary "]}," Bundler Package initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Outdated run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  ui info ","Bundler  ui ","out_count zero? ","Bundler  ui debug ","active_spec loaded_from ","(str \"  * \") rstrip ","active_spec name ","dependency groups length > ","dependency groups length ","dependency groups ","dependency groups join ","dependency requirement ","dependency specific? ","current_spec git_version ","current_spec version ","active_spec git_version ","active_spec version "," options [] "," options ","out_count == ","current_spec git_version != ","Gem Version  new > ","Gem Version  new ","active_spec nil? ","active_spec last ","b version prerelease? ","b version ","b respond_to? ","active_spec delete_if ","active_spec size > ","active_spec size "," options [] ! ","current_spec version prerelease? ! ","current_spec version prerelease? ","definition index [] sort_by ","definition index [] ","current_spec name ","definition index ","spec name == ","spec name ","definition specs detect ","definition specs ","current_dependencies [] "," gems include? ! "," gems include? "," gems "," gems empty? ! "," gems empty? ","(send\n  (lvar :gemfile_specs) :sort_by\n  (block-pass\n    (sym :name))) flatten each ","(send\n  (lvar :gemfile_specs) :sort_by\n  (block-pass\n    (sym :name))) flatten ","dependency_specs sort_by ","gemfile_specs sort_by ","current_dependencies has_key? ","current_specs partition ","definition resolve_remotely! ","definition resolve_with_cache! ","Bundler  definition ","sources empty? ","current_dependencies []= ","dep name ","Bundler  load dependencies each ","Bundler  load dependencies ","Bundler  load ","Bundler  ui silence ","Bundler  load specs ","Bundler  definition validate_ruby! ","Bundler CLI Common  select_spec "," gems each "," Array ","current_dependencies key? ","spec_outdated_info to_s rstrip ","spec_outdated_info to_s "," update_present_via_semver_portions ","definition_resolution call "," proc "," check_for_deployment_mode ","active_minor > ","active_spec version segments [] compact join ","active_spec version segments [] compact ","active_spec version segments [] ","active_spec version segments ","current_spec version segments [] compact join ","current_spec version segments [] compact ","current_spec version segments [] ","current_spec version segments ","active_major > ","active_spec version segments first ","current_spec version segments first ","active_specs last ","active_specs delete_if ","active_specs size > ","active_specs size ","(send\n  (send\n    (send\n      (lvar :definition) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","spec platform == ","current_spec platform ","spec platform ","definition index [] select "," print_gem ","options_include_groups any? ","gem [] ","outdated_gems_list each ","gems each ","gems nil? ","contains_group ! "," options [] == ","groups split include? ","groups split ","outdated_gems_by_groups [] ","(nil) flatten each ","(nil) flatten ","outdated_gems_by_groups keys compact sort ","outdated_gems_by_groups keys compact ","outdated_gems_by_groups keys "," options keys include? ","v to_s "," options keys ","(sym :group) select "," display_nothing_outdated_message ","outdated_gems_list empty? ","outdated_gems_by_groups [] << ","outdated_gems_list << ","filter_options_patch any? "," retrieve_active_spec ","(send\n  (lvar :gemfile_specs) :+\n  (lvar :dependency_specs)) sort_by each ","(send\n  (lvar :gemfile_specs) :+\n  (lvar :dependency_specs)) sort_by ","gemfile_specs + "," options keys & ","Bundler CLI Common  patch_level_options any? ","Bundler CLI Common  patch_level_options ","Bundler CLI Common  configure_gem_version_promoter ","Bundler  definition validate_runtime! ","Bundler  definition resolve ","specs sort_by each ","specs sort_by "," print_gems "," outdated_gems_list "," header_group_message "," outdated_gems_by_groups [] "," outdated_gems_by_groups ","ordered_groups insert each ","ordered_groups insert "," outdated_gems_by_groups keys compact sort "," outdated_gems_by_groups keys compact "," outdated_gems_by_groups keys "," options_include_groups "," header_outdated_message "," outdated_gems_list empty? "," outdated_gems_by_groups [] << "," outdated_gems_list [] "," outdated_gems_list << "," update_present_via_semver_portions ! "," filter_options_patch any? "," filter_options_patch "," sources "," sources empty? ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :dependencies) :map) to_h ","Bundler  load dependencies map "," check_for_deployment_mode! "," print_gems_table "," outdated_gems ","relevant_outdated_gems each ","(send\n  (send\n    (block\n      (send\n        (send nil :outdated_gems) :group_by)\n      (args\n        (arg :g))\n      (send\n        (lvar :g) :[]\n        (sym :groups))) :sort) :flat_map) compact ","(send\n  (send nil :outdated_gems) :group_by) sort flat_map ","(send\n  (send nil :outdated_gems) :group_by) sort ","g [] "," outdated_gems group_by "," nothing_outdated_message "," outdated_gems empty? "," outdated_gems << "," filter_options_patch empty? ","specs sort_by uniq each ","specs sort_by uniq "," options merge ","active_spec last  loaded_from ","definition index [] sort_by  loaded_from ","active_specs last  loaded_from "," retrieve_active_spec  loaded_from ","active_spec last  name ","definition index [] sort_by  name ","active_specs last  name "," retrieve_active_spec  name ","dependency dependency groups join  length > ","current_dependencies []  groups length > ","dependency dependency groups join  length ","current_dependencies []  groups length ","dependency dependency groups join  ","current_dependencies []  groups ","dependency dependency groups join  join ","current_dependencies []  groups join ","current_dependencies []  requirement ","current_dependencies []  specific? ","active_spec last  git_version ","definition index [] sort_by  git_version ","active_specs last  git_version "," retrieve_active_spec  git_version ","active_spec last  version ","definition index [] sort_by  version ","active_specs last  version "," retrieve_active_spec  version ","active_spec last  nil? ","definition index [] sort_by  nil? ","active_specs last  nil? "," retrieve_active_spec  nil? ","active_spec last  last ","definition index [] sort_by  last ","active_specs last  last "," retrieve_active_spec  last ","active_spec last  delete_if ","definition index [] sort_by  delete_if ","active_specs last  delete_if "," retrieve_active_spec  delete_if ","active_spec last  size > ","definition index [] sort_by  size > ","active_specs last  size > "," retrieve_active_spec  size > ","active_spec last  size ","definition index [] sort_by  size ","active_specs last  size "," retrieve_active_spec  size ","Bundler  definition  index [] sort_by ","Bundler  definition  index [] ","Bundler  definition  index ","Bundler  definition  specs detect ","definition gemfile_specs +  detect ","Bundler  definition  specs ","definition gemfile_specs +  "," outdated_gems_by_groups []  include? ! ","  outdated_gems_by_groups []  include? ! "," outdated_gems_by_groups []  include? ","  outdated_gems_by_groups []  include? "," outdated_gems_by_groups []  ","  outdated_gems_by_groups []  "," outdated_gems_by_groups []  empty? ! ","  outdated_gems_by_groups []  empty? ! "," outdated_gems_by_groups []  empty? ","  outdated_gems_by_groups []  empty? ","(send\n  (lvar :gemfile_gemfile_specs + ) :sort_by\n  (block-pass\n    (sym :name))) flatten each ","(send\n  (lvar :gemfile_gemfile_specs + ) :sort_by\n  (block-pass\n    (sym :name))) flatten ","current_dependencies [] _specs sort_by ","dependency_gemfile_specs +  sort_by ","gemfile_gemfile_specs +  sort_by ","current_gemfile_specs +  partition ","Bundler  definition  resolve_remotely! ","Bundler  definition  resolve_with_cache! ","Bundler  Bundler  definition  "," Array  empty? ","Bundler  load gemfile_specs +  ","Bundler  Bundler  definition  validate_ruby! "," outdated_gems_by_groups []  each ","  outdated_gems_by_groups []  each ","  update_present_via_semver_portions _via_semver_portions ","Bundler  definition _resolution call ","active_spec version segments [] compact join  > ","active_spec last  version segments [] compact join ","definition index [] sort_by  version segments [] compact join ","active_specs last  version segments [] compact join "," retrieve_active_spec  version segments [] compact join ","active_spec last  version segments [] compact ","definition index [] sort_by  version segments [] compact ","active_specs last  version segments [] compact "," retrieve_active_spec  version segments [] compact ","active_spec last  version segments [] ","definition index [] sort_by  version segments [] ","active_specs last  version segments [] "," retrieve_active_spec  version segments [] ","active_spec last  version segments ","definition index [] sort_by  version segments ","active_specs last  version segments "," retrieve_active_spec  version segments ","active_spec version segments first  > ","active_spec last  version segments first ","definition index [] sort_by  version segments first ","active_specs last  version segments first "," retrieve_active_spec  version segments first ","active_spec last s last ","definition index [] sort_by s last ","active_specs last s last "," retrieve_active_spec s last ","(send\n  (send\n    (send\n      (lvar :definition) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  last ","active_gemfile_specs +  last ","active_spec last s delete_if ","definition index [] sort_by s delete_if ","active_specs last s delete_if "," retrieve_active_spec s delete_if ","(send\n  (send\n    (send\n      (lvar :definition) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  delete_if ","active_gemfile_specs +  delete_if ","active_spec last s size > ","definition index [] sort_by s size > ","active_specs last s size > "," retrieve_active_spec s size > ","(send\n  (send\n    (send\n      (lvar :definition) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  size > ","active_gemfile_specs +  size > ","active_spec last s size ","definition index [] sort_by s size ","active_specs last s size "," retrieve_active_spec s size ","(send\n  (send\n    (send\n      (lvar :definition) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  size ","active_gemfile_specs +  size ","(send\n  (send\n    (send\n      (lvar :Bundler  definition ) :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","Bundler  definition  index [] select ","options_include_dependency groups join  any? ","outdated_outdated_gems_by_groups [] _list each ","outdated_ outdated_gems_by_groups [] _list each ","outdated_gems_by_groups []  each ","outdated_gems_by_groups []  nil? "," outdated_gems_by_groups []  nil? "," options [] ==  ! ","groups split include?  ! ","dependency groups join  split include? ","dependency groups join  split ","outdated_gems_by_dependency groups join  [] ","outdated_outdated_gems_by_groups [] _by_groups [] ","outdated_ outdated_gems_by_groups [] _by_groups [] ","outdated_gems_by_dependency groups join  keys compact sort ","outdated_outdated_gems_by_groups [] _by_groups keys compact sort ","outdated_ outdated_gems_by_groups [] _by_groups keys compact sort ","outdated_gems_by_dependency groups join  keys compact ","outdated_outdated_gems_by_groups [] _by_groups keys compact ","outdated_ outdated_gems_by_groups [] _by_groups keys compact ","outdated_gems_by_dependency groups join  keys ","outdated_outdated_gems_by_groups [] _by_groups keys ","outdated_ outdated_gems_by_groups [] _by_groups keys ","outdated_outdated_gems_by_groups [] _list empty? ","outdated_ outdated_gems_by_groups [] _list empty? ","outdated_gems_by_dependency groups join  [] << ","outdated_outdated_gems_by_groups [] _by_groups [] << ","outdated_ outdated_gems_by_groups [] _by_groups [] << ","outdated_outdated_gems_by_groups [] _list << ","outdated_ outdated_gems_by_groups [] _list << "," options keys &  any? "," retrieve_active_spec last  "," retrieve_definition index [] sort_by  "," retrieve_active_specs last  "," retrieve_ retrieve_active_spec  ","(send\n  (lvar :gemfile_specs) :+\n  (lvar :current_dependencies [] _specs)) sort_by each ","(send\n  (lvar :gemfile_gemfile_specs + ) :+\n  (lvar :dependency_gemfile_specs + )) sort_by each ","(send\n  (lvar :gemfile_specs) :+\n  (lvar :current_dependencies [] _specs)) sort_by ","(send\n  (lvar :gemfile_gemfile_specs + ) :+\n  (lvar :dependency_gemfile_specs + )) sort_by ","gemfile_gemfile_specs +  + ","Bundler  Bundler  definition  validate_runtime! ","Bundler  Bundler  definition  resolve ","gemfile_specs +  sort_by each ","gemfile_specs +  sort_by "," print_outdated_gems_by_groups []  "," print_ outdated_gems_by_groups []  "," outdated_outdated_gems_by_groups [] _list "," outdated_ outdated_gems_by_groups [] _list "," outdated_gems_by_dependency groups join  [] "," outdated_outdated_gems_by_groups [] _by_groups [] "," outdated_ outdated_gems_by_groups [] _by_groups [] "," outdated_gems_by_dependency groups join  "," outdated_outdated_gems_by_groups [] _by_groups "," outdated_ outdated_gems_by_groups [] _by_groups ","ordered_dependency groups join  insert each ","outdated_gems_by_groups keys compact sort  insert each "," outdated_gems_by_groups keys compact sort  insert each ","ordered_dependency groups join  insert ","outdated_gems_by_groups keys compact sort  insert "," outdated_gems_by_groups keys compact sort  insert "," outdated_gems_by_dependency groups join  keys compact sort "," outdated_outdated_gems_by_groups [] _by_groups keys compact sort "," outdated_ outdated_gems_by_groups [] _by_groups keys compact sort "," outdated_gems_by_dependency groups join  keys compact "," outdated_outdated_gems_by_groups [] _by_groups keys compact "," outdated_ outdated_gems_by_groups [] _by_groups keys compact "," outdated_gems_by_dependency groups join  keys "," outdated_outdated_gems_by_groups [] _by_groups keys "," outdated_ outdated_gems_by_groups [] _by_groups keys "," options_include_dependency groups join  "," outdated_outdated_gems_by_groups [] _list empty? "," outdated_ outdated_gems_by_groups [] _list empty? "," outdated_gems_by_dependency groups join  [] << "," outdated_outdated_gems_by_groups [] _by_groups [] << "," outdated_ outdated_gems_by_groups [] _by_groups [] << "," outdated_outdated_gems_by_groups [] _list [] "," outdated_ outdated_gems_by_groups [] _list [] "," outdated_outdated_gems_by_groups [] _list << "," outdated_ outdated_gems_by_groups [] _list << ","  update_present_via_semver_portions _via_semver_portions ! ","  options keys &  any? ","  options keys &  ","  Array  ","  Array  empty? "," print_outdated_gems_by_groups [] _table "," print_ outdated_gems_by_groups [] _table "," outdated_outdated_gems_by_groups []  "," outdated_ outdated_gems_by_groups []  ","relevant_outdated_outdated_gems_by_groups []  each ","relevant_outdated_ outdated_gems_by_groups []  each ","(send\n  (send\n    (block\n      (send\n        (send nil :outdated_gems) :group_by)\n      (args\n        (arg :g))\n      (send\n        (lvar :g) :[]\n        (sym :groups))) :sort) :flat_map) compact  each ","(send\n  (send\n    (block\n      (send\n        (send nil :outdated_gems) :group_by)\n      (args\n        (arg :g))\n      (send\n        (lvar :g) :[]\n        (sym :dependency groups join ))) :sort) :flat_map) compact ","(send\n  (send\n    (block\n      (send\n        (send nil :outdated_outdated_gems_by_groups [] ) :group_by)\n      (args\n        (arg :g))\n      (send\n        (lvar :g) :[]\n        (sym :groups))) :sort) :flat_map) compact ","(send\n  (send\n    (block\n      (send\n        (send nil :outdated_ outdated_gems_by_groups [] ) :group_by)\n      (args\n        (arg :g))\n      (send\n        (lvar :g) :[]\n        (sym :groups))) :sort) :flat_map) compact ","(send\n  (send nil :outdated_outdated_gems_by_groups [] ) :group_by) sort flat_map ","(send\n  (send nil :outdated_ outdated_gems_by_groups [] ) :group_by) sort flat_map ","(send\n  (send nil :outdated_outdated_gems_by_groups [] ) :group_by) sort ","(send\n  (send nil :outdated_ outdated_gems_by_groups [] ) :group_by) sort "," outdated_outdated_gems_by_groups []  group_by "," outdated_ outdated_gems_by_groups []  group_by "," outdated_outdated_gems_by_groups []  empty? "," outdated_ outdated_gems_by_groups []  empty? "," outdated_outdated_gems_by_groups []  << "," outdated_ outdated_gems_by_groups []  << ","  options keys &  empty? ","gemfile_specs +  sort_by uniq each ","gemfile_specs +  sort_by uniq "]}," Bundler Outdated initialize":{"type":"method","name":"initialize","children":[],"call":["Bundler CLI Common  patch_level_options any? ","Bundler CLI Common  patch_level_options ","options [] ","options keys include? ","v to_s ","options keys ","(sym :group) any? ","options keys & "," Array "]}," Bundler Open run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","command join ","Bundler  ui "," system ","Shellwords  split + ","Shellwords  split ","Dir  chdir ","Bundler CLI Common  select_spec full_gem_path ","Bundler CLI Common  select_spec "," name ","e empty? ! ","e empty? ","e nil? ! ","e nil? ","(send\n  (const nil :ENV) :[]\n  (str \"BUNDLER_EDITOR\")) find ","ENV  [] ","Bundler  with_clean_env ","spec full_gem_path ","Bundler  with_original_env ","spec default_gem? "," require ","Shellwords  split << ","File  join ","(lvar :root_path) compact "," path "," raise ","@path empty? ","@path nil? ! ","@path nil? ","Shellwords  split +  join ","Shellwords  split <<  join ","Bundler CLI Common  select_spec full_gem_Bundler CLI Common  select_spec full_gem_path  ","Bundler CLI Common  select_spec full_gem_spec full_gem_path  ","Bundler CLI Common  select_Bundler CLI Common  select_spec  full_gem_path ","Bundler CLI Common  select_spec spec full_gem_path  ","Bundler CLI Common  select_Bundler CLI Common  select_spec  ","spec full_gem_Bundler CLI Common  select_spec full_gem_path  ","spec full_gem_spec full_gem_path  ","Bundler CLI Common  select_spec  full_gem_path ","spec spec full_gem_path  ","Bundler CLI Common  select_spec  default_gem? ","(lvar :root_Bundler CLI Common  select_spec full_gem_path ) compact ","(lvar :root_spec full_gem_path ) compact ","(lvar :spec full_gem_path ) compact "," Bundler CLI Common  select_spec full_gem_path  "," spec full_gem_path  ","@Bundler CLI Common  select_spec full_gem_path  empty? ","@spec full_gem_path  empty? ","@Bundler CLI Common  select_spec full_gem_path  nil? ! ","@spec full_gem_path  nil? ! ","@Bundler CLI Common  select_spec full_gem_path  nil? ","@spec full_gem_path  nil? "]}," Bundler Open initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options [] nil? "]}," Bundler Lock run":{"type":"method","name":"run","children":[],"call":["Bundler  ui= ","definition lock "," puts ","Bundler  default_lockfile ","File  expand_path "," options [] "," options ","definition to_lock ","definition resolve_remotely! ","Bundler  definition ","UI Silent  new ","Bundler  ui "," exit ","Bundler  ui error ","Bundler  default_gemfile ","gems empty? ! ","gems empty? ","Bundler Fetcher  disable_endpoint= "," raise ","definition platforms empty? ","definition platforms ","definition add_platform ","Bundler  ui warn ","platform to_a compact == ","platform to_a compact ","platform to_a ","Gem Platform  new "," options [] each ","definition remove_platform ","platform to_s == ","platform to_s ","Bundler CLI Common  configure_gem_version_promoter ","update is_a? ","Bundler CLI Common  ensure_all_gems_in_lockfile! ","Bundler  ui level= ","Bundler  ui level ","Bundler  Bundler  ui = ","Bundler  definition  lock ","Bundler  default_lockBundler  default_lockfile  ","Bundler  default_lockFile  expand_path  ","Bundler  default_lock options []  ","Bundler  definition  to_lock ","Bundler  definition  resolve_remotely! ","Bundler  Bundler  definition  ","Bundler  Bundler  ui  ","Bundler  Bundler  ui  error ","Bundler  default_gemBundler  default_lockfile  ","Bundler  default_gemFile  expand_path  ","Bundler  default_gem options []  "," options []  empty? ! "," options []  empty? ","Bundler  definition  platforms empty? ","definition Gem Platform  new s empty? ","Bundler  definition  platforms ","definition Gem Platform  new s ","Bundler  definition  add_platform ","definition add_Gem Platform  new  ","Bundler  Bundler  ui  warn ","Gem Platform  new  to_a compact == ","Gem Platform  new  to_a compact ","Gem Platform  new  to_a ","Bundler  definition  remove_platform ","definition remove_Gem Platform  new  ","Gem Platform  new  to_s == ","Gem Platform  new  to_s "," options []  is_a? ","Bundler CLI Common  ensure_all_gems_in_lockBundler  default_lockfile ! ","Bundler CLI Common  ensure_all_gems_in_lockFile  expand_path ! ","Bundler CLI Common  ensure_all_gems_in_lock options [] ! ","Bundler CLI Common  ensure_all_ options [] _in_lockfile! ","Bundler  Bundler  ui  level= ","Bundler  Bundler  ui  level "]}," Bundler Lock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Install print_post_install_message":{"type":"method","name":"print_post_install_message","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui confirm "]}," Bundler Install gems_installed_for":{"type":"method","name":"gems_installed_for","children":[],"call":["count == ","definition specs count ","definition specs ","definition specs count  == ","definition specs definition specs count  "]}," Bundler Install dependencies_count_for":{"type":"method","name":"dependencies_count_for","children":[],"call":["count == ","definition dependencies count ","definition dependencies ","definition dependencies count  == ","definition dependencies definition dependencies count  "]}," Bundler Install confirm_without_groups":{"type":"method","name":"confirm_without_groups","children":[],"call":["Bundler  ui confirm ","Bundler CLI Common  without_groups_message ","Bundler  ui "," require ","Bundler  settings without any? ","Bundler  settings without ","Bundler  settings "]}," Bundler Install warn_if_root":{"type":"method","name":"warn_if_root","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Process  uid zero? ! ","Process  uid zero? ","Process  uid ","Bundler  settings [] ","Bundler  settings ","Gem  win_platform? "]}," Bundler Install run":{"type":"method","name":"run","children":[],"call":[" raise ","Bundler  ui warn ","Bundler  ui ","Bundler  definition has_rubygems_remotes? ","Bundler  definition ","Bundler  settings app_cache_path ","Bundler  settings ","Bundler  app_cache exist? ","Bundler  app_cache "," options [] "," options ","Bundler CLI Clean  new run ","Bundler CLI Clean  new "," require ","Bundler  settings [] ","Bundler  ui error ","also_found_in_uris each ","Installer  ambiguous_gems to_a each ","Installer  ambiguous_gems to_a ","Installer  ambiguous_gems "," print_post_install_message ","Installer  post_install_messages to_a each ","Installer  post_install_messages to_a ","Installer  post_install_messages ","Bundler  ui confirm ","absolute_path sub ","File  expand_path "," confirm_without_groups "," gems_installed_for "," dependencies_count_for ","Bundler  load cache ","Bundler  load ","Bundler  settings [] ! "," options [] ! ","Installer  install ","Bundler  root ","definition validate_ruby! ","Gem  load_env_plugins ","Gem  respond_to? ","Bundler  settings []= ","Bundler Fetcher  disable_endpoint= ","Bundler  settings with= ","Bundler  settings without= "," options [] empty? "," options []= ","Bundler  settings delete "," options [] == ","Bundler  default_lockfile exist? ","Bundler  default_lockfile "," exit ","Bundler  rubygems security_policies keys join ","Bundler  rubygems security_policies keys ","Bundler  rubygems security_policies ","Bundler  rubygems ","Bundler  rubygems security_policies keys include? ","Bundler  ui shell= ","Thor Shell Basic  new ","ENV  []= ","group to_s ","Bundler  settings without map ","Bundler  settings without "," options fetch ","Bundler  settings with map ","Bundler  settings with ","conflicting_groups join ","conflicting_groups empty? "," options [] & "," options [] join tr split "," options [] join tr "," options [] join ","(sym :with) each "," warn_if_root ","Bundler  ui level= ","Bundler  default_lockfile relative_path_from ","SharedHelpers  pwd "," check_for_options_conflicts "," warn_ambiguous_gems ","installer post_install_messages to_a each ","installer post_install_messages to_a ","installer post_install_messages ",". + ","File  expand_path + ","Plugin  gemfile_install ","Bundler  default_gemfile ","Bundler SharedHelpers  major_deprecation "," normalize_settings "," check_trust_policy "," normalize_groups "," check_for_group_conflicts "," warn_if_outdated ","Bundler CLI Common  output_post_install_messages ","Bundler CLI Common  output_without_groups_message ","definition validate_runtime! ","Bundler  feature_flag plugins? ","Bundler  feature_flag ","CLI Common  clean_after_install? ","Bundler  configured_bundle_path base_path ","Bundler  configured_bundle_path ","Bundler  use_system_gems? ","Bundler  frozen? ! ","Bundler  frozen? ","Bundler  settings set_command_option ","Bundler  feature_flag deployment_means_frozen? ","Bundler SharedHelpers  set_env ","Bundler  frozen_bundle? ! ","Bundler  frozen_bundle? ","Bundler  configured_bundle_path base_path_relative_to_pwd ","Bundler  definition rubygems_remotes empty? ","Bundler  definition rubygems_remotes ","Bundler  ui info "," without_groups_messages ","Bundler  root join exist? ","Bundler  root join ","g tr "," options [] map "," require_relative ","Bundler CLI Common  output_fund_metadata_summary ","Bundler  settings temporary ","Bundler  self_manager install_locked_bundler_and_restart_with_it_if_needed ","Bundler  self_manager ","Bundler  Bundler  definition  has_rubygems_remotes? ","Bundler  Bundler  definition  ","File  expand_path  sub "," confirm_ options fetch _groups "," confirm_ options fetch out_groups ","Bundler  definition  validate_ruby! ","Bundler  settings  options fetch = ","Bundler  settings  options fetch out= ","Bundler  settings  options fetch  map ","Bundler  settings  options fetch out map ","Bundler  settings  options fetch  ","Bundler  settings  options fetch out "," options [] &  join "," options [] &  empty? ","(sym : options fetch ) each ","Bundler  default_lockfile absolute_path sub _from ","Bundler  default_lockfile Bundler  configured_bundle_path base_path_relative_to_pwd _from ","Installer  install  post_install_messages to_a each ","Installer  install  post_install_messages to_a ","Installer  install  post_install_messages ","Bundler CLI Common  output_ options fetch _groups_message ","Bundler CLI Common  output_ options fetch out_groups_message ","Bundler  definition  validate_runtime! ","Bundler  Bundler  definition  rubygems_remotes empty? ","Bundler  Bundler  definition  rubygems_remotes ","  options fetch _groups_messages ","  options fetch out_groups_messages ","Bundler  self_manager install_locked_bundler_and_restart_ options fetch _it_if_needed "]}," Bundler Install initialize":{"type":"method","name":"initialize","children":[],"call":["options dup "]}," Bundler Inject run":{"type":"method","name":"run","children":[],"call":["Bundler  ui confirm ","Bundler  ui ","(send\n  (lvar :added) :map) join ","added map ","added any? ","Injector  inject ","deps << ","Bundler Dependency  new "," gems each_slice "," gems "," gems unshift unshift "," name "," gems unshift "," version "," options ","gem_version start_with? ","ops any? ","Gem Requirement OPS  map "," gems unshift unshift unshift unshift "," gems unshift unshift unshift "," group "," source ","d source ","d source nil? ","d groups inspect ","d groups ","d groups != "," Array ","d requirement ","d name ","(send\n  (lvar :Injector  inject ) :map) join ","Injector  inject  map ","Injector  inject  any? "]}," Bundler Inject initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," last_version_number ","options [] split ","options [] nil? "]}," Bundler Init run":{"type":"method","name":"run","children":[],"call":["FileUtils  cp ","File  expand_path "," puts ","Dir  pwd ","file << ","spec to_gemfile ","File  open ","Gem Specification  load "," exit ","Bundler  ui error ","Bundler  ui ","File  exist? "," options [] "," options ","SharedHelpers  pwd ","Bundler  load_gemspec_uncached "," gemfile ","File  writable? "," __dir__ ","IO  copy_stream ","Gem Specification  load  to_gemfile ","Bundler  load_gemspec_uncached  to_gemfile ","Bundler  load_gemGem Specification  load _uncached ","Bundler  load_gemBundler  load_gemspec_uncached _uncached ","Bundler  load_File  expand_path _uncached "]}," Bundler Init initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Gem ensure_safe_gem_name":{"type":"method","name":"ensure_safe_gem_name","children":[],"call":[" exit ","Bundler  ui error ","constant_array join ","Bundler  ui ","c const_get ","c const_defined? ","constant_array inject ","name =~ ","Object  const_defined? ","constant_array first ","(str \"^\\\\d\") match? "]}," Bundler Gem bundler_dependency_version":{"type":"method","name":"bundler_dependency_version","children":[],"call":["req join ","req << ","v prerelease? ","v segments [] ","v segments ","Gem Version  new ","v segments last ","v segments []  join ","v segments []  << ","Gem Version  new  prerelease? ","Gem Version  new  segments [] ","Gem Version  new  segments ","Gem Version  new  segments last "]}," Bundler Gem ask_and_set_test_framework":{"type":"method","name":"ask_and_set_test_framework","children":[],"call":["Bundler  settings set_global ","Bundler  settings ","Bundler  settings [] nil? ","Bundler  settings [] ","result =~ ","Bundler  ui ask ","Bundler  ui ","Bundler  ui confirm ","test_framework nil? "," options [] "," options ","test_framework == ","Bundler  ui info "," options [] == "," hint_text ","test_framework to_s empty? ","test_framework to_s ","(str \"rspec|minitest|test-unit\") match? ","Bundler  ui ask  =~ "]}," Bundler Gem validate_ext_name":{"type":"method","name":"validate_ext_name","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui "," gem_name index "," gem_name "]}," Bundler Gem ask_and_set":{"type":"method","name":"ask_and_set","children":[],"call":["Bundler  settings set_global ","Bundler  settings ","Bundler  ui yes? ","Bundler  ui ","Bundler  ui confirm ","choice nil? ","Bundler  settings [] "," options [] "," options ","Bundler  ui ask == ","Bundler  ui ask ","result nil? ","Bundler  settings all include? ! ","Bundler  settings all include? ","Bundler  settings all ","Bundler  ui ask =~ ","Bundler  ui yes?  nil? ","Bundler  settings []  nil? "," options []  nil? ","Bundler  ui ask ==  nil? "]}," Bundler Gem resolve_name":{"type":"method","name":"resolve_name","children":[],"call":["Pathname  pwd join basename to_s ","Pathname  pwd join basename ","Pathname  pwd join ","Pathname  pwd ","SharedHelpers  pwd join basename to_s ","SharedHelpers  pwd join basename ","SharedHelpers  pwd join ","SharedHelpers  pwd "]}," Bundler Gem run":{"type":"method","name":"run","children":[],"call":[" thor run "," target join "," name "," target "," options [] "," options "," thor ","Dir  chdir ","Bundler  ui info ","Bundler  ui ","path chmod ","path stat mode | ","path stat mode ","path stat ","executables each "," thor template ","templates each ","templates merge! ","config []= "," ask_and_set_test_framework "," ask_and_set "," ensure_safe_gem_name "," bundler_dependency_version ","git_user_email empty? ","git_user_name empty? ","(str \"git config user.email\") chomp ","(str \"git config user.name\") chomp ","constant_name split ","2 to_s + ","3 upcase ","2 to_s ","(send\n  (send nil :name) :gsub\n  (regexp\n    (str \"-[_-]*(?![_-]|$)\")\n    (regopt))) gsub "," name gsub "," name tr ","Bundler  ui confirm ","TEST_FRAMEWORK_VERSIONS  [] "," options [] == "," open_editor ","config [] ","config [] == "," raise ","GenericSystemCallError  new ","SharedHelpers  filesystem_access ","github_username empty? ","git_author_name empty? ","(str \"git config github.user\") chomp ","Bundler  git_present? ","File  join ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join ","q [] upcase + ","q [] ","q [] upcase ","constant_name split map ","constant_name =~ ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join ","p [] upcase + ","p [] ","p [] upcase ","name split map ","name split ","Dir  pwd ","name tr "," gem_name chomp "," gem_name "," exit ","Bundler  ui error "," gem_name index ","(send\n  (send\n    (send nil :name) :split\n    (str \"_\")) :map) join ","p empty? "," name split map "," name split "," opts [] "," opts "," ask_and_set_ci ","Bundler  preferred_gemfile_name ","Gem  ruby_version < ","Gem Version  new ","Gem  ruby_version ","File  read split last chomp ","File  read split last ","File  read split ","File  read ","Bundler BundlerError  all_errors [] ","Bundler BundlerError  all_errors ","File  directory? ! ","File  directory? ","File  exist? "," options [] nil? "," target to_s shellescape "," target to_s "," require "," target directory? ! "," target directory? "," target exist? "," rubocop_version "," required_ruby_version "," standard_version "," ask_and_set_linter ","paths join ","paths []= ","paths [] ","namespaced_path rpartition ","(send\n  (send\n    (lvar :constant_array) :clone) :tap) join ","a []= ","a [] ","constant_array clone tap ","constant_array clone "," extension == "," extension "," rust_builder_required_rubygems_version "," File  join  join ","  gem_name chomp  "," File  join  "," target join  chmod "," target join  stat mode | "," target join  stat mode "," target join  stat "," ask_and_set_ ask_and_set_test_framework  "," ensure_safe_gem_ gem_name chomp  ","(str \"git config user.email\") chomp  empty? ","(str \"git config user.name\") chomp  empty? ","git_user_ gem_name chomp  empty? ","(str \"git config user. gem_name chomp \") chomp ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  split ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  split ","(send\n  (send\n    (send nil :name) :split\n    (str \"_\")) :map) join  split ","constant_ gem_name chomp  split ","(send\n  (send nil : gem_name chomp ) :gsub\n  (regexp\n    (str \"-[_-]*(?![_-]|$)\")\n    (regopt))) gsub ","  gem_name chomp  gsub ","  gem_name chomp  tr ","(str \"git config github.user\") chomp  empty? ","github_user gem_name chomp  empty? ","git_author_ gem_name chomp  empty? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :(send\n  (send\n    (send nil :name) :split\n    (str \"_\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :constant_ gem_name chomp ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  split map ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  split map ","(send\n  (send\n    (send nil :name) :split\n    (str \"_\")) :map) join  split map ","constant_ gem_name chomp  split map ","(send\n  (send\n    (lvar :constant_name) :split\n    (str \"-\")) :map) join  =~ ","(send\n  (send\n    (lvar :name) :split\n    (str \"_\")) :map) join  =~ ","(send\n  (send\n    (send nil :name) :split\n    (str \"_\")) :map) join  =~ ","constant_ gem_name chomp  =~ ","(send\n  (send\n    (lvar : gem_name chomp ) :split\n    (str \"_\")) :map) join "," gem_name chomp  split map "," gem_name chomp  split "," gem_name chomp  tr "," gem_ gem_name chomp  chomp "," gem_ gem_name chomp  "," gem_ gem_name chomp  index ","(send\n  (send\n    (send nil : gem_name chomp ) :split\n    (str \"_\")) :map) join ","  gem_name chomp  split map ","  gem_name chomp  split ","Bundler  preferred_gemfile_ gem_name chomp  "," File  join  to_s shellescape "," File  join  to_s "," File  join  directory? ! "," File  join  directory? "," File  join  exist? "," target join s join ","namespaced_path rpartition  join "," target join s []= ","namespaced_path rpartition  []= "," target join s [] ","namespaced_path rpartition  [] ","namespaced_ target join  rpartition "," name tr  rpartition ","name tr  rpartition "," gem_name chomp spaced_path rpartition ","(send\n  (send\n    (lvar :constant_name split ) :clone) :tap) join ","constant_name split  clone tap ","constant_name split  clone "]}," Bundler Gem initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_ext_name ","options [] ","Pathname  pwd join ","Pathname  pwd "," resolve_name ","SharedHelpers  pwd join ","SharedHelpers  pwd ","thor destination_root= ","thor behavior= "," travis_removal_info "," validate_rust_builder_rubygems_version ","@extension == ","options []  == "]}," Bundler Exec run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Bundler  ui warn "," cmd ","Kernel  exec "," args ","Bundler  load setup_environment ","Bundler  load ","Bundler  definition validate_ruby! ","Bundler  definition ","Bundler  which ","SharedHelpers  set_bundle_environment "," raise "," cmd nil? ","Bundler  ui= "," kernel_exec "," kernel_load "," ruby_shebang? "," validate_cmd! ","Bundler  current_ruby jruby_18? ","Bundler  current_ruby ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings "," args first "," options keep_file_descriptors? "," options ","@args << "," options keep_file_descriptors? ! ","RUBY_VERSION  >= "," with_verbose_rubygems ","Bundler  Bundler  ui  error ","Bundler  Bundler  ui  ","Bundler  Bundler  ui  warn ","Bundler  Bundler  ui = "]}," Bundler Exec initialize":{"type":"method","name":"initialize","children":[],"call":["Bundler  ui warn ","Bundler  ui ","options keep_file_descriptors? ","@args << ","options keep_file_descriptors? ! ","RUBY_VERSION  >= ","args shift ","Bundler  current_ruby jruby? ! ","Bundler  current_ruby jruby? ","Bundler  current_ruby ","Bundler  current_ruby ruby_2? "]}," Bundler Console get_constant":{"type":"method","name":"get_constant","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Object  const_get ","(pair\n  (str \"pry\")\n  (sym :Pry)) [] "]}," Bundler Console get_console":{"type":"method","name":"get_console","children":[],"call":[" get_constant ","Bundler  ui error ","Bundler  ui "," require "]}," Bundler Console run":{"type":"method","name":"run","children":[],"call":["console start "," get_console ","Bundler  settings [] ","Bundler  settings ","ARGV  clear ","Bundler  require ","g to_sym "," group split map! "," group split "," group ","Bundler SharedHelpers  major_deprecation ","Bundler  ui error ","Bundler  ui ","e inspect ","Object  const_get "," consoles [] "," consoles "," require ","Bundler  ui info "," get_console  start "," get_ get_console  ","  get_console s [] ","  get_console s "]}," Bundler Console initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Config run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Bundler  settings send ","Bundler  settings ","pathname expand_path to_s ","pathname expand_path ","pathname directory? ","Pathname  new "," args join "," args ","name match ","Bundler  ui info ","locations [] inspect ","locations [] ","locations [] != ","scope == ","Bundler  settings locations ","Bundler  settings pretty_values_for each ","Bundler  settings pretty_values_for "," thor with_padding "," thor ","Bundler  ui confirm "," args empty? ","Bundler  settings set_global ","Bundler  settings set_local ","Bundler  settings all each ","Bundler  settings all "," args shift ","peek =~ "," args= ","local inspect ","global inspect ","env inspect "," new_value "," name "," scope "," message "," confirm "," scope == "," valid_scope? "," confirm_all ","Bundler  settings [] "," options [] "," options ","Pathname  new  expand_path to_s ","Pathname  new  expand_path ","Pathname  new  directory? ","Bundler  settings locations  [] inspect ","Bundler  settings locations  [] ","Bundler  settings locations  [] != ","Bundler  settings Bundler  settings locations  ","Bundler  settings pretty_Bundler  settings [] s_for each ","Bundler  settings pretty_Bundler  settings [] s_for ","Bundler  settings set_locations []  "," args shift  =~ ","locations []  inspect "," pathname expand_path to_s  ","  args join  "," new_Bundler  settings []  "]}," Bundler Config initialize":{"type":"method","name":"initialize","children":[],"call":["args shift ","peek =~ ","peek [] ","peek start_with? ","args shift  =~ ","args shift  [] ","args shift  start_with? "]}," Bundler Common gem_not_found_message":{"type":"method","name":"gem_not_found_message","children":[],"call":[]}," Bundler Common ask_for_spec_from":{"type":"method","name":"ask_for_spec_from","children":[],"call":[]}," Bundler Common select_spec":{"type":"method","name":"select_spec","children":[],"call":[]}," Bundler Common without_groups_message":{"type":"method","name":"without_groups_message","children":[],"call":[]}," Bundler Clean require_path_or_force":{"type":"method","name":"require_path_or_force","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui "," options [] ! "," options [] "," options ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings "," raise ","Bundler  use_system_gems? "]}," Bundler Clean run":{"type":"method","name":"run","children":[],"call":["Bundler  load clean "," options [] "," options ","Bundler  load "," require_path_or_force "," exit ","Bundler  ui error ","Bundler  ui ","Bundler  settings [] ","Bundler  settings "]}," Bundler Clean initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Check run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  load lock ","Bundler  load "," options [] "," options "," exit ","Bundler  ui error ","Bundler  settings [] ","Bundler  settings ","Bundler  default_lockfile exist? ! ","Bundler  default_lockfile exist? ","Bundler  default_lockfile ","Bundler  ui warn ","s version ","s name ","not_installed each ","not_installed any? ","definition missing_specs ","definition validate_ruby! ","Bundler  definition ","Bundler  settings []= ","File  expand_path ","Bundler  default_lockfile relative_path_from ","SharedHelpers  pwd ","Bundler  default_lockfile file? ! ","Bundler  default_lockfile file? ","definition validate_runtime! ","Bundler  frozen? ","Bundler  settings set_command_option_if_given ","Bundler  frozen_bundle? ","definition resolve_only_locally! ","definition resolve_with_cache! ","definition missing_specs  each ","definition missing_specs  any? ","Bundler  definition  missing_specs ","Bundler  definition  validate_ruby! ","Bundler  Bundler  definition  ","Bundler  definition  validate_runtime! ","Bundler  definition  resolve_only_locally! ","Bundler  definition  resolve_with_cache! "]}," Bundler Check initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Cache setup_cache_all":{"type":"method","name":"setup_cache_all","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","Bundler  definition has_local_dependencies? ","Bundler  definition ","Bundler  settings []= "," options [] "," options "," options key? ","Bundler  feature_flag cache_all? ! ","Bundler  feature_flag cache_all? ","Bundler  feature_flag ","Bundler  settings set_command_option_if_given ","s is_a? ! ","s is_a? ","Bundler  definition sources any? ","Bundler  definition sources "," options fetch ","Bundler  feature_flag cache_ options fetch ? ! ","Bundler  feature_flag cache_ options fetch ? "]}," Bundler Cache run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  ui warn ","Bundler  ui ","Bundler  ui error ","e message ","Bundler  load lock ","Bundler  load ","Bundler  settings []= ","Bundler  settings "," options [] "," options ","Bundler  load cache "," options key? "," setup_cache_all ","Bundler  definition resolve_with_cache! ","Bundler  definition ","Bundler  definition validate_ruby! ","Bundler  definition validate_runtime! ","Bundler  settings set_command_option_if_given ","Bundler  settings temporary ","Bundler  settings [] "," install ","Bundler  ui level= "]}," Bundler Cache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Binstubs run":{"type":"method","name":"run","children":[],"call":["installer generate_bundler_executable_stubs "," options [] "," options ","Bundler  ui warn ","Bundler  ui ","spec name == ","spec name "," raise ","Bundler CLI Common  gem_not_found_message ","Bundler  definition specs ","Bundler  definition ","s name == ","s name ","installer specs find ","installer specs "," gems each "," gems "," exit ","Bundler  ui error "," gems empty? ","Installer  new ","Bundler  root ","Bundler  settings []= ","Bundler  settings "," options [] empty? ","Bundler  definition validate_ruby! ","installer generate_standalone_bundler_executable_stubs ","Bundler  definition specs find ","Bundler  definition validate_runtime! ","Bundler  settings temporary ","Bundler  settings [] ","gem_name == ","Bundler  settings set_command_option_if_given ","Bundler  settings set_command_option ","path_option empty? ","installer_opts delete ","Bundler  definition specs map ","Installer  new  generate_bundler_executable_stubs ","Installer  new  specs find ","Installer  new  specs ","Installer  new  generate_standalone_bundler_executable_stubs "," options []  empty? ","Installer  new _opts delete "]}," Bundler Binstubs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler cleanup":{"type":"method","name":"cleanup","children":[],"call":["FileUtils  remove_entry_secure "]}," Bundler RubygemsIntegration MoreFuture ext_lock":{"type":"method","name":"ext_lock","children":[],"call":[]}," Bundler RubygemsIntegration Transitional validate":{"type":"method","name":"validate","children":[],"call":["spec validate ","Bundler  ui silence ","Bundler  ui ","spec summary ","RubygemsIntegration  instance_method bind call ","RubygemsIntegration  instance_method bind ","RubygemsIntegration  instance_method "]}," Bundler EndpointSpecification load_paths":{"type":"method","name":"load_paths","children":[],"call":[" _local_specification load_paths "," _local_specification "]}," Bundler Dsl DSLError to_s":{"type":"method","name":"to_s","children":[],"call":["m << ","m end_with? ","lines [] ","line_numer + ","line_numer - ","trace_line gsub ","line_numer == ","lines count - ","lines count ","line_numer zero? ","indent gsub "," contents lines to_a "," contents lines "," contents ","trace_line split [] to_i - ","trace_line split [] to_i ","trace_line split [] ","trace_line split ","l include? "," dsl_path to_s "," dsl_path "," backtrace find "," backtrace "," parse_line_number_from_description ","indent tr ","String  new ","String  new  << ","String  new  end_with? "," contents lines to_a  [] ","trace_line split [] to_i -  + ","line_nuString  new er + ","trace_line split [] to_i -  - ","line_nuString  new er - ","trace_line split [] to_i -  == ","line_nuString  new er == "," contents lines to_a  count - "," contents lines to_a  count ","trace_line split [] to_i -  zero? ","line_nuString  new er zero? "," contents  contents lines to_a  to_a "," contents  contents lines to_a  "," parse_line_nuString  new ber_froString  new _description "]}," Bundler EndpointSpecification extensions":{"type":"method","name":"extensions","children":[],"call":[" _local_specification extensions "," _local_specification ","@remote_specification extensions "]}," Bundler Definition lockfiles_equal?":{"type":"method","name":"lockfiles_equal?","children":[],"call":["current == ","current sub == ","proposed sub ","current sub ","proposed gsub gsub strip ","proposed gsub gsub ","proposed gsub ","current gsub gsub strip ","current gsub gsub ","current gsub ","Regexp  union ","LockfileParser  unknown_sections_in_lockfile ","LockfileParser  sections_to_ignore ","sections_to_ignore << ","current gsub gsub strip  == ","current gsub gsub strip  sub == ","proposed gsub gsub strip  sub ","current gsub gsub strip  sub ","proposed gsub gsub strip  gsub gsub strip ","proposed gsub gsub strip  gsub gsub ","proposed gsub gsub strip  gsub ","current gsub gsub strip  gsub gsub strip ","current gsub gsub strip  gsub gsub ","current gsub gsub strip  gsub ","LockfileParser  LockfileParser  sections_to_ignore  ","LockfileParser  sections_to_ignore  << "]}," Bundler Source Rubygems installed?":{"type":"method","name":"installed?","children":[],"call":[" installed_specs [] any? "," installed_specs [] "," installed_specs ","spec deleted_gem? ! ","spec deleted_gem? "]}," Bundler RemoteSpecification sort_obj":{"type":"method","name":"sort_obj","children":[],"call":["@platform == "]}," Bundler RemoteSpecification <=>":{"type":"method","name":"<=>","children":[],"call":[" sort_obj <=> ","other sort_obj "," sort_obj ","other respond_to? "]}," Molinillo ResolutionState empty":{"type":"method","name":"empty","children":[],"call":[]}," Molinillo Resolver Resolution handle_missing_or_push_dependency_state":{"type":"method","name":"handle_missing_or_push_dependency_state","children":[],"call":[" states push "," states "," push_state_for_requirements ","state activated ","state requirements dup ","state requirements ","state activated detach_vertex_named ","state name "," allow_missing? ","state requirement ","state possibilities empty? ","state possibilities "," activated tag "," activated "," states push tap "]}," Molinillo SpecificationProvider allow_missing?":{"type":"method","name":"allow_missing?","children":[],"call":[]}," Molinillo DependencyGraph Vertex recursive_predecessors":{"type":"method","name":"recursive_predecessors","children":[],"call":["vertices uniq! ","vertices map flatten ","vertices map "," predecessors ","Compatibility  flat_map "," _recursive_predecessors "," predecessors  uniq! "," predecessors  map flatten "," predecessors  map "]}," Molinillo DependencyGraph add_edge_no_circular":{"type":"method","name":"add_edge_no_circular","children":[],"call":["destination incoming_edges << ","destination incoming_edges ","origin outgoing_edges << ","origin outgoing_edges ","Edge  new "," log add_edge_no_circular ","destination name ","origin name "," log ","destination incoming_Edge  new s << ","destination incoming_Edge  new s ","origin outgoing_Edge  new s << ","origin outgoing_Edge  new s "," log add_Edge  new _no_circular "]}," Bundler Source Git GitProxy configured_uri_for":{"type":"method","name":"configured_uri_for","children":[],"call":["remote to_s ","remote userinfo ","Bundler  settings [] ","remote host ","Bundler  settings "," URI ","Bundler  URI "," URI  to_s ","Bundler  URI  to_s "," URI  userinfo ","Bundler  URI  userinfo "," URI  host ","Bundler  URI  host "]}," Bundler Source Git GitProxy uri_escaped_with_configured_credentials":{"type":"method","name":"uri_escaped_with_configured_credentials","children":[],"call":["' + + ","' + ","remote gsub ","\" + + ","\" + "," configured_uri_for "," uri "," configured_uri_for  gsub "]}," Bundler SharedHelpers filesystem_access":{"type":"method","name":"filesystem_access","children":[],"call":[" raise ","PermissionError  new ","VirtualProtocolError  new ","TemporaryResourceError  new ","OperationNotSupportedError  new ","(send nil :const_get_safely\n  (sym :ENOTSUP)\n  (const nil :Errno)) compact "," const_get_safely ","path dup untaint ","path dup ","GenericSystemCallError  new ","NoSpaceOnDeviceError  new ","block call ","x untaint ","RUBY_VERSION  < ","path dup tap "]}," Bundler Runtime remove_dir":{"type":"method","name":"remove_dir","children":[],"call":["FileUtils  rm_rf ","Bundler  ui info ","Bundler  ui ","parts last ","parts [] join ","parts [] ","full_name split ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new ","full_name split  last ","full_name split  [] join ","full_name split  [] ","full_parts [] join  split ","Pathname  new basename to_s  split ","Pathparts [] join   new baseparts [] join  to_s ","Pathparts [] join   new baseparts [] join  ","Pathparts [] join   new "]}," Bundler RubygemsIntegration Future gem_remote_fetcher":{"type":"method","name":"gem_remote_fetcher","children":[],"call":["Bundler GemRemoteFetcher  new ","Resolv DNS  new "," configuration [] "," configuration "," require "]}," Bundler RubyGemsGemInstaller check_executable_overwrite":{"type":"method","name":"check_executable_overwrite","children":[],"call":[]}," Bundler Retry fail_attempt":{"type":"method","name":"fail_attempt","children":[],"call":["Bundler  ui warn ","e message ","e class "," total_runs "," current_run next "," current_run "," name ","Bundler  ui "," raise ","e is_a? ","@exceptions any? "," last_attempt? ","Bundler  ui debug? ","Bundler  ui info "]}," Bundler Resolver VersionConflict printable_dep":{"type":"method","name":"printable_dep","children":[],"call":["dep to_s ","DepProxy  new to_s strip ","DepProxy  new to_s ","DepProxy  new ","dep platforms join ","dep platforms ","dep is_a? "]}," Bundler Installer resolve_if_need":{"type":"method","name":"resolve_if_need","children":[],"call":["@definition resolve_remotely! ","@definition resolve_with_cache! ","options [] ","tmpdef missing_specs any? ","tmpdef missing_specs ","tmpdef new_platform? ","Definition  build ","Bundler  default_lockfile ","Bundler  default_gemfile ","Bundler  ui silence ","Bundler  ui ","options [] ! ","Bundler  default_lockfile exist? ","tmpdef missing_dependencies any? ","tmpdef missing_dependencies ","Bundler  default_lockfile file? ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","Definition  build  missing_specs any? ","Definition  build  missing_specs ","Definition  build  new_platform? ","Definition  build  missing_dependencies any? ","Definition  build  missing_dependencies "]}," Bundler Standalone gem_path":{"type":"method","name":"gem_path","children":[],"call":["Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Bundler  root join "," bundler_path ","Bundler  root ","Pathname  new ","File  join ","spec full_gem_path ","Pathname  new absolute? "," raise ","Gem InvalidSpecificationException  new ","spec version ","spec name ","spec source instance_of? ","spec source ","spec source path absolute? ","spec source path "]}," Bundler Standalone bundler_path":{"type":"method","name":"bundler_path","children":[],"call":["File  join ","Bundler  settings [] ","Bundler  settings ","Bundler  root join ","Bundler  root ","Bundler  settings [] to_s "]}," Bundler Standalone version_dir":{"type":"method","name":"version_dir","children":[],"call":["RbConfig CONFIG  [] ","Bundler  ruby_version engine ","Bundler  ruby_version ","Bundler RubyVersion  system engine ","Bundler RubyVersion  system ","Gem  ruby_api_version "]}," Bundler Standalone paths":{"type":"method","name":"paths","children":[],"call":["(send\n  (ivar :@specs) :map) flatten "," gem_path sub "," version_dir "," gem_path "," Array map "," Array ","spec require_paths ","spec name == ","spec name ","@specs map ","(send\n  (ivar :@specs) :map) flatten compact "," gem_path sub sub "," extensions_dir "]}," Bundler Standalone generate":{"type":"method","name":"generate","children":[],"call":["file puts "," paths each "," paths ","File  open ","File  join "," bundler_path ","FileUtils  mkdir_p ","SharedHelpers  filesystem_access "," reverse_rubygems_kernel_mixin ","Pathname  new absolute? ","Pathname  new "," define_path_helpers "]}," Bundler Standalone initialize":{"type":"method","name":"initialize","children":[],"call":["definition specs_for ","groups map ","definition requested_specs ","groups empty? "]}," Bundler GemInstaller generate_executable_stubs":{"type":"method","name":"generate_executable_stubs","children":[],"call":[" installer generate_bundler_executable_stubs "," spec "," installer ","Bundler  settings [] ","Bundler  settings "," installer generate_standalone_bundler_executable_stubs "," standalone ","Bundler  feature_flag forget_cli_options? ","Bundler  feature_flag "]}," Bundler GemInstaller out_of_space_message":{"type":"method","name":"out_of_space_message","children":[],"call":[" install_error_message "]}," Bundler GemInstaller install_with_settings":{"type":"method","name":"install_with_settings","children":[],"call":[" install ","Bundler  rubygems with_build_args "," spec_settings ","Bundler  rubygems ","Bundler  rubygems install_with_build_args "]}," Bundler GemInstaller install":{"type":"method","name":"install","children":[],"call":[" spec source install "," standalone "," force "," spec "," spec source "," spec_settings "," Array "," previous_spec "]}," Bundler GemInstaller spec_settings":{"type":"method","name":"spec_settings","children":[],"call":["Bundler  settings [] "," spec name "," spec ","Bundler  settings ","Shellwords  shellsplit "," require ","Bundler  Bundler  settings []  [] ","Bundler  Bundler  settings []  "]}," Bundler GemInstaller handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" raise "," failure_message ","Bundler  ui debug ","e backtrace join ","e backtrace ","Bundler  ui ","Bundler  ui warn ","e message ","e class ","Bundler  ui info ","e is_a? "]}," Bundler GemInstaller gem_install_message":{"type":"method","name":"gem_install_message","children":[],"call":[" spec version "," spec "," spec name ","remotes first ","remotes size == ","remotes size "," spec source remotes "," spec source ","source remotes first ","source remotes ","source remotes size == ","source remotes size ","source respond_to? "," spec source remotes  first "," spec source remotes  size == "," spec source remotes  size "," spec source  spec source remotes  "," spec  spec source  remotes "," spec  spec source  ","source  spec source remotes  first "," spec source  remotes first ","source  spec source remotes  "," spec source  remotes ","source  spec source remotes  size == "," spec source  remotes size == ","source  spec source remotes  size "," spec source  remotes size "," spec source  respond_to? "]}," Bundler GemInstaller install_error_message":{"type":"method","name":"install_error_message","children":[],"call":[" spec version "," spec "," spec name "]}," Bundler GemInstaller failure_message":{"type":"method","name":"failure_message","children":[],"call":[" gem_install_message "," install_error_message "," spec source options [] "," spec source options "," spec source "," spec "]}," Bundler GemInstaller install_from_spec":{"type":"method","name":"install_from_spec","children":[],"call":[" handle_exception "," raise "," out_of_space_message "," generate_executable_stubs ","Bundler  ui debug "," spec loaded_from "," spec "," spec version "," spec name "," worker ","Bundler  ui "," install "," install_with_settings "," spec_settings "," specific_failure_message "]}," Bundler GemInstaller initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler GemRemoteFetcher fetch_http":{"type":"method","name":"fetch_http","children":[],"call":[" raise ","FetchError  new ","response code ","response message "," fetch_http ","depth + "," https? ! "," https? ","URI  parse ","response [] ","depth > ","response body ","response uri= ","response respond_to? ","req add_field "," headers each "," headers "," request "]}," Bundler Fetcher http_proxy":{"type":"method","name":"http_proxy","children":[],"call":["uri to_s "," connection proxy_uri "," connection "," connection proxy_uri  to_s "," connection proxy_ connection proxy_uri  "]}," Bundler Fetcher specs_with_retry":{"type":"method","name":"specs_with_retry","children":[],"call":[" specs ","Bundler Retry  new attempts ","Bundler Retry  new "]}," Bundler Fetcher Base fetch_uri":{"type":"method","name":"fetch_uri","children":[],"call":[" remote_uri ","uri host= "," remote_uri dup "," remote_uri host == "," remote_uri host "," remote_ remote_uri dup  "," remote_uri dup  host= "," remote_ remote_uri dup  dup "," remote_ remote_uri dup  host == "," remote_ remote_uri dup  host "]}," Bundler Fetcher Base remote_uri":{"type":"method","name":"remote_uri","children":[],"call":["@remote uri "]}," Bundler YAMLSyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler PermissionError message":{"type":"method","name":"message","children":[],"call":["@permission_type to_s "," action "," permission_type "]}," Bundler PermissionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler GemRequireError initialize":{"type":"method","name":"initialize","children":[],"call":["msg + ","orig_exception backtrace join ","orig_exception backtrace ","orig_exception message "]}," Bundler CurrentRuby x64_mingw_23?":{"type":"method","name":"x64_mingw_23?","children":[],"call":[" on_23? "," x64_mingw? "]}," Bundler CurrentRuby mingw_23?":{"type":"method","name":"mingw_23?","children":[],"call":[" on_23? "," mingw? "]}," Bundler CurrentRuby mswin64_23?":{"type":"method","name":"mswin64_23?","children":[],"call":[" on_23? "," mswin64? "]}," Bundler CurrentRuby mswin_23?":{"type":"method","name":"mswin_23?","children":[],"call":[" on_23? "," mswin? "]}," Bundler CurrentRuby mri_23?":{"type":"method","name":"mri_23?","children":[],"call":[" on_23? "," mri? "]}," Bundler CurrentRuby ruby_2?":{"type":"method","name":"ruby_2?","children":[],"call":[" on_2? "," ruby? "]}," Bundler CurrentRuby ruby_23?":{"type":"method","name":"ruby_23?","children":[],"call":[" on_23? "," ruby? "]}," Bundler CurrentRuby on_2?":{"type":"method","name":"on_2?","children":[],"call":[" on_23? "," on_22? "," on_21? "," on_20? "]}," Bundler CurrentRuby on_23?":{"type":"method","name":"on_23?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler Config valid_scope?":{"type":"method","name":"valid_scope?","children":[],"call":["(str \"delete\") include? "]}," Bundler Config show_pretty_values_for":{"type":"method","name":"show_pretty_values_for","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  settings pretty_values_for each ","Bundler  settings pretty_values_for ","Bundler  settings "," thor with_padding "," thor "]}," Bundler Config message":{"type":"method","name":"message","children":[],"call":["locations [] inspect ","locations [] "," name ","locations [] != "," args join "," args "," scope == "," scope ","Bundler  settings locations ","Bundler  settings "," new_value ","@options [] ","Bundler  settings locations  [] inspect ","Bundler  settings locations  [] ","Bundler  settings locations  [] != ","Bundler  settings Bundler  settings locations  "]}," Bundler Config new_value":{"type":"method","name":"new_value","children":[],"call":[" args join "," args ","pathname expand_path to_s ","pathname expand_path ","pathname directory? "," name match "," name ","Pathname  new "," name start_with? ","Pathname  new  expand_path to_s ","Pathname  new  expand_path ","Pathname  new  directory? "]}," Bundler Config confirm":{"type":"method","name":"confirm","children":[],"call":[" show_pretty_values_for ","Bundler  ui confirm ","Bundler  ui "]}," Bundler Config confirm_all":{"type":"method","name":"confirm_all","children":[],"call":["Bundler  ui confirm ","Bundler  ui "," show_pretty_values_for ","Bundler  settings all each ","Bundler  settings all ","Bundler  settings ","Bundler  ui info ","Bundler  settings [] "," thor with_padding "," thor ","@options [] "," show_pretty_Bundler  settings [] ues_for "]}," Bundler YamlSyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler with_env":{"type":"method","name":"with_env","children":[],"call":["ENV  replace ","ENV  to_hash "]}," Bundler clean_env":{"type":"method","name":"clean_env","children":[],"call":["env []= ","rubylib join ","rubylib delete ","File  expand_path ","env [] split ","env [] ","env key? ","env [] sub ","k [] == ","k [] ","env delete_if "," original_env ","Bundler SharedHelpers  major_deprecation "," unbundled_env "," original_env  []= ","env [] split  join ","env [] split  delete "," original_env  [] split "," original_env  [] "," original_env  key? "," original_env  [] sub "," original_env  delete_if "," original_ original_env  "," unbundled_ original_env  "]}," Bundler original_env":{"type":"method","name":"original_env","children":[],"call":["ORIGINAL_ENV  clone "]}," Bundler user_cache":{"type":"method","name":"user_cache","children":[],"call":[" user_bundle_path join "," user_bundle_path "]}," Molinillo Resolver Resolution new_spec_satisfied?":{"type":"method","name":"new_spec_satisfied?","children":[],"call":[" debug "," depth "," requirement_satisfied_by? "," possibility "," activated ","locked_requirement ! "," requirement "," locked_requirement_named "," name "," locked_requirement_named  ! ","  locked_requirement_named _named "]}," Molinillo Resolver Resolution fixup_swapped_children":{"type":"method","name":"fixup_swapped_children","children":[],"call":[" name_for == ","succ name "," name_for "," requirements delete_if "," requirements "," activated detach_vertex_named "," activated "," name "," debug "," depth ","succ predecessors to_a == ","succ predecessors to_a ","succ predecessors ","succ root? ! ","succ root? ","dep_names include? ! ","dep_names include? ","vertex successors each ","vertex successors "," dependencies_for map "," method "," dependencies_for ","vertex payload ","all_successor_names include? ","requirement_name == ","succ recursive_successors map ","succ recursive_successors "," requirements delete ","outgoing_edge requirement "," activated delete_edge ","matching_deps include? ! ","matching_deps include? ","removed_names include? "," activated detach_vertex_named map ","@parent_of delete ","succ requirements each ","succ requirements ","matching_deps empty? "," Array ","deps [] ","outgoing_edge destination ","@parent_of []= "," states size - "," states size "," states ","vertex outgoing_edges each ","vertex outgoing_edges "," dependencies_for group_by ","@parent_of [] nil? ","@parent_of [] ","dep_matched ! "," states [] name == "," states [] name "," states [] ","@parents_of [] push ","@parents_of [] ","@parents_of [] empty? ","@parents_of delete ","@parents_of [] last ","outgoing_edge destination  name "," outgoing_edge requirement s delete_if "," outgoing_edge requirement s ","outgoing_edge destination  predecessors to_a == ","outgoing_edge destination  predecessors to_a ","outgoing_edge destination  predecessors ","outgoing_edge destination  root? ! ","outgoing_edge destination  root? "," dependencies_for map  include? ! "," dependencies_for map  include? ","vertex outgoing_edge destination essors each ","vertex outgoing_edge destination essors ","vertex vertex payload  ","succ recursive_successors map  include? ","all_outgoing_edge destination essor_names include? "," name_for  == ","outgoing_edge requirement _name == ","outgoing_edge destination  recursive_outgoing_edge destination essors map ","outgoing_edge destination  recursive_outgoing_edge destination essors "," outgoing_edge requirement s delete ","outgoing_edge outgoing_edge requirement  "," Array  include? ! ","matching_ dependencies_for group_by  include? ! "," Array  include? ","matching_ dependencies_for group_by  include? "," activated detach_vertex_named map  include? ","outgoing_edge destination  requirements each ","succ outgoing_edge requirement s each ","outgoing_edge destination  requirements ","succ outgoing_edge requirement s "," Array  empty? ","matching_ dependencies_for group_by  empty? "," dependencies_for group_by  [] ","matching_deps include?  ! "]}," CompactIndexClient url":{"type":"method","name":"url","children":[],"call":[]}," CompactIndexClient update_info":{"type":"method","name":"update_info","children":[],"call":[" update ","checksum == ","@info_checksums_by_name [] ","@updater checksum_for_file ","@cache info_path ","@updater checksum_for_file  == ","@info_@updater checksum_for_file s_by_name [] ","@updater @updater checksum_for_file _for_file ","@cache info_@cache info_path  "]}," CompactIndexClient update":{"type":"method","name":"update","children":[],"call":["@endpoints << ","@updater update "," url ","@endpoints include? ","@endpoints add? "]}," CompactIndexClient update_and_parse_checksums!":{"type":"method","name":"update_and_parse_checksums!","children":[],"call":["@cache checksums "," update ","@cache versions_path "]}," CompactIndexClient spec":{"type":"method","name":"spec","children":[],"call":["@cache specific_dependency "," update_info "]}," CompactIndexClient dependencies":{"type":"method","name":"dependencies","children":[],"call":["(send\n  (send nil :in_parallel) :call\n  (lvar :names)) flatten ","d unshift ","@cache dependencies map ","@cache dependencies "," update_info "," in_parallel call "," in_parallel "]}," CompactIndexClient versions":{"type":"method","name":"versions","children":[],"call":["@cache versions "," update ","@cache versions_path "]}," CompactIndexClient names":{"type":"method","name":"names","children":[],"call":["@cache names "," update ","@cache names_path "]}," CompactIndexClient initialize":{"type":"method","name":"initialize","children":[],"call":["inputs map "," lambda ","Set  new ","Cache  new ","Updater  new ","Pathname  new "]}," CompactIndexClient Updater checksum_for_file":{"type":"method","name":"checksum_for_file","children":[],"call":["Digest MD5  file hexdigest ","Digest MD5  file ","path file? ","Digest MD5  hexdigest ","IO  read "]}," CompactIndexClient Updater etag_for":{"type":"method","name":"etag_for","children":[],"call":["\" << << ","\" << "," checksum_for_file "," check checksum_for_file _for_file "]}," CompactIndexClient Updater update":{"type":"method","name":"update","children":[],"call":[" raise "," update ","local_path delete ","retrying nil? "," etag_for == ","response [] "," etag_for ","f << ","local_path open ","response is_a? ","Zlib GzipReader  new read ","Zlib GzipReader  new ","StringIO  new ","response [] == ","response body ","@fetcher call ","headers []= ","local_path size ","local_path file? ","MisMatchedChecksumError  new ","FileUtils  mv ","local_temp_path open ","local_temp_path size ","FileUtils  cp ","Pathname  new join ","local_path basename ","Pathname  new ","Dir  mktmpdir ","local_path dirname ","local_path basename to_s ","response [] gsub ","@fetcher call  [] ","@fetcher call  is_a? ","@fetcher call  [] == ","@fetcher call  body ","Pathname  new join  open ","Pathname  new join  size ","@fetcher call  [] gsub "]}," CompactIndexClient Updater initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CompactIndexClient Cache parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["dependency []= ","dependency [] split ","dependency [] ","dependency size > ","dependency size ","string split ","string split  []= ","string split  [] split ","string split  [] ","string split  size > ","string split  size "]}," CompactIndexClient Cache parse_gem":{"type":"method","name":"parse_gem","children":[],"call":[" parse_dependency ","requirements map ","dependencies map ","s split ","rest split map ","rest split ","version_and_platform split ","string split "]}," CompactIndexClient Cache lines":{"type":"method","name":"lines","children":[],"call":["lines [] ","header + ","lines index ","path read split ","path read ","path file? ","lines []  [] ","path read split  [] ","lines index  + ","lines []  index ","path read split  index "]}," CompactIndexClient Cache specific_dependency":{"type":"method","name":"specific_dependency","children":[],"call":[" parse_gem ","gem_lines [] ","Regexp  escape "," info_path read "," info_path ","pattern empty? ","(lvar :version) compact join ","(lvar :version) compact ","gem_lines [] s [] "," info_path read  [] ","(lvar :version) compact join  empty? "]}," CompactIndexClient Cache info_path":{"type":"method","name":"info_path","children":[],"call":[" directory join ","name to_s "," directory "," info_roots first join "," info_roots first "," info_roots "," info_roots last join "," info_roots last ","Digest MD5  hexdigest downcase ","Digest MD5  hexdigest ","name =~ ","name to_s  to_s ","name to_s  =~ "]}," CompactIndexClient Cache dependencies":{"type":"method","name":"dependencies","children":[],"call":[" parse_gem "," lines map "," lines "," info_path "]}," CompactIndexClient Cache checksums":{"type":"method","name":"checksums","children":[],"call":["checksums []= ","line split "," lines each "," lines "," versions_path "]}," CompactIndexClient Cache versions_path":{"type":"method","name":"versions_path","children":[],"call":[" directory join "," directory "]}," CompactIndexClient Cache versions":{"type":"method","name":"versions","children":[],"call":["versions_by_name [] << ","versions_by_name [] ","version split unshift ","version split ","versions_by_name [] delete ","version [] split unshift ","version [] split ","version [] ","version start_with? ","versions_string split each ","versions_string split ","info_checksums_by_name []= ","line split "," lines each "," lines "," versions_path ","hash []= ","Hash  new ","version split unshift s_by_name [] << ","version [] split unshift s_by_name [] << ","version split unshift s_by_name [] ","version [] split unshift s_by_name [] ","version split unshift  split unshift ","version [] split unshift  split unshift ","version split unshift  split ","version [] split unshift  split ","version split unshift s_by_name [] delete ","version [] split unshift s_by_name [] delete ","version split unshift  [] split unshift ","version [] split unshift  [] split unshift ","version split unshift  [] split ","version [] split unshift  [] split ","version split unshift  [] ","version [] split unshift  [] ","version split unshift  start_with? ","version [] split unshift  start_with? ","version split unshift s_string split each ","version [] split unshift s_string split each ","version split unshift s_string split ","version [] split unshift s_string split "," version split unshift s_path "," version [] split unshift s_path "]}," CompactIndexClient Cache names_path":{"type":"method","name":"names_path","children":[],"call":[" directory join "," directory "]}," CompactIndexClient Cache names":{"type":"method","name":"names","children":[],"call":[" lines "," names_path "]}," CompactIndexClient Cache initialize":{"type":"method","name":"initialize","children":[],"call":["FileUtils  mkdir_p "," info_path ","Pathname  new expand_path ","Pathname  new "," info_roots each "," info_roots "]}," Bundler Source Rubygems Remote cache_slug":{"type":"method","name":"cache_slug","children":[],"call":["uri_parts compact join ","uri_parts compact ","uri_parts []= ","Digest MD5  hexdigest ","cache_uri path ","cache_uri port ","cache_uri user ","cache_uri host "," uri "," original_uri ","SharedHelpers  digest hexdigest ","SharedHelpers  digest ","SharedHelpers  md5_available? ","cache_uri is_a? ","cache_uri to_s start_with? ","cache_uri to_s ","cache_uri cache_uri host  "]}," Bundler Source Path build_extensions":{"type":"method","name":"build_extensions","children":[],"call":[" run_hooks ","installer build_extensions "]}," Bundler Source Git build_extensions":{"type":"method","name":"build_extensions","children":[],"call":["Bundler  rubygems spec_missing_extensions? ","installer spec ","Bundler  rubygems "]}," Bundler Source Git GitProxy find_local_revision":{"type":"method","name":"find_local_revision","children":[],"call":[" git strip "," git "," ref "," allowed_in_path ","Shellwords  shellescape "," raise ","MissingGitRevisionError  new ","URICredentialsFilter  credential_filtered_uri "," uri "," path ","e command "," allowed_with_path "," find_revision_for "," explicit_ref "," head_revision "," explicit_ref nil? "]}," Bundler Source Git GitProxy remove_cache":{"type":"method","name":"remove_cache","children":[],"call":["FileUtils  rm_rf "," path "]}," Bundler Source Git MissingGitRevisionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler SharedHelpers set_rubylib":{"type":"method","name":"set_rubylib","children":[],"call":["ENV  []= ","rubylib uniq join ","rubylib uniq ","rubylib unshift ","File  expand_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split ","ENV  [] "," bundler_ruby_lib ","Bundler SharedHelpers  set_env ","RbConfig CONFIG  [] == ","RbConfig CONFIG  [] ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"RUBYLIB\"))\n  (str \"\")) split  unshift "]}," Bundler SharedHelpers set_rubyopt":{"type":"method","name":"set_rubyopt","children":[],"call":["ENV  []= ","rubyopt join ","rubyopt unshift ","rubyopt first =~ ","rubyopt first ","rubyopt empty? ! ","rubyopt empty? ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact ","ENV  [] ","Bundler SharedHelpers  set_env ","File  expand_path "," __dir__ ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  join ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  unshift ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first =~ ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  first ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  empty? ! ","(send\n  (const nil :ENV) :[]\n  (str \"RUBYOPT\")) compact  empty? "]}," Bundler SharedHelpers set_path":{"type":"method","name":"set_path","children":[],"call":["ENV  []= ","paths uniq join ","paths uniq ","paths unshift ","Bundler  bundle_path ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split ","ENV  [] "," validate_bundle_path ","Bundler SharedHelpers  set_env ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq join ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  uniq ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"PATH\"))\n  (str \"\")) split  unshift "]}," Bundler SharedHelpers set_bundle_variables":{"type":"method","name":"set_bundle_variables","children":[],"call":["ENV  []= "," find_gemfile to_s "," find_gemfile ","File  expand_path ","Bundler  rubygems bin_path ","Bundler  rubygems ","Bundler SharedHelpers  set_env ","File  exist? "," __dir__ ","RUBY_VERSION  < "]}," Bundler SharedHelpers const_get_safely":{"type":"method","name":"const_get_safely","children":[],"call":["namespace const_get ","namespace constants include? ","constant_name to_sym ","namespace constants ","constant_name to_s "]}," Bundler RubygemsIntegration spec_missing_extensions?":{"type":"method","name":"spec_missing_extensions?","children":[],"call":["spec missing_extensions? ","spec respond_to? ! ","spec respond_to? ","spec extensions empty? ","spec extensions ","spec default_gem? "," spec_default_gem? "]}," Bundler RubygemsIntegration set_installed_by_version":{"type":"method","name":"set_installed_by_version","children":[],"call":["spec installed_by_version= ","Gem Version  create ","spec respond_to? "]}," Bundler RubygemsIntegration load_path_insert_index":{"type":"method","name":"load_path_insert_index","children":[],"call":["Gem  load_path_insert_index "]}," Bundler RubyVersion matches?":{"type":"method","name":"matches?","children":[],"call":["Gem Requirement  create satisfied_by? ","Gem Version  create ","Gem Requirement  create "," Array all? "," Array ","requirements == ","version to_s == ","version to_s ","requirements to_s == ","requirements to_s "]}," Bundler RubyVersion system":{"type":"method","name":"system","children":[],"call":[]}," Bundler RubyVersion versions_string":{"type":"method","name":"versions_string","children":[],"call":[" Array join "," Array "]}," Bundler RubyVersion single_version_string":{"type":"method","name":"single_version_string","children":[],"call":[" to_s "," gem_version "]}," Bundler Resolver formatted_versions_with_platforms":{"type":"method","name":"formatted_versions_with_platforms","children":[],"call":["version_platform_strs join ","version_platform_str << ","platform nil? ","String  new ","version to_s ","vwp last ","vwp first ","versions_with_platforms map ","platform == ","String  new s join ","version_vwp last _strs join ","vwp first _platform_strs join ","String  new  << ","version_vwp last _str << ","vwp first _platform_str << ","vwp last  nil? ","vwp first  to_s ","versions_with_vwp last s map ","vwp first s_with_platforms map ","vwp last  == "]}," Bundler SocketAddress to_socket_address":{"type":"method","name":"to_socket_address","children":[],"call":["Socket  pack_sockaddr_in "]}," Bundler SocketAddress initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler MirrorSockets any?":{"type":"method","name":"any?","children":[],"call":["socket close ","socket closed? ","address to_socket_address ","socket setsockopt ","Socket  new ","Socket  const_get ","address type ","@addresses any? ","Socket  new  close ","Socket  new  closed? ","address to_Socket  new _address ","Socket  new  setsockopt "]}," Bundler MirrorSockets initialize":{"type":"method","name":"initialize","children":[],"call":["SocketAddress  new ","address [] ","Socket  getaddrinfo map ","Socket  getaddrinfo ","mirror uri port ","mirror uri ","mirror uri host ","mirror fallback_timeout "]}," Bundler Settings TCPSocketProbe probe_writtable_socket":{"type":"method","name":"probe_writtable_socket","children":[],"call":["socket connect_nonblock "]}," Bundler Settings TCPSocketProbe wait_for_writtable_socket":{"type":"method","name":"wait_for_writtable_socket","children":[],"call":[" probe_writtable_socket ","IO  select "]}," Bundler Settings TCPSocketProbe replies?":{"type":"method","name":"replies?","children":[],"call":[" wait_for_writtable_socket ","socket connect_nonblock ","MirrorSockets  new any? ","MirrorSockets  new "]}," Bundler Settings MirrorConfig update_mirror":{"type":"method","name":"update_mirror","children":[],"call":["mirror uri= ","Settings  normalize_uri ","mirror fallback_timeout= "]}," Bundler Settings MirrorConfig all?":{"type":"method","name":"all?","children":[],"call":[]}," Bundler Settings MirrorConfig initialize":{"type":"method","name":"initialize","children":[],"call":["Settings  normalize_uri ","uri == ","fallback nil? ! ","fallback nil? ","config_line match captures ","config_line match "," URI absolute? "," URI ","Bundler  URI absolute? ","Bundler  URI "]}," Bundler Settings Mirror validate!":{"type":"method","name":"validate!","children":[],"call":["(or\n  (lvar :probe)\n  (send\n    (const nil :TCPSocketProbe) :new)) replies? ","TCPSocketProbe  new "," fallback_timeout == "," fallback_timeout ","@valid nil? "," uri nil? "," uri "]}," Bundler Settings Mirror valid?":{"type":"method","name":"valid?","children":[],"call":["@valid nil? ","@uri nil? "]}," Bundler Settings Mirror ==":{"type":"method","name":"==","children":[],"call":[" fallback_timeout == ","other fallback_timeout "," fallback_timeout "," uri == ","other uri "," uri ","other nil? ! ","other nil? "]}," Bundler Settings Mirror fallback_timeout=":{"type":"method","name":"fallback_timeout=","children":[],"call":["timeout to_i "]}," Bundler Settings Mirror uri=":{"type":"method","name":"uri=","children":[],"call":[" URI ","uri to_s ","uri nil? ","Bundler  URI "]}," Bundler Settings Mirror initialize":{"type":"method","name":"initialize","children":[],"call":[" fallback_timeout= "," uri= "]}," Bundler Settings Mirrors fetch_valid_mirror_for":{"type":"method","name":"fetch_valid_mirror_for","children":[],"call":["Mirror  new ","mirror valid? ","(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","@mirrors [] "," URI ","uri to_s downcase ","uri to_s ","(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! "," URI host ","mirror validate! ","Bundler  URI host ","Bundler  URI ","Mirror  new  valid? ","(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate!  valid? ","(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate!  valid? ","(or\n  (send\n    (ivar :@Mirror  new s) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","(or\n  (send\n    (ivar :@(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","(or\n  (send\n    (ivar :@(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","@Mirror  new s [] ","@(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s [] ","@(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s [] ","(or\n  (or\n    (send\n      (ivar :@Mirror  new s) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@Mirror  new s) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","(or\n  (or\n    (send\n      (ivar :@(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","(or\n  (or\n    (send\n      (ivar :@(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! s) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate! ","Mirror  new  validate! ","(or\n  (send\n    (ivar :@mirrors) :[]\n    (send nil :URI\n      (send\n        (send\n          (lvar :uri) :to_s) :downcase)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate!  validate! ","(or\n  (or\n    (send\n      (ivar :@mirrors) :[]\n      (send nil :URI\n        (send\n          (send\n            (lvar :uri) :to_s) :downcase)))\n    (send\n      (ivar :@mirrors) :[]\n      (send\n        (send nil :URI\n          (send\n            (lvar :uri) :to_s)) :host)))\n  (send\n    (const nil :Mirror) :new\n    (lvar :uri))) validate!  validate! "]}," Bundler Settings Mirrors parse":{"type":"method","name":"parse","children":[],"call":["config update_mirror ","@mirrors []= ","Mirror  new ","@mirrors [] ","config uri ","config all? ","MirrorConfig  new ","MirrorConfig  new  update_mirror ","MirrorConfig  new  uri ","MirrorConfig  new  all? "]}," Bundler Settings Mirrors each":{"type":"method","name":"each","children":[],"call":["v uri to_s ","v uri ","@mirrors each "]}," Bundler Settings Mirrors for":{"type":"method","name":"for","children":[],"call":[" fetch_valid_mirror_for ","Settings  normalize_uri ","@all validate! valid? ","@all validate! "]}," Bundler Settings Mirrors initialize":{"type":"method","name":"initialize","children":[],"call":["TCPSocketProbe  new ","Mirror  new "]}," Bundler LockfileParser parse_ruby":{"type":"method","name":"parse_ruby","children":[],"call":["line strip "]}," Bundler LockfileParser sections_to_ignore":{"type":"method","name":"sections_to_ignore","children":[],"call":[]}," Bundler LockfileParser unknown_sections_in_lockfile":{"type":"method","name":"unknown_sections_in_lockfile","children":[],"call":[]}," Bundler LockfileParser sections_in_lockfile":{"type":"method","name":"sections_in_lockfile","children":[],"call":[]}," Bundler GemHelpers generic_local_platform":{"type":"method","name":"generic_local_platform","children":[],"call":[" generic ","Gem Platform  local ","Bundler  local_platform "," local_platform "]}," Bundler FriendlyErrors issues_url":{"type":"method","name":"issues_url","children":[],"call":["CGI  escape ","exception message lines first chomp ","exception message lines first ","exception message lines ","exception message ","message split first ","message split ","exception is_a? ","exception message lines first tr chomp ","exception message lines first tr "," require ","exception message split first  lines first chomp ","exception exception message lines first tr chomp  lines first chomp ","exception message split first  lines first ","exception exception message lines first tr chomp  lines first ","exception message split first  lines ","exception exception message lines first tr chomp  lines ","exception message split first  ","exception exception message lines first tr chomp  ","message split first  split first ","exception message lines first tr chomp  split first ","message split first  split ","exception message lines first tr chomp  split ","exception message split first  lines first tr chomp ","exception exception message lines first tr chomp  lines first tr chomp ","exception message split first  lines first tr ","exception exception message lines first tr chomp  lines first tr "]}," Bundler FriendlyErrors request_issue_report_for":{"type":"method","name":"request_issue_report_for","children":[],"call":["Bundler  ui warn ","(str \"\\n\") gsub "," issues_url ","Bundler  ui ","Bundler  ui error ","Bundler  ui info ","(str \"        --- ERROR REPORT TEMPLATE -------------------------------------------------------\\n\") gsub ","Bundler Env  new report gsub strip ","Bundler Env  new report gsub ","Bundler Env  new report ","Bundler Env  new ","e backtrace join ","e backtrace ","e message ","e class ","ARGV  join ","e backtrace join chomp ","Bundler Env  report "," new_issue_url "," exception_message "]}," Bundler FriendlyErrors exit_status":{"type":"method","name":"exit_status","children":[],"call":["error status ","error status_code "]}," Bundler FriendlyErrors log_error":{"type":"method","name":"log_error","children":[],"call":[" request_issue_report_for ","Bundler  ui error ","error message ","Bundler  ui ","Bundler  ui trace ","Bundler  ui warn "," raise ","error message =~ ","error orig_exception ","(and\n  (defined?\n    (const\n      (const\n        (const nil :Java) :JavaLang) :OutOfMemoryError))\n  (const\n    (const\n      (const nil :Java) :JavaLang) :OutOfMemoryError)) compact ","error backtrace join ","error backtrace ","error class ","Bundler  ui debug? "]}," Bundler Fetcher Index gemspec_cached_path":{"type":"method","name":"gemspec_cached_path","children":[],"call":["File  file? ","paths find ","File  join ","Bundler  rubygems spec_cache_dirs map ","Bundler  rubygems spec_cache_dirs ","Bundler  rubygems "]}," Bundler Fetcher Index fetch_spec":{"type":"method","name":"fetch_spec","children":[],"call":[" raise ","Bundler  load_marshal ","Gem  inflate "," downloader fetch body "," downloader fetch "," downloader ","Bundler  load_gemspec "," gemspec_cached_path ","Gem  read_binary ","uri path ","uri scheme == ","uri scheme ","URI  parse "," remote_uri ","spec join ","Bundler  rubygems inflate ","Bundler  rubygems ","Bundler  rubygems correct_for_windows_path ","Bundler URI  parse "," gemspec_cached_Bundler  rubygems correct_for_windows_path  ","URI  parse  path ","Bundler URI  parse  path ","uri Bundler  rubygems correct_for_windows_path  ","URI  parse  scheme == ","Bundler URI  parse  scheme == ","URI  parse  scheme ","Bundler URI  parse  scheme "," remote_URI  parse  "," remote_Bundler URI  parse  ","Bundler  rubygems correct_for_windows_Bundler  rubygems correct_for_windows_path  "]}," Bundler Fetcher Dependency log_specs":{"type":"method","name":"log_specs","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui debug ","query_list inspect ","Bundler  ui debug? "]}," Bundler Fetcher Dependency get_formatted_specs_and_deps":{"type":"method","name":"get_formatted_specs_and_deps","children":[],"call":["spec_list push ","s [] ","d split ","s [] map ","deps_list push ","gem_list each ","deps_list concat "]}," Bundler Fetcher Dependency unmarshalled_dep_gems":{"type":"method","name":"unmarshalled_dep_gems","children":[],"call":["gem_list push ","Bundler  load_marshal "," downloader fetch body "," downloader fetch "," dependency_api_uri "," downloader ","gem_names each_slice ","gem_list concat ","Bundler  safe_load_marshal "]}," Bundler Fetcher Dependency available?":{"type":"method","name":"available?","children":[],"call":[" raise ","e message "," downloader fetch "," dependency_api_uri "," downloader "," fetch_uri scheme != "," fetch_uri scheme "," fetch_uri "]}," Bundler Fetcher CompactIndex cache_path":{"type":"method","name":"cache_path","children":[],"call":["Bundler  user_cache join "," remote cache_slug "," remote ","Bundler  user_cache "]}," Bundler Fetcher CompactIndex compact_index_client":{"type":"method","name":"compact_index_client","children":[],"call":["client in_parallel= ","worker deq ","inputs map ","worker enq ","inputs each ","Bundler Worker  new "," display_uri host "," display_uri ","blk call "," lambda ","(send\n  (const nil :SharedHelpers) :filesystem_access\n  (send nil :cache_path)) tap ","CompactIndexClient  new "," cache_path ","SharedHelpers  filesystem_access "," downloader fetch "," fetch_uri + "," fetch_uri "," downloader ","worker stop ","(send\n  (lvar :inputs) :map) tap "," bundle_worker "," compact_fetcher "," client_fetcher ","Bundler Worker  new  deq "," bundle_worker  deq ","Bundler Worker  new  enq "," bundle_worker  enq ","Bundler Worker  new  stop "," bundle_worker  stop "," bundle_Bundler Worker  new  "," bundle_ bundle_worker  "]}," Bundler Fetcher CompactIndex api_fetcher?":{"type":"method","name":"api_fetcher?","children":[],"call":[]}," Bundler Fetcher CompactIndex available?":{"type":"method","name":"available?","children":[],"call":[" compact_index_client update_and_parse_checksums! "," compact_index_client "," fetch_uri scheme != "," fetch_uri scheme "," fetch_uri ","Bundler  ui warn ","e message ","Bundler  ui ","user_home writable? ","user_home directory? ","Pathname  new ","Bundler  rubygems user_home ","Bundler  rubygems ","Bundler  ui debug ","Bundler  user_home "," md5_available? ","SharedHelpers  md5_available? "," fetch_uri scheme == ","Pathname  new  writable? ","Bundler  user_home  writable? ","Pathname  new  directory? ","Bundler  user_home  directory? ","Bundler  rubygems Pathname  new  ","Bundler  rubygems Bundler  user_home  ","Bundler  Pathname  new  ","Bundler  Bundler  user_home  "]}," Bundler Fetcher CompactIndex fetch_spec":{"type":"method","name":"fetch_spec","children":[],"call":["EndpointSpecification  new ","Gem Dependency  new ","contents [] map! ","contents [] ","contents unshift ","spec first ","contents nil? "," compact_index_client spec "," compact_index_client "," compact_index_client spec  [] map! "," compact_index_client spec  [] "," compact_index_client spec  unshift "," compact_index_client spec  nil? "]}," Bundler Fetcher CompactIndex specs_for_names":{"type":"method","name":"specs_for_names","children":[],"call":["next_gems - ","complete_gems push uniq! ","complete_gems push ","deps map ","gem_info << ","deps each ","(send\n  (lvar :deps) :map) flatten uniq ","(send\n  (lvar :deps) :map) flatten ","d [] map flatten ","d [] map ","d [] "," compact_index_client dependencies "," compact_index_client ","Bundler  ui debug ","remaining_gems inspect ","Bundler  ui ","remaining_gems empty? ","gem_names dup ","@bundle_worker stop ","complete_gems concat uniq! ","complete_gems concat "," log_specs "," serial_compact_index_client dependencies "," serial_compact_index_client "," parallel_compact_index_client dependencies "," parallel_compact_index_client ","(send\n  (lvar :deps) :map) flatten uniq  - "," compact_index_client dependencies  map "," compact_index_client dependencies  each ","(send\n  (lvar : compact_index_client dependencies ) :map) flatten uniq ","(send\n  (lvar : compact_index_client dependencies ) :map) flatten ","next_gems -  inspect ","gem_names dup  inspect ","next_gems -  empty? ","gem_names dup  empty? "]}," Bundler Fetcher CompactIndex specs":{"type":"method","name":"specs","children":[],"call":[" specs_for_names "]}," Bundler Fetcher CompactIndex compact_index_request":{"type":"method","name":"compact_index_request","children":[],"call":[]}," Bundler Fetcher Base available?":{"type":"method","name":"available?","children":[],"call":[]}," Bundler VirtualProtocolError message":{"type":"method","name":"message","children":[],"call":[]}," Bundler TemporaryResourceError message":{"type":"method","name":"message","children":[],"call":[" action "]}," Bundler PermissionError action":{"type":"method","name":"action","children":[],"call":["@permission_type to_s "]}," Bundler EnvironmentPreserver restore":{"type":"method","name":"restore","children":[],"call":["env delete ","@prefix + ","env []= ","value_original empty? ","value_original nil? ","env [] ","@keys each ","@original clone ","value_original == ","@original clone  delete ","@original clone  []= ","env []  empty? ","env []  nil? ","@original clone  [] ","env []  == "]}," Bundler EnvironmentPreserver backup":{"type":"method","name":"backup","children":[],"call":["env []= ","@prefix + ","original_value nil? ","value empty? ! ","value empty? ","value nil? ! ","value nil? ","env [] ","@keys each ","@original clone "," restore clone "," restore ","@original clone  []= "," restore clone  []= ","env []  nil? ","original_env []  nil? ","env []  empty? ! ","env []  empty? ","env []  nil? ! ","@original clone  [] "," restore clone  [] "]}," Bundler EnvironmentPreserver initialize":{"type":"method","name":"initialize","children":[],"call":["env to_hash "]}," Bundler EndpointSpecification build_dependency":{"type":"method","name":"build_dependency","children":[],"call":[" raise "," version "," puts ","e message include? ","e message ","Gem Dependency  new "]}," Bundler EndpointSpecification parse_metadata":{"type":"method","name":"parse_metadata","children":[],"call":["Gem Requirement  new ","v last ","k to_s ","data each "," raise ","data inspect ","e class "," version "," name "]}," Bundler Dsl gemfile_root":{"type":"method","name":"gemfile_root","children":[],"call":["@gemfile dirname ","Bundler  default_gemfile "]}," Bundler Definition locked_ruby_version":{"type":"method","name":"locked_ruby_version","children":[],"call":["Bundler RubyVersion  system ","@locked_ruby_version ! ","@unlock [] "," ruby_version "," ruby_version ! "]}," Bundler Definition locked_bundler_version":{"type":"method","name":"locked_bundler_version","children":[],"call":["@locked_bundler_version < ","Gem Version  new "]}," Bundler CLI reformatted_help_args":{"type":"method","name":"reformatted_help_args","children":[],"call":[]}," Bundler Outdated get_version_semver_portion_value":{"type":"method","name":"get_version_semver_portion_value","children":[],"call":["version_section first ","version_section nil? ","spec version segments [] ","spec version segments ","spec version ","version_section to_a [] to_i ","version_section to_a [] ","version_section to_a ","spec version segments []  first ","spec version segments []  nil? ","spec version segments []  to_a [] to_i ","spec version segments []  to_a [] ","spec version segments []  to_a "]}," Bundler Outdated update_present_via_semver_portions":{"type":"method","name":"update_present_via_semver_portions","children":[],"call":["active_patch > "," get_version_semver_portion_value ","current_minor == ","options [] ","update_present ! ","active_minor > ","current_major == ","active_major > ","active_spec version segments first ","active_spec version segments ","active_spec version ","current_spec version segments first ","current_spec version segments ","current_spec version ","active_spec version segments [] first ","active_spec version segments [] ","current_spec version segments [] first ","current_spec version segments [] ","active_spec nil? "," get_version_semver_portion_value  > ","active_spec version segments [] first  > "," get_version_semver_portion_value  == ","current_spec version segments [] first  == ","active_patch >  ! ","active_minor >  ! ","active_major >  ! ","current_spec version segments first  == ","active_spec version segments first  > "]}," Bundler Outdated check_for_deployment_mode":{"type":"method","name":"check_for_deployment_mode","children":[],"call":[" raise ","Bundler  default_gemfile ","Bundler  settings [] ","Bundler  settings ","Bundler  settings locations keys & any? ","Bundler  settings locations keys & ","Bundler  settings locations keys ","Bundler  settings locations ","Bundler  settings locations [] ","Bundler  frozen? ","Bundler  frozen_bundle? "]}," Bundler Install check_for_options_conflicts":{"type":"method","name":"check_for_options_conflicts","children":[],"call":[" raise ","InvalidOption  new ","error_message << "," options [] "," options ","String  new ","String  new  << "]}," Bundler Gem open_editor":{"type":"method","name":"open_editor","children":[],"call":[" thor run "," thor "]}," Bundler Exec ruby_shebang?":{"type":"method","name":"ruby_shebang?","children":[],"call":["first_line start_with? ","possibilities any? ","f read ","possibilities map max ","possibilities map ","File  open ","Gem  ruby ","Bundler  ui warn ","Bundler  ui ","File  zero? "]}," Bundler Exec kernel_load":{"type":"method","name":"kernel_load","children":[],"call":[" abort ","backtrace join ","e message ","e class ","bt start_with? ! ","bt start_with? ","e backtrace take_while ","e backtrace ","Bundler  ui error "," cmd ","Bundler  ui ","Bundler  ui= "," raise ","Kernel  load "," require ","ARGV  replace ","args pop ","args last is_a? ","args last "," exit "," trap ","signals each ","Signal  list keys - ","Signal  list keys ","Signal  list ","Process  setproctitle "," process_title ","Process  respond_to? ","TRAPPED_SIGNALS  each "," require_relative ","Bundler FriendlyErrors  disable! ","Bundler  Bundler  ui  error ","Bundler  Bundler  ui  ","Bundler  Bundler  ui = "," reqBundler  ui re ","Signal  list keys -  each "," reqBundler  ui re_relative "]}," Bundler Exec kernel_exec":{"type":"method","name":"kernel_exec","children":[],"call":[" exit ","Bundler  ui warn ","Bundler  ui ","Bundler  ui error "," cmd ","Bundler  ui= ","Kernel  exec ","Bundler  Bundler  ui  warn ","Bundler  Bundler  ui  ","Bundler  Bundler  ui  error ","Bundler  Bundler  ui = "]}," Bundler Exec validate_cmd!":{"type":"method","name":"validate_cmd!","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui "," cmd nil? "," cmd "]}," Bundler PathPreserver preserve_path_in_environment":{"type":"method","name":"preserve_path_in_environment","children":[],"call":[]}," CompactIndexClient Updater MisMatchedChecksumError message":{"type":"method","name":"message","children":[],"call":["@server_checksum inspect ","@local_checksum inspect "]}," CompactIndexClient Updater MisMatchedChecksumError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler configure_gem_path":{"type":"method","name":"configure_gem_path","children":[],"call":["env []= ","paths join ","possibles flatten compact uniq reject ","possibles flatten compact uniq ","possibles flatten compact ","possibles flatten ","Bundler  rubygems gem_path ","Bundler  rubygems ","Bundler  rubygems gem_dir ","Bundler  rubygems gem_dir != "," bundle_path to_s "," bundle_path ","settings [] ","env [] empty? ","env [] ","env [] nil? "," use_system_gems? ! "," use_system_gems? ","Bundler SharedHelpers  set_env ","possibles flatten compact uniq reject  join "]}," Bundler YAMLSerializer convert_to_backward_compatible_key":{"type":"method","name":"convert_to_backward_compatible_key","children":[],"call":["key gsub ","key include? ","key !~ ","key =~ ","key gsub  gsub ","key gsub  include? ","key gsub  !~ ","key gsub  =~ "]}," Bundler YAMLSerializer load":{"type":"method","name":"load","children":[],"call":["last_hash [] push ","last_hash [] ","last_hash []= ","last_hash [] is_a? ","match captures ","ARRAY_REGEX  match ","stack [] []= ","stack [] ","stack []= ","depth + ","val empty? ","indent scan length ","indent scan "," convert_to_backward_compatible_key ","HASH_REGEX  match ","str split each ","str split ","str scan each ","str scan ","quote empty? ","stack []  [] push ","stack []  [] ","stack []  []= ","stack []  [] is_a? ","ARRAY_REGEX  match  captures ","HASH_REGEX  match  captures ","ARRAY_REGEX  ARRAY_REGEX  match  ","ARRAY_REGEX  HASH_REGEX  match  ","indent scan length  + "," convert_to_backward_compatible_ convert_to_backward_compatible_key  ","HASH_REGEX  ARRAY_REGEX  match  ","HASH_REGEX  HASH_REGEX  match  "]}," Bundler YAMLSerializer dump_hash":{"type":"method","name":"dump_hash","children":[],"call":["yaml << << << ","yaml << << ","v to_s gsub inspect ","v to_s gsub ","v to_s ","yaml << ","(send\n  (lvar :v) :map) join ","s to_s gsub inspect ","s to_s gsub ","s to_s ","v map ","v is_a? "," dump_hash gsub "," dump_hash ","hash each ","String  new ","String  new  << << << ","String  new  << << ","String  new  << "]}," Bundler YAMLSerializer dump":{"type":"method","name":"dump","children":[],"call":["yaml << "," dump_hash ","String  new ","String  new  << "]}," PostIt bundler_version":{"type":"method","name":"bundler_version","children":[],"call":[]}," PostIt setup":{"type":"method","name":"setup","children":[],"call":[]}," PostIt Parser parse":{"type":"method","name":"parse","children":[],"call":["Regexp  last_match ","lockfile =~ ","File  read ","File  file? "]}," PostIt Parser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PostIt Installer install!":{"type":"method","name":"install!","children":[],"call":["installer installed_gems ","installer install ","Gem DependencyInstaller  new "," require "," installed? ","Gem DependencyInstaller  new  installed_gems ","Gem DependencyInstaller  new  install "]}," PostIt Installer installed?":{"type":"method","name":"installed?","children":[],"call":["requirement satisfied_by? ","s version ","s name == ","s name ","Gem  source_index gems values any? ","Gem  source_index gems values ","Gem  source_index gems ","Gem  source_index ","Gem Requirement  new ","Gem Specification  find_by_name nil? ! ","Gem Specification  find_by_name nil? ","Gem Specification  find_by_name ","Gem Specification  respond_to? ","Gem Requirement  new  satisfied_by? "]}," PostIt Installer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PostIt Environment bundler_version":{"type":"method","name":"bundler_version","children":[],"call":["Gem Requirement  default "," lockfile_version "," cli_arg_version "," env_var_version "]}," PostIt Environment lockfile_version":{"type":"method","name":"lockfile_version","children":[],"call":["BundlerVendoredPostIt PostIt Parser  new parse ","BundlerVendoredPostIt PostIt Parser  new "," lockfile "]}," PostIt Environment lockfile":{"type":"method","name":"lockfile","children":[],"call":["File  expand_path "," gemfile "," gemfile sub ","File  basename "]}," PostIt Environment gemfile":{"type":"method","name":"gemfile","children":[],"call":["ENV  [] "]}," PostIt Environment cli_arg_version":{"type":"method","name":"cli_arg_version","children":[],"call":["@argv shift ","Gem Version  correct? ","str dup force_encoding ","str dup ","str respond_to? ","@argv first ","str dup force_encoding  dup force_encoding ","@argv first  dup force_encoding ","str dup force_encoding  dup ","@argv first  dup ","str dup force_encoding  respond_to? ","@argv first  respond_to? "]}," PostIt Environment env_var_version":{"type":"method","name":"env_var_version","children":[],"call":["ENV  [] "]}," PostIt Environment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph set_payload":{"type":"method","name":"set_payload","children":[],"call":[" log set_payload "," log "]}," Molinillo DependencyGraph to_dot":{"type":"method","name":"to_dot","children":[],"call":["dot join ","dot_vertices unshift push + ","dot_edges push ","dot_vertices unshift push ","dot_vertices unshift ","dot_edges sort! ","dot_vertices sort! ","dot_edges << ","e requirement ","e destination name ","e destination ","e origin name ","e origin ","v outgoing_edges each ","v outgoing_edges ","dot_vertices << ","v payload "," vertices each "," vertices ","dot_edges uniq! ","dot_vertices uniq! ","label to_s dump ","label to_s ","edge_label call "," raise ","options keys ","options empty? ","options delete ","dot_vertices unshift push +  join ","dot_vertices unshift push + _vertices unshift push + ","dot_vertices unshift push + _edges push ","dot_vertices unshift push + _vertices unshift push ","dot_vertices unshift push + _vertices unshift ","dot_vertices unshift push + _edges sort! ","dot_vertices unshift push + _vertices sort! ","dot_vertices unshift push + _edges << ","dot_vertices unshift push + _vertices << ","dot_vertices unshift push + _edges uniq! ","dot_vertices unshift push + _vertices uniq! ","e requirement  to_s dump ","edge_label call  to_s dump ","e requirement  to_s ","edge_label call  to_s ","edge_e requirement  call ","edge_edge_label call  call ","options delete  call "]}," Molinillo DependencyGraph rewind_to":{"type":"method","name":"rewind_to","children":[],"call":[" log rewind_to "," log "]}," Molinillo DependencyGraph tag":{"type":"method","name":"tag","children":[],"call":[" log tag "," log "]}," Molinillo DependencyGraph Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph Tag down":{"type":"method","name":"down","children":[],"call":[]}," Molinillo DependencyGraph Tag up":{"type":"method","name":"up","children":[],"call":[]}," Molinillo DependencyGraph Tag name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo DependencyGraph SetPayload initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph SetPayload down":{"type":"method","name":"down","children":[],"call":["graph vertex_named payload= ","graph vertex_named "," name "]}," Molinillo DependencyGraph SetPayload up":{"type":"method","name":"up","children":[],"call":["vertex payload= "," payload ","vertex payload ","graph vertex_named "," name ","graph vertex_named  payload= ","graph vertex_named  payload ","graph graph vertex_named _named "]}," Molinillo DependencyGraph SetPayload name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo DependencyGraph Log push_action":{"type":"method","name":"push_action","children":[],"call":["action up ","@current_action next= ","action previous= "]}," Molinillo DependencyGraph Log rewind_to":{"type":"method","name":"rewind_to","children":[],"call":["action tag == ","action tag ","action class name == ","action class name ","action class "," raise ","tag inspect "," pop! "," loop ","action class action_name == ","action class action_name "," pop!  tag == "," pop!  tag "," pop!  class name == "," pop!  class name "," pop!  class "," pop!  class  pop! _name == "," pop!  class  pop! _name "]}," Molinillo DependencyGraph Log reverse_each":{"type":"method","name":"reverse_each","children":[],"call":["action previous "," loop "," enum_for "," block_given? ","action previous  previous "]}," Molinillo DependencyGraph Log each":{"type":"method","name":"each","children":[],"call":["action next "," loop "," enum_for "," block_given? ","action next  next "]}," Molinillo DependencyGraph Log pop!":{"type":"method","name":"pop!","children":[],"call":["action down ","action previous "]}," Molinillo DependencyGraph Log set_payload":{"type":"method","name":"set_payload","children":[],"call":[" push_action ","SetPayload  new "]}," Molinillo DependencyGraph Log add_edge_no_circular":{"type":"method","name":"add_edge_no_circular","children":[],"call":[" push_action ","AddEdgeNoCircular  new "]}," Molinillo DependencyGraph Log detach_vertex_named":{"type":"method","name":"detach_vertex_named","children":[],"call":[" push_action ","DetachVertexNamed  new "]}," Molinillo DependencyGraph Log add_vertex":{"type":"method","name":"add_vertex","children":[],"call":[" push_action ","AddVertex  new "]}," Molinillo DependencyGraph Log tag":{"type":"method","name":"tag","children":[],"call":[" push_action ","Tag  new "]}," Molinillo DependencyGraph Log initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph DetachVertexNamed initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph DetachVertexNamed down":{"type":"method","name":"down","children":[],"call":["e origin outgoing_edges << ","e origin outgoing_edges ","e origin ","@vertex incoming_edges each ","@vertex incoming_edges ","e destination incoming_edges << ","e destination incoming_edges ","e destination ","@vertex outgoing_edges each ","@vertex outgoing_edges ","graph vertices []= ","@vertex name ","graph vertices "]}," Molinillo DependencyGraph DetachVertexNamed up":{"type":"method","name":"up","children":[],"call":["v outgoing_edges delete ","v outgoing_edges ","e origin ","@vertex incoming_edges each ","@vertex incoming_edges ","graph detach_vertex_named ","v name ","v predecessors any? ","v predecessors ","v root? ","v incoming_edges delete ","v incoming_edges ","e destination ","@vertex outgoing_edges each ","@vertex outgoing_edges ","graph vertices delete "," name ","graph vertices ","removed_vertices concat ","v incoming_edges empty? ","v root? ! ","e origin  outgoing_edges delete ","e destination  outgoing_edges delete ","e origin  outgoing_edges ","e destination  outgoing_edges ","@e origin ertex incoming_edges each ","@e destination ertex incoming_edges each ","graph vertices delete  incoming_edges each ","@e origin ertex incoming_edges ","@e destination ertex incoming_edges ","graph vertices delete  incoming_edges ","graph detach_e origin ertex_named ","graph detach_e destination ertex_named ","e origin  name ","e destination  name ","e origin  predecessors any? ","e destination  predecessors any? ","e origin  predecessors ","e destination  predecessors ","e origin  root? ","e destination  root? ","e origin  incoming_edges delete ","e destination  incoming_edges delete ","e origin  incoming_edges ","e destination  incoming_edges ","@e origin ertex outgoing_edges each ","@e destination ertex outgoing_edges each ","graph vertices delete  outgoing_edges each ","@e origin ertex outgoing_edges ","@e destination ertex outgoing_edges ","graph vertices delete  outgoing_edges ","graph e origin ertices delete ","graph e destination ertices delete ","graph e origin ertices ","graph e destination ertices ","remoe origin ed_e origin ertices concat ","remoe destination ed_e destination ertices concat ","e origin  incoming_edges empty? ","e destination  incoming_edges empty? ","e origin  root? ! ","e destination  root? ! "]}," Molinillo DependencyGraph DetachVertexNamed name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo DependencyGraph AddVertex initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph AddVertex down":{"type":"method","name":"down","children":[],"call":["graph vertices delete "," name ","graph vertices ","vertex root= ","vertex payload= ","graph vertices [] ","graph vertices []  root= ","graph vertices []  payload= "]}," Molinillo DependencyGraph AddVertex up":{"type":"method","name":"up","children":[],"call":[" root ","vertex root "," payload ","vertex payload ","graph vertices []= ","vertex name ","graph vertices ","Vertex  new "," name ","existing root ","existing payload ","graph vertices [] ","graph vertices []  root ","graph vertices []  payload "]}," Molinillo DependencyGraph AddVertex name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo DependencyGraph AddEdgeNoCircular initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph AddEdgeNoCircular make_edge":{"type":"method","name":"make_edge","children":[],"call":["Edge  new "," requirement ","graph vertex_named "," destination "," origin "]}," Molinillo DependencyGraph AddEdgeNoCircular down":{"type":"method","name":"down","children":[],"call":["edge destination incoming_edges delete ","edge destination incoming_edges ","edge destination ","edge origin outgoing_edges delete ","edge origin outgoing_edges ","edge origin "," make_edge "," delete_first "," make_edge  destination incoming_ make_edge s delete "," make_edge  destination incoming_ make_edge s "," make_edge  destination "," make_edge  origin outgoing_ make_edge s delete "," make_edge  origin outgoing_ make_edge s "," make_edge  origin "," make_ make_edge  "]}," Molinillo DependencyGraph AddEdgeNoCircular up":{"type":"method","name":"up","children":[],"call":["edge destination incoming_edges << ","edge destination incoming_edges ","edge destination ","edge origin outgoing_edges << ","edge origin outgoing_edges ","edge origin "," make_edge "," make_edge  destination incoming_ make_edge s << "," make_edge  destination incoming_ make_edge s "," make_edge  destination "," make_edge  origin outgoing_ make_edge s << "," make_edge  origin outgoing_ make_edge s "," make_edge  origin "," make_ make_edge  "]}," Molinillo DependencyGraph AddEdgeNoCircular name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo DependencyGraph Action down":{"type":"method","name":"down","children":[],"call":[" raise "]}," Molinillo DependencyGraph Action up":{"type":"method","name":"up","children":[],"call":[" raise "]}," Molinillo DependencyGraph Action name":{"type":"method","name":"name","children":[],"call":[]}," Molinillo Delegates SpecificationProvider with_no_such_dependency_error_handling":{"type":"method","name":"with_no_such_dependency_error_handling","children":[],"call":[" raise ","error required_by << "," name_for_explicit_dependency_source ","error required_by ","vertex explicit_requirements empty? ","vertex explicit_requirements ","e origin name ","e origin ","vertex incoming_edges map ","vertex incoming_edges "," activated vertex_named "," name_for ","error dependency "," activated "," state "," activated vertex_named  explicit_requirements empty? "," activated vertex_named  explicit_requirements "," activated vertex_named  incoming_edges map "," activated vertex_named  incoming_edges "," activated  activated vertex_named _named "]}," Molinillo Delegates SpecificationProvider allow_missing?":{"type":"method","name":"allow_missing?","children":[],"call":[" specification_provider allow_missing? "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider sort_dependencies":{"type":"method","name":"sort_dependencies","children":[],"call":[" specification_provider sort_dependencies "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider name_for_locking_dependency_source":{"type":"method","name":"name_for_locking_dependency_source","children":[],"call":[" specification_provider name_for_locking_dependency_source "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider name_for_explicit_dependency_source":{"type":"method","name":"name_for_explicit_dependency_source","children":[],"call":[" specification_provider name_for_explicit_dependency_source "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider name_for":{"type":"method","name":"name_for","children":[],"call":[" specification_provider name_for "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider requirement_satisfied_by?":{"type":"method","name":"requirement_satisfied_by?","children":[],"call":[" specification_provider requirement_satisfied_by? "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":[" specification_provider dependencies_for "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates SpecificationProvider search_for":{"type":"method","name":"search_for","children":[],"call":[" specification_provider search_for "," specification_provider "," with_no_such_dependency_error_handling "]}," Molinillo Delegates ResolutionState conflicts":{"type":"method","name":"conflicts","children":[],"call":["current_state conflicts ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState depth":{"type":"method","name":"depth","children":[],"call":["current_state depth ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState possibilities":{"type":"method","name":"possibilities","children":[],"call":["current_state possibilities ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState requirement":{"type":"method","name":"requirement","children":[],"call":["current_state requirement ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState activated":{"type":"method","name":"activated","children":[],"call":["current_state activated ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState requirements":{"type":"method","name":"requirements","children":[],"call":["current_state requirements ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Delegates ResolutionState name":{"type":"method","name":"name","children":[],"call":["current_state name ","Bundler Molinillo ResolutionState  empty "," state "]}," CompactIndexClient Cache info_roots":{"type":"method","name":"info_roots","children":[],"call":[" directory join "," directory "]}," Bundler URICredentialsFilter credential_filtered_string":{"type":"method","name":"credential_filtered_string","children":[],"call":["str_with_no_credentials gsub ","anonymous_uri_str != ","uri to_s "," credential_filtered_uri to_s "," credential_filtered_uri ","str_to_filter dup ","str_to_filter nil? ","uri nil? ","str_with_no_credentials gsub  gsub ","str_to_filter dup  gsub ","anonymous_uri to_s  != "," credential_filtered_uri to_s  != "]}," Bundler URICredentialsFilter credential_filtered_uri":{"type":"method","name":"credential_filtered_uri","children":[],"call":["uri to_s ","uri_to_anonymize is_a? ","uri password= ","uri user= ","uri password ","uri password == ","uri userinfo "," URI ","uri is_a? ","uri_to_anonymize dup ","uri_to_anonymize nil? ","Bundler  URI "," require_relative ","File  exist? "," URI  to_s ","uri_to_anonymize dup  to_s ","Bundler  URI  to_s "," URI _to_anonymize is_a? ","uri_to_anonymize dup _to_anonymize is_a? ","Bundler  URI _to_anonymize is_a? "," URI  password= ","uri_to_anonymize dup  password= ","Bundler  URI  password= "," URI  user= ","uri_to_anonymize dup  user= ","Bundler  URI  user= "," URI  password ","uri_to_anonymize dup  password ","Bundler  URI  password "," URI  password == ","uri_to_anonymize dup  password == ","Bundler  URI  password == "," URI  userinfo ","uri_to_anonymize dup  userinfo ","Bundler  URI  userinfo "," URI  is_a? ","uri_to_anonymize dup  is_a? ","Bundler  URI  is_a? "," URI _to_anonymize dup ","uri_to_anonymize dup _to_anonymize dup ","Bundler  URI _to_anonymize dup "," URI _to_anonymize nil? ","uri_to_anonymize dup _to_anonymize nil? ","Bundler  URI _to_anonymize nil? "]}," Bundler UI Silent add_color":{"type":"method","name":"add_color","children":[],"call":[]}," Bundler UI Shell with_level":{"type":"method","name":"with_level","children":[],"call":[]}," Bundler UI Shell tell_err":{"type":"method","name":"tell_err","children":[],"call":["@shell send flush ","@shell send ","@shell send print ","buffer << ","message to_s end_with? ! ","message to_s end_with? ","message to_s ","$stderr tty? ! ","$stderr tty? "," word_wrap ","newline [] ","newline is_a? ","message to_s !~ ","@shell send closed? ","@shell send  << "," word_wrap  to_s end_with? ! "," word_wrap  to_s end_with? "," word_wrap  to_s ","message to_s !~  [] ","message to_s !~  is_a? "," word_wrap  to_s !~ "]}," Bundler UI Shell add_color":{"type":"method","name":"add_color","children":[],"call":["@shell set_color "]}," Bundler SourceList warn_on_git_protocol":{"type":"method","name":"warn_on_git_protocol","children":[],"call":["Bundler  ui warn ","source uri ","Bundler  ui ","source uri =~ ","Bundler  settings [] ","Bundler  settings ","(str \"^git\\\\:\") match? "]}," Bundler SourceList add_plugin_source":{"type":"method","name":"add_plugin_source","children":[],"call":[" add_source_to_list ","Plugin  source new ","Plugin  source "]}," Bundler Source Rubygems cache_path":{"type":"method","name":"cache_path","children":[],"call":["Bundler  app_cache "]}," Bundler Source Rubygems rubygems_dir":{"type":"method","name":"rubygems_dir","children":[],"call":["Bundler  rubygems gem_dir ","Bundler  rubygems ","Bundler  bundle_path "]}," Bundler Source Rubygems requires_sudo?":{"type":"method","name":"requires_sudo?","children":[],"call":["Bundler  requires_sudo? "]}," Bundler Source Path is_a_path?":{"type":"method","name":"is_a_path?","children":[],"call":[" instance_of? "]}," Bundler Source Path root":{"type":"method","name":"root","children":[],"call":["Bundler  root "]}," Bundler Source Path Installer run_hooks":{"type":"method","name":"run_hooks","children":[],"call":[" raise "," spec full_name "," spec ","hook inspect =~ ","hook inspect ","result == ","hook call ","Gem  send each ","Gem  send ","Gem  respond_to? ","hook call  == "]}," Bundler Source Path Installer post_install":{"type":"method","name":"post_install","children":[],"call":["Bundler  rm_rf ","Bundler  requires_sudo? "," run_hooks "," generate_bin "," spec executables empty? "," spec executables "," spec "," spec executables nil? "," build_extensions ","SharedHelpers  chdir "]}," Bundler Source Git fetch":{"type":"method","name":"fetch","children":[],"call":["Bundler  ui warn ","Bundler  ui "," raise ","Bundler  settings [] ","Bundler  settings "," git_proxy checkout "," git_proxy ","Bundler  feature_flag allow_offline_install? ","Bundler  feature_flag "]}," Bundler Source Git GitProxy capture_and_filter_stderr":{"type":"method","name":"capture_and_filter_stderr","children":[],"call":["$stderr puts ","URICredentialsFilter  credential_filtered_string ","captured_err empty? ! ","captured_err empty? ","STDERR  reopen ","f read ","f rewind ","Tempfile  open ","STDERR  dup ","Bundler  ui warn ","Bundler  ui ","Open3  capture3 "," require "," uri ","f read  empty? ! ","f read  empty? "]}," Bundler Source Git GitProxy full_version":{"type":"method","name":"full_version","children":[],"call":[" git sub strip "," git sub "," git "," git_local sub strip "," git_local sub "," git_local "]}," Bundler Source Gemspec as_path_source":{"type":"method","name":"as_path_source","children":[],"call":["Path  new "," options "]}," Bundler Source Gemspec initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Bundler SharedHelpers deprecate_gemfile":{"type":"method","name":"deprecate_gemfile","children":[],"call":["Bundler SharedHelpers  major_deprecation ","File  basename == ","File  basename "]}," Bundler SharedHelpers prints_major_deprecations?":{"type":"method","name":"prints_major_deprecations?","children":[],"call":["Bundler Deprecate  skip "," require ","Bundler  settings [] ","Bundler  settings ","Bundler  settings [] ! ","deprecation_release ! ","Bundler VERSION  split drop include? ","Bundler VERSION  split drop ","Bundler VERSION  split "," require_relative ","Bundler VERSION  split drop include?  ! "]}," Bundler SharedHelpers print_major_deprecations!":{"type":"method","name":"print_major_deprecations!","children":[],"call":[" major_deprecation ","Bundler  rubygems version ","Bundler  rubygems ","Bundler  rubygems provides? ","RUBY_VERSION  < "," deprecate_gemfile "," find_gemfile "," find_gemfile == "," find_file ","Bundler SharedHelpers  major_deprecation ","Bundler  bundler_major_version == ","Bundler  bundler_major_version ","gemfiles size == ","gemfiles size ","gemfiles empty? ","File  file? ","File  expand_path "," gemfile_names select "," gemfile_names "," search_up ","Bundler  ui warn ","Bundler  ui ","gemfiles size != "]}," Bundler SharedHelpers major_deprecation":{"type":"method","name":"major_deprecation","children":[],"call":["ui warn ","Bundler VERSION  split first to_i + ","Bundler VERSION  split first to_i ","Bundler VERSION  split first ","Bundler VERSION  split ","Bundler  ui ","Bundler  ui is_a? ","@major_deprecation_ui class ","Bundler UI Shell  new "," prints_major_deprecations? "," raise "," require ","Bundler  bundler_major_version >= ","Bundler  bundler_major_version ","bundler_major_version >= ","major_version succ ","bundler_major_version > ","Bundler  ui warn "," require_relative ","caller_location lineno ","caller_location path "," caller_locations first "," caller_locations "," with_major_deprecation_ui ","Bundler  ui  warn ","Bundler  Bundler  ui  ","Bundler  Bundler  ui  is_a? ","@major_deprecation_Bundler  ui  class "," reqBundler  ui re ","Bundler  Bundler  bundler_major_version  >= ","Bundler  Bundler  bundler_major_version  ","Bundler  bundler_major_version  >= ","Bundler  bundler_major_version  > ","Bundler  Bundler  ui  warn "," reqBundler  ui re_relative "," caller_locations first  lineno "," caller_locations first  path ","  caller_locations first s first ","  caller_locations first s "," with_major_deprecation_Bundler  ui  "]}," Bundler Runtime definition_method":{"type":"method","name":"definition_method","children":[],"call":[]}," Bundler rubygems":{"type":"method","name":"rubygems","children":[],"call":[]}," Bundler RubygemsIntegration Legacy reset":{"type":"method","name":"reset","children":[],"call":[]}," Bundler RubygemsIntegration Legacy post_reset_hooks":{"type":"method","name":"post_reset_hooks","children":[],"call":[]}," Bundler RubygemsIntegration undo_replacements":{"type":"method","name":"undo_replacements","children":[],"call":["@replaced_methods clear ","proc binding eval == ","proc binding eval ","proc binding "," post_reset_hooks reject! "," post_reset_hooks "," redefine_method ","@replaced_methods each ","proc binding source_location [] == ","proc binding source_location [] ","proc binding source_location ","Binding  public_method_defined? "]}," Bundler RubygemsIntegration post_reset_hooks":{"type":"method","name":"post_reset_hooks","children":[],"call":["Gem  post_reset_hooks "]}," Bundler RubygemsIntegration reset":{"type":"method","name":"reset","children":[],"call":["Gem Specification  reset "]}," Bundler RubyGemsGemInstaller at":{"type":"method","name":"at","children":[],"call":[]}," Gem Specification source":{"type":"method","name":"source","children":[],"call":["Gem Source Installed  new "]}," Bundler RubyVersion to_gem_version_with_patchlevel":{"type":"method","name":"to_gem_version_with_patchlevel","children":[],"call":["Gem Version  create "]}," Bundler RubyVersion from_string":{"type":"method","name":"from_string","children":[],"call":[]}," Bundler Resolver index_for":{"type":"method","name":"index_for","children":[],"call":["@source_requirements [] ","dependency name ","idx add_source ","@source_requirements [] specs ","s specs ","dependency all_sources each ","dependency all_sources ","Index  build ","source specs ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","results == ","results empty? ","idx search ","dependency all_sources find ","Index  new "," lambda ","@index_requirements [] "," source_for specs "," source_for ","@@source_requirements [] _requirements [] ","@@index_requirements [] _requirements [] ","idx add_@source_requirements []  ","idx add_@index_requirements []  ","s specs  add_source ","@@source_requirements [] _requirements [] specs ","@@index_requirements [] _requirements [] specs ","dependency all_@source_requirements [] s each ","dependency all_@index_requirements [] s each ","dependency all_@source_requirements [] s ","dependency all_@index_requirements [] s ","@source_requirements []  specs ","@index_requirements []  specs ","Bundler  feature_flag lockfile_uses_separate_rubygems_@source_requirements [] s? ","Bundler  feature_flag lockfile_uses_separate_rubygems_@index_requirements [] s? ","idx search  == ","idx search  empty? ","s specs  search ","dependency all_@source_requirements [] s find ","dependency all_@index_requirements [] s find "," @source_requirements [] _for specs "," @index_requirements [] _for specs "," @source_requirements [] _for "," @index_requirements [] _for "]}," Bundler Resolver SpecGroup activate_platform!":{"type":"method","name":"activate_platform!","children":[],"call":["@activated << "," for? ","@activated include? ! ","@activated include? ","@activated_platforms << ","@activated_platforms include? "," activated_platforms= "]}," Bundler RemoteSpecification to_s":{"type":"method","name":"to_s","children":[],"call":[" platform "," version "," name "," class "]}," Bundler Plugin add_to_load_path":{"type":"method","name":"add_to_load_path","children":[],"call":["$LOAD_PATH unshift ","$LOAD_PATH insert ","Bundler  rubygems load_path_insert_index ","Bundler  rubygems ","Bundler  rubygems load_path_Bundler  rubygems load_path_insert_index  "]}," Bundler Plugin load_plugin":{"type":"method","name":"load_plugin","children":[],"call":[" raise ","Bundler  ui error ","e message ","Bundler  ui ","@loaded_plugin_names << "," load ","path join "," add_to_load_path "," index load_paths "," index "," index plugin_path ","Bundler  rubygems add_to_load_path ","Bundler  rubygems ","name empty? ! ","name empty? "," index plugin_path  join "," add_to_load_ index plugin_path  "," index load_ index plugin_path s "," index plugin_ index plugin_path  ","Bundler  rubygems add_to_load_ index plugin_path  "]}," Bundler Plugin register_plugin":{"type":"method","name":"register_plugin","children":[],"call":[" index register_plugin ","@hooks_by_event keys ","@sources keys ","@commands keys ","path to_s "," index ","Bundler  rm_rf "," source? ","@sources keys any? "," raise ","e message ","e class "," load ","path join ","Pathname  new ","spec full_gem_path "," add_to_load_path ","spec load_paths ","h []= ","Hash  new ","Bundler  rubygems add_to_load_path ","Bundler  rubygems ","Pathname  new  to_s ","Pathname  new  join ","spec full_gem_Pathname  new  "," add_to_load_Pathname  new  ","spec load_Pathname  new s ","spec spec load_paths  ","Bundler  rubygems add_to_load_Pathname  new  "]}," Bundler Plugin validate_plugin!":{"type":"method","name":"validate_plugin!","children":[],"call":[" raise ","plugin_file file? ","plugin_path join ","plugin_path join  file? "]}," Bundler Plugin save_plugins":{"type":"method","name":"save_plugins","children":[],"call":["Bundler  ui info ","Bundler  ui "," register_plugin ","optional_plugins include? "," validate_plugin! ","Pathname  new ","spec full_gem_path ","specs [] ","plugins each "," save_plugin "," index installed? "," index ","specs []  full_gem_path ","spec full_gem_Pathname  new  ","specs [] s [] "," index  register_plugin ? "]}," Bundler Plugin installed?":{"type":"method","name":"installed?","children":[],"call":["Index  new installed? ","Index  new "]}," Bundler Plugin hook":{"type":"method","name":"hook","children":[],"call":["blk call ","@hooks_by_event [] each ","@hooks_by_event [] "," load_plugin ","(send\n  (lvar :plugins) :-\n  (ivar :@loaded_plugin_names)) each ","plugins - ","plugins any? "," index hook_plugins "," index ","Bundler  settings [] ","Bundler  settings ","Bundler  feature_flag plugins? ","Bundler  feature_flag "," raise ","Events  defined_event? ","(send\n  (lvar : index hook_plugins ) :-\n  (ivar :@loaded_plugin_names)) each "," index hook_plugins  - "," index hook_plugins  any? "," index hook_ index hook_plugins  ","Bundler  feature_flag  index hook_plugins ? "]}," Bundler Plugin add_hook":{"type":"method","name":"add_hook","children":[],"call":["@hooks_by_event [] << ","@hooks_by_event [] ","event to_s "," raise ","Events  defined_event? "]}," Bundler Plugin source_from_lock":{"type":"method","name":"source_from_lock","children":[],"call":["src new ","locked_opts merge ","locked_opts [] "," source "," source  new "]}," Bundler Plugin source":{"type":"method","name":"source","children":[],"call":["@sources [] "," load_plugin "," index source_plugin "," index ","@sources key? "," raise "," source? "]}," Bundler Plugin source?":{"type":"method","name":"source?","children":[],"call":[" index source_plugin nil? ! "," index source_plugin nil? "," index source_plugin ","name to_s "," index "]}," Bundler Plugin add_source":{"type":"method","name":"add_source","children":[],"call":["@sources []= "]}," Bundler Plugin exec_command":{"type":"method","name":"exec_command","children":[],"call":["@commands [] new exec ","@commands [] new ","@commands [] "," load_plugin "," index command_plugin "," index ","@commands key? "," raise "," command? "]}," Bundler Plugin command?":{"type":"method","name":"command?","children":[],"call":[" index command_plugin nil? ! "," index command_plugin nil? "," index command_plugin "," index "]}," Bundler Plugin add_command":{"type":"method","name":"add_command","children":[],"call":["@commands []= "]}," Bundler Plugin cache":{"type":"method","name":"cache","children":[],"call":[" root join "," root "]}," Bundler Plugin global_root":{"type":"method","name":"global_root","children":[],"call":["Bundler  user_bundle_path join ","Bundler  user_bundle_path "]}," Bundler Plugin local_root":{"type":"method","name":"local_root","children":[],"call":["Bundler  app_config_path join ","Bundler  app_config_path "]}," Bundler Plugin root":{"type":"method","name":"root","children":[],"call":[" global_root "," local_root ","SharedHelpers  in_bundle? ","Bundler  user_bundle_path join ","Bundler  user_bundle_path "]}," Bundler Plugin index":{"type":"method","name":"index","children":[],"call":["Index  new "]}," Bundler Plugin gemfile_install":{"type":"method","name":"gemfile_install","children":[],"call":[" raise ","Bundler  ui error ","e backtrace [] ","e backtrace ","e message ","Bundler  ui "," save_plugins ","builder inferred_plugins ","Installer  new install_definition ","Installer  new "," index installed? "," index ","definition dependencies map reject ","definition dependencies map ","definition dependencies ","definition dependencies empty? ","builder to_definition ","builder eval_gemfile ","builder instance_eval "," block_given? ","DSL  new ","definition dependencies any? ","DSL  evaluate ","e is_a? ","Bundler  settings temporary ","Bundler  settings ","builder check_primary_source_safety "," save_Installer  new install_definition  ","DSL  new  inferred_plugins ","builder inferred_Installer  new install_definition  ","Installer  new install_builder to_definition  ","Installer  new install_DSL  evaluate  ","builder to_definition  dependencies map reject ","DSL  evaluate  dependencies map reject ","builder to_definition  dependencies map ","DSL  evaluate  dependencies map ","builder to_definition  dependencies ","DSL  evaluate  dependencies ","builder to_definition  dependencies empty? ","DSL  evaluate  dependencies empty? ","builder to_builder to_definition  ","builder to_DSL  evaluate  ","DSL  new  to_definition ","DSL  new  eval_gemfile ","DSL  new  instance_eval ","builder to_definition  dependencies any? ","DSL  evaluate  dependencies any? ","DSL  new  check_primary_source_safety "]}," Bundler Plugin install":{"type":"method","name":"install","children":[],"call":["Bundler  ui error ","e backtrace join ","e backtrace ","e message "," name ","Bundler  ui ","Bundler  rm_rf ","spec full_gem_path ","specs values map ","specs values "," save_plugins ","Installer  new install ","Installer  new ","Bundler Plugin  install "," options ","paths values map ","paths values ","specs_to_delete values each ","specs_to_delete values ","Hash  [] "," index commands values include? ! "," index commands values include? "," index commands values "," index commands "," index ","names include? ","specs select ","(send\n  (lvar :names) :map) join ","names map ","specs_to_delete each_value "," raise ","options [] ","Installer  new install  values map ","Installer  new install  values ","Installer  new install _to_delete values each ","Hash  []  values each ","Installer  new install _to_delete values ","Hash  []  values ","Installer  new install  select ","Installer  new install _to_delete each_value ","Hash  []  each_value "]}," Bundler Plugin reset!":{"type":"method","name":"reset!","children":[],"call":["h []= ","Hash  new "," remove_instance_variable "," instance_variables each "," instance_variables "]}," Bundler Plugin SourceList all_sources":{"type":"method","name":"all_sources","children":[],"call":[" path_sources + + "," rubygems_sources "," path_sources + "," git_sources "," path_sources "," path_sources + + + "," metadata_source "]}," Bundler Plugin SourceList add_rubygems_source":{"type":"method","name":"add_rubygems_source","children":[],"call":[" add_source_to_list ","Plugin Installer Rubygems  new "]}," Bundler Plugin SourceList add_git_source":{"type":"method","name":"add_git_source","children":[],"call":[" add_source_to_list "," git_sources ","Plugin Installer Git  new "]}," Bundler Plugin SourceList initialize":{"type":"method","name":"initialize","children":[],"call":["Plugin Installer Rubygems  new "]}," Bundler Plugin Installer install_from_specs":{"type":"method","name":"install_from_specs","children":[],"call":["paths []= ","spec name ","spec source install ","spec source ","specs each ","spec full_gem_path "]}," Bundler Plugin Installer install_rubygems":{"type":"method","name":"install_rubygems","children":[],"call":[" install_definition ","Definition  new ","source_list add_rubygems_source ","SourceList  new ","Dependency  new ","names map "," install_all_sources "," install_Definition  new  ","SourceList  new  add_rubygems_source "]}," Bundler Plugin Installer install_git":{"type":"method","name":"install_git","children":[],"call":[" install_definition ","Definition  new ","Dependency  new ","names map ","source_list add_rubygems_source ","options [] ","source_list add_git_source ","SourceList  new ","options []= ","options delete "," install_all_sources "," install_Definition  new  ","SourceList  new  add_rubygems_source ","SourceList  new  add_git_source "]}," Bundler Plugin Installer install_definition":{"type":"method","name":"install_definition","children":[{"type":"method","name":"lock","children":[],"asgn":[],"call":[]}],"call":[" install_from_specs ","definition specs ","definition resolve_remotely! ","Hash  [] ","plugins include? ","paths select ","definition dependencies map ","definition dependencies "," install_from_definition specs  ","definition definition specs  ","definition dependencies map  include? "," install_from_specs  select "]}," Bundler Plugin Installer install":{"type":"method","name":"install","children":[],"call":[" install_rubygems ","Bundler  rubygems sources ","Bundler  rubygems ","options [] "," install_git ","Bundler  settings temporary ","Bundler  settings "," install_local_git "," check_sources_consistency! ","Gem  sources "]}," Bundler Plugin Installer Rubygems cache_path":{"type":"method","name":"cache_path","children":[],"call":["Plugin  cache "]}," Bundler Plugin Installer Rubygems rubygems_dir":{"type":"method","name":"rubygems_dir","children":[],"call":["Plugin  root "]}," Bundler Plugin Installer Rubygems requires_sudo?":{"type":"method","name":"requires_sudo?","children":[],"call":[]}," Bundler Plugin Installer Rubygems version_message":{"type":"method","name":"version_message","children":[],"call":["spec version ","spec name "]}," Bundler Plugin Installer Git generate_bin":{"type":"method","name":"generate_bin","children":[],"call":[]}," Bundler Plugin Installer Git root":{"type":"method","name":"root","children":[],"call":["Plugin  root "]}," Bundler Plugin Installer Git version_message":{"type":"method","name":"version_message","children":[],"call":["spec version ","spec name "]}," Bundler Plugin Installer Git install_path":{"type":"method","name":"install_path","children":[],"call":["Plugin  root join ","Plugin  root "," shortref_for_path "," revision "," base_name "]}," Bundler Plugin Installer Git cache_path":{"type":"method","name":"cache_path","children":[],"call":["Plugin  cache join ","Plugin  cache "," uri_hash "," base_name "]}," Bundler Plugin Index save_index":{"type":"method","name":"save_index","children":[],"call":["f puts ","YAMLSerializer  dump ","File  open ","FileUtils  mkdir_p ","index_f dirname ","SharedHelpers  filesystem_access "," index_file "," require "," require_relative "]}," Bundler Plugin Index load_index":{"type":"method","name":"load_index","children":[],"call":["@sources merge! ","index [] ","@plugin_paths merge! ","@load_paths merge! ","@hooks merge! ","@commands merge! ","YAMLSerializer  load "," require ","index_f read ","index_f size zero? ! ","index_f size zero? ","index_f size ","index_f exist? ","SharedHelpers  filesystem_access "," index_file "," require_relative ","YAMLSerializer  load  [] ","YAMLSerializer  load _f read ","YAMLSerializer  load _f size zero? ! ","YAMLSerializer  load _f size zero? ","YAMLSerializer  load _f size ","YAMLSerializer  load _f exist? "," YAMLSerializer  load _file "]}," Bundler Plugin Index hook_plugins":{"type":"method","name":"hook_plugins","children":[],"call":["@hooks [] "]}," Bundler Plugin Index source_plugin":{"type":"method","name":"source_plugin","children":[],"call":["@sources [] "]}," Bundler Plugin Index source?":{"type":"method","name":"source?","children":[],"call":["@sources key? "]}," Bundler Plugin Index installed?":{"type":"method","name":"installed?","children":[],"call":["@plugin_paths [] "]}," Bundler Plugin Index command_plugin":{"type":"method","name":"command_plugin","children":[],"call":["@commands [] "]}," Bundler Plugin Index load_paths":{"type":"method","name":"load_paths","children":[],"call":["@load_paths [] "]}," Bundler Plugin Index plugin_path":{"type":"method","name":"plugin_path","children":[],"call":["Pathname  new ","@plugin_paths [] "]}," Bundler Plugin Index local_index_file":{"type":"method","name":"local_index_file","children":[],"call":["Plugin  local_root join ","Plugin  local_root "]}," Bundler Plugin Index global_index_file":{"type":"method","name":"global_index_file","children":[],"call":["Plugin  global_root join ","Plugin  global_root "]}," Bundler Plugin Index index_file":{"type":"method","name":"index_file","children":[],"call":["Plugin  root join ","Plugin  root "]}," Bundler Plugin Index register_plugin":{"type":"method","name":"register_plugin","children":[],"call":[" raise "," save_index ","@load_paths []= ","@plugin_paths []= ","(or-asgn\n  (send\n    (ivar :@hooks) :[]\n    (lvar :e))\n  (array)) << ","@hooks [] ","hooks each ","@sources []= ","sources each ","SourceConflict  new ","common empty? ","sources & ","@sources keys ","@commands []= ","commands each ","CommandConflict  new ","commands & ","@commands keys ","@commands dup ","event_hooks uniq! ","(or-asgn\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event))\n  (array)) << ","sources &  empty? ","commands &  empty? ","(or-asgn\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event))\n  (array)) <<  uniq! "]}," Bundler Plugin Index initialize":{"type":"method","name":"initialize","children":[],"call":[" load_index "," local_index_file ","SharedHelpers  in_bundle? "," global_index_file "]}," Bundler Plugin Index SourceConflict initialize":{"type":"method","name":"initialize","children":[],"call":["sources join "]}," Bundler Plugin Index CommandConflict initialize":{"type":"method","name":"initialize","children":[],"call":["commands join "]}," Bundler Plugin DSL source":{"type":"method","name":"source","children":[],"call":["@inferred_plugins << "," plugin ","d name == ","d name ","@dependencies any? ","options [] ","options key? "," normalize_hash ","args pop dup ","args pop ","args last is_a? ","args last "," normalize_hash  [] ","args pop dup  [] "," normalize_hash  key? ","args pop dup  key? "]}," Bundler Plugin DSL method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","Bundler Dsl  method_defined? "]}," Bundler Plugin DSL plugin":{"type":"method","name":"plugin","children":[],"call":[" _gem "]}," Bundler Plugin DSL initialize":{"type":"method","name":"initialize","children":[],"call":["Plugin SourceList  new "]}," Bundler Plugin API respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["Bundler  respond_to? ","SharedHelpers  respond_to? "]}," Bundler Plugin API method_missing":{"type":"method","name":"method_missing","children":[],"call":["SharedHelpers  send ","SharedHelpers  respond_to? ","Bundler  send ","Bundler  respond_to? "]}," Bundler Plugin API tmp":{"type":"method","name":"tmp","children":[],"call":["Bundler  tmp ","(str \"plugin\") join "]}," Bundler Plugin API cache_dir":{"type":"method","name":"cache_dir","children":[],"call":["Plugin  cache join ","Plugin  cache "]}," Bundler Plugin API hook":{"type":"method","name":"hook","children":[],"call":[]}," Bundler Plugin API source":{"type":"method","name":"source","children":[],"call":[]}," Bundler Plugin API command":{"type":"method","name":"command","children":[],"call":[]}," Bundler Plugin API Source root":{"type":"method","name":"root","children":[],"call":["Bundler  root "]}," Bundler Plugin API Source gem_install_dir":{"type":"method","name":"gem_install_dir","children":[],"call":["Bundler  install_path "]}," Bundler Plugin API Source uri_hash":{"type":"method","name":"uri_hash","children":[],"call":["Digest SHA1  hexdigest "," uri ","SharedHelpers  digest hexdigest ","SharedHelpers  digest "]}," Bundler Plugin API Source include?":{"type":"method","name":"include?","children":[],"call":["other == "]}," Bundler Plugin API Source to_s":{"type":"method","name":"to_s","children":[],"call":[" uri "," options [] "," options "]}," Bundler Plugin API Source to_lock":{"type":"method","name":"to_lock","children":[],"call":["out << "," options_to_lock each "," options_to_lock ","String  new ","String  new  << "]}," Bundler Plugin API Source can_lock?":{"type":"method","name":"can_lock?","children":[],"call":["spec source == ","spec source "]}," Bundler Plugin API Source unmet_deps":{"type":"method","name":"unmet_deps","children":[],"call":[" specs unmet_dependency_names "," specs "]}," Bundler Plugin API Source app_cache_path":{"type":"method","name":"app_cache_path","children":[],"call":["Bundler  app_cache join "," app_cache_dirname ","Bundler  app_cache "]}," Bundler Plugin API Source installed?":{"type":"method","name":"installed?","children":[],"call":["File  directory? "," install_path "]}," Bundler Plugin API Source hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," uri "," class "]}," Bundler Plugin API Source ==":{"type":"method","name":"==","children":[],"call":[" uri == ","other uri "," uri ","other is_a? "," class "]}," Bundler Plugin API Source cache":{"type":"method","name":"cache","children":[],"call":["FileUtils  touch "," app_cache_path join "," app_cache_path ","FileUtils  cp_r "," install_path ","FileUtils  rm_rf "]}," Bundler Plugin API Source app_cache_dirname":{"type":"method","name":"app_cache_dirname","children":[],"call":[" uri_hash ","File  basename ","URI  parse normalize path ","URI  parse normalize ","URI  parse "," uri ","Bundler URI  parse normalize path ","Bundler URI  parse normalize ","Bundler URI  parse "]}," Bundler Plugin API Source unlock!":{"type":"method","name":"unlock!","children":[],"call":[]}," Bundler Plugin API Source cached!":{"type":"method","name":"cached!","children":[],"call":[]}," Bundler Plugin API Source remote!":{"type":"method","name":"remote!","children":[],"call":[]}," Bundler Plugin API Source specs":{"type":"method","name":"specs","children":[],"call":["index << ","Bundler  rubygems validate ","Bundler  rubygems ","spec source= ","Bundler  rubygems set_installed_by_version ","Bundler  load_gemspec ","files each ","Bundler Index  build "," fetch_gemspec_files ","Bundler  load_gemspec  source= ","Bundler  load_gemBundler  load_gemspec  "," fetch_gemspec_files  each "," fetch_gemBundler  load_gemspec _files "," fetch_gemspec_ fetch_gemspec_files  "]}," Bundler Plugin API Source install_path":{"type":"method","name":"install_path","children":[],"call":[" gem_install_dir join "," uri_hash [] "," uri_hash "," gem_install_dir ","File  basename ","URI  parse normalize path ","URI  parse normalize ","URI  parse "," uri ","Bundler URI  parse normalize path ","Bundler URI  parse normalize ","Bundler URI  parse "]}," Bundler Plugin API Source post_install":{"type":"method","name":"post_install","children":[],"call":["installer post_install ","Bundler Source Path Installer  new ","Bundler Source Path Installer  new  post_install "]}," Bundler Plugin API Source install":{"type":"method","name":"install","children":[],"call":[" raise "]}," Bundler Plugin API Source options_to_lock":{"type":"method","name":"options_to_lock","children":[],"call":[]}," Bundler Plugin API Source fetch_gemspec_files":{"type":"method","name":"fetch_gemspec_files","children":[],"call":[]}," Bundler Plugin API Source initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Bundler Installer lock":{"type":"method","name":"lock","children":[],"call":["@definition lock ","opts [] ","Bundler  default_lockfile "]}," Bundler Installer ensure_specs_are_compatible!":{"type":"method","name":"ensure_specs_are_compatible!","children":[],"call":[" raise ","spec full_name ","required_rubygems_version satisfied_by? ","spec required_rubygems_version ","required_ruby_version satisfied_by? ","system_ruby gem_version ","spec required_ruby_version ","@definition specs each ","@definition specs ","Gem Version  create ","Bundler RubyVersion  system "," specs each "," specs ","Bundler  rubygems version ","Bundler  rubygems ","Gem  rubygems_version ","spec matches_current_rubygems? ","Gem  ruby_version ","spec matches_current_ruby? ","spec required_rubygems_version  satisfied_by? ","required_Gem Version  create  satisfied_by? ","required_Bundler  rubygems version  satisfied_by? ","spec spec required_rubygems_version  ","spec required_Gem Version  create  ","spec required_Bundler  rubygems version  ","spec required_ruby_version  satisfied_by? ","Bundler RubyVersion  system  gem_version ","spec spec required_ruby_version  ","Gem  Gem Version  create  ","Gem  Bundler  rubygems version  "]}," Bundler ParallelInstaller enqueue_specs":{"type":"method","name":"enqueue_specs","children":[],"call":[" worker_pool enq "," worker_pool ","spec state= ","spec dependencies_installed? ","@specs select each ","@specs select ","spec name != ","@rake name ","spec name ","@rake installed? ! ","@rake installed? ","spec dependencies_missing? "]}," Bundler ParallelInstaller handle_error":{"type":"method","name":"handle_error","children":[],"call":[" raise ","errors map join ","errors map ","e is_a? ","errors find ","@specs select map ","@specs select ","errors join "," failed_specs map "," failed_specs ","@specs select map  map join "," failed_specs map  map join ","@specs select map  map "," failed_specs map  map ","@specs select map  find "," failed_specs map  find ","@specs select map  join "," failed_specs map  join "]}," Bundler ParallelInstaller process_specs":{"type":"method","name":"process_specs","children":[],"call":[" enqueue_specs ","spec state= ","spec failed? "," worker_pool deq "," worker_pool "," enqueue_ worker_pool deq s "," worker_pool deq  state= "," worker_pool deq  failed? "]}," Bundler ParallelInstaller worker_pool":{"type":"method","name":"worker_pool","children":[],"call":["Bundler Worker  new ","spec_install error= ","spec_install state= ","success ! ","spec_install post_install_message= ","message nil? ! ","message nil? ","gem_installer install_from_spec ","Bundler GemInstaller  new ","spec_install spec "," lambda "," require_tree_for_spec "," do_install ","Bundler GemInstaller  new  install_from_spec "]}," Bundler ParallelInstaller call":{"type":"method","name":"call","children":[],"call":[" worker_pool stop "," worker_pool "," handle_error ","@specs any? "," process_specs ","@specs all? "," enqueue_specs "," check_for_corrupt_lockfile "," require ","RUBY_VERSION  < "," install_serially "," install_with_worker ","@size > "," failed_specs any? "," failed_specs ","Gem Specification  reset "," do_install "," check_for_unmet_dependencies "]}," Bundler ParallelInstaller initialize":{"type":"method","name":"initialize","children":[],"call":["SpecInstallation  new ","all_specs map ","s name == ","s name ","@specs find "]}," Bundler ParallelInstaller max_threads":{"type":"method","name":"max_threads","children":[],"call":[]}," Bundler ParallelInstaller SpecInstallation all_dependencies":{"type":"method","name":"all_dependencies","children":[],"call":["@spec dependencies "]}," Bundler ParallelInstaller SpecInstallation dependencies":{"type":"method","name":"dependencies","children":[],"call":[" raise ","missing map join ","missing map ","missing size > ","missing size ","missing empty? ","all_spec_names include? ","dep name ","deps reject "," ignorable_dependency? "," all_dependencies reject "," all_dependencies "]}," Bundler ParallelInstaller SpecInstallation dependencies_installed?":{"type":"method","name":"dependencies_installed?","children":[],"call":["installed_specs include? ","d name "," dependencies all? "," dependencies ","all_specs map ","all_specs select map ","all_specs select ","all_specs select map  include? "]}," Bundler ParallelInstaller SpecInstallation ignorable_dependency?":{"type":"method","name":"ignorable_dependency?","children":[],"call":["dep name == ","dep name ","dep type == ","dep type "]}," Bundler ParallelInstaller SpecInstallation has_post_install_message?":{"type":"method","name":"has_post_install_message?","children":[],"call":[" post_install_message empty? ! "," post_install_message empty? "," post_install_message "]}," Bundler ParallelInstaller SpecInstallation ready_to_enqueue?":{"type":"method","name":"ready_to_enqueue?","children":[],"call":[" installation_attempted? ! "," installation_attempted? "," enqueued? ! "," enqueued? "," state == "," state "]}," Bundler ParallelInstaller SpecInstallation installation_attempted?":{"type":"method","name":"installation_attempted?","children":[],"call":[" failed? "," installed? "]}," Bundler ParallelInstaller SpecInstallation failed?":{"type":"method","name":"failed?","children":[],"call":[" state == "," state "]}," Bundler ParallelInstaller SpecInstallation enqueued?":{"type":"method","name":"enqueued?","children":[],"call":[" state == "," state "]}," Bundler ParallelInstaller SpecInstallation installed?":{"type":"method","name":"installed?","children":[],"call":[" state == "," state "]}," Bundler ParallelInstaller SpecInstallation initialize":{"type":"method","name":"initialize","children":[],"call":["spec name ","spec full_name "]}," Bundler GemInstaller specific_failure_message":{"type":"method","name":"specific_failure_message","children":[],"call":["message + ","Bundler  ui add_color "," failure_message ","Bundler  ui ","message lines first + ","message lines drop join ","message lines drop ","message lines ","message lines first ","   + + ","   + ","e backtrace join ","e backtrace ","Bundler  ui debug? ","e message ","e class ","message lines first +  + "," failure_message lines first +  ","message lines first +  lines first + ","message lines first +  lines drop join ","message lines first +  lines drop ","message lines first +  lines ","message lines first +  lines first ","e message lines first +  "]}," Bundler Index dependencies_eql?":{"type":"method","name":"dependencies_eql?","children":[],"call":["Set  new == ","Set  new ","d type != ","d type ","other_spec dependencies select ","other_spec dependencies ","spec dependencies select ","spec dependencies ","deps sort == ","other_deps sort ","deps sort "]}," Bundler Index sort_specs":{"type":"method","name":"sort_specs","children":[],"call":[" class sort_specs "," class "]}," Bundler Graph spec_for_dependency":{"type":"method","name":"spec_for_dependency","children":[],"call":["s name == ","dependency name ","s name ","@env requested_specs find ","@env requested_specs "]}," Bundler GemVersionPromoter debug_format_result":{"type":"method","name":"debug_format_result","children":[],"call":[" strict "," level ","a first ","aa join ","sg_data last map ","sg_data last ","sg_data first version ","sg_data first ","a last map ","a last ","dp requirement to_s ","dp requirement ","dp name ","sg dependencies_for_activated_platforms map ","sg dependencies_for_activated_platforms ","sg version ","spec_groups map ","dep to_s "]}," Bundler GemVersionPromoter move_version_to_end":{"type":"method","name":"move_version_to_end","children":[],"call":["keep concat ","s version to_s == ","version to_s ","s version to_s ","s version ","result partition "]}," Bundler GemVersionPromoter post_sort":{"type":"method","name":"post_sort","children":[],"call":[" move_version_to_end "," unlocking_gem? "," major? ","@locked_version nil? ","locked_version nil? "]}," Bundler GemVersionPromoter unlocking_gem?":{"type":"method","name":"unlocking_gem?","children":[],"call":[" unlock_gems include? "," unlock_gems "," unlock_gems empty? "]}," Bundler GemVersionPromoter segments_do_not_match":{"type":"method","name":"segments_do_not_match","children":[],"call":["@a_ver segments [] != ","@b_ver segments [] ","@b_ver segments ","@a_ver segments [] ","@a_ver segments ","(sym :major) index ","(sym :major) (sym :major) index  "]}," Bundler GemVersionPromoter either_version_older_than_locked":{"type":"method","name":"either_version_older_than_locked","children":[],"call":["@b_ver < ","@a_ver < "]}," Bundler GemVersionPromoter sort_dep_specs":{"type":"method","name":"sort_dep_specs","children":[],"call":[" post_sort ","@a_ver <=> ","@b_ver <=> "," segments_do_not_match "," minor? ! "," minor? "," either_version_older_than_locked "," major? ","b version ","a version ","spec_groups sort ","locked_spec version ","locked_spec name ","a_pre ! ","b_pre ! ","@b_ver prerelease? ","@a_ver prerelease? ","@prerelease_specified [] ","package unlock? ","a <=> ","b <=> "," segments_do_not_match? "," either_version_older_than_locked? ","b prerelease? ","a prerelease? "," pre? ","package prerelease_specified? ","specs sort ","package locked_version ","a version  <=> ","b version  <=> ","@a_ver prerelease?  ! ","a prerelease?  ! ","@b_ver prerelease?  ! ","b prerelease?  ! ","b version  prerelease? ","a version  prerelease? ","package package locked_version  "]}," Bundler GemVersionPromoter filter_dep_specs":{"type":"method","name":"filter_dep_specs","children":[],"call":[" sort_dep_specs ","gsv >= ","matches uniq == ","matches uniq ","gsv segments [] == ","lsv segments [] ","lsv segments ","gsv segments [] ","gsv segments ","must_match map "," minor? ","locked_spec version ","spec_group version "," major? ! "," major? ","spec_groups select ","locked_version segments [] ","locked_version segments ","must_match all? ","spec version ","specs select ","locked_version nil? ","package locked_version ","spec_group version  >= ","spec version  >= ","spec_group version  segments [] == ","spec version  segments [] == ","locked_spec version  segments [] ","locked_spec version  segments ","spec_group version  segments [] ","spec version  segments [] ","spec_group version  segments ","spec version  segments ","package locked_version  segments [] ","package locked_version  segments ","package locked_version  nil? ","package package locked_version  "]}," Bundler GemVersionPromoter minor?":{"type":"method","name":"minor?","children":[],"call":[" level == "," level "]}," Bundler GemVersionPromoter major?":{"type":"method","name":"major?","children":[],"call":[" level == "," level "]}," Bundler GemVersionPromoter sort_versions":{"type":"method","name":"sort_versions","children":[],"call":["STDERR  puts "," debug_format_result inspect "," debug_format_result ","ENV  [] ","(send nil :strict) tap "," sort_dep_specs "," filter_dep_specs "," strict "," locked_specs [] first "," locked_specs [] "," locked_specs ","dep name ","@sort_versions [] "," warn "," puts "," sort_dep_ filter_dep_specs  "," filter_dep_ filter_dep_specs  ","  locked_specs [] first s [] first "," locked_ filter_dep_specs  [] first ","  locked_specs [] first s [] "," locked_ filter_dep_specs  [] ","  locked_specs [] first s "," locked_ filter_dep_specs  "]}," Bundler GemVersionPromoter level=":{"type":"method","name":"level=","children":[],"call":[" raise ","(sym :major) include? ","value to_sym "]}," Bundler GemVersionPromoter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Fetcher CompactIndex compact_fetcher":{"type":"method","name":"compact_fetcher","children":[],"call":["Net HTTPNotModified  new ","Bundler  ui warn ","Bundler  ui "," raise ","headers [] ","Bundler  settings [] ","Bundler  settings "," downloader fetch "," fetch_uri + "," fetch_uri "," downloader "," lambda "]}," Bundler Fetcher CompactIndex bundle_worker":{"type":"method","name":"bundle_worker","children":[],"call":["worker instance_variable_set ","@bundle_worker tap ","Bundler Worker  new "," display_uri host "," display_uri ","Bundler  current_ruby rbx? ","Bundler  current_ruby ","Bundler  settings processor_count ","Bundler  settings "]}," Bundler Fetcher Base log_specs":{"type":"method","name":"log_specs","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui debug ","Bundler  ui debug? "]}," Bundler OperationNotSupportedError message":{"type":"method","name":"message","children":[],"call":[" action "]}," Bundler HTTPError filter_uri":{"type":"method","name":"filter_uri","children":[],"call":["URICredentialsFilter  credential_filtered_uri "]}," Bundler BundlerError all_errors":{"type":"method","name":"all_errors","children":[],"call":[]}," Bundler Dsl warn_deprecated_git_source":{"type":"method","name":"warn_deprecated_git_source","children":[],"call":["Bundler SharedHelpers  major_deprecation ","replacement to_s gsub ","replacement to_s ","replacement count zero? ","replacement count "]}," Bundler Dsl warn_github_source_change":{"type":"method","name":"warn_github_source_change","children":[],"call":["Bundler SharedHelpers  major_deprecation "]}," Bundler Dsl plugin":{"type":"method","name":"plugin","children":[],"call":[]}," Bundler skip=":{"type":"method","name":"skip=","children":[],"call":[]}," Bundler skip":{"type":"method","name":"skip","children":[],"call":[]}," Bundler Definition additional_base_requirements_for_resolve":{"type":"method","name":"additional_base_requirements_for_resolve","children":[],"call":["(send\n  (send\n    (ivar :@locked_gems) :specs) :reduce\n  (hash)) values ","requirements []= ","Gem Dependency  new ","locked_spec version ","locked_spec name ","@locked_gems specs reduce ","@locked_gems specs ","Bundler  settings [] ","Bundler  settings ","DepProxy  new ","locked_spec platform ","Bundler  feature_flag only_update_to_newer_versions? ","Bundler  feature_flag ","@locked_deps [] != ","dependencies_by_name [] ","@locked_deps [] "," dependencies group_by "," dependencies ","@locked_gems dependencies [] != ","@locked_gems dependencies [] ","@locked_gems dependencies ","memo update ","dep name "," dependencies inject ","dependency source is_a? ","dependency source ","DepProxy  get_proxy "," sources expired_sources? ! "," sources expired_sources? ","@locked_gems sources "," sources "," unlocking? "," converge_specs map "," converge_specs ","Dependency  new ","(send\n  (send nil :converge_specs\n    (ivar :@originally_locked_specs)) :map) uniq ","(send\n  (send nil :converge_specs\n    (send\n      (ivar :@originally_locked_specs) :-\n      (lvar :last_resolve))) :map) uniq ","@originally_locked_specs - ","resolution_packages base_requirements []= ","Gem Requirement  new ","resolution_packages base_requirements ","locked_spec source is_a? ","locked_spec source "," converge_specs each ","locked_spec locked_spec name  ","@locked_Gem Dependency  new s [] != ","@locked_Dependency  new s [] != ","Gem Dependency  new endencies_by_name [] ","Dependency  new endencies_by_name [] ","dependencies_by_locked_spec name  [] "," dependencies group_by  [] ","@locked_Gem Dependency  new s [] ","@locked_Dependency  new s [] "," Gem Dependency  new endencies group_by "," Dependency  new endencies group_by "," Gem Dependency  new endencies "," Dependency  new endencies ","@locked_gems Gem Dependency  new endencies [] != ","@locked_gems Dependency  new endencies [] != ","@locked_gems Gem Dependency  new endencies [] ","@locked_gems Dependency  new endencies [] ","@locked_gems Gem Dependency  new endencies ","@locked_gems Dependency  new endencies ","Gem Dependency  new  name ","Dependency  new  name ","dep locked_spec name  "," Gem Dependency  new endencies inject "," Dependency  new endencies inject ","Gem Dependency  new endency source is_a? ","Dependency  new endency source is_a? ","dependencies_by_name []  source is_a? ","Gem Dependency  new endency source ","Dependency  new endency source ","dependencies_by_name []  source "]}," Bundler Definition compute_requires":{"type":"method","name":"compute_requires","children":[],"call":["requires []= ","dep name ","file == "," Array map "," Array ","dep autorequire ","dep should_include? "," dependencies reduce "," dependencies "]}," Bundler Definition extract_gem_info":{"type":"method","name":"extract_gem_info","children":[],"call":["error message scan flatten ","error message scan ","error message "]}," Bundler Definition converge_path_source_to_gemspec_source":{"type":"method","name":"converge_path_source_to_gemspec_source","children":[],"call":["s as_path_source == ","s as_path_source ","s is_a? "," sources path_sources find "," sources path_sources "," sources ","source instance_of? "]}," Bundler Definition specs_for_source_changed?":{"type":"method","name":"specs_for_source_changed?","children":[],"call":["source specs != ","source specs ","locked_index use ","source can_lock? ","@locked_specs select ","Index  new ","locked_index != ","Bundler  ui debug ","Bundler  ui ","Index  new  use ","Index  new  != "]}," Bundler Definition change_reason":{"type":"method","name":"change_reason","children":[],"call":["(array\n  (ivar :@source_changes)\n  (str \"the list of sources changed\")) select map join ","(array\n  (ivar :@source_changes)\n  (str \"the list of sources changed\")) select map ","(array\n  (ivar :@source_changes)\n  (str \"the list of sources changed\")) select ","(send\n  (block\n    (send\n      (ivar :@unlock) :reject)\n    (args\n      (arg :_k)\n      (arg :v))\n    (send\n      (send nil :Array\n        (lvar :v)) :empty?)) :map) join ","v join "," Array ","k to_s ","v == ","(send\n  (ivar :@unlock) :reject) map "," Array empty? ","@unlock reject "," unlocking? ","(array\n  (i Array ar :@source_changes)\n  (str \"the list of sources changed\")) select map join ","(array\n  (i Array ar :@source_changes)\n  (str \"the list of sources changed\")) select map ","(array\n  (i Array ar :@source_changes)\n  (str \"the list of sources changed\")) select ","(send\n  (block\n    (send\n      (i Array ar :@unlock) :reject)\n    (args\n      (arg :_k)\n      (arg : Array ))\n    (send\n      (send nil :Array\n        (l Array ar : Array )) :empty?)) :map) join "," Array  join "," Array  == ","(send\n  (i Array ar :@unlock) :reject) map "]}," Bundler Definition remove_platform":{"type":"method","name":"remove_platform","children":[],"call":[" raise ","@platforms join ","@platforms delete ","Gem Platform  new "]}," Bundler Definition add_platform":{"type":"method","name":"add_platform","children":[],"call":["@platforms include? ! ","@platforms include? "]}," Bundler Definition missing_dependencies":{"type":"method","name":"missing_dependencies","children":[],"call":[" resolve materialize "," current_dependencies "," resolve "]}," Bundler Definition create_gem_version_promoter":{"type":"method","name":"create_gem_version_promoter","children":[],"call":["GemVersionPromoter  new ","@unlock [] ","Bundler SpecSet  new ","locked specs ","Bundler LockfileParser  new ","@lockfile_contents empty? ! ","@lockfile_contents empty? ","@locked_specs empty? ","@locked_gems specs "," unlocking? ","Bundler LockfileParser  new  specs ","@Bundler LockfileParser  new _specs empty? ","@Bundler SpecSet  new  empty? ","@Bundler LockfileParser  new _gems specs "]}," Bundler CLI print_command":{"type":"method","name":"print_command","children":[],"call":["Bundler  ui info ","command * ","Bundler  ui ","command reject! ","command << ","Thor Options  to_switches "," options ","(str \"bundle\") + "," args ","(str \"exec\") include? ","config [] name ","config [] ","Bundler  ui debug? ","ENV  [] ","Thor Options  to_switches strip ","options_to_print sort_by ","o default == ","o default ","current_command options [] ","current_command options ","options_to_print delete_if "," options dup ","current_command name ","PARSEABLE_COMMANDS  include? ","cmd options [] ","cmd options ","cmd name "," current_command ","Bundler  ui infcurrent_command options []  ","Bundler  ui infcmd options []  ","(str \"bundle\") +  * ","ccurrent_command options [] mmand * ","ccmd options [] mmand * ","(str \"bundle\") +  reject! ","ccurrent_command options [] mmand reject! ","ccmd options [] mmand reject! ","(str \"bundle\") +  << ","ccurrent_command options [] mmand << ","ccmd options [] mmand << ","Thcurrent_command options [] r Opticurrent_command options [] ns  tcurrent_command options [] _switches ","Thcmd options [] r Opticmd options [] ns  tcmd options [] _switches "," current_command options [] pticurrent_command options [] ns "," cmd options [] pticmd options [] ns ","ccurrent_command options [] nfig [] name ","ccmd options [] nfig [] name ","ccurrent_command options [] nfig [] ","ccmd options [] nfig [] ","Thcurrent_command options [] r Opticurrent_command options [] ns  tcurrent_command options [] _switches strip ","Thcmd options [] r Opticmd options [] ns  tcmd options [] _switches strip ","current_command options [] pticurrent_command options [] ns_tcurrent_command options [] _print scurrent_command options [] rt_by ","cmd options [] pticmd options [] ns_tcmd options [] _print scmd options [] rt_by "," options dup  sort_by ","current_command options []  default == ","cmd options []  default == ","current_command options []  default ","cmd options []  default ","current_(str \"bundle\") +  options [] ","config [] name  options [] ","config []  options [] ","current_ccurrent_command options [] mmand current_command options [] pticurrent_command options [] ns [] ","current_ccmd options [] mmand cmd options [] pticmd options [] ns [] ","current_(str \"bundle\") +  options ","config [] name  options ","config []  options ","current_ccurrent_command options [] mmand current_command options [] pticurrent_command options [] ns ","current_ccmd options [] mmand cmd options [] pticmd options [] ns ","current_command options [] pticurrent_command options [] ns_tcurrent_command options [] _print delete_if ","cmd options [] pticmd options [] ns_tcmd options [] _print delete_if "," options dup  delete_if "," current_command options [] pticurrent_command options [] ns dup "," cmd options [] pticmd options [] ns dup ","current_(str \"bundle\") +  name ","config [] name  name ","config []  name ","current_ccurrent_command options [] mmand name ","current_ccmd options [] mmand name ","cmd current_command options [] pticurrent_command options [] ns [] ","cmd cmd options [] pticmd options [] ns [] "," current_command  options [] ","cmd current_command options [] pticurrent_command options [] ns ","cmd cmd options [] pticmd options [] ns "," current_command  options "," current_command  name "," current_(str \"bundle\") +  "," config [] name  "," config []  "," current_ccurrent_command options [] mmand "," current_ccmd options [] mmand "]}," Bundler CLI doctor":{"type":"method","name":"doctor","children":[],"call":["Doctor  new run ","Doctor  new "," options "," require "," require_relative "]}," Bundler CLI dispatch":{"type":"method","name":"dispatch","children":[],"call":[]}," Bundler Install warn_ambiguous_gems":{"type":"method","name":"warn_ambiguous_gems","children":[],"call":["Bundler  ui error ","Bundler  ui ","also_found_in_uris each ","Installer  ambiguous_gems to_a each ","Installer  ambiguous_gems to_a ","Installer  ambiguous_gems ","Bundler  ui warn "]}," Bundler Install normalize_settings":{"type":"method","name":"normalize_settings","children":[],"call":["Bundler  settings []= ","Bundler  settings [] ","Bundler  settings ","Bundler  settings with= "," options [] "," options ","Bundler  settings without= "," options [] empty? "," options []= ","Bundler  settings set_command_option "," options [] - ","Bundler  settings [] == ","Bundler  settings set_command_option_if_given ","bin_option empty? ","Bundler  settings [] nil? ","Bundler  settings temporary "," normalize_groups "," options [] ! "," options []  empty? "]}," Bundler Install normalize_groups":{"type":"method","name":"normalize_groups","children":[],"call":[" options []= "," options "," options [] ","Bundler  settings without map ","Bundler  settings without ","Bundler  settings "," options fetch ","Bundler  settings with map ","Bundler  settings with ","Bundler  settings without= "," options [] empty? ","Bundler  settings with= ","Bundler  settings [] map ","Bundler  settings [] ","Bundler  settings set_command_option "," options [] == "," check_for_group_conflicts_in_cli_options "," options [] join tr split "," options [] join tr "," options [] join "," options [] - ","Bundler  settings [] == ","Bundler  settings  options fetch  map ","Bundler  settings  options fetch out map ","Bundler  settings  options fetch  ","Bundler  settings  options fetch out ","Bundler  settings  options fetch = ","Bundler  settings  options fetch out= "]}," Bundler Install check_trust_policy":{"type":"method","name":"check_trust_policy","children":[],"call":["Bundler  settings []= ","Bundler  settings ","Bundler  settings [] "," options [] "," options "," exit ","Bundler  ui error ","Bundler  rubygems security_policies keys join ","Bundler  rubygems security_policies keys ","Bundler  rubygems security_policies ","Bundler  rubygems ","Bundler  ui ","Bundler  rubygems security_policies keys include? ","Bundler  settings set_command_option_if_given "," raise ","Bundler  rubygems security_policies keys unshift include? ","Bundler  rubygems security_policies keys unshift "]}," Bundler Install check_for_group_conflicts":{"type":"method","name":"check_for_group_conflicts","children":[],"call":[" exit ","Bundler  ui error ","conflicting_groups join ","Bundler  ui ","conflicting_groups empty? "," options [] & "," options [] "," options "," options [] &  join "," options [] &  empty? "]}," Bundler Install warn_if_outdated":{"type":"method","name":"warn_if_outdated","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  settings []= ","Bundler  settings ","running_version > ","Gem Version  new ","Bundler  settings [] ","Bundler  settings [] nil? ","Gem Requirement  new satisfied_by? ","Gem Requirement  new ","ENV  [] dup ","ENV  [] ","ENV  [] nil? ","Gem Version  new  > "]}," Bundler Inject last_version_number":{"type":"method","name":"last_version_number","children":[],"call":["spec version to_s ","spec version ","specs last ","b version prerelease? ","b version ","b respond_to? ","specs delete_if "," options [] "," options ","definition index [] sort_by ","definition index [] "," name ","definition index ","definition resolve_remotely! ","Bundler  definition ","specs last  version to_s ","specs last  version ","specs last s last ","definition index [] sort_by  last ","specs last s delete_if ","definition index [] sort_by  delete_if ","Bundler  definition  index [] sort_by ","Bundler  definition  index [] ","Bundler  definition  index ","Bundler  definition  resolve_remotely! ","Bundler  Bundler  definition  "]}," Bundler Exec process_title":{"type":"method","name":"process_title","children":[],"call":["(begin\n  (lvar :file)) strip ","args join "]}," Bundler Doctor run":{"type":"method","name":"run","children":[],"call":[" exit ","Bundler  ui error ","spec name ","Bundler  ui ","paths uniq each ","paths uniq ","broken_links each ","broken_links any? ","broken_links [] concat ","broken_links [] ","bad_paths any? ","File  exist? ! ","File  exist? "," dylibs select "," dylibs "," bundles_for_gem each "," bundles_for_gem ","definition specs each ","definition specs ","Bundler  ui warn "," raise ","not_installed any? ","definition missing_specs ","definition validate_ruby! ","Bundler  definition ","Bundler  ui level= "," options [] "," options ","Bundler  ui info ","(send\n  (lvar :broken_links) :map) flatten sort each ","(send\n  (lvar :broken_links) :map) flatten sort ","(send\n  (lvar :broken_links) :map) flatten ","paths uniq map ","broken_links map "," check! ","Bundler  settings validate! ","Bundler  settings ","permissions_valid ! "," check_home_permissions ","Fiddle  dlopen ","Bundler  definition  specs each ","Bundler  definition  specs ","definition missing_specs  any? ","Bundler  definition  missing_specs ","Bundler  definition  validate_ruby! ","Bundler  Bundler  definition  "," check_home_permissions  ! "]}," Bundler Doctor bundles_for_gem":{"type":"method","name":"bundles_for_gem","children":[],"call":["Dir  glob ","spec full_gem_path "]}," Bundler Doctor dylibs":{"type":"method","name":"dylibs","children":[],"call":["Bundler  ui warn ","Bundler  ui "," dylibs_ldd "," ldd_available? "," dylibs_darwin "," otool_available? ","RbConfig CONFIG  [] "]}," Bundler Doctor dylibs_ldd":{"type":"method","name":"dylibs_ldd","children":[],"call":["(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) compact ","match captures [] ","match captures ","match nil? ","l match ","output split map ","output split ","(str \"/usr/bin/ldd \\\"\") chomp ","(str \"/usr/bin/ldd \") chomp ","path shellescape ","(send\n  (send\n    (lvar :(str \"/usr/bin/ldd \\\"\") chomp ) :split\n    (str \"\\n\")) :map) compact ","(send\n  (send\n    (lvar :(str \"/usr/bin/ldd \") chomp ) :split\n    (str \"\\n\")) :map) compact ","l match  captures [] ","l match  captures ","l match  nil? ","l l match  ","(str \"/usr/bin/ldd \\\"\") chomp  split map ","(str \"/usr/bin/ldd \") chomp  split map ","(str \"/usr/bin/ldd \\\"\") chomp  split ","(str \"/usr/bin/ldd \") chomp  split "]}," Bundler Doctor dylibs_darwin":{"type":"method","name":"dylibs_darwin","children":[],"call":["dylib start_with? ","dylibs reject ","(send\n  (send\n    (send\n      (lvar :output) :split\n      (str \"\\n\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) uniq ","l match captures [] ","l match captures ","l match ","output split [] map ","output split [] ","output split ","(str \"/usr/bin/otool -L \\\"\") chomp ","(str \"/usr/bin/otool -L \") chomp ","path shellescape ","(send\n  (send\n    (send\n      (lvar :output) :split\n      (str \"\\n\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) uniq  reject ","(send\n  (send\n    (send\n      (lvar :(str \"/usr/bin/otool -L \\\"\") chomp ) :split\n      (str \"\\n\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) uniq ","(send\n  (send\n    (send\n      (lvar :(str \"/usr/bin/otool -L \") chomp ) :split\n      (str \"\\n\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) uniq ","(str \"/usr/bin/otool -L \\\"\") chomp  split [] map ","(str \"/usr/bin/otool -L \") chomp  split [] map ","(str \"/usr/bin/otool -L \\\"\") chomp  split [] ","(str \"/usr/bin/otool -L \") chomp  split [] ","(str \"/usr/bin/otool -L \\\"\") chomp  split ","(str \"/usr/bin/otool -L \") chomp  split "]}," Bundler Doctor ldd_available?":{"type":"method","name":"ldd_available?","children":[],"call":[" system nil? ! "," system nil? "," system ","Bundler  which "]}," Bundler Doctor otool_available?":{"type":"method","name":"otool_available?","children":[],"call":[" system ","Bundler  which "]}," Bundler Doctor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BundlerVendoredPostIt bundler_version":{"type":"method","name":"bundler_version","children":[],"call":[]}," BundlerVendoredPostIt setup":{"type":"method","name":"setup","children":[],"call":[]}," BundlerVendoredPostIt Parser parse":{"type":"method","name":"parse","children":[],"call":["Regexp  last_match ","lockfile =~ ","File  read ","File  file? "]}," BundlerVendoredPostIt Parser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BundlerVendoredPostIt Installer install!":{"type":"method","name":"install!","children":[],"call":["installer installed_gems ","installer install ","Gem DependencyInstaller  new "," require "," installed? ","Gem DependencyInstaller  new  installed_gems ","Gem DependencyInstaller  new  install "]}," BundlerVendoredPostIt Installer installed?":{"type":"method","name":"installed?","children":[],"call":["requirement satisfied_by? ","s version ","s name == ","s name ","Gem  source_index gems values any? ","Gem  source_index gems values ","Gem  source_index gems ","Gem  source_index ","Gem Requirement  new ","Gem Specification  find_by_name nil? ! ","Gem Specification  find_by_name nil? ","Gem Specification  find_by_name ","Gem Specification  respond_to? ","Gem Requirement  new  satisfied_by? "]}," BundlerVendoredPostIt Installer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BundlerVendoredPostIt Environment bundler_version":{"type":"method","name":"bundler_version","children":[],"call":["Gem Requirement  default "," lockfile_version "," cli_arg_version "," env_var_version "]}," BundlerVendoredPostIt Environment lockfile_version":{"type":"method","name":"lockfile_version","children":[],"call":["BundlerVendoredPostIt Parser  new parse ","BundlerVendoredPostIt Parser  new "," lockfile "]}," BundlerVendoredPostIt Environment lockfile":{"type":"method","name":"lockfile","children":[],"call":["File  expand_path "," gemfile "," gemfile sub ","File  basename "]}," BundlerVendoredPostIt Environment gemfile":{"type":"method","name":"gemfile","children":[],"call":["ENV  [] "]}," BundlerVendoredPostIt Environment cli_arg_version":{"type":"method","name":"cli_arg_version","children":[],"call":["@argv shift ","Gem Version  correct? ","str dup force_encoding ","str dup ","str respond_to? ","@argv first ","str dup force_encoding  dup force_encoding ","@argv first  dup force_encoding ","str dup force_encoding  dup ","@argv first  dup ","str dup force_encoding  respond_to? ","@argv first  respond_to? "]}," BundlerVendoredPostIt Environment env_var_version":{"type":"method","name":"env_var_version","children":[],"call":["ENV  [] "]}," BundlerVendoredPostIt Environment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Plugin API cache":{"type":"method","name":"cache","children":[],"call":["Plugin  cache join ","Plugin  cache "]}," Bundler UI Silent major_deprecation":{"type":"method","name":"major_deprecation","children":[],"call":[]}," Bundler RubygemsIntegration method_visibility":{"type":"method","name":"method_visibility","children":[],"call":["klass protected_method_defined? ","klass private_method_defined? "]}," Bundler Fetcher CompactIndex call":{"type":"method","name":"call","children":[],"call":["Net HTTPNotModified  new "," ui warn "," ui "," raise ","headers [] ","Bundler  settings [] ","Bundler  settings "," fetcher downloader fetch "," fetcher fetch_uri + "," fetcher fetch_uri "," fetcher "," fetcher downloader ","Bundler  feature_flag allow_offline_install? ","Bundler  feature_flag "]}," Bundler Fetcher CompactIndex client_fetcher":{"type":"method","name":"client_fetcher","children":[],"call":["ClientFetcher  new ","Bundler  ui "]}," Bundler feature_flag":{"type":"method","name":"feature_flag","children":[],"call":["FeatureFlag  new "]}," Bundler local_platform":{"type":"method","name":"local_platform","children":[],"call":["Gem Platform  local "," settings [] "," settings ","Gem  platforms == ","Gem  platforms "]}," Bundler user_home":{"type":"method","name":"user_home","children":[],"call":["Bundler  ui warn ","Bundler  ui "," raise ","FileUtils  mkdir_p ","SharedHelpers  filesystem_access ","Pathname  new join ","Pathname  new ","Dir  tmpdir ","Etc  getlogin ","File  writable? ! ","File  writable? ","File  directory? ! ","File  directory? ","home nil? ","Bundler  rubygems user_home ","Bundler  rubygems "," tmp_home_path ","File  join ","Kernel  send ","Bundler  rubygems user_home  nil? ","Bundler  rubygems user_Bundler  rubygems user_home  ","Bundler  rubygems  tmp_home_path  "," Pathname  new join _path "," tmp_Bundler  rubygems user_home _path "]}," Bundler Worker create_threads":{"type":"method","name":"create_threads","children":[],"call":["Bundler  ui info ","Bundler  ui "," raise ","@threads empty? ","creation_errors map uniq join ","creation_errors map uniq ","creation_errors map "," name ","creation_errors empty? ","(send\n  (const nil :Array) :new\n  (ivar :@size)) compact ","creation_errors << ","thread name= ","thread respond_to? ","(send\n  (const nil :Thread) :start) tap "," process_queue ","Thread  start ","Array  new "," add_interrupt_handler ","(send\n  (const nil :Array) :new\n  (ivar :@size)) compact  empty? "]}," Molinillo DependencyGraph delete_edge":{"type":"method","name":"delete_edge","children":[],"call":[" log delete_edge ","edge requirement ","edge destination name ","edge destination ","edge origin name ","edge origin "," log "]}," Molinillo DependencyGraph Tag action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph SetPayload action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph Log delete_edge":{"type":"method","name":"delete_edge","children":[],"call":[" push_action ","DeleteEdge  new "]}," Molinillo DependencyGraph DetachVertexNamed action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph DeleteEdge initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Molinillo DependencyGraph DeleteEdge make_edge":{"type":"method","name":"make_edge","children":[],"call":["Edge  new "," requirement ","graph vertex_named "," destination_name "," origin_name "]}," Molinillo DependencyGraph DeleteEdge down":{"type":"method","name":"down","children":[],"call":["edge destination incoming_edges << ","edge destination incoming_edges ","edge destination ","edge origin outgoing_edges << ","edge origin outgoing_edges ","edge origin "," make_edge "," make_edge  destination incoming_ make_edge s << "," make_edge  destination incoming_ make_edge s "," make_edge  destination "," make_edge  origin outgoing_ make_edge s << "," make_edge  origin outgoing_ make_edge s "," make_edge  origin "," make_ make_edge  "]}," Molinillo DependencyGraph DeleteEdge up":{"type":"method","name":"up","children":[],"call":["edge destination incoming_edges delete ","edge destination incoming_edges ","edge destination ","edge origin outgoing_edges delete ","edge origin outgoing_edges ","edge origin "," make_edge "," make_edge  destination incoming_ make_edge s delete "," make_edge  destination incoming_ make_edge s "," make_edge  destination "," make_edge  origin outgoing_ make_edge s delete "," make_edge  origin outgoing_ make_edge s "," make_edge  origin "," make_ make_edge  "]}," Molinillo DependencyGraph DeleteEdge action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph AddVertex action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph AddEdgeNoCircular action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Molinillo DependencyGraph Action action_name":{"type":"method","name":"action_name","children":[],"call":[]}," Bundler UI Silent unprinted_warnings":{"type":"method","name":"unprinted_warnings","children":[],"call":[]}," Bundler UI Silent initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler UI Shell unprinted_warnings":{"type":"method","name":"unprinted_warnings","children":[],"call":[]}," Bundler SpecSet spec_for_dependency":{"type":"method","name":"spec_for_dependency","children":[],"call":["GemHelpers  select_best_platform_match ","dep __platform "," lookup [] ","dep name "," lookup ","Bundler  rubygems platforms reverse_each ","Bundler  rubygems platforms ","Bundler  rubygems ","Bundler  local_platform ","Gem Platform  match_spec? ","specs_for_platforms select ","GemHelpers  select_best_platform_GemHelpers  select_best_platform_match  ","Gem Platform  GemHelpers  select_best_platform_match _spec? "," lookup []  select "]}," Bundler SpecSet find_by_name_and_platform":{"type":"method","name":"find_by_name_and_platform","children":[],"call":["spec match_platform ","spec name == ","spec name ","@specs detect "]}," Bundler SpecSet materialized_for_all_platforms":{"type":"method","name":"materialized_for_all_platforms","children":[],"call":[" raise ","s full_name ","s __materialize__ ","s source dependency_names= ","s source ","s source respond_to? ","s is_a? ","@specs map ","@specs map uniq ","s source remote! ","s source local! ","source double_check_for ","specs map uniq ","specs map "," lambda ","source remote! ","source local! ","specs any? ","@specs group_by each ","@specs group_by ","s materialize_for_installation ","s source dependency_@specs map uniq = ","@s __materialize__ s map ","@s materialize_for_installation s map ","@s __materialize__ s map uniq ","@s materialize_for_installation s map uniq ","s __materialize__ s map uniq ","s materialize_for_installation s map uniq ","s __materialize__ s map ","s materialize_for_installation s map ","s __materialize__ s any? ","s materialize_for_installation s any? ","@s __materialize__ s group_by each ","@s materialize_for_installation s group_by each ","@s __materialize__ s group_by ","@s materialize_for_installation s group_by "]}," Bundler Source inspect":{"type":"method","name":"inspect","children":[],"call":[" object_id "," class "]}," Bundler Source Path lockfile_path":{"type":"method","name":"lockfile_path","children":[],"call":[" expand relative_path_from ","Bundler  root "," expand "," path "," relative_path "," path absolute? "," original_path "," original_path absolute? "," root "]}," Bundler SharedHelpers bundler_ruby_lib":{"type":"method","name":"bundler_ruby_lib","children":[],"call":["File  expand_path "," resolve_path "," __dir__ "]}," Bundler Settings temporary":{"type":"method","name":"temporary","children":[],"call":["@temporary []= ","@temporary delete ","v nil? ","existing each "," block_given? ","@temporary update ","Hash  [] ","@temporary [] ","update map "," set_key ","update each "," key_for ","Hash  []  each "]}," Bundler RubygemsIntegration MoreFuture use_gemdeps":{"type":"method","name":"use_gemdeps","children":[],"call":["Gemdeps  new ","runtime requested_specs map sort_by ","runtime requested_specs map ","runtime requested_specs ","Bundler  ui= ","Bundler  setup ","File  expand_path ","ENV  [] "," require ","Bundler  setup  requested_specs map sort_by ","Bundler  setup  requested_specs map ","Bundler  setup  requested_specs "]}," Bundler RubygemsIntegration Future install_with_build_args":{"type":"method","name":"install_with_build_args","children":[],"call":[]}," Bundler RubygemsIntegration install_with_build_args":{"type":"method","name":"install_with_build_args","children":[],"call":[" with_build_args "]}," Bundler RubygemsIntegration load_plugins":{"type":"method","name":"load_plugins","children":[],"call":["Gem  load_plugins ","Gem  respond_to? "]}," Bundler RubyGemsGemInstaller base64digest!":{"type":"method","name":"base64digest!","children":[],"call":["(send\n  (lvar :digest) :digest!) pack ","digest digest! ","digest base64digest! ","digest respond_to? "]}," Bundler RubyGemsGemInstaller hexdigest!":{"type":"method","name":"hexdigest!","children":[],"call":["digest hexdigest! "]}," Bundler RubyGemsGemInstaller checksum_type":{"type":"method","name":"checksum_type","children":[],"call":[" raise ","checksum inspect "," spec full_name "," spec ","checksum length "]}," Bundler RubyGemsGemInstaller validate_bundler_checksum":{"type":"method","name":"validate_bundler_checksum","children":[],"call":[" raise ","digest inspect ","checksum inspect "," spec full_name "," spec "," spec gem_dir "," spec version "," spec name ","digest == "," send "," checksum_type ","io rewind ","digest << ","io read ","io eof? ","Digest SHA256  new ","source with_read_io ","source respond_to? ","@package instance_variable_get ","Bundler  settings [] ","Bundler  settings ","SharedHelpers  digest new ","SharedHelpers  digest ","Digest SHA256  new  inspect ","SharedHelpers  digest new  inspect ","Digest SHA256  new  == ","SharedHelpers  digest new  == ","Digest SHA256  new  << ","SharedHelpers  digest new  << ","@package instance_variable_get  with_read_io ","@package instance_variable_get  respond_to? ","SharedHelpers  Digest SHA256  new  new ","SharedHelpers  SharedHelpers  digest new  new ","SharedHelpers  Digest SHA256  new  ","SharedHelpers  SharedHelpers  digest new  "]}," Bundler RubyGemsGemInstaller pre_install_checks":{"type":"method","name":"pre_install_checks","children":[],"call":[" validate_bundler_checksum "," options [] "," options "]}," Gem Requirement exact?":{"type":"method","name":"exact?","children":[],"call":["@requirements [] [] == ","@requirements [] [] ","@requirements [] ","@requirements size == ","@requirements size "]}," Bundler RubyVersion exact?":{"type":"method","name":"exact?","children":[],"call":["Gem Requirement  create exact? ","Gem Requirement  create "," versions all? "," versions "]}," Bundler Resolver SpecGroup metadata_dependencies":{"type":"method","name":"metadata_dependencies","children":[],"call":["dependencies << ","DepProxy  new ","Gem Dependency  new ","spec required_rubygems_version ","spec required_rubygems_version none? ! ","spec required_rubygems_version none? ","spec required_rubygems_version nil? ! ","spec required_rubygems_version nil? ","spec required_ruby_version ","spec required_ruby_version none? ! ","spec required_ruby_version none? ","spec required_ruby_version nil? ! ","spec required_ruby_version nil? ","spec is_a? ! ","spec is_a? ","DepProxy  get_proxy ","@specs [] first ","@specs [] ","Dependency  new ","(send nil :metadata_dependency\n  (str \"Ruby\")\n  (send\n    (lvar :spec) :required_ruby_version)\n  (lvar :platform)) compact "," metadata_dependency ","(send nil :metadata_dependency\n  (str \"Ruby\")\n  (send\n    (lvar :spec) :required_ruby_version)) compact ","@specs [] first  required_rubygems_version ","@specs [] first  required_rubygems_version none? ! ","@specs [] first  required_rubygems_version none? ","@specs [] first  required_rubygems_version nil? ! ","@specs [] first  required_rubygems_version nil? ","@specs [] first  required_ruby_version ","@specs [] first  required_ruby_version none? ! ","@specs [] first  required_ruby_version none? ","@specs [] first  required_ruby_version nil? ! ","@specs [] first  required_ruby_version nil? ","@specs [] first  is_a? ! ","@specs [] first  is_a? ","@@specs [] first s [] first ","@@specs [] first s [] ","(send nil :metadata_dependency\n  (str \"Ruby\")\n  (send\n    (lvar :@specs [] first ) :required_ruby_version)\n  (lvar :platform)) compact ","(send nil :metadata_dependency\n  (str \"Ruby\")\n  (send\n    (lvar :@specs [] first ) :required_ruby_version)) compact "]}," Bundler RemoteSpecification respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" _remote_specification respond_to? "," _remote_specification "]}," Bundler MatchPlatform platforms_match?":{"type":"method","name":"platforms_match?","children":[],"call":[]}," Bundler LazySpecification Identifier platform_string":{"type":"method","name":"platform_string","children":[],"call":["platform_string == "," platform to_s "," platform "," platform to_s  == "]}," Bundler LazySpecification Identifier <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :name) <=> ","other platform_string ","other version ","other name "," platform_string "," version "," name ","other is_a? "]}," Bundler ParallelInstaller check_for_corrupt_lockfile":{"type":"method","name":"check_for_corrupt_lockfile","children":[],"call":["Bundler  ui warn ","warning join ","Bundler  ui ","warning << ","spec name ","missing map join ","missing map ","missing_dependencies each ","@size != ","missing_dependencies empty? ","a last empty? ","a last ","(send\n  (ivar :@specs) :map) reject ","s missing_lockfile_dependencies ","@specs map "]}," Bundler ParallelInstaller SpecInstallation missing_lockfile_dependencies":{"type":"method","name":"missing_lockfile_dependencies","children":[],"call":["all_spec_names include? ","dep name ","deps reject "," ignorable_dependency? "," all_dependencies reject "," all_dependencies "," dependencies reject "," dependencies "]}," Bundler Gemdeps requires":{"type":"method","name":"requires","children":[],"call":["@runtime requires "]}," Bundler Gemdeps current_dependencies":{"type":"method","name":"current_dependencies","children":[],"call":["@runtime current_dependencies "]}," Bundler Gemdeps dependencies":{"type":"method","name":"dependencies","children":[],"call":["@runtime dependencies "]}," Bundler Gemdeps specs":{"type":"method","name":"specs","children":[],"call":["@runtime specs "]}," Bundler Gemdeps requested_specs":{"type":"method","name":"requested_specs","children":[],"call":["@runtime requested_specs "]}," Bundler Gemdeps initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler GemHelpers PlatformMatch platform_version_match":{"type":"method","name":"platform_version_match","children":[],"call":[]}," Bundler GemHelpers PlatformMatch cpu_match":{"type":"method","name":"cpu_match","children":[],"call":[]}," Bundler GemHelpers PlatformMatch os_match":{"type":"method","name":"os_match","children":[],"call":[]}," Bundler GemHelpers PlatformMatch <=>":{"type":"method","name":"<=>","children":[],"call":[" platform_version_match <=> ","other platform_version_match "," platform_version_match ","m zero? "," cpu_match <=> ","other cpu_match "," cpu_match "," os_match <=> ","other os_match "," os_match ","other is_a? "," platfor platform_version_match <=> _version_ platform_version_match <=> atch <=> "," platfor cpu_match <=> _version_ cpu_match <=> atch <=> "," platfor os_match <=> _version_ os_match <=> atch <=> ","other platfor platform_version_match <=> _version_ platform_version_match <=> atch ","other platfor cpu_match <=> _version_ cpu_match <=> atch ","other platfor os_match <=> _version_ os_match <=> atch "," platfor platform_version_match <=> _version_ platform_version_match <=> atch "," platfor cpu_match <=> _version_ cpu_match <=> atch "," platfor os_match <=> _version_ os_match <=> atch "," platform_version_match <=>  zero? "," cpu_match <=>  zero? "," os_match <=>  zero? "," cpu_ platform_version_match <=> atch <=> "," cpu_ cpu_match <=> atch <=> "," cpu_ os_match <=> atch <=> ","other cpu_ platform_version_match <=> atch ","other cpu_ cpu_match <=> atch ","other cpu_ os_match <=> atch "," cpu_ platform_version_match <=> atch "," cpu_ cpu_match <=> atch "," cpu_ os_match <=> atch "," os_ platform_version_match <=> atch <=> "," os_ cpu_match <=> atch <=> "," os_ os_match <=> atch <=> ","other os_ platform_version_match <=> atch ","other os_ cpu_match <=> atch ","other os_ os_match <=> atch "," os_ platform_version_match <=> atch "," os_ cpu_match <=> atch "," os_ os_match <=> atch "]}," Bundler GemHelpers select_best_platform_match":{"type":"method","name":"select_best_platform_match","children":[],"call":[" platform_specificity_match ","spec platform ","(send\n  (lvar :specs) :select) min_by ","spec match_platform ","specs select "," same_deps "," same_specificity ","sorted_matching take_while ","sorted_matching first ","matching sort_by ","exact any? ","spec platform == ","matching select "," sort_best_platform_match "]}," Bundler GemHelpers platform_specificity_match":{"type":"method","name":"platform_specificity_match","children":[],"call":["PlatformMatch  new ","PlatformMatch  platform_version_match ","PlatformMatch  cpu_match ","PlatformMatch  os_match ","user_platform == ","spec_platform == ","spec_platform nil? ","Gem Platform  new ","PlatformMatch  specificity_score ","Gem Platform  new  == ","Gem Platform  new  nil? "]}," Bundler Fetcher Downloader validate_uri_scheme!":{"type":"method","name":"validate_uri_scheme!","children":[],"call":[" raise ","uri scheme ","uri scheme =~ ","(str \"\\\\Ahttps?\\\\z\") match? "]}," Bundler Fetcher CompactIndex md5_available?":{"type":"method","name":"md5_available?","children":[],"call":[" require ","OpenSSL Digest MD5  digest "]}," Bundler FeatureFlag major_version":{"type":"method","name":"major_version","children":[],"call":["@bundler_version segments first ","@bundler_version segments "]}," Bundler FeatureFlag initialize":{"type":"method","name":"initialize","children":[],"call":["Gem Version  create "]}," Bundler FeatureFlag settings_flag":{"type":"method","name":"settings_flag","children":[],"call":[]}," Bundler GenericSystemCallError initialize":{"type":"method","name":"initialize","children":[],"call":["@underlying_error class "]}," Bundler NoSpaceOnDeviceError message":{"type":"method","name":"message","children":[],"call":[" action "]}," Bundler Definition concat_ruby_version_requirements":{"type":"method","name":"concat_ruby_version_requirements","children":[],"call":["ruby_versions concat ","requirement exact? ","Gem Requirement  new ","ruby_version versions map ","ruby_version versions ","ruby_versions << ","ruby_version to_gem_version_with_patchlevel ","ruby_version patchlevel ","Gem Requirement  new  exact? "]}," Bundler Definition find_indexed_specs":{"type":"method","name":"find_indexed_specs","children":[],"call":["(send\n  (send\n    (send nil :index) :[]\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","spec match_platform ","current_spec platform "," index [] select "," index [] ","current_spec name "," index "]}," Bundler Definition find_resolved_spec":{"type":"method","name":"find_resolved_spec","children":[],"call":[" specs find_by_name_and_platform ","current_spec platform ","current_spec name "," specs "]}," Bundler Definition add_current_platform":{"type":"method","name":"add_current_platform","children":[],"call":[" add_platform "," generic ","Bundler  settings [] ","Bundler  settings ","Bundler  local_platform ","Bundler  feature_flag specific_platform? ","Bundler  feature_flag "," current_platforms each "," current_platforms "," local_platform "," current_ruby_platform_locked? "," Bundler  local_platform s each "," Bundler  local_platform s "]}," Bundler Definition validate_platforms!":{"type":"method","name":"validate_platforms!","children":[],"call":[" raise ","Bundler  rubygems platforms map ","Bundler  rubygems platforms ","Bundler  rubygems ","@platforms map ","MatchPlatform  platforms_match? ","Bundler  rubygems platforms any? ","@platforms any? ","Bundler  local_platform "," current_platform_locked? "]}," Bundler Definition validate_runtime!":{"type":"method","name":"validate_runtime!","children":[],"call":[" validate_platforms! "," validate_ruby! "]}," Bundler Definition locked_ruby_version_object":{"type":"method","name":"locked_ruby_version_object","children":[],"call":[" raise ","RubyVersion  from_string "]}," Bundler CompactIndexClient synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize "]}," Bundler CompactIndexClient url":{"type":"method","name":"url","children":[],"call":[]}," Bundler CompactIndexClient update_info":{"type":"method","name":"update_info","children":[],"call":[" update ","Bundler CompactIndexClient  debug ","checksum == ","@info_checksums_by_name [] ","@updater checksum_for_file ","@cache info_path ","@updater checksum_for_file  == ","@info_@updater checksum_for_file s_by_name [] ","@updater @updater checksum_for_file _for_file ","@cache info_@cache info_path  "]}," Bundler CompactIndexClient update":{"type":"method","name":"update","children":[],"call":["@updater update "," url ","Bundler CompactIndexClient  debug ","@endpoints add? "," synchronize "]}," Bundler CompactIndexClient update_and_parse_checksums!":{"type":"method","name":"update_and_parse_checksums!","children":[],"call":["@cache checksums "," update ","@cache versions_path ","Bundler CompactIndexClient  debug "]}," Bundler CompactIndexClient spec":{"type":"method","name":"spec","children":[],"call":["@cache specific_dependency "," update_info ","Bundler CompactIndexClient  debug "]}," Bundler CompactIndexClient dependencies":{"type":"method","name":"dependencies","children":[],"call":["(send\n  (send nil :in_parallel) :call\n  (lvar :names)) flatten ","d unshift ","@cache dependencies map ","@cache dependencies "," update_info "," in_parallel call "," in_parallel ","Bundler CompactIndexClient  debug ","(send\n  (send nil :execution_mode) :call\n  (lvar :names)) flatten "," execution_mode call "," execution_mode "]}," Bundler CompactIndexClient versions":{"type":"method","name":"versions","children":[],"call":["@cache versions "," update ","@cache versions_path ","Bundler CompactIndexClient  debug "]}," Bundler CompactIndexClient names":{"type":"method","name":"names","children":[],"call":["@cache names "," update ","@cache names_path ","Bundler CompactIndexClient  debug "]}," Bundler CompactIndexClient initialize":{"type":"method","name":"initialize","children":[],"call":["inputs map "," lambda ","Mutex  new ","Set  new ","Cache  new ","Updater  new ","Pathname  new ","Thread Mutex  new "]}," Bundler CompactIndexClient debug":{"type":"method","name":"debug","children":[],"call":[]}," Bundler CompactIndexClient Updater checksum_for_file":{"type":"method","name":"checksum_for_file","children":[],"call":["Digest MD5  hexdigest ","IO  read ","SharedHelpers  filesystem_access ","path file? ","SharedHelpers  digest hexdigest ","SharedHelpers  digest ","File  read "]}," Bundler CompactIndexClient Updater etag_for":{"type":"method","name":"etag_for","children":[],"call":[" checksum_for_file "," check checksum_for_file _for_file "]}," Bundler CompactIndexClient Updater update":{"type":"method","name":"update","children":[],"call":[" update "," raise ","MisMatchedChecksumError  new "," etag_for ","FileUtils  mv ","SharedHelpers  filesystem_access "," etag_for == ","response [] gsub ","response [] ","f << ","local_temp_path open ","response is_a? ","Zlib GzipReader  new read ","Zlib GzipReader  new ","StringIO  new ","response [] == ","response body ","@fetcher call ","headers []= ","local_temp_path size ","FileUtils  cp ","local_path file? ","retrying nil? ","Pathname  new join ","local_path basename ","Pathname  new ","Dir  mktmpdir ","(or\n  (send\n    (lvar :response) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub "," slice_body ","local_temp_path size nonzero? ","local_temp_path size - ","Dir  tmpdir ","etag length zero? ","etag length ","Bundler Dir  mktmpdir "," copy_file ","FileUtils  remove_file ","File  exist? ","local_temp_path sub ","local_path sub "," (or\n  (send\n    (lvar :response) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub _for "," (or\n  (send\n    (lvar :response) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub _for == ","@fetcher call  [] gsub ","@fetcher call  [] ","Pathname  new join  open ","local_temp_path sub  open ","local_path sub  open ","@fetcher call  is_a? ","@fetcher call  [] == ","@fetcher call  body ","Pathname  new join  size ","local_temp_path sub  size ","local_path sub  size ","(or\n  (send\n    (lvar :@fetcher call ) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub ","Pathname  new join  size nonzero? ","local_temp_path sub  size nonzero? ","local_path sub  size nonzero? ","Pathname  new join  size - ","local_temp_path sub  size - ","local_path sub  size - ","(or\n  (send\n    (lvar :response) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub  length zero? ","(or\n  (send\n    (lvar :response) :[]\n    (str \"ETag\"))\n  (str \"\")) gsub  length ","Pathname  new join  sub ","local_temp_path sub  sub ","local_path sub  sub "]}," Bundler CompactIndexClient Updater initialize":{"type":"method","name":"initialize","children":[],"call":[" require "," require_relative "]}," Bundler CompactIndexClient Updater MisMatchedChecksumError message":{"type":"method","name":"message","children":[],"call":["@server_checksum inspect ","@local_checksum inspect "]}," Bundler CompactIndexClient Updater MisMatchedChecksumError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler CompactIndexClient Cache info_roots":{"type":"method","name":"info_roots","children":[],"call":[" directory join "," directory "]}," Bundler CompactIndexClient Cache parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["dependency []= ","dependency [] split ","dependency [] ","dependency size > ","dependency size ","string split ","string split  []= ","string split  [] split ","string split  [] ","string split  size > ","string split  size "]}," Bundler CompactIndexClient Cache parse_gem":{"type":"method","name":"parse_gem","children":[],"call":[" parse_dependency ","requirements map ","dependencies map ","s split ","rest split map ","rest split ","version_and_platform split ","string split ","@dependency_parser parse ","GemParser  new "]}," Bundler CompactIndexClient Cache lines":{"type":"method","name":"lines","children":[],"call":["lines [] ","header + ","lines index ","SharedHelpers  filesystem_access split ","SharedHelpers  filesystem_access ","path file? ","SharedHelpers  filesystem_access split  [] ","lines index  + ","SharedHelpers  filesystem_access split  index "]}," Bundler CompactIndexClient Cache specific_dependency":{"type":"method","name":"specific_dependency","children":[],"call":[" parse_gem ","gem_lines [] ","Regexp  escape "," info_path read "," info_path ","pattern empty? ","(lvar :version) compact join ","(lvar :version) compact ","gem_lines [] s [] "," info_path read  [] ","(lvar :version) compact join  empty? "]}," Bundler CompactIndexClient Cache info_path":{"type":"method","name":"info_path","children":[],"call":[" info_roots first join "," info_roots first "," info_roots "," info_roots last join "," info_roots last ","Digest MD5  hexdigest downcase ","Digest MD5  hexdigest ","name =~ ","name to_s ","SharedHelpers  digest hexdigest downcase ","SharedHelpers  digest hexdigest ","SharedHelpers  digest ","(str \"[^a-z0-9_-]\") match? ","name to_s  =~ ","name to_s  to_s "]}," Bundler CompactIndexClient Cache dependencies":{"type":"method","name":"dependencies","children":[],"call":[" parse_gem "," lines map "," lines "," info_path "]}," Bundler CompactIndexClient Cache checksums":{"type":"method","name":"checksums","children":[],"call":["checksums []= ","line split "," lines each "," lines "," versions_path "]}," Bundler CompactIndexClient Cache versions_path":{"type":"method","name":"versions_path","children":[],"call":[" directory join "," directory "]}," Bundler CompactIndexClient Cache versions":{"type":"method","name":"versions","children":[],"call":["versions_by_name [] << ","versions_by_name [] ","version split unshift ","version split ","versions_by_name [] delete ","version [] split unshift ","version [] split ","version [] ","version start_with? ","versions_string split each ","versions_string split ","info_checksums_by_name []= ","line split "," lines each "," lines "," versions_path ","hash []= ","Hash  new ","version split unshift s_by_name [] << ","version [] split unshift s_by_name [] << ","version split unshift s_by_name [] ","version [] split unshift s_by_name [] ","version split unshift  split unshift ","version [] split unshift  split unshift ","version split unshift  split ","version [] split unshift  split ","version split unshift s_by_name [] delete ","version [] split unshift s_by_name [] delete ","version split unshift  [] split unshift ","version [] split unshift  [] split unshift ","version split unshift  [] split ","version [] split unshift  [] split ","version split unshift  [] ","version [] split unshift  [] ","version split unshift  start_with? ","version [] split unshift  start_with? ","version split unshift s_string split each ","version [] split unshift s_string split each ","version split unshift s_string split ","version [] split unshift s_string split "," version split unshift s_path "," version [] split unshift s_path "]}," Bundler CompactIndexClient Cache names_path":{"type":"method","name":"names_path","children":[],"call":[" directory join "," directory "]}," Bundler CompactIndexClient Cache names":{"type":"method","name":"names","children":[],"call":[" lines "," names_path "]}," Bundler CompactIndexClient Cache initialize":{"type":"method","name":"initialize","children":[],"call":["FileUtils  mkdir_p ","SharedHelpers  filesystem_access "," info_roots each "," info_roots ","Pathname  new expand_path ","Pathname  new "]}," Bundler Outdated print_gem":{"type":"method","name":"print_gem","children":[],"call":["Bundler  ui info ","output_message rstrip ","Bundler  ui ","groups ! ","spec_outdated_info to_s "," options [] "," options ","active_spec name ","dependency requirement ","dependency specific? ","current_spec git_version ","current_spec version ","active_spec git_version ","active_spec version ","active_spec loaded_from ","Bundler  ui debug? "," groups_text "," options_include_groups ","groups empty? "," loaded_from_for ","spec_outdated_info to_s  rstrip ","active_spec  loaded_from_for  ","  loaded_from_for _for "]}," Bundler Outdated display_nothing_outdated_message":{"type":"method","name":"display_nothing_outdated_message","children":[],"call":["Bundler  ui info ","Bundler  ui ","(send\n  (lvar :filter_options_patch) :map) join ","o sub ","filter_options_patch map ","filter_options_patch any? "," options [] "," options "," nothing_outdated_message "]}," Bundler Outdated retrieve_active_spec":{"type":"method","name":"retrieve_active_spec","children":[],"call":["active_specs last ","b version prerelease? ","b version ","b respond_to? ","active_specs delete_if ","active_specs size > ","active_specs size "," options [] ! "," options [] "," options ","current_spec version prerelease? ! ","current_spec version prerelease? ","current_spec version ","definition find_indexed_specs ","definition find_resolved_spec "," strict ","current_spec match_platform ","Bundler  local_platform ","(send\n  (send\n    (send\n      (send\n        (lvar :active_spec) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","spec match_platform ","current_spec platform ","active_spec source specs search select ","active_spec source specs search ","current_spec name ","active_spec source specs ","active_spec source ","definition resolve find_by_name_and_platform ","definition resolve ","active_specs last s last ","definition find_resolved_spec s last ","definition resolve find_by_name_and_platform s last ","definition find_indexed_specs  last ","(send\n  (send\n    (send\n      (send\n        (lvar :active_spec) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  last ","active_specs last s delete_if ","definition find_resolved_spec s delete_if ","definition resolve find_by_name_and_platform s delete_if ","definition find_indexed_specs  delete_if ","(send\n  (send\n    (send\n      (send\n        (lvar :active_spec) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  delete_if ","active_specs last s size > ","definition find_resolved_spec s size > ","definition resolve find_by_name_and_platform s size > ","definition find_indexed_specs  size > ","(send\n  (send\n    (send\n      (send\n        (lvar :active_spec) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  size > ","active_specs last s size ","definition find_resolved_spec s size ","definition resolve find_by_name_and_platform s size ","definition find_indexed_specs  size ","(send\n  (send\n    (send\n      (send\n        (lvar :active_spec) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by  size ","(send\n  (send\n    (send\n      (send\n        (lvar :active_specs last ) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","(send\n  (send\n    (send\n      (send\n        (lvar :definition find_resolved_spec ) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","(send\n  (send\n    (send\n      (send\n        (lvar :definition resolve find_by_name_and_platform ) :source) :specs) :search\n    (send\n      (lvar :current_spec) :name)) :select) sort_by ","active_specs last  source specs search select ","definition find_resolved_spec  source specs search select ","definition resolve find_by_name_and_platform  source specs search select ","active_specs last  source specs search ","definition find_resolved_spec  source specs search ","definition resolve find_by_name_and_platform  source specs search ","active_specs last  source specs ","definition find_resolved_spec  source specs ","definition resolve find_by_name_and_platform  source specs ","active_specs last  source ","definition find_resolved_spec  source ","definition resolve find_by_name_and_platform  source "]}," Bundler Doctor check!":{"type":"method","name":"check!","children":[],"call":["Bundler CLI Check  new run ","Bundler CLI Check  new "," require "," require_relative "]}," Bundler Common patch_level_options":{"type":"method","name":"patch_level_options","children":[],"call":[]}," Bundler Common configure_gem_version_promoter":{"type":"method","name":"configure_gem_version_promoter","children":[],"call":[]}," Bundler Common output_without_groups_message":{"type":"method","name":"output_without_groups_message","children":[],"call":[]}," Bundler Common print_post_install_message":{"type":"method","name":"print_post_install_message","children":[],"call":[]}," Bundler Common output_post_install_messages":{"type":"method","name":"output_post_install_messages","children":[],"call":[]}," Bundler ParallelInstaller SpecInstallation to_s":{"type":"method","name":"to_s","children":[],"call":[" state ","@spec full_name "," class "," full_name "]}," Bundler Definition converge_gemspec_sources":{"type":"method","name":"converge_gemspec_sources","children":[],"call":[" converge_path_source_to_gemspec_source ","dep source ","@locked_deps each ","spec source ","@locked_specs each ","@locked_sources map! "]}," Bundler tmp_home_path":{"type":"method","name":"tmp_home_path","children":[],"call":[" raise ","tmp_home_path join tap ","tmp_home_path join ","tmp_home_path chmod ","tmp_home_path mkpath ","tmp_home_path exist? ","SharedHelpers  filesystem_access ","Pathname  new join ","Pathname  new ","Dir  tmpdir ","e exception ","Kernel  send ","Bundler  rm_rf "," at_exit ","Bundler  tmp ","tmp_home_Pathname  new join  join tap ","tmp_home_Bundler  tmp  join tap ","tmp_home_Pathname  new join  join ","tmp_home_Bundler  tmp  join ","tmp_home_Pathname  new join  chmod ","tmp_home_Bundler  tmp  chmod ","tmp_home_Pathname  new join  mkPathname  new join  ","tmp_home_Bundler  tmp  mkBundler  tmp  ","tmp_home_Pathname  new join  exist? ","tmp_home_Bundler  tmp  exist? "]}," Molinillo DependencyGraph AddEdgeNoCircular delete_first":{"type":"method","name":"delete_first","children":[],"call":["array delete_at ","array index ","array array index  "]}," Bundler UI Silent no?":{"type":"method","name":"no?","children":[],"call":[" raise "]}," Bundler UI Silent yes?":{"type":"method","name":"yes?","children":[],"call":[" raise "]}," Bundler StubSpecification missing_extensions?":{"type":"method","name":"missing_extensions?","children":[],"call":[" stub missing_extensions? "," stub ","File  exist? "," gem_build_complete_path "," extensions empty? "," extensions "," default_gem? "," manually_installed? "]}," Bundler Source Rubygems Remote to_s":{"type":"method","name":"to_s","children":[],"call":[" anonymized_uri "]}," Bundler Definition converge_path_sources_to_gemspec_sources":{"type":"method","name":"converge_path_sources_to_gemspec_sources","children":[],"call":[" converge_path_source_to_gemspec_source ","dep source ","@locked_deps each ","spec source ","@locked_specs each ","@locked_sources map! "]}," Bundler Plugin API Source bundler_plugin_api_source?":{"type":"method","name":"bundler_plugin_api_source?","children":[],"call":[]}," Bundler reset_rubygems!":{"type":"method","name":"reset_rubygems!","children":[],"call":[" rubygems reset "," rubygems "," rubygems undo_replacements "]}," Bundler reset_paths!":{"type":"method","name":"reset_paths!","children":[],"call":[]}," Bundler VersionRanges empty?":{"type":"method","name":"empty?","children":[],"call":[]}," Bundler VersionRanges for":{"type":"method","name":"for","children":[],"call":[]}," Bundler VersionRanges for_many":{"type":"method","name":"for_many","children":[],"call":[]}," Bundler VersionRanges ReqR single?":{"type":"method","name":"single?","children":[],"call":[" left version == "," right version "," right "," left version "," left "]}," Bundler VersionRanges ReqR empty?":{"type":"method","name":"empty?","children":[],"call":["(and\n  (send\n    (send nil :left) :inclusive)\n  (send\n    (send nil :right) :inclusive)) ! "," right inclusive "," right "," left inclusive "," left "," left version == "," right version "," left version "]}," Bundler VersionRanges ReqR cover?":{"type":"method","name":"cover?","children":[],"call":[" right version <= "," right version "," right "," right inclusive ! "," right inclusive "," right version < "," right version != "," left version >= "," left version "," left "," left inclusive ! "," left inclusive "," left version > "]}," Bundler VersionRanges ReqR to_s":{"type":"method","name":"to_s","children":[],"call":[" right inclusive "," right "," right version "," left version "," left "," left inclusive "]}," Bundler overwrite_loaded_gem_version":{"type":"method","name":"overwrite_loaded_gem_version","children":[],"call":[]}," Bundler require_thor_actions":{"type":"method","name":"require_thor_actions","children":[],"call":[]}," Thor disable_class_options":{"type":"method","name":"disable_class_options","children":[],"call":[]}," Thor Shell Basic indent":{"type":"method","name":"indent","children":[],"call":[" padding= "," padding + "," padding "]}," Thor Option validate_default_type!":{"type":"method","name":"validate_default_type!","children":[],"call":[" warn ","@default inspect "," switch_name ","default_type == ","@default class name downcase to_sym ","@default class name downcase ","@default class name ","@default class "," required? "," raise ","Bundler Thor  deprecation_warning ","(begin\n  (lvar :err)) + + ","(begin\n  (lvar :err)) + ","@check_default_type == ","default_type != ","@type != "]}," Thor CoreExt OrderedHash sync_keys!":{"type":"method","name":"sync_keys!","children":[],"call":[" key? ! "," key? ","@keys delete_if "]}," Thor CoreExt OrderedHash inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," Thor CoreExt OrderedHash replace":{"type":"method","name":"replace","children":[],"call":["other keys "]}," Thor CoreExt OrderedHash merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other_hash each "," [] "," key? "," block_given? "]}," Thor CoreExt OrderedHash shift":{"type":"method","name":"shift","children":[],"call":[" delete ","@keys first ","@@keys first eys first "]}," Thor CoreExt OrderedHash clear":{"type":"method","name":"clear","children":[],"call":["@keys clear "]}," Thor CoreExt OrderedHash each_pair":{"type":"method","name":"each_pair","children":[],"call":[" [] ","@keys each "," to_enum "," block_given? "]}," Thor CoreExt OrderedHash each_value":{"type":"method","name":"each_value","children":[],"call":[" [] ","@keys each "," to_enum "," block_given? "]}," Thor CoreExt OrderedHash each_key":{"type":"method","name":"each_key","children":[],"call":["@keys each "," to_enum "," block_given? "]}," Thor CoreExt OrderedHash to_a":{"type":"method","name":"to_a","children":[],"call":[" [] ","@keys map "]}," Thor CoreExt OrderedHash to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," Thor CoreExt OrderedHash reject":{"type":"method","name":"reject","children":[],"call":[" dup reject! "," dup "]}," Thor CoreExt OrderedHash delete_if":{"type":"method","name":"delete_if","children":[],"call":[" sync_keys! "]}," Thor CoreExt OrderedHash initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other keys "]}," Thor CoreExt HashWithIndifferentAccess key?":{"type":"method","name":"key?","children":[],"call":[" convert_key "]}," Thor CoreExt HashWithIndifferentAccess fetch":{"type":"method","name":"fetch","children":[],"call":[" convert_key "]}," Thor Actions CapturableERB set_eoutvar":{"type":"method","name":"set_eoutvar","children":[],"call":["compiler post_cmd= ","compiler pre_cmd= ","compiler insert_cmd= ","compiler put_cmd= "]}," Bundler StubSpecification raw_require_paths":{"type":"method","name":"raw_require_paths","children":[],"call":[" stub raw_require_paths "," stub "]}," Bundler StubSpecification matches_for_glob":{"type":"method","name":"matches_for_glob","children":[],"call":[" stub matches_for_glob "," stub "]}," Bundler StubSpecification loaded_from":{"type":"method","name":"loaded_from","children":[],"call":[" stub loaded_from "," stub "]}," Bundler StubSpecification load_paths":{"type":"method","name":"load_paths","children":[],"call":[" full_require_paths "]}," Bundler StubSpecification full_require_paths":{"type":"method","name":"full_require_paths","children":[],"call":[" stub full_require_paths "," stub "]}," Bundler StubSpecification full_gem_path":{"type":"method","name":"full_gem_path","children":[],"call":[" method_missing "," stub full_gem_path "," stub "]}," Bundler StubSpecification default_gem":{"type":"method","name":"default_gem","children":[],"call":[" stub default_gem "," stub "]}," Bundler StubSpecification activated=":{"type":"method","name":"activated=","children":[],"call":[" stub instance_variable_set "," stub "]}," Bundler StubSpecification activated":{"type":"method","name":"activated","children":[],"call":[" stub activated "," stub "]}," Bundler StubSpecification source=":{"type":"method","name":"source=","children":[],"call":[" stub extension_dir= ","File  expand_path "," stub ","File  join ","source extension_dir_name "," stub extensions_dir ","source respond_to? ","File  expand_File  join  "]}," Bundler SpecSet what_required":{"type":"method","name":"what_required","children":[],"call":[" what_required << "," what_required ","d name == ","spec name ","d name ","d type == ","d type ","s dependencies any? ","s dependencies "," find "]}," Bundler Source earlier_version?":{"type":"method","name":"earlier_version?","children":[],"call":["Gem Version  new < ","Gem Version  new "]}," Bundler Source version_color":{"type":"method","name":"version_color","children":[],"call":[" earlier_version? ","Gem Version  correct? "]}," Bundler Source Path validate_spec":{"type":"method","name":"validate_spec","children":[],"call":["Bundler  rubygems validate ","Bundler  rubygems "]}," Bundler Source Path load_gemspec":{"type":"method","name":"load_gemspec","children":[],"call":["Bundler  rubygems set_installed_by_version ","Bundler  rubygems ","Bundler  load_gemspec ","Bundler  load_gemBundler  load_gemspec  "]}," Bundler Source Git load_gemspec":{"type":"method","name":"load_gemspec","children":[],"call":["StubSpecification  from_stub ","stub full_gem_path= ","Pathname  new dirname expand_path to_s untaint ","Pathname  new dirname expand_path to_s ","Pathname  new dirname expand_path "," root ","Pathname  new dirname ","Pathname  new ","Gem StubSpecification  gemspec_stub "," install_path parent "," install_path ","x untaint ","RUBY_VERSION  < ","Pathname  new dirname expand_path to_s tap ","StubSpecification  from_Gem StubSpecification  gemspec_stub  ","Gem StubSpecification  gemspec_stub  full_gem_path= ","Gem StubSpecification  gemspec_Gem StubSpecification  gemspec_stub  "]}," Bundler Source Git validate_spec":{"type":"method","name":"validate_spec","children":[],"call":[]}," Bundler SharedHelpers ensure_same_dependencies":{"type":"method","name":"ensure_same_dependencies","children":[],"call":[" raise ","spec name ","extra_deps join ","spec full_name ","Bundler  ui debug ","new_deps map ","old_deps map ","spec remote ","Bundler  ui ","extra_deps empty? ","new_deps - ","old_deps map! ","new_deps map! ","Gem Dependency  new ","d requirements_list sort ","d requirements_list ","d name "," proc ","d type == ","d type ","old_deps reject ","new_deps reject ","new_deps -  join ","new_deps -  empty? "]}," Bundler SharedHelpers trap":{"type":"method","name":"trap","children":[],"call":["prior call ","block call ","Signal  trap "]}," Bundler Runtime check_for_activated_spec!":{"type":"method","name":"check_for_activated_spec!","children":[],"call":[" raise ","e version_requirement= ","Gem Requirement  new ","spec version to_s ","spec version ","e requirement= ","e respond_to? ","e name= ","spec name ","Gem LoadError  new ","activated_spec version ","activated_spec name ","Bundler  rubygems spec_default_gem? ","Bundler  rubygems ","activated_spec version == ","Bundler  rubygems loaded_specs ","activated_spec default_gem? "," raisGem LoadError  new  ","Gem LoadError  new  vGem LoadError  new rsion_rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","GGem LoadError  new m RGem LoadError  new quirGem LoadError  new mGem LoadError  new nt  nGem LoadError  new w ","spGem LoadError  new c vGem LoadError  new rsion to_s ","spGem LoadError  new c vGem LoadError  new rsion ","Gem LoadError  new  rGem LoadError  new quirGem LoadError  new mGem LoadError  new nt= ","Gem LoadError  new  rGem LoadError  new spond_to? ","Gem LoadError  new  namGem LoadError  new = ","spGem LoadError  new c namGem LoadError  new  ","GGem LoadError  new m LoadError  nGem LoadError  new w ","activatGem LoadError  new d_spGem LoadError  new c vGem LoadError  new rsion ","Bundler  rubygems loaded_specs  version ","activatGem LoadError  new d_spGem LoadError  new c namGem LoadError  new  ","Bundler  rubygems loaded_specs  name ","BundlGem LoadError  new r  rubygGem LoadError  new ms spGem LoadError  new c_dGem LoadError  new fault_gGem LoadError  new m? ","BundlGem LoadError  new r  rubygGem LoadError  new ms ","activatGem LoadError  new d_spGem LoadError  new c vGem LoadError  new rsion == ","Bundler  rubygems loaded_specs  version == ","BundlGem LoadError  new r  rubygGem LoadError  new ms loadGem LoadError  new d_spGem LoadError  new cs ","activatGem LoadError  new d_spGem LoadError  new c dGem LoadError  new fault_gGem LoadError  new m? ","Bundler  rubygems loaded_specs  default_gem? "]}," Bundler RubygemsIntegration MoreFuture stubs_provide_full_functionality?":{"type":"method","name":"stubs_provide_full_functionality?","children":[],"call":[]}," Bundler RubygemsIntegration MoreFuture binstubs_call_gem?":{"type":"method","name":"binstubs_call_gem?","children":[],"call":[]}," Bundler RubygemsIntegration stubs_provide_full_functionality?":{"type":"method","name":"stubs_provide_full_functionality?","children":[],"call":[]}," Bundler RubygemsIntegration binstubs_call_gem?":{"type":"method","name":"binstubs_call_gem?","children":[],"call":[]}," Bundler RubygemsIntegration stub_set_spec":{"type":"method","name":"stub_set_spec","children":[],"call":["stub instance_variable_set "]}," Bundler RubygemsIntegration spec_default_gem?":{"type":"method","name":"spec_default_gem?","children":[],"call":["spec default_gem? ","spec respond_to? "]}," Bundler RemoteSpecification to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," Bundler RemoteSpecification git_version":{"type":"method","name":"git_version","children":[],"call":[" source revision [] "," source revision "," source "," source is_a? "," loaded_from "]}," Bundler RemoteSpecification dependencies":{"type":"method","name":"dependencies","children":[],"call":[" method_missing ","Gem Dependency  new ","d is_a? ","deps map "," method_missing  map "]}," Bundler LazySpecification git_version":{"type":"method","name":"git_version","children":[],"call":[" source revision [] "," source revision "," source "," source is_a? "]}," Bundler ParallelInstaller require_tree_for_spec":{"type":"method","name":"require_tree_for_spec","children":[],"call":["t << ","s version ","tree last == ","tree last ","t << << ","s name ","   * ","depth succ ","tree each_with_index ","String  new ","File  basename ","SharedHelpers  default_gemfile ","@spec_set what_required ","String  new  << ","String  new ree lasString  new  == ","@spec_set what_required  last == ","String  new ree lasString  new  ","@spec_set what_required  last ","String  new  << << ","depString  new h succ ","String  new ree each_wiString  new h_index ","@spec_set what_required  each_with_index ","SString  new ring  new ","SharedHelpers  defaulString  new _gemfile ","@spec_seString  new  whaString  new _required "]}," Bundler Injector build_gem_lines":{"type":"method","name":"build_gem_lines","children":[],"call":["(send\n  (ivar :@new_deps) :map) join ","d source ","d source nil? ","d groups inspect ","d groups ","d groups size == ","d groups size ","d groups != "," Array ","d requirement as_list map join ","d requirement as_list map ","d requirement as_list ","d requirement "," conservative_version ","@definition specs [] [] ","@definition specs [] ","d name ","@definition specs ","d name dump ","@new_deps map ","d groups first inspect ","d groups first ","(send\n  (ivar :@deps) :map) join ","@deps map ","d branch ","d branch nil? ","d git ","d git nil? "," convert_autorequire ","d autorequire ","d autorequire nil? ","d ref ","d ref nil? ","d github ","d github nil? ","d path ","d path nil? ","d d name dump  ","d d name dump  dump "]}," Bundler Injector conservative_version":{"type":"method","name":"conservative_version","children":[],"call":["segments [] join ","segments [] ","version to_s gsub ","version release to_s ","version release ","version to_s ","version prerelease? ","version >= ","Gem Version  new ","version segments ","version nil? ","spec version "," version_prefix ","version segments  [] join ","version segments  [] ","spec version  to_s gsub ","spec version  release to_s ","spec version  release ","spec version  to_s ","spec version  prerelease? ","spec version  >= ","version version segments  ","spec version  segments ","spec version  nil? ","spec spec version  "," spec version _prefix "]}," Bundler Index unsorted_search":{"type":"method","name":"unsorted_search","children":[],"call":["results << ","seen add? ","spec full_name ","source unsorted_search each ","source unsorted_search ","@sources each ","results map to_set ","results map ","@sources empty? "," local_search ","seen << ","seen include? ","results map uniq "," local_search  << ","results map to_set  add? ","results map uniq  add? "," local_search  map to_set "," local_search  map ","results map to_set  << ","results map uniq  << ","results map to_set  include? ","results map uniq  include? "," local_search  map uniq "]}," Bundler GemHelper gem_key":{"type":"method","name":"gem_key","children":[],"call":["Bundler  settings [] to_s downcase ","Bundler  settings [] to_s ","Bundler  settings [] ","Bundler  settings "]}," Bundler Definition unlocking?":{"type":"method","name":"unlocking?","children":[],"call":[]}," Bundler CLI warn_on_outdated_bundler":{"type":"method","name":"warn_on_outdated_bundler","children":[],"call":["Bundler  ui warn ","latest prerelease? ","Bundler  ui ","current >= ","Gem Version  new ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send nil :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max ","d first ","Fetcher CompactIndex  new send instance_variable_get dependencies map ","Fetcher CompactIndex  new send instance_variable_get dependencies ","Fetcher CompactIndex  new send instance_variable_get ","Fetcher CompactIndex  new send ","Fetcher CompactIndex  new ","Source Rubygems Remote  new "," URI ","PARSEABLE_COMMANDS  include? ","current_command name ","config [] ","Bundler  settings [] ","Bundler  settings ","latest_installed < ","latest_installed > ","Bundler  rubygems find_name map max ","Bundler  rubygems find_name map ","Bundler  rubygems find_name ","Bundler  rubygems "," current_command name "," current_command ","SharedHelpers  md5_available? ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send\n              (const nil :Bundler) :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max ","Bundler  URI ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send nil :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max  prerelease? ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send\n              (const nil :Bundler) :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max  prerelease? ","Gem Version  new  >= ","Gem Version  new _command name ","config []  name ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send nil :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max _installed < ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send\n              (const nil :Bundler) :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max _installed < ","Bundler  rubygems find_name map max  < ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send nil :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max _installed > ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const nil :Fetcher) :CompactIndex) :new\n          (nil)\n          (send\n            (const\n              (const\n                (const nil :Source) :Rubygems) :Remote) :new\n            (send\n              (const nil :Bundler) :URI\n              (str \"https://rubygems.org\")))\n          (nil)) :send\n        (sym :compact_index_client)) :instance_variable_get\n      (sym :@cache)) :dependencies\n    (str \"bundler\")) :map) max _installed > ","Bundler  rubygems find_name map max  > "," Gem Version  new _command name "," config []  name "," Gem Version  new _command "," config []  "]}," Bundler CLI pristine":{"type":"method","name":"pristine","children":[],"call":["Pristine  new run ","Pristine  new "," require "," require_relative "]}," Bundler CLI issue":{"type":"method","name":"issue","children":[],"call":["Issue  new run ","Issue  new "," require "," require_relative "]}," Bundler CLI add":{"type":"method","name":"add","children":[],"call":["Add  new run ","Add  new "," options dup "," options "," require "," require_relative "]}," Bundler CLI info":{"type":"method","name":"info","children":[],"call":["Info  new run ","Info  new "," options "," require "," require_relative "]}," Bundler Pristine run":{"type":"method","name":"run","children":[],"call":["Bundler  ui warn ","Bundler  ui ","git_source install ","git_source remote! ","spec source ","spec source install ","FileUtils  rm_rf ","spec full_gem_path ","Bundler  ui error ","File  exist? ","spec cache_file ","spec platform ","spec platform != ","spec platform nil? ! ","spec platform nil? ","spec git_version ","spec version ","spec name ","spec name == ","Bundler  load specs each ","Bundler  load specs ","Bundler  load ","Bundler GemInstaller  new install_from_spec ","Bundler GemInstaller  new ","source remote! ","Bundler Installer  new ","Bundler  root ","definition validate_runtime! ","Bundler  definition ","@gems include? ! ","@gems include? ","@gems empty? ! ","@gems empty? ","CLI Common  ensure_all_gems_in_lockfile! ","spec extension_dir ","spec respond_to? ","source extension_cache_path ","source local? ","spec source  install ","git_spec source  install ","spec source  remote! ","git_spec source  remote! ","spec spec source  ","spec spec source  install ","Bundler  definition  validate_runtime! ","Bundler  Bundler  definition  ","spec source  extension_cache_path ","source source extension_cache_path  ","spec source  local? "]}," Bundler Issue doctor":{"type":"method","name":"doctor","children":[],"call":["Bundler CLI Doctor  new run ","Bundler CLI Doctor  new "," require "," require_relative "]}," Bundler Issue run":{"type":"method","name":"run","children":[],"call":[" doctor ","Bundler  ui info ","Bundler  ui ","Bundler Env  new report ","Bundler Env  new ","(str \"        Did you find an issue with Bundler? Before filing a new issue,\\n\") gsub ","Bundler Env  report "]}," Bundler Info print_gem_info":{"type":"method","name":"print_gem_info","children":[],"call":["Bundler  ui info ","Bundler  ui ","gem_info << ","spec default_gem? ","spec respond_to? ","spec full_gem_path ","spec homepage ","spec summary ","spec git_version ","spec version ","spec name ","String  new ","metadata [] ","metadata key? ","spec metadata ","Bundler  ui warn ","spec deleted_gem? ","name != "," gem_dependencies join "," gem_dependencies "," gem_dependencies any? ","String  new  << ","spec spec name  ","spec metadata  [] ","spec metadata  key? ","spec spec metadata  ","spec name  != "]}," Bundler Info print_gem_path":{"type":"method","name":"print_gem_path","children":[],"call":["Bundler  ui info ","spec full_gem_path ","Bundler  ui ","File  expand_path ","spec name == ","spec name ","Bundler  ui warn "," gem_name ","File  directory? ","spec deleted_gem? ","name == "," __dir__ ","spec full_gem_spec full_gem_path  ","spec full_gem_File  expand_path  ","File  expand_spec full_gem_path  ","File  expand_File  expand_path  ","spec spec name  == ","spec spec name  "," gem_spec name  ","spec name  == "]}," Bundler Info spec_not_found":{"type":"method","name":"spec_not_found","children":[],"call":[" raise ","Bundler CLI Common  gem_not_found_message ","Bundler  definition dependencies ","Bundler  definition "]}," Bundler Info default_gem_spec":{"type":"method","name":"default_gem_spec","children":[],"call":["gem_spec default_gem? ","gem_spec respond_to? ","Gem Specification  find_all_by_name last ","Gem Specification  find_all_by_name ","Gem Specification  respond_to? ","Gem Specification  find_all_by_name last  default_gem? ","Gem Specification  find_all_by_name last  respond_to? "]}," Bundler Info spec_for_gem":{"type":"method","name":"spec_for_gem","children":[],"call":[" default_gem_spec ","s name == ","s name ","Bundler  definition specs find ","Bundler  definition specs ","Bundler  definition ","Bundler CLI Common  select_spec "]}," Bundler Info run":{"type":"method","name":"run","children":[],"call":[" print_gem_info "," print_gem_path ","@options [] "," spec_not_found "," gem_name "," spec_for_gem ","Bundler  load lock ","Bundler  load ","Bundler  definition validate_runtime! ","Bundler  definition ","Bundler  ui silence ","Bundler  ui "," print_gem_version ","  spec_for_gem _not_found ","  spec_for_gem _for_gem "]}," Bundler Info initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Add run":{"type":"method","name":"run","children":[],"call":["Installer  install ","Bundler  definition ","Bundler  root ","Injector  inject ","@options [] nil? ","@options [] ","Bundler Dependency  new "," raise ","Gem Requirement PATTERN  =~ ","v to_s ","version each ","version nil? ","@options [] split map ","@options [] split ","@gems map ","@gems empty? "," perform_bundle_install "," options [] "," options "," inject_dependencies "," validate_options! ","@options [] split map  each ","@options [] split map  nil? "]}," Bundler Add initialize":{"type":"method","name":"initialize","children":[],"call":["@options []= ","@options [] split map ","@options [] split ","@options [] ","@options [] empty? ! ","@options [] empty? ","@options [] nil? ! ","@options [] nil? ","options [] split map ","options [] split ","options [] ","options [] nil? "]}," Bundler Common ensure_all_gems_in_lockfile!":{"type":"method","name":"ensure_all_gems_in_lockfile!","children":[],"call":["Bundler  locked_gems "]}," Bundler Source Path expanded_original_path":{"type":"method","name":"expanded_original_path","children":[],"call":[" expand "," original_path "]}," Bundler Settings converted_value":{"type":"method","name":"converted_value","children":[],"call":["value to_i "," is_num "," to_bool ","value == "," is_bool ","value nil? ","value to_s "," to_array "," is_array "]}," Bundler CompactIndexClient Updater slice_body":{"type":"method","name":"slice_body","children":[],"call":["body unpack first ","body unpack ","range end + ","range end ","range first ","body byteslice ","body respond_to? "]}," Thor disable_required_check":{"type":"method","name":"disable_required_check","children":[],"call":["Set  new "]}," Thor disable_required_check?":{"type":"method","name":"disable_required_check?","children":[],"call":[" disable_required_check include? ","command name to_sym ","command name "," disable_required_check "]}," Thor disable_required_check!":{"type":"method","name":"disable_required_check!","children":[],"call":[" disable_required_check merge "," disable_required_check "," disable_required_check | "]}," Thor CoreExt HashWithIndifferentAccess replace":{"type":"method","name":"replace","children":[],"call":[]}," Thor CoreExt HashWithIndifferentAccess reverse_merge!":{"type":"method","name":"reverse_merge!","children":[],"call":[" replace "," reverse_merge "]}," Thor CoreExt HashWithIndifferentAccess reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":[" class new merge "," class new "," class "]}," Thor Base ClassMethods disable_required_check?":{"type":"method","name":"disable_required_check?","children":[],"call":[]}," Thor Base ClassMethods check_default_type?":{"type":"method","name":"check_default_type?","children":[],"call":[" check_default_type ! ! "," check_default_type ! "," check_default_type "]}," Thor Base ClassMethods check_default_type":{"type":"method","name":"check_default_type","children":[],"call":[" from_superclass "]}," Thor Base ClassMethods check_default_type!":{"type":"method","name":"check_default_type!","children":[],"call":[]}," Thor Actions inject_into_module":{"type":"method","name":"inject_into_module","children":[],"call":[" insert_into_file ","args << ","config []= ","args pop ","args last is_a? ","args last ","args pop  []= "]}," Thor Actions EmptyDirectory on_file_clash_behavior":{"type":"method","name":"on_file_clash_behavior","children":[],"call":[" say_status "]}," Bundler SharedHelpers validate_bundle_path":{"type":"method","name":"validate_bundle_path","children":[],"call":[" raise ","Bundler  bundle_path ","Bundler  bundle_path to_s include? ","Bundler  bundle_path to_s ","path_separator inspect ","Bundler  bundle_path to_s split size > ","Bundler  bundle_path to_s split size ","Bundler  bundle_path to_s split ","Bundler  rubygems path_separator ","Bundler  rubygems ","Bundler  rubygems path_separator  inspect ","Bundler  rubygems Bundler  rubygems path_separator  "]}," Bundler use_system_gems?":{"type":"method","name":"use_system_gems?","children":[],"call":[" configured_bundle_path use_system_gems? "," configured_bundle_path "]}," Bundler frozen?":{"type":"method","name":"frozen?","children":[],"call":[" settings [] "," settings "," feature_flag deployment_means_frozen? "," feature_flag "," feature_flag deployment_means_ settings [] ? "]}," Bundler configured_bundle_path":{"type":"method","name":"configured_bundle_path","children":[],"call":[" settings path tap "," settings path "," settings "]}," Bundler bundler_major_version":{"type":"method","name":"bundler_major_version","children":[],"call":[]}," Bundler PersistentHTTP warn_old_tls_version_rubygems_connection":{"type":"method","name":"warn_old_tls_version_rubygems_connection","children":[],"call":["Bundler  ui warn ","Bundler  ui ","version < ","Gem Version  new ","socket_io ssl_version ","socket_io respond_to? ","socket io ","connection instance_variable_get ","(or\n  (send\n    (lvar :uri) :host)\n  (str \"\")) end_with? ","uri host ","connection use_ssl? ","connection http use_ssl? ","connection http ","Gem Version  new  < ","socket_io ssl_Gem Version  new  ","socket_io socket_io ssl_version  ","socket io  ssl_version ","connection instance_variable_get _io ssl_version ","socket io  respond_to? ","connection instance_variable_get _io respond_to? ","connection instance_variable_get  io "]}," Bundler PersistentHTTP connection_for":{"type":"method","name":"connection_for","children":[],"call":[" warn_old_tls_version_rubygems_connection "]}," Molinillo Resolver Resolution group_possibilities":{"type":"method","name":"group_possibilities","children":[],"call":["possibility_sets first ","possibility_sets unshift ","PossibilitySet  new ","current_possibility_set possibilities unshift ","current_possibility_set possibilities ","current_possibility_set dependencies == ","current_possibility_set dependencies "," dependencies_for ","possibilities reverse_each "," dependencies_equal? ","possibility_sets first  possibilities unshift ","possibility_sets first  possibilities ","possibility_sets first  dependencies == ","current_possibility_set  dependencies_for  == ","possibility_sets first  dependencies ","current_possibility_set  dependencies_for  ","  dependencies_for _for ","  dependencies_for _equal? "]}," Molinillo Resolver Resolution locked_requirement_possibility_set":{"type":"method","name":"locked_requirement_possibility_set","children":[],"call":[" group_possibilities "," requirement_satisfied_by? ","all_possibilities select "," locked_requirement_named "," name_for "," search_for "," search_for  select ","  locked_requirement_named _named "]}," Molinillo Resolver Resolution possibilities_for_requirement":{"type":"method","name":"possibilities_for_requirement","children":[],"call":[" group_possibilities "," search_for "," locked_requirement_possibility_set "," locked_requirement_named "," name_for "]}," Molinillo Resolver Resolution activate_new_spec":{"type":"method","name":"activate_new_spec","children":[],"call":[" require_nested_dependencies_for "," possibility "," activated set_payload "," name "," activated "," debug "," depth "," conflicts delete "," conflicts "]}," Molinillo Resolver Resolution filtered_possibility_set":{"type":"method","name":"filtered_possibility_set","children":[],"call":["PossibilitySet  new ","vertex payload possibilities & "," possibility possibilities "," possibility ","vertex payload possibilities ","vertex payload ","vertex payload dependencies "]}," Molinillo Resolver Resolution attempt_to_filter_existing_spec":{"type":"method","name":"attempt_to_filter_existing_spec","children":[],"call":[" unwind_for_conflict ","vertex payload "," debug "," depth "," create_conflict "," push_state_for_requirements "," requirements dup "," requirements "," activated set_payload "," name "," activated ","filtered_set possibilities empty? ! ","filtered_set possibilities empty? ","filtered_set possibilities "," filtered_possibility_set "," filtered_possibility_set  possibilities empty? ! "," filtered_possibility_set  possibilities empty? "," filtered_possibility_set  possibilities "]}," Molinillo Resolver Resolution binding_requirement_in_set?":{"type":"method","name":"binding_requirement_in_set?","children":[],"call":[" possibility_satisfies_requirements? ","possible_binding_requirements - ","possibilities any? "]}," Molinillo Resolver Resolution binding_requirements_for_conflict":{"type":"method","name":"binding_requirements_for_conflict","children":[],"call":[" binding_requirement_in_set? ","req == ","conflict requirement ","possible_binding_requirements reverse_each ","possible_binding_requirements dup ","(send\n  (lvar :conflict) :requirement) compact "," requirement_for_existing_name "," name_for "," search_for ","conflict underlying_error ","conflict requirements values flatten uniq ","conflict requirements values flatten ","conflict requirements values ","conflict requirements ","conflict possibility nil? ","conflict possibility ","possible_possible_binding_requirements dup  reverse_each ","conflict requirements values flatten uniq  reverse_each ","possible_possible_binding_requirements dup  dup ","conflict requirements values flatten uniq  dup "]}," Molinillo Resolver Resolution filter_possibilities_for_parent_unwind":{"type":"method","name":"filter_possibilities_for_parent_unwind","children":[],"call":["(send\n  (lvar :requirements_to_avoid) :-\n  (send\n    (lvar :possibility_set) :dependencies)) empty? ","requirements_to_avoid - ","possibility_set dependencies ","allowed_possibility_sets include? ! ","allowed_possibility_sets include? "," state possibilities reject! "," state possibilities "," state ","Compatibility  flat_map "," possibility_satisfies_requirements? ","unwind conflicting_requirements ","possibility_set possibilities any? ","possibility_set possibilities "," states [] possibilities select "," states [] possibilities "," states [] ","unwind state_index "," states ","unwinds_to_state uniq - ","unwinds_to_state uniq ","unwinds_to_state select uniq ","unwinds_to_state select ","unwinds_to_state << ","uw state_index == ","unwind_details state_index ","uw state_index "," unused_unwind_options select "," unused_unwind_options ","parent_unwinds flat_map ","primary_unwinds flat_map ","(send\n  (lvar :Compatibility  flat_map ) :-\n  (send\n    (lvar :possibility_set) :dependencies)) empty? ","(send\n  (lvar :parent_unwinds flat_map ) :-\n  (send\n    (lvar :possibility_set) :dependencies)) empty? ","Compatibility  flat_map  - ","parent_unwinds flat_map  - ","unwinds_to_state uniq -  flat_map ","unwinds_to_state select uniq  flat_map "]}," Molinillo Resolver Resolution possibility_satisfies_requirements?":{"type":"method","name":"possibility_satisfies_requirements?","children":[],"call":[" activated rewind_to "," activated "," requirement_satisfied_by? ","requirements all? "," activated set_payload "," activated vertex_named "," activated tag "," name_for "," activated vertex_ name_for d ","  name_for _for "]}," Molinillo Resolver Resolution filter_possibilities_for_primary_unwind":{"type":"method","name":"filter_possibilities_for_primary_unwind","children":[],"call":[" possibility_satisfies_requirements? ","unwind_requirement_sets any? ","possibility_set possibilities none? ","possibility_set possibilities "," state possibilities reject! "," state possibilities "," state ","unwinds_to_state map ","unwinds_to_state << ","uw state_index == ","unwind_details state_index ","uw state_index "," unused_unwind_options select "," unused_unwind_options ","unwind_details conflicting_requirements ","unwinds_to_state map  any? "]}," Molinillo Resolver Resolution filter_possibilities_after_unwind":{"type":"method","name":"filter_possibilities_after_unwind","children":[],"call":[" filter_possibilities_for_parent_unwind "," filter_possibilities_for_primary_unwind ","unwind_details unwinding_to_primary_requirement? "," state possibilities empty? ! "," state possibilities empty? "," state possibilities "," state "]}," Molinillo Resolver Resolution conflict_fixing_possibilities?":{"type":"method","name":"conflict_fixing_possibilities?","children":[],"call":[" possibility_satisfies_requirements? ","possibility_set possibilities any? ","possibility_set possibilities ","state possibilities any? ","state possibilities "]}," Molinillo Resolver Resolution unwind_options_for_requirements":{"type":"method","name":"unwind_options_for_requirements","children":[],"call":[" parent_of ","unwind_details << ","UnwindDetails  new "," states index "," states ","set dependencies include? ! ","set dependencies include? ","set dependencies ","requirement_state possibilities any? ","requirement_state possibilities "," find_state_for ","partial_tree unshift ","grandparent_r nil? ","parent_r nil? "," conflict_fixing_possibilities? ","trees << ","binding_requirements reverse_each "," find_state_for  possibilities any? "," find_state_for  possibilities "," parent_of  nil? ","grand parent_of  nil? "]}," Molinillo Resolver Resolution build_details_for_unwind":{"type":"method","name":"build_details_for_unwind","children":[],"call":["d requirements_unwound_to_instead << ","current_detail state_requirement ","d requirements_unwound_to_instead ","unwind_details each ","relevant_unused_unwinds each ","detail state_index == ","detail state_index ","unwind_details reject "," state unused_unwind_options "," state ","alternative > ","intersecting_requirements empty? ","last_detail_for_current_unwind all_requirements & ","alternative requirements_unwound_to_instead ","last_detail_for_current_unwind all_requirements "," unused_unwind_options select "," unused_unwind_options ","unwind_details sort last ","unwind_details sort "," unwind_options_for_requirements "," binding_requirements_for_conflict "," conflicts [] "," name "," conflicts ","(send\n  (send\n    (lvar :d) :requirements_unwound_to_instead) :<<\n  (send\n    (lvar :current_detail) :state_requirement)) uniq! ","diff_reqs size == ","diff_reqs size ","all_reqs - ","all_reqs size "," unwind_options_for_requirements  each "," unwind_options_for_requirements  reject ","last_detail_for_current_unwind all_requirements &  empty? ","unwind_details sort last  all_requirements & ","unwind_details sort last  all_requirements "," unwind_options_for_requirements  sort last "," unwind_options_for_requirements  sort ","  binding_requirements_for_conflict _for_conflict ","all_reqs -  size == ","all_reqs -  size ","last_detail_for_current_unwind all_requirements  - ","last_detail_for_current_unwind all_requirements  size "]}," Molinillo Resolver Resolution raise_error_unless_state":{"type":"method","name":"raise_error_unless_state","children":[],"call":[" raise ","VersionConflict  new "," specification_provider ","conflicts values map compact first ","conflicts values map compact ","conflicts values map ","conflicts values "," state "]}," Molinillo Resolver Resolution resolve_activated_specs":{"type":"method","name":"resolve_activated_specs","children":[],"call":[" activated freeze "," activated "," activated set_payload ","vertex name "," requirement_satisfied_by? ","vertex requirements all? ","vertex requirements ","vertex payload possibilities reverse_each find ","vertex payload possibilities reverse_each ","vertex payload possibilities ","vertex payload "," activated vertices each "," activated vertices ","vertex requirements uniq all? ","vertex requirements uniq "]}," Molinillo Resolver Resolution UnwindDetails all_requirements":{"type":"method","name":"all_requirements","children":[],"call":[" requirement_trees flatten "," requirement_trees "]}," Molinillo Resolver Resolution UnwindDetails sub_dependencies_to_avoid":{"type":"method","name":"sub_dependencies_to_avoid","children":[],"call":["(send\n  (send nil :requirement_trees) :map) compact ","tree [] ","index + ","tree index "," state_requirement "," requirement_trees map "," requirement_trees ","tree index  + ","tree tree index  "]}," Molinillo Resolver Resolution UnwindDetails unwinding_to_primary_requirement?":{"type":"method","name":"unwinding_to_primary_requirement?","children":[],"call":[" requirement_tree last == "," state_requirement "," requirement_tree last "," requirement_tree "]}," Molinillo Resolver Resolution UnwindDetails reversed_requirement_tree_index":{"type":"method","name":"reversed_requirement_tree_index","children":[],"call":[" requirement_tree reverse index "," state_requirement "," requirement_tree reverse "," requirement_tree "]}," Molinillo Resolver Resolution UnwindDetails <=>":{"type":"method","name":"<=>","children":[],"call":[" reversed_requirement_tree_index <=> ","other reversed_requirement_tree_index "," reversed_requirement_tree_index "," state_index == ","other state_index "," state_index "," state_index > "]}," Molinillo Resolver Resolution PossibilitySet latest_version":{"type":"method","name":"latest_version","children":[],"call":[" possibilities last "," possibilities "]}," Molinillo Resolver Resolution PossibilitySet to_s":{"type":"method","name":"to_s","children":[],"call":[" possibilities join "," possibilities "]}," Molinillo Resolver Resolution Conflict possibility":{"type":"method","name":"possibility","children":[],"call":[" possibility_set latest_version "," possibility_set "]}," Molinillo VersionConflict message_with_trees":{"type":"method","name":"message_with_trees","children":[],"call":["(send\n  (send\n    (send nil :conflicts) :sort) :reduce\n  (send\n    (str \"\") :dup)) strip ","additional_message_for_conflict call ","o << ","(send\n  (lvar :trees) :map) join ","t << ","version_for_spec call ","conflict activated_by_name [] "," name_for ","conflict activated_by_name ","tree last == ","tree last ","t << << ","req to_s ","   * ","tree each "," dup ","trees map ","reduce_trees call ","conflict requirement_trees "," name_for_explicit_dependency_source ","printable_requirement call ","conflict locked_requirement "," name_for_locking_dependency_source "," conflicts sort reduce "," conflicts sort "," conflicts "," proc ","opts delete ","trees uniq sort_by ","trees uniq "," class name split first "," class name split "," class name "," class ","o << << << ","o << << ","incompatible_version_message_for_conflict call ","full_message_for_conflict call ","\n dup << << ","\n dup << ","\n dup ","(send\n  (send\n    (send nil :conflic dup s) :sor dup ) :reduce\n  (send\n    (s dup r \"\") :dup)) s dup rip ","(send\n  (send\n    (send nil :c\n dup << << nflicts) :s\n dup << << rt) :reduce\n  (send\n    (str \"\") :dup)) strip ","addi dup ional_message_for_conflic dup  call ","additi\n dup << << nal_message_f\n dup << << r_c\n dup << << nflict call ","\n dup << <<  << ","(send\n  (lvar : dup rees) :map) join ","(send\n  (lvar :reduce_trees call ) :map) join ","(send\n  (lvar :trees) :map) j\n dup << << in "," dup  << ","version_for_conflict activated_by_name []  call ","versi\n dup << << n_f\n dup << << r_spec call ","conflic dup  ac dup iva dup ed_by_name [] ","c\n dup << << nflict activated_by_name [] "," name_f\n dup << << r ","conflic dup  ac dup iva dup ed_by_name ","c\n dup << << nflict activated_by_name "," dup ree las dup  == "," dup ree las dup  "," dup  << << ","req  dup o_s ","req t\n dup << << _s "," dup ree each "," dup rees map ","reduce_trees call  map ","reduce_ dup rees call ","reduce_reduce_trees call  call ","conflic dup  requiremen dup _ dup rees ","conflict requirement_reduce_trees call  ","c\n dup << << nflict requirement_trees "," name_for_explici dup _dependency_source "," name_f\n dup << << r_explicit_dependency_s\n dup << << urce ","prin dup able_requiremen dup  call ","conflic dup  locked_requiremen dup  ","c\n dup << << nflict l\n dup << << cked_requirement "," name_f\n dup << << r_l\n dup << << cking_dependency_s\n dup << << urce "," conflic dup s sor dup  reduce "," c\n dup << << nflicts s\n dup << << rt reduce "," conflic dup s sor dup  "," c\n dup << << nflicts s\n dup << << rt "," conflic dup s "," c\n dup << << nflicts "," pr\n dup << << c ","op dup s dele dup e ","\n dup << << pts delete "," dup rees uniq sor dup _by ","reduce_trees call  uniq sort_by ","trees uniq s\n dup << << rt_by "," dup rees uniq ","reduce_trees call  uniq "," class name spli dup  firs dup  "," class name spli dup  ","\n dup << <<  << << << ","\n dup << <<  << << ","incompa dup ible_version_message_for_conflic dup  call ","inc\n dup << << mpatible_versi\n dup << << n_message_f\n dup << << r_c\n dup << << nflict call ","full_message_for_conflic dup  call ","full_message_f\n dup << << r_c\n dup << << nflict call "]}," Molinillo Delegates ResolutionState unused_unwind_options":{"type":"method","name":"unused_unwind_options","children":[],"call":["current_state unused_unwind_options ","Bundler Molinillo ResolutionState  empty "," state "]}," Molinillo Compatibility flat_map":{"type":"method","name":"flat_map","children":[],"call":["enum map flatten ","enum map ","enum flat_map "]}," FileUtils LowMethods _do_nothing":{"type":"method","name":"_do_nothing","children":[],"call":[]}," FileUtils collect_method":{"type":"method","name":"collect_method","children":[],"call":[]}," FileUtils options_of":{"type":"method","name":"options_of","children":[],"call":[]}," FileUtils have_option?":{"type":"method","name":"have_option?","children":[],"call":[]}," FileUtils options":{"type":"method","name":"options","children":[],"call":[]}," FileUtils commands":{"type":"method","name":"commands","children":[],"call":[]}," FileUtils fu_output_message":{"type":"method","name":"fu_output_message","children":[],"call":["@fileutils_output puts ","@fileutils_label + ","output puts "]}," FileUtils fu_same?":{"type":"method","name":"fu_same?","children":[],"call":["File  identical? "]}," FileUtils fu_each_src_dest0":{"type":"method","name":"fu_each_src_dest0","children":[],"call":["File  path ","File  join ","File  basename ","File  directory? ","tmp each ","Array  try_convert ","File  baFile  path ename ","Array  try_convert  each "]}," FileUtils fu_each_src_dest":{"type":"method","name":"fu_each_src_dest","children":[],"call":[" raise "," fu_same? "," fu_each_src_dest0 "]}," FileUtils fu_list":{"type":"method","name":"fu_list","children":[],"call":["File  path ","(lvar :arg) flatten map ","(lvar :arg) flatten "]}," FileUtils Entry_ descendant_directory?":{"type":"method","name":"descendant_directory?","children":[],"call":["(str \"\\\\A(?\") =~ ","File  dirname ","Regexp  quote ","File  expand_path == ","File  expand_path ","File  expand_path casecmp == ","File  expand_path casecmp ","File FNM_SYSCASE  nonzero? "]}," FileUtils Entry_ join":{"type":"method","name":"join","children":[],"call":["File  join ","File  path ","dir == ","dir ! ","base == ","base ! "," raise ","base encode ","dir encode "," fu_windows? "]}," FileUtils Entry_ check_have_lchown?":{"type":"method","name":"check_have_lchown?","children":[],"call":["File  lchown ","File  respond_to? "]}," FileUtils Entry_ have_lchown?":{"type":"method","name":"have_lchown?","children":[],"call":[" check_have_lchown? ","$fileutils_rb_have_lchown == ","@@fileutils_rb_have_lchown == "," check_have_lchown?  == "]}," FileUtils Entry_ check_have_lchmod?":{"type":"method","name":"check_have_lchmod?","children":[],"call":["File  lchmod ","File  respond_to? "]}," FileUtils Entry_ have_lchmod?":{"type":"method","name":"have_lchmod?","children":[],"call":[" check_have_lchmod? ","$fileutils_rb_have_lchmod == ","@@fileutils_rb_have_lchmod == "," check_have_lchmod?  == "]}," FileUtils Entry_ wrap_traverse":{"type":"method","name":"wrap_traverse","children":[],"call":["post call ","ent wrap_traverse "," entries each "," entries "," directory? ","pre call "]}," FileUtils Entry_ postorder_traverse":{"type":"method","name":"postorder_traverse","children":[],"call":["ent postorder_traverse "," entries each "," entries "," directory? ","children each "," entries  each "]}," FileUtils Entry_ preorder_traverse":{"type":"method","name":"preorder_traverse","children":[],"call":["stack concat ","ent entries reverse ","ent entries ","ent directory? ","stack pop ","stack pop  stack pop ries reverse ","stack pop  stack pop ries ","stack pop  directory? "]}," FileUtils Entry_ platform_support":{"type":"method","name":"platform_support","children":[],"call":[" raise ","File  chmod "," path "," fu_windows? "]}," FileUtils Entry_ remove_file":{"type":"method","name":"remove_file","children":[],"call":["File  unlink "," path "," platform_support "]}," FileUtils Entry_ remove_dir1":{"type":"method","name":"remove_dir1","children":[],"call":["Dir  rmdir "," path chomp "," path "," platform_support "]}," FileUtils Entry_ remove":{"type":"method","name":"remove","children":[],"call":[" remove_file "," remove_dir1 "," directory? "]}," FileUtils Entry_ copy_metadata":{"type":"method","name":"copy_metadata","children":[],"call":["File  chmod ","File  lchmod ","st symlink? ","File  chown ","st gid ","st uid ","File  lchown ","st mode ","File  utime ","st mtime ","st atime ","st symlink? ! "," lstat "," lstat  symlink? "," lstat  gid "," lstat  uid ","st st mode  "," lstat  mode "," lstat  mtime "," lstat  atime "," lstat  symlink? ! "," l lstat at "]}," FileUtils Entry_ copy_file":{"type":"method","name":"copy_file","children":[],"call":["IO  copy_stream ","File  open ","s stat mode ","s stat "," path "]}," FileUtils Entry_ copy":{"type":"method","name":"copy","children":[],"call":[" raise "," path "," door? "," mkfifo ","File  respond_to? "," pipe? "," mknod "," lstat mode "," lstat "," socket? "," lstat rdev "," blockdev? "," chardev? ","File  symlink ","File  readlink "," symlink? ","File  directory? ","Dir  mkdir ","cannot copy directory %s to itself %s % "," descendant_directory? ","File  exist? ! ","File  exist? "," directory? "," copy_file "," file? ","File  mkfifo ","File  chmod ","UNIXServer  new close ","UNIXServer  new "," require "]}," FileUtils Entry_ chown":{"type":"method","name":"chown","children":[],"call":["File  chown "," path ","File  lchown "," have_lchown? "," symlink? "]}," FileUtils Entry_ chmod":{"type":"method","name":"chmod","children":[],"call":["File  chmod "," path ","File  lchmod "," have_lchmod? "," symlink? "]}," FileUtils Entry_ lstat!":{"type":"method","name":"lstat!","children":[],"call":[" lstat "]}," FileUtils Entry_ lstat":{"type":"method","name":"lstat","children":[],"call":["File  lstat "," path ","File  stat "," dereference? "]}," FileUtils Entry_ stat!":{"type":"method","name":"stat!","children":[],"call":[" lstat! ","File  stat "," path "," lstat! symlink? "]}," FileUtils Entry_ stat":{"type":"method","name":"stat","children":[],"call":[" lstat ","File  stat "," path "," lstat symlink? "]}," FileUtils Entry_ entries":{"type":"method","name":"entries","children":[],"call":["Entry_  new "," join ","n untaint "," rel "," prefix ","(send\n  (send\n    (const nil :Dir) :entries\n    (send nil :path)\n    (lvar :opts)) :reject) map ","n == ","Dir  entries reject ","Dir  entries "," path ","opts []= "," fu_windows? ","files map ","Dir  children ","Dir  respond_to? ","RUBY_VERSION  < ","x untaint ","n tap "," path encoding ","n RUBY_VERSION  <  ","Dir  children  map ","x RUBY_VERSION  <  "]}," FileUtils Entry_ door?":{"type":"method","name":"door?","children":[],"call":["s mode & == ","s mode & ","s mode "," lstat! "," lstat!  mode & == "," lstat!  mode & "," lstat!  mode "," l lstat! tat! "]}," FileUtils Entry_ pipe?":{"type":"method","name":"pipe?","children":[],"call":["s pipe? "," lstat! "," lstat!  pipe? "," l lstat! tat! "]}," FileUtils Entry_ socket?":{"type":"method","name":"socket?","children":[],"call":["s socket? "," lstat! "," lstat!   lstat! ocket? "," l lstat! tat! "]}," FileUtils Entry_ blockdev?":{"type":"method","name":"blockdev?","children":[],"call":["s blockdev? "," lstat! "," lstat!  blockdev? "," l lstat! tat! "]}," FileUtils Entry_ chardev?":{"type":"method","name":"chardev?","children":[],"call":["s chardev? "," lstat! "," lstat!  chardev? "," l lstat! tat! "]}," FileUtils Entry_ symlink?":{"type":"method","name":"symlink?","children":[],"call":["s symlink? "," lstat! "," lstat!   lstat! ymlink? "," l lstat! tat! "]}," FileUtils Entry_ directory?":{"type":"method","name":"directory?","children":[],"call":["s directory? "," lstat! "," lstat!  directory? "," l lstat! tat! "]}," FileUtils Entry_ file?":{"type":"method","name":"file?","children":[],"call":["s file? "," lstat! "," lstat!  file? "," l lstat! tat! "]}," FileUtils Entry_ exist?":{"type":"method","name":"exist?","children":[],"call":[" lstat "]}," FileUtils Entry_ dereference?":{"type":"method","name":"dereference?","children":[],"call":[]}," FileUtils Entry_ rel":{"type":"method","name":"rel","children":[],"call":[]}," FileUtils Entry_ prefix":{"type":"method","name":"prefix","children":[],"call":[]}," FileUtils Entry_ path":{"type":"method","name":"path","children":[],"call":[" join ","File  path "]}," FileUtils Entry_ inspect":{"type":"method","name":"inspect","children":[],"call":[" path "," class "]}," FileUtils Entry_ initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FileUtils StreamUtils_ fu_default_blksize":{"type":"method","name":"fu_default_blksize","children":[],"call":[]}," FileUtils StreamUtils_ fu_blksize":{"type":"method","name":"fu_blksize","children":[],"call":["s == ","st blksize ","st blksize  == ","st blksize t blkst blksize ize "]}," FileUtils StreamUtils_ fu_stream_blksize":{"type":"method","name":"fu_stream_blksize","children":[],"call":[" fu_default_blksize "," fu_blksize ","s stat ","s respond_to? ","streams each "," fu_default_blk fu_blksize  "," fu_blk fu_blksize  "]}," FileUtils StreamUtils_ fu_copy_stream0":{"type":"method","name":"fu_copy_stream0","children":[],"call":["IO  copy_stream "]}," FileUtils StreamUtils_ fu_windows?":{"type":"method","name":"fu_windows?","children":[],"call":[]}," FileUtils touch":{"type":"method","name":"touch","children":[],"call":["File  open "," raise ","File  utime ","list each "," fu_output_message ","list join ","t strftime "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils fu_get_gid":{"type":"method","name":"fu_get_gid","children":[],"call":["Etc  getgrnam gid ","Etc  getgrnam ","group to_i "," require "]}," FileUtils fu_get_uid":{"type":"method","name":"fu_get_uid","children":[],"call":["Etc  getpwnam uid ","Etc  getpwnam ","user to_i "," require "]}," FileUtils chown_R":{"type":"method","name":"chown_R","children":[],"call":[" raise ","ent chown ","Entry_  new traverse ","Entry_  new ","list each "," fu_get_gid "," fu_get_uid "," fu_output_message "," sprintf ","list join "," fu_list "," fu_list  each "," fu_get_ fu_get_gid  "," fu_get_ fu_get_uid  "," fu_list  join "," fu_ fu_list  "]}," FileUtils chown":{"type":"method","name":"chown","children":[],"call":["Entry_  new chown ","Entry_  new ","list each "," fu_get_gid "," fu_get_uid "," fu_output_message "," sprintf ","list join "," fu_list "," fu_list  each "," fu_get_ fu_get_gid  "," fu_get_ fu_get_uid  "," fu_list  join "," fu_ fu_list  "]}," FileUtils chmod_R":{"type":"method","name":"chmod_R","children":[],"call":[" raise ","ent chmod "," fu_mode ","ent path ","Entry_  new traverse ","Entry_  new ","list each "," fu_output_message "," sprintf ","list join "," mode_to_s "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils chmod":{"type":"method","name":"chmod","children":[],"call":["Entry_  new chmod "," fu_mode ","Entry_  new ","list each "," fu_output_message "," sprintf ","list join "," mode_to_s "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils mode_to_s":{"type":"method","name":"mode_to_s","children":[],"call":["%o % ","mode is_a? "]}," FileUtils fu_mode":{"type":"method","name":"fu_mode","children":[],"call":[" symbolic_modes_to_i ","mode is_a? "]}," FileUtils symbolic_modes_to_i":{"type":"method","name":"symbolic_modes_to_i","children":[],"call":[" apply_mask ","mode_mask nonzero? "," raise ","(send\n  (lvar :current_mode) :&\n  (lvar :copy_mask)) / * ","user_mask & ","(send\n  (lvar :current_mode) :&\n  (lvar :copy_mask)) / ","copy_mask & ","current_mode & "," user_mask ","mask nonzero? ","mask | ","FileTest  directory? ","(or\n  (lvar :perm)\n  (str \"\")) each_char inject ","(or\n  (lvar :perm)\n  (str \"\")) each_char ","op == ","actions each_slice ","target empty? ","actions empty? ","clause split ","mode_sym split inject ","mode & ","mode_sym split ","File  stat mode ","File  stat ","path mode ","File Stat  === ","path directory? ","File  stat mode _mask nonzero? ","path mode _mask nonzero? ","(send\n  (lvar : apply_mask ) :&\n  (lvar :copy_mask)) / * ","(send\n  (lvar :current_mode) :&\n  (lvar : user_mask )) / * ","(send\n  (lvar :current_File  stat mode ) :&\n  (lvar :copy_mask)) / * ","(send\n  (lvar :current_path mode ) :&\n  (lvar :copy_mask)) / * "," user_mask  & ","(send\n  (lvar : apply_mask ) :&\n  (lvar :copy_mask)) / ","(send\n  (lvar :current_mode) :&\n  (lvar : user_mask )) / ","(send\n  (lvar :current_File  stat mode ) :&\n  (lvar :copy_mask)) / ","(send\n  (lvar :current_path mode ) :&\n  (lvar :copy_mask)) / "," apply_mask  & ","current_File  stat mode  & ","current_path mode  & ","  user_mask  ","File  stat mode _sym split inject ","path mode _sym split inject ","File  stat mode  & ","path mode  & ","File  stat mode _sym split ","path mode _sym split ","File  stat File  stat mode  ","File  stat path mode  ","path File  stat mode  ","path path mode  ","File  stat  mode ","File  stat  directory? "]}," FileUtils apply_mask":{"type":"method","name":"apply_mask","children":[],"call":["mode & ","(send\n  (lvar :user_mask) :&\n  (lvar :mode_mask)) ~ ","user_mask & ","mode | ","(send\n  (lvar :mode) :&\n  (send\n    (lvar :user_mask) :~)) | ","user_mask ~ "]}," FileUtils user_mask":{"type":"method","name":"user_mask","children":[],"call":[" raise ","mask | ","target each_char inject ","target each_char "]}," FileUtils install":{"type":"method","name":"install","children":[],"call":["File  chown ","File  chmod "," fu_mode ","File  utime ","st mtime ","st atime "," copy_file "," remove_file "," compare_file ","File  exist? ","File  stat "," fu_each_src_dest "," fu_get_gid "," fu_get_uid "," fu_output_message ","msg << << ","(lvar :src) flatten join ","(lvar :src) flatten ","msg << "," mode_to_s ","install -c +@ ","File  stat  mtime ","File  stat  atime ","File  exiFile  stat ? ","File  File  stat at "," fu_each_src_deFile  stat  "," fu_get_ fu_get_gid  "," fu_get_ fu_get_uid  ","install -c +@  << << ","install -c +@  << ","inFile  stat all -c +@ "]}," FileUtils compare_stream":{"type":"method","name":"compare_stream","children":[],"call":["sb empty? ","sa empty? ","b read ","a read ","sa == ","String  new "," fu_stream_blksize ","RUBY_VERSION  > ","String  new  empty? ","String  new  == "]}," FileUtils compare_file":{"type":"method","name":"compare_file","children":[],"call":[" compare_stream ","File  open ","File  size == ","File  size "]}," FileUtils remove_dir":{"type":"method","name":"remove_dir","children":[],"call":[" remove_entry "]}," FileUtils remove_file":{"type":"method","name":"remove_file","children":[],"call":[" raise ","Entry_  new remove_file ","Entry_  new "]}," FileUtils remove_entry":{"type":"method","name":"remove_entry","children":[],"call":[" raise ","ent remove ","Entry_  new postorder_traverse ","Entry_  new "]}," FileUtils fu_stat_identical_entry?":{"type":"method","name":"fu_stat_identical_entry?","children":[],"call":["a ino == ","b ino ","a ino ","a dev == ","b dev ","a dev "]}," FileUtils fu_have_symlink?":{"type":"method","name":"fu_have_symlink?","children":[],"call":["File  symlink "]}," FileUtils remove_entry_secure":{"type":"method","name":"remove_entry_secure","children":[],"call":[" raise ","ent remove ","root postorder_traverse ","ent chmod ","ent chown ","ent directory? ","root preorder_traverse ","Entry_  new ","File  unlink "," fu_stat_identical_entry? ","File  lstat ","f chmod ","f chown ","f stat ","File  open ","fullpath + ","Process  euid ","%o % ","parent_st mode ","path inspect ","parent_st sticky? "," remove_entry ","parent_st world_writable? ","File  stat ","File  dirname ","st directory? ","File  expand_path "," fu_have_symlink? ","File  chmod ","File  chown ","File  lstat tap ","Entry_  new  postorder_traverse ","root poFile  lstat order_traverse ","Entry_  new  preorder_traverse "," fu_File  lstat at_identical_entry? ","File  lFile  lstat at ","f File  lstat at ","File  expand_path  + ","Process  Process  euid  ","File  stat  mode ","parent_File  lstat  mode ","File  stat  sticky? ","parent_File  lstat  File  lstat icky? ","File  stat  world_writable? ","parent_File  lstat  world_writable? ","File  File  lstat at ","File  lstat  directory? ","File  lFile  lstat at tap "]}," FileUtils rm_rf":{"type":"method","name":"rm_rf","children":[],"call":[" rm_r "]}," FileUtils rm_r":{"type":"method","name":"rm_r","children":[],"call":[" remove_entry "," remove_entry_secure ","list each "," fu_output_message ","list join "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils rm_f":{"type":"method","name":"rm_f","children":[],"call":[" rm "]}," FileUtils rm":{"type":"method","name":"rm","children":[],"call":[" remove_file ","list each "," fu_output_message ","list join "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils rename_cannot_overwrite_file?":{"type":"method","name":"rename_cannot_overwrite_file?","children":[],"call":[]}," FileUtils mv":{"type":"method","name":"mv","children":[],"call":[" raise "," remove_entry "," remove_entry_secure "," copy_entry ","File  rename ","destent remove_file "," rename_cannot_overwrite_file? ","destent directory? ","destent exist? ","Entry_  new "," fu_each_src_dest "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten ","Entry_  new  remove_file ","Entry_  new  directory? ","Entry_  new  exist? "]}," FileUtils copy_stream":{"type":"method","name":"copy_stream","children":[],"call":["IO  copy_stream "]}," FileUtils copy_file":{"type":"method","name":"copy_file","children":[],"call":["ent copy_metadata ","ent copy_file ","Entry_  new ","Entry_  new  copy_metadata ","Entry_  new  copy_file "]}," FileUtils copy_entry":{"type":"method","name":"copy_entry","children":[],"call":["Entry_  new wrap_traverse ","ent copy_metadata ","destent path ","Entry_  new ","ent rel "," proc ","ent copy ","File  unlink ","File  file? ","File  symlink? ","File  realpath ","Entry_  new  path "]}," FileUtils cp_r":{"type":"method","name":"cp_r","children":[],"call":[" copy_entry "," fu_each_src_dest "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten "]}," FileUtils cp":{"type":"method","name":"cp","children":[],"call":[" copy_file "," fu_each_src_dest "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten "]}," FileUtils ln_sf":{"type":"method","name":"ln_sf","children":[],"call":[" ln_s "]}," FileUtils ln_s":{"type":"method","name":"ln_s","children":[],"call":["File  symlink "," remove_file "," fu_each_src_dest0 "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten "," ln_sr "]}," FileUtils ln":{"type":"method","name":"ln","children":[],"call":["File  link "," remove_file "," fu_each_src_dest0 "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten "]}," FileUtils rmdir":{"type":"method","name":"rmdir","children":[],"call":["Dir  rmdir ","parent == ","(lvasgn :parent\n  (send\n    (const nil :File) :dirname\n    (lvar :dir))) == ","File  dirname "," remove_trailing_slash ","list each "," fu_output_message ","list join "," fu_list ","Dir  rm remove_trailing_slash  ","File  dirname  == ","(lvasgn :File  dirname \n  (send\n    (const nil :File) :dirname\n    (lvar :dir))) == ","(lvasgn :parent\n  (send\n    (const nil :File) : remove_trailing_slash name\n    (lvar : remove_trailing_slash ))) == ","File   remove_trailing_slash name "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils fu_mkdir":{"type":"method","name":"fu_mkdir","children":[],"call":["Dir  mkdir ","File  chmod "," remove_trailing_slash "]}," FileUtils mkdir_p":{"type":"method","name":"mkdir_p","children":[],"call":[" raise ","File  directory? "," fu_mkdir ","stack reverse_each ","stack pop ","File  dirname ","stack push ","path == ","stack last ","(send\n  (lvar :list) :map) each "," remove_trailing_slash ","list map "," fu_output_message ","list join ","-m %03o  % "," fu_list ","File  dirname == ","list each ","File  dirname  == "," remove_trailing_slash  == ","(send\n  (lvar : fu_list ) :map) each "," fu_list  map "," fu_list  join "," fu_ fu_list  "," fu_list  each "]}," FileUtils mkdir":{"type":"method","name":"mkdir","children":[],"call":[" fu_mkdir ","list each "," fu_output_message ","list join ","-m %03o  % "," fu_list "," fu_list  each "," fu_list  join "," fu_ fu_list  "]}," FileUtils remove_trailing_slash":{"type":"method","name":"remove_trailing_slash","children":[],"call":["dir chomp ","dir == "]}," FileUtils uptodate?":{"type":"method","name":"uptodate?","children":[],"call":["new_time > ","File  mtime ","File  exist? ","old_list each ","File  mtime  > "]}," FileUtils cd":{"type":"method","name":"cd","children":[],"call":[" fu_output_message ","Dir  chdir "]}," FileUtils pwd":{"type":"method","name":"pwd","children":[],"call":["Dir  pwd "]}," FileUtils private_module_function":{"type":"method","name":"private_module_function","children":[],"call":[]}," Bundler SourceList equivalent_rubygems_sources?":{"type":"method","name":"equivalent_rubygems_sources?","children":[],"call":["s equivalent_remotes? ","lock_sources all? ","replacement_sources map flatten uniq ","replacement_sources map flatten ","replacement_sources map "]}," Bundler SourceList equivalent_sources?":{"type":"method","name":"equivalent_sources?","children":[],"call":[" equal_sources? "," equivalent_rubygems_sources? ","s is_a? ","replacement_sources partition ","lock_sources partition ","Bundler  settings [] ","Bundler  settings ","lock_sources sort_by == ","replacement_sources sort_by ","lock_sources sort_by "]}," Bundler SourceList equivalent_source?":{"type":"method","name":"equivalent_source?","children":[],"call":[" equivalent_rubygems_sources? ","source is_a? ","Bundler  settings [] ","Bundler  settings ","source == "]}," Bundler SourceList equal_source?":{"type":"method","name":"equal_source?","children":[],"call":["source == ","source include? "," merged_gem_lockfile_sections? ! "," merged_gem_lockfile_sections? ","other_source is_a? ","source is_a? "]}," Bundler SourceList equal_sources?":{"type":"method","name":"equal_sources?","children":[],"call":["lock_sources to_set == ","replacement_sources to_set ","lock_sources to_set ","lock_sources sort_by == ","replacement_sources sort_by ","lock_sources sort_by "]}," Bundler SourceList rubygems_aggregate_class":{"type":"method","name":"rubygems_aggregate_class","children":[],"call":[]}," Bundler SourceList default_source":{"type":"method","name":"default_source","children":[],"call":[" global_rubygems_source "," global_path_source "]}," Bundler SourceList global_rubygems_source=":{"type":"method","name":"global_rubygems_source=","children":[],"call":[" add_rubygems_remote "," rubygems_aggregate_class new "," rubygems_aggregate_class ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Bundler  feature_flag disable_multisource? "]}," Bundler Source extension_cache_slug":{"type":"method","name":"extension_cache_slug","children":[],"call":[]}," Bundler Source extension_cache_path":{"type":"method","name":"extension_cache_path","children":[],"call":["Bundler  user_cache join ","spec full_name ","Bundler  ruby_scope ","Gem Platform  local to_s ","Gem Platform  local ","Bundler  user_cache "," extension_cache_slug ","Bundler  feature_flag global_gem_cache? ","Bundler  feature_flag "]}," Bundler Source print_using_message":{"type":"method","name":"print_using_message","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui debug ","Bundler  feature_flag suppress_install_using_messages? ","Bundler  feature_flag ","message include? ! ","message include? "]}," Bundler Source path?":{"type":"method","name":"path?","children":[],"call":[" instance_of? "]}," Bundler Source dependency_names_to_double_check":{"type":"method","name":"dependency_names_to_double_check","children":[],"call":[" specs dependency_names "," specs "]}," Bundler Source double_check_for":{"type":"method","name":"double_check_for","children":[],"call":[]}," Bundler Source Rubygems extension_cache_slug":{"type":"method","name":"extension_cache_slug","children":[],"call":["remote cache_slug ","spec remote ","spec remote  cache_slug ","spec spec remote  "]}," Bundler Source Rubygems download_cache_path":{"type":"method","name":"download_cache_path","children":[],"call":["Bundler  user_cache join ","spec file_name ","Bundler  user_cache ","remote cache_slug ","spec remote ","Bundler  feature_flag global_gem_cache? ","Bundler  feature_flag ","remote remote cache_slug  ","spec remote  cache_slug ","spec spec remote  "]}," Bundler Source Rubygems cache_globally":{"type":"method","name":"cache_globally","children":[],"call":["FileUtils  cp ","SharedHelpers  filesystem_access ","cache_path dirname ","cache_path exist? "," download_cache_path "," download_cache_path  dirname "," download_cache_path  exist? "," download_ download_cache_path  "]}," Bundler Source Rubygems download_gem":{"type":"method","name":"download_gem","children":[],"call":[" cache_globally ","Bundler  rubygems download_gem ","Bundler  rubygems ","Bundler  ui confirm "," version_message ","Bundler  ui ","spec remote uri ","spec remote ","FileUtils  cp ","SharedHelpers  filesystem_access ","cache_path file? "," download_cache_path ","File  join ","spec full_name ","FileUtils  mv ","rubygems_local_path != ","rubygems_local_path gsub ","Bundler  rubygems provides? ","spec remote spec remote uri  "," download_cache_path  file? "," download_ download_cache_path  ","rubygems_File  join  != ","Bundler  rubygems download_gem  != ","rubygems_local_path gsub  != ","rubygems_File  join  gsub ","Bundler  rubygems download_gem  gsub ","rubygems_local_path gsub  gsub "]}," Bundler Source Rubygems fetch_names":{"type":"method","name":"fetch_names","children":[],"call":["index use ","f specs_with_retry ","Bundler  ui info ","f uri ","Bundler  ui ","Bundler  ui debug? ","fetchers each ","URICredentialsFilter  credential_filtered_uri "]}," Bundler Source Rubygems remove_auth":{"type":"method","name":"remove_auth","children":[],"call":["(send\n  (send\n    (lvar :remote) :dup) :tap) to_s ","uri user= ","uri password= ","remote dup tap ","remote dup ","remote to_s ","remote password ","remote user "]}," Bundler Source Rubygems dependency_names_to_double_check":{"type":"method","name":"dependency_names_to_double_check","children":[],"call":["names map! "," raise ","spec inspect ","names concat ","spec runtime_dependencies "," remote_specs each "," remote_specs ","spec runtime_dependencies map "]}," Bundler Source Rubygems double_check_for":{"type":"method","name":"double_check_for","children":[],"call":[" fetch_names "," api_fetchers ","Bundler  ui debug ","Bundler  ui ","unmet_dependency_names empty? "," remote_specs spec_names "," remote_specs "," api_fetchers size <= "," api_fetchers size ","unmet_dependency_names nil? ","unmet_dependency_names call "," api_fetchers any? "," raise ","unmet_dependency_names nil? ! "," specs "," dependency_api_available? ","unmet_dependency_names call  empty? ","unmet_dependency_names call  nil? ","unmet_dependency_names call  call ","unmet_dependency_names call  nil? ! "]}," Bundler Source Rubygems equivalent_remotes?":{"type":"method","name":"equivalent_remotes?","children":[],"call":["other_remotes map == ","@remotes map "," method ","other_remotes map "]}," Bundler Source Metadata version_message":{"type":"method","name":"version_message","children":[],"call":["spec version ","spec name "]}," Bundler Source Metadata hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class "]}," Bundler Source Metadata ==":{"type":"method","name":"==","children":[],"call":[" class == ","other class "," class "]}," Bundler Source Metadata to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source Metadata install":{"type":"method","name":"install","children":[],"call":[" print_using_message "," version_message "]}," Bundler Source Metadata options":{"type":"method","name":"options","children":[],"call":[]}," Bundler Source Metadata remote!":{"type":"method","name":"remote!","children":[],"call":[]}," Bundler Source Metadata cached!":{"type":"method","name":"cached!","children":[],"call":[]}," Bundler Source Metadata specs":{"type":"method","name":"specs","children":[],"call":["s source= ","idx each ","idx << ","s version to_s == ","s version to_s ","s version ","Bundler  rubygems find_name find ","Bundler  rubygems find_name ","Bundler  rubygems ","Bundler  rubygems loaded_specs ","s loaded_from= ","File  expand_path ","s executables= ","s bindir= ","s authors= ","s platform= ","s version= ","s name= ","Gem Specification  new ","RubyVersion  system to_gem_version_with_patchlevel ","RubyVersion  system ","Index  build ","s summary= ","s homepage= ","s license= ","s required_rubygems_version= ","Gem Requirement  default ","Bundler  rubygems find_bundler "," __dir__ ","RubyVersion  system gem_version ","Gem  ruby_version ","Bundler  rubygems Bundler  rubygems loaded_specs s "]}," Bundler Source Git extension_cache_slug":{"type":"method","name":"extension_cache_slug","children":[],"call":[" extension_dir_name "]}," Bundler Source Git git_scope":{"type":"method","name":"git_scope","children":[],"call":[" uri_hash "," base_name "]}," Bundler SharedHelpers set_env":{"type":"method","name":"set_env","children":[],"call":["ENV  []= ","ENV  [] "," raise ","EnvironmentPreserver BUNDLER_KEYS  include? "]}," Bundler SharedHelpers gemfile_names":{"type":"method","name":"gemfile_names","children":[],"call":[]}," Bundler SharedHelpers digest":{"type":"method","name":"digest","children":[],"call":[" Digest "," require "]}," Bundler SharedHelpers md5_available?":{"type":"method","name":"md5_available?","children":[],"call":["OpenSSL Digest MD5  digest "," require ","OpenSSL Digest  digest "," OpenSSL Digest  digest "]}," Bundler SharedHelpers pretty_dependency":{"type":"method","name":"pretty_dependency","children":[],"call":["msg << ","dep source ","msg << << ","platform_string != ","platform_string empty? ! ","platform_string empty? ","dep platforms join ","dep platforms ","dep is_a? ","dep requirement ","dep requirement == ","Gem Requirement  default ","String  new ","dep name ","String  new  << ","String  new  << << ","dep platforms join  != ","dep platforms join  empty? ! ","dep platforms join  empty? "]}," Bundler SharedHelpers root":{"type":"method","name":"root","children":[],"call":["Pathname  new untaint expand_path parent ","Pathname  new untaint expand_path ","Pathname  new untaint ","Pathname  new "," raise "," find_gemfile ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar :gemfile)) :tap) expand_path parent ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar :gemfile)) :tap) expand_path ","x untaint ","RUBY_VERSION  < ","Pathname  new tap "," find_ find_gemfile  ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar : find_gemfile )) :tap) expand_path parent ","(send\n  (send\n    (const nil :Pathname) :new\n    (lvar : find_gemfile )) :tap) expand_path "]}," Bundler Settings array_to_s":{"type":"method","name":"array_to_s","children":[],"call":["array join tr ","array join ","array empty? "," Array "," Array  join tr "," Array  join "," Array  empty? "]}," Bundler Settings to_array":{"type":"method","name":"to_array","children":[],"call":["value split map ","value split ","value tr split map ","value tr split ","value tr "]}," Bundler Settings is_array":{"type":"method","name":"is_array","children":[],"call":["ARRAY_KEYS  include? ","key to_s "]}," Bundler Settings split_specific_setting_for":{"type":"method","name":"split_specific_setting_for","children":[],"call":["name split "]}," Bundler Settings specific_gem_for":{"type":"method","name":"specific_gem_for","children":[],"call":[" split_specific_setting_for [] "," split_specific_setting_for "]}," Bundler Settings validate!":{"type":"method","name":"validate!","children":[],"call":["Validator  validate! ","settings to_hash dup ","settings to_hash "," converted_value ","settings [] "," key_for ","(ivar :@local_config) each "," all each "," all "," raise ","disable_shared_gems join ","system_path join ","path join ","disable_shared_gems unshift ","disable_shared_gems empty? ","Bundler  settings pretty_values_for ","Bundler  settings ","system_path unshift ","system_path empty? ","path unshift ","path empty? "," system_path "," explicit_path ","settings dup "," value_for "," converted_ converted_value  "," converted_ value_for  ","Bundler  settings pretty_values_for  join ","system_Bundler  settings pretty_values_for  join ","Bundler  settings pretty_values_for  unshift ","Bundler  settings pretty_values_for  empty? ","Bundler  settings pretty_ converted_value s_for ","Bundler  settings pretty_ value_for s_for ","system_Bundler  settings pretty_values_for  unshift ","system_Bundler  settings pretty_values_for  empty? "," Bundler  settings pretty_values_for  "," system_Bundler  settings pretty_values_for  "," explicit_Bundler  settings pretty_values_for  ","  converted_value _for ","  value_for _for "]}," Bundler Settings base_path":{"type":"method","name":"base_path","children":[],"call":["Bundler  rubygems gem_dir ","Bundler  rubygems "," use_system_gems? "," explicit_path "," explicit_ explicit_path  "]}," Bundler Settings use_system_gems?":{"type":"method","name":"use_system_gems?","children":[],"call":[" default_install_uses_path ! "," default_install_uses_path "," explicit_path "," system_path ","Bundler  feature_flag default_install_uses_path? ! ","Bundler  feature_flag default_install_uses_path? ","Bundler  feature_flag "]}," Bundler Settings set_local":{"type":"method","name":"set_local","children":[],"call":[" set_key "," local_config_file "," raise "]}," Bundler Settings set_command_option_if_given":{"type":"method","name":"set_command_option_if_given","children":[],"call":[" set_command_option ","value nil? "]}," Bundler Settings set_command_option":{"type":"method","name":"set_command_option","children":[],"call":[" set_local ","Bundler SharedHelpers  major_deprecation "," Array join "," Array ","value nil? "," temporary ","Bundler  feature_flag forget_cli_options? ","Bundler  feature_flag "]}," Bundler Settings Validator validate!":{"type":"method","name":"validate!","children":[],"call":[]}," Bundler Settings Validator rule":{"type":"method","name":"rule","children":[],"call":[]}," Bundler Settings Validator rules":{"type":"method","name":"rules","children":[],"call":[]}," Bundler Settings Validator Rule k":{"type":"method","name":"k","children":[],"call":["Bundler  settings key_for ","Bundler  settings "]}," Bundler Settings Validator Rule set":{"type":"method","name":"set","children":[],"call":["settings []= ","settings delete ","value nil? ","Bundler  ui info ","reasons join ","value inspect ","Bundler  ui ","reasons unshift ","settings [] == ","settings [] "," k "]}," Bundler Settings Validator Rule fail!":{"type":"method","name":"fail!","children":[],"call":[" raise ","(send\n  (lvar :reasons) :map) join ","reasons map ","value inspect ","reasons unshift "]}," Bundler Settings Validator Rule validate!":{"type":"method","name":"validate!","children":[],"call":[" instance_exec "]}," Bundler Settings Validator Rule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler RubygemsIntegration Future path_separator":{"type":"method","name":"path_separator","children":[],"call":["Gem  path_separator "]}," Bundler RubygemsIntegration load_plugin_files":{"type":"method","name":"load_plugin_files","children":[],"call":["Gem  load_plugin_files ","Gem  respond_to? "]}," Bundler RubygemsIntegration path_separator":{"type":"method","name":"path_separator","children":[],"call":["Gem  path_separator "]}," Bundler RubygemsIntegration suffix_pattern":{"type":"method","name":"suffix_pattern","children":[],"call":["Gem  suffix_pattern "]}," Bundler RubygemsIntegration spec_extension_dir":{"type":"method","name":"spec_extension_dir","children":[],"call":["spec extension_dir ","spec respond_to? "]}," Bundler RubygemsIntegration spec_matches_for_glob":{"type":"method","name":"spec_matches_for_glob","children":[],"call":["(send\n  (send\n    (lvar :spec) :load_paths) :map) flatten ","Dir  [] "," suffix_pattern ","spec load_paths map ","spec load_paths ","spec matches_for_glob ","spec respond_to? "]}," Bundler RubyGemsGemInstaller build_extensions":{"type":"method","name":"build_extensions","children":[],"call":["FileUtils  cp_r ","SharedHelpers  filesystem_access ","extension_cache_path parent ","extension_dir directory? "," spec extension_dir "," spec ","extension_dir parent "," options [] ! "," options [] "," options ","extension_cache_path join ","Pathname  new ","Bundler  rubygems spec_extension_dir ","Bundler  rubygems "," require ","Bundler  rubygems provides? "," prepare_extension_build ","FileUtils  mkpath ","File  dirname "," options []  parent ","Pathname  new  directory? ","Bundler  rubygems spec_extension_dir  directory? "," spec extension_dir  directory? "," spec Pathname  new  "," spec Bundler  rubygems spec_extension_dir  "," spec  spec extension_dir  ","Pathname  new  parent ","Bundler  rubygems spec_extension_dir  parent "," spec extension_dir  parent "," options []  join ","Bundler  rubygems spec_Pathname  new  ","Bundler  rubygems spec_Bundler  rubygems spec_extension_dir  ","Bundler  rubygems spec_ spec extension_dir  "]}," Bundler Resolver version_conflict_message":{"type":"method","name":"version_conflict_message","children":[],"call":["e message_with_trees ","spec version "," lambda ","o << ","relevant_sources * ","relevant_sources empty? ","SharedHelpers  pretty_dependency ","conflict requirement_trees first [] ","conflict requirement_trees first ","conflict requirement_trees ","conflict requirement_trees first size > ","conflict requirement_trees first size ","conflict requirement ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map uniq sort ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map uniq ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact "," raise ","conflict requirement all_sources ","conflict requirement source ","conflict existing ! ","conflict existing ","conflict locked_requirement ","name == ","conflict requirement requirement satisfied_by? ! ","conflict requirement requirement satisfied_by? ","Gem Version  new ","conflict requirement requirement ","t reverse map ","t reverse ","trees sort_by ","dep requirement ","dep name ","t flatten map ","t flatten ","trees uniq! ","maximal include? ! ","maximal include? ","t last ","trees reject! ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by ","Bundler VersionRanges  empty? ","Bundler VersionRanges  for_many ","deps map ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :trees) :size)) :map) flatten select ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :trees) :size)) :map) flatten ","trees map flatten combination to_a ","trees map flatten combination ","trees map flatten ","trees map ","1 upto map ","1 upto ","trees size ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","trees size > ","trees uniq ","name end_with? ","relevant_sources join ","Molinillo VersionConflict  new ","e specification_provider ","conflicts empty? ","Bundler VersionRanges  empty? ! ","conflict requirement_trees map flatten ","conflict requirement_trees map ","conflicts delete_if ","e conflicts dup ","e conflicts ","(send\n  (const nil :File) :basename\n  (gvar :$PROGRAM_NAME)) join ","File  basename ","candidate_specs last version ","candidate_specs last ","candidate_specs any? ","@source_requirements [] specs search ","@source_requirements [] specs ","@source_requirements [] ","conflict_requirement satisfied_by? ! ","conflict_requirement satisfied_by? ","conflict_dependency requirement ","conflicts replace ","conflicts [] ","@index_requirements [] search ","@index_requirements [] "," source_for "," source_for specs search "," source_for specs ","relevant_source to_err "," gem_not_found_message ","name end_with? ! ","metadata_requirements [] ","(send\n  (lvar :trees) :map) compact join ","(send\n  (lvar :trees) :map) compact ","t << ","conflict activated_by_name [] ","req name ","conflict activated_by_name ","tree last == ","tree last ","t << << ","   * ","tree each ","metadata_requirements []= ","base_tree_name end_with? ","base_tree name ","tree first "," dup ","trees sort_by! ","trees size <= "," name_for_explicit_dependency_source "," name_for_locking_dependency_source ","String  new ","req name == ","@metadata_requirements find ","trees first [] ","trees first ","trees first size > ","trees first size ","Molinillo VersionConflict  new  mMolinillo VersionConflict  new ssagMolinillo VersionConflict  new _with_trMolinillo VersionConflict  new Molinillo VersionConflict  new s ","e message_wi dup h_ dup rees ","e message_with_conflict requirement_trees  ","spMolinillo VersionConflict  new c vMolinillo VersionConflict  new rsion ","conflict activated_by_name []  version ","spec versiString  new n ","String  new  << ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map uniq sort  * ","rMolinillo VersionConflict  new lMolinillo VersionConflict  new vant_sourcMolinillo VersionConflict  new s * ","relevan dup _sources * ","relevant_sString  new urces * ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map uniq sort  empty? ","rMolinillo VersionConflict  new lMolinillo VersionConflict  new vant_sourcMolinillo VersionConflict  new s Molinillo VersionConflict  new mpty? ","relevan dup _sources emp dup y? ","relevant_sString  new urces empty? ","SharMolinillo VersionConflict  new dHMolinillo VersionConflict  new lpMolinillo VersionConflict  new rs  prMolinillo VersionConflict  new tty_dMolinillo VersionConflict  new pMolinillo VersionConflict  new ndMolinillo VersionConflict  new ncy ","SharedHelpers  pre dup  dup y_dependency ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s first [] ","conflic dup  requiremen dup _ dup rees firs dup  [] ","conflict requirement_conflict requirement_trees  first [] ","cString  new nflict requirement_trees first [] ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s first ","conflic dup  requiremen dup _ dup rees firs dup  ","conflict requirement_conflict requirement_trees  first ","cString  new nflict requirement_trees first ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s ","conflic dup  requiremen dup _ dup rees ","conflict requirement_conflict requirement_trees  ","cString  new nflict requirement_trees ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s first sizMolinillo VersionConflict  new  > ","conflic dup  requiremen dup _ dup rees firs dup  size > ","conflict requirement_conflict requirement_trees  first size > ","cString  new nflict requirement_trees first size > ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s first sizMolinillo VersionConflict  new  ","conflic dup  requiremen dup _ dup rees firs dup  size ","conflict requirement_conflict requirement_trees  first size ","cString  new nflict requirement_trees first size ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt ","conflic dup  requiremen dup  ","cString  new nflict requirement ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (lvar :conflict) :rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt) :sourcMolinillo VersionConflict  new ) compact map uniq sort ","(send\n  (send\n    (lvar :conflic dup ) :requiremen dup ) :source) compac dup  map uniq sor dup  ","(send\n  (send\n    (lvar :cString  new nflict) :requirement) :sString  new urce) cString  new mpact map uniq sString  new rt ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (lvar :conflict) :rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt) :sourcMolinillo VersionConflict  new ) compact map uniq ","(send\n  (send\n    (lvar :conflic dup ) :requiremen dup ) :source) compac dup  map uniq ","(send\n  (send\n    (lvar :cString  new nflict) :requirement) :sString  new urce) cString  new mpact map uniq ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (lvar :conflict) :rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt) :sourcMolinillo VersionConflict  new ) compact map ","(send\n  (send\n    (lvar :conflic dup ) :requiremen dup ) :source) compac dup  map ","(send\n  (send\n    (lvar :cString  new nflict) :requirement) :sString  new urce) cString  new mpact map ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (lvar :conflict) :rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt) :sourcMolinillo VersionConflict  new ) compact ","(send\n  (send\n    (lvar :conflic dup ) :requiremen dup ) :source) compac dup  ","(send\n  (send\n    (lvar :cString  new nflict) :requirement) :sString  new urce) cString  new mpact "," raisMolinillo VersionConflict  new  ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt all_sourcMolinillo VersionConflict  new s ","conflic dup  requiremen dup  all_sources ","cString  new nflict requirement all_sString  new urces ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt sourcMolinillo VersionConflict  new  ","conflic dup  requiremen dup  source ","cString  new nflict requirement sString  new urce ","conflict Molinillo VersionConflict  new xisting ! ","conflic dup  exis dup ing ! ","cString  new nflict existing ! ","conflict Molinillo VersionConflict  new xisting ","conflic dup  exis dup ing ","cString  new nflict existing ","conflict lockMolinillo VersionConflict  new d_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt ","conflic dup  locked_requiremen dup  ","cString  new nflict lString  new cked_requirement ","namMolinillo VersionConflict  new  == ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt satisfiMolinillo VersionConflict  new d_by? ! ","conflic dup  requiremen dup  requiremen dup  sa dup isfied_by? ! ","cString  new nflict requirement requirement satisfied_by? ! ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt satisfiMolinillo VersionConflict  new d_by? ","conflic dup  requiremen dup  requiremen dup  sa dup isfied_by? ","cString  new nflict requirement requirement satisfied_by? ","GMolinillo VersionConflict  new m VMolinillo VersionConflict  new rsion  nMolinillo VersionConflict  new w ","Gem VersiString  new n  new ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt ","conflic dup  requiremen dup  requiremen dup  ","cString  new nflict requirement requirement ","t rMolinillo VersionConflict  new vMolinillo VersionConflict  new rsMolinillo VersionConflict  new  map "," dup  reverse map ","t rMolinillo VersionConflict  new vMolinillo VersionConflict  new rsMolinillo VersionConflict  new  "," dup  reverse ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s sort_by "," dup rees sor dup _by ","conflict requirement_trees  sort_by ","trees sString  new rt_by ","dMolinillo VersionConflict  new p rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt ","dep requiremen dup  ","dMolinillo VersionConflict  new p namMolinillo VersionConflict  new  ","t flattMolinillo VersionConflict  new n map "," dup  fla dup  dup en map ","t flattMolinillo VersionConflict  new n "," dup  fla dup  dup en ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s uniq! "," dup rees uniq! ","conflict requirement_trees  uniq! ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by  include? ! ","maximal includMolinillo VersionConflict  new ? ! ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by  include? ","maximal includMolinillo VersionConflict  new ? "," dup  las dup  ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s rMolinillo VersionConflict  new jMolinillo VersionConflict  new ct! "," dup rees rejec dup ! ","conflict requirement_trees  reject! ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (block\n      (sMolinillo VersionConflict  new nd\n        (sMolinillo VersionConflict  new nd\n          (int 1) :upto\n          (sMolinillo VersionConflict  new nd\n            (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :sizMolinillo VersionConflict  new )) :map)\n      (args\n        (arg :sizMolinillo VersionConflict  new ))\n      (sMolinillo VersionConflict  new nd\n        (sMolinillo VersionConflict  new nd\n          (sMolinillo VersionConflict  new nd\n            (sMolinillo VersionConflict  new nd\n              (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :map\n              (block-pass\n                (sym :last))) :flattMolinillo VersionConflict  new n\n            (int 1)) :combination\n          (lvar :sizMolinillo VersionConflict  new )) :to_a)) :flattMolinillo VersionConflict  new n\n    (int 1)) :sMolinillo VersionConflict  new lMolinillo VersionConflict  new ct) min_by ","(send\n  (send\n    (block\n      (send\n        (send\n          (in dup  1) :up dup o\n          (send\n            (lvar : dup rees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar : dup rees) :map\n              (block-pass\n                (sym :las dup ))) :fla dup  dup en\n            (in dup  1)) :combina dup ion\n          (lvar :size)) : dup o_a)) :fla dup  dup en\n    (in dup  1)) :selec dup ) min_by ","(send\n  (send\n    (block\n      (send\n        (send\n          (int 1) :upto\n          (send\n            (lvar :conflict requirement_trees ) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :conflict requirement_trees ) :map\n              (block-pass\n                (sym :last))) :flatten\n            (int 1)) :combination\n          (lvar :size)) :to_a)) :flatten\n    (int 1)) :select) min_by ","(send\n  (send\n    (blString  new ck\n      (send\n        (send\n          (int 1) :uptString  new \n          (send\n            (lvar :trees) :size)) :map)\n      (args\n        (arg :size))\n      (send\n        (send\n          (send\n            (send\n              (lvar :trees) :map\n              (blString  new ck-pass\n                (sym :last))) :flatten\n            (int 1)) :cString  new mbinatiString  new n\n          (lvar :size)) :tString  new _a)) :flatten\n    (int 1)) :select) min_by ","BundlMolinillo VersionConflict  new r VMolinillo VersionConflict  new rsionRangMolinillo VersionConflict  new s  Molinillo VersionConflict  new mpty? ","Bundler VersionRanges  emp dup y? ","Bundler VersiString  new nRanges  empty? ","BundlMolinillo VersionConflict  new r VMolinillo VersionConflict  new rsionRangMolinillo VersionConflict  new s  for_many ","Bundler VersiString  new nRanges  fString  new r_many ","dMolinillo VersionConflict  new ps map ","conflict requirement_trees map flatten  map ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (int 1) :upto\n    (sMolinillo VersionConflict  new nd\n      (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :sizMolinillo VersionConflict  new )) :map) flattMolinillo VersionConflict  new n sMolinillo VersionConflict  new lMolinillo VersionConflict  new ct ","(send\n  (send\n    (in dup  1) :up dup o\n    (send\n      (lvar : dup rees) :size)) :map) fla dup  dup en selec dup  ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :conflict requirement_trees ) :size)) :map) flatten select ","(send\n  (send\n    (int 1) :uptString  new \n    (send\n      (lvar :trees) :size)) :map) flatten select ","(sMolinillo VersionConflict  new nd\n  (sMolinillo VersionConflict  new nd\n    (int 1) :upto\n    (sMolinillo VersionConflict  new nd\n      (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :sizMolinillo VersionConflict  new )) :map) flattMolinillo VersionConflict  new n ","(send\n  (send\n    (in dup  1) :up dup o\n    (send\n      (lvar : dup rees) :size)) :map) fla dup  dup en ","(send\n  (send\n    (int 1) :upto\n    (send\n      (lvar :conflict requirement_trees ) :size)) :map) flatten ","(send\n  (send\n    (int 1) :uptString  new \n    (send\n      (lvar :trees) :size)) :map) flatten ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s map flattMolinillo VersionConflict  new n combination to_a "," dup rees map fla dup  dup en combina dup ion  dup o_a ","conflict requirement_trees  map flatten combination to_a ","trees map flatten cString  new mbinatiString  new n tString  new _a ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s map flattMolinillo VersionConflict  new n combination "," dup rees map fla dup  dup en combina dup ion ","conflict requirement_trees  map flatten combination ","trees map flatten cString  new mbinatiString  new n ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s map flattMolinillo VersionConflict  new n "," dup rees map fla dup  dup en ","conflict requirement_trees  map flatten ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s map "," dup rees map ","conflict requirement_trees  map ","1 up dup o map ","1 uptString  new  map ","1 up dup o ","1 uptString  new  ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s sizMolinillo VersionConflict  new  "," dup rees size ","conflict requirement_trees  size ","BundlMolinillo VersionConflict  new r  fMolinillo VersionConflict  new aturMolinillo VersionConflict  new _flag lockfilMolinillo VersionConflict  new _usMolinillo VersionConflict  new s_sMolinillo VersionConflict  new paratMolinillo VersionConflict  new _rubygMolinillo VersionConflict  new ms_sourcMolinillo VersionConflict  new s? ","Bundler  fea dup ure_flag lockfile_uses_separa dup e_rubygems_sources? ","Bundler  feature_flag lString  new ckfile_uses_separate_rubygems_sString  new urces? ","BundlMolinillo VersionConflict  new r  fMolinillo VersionConflict  new aturMolinillo VersionConflict  new _flag ","Bundler  fea dup ure_flag ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s sizMolinillo VersionConflict  new  > "," dup rees size > ","conflict requirement_trees  size > ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s uniq "," dup rees uniq ","conflict requirement_trees  uniq ","namMolinillo VersionConflict  new  Molinillo VersionConflict  new nd_with? ","name end_wi dup h? ","(send\n  (send\n    (lvar :conflict) :requirement) :source) compact map uniq sort  join ","rMolinillo VersionConflict  new lMolinillo VersionConflict  new vant_sourcMolinillo VersionConflict  new s join ","relevan dup _sources join ","relevant_sString  new urces jString  new in ","Molinillo VMolinillo VersionConflict  new rsionConflict  nMolinillo VersionConflict  new w ","Molinillo VersionConflic dup   new ","MString  new linillString  new  VersiString  new nCString  new nflict  new ","Molinillo VersionConflict  new  spMolinillo VersionConflict  new cification_providMolinillo VersionConflict  new r ","e conflict activated_by_name [] ification_provider ","e specifica dup ion_provider ","e specificatiString  new n_prString  new vider ","conflicts Molinillo VersionConflict  new mpty? ","e conflicts dup  empty? ","conflic dup s emp dup y? ","cString  new nflicts empty? ","BundlMolinillo VersionConflict  new r VMolinillo VersionConflict  new rsionRangMolinillo VersionConflict  new s  Molinillo VersionConflict  new mpty? ! ","Bundler VersionRanges  emp dup y? ! ","Bundler VersiString  new nRanges  empty? ! ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s map flattMolinillo VersionConflict  new n ","conflic dup  requiremen dup _ dup rees map fla dup  dup en ","conflict requirement_conflict requirement_trees  map flatten ","cString  new nflict requirement_trees map flatten ","conflict rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt_trMolinillo VersionConflict  new Molinillo VersionConflict  new s map ","conflic dup  requiremen dup _ dup rees map ","conflict requirement_conflict requirement_trees  map ","cString  new nflict requirement_trees map ","conflicts dMolinillo VersionConflict  new lMolinillo VersionConflict  new tMolinillo VersionConflict  new _if ","e conflicts dup  delete_if ","conflic dup s dele dup e_if ","cString  new nflicts delete_if ","Molinillo VersionConflict  new  conflicts dup ","e e conflicts dup  dup ","e conflic dup s dup ","e cString  new nflicts dup ","Molinillo VersionConflict  new  conflicts ","e e conflicts dup  ","e conflic dup s ","e cString  new nflicts ","(sMolinillo VersionConflict  new nd\n  (const nil :FilMolinillo VersionConflict  new ) :basMolinillo VersionConflict  new namMolinillo VersionConflict  new \n  (gvar :$PROGRAM_NAME)) join ","(send\n  (cons dup  nil :File) :basename\n  (gvar :$PROGRAM_NAME)) join ","(send\n  (cString  new nst nil :File) :basename\n  (gvar :$PROGRAM_NAME)) jString  new in ","FilMolinillo VersionConflict  new   basMolinillo VersionConflict  new namMolinillo VersionConflict  new  ","candidatMolinillo VersionConflict  new _spMolinillo VersionConflict  new cs last vMolinillo VersionConflict  new rsion ","@source_requirements [] specs search  last version ","@index_requirements [] search  last version "," source_for specs search  last version ","candidate_conflict activated_by_name [] s last version ","candida dup e_specs las dup  version ","candidate_specs last versiString  new n ","candidatMolinillo VersionConflict  new _spMolinillo VersionConflict  new cs last ","@source_requirements [] specs search  last ","@index_requirements [] search  last "," source_for specs search  last ","candidate_conflict activated_by_name [] s last ","candida dup e_specs las dup  ","candidatMolinillo VersionConflict  new _spMolinillo VersionConflict  new cs any? ","@source_requirements [] specs search  any? ","@index_requirements [] search  any? "," source_for specs search  any? ","candidate_conflict activated_by_name [] s any? ","candida dup e_specs any? ","@sourcMolinillo VersionConflict  new _rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] spMolinillo VersionConflict  new cs sMolinillo VersionConflict  new arch ","@source_requirements [] conflict activated_by_name [] s search ","@source_requiremen dup s [] specs search ","@sString  new urce_requirements [] specs search ","@sourcMolinillo VersionConflict  new _rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] spMolinillo VersionConflict  new cs ","@source_requirements [] conflict activated_by_name [] s ","@source_requiremen dup s [] specs ","@sString  new urce_requirements [] specs ","@sourcMolinillo VersionConflict  new _rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] ","@source_requiremen dup s [] ","@sString  new urce_requirements [] ","conflict_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt satisfiMolinillo VersionConflict  new d_by? ! ","conflict_dependency requirement  satisfied_by? ! ","conflic dup _requiremen dup  sa dup isfied_by? ! ","cString  new nflict_requirement satisfied_by? ! ","conflict_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt satisfiMolinillo VersionConflict  new d_by? ","conflict_dependency requirement  satisfied_by? ","conflic dup _requiremen dup  sa dup isfied_by? ","cString  new nflict_requirement satisfied_by? ","conflict_dMolinillo VersionConflict  new pMolinillo VersionConflict  new ndMolinillo VersionConflict  new ncy rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nt ","conflict requirement  requirement ","conflic dup _dependency requiremen dup  ","cString  new nflict_dependency requirement ","conflicts rMolinillo VersionConflict  new placMolinillo VersionConflict  new  ","e conflicts dup  replace ","conflic dup s replace ","cString  new nflicts replace ","e conflicts dup  [] ","conflic dup s [] ","cString  new nflicts [] ","@indMolinillo VersionConflict  new x_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] sMolinillo VersionConflict  new arch ","@index_requiremen dup s [] search ","@indMolinillo VersionConflict  new x_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] ","@index_requiremen dup s [] "," sourcMolinillo VersionConflict  new _for "," sString  new urce_fString  new r "," sourcMolinillo VersionConflict  new _for spMolinillo VersionConflict  new cs sMolinillo VersionConflict  new arch "," source_for conflict activated_by_name [] s search "," sString  new urce_fString  new r specs search "," sourcMolinillo VersionConflict  new _for spMolinillo VersionConflict  new cs "," source_for conflict activated_by_name [] s "," sString  new urce_fString  new r specs ","rMolinillo VersionConflict  new lMolinillo VersionConflict  new vant_sourcMolinillo VersionConflict  new  to_Molinillo VersionConflict  new rr ","relevan dup _source  dup o_err ","relevant_sString  new urce tString  new _err "," gMolinillo VersionConflict  new m_not_found_mMolinillo VersionConflict  new ssagMolinillo VersionConflict  new  "," gem_no dup _found_message "," gem_nString  new t_fString  new und_message ","namMolinillo VersionConflict  new  Molinillo VersionConflict  new nd_with? ! ","name end_wi dup h? ! ","name end_with? s [] ","mMolinillo VersionConflict  new tadata_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts [] ","me dup ada dup a_requiremen dup s [] ","(sMolinillo VersionConflict  new nd\n  (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :map) compact join ","(send\n  (lvar : dup rees) :map) compac dup  join ","(send\n  (lvar :conflict requirement_trees ) :map) compact join ","(send\n  (lvar :trees) :map) cString  new mpact jString  new in ","(sMolinillo VersionConflict  new nd\n  (lvar :trMolinillo VersionConflict  new Molinillo VersionConflict  new s) :map) compact ","(send\n  (lvar : dup rees) :map) compac dup  ","(send\n  (lvar :conflict requirement_trees ) :map) compact ","(send\n  (lvar :trees) :map) cString  new mpact "," dup  << ","conflict activatMolinillo VersionConflict  new d_by_namMolinillo VersionConflict  new  [] ","conflic dup  ac dup iva dup ed_by_name [] ","cString  new nflict activated_by_name [] ","rMolinillo VersionConflict  new q namMolinillo VersionConflict  new  ","conflict activatMolinillo VersionConflict  new d_by_namMolinillo VersionConflict  new  ","conflic dup  ac dup iva dup ed_by_name ","cString  new nflict activated_by_name ","trMolinillo VersionConflict  new Molinillo VersionConflict  new  last == "," dup ree las dup  == ","trMolinillo VersionConflict  new Molinillo VersionConflict  new  last "," dup ree las dup  "," dup  << << ","trMolinillo VersionConflict  new Molinillo VersionConflict  new  Molinillo VersionConflict  new ach "," dup ree each ","name end_with? s []= ","mMolinillo VersionConflict  new tadata_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts []= ","me dup ada dup a_requiremen dup s []= ","basMolinillo VersionConflict  new _trMolinillo VersionConflict  new Molinillo VersionConflict  new _namMolinillo VersionConflict  new  Molinillo VersionConflict  new nd_with? ","base_tree name  end_with? ","tree first _name end_with? ","base_ dup ree_name end_wi dup h? ","basMolinillo VersionConflict  new _trMolinillo VersionConflict  new Molinillo VersionConflict  new  namMolinillo VersionConflict  new  ","tree first  name ","base_ dup ree name ","trMolinillo VersionConflict  new Molinillo VersionConflict  new  first "," dup ree firs dup  ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s sort_by! "," dup rees sor dup _by! ","conflict requirement_trees  sort_by! ","trees sString  new rt_by! ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s sizMolinillo VersionConflict  new  <= "," dup rees size <= ","conflict requirement_trees  size <= "," namMolinillo VersionConflict  new _for_Molinillo VersionConflict  new xplicit_dMolinillo VersionConflict  new pMolinillo VersionConflict  new ndMolinillo VersionConflict  new ncy_sourcMolinillo VersionConflict  new  "," name_for_explici dup _dependency_source "," name_fString  new r_explicit_dependency_sString  new urce "," namMolinillo VersionConflict  new _for_locking_dMolinillo VersionConflict  new pMolinillo VersionConflict  new ndMolinillo VersionConflict  new ncy_sourcMolinillo VersionConflict  new  "," name_fString  new r_lString  new cking_dependency_sString  new urce ","String  nMolinillo VersionConflict  new w ","S dup ring  new ","rMolinillo VersionConflict  new q namMolinillo VersionConflict  new  == ","@name end_with? s find ","@mMolinillo VersionConflict  new tadata_rMolinillo VersionConflict  new quirMolinillo VersionConflict  new mMolinillo VersionConflict  new nts find ","@me dup ada dup a_requiremen dup s find ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s first [] "," dup rees firs dup  [] ","conflict requirement_trees  first [] ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s first "," dup rees firs dup  ","conflict requirement_trees  first ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s first sizMolinillo VersionConflict  new  > "," dup rees firs dup  size > ","conflict requirement_trees  first size > ","trMolinillo VersionConflict  new Molinillo VersionConflict  new s first sizMolinillo VersionConflict  new  "," dup rees firs dup  size ","conflict requirement_trees  first size "]}," Bundler Resolver platform_sort_key":{"type":"method","name":"platform_sort_key","children":[],"call":[]}," Bundler Resolver sort_platforms":{"type":"method","name":"sort_platforms","children":[],"call":[]}," Bundler Resolver relevant_sources_for_vertex":{"type":"method","name":"relevant_sources_for_vertex","children":[],"call":["(send\n  (send\n    (lvar :vertex) :recursive_predecessors) :map) << ","@source_requirements [] ","v name ","vertex recursive_predecessors map ","vertex recursive_predecessors ","vertex name ","vertex root? ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","(send\n  (send\n    (lvar :vertex) :recursive_predecessors) :map) compact << ","(send\n  (send\n    (lvar :vertex) :recursive_predecessors) :map) compact ","(send\n  (ivar :@source_requirements) :[]\n  (send\n    (lvar :vertex) :name)) compact "]}," Bundler Resolver SpecGroup hash":{"type":"method","name":"hash","children":[],"call":[" to_s hash ^ "," source hash "," source "," to_s hash "," to_s "," name hash ^ ^ ^ "," name hash ^ ^ "," sorted_activated_platforms hash "," sorted_activated_platforms "," name hash ^ "," version hash "," version "," name hash "," name "]}," Bundler Resolver SpecGroup eql?":{"type":"method","name":"eql?","children":[],"call":[" source eql? ","other source "," source "," version eql? ","other version "," version "," name eql? ","other name "," name ","other is_a? "," sorted_activated_platforms eql? ","other sorted_activated_platforms "," sorted_activated_platforms "]}," Bundler Resolver SpecGroup ==":{"type":"method","name":"==","children":[],"call":[" source == ","other source "," source "," version == ","other version "," version "," name == ","other name "," name ","other is_a? "," sorted_activated_platforms == ","other sorted_activated_platforms "," sorted_activated_platforms "]}," Bundler ProcessLock lock":{"type":"method","name":"lock","children":[],"call":["Bundler  bundle_path "]}," Bundler Plugin SourceList rubygems_aggregate_class":{"type":"method","name":"rubygems_aggregate_class","children":[],"call":[]}," Bundler Plugin API Source double_check_for":{"type":"method","name":"double_check_for","children":[],"call":[]}," Bundler LockfileGenerator add_section":{"type":"method","name":"add_section","children":[],"call":[" raise ","value inspect "," out << "," out ","(send\n  (send\n    (lvar :value) :to_a) :sort_by) each ","k to_s ","value to_a sort_by ","value to_a ","value map sort each ","value map sort ","value map "]}," Bundler LockfileGenerator add_bundled_with":{"type":"method","name":"add_bundled_with","children":[],"call":[" add_section "," definition locked_bundler_version to_s "," definition locked_bundler_version "," definition "," definition bundler_version_to_lock to_s "," definition bundler_version_to_lock "]}," Bundler LockfileGenerator add_locked_ruby_version":{"type":"method","name":"add_locked_ruby_version","children":[],"call":[" add_section ","locked_ruby_version to_s "," definition locked_ruby_version "," definition "," definition locked_ruby_version  to_s "," definition  definition locked_ruby_version  "]}," Bundler LockfileGenerator add_dependencies":{"type":"method","name":"add_dependencies","children":[],"call":["handled << ","dep name "," out << ","dep to_lock "," out ","handled include? "," definition dependencies sort_by each "," definition dependencies sort_by "," definition dependencies "," definition "," out << << "]}," Bundler LockfileGenerator add_platforms":{"type":"method","name":"add_platforms","children":[],"call":[" add_section "," definition platforms "," definition "]}," Bundler LockfileGenerator add_specs":{"type":"method","name":"add_specs","children":[],"call":[" out << ","spec to_lock "," out ","spec name == ","bundler freeze ","spec name ","specs sort_by each ","specs sort_by "]}," Bundler LockfileGenerator add_sources":{"type":"method","name":"add_sources","children":[],"call":[" add_specs ","source can_lock? "," definition resolve select "," definition resolve "," definition "," out << ","source to_lock "," out ","idx zero? "," definition send lock_sources each_with_index "," definition send lock_sources "," definition send "]}," Bundler LockfileGenerator generate!":{"type":"method","name":"generate!","children":[],"call":[" out "," add_bundled_with "," add_locked_ruby_version "," add_dependencies "," add_platforms "," add_sources "]}," Bundler LockfileGenerator generate":{"type":"method","name":"generate","children":[],"call":[]}," Bundler LockfileGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["String  new "]}," Bundler Installer resolve_if_needed":{"type":"method","name":"resolve_if_needed","children":[],"call":["@definition resolve_remotely! ","@definition resolve_with_cache! ","options [] ","@definition missing_specs? ! ","@definition missing_specs? ","@definition nothing_changed? ","Bundler  default_lockfile file? ","Bundler  default_lockfile ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","options [] ! ","@definition unlocking? ! ","@definition unlocking? ","@definition resolve_prefering_local! ","@definition setup_sources_for_resolve ","@definition resolution_mode= "]}," Bundler Installer warn_on_incompatible_bundler_deps":{"type":"method","name":"warn_on_incompatible_bundler_deps","children":[],"call":["Bundler  ui warn ","SharedHelpers  pretty_dependency ","spec version ","spec name ","Bundler  ui ","dep requirement satisfied_by? ","dep requirement ","dep name == ","bundler freeze ","dep name ","dep type == ","dep type ","spec dependencies each ","spec dependencies ","@definition specs each ","@definition specs ","Gem Version  create "]}," Bundler Installer load_plugins":{"type":"method","name":"load_plugins","children":[],"call":["Bundler  rubygems load_plugin_files ","Bundler  rubygems ","(send\n  (lvar :requested_path_gems) :map) flatten "," raise ","spec version ","spec name ","Bundler  rubygems spec_matches_for_glob ","Bundler  rubygems suffix_pattern ","requested_path_gems map ","s source is_a? ","s source ","@definition requested_specs select ","@definition requested_specs ","Bundler  rubygems load_plugins ","Bundler  rubygems load_env_plugins "]}," Bundler ParallelInstaller finished_installing?":{"type":"method","name":"finished_installing?","children":[],"call":["spec installed? ","spec failed? ","@specs all? "]}," Bundler ParallelInstaller do_install":{"type":"method","name":"do_install","children":[],"call":["spec_install error= "," require_tree_for_spec ","spec_install spec ","spec_install state= ","spec_install post_install_message= ","message nil? "," raise ","gem_installer install_from_spec ","Bundler GemInstaller  new ","Plugin  hook ","Bundler GemInstaller  new  install_from_spec "]}," Bundler ParallelInstaller install_serially":{"type":"method","name":"install_serially","children":[],"call":[" do_install ","spec_install state= "," raise ","@specs find "," finished_installing? ","@specs find  state= "]}," Bundler ParallelInstaller install_with_worker":{"type":"method","name":"install_with_worker","children":[],"call":[" process_specs "," finished_installing? "," enqueue_specs "]}," Bundler Index spec_names":{"type":"method","name":"spec_names","children":[],"call":["names uniq! "," specs keys + "," sources map "," sources "," specs keys "," specs "," specs keys +  uniq! "]}," Bundler GemHelper gem_push_host":{"type":"method","name":"gem_push_host","children":[],"call":[" allowed_push_host ","env_rubygems_host empty? ","ENV  [] ","ENV  []  empty? "]}," Bundler GemHelper allowed_push_host":{"type":"method","name":"allowed_push_host","children":[],"call":["@gemspec metadata [] ","@gemspec metadata ","@gemspec respond_to? "]}," Bundler FeatureFlag settings_method":{"type":"method","name":"settings_method","children":[],"call":[]}," Bundler FeatureFlag settings_option":{"type":"method","name":"settings_option","children":[],"call":[]}," Bundler Env append_formatted_table":{"type":"method","name":"append_formatted_table","children":[],"call":[]}," Bundler Env environment":{"type":"method","name":"environment","children":[],"call":[]}," Bundler Env chruby_version":{"type":"method","name":"chruby_version","children":[],"call":[]}," Bundler Env version_of":{"type":"method","name":"version_of","children":[],"call":[]}," Bundler Definition equivalent_rubygems_remotes?":{"type":"method","name":"equivalent_rubygems_remotes?","children":[],"call":["source equivalent_remotes? "," sources rubygems_remotes "," sources ","Bundler  settings [] ","Bundler  settings ","source is_a? "]}," Bundler Definition metadata_dependencies":{"type":"method","name":"metadata_dependencies","children":[],"call":["Dependency  new "," concat_ruby_version_requirements "," locked_ruby_version_object ","@unlock [] ","RubyVersion  system ","@ruby_version exact? ! ","@ruby_version exact? ","ruby_versions empty? "," ruby_version_requirements ","RubyVersion  system gem_version ","Gem  ruby_version "," concat_ruby_version_requirements  empty? "," ruby_version_requirements  empty? "]}," Bundler Definition converge_rubygems_sources":{"type":"method","name":"converge_rubygems_sources","children":[],"call":["locked_gem replace_remotes ","Bundler  settings [] ","Bundler  settings ","locked_gem_sources each ","actual_remotes empty? ! ","actual_remotes empty? ","locked_gem_sources empty? ! ","locked_gem_sources empty? "," sources rubygems_remotes "," sources ","s is_a? ","@locked_sources select ","Bundler  feature_flag lockfile_uses_separate_rubygems_sources? ","Bundler  feature_flag ","Bundler  feature_flag disable_multisource? "," locked_gem_sources each "," locked_gem_sources "," locked_gem_sources empty? "," disable_multisource? ","locked_gem_source replace_remotes "," multisource_allowed? "," sources rubygems_remotes  empty? ! "," sources rubygems_remotes  empty? "]}," Bundler Definition double_check_for_index":{"type":"method","name":"double_check_for_index","children":[],"call":["idxcount == ","idx size ","source double_check_for "," sources all_sources each "," sources all_sources "," sources ","names uniq! ","new_names flatten concat ","new_names flatten ","new_names compact! "," sources all_sources map ","names == "," lambda "," loop "," pinned_spec_names ","dependency_names + uniq ","dependency_names + ","idx dependency_names ","idx dependency_names_if_available ","idx size > "," proc ","idx size  == ","new_names flatten concat  uniq! ","dependency_names + uniq  uniq! ","new_new_names flatten concat  flatten concat ","new_dependency_names + uniq  flatten concat "," sources all_sources map  flatten concat ","idx dependency_names_if_available  flatten concat ","new_new_names flatten concat  flatten ","new_dependency_names + uniq  flatten "," sources all_sources map  flatten ","idx dependency_names_if_available  flatten ","new_new_names flatten concat  compact! ","new_dependency_names + uniq  compact! "," sources all_sources map  compact! ","idx dependency_names_if_available  compact! ","new_names flatten concat  == ","dependency_names + uniq  == "," pinned_spec_new_names flatten concat  "," pinned_spec_dependency_names + uniq  ","dependency_new_names flatten concat  + uniq ","dependency_dependency_names + uniq  + uniq ","dependency_new_names flatten concat  + ","dependency_dependency_names + uniq  + ","idx dependency_new_names flatten concat  ","idx dependency_dependency_names + uniq  ","idx dependency_new_names flatten concat _if_available ","idx dependency_dependency_names + uniq _if_available "]}," Bundler Definition missing_specs?":{"type":"method","name":"missing_specs?","children":[],"call":["Bundler  ui debug ","Bundler  ui "," create_gem_version_promoter ","missing map ","missing empty? "," missing_specs "," resolve materialize "," requested_dependencies "," resolve "," missing_specs  map "," missing_specs  empty? ","  missing_specs _specs "]}," Bundler CLI current_command":{"type":"method","name":"current_command","children":[],"call":["config [] "]}," Bundler CLI cli_help":{"type":"method","name":"cli_help","children":[],"call":[" class send "," shell "," class "," shell say "," shell print_table ","by_name [] first ","by_name [] ","utilities map! ","(or\n  (send\n    (lvar :by_name) :[]\n    (lvar :name))\n  (send nil :raise\n    (dstr\n      (str \"no primary command \")\n      (begin\n        (lvar :name))))) first "," raise ","primary_commands map! ","by_name keys sort - ","by_name keys sort ","by_name keys ","name match [] ","name match ","list group_by "," class printable_commands ","Bundler  feature_flag cache_command_is_package? ","Bundler  feature_flag ","Bundler  ui info ","Bundler  ui "," version ","Bundler  feature_flag bundler_3_mode? ","by_name keys sort -  map! "," class printable_commands  group_by "]}," Bundler CLI deprecated_option":{"type":"method","name":"deprecated_option","children":[],"call":[]}," Bundler Pristine initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler List run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","Bundler  ui ","s git_version ","s version ","s name ","specs each ","specs empty? ","@options [] ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by ","s name == ","Bundler  load specs reject ","Bundler  load specs ","Bundler  load ","s full_gem_path ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by ","(or\n  (send\n    (ivar :@options) :[]\n    (str \"only-group\"))\n  (send\n    (ivar :@options) :[]\n    (str \"without-group\"))) reject "," filtered_specs_by_groups "," raise ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by ","(or\n  (send\n    (ivar :@only_group) :any?)\n  (send\n    (ivar :@without_group) :any?)) reject ","@without_group any? ","@only_group any? ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by "," exit ","Bundler  ui warn ","Bundler  ui error ","e message ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by  each ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  each ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  each ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by  each ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by  empty? ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  empty? ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  empty? ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by  empty? ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by ) :reject) sort_by ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by ) :reject) sort_by ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by ) :reject) sort_by ","(send\n  (send\n    (send\n      (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by ) :reject) sort_by ","Bundler  load (send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by  reject ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  reject ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  reject ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by  reject ","Bundler  load (send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by  ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by  ","Bundler  load (send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by  ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by )) :reject) sort_by "," filtered_(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by _by_groups "," filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups "," filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups "," filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by _by_groups ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by _by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by )) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by _by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :(send\n  (send\n    (send\n      (const nil :Bundler) :load) :specs) :reject) sort_by )\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@options) :[]\n        (str \"only-group\"))\n      (send\n        (ivar :@options) :[]\n        (str \"without-group\")))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by _by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (send\n      (send\n        (const nil :Bundler) :load) :specs)) :reject) sort_by )\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by ","(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by _by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :(send\n  (if\n    (or\n      (send\n        (ivar :@only_group) :any?)\n      (send\n        (ivar :@without_group) :any?))\n    (send nil :filtered_specs_by_groups)\n    (kwbegin\n      (rescue\n        (send\n          (send\n            (const nil :Bundler) :load) :specs)\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by )\n        (resbody\n          (array\n            (const nil :GemNotFound))\n          (lvasgn :e)\n          (begin\n            (send\n              (send\n                (const nil :Bundler) :ui) :error\n              (send\n                (lvar :e) :message))\n            (send\n              (send\n                (const nil :Bundler) :ui) :warn\n              (str \"Install missing gems with `bundle install`.\"))\n            (send nil :exit\n              (int 1)))) nil))) :reject) sort_by "]}," Bundler List initialize":{"type":"method","name":"initialize","children":[],"call":["options [] map ","options [] "]}," Bundler Install check_for_group_conflicts_in_cli_options":{"type":"method","name":"check_for_group_conflicts_in_cli_options","children":[],"call":[" raise ","conflicting_groups join ","conflicting_groups empty? "," Array & "," Array "," options [] "," options "," Array &  join "," Array &  empty? "]}," Bundler Init gemfile":{"type":"method","name":"gemfile","children":[],"call":["Bundler  feature_flag init_gems_rb? ","Bundler  feature_flag ","Bundler  default_gemfile ","Bundler  settings [] ","Bundler  settings ","Bundler  preferred_gemfile_name "," options [] "," options "]}," Bundler Common clean_after_install?":{"type":"method","name":"clean_after_install?","children":[],"call":[]}," Bundler BuildMetadata release?":{"type":"method","name":"release?","children":[],"call":[]}," Bundler BuildMetadata git_commit_sha":{"type":"method","name":"git_commit_sha","children":[],"call":[]}," Bundler BuildMetadata built_at":{"type":"method","name":"built_at","children":[],"call":[]}," Bundler BuildMetadata to_h":{"type":"method","name":"to_h","children":[],"call":[]}," Bundler Index dependency_names_if_available":{"type":"method","name":"dependency_names_if_available","children":[],"call":["n map! ","(send nil :reduce\n  (array)) tap "," raise ","spec inspect ","names concat ","spec dependencies "," reduce "]}," Bundler frozen_bundle?":{"type":"method","name":"frozen_bundle?","children":[],"call":[" settings [] "," settings "," feature_flag deployment_means_frozen? "," feature_flag ","frozen nil? "," feature_flag deployment_means_ settings [] ? "," settings []  nil? "]}," Bundler SharedHelpers resolve_path":{"type":"method","name":"resolve_path","children":[],"call":["File  realpath ","File  realpath != ","File  exist? ","File  respond_to? ","File  expand_path "]}," Molinillo DependencyGraph Vertex _path_to?":{"type":"method","name":"_path_to?","children":[],"call":["v _path_to? "," successors any? "," successors "," equal? ","visited add? "]}," Bundler CurrentRuby truffleruby?":{"type":"method","name":"truffleruby?","children":[],"call":["RUBY_ENGINE  == "]}," Bundler SharedHelpers write_to_gemfile":{"type":"method","name":"write_to_gemfile","children":[],"call":["file puts ","File  open "," filesystem_access "]}," Bundler Settings base_path_relative_to_pwd":{"type":"method","name":"base_path_relative_to_pwd","children":[],"call":["Pathname  new ","File  join ","base_path absolute? ","relative_path to_s start_with? ","relative_path to_s ","expanded_base_path relative_path_from ","Pathname  pwd ","base_path expand_path ","Bundler  root "," base_path ","Pathname  new  absolute? ","Pathname  new  to_s start_with? ","expanded_base_path relative_path_from  to_s start_with? ","Pathname  new  to_s ","expanded_base_path relative_path_from  to_s ","expanded_base_path Pathname  new _from ","expanded_base_path expanded_base_path relative_path_from _from ","base_path expand_path  relative_path_from ","expanded_Pathname  new  relative_path_from ","Pathname  new  expand_path "," Pathname  new  "]}," Bundler Plugin Events defined_event?":{"type":"method","name":"defined_event?","children":[],"call":[]}," Bundler Plugin Events reset":{"type":"method","name":"reset","children":[],"call":[]}," Bundler Plugin Events define":{"type":"method","name":"define","children":[],"call":[]}," Bundler Installer processor_count":{"type":"method","name":"processor_count","children":[],"call":["Etc  nprocessors "," require "]}," Bundler Installer installation_parallelization":{"type":"method","name":"installation_parallelization","children":[],"call":[" processor_count ","(send\n  (lvar :jobs) :pred) max ","jobs pred ","Bundler  settings [] ","Bundler  settings ","Bundler  feature_flag auto_config_jobs? ","Bundler  feature_flag "," can_install_in_parallel? ","options delete ","Gem  win_platform? ","Bundler  settings processor_count ","(send\n  (lvar :Bundler  settings [] ) :pred) max ","(send\n  (lvar :options delete ) :pred) max ","Bundler  settings []  pred ","options delete  pred ","Bundler  feature_flag auto_config_Bundler  settings [] ? ","Bundler  feature_flag auto_config_options delete ? ","Bundler  feature_flag Bundler  feature_flag auto_config_jobs? ? "]}," Bundler Injector show_warning":{"type":"method","name":"show_warning","children":[],"call":["Bundler  ui info ","Bundler  ui add_color ","Bundler  ui "]}," Bundler Injector cross_check_for_errors":{"type":"method","name":"cross_check_for_errors","children":[],"call":["removed_deps - "," show_warning ","errored_deps map join ","errored_deps map ","errored_deps empty? ","(send\n  (send\n    (lvar :builder) :dependencies) :select) & ","d gemfile == ","d gemfile ","removed_deps select ","builder dependencies select ","builder dependencies "," raise ","extra_removed_gems join ","SharedHelpers  write_to_gemfile ","initial_gemfile join ","extra_removed_gems empty? ","original_deps - ","builder eval_gemfile ","Dsl  new ","(send\n  (send\n    (lvar :builder) :dependencies) :select) &  map join ","(send\n  (send\n    (lvar :builder) :dependencies) :select) &  map ","(send\n  (send\n    (lvar :builder) :dependencies) :select) &  empty? ","(send\n  (send\n    (lvar :Dsl  new ) :dependencies) :select) & ","Dsl  new  dependencies select ","Dsl  new  dependencies ","original_deps -  join ","original_deps -  empty? ","Dsl  new  eval_gemfile "]}," Bundler Injector remove_nested_blocks":{"type":"method","name":"remove_nested_blocks","children":[],"call":["gemfile compact! ","gemfile []= ","index + ","gemfile [] =~ ","gemfile [] ","line include? ","line nil? ! ","line nil? ","gemfile each_with_index ","nested_blocks >= ","gemfile [] include? ","gemfile [] nil? ! ","gemfile [] nil? ","line strip start_with? ","line strip ","(str \"^\\\\s*end\\\\s*$\") match? "]}," Bundler Injector remove_gems_from_gemfile":{"type":"method","name":"remove_gems_from_gemfile","children":[],"call":["new_gemfile join chomp ","new_gemfile join "," remove_nested_blocks ","(str \"group\") each ","new_gemfile delete_at ","index + ","new_gemfile [] ","new_gemfile [] == ","new_gemfile each_with_index ","line match ","IO  readlines reject ","IO  readlines ","Regexp  union ","line rstrip end_with? ","line rstrip ","new_gemfile << "," is_not_within_comment? ","IO  readlines each ","File  readlines each ","File  readlines "]}," Bundler Injector remove_gems_from_dependencies":{"type":"method","name":"remove_gems_from_dependencies","children":[],"call":["removed_deps << ","builder dependencies delete ","builder dependencies "," raise ","deleted_dep nil? ","d name == ","d name ","builder dependencies find ","gems each "]}," Bundler Injector remove_deps":{"type":"method","name":"remove_deps","children":[],"call":[" cross_check_for_errors ","builder dependencies ","SharedHelpers  write_to_gemfile "," remove_gems_from_gemfile ","removed_deps empty? "," remove_gems_from_dependencies ","builder eval_gemfile ","Dsl  new ","Bundler  ui info ","Bundler  ui ","IO  readlines ","File  readlines ","Dsl  new  dependencies "," remove_gems_from_dependencies  empty? ","Dsl  new  eval_gemfile "]}," Bundler Injector version_prefix":{"type":"method","name":"version_prefix","children":[],"call":["@options [] "]}," Bundler Injector remove":{"type":"method","name":"remove","children":[],"call":["Bundler  ui confirm ","SharedHelpers  pretty_dependency ","Bundler  ui ","deps each "," show_warning ","deps empty? "," remove_deps ","Bundler  definition gemfiles each ","Bundler  definition gemfiles ","Bundler  definition ","Bundler  reset_paths! "," remove_deps  each "," remove_deps  empty? "," remove_ remove_deps  "]}," Bundler Definition gem_version_promoter":{"type":"method","name":"gem_version_promoter","children":[],"call":["GemVersionPromoter  new ","@unlock [] ","Bundler SpecSet  new ","@locked_gems specs ","@lockfile_contents empty? ! ","@lockfile_contents empty? ","@locked_specs empty? "," unlocking? ","@Bundler SpecSet  new  empty? "]}," Bundler CLI remove":{"type":"method","name":"remove","children":[],"call":["Remove  new run ","Remove  new "," options "," require "," require_relative ","SharedHelpers  major_deprecation ","ARGV  include? "]}," Bundler Remove run":{"type":"method","name":"run","children":[],"call":["Installer  install ","Bundler  definition ","Bundler  root ","@options [] ","Injector  remove "," raise ","@gems empty? "]}," Bundler Remove initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler List filtered_specs_by_groups":{"type":"method","name":"filtered_specs_by_groups","children":[],"call":["definition specs_for ","(send\n  (ivar :@options) :[]\n  (str \"without-group\")) map ","g == ","@options [] to_sym ","@options [] ","groups select ","groups reject "," verify_group_exists ","definition groups ","Bundler  definition ","(send\n  (ivar :@without_group) :any?) map ","@only_group include? ","@only_group any? ","@without_group include? ","@without_group any? ","Bundler  definition  specs_for ","definition groups  select ","definition groups  reject ","definition definition groups  ","Bundler  definition  groups ","Bundler  Bundler  definition  "]}," Bundler List verify_group_exists":{"type":"method","name":"verify_group_exists","children":[],"call":[" raise ","@options [] ","groups include? ! ","groups include? ","@options [] to_sym ","(send\n  (ivar :@without_group) :+\n  (ivar :@only_group)) each ","@without_group + "]}," Bundler Doctor check_home_permissions":{"type":"method","name":"check_home_permissions","children":[],"call":["Bundler  ui warn ","files_not_readable_or_writable join ","Bundler  ui ","files_not_readable_or_writable any? ","files_not_rw_and_owned_by_different_user join ","files_not_rw_and_owned_by_different_user any? ","files_not_owned_by_current_user_but_still_rw join ","files_not_owned_by_current_user_but_still_rw any? ","files_not_owned_by_current_user_but_still_rw << ","File  stat uid != ","Process  uid ","File  stat uid ","File  stat ","files_not_readable_or_writable << ","files_not_rw_and_owned_by_different_user << ","File  readable? ! ","File  readable? ","File  writable? ! ","File  writable? ","Find  find each ","Find  find ","Bundler  home to_s ","Bundler  home "," require ","Bundler  bundle_path to_s ","Bundler  bundle_path ","broken_symlinks join ","broken_symlinks any? ","broken_symlinks << ","File  exist? ! ","File  exist? "]}," Bundler RubyGemsGemInstaller initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor find_task_possibilities":{"type":"method","name":"find_task_possibilities","children":[],"call":["unique_possibilities size == ","unique_possibilities size ","possibilities include? ","(send\n  (lvar :possibilities) :map) uniq "," map [] "," map ","possibilities map ","(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort ","meth == ","n [] "," all_tasks merge keys select "," all_tasks merge keys "," all_tasks merge "," all_tasks ","meth to_s length ","meth to_s ","(send\n  (lvar :possibilities) :map) uniq  size == ","unique_(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort  size == ","(send\n  (lvar :possibilities) :map) uniq  size ","unique_(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort  size ","(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort  include? ","(send\n  (lvar :(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort ) :map) uniq ","(send\n  (send\n    (send\n      (send nil :all_tasks) :merge\n      (send nil :map)) :keys) :select) sort  map ","meth to_s meth to_s length gth "]}," Thor Task local_method?":{"type":"method","name":"local_method?","children":[],"call":["(send\n  (lvar :methods) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ! ","(send\n  (lvar :methods) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ","methods & ","name to_sym ","name to_s ","instance public_methods + + ","instance protected_methods ","instance public_methods + ","instance private_methods ","instance public_methods ","(send\n  (lvar :instance public_methods + + ) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ! ","(send\n  (lvar :instance public_methods + + ) :&\n  (array\n    (send\n      (lvar :name) :to_s)\n    (send\n      (lvar :name) :to_sym))) empty? ","instance public_methods + +  & ","instance public_instance public_methods + +  + + ","instance protected_instance public_methods + +  ","instance public_instance public_methods + +  + ","instance private_instance public_methods + +  ","instance public_instance public_methods + +  "]}," Thor Task private_method?":{"type":"method","name":"private_method?","children":[],"call":["(send\n  (send\n    (lvar :instance) :private_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ! ","(send\n  (send\n    (lvar :instance) :private_methods) :&\n  (array\n    (send\n      (send nil :name) :to_s)\n    (send\n      (send nil :name) :to_sym))) empty? ","instance private_methods & "," name to_sym "," name "," name to_s ","instance private_methods "]}," Thor Actions EmptyDirectory call_public_method":{"type":"method","name":"call_public_method","children":[],"call":[" raise "," base class "," base "," base respond_to? "," base send "]}," Bundler Definition all_specs":{"type":"method","name":"all_specs","children":[],"call":[" specs "," dependencies "]}," Bundler CLI setup_cache_all":{"type":"method","name":"setup_cache_all","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  settings [] ! ","Bundler  settings [] ","Bundler  settings ","s is_a? ! ","s is_a? ","Bundler  definition sources any? ","Bundler  definition sources ","Bundler  definition ","Bundler  settings []= "," options [] "," options "," options key? "]}," Bundler Source Git app_cache_path":{"type":"method","name":"app_cache_path","children":[],"call":["Bundler  app_cache join "," shortref_for_path "," revision "," cached_revision "," base_name ","Bundler  app_cache "]}," Bundler UI Shell quiet=":{"type":"method","name":"quiet=","children":[],"call":[]}," Bundler CLI warn_on_incompatible_ruby_or_rubygems":{"type":"method","name":"warn_on_incompatible_ruby_or_rubygems","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Bundler  ui warn ","upgrade join ","upgrade any? ","(lvar :ruby2) compact ","Gem Version  new >= ","Gem Version  new ","Gem VERSION  dup ","RUBY_VERSION  dup ","(lvar :ruby2) compact  join ","(lvar :ruby2) compact  any? "]}," Bundler UI ask":{"type":"method","name":"ask","children":[],"call":[]}," Bundler UI trace":{"type":"method","name":"trace","children":[],"call":[]}," Bundler Fetcher well_formed_dependency":{"type":"method","name":"well_formed_dependency","children":[],"call":[" raise "," s [] "," s "," puts ","e message include? ","e message ","Gem Dependency  new "]}," Bundler Fetcher dependency_api_uri":{"type":"method","name":"dependency_api_uri","children":[],"call":["URI  parse ","url << ","URI  encode ","gem_names join ","gem_names any? "," redirected_uri ","uri query= "," fetch_uri + "," fetch_uri "," redirected_ fetch_uri +  "," fetch_uri +  query= "," fetch_ fetch_uri +  + "," fetch_ fetch_uri +  "]}," Bundler Dependency mingw_20?":{"type":"method","name":"mingw_20?","children":[],"call":[" on_20? "," mingw? ","RUBY_VERSION  >= "]}," Bundler Dependency mri_20?":{"type":"method","name":"mri_20?","children":[],"call":[" on_20? "," mri? ","RUBY_VERSION  >= "]}," Bundler Dependency ruby_20?":{"type":"method","name":"ruby_20?","children":[],"call":[" on_20? "," ruby? ","RUBY_VERSION  >= "]}," Bundler Dependency on_20?":{"type":"method","name":"on_20?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler Dependency on_19?":{"type":"method","name":"on_19?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler Dependency on_18?":{"type":"method","name":"on_18?","children":[],"call":["RUBY_VERSION  =~ "]}," Bundler CLI pager_system":{"type":"method","name":"pager_system","children":[],"call":["Bundler  which ","ENV  [] ","(rescue\n  (xstr\n    (str \"which more\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ! ","(rescue\n  (xstr\n    (str \"which more\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ","(rescue\n  (xstr\n    (str \"which less\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? ! ","(rescue\n  (xstr\n    (str \"which less\"))\n  (resbody nil nil\n    (str \"\")) nil) empty? "]}," Bundler CLI not_found_message":{"type":"method","name":"not_found_message","children":[],"call":["SimilarityDetector  new similar_word_list ","SimilarityDetector  new ","a name ","a respond_to? ","alternatives map "," require "]}," Bundler CLI select_spec":{"type":"method","name":"select_spec","children":[],"call":["specs [] ","num - ","(lvasgn :num\n  (send\n    (lvar :input) :to_i)) > ","input to_i ","Bundler  ui ask ","Bundler  ui ","Bundler  ui info ","spec name ","index succ ","specs each_with_index ","specs first "," raise "," not_found_message ","Bundler  definition dependencies ","Bundler  definition ","specs count ","specs << ","spec name =~ ","spec name == ","Bundler  definition specs each ","Bundler  definition specs ","Regexp  new ","input to_i  - ","(lvasgn :input to_i \n  (send\n    (lvar :input) :to_i)) > ","(lvasgn :num\n  (send\n    (lvar :Bundler  ui ask ) :to_i)) > ","Bundler  ui ask  to_i "]}," Bundler RubygemsIntegration Future spec_from_gem":{"type":"method","name":"spec_from_gem","children":[],"call":[" raise ","Gem Package  new spec ","Gem Package  new "]}," Bundler CLI gem_dependency_with_name":{"type":"method","name":"gem_dependency_with_name","children":[],"call":[" raise "," not_found_message ","Bundler  load dependencies ","Bundler  load ","d name == ","d name ","Bundler  load dependencies find "]}," Bundler CertificateFailureError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler CLI without_groups_message":{"type":"method","name":"without_groups_message","children":[],"call":["groups size == ","groups size ","(send\n  (array\n    (send\n      (send\n        (lvar :groups) :[]\n        (erange\n          (int 0)\n          (int -1))) :join\n      (str \", \"))\n    (send\n      (lvar :groups) :[]\n      (int -1))) :reject) join ","s empty? ","(send\n  (send\n    (lvar :groups) :[]\n    (erange\n      (int 0)\n      (int -1))) :join\n  (str \", \")) reject ","groups [] ","groups [] join ","Bundler  settings without ","Bundler  settings ","(send\n  (array\n    (send\n      (send\n        (lvar :groups) :[]\n        (erange\n          (int 0)\n          (int -1))) :join\n      (str \", \"))\n    (send\n      (lvar :groups) :[]\n      (irange\n        (int -1)\n        (int -1)))) :reject) join ","s to_s empty? ","s to_s ","Bundler  settings without  size == ","Bundler  settings without  size ","(send\n  (array\n    (send\n      (send\n        (lvar :Bundler  settings without ) :[]\n        (erange\n          (int 0)\n          (int -1))) :join\n      (str \", \"))\n    (send\n      (lvar :Bundler  settings without ) :[]\n      (int -1))) :reject) join ","(send\n  (send\n    (lvar :Bundler  settings without ) :[]\n    (erange\n      (int 0)\n      (int -1))) :join\n  (str \", \")) reject ","Bundler  settings without  [] ","Bundler  settings without  [] join ","(send\n  (array\n    (send\n      (send\n        (lvar :Bundler  settings without ) :[]\n        (erange\n          (int 0)\n          (int -1))) :join\n      (str \", \"))\n    (send\n      (lvar :Bundler  settings without ) :[]\n      (irange\n        (int -1)\n        (int -1)))) :reject) join "]}," Bundler Definition rubygems_remotes":{"type":"method","name":"rubygems_remotes","children":[],"call":["(send\n  (block\n    (send\n      (ivar :@sources) :select)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :is_a?\n      (const\n        (const nil :Source) :Rubygems))) :map) flatten ","s remotes ","(send\n  (ivar :@sources) :select) map ","s is_a? ","@sources select "]}," Bundler UI quiet?":{"type":"method","name":"quiet?","children":[],"call":[]}," Bundler Source Rubygems gem_dir_exists?":{"type":"method","name":"gem_dir_exists?","children":[],"call":["File  directory? ","spec full_gem_path ","spec summary =~ ","spec summary ","spec loaded_from include? ","spec loaded_from ","spec name == ","spec name "]}," Bundler SafeCatch Internal Result matcher":{"type":"method","name":"matcher","children":[],"call":[]}," Bundler SafeCatch Internal Result Matcher ===":{"type":"method","name":"===","children":[],"call":["@tag equal? ","other tag ","other respond_to? "]}," Bundler SafeCatch Internal Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler SafeCatch Internal throw":{"type":"method","name":"throw","children":[],"call":[]}," Bundler SafeCatch Internal catch":{"type":"method","name":"catch","children":[],"call":[]}," Bundler SafeCatch safe_throw":{"type":"method","name":"safe_throw","children":[],"call":[" throw ","Internal  throw ","Bundler  current_ruby jruby? ","Bundler  current_ruby "]}," Bundler SafeCatch safe_catch":{"type":"method","name":"safe_catch","children":[],"call":[" catch ","Internal  catch ","Bundler  current_ruby jruby? ","Bundler  current_ruby "]}," Bundler ParallelWorkers worker_pool":{"type":"method","name":"worker_pool","children":[],"call":[]}," Bundler ParallelWorkers Worker stop_workers":{"type":"method","name":"stop_workers","children":[],"call":[]}," Bundler ParallelWorkers Worker prepare_threads":{"type":"method","name":"prepare_threads","children":[],"call":[]}," Bundler ParallelWorkers Worker stop_threads":{"type":"method","name":"stop_threads","children":[],"call":["thread join ","@threads each ","@request_queue enq "]}," Bundler ParallelWorkers Worker stop":{"type":"method","name":"stop","children":[],"call":[" stop_threads "," stop_workers "]}," Bundler ParallelWorkers Worker deq":{"type":"method","name":"deq","children":[],"call":[" raise ","result exception ","WrappedException  === ","@response_queue deq ","result is_a? ","@response_queue deq  exception ","@response_queue deq  is_a? "]}," Bundler ParallelWorkers Worker enq":{"type":"method","name":"enq","children":[],"call":["@request_queue enq "]}," Bundler ParallelWorkers Worker initialize":{"type":"method","name":"initialize","children":[],"call":[" prepare_threads "," prepare_workers ","Queue  new "," exit "," stop_workers ","i exit ","@threads each "," trap "]}," Bundler ParallelWorkers Worker WrappedException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler ParallelWorkers UnixWorker stop_workers":{"type":"method","name":"stop_workers","children":[],"call":["Process  waitpid ","worker pid ","@workers each ","Process  kill ","worker io_w close ","worker io_w ","worker io_r close ","worker io_r ","worker io_w closed? ","worker io_r closed? "]}," Bundler ParallelWorkers UnixWorker prepare_threads":{"type":"method","name":"prepare_threads","children":[],"call":["@response_queue enq ","worker work ","obj equal? ","@request_queue deq "," loop ","Thread  current abort_on_exception= ","Thread  current ","@workers [] ","Thread  start ","size times map ","size times ","@workers []  work ","@request_queue deq  equal? ","@@workers [] s [] "]}," Bundler ParallelWorkers UnixWorker prepare_workers":{"type":"method","name":"prepare_workers","children":[],"call":["JobHandler  new ","child_write close ","child_read close ","Marshal  dump ","WrappedException  new ","func call ","Marshal  load ","child_read eof? ! ","child_read eof? ","parent_write close ","parent_read close ","Process  fork ","IO  pipe ","size times map ","size times "]}," Bundler ParallelWorkers UnixWorker JobHandler work":{"type":"method","name":"work","children":[],"call":["Marshal  load "," io_r ","Marshal  dump "," io_w "]}," Bundler ParallelWorkers ThreadWorker prepare_workers":{"type":"method","name":"prepare_workers","children":[],"call":["@response_queue enq ","func call ","obj equal? ","@request_queue deq "," loop ","Thread  current abort_on_exception= ","Thread  current ","Thread  start ","size times map ","size times ","WrappedException  new ","@request_queue deq  equal? "]}," Bundler Installer can_install_parallely?":{"type":"method","name":"can_install_parallely?","children":[],"call":["Bundler  ui warn ","Bundler  ui ","Bundler  rubygems provides? ","Bundler  rubygems ","Bundler  current_ruby mri? ","Bundler  current_ruby "]}," Bundler GemInstaller build_extensions":{"type":"method","name":"build_extensions","children":[],"call":["SharedHelpers  chdir "]}," Bundler Source mirror_for":{"type":"method","name":"mirror_for","children":[],"call":[]}," Bundler RubygemsIntegration Modern build":{"type":"method","name":"build","children":[],"call":["Gem Builder  new build ","Gem Builder  new "," require "]}," Bundler ParallelWorkers UnixWorker initialize":{"type":"method","name":"initialize","children":[],"call":["Net HTTP Persistent  new shutdown ","Net HTTP Persistent  new "]}," Bundler Installer check_rubygems_cache_dir":{"type":"method","name":"check_rubygems_cache_dir","children":[],"call":["Bundler  ui warn ","Bundler  ui ","same_hash_gems each ","same_hash_gems any? ","names size > ","names size ","(send\n  (send\n    (lvar :same_size_gems) :flatten) :group_by) values select ","(send\n  (send\n    (lvar :same_size_gems) :flatten) :group_by) values ","Digest SHA1  hexdigest ","File  read ","same_size_gems flatten group_by ","same_size_gems flatten ","(send\n  (lvar :cached_gems) :group_by) values select ","(send\n  (lvar :cached_gems) :group_by) values ","File  size ","cached_gems group_by ","Dir  [] ","Bundler  rubygems gem_dir ","Bundler  rubygems "," require ","(send\n  (lvar :Dir  [] ) :group_by) values select ","(send\n  (lvar :Dir  [] ) :group_by) values ","Dir  []  group_by "]}," Bundler Installer logger":{"type":"method","name":"logger","children":[],"call":["Logger  new ","Bundler  app_config_path join ","Bundler  app_config_path ","Bundler  app_config_path mkpath "," require "]}," Bundler Installer ready_to_install?":{"type":"method","name":"ready_to_install?","children":[],"call":["dep name != ","spec name ","dep name ","dep type != ","dep type ","remains [] ","spec dependencies none? ","spec dependencies ","dep name == ","dep type == "]}," Bundler Fetcher request":{"type":"method","name":"request","children":[],"call":[" raise ","CertificateFailureError  new "," connection request "," connection ","req basic_auth ","uri password ","uri user ","Net HTTP Get  new ","uri request_uri ","Bundler  ui debug ","Bundler  ui "," request "," retry_with_auth ","CGI  unescape ","Bundler  ui trace ","uri host ","e message "," connection Net HTTP Get  new uest ","Net HTTP Get  new  basic_auth ","uri CGI  unescape  ","uri Net HTTP Get  new uest_uri "," Net HTTP Get  new uest "]}," Bundler Resolver dependency_tree":{"type":"method","name":"dependency_tree","children":[],"call":["m << << ","   * ","requirements size ","m << "," clean_req ","requirements each_with_index "]}," Bundler Resolver resolve_conflict":{"type":"method","name":"resolve_conflict","children":[],"call":[" clear_search_cache ","states << ","state possibles empty? ","state possibles "," resolve_for_conflict ","current name "," debug "," find_conflict_state ","parent name "," handle_conflict "," find_conflict_state s << "," find_conflict_state  possibles empty? "," find_conflict_state  possibles "," find_conflict_ find_conflict_state  "]}," Bundler Resolver resolve_for_conflict":{"type":"method","name":"resolve_for_conflict","children":[],"call":[" activate_gem ","state possibles pop ","state possibles ","state requirement ","state depth ","state activated dup ","state activated ","state reqs dup ","state reqs "," raise "," version_conflict ","state possibles empty? ","state nil? ","state conflicts dup ","state conflicts ","state state possibles pop s pop ","state state possibles pop s ","state state requirement  ","state state possibles pop s empty? "]}," Bundler Resolver activate_gem":{"type":"method","name":"activate_gem","children":[],"call":["reqs << "," gems_size ","@gems_size [] ","dep required_by << ","dep required_by ","dep required_by replace ","current required_by ","dep type == ","dep type ","dependencies each "," debug ","requirement activate_platform ","current __platform ","(send\n  (send\n    (lvar :requirement) :required_by) :map) join ","d requirement ","d name ","requirement required_by map ","requirement required_by ","requirement version ","requirement name ","activated []= ","requirement required_by << ","requirement required_by replace ","requirement activate_platform  each "]}," Bundler Resolver find_conflict_state":{"type":"method","name":"find_conflict_state","children":[],"call":["conflict name == ","state name ","conflict name ","states pop ","states empty? ","states pop  name ","states pop s pop ","states pop s empty? "]}," Bundler Resolver other_possible?":{"type":"method","name":"other_possible?","children":[],"call":["state possibles any? ","state possibles ","i name == ","conflict name ","i name ","states detect "]}," Bundler Resolver find_state":{"type":"method","name":"find_state","children":[],"call":["current name == ","i name ","current name ","states detect "]}," Bundler Resolver state_any?":{"type":"method","name":"state_any?","children":[],"call":["state possibles any? ","state possibles "]}," Bundler Resolver handle_conflict":{"type":"method","name":"handle_conflict","children":[],"call":["current required_by last ","current required_by ","existing required_by last ","existing required_by "," state_any? "," find_state ","existing nil? ","current nil? ","i name == ","parent name ","i name ","states detect ","parent required_by last ","parent required_by ","parent required_by empty? ","state possibles any? ","state possibles ","current required_by last  required_by last ","current required_by last  required_by ","existing required_by last  required_by last ","existing required_by last  required_by ","existing required_by last  nil? ","current required_by last  nil? ","parent required_by last  name ","parent required_by last  required_by last ","parent required_by last  required_by ","parent required_by last  required_by empty? "]}," Bundler Resolver State name":{"type":"method","name":"name","children":[],"call":[" requirement name "," requirement "]}," Bundler Fetcher bundler_uri":{"type":"method","name":"bundler_uri","children":[],"call":["URI  parse ","@remote_uri host ","@remote_uri scheme "]}," Bundler Fetcher rubygems?":{"type":"method","name":"rubygems?","children":[],"call":["@remote_uri host == ","@remote_uri host "]}," Bundler Fetcher redirected_uri":{"type":"method","name":"redirected_uri","children":[],"call":[" bundler_uri "," rubygems? "]}," Bundler Fetcher retry_with_auth":{"type":"method","name":"retry_with_auth","children":[],"call":["auth split ","@remote_uri password= ","@remote_uri user= "," raise ","AuthenticationRequiredError  new "," uri ","auth nil? ","Bundler  settings [] ","@remote_uri to_s ","Bundler  settings ","BadAuthenticationError  new ","@remote_uri user ","AnonymizableURI  new ","@remote_uri dup ","Bundler  settings []  split ","Bundler  settings []  nil? "]}," Bundler Dsl add_github_sources":{"type":"method","name":"add_github_sources","children":[],"call":[" git_source ","repo_name include? "]}," Bundler Install without_groups_messages":{"type":"method","name":"without_groups_messages","children":[],"call":["Bundler  ui confirm ","Bundler CLI Common  without_groups_message ","Bundler  ui "," require ","Bundler  settings without any? ","Bundler  settings without ","Bundler  settings "]}," Bundler Source Rubygems source_uris_for_spec":{"type":"method","name":"source_uris_for_spec","children":[],"call":["s source_uri "," specs search_all map "," specs search_all ","spec name "," specs ","uris << ","spec source_uri without_credentials ","spec source_uri "," specs search_all inject ","s source_uri without_credentials "]}," Bundler Source Rubygems remotes_equal?":{"type":"method","name":"remotes_equal?","children":[],"call":[" remotes map == ","other_remotes map "," method "," remotes map "," remotes "]}," Bundler SharedHelpers chdir_monitor":{"type":"method","name":"chdir_monitor","children":[],"call":["Bundler  rubygems ext_lock ","Bundler  rubygems "]}," Bundler Resolver reset_state":{"type":"method","name":"reset_state","children":[],"call":[" clear_search_cache "]}," Bundler Fetcher _use_api":{"type":"method","name":"_use_api","children":[],"call":[" raise "," fetch "," dependency_api_uri ","Bundler Fetcher  disable_endpoint ","@remote_uri scheme == ","@remote_uri scheme "]}," Bundler AnonymizableURI initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (lvar :original_uri) :dup) :tap) freeze ","uri user= ","uri password= ","original_uri dup tap ","original_uri dup ","original_uri userinfo ","original_uri freeze "," remove_auth freeze "," remove_auth "," apply_auth freeze "," apply_auth "]}," Bundler Fetcher add_configured_credentials":{"type":"method","name":"add_configured_credentials","children":[],"call":["AnonymizableURI  new ","auth split ","uri password= ","uri user= ","uri dup ","Bundler  settings [] ","uri to_s ","Bundler  settings ","Bundler  settings []  split ","uri dup  password= ","uri dup  user= ","uri dup  dup ","uri dup  to_s "]}," Bundler Fetcher resolve_remote_uri":{"type":"method","name":"resolve_remote_uri","children":[],"call":[" add_configured_credentials ","Bundler Source  mirror_for "]}," Bundler Source LocalRubygems specs":{"type":"method","name":"specs","children":[],"call":["idx use "," installed_specs "," cached_specs "]}," Bundler Fetcher configured_uri_for":{"type":"method","name":"configured_uri_for","children":[],"call":["AnonymizableURI  new ","Bundler  settings [] ","uri host ","Bundler  settings ","uri to_s ","Bundler Source  mirror_for ","Bundler Source  mirror_for  host ","Bundler Source  mirror_for  to_s "]}," Bundler AnonymizableURI remove_auth":{"type":"method","name":"remove_auth","children":[],"call":["uri user= ","uri password= ","uri dup ","uri userinfo ","uri dup  user= ","uri dup  password= ","uri dup  dup ","uri dup  userinfo "]}," Bundler AnonymizableURI apply_auth":{"type":"method","name":"apply_auth","children":[],"call":["uri userinfo= ","uri dup ","uri userinfo nil? ","uri userinfo ","uri dup  userinfo= ","uri dup  dup ","uri dup  userinfo nil? ","uri dup  userinfo "]}," Bundler SpecSet empty?":{"type":"method","name":"empty?","children":[],"call":["@specs empty? "]}," Bundler SpecSet size":{"type":"method","name":"size","children":[],"call":["@specs size "]}," Bundler SpecSet <<":{"type":"method","name":"<<","children":[],"call":["@specs << "]}," Thor Shell Basic git_merge_tool":{"type":"method","name":"git_merge_tool","children":[],"call":["(str \"git config merge.tool\") rstrip "]}," Thor Shell Basic merge_tool":{"type":"method","name":"merge_tool","children":[],"call":[" git_merge_tool ","ENV  [] "]}," Thor Shell Basic merge":{"type":"method","name":"merge","children":[],"call":[" system ","temp path "," merge_tool ","temp rewind ","temp write ","Tempfile  open ","File  dirname ","File  extname ","File  basename "," require "]}," Thor UnknownArgumentError initialize":{"type":"method","name":"initialize","children":[],"call":["unknown map join ","unknown map "]}," Thor UnknownArgumentError SpellChecker spell_checker":{"type":"method","name":"spell_checker","children":[],"call":["NoKwargSpellChecker  new "," error switches "," error "]}," Thor UnknownArgumentError SpellChecker corrections":{"type":"method","name":"corrections","children":[],"call":["(send\n  (send\n    (send nil :error) :unknown) :flat_map) uniq map ","(send\n  (send\n    (send nil :error) :unknown) :flat_map) uniq "," spell_checker correct "," spell_checker "," error unknown flat_map "," error unknown "," error "]}," Thor UnknownArgumentError SpellChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor UndefinedCommandError initialize":{"type":"method","name":"initialize","children":[],"call":["namespace inspect ","command inspect "]}," Thor UndefinedCommandError SpellChecker spell_checker":{"type":"method","name":"spell_checker","children":[],"call":["NoKwargSpellChecker  new "," error all_commands "," error "]}," Thor UndefinedCommandError SpellChecker corrections":{"type":"method","name":"corrections","children":[],"call":[" spell_checker correct map "," spell_checker correct "," error command "," error "," spell_checker "]}," Thor UndefinedCommandError SpellChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor NoKwargSpellChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FileUtils Entry_ link":{"type":"method","name":"link","children":[],"call":["File  link "," path "," raise ","File  directory? ","Dir  mkdir ","cannot link directory %s to itself %s % "," descendant_directory? ","File  exist? ! ","File  exist? "," directory? "]}," FileUtils link_entry":{"type":"method","name":"link_entry","children":[],"call":["ent link ","destent path ","File  unlink ","File  file? ","Entry_  new ","ent rel ","Entry_  new traverse ","Entry_  new  path "]}," FileUtils cp_lr":{"type":"method","name":"cp_lr","children":[],"call":[" link_entry "," fu_each_src_dest "," fu_output_message ","(lvar :src) flatten join ","(lvar :src) flatten "]}," Bundler RubygemsIntegration MoreFuture default_stubs":{"type":"method","name":"default_stubs","children":[],"call":["Gem Specification  send ","Gem Specification  default_stubs "]}," Bundler GemHelper sh_with_status":{"type":"method","name":"sh_with_status","children":[],"call":["block call ","status success? ","IO  popen ","SharedHelpers  chdir "," base ","Bundler  ui debug ","Bundler  ui "]}," Bundler GemHelper sh_with_input":{"type":"method","name":"sh_with_input","children":[],"call":[" abort ","Kernel  system ","SharedHelpers  chdir "," base ","Bundler  ui debug ","Bundler  ui "]}," Bundler unbundled_exec":{"type":"method","name":"unbundled_exec","children":[],"call":["Kernel  exec "," with_env "," unbundled_env "]}," Bundler original_exec":{"type":"method","name":"original_exec","children":[],"call":["Kernel  exec "," with_original_env "]}," Bundler unbundled_system":{"type":"method","name":"unbundled_system","children":[],"call":["Kernel  system "," with_unbundled_env "]}," Bundler original_system":{"type":"method","name":"original_system","children":[],"call":["Kernel  system "," with_original_env "]}," Bundler with_unbundled_env":{"type":"method","name":"with_unbundled_env","children":[],"call":[" with_env "," unbundled_env "]}," Bundler unbundled_env":{"type":"method","name":"unbundled_env","children":[],"call":["env []= ","rubylib join ","rubylib delete ","File  expand_path ","env [] split ","env [] ","env key? ","env [] sub ","k [] == ","k [] ","env delete_if "," original_env ","rubyopt join ","rubyopt delete "," __dir__ "," original_env  []= ","env [] split  join ","env [] split  delete "," original_env  [] split "," original_env  [] "," original_env  key? "," original_env  [] sub "," original_env  delete_if "," original_ original_env  "]}," Bundler VersionRanges ReqR <=>":{"type":"method","name":"<=>","children":[],"call":[" right <=> ","other right "," right ","comp zero? "," left <=> ","other left "," left ","other equal? ","other inclusive "," inclusive ! "," inclusive ","other inclusive ! "," version <=> ","other version "," version ","other version equal? "," version equal? "," left <=>  zero? "," version <=>  zero? "]}," URI RFC3986_Parser convert_to_uri":{"type":"method","name":"convert_to_uri","children":[],"call":[" raise "," parse ","String  try_convert ","uri is_a? ","String  try_convert  is_a? "]}," URI RFC3986_Parser default_regexp":{"type":"method","name":"default_regexp","children":[],"call":[]}," URI RFC3986_Parser inspect":{"type":"method","name":"inspect","children":[],"call":["@@to_s bind_call ","@@to_s bind call ","@@to_s bind "]}," URI RFC3986_Parser join":{"type":"method","name":"join","children":[],"call":["uris inject ","uris []= "," convert_to_uri ","uris [] "]}," URI RFC3986_Parser parse":{"type":"method","name":"parse","children":[],"call":["Generic  new ","scheme_list [] new ","scheme_list [] ","scheme_list include? ","scheme upcase ","Bundler URI  scheme_list "," split ","Bundler URI  for ","Bundler URI  scheme_list  [] new ","Bundler URI  scheme_list  [] ","Bundler URI  scheme_list  include? ","Bundler URI  Bundler URI  scheme_list  "]}," URI RFC3986_Parser split":{"type":"method","name":"split","children":[],"call":[" raise ","uri inspect ","m [] ","fragment freeze ","query freeze ","path-empty freeze ","path-noscheme freeze ","path-absolute freeze ","path-abempty freeze ","port freeze ","host freeze ","userinfo freeze ","RFC3986_relative_ref  match ","opaque << ","path-rootless freeze ","scheme freeze ","RFC3986_URI  match ","uri dump ","uri ascii_only? ","uri to_str ","uri to_str  inspect ","RFC3986_relative_ref  match  [] ","RFC3986_URI  match  [] ","fragRFC3986_relative_ref  match ent freeze ","fragRFC3986_URI  match ent freeze ","m []  freeze ","path-eRFC3986_relative_ref  match pty freeze ","path-eRFC3986_URI  match pty freeze ","path-noscheRFC3986_relative_ref  match e freeze ","path-noscheRFC3986_URI  match e freeze ","path-nom []  freeze ","path-abeRFC3986_relative_ref  match pty freeze ","path-abeRFC3986_URI  match pty freeze ","RFC3986_relative_ref  RFC3986_relative_ref  match atch ","RFC3986_relative_ref  RFC3986_URI  match atch ","m []  << ","scheRFC3986_relative_ref  match e freeze ","scheRFC3986_URI  match e freeze ","RFC3986_URI  RFC3986_relative_ref  match atch ","RFC3986_URI  RFC3986_URI  match atch ","uri duRFC3986_relative_ref  match p ","uri duRFC3986_URI  match p ","uri to_str  dump ","uri to_str  ascii_only? ","uri to_str  to_str "]}," URI RFC3986_Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" default_regexp each_value freeze "," default_regexp each_value "," default_regexp "]}," URI RFC2396_Parser convert_to_uri":{"type":"method","name":"convert_to_uri","children":[],"call":[" raise "," parse ","String  try_convert ","uri is_a? ","String  try_convert  is_a? "]}," URI RFC2396_Parser initialize_regexp":{"type":"method","name":"initialize_regexp","children":[],"call":["ret []= ","Regexp  new ","pattern [] ","\\A\\s* + + ","\\A\\s* + ","\\A\\s*+ + + ","\\A\\s*+ + "]}," URI RFC2396_Parser initialize_pattern":{"type":"method","name":"initialize_pattern","children":[],"call":["ret []= ","opts delete "]}," URI RFC2396_Parser inspect":{"type":"method","name":"inspect","children":[],"call":["@@to_s bind_call ","@@to_s bind call ","@@to_s bind "]}," URI RFC2396_Parser unescape":{"type":"method","name":"unescape","children":[],"call":["(send\n  (back-ref :$&) :[]\n  (int 1)\n  (int 2)) pack force_encoding ","(send\n  (back-ref :$&) :[]\n  (int 1)\n  (int 2)) pack ","$& [] ","str gsub ","enc == ","str encoding ","(send\n  (back-ref :$&) :[]\n  (int 1)\n  (int 2)) pack force_str encoding oding ","str encoding  == ","str str encoding oding "]}," URI RFC2396_Parser escape":{"type":"method","name":"escape","children":[],"call":["(send\n  (lvar :str) :gsub\n  (lvar :unsafe)) force_encoding ","tmp << "," sprintf ","us each_byte ","str gsub ","Regexp  new ","Regexp  quote ","unsafe kind_of? ","(send\n  (lvar :str) :gsub\n  (lvar :Regexp  new )) force_encoding ","Regexp  new  kind_of? "]}," URI RFC2396_Parser make_regexp":{"type":"method","name":"make_regexp","children":[],"call":["@regexp [] ","@pattern [] ","Regexp  union "]}," URI RFC2396_Parser extract":{"type":"method","name":"extract","children":[],"call":["result push ","str scan "," make_regexp "," block_given? "]}," URI RFC2396_Parser join":{"type":"method","name":"join","children":[],"call":["uris inject ","uris []= "," convert_to_uri ","uris [] "]}," URI RFC2396_Parser parse":{"type":"method","name":"parse","children":[],"call":["Generic  new ","Bundler URI  scheme_list [] new ","Bundler URI  scheme_list [] ","scheme upcase ","Bundler URI  scheme_list ","Bundler URI  scheme_list include? "," split ","Bundler URI  for "]}," URI RFC2396_Parser split":{"type":"method","name":"split","children":[],"call":["opaque ! ","path ! "," raise ","rel_segment + ","$~ [] ","@regexp [] ","registry ! ","host ! ","scheme ! ","rel_segment +  ! "]}," URI RFC2396_Parser initialize":{"type":"method","name":"initialize","children":[],"call":["@regexp freeze ","@regexp each_value "," initialize_regexp ","@pattern freeze ","@pattern each_value "," initialize_pattern "," initialize_regexp  freeze "," initialize_regexp  each_value "," initialize_pattern  freeze "," initialize_pattern  each_value "]}," URI MailTo to_mailtext":{"type":"method","name":"to_mailtext","children":[],"call":["head << ","Bundler URI  decode_www_form_component capitalize + + + ","Bundler URI  decode_www_form_component capitalize + + ","Bundler URI  decode_www_form_component ","x [] ","Bundler URI  decode_www_form_component capitalize + ","Bundler URI  decode_www_form_component capitalize ","to << ",",  + ","@headers each ","Bundler URI  decode_www_form_component  << "]}," URI MailTo to_s":{"type":"method","name":"to_s","children":[],"call":["@scheme + + + + ","# + ","@scheme + + + ","? + ","(send\n  (ivar :@headers) :collect) join ","x join ","@headers collect ","@headers size > ","@headers size ","@scheme + + ","@scheme + "]}," URI MailTo headers=":{"type":"method","name":"headers=","children":[],"call":[" set_headers "," check_headers "]}," URI MailTo set_headers":{"type":"method","name":"set_headers","children":[],"call":["@headers << ","x split ","v split each ","v split "]}," URI MailTo check_headers":{"type":"method","name":"check_headers","children":[],"call":[" raise ","HEADER_REGEXP  !~ ","v size == ","v size "]}," URI MailTo to=":{"type":"method","name":"to=","children":[],"call":[" set_to "," check_to "]}," URI MailTo set_to":{"type":"method","name":"set_to","children":[],"call":[]}," URI MailTo check_to":{"type":"method","name":"check_to","children":[],"call":[" raise ","addr dump ","EMAIL_REGEXP  !~ ","addr gsub! ","(str \"\\\\A(?:%\\\\h\\\\h|[!$&-.0-;=@-Z_a-z~])*\\\\z\") !~ ","v split each ","v split ","v size == ","v size "]}," URI MailTo initialize":{"type":"method","name":"initialize","children":[],"call":[" set_headers "," set_to "," headers= "," to= ","arg [] "," raise ","@opaque split ","@opaque ! "]}," URI MailTo build":{"type":"method","name":"build","children":[],"call":[]}," URI LDAP hierarchical?":{"type":"method","name":"hierarchical?","children":[],"call":[]}," URI LDAP extensions=":{"type":"method","name":"extensions=","children":[],"call":[" set_extensions "]}," URI LDAP set_extensions":{"type":"method","name":"set_extensions","children":[],"call":[" build_path_query "]}," URI LDAP extensions":{"type":"method","name":"extensions","children":[],"call":[]}," URI LDAP filter=":{"type":"method","name":"filter=","children":[],"call":[" set_filter "]}," URI LDAP set_filter":{"type":"method","name":"set_filter","children":[],"call":[" build_path_query "]}," URI LDAP filter":{"type":"method","name":"filter","children":[],"call":[]}," URI LDAP scope=":{"type":"method","name":"scope=","children":[],"call":[" set_scope "]}," URI LDAP set_scope":{"type":"method","name":"set_scope","children":[],"call":[" build_path_query "]}," URI LDAP scope":{"type":"method","name":"scope","children":[],"call":[]}," URI LDAP attributes=":{"type":"method","name":"attributes=","children":[],"call":[" set_attributes "]}," URI LDAP set_attributes":{"type":"method","name":"set_attributes","children":[],"call":[" build_path_query "]}," URI LDAP attributes":{"type":"method","name":"attributes","children":[],"call":[]}," URI LDAP dn=":{"type":"method","name":"dn=","children":[],"call":[" set_dn "]}," URI LDAP set_dn":{"type":"method","name":"set_dn","children":[],"call":[" build_path_query "]}," URI LDAP dn":{"type":"method","name":"dn","children":[],"call":[]}," URI LDAP build_path_query":{"type":"method","name":"build_path_query","children":[],"call":["query join ","query unshift ","query size == ","query size ","x ! ","(ivar :@extensions) each ","/ + "]}," URI LDAP parse_query":{"type":"method","name":"parse_query","children":[],"call":["extensions size > ","extensions size ","filter size > ","filter size ","scope size > ","scope size ","attrs size > ","attrs size ","@query split "]}," URI LDAP parse_dn":{"type":"method","name":"parse_dn","children":[],"call":["@path [] "," raise "]}," URI LDAP initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_query "," parse_dn "," raise "]}," URI LDAP build":{"type":"method","name":"build","children":[],"call":[]}," URI HTTP request_uri":{"type":"method","name":"request_uri","children":[],"call":["/ + ","url start_with? ","/ freeze ","@path dup ","@path dup  start_with? "]}," URI HTTP build":{"type":"method","name":"build","children":[],"call":[]}," URI Generic use_proxy?":{"type":"method","name":"use_proxy?","children":[],"call":[]}," URI Generic find_proxy":{"type":"method","name":"find_proxy","children":[],"call":["Bundler URI  parse ","Bundler URI Generic  use_proxy? "," port "," hostname ","env [] ","name upcase ","IPSocket  getaddress ","proxy_uri empty? ","proxy_uri nil? "," warn ","name == ","proxy_uri ! ","env to_hash [] ","env to_hash ","env [] == ","k upcase ","k == ","pairs shift ","pairs length ","(str \"\\\\Ahttp_proxy\\\\z\") !~ ","env reject ","env include? "," scheme downcase + "," scheme downcase "," scheme "," raise "," relative? ","ENV_JAVA  [] ","RUBY_ENGINE  == "," host scheme downcase +  "," scheme downcase +  upcase ","IPSocket  getIPSocket  getaddress ess ","env []  empty? ","env to_hash []  empty? ","env []  nil? ","env to_hash []  nil? "," scheme downcase +  == ","env []  ! ","env to_hash []  ! "]}," URI Generic coerce":{"type":"method","name":"coerce","children":[],"call":[" parser parse "," parser "]}," URI Generic inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," URI Generic select":{"type":"method","name":"select","children":[],"call":[" raise "," class component join "," class component "," class "," send "," component include? "," component ","components collect "," __send__ "]}," URI Generic component_ary":{"type":"method","name":"component_ary","children":[],"call":[" send "," component collect "," component "," __send__ "]}," URI Generic eql?":{"type":"method","name":"eql?","children":[],"call":[" component_ary eql? ","oth component_ary "," component_ary "," parser == ","oth parser "," parser "," class == ","oth class "," class "]}," URI Generic hash":{"type":"method","name":"hash","children":[],"call":[" component_ary hash "," component_ary "]}," URI Generic ==":{"type":"method","name":"==","children":[],"call":[" normalize component_ary == ","oth normalize component_ary ","oth normalize "," normalize component_ary "," normalize "," class == ","oth class "," class "]}," URI Generic to_s":{"type":"method","name":"to_s","children":[],"call":["str << ","@port to_s ","@port != "," default_port "," userinfo ","(str \"file\") include? "," dup "," dup  << ","( dup  \"file\") include? "]}," URI Generic normalize!":{"type":"method","name":"normalize!","children":[],"call":[" set_host "," host downcase "," host "," host != "," set_scheme "," scheme downcase "," scheme "," scheme != "," set_path "," path "]}," URI Generic normalize":{"type":"method","name":"normalize","children":[],"call":["uri normalize! "," dup "," dup  normalize! "]}," URI Generic route_to":{"type":"method","name":"route_to","children":[],"call":[" parser send route_from "," parser send "," parser "," parser __send__ route_from "," parser __send__ "]}," URI Generic route_from":{"type":"method","name":"route_from","children":[],"call":["rel set_path "," query ","rel path == ","rel path "," route_from_path "," path ","oth path ","oth == "," raise ","$! message ","$! class "," route_from0 "]}," URI Generic route_from0":{"type":"method","name":"route_from0","children":[],"call":["rel query= ","rel query == ","oth query ","rel query ","rel set_opaque ","rel opaque == ","oth opaque ","rel opaque ","rel set_path ","rel path == ","oth path ","rel path ","rel set_port ","rel set_host ","rel set_userinfo ","rel port == ","oth default_port ","rel port "," dup "," host nil? "," host "," userinfo nil? "," userinfo ","rel port != ","oth port ","rel host to_s downcase != ","oth host to_s downcase ","oth host to_s ","oth host ","rel host to_s downcase ","rel host to_s ","rel host ","rel userinfo != ","oth userinfo ","rel userinfo ","Bundler URI Generic  new "," parser "," fragment "," query "," opaque "," path "," port "," scheme != ","oth scheme "," scheme "," raise ","oth relative? "," relative? "," parser send "," parser __send__ ","Bundler URI Generic  new  query= ","Bundler URI Generic  new  query == "," parser send  query "," parser __send__  query ","Bundler URI Generic  new  query ","Bundler URI Generic  new  set_opaque ","Bundler URI Generic  new  opaque == "," parser send  opaque "," parser __send__  opaque ","Bundler URI Generic  new  opaque ","Bundler URI Generic  new  set_path ","Bundler URI Generic  new  path == "," parser send  path "," parser __send__  path ","Bundler URI Generic  new  path ","Bundler URI Generic  new  set_port ","Bundler URI Generic  new  set_host ","Bundler URI Generic  new  set_userinfo ","Bundler URI Generic  new  port == "," parser send  default_port "," parser __send__  default_port ","Bundler URI Generic  new  port ","Bundler URI Generic  new  port != "," parser send  port "," parser __send__  port ","Bundler URI Generic  new  host to_s downcase != "," parser send  host to_s downcase "," parser __send__  host to_s downcase "," parser send  host to_s "," parser __send__  host to_s "," parser send  host "," parser __send__  host ","Bundler URI Generic  new  host to_s downcase ","Bundler URI Generic  new  host to_s ","Bundler URI Generic  new  host ","Bundler URI Generic  new  userinfo != "," parser send  userinfo "," parser __send__  userinfo ","Bundler URI Generic  new  userinfo "," parser send  scheme "," parser __send__  scheme ","oth Bundler URI Generic  new ative? "," parser send  relative? "," parser __send__  relative? "," Bundler URI Generic  new ative? "]}," URI Generic route_from_path":{"type":"method","name":"route_from_path","children":[],"call":["../ * + ","../ * ","src_path size ","./ + ","dst_path first include? ","dst_path first ","tmp empty? ","src_path empty? ","dst_path join ","dst_path shift ","src_path shift ","dst_path first == ","src_path first ","dst_path empty? ! ","dst_path empty? ","dst scan ","src scan ","dst dup ","src scan  size ","dst scan  first include? ","dst scan  first ","dst_path join  empty? ","src scan  empty? ","dst scan  join ","dst scan  shift ","src scan  shift ","dst scan  first == ","src scan  first ","dst scan  empty? ! ","dst scan  empty? "]}," URI Generic merge":{"type":"method","name":"merge","children":[],"call":["base fragment= ","rel fragment ","base query= ","rel query ","base set_port ","rel port ","base set_host ","rel host ","base set_userinfo ","rel userinfo ","base set_path ","rel path "," merge_path ","base path ","authority ! ","rel query ! ","rel path empty? ","rel path nil? "," dup "," raise "," absolute? ","rel absolute? "," parser send "," parser "," parser __send__ "," dup  fragment= "," parser send  fragment "," parser __send__  fragment "," dup  query= "," parser send  query "," parser __send__  query "," dup  set_port "," parser send  port "," parser __send__  port "," dup  set_host "," parser send  host "," parser __send__  host "," dup  set_userinfo "," parser send  userinfo "," parser __send__  userinfo "," dup  set_path "," parser send  path "," parser __send__  path "," dup  path "," parser send  query ! "," parser __send__  query ! "," parser send  path empty? "," parser __send__  path empty? "," parser send  path nil? "," parser __send__  path nil? "," parser send  absolute? "," parser __send__  absolute? "]}," URI Generic merge!":{"type":"method","name":"merge!","children":[],"call":[" replace! "," == "," merge "]}," URI Generic merge_path":{"type":"method","name":"merge_path","children":[],"call":["base_path join ","base_path push ","base_path << ","tmp each ","base_path pop ","base_path size > ","base_path size ","x == ","tmp shift ","base_path empty? ","tmp empty? ! ","tmp empty? ","tmp << ","tmp pop ","(or\n  (send\n    (lvar :tmp) :empty?)\n  (send\n    (send\n      (lvar :tmp) :last) :==\n    (str \"..\"))) ! ","tmp last == ","tmp last ","rel_path each ","rel_path delete ","rel_path push ","rel_path last == ","rel_path last ","rel_path shift ","base_path clear ","first empty? ","rel_path first ","base_path slice! ","i - ","base_path index ","base_path last == ","base_path last "," split_path ","base_path jobase_path index n "," split_path  join "," split_path  push "," split_path  << "," split_path  pop ","base_path sbase_path index ze > "," split_path  size > ","base_path sbase_path index ze "," split_path  size ","tmp shift  == ","tmp shbase_path index ft "," split_path  empty? "," split_path  each "," split_path  delete "," split_path  last == "," split_path  last ","rel_path shbase_path index ft "," split_path  shift "," split_path  clear ","rel_path first  empty? ","fbase_path index rst empty? ","rel_path rel_path first  ","rel_path fbase_path index rst "," split_path  first ","base_path slbase_path index ce! "," split_path  slice! ","base_path index  - ","base_path indetmp shift  ","base_path base_path index ndex "," split_path  index "," splbase_path index t_path "]}," URI Generic split_path":{"type":"method","name":"split_path","children":[],"call":["path split "]}," URI Generic relative?":{"type":"method","name":"relative?","children":[],"call":[" absolute? ! "," absolute? "]}," URI Generic absolute?":{"type":"method","name":"absolute?","children":[],"call":[]}," URI Generic hierarchical?":{"type":"method","name":"hierarchical?","children":[],"call":[]}," URI Generic fragment=":{"type":"method","name":"fragment=","children":[],"call":["v force_encoding ","%%%02X % ","$& ord ","v gsub! ","v delete! ","v encode! ","x dup ","x equal? ","v to_str ","x dup  force_encoding ","x dup  gsub! ","x dup  delete! ","x dup  encode! ","v to_str  dup ","v to_str  equal? ","x dup  to_str "]}," URI Generic opaque=":{"type":"method","name":"opaque=","children":[],"call":[" set_opaque "," check_opaque "]}," URI Generic set_opaque":{"type":"method","name":"set_opaque","children":[],"call":[]}," URI Generic check_opaque":{"type":"method","name":"check_opaque","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser "]}," URI Generic query=":{"type":"method","name":"query=","children":[],"call":["v force_encoding ","%%%02X % ","$& ord ","v gsub! ","(str \"(?!%\\\\h\\\\h|[!$-&(-;=?-_a-~]).\") freeze "," raise ","(str \"(%\\\\H\\\\H)\") match ","v delete! ","v encode! ","x dup ","x equal? ","v to_str ","x dup  force_encoding ","x dup  gsub! ","x dup  delete! ","x dup  encode! ","v to_str  dup ","v to_str  equal? ","x dup  to_str "]}," URI Generic path=":{"type":"method","name":"path=","children":[],"call":[" set_path "," check_path "]}," URI Generic set_path":{"type":"method","name":"set_path","children":[],"call":[]}," URI Generic check_path":{"type":"method","name":"check_path","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser ","v != ","@scheme != "]}," URI Generic registry=":{"type":"method","name":"registry=","children":[],"call":[" raise "]}," URI Generic set_registry":{"type":"method","name":"set_registry","children":[],"call":[" raise "]}," URI Generic check_registry":{"type":"method","name":"check_registry","children":[],"call":[" raise "]}," URI Generic port=":{"type":"method","name":"port=","children":[],"call":[" port "," set_port "," check_port "]}," URI Generic set_port":{"type":"method","name":"set_port","children":[],"call":["v to_i ","v empty? ","v kind_of? ","v ! ","v to_i  to_i ","v to_i  empty? ","v to_i  kind_of? ","v to_i  ! "]}," URI Generic check_port":{"type":"method","name":"check_port","children":[],"call":[" raise ","v inspect "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser ","v kind_of? ! ","v kind_of? "]}," URI Generic hostname=":{"type":"method","name":"hostname=","children":[],"call":[" host= ","(str \"\\\\A\\\\[.*\\\\]\\\\z\") !~ ","(and\n  (csend\n    (lvar :v) :start_with?\n    (str \"[\"))\n  (csend\n    (lvar :v) :end_with?\n    (str \"]\"))) ! "]}," URI Generic hostname":{"type":"method","name":"hostname","children":[],"call":[" host ","v [] ","v end_with? "," host  [] "," host  end_with? "]}," URI Generic host=":{"type":"method","name":"host=","children":[],"call":[" set_host "," check_host "]}," URI Generic set_host":{"type":"method","name":"set_host","children":[],"call":[]}," URI Generic check_host":{"type":"method","name":"check_host","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser "]}," URI Generic password":{"type":"method","name":"password","children":[],"call":[]}," URI Generic user":{"type":"method","name":"user","children":[],"call":[]}," URI Generic userinfo":{"type":"method","name":"userinfo","children":[],"call":["@user + + ","@user + ","@password nil? ","@user nil? "]}," URI Generic escape_userpass":{"type":"method","name":"escape_userpass","children":[],"call":[" parser escape "," parser "]}," URI Generic split_userinfo":{"type":"method","name":"split_userinfo","children":[],"call":["ui split "]}," URI Generic set_password":{"type":"method","name":"set_password","children":[],"call":[]}," URI Generic set_user":{"type":"method","name":"set_user","children":[],"call":[" set_userinfo "]}," URI Generic set_userinfo":{"type":"method","name":"set_userinfo","children":[],"call":[" split_userinfo "]}," URI Generic password=":{"type":"method","name":"password=","children":[],"call":[" set_password "," check_password "]}," URI Generic user=":{"type":"method","name":"user=","children":[],"call":[" set_user "," check_user "]}," URI Generic userinfo=":{"type":"method","name":"userinfo=","children":[],"call":[" set_userinfo "," check_userinfo ","userinfo nil? "]}," URI Generic check_password":{"type":"method","name":"check_password","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser ","user ! "]}," URI Generic check_user":{"type":"method","name":"check_user","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser "]}," URI Generic check_userinfo":{"type":"method","name":"check_userinfo","children":[],"call":[" check_password "," check_user "," split_userinfo ","password ! "]}," URI Generic scheme=":{"type":"method","name":"scheme=","children":[],"call":[" set_scheme "," check_scheme "]}," URI Generic set_scheme":{"type":"method","name":"set_scheme","children":[],"call":[]}," URI Generic check_scheme":{"type":"method","name":"check_scheme","children":[],"call":[" raise "," parser regexp [] !~ "," parser regexp [] "," parser regexp "," parser "]}," URI Generic component":{"type":"method","name":"component","children":[],"call":[" class component "," class "]}," URI Generic replace!":{"type":"method","name":"replace!","children":[],"call":[" __send__ ","oth __send__ "," component each "," component "," raise "," class "," class != ","oth class "]}," URI Generic parser":{"type":"method","name":"parser","children":[],"call":["@parser ! ","(ivar :@parser) ! "]}," URI Generic registry":{"type":"method","name":"registry","children":[],"call":[]}," URI Generic initialize":{"type":"method","name":"initialize","children":[],"call":[" set_port "," default_port ","@port ! "," set_path ","@opaque ! ","@path ! "," raise "," fragment= "," set_opaque "," query= "," set_host "," set_userinfo "," set_scheme "," opaque= "," path= "," port= "," hostname= "," userinfo= "," scheme= ","parser == "]}," URI Generic build":{"type":"method","name":"build","children":[],"call":[]}," URI Generic build2":{"type":"method","name":"build2","children":[],"call":[]}," URI Generic use_registry":{"type":"method","name":"use_registry","children":[],"call":[]}," URI Generic default_port":{"type":"method","name":"default_port","children":[],"call":[" class default_port "," class "]}," URI FTP to_s":{"type":"method","name":"to_s","children":[],"call":["@path + + ","@path + ","@path + +  + + ","@path + +  + "]}," URI FTP set_path":{"type":"method","name":"set_path","children":[],"call":["/ + ","v sub "]}," URI FTP path":{"type":"method","name":"path","children":[],"call":["@path sub sub ","@path sub "]}," URI FTP merge":{"type":"method","name":"merge","children":[],"call":["tmp set_typecode ","oth typecode "," != "]}," URI FTP typecode=":{"type":"method","name":"typecode=","children":[],"call":[" set_typecode "," check_typecode "]}," URI FTP set_typecode":{"type":"method","name":"set_typecode","children":[],"call":[]}," URI FTP check_typecode":{"type":"method","name":"check_typecode","children":[],"call":[" raise ","TYPECODE  join ","TYPECODE  include? "]}," URI FTP initialize":{"type":"method","name":"initialize","children":[],"call":[" set_typecode "," typecode= ","@path [] ","tmp - ","tmp + ","TYPECODE_PREFIX  size ","@path index ","path sub! ","path sub "," raise "," set_@path []  "," @path [] = ","@path []  [] ","@path sub  [] ","@path index  - ","@path index  + ","@path []  index ","@path sub  index ","path sub  sub! ","path sub  sub "]}," URI FTP build":{"type":"method","name":"build","children":[],"call":[]}," URI FTP new2":{"type":"method","name":"new2","children":[],"call":[]}," URI File set_password":{"type":"method","name":"set_password","children":[],"call":[]}," URI File set_user":{"type":"method","name":"set_user","children":[],"call":[]}," URI File set_userinfo":{"type":"method","name":"set_userinfo","children":[],"call":[]}," URI File check_password":{"type":"method","name":"check_password","children":[],"call":[" raise "]}," URI File check_user":{"type":"method","name":"check_user","children":[],"call":[" raise "]}," URI File check_userinfo":{"type":"method","name":"check_userinfo","children":[],"call":[" raise "]}," URI File set_port":{"type":"method","name":"set_port","children":[],"call":[]}," URI File set_host":{"type":"method","name":"set_host","children":[],"call":["v == ","v nil? "]}," URI File build":{"type":"method","name":"build","children":[],"call":[]}," Bundler URI":{"type":"method","name":"URI","children":[],"call":[" raise ","Bundler URI  parse ","String  try_convert ","uri is_a? ","String  try_convert  is_a? "]}," URI get_encoding":{"type":"method","name":"get_encoding","children":[],"call":[]}," URI decode_www_form":{"type":"method","name":"decode_www_form","children":[],"call":[]}," URI encode_www_form":{"type":"method","name":"encode_www_form","children":[],"call":[]}," URI decode_www_form_component":{"type":"method","name":"decode_www_form_component","children":[],"call":[]}," URI encode_www_form_component":{"type":"method","name":"encode_www_form_component","children":[],"call":[]}," URI regexp":{"type":"method","name":"regexp","children":[],"call":[]}," URI extract":{"type":"method","name":"extract","children":[],"call":[]}," URI join":{"type":"method","name":"join","children":[],"call":[]}," URI parse":{"type":"method","name":"parse","children":[],"call":[]}," URI split":{"type":"method","name":"split","children":[],"call":[]}," URI scheme_list":{"type":"method","name":"scheme_list","children":[],"call":[]}," URI Escape unescape":{"type":"method","name":"unescape","children":[],"call":["DEFAULT_PARSER  unescape "," warn "]}," URI Escape escape":{"type":"method","name":"escape","children":[],"call":["DEFAULT_PARSER  escape "," warn "]}," URI Util make_components_hash":{"type":"method","name":"make_components_hash","children":[],"call":["tmp []= ","klass to_s sub downcase ","klass to_s sub ","klass to_s "," raise ","klass component [] join ","klass component [] ","klass component ","value clone ","array_hash each ","array_hash kind_of? ","array_hash [] ","i + ","array_hash [] clone ","klass component [] each_index ","array_hash size == ","klass component size - ","klass component size ","array_hash size "]}," Thor deprecation_warning":{"type":"method","name":"deprecation_warning","children":[],"call":[" warn ","(str \"Deprecation warning: \") + ","ENV  [] "]}," Thor Util escape_html":{"type":"method","name":"escape_html","children":[],"call":["CGI  escapeHTML "]}," Thor Shell Color are_colors_disabled?":{"type":"method","name":"are_colors_disabled?","children":[],"call":["ENV  [] nil? ! ","ENV  [] nil? ","ENV  [] "]}," Thor Shell Basic answer_match":{"type":"method","name":"answer_match","children":[],"call":["possibility == ","possibilities detect ","possibility downcase == ","answer downcase ","possibility downcase "]}," Thor Options assign_result!":{"type":"method","name":"assign_result!","children":[],"call":["@assigns []= ","option human_name ","(or-asgn\n  (send\n    (ivar :@assigns) :[]\n    (send\n      (lvar :option) :human_name))\n  (array)) << ","@assigns [] ","option repeatable ","(or-asgn\n  (send\n    (ivar :@assigns) :[]\n    (send\n      (lvar :option) :human_name))\n  (hash)) merge! ","option type == ","option type "]}," Thor NestedContext pop":{"type":"method","name":"pop","children":[],"call":[]}," Thor NestedContext push":{"type":"method","name":"push","children":[],"call":[]}," Thor NestedContext entered?":{"type":"method","name":"entered?","children":[],"call":["@depth > "]}," Thor NestedContext enter":{"type":"method","name":"enter","children":[],"call":[" pop "," push "]}," Thor NestedContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thor Command required_arguments_for":{"type":"method","name":"required_arguments_for","children":[],"call":["usage to_s ","match << << ","klass arguments map compact join ","klass arguments map compact ","klass arguments map ","klass arguments ","match << ","usage to_s gsub "," name ","klass arguments empty? ! ","klass arguments empty? "]}," Thor Base ClassMethods no_commands?":{"type":"method","name":"no_commands?","children":[],"call":[" no_commands_context entered? "," no_commands_context "]}," Thor Base ClassMethods no_commands_context":{"type":"method","name":"no_commands_context","children":[],"call":["NestedContext  new "]}," Thor Base ClassMethods allow_incompatible_default_type!":{"type":"method","name":"allow_incompatible_default_type!","children":[],"call":[]}," Persistent verify_depth=":{"type":"method","name":"verify_depth=","children":[],"call":[" reconnect_ssl "]}," Persistent max_version=":{"type":"method","name":"max_version=","children":[],"call":[" reconnect_ssl "]}," Persistent min_version=":{"type":"method","name":"min_version=","children":[],"call":[" reconnect_ssl "]}," Persistent ssl_timeout=":{"type":"method","name":"ssl_timeout=","children":[],"call":[" reconnect_ssl "]}," Persistent ciphers=":{"type":"method","name":"ciphers=","children":[],"call":[" reconnect_ssl "]}," Persistent ca_path=":{"type":"method","name":"ca_path=","children":[],"call":[" reconnect_ssl "]}," TimedStackMulti try_create":{"type":"method","name":"try_create","children":[],"call":["@create_block call "," lru_update ","@created < ","@ques [] pop ","@ques [] ","@lru delete ","@lru first ","@enqueued >= ","@created >= ","options [] "]}," TimedStackMulti store_connection":{"type":"method","name":"store_connection","children":[],"call":["@ques [] push ","@ques [] ","options [] "]}," TimedStackMulti shutdown_connections":{"type":"method","name":"shutdown_connections","children":[],"call":["@ques each_key "]}," TimedStackMulti lru_update":{"type":"method","name":"lru_update","children":[],"call":["@lru []= ","@lru delete "]}," TimedStackMulti fetch_connection":{"type":"method","name":"fetch_connection","children":[],"call":["@ques [] pop ","@ques [] "," lru_update ","options [] "]}," TimedStackMulti connection_stored?":{"type":"method","name":"connection_stored?","children":[],"call":["@ques [] empty? ! ","@ques [] empty? ","@ques [] ","options [] "]}," TimedStackMulti length":{"type":"method","name":"length","children":[],"call":["@max - + ","@max - "]}," TimedStackMulti empty?":{"type":"method","name":"empty?","children":[],"call":["(send\n  (ivar :@created) :-\n  (ivar :@enqueued)) >= ","@created - "]}," TimedStackMulti initialize":{"type":"method","name":"initialize","children":[],"call":[" object_id "," class hash_of_arrays "," class "]}," TimedStackMulti hash_of_arrays":{"type":"method","name":"hash_of_arrays","children":[],"call":[]}," Pool shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  current []= ","Thread  current "]}," Pool checkout":{"type":"method","name":"checkout","children":[],"call":["stack push ","stack last ","@available pop ","stack empty? ","stacks [] ","Thread  current [] ","Thread  current "]}," Pool checkin":{"type":"method","name":"checkin","children":[],"call":["Thread  current []= ","Thread  current ","Thread  current [] empty? ","Thread  current [] ","Thread  current [] delete ","@available push ","stack empty? ","stack pop "," raise ","Thread  current [] [] "]}," Pool initialize":{"type":"method","name":"initialize","children":[],"call":["@available object_id ","Bundler Persistent Net HTTP Persistent TimedStackMulti  new ","Bundler Persistent Net HTTP Persistent TimedStackMulti  new  object_id "]}," Connection ressl":{"type":"method","name":"ressl","children":[],"call":[" finish "]}," Connection reset":{"type":"method","name":"reset","children":[],"call":[]}," Connection finish":{"type":"method","name":"finish","children":[],"call":[" reset ","@http finish "]}," Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","http_class new "]}," Molinillo DependencyGraph Vertex _recursive_successors":{"type":"method","name":"_recursive_successors","children":[],"call":["vertex _recursive_successors ","vertices add? ","edge destination "," outgoing_edges each "," outgoing_edges ","edge destination  _recursive_successors "]}," Molinillo DependencyGraph Vertex _recursive_predecessors":{"type":"method","name":"_recursive_predecessors","children":[],"call":["vertex _recursive_predecessors ","vertices add? ","edge origin "," incoming_edges each "," incoming_edges ","edge origin  _recursive_predecessors "]}," ConnectionPool Wrapper method_missing":{"type":"method","name":"method_missing","children":[],"call":["connection send "," with "]}," ConnectionPool Wrapper respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["c respond_to? "," with ","METHODS  include? "]}," ConnectionPool Wrapper pool_available":{"type":"method","name":"pool_available","children":[],"call":["@pool available "]}," ConnectionPool Wrapper pool_size":{"type":"method","name":"pool_size","children":[],"call":["@pool size "]}," ConnectionPool Wrapper pool_shutdown":{"type":"method","name":"pool_shutdown","children":[],"call":["@pool shutdown "]}," ConnectionPool Wrapper with":{"type":"method","name":"with","children":[],"call":["@pool with "]}," ConnectionPool Wrapper initialize":{"type":"method","name":"initialize","children":[],"call":[" Bundler ConnectionPool  new ","options fetch "]}," ConnectionPool available":{"type":"method","name":"available","children":[],"call":["@available length "]}," ConnectionPool size":{"type":"method","name":"size","children":[],"call":[]}," ConnectionPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["@available shutdown "]}," ConnectionPool checkin":{"type":"method","name":"checkin","children":[],"call":[" raise "," Thread  current [] "," Thread  current "," Thread  current []= ","@available push "," Thread  current [] == "]}," ConnectionPool checkout":{"type":"method","name":"checkout","children":[],"call":[" Thread  current []= ","@available pop ","options [] "," Thread  current "," Thread  current [] "]}," ConnectionPool with":{"type":"method","name":"with","children":[],"call":[" checkin "," checkout ","Thread  handle_interrupt "]}," ConnectionPool initialize":{"type":"method","name":"initialize","children":[],"call":["@available object_id ","TimedStack  new ","options fetch ","DEFAULTS  merge "," raise ","Time  now to_f ","Time  now ","Mutex  new "," Integer ","TimedStack  new  object_id ","DEFAULTS  merge  fetch "]}," ConnectionPool wrap":{"type":"method","name":"wrap","children":[],"call":[]}," TimedStack try_create":{"type":"method","name":"try_create","children":[],"call":["@create_block call ","@created == "]}," TimedStack store_connection":{"type":"method","name":"store_connection","children":[],"call":["@que push "]}," TimedStack shutdown_connections":{"type":"method","name":"shutdown_connections","children":[],"call":["@shutdown_block call "," fetch_connection "," connection_stored? "," fetch_ fetch_connection ection ","  fetch_connection ection_stored? "]}," TimedStack fetch_connection":{"type":"method","name":"fetch_connection","children":[],"call":["@que pop "]}," TimedStack connection_stored?":{"type":"method","name":"connection_stored?","children":[],"call":["@que empty? ! ","@que empty? "]}," TimedStack length":{"type":"method","name":"length","children":[],"call":["@max - + ","@que length ","@max - "]}," TimedStack empty?":{"type":"method","name":"empty?","children":[],"call":["(send\n  (ivar :@created) :-\n  (send\n    (ivar :@que) :length)) >= ","@created - ","@que length "]}," TimedStack shutdown":{"type":"method","name":"shutdown","children":[],"call":[" shutdown_connections ","@resource broadcast ","@mutex synchronize "," raise "," block_given? "]}," TimedStack pop":{"type":"method","name":"pop","children":[],"call":["@resource wait "," raise ","to_wait <= ","deadline - ","Bundler ConnectionPool  monotonic_time "," try_create "," fetch_connection "," connection_stored? "," loop ","@mutex synchronize ","Bundler ConnectionPool  monotonic_time + ","options fetch ","Hash  === "," current_time "," current_time + "," length ","deadline -  <= ","Bundler ConnectionPool  monotonic_time +  - "," current_time +  - "," fetch_ try_create  ","  try_create _stored? "]}," TimedStack push":{"type":"method","name":"push","children":[],"call":["@resource broadcast "," store_connection ","@shutdown_block call ","@mutex synchronize "]}," TimedStack initialize":{"type":"method","name":"initialize","children":[],"call":["ConditionVariable  new ","Mutex  new ","Thread ConditionVariable  new ","Thread Mutex  new "]}," ConnectionPool monotonic_time":{"type":"method","name":"monotonic_time","children":[],"call":["GLOBAL_MONOTONIC_CLOCK  get_time "]}," ConnectionPool get_time":{"type":"method","name":"get_time","children":[],"call":["@last_time < ","Time  now to_f ","Time  now ","@mutex synchronize "," java lang System nanoTime / "," java lang System nanoTime "," java lang System "," java lang "," java ","Process  clock_gettime ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Bundler Source Git override_for":{"type":"method","name":"override_for","children":[],"call":["Bundler  settings local_overrides key ","Bundler  settings local_overrides ","Bundler  settings "]}," Bundler Source Git cached_revision_checked_out?":{"type":"method","name":"cached_revision_checked_out?","children":[],"call":[" install_path exist? "," install_path "," cached_revision == "," revision "," cached_revision "]}," Bundler Source Git GitProxy capture_and_ignore_stderr":{"type":"method","name":"capture_and_ignore_stderr","children":[],"call":["Open3  capture3 "," require "]}," Bundler RubygemsIntegration use_gemdeps":{"type":"method","name":"use_gemdeps","children":[],"call":["Gemdeps  new ","runtime requested_specs map sort_by ","runtime requested_specs map ","runtime requested_specs ","Bundler  setup "," require_relative ","File  expand_path ","ENV  [] ","Bundler  ui= ","Bundler  setup  requested_specs map sort_by ","Bundler  setup  requested_specs map ","Bundler  setup  requested_specs "]}," Bundler RubygemsIntegration default_stubs":{"type":"method","name":"default_stubs","children":[],"call":["Gem Specification  send ","Gem Specification  default_stubs "]}," Bundler RubygemsIntegration find_name":{"type":"method","name":"find_name","children":[],"call":["Gem Specification  stubs_for map ","Gem Specification  stubs_for "]}," Bundler RubygemsIntegration backport_ext_builder_monitor":{"type":"method","name":"backport_ext_builder_monitor","children":[],"call":[" const_set "," const_get "," remove_const "," const_defined? ","Gem Ext Builder  class_eval "," require ","Gem  module_eval ","595 + ","603 + ","605 + ","576 + ","560 + ","572 + ","575 + ","570 + ","571 + ","573 + ","590 + ","557 + ","545 + ","527 + ","519 + ","523 + "]}," Bundler RubygemsIntegration all_specs":{"type":"method","name":"all_specs","children":[],"call":["StubSpecification  from_stub ","Gem Specification  stubs map ","Gem Specification  stubs "," require_relative "]}," Bundler RubygemsIntegration gem_remote_fetcher":{"type":"method","name":"gem_remote_fetcher","children":[],"call":["Gem RemoteFetcher  new ","Resolv DNS  new "," configuration [] "," configuration "," require ","Bundler GemRemoteFetcher  new ","Gem  configuration [] ","Gem  configuration "]}," Bundler RubygemsIntegration stub_rubygems":{"type":"method","name":"stub_rubygems","children":[],"call":[" redefine_method ","Gem Specification  all= ","Gem  post_reset "]}," Bundler RubygemsIntegration correct_for_windows_path":{"type":"method","name":"correct_for_windows_path","children":[],"call":["path [] ","path [] chr == ","path [] chr ","path [] chr =~ ","Gem Util  correct_for_windows_path ","Gem Util  respond_to? "," require "]}," Bundler RubygemsIntegration add_to_load_path":{"type":"method","name":"add_to_load_path","children":[],"call":["$LOAD_PATH unshift ","$LOAD_PATH insert ","Gem  load_path_insert_index ","Gem  add_to_load_path ","Gem  respond_to? ","Gem  load_path_Gem  load_path_insert_index  "]}," Bundler Resolver validate_resolved_specs!":{"type":"method","name":"validate_resolved_specs!","children":[],"call":["Bundler  ui warn ","Bundler  ui "," raise ","msg join ","msg << ","msg concat ","(send\n  (lvar :sources) :map) sort ","sources map ","Bundler  feature_flag disable_multisource? ","Bundler  feature_flag ","sources size <= ","sources size ","sources uniq! ","s specs [] empty? ","s specs [] ","s specs ","sources reject! ","sources delete_at ","sources index ","@source_requirements [] ","sources compact! "," relevant_sources_for_vertex ","v name ","resolved_specs each ","sources any? ","s specs search empty? ","s specs search ","msg join  join ","msg join  << ","msg join  concat ","(send\n  (lvar : relevant_sources_for_vertex ) :map) sort "," relevant_sources_for_vertex  map "," relevant_sources_for_vertex  size <= "," relevant_sources_for_vertex  size "," relevant_sources_for_vertex  uniq! "," relevant_sources_for_vertex  reject! "," relevant_sources_for_vertex  delete_at "," relevant_sources_for_vertex  index "," relevant_sources_for_vertex  compact! "," relevant_ relevant_sources_for_vertex _for_vertex ","v v name  "," relevant_sources_for_vertex  any? "]}," Bundler Plugin list":{"type":"method","name":"list","children":[],"call":["Bundler  ui info ","Bundler  ui ","output << "," index plugin_commands each "," index plugin_commands "," index ","installed_plugins each ","String  new ","installed_plugins any? "," index installed_plugins ","Bundler Plugin  list ","String  new  << "," index installed_plugins  each "," index installed_plugins  any? "," index  index installed_plugins  "]}," Bundler Plugin Installer install_all_sources":{"type":"method","name":"install_all_sources","children":[],"call":[" install_definition ","Definition  new ","Dependency  new ","names map ","source_list add_rubygems_source ","source_list add_git_source ","SourceList  new ","definition allow_multisource! ","source_list global_rubygems_source= ","source_list add_global_rubygems_remote "," Array each "," Array ","Bundler  configure_gem_home_and_path ","Plugin  root ","Bundler  settings temporary ","Bundler  settings "," install_Definition  new  ","SourceList  new  add_rubygems_source ","SourceList  new  add_git_source ","Definition  new  allow_multisource! ","SourceList  new  global_rubygems_source= ","SourceList  new  add_global_rubygems_remote "]}," Bundler Plugin Installer install_local_git":{"type":"method","name":"install_local_git","children":[],"call":[" install_all_sources ","options [] ","options []= ","options delete "]}," Bundler Plugin Installer check_sources_consistency!":{"type":"method","name":"check_sources_consistency!","children":[],"call":[" raise ","options key? "]}," Bundler Plugin Index plugin_commands":{"type":"method","name":"plugin_commands","children":[],"call":["(send\n  (ivar :@commands) :find_all) map ","n == ","@commands find_all "]}," Bundler Plugin Index installed_plugins":{"type":"method","name":"installed_plugins","children":[],"call":["@plugin_paths keys "]}," Bundler GemHelper gem_command":{"type":"method","name":"gem_command","children":[],"call":["ENV  [] "]}," Bundler Fetcher CompactIndex serial_compact_index_client":{"type":"method","name":"serial_compact_index_client","children":[],"call":[" compact_index_client "," compact_index_client sequential_execution_mode! "]}," Bundler Fetcher CompactIndex parallel_compact_index_client":{"type":"method","name":"parallel_compact_index_client","children":[],"call":[" compact_index_client "," compact_index_client execution_mode= ","worker deq ","inputs map ","worker enq ","inputs each "," bundle_worker ","blk call "," lambda "," bundle_worker  deq "," bundle_worker  enq "," bundle_ bundle_worker  "]}," Bundler Dependency expanded_platforms":{"type":"method","name":"expanded_platforms","children":[],"call":["PLATFORM_MAP  [] ","@platforms map ","(send\n  (ivar :@platforms) :map) compact uniq ","(send\n  (ivar :@platforms) :map) compact ","(send\n  (ivar :@platforms) :map) compact flatten uniq ","(send\n  (ivar :@platforms) :map) compact flatten "]}," Bundler Definition current_platforms":{"type":"method","name":"current_platforms","children":[],"call":["platforms << "," generic ","Bundler  feature_flag specific_platform? ","Bundler  feature_flag "," tap ","Bundler  local_platform ","(send nil :local_platform) uniq "," generic_local_platform "," local_platform "]}," Bundler CompactIndexClient sequentially":{"type":"method","name":"sequentially","children":[],"call":["inputs map "," lambda "]}," Bundler CompactIndexClient sequential_execution_mode!":{"type":"method","name":"sequential_execution_mode!","children":[],"call":[" execution_mode= "," sequentially "]}," Bundler CompactIndexClient execution_mode":{"type":"method","name":"execution_mode","children":[],"call":[" sequentially "]}," Bundler CompactIndexClient execution_mode=":{"type":"method","name":"execution_mode=","children":[],"call":["Set  new ","Bundler CompactIndexClient  debug "]}," Bundler CLI remembered_flag_deprecation":{"type":"method","name":"remembered_flag_deprecation","children":[],"call":["Bundler SharedHelpers  major_deprecation ","value join to_s ","value join ","option type == ","option type "," options [] "," options ","flag_name == ","ARGV  find ","option switch_name "," current_command options [] "," current_command options "," current_command "," flag_deprecation ","value join to_s  join to_s "," options []  join to_s ","value join to_s  join "," options []  join "," current_command options []  type == "," current_command options []  type ","  current_command options [] s [] ","  current_command options [] s ","option switch_name  == "," current_command options []  switch_name "," current_command  current_command options [] s [] "," current_command  current_command options [] s "]}," Bundler CLI aliases_for":{"type":"method","name":"aliases_for","children":[],"call":[]}," Bundler CLI all_aliases":{"type":"method","name":"all_aliases","children":[],"call":[]}," Bundler Outdated check_for_deployment_mode!":{"type":"method","name":"check_for_deployment_mode!","children":[],"call":[" raise ","Bundler  default_gemfile ","Bundler  settings locations keys & any? ","Bundler  settings locations keys & ","Bundler  settings locations keys ","Bundler  settings locations ","Bundler  settings ","Bundler  settings locations [] ","Bundler  frozen_bundle? "]}," Bundler Outdated print_gems":{"type":"method","name":"print_gems","children":[],"call":[" print_gem ","gem [] ","gems_list each "]}," Bundler Outdated nothing_outdated_message":{"type":"method","name":"nothing_outdated_message","children":[],"call":["(send\n  (send nil :filter_options_patch) :map) join ","o sub "," filter_options_patch map "," filter_options_patch "," filter_options_patch any? "]}," Bundler Outdated header_group_message":{"type":"method","name":"header_group_message","children":[],"call":[" groups_text "]}," Bundler Outdated header_outdated_message":{"type":"method","name":"header_outdated_message","children":[],"call":[" options [] "," options "]}," Bundler Outdated groups_text":{"type":"method","name":"groups_text","children":[],"call":["groups split size > ","groups split size ","groups split "]}," Bundler Exec with_verbose_rubygems":{"type":"method","name":"with_verbose_rubygems","children":[],"call":["Gem DefaultUserInteraction  ui= ","Gem DefaultUserInteraction  ui "]}," Bundler Config Base validate_scope!":{"type":"method","name":"validate_scope!","children":[],"call":[" raise ","scopes join ","scopes first ","scopes size "," options [] "," options ","(str \"global\") select "," inside_app? "]}," Bundler Config Base warn_unused_scope":{"type":"method","name":"warn_unused_scope","children":[],"call":["Bundler  ui warn ","Bundler  ui "," options [] "," options "," explicit_scope? "]}," Bundler Config Base explicit_scope?":{"type":"method","name":"explicit_scope?","children":[],"call":[]}," Bundler Config Base show_pretty_values_for":{"type":"method","name":"show_pretty_values_for","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  settings pretty_values_for each ","Bundler  settings pretty_values_for ","Bundler  settings "," thor with_padding "," thor "]}," Bundler Config Base message":{"type":"method","name":"message","children":[],"call":["locations [] inspect ","locations [] "," name ","locations [] != "," value ","locations [] nil? ! ","locations [] nil? "," scope == "," scope "," new_value ","@options [] ","Bundler  settings locations ","Bundler  settings ","Bundler  settings locations  [] inspect ","Bundler  settings locations  [] ","Bundler  settings locations  [] != ","Bundler  settings locations  [] nil? ! ","Bundler  settings locations  [] nil? ","Bundler  settings Bundler  settings locations  "]}," Bundler Config Base new_value":{"type":"method","name":"new_value","children":[],"call":[" value ","pathname expand_path to_s ","pathname expand_path ","pathname directory? "," name start_with? "," name ","Pathname  new ","Pathname  new  expand_path to_s ","Pathname  new  expand_path ","Pathname  new  directory? "]}," Bundler Config Base confirm":{"type":"method","name":"confirm","children":[],"call":[" show_pretty_values_for ","Bundler  ui confirm ","Bundler  ui "]}," Bundler Config Base confirm_all":{"type":"method","name":"confirm_all","children":[],"call":["Bundler  ui confirm ","Bundler  ui "," show_pretty_values_for ","Bundler  settings all each ","Bundler  settings all ","Bundler  settings ","Bundler  ui info ","Bundler  settings [] "," thor with_padding "," thor ","@options [] "," show_pretty_Bundler  settings [] ues_for "]}," Bundler Config Base run":{"type":"method","name":"run","children":[],"call":["Bundler  settings send "," new_value "," name "," scope ","Bundler  settings ","Bundler  ui info "," message ","Bundler  ui "," confirm ","Bundler  settings [] "," options [] "," options "," warn_unused_scope "," value nil? "," value ","Bundler  settings set_global "," scope != "," explicit_scope? ! "," explicit_scope? ","Bundler  settings set_local "," confirm_all "," new_Bundler  settings []  "," Bundler  settings []  nil? "," Bundler  settings []  "]}," Bundler Config Base initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_scope! ","value join ","value empty? "," Array "," Array  join "," Array  empty? "]}," Bundler Config unset":{"type":"method","name":"unset","children":[],"call":["Base  new run ","Base  new "," options "," options []= "]}," Bundler Config set":{"type":"method","name":"set","children":[],"call":["Base  new run ","Base  new ","value_ unshift "," options "]}," Bundler Config get":{"type":"method","name":"get","children":[],"call":["Base  new run ","Base  new "," options "]}," Bundler Config list":{"type":"method","name":"list","children":[],"call":["Base  new run ","Base  new "," options "]}," Bundler Config base":{"type":"method","name":"base","children":[],"call":["Base  new run ","Base  new "," options ","SharedHelpers  major_deprecation ","new_args join ","ARGV  [] ","ARGV  size == ","ARGV  size ","ARGV  include? ","arg == ","ARGV  map "]}," Bundler Config scope_options":{"type":"method","name":"scope_options","children":[],"call":[]}," Bundler Cache install":{"type":"method","name":"install","children":[],"call":["Bundler CLI Install  new run ","Bundler CLI Install  new ","options []= ","Bundler  settings [] ","Bundler  settings "," options dup "," options "," require_relative "," options dup  []= ","  options dup  dup ","  options dup  "]}," Bundler Add validate_options!":{"type":"method","name":"validate_options!","children":[],"call":[" raise ","Gem Requirement PATTERN  =~ ","v to_s "," version to_a each "," version to_a "," version "," gems empty? "," gems "," options [] "," options ","Gem Requirement PATTERN  match? "]}," Bundler Add inject_dependencies":{"type":"method","name":"inject_dependencies","children":[],"call":["Injector  inject "," options [] "," options "," options [] nil? ","Bundler Dependency  new "," version "," gems map "," gems "]}," Bundler Add perform_bundle_install":{"type":"method","name":"perform_bundle_install","children":[],"call":["Bundler  load cache ","Bundler  load ","Bundler  app_cache exist? ","Bundler  app_cache ","Installer  install ","Bundler  definition ","Bundler  root "]}," Bundler SharedHelpers with_major_deprecation_ui":{"type":"method","name":"with_major_deprecation_ui","children":[],"call":["Bundler  ui= ","Bundler  ui ","ui is_a? ","@major_deprecation_ui class ","Bundler  Bundler  ui = ","Bundler  Bundler  ui  ","Bundler  ui  is_a? ","@major_deprecation_Bundler  ui  class "]}," Bundler RubygemsIntegration plain_specs=":{"type":"method","name":"plain_specs=","children":[],"call":["Gem Specification  all= "]}," Bundler RubygemsIntegration plain_specs":{"type":"method","name":"plain_specs","children":[],"call":["Gem Specification  _all "]}," Bundler reset_settings!":{"type":"method","name":"reset_settings!","children":[],"call":[]}," Bundler preferred_gemfile_name":{"type":"method","name":"preferred_gemfile_name","children":[],"call":["Bundler  settings [] ","Bundler  settings "]}," Dir Tmpname create":{"type":"method","name":"create","children":[],"call":[" raise ","n < ","max_try ! ","File  join ","RANDOM  next ","Time  now strftime ","Time  now ","suffix delete ","suffix inspect ","String  try_convert ","prefix delete ","prefix inspect "," tmpdir ","max_Time  now strftime ry ! ","RANDOM  nexTime  now strftime  ","Time  now sTime  now strftime rfTime  now strftime ime ","suffix deleTime  now strftime e ","suffix inspecTime  now strftime  ","STime  now strftime ring  Time  now strftime ry_converTime  now strftime  ","prefix deleTime  now strftime e ","prefix delete  delete ","prefix inspecTime  now strftime  ","prefix delete  inspect "," Time  now strftime mpdir "]}," Dir Tmpname next":{"type":"method","name":"next","children":[],"call":[" rand to_s "," rand "]}," Dir Tmpname tmpdir":{"type":"method","name":"tmpdir","children":[],"call":["Bundler Dir  tmpdir "]}," Dir mktmpdir":{"type":"method","name":"mktmpdir","children":[],"call":[]}," Dir tmpdir":{"type":"method","name":"tmpdir","children":[],"call":[]}," Persistent max_retries=":{"type":"method","name":"max_retries=","children":[],"call":[" reconnect "," raise ","retries < ","retries to_int ","retries to_int  < ","retries to_int  to_int "]}," Molinillo Resolver Resolution push_initial_state":{"type":"method","name":"push_initial_state","children":[],"call":[" push_state_for_requirements "," original_requested ","dg tag ","vertex explicit_requirements << ","vertex explicit_requirements ","dg add_vertex "," name_for "," original_requested each ","DependencyGraph  new tap ","DependencyGraph  new ","dg add_vertex  explicit_requirements << ","dg add_vertex  explicit_requirements ","dg add_dg add_vertex  "]}," Molinillo DependencyGraph path":{"type":"method","name":"path","children":[],"call":["path reverse "," raise ","to name ","from name ","path last equal? ","path last ","to == ","path << ","predecessors [] ","predecessors []= ","distances []= ","distances [] + ","distances [] ","vertex name ","successor name ","distances [] > ","vertex successors each ","vertex successors "," each ","Hash  new "," vertices size + "," vertices size "," vertices ","Hash  new  []= ","Hash  new  [] + ","Hash  new  [] ","Hash  new  [] > "]}," Bundler StubSpecification default_gem?":{"type":"method","name":"default_gem?","children":[],"call":[" stub default_gem? "," stub "]}," Bundler StubSpecification gem_build_complete_path":{"type":"method","name":"gem_build_complete_path","children":[],"call":["File  join "," extension_dir "]}," Bundler StubSpecification extensions":{"type":"method","name":"extensions","children":[],"call":[" stub extensions "," stub "]}," Bundler Source Git GitProxy check_allowed":{"type":"method","name":"check_allowed","children":[],"call":[" raise ","GitNotAllowedError  new "," allow? ","URICredentialsFilter  credential_filtered_string "," uri ","command shelljoin "," require "," redact_and_check_presence "]}," Bundler Source Git GitProxy allowed_with_path":{"type":"method","name":"allowed_with_path","children":[],"call":[" raise "," uri "," with_path "," allow? "]}," Bundler Source Git GitProxy with_path":{"type":"method","name":"with_path","children":[],"call":["blk call "," checkout "," path exist? "," path "]}," Bundler Settings value_for":{"type":"method","name":"value_for","children":[],"call":[" converted_value ","config [] "," key_for "]}," Bundler Settings configs":{"type":"method","name":"configs","children":[],"call":[]}," Bundler RubygemsIntegration add_default_gems_to":{"type":"method","name":"add_default_gems_to","children":[],"call":["specs_by_name []= ","specs << ","specs_by_name key? ","default_spec name ","stub to_spec ","Bundler  rubygems default_stubs each ","Bundler  rubygems default_stubs ","Bundler  rubygems ","h []= ","s name ","specs reduce ","stub to_spec  name "]}," Bundler RubygemsIntegration load_env_plugins":{"type":"method","name":"load_env_plugins","children":[],"call":["Gem  load_env_plugins ","Gem  respond_to? "]}," Gem glob_files_in_dir":{"type":"method","name":"glob_files_in_dir","children":[],"call":["File  expand_path ","Dir  glob map! ","Dir  glob ","File  join ","base_path to_s gsub ","base_path to_s ","RUBY_VERSION  >= "]}," Gem Requirement OrderIndependentComparison _with_sorted_requirements":{"type":"method","name":"_with_sorted_requirements","children":[],"call":[" class new "," as_list sort "," as_list "," class "," _requirements_sorted? "]}," Gem Requirement OrderIndependentComparison _requirements_sorted?":{"type":"method","name":"_requirements_sorted?","children":[],"call":["strings == ","strings sort "," as_list "," as_list  == "," as_list  sort "]}," Gem Requirement OrderIndependentComparison ==":{"type":"method","name":"==","children":[],"call":[" _with_sorted_requirements == ","other _with_sorted_requirements "," _with_sorted_requirements ","other _requirements_sorted? "," _requirements_sorted? ","Gem Requirement  === "]}," Bundler Resolver SpecGroup sorted_activated_platforms":{"type":"method","name":"sorted_activated_platforms","children":[],"call":["@activated_platforms sort_by "," activated_platforms sort_by "," activated_platforms "]}," Bundler Resolver SpecGroup spec_for":{"type":"method","name":"spec_for","children":[],"call":["@specs [] "]}," Bundler Resolver SpecGroup copy_for":{"type":"method","name":"copy_for","children":[],"call":["copied_sg activate_platform! ","copied_sg for? ","copied_sg ignores_bundler_dependencies= "," class new "," class ","copied_sg activated_platforms= ","platforms any? "," for? ","platforms select! "," class new  activate_platform! "," class new  for? "," class new  ignores_bundler_dependencies= "," class new  activated_platforms= "]}," Bundler Plugin uninstall":{"type":"method","name":"uninstall","children":[],"call":["Bundler  ui info ","Bundler  ui ","Bundler  ui error "," index unregister_plugin "," index ","Bundler  rm_rf "," index plugin_path "," index installed? ","names each ","names any? "," index installed_plugins ","options [] ","options [] ! ","names empty? ","Bundler Plugin  uninstall "," options "," index installed_plugins  each "," index installed_plugins  any? "," index installed_plugins  empty? "]}," Bundler Plugin Index unregister_plugin":{"type":"method","name":"unregister_plugin","children":[],"call":[" save_index ","@load_paths delete ","@plugin_paths delete ","plugin_names delete ","@hooks each ","v == ","@sources delete_if ","@commands delete_if ","@hooks delete ","names empty? ","names delete "]}," Bundler LazySpecification hash":{"type":"method","name":"hash","children":[],"call":[" identifier hash "," identifier "," full_name hash "," full_name "]}," Bundler LazySpecification eql?":{"type":"method","name":"eql?","children":[],"call":[" identifier eql? ","other identifier "," identifier "," full_name eql? ","other full_name "," full_name "]}," Bundler ParallelInstaller failed_specs":{"type":"method","name":"failed_specs","children":[],"call":["@specs select "]}," Bundler Injector is_not_within_comment?":{"type":"method","name":"is_not_within_comment?","children":[],"call":["line [] include? ! ","line [] include? ","line [] ","match_data offset first ","match_data offset "]}," Bundler GemHelpers local_platform":{"type":"method","name":"local_platform","children":[],"call":["Bundler  local_platform "]}," Bundler GemHelper default_remote":{"type":"method","name":"default_remote","children":[],"call":["remote_for_branch empty? "," sh strip "," sh ","current_branch empty? ","remote_for_branch strip ","status success? "," sh_with_status "," current_branch "," sh gsub strip "," sh gsub "," sh strip  empty? "," sh gsub strip  empty? "," sh strip  strip ","  sh strip  ","  sh gsub strip  "]}," Bundler GemHelper tag_prefix=":{"type":"method","name":"tag_prefix=","children":[],"call":[" instance tag_prefix= "," instance "]}," Bundler FriendlyErrors disable!":{"type":"method","name":"disable!","children":[],"call":[]}," Bundler FriendlyErrors disabled?":{"type":"method","name":"disabled?","children":[],"call":[]}," Bundler FriendlyErrors enable!":{"type":"method","name":"enable!","children":[],"call":[]}," Bundler EnvironmentPreserver replace_with_backup":{"type":"method","name":"replace_with_backup","children":[],"call":["ENV  []= "," backup each "," backup ","ENV  clear ","ENV  replace ","Gem  win_platform? "]}," Bundler EnvironmentPreserver env_to_hash":{"type":"method","name":"env_to_hash","children":[],"call":[]}," Bundler EnvironmentPreserver from_env":{"type":"method","name":"from_env","children":[],"call":[]}," Bundler Definition expand_dependency_with_platforms":{"type":"method","name":"expand_dependency_with_platforms","children":[],"call":["DepProxy  new ","platforms map ","DepProxy  get_proxy "]}," Bundler Definition ruby_version_requirements":{"type":"method","name":"ruby_version_requirements","children":[],"call":["requirement exact? ","Gem Requirement  new ","ruby_version versions map ","ruby_version versions ","ruby_version to_gem_version_with_patchlevel ","ruby_version patchlevel ","Gem Requirement  new  exact? "]}," Bundler Definition dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":["(send\n  (send\n    (lvar :d) :groups) :&\n  (lvar :groups)) empty? ","d groups & ","d groups "," current_dependencies reject "," current_dependencies ","groups map! "," expand_dependencies "]}," Bundler CLI flag_deprecation":{"type":"method","name":"flag_deprecation","children":[],"call":["Bundler SharedHelpers  major_deprecation ","name tr ","value join to_s ","value join ","option type == ","option type "," options [] "," options ","flag_name == ","arg split [] ","arg split ","ARGV  find ","value join to_s  join to_s "," options []  join to_s ","value join to_s  join "," options []  join "]}," Bundler CLI remembered_negative_flag_deprecation":{"type":"method","name":"remembered_negative_flag_deprecation","children":[],"call":[" flag_deprecation ","--no- + ","option switch_name gsub ","option switch_name "," current_command options [] "," current_command options "," current_command ","name gsub "," current_command options []  switch_name gsub "," current_command options []  switch_name "," current_command  current_command options [] s [] "," current_command  current_command options [] s "]}," Bundler CLI fund":{"type":"method","name":"fund","children":[],"call":["Fund  new run ","Fund  new "," options "," require_relative "]}," Bundler Outdated justify":{"type":"method","name":"justify","children":[],"call":["(send\n  (send\n    (lvar :row) :each_with_index) :map) join strip + ","(send\n  (send\n    (lvar :row) :each_with_index) :map) join strip ","(send\n  (send\n    (lvar :row) :each_with_index) :map) join ","element ljust ","sizes [] ","row each_with_index map ","row each_with_index "]}," Bundler Outdated table_header":{"type":"method","name":"table_header","children":[],"call":["header << ","Bundler  ui debug? ","Bundler  ui "]}," Bundler Outdated print_indented":{"type":"method","name":"print_indented","children":[],"call":["Bundler  ui info "," justify ","Bundler  ui ","data each ","row [] ","data sort_by! ","(send\n  (lvar :matrix) :max_by) [] length ","(send\n  (lvar :matrix) :max_by) [] ","row [] length ","matrix max_by ","Array  new ","header size ","matrix [] ","matrix []  each ","matrix []  sort_by! ","matrix []  size "]}," Bundler Outdated gem_column_for":{"type":"method","name":"gem_column_for","children":[],"call":["ret_val << ","active_spec loaded_from to_s ","active_spec loaded_from ","Bundler  ui debug? ","Bundler  ui ","groups to_s ","dependency to_s ","active_spec name ","dependency requirement ","active_spec git_version ","active_spec version ","current_spec git_version ","current_spec version "," loaded_from_for to_s "," loaded_from_for ","dependency requirement  to_s ","dependency requirement  requirement "]}," Bundler Outdated print_gems_table":{"type":"method","name":"print_gems_table","children":[],"call":[" print_indented ","(send nil :table_header) + "," table_header "," gem_column_for ","gem [] ","gems_list map "]}," Bundler Gem ask_and_set_ci":{"type":"method","name":"ask_and_set_ci","children":[],"call":["Bundler  ui info "," options [] "," options ","Bundler  ui "," options [] == ","Bundler  settings [] ","Bundler  settings ","Bundler  settings set_global ","Bundler  settings [] nil? ","result =~ ","Bundler  ui ask "," hint_text ","Bundler  ui confirm ","ci_template to_s empty? ","ci_template to_s ","(str \"github|gitlab|circle\") match? ","Bundler  ui ask  =~ "]}," Bundler Gem hint_text":{"type":"method","name":"hint_text","children":[],"call":["Bundler  settings [] == ","Bundler  settings [] ","Bundler  settings "]}," Bundler Fund run":{"type":"method","name":"run","children":[],"call":["Bundler  ui info ","fund_info join ","Bundler  ui ","fund_info empty? ","arr << ","spec metadata [] ","spec metadata ","spec version ","spec name ","spec metadata key? ","Bundler  definition specs [] first ","Bundler  definition specs [] ","dep name ","Bundler  definition specs ","Bundler  definition ","deps each_with_object ","Bundler  definition current_dependencies ","Bundler  definition dependencies_for ","groups any? "," Array map "," Array "," options [] "," options ","Bundler  definition validate_runtime! ","Bundler  definition specs [] first  metadata [] ","Bundler  definition specs [] first  metadata ","Bundler  definition specs [] first  version ","Bundler  definition specs [] first  name ","Bundler  definition specs [] first  metadata key? ","Bundler  definition Bundler  definition specs [] first s [] first ","Bundler  definition Bundler  definition specs [] first s [] ","Bundler  definition Bundler  definition specs [] first s ","Bundler  definition current_dependencies  each_with_object ","Bundler  definition dependencies_for  each_with_object "," Array map  any? "]}," Bundler Fund initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Common output_fund_metadata_summary":{"type":"method","name":"output_fund_metadata_summary","children":[],"call":[]}," Bundler Definition add_platforms":{"type":"method","name":"add_platforms","children":[],"call":[" add_platform ","(send\n  (send\n    (ivar :@dependencies) :flat_map\n    (block-pass\n      (sym :expanded_platforms))) :+\n  (send nil :current_platforms)) uniq each ","(send\n  (send\n    (ivar :@dependencies) :flat_map\n    (block-pass\n      (sym :expanded_platforms))) :+\n  (send nil :current_platforms)) uniq ","@dependencies flat_map + "," current_platforms ","@dependencies flat_map "]}," Bundler reset_settings_and_root!":{"type":"method","name":"reset_settings_and_root!","children":[],"call":[]}," Bundler locked_bundler_version":{"type":"method","name":"locked_bundler_version","children":[],"call":["locked_gems bundler_version "," definition locked_gems "," definition "," definition locked_gems  bundler_version "," definition  definition locked_gems  "]}," Bundler LazySpecification ruby_platform_materializes_to_ruby_platform?":{"type":"method","name":"ruby_platform_materializes_to_ruby_platform?","children":[],"call":["Gem Version  new >= ","Gem Version  new ","locked_bundler_version nil? ","Bundler  locked_bundler_version ","Bundler  settings [] ","Bundler  settings ","Bundler  most_specific_locked_platform? ! ","Bundler  most_specific_locked_platform? "," generic_local_platform "," force_ruby_platform "," generic_local_platform == ","Bundler  locked_bundler_version  nil? ","Bundler  Bundler  locked_bundler_version  "]}," Bundler most_specific_locked_platform?":{"type":"method","name":"most_specific_locked_platform?","children":[],"call":[" definition most_specific_locked_platform == "," definition most_specific_locked_platform "," definition "]}," Thor Shell Color are_colors_supported?":{"type":"method","name":"are_colors_supported?","children":[],"call":["ENV  [] != ","ENV  [] "," stdout tty? "," stdout "]}," Molinillo SpecificationProvider dependencies_equal?":{"type":"method","name":"dependencies_equal?","children":[],"call":["dependencies == "]}," Molinillo DependencyGraph Vertex new_vertex_set":{"type":"method","name":"new_vertex_set","children":[],"call":["Set  new "," require "]}," Molinillo Delegates SpecificationProvider dependencies_equal?":{"type":"method","name":"dependencies_equal?","children":[],"call":[" specification_provider dependencies_equal? "," specification_provider "," with_no_such_dependency_error_handling "]}," Bundler SourceList allow_multisource!":{"type":"method","name":"allow_multisource!","children":[],"call":[" rubygems_sources map "," rubygems_sources "]}," Bundler SourceList disable_multisource?":{"type":"method","name":"disable_multisource?","children":[],"call":[]}," Bundler SourceList global_rubygems_source":{"type":"method","name":"global_rubygems_source","children":[],"call":[" rubygems_aggregate_class new "," rubygems_aggregate_class "]}," Bundler Source Rubygems allow_multisource!":{"type":"method","name":"allow_multisource!","children":[],"call":[]}," Bundler Source Rubygems disable_multisource?":{"type":"method","name":"disable_multisource?","children":[],"call":["@remotes size <= ","@remotes size "]}," Bundler Source Git GitProxy supports_minus_c?":{"type":"method","name":"supports_minus_c?","children":[],"call":["Gem Version  new >= ","Gem Version  new "," version "]}," Bundler Source Git GitProxy capture3_args_for":{"type":"method","name":"capture3_args_for","children":[],"call":["dir to_s "," supports_minus_c? ","Bundler  feature_flag bundler_3_mode? ","Bundler  feature_flag "]}," Gem Requirement CorrectHashForLambdaOperator hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (send nil :requirements) :map) sort hash ","(send\n  (send nil :requirements) :map) sort ","r [] to_s ","r [] ","r first == ","r first "," requirements map "," requirements "," requirements any? "]}," Bundler Resolver dependencies_equal?":{"type":"method","name":"dependencies_equal?","children":[],"call":["dependencies map == ","other_dependencies map ","dependencies map "]}," Bundler Resolver results_for":{"type":"method","name":"results_for","children":[],"call":[" index_for search "," index_for ","@results_for [] "]}," Bundler Resolver SpecGroup partitioned_dependency_names_for":{"type":"method","name":"partitioned_dependency_names_for","children":[],"call":["deps map ","(send\n  (send\n    (ivar :@dependencies) :[]\n    (lvar :platforms)) :partition) map ","(send\n  (send\n    (ivar :@dependencies) :[]\n    (lvar :platforms)) :count) == ","platforms size ","dp dep == ","dep_proxy dep ","dp dep ","@dependencies [] count ","@dependencies [] ","@dependencies [] partition ","@dependencies [] map ","platforms size == "]}," Bundler Resolver SpecGroup dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":["(send\n  (lvar :platforms) :map) flatten "," __dependencies + "," metadata_dependencies "," __dependencies ","platforms map "]}," Bundler Resolver SpecGroup partitioned_dependency_names_for_activated_platforms":{"type":"method","name":"partitioned_dependency_names_for_activated_platforms","children":[],"call":["@partitioned_dependency_names [] "," activated_platforms "]}," Bundler Resolver SpecGroup activate_all_platforms!":{"type":"method","name":"activate_all_platforms!","children":[],"call":[" activated_platforms= "]}," Bundler Resolver SpecGroup create_for":{"type":"method","name":"create_for","children":[],"call":[]}," Bundler LockfileParser rubygems_aggregate":{"type":"method","name":"rubygems_aggregate","children":[],"call":["Source Rubygems  new "]}," Bundler LazySpecification platform_string":{"type":"method","name":"platform_string","children":[],"call":["platform_string == "," platform to_s "," platform "," platform to_s  == "]}," Bundler Standalone reverse_rubygems_kernel_mixin":{"type":"method","name":"reverse_rubygems_kernel_mixin","children":[],"call":[]}," Bundler GemHelpers same_deps":{"type":"method","name":"same_deps","children":[],"call":["spec required_rubygems_version == ","exemplary_spec required_rubygems_version ","spec required_rubygems_version ","spec required_ruby_version == ","exemplary_spec required_ruby_version ","spec required_ruby_version ","exemplary_spec is_a? ","spec is_a? ","spec dependencies sort == ","exemplary_spec dependencies sort ","exemplary_spec dependencies ","spec dependencies sort ","spec dependencies "]}," Bundler GemHelpers same_specificity":{"type":"method","name":"same_specificity","children":[],"call":[" platform_specificity_match == "," platform_specificity_match ","exemplary_spec platform ","spec platform "]}," Bundler GemHelpers PlatformMatch specificity_score":{"type":"method","name":"specificity_score","children":[],"call":[]}," Bundler GemHelper current_branch":{"type":"method","name":"current_branch","children":[],"call":[" sh gsub strip "," sh gsub "," sh "]}," Bundler Dsl check_rubygems_source_safety":{"type":"method","name":"check_rubygems_source_safety","children":[],"call":["Bundler SharedHelpers  major_deprecation "," raise ","Bundler  feature_flag bundler_3_mode? ","Bundler  feature_flag ","@sources add_rubygems_remote ","@global_rubygems_sources each ","@sources global_rubygems_source= ","@global_rubygems_sources first ","@global_rubygems_sources size <= ","@global_rubygems_sources size ","Bundler  feature_flag disable_multisource? ","@global_rubygems_sources empty? ","@global_rubygems_sources shift ","@sources aggregate_global_source? "," multiple_global_source_warning "," implicit_global_source_warning ","@sources implicit_global_source? "]}," Bundler Dsl check_path_source_safety":{"type":"method","name":"check_path_source_safety","children":[],"call":["SharedHelpers  major_deprecation ","msg strip ","@sources global_path_source nil? ","@sources global_path_source "]}," Bundler DepProxy clone":{"type":"method","name":"clone","children":[],"call":[" raise ","NoMethodError  new "]}," Bundler DepProxy dup":{"type":"method","name":"dup","children":[],"call":[" raise ","NoMethodError  new "]}," Bundler DepProxy get_proxy":{"type":"method","name":"get_proxy","children":[],"call":[]}," Bundler Definition dependency_source_requirements":{"type":"method","name":"dependency_source_requirements","children":[],"call":["source_requirements []= ","dep name ","dep source "," dependencies each "," dependencies "," sources default_source "," sources "," disable_multisource? "," sources  sources default_source _source "]}," Bundler Definition current_platform_locked?":{"type":"method","name":"current_platform_locked?","children":[],"call":["MatchPlatform  platforms_match? ","Bundler  local_platform ","@platforms any? "]}," Bundler Definition current_ruby_platform_locked?":{"type":"method","name":"current_ruby_platform_locked?","children":[],"call":[" current_platform_locked? "," generic_local_platform == "," generic_local_platform ","@platforms include? ! ","@platforms include? ","Bundler  settings [] ","Bundler  settings "]}," Bundler Definition most_specific_locked_platform":{"type":"method","name":"most_specific_locked_platform","children":[],"call":[" platform_specificity_match "," local_platform ","@platforms min_by "]}," Bundler Definition allow_multisource!":{"type":"method","name":"allow_multisource!","children":[],"call":[]}," Bundler Definition disable_multisource?":{"type":"method","name":"disable_multisource?","children":[],"call":[]}," Bundler CompactIndexClient GemParser parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["dependency []= ","dependency [] split ","dependency [] ","dependency size > ","dependency size ","string split ","string split  []= ","string split  [] split ","string split  [] ","string split  size > ","string split  size "]}," Bundler CompactIndexClient GemParser parse":{"type":"method","name":"parse","children":[],"call":[" parse_dependency ","requirements map ","dependencies map ","s split ","rest split map ","rest split ","version_and_platform split ","line split "]}," Bundler StubSpecification manually_installed?":{"type":"method","name":"manually_installed?","children":[],"call":[" installed_by_version == ","Gem Version  new "," installed_by_version "]}," Bundler RubyGemsGemInstaller generate_plugins":{"type":"method","name":"generate_plugins","children":[],"call":[" regenerate_plugins_for "," spec "," remove_plugins_for "," spec plugins empty? "," spec plugins "," ensure_writable_dir ","latest version > "," spec version ","latest version ","Gem Specification  stubs_for first ","Gem Specification  stubs_for "," spec name ","Gem Installer  instance_methods include? ","Gem Installer  instance_methods ","Gem Specification  stubs_for first  version > ","Gem Specification  stubs_for first  version "]}," Bundler RubyGemsGemInstaller install":{"type":"method","name":"install","children":[],"call":[" spec "," run_post_install_hooks "," say "," spec post_install_message "," spec post_install_message nil? "," write_cache_file "," write_spec "," generate_plugins "," generate_bin "," run_post_build_hooks "," write_build_info_file "," build_extensions "," extract_files ","FileUtils  mkdir_p "," gem_dir ","FileUtils  rm_rf "," spec extension_dir "," spec loaded_from= "," spec_file "," run_pre_install_hooks "," pre_install_checks ","SharedHelpers  filesystem_access "," gem_home "," strict_rm_rf "," spec extensions any? "," spec extensions "]}," Bundler Plugin SourceList default_source":{"type":"method","name":"default_source","children":[],"call":[" global_rubygems_source "," git_sources first "," git_sources "]}," Bundler SourceList merged_gem_lockfile_sections!":{"type":"method","name":"merged_gem_lockfile_sections!","children":[],"call":[]}," Bundler Source remote!":{"type":"method","name":"remote!","children":[],"call":[]}," Bundler Source cached!":{"type":"method","name":"cached!","children":[],"call":[]}," Bundler Source local!":{"type":"method","name":"local!","children":[],"call":[]}," Bundler Source Rubygems local!":{"type":"method","name":"local!","children":[],"call":[]}," Bundler Plugin API Source local!":{"type":"method","name":"local!","children":[],"call":[]}," Bundler ParallelInstaller check_for_unmet_dependencies":{"type":"method","name":"check_for_unmet_dependencies","children":[],"call":["Bundler  ui warn ","warning join ","Bundler  ui ","warning << ","(send\n  (ivar :@specs) :find) full_name ","unmet_spec_dependency matches_spec? ! ","unmet_spec_dependency matches_spec? ","s spec ","s name == ","unmet_spec_dependency name ","s name ","@specs find ","spec full_name ","unmet_spec_dependencies each ","unmet_dependencies each ","unmet_dependencies empty? ","a last empty? ","a last ","(send\n  (ivar :@specs) :map) reject ","dep matches_spec? ","spec spec ","@specs any? ","s dependencies reject ","s dependencies ","@specs map ","found full_name "]}," Bundler GemHelper build_checksum":{"type":"method","name":"build_checksum","children":[],"call":["Bundler  ui confirm "," version "," name ","Bundler  ui ","File  write ","File  join "," base ","Digest SHA512  new hexdigest ","built_gem_path to_s ","Digest SHA512  new "," require ","File  basename ","FileUtils  mkdir_p ","SharedHelpers  filesystem_access "," build_gem "," Digest SHA512  new hexdigest "," Digest SHA512  new ","checksum + "," Digest SHA512  file hexdigest "," Digest SHA512  file ","Digest SHA512  new hexdigest  + "," Digest SHA512  new hexdigest  + "," Digest SHA512  file hexdigest  + "]}," Bundler Common verbalize_groups":{"type":"method","name":"verbalize_groups","children":[],"call":[]}," Bundler Settings printable_value":{"type":"method","name":"printable_value","children":[],"call":["converted gsub "," is_userinfo "," is_credential "," is_string ","converted is_a? "," converted_value ","(lvar :username) join ","pass == ","converted split "," converted_value  gsub "," converted_value  is_a? ","  converted_value _value "," converted_value  split "]}," Bundler Settings is_userinfo":{"type":"method","name":"is_userinfo","children":[],"call":["value include? "]}," Bundler Settings is_credential":{"type":"method","name":"is_credential","children":[],"call":["key == "]}," Bundler Settings is_string":{"type":"method","name":"is_string","children":[],"call":["name to_s start_with? ","name to_s ","STRING_KEYS  include? "]}," Bundler SourceMap direct_requirements":{"type":"method","name":"direct_requirements","children":[],"call":["requirements []= ","dep name ","dep_source add_dependency_names ","dep source "," dependencies each "," dependencies "," sources default_source "," sources "," sources  sources default_source _source "]}," Bundler SourceMap all_requirements":{"type":"method","name":"all_requirements","children":[],"call":[" sources default_source add_dependency_names ","unmet_deps flatten - ","requirements keys ","unmet_deps flatten "," sources default_source "," sources ","source unmet_deps ","Bundler  ui warn ","Bundler  ui "," raise ","msg join ","msg << ","msg concat ","(send\n  (array\n    (lvar :previous_source)\n    (lvar :source)) :map) sort ","(lvar :previous_source) map ","Bundler  feature_flag bundler_3_mode? ","Bundler  feature_flag ","requirements []= ","previous_source nil? ","requirements [] ","(send\n  (send\n    (lvar :source) :spec_names) :-\n  (send nil :pinned_spec_names)) each ","source spec_names - "," pinned_spec_names ","source spec_names "," sources non_default_explicit_sources map "," sources non_default_explicit_sources "," direct_requirements dup "," direct_requirements "," direct_requirements dup  keys ","msg join  join ","msg join  << ","msg join  concat ","(send\n  (array\n    (lvar :requirements [] )\n    (lvar :source)) :map) sort ","(lvar :requirements [] ) map "," direct_requirements dup  []= ","requirements []  nil? "," direct_requirements dup  [] "," direct_ direct_requirements dup  dup "," direct_ direct_requirements dup  "]}," Bundler SourceMap pinned_spec_names":{"type":"method","name":"pinned_spec_names","children":[],"call":["(send\n  (send nil :direct_requirements) :reject) keys ","source == "," direct_requirements reject "," direct_requirements "]}," Bundler SourceMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler SourceList lock_rubygems_sources":{"type":"method","name":"lock_rubygems_sources","children":[],"call":[" rubygems_sources sort_by uniq "," rubygems_sources sort_by "," rubygems_sources "," combine_rubygems_sources "," merged_gem_lockfile_sections? "]}," Bundler SourceList lock_other_sources":{"type":"method","name":"lock_other_sources","children":[],"call":["(send\n  (send\n    (send nil :path_sources) :+\n    (send nil :git_sources)) :+\n  (send nil :plugin_sources)) sort_by "," path_sources + + "," plugin_sources "," path_sources + "," git_sources "," path_sources "]}," Bundler SourceList non_default_explicit_sources":{"type":"method","name":"non_default_explicit_sources","children":[],"call":[" all_sources - "," metadata_source "," default_source "," all_sources "]}," Bundler SourceList non_global_rubygems_sources":{"type":"method","name":"non_global_rubygems_sources","children":[],"call":[]}," Bundler SourceList no_aggregate_global_source?":{"type":"method","name":"no_aggregate_global_source?","children":[],"call":[" global_rubygems_source remotes size <= "," global_rubygems_source remotes size "," global_rubygems_source remotes "," global_rubygems_source "]}," Bundler SourceList merged_gem_lockfile_sections?":{"type":"method","name":"merged_gem_lockfile_sections?","children":[],"call":[]}," Bundler Source spec_names":{"type":"method","name":"spec_names","children":[],"call":[" specs spec_names "," specs "]}," Bundler Source add_dependency_names":{"type":"method","name":"add_dependency_names","children":[],"call":[" Array | "," Array "," dependency_names "]}," Bundler Source RubygemsAggregate double_check_for_index":{"type":"method","name":"double_check_for_index","children":[],"call":["source double_check_for "," sources all_sources each "," sources all_sources "," sources ","names uniq! ","new_names flatten concat ","new_names flatten ","new_names compact! "," sources all_sources map ","names == "," lambda "," source_map pinned_spec_names "," source_map ","new_names flatten concat  uniq! ","new_new_names flatten concat  flatten concat "," sources all_sources map  flatten concat ","new_new_names flatten concat  flatten "," sources all_sources map  flatten ","new_new_names flatten concat  compact! "," sources all_sources map  compact! ","new_names flatten concat  == "," source_map pinned_spec_new_names flatten concat  "]}," Bundler Source RubygemsAggregate build_index":{"type":"method","name":"build_index","children":[],"call":[" double_check_for_index ","dependency_names concat uniq! ","dependency_names concat ","source unmet_deps ","idx add_source ","source specs ","source dependency_names= ","dependency_names - "," source_map pinned_spec_names "," source_map "," sources all_sources each "," sources all_sources "," sources ","Index  build "," source_map pinned_spec_names  concat uniq! "," source_map pinned_spec_names  concat ","source  source_map pinned_spec_names = "," source_map pinned_spec_names  - "]}," Bundler Source RubygemsAggregate to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Bundler Source RubygemsAggregate specs":{"type":"method","name":"specs","children":[],"call":[]}," Bundler Source RubygemsAggregate initialize":{"type":"method","name":"initialize","children":[],"call":[" build_index "]}," Bundler Source Rubygems dependency_api_available?":{"type":"method","name":"dependency_api_available?","children":[],"call":[" api_fetchers any? "," api_fetchers "]}," Bundler Source Rubygems spec_names":{"type":"method","name":"spec_names","children":[],"call":[" remote_specs spec_names "," remote_specs "," dependency_api_available? "]}," Bundler Resolver source_for":{"type":"method","name":"source_for","children":[],"call":["@source_requirements [] "]}," Bundler Plugin API Source add_dependency_names":{"type":"method","name":"add_dependency_names","children":[],"call":[" Array "]}," Bundler Plugin API Source spec_names":{"type":"method","name":"spec_names","children":[],"call":[" specs spec_names "," specs "]}," Bundler Definition source_map":{"type":"method","name":"source_map","children":[],"call":["SourceMap  new "," dependencies "," sources "]}," Bundler Definition precompute_source_requirements_for_indirect_dependencies?":{"type":"method","name":"precompute_source_requirements_for_indirect_dependencies?","children":[],"call":[" sources no_aggregate_global_source? "," sources "," sources non_global_rubygems_sources all? "," sources non_global_rubygems_sources "," sources aggregate_global_source? ! "," sources aggregate_global_source? "]}," Bundler SourceList local_only!":{"type":"method","name":"local_only!","children":[],"call":[" all_sources each "," all_sources "]}," Bundler Source local_only!":{"type":"method","name":"local_only!","children":[],"call":[]}," Bundler Source Rubygems local_only!":{"type":"method","name":"local_only!","children":[],"call":[]}," Bundler Definition resolve_only_locally!":{"type":"method","name":"resolve_only_locally!","children":[],"call":[" resolve "," sources local_only! "," sources "]}," Bundler SourceList aggregate_global_source?":{"type":"method","name":"aggregate_global_source?","children":[],"call":[" global_rubygems_source multiple_remotes? "," global_rubygems_source "]}," Bundler Source Rubygems multiple_remotes?":{"type":"method","name":"multiple_remotes?","children":[],"call":["@remotes size > ","@remotes size "]}," Bundler Settings processor_count":{"type":"method","name":"processor_count","children":[],"call":["Etc  nprocessors "," require "]}," Bundler Definition multisource_allowed?":{"type":"method","name":"multisource_allowed?","children":[],"call":[]}," Bundler SourceList different_sources?":{"type":"method","name":"different_sources?","children":[],"call":[" equivalent_sources? ! "," equivalent_sources? "," equal_sources? ! "," equal_sources? "]}," Bundler SourceList map_sources":{"type":"method","name":"map_sources","children":[],"call":["s == ","replacement_sources find ","sources map ","(send nil :path_sources) map "," plugin_sources "," git_sources "," path_sources ","(ivar :@rubygems_sources) map ","source as_path_source ","source is_a? ","@path_sources map "]}," Bundler SourceList dup_with_replaced_sources":{"type":"method","name":"dup_with_replaced_sources","children":[],"call":["new_source_list replace_sources! "," dup "," dup  replace_sources! "]}," Bundler SourceList expired_sources?":{"type":"method","name":"expired_sources?","children":[],"call":[" different_sources? "," dup_with_replaced_sources lock_sources "," dup_with_replaced_sources ","replacement_sources empty? "," dup_with_replaced_sources  dup_with_replaced_sources lock_sources  "]}," Bundler SourceList add_global_rubygems_remote":{"type":"method","name":"add_global_rubygems_remote","children":[],"call":[" global_rubygems_source "," global_rubygems_source add_remote "]}," Gem match_platforms?":{"type":"method","name":"match_platforms?","children":[],"call":["local_platform =~ ","local_platform != ","local_platform == ","platform nil? ","platforms any? ","platform =~ "]}," Gem match_gem?":{"type":"method","name":"match_gem?","children":[],"call":[" match_platforms? ","Gem  platforms "]}," Gem match_spec?":{"type":"method","name":"match_spec?","children":[],"call":[" match_gem? ","spec name ","spec platform "]}," Bundler Definition add_bundler_to":{"type":"method","name":"add_bundler_to","children":[],"call":["specs []= "," sources metadata_source specs search last "," sources metadata_source specs search ","Gem Dependency  new "," sources metadata_source specs "," sources metadata_source "," sources ","specs [] any? ","specs [] "]}," Bundler Worker remove_interrupt_handler":{"type":"method","name":"remove_interrupt_handler","children":[],"call":[" trap "]}," Bundler Worker add_interrupt_handler":{"type":"method","name":"add_interrupt_handler","children":[],"call":[" abort_threads "," trap "]}," Bundler SpecSet missing_specs":{"type":"method","name":"missing_specs","children":[],"call":["s is_a? ","@specs select "]}," Bundler SourceList global_replacement_source":{"type":"method","name":"global_replacement_source","children":[],"call":["replacement_source local! "," global_rubygems_source ","s == ","replacement_sources find "]}," Bundler SourceList implicit_global_source?":{"type":"method","name":"implicit_global_source?","children":[],"call":[" global_rubygems_source no_remotes? "," global_rubygems_source "]}," Bundler Source Rubygems no_remotes?":{"type":"method","name":"no_remotes?","children":[],"call":["@remotes size == ","@remotes size "]}," Bundler Dsl multiple_global_source_warning":{"type":"method","name":"multiple_global_source_warning","children":[],"call":["Bundler SharedHelpers  major_deprecation "," raise ","Bundler  feature_flag bundler_3_mode? ","Bundler  feature_flag "]}," Bundler Dsl implicit_global_source_warning":{"type":"method","name":"implicit_global_source_warning","children":[],"call":["Bundler SharedHelpers  major_deprecation "]}," Bundler Definition materialize":{"type":"method","name":"materialize","children":[],"call":["specs []= "," sources metadata_source specs search last "," sources metadata_source specs search ","Gem Dependency  new "," sources metadata_source specs "," sources metadata_source "," sources ","specs [] any? ","specs [] "," raise ","missing_specs map join ","missing_specs map ","locked_gem source ","@remote ! ","locked_gem version != ","s version ","locked_gem version ","locked_gem nil? ","@locked_specs [] last ","@locked_specs [] ","s name ","missing_specs each ","missing_specs any? ","specs missing_specs "," resolve materialize "," resolve "," reresolve ","@unlock [] concat ","incomplete_specs map ","@unlock [] ","Bundler  ui debug ","Bundler  ui ","incomplete_specs any? ","specs incomplete_specs ","@reresolve nil? ","missing_specs_list join ","missing_specs_for_source map join ","missing_specs_for_source map ","missing_specs group_by map ","missing_specs group_by "," resolver start "," expanded_dependencies "," resolver ","incomplete_specs empty? "," loop ","Bundler  gem_version "," resolver raise_not_found! "," resolution_packages [] ","incomplete_specs first name ","incomplete_specs first "," resolution_packages ","still_incomplete_specs == "," start_resolution "," resolution_packages get_package "," resolution_packages delete "," setup_sources_for_resolve "," resolve materialize  []= "," sources metadata_source  resolve materialize  search last "," sources metadata_source  resolve materialize  search "," sources metadata_source  resolve materialize  "," resolve materialize  [] any? "," resolve materialize  [] ","specs missing_specs  map join ","missing_ resolve materialize  map join ","specs missing_specs  map ","missing_ resolve materialize  map ","@locked_specs [] last  source ","@locked_specs [] last  version != ","@locked_specs [] last  version ","@locked_specs [] last  nil? ","@locked_ resolve materialize  [] last ","@locked_ resolve materialize  [] ","specs missing_specs  each ","missing_ resolve materialize  each ","specs missing_specs  any? ","missing_ resolve materialize  any? ","specs specs missing_specs  "," resolve materialize  missing_ resolve materialize  ","incomplete_ resolve materialize  map ","specs incomplete_specs  map ","incomplete_ resolve materialize  any? ","specs incomplete_specs  any? "," resolve materialize  incomplete_ resolve materialize  ","specs specs incomplete_specs  ","specs missing_specs _list join ","missing_ resolve materialize _list join ","specs missing_specs _for_source map join ","missing_ resolve materialize _for_source map join ","specs missing_specs _for_source map ","missing_ resolve materialize _for_source map ","specs missing_specs  group_by map ","missing_ resolve materialize  group_by map ","specs missing_specs  group_by ","missing_ resolve materialize  group_by ","incomplete_ resolve materialize  empty? ","specs incomplete_specs  empty? "," resolution_ resolution_packages [] s [] "," resolution_ resolution_packages get_package s [] ","incomplete_ resolve materialize  first name ","specs incomplete_specs  first name ","incomplete_ resolve materialize  first ","specs incomplete_specs  first "," resolution_ resolution_packages [] s "," resolution_ resolution_packages get_package s ","still_incomplete_ resolve materialize  == ","still_specs incomplete_specs  == ","specs incomplete_specs  == "," resolution_ resolution_packages [] s get_ resolution_packages []  "," resolution_ resolution_packages get_package s get_ resolution_packages get_package  "," resolution_ resolution_packages [] s delete "," resolution_ resolution_packages get_package s delete "]}," Bundler Source to_err":{"type":"method","name":"to_err","children":[],"call":[" to_s "]}," Bundler Source RubygemsAggregate to_err":{"type":"method","name":"to_err","children":[],"call":[" to_s "]}," Bundler Source Rubygems remote_names":{"type":"method","name":"remote_names","children":[],"call":[" remotes map join "," remotes map "," remotes "]}," Bundler Source Rubygems to_err":{"type":"method","name":"to_err","children":[],"call":[" remote_names "," remotes empty? "," remotes "]}," Bundler Plugin save_plugin":{"type":"method","name":"save_plugin","children":[],"call":[" raise ","e message ","e class ","spec name ","Bundler  ui info ","Bundler  ui "," register_plugin "," validate_plugin! ","Pathname  new ","spec full_gem_path "]}," Bundler Source Git default_glob?":{"type":"method","name":"default_glob?","children":[],"call":["@glob == "]}," Bundler Source Git glob_for_display":{"type":"method","name":"glob_for_display","children":[],"call":[" default_glob? "]}," Bundler Gem rubocop_version":{"type":"method","name":"rubocop_version","children":[],"call":["Gem  ruby_version < ","Gem Version  new ","Gem  ruby_version "]}," Bundler Gem required_ruby_version":{"type":"method","name":"required_ruby_version","children":[],"call":["Gem  ruby_version < ","Gem Version  new ","Gem  ruby_version "]}," ConnectionPool reload":{"type":"method","name":"reload","children":[],"call":["@available shutdown "]}," ConnectionPool Wrapper wrapped_pool":{"type":"method","name":"wrapped_pool","children":[],"call":[]}," TimedStack current_time":{"type":"method","name":"current_time","children":[],"call":["Process  clock_gettime "]}," Bundler Source Rubygems default_cache_path_for":{"type":"method","name":"default_cache_path_for","children":[],"call":[]}," Bundler RubyGemsGemInstaller strict_rm_rf":{"type":"method","name":"strict_rm_rf","children":[],"call":[" raise ","PermissionError  new ","File  directory? ","FileUtils  rm_rf ","DirectoryRemovalError  new ","e cause ","Bundler  rm_rf ","File  exist? "]}," Gem Specification deleted_gem?":{"type":"method","name":"deleted_gem?","children":[],"call":["File  directory? ! ","File  directory? "," full_gem_path "," default_gem? ! "," default_gem? "]}," Bundler FriendlyErrors new_issue_url":{"type":"method","name":"new_issue_url","children":[],"call":[]}," Bundler PermissionError parent_folder":{"type":"method","name":"parent_folder","children":[],"call":["File  dirname "]}," Bundler PermissionError permission_type":{"type":"method","name":"permission_type","children":[],"call":["File  directory? "," parent_folder "]}," Bundler Digest rotate":{"type":"method","name":"rotate","children":[],"call":["value << | ","value >> ","32 - ","value << "]}," Bundler Digest generate_split_buffer":{"type":"method","name":"generate_split_buffer","children":[],"call":["buffer each_slice ","buffer concat ","(lvar :size) pack bytes ","(lvar :size) pack ","buffer << ","buffer size % != ","buffer size % ","buffer size ","string bytes << ","string bytes ","string bytesize * ","string bytesize ","string bytes <<  each_slice ","string bytes <<  concat ","(lvar :string bytesize * ) pack bytes ","(lvar :string bytesize * ) pack ","string bytes <<  << ","string bytes <<  size % != ","buffer string bytesize *  % != ","string bytes <<  size % ","buffer string bytesize *  % ","string bytes <<  size ","buffer string bytesize *  ","string bytestring bytesize *  * ","string bytestring bytesize *  "]}," Bundler Digest sha1":{"type":"method","name":"sha1","children":[],"call":["words pack unpack first ","words pack unpack ","words pack ","SHA1_MASK  & ","word + ","mutated [] ","words map! with_index ","words map! "," rotate "," rotate + + + + ","w [] "," rotate + + + "," rotate + + "," rotate + ","b ^ ^ ","b ^ ","(send\n  (lvar :b) :&\n  (lvar :c)) | | ","c & ","(send\n  (lvar :b) :&\n  (lvar :c)) | ","b & ","b ~ & ","b ~ ","0 upto ","w []= ","w [] ^ ^ ^ ","i - ","w [] ^ ^ ","w [] ^ ","(irange\n  (int 16)\n  (int 79)) each ","w << ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :a) :<<\n          (int 8)) :|\n        (lvar :b))) :<<\n    (int 8)) :|\n  (lvar :c)) << | ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :a) :<<\n          (int 8)) :|\n        (lvar :b))) :<<\n    (int 8)) :|\n  (lvar :c)) << ","(send\n  (send\n    (lvar :a) :<<\n    (int 8)) :|\n  (lvar :b)) << | ","(send\n  (send\n    (lvar :a) :<<\n    (int 8)) :|\n  (lvar :b)) << ","a << | ","a << ","chunk each_slice "," generate_split_buffer ","SHA1_WORDS  dup ","string b "," raise ","string class inspect ","string class ","string is_a? ","words pack unpack firsSHA1_MASK  &  ","SHA1_WORDS  dup  pack unpack first ","SHA1_WORDS  dup  pack unpack ","SHA1_WORDS  dup  pack ","muSHA1_MASK  & aSHA1_MASK  & ed [] ","words map! wiSHA1_MASK  & h_index ","SHA1_WORDS  dup  map! with_index ","SHA1_WORDS  dup  map! "," roSHA1_MASK  & aSHA1_MASK  & e "," roSHA1_MASK  & aSHA1_MASK  & e + + + + "," roSHA1_MASK  & aSHA1_MASK  & e + + + "," roSHA1_MASK  & aSHA1_MASK  & e + + "," roSHA1_MASK  & aSHA1_MASK  & e + ","0 upSHA1_MASK  & o ","(irange\n  (inSHA1_MASK  &  16)\n  (inSHA1_MASK  &  79)) each ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :a) :<<\n          (inSHA1_MASK  &  8)) :|\n        (lvar :b))) :<<\n    (inSHA1_MASK  &  8)) :|\n  (lvar :c)) << | ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :a) :<<\n          (inSHA1_MASK  &  8)) :|\n        (lvar :b))) :<<\n    (inSHA1_MASK  &  8)) :|\n  (lvar :c)) << ","(send\n  (send\n    (lvar :a) :<<\n    (inSHA1_MASK  &  8)) :|\n  (lvar :b)) << | ","(send\n  (send\n    (lvar :a) :<<\n    (inSHA1_MASK  &  8)) :|\n  (lvar :b)) << "," generaSHA1_MASK  & e_spliSHA1_MASK  & _buffer "," generate_split_string b  ","sSHA1_MASK  & ring b ","sSHA1_MASK  & ring class inspecSHA1_MASK  &  ","sSHA1_MASK  & ring class ","sSHA1_MASK  & ring is_a? "]}," Bundler Definition locked_dependencies":{"type":"method","name":"locked_dependencies","children":[],"call":["@locked_deps values "]}," Bundler TSort tsort_each_child":{"type":"method","name":"tsort_each_child","children":[],"call":[" raise ","NotImplementedError  new "]}," Bundler TSort tsort_each_node":{"type":"method","name":"tsort_each_node","children":[],"call":[" raise ","NotImplementedError  new "]}," Bundler TSort each_strongly_connected_component_from":{"type":"method","name":"each_strongly_connected_component_from","children":[],"call":["TSort  each_strongly_connected_component_from "," method "]}," Bundler TSort each_strongly_connected_component":{"type":"method","name":"each_strongly_connected_component","children":[],"call":["TSort  each_strongly_connected_component "," method "]}," Bundler TSort strongly_connected_components":{"type":"method","name":"strongly_connected_components","children":[],"call":["TSort  strongly_connected_components "," method "]}," Bundler TSort tsort_each":{"type":"method","name":"tsort_each","children":[],"call":["TSort  tsort_each "," method "]}," Bundler TSort tsort":{"type":"method","name":"tsort","children":[],"call":["TSort  tsort "," method "]}," Bundler Gem standard_version":{"type":"method","name":"standard_version","children":[],"call":["Gem  ruby_version < ","Gem Version  new ","Gem  ruby_version "]}," Bundler Gem deprecated_rubocop_option":{"type":"method","name":"deprecated_rubocop_option","children":[],"call":["Bundler  settings [] ","Bundler  settings ","Bundler SharedHelpers  major_deprecation ","Bundler  settings [] nil? ! ","Bundler  settings [] nil? "," options [] "," options "," options [] nil? ! "," options [] nil? "]}," Bundler Gem ask_and_set_linter":{"type":"method","name":"ask_and_set_linter","children":[],"call":["Bundler  ui info "," options [] "," options ","Bundler  ui "," options [] == ","Bundler  settings [] ","Bundler  settings ","Bundler  settings set_global ","Bundler  settings [] nil? ","result =~ ","Bundler  ui ask "," hint_text ","Bundler  ui confirm ","linter_template to_s empty? ","linter_template to_s "," deprecated_rubocop_option ","linter_template nil? ","(str \"rubocop|standard\") match? ","Bundler  ui ask  =~ "," deprecated_rubocop_option  to_s empty? "," deprecated_rubocop_option  to_s "," deprecated_rubocop_option  nil? "]}," Bundler Definition converge_specs":{"type":"method","name":"converge_specs","children":[],"call":["SpecSet  new ","@unlock [] include? ","s name ","@unlock [] ","resolve for reject ","resolve for "," expand_dependencies ","converged << ","@unlock [] << ","s name == ","d name ","@dependencies find ","dep nil? ","s dependencies replace ","new_spec dependencies ","s dependencies ","new_specs [] first ","new_specs [] "," raise ","locked_spec source == ","s source ","locked_spec source ","specs for none? ","specs for "," requested_dependencies ","s source specs ","s source instance_of? ","s source name ","s source nil? ","s source= "," sources get "," sources ","dep source "," multisource_allowed? ","deps << ","s source include? ","dep source ! ","s satisfies? ","specs each "," requested_dependencies find "," sources default_source ","Bundler  frozen_bundle? "," filter_specs reject "," filter_specs ","specs [] any? ","specs [] ","@dependencies select "," sources get_with_fallback ","@specs_that_changed_sources << ","gemfile_source != ","name == "," default_source ","lockfile_source != ","lockfile_source include? ","s s name  ","SpecSet  new  for reject ","SpecSet  new  for ","s s name  == ","d s name  ","new_specs [] first  dependencies ","new_specs [] first s [] first ","new_specs [] first s [] ","s source s name  ","dep source  != ","s name  == ","s source  != ","s source  include? "]}," Bundler Source identifier":{"type":"method","name":"identifier","children":[],"call":[" to_s "]}," Bundler Source RubygemsAggregate identifier":{"type":"method","name":"identifier","children":[],"call":[" to_s "]}," Bundler Source Rubygems identifier":{"type":"method","name":"identifier","children":[],"call":[" remote_names "," remotes empty? "," remotes "]}," Bundler Info print_gem_version":{"type":"method","name":"print_gem_version","children":[],"call":["Bundler  ui info ","spec version to_s ","spec version ","Bundler  ui "]}," Thor Shell Basic say_error":{"type":"method","name":"say_error","children":[],"call":[" stderr flush "," stderr "," stderr print ","buffer << ","message to_s end_with? ! ","message to_s end_with? ","message to_s "," prepare_message "," quiet? "," prepare_message  << "]}," Thor Options unshift":{"type":"method","name":"unshift","children":[],"call":[]}," Thor Options shift":{"type":"method","name":"shift","children":[],"call":[]}," Thor CoreExt HashWithIndifferentAccess except":{"type":"method","name":"except","children":[],"call":["hash delete "," convert_key ","keys each "," dup tap "," dup "]}," Bundler self_manager":{"type":"method","name":"self_manager","children":[],"call":["Bundler SelfManager  new "," require_relative "]}," URI WS request_uri":{"type":"method","name":"request_uri","children":[],"call":["/ + ","url start_with? ","/ freeze ","@path dup ","@path dup  start_with? "]}," URI WS build":{"type":"method","name":"build","children":[],"call":[]}," URI for":{"type":"method","name":"for","children":[],"call":[]}," Bundler SelfManager lockfile_version":{"type":"method","name":"lockfile_version","children":[],"call":["Bundler LockfileParser  bundled_with ","Gem Version  new "]}," Bundler SelfManager current_version":{"type":"method","name":"current_version","children":[],"call":["Gem Version  new "]}," Bundler SelfManager installed?":{"type":"method","name":"installed?","children":[],"call":["Bundler  rubygems find_bundler "," lockfile_version ","Bundler  rubygems ","Bundler  configure "," lockfile_version to_s "]}," Bundler SelfManager needs_switching?":{"type":"method","name":"needs_switching?","children":[],"call":[" lockfile_version != "," current_version "," lockfile_version "," lockfile_version end_with? ! "," lockfile_version end_with? ","SharedHelpers  in_bundle? ","Bundler  rubygems supports_bundler_trampolining? ","Bundler  rubygems ","ENV  [] nil? ","ENV  [] "," updating? ! "," updating? "," running? ! "," running? "," released? "," autoswitching_applies? "]}," Bundler SelfManager restart_with_locked_bundler":{"type":"method","name":"restart_with_locked_bundler","children":[],"call":["Kernel  exec "," lockfile_version ","Bundler  with_original_env ","ENV  [] ","cmd unshift ","Gem  ruby ","File  executable? "]}," Bundler SelfManager install_and_restart_with_locked_bundler":{"type":"method","name":"install_and_restart_with_locked_bundler","children":[],"call":[" restart_with_locked_bundler ","Bundler  ui warn "," current_version "," lockfile_version ","Bundler  ui ","Bundler  ui trace ","Gem  install ","Gem Dependency  new ","spec source install ","spec source ","Bundler  ui info ","spec nil? "," fetch_spec_for "," fetch_spec_for  source install "," fetch_spec_for  source "," fetch_spec_for  nil? "," fetch_ fetch_spec_for _for "]}," Bundler SelfManager install_locked_bundler_and_restart_with_it_if_needed":{"type":"method","name":"install_locked_bundler_and_restart_with_it_if_needed","children":[],"call":[" install_and_restart_with_locked_bundler ","Bundler  ui info "," lockfile_version "," current_version ","Bundler  ui "," needs_switching? "," install_and_restart_with "]}," Bundler SelfManager restart_with_locked_bundler_if_needed":{"type":"method","name":"restart_with_locked_bundler_if_needed","children":[],"call":[" restart_with_locked_bundler "," installed? "," needs_switching? "," restart_with "," lockfile_version "]}," Bundler RubygemsIntegration find_bundler":{"type":"method","name":"find_bundler","children":[],"call":["s version to_s == ","s version to_s ","s version "," find_name find "," find_name "]}," Bundler RubygemsIntegration supports_bundler_trampolining?":{"type":"method","name":"supports_bundler_trampolining?","children":[],"call":[" provides? "]}," Bundler Resolver gem_not_found_message":{"type":"method","name":"gem_not_found_message","children":[],"call":["message << ","(send\n  (lvar :specs) :map) join ","s full_name ","specs map ","specs any? ","String  new ","requirement __platform ","specs_matching_requirement any? ","requirement matches_spec? ","specs select ","Bundler  settings app_cache_path ","Bundler  settings ","Bundler  app_cache exist? ","Bundler  app_cache ","SharedHelpers  pretty_dependency ","source specs search ","source specs ","s platform to_s ","s platform ","s version ","source specs search sort_by ","platforms join ","platforms first ","platforms size == ","platforms size ","requirement gem_platforms ","String  new  << ","(send\n  (lvar :source specs search ) :map) join ","source specs search  map ","source specs search  any? ","source specs search _matching_requirement any? ","source specs search  select ","source source specs search  search ","source source specs search  ","source source specs search  search sort_by ","requirement gem_platforms  join ","requirement gem_platforms  first ","requirement gem_platforms  size == ","requirement gem_platforms  size ","requirement gem_requirement gem_platforms  "]}," Bundler LockfileParser bundled_with":{"type":"method","name":"bundled_with","children":[],"call":[]}," Bundler Injector convert_autorequire":{"type":"method","name":"convert_autorequire","children":[],"call":["autorequire inspect ","autorequire == ","autorequire first ","autorequire first  inspect ","autorequire first  == ","autorequire first  first "]}," Bundler SourceMap locked_requirements":{"type":"method","name":"locked_requirements","children":[],"call":["requirements []= ","locked_spec name ","source add_dependency_names ","locked_spec source "," locked_specs each "," locked_specs ","locked_spec source  add_dependency_names ","locked_spec locked_spec source  "]}," Bundler SelfManager updating?":{"type":"method","name":"updating?","children":[],"call":["a start_with? ","ARGV  [] any? ","ARGV  [] ","update start_with? ","ARGV  first "]}," Bundler SelfManager released?":{"type":"method","name":"released?","children":[],"call":["version to_s end_with? ! ","version to_s end_with? ","version to_s "]}," Bundler SelfManager running_older_than?":{"type":"method","name":"running_older_than?","children":[],"call":[" current_version < "," current_version "]}," Bundler SelfManager running?":{"type":"method","name":"running?","children":[],"call":["version == "," current_version "]}," Bundler SelfManager find_latest_matching_spec_from_collection":{"type":"method","name":"find_latest_matching_spec_from_collection","children":[],"call":["requirement satisfied_by? ","spec version ","specs sort reverse_each find ","specs sort reverse_each ","specs sort "]}," Bundler SelfManager find_latest_matching_spec":{"type":"method","name":"find_latest_matching_spec","children":[],"call":["(lvar :local_result) max ","local_result nil? "," find_latest_matching_spec_from_collection "," remote_specs ","requirement specific? "," local_specs ","(lvar : find_latest_matching_spec_from_collection ) max "," find_latest_matching_spec_from_collection  nil? "]}," Bundler SelfManager remote_specs":{"type":"method","name":"remote_specs","children":[],"call":["source specs ","source add_dependency_names ","source remote! ","Bundler Source Rubygems  new ","Bundler Source Rubygems  new  specs ","Bundler Source Rubygems  new  add_dependency_names ","Bundler Source Rubygems  new  remote! "]}," Bundler SelfManager local_specs":{"type":"method","name":"local_specs","children":[],"call":["spec name == ","spec name ","Bundler Source Rubygems  new specs select ","Bundler Source Rubygems  new specs ","Bundler Source Rubygems  new "]}," Bundler SelfManager resolve_update_version_from":{"type":"method","name":"resolve_update_version_from","children":[],"call":[" running_older_than? "," running? ! "," running? ","requirement specific? ","update_candidate version "," raise ","update_candidate nil? "," find_latest_matching_spec ","Gem Requirement  new ","Gem Requirement  new  specific? "," find_latest_matching_spec  version "," find_latest_matching_spec  nil? "]}," Bundler SelfManager autoswitching_applies?":{"type":"method","name":"autoswitching_applies?","children":[],"call":[" lockfile_version ","SharedHelpers  in_bundle? ","Bundler  rubygems supports_bundler_trampolining? ","Bundler  rubygems ","ENV  [] nil? ","ENV  [] "]}," Bundler SelfManager restart_with":{"type":"method","name":"restart_with","children":[],"call":["Kernel  exec ","version to_s ","Bundler  with_original_env ","cmd unshift ","Gem  ruby ","File  executable? ","ENV  [] "]}," Bundler SelfManager install":{"type":"method","name":"install","children":[],"call":["spec source install ","spec source "]}," Bundler SelfManager install_and_restart_with":{"type":"method","name":"install_and_restart_with","children":[],"call":[" restart_with ","Bundler  ui warn "," current_version "," lockfile_version ","Bundler  ui ","Bundler  ui trace "," install ","spec nil? "," find_latest_matching_spec ","Gem Requirement  new "," find_latest_matching_spec  nil? "," find_latest_matching_ find_latest_matching_spec  "]}," Bundler SelfManager update_bundler_and_restart_with_it_if_needed":{"type":"method","name":"update_bundler_and_restart_with_it_if_needed","children":[],"call":[" restart_with "," install ","Bundler  ui info ","Bundler  ui ","spec version "," resolve_update_version_from "," autoswitching_applies? ","spec spec version  "," resolve_update_version_from  version "," resolve_update_spec version _from "]}," Gem Specification YamlBackfiller to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["Gem  load_yaml "]}," Bundler RemoteSpecification required_rubygems_version":{"type":"method","name":"required_rubygems_version","children":[],"call":["Gem Requirement  default "," _remote_specification required_rubygems_version "," _remote_specification "]}," Bundler EndpointSpecification _remote_specification":{"type":"method","name":"_remote_specification","children":[],"call":["@spec_fetcher fetch_spec "]}," Bundler EndpointSpecification required_rubygems_version":{"type":"method","name":"required_rubygems_version","children":[],"call":[" _remote_specification required_rubygems_version "," _remote_specification ","Gem Requirement  default "]}," Bundler EndpointSpecification required_ruby_version":{"type":"method","name":"required_ruby_version","children":[],"call":[" _remote_specification required_ruby_version "," _remote_specification "]}," Bundler Info gem_dependencies":{"type":"method","name":"gem_dependencies","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Bundler) :definition) :specs) :map) compact sort ","(send\n  (send\n    (send\n      (const nil :Bundler) :definition) :specs) :map) compact ","dependency requirements_list join ","dependency requirements_list "," gem_name ","spec version ","spec name ","dep name == ","dep name ","spec dependencies find ","spec dependencies ","Bundler  definition specs map ","Bundler  definition specs ","Bundler  definition "]}," Bundler Config Base inside_app?":{"type":"method","name":"inside_app?","children":[],"call":["Bundler  root "]}," TSort tsort_each_child":{"type":"method","name":"tsort_each_child","children":[],"call":[" raise ","NotImplementedError  new "]}," TSort tsort_each_node":{"type":"method","name":"tsort_each_node","children":[],"call":[" raise ","NotImplementedError  new "]}," TSort each_strongly_connected_component_from":{"type":"method","name":"each_strongly_connected_component_from","children":[],"call":["Bundler TSort  each_strongly_connected_component_from "," method "]}," TSort each_strongly_connected_component":{"type":"method","name":"each_strongly_connected_component","children":[],"call":["Bundler TSort  each_strongly_connected_component "," method "]}," TSort strongly_connected_components":{"type":"method","name":"strongly_connected_components","children":[],"call":["Bundler TSort  strongly_connected_components "," method "]}," TSort tsort_each":{"type":"method","name":"tsort_each","children":[],"call":["Bundler TSort  tsort_each "," method "]}," TSort tsort":{"type":"method","name":"tsort","children":[],"call":["Bundler TSort  tsort "," method "]}," Gem Specification required_ruby_version=":{"type":"method","name":"required_ruby_version=","children":[],"call":["Gem Version  new ","(send\n  (send\n    (lvar :v) :segments) :tap) join ","s delete_at ","v segments tap ","v segments ","op == ","v release segments size == ","v release segments size ","v release segments ","v release ","v >= ","@required_ruby_version requirements map! ","@required_ruby_version requirements "," rg_required_ruby_version= "]}," Bundler Definition filter_specs":{"type":"method","name":"filter_specs","children":[],"call":["SpecSet  new for "," expand_dependencies ","SpecSet  new "," platforms "]}," Bundler GemInstaller previous_spec":{"type":"method","name":"previous_spec","children":[],"call":["s name == "," spec name "," spec ","s name ","locked_gems specs find ","locked_gems specs "," installer definition locked_gems "," installer definition "," installer "," installer definition locked_gems  specs find "," installer definition locked_gems  specs "," installer definition  installer definition locked_gems  "]}," Bundler create_bundle_path":{"type":"method","name":"create_bundle_path","children":[],"call":[" raise "," bundle_path "," bundle_path realpath "," mkdir_p ","SharedHelpers  filesystem_access "," bundle_path to_s "," bundle_path exist? "]}," Bundler StubSpecification full_gem_path=":{"type":"method","name":"full_gem_path=","children":[],"call":[" stub full_gem_path= "," stub "]}," Bundler FriendlyErrors serialized_exception_for":{"type":"method","name":"serialized_exception_for","children":[],"call":["(str \"        \") gsub ","e backtrace join chomp ","e backtrace join ","e backtrace ","e message ","e class "]}," Bundler FriendlyErrors exception_message":{"type":"method","name":"exception_message","children":[],"call":["message + "," serialized_exception_for ","error cause "," serialized_exception_for  + ","error error cause  "]}," Bundler DirectoryRemovalError initialize":{"type":"method","name":"initialize","children":[],"call":["orig_exception backtrace join ","orig_exception backtrace ","orig_exception message ","orig_exception class "]}," Bundler Source Rubygems package_path":{"type":"method","name":"package_path","children":[],"call":["spec file_name "]}," Bundler RubyGemsGemInstaller spec":{"type":"method","name":"spec","children":[],"call":["@package spec ","Bundler  rubygems provides? ","Bundler  rubygems "]}," Bundler SpecSet specs_for_dependency":{"type":"method","name":"specs_for_dependency","children":[],"call":["specs_for_name_and_platform any? ","GemHelpers  select_best_platform_match ","dep __platform ","Bundler  local_platform ","Gem Platform  match_spec? ","specs_for_name select "," lookup [] ","dep name "," lookup ","dep force_ruby_platform ","platform nil? ","GemHelpers  sort_best_platform_match ","(send\n  (lvar :specs_for_name) :map) compact ","s materialize_for_installation ","specs_for_name map ","matching_specs map! compact! ","matching_specs map! ","GemHelpers  select_best_platform_match  any? "," lookup [] _and_platform any? "," lookup []  select ","(send\n  (lvar : lookup [] ) :map) compact "," lookup []  map ","(send\n  (lvar :specs_for_name) :map) compact  map! compact! ","GemHelpers  select_best_platform_match  map! compact! ","(send\n  (lvar :specs_for_name) :map) compact  map! ","GemHelpers  select_best_platform_match  map! "]}," Bundler Standalone define_path_helpers":{"type":"method","name":"define_path_helpers","children":[],"call":[]}," Bundler Standalone extensions_dir":{"type":"method","name":"extensions_dir","children":[],"call":["Regexp  escape ","Gem  extension_api_version "]}," Bundler Source Rubygems fetch_gem_if_possible":{"type":"method","name":"fetch_gem_if_possible","children":[],"call":[" cached_gem "," fetch_gem ","spec remote "]}," Bundler LockfileParser may_include_redundant_platform_specific_gems?":{"type":"method","name":"may_include_redundant_platform_specific_gems?","children":[],"call":[" bundler_version < ","Gem Version  new "," bundler_version "," bundler_version nil? "]}," Bundler Definition deleted_deps":{"type":"method","name":"deleted_deps","children":[],"call":[" locked_dependencies - "," locked_dependencies "]}," Bundler Definition new_deps":{"type":"method","name":"new_deps","children":[],"call":["@dependencies - "," locked_dependencies "]}," Bundler CompactIndexClient Updater copy_file":{"type":"method","name":"copy_file","children":[],"call":["IO  copy_stream ","File  open ","s stat mode ","s stat ","SharedHelpers  filesystem_access "]}," Bundler SpecSet incomplete_specs":{"type":"method","name":"incomplete_specs","children":[],"call":["s is_a? ","@specs select "]}," Bundler SpecSet materialized_for_resolution":{"type":"method","name":"materialized_for_resolution","children":[],"call":["SpecSet  new ","(send\n  (ivar :@specs) :map) compact ","s materialize_for_resolution ","@specs map ","(send\n  (ivar :@s materialize_for_resolution s) :map) compact ","@s materialize_for_resolution s map "]}," Bundler RubyGemsGemInstaller prepare_extension_build":{"type":"method","name":"prepare_extension_build","children":[],"call":[" require ","Bundler  rubygems provides? ","Bundler  rubygems ","FileUtils  mkdir_p ","SharedHelpers  filesystem_access "]}," Bundler LazySpecification materialize_for_resolution":{"type":"method","name":"materialize_for_resolution","children":[],"call":[" __materialize__ "," platform ","Gem Platform  match_spec? "]}," Bundler LazySpecification materialize_for_installation":{"type":"method","name":"materialize_for_installation","children":[],"call":[" __materialize__ ","Bundler  local_platform "," platform "," ruby_platform_materializes_to_ruby_platform? ","candidates empty? "," source specs search "," source specs "," source ","MatchPlatform  platforms_match? ","spec platform "," source specs search select ","Dependency  new "," version "," name "," ruby_platform_materializes_to_ruby_platform? ! "," source is_a? "," source local! "," local_platform ","GemHelpers  select_best_platform_match ","target_platform != ","specification nil? "," use_exact_resolved_specifications? ","matching_specs empty? "," source specs search  empty? ","Bundler  local_platform  != "," platform  != "," local_platform  != "," __materialize__  nil? "," use_exact_resolved_ __materialize__ s? "]}," Bundler IncompleteSpecification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Definition reresolve":{"type":"method","name":"reresolve","children":[],"call":["Resolver  resolve "," platforms "," additional_base_requirements_for_resolve "," gem_version_promoter "," source_requirements "," expand_dependencies "," dependencies + "," metadata_dependencies "," dependencies "," converge_locked_specs "," remove_ruby_from_platforms_if_necessary! "]}," Bundler SpecSet incomplete_ruby_specs?":{"type":"method","name":"incomplete_ruby_specs?","children":[],"call":[" class new incomplete_specs any? "," class new incomplete_specs "," class new "," for "," class ","@incomplete_specs any? ","@specs empty? "," materialize incomplete_specs any? "," materialize incomplete_specs "," materialize "]}," Bundler SourceList get_with_fallback":{"type":"method","name":"get_with_fallback","children":[],"call":[" default_source "," get "]}," Gem Dependency force_ruby_platform":{"type":"method","name":"force_ruby_platform","children":[],"call":[" default_force_ruby_platform ","@force_ruby_platform nil? ! ","@force_ruby_platform nil? "," default_force_ruby_platform  nil? ! "," default_force_ruby_platform  nil? "]}," Bundler GemHelpers sort_best_platform_match":{"type":"method","name":"sort_best_platform_match","children":[],"call":[" same_deps "," same_specificity ","sorted_matching take_while ","sorted_matching first "," platform_specificity_match ","spec platform ","matching sort_by ","exact any? ","spec platform == ","matching select "]}," Bundler Definition remove_ruby_from_platforms_if_necessary!":{"type":"method","name":"remove_ruby_from_platforms_if_necessary!","children":[],"call":[" add_current_platform "," remove_platform ","@originally_locked_specs incomplete_ruby_specs? ! ","@originally_locked_specs incomplete_ruby_specs? "," platforms last == "," platforms last "," platforms "," platforms include? ! "," platforms include? ","Bundler  local_platform == ","Bundler  local_platform ","Bundler  frozen_bundle? "," resolver platforms= "," resolver "," expand_dependencies "]}," Bundler Definition verify_changed_sources!":{"type":"method","name":"verify_changed_sources!","children":[],"call":[" raise ","s source ","s name ","s source specs search empty? ","s source specs search ","s source specs ","@specs_that_changed_sources each "]}," Bundler Definition pin_locally_available_names":{"type":"method","name":"pin_locally_available_names","children":[],"call":["new_source_requirements []= ","local_source specs search any? ","local_source specs search ","local_source specs ","local_source local_only! ","original_source dup ","source_requirements each_with_object ","original_source dup  specs search any? ","original_source dup  specs search ","original_source dup  specs ","original_source dup  local_only! "]}," Bundler Definition resolve_prefering_local!":{"type":"method","name":"resolve_prefering_local!","children":[],"call":[" resolve "," sources remote! "," sources "]}," Bundler Outdated loaded_from_for":{"type":"method","name":"loaded_from_for","children":[],"call":["spec loaded_from ","spec respond_to? "]}," Bundler SpecSet delete":{"type":"method","name":"delete","children":[],"call":["@specs delete ","specs each "]}," Gem Platform ===":{"type":"method","name":"===","children":[],"call":["@version == ","other version ","other version nil? ","(str \"gnu\") include? ","@version nil? ","@os == ","@os != ","other os ","other cpu start_with? ","other cpu ","@cpu == ","(nil) include? ","other os start_with? ","@os start_with? ","other cpu == ","Gem Platform  === ","other version == ","(dstr\n  (str \"musl\")\n  (begin\n    (ivar :@version))) include? "," normalized_linux_version_ext == ","other normalized_linux_version_ext "," normalized_linux_version_ext "]}," Bundler Resolver remove_from_candidates":{"type":"method","name":"remove_from_candidates","children":[],"call":["s version == ","spec version ","s version ","s name == ","spec name ","s name ","@results_for [] reject ","@results_for [] ","dep name == ","dep name ","@results_for keys each ","@results_for keys ","@gem_version_promoter reset ","@base delete "," reset_spec_cache "]}," Bundler Resolver SpecGroup metadata_dependency":{"type":"method","name":"metadata_dependency","children":[],"call":["DepProxy  get_proxy ","Dependency  new ","requirement none? ","requirement nil? "]}," Bundler FetchMetadata matches_current_rubygems?":{"type":"method","name":"matches_current_rubygems?","children":[],"call":["Gem Requirement  default "," _remote_specification required_rubygems_version "," _remote_specification "]}," Bundler FetchMetadata matches_current_ruby?":{"type":"method","name":"matches_current_ruby?","children":[],"call":[" _remote_specification required_ruby_version "," _remote_specification ","Gem Requirement  default "]}," Bundler MatchMetadata matches_current_rubygems?":{"type":"method","name":"matches_current_rubygems?","children":[],"call":["@required_rubygems_version satisfied_by? ","Gem  rubygems_version "]}," Bundler MatchMetadata matches_current_ruby?":{"type":"method","name":"matches_current_ruby?","children":[],"call":["@required_ruby_version satisfied_by? ","Gem  ruby_version "]}," Bundler GemVersionPromoter reset":{"type":"method","name":"reset","children":[],"call":[]}," Bundler Definition resolver":{"type":"method","name":"resolver","children":[],"call":["Resolver  new "," platforms "," additional_base_requirements_for_resolve "," gem_version_promoter "," source_requirements "," converge_locked_specs "," remove_ruby_from_platforms_if_necessary! "," dependencies "," current_dependencies "," resolution_packages "]}," Bundler SpecSet delete_by_name_and_version":{"type":"method","name":"delete_by_name_and_version","children":[],"call":["spec version == ","spec version ","spec name == ","spec name ","@specs reject! "]}," Bundler SpecSet -":{"type":"method","name":"-","children":[],"call":["SpecSet  new "," to_a - ","other to_a "," to_a "]}," Bundler Resolver reset_spec_cache":{"type":"method","name":"reset_spec_cache","children":[],"call":["@gem_version_promoter reset "]}," Bundler Resolver base_requirements":{"type":"method","name":"base_requirements","children":[],"call":["@base base_requirements "]}," Bundler Resolver Base build_base_requirements":{"type":"method","name":"build_base_requirements","children":[],"call":["base_requirements []= ","d name ","@additional_base_requirements each ","DepProxy  get_proxy ","ls platform ","ls name ","Dependency  new ","ls version ","@base each ","d requirement ","Gem Requirement  new ","base_Gem Requirement  new uirements []= ","@additional_base_Gem Requirement  new uirements each ","d Gem Requirement  new uirement "]}," Bundler Resolver Base unlock_deps":{"type":"method","name":"unlock_deps","children":[],"call":["@additional_base_requirements delete ","lower_bound each ","@base delete_by_name_and_version ","exact_dep requirement requirements first last ","exact_dep requirement requirements first ","exact_dep requirement requirements ","exact_dep requirement ","exact_dep name ","exact each ","deps partition "]}," Bundler Resolver Base base_requirements":{"type":"method","name":"base_requirements","children":[],"call":[" build_base_requirements "]}," Bundler Resolver Base delete":{"type":"method","name":"delete","children":[],"call":["@base delete ","specs each ","incomplete_spec partially_complete_specs each ","incomplete_spec partially_complete_specs ","incomplete_specs each "]}," Bundler Resolver Base []":{"type":"method","name":"[]","children":[],"call":["@base [] "]}," Bundler Resolver Base initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :dependencies) :map) compact ","@packages []= ","Package  new ","options merge ","dep name ","dep_platforms empty? ","dep gem_platforms ","dependencies map ","hash []= ","Hash  new ","dependencies each ","dep dep name  ","dep gem_platforms  empty? "]}," Bundler CurrentRuby windows?":{"type":"method","name":"windows?","children":[],"call":["Gem  win_platform? "]}," Gem Platform normalized_linux_version_ext":{"type":"method","name":"normalized_linux_version_ext","children":[],"call":["without_gnu_nor_abi_modifiers empty? ","@version sub sub ","@version sub ","@version sub sub  empty? "]}," Bundler Resolver prerelease_specified":{"type":"method","name":"prerelease_specified","children":[],"call":["@gem_version_promoter prerelease_specified "]}," Bundler RemoteSpecification identifier":{"type":"method","name":"identifier","children":[],"call":["@platform to_s "," version "," name "]}," Bundler EndpointSpecification identifier":{"type":"method","name":"identifier","children":[],"call":[" platform to_s "," platform "," version "," name "]}," Gem Specification extensions_dir":{"type":"method","name":"extensions_dir","children":[],"call":["File  join ","Gem  extension_api_version "," base_dir ","Gem  default_ext_dir_for "]}," Bundler SelfManager fetch_spec_for":{"type":"method","name":"fetch_spec_for","children":[],"call":["Bundler  ui warn "," current_version "," lockfile_version ","Bundler  ui ","spec nil? ","source specs search first ","source specs search ","source specs ","source add_dependency_names ","source remote! ","Bundler Source Rubygems  new ","source specs search first  nil? ","source source specs search first s search first ","Bundler Source Rubygems  new  specs search first ","source source specs search first s search ","Bundler Source Rubygems  new  specs search ","source source specs search first s ","Bundler Source Rubygems  new  specs ","Bundler Source Rubygems  new  add_dependency_names ","Bundler Source Rubygems  new  remote! "]}," Bundler safe_load_marshal":{"type":"method","name":"safe_load_marshal","children":[],"call":[" load_marshal ","SafeMarshal  proc "]}," Bundler gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," URI HTTP origin":{"type":"method","name":"origin","children":[],"call":[" authority "," scheme "]}," URI HTTP authority":{"type":"method","name":"authority","children":[],"call":[" port "," host "," port == "," default_port "]}," URI Generic decoded_password":{"type":"method","name":"decoded_password","children":[],"call":["Bundler URI  decode_uri_component "]}," URI Generic decoded_user":{"type":"method","name":"decoded_user","children":[],"call":["Bundler URI  decode_uri_component "]}," URI _decode_uri_component":{"type":"method","name":"_decode_uri_component","children":[],"call":[]}," URI _encode_uri_component":{"type":"method","name":"_encode_uri_component","children":[],"call":[]}," URI decode_uri_component":{"type":"method","name":"decode_uri_component","children":[],"call":[]}," URI encode_uri_component":{"type":"method","name":"encode_uri_component","children":[],"call":[]}," URI register_scheme":{"type":"method","name":"register_scheme","children":[],"call":[]}," PubGrub default_logger":{"type":"method","name":"default_logger","children":[],"call":["logger level= "," Logger  new "," require "," Logger  new  level= "]}," PubGrub logger":{"type":"method","name":"logger","children":[],"call":[" default_logger "]}," PubGrub VersionUnion ==":{"type":"method","name":"==","children":[],"call":[" ranges == ","other ranges "," ranges "," class == ","other class "," class "]}," PubGrub VersionUnion inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," class "]}," PubGrub VersionUnion to_s":{"type":"method","name":"to_s","children":[],"call":["output join ","output << ","ne join ","range any? ","range to_s ","ne empty? ","ne map! ","range span ","ranges shift ","ne << ","range max ","ranges [] min == ","ranges [] min ","ranges [] ","ranges empty? ! ","ranges empty? "," ranges dup "," ranges ","ranges [] min to_s == ","range max to_s ","ranges [] min to_s ","range span  any? ","ranges shift  any? ","range span  to_s ","ranges shift  to_s ","range span  span ","ranges shift  span ","range span s shift ","ranges shift s shift "," ranges dup  shift ","range span  max ","ranges shift  max ","range span s [] min == ","ranges shift s [] min == "," ranges dup  [] min == ","range span s [] min ","ranges shift s [] min "," ranges dup  [] min ","range span s [] ","ranges shift s [] "," ranges dup  [] ","range span s empty? ! ","ranges shift s empty? ! "," ranges dup  empty? ! ","range span s empty? ","ranges shift s empty? "," ranges dup  empty? "," range span s dup "," ranges shift s dup ","  ranges dup  dup "," range span s "," ranges shift s ","  ranges dup  ","range span s [] min to_s == ","ranges shift s [] min to_s == "," ranges dup  [] min to_s == ","range span  max to_s ","ranges shift  max to_s ","range span s [] min to_s ","ranges shift s [] min to_s "," ranges dup  [] min to_s "]}," PubGrub VersionUnion union":{"type":"method","name":"union","children":[],"call":["VersionUnion  union "]}," PubGrub VersionUnion invert":{"type":"method","name":"invert","children":[],"call":[" ranges map inject "," ranges map "," ranges "]}," PubGrub VersionUnion upper_invert":{"type":"method","name":"upper_invert","children":[],"call":[" ranges last upper_invert "," ranges last "," ranges "]}," PubGrub VersionUnion intersect":{"type":"method","name":"intersect","children":[],"call":["VersionUnion  union ","new_ranges reject! ","my_ranges shift ","other_ranges shift ","other_range max < ","my_range max ","other_range max ","other_range empty? ","my_range max ! ","new_ranges << ","my_range intersect ","other ranges dup ","other ranges "," ranges dup "," ranges ","my_ranges shift s shift "," ranges dup  shift ","other_ranges shift s shift ","other ranges dup  shift ","other_ranges shift  max < ","my_ranges shift  max ","other_ranges shift  max ","other_ranges shift  empty? ","my_ranges shift  max ! ","my_ranges shift  intersect "]}," PubGrub VersionUnion any?":{"type":"method","name":"any?","children":[],"call":[]}," PubGrub VersionUnion empty?":{"type":"method","name":"empty?","children":[],"call":[]}," PubGrub VersionUnion allows_all?":{"type":"method","name":"allows_all?","children":[],"call":["my_range ! ! ","my_range ! ","my_ranges shift ","my_range allows_all? ","other ranges all? ","other ranges "," ranges dup "," ranges ","my_ranges shift  ! ! ","my_ranges shift  ! ","my_ranges shift s shift "," ranges dup  shift ","my_ranges shift  allows_all? "]}," PubGrub VersionUnion intersects?":{"type":"method","name":"intersects?","children":[],"call":["my_ranges shift ","other_ranges shift ","other_range max < ","my_range max ","other_range max ","other_range empty? ","my_range max ! ","my_range intersects? ","other ranges dup ","other ranges "," ranges dup "," ranges ","my_ranges shift s shift "," ranges dup  shift ","other_ranges shift s shift ","other ranges dup  shift ","other_ranges shift  max < ","my_ranges shift  max ","other_ranges shift  max ","other_ranges shift  empty? ","my_ranges shift  max ! ","my_ranges shift  intersects? "]}," PubGrub VersionUnion select_versions":{"type":"method","name":"select_versions","children":[],"call":["versions concat ","range partition_versions "," ranges inject "," ranges "]}," PubGrub VersionUnion include?":{"type":"method","name":"include?","children":[],"call":["(send\n  (send nil :ranges) :bsearch) ! ! ","(send\n  (send nil :ranges) :bsearch) ! ","r compare_version "," ranges bsearch "," ranges "]}," PubGrub VersionUnion eql?":{"type":"method","name":"eql?","children":[],"call":[" ranges eql? ","other ranges "," ranges "]}," PubGrub VersionUnion hash":{"type":"method","name":"hash","children":[],"call":[" ranges hash "," ranges "]}," PubGrub VersionUnion initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","r instance_of? ","ranges all? "]}," PubGrub VersionUnion normalize_ranges":{"type":"method","name":"normalize_ranges","children":[],"call":[]}," PubGrub VersionSolver add_incompatibility":{"type":"method","name":"add_incompatibility","children":[],"call":["@incompatibilities [] << ","@incompatibilities [] ","term package ","incompatibility terms each ","incompatibility terms "," logger debug "," logger ","term term package  "]}," PubGrub VersionSolver resolve_conflict":{"type":"method","name":"resolve_conflict","children":[],"call":[" raise ","SolveFailure  new "," logger info "," logger ","most_recent_satisfier cause ","most_recent_satisfier term ","Incompatibility  new ","Incompatibility ConflictCause  new ","new_terms << ","difference invert ","term package == ","most_recent_satisfier term package ","term package ","most_recent_satisfier cause terms reject ","most_recent_satisfier cause terms ","incompatibility terms - ","incompatibility terms "," add_incompatibility "," solution backtrack "," solution ","most_recent_satisfier decision? ","previous_level < ","most_recent_satisfier decision_level ","(lvar :previous_level) max ","difference_satisfier decision_level "," solution satisfier ","difference inverse ","difference empty? ","most_recent_satisfier term difference ","most_recent_term == ","satisfier decision_level ","most_recent_satisfier index < ","satisfier index ","most_recent_satisfier index ","most_recent_satisfier nil? ","incompatibility terms each ","incompatibility failure? ! ","incompatibility failure? ","incompatibility to_s == ","new_incompatibility to_s ","incompatibility to_s ","most_recent_ solution satisfier  cause ","most_recent_ solution satisfier  term ","most_recent_satisfier term difference  invert ","most_recent_ solution satisfier  term package ","most_recent_ solution satisfier  cause terms reject ","most_recent_ solution satisfier  cause terms ","Incompatibility  new  terms - ","Incompatibility  new  terms "," add_Incompatibility  new  ","most_recent_ solution satisfier  decision? ","(lvar :previous_level) max  < ","most_recent_ solution satisfier  decision_level ","(lvar :(lvar :previous_level) max ) max "," solution satisfier  decision_level ","most_recent_satisfier term difference _satisfier decision_level ","difference_ solution satisfier  decision_level "," solution  solution satisfier  ","most_recent_satisfier term difference  inverse ","most_recent_satisfier term difference  empty? ","most_recent_satisfier term most_recent_satisfier term difference  ","most_recent_ solution satisfier  term difference ","most_recent_ solution satisfier  index < "," solution satisfier  index ","most_recent_ solution satisfier  index ","most_recent_ solution satisfier  nil? ","Incompatibility  new  terms each ","Incompatibility  new  failure? ! ","Incompatibility  new  failure? ","Incompatibility  new  to_s == ","new_Incompatibility  new  to_s ","Incompatibility  new  to_s "]}," PubGrub VersionSolver choose_package_version":{"type":"method","name":"choose_package_version","children":[],"call":[" solution decide "," solution "," logger info "," logger "," solution satisfies? ","term package == ","term package ","incompatibility terms all? ","incompatibility terms "," add_incompatibility ","@seen_incompatibilities []= "," logger debug ","@seen_incompatibilities include? "," source incompatibilities_for each "," source incompatibilities_for "," source "," source no_versions_incompatibility_for ","version nil? "," source versions_for first "," source versions_for ","unsatisfied_term constraint range ","unsatisfied_term constraint ","t package == ","t package "," solution unsatisfied find "," solution unsatisfied "," next_package_to_try "," solution unsatisfied empty? ","conflict inspect ","term  next_package_to_try  == ","term  next_package_to_try  "," source no_ source versions_for first s_incompatibility_for "," source versions_for first  nil? "," source  source versions_for first s_for first "," source  source versions_for first s_for ","t  next_package_to_try  == ","t  next_package_to_try  "," next_ next_package_to_try _to_try "]}," PubGrub VersionSolver next_package_to_try":{"type":"method","name":"next_package_to_try","children":[],"call":["(send\n  (send\n    (send nil :solution) :unsatisfied) :min_by) package ","higher_versions count ","matching_versions count <= ","matching_versions count "," source versions_for ","range upper_invert "," source ","term constraint range ","term constraint ","term package "," solution unsatisfied min_by "," solution unsatisfied "," solution ","(send\n  (send\n    (send nil :solution) :unsatisfied) :min_by) term package  "," source versions_for  count "," source versions_for  count <= ","term constraint range  upper_invert ","term constraint term constraint range  ","term term package  "]}," PubGrub VersionSolver propagate_incompatibility":{"type":"method","name":"propagate_incompatibility","children":[],"call":["unsatisfied package "," solution derive ","unsatisfied invert "," solution "," logger debug "," logger ","unsatisfied ! ","relation == "," solution relation ","incompatibility terms each ","incompatibility terms "," solution relation  == "," solution  solution relation  "]}," PubGrub VersionSolver propagate":{"type":"method","name":"propagate","children":[],"call":["changed uniq! ","changed << "," propagate_incompatibility ","changed clear "," resolve_conflict ","result == ","@incompatibilities [] reverse_each ","@incompatibilities [] ","changed shift "," propagate_incompatibility  == "]}," PubGrub VersionSolver solve":{"type":"method","name":"solve","children":[],"call":[" solution decisions "," solution "," work "," solved? "]}," PubGrub VersionSolver work":{"type":"method","name":"work","children":[],"call":[" logger info "," logger ","Package  root? "," solution decisions each "," solution decisions "," solution "," solution attempted_solutions "," solved? "," propagate "," choose_package_version "]}," PubGrub VersionSolver solved?":{"type":"method","name":"solved?","children":[],"call":[" solution unsatisfied empty? "," solution unsatisfied "," solution "]}," PubGrub VersionSolver initialize":{"type":"method","name":"initialize","children":[],"call":[" propagate "," add_incompatibility ","Incompatibility  new ","Term  new ","VersionConstraint  any ","PartialSolution  new ","h []= ","Hash  new "]}," PubGrub VersionRange constraints":{"type":"method","name":"constraints","children":[],"call":["c << "," max "," include_max "," min "," include_min "," min == "," any? "," min to_s == "," max to_s "," min to_s "]}," PubGrub VersionRange ==":{"type":"method","name":"==","children":[],"call":[" include_max == ","other include_max "," include_max "," include_min == ","other include_min "," include_min "," max == ","other max "," max "," min == ","other min "," min "," class == ","other class "," class "]}," PubGrub VersionRange invert":{"type":"method","name":"invert","children":[],"call":["low union "," max ! "," max "," min ! "," min ","VersionRange  new "," include_max ! "," include_max "," include_min ! "," include_min "," class empty "," class "," any? ","VersionRange  new  union "]}," PubGrub VersionRange upper_invert":{"type":"method","name":"upper_invert","children":[],"call":["VersionRange  new "," include_max ! "," include_max "," max "," class empty "," class "]}," PubGrub VersionRange inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," class "]}," PubGrub VersionRange to_s":{"type":"method","name":"to_s","children":[],"call":[" constraints join "," constraints "]}," PubGrub VersionRange empty?":{"type":"method","name":"empty?","children":[],"call":[]}," PubGrub VersionRange any?":{"type":"method","name":"any?","children":[],"call":[" max ! "," max "," min ! "," min "]}," PubGrub VersionRange allows_all?":{"type":"method","name":"allows_all?","children":[],"call":["other include_max "," include_max ! "," include_max "," max <=> ","other max "," max ","other include_min "," include_min ! "," include_min "," min <=> ","other min "," min ","other min ! ","other max ! ","VersionUnion  new allows_all? ","VersionUnion  new ","other is_a? ","other empty? "]}," PubGrub VersionRange contiguous_to?":{"type":"method","name":"contiguous_to?","children":[],"call":["other include_min "," include_max "," max == ","other min "," max ","other include_max "," include_min "," min == ","other max "," min "," intersects? ","other empty? "]}," PubGrub VersionRange union":{"type":"method","name":"union","children":[],"call":["VersionUnion  union "," span "," contiguous_to? ","other union ","other is_a? "]}," PubGrub VersionRange span":{"type":"method","name":"span","children":[],"call":["VersionRange  new ","max_range include_max ","max_range max ","min_range include_min ","min_range min "," include_max "," max <=> ","other max "," max ","other max ! "," max ! "," include_min "," min <=> ","other min "," min ","other min ! "," min ! ","other empty? "]}," PubGrub VersionRange intersect":{"type":"method","name":"intersect","children":[],"call":["VersionRange  new ","max_range include_max ","max_range max ","min_range include_min ","min_range min ","max_range include_max ! ","min_range include_min ! ","min_range min <=> ","min_range equal? ! ","min_range equal? "," include_max "," max <=> ","other max "," max ","other max ! "," max ! "," include_min "," min <=> ","other min "," min ","other min ! "," min ! ","other intersect ","other is_a? ","other empty? "]}," PubGrub VersionRange intersects?":{"type":"method","name":"intersects?","children":[],"call":[" strictly_higher? ! "," strictly_higher? "," strictly_lower? ! "," strictly_lower? ","other intersects? ","other is_a? ","other empty? "]}," PubGrub VersionRange strictly_higher?":{"type":"method","name":"strictly_higher?","children":[],"call":["other strictly_lower? "]}," PubGrub VersionRange strictly_lower?":{"type":"method","name":"strictly_lower?","children":[],"call":["other include_min ! ","other include_min "," include_max ! "," include_max "," max <=> ","other min "," max ","other min ! "," max ! "]}," PubGrub VersionRange compare_version":{"type":"method","name":"compare_version","children":[],"call":[" include_max ! "," include_max ","version <=> "," max "," include_min ! "," include_min "," min "]}," PubGrub VersionRange select_versions":{"type":"method","name":"select_versions","children":[],"call":[" partition_versions [] "," partition_versions "," any? "]}," PubGrub VersionRange partition_versions":{"type":"method","name":"partition_versions","children":[],"call":["versions slice ","versions size ","versions [] >= "," max ","versions [] ","versions [] nil? ","(irange\n  (int 0)\n  (send\n    (lvar :versions) :size)) bsearch ","versions [] > "," include_max? ","versions empty? "," max ! "," min "," include_min? "," min ! ","versions slice  slice ","versions slice  size ","versions slice  [] >= ","versions slice  [] ","versions slice  [] nil? ","(irange\n  (int 0)\n  (send\n    (lvar :versions slice ) :size)) bsearch ","versions slice  [] > ","versions slice  empty? "]}," PubGrub VersionRange include?":{"type":"method","name":"include?","children":[],"call":[" compare_version == "," compare_version "]}," PubGrub VersionRange ranges":{"type":"method","name":"ranges","children":[],"call":[]}," PubGrub VersionRange eql?":{"type":"method","name":"eql?","children":[],"call":[" ranges eql? ","other ranges "," ranges "," include_max eql? ","other include_max "," include_max "," include_min eql? ","other include_min "," include_min "," max eql? ","other max "," max "," min eql? ","other min "," min ","other is_a? ","other empty? ! ","other empty? "]}," PubGrub VersionRange hash":{"type":"method","name":"hash","children":[],"call":[" min hash ^ ^ ^ "," include_max hash "," include_max "," min hash ^ ^ "," include_min hash "," include_min "," min hash ^ "," max hash "," max "," min hash "," min "]}," PubGrub VersionRange initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub VersionRange any":{"type":"method","name":"any","children":[],"call":[]}," PubGrub VersionRange empty":{"type":"method","name":"empty","children":[],"call":[]}," PubGrub VersionRange Empty select_versions":{"type":"method","name":"select_versions","children":[],"call":[]}," PubGrub VersionRange Empty invert":{"type":"method","name":"invert","children":[],"call":["VersionRange  any "]}," PubGrub VersionRange Empty ==":{"type":"method","name":"==","children":[],"call":["other class == "," class ","other class "]}," PubGrub VersionRange Empty to_s":{"type":"method","name":"to_s","children":[],"call":[]}," PubGrub VersionRange Empty any?":{"type":"method","name":"any?","children":[],"call":[]}," PubGrub VersionRange Empty include?":{"type":"method","name":"include?","children":[],"call":[]}," PubGrub VersionRange Empty allows_all?":{"type":"method","name":"allows_all?","children":[],"call":["other empty? "]}," PubGrub VersionRange Empty intersect":{"type":"method","name":"intersect","children":[],"call":[]}," PubGrub VersionRange Empty intersects?":{"type":"method","name":"intersects?","children":[],"call":[]}," PubGrub VersionRange Empty hash":{"type":"method","name":"hash","children":[],"call":[" hash "]}," PubGrub VersionRange Empty eql?":{"type":"method","name":"eql?","children":[],"call":[" other empty? "," other ","other empty? "]}," PubGrub VersionRange Empty empty?":{"type":"method","name":"empty?","children":[],"call":[]}," PubGrub VersionRange Empty initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub VersionConstraint inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," PubGrub VersionConstraint any?":{"type":"method","name":"any?","children":[],"call":[" range any? "," range "]}," PubGrub VersionConstraint empty?":{"type":"method","name":"empty?","children":[],"call":[" range empty? "," range "]}," PubGrub VersionConstraint constraint_string":{"type":"method","name":"constraint_string","children":[],"call":[" range to_s "," range "," any? "]}," PubGrub VersionConstraint to_s":{"type":"method","name":"to_s","children":[],"call":[" constraint_string "," package "," any? "," package to_s ","Package  root? "]}," PubGrub VersionConstraint relation":{"type":"method","name":"relation","children":[],"call":[" overlap? "," subset? "]}," PubGrub VersionConstraint disjoint?":{"type":"method","name":"disjoint?","children":[],"call":[" overlap? ! "," overlap? "]}," PubGrub VersionConstraint overlap?":{"type":"method","name":"overlap?","children":[],"call":["other allows_any? "]}," PubGrub VersionConstraint subset?":{"type":"method","name":"subset?","children":[],"call":["other allows_all? "]}," PubGrub VersionConstraint allows_any?":{"type":"method","name":"allows_any?","children":[],"call":[" range intersects? ","other range "," range "]}," PubGrub VersionConstraint allows_all?":{"type":"method","name":"allows_all?","children":[],"call":[" range allows_all? ","other range "," range "]}," PubGrub VersionConstraint difference":{"type":"method","name":"difference","children":[],"call":[" intersect ","other invert "]}," PubGrub VersionConstraint invert":{"type":"method","name":"invert","children":[],"call":[" class new "," package "," class "," range invert "," range "]}," PubGrub VersionConstraint union":{"type":"method","name":"union","children":[],"call":[" class new "," range union ","other range "," range "," package "," class "," raise "," package == ","other package "]}," PubGrub VersionConstraint intersect":{"type":"method","name":"intersect","children":[],"call":[" class new "," range intersect ","other range "," range "," package "," class "," raise "," package == ","other package "]}," PubGrub VersionConstraint empty":{"type":"method","name":"empty","children":[],"call":[" new ","VersionRange  empty "]}," PubGrub VersionConstraint any":{"type":"method","name":"any","children":[],"call":[" new ","VersionRange  any "]}," PubGrub VersionConstraint exact":{"type":"method","name":"exact","children":[],"call":[" new ","VersionRange  new "]}," PubGrub VersionConstraint eql?":{"type":"method","name":"eql?","children":[],"call":[" range eql? ","other range "," range "," package eql? ","other package "," package "]}," PubGrub VersionConstraint hash":{"type":"method","name":"hash","children":[],"call":[" package hash ^ "," range hash "," range "," package hash "," package "]}," PubGrub VersionConstraint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub Term inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," PubGrub Term empty?":{"type":"method","name":"empty?","children":[],"call":[" normalized_constraint empty? "," normalized_constraint "]}," PubGrub Term negative?":{"type":"method","name":"negative?","children":[],"call":[" positive? ! "," positive? "]}," PubGrub Term positive?":{"type":"method","name":"positive?","children":[],"call":[]}," PubGrub Term satisfies?":{"type":"method","name":"satisfies?","children":[],"call":[" relation == "," relation "," raise "," package == ","other package "," package "]}," PubGrub Term normalized_constraint":{"type":"method","name":"normalized_constraint","children":[],"call":[" constraint invert "," constraint "," positive "]}," PubGrub Term relation":{"type":"method","name":"relation","children":[],"call":[" raise "," constraint allows_all? ","other constraint "," constraint ","other negative? "," negative? ","other constraint allows_all? ","other constraint allows_any? ! ","other constraint allows_any? "," positive? ","other positive? "," constraint relation "]}," PubGrub Term difference":{"type":"method","name":"difference","children":[],"call":[" intersect ","other invert "]}," PubGrub Term intersect":{"type":"method","name":"intersect","children":[],"call":[" class new ","positive constraint intersect ","negative constraint invert ","negative constraint ","positive constraint "," class "," negative? "," positive? "," constraint union ","other constraint "," constraint ","other negative? "," constraint intersect ","other positive? "," raise "," package != ","other package "," package "]}," PubGrub Term invert":{"type":"method","name":"invert","children":[],"call":[" class new ","@positive ! "," class "]}," PubGrub Term eql?":{"type":"method","name":"eql?","children":[],"call":[" constraint eql? ","other constraint "," constraint "," positive == ","other positive "," positive "]}," PubGrub Term hash":{"type":"method","name":"hash","children":[],"call":[" constraint hash ^ "," positive hash "," positive "," constraint hash "," constraint "]}," PubGrub Term to_s":{"type":"method","name":"to_s","children":[],"call":["@constraint to_s "," positive "]}," PubGrub Term initialize":{"type":"method","name":"initialize","children":[],"call":["@constraint package "]}," PubGrub StaticPackageSource parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["Bundler PubGrub RubyGems  parse_constraint ","@packages key? "]}," PubGrub StaticPackageSource dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":["@packages [] [] ","@packages [] "]}," PubGrub StaticPackageSource root_dependencies":{"type":"method","name":"root_dependencies","children":[],"call":[]}," PubGrub StaticPackageSource all_versions_for":{"type":"method","name":"all_versions_for","children":[],"call":["@packages [] keys ","@packages [] "]}," PubGrub StaticPackageSource initialize":{"type":"method","name":"initialize","children":[],"call":["DSL  new "]}," PubGrub StaticPackageSource DSL add":{"type":"method","name":"add","children":[],"call":["@packages [] []= ","@packages [] "," raise ","@packages [] key? ","Gem Version  new "," clean_deps "]}," PubGrub StaticPackageSource DSL root":{"type":"method","name":"root","children":[],"call":["@root_deps update "]}," PubGrub StaticPackageSource DSL initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub SolveFailure explanation":{"type":"method","name":"explanation","children":[],"call":["FailureWriter  new write ","FailureWriter  new "]}," PubGrub SolveFailure to_s":{"type":"method","name":"to_s","children":[],"call":[" explanation "]}," PubGrub SolveFailure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub RubyGems parse_constraint":{"type":"method","name":"parse_constraint","children":[],"call":["Bundler PubGrub VersionConstraint  new "," parse_range "," parse_ parse_range  "]}," PubGrub RubyGems parse_range":{"type":"method","name":"parse_range","children":[],"call":[" requirement_to_range ","Gem Requirement  new "]}," PubGrub RubyGems requirement_to_constraint":{"type":"method","name":"requirement_to_constraint","children":[],"call":["Bundler PubGrub VersionConstraint  new "," requirement_to_range "]}," PubGrub RubyGems requirement_to_range":{"type":"method","name":"requirement_to_range","children":[],"call":["ranges inject "," raise ","VersionRange  new invert ","VersionRange  new ","ver class new ","ver bump to_s + ","ver bump to_s ","ver bump ","ver class ","requirement requirements map ","requirement requirements ","ver ver class new  to_s + ","ver ver class new  to_s ","ver ver class new  "]}," PubGrub PartialSolution add_assignment":{"type":"method","name":"add_assignment","children":[],"call":["@cumulative_assignments []= ","@terms [] ","@relation_cache [] clear ","@relation_cache [] ","@terms []= ","old_term intersect ","@terms key? ","@required []= ","term positive? ","@assignments_by [] << ","@assignments_by [] ","@assignments << ","term package ","assignment term ","@assignment term s [] ","@assignment term s []= ","@terms []  intersect ","old_assignment term  intersect ","@assignment term s key? ","assignment term  positive? ","term term package  ","assignment term  package ","assignment assignment term  "]}," PubGrub PartialSolution reset!":{"type":"method","name":"reset!","children":[],"call":["h []= ","Hash  new "," compare_by_identity "]}," PubGrub PartialSolution backtrack":{"type":"method","name":"backtrack","children":[],"call":[" add_assignment ","new_assignments each "," reset! ","Hash  [] "," decisions first "," decisions ","assignment decision_level <= ","assignment decision_level "," assignments select "," assignments "]}," PubGrub PartialSolution decide":{"type":"method","name":"decide","children":[],"call":[" add_assignment ","Assignment  decision "," assignments length "," assignments "," decision_level "," decisions []= "," decisions "," add_Assignment  decision  "," Assignment  decision s length "," Assignment  decision s "]}," PubGrub PartialSolution unsatisfied":{"type":"method","name":"unsatisfied","children":[],"call":["@terms [] ","(send\n  (send\n    (ivar :@required) :keys) :reject) map ","@decisions key? ","@required keys reject ","@required keys "]}," PubGrub PartialSolution satisfier":{"type":"method","name":"satisfier","children":[],"call":[" raise ","@cumulative_assignments [] satisfies? ","@cumulative_assignments [] ","@assignments_by [] bsearch ","@assignments_by [] ","term package "]}," PubGrub PartialSolution derive":{"type":"method","name":"derive","children":[],"call":[" add_assignment ","Assignment  new "," assignments length "," assignments "," decision_level "]}," PubGrub PartialSolution satisfies?":{"type":"method","name":"satisfies?","children":[],"call":[" relation == "," relation "]}," PubGrub PartialSolution relation":{"type":"method","name":"relation","children":[],"call":["@terms [] relation ","@terms [] ","@relation_cache [] [] ","@relation_cache [] ","@terms key? ! ","@terms key? ","term package ","term term package  "]}," PubGrub PartialSolution decision_level":{"type":"method","name":"decision_level","children":[],"call":["@decisions length "]}," PubGrub PartialSolution initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! "]}," PubGrub Package to_s":{"type":"method","name":"to_s","children":[],"call":[" name to_s "," name "]}," PubGrub Package root?":{"type":"method","name":"root?","children":[],"call":[]}," PubGrub Package root_version":{"type":"method","name":"root_version","children":[],"call":[]}," PubGrub Package root":{"type":"method","name":"root","children":[],"call":[]}," PubGrub Package <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," PubGrub Package inspect":{"type":"method","name":"inspect","children":[],"call":[" name inspect "," name "," class "]}," PubGrub Package initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PubGrub Incompatibility cleanup_terms":{"type":"method","name":"cleanup_terms","children":[],"call":["acc intersect ","common_terms inject ","terms group_by map ","terms group_by ","terms [] package != ","terms [] package ","terms [] ","terms length == ","terms length ","terms length <= ","Package  root? ","term package ","term positive? ","terms reject ","ConflictCause  === "," cause ","terms length != "," raise ","term inspect ","term is_a? ","terms each "]}," PubGrub Incompatibility pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q text ","q breakable "," to_s ","q group "," class "]}," PubGrub Incompatibility inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," class "]}," PubGrub Incompatibility to_s":{"type":"method","name":"to_s","children":[],"call":[" raise "," cause inspect "," cause ","negative join ","positive join ","positive [] to_s ","positive [] ","positive length == ","positive length "," terms select map "," terms select "," terms "," terms map join "," terms map "," terms [] invert "," terms [] "," terms length == "," terms length "," terms all? "," terms [] to_s ","term positive? "," failure? "," cause constraint "," cause package ","term invert ","term to_s ","term package ","term constraint any? ","term constraint "," terms select map  join "," terms select  join "," terms select  [] to_s "," terms select  [] "," terms select  length == "," terms select  length ","  terms [] s select map ","  terms [] s select ","  terms [] s ","  terms [] s map join ","  terms [] s map ","  terms [] s [] invert ","  terms [] s [] ","  terms [] s length == ","  terms [] s length ","  terms [] s all? ","  terms [] s [] to_s ","term  terms select ? "," terms []  positive? "," terms []  invert "," terms []  to_s "," terms []  package "," terms []  constraint any? "," terms []  constraint "]}," PubGrub Incompatibility external_incompatibilities":{"type":"method","name":"external_incompatibilities","children":[],"call":[" this ","(send\n  (send nil :cause) :conflict) flat_map "," cause other "," cause "," cause conflict "," conflict? "]}," PubGrub Incompatibility conflict?":{"type":"method","name":"conflict?","children":[],"call":["ConflictCause  === "," cause "]}," PubGrub Incompatibility failure?":{"type":"method","name":"failure?","children":[],"call":[" terms [] positive? "," terms [] "," terms ","Package  root? "," terms [] package "," terms length == "," terms length "," terms empty? "]}," PubGrub Incompatibility eql?":{"type":"method","name":"eql?","children":[],"call":[" terms eql? ","other terms "," terms "," cause eql? ","other cause "," cause "]}," PubGrub Incompatibility hash":{"type":"method","name":"hash","children":[],"call":[" cause hash ^ "," terms hash "," terms "," cause hash "," cause "]}," PubGrub Incompatibility initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@terms inspect ","@terms length != ","@terms length ","cause == "," cleanup_terms "," cleanup_terms  inspect "," cleanup_terms  length != "," cleanup_terms  length "]}," PubGrub FailureWriter count_derivations":{"type":"method","name":"count_derivations","children":[],"call":[" count_derivations ","cause other ","cause conflict ","incompatibility cause ","incompatibility conflict? ","@derivations []= ","@derivations [] ","@derivations has_key? ","incompatibility cause  other ","incompatibility cause  conflict ","incompatibility incompatibility cause  "]}," PubGrub FailureWriter collapsible?":{"type":"method","name":"collapsible?","children":[],"call":["@line_numbers has_key? ! ","@line_numbers has_key? ","cause other ","cause conflict ","cause conflict conflict? ","cause other conflict? ","incompatibility cause ","@derivations [] > ","@derivations [] ","incompatibility cause  other ","incompatibility cause  conflict ","incompatibility cause  conflict conflict? ","incompatibility cause  other conflict? ","incompatibility incompatibility cause  "]}," PubGrub FailureWriter single_line?":{"type":"method","name":"single_line?","children":[],"call":["cause other conflict? ! ","cause other conflict? ","cause other ","cause conflict conflict? ! ","cause conflict conflict? ","cause conflict "]}," PubGrub FailureWriter visit":{"type":"method","name":"visit","children":[],"call":[" write_line ","cause other ","cause conflict "," visit ","derived_cause conflict ","derived_cause other ","derived_cause conflict conflict? ","derived cause "," collapsible? ","@line_numbers [] ","cause conflict conflict? ","cause other conflict? ","@lines << "," single_line? ","cause other cause ","cause conflict cause ","incompatibility cause ","incompatibility == ","@derivations [] > ","@derivations [] "," raise ","incompatibility conflict? "," write_@line_numbers []  ","incompatibility cause  other ","incompatibility cause  conflict ","derived cause  conflict ","cause other _cause conflict ","cause conflict _cause conflict ","derived_incompatibility cause  conflict ","derived cause  other ","cause other _cause other ","cause conflict _cause other ","derived_incompatibility cause  other ","derived cause  conflict conflict? ","cause other _cause conflict conflict? ","cause conflict _cause conflict conflict? ","derived_incompatibility cause  conflict conflict? ","cause other  cause ","cause conflict  cause ","derived incompatibility cause  ","@@line_numbers [] _numbers [] ","incompatibility cause  conflict conflict? ","incompatibility cause  other conflict? ","@@line_numbers [] s << "," single_@line_numbers [] ? ","incompatibility cause  other incompatibility cause  ","incompatibility cause  conflict incompatibility cause  ","incompatibility incompatibility cause  "]}," PubGrub FailureWriter write_line":{"type":"method","name":"write_line","children":[],"call":["@lines << ","@line_numbers []= ","@line_numbers length + ","@line_numbers length ","@line_@line_numbers length + s []= ","@line_@line_numbers length + s length + ","@line_@line_numbers length + s length "]}," PubGrub FailureWriter write":{"type":"method","name":"write","children":[],"call":["(send\n  (ivar :@lines) :map) join ","message gsub ","\n + ","  * ","padding + ","lead ljust ","message empty? ","@lines map ","(str \"(\") length ","@line_numbers values last ","@line_numbers values ","@line_numbers empty? "," visit ","@root to_s ","@root conflict? ","message gsub  gsub ","(str \"(\") length  + ","lead ljust  ljust ","message gsub  empty? "]}," PubGrub FailureWriter initialize":{"type":"method","name":"initialize","children":[],"call":[" count_derivations "]}," PubGrub BasicPackageSource incompatibilities_for":{"type":"method","name":"incompatibilities_for","children":[],"call":["Incompatibility  new ","Term  new ","VersionConstraint  new ","dep_constraint is_a? ! ","dep_constraint is_a? ","Bundler PubGrub Incompatibility InvalidDependency  new ","dep_constraint ! "," parse_dependency ","@packages include? ! ","@packages include? ","VersionRange  new ","sorted_versions [] ","high == ","sorted_versions length ","package_deps [] [] == ","package_deps [] [] ","package_deps [] ","high < ","low == ","low - ","low > ","sorted_versions index ","package_deps [] map ","@sorted_versions [] ","@cached_dependencies [] ","VersionConstraint  new  is_a? ! "," parse_dependency  is_a? ! ","VersionConstraint  new  is_a? "," parse_dependency  is_a? ","VersionConstraint  new  ! "," parse_dependency  ! ","@sorted_versions []  [] ","sorted_versions []  == ","sorted_versions index  == ","@sorted_versions []  length ","@cached_dependencies []  [] [] == ","@cached_dependencies []  [] [] ","@cached_dependencies []  [] ","sorted_versions []  < ","sorted_versions index  < ","sorted_versions []  - ","sorted_versions []  > ","@sorted_versions []  index ","@cached_dependencies []  [] map ","@@sorted_versions []  [] "]}," PubGrub BasicPackageSource no_versions_incompatibility_for":{"type":"method","name":"no_versions_incompatibility_for","children":[],"call":["Incompatibility  new ","Incompatibility NoVersions  new "]}," PubGrub BasicPackageSource versions_for":{"type":"method","name":"versions_for","children":[],"call":[" sort_versions_by_preferred ","versions size > ","versions size ","range select_versions ","@sorted_versions [] "," sort_range select_versions _by_preferred ","range select_versions  size > ","range select_versions  size ","range select_range select_versions  ","@sorted_range select_versions  [] "]}," PubGrub BasicPackageSource initialize":{"type":"method","name":"initialize","children":[],"call":["packages []= ","versions []= "," dependencies_for ","Hash  new "," root_dependencies ","package == ","h []= ","@cached_versions [] each with_index to_h ","@cached_versions [] each with_index ","@cached_versions [] each ","@cached_versions [] ","@cached_versions [] sort "," all_versions_for ","k == ","Package  root_version ","Package  root "]}," PubGrub BasicPackageSource sort_versions_by_preferred":{"type":"method","name":"sort_versions_by_preferred","children":[],"call":["indexes [] ","sorted_versions sort_by ","@version_indexes [] ","@version_indexes []  [] ","@version_@version_indexes []  [] "]}," PubGrub BasicPackageSource root_dependencies":{"type":"method","name":"root_dependencies","children":[],"call":[" dependencies_for "]}," PubGrub BasicPackageSource parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":[" raise "]}," PubGrub BasicPackageSource dependencies_for":{"type":"method","name":"dependencies_for","children":[],"call":[" raise "]}," PubGrub BasicPackageSource all_versions_for":{"type":"method","name":"all_versions_for","children":[],"call":[" raise "]}," PubGrub Assignment decision?":{"type":"method","name":"decision?","children":[],"call":[" cause == "," cause "]}," PubGrub Assignment decision":{"type":"method","name":"decision","children":[],"call":[]}," PubGrub Assignment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FileUtils fu_starting_path?":{"type":"method","name":"fu_starting_path?","children":[],"call":[]}," FileUtils fu_clean_components":{"type":"method","name":"fu_clean_components","children":[],"call":["path << << ","path << ","clean << ","path chomp! ","clean pop ","(and\n  (send nil :fu_have_symlink?)\n  (send\n    (const nil :File) :symlink?\n    (lvar :path))) ! ","File  symlink? "," fu_have_symlink? ","clean last != ","clean last ","c == ","comp shift ","File  join ","comp empty? ","comp first == ","comp first ","File  join  << << ","File  join  << ","comp shift lean << ","path comp shift homp! ","File  join  chomp! ","comp shift lean pop ","(and\n  (send nil :fu_have_symlink?)\n  (send\n    (comp shift onst nil :File) :symlink?\n    (lvar :path))) ! ","(and\n  (send nil :fu_have_symlink?)\n  (send\n    (const nil :File) :symlink?\n    (lvar :File  join ))) ! ","comp shift lean last != ","comp shift lean last ","comp shift  == ","comp shift omp shift ","comp shift omp empty? ","comp shift omp first == ","comp shift omp first "]}," FileUtils fu_relative_components_from":{"type":"method","name":"fu_relative_components_from","children":[],"call":["Array  new concat ","target [] ","Array  new ","base size - ","base size ","base [] "]}," FileUtils fu_split_path":{"type":"method","name":"fu_split_path","children":[],"call":["list reverse! ","list << ","parent == ","File  split ","File  path ","File  File  path  "]}," FileUtils ln_sr":{"type":"method","name":"ln_sr","children":[],"call":["srcs each ","link [] ","File  directory? ","srcs [] ","srcs size ","File  symlink "," remove_file "," fu_output_message ","File  join ","base pop ","srcdirs shift "," fu_starting_path? ! "," fu_starting_path? ","base last ","srcdirs first "," fu_relative_components_from "," fu_split_path ","Dir  pwd "," fu_clean_components ","File  expand_path ","File  realdirpath ","File  realpath ","File  dirname ","File  basename ","File  path "," proc "," Array ","File  join rcFile  join  each ","File  path rcFile  path  each "," Array  each ","File  File  join irectory? ","File  join rcFile  join  [] ","File  path rcFile  path  [] "," Array  [] ","File  join rcFile  join  File  join ize ","File  path rcFile  path  File  path ize "," Array  size ","File  File  join ymlink ","File  File  path ymlink "," fu_output_meFile  join File  join age "," fu_output_meFile  path File  path age ","baFile  join e pop ","baFile  path e pop "," fu_relative_components_from  pop ","File  join rcdirFile  join  File  join hift ","File  path rcdirFile  path  File  path hift "," fu_clean_components  shift "," fu_split_path  shift ","srcFile  join irs shift "," fu_File  join tarting_path? ! "," fu_File  path tarting_path? ! "," fu_File  join tarting_path? "," fu_File  path tarting_path? ","baFile  join e laFile  join t ","baFile  path e laFile  path t "," fu_relative_components_from  last ","File  join rcdirFile  join  firFile  join t ","File  path rcdirFile  path  firFile  path t "," fu_clean_components  first "," fu_split_path  first ","srcFile  join irs first "," fu_relative_componentFile  join _from "," fu_relative_componentFile  path _from "," fu_File  join plit_path "," fu_File  path plit_path ","Dir  pwFile  join  "," fu_clean_componentFile  join  "," fu_clean_componentFile  path  ","File  expanFile  join _path ","File  realFile  join irpath ","File  File  join irname ","File  baFile  join ename ","File  baFile  path ename ","File   fu_relative_components_from name "]}," Bundler UI Silent warn?":{"type":"method","name":"warn?","children":[],"call":[]}," Bundler UI Silent info?":{"type":"method","name":"info?","children":[],"call":[]}," Bundler UI Silent error?":{"type":"method","name":"error?","children":[],"call":[]}," Bundler UI Silent confirm?":{"type":"method","name":"confirm?","children":[],"call":[]}," Bundler UI Shell error?":{"type":"method","name":"error?","children":[],"call":[" level "]}," Bundler UI Shell warn?":{"type":"method","name":"warn?","children":[],"call":[" level "]}," Bundler UI Shell confirm?":{"type":"method","name":"confirm?","children":[],"call":[" level "]}," Bundler UI Shell info?":{"type":"method","name":"info?","children":[],"call":[" level "]}," Bundler SpecSet delete_by_name":{"type":"method","name":"delete_by_name","children":[],"call":["spec name == ","spec name ","@specs reject! "]}," Bundler Source Git current_branch":{"type":"method","name":"current_branch","children":[],"call":[" git_proxy current_branch "," git_proxy "]}," Bundler Source Git GitProxy supports_cloning_with_no_tags?":{"type":"method","name":"supports_cloning_with_no_tags?","children":[],"call":["Gem Version  new >= ","Gem Version  new "," version "]}," Bundler Source Git GitProxy supports_fetching_unreachable_refs?":{"type":"method","name":"supports_fetching_unreachable_refs?","children":[],"call":["Gem Version  new >= ","Gem Version  new "," version "]}," Bundler Source Git GitProxy full_clone?":{"type":"method","name":"full_clone?","children":[],"call":[" depth nil? "," depth "]}," Bundler Source Git GitProxy extra_fetch_args":{"type":"method","name":"extra_fetch_args","children":[],"call":["extra_args push "," revision "," legacy_locked_revision? "," depth_args "," path to_s "," path "]}," Bundler Source Git GitProxy depth_args":{"type":"method","name":"depth_args","children":[],"call":[" depth to_s "," depth "," full_clone? "]}," Bundler Source Git GitProxy extra_clone_args":{"type":"method","name":"extra_clone_args","children":[],"call":[" tag "," branch ","args unshift "," supports_cloning_with_no_tags? "," depth to_s "," depth "," full_clone? ","args empty? "," depth_args "," depth_args  unshift "," depth_args  empty? "," depth_ depth_args  "]}," Bundler Source Git GitProxy capture":{"type":"method","name":"capture","children":[],"call":["URICredentialsFilter  credential_filtered_string "," uri ","Open3  capture3 "," capture3_args_for "," require ","SharedHelpers  with_clean_git_env "]}," Bundler Source Git GitProxy credential_filtered_uri":{"type":"method","name":"credential_filtered_uri","children":[],"call":["URICredentialsFilter  credential_filtered_uri "," uri "]}," Bundler Source Git GitProxy configured_uri":{"type":"method","name":"configured_uri","children":[],"call":[" uri to_s "," uri ","File  exist? ","remote to_s ","remote userinfo ","Bundler  settings [] ","remote host ","Bundler  settings ","Bundler  URI ","(str \"https?:\") match? ","Bundler  URI  to_s ","Bundler  URI  userinfo ","Bundler  URI  host "]}," Bundler Source Git GitProxy verify":{"type":"method","name":"verify","children":[],"call":[" git strip "," git "," path "]}," Bundler Source Git GitProxy find_revision_for":{"type":"method","name":"find_revision_for","children":[],"call":[" raise ","MissingGitRevisionError  new "," credential_filtered_uri "," path ","e command "," verify "]}," Bundler Source Git GitProxy head_revision":{"type":"method","name":"head_revision","children":[],"call":[" verify "]}," Bundler Source Git GitProxy legacy_locked_revision?":{"type":"method","name":"legacy_locked_revision?","children":[],"call":["@revision =~ ","@revision nil? ! ","@revision nil? "]}," Bundler Source Git GitProxy pinned_to_full_sha?":{"type":"method","name":"pinned_to_full_sha?","children":[],"call":[" ref =~ "," ref "]}," Bundler Source Git GitProxy not_pinned?":{"type":"method","name":"not_pinned?","children":[],"call":[" ref nil? "," ref "," tag "," branch "]}," Bundler Source Git GitProxy fully_qualified_ref":{"type":"method","name":"fully_qualified_ref","children":[],"call":[" current_branch "," ref nil? "," ref "," tag "," branch "]}," Bundler Source Git GitProxy refspec":{"type":"method","name":"refspec","children":[],"call":[" ref "," ref start_with? "," ref split first "," ref split "," ref include? "," fully_qualified_ref "," pinned_to_full_sha? "," commit ","  ref  "]}," Bundler Source Git GitProxy depth":{"type":"method","name":"depth","children":[],"call":["parsed_depth to_i + ","parsed_depth to_i "," ref split last "," ref split "," ref "," ref include? "," pinned_to_full_sha? "," not_pinned? "," supports_fetching_unreachable_refs? ! "," supports_fetching_unreachable_refs? "," ref split last  to_i + "," ref split last  to_i "]}," Bundler Source Git GitProxy extra_ref":{"type":"method","name":"extra_ref","children":[],"call":[" ref start_with? "," ref "," full_clone? "," not_pinned? "]}," Bundler Source Git GitProxy clone_needs_unshallow?":{"type":"method","name":"clone_needs_unshallow?","children":[],"call":["@revision != "," head_revision "," full_clone? "," path join exist? "," path join "," path "]}," Bundler Source Git GitProxy clone_needs_extra_fetch?":{"type":"method","name":"clone_needs_extra_fetch?","children":[],"call":[" extra_ref "," git_retry "," path to_s "," path "," configured_uri "," extra_clone_args ","FileUtils  mkdir_p ","SharedHelpers  filesystem_access "," path dirname "," path exist? "," raise ","GitCommandError  new ","MissingGitRevisionError  new "," credential_filtered_uri "," explicit_ref ","err include? ","status success? "," capture ","Bundler Retry  new attempts ","Bundler Retry  new "," check_allowed "]}," Bundler Source Git GitProxy git_remote_fetch":{"type":"method","name":"git_remote_fetch","children":[],"call":[" raise ","GitCommandError  new "," path ","MissingGitRevisionError  new "," credential_filtered_uri "," explicit_ref ","err include? ","status success? "," capture ","Bundler Retry  new attempts ","Bundler Retry  new "," check_allowed ","(str \"fetch\") compact "," refspec "," configured_uri "," commit "]}," Bundler Source Git GitProxy current_branch":{"type":"method","name":"current_branch","children":[],"call":[" git strip "," git "," path "," allowed_with_path "," git_local strip "," git_local "," with_path "]}," Bundler Resolver bundler_not_found_message":{"type":"method","name":"bundler_not_found_message","children":[],"call":["(send\n  (const nil :File) :basename\n  (gvar :$PROGRAM_NAME)) join ","File  basename ","candidate_specs last version ","candidate_specs last ","candidate_specs any? "," filter_matching_specs "," source_for specs search "," source_for specs "," source_for "," default_bundler_source specs search "," default_bundler_source specs "," default_bundler_source "," filter_matching_specs  last version "," filter_matching_specs  last "," filter_matching_specs  any? "]}," Bundler Resolver to_dependency_hash":{"type":"method","name":"to_dependency_hash","children":[],"call":["deps []= ","current_req intersect "," parse_dependency ","dep requirement ","deps [] ","packages [] ","dep name ","dependencies inject ","deps []  intersect ","packages [] s [] "]}," Bundler Resolver requirement_to_range":{"type":"method","name":"requirement_to_range","children":[],"call":["ranges inject "," raise ","PubGrub VersionRange  new invert ","PubGrub VersionRange  new ","Resolver Candidate  new ","version bump to_s + ","version bump to_s ","version bump ","requirement requirements map ","requirement requirements ","Resolver Candidate  new platform_specific! ","Resolver Candidate  new generic! ","PubGrub VersionRange  new inResolver Candidate  new t ","PubGrub VersionRange  new inResolver Candidate  new generic! t ","ResolResolver Candidate  new  Candidate  new ","ResolResolver Candidate  new generic!  Candidate  new ","version Resolver Candidate  new  to_s + ","Resolver Candidate  new sion bump to_s + ","Resolver Candidate  new generic! sion bump to_s + ","version Resolver Candidate  new  to_s ","Resolver Candidate  new sion bump to_s ","Resolver Candidate  new generic! sion bump to_s ","version Resolver Candidate  new  ","Resolver Candidate  new sion bump ","Resolver Candidate  new generic! sion bump ","ResolResolver Candidate  new  Candidate  new platform_specific! ","ResolResolver Candidate  new generic!  Candidate  new platform_specific! ","ResolResolver Candidate  new  Candidate  new generic! ","ResolResolver Candidate  new generic!  Candidate  new generic! "]}," Bundler Resolver other_specs_matching_message":{"type":"method","name":"other_specs_matching_message","children":[],"call":["message << ","(send\n  (lvar :specs) :map) join ","s full_name ","specs map ","String  new ","String  new  << "]}," Bundler Resolver prepare_dependencies":{"type":"method","name":"prepare_dependencies","children":[],"call":["(send\n  (send nil :to_dependency_hash\n    (lvar :requirements)\n    (lvar :packages)) :map) compact to_h ","(send\n  (send nil :to_dependency_hash\n    (lvar :requirements)\n    (lvar :packages)) :map) compact "," raise_not_found! ","dep_package current_platform? "," versions_for empty? "," versions_for ","dep_constraint range ","name == ","dep_package platforms empty? ","dep_package platforms ","dep_package name "," to_dependency_hash map "," to_dependency_hash ","@packages delete ","versions empty? ","dep_package consider_prereleases! ","@sorted_versions delete ","dep_package ignores_prereleases? ","  versions_for _for empty? ","  versions_for _for ","dep_package name  == ","dep_package dep_package name  "," versions_for  empty? ","@sorted_ versions_for  delete "]}," Bundler Resolver repository_for":{"type":"method","name":"repository_for","children":[],"call":[" source_for ","package name "]}," Bundler Resolver sort_versions":{"type":"method","name":"sort_versions","children":[],"call":["@gem_version_promoter sort_versions reverse ","@gem_version_promoter sort_versions ","versions size > ","versions size "]}," Bundler Resolver filter_matching_specs":{"type":"method","name":"filter_matching_specs","children":[],"call":[" requirement_satisfied_by? ","specs select "," Array flat_map "," Array "]}," Bundler Resolver raise_not_found!":{"type":"method","name":"raise_not_found!","children":[],"call":[" raise ","message << "," other_specs_matching_message ","specs any? ","String  new ","platforms join ","platforms first ","platforms size == ","platforms size ","package platforms ","specs_matching_requirement any? "," filter_matching_specs ","package dependency requirement ","package dependency ","Bundler  settings app_cache_path ","Bundler  settings ","Bundler  app_cache exist? ","Bundler  app_cache ","SharedHelpers  pretty_dependency ","@all_specs [] "," source_for ","package name ","String  new  << "," other_specs_matching_String  new  "," other_@all_specs [] _matching_message ","@all_specs []  any? ","package platforms  join ","package platforms  first ","package platforms  size == ","package platforms  size ","package package platforms  "," filter_matching_specs  any? ","@all_specs [] _matching_requirement any? "," filter_matching_@all_specs []  ","@all_@all_specs []  [] ","  source_for _for ","package package name  "]}," Bundler Resolver all_versions_for":{"type":"method","name":"all_versions_for","children":[],"call":[" sort_versions ","groups << ","Resolver Candidate  new ","platform_specs == ","ruby_specs any? "," select_best_platform_match ","platform_specs empty? ","package platforms flat_map ","package platforms ","results group_by reduce ","results group_by "," filter_matching_specs "," base_requirements [] "," base_requirements ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :name)) :+\n  (send\n    (ivar :@all_specs) :[]\n    (lvar :name))) uniq ","@base [] + ","@all_specs [] ","@base [] ","package name ","package force_ruby_platform? ","spec platform ","spec version hash ","spec version ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :name)) :+\n  (send nil :filter_prereleases\n    (send\n      (ivar :@all_specs) :[]\n      (lvar :name))\n    (lvar :package))) uniq "," filter_prereleases ","results << ","Gem  loaded_specs [] ","Gem  loaded_specs "," bundler_pinned_to_current_version? ! "," bundler_pinned_to_current_version? ","name == "," select_best_platform_match  any? "," filter_matching_specs  group_by reduce ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :name)) :+\n  (send\n    (ivar :@all_specs) :[]\n    (lvar :name))) uniq  group_by reduce "," filter_matching_specs  group_by ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :name)) :+\n  (send\n    (ivar :@all_specs) :[]\n    (lvar :name))) uniq  group_by ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :package name )) :+\n  (send\n    (ivar :@all_specs) :[]\n    (lvar :package name ))) uniq ","package package name  ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :package name )) :+\n  (send nil :filter_prereleases\n    (send\n      (ivar :@all_specs) :[]\n      (lvar :package name ))\n    (lvar :package))) uniq "," filter_matching_specs  << ","(send\n  (send\n    (ivar :@base) :[]\n    (lvar :name)) :+\n  (send\n    (ivar :@all_specs) :[]\n    (lvar :name))) uniq  << ","package name  == "]}," Bundler Resolver incompatibilities_for":{"type":"method","name":"incompatibilities_for","children":[],"call":["PubGrub Incompatibility  new ","dep_constraint constraint_string ","package root? ","dep_package meta? ","PubGrub Term  new ","PubGrub VersionConstraint  new ","PubGrub VersionRange  new ","sorted_versions [] ","high == ","sorted_versions length ","package_deps [] [] == ","package_deps [] [] ","package_deps [] ","high < ","low == ","low - ","low > ","sorted_versions index ","PubGrub Incompatibility CircularDependency  new ","package == ","package_deps [] map ","@sorted_versions [] ","@cached_dependencies [] ","@sorted_versions []  [] ","sorted_versions []  == ","sorted_versions index  == ","@sorted_versions []  length ","@cached_dependencies []  [] [] == ","@cached_dependencies []  [] [] ","@cached_dependencies []  [] ","sorted_versions []  < ","sorted_versions index  < ","sorted_versions []  - ","sorted_versions []  > ","@sorted_versions []  index ","@cached_dependencies []  [] map ","@@sorted_versions []  [] "]}," Bundler Resolver no_versions_incompatibility_for":{"type":"method","name":"no_versions_incompatibility_for","children":[],"call":["Incompatibility  new "," other_specs_matching_message ","specs_matching_other_platforms any? "," repository_for ","package platforms join ","package platforms "," filter_matching_specs ","@all_specs [] "," bundler_not_found_message ","name == ","Gem Requirement  new ","req split ","constraint_string split map ","constraint_string split ","constraint constraint_string ","unsatisfied_term constraint ","package name ","PubGrub Incompatibility NoVersions  new "," bundler_pinned_to_current_version? "," filter_matching_specs  any? ","package name  == ","constraint constraint_string  split map ","unsatisfied_term constraint _string split map ","constraint constraint_string  split ","unsatisfied_term constraint _string split ","constraint constraint constraint_string  ","unsatisfied_term constraint  unsatisfied_term constraint _string ","unsatisfied_term unsatisfied_term constraint  ","package package name  "]}," Bundler Resolver versions_for":{"type":"method","name":"versions_for","children":[],"call":[" sort_versions ","range select_versions ","@sorted_versions [] "," sort_range select_versions  ","range select_range select_versions  ","@sorted_range select_versions  [] "]}," Bundler Resolver parse_dependency":{"type":"method","name":"parse_dependency","children":[],"call":["PubGrub VersionConstraint  new "," requirement_to_range ","PubGrub VersionRange  any "," repository_for is_a? "," repository_for "," requirement_to_ requirement_to_range  "," requirement_to_PubGrub VersionRange  any  "]}," Bundler Resolver solve_versions":{"type":"method","name":"solve_versions","children":[],"call":[" raise ","SolveFailure  new ","explanation << ","e message "," setup_solver ","@base unlock_names ","Bundler  ui debug ","names_to_unlock join ","Bundler  ui ","names_to_unlock any? ","names_to_unlock uniq! ","no_versions_incompat extended_explanation ","incompat cause is_a? ","incompat cause ","(send\n  (lvar :cause) :incompatibility) find ","cause satisfier ","cause incompatibility ","names_to_unlock << "," base_requirements [] "," base_requirements ","term package name ","term package ","incompatibility terms each ","incompatibility terms ","incompatibility cause ","incompatibility conflict? ","e incompatibility ","(send\n  (lvar :result) :map) flatten uniq ","(send\n  (lvar :result) :map) flatten ","version to_specs ","result map ","solver solve ","PubGrub VersionSolver  new ","@base include_prereleases ","names_to_allow_prereleases_for join ","names_to_allow_prereleases_for any? ","names_to_relax any? ","names_to_unlock + "," find_names_to_relax ","e message  << "," setup_PubGrub VersionSolver  new  ","@base unlock_term package name s ","term package name s_to_unlock join ","term package name s_to_unlock any? ","term package name s_to_unlock uniq! ","no_versions_incompat extended_e message  ","no_versions_incompat no_versions_incompat extended_explanation  ","incompat incompatibility cause  is_a? ","incompat incompatibility cause  ","(send\n  (lvar :cause) :cause incompatibility ) find ","(send\n  (lvar :cause) :e incompatibility ) find ","(send\n  (lvar :incompatibility cause ) :incompatibility) find ","incompatibility cause  satisfier ","cause cause incompatibility  ","cause e incompatibility  ","incompatibility cause  incompatibility ","term package name s_to_unlock << ","term package term package name  ","cause incompatibility  terms each ","e incompatibility  terms each ","cause incompatibility  terms ","e incompatibility  terms ","cause incompatibility  cause ","e incompatibility  cause ","incompatibility incompatibility cause  ","cause incompatibility  conflict? ","e incompatibility  conflict? ","e cause incompatibility  ","e e incompatibility  ","(send\n  (lvar :solver solve ) :map) flatten uniq ","(send\n  (lvar :solver solve ) :map) flatten ","solver solve  map ","PubGrub VersionSolver  new  solve ","term package name s_to_allow_prereleases_for join ","term package name s_to_allow_prereleases_for any? ","term package name s_to_relax any? ","names_to_unlock +  any? ","term package name s_to_unlock + "," find_term package name s_to_relax "," find_names_to_unlock +  "]}," Bundler Resolver setup_solver":{"type":"method","name":"setup_solver","children":[],"call":["logger level= "," debug? ","Bundler UI Shell  new ","dependencies []= ","versions []= "," to_dependency_hash ","version dependencies ","Hash  new ","package root? "," prepare_dependencies ","candidates []= "," all_versions_for sort "," all_versions_for ","specs []= ","s platform to_s ","s platform ","s version "," source_for specs search sort_by "," source_for specs search "," source_for specs "," source_for ","Resolver Candidate  new ","Resolver Root  new "," name_for_explicit_dependency_source ","d name == ","package name ","d name ","version dependencies reject ","(send\n  (send\n    (send\n      (send nil :source_for\n        (lvar :name)) :specs) :search\n    (lvar :name)) :reject) sort_by ","d requirement satisfied_by? ! ","d requirement satisfied_by? ","d requirement ","s dependencies any? ","s dependencies "," source_for specs search reject ","Bundler UI Shell  new  level= ","package Resolver Root  new ? "]}," Bundler Resolver SpecGroup exemplary_spec":{"type":"method","name":"exemplary_spec","children":[],"call":["@specs first "]}," Bundler Resolver SpecGroup sorted_spec_names":{"type":"method","name":"sorted_spec_names","children":[],"call":["@specs map sort ","@specs map "]}," Bundler Resolver SpecGroup dependencies":{"type":"method","name":"dependencies","children":[],"call":["(send\n  (ivar :@specs) :map) flatten uniq ","(send\n  (ivar :@specs) :map) flatten "," __dependencies + "," metadata_dependencies "," __dependencies ","@specs map "]}," Bundler Resolver SpecGroup empty?":{"type":"method","name":"empty?","children":[],"call":["@specs empty? "]}," Bundler Resolver Root root?":{"type":"method","name":"root?","children":[],"call":[]}," Bundler Resolver Root meta?":{"type":"method","name":"meta?","children":[],"call":[]}," Bundler Resolver Root initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Resolver Package current_platform?":{"type":"method","name":"current_platform?","children":[],"call":["@dependency current_platform? "]}," Bundler Resolver Package force_ruby_platform?":{"type":"method","name":"force_ruby_platform?","children":[],"call":["@dependency force_ruby_platform "]}," Bundler Resolver Package prerelease_specified?":{"type":"method","name":"prerelease_specified?","children":[],"call":["@dependency prerelease? ","@prerelease == "]}," Bundler Resolver Package unlock?":{"type":"method","name":"unlock?","children":[],"call":["@unlock include? "," name ","@unlock empty? "]}," Bundler Resolver Package hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," Bundler Resolver Package ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name "," class == ","other class "," class "]}," Bundler Resolver Package meta?":{"type":"method","name":"meta?","children":[],"call":["@name end_with? "]}," Bundler Resolver Package root?":{"type":"method","name":"root?","children":[],"call":[]}," Bundler Resolver Package to_s":{"type":"method","name":"to_s","children":[],"call":["@name delete "]}," Bundler Resolver Package initialize":{"type":"method","name":"initialize","children":[],"call":["Dependency  new ","locked_specs [] first ","locked_specs [] ","@dependency prerelease? "]}," Bundler Resolver Incompatibility initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Bundler Resolver Candidate to_s":{"type":"method","name":"to_s","children":[],"call":["@platforms join ","@version to_s ","@platforms empty? "]}," Bundler Resolver Candidate hash":{"type":"method","name":"hash","children":[],"call":[" sort_obj hash "," sort_obj "]}," Bundler Resolver Candidate eql?":{"type":"method","name":"eql?","children":[],"call":[" sort_obj eql? ","other sort_obj "," sort_obj ","@version eql? ","other version ","other canonical? "," canonical? ","other is_a? "," class "]}," Bundler Resolver Candidate ==":{"type":"method","name":"==","children":[],"call":[" sort_obj == ","other sort_obj "," sort_obj ","@version == ","other version ","other canonical? "," canonical? ","other is_a? "," class "]}," Bundler Resolver Candidate <=>":{"type":"method","name":"<=>","children":[],"call":[" sort_obj <=> ","other sort_obj "," sort_obj ","@version <=> ","other version ","other canonical? "," canonical? ","other is_a? "," class "]}," Bundler Resolver Candidate canonical?":{"type":"method","name":"canonical?","children":[],"call":["@spec_group empty? ! ","@spec_group empty? "]}," Bundler Resolver Candidate sort_obj":{"type":"method","name":"sort_obj","children":[],"call":[]}," Bundler Resolver Candidate segments":{"type":"method","name":"segments","children":[],"call":["@version segments "]}," Bundler Resolver Candidate prerelease?":{"type":"method","name":"prerelease?","children":[],"call":["@version prerelease? "]}," Bundler Resolver Candidate to_specs":{"type":"method","name":"to_specs","children":[],"call":["@spec_group to_specs ","package force_ruby_platform? ","package meta? "]}," Bundler Resolver Candidate dependencies":{"type":"method","name":"dependencies","children":[],"call":["@spec_group dependencies "]}," Bundler Resolver Candidate initialize":{"type":"method","name":"initialize","children":[],"call":["@platforms == ","Gem Version  new ","specs map sort_by uniq ","specs map sort_by ","specs map ","Resolver SpecGroup  new ","specs map uniq == ","specs map uniq ","specs map sort_by uniq  == "]}," Bundler Resolver Base unlock_names":{"type":"method","name":"unlock_names","children":[],"call":["dep name == ","dep name ","@additional_base_requirements reject! ","@base delete_by_name ","names each "," unrestrict_names "," loosen_names ","pins any? "," pins ","indirect_pins any? "," indirect_pins ","@base_requirements delete "," pins  any? ","  pins  ","indirect_ pins  any? "," indirect_pins  any? "," indirect_ pins  ","  indirect_pins  "]}," Bundler Index specs_by_name_and_version":{"type":"method","name":"specs_by_name_and_version","children":[],"call":["spec version == ","spec version "," specs_by_name select "," specs_by_name "]}," Bundler GemVersionPromoter segments_do_not_match?":{"type":"method","name":"segments_do_not_match?","children":[],"call":["a segments [] != ","b segments [] ","b segments ","a segments [] ","a segments ","(sym :major) index ","(sym :major) (sym :major) index  "]}," Bundler GemVersionPromoter either_version_older_than_locked?":{"type":"method","name":"either_version_older_than_locked?","children":[],"call":["b version < ","b version ","a version < ","a version "]}," Bundler GemVersionPromoter pre?":{"type":"method","name":"pre?","children":[],"call":[" pre == "," pre "]}," Bundler ForcePlatform default_force_ruby_platform":{"type":"method","name":"default_force_ruby_platform","children":[],"call":["Gem Platform REUSE_AS_BINARY_ON_TRUFFLERUBY  include? ! ","Gem Platform REUSE_AS_BINARY_ON_TRUFFLERUBY  include? "," name ","RUBY_ENGINE  == "]}," Bundler Definition check_missing_lockfile_specs":{"type":"method","name":"check_missing_lockfile_specs","children":[],"call":["all_locked_specs include? ! ","all_locked_specs include? ","dep name ","s dependencies any? ","s dependencies ","@locked_specs any? ","@locked_specs map << ","@locked_specs map ","@locked_specs delete ","missing any? ","@locked_specs select ","@locked_specs map <<  include? ! ","@locked_specs map <<  include? "]}," Bundler Definition start_resolution":{"type":"method","name":"start_resolution","children":[],"call":["SpecSet  new ","SpecSet  new for "," dependencies "," resolver start "," resolution_packages "," expanded_dependencies "," resolver ","spec name == ","spec name ","result find "," resolver start  find "]}," Bundler Definition resolution_packages":{"type":"method","name":"resolution_packages","children":[],"call":["packages []= ","Resolver Package  new ","@unlock [] ","dep gem_platforms ","dep name "," expanded_dependencies each "," expanded_dependencies ","h []= ","Hash  new "," additional_base_requirements_for_resolve ","Resolver Base  new "," gem_version_promoter pre? "," gem_version_promoter "," source_requirements "," remove_ruby_from_platforms_if_necessary! "," current_dependencies "," converge_locked_specs ","Resolver Base  new  []= ","dep gem_dep gem_platforms  ","dep dep name  "," remove_ruby_from_dep gem_platforms _if_necessary! "]}," Bundler CLI deprecated_ext_value?":{"type":"method","name":"deprecated_ext_value?","children":[],"call":[]}," Bundler CLI check_deprecated_ext_option":{"type":"method","name":"check_deprecated_ext_option","children":[],"call":[]}," Bundler Gem validate_rust_builder_rubygems_version":{"type":"method","name":"validate_rust_builder_rubygems_version","children":[],"call":[" exit ","Bundler  ui error ","Gem  rubygems_version ","Bundler  ui ","Gem Version  new > ","Gem Version  new "," rust_builder_required_rubygems_version "]}," Bundler Gem travis_removal_info":{"type":"method","name":"travis_removal_info","children":[],"call":[" exit ","Bundler  ui error ","Bundler  ui ","Bundler  settings [] == ","Bundler  settings [] ","Bundler  settings "," options [] == "," options [] "," options "]}," Bundler Gem rust_builder_required_rubygems_version":{"type":"method","name":"rust_builder_required_rubygems_version","children":[],"call":[]}," PubGrub VersionConstraint ==":{"type":"method","name":"==","children":[],"call":[" range == ","other range "," range "," package == ","other package "," package "]}," PubGrub StaticPackageSource DSL clean_deps":{"type":"method","name":"clean_deps","children":[],"call":["Bundler PubGrub RubyGems  parse_range include? ","Bundler PubGrub RubyGems  parse_range ","name == ","deps reject "]}," Bundler URINormalizer normalize_suffix":{"type":"method","name":"normalize_suffix","children":[],"call":["uri delete_suffix ","uri end_with? "]}," Bundler Source Git GitProxy commit":{"type":"method","name":"commit","children":[],"call":[" ref "," pinned_to_full_sha? "]}," Bundler Resolver filter_prereleases":{"type":"method","name":"filter_prereleases","children":[],"call":["s version prerelease? ","s version ","specs reject ","specs size > ","specs size ","package ignores_prereleases? "]}," Bundler Resolver find_names_to_relax":{"type":"method","name":"find_names_to_relax","children":[],"call":["names_to_allow_prereleases_for uniq ","names_to_unlock uniq ","no_versions_incompat extended_explanation ","incompat cause is_a? ","incompat cause ","(send\n  (lvar :cause) :incompatibility) find ","cause satisfier ","cause incompatibility ","names_to_allow_prereleases_for << ","package ignores_prereleases? ","names_to_unlock << "," base_requirements [] "," base_requirements ","package name ","term package ","incompatibility terms each ","incompatibility terms ","incompatibility cause ","incompatibility conflict? ","package name s_to_allow_prereleases_for uniq ","package name s_to_unlock uniq ","no_versions_incompat no_versions_incompat extended_explanation  ","incompat incompatibility cause  is_a? ","incompat incompatibility cause  ","(send\n  (lvar :cause) :cause incompatibility ) find ","(send\n  (lvar :incompatibility cause ) :incompatibility) find ","incompatibility cause  satisfier ","cause cause incompatibility  ","incompatibility cause  incompatibility ","package name s_to_allow_prereleases_for << ","term package  ignores_prereleases? ","package name s_to_unlock << ","package package name  ","term package  name ","term term package  ","cause incompatibility  terms each ","cause incompatibility  terms ","cause incompatibility  cause ","incompatibility incompatibility cause  ","cause incompatibility  conflict? "]}," Bundler Resolver Package consider_prereleases!":{"type":"method","name":"consider_prereleases!","children":[],"call":[]}," Bundler Resolver Package ignores_prereleases?":{"type":"method","name":"ignores_prereleases?","children":[],"call":["@prerelease == "]}," Bundler Resolver Candidate platform_specific!":{"type":"method","name":"platform_specific!","children":[],"call":[]}," Bundler Resolver Candidate generic!":{"type":"method","name":"generic!","children":[],"call":[]}," Bundler Resolver Base unrestrict_names":{"type":"method","name":"unrestrict_names","children":[],"call":["@base_requirements delete ","names each "]}," Bundler Resolver Base loosen_names":{"type":"method","name":"loosen_names","children":[],"call":["@base delete_by_name ","@base_requirements []= ","Gem Requirement  new ","@base_requirements [] requirements first [] ","@base_requirements [] requirements first ","@base_requirements [] requirements ","@base_requirements [] ","names each "]}," Bundler Resolver Base pins":{"type":"method","name":"pins","children":[],"call":["@base_requirements [] exact? ","@base_requirements [] ","names select "]}," Bundler Resolver Base indirect_pins":{"type":"method","name":"indirect_pins","children":[],"call":["dep name == ","dep name ","@requirements none? ","@base_requirements [] exact? ","@base_requirements [] ","names select "]}," Bundler Resolver Base include_prereleases":{"type":"method","name":"include_prereleases","children":[],"call":[" get_package consider_prereleases! "," get_package ","names each "]}," Bundler Resolver Base get_package":{"type":"method","name":"get_package","children":[],"call":["@packages [] "]}," Bundler LazySpecification use_exact_resolved_specifications?":{"type":"method","name":"use_exact_resolved_specifications?","children":[],"call":[" ruby_platform_materializes_to_ruby_platform? "," source is_a? ! "," source is_a? "," source "]}," Bundler Definition setup_sources_for_resolve":{"type":"method","name":"setup_sources_for_resolve","children":[],"call":[" sources remote! "," sources "," sources cached! ","@remote == "]}," Bundler Definition resolution_mode=":{"type":"method","name":"resolution_mode=","children":[],"call":["options [] "]}," Bundler SafeMarshal proc":{"type":"method","name":"proc","children":[],"call":[]}," Bundler Source Rubygems caches":{"type":"method","name":"caches","children":[],"call":["Bundler  rubygems gem_cache ","Bundler  rubygems "," cache_path "]}," Bundler Resolver bundler_pinned_to_current_version?":{"type":"method","name":"bundler_pinned_to_current_version?","children":[],"call":[" default_bundler_source nil? ! "," default_bundler_source nil? "," default_bundler_source "]}," Bundler Resolver default_bundler_source":{"type":"method","name":"default_bundler_source","children":[],"call":["@source_requirements [] "]}," Bundler Definition check_missing_lockfile_dep":{"type":"method","name":"check_missing_lockfile_dep","children":[],"call":["@locked_specs [] empty? ","@locked_specs [] ","d name "," current_dependencies find "," current_dependencies ","missing first name ","missing first ","@locked_specs delete ","missing any? ","all_locked_specs include? ! ","all_locked_specs include? ","dep name ","s dependencies any? ","s dependencies ","@locked_specs select ","@locked_specs map << ","@locked_specs map ","d name != ","@locked_specs map <<  include? ! ","@locked_specs map <<  include? "]}," Bundler Definition dependencies_with_bundler":{"type":"method","name":"dependencies_with_bundler","children":[],"call":["(send\n  (const nil :Dependency) :new\n  (str \"bundler\")\n  (ivar :@unlocking_bundler)) + "," dependencies ","Dependency  new "," dependencies map include? "," dependencies map "]}," Bundler Definition no_resolve_needed?":{"type":"method","name":"no_resolve_needed?","children":[],"call":[" nothing_changed? "," unlocking? ! "," unlocking? "]}," Bundler Definition bundler_version_to_lock":{"type":"method","name":"bundler_version_to_lock","children":[],"call":["Bundler  gem_version "]}," Bundler Definition filter_relevant":{"type":"method","name":"filter_relevant","children":[],"call":["d gem_platforms empty? ! ","d gem_platforms empty? ","d gem_platforms "," generic_local_platform ","d should_include? ","dependencies select "]}," Bundler Definition current_locked_dependencies":{"type":"method","name":"current_locked_dependencies","children":[],"call":[" filter_relevant "," locked_dependencies "]}," Bundler Source Git uri_with_specifiers":{"type":"method","name":"uri_with_specifiers","children":[],"call":["specifiers join ","specifiers any? ","specifiers compact! "]}," Bundler Source Git to_gemfile":{"type":"method","name":"to_gemfile","children":[],"call":[" uri_with_specifiers "," options [] "," options ","(str \"ref\") map "]}," Bundler Source Git GitProxy run_command":{"type":"method","name":"run_command","children":[],"call":["Bundler  ui warn ","Bundler  ui ","err empty? "," raise ","GitCommandError  new ","SharedHelpers  pwd ","status success? "," capture "]}," Bundler Source Git GitProxy redact_and_check_presence":{"type":"method","name":"redact_and_check_presence","children":[],"call":["URICredentialsFilter  credential_filtered_string "," uri ","command shelljoin "," require "," raise ","GitNotInstalledError  new ","Bundler  git_present? "]}," Bundler Source Git GitProxy git_local":{"type":"method","name":"git_local","children":[],"call":[" redact_and_check_presence "," run_command "]}," Bundler Source Git humanized_ref":{"type":"method","name":"humanized_ref","children":[],"call":[" ref "," shortref_for_display ","(str \"\\\\A[a-z0-9]{4,}\\\\z\") match? "," options [] "," options "," path "," local? "]}," Bundler Source Git identifier":{"type":"method","name":"identifier","children":[],"call":[" uri_with_specifiers "," glob_for_display "," cached_revision "," humanized_ref "]}," Bundler Source Git include?":{"type":"method","name":"include?","children":[],"call":[" submodules == ","other submodules "," submodules "," glob == ","other glob "," glob "," name == ","other name "," name "," uri == ","other uri "," uri ","other is_a? "]}," Bundler Fetcher AuthenticationForbiddenError initialize":{"type":"method","name":"initialize","children":[],"call":[" filter_uri "]}," Bundler Definition default_source":{"type":"method","name":"default_source","children":[],"call":[" sources default_source "," sources "]}," Bundler ParallelInstaller SpecInstallation dependencies_missing?":{"type":"method","name":"dependencies_missing?","children":[],"call":["spec_names include? ! ","spec_names include? ","d name "," dependencies any? "," dependencies ","all_specs map ","all_specs map  include? ! ","all_specs map  include? "]}," Bundler IncompleteSpecification ==":{"type":"method","name":"==","children":[],"call":[" partially_complete_specs == ","other partially_complete_specs "," partially_complete_specs "]}}