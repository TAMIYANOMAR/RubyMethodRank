{" SassC Native return_string_array":{"type":"method","name":"return_string_array","children":[],"call":[]}," SassC Native attach_function":{"type":"method","name":"attach_function","children":[],"call":[]}," SassC Native context_get_included_files":{"type":"method","name":"context_get_included_files","children":[],"call":[]}," SassC Engine render":{"type":"method","name":"render","children":[],"call":[" _to_tree render "," _to_tree ","Sass Util  silence_sass_warnings ","@options [] "," quiet? ","Native  delete_data_context ","Native  context_get_included_files "," raise ","SyntaxError  new ","SassC Native  context_get_error_message ","status != ","Native  context_get_output_string ","Native  compile_data_context ","Script  setup_custom_functions "," importer setup "," importer ","Native  option_set_include_path "," load_paths ","Native  option_set_input_path "," filename ","Native  option_set_is_indented_syntax_src "," sass? ","Native  context_get_options ","Native  data_context_get_context ","Native  make_data_context ","Native  context_get_error_message "," functions_handler setup "," functions_handler "," import_handler setup "," import_handler ","Native  option_set_output_style "," output_style_enum ","css force_encoding ","@template encoding ","Native  context_get_error_line ","Native  context_get_error_file ","Native  option_set_source_map_contents "," source_map_contents? ","Native  option_set_source_map_embed "," source_map_embed? ","Native  option_set_source_map_file "," source_map_file ","Native  option_set_source_comments "," line_comments? ","Native  option_set_precision "," precision ","@template dup ","@template empty? ","Native  context_get_source_map_string ","Native  option_set_omit_source_map_url "," omit_source_map_url? ","@source_map force_encoding ","@source_map is_a? ","@Native  context_get_options  [] ","Native  delete_data_Native  data_context_get_context  ","Native  delete_Native  make_data_context  ","Native  Native  data_context_get_context _get_included_files ","SassC Native  context_get_error_SassC Native  context_get_error_message  ","SassC Native  context_get_error_Native  context_get_error_message  ","SassC Native  Native  data_context_get_context _get_error_message ","Native  compile_data_context  != ","Native  Native  data_context_get_context _get_output_string ","Native  compile_data_Native  data_context_get_context  ","Native  compile_Native  make_data_context  "," Native  context_get_error_file  ","Native  Native  data_context_get_context _get_options ","Native  context_get_Native  context_get_options  ","Native  data_Native  data_context_get_context _get_Native  data_context_get_context  ","Native  Native  make_data_context _get_context ","Native  make_data_Native  data_context_get_context  ","Native  make_Native  make_data_context  ","Native  context_get_error_SassC Native  context_get_error_message  ","Native  context_get_error_Native  context_get_error_message  ","Native  Native  data_context_get_context _get_error_message ","Native  context_get_output_string  force_encoding ","Native  Native  data_context_get_context _get_error_line ","Native  context_get_error_Native  context_get_error_line  ","Native  Native  data_context_get_context _get_error_file "," Native  context_get_error_line _comments? ","Native  Native  data_context_get_context _get_source_map_string ","Native  context_get_source_map_string  force_encoding ","Native  context_get_source_map_string  is_a? "]}," SassC Engine initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," SassC Script formatted_function_name":{"type":"method","name":"formatted_function_name","children":[],"call":[]}," SassC Script setup_custom_functions":{"type":"method","name":"setup_custom_functions","children":[{"type":"method","name":"options=","children":[],"asgn":[],"call":[]},{"type":"method","name":"options","children":[],"asgn":[],"call":[]}],"call":[]}," SassC Script custom_functions":{"type":"method","name":"custom_functions","children":[],"call":[]}," SassC Script String to_s":{"type":"method","name":"to_s","children":[],"call":["SassC Script String  quote ","opts [] "," value ","@value gsub ","@type == ","opts [] == "]}," SassC Script String to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_string "," to_s "]}," SassC Script String initialize":{"type":"method","name":"initialize","children":[],"call":["value freeze ","value == ","value nil? "]}," SassC Script String unquote":{"type":"method","name":"unquote","children":[],"call":[]}," SassC Script String type":{"type":"method","name":"type","children":[],"call":[]}," SassC Script String quote":{"type":"method","name":"quote","children":[],"call":[]}," SassC Script String value":{"type":"method","name":"value","children":[],"call":[]}," SassC Native native_string":{"type":"method","name":"native_string","children":[],"call":[]}," SassC Native make_data_context":{"type":"method","name":"make_data_context","children":[],"call":[]}," SassC Importer Import to_s":{"type":"method","name":"to_s","children":[],"call":[" source_map_path "," source "," path "]}," SassC Importer Import initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC Importer imports_to_native":{"type":"method","name":"imports_to_native","children":[],"call":[]}," SassC Importer empty_imports":{"type":"method","name":"empty_imports","children":[],"call":[]}," SassC Importer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC Importer setup":{"type":"method","name":"setup","children":[],"call":["SassC Native  option_set_importer ","SassC Native  make_importer "," class imports_to_native "," class "," imports ","FFI Function  new "]}," SassC Importer imports":{"type":"method","name":"imports","children":[],"call":[" raise "]}," SassC Engine load_paths":{"type":"method","name":"load_paths","children":[],"call":["paths join ","@options [] ","paths empty? ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_paths))\n  (array)) + ","SassC  load_paths ","@options []  join ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_paths))\n  (array)) +  join ","@options []  empty? ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_paths))\n  (array)) +  empty? ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_@options [] ))\n  (array)) + ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_paths))\n  (array)) + ))\n  (array)) + ","SassC  load_@options []  ","SassC  load_(or\n  (send\n    (ivar :@options) :[]\n    (sym :load_paths))\n  (array)) +  "]}," SassC Engine importer":{"type":"method","name":"importer","children":[],"call":["@options [] new ","@options [] "]}," SassC Engine sass?":{"type":"method","name":"sass?","children":[],"call":["@options [] to_sym == ","@options [] to_sym ","@options [] "]}," SassC Engine filename":{"type":"method","name":"filename","children":[],"call":["@options [] "]}," SassC Engine quiet?":{"type":"method","name":"quiet?","children":[],"call":["@options [] "]}," SassC Engine dependencies":{"type":"method","name":"dependencies","children":[],"call":["Dependency  from_filenames "," raise "]}," SassC Dependency from_filenames":{"type":"method","name":"from_filenames","children":[],"call":[]}," SassC Dependency initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC ImportHandler imports_to_native":{"type":"method","name":"imports_to_native","children":[],"call":["Native  import_set_list_entry ","Native  make_import_entry ","import path ","Native  native_string ","import source ","imports each_with_index ","Native  make_import_list ","imports size ","Native  import_set_list_Native  make_import_entry  ","Native  make_import_Native  make_import_entry  ","import Native  native_string  ","Native  make_Native  make_import_list  "]}," SassC ImportHandler import_function":{"type":"method","name":"import_function","children":[],"call":[" imports_to_native ","@importer imports ","FFI Function  new ","Native  import_get_path ","Native  compiler_get_last_import ","Native  import_get_abs_path ","Native  import_get_imp_path ","Native  compiler_get_Native  compiler_get_last_import  "]}," SassC ImportHandler setup":{"type":"method","name":"setup","children":[],"call":["Native  option_set_c_importers ","Native  function_set_list_entry ","Native  make_function_list ","Native  make_importer "," import_function ","Native  function_set_Native  make_function_list _entry ","Native  make_function_Native  make_function_list  "]}," SassC ImportHandler initialize":{"type":"method","name":"initialize","children":[],"call":["options [] new ","options [] "]}," SassC FunctionsHandler setup":{"type":"method","name":"setup","children":[],"call":["Native  option_set_c_functions ","Native  function_set_list_entry ","Native  make_function ","callbacks [] ","Script  formatted_function_name ","callbacks []= ","Script String  new to_native ","Script String  new ","value to_native ","value type ","Script String  unquote ","value to_s ","functs send ","Script String  type ","Native  string_get_value dup ","Native  string_get_value ","Native  list_get_value ","Native  list_get_length ","FFI Function  new ","Script  custom_functions each_with_index ","Script  custom_functions ","functs options= ","FunctionWrapper  extend ","Native  make_function_list ","Script  custom_functions count ","@callbacks [] ","@function_names [] ","@function_names []= ","@callbacks []= "," error ","exception message "," to_native_value ","functions send "," arguments_from_native_list ","functions options= ","custom_function_arguments << ","Native  value_get_tag ","(erange\n  (int 0)\n  (lvar :native_argument_list_length)) each ","argument options= ","Script Color  new ","Native  color_get_a ","Native  color_get_b ","Native  color_get_g ","Native  color_get_r ","(send\n  (const nil :Class) :new) new "," include "," attr_accessor ","Class  new ","functions_wrapper send ","functions_wrapper options= ","Native  option_Script String  new et_c_functionScript String  new  ","NatiNative  string_get_value dup e  option_set_c_functions ","NatiNative  list_get_value e  option_set_c_functions ","Native  option_set_c_FunctionWrapper  extend  ","Native  option_set_c_(send\n  (const nil :Class) :new) new  ","Native  function_Script String  new et_liScript String  new t_entry ","NatiNative  string_get_value dup e  function_set_list_entry ","NatiNative  list_get_value e  function_set_list_entry ","Native  function_set_Native  make_function_list _entry ","NatiNative  string_get_value dup e  make_function ","NatiNative  list_get_value e  make_function ","Native  make_function s [] ","callbackScript String  new  [] ","Native  make_function s []= ","callbackScript String  new  []= ","Script String  new to_natiNative  string_get_value dup e ","Script String  new to_natiNative  list_get_value e ","Script String  new  to_native ","functs send  to_native ","functions send  to_native ","Native  string_get_value dup alue to_natiNative  string_get_value dup e ","Native  list_get_value alue to_natiNative  list_get_value e ","Script String  new  type ","functs send  type ","functions send  type ","Native  string_get_value dup alue type ","Native  list_get_value alue type ","Script String  new  to_s ","functs send  to_s ","functions send  to_s ","value to_Script String  new  ","Native  string_get_value dup alue to_s ","Native  list_get_value alue to_s ","functScript String  new  Script String  new end ","FunctionWrapper  extend  send ","Native  string_get_Script String  new  dup ","Native  string_get_functs send  dup ","Native  string_get_functions send  dup ","Native  Script String  new tring_get_value dup ","NatiNative  string_get_value dup e  string_get_Native  string_get_value dup alue dup ","NatiNative  list_get_value e  string_get_Native  list_get_value alue dup ","Native  string_get_Script String  new  ","Native  string_get_functs send  ","Native  string_get_functions send  ","Native  Script String  new tring_get_value ","NatiNative  string_get_value dup e  string_get_Native  string_get_value dup alue ","NatiNative  list_get_value e  string_get_Native  list_get_value alue ","Native  list_get_Script String  new  ","Native  list_get_functs send  ","Native  list_get_functions send  ","Native  liScript String  new t_get_value ","NatiNative  string_get_value dup e  list_get_Native  string_get_value dup alue ","NatiNative  list_get_value e  list_get_Native  list_get_value alue ","Native  Native  make_function_list _get_value ","Native  liScript String  new t_get_length ","NatiNative  string_get_value dup e  list_get_length ","NatiNative  list_get_value e  list_get_length ","Native  list_get_Native  list_get_length  ","Native  Native  make_function_list _get_length ","Script  cuScript String  new tom_functionScript String  new  each_with_index ","Script  custom_FunctionWrapper  extend  each_with_index ","Script  custom_(send\n  (const nil :Class) :new) new  each_with_index ","Script  cuScript String  new tom_functionScript String  new  ","Script  custom_FunctionWrapper  extend  ","Script  custom_(send\n  (const nil :Class) :new) new  ","functScript String  new  optionScript String  new = ","FunctionWrapper  extend  options= ","Native  make_function_liScript String  new t ","NatiNative  string_get_value dup e  make_function_list ","NatiNative  list_get_value e  make_function_list ","Native  make_function_Native  make_function_list  ","Script  cuScript String  new tom_functionScript String  new  count ","Script  custom_FunctionWrapper  extend  count ","Script  custom_(send\n  (const nil :Class) :new) new  count ","@Native  make_function s [] ","@callbackScript String  new  [] ","@function_nameScript String  new  [] ","@function_nameScript String  new  []= ","@Native  make_function s []= ","@callbackScript String  new  []= ","exception meScript String  new Script String  new age "," to_native_Script String  new  "," to_native_functs send  "," to_native_functions send  "," to_natiNative  string_get_value dup e_Native  string_get_value dup alue "," to_natiNative  list_get_value e_Native  list_get_value alue "," to_Native  list_get_value  ","functionScript String  new  Script String  new end ","(send\n  (const nil :Class) :new) new  send "," argumentScript String  new _from_native_liScript String  new t "," arguments_from_natiNative  string_get_value dup e_list "," arguments_from_natiNative  list_get_value e_list "," arguments_from_native_Native  make_function_list  "," Script String  new s_from_native_list "," Script Color  new s_from_native_list ","functionScript String  new  optionScript String  new = ","(send\n  (const nil :Class) :new) new  options= ","cuScript String  new tom_function_argumentScript String  new  << ","custom_ arguments_from_native_list  << ","custom_function_Script String  new s << ","custom_function_Script Color  new s << ","Native  Script String  new _get_tag ","Native  functs send _get_tag ","Native  functions send _get_tag ","NatiNative  string_get_value dup e  Native  string_get_value dup alue_get_tag ","NatiNative  list_get_value e  Native  list_get_value alue_get_tag ","(erange\n  (int 0)\n  (lvar :native_argument_liScript String  new t_length)) each ","(erange\n  (int 0)\n  (lNative  string_get_value dup ar :natiNative  string_get_value dup e_argument_list_length)) each ","(erange\n  (int 0)\n  (lNative  list_get_value ar :natiNative  list_get_value e_argument_list_length)) each ","(erange\n  (int 0)\n  (lvar :native_argument_list_Native  list_get_length )) each ","(erange\n  (int 0)\n  (lvar :native_argument_Native  make_function_list _length)) each ","(erange\n  (int 0)\n  (lvar :native_Script String  new _list_length)) each ","(erange\n  (int 0)\n  (lvar :native_Script Color  new _list_length)) each ","(erange\n  (int 0)\n  (lvar :Native  list_get_length )) each ","argument optionScript String  new = ","Script String  new  options= ","Script Color  new  options= ","NatiNative  string_get_value dup e  color_get_a ","NatiNative  list_get_value e  color_get_a ","NatiNative  string_get_value dup e  color_get_b ","NatiNative  list_get_value e  color_get_b ","NatiNative  string_get_value dup e  color_get_g ","NatiNative  list_get_value e  color_get_g ","NatiNative  string_get_value dup e  color_get_r ","NatiNative  list_get_value e  color_get_r ","(Script String  new end\n  (conScript String  new t nil :ClaScript String  new Script String  new ) :new) new "," attr_acceScript String  new Script String  new or ","ClaScript String  new Script String  new   new ","functionScript String  new _wrapper Script String  new end ","FunctionWrapper  extend _wrapper send ","(send\n  (const nil :Class) :new) new _wrapper send ","functionScript String  new _wrapper optionScript String  new = ","FunctionWrapper  extend _wrapper options= ","(send\n  (const nil :Class) :new) new _wrapper options= "]}," SassC FunctionsHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC Engine output_style":{"type":"method","name":"output_style","children":[],"call":[" raise ","Native SassOutputStyle  symbols include? ","Native SassOutputStyle  symbols ","@options fetch to_sym ","@options fetch ","style to_sym ","style include? ","@options fetch to_s ","@options fetch to_sym  to_sym ","style to_sym  to_sym ","@options fetch to_s  to_sym ","@options fetch to_sym  include? ","style to_sym  include? ","@options fetch to_s  include? "]}," SassC Engine output_style_enum":{"type":"method","name":"output_style_enum","children":[],"call":["Native SassOutputStyle  [] "," output_style "]}," SassC Engine functions_handler":{"type":"method","name":"functions_handler","children":[],"call":["FunctionsHandler  new "]}," SassC Engine import_handler":{"type":"method","name":"import_handler","children":[],"call":["ImportHandler  new "]}," SassC Importer native_string":{"type":"method","name":"native_string","children":[],"call":[]}," SassC Sass2Scss convert":{"type":"method","name":"convert","children":[],"call":[]}," SassC Script ValueConversion to_native":{"type":"method","name":"to_native","children":[],"call":[]}," SassC Script ValueConversion from_native":{"type":"method","name":"from_native","children":[],"call":[]}," SassC Script ValueConversion String to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_qstring ","@value to_s ","Native  make_string ","@value type == ","@value type ","opts [] == ","opts [] "]}," SassC Script ValueConversion Number to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_number ","@value numerator_units first ","@value numerator_units ","@value value "]}," SassC Script ValueConversion Map to_native":{"type":"method","name":"to_native","children":[],"call":["Native  map_set_value ","Native  map_set_key ","ValueConversion  to_native ","hash each_with_index ","Native  make_map ","hash size ","@value to_h ","Native  map_set_ValueConversion  to_native  ","@value to_h  each_with_index ","@value to_h  size ","@ValueConversion  to_native  to_h "]}," SassC Script ValueConversion Color to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_color ","@value alpha ","@value blue ","@value green ","@value red "]}," SassC Script ValueConversion Bool to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_boolean ","@value value "]}," SassC Script ValueConversion Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC Native string_get_type":{"type":"method","name":"string_get_type","children":[],"call":[]}," SassC FunctionsHandler error":{"type":"method","name":"error","children":[],"call":["Native  make_error ","$stderr puts ","value pointer ","value []= ","value [] []= ","value [] ","Native  error_set_message ","Native  native_string ","error []= ","Native SassError  new ","Native SassUnknown  new ","Native SassValue  new ","Native  make_Native SassError  new  ","Native SassValue  new  pointer ","Native SassValue  new  []= ","Native SassValue  new  [] []= ","Native SassValue  new  [] ","Native  Native SassError  new _set_message ","Native SassError  new  []= "]}," SassC FunctionsHandler to_native_value":{"type":"method","name":"to_native_value","children":[],"call":["Script ValueConversion  to_native ","sass_value options= ","Script String  new ","SassC Script Value String  new "]}," SassC FunctionsHandler arguments_from_native_list":{"type":"method","name":"arguments_from_native_list","children":[],"call":["(send\n  (begin\n    (erange\n      (int 0)\n      (lvar :native_argument_list_length))) :map) compact ","Script ValueConversion  from_native ","Native  list_get_value ","(erange\n  (int 0)\n  (lvar :native_argument_list_length)) map ","Native  list_get_length ","(send\n  (begin\n    (erange\n      (int 0)\n      (lvar :Native  list_get_length ))) :map) compact ","(erange\n  (int 0)\n  (lvar :Native  list_get_length )) map "]}," SassC SyntaxError sass_backtrace":{"type":"method","name":"sass_backtrace","children":[],"call":[]}," SassC SyntaxError backtrace":{"type":"method","name":"backtrace","children":[],"call":[" sass_backtrace + "," sass_backtrace "," nil? "]}," SassC SyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SassC Engine source_map_file":{"type":"method","name":"source_map_file","children":[],"call":["@options [] "]}," SassC Engine source_map_contents?":{"type":"method","name":"source_map_contents?","children":[],"call":["@options [] "]}," SassC Engine source_map_embed?":{"type":"method","name":"source_map_embed?","children":[],"call":["@options [] "]}," SassC Engine line_comments?":{"type":"method","name":"line_comments?","children":[],"call":["@options [] "]}," SassC Engine precision":{"type":"method","name":"precision","children":[],"call":["@options [] "]}," SassC Engine source_map":{"type":"method","name":"source_map","children":[],"call":[" raise "]}," SassC Script ValueConversion List to_native":{"type":"method","name":"to_native","children":[],"call":["Native  list_set_value ","ValueConversion  to_native ","list each_with_index ","Native  make_list ","list size ","SEPARATORS  fetch ","@value separator ","@value to_a ","Native  @value to_a _set_value ","@value to_a  each_with_index ","Native  make_@value to_a  ","@value to_a  size ","@value SEPARATORS  fetch arator "]}," SassC Engine omit_source_map_url?":{"type":"method","name":"omit_source_map_url?","children":[],"call":["@options [] "]}," SassC Script Color to_native":{"type":"method","name":"to_native","children":[],"call":["Native  make_string "," to_s "]}," Util relative_path_from":{"type":"method","name":"relative_path_from","children":[],"call":[" raise "," ArgumentError ","(str \"Incompatible path encodings: \") + ","from encoding ","from inspect ","path encoding ","path inspect ","from to_s ","path to_s ","e name == ","e name "," pathname relative_path_from "," pathname ","(str \"Incompatible path to_s  encodings: \") + ","from to_s  encoding ","from to_s  inspect ","path to_s  encoding ","path to_s  inspect ","from to_s  to_s ","path to_s  to_s "," pathname relative_path_from to_s  "," path to_s name relative_path to_s _from "," path to_s name "]}," Util jruby_version":{"type":"method","name":"jruby_version","children":[],"call":["s to_i "," JRUBY_VERSION  split map "," JRUBY_VERSION  split "]}," Util jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_PLATFORM  =~ "]}," Util rbx?":{"type":"method","name":"rbx?","children":[],"call":["RUBY_ENGINE  == "]}," Util ironruby?":{"type":"method","name":"ironruby?","children":[],"call":["RUBY_ENGINE  == "]}," Util windows?":{"type":"method","name":"windows?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Util rails_env":{"type":"method","name":"rails_env","children":[],"call":["RAILS_ENV  to_s "," Rails  env to_s "," Rails  env "]}," Util rails_root":{"type":"method","name":"rails_root","children":[],"call":["RAILS_ROOT  to_s "," raise "," Rails  root to_s "," Rails  root "]}," Util sass_warn":{"type":"method","name":"sass_warn","children":[],"call":["Sass  logger warn ","Sass  logger "]}," Util silence_sass_warnings":{"type":"method","name":"silence_sass_warnings","children":[],"call":["SassC  logger log_level= ","SassC  logger ","Sass  logger log_level ","Sass  logger ","Sass  logger log_level= "]}," Util deprecated":{"type":"method","name":"deprecated","children":[],"call":["SassC Util  sass_warn ","(str \"DEPRECATION WARNING: \") + ","\n + "," caller_info [] "," caller_info ","obj class ","obj is_a? "]}," Util abstract":{"type":"method","name":"abstract","children":[],"call":[" raise ","NotImplementedError  new "," caller_info [] "," caller_info ","obj class "]}," Util caller_info":{"type":"method","name":"caller_info","children":[],"call":["info [] sub! ","info [] ","info []= ","info [] to_i ","entry scan first ","entry scan "," caller [] "," caller ","entry scan first  [] sub! ","entry scan first  [] ","entry scan first  []= ","entry scan first  [] to_i "]}," Util paths":{"type":"method","name":"paths","children":[],"call":["(send\n  (lvar :arr) :map) flatten ","path + ","paths map ","arr map ","arrs inject "]}," Util round":{"type":"method","name":"round","children":[],"call":["value ceil ","value floor ","mod < ","mod_is_half ! ","value > ","(send\n  (lvar :mod) :-\n  (float 0.5)) abs < ","SassC Script Value Number  epsilon ","(send\n  (lvar :mod) :-\n  (float 0.5)) abs ","mod - ","value % ","value %  < ","(send\n  (lvar :mod) :-\n  (float 0.5)) abs <  ! ","value % _is_half ! ","(send\n  (lvar :value % ) :-\n  (float 0.5)) abs < ","(send\n  (lvar :value % ) :-\n  (float 0.5)) abs ","value %  - "]}," Util clamp":{"type":"method","name":"clamp","children":[],"call":["value > ","value < "]}," Util map_keys":{"type":"method","name":"map_keys","children":[],"call":[" map_hash "]}," NormalizedMap respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@map respond_to? "]}," NormalizedMap method_missing":{"type":"method","name":"method_missing","children":[],"call":["@map send "]}," NormalizedMap update":{"type":"method","name":"update","children":[],"call":[" []= ","map each ","map as_stored ","map is_a? ","map as_stored  each ","map as_stored  as_stored ","map as_stored  is_a? "]}," NormalizedMap sort_by":{"type":"method","name":"sort_by","children":[],"call":["@map sort_by "]}," NormalizedMap dup":{"type":"method","name":"dup","children":[],"call":["d send ","@map dup "]}," NormalizedMap map":{"type":"method","name":"map","children":[],"call":["@map map "]}," NormalizedMap to_a":{"type":"method","name":"to_a","children":[],"call":["@map to_a "]}," NormalizedMap to_hash":{"type":"method","name":"to_hash","children":[],"call":["@map dup "]}," NormalizedMap size":{"type":"method","name":"size","children":[],"call":["@map size "]}," NormalizedMap each":{"type":"method","name":"each","children":[],"call":["@map each "]}," NormalizedMap keys":{"type":"method","name":"keys","children":[],"call":["@map keys "]}," NormalizedMap values":{"type":"method","name":"values","children":[],"call":["@map values "]}," NormalizedMap empty?":{"type":"method","name":"empty?","children":[],"call":["@map empty? "]}," NormalizedMap as_stored":{"type":"method","name":"as_stored","children":[],"call":["@key_strings [] ","SassC Util  map_keys "]}," NormalizedMap delete":{"type":"method","name":"delete","children":[],"call":["@map delete ","@key_strings delete "," normalize "]}," NormalizedMap has_key?":{"type":"method","name":"has_key?","children":[],"call":["@map has_key? "," normalize "]}," NormalizedMap []":{"type":"method","name":"[]","children":[],"call":["@map [] "," normalize "]}," NormalizedMap []=":{"type":"method","name":"[]=","children":[],"call":["@key_strings []= ","@map []= "," normalize "]}," NormalizedMap denormalize":{"type":"method","name":"denormalize","children":[],"call":["@key_strings [] "," normalize "]}," NormalizedMap normalize":{"type":"method","name":"normalize","children":[],"call":["key tr "]}," NormalizedMap initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","map each "]}," ValueConversion to_native":{"type":"method","name":"to_native","children":[],"call":[]}," ValueConversion from_native":{"type":"method","name":"from_native","children":[],"call":[]}," Value _perform":{"type":"method","name":"_perform","children":[],"call":[]}," Value with_contents":{"type":"method","name":"with_contents","children":[],"call":["SassC Script Value List  new "]}," Value null?":{"type":"method","name":"null?","children":[],"call":[]}," Value to_s":{"type":"method","name":"to_s","children":[],"call":["SassC Util  abstract "]}," Value to_h":{"type":"method","name":"to_h","children":[],"call":[" raise ","SassC SyntaxError  new "," inspect "]}," Value to_a":{"type":"method","name":"to_a","children":[],"call":[]}," Value bracketed":{"type":"method","name":"bracketed","children":[],"call":[]}," Value separator":{"type":"method","name":"separator","children":[],"call":[]}," Value assert_int!":{"type":"method","name":"assert_int!","children":[],"call":[" to_i "]}," Value to_i":{"type":"method","name":"to_i","children":[],"call":[" raise ","SassC SyntaxError  new "," inspect "]}," Value ==":{"type":"method","name":"==","children":[],"call":[" value == ","other value "," value "," class == ","other class "," class "]}," Value to_bool":{"type":"method","name":"to_bool","children":[],"call":[]}," Value inspect":{"type":"method","name":"inspect","children":[],"call":[" value inspect "," value "]}," Value eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," Value hash":{"type":"method","name":"hash","children":[],"call":[" value hash "," value "]}," Value options":{"type":"method","name":"options","children":[],"call":[" raise ","SassC SyntaxError  new "," class "]}," Value initialize":{"type":"method","name":"initialize","children":[],"call":["value freeze ","value == ","value nil? "]}," String inspect":{"type":"method","name":"inspect","children":[],"call":["String  quote "," value "]}," String to_sass":{"type":"method","name":"to_sass","children":[],"call":[" to_s ","opts merge "]}," String to_s":{"type":"method","name":"to_s","children":[],"call":[" class quote "," value "," class ","@value gsub ","@type == ","opts [] == ","opts [] "]}," String plus":{"type":"method","name":"plus","children":[],"call":["SassC Script Value String  new "," type "," value + "," value ","other to_s ","other value ","other is_a? "]}," String initialize":{"type":"method","name":"initialize","children":[],"call":[]}," String quote":{"type":"method","name":"quote","children":[],"call":[]}," Number sans_common_units":{"type":"method","name":"sans_common_units","children":[],"call":["units1 compact! ","units2 delete_at ","units2 index ","units1 map ","units2 dup ","units2 dup  delete_at ","units2 dup  index ","units2 dup  dup "]}," Number convertable?":{"type":"method","name":"convertable?","children":[],"call":["units subset? ","MUTUALLY_CONVERTIBLE  [] ","units first ","units empty? "," Array to_set "," Array "," Array to_set  subset? "," Array to_set  first "," Array to_set  empty? "]}," Number conversion_factor":{"type":"method","name":"conversion_factor","children":[],"call":["CONVERSION_TABLE  [] [] ","CONVERSION_TABLE  [] "]}," Number normalize!":{"type":"method","name":"normalize!","children":[],"call":["@numerator_units delete_at ","@numerator_units index ","@denominator_units delete_at "," conversion_factor "," convertable? ","@numerator_units find ","@denominator_units each_with_index "," sans_common_units "," unitless? "]}," Number compute_units":{"type":"method","name":"compute_units","children":[],"call":["this denominator_units ","this numerator_units ","this denominator_units + ","other numerator_units ","this numerator_units + ","other denominator_units "]}," Number coercion_factor":{"type":"method","name":"coercion_factor","children":[],"call":["m * "," conversion_factor ","p [] ","from_units zip inject ","from_units zip "," raise ","Sass UnitConversionError  new ","to_units join ","from_units join "," convertable? ! "," convertable? ","from_units | ","from_units size != ","to_units size ","from_units size "," sans_common_units "]}," Number operate":{"type":"method","name":"operate","children":[],"call":["Bool  new ","Number  new "," compute_units ","result is_a? ","value send ","other value ","this value ","this value to_f ","/ == ","other coerce ","this coerce ","other denominator_units ","other numerator_units "," unitless? ","OPERATIONS  include? ","value send  is_a? ","this value  send ","this value to_f  send ","other this value  ","other this value to_f  ","other coerce  value ","this this value  ","this this value to_f  ","this coerce  value ","this this value  to_f ","this this value to_f  to_f ","this coerce  value to_f ","other coerce  coerce ","this coerce  coerce ","other coerce  denominator_units ","other coerce  numerator_units "]}," Number round":{"type":"method","name":"round","children":[],"call":[]}," Number basically_equal?":{"type":"method","name":"basically_equal?","children":[],"call":[" class basically_equal? "," class "]}," Number unit_str":{"type":"method","name":"unit_str","children":[],"call":["rv << ","@denominator_units sort join ","@denominator_units sort ","@denominator_units any? ","@numerator_units sort join ","@numerator_units sort ","@numerator_units sort join  << "]}," Number comparable_to?":{"type":"method","name":"comparable_to?","children":[],"call":[" operate "]}," Number coerce":{"type":"method","name":"coerce","children":[],"call":["Number  new "," value * / "," coercion_factor "," value * "," value "," unitless? "]}," Number legal_units?":{"type":"method","name":"legal_units?","children":[],"call":["@denominator_units empty? ","@numerator_units size == ","@numerator_units size ","@numerator_units empty? "]}," Number is_unit?":{"type":"method","name":"is_unit?","children":[],"call":[" unitless? "," numerator_units first == "," numerator_units first "," numerator_units "," numerator_units size == "," numerator_units size "," denominator_units size == "," denominator_units size "," denominator_units "]}," Number unitless?":{"type":"method","name":"unitless?","children":[],"call":["@denominator_units empty? ","@numerator_units empty? "]}," Number int?":{"type":"method","name":"int?","children":[],"call":[" basically_equal? "," value % "," value "]}," Number to_i":{"type":"method","name":"to_i","children":[],"call":[" value to_i "," value "," int? "]}," Number inspect":{"type":"method","name":"inspect","children":[],"call":[" unit_str "," unitless? ","str sub! "," options [] == "," options [] "," options ","str =~ ","(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub ","(str \"%0.\") % "," class precision "," class ","str include? ","value to_s "," class round "," value "," original "," unit_(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  "," unit_value to_s  ","(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  sub! ","value to_s  sub! ","(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  =~ ","value to_s  =~ ","(send\n  (d(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub \n    ((send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    ((send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  \"f\")) :%\n  (lvar :value)) gsub ","(send\n  (dvalue to_s \n    (value to_s  \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (value to_s  \"f\")) :%\n  (lvar :value)) gsub ","(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar : class round )) gsub ","((send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  \"%0.\") % ","(value to_s  \"%0.\") % ","(send\n  (dstr\n    (str \"%0.\")\n    (begin\n      (send\n        (send\n          (self) :class) :precision))\n    (str \"f\")) :%\n  (lvar :value)) gsub  include? ","value to_s  include? "," class round  to_s ","  class round  "]}," Number to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect "," raise ","Sass SyntaxError  new "," legal_units? "," original "]}," Number eql?":{"type":"method","name":"eql?","children":[],"call":[" denominator_units == ","other denominator_units "," denominator_units "," numerator_units == ","other numerator_units "," numerator_units "," basically_equal? ","other value "," value "]}," Number hash":{"type":"method","name":"hash","children":[],"call":["(send nil :value) hash "," denominator_units "," numerator_units "," value "]}," Number initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize! ","denominator_units is_a? ","numerator_units is_a? "]}," Number epsilon":{"type":"method","name":"epsilon","children":[],"call":[]}," Number precision_factor":{"type":"method","name":"precision_factor","children":[],"call":[]}," Number precision=":{"type":"method","name":"precision=","children":[],"call":[]}," Number precision":{"type":"method","name":"precision","children":[],"call":[]}," Map to_sass":{"type":"method","name":"to_sass","children":[],"call":["(send\n  (send nil :value) :map) join ","to_sass [] "," value map "," value ","value to_sass ","value separator == ","value separator ","value is_a? "," lambda "," value empty? "]}," Map to_s":{"type":"method","name":"to_s","children":[],"call":[" raise ","SassC SyntaxError  new "," inspect "]}," Map hash":{"type":"method","name":"hash","children":[],"call":[" value hash "," value "]}," Map eq":{"type":"method","name":"eq","children":[],"call":["SassC Script Value Bool  new "," value == ","other value "," value ","other is_a? "]}," Map to_a":{"type":"method","name":"to_a","children":[],"call":["list options= "," options ","SassC Script Value List  new "," value map "," value ","SassC Script Value List  new  options= "]}," Map separator":{"type":"method","name":"separator","children":[],"call":[" value empty? "," value "]}," Map options=":{"type":"method","name":"options=","children":[],"call":["v options= ","k options= "," value each "," value "]}," Map initialize":{"type":"method","name":"initialize","children":[],"call":[]}," List sep_str":{"type":"method","name":"sep_str","children":[],"call":["opts [] == ","opts [] "," separator == "," separator "]}," List element_needs_parens?":{"type":"method","name":"element_needs_parens?","children":[],"call":["element operator == ","element operator ","element is_a? "," separator == "," separator ","Sass Script Parser  precedence_of <= ","Sass Script Parser  precedence_of ","element separator ","element bracketed ","element value length < ","element value length ","element value ","Sass Script Parser  Sass Script Parser  precedence_of _of <= ","Sass Script Parser  Sass Script Parser  precedence_of _of "]}," List assert_valid_index":{"type":"method","name":"assert_valid_index","children":[],"call":[]}," List inspect":{"type":"method","name":"inspect","children":[],"call":["(if\n  (send nil :bracketed)\n  (str \"[\")\n  (str \"(\")) + + "," bracketed ","(if\n  (send nil :bracketed)\n  (str \"[\")\n  (str \"(\")) + ","(send\n  (send nil :value) :map) join "," sep_str ","e inspect "," value map "," value "]}," List to_h":{"type":"method","name":"to_h","children":[],"call":[" value empty? "," value "]}," List to_sass":{"type":"method","name":"to_sass","children":[],"call":[" bracketed ","members join "," sep_str ","members first ","members length == ","members length "," separator == "," separator ","v to_sass "," element_needs_parens? "," value map "," value "," value empty? "]}," List to_s":{"type":"method","name":"to_s","children":[],"call":[" bracketed ","members join "," sep_str ","e to_s ","(send\n  (send nil :value) :reject) map ","e value empty? ","e value ","e is_a? "," value reject "," value "," raise ","SassC SyntaxError  new "," inspect "," value empty? "," bracketed ! "]}," List hash":{"type":"method","name":"hash","children":[],"call":["(send nil :value) hash "," bracketed "," separator "," value "]}," List eq":{"type":"method","name":"eq","children":[],"call":["SassC Script Value Bool  new "," bracketed == ","other bracketed "," bracketed "," separator == ","other separator "," separator "," value == ","other value "," value ","other is_a? "]}," List options=":{"type":"method","name":"options=","children":[],"call":["v options= "," value each "," value "]}," List initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Color hash":{"type":"method","name":"hash","children":[],"call":[" value hash "," value "]}," Color eql?":{"type":"method","name":"eql?","children":[],"call":[" value == ","other_color value "," value "," raise "," class ","other_color class ","other_color is_a? "]}," Color value":{"type":"method","name":"value","children":[],"call":["(send nil :red) compact "," alpha "," lightness "," saturation "," hue "," blue "," green "," red "]}," Color alpha_string":{"type":"method","name":"alpha_string","children":[],"call":[" alpha round to_s "," alpha round "," alpha "]}," Color hlsa?":{"type":"method","name":"hlsa?","children":[],"call":["@mode == "]}," Color rgba?":{"type":"method","name":"rgba?","children":[],"call":["@mode == "]}," Color to_s":{"type":"method","name":"to_s","children":[],"call":[" alpha_string ","@alpha == "," hsla? "," rgba? "]}," Color initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","SassC Util  clamp ","alpha to_f ","lightness to_i ","saturation to_i ","hue to_i ","blue to_i ","green to_i ","red to_i "]}," Bool to_s":{"type":"method","name":"to_s","children":[],"call":["@value to_s "]}," Bool new":{"type":"method","name":"new","children":[],"call":[]}," SassC load_paths":{"type":"method","name":"load_paths","children":[],"call":[]}}