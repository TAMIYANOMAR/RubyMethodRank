{" Formatador indentation":{"type":"method","name":"indentation","children":[],"call":["   * "]}," Formatador indent":{"type":"method","name":"indent","children":[],"call":[]}," Formatador format":{"type":"method","name":"format","children":[],"call":["formated << ","STYLES  [] ","styles empty? ! ","styles empty? ","STDOUT  tty? "," indentation ","string gsub gsub ","string gsub ","(send\n  (lvar :string) :gsub\n  (const nil :FORMAT_REGEX)) gsub ","1 to_sym "]}," Formatador display_line":{"type":"method","name":"display_line","children":[],"call":[" print "," display "," new_line "]}," Formatador display":{"type":"method","name":"display","children":[],"call":[" print "," format "," indentation ","STDOUT  flush "," parse ","$stdout flush "]}," Formatador initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Formatador redisplay":{"type":"method","name":"redisplay","children":[],"call":[" display "," print ","  * "]}," Formatador display_table":{"type":"method","name":"display_table","children":[],"call":[" display_line ","columns join ","columns << ","  * ","widths [] - ","datum to_s length ","datum to_s ","widths [] ","hash [] ","header to_s length ","header to_s ","split << << ","split << ","- * ","widths [] + ","headers empty? ","x to_s <=> ","y to_s ","x to_s ","headers sort "," block_given? ","headers uniq ","widths []= ","(send\n  (send\n    (lvar :key) :to_s) :length) max ","hash [] to_s length ","hash [] to_s ","key to_s length ","key to_s ","headers << ","hash keys ","keys ! ","hashes empty? ","(send\n  (lvar :widths) :map) join ","width to_s length + ","width to_s length ","width to_s ","widths map ","value to_s length ","value to_s ","data [] [] ","data [] ","widths length times ","widths length ","data length times ","data length ","(begin\n  (or\n    (send\n      (lvar :widths) :[]\n      (lvar :column))\n    (int 0))) max ","row [] to_s length ","row [] to_s ","row [] ","row length times ","row length ","data each ","datum length ","headers join ","hash [] length "," display_compact_table ","accum << ","accum empty? ","hashes inject ","headers sort  empty? ","headers uniq  empty? ","headers sort  sort ","headers uniq  sort ","headers sort  uniq ","headers uniq  uniq ","headers sort  << ","headers uniq  << ","headers sort  join ","headers uniq  join "]}," Formatador progressbar":{"type":"method","name":"progressbar","children":[],"call":["output join ","output << ","seconds size < ","seconds size ","(send\n  (lvar :elapsed) :%\n  (int 60)) round to_s ","(send\n  (lvar :elapsed) :%\n  (int 60)) round ","elapsed % ","(send\n  (lvar :elapsed) :/\n  (int 60)) round to_s ","(send\n  (lvar :elapsed) :/\n  (int 60)) round ","elapsed / ","Time  now - ","Time  now ","  * ","width - ","(send\n  (lvar :percent) :*\n  (lvar :width)) ceil ","percent * ","* * ","current to_f / ","total to_f ","current to_f ","total to_s size - ","current to_s size ","current to_s ","total to_s size ","total to_s ","options [] ","done length ","(send\n  (lvar :elapsed) :%\n  (int 60)) truncate to_s ","(send\n  (lvar :elapsed) :%\n  (int 60)) truncate ","(send\n  (lvar :elapsed) :/\n  (int 60)) truncate to_s ","(send\n  (lvar :elapsed) :/\n  (int 60)) truncate ","percent > ","percent < ","(str \"[\") % ","total to_s size * + ","total to_s size * ","(send\n  (lvar :elapsed) :%\n  (int 60)) round to_s  size < ","(send\n  (lvar :elapsed) :%\n  (int 60)) truncate to_s  size < ","(send\n  (lvar :elapsed) :%\n  (int 60)) round to_s  size ","(send\n  (lvar :elapsed) :%\n  (int 60)) truncate to_s  size ","(send\n  (lvar :Time  now - ) :%\n  (int 60)) round to_s ","(send\n  (lvar :Time  now - ) :%\n  (int 60)) round ","Time  now -  % ","(send\n  (lvar :Time  now - ) :/\n  (int 60)) round to_s ","(send\n  (lvar :Time  now - ) :/\n  (int 60)) round ","Time  now -  / ","options []  - ","(send\n  (lvar :current to_f / ) :*\n  (lvar :width)) ceil ","(send\n  (lvar :percent) :*\n  (lvar :options [] )) ceil ","current to_f /  * ","* *  length ","(send\n  (lvar :Time  now - ) :%\n  (int 60)) truncate to_s ","(send\n  (lvar :Time  now - ) :%\n  (int 60)) truncate ","(send\n  (lvar :Time  now - ) :/\n  (int 60)) truncate to_s ","(send\n  (lvar :Time  now - ) :/\n  (int 60)) truncate ","current to_f /  > ","current to_f /  < "]}," Formatador redisplay_progressbar":{"type":"method","name":"redisplay_progressbar","children":[],"call":[" redisplay ","current < "," progressbar ","(pair\n  (sym :color)\n  (str \"white\")) merge! "," new_line ","options [] ","(pair\n  (sym :color)\n  (str \"white\")) merge!  [] "]}," Formatador parse":{"type":"method","name":"parse","children":[],"call":[" indentation ","string gsub gsub ","string gsub ","(send\n  (lvar :string) :gsub\n  (const nil :PARSE_REGEX)) gsub ","STYLES  [] ","1 to_sym ","STDOUT  tty? "," strip ","$stdout tty? "]}," Formatador display_lines":{"type":"method","name":"display_lines","children":[],"call":[" display_line "]}," Formatador length":{"type":"method","name":"length","children":[],"call":["value to_s gsub length ","value to_s gsub ","value to_s ","char bytesize > ","char bytesize ","value to_s gsub chars reduce ","value to_s gsub chars ","Unicode  width ","Module  const_defined? "]}," Formatador display_compact_table":{"type":"method","name":"display_compact_table","children":[],"call":[" display_line ","hash == ","columns join ","columns << ","  * ","widths [] - "," length ","widths [] ","hash [] ","hash respond_to? ","header to_s length ","header to_s ","split << << ","split << ","- * ","widths [] + ","headers empty? ","x to_s <=> ","y to_s ","x to_s ","headers sort ","keys ! "," block_given? ","headers uniq ","widths []= ","(send nil :length\n  (lvar :key)) max ","headers << ","hash keys ","key to_s length ","key to_s ","hashes empty? ","width < "," calculate_datum ","headers each ","hashes each ","(send\n  (lvar :headers) :+\n  (send\n    (lvar :hash) :keys)) each ","headers + ","keys each ","options [] ","datum is_a? ","headers map ","widths [] - s [] - ","widths [] - s [] ","widths [] - s [] + ","headers sort  empty? ","headers uniq  empty? ","headers sort  sort ","headers uniq  sort ","headers sort  uniq ","headers uniq  uniq ","widths [] - s []= ","headers sort  << ","headers uniq  << ","widths [] -  < "," calculate_ calculate_datum  ","headers sort  each ","headers uniq  each ","(send\n  (lvar :headers sort ) :+\n  (send\n    (lvar :hash) :keys)) each ","(send\n  (lvar :headers uniq ) :+\n  (send\n    (lvar :hash) :keys)) each ","headers sort  + ","headers uniq  + "," calculate_datum  is_a? ","headers sort  map ","headers uniq  map "]}," Formatador new_line":{"type":"method","name":"new_line","children":[],"call":[" print "]}," Formatador redisplay_line":{"type":"method","name":"redisplay_line","children":[],"call":[" new_line "," redisplay "]}," Formatador strip":{"type":"method","name":"strip","children":[],"call":[" indentation ","string gsub gsub ","string gsub "]}," Formatador calculate_datum":{"type":"method","name":"calculate_datum","children":[],"call":["hash [] ","d [] ","split to_sym ","splits each ","(lvasgn :splits\n  (send\n    (send\n      (lvar :header) :to_s) :split\n    (str \".\"))) length > ","(lvasgn :splits\n  (send\n    (send\n      (lvar :header) :to_s) :split\n    (str \".\"))) length ","header to_s split ","header to_s ","hash keys include? ! ","hash keys include? ","hash keys ","hash fetch ","header to_s split  each ","(lvasgn :header to_s split \n  (send\n    (send\n      (lvar :header) :to_s) :split\n    (str \".\"))) length > ","(lvasgn :header to_s split \n  (send\n    (send\n      (lvar :header) :to_s) :split\n    (str \".\"))) length "]}," Formatador ProgressBar complete?":{"type":"method","name":"complete?","children":[],"call":[" current == "," total "," current "]}," Formatador ProgressBar increment":{"type":"method","name":"increment","children":[],"call":["Formatador  redisplay_progressbar "," opts "," total "," current ","@complete_proc call "," complete? ","increment to_i ","@lock synchronize "]}," Formatador ProgressBar initialize":{"type":"method","name":"initialize","children":[],"call":["Proc  new "," block_given? ","Mutex  new ","total to_i ","opts delete "]}}