{" Daemons run":{"type":"method","name":"run","children":[],"call":["@controller run ","@controller catch_exceptions ","Controller  new ","@controller group ","options []= ","options [] ","Controller  new  run ","Controller  new  catch_exceptions ","Controller  new  group "]}," Daemons Controller split_argv":{"type":"method","name":"split_argv","children":[],"call":[]}," Daemons Controller run":{"type":"method","name":"run","children":[],"call":[" raise ","Error  new ","CmdException  new ","@group start_all "," sleep ","@group stop_all ","@group new_application run ","@group new_application ","@group new_application start ","@group app_argv= ","@group controller_argv= ","ApplicationGroup  new "," setup_options ","@options update ","v ! ","@optparse parse delete_if ","@optparse parse ","@group show_status "," puts ","@group app_name ","@group applications empty? ","@group applications ","@group zap_all ","@group setup ","@options [] ","@group reload_all "," fail "," exit ","@group running? ! ","@group running? ","$stderr puts ","ApplicationGroup  new  start_all ","ApplicationGroup  new  stop_all ","ApplicationGroup  new  new_application run ","ApplicationGroup  new  new_application ","ApplicationGroup  new  new_application start ","ApplicationGroup  new  app_argv= ","ApplicationGroup  new  controller_argv= ","ApplicationGroup  new  show_status ","ApplicationGroup  new  app_name ","ApplicationGroup  new  applications empty? ","ApplicationGroup  new  applications ","ApplicationGroup  new  zap_all ","ApplicationGroup  new  setup ","ApplicationGroup  new  reload_all ","ApplicationGroup  new  running? ! ","ApplicationGroup  new  running? "]}," Daemons Controller setup_options":{"type":"method","name":"setup_options","children":[],"call":[]}," Daemons Controller initialize":{"type":"method","name":"initialize","children":[],"call":["Optparse  new ","Controller  split_argv ","File  split [] ","File  split ","File  expand_path ","options [] "]}," Daemons ApplicationGroup stop_all":{"type":"method","name":"stop_all","children":[],"call":["a stop ","@applications each ","@monitor stop ","t join ","threads each ","threads << ","Thread  new "," setup "]}," Daemons ApplicationGroup start_all":{"type":"method","name":"start_all","children":[],"call":["a start "," fork ","@applications each ","@monitor stop ","Process  waitpid ","pids each ","pids << "]}," Daemons ApplicationGroup new_application":{"type":"method","name":"new_application","children":[],"call":["@applications << ","app app_argv= ","app controller_argv= ","Application  new "," raise ","RuntimeException  new ","@multiple ! ","@applications size > ","@applications size "," setup_app ","@applications empty? ","a zap ","a running? ","@applications delete_if ","@controller options [] ","@controller options "," options [] "," options "," fail ","@Application  new lications << ","Application  new  Application  new _argv= ","Application  new  controller_argv= ","@Application  new lications size > ","@Application  new lications size "," setup_Application  new  ","@Application  new lications empty? ","@Application  new lications delete_if "]}," Daemons ApplicationGroup find_applications":{"type":"method","name":"find_applications","children":[],"call":["Application  new ","PidFile  existing ","pid_files map ","PidFile  find_files "," app_name "," setup_app ","f =~ ","pid_files reject! ","Monitor  find "," app_name + ","@keep_pid_files ! "," find_applications_by_pidfiles "," find_applications_by_app_name ","PidFile  find_files  map "," Application  new _name "," setup_Application  new  ","PidFile  find_files  reject! "," Application  new _name + ","@keep_PidFile  find_files  ! "," find_Application  new lications_by_pidfiles "," find_Application  new lications_by_Application  new _name "]}," Daemons ApplicationGroup pidfile_dir":{"type":"method","name":"pidfile_dir","children":[],"call":["PidFile  dir "," script "]}," Daemons ApplicationGroup initialize":{"type":"method","name":"initialize","children":[],"call":[" find_applications "," pidfile_dir ","options [] ","controller options ","File  expand_path ","@options [] ","@options []= ","@options key? ","(str \"dir\") each ","controller options  [] ","controller controller options  ","@controller options  [] ","@controller options  []= ","@controller options  key? "]}," Daemons Application stop":{"type":"method","name":"stop","children":[],"call":["Process  kill ","@pid_file read ","@pid_file remove "," zap "," running? ! "," running? ","@group controller options [] ","@group controller options ","@group controller ","@pid cleanup ","@pid pid "," options [] "," options "," puts ","STDOUT  flush "," group app_name "," group ","@pid running? "," sleep ","Timeout  timeout ","@force_kill_waittime > ","no_wait ! ","Pid  running? ","$stdout flush ","@report stopped_process ","@report cannot_stop_process ","@report forcefully_stopping_process ","@report stopping_process ","@report output_message "," zap! "," wait_and_retry_kill_harder ","@@pid pid _file read ","@@pid pid _file remove ","@@pid pid  cleanup ","@@pid pid  @pid pid  ","@@pid pid  running? "]}," Daemons Application run":{"type":"method","name":"run","children":[],"call":[" load "," script ","ARGV  concat ","ARGV  clear "," run_via_load "," run_via_exec ","@group controller options [] ","@group controller options ","@group controller "]}," Daemons Application start":{"type":"method","name":"start","children":[],"call":[" run "," exit ","@pid_file remove "," trap "," at_exit ","@pid_file write ","Daemonize  daemonize ","@group controller options [] ","@group controller options ","@group controller "," run_via_load "," exception_log ","$daemons_sigterm ! ","opts [] ! ","opts [] "," run_via_exec "," real_start ","@group create_monitor ","@group applications [] ","@group applications "," start_load "," start_proc "," start_exec "," start_none "," options [] "," options "," change_privilege ","@group controller options  [] ! ","@group controller options  [] "]}," Daemons Application pidfile_dir":{"type":"method","name":"pidfile_dir","children":[],"call":["PidFile  dir ","@group script ","@group dir ","@group dir_mode ","Pid  dir "," script "," dir "," dir_mode "]}," Daemons Application script":{"type":"method","name":"script","children":[],"call":["@group script "," group script "," group "]}," Daemons Application initialize":{"type":"method","name":"initialize","children":[],"call":["PidFile  new ","@group multiple ","@group app_name "," pidfile_dir ","PidMem  new ","@options update ","group options dup ","group options ","@options [] "," method ","Reporter  new ","@options []= ","File  expand_path ","@options key? ","(str \"dir\") each "," parse_signals_and_waits "," pidfile_ pidfile_dir  ","group options dup  update ","group options dup  [] ","group options dup  []= ","group options dup  key? ","(str \" pidfile_dir \") each "]}," Daemons PidFile read":{"type":"method","name":"read","children":[],"call":["f gets to_i ","f gets ","File  open "," filename "]}," Daemons PidFile remove":{"type":"method","name":"remove","children":[],"call":["File  delete "," filename "]}," Daemons PidFile write":{"type":"method","name":"write","children":[],"call":["f puts ","Process  pid ","File  open "," filename "," raise "," RuntimeException ","@number == ","@number < ","File  exists? "," multiple "]}," Daemons PidFile exists?":{"type":"method","name":"exists?","children":[],"call":["File  exists? "," filename "]}," Daemons PidFile filename":{"type":"method","name":"filename","children":[],"call":["File  join ","_num + ","@number to_s "," pid_delimiter "]}," Daemons PidFile initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path "," raise "," RuntimeException ","@number == ","@number < ","File  exist? "," filename "," fail ","@number >= "]}," Daemons PidFile existing":{"type":"method","name":"existing","children":[{"type":"method","name":"filename","children":[],"asgn":[],"call":[]}],"call":[]}," Daemons PidFile dir":{"type":"method","name":"dir","children":[],"call":[]}," Daemons PidFile find_files":{"type":"method","name":"find_files","children":[],"call":[]}," Daemons SystemError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Daemonize daemonize":{"type":"method","name":"daemonize","children":[],"call":["STDERR  reopen ","STDOUT  reopen ","STDIN  reopen ","io close ","(const nil :STDIN) include? ","ObjectSpace  each_object ","File  umask ","Dir  chdir "," exit "," safefork "," trap ","oldmode zero? "," raise ","Daemons  RuntimeException new ","Daemons  RuntimeException ","Process  setsid "," srand ","io closed? "," redirect_io "," close_io "," fail "]}," Daemonize safefork":{"type":"method","name":"safefork","children":[],"call":[" sleep "," fork "]}," Daemons Controller catch_exceptions":{"type":"method","name":"catch_exceptions","children":[],"call":[" puts ","e to_s "," print_usage ","block call "]}," Daemons Controller print_usage":{"type":"method","name":"print_usage","children":[],"call":[" puts ","@optparse usage ","(str \"      Usage: \") gsub "]}," Daemons Optparse parse":{"type":"method","name":"parse","children":[],"call":["@opts parse "]}," Daemons Optparse initialize":{"type":"method","name":"initialize","children":[],"call":["@opts to_s "," exit "," puts ","opts on_tail ","controller print_usage ","opts separator ","@options []= ","opts on ","opts banner= ","OptionParser  new "]}," Daemons ApplicationGroup show_status":{"type":"method","name":"show_status","children":[],"call":["a show_status ","@applications each "]}," Daemons ApplicationGroup zap_all":{"type":"method","name":"zap_all","children":[],"call":["a zap ","@applications each ","@monitor stop "]}," Daemons Application running?":{"type":"method","name":"running?","children":[],"call":["(str \" \") =~ ","@pid_file read ","@pid_file exists? ","(begin\n  (send\n    (ivar :@pid_file) :read)) =~ ","PidFile  running? ","Pid  running? ","@pid pid ","@pid exists? ","@pid exist? "]}," Daemons Application show_status":{"type":"method","name":"show_status","children":[],"call":[" puts "," (but pid-file exists:  + + "," (but pid-file exists:  + ","@pid_file read to_s ","@pid_file read ","running ! ","@pid_file exists? "," [pid  + + "," [pid  + "," group app_name "," group "," running? ","@pid pid to_s ","@pid pid ","@pid exists? ","@pid exist? ","@show_status_callback call "," running?  ! ","  running? ? "]}," Daemons Application zap":{"type":"method","name":"zap","children":[],"call":["@pid_file remove ","@pid cleanup ","@pid zap "]}," Daemons Application exception_log":{"type":"method","name":"exception_log","children":[],"call":["l_file close ","l_file error "," Exception  === ","ObjectSpace  each_object ","Logger  new ","File  join ","@group app_name + ","@group app_name "," pidfile_dir "," require ","l_file info "," logfile ","Logger  new  close ","Logger  new  error ","Logger  new  info "]}," Daemons Application run_via_load":{"type":"method","name":"run_via_load","children":[],"call":[" load "," script ","ARGV  concat ","ARGV  clear ","ENV  []= ","@controller_argv join "]}," Daemons Application run_via_exec":{"type":"method","name":"run_via_exec","children":[],"call":["Kernel  exec "," script ","ENV  []= ","@controller_argv join "]}," Daemons ApplicationGroup create_monitor":{"type":"method","name":"create_monitor","children":[],"call":["@monitor start ","Monitor  new ","@controller options [] ","@controller options "," options [] "," options ","@monitor stop ","opt []= ","Monitor  new  start ","Monitor  new  stop "]}," Daemons ApplicationGroup setup_app":{"type":"method","name":"setup_app","children":[],"call":["app app_argv= ","app controller_argv= ","app show_status_callback= ","@options [] "]}," Daemons ApplicationGroup setup":{"type":"method","name":"setup","children":[],"call":[" find_applications "," pidfile_dir "," script "]}," Daemons Application zap!":{"type":"method","name":"zap!","children":[],"call":["@pid_file remove ","@pid cleanup ","@pid zap "]}," Daemons Application real_start":{"type":"method","name":"real_start","children":[],"call":[" run_via_load "," exit ","@pid_file remove "," trap "," exception_log ","$daemons_sigterm ! ","opts [] ! ","opts [] "," at_exit "," run_via_exec ","@pid_file write ","Daemonize  daemonize ","File  join ","@group app_name + ","@group app_name "," pidfile_dir ","@group controller options ","@group controller ","@group controller options  [] ! ","@group controller options  [] "]}," Daemons PidFile running?":{"type":"method","name":"running?","children":[],"call":[]}," Daemons Monitor stop":{"type":"method","name":"stop","children":[],"call":["@pid_file remove ","Process  kill ","@pid_file read ","@pid cleanup ","@pid pid "," puts "," sleep ","Pid  running? ","Timeout  timeout ","@pid zap ","$stderr puts ","@@pid pid _file remove ","@@pid pid _file read ","@@pid pid  cleanup ","@@pid pid  @pid pid  ","@@pid pid  zap "]}," Daemons Monitor start":{"type":"method","name":"start","children":[],"call":[" exit! ","@pid_file remove ","f puts ","e backtrace inspect ","e backtrace ","Time  now ","File  open ","File  join ","@pid_file progname + ","@pid_file progname ","@pid_file dir "," sleep ","Process  detach ","a start "," fork ","a zap! ","a running? ","applications each "," loop ","@pid_file write ","Daemonize  daemonize ","applications empty? "," start_without_pidfile "," start_with_pidfile ","@pid kind_of? ","application_group applications empty? ","application_group applications "]}," Daemons Monitor initialize":{"type":"method","name":"initialize","children":[],"call":["PidFile  new ","an_app group app_name + ","an_app group app_name ","an_app group ","an_app pidfile_dir ","PidMem  new ","options [] "]}," Daemons Monitor find":{"type":"method","name":"find","children":[],"call":[]}," Daemons controller":{"type":"method","name":"controller","children":[],"call":[]}," Daemons group":{"type":"method","name":"group","children":[],"call":[]}," Daemons daemonize":{"type":"method","name":"daemonize","children":[],"call":["@group new_application start ","@group new_application ","ApplicationGroup  new ","options [] ","File  basename "]}," Daemons call":{"type":"method","name":"call","children":[],"call":["new_app start ","@group new_application ","ApplicationGroup  new ","options []= "," raise "," block_given? ","options [] "," fail ","Daemons  new ","@group new_application  start ","Daemons  new  start ","@group @group new_application lication ","@group Daemons  new lication "]}," Daemons PidFile pid":{"type":"method","name":"pid","children":[],"call":["f gets to_i ","f gets ","File  open "," filename ","p == ","File  of gets to_i en ","f gets to_i  == "]}," Daemons PidFile cleanup":{"type":"method","name":"cleanup","children":[],"call":["File  delete "," filename "," pid == ","Process  pid "," pid "]}," Daemons PidFile pid=":{"type":"method","name":"pid=","children":[],"call":["f puts ","File  open "," filename "," raise "," RuntimeException ","@number == ","@number < ","File  exists? "," multiple ","File  exist? ","f chmod "]}," Daemons Pid exists?":{"type":"method","name":"exists?","children":[],"call":[]}," Daemons Pid cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," Daemons Pid pid=":{"type":"method","name":"pid=","children":[],"call":[]}," Daemons Pid pid":{"type":"method","name":"pid","children":[],"call":[]}," Daemons Pid initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Daemons Pid dir":{"type":"method","name":"dir","children":[],"call":[]}," Daemons Pid running?":{"type":"method","name":"running?","children":[],"call":["Pid  running? "," pid "]}," Daemons Monitor start_without_pidfile":{"type":"method","name":"start_without_pidfile","children":[],"call":[" watch ","Thread  new "]}," Daemons Monitor start_with_pidfile":{"type":"method","name":"start_with_pidfile","children":[],"call":[" exit! ","@pid cleanup ","f puts ","e backtrace inspect ","e backtrace ","Time  now ","File  open ","File  join ","@pid progname + ","@pid progname ","@pid dir "," watch ","@pid pid= ","Process  pid ","Daemonize  daemonize "," fork ","@app logfile "]}," Daemons Monitor watch":{"type":"method","name":"watch","children":[],"call":[" sleep ","Process  detach ","a start "," fork ","a zap! ","a running? ","applications each "," loop ","application_group applications each ","application_group applications "]}," Daemonize call_as_daemon":{"type":"method","name":"call_as_daemon","children":[],"call":[" exit ","block call ","STDERR  reopen ","STDOUT  reopen ","STDIN  reopen ","io close ","io closed? ","(const nil :STDIN) include? ","ObjectSpace  each_object ","File  umask ","Dir  chdir ","wr close ","wr write ","Process  pid "," safefork "," trap ","oldmode zero? "," raise ","Daemons  RuntimeException new ","Daemons  RuntimeException ","Process  setsid ","rd close ","Process  waitpid ","rd read to_i ","rd read ","IO  pipe "," redirect_io ","io fileno < ","io fileno ","ios each ","(send\n  (const nil :Array) :new\n  (int 8192)) compact ","IO  for_fd ","Array  new "," close_io "," srand "," fail ","Process   safefork  ","Process  rd read to_i  ","Process  wait safefork  ","Process  waitrd read to_i  ","(send\n  (const nil :Array) :new\n  (int 8192)) compact  each "]}," Daemonize simulate":{"type":"method","name":"simulate","children":[],"call":["STDIN  reopen ","io close ","io closed? ","(const nil :STDIN) include? ","ObjectSpace  each_object ","File  umask ","Dir  chdir "," close_io "," srand ","$stdin reopen "]}," Daemons Application start_proc":{"type":"method","name":"start_proc","children":[],"call":["@pid pid= ","Daemonize  call_as_daemon "," logfile "," options [] "," options "," exit "," options [] call ","Daemonize  simulate ","Process  detach ","@pid pid ","Process  fork ","@group app_name "," output_logfile ","myproc call ","Process  pid ","p call "," exit! ","@pid cleanup "," trap "," exception_log ","$daemons_sigterm ! "," options [] ! "," at_exit "," proc "," started ","$daemons_stop_proc call ","@ options [] id  options [] id= "," o options [] tions [] "," o options [] tions "," o options [] tions [] call ","@ options [] id  options [] id ","@grou options []  a options []  options [] _name "," out options [] ut_logfile ","my options [] roc call ","Process   options [] id "," options []  call ","@ options [] id cleanu options []  "," tra options []  "," exce options [] tion_log "," o options [] tions [] ! ","  options [] roc ","$daemons_sto options [] _ options [] roc call "]}," Daemons Application start_load":{"type":"method","name":"start_load","children":[],"call":[" load "," script ","ARGV  concat ","ARGV  clear ","ENV  []= ","@controller_argv join "," exit ","@pid cleanup "," trap "," exception_log ","$daemons_sigterm ! "," options [] ! "," options [] "," options "," at_exit ","@pid pid= ","Process  pid ","Daemonize  daemonize "," logfile ","Daemonize  simulate "," exit! ","@group app_name "," output_logfile "," started ","$daemons_stop_proc call "," options []  call "]}," Daemons Application start_exec":{"type":"method","name":"start_exec","children":[],"call":["Kernel  exec "," script ","ENV  []= ","@controller_argv join ","@pid pid= ","Process  pid ","Daemonize  daemonize "," logfile ","Daemonize  simulate "," options [] "," options ","@group app_name "," output_logfile "," puts "," started ","@report backtrace_not_supported "]}," Daemons Application start_none":{"type":"method","name":"start_none","children":[],"call":[" exit ","@pid cleanup "," trap "," exception_log ","$daemons_sigterm ! "," options [] ! "," options [] "," options "," at_exit ","@pid pid= ","Process  pid ","Daemonize  daemonize ","Daemonize  simulate "," exit! ","@group app_name "," output_logfile "]}," Daemons Application logfile":{"type":"method","name":"logfile","children":[],"call":["File  join ","@group app_name + ","@group app_name "," pidfile_dir "," options [] "," options "," options [] == "," logdir "," logfilename ","  pidfile_dir  "]}," Daemons run_proc":{"type":"method","name":"run_proc","children":[],"call":["@controller group ","@controller run ","@controller catch_exceptions ","Controller  new ","options []= ","File  split [] ","File  split ","(nil) include? ","options [] ","File  expand_path ","Controller  new  group ","Controller  new  run ","Controller  new  catch_exceptions "]}," Daemons PidFile exist?":{"type":"method","name":"exist?","children":[],"call":["File  exist? "," filename "]}," Daemons Pid exist?":{"type":"method","name":"exist?","children":[],"call":[]}," Daemonize redirect_io":{"type":"method","name":"redirect_io","children":[],"call":["STDERR  sync= ","STDERR  reopen ","STDOUT  reopen ","STDOUT  sync= ","STDIN  reopen ","File  chmod ","$stderr reopen ","$stdout reopen ","$stderr sync= ","$stdout sync= ","$stdout puts "," Daemons SyslogIO  new "," require ","logfile_name == ","$stdin reopen "," Daemons SyslogIO  new  reopen "," Daemons SyslogIO  new  sync= "," Daemons SyslogIO  new  puts "]}," Daemons Application output_logfile":{"type":"method","name":"output_logfile","children":[],"call":["File  join ","@group app_name + ","@group app_name "," options [] "," options "," pidfile_dir "," options [] == "," logdir "," output_logfilename "," log_output? "," log_output_syslog? ","  pidfile_dir  "]}," Daemons PidMem existing":{"type":"method","name":"existing","children":[],"call":[]}," username":{"type":"method","name":"username","children":[],"call":["e name ","uid == ","e uid ","Etc  passwd "]}," groupname":{"type":"method","name":"groupname","children":[],"call":["e name ","gid == ","e gid ","Etc  group "]}," CurrentProcess change_privilege":{"type":"method","name":"change_privilege","children":[],"call":[]}," Daemons ApplicationGroup reload_all":{"type":"method","name":"reload_all","children":[],"call":["a reload ","@applications each "]}," Daemons ApplicationGroup find_applications_by_pidfiles":{"type":"method","name":"find_applications_by_pidfiles","children":[],"call":[" setup_app ","Application  new ","PidFile  existing ","pid_files map ","f =~ ","pid_files reject! ","Monitor  find "," app_name + "," app_name ","PidFile  find_files ","@keep_pid_files ! ","reporter deleted_found_pidfile ","Reporter  new "," options "," setup_Application  new  ","PidFile  find_files  map ","PidFile  find_files  reject! "," Application  new _name + "," Application  new _name ","@keep_PidFile  find_files  ! ","Reporter  new  deleted_found_pidfile "]}," Daemons ApplicationGroup find_applications_by_app_name":{"type":"method","name":"find_applications_by_app_name","children":[],"call":[" setup_app ","Application  new ","PidMem  existing ","pids map ","p split [] to_i ","p split [] ","p split ","processes map ","add include? ! ","add include? ","app_name != ","name [] ","app_name length - ","app_name length ","processes delete_if ","x split compact ","x split ","x chomp! "," setup_Application  new  ","x split compact  map ","Application  new _name != ","Application  new _name length - ","Application  new _name length ","x split compact  delete_if "]}," Daemons Application reload":{"type":"method","name":"reload","children":[],"call":["Process  kill ","@pid pid "," start "," zap ","@pid pid == "]}," Daemons Application started":{"type":"method","name":"started","children":[],"call":["STDOUT  flush "," puts "," group app_name "," group ","@pid pid ","@report process_started ","@@pid pid  @pid pid  "]}," Daemons Application logdir":{"type":"method","name":"logdir","children":[],"call":[" pidfile_dir "," options [] == "," options [] "," options "]}," Daemons Application change_privilege":{"type":"method","name":"change_privilege","children":[],"call":["CurrentProcess  change_privilege "," options [] "," options ","@report changing_process_privilege "]}," Daemonize close_io":{"type":"method","name":"close_io","children":[],"call":["io close ","io fileno < ","io fileno ","ios each ","(send\n  (const nil :Array) :new\n  (int 8192)) compact ","IO  for_fd ","Array  new ","io closed? ","(const nil :STDIN) include? ","ObjectSpace  each_object ","IO  for_fd close ","3 upto ","(gvar :$stdin) include? ","(send\n  (const nil :Array) :new\n  (int 8192)) compact  each "]}," Daemons ApplicationGroup running?":{"type":"method","name":"running?","children":[],"call":["a running? ","@applications each "]}," Daemons Application default_show_status":{"type":"method","name":"default_show_status","children":[],"call":[" puts "," (but pid-file exists:  + + "," (but pid-file exists:  + ","daemon pid pid to_s ","daemon pid pid ","daemon pid ","running ! ","daemon pid exist? "," [pid  + + "," [pid  + "," group app_name "," group ","daemon running? ","@report status ","daemon running?  ! ","daemon daemon running? ? "]}," Daemons Application logfilename":{"type":"method","name":"logfilename","children":[],"call":["@group app_name + ","@group app_name "," options [] "," options "]}," Daemons Application output_logfilename":{"type":"method","name":"output_logfilename","children":[],"call":["@group app_name + ","@group app_name "," options [] "," options "]}," Daemons Application show_status_callback=":{"type":"method","name":"show_status_callback=","children":[],"call":[" method ","function respond_to? "]}," Daemons PidFile zap":{"type":"method","name":"zap","children":[],"call":["File  delete "," filename "," exist? "]}," Daemons Pid zap":{"type":"method","name":"zap","children":[],"call":[]}," SyslogIO isatty":{"type":"method","name":"isatty","children":[],"call":[]}," SyslogIO noop":{"type":"method","name":"noop","children":[],"call":[]}," SyslogIO log":{"type":"method","name":"log","children":[],"call":[" write ","text chomp + ","text chomp "," priority "," priority nil? "]}," SyslogIO puts":{"type":"method","name":"puts","children":[],"call":[" write ","text chomp + ","text chomp ","texts each "]}," SyslogIO emerg":{"type":"method","name":"emerg","children":[],"call":[" log "]}," SyslogIO crit":{"type":"method","name":"crit","children":[],"call":[" log "]}," SyslogIO error":{"type":"method","name":"error","children":[],"call":[" log "]}," SyslogIO warn":{"type":"method","name":"warn","children":[],"call":[" log "]}," SyslogIO notice":{"type":"method","name":"notice","children":[],"call":[" log "]}," SyslogIO info":{"type":"method","name":"info","children":[],"call":[" log "]}," SyslogIO debug":{"type":"method","name":"debug","children":[],"call":[" log "]}," SyslogIO flush":{"type":"method","name":"flush","children":[],"call":[" syswrite "]}," SyslogIO syswrite":{"type":"method","name":"syswrite","children":[],"call":["Syslog  log ","@facility | ","line match ","line == ","line sub! ","sub [] ","@subs each ","text split each ","text split ","@out syswrite ","@out closed? ! ","@out closed? "]}," SyslogIO write":{"type":"method","name":"write","children":[],"call":[" flush ","line == ","@buffer + ","line to_s ","text split each ","text split "," syswrite ","@buffer +  + "]}," SyslogIO sync=":{"type":"method","name":"sync=","children":[],"call":[" flush ","sync == "," raise ","sync != "]}," SyslogIO sub_add":{"type":"method","name":"sub_add","children":[],"call":["@subs << "]}," SyslogIO initialize":{"type":"method","name":"initialize","children":[],"call":[" flush "," at_exit ","Syslog  open ","Syslog  reopen ","Syslog  options | ","Syslog  options ","Syslog  opened? ","$0 sub "," raise ","option inspect ","option is_a? ","@options nil? "," class syslog_option "," class "," class syslog_level "," class syslog_facility ","options each ","Syslog  Syslog  options |  | ","Syslog  Syslog  options |  ","@Syslog  options |  nil? ","Syslog  options |  each "]}," SyslogIO syslog_option":{"type":"method","name":"syslog_option","children":[],"call":[]}," SyslogIO syslog_level":{"type":"method","name":"syslog_level","children":[],"call":[]}," SyslogIO syslog_facility":{"type":"method","name":"syslog_facility","children":[],"call":[]}," SyslogIO syslog_constant":{"type":"method","name":"syslog_constant","children":[],"call":[]}," SyslogIO syslog_constant_sym":{"type":"method","name":"syslog_constant_sym","children":[],"call":[]}," Daemons Reporter status":{"type":"method","name":"status","children":[],"call":[" output_message "," (but pid-file exists:  + + "," (but pid-file exists:  + ","pid to_s ","running ! "," [pid  + + "," [pid  + "]}," Daemons Reporter stopped_process":{"type":"method","name":"stopped_process","children":[],"call":[" output_message ","$stdout flush "]}," Daemons Reporter cannot_stop_process":{"type":"method","name":"cannot_stop_process","children":[],"call":[" output_message ","$stdout flush "]}," Daemons Reporter forcefully_stopping_process":{"type":"method","name":"forcefully_stopping_process","children":[],"call":[" output_message "]}," Daemons Reporter stopping_process":{"type":"method","name":"stopping_process","children":[],"call":[" output_message ","$stdout flush ","sig == "]}," Daemons Reporter backtrace_not_supported":{"type":"method","name":"backtrace_not_supported","children":[],"call":[" output_message "]}," Daemons Reporter process_started":{"type":"method","name":"process_started","children":[],"call":[" output_message "]}," Daemons Reporter deleted_found_pidfile":{"type":"method","name":"deleted_found_pidfile","children":[],"call":[" output_message "]}," Daemons Reporter changing_process_privilege":{"type":"method","name":"changing_process_privilege","children":[],"call":[" output_message "]}," Daemons Reporter output_message":{"type":"method","name":"output_message","children":[],"call":[" puts "," options [] ! "," options [] "," options "]}," Daemons Reporter initialize":{"type":"method","name":"initialize","children":[],"call":["$stdout sync= ","options [] ! ","options [] "]}," Daemons Application dir":{"type":"method","name":"dir","children":[],"call":[" group dir "," group "]}," Daemons Application dir_mode":{"type":"method","name":"dir_mode","children":[],"call":[" group dir_mode "," group "]}," Daemons Application log_output_syslog?":{"type":"method","name":"log_output_syslog?","children":[],"call":[" options [] "," options "]}," Daemons Application log_output?":{"type":"method","name":"log_output?","children":[],"call":[" logdir "," options [] "," options "]}," Daemons new":{"type":"method","name":"new","children":[],"call":["@group new_application ","ApplicationGroup  new ","options [] ","options []= ","Proc  new "," fail "," block_given? "]}," Daemons Application parse_signals_and_waits":{"type":"method","name":"parse_signals_and_waits","children":[],"call":["splitted [] to_i ","splitted [] ","part split ","argv split collect ","argv split ","part split  [] to_i ","part split  [] "]}," Daemons Application wait_and_retry_kill_harder":{"type":"method","name":"wait_and_retry_kill_harder","children":[],"call":["@report cannot_stop_process "," group app_name "," group "," wait_and_retry_kill_harder ","remaining_signals any? "," sleep ","Pid  running? ","Timeout  timeout ","@report stopping_process ","wait positive? ! ","wait positive? ","Process  kill ","sig_wait [] ","remaining_signals shift "," sig_wait [] _and_retry_kill_harder ","remaining_sig_wait [] nals any? ","sig_wait []  positive? ! ","sig_wait []  positive? ","sig_sig_wait []  [] ","sig_wait [] _wait [] ","remaining_signals shift  [] ","remaining_sig_wait [] nals shift "]}}