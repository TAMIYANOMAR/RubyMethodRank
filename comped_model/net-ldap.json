{" Net SnmpPdu pdu_to_ber_string":{"type":"method","name":"pdu_to_ber_string","children":[],"call":[" raise ","Error  new "," pdu_type ","(send\n  (send nil :request_id) :to_ber) to_ber_contextspecific ","(block\n  (send\n    (ivar :@variables) :map)\n  (args\n    (arg :n)\n    (arg :v))\n  (send\n    (array\n      (send\n        (lvar :n) :to_ber_oid)\n      (send\n        (lvar :v) :to_ber)) :to_ber_sequence)) to_ber_sequence ","(send\n  (lvar :n) :to_ber_oid) to_ber_sequence ","v to_ber ","n to_ber_oid ","@variables map "," error_index to_ber "," error_index "," error_status to_ber "," error_status "," request_id to_ber "," request_id ","(block\n  (send\n    (ivar :@variables) :map)\n  (args\n    (arg :n)\n    (arg :v))\n  (send\n    (array\n      (send\n        (lvar :n) :to_ber_oid)\n      (send\n        (send\n          (const\n            (const\n              (const nil :Net) :BER) :BerIdentifiedNull) :new) :to_ber)) :to_ber_sequence)) to_ber_sequence ","Net BER BerIdentifiedNull  new to_ber ","Net BER BerIdentifiedNull  new "]}," Net SnmpPdu to_ber_string":{"type":"method","name":"to_ber_string","children":[],"call":["(send\n  (send nil :version) :to_ber) to_ber_sequence "," pdu_to_ber_string "," community to_ber "," community "," version to_ber "," version "]}," Net SnmpPdu add_variable_binding":{"type":"method","name":"add_variable_binding","children":[],"call":["@variables << "]}," Net SnmpPdu community=":{"type":"method","name":"community=","children":[],"call":["c to_s "]}," Net SnmpPdu error_status=":{"type":"method","name":"error_status=","children":[],"call":[" raise ","Error  new ","ErrorStatusCodes  has_key? ","ErrorStatusCodes  key? "]}," Net SnmpPdu pdu_type=":{"type":"method","name":"pdu_type=","children":[],"call":[" raise ","Error  new ","PduTypes  include? "]}," Net SnmpPdu version=":{"type":"method","name":"version=","children":[],"call":[" raise ","Error  new ","(int 0) include? "]}," Net SnmpPdu parse_get_response":{"type":"method","name":"parse_get_response","children":[],"call":[" add_variable_binding ","data [] each ","data [] "," send ","data [] to_i "]}," Net SnmpPdu parse_get_request":{"type":"method","name":"parse_get_request","children":[],"call":[" add_variable_binding "," raise ","Error  new ","v is_a? ","data [] each ","data [] "," send ","data [] to_i "]}," Net SnmpPdu parse_ber_object":{"type":"method","name":"parse_ber_object","children":[],"call":[" raise ","Error  new "," parse_get_response "," send "," parse_get_request ","data ber_identifier & ","data ber_identifier ","ber_object [] ","ber_object [] to_s ","ber_object [] to_i ","ber_object []  ber_identifier & ","ber_object []  ber_identifier "]}," Net SnmpPdu parse":{"type":"method","name":"parse","children":[],"call":[" raise ","Error  new "," parse_ber_object ","n send "," new ","Error   new ew "," new  se new d ","  new ew "]}," Net SnmpPdu initialize":{"type":"method","name":"initialize","children":[],"call":["args [] "]}," Net SNMP TimeTicks32 to_ber":{"type":"method","name":"to_ber","children":[],"call":["@value to_ber_application "]}," Net SNMP TimeTicks32 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net SNMP Gauge32 to_ber":{"type":"method","name":"to_ber","children":[],"call":["@value to_ber_application "]}," Net SNMP Gauge32 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net SNMP Counter32 to_ber":{"type":"method","name":"to_ber","children":[],"call":["@value to_ber_application "]}," Net SNMP Counter32 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP Connection delete":{"type":"method","name":"delete","children":[],"call":["pdu result_code "," raise ","LdapError  new ","pdu app_tag == ","pdu app_tag ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," next_msgid ","dn to_s to_ber_application_string ","dn to_s ","args [] ","LdapPdu  new  result_code ","LdapPdu  new  app_tag == ","LdapPdu  new  app_tag ","@conn read_@conn read_ber r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence "," next_msgid to_@conn read_ber r ","dn to_s to_@conn read_ber r_application_string ","args []  to_s to_ber_application_string ","args []  to_s "]}," Net LDAP Connection rename":{"type":"method","name":"rename","children":[],"call":["pdu result_code "," raise ","LdapError  new ","pdu app_tag == ","pdu app_tag ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," next_msgid ","(send\n  (lvar :old_dn) :to_ber) to_ber_appsequence ","delete_attrs to_ber ","new_rdn to_ber ","old_dn to_ber ","args [] ","LdapPdu  new  result_code ","LdapPdu  new  app_tag == ","LdapPdu  new  app_tag ","@conn read_@conn read_ber r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence "," next_msgid to_@conn read_ber r ","(send\n  (lvar :old_dn) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","delete_attrs to_@conn read_ber r ","new_rdn to_@conn read_ber r ","args []  to_ber ","old_dn to_@conn read_ber r "]}," Net LDAP Connection add":{"type":"method","name":"add","children":[],"call":["pdu result "," raise ","LdapError  new ","pdu app_tag == ","pdu app_tag ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," next_msgid ","(send\n  (lvar :add_dn) :to_ber) to_ber_appsequence ","add_attrs to_ber_sequence ","add_dn to_ber ","add_attrs << ","(send\n  (send\n    (lvar :k) :to_s) :to_ber) to_ber_sequence ","(send\n  (send\n    (lvar :v) :to_a) :map) to_ber_set ","m to_ber ","v to_a map ","v to_a ","k to_s to_ber ","k to_s ","a each ","args [] ","LdapPdu  new  result "," rargs [] ise ","Ldargs [] pError  new ","LdapPdu  new  app_tag == ","pdu args [] pp_targs [] g == ","LdapPdu  new  app_tag ","pdu args [] pp_targs [] g ","Ldargs [] pPdu  new ","@conn read_@conn read_ber r ","@conn reargs [] d_ber ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence "," next_msgid to_@conn read_ber r ","(send\n  (lvar :add_dn) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvargs [] r :args [] dd_dn) :to_ber) to_ber_args [] ppsequence ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","add_attrs to_@conn read_ber r_sequence ","args [] dd_args [] ttrs to_ber_sequence ","add_dn to_@conn read_ber r ","args [] dd_dn to_ber ","args []  to_ber ","args [] dd_args [] ttrs << ","(send\n  (send\n    (lvar :k) :to_s) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send\n    (lvargs [] r :k) :to_s) :to_ber) to_ber_sequence ","(send\n  (send\n    (lvar :v) :to_a) :map) to_@conn read_ber r_set ","(send\n  (send\n    (lvargs [] r :v) :to_args [] ) :margs [] p) to_ber_set ","m to_@conn read_ber r ","v to_args []  margs [] p ","v to_args []  ","k to_s to_@conn read_ber r ","args []  eargs [] ch ","args [] rgs [] "]}," Net LDAP Connection modify":{"type":"method","name":"modify","children":[],"call":["pdu result "," raise ","LdapError  new ","pdu app_tag == ","pdu app_tag ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," next_msgid ","(send\n  (lvar :modify_dn) :to_ber) to_ber_appsequence ","modify_ops to_ber_sequence ","modify_dn to_ber ","modify_ops << ","(lvar :op_1) to_ber_sequence ","(send\n  (send\n    (lvar :attr) :to_s) :to_ber) to_ber_sequence ","(send\n  (send\n    (lvar :values) :to_a) :map) to_ber_set ","v to_ber ","values to_a map ","values to_a ","attr to_s to_ber ","attr to_s ","(pair\n  (sym :add)\n  (int 0)) [] to_ber_enumerated ","(pair\n  (sym :add)\n  (int 0)) [] ","op to_sym ","a each ","args [] ","LdapPdu  new  result "," rargs [] ise ","Ldargs [] pError  new ","LdapPdu  new  app_tag == ","pdu args [] pp_targs [] g == ","LdapPdu  new  app_tag ","pdu args [] pp_targs [] g ","Ldargs [] pPdu  new ","@conn read_@conn read_ber r ","@conn reargs [] d_ber ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence "," next_msgid to_@conn read_ber r ","(send\n  (lvar :modify_dn) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvargs [] r :modify_dn) :to_ber) to_ber_args [] ppsequence ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","modify_ops to_@conn read_ber r_sequence ","modify_dn to_@conn read_ber r ","args []  to_ber ","(lvar :op_1) to_@conn read_ber r_sequence ","(lvar :(pair\n  (sym :add)\n  (int 0)) [] to_ber_enumerated ) to_ber_sequence ","(lvargs [] r :op_1) to_ber_sequence ","(send\n  (send\n    (lvar :attr) :to_s) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send\n    (lvargs [] r :args [] ttr) :to_s) :to_ber) to_ber_sequence ","(send\n  (send\n    (lvar :values) :to_a) :map) to_@conn read_ber r_set ","(send\n  (send\n    (lvargs [] r :vargs [] lues) :to_args [] ) :margs [] p) to_ber_set ","v to_@conn read_ber r ","vargs [] lues to_args []  margs [] p ","vargs [] lues to_args []  ","attr to_s to_@conn read_ber r ","args [] ttr to_s to_ber ","args [] ttr to_s ","(pair\n  (sym :add)\n  (int 0)) [] to_@conn read_ber r_enumerated ","(pargs [] ir\n  (sym :args [] dd)\n  (int 0)) [] to_ber_enumerargs [] ted ","(pargs [] ir\n  (sym :args [] dd)\n  (int 0)) [] ","args []  eargs [] ch ","args [] rgs [] "]}," Net LDAP Connection search":{"type":"method","name":"search","children":[],"call":["rfc2696_cookie []= ","cookie length > ","cookie length ","c value read_ber [] ","c value read_ber ","c value ","c value length > ","c value length ","c oid == ","c oid ","controls each ","result_code == "," raise ","LdapError  new ","pdu app_tag ","pdu result_controls ","pdu result_code ","se []= ","pdu search_referrals ","Net LDAP Entry  new "," block_given? ","pdu search_entry ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," next_msgid ","(send\n  (array\n    (send\n      (const\n        (const nil :LdapControls) :PagedResults) :to_ber)\n    (send\n      (false) :to_ber)\n    (send\n      (send\n        (send\n          (block\n            (send\n              (lvar :rfc2696_cookie) :map)\n            (args\n              (arg :v))\n            (send\n              (lvar :v) :to_ber)) :to_ber_sequence) :to_s) :to_ber)) :to_ber_sequence) to_ber_contextspecific ","(send\n  (const\n    (const nil :LdapControls) :PagedResults) :to_ber) to_ber_sequence ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence to_s to_ber ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence to_s ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence ","v to_ber ","rfc2696_cookie map "," to_ber ","LdapControls PagedResults  to_ber ","(send\n  (lvar :search_base) :to_ber) to_ber_appsequence ","search_attributes to_ber_sequence ","search_filter to_ber ","attributes_only to_ber ","0 to_ber ","query_limit to_ber ","0 to_ber_enumerated ","scope to_ber_enumerated ","search_base to_ber ","sizelimit - ","(send\n  (lvar :sizelimit) :-\n  (lvar :n_results)) < ","sizelimit > "," loop ","SearchScopes  include? ","args [] ","args [] == ","sizelimit >= ","args [] to_i ","attr to_s to_ber ","attr to_s ","(or\n  (begin\n    (and\n      (lvar :args)\n      (send\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","Filter  construct ","search_filter is_a? ","Filter  eq ","rfc2696_c value read_ber []  []= ","c value read_ber []  length > ","c value read_ber []  length ","c value read_@conn read_ber r [] ","c value read_@conn read_ber r ","pdu result_controls  each ","(send\n  (array\n    (send\n      (const\n        (const nil :LdapControls) :PagedResults) :to_ber)\n    (send\n      (false) :to_ber)\n    (send\n      (send\n        (send\n          (block\n            (send\n              (lvar :rfc2696_cookie) :map)\n            (args\n              (arg :v))\n            (send\n              (lvar :v) :to_ber)) :to_ber_sequence) :to_s) :to_ber)) :to_ber_sequence) to_ber_contextspecific  each ","pdu result_code  == "," raiNet LDAP Entry  new  ","LdapPdu  new  app_tag ","pdu result_pdu result_controls  ","pdu result_(send\n  (array\n    (send\n      (const\n        (const nil :LdapControls) :PagedResults) :to_ber)\n    (send\n      (false) :to_ber)\n    (send\n      (send\n        (send\n          (block\n            (send\n              (lvar :rfc2696_cookie) :map)\n            (args\n              (arg :v))\n            (send\n              (lvar :v) :to_ber)) :to_ber_sequence) :to_s) :to_ber)) :to_ber_sequence) to_ber_contextspecific  ","LdapPdu  new  result_controls ","pdu pdu result_code  ","LdapPdu  new  result_code ","Net LDAP Entry  new  []= ","pdu Net LDAP Entry  new arch_referrals ","LdapPdu  new  search_referrals ","pdu Net LDAP Entry  new arch_entry ","LdapPdu  new  search_entry ","@conn read_@conn read_ber r ","(Net LDAP Entry  new nd\n  (Net LDAP Entry  new nd nil :next_msgid) :to_ber) to_ber_Net LDAP Entry  new quence ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence "," next_msgid to_@conn read_ber r ","(send\n  (array\n    (send\n      (const\n        (const nil :LdapControls) :PagedResults) :to_ber)\n    (send\n      (false) :to_ber)\n    (send\n      (send\n        (send\n          (block\n            (send\n              (lvar :rfc2696_c value read_ber [] ) :map)\n            (args\n              (arg :v))\n            (send\n              (lvar :v) :to_ber)) :to_ber_sequence) :to_s) :to_ber)) :to_ber_sequence) to_ber_contextspecific ","(Net LDAP Entry  new nd\n  (array\n    (Net LDAP Entry  new nd\n      (const\n        (const nil :LdapControls) :PagedResults) :to_ber)\n    (Net LDAP Entry  new nd\n      (falNet LDAP Entry  new ) :to_ber)\n    (Net LDAP Entry  new nd\n      (Net LDAP Entry  new nd\n        (Net LDAP Entry  new nd\n          (block\n            (Net LDAP Entry  new nd\n              (lvar :rfc2696_cookie) :map)\n            (args\n              (arg :v))\n            (Net LDAP Entry  new nd\n              (lvar :v) :to_ber)) :to_ber_Net LDAP Entry  new quence) :to_s) :to_ber)) :to_ber_Net LDAP Entry  new quence) to_ber_contextspecific ","(send\n  (array\n    (send\n      (const\n        (const nil :LdapControls) :PagedResults) :to_@conn read_ber r)\n    (send\n      (false) :to_@conn read_ber r)\n    (send\n      (send\n        (send\n          (block\n            (send\n              (lvar :rfc2696_cookie) :map)\n            (args\n              (arg :v))\n            (send\n              (lvar :v) :to_@conn read_ber r)) :to_@conn read_ber r_sequence) :to_s) :to_@conn read_ber r)) :to_@conn read_ber r_sequence) to_@conn read_ber r_contextspecific ","(Net LDAP Entry  new nd\n  (const\n    (const nil :LdapControls) :PagedResults) :to_ber) to_ber_Net LDAP Entry  new quence ","(send\n  (const\n    (const nil :LdapControls) :PagedResults) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence to_s to_ber ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence to_s to_ber ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence to_s to_@conn read_ber r ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence to_s ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence to_s ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence to_s ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence ","v to_@conn read_ber r ","rfc2696_c value read_ber []  map "," to_@conn read_ber r ","LdapControls PagedResults  to_@conn read_ber r ","(Net LDAP Entry  new nd\n  (lvar :Net LDAP Entry  new arch_baNet LDAP Entry  new ) :to_ber) to_ber_appNet LDAP Entry  new quence ","(send\n  (lvar :search_base) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","Net LDAP Entry  new arch_attributes to_ber_Net LDAP Entry  new quence ","search_attributes to_@conn read_ber r_sequence ","Net LDAP Entry  new arch_filter to_ber ","search_filter to_@conn read_ber r ","Filter  construct  to_ber ","attributes_only to_@conn read_ber r ","0 to_@conn read_ber r ","query_limit to_@conn read_ber r ","0 to_@conn read_ber r_enumerated ","scope to_@conn read_ber r_enumerated ","Net LDAP Entry  new arch_baNet LDAP Entry  new  to_ber ","search_base to_@conn read_ber r ","(Net LDAP Entry  new nd\n  (lvar :sizelimit) :-\n  (lvar :n_results)) < ","attr to_s to_@conn read_ber r ","(or\n  (begin\n    (and\n      (lvar :args)\n      (Net LDAP Entry  new nd\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","(or\n  (@conn read_ber gin\n    (and\n      (lvar :args)\n      (send\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","Net LDAP Entry  new arch_filter is_a? ","Filter  construct  is_a? "]}," Net LDAP Connection bind_gss_spnego":{"type":"method","name":"bind_gss_spnego","children":[],"call":[" bind_sasl ","NTLM Message Type1  new serialize ","NTLM Message Type1  new ","t3_msg serialize ","t2_msg response ","NTLM Message  parse "," proc "," raise ","LdapError  new ","auth [] "," require ","t2_msg response  serialize ","NTLM Message  parse  response "]}," Net LDAP Connection bind_sasl":{"type":"method","name":"bind_sasl","children":[],"call":[" raise ","LdapError  new ","chall call ","pdu result_server_sasl_creds ","(op-asgn\n  (lvasgn :n) :+\n  (int 1)) > ","pdu result_code ","pdu result_code == ","Net LdapPdu  new ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence ","(send\n  (const nil :LdapVersion) :to_ber) to_ber_appsequence "," to_ber ","LdapVersion  to_ber ","(send\n  (lvar :mech) :to_ber) to_ber_contextspecific ","cred to_ber ","mech to_ber "," next_msgid to_ber "," next_msgid "," loop ","auth [] ","pdu result_server_sasl_chall call s ","Net LdapPdu  new  result_server_sasl_creds ","pdu result_server_(send\n  (lvar :mech) :to_ber) to_ber_contextspecific _creds ","Net LdapPdu  new  result_code ","Net LdapPdu  new  result_code == ","@conn read_@conn read_ber r ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence ","(send\n  (const nil :LdapVersion) :to_@conn read_ber r) to_@conn read_ber r_appsequence "," to_@conn read_ber r ","LdapVersion  to_@conn read_ber r ","(send\n  (lvar :mech) :to_@conn read_ber r) to_@conn read_ber r_contextspecific ","chall call  to_ber ","cred to_@conn read_ber r ","mech to_@conn read_ber r "," next_msgid to_@conn read_ber r "," next_ next_msgid to_ber  to_ber "," next_ next_msgid to_ber  "]}," Net LDAP Connection bind_simple":{"type":"method","name":"bind_simple","children":[],"call":["pdu result_code "," raise ","LdapError  new ","Net LdapPdu  new ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence ","(send\n  (const nil :LdapVersion) :to_ber) to_ber_appsequence ","psw to_ber_contextspecific ","user to_ber ","LdapVersion  to_ber "," next_msgid to_ber "," next_msgid ","auth [] ","auth [] == ","Net LdapPdu  new  result_code ","@conn read_@conn read_ber r ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence ","(send\n  (const nil :LdapVersion) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","psw to_@conn read_ber r_contextspecific ","user to_@conn read_ber r ","LdapVersion  to_@conn read_ber r "," next_msgid to_@conn read_ber r "," next_ next_msgid to_ber  to_ber "," next_ next_msgid to_ber  "]}," Net LDAP Connection bind":{"type":"method","name":"bind","children":[],"call":[" raise ","LdapError  new "," bind_gss_spnego ","meth == "," bind_sasl "," bind_simple ","(sym :simple) include? ","auth [] ","auth []  == "]}," Net LDAP Connection next_msgid":{"type":"method","name":"next_msgid","children":[],"call":[]}," Net LDAP Connection close":{"type":"method","name":"close","children":[],"call":["@conn close "]}," Net LDAP Connection setup_encryption":{"type":"method","name":"setup_encryption","children":[],"call":[" raise ","LdapError  new ","args [] ","pdu result_code ","@conn sync_close= ","@conn connect ","OpenSSL SSL SSLSocket  new ","OpenSSL SSL SSLContext  new ","pdu result_code zero? ","pdu nil? ","Net LdapPdu  new ","be nil? ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence ","(send\n  (const nil :StartTlsOid) :to_ber) to_ber_appsequence ","StartTlsOid  to_ber "," next_msgid to_ber "," next_msgid "," class wrap_with_ssl "," class ","Net LdapPdu  new  result_code ","OpenSSL SSL SSLSocket  new  sync_close= "," class wrap_with_ssl  sync_close= ","OpenSSL SSL SSLSocket  new  connect "," class wrap_with_ssl  connect ","Net LdapPdu  new  result_code zero? ","Net LdapPdu  new  nil? ","@conn read_ber  nil? ","OpenSSL SSL SSLSocket  new  read_ber "," class wrap_with_ssl  read_ber ","@conn read_@conn read_ber r ","OpenSSL SSL SSLSocket  new  write "," class wrap_with_ssl  write ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence ","(send\n  (const nil :StartTlsOid) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","StartTlsOid  to_@conn read_ber r "," next_msgid to_@conn read_ber r "," next_ next_msgid to_ber  to_ber "," next_ next_msgid to_ber  "]}," Net LDAP Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," setup_encryption ","server [] "," raise ","LdapError  new ","TCPSocket  new "]}," Net LDAP paged_searches_supported?":{"type":"method","name":"paged_searches_supported?","children":[],"call":["@server_caps [] include? ","@server_caps [] "," search_root_dse "]}," Net LDAP search_subschema_entry":{"type":"method","name":"search_subschema_entry","children":[],"call":["Entry  new ","rs first "," search ","subschema_name first ","rs first subschemasubentry "," search  fi search t ","subschema_name fi search t ","rs first subschemasubentry  first "," search  fi search t subschemasubentry "]}," Net LDAP search_root_dse":{"type":"method","name":"search_root_dse","children":[],"call":["Entry  new ","rs first "," search "," search  fi search t "]}," Net LDAP delete":{"type":"method","name":"delete","children":[],"call":["@result == ","conn close ","conn delete ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind ","args [] ","Connection  new ","@open_connection delete ","conn delete  == ","conn bind  == ","@open_connection delete  == ","Connection  new  close ","Connection  new  delete ","(ivasgn :conn delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","Connection  new  bind ","@open_Connection  new ection delete "]}," Net LDAP modify_rdn":{"type":"method","name":"modify_rdn","children":[],"call":[" rename "]}," Net LDAP rename":{"type":"method","name":"rename","children":[],"call":["@result == ","conn close ","conn rename ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind ","args [] ","Connection  new ","@open_connection rename ","conn rename  == ","conn bind  == ","@open_connection rename  == ","Connection  new  close ","Connection  new  rename ","(ivasgn :conn rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","Connection  new  bind ","@open_Connection  new ection rename "]}," Net LDAP delete_attribute":{"type":"method","name":"delete_attribute","children":[],"call":[" modify "]}," Net LDAP replace_attribute":{"type":"method","name":"replace_attribute","children":[],"call":[" modify "]}," Net LDAP add_attribute":{"type":"method","name":"add_attribute","children":[],"call":[" modify "]}," Net LDAP modify":{"type":"method","name":"modify","children":[],"call":["@result == ","conn close ","conn modify ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind ","args [] ","Connection  new ","@open_connection modify ","conn modify  == ","conn bind  == ","@open_connection modify  == ","Connection  new  close ","Connection  new  modify ","(ivasgn :conn modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","Connection  new  bind ","@open_Connection  new ection modify "]}," Net LDAP add":{"type":"method","name":"add","children":[],"call":["@result == ","conn close ","conn add ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind ","args [] ","Connection  new ","@open_connection add ","conn add  == ","conn bind  == ","@open_connection add  == ","Connection  new  close ","Connection  new  add ","(ivasgn :conn add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","Connection  new  bind ","@open_Connection  new ection add "]}," Net LDAP bind_as":{"type":"method","name":"bind_as","children":[],"call":[" bind ","password call ","password respond_to? ","args [] ","rs first dn ","rs first "," search "," open ","password call  call ","args []  call ","password call  respond_to? ","args []  respond_to? ","rs first rs first dn  "," search  fi search t dn "," search  fi search t "]}," Net LDAP bind":{"type":"method","name":"bind","children":[],"call":["@result == ","conn close ","conn bind ","Connection  new ","@open_connection bind ","conn bind  == ","@open_connection bind  == ","Connection  new  close ","Connection  new  bind ","@open_Connection  new ection bind "]}," Net LDAP search":{"type":"method","name":"search","children":[],"call":["@result == ","conn close "," block_given? ","result_set << ","conn search ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind ","args [] ","Connection  new ","@open_connection search ","args [] == ","args []= "," paged_searches_supported? ","conn bind  == ","Connection  new  close ","Connection  new  search ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","Connection  new  bind ","@open_Connection  new ection search "]}," Net LDAP open":{"type":"method","name":"open","children":[],"call":["@open_connection close ","@open_connection bind ","Connection  new "," raise ","LdapError  new ","Connection  new  close ","Connection  new  bind "]}," Net LDAP get_operation_result":{"type":"method","name":"get_operation_result","children":[],"call":["os message= ","LDAP  result2string ","os code ","os code= ","os matched_dn= ","@result [] ","os error_message= ","(or\n  (send\n    (ivar :@result) :[]\n    (sym :resultCode))\n  (str \"\")) to_i ","@result is_a? ","OpenStruct  new ","OpenStruct  new  message= ","OpenStruct  new  code ","OpenStruct  new  code= ","OpenStruct  new  matched_dn= ","OpenStruct  new  error_message= "]}," Net LDAP encryption":{"type":"method","name":"encryption","children":[],"call":[]}," Net LDAP authenticate":{"type":"method","name":"authenticate","children":[],"call":["password call ","password respond_to? ","password call  call ","password call  respond_to? "]}," Net LDAP initialize":{"type":"method","name":"initialize","children":[],"call":["@auth []= ","pr call ","pr respond_to? ","@auth [] "," encryption ","args [] ","@auth []  call ","@auth []  respond_to? "]}," Net LDAP result2string":{"type":"method","name":"result2string","children":[],"call":[]}," Net LDAP Password generate":{"type":"method","name":"generate","children":[],"call":[" raise ","Net LDAP LdapError  new ","(send\n  (send\n    (const nil :SHA1) :new\n    (send\n      (lvar :str) :to_s)) :digest) pack chomp ","(send\n  (send\n    (const nil :SHA1) :new\n    (send\n      (lvar :str) :to_s)) :digest) pack ","SHA1  new digest ","SHA1  new ","str to_s "," require ","(send\n  (send\n    (const nil :MD5) :new\n    (send\n      (lvar :str) :to_s)) :digest) pack chomp ","(send\n  (send\n    (const nil :MD5) :new\n    (send\n      (lvar :str) :to_s)) :digest) pack ","MD5  new digest ","MD5  new ","(send\n  (lvar :digest) :digest) pack chomp ","(send\n  (lvar :digest) :digest) pack ","digest digest ","digest << ","Digest SHA1  new ","Digest MD5  new "]}," Net LdapPdu parse_unbind_request":{"type":"method","name":"parse_unbind_request","children":[],"call":[]}," Net LdapPdu parse_bind_request":{"type":"method","name":"parse_bind_request","children":[],"call":["s authentication= ","s name= ","s version= ","OpenStruct  new ","OpenStruct  new  authentication= ","OpenStruct  new  name= ","OpenStruct  new  verOpenStruct  new ion= "]}," Net LdapPdu parse_ldap_search_request":{"type":"method","name":"parse_ldap_search_request","children":[],"call":["s attributes= ","s filter= ","s types_only= ","s time_limit= ","s size_limit= ","s deref_aliases= ","s scope= ","s base_object= ","OpenStruct  new ","OpenStruct  new  attributeOpenStruct  new = ","OpenStruct  new  filter= ","OpenStruct  new  typeOpenStruct  new _only= ","OpenStruct  new  time_limit= ","OpenStruct  new  OpenStruct  new ize_limit= ","OpenStruct  new  deref_aliaOpenStruct  new eOpenStruct  new = ","OpenStruct  new  OpenStruct  new cope= ","OpenStruct  new  baOpenStruct  new e_object= "]}," Net LdapPdu parse_controls":{"type":"method","name":"parse_controls","children":[],"call":["o criticality= ","o value= ","o criticality ","o criticality is_a? ","control [] ","o oid= ","OpenStruct  new ","sequence map ","OpenStruct  new  criticality= ","OpenStruct  new  value= ","OpenStruct  new  criticality ","OpenStruct  new  criticality is_a? ","cOpenStruct  new ntrOpenStruct  new l [] ","OpenStruct  new  OpenStruct  new id= "]}," Net LdapPdu parse_search_referral":{"type":"method","name":"parse_search_referral","children":[],"call":[]}," Net LdapPdu parse_search_return":{"type":"method","name":"parse_search_return","children":[],"call":["@search_entry []= ","seq [] ","sequence [] each ","sequence [] ","LDAP Entry  new "," raise ","sequence length >= ","sequence length ","LDAP Entry  new  []= "]}," Net LdapPdu parse_bind_response":{"type":"method","name":"parse_bind_response","children":[],"call":["@ldap_result []= ","sequence [] ","sequence length >= ","sequence length "," raise "]}," Net LdapPdu parse_ldap_result":{"type":"method","name":"parse_ldap_result","children":[],"call":["sequence [] "," raise ","sequence length >= ","sequence length "]}," Net LdapPdu result_server_sasl_creds":{"type":"method","name":"result_server_sasl_creds","children":[],"call":["@ldap_result [] "]}," Net LdapPdu result_controls":{"type":"method","name":"result_controls","children":[],"call":[]}," Net LdapPdu result_code":{"type":"method","name":"result_code","children":[],"call":["@ldap_result [] "]}," Net LdapPdu result":{"type":"method","name":"result","children":[],"call":[]}," Net LdapPdu initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","LdapPduError  new "," parse_ldap_result ","ber_object [] "," parse_unbind_request "," parse_bind_request "," parse_ldap_search_request "," parse_controls "," parse_search_referral "," parse_search_return "," parse_bind_response ","ber_object [] ber_identifier & ","ber_object [] ber_identifier ","ber_object [] to_i "]}," Net LDAP FilterParser parse_filter_branch":{"type":"method","name":"parse_filter_branch","children":[],"call":["Filter  ge ","Filter  gt ","Filter  le ","Filter  lt ","Filter  ne ","Filter  eq ","scanner scan "]}," Net LDAP FilterParser parse_paren_expression":{"type":"method","name":"parse_paren_expression","children":[],"call":["scanner scan "," parse_filter_branch ","br ~ "," parse_paren_expression ","a | ","branches shift ","branches length > ","branches length ","branches length >= ","branches << ","a & ","sca | nner sca | n ","scbranches shift nner scbranches shift n ","sca & nner sca & n "," parse_filter_ parse_paren_expression anch "," pa | rse_filter_bra | nch "," pbranches shift rse_filter_brbranches shift nch "," pa & rse_filter_bra & nch "," parse_paren_expression  ~ "," pa | rse_pa | ren_expression "," pbranches shift rse_pbranches shift ren_expression "," pa & rse_pa & ren_expression ","a |  | ","branches shift  | ","a &  | "," parse_paren_expression anches shift ","bra | nches shift ","brbranches shift nches shift ","bra & nches shift "," parse_paren_expression anches length > ","bra | nches length > ","brbranches shift nches length > ","bra & nches length > "," parse_paren_expression anches length ","bra | nches length ","brbranches shift nches length ","bra & nches length "," parse_paren_expression anches length >= ","bra | nches length >= ","brbranches shift nches length >= ","bra & nches length >= "," parse_paren_expression anches << ","bra | nches << ","brbranches shift nches << ","bra & nches << ","a |  & ","branches shift  & ","a &  & "]}," Net LDAP FilterParser parse":{"type":"method","name":"parse","children":[],"call":[" parse_paren_expression "," parse_filter_branch "]}," Net LDAP FilterParser initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Net LDAP LdapError  new "," parse ","StringScanner  new "," require "]}," Net LDAP Filter from_rfc2254":{"type":"method","name":"from_rfc2254","children":[],"call":[]}," Net LDAP Filter construct":{"type":"method","name":"construct","children":[],"call":[]}," Net LDAP Filter match":{"type":"method","name":"match","children":[],"call":[" raise ","LdapError  new ","l index ","l to_a ","entry [] ","l length > ","l length ","@right == ","l to_a  index ","entry []  index ","l to_a  to_a ","entry []  to_a ","l to_a  l to_a ength > ","entry []  entry [] ength > ","l to_a  l to_a ength ","entry []  entry [] ength "]}," Net LDAP Filter parse_ldap_filter":{"type":"method","name":"parse_ldap_filter","children":[],"call":[]}," Net LDAP Filter coalesce":{"type":"method","name":"coalesce","children":[],"call":["@right coalesce ","@left coalesce ","@op == "]}," Net LDAP Filter execute":{"type":"method","name":"execute","children":[],"call":["@left execute ","@right execute ","@right index ","@right == "]}," Net LDAP Filter parse_ber":{"type":"method","name":"parse_ber","children":[],"call":[]}," Net LDAP Filter unescape":{"type":"method","name":"unescape","children":[],"call":["(send\n  (nth-ref 1) :hex) pack ","1 hex ","right gsub "]}," Net LDAP Filter to_ber":{"type":"method","name":"to_ber","children":[],"call":[" raise ","(send\n  (ivar :@left) :to_ber) to_ber_contextspecific ","@left to_ber ","(send\n  (lvar :ary) :map) to_ber_contextspecific ","a to_ber ","ary map ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten ","@right coalesce ","@left coalesce ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten ","(send\n  (send\n    (ivar :@left) :to_s) :to_ber) to_ber_contextspecific "," unescape to_ber "," unescape ","@left to_s to_ber ","@left to_s ","seq to_ber ","seq << ","ary shift to_ber_contextspecific ","ary shift ","n_any_strings times ","ary length - ","ary length ","ary first == ","ary first ","@right =~ ","@right split ","@left to_s to_ber_contextspecific ","@right == ","(send\n  (lvar :(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten ) :map) to_ber_contextspecific ","(send\n  (lvar :(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten ) :map) to_ber_contextspecific ","(send\n  (lvar :@right split ) :map) to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  map ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  map ","@right split  map ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  shift to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  shift to_ber_contextspecific ","@right split  shift to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  shift ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  shift ","@right split  shift ","ary length -  times ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  length - ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  length - ","@right split  length - ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  length ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  length ","@right split  length ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  first == ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  first == ","@right split  first == ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  first ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  first ","@right split  first "]}," Net LDAP Filter to_s":{"type":"method","name":"to_s","children":[],"call":[" raise "]}," Net LDAP Filter ==":{"type":"method","name":"==","children":[],"call":[" instance_eval == ","filter instance_eval "," instance_eval "]}," Net LDAP Filter ~@":{"type":"method","name":"~@","children":[],"call":["Filter  new "]}," Net LDAP Filter |":{"type":"method","name":"|","children":[],"call":["Filter  new "]}," Net LDAP Filter &":{"type":"method","name":"&","children":[],"call":["Filter  new "]}," Net LDAP Filter pres":{"type":"method","name":"pres","children":[],"call":[]}," Net LDAP Filter le":{"type":"method","name":"le","children":[],"call":[]}," Net LDAP Filter ge":{"type":"method","name":"ge","children":[],"call":[]}," Net LDAP Filter ne":{"type":"method","name":"ne","children":[],"call":[]}," Net LDAP Filter eq":{"type":"method","name":"eq","children":[],"call":[]}," Net LDAP Filter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP Entry is_attribute_value_binary?":{"type":"method","name":"is_attribute_value_binary?","children":[],"call":["v [] == ","v [] ","byt > ","byt < ","v each_byte ","value to_s ","value to_s  [] == ","value to_s  [] ","value to_s  each_byte ","value to_s alue to_s "]}," Net LDAP Entry write":{"type":"method","name":"write","children":[],"call":[]}," Net LDAP Entry method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","NoMethodError  new "," []= ","s to_s [] intern ","s to_s [] ","s to_s ","value is_a? ","RuntimeError  new ","args [] ","s to_s length > ","s to_s length ","s to_s [] == "," [] "," attribute_names include? "," attribute_names ","args [] to_s downcase intern ","args [] to_s downcase ","args [] to_s ","args empty? ","value instance_of? ","args first ","args size == ","args size "," setter? "," valid_attribute? "," attribute_name "," raiargs [] to_s downcase intern e ","args [] to_s downcase intern  to_args [] to_s downcase intern  [] intern ","args [] to_s downcase intern  to_args [] to_s downcase intern  [] ","args [] to_s downcase intern  to_args [] to_s downcase intern  ","args []  is_a? ","args first  is_a? ","value iargs [] to_s downcase intern _a? ","argargs [] to_s downcase intern  [] ","args [] to_s downcase intern  to_args [] to_s downcase intern  length > ","args [] to_s downcase intern  to_args [] to_s downcase intern  length ","args [] to_s downcase intern  to_args [] to_s downcase intern  [] == "," attribute_s to_s [] intern s include? "," attribute_ attribute_name s include? "," attribute_nameargs [] to_s downcase intern  include? "," attribute_s to_s [] intern s "," attribute_ attribute_name s "," attribute_nameargs [] to_s downcase intern  ","argargs [] to_s downcase intern  [] to_args [] to_s downcase intern  downcaargs [] to_s downcase intern e intern ","argargs [] to_s downcase intern  [] to_args [] to_s downcase intern  downcaargs [] to_s downcase intern e ","argargs [] to_s downcase intern  [] to_args [] to_s downcase intern  ","argargs [] to_s downcase intern  empty? ","args []  instance_of? ","args first  instance_of? ","value inargs [] to_s downcase intern tance_of? ","argargs [] to_s downcase intern  firargs [] to_s downcase intern t ","argargs [] to_s downcase intern  args [] to_s downcase intern ize == ","argargs [] to_s downcase intern  args [] to_s downcase intern ize "," args [] to_s downcase intern etter? "," attribute_s to_s [] intern  "," attribute_ attribute_name  "]}," Net LDAP Entry from_single_ldif_string":{"type":"method","name":"from_single_ldif_string","children":[],"call":["entry dn ","Base64  decode64 ","2 == ","entry [] ","line =~ ","line length == ","line length ","ldif split each ","ldif split ","entry []= ","Entry  new ","Entry  new  dn ","Entry  new  [] ","Entry  new  []= "]}," Net LDAP Entry to_ldif":{"type":"method","name":"to_ldif","children":[],"call":["ary join ","ary << ","Base64  encode64 chomp gsub ","Base64  encode64 chomp ","Base64  encode64 "," is_attribute_value_binary? ","k == ","v each "," each_attribute "," dn "]}," Net LDAP Entry each":{"type":"method","name":"each","children":[],"call":[" [] "," attribute_names each "," attribute_names "," block_given? "]}," Net LDAP Entry attribute_names":{"type":"method","name":"attribute_names","children":[],"call":["@myhash keys "]}," Net LDAP Entry dn":{"type":"method","name":"dn","children":[],"call":[" [] [] to_s "," [] [] "," [] "]}," Net LDAP Entry []":{"type":"method","name":"[]","children":[],"call":["@myhash [] ","name to_s downcase intern ","name to_s downcase ","name to_s ","name is_a? "," attribute_name ","name to_s downcase intern  to_s downcase intern "," attribute_name  to_s downcase intern ","name to_s downcase intern  to_s downcase "," attribute_name  to_s downcase ","name to_s downcase intern  to_s "," attribute_name  to_s ","name to_s downcase intern  is_a? "," attribute_name  is_a? "," attribute_name to_s downcase intern  "," attribute_ attribute_name  "]}," Net LDAP Entry []=":{"type":"method","name":"[]=","children":[],"call":["@myhash []= ","value is_a? ","name to_s downcase intern ","name to_s downcase ","name to_s "," attribute_name "]}," Net LDAP Entry _load":{"type":"method","name":"_load","children":[],"call":[" from_single_ldif_string "]}," Net LDAP Entry _dump":{"type":"method","name":"_dump","children":[],"call":[" to_ldif "]}," Net LDAP Entry initialize":{"type":"method","name":"initialize","children":[],"call":["@myhash []= "]}," Net LDAP Dataset to_ldif":{"type":"method","name":"to_ldif","children":[],"call":["ary each "," block_given? ","ary << "," [] [] each "," [] [] ","attr intern "," [] ","(send\n  (send\n    (send\n      (self) :[]\n      (lvar :dn)) :keys) :map) sort each ","(send\n  (send\n    (send\n      (self) :[]\n      (lvar :dn)) :keys) :map) sort ","sym to_s "," [] keys map "," [] keys "," keys sort each "," keys sort "," keys "]}," Net LDAP Dataset initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP Dataset read_ldif":{"type":"method","name":"read_ldif","children":[],"call":[]}," Array to_ber_seq_internal":{"type":"method","name":"to_ber_seq_internal","children":[],"call":["(lvar :code) pack + + ","(lvar :code) pack + ","s length to_ber_length_encoding ","s length ","(lvar :code) pack ","s + "," each "," join ","s +  length to_ber_length_encoding "," join  length to_ber_length_encoding ","s +  length "," join  length ","s +  + "," join  + "]}," Array to_ber_oid":{"type":"method","name":"to_ber_oid","children":[],"call":["(int 6) pack + ","(int 6) pack ","oid length ","ary pack ","ary unshift ","first * + ","ary shift ","first * "," raise ","Net BER BerError  new ","(int 0) include? "," dup ","ary pack  length "," dup  pack "," dup  unshift ","first * +  * + ","ary shift  * + "," dup  shift ","first * +  * ","ary shift  * "]}," Array to_ber_contextspecific":{"type":"method","name":"to_ber_contextspecific","children":[],"call":[" to_ber_seq_internal ","160 + "]}," Array to_ber_appsequence":{"type":"method","name":"to_ber_appsequence","children":[],"call":[" to_ber_seq_internal ","96 + "]}," Array to_ber_sequence":{"type":"method","name":"to_ber_sequence","children":[],"call":[" to_ber_seq_internal ","48 + "]}," Array to_ber_set":{"type":"method","name":"to_ber_set","children":[],"call":[" to_ber_seq_internal ","49 + "]}," Array to_ber":{"type":"method","name":"to_ber","children":[],"call":[" to_ber_seq_internal ","48 + "]}," String to_ber_contextspecific":{"type":"method","name":"to_ber_contextspecific","children":[],"call":[" to_ber ","128 + "]}," String to_ber_application_string":{"type":"method","name":"to_ber_application_string","children":[],"call":[" to_ber ","64 + "]}," String to_ber":{"type":"method","name":"to_ber","children":[],"call":["(lvar :code) pack + + ","(lvar :code) pack + "," length to_ber_length_encoding "," length ","(lvar :code) pack ","raw_string length to_ber_length_encoding ","raw_string length "," raw_utf8_encoded "," raw_utf8_encoded  length to_ber_length_encoding "," raw_utf8_encoded  length "]}," Bignum to_ber":{"type":"method","name":"to_ber","children":[],"call":["(int 2) pack + ","out reverse ","(int 2) pack ","out length ","out slice! ","out [] == ","out [] ","out length > ","1 << ","bit % ","bit / "," [] == "," [] ","(send\n  (lvar :sz) :*\n  (int 8)) times ","sz * ","\u0000 * "," size ","\u0002 + ","(send\n  (array\n    (send\n      (lvar :result) :size)) :+\n  (send\n    (lvar :result) :reverse)) pack ","(send\n  (lvar :result) :size) + ","result reverse ","result size ","n >> ","result << ","n & ","n > ","(in >> t 2) pack + ","\u0000 *  reverse ","(in >> t 2) pack ","\u0000 *  length ","out len >> gth ","\u0000 *  slice! ","\u0000 *  [] == ","\u0000 *  [] ","\u0000 *  length > ","out len >> gth > ","n & it % ","n & it / ","(send\n  (lvar : size ) :*\n  (int 8)) times ","(sen >> d\n  (lvar :sz) :*\n  (in >> t 8)) times "," size  * ","(sen >> d\n  (array\n    (sen >> d\n      (lvar :result) :size)) :+\n  (sen >> d\n    (lvar :result) :reverse)) pack ","(sen >> d\n  (lvar :result) :size) + ","n >>  >> ","n >>  & ","n >>  > "]}," Fixnum to_ber_internal":{"type":"method","name":"to_ber_internal","children":[],"call":["(lvar :zlen) pack + ","z [] ","0 - ","(lvar :zlen) pack "," < ","(self) pack "," raise ","Net BER BerError  new "," >= ","result pack ","result << ","(send\n  (self) :>>\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :size) :-\n          (int 1))) :*\n      (int 8)))) & "," >> ","(send\n  (lvar :size) :-\n  (int 1)) * ","size - ","size > ","(send\n  (self) :&\n  (begin\n    (send\n      (int 255) :<<\n      (send\n        (begin\n          (send\n            (lvar :size) :-\n            (int 1))) :*\n        (int 8))))) > "," & ","255 << ","(lvar :(self) pack len) pack + ","(self) pack  [] ","(lvar :(self) pack len) pack ","(send\n  (self) :>>\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :si(self) pack e) :-\n          (int 1))) :*\n      (int 8)))) & ","(send\n  (lvar :si(self) pack e) :-\n  (int 1)) * ","si(self) pack e - ","si(self) pack e > ","(send\n  (self) :&\n  (begin\n    (send\n      (int 255) :<<\n      (send\n        (begin\n          (send\n            (lvar :si(self) pack e) :-\n            (int 1))) :*\n        (int 8))))) > "]}," Fixnum to_ber_application":{"type":"method","name":"to_ber_application","children":[],"call":["(send\n  (int 64) :+\n  (lvar :tag)) pack + "," to_ber_internal ","(send\n  (int 64) :+\n  (lvar :tag)) pack ","64 + "]}," Fixnum to_ber_length_encoding":{"type":"method","name":"to_ber_length_encoding","children":[],"call":["(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack + ","(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack ","128 + ","i length ","(self) pack sub ","(self) pack "," <= ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack + ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack ","(self) pack sub  length "]}," Fixnum to_ber_enumerated":{"type":"method","name":"to_ber_enumerated","children":[],"call":["\n + "," to_ber_internal "]}," Fixnum to_ber":{"type":"method","name":"to_ber","children":[],"call":["\u0002 + "," to_ber_internal "]}," TrueClass to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," FalseClass to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," String read_ber!":{"type":"method","name":"read_ber!","children":[],"call":[" slice! "," read_ber_from_string ","io pos ","io read_ber ","StringIO  new ","StringIO  new  pos ","StringIO  new  read_ber "]}," String read_ber":{"type":"method","name":"read_ber","children":[],"call":["StringIO  new read_ber ","StringIO  new "]}," Net BER BERParser read_ber_from_string":{"type":"method","name":"read_ber_from_string","children":[],"call":[" raise ","BerError  new ","n ber_identifier= ","BerIdentifiedNull  new ","objtype == ","newobj != ","oid unshift ","g first ","g last ","f - ","f < ","oid shift ","newobj unpack ","(send\n  (lvar :j) :<<\n  (int 8)) + ","j << ","newobj each_byte ","s ber_identifier= ","BerIdentifiedString  new ","seq << ","(lvasgn :e\n  (send\n    (lvar :sio) :read_ber\n    (lvar :syntax))) != ","sio read_ber ","StringIO  new ","seq ber_identifier= ","BerIdentifiedArray  new ","BuiltinSyntax  [] ","syntax [] ","str [] ","n_consumed + ","str length >= ","str length ","1 + ","n1 times ","n & ","n <= "," raiBerIdentifiedString  new e "," raissio read_ber  ","BerError  BerIdentifiedNull  new ew ","BerError  str [] ew ","Bsio read_ber rError  nsio read_ber w ","BerIdentifiedNull  new  ber_ideBerIdentifiedNull  new tifier= ","str []  ber_idestr [] tifier= ","n ber_identioid shift ier= ","n bsio read_ber r_idsio read_ber ntifisio read_ber r= ","n ber_str [] entifier= ","BerIdeBerIdentifiedNull  new tifiedNull  BerIdentifiedNull  new ew ","BerIdestr [] tifiedNull  str [] ew ","BerIdentioid shift iedNull  new ","Bsio read_ber rIdsio read_ber ntifisio read_ber dNull  nsio read_ber w ","ob(send\n  (lvar :j) :<<\n  (int 8)) + type == ","objtypsio read_ber  == ","BerIdentifiedNull  new ewobj != ","str [] ewobj != ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  != ","nsio read_ber wobj != ","str []  != ","oid uBerIdentifiedNull  new shift ","oid ustr [] shift ","oid unshioid shift t ","newobj unpack  unshift ","oid unBerIdentifiedString  new hift ","ostr []  unshift ","g oid shift irst ","g firBerIdentifiedString  new t ","g laBerIdentifiedString  new t ","oid shift  - ","oid shift  < ","oid shioid shift t ","newobj unpack  shift ","oid BerIdentifiedString  new hift ","ostr []  shift ","BerIdentifiedNull  new ewobj uBerIdentifiedNull  new pack ","str [] ewobj ustr [] pack ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  unpack ","nsio read_ber wobj unpack ","str []  unpack ","(seBerIdentifiedNull  new d\n  (lvar :j) :<<\n  (iBerIdentifiedNull  new t 8)) + ","(sestr [] d\n  (lvar :j) :<<\n  (istr [] t 8)) + ","(send\n  (lvar :(send\n  (lvar :j) :<<\n  (int 8)) + ) :<<\n  (int 8)) + ","(BerIdentifiedString  new end\n  (lvar :j) :<<\n  (int 8)) + ","(ssio read_ber nd\n  (lvar :j) :<<\n  (int 8)) + ","(send\n  (lvar :j) :<<\n  (int 8)) +  << ","BerIdentifiedNull  new ewobj each_byte ","str [] ewobj each_byte ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  each_byte ","nsio read_ber wobj sio read_ber ach_bytsio read_ber  ","str []  each_byte ","s ber_ideBerIdentifiedNull  new tifier= ","s ber_idestr [] tifier= ","s ber_identioid shift ier= ","BerIdentifiedString  new  ber_identifier= ","s bsio read_ber r_idsio read_ber ntifisio read_ber r= ","s ber_str [] entifier= ","BerIdeBerIdentifiedNull  new tifiedStriBerIdentifiedNull  new g  BerIdentifiedNull  new ew ","BerIdestr [] tifiedStristr [] g  str [] ew ","BerIdentioid shift iedString  new ","Bsio read_ber rIdsio read_ber ntifisio read_ber dString  nsio read_ber w ","BerIdentifiedString  new eq << ","ssio read_ber q << ","BerIdentifiedArray  new  << ","(lvasgBerIdentifiedNull  new  :e\n  (seBerIdentifiedNull  new d\n    (lvar :sio) :read_ber\n    (lvar :syBerIdentifiedNull  new tax))) != ","(lvasgstr []  :e\n  (sestr [] d\n    (lvar :sio) :read_ber\n    (lvar :systr [] tax))) != ","(lvaBerIdentifiedString  new gn :e\n  (BerIdentifiedString  new end\n    (lvar :BerIdentifiedString  new io) :read_ber\n    (lvar :BerIdentifiedString  new yntax))) != ","(lvasgn :sio read_ber \n  (ssio read_ber nd\n    (lvar :sio) :rsio read_ber ad_bsio read_ber r\n    (lvar :syntax))) != ","(lvasgn :e\n  (send\n    (lvar :StringIO  new ) :read_ber\n    (lvar :syntax))) != ","BerIdentifiedString  new io read_ber ","sio rsio read_ber ad_bsio read_ber r ","StringIO  new  read_ber ","StriBerIdentifiedNull  new gIO  BerIdentifiedNull  new ew ","Stristr [] gIO  str [] ew ","StringIO  nsio read_ber w ","seq ber_ideBerIdentifiedNull  new tifier= ","seq ber_idestr [] tifier= ","seq ber_identioid shift ier= ","BerIdentifiedString  new eq ber_identifier= ","ssio read_ber q bsio read_ber r_idsio read_ber ntifisio read_ber r= ","BerIdentifiedArray  new  ber_identifier= ","seq ber_str [] entifier= ","BerIdeBerIdentifiedNull  new tifiedArray  BerIdentifiedNull  new ew ","BerIdestr [] tifiedArray  str [] ew ","BerIdentioid shift iedArray  new ","Bsio read_ber rIdsio read_ber ntifisio read_ber dArray  nsio read_ber w ","BuiltiBerIdentifiedNull  new SyBerIdentifiedNull  new tax  [] ","Builtistr [] Systr [] tax  [] ","syBerIdentifiedNull  new tax [] ","systr [] tax [] ","BerIdentifiedString  new yntax [] ","BerIdentifiedString  new tr [] ","BerIdentifiedNull  new _coBerIdentifiedNull  new sumed + ","str [] _costr [] sumed + ","n_conBerIdentifiedString  new umed + ","n_consumsio read_ber d + ","str leBerIdentifiedNull  new gth >= ","str lestr [] gth >= ","BerIdentifiedString  new tr length >= ","str lsio read_ber ngth >= ","str leBerIdentifiedNull  new gth ","str lestr [] gth ","BerIdentifiedString  new tr length ","str lsio read_ber ngth ","BerIdentifiedNull  new 1 times ","str [] 1 times ","n1 timeBerIdentifiedString  new  ","n1 timsio read_ber s ","n &  times ","BerIdentifiedNull  new  & ","str []  & ","BerIdentifiedNull  new  <= ","str []  <= "]}," Net BER BERParser read_ber":{"type":"method","name":"read_ber","children":[],"call":[" raise ","BerError  new ","n ber_identifier= ","BerIdentifiedNull  new ","objtype == ","newobj != ","seq << ","(lvasgn :e\n  (send\n    (lvar :sio) :read_ber\n    (lvar :syntax))) != ","sio read_ber ","StringIO  new ","seq ber_identifier= ","BerIdentifiedArray  new ","oid unshift ","g first ","g last ","f - ","f < ","oid shift ","newobj unpack ","(send\n  (lvar :j) :<<\n  (int 8)) + ","j << ","newobj each_byte ","s ber_identifier= ","BerIdentifiedString  new ","BuiltinSyntax  [] ","syntax [] "," read ","1 + ","n & "," read each_byte ","n <= "," getbyte "," raissio read_ber  "," raiBerIdentifiedString  new e ","BerError  BerIdentifiedNull  new ew ","BerError   getbyte ew ","Bsio read_ber rError  nsio read_ber w ","BerIdentifiedNull  new  ber_ideBerIdentifiedNull  new tifier= "," getbyte  ber_ide getbyte tifier= ","n bsio read_ber r_idsio read_ber ntifisio read_ber r= ","n ber_identioid shift ier= ","n ber_ getbyte entifier= ","BerIdeBerIdentifiedNull  new tifiedNull  BerIdentifiedNull  new ew ","BerIde getbyte tifiedNull   getbyte ew ","Bsio read_ber rIdsio read_ber ntifisio read_ber dNull  nsio read_ber w ","BerIdentioid shift iedNull  new ","objtypsio read_ber  == ","ob(send\n  (lvar :j) :<<\n  (int 8)) + type == ","BerIdentifiedNull  new ewobj != "," getbyte ewobj != ","nsio read_ber wobj != ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  != "," read  != ","ssio read_ber q << ","BerIdentifiedArray  new  << ","BerIdentifiedString  new eq << ","(lvasgBerIdentifiedNull  new  :e\n  (seBerIdentifiedNull  new d\n    (lvar :sio) :read_ber\n    (lvar :syBerIdentifiedNull  new tax))) != ","(lvasg getbyte  :e\n  (se getbyte d\n    (lvar :sio) :read_ber\n    (lvar :sy getbyte tax))) != ","(lvasgn :sio read_ber \n  (ssio read_ber nd\n    (lvar :sio) :rsio read_ber ad_bsio read_ber r\n    (lvar :syntax))) != ","(lvasgn :e\n  (send\n    (lvar :StringIO  new ) :read_ber\n    (lvar :syntax))) != ","(lvaBerIdentifiedString  new gn :e\n  (BerIdentifiedString  new end\n    (lvar :BerIdentifiedString  new io) :read_ber\n    (lvar :BerIdentifiedString  new yntax))) != ","sio rsio read_ber ad_bsio read_ber r ","StringIO  new  read_ber ","BerIdentifiedString  new io read_ber ","StriBerIdentifiedNull  new gIO  BerIdentifiedNull  new ew ","Stri getbyte gIO   getbyte ew ","StringIO  nsio read_ber w ","seq ber_ideBerIdentifiedNull  new tifier= ","seq ber_ide getbyte tifier= ","ssio read_ber q bsio read_ber r_idsio read_ber ntifisio read_ber r= ","BerIdentifiedArray  new  ber_identifier= ","seq ber_identioid shift ier= ","BerIdentifiedString  new eq ber_identifier= ","seq ber_ getbyte entifier= ","BerIdeBerIdentifiedNull  new tifiedArray  BerIdentifiedNull  new ew ","BerIde getbyte tifiedArray   getbyte ew ","Bsio read_ber rIdsio read_ber ntifisio read_ber dArray  nsio read_ber w ","BerIdentioid shift iedArray  new ","oid uBerIdentifiedNull  new shift ","oid u getbyte shift ","oid unshioid shift t ","newobj unpack  unshift ","oid unBerIdentifiedString  new hift ","o getbyte  unshift ","g oid shift irst ","g firBerIdentifiedString  new t ","g laBerIdentifiedString  new t ","oid shift  - ","oid shift  < ","oid shioid shift t ","newobj unpack  shift ","oid BerIdentifiedString  new hift ","o getbyte  shift ","BerIdentifiedNull  new ewobj uBerIdentifiedNull  new pack "," getbyte ewobj u getbyte pack ","nsio read_ber wobj unpack ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  unpack "," read  unpack ","(seBerIdentifiedNull  new d\n  (lvar :j) :<<\n  (iBerIdentifiedNull  new t 8)) + ","(se getbyte d\n  (lvar :j) :<<\n  (i getbyte t 8)) + ","(ssio read_ber nd\n  (lvar :j) :<<\n  (int 8)) + ","(send\n  (lvar :(send\n  (lvar :j) :<<\n  (int 8)) + ) :<<\n  (int 8)) + ","(BerIdentifiedString  new end\n  (lvar :j) :<<\n  (int 8)) + ","(send\n  (lvar :j) :<<\n  (int 8)) +  << ","BerIdentifiedNull  new ewobj each_byte "," getbyte ewobj each_byte ","nsio read_ber wobj sio read_ber ach_bytsio read_ber  ","newob(send\n  (lvar :j) :<<\n  (int 8)) +  each_byte "," read  each_byte ","s ber_ideBerIdentifiedNull  new tifier= ","s ber_ide getbyte tifier= ","s bsio read_ber r_idsio read_ber ntifisio read_ber r= ","s ber_identioid shift ier= ","BerIdentifiedString  new  ber_identifier= ","s ber_ getbyte entifier= ","BerIdeBerIdentifiedNull  new tifiedStriBerIdentifiedNull  new g  BerIdentifiedNull  new ew ","BerIde getbyte tifiedStri getbyte g   getbyte ew ","Bsio read_ber rIdsio read_ber ntifisio read_ber dString  nsio read_ber w ","BerIdentioid shift iedString  new ","BuiltiBerIdentifiedNull  new SyBerIdentifiedNull  new tax  [] ","Builti getbyte Sy getbyte tax  [] ","syBerIdentifiedNull  new tax [] ","sy getbyte tax [] ","BerIdentifiedString  new yntax [] "," rsio read_ber ad ","BerIdentifiedNull  new  & "," getbyte  & "," rsio read_ber ad sio read_ber ach_bytsio read_ber  ","BerIdentifiedNull  new  <= "," getbyte  <= "," gsio read_ber tbytsio read_ber  "]}," Net BER compile_syntax":{"type":"method","name":"compile_syntax","children":[],"call":[]}," Net BER BerIdentifiedOid to_ber":{"type":"method","name":"to_ber","children":[],"call":["(int 6) pack + ","(int 6) pack ","oid length ","ary pack ","ary unshift ","first * + ","ary shift ","first * "," raise ","Net BER BerError  new ","(int 0) include? ","@value dup ","ary pack  length ","@value dup  pack ","@value dup  unshift ","first * +  * + ","ary shift  * + ","@value dup  shift ","first * +  * ","ary shift  * "]}," Net BER BerIdentifiedOid initialize":{"type":"method","name":"initialize","children":[],"call":["s to_i ","oid split map ","oid split ","oid is_a? "]}," Net BER BerIdentifiedNull to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," Net BER BerIdentifiedArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net BER BerIdentifiedString initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP Connection wrap_with_ssl":{"type":"method","name":"wrap_with_ssl","children":[],"call":[]}," Net LDAP Connection GetbyteForSSLSocket getbyte":{"type":"method","name":"getbyte","children":[],"call":[" getc ord "," getc "]}," Net LDAP Dataset IOFilter gets":{"type":"method","name":"gets","children":[],"call":["s chomp ","@io gets ","@io gets  chomp ","@io get@io gets  "]}," Net LDAP Dataset IOFilter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP Extensions TrueClass to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," Net LDAP Extensions String read_ber":{"type":"method","name":"read_ber","children":[],"call":["StringIO  new read_ber ","StringIO  new "]}," Net LDAP Extensions String to_ber_contextspecific":{"type":"method","name":"to_ber_contextspecific","children":[],"call":[" to_ber ","128 + "]}," Net LDAP Extensions String to_ber_application_string":{"type":"method","name":"to_ber_application_string","children":[],"call":[" to_ber ","64 + "]}," Net LDAP Extensions String to_ber":{"type":"method","name":"to_ber","children":[],"call":["(lvar :code) pack + + ","(lvar :code) pack + "," length to_ber_length_encoding "," length ","(lvar :code) pack "]}," Net LDAP Extensions Fixnum to_ber_internal":{"type":"method","name":"to_ber_internal","children":[],"call":["result pack ","result << ","(send\n  (self) :>>\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :size) :-\n          (int 1))) :*\n      (int 8)))) & "," >> ","(send\n  (lvar :size) :-\n  (int 1)) * ","size - ","size > ","(send\n  (self) :&\n  (begin\n    (send\n      (int 255) :<<\n      (send\n        (begin\n          (send\n            (lvar :size) :-\n            (int 1))) :*\n        (int 8))))) > "," & ","255 << "]}," Net LDAP Extensions Fixnum to_ber_application":{"type":"method","name":"to_ber_application","children":[],"call":["(send\n  (int 64) :+\n  (lvar :tag)) pack + "," to_ber_internal ","(send\n  (int 64) :+\n  (lvar :tag)) pack ","64 + "]}," Net LDAP Extensions Fixnum to_ber_length_encoding":{"type":"method","name":"to_ber_length_encoding","children":[],"call":["(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack + ","(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack ","128 + ","i length ","(self) pack sub ","(self) pack "," <= ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack + ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack ","(self) pack sub  length "]}," Net LDAP Extensions Fixnum to_ber_enumerated":{"type":"method","name":"to_ber_enumerated","children":[],"call":["\n + "," to_ber_internal "]}," Net LDAP Extensions Fixnum to_ber":{"type":"method","name":"to_ber","children":[],"call":["\u0002 + "," to_ber_internal "]}," Net LDAP Extensions FalseClass to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," Net LDAP Extensions Bignum to_ber":{"type":"method","name":"to_ber","children":[],"call":["\u0002 + ","(send\n  (array\n    (send\n      (lvar :result) :size)) :+\n  (send\n    (lvar :result) :reverse)) pack ","(send\n  (lvar :result) :size) + ","result reverse ","result size ","n >> ","result << ","n & ","n > ","(sen >> d\n  (array\n    (sen >> d\n      (lvar :result) :size)) :+\n  (sen >> d\n    (lvar :result) :reverse)) pack ","(sen >> d\n  (lvar :result) :size) + ","n >>  >> ","n >>  & ","n >>  > "]}," Net LDAP Extensions Array to_ber_seq_internal":{"type":"method","name":"to_ber_seq_internal","children":[],"call":["(lvar :code) pack + + ","(lvar :code) pack + ","s length to_ber_length_encoding ","s length ","(lvar :code) pack "," join "," join  length to_ber_length_encoding "," join  length "]}," Net LDAP Extensions Array to_ber_oid":{"type":"method","name":"to_ber_oid","children":[],"call":["(int 6) pack + ","(int 6) pack ","oid length ","ary pack ","ary unshift ","first * + ","ary shift ","first * "," raise ","Net BER BerError  new ","(int 0) include? "," dup ","ary pack  length "," dup  pack "," dup  unshift ","first * +  * + ","ary shift  * + "," dup  shift ","first * +  * ","ary shift  * "]}," Net LDAP Extensions Array to_ber_contextspecific":{"type":"method","name":"to_ber_contextspecific","children":[],"call":[" to_ber_seq_internal ","160 + "]}," Net LDAP Extensions Array to_ber_appsequence":{"type":"method","name":"to_ber_appsequence","children":[],"call":[" to_ber_seq_internal ","96 + "]}," Net LDAP Extensions Array to_ber_sequence":{"type":"method","name":"to_ber_sequence","children":[],"call":[" to_ber_seq_internal ","48 + "]}," Net LDAP Extensions Array to_ber_set":{"type":"method","name":"to_ber_set","children":[],"call":[" to_ber_seq_internal ","49 + "]}," Net LDAP Extensions Array to_ber":{"type":"method","name":"to_ber","children":[],"call":[" to_ber_seq_internal ","48 + "]}," Net BER to_ber":{"type":"method","name":"to_ber","children":[],"call":["(int 6) pack + ","(int 6) pack ","oid length ","ary pack ","ary unshift ","first * + ","ary shift ","first * "," raise ","Net BER BerError  new ","(int 0) include? ","@value dup ","ary pack  length ","@value dup  pack ","@value dup  unshift ","first * +  * + ","ary shift  * + ","@value dup  shift ","first * +  * ","ary shift  * "]}," Net LDAP Entry setter?":{"type":"method","name":"setter?","children":[],"call":["sym to_s [] == ","sym to_s [] ","sym to_s "]}," Net LDAP Entry valid_attribute?":{"type":"method","name":"valid_attribute?","children":[],"call":[" attribute_names include? "," attribute_names "]}," Net LDAP Entry attribute_name":{"type":"method","name":"attribute_name","children":[],"call":["str to_sym ","str [] to_sym ","str [] ","str [] == ","str size > ","str size ","sym_or_str to_s downcase ","sym_or_str to_s ","sym_or_str to_s downcase  to_sym ","sym_or_str to_s downcase  [] to_sym ","sym_or_str to_s downcase  [] ","sym_or_str to_s downcase  [] == ","sym_or_str to_s downcase  size > ","sym_or_str to_s downcase  size ","sym_or_sym_or_str to_s downcase  to_s downcase ","sym_or_sym_or_str to_s downcase  to_s "]}," Net LDAP Entry respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" valid_attribute? "," attribute_name "," attribute_ attribute_name  "]}," LDAP paged_searches_supported?":{"type":"method","name":"paged_searches_supported?","children":[],"call":["@server_caps [] include? ","@server_caps [] "," search_root_dse "]}," LDAP search_subschema_entry":{"type":"method","name":"search_subschema_entry","children":[],"call":["Net LDAP Entry  new ","rs first "," search ","subschema_name first ","rs first subschemasubentry "," search  fi search t ","subschema_name fi search t ","rs first subschemasubentry  first "," search  fi search t subschemasubentry "]}," LDAP search_root_dse":{"type":"method","name":"search_root_dse","children":[],"call":["Net LDAP Entry  new ","rs first "," search "," search  fi search t "]}," LDAP delete_tree":{"type":"method","name":"delete_tree","children":[],"call":[" delete ","args merge "," recursive_delete "," search_root_dse [] include? "," search_root_dse [] "," search_root_dse "]}," LDAP delete":{"type":"method","name":"delete","children":[],"call":["@result success? ","conn close ","conn delete ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] ","Connection  new ","@open_connection delete "," instrument "," use_connection ","@result == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn delete  success? ","conn bind  success? ","@open_connection delete  success? ","Connection  new  close ","Connection  new  delete ","(ivasgn :conn delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@open_connection delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@open_connection delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","Connection  new  bind ","@open_Connection  new ection delete "," use_Connection  new ection ","conn delete  == ","conn bind  == ","@open_connection delete  == ","(ivasgn :conn delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection delete \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == "]}," LDAP rename":{"type":"method","name":"rename","children":[],"call":["@result success? ","conn close ","conn rename ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] ","Connection  new ","@open_connection rename "," instrument "," use_connection ","@result == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn rename  success? ","conn bind  success? ","@open_connection rename  success? ","Connection  new  close ","Connection  new  rename ","(ivasgn :conn rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@open_connection rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@open_connection rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","Connection  new  bind ","@open_Connection  new ection rename "," use_Connection  new ection ","conn rename  == ","conn bind  == ","@open_connection rename  == ","(ivasgn :conn rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection rename \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == "]}," LDAP delete_attribute":{"type":"method","name":"delete_attribute","children":[],"call":[" modify "]}," LDAP replace_attribute":{"type":"method","name":"replace_attribute","children":[],"call":[" modify "]}," LDAP add_attribute":{"type":"method","name":"add_attribute","children":[],"call":[" modify "]}," LDAP modify":{"type":"method","name":"modify","children":[],"call":["@result success? ","conn close ","conn modify ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] ","Connection  new ","@open_connection modify "," instrument "," use_connection ","@result == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn modify  success? ","conn bind  success? ","@open_connection modify  success? ","Connection  new  close ","Connection  new  modify ","(ivasgn :conn modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@open_connection modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@open_connection modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","Connection  new  bind ","@open_Connection  new ection modify "," use_Connection  new ection ","conn modify  == ","conn bind  == ","@open_connection modify  == ","(ivasgn :conn modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection modify \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == "]}," LDAP add":{"type":"method","name":"add","children":[],"call":["@result success? ","conn close ","conn add ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] ","Connection  new ","@open_connection add "," instrument "," use_connection ","@result == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn add  success? ","conn bind  success? ","@open_connection add  success? ","Connection  new  close ","Connection  new  add ","(ivasgn :conn add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@open_connection add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@open_connection add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","Connection  new  bind ","@open_Connection  new ection add "," use_Connection  new ection ","conn add  == ","conn bind  == ","@open_connection add  == ","(ivasgn :conn add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@open_connection add \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == "]}," LDAP bind_as":{"type":"method","name":"bind_as","children":[],"call":[" bind ","password call ","password respond_to? ","args [] ","rs first dn ","rs first "," search "," open ","password call  call ","args []  call ","password call  respond_to? ","args []  respond_to? ","rs first rs first dn  "," search  fi search t dn "," search  fi search t "]}," LDAP bind":{"type":"method","name":"bind","children":[],"call":["@result success? ","conn close ","payload []= ","conn bind ","Connection  new ","@open_connection bind "," instrument "," new_connection ","@result == ","conn bind  success? ","@open_connection bind  success? ","Connection  new  close "," new_connection  close ","Connection  new  bind "," new_connection  bind ","@open_Connection  new ection bind ","@open_ new_connection ection bind "," new_Connection  new ection "," new_ new_connection ection ","conn bind  == ","@open_connection bind  == "]}," LDAP search":{"type":"method","name":"search","children":[],"call":["@result success? ","ResultCodesSearchSuccess  include? ","@result result_code ","@result nil? ","conn close "," block_given? ","result_set << ","conn search ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] ","Net LDAP Connection  new ","@open_connection search "," instrument ","args [] != ","args []= "," paged_searches_supported? "," use_connection ","@result == ","(ivasgn :@result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","args [] == ","@result result_code == ","@result nil? ! ","conn bind  success? ","conn bind  result_code ","conn bind  nil? ","Net LDAP Connection  new  close ","Net LDAP Connection  new  search ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :@result\n  (send\n    (lvar :Net LDAP Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","(ivasgn :@result\n  (send\n    (lvar :Net LDAP Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","Net LDAP Connection  new  bind ","@open_Net LDAP Connection  new ection search "," use_Net LDAP Connection  new ection ","conn bind  == ","(ivasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","(ivasgn :@result\n  (send\n    (lvar :Net LDAP Connection  new ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) == ","conn bind  result_code == ","conn bind  nil? ! "]}," LDAP open":{"type":"method","name":"open","children":[],"call":["@open_connection close ","payload []= ","@open_connection bind ","Net LDAP Connection  new "," instrument "," raise "," new_connection ","Net LDAP Connection  new  close "," new_connection  close ","Net LDAP Connection  new  bind "," new_connection  bind "]}," LDAP get_operation_result":{"type":"method","name":"get_operation_result","children":[],"call":["os message= ","Net LDAP  result2string ","os code ","os code= ","os matched_dn= ","result [] ","os error_message= ","(or\n  (send\n    (lvar :result) :[]\n    (sym :resultCode))\n  (str \"\")) to_i ","result is_a? ","OpenStruct  new ","result result ","os extended_response= ","result extended_response ","@result [] ","(or\n  (send\n    (ivar :@result) :[]\n    (sym :resultCode))\n  (str \"\")) to_i ","@result is_a? ","OpenStruct  new  message= ","Net LDAP  result result 2string ","OpenStruct  new  code ","OpenStruct  new  code= ","OpenStruct  new  matched_dn= ","result result  [] ","OpenStruct  new  error_message= ","(or\n  (send\n    (lvar :result result ) :[]\n    (sym :result result Code))\n  (str \"\")) to_i ","result result  is_a? ","result result  result result  ","OpenStruct  new  extended_response= ","result result  extended_response ","@result result  [] ","(or\n  (send\n    (ivar :@result result ) :[]\n    (sym :result result Code))\n  (str \"\")) to_i ","@result result  is_a? "]}," LDAP encryption":{"type":"method","name":"encryption","children":[],"call":["args to_sym ","args is_a? ","args nil? "," warn "," normalize_encryption "]}," LDAP authenticate":{"type":"method","name":"authenticate","children":[],"call":["password call ","password respond_to? ","password call  call ","password call  respond_to? "]}," LDAP initialize":{"type":"method","name":"initialize","children":[],"call":["args [] ","@auth []= ","pr call ","pr respond_to? ","@auth [] "," encryption "," normalize_encryption ","@auth []  call ","@auth []  respond_to? "]}," LDAP result2string":{"type":"method","name":"result2string","children":[],"call":[]}," Net const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," PDU parse_unbind_request":{"type":"method","name":"parse_unbind_request","children":[],"call":[]}," PDU parse_bind_request":{"type":"method","name":"parse_bind_request","children":[],"call":["s authentication= ","s name= ","s version= ","OpenStruct  new ","OpenStruct  new  authentication= ","OpenStruct  new  name= ","OpenStruct  new  verOpenStruct  new ion= "]}," PDU parse_ldap_search_request":{"type":"method","name":"parse_ldap_search_request","children":[],"call":["s attributes= ","s filter= ","s types_only= ","s time_limit= ","s size_limit= ","s deref_aliases= ","s scope= ","s base_object= ","OpenStruct  new ","OpenStruct  new  attributeOpenStruct  new = ","OpenStruct  new  filter= ","OpenStruct  new  typeOpenStruct  new _only= ","OpenStruct  new  time_limit= ","OpenStruct  new  OpenStruct  new ize_limit= ","OpenStruct  new  deref_aliaOpenStruct  new eOpenStruct  new = ","OpenStruct  new  OpenStruct  new cope= ","OpenStruct  new  baOpenStruct  new e_object= "]}," PDU parse_controls":{"type":"method","name":"parse_controls","children":[],"call":["o criticality= ","o value= ","o criticality ","o criticality is_a? ","control [] ","o oid= ","OpenStruct  new ","sequence map ","OpenStruct  new  criticality= ","OpenStruct  new  value= ","OpenStruct  new  criticality ","OpenStruct  new  criticality is_a? ","cOpenStruct  new ntrOpenStruct  new l [] ","OpenStruct  new  OpenStruct  new id= "]}," PDU parse_search_referral":{"type":"method","name":"parse_search_referral","children":[],"call":[]}," PDU parse_search_return":{"type":"method","name":"parse_search_return","children":[],"call":["@search_entry []= ","seq [] ","sequence [] each ","sequence [] ","Net LDAP Entry  new "," raise ","sequence length >= ","sequence length ","Net LDAP Entry  new  []= "]}," PDU parse_bind_response":{"type":"method","name":"parse_bind_response","children":[],"call":["@ldap_result []= ","sequence [] ","sequence length >= ","sequence length "," parse_ldap_result "," raise "]}," PDU parse_ldap_result":{"type":"method","name":"parse_ldap_result","children":[],"call":[" parse_search_referral ","sequence [] ","@ldap_result [] == ","@ldap_result [] "," raise ","sequence length >= ","sequence length "]}," PDU result_server_sasl_creds":{"type":"method","name":"result_server_sasl_creds","children":[],"call":["@ldap_result [] "]}," PDU failure?":{"type":"method","name":"failure?","children":[],"call":[" success? ! "," success? "]}," PDU success?":{"type":"method","name":"success?","children":[],"call":[" status == "," status "]}," PDU status":{"type":"method","name":"status","children":[],"call":["Net LDAP ResultCodesNonError  include? "," result_code "," result_code == "]}," PDU result_code":{"type":"method","name":"result_code","children":[],"call":["@ldap_result [] "]}," PDU error_message":{"type":"method","name":"error_message","children":[],"call":[" result [] "," result "]}," PDU result":{"type":"method","name":"result","children":[],"call":[]}," PDU initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_controls ","ber_object [] "," raise ","LdapPduError  new "," parse_ldap_result "," parse_unbind_request "," parse_bind_request "," parse_ldap_search_request "," parse_search_referral "," parse_search_return "," parse_bind_response ","ex message ","ber_object [] ber_identifier & ","ber_object [] ber_identifier ","ber_object [] to_i "," parse_extended_response ","Error  new "]}," Password generate":{"type":"method","name":"generate","children":[],"call":[" raise ","{SSHA} + ","Base64  encode64 chomp! ","Base64  encode64 ","Digest SHA1  digest + ","Digest SHA1  digest ","str + ","SecureRandom  random_bytes ","{SHA} + ","{MD5} + ","Digest MD5  digest ","Base64  strict_encode64 ","{SSHA256} + ","Digest SHA256  digest + ","Digest SHA256  digest ","(send\n  (lvar :digest) :digest) pack chomp ","(send\n  (lvar :digest) :digest) pack ","digest digest ","digest << ","str to_s ","Digest SHA1  new ","Digest MD5  new ","(send\n  (send nil :rand) :*\n  (int 1000)) to_i to_s ","(send\n  (send nil :rand) :*\n  (int 1000)) to_i "," rand * "," rand "," srand "]}," Instrumentation instrument":{"type":"method","name":"instrument","children":[],"call":[" block_given? ","payload []= "," instrumentation_service instrument "," instrumentation_service ","(or\n  (lvar :payload)\n  (hash)) dup ","instr_payload []= ","(or\n  (lvar :payload)\n  (hash)) dup  []= ","(or\n  (lvar :(or\n  (lvar :payload)\n  (hash)) dup )\n  (hash)) dup ","instr_(or\n  (lvar :payload)\n  (hash)) dup  []= "]}," Filter FilterParser parse_filter_branch":{"type":"method","name":"parse_filter_branch","children":[],"call":["Net LDAP Filter  ex ","Net LDAP Filter  ge ","Net LDAP Filter  le ","Net LDAP Filter  ne ","Net LDAP Filter  eq ","value strip! ","scanner scan ","scanner scan  strip! "]}," Filter FilterParser parse_paren_expression":{"type":"method","name":"parse_paren_expression","children":[],"call":["scanner scan "," parse_filter_branch ","br ~ "," parse_paren_expression "," merge_branches "," parse_filter_ parse_paren_expression anch "," parse_paren_expression  ~ "," parse_paren_ merge_branches ession "," merge_ parse_paren_expression anches "]}," Filter FilterParser merge_branches":{"type":"method","name":"merge_branches","children":[],"call":["filter __send__ ","branches shift ","branches empty? ! ","branches empty? ","branches size >= ","branches size "," parse_branches ","filter __send__  __send__ ","branches shift  __send__ "," parse_branches  shift "," parse_branches  empty? ! "," parse_branches  empty? "," parse_branches  size >= "," parse_branches  size "," parse_ parse_branches  "]}," Filter FilterParser parse_branches":{"type":"method","name":"parse_branches","children":[],"call":["branches << "," parse_paren_expression "," parse_paren_expression es << "]}," Filter FilterParser parse":{"type":"method","name":"parse","children":[],"call":[" parse_paren_expression "," parse_filter_branch "," new filter "," new "]}," Filter FilterParser initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," parse ","StringScanner  new "," require "]}," Filter unescape":{"type":"method","name":"unescape","children":[],"call":["(send\n  (nth-ref 1) :hex) pack ","1 hex ","right gsub ","right to_s gsub ","right to_s ","right encoding == ","right encoding ","right length == ","right length ","right to_s  gsub ","right to_s  to_s gsub ","right to_s  to_s ","right to_s  encoding == ","right to_s  encoding ","right to_s  length == ","right to_s  length "]}," Filter match":{"type":"method","name":"match","children":[],"call":[" raise ","l index "," Array ","entry [] ","l length > ","l length ","@right == "," Array  index ","entry []  index "," Array   Array ength > ","entry []  entry [] ength > "," Array   Array ength ","entry []  entry [] ength "]}," Filter coalesce":{"type":"method","name":"coalesce","children":[],"call":["@right coalesce ","@left coalesce ","@op == "]}," Filter execute":{"type":"method","name":"execute","children":[],"call":["@left execute ","@right execute ","@right index ","@right == "]}," Filter to_ber":{"type":"method","name":"to_ber","children":[],"call":["(send\n  (ivar :@left) :to_ber) to_ber_contextspecific ","@left to_ber ","(send\n  (lvar :ary) :map) to_ber_contextspecific ","a to_ber ","ary map ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten ","@right coalesce ","@left coalesce ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten ","(send\n  (send\n    (send\n      (self) :class) :eq\n    (ivar :@left)\n    (ivar :@right)) :to_ber) to_ber_contextspecific "," class eq to_ber "," class eq "," class ","(send\n  (send\n    (ivar :@left) :to_s) :to_ber) to_ber_contextspecific "," unescape to_ber "," unescape ","@left to_s to_ber ","@left to_s ","seq to_ber_contextspecific ","seq << ","1 to_ber_contextspecific ","dn to_s empty? ","dn to_s "," unescape to_ber_contextspecific ","type to_ber_contextspecific ","type to_s empty? ","type to_s ","rule to_ber_contextspecific ","rule to_s empty? ","rule to_s "," raise ","@left =~ "," unescape to_ber_bin ","seq to_ber ","seq push ","seq unshift ","ary pop ","ary last empty? ","ary last ","ary shift ","ary first empty? ","ary first ","@right split ","@right =~ ","@left to_s to_ber_contextspecific ","@right == ","ary map to_ber_contextspecific ","@right to_s =~ ","@right to_s ","e to_ber_contextspecific ","ary pop to_ber_contextspecific ","ary shift to_ber_contextspecific ","(send\n  (lvar :(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten ) :map) to_ber_contextspecific ","(send\n  (lvar :(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten ) :map) to_ber_contextspecific ","(send\n  (lvar :@right split ) :map) to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  map ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  map ","@right split  map ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  pop ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  pop ","@right split  pop ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  last empty? ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  last empty? ","@right split  last empty? ","ary  unescape to_ber_contextspecific  empty? ","ary ary pop to_ber_contextspecific  empty? ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  last ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  last ","@right split  last ","ary  unescape to_ber_contextspecific  ","ary ary pop to_ber_contextspecific  ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  shift ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  shift ","@right split  shift ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  first empty? ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  first empty? ","@right split  first empty? ","ary ary shift to_ber_contextspecific  empty? ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  first ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  first ","@right split  first ","ary ary shift to_ber_contextspecific  ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  map to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  map to_ber_contextspecific ","@right split  map to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  pop to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  pop to_ber_contextspecific ","@right split  pop to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :or)) flatten  shift to_ber_contextspecific ","(send\n  (ivar :@left) :coalesce\n  (sym :and)) flatten  shift to_ber_contextspecific ","@right split  shift to_ber_contextspecific "]}," Filter to_s":{"type":"method","name":"to_s","children":[],"call":[" to_rfc2254 "]}," Filter to_rfc2254":{"type":"method","name":"to_rfc2254","children":[],"call":[" to_raw_rfc2254 "]}," Filter to_raw_rfc2254":{"type":"method","name":"to_raw_rfc2254","children":[],"call":["@left to_raw_rfc2254 ","@right to_raw_rfc2254 "]}," Filter ==":{"type":"method","name":"==","children":[],"call":[" instance_eval == ","filter instance_eval "," instance_eval "]}," Filter ~@":{"type":"method","name":"~@","children":[],"call":[" class negate "," class "]}," Filter |":{"type":"method","name":"|","children":[],"call":[" class intersect "," class "]}," Filter &":{"type":"method","name":"&","children":[],"call":[" class join "," class "]}," Filter parse_ldap_filter":{"type":"method","name":"parse_ldap_filter","children":[],"call":[" raise ","obj ber_identifier "," eq ","obj [] ","obj to_s "]}," Filter construct":{"type":"method","name":"construct","children":[],"call":["FilterParser  parse "]}," Filter parse_ber":{"type":"method","name":"parse_ber","children":[],"call":[" raise ","ber ber_identifier "," ex ","attribute << ","element ber_identifier ","ber each ","ber size < ","ber size "," present? ","ber to_s "," le ","ber last to_s ","ber last ","ber first to_s ","ber first "," ge "," eq "," escape ","str length > ","str length ","b ber_identifier ","ber last each ","ber last == "," parse_ber ~ "," parse_ber ","memo | ","(send\n  (lvar :ber) :map) inject ","ber map ","memo & "]}," Filter escape":{"type":"method","name":"escape","children":[],"call":["\\ + ","ESCAPES  [] ","string gsub "]}," Filter present?":{"type":"method","name":"present?","children":[],"call":[" eq "]}," Filter negate":{"type":"method","name":"negate","children":[],"call":[" new "]}," Filter intersect":{"type":"method","name":"intersect","children":[],"call":[" new "]}," Filter join":{"type":"method","name":"join","children":[],"call":[" new "]}," Filter le":{"type":"method","name":"le","children":[],"call":[" new "]}," Filter ge":{"type":"method","name":"ge","children":[],"call":[" new "]}," Filter contains":{"type":"method","name":"contains","children":[],"call":[" new ","* + + ","* + "," escape "]}," Filter ends":{"type":"method","name":"ends","children":[],"call":[" new ","* + "," escape "]}," Filter begins":{"type":"method","name":"begins","children":[],"call":[" new "," escape + "," escape "]}," Filter equals":{"type":"method","name":"equals","children":[],"call":[" new "," escape "]}," Filter ne":{"type":"method","name":"ne","children":[],"call":[" new "]}," Filter ex":{"type":"method","name":"ex","children":[],"call":[" new "]}," Filter bineq":{"type":"method","name":"bineq","children":[],"call":[" new "]}," Filter eq":{"type":"method","name":"eq","children":[],"call":[" new "]}," Filter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","op inspect ","FilterTypes  include? "]}," Entry setter?":{"type":"method","name":"setter?","children":[],"call":["sym to_s [] == ","sym to_s [] ","sym to_s "]}," Entry valid_attribute?":{"type":"method","name":"valid_attribute?","children":[],"call":[" attribute_names include? "," attribute_names "]}," Entry method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","args empty? "," []= "," Array ","args first ","args size == ","args size "," setter? "," valid_attribute? "," class attribute_name "," class "," class attribute_ class attribute_name  "]}," Entry respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" valid_attribute? "," class attribute_name "," class "]}," Entry to_ldif":{"type":"method","name":"to_ldif","children":[],"call":["Net LDAP Dataset  from_entry to_ldif_string ","Net LDAP Dataset  from_entry "]}," Entry each":{"type":"method","name":"each","children":[],"call":[" [] "," attribute_names each "," attribute_names "," block_given? "]}," Entry attribute_names":{"type":"method","name":"attribute_names","children":[],"call":["@myhash keys "]}," Entry dn":{"type":"method","name":"dn","children":[],"call":[" [] first to_s "," [] first "," [] "]}," Entry first":{"type":"method","name":"first","children":[],"call":[" [] first "," [] "]}," Entry []":{"type":"method","name":"[]","children":[],"call":["@myhash [] "," class attribute_name "," class "," class attribute_ class attribute_name  "]}," Entry []=":{"type":"method","name":"[]=","children":[],"call":["@myhash []= ","Kernel  Array "," class attribute_name "," class "]}," Entry attribute_name":{"type":"method","name":"attribute_name","children":[],"call":["name to_sym ","name [] ","name [] == ","name to_s downcase ","name to_s ","name []  to_sym ","name to_s downcase  to_sym ","name []  [] ","name to_s downcase  [] ","name []  [] == ","name to_s downcase  [] == ","name []  to_s downcase ","name to_s downcase  to_s downcase ","name []  to_s ","name to_s downcase  to_s "]}," Entry from_single_ldif_string":{"type":"method","name":"from_single_ldif_string","children":[],"call":["entry dn nil? ","entry dn ","ds to_entries first ","ds to_entries "," raise ","ds size == ","ds size ","ds empty? ","Net LDAP Dataset  read_ldif "," StringIO  new ","ds to_entries first  dn nil? ","ds to_entries first  dn ","Net LDAP Dataset  read_ldif  to_entries first ","Net LDAP Dataset  read_ldif  to_entries ","Net LDAP Dataset  read_ldif  size == ","Net LDAP Dataset  read_ldif  size ","Net LDAP Dataset  read_ldif  empty? "]}," Entry _load":{"type":"method","name":"_load","children":[],"call":[]}," Entry _dump":{"type":"method","name":"_dump","children":[],"call":[" to_ldif "]}," Entry initialize":{"type":"method","name":"initialize","children":[],"call":["@myhash []= "]}," DN method_missing":{"type":"method","name":"method_missing","children":[],"call":["@dn send "]}," DN escape":{"type":"method","name":"escape","children":[],"call":[]}," DN to_s":{"type":"method","name":"to_s","children":[],"call":[]}," DN to_a":{"type":"method","name":"to_a","children":[],"call":["a << << ","a << "," each_pair "]}," DN each_pair":{"type":"method","name":"each_pair","children":[],"call":[" raise ","value string rstrip ","value string ","key string strip ","key string ","(sym :value) include? ","StringIO  new ","value << ","(begin\n  (lvar :hex_buffer)) to_i chr ","(begin\n  (lvar :hex_buffer)) to_i ","key << ","@dn each_char ","StringIO  new  string rstrip ","StringIO  new  string ","StringIO  new  string strip ","(sym :StringIO  new ) include? ","StringIO  new  << "]}," DN initialize":{"type":"method","name":"initialize","children":[],"call":["buffer string ","buffer << ","args [] ","Net LDAP DN  escape ","index % == ","index % ","index < ","args length - ","args length ","index != ","args each_index ","StringIO  new ","StringIO  new  string ","StringIO  new  << "]}," Dataset read_ldif":{"type":"method","name":"read_ldif","children":[],"call":["1 downcase to_sym ","1 downcase "," block_given? ","ds [] [] << ","ds [] [] ","ds [] ","$' unpack shift ","$' unpack ","2 == ","line =~ ","line empty? ","ds []= ","k []= ","Hash  new ","1 == ","ds version= ","ds comments << ","ds comments ","line << ","new_line =~ ","io gets ","ChompedIO  new ","Net LDAP Dataset  new ","line << << ","Net LDAP Dataset  new  [] [] << ","Net LDAP Dataset  new  [] [] ","Net LDAP Dataset  new  [] ","io gets  =~ ","io gets  empty? ","Net LDAP Dataset  new  []= ","ds versChompedIO  new n= ","Net LDAP Dataset  new  version= ","Net LDAP Dataset  new  comments << ","Net LDAP Dataset  new  comments ","io gets  << ","new_io gets  =~ ","ChompedIO  new  gets ","io gets  << << "]}," Dataset from_entry":{"type":"method","name":"from_entry","children":[],"call":["dataset []= ","entry dn ","hash []= ","attribute == ","entry each_attribute ","Net LDAP Dataset  new ","Net LDAP Dataset  new  []= "]}," Dataset ChompedIO gets":{"type":"method","name":"gets","children":[],"call":["s chomp ","@io gets ","@io gets  chomp ","@io get@io gets  "]}," Dataset ChompedIO initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dataset value_is_binary?":{"type":"method","name":"value_is_binary?","children":[],"call":["byte > ","byte < ","value each_byte ","value [] == ","value [] ","value to_s ","value to_s  each_byte ","value to_s  [] == ","value to_s  [] ","value to_s  to_s "]}," Dataset to_entries":{"type":"method","name":"to_entries","children":[],"call":["ary << ","entry []= "," [] each "," [] ","Net LDAP Entry  new "," keys each "," keys ","Net LDAP Entry  new  []= "]}," Dataset to_ldif_string":{"type":"method","name":"to_ldif_string","children":[],"call":[" to_ldif join "," to_ldif "]}," Dataset to_ldif":{"type":"method","name":"to_ldif","children":[],"call":["ary each "," block_given? ","ary << ","(lvar :value) pack chomp gsub ","(lvar :value) pack chomp ","(lvar :value) pack "," value_is_binary? ","attr == "," [] [] each "," [] [] ","attr to_sym "," [] ","attributes each ","(send\n  (send\n    (send\n      (self) :[]\n      (lvar :dn)) :keys) :map) sort ","attr to_s "," [] keys map "," [] keys "," keys sort each "," keys sort "," keys ","@comments empty? "," version "," [] keys map sort ","(lvar :(lvar :value) pack chomp gsub ) pack chomp gsub ","(lvar :(lvar :value) pack chomp gsub ) pack chomp ","(lvar :(lvar :value) pack chomp gsub ) pack "," (lvar :value) pack chomp gsub _is_binary? ","(send\n  (send\n    (send\n      (self) :[]\n      (lvar :dn)) :keys) :map) sort  each "," [] keys map sort  each "]}," Dataset initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Connection delete":{"type":"method","name":"delete","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","dn to_s to_ber_application_string ","dn to_s "," next_msgid ","args [] to_ber_control ","args [] ","args include? ","pdu result_code ","pdu app_tag == ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber ","(send\n  (send nil :next_msgid) :to_ber) compact to_ber_sequence ","(send\n  (send nil :next_msgid) :to_ber) compact "," read "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  ! ","Net LDAP PDU  new  ! ","args []  to_s to_ber_application_string ","dn to_s to_@conn read_ber r_application_string ","dn to_s to_ read r_application_string ","args []  to_s ","args [] to_@conn read_ber r_control ","args [] to_ read r_control "," queued_read  result_code ","Net LDAP PDU  new  result_code "," queued_read  app_tag == ","Net LDAP PDU  new  app_tag == ","@conn read_@conn read_ber r ","@conn read_ read r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) to_ read r_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) compact to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) compact to_ read r_sequence ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) compact ","(send\n  (send nil :next_msgid) :to_ read r) compact "]}," Connection rename":{"type":"method","name":"rename","children":[],"call":[" raise ","Net LDAP LdapError  new ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","request to_ber_appsequence ","request << ","new_superior to_ber_contextspecific ","new_superior == ","delete_attrs to_ber ","new_rdn to_ber ","old_dn to_ber "," next_msgid ","args [] ","Net LDAP ResponseMissingOrInvalidError  new ","pdu result_code ","LdapError  new ","pdu app_tag == ","LdapPdu  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber ","new_superior to_ber ","Net LDAP PDU  new "," read "," queued_read  app_tag != ","LdapPdu  new  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","LdapPdu  new  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  ! ","LdapPdu  new  ! ","Net LDAP PDU  new  ! ","request to_@conn read_ber r_appsequence ","request to_ read r_appsequence ","args []  to_ber_contextspecific ","new_superior to_@conn read_ber r_contextspecific ","new_superior to_ read r_contextspecific ","args []  == ","delete_attrs to_@conn read_ber r ","delete_attrs to_ read r ","args []  to_ber ","new_rdn to_@conn read_ber r ","new_rdn to_ read r ","old_dn to_@conn read_ber r ","old_dn to_ read r "," queued_read  result_code ","LdapPdu  new  result_code ","Net LDAP PDU  new  result_code "," queued_read  app_tag == ","LdapPdu  new  app_tag == ","Net LDAP PDU  new  app_tag == ","@conn read_@conn read_ber r ","@conn read_ read r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) to_ read r_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r ","new_superior to_@conn read_ber r ","new_superior to_ read r "]}," Connection add":{"type":"method","name":"add","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","(send\n  (lvar :add_dn) :to_ber) to_ber_appsequence ","add_attrs to_ber_sequence ","add_dn to_ber "," next_msgid ","add_attrs << ","(send\n  (send\n    (lvar :k) :to_s) :to_ber) to_ber_sequence ","(send\n  (send nil :Array\n    (lvar :v)) :map) to_ber_set ","m to_ber "," Array map "," Array ","k to_s to_ber ","k to_s ","a each ","args [] "," Array map to_ber_set ","pdu result_code ","pdu app_tag == ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber "," read "," rargs [] ise "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != ","pdu args [] pp_targs [] g != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag ","pdu args [] pp_targs [] g "," queued_read  ! ","Net LDAP PDU  new  ! "," queued_reargs [] d ","(send\n  (lvargs [] r :args [] dd_dn) :to_ber) to_ber_args [] ppsequence ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","(send\n  (lvar :add_dn) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvar :add_dn) :to_ read r) to_ read r_appsequence ","args [] dd_args [] ttrs to_ber_sequence ","add_attrs to_@conn read_ber r_sequence ","add_attrs to_ read r_sequence ","args [] dd_dn to_ber ","args []  to_ber ","add_dn to_@conn read_ber r ","add_dn to_ read r ","args [] dd_args [] ttrs << ","(send\n  (send\n    (lvargs [] r :k) :to_s) :to_ber) to_ber_sequence ","(send\n  (send\n    (lvar :k) :to_s) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send\n    (lvar :k) :to_s) :to_ read r) to_ read r_sequence ","(send\n  (send nil :Arrargs [] y\n    (lvargs [] r :v)) :margs [] p) to_ber_set ","(send\n  (send nil :Array\n    (lvar :v)) :map) to_@conn read_ber r_set ","(send\n  (send nil :Array\n    (lvar :v)) :map) to_ read r_set ","m to_@conn read_ber r ","m to_ read r "," Arrargs [] y margs [] p "," Arrargs [] y ","k to_s to_@conn read_ber r ","k to_s to_ read r ","args []  eargs [] ch ","args [] rgs [] "," Arrargs [] y margs [] p to_ber_set "," Array map to_@conn read_ber r_set "," Array map to_ read r_set "," queued_read  result_code ","Net LDAP PDU  new  result_code "," queued_read  app_tag == ","Net LDAP PDU  new  app_tag == ","pdu args [] pp_targs [] g == ","@conn reargs [] d_ber ","@conn read_@conn read_ber r ","@conn read_ read r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) to_ read r_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r "," reargs [] d "]}," Connection modify":{"type":"method","name":"modify","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","(send\n  (lvar :modify_dn) :to_ber) to_ber_appsequence ","ops to_ber_sequence ","modify_dn to_ber "," next_msgid "," class modify_ops ","args [] "," class ","pdu result_code ","pdu app_tag == ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber ","modify_ops to_ber_sequence "," modify_ops "," read "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  ! ","Net LDAP PDU  new  ! ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","(send\n  (lvar :modify_dn) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvar :modify_dn) :to_ read r) to_ read r_appsequence "," class modify_ops  to_ber_sequence ","ops to_@conn read_ber r_sequence ","ops to_ read r_sequence ","args []  to_ber ","modify_dn to_@conn read_ber r ","modify_dn to_ read r "," class modify_ class modify_ops  "," class  modify_ops  "," queued_read  result_code ","Net LDAP PDU  new  result_code "," queued_read  app_tag == ","Net LDAP PDU  new  app_tag == ","@conn read_@conn read_ber r ","@conn read_ read r ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) to_ read r_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r ","modify_ class modify_ops  to_ber_sequence ","modify_ops to_@conn read_ber r_sequence ","modify_ops to_ read r_sequence "," modify_ops  to_ber_sequence "," modify_ class modify_ops  ","  modify_ops  "]}," Connection modify_ops":{"type":"method","name":"modify_ops","children":[],"call":[]}," Connection search":{"type":"method","name":"search","children":[],"call":[" instrument ","messages empty? "," message_queue delete "," message_queue ","OpenStruct  new ","payload []= ","rfc2696_cookie []= ","cookie length > ","cookie length ","c value read_ber [] ","c value read_ber ","c value ","c value length > ","c value length ","c oid == ","c oid ","controls each ","result_pdu result_code == ","result_pdu result_code ","payload [] "," raise ","pdu app_tag ","se []= ","pdu search_referrals ","Net LDAP Entry  new "," block_given? ","pdu result_code == ","pdu result_code ","pdu result_controls ","pdu search_entry "," queued_read "," write ","controls to_ber_contextspecific ","controls empty? ","controls << ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :PAGED_RESULTS) :to_ber) to_ber_sequence ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence to_s to_ber ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence to_s ","(send\n  (lvar :rfc2696_cookie) :map) to_ber_sequence ","v to_ber ","rfc2696_cookie map "," to_ber ","Net LDAP LDAPControls PAGED_RESULTS  to_ber ","(send\n  (lvar :base) :to_ber) to_ber_appsequence ","ber_attrs to_ber_sequence ","filter to_ber ","attrs_only to_ber ","time to_ber ","query_limit to_ber ","deref to_ber_enumerated ","scope to_ber_enumerated ","base to_ber ","size - ","(send\n  (lvar :size) :-\n  (lvar :n_results)) < ","size > "," loop "," next_msgid "," encode_sort_controls ","attr to_s to_ber ","attr to_s ","attrs map ","Net LDAP Filter  construct ","filter is_a? ","Net LDAP DerefAliasesArray  include? ","Net LDAP SearchScopes  include? ","size >= ","args fetch ","args [] ","args [] to_i ","args [] == "," Array ","Net LDAP Filter  eq ","messages empty? ! ","messages nil? ! ","messages nil? ","rfc2696_cookie map to_ber_sequence to_s to_ber ","rfc2696_cookie map to_ber_sequence to_s ","rfc2696_cookie map to_ber_sequence ","result_pdu nil? ","result_code == ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(send\n  (send nil :next_msgid) :to_ber) to_ber_sequence "," next_msgid to_ber ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LdapControls) :PagedResults) :to_ber) to_ber_sequence ","Net LDAP LdapControls PagedResults  to_ber ","(send\n  (lvar :search_base) :to_ber) to_ber_appsequence ","search_attributes to_ber_sequence ","search_filter to_ber ","attributes_only to_ber ","0 to_ber ","0 to_ber_enumerated ","search_base to_ber ","sizelimit - ","(send\n  (lvar :sizelimit) :-\n  (lvar :n_results)) < ","sizelimit > ","sizelimit >= ","(or\n  (begin\n    (and\n      (lvar :args)\n      (send\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","search_filter is_a? ","(send\n  (send nil :next_msgid) :to_ber) compact to_ber_sequence ","(send\n  (send nil :next_msgid) :to_ber) compact ","Net LDAP LdapError  new "," read "," message_queue delete  empty? ","rfc2696_c value read_ber []  []= ","c value read_ber []  length > ","c value read_ber []  length ","c value read_@conn read_ber r [] ","c value read_ read r [] ","c value read_@conn read_ber r ","c value read_ read r ","pdu result_controls  each ","controls to_ber_contextspecific  each ","result_ queued_read  result_code == ","result_Net LDAP PDU  new  result_code == ","result_pdu pdu result_code  == ","result_ queued_read  result_code ","result_Net LDAP PDU  new  result_code ","result_pdu pdu result_code  "," raiNet LDAP Entry  new  "," queued_read  app_tag ","Net LDAP PDU  new  app_tag ","Net LDAP Entry  new  []= ","pdu Net LDAP Entry  new arch_referrals "," queued_read  search_referrals ","Net LDAP PDU  new  search_referrals "," queued_read  result_code == ","Net LDAP PDU  new  result_code == ","pdu pdu result_code  == "," queued_read  result_code ","Net LDAP PDU  new  result_code ","pdu pdu result_code  ","pdu result_pdu result_controls  ","pdu result_controls to_ber_contextspecific  "," queued_read  result_controls ","Net LDAP PDU  new  result_controls ","pdu Net LDAP Entry  new arch_entry "," queued_read  search_entry ","Net LDAP PDU  new  search_entry ","pdu result_controls  to_ber_contextspecific ","controls to_ber_contextspecific  to_ber_contextspecific ","controls to_@conn read_ber r_contextspecific ","controls to_ read r_contextspecific ","pdu result_controls  empty? ","controls to_ber_contextspecific  empty? ","pdu result_controls  << ","controls to_ber_contextspecific  << ","(Net LDAP Entry  new nd\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :PAGED_RESULTS) :to_ber) to_ber_Net LDAP Entry  new quence ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :PAGED_RESULTS) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :PAGED_RESULTS) :to_ read r) to_ read r_sequence ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence to_s to_ber ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence to_s to_ber ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence to_s to_@conn read_ber r ","(send\n  (lvar :rfc2696_cookie) :map) to_ read r_sequence to_s to_ read r ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence to_s ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence to_s ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence to_s ","(send\n  (lvar :rfc2696_cookie) :map) to_ read r_sequence to_s ","(send\n  (lvar :rfc2696_c value read_ber [] ) :map) to_ber_sequence ","(Net LDAP Entry  new nd\n  (lvar :rfc2696_cookie) :map) to_ber_Net LDAP Entry  new quence ","(send\n  (lvar :rfc2696_cookie) :map) to_@conn read_ber r_sequence ","(send\n  (lvar :rfc2696_cookie) :map) to_ read r_sequence ","v to_@conn read_ber r ","v to_ read r ","rfc2696_c value read_ber []  map "," to_@conn read_ber r "," to_ read r ","Net LDAP LDAPControls PAGED_RESULTS  to_@conn read_ber r ","Net LDAP LDAPControls PAGED_RESULTS  to_ read r ","(Net LDAP Entry  new nd\n  (lvar :baNet LDAP Entry  new ) :to_ber) to_ber_appNet LDAP Entry  new quence ","(send\n  (lvar :args [] ) :to_ber) to_ber_appsequence ","(send\n  (lvar :base) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvar :base) :to_ read r) to_ read r_appsequence ","ber_attrs to_ber_Net LDAP Entry  new quence ","ber_ Array  to_ber_sequence ","@conn read_ber r_attrs to_@conn read_ber r_sequence "," read r_attrs to_ read r_sequence ","Net LDAP Filter  construct  to_ber ","filter to_@conn read_ber r ","filter to_ read r ","args [] ==  to_ber "," Array _only to_ber ","attrs_only to_@conn read_ber r ","attrs_only to_ read r ","args [] to_i  to_ber ","time to_@conn read_ber r ","time to_ read r ","query_limit to_@conn read_ber r ","query_limit to_ read r ","deref to_@conn read_ber r_enumerated ","deref to_ read r_enumerated ","scope to_@conn read_ber r_enumerated ","scope to_ read r_enumerated ","baNet LDAP Entry  new  to_ber ","args []  to_ber ","base to_@conn read_ber r ","base to_ read r ","args [] to_i  - ","(Net LDAP Entry  new nd\n  (lvar :size) :-\n  (lvar :n_results)) < ","(send\n  (lvar :args [] to_i ) :-\n  (lvar :n_results)) < ","args [] to_i  > "," encode_sort_pdu result_controls  "," encode_sort_controls to_ber_contextspecific  "," encode_args fetch _controls "," encode_ encode_sort_controls s ","attr to_s to_@conn read_ber r ","attr to_s to_ read r "," Array  map ","Net LDAP Filter  construct  is_a? ","Net LDAP DerefAliaNet LDAP Entry  new sArray  include? ","args [] to_i  >= "," message_queue delete  empty? ! "," message_queue delete  nil? ! "," message_queue delete  nil? ","rfc2696_c value read_ber []  map to_ber_sequence to_s to_ber ","rfc2696_cookie map to_ber_Net LDAP Entry  new quence to_s to_ber ","rfc2696_cookie map to_@conn read_ber r_sequence to_s to_@conn read_ber r ","rfc2696_cookie map to_ read r_sequence to_s to_ read r ","rfc2696_c value read_ber []  map to_ber_sequence to_s ","rfc2696_cookie map to_ber_Net LDAP Entry  new quence to_s ","rfc2696_cookie map to_@conn read_ber r_sequence to_s ","rfc2696_cookie map to_ read r_sequence to_s ","rfc2696_c value read_ber []  map to_ber_sequence ","rfc2696_cookie map to_ber_Net LDAP Entry  new quence ","rfc2696_cookie map to_@conn read_ber r_sequence ","rfc2696_cookie map to_ read r_sequence ","result_ queued_read  nil? ","result_Net LDAP PDU  new  nil? ","pdu result_code  == ","@conn read_@conn read_ber r ","@conn read_ read r ","(Net LDAP Entry  new nd\n  (Net LDAP Entry  new nd nil :next_msgid) :to_ber) to_ber_Net LDAP Entry  new quence ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) to_ read r_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r ","(Net LDAP Entry  new nd\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LdapControls) :PagedResults) :to_ber) to_ber_Net LDAP Entry  new quence ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LdapControls) :PagedResults) :to_@conn read_ber r) to_@conn read_ber r_sequence ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LdapControls) :PagedResults) :to_ read r) to_ read r_sequence ","Net LDAP LdapControls PagedResults  to_@conn read_ber r ","Net LDAP LdapControls PagedResults  to_ read r ","(Net LDAP Entry  new nd\n  (lvar :Net LDAP Entry  new arch_baNet LDAP Entry  new ) :to_ber) to_ber_appNet LDAP Entry  new quence ","(send\n  (lvar :search_args [] ) :to_ber) to_ber_appsequence ","(send\n  (lvar :search_base) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (lvar :search_base) :to_ read r) to_ read r_appsequence ","Net LDAP Entry  new arch_attributes to_ber_Net LDAP Entry  new quence ","search_attributes to_@conn read_ber r_sequence ","search_attributes to_ read r_sequence ","Net LDAP Entry  new arch_filter to_ber ","search_Net LDAP Filter  construct  to_ber ","search_filter to_@conn read_ber r ","search_filter to_ read r ","attributes_only to_@conn read_ber r ","attributes_only to_ read r ","0 to_@conn read_ber r ","0 to_ read r ","0 to_@conn read_ber r_enumerated ","0 to_ read r_enumerated ","Net LDAP Entry  new arch_baNet LDAP Entry  new  to_ber ","search_args []  to_ber ","search_base to_@conn read_ber r ","search_base to_ read r ","args [] to_i limit - ","(Net LDAP Entry  new nd\n  (lvar :sizelimit) :-\n  (lvar :n_results)) < ","(send\n  (lvar :args [] to_i limit) :-\n  (lvar :n_results)) < ","args [] to_i limit > ","args [] to_i limit >= ","(or\n  (begin\n    (and\n      (lvar :args)\n      (Net LDAP Entry  new nd\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","(or\n  (@conn read_ber gin\n    (and\n      (lvar :args)\n      (send\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","(or\n  ( read gin\n    (and\n      (lvar :args)\n      (send\n        (lvar :args) :[]\n        (sym :attributes))))\n  (array)) map ","Net LDAP Entry  new arch_filter is_a? ","search_Net LDAP Filter  construct  is_a? ","(Net LDAP Entry  new nd\n  (Net LDAP Entry  new nd nil :next_msgid) :to_ber) compact to_ber_Net LDAP Entry  new quence ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) compact to_@conn read_ber r_sequence ","(send\n  (send nil :next_msgid) :to_ read r) compact to_ read r_sequence ","(Net LDAP Entry  new nd\n  (Net LDAP Entry  new nd nil :next_msgid) :to_ber) compact ","(send\n  (send nil :next_msgid) :to_@conn read_ber r) compact ","(send\n  (send nil :next_msgid) :to_ read r) compact "]}," Connection encode_sort_controls":{"type":"method","name":"encode_sort_controls","children":[],"call":["(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :SORT_REQUEST) :to_ber) to_ber_sequence ","sort_control_values to_ber_sequence to_s to_ber ","sort_control_values to_ber_sequence to_s ","sort_control_values to_ber_sequence "," to_ber ","Net LDAP LDAPControls SORT_REQUEST  to_ber ","control to_ber_sequence ","control []= ","(send\n  (send\n    (lvar :control) :[]\n    (int 2)) :==\n  (true)) to_ber ","control [] == ","control [] "," String to_ber "," String "," Array ","sort_definitions map ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :SORT_REQUEST) :to_ber) to_ber_sequence _values to_ber_sequence to_s to_ber ","sort_ Array _values to_ber_sequence to_s to_ber ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :SORT_REQUEST) :to_ber) to_ber_sequence _values to_ber_sequence to_s ","sort_ Array _values to_ber_sequence to_s ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :LDAPControls) :SORT_REQUEST) :to_ber) to_ber_sequence _values to_ber_sequence ","sort_ Array _values to_ber_sequence "," Array  to_ber_sequence "," Array  []= ","(send\n  (send\n    (lvar : Array ) :[]\n    (int 2)) :==\n  (true)) to_ber "," Array  [] == "," Array  [] "]}," Connection bind_gss_spnego":{"type":"method","name":"bind_gss_spnego","children":[],"call":[" bind_sasl ","NTLM Message Type1  new serialize ","NTLM Message Type1  new ","t3_msg serialize ","t2_msg response ","NTLM Message  parse "," proc "," raise ","auth [] "," require ","t2_msg response  serialize ","NTLM Message  parse  response "]}," Connection bind_sasl":{"type":"method","name":"bind_sasl","children":[],"call":[" raise ","chall call ","pdu result_server_sasl_creds ","(op-asgn\n  (lvasgn :n) :+\n  (int 1)) > ","pdu result_code == ","pdu result_code ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","(send\n  (const nil :LdapVersion) :to_ber) to_ber_appsequence "," to_ber ","LdapVersion  to_ber ","(send\n  (lvar :mech) :to_ber) to_ber_contextspecific ","cred to_ber ","mech to_ber "," loop "," next_msgid ","auth [] ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence "," next_msgid to_ber "," read ","pdu result_server_sasl_chall call s "," queued_read  result_server_sasl_creds ","Net LDAP PDU  new  result_server_sasl_creds ","pdu result_server_(send\n  (lvar :mech) :to_ber) to_ber_contextspecific _creds "," queued_read  result_code == ","Net LDAP PDU  new  result_code == "," queued_read  result_code ","Net LDAP PDU  new  result_code "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  ! ","Net LDAP PDU  new  ! ","(send\n  (const nil :LdapVersion) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (const nil :LdapVersion) :to_ read r) to_ read r_appsequence "," to_@conn read_ber r "," to_ read r ","LdapVersion  to_@conn read_ber r ","LdapVersion  to_ read r ","(send\n  (lvar :mech) :to_@conn read_ber r) to_@conn read_ber r_contextspecific ","(send\n  (lvar :mech) :to_ read r) to_ read r_contextspecific ","chall call  to_ber ","cred to_@conn read_ber r ","cred to_ read r ","mech to_@conn read_ber r ","mech to_ read r "," next_ next_msgid to_ber  ","@conn read_@conn read_ber r ","@conn read_ read r ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar :msgid) to_ read r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r "," next_ next_msgid to_ber  to_ber "]}," Connection bind_simple":{"type":"method","name":"bind_simple","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write ","(send\n  (const nil :LdapVersion) :to_ber) to_ber_appsequence ","psw to_ber_contextspecific ","user to_ber ","LdapVersion  to_ber "," next_msgid ","auth [] ","auth [] == ","pdu result_code ","Net LDAP PDU  new ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence "," next_msgid to_ber "," read "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  ! ","Net LDAP PDU  new  ! ","(send\n  (const nil :LdapVersion) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (const nil :LdapVersion) :to_ read r) to_ read r_appsequence ","psw to_@conn read_ber r_contextspecific ","psw to_ read r_contextspecific ","user to_@conn read_ber r ","user to_ read r ","LdapVersion  to_@conn read_ber r ","LdapVersion  to_ read r "," next_ next_msgid to_ber  "," queued_read  result_code ","Net LDAP PDU  new  result_code ","@conn read_@conn read_ber r ","@conn read_ read r ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar :msgid) to_ read r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence "," next_msgid to_@conn read_ber r "," next_msgid to_ read r "," next_ next_msgid to_ber  to_ber "]}," Connection bind":{"type":"method","name":"bind","children":[],"call":[" raise "," bind_gss_spnego ","meth == "," bind_sasl "," bind_simple ","(sym :simple) include? ","payload []= ","auth [] "," instrument ","adapter new bind ","adapter new ","Net LDAP AuthAdapter  [] ","auth []  == ","Net LDAP AuthAdapter  []  new bind ","Net LDAP AuthAdapter  []  new "]}," Connection next_msgid":{"type":"method","name":"next_msgid","children":[],"call":[]}," Connection write":{"type":"method","name":"write","children":[],"call":["payload []= ","@conn write ","(send\n  (lvar :message_id) :to_ber) compact to_ber_sequence ","(send\n  (lvar :message_id) :to_ber) compact ","message_id to_ber "," instrument "," socket write "," socket "]}," Connection read":{"type":"method","name":"read","children":[],"call":["payload []= ","pdu app_tag ","pdu message_id ","Net LDAP PDU  new "," instrument ","@conn read_ber "," socket read_ber "," socket ","payload []=  app_tag ","payload []=  message_id "]}," Connection message_queue":{"type":"method","name":"message_queue","children":[],"call":["hash []= ","Hash  new "]}," Connection queued_read":{"type":"method","name":"queued_read","children":[],"call":[" message_queue [] push "," message_queue [] ","pdu message_id "," message_queue ","pdu message_id == "," read "," message_queue [] shift "," read  message_id "," message_queue [] shift  message_id "," read  message_id == "," message_queue [] shift  message_id == "]}," Connection close":{"type":"method","name":"close","children":[],"call":["@conn close ","@conn nil? ","(ivar :@conn) ! "]}," Connection setup_encryption":{"type":"method","name":"setup_encryption","children":[],"call":[" raise ","args [] ","pdu result_code "," class wrap_with_ssl "," class ","pdu result_code zero? ","pdu app_tag != ","pdu app_tag ","pdu nil? "," queued_read "," write ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_ber_contextspecific\n  (int 0)) to_ber_appsequence ","Net LDAP StartTlsOid  to_ber_contextspecific "," next_msgid ","Net LDAP PDU  new ","be nil? ","@conn read_ber ","@conn write ","(lvar :msgid) to_ber_sequence ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_ber) to_ber_appsequence ","Net LDAP StartTlsOid  to_ber "," next_msgid to_ber "," read "," queued_read  result_code ","Net LDAP PDU  new  result_code "," queued_read  result_code zero? ","Net LDAP PDU  new  result_code zero? "," queued_read  app_tag != ","Net LDAP PDU  new  app_tag != "," queued_read  app_tag ","Net LDAP PDU  new  app_tag "," queued_read  nil? ","Net LDAP PDU  new  nil? ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_@conn read_ber r_contextspecific\n  (int 0)) to_@conn read_ber r_appsequence ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_ read r_contextspecific\n  (int 0)) to_ read r_appsequence ","Net LDAP StartTlsOid  to_@conn read_ber r_contextspecific ","Net LDAP StartTlsOid  to_ read r_contextspecific "," next_ next_msgid to_ber  ","@conn read_ber  nil? "," read  nil? "," class wrap_with_ssl  read_ber ","@conn read_@conn read_ber r ","@conn read_ read r "," class wrap_with_ssl  write ","(lvar :msgid) to_@conn read_ber r_sequence ","(lvar :msgid) to_ read r_sequence ","(lvar : next_msgid to_ber ) to_ber_sequence ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_@conn read_ber r) to_@conn read_ber r_appsequence ","(send\n  (const\n    (const\n      (const nil :Net) :LDAP) :StartTlsOid) :to_ read r) to_ read r_appsequence ","Net LDAP StartTlsOid  to_@conn read_ber r ","Net LDAP StartTlsOid  to_ read r "," next_msgid to_@conn read_ber r "," next_msgid to_ read r "," next_ next_msgid to_ber  to_ber "]}," Connection wrap_with_ssl":{"type":"method","name":"wrap_with_ssl","children":[],"call":[]}," Connection FixSSLSocketSyncClose close":{"type":"method","name":"close","children":[],"call":[" io close "," io "]}," Connection GetbyteForSSLSocket getbyte":{"type":"method","name":"getbyte","children":[],"call":[" getc ord "," getc ","c ord "," get getc  ord "," get getc  "," getc  ord "]}," Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," setup_encryption ","server [] "," raise ","error message ","TCPSocket  new "," open_connection ","server []= ","server [] nil? "," prepare_socket ","server fetch "]}," BER BerIdentifiedNull to_ber":{"type":"method","name":"to_ber","children":[],"call":[]}," BerIdentifiedString initialize":{"type":"method","name":"initialize","children":[],"call":[" encode "," respond_to? ","args encode ","args respond_to? "," force_encoding "," valid_encoding? ","current_encoding == "," encoding "," encoding == "," encoding  == "]}," BerIdentifiedOid to_arr":{"type":"method","name":"to_arr","children":[],"call":["@value dup "]}," BerIdentifiedOid to_s":{"type":"method","name":"to_s","children":[],"call":["@value join "]}," BerIdentifiedOid to_ber_oid":{"type":"method","name":"to_ber_oid","children":[],"call":["@value to_ber_oid "]}," BerIdentifiedOid to_ber":{"type":"method","name":"to_ber","children":[],"call":[" to_ber_oid "]}," BerIdentifiedOid initialize":{"type":"method","name":"initialize","children":[],"call":["s to_i ","oid split map ","oid split ","oid is_a? ","oid split map  split map ","oid split map  split ","oid split map  is_a? "]}," BerIdentifiedArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," String reject_empty_ber_arrays":{"type":"method","name":"reject_empty_ber_arrays","children":[],"call":[" gsub "]}," String raw_utf8_encoded":{"type":"method","name":"raw_utf8_encoded","children":[],"call":[" encode force_encoding "," encode "," respond_to? "]}," String to_ber_bin":{"type":"method","name":"to_ber_bin","children":[],"call":["(lvar :code) pack + + ","(lvar :code) pack + "," length to_ber_length_encoding "," length ","(lvar :code) pack "]}," Array to_ber_control":{"type":"method","name":"to_ber_control","children":[],"call":["ary to_ber_sequence reject_empty_ber_arrays ","ary to_ber_sequence ","(send\n  (lvar :control_sequence) :collect) to_ber_sequence reject_empty_ber_arrays ","(send\n  (lvar :control_sequence) :collect) to_ber_sequence ","element to_ber ","control_sequence collect ","ary collect "," [] kind_of? "," [] ","control_sequence collect to_ber_sequence reject_empty_ber_arrays ","control_sequence collect to_ber_sequence "]}," BERParser read_ber":{"type":"method","name":"read_ber","children":[],"call":[" parse_ber_object "," read "," raise ","-1 == "," block_given? "," read_ber_length "," getbyte "]}," BERParser read_ber_length":{"type":"method","name":"read_ber_length","children":[],"call":["(send\n  (lvar :v) :<<\n  (int 8)) + ","v << "," read each_byte "," read ","n & "," raise ","n == ","n <= "," getbyte ","(send\n  (l(send\n  (lvar :v) :<<\n  (int 8)) + ar :(send\n  (lvar :v) :<<\n  (int 8)) + ) :<<\n  (int 8)) + ","(se getbyte d\n  (lvar :v) :<<\n  (i getbyte t 8)) + ","(send\n  (lvar :v) :<<\n  (int 8)) +  << "," getbyte  & "," getbyte  == "," getbyte  <= "]}," BERParser parse_ber_object":{"type":"method","name":"parse_ber_object","children":[],"call":[" raise ","n ber_identifier= ","Net BER BerIdentifiedNull  new ","object_type == ","data != ","seq << ","(lvasgn :e\n  (send\n    (lvar :sio) :read_ber\n    (lvar :syntax))) != ","sio read_ber ","StringIO  new ","seq ber_identifier= ","Net BER BerIdentifiedArray  new ","oid unshift ","g first ","g last ","f - ","f < ","oid shift ","data unpack ","(send\n  (lvar :j) :<<\n  (int 8)) + ","j << ","data each_byte ","s ber_identifier= ","Net BER BerIdentifiedString  new ","BuiltinSyntax  [] ","syntax [] ","(send\n  (lvar :int) :+\n  (int 1)) * ","int + ","(send\n  (lvar :int) :<<\n  (int 8)) + ","255 - ","int << ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  (int 128)) zero? ! ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  (int 128)) zero? ","data unpack first & ","data unpack first "," raissio read_ber  "," raiNet BER BerIdentifiedString  new e ","Net BER BerIdentifiedNull  new  ber_ideNet BER BerIdentifiedNull  new tifier= ","n bsio read_ber r_idsio read_ber ntifisio read_ber r= ","n ber_identioid shift ier= ","Net BER BerIdeNet BER BerIdentifiedNull  new tifiedNull  Net BER BerIdentifiedNull  new ew ","Nsio read_ber t BER Bsio read_ber rIdsio read_ber ntifisio read_ber dNull  nsio read_ber w ","Net BER BerIdentioid shift iedNull  new ","objsio read_ber ct_typsio read_ber  == ","ob(send\n  (lvar :j) :<<\n  (int 8)) + ect_type == ","ssio read_ber q << ","Net BER BerIdentifiedArray  new  << ","Net BER BerIdentifiedString  new eq << ","(lvasgNet BER BerIdentifiedNull  new  :e\n  (seNet BER BerIdentifiedNull  new d\n    (lvar :sio) :read_ber\n    (lvar :syNet BER BerIdentifiedNull  new tax))) != ","(lvasgn :sio read_ber \n  (ssio read_ber nd\n    (lvar :sio) :rsio read_ber ad_bsio read_ber r\n    (lvar :syntax))) != ","(lvasgn :e\n  (send\n    (lvar :StringIO  new ) :read_ber\n    (lvar :syntax))) != ","(lvaNet BER BerIdentifiedString  new gn :e\n  (Net BER BerIdentifiedString  new end\n    (lvar :Net BER BerIdentifiedString  new io) :read_ber\n    (lvar :Net BER BerIdentifiedString  new yntax))) != ","sio rsio read_ber ad_bsio read_ber r ","StringIO  new  read_ber ","Net BER BerIdentifiedString  new io read_ber ","StriNet BER BerIdentifiedNull  new gIO  Net BER BerIdentifiedNull  new ew ","StringIO  nsio read_ber w ","seq ber_ideNet BER BerIdentifiedNull  new tifier= ","ssio read_ber q bsio read_ber r_idsio read_ber ntifisio read_ber r= ","Net BER BerIdentifiedArray  new  ber_identifier= ","seq ber_identioid shift ier= ","Net BER BerIdentifiedString  new eq ber_identifier= ","Net BER BerIdeNet BER BerIdentifiedNull  new tifiedArray  Net BER BerIdentifiedNull  new ew ","Nsio read_ber t BER Bsio read_ber rIdsio read_ber ntifisio read_ber dArray  nsio read_ber w ","Net BER BerIdentioid shift iedArray  new ","oid uNet BER BerIdentifiedNull  new shift ","oid unshioid shift t ","data unpack  unshift ","oid unNet BER BerIdentifiedString  new hift ","g oid shift irst ","g firNet BER BerIdentifiedString  new t ","g laNet BER BerIdentifiedString  new t ","oid shift  - ","oid shift  < ","oid shioid shift t ","data unpack  shift ","oid Net BER BerIdentifiedString  new hift ","data uNet BER BerIdentifiedNull  new pack ","(seNet BER BerIdentifiedNull  new d\n  (lvar :j) :<<\n  (iNet BER BerIdentifiedNull  new t 8)) + ","(ssio read_ber nd\n  (lvar :j) :<<\n  (int 8)) + ","(send\n  (lvar :(send\n  (lvar :j) :<<\n  (int 8)) + ) :<<\n  (int 8)) + ","(Net BER BerIdentifiedString  new end\n  (lvar :j) :<<\n  (int 8)) + ","(send\n  (lvar :j) :<<\n  ((send\n  (lvar :int) :<<\n  (int 8)) +  8)) + ","(send\n  (lvar :j) :<<\n  (int 8)) +  << ","data sio read_ber ach_bytsio read_ber  ","s ber_ideNet BER BerIdentifiedNull  new tifier= ","s bsio read_ber r_idsio read_ber ntifisio read_ber r= ","s ber_identioid shift ier= ","Net BER BerIdentifiedString  new  ber_identifier= ","Net BER BerIdeNet BER BerIdentifiedNull  new tifiedStriNet BER BerIdentifiedNull  new g  Net BER BerIdentifiedNull  new ew ","Nsio read_ber t BER Bsio read_ber rIdsio read_ber ntifisio read_ber dString  nsio read_ber w ","Net BER BerIdentioid shift iedString  new ","BuiltiNet BER BerIdentifiedNull  new SyNet BER BerIdentifiedNull  new tax  [] ","syNet BER BerIdentifiedNull  new tax [] ","Net BER BerIdentifiedString  new yntax [] ","(seNet BER BerIdentifiedNull  new d\n  (lvar :iNet BER BerIdentifiedNull  new t) :+\n  (iNet BER BerIdentifiedNull  new t 1)) * ","(ssio read_ber nd\n  (lvar :int) :+\n  (int 1)) * ","(Net BER BerIdentifiedString  new end\n  (lvar :int) :+\n  (int 1)) * ","(send\n  (lvar :(send\n  (lvar :int) :<<\n  (int 8)) + ) :+\n  ((send\n  (lvar :int) :<<\n  (int 8)) +  1)) * ","iNet BER BerIdentifiedNull  new t + ","(send\n  (lvar :int) :<<\n  (int 8)) +  + ","(seNet BER BerIdentifiedNull  new d\n  (lvar :iNet BER BerIdentifiedNull  new t) :<<\n  (iNet BER BerIdentifiedNull  new t 8)) + ","(ssio read_ber nd\n  (lvar :int) :<<\n  (int 8)) + ","(Net BER BerIdentifiedString  new end\n  (lvar :int) :<<\n  (int 8)) + ","(send\n  (lvar :(send\n  (lvar :int) :<<\n  (int 8)) + ) :<<\n  ((send\n  (lvar :int) :<<\n  (int 8)) +  8)) + ","iNet BER BerIdentifiedNull  new t << ","(send\n  (lvar :int) :<<\n  (int 8)) +  << ","(seNet BER BerIdentifiedNull  new d\n  (seNet BER BerIdentifiedNull  new d\n    (seNet BER BerIdentifiedNull  new d\n      (lvar :data) :uNet BER BerIdentifiedNull  new pack\n      (str \"C\")) :first) :&\n  (iNet BER BerIdentifiedNull  new t 128)) zero? ! ","(ssio read_ber nd\n  (ssio read_ber nd\n    (ssio read_ber nd\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  (int 128)) zsio read_ber ro? ! ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :oid shift irst) :&\n  (int 128)) zero? ! ","(Net BER BerIdentifiedString  new end\n  (Net BER BerIdentifiedString  new end\n    (Net BER BerIdentifiedString  new end\n      (lvar :data) :unpack\n      (Net BER BerIdentifiedString  new tr \"C\")) :firNet BER BerIdentifiedString  new t) :&\n  (int 128)) zero? ! ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  ((send\n  (lvar :int) :<<\n  (int 8)) +  128)) zero? ! ","(seNet BER BerIdentifiedNull  new d\n  (seNet BER BerIdentifiedNull  new d\n    (seNet BER BerIdentifiedNull  new d\n      (lvar :data) :uNet BER BerIdentifiedNull  new pack\n      (str \"C\")) :first) :&\n  (iNet BER BerIdentifiedNull  new t 128)) zero? ","(ssio read_ber nd\n  (ssio read_ber nd\n    (ssio read_ber nd\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  (int 128)) zsio read_ber ro? ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :oid shift irst) :&\n  (int 128)) zero? ","(Net BER BerIdentifiedString  new end\n  (Net BER BerIdentifiedString  new end\n    (Net BER BerIdentifiedString  new end\n      (lvar :data) :unpack\n      (Net BER BerIdentifiedString  new tr \"C\")) :firNet BER BerIdentifiedString  new t) :&\n  (int 128)) zero? ","(send\n  (send\n    (send\n      (lvar :data) :unpack\n      (str \"C\")) :first) :&\n  ((send\n  (lvar :int) :<<\n  (int 8)) +  128)) zero? ","data uNet BER BerIdentifiedNull  new pack first & ","data unpack oid shift irst & ","data unpack firNet BER BerIdentifiedString  new t & ","data uNet BER BerIdentifiedNull  new pack first ","data unpack oid shift irst ","data unpack firNet BER BerIdentifiedString  new t "]}," Integer to_ber_internal":{"type":"method","name":"to_ber_internal","children":[],"call":["result pack ","result << ","(send\n  (self) :>>\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :size) :-\n          (int 1))) :*\n      (int 8)))) & "," >> ","(send\n  (lvar :size) :-\n  (int 1)) * ","size - ","size > ","(send\n  (self) :&\n  (begin\n    (send\n      (int 128) :<<\n      (send\n        (begin\n          (send\n            (lvar :size) :-\n            (int 1))) :*\n        (int 8))))) == "," & ","128 << "," < ","(send\n  (self) :&\n  (begin\n    (send\n      (int 128) :<<\n      (send\n        (begin\n          (send\n            (lvar :size) :-\n            (int 1))) :*\n        (int 8))))) > "," > ","(send\n  (begin\n    (if\n      (begin\n        (send\n          (self) :<\n          (int 0)))\n      (send\n        (self) :~)\n      (self))) :>>\n  (begin\n    (send\n      (lvar :size) :*\n      (int 8)))) zero? ","(if\n  (begin\n    (send\n      (self) :<\n      (int 0)))\n  (send\n    (self) :~)\n  (self)) >> ","size * "," ~ "]}," Integer to_ber_application":{"type":"method","name":"to_ber_application","children":[],"call":["(send\n  (int 64) :+\n  (lvar :tag)) pack + "," to_ber_internal ","(send\n  (int 64) :+\n  (lvar :tag)) pack ","64 + "]}," Integer to_ber_length_encoding":{"type":"method","name":"to_ber_length_encoding","children":[],"call":["(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack + ","(send\n  (int 128) :+\n  (send\n    (lvar :i) :length)) pack ","128 + ","i length ","(self) pack sub ","(self) pack "," <= ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack + ","(send\n  ((self) pack sub nt 128) :+\n  (send\n    (lvar :(self) pack sub ) :length)) pack ","(self) pack sub  length "]}," Integer to_ber_enumerated":{"type":"method","name":"to_ber_enumerated","children":[],"call":[" to_ber_internal "]}," Integer to_ber":{"type":"method","name":"to_ber","children":[],"call":[" to_ber_internal "]}," LDAP new_connection":{"type":"method","name":"new_connection","children":[],"call":["Net LDAP Connection  new "," raise ","ResultStrings  [] ","connection socket ","Net LDAP Connection  new  socket "]}," LDAP use_connection":{"type":"method","name":"use_connection","children":[],"call":["conn close ","(lvasgn :result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(lvasgn :result\n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code ","conn bind ","args [] "," new_connection ","result result_code == ","result result_code "," new_connection  close ","(lvasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) conn bind _code == ","(lvasgn :result\n  (send\n    (lvar : new_connection ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code == ","(lvasgn :conn bind \n  (send\n    (lvar :conn) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) conn bind _code ","(lvasgn :result\n  (send\n    (lvar : new_connection ) :bind\n    (or\n      (send\n        (lvar :args) :[]\n        (sym :auth))\n      (ivar :@auth)))) result_code "," new_connection  bind "," new_ new_connection ection ","conn bind  conn bind _code == ","conn bind  conn bind _code "]}," LDAP LdapError message":{"type":"method","name":"message","children":[],"call":["Deprecation warning: Net::LDAP::LdapError is no longer used. Use Net::LDAP::Error or rescue one of it's subclasses. \n + "]}," LDAP inspect":{"type":"method","name":"inspect","children":[],"call":["inspected gsub! ","@auth [] "]}," LDAP ConnectionError initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :errors) :map) join ","e message ","e class ","errors map "]}," LDAP ConnectionError new":{"type":"method","name":"new","children":[],"call":[]}," LDAP ConnectionRefusedError warn_deprecation_message":{"type":"method","name":"warn_deprecation_message","children":[],"call":[" warn "]}," LDAP ConnectionRefusedError message":{"type":"method","name":"message","children":[],"call":[" warn_deprecation_message "]}," LDAP ConnectionRefusedError initialize":{"type":"method","name":"initialize","children":[],"call":[" warn_deprecation_message "]}," Connection open_connection":{"type":"method","name":"open_connection","children":[],"call":[" raise ","Net LDAP ConnectionError  new ","errors << "," close "," prepare_socket ","server merge ","TCPSocket  new ","hosts each ","server [] ","Socket  tcp ","@socket_class new ","@conn post_connection_check "," warn ","encryption [] [] == ","encryption [] [] ","encryption [] ","server []  each ","server []  [] [] == ","server []  [] [] ","server []  [] "]}," Connection prepare_socket":{"type":"method","name":"prepare_socket","children":[],"call":[" setup_encryption ","server [] "," setup_server []  "]}," Net LDAP AuthAdapter bind":{"type":"method","name":"bind","children":[],"call":[" raise "]}," Net LDAP AuthAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net LDAP AuthAdapter []":{"type":"method","name":"[]","children":[],"call":[]}," Net LDAP AuthAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Net LDAP AuthAdapter Simple bind":{"type":"method","name":"bind","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! ","@connection queued_read ","@connection send ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :Connection) :LdapVersion) :to_ber) to_ber_appsequence ","psw to_ber_contextspecific ","user to_ber ","Net LDAP Connection LdapVersion  to_ber ","@connection next_msgid ","auth [] ","auth [] == ","@connection queued_read  app_tag != ","@connection queued_read  app_tag ","@connection queued_read  ! "]}," Net LDAP AuthAdapter Sasl bind":{"type":"method","name":"bind","children":[],"call":[" raise ","chall call ","pdu result_server_sasl_creds ","(op-asgn\n  (lvasgn :n) :+\n  (int 1)) > ","pdu result_code == ","pdu result_code ","pdu app_tag != ","pdu app_tag ","pdu ! ","@connection queued_read ","@connection send ","(send\n  (const\n    (const\n      (const\n        (const nil :Net) :LDAP) :Connection) :LdapVersion) :to_ber) to_ber_appsequence "," to_ber ","Net LDAP Connection LdapVersion  to_ber ","(send\n  (lvar :mech) :to_ber) to_ber_contextspecific ","cred to_ber ","mech to_ber "," loop ","@connection next_msgid ","auth [] ","pdu result_server_sasl_chall call s ","@connection queued_read  result_server_sasl_creds ","pdu result_server_(send\n  (lvar :mech) :to_ber) to_ber_contextspecific _creds ","@connection queued_read  result_code == ","@connection queued_read  result_code ","@connection queued_read  app_tag != ","@connection queued_read  app_tag ","@connection queued_read  ! ","chall call  to_ber "]}," Net LDAP AuthAdapers GSS_SPNEGO bind":{"type":"method","name":"bind","children":[],"call":["Net LDAP AuthAdapter Sasl  new bind ","NTLM Message Type1  new serialize ","NTLM Message Type1  new ","Net LDAP AuthAdapter Sasl  new ","t3_msg serialize ","t2_msg response ","NTLM Message  parse "," proc "," raise ","auth [] "," require ","t2_msg response  serialize ","NTLM Message  parse  response "]}," LDAP normalize_encryption":{"type":"method","name":"normalize_encryption","children":[],"call":["args to_sym ","args is_a? ","args nil? "]}," LDAP connection=":{"type":"method","name":"connection=","children":[],"call":[]}," LDAP password_modify":{"type":"method","name":"password_modify","children":[],"call":["@result success? ","conn password_modify "," use_connection "," instrument "]}," PDU parse_extended_response":{"type":"method","name":"parse_extended_response","children":[],"call":["sequence [] "," raise ","sequence length >= ","sequence length "]}," Connection DefaultSocket new":{"type":"method","name":"new","children":[],"call":[]}," Connection socket":{"type":"method","name":"socket","children":[],"call":[" open_connection ","@server []= ","@server [] ","@server [] nil? "," prepare_socket ","@conn nil? ! ","@conn nil? "]}," Connection password_modify":{"type":"method","name":"password_modify","children":[],"call":[" raise ","pdu app_tag != ","pdu app_tag ","pdu ! "," queued_read "," write "," next_msgid ","ext_seq to_ber_appsequence ","ext_seq << ","pwd_seq to_ber_sequence to_ber ","pwd_seq to_ber_sequence ","pwd_seq << ","args [] to_ber ","args [] ","args [] nil? ","Net LDAP PasswdModifyOid  to_ber_contextspecific ","dn empty? ","dn ! ","dn to_ber "," queued_read  app_tag != "," queued_read  app_tag "," queued_read  ! ","args []  empty? ","args []  ! ","args []  to_ber "]}," Connection socket_class=":{"type":"method","name":"socket_class=","children":[],"call":[]}," LDAP recursive_delete":{"type":"method","name":"recursive_delete","children":[],"call":[" raise "," get_operation_result [] to_s "," get_operation_result [] "," get_operation_result "," delete ","args [] "," recursive_delete ","entry dn "," search ","args key? ","args is_a? "]}," Entry ==":{"type":"method","name":"==","children":[],"call":["@myhash == ","other to_h ","other instance_of? "," class "]}," Entry to_h":{"type":"method","name":"to_h","children":[],"call":["@myhash dup "]}}