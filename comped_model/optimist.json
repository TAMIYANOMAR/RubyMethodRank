{" Optimist educate":{"type":"method","name":"educate","children":[],"call":[" raise "," exit ","@last_parser educate "]}," Optimist die":{"type":"method","name":"die","children":[],"call":[" raise ","@last_parser die "]}," Optimist with_standard_exception_handling":{"type":"method","name":"with_standard_exception_handling","children":[],"call":[" exit "," puts ","parser version ","parser educate ","parser die ","e error_code ","e message "]}," Optimist options":{"type":"method","name":"options","children":[],"call":["@last_parser parse "," with_standard_exception_handling ","Parser  new ","Parser  new  parse "]}," Optimist IOArrayOption multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist IOArrayOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist DateArrayOption multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist DateArrayOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist StringArrayOption multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist StringArrayOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist FloatArrayOption multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist FloatArrayOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist IntegerArrayOption multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist IntegerArrayOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist DateOption parse":{"type":"method","name":"parse","children":[],"call":[" raise "," name ","Date  parse ","Date  new ","time day ","time month ","time year ","Chronic  parse "," require ","param is_a? ","pg map ","paramlist map ","Chronic  parse  day ","Chronic  parse  month ","Chronic  parse  year "]}," Optimist DateOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist StringOption parse":{"type":"method","name":"parse","children":[],"call":["pg map ","paramlist map "]}," Optimist StringOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist IOOption parse":{"type":"method","name":"parse","children":[],"call":[" raise ","e message "," name "," open "," require ","param =~ ","pg map ","paramlist map "]}," Optimist IOOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist IntegerOption parse":{"type":"method","name":"parse","children":[],"call":["param to_i "," raise "," name ","param =~ ","param is_a? ","pg map ","paramlist map "]}," Optimist IntegerOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist FloatOption parse":{"type":"method","name":"parse","children":[],"call":["param to_f "," raise "," name ","param =~ ","param is_a? ","pg map ","paramlist map "]}," Optimist FloatOption type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist BooleanOption parse":{"type":"method","name":"parse","children":[],"call":["neg_given ! "," name to_s =~ "," name to_s "," name "]}," Optimist BooleanOption flag?":{"type":"method","name":"flag?","children":[],"call":[]}," Optimist BooleanOption initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Optimist Option handle_short_opt":{"type":"method","name":"handle_short_opt","children":[],"call":[]}," Optimist Option handle_long_opt":{"type":"method","name":"handle_long_opt","children":[],"call":[]}," Optimist Option get_klass_from_default":{"type":"method","name":"get_klass_from_default","children":[],"call":[]}," Optimist Option get_type_from_disdef":{"type":"method","name":"get_type_from_disdef","children":[],"call":[]}," Optimist Option create":{"type":"method","name":"create","children":[],"call":[]}," Optimist Option register_alias":{"type":"method","name":"register_alias","children":[],"call":[]}," Optimist Option description_with_default":{"type":"method","name":"description_with_default","children":[],"call":[" desc "," desc end_with? "," default to_s "," default "," default join "]}," Optimist Option educate":{"type":"method","name":"educate","children":[],"call":["(if\n  (send nil :short?)\n  (dstr\n    (str \"-\")\n    (begin\n      (send nil :short))\n    (str \", \"))\n  (str \"\")) + + + "," long "," default "," flag? ","(if\n  (send nil :short?)\n  (dstr\n    (str \"-\")\n    (begin\n      (send nil :short))\n    (str \", \"))\n  (str \"\")) + + "," type_format ","(if\n  (send nil :short?)\n  (dstr\n    (str \"-\")\n    (begin\n      (send nil :short))\n    (str \", \"))\n  (str \"\")) + "," short "," short? "]}," Optimist Option type_format":{"type":"method","name":"type_format","children":[],"call":[]}," Optimist Option parse":{"type":"method","name":"parse","children":[],"call":[" raise "]}," Optimist Option required?":{"type":"method","name":"required?","children":[],"call":[" opts "]}," Optimist Option desc":{"type":"method","name":"desc","children":[],"call":[" opts "]}," Optimist Option callback":{"type":"method","name":"callback","children":[],"call":[" opts "]}," Optimist Option short?":{"type":"method","name":"short?","children":[],"call":[" short != "," short "]}," Optimist Option array_default?":{"type":"method","name":"array_default?","children":[],"call":[" default kind_of? "," default "]}," Optimist Option multi_arg?":{"type":"method","name":"multi_arg?","children":[],"call":[]}," Optimist Option multi":{"type":"method","name":"multi","children":[],"call":[]}," Optimist Option single_arg?":{"type":"method","name":"single_arg?","children":[],"call":[" flag? ! "," flag? "," multi_arg? ! "," multi_arg? "]}," Optimist Option flag?":{"type":"method","name":"flag?","children":[],"call":[]}," Optimist Option opts=":{"type":"method","name":"opts=","children":[],"call":[]}," Optimist Option opts":{"type":"method","name":"opts","children":[],"call":["@optshash [] "]}," Optimist Option initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," Optimist Parser cloaker":{"type":"method","name":"cloaker","children":[],"call":[" remove_method "," instance_method "," define_method ","(sclass\n  (self)\n  (self)) class_eval "," remove_ instance_method od "," instance_ instance_method od "," define_ instance_method od "]}," Optimist Parser wrap_line":{"type":"method","name":"wrap_line","children":[],"call":["nextt + ","ret << ","(if\n  (begin\n    (and\n      (send\n        (lvar :ret) :empty?)\n      (send\n        (send\n          (lvar :opts) :[]\n          (sym :inner)) :!)))\n  (str \"\")\n  (send\n    (str \" \") :*\n    (lvar :prefix))) + ","str [] ","  * ","opts [] ! ","opts [] ","ret empty? ","str length ","str index ","x < ","str rindex ","start + ","start + >= ","start > "," width - "," width ","str length  + ","nestr index tt + ","nestr rindex tt + ","(if\n  (begin\n    (and\n      (send\n        (lvar :ret) :empty?)\n      (send\n        (send\n          (lvar :opts) :[]\n          (sym :inner)) :!)))\n  (str \"\")\n  (send\n    (str \" \") :*\n    (lvar :prefistr index ))) + ","(if\n  (begin\n    (and\n      (send\n        (lvar :ret) :empty?)\n      (send\n        (send\n          (lvar :opts) :[]\n          (sym :inner)) :!)))\n  (str \"\")\n  (send\n    (str \" \") :*\n    (lvar :prefistr rindex ))) + ","str indestr index  ","str indestr rindex  ","str index  < ","str rindex  < ","str rindestr index  ","str rindestr rindex  ","nextt +  + ","nextt +  + >= ","nextt +  > "]}," Optimist Parser resolve_default_short_options!":{"type":"method","name":"resolve_default_short_options!","children":[],"call":["@short []= ","opts short= ","@short member? ! ","@short member? ","d !~ ","opts long split find ","opts long split ","opts long ","opts short ","type != ","@specs [] ","@order each ","@specs []  short= ","@specs []  long split find ","@specs []  long split ","@specs []  long ","@specs []  short "]}," Optimist Parser collect_argument_parameters":{"type":"method","name":"collect_argument_parameters","children":[],"call":["params << ","args [] ","@stop_words member? ! ","@stop_words member? ","args [] !~ "]}," Optimist Parser each_arg":{"type":"method","name":"each_arg","children":[],"call":["remains << ","args [] ","short_remaining empty? ","i + ","shortargs [] join ","shortargs [] ","j + ","short_remaining << "," collect_argument_parameters ","j == ","shortargs length - ","shortargs length ","shortargs each_with_index ","1 split ","num_params_taken nil? ","@stop_words member? ","i >= ","args length ","1 split  [] join ","1 split  [] ","1 split  length - ","1 split  length ","1 split  each_with_index ","num_ collect_argument_parameters _taken nil? "]}," Optimist Parser die":{"type":"method","name":"die","children":[],"call":[" exit ","$stderr puts "," educate ","@specs [] long ","@specs [] ","msg kind_of? "]}," Optimist Parser wrap":{"type":"method","name":"wrap","children":[],"call":["(send\n  (send\n    (lvar :str) :split\n    (str \"\\n\")) :map) flatten "," wrap_line ","opts merge ","str split map ","str split ","str == "," wrap_ wrap_line  "]}," Optimist Parser legacy_width":{"type":"method","name":"legacy_width","children":[],"call":["(str \"tput cols\") to_i "]}," Optimist Parser width":{"type":"method","name":"width","children":[],"call":[" legacy_width ","w to_i > ","w to_i ","IO  console winsize last ","IO  console winsize ","IO  console "," require ","$stdout tty? "," legacy_IO  console winsize last idth ","IO  console winsize last  to_i > ","IO  console winsize last  to_i ","IO  console IO  console winsize last insize last ","IO  console IO  console winsize last insize "]}," Optimist Parser educate":{"type":"method","name":"educate","children":[],"call":["stream puts "," wrap "," width - - "," width - "," width ","spec description_with_default ","stream printf ","left [] ","@specs [] ","what == ","@order each ","File  basename gsub ","File  basename ","@order first first == ","@order first first ","@order first ","@order size > ","@order size ","leftcol_width + ","left values map max ","left values map ","left values ","left []= ","spec educate ","@specs each ","spec spec description_with_default ription_with_default ","@specs []  description_with_default ","@@specs [] s [] ","@specs []  educate ","@@specs [] s each "]}," Optimist Parser parse":{"type":"method","name":"parse","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" [] ","m to_s "," [] "]}],"call":[" [] ","m to_s ","cmdline << ","@leftovers each ","cmdline clear ","opts callback call ","vals [] ","opts callback ","vals []= ","vals [] [] ","opts multi? ! ","opts multi? ","opts multi_arg? ","vals [] [] [] ","p [] ","vals [] map ","opts single_arg? ","opts parse ","(begin\n  (lvar :sym)) intern ","params << ","opts default ","opts default clone ","opts array_default? "," raise ","opts flag? ! ","opts flag? ","params empty? ","@specs [] ","given_data values_at ","given_args each ","@specs [] long ","given_args include? ","required each ","sym != ","syms each ","given_args [] ","syms find ","@constraints each ","params size ","given_args [] [] << ","given_args [] [] ","@specs [] multi_arg? ","params [] ","@specs [] single_arg? ","given_args [] []= ","@specs [] multi? ! ","@specs [] multi? ","sym ! "," ignore_invalid_options ","arg =~ ","@long [] ","@short [] "," each_arg "," resolve_default_short_options! ","opts default ! ","opts multi ","required []= ","opts required? ","@specs each "," opt ","(or\n  (send\n    (ivar :@specs) :[]\n    (sym :version))\n  (send\n    (ivar :@long) :[]\n    (str \"version\"))) ! ","(send\n  (lvar :syms) :map) join ","syms map ","(send\n  (lvar :syms) :&\n  (send\n    (lvar :given_args) :keys)) size != ","(send\n  (lvar :syms) :&\n  (send\n    (lvar :given_args) :keys)) size ","syms & ","given_args keys ","@specs []  callback call ","@specs []  callback ","@specs []  multi? ! ","@specs []  multi? ","@specs []  multi_arg? ","@specs []  single_arg? ","@specs []  parse ","@specs []  default ","@specs []  default clone ","@specs []  array_default? ","@specs []  flag? ! ","@specs []  flag? ","@specs []  default ! ","@specs []  multi ","@specs []  required? "]}," Optimist Parser educate_on_error":{"type":"method","name":"educate_on_error","children":[],"call":[]}," Optimist Parser stop_on_unknown":{"type":"method","name":"stop_on_unknown","children":[],"call":[]}," Optimist Parser stop_on":{"type":"method","name":"stop_on","children":[],"call":["(splat\n  (lvar :words)) flatten "]}," Optimist Parser conflicts":{"type":"method","name":"conflicts","children":[],"call":["@constraints << "," raise ","@specs [] ","syms each "]}," Optimist Parser depends":{"type":"method","name":"depends","children":[],"call":["@constraints << "," raise ","@specs [] ","syms each "]}," Optimist Parser banner":{"type":"method","name":"banner","children":[],"call":["@order << "]}," Optimist Parser synopsis":{"type":"method","name":"synopsis","children":[],"call":[]}," Optimist Parser usage":{"type":"method","name":"usage","children":[],"call":[]}," Optimist Parser version":{"type":"method","name":"version","children":[],"call":[]}," Optimist Parser opt":{"type":"method","name":"opt","children":[],"call":["@order << ","o name ","@specs []= ","@short []= ","o short ","o short? ","@long []= ","o long "," raise ","o short inspect ","@short [] ","o long inspect ","@long [] ","@specs member? ","Option  create ","opts [] "," block_given? ","@Option  create rder << ","Option  create  name ","@shOption  create rt []= ","Option  create  shOption  create rt ","Option  create  shOption  create rt? ","@lOption  create ng []= ","Option  create  lOption  create ng ","Option  create  shOption  create rt inspect ","@shOption  create rt [] ","Option  create  lOption  create ng inspect ","@lOption  create ng [] ","OptiOption  create n  create ","Option  create pts [] "," blOption  create ck_given? "]}," Optimist Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" cloaker bind call "," cloaker bind "," cloaker "]}," Optimist Parser registry_getopttype":{"type":"method","name":"registry_getopttype","children":[],"call":[]}," Optimist Parser register":{"type":"method","name":"register","children":[],"call":[]}," Optimist CommandlineError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Optimist Parser either":{"type":"method","name":"either","children":[],"call":["@constraints << "," raise ","@specs [] ","syms each "]}}