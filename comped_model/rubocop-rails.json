{" RuboCop Rails Inject defaults!":{"type":"method","name":"defaults!","children":[],"call":[]}," RuboCop Cop Rails Validation braced_options":{"type":"method","name":"braced_options","children":[],"call":["options source ","options braces? "]}," RuboCop Cop Rails Validation correct_validate_type":{"type":"method","name":"correct_validate_type","children":[],"call":["corrector insert_after ","last_argument source_range ","corrector replace "," braced_options ","last_argument loc expression ","last_argument loc ","last_argument hash_type? ","node method_name to_s split [] ","node method_name to_s split ","node method_name to_s ","node method_name ","node arguments last ","node arguments "," validate_type "," correct_validate_type_for_array ","arguments parent loc ","arguments parent ","node last_argument receiver ","node last_argument "," frozen_array_argument? ","last_argument array_type? "," correct_validate_type_for_hash ","last_argument source_last_argument source_range  ","node arguments last  source_range ","node last_argument  source_range ","node arguments last  loc expression ","node last_argument  loc expression ","last_argument arguments parent loc  expression ","last_argument last_argument loc  expression ","node arguments last  loc ","node last_argument  loc ","last_argument arguments parent loc  ","last_argument last_argument loc  ","node arguments last  hash_type? ","node last_argument  hash_type? ","node node last_argument receiver  last ","node node last_argument receiver  "," node method_name to_s split []  "," correct_node method_name to_s split [] _for_array ","arguments parent arguments parent loc  ","arguments parent last_argument loc  ","node last_argument receiver  parent loc ","node last_argument receiver  parent ","node node arguments last  receiver ","node node last_argument  receiver ","node node arguments last  ","node node last_argument  ","node arguments last  array_type? ","node last_argument  array_type? "," correct_node method_name to_s split [] _for_hash "]}," RuboCop Cop Rails Validation preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["ALLOWLIST  [] ","DENYLIST  index ","method to_sym ","RESTRICT_ON_SEND  index "]}," RuboCop Cop Rails Validation message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method ","node node method_name  "]}," RuboCop Cop Rails Validation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_validate_type ","corrector replace ","node loc selector ","node loc "," lambda ","last_argument splat_type? ! ","last_argument splat_type? ","last_argument literal? ! ","last_argument literal? ","node arguments last ","node arguments "," frozen_array_argument? ! "," frozen_array_argument? ","node arguments last  splat_type? ! ","node arguments last  splat_type? ","node arguments last  literal? ! ","node arguments last  literal? "]}," RuboCop Cop Rails Validation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","DENYLIST  include? ","node method_name ","node receiver ! ","node receiver "," correct_validate_type ","corrector replace "," frozen_array_argument? ! "," frozen_array_argument? ","last_argument splat_type? ! ","last_argument splat_type? ","last_argument literal? ! ","last_argument literal? ","node arguments last ","node arguments "," message ","node loc selector ","node loc ","node arguments last  splat_type? ! ","node arguments last  splat_type? ","node arguments last  literal? ! ","node arguments last  literal? "]}," RuboCop Cop Rails UnknownEnv environments":{"type":"method","name":"environments","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails UnknownEnv unknown_env_name?":{"type":"method","name":"unknown_env_name?","children":[],"call":[" environments include? ! "," environments include? ","name [] "," environments ","name end_with? ","name to_s ","name to_s  [] ","name to_s  end_with? ","name to_s  to_s "]}," RuboCop Cop Rails UnknownEnv message":{"type":"method","name":"message","children":[],"call":[" format "," find_similar_name ","name to_s ","similar_names join ","similar_names empty? ","spell_checker correct ","DidYouMean SpellChecker  new "," environments ","name to_s chomp "," find_ find_similar_name _name "," find_similar_name to_s chomp  ","name to_s chomp  to_s "," find_similar_name _names join ","similar_name to_s chomp s join ","spell_checker correct  join "," find_similar_name _names empty? ","similar_name to_s chomp s empty? ","spell_checker correct  empty? ","DidYouMean SpellChecker  new  correct ","name to_s chomp  to_s chomp "]}," RuboCop Cop Rails UnknownEnv collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["env + "," environments map "," environments "]}," RuboCop Cop Rails UnknownEnv on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," unknown_environment? ","str_node value "," unknown_environment_equal? ","node loc selector ","node loc "," unknown_environment_predicate? "]}," RuboCop Cop Rails UniqBeforePluck dot_method_begin_pos":{"type":"method","name":"dot_method_begin_pos","children":[],"call":["node loc dot begin_pos ","node loc dot ","node loc ","node source rindex ","node source ","lines last strip == ","lines last strip ","lines last ","node source split ","node source split  last strip == ","node source split  last strip ","node source split  last "]}," RuboCop Cop Rails UniqBeforePluck dot_method_with_whitespace":{"type":"method","name":"dot_method_with_whitespace","children":[],"call":[" range_between ","node loc selector end_pos ","node loc selector ","node loc "," dot_method_begin_pos "]}," RuboCop Cop Rails UniqBeforePluck style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Rails UniqBeforePluck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","node receiver loc dot begin ","node receiver loc dot ","node receiver loc ","node receiver ","corrector remove "," dot_method_with_whitespace ","node method_name "," lambda "," dot_node method_name _with_whitespace ","node node method_name _name "]}," RuboCop Cop Rails UniqBeforePluck on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," aggressive_node_match "," conservative_node_match "," style == "," style ","corrector insert_before ","node receiver loc dot begin ","node receiver loc dot ","node receiver loc ","node receiver ","corrector remove "," dot_method_with_whitespace ","node method_name ","node loc selector ","node loc "," dot_ aggressive_node_match _with_whitespace "," dot_ conservative_node_match _with_whitespace "," dot_node method_name _with_whitespace ","node  aggressive_node_match _name ","node  conservative_node_match _name ","node node method_name _name "]}," RuboCop Cop Rails TimeZone offset_provided?":{"type":"method","name":"offset_provided?","children":[],"call":["node arguments size >= ","node arguments size ","node arguments "," offset_option_provided? ","node arguments size == ","node method_name "]}," RuboCop Cop Rails TimeZone acceptable_methods":{"type":"method","name":"acceptable_methods","children":[],"call":["acceptable << ","ACCEPTED_METHODS  each "," safe_method "]}," RuboCop Cop Rails TimeZone good_methods":{"type":"method","name":"good_methods","children":[],"call":["GOOD_METHODS  + + ","GOOD_METHODS  + "," strict? "]}," RuboCop Cop Rails TimeZone strict?":{"type":"method","name":"strict?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails TimeZone flexible?":{"type":"method","name":"flexible?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails TimeZone need_check_localtime?":{"type":"method","name":"need_check_localtime?","children":[],"call":["chain include? "," flexible? "]}," RuboCop Cop Rails TimeZone not_danger_chain?":{"type":"method","name":"not_danger_chain?","children":[],"call":["(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ","chain & "," good_methods ","(send\n  (lvar :chain) :&\n  (const nil :DANGEROUS_METHODS)) empty? "]}," RuboCop Cop Rails TimeZone check_localtime":{"type":"method","name":"check_localtime","children":[],"call":[" add_offense ","node arguments? ","node parent ","node method_name == ","node method_name "," autocorrect ","selector_node loc selector ","selector_node loc ","node method? ","node parent  arguments? ","node parent  parent ","node parent  method_name == ","node parent  method_name ","selector_node parent  loc selector ","selector_node parent  loc ","node parent  method? "]}," RuboCop Cop Rails TimeZone safe_method":{"type":"method","name":"safe_method","children":[],"call":["node arguments? ","(str \"new\") include? "]}," RuboCop Cop Rails TimeZone method_send?":{"type":"method","name":"method_send?","children":[],"call":["node parent receiver == ","node parent receiver ","node parent "]}," RuboCop Cop Rails TimeZone method_from_time_class?":{"type":"method","name":"method_from_time_class?","children":[],"call":["TIMECLASSES  include? "," method_from_time_class? ","receiver cbase_type? ! ","receiver cbase_type? ","receiver is_a? ","method_name == "]}," RuboCop Cop Rails TimeZone extract_method_chain":{"type":"method","name":"extract_method_chain","children":[],"call":["node parent ","chain << ","node method_name "," method_from_time_class? ","node send_type? ","node nil? ! ","node nil? ","node parent  parent ","node parent  method_name ","node parent  send_type? ","node parent  nil? ! ","node parent  nil? "]}," RuboCop Cop Rails TimeZone build_message":{"type":"method","name":"build_message","children":[],"call":[" format "," safe_method "," acceptable_methods join "," acceptable_methods "," flexible? "]}," RuboCop Cop Rails TimeZone check_time_node":{"type":"method","name":"check_time_node","children":[],"call":[" add_offense "," build_message "," offset_provided? ","(send\n  (lvar :chain) :&\n  (const nil :DANGEROUS_METHODS)) join ","chain & "," check_localtime "," need_check_localtime? "," not_danger_chain? "," extract_method_chain "," autocorrect ","node loc selector ","node loc "," attach_timezone_specifier? ","node first_argument "," build_ build_message  ","(send\n  (lvar : extract_method_chain ) :&\n  (const nil :DANGEROUS_METHODS)) join "," extract_method_chain  & "," not_danger_ extract_method_chain ? "," extract_method_ extract_method_chain  "]}," RuboCop Cop Rails TimeZone remove_redundant_in_time_zone":{"type":"method","name":"remove_redundant_in_time_zone","children":[],"call":["node parent ","corrector remove ","node loc selector adjust ","node loc selector ","node loc ","node children last == ","node children last ","node children ","time_methods_called include? "," extract_method_chain ","node parent  parent ","node parent  loc selector adjust ","node parent  loc selector ","node parent  loc ","node parent  children last == ","node parent  children last ","node parent  children "," extract_method_chain  include? "]}," RuboCop Cop Rails TimeZone autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_redundant_in_time_zone ","corrector replace ","node children first source_range ","node children first ","node children "," strict? ","node loc selector ","node loc ","node method_name == ","node method_name ","corrector insert_after ","node children [] source_range ","node children [] "," lambda "," autocorrect_time_new "]}," RuboCop Cop Rails TimeZone on_const":{"type":"method","name":"on_const","children":[],"call":[" check_time_node ","node parent ","TIMECLASSES  include? "," method_send? ","mod cbase_type? ","mod nil? ","klass == "]}," RuboCop Cop Rails SkipsModelValidations whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails SkipsModelValidations blacklist":{"type":"method","name":"blacklist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails SkipsModelValidations allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":["node arguments? ! ","node arguments? ","METHODS_WITH_ARGUMENTS  include? ","node method_name to_s ","node method_name "]}," RuboCop Cop Rails SkipsModelValidations message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "]}," RuboCop Cop Rails SkipsModelValidations on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," good_touch? "," allowed_method? "," blacklist include? ","node method_name to_s ","node method_name "," blacklist "," whitelist include? "," whitelist "," message ","node loc selector ","node loc "," good_insert? "," forbidden_methods include? "," forbidden_methods "," allowed_methods include? "," allowed_methods "]}," RuboCop Cop Rails ScopeArgs on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," scope? ","corrector replace ","second_arg source "]}," RuboCop Cop Rails SaveBang expected_signature?":{"type":"method","name":"expected_signature?","children":[],"call":["node first_argument literal? ! ","node first_argument literal? ","node first_argument ","node first_argument hash_type? ","node method_name != ","node method_name ","node arguments one? ","node arguments ","node arguments? ! ","node arguments? "]}," RuboCop Cop Rails SaveBang persist_method?":{"type":"method","name":"persist_method?","children":[],"call":[" allowed_receiver? ! "," allowed_receiver? "," expected_signature? ","methods include? ","node method_name "]}," RuboCop Cop Rails SaveBang return_value_assigned?":{"type":"method","name":"return_value_assigned?","children":[],"call":[" assignable_node parent "," assignable_node "]}," RuboCop Cop Rails SaveBang explicit_return?":{"type":"method","name":"explicit_return?","children":[],"call":["ret next_type? ","ret return_type? "," assignable_node parent "," assignable_node "," assignable_node parent  next_type? "," assignable_node parent   assignable_node parent urn_type? "]}," RuboCop Cop Rails SaveBang argument?":{"type":"method","name":"argument?","children":[],"call":[" assignable_node argument? "," assignable_node "]}," RuboCop Cop Rails SaveBang implicit_return?":{"type":"method","name":"implicit_return?","children":[],"call":["method children size == ","node sibling_index + ","node sibling_index ","method children size ","method children ","method block_type? ","method def_type? ","node parent "," assignable_node "," cop_config [] "," cop_config "," find_method_with_sibling_index ","node parent  children size == "," assignable_node  sibling_index + "," assignable_node  sibling_index ","node parent  children size ","node parent  children ","node parent  block_type? ","node parent  def_type? "," assignable_node  parent "," assignable_ assignable_node  "," find_node parent _with_sibling_index "]}," RuboCop Cop Rails SaveBang const_matches?":{"type":"method","name":"const_matches?","children":[],"call":["allowed_part == ","const_part to_s ","parts all? ","allowed_const split reverse zip ","const split reverse ","const split ","allowed_const split reverse ","allowed_const split ","allowed_const split reverse zip  all? "]}," RuboCop Cop Rails SaveBang receiver_chain_matches?":{"type":"method","name":"receiver_chain_matches?","children":[],"call":[" const_matches? ","node const_name ","node const_type? ","node method_name == ","receiver_part to_sym ","node method_name ","node send_type? ","node node_parts first == ","node node_parts first ","node node_parts ","node variable? ","node receiver ","allowed_receiver split reverse all? ","allowed_receiver split reverse ","allowed_receiver split ","node method? ","node receiver  const_name ","node receiver  const_type? ","node receiver  method_name == ","node receiver  method_name ","node receiver  send_type? ","node receiver  node receiver _parts first == ","node receiver  node receiver _parts first ","node receiver  node receiver _parts ","node receiver  variable? ","node receiver  receiver ","node receiver  method? "]}," RuboCop Cop Rails SaveBang allowed_receiver?":{"type":"method","name":"allowed_receiver?","children":[],"call":[" receiver_chain_matches? "," cop_config [] any? "," cop_config [] "," cop_config ","node receiver ","node receiver const_name == ","node receiver const_name "]}," RuboCop Cop Rails SaveBang conditional?":{"type":"method","name":"conditional?","children":[],"call":[" single_negative? ","condition and_type? ","condition or_type? ","condition case_type? ","condition if_type? ","node parent ","node block_node ","parent case_type? ","parent if_type? ","node parent  and_type? ","node parent  or_type? ","node parent  case_type? ","node parent  if_type? "]}," RuboCop Cop Rails SaveBang check_used_in_conditional":{"type":"method","name":"check_used_in_conditional","children":[],"call":[" add_offense_for_node ","MODIFY_PERSIST_METHODS  include? ","node method_name "," conditional? "]}," RuboCop Cop Rails SaveBang array_parent":{"type":"method","name":"array_parent","children":[],"call":["node parent "]}," RuboCop Cop Rails SaveBang hash_parent":{"type":"method","name":"hash_parent","children":[],"call":["pair parent ","node parent ","node parent  parent "]}," RuboCop Cop Rails SaveBang assignable_node":{"type":"method","name":"assignable_node","children":[],"call":[" array_parent "," hash_parent ","node block_node "]}," RuboCop Cop Rails SaveBang call_to_persisted?":{"type":"method","name":"call_to_persisted?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Rails SaveBang persisted_referenced?":{"type":"method","name":"persisted_referenced?","children":[],"call":[" call_to_persisted? ","reference node parent ","reference node ","assignment variable references any? ","assignment variable references ","assignment variable ","assignment referenced? "]}," RuboCop Cop Rails SaveBang right_assignment_node":{"type":"method","name":"right_assignment_node","children":[],"call":["node send_node ","assignment node child_nodes first ","assignment node child_nodes ","assignment node ","assignment node child_nodes first  send_assignment node child_nodes first  ","assignment assignment node child_nodes first  child_assignment node child_nodes first s first ","assignment assignment node child_nodes first  child_assignment node child_nodes first s ","assignment assignment node child_nodes first  "]}," RuboCop Cop Rails SaveBang add_offense_for_node":{"type":"method","name":"add_offense_for_node","children":[],"call":[" add_offense "," format ","name to_s ","node method_name ","node method_name  to_s ","node method_node method_name  "]}," RuboCop Cop Rails SaveBang autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","node method_name ","node loc selector ","node loc "]}," RuboCop Cop Rails SaveBang on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense_for_node "," explicit_return? "," implicit_return? "," argument? "," check_used_in_conditional "," return_value_assigned? "," persist_method? "," register_offense "," checked_immediately? "," check_used_in_condition_or_compound_boolean "]}," RuboCop Cop Rails SaveBang check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" add_offense_for_node "," persisted_referenced? "," persist_method? "," right_assignment_node "," register_offense "," add_offense_for_ right_assignment_node  "," right_assignment_ right_assignment_node  "]}," RuboCop Cop Rails SaveBang after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_assignment ","variable assignments each ","variable assignments ","scope variables each_value ","scope variables "]}," RuboCop Cop Rails SaveBang join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Rails SafeNavigation replacement":{"type":"method","name":"replacement","children":[],"call":["params empty? ","method [] ","method end_with? ","params map join ","params map "]}," RuboCop Cop Rails SafeNavigation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot begin_pos ","node loc dot ","method_node source [] ","method_node source ","node arguments ","corrector insert_before ","node receiver ","node source_range end_pos ","node source_range ","  range_between _between ","method_node source [] _node source [] ","method_node source [] _node source ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Rails SafeNavigation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","dispatch value =~ ","dispatch value ","dispatch sym_type? "," cop_config [] ! "," cop_config [] "," cop_config ","try_method == "," try_call "," autocorrect ","dispatch value match? "]}," RuboCop Cop Rails ReversibleMigration all_hash_key?":{"type":"method","name":"all_hash_key?","children":[],"call":["hash_keys & == ","hash_keys & ","key children first to_sym ","key children first ","key children ","args keys map ","args keys ","(send\n  (lvar :hash_keys) :&\n  (lvar :keys)) sort == ","(send\n  (lvar :hash_keys) :&\n  (lvar :keys)) sort "]}," RuboCop Cop Rails ReversibleMigration within_reversible_or_up_only_block?":{"type":"method","name":"within_reversible_or_up_only_block?","children":[],"call":["ancestor send_node method? ","ancestor send_node ","ancestor block_type? ","node each_ancestor any? ","node each_ancestor ","ancestor method? "]}," RuboCop Cop Rails ReversibleMigration within_change_method?":{"type":"method","name":"within_change_method?","children":[],"call":["ancestor method? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails ReversibleMigration check_change_table_offense":{"type":"method","name":"check_change_table_offense","children":[],"call":[" add_offense "," format ","IRREVERSIBLE_CHANGE_TABLE_CALLS  include? ! ","IRREVERSIBLE_CHANGE_TABLE_CALLS  include? ","receiver != ","node receiver ","node method_name "," reversible_change_table_call? "," target_rails_version >= "," target_rails_version ","method_name == ","node node method_name  ","node method_name  == "]}," RuboCop Cop Rails ReversibleMigration check_change_table_node":{"type":"method","name":"check_change_table_node","children":[],"call":[" check_change_table_offense ","block each_child_node ","block send_type? "," add_offense "," format "," target_rails_version < "," target_rails_version "," change_table_call "]}," RuboCop Cop Rails ReversibleMigration check_remove_foreign_key_node":{"type":"method","name":"check_remove_foreign_key_node","children":[],"call":[" add_offense "," format ","arg hash_type? "," remove_foreign_key_call "," all_hash_key? ! "," all_hash_key? "]}," RuboCop Cop Rails ReversibleMigration check_remove_column_node":{"type":"method","name":"check_remove_column_node","children":[],"call":[" add_offense "," format ","args to_a size < ","args to_a size ","args to_a "," remove_column_call "]}," RuboCop Cop Rails ReversibleMigration check_change_column_default_node":{"type":"method","name":"check_change_column_default_node","children":[],"call":[" add_offense "," format "," all_hash_key? ","args last "," change_column_default_call "]}," RuboCop Cop Rails ReversibleMigration check_drop_table_node":{"type":"method","name":"check_drop_table_node","children":[],"call":[" add_offense "," format ","node parent block_type? ","node parent "," drop_table_call ","node last_argument block_pass_type? ","node last_argument "]}," RuboCop Cop Rails ReversibleMigration check_irreversible_schema_statement_node":{"type":"method","name":"check_irreversible_schema_statement_node","children":[],"call":[" add_offense "," format "," irreversible_schema_statement_call "]}," RuboCop Cop Rails ReversibleMigration on_block":{"type":"method","name":"on_block","children":[],"call":[" check_change_table_node ","node body ","node send_node ","node body nil? "," within_reversible_or_up_only_block? "," within_change_method? "," in_migration? "]}," RuboCop Cop Rails ReversibleMigration on_send":{"type":"method","name":"on_send","children":[],"call":[" check_remove_foreign_key_node "," check_remove_column_node "," check_change_column_default_node "," check_drop_table_node "," check_irreversible_schema_statement_node "," within_reversible_or_up_only_block? "," within_change_method? "," check_remove_index_node "," check_remove_columns_node "," check_reversible_hash_node "," in_migration? "]}," RuboCop Cop Rails RequestReferer wrong_method_name":{"type":"method","name":"wrong_method_name","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails RequestReferer message":{"type":"method","name":"message","children":[],"call":[" format "," wrong_method_name "," style "]}," RuboCop Cop Rails RequestReferer autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style "," lambda "]}," RuboCop Cop Rails RequestReferer on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node source_range ","node method? "," wrong_method_name "," referer? ","corrector replace "," style "]}," RuboCop Cop Rails RelativeDateConstant autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","(dstr\n  (str \"def self.\")\n  (begin\n    (send\n      (lvar :const_name) :downcase))) join ","value source ","const_name downcase ","  * ","node loc column ","node loc ","scope nil? ","node casgn_type? "]}," RuboCop Cop Rails RelativeDateConstant on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" add_offense "," format "," relative_date_or_assignment? "," relative_date_or_assignment "]}," RuboCop Cop Rails RelativeDateConstant on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense "," format "," range_between ","value loc expression end_pos ","value loc expression ","value loc ","name loc expression begin_pos ","name loc expression ","name loc "," relative_date? ","name casgn_type? ","lhs children zip each ","lhs children zip ","rhs children ","lhs children "," autocorrect "," message "," offense_range "," nested_relative_date "]}," RuboCop Cop Rails RelativeDateConstant on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense "," format "," relative_date_assignment? "," autocorrect "," message "," relative_date? ","node each_descendant ","node children [] ","node children "," nested_relative_date "]}," RuboCop Cop Rails RefuteMethods offense_message":{"type":"method","name":"offense_message","children":[],"call":[" format ","CORRECTIONS  [] "," convert_good_method "]}," RuboCop Cop Rails RefuteMethods refute_method?":{"type":"method","name":"refute_method?","children":[],"call":["OFFENSIVE_METHODS  include? "]}," RuboCop Cop Rails RefuteMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","CORRECTIONS  [] ","node method_name ","node loc selector ","node loc "," lambda ","good_method to_s "," convert_good_method "," convert_good_method  to_s "," convert_ convert_good_method  "]}," RuboCop Cop Rails RefuteMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense_message ","node method_name "," offensive? ","corrector replace "," convert_good_method ","node loc selector ","node loc "," offense_ offense_message  ","node node method_name  "]}," RuboCop Cop Rails ReflectionClassName on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","reflection_class_name loc expression ","reflection_class_name loc "," association_with_reflection "," str_assigned? ","reflection_class_name value lvar_type? ","reflection_class_name value ","reflection_class_name value receiver nil? ","reflection_class_name value receiver ","reflection_class_name value send_type? "," autocorrect ","reflection_class_name source_range "]}," RuboCop Cop Rails RedundantReceiverInWithOptions same_value?":{"type":"method","name":"same_value?","children":[],"call":["recv_node children [] == ","arg_node children [] ","arg_node children ","recv_node children [] ","recv_node children "]}," RuboCop Cop Rails RedundantReceiverInWithOptions search_begin_pos_of_space_before_block_argument":{"type":"method","name":"search_begin_pos_of_space_before_block_argument","children":[],"call":[" search_begin_pos_of_space_before_block_argument "," processed_source raw_source [] == "," processed_source raw_source [] "," processed_source raw_source "," processed_source ","begin_pos - "]}," RuboCop Cop Rails RedundantReceiverInWithOptions block_argument_range":{"type":"method","name":"block_argument_range","children":[],"call":[" range_between ","block_argument end_pos "," search_begin_pos_of_space_before_block_argument ","block_argument begin_pos ","block_node children [] source_range ","block_node children [] ","block_node children ","node each_ancestor first ","node each_ancestor ","block_node children [] source_range  end_pos "," search_begin_pos_of_space_before_block_node children [] source_range  ","block_node children [] source_range  begin_pos ","node each_ancestor first  children [] source_range ","node each_ancestor first  children [] ","node each_ancestor first  children "]}," RuboCop Cop Rails RedundantReceiverInWithOptions autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," block_argument_range ","node loc dot ","node loc ","node receiver source_range ","node receiver "," lambda ","node numblock_type? ","send_node loc dot ","send_node loc ","send_node receiver source_range ","send_node receiver "]}," RuboCop Cop Rails RedundantReceiverInWithOptions on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","receiver source_range ","send_node receiver ","send_nodes each "," same_value? ","n receiver ","send_nodes all? "," all_send_nodes_in "," all_block_nodes_in count zero? "," all_block_nodes_in count "," all_block_nodes_in ","body nil? "," with_options? "," autocorrect "," redundant_receiver? ","node body ","node method? ","send_node receiver  source_range ","send_node send_node receiver  "," all_send_nodes_in  each ","n send_node receiver  "," all_send_nodes_in  all? "," all_ all_send_nodes_in _in ","node body  nil? "," redundant_send_node receiver ? ","node node body  "]}," RuboCop Cop Rails RedundantAllowNil node_end":{"type":"method","name":"node_end","children":[],"call":["node loc expression end_pos ","node loc expression ","node loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails RedundantAllowNil node_beg":{"type":"method","name":"node_beg","children":[],"call":["node loc expression begin_pos ","node loc expression ","node loc ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Rails RedundantAllowNil next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Rails RedundantAllowNil previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":["node parent children [] ","node sibling_index - ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Rails RedundantAllowNil find_allow_nil_and_allow_blank":{"type":"method","name":"find_allow_nil_and_allow_blank","children":[],"call":["key == ","descendant children first source ","descendant children first ","descendant children ","descendant pair_type? ","node each_descendant "," find_allow_nil_and_allow_blank ","child_node children first source ","child_node children first ","child_node children ","child_node pair_type? ","node each_child_node ","descendant children first source  == ","child_node children first source  == "]}," RuboCop Cop Rails RedundantAllowNil offense":{"type":"method","name":"offense","children":[],"call":[" add_offense ","allow_blank_val true_type? ","allow_nil_val false_type? ","allow_nil_val type == ","allow_blank_val type ","allow_nil_val type "]}," RuboCop Cop Rails RedundantAllowNil autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc expression ","node loc "," range_between "," node_end "," node_beg "," lambda "," next_sibling "," previous_sibling "]}," RuboCop Cop Rails RedundantAllowNil on_send":{"type":"method","name":"on_send","children":[],"call":[" offense ","allow_blank children last ","allow_blank children ","allow_nil children last ","allow_nil children "," find_allow_nil_and_allow_blank ","node method_name == ","node method_name "," register_offense ","allow_blank_val true_type? ","allow_nil_val false_type? ","allow_nil_val type == ","allow_blank_val type ","allow_nil_val type ","node method? ","allow_blank children last  true_type? ","allow_nil children last  false_type? ","allow_nil children last  type == ","allow_blank children last  type ","allow_nil children last  type "]}," RuboCop Cop Rails ReadWriteAttribute write_attribute_replacement":{"type":"method","name":"write_attribute_replacement","children":[],"call":["node last_argument source ","node last_argument ","node first_argument source ","node first_argument "]}," RuboCop Cop Rails ReadWriteAttribute read_attribute_replacement":{"type":"method","name":"read_attribute_replacement","children":[],"call":["node first_argument source ","node first_argument "]}," RuboCop Cop Rails ReadWriteAttribute message":{"type":"method","name":"message","children":[],"call":[" format ","node method? "]}," RuboCop Cop Rails ReadWriteAttribute autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda "," write_attribute_replacement "," read_attribute_replacement ","node method_name "," write_attribute_ write_attribute_replacement  "," write_attribute_ read_attribute_replacement  "," read_attribute_ write_attribute_replacement  "," read_attribute_ read_attribute_replacement  "]}," RuboCop Cop Rails ReadWriteAttribute on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," read_write_attribute? ","corrector replace ","node source_range "," write_attribute_replacement "," read_attribute_replacement ","node method_name "," message ","node loc selector ","node loc "," within_shadowing_method? "," node_replacement "," build_message "," write_attribute_ write_attribute_replacement  "," write_attribute_ read_attribute_replacement  "," read_attribute_ write_attribute_replacement  "," read_attribute_ read_attribute_replacement  "," node_ write_attribute_replacement  "," node_ read_attribute_replacement  "]}," RuboCop Cop Rails Present replacement":{"type":"method","name":"replacement","children":[],"call":["node source ","node respond_to? "]}," RuboCop Cop Rails Present unless_condition":{"type":"method","name":"unless_condition","children":[],"call":["node loc expression begin join ","method_call loc expression ","method_call loc ","node loc expression begin ","node loc expression ","node loc ","node loc keyword join ","node loc expression end ","node loc keyword ","node modifier_form? ","node source_range begin join ","method_call source_range ","node source_range begin ","node source_range ","node source_range end "]}," RuboCop Cop Rails Present autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node loc expression ","node loc "," not_blank? "," exists_and_not_empty? ","method_call loc expression ","method_call loc ","node loc keyword "," unless_blank? "," lambda ","node source_range ","method_call source_range ","node source_node loc expression  ","node source_method_call loc expression  ","node source_node source_range  ","node source_method_call source_range  ","method_call source_node loc expression  ","method_call source_method_call loc expression  ","method_call source_node source_range  ","method_call source_method_call source_range  "]}," RuboCop Cop Rails Present on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","range source "," replacement "," unless_condition "," unless_blank? "," config for_cop [] "," config for_cop "," config ","node else? ","node unless? "," cop_config [] "," cop_config "," autocorrect "," unless_condition  source "]}," RuboCop Cop Rails Present on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense ","var1 == "," exists_and_not_empty? "," cop_config [] "," cop_config "," autocorrect "]}," RuboCop Cop Rails Present on_and":{"type":"method","name":"on_and","children":[],"call":[" add_offense "," format ","node source "," replacement ","var1 == "," exists_and_not_empty? "," cop_config [] "," cop_config "," autocorrect "]}," RuboCop Cop Rails Present on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source "," replacement "," not_blank? "," cop_config [] "," cop_config "," autocorrect "]}," RuboCop Cop Rails Presence replacement":{"type":"method","name":"replacement","children":[],"call":["(begin\n  (send\n    (lvar :receiver) :source)) + ","receiver source ","other source ","other nil_type? ","other nil? "," build_source_for_or_method "]}," RuboCop Cop Rails Presence message":{"type":"method","name":"message","children":[],"call":[" format ","node source "," replacement "," current gsub "," current "," replacement gsub ","node left_sibling ","  current gsub  gsub ","  current gsub  "]}," RuboCop Cop Rails Presence ignore_other_node?":{"type":"method","name":"ignore_other_node?","children":[],"call":["node while_type? ","node rescue_type? ","node if_type? "]}," RuboCop Cop Rails Presence ignore_if_node?":{"type":"method","name":"ignore_if_node?","children":[],"call":["node elsif? "]}," RuboCop Cop Rails Presence autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node source_range "," redundant_negative_receiver_and_other "," redundant_receiver_and_other "," lambda "]}," RuboCop Cop Rails Presence on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," message ","receiver nil? "," ignore_other_node? "," redundant_negative_receiver_and_other "," redundant_receiver_and_other "," ignore_if_node? "," register_offense "]}," RuboCop Cop Rails PluralizationGrammar duration_method?":{"type":"method","name":"duration_method?","children":[],"call":["PLURAL_DURATION_METHODS  key? ","SINGULAR_DURATION_METHODS  key? "]}," RuboCop Cop Rails PluralizationGrammar singularize":{"type":"method","name":"singularize","children":[],"call":["PLURAL_DURATION_METHODS  fetch to_s ","PLURAL_DURATION_METHODS  fetch ","method_name to_sym "]}," RuboCop Cop Rails PluralizationGrammar pluralize":{"type":"method","name":"pluralize","children":[],"call":["SINGULAR_DURATION_METHODS  fetch to_s ","SINGULAR_DURATION_METHODS  fetch ","method_name to_sym "]}," RuboCop Cop Rails PluralizationGrammar literal_number?":{"type":"method","name":"literal_number?","children":[],"call":["node float_type? ","node int_type? "]}," RuboCop Cop Rails PluralizationGrammar plural_receiver?":{"type":"method","name":"plural_receiver?","children":[],"call":[" singular_receiver? ! "," singular_receiver? "]}," RuboCop Cop Rails PluralizationGrammar singular_receiver?":{"type":"method","name":"singular_receiver?","children":[],"call":["number abs == ","number abs "]}," RuboCop Cop Rails PluralizationGrammar singular_method?":{"type":"method","name":"singular_method?","children":[],"call":[" plural_method? ! "," plural_method? "]}," RuboCop Cop Rails PluralizationGrammar plural_method?":{"type":"method","name":"plural_method?","children":[],"call":["method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Rails PluralizationGrammar offense?":{"type":"method","name":"offense?","children":[],"call":[" singular_method? ","node method_name "," plural_receiver? "," plural_method? "," singular_receiver? ","node receiver "]}," RuboCop Cop Rails PluralizationGrammar correct_method":{"type":"method","name":"correct_method","children":[],"call":[" pluralize "," singularize "," plural_method? "]}," RuboCop Cop Rails PluralizationGrammar message":{"type":"method","name":"message","children":[],"call":[" format "," correct_method ","node method_name to_s ","node method_name ","node receiver "]}," RuboCop Cop Rails PluralizationGrammar autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correct_method ","node loc selector ","node loc ","node loc selector source "," lambda "]}," RuboCop Cop Rails PluralizationGrammar on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense? "," literal_number? ","node receiver "," duration_method? ","node method_name ","corrector replace "," correct_method ","node loc selector ","node loc ","node loc selector source "," message ","node node loc selector source  "]}," RuboCop Cop Rails OutputSafety looks_like_rails_safe_concat?":{"type":"method","name":"looks_like_rails_safe_concat?","children":[],"call":["node arguments one? ","node arguments ","node method? "]}," RuboCop Cop Rails OutputSafety looks_like_rails_raw?":{"type":"method","name":"looks_like_rails_raw?","children":[],"call":["node arguments one? ","node arguments ","node command? "]}," RuboCop Cop Rails OutputSafety looks_like_rails_html_safe?":{"type":"method","name":"looks_like_rails_html_safe?","children":[],"call":["node arguments? ! ","node arguments? ","node method? ","node receiver "]}," RuboCop Cop Rails OutputSafety non_interpolated_string?":{"type":"method","name":"non_interpolated_string?","children":[],"call":["node receiver dstr_type? ! ","node receiver dstr_type? ","node receiver "]}," RuboCop Cop Rails OutputSafety on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," looks_like_rails_safe_concat? "," looks_like_rails_raw? "," looks_like_rails_html_safe? "," non_interpolated_string? ","node loc selector ","node loc "," i18n_method? "]}," RuboCop Cop Rails Output match_gvar?":{"type":"method","name":"match_gvar?","children":[],"call":["(sym :$stdout) include? "]}," RuboCop Cop Rails Output on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node arguments? "," io_output? "," output? ","node loc selector ","node loc ","corrector replace "," offense_range ","node parent "," offense_ offense_range  "]}," RuboCop Cop Rails NotNullColumn check_pairs":{"type":"method","name":"check_pairs","children":[],"call":[" add_offense "," null_false? ","pairs find "," default_option? ","pairs any? "]}," RuboCop Cop Rails NotNullColumn check_add_reference":{"type":"method","name":"check_add_reference","children":[],"call":[" check_pairs "," add_not_null_reference? "," check_ add_not_null_reference?  "]}," RuboCop Cop Rails NotNullColumn check_add_column":{"type":"method","name":"check_add_column","children":[],"call":[" check_pairs "," add_not_null_column? ","type value == ","type value ","type respond_to? "," check_ add_not_null_column?  "]}," RuboCop Cop Rails NotNullColumn on_send":{"type":"method","name":"on_send","children":[],"call":[" check_add_reference "," check_add_column "]}," RuboCop Cop Rails LinkToBlank contains_noopener?":{"type":"method","name":"contains_noopener?","children":[],"call":["rel_array include? ","value to_s split ","value to_s ","value to_s split  include? "]}," RuboCop Cop Rails LinkToBlank add_rel":{"type":"method","name":"add_rel","children":[],"call":["corrector insert_after ","send_node arguments last source_range ","send_node arguments last ","send_node arguments ","opening_quote == ","offence_node children last source [] ","offence_node children last source ","offence_node children last ","offence_node children ","last_argument source_range ","last_argument pairs last source_range ","last_argument pairs last ","last_argument pairs ","(lvasgn :last_argument\n  (send\n    (lvar :send_node) :last_argument)) hash_type? ","send_node last_argument ","offense_node children last source [] ","offense_node children last source ","offense_node children last ","offense_node children ","send_node arguments last source_send_node arguments last source_range  ","send_node arguments last source_last_argument source_range  ","send_node arguments last source_last_argument pairs last source_range  ","offence_node children last source []  == ","offense_node children last source []  == ","last_argument source_send_node arguments last source_range  ","last_argument source_last_argument source_range  ","last_argument source_last_argument pairs last source_range  ","send_node last_argument  source_range ","last_argument pairs last source_send_node arguments last source_range  ","last_argument pairs last source_last_argument source_range  ","last_argument pairs last source_last_argument pairs last source_range  ","send_node last_argument  pairs last source_range ","send_node last_argument  pairs last ","send_node last_argument  pairs ","(lvasgn :send_node last_argument \n  (send\n    (lvar :send_node) :send_node last_argument )) hash_type? ","send_node send_node last_argument  "]}," RuboCop Cop Rails LinkToBlank append_to_rel":{"type":"method","name":"append_to_rel","children":[],"call":["corrector replace ","rel_node children last loc expression adjust ","rel_node children last loc expression ","rel_node children last loc ","rel_node children last ","rel_node children ","rel_node children last value ","rel_node children last source_range adjust ","rel_node children last source_range "]}," RuboCop Cop Rails LinkToBlank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" add_rel "," append_to_rel "," rel_node? ","options find ","option_nodes map each ","option_nodes map ","send_node each_child_node ","node parent parent ","node parent "," lambda ","send_node each_child_node  map each ","send_node each_child_node  map ","node parent parent  each_child_node "]}," RuboCop Cop Rails LinkToBlank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," includes_noopener? ","options none? "," blank_target? ","options find ","option_nodes map each ","option_nodes map ","node each_child_node ","node method? "," autocorrect ","node each_child_node  map each ","node each_child_node  map "]}," RuboCop Cop Rails LexicallyScopedActionFilter message":{"type":"method","name":"message","children":[],"call":[" format ","parent type ","methods join ","methods [] ","methods size == ","methods size "]}," RuboCop Cop Rails LexicallyScopedActionFilter array_values":{"type":"method","name":"array_values","children":[],"call":["(send\n  (send\n    (lvar :node) :values) :map) compact ","v value ","v str_content to_sym ","v str_content ","v type ","node values map ","node values ","node value ","node str_content to_sym ","node str_content ","node type ","node values filter_map "]}," RuboCop Cop Rails LexicallyScopedActionFilter on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","methods empty? "," message ","defined_methods include? "," array_values reject "," array_values ","block each_child_node map ","block each_child_node ","parent each_child_node first ","parent each_child_node ","node each_ancestor first ","node each_ancestor "," only_or_except_filter_methods ","defined_action_methods include? "," defined_action_methods ","unmatched_methods empty? "," array_values - ","  message  ","block each_child_node map  include? ","parent each_child_node first  each_child_node map ","parent each_child_node first  each_child_node ","node each_ancestor first  each_child_node first ","node each_ancestor first  each_child_node "," defined_action_methods  include? ","  defined_action_methods  "," array_values -  empty? "]}," RuboCop Cop Rails InverseOf message":{"type":"method","name":"message","children":[],"call":[" inverse_of_nil_option? ","options any? "]}," RuboCop Cop Rails InverseOf same_context_in_with_options?":{"type":"method","name":"same_context_in_with_options?","children":[],"call":["arg children [] == ","recv children [] ","recv children ","arg children [] ","arg children ","recv nil? ","arg nil? "]}," RuboCop Cop Rails InverseOf with_options_arguments":{"type":"method","name":"with_options_arguments","children":[],"call":["n send_node arguments ","n send_node ","blocks flat_map "," same_context_in_with_options? ","block arguments first ","block arguments ","block send_node command? ","block send_node ","node each_ancestor select ","node each_ancestor "]}," RuboCop Cop Rails InverseOf options_contain_inverse_of?":{"type":"method","name":"options_contain_inverse_of?","children":[],"call":[" inverse_of_option? ","options any? "]}," RuboCop Cop Rails InverseOf options_ignoring_inverse_of?":{"type":"method","name":"options_ignoring_inverse_of?","children":[],"call":[" polymorphic_option? "," through_option? ","options any? "]}," RuboCop Cop Rails InverseOf options_requiring_inverse_of?":{"type":"method","name":"options_requiring_inverse_of?","children":[],"call":[" as_option? ","options any? "," target_rails_version >= "," target_rails_version "," foreign_key_option? "," conditions_option? "]}," RuboCop Cop Rails InverseOf scope?":{"type":"method","name":"scope?","children":[],"call":["arguments any? "," ignore_scopes? ! "," ignore_scopes? "]}," RuboCop Cop Rails InverseOf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," options_contain_inverse_of? "," options_requiring_inverse_of? "," scope? "," options_ignoring_inverse_of? "," options_from_argument ","arguments concat flat_map ","arguments concat "," with_options_arguments "," association_recv_arguments ","node loc selector ","node loc ","  with_options_arguments _arguments "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption if_and_except?":{"type":"method","name":"if_and_except?","children":[],"call":["options key? "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption if_and_only?":{"type":"method","name":"if_and_only?","children":[],"call":["options key? "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption options_hash":{"type":"method","name":"options_hash","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :options) :pairs) :select)\n    (args\n      (arg :pair))\n    (send\n      (send\n        (lvar :pair) :key) :sym_type?)) :map) to_h ","pair key value ","pair key ","(send\n  (send\n    (lvar :options) :pairs) :select) map ","pair key sym_type? ","options pairs select ","options pairs ","(send\n  (send\n    (lvar :options) :pairs) :select) to_h "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","options [] "," if_and_except? "," if_and_only? "," options_hash ","options hash_type? "," filter_options "," remove_node_with_left_space_and_comma "," options_hash  [] "," filter_options  [] ","  options_hash _hash ","  filter_options _hash "," options_hash  hash_type? "," filter_options  hash_type? "," filter_ options_hash  "," filter_ filter_options  "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker permitted_symbol?":{"type":"method","name":"permitted_symbol?","children":[],"call":["PERMITTED_STATUS  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" node value "," node "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker number":{"type":"method","name":"number","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  [] "," symbol "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" number to_s "," number "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," symbol inspect "," symbol "," preferred_style "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" permitted_symbol? ! "," permitted_symbol? "," node int_type? ! "," node int_type? "," node "," number "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker custom_http_status_code?":{"type":"method","name":"custom_http_status_code?","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  value? ! "," Rack Utils SYMBOL_TO_STATUS_CODE  value? "," number "," node int_type? "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker number":{"type":"method","name":"number","children":[],"call":[" node children first "," node children "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  key "," number "," number to_i "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" symbol inspect "," symbol "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," number to_s "," number "," preferred_style "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" custom_http_status_code? ! "," custom_http_status_code? "," node sym_type? ! "," node sym_type? "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails HttpStatus checker_class":{"type":"method","name":"checker_class","children":[],"call":[" style "]}," RuboCop Cop Rails HttpStatus autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","checker preferred_style ","node loc expression ","node loc "," checker_class new "," checker_class "," lambda "," checker_class new  preferred_style ","  checker_class new _class new ","  checker_class new _class "]}," RuboCop Cop Rails HttpStatus on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","checker message ","checker node ","checker offensive? "," checker_class new "," checker_class "," status_code "," http_status ","corrector replace ","checker preferred_style ","checker node loc expression ","checker node loc ","hash_node_or_status_code hash_type? "," checker_class new  message "," checker_class new  node "," checker_class new  offensive? ","  checker_class new _class new ","  checker_class new _class ","  status_code _code "," http_ status_code  "," checker_class new  preferred_style "," checker_class new  node loc expression "," checker_class new  node loc ","hash_node_or_ status_code _code hash_type? "]}," RuboCop Cop Rails HttpPositionalArguments correction_template":{"type":"method","name":"correction_template","children":[],"call":[" parentheses? "]}," RuboCop Cop Rails HttpPositionalArguments correction":{"type":"method","name":"correction","children":[],"call":[" format ","node method_name "," correction_template "," convert_hash_data ","data last ","data size > ","data size ","data first ","http_path source ","node arguments "]}," RuboCop Cop Rails HttpPositionalArguments convert_hash_data":{"type":"method","name":"convert_hash_data","children":[],"call":[" format ","data source ","data pairs map join ","data pairs map ","data pairs ","data hash_type? ","data empty? "]}," RuboCop Cop Rails HttpPositionalArguments format_arg?":{"type":"method","name":"format_arg?","children":[],"call":["node value == ","node value ","node sym_type? "]}," RuboCop Cop Rails HttpPositionalArguments special_keyword_arg?":{"type":"method","name":"special_keyword_arg?","children":[],"call":["KEYWORD_ARGS  include? ","node value ","node sym_type? "]}," RuboCop Cop Rails HttpPositionalArguments needs_conversion?":{"type":"method","name":"needs_conversion?","children":[],"call":["data pairs one? ","data pairs "," format_arg? ","pair key "," special_keyword_arg? ","data each_pair none? ","data each_pair ","data hash_type? "," kwsplat_hash? "]}," RuboCop Cop Rails HttpPositionalArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correction ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Rails HttpPositionalArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name "," needs_conversion? "," http_request? ","corrector replace "," correction ","node loc expression ","node loc "," highlight_range "," in_routing_block? "," use_rack_test_methods? ","node loc selector "]}," RuboCop Cop Rails HelperInstanceVariable on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" add_offense ","node loc name ","node loc "," inherit_form_builder? ","node parent or_asgn_type? ","node parent "]}," RuboCop Cop Rails HelperInstanceVariable on_ivar":{"type":"method","name":"on_ivar","children":[],"call":[" add_offense "," inherit_form_builder? "]}," RuboCop Cop Rails HasManyOrHasOneDependent active_resource?":{"type":"method","name":"active_resource?","children":[],"call":[" active_resource_class? ","node nil? "]}," RuboCop Cop Rails HasManyOrHasOneDependent valid_options?":{"type":"method","name":"valid_options?","children":[],"call":[" present_option? "," dependent_option? ","options any? ","options first children first pairs ","options first children first ","options first children ","options first ","options first kwsplat_type? ","options nil? "," extract_option_if_kwsplat ","options first children first pairs  any? "," extract_option_if_kwsplat  any? ","options first children first pairs  first children first pairs "," extract_option_if_kwsplat  first children first pairs ","options first children first pairs  first children first "," extract_option_if_kwsplat  first children first ","options first children first pairs  first children "," extract_option_if_kwsplat  first children ","options first children first pairs  first "," extract_option_if_kwsplat  first ","options first children first pairs  first kwsplat_type? "," extract_option_if_kwsplat  first kwsplat_type? ","options first children first pairs  nil? "," extract_option_if_kwsplat  nil? "]}," RuboCop Cop Rails HasManyOrHasOneDependent contain_valid_options_in_with_options_block?":{"type":"method","name":"contain_valid_options_in_with_options_block?","children":[],"call":[" contain_valid_options_in_with_options_block? ","node parent parent ","node parent "," valid_options? "," with_options_block "," contain_valid_ with_options_block _in_with_ with_options_block _block? "," valid_ with_options_block ? "," with_ with_options_block _block "]}," RuboCop Cop Rails HasManyOrHasOneDependent valid_options_in_with_options_block?":{"type":"method","name":"valid_options_in_with_options_block?","children":[],"call":[" contain_valid_options_in_with_options_block? ","node parent ","node parent parent ","node parent begin_type? "," association_extension_block? "," conode parent tainode parent _valid_optionode parent s_inode parent _with_optionode parent s_block? "," conode parent parent tainode parent parent _valid_optionode parent parent s_inode parent parent _with_optionode parent parent s_block? ","node parent ode parenode parent t ","node parent parent ode parenode parent parent t ","node parent ode parenode parent t parenode parent t ","node parent parent ode parenode parent parent t parenode parent parent t ","node parent ode parenode parent t beginode parent _type? ","node parent parent ode parenode parent parent t beginode parent parent _type? "," associationode parent _extenode parent sionode parent _block? "," associationode parent parent _extenode parent parent sionode parent parent _block? "]}," RuboCop Cop Rails HasManyOrHasOneDependent on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," valid_options_in_with_options_block? "," valid_options? "," association_with_options? "," association_without_options? "," active_resource? ","node parent ","node loc selector ","node loc "," association_without_options? ! "," readonly_model? "]}," RuboCop Cop Rails HasAndBelongsToMany on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node command? ","node loc selector ","node loc "]}," RuboCop Cop Rails FindEach ignored_by_find_each?":{"type":"method","name":"ignored_by_find_each?","children":[],"call":["IGNORED_METHODS  include? "]}," RuboCop Cop Rails FindEach method_chain":{"type":"method","name":"method_chain","children":[],"call":["node each_node map ","node each_node "]}," RuboCop Cop Rails FindEach autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails FindEach on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," ignored_by_find_each? "," method_chain any? "," method_chain ","SCOPE_METHODS  include? ","node receiver method_name ","node receiver ","node method? ","corrector replace ","node loc selector ","node loc "," ignored? "," inherit_active_record_base? ! "," inherit_active_record_base? ","node receiver receiver nil? ","node receiver receiver "]}," RuboCop Cop Rails FindBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," range_between ","node loc selector end_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot ","node receiver loc selector ","node receiver loc ","node receiver ","node method? "]}," RuboCop Cop Rails FindBy on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name "," range_between ","node loc selector end_pos ","node loc selector ","node loc ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver "," where_first? "," autocorrect ","node method? "," ignore_where_first? "," where_method? "," offense_range ","node arguments empty? ","node arguments ","  range_between _between ","  offense_range _between "," offense_ range_between  "," offense_ offense_range  "]}," RuboCop Cop Rails FilePath message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Rails FilePath register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," source_range ","node first_line "," processed_source buffer "," processed_source ","node loc last_column ","node loc ","node loc column "," build_message ","node dstr_type? ","  source_range  "," build_ build_message  "]}," RuboCop Cop Rails FilePath string_with_slash?":{"type":"method","name":"string_with_slash?","children":[],"call":["node source =~ ","node source ","node str_type? ","node source include? ","node source match? "]}," RuboCop Cop Rails FilePath check_for_rails_root_join_with_slash_separated_path":{"type":"method","name":"check_for_rails_root_join_with_slash_separated_path","children":[],"call":[" register_offense "," string_with_slash? ","node arguments any? ","node arguments "," rails_root_join_nodes? "," rails_root_nodes? "," style == "," style "," autocorrect_rails_root_join_with_slash_separated_path "]}," RuboCop Cop Rails FilePath check_for_rails_root_join_with_string_arguments":{"type":"method","name":"check_for_rails_root_join_with_string_arguments","children":[],"call":[" register_offense ","node arguments all? ","node arguments ","node arguments size > ","node arguments size "," rails_root_join_nodes? "," rails_root_nodes? "," style == "," style "," autocorrect_rails_root_join_with_string_arguments "]}," RuboCop Cop Rails FilePath check_for_file_join_with_rails_root":{"type":"method","name":"check_for_file_join_with_rails_root","children":[],"call":[" register_offense "," rails_root_nodes? ","node arguments any? ","node arguments "," file_join_nodes? "," autocorrect_file_join "]}," RuboCop Cop Rails FilePath on_send":{"type":"method","name":"on_send","children":[],"call":[" check_for_rails_root_join_with_string_arguments "," check_for_rails_root_join_with_slash_separated_path "," check_for_file_join_with_rails_root "]}," RuboCop Cop Rails FilePath on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" register_offense ","node children last source include? ","node children last source ","node children last ","node children ","node children last source start_with? "," rails_root_nodes? ","node children last str_type? ","last_child_source start_with? ","last_child_source include? "," check_for_extension_after_rails_root_join_in_dstr "," check_for_slash_after_rails_root_in_dstr "," dstr_separated_by_colon? ","node children last source  start_with? ","node children last source  include? "]}," RuboCop Cop Rails Exit right_receiver?":{"type":"method","name":"right_receiver?","children":[],"call":["EXPLICIT_RECEIVERS  include? "]}," RuboCop Cop Rails Exit right_argument_count?":{"type":"method","name":"right_argument_count?","children":[],"call":["arg_nodes size <= ","arg_nodes size "]}," RuboCop Cop Rails Exit right_method_name?":{"type":"method","name":"right_method_name?","children":[],"call":["TARGET_METHODS  include? "]}," RuboCop Cop Rails Exit offending_node?":{"type":"method","name":"offending_node?","children":[],"call":[" right_receiver? ","node receiver "," right_argument_count? ","node arguments "," right_method_name? ","node method_name "]}," RuboCop Cop Rails Exit on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? ","node loc selector ","node loc "]}," RuboCop Cop Rails EnvironmentComparison replacement":{"type":"method","name":"replacement","children":[],"call":[" content ","node first_argument ","node receiver source ","node receiver "]}," RuboCop Cop Rails EnvironmentComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node source_range "," lambda "," build_predicate_method ","  build_predicate_method  "]}," RuboCop Cop Rails EnvironmentComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," environment_sym_comparison? "," format "," environment_str_comparison? "," autocorrect "," comparing_sym_env_with_rails_env_on_rhs? "," comparing_sym_env_with_rails_env_on_lhs? ","node source ","node method? "," comparing_str_env_with_rails_env_on_rhs? "," comparing_str_env_with_rails_env_on_lhs? "]}," RuboCop Cop Rails EnumUniqueness on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","item source "," consecutive_duplicates each "," consecutive_duplicates "," duplicates? ","args values "," enum_declaration "," enum_name "," enum_values ","pairs each "," enum? "]}," RuboCop Cop Rails DynamicFindBy static_method_name":{"type":"method","name":"static_method_name","children":[],"call":["match [] ","METHOD_PATTERN  match ","METHOD_PATTERN  match  [] ","METHOD_PATTERN  METHOD_PATTERN  match  "]}," RuboCop Cop Rails DynamicFindBy column_keywords":{"type":"method","name":"column_keywords","children":[],"call":["keyword_string split map ","keyword_string split ","method to_s [] ","method to_s ","method to_s []  split map ","method to_s []  split "]}," RuboCop Cop Rails DynamicFindBy whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails DynamicFindBy autocorrect_argument_keywords":{"type":"method","name":"autocorrect_argument_keywords","children":[],"call":["corrector insert_before ","node arguments [] loc expression ","node arguments [] loc ","node arguments [] ","node arguments ","keywords each with_index ","keywords each "]}," RuboCop Cop Rails DynamicFindBy autocorrect_method_name":{"type":"method","name":"autocorrect_method_name","children":[],"call":["corrector replace "," static_method_name ","node method_name to_s ","node method_name ","node loc selector ","node loc "]}," RuboCop Cop Rails DynamicFindBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_argument_keywords "," autocorrect_method_name "," lambda ","keywords size != ","node arguments size ","node arguments ","keywords size "," column_keywords ","node method_name "," autocorrect_argument_ column_keywords  "," column_keywords  size != "," column_keywords  size "," column_ column_keywords  "]}," RuboCop Cop Rails DynamicFindBy on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name "," static_method_name "," whitelist include? "," whitelist ","node method_name to_s "," autocorrect ","node arguments any? ","node arguments "," allowed_invocation? "," inherit_active_record_base? ! "," inherit_active_record_base? ","node receiver nil? ","node receiver ","IGNORED_ARGUMENT_TYPES  include? ","argument type "," dynamic_find_by_arguments? ","node node method_name to_s  ","node node method_name  "," static_node method_name to_s  "," static_node method_name  ","node node method_name to_s  to_s ","node node method_name  to_s "]}," RuboCop Cop Rails DelegateAllowBlank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","pair_node key source_range ","pair_node key "," lambda "]}," RuboCop Cop Rails DelegateAllowBlank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," allow_blank_option ","corrector replace ","offending_node key source_range ","offending_node key "," allow_blank_option  key source_range "," allow_blank_option  key "]}," RuboCop Cop Rails Delegate private_or_protected_inline":{"type":"method","name":"private_or_protected_inline","children":[],"call":[" processed_source [] strip =~ "," processed_source [] strip "," processed_source [] ","line - "," processed_source "," processed_source [] strip match? ","node first_line - ","node first_line "]}," RuboCop Cop Rails Delegate private_or_protected_before":{"type":"method","name":"private_or_protected_before","children":[],"call":["(send\n  (send\n    (send\n      (send nil :processed_source) :[]\n      (irange\n        (int 0)\n        (lvar :line))) :map\n    (block-pass\n      (sym :strip))) :&\n  (array\n    (str \"private\")\n    (str \"protected\"))) any? "," processed_source [] map & "," processed_source [] map "," processed_source [] "," processed_source "]}," RuboCop Cop Rails Delegate private_or_protected_delegation":{"type":"method","name":"private_or_protected_delegation","children":[],"call":[" private_or_protected_inline "," private_or_protected_before ","node first_line "," node_visibility != "," node_visibility "," private_or_protected_innode first_line  ","node first_node first_line  "]}," RuboCop Cop Rails Delegate prefixed_method_name":{"type":"method","name":"prefixed_method_name","children":[],"call":["(send\n  (send\n    (lvar :body) :receiver) :method_name) join to_sym ","(send\n  (send\n    (lvar :body) :receiver) :method_name) join ","body method_name ","body receiver method_name ","body receiver ","body receiver self_type? "]}," RuboCop Cop Rails Delegate include_prefix_case?":{"type":"method","name":"include_prefix_case?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails Delegate method_name_matches?":{"type":"method","name":"method_name_matches?","children":[],"call":["method_name == "," prefixed_method_name "," include_prefix_case? ","body method_name "]}," RuboCop Cop Rails Delegate arguments_match?":{"type":"method","name":"arguments_match?","children":[],"call":["arg children == ","argument children ","arg children ","argument lvar_type? ","arg arg_type? ","arg_array zip all? ","arg_array zip ","arg_array size != ","argument_array size ","arg_array size ","body arguments ","body arguments  size "]}," RuboCop Cop Rails Delegate trivial_delegate?":{"type":"method","name":"trivial_delegate?","children":[],"call":[" arguments_match? ","def_node body ","def_node arguments "," method_name_matches? ","def_node method_name "," delegate? "]}," RuboCop Cop Rails Delegate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","delegation join ","node source_range "," lambda ","delegation << ","node method_name == "," prefixed_method_name ","node body ","node method_name ","node body receiver method_name ","node body receiver ","node body method_name ","node method? "]}," RuboCop Cop Rails Delegate on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "," register_offense "]}," RuboCop Cop Rails Date good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails Date bad_methods":{"type":"method","name":"bad_methods","children":[],"call":[]}," RuboCop Cop Rails Date bad_days":{"type":"method","name":"bad_days","children":[],"call":["BAD_DAYS  - "," good_days "]}," RuboCop Cop Rails Date good_days":{"type":"method","name":"good_days","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails Date safe_to_time?":{"type":"method","name":"safe_to_time?","children":[],"call":["node arguments one? ","node arguments ","node receiver str_content match ","node receiver str_content ","node receiver ","node receiver str_type? ","node method? "]}," RuboCop Cop Rails Date safe_chain?":{"type":"method","name":"safe_chain?","children":[],"call":["(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ","chain & "," good_methods ","(send\n  (lvar :chain) :&\n  (send nil :bad_methods)) empty? "," bad_methods "," extract_method_chain ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? "," extract_method_chain  & ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_methods)) empty? "," extract_method_ extract_method_chain  "]}," RuboCop Cop Rails Date method_send?":{"type":"method","name":"method_send?","children":[],"call":["node parent receiver == ","node parent receiver ","node parent "]}," RuboCop Cop Rails Date extract_method_chain":{"type":"method","name":"extract_method_chain","children":[],"call":["(lvar :node) map ","node each_ancestor "]}," RuboCop Cop Rails Date check_date_node":{"type":"method","name":"check_date_node","children":[],"call":[" add_offense "," format ","method_name == ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) join ","chain & "," bad_days ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) empty? "," extract_method_chain ","node loc selector ","node loc ","corrector replace ","node receiver loc name ","node receiver loc ","node receiver ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) join  == ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_days)) join "," extract_method_chain  & ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_days)) empty? "," extract_method_ extract_method_chain  "]}," RuboCop Cop Rails Date check_deprecated_methods":{"type":"method","name":"check_deprecated_methods","children":[],"call":[" add_offense "," format ","node method_name == ","deprecated to_sym ","node method_name ","DEPRECATED_METHODS  each ","node loc selector ","node loc ","method [] ","node method? ","method [] to_sym ","corrector replace ","method [] to_s "]}," RuboCop Cop Rails Date on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name "," check_deprecated_methods "," safe_to_time? "," safe_chain? "," bad_methods include? "," bad_methods ","node receiver ","node loc selector ","node loc ","node method? "," allow_to_time? "]}," RuboCop Cop Rails Date on_const":{"type":"method","name":"on_const","children":[],"call":[" check_date_node ","node parent ","klass == "," method_send? ","mod cbase_type? ","mod nil? ","node children "]}," RuboCop Cop Rails CreateTableWithTimestamps time_columns_included?":{"type":"method","name":"time_columns_included?","children":[],"call":[" created_at_or_updated_at_included? "," timestamps_included? "]}," RuboCop Cop Rails CreateTableWithTimestamps on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," create_table_with_timestamps_proc? "," time_columns_included? ! "," time_columns_included? ","parent body ","parent body nil? "," create_table_with_block? ","node parent ","node command? "," use_id_false_option? ","node command? ! ","node parent  body ","node parent  body nil? ","node node parent  "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder offensive_nodes":{"type":"method","name":"offensive_nodes","children":[],"call":[" flush "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder flush":{"type":"method","name":"flush","children":[],"call":["@offensive_nodes << ","@nodes first ","@nodes size > ","@nodes size "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder process":{"type":"method","name":"process","children":[],"call":[" flush ","@nodes << ","node arguments [] value to_s == ","table_node value to_s ","table_node value ","node arguments [] value to_s ","node arguments [] value ","node arguments [] ","node arguments ","@nodes all? ","table_node is_a? ","new_node arguments [] ","new_node arguments ","new_node arguments []  value to_s ","new_node arguments []  value ","new_node arguments []  is_a? "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails BulkChangeTable add_offense_for_change_table":{"type":"method","name":"add_offense_for_change_table","children":[],"call":[" add_offense "]}," RuboCop Cop Rails BulkChangeTable add_offense_for_alter_methods":{"type":"method","name":"add_offense_for_alter_methods","children":[],"call":[" add_offense "," format ","table_node value ","table_node is_a? ","node arguments [] ","node arguments ","node arguments []  value ","node arguments []  is_a? "]}," RuboCop Cop Rails BulkChangeTable combinable_transformations":{"type":"method","name":"combinable_transformations","children":[],"call":["COMBINABLE_TRANSFORMATIONS  + "," database "]}," RuboCop Cop Rails BulkChangeTable combinable_alter_methods":{"type":"method","name":"combinable_alter_methods","children":[],"call":["COMBINABLE_ALTER_METHODS  + "," database "]}," RuboCop Cop Rails BulkChangeTable support_bulk_alter?":{"type":"method","name":"support_bulk_alter?","children":[],"call":[" target_rails_version >= "," target_rails_version "," database "]}," RuboCop Cop Rails BulkChangeTable database_yaml":{"type":"method","name":"database_yaml","children":[],"call":["config is_a? ","yaml [] ","yaml is_a? ","YAML  load_file ","File  exist? ","YAML  unsafe_load_file ","YAML  respond_to? ","yaml []  is_a? ","YAML  load_file  [] ","YAML  unsafe_load_file  [] ","YAML  load_file  is_a? ","YAML  unsafe_load_file  is_a? "]}," RuboCop Cop Rails BulkChangeTable database_from_yaml":{"type":"method","name":"database_from_yaml","children":[],"call":[" database_yaml [] "," database_yaml "," database_adapter "]}," RuboCop Cop Rails BulkChangeTable database":{"type":"method","name":"database","children":[],"call":[" database_from_yaml "," cop_config [] "," cop_config "," database_from_env "]}," RuboCop Cop Rails BulkChangeTable include_bulk_options?":{"type":"method","name":"include_bulk_options?","children":[],"call":["key value == ","key value ","key sym_type? ","options keys any? ","options keys ","options hash_type? ","node arguments [] ","node arguments ","node arguments []  keys any? ","node arguments []  keys ","node arguments []  hash_type? "]}," RuboCop Cop Rails BulkChangeTable on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense_for_change_table ","transformations size > ","transformations size "," combinable_transformations include? ","send_node method_name "," combinable_transformations ","send_nodes select ","node block_node body each_child_node to_a ","node block_node body each_child_node ","node block_node body ","node block_node "," include_bulk_options? ","node command? "," support_bulk_alter? "," count_transformations > "," count_transformations "," send_nodes_from_change_table_block ","node block_node body each_child_node to_a  select "," send_nodes_from_change_table_block  select "," node block_node body each_child_node to_a _from_change_table_block ","  send_nodes_from_change_table_block _from_change_table_block "]}," RuboCop Cop Rails BulkChangeTable on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense_for_alter_methods ","recorder offensive_nodes each ","recorder offensive_nodes ","recorder flush ","recorder process "," combinable_alter_methods include? ","send_node method_name "," combinable_alter_methods ","node body each_child_node ","node body ","AlterMethodsRecorder  new ","MIGRATION_METHODS  include? ","node method_name "," support_bulk_alter? "," call_to_combinable_alter_method? ","node body child_nodes each ","node body child_nodes ","AlterMethodsRecorder  new  offensive_nodes each ","AlterMethodsRecorder  new  offensive_nodes ","AlterMethodsRecorder  new  flush ","AlterMethodsRecorder  new  process "]}," RuboCop Cop Rails Blank replacement":{"type":"method","name":"replacement","children":[],"call":["node source ","node respond_to? "]}," RuboCop Cop Rails Blank unless_condition":{"type":"method","name":"unless_condition","children":[],"call":["node loc expression begin join ","method_call loc expression ","method_call loc ","node loc expression begin ","node loc expression ","node loc ","node loc keyword join ","node loc expression end ","node loc keyword ","node modifier_form? ","node source_range begin join ","method_call source_range ","node source_range begin ","node source_range ","node source_range end "]}," RuboCop Cop Rails Blank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node loc expression ","node loc "," not_present? "," nil_or_empty? ","method_call loc expression ","method_call loc ","node loc keyword "," unless_present? "," lambda ","node source_range ","method_call source_range ","node source_node loc expression  ","node source_method_call loc expression  ","node source_node source_range  ","node source_method_call source_range  ","method_call source_node loc expression  ","method_call source_method_call loc expression  ","method_call source_node source_range  ","method_call source_method_call source_range  "]}," RuboCop Cop Rails Blank on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","range source "," replacement "," unless_condition "," unless_present? "," config for_cop [] "," config for_cop "," config ","node else? ","node unless? "," cop_config [] "," cop_config "," autocorrect "," unless_condition  source "]}," RuboCop Cop Rails Blank on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense "," format ","node source "," replacement ","var1 == "," nil_or_empty? "," cop_config [] "," cop_config "," autocorrect "]}," RuboCop Cop Rails Blank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source "," replacement "," defining_blank? ","node parent "," not_present? "," cop_config [] "," cop_config "," autocorrect "]}," RuboCop Cop Rails BelongsTo autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","option_node loc expression ","option_node loc ","option_value false_type? ","option_value true_type? "," lambda "," match_belongs_to_with_options "]}," RuboCop Cop Rails BelongsTo on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","option_value false_type? ","option_value true_type? "," match_belongs_to_with_options ","corrector replace ","option_node loc expression ","option_node loc ","node loc selector ","node loc "]}," RuboCop Cop Rails AssertNot corrected_source":{"type":"method","name":"corrected_source","children":[],"call":["source gsub "]}," RuboCop Cop Rails AssertNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," corrected_source ","expression source "," lambda ","node loc expression ","node loc ","node loc expression  source ","node loc node loc expression  "]}," RuboCop Cop Rails AssertNot on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offensive? ","corrector replace "," corrected_source ","expression source ","node loc expression ","node loc ","node source_range ","node loc expression  source ","node source_range  source ","node loc node loc expression  ","node loc node source_range  "]}," RuboCop Cop Rails ApplicationRecord autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop Rails ApplicationJob autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop Rails ActiveSupportAliases register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","ALIASES  [] [] ","ALIASES  [] "]}," RuboCop Cop Rails ActiveSupportAliases autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","replacement to_s ","node loc selector ","node loc ","ALIASES  [] [] ","ALIASES  [] ","method_name to_sym ","node loc selector source "," lambda "," append ","ALIASES  [] []  to_s ","node loc selector source  to_sym "]}," RuboCop Cop Rails ActiveSupportAliases on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," public_send ","ALIASES  each_key ","corrector replace ","node loc selector ","node loc "," append "," add_offense "," format ","ALIASES  [] [] ","ALIASES  [] "]}," RuboCop Cop Rails ActiveRecordOverride find_parent_class_name":{"type":"method","name":"find_parent_class_name","children":[],"call":[" find_parent_class_name ","node parent ","parent_class_name source ","parent_class_name nil? ","node node_parts [] ","node node_parts ","node class_type? "," find_node node_parts []  ","node node_parts []  source ","node node_parts []  nil? "]}," RuboCop Cop Rails ActiveRecordOverride message":{"type":"method","name":"message","children":[],"call":[" format "," callback_names "]}," RuboCop Cop Rails ActiveRecordOverride callback_names":{"type":"method","name":"callback_names","children":[],"call":["names join ","names []= ","names last ","(str \"before_\") map "]}," RuboCop Cop Rails ActiveRecordOverride active_model?":{"type":"method","name":"active_model?","children":[],"call":["ACTIVE_RECORD_CLASSES  include? "]}," RuboCop Cop Rails ActiveRecordOverride on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," message ","node method_name ","node descendants any? ","node descendants "," active_model? "," find_parent_class_name ","BAD_METHODS  include? "," find_ find_parent_class_name  "]}," RuboCop Cop Rails ActiveRecordAliases autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","ALIASES  [] to_s ","ALIASES  [] ","node method_name ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails ActiveRecordAliases on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method? ","ALIASES  each ","corrector replace ","node loc selector ","node loc ","ALIASES  [] ","node method_name ","node arguments empty? ","node arguments ","node node method_name  "]}," RuboCop Cop Rails ActionFilter preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" good_methods [] "," bad_methods index ","method to_sym "," bad_methods "," good_methods "]}," RuboCop Cop Rails ActionFilter good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails ActionFilter bad_methods":{"type":"method","name":"bad_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails ActionFilter message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop Rails ActionFilter check_method_node":{"type":"method","name":"check_method_node","children":[],"call":[" add_offense "," bad_methods include? ","node method_name "," bad_methods ","corrector replace "," preferred_method ","node loc selector source ","node loc selector ","node loc "," format ","node node method_name  "]}," RuboCop Cop Rails ActionFilter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_method to_s "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails ActionFilter on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","node receiver "]}," RuboCop Cop Rails ActionFilter on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node ","node send_node "]}," RuboCop Cop TargetRailsVersion support_target_rails_version?":{"type":"method","name":"support_target_rails_version?","children":[],"call":["@minimum_target_rails_version <= "]}," RuboCop Cop TargetRailsVersion minimum_target_rails_version":{"type":"method","name":"minimum_target_rails_version","children":[],"call":[]}," RuboCop Rails Version document_version":{"type":"method","name":"document_version","children":[],"call":[]}," RuboCop Rails SchemaLoader parse":{"type":"method","name":"parse","children":[],"call":["parser parse ","buffer source= ","path read ","Parser Source Buffer  new ","klass new ","RuboCop AST Builder  new "," Parser  const_get ","target_ruby_version to_s sub ","target_ruby_version to_s ","klass new  parse ","Parser Source Buffer  new  source= "," Parser  const_get  new "]}," RuboCop Rails SchemaLoader load!":{"type":"method","name":"load!","children":[],"call":["Schema  new "," parse "," db_schema_path "," db_schema_ db_schema_path  "]}," RuboCop Rails SchemaLoader db_schema_path":{"type":"method","name":"db_schema_path","children":[],"call":["path join cleanpath ","path join ","schema_path exist? ","path root? ","Pathname  pwd ","path join cleanpath  join cleanpath join cleanpath  ","Pathname  pwd  join cleanPathname  pwd  ","path join cleanpath  join ","Pathname  pwd  join ","schema_path join cleanpath  exist? ","schema_Pathname  pwd  exist? ","path join  exist? ","path join cleanpath  root? ","Pathname  pwd  root? "]}," RuboCop Rails SchemaLoader reset!":{"type":"method","name":"reset!","children":[],"call":[" remove_instance_variable "," instance_variable_defined? "]}," RuboCop Rails SchemaLoader load":{"type":"method","name":"load","children":[],"call":[" load! "]}," RuboCop Rails SchemaLoader AddIndex initialize":{"type":"method","name":"initialize","children":[],"call":[" analyze_keywords! "," build_columns_or_expr ","node arguments [] ","node arguments ","node first_argument value ","node first_argument "]}," RuboCop Rails SchemaLoader Index analyze_keywords!":{"type":"method","name":"analyze_keywords!","children":[],"call":["v value ","k value ","pairs each_pair ","pairs hash_type? ","node arguments last ","node arguments ","node arguments last  each_pair ","node arguments last  hash_type? "]}," RuboCop Rails SchemaLoader Index build_columns_or_expr":{"type":"method","name":"build_columns_or_expr","children":[],"call":["columns value ","columns values map ","columns values ","columns array_type? ","arg value ","arg values map ","arg values ","arg array_type? ","node first_argument ","node first_argument  value ","node first_argument  values map ","node first_argument  values ","node first_argument  array_type? ","node first_node first_argument ument "]}," RuboCop Rails SchemaLoader Index initialize":{"type":"method","name":"initialize","children":[],"call":[" analyze_keywords! "," build_columns_or_expr ","node first_argument "]}," RuboCop Rails SchemaLoader Column analyze_keywords!":{"type":"method","name":"analyze_keywords!","children":[],"call":["v true_type? ! ","v true_type? ","k value == ","k value ","pairs each_pair ","pairs hash_type? ","node arguments last ","node arguments ","node arguments last  each_pair ","node arguments last  hash_type? "]}," RuboCop Rails SchemaLoader Column initialize":{"type":"method","name":"initialize","children":[],"call":[" analyze_keywords! ","node method_name ","node first_argument value ","node first_argument ","node first_argument str_content "]}," RuboCop Rails SchemaLoader Table each_content":{"type":"method","name":"each_content","children":[],"call":["node body ","node body children each ","node body children "," enum_for "," __method__ ","node body type "," block_given? "]}," RuboCop Rails SchemaLoader Table build_indices":{"type":"method","name":"build_indices","children":[],"call":["(send\n  (send nil :each_content\n    (lvar :node)) :map) compact ","Index  new ","child method? "," each_content map "," each_content "," each_content filter_map ","child send_type? "]}," RuboCop Rails SchemaLoader Table build_columns":{"type":"method","name":"build_columns","children":[],"call":["(send\n  (send nil :each_content\n    (lvar :node)) :map) compact ","Column  new ","child method? "," each_content map "," each_content "," each_content filter_map ","child send_type? "]}," RuboCop Rails SchemaLoader Table with_column?":{"type":"method","name":"with_column?","children":[],"call":["c name == ","c name ","@columns any? "]}," RuboCop Rails SchemaLoader Table initialize":{"type":"method","name":"initialize","children":[],"call":[" build_indices "," build_columns ","node send_node first_argument value ","node send_node first_argument ","node send_node "]}," RuboCop Rails SchemaLoader Schema each_add_index":{"type":"method","name":"each_add_index","children":[],"call":["node method? ! ","node method? ","(lvar :node) ! ","ast body children each ","ast body children ","ast body ","node respond_to? "]}," RuboCop Rails SchemaLoader Schema each_table":{"type":"method","name":"each_table","children":[],"call":["ast body ","node method? ","node block_type? ","ast body children each ","ast body children ","ast body type "]}," RuboCop Rails SchemaLoader Schema build!":{"type":"method","name":"build!","children":[],"call":["@add_indicies << ","AddIndex  new "," each_add_index ","@tables << ","Table  new "," each_table "," raise ","ast type ","ast block_type? ","table_def method? ","@add_indices << "]}," RuboCop Rails SchemaLoader Schema add_indicies_by":{"type":"method","name":"add_indicies_by","children":[],"call":["add_index table_name == ","add_index table_name "," add_indicies select "," add_indicies "]}," RuboCop Rails SchemaLoader Schema table_by":{"type":"method","name":"table_by","children":[],"call":["table name == ","table name "," tables find "," tables "]}," RuboCop Rails SchemaLoader Schema initialize":{"type":"method","name":"initialize","children":[],"call":[" build! "]}," RuboCop Cop Rails WhereNot build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["column split ","column include? "]}," RuboCop Cop Rails WhereNot extract_column_and_value":{"type":"method","name":"extract_column_and_value","children":[],"call":["Regexp  last_match ","pair value source ","pair value ","p key value to_sym == ","Regexp  last_match to_sym ","p key value to_sym ","p key value ","p key ","value_node pairs find ","value_node pairs ","value_node hash_type? ","value_node source ","template_node value "]}," RuboCop Cop Rails WhereNot offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails WhereNot on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," build_good_method "," extract_column_and_value "," offense_range ","value_node first "," where_method_call? "," build_ build_good_method  "," extract_ extract_column_and_value  "," offense_ offense_range  ","value_node first  first "]}," RuboCop Cop Rails WhereExists build_good_method_where":{"type":"method","name":"build_good_method_where","children":[],"call":["args [] source ","args [] ","args map join ","args map ","args size > ","args size "]}," RuboCop Cop Rails WhereExists build_good_method_exists":{"type":"method","name":"build_good_method_exists","children":[],"call":["args [] source ","args [] ","args map join ","args map ","args size > ","args size "]}," RuboCop Cop Rails WhereExists build_good_method":{"type":"method","name":"build_good_method","children":[],"call":[" build_good_method_where "," where_style? "," build_good_method_exists "," exists_style? ","args [] source ","args [] ","args map join ","args map ","args size > ","args size "]}," RuboCop Cop Rails WhereExists correction_range":{"type":"method","name":"correction_range","children":[],"call":["node loc selector with ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector "," where_style? ","node receiver loc selector join ","node receiver loc selector ","node receiver loc ","node receiver "," exists_style? ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails WhereExists convertable_args?":{"type":"method","name":"convertable_args?","children":[],"call":["args [] array_type? ","args [] ","args [] hash_type? ","args size > ","args size ","args empty? "]}," RuboCop Cop Rails WhereExists find_offenses":{"type":"method","name":"find_offenses","children":[],"call":[" exists_with_args? "," where_style? "," where_exists_call? "," exists_style? "]}," RuboCop Cop Rails WhereExists exists_style?":{"type":"method","name":"exists_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails WhereExists where_style?":{"type":"method","name":"where_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails WhereExists on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","range source "," build_good_method "," correction_range "," convertable_args? "," find_offenses "," where_exists_call? "," correction_range  source "," build_ build_good_method  "," correction_ correction_range  "]}," RuboCop Cop Rails WhereEquals build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["column split ","column include? "]}," RuboCop Cop Rails WhereEquals extract_column_and_value":{"type":"method","name":"extract_column_and_value","children":[],"call":["Regexp  last_match ","pair value source ","pair value ","p key value to_sym == ","Regexp  last_match to_sym ","p key value to_sym ","p key value ","p key ","value_node pairs find ","value_node pairs ","value_node source ","template_node value ","value_node hash_type? "]}," RuboCop Cop Rails WhereEquals offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails WhereEquals on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," build_good_method "," extract_column_and_value "," offense_range ","value_node first "," where_method_call? "," build_ build_good_method  "," extract_ extract_column_and_value  "," offense_ offense_range  ","value_node first  first "]}," RuboCop Cop Rails Validation frozen_array_argument?":{"type":"method","name":"frozen_array_argument?","children":[],"call":["argument method? ","argument send_type? "]}," RuboCop Cop Rails Validation validate_type":{"type":"method","name":"validate_type","children":[],"call":["node method_name to_s split [] ","node method_name to_s split ","node method_name to_s ","node method_name "]}," RuboCop Cop Rails Validation correct_validate_type_for_array":{"type":"method","name":"correct_validate_type_for_array","children":[],"call":["corrector replace "," validate_type ","attributes join ","loc expression ","attributes << ","child_node source ","arguments percent_literal? ","arguments each_child_node "]}," RuboCop Cop Rails Validation correct_validate_type_for_hash":{"type":"method","name":"correct_validate_type_for_hash","children":[],"call":["corrector replace "," braced_options "," validate_type ","arguments loc expression ","arguments loc "]}," RuboCop Cop Rails UnknownEnv unknown_env_predicate?":{"type":"method","name":"unknown_env_predicate?","children":[],"call":[" environments include? ! "," environments include? ","name [] "," environments ","name end_with? ","name to_s ","name to_s  [] ","name to_s  end_with? ","name to_s  to_s "]}," RuboCop Cop Rails UniqueValidationWithoutIndex array_node_to_array":{"type":"method","name":"array_node_to_array","children":[],"call":["elm value ","elm type ","node values map ","node values "]}," RuboCop Cop Rails UniqueValidationWithoutIndex condition_part?":{"type":"method","name":"condition_part?","children":[],"call":["key value == ","key value ","key sym_type? ","pair key ","pairs each_pair any? ","pairs each_pair ","pairs hash_type? ","node arguments last ","node arguments "," condition_hash_part? "," uniqueness_part ","uniqueness_node hash_type? ","node last_argument ","pair key  value == ","pair key  value ","pair key  sym_type? ","pair pair key  ","node arguments last  each_pair any? ","node last_argument  each_pair any? ","node arguments last  each_pair ","node last_argument  each_pair ","node arguments last  hash_type? ","node last_argument  hash_type? "," uniqueness_part  hash_type? "]}," RuboCop Cop Rails UniqueValidationWithoutIndex uniqueness_part":{"type":"method","name":"uniqueness_part","children":[],"call":["pair value ","pair key value == ","pair key value ","pair key ","pair key sym_type? ","pairs each_pair find ","pairs each_pair ","pairs hash_type? ","node arguments last ","node arguments ","node arguments last  each_pair find ","node arguments last  each_pair ","node arguments last  hash_type? "]}," RuboCop Cop Rails UniqueValidationWithoutIndex class_node":{"type":"method","name":"class_node","children":[],"call":["node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Rails UniqueValidationWithoutIndex unfreeze_scope":{"type":"method","name":"unfreeze_scope","children":[],"call":["scope children first ","scope children ","scope method? ","scope send_type? "]}," RuboCop Cop Rails UniqueValidationWithoutIndex find_scope":{"type":"method","name":"find_scope","children":[],"call":["pair value ","key value == ","key value ","key sym_type? ","pair key ","pairs each_pair find ","pairs each_pair ","pair key  value == ","pair key  value ","pair key  sym_type? ","pair pair key  "]}," RuboCop Cop Rails UniqueValidationWithoutIndex column_names_from_scope":{"type":"method","name":"column_names_from_scope","children":[],"call":[" array_node_to_array ","scope value ","scope type "," unfreeze_scope "," find_scope ","uniq hash_type? "," uniqueness_part ","uniqueness_part hash_type? "," unfreeze_scope  value "," find_scope  value "," unfreeze_scope  type "," find_scope  type "," unfreeze_ unfreeze_scope  "," unfreeze_ find_scope  "," find_ unfreeze_scope  "," find_ find_scope  "," uniqueness_part  hash_type? ","  uniqueness_part ueness_part "," uniqueness_part ueness_part hash_type? "]}," RuboCop Cop Rails UniqueValidationWithoutIndex column_names":{"type":"method","name":"column_names","children":[],"call":["ret to_set ","ret include? "," resolve_relation_into_column "," schema table_by "," table_name "," schema ","name to_s "," class_node ","ret map! ","ret concat "," column_names_from_scope ","arg value ","arg sym_type? ","arg str_type? ","node first_argument ","ret flat_map "," column_ column_names_from_scope  ","node first_argument  value ","node first_argument  sym_type? ","node first_argument  str_type? ","node first_node first_argument ument "]}," RuboCop Cop Rails UniqueValidationWithoutIndex include_column_names_in_expression_index?":{"type":"method","name":"include_column_names_in_expression_index?","children":[],"call":["expression_index include? ","column_names all? ","index expression ","index expression  include? "]}," RuboCop Cop Rails UniqueValidationWithoutIndex with_index?":{"type":"method","name":"with_index?","children":[],"call":[" include_column_names_in_expression_index? ","index columns to_set == ","index columns to_set ","index columns ","index unique ","(send\n  (send\n    (lvar :table) :indices) :+\n  (lvar :add_indicies)) any? ","table indices + ","table indices "," schema add_indicies_by "," table_name "," schema ","(send\n  (send\n    (lvar :table) :indices) :+\n  (lvar :add_indices)) any? "," schema add_indices_by ","table indices any? "," column_names "," schema table_by "," class_node "," include_column_ column_names _in_expression_index? ","(send\n  (send\n    (lvar :table) :indices) :+\n  (lvar : schema add_indicies_by )) any? ","(send\n  (send\n    (lvar : schema table_by ) :indices) :+\n  (lvar :add_indicies)) any? "," schema table_by  indices + "," schema table_by  indices "," schema  schema add_indicies_by _by ","  schema table_by _name ","(send\n  (send\n    (lvar :table) :indices) :+\n  (lvar : schema add_indices_by )) any? ","(send\n  (send\n    (lvar : schema table_by ) :indices) :+\n  (lvar :add_indices)) any? "," schema  schema add_indices_by _by "," schema table_by  indices any? "," column_ column_names  "," schema  schema table_by _by "]}," RuboCop Cop Rails UniqueValidationWithoutIndex find_schema_information":{"type":"method","name":"find_schema_information","children":[],"call":[" column_names "," schema table_by "," table_name "," schema "," class_node "," column_ column_names  "," schema  schema table_by _by ","  schema table_by _name "]}," RuboCop Cop Rails UniqueValidationWithoutIndex on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," with_index? "," find_schema_information "," schema "," condition_part? "," uniqueness_part "," uniqueness_part falsey_literal? ","uniqueness_part falsey_literal? ","node method? ","  uniqueness_part  ","  uniqueness_part  falsey_literal? "," uniqueness_part  falsey_literal? "]}," RuboCop Cop Rails TimeZoneAssignment on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," time_zone_assignement? "," time_zone_assignment? "]}," RuboCop Cop Rails TimeZone attach_timezone_specifier?":{"type":"method","name":"attach_timezone_specifier?","children":[],"call":["TIMEZONE_SPECIFIER  match? ","date value to_s [] ","date value to_s ","date value ","date respond_to? "]}," RuboCop Cop Rails TimeZone autocorrect_time_new":{"type":"method","name":"autocorrect_time_new","children":[],"call":["corrector replace ","node loc selector ","node loc ","node arguments? "]}," RuboCop Cop Rails SquishedSQLHeredocs message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Rails SquishedSQLHeredocs using_squish?":{"type":"method","name":"using_squish?","children":[],"call":["node parent "]}," RuboCop Cop Rails SquishedSQLHeredocs sql_heredoc?":{"type":"method","name":"sql_heredoc?","children":[],"call":[" delimiter_string == "," delimiter_string "]}," RuboCop Cop Rails SquishedSQLHeredocs offense_detected?":{"type":"method","name":"offense_detected?","children":[],"call":[" using_squish? ! "," using_squish? "," sql_heredoc? "," singleline_comments_present? ! "," singleline_comments_present? "]}," RuboCop Cop Rails SquishedSQLHeredocs on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":["corrector insert_after "," add_offense "," offense_detected? "]}," RuboCop Cop Rails SkipsModelValidations allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config [] "," cop_config "," warn "]}," RuboCop Cop Rails SkipsModelValidations forbidden_methods":{"type":"method","name":"forbidden_methods","children":[],"call":[" cop_config [] "," cop_config "," warn "]}," RuboCop Cop Rails SkipsModelValidations initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails ShortI18n on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","PREFERRED_METHODS  [] "," add_offense ","node loc selector ","node loc "," format "," long_i18n? ","node receiver ! ","node receiver "," style == "," style "]}," RuboCop Cop Rails SaveBang find_method_with_sibling_index":{"type":"method","name":"find_method_with_sibling_index","children":[],"call":[" find_method_with_sibling_index ","node parent "]}," RuboCop Cop Rails SaveBang checked_immediately?":{"type":"method","name":"checked_immediately?","children":[],"call":[" call_to_persisted? ","node parent "]}," RuboCop Cop Rails SaveBang operator_or_single_negative?":{"type":"method","name":"operator_or_single_negative?","children":[],"call":[" single_negative? ","node and_type? ","node or_type? "]}," RuboCop Cop Rails SaveBang in_condition_or_compound_boolean?":{"type":"method","name":"in_condition_or_compound_boolean?","children":[],"call":["node == ","parent condition "," conditional? "," operator_or_single_negative? ","node parent ","node block_node ","node parent  condition ","node node parent  "]}," RuboCop Cop Rails SaveBang check_used_in_condition_or_compound_boolean":{"type":"method","name":"check_used_in_condition_or_compound_boolean","children":[],"call":[" register_offense ","MODIFY_PERSIST_METHODS  include? ","node method_name "," in_condition_or_compound_boolean? "," add_offense_for_node "]}," RuboCop Cop Rails SaveBang register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense ","node loc selector ","node loc "," format ","node method_name "]}," RuboCop Cop Rails SaveBang joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Rails SafeNavigationWithBlank on_if":{"type":"method","name":"on_if","children":[],"call":["corrector replace "," safe_navigation_blank_in_conditional? location dot "," safe_navigation_blank_in_conditional? location "," safe_navigation_blank_in_conditional? "," add_offense "]}," RuboCop Cop Rails SafeNavigation autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Rails SafeNavigation RedundantSelf autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Rails ReversibleMigrationMethodDefinition on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," up_and_down_methods? "," change_method? "," migration_class? ! "," migration_class? "]}," RuboCop Cop Rails ReversibleMigration reversible_change_table_call?":{"type":"method","name":"reversible_change_table_call?","children":[],"call":[" all_hash_key? ","node arguments last ","node arguments ","node method_name "," target_rails_version >= "," target_rails_version "]}," RuboCop Cop Rails ReversibleMigration check_remove_index_node":{"type":"method","name":"check_remove_index_node","children":[],"call":[" add_offense "," format "," all_hash_key? ! "," all_hash_key? ","args hash_type? "," remove_index_call "]}," RuboCop Cop Rails ReversibleMigration check_remove_columns_node":{"type":"method","name":"check_remove_columns_node","children":[],"call":[" add_offense "," format "," target_rails_version >= "," target_rails_version "," all_hash_key? "," remove_columns_call "]}," RuboCop Cop Rails ReversibleMigration check_reversible_hash_node":{"type":"method","name":"check_reversible_hash_node","children":[],"call":[" add_offense "," format ","node method_name "," reversible_change_table_call? "]}," RuboCop Cop Rails RequireDependency on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," require_dependency_call? "]}," RuboCop Cop Rails RenderPlainText replacement":{"type":"method","name":"replacement","children":[],"call":["option_value source ","rest_options map join ","rest_options map ","rest_options any? "]}," RuboCop Cop Rails RenderPlainText compatible_content_type?":{"type":"method","name":"compatible_content_type?","children":[],"call":[" cop_config [] ! "," cop_config [] "," cop_config ","node ! ","node value value == ","node value value ","node value "]}," RuboCop Cop Rails RenderPlainText find_content_type":{"type":"method","name":"find_content_type","children":[],"call":["p key value to_sym == ","p key value to_sym ","p key value ","p key ","node pairs find ","node pairs "]}," RuboCop Cop Rails RenderPlainText on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," replacement ","options_node pairs - ","(lvar :option_node) compact ","options_node pairs "," add_offense "," compatible_content_type? "," find_content_type "," render_plain_text? "]}," RuboCop Cop Rails RenderInline on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," render_with_inline_option? "," includes_inline_key? "," render_with_options? "]}," RuboCop Cop Rails RelativeDateConstant relative_date_method?":{"type":"method","name":"relative_date_method?","children":[],"call":["RELATIVE_DATE_METHODS  include? "]}," RuboCop Cop Rails RelativeDateConstant offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","value loc expression end_pos ","value loc expression ","value loc ","name loc expression begin_pos ","name loc expression ","name loc ","value source_range end_pos ","value source_range ","name source_range begin_pos ","name source_range "]}," RuboCop Cop Rails RelativeDateConstant message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Rails RefuteMethods convert_good_method":{"type":"method","name":"convert_good_method","children":[],"call":["CORRECTIONS  invert fetch ","CORRECTIONS  invert ","CORRECTIONS  fetch "," style == "," style "]}," RuboCop Cop Rails RefuteMethods bad_method?":{"type":"method","name":"bad_method?","children":[],"call":["ASSERT_NOT_METHODS  include? ","REFUTE_METHODS  include? "," style == "," style "]}," RuboCop Cop Rails ReflectionClassName reflection_class_value?":{"type":"method","name":"reflection_class_value?","children":[],"call":["ALLOWED_REFLECTION_CLASS_TYPES  include? ! ","ALLOWED_REFLECTION_CLASS_TYPES  include? ","class_value type ","class_value receiver const_type? ","class_value receiver ","class_value method? ! ","class_value method? ","class_value send_type? "]}," RuboCop Cop Rails RedundantForeignKey find_as_option":{"type":"method","name":"find_as_option","children":[],"call":["pair key value == ","pair key value ","pair key ","pair key sym_type? ","options pairs find ","options pairs "]}," RuboCop Cop Rails RedundantForeignKey default_foreign_key":{"type":"method","name":"default_foreign_key","children":[],"call":["node parent_module_name "," find_as_option ","association_type == "," find_ find_as_option _option "," find_as_option sociation_type == "]}," RuboCop Cop Rails RedundantForeignKey redundant?":{"type":"method","name":"redundant?","children":[],"call":["foreign_key to_s == "," default_foreign_key ","foreign_key to_s "]}," RuboCop Cop Rails RedundantForeignKey on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","foreign_key_pair source_range "," add_offense ","foreign_key_pair loc expression ","foreign_key_pair loc "," redundant? "," association_with_foreign_key ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","foreign_key_pair source_ range_with_surrounding_comma  ","foreign_key_pair source_ range_with_surrounding_space  "]}," RuboCop Cop Rails RedundantAllowNil register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove ","allow_nil loc expression ","allow_nil loc "," range_between "," node_end "," node_beg "," next_sibling "," previous_sibling "," add_offense ","allow_nil right_sibling ","allow_nil left_sibling "]}," RuboCop Cop Rails RakeEnvironment with_hash_style_dependencies?":{"type":"method","name":"with_hash_style_dependencies?","children":[],"call":["deps values empty? ! ","deps values empty? ","deps values ","deps type ","hash_node pairs first ","hash_node pairs "]}," RuboCop Cop Rails RakeEnvironment with_dependencies?":{"type":"method","name":"with_dependencies?","children":[],"call":[" with_hash_style_dependencies? ","task_args hash_type? ","node arguments [] ","node arguments ","first_arg hash_type? ","node arguments []  hash_type? "]}," RuboCop Cop Rails RakeEnvironment task_name":{"type":"method","name":"task_name","children":[],"call":["key value to_sym ","key value ","key type ","pair children first ","pair children ","first_arg children first ","first_arg children ","first_arg children size != ","first_arg children size ","first_arg value to_sym ","first_arg value ","node arguments [] ","node arguments ","pair children first  value to_sym ","pair children first  value ","pair children first  type ","first_arg children first  children first ","first_arg children first  children ","node arguments []  children first ","node arguments []  children ","node arguments []  children size != ","node arguments []  children size ","node arguments []  value to_sym ","node arguments []  value "]}," RuboCop Cop Rails RakeEnvironment correct_task_dependency":{"type":"method","name":"correct_task_dependency","children":[],"call":["task_name source ","task_name source delete ","task_name sym_type? ","task_name source delete + "]}," RuboCop Cop Rails RakeEnvironment on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace ","task_name loc expression ","task_name loc "," correct_task_dependency ","task_method arguments [] ","task_method arguments "," add_offense "," with_dependencies? "," task_name == "," task_name "," task_definition? ","task_method first_argument "," task_arguments "," correct_task_arguments_dependency "," with_arguments? ","task_method arguments []  loc expression ","task_method first_argument  loc expression ","task_method arguments []  loc ","task_method first_argument  loc "," correct_ correct_task_dependency  "," task_method arguments []  == "," task_method first_argument  == "," task_method arguments []  "," task_method first_argument  "]}," RuboCop Cop Rails Presence build_source_for_or_method":{"type":"method","name":"build_source_for_or_method","children":[],"call":["other arguments map join ","other arguments map ","other arguments "," range_between source "," range_between ","other first_argument source_range begin_pos - ","other first_argument source_range begin_pos ","other first_argument source_range ","other first_argument ","other source_range begin_pos ","other source_range ","other source ","other arguments? ! ","other arguments? ","other method? ","other parenthesized? "," method_range source "," method_range ","other arithmetic_operation? ","other other arguments map join  map join ","other other arguments map join  map ","other other arguments map join  ","other other arguments map join ? ! ","other other arguments map join ? ","other  range_between source ? ","other  method_range source ? ","  range_between source _range source ","  method_range source _range source ","  range_between source _range ","  method_range source _range "]}," RuboCop Cop Rails Presence register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," replacement ","node source_range "," add_offense "," message ","node left_sibling "]}," RuboCop Cop Rails PluckInWhere root_receiver":{"type":"method","name":"root_receiver","children":[],"call":[" root_receiver ","node receiver "," root_node receiver  ","node node receiver  "]}," RuboCop Cop Rails PluckInWhere on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense ","node loc selector ","node loc ","(send nil :root_receiver\n  (lvar :node)) ! "," root_receiver "," style == "," style "," in_where? ","node method? "]}," RuboCop Cop Rails PluckId offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails PluckId on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," offense_range "," add_offense "," format ","range source "," in_where? "," pluck_id_call? ! "," pluck_id_call? "," offense_ offense_range  "," offense_range  source "]}," RuboCop Cop Rails Pluck message":{"type":"method","name":"message","children":[],"call":[" format "," offense_range source "," offense_range "]}," RuboCop Cop Rails Pluck offense_range":{"type":"method","name":"offense_range","children":[],"call":["node send_node loc selector join ","node loc end ","node loc ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop Rails Pluck on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace "," offense_range "," add_offense "," message ","argument == "," pluck_candidate? ","element == ","argument children first source to_sym == ","argument children first source to_sym ","argument children first source ","argument children first ","argument children ","node block_type? ","key source "," use_block_argument_in_key? "," register_offense "," use_one_block_argument? "," use_one_block_argument? ! ","key regexp_type? ","  message  "," use_argument children first source _in_key? "," use_one_argument children first source ? "," use_one_argument children first source ? ! "]}," RuboCop Cop Rails Pick message":{"type":"method","name":"message","children":[],"call":[" format ","receiver arguments map join ","receiver arguments map ","receiver arguments ","node receiver arguments map join ","node receiver arguments map ","node receiver arguments ","node receiver "]}," RuboCop Cop Rails Pick on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","corrector remove ","receiver source_range end join ","receiver source_range end ","receiver source_range "," add_offense "," message ","receiver_selector join ","node loc selector ","node loc ","receiver loc selector ","receiver loc ","node receiver "," pick_candidate? ","node receiver loc selector join ","node receiver loc selector ","node receiver loc ","receiver source_receiver_selector join  end join ","receiver source_node receiver loc selector join  end join ","node receiver  source_range end join ","receiver source_receiver_selector join  end ","receiver source_node receiver loc selector join  end ","node receiver  source_range end ","receiver source_receiver_selector join  ","receiver source_node receiver loc selector join  ","node receiver  source_range ","receiver loc selector  join ","node receiver _selector join ","node receiver  loc selector ","node receiver  loc ","node node receiver  ","node node receiver  loc selector join ","node node receiver  loc selector ","node node receiver  loc "]}," RuboCop Cop Rails OrderById offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","node loc selector begin_pos ","node loc selector ","node loc "]}," RuboCop Cop Rails OrderById on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense_range "," order_by_id? ","node method? "]}," RuboCop Cop Rails NegateInclude on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","obj source ","receiver source "," add_offense "," negate_include_call? "]}," RuboCop Cop Rails MatchRoute http_method_and_options":{"type":"method","name":"http_method_and_options","children":[],"call":["node pairs - ","node pairs "," extract_via first "," extract_via "," via_pair ","  via_pair  "]}," RuboCop Cop Rails MatchRoute replacement":{"type":"method","name":"replacement","children":[],"call":["path_node source ","options map join ","options map ","options any? "," http_method_and_options ","options_node nil? ","path_node hash_type? "]}," RuboCop Cop Rails MatchRoute http_method?":{"type":"method","name":"http_method?","children":[],"call":["HTTP_METHODS  include? ","method to_sym "]}," RuboCop Cop Rails MatchRoute via_pair":{"type":"method","name":"via_pair","children":[],"call":["p key value == ","p key value ","p key ","node pairs find ","node pairs "]}," RuboCop Cop Rails MatchRoute extract_via":{"type":"method","name":"extract_via","children":[],"call":["via values map ","via values ","via array_type? ","via value ","via basic_literal? "," via_pair ","  via_pair  "]}," RuboCop Cop Rails MatchRoute within_routes?":{"type":"method","name":"within_routes?","children":[],"call":[" routes_draw? ","a send_node ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails MatchRoute register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," replacement ","options_node first "," match_method_call? "," add_offense "," format ","options_node first  first "]}," RuboCop Cop Rails MatchRoute on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","via first "," http_method? ","via size == ","via size "," extract_via ","options_node nil? ","options_node first ","path_node hash_type? "," within_routes? "," match_method_call? "," add_offense "," format "," extract_via  first "," extract_via  size == "," extract_via  size "," extract_ extract_via  ","options_node first  nil? ","options_node first  first "]}," RuboCop Cop Rails MailerName mailer_suffix?":{"type":"method","name":"mailer_suffix?","children":[],"call":["mailer_name to_s end_with? ","mailer_name to_s "]}," RuboCop Cop Rails MailerName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","node children last ","node children ","node loc name ","node loc ","node children [] ","node casgn_type? "," lambda ","node loc node children last  ","node loc node children []  "]}," RuboCop Cop Rails MailerName on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense ","casgn_parent loc name ","casgn_parent loc "," mailer_suffix? ","casgn_parent children [] ","casgn_parent children ","node each_ancestor first ","node each_ancestor "," class_new_definition? ","casgn_parent loc casgn_parent children []  ","node each_ancestor first  loc name ","node each_ancestor first  loc ","node each_ancestor first  children [] ","node each_ancestor first  children "]}," RuboCop Cop Rails MailerName on_class":{"type":"method","name":"on_class","children":[],"call":[" autocorrect "," add_offense "," class_definition? "]}," RuboCop Cop Rails Inquiry on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector ","node loc ","receiver array_type? ! ","receiver array_type? ","receiver str_type? ! ","receiver str_type? ","node receiver ","node arguments empty? ","node arguments ","node method? ","node receiver  array_type? ! ","node receiver  array_type? ","node receiver  str_type? ! ","node receiver  str_type? ","node node receiver  "]}," RuboCop Cop Rails IndexWith new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[]}," RuboCop Cop Rails IndexBy new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[]}," RuboCop Cop Rails HttpPositionalArguments highlight_range":{"type":"method","name":"highlight_range","children":[],"call":[" range_between ","data last source_range end_pos ","data last source_range ","data last ","data first source_range begin_pos ","data first source_range ","data first ","node arguments "]}," RuboCop Cop Rails HelperInstanceVariable inherit_form_builder?":{"type":"method","name":"inherit_form_builder?","children":[],"call":[" form_builder_class? ","class_node parent_class ","node each_ancestor "]}," RuboCop Cop Rails HasManyOrHasOneDependent readonly_model?":{"type":"method","name":"readonly_model?","children":[],"call":[" readonly? ","parent each_descendant any? ","parent each_descendant ","node parent ","node parent  each_descendant any? ","node parent  each_descendant ","node node parent  "]}," RuboCop Cop Rails FindEach ignored?":{"type":"method","name":"ignored?","children":[],"call":["(send\n  (send\n    (send\n      (send nil :cop_config) :[]\n      (str \"IgnoredMethods\")) :map\n    (block-pass\n      (sym :to_sym))) :&\n  (lvar :method_chain)) any? "," cop_config [] map & "," cop_config [] map "," cop_config [] "," cop_config ","node each_node map ","node each_node "," active_model_error_where? ","node receiver "," matches_allowed_pattern? "," allowed_method? ","method_chain any? "," cop_config [] include? ","(send\n  (send\n    (send\n      (send nil :cop_config) :[]\n      (str \"IgnoredMethods\")) :map\n    (block-pass\n      (sym :to_sym))) :&\n  (lvar :node each_node map )) any? ","node each_node map  any? "]}," RuboCop Cop Rails FindById build_find_by_bad_method":{"type":"method","name":"build_find_by_bad_method","children":[],"call":["id_value source ","node method_name "]}," RuboCop Cop Rails FindById build_where_take_bad_method":{"type":"method","name":"build_where_take_bad_method","children":[],"call":["id_value source "]}," RuboCop Cop Rails FindById build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["id_value source "]}," RuboCop Cop Rails FindById find_by_offense_range":{"type":"method","name":"find_by_offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails FindById where_take_offense_range":{"type":"method","name":"where_take_offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","where loc selector begin_pos ","where loc selector ","where loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails FindById register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," format "," build_good_method "," build_ build_good_method  "]}," RuboCop Cop Rails FindById on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," build_find_by_bad_method "," find_by_offense_range "," find_by? "," build_where_take_bad_method "," where_take_offense_range "," where_take? "," add_offense "," format "," build_good_method "," build_find_by_ build_find_by_bad_method  "," build_find_by_ build_where_take_bad_method  "," find_by_offense_ find_by_offense_range  "," find_by_offense_ where_take_offense_range  "," build_where_take_ build_find_by_bad_method  "," build_where_take_ build_where_take_bad_method  "," where_take_offense_ find_by_offense_range  "," where_take_offense_ where_take_offense_range  "," build_ build_good_method  "]}," RuboCop Cop Rails EnvironmentVariableAccess allow_writes?":{"type":"method","name":"allow_writes?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Rails EnvironmentVariableAccess allow_reads?":{"type":"method","name":"allow_reads?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Rails EnvironmentVariableAccess on_const":{"type":"method","name":"on_const","children":[],"call":[" add_offense "," allow_writes? ! "," allow_writes? "," env_write? "," allow_reads? ! "," allow_reads? "," env_read? "]}," RuboCop Cop Rails EnvironmentComparison build_predicate_method_for_rails_env_on_rhs":{"type":"method","name":"build_predicate_method_for_rails_env_on_rhs","children":[],"call":[" content ","node receiver ","node first_argument source ","node first_argument ","node method? "]}," RuboCop Cop Rails EnvironmentComparison build_predicate_method_for_rails_env_on_lhs":{"type":"method","name":"build_predicate_method_for_rails_env_on_lhs","children":[],"call":[" content ","node first_argument ","node receiver source ","node receiver ","node method? "]}," RuboCop Cop Rails EnvironmentComparison rails_env_on_lhs?":{"type":"method","name":"rails_env_on_lhs?","children":[],"call":[" comparing_sym_env_with_rails_env_on_lhs? "," comparing_str_env_with_rails_env_on_lhs? "]}," RuboCop Cop Rails EnvironmentComparison build_predicate_method":{"type":"method","name":"build_predicate_method","children":[],"call":[" build_predicate_method_for_rails_env_on_rhs "," build_predicate_method_for_rails_env_on_lhs "," rails_env_on_lhs? "]}," RuboCop Cop Rails EnumUniqueness enum_name":{"type":"method","name":"enum_name","children":[],"call":["key source ","key value ","key type "]}," RuboCop Cop Rails EnumHash source":{"type":"method","name":"source","children":[],"call":["elem source ","elem value inspect ","elem value ","elem value dump ","elem type "]}," RuboCop Cop Rails EnumHash enum_name":{"type":"method","name":"enum_name","children":[],"call":["key source ","key value ","key type "]}," RuboCop Cop Rails EnumHash on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","array loc expression ","array loc ","(send\n  (send\n    (send\n      (lvar :array) :children) :each_with_index) :map) join "," source ","array children each_with_index map ","array children each_with_index ","array children "," add_offense "," format "," enum_name "," array_pair? ","pairs each "," enum? "]}," RuboCop Cop Rails DynamicFindBy whitelisted?":{"type":"method","name":"whitelisted?","children":[],"call":["whitelist_config include? ","node method_name to_s ","node method_name "," cop_config [] "," cop_config "," cop_config []  include? "]}," RuboCop Cop Rails DynamicFindBy allowed_receiver?":{"type":"method","name":"allowed_receiver?","children":[],"call":[" cop_config [] include? ","node receiver source ","node receiver "," cop_config [] "," cop_config "]}," RuboCop Cop Rails DynamicFindBy allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":[" cop_config [] include? ","node method_name to_s ","node method_name "," cop_config [] "," cop_config "]}," RuboCop Cop Rails DynamicFindBy allowed_invocation?":{"type":"method","name":"allowed_invocation?","children":[],"call":[" whitelisted? "," allowed_receiver? "," allowed_method? "]}," RuboCop Cop Rails Delegate register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","delegation join ","node source_range ","delegation << ","node method? "," prefixed_method_name ","node body ","node body receiver method_name ","node body receiver ","node body method_name "," add_offense ","node loc keyword ","node loc ","body method_name ","body receiver method_name ","body receiver ","body receiver self_type? ","node node body  ","node node body  receiver method_name ","node node body  receiver ","node node body  method_name ","node body  method_name ","node body  receiver method_name ","node body  receiver ","node body  receiver self_type? "]}," RuboCop Cop Rails DefaultScope on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" add_offense ","default_scope loc name ","default_scope loc "," eigenclass_method_definition? "]}," RuboCop Cop Rails DefaultScope on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offense ","node loc name ","node loc "," class_method_definition? "]}," RuboCop Cop Rails DefaultScope on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector ","node loc "," method_call? "]}," RuboCop Cop Rails ContentTag correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails ContentTag method_name?":{"type":"method","name":"method_name?","children":[],"call":["(str \"^[a-zA-Z_][a-zA-Z_\\\\-0-9]*$\") match? ","node value ","node sym_type? ","node str_type? ","(str \"^[a-zA-Z_][a-zA-Z_0-9]*$\") match? "]}," RuboCop Cop Rails ContentTag autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc ","rest_args map join ","rest_args map ","node first_argument value to_s underscore ","node first_argument value to_s ","node first_argument value ","node first_argument ","node arguments drop ","node arguments "," correction_range "," method_name? "," remove_first_argument "," replace_method_with_tag_method "," lambda ","node arguments drop  map join ","node arguments drop  map "," correction_ correction_range  "]}," RuboCop Cop Rails ContentTag allowed_argument?":{"type":"method","name":"allowed_argument?","children":[],"call":["argument splat_type? ","argument const_type? ","argument send_type? ","argument variable? "," allowed_name? ","argument respond_to? ! ","argument respond_to? "]}," RuboCop Cop Rails ContentTag corrected_ancestor?":{"type":"method","name":"corrected_ancestor?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails ContentTag on_send":{"type":"method","name":"on_send","children":[],"call":["@corrected_nodes add ","Set  new compare_by_identity ","Set  new "," autocorrect "," add_offense "," corrected_ancestor? "," allowed_argument? ","first_argument ! ","node first_argument "," format ","first_argument source ","node first_argument value to_s underscore ","node first_argument value to_s ","node first_argument value "," register_offense ","node arguments count >= ","node arguments count ","node arguments ","node receiver nil? ","node receiver ","first_argument const_type? ","first_argument send_type? ","first_argument variable? ","node method? ","node first_argument  ! ","node node first_argument  ","node first_argument  source ","node node first_argument  value to_s underscore ","node node first_argument  value to_s ","node node first_argument  value ","node first_argument  const_type? ","node first_argument  send_type? ","node first_argument  variable? "]}," RuboCop Cop Rails ContentTag on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Rails BulkChangeTable call_to_combinable_alter_method?":{"type":"method","name":"call_to_combinable_alter_method?","children":[],"call":[" combinable_alter_methods include? ","child_node method_name "," combinable_alter_methods ","child_node send_type? "]}," RuboCop Cop Rails AttributeDefaultBlockValue on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","expression source "," default_attribute children last "," default_attribute children "," default_attribute "," add_offense ","TYPE_OFFENDERS  any? ","value type ","attribute children last ","attribute children ","value type == "," default_attribute children last  source ","attribute children last  type ","attribute children last  type == "]}," RuboCop Cop Rails ArelStar on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","star loc expression ","star loc "," add_offense "," star_bracket? "," star_bracket?  loc expression "," star_bracket?  loc ","  star_bracket? _bracket? "]}," RuboCop Cop Rails AfterCommitOverride named_callback?":{"type":"method","name":"named_callback?","children":[],"call":["name sym_type? ","node first_argument ","node first_argument  sym_type? "]}," RuboCop Cop Rails AfterCommitOverride after_commit_callback?":{"type":"method","name":"after_commit_callback?","children":[],"call":["AFTER_COMMIT_CALLBACKS  include? ","node method_name "]}," RuboCop Cop Rails AfterCommitOverride class_send_nodes":{"type":"method","name":"class_send_nodes","children":[],"call":["class_def each_child_node to_a ","class_def each_child_node ","class_def send_type? ","class_node body ","class_node body  each_child_node to_a ","class_node body  each_child_node ","class_node body  send_type? "]}," RuboCop Cop Rails AfterCommitOverride each_after_commit_callback":{"type":"method","name":"each_after_commit_callback","children":[],"call":[" named_callback? "," after_commit_callback? "," class_send_nodes each "," class_send_nodes "]}," RuboCop Cop Rails AfterCommitOverride on_class":{"type":"method","name":"on_class","children":[],"call":["seen_callback_names []= "," add_offense "," format ","seen_callback_names key? ","node arguments [] value ","node arguments [] ","node arguments "," each_after_commit_callback ","seen_node arguments [] value s []= ","seen_node arguments [] value s key? "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder buffer":{"type":"method","name":"buffer","children":[],"call":[" processed_source buffer "," processed_source "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder start_line_position":{"type":"method","name":"start_line_position","children":[],"call":[" buffer line_range begin_pos - "," buffer line_range begin_pos "," buffer line_range ","node loc line ","node loc "," buffer "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder inline_comment?":{"type":"method","name":"inline_comment?","children":[],"call":[" comment_line? ! "," comment_line? ","comment loc expression source_line ","comment loc expression ","comment loc "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder begin_pos_with_comment":{"type":"method","name":"begin_pos_with_comment","children":[],"call":[" start_line_position "," inline_comment? ! "," inline_comment? ","comment location line == ","comment location line ","comment location "," processed_source comments_before_line reverse_each "," processed_source comments_before_line "," processed_source ","node first_line - ","node first_line "," processed_source each_comment_in_lines reverse_each "," processed_source each_comment_in_lines "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder end_position_for":{"type":"method","name":"end_position_for","children":[],"call":[" buffer line_range end_pos "," buffer line_range "," buffer "," buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder source_range_with_comment":{"type":"method","name":"source_range_with_comment","children":[],"call":["Parser Source Range  new "," buffer "," end_position_for "," begin_pos_with_comment ","  end_position_for ition_for ","  begin_pos_with_comment _with_comment "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder siblings_of":{"type":"method","name":"siblings_of","children":[],"call":["node parent children ","node parent "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder left_siblings_of":{"type":"method","name":"left_siblings_of","children":[],"call":[" siblings_of [] ","node sibling_index "," siblings_of "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder callback?":{"type":"method","name":"callback?","children":[],"call":["CALLBACKS_ORDER_MAP  key? ","node method_name ","node send_type? "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder defined_callbacks":{"type":"method","name":"defined_callbacks","children":[],"call":[" callback? ","class_def each_child_node select ","class_def each_child_node ","class_node body ","class_node body  each_child_node select ","class_node body  each_child_node "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","corrector insert_before ","current_range source "," source_range_with_comment "," callback? "," left_siblings_of reverse_each find "," left_siblings_of reverse_each "," left_siblings_of ","node left_siblings reverse_each find ","node left_siblings reverse_each ","node left_siblings "," lambda "," left_siblings_of find "," source_range_with_comment  source "]}," RuboCop Cop Rails ActiveRecordCallbacksOrder on_class":{"type":"method","name":"on_class","children":[],"call":[" autocorrect "," add_offense "," format ","index < ","CALLBACKS_ORDER_MAP  [] ","node method_name "," defined_callbacks each "," defined_callbacks ","CALLBACKS_ORDER_MAP  []  < "," defined_node method_name s each "," defined_node method_name s "]}," RuboCop Cop IndexMethod set_new_body_expression":{"type":"method","name":"set_new_body_expression","children":[],"call":["corrector replace ","transforming_body_expr loc expression source ","transforming_body_expr loc expression ","transforming_body_expr loc "," block_node body loc expression "," block_node body loc "," block_node body "," block_node ","transforming_body_expr source "]}," RuboCop Cop IndexMethod set_new_arg_name":{"type":"method","name":"set_new_arg_name","children":[],"call":["corrector replace "," block_node arguments loc expression "," block_node arguments loc "," block_node arguments "," block_node "]}," RuboCop Cop IndexMethod set_new_method_name":{"type":"method","name":"set_new_method_name","children":[],"call":["corrector replace ","range begin join ","range begin "," block_node send_node loc end "," block_node send_node loc "," block_node send_node "," block_node "," block_node send_node loc selector ","range begin join  begin join "," block_node send_node loc selector  begin join ","range begin join  begin "," block_node send_node loc selector  begin "]}," RuboCop Cop IndexMethod strip_prefix_and_suffix":{"type":"method","name":"strip_prefix_and_suffix","children":[],"call":["corrector remove_trailing "," trailing ","corrector remove_leading "," leading ","node loc expression ","node loc ","node source_range ","node loc node loc expression  ","node loc node source_range  "]}," RuboCop Cop IndexMethod from_hash_brackets_map":{"type":"method","name":"from_hash_brackets_map","children":[],"call":[]}," RuboCop Cop IndexMethod from_map_to_h":{"type":"method","name":"from_map_to_h","children":[],"call":[]}," RuboCop Cop IndexMethod from_to_h":{"type":"method","name":"from_to_h","children":[],"call":[]}," RuboCop Cop IndexMethod from_each_with_object":{"type":"method","name":"from_each_with_object","children":[],"call":[]}," RuboCop Cop IndexMethod noop_transformation?":{"type":"method","name":"noop_transformation?","children":[],"call":[" transforming_body_expr children == "," transformed_argname "," transforming_body_expr children "," transforming_body_expr "," transforming_body_expr lvar_type? "]}," RuboCop Cop IndexMethod execute_correction":{"type":"method","name":"execute_correction","children":[],"call":["correction set_new_body_expression ","captures transforming_body_expr ","correction set_new_arg_name ","captures transformed_argname "," extract_captures ","correction match ","correction set_new_method_name "," new_method_name ","correction strip_prefix_and_suffix "," extract_captures  transforming_body_expr "," extract_captures  transformed_argname "," extract_ extract_captures  "]}," RuboCop Cop IndexMethod prepare_correction":{"type":"method","name":"prepare_correction","children":[],"call":[" raise ","Autocorrection  from_hash_brackets_map "," on_bad_hash_brackets_map ","Autocorrection  from_map_to_h "," on_bad_map_to_h ","Autocorrection  from_to_h "," on_bad_to_h ","Autocorrection  from_each_with_object "," on_bad_each_with_object "]}," RuboCop Cop IndexMethod new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[" raise "]}," RuboCop Cop IndexMethod extract_captures":{"type":"method","name":"extract_captures","children":[],"call":["Captures  new "]}," RuboCop Cop IndexMethod handle_possible_offense":{"type":"method","name":"handle_possible_offense","children":[],"call":[" execute_correction "," prepare_correction "," add_offense "," new_method_name ","captures noop_transformation? "," extract_captures "," execute_ prepare_correction  "," prepare_ prepare_correction  "," extract_captures  noop_transformation? "," extract_ extract_captures  "]}," RuboCop Cop IndexMethod on_bad_hash_brackets_map":{"type":"method","name":"on_bad_hash_brackets_map","children":[],"call":[" raise "]}," RuboCop Cop IndexMethod on_bad_map_to_h":{"type":"method","name":"on_bad_map_to_h","children":[],"call":[" raise "]}," RuboCop Cop IndexMethod on_bad_to_h":{"type":"method","name":"on_bad_to_h","children":[],"call":[" raise "]}," RuboCop Cop IndexMethod on_bad_each_with_object":{"type":"method","name":"on_bad_each_with_object","children":[],"call":[" raise "]}," RuboCop Cop IndexMethod on_csend":{"type":"method","name":"on_csend","children":[],"call":[" handle_possible_offense "," on_bad_map_to_h "]}," RuboCop Cop IndexMethod on_send":{"type":"method","name":"on_send","children":[],"call":[" handle_possible_offense "," on_bad_hash_brackets_map "," on_bad_map_to_h "]}," RuboCop Cop IndexMethod on_block":{"type":"method","name":"on_block","children":[],"call":[" handle_possible_offense "," on_bad_to_h "," target_ruby_version < "," target_ruby_version "," on_bad_each_with_object "]}," RuboCop Cop EnforceSuperclass register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," class ","offense_node source_range "," add_offense "]}," RuboCop Cop EnforceSuperclass on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","node children last ","node children "," class_new_definition "]}," RuboCop Cop EnforceSuperclass on_class":{"type":"method","name":"on_class","children":[],"call":[" register_offense ","node children [] ","node children "," class_definition "]}," RuboCop Cop EnforceSuperclass included":{"type":"method","name":"included","children":[],"call":[]}," RuboCop Cop ActiveRecordHelper in_where?":{"type":"method","name":"in_where?","children":[],"call":["WHERE_METHODS  include? ","send_node method_name ","node each_ancestor first ","node each_ancestor ","node each_ancestor first  method_name "]}," RuboCop Cop ActiveRecordHelper foreign_key_of":{"type":"method","name":"foreign_key_of","children":[],"call":["pair value value to_s ","pair value value ","pair value ","pair value str_type? ","pair value sym_type? ","pair key value == ","pair key value ","pair key ","pair key sym_type? ","options each_pair find ","options each_pair ","options hash_type? ","belongs_to last_argument ","belongs_to last_argument  each_pair find ","belongs_to last_argument  each_pair ","belongs_to last_argument  hash_type? "]}," RuboCop Cop ActiveRecordHelper resolve_relation_into_column":{"type":"method","name":"resolve_relation_into_column","children":[],"call":["table with_column? "," foreign_key_of ","belongs_to first_argument value to_s == ","belongs_to first_argument value to_s ","belongs_to first_argument value ","belongs_to first_argument "," find_belongs_to "," polymorphic? "]}," RuboCop Cop ActiveRecordHelper table_name":{"type":"method","name":"table_name","children":[],"call":["(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :namespaces))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :namespaces))) :reverse) :map) join ","node children [] ","node children ","(splat\n  (lvar :class_nodes)) reverse map ","(splat\n  (lvar :class_nodes)) reverse ","class_node each_ancestor map ","class_node each_ancestor ","class_node defined_module each_node ","class_node defined_module ","table_name value to_s ","table_name value "," find_set_table_name to_a last "," find_set_table_name to_a "," find_set_table_name ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :namespaces))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :namespaces))) :reverse) :map) join ","klass identifier children [] ","klass identifier children ","klass identifier ","(lvar :class_node) reverse map ","(lvar :class_node) reverse ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :class_node each_ancestor map ))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :class_node each_ancestor ))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_node defined_module each_node ))\n      (splat\n        (lvar :namespaces))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :class_node each_ancestor map ))) :reverse) :map) join ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_nodes))\n      (splat\n        (lvar :class_node each_ancestor ))) :reverse) :map) join ","(send\n  (send\n    (array\n      (splat\n        (lvar :class_node defined_module each_node ))\n      (splat\n        (lvar :namespaces))) :reverse) :map) join ","(splat\n  (lvar :class_node defined_module each_node )) reverse map ","(splat\n  (lvar :class_node defined_module each_node )) reverse ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :class_node each_ancestor map ))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :class_node each_ancestor ))) :reverse) :map) join tableize ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :class_node each_ancestor map ))) :reverse) :map) join ","(send\n  (send\n    (array\n      (lvar :class_node)\n      (splat\n        (lvar :class_node each_ancestor ))) :reverse) :map) join "]}," RuboCop Cop ActiveRecordHelper schema":{"type":"method","name":"schema","children":[],"call":["RuboCop Rails SchemaLoader  load "," target_ruby_version "]}," RuboCop Cop ActiveRecordHelper external_dependency_checksum":{"type":"method","name":"external_dependency_checksum","children":[],"call":["Digest SHA1  hexdigest ","File  read ","schema_path nil? ","RuboCop Rails SchemaLoader  db_schema_path ","RuboCop Rails SchemaLoader  db_schema_path  nil? ","RuboCop Rails SchemaLoader  db_RuboCop Rails SchemaLoader  db_schema_path  "]}," RuboCop Cop ActiveRecordHelper inherit_active_record_base?":{"type":"method","name":"inherit_active_record_base?","children":[],"call":[" active_record? ","class_node parent_class ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails UnusedIgnoredColumns table":{"type":"method","name":"table","children":[],"call":[" schema table_by "," table_name "," schema "," class_node "]}," RuboCop Cop Rails UnusedIgnoredColumns class_node":{"type":"method","name":"class_node","children":[],"call":["node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Rails UnusedIgnoredColumns check_column_existence":{"type":"method","name":"check_column_existence","children":[],"call":[" add_offense "," format ","table with_column? ","column_name to_s "," column_name "," column_name  to_s ","  column_name  "]}," RuboCop Cop Rails UnusedIgnoredColumns on_send":{"type":"method","name":"on_send","children":[],"call":[" check_column_existence ","columns children each ","columns children "," table "," schema "," ignored_columns "," appended_ignored_columns "," ignored_columns  children each "," ignored_columns  children ","  table  "," ignored_ ignored_columns  "," appended_ignored_ ignored_columns  "]}," RuboCop Cop Rails RelativeDateConstant nested_relative_date":{"type":"method","name":"nested_relative_date","children":[],"call":[" relative_date "," nested_relative_date ","node each_child_node ","node block_type? ","node nil? "]}," RuboCop Cop Rails I18nLocaleAssignment on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," i18n_locale_assignment? "]}," RuboCop Cop Rails FindBy ignore_where_first?":{"type":"method","name":"ignore_where_first?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Rails ExpandedDateRange use_mapped_methods?":{"type":"method","name":"use_mapped_methods?","children":[],"call":["MAPPED_DATE_RANGE_METHODS  [] == ","MAPPED_DATE_RANGE_METHODS  [] "]}," RuboCop Cop Rails ExpandedDateRange same_receiver?":{"type":"method","name":"same_receiver?","children":[],"call":["begin_node receiver source == ","end_node receiver source ","end_node receiver ","begin_node receiver source ","begin_node receiver "]}," RuboCop Cop Rails ExpandedDateRange on_irange":{"type":"method","name":"on_irange","children":[],"call":["corrector replace "," add_offense "," format ","PREFERRED_METHODS  [] ","begin_node receiver source ","begin_node receiver "," use_mapped_methods? ","end_node method_name ","begin_node method_name "," same_receiver? ","node end ","node begin "," expanded_date_range "," register_offense "," any_arguments? ","preferred_method << ","begin_node first_argument source ","begin_node first_argument "," same_argument? ","begin_node arguments one? ","begin_node arguments ","begin_node method? "," preferred_method "," allow? ","node begin  receiver source ","node begin  receiver ","node end  method_name ","node begin  method_name "," preferred_method  << ","node begin  first_argument source ","node begin  first_argument ","node begin  arguments one? ","node begin  arguments ","node begin  method? ","  preferred_method  "]}," RuboCop Cop Rails EagerEvaluationLogMessage replacement_source":{"type":"method","name":"replacement_source","children":[],"call":["arguments source ","node parenthesized_call? "]}," RuboCop Cop Rails EagerEvaluationLogMessage replacement_range":{"type":"method","name":"replacement_range","children":[],"call":["stop with ","start begin_pos + ","start begin_pos ","node parenthesized_call? ","node loc selector end ","node loc selector ","node loc ","node loc expression end ","node loc expression ","node source_range end ","node source_range ","node loc expression end  with ","node source_range end  with ","node loc selector end  begin_pos + ","node loc selector end  begin_pos "]}," RuboCop Cop Rails EagerEvaluationLogMessage on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," replacement_source "," replacement_range "," format "," interpolated_string_passed_to_debug ","node parent ","  replacement_source _source ","  replacement_source _range "," replacement_ replacement_range  "]}," RuboCop Cop Rails Date allow_to_time?":{"type":"method","name":"allow_to_time?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Rails AddColumnIndex index_range":{"type":"method","name":"index_range","children":[],"call":[" range_with_surrounding_comma "," range_with_surrounding_space ","pair_node loc expression ","pair_node loc ","pair_node source_range "]}," RuboCop Cop Rails AddColumnIndex on_send":{"type":"method","name":"on_send","children":[],"call":["corrector insert_after ","value loc expression adjust source strip ","value loc expression adjust source ","value loc expression adjust ","value loc expression ","value loc ","value hash_type? ","column source ","table source ","corrector remove "," index_range "," add_offense "," add_column_with_index ","value source_range adjust source strip ","value source_range adjust source ","value source_range adjust ","value source_range ","value value loc expression adjust source strip _type? ","value value source_range adjust source strip _type? "]}," RuboCop Cop Rails FindBy where_method?":{"type":"method","name":"where_method?","children":[],"call":["receiver method? ","receiver respond_to? "]}," RuboCop Cop Rails FindBy offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc selector end_pos ","node loc selector ","node loc ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver "]}," RuboCop Cop ActiveRecordHelper polymorphic?":{"type":"method","name":"polymorphic?","children":[],"call":["pair value true_type? ","pair value ","pair key value == ","pair key value ","pair key ","pair key sym_type? ","options each_pair any? ","options each_pair ","options hash_type? ","belongs_to last_argument ","belongs_to last_argument  each_pair any? ","belongs_to last_argument  each_pair ","belongs_to last_argument  hash_type? "]}," RuboCop Cop Rails RedundantTravelBack on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," range_by_whole_lines ","node source_range "," add_offense ","ancestor method? ","ancestor def_type? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails Output offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc selector ","node loc "," range_between ","node loc selector end_pos ","node loc expression begin_pos ","node loc expression ","node receiver ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Rails LexicallyScopedActionFilter aliased_action_methods":{"type":"method","name":"aliased_action_methods","children":[],"call":["aliased_method << ","hash_of_alias_methods [] ","defined_methods each_with_object ","result []= ","alias_method first_argument value ","alias_method first_argument ","alias_method last_argument value ","alias_method last_argument ","alias_methods each_with_object ","send_node method? ","node each_child_node select ","node each_child_node ","alias_methods [] "," alias_methods ","hash_of_ alias_methods  [] "," alias_methods  each_with_object "," alias_methods  [] ","  alias_methods  "]}," RuboCop Cop Rails LexicallyScopedActionFilter defined_action_methods":{"type":"method","name":"defined_action_methods","children":[],"call":["defined_methods + "," aliased_action_methods ","block each_child_node map ","block each_child_node ","block each_child_node map  + "]}," RuboCop Cop Rails HttpPositionalArguments in_routing_block?":{"type":"method","name":"in_routing_block?","children":[],"call":["(send\n  (send\n    (lvar :node) :each_ancestor\n    (sym :block)) :detect) ! ! ","(send\n  (send\n    (lvar :node) :each_ancestor\n    (sym :block)) :detect) ! ","ROUTING_METHODS  include? ","block send_node method_name ","block send_node ","node each_ancestor detect ","node each_ancestor ","block method_name "]}," RuboCop Cop Rails ContentTag allowed_name?":{"type":"method","name":"allowed_name?","children":[],"call":["(str \"^[a-zA-Z\\\\-][a-zA-Z\\\\-0-9]*$\") match? ! ","(str \"^[a-zA-Z\\\\-][a-zA-Z\\\\-0-9]*$\") match? ","argument value ","argument sym_type? ","argument str_type? ","(str \"^[a-zA-Z-][a-zA-Z\\\\-0-9]*$\") match? ! ","(str \"^[a-zA-Z-][a-zA-Z\\\\-0-9]*$\") match? "]}," RuboCop Cop Rails FindEach active_model_error?":{"type":"method","name":"active_model_error?","children":[],"call":["node method? ","node send_type? ","node nil? "]}," RuboCop Cop Rails FindEach active_model_error_where?":{"type":"method","name":"active_model_error_where?","children":[],"call":[" active_model_error? ","node receiver ","node method? "]}," RuboCop Cop Rails ContentTag register_offense":{"type":"method","name":"register_offense","children":[],"call":["@corrected_nodes add ","Set  new compare_by_identity ","Set  new "," autocorrect "," add_offense "]}," RuboCop Cop Rails SchemaComment create_table_column_call_without_comment?":{"type":"method","name":"create_table_column_call_without_comment?","children":[],"call":[" t_column_with_comment? ! "," t_column_with_comment? ","node parent body ","node parent "," t_column? "," create_table_with_block? "]}," RuboCop Cop Rails SchemaComment create_table_without_comment?":{"type":"method","name":"create_table_without_comment?","children":[],"call":[" create_table_with_comment? ! "," create_table_with_comment? "," create_table? "]}," RuboCop Cop Rails SchemaComment add_column_without_comment?":{"type":"method","name":"add_column_without_comment?","children":[],"call":[" add_column_with_comment? ! "," add_column_with_comment? "," add_column? "]}," RuboCop Cop Rails SchemaComment on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node parent body ","node parent "," create_table_column_call_without_comment? "," create_table_without_comment? "," create_table? "," add_column_without_comment? "," check_column_within_create_table_block "," create_table_with_block? "]}," RuboCop Cop Rails RootJoinChain evidence":{"type":"method","name":"evidence","children":[],"call":[" rails_root? ","node receiver ","args + "," join? ","node parent ","node receiver  receiver "," join?  + ","node receiver  parent "]}," RuboCop Cop Rails RootJoinChain on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","args map join ","args map "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","rails_node loc selector end_pos ","rails_node loc selector ","rails_node loc "," add_offense "," format ","rails_node source "," evidence ","node source_range end_pos ","node source_range ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo remove_presence_validation":{"type":"method","name":"remove_presence_validation","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","presence source_range "," range_by_whole_lines ","node source_range ","options children one? ","options children ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","presence source_ range_with_surrounding_comma  ","  range_with_surrounding_comma _by_whole_lines ","node source_ range_with_surrounding_comma  "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo belongs_to_for":{"type":"method","name":"belongs_to_for","children":[],"call":[" any_belongs_to? "," belongs_to? ","key to_s delete_suffix to_sym ","key to_s delete_suffix ","key to_s ","key to_s end_with? "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo on_send":{"type":"method","name":"on_send","children":[],"call":[" remove_presence_validation "," add_offense "," format ","key to_s "," optional? "," belongs_to_for ","node parent "," presence_validation? "," add_offense_and_correct ","keys none? "," non_optional_belongs_to ","  belongs_to_for _for "," non_optional_belongs_to  none? "," non_optional_ belongs_to_for  "]}," RuboCop Cop Rails DurationArithmetic corrected_source":{"type":"method","name":"corrected_source","children":[],"call":["duration source ","operator == "]}," RuboCop Cop Rails DurationArithmetic on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," corrected_source ","node source_range "," add_offense "," duration_arithmetic_argument? "]}," RuboCop Cop Rails CompactBlank preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["node method? "]}," RuboCop Cop Rails CompactBlank offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc selector begin_pos ","node loc selector ","node loc ","node loc expression end_pos ","node loc expression ","node parent loc expression end_pos ","node parent loc expression ","node parent loc ","node parent ","(send\n  (lvar :node) :parent) == ","node source_range end_pos ","node source_range ","node parent source_range end_pos ","node parent source_range ","node loc expression node loc expression end_pos  ","node loc expression node parent loc expression end_pos  ","node loc expression node source_range end_pos  ","node loc expression node parent source_range end_pos  ","node parent loc expression node loc expression end_pos  ","node parent loc expression node parent loc expression end_pos  ","node parent loc expression node source_range end_pos  ","node parent loc expression node parent source_range end_pos  ","node source_range node loc expression end_pos  ","node source_range node parent loc expression end_pos  ","node source_range node source_range end_pos  ","node source_range node parent source_range end_pos  ","node parent source_range node loc expression end_pos  ","node parent source_range node parent loc expression end_pos  ","node parent source_range node source_range end_pos  ","node parent source_range node parent source_range end_pos  "]}," RuboCop Cop Rails CompactBlank use_hash_value_block_argument?":{"type":"method","name":"use_hash_value_block_argument?","children":[],"call":["arguments [] source == ","receiver_in_block source ","arguments [] source ","arguments [] ","arguments length == ","arguments length "]}," RuboCop Cop Rails CompactBlank bad_method?":{"type":"method","name":"bad_method?","children":[],"call":[" use_hash_value_block_argument? ","arguments length == ","arguments length "," reject_with_block? ","node parent "," reject_with_block_pass? "," use_single_value_block_argument? "]}," RuboCop Cop Rails CompactBlank on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," preferred_method "," offense_range "," bad_method? ","  preferred_method  "," offense_ offense_range  "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo validation_range":{"type":"method","name":"validation_range","children":[],"call":[" range_by_whole_lines ","node source_range "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo extract_validation_for_keys":{"type":"method","name":"extract_validation_for_keys","children":[],"call":["corrector insert_after "," validation_range "," remove_keys_from_validation ","(lvar :indentation) join ","options_without_presence map join ","options_without_presence map ","keys map join ","keys map ","pair key value == ","pair key value ","pair key ","options children reject ","options children ","  * ","node source_range column ","node source_range ","(lvar :  * ) join ","node (lvar :indentation) join _range column ","node (lvar :indentation) join _range "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo remove_presence_option":{"type":"method","name":"remove_presence_option","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","presence source_range ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","presence source_ range_with_surrounding_comma  "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo remove_keys_from_validation":{"type":"method","name":"remove_keys_from_validation","children":[],"call":["corrector remove "," range_with_surrounding_space "," range_with_surrounding_comma ","key_node source_range ","arg value == ","arg value ","node arguments find ","node arguments ","keys each "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo remove_validation":{"type":"method","name":"remove_validation","children":[],"call":["corrector remove "," validation_range "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo non_optional_belongs_to":{"type":"method","name":"non_optional_belongs_to","children":[],"call":[" optional? ! "," optional? "," belongs_to_for ","keys select ","  belongs_to_for _for "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo message_for":{"type":"method","name":"message_for","children":[],"call":[" format ","(send\n  (lvar :keys) :map) join ","keys map "]}," RuboCop Cop Rails RedundantPresenceValidationOnBelongsTo add_offense_and_correct":{"type":"method","name":"add_offense_and_correct","children":[],"call":[" extract_validation_for_keys "," remove_presence_option ","keys == "," remove_keys_from_validation "," remove_validation ","options children one? ","options children "," add_offense "," message_for "]}," RuboCop Cop Rails ReadWriteAttribute within_shadowing_method?":{"type":"method","name":"within_shadowing_method?","children":[],"call":["enclosing_method method_name to_s == ","enclosing_method method_name to_s ","enclosing_method method_name ","shadowing_method_name << ","node method? ","node first_argument value to_s ","node first_argument value ","node first_argument ","node each_ancestor any? ","node each_ancestor ","enclosing_method method? ","first_arg value to_s ","first_arg value ","node each_ancestor first ","first_arg respond_to? ","node each_ancestor first  method_name to_s == ","node each_ancestor first  method_name to_s ","node each_ancestor first  method_name ","node first_argument value to_s  << ","first_arg value to_s  << ","node node first_argument ument value to_s ","node node first_argument ument value ","node node first_argument ument ","node each_ancestor first  method? ","node first_argument  value to_s ","node first_argument  value ","node first_argument  respond_to? "]}," RuboCop Cop Rails ReadWriteAttribute node_replacement":{"type":"method","name":"node_replacement","children":[],"call":[" write_attribute_replacement "," read_attribute_replacement ","node method_name "]}," RuboCop Cop Rails ReadWriteAttribute multi_line_message":{"type":"method","name":"multi_line_message","children":[],"call":[" format ","node method? "]}," RuboCop Cop Rails ReadWriteAttribute single_line_message":{"type":"method","name":"single_line_message","children":[],"call":[" format "," node_replacement "]}," RuboCop Cop Rails ReadWriteAttribute build_message":{"type":"method","name":"build_message","children":[],"call":[" multi_line_message "," single_line_message ","node single_line? "]}," RuboCop Cop Rails InverseOf ignore_scopes?":{"type":"method","name":"ignore_scopes?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Rails CompactBlank use_single_value_block_argument?":{"type":"method","name":"use_single_value_block_argument?","children":[],"call":["arguments [] source == ","receiver_in_block source ","arguments [] source ","arguments [] ","arguments length == ","arguments length "]}," RuboCop Cop MigrationsHelper in_migration?":{"type":"method","name":"in_migration?","children":[],"call":[" migration_class? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails TransactionExitStatement on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","statement_node method_name ","statement_node break_type? ","statement_node return_type? "," exit_statements each "," exit_statements ","parent body ","node parent "," statement "," nested_block? "," in_rescue? ","parent block_type? ","node parent body "," in_transaction_block? "," statement _node method_name "," statement _node break_type? "," statement _node return_type? "," exit_ statement s each "," exit_ statement s ","node parent  body ","node node parent  ","  statement  ","node parent  block_type? ","node node parent  body "]}," RuboCop Cop Rails TableNameAssignment on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," find_set_table_name each "," find_set_table_name "," base_class? "]}," RuboCop Cop Rails MigrationClassName to_snakecase":{"type":"method","name":"to_snakecase","children":[],"call":["word gsub gsub tr downcase ","word gsub gsub tr ","word gsub gsub ","word gsub "]}," RuboCop Cop Rails MigrationClassName to_camelcase":{"type":"method","name":"to_camelcase","children":[],"call":["word split map join ","word split map ","word split "]}," RuboCop Cop Rails MigrationClassName basename_without_timestamp":{"type":"method","name":"basename_without_timestamp","children":[],"call":["basename sub ","File  basename "," processed_source file_path "," processed_source ","File  basename  sub ","File  File  basename  "]}," RuboCop Cop Rails MigrationClassName on_class":{"type":"method","name":"on_class","children":[],"call":["corrector replace ","node identifier "," add_offense "," format "," to_camelcase "," basename_without_timestamp ","snake_class_name == "," to_snakecase ","node identifier source "," basename_without_timestamp_and_suffix "," in_migration? ","class_identifier source casecmp zero? ","class_identifier source casecmp ","class_identifier source "," camelize "," processed_source file_path "," processed_source "," migration_class? ","node identifier location name ","node identifier location ","  basename_without_timestamp_and_suffix _without_timestamp "," to_snakecase  == ","  basename_without_timestamp_and_suffix _without_timestamp_and_suffix ","node identifier  source casecmp zero? ","node identifier location name  source casecmp zero? ","node identifier  source casecmp ","node identifier location name  source casecmp ","node identifier  source ","node identifier location name  source "]}," RuboCop Cop Rails I18nLocaleTexts on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," mail_subject to_a last "," mail_subject to_a "," mail_subject "," flash_assignment? "," redirect_to_flash to_a last "," redirect_to_flash to_a "," redirect_to_flash "," validation_message ","node method_name "]}," RuboCop Cop Rails I18nLazyLookup controller_path":{"type":"method","name":"controller_path","children":[],"call":["path delete_suffix underscore ","path delete_suffix ","module_name == ","controller identifier source ","controller identifier ","controller parent_module_name ","controller parent_module_name  == ","controller parent_controller parent_module_name  "]}," RuboCop Cop Rails I18nLazyLookup get_scoped_key":{"type":"method","name":"get_scoped_key","children":[],"call":["key_node value to_s split last ","key_node value to_s split ","key_node value to_s ","key_node value ","action method_name "," controller_path tr "," controller_path ","key_node value to_s split last _node value to_s split last ","key_node value to_s split last _node value to_s split ","key_node value to_s split last _node value to_s ","key_node value to_s split last _node value "," controller_ controller_path tr  tr "," controller_ controller_path tr  "]}," RuboCop Cop Rails I18nLazyLookup controller_and_action":{"type":"method","name":"controller_and_action","children":[],"call":["controller_node identifier source end_with? ","controller_node identifier source ","controller_node identifier ","node each_ancestor first ","node each_ancestor "," node_visibility == "," node_visibility ","node each_ancestor first  identifier source end_with? ","node each_ancestor first  identifier source ","node each_ancestor first  identifier "]}," RuboCop Cop Rails I18nLazyLookup on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","key_node value to_s split last ","key_node value to_s split ","key_node value to_s ","key_node value "," add_offense ","key == "," get_scoped_key "," controller_and_action ","key to_s start_with? ","key to_s "," translate_call? "," handle_explicit_style "," handle_lazy_style "," style ","key_node value _node value to_s split last ","key_node value _node value to_s split ","key_node value _node value to_s ","key_node value _node value ","key_node value  == "," get_ get_scoped_key  "," get_scoped_key_node value  ","key_node value  to_s start_with? ","key_node value  to_s "]}," RuboCop Cop Rails DuplicateScope offenses":{"type":"method","name":"offenses","children":[],"call":["(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :class_send_nodes\n            (lvar :class_node)) :select)\n        (args\n          (arg :node))\n        (send nil :scope\n          (lvar :node))) :group_by)\n    (args\n      (arg :node))\n    (send nil :scope\n      (lvar :node))) :select) values flatten ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :class_send_nodes\n            (lvar :class_node)) :select)\n        (args\n          (arg :node))\n        (send nil :scope\n          (lvar :node))) :group_by)\n    (args\n      (arg :node))\n    (send nil :scope\n      (lvar :node))) :select) values ","nodes length > ","nodes length ","(send\n  (block\n    (send\n      (send nil :class_send_nodes\n        (lvar :class_node)) :select)\n    (args\n      (arg :node))\n    (send nil :scope\n      (lvar :node))) :group_by) select "," scope ","(send\n  (send nil :class_send_nodes\n    (lvar :class_node)) :select) group_by "," class_send_nodes select "," class_send_nodes "]}," RuboCop Cop Rails DuplicateScope on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," offenses each "," offenses "]}," RuboCop Cop Rails DuplicateAssociation offenses":{"type":"method","name":"offenses","children":[],"call":["nodes length > ","nodes length ","(send\n  (block\n    (send\n      (send nil :class_send_nodes\n        (lvar :class_node)) :select)\n    (args\n      (arg :node))\n    (send nil :association\n      (lvar :node))) :group_by) select "," association to_sym "," association ","(send\n  (send nil :class_send_nodes\n    (lvar :class_node)) :select) group_by "," class_send_nodes select "," class_send_nodes "]}," RuboCop Cop Rails DuplicateAssociation on_class":{"type":"method","name":"on_class","children":[],"call":["corrector remove "," range_by_whole_lines ","node source_range ","nodes last == ","nodes last "," add_offense "," format ","nodes each "," offenses each "," offenses "," same_line? "," active_record? ","class_node parent_class "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods model_file?":{"type":"method","name":"model_file?","children":[],"call":[" processed_source buffer name include? "," processed_source buffer name "," processed_source buffer "," processed_source "," processed_source file_path include? "," processed_source file_path "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods receiver_matcher":{"type":"method","name":"receiver_matcher","children":[],"call":[" receiver_matcher_outside_model "," receiver_matcher_inside_model "," model_file? "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," any_manipulation? "," autocorrect ","AUTOCORECTABLE_METHODS  include? ","node method_name "," target_rails_version <= "," target_rails_version ","node method? "," skip_autocorrect? ","INCOMPATIBLE_METHODS  include? "]}," RuboCop Cop Rails BulkChangeTable count_transformations":{"type":"method","name":"count_transformations","children":[],"call":[" combinable_transformations include? ","node method_name "," combinable_transformations ","arg hash_type? ! ","arg hash_type? ","node arguments count ","node arguments ","node method? ","send_nodes sum "]}," RuboCop Cop Rails BulkChangeTable send_nodes_from_change_table_block":{"type":"method","name":"send_nodes_from_change_table_block","children":[],"call":["body each_child_node to_a ","body each_child_node ","body send_type? "]}," RuboCop Cop Rails ActionControllerTestCase on_class":{"type":"method","name":"on_class","children":[],"call":["corrector replace ","node parent_class "," add_offense "," action_controller_test_case? "]}," RuboCop Cop ClassSendNodeHelper class_send_nodes":{"type":"method","name":"class_send_nodes","children":[],"call":["class_def each_child_node ","class_def send_type? ","class_node body ","class_node body  each_child_node ","class_node body  send_type? "]}," RuboCop Cop Rails MigrationClassName remove_gem_suffix":{"type":"method","name":"remove_gem_suffix","children":[],"call":["file_name sub "]}," RuboCop Cop Rails MigrationClassName basename_without_timestamp_and_suffix":{"type":"method","name":"basename_without_timestamp_and_suffix","children":[],"call":["basename sub "," remove_gem_suffix ","File  basename "," processed_source file_path "," processed_source "," remove_gem_suffix  sub ","File  basename  sub ","File   remove_gem_suffix  ","File  File  basename  "]}," RuboCop Cop Rails TransactionExitStatement nested_block?":{"type":"method","name":"nested_block?","children":[],"call":["statement_node ancestors find method? ! ","statement_node ancestors find method? ","statement_node ancestors find ","statement_node ancestors ","statement_node break_type? ","block_node method? ","RESTRICT_ON_SEND  none? "," transaction_method_name? ! "," transaction_method_name? ","statement_node ancestors find children first method_name ","statement_node ancestors find children first ","statement_node ancestors find children ","statement_node ancestors find  method? "," transaction_method_statement_node ancestors find children first method_name ? ! "," transaction_method_statement_node ancestors find children first method_name ? ","statement_node ancestors find children first method_statement_node ancestors find children first method_name  "]}," RuboCop Cop Rails TransactionExitStatement in_rescue?":{"type":"method","name":"in_rescue?","children":[],"call":["statement_node ancestors find ","statement_node ancestors "]}," RuboCop Cop Rails TransactionExitStatement statement":{"type":"method","name":"statement","children":[],"call":["statement_node method_name ","statement_node break_type? ","statement_node return_type? "]}," RuboCop Cop Rails MigrationClassName camelize":{"type":"method","name":"camelize","children":[],"call":["word split map join ","word split map ","word split "]}," autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[" push "]}," RuboCop Cop Rails ToFormattedS on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," style ","node loc selector ","node loc "," add_offense "," format ","node method? "]}," RuboCop Cop Rails StripHeredoc register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove ","node loc selector ","node loc ","node loc dot ","corrector replace ","heredoc source sub ","heredoc source "," add_offense "]}," RuboCop Cop Rails StripHeredoc on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","receiver heredoc? ","receiver respond_to? ","receiver dstr_type? ","receiver str_type? ","node receiver ","node receiver  heredoc? ","node receiver  respond_to? ","node receiver  dstr_type? ","node receiver  str_type? ","node node receiver  "]}," RuboCop Cop Rails RootPublicPath public_path?":{"type":"method","name":"public_path?","children":[],"call":["PATTERN  match? "]}," RuboCop Cop Rails RootPublicPath on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","args join ","args empty? ","rails source ","args unshift ","first_args empty? ","other_args map ","maybe_public_path gsub "," add_offense "," rails_root_public ","other_args map  join ","other_args map  empty? ","other_args map  unshift ","first_other_args map  empty? ","maybe_public_path gsub  empty? ","other_other_args map  map "]}," RuboCop Cop Rails HasManyOrHasOneDependent extract_option_if_kwsplat":{"type":"method","name":"extract_option_if_kwsplat","children":[],"call":["options first children first pairs ","options first children first ","options first children ","options first ","options first children first hash_type? ","options first kwsplat_type? "]}," RuboCop Cop Rails DotSeparatedKeys scopes":{"type":"method","name":"scopes","children":[],"call":["value values ","value array_type? ","scope_node value ","scope_node value  scope_node value s ","scope_node value  array_type? ","scope_node scope_node value  "]}," RuboCop Cop Rails DotSeparatedKeys new_key":{"type":"method","name":"new_key","children":[],"call":["key_node value "," scopes map join "," scopes map "," scopes ","(str \"'\") squeeze "]}," RuboCop Cop Rails DotSeparatedKeys should_convert_scope?":{"type":"method","name":"should_convert_scope?","children":[],"call":[" scopes all? "," scopes "]}," RuboCop Cop Rails DotSeparatedKeys on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," new_key ","corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","scope_node source_range "," add_offense "," should_convert_scope? "," translate_with_scope? ","TRANSLATE_METHODS  include? ","node method_name ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","scope_node source_ range_with_surrounding_comma  ","scope_node source_ range_with_surrounding_space  "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods replacement":{"type":"method","name":"replacement","children":[],"call":["node first_argument source ","node first_argument ","node method_name ","receiver first_argument source ","receiver first_argument ","node method? "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","receiver receiver source_range end_pos ","receiver receiver source_range ","receiver receiver ","receiver source_range end_pos ","receiver source_range ","receiver method? ! ","receiver method? ","receiver send_type? ","receiver receiver  receiver receiver  source_range end_pos ","receiver receiver  receiver receiver  source_range ","receiver receiver  receiver receiver  ","receiver receiver  source_range end_pos ","receiver receiver  source_range ","receiver receiver  method? ! ","receiver receiver  method? ","receiver receiver  send_type? "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," offense_range ","corrector remove ","receiver receiver loc selector ","receiver receiver loc ","receiver receiver ","receiver receiver loc dot ","receiver receiver method? ","node receiver ","receiver receiver send_type? ","  replacement  "," offense_ offense_range  ","node receiver  node receiver  loc selector ","node receiver  node receiver  loc ","node receiver  node receiver  ","node receiver  node receiver  loc dot ","node receiver  node receiver  method? ","node node receiver  ","node receiver  node receiver  send_type? "]}," RuboCop Rails SchemaLoader Schema add_indices_by":{"type":"method","name":"add_indices_by","children":[],"call":["add_index table_name == ","add_index table_name "," add_indices select "," add_indices "]}," RuboCop Cop Rails ExpandedDateRange register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," format "]}," RuboCop Cop Rails ExpandedDateRange any_arguments?":{"type":"method","name":"any_arguments?","children":[],"call":["end_node arguments any? ","end_node arguments ","begin_node arguments any? ","begin_node arguments "]}," RuboCop Cop Rails ExpandedDateRange preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :begin_node) :receiver) :source)) +@ ","PREFERRED_METHODS  [] ","begin_node method_name ","begin_node receiver source ","begin_node receiver "]}," RuboCop Cop Rails ExpandedDateRange same_argument?":{"type":"method","name":"same_argument?","children":[],"call":["begin_node first_argument source == ","end_node first_argument source ","end_node first_argument ","begin_node first_argument source ","begin_node first_argument "]}," RuboCop Cop Rails ExpandedDateRange receiver_source":{"type":"method","name":"receiver_source","children":[],"call":["node receiver source ","node receiver ","node receiver nil? ","(lvar :node) ! "]}," RuboCop Cop Rails ExpandedDateRange allow?":{"type":"method","name":"allow?","children":[],"call":["MAPPED_DATE_RANGE_METHODS  [] != ","end_node method_name ","MAPPED_DATE_RANGE_METHODS  [] ","begin_node method_name ","begin_source != "," receiver_source "," receiver_source  != "]}," RuboCop Cop Rails WhereMissing message":{"type":"method","name":"message","children":[],"call":[" format ","where_argument value ","node method_name ","node first_argument value ","node first_argument "]}," RuboCop Cop Rails WhereMissing multi_condition?":{"type":"method","name":"multi_condition?","children":[],"call":["where_arg children count > ","where_arg children count ","where_arg children "]}," RuboCop Cop Rails WhereMissing same_line?":{"type":"method","name":"same_line?","children":[],"call":["left_joins_node loc selector line == ","where_node loc selector line ","where_node loc selector ","where_node loc ","left_joins_node loc selector line ","left_joins_node loc selector ","left_joins_node loc "]}," RuboCop Cop Rails WhereMissing remove_where_method":{"type":"method","name":"remove_where_method","children":[],"call":["corrector remove ","where_node loc dot ","where_node loc "," range_by_whole_lines "," same_line? ! "," same_line? ","node multiline? "," range_between ","where_node loc end end_pos ","where_node loc end ","where_node loc selector begin_pos ","where_node loc selector ","  range_by_whole_lines _by_whole_lines ","  range_between _by_whole_lines ","  range_by_whole_lines _between ","  range_between _between "]}," RuboCop Cop Rails WhereMissing replace_range":{"type":"method","name":"replace_range","children":[],"call":[" range_between ","child loc expression end_pos ","child loc expression ","child loc ","child left_sibling loc expression end_pos ","child left_sibling loc expression ","child left_sibling loc ","child left_sibling ","right_sibling loc expression begin_pos ","right_sibling loc expression ","right_sibling loc ","child loc expression begin_pos ","child right_sibling ","child source_range end_pos ","child source_range ","child left_sibling source_range end_pos ","child left_sibling source_range ","right_sibling source_range begin_pos ","right_sibling source_range ","child source_range begin_pos ","child right_sibling  loc expression begin_pos ","child right_sibling  loc expression ","child right_sibling  loc ","child child right_sibling  ","child right_sibling  source_range begin_pos ","child right_sibling  source_range "]}," RuboCop Cop Rails WhereMissing replace_where_method":{"type":"method","name":"replace_where_method","children":[],"call":["corrector remove "," replace_range "," missing_relationship "]}," RuboCop Cop Rails WhereMissing register_offense":{"type":"method","name":"register_offense","children":[],"call":[" remove_where_method "," replace_where_method "," multi_condition? ","where_node first_argument ","corrector replace ","node loc selector ","node loc "," add_offense "," message "]}," RuboCop Cop Rails WhereMissing same_relationship?":{"type":"method","name":"same_relationship?","children":[],"call":["where value to_s match? ","left_joins value ","where value to_s ","where value "]}," RuboCop Cop Rails WhereMissing root_receiver":{"type":"method","name":"root_receiver","children":[],"call":[" root_receiver ","node parent ","parent method? ","(lvar :parent) ! ","node node parent  ","node parent  method? ","(lvar :node parent ) ! "]}," RuboCop Cop Rails WhereMissing on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector "," same_relationship? ","node first_argument "," where_node_and_argument "," root_receiver ","node first_argument sym_type? ","root_receiver == ","node source_range end_pos ","node source_range ","  range_between _between ","  root_receiver  "," root_receiver  == ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Rails TopLevelHashWithIndifferentAccess autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","node location name ","node location "]}," RuboCop Cop Rails TopLevelHashWithIndifferentAccess on_const":{"type":"method","name":"on_const","children":[],"call":[" autocorrect "," add_offense "," top_level_hash_with_indifferent_access? ","node parent ancestors any? ","node parent ancestors ","node parent "]}," RuboCop Cop Rails ToSWithArgument on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node loc selector ","node loc "," add_offense ","node arguments empty? ","node arguments "," rails_extended_to_s? "]}," RuboCop Cop Rails RootPathnameMethods evidence":{"type":"method","name":"evidence","children":[],"call":[" rails_root_pathname? "," pathname_method ","node parent ","node method? ","  rails_root_pathname? _pathname? "]}," RuboCop Cop Rails RootPathnameMethods on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","args map join ","args map ","args empty? ","path source "," add_offense "," format ","rails_root source "," evidence "," build_path_glob "," dir_glob? "," build_path_replacement "," build_path_glob_replacement "," build_path_ build_path_glob  "," build_path_ build_path_replacement  "," build_path_ build_path_glob_replacement  "," build_path_glob_ build_path_glob  "," build_path_glob_ build_path_replacement  "," build_path_glob_ build_path_glob_replacement  "]}," RuboCop Cop Rails ReflectionClassName str_assigned?":{"type":"method","name":"str_assigned?","children":[],"call":["ALLOWED_REFLECTION_CLASS_TYPES  include? ","rhs type ","lhs to_s == ","lhs to_s ","nodes each_child_node detect ","nodes each_child_node ","reflection_class_name ancestors each ","reflection_class_name ancestors ","reflection_class_name value source ","reflection_class_name value "]}," RuboCop Cop Rails RedundantReceiverInWithOptions redundant_receiver?":{"type":"method","name":"redundant_receiver?","children":[],"call":["send_nodes all? "," same_value? ","n receiver "," lambda ","node arguments first ","node arguments ","n receiver source == ","n receiver source ","n receiver lvar_type? ","node numblock_type? ","node arguments empty? ","node node arguments first uments first ","node node arguments first uments ","node node arguments first uments empty? "]}," RuboCop Cop Rails FreezeTime current_time_with_convert?":{"type":"method","name":"current_time_with_convert?","children":[],"call":[" current_time? ","node children ","CONV_METHODS  include? ","CONVERT_METHODS  include? "]}," RuboCop Cop Rails FreezeTime current_time?":{"type":"method","name":"current_time?","children":[],"call":[" time_now? "," zoned_time_now? ","node send_type? ","NOW_METHODS  include? "]}," RuboCop Cop Rails FreezeTime on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," current_time_with_convert? "," current_time? ","node first_argument children ","node first_argument ","last_argument source ","last_argument block_pass_type? ","node last_argument ","child_node ! ","node last_argument  source ","node last_argument  block_pass_type? ","node node last_argument  "]}," RuboCop Cop Rails DeprecatedActiveModelErrorsMethods skip_autocorrect?":{"type":"method","name":"skip_autocorrect?","children":[],"call":["node method? ","receiver method? ","receiver send_type? ","node receiver receiver ","node receiver ","AUTOCORRECTABLE_METHODS  include? ","node method_name ","node receiver receiver  method? ","node receiver receiver  send_type? ","node node receiver receiver  node receiver receiver  ","node node receiver receiver  "]}," RuboCop Cop Rails ActiveSupportOnLoad on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node source ","arguments source ","LOAD_HOOKS  [] ","receiver const_name "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender find_ancestor":{"type":"method","name":"find_ancestor","children":[],"call":["node each_ancestor first ","node each_ancestor "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender instance_method_or_block?":{"type":"method","name":"instance_method_or_block?","children":[],"call":[" find_ancestor "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender inherit_action_controller_base?":{"type":"method","name":"inherit_action_controller_base?","children":[],"call":[" action_controller? "," find_ancestor "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender followed_by_render?":{"type":"method","name":"followed_by_render?","children":[],"call":[" render? ","context each_child_node any? ","context each_child_node ","flash_assigment_node parent "," find_ancestor ","context compact any? ","context compact ","context empty? ","context right_siblings ","context parent ","context parent if_type? ","context right_siblings empty? ","context each_ancestor first ","context each_ancestor "," use_redirect_to? ","flash_assigment_node parent  each_child_node any? ","context right_siblings  each_child_node any? ","context parent  each_child_node any? ","context each_child_context each_ancestor first  any? ","flash_assigment_node parent  each_child_node ","context right_siblings  each_child_node ","context parent  each_child_node ","context each_child_context each_ancestor first  "," find_ancestor  parent ","flash_assigment_context each_ancestor first  parent ","flash_assigment_node parent  compact any? ","context right_siblings  compact any? ","context parent  compact any? ","flash_assigment_node parent  compact ","context right_siblings  compact ","context parent  compact ","flash_assigment_node parent  empty? ","context right_siblings  empty? ","context parent  empty? ","flash_assigment_node parent  right_siblings ","context right_siblings  right_siblings ","context parent  right_siblings ","flash_assigment_node parent  parent ","context right_siblings  parent ","context parent  parent ","flash_assigment_node parent  parent if_type? ","context right_siblings  parent if_type? ","context parent  parent if_type? ","flash_assigment_node parent  right_siblings empty? ","context right_siblings  right_siblings empty? ","context parent  right_siblings empty? ","flash_assigment_node parent  each_ancestor first ","context right_siblings  each_ancestor first ","context parent  each_ancestor first ","flash_assigment_node parent  each_ancestor ","context right_siblings  each_ancestor ","context parent  each_ancestor "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," inherit_action_controller_base? "," instance_method_or_block? "," followed_by_render? "," flash_assignment? "," followed_by_redirect_to? "]}," RuboCop Cop Rails RootPathnameMethods join_arguments":{"type":"method","name":"join_arguments","children":[],"call":["arguments map join ","arguments map "," include_interpolation? "," enforce_double_quotes? ","(send\n  (lvar :arguments) :map) join ","arg source ","arg value ","arg respond_to? "]}," RuboCop Cop Rails RootPathnameMethods include_interpolation?":{"type":"method","name":"include_interpolation?","children":[],"call":["child begin_type? ","child respond_to? ","argument children any? ","argument children ","arguments any? "]}," RuboCop Cop Rails RootPathnameMethods build_path_glob":{"type":"method","name":"build_path_glob","children":[],"call":[" join_arguments ","path arguments ","path first_argument source ","path first_argument ","path arguments one? "," range_between source "," range_between ","path children first loc selector end_pos ","path children first loc selector ","path children first loc ","path children first ","path children ","path loc expression begin_pos ","path loc expression ","path loc "," join_ join_arguments s "," join_path first_argument source s ","path  join_arguments s ","path path first_argument source s ","path first_ join_arguments  source ","path first_path first_argument source  source ","path first_ join_arguments  ","path first_path first_argument source  ","path  join_arguments s one? ","path path first_argument source s one? "]}," RuboCop Cop Rails WhereNotWithMultipleConditions multiple_arguments_hash?":{"type":"method","name":"multiple_arguments_hash?","children":[],"call":[" multiple_arguments_hash? ","hash values [] ","hash values ","hash values [] hash_type? ","hash pairs size >= ","hash pairs size ","hash pairs "]}," RuboCop Cop Rails WhereNotWithMultipleConditions on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node receiver loc selector with ","node loc expression end_pos ","node loc expression ","node loc ","node receiver loc selector ","node receiver loc ","node receiver "," multiple_arguments_hash? ","args [] ","args [] hash_type? "," where_not_call? ","node source_range end_pos ","node source_range ","node source_node receiver loc selector with  end_pos ","node source_node receiver loc selector with  "]}," RuboCop Cop Rails Presence method_range":{"type":"method","name":"method_range","children":[],"call":[" range_between ","node first_argument source_range begin_pos - ","node first_argument source_range begin_pos ","node first_argument source_range ","node first_argument ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Rails Presence current":{"type":"method","name":"current","children":[],"call":["node source ","node loc keyword with source ","node loc keyword with ","node condition loc selector end_pos ","node condition loc selector ","node condition loc ","node condition ","node loc keyword ","node loc ","node source include? ","node source gsub ","node ternary? ! ","node ternary? "]}," RuboCop Cop Rails IgnoredColumnsAssignment on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node loc operator ","node loc "," add_offense "]}," RuboCop Cop Rails EagerEvaluationLogMessage autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Rails ActionOrder register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","current source ","previous source "," add_offense "," format ","current method_name ","previous method_name "," expected_order join "," expected_order "," swap_range "," correction_target "," correction_target  source "," correction_target  method_name "]}," RuboCop Cop Rails ActionOrder find_index":{"type":"method","name":"find_index","children":[],"call":[" expected_order find_index ","node method_name "," expected_order "]}," RuboCop Cop Rails ActionOrder actions":{"type":"method","name":"actions","children":[],"call":["Set  new "," expected_order "]}," RuboCop Cop Rails ActionOrder expected_order":{"type":"method","name":"expected_order","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Rails ActionOrder on_class":{"type":"method","name":"on_class","children":[],"call":[" register_offense "," find_index >= "," find_index "," non_public? "," node_visibility != "," node_visibility "," action_declarations each_cons "," action_declarations "," actions "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender followed_by_redirect_to?":{"type":"method","name":"followed_by_redirect_to?","children":[],"call":[" redirect_to? ","index > ","context each_child_node with_index any? ","context each_child_node with_index ","context each_child_node ","context children index ","context children ","flash_assigment_node parent "," find_ancestor ","flash_assigment_node parent  each_child_node with_index any? ","flash_assigment_node parent  each_child_node with_index ","flash_assigment_node parent  each_child_node ","flash_assigment_node parent  children index ","flash_assigment_node parent  children "," find_ancestor  parent "]}," RuboCop Cop Rails Pluck use_block_argument_in_key?":{"type":"method","name":"use_block_argument_in_key?","children":[],"call":["block_argument == ","lvar source ","key each_descendant none? ","key each_descendant ","key source "]}," RuboCop Cop Rails Pluck register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," offense_range "," add_offense "," message ","key source ","  message  "]}," RuboCop Cop Rails Pluck use_one_block_argument?":{"type":"method","name":"use_one_block_argument?","children":[],"call":["argument one? ","argument respond_to? ","argument == "]}," RuboCop Cop Rails ToSWithArgument rails_extended_to_s?":{"type":"method","name":"rails_extended_to_s?","children":[],"call":["EXTENDED_FORMAT_TYPES  include? ","node first_argument value ","node first_argument "]}," RuboCop Cop Rails RootPathnameMethods build_path_replacement":{"type":"method","name":"build_path_replacement","children":[],"call":["args map join ","args map ","args empty? ","path_replacement << ","path_replacement []= ","path parenthesized_call? ! ","path parenthesized_call? ","path arguments? ","path source ","path source  << ","path source  []= "]}," RuboCop Cop Rails RootPathnameMethods build_path_glob_replacement":{"type":"method","name":"build_path_glob_replacement","children":[],"call":[" join_arguments ","path arguments ","path first_argument source ","path first_argument ","path arguments one? "," range_between source "," range_between ","path children first loc selector end_pos ","path children first loc selector ","path children first loc ","path children first ","path children ","path loc expression begin_pos ","path loc expression ","path loc ","path source_range begin_pos ","path source_range "," join_ join_arguments s "," join_path first_argument source s ","path  join_arguments s ","path path first_argument source s ","path first_ join_arguments  source ","path first_path first_argument source  source ","path first_ join_arguments  ","path first_path first_argument source  ","path  join_arguments s one? ","path path first_argument source s one? "]}," RuboCop Cop Rails DynamicFindBy dynamic_find_by_arguments_type?":{"type":"method","name":"dynamic_find_by_arguments_type?","children":[],"call":["IGNORED_ARGUMENT_TYPES  include? ","argument type ","node arguments none? ","node arguments "]}," RuboCop Cop Rails DynamicFindBy dynamic_find_by_arguments_count?":{"type":"method","name":"dynamic_find_by_arguments_count?","children":[],"call":[" column_keywords size == ","node arguments size ","node arguments "," column_keywords size "," column_keywords ","node method_name "]}," RuboCop Cop Rails DynamicFindBy dynamic_find_by_arguments?":{"type":"method","name":"dynamic_find_by_arguments?","children":[],"call":[" dynamic_find_by_arguments_type? "," dynamic_find_by_arguments_count? "]}," RuboCop Cop Rails ActionOrder swap_range":{"type":"method","name":"swap_range","children":[],"call":["corrector remove ","corrector insert_before ","range1 source "]}," RuboCop Cop Rails ActionOrder range_with_comments_and_lines":{"type":"method","name":"range_with_comments_and_lines","children":[],"call":[" range_by_whole_lines "," range_with_comments "]}," RuboCop Cop Rails ActionOrder range_with_comments":{"type":"method","name":"range_with_comments","children":[],"call":[" add_range ","ranges reduce ","element location expression ","element location ","(lvar :node) map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source ","comment loc expression ","comment loc "]}," RuboCop Cop Rails ActionOrder add_range":{"type":"method","name":"add_range","children":[],"call":["range1 with ","(send\n  (lvar :range1) :end_pos) max ","range2 end_pos ","range1 end_pos ","(send\n  (lvar :range1) :begin_pos) min ","range2 begin_pos ","range1 begin_pos "]}," RuboCop Cop Rails ActionOrder correction_target":{"type":"method","name":"correction_target","children":[],"call":[" range_with_comments_and_lines ","def_node each_ancestor first ","def_node each_ancestor "]}," RuboCop Cop Rails UniqueValidationWithoutIndex condition_hash_part?":{"type":"method","name":"condition_hash_part?","children":[],"call":["keys include? ","key value ","key sym_type? ","pair key ","pairs each_pair any? ","pairs each_pair ","pair key s include? ","pair key  value ","pair key  sym_type? ","pair pair key  "]}," RuboCop Cop Rails TimeZone offset_option_provided?":{"type":"method","name":"offset_option_provided?","children":[],"call":["pair value nil_type? ! ","pair value nil_type? ","pair value ","pair key value == ","pair key value ","pair key ","pair key sym_type? ","options each_pair any? ","options each_pair ","node last_argument ","node last_argument  each_pair any? ","node last_argument  each_pair "]}," RuboCop Cop Rails RootPathnameMethods string_literals_config":{"type":"method","name":"string_literals_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Rails RootPathnameMethods enforce_double_quotes?":{"type":"method","name":"enforce_double_quotes?","children":[],"call":[" string_literals_config [] == "," string_literals_config [] "," string_literals_config "]}," RuboCop Cop Rails SquishedSQLHeredocs singleline_comments_present?":{"type":"method","name":"singleline_comments_present?","children":[],"call":["sql gsub include? ","sql gsub ","(send\n  (send\n    (lvar :node) :children) :map) join ","c source ","c is_a? ","node children map ","node children ","(send\n  (send\n    (lvar :node) :children) :map) join  gsub include? ","(send\n  (send\n    (lvar :node) :children) :map) join  gsub "]}," RuboCop Cop Rails ResponseParsedBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "]}," RuboCop Cop Rails ResponseParsedBody on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," json_parse_response_body? "]}," RuboCop Cop Rails LexicallyScopedActionFilter alias_methods":{"type":"method","name":"alias_methods","children":[],"call":["result []= ","child_node new_identifier value ","child_node new_identifier ","child_node old_identifier value ","child_node old_identifier ","child_node first_argument value ","child_node first_argument ","child_node last_argument value ","child_node last_argument ","child_node method? ","child_node type ","node each_child_node "]}," RuboCop Cop Rails ActionControllerFlashBeforeRender use_redirect_to?":{"type":"method","name":"use_redirect_to?","children":[],"call":["sibling method? ","sibling send_type? ","context right_siblings compact any? ","context right_siblings compact ","context right_siblings "]}," RuboCop Cop Rails ThreeStateBooleanColumn table_node":{"type":"method","name":"table_node","children":[],"call":["n method? ","node each_ancestor find ","node each_ancestor ","node first_argument ","node method_name "]}," RuboCop Cop Rails ThreeStateBooleanColumn on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," change_column_null? ","column_node value ","table_node value "," table_node ","node each_ancestor first ","node each_ancestor "," required_options? ","options_node first "," three_state_boolean? ","table_node nil? "," table_node  value ","  table_node  ","options_node first  first "," table_node  nil? "]}," RuboCop Cop Rails ReflectionClassName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","replacement source inspect ","replacement source ","replacement present? "," const_or_string ","class_config value "," const_or_string  source inspect "," const_or_string  source "," const_or_string  present? "]}," RuboCop Cop Rails HttpPositionalArguments use_rack_test_methods?":{"type":"method","name":"use_rack_test_methods?","children":[],"call":[" include_rack_test_methods? "," processed_source ast each_descendant any? "," processed_source ast each_descendant "," processed_source ast "," processed_source "]}," RuboCop Cop Rails FilePath build_message":{"type":"method","name":"build_message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption remove_node_with_left_space_and_comma":{"type":"method","name":"remove_node_with_left_space_and_comma","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop Rails FilePath extension_node?":{"type":"method","name":"extension_node?","children":[],"call":["node source start_with? ","node source ","node source match? "]}," RuboCop Cop Rails FilePath extract_rails_root_join_argument_source":{"type":"method","name":"extract_rails_root_join_argument_source","children":[],"call":["node children [] map join delete_prefix ","node children [] map join ","node children [] map ","node children [] ","rails_root_index + ","node children "]}," RuboCop Cop Rails FilePath replace_with_rails_root_join":{"type":"method","name":"replace_with_rails_root_join","children":[],"call":["corrector replace "]}," RuboCop Cop Rails FilePath append_argument":{"type":"method","name":"append_argument","children":[],"call":["corrector insert_after ","node arguments last ","node arguments "]}," RuboCop Cop Rails FilePath find_rails_root_index":{"type":"method","name":"find_rails_root_index","children":[],"call":[" rails_root_nodes? ","node children index ","node children "]}," RuboCop Cop Rails FilePath inner_range_of":{"type":"method","name":"inner_range_of","children":[],"call":["node location end with adjust ","node location end with ","node location begin end_pos ","node location begin ","node location ","node location end "]}," RuboCop Cop Rails FilePath autocorrect_rails_root_join_with_slash_separated_path":{"type":"method","name":"autocorrect_rails_root_join_with_slash_separated_path","children":[],"call":["corrector insert_after ","rest source delete_prefix ","rest source ","corrector remove "," inner_range_of adjust ","index - "," inner_range_of ","argument source index ","argument source "," string_with_slash? ","node arguments each ","node arguments "," inner_range_of adjust  source delete_prefix "," inner_range_of adjust  source ","argument source index  - ","argument source argument source index  "]}," RuboCop Cop Rails FilePath autocorrect_rails_root_join_with_string_arguments":{"type":"method","name":"autocorrect_rails_root_join_with_string_arguments","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","argument source_range ","node arguments [] each ","node arguments [] ","node arguments ","corrector replace ","node arguments map join ","node arguments map ","node arguments first "]}," RuboCop Cop Rails FilePath autocorrect_file_join":{"type":"method","name":"autocorrect_file_join","children":[],"call":["corrector insert_after ","corrector remove "," range_with_surrounding_space "," range_with_surrounding_comma ","node arguments first source_range ","node arguments first ","node arguments ","corrector replace ","node receiver ","argument value delete_prefix inspect ","argument value delete_prefix ","argument value ","node arguments filter each ","node arguments filter "]}," RuboCop Cop Rails FilePath autocorrect_extension_after_rails_root_join_in_dstr":{"type":"method","name":"autocorrect_extension_after_rails_root_join_in_dstr","children":[],"call":["corrector remove ","corrector insert_before ","extension_node source ","rails_root_node arguments last location end ","rails_root_node arguments last location ","rails_root_node arguments last ","rails_root_node arguments ","rails_root_node arguments last str_type? ","node children [] children first ","node children [] children ","node children [] ","node children ","node children [] children first  arguments last location end ","node children [] children first  arguments last location ","node children [] children first  arguments last ","node children [] children first  arguments ","node children [] children first  arguments last str_type? "]}," RuboCop Cop Rails FilePath autocorrect_slash_after_rails_root_in_dstr":{"type":"method","name":"autocorrect_slash_after_rails_root_in_dstr","children":[],"call":["corrector remove ","node children [] each ","node children [] ","rails_root_index + ","node children "," replace_with_rails_root_join "," append_argument ","rails_root_node method? "," extract_rails_root_join_argument_source ","node children [] children first ","node children [] children ","node children [] children first  method? "," extract_rails_root_join_ extract_rails_root_join_argument_source  "]}," RuboCop Cop Rails FilePath dstr_separated_by_colon?":{"type":"method","name":"dstr_separated_by_colon?","children":[],"call":["child source start_with? ","child source ","child str_type? ","node children [] any? ","node children [] ","node children "]}," RuboCop Cop Rails FilePath check_for_extension_after_rails_root_join_in_dstr":{"type":"method","name":"check_for_extension_after_rails_root_join_in_dstr","children":[],"call":[" autocorrect_extension_after_rails_root_join_in_dstr "," register_offense "," extension_node? ","node children [] ","rails_root_index + ","node children "," find_rails_root_index "," node children [] ? "," find_rails_root_index  + "," find_ find_rails_root_index  "]}," RuboCop Cop Rails FilePath check_for_slash_after_rails_root_in_dstr":{"type":"method","name":"check_for_slash_after_rails_root_in_dstr","children":[],"call":[" autocorrect_slash_after_rails_root_in_dstr "," register_offense ","slash_node source start_with? ","slash_node source ","node children [] ","rails_root_index + ","node children "," find_rails_root_index ","node children []  source start_with? ","node children []  source "," find_rails_root_index  + "," find_ find_rails_root_index  "]}," RuboCop Cop Rails UnusedRenderContent on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," unused_render_content? "]}," RuboCop Cop Rails TransactionExitStatement transaction_method?":{"type":"method","name":"transaction_method?","children":[],"call":[" cop_config fetch include? ","method_name to_s "," cop_config fetch "," cop_config "]}," RuboCop Cop Rails TransactionExitStatement transaction_method_name?":{"type":"method","name":"transaction_method_name?","children":[],"call":[" transaction_method? ","BUILT_IN_TRANSACTION_METHODS  include? "]}," RuboCop Cop Rails TransactionExitStatement in_transaction_block?":{"type":"method","name":"in_transaction_block?","children":[],"call":["parent body ","parent block_type? ","node parent "," transaction_method_name? ","node method_name ","node parent  body ","node parent  block_type? ","node node parent  "]}," RuboCop Cop Rails TimeZone on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense ","node loc selector ","node loc ","node method? ! ","node method? ","(send\n  (lvar :node) :receiver) ! ","node receiver ","corrector replace ","node receiver source "]}," RuboCop Cop Rails SelectMap match_column_name?":{"type":"method","name":"match_column_name?","children":[],"call":["argument == ","first_argument value ","first_argument respond_to? ","first_argument source delete_prefix ","first_argument source ","select_candidate first_argument type ","select_candidate first_argument ","select_candidate arguments one? ","select_candidate arguments ","select_candidate first_argument  value ","select_candidate first_argument  respond_to? ","select_candidate first_argument  source delete_prefix ","select_candidate first_argument  source ","select_candidate select_candidate first_argument  type ","select_candidate select_candidate first_argument  "]}," RuboCop Cop Rails SelectMap autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector begin join ","node source_range end ","node source_range ","node loc selector begin ","node loc selector ","node loc ","corrector remove ","select_node loc dot begin join ","select_node source_range end ","select_node source_range ","select_node loc dot begin ","select_node loc dot ","select_node loc "]}," RuboCop Cop Rails SelectMap find_select_node":{"type":"method","name":"find_select_node","children":[],"call":[" match_column_name? ","select_candidate method? ! ","select_candidate method? ","select_candidate send_type? ! ","select_candidate send_type? ","node descendants detect ","node descendants "]}," RuboCop Cop Rails SelectMap on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," format ","node method_name ","select_node loc selector begin join ","node source_range end ","node source_range ","select_node loc selector begin ","select_node loc selector ","select_node loc "," find_select_node ","node first_argument source delete_prefix ","node first_argument source ","node first_argument "," find_select_node  loc selector begin join "," find_select_node  loc selector begin "," find_select_node  loc selector "," find_select_node  loc "," find_ find_select_node  "]}," RuboCop Cop Rails SchemaComment t_column_without_comment?":{"type":"method","name":"t_column_without_comment?","children":[],"call":[" t_column_with_comment? ! "," t_column_with_comment? "," t_column? "]}," RuboCop Cop Rails SchemaComment check_column_within_create_table_block":{"type":"method","name":"check_column_within_create_table_block","children":[],"call":[" add_offense "," t_column_without_comment? ","node child_nodes each ","node child_nodes ","node begin_type? "]}," RuboCop Cop Rails RootPathnameMethods pathname_method":{"type":"method","name":"pathname_method","children":[],"call":[" pathname_method_for_ruby_2_4_or_lower "," pathname_method_for_ruby_2_5_or_higher "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Rails RedundantActiveRecordAllMethod on_send":{"type":"method","name":"on_send","children":[],"call":["collector remove ","query_node loc dot ","query_node loc "," add_offense ","node loc selector ","node loc "," inherit_active_record_base? ! "," inherit_active_record_base? ","node receiver nil? ","node receiver ","QUERYING_METHODS  include? ","query_node method_name ","node parent ","node parent loc dot ","node parent loc "," followed_by_query_method? ","node parent  loc dot ","node parent  loc ","node parent  method_name "]}," RuboCop Cop Rails RakeEnvironment with_arguments?":{"type":"method","name":"with_arguments?","children":[],"call":["node arguments [] array_type? ","node arguments [] ","node arguments ","node arguments size > ","node arguments size "]}," RuboCop Cop Rails RakeEnvironment task_arguments":{"type":"method","name":"task_arguments","children":[],"call":["node arguments [] ","node arguments "]}," RuboCop Cop Rails RakeEnvironment correct_task_arguments_dependency":{"type":"method","name":"correct_task_arguments_dependency","children":[],"call":[" task_arguments source "," task_arguments "]}," RuboCop Cop Rails I18nLazyLookup message":{"type":"method","name":"message","children":[],"call":[" format "," style "]}," RuboCop Cop Rails I18nLazyLookup handle_explicit_style":{"type":"method","name":"handle_explicit_style","children":[],"call":["corrector replace "," add_offense "," get_scoped_key "," controller_and_action ","key to_s start_with? ","key to_s ","key_node value "," get_ get_scoped_key  "," get_scoped_key_node value  ","key_node value  to_s start_with? ","key_node value  to_s ","key_node value _node value "]}," RuboCop Cop Rails I18nLazyLookup handle_lazy_style":{"type":"method","name":"handle_lazy_style","children":[],"call":["corrector replace ","key_node value to_s split last ","key_node value to_s split ","key_node value to_s ","key_node value "," add_offense ","key == "," get_scoped_key "," controller_and_action ","key to_s start_with? ","key to_s ","key_node value _node value to_s split last ","key_node value _node value to_s split ","key_node value _node value to_s ","key_node value _node value ","key_node value  == "," get_ get_scoped_key  "," get_scoped_key_node value  ","key_node value  to_s start_with? ","key_node value  to_s "]}," RuboCop Cop Rails DangerousColumnNames dangerous_column_name?":{"type":"method","name":"dangerous_column_name?","children":[],"call":["DANGEROUS_COLUMN_NAMES  include? "]}," RuboCop Cop Rails DangerousColumnNames dangerous_column_name_node?":{"type":"method","name":"dangerous_column_name_node?","children":[],"call":[" dangerous_column_name? ","node value to_s ","node value ","node respond_to? "]}," RuboCop Cop Rails DangerousColumnNames column_name_node_from":{"type":"method","name":"column_name_node_from","children":[],"call":["node arguments [] ","node arguments ","node method_name "]}," RuboCop Cop Rails DangerousColumnNames on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," dangerous_column_name_node? "," column_name_node_from "," dangerous_ column_name_node_from ? ","  column_name_node_from _from "]}," RuboCop Cop Rails BulkChangeTable database_from_env":{"type":"method","name":"database_from_env","children":[],"call":["ENV  [] presence ","ENV  [] "]}," RuboCop Cop Rails BulkChangeTable database_adapter":{"type":"method","name":"database_adapter","children":[],"call":[" database_yaml first last [] "," database_yaml first last "," database_yaml first "," database_yaml "," database_yaml [] "]}," RuboCop Cop Rails EnumHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","hash to_s "," lambda ","(send\n  (send\n    (send\n      (lvar :node) :children) :each_with_index) :map) to_h ","elem children first ","elem children ","node children each_with_index map ","node children each_with_index ","node children ","node loc expression ","node loc ","(send\n  (send\n    (send\n      (lvar :node) :children) :each_with_index) :map) join ","elem source "," source ","(send\n  (send\n    (send\n      (lvar :node) :children) :each_with_index) :map) to_h  to_s ","(send\n  (send\n    (send\n      (lvar :node) :children) :each_with_index) :map) join  to_s "]}," RuboCop Cop Rails SafeNavigationWithBlank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," safe_navigation_blank_in_conditional? location dot "," safe_navigation_blank_in_conditional? location "," safe_navigation_blank_in_conditional? "," lambda "]}," RuboCop Cop Rails RakeEnvironment on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," with_dependencies? "," task_name == "," task_name "," task_definition? "]}," RuboCop Cop Rails ApplicationMailer autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop Rails ApplicationController autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop Rails UniqueValidationWithoutIndex schema":{"type":"method","name":"schema","children":[],"call":["RuboCop Rails SchemaLoader  load "," target_ruby_version "]}," RuboCop Cop IndexMethod autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" execute_correction "," prepare_correction "," lambda "," execute_ prepare_correction  "," prepare_ prepare_correction  "]}," RuboCop Cop Rails RedundantForeignKey autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "," range_with_surrounding_comma "," range_with_surrounding_space ","foreign_key_pair source_range "," association_with_foreign_key ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","foreign_key_pair source_ range_with_surrounding_comma  ","foreign_key_pair source_ range_with_surrounding_space  "]}," RuboCop Cop Rails RakeEnvironment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","task_name loc expression ","task_name loc "," correct_task_dependency ","node arguments [] ","node arguments "," lambda ","node arguments []  loc expression ","node arguments []  loc "," correct_ correct_task_dependency  "]}," RuboCop Cop Rails Pick autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node receiver loc selector ","node receiver loc ","node receiver ","corrector remove "," lambda ","node receiver source_range end join ","node loc selector ","node loc ","node receiver source_range end ","node receiver source_range "]}," RuboCop Cop Rails ContentTag child_node_beg":{"type":"method","name":"child_node_beg","children":[],"call":["node arguments [] loc expression begin_pos ","node arguments [] loc expression ","node arguments [] loc ","node arguments [] ","node arguments "]}," RuboCop Cop Rails ContentTag remove_first_argument":{"type":"method","name":"remove_first_argument","children":[],"call":["corrector remove ","node arguments [] loc expression ","node arguments [] loc ","node arguments [] ","node arguments ","node arguments length == ","node arguments length "," range_between "," child_node_beg ","node arguments length > "]}," RuboCop Cop Rails ContentTag replace_method_with_tag_method":{"type":"method","name":"replace_method_with_tag_method","children":[],"call":["corrector replace ","node first_argument value ","node first_argument ","node loc selector ","node loc "]}," RuboCop Cop Rails WhereExists autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," build_good_method "," correction_range "," lambda "," where_exists_call? "," find_offenses "]}," RuboCop Cop Rails ShortI18n autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","PREFERRED_METHODS  [] ","node loc selector ","node loc "," lambda "," long_i18n? "]}," RuboCop Cop Rails RenderPlainText autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda ","options_node pairs - ","(lvar :option_node) compact ","options_node pairs "," find_content_type "," render_plain_text? "]}," RuboCop Cop Rails RenderInline includes_inline_key?":{"type":"method","name":"includes_inline_key?","children":[],"call":["key value to_sym == ","key value to_sym ","key value ","node keys find ","node keys "]}," RuboCop Cop Rails PluckInWhere autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails PluckId autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," offense_range "," lambda "]}," RuboCop Cop Rails Pluck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," offense_range "," lambda "," pluck_candidate? "]}," RuboCop Cop Rails NegateInclude autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","obj source ","receiver source "," lambda "," negate_include_call? "]}," RuboCop Cop Rails MatchRoute autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda ","options_node first "," match_method_call? ","options_node first  first "]}," RuboCop Cop Rails FindById autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," build_good_method "," lambda "," find_by_offense_range "," find_by? "," where_take_offense_range "," where_take? "," find_by_offense_ find_by_offense_range  "," find_by_offense_ where_take_offense_range  "," where_take_offense_ find_by_offense_range  "," where_take_offense_ where_take_offense_range  "]}," RuboCop Cop Rails WhereNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," build_good_method "," extract_column_and_value "," offense_range "," lambda ","value_node first "," where_method_call? "," offense_ offense_range  ","value_node first  first "]}," RuboCop Cop Rails SquishedSQLHeredocs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," lambda "]}}