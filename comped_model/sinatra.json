{" Sinatra TestMethods generate_input":{"type":"method","name":"generate_input","children":[],"call":["(send\n  (lvar :params) :map) join ","URI  escape ","params map "]}," Sinatra TestMethods headers":{"type":"method","name":"headers","children":[],"call":[" response headers "," response "]}," Sinatra TestMethods text":{"type":"method","name":"text","children":[],"call":[" response body "," response "]}," Sinatra TestMethods status":{"type":"method","name":"status","children":[],"call":[" response status "," response "]}," Sinatra TestMethods response":{"type":"method","name":"response","children":[],"call":["Rack MockResponse  new "]}," Sinatra Session Cookie call":{"type":"method","name":"call","children":[],"call":["@app call "]}," Sinatra Session Cookie initialize":{"type":"method","name":"initialize","children":[],"call":["Rack Session Cookie  new ","(or-asgn\n  (cvasgn :@@use)\n  (sym :on)) == "]}," Sinatra Session Cookie use=":{"type":"method","name":"use=","children":[],"call":[]}," Sinatra Server tail":{"type":"method","name":"tail","children":[],"call":[" sleep "," print ","contents length ","f read ","f mtime ","f mtime > ","f seek "," loop ","File  open ","Thread  new ","Time  now ","File  size ","FileUtils  touch ","f read  length "]}," Sinatra Server start":{"type":"method","name":"start","children":[],"call":["tail_thread kill "," logger exception "," logger "," class running= "," class "," puts ","server stop "," trap ","server port ","Rack Handler Mongrel  run ","Options  port ","Sinatra Session Cookie  new ","Dispatcher  new "," tail ","Options  log_file "," tail  kill "]}," Sinatra Route genereate_route":{"type":"method","name":"genereate_route","children":[],"call":["Regexp  union "," genereate_route_with_format "," genereate_route_without_format "]}," Sinatra Route to_regex_route":{"type":"method","name":"to_regex_route","children":[],"call":["template gsub gsub ","template gsub "]}," Sinatra Route genereate_route_with_format":{"type":"method","name":"genereate_route_with_format","children":[],"call":[" to_regex_route ","template << ","@default_params []= ","template =~ ","@template dup ","@template dup  << ","@template dup  =~ ","@@template dup  dup "]}," Sinatra Route genereate_route_without_format":{"type":"method","name":"genereate_route_without_format","children":[],"call":[" to_regex_route ","template gsub! ","@template dup ","@template dup  gsub! ","@@template dup  dup "]}," Sinatra Route extract_keys":{"type":"method","name":"extract_keys","children":[],"call":[" eval ","@template scan map ","@template scan "]}," Sinatra Route recognize":{"type":"method","name":"recognize","children":[],"call":["@default_params merge ","@keys zip to_hash ","@keys zip ","@keys concat ","@keys size < ","param_values size ","@keys size ","path match captures compact ","path match captures ","path match ","@params clear ","@@keys concat  zip to_hash ","@@keys concat  zip ","@@keys concat  concat ","@@keys concat  size < ","@@keys concat  size ","@default_params merge  clear "]}," Sinatra Route initialize":{"type":"method","name":"initialize","children":[],"call":[" genereate_route "," extract_keys ","template to_s strip ","template to_s "]}," Rack Request request_method":{"type":"method","name":"request_method","children":[],"call":["@env [] "," params [] upcase "," params [] "," params ","(str \"PUT\") include? ","@env [] == "," post_tunnel_method_hack? "]}," Sinatra Options set_environment":{"type":"method","name":"set_environment","children":[],"call":[]}," Sinatra Options log_file":{"type":"method","name":"log_file","children":[],"call":["File  dirname + ","/%s.log % "," environment ","File  dirname ","%s.log % ","File  basename == ","File  basename "]}," Sinatra Options parse!":{"type":"method","name":"parse!","children":[],"call":["(send\n  (const nil :OptionParser) :new) parse! "," exit! "," puts ","opts on ","env intern ","OptionParser  new ","@environment == ","env intern  == "]}," Sinatra Logger exception":{"type":"method","name":"exception","children":[],"call":[" error ","e backtrace join ","e backtrace ","e message "]}," Sinatra Logger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Loader loaded_files":{"type":"method","name":"loaded_files","children":[],"call":["Set  new "]}," Sinatra Loader load_files":{"type":"method","name":"load_files","children":[],"call":[" loaded_files << "," loaded_files "," load ","File  expand_path ","files each ","files first ","files first is_a? ","files flatten "," loaded_File  expand_path s << "," loaded_files first  << "," loaded_files flatten  << "," loaded_File  expand_path s "," loaded_files first  "," loaded_files flatten  ","File  expand_path s each ","files first  each ","files flatten  each ","File  expand_path s first ","files first  first ","files flatten  first ","File  expand_path s first is_a? ","files first  first is_a? ","files flatten  first is_a? ","File  expand_path s flatten ","files first  flatten ","files flatten  flatten "]}," Sinatra Loader reload!":{"type":"method","name":"reload!","children":[],"call":[" load "," load_files "," loaded_files ","EventManager  reset! "," silence_warnings "]}," Sinatra Irb start!":{"type":"method","name":"start!","children":[{"type":"method","name":"reload!","children":[],"asgn":[],"call":["Loader  reload! "]},{"type":"method","name":"show!","children":[],"asgn":[null],"call":["f puts "," body ","f puts ","f puts ","f puts "," result_info ","f puts ","IO  popen ","ENV  [] "]},{"type":"method","name":"result_info","children":[],"asgn":[null],"call":[" headers inspect "," headers "," status "]},{"type":"method","name":"exit","children":[],"asgn":[],"call":[" exit! "]}],"call":[" exit! ","IRB  start ","ENV  []= ","File  exists? "," require ","ARGV  clear "," headers inspect "," headers "," status ","f puts "," body "," result_info ","IO  popen ","ENV  [] ","Loader  reload! ","Object  class_eval ","Object  send "]}," Sinatra StaticEvent each":{"type":"method","name":"each","children":[],"call":["file read ","File  open "]}," Sinatra StaticEvent attend":{"type":"method","name":"attend","children":[],"call":["context header ","File  size to_s ","File  size ","MIME_TYPES  [] ","File  extname [] ","File  extname ","context body ","EventContext  new "," physical_path_for ","request path_info ","EventContext  new  header ","EventContext  new  body "]}," Sinatra StaticEvent physical_path_for":{"type":"method","name":"physical_path_for","children":[],"call":["path gsub "]}," Sinatra StaticEvent recognize":{"type":"method","name":"recognize","children":[],"call":["File  exists? "," physical_path_for ","File  file? "]}," Sinatra StaticEvent initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Event run_through_after_filters":{"type":"method","name":"run_through_after_filters","children":[],"call":["context send "," after_filters each "," after_filters "]}," Sinatra Event recognize":{"type":"method","name":"recognize","children":[],"call":["@route recognize "]}," Sinatra Event attend":{"type":"method","name":"attend","children":[],"call":[" run_through_after_filters ","context error ","context body ","context instance_eval ","EventContext  new ","request params merge! ","@route params ","request params "," call_filters "," after_filters ","context status ","context send "," before_filters "," catch "," run_safely ","EventContext  new  error ","EventContext  new  body ","EventContext  new  instance_eval ","EventContext  new  status ","EventContext  new  send "]}," Sinatra Event initialize":{"type":"method","name":"initialize","children":[],"call":["EventManager  register_event ","Route  new ","regex gsub! ","SPLAT  to_s ","@param_keys << ","@path to_s gsub ","@path to_s ","URI  encode ","match == ","URI  encode  to_s gsub ","URI  encode  to_s "]}," Sinatra Event after_attend":{"type":"method","name":"after_attend","children":[],"call":[]}," Sinatra EventManager not_found":{"type":"method","name":"not_found","children":[],"call":[" erb ","SINATRA_ROOT  + "," request request_method == "," request request_method "," request "," request path_info == "," request path_info "," status ","Event  new "]}," Sinatra EventManager present_error":{"type":"method","name":"present_error","children":[],"call":[" determine_event "]}," Sinatra EventManager determine_event":{"type":"method","name":"determine_event","children":[],"call":["e recognize ","e verb == ","e verb "," events find "," method "," events "]}," Sinatra EventManager register_event":{"type":"method","name":"register_event","children":[],"call":["(or-asgn\n  (ivasgn :@events)\n  (array)) << "]}," Sinatra EventManager events":{"type":"method","name":"events","children":[],"call":[]}," Sinatra EventManager reset!":{"type":"method","name":"reset!","children":[],"call":["@events clear "]}," Sinatra Environment prepare_loggers":{"type":"method","name":"prepare_loggers","children":[],"call":["klass logger= ","(const nil :Server) each "]}," Sinatra Environment prepare":{"type":"method","name":"prepare","children":[],"call":["Options  parse! "]}," Sinatra Dsl sessions":{"type":"method","name":"sessions","children":[],"call":["Sinatra Session Cookie  use= "]}," Sinatra Dsl layout":{"type":"method","name":"layout","children":[],"call":["Layouts  []= ","File  read ","%s/%s % ","options [] "," block_given? "]}," Sinatra Dsl test":{"type":"method","name":"test","children":[],"call":["Sinatra Options  environment == ","Sinatra Options  environment "]}," Sinatra Dsl production":{"type":"method","name":"production","children":[],"call":["Sinatra Options  environment == ","Sinatra Options  environment "]}," Sinatra Dsl development":{"type":"method","name":"development","children":[],"call":["Sinatra Options  environment == ","Sinatra Options  environment "]}," Sinatra Dsl static":{"type":"method","name":"static","children":[],"call":["Sinatra StaticEvent  new "]}," Sinatra Dsl helpers":{"type":"method","name":"helpers","children":[],"call":["Sinatra EventContext  class_eval "]}," Sinatra Dsl after_attend":{"type":"method","name":"after_attend","children":[],"call":["Sinatra Event  after_attend "]}," Sinatra Dsl delete":{"type":"method","name":"delete","children":[],"call":["Sinatra Event  new "]}," Sinatra Dsl put":{"type":"method","name":"put","children":[],"call":["Sinatra Event  new "]}," Sinatra Dsl post":{"type":"method","name":"post","children":[],"call":["Sinatra Event  new "]}," Sinatra Dsl get":{"type":"method","name":"get","children":[],"call":["Sinatra Event  new "]}," Sinatra Dispatcher call":{"type":"method","name":"call","children":[],"call":["result body "," default_headers merge ","result headers "," default_headers ","result status ","event attend ","EventManager  determine_event ","@request path_info ","@request request_method downcase intern ","@request request_method downcase ","@request request_method ","Rack Request  new ","Loader  reload! ","Options  environment == ","Options  environment ","event attend  body ","event attend  headers ","event attend  status ","EventManager  determine_event  attend ","EventManager  determine_EventManager  determine_event  ","Rack Request  new  path_info ","Rack Request  new  request_method downcase intern ","Rack Request  new  request_method downcase ","Rack Request  new  request_method "]}," Sinatra Dispatcher default_headers":{"type":"method","name":"default_headers","children":[],"call":[]}," Symbol to_proc":{"type":"method","name":"to_proc","children":[],"call":["args shift __send__ ","args shift ","Proc  new "]}," Module attr_with_default":{"type":"method","name":"attr_with_default","children":[],"call":[" instance_variable_get "," define_method "," instance_variable_set "]}," Object class_def":{"type":"method","name":"class_def","children":[],"call":[" define_method "," class_eval "]}," Object meta_def":{"type":"method","name":"meta_def","children":[],"call":[" define_method "," meta_eval "]}," Object meta_eval":{"type":"method","name":"meta_eval","children":[],"call":[" metaclass instance_eval "," metaclass "]}," Object metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Kernel silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Hash symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["h []= ","k to_sym "," inject "]}," Class cattr_accessor":{"type":"method","name":"cattr_accessor","children":[],"call":[" cattr_writer "," cattr_reader "]}," Class cattr_writer":{"type":"method","name":"cattr_writer","children":[],"call":[" class_eval ","options [] == ","options [] ","syms flatten each ","syms flatten ","syms pop ","syms last is_a? ","syms last ","syms pop  [] == ","syms pop  [] "]}," Class cattr_reader":{"type":"method","name":"cattr_reader","children":[],"call":[" class_eval ","sym is_a? ","syms flatten each ","syms flatten "]}," Array to_hash":{"type":"method","name":"to_hash","children":[],"call":["h []= "," inject "]}," Sinatra EventContext log_event":{"type":"method","name":"log_event","children":[],"call":[" logger exception "," error "," logger "," logger info "," params inspect "," params "," status "," request path_info "," request "," request request_method "]}," Sinatra EventContext redirect":{"type":"method","name":"redirect","children":[],"call":[" header "," status "," logger info "," logger "]}," Sinatra EventContext params":{"type":"method","name":"params","children":[],"call":["@request params symbolize_keys ","@request params ","h merge ","@route_params merge ","h [] ","k to_s ","Symbol  === ","Hash  new ","hash merge! "]}," Sinatra EventContext session":{"type":"method","name":"session","children":[],"call":[" request env [] "," request env "," request ","@request env [] ","@request env "]}," Sinatra EventContext headers":{"type":"method","name":"headers","children":[],"call":["@headers merge! "]}," Sinatra EventContext error":{"type":"method","name":"error","children":[],"call":[" erb ","SINATRA_ROOT  + "," status "]}," Sinatra EventContext body":{"type":"method","name":"body","children":[],"call":["block call "," response body "," response "," response body= "]}," Sinatra EventContext status":{"type":"method","name":"status","children":[],"call":[" response status "," response "," response status= "]}," Sinatra EventContext initialize":{"type":"method","name":"initialize","children":[],"call":["@response body= "]}," Sinatra Renderer determine_template":{"type":"method","name":"determine_template","children":[],"call":["File  read ","%s/%s.%s % ","options [] ","template is_a? "]}," Sinatra Renderer render":{"type":"method","name":"render","children":[],"call":[" send "," determine_template ","render_%s % ","Layouts  [] ","options [] "," block_given? ","DEFAULT_OPTIONS  merge ","DEFAULT_OPTIONS  merge  [] "]}," Sinatra Event call_filters":{"type":"method","name":"call_filters","children":[],"call":["context instance_eval ","context send ","filter_set each "]}," Sinatra Event run_safely":{"type":"method","name":"run_safely","children":[],"call":["@@mutex synchronize ","Options  use_mutex? "]}," Sinatra Event setup_filter":{"type":"method","name":"setup_filter","children":[],"call":[]}," Sinatra Event before_attend":{"type":"method","name":"before_attend","children":[],"call":[]}," Sinatra Dsl before_attend":{"type":"method","name":"before_attend","children":[],"call":["Sinatra Event  before_attend "]}," Sinatra Dsl config_for":{"type":"method","name":"config_for","children":[],"call":["Sinatra Options  environment == ","env to_sym ","Sinatra Options  environment "]}," NilClass to_result":{"type":"method","name":"to_result","children":[],"call":[]}," Fixnum to_result":{"type":"method","name":"to_result","children":[],"call":["args shift to_result ","args shift ","cx status "]}," Symbol to_result":{"type":"method","name":"to_result","children":[],"call":["cx send "]}," Array to_result":{"type":"method","name":"to_result","children":[],"call":[" shift to_result "," shift "]}," String to_result":{"type":"method","name":"to_result","children":[],"call":["args shift to_result ","args shift "]}," Proc to_result":{"type":"method","name":"to_result","children":[],"call":["args shift to_result ","args shift ","cx instance_eval "]}," Enumerable eject":{"type":"method","name":"eject","children":[],"call":["block [] "," find "]}," Array to_proc":{"type":"method","name":"to_proc","children":[],"call":["args shift __send__ ","args + "," [] ","args shift ","Proc  new "]}," Hash pass":{"type":"method","name":"pass","children":[],"call":["keys include? ! ","keys include? "," reject "]}," Hash to_params":{"type":"method","name":"to_params","children":[],"call":["(send nil :map) join ","URI  escape "," map "]}," String from_param":{"type":"method","name":"from_param","children":[],"call":["URI  unescape "]}," String to_param":{"type":"method","name":"to_param","children":[],"call":["URI  escape "]}," mime":{"type":"method","name":"mime","children":[],"call":["Rack File MIME_TYPES  []= ","ext to_s ","Rack Mime MIME_TYPES  []= ","ext to_s [] == ","ext to_s [] "," warn "]}," set_option":{"type":"method","name":"set_option","children":[],"call":[" set_options "]}," set_options":{"type":"method","name":"set_options","children":[],"call":["Sinatra  application options= ","Sinatra  application ","Sinatra Application  default_options merge! ","Sinatra Application  default_options "]}," configures":{"type":"method","name":"configures","children":[],"call":["envs empty? ","envs include? ","Sinatra  application options env ","Sinatra  application options ","Sinatra  application ","Sinatra  application reloading ! ","Sinatra  application reloading "]}," use_in_file_templates!":{"type":"method","name":"use_in_file_templates!","children":[],"call":["Sinatra  application templates [] << ","Sinatra  application templates [] ","Sinatra  application templates ","Sinatra  application ","Sinatra  application templates []= ","1 to_sym ","line =~ ","data each ","StringIO  new ","IO  read split last ","IO  read split ","IO  read "," caller first split first "," caller first split "," caller first "," caller "," require ","data each_line ","data gsub! "," caller first sub ","Sinatra  application IO  read split last  [] << ","Sinatra  application IO  read split last  [] ","Sinatra  application IO  read split last  ","Sinatra  application IO  read split last  []= ","StringIO  new  each ","IO  read split last  each ","StringIO  new  each_line ","IO  read split last  each_line ","StringIO  new  gsub! ","IO  read split last  gsub! "]}," template":{"type":"method","name":"template","children":[],"call":["Sinatra  application define_template ","Sinatra  application "]}," layout":{"type":"method","name":"layout","children":[],"call":["Sinatra  application define_template ","Sinatra  application "]}," not_found":{"type":"method","name":"not_found","children":[],"call":["Sinatra  application define_error ","Sinatra  application "]}," error":{"type":"method","name":"error","children":[],"call":["Sinatra  application define_error ","Sinatra  application "]}," helpers":{"type":"method","name":"helpers","children":[],"call":["Sinatra EventContext  class_eval ","Sinatra Application  send "]}," before":{"type":"method","name":"before","children":[],"call":["Sinatra  application define_filter ","Sinatra  application "]}," delete":{"type":"method","name":"delete","children":[],"call":["Sinatra  application define_event ","Sinatra  application "]}," put":{"type":"method","name":"put","children":[],"call":["Sinatra  application define_event ","Sinatra  application "]}," post":{"type":"method","name":"post","children":[],"call":["Sinatra  application define_event ","Sinatra  application "]}," get":{"type":"method","name":"get","children":[],"call":["Sinatra  application define_event ","Sinatra  application "]}," Sinatra Environment setup!":{"type":"method","name":"setup!","children":[],"call":["Rack Utils  escape_html ","@error backtrace join ","@error backtrace ","@error class name + + ","@error message ","@error class name + ","@error class name ","@error class "," params inspect "," params "," request env [] "," request env "," request "," error "," request path_info "," request request_method downcase "," request request_method "," not_found ","File  read ","File  dirname + "," params [] ","File  dirname "," get "," configures "," raise ","Sinatra  options raise_errors ","Sinatra  options "," configure "," request env []  backtrace join "," request env []  backtrace "," request env []  class name + + "," request env []  message "," request env []  class name + "," request env []  class name "," request env []  class "]}," Sinatra Application call":{"type":"method","name":"call","children":[],"call":["context finish ","context body= ","body kind_of? ","request request_method upcase == ","request request_method upcase ","request request_method ","body respond_to? ","returned to_result ","context instance_eval ","result block "," catch "," run_safely ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke "," errors [] "," errors ","e class ","context status ","request env []= ","request env "," filters [] each "," filters [] "," filters ","result status ","EventContext  new ","result params ","Rack Response  new "," lookup ","Rack Request  new "," reload! "," development? "," pipeline call "," pipeline "," options reload != "," options reload "," options ","EventContext  new  finish ","context returned to_result = ","EventContext  new  body= ","returned to_result  kind_of? ","Rack Request  new  Rack Request  new _method upcase == ","Rack Request  new  Rack Request  new _method upcase ","Rack Request  new  Rack Request  new _method ","returned to_result  respond_to? ","returned to_(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  ","returned to_ lookup  ","EventContext  new  instance_eval ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  block "," lookup  block ","EventContext  new  status ","Rack Request  new  env []= ","Rack Request  new  env ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  status "," lookup  status ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  params "," lookup  params "]}," Sinatra Application run_safely":{"type":"method","name":"run_safely","children":[],"call":[" mutex synchronize "," mutex "," options mutex "," options "," development? "]}," Sinatra Application mutex":{"type":"method","name":"mutex","children":[],"call":["Mutex  new "]}," Sinatra Application reload!":{"type":"method","name":"reload!","children":[],"call":["Environment  setup! ","Kernel  load "," load_default_events! "," clearables each "," clearables "," options app_file "," options "," load_development_configuration! "," development? "," load_default_configuration! "]}," Sinatra Application development?":{"type":"method","name":"development?","children":[],"call":[" options env == "," options env "," options "]}," Sinatra Application options":{"type":"method","name":"options","children":[],"call":["OpenStruct  new "," default_options "]}," Sinatra Application lookup":{"type":"method","name":"lookup","children":[],"call":[" errors [] invoke "," errors [] "," errors "," events [] eject "," events [] "," events ","method == ","request request_method downcase to_sym ","request request_method downcase ","request request_method ","request request_method downcase to_sym  == ","request request_request request_method downcase to_sym  downcase to_sym ","request request_request request_method downcase to_sym  downcase ","request request_request request_method downcase to_sym  "]}," Sinatra Application define_filter":{"type":"method","name":"define_filter","children":[],"call":[" filters [] << "," filters [] "," filters "]}," Sinatra Application define_error":{"type":"method","name":"define_error","children":[],"call":[" errors []= ","Error  new "," errors "]}," Sinatra Application define_template":{"type":"method","name":"define_template","children":[],"call":[" templates []= "," templates "]}," Sinatra Application define_event":{"type":"method","name":"define_event","children":[],"call":[" events [] << ","Event  new "," events [] "," events "," Event  new s [] << "," Event  new s [] "," Event  new s "]}," Sinatra Application initialize":{"type":"method","name":"initialize","children":[],"call":[" load_default_events! "," load_options! ","Hash  new ","hash []= "," load_default_configuration! ","OpenStruct  new "," class default_options "," class "]}," Sinatra Application load_default_events!":{"type":"method","name":"load_default_events!","children":[],"call":[" events [] << ","Static  new "," events [] "," events "]}," Sinatra Application load_options!":{"type":"method","name":"load_options!","children":[],"call":["(send\n  (const nil :OptionParser) :new) parse! ","o !~ ","ARGV  dup select ","ARGV  dup "," default_options []= "," default_options ","op on ","OptionParser  new "," require "]}," Sinatra Application default_options":{"type":"method","name":"default_options","children":[],"call":[" class default_options "," class "]}," Sinatra EventContext method_missing":{"type":"method","name":"method_missing","children":[],"call":["@response send ","@response respond_to? "]}," Sinatra EventContext complete":{"type":"method","name":"complete","children":[],"call":["@response body "]}," Sinatra EventContext stop":{"type":"method","name":"stop","children":[],"call":[" throw "]}," Sinatra EventContext data":{"type":"method","name":"data","children":[],"call":[" params keys first "," params keys "," params "]}," Sinatra Builder render_builder":{"type":"method","name":"render_builder","children":[],"call":["xml target! ","content call "," eval "," binding "," Builder XmlMarkup  new "," require "," Builder XmlMarkup  new  target! "]}," Sinatra Builder builder":{"type":"method","name":"builder","children":[],"call":[" render ","Proc  new ","content nil? ","content is_a? "]}," Sinatra Sass render_sass":{"type":"method","name":"render_sass","children":[],"call":[" Sass Engine  new render "," Sass Engine  new "]}," Sinatra Sass sass":{"type":"method","name":"sass","children":[],"call":[" render ","options []= "," require "]}," Sinatra Haml render_haml":{"type":"method","name":"render_haml","children":[],"call":[" Haml Engine  new render ","options [] "," Haml Engine  new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :options))\n  (hash)) merge ","Sinatra  options haml ","Sinatra  options "]}," Sinatra Haml haml":{"type":"method","name":"haml","children":[],"call":[" render "," require "]}," Sinatra Erb render_erb":{"type":"method","name":"render_erb","children":[],"call":[" ERB  new result "," binding "," ERB  new "," eval "," ERB  new src ","locals_hash []= ","locals_code << ","locals_opt each ","options delete "]}," Sinatra Erb erb":{"type":"method","name":"erb","children":[],"call":[" render "," require "]}," Sinatra RenderingHelpers templates":{"type":"method","name":"templates","children":[],"call":["Sinatra  application templates ","Sinatra  application "]}," Sinatra RenderingHelpers read_template_file":{"type":"method","name":"read_template_file","children":[],"call":[" raise ","Errno ENOENT  new ","File  read ","File  exists? ","File  join ","Sinatra  application options views ","Sinatra  application options ","Sinatra  application ","options [] "]}," Sinatra RenderingHelpers resolve_template":{"type":"method","name":"resolve_template","children":[],"call":[" read_template_file "," resolve_template "," templates [] "," templates ","template call "]}," Sinatra RenderingHelpers determine_layout":{"type":"method","name":"determine_layout","children":[],"call":[" resolve_template ","options [] ","options [] == "]}," Sinatra RenderingHelpers render":{"type":"method","name":"render","children":[],"call":["m call "," resolve_template "," determine_layout "," method "," method  call "," resolve_te method plate "," determine_ determine_layout  "," deter method ine_layout ","  method ethod "]}," Sinatra ResponseHelpers headers":{"type":"method","name":"headers","children":[],"call":["@response headers ","@response headers merge! "]}," Sinatra ResponseHelpers redirect":{"type":"method","name":"redirect","children":[],"call":[" throw "," headers "," status "," header "]}," Sinatra Streaming send_file_headers!":{"type":"method","name":"send_file_headers!","children":[],"call":[" header "," headers [] == "," headers [] "," headers ","options [] ","options [] dup ","options [] nil? ! ","options [] nil? ","options [] strip ","options [] to_s "," throw ","last_modified == "," request env [] "," request env "," request "," raise ","options key? ","(sym :length) each ","DEFAULT_SEND_FILE_OPTIONS  merge ","DEFAULT_SEND_FILE_OPTIONS  merge  [] ","DEFAULT_SEND_FILE_OPTIONS  merge  [] dup ","DEFAULT_SEND_FILE_OPTIONS  merge  [] nil? ! ","DEFAULT_SEND_FILE_OPTIONS  merge  [] nil? ","DEFAULT_SEND_FILE_OPTIONS  merge  [] strip ","DEFAULT_SEND_FILE_OPTIONS  merge  [] to_s ","options []  == ","DEFAULT_SEND_FILE_OPTIONS  merge  key? "]}," Sinatra Streaming send_data":{"type":"method","name":"send_data","children":[],"call":[" throw ","options [] "," send_file_headers! ","options merge ","data size "]}," Sinatra Streaming send_file":{"type":"method","name":"send_file","children":[],"call":[" throw ","file read ","options [] ","File  open ","FileStreamer  new "," send_file_headers! ","File  mtime httpdate ","File  mtime ","Rack File MIME_TYPES  [] ","File  extname [] ","File  extname ","File  basename ","File  size "," raise ","File  readable? ","File  file? ","DEFAULT_SEND_FILE_OPTIONS  [] ","options []= ","options key? "]}," Sinatra Streaming FileStreamer each":{"type":"method","name":"each","children":[],"call":["file read "," options [] "," options ","File  open "," path "]}," Sinatra Streaming FileStreamer to_result":{"type":"method","name":"to_result","children":[],"call":[]}," Sinatra Streaming FileStreamer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Static block":{"type":"method","name":"block","children":[],"call":[" send_file ","Sinatra  application options public + "," request path_info "," request ","Sinatra  application options public ","Sinatra  application options ","Sinatra  application ","Proc  new "," unescape "]}," Sinatra Static invoke":{"type":"method","name":"invoke","children":[],"call":["Result  new "," block ","File  file? ","Sinatra  application options public + ","request path_info ","Sinatra  application options public ","Sinatra  application options ","Sinatra  application "," unescape "," send_file ","Proc  new ","@app options public + ","@app options public ","@app options ","request @app options public + _info "]}," Sinatra Error invoke":{"type":"method","name":"invoke","children":[],"call":["Result  new "," block "," code "," options "]}," Sinatra Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Event invoke":{"type":"method","name":"invoke","children":[],"call":["Result  new "," block ","params merge! "," param_keys zip to_hash "," param_keys zip ","$~ captures map ","$~ captures "," param_keys "," pattern =~ ","request path_info squeeze ","request path_info "," pattern ","host === ","request host "," options [] "," options ","params []= ","$~ [] ","request user_agent =~ ","request user_agent ","k =~ ","params delete_if ","splats empty? ","(send\n  (lvar :params) :select) sort map ","(send\n  (lvar :params) :select) sort ","params select "," unescape "," options []  === ","request  options []  ","request user_ options []  =~ ","request user_ options []  ","(send\n  (lvar :params) :select) sort map  empty? "]}," Sinatra run":{"type":"method","name":"run","children":[],"call":[" puts "," port ","server stop "," trap ","Rack Handler Mongrel  run "," build_application "," require "," env "," server run "," host "," application "," server "," server name "]}," Sinatra build_application":{"type":"method","name":"build_application","children":[],"call":["Rack CommonLogger  new ","Sinatra  options logging == ","Sinatra  options logging ","Sinatra  options ","Rack Session Cookie  new ","Sinatra  options sessions == ","Sinatra  options sessions "," application "," sinatra_warn "," Rack CommonLogger  new lication "," Rack Session Cookie  new lication ","  application lication "]}," Sinatra env":{"type":"method","name":"env","children":[],"call":[" application options env "," application options "," application "," options environment "," options "," sinatra_warn "]}," Sinatra port":{"type":"method","name":"port","children":[],"call":[" application options port "," application options "," application "," options port "," options "," sinatra_warn "]}," Sinatra application=":{"type":"method","name":"application=","children":[],"call":[" const_set ","Class  new "," remove_const ","Sinatra  class_eval "," sinatra_warn "," raise ","value nil? "]}," Sinatra application":{"type":"method","name":"application","children":[],"call":["Sinatra Environment  setup! ","Application  new "," sinatra_warn "]}," Sinatra options":{"type":"method","name":"options","children":[],"call":[" application options "," application ","Sinatra Application  options "," sinatra_warn "]}," Sinatra Version combined":{"type":"method","name":"combined","children":[],"call":[]}," Rack Request post_tunnel_method_hack?":{"type":"method","name":"post_tunnel_method_hack?","children":[],"call":["POST_TUNNEL_METHODS_ALLOWED  include? "," POST fetch upcase "," POST fetch "," POST ","@env [] == ","@env [] "]}," Rack Request user_agent":{"type":"method","name":"user_agent","children":[],"call":[" env [] "," env ","@env [] "]}," Class dslify_writer":{"type":"method","name":"dslify_writer","children":[],"call":[" class_eval ","syms each "]}," TestCase should":{"type":"method","name":"should","children":[],"call":["@response should "]}," Sinatra Test Methods method_missing":{"type":"method","name":"method_missing","children":[],"call":["@response send ","@response respond_to? "]}," Sinatra Test Methods follow!":{"type":"method","name":"follow!","children":[],"call":[" get_it ","@response location "]}," Sinatra Test Methods map_easys":{"type":"method","name":"map_easys","children":[],"call":["m []= ","m delete ","m has_key? "," easy_env_map inject ","params dup "," easy_env_map "]}," Sinatra Test Methods easy_env_map":{"type":"method","name":"easy_env_map","children":[],"call":[]}," MockRequest env_for":{"type":"method","name":"env_for","children":[],"call":[" env_for_without_env merge "," env_for_without_env ","opts delete "]}," NilClass from_param":{"type":"method","name":"from_param","children":[],"call":[]}," Sinatra Application load_development_configuration!":{"type":"method","name":"load_development_configuration!","children":[],"call":["(dstr\n  (str \"        <!DOCTYPE html>\\n\")\n  (str \"        <html>\\n\")\n  (str \"          <head>\\n\")\n  (str \"            <style type=\\\"text/css\\\" media=\\\"screen\\\">\\n\")\n  (str \"              body {font-family:verdana;color:#333}\\n\")\n  (str \"              #content {width:700px;margin-left:20px}\\n\")\n  (str \"              #content h1 {width:99%;color:#1D6B8D;font-weight:bold}\\n\")\n  (str \"              #stacktrace {margin-top:-20px}\\n\")\n  (str \"              #stacktrace pre {font-size:12px;border-left:2px solid #ddd;padding-left:10px}\\n\")\n  (str \"              #stacktrace img {margin-top:10px}\\n\")\n  (str \"            </style>\\n\")\n  (str \"          </head>\\n\")\n  (str \"          <body>\\n\")\n  (str \"            <div id=\\\"content\\\">\\n\")\n  (str \"              <img src=\\\"/sinatra_custom_images/500.png\\\">\\n\")\n  (str \"              <div class=\\\"info\\\">\\n\")\n  (str \"                Params: <pre>\")\n  (begin\n    (send\n      (send nil :params) :inspect))\n  (str \"</pre>\\n\")\n  (str \"              </div>\\n\")\n  (str \"              <div id=\\\"stacktrace\\\">\\n\")\n  (str \"                <h1>\")\n  (begin\n    (send nil :escape_html\n      (send\n        (send\n          (send\n            (send\n              (ivar :@error) :class) :name) :+\n          (str \" - \")) :+\n        (send\n          (send\n            (ivar :@error) :message) :to_s))))\n  (str \"</h1>\\n\")\n  (str \"                <pre><code>\")\n  (begin\n    (send nil :escape_html\n      (send\n        (send\n          (ivar :@error) :backtrace) :join\n        (str \"\\n\"))))\n  (str \"</code></pre>\\n\")\n  (str \"              </div>\\n\")\n  (str \"            </div>\\n\")\n  (str \"          </body>\\n\")\n  (str \"        </html>\\n\")) gsub "," escape_html ","@error backtrace join ","@error backtrace ","@error class name + + ","@error message to_s ","@error message ","@error class name + ","@error class name ","@error class "," params inspect "," params "," request env [] "," request env "," request "," error ","(dstr\n  (str \"        <!DOCTYPE html>\\n\")\n  (str \"        <html>\\n\")\n  (str \"          <head>\\n\")\n  (str \"            <style type=\\\"text/css\\\">\\n\")\n  (str \"            body {text-align:center;color:#888;font-family:arial;font-size:22px;margin:20px;}\\n\")\n  (str \"            #content {margin:0 auto;width:500px;text-align:left}\\n\")\n  (str \"            </style>\\n\")\n  (str \"          </head>\\n\")\n  (str \"          <body>\\n\")\n  (str \"            <h2>Sinatra doesn't know this diddy.</h2>\\n\")\n  (str \"            <img src='/sinatra_custom_images/404.png'>\\n\")\n  (str \"            <div id=\\\"content\\\">\\n\")\n  (str \"              Try this:\\n\")\n  (str \"              <pre>\")\n  (begin\n    (send\n      (send\n        (send nil :request) :request_method) :downcase))\n  (str \" \\\"\")\n  (begin\n    (send\n      (send nil :request) :path_info))\n  (str \"\\\" do\\n  .. do something ..\\nend<pre>\\n\")\n  (str \"            </div>\\n\")\n  (str \"          </body>\\n\")\n  (str \"        </html>\\n\")) gsub "," request path_info "," request request_method downcase "," request request_method "," not_found ","File  read ","File  dirname + "," params [] ","File  dirname "," content_type "," get ","(dstr\n  (str \"        <!DOCTYPE html>\\n\")\n  (str \"        <html>\\n\")\n  (str \"          <head>\\n\")\n  (str \"            <style type=\\\"text/css\\\" media=\\\"screen\\\">\\n\")\n  (str \"              body {font-family:verdana;color:#333}\\n\")\n  (str \"              #content {width:700px;margin-left:20px}\\n\")\n  (str \"              #content h1 {width:99%;color:#1D6B8D;font-weight:bold}\\n\")\n  (str \"              #stacktrace {margin-top:-20px}\\n\")\n  (str \"              #stacktrace pre {font-size:12px;border-left:2px solid #ddd;padding-left:10px}\\n\")\n  (str \"              #stacktrace img {margin-top:10px}\\n\")\n  (str \"            </style>\\n\")\n  (str \"          </head>\\n\")\n  (str \"          <body>\\n\")\n  (str \"            <div id=\\\"content\\\">\\n\")\n  (str \"              <img src=\\\"/sinatra_custom_images/500.png\\\">\\n\")\n  (str \"              <div class=\\\"info\\\">\\n\")\n  (str \"                Params: <pre>\")\n  (begin\n    (send\n      (send nil :params) :inspect))\n  (str \"</pre>\\n\")\n  (str \"              </div>\\n\")\n  (str \"              <div id=\\\"stacktrace\\\">\\n\")\n  (str \"                <h1>\")\n  (begin\n    (send nil :escape_html\n      (send\n        (send\n          (send\n            (send\n              (ivar : request env [] ) :class) :name) :+\n          (str \" - \")) :+\n        (send\n          (send\n            (ivar : request env [] ) :message) :to_s))))\n  (str \"</h1>\\n\")\n  (str \"                <pre><code>\")\n  (begin\n    (send nil :escape_html\n      (send\n        (send\n          (ivar : request env [] ) :backtrace) :join\n        (str \"\\n\"))))\n  (str \"</code></pre>\\n\")\n  (str \"              </div>\\n\")\n  (str \"            </div>\\n\")\n  (str \"          </body>\\n\")\n  (str \"        </html>\\n\")) gsub "," request env []  backtrace join "," request env []  backtrace "," request env []  class name + + "," request env []  message to_s "," request env []  message "," request env []  class name + "," request env []  class name "," request env []  class "]}," Sinatra Application load_default_configuration!":{"type":"method","name":"load_default_configuration!","children":[],"call":[" not_found "," error "," configure "," events [] << ","Static  new "," events [] "," events "]}," Sinatra Application dispatch":{"type":"method","name":"dispatch","children":[],"call":["context finish ","context body= ","body kind_of? ","request env [] upcase == ","request env [] upcase ","request env [] ","request env ","body respond_to? ","returned to_result ","context instance_eval ","result block "," catch ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke "," errors [] "," errors ","e class "," raise ","e class != "," options raise_errors "," options ","context status ","request env []= ","context reset! ","context response status= ","result status ","context response ","context route_params= ","result params "," lookup ","context request "," filters [] each "," filters [] "," filters ","EventContext  new ","Rack Response  new ","Rack Request  new ","e class code ","request env [] << ","msg << ","e backtrace join ","e backtrace ","e message ","e class name ","EventContext  new  finish ","context returned to_result = ","EventContext  new  body= ","returned to_result  kind_of? ","Rack Request  new  env [] upcase == ","Rack Request  new  env [] upcase ","Rack Request  new  env [] ","Rack Request  new  env ","returned to_result  respond_to? ","returned to_(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  ","returned to_ lookup  ","EventContext  new  instance_eval ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  block "," lookup  block ","EventContext  new  status ","Rack Request  new  env []= ","EventContext  new  reset! ","EventContext  new  response status= ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  status "," lookup  status ","EventContext  new  response ","EventContext  new  route_params= ","(or\n  (send\n    (send nil :errors) :[]\n    (send\n      (lvar :e) :class))\n  (send\n    (send nil :errors) :[]\n    (const nil :ServerError))) invoke  params "," lookup  params ","EventContext  new  request ","context Rack Request  new  ","Rack Request  new  env [] << "]}," Sinatra Application pipeline":{"type":"method","name":"pipeline","children":[],"call":["klass new "," middleware inject "," method "," middleware "]}," Sinatra Application middleware":{"type":"method","name":"middleware","children":[],"call":[" optional_middleware + "," explicit_middleware "," optional_middleware "]}," Sinatra Application explicit_middleware":{"type":"method","name":"explicit_middleware","children":[],"call":[]}," Sinatra Application optional_middleware":{"type":"method","name":"optional_middleware","children":[],"call":["(begin\n  (if\n    (send\n      (send nil :options) :logging)\n    (array\n      (const\n        (const nil :Rack) :CommonLogger)\n      (array)\n      (nil)) nil)) compact "," options sessions "," options "," options logging "]}," Sinatra Application use":{"type":"method","name":"use","children":[],"call":["@middleware push last ","@middleware push "," fail ","klass respond_to? "]}," Sinatra Application reloading?":{"type":"method","name":"reloading?","children":[],"call":["@reloading == "]}," Sinatra Application production?":{"type":"method","name":"production?","children":[],"call":[" options env == "," options env "," options "]}," Sinatra Application test?":{"type":"method","name":"test?","children":[],"call":[" options env == "," options env "," options "]}," Sinatra Application before":{"type":"method","name":"before","children":[],"call":[" filter "]}," Sinatra Application filter":{"type":"method","name":"filter","children":[],"call":[" filters [] << "," filters [] "," filters "]}," Sinatra Application not_found":{"type":"method","name":"not_found","children":[],"call":[" error "]}," Sinatra Application error":{"type":"method","name":"error","children":[],"call":[" errors []= ","Error  new "," errors "]}," Sinatra Application layout":{"type":"method","name":"layout","children":[],"call":[" template "]}," Sinatra Application template":{"type":"method","name":"template","children":[],"call":[" templates []= "," templates "]}," Sinatra Application delete":{"type":"method","name":"delete","children":[],"call":[" event "]}," Sinatra Application put":{"type":"method","name":"put","children":[],"call":[" event "]}," Sinatra Application head":{"type":"method","name":"head","children":[],"call":[" event "]}," Sinatra Application post":{"type":"method","name":"post","children":[],"call":[" event "]}," Sinatra Application get":{"type":"method","name":"get","children":[],"call":[" event "]}," Sinatra Application event":{"type":"method","name":"event","children":[],"call":[" events [] push last "," events [] push ","Event  new "," events [] "," events "]}," Sinatra Application disable":{"type":"method","name":"disable","children":[],"call":[" set ","opts each "]}," Sinatra Application enable":{"type":"method","name":"enable","children":[],"call":[" set ","opts each "]}," Sinatra Application set":{"type":"method","name":"set","children":[],"call":[" options send "," options "," set ","option each ","option kind_of? ","value == "]}," Sinatra Application configures":{"type":"method","name":"configures","children":[],"call":["envs include? "," options env "," options ","envs empty? "," reloading? "]}," Sinatra Application load_default_options_from_command_line!":{"type":"method","name":"load_default_options_from_command_line!","children":[],"call":[]}," Sinatra EventContext reset!":{"type":"method","name":"reset!","children":[],"call":[]}," Sinatra ResponseHelpers entity_tag":{"type":"method","name":"entity_tag","children":[],"call":[" throw "," request head? "," request "," request get? ","etags include? ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_IF_NONE_MATCH\"))\n  (str \"\")) split "," request env [] "," request env "," response header []= "," response header "," response "," raise ","W/\"%s\" % ","\"%s\" % ","(or\n  (send\n    (send\n      (send nil :request) :env) :[]\n    (str \"HTTP_IF_NONE_MATCH\"))\n  (str \"\")) split  include? "]}," Sinatra ResponseHelpers last_modified":{"type":"method","name":"last_modified","children":[],"call":[" throw ","time == "," request env [] "," request env "," request "," response header []= "," response header "," response ","time httpdate ","time respond_to? ","time to_time ","time httpdate  == ","time to_time  == ","time httpdate  httpdate ","time to_time  httpdate ","time httpdate  respond_to? ","time to_time  respond_to? ","time httpdate  to_time httpdate  ","time to_time  to_time to_time  "]}," Sinatra ResponseHelpers content_type":{"type":"method","name":"content_type","children":[],"call":[" response header []= "," response header "," response ","(lvar :type) join ","(send\n  (lvar :params) :collect) join ","%s=%s % ","params collect ","params any? "," fail ","type nil? ","Rack File MIME_TYPES  [] ","type to_s ","type kind_of? ","(lvar :(lvar :type) join ) join ","(lvar :Rack File MIME_TYPES  [] ) join ","(send\n  (lvar :(send\n  (lvar :params) :collect) join ) :collect) join ","(send\n  (lvar :params) :collect) join  collect ","(send\n  (lvar :params) :collect) join  any? ","(lvar :type) join  nil? ","Rack File MIME_TYPES  []  nil? ","(lvar :type) join  to_s ","Rack File MIME_TYPES  []  to_s ","(lvar :type) join  kind_of? ","Rack File MIME_TYPES  []  kind_of? "]}," Sinatra Error code":{"type":"method","name":"code","children":[],"call":[" type code "," type "," type respond_to? "]}," Sinatra server":{"type":"method","name":"server","children":[],"call":[" eval "," options server "," options ","Rack Handler  const_defined? "," options server capitalize "]}," Sinatra host":{"type":"method","name":"host","children":[],"call":[" application options host "," application options "," application "," options host "," options "," sinatra_warn "]}," Sinatra ServerError code":{"type":"method","name":"code","children":[],"call":[]}," Sinatra NotFound code":{"type":"method","name":"code","children":[],"call":[]}," Sinatra Test Methods hash_to_param_string":{"type":"method","name":"hash_to_param_string","children":[],"call":["(send\n  (lvar :hash) :map) join ","(send\n  (lvar :pair) :map) join "," escape ","pair map ","hash map "]}," Sinatra Test Methods normalize_rack_environment":{"type":"method","name":"normalize_rack_environment","children":[],"call":["hash []= ","ENV_KEY_NAMES  [] ","env inject "]}," Sinatra Test Methods session":{"type":"method","name":"session","children":[],"call":["(send\n  (const nil :Marshal) :dump\n  (lvar :data)) pack ","Marshal  dump "," escape ","data from_params ","data respond_to? ","(send\n  (const nil :Marshal) :dump\n  (lvar :data from_params )) pack ","data from_params  from_params ","data from_params  respond_to? "]}," Rack Handler Mongrel process":{"type":"method","name":"process","children":[],"call":["body close ","body respond_to? ","response finished ","response body << ","response body ","body each ","body call ","Proc  === ","response header []= ","response header ","vs each ","headers each ","response status= ","status to_i ","@app call ","env delete ","env [] == ","env [] ","env update ","StringIO  new ","request body ","env []= "," replace ","request params "," replace  delete "," replace  [] == "," replace  [] "," replace  update "," replace  []= "]}," Rack Handler Mongrel initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rack Handler Mongrel run":{"type":"method","name":"run","children":[],"call":[]}," Sinatra Static initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Application locate_app_file":{"type":"method","name":"locate_app_file","children":[],"call":[]}," Sinatra TestHarness initialize":{"type":"method","name":"initialize","children":[],"call":["@app set "]}," Sinatra Test param_string":{"type":"method","name":"param_string","children":[],"call":["(send\n  (lvar :hash) :map) join ","(send\n  (lvar :pair) :map) join "," escape ","pair map ","hash map ","(send\n  (lvar :value) :map) * "," param_string ","value map "]}," Sinatra Test env_for":{"type":"method","name":"env_for","children":[],"call":["Rack MockRequest  env_for "," rack_opts "," rack_ rack_opts  "]}," Sinatra Test rack_opts":{"type":"method","name":"rack_opts","children":[],"call":["hash []= ","RACK_OPT_NAMES  [] ","opts inject "]}," Sinatra Test respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@response respond_to? "]}," Sinatra Test method_missing":{"type":"method","name":"method_missing","children":[],"call":["@response send ","@response respond_to? "]}," Sinatra Test status":{"type":"method","name":"status","children":[],"call":["@response status "]}," Sinatra Test body":{"type":"method","name":"body","children":[],"call":["@response body "]}," Sinatra Test follow!":{"type":"method","name":"follow!","children":[],"call":[" test_request ","@response location "," make_request "]}," Sinatra Test delete":{"type":"method","name":"delete","children":[],"call":[" test_request "," make_request "]}," Sinatra Test put":{"type":"method","name":"put","children":[],"call":[" test_request "," make_request "]}," Sinatra Test post":{"type":"method","name":"post","children":[],"call":[" test_request "," make_request "]}," Sinatra Test head":{"type":"method","name":"head","children":[],"call":[" test_request "," make_request "]}," Sinatra Test get":{"type":"method","name":"get","children":[],"call":[" test_request "," make_request "]}," Sinatra Test test_request":{"type":"method","name":"test_request","children":[],"call":["@request request "," block_given? ","opts [] "," rack_opts "," raise "," param_string ","data delete ","(lvasgn :data\n  (send\n    (lvar :args) :first)) kind_of? ","args first ","input kind_of? ","args size ","Rack MockRequest  new "," fail ","@app nil? ","Rack MockRequest  new  request "," rack_opts  [] "," rack_ rack_opts  ","args first  delete ","(lvasgn :args first \n  (send\n    (lvar :args) :first)) kind_of? "]}," Test should":{"type":"method","name":"should","children":[],"call":["@response should "]}," Sinatra Default method_missing":{"type":"method","name":"method_missing","children":[],"call":["@response send "," sinatra_warn ","@response respond_to? "]}," Sinatra Default env":{"type":"method","name":"env","children":[],"call":[" environment "," sinatra_warn "]}," Sinatra Default env=":{"type":"method","name":"env=","children":[],"call":[" set "," sinatra_warn "]}," Sinatra Default set_options":{"type":"method","name":"set_options","children":[],"call":[" set "," sinatra_warn "]}," Sinatra Default set_option":{"type":"method","name":"set_option","children":[],"call":[" set "," sinatra_warn "]}," Sinatra Default default_options":{"type":"method","name":"default_options","children":[{"type":"method","name":"merge!","children":[],"asgn":[],"call":[]}],"call":[" call "," set "," lambda "," sinatra_warn "]}," Sinatra Default configures":{"type":"method","name":"configures","children":[],"call":[" configure "," sinatra_warn "]}," Sinatra Default options":{"type":"method","name":"options","children":[],"call":["Options  new "," sinatra_warn "," class "]}," Sinatra Default Options method_missing":{"type":"method","name":"method_missing","children":[],"call":[" sinatra_warn ","name to_s !~ ","name to_s ","args empty? "," target __send__ "," target "," target respond_to? "]}," Sinatra Default invoke":{"type":"method","name":"invoke","children":[],"call":["@response body= ","res to_result "," sinatra_warn ","res respond_to? "," __send__ ","res kind_of? "]}," Sinatra Default send_file":{"type":"method","name":"send_file","children":[],"call":[" response []= "," response ","opts [] "," attachment ","opts []= ","opts key? ! ","opts key? "]}," Sinatra Default entity_tag":{"type":"method","name":"entity_tag","children":[],"call":[" etag "," sinatra_warn "]}," Sinatra Default stop":{"type":"method","name":"stop","children":[],"call":[" halt "," sinatra_warn "]}," Sinatra Default headers":{"type":"method","name":"headers","children":[],"call":[" response headers "," response "," response headers merge! "," sinatra_warn "]}," Sinatra Default const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Sinatra ServerError initialize":{"type":"method","name":"initialize","children":[],"call":[" sinatra_warn "]}," File const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," sinatra_warn":{"type":"method","name":"sinatra_warn","children":[],"call":[" warn ","message join ","(send\n  (send nil :caller) :detect) sub ","line !~ "," caller detect "," caller ","(send\n  (send nil :caller) :detect) sub  !~ "]}," Sinatra new":{"type":"method","name":"new","children":[],"call":[]}," Sinatra Default reload!":{"type":"method","name":"reload!","children":[],"call":[]}," Sinatra Default call":{"type":"method","name":"call","children":[],"call":[]}," Sinatra Default configure":{"type":"method","name":"configure","children":[],"call":[]}," Sinatra Default reloading?":{"type":"method","name":"reloading?","children":[],"call":[]}," Sinatra Base metadef":{"type":"method","name":"metadef","children":[],"call":["(sclass\n  (self)\n  (self)) send "]}," Sinatra Base dupe_routes":{"type":"method","name":"dupe_routes","children":[],"call":["hash []= ","routes dup "," routes inject "," routes "]}," Sinatra Base inherited":{"type":"method","name":"inherited","children":[],"call":["subclass send ","subclass middleware= "," middleware dup "," middleware ","subclass errors= "," errors dup "," errors ","subclass filters= "," filters dup "," filters ","subclass conditions= ","subclass templates= "," templates dup "," templates ","subclass routes= "," dupe_routes ","subclass reset! ","subclass set "," caller_files first "," caller_files ","subclass app_file? "]}," Sinatra Base reset_middleware":{"type":"method","name":"reset_middleware","children":[],"call":[]}," Sinatra Base construct_middleware":{"type":"method","name":"construct_middleware","children":[],"call":["builder to_app ","builder run "," new ","builder use ","@middleware each "," methodoverride? "," logging? "," sessions? "]}," Sinatra Base call":{"type":"method","name":"call","children":[],"call":["@callsite call "," construct_middleware ","@callsite nil? "," dup call! "," dup "," prototype call "," prototype "," reload! "," reload? "," synchronize "]}," Sinatra Base run!":{"type":"method","name":"run!","children":[],"call":[" puts "," port ","server stop ","server stop! ","server respond_to? "," trap ","handler run "," host ","(str \"== Sinatra/\") + "," environment ","handler name gsub ","handler name ","Rack Handler  get "," server "," set "," detect_rack_handler ","handler_name =~ "," bind "," quit! ","(sym :INT) each ","$stderr puts "," block_given? ","server threaded= "," settings threaded "," settings ","STDERR  puts ","server_settings merge "," settings server_settings "," settings respond_to? "," raise "," start_server ","server_settings merge! "," running? ","Rack Handler  pick "," warn ","Rack Handler  get  run "," detect_rack_handler  run ","Rack Handler  pick  run ","Rack Handler  get  name gsub "," detect_rack_handler  name gsub ","Rack Handler  pick  name gsub ","Rack Handler  get  name "," detect_rack_handler  name ","Rack Handler  pick  name "," detect_rack_Rack Handler  get  "," detect_rack_ detect_rack_handler  "," detect_rack_Rack Handler  pick  ","handler name gsub  =~ ","Rack Handler  get _name =~ "," detect_rack_handler _name =~ ","Rack Handler  pick _name =~ "," settings server_settings  merge "," settings  settings server_settings  "," settings server_settings  merge! "]}," Sinatra Base use":{"type":"method","name":"use","children":[],"call":["@middleware << "," reset_middleware "]}," Sinatra Base configure":{"type":"method","name":"configure","children":[],"call":["envs include? "," environment to_sym "," environment ","envs empty? "," reloading? "]}," Sinatra Base production?":{"type":"method","name":"production?","children":[],"call":[" environment == "," environment "]}," Sinatra Base test?":{"type":"method","name":"test?","children":[],"call":[" environment == "," environment "]}," Sinatra Base development?":{"type":"method","name":"development?","children":[],"call":[" environment == "," environment "]}," Sinatra Base compile":{"type":"method","name":"compile","children":[],"call":[" raise ","path respond_to? ","keys << ","2 [] ","match == ","URI  encode gsub ","URI  encode ","Regexp  escape ","path gsub ","special_chars join ","path keys ","path to_str gsub ","path to_str ","path names ","pattern gsub! "," encoded "," safe_ignore ","(send\n  (send\n    (lvar :match) :split\n    (regexp\n      (regopt))) :map) join ","char tr ","char =~ ","match split map ","match split ","patt gsub ","ignore << "," escaped join "," escaped ","c match ","segments join ","segments << ","parts join ","parts []= ","segment rpartition ","segment match ","segments pop ","pattern gsub ","ignore uniq join ","ignore uniq ","segment to_str gsub ","segment to_str ","path split map! ","path split ","path =~ ","(send\n  (send\n    (lvar :match) :split\n    (regexp\n      (regopt))) :map!) join ","match split map! ","segments []= ","last_segment rpartition ","last_segment match ","segments [] ","char downcase ","char == ","Mustermann  new "," mustermann_opts merge "," mustermann_opts "," encoded ern gsub! "," safe_ignore uniq join  "," encoded  gsub ","ignore uniq join  << ","segments pop s join ","segments pop s << ","segment rpartition  join ","last_segment rpartition  join ","segment rpartition  []= ","last_segment rpartition  []= ","segments pop  rpartition ","segments pop  match ","segments pop s pop "," encoded ern gsub ","ignore uniq join  uniq join ","ignore uniq join  uniq ","segments pop  to_str gsub ","segments pop  to_str ","segments pop s []= ","last_segments pop  rpartition ","segments []  rpartition ","last_segments pop  match ","segments []  match ","segments pop s [] "]}," Sinatra Base route":{"type":"method","name":"route","children":[],"call":["(or-asgn\n  (send\n    (send nil :routes) :[]\n    (lvar :verb))\n  (array)) push last ","(or-asgn\n  (send\n    (send nil :routes) :[]\n    (lvar :verb))\n  (array)) push "," routes [] "," routes ","unbound_method bind call ","unbound_method bind "," lambda "," instance_method "," define_method "," compile "," accept_mime_types ","opts [] ","opts key? "," user_agent "," host_name ","block arity != ","block arity "," invoke_hook "," send ","options each ","options delete ","options key? ","(or-asgn\n  (send\n    (ivar :@routes) :[]\n    (lvar :verb))\n  (array)) push last ","(or-asgn\n  (send\n    (ivar :@routes) :[]\n    (lvar :verb))\n  (array)) push ","@routes [] "," proc "," compile! "," enable "," empty_path_info nil? "," empty_path_info ","path == ","(or-asgn\n  (send\n    (ivar :@routes) :[]\n    (lvar :verb))\n  (array)) << "," instance_method  bind call "," instance_method  bind "]}," Sinatra Base head":{"type":"method","name":"head","children":[],"call":[" route "]}," Sinatra Base delete":{"type":"method","name":"delete","children":[],"call":[" route "]}," Sinatra Base post":{"type":"method","name":"post","children":[],"call":[" route "]}," Sinatra Base put":{"type":"method","name":"put","children":[],"call":[" route "]}," Sinatra Base get":{"type":"method","name":"get","children":[],"call":[" invoke "," head "," route ","@conditions dup ","@@conditions dup  dup "]}," Sinatra Base accept_mime_types":{"type":"method","name":"accept_mime_types","children":[],"call":[" response headers []= ","matching_types first "," response headers "," response ","matching_types empty? "," request accept & "," request accept "," request "," condition "," media_type ","types map! ","types kind_of? "]}," Sinatra Base user_agent":{"type":"method","name":"user_agent","children":[],"call":["@params []= ","$~ [] "," request user_agent =~ "," request user_agent "," request "," condition "," request user_agent to_s =~ "," request user_agent to_s "]}," Sinatra Base host_name":{"type":"method","name":"host_name","children":[],"call":["pattern === "," request host "," request "," condition "]}," Sinatra Base condition":{"type":"method","name":"condition","children":[],"call":["@conditions << "," generate_method "]}," Sinatra Base before":{"type":"method","name":"before","children":[],"call":["@filters << "," instance_eval "," lambda ","@before_filters << "," add_filter "]}," Sinatra Base media_type":{"type":"method","name":"media_type","children":[],"call":["Rack Mime  mime_type ","type to_s [] == ","type to_s [] ","type to_s ","type to_s include? ","type nil? "," mime_type "," sinatra_warn "]}," Sinatra Base use_in_file_templates!":{"type":"method","name":"use_in_file_templates!","children":[],"call":["template << "," templates []= ","1 to_sym "," templates ","line =~ ","data each_line ","data gsub! "," IO  read split [] "," IO  read split "," IO  read ","line sub ","s !~ ","(regexp\n  (str \"lib/sinatra.*\\\\.rb\")\n  (regopt)) all? "," caller detect "," caller ","line !~ ","ignore all? ","(send\n  (send nil :caller) :map) find "," caller map ","app count + ","app count "," caller_files first "," caller_files "," set "," sinatra_warn "," templates []=  << ","  templates []= s []= ","  templates []= s "," IO  read split []  each_line "," IO  read split []  gsub! "," caller_line sub s first "," caller_line sub s "]}," Sinatra Base layout":{"type":"method","name":"layout","children":[],"call":[" template "]}," Sinatra Base template":{"type":"method","name":"template","children":[],"call":[" templates []= "," templates "," caller_locations first "," caller_locations ","line to_i "]}," Sinatra Base not_found":{"type":"method","name":"not_found","children":[],"call":[" error "]}," Sinatra Base error":{"type":"method","name":"error","children":[],"call":["@errors []= "," error ","codes each ","codes respond_to? "," Array each "," Array ","codes << ","codes empty? ","(send\n  (lvar :codes) :map) flatten ","codes map "," compile! ","(or-asgn\n  (send\n    (ivar :@errors) :[]\n    (lvar :c))\n  (array)) << ","@errors [] ","codes include? ","codes flat_map "," method ","(send\n  (lvar :codes) :map) flatten  each ","codes flat_map  each ","(send\n  (lvar :codes) :map) flatten  respond_to? ","codes flat_map  respond_to? ","(send\n  (lvar :codes) :map) flatten  << ","codes flat_map  << ","(send\n  (lvar :codes) :map) flatten  empty? ","codes flat_map  empty? ","(send\n  (lvar :(send\n  (lvar :codes) :map) flatten ) :map) flatten ","(send\n  (lvar :codes flat_map ) :map) flatten ","(send\n  (lvar :codes) :map) flatten  map ","codes flat_map  map ","(send\n  (lvar :codes) :map) flatten  include? ","codes flat_map  include? ","(send\n  (lvar :codes) :map) flatten  flat_map ","codes flat_map  flat_map "]}," Sinatra Base disable":{"type":"method","name":"disable","children":[],"call":[" set ","opts each "]}," Sinatra Base enable":{"type":"method","name":"enable","children":[],"call":[" set ","opts each "]}," Sinatra Base set":{"type":"method","name":"set","children":[],"call":[" set ","Proc  new "," __send__ "," respond_to? ","option to_hash each "," method ","option to_hash ","option respond_to? ","value == "," metadef "," __send__ ! ! "," __send__ ! ","value kind_of? "," raise ","value != ","option each ","not_set ! "," class_eval "," method_defined? "," define_method ","(sclass\n  (self)\n  (self)) class_eval ","value merge ","Hash  === "," proc ","value inspect ","ignore_setter ! "," define_singleton_method "," define_singleton ","value merge ue == ","value merge ue kind_of? ","value merge ue != "," class_evalue merge  ","(sclass\n  (self)\n  (self)) class_evalue merge  ","value merge ue merge ","value merge ue inspect "]}," Sinatra Base error_detection":{"type":"method","name":"error_detection","children":[],"call":[" invoke ","errmap [] "," response status "," response ","errmap key? ","@response status >= ","@response status ","boom class ","@response status= "," raise "," options raise_errors? "," options ","@env [] << ","@env [] ","(dstr\n  (begin\n    (send\n      (lvar :boom) :class))\n  (str \" - \")\n  (begin\n    (send\n      (lvar :boom) :message))\n  (str \":\")) join ","boom backtrace ","boom message "," options dump_errors? ","@env []= ","handler nil? ","@response body= "," class errors "," class "," class errors  [] "," class errors  key? "]}," Sinatra Base invoke":{"type":"method","name":"invoke","children":[],"call":["@response body= ","res nil? ","@response status= ","(erange\n  (int 100)\n  (int 599)) === ","res respond_to? "," raise ","res inspect ","res last ","res first ","res length == ","res length ","@response headers []= ","@response headers ","headers each ","Fixnum  === ","res to_ary "," instance_eval "," catch ","(irange\n  (int 100)\n  (int 599)) === ","Array  === "," body "," headers ","res pop "," status ","res shift ","String  === ","res dup ","Integer  === ","@res to_ary ponse body= ","@res dup ponse body= ","@ catch ponse body= ","res to_ary  nil? ","res dup  nil? "," catch  nil? ","@res to_ary ponse status= ","@res dup ponse status= ","@ catch ponse status= ","res to_ary  res to_ary pond_to? ","res dup  res dup pond_to? "," catch   catch pond_to? ","res to_ary  inspect ","res dup  inspect "," catch  inspect ","res to_ary  last ","res dup  last "," catch  last ","res to_ary  first ","res dup  first "," catch  first ","res to_ary  length == ","res dup  length == "," catch  length == ","res to_ary  length ","res dup  length "," catch  length ","@res to_ary ponse headers []= ","@res dup ponse headers []= ","@ catch ponse headers []= ","@res to_ary ponse headers ","@res dup ponse headers ","@ catch ponse headers ","res to_ary  to_ary ","res dup  to_ary "," catch  to_ary ","res to_ary  pop ","res dup  pop "," catch  pop ","res to_ary  shift ","res dup  shift "," catch  shift ","res to_ary  dup ","res dup  dup "," catch  dup "]}," Sinatra Base indifferent_hash":{"type":"method","name":"indifferent_hash","children":[],"call":["hash [] ","key to_s ","Symbol  === ","Hash  new "]}," Sinatra Base nested_params":{"type":"method","name":"nested_params","children":[],"call":["(send\n  (lvar :head) :inject\n  (lvar :res)) []= "," indifferent_hash ","s [] ","head inject ","splat [] ","key scan flatten compact ","key scan flatten ","key scan ","key =~ ","params inject "," indifferent_hash merge ","params keys join include? ! ","params keys join include? ","params keys join ","params keys ","res []= ","hash [] ","head pop ","key split ","key include? ","(send\n  (lvar :key split ) :inject\n  (lvar :res)) []= ","key split  inject ","key scan flatten compact  [] ","key split  pop "]}," Sinatra Base dispatch!":{"type":"method","name":"dispatch!","children":[],"call":[" raise "," invoke "," throw "," instance_eval == "," instance_eval ","conditions each "," catch ","original_params merge ","values any? ","hash []= ","(or-asgn\n  (send\n    (lvar :hash) :[]\n    (lvar :k))\n  (array)) << ","hash [] ","k == ","keys zip inject ","keys zip ","keys any? "," unescape ","$~ captures map ","$~ captures ","pattern =~ ","routes each "," nested_params ","@request params ","@request path_info "," class routes [] ","@request request_method "," class routes "," class "," class filters each "," class filters ","res == "," error_block! ","boom class ","@response status= "," options raise_errors? "," options ","@env [] write ","@env [] ","(dstr\n  (begin\n    (send\n      (lvar :boom) :class))\n  (str \" - \")\n  (begin\n    (send\n      (lvar :boom) :message))\n  (str \":\")) join ","boom backtrace ","boom message "," options dump_errors? ","@env []= ","@response body= "," route! "," handle_exception! "," handle_not_found! "," after_filter! "," env [] "," env "," before_filter! "," static! "," request head? "," request "," request get? "," settings static? "," settings "," filter! "," force_encoding ","IndifferentHash  [] "," indifferent_params ","@params merge! ","@params []= ","val dup ","@params merge! each ","val frozen? ","val respond_to? ","@response [] nil? ! ","@response [] nil? ","@response [] "," response [] nil? ! "," response [] nil? "," response [] "," response "," instance_eval dup  == "," instance_eval dup  "," nested_params  merge ","val dup ues any? "," class routes []  each ","@request @request path_info _info "," class  class routes []  [] "," class  class routes []  ","original_params merge  merge! ","IndifferentHash  []  merge! "," indifferent_params  merge! ","original_params merge  []= ","IndifferentHash  []  []= "," indifferent_params  []= ","val dup  dup ","original_params merge  merge! each ","IndifferentHash  []  merge! each "," indifferent_params  merge! each ","val dup  frozen? ","val dup  respond_to? "]}," Sinatra Base pass":{"type":"method","name":"pass","children":[],"call":[" throw "]}," Sinatra Base halt":{"type":"method","name":"halt","children":[],"call":[" throw ","response first ","response length == ","response length ","response first  first ","response first  length == ","response first  length "]}," Sinatra Base options":{"type":"method","name":"options","children":[],"call":[" class "," route "," settings "," warn "," caller first "," caller "]}," Sinatra Base call!":{"type":"method","name":"call!","children":[],"call":["@response finish "," dispatch! "," error_detection ","Response  new ","Request  new ","@response body= ","@env [] == ","@env [] "," error_block! "," response status "," response "," invoke ","header delete ","header [] == ","header [] ","@template_cache clear "," settings reload_templates "," settings "," indifferent_params ","@request params "," content_type "," body first content_type "," body first "," body "," body first respond_to? "," body respond_to? ","@response [] ","@response []= "," force_encoding "," template_cache clear "," template_cache ","@request route ","Array  === "," body [] content_type "," body [] "," body [] respond_to? ","IndifferentHash  new "," settings default_content_type ","Response  new  finish ","Response  new  body= ","Request  new  params ","Response  new  [] ","Response  new  []= ","Request  new  route "," settings  settings default_content_type _content_type "]}," Sinatra Base initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Tilt Cache  new ","TemplateCache  new "]}," Sinatra Templates render_builder":{"type":"method","name":"render_builder","children":[],"call":["xml target! ","data call ","data kind_of? "," eval "," binding ","data to_str ","data respond_to? "," Builder XmlMarkup  new ","options delete ","(pair\n  (sym :indent)\n  (int 2)) merge "," Builder XmlMarkup  new  target! ","(pair\n  (sym :indent)\n  (int 2)) merge  delete "]}," Sinatra Templates builder":{"type":"method","name":"builder","children":[],"call":[" render "," lambda ","template nil? ","template is_a? "," require "," require_warn ","Proc  new "," render_xml "," render_ruby ","options []= "]}," Sinatra Templates render_sass":{"type":"method","name":"render_sass","children":[],"call":["engine render "," Sass Engine  new ","options [] "," Sass Engine  new render "," Sass Engine  new  render "]}," Sinatra Templates sass":{"type":"method","name":"sass","children":[],"call":[" render ","options []= "," require "," require_warn ","options merge! "]}," Sinatra Templates render_haml":{"type":"method","name":"render_haml","children":[],"call":["engine render ","options [] "," Haml Engine  new "," Haml Engine  new render "," Haml Engine  new  render "]}," Sinatra Templates haml":{"type":"method","name":"haml","children":[],"call":[" render "," class haml "," class ","options [] "," class respond_to? "," require "," require_warn "]}," Sinatra Templates render_erb":{"type":"method","name":"render_erb","children":[],"call":["instance result "," binding "," eval ","locals_assigns length + ","locals_assigns length ","instance src ","locals_assigns join ","locals to_a collect ","locals to_a ","options [] "," ERB  new ","data call ","data kind_of? ","instance src =~ ","options delete "," ERB  new  result "," ERB  new  src ","data call  call ","data call  kind_of? "," ERB  new  src =~ "]}," Sinatra Templates erb":{"type":"method","name":"erb","children":[],"call":[" render "," require "," require_warn ","options []= "]}," Sinatra Templates template_path":{"type":"method","name":"template_path","children":[],"call":[" options views "," options ","options [] "]}," Sinatra Templates lookup_layout":{"type":"method","name":"lookup_layout","children":[],"call":[" lookup_template ","options [] ","options delete ","options [] == "]}," Sinatra Templates lookup_template":{"type":"method","name":"lookup_template","children":[],"call":[" raise ","template call "," File  read "," template_path "," lookup_template "," class templates [] "," class templates "," class ","line to_i "," class caller_locations first "," class caller_locations ","filename nil? "," File  join ","cached [] "," template_ File  join  "," class templates []  [] "]}," Sinatra Templates render":{"type":"method","name":"render","children":[],"call":[" __send__ "," lookup_layout "," lookup_template ","options []= ","options delete "," class views "," class ","layout == ","layout nil? "," class send merge "," class send "," class respond_to? "," render ","options merge ","template render "," compile_template "," settings views "," settings "," settings send merge "," settings send "," settings respond_to? ","output extend content_type= ","output extend ","@default_layout nil? ","options [] "," catch "," settings default_encoding ","options merge! ","engine_options [] ","options include? ","engine_options merge ","options merge! merge! ","engine_options [] != ","options merge merge! ","output +@ "," lookup_options delete  "," lookup_engine_options []  "," lookup_options []  "," lookup_ compile_template  "," class send merge  []= ","options merge  []= "," settings send merge  []= ","engine_options merge  []= ","options merge merge!  []= "," class send merge  delete ","options merge  delete "," settings send merge  delete ","engine_options merge  delete ","options merge merge!  delete ","options delete  == ","engine_options []  == ","options []  == ","options delete  nil? ","engine_options []  nil? ","options []  nil? "," class send merge  merge ","options merge  merge "," settings send merge  merge ","engine_options merge  merge ","options merge merge!  merge "," compile_template  render "," compile_ compile_template  "," __send__  extend content_type= ","template render  extend content_type= ","output +@  extend content_type= ","output extend options delete = "," __send__  extend ","template render  extend ","output +@  extend ","@default_options delete  nil? ","@default_engine_options []  nil? ","@default_options []  nil? "," class send merge  [] ","options merge  [] "," settings send merge  [] ","engine_options merge  [] ","options merge merge!  [] "," class send merge  merge! ","options merge  merge! "," settings send merge  merge! ","engine_options merge  merge! ","options merge merge!  merge! ","engine_ class send merge  [] ","engine_ settings send merge  [] ","engine_engine_options merge  [] ","engine_options merge merge!  [] "," settings send  [] "," class send merge  include? ","options merge  include? "," settings send merge  include? ","engine_options merge  include? ","options merge merge!  include? ","engine_ class send merge  merge ","engine_ settings send merge  merge ","engine_engine_options merge  merge ","engine_options merge merge!  merge "," settings send  merge "," class send merge  merge! merge! ","options merge  merge! merge! "," settings send merge  merge! merge! ","engine_options merge  merge! merge! ","options merge merge!  merge! merge! ","engine_ class send merge  [] != ","engine_options merge  [] != ","engine_ settings send merge  [] != ","engine_engine_options merge  [] != ","engine_options merge merge!  [] != "," settings send  [] != "," class send merge  merge merge! ","options merge  merge merge! "," settings send merge  merge merge! ","engine_options merge  merge merge! ","options merge merge!  merge merge! "," __send__  +@ ","template render  +@ ","output +@  +@ "]}," Sinatra Helpers etag":{"type":"method","name":"etag","children":[],"call":[" halt ","etags include? ","etags split "," env [] "," env "," response []= "," response ","W/ + ","kind == ","\"%s\" % "," raise ","(sym :strong) include? ! ","(sym :strong) include? "," etag_matches? "," request safe? "," request "," status == "," status "," success? "," request post? ","options fetch ","options [] ","Hash  === ","ETAG_KINDS  include? "," format ","etags split  include? "," env []  include? ","etags split  split "," env []  split "]}," Sinatra Helpers last_modified":{"type":"method","name":"last_modified","children":[],"call":[" halt ","time == "," request env [] "," request env "," request "," response []= "," response ","time httpdate ","time respond_to? ","time to_time ","Time  httpdate >= ","Time  httpdate ","time to_s ","Time  parse ","time strftime ","Time  httpdate to_i >= ","time to_i ","Time  httpdate to_i "," time_for "," env [] "," env ","since < "," status == "," status "," success? ","since >= ","time httpdate  == ","time to_time  == ","Time  parse  == "," time_for  == ","time httpdate  httpdate ","time to_time  httpdate ","Time  parse  httpdate "," time_for  httpdate ","time httpdate  respond_to? ","time to_time  respond_to? ","Time  parse  respond_to? "," time_for  respond_to? ","time httpdate  to_time httpdate  ","time to_time  to_time to_time  ","Time  parse  to_Time  parse  "," time_for  to_ time_for  ","time httpdate  to_s ","time to_time  to_s ","Time  parse  to_s "," time_for  to_s ","time httpdate  strftime httpdate  ","time to_time  strftime to_time  ","Time  parse  strfTime  parse  "," time_for  strf time_for  ","time httpdate  to_i ","time to_time  to_i ","Time  parse  to_i "," time_for  to_i "," time httpdate _for "," time to_time _for "," Time  parse _for ","  time_for _for ","Time  httpdate to_i  < ","Time  httpdate to_i  >= "]}," Sinatra Helpers StaticFile each":{"type":"method","name":"each","children":[],"call":[" read "," rewind ","buf length ","(const nil :CHUNK_SIZE) min ","length > ","@range end - + ","@range end - ","@range begin ","@range end "," pos= "," read  length ","buf @range end - +  ","@range end - +  > "]}," Sinatra Helpers send_file":{"type":"method","name":"send_file","children":[],"call":[" not_found "," halt ","StaticFile  open ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :length))\n  (send\n    (lvar :stat) :size)) to_s ","stat size ","opts [] "," response [] "," response "," content_type "," media_type ","File  extname "," last_modified ","stat mtime ","File  stat "," response []= ","opts [] == "," attachment "," mime_type ","file_length to_s ","(send\n  (send\n    (send\n      (lvar :r) :end) :-\n    (send\n      (lvar :r) :begin)) :+\n  (int 1)) to_s ","r end - + ","r end - ","r begin ","r end ","sf range ","sf parse_ranges ! ","sf parse_ranges "," env "," response [] ! ","result [] "," headers [] "," headers ","result [] each ","file serving ","file path= ","Rack File  new "," headers []= ","result [] [] ","filename nil? ","disposition nil? "," Integer "," request ","File  dirname "," settings app_file "," settings ","Rack Files  new ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :length))\n  (send\n    (lvar :File  stat ) :size)) to_s ","(osf range \n  (send\n    (lvasf range  :opts) :[]\n    (sym :length))\n  (send\n    (lvasf range  :stat) :size)) to_s ","File  stat  size "," sf range esponse [] "," sf range esponse ","File  stat  mtime ","File  File  stat  "," sf range esponse []= ","Rack File  new _length to_s ","Rack Files  new _length to_s ","(send\n  (send\n    (send\n      (lvasf range  :sf range ) :end) :-\n    (send\n      (lvasf range  :sf range ) :begin)) :+\n  (int 1)) to_s ","sf range  end - + ","sf range  end - ","sf range  begin ","sf range  end ","sf sf range ange ","StaticFile  open  range ","sf pasf range se_sf range anges ! ","StaticFile  open  parse_ranges ! ","sf pasf range se_sf range anges ","StaticFile  open  parse_ranges "," sf range esponse [] ! ","sf range esult [] ","file serving  [] "," headesf range s [] "," headesf range s ","sf range esult [] each ","file serving  [] each ","file sesf range ving ","Rack File  new  serving ","Rack Files  new  serving ","Rack File  new  path= ","Rack Files  new  path= "," headesf range s []= ","sf range esult [] [] ","file serving  [] [] ","Rack File  new name nil? ","Rack Files  new name nil? ","opts []  nil? "," Integesf range  "," sf range equest ","File  disf range name "," settings app_Rack File  new  "," settings app_Rack Files  new  "]}," Sinatra Helpers attachment":{"type":"method","name":"attachment","children":[],"call":[" response [] << "," response [] "," response ","; filename=\"%s\" % ","File  basename "," response []= "," content_type ","ext empty? ","File  extname ","disposition to_s ","disposition to_s dup "," format ","File  basename gsub ","File  extname  empty? ","File  File  extname name "]}," Sinatra Helpers content_type":{"type":"method","name":"content_type","children":[],"call":[" response []= "," response ","(lvar :media_type) join ","(send\n  (lvar :params) :collect) join ","%s=%s % ","params collect ","params any? "," fail ","Unknown media type: %p % ","media_type nil? "," media_type ","(lvar :mime_type) join ","mime_type nil? "," mime_type ","(send\n  (lvar :params) :map) join ","kv join ","params map "," settings default_encoding "," settings ","params delete ","params [] ","mime_type << ","params empty? ","params []= ","p === ! ","p === "," settings add_charset all? "," settings add_charset ","params include? ","mime_type dup ","Encoding  default_external to_s downcase ","Encoding  default_external to_s ","Encoding  default_external ","mime_type include? "," response [] ","val inspect ","val =~ ","(send\n  (lvar :p) :===\n  (lvar :mime_type)) ! "," raise "," format ","(lvar : media_type ) join ","(send\n  (lvar :(send\n  (lvar :params) :collect) join ) :collect) join ","(send\n  (lvar :params) :collect) join  collect ","(send\n  (lvar :params) :collect) join  any? "," media_type  nil? ","  media_type  ","(lvar : mime_type ) join ","(lvar :mime_type dup ) join "," mime_type  nil? ","mime_type dup  nil? ","  mime_type  "," mime_type dup  ","(send\n  (lvar :(send\n  (lvar :params) :collect) join ) :map) join ","(send\n  (lvar :params) :collect) join  map "," settings params delete _encoding ","(send\n  (lvar :params) :collect) join  delete ","(send\n  (lvar :params) :collect) join  [] "," mime_type  << ","mime_type dup  << ","(send\n  (lvar :params) :collect) join  empty? ","(send\n  (lvar :params) :collect) join  []= ","(send\n  (lvar :params) :collect) join  include? "," mime_type  dup ","mime_type dup  dup ","Encoding  params delete _external to_s downcase ","Encoding  params delete _external to_s ","Encoding  params delete _external "," mime_type  include? ","mime_type dup  include? ","val inspect  inspect ","val inspect  =~ ","(send\n  (lvar :p) :===\n  (lvar : mime_type )) ! ","(send\n  (lvar :p) :===\n  (lvar :mime_type dup )) ! "]}," Sinatra Helpers media_type":{"type":"method","name":"media_type","children":[],"call":["Base  media_type "," mime_type "," sinatra_warn "]}," Sinatra Helpers session":{"type":"method","name":"session","children":[],"call":[" env [] "," env "," request session "," request "]}," Sinatra Helpers not_found":{"type":"method","name":"not_found","children":[],"call":[" error "]}," Sinatra Helpers error":{"type":"method","name":"error","children":[],"call":[" halt "," response body= "," response ","body nil? ","code to_str ","code respond_to? "," response code to_str = ","code to_str  nil? "]}," Sinatra Helpers redirect":{"type":"method","name":"redirect","children":[],"call":[" halt "," response []= "," response "," status ","abs_uri << "," request port "," request "," request port != "," request scheme == "," request scheme "," request host ","uri =~ ! ","uri =~ "," url "," settings prefixed_redirects? "," settings "," settings absolute_redirects? "," uri "," env [] != "," env [] "," env "," env [] == ","uri to_s "]}," Sinatra Helpers body":{"type":"method","name":"body","children":[{"type":"method","name":"each","children":[],"asgn":[],"call":[]}],"call":[" response body= "," response "," call "," block_given? "," response body "," headers delete "," headers "," request head? "," request ","value is_a? "]}," Sinatra Helpers status":{"type":"method","name":"status","children":[],"call":[" response status "," response "," response status= ","Rack Utils  status_code "]}," Sinatra Response finish":{"type":"method","name":"finish","children":[],"call":[" header to_hash "," header "," status to_i "," status "," header []= ","(send\n  (send\n    (lvar :body) :to_ary) :inject\n  (int 0)) to_s ","len + ","part length ","body to_ary inject ","body to_ary ","body respond_to? "," header [] nil? "," header [] "," header delete ","(int 204) include? "," block "," block_given? ","part bytesize ","Rack Utils  bytesize ","(send\n  (lvar :body) :inject\n  (int 0)) to_s ","body inject ","Array  === ","String  === "," body ","result == "," headers []= ","(send\n  (send nil :body) :inject\n  (int 0)) to_s ","l + "," body inject "," headers ","(int 204) include? ! "," headers delete "," status to_i / == "," status to_i / "," body respond_to? "," headers [] "," calculate_content_length? "," close "," drop_body? "," drop_content_info? ","p bytesize "," body map reduce to_s "," body map reduce "," body map "," body  == "]}," Sinatra Response write":{"type":"method","name":"write","children":[],"call":["@body << ","str to_s "]}," Sinatra Response initialize":{"type":"method","name":"initialize","children":[],"call":["Rack Utils HeaderHash  new "," headers [] "," headers "]}," Sinatra Request params":{"type":"method","name":"params","children":[],"call":[" GET "," GET update "," POST "," raise ","e message ","Rack Utils  escape_html "]}," Sinatra Request accept":{"type":"method","name":"accept","children":[],"call":["a strip ","@env [] split map ","@env [] split ","@env [] ","@env [] to_s split map ","@env [] to_s split ","@env [] to_s ","a split [] strip ","a split [] ","a split ","(send\n  (lvar :entries) :map) sort_by map ","(send\n  (lvar :entries) :map) sort_by "," accept_entry ","entries map ","e first ","(send\n  (block\n    (send\n      (lvar :entries) :map)\n    (args\n      (arg :e))\n    (send nil :accept_entry\n      (lvar :e))) :sort_by) map ","e last ","(send\n  (lvar :entries) :map) sort ","AcceptEntry  new ","@env [] to_s scan ","(send\n  (send\n    (send\n      (send\n        (ivar :@env) :[]\n        (str \"HTTP_ACCEPT\")) :to_s) :scan\n    (const nil :HEADER_VALUE_WITH_PARAMS)) :map!) sort ","@env [] to_s scan map! ","@env [] to_s != ","@env include? ","(send\n  (lvar :@env [] to_s split ) :map) sort_by map ","(send\n  (lvar :@env [] to_s scan ) :map) sort_by map ","(send\n  (lvar :@env [] to_s split ) :map) sort_by ","(send\n  (lvar :@env [] to_s scan ) :map) sort_by ","@env [] to_s split  map ","@env [] to_s scan  map ","(send\n  (block\n    (send\n      (lvar :@env [] to_s split ) :map)\n    (args\n      (arg :e))\n    (send nil :accept_entry\n      (lvar :e))) :sort_by) map ","(send\n  (block\n    (send\n      (lvar :@env [] to_s scan ) :map)\n    (args\n      (arg :e))\n    (send nil :accept_entry\n      (lvar :e))) :sort_by) map ","(send\n  (lvar :@env [] to_s split ) :map) sort ","(send\n  (lvar :@env [] to_s scan ) :map) sort "]}," Sinatra Request user_agent":{"type":"method","name":"user_agent","children":[],"call":["@env [] "]}," Sinatra Base detect_rack_handler":{"type":"method","name":"detect_rack_handler","children":[],"call":[" fail ","servers join ","Rack Handler  get ","servers each "," Array "," server ","server_name capitalize ","server_name downcase ","server_name to_s ","Sinatra Ext  get_handler "," Array  join "," Array  each "]}," Sinatra const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Sinatra Base error_block!":{"type":"method","name":"error_block!","children":[],"call":[" instance_eval ","errmap [] ","keys each "," class errors "," class ","base superclass ","base errors [] ","base errors ","base respond_to? "," raise "," boom ","keys == "," settings show_exceptions? "," settings "," error_block! ","key superclass ","key superclass < ","key respond_to? "," process_route ","first ! ","resp nil? ","args == ","args_array first ","args_array reverse_each "," class errors  [] ","base superclass  superclass "," class  superclass "," settings  superclass ","base superclass  errors [] "," class  errors [] "," settings  errors [] ","base superclass  errors "," class  errors "," settings  errors ","base  instance_eval pond_to? ","base superclass  respond_to? "," class  respond_to? "," settings  respond_to? ","base  process_route ond_to? "," error_errmap [] ! "," error_base errors [] ! ","key  instance_eval pond_to? ","key  process_route ond_to? ","args ==  ! "," instance_eval p nil? "," process_route  nil? ","base errors []  == ","base errors [] _array first ","args_array args ==  ","base errors []  first ","base errors [] _array reverse_each ","base errors []  reverse_each "]}," Sinatra Base route!":{"type":"method","name":"route!","children":[],"call":[" raise "," throw "," instance_eval "," instance_eval == ","conditions each "," catch ","original_params merge ","values any? ","hash []= ","(or-asgn\n  (send\n    (lvar :hash) :[]\n    (lvar :k))\n  (array)) << ","hash [] ","k == ","keys zip inject ","keys zip ","keys any? "," unescape ","match captures map ","match captures ","pattern match ","routes each ","@request path_info "," class routes [] ","@request request_method "," class routes "," class "," class filters each "," class filters "," nested_params ","@request params "," forward ","match captures to_a "," route_missing "," route_eval "," indifferent_params ","Rack Utils  respond_to? "," route! ","base superclass ","base superclass respond_to? ","base routes [] ","base routes "," process_route ","block [] "," env []= ","block instance_variable_get "," env ","@response delete_header "," response delete_header "," response ","match captures to_a  any? ","pattern match  captures map ","pattern match  captures ","pattern pattern match  "," class routes []  each ","base routes []  each ","@request @request path_info _info ","@request  unescape _info "," class  class routes []  [] "," class base routes []  [] "," class  class routes []  "," class base routes []  ","pattern match  captures to_a ","base  class routes []  [] ","base base routes []  [] ","base  class routes []  ","base base routes []  "]}," Sinatra Test rack_options":{"type":"method","name":"rack_options","children":[],"call":["hash []= ","RACK_OPTIONS  [] ","opts merge inject ","opts merge "]}," Sinatra Test make_request":{"type":"method","name":"make_request","children":[],"call":["@request request "," rack_options "," block_given? "," raise ","options []= ","body nil? ","body respond_to? "," param_string ","options merge! ","body delete ","body key? ","(pair\n  (sym :lint)\n  (true)) merge ","Rack MockRequest  new "," fail ","@app nil? ","options [] ","Rack MockRequest  new  request "," rack_(pair\n  (sym :lint)\n  (true)) merge  ","(pair\n  (sym :lint)\n  (true)) merge  []= ","(pair\n  (sym :lint)\n  (true)) merge  merge! ","(pair\n  (sym :lint)\n  (true)) merge  [] "]}," Sinatra Test deprecate":{"type":"method","name":"deprecate","children":[],"call":[]}," Sinatra Test included":{"type":"method","name":"included","children":[],"call":[]}," Sinatra Default send_data":{"type":"method","name":"send_data","children":[],"call":[" halt "," content_type ","options [] "," attachment ","options [] == "," status "," sinatra_warn "]}," Sinatra Default header":{"type":"method","name":"header","children":[],"call":[" headers "," sinatra_warn "]}," Rack File const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Sinatra helpers":{"type":"method","name":"helpers","children":[],"call":[]}," Sinatra register":{"type":"method","name":"register","children":[],"call":[]}," Sinatra Delegator delegate":{"type":"method","name":"delegate","children":[],"call":[]}," Sinatra Default register":{"type":"method","name":"register","children":[],"call":[]}," Sinatra Base synchronize":{"type":"method","name":"synchronize","children":[],"call":["@@mutex synchronize "," lock? "]}," Sinatra Base reset!":{"type":"method","name":"reset!","children":[],"call":["base middleware dup ","base middleware ","base errors dup ","base errors ","base filters dup ","base filters ","base templates dup ","base templates ","base dupe_routes "," superclass templates [] "," superclass templates "," superclass ","Hash  new "," superclass respond_to? "]}," Sinatra Base reload!":{"type":"method","name":"reload!","children":[],"call":[" Kernel  load "," app_file ","$LOADED_FEATURES delete "," reset! "]}," Sinatra Base reloading?":{"type":"method","name":"reloading?","children":[],"call":[]}," Sinatra Base new":{"type":"method","name":"new","children":[],"call":["builder to_app ","builder run ","builder use ","@middleware each "," methodoverride? "," logging? "," test? ! "," test? "," sessions? ","Rack Builder  new "," show_exceptions? "," method_override? "," middleware each "," middleware "," build to_app "," build ","Wrapper  new "," new! ","Rack Builder  new  to_app ","Rack Builder  new  run ","Rack Builder  new  use "]}," Sinatra Base prototype":{"type":"method","name":"prototype","children":[],"call":[" new "]}," Sinatra Base register":{"type":"method","name":"register","children":[],"call":["extension registered ","extension respond_to? "," extend ","extensions each ","extensions << ","Module  new "," block_given? "]}," Sinatra Base helpers":{"type":"method","name":"helpers","children":[],"call":[" include ","extensions any? "," class_eval "," block_given? "," prepend "]}," Sinatra Base clean_backtrace":{"type":"method","name":"clean_backtrace","children":[],"call":["line gsub ","(send\n  (lvar :trace) :reject) map! ","line include? ","Gem  dir ","line =~ ","trace reject "," options clean_trace? "," options "," settings clean_trace? "," settings "]}," Sinatra Base dump_errors!":{"type":"method","name":"dump_errors!","children":[],"call":["@env [] write ","@env [] ","(dstr\n  (begin\n    (send\n      (lvar :boom) :class))\n  (str \" - \")\n  (begin\n    (send\n      (lvar :boom) :message))\n  (str \":\")) join ","boom message ","boom class "," clean_backtrace ","boom backtrace ","@env [] puts ","(dstr\n  (begin\n    (send\n      (send\n        (const nil :Time) :now) :strftime\n      (str \"%Y-%m-%d %H:%M:%S\")))\n  (str \" - \")\n  (begin\n    (send\n      (lvar :boom) :class))\n  (str \" - \")\n  (begin\n    (send\n      (lvar :boom) :message))\n  (str \":\")) join ","Time  now strftime ","Time  now "," clean_ clean_backtrace  ","boom  clean_backtrace  "]}," Sinatra Base handle_exception!":{"type":"method","name":"handle_exception!","children":[],"call":[" error_block! ","boom class ","@response status= "," raise "," options raise_errors? "," options "," dump_errors! "," options dump_errors? ","@env []= "," options show_exceptions? "," settings raise_errors? "," settings "," settings show_exceptions? "," settings dump_errors? "," settings show_exceptions != "," settings show_exceptions "," server_error? ! "," server_error? "," status "," body "," headers []= "," headers "," not_found? "," Integer ","boom code ","boom respond_to? ","@response status >= ","@response status ","@response body= ","@response headers []= ","@response headers ","@response status == "," settings x_cascade? "," status between? ","boom code between? "," settings use_code? ","boom http_status "," bad_request? ","boom message ","boom message != ","boom class name ","@params merge ","@env [] "," halt ","<h1> + + ","<h1> + "," content_type ","Rack Utils  escape_html ","boom http_status between? ","boom is_a? ","@ error_block! ponse status= ","boom  error_block! pond_to? ","@ error_block! ponse status >= ","@ error_block! ponse status ","@ error_block! ponse body= ","@ error_block! ponse headers []= ","@ error_block! ponse headers ","@ error_block! ponse status == ","@params merge  merge "]}," Sinatra Base handle_not_found!":{"type":"method","name":"handle_not_found!","children":[],"call":[" error_block! ","boom class ","@response body= ","@response status= ","@env []= ","@response headers []= ","@response headers "]}," Sinatra Base forward":{"type":"method","name":"forward","children":[],"call":["@response headers merge! ","@response headers ","@response body= ","@response status= ","@app call ","@request env "," fail ","@app respond_to? "," env "," raise "]}," Sinatra Helpers back":{"type":"method","name":"back","children":[],"call":[" request referer "," request "]}," Sinatra Helpers headers":{"type":"method","name":"headers","children":[],"call":[" response headers "," response "," response headers merge! "]}," Sinatra ShowExceptions frame_class":{"type":"method","name":"frame_class","children":[],"call":["frame filename =~ ","frame filename ","frame filename include? ","Gem  dir "]}," Sinatra ShowExceptions initialize":{"type":"method","name":"initialize","children":[],"call":["ERB  new "]}," Sinatra Default render":{"type":"method","name":"render","children":[],"call":["options merge! ","options delete "," sinatra_warn ","(str \"Passing :\") + ","options key? ","(sym :options) each ","engine to_sym ","options []= "]}," Sinatra Base caller_locations":{"type":"method","name":"caller_locations","children":[],"call":["file =~ ","CALLERS_TO_IGNORE  any? ","(send\n  (send nil :caller\n    (int 1)) :map) reject ","line split [] ","line split "," caller map "," caller "," cleaned_caller "]}," Sinatra Base caller_files":{"type":"method","name":"caller_files","children":[],"call":[" caller_locations map "," caller_locations "," cleaned_caller flatten "," cleaned_caller "]}," Sinatra Base extensions":{"type":"method","name":"extensions","children":[],"call":["(send\n  (ivar :@extensions) :+\n  (begin\n    (rescue\n      (send\n        (send nil :superclass) :extensions)\n      (resbody nil nil\n        (array)) nil))) uniq ","@extensions + "," superclass extensions "," superclass ","(send\n  (ivar :@extensions) :+\n  (send\n    (send nil :superclass) :extensions)) uniq "," superclass respond_to? "]}," Sinatra Base invoke_hook":{"type":"method","name":"invoke_hook","children":[],"call":["e send ","e respond_to? "," extensions each "," extensions "]}," Sinatra Base provides":{"type":"method","name":"provides","children":[],"call":[" response headers []= ","matching_types first "," response headers "," response ","matching_types empty? "," request accept & "," request accept "," request "," condition "," media_type ","types map! ","types kind_of? "," mime_type "," content_type "," request preferred_type ","types flatten! "," mime_types ","type params ","type respond_to? ","types include? ","type [] "," response [] ","preferred_type params ","preferred_type respond_to? ","response_content_type [] ","matching_ request preferred_type s first ","matching_ response [] s first ","matching_ request preferred_type s empty? ","matching_ response [] s empty? "," media_ request preferred_type  "," media_ response []  "," request preferred_type s map! "," response [] s map! "," request preferred_type s kind_of? "," response [] s kind_of? "," mime_ request preferred_type  "," mime_ response []  "," content_ request preferred_type  "," content_ response []  "," request preferred_ request preferred_type  "," request preferred_ response []  "," request  request preferred_type  "," request preferred_type s flatten! "," response [] s flatten! "," mime_ request preferred_type s "," mime_ response [] s "," request preferred_type  params "," response []  params "," request preferred_type  respond_to? "," response []  respond_to? "," request preferred_type s include? "," response [] s include? "," request preferred_type  [] "," response []  [] ","preferred_ request preferred_type  params ","preferred_ response []  params ","preferred_ request preferred_type  respond_to? ","preferred_ response []  respond_to? ","response_content_ request preferred_type  [] ","response_content_ response []  [] "]}," Sinatra Base indifferent_params":{"type":"method","name":"indifferent_params","children":[],"call":["params []= "," indifferent_params ","value is_a? ","params each "," indifferent_hash merge "," indifferent_hash ","object map ","new_hash []= ","object each ","IndifferentHash  new "," indifferent_hash merge  []= "," indifferent_ indifferent_hash merge  "," indifferent_hash merge  each "," indifferent_hash  []= ","IndifferentHash  new  []= "]}," Sinatra Base route_missing":{"type":"method","name":"route_missing","children":[],"call":[" raise "," forward "," request path_info "," request "," request request_method "]}," Sinatra Base route_eval":{"type":"method","name":"route_eval","children":[],"call":[" throw "," instance_eval "]}," Sinatra Templates require_warn":{"type":"method","name":"require_warn","children":[],"call":[" require ","engine downcase "," warn "," sinatra_warn "]}," Sinatra Application register":{"type":"method","name":"register","children":[],"call":[]}," Sinatra Default inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Sinatra Base mime_type":{"type":"method","name":"mime_type","children":[],"call":["Rack Mime MIME_TYPES  []= ","Rack Mime  mime_type ","type to_s [] == ","type to_s [] ","type to_s ","type to_s include? ","type nil? "]}," Sinatra Base inline_templates=":{"type":"method","name":"inline_templates=","children":[],"call":["template << "," templates []= ","1 to_sym "," templates ","line =~ ","data each_line ","app count + ","app count "," IO  read gsub split "," IO  read gsub "," IO  read "," caller_files first "," caller_files ","file == ","file nil? ","File  expand_path "," force_encoding "," settings default_encoding "," settings ","app =~ ","io gsub split ","io gsub "," IO  binread "," IO  respond_to? ","String  new "," force_encoding  << ","  force_encoding s []= ","  force_encoding s "," caller_ caller_files first s first "," caller_ caller_files first s "," caller_files first  == "," caller_files first  nil? "," force_ settings default_encoding  "," settings default_ settings default_encoding  "," IO  read  gsub split "," IO  binread  gsub split "," IO  read  gsub "," IO  binread  gsub "]}," Sinatra Base settings":{"type":"method","name":"settings","children":[],"call":[" class "," class settings "]}," Sinatra Helpers mime_type":{"type":"method","name":"mime_type","children":[],"call":["Base  mime_type "]}," Tilt CoffeeTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":[" CoffeeScript  compile "," options "," data "]}," Tilt CoffeeTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[]}," Tilt CoffeeTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt RDocTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine to_s "]}," Tilt RDocTemplate prepare":{"type":"method","name":"prepare","children":[],"call":["markup convert "," data ","RDoc Markup ToHtml  new ","RDoc Markup ToHtml  new  convert "]}," Tilt RDocTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt MustacheTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["instance to_html ","instance template= "," data ","instance compiled? ","instance []= ","block call ","locals each ","instance instance_variable_set ","scope instance_variable_get ","scope instance_variables each ","scope instance_variables ","@engine new ","@engine new  to_html ","@engine new  template= ","@engine new  compiled? ","@engine new  []= ","@engine new  @engine new _variable_set ","scope @engine new _variable_get ","scope @engine new _variables each ","scope @engine new _variables "]}," Tilt MustacheTemplate prepare":{"type":"method","name":"prepare","children":[],"call":["@engine send ","@engine respond_to? ","(str \"view\") include? ","key to_s "," options each "," options ","Mustache  view_class "," name "," options [] ","Mustache  view_path= ","Mustache  view_namespace= "]}," Tilt MustacheTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt RedClothTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine to_html "]}," Tilt RedClothTemplate prepare":{"type":"method","name":"prepare","children":[],"call":["RedCloth  new "," data "]}," Tilt RedClothTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt RDiscountTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine to_html "]}," Tilt RDiscountTemplate prepare":{"type":"method","name":"prepare","children":[],"call":["RDiscount  new "," flags "," data "]}," Tilt RDiscountTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt RDiscountTemplate flags":{"type":"method","name":"flags","children":[],"call":[" options [] "," options ","(sym :smart) select "]}," Tilt LiquidTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine render ","locals []= ","locals [] ","block nil? ","scope merge ","h []= ","k to_s ","scope to_h inject ","scope to_h ","scope respond_to? ","locals inject ","scope merge  []= ","scope merge  [] ","scope merge  inject "]}," Tilt LiquidTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" Liquid Template  parse "," data "]}," Tilt LiquidTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt BuilderTemplate precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[" data to_str "," data "]}," Tilt BuilderTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["xml target! "," data call "," data "," data kind_of? ","locals []= "," data respond_to? "," Builder XmlMarkup  new "," Builder XmlMarkup  new  target! "]}," Tilt BuilderTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[]}," Tilt BuilderTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt LessTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine to_css "]}," Tilt LessTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" Less Engine  new "," data "]}," Tilt LessTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt SassTemplate sass_options":{"type":"method","name":"sass_options","children":[],"call":[" options merge "," line "," eval_file "," options "]}," Tilt SassTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine render "]}," Tilt SassTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" Sass Engine  new "," sass_options "," data "]}," Tilt SassTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt HamlTemplate precompiled_postamble":{"type":"method","name":"precompiled_postamble","children":[],"call":[" precompiled_method_return_value ","@engine instance_eval "]}," Tilt HamlTemplate precompiled_preamble":{"type":"method","name":"precompiled_preamble","children":[],"call":[" options_for_buffer inspect "," options_for_buffer ","@engine instance_eval "]}," Tilt HamlTemplate precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":["@engine precompiled "]}," Tilt HamlTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["@engine render ","@engine respond_to? "]}," Tilt HamlTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" Haml Engine  new "," data ","@options merge "," line "," eval_file ","@@options merge  merge "]}," Tilt HamlTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt ErubisTemplate precompiled":{"type":"method","name":"precompiled","children":[],"call":["offset - "]}," Tilt ErubisTemplate precompiled_postamble":{"type":"method","name":"precompiled_postamble","children":[],"call":["(str \"_buf\") join "]}," Tilt ErubisTemplate precompiled_preamble":{"type":"method","name":"precompiled_preamble","children":[],"call":["(zsuper) join "]}," Tilt ErubisTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" Erubis Eruby  new "," options "," data ","(or\n  (send\n    (send nil :options) :delete\n    (sym :outvar))\n  (str \"_erbout\")) to_s "," options delete ","@options merge! "]}," Tilt ErubisTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt ERBTemplate precompiled":{"type":"method","name":"precompiled","children":[],"call":["offset + "]}," Tilt ERBTemplate precompiled_postamble":{"type":"method","name":"precompiled_postamble","children":[],"call":[]}," Tilt ERBTemplate precompiled_preamble":{"type":"method","name":"precompiled_preamble","children":[],"call":[]}," Tilt ERBTemplate precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":["@engine src "]}," Tilt ERBTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" ERB  new "," options [] "," options "," data ","(or\n  (send\n    (send nil :options) :[]\n    (sym :outvar))\n  (str \"_erbout\")) to_s "]}," Tilt ERBTemplate initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[" require_template_library "]}," Tilt StringTemplate precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[]}," Tilt StringTemplate prepare":{"type":"method","name":"prepare","children":[],"call":[" data "]}," Tilt Cache clear":{"type":"method","name":"clear","children":[],"call":[]}," Tilt Cache fetch":{"type":"method","name":"fetch","children":[],"call":["@cache [] "]}," Tilt Cache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tilt Template garbage_collect_compiled_template_method":{"type":"method","name":"garbage_collect_compiled_template_method","children":[],"call":[]}," Tilt Template compiled_template_method_remover":{"type":"method","name":"compiled_template_method_remover","children":[],"call":[]}," Tilt Template compile_template_method":{"type":"method","name":"compile_template_method","children":[],"call":["ObjectSpace  define_finalizer ","Template  compiled_template_method_remover ","CompileSite  module_eval "," line - "," line "," eval_file "," precompiled "]}," Tilt Template generate_compiled_method_name":{"type":"method","name":"generate_compiled_method_name","children":[],"call":["Digest MD5  hexdigest ","parts join ","(send nil :object_id) + ","(send\n  (lvar :locals_keys) :map) sort ","k to_s ","locals_keys map "," object_id ","Digest MD5  hexDigest MD5  hexdigest  ","(send nil :object_id) +  join "]}," Tilt Template evaluate_source":{"type":"method","name":"evaluate_source","children":[],"call":["Kernel  eval "," binding ","scope instance_eval ","(send\n  (send nil :line) :-\n  (lvar :offset)) - "," line - "," line "," eval_file "," precompiled "]}," Tilt Template compiled_method_name":{"type":"method","name":"compiled_method_name","children":[],"call":[" generate_compiled_method_name ","@compiled_method_names [] "]}," Tilt Template precompiled_postamble":{"type":"method","name":"precompiled_postamble","children":[],"call":[]}," Tilt Template precompiled_preamble":{"type":"method","name":"precompiled_preamble","children":[],"call":["(send\n  (lvar :locals) :map) join ","locals map "]}," Tilt Template precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[" raise "]}," Tilt Template precompiled":{"type":"method","name":"precompiled","children":[],"call":["preamble count + ","preamble count ","parts join "," precompiled_postamble "," precompiled_template "," precompiled_preamble "," precompiled_preamble  count + "," precompiled_preamble  count "," precompiled_ precompiled_preamble  "]}," Tilt Template evaluate":{"type":"method","name":"evaluate","children":[],"call":[" evaluate_source ","scope send "," compile_template_method ","scope respond_to? "," compiled_method_name ","locals keys ","scope instance_eval "," line - "," line "," eval_file ","(lvar :source) join "," template_source "," local_assignment_code "," evaluate_(lvar :source) join  "," compiled_ compiled_method_name  ","(lvar :(lvar :source) join ) join "," template_(lvar :source) join  "]}," Tilt Template prepare":{"type":"method","name":"prepare","children":[],"call":[" raise "," compile! "," warn "," respond_to? "]}," Tilt Template require_template_library":{"type":"method","name":"require_template_library","children":[],"call":[" require "," warn ","(str \"WARN: tilt autoloading '\") + ","Thread  list size > ","Thread  list size ","Thread  list "]}," Tilt Template initialize_engine":{"type":"method","name":"initialize_engine","children":[],"call":[]}," Tilt Template eval_file":{"type":"method","name":"eval_file","children":[],"call":[" file "]}," Tilt Template name":{"type":"method","name":"name","children":[],"call":[" basename split first "," basename split "," basename "]}," Tilt Template basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," file "]}," Tilt Template render":{"type":"method","name":"render","children":[],"call":[" evaluate "," compile "]}," Tilt Template initialize":{"type":"method","name":"initialize","children":[],"call":[" prepare ","@reader call ","File  read "," lambda ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_f) :*\n  (int 10000)) to_i ","Time  now to_f * ","Time  now to_f ","Time  now "," class engine_initialized= "," class "," initialize_engine "," class engine_initialized? ! "," class engine_initialized? "," raise ","(or\n  (ivar :@file)\n  (lvar :block)) nil? ","arg to_hash ","arg respond_to? ","arg to_int ","arg to_str ","(lvar :options) compact each ","(lvar :options) compact "," class engine_initialized ! "," class engine_initialized ","line is_a? ","block nil? ","file nil? ","(or\n  (ivar :arg to_str )\n  (lvar :block)) nil? "]}," Tilt CompileSite __tilt__":{"type":"method","name":"__tilt__","children":[],"call":[]}," Tilt []":{"type":"method","name":"[]","children":[],"call":[]}," Tilt new":{"type":"method","name":"new","children":[],"call":[]}," Tilt register":{"type":"method","name":"register","children":[],"call":[]}," Tilt mappings":{"type":"method","name":"mappings","children":[],"call":[]}," Sinatra Base after":{"type":"method","name":"after","children":[],"call":["@after_filters << "," add_filter "]}," Sinatra Base middleware":{"type":"method","name":"middleware","children":[],"call":[" superclass middleware + "," superclass middleware "," superclass "," superclass respond_to? "]}," Sinatra Base static!":{"type":"method","name":"static!","children":[],"call":[" send_file "," env []= "," env ","File  file? ","path [] != ","path [] ","public_dir length ","File  expand_path ","public_dir + "," unescape "," request path_info "," request ","(lvasgn :public_dir\n  (send\n    (send nil :settings) :public)) nil? "," settings public "," settings "," cache_control "," settings static_cache_control "," settings static_cache_control? ","path start_with? ","(lvasgn :public_dir\n  (send\n    (send nil :settings) :public_folder)) nil? "," settings public_folder ","options merge ","URI_INSTANCE  unescape "," valid_path? ","File  expand_path + ","File  expand_path  [] != ","File  expand_path  [] ","File  expand_path  length "," settings public  length "," settings public_folder  length ","File  expand_File  expand_path  ","File  expand_path  + "," settings public  + "," settings public_folder  + "," request File  expand_path _info ","(lvasgn :File  expand_path \n  (send\n    (send nil :settings) :public)) nil? ","(lvasgn : settings public \n  (send\n    (send nil :settings) :public)) nil? ","(lvasgn : settings public_folder \n  (send\n    (send nil :settings) :public)) nil? ","File  expand_path  start_with? ","(lvasgn :File  expand_path \n  (send\n    (send nil :settings) :public_folder)) nil? ","(lvasgn : settings public \n  (send\n    (send nil :settings) :public_folder)) nil? ","(lvasgn : settings public_folder \n  (send\n    (send nil :settings) :public_folder)) nil? "," valid_File  expand_path ? ","File  expand_File  expand_path  + "]}," Sinatra Base after_filter!":{"type":"method","name":"after_filter!","children":[],"call":[" instance_eval ","base after_filters each ","base after_filters "," after_filter! ","base superclass ","base superclass respond_to? "]}," Sinatra Base before_filter!":{"type":"method","name":"before_filter!","children":[],"call":[" instance_eval ","base before_filters each ","base before_filters "," before_filter! ","base superclass ","base superclass respond_to? "]}," Sinatra Templates compile_template":{"type":"method","name":"compile_template","children":[],"call":[" raise ","template new ","line to_i "," class caller_locations first "," class caller_locations "," class ","Proc  new ","data is_a? "," File  join ","body call ","body respond_to? "," class templates [] "," class templates ","template nil? ","Tilt  [] ","@template_cache fetch ","Tilt  [] new ","klass == ","File  exists? ","Tilt  mappings each ","Tilt  mappings "," template_cache fetch "," template_cache "," throw ","found ! ","options delete "," Array include? "," Array "," find_template "," settings caller_locations first "," settings caller_locations "," settings "," settings templates [] "," settings templates ","engine to_s ","data inspect ","File  exist? ","caller [] ","options [] "," compile_block_template ","Tilt  []  new "," class  settings caller_locations first _locations first "," class  settings caller_locations first _locations ","body call  call ","body call  respond_to? "," class Tilt  [] s [] "," class Tilt  [] s ","Tilt  []  nil? ","@Tilt  [] _cache fetch "," Tilt  [] _cache fetch "," Tilt  [] _cache ","File  exists?  ! ","File  exist?  ! "," find_Tilt  []  "," settings  settings caller_locations first _locations first "," settings  settings caller_locations first _locations "," settings Tilt  [] s [] "," settings Tilt  [] s "," settings caller_locations first  [] "," compile_block_Tilt  []  "]}," Sinatra Templates less":{"type":"method","name":"less","children":[],"call":[" render ","options []= ","options merge! "]}," Sinatra Templates erubis":{"type":"method","name":"erubis","children":[],"call":[" render ","options []= "," warn "," caller first "," caller "]}," Sinatra Helpers expires":{"type":"method","name":"expires","children":[],"call":[" response []= ","time httpdate "," response "," cache_control ","values last merge! ","values last ","Time  now + ","Time  now ","amount to_time ","amount to_time - ","amount respond_to? ","values << ","values last kind_of? ","time - "," time_for ","Integer  === ","amount to_i ","amount is_a? ","values last is_a? ","Time  now +  httpdate ","amount to_time  httpdate "," time_for  httpdate ","amount to_Time  now +  ","amount to_amount to_time  ","amount to_ time_for  ","amount to_Time  now +  - ","amount to_amount to_time  - ","amount to_ time_for  - ","Time  now +  - ","amount to_time  - "," time_for  - "," Time  now + _for "," amount to_time _for ","  time_for _for "]}," Sinatra Helpers cache_control":{"type":"method","name":"cache_control","children":[],"call":[" response []= ","values join "," response ","values any? ","values << ","(send\n  (send\n    (lvar :k) :to_s) :tr\n  (str \"_\")\n  (str \"-\")) join ","k to_s tr ","k to_s ","hash each ","value to_s tr ","value to_s ","values map ","v == ","hash reject! ","values pop ","values last kind_of? ","values last ","(lvar :key) join ","value to_i ","key == ","key to_s tr ","key to_s ","values map! ","(str \"max-age\") include? ","values last is_a? ","value to_i s join ","value to_i s any? ","value to_i s << ","values pop  each ","value to_i  to_s tr ","value to_i  to_s ","value to_i s map ","values pop  reject! ","value to_i s pop ","value to_i s last kind_of? ","value to_i s last ","(lvar :key to_s tr ) join ","value to_i  to_i ","key to_s tr  == ","key to_s tr  to_s tr ","key to_s tr  to_s ","value to_i s map! ","value to_i s last is_a? "]}," Sinatra Request secure?":{"type":"method","name":"secure?","children":[],"call":["(or\n  (send\n    (ivar :@env) :[]\n    (str \"HTTP_X_FORWARDED_PROTO\"))\n  (send\n    (ivar :@env) :[]\n    (str \"rack.url_scheme\"))) == ","@env [] ","@env [] == "]}," Tilt RDocTemplate compile!":{"type":"method","name":"compile!","children":[],"call":["markup convert "," data ","RDoc Markup ToHtml  new ","RDoc Markup ToHtml  new  convert "]}," Tilt MustacheTemplate compile!":{"type":"method","name":"compile!","children":[],"call":["@engine send ","@engine respond_to? ","(str \"view\") include? ","key to_s "," options each "," options ","Mustache  view_class "," name "," options [] ","Mustache  view_namespace= "]}," Tilt RedClothTemplate compile!":{"type":"method","name":"compile!","children":[],"call":["RedCloth  new "," data "]}," Tilt RDiscountTemplate compile!":{"type":"method","name":"compile!","children":[],"call":["RDiscount  new "," flags "," data "]}," Tilt LiquidTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" Liquid Template  parse "," data "]}," Tilt BuilderTemplate template_source":{"type":"method","name":"template_source","children":[],"call":[" data to_str "," data "]}," Tilt BuilderTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[]}," Tilt SassTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" Sass Engine  new "," sass_options "," data "]}," Tilt HamlTemplate haml_options":{"type":"method","name":"haml_options","children":[],"call":[" options merge "," line "," eval_file "," options "]}," Tilt HamlTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" Haml Engine  new "," haml_options "," data "]}," Tilt ErubisTemplate local_assignment_code":{"type":"method","name":"local_assignment_code","children":[],"call":["offset - "]}," Tilt ErubisTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" Erubis Eruby  new "," options "," data ","Erubis Eruby  class_eval "]}," Tilt ERBTemplate local_assignment_code":{"type":"method","name":"local_assignment_code","children":[],"call":["offset + "]}," Tilt ERBTemplate evaluate":{"type":"method","name":"evaluate","children":[],"call":["scope instance_variable_set ","scope instance_variable_get ","scope instance_eval "," line - "," line "," eval_file ","var to_sym == ","var to_sym ","scope instance_variables any? ","scope instance_variables ","(lvar :source) join "," template_source "," local_assignment_code ","(lvar :(lvar :source) join ) join "," template_(lvar :source) join  "]}," Tilt ERBTemplate template_source":{"type":"method","name":"template_source","children":[],"call":["@engine src "]}," Tilt ERBTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" ERB  new "," options [] "," options "," data "]}," Tilt StringTemplate template_source":{"type":"method","name":"template_source","children":[],"call":[]}," Tilt StringTemplate compile!":{"type":"method","name":"compile!","children":[],"call":[" data "]}," Tilt Template local_assignment_code":{"type":"method","name":"local_assignment_code","children":[],"call":["source length ","source join ","locals collect ","locals empty? "]}," Tilt Template template_source":{"type":"method","name":"template_source","children":[],"call":[" raise "]}," Tilt Template compile!":{"type":"method","name":"compile!","children":[],"call":[" raise "]}," Tilt Template compile":{"type":"method","name":"compile","children":[],"call":[" compile! ","@reader call ","@data nil? ","@reader call  nil? "]}," Sinatra Base force_encoding":{"type":"method","name":"force_encoding","children":[],"call":[" force_encoding ","data each ","data respond_to? ","data each_value ","data force_encoding "," settings default_encoding "," settings ","data is_a? ","data == "," default_encoding "," settings force_encoding ","Encoding  default_external "]}," Sinatra Base quit!":{"type":"method","name":"quit!","children":[],"call":[" puts ","handler_name =~ ","server stop ","server stop! ","server respond_to? ","$stderr puts ","STDERR  puts "," set "," handler_name =~ "," handler_name "," running_server stop "," running_server "," running_server stop! "," running_server respond_to? "," running? "," supress_messages? "," suppress_messages? "," warn "," on_stop_callback call "," on_stop_callback "," on_stop_callback nil? "]}," Sinatra Base compile!":{"type":"method","name":"compile!","children":[],"call":["unbound_method bind call ","unbound_method bind "," proc ","block arity != ","block arity "," remove_method "," compile "," instance_method "," define_method "," send ","options each_pair "," generate_method ","wrapper instance_variable_set "," freeze ","options delete ","options key? "," host_name ","block arity zero? "," instance_method  bind call "," generate_method  bind call "," instance_method  bind "," generate_method  bind "]}," Sinatra Base add_filter":{"type":"method","name":"add_filter","children":[],"call":[" instance_eval "," process_route "," add_filter "," compile! "," filters [] << "," filters [] "," filters ","path respond_to? "]}," Sinatra Base process_route":{"type":"method","name":"process_route","children":[],"call":[" throw "," instance_eval == "," instance_eval ","conditions each "," catch ","@original_params merge ","values any? ","hash []= ","(or-asgn\n  (send\n    (lvar :hash) :[]\n    (lvar :k))\n  (array)) << ","hash [] ","k == ","keys zip inject ","keys zip ","keys any? ","match captures to_a ","match captures ","pattern match ","path empty? "," unescape ","@request path_info ","@request route "," settings empty_path_info? ! "," settings empty_path_info? "," settings ","route empty? ","block [] ","c bind call == ","c bind call ","c bind "," force_encoding ","URI  decode ","match captures to_a map ","(or-asgn\n  (send\n    (ivar :@params) :[]\n    (lvar :k))\n  (str \"\")) << ","@params [] "," params merge "," params ","@params []= ","@params [] << ","Array  === ","URI  decode_www_form_component ","URI  unescape ","URI_INSTANCE  unescape ","match captures map! "," raise ","@env []= ","params values flatten ","params values ","pattern match captures ","pattern is_a? ","@params merge ","params any? ","params delete ","pattern params ","route [] ","route end_with? ","route != "," settings strict_paths? ! "," settings strict_paths? ","subpattern is_a? ","pattern patterns any? ","pattern patterns ","pattern respond_to? ","captures empty? ","captures nil? ","pattern match captures map ","@params delete ","params each ","@env [] ","@original_pattern params  merge ","match captures to_a  any? ","pattern match  captures to_a ","match pattern match captures  to_a ","pattern match  captures ","match pattern match captures  ","pattern pattern match  "," unescape  empty? ","@request  unescape _info ","@request @request route  ","@request @request path_info  ","@request route []  "," settings empty_ unescape _info? ! "," settings empty_ unescape _info? ","@request route  empty? ","@request path_info  empty? ","route []  empty? ","pattern match  captures to_a map ","match pattern match captures  to_a map ","(or-asgn\n  (send\n    (ivar :@original_params merge ) :[]\n    (lvar :k))\n  (str \"\")) << ","(or-asgn\n  (send\n    (ivar :@params merge ) :[]\n    (lvar :k))\n  (str \"\")) << ","(or-asgn\n  (send\n    (ivar :@pattern params ) :[]\n    (lvar :k))\n  (str \"\")) << ","@original_params merge  [] ","@params merge  [] ","@pattern params  [] "," pattern params  merge "," pattern params  ","@original_params merge  []= ","@params merge  []= ","@pattern params  []= ","@original_params merge  [] << ","@params merge  [] << ","@pattern params  [] << ","pattern match  captures map! ","match pattern match captures  map! ","params match captures to_a  flatten ","pattern params  values flatten ","params match captures to_a  ","pattern params  values ","pattern pattern match  captures ","pattern match pattern match captures  ","@original_params merge  merge ","@params merge  merge ","@pattern params  merge ","pattern params  any? ","pattern params  delete ","pattern pattern params  ","@request route  [] ","@request path_info  [] ","route []  [] ","@request route  end_with? ","@request path_info  end_with? ","route []  end_with? ","@request route  != ","@request path_info  != ","route []  != "," settings strict_ unescape s? ! "," settings strict_ unescape s? ","pattern match captures  empty? ","pattern match captures  nil? ","pattern pattern match  captures map ","pattern match pattern match captures  map ","@original_params merge  delete ","@params merge  delete ","@pattern params  delete ","pattern params  each "]}," Sinatra Base filter!":{"type":"method","name":"filter!","children":[],"call":[" instance_eval ","base filters [] each ","base filters [] ","base filters "," filter! ","base superclass ","base superclass respond_to? "," process_route "," block_given? ","block call "]}," Sinatra Templates render_xml":{"type":"method","name":"render_xml","children":[],"call":[" render ","Proc  new ","template nil? ","template is_a? ","options []= "]}," Sinatra Templates nokogiri":{"type":"method","name":"nokogiri","children":[],"call":[" render_xml ","options []= ","Tilt VERSION  <= "," render_ruby "]}," Sinatra Templates coffee":{"type":"method","name":"coffee","children":[],"call":[" render ","options merge! "]}," Sinatra Templates markaby":{"type":"method","name":"markaby","children":[],"call":[" render "," render_ruby "]}," Sinatra Templates radius":{"type":"method","name":"radius","children":[],"call":[" render "]}," Sinatra Templates rdoc":{"type":"method","name":"rdoc","children":[],"call":[" render "]}," Sinatra Templates textile":{"type":"method","name":"textile","children":[],"call":[" render "]}," Sinatra Templates markdown":{"type":"method","name":"markdown","children":[],"call":[" render ","options []= "]}," Sinatra Templates liquid":{"type":"method","name":"liquid","children":[],"call":[" render "]}," Sinatra Templates scss":{"type":"method","name":"scss","children":[],"call":[" render ","options merge! ","options []= "]}," Sinatra Helpers StaticFile byte_ranges":{"type":"method","name":"byte_ranges","children":[],"call":["ranges << ","r0 <= ","size - ","r1 >= ","r1 < ","r1 to_i ","r1 empty? ","r0 to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max ","r0 empty? ","matches [] ","range_spec match ","http_range split each ","http_range split ","env [] ","r0 to_i  <= ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  <= ","size -  >= ","r1 to_i  >= ","size -  < ","r1 to_i  < ","size -  to_i ","r1 to_i  to_i ","size -  empty? ","r1 to_i  empty? ","r0 to_i  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :size - ) :to_i)) max ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1 to_i ) :to_i)) max ","r0 to_i  empty? ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  empty? ","range_spec match  [] ","env []  split each ","env []  split "]}," Sinatra Helpers StaticFile parse_ranges":{"type":"method","name":"parse_ranges","children":[],"call":["r [] ","r length == ","r length ","r == "," byte_ranges "," byte_ranges  [] "," byte_ranges  length == "," byte_ranges  length "," byte_ranges  == "," byte_ byte_ranges anges "]}," Sinatra Request path_info=":{"type":"method","name":"path_info=","children":[],"call":[]}," Sinatra Request route":{"type":"method","name":"route","children":[],"call":["path empty? ","Rack Utils  unescape "," path_info ","Rack Utils  unescape  empty? "," Rack Utils  unescape _info "]}," Sinatra ShowExceptions call":{"type":"method","name":"call","children":[],"call":["Rack Utils  bytesize to_s ","Rack Utils  bytesize ","body join ","env []= "," pretty "," dump_exception "," prefers_plain_text? "," respond_to? ","env [] ","@app call "," Array ","body join bytesize to_s ","body join bytesize ","body bytesize to_s ","body bytesize "," pretty  join "," Array  join "," dump_exception  join "," dump_ pretty  "," dump_ dump_exception  "," pretty  join bytesize to_s "," Array  join bytesize to_s "," dump_exception  join bytesize to_s "," pretty  join bytesize "," Array  join bytesize "," dump_exception  join bytesize "," pretty  bytesize to_s "," Array  bytesize to_s "," dump_exception  bytesize to_s "," pretty  bytesize "," Array  bytesize "," dump_exception  bytesize "]}," Sinatra ShowExceptions puts":{"type":"method","name":"puts","children":[],"call":[]}," Sinatra ShowExceptions flush":{"type":"method","name":"flush","children":[],"call":[]}," Sinatra Templates render_ruby":{"type":"method","name":"render_ruby","children":[],"call":[" render ","Proc  new ","template nil? ","template is_a? "," proc "]}," Sinatra Templates find_template":{"type":"method","name":"find_template","children":[],"call":[" File  join ","klass == ","Tilt  mappings each ","Tilt  mappings "," Array include? "," Array ","ext != ","engines include? ","ext == ","Tilt  default_mapping extensions_for each ","Tilt  default_mapping extensions_for ","Tilt  default_mapping ","Tilt  respond_to? "]}," Sinatra Templates slim":{"type":"method","name":"slim","children":[],"call":[" render "]}," Sinatra Helpers time_for":{"type":"method","name":"time_for","children":[],"call":[" raise ","value inspect ","boom to_s ","Time  parse ","value to_s ","Time  at ","Numeric  === ","Time  local ","value mday ","value mon ","value year ","value respond_to? ","t getlocal ","Time  utc ","d sec + ","d sec_fraction ","d sec ","d min ","d hour ","d mday ","d mon ","d year ","value new_offset ","Time  === ","value to_time ","value is_a? ","value inspecTime  utc  ","boom Time  utc o_s ","value Time  utc o_s ","Time  aTime  utc  ","value mvalue new_offset ay ","value respond_Time  utc o? ","value responvalue new_offset _to? ","Time  utc  geTime  utc local ","Time  uTime  utc c ","value new_offset  sec + ","d sec_fracTime  utc ion ","value new_offset  sec_fraction ","value new_offset  sec ","value new_offset  min ","value new_offset  hour ","value new_offset  mvalue new_offset ay ","value new_offset  mon ","value new_offset  year ","value new_offseTime  utc  ","value Time  utc o_Time  utc ime "]}," Sinatra Helpers uri":{"type":"method","name":"uri","children":[],"call":["File  join ","uri << ","(if\n  (lvar :addr)\n  (lvar :addr)\n  (send\n    (send nil :request) :path_info)) to_s "," request path_info "," request "," request script_name to_s "," request script_name ","host << "," request host "," request host_with_port "," request port != "," request secure? "," request port "," request forwarded? ","addr =~ ","String  new ","(or\n  (lvar :addr)\n  (send\n    (send nil :request) :path_info)) to_s ","addr to_s =~ ","addr to_s ","String  new  << "," request String  new  "," request String  new _with_port "]}," Sinatra Request forwarded?":{"type":"method","name":"forwarded?","children":[],"call":["@env include? "]}," Sinatra Base setup_sessions":{"type":"method","name":"setup_sessions","children":[],"call":["builder use "," session_secret "," sessions? ","options merge! "," sessions to_hash "," sessions "," sessions respond_to? ","options []= "," session_secret? "," session_store "]}," Sinatra Base build":{"type":"method","name":"build","children":[],"call":["builder run "," new! ","builder use "," middleware each "," middleware "," show_exceptions? "," method_override? "," logging? "," setup_sessions ","Rack Builder  new "," setup_middleware "," setup_default_middleware "," setup_logging ","Rack Builder  new  run ","Rack Builder  new  use "]}," Sinatra Base mime_types":{"type":"method","name":"mime_types","children":[],"call":["type =~ "," mime_type "," mime_type  =~ "," mime_ mime_type  "]}," Sinatra Request accept_entry":{"type":"method","name":"accept_entry","children":[],"call":["1 - ","options size ","type count ","e [] to_f ","e [] ","e start_with? ","options delete_if ","entry gsub split ","entry gsub ","e =~ ","entry delete split ","entry delete "]}," Sinatra Request preferred_type":{"type":"method","name":"preferred_type","children":[],"call":["File  fnmatch ","types detect "," accept detect "," accept ","types flatten! "," accept first ","types empty? ","accepts detect ","types first ","accepts empty? ","accepts first ","MimeTypeEntry  new accepts? ","MimeTypeEntry  new "," accept empty? "," accept  detect "," accept  empty? "," accept  first ","MimeTypeEntry  new  accept ? "]}," Sinatra Request new":{"type":"method","name":"new","children":[],"call":[]}," Sinatra Base public":{"type":"method","name":"public","children":[],"call":[" public_folder "]}," Sinatra Base public=":{"type":"method","name":"public=","children":[],"call":[" set "," warn "," warn_for_deprecation "]}," Sinatra Templates initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Helpers StaticFile close":{"type":"method","name":"close","children":[],"call":[" closed? "]}," Sinatra Helpers StaticFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra use":{"type":"method","name":"use","children":[],"call":[]}," Sinatra Base cleaned_caller":{"type":"method","name":"cleaned_caller","children":[],"call":["file =~ ","CALLERS_TO_IGNORE  any? ","(send\n  (send nil :caller\n    (int 1)) :map) reject ","line split [] ","line split "," caller map "," caller ","(send\n  (send nil :caller\n    (int 1)) :map!) reject "," caller map! "," callers_to_ignore any? "," callers_to_ignore "]}," Sinatra Base warn":{"type":"method","name":"warn","children":[],"call":["message + "," cleaned_caller first join "," cleaned_caller first "," cleaned_caller "]}," Sinatra Base setup_protection":{"type":"method","name":"setup_protection","children":[],"call":["builder use ","options [] "," sessions? ","options []= "," Array "," protection dup "," protection ","Hash  === "," protection? ","options fetch ","protect_session ! ","(pair\n  (sym :img_src)\n  (str \"'self' data:\")) merge "," protection dup  [] ","(pair\n  (sym :img_src)\n  (str \"'self' data:\")) merge  [] "," protection dup  []= ","(pair\n  (sym :img_src)\n  (str \"'self' data:\")) merge  []= "," protection dup  fetch ","(pair\n  (sym :img_src)\n  (str \"'self' data:\")) merge  fetch "]}," Sinatra Base setup_logging":{"type":"method","name":"setup_logging","children":[],"call":["builder use "," logging "," logging respond_to? "," logging? "," setup_null_logger "," logging == "," setup_custom_logger "," setup_common_logger "]}," Sinatra Base setup_middleware":{"type":"method","name":"setup_middleware","children":[],"call":["builder use "," middleware each "," middleware "]}," Sinatra Base setup_default_middleware":{"type":"method","name":"setup_default_middleware","children":[],"call":[" setup_protection "," setup_sessions "," setup_logging ","builder use "," method_override? "," show_exceptions? "]}," Sinatra Base encoded":{"type":"method","name":"encoded","children":[],"call":[" encoded ","char == ","URI  encode ","Regexp  escape ","enc == ","URI  escape "," escaped join "," escaped ","URI_INSTANCE  escape "," URI  encode oded "," URI  escape oded "," URI_INSTANCE  escape oded ","URI  URI  encode ode ","URI  URI  escape ode ","URI  URI_INSTANCE  escape ode ","URI  encode  == ","URI  escape  == ","URI_INSTANCE  escape  == "]}," Sinatra Base generate_method":{"type":"method","name":"generate_method","children":[],"call":[" remove_method "," instance_method "," define_method ","method_name to_sym "," remove_ instance_method  "," instance_ instance_method  "," define_ instance_method  "," instance_method _name to_sym ","method_name to_sym  to_sym "]}," Sinatra Base patch":{"type":"method","name":"patch","children":[],"call":[" route "]}," Sinatra Templates creole":{"type":"method","name":"creole","children":[],"call":[" render "]}," Sinatra Helpers etag_matches?":{"type":"method","name":"etag_matches?","children":[],"call":["list to_s split include? "," response [] "," response ","list to_s split ","list to_s ","new_resource ! ","list == "]}," Sinatra Helpers not_found?":{"type":"method","name":"not_found?","children":[],"call":[" status == "," status "]}," Sinatra Helpers server_error?":{"type":"method","name":"server_error?","children":[],"call":[" status between? "," status "]}," Sinatra Helpers client_error?":{"type":"method","name":"client_error?","children":[],"call":[" status between? "," status "]}," Sinatra Helpers redirect?":{"type":"method","name":"redirect?","children":[],"call":[" status between? "," status "]}," Sinatra Helpers success?":{"type":"method","name":"success?","children":[],"call":[" status between? "," status "]}," Sinatra Helpers informational?":{"type":"method","name":"informational?","children":[],"call":[" status between? "," status "]}," Sinatra Helpers stream":{"type":"method","name":"stream","children":[],"call":[" body ","Stream  new "," env [] "," env "," proc ","@params dup "," with_params ","out closed? ","scheduler == "]}," Sinatra Helpers Stream callback":{"type":"method","name":"callback","children":[],"call":["@callbacks << "," closed? "]}," Sinatra Helpers Stream <<":{"type":"method","name":"<<","children":[],"call":["@front call ","data to_s ","@scheduler schedule "]}," Sinatra Helpers Stream each":{"type":"method","name":"each","children":[],"call":[" close "," raise ","@scheduler schedule ","@back call ","@scheduler defer "]}," Sinatra Helpers Stream close":{"type":"method","name":"close","children":[],"call":["@callback call ","@scheduler schedule ","c call ","@callbacks each "," closed? "]}," Sinatra Helpers Stream initialize":{"type":"method","name":"initialize","children":[],"call":["back to_proc "]}," Sinatra Helpers Stream defer":{"type":"method","name":"defer","children":[],"call":[]}," Sinatra Helpers Stream schedule":{"type":"method","name":"schedule","children":[],"call":[]}," Sinatra Helpers logger":{"type":"method","name":"logger","children":[],"call":[" request logger "," request "]}," Sinatra Response each":{"type":"method","name":"each","children":[],"call":[" enum_for "," block_given? "]}," Sinatra Response body=":{"type":"method","name":"body=","children":[],"call":["value to_str ","String  === ","value body ","Rack Response  === ","value respond_to? ","value body != ","value body  to_str ","value body  body ","value body  respond_to? ","value body  body != "]}," Sinatra Request idempotent?":{"type":"method","name":"idempotent?","children":[],"call":[" delete? "," put? "," safe? "," unlink? "," link? "]}," Sinatra Request safe?":{"type":"method","name":"safe?","children":[],"call":[" trace? "," options? "," head? "," get? "]}," Rack Logger call":{"type":"method","name":"call","children":[],"call":["@app call ","env []= ","logger level= "," Logger  new ","env [] "," Logger  new  level= "]}," Rack Request ssl?":{"type":"method","name":"ssl?","children":[],"call":["@env [] == ","@env [] "]}," Sinatra Base setup_custom_logger":{"type":"method","name":"setup_custom_logger","children":[],"call":["builder use "," logging "," logging respond_to? "]}," Sinatra Base setup_common_logger":{"type":"method","name":"setup_common_logger","children":[],"call":["builder use ","(str \"development\") include? ","ENV  [] "]}," Sinatra Base setup_null_logger":{"type":"method","name":"setup_null_logger","children":[],"call":["builder use "]}," Sinatra Base define_singleton_method":{"type":"method","name":"define_singleton_method","children":[],"call":[" define_method "," class_eval ","String  === "," undef_method "," method_defined? ","(sclass\n  (self)\n  (self)) class_eval "]}," Sinatra Helpers with_params":{"type":"method","name":"with_params","children":[],"call":[]}," Sinatra CommonLogger call":{"type":"method","name":"call","children":[],"call":[" call_without_check ","env []= ","@app call ","env [] "]}," Sinatra ExtendedRack async?":{"type":"method","name":"async?","children":[],"call":["body respond_to? ","status == "]}," Sinatra ExtendedRack after_response":{"type":"method","name":"after_response","children":[],"call":["EventMachine  next_tick "," raise "]}," Sinatra ExtendedRack setup_close":{"type":"method","name":"setup_close","children":[],"call":["body close ","env [] errback ","env [] ","env [] callback ","env include? ","body respond_to? "]}," Sinatra ExtendedRack call":{"type":"method","name":"call","children":[],"call":[" throw "," setup_close ","callback call "," after_response "," async? ","env [] "," app call "," app ","env []  call "]}," Sinatra Response drop_body?":{"type":"method","name":"drop_body?","children":[],"call":["(int 204) include? "," status to_i "," status ","DROP_BODY_RESPONSES  include? "]}," Sinatra Response drop_content_info?":{"type":"method","name":"drop_content_info?","children":[],"call":[" drop_body? "," status to_i / == "," status to_i / "," status to_i "," status "," informational? "]}," Sinatra Response calculate_content_length?":{"type":"method","name":"calculate_content_length?","children":[],"call":["Array  === "," body "," headers [] ! "," headers [] "," headers "]}," Sinatra Base define_singleton":{"type":"method","name":"define_singleton","children":[],"call":[" define_method "," class_eval ","String  === "," undef_method "," method_defined? ","(sclass\n  (self)\n  (self)) class_eval "," singleton_class class_eval "," singleton_class "]}," Sinatra ShowExceptions prefers_plain_text?":{"type":"method","name":"prefers_plain_text?","children":[],"call":["item =~ ","env [] ","(regexp\n  (str \"curl\")\n  (regopt)) index ","(send\n  (send\n    (send\n      (const nil :Request) :new\n      (lvar :env)) :preferred_type\n    (str \"text/plain\")\n    (str \"text/html\")) :==\n  (str \"text/html\")) ! ","Request  new preferred_type == ","Request  new preferred_type ","Request  new ","Request  new preferred_type != "]}," Sinatra Wrapper inspect":{"type":"method","name":"inspect","children":[],"call":[" settings app_file inspect "," settings app_file "," settings ","@instance class "]}," Sinatra Wrapper call":{"type":"method","name":"call","children":[],"call":["@stack call "]}," Sinatra Wrapper helpers":{"type":"method","name":"helpers","children":[],"call":[]}," Sinatra Wrapper settings":{"type":"method","name":"settings","children":[],"call":["@instance settings "]}," Sinatra Wrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sinatra Base safe_ignore":{"type":"method","name":"safe_ignore","children":[],"call":["unsafe_patterns join ","unsafe_patterns length > ","unsafe_patterns length ","chars [] ","char tr ","char =~ ","unsafe split map ","unsafe split ","unsafe_ignore map ","unsafe_ignore << ","hex [] ","ignore gsub ","unsafe split map! ","unsafe_ignore map! ","char + ","char downcase ","char == "]}," Sinatra Base escaped":{"type":"method","name":"escaped","children":[],"call":["URI  escape ","Regexp  escape ","URI_INSTANCE  escape "]}," Sinatra Base unlink":{"type":"method","name":"unlink","children":[],"call":[" route "]}," Sinatra Base link":{"type":"method","name":"link","children":[],"call":[" route "]}," Sinatra Base public_dir":{"type":"method","name":"public_dir","children":[],"call":[" public_folder "]}," Sinatra Base public_dir=":{"type":"method","name":"public_dir=","children":[],"call":[" public_folder= "]}," Sinatra Templates rabl":{"type":"method","name":"rabl","children":[],"call":[" render ","Rabl  register! "]}," Sinatra Templates yajl":{"type":"method","name":"yajl","children":[],"call":[" render ","options []= "]}," Sinatra Templates wlang":{"type":"method","name":"wlang","children":[],"call":[" render "]}," Sinatra Templates stylus":{"type":"method","name":"stylus","children":[],"call":[" render ","options merge! "]}," Sinatra Helpers Stream closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Sinatra NotFound http_status":{"type":"method","name":"http_status","children":[],"call":[]}," Sinatra Request AcceptEntry method_missing":{"type":"method","name":"method_missing","children":[],"call":[" to_str send "," to_str "]}," Sinatra Request AcceptEntry respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" to_str respond_to? "," to_str "]}," Sinatra Request AcceptEntry to_s":{"type":"method","name":"to_s","children":[],"call":[" to_str "," entry "]}," Sinatra Request AcceptEntry to_str":{"type":"method","name":"to_str","children":[],"call":[]}," Sinatra Request AcceptEntry priority":{"type":"method","name":"priority","children":[],"call":["@params size ","@type count -@ ","@type count "]}," Sinatra Request AcceptEntry <=>":{"type":"method","name":"<=>","children":[],"call":["other priority <=> "," priority ","other priority "]}," Sinatra Request AcceptEntry initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (ivar :@params) :delete\n  (str \"q\")) to_f ","@params delete ","Hash  [] ","entry [] delete ","entry [] ","value [] gsub ","value [] ","value start_with? ","s strip split ","s strip ","entry scan map ","entry scan ","entry scan map! ","params to_h ","(send\n  (ivar :Hash  [] ) :delete\n  (str \"q\")) to_f ","(send\n  (ivar :params to_h ) :delete\n  (str \"q\")) to_f ","Hash  []  delete ","params to_h  delete ","value [] gsub  [] gsub ","value [] gsub  [] ","value [] gsub  start_with? "]}," Sinatra Request unlink?":{"type":"method","name":"unlink?","children":[],"call":[" request_method == "," request_method "]}," Sinatra Request link?":{"type":"method","name":"link?","children":[],"call":[" request_method == "," request_method "]}," Sinatra Request AcceptEntry []":{"type":"method","name":"[]","children":[],"call":["@params [] "]}," Sinatra Request accept?":{"type":"method","name":"accept?","children":[],"call":[" preferred_type include? "," preferred_type "," preferred_type to_s include? "," preferred_type to_s "]}," Sinatra Base setup_traps":{"type":"method","name":"setup_traps","children":[],"call":[" set ","old_handler call ","old_handler respond_to? "," quit! "," trap ","(sym :INT) each "," at_exit "," traps? "]}," Sinatra Base start_server":{"type":"method","name":"start_server","children":[],"call":[" block_given? ","server threaded= "," settings threaded "," settings ","server respond_to? "," set "," setup_traps ","$stderr puts ","(str \"== Sinatra/\") + "," environment "," port ","handler_name =~ ","handler run "," supress_messages? "," prototype "," suppress_messages? "," warn "," on_start_callback call "," on_start_callback "," on_start_callback nil? "]}," Sinatra Base running?":{"type":"method","name":"running?","children":[],"call":[" running_server? "]}," Sinatra Templates mediawiki":{"type":"method","name":"mediawiki","children":[],"call":[" render "]}," Sinatra Templates asciidoc":{"type":"method","name":"asciidoc","children":[],"call":[" render "]}," Sinatra Ext get_handler":{"type":"method","name":"get_handler","children":[{"type":"method","name":"_const_get","children":[],"asgn":[],"call":[]},{"type":"method","name":"_const_get","children":[],"asgn":[],"call":[]}],"call":[]}," Sinatra ShowExceptions bad_request?":{"type":"method","name":"bad_request?","children":[],"call":["Sinatra BadRequest  === "]}," Sinatra IndifferentHash convert_value":{"type":"method","name":"convert_value","children":[],"call":["value map "," method "," class [] "," class ","value is_a? "]}," Sinatra IndifferentHash convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s ","key is_a? "]}," Sinatra IndifferentHash replace":{"type":"method","name":"replace","children":[],"call":[" class [] "," class ","other_hash is_a? "]}," Sinatra IndifferentHash merge":{"type":"method","name":"merge","children":[],"call":[" dup merge! "," dup "]}," Sinatra IndifferentHash merge!":{"type":"method","name":"merge!","children":[],"call":[" []= "," convert_value "," [] "," key? "," block_given? "," convert_key ","other_hash each_pair ","other_hash is_a? "," class ","other_hashes each ","  convert_key ? "," convert_ convert_key  "]}," Sinatra IndifferentHash values_at":{"type":"method","name":"values_at","children":[],"call":["keys map "," method ","keys map! "]}," Sinatra IndifferentHash fetch_values":{"type":"method","name":"fetch_values","children":[],"call":["keys map "," method ","keys map! "]}," Sinatra IndifferentHash dig":{"type":"method","name":"dig","children":[],"call":[" convert_key "]}," Sinatra IndifferentHash delete":{"type":"method","name":"delete","children":[],"call":[" convert_key "]}," Sinatra IndifferentHash value?":{"type":"method","name":"value?","children":[],"call":[" convert_value "]}," Sinatra IndifferentHash key?":{"type":"method","name":"key?","children":[],"call":[" convert_key "]}," Sinatra IndifferentHash key":{"type":"method","name":"key","children":[],"call":[" convert_value "]}," Sinatra IndifferentHash []=":{"type":"method","name":"[]=","children":[],"call":[" convert_value "," convert_key "]}," Sinatra IndifferentHash []":{"type":"method","name":"[]","children":[],"call":[" convert_key ","key to_s ","Symbol  === ","value nil? "]}," Sinatra IndifferentHash fetch":{"type":"method","name":"fetch","children":[],"call":["args map "," method "," convert_key ","args map! "]}," Sinatra IndifferentHash rassoc":{"type":"method","name":"rassoc","children":[],"call":[" convert_value "]}," Sinatra IndifferentHash assoc":{"type":"method","name":"assoc","children":[],"call":[" convert_key "]}," Sinatra IndifferentHash default=":{"type":"method","name":"default=","children":[],"call":[" convert_value "]}," Sinatra IndifferentHash default":{"type":"method","name":"default","children":[],"call":["args map "," method ","args map! "]}," Sinatra IndifferentHash initialize":{"type":"method","name":"initialize","children":[],"call":["args map "," method ","args map! "]}," Sinatra Base supress_messages?":{"type":"method","name":"supress_messages?","children":[],"call":[" quiet "," handler_name =~ "," handler_name "]}," Sinatra Helpers bad_request?":{"type":"method","name":"bad_request?","children":[],"call":[" status == "," status "]}," Sinatra BadRequest http_status":{"type":"method","name":"http_status","children":[],"call":[]}," Sinatra IndifferentHash has_key?":{"type":"method","name":"has_key?","children":[],"call":["key to_s ","Symbol  === "]}," Sinatra ShowExceptions pretty":{"type":"method","name":"pretty","children":[],"call":["TEMPLATE  result "," binding ","(send\n  (send\n    (lvar :exception) :backtrace) :map) compact ","frame post_context= ","lines [] ","frame post_context_lineno ","lineno + ","frame post_context_lineno= ","(send\n  (lvar :lineno) :+\n  (const nil :CONTEXT)) min ","lines size ","frame context_line= ","lines [] chomp ","frame pre_context= ","frame pre_context_lineno ","frame pre_context_lineno= ","(send\n  (lvar :lineno) :-\n  (const nil :CONTEXT)) max ","lineno - "," File  readlines ","frame filename ","frame lineno - ","frame lineno ","frame function= ","frame lineno= ","2 to_i ","frame filename= ","line =~ ","OpenStruct  new ","exception backtrace map ","exception backtrace ","(send\n  (send\n    (lvar :req) :script_name) :+\n  (send\n    (lvar :req) :path_info)) squeeze ","req script_name + ","req path_info ","req script_name ","Rack Request  new ","OpenStruct  new  post_context= "," File  readlines  [] ","frame post_context_frame lineno -  ","OpenStruct  new  post_context_lineno ","frame lineno -  + ","frame post_context_frame lineno - = ","OpenStruct  new  post_context_lineno= ","(send\n  (lvar :frame lineno - ) :+\n  (const nil :CONTEXT)) min "," File  readlines  size ","OpenStruct  new  context_line= "," File  readlines  [] chomp ","OpenStruct  new  pre_context= ","frame pre_context_frame lineno -  ","OpenStruct  new  pre_context_lineno ","frame pre_context_frame lineno - = ","OpenStruct  new  pre_context_lineno= ","(send\n  (lvar :frame lineno - ) :-\n  (const nil :CONTEXT)) max ","frame lineno -  - "," File  read File  readlines  ","OpenStruct  new  filename ","frame frame lineno -  - ","OpenStruct  new  lineno - ","frame frame lineno -  ","OpenStruct  new  lineno ","OpenStruct  new  function= ","frame frame lineno - = ","OpenStruct  new  lineno= ","OpenStruct  new  filename= ","(send\n  (send\n    (lvar :req) :script_name) :+\n  (send\n    (lvar :req) :(send\n  (send\n    (lvar :req) :script_name) :+\n  (send\n    (lvar :req) :path_info)) squeeze _info)) squeeze ","(send\n  (send\n    (lvar :Rack Request  new ) :script_name) :+\n  (send\n    (lvar :Rack Request  new ) :path_info)) squeeze ","Rack Request  new  script_name + ","req (send\n  (send\n    (lvar :req) :script_name) :+\n  (send\n    (lvar :req) :path_info)) squeeze _info ","Rack Request  new  path_info ","Rack Request  new  script_name "]}," Sinatra Base suppress_messages?":{"type":"method","name":"suppress_messages?","children":[],"call":[" quiet "," handler_name =~ "," handler_name "]}," Sinatra IndifferentHash slice":{"type":"method","name":"slice","children":[],"call":[" class [] "," class ","keys map! "," method "]}," Sinatra IndifferentHash transform_keys!":{"type":"method","name":"transform_keys!","children":[],"call":[" method "]}," Sinatra IndifferentHash transform_keys":{"type":"method","name":"transform_keys","children":[],"call":[" dup transform_keys! "," dup "]}," Sinatra IndifferentHash transform_values!":{"type":"method","name":"transform_values!","children":[],"call":[" method "]}," Sinatra IndifferentHash transform_values":{"type":"method","name":"transform_values","children":[],"call":[" dup transform_values! "," dup "]}," Sinatra ShowExceptions template":{"type":"method","name":"template","children":[],"call":[]}," Sinatra Request MimeTypeEntry matches_params?":{"type":"method","name":"matches_params?","children":[],"call":["@params [] == ","@params [] ","@params has_key? ! ","@params has_key? ","params all? ","@params empty? ","@params key? ! ","@params key? "]}," Sinatra Request MimeTypeEntry to_str":{"type":"method","name":"to_str","children":[],"call":[]}," Sinatra Request MimeTypeEntry accepts?":{"type":"method","name":"accepts?","children":[],"call":[" matches_params? ","entry params ","File  fnmatch "]}," Sinatra Request MimeTypeEntry initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  [] ","entry [] delete ","entry [] ","value [] gsub ","value [] ","value start_with? ","s strip split ","s strip ","entry scan map! ","entry scan ","params to_h ","value [] gsub  [] gsub ","value [] gsub  [] ","value [] gsub  start_with? "]}," Sinatra IndifferentHash compact":{"type":"method","name":"compact","children":[],"call":[" dup tap "," dup "]}," Sinatra IndifferentHash reject":{"type":"method","name":"reject","children":[],"call":["hash reject! "," dup tap "," dup "," to_enum "," block_given? "]}," Sinatra IndifferentHash select":{"type":"method","name":"select","children":[],"call":["hash select! "," dup tap "," dup "," to_enum "," block_given? "]}," Sinatra Templates compile_block_template":{"type":"method","name":"compile_block_template","children":[],"call":["template new ","line to_i ","caller [] ","options [] "," settings caller_locations first "," settings caller_locations "," settings ","first_location lineno ","first_location path "," caller_locations first "," caller_locations ","first_location lineno  to_i "," settings caller_locations first  [] "," settings  settings caller_locations first _locations first "," settings  settings caller_locations first _locations ","first_location first_location lineno no "," caller_locations first  lineno ","first_location first_location path  "," caller_locations first  path ","  settings caller_locations first _locations first ","  settings caller_locations first _locations "]}," Sinatra Base callers_to_ignore":{"type":"method","name":"callers_to_ignore","children":[],"call":[]}," Sinatra Base warn_for_deprecation":{"type":"method","name":"warn_for_deprecation","children":[],"call":[" warn ","message + "," cleaned_caller first join "," cleaned_caller first "," cleaned_caller "]}," Sinatra Base on_stop":{"type":"method","name":"on_stop","children":[],"call":[]}," Sinatra Base on_start":{"type":"method","name":"on_start","children":[],"call":[]}," Sinatra TemplateCache clear":{"type":"method","name":"clear","children":[],"call":[]}," Sinatra TemplateCache fetch":{"type":"method","name":"fetch","children":[],"call":["@cache []= ","@cache fetch "]}," Sinatra TemplateCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}}