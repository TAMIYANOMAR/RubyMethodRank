{" Term ANSIColor attributes":{"type":"method","name":"attributes","children":[],"call":["c [] ","@@attributes map ","c first ","ATTRIBUTE_NAMES  + + ","(str \"on_color\") to_sym ","(irange\n  (int 0)\n  (int 255)) map ","ATTRIBUTE_NAMES  + ","(str \"color\") to_sym "]}," Term ANSIColor uncolored":{"type":"method","name":"uncolored","children":[],"call":[" gsub "," respond_to? ","string gsub "," block_given? "," to_str gsub "," to_str ","string to_str gsub ","string to_str ","string respond_to? "]}," Term ANSIColor coloring=":{"type":"method","name":"coloring=","children":[],"call":[]}," Term ANSIColor coloring?":{"type":"method","name":"coloring?","children":[],"call":[]}," Term ANSIColor support?":{"type":"method","name":"support?","children":[],"call":["String  instance_methods map include? ! ","String  instance_methods map include? ","String  instance_methods map ","String  instance_methods "]}," Term ANSIColor uncolor":{"type":"method","name":"uncolor","children":[],"call":[" to_str gsub "," to_str "," respond_to? ","string to_str gsub ","string to_str ","string respond_to? "," block_given? ","(send nil :block_given?) extend "]}," Term ANSIColor RespondTo respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" attributes include? "," attributes "," term_ansicolor_attributes include? "," term_ansicolor_attributes "]}," Term ANSIColor method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __send__ "," Term ANSIColor  create_color_method ","(irange\n  (int 0)\n  (int 255)) include? ","2 to_i ","color_name =~ ","name to_s ","Term ANSIColor ATTRIBUTES  assoc ","name to_s  =~ "]}," Term ANSIColor create_color_method":{"type":"method","name":"create_color_method","children":[],"call":[]}," Term ANSIColor term_ansicolor_attributes":{"type":"method","name":"term_ansicolor_attributes","children":[],"call":[" Term ANSIColor  term_ansicolor_attributes ","Term ANSIColor ATTRIBUTE_NAMES  + + ","(str \"on_color\") to_sym ","(irange\n  (int 0)\n  (int 255)) map ","Term ANSIColor ATTRIBUTE_NAMES  + ","(str \"color\") to_sym "]}," Term ANSIColor on_color":{"type":"method","name":"on_color","children":[],"call":[" color ","attribute name "," raise ","name inspect ","Attribute  [] ","Attribute  []  name "]}," Term ANSIColor color":{"type":"method","name":"color","children":[],"call":["result << ","Term ANSIColor  coloring? "," to_str "," respond_to? ","string to_str ","string respond_to? "," block_given? ","attribute code "," raise ","name inspect ","Attribute  nearest_rgb ","Attribute  get ","Attribute  nearest_rgb_color ","Attribute  nearest_rgb_on_color ","name to_s =~ ","name to_s ","Attribute  [] ","result extend "," to_s ","Attribute  get  code ","Attribute  []  code "]}," Term ANSIColor RGBTriple distance_to":{"type":"method","name":"distance_to","children":[],"call":["Math  sqrt ","(send\n  (begin\n    (send\n      (send nil :red) :-\n      (send\n        (lvar :other) :red))) :*\n  (float 0.299)) ** + + ","(send\n  (begin\n    (send\n      (send nil :blue) :-\n      (send\n        (lvar :other) :blue))) :*\n  (float 0.114)) ** ","(send\n  (send nil :blue) :-\n  (send\n    (lvar :other) :blue)) * "," blue - ","other blue "," blue ","(send\n  (begin\n    (send\n      (send nil :red) :-\n      (send\n        (lvar :other) :red))) :*\n  (float 0.299)) ** + ","(send\n  (begin\n    (send\n      (send nil :green) :-\n      (send\n        (lvar :other) :green))) :*\n  (float 0.587)) ** ","(send\n  (send nil :green) :-\n  (send\n    (lvar :other) :green)) * "," green - ","other green "," green ","(send\n  (begin\n    (send\n      (send nil :red) :-\n      (send\n        (lvar :other) :red))) :*\n  (float 0.299)) ** ","(send\n  (send nil :red) :-\n  (send\n    (lvar :other) :red)) * "," red - ","other red "," red ","options [] distance ","options [] "]}," Term ANSIColor RGBTriple ==":{"type":"method","name":"==","children":[],"call":["@values == ","other values ","other to_rgb_triple values ","other to_rgb_triple "]}," Term ANSIColor RGBTriple to_a":{"type":"method","name":"to_a","children":[],"call":["@values dup "]}," Term ANSIColor RGBTriple to_rgb_triple":{"type":"method","name":"to_rgb_triple","children":[],"call":[]}," Term ANSIColor RGBTriple html":{"type":"method","name":"html","children":[],"call":["s << ","%02x % ","@values each "]}," Term ANSIColor RGBTriple blue":{"type":"method","name":"blue","children":[],"call":["@values [] "]}," Term ANSIColor RGBTriple green":{"type":"method","name":"green","children":[],"call":["@values [] "]}," Term ANSIColor RGBTriple red":{"type":"method","name":"red","children":[],"call":["@values [] "]}," Term ANSIColor RGBTriple initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (array\n    (send nil :Integer\n      (lvar :v))\n    (int 0)) :max) min ","(send nil :Integer\n  (lvar :v)) max "," Integer ","(lvar :red) map "]}," Term ANSIColor RGBTriple []":{"type":"method","name":"[]","children":[],"call":[]}," Term ANSIColor RGBTriple from_array":{"type":"method","name":"from_array","children":[],"call":[]}," Term ANSIColor RGBTriple from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Term ANSIColor RGBTriple from_html":{"type":"method","name":"from_html","children":[],"call":[]}," Term ANSIColor RGBTriple convert_value":{"type":"method","name":"convert_value","children":[],"call":[]}," Term ANSIColor Attribute distance_to":{"type":"method","name":"distance_to","children":[],"call":["our_rgb distance_to ","other to_rgb_triple ","other respond_to? "," to_rgb_triple ","1 / "," to_rgb_triple  distance_to "]}," Term ANSIColor Attribute to_rgb_triple":{"type":"method","name":"to_rgb_triple","children":[],"call":[]}," Term ANSIColor Attribute rgb_color?":{"type":"method","name":"rgb_color?","children":[],"call":["@rgb ! ! ","@rgb ! "]}," Term ANSIColor Attribute background?":{"type":"method","name":"background?","children":[],"call":["@name to_s start_with? ","@name to_s "]}," Term ANSIColor Attribute code":{"type":"method","name":"code","children":[],"call":[" background? "," rgb_color? "]}," Term ANSIColor Attribute initialize":{"type":"method","name":"initialize","children":[],"call":["RGBTriple  from_hash ","options empty? ! ","options empty? ","RGBTriple  from_html ","options [] ","code to_s ","name to_sym ","RGBTriple  from_options []  "]}," Term ANSIColor Attribute nearest_rgb_on_color":{"type":"method","name":"nearest_rgb_on_color","children":[],"call":[]}," Term ANSIColor Attribute nearest_rgb_color":{"type":"method","name":"nearest_rgb_color","children":[],"call":[]}," Term ANSIColor Attribute named_attributes":{"type":"method","name":"named_attributes","children":[],"call":[]}," Term ANSIColor Attribute rgb_colors":{"type":"method","name":"rgb_colors","children":[],"call":[]}," Term ANSIColor Attribute attributes":{"type":"method","name":"attributes","children":[],"call":[]}," Term ANSIColor Attribute get":{"type":"method","name":"get","children":[],"call":[]}," Term ANSIColor Attribute set":{"type":"method","name":"set","children":[],"call":[]}," Term ANSIColor Attribute []":{"type":"method","name":"[]","children":[],"call":[]}," Term ANSIColor RGBTriple gradient_to":{"type":"method","name":"gradient_to","children":[],"call":["gradient << ","changes [] / ","steps - ","changes [] ","current values [] ","current values ","3 times ","current dup ","s > ","x - ","other values zip map ","other values zip ","other values "," raise ","steps < ","options [] to_i ","options [] ","changesteps -  [] / ","steps - tepsteps -  - ","options [] to_i  - ","changesteps -  [] ","current dup  values [] ","current valuesteps -  [] ","current dup  values ","current valuesteps -  ","3 timesteps -  ","current dup  dup ","steps -  > ","other valuesteps -  zip map ","other valuesteps -  zip ","other valuesteps -  "," raisteps - e ","steps - tepsteps -  < ","options [] to_i  < ","optionsteps -  [] to_i ","optionsteps -  [] "]}," Term ANSIColor RGBTriple initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other instance_variable_set ","@values dup "]}," Term ANSIColor RGBTriple gray?":{"type":"method","name":"gray?","children":[],"call":[" blue == "," red "," blue "," green == "," green "," red == "," red != "]}," Term ANSIColor RGBColorMetrics CIELab distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics CIELab CIELabTriple from_rgb_triple":{"type":"method","name":"from_rgb_triple","children":[],"call":[]}," Term ANSIColor RGBColorMetrics CIEXYZ distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics CIEXYZ CIEXYZTriple from_rgb_triple":{"type":"method","name":"from_rgb_triple","children":[],"call":[]}," Term ANSIColor RGBColorMetrics YUV distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics YUV YUVTriple from_rgb_triple":{"type":"method","name":"from_rgb_triple","children":[],"call":[]}," Term ANSIColor RGBColorMetrics CompuPhase distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics NTSC distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics Euclidean distance":{"type":"method","name":"distance","children":[],"call":[]}," Term ANSIColor RGBColorMetrics metrics":{"type":"method","name":"metrics","children":[],"call":[]}," Term ANSIColor RGBColorMetrics metric?":{"type":"method","name":"metric?","children":[],"call":[]}," Term ANSIColor RGBColorMetrics metric":{"type":"method","name":"metric","children":[],"call":[]}," Term ANSIColor RGBColorMetricsHelpers NormalizeRGBTriple normalize_rgb_triple":{"type":"method","name":"normalize_rgb_triple","children":[],"call":[" normalize ","(send\n  (lvar :rgb_triple) :red) map ","rgb_triple blue ","rgb_triple green ","rgb_triple red "]}," Term ANSIColor RGBColorMetricsHelpers NormalizeRGBTriple normalize":{"type":"method","name":"normalize","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :v) :+\n      (float 0.055))) :/\n  (float 1.055)) ** ","(send\n  (lvar :v) :+\n  (float 0.055)) / ","v + ","v / ","v <= "]}," Term ANSIColor RGBColorMetricsHelpers WeightedEuclideanDistance weighted_euclidean_distance_to":{"type":"method","name":"weighted_euclidean_distance_to","children":[],"call":["Math  sqrt ","w * ","(send\n  (lvar :s) :-\n  (lvar :o)) ** ","s - "," values zip ","other values "," values "]}," Term ANSIColor PPMReader next_line":{"type":"method","name":"next_line","children":[],"call":["line =~ ","@io gets ","@io gets  =~ "]}," Term ANSIColor PPMReader parse_header":{"type":"method","name":"parse_header","children":[],"call":[" raise "," next_line =~ "," next_line ","2 to_i ","1 to_i ","line to_s chomp inspect ","line to_s chomp ","line to_s ","(lvasgn :line\n  (send nil :next_line)) =~ "," next_ next_line  =~ "," next_ next_line  "," next_line  to_s chomp inspect "," next_line  to_s chomp "," next_line  to_s ","(lvasgn : next_line \n  (send nil :next_ next_line )) =~ "]}," Term ANSIColor PPMReader parse_next_pixel":{"type":"method","name":"parse_next_pixel","children":[],"call":["@buffer slice! unpack ","@buffer slice! ","@buffer << ","@io read ","@buffer size < ","@buffer size ","3 to_i ","2 to_i ","1 to_i ","@buffer sub! "," next_line ","@buffer empty? "]}," Term ANSIColor PPMReader parse_row":{"type":"method","name":"parse_row","children":[],"call":["row << "," parse_next_pixel ","@width times "]}," Term ANSIColor PPMReader to_s":{"type":"method","name":"to_s","children":[],"call":["result << << ","result << "," reset "," on_color ","Attribute  nearest_rgb_color ","pixel != "," each_row "," on_Attribute  nearest_rgb_color  ","Attribute  nearest_rgb_Attribute  nearest_rgb_color  "]}," Term ANSIColor PPMReader to_a":{"type":"method","name":"to_a","children":[],"call":[" enum_for to_a "," enum_for "]}," Term ANSIColor PPMReader each_row":{"type":"method","name":"each_row","children":[],"call":[" parse_row ","@height times "," reset_io "]}," Term ANSIColor PPMReader reset_io":{"type":"method","name":"reset_io","children":[],"call":[" parse_header ","@io rewind "]}," Term ANSIColor PPMReader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Term ANSIColor Attribute gradient_to":{"type":"method","name":"gradient_to","children":[],"call":[" class nearest_rgb_color "," class ","our_rgb gradient_to map ","our_rgb gradient_to ","other to_rgb_triple ","other respond_to? "," to_rgb_triple "," to_rgb_triple  gradient_to map "," to_rgb_triple  gradient_to "]}," Term ANSIColor Attribute gray?":{"type":"method","name":"gray?","children":[],"call":[" to_rgb_triple gray? "," to_rgb_triple "," rgb_color? "]}," Term ANSIColor Attribute apply":{"type":"method","name":"apply","children":[],"call":[" Term ANSIColor  color "]}," Term ANSIColor RGBTriple method_missing":{"type":"method","name":"method_missing","children":[],"call":[" to_hsl_triple send "," to_hsl_triple ","Term ANSIColor HSLTriple  method_defined? "]}," Term ANSIColor RGBTriple color":{"type":"method","name":"color","children":[],"call":["Term ANSIColor  color "]}," Term ANSIColor RGBTriple to_hsl_triple":{"type":"method","name":"to_hsl_triple","children":[],"call":["Term ANSIColor HSLTriple  from_rgb_triple "]}," Term ANSIColor RGBTriple css":{"type":"method","name":"css","children":[],"call":["rgb(%u,%u,%u) % ","rgb(%s%%,%s%%,%s%%) % ","100.0 * / ","100.0 * ","@values map "]}," Term ANSIColor RGBTriple invert":{"type":"method","name":"invert","children":[],"call":[" class new ","255 - "," blue "," green "," red "," class "]}," Term ANSIColor RGBTriple blue_p":{"type":"method","name":"blue_p","children":[],"call":[" percentages [] "," percentages "]}," Term ANSIColor RGBTriple green_p":{"type":"method","name":"green_p","children":[],"call":[" percentages [] "," percentages "]}," Term ANSIColor RGBTriple red_p":{"type":"method","name":"red_p","children":[],"call":[" percentages [] "," percentages "]}," Term ANSIColor RGBTriple percentages":{"type":"method","name":"percentages","children":[],"call":["100 * / ","100 * ","@values map "]}," Term ANSIColor RGBTriple from_css":{"type":"method","name":"from_css","children":[],"call":[]}," Term ANSIColor HSLTriple method_missing":{"type":"method","name":"method_missing","children":[],"call":[" to_rgb_triple send "," to_rgb_triple ","Term ANSIColor RGBTriple  method_defined? "]}," Term ANSIColor HSLTriple ==":{"type":"method","name":"==","children":[],"call":[" to_rgb_triple == ","other to_rgb_triple "," to_rgb_triple "]}," Term ANSIColor HSLTriple css":{"type":"method","name":"css","children":[],"call":["hsl(%s,%s%%,%s%%) % "]}," Term ANSIColor HSLTriple to_hsl_triple":{"type":"method","name":"to_hsl_triple","children":[],"call":[]}," Term ANSIColor HSLTriple to_rgb_triple":{"type":"method","name":"to_rgb_triple","children":[],"call":["Term ANSIColor RGBTriple  new ","b round ","g round ","r round ","255 * "," hue2rgb ","h - ","1 / ","h + ","2 * - ","2 * ","(send\n  (lvar :l) :+\n  (lvar :s)) - ","s * ","l + ","l * ","1 + ","l < ","s zero? ","@lightness / ","@saturation / ","@hue / ","Te255 * m ANSIColo255 *  RGBT255 * iple  new ","Term ANSICo@lightness / or RGBTrip@lightness / e  new ","255 *  round ","b 255 * ound ","g 255 * ound ","255 *  255 * ound "," hue2rg255 *  "," hue2r255 * b "," hue2255 * gb "," @hue / ue2rgb ","@hue /  - ","@hue /  + ","(send\n  (lva255 *  :l) :+\n  (lva255 *  :s)) - ","(send\n  (@lightness / var :@lightness / ) :+\n  (@lightness / var :s)) - ","(@saturation / end\n  (lvar :l) :+\n  (lvar :@saturation / )) - ","@saturation /  * ","@lightness /  + ","@lightness /  * ","@lightness /  < ","s ze255 * o? ","@saturation /  zero? ","@li255 * htness / ","@@lightness / ightness / ","@lightne@saturation / @saturation /  / ","@lig@hue / tness / ","@satu255 * ation / ","@@saturation / aturation / ","@@hue / ue / "]}," Term ANSIColor HSLTriple hue2rgb":{"type":"method","name":"hue2rgb","children":[],"call":["x + ","(send\n  (lvar :y) :-\n  (lvar :x)) * * ","(send\n  (lvar :y) :-\n  (lvar :x)) * ","(send\n  (int 2) :/\n  (float 3.0)) - ","2 / ","y - ","(send\n  (int 3) :*\n  (lvar :h)) < ","3 * ","(send\n  (int 2) :*\n  (lvar :h)) < ","2 * ","(send\n  (int 6) :*\n  (lvar :h)) < ","6 * ","h > ","h < "]}," Term ANSIColor HSLTriple complement":{"type":"method","name":"complement","children":[],"call":[" adjust_hue "]}," Term ANSIColor HSLTriple grayscale":{"type":"method","name":"grayscale","children":[],"call":[" class new "," class "]}," Term ANSIColor HSLTriple adjust_hue":{"type":"method","name":"adjust_hue","children":[],"call":[" class new ","@hue + "," class "]}," Term ANSIColor HSLTriple desaturate":{"type":"method","name":"desaturate","children":[],"call":[" class new ","@saturation - "," class "]}," Term ANSIColor HSLTriple saturate":{"type":"method","name":"saturate","children":[],"call":[" class new ","@saturation + "," class "]}," Term ANSIColor HSLTriple darken":{"type":"method","name":"darken","children":[],"call":[" class new ","@lightness - "," class "]}," Term ANSIColor HSLTriple lighten":{"type":"method","name":"lighten","children":[],"call":[" class new ","@lightness + "," class "]}," Term ANSIColor HSLTriple initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (array\n    (send nil :Float\n      (lvar :lightness))\n    (int 0)) :max) min ","(send nil :Float\n  (lvar :lightness)) max "," Float ","(send\n  (array\n    (send nil :Float\n      (lvar :saturation))\n    (int 0)) :max) min ","(send nil :Float\n  (lvar :saturation)) max "," Float % "]}," Term ANSIColor HSLTriple []":{"type":"method","name":"[]","children":[],"call":[]}," Term ANSIColor HSLTriple from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Term ANSIColor HSLTriple from_css":{"type":"method","name":"from_css","children":[],"call":[]}," Term ANSIColor HSLTriple from_rgb_triple":{"type":"method","name":"from_rgb_triple","children":[],"call":[]}," Term ANSIColor Movement move_command":{"type":"method","name":"move_command","children":[],"call":["move << "," to_str "," respond_to? ","string to_str ","string respond_to? "," to_s "," block_given? "]}," Term ANSIColor Movement hide_cursor":{"type":"method","name":"hide_cursor","children":[],"call":[" move_command "]}," Term ANSIColor Movement show_cursor":{"type":"method","name":"show_cursor","children":[],"call":[" move_command "]}," Term ANSIColor Movement return_to_position":{"type":"method","name":"return_to_position","children":[],"call":[" save_position << << "," restore_position "," save_position << "," move_command "," save_position "]}," Term ANSIColor Movement restore_position":{"type":"method","name":"restore_position","children":[],"call":[" move_command "]}," Term ANSIColor Movement save_position":{"type":"method","name":"save_position","children":[],"call":[" move_command "]}," Term ANSIColor Movement scroll_down":{"type":"method","name":"scroll_down","children":[],"call":[" move_command "]}," Term ANSIColor Movement scroll_up":{"type":"method","name":"scroll_up","children":[],"call":[" move_command "]}," Term ANSIColor Movement erase_in_line":{"type":"method","name":"erase_in_line","children":[],"call":[" move_command "]}," Term ANSIColor Movement erase_in_display":{"type":"method","name":"erase_in_display","children":[],"call":[" move_command "]}," Term ANSIColor Movement clear_screen":{"type":"method","name":"clear_screen","children":[],"call":[" erase_in_display "]}," Term ANSIColor Movement move_home":{"type":"method","name":"move_home","children":[],"call":[" move_to "]}," Term ANSIColor Movement move_to_previous_line":{"type":"method","name":"move_to_previous_line","children":[],"call":[" move_command "]}," Term ANSIColor Movement move_to_next_line":{"type":"method","name":"move_to_next_line","children":[],"call":[" move_command "]}," Term ANSIColor Movement move_backward":{"type":"method","name":"move_backward","children":[],"call":[" move_command ","columns to_i "]}," Term ANSIColor Movement move_forward":{"type":"method","name":"move_forward","children":[],"call":[" move_command ","columns to_i "]}," Term ANSIColor Movement move_down":{"type":"method","name":"move_down","children":[],"call":[" move_command ","lines to_i "]}," Term ANSIColor Movement move_up":{"type":"method","name":"move_up","children":[],"call":[" move_command ","lines to_i "]}," Term ANSIColor Movement move_to_line":{"type":"method","name":"move_to_line","children":[],"call":[" move_command ","line to_i "]}," Term ANSIColor Movement move_to_column":{"type":"method","name":"move_to_column","children":[],"call":[" move_command ","column to_i "]}," Term ANSIColor Movement move_to":{"type":"method","name":"move_to","children":[],"call":[" move_command ","column to_i ","line to_i "]}," Term ANSIColor Movement terminal_columns":{"type":"method","name":"terminal_columns","children":[],"call":["Tins Terminal  columns "]}," Term ANSIColor Movement terminal_lines":{"type":"method","name":"terminal_lines","children":[],"call":["Tins Terminal  lines "]}}