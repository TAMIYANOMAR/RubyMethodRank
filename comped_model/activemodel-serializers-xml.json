{" ActiveRecord XmlSerializer Attribute compute_type":{"type":"method","name":"compute_type","children":[],"call":["(pair\n  (sym :text)\n  (sym :string)) [] ","cast_type type ","ActiveSupport XmlMini TYPE_NAMES  [] "," value class name "," value class "," value ","klass type_for_attribute "," name ","@serializable class ","klass type_for_attribute  type ","@serializable class  type_for_attribute "]}," ActiveRecord Serialization to_xml":{"type":"method","name":"to_xml","children":[],"call":["XmlSerializer  new serialize ","XmlSerializer  new "]}," ActiveModel eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," ActiveModel Serializers Xml from_xml":{"type":"method","name":"from_xml","children":[],"call":[" attributes= ","Hash  from_xml values first ","Hash  from_xml values ","Hash  from_xml "]}," ActiveModel Serializers Xml to_xml":{"type":"method","name":"to_xml","children":[],"call":["Serializer  new serialize ","Serializer  new "]}," ActiveModel Serializers Xml Serializer add_procs":{"type":"method","name":"add_procs","children":[],"call":["proc call "," options ","proc arity == ","proc arity "," Array each "," Array "," options delete "]}," ActiveModel Serializers Xml Serializer add_associations":{"type":"method","name":"add_associations","children":[],"call":["records to_xml ","merged_options []= ","records class name ","records class ","records class to_s underscore == ","association to_s ","records class to_s underscore ","records class to_s ","record to_xml ","merged_options merge ","record class name ","record class ","record class to_s underscore == ","record class to_s underscore ","record class to_s "," options [] "," options ","records each ","@builder tag! ","records empty? ","association to_s singularize ","ActiveSupport XmlMini  rename_key ","records to_ary ","records respond_to? "," options [] nil? ! "," options [] nil? ","merged_options [] nil? ","merged_options [] ","(sym :skip_types) each ","opts merge "," options slice ","records to_ary  to_xml ","opts merge  []= ","records to_ary  class name ","records to_ary  class ","records to_ary  class to_s underscore == ","records to_ary  class to_s underscore ","records to_ary  class to_s ","opts merge  merge ","records to_ary  each ","@builder ActiveSupport XmlMini  rename_key ! ","records to_ary  empty? ","records to_ary  to_ary ","records to_ary  respond_to? ","opts merge  [] nil? ","opts merge  [] "]}," ActiveModel Serializers Xml Serializer add_includes":{"type":"method","name":"add_includes","children":[],"call":[" add_associations ","@serializable send "," options "]}," ActiveModel Serializers Xml Serializer add_attributes_and_methods":{"type":"method","name":"add_attributes_and_methods","children":[],"call":["ActiveSupport XmlMini  to_tag "," options merge ","attribute decorations "," options ","attribute value ","ActiveSupport XmlMini  rename_key ","attribute name "," serializable_collection each "," serializable_collection ","ActiveSupport XmlMini  rename_ActiveSupport XmlMini  rename_key  "]}," ActiveModel Serializers Xml Serializer add_extra_behavior":{"type":"method","name":"add_extra_behavior","children":[],"call":[]}," ActiveModel Serializers Xml Serializer serialize":{"type":"method","name":"serialize","children":[],"call":[" block_given? "," add_procs "," add_extra_behavior "," add_includes "," add_attributes_and_methods ","@builder tag! ","args << "," options [] "," options "," options [] ! ","ActiveSupport XmlMini  rename_key ","(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (ivar :@serializable) :model_name) :element)) to_s ","@serializable model_name element ","@serializable model_name ","@builder instruct! "," Builder XmlMarkup  new "," require "," options []  tag! ","(or\n  (send\n    (send nil :options) :[]\n    (sym :ActiveSupport XmlMini  rename_key ))\n  (send\n    (send\n      (ivar :@serializable) :model_name) :element)) to_s ","(or\n  (send\n    (send nil :options) :[]\n    (sym :(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (ivar :@serializable) :model_name) :element)) to_s ))\n  (send\n    (send\n      (ivar :@serializable) :model_name) :element)) to_s "," options []  instruct! "]}," ActiveModel Serializers Xml Serializer serializable_collection":{"type":"method","name":"serializable_collection","children":[],"call":[" class Attribute  new "," class "," class MethodAttribute  new ","methods include? ","name to_s "," serializable_hash map "," serializable_hash "," Array map "," Array "," options [] "," options "," Array map  include? ","name to_s  to_s "]}," ActiveModel Serializers Xml Serializer serializable_hash":{"type":"method","name":"serializable_hash","children":[],"call":["@serializable serializable_hash ","@options except "]}," ActiveModel Serializers Xml Serializer initialize":{"type":"method","name":"initialize","children":[],"call":["options dup "]}," ActiveModel Serializers Xml Serializer Attribute compute_type":{"type":"method","name":"compute_type","children":[],"call":[" value respond_to? "," value ","ActiveSupport XmlMini TYPE_NAMES  [] "," value class name "," value class "," value nil? "]}," ActiveModel Serializers Xml Serializer Attribute decorations":{"type":"method","name":"decorations","children":[],"call":["decorations []= "," value nil? "," value "," type "," type == "]}," ActiveModel Serializers Xml Serializer Attribute initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_type ","value in_time_zone ","value respond_to? ","value acts_like? ","value in_time_zone  in_time_zone ","value in_time_zone  respond_to? ","value in_time_zone  acts_like? "]}}