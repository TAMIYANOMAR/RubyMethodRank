{" Ole Types load_guid":{"type":"method","name":"load_guid","children":[],"call":[]}," Ole Types load_time":{"type":"method","name":"load_time","children":[],"call":[]}," Logger new_with_callstack":{"type":"method","name":"new_with_callstack","children":[],"call":[]}," Enumerable sum":{"type":"method","name":"sum","children":[],"call":["a + "," inject "]}," Enumerable group_by":{"type":"method","name":"group_by","children":[],"call":["hash [] << ","hash [] "," each ","hash []= ","Hash  new ","h []= "]}," Symbol to_proc":{"type":"method","name":"to_proc","children":[],"call":["a send "," proc ","args shift __send__ ","args shift ","Proc  new "]}," File size":{"type":"method","name":"size","children":[],"call":[" stat size "," stat "]}," RangesIO inspect":{"type":"method","name":"inspect","children":[],"call":[" io inspect "," io "," class ","pos + "," range_and_offset [] "," range_and_offset ","@ranges [] "," offset_and_size last "," offset_and_size "]}," RangesIO each_read":{"type":"method","name":"each_read","children":[],"call":[" read "," eof? "]}," RangesIO write":{"type":"method","name":"write","children":[],"call":["@io write ","data [] ","data length ","chunk length ","data_pos + > ","data_pos + ","@io seek ","(send\n  (array\n    (array\n      (send\n        (send\n          (lvar :r) :[]\n          (int 0)) :+\n        (lvar :off))\n      (send\n        (send\n          (lvar :r) :[]\n          (int 1)) :-\n        (lvar :off)))) :+\n  (send\n    (send nil :ranges) :[]\n    (irange\n      (send\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(array\n  (send\n    (send\n      (lvar :r) :[]\n      (int 0)) :+\n    (lvar :off))\n  (send\n    (send\n      (lvar :r) :[]\n      (int 1)) :-\n    (lvar :off))) + "," ranges [] ","i + "," ranges ","r [] - ","r [] ","r [] + "," ranges index "," range_and_offset "," raise "," truncate ","@pos + ","data length > ","@size - ","data empty? ","@ranges [] ","@active == ","@ranges length - ","@ranges length "," loop ","@pos - ","@offsets [] "," inspect ","data dup force_encoding ","data dup ","data encoding != ","data encoding ","data respond_to? ","(send\n  (array\n    (lvar :partial_range)) :+\n  (send\n    (send nil :ranges) :[]\n    (irange\n      (send\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(lvar :partial_range) + "," offset_and_size ","@ ranges index o wr ranges index te ","data dup force_encoding  [] ","data dup force_encoding  length ","data []  length ","data length  + > ","data dup force_encoding _pos + > ","data length  + ","data dup force_encoding _pos + ","@ ranges index o seek ","(send\n  (array\n    (array\n      (send\n        (send\n          (lvar :r) :[]\n          ( ranges index nt 0)) :+\n        (lvar :off))\n      (send\n        (send\n          (lvar :r) :[]\n          ( ranges index nt 1)) :-\n        (lvar :off)))) :+\n  (send\n    (send n ranges index l :ranges) :[]\n    ( ranges index range\n      (send\n        (lvar : ranges index ) :+\n        ( ranges index nt 1))\n      ( ranges index nt -1)))) each ","(array\n  (send\n    (send\n      (lvar :r) :[]\n      ( ranges index nt 0)) :+\n    (lvar :off))\n  (send\n    (send\n      (lvar :r) :[]\n      ( ranges index nt 1)) :-\n    (lvar :off))) + "," ranges index  + "," ranges  ranges index ndex "," ra ranges index se ","data dup force_encoding  length > ","@s ranges index ze - ","data dup force_encoding  empty? ","@act ranges index ve == ","  ranges index nspect ","data dup force_encod ranges index ng ","data dup force_encoding  dup force_encoding ","data dup force_encoding  dup ","data encod ranges index ng != ","data dup force_encoding  encoding != ","data encod ranges index ng ","data dup force_encoding  encoding ","data dup force_encoding  respond_to? ","(send\n  (array\n    (lvar :part ranges index al_range)) :+\n  (send\n    (send n ranges index l :ranges) :[]\n    ( ranges index range\n      (send\n        (lvar : ranges index ) :+\n        ( ranges index nt 1))\n      ( ranges index nt -1)))) each ","(lvar :part ranges index al_range) + "," offset_and_s ranges index ze "]}," RangesIO truncate":{"type":"method","name":"truncate","children":[],"call":[" raise "]}," RangesIO read":{"type":"method","name":"read","children":[],"call":["data << ","@io read ","limit < ","@io seek ","(send\n  (array\n    (array\n      (send\n        (send\n          (lvar :r) :[]\n          (int 0)) :+\n        (lvar :off))\n      (send\n        (send\n          (lvar :r) :[]\n          (int 1)) :-\n        (lvar :off)))) :+\n  (send\n    (send nil :ranges) :[]\n    (irange\n      (send\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(array\n  (send\n    (send\n      (lvar :r) :[]\n      (int 0)) :+\n    (lvar :off))\n  (send\n    (send\n      (lvar :r) :[]\n      (int 1)) :-\n    (lvar :off))) + "," ranges [] ","i + "," ranges ","r [] - ","r [] ","r [] + "," ranges index "," range_and_offset "," eof? "," size ","@ranges [] ","@active == ","@ranges length - ","@ranges length ","s length != ","s length ","@io read to_s "," loop ","@pos - ","@offsets [] "," dup ","(send\n  (array\n    (lvar :partial_range)) :+\n  (send\n    (send nil :ranges) :[]\n    (irange\n      (send\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(lvar :partial_range) + "," offset_and_size "," dup  << ","@ ranges index o read ","l ranges index m ranges index t < ","@ ranges index o seek ","@io @io read to_s eek ","@io @io read eek ","(send\n  (array\n    (array\n      (send\n        (send\n          (lvar :r) :[]\n          ( ranges index nt 0)) :+\n        (lvar :off))\n      (send\n        (send\n          (lvar :r) :[]\n          ( ranges index nt 1)) :-\n        (lvar :off)))) :+\n  (send\n    (send n ranges index l :ranges) :[]\n    ( ranges index range\n      (send\n        (lvar : ranges index ) :+\n        ( ranges index nt 1))\n      ( ranges index nt -1)))) each ","(@io read to_s end\n  (array\n    (array\n      (@io read to_s end\n        (@io read to_s end\n          (lvar :r) :[]\n          (int 0)) :+\n        (lvar :off))\n      (@io read to_s end\n        (@io read to_s end\n          (lvar :r) :[]\n          (int 1)) :-\n        (lvar :off)))) :+\n  (@io read to_s end\n    (@io read to_s end nil :range@io read to_s ) :[]\n    (irange\n      (@io read to_s end\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(@io read end\n  (array\n    (array\n      (@io read end\n        (@io read end\n          (lvar :r) :[]\n          (int 0)) :+\n        (lvar :off))\n      (@io read end\n        (@io read end\n          (lvar :r) :[]\n          (int 1)) :-\n        (lvar :off)))) :+\n  (@io read end\n    (@io read end nil :range@io read ) :[]\n    (irange\n      (@io read end\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(array\n  (send\n    (send\n      (lvar :r) :[]\n      ( ranges index nt 0)) :+\n    (lvar :off))\n  (send\n    (send\n      (lvar :r) :[]\n      ( ranges index nt 1)) :-\n    (lvar :off))) + ","(array\n  (@io read to_s end\n    (@io read to_s end\n      (lvar :r) :[]\n      (int 0)) :+\n    (lvar :off))\n  (@io read to_s end\n    (@io read to_s end\n      (lvar :r) :[]\n      (int 1)) :-\n    (lvar :off))) + ","(array\n  (@io read end\n    (@io read end\n      (lvar :r) :[]\n      (int 0)) :+\n    (lvar :off))\n  (@io read end\n    (@io read end\n      (lvar :r) :[]\n      (int 1)) :-\n    (lvar :off))) + "," range@io read to_s  [] "," range@io read  [] "," ranges index  + "," range@io read to_s  "," range@io read  "," ranges  ranges index ndex "," range@io read to_s  index "," range@io read  index "," range_and_off@io read to_s et "," range_and_off@io read et "," s ranges index ze "," @io read to_s ize "," @io read ize ","@range@io read to_s  [] ","@range@io read  [] ","@act ranges index ve == ","@range@io read to_s  length - ","@range@io read  length - ","@range@io read to_s  length ","@range@io read  length ","@io read to_s  length != ","@io read  length != ","@io read to_s  length ","@io read  length ","@ ranges index o read to_s ","@io read to_@io read to_s  ","@io read to_@io read  ","@po@io read to_s  - ","@po@io read  - ","@off@io read to_s et@io read to_s  [] ","@off@io read et@io read  [] ","(send\n  (array\n    (lvar :part ranges index al_range)) :+\n  (send\n    (send n ranges index l :ranges) :[]\n    ( ranges index range\n      (send\n        (lvar : ranges index ) :+\n        ( ranges index nt 1))\n      ( ranges index nt -1)))) each ","(@io read to_s end\n  (array\n    (lvar :partial_range)) :+\n  (@io read to_s end\n    (@io read to_s end nil :range@io read to_s ) :[]\n    (irange\n      (@io read to_s end\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(@io read end\n  (array\n    (lvar :partial_range)) :+\n  (@io read end\n    (@io read end nil :range@io read ) :[]\n    (irange\n      (@io read end\n        (lvar :i) :+\n        (int 1))\n      (int -1)))) each ","(lvar :part ranges index al_range) + "," offset_and_s ranges index ze "," off@io read to_s et_and_@io read to_s ize "," off@io read et_and_@io read ize "]}," RangesIO eof?":{"type":"method","name":"eof?","children":[],"call":["@pos == "]}," RangesIO range_and_offset":{"type":"method","name":"range_and_offset","children":[],"call":[" raise ","pos inspect ","pos - ","pos <= ","total + ","r [] "," ranges inject "," ranges ","total + tal + "]}," RangesIO close":{"type":"method","name":"close","children":[],"call":["@io close ","@opts [] ","@params [] "]}," RangesIO pos=":{"type":"method","name":"pos=","children":[],"call":[" raise ","whence inspect ","whence == ","a - ","c + ","pos < ","pos == ","@offsets [] ","(send\n  (lvar :a) :+\n  (lvar :b)) / ","a + ","a < ","@offsets length ","(irange\n  (int 0)\n  (ivar :@size)) === ","@size + ","(send\n  (lvar :a) :+\n  (lvar :b)) div ","(erange\n  (int 0)\n  (ivar :@size)) === "," rc + ise ","when(send\n  (lvar :a) :+\n  (lvar :b)) / e inspe(send\n  (lvar :a) :+\n  (lvar :b)) / t ","when(send\n  (lvar :a) :+\n  (lvar :b)) div e inspe(send\n  (lvar :a) :+\n  (lvar :b)) div t ","when(send\n  (lvar :a) :+\n  (lvar :b)) / e == ","when(send\n  (lvar :a) :+\n  (lvar :b)) div e == ","c +  - ","(send\n  (lvar :a) :+\n  (lvar :b)) /  + ","(send\n  (lvar :a) :+\n  (lvar :b)) div  + ","@size +  < ","@size +  == ","(send\n  (lvc + r :c + ) :+\n  (lvc + r :b)) / ","c +  + ","c +  < ","(irc + nge\n  (int 0)\n  (ivc + r :@size)) === ","(send\n  (lvc + r :c + ) :+\n  (lvc + r :b)) div ","(erc + nge\n  (int 0)\n  (ivc + r :@size)) === "]}," RangesIO initialize":{"type":"method","name":"initialize","children":[],"call":["total + ","@ranges inject ","r end - ","r begin ","r end ","Range  === ","ranges map ","(pair\n  (sym :close_parent)\n  (false)) merge "," seek "," size ","@mode append? "," truncate ","@mode truncate? "," ranges= ","io size ","IO Mode  new ","params [] ","Hash  === ","Ole IOMode  new ","@params []  inject ","params []  map ","IO Mode  new  append? ","Ole IOMode  new  append? ","IO Mode  new  truncate? ","Ole IOMode  new  truncate? "," params [] = "]}," IO copy":{"type":"method","name":"copy","children":[],"call":[]}," Ole Storage DirParent Dir rewind":{"type":"method","name":"rewind","children":[],"call":[]}," Ole Storage DirParent Dir pos=":{"type":"method","name":"pos=","children":[],"call":["(send\n  (array\n    (int 0)\n    (lvar :pos)) :max) min ","@entries length ","(int 0) max "]}," Ole Storage DirParent Dir read":{"type":"method","name":"read","children":[],"call":["@pos < ","@entries length ","@entries [] "]}," Ole Storage DirParent Dir close":{"type":"method","name":"close","children":[],"call":[]}," Ole Storage DirParent Dir each":{"type":"method","name":"each","children":[],"call":["@entries each "]}," Ole Storage DirParent Dir initialize":{"type":"method","name":"initialize","children":[],"call":["(str \".\") + ","@dirent children map ","@dirent children "]}," Ole Storage DirParent rmdir":{"type":"method","name":"rmdir","children":[],"call":["parent children delete ","parent children ","@ole dirent_from_path ","path sub "," raise ","path inspect ","dirent children empty? ","dirent children ","dirent dir? ","@ole dirent_from_path  children delete ","@ole dirent_from_path  children ","@ole @ole dirent_from_path _from_path ","@ole dirent_from_path  children empty? ","@ole dirent_from_path  dir? "]}," Ole Storage DirParent entries":{"type":"method","name":"entries","children":[],"call":["dir entries "," open "]}," Ole Storage DirParent open":{"type":"method","name":"open","children":[],"call":[" block_given? ","Dir  new "," raise ","path_str inspect ","dirent dir? ","@ole dirent_from_path ","Dir  new ent Dir  new ? ","@ole dirent_from_path  dir? ","@ole Dir  new ent_from_path ","@ole @ole dirent_from_path _from_path "]}," Ole Storage DirParent initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage FileParent unlink":{"type":"method","name":"unlink","children":[],"call":["parent children delete ","parent children ","@ole dirent_from_path ","(send\n  (str \"/\") :+\n  (lvar :path)) sub ","/ + ","f truncate "," open "," raise ","path inspect ","dirent file? ","@ole dirent_from_path  children delete ","@ole dirent_from_path  children ","@ole @ole dirent_from_path _from_path ","@ole dirent_from_path  file? "]}," Ole Storage FileParent read":{"type":"method","name":"read","children":[],"call":["f read "," open "]}," Ole Storage FileParent open":{"type":"method","name":"open","children":[],"call":["dirent open "," raise ","path_str inspect ","dirent file? ","@ole dirent_from_path ","@ole dirent_from_path  open ","@ole dirent_from_path  file? ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileParent initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage dirent_from_path":{"type":"method","name":"dirent_from_path","children":[],"call":[" raise ","path_str inspect ","dirent [] ","path shift ","dirent file? ","path empty? ","path split ","path_str sub sub ","path_str sub ","dirent / ","part empty? "," file expand_path split "," file expand_path "," file ","path sub sub split ","path sub sub ","path sub ","path split _str inspect ","path_str sub sub _str inspect "," file expand_path split _str inspect ","path sub sub split _str inspect "," file expand_path _str inspect ","dirent /  [] ","path split  shift ","path_str sub sub  shift "," file expand_path split  shift ","path sub sub split  shift "," file expand_path  shift ","dirent /  file? ","path split  empty? ","path_str sub sub  empty? "," file expand_path split  empty? ","path sub sub split  empty? "," file expand_path  empty? ","path split  split ","path_str sub sub  split "," file expand_path split  split ","path sub sub split  split "," file expand_path  split ","path split _str sub sub ","path_str sub sub _str sub sub "," file expand_path split _str sub sub ","path sub sub split _str sub sub "," file expand_path _str sub sub ","path split _str sub ","path_str sub sub _str sub "," file expand_path split _str sub ","path sub sub split _str sub "," file expand_path _str sub ","dirent /  / ","path shift  empty? "," file expand_path_str sub sub  split "," file expand_ file expand_path split  split "," file expand_path sub sub split  split "," file expand_ file expand_path  split "," file expand_path split  "," file expand_path_str sub sub  "," file expand_ file expand_path split  "," file expand_path sub sub split  "," file expand_ file expand_path  ","path split  sub sub split ","path_str sub sub  sub sub split "," file expand_path split  sub sub split ","path sub sub split  sub sub split "," file expand_path  sub sub split ","path split  sub sub ","path_str sub sub  sub sub "," file expand_path split  sub sub ","path sub sub split  sub sub "," file expand_path  sub sub ","path split  sub ","path_str sub sub  sub "," file expand_path split  sub ","path sub sub split  sub "," file expand_path  sub "]}," Ole Storage dir":{"type":"method","name":"dir","children":[],"call":["DirParent  new ","DirClass  new "]}," Ole Storage file":{"type":"method","name":"file","children":[],"call":["FileParent  new ","FileClass  new "]}," Ole Types PropertySet to_h":{"type":"method","name":"to_h","children":[],"call":["hash update ","name to_sym "," inject "]}," Ole Types PropertySet each":{"type":"method","name":"each","children":[],"call":["map [] ","section each ","pair last ","DATA  [] ","section guid ","@sections each ","pair last  [] ","DATA  []  last "]}," Ole Types PropertySet method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","PROPERTY_MAP  [] ","name to_s ","args length == ","args length "," []= ","args first ","name to_s =~ "]}," Ole Types PropertySet []=":{"type":"method","name":"[]=","children":[],"call":["section []= ","pair last ","s guid == ","pair first ","s guid ","@sections find ","PROPERTY_MAP  [] ","key to_s ","PROPERTY_MAP  []  last ","PROPERTY_MAP  []  first "]}," Ole Types PropertySet []":{"type":"method","name":"[]","children":[],"call":["section [] ","pair last ","s guid == ","pair first ","s guid ","@sections find ","PROPERTY_MAP  [] ","key to_s ","PROPERTY_MAP  []  last ","PROPERTY_MAP  []  first "]}," Ole Types PropertySet load_section_list":{"type":"method","name":"load_section_list","children":[],"call":["Section  new ","str to_enum map ","str to_enum ","str scan map ","str scan "]}," Ole Types PropertySet load_header":{"type":"method","name":"load_header","children":[],"call":["Log  warn ","OS_MAP  [] ","Clsid  load ","str unpack ","Guid  load "]}," Ole Types PropertySet initialize":{"type":"method","name":"initialize","children":[],"call":[" load_section_list ","io read ","@num_sections * "," load_header ","Log  warn ","io pos == ","@sections map min ","@sections map ","io pos "]}," Ole Types PropertySet Section read_property":{"type":"method","name":"read_property","children":[],"call":["Variant  load "," io read "," io "," io read unpack "," io seek "," offset + "," offset "]}," Ole Types PropertySet Section each_raw":{"type":"method","name":"each_raw","children":[],"call":["str unpack "," io read each_chunk "," io read "," length * "," length "," io "," io seek "," offset + "," offset "," io read scan each "," io read scan "]}," Ole Types PropertySet Section each":{"type":"method","name":"each","children":[],"call":[" read_property last "," read_property "," each_raw "," io read "," io "," io read unpack [] "," io read unpack "," io seek "," offset + "," offset ","str unpack "," io read scan each "," io read scan "," length * "," length ","Variant  load "]}," Ole Types PropertySet Section []=":{"type":"method","name":"[]=","children":[],"call":[" raise "]}," Ole Types PropertySet Section []":{"type":"method","name":"[]","children":[],"call":[" read_property last "," read_property ","key == "," each_raw ","result last "," properties assoc "," properties ","@map invert [] ","@map invert ","Integer  === ","@map invert []  == "," properties assoc  last "]}," Ole Types PropertySet Section load_header":{"type":"method","name":"load_header","children":[],"call":[" io read unpack "," io read "," io "," io seek "," offset "]}," Ole Types PropertySet Section io":{"type":"method","name":"io","children":[],"call":["@property_set io "]}," Ole Types PropertySet Section initialize":{"type":"method","name":"initialize","children":[],"call":[" load_header "," guid= ","Clsid  load "," guid ","str unpack ","Guid  load ","DATA  [] [] ","DATA  [] "]}," Ole Types Variant dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types Variant load":{"type":"method","name":"load","children":[],"call":[]}," Ole Types Clsid inspect":{"type":"method","name":"inspect","children":[],"call":[" format "," class "]}," Ole Types Clsid format":{"type":"method","name":"format","children":[],"call":["(str \"%08x-%04x-%04x-%02x%02x-\") % "," unpack ","%02x * "]}," Ole Types Clsid parse":{"type":"method","name":"parse","children":[],"call":[]}," Ole Types Clsid dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types Clsid load":{"type":"method","name":"load","children":[],"call":[]}," Ole Types FileTime inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "," class "]}," Ole Types FileTime dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types FileTime load":{"type":"method","name":"load","children":[],"call":[]}," Ole Types FileTime now":{"type":"method","name":"now","children":[],"call":[]}," Ole Types FileTime from_time":{"type":"method","name":"from_time","children":[],"call":[]}," Ole Types FileTime new":{"type":"method","name":"new","children":[],"call":[]}," Ole Types Lpwstr dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types Lpwstr load":{"type":"method","name":"load","children":[],"call":[]}," Ole Types Lpstr dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types Lpstr load":{"type":"method","name":"load","children":[],"call":[]}," Ole Types Data dump":{"type":"method","name":"dump","children":[],"call":[]}," Ole Types Data load":{"type":"method","name":"load","children":[],"call":[]}," IO Mode inspect":{"type":"method","name":"inspect","children":[],"call":["names compact * ","names compact "," class ","names unshift ","(send\n  (send nil :flags) :&\n  (int 3)) == "," flags & "," flags ","(send\n  (send nil :flags) :&\n  (send\n    (const nil :Mode) :const_get\n    (send\n      (lvar :name) :upcase))) != ","Mode  const_get ","name upcase ","NAMES  map ","(send\n  (send nil :flags) :&\n  (send\n    (const nil :IO) :const_get\n    (send\n      (lvar :name) :upcase))) != ","IO  const_get "]}," IO Mode binary?":{"type":"method","name":"binary?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :BINARY)) != ","@flags & ","(send\n  (ivar :@flags) :&\n  (const\n    (const nil :IO) :BINARY)) != "]}," IO Mode create?":{"type":"method","name":"create?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :CREAT)) != ","@flags & ","(send\n  (ivar :@flags) :&\n  (const\n    (const nil :IO) :CREAT)) != "]}," IO Mode append?":{"type":"method","name":"append?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :APPEND)) != ","@flags & ","(send\n  (ivar :@flags) :&\n  (const\n    (const nil :IO) :APPEND)) != "]}," IO Mode truncate?":{"type":"method","name":"truncate?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :TRUNC)) != ","@flags & ","(send\n  (ivar :@flags) :&\n  (const\n    (const nil :IO) :TRUNC)) != "]}," IO Mode readable?":{"type":"method","name":"readable?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :WRONLY)) == ","@flags & ","(send\n  (ivar :@flags) :&\n  (const\n    (const nil :IO) :WRONLY)) == "]}," IO Mode writeable?":{"type":"method","name":"writeable?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (int 3)) != ","@flags & "]}," IO Mode initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","flags inspect ","Fixnum  === ","IO  parse_mode ","flags to_str ","flags respond_to? ","IO  parse_mode  inspect ","IO  parse_mode  to_str ","IO  parse_mode  respond_to? "]}," IO parse_mode":{"type":"method","name":"parse_mode","children":[],"call":[]}," RecursivelyEnumerable to_tree":{"type":"method","name":"to_tree","children":[],"call":["recurse call ","prefix + ","io << ","inspect [] ","node each_child ","node respond_to? "," proc ","inspect to_proc "," to_tree_helper "," send ","io string "," to_tree ","StringIO  new ","StringIO  new  << ","StringIO  new  string "]}," RecursivelyEnumerable recursive":{"type":"method","name":"recursive","children":[],"call":[" to_enum "]}," RecursivelyEnumerable each_recursive":{"type":"method","name":"each_recursive","children":[],"call":[" send "]}," RecursivelyEnumerable each_recursive_breadth_first":{"type":"method","name":"each_recursive_breadth_first","children":[],"call":["child each_recursive_breadth_first ","children each ","children << ","child respond_to? "," each_child "]}," RecursivelyEnumerable each_recursive_depth_first":{"type":"method","name":"each_recursive_depth_first","children":[],"call":["child each_recursive_depth_first ","child respond_to? "," each_child "]}," String each_chunk":{"type":"method","name":"each_chunk","children":[],"call":[" [] ","i * ","(send\n  (send nil :length) :/\n  (send\n    (lvar :size) :to_f)) ceil times ","(send\n  (send nil :length) :/\n  (send\n    (lvar :size) :to_f)) ceil "," length / ","size to_f "," length "]}," String indexes":{"type":"method","name":"indexes","children":[],"call":["$~ begin "," to_enum map "," to_enum ","Regexp  quote "]}," Ole Storage meta_data":{"type":"method","name":"meta_data","children":[],"call":["MetaData  new "]}," Ole Storage MetaData method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","Types PropertySet PROPERTY_MAP  [] ","name to_s ","args empty? "]}," Ole Storage MetaData to_h":{"type":"method","name":"to_h","children":[],"call":["hash update ","name to_sym "," inject "]}," Ole Storage MetaData each":{"type":"method","name":"each","children":[],"call":["Types PropertySet  new each ","Types PropertySet  new ","dirent open ","@ole root [] ","@ole root ","FILE_MAP  values each ","FILE_MAP  values ","@ole root []  open "]}," Ole Storage MetaData []=":{"type":"method","name":"[]=","children":[],"call":[" raise "]}," Ole Storage MetaData []":{"type":"method","name":"[]","children":[],"call":["Types PropertySet  new [] ","Types PropertySet  new ","dirent open ","@ole root [] ","@ole root ","FILE_MAP  [] ","pair first ","Types PropertySet PROPERTY_MAP  [] ","key to_s ","@ole root []  open ","Types PropertySet PROPERTY_MAP  []  first "]}," Ole Storage MetaData mime_type":{"type":"method","name":"mime_type","children":[],"call":["MIME_TYPES  [] ","has_file [] ","Hash  [] ","(send\n  (send\n    (send\n      (ivar :@ole) :root) :children) :map) flatten ","d name downcase ","d name ","@ole root children map ","@ole root children ","@ole root ","CLSID_MAP  [] ","Types Clsid  load ","@ole root clsid ","FORMAT_MAP  [] "," file_format ","Hash  []  [] "]}," Ole Storage MetaData file_format":{"type":"method","name":"file_format","children":[],"call":[" comp_obj [] "," comp_obj "]}," Ole Storage MetaData comp_obj":{"type":"method","name":"comp_obj","children":[],"call":["strings [] ","strings << ","data [] ","len - ","data [] unpack first ","data [] unpack ","i < ","data length ","data unpack ","dirent read ","@ole root [] ","@ole root ","dirent read  [] ","data [] unpack first  - ","dirent read  [] unpack first ","dirent read  [] unpack ","data data [] unpack first gth ","dirent read  length ","dirent read  unpack ","@ole root []  read "]}," Ole Storage MetaData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage DirClass Dir rewind":{"type":"method","name":"rewind","children":[],"call":[" seek "," raise "]}," Ole Storage DirClass Dir pos=":{"type":"method","name":"pos=","children":[],"call":["(send\n  (array\n    (int 0)\n    (lvar :pos)) :max) min ","@entries length ","(int 0) max "," raise "," entries length "," entries "]}," Ole Storage DirClass Dir read":{"type":"method","name":"read","children":[],"call":[" pos < ","@entries length "," pos ","@entries [] "," raise "," entries length "," entries "," entries [] "]}," Ole Storage DirClass Dir close":{"type":"method","name":"close","children":[],"call":[]}," Ole Storage DirClass Dir each":{"type":"method","name":"each","children":[],"call":["@entries each "," raise "," entries each "," entries "]}," Ole Storage DirClass Dir pos":{"type":"method","name":"pos","children":[],"call":[" raise "]}," Ole Storage DirClass Dir initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage DirClass rmdir":{"type":"method","name":"rmdir","children":[],"call":["dirent parent delete ","dirent parent "," raise ","dirent children empty? ","dirent children "," dirent_from_path ","parent children delete ","parent children ","File  split ","@ole file expand_path ","@ole file "," dirent_from_path  parent delete ","dirent  dirent_from_path  delete "," dirent_from_path  parent ","dirent  dirent_from_path  "," dirent_from_path  children empty? "," dirent_from_path  children ","  dirent_from_path _from_path "," dirent_from_path  children delete "]}," Ole Storage DirClass mkdir":{"type":"method","name":"mkdir","children":[],"call":["parent << ","Dirent  new "," raise ","parent / "," dirent_from_path ","File  split ","@ole file expand_path ","@ole file ","child name= ","parent new_child ","parent children << ","parent children "," dirent_from_path  << "," dirent_from_path  / "," dirent_from_path  new_child "," dirent_from_path  children << "," dirent_from_path  children "]}," Ole Storage DirClass foreach":{"type":"method","name":"foreach","children":[],"call":[" entries each "," entries "]}," Ole Storage DirClass entries":{"type":"method","name":"entries","children":[],"call":["seen []= ","Log  warn ","n inspect ","seen [] ","n [] ","entries each ","(str \".\") + ","dirent children map ","dirent children "," dirent_from_path ","(str \".\") +  each "," dirent_from_path  children map "," dirent_from_path  children ","  dirent_from_path _from_path "]}," Ole Storage DirClass chdir":{"type":"method","name":"chdir","children":[],"call":[" block_given? "," dirent_from_path ","@ole file expand_path squeeze sub ","@ole file expand_path squeeze ","@ole file expand_path ","@ole file ","@ole file expand_path gsub sub ","@ole file expand_path gsub "," dirent_from_@ole file expand_path squeeze sub  "," dirent_from_@ole file expand_path gsub sub  ","@ole file expand_@ole file expand_path squeeze sub  squeeze sub ","@ole file expand_@ole file expand_path gsub sub  squeeze sub ","@ole file expand_@ole file expand_path squeeze sub  squeeze ","@ole file expand_@ole file expand_path gsub sub  squeeze ","@ole file expand_@ole file expand_path squeeze sub  ","@ole file expand_@ole file expand_path gsub sub  ","@ole file expand_@ole file expand_path squeeze sub  gsub sub ","@ole file expand_@ole file expand_path gsub sub  gsub sub ","@ole file expand_@ole file expand_path squeeze sub  gsub ","@ole file expand_@ole file expand_path gsub sub  gsub "]}," Ole Storage DirClass pwd":{"type":"method","name":"pwd","children":[],"call":["@pwd empty? "]}," Ole Storage DirClass new":{"type":"method","name":"new","children":[],"call":[" open "]}," Ole Storage DirClass open":{"type":"method","name":"open","children":[],"call":[" block_given? ","Dir  new "," entries "]}," Ole Storage DirClass dirent_from_path":{"type":"method","name":"dirent_from_path","children":[],"call":[" raise ","dirent dir? ","@ole dirent_from_path ","@ole dirent_from_path  dir? ","@ole @ole dirent_from_path _from_path "]}," Ole Storage DirClass initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage FileClass unlink":{"type":"method","name":"unlink","children":[],"call":["paths length ","dirent parent delete ","dirent parent "," dirent_from_path ","paths each ","parent children delete ","parent children ","@ole dir send ","@ole dir ","File  split "," expand_path ","f truncate "," open ","@ole dirent_from_path "," dirent_from_path  parent delete ","@ole dirent_from_path  parent delete ","dirent @ole dir send  delete "," dirent_from_path  parent ","@ole dirent_from_path  parent ","dirent @ole dir send  ","  dirent_from_path _from_path "," @ole dirent_from_path _from_path ","@ole dir send  children delete ","@ole dir send  children ","@ole  dirent_from_path _from_path ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileClass rename":{"type":"method","name":"rename","children":[],"call":["to_parent << ","dirent name= ","from_parent delete ","@ole dir send ","@ole dir ","dirent parent ","File  split "," expand_path ","1 + "," unlink "," raise ","@ole dirent_from_path ","to_parent children << ","to_parent children ","from_parent children delete ","from_parent children ","@ole dir send  << ","@ole dirent_from_path  name= ","dirent parent  delete ","@ole dir send  delete ","@ole dirent_from_path  parent ","@ole @ole dirent_from_path _from_path ","@ole dir send  children << ","@ole dir send  children ","dirent parent  children delete ","@ole dir send  children delete ","dirent parent  children "]}," Ole Storage FileClass read":{"type":"method","name":"read","children":[],"call":[" open "]}," Ole Storage FileClass stat":{"type":"method","name":"stat","children":[],"call":["Stat  new "," raise ","@ole dirent_from_path ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileClass size?":{"type":"method","name":"size?","children":[],"call":[" dirent_from_path size "," dirent_from_path "]}," Ole Storage FileClass size":{"type":"method","name":"size","children":[],"call":[" dirent_from_path size "," dirent_from_path "]}," Ole Storage FileClass new":{"type":"method","name":"new","children":[],"call":[" open "]}," Ole Storage FileClass open":{"type":"method","name":"open","children":[],"call":["dirent open "," dirent_from_path ","parent << ","Dirent  new ","@ole dir send ","@ole dir ","File  split "," expand_path ","IO Mode  new create? ","IO Mode  new ","IOMode  new create? ","IOMode  new ","dirent name= ","parent new_child ","mode == ","parent children << ","parent children "," dirent_from_path  open ","Dirent  new  open ","parent new_child  open ","  dirent_from_path _from_path "," Dirent  new _from_path "," parent new_child _from_path ","@ole dir send  << "," dirent_from_path  name= ","Dirent  new  name= ","parent new_child  name= ","@ole dir send  new_child ","@ole dir send  children << ","@ole dir send  children "]}," Ole Storage FileClass directory?":{"type":"method","name":"directory?","children":[],"call":["dirent dir? ","@ole dirent_from_path ","@ole dirent_from_path  dir? ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileClass file?":{"type":"method","name":"file?","children":[],"call":["dirent file? ","@ole dirent_from_path ","@ole dirent_from_path  file? ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileClass exists?":{"type":"method","name":"exists?","children":[],"call":["@ole dirent_from_path ! ! ","@ole dirent_from_path ! ","@ole dirent_from_path "]}," Ole Storage FileClass dirent_from_path":{"type":"method","name":"dirent_from_path","children":[],"call":[" raise ","dirent dir? ","@ole dirent_from_path ","@ole dirent_from_path  dir? ","@ole @ole dirent_from_path _from_path "]}," Ole Storage FileClass expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path [] ","File  expand_path ","File ALT_SEPARATOR  != ","@ole dir instance_variable_get ","@ole dir ","path =~ ","RUBY_PLATFORM  =~ ","File ALT_SEPARATOR  == "]}," Ole Storage FileClass initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage FileClass Stat inspect":{"type":"method","name":"inspect","children":[],"call":["pairs * "," class "," instance_variable_get ","n [] ","(send\n  (send nil :instance_variables) :-\n  (array\n    (str \"@dirent\"))) map "," instance_variables - "," instance_variables "]}," Ole Storage FileClass Stat size?":{"type":"method","name":"size?","children":[],"call":[" size "," file? "]}," Ole Storage FileClass Stat directory?":{"type":"method","name":"directory?","children":[],"call":["@dirent dir? "]}," Ole Storage FileClass Stat file?":{"type":"method","name":"file?","children":[],"call":["@dirent file? "]}," Ole Storage FileClass Stat initialize":{"type":"method","name":"initialize","children":[],"call":["bat block_size ","bat chain length ","bat chain ","dirent first_block ","dirent ole bat_for_size ","dirent size ","dirent ole "," file? ","dirent ole bat_for_size  block_size ","dirent ole bat_for_size  chain length ","dirent ole bat_for_size  chain ","dirent ole dirent ole bat_for_size _for_size "]}," RangesIONonResizeable initialize":{"type":"method","name":"initialize","children":[],"call":["IO Mode  new flags & ","IO TRUNC  ~ ","IO Mode  new flags ","IO Mode  new ","Hash  === ","Ole IOMode  new flags & ","Ole IOMode  new flags ","Ole IOMode  new ","IO Mode  new IO Mode  new flags &  & ","IO Mode  new Ole IOMode  new flags &  & ","IO Mode  new IO Mode  new flags &  ","IO Mode  new Ole IOMode  new flags &  ","Ole IOMode  new IO Mode  new flags &  & ","Ole IOMode  new Ole IOMode  new flags &  & ","Ole IOMode  new IO Mode  new flags &  ","Ole IOMode  new Ole IOMode  new flags &  "]}," RangesIO gets":{"type":"method","name":"gets","children":[],"call":["s [] ","s length - ","i + ","s length "," pos ","s index "," read "," read  [] "," read  length - ","s index  + "," read  length "," po read  ","s s index ndex "," read  index "]}," RangesIO size=":{"type":"method","name":"size=","children":[],"call":[" truncate "]}," RangesIO rewind":{"type":"method","name":"rewind","children":[],"call":[" seek "]}," RangesIO ranges=":{"type":"method","name":"ranges=","children":[],"call":[" pos= ","@offsets << ","@ranges each ","pos + ","@ranges << ","@ranges last [] ","@ranges last ","next_pos == ","ranges each ","@params [] == ","@params [] ","r end - ","r begin ","r end ","Range  === ","ranges map ","pos +  == "]}," RangesIO open":{"type":"method","name":"open","children":[],"call":[]}," Ole Storage Dirent copy":{"type":"method","name":"copy","children":[],"call":[]}," Ole Storage Dirent delete":{"type":"method","name":"delete","children":[],"call":["io truncate ","child open ","child file? ","child parent= ","@name_lookup delete ","child name "," raise "," inspect ","child inspect ","@children delete "]}," Ole Storage Dirent <<":{"type":"method","name":"<<","children":[],"call":["@children << ","@name_lookup []= ","child name ","child parent= "]}," Ole Storage Dirent inspect":{"type":"method","name":"inspect","children":[],"call":["str + ","str << ","(str \" size=\") + + ","data inspect ","(str \" size=\") + "," modify_time= + "," modify_time to_s inspect "," modify_time to_s "," modify_time "," size ","tmp [] + ","tmp [] ","tmp length == ","tmp length "," read "," file? "," name inspect "," name ","tmp [] +  inspect "," read  [] + "," read  [] "," read  length == "," read  length "]}," Ole Storage Dirent to_s":{"type":"method","name":"to_s","children":[],"call":[" to_a pack "," to_a "," modify_time_str= ","0 chr * ","0 chr "," create_time_str= ","Types Variant  dump ","@ole params [] ","@ole params "," file? "," first_block= "," type == "," type "," type_id= ","(send\n  (send\n    (const nil :TYPE_MAP) :to_a) :find) first ","@type == ","TYPE_MAP  to_a find ","TYPE_MAP  to_a "," name_utf16= ","tmp + ","64 - ","tmp length "," name_len= ","tmp [] ","tmp length > "," name ","tmp []  + ","Types Variant  dump  + ","tmp []  length ","Types Variant  dump  length ","tmp []  [] ","Types Variant  dump  [] ","tmp []  length > ","Types Variant  dump  length > "]}," Ole Storage Dirent flatten_helper":{"type":"method","name":"flatten_helper","children":[],"call":[]}," Ole Storage Dirent flatten":{"type":"method","name":"flatten","children":[],"call":[" child= ","Dirent  flatten_helper "," children ","child flatten "," children each "," prev= "," next= "," file? ","dirents << ","dirents length "]}," Ole Storage Dirent each_child":{"type":"method","name":"each_child","children":[],"call":["@children each "," dir? "]}," Ole Storage Dirent time":{"type":"method","name":"time","children":[],"call":[" modify_time "," create_time "]}," Ole Storage Dirent []":{"type":"method","name":"[]","children":[],"call":[" / ","String  === "]}," Ole Storage Dirent /":{"type":"method","name":"/","children":[],"call":["@name_lookup [] "]}," Ole Storage Dirent dir?":{"type":"method","name":"dir?","children":[],"call":[" file? ! "," file? "]}," Ole Storage Dirent file?":{"type":"method","name":"file?","children":[],"call":[" type == "," type "]}," Ole Storage Dirent read":{"type":"method","name":"read","children":[],"call":["io read "," open "]}," Ole Storage Dirent open":{"type":"method","name":"open","children":[],"call":["io close "," block_given? ","Types FileTime  now ","io mode writeable? ","io mode ","RangesIOMigrateable  new "," raise "," file? ","RangesIOMigrateable  new  close ","RangesIOMigrateable  new  mode writeable? ","RangesIOMigrateable  new  mode "]}," Ole Storage Dirent children=":{"type":"method","name":"children=","children":[],"call":[" << ","children each "]}," Ole Storage Dirent name=":{"type":"method","name":"name=","children":[],"call":["map []= ","map delete ","@parent instance_variable_get ","@parent instance_variable_get  []= ","@parent instance_variable_get  delete "]}," Ole Storage Dirent initialize":{"type":"method","name":"initialize","children":[],"call":[" size= ","@type == ","Types Variant  load "," create_time_str "," modify_time_str ","Types FileTime  now ","@ole params [] ","@ole params "," file? "," raise "," type_id inspect "," type_id ","TYPE_MAP  [] ","params [] ","params [] inspect ","TYPE_MAP  values include? ","TYPE_MAP  values "," name_utf16 [] "," name_len "," name_utf16 ","values unpack ","String  === ","Hash  === ","TYPE_MAP  values unpack  include? ","TYPE_MAP  values unpack  ","values unpack  unpack "]}," Ole Storage RangesIOMigrateable first_block=":{"type":"method","name":"first_block=","children":[],"call":["@dirent first_block= "]}," Ole Storage RangesIOMigrateable first_block":{"type":"method","name":"first_block","children":[],"call":["@dirent first_block "]}," Ole Storage RangesIOMigrateable truncate":{"type":"method","name":"truncate","children":[],"call":["@dirent size= "," pos= "," write ","bat io "," read ","(ivar :@size) min ","(ivar :@pos) min ","bat class != ","@bat class ","bat class ","@dirent ole bat_for_size ","@dirent ole "," (ivar :@pos) min = ","@dirent ole bat_for_size  io ","(ivar :@(ivar :@pos) min ) min ","@dirent ole bat_for_size  class != ","@@dirent ole bat_for_size  class ","@dirent ole bat_for_size  class ","@dirent ole @dirent ole bat_for_size _for_size "]}," Ole Storage RangesIOMigrateable initialize":{"type":"method","name":"initialize","children":[],"call":["@dirent size ","@dirent first_block ","@dirent ole bat_for_size ","@dirent ole "]}," Ole Storage RangesIOResizeable truncate":{"type":"method","name":"truncate","children":[],"call":["@io truncate ","max > ","@io size ","(send\n  (ivar :@ranges) :map) max ","pos + ","@ranges map "," first_block= ","@blocks first ","@blocks empty? "," ranges= ","@bat ranges ","@pos > ","@bat resize_chain "]}," Ole Storage RangesIOResizeable initialize":{"type":"method","name":"initialize","children":[],"call":["@bat ranges ","@bat io ","@bat chain "," first_block= "," raise ","params values_at ","Hash  === "]}," Ole Storage AllocationTable Small initialize":{"type":"method","name":"initialize","children":[],"call":["@ole sb_file ","1 << ","@ole header s_shift ","@ole header "]}," Ole Storage AllocationTable Big blocks_to_ranges":{"type":"method","name":"blocks_to_ranges","children":[],"call":["ranges length * - ","ranges length * "," block_size ","ranges length ","ranges last [] ","ranges last "," block_size * ","i + ","chain map ","chain [] ","(send\n  (send\n    (lvar :size) :to_f) :/\n  (send nil :block_size)) ceil ","size to_f / ","size to_f ","chain []  map ","chain []  [] "]}," Ole Storage AllocationTable Big initialize":{"type":"method","name":"initialize","children":[],"call":["@ole io ","1 << ","@ole header b_shift ","@ole header "]}," Ole Storage AllocationTable resize_chain":{"type":"method","name":"resize_chain","children":[],"call":[" []= ","blocks << "," free_block ","(send\n  (lvar :new_num_blocks) :-\n  (lvar :old_num_blocks)) times ","new_num_blocks - ","blocks last ","new_num_blocks > ","blocks slice! ","blocks [] ","(erange\n  (lvar :new_num_blocks)\n  (lvar :old_num_blocks)) each ","new_num_blocks < ","blocks length ","(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil ","size / "," block_size to_f "," block_size "," free_block s << "," free_ free_block  ","(send\n  (lvar :new_num_ free_block s) :-\n  (lvar :old_num_ free_block s)) times ","(send\n  (lvar :new_num_blocks) :-\n  (lvar :blocks length )) times ","(send\n  (lvar :(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil ) :-\n  (lvar :old_num_blocks)) times ","new_num_ free_block s - ","(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil  - "," free_block s last ","new_num_ free_block s > ","(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil  > "," free_block s slice! "," free_block s [] ","(erange\n  (lvar :new_num_ free_block s)\n  (lvar :old_num_ free_block s)) each ","(erange\n  (lvar :new_num_blocks)\n  (lvar :blocks length )) each ","(erange\n  (lvar :(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil )\n  (lvar :old_num_blocks)) each ","new_num_ free_block s < ","(send\n  (lvar :size) :/\n  (send\n    (send nil :block_size) :to_f)) ceil  < "," free_block s length ","(send\n  (lvar :size) :/\n  (send\n    (send nil : free_block _size) :to_f)) ceil ","  free_block _size to_f ","  free_block _size "]}," Ole Storage AllocationTable free_block":{"type":"method","name":"free_block","children":[],"call":[" length - "," length "," push "," index ","  index ndex "]}," Ole Storage AllocationTable []=":{"type":"method","name":"[]=","children":[],"call":["val == "]}," Ole Storage AllocationTable read":{"type":"method","name":"read","children":[],"call":[" open "]}," Ole Storage AllocationTable open":{"type":"method","name":"open","children":[],"call":["RangesIO  open "," ranges "]}," Ole Storage AllocationTable ranges":{"type":"method","name":"ranges","children":[],"call":[" blocks_to_ranges "," chain ","Array  === ","  chain  "]}," Ole Storage AllocationTable blocks_to_ranges":{"type":"method","name":"blocks_to_ranges","children":[],"call":["ranges length * - ","ranges length * "," block_size ","ranges length ","ranges last [] ","ranges last "," block_size * ","chain map ","chain [] ","(send\n  (send\n    (lvar :size) :to_f) :/\n  (send nil :block_size)) ceil ","size to_f / ","size to_f ","chain []  map ","chain []  [] "]}," Ole Storage AllocationTable chain":{"type":"method","name":"chain","children":[],"call":["Log  warn ","idx == "," [] ","a << "," raise ","idx > "," length ","idx < ","idx >= "," []  == "," []  > "," []  < "," []  >= "]}," Ole Storage AllocationTable to_s":{"type":"method","name":"to_s","children":[],"call":["table pack ","(const nil :AVAIL) * ","num - ","table length % ","table length ","(send\n  (send\n    (lvar :table) :length) :%\n  (lvar :num)) != ","@ole bbat block_size / ","@ole bbat block_size ","@ole bbat "," truncate "," truncate  pack ","@ole bbat block_size /  - "," truncate  length % "," truncate  length ","(send\n  (send\n    (lvar :table) :length) :%\n  (lvar :@ole bbat block_size / )) != ","(send\n  (send\n    (lvar : truncate ) :length) :%\n  (lvar :num)) != "]}," Ole Storage AllocationTable truncate!":{"type":"method","name":"truncate!","children":[],"call":[" replace "," truncate "]}," Ole Storage AllocationTable truncate":{"type":"method","name":"truncate","children":[],"call":["temp reverse ","temp [] ","temp index ","b != ","temp find "," reverse ","temp []  reverse "," reverse  reverse ","temp []  [] "," reverse  [] ","temp []  index "," reverse  index ","temp []  find "," reverse  find "]}," Ole Storage AllocationTable load":{"type":"method","name":"load","children":[],"call":[" replace ","data unpack "]}," Ole Storage AllocationTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage Header validate!":{"type":"method","name":"validate!","children":[],"call":["Log  warn "," reserved != ","\u0000 * "," reserved "," mbat_start != "," mbat_start "," num_mbat == "," num_mbat "," threshold != "," threshold "," raise "," byte_order != "," byte_order "," b_shift >= "," b_shift "," b_shift <= "," s_shift > "," s_shift "," num_mbat != "," num_bat < "," num_bat "," num_bat > ","109 + "," num_mbat * ","1 << "," b_shift - "," num_bat == "," magic == "," magic ","(const\n  (const nil :AllocationTable) :EOC) include? ! ","(const\n  (const nil :AllocationTable) :EOC) include? "]}," Ole Storage Header to_s":{"type":"method","name":"to_s","children":[],"call":[" to_a pack "," to_a "]}," Ole Storage Header initialize":{"type":"method","name":"initialize","children":[],"call":[" validate! ","values unpack ","String  === ","values unpack  unpack "]}," Ole Storage inspect":{"type":"method","name":"inspect","children":[],"call":["@root inspect ","@io inspect "," class "]}," Ole Storage bat_for_size":{"type":"method","name":"bat_for_size","children":[],"call":["size >= ","@header threshold "]}," Ole Storage repack_using_io":{"type":"method","name":"repack_using_io","children":[],"call":["Dirent  copy "," root ","temp_ole root ","Storage  open "," clear ","IO  copy ","@io rewind "]}," Ole Storage repack":{"type":"method","name":"repack","children":[],"call":[" raise ","temp inspect ","StringIO  open "," method "," repack_using_io ","io binmode ","Tempfile  open "," dup "]}," Ole Storage clear":{"type":"method","name":"clear","children":[],"call":["@io truncate ","AllocationTable Small  new ","RangesIOResizeable  new ","@sb_file close ","@root idx= ","Dirent  new ","AllocationTable Big  new ","Header  new ","Log  warn ","RangesIOResizeable  new  close ","Dirent  new  idx= "]}," Ole Storage flush":{"type":"method","name":"flush","children":[],"call":["@io flush ","@io write ","@header to_s + ","bbat_chain [] pack ","bbat_chain [] ","@header to_s ","@io seek ","f write ","mbat_data flatten pack ","mbat_data flatten ","RangesIO  open ","@bbat ranges ","mbat_data last push ","(const\n  (const nil :AllocationTable) :AVAIL) * ","@bbat block_size / - ","mbat_data last length ","mbat_data last ","@bbat block_size / ","@bbat block_size ","a + ","mbat_data to_enum to_a zip map ","mbat_data to_enum to_a zip ","mbat_blocks [] + ","mbat_blocks [] ","mbat_data to_enum to_a ","mbat_data to_enum ","num_mbat_blocks != ","@header num_mbat= ","(send\n  (int 109) :-\n  (send\n    (lvar :bbat_chain) :length)) max ","109 - ","bbat_chain length ","@bbat to_s ","@header mbat_start= ","mbat_blocks first ","@bbat []= ","@bbat free_block ","(erange\n  (int 0)\n  (lvar :num_mbat_blocks)) map ","@header num_bat= ","bbat_chain each ","io close ","@bbat chain ","io first_block ","io ranges ","io truncate ","io size != ","io size ","new_num_mbat_blocks != ","(send\n  (send\n    (send\n      (array\n        (send\n          (send\n            (lvar :bbat_data_len) :/\n            (send\n              (ivar :@bbat) :block_size)) :-\n          (int 109))\n        (int 0)) :max) :*\n    (int 4)) :/\n  (begin\n    (send\n      (send\n        (send\n          (ivar :@bbat) :block_size) :to_f) :-\n      (int 4)))) ceil ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max * / ","@bbat block_size to_f - ","@bbat block_size to_f ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max * ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max ","bbat_data_len / - ","bbat_data_len / ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil ","(send\n  (send\n    (ivar :@bbat) :length) :+\n  (lvar :num_mbat_blocks)) * / ","(send\n  (send\n    (ivar :@bbat) :length) :+\n  (lvar :num_mbat_blocks)) * ","@bbat length + ","@bbat length ","@io truncate ","@bbat block_size * ","@io size ","@bbat truncate! ","RangesIOResizeable  new ","b == ","@bbat map! ","@header num_sbat= ","@bbat chain length ","@header sbat_start ","@header sbat_start= ","io write ","@sbat to_s ","RangesIOResizeable  open ","@header dirent_start= ","0 chr * ","0 chr ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * - ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil ","io size / ","(send\n  (ivar :@dirents) :map) join ","dirent to_s ","@dirents map ","@header dirent_start ","@root flatten ","@root size= ","@sb_file size ","@root first_block= ","@sb_file first_block ","@root name= ","@RangesIOResizeable  new  flush ","@RangesIOResizeable  new  write ","@bbat chain  [] pack ","@bbat chain  [] ","@RangesIOResizeable  new  seek ","bbat_chain []  flatten pack ","bbat_chain []  flatten ","@bbat io ranges  ","bbat_chain []  last push ","(const\n  (const nil :AllocatRangesIOResizeable  new nTable) :AVAIL) * ","@bbat @bbat free_block _size / - ","bbat_chain []  last length ","bbat_chain []  last ","@bbat @bbat free_block _size / ","@bbat @bbat free_block _size ","bbat_chain []  to_enum to_a zip map ","bbat_chain []  to_enum to_a zip ","mbat_@bbat free_block s [] + ","mbat_@bbat free_block s [] ","bbat_chain []  to_enum to_a ","bbat_chain []  to_enum ","num_mbat_@bbat free_block s != ","(send\n  (int 109) :-\n  (send\n    (lvar :@bbat chain ) :length)) max ","@bbat chain  length ","mbat_@bbat free_block s first ","@bbat free_@bbat free_block  ","(erange\n  (int 0)\n  (lvar :num_mbat_@bbat free_block s)) map ","@bbat chain  each ","RangesIOResizeable  new  close ","io first_@bbat free_block  ","RangesIOResizeable  new  first_block ","io io ranges  ","RangesIOResizeable  new  ranges ","RangesIOResizeable  new  truncate ","RangesIOResizeable  new  size != ","RangesIOResizeable  new  size ","new_num_mbat_@bbat free_block s != ","(send\n  (send\n    (send\n      (array\n        (send\n          (send\n            (lvar :bbat_data_len) :/\n            (send\n              (ivar :@bbat) :block_size)) :-\n          (int 109))\n        (int 0)) :max) :*\n    (int 4)) :/\n  (begin\n    (send\n      (send\n        (send\n          (ivar :@bbat) :block_size) :to_f) :-\n      (int 4)))) ceil  != ","(send\n  (send\n    (send\n      (array\n        (send\n          (send\n            (lvar :bbat_data_len) :/\n            (send\n              (ivar :@bbat) :@bbat free_block _size)) :-\n          (int 109))\n        (int 0)) :max) :*\n    (int 4)) :/\n  (begin\n    (send\n      (send\n        (send\n          (ivar :@bbat) :@bbat free_block _size) :to_f) :-\n      (int 4)))) ceil ","(send\n  (send\n    (send\n      (array\n        (send\n          (send\n            (lvar :(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ) :/\n            (send\n              (ivar :@bbat) :block_size)) :-\n          (int 109))\n        (int 0)) :max) :*\n    (int 4)) :/\n  (begin\n    (send\n      (send\n        (send\n          (ivar :@bbat) :block_size) :to_f) :-\n      (int 4)))) ceil ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :@bbat free_block _size)) :-\n  (int 109)) max * / ","(send\n  (send\n    (lvar :(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max * / ","@bbat @bbat free_block _size to_f - ","@bbat @bbat free_block _size to_f ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :@bbat free_block _size)) :-\n  (int 109)) max * ","(send\n  (send\n    (lvar :(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max * ","(send\n  (send\n    (lvar :bbat_data_len) :/\n    (send\n      (ivar :@bbat) :@bbat free_block _size)) :-\n  (int 109)) max ","(send\n  (send\n    (lvar :(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ) :/\n    (send\n      (ivar :@bbat) :block_size)) :-\n  (int 109)) max ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil *  / - ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_blocks))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil *  / ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_@bbat free_block s))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :@bbat free_block _size) :to_f)) ceil * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@bbat) :length) :+\n        (lvar :num_mbat_@bbat free_block s))) :*\n    (int 4)) :/\n  (send\n    (send\n      (ivar :@bbat) :@bbat free_block _size) :to_f)) ceil ","(send\n  (send\n    (ivar :@bbat) :length) :+\n  (lvar :num_mbat_@bbat free_block s)) * / ","(send\n  (send\n    (ivar :@bbat) :length) :+\n  (lvar :num_mbat_@bbat free_block s)) * ","@RangesIOResizeable  new  truncate ","@bbat @bbat free_block _size * ","@RangesIOResizeable  new  size ","RangesIOResizeable  new  write ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :@bbat free_block _size) :to_f)) ceil * - ","(send\n  (send\n    (lvar :RangesIOResizeable  new ) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * - ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :@bbat free_block _size) :to_f)) ceil * ","(send\n  (send\n    (lvar :RangesIOResizeable  new ) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil * ","(send\n  (send\n    (lvar :io) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :@bbat free_block _size) :to_f)) ceil ","(send\n  (send\n    (lvar :RangesIOResizeable  new ) :size) :/\n  (send\n    (send\n      (ivar :@bbat) :block_size) :to_f)) ceil ","RangesIOResizeable  new  size / ","(send\n  (ivar :@root flatten ) :map) join ","@root flatten  map ","@root first_@bbat free_block = ","@sb_file first_@bbat free_block  "]}," Ole Storage close":{"type":"method","name":"close","children":[],"call":["@io close "," flush ","@sb_file close "]}," Ole Storage load":{"type":"method","name":"load","children":[{"type":"method","name":"to_tree","children":[],"asgn":[{"type":"local","name":"d","value":" [] "},[" [] "]],"call":[" to_tree + + "," to_tree ","d next "," to_tree + "," to_tree ","d prev ","d idx= "," raise ","d inspect ","d idx ","d children= "," to_tree ","d child "," [] ","idx == "]}],"call":["@sbat load ","@bbat read ","@header sbat_start ","AllocationTable Small  new ","RangesIOResizeable  new ","@root size ","@root first_block ","Log  warn ","unused > ","@dirents reject length ","@dirents reject ","@dirents to_tree first ","@dirents to_tree "," to_tree + + "," to_tree ","d next "," to_tree + ","d prev ","d idx= "," raise ","d inspect ","d idx ","d children= ","d child "," [] ","idx == ","d type_id == ","d type_id ","(send\n  (send\n    (send\n      (ivar :@bbat) :read\n      (send\n        (ivar :@header) :dirent_start)) :to_enum\n    (sym :each_chunk)\n    (const\n      (const nil :Dirent) :SIZE)) :map) reject ","Dirent  new ","@bbat read to_enum map ","@bbat read to_enum ","@header dirent_start ","@bbat load ","bbat_chain [] ","@header num_bat ","blocks pop ","@bbat read unpack ","@header num_mbat times ","@header num_mbat ","@header mbat_start ","header_block [] unpack ","header_block [] ","AllocationTable Big  new ","Header  new ","@io read ","@io rewind ","@dirents reject! ","d << "," to_tree each ","AllocationTable Small  new  load ","@sbat loa []  ","@bbat rea []  ","AllocationTable Big  new  read ","@hea [] er sbat_start ","Header  new  sbat_start ","@dirents to_tree first  size ","@dirents to_tree first  first_block ","@dirents reject length  > ","unuse []  > ","@ [] irents reject length ","@ [] irents reject ","@ [] irents to_tree first ","@ [] irents to_tree "," []  next "," []  prev "," []  i [] x= "," []  inspect "," []  i [] x "," []  chil [] ren= "," []  chil []  ","i [] x == "," []  type_i []  == "," []  type_i []  ","(sen [] \n  (sen [] \n    (sen [] \n      (ivar :@bbat) :rea [] \n      (sen [] \n        (ivar :@hea [] er) : [] irent_start)) :to_enum\n    (sym :each_chunk)\n    (const\n      (const nil :Dirent) :SIZE)) :map) reject ","(send\n  (send\n    (send\n      (ivar :AllocationTable Big  new ) :read\n      (send\n        (ivar :@header) :dirent_start)) :to_enum\n    (sym :each_chunk)\n    (const\n      (const nil :Dirent) :SIZE)) :map) reject ","(send\n  (send\n    (send\n      (ivar :@bbat) :read\n      (send\n        (ivar :Header  new ) :dirent_start)) :to_enum\n    (sym :each_chunk)\n    (const\n      (const nil :Dirent) :SIZE)) :map) reject ","@bbat rea []  to_enum map ","AllocationTable Big  new  read to_enum map ","@bbat rea []  to_enum ","AllocationTable Big  new  read to_enum ","@hea [] er  [] irent_start ","Header  new  dirent_start ","@bbat loa []  ","AllocationTable Big  new  load ","header_block [] unpack  [] ","@hea [] er num_bat ","Header  new  num_bat ","@bbat read unpack  pop ","@bbat rea []  unpack ","AllocationTable Big  new  read unpack ","@hea [] er num_mbat times ","Header  new  num_mbat times ","@hea [] er num_mbat ","Header  new  num_mbat ","@hea [] er mbat_start ","Header  new  mbat_start ","hea [] er_block [] unpack ","@io read  [] unpack ","hea [] er_block [] ","@io read  [] ","Hea [] er  new ","@io rea []  ","@io rewin []  ","@ [] irents reject! "," []  << "]}," Ole Storage open":{"type":"method","name":"open","children":[],"call":[]}," Ole Storage initialize":{"type":"method","name":"initialize","children":[],"call":[" clear "," load ","@io size > ","@io size ","@io syswrite ","@io respond_to? ","RUBY_PLATFORM  != ","@io flush ","IO Mode  new writeable? ","IO Mode  new "," raise "," open ","String  === ","(pair\n  (sym :update_timestamps)\n  (true)) merge ","Hash  === ","@io write_nonblock ","IOMode  new writeable? ","IOMode  new ","@io set_encoding "]}," Ole Types Iconv iconv":{"type":"method","name":"iconv","children":[],"call":["str encode "]}," Ole Types Iconv initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole IOMode inspect":{"type":"method","name":"inspect","children":[],"call":["names compact * ","names compact "," class ","names unshift ","(send\n  (send nil :flags) :&\n  (int 3)) == "," flags & "," flags ","(send\n  (send nil :flags) :&\n  (send\n    (const nil :IOMode) :const_get\n    (send\n      (lvar :name) :upcase))) != ","IOMode  const_get ","name upcase ","NAMES  map "]}," Ole IOMode binary?":{"type":"method","name":"binary?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :BINARY)) != ","@flags & "]}," Ole IOMode create?":{"type":"method","name":"create?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :CREAT)) != ","@flags & "]}," Ole IOMode append?":{"type":"method","name":"append?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :APPEND)) != ","@flags & "]}," Ole IOMode truncate?":{"type":"method","name":"truncate?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :TRUNC)) != ","@flags & "]}," Ole IOMode readable?":{"type":"method","name":"readable?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (const nil :WRONLY)) == ","@flags & "]}," Ole IOMode writeable?":{"type":"method","name":"writeable?","children":[],"call":["(send\n  (ivar :@flags) :&\n  (int 3)) != ","@flags & "]}," Ole IOMode initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","flags inspect ","Fixnum  === "," class parse_mode ","flags to_str "," class ","flags respond_to? ","Integer  === "," class parse_mode  inspect "," class parse_mode  to_str "," class parse_mode  respond_to? "]}," Ole IOMode parse_mode":{"type":"method","name":"parse_mode","children":[],"call":[]}," Ole Types save_time":{"type":"method","name":"save_time","children":[],"call":[]}," RecursivelyEnumerable to_tree_helper":{"type":"method","name":"to_tree_helper","children":[],"call":["child to_tree_helper ","prefix + ","child respond_to? ","io << ","child send "," each_child "]}," RangesIO offset_and_size":{"type":"method","name":"offset_and_size","children":[],"call":[" raise ","pos inspect ","size - ","offset + ","pos - ","pos <= ","total + "," ranges each_with_index "," ranges "]}," IOModeString inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," class "]}," IOModeString to_s":{"type":"method","name":"to_s","children":[],"call":[]}," IOModeString binary?":{"type":"method","name":"binary?","children":[],"call":["RUBY_PLATFORM  !~ "]}," IOModeString explicit_binary?":{"type":"method","name":"explicit_binary?","children":[],"call":[]}," IOModeString initialize":{"type":"method","name":"initialize","children":[],"call":["@mode sub ","@mode [] ","@mode sub  sub ","@mode sub  [] "]}," Ole Types PropertySet Section properties":{"type":"method","name":"properties","children":[],"call":[" to_a "," to_enum to_a "," to_enum "]}," Ole Types Guid load":{"type":"method","name":"load","children":[],"call":[]}," Ole Storage summary_information":{"type":"method","name":"summary_information","children":[],"call":["PropertySetSectionProxy  new ","sections index ","section guid == ","section guid ","sections find ","propset sections ","Types PropertySet  new ","dirent open "," root [] "," root ","s guid == ","s guid ","propset sections  index ","propset sections  find ","propset propset sections  ","Types PropertySet  new  sections "," root []  open "]}," Ole Storage PropertySetSectionProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["section send ","Types PropertySet  new sections [] "," section_num ","Types PropertySet  new sections ","Types PropertySet  new "," obj open "," obj ","Types PropertySet  new sections []  send ","Types PropertySet  new Types PropertySet  new sections [] s [] "," Types PropertySet  new sections [] _num ","Types PropertySet  new Types PropertySet  new sections [] s "]}," Ole Storage PropertySetSectionProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ole Storage with_property_set":{"type":"method","name":"with_property_set","children":[],"call":[]}," Ole Types PropertySet Section method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","name to_s ","@map values include? ","@map values ","args empty? "]}}