{" Pry valid_expression?":{"type":"method","name":"valid_expression?","children":[],"call":["e message ","test_bed eval "," binding ","Object  new instance_eval ","Object  new ","RubyParser  new parse ","RubyParser  new ","Ripper SexpBuilder  new parse ! ! ","Ripper SexpBuilder  new parse ! ","Ripper SexpBuilder  new parse ","Ripper SexpBuilder  new ","code dup ","JRuby  parse "]}," Pry prompt":{"type":"method","name":"prompt","children":[],"call":[" prompt_stack last "," prompt_stack "," config prompt "," config "," wait_prompt call "," wait_prompt "," default_prompt call "," default_prompt ","eval_string empty? ","target eval "]}," Pry process_commands":{"type":"method","name":"process_commands","children":[],"call":["eval_string clear "," output err_invalid_nest_level "," nesting level - "," nesting level "," nesting "," output "," throw ","break_level + "," output warn_already_at_level "," output jump_to ","(send\n  (gvar :$~) :captures) first to_i ","(send\n  (gvar :$~) :captures) first ","$~ captures ","tp r display ","tp r ","v input= ","SourceInput  new ","Pry  new tap ","Pry  new ","target eval "," output exit "," output show_status "," output show_nesting "," output show_help "," output refresh "," exit "," output exit_program "," replace "," output show_method "," get_method_source ","$~ captures first "," output ls ","target eval source "," output show_doc ","target eval comment "," output cat ","val clear "," commands instance_exec "," commands ","args values_at ","action arity - ","action arity ","action arity <=> "," commands output= "," commands target= "," commands opts= "," commands commands ","data [] ","args_string split ","(str \"^\") =~ "," commands commands find ","Shellwords  shellwords ","cmd_data [] ","pattern ! "," execute_command ","cmd_data ! "," command_matched "," system_command ","(send\n  (gvar :$~) :captures) first to_i  + ","(send\n  (g$~ captures first  :$~) :captures) first to_i ","(send\n  (g$~ captures first  :$~) :captures) first "," output show_target eval comment  ","args_string split  values_at ","Shellwords  shellwords  values_at ","data []  arity - ","cmd_data []  arity - ","data []  arity ","cmd_data []  arity ","data []  arity <=> ","cmd_data []  arity <=> ","args_string split _string split ","Shellwords  shellwords _string split "]}," Pry r":{"type":"method","name":"r","children":[],"call":[" valid_expression? "," process_commands ","val chomp "," input read "," prompt "," nesting level "," nesting "," input "," loop "," binding_for ","eval_string << ","val chomp! "," readline "," select_prompt ","target eval ","eval_string empty? ","val ! ","Pry  binding_for "," throw "," output puts "," output ","Pry  cmd_ret_value ","Pry  cmd_ret_value= "," process_line "," retrieve_line "," null_input? ","eval_string =~ "," null_input? ! "," exec_hook ","e message sub ","e message ","Pry Code  complete_expression? "," exception_handler call ","e extend "," exception_handler ","Pry  last_internal_error= "," complete_expression? "," hooks exec_hook "," hooks ","  input read id_expression? ","  readline id_expression? ","  retrieve_line id_expression? "," input read  chomp "," readline  chomp "," retrieve_line  chomp ","e input read _string << ","e readline _string << ","e retrieve_line _string << "," input read  chomp! "," readline  chomp! "," retrieve_line  chomp! ","target e input read  ","target e readline  ","target e retrieve_line  "," binding_for  eval ","Pry  binding_for  eval ","e input read _string empty? ","e readline _string empty? ","e retrieve_line _string empty? "," input read  ! "," readline  ! "," retrieve_line  ! ","Pry  cmd_ret_ input read ue ","Pry  cmd_ret_ readline ue ","Pry  cmd_ret_ retrieve_line ue ","Pry  cmd_ret_ input read ue= ","Pry  cmd_ret_ readline ue= ","Pry  cmd_ret_ retrieve_line ue= ","e input read _string =~ ","e readline _string =~ ","e retrieve_line _string =~ "]}," Pry re":{"type":"method","name":"re","children":[],"call":["target eval ","Pry  last_result= "," r "," binding_for "," exit ","Pry  active_instance= ","Readline  completion_proc= ","Pry InputCompleter  build_completion_proc "," commands commands keys "," commands commands "," commands "," input == "," input ","Pry  binding_for "," set_last_exception "," set_last_result "," instance_eval "," custom_completions ","code each_line count ","code each_line ","Pry  current_line ","@input_array << ","@output_array << ","Pry  eval_path ","Pry  line_buffer push ","Pry  line_buffer "," set_active_instance ","expr each_line count ","expr each_line "," exec_hook "," update_input_history "," last_exception= "," inject_sticky_locals "," evaluate_ruby "," inject_special_locals "," output puts ","e message "," output "," input completion_proc= "," input respond_to? ","compl call ","cool completed_word "," proc "," input is_a? "," hooks exec_hook "," hooks "," binding_for  eval ","Pry  binding_for  eval ","Pry  last_ set_last_result ult= ","Pry  last_target eval = ","Pry  last_ set_last_result = ","Pry  last_ set_last_exception = ","Readline  Pry InputCompleter  build_completion_proc etion_proc= ","Pry InputCompleter  build_Pry InputCompleter  build_completion_proc etion_proc "," set_last_ set_last_result ult "," set_last_target eval  "," set_last_ set_last_result  "," set_last_ set_last_exception  "," custom_Pry InputCompleter  build_completion_proc etions "," r  each_line count "," r  each_line "," input Pry InputCompleter  build_completion_proc etion_proc= "," input  set_last_result pond_to? ","Pry InputCompleter  build_completion_proc  call ","cool Pry InputCompleter  build_completion_proc eted_word "]}," Pry rep":{"type":"method","name":"rep","children":[],"call":[" output print "," re "," output "," binding_for "," print call "," print ","Pry  binding_for "," show_result "," should_print? ","@suppress_output ! ","Pry  critical_section "," show_ re  "]}," Pry repl":{"type":"method","name":"repl","children":[],"call":["Pry REPL  new start ","Pry REPL  new "," throw ","nesting_level != "," output session_end "," output "," nesting pop "," nesting "," rep "," loop "," nesting << "," nesting size "," catch ","target eval "," output session_start "," binding_for "," exec_hook "," nesting push ","Pry  active_instance= ","Pry  binding_for "," Array "," repl_epilogue "," repl_prologue "," raise "," binding_stack last "," binding_stack "," binding_stack empty? "," nesting size  != "," binding_for  eval ","Pry  binding_for  eval "]}," Pry revive":{"type":"method","name":"revive","children":[],"call":[]}," Pry kill":{"type":"method","name":"kill","children":[],"call":[]}," Pry WrappedModule lines_for_file":{"type":"method","name":"lines_for_file","children":[],"call":["File  readlines ","@lines_for_file [] ","Pry  line_buffer drop ","Pry  line_buffer ","file == ","Pry  eval_path "]}," Pry WrappedModule method_defined_by_forwardable_module?":{"type":"method","name":"method_defined_by_forwardable_module?","children":[],"call":["method source_location first =~ ","method source_location first ","method source_location "]}," Pry WrappedModule nested_module?":{"type":"method","name":"nested_module?","children":[],"call":[" safe_send == "," safe_send ","Module  === ","child is_a? "," safe_send  is_a? "]}," Pry WrappedModule all_methods_for":{"type":"method","name":"all_methods_for","children":[],"call":["Pry Method  all_from_obj + ","Pry Method  all_from_class ","Pry Method  all_from_obj "," all_from_common + "," all_from_common "]}," Pry WrappedModule all_relevant_methods_for":{"type":"method","name":"all_relevant_methods_for","children":[],"call":["(send\n  (send nil :safe_send\n    (lvar :mod)\n    (sym :constants)) :map) flatten "," all_relevant_methods_for "," nested_module? "," safe_send map "," safe_send ","methods empty? "," method_defined_by_forwardable_module? ","x name == ","x name "," all_methods_for select reject "," all_methods_for select "," all_methods_for "," safe_send flat_map ","(send\n  (send nil :safe_send\n    (lvar :mod)\n    (sym : nested_module? ants)) :map) flatten "]}," Pry WrappedModule all_source_locations_by_popularity":{"type":"method","name":"all_source_locations_by_popularity","children":[],"call":["1.0 / ","methods size -@ ","methods size ","expanded end_with? ","$LOADED_FEATURES index ","File  expand_path ","(send\n  (lvar :ims) :group_by) sort_by "," Array first "," Array ","v source_location ","ims group_by "," all_relevant_methods_for "," wrapped ","ims sort_by "," all_relevant_methods_for group_by ","v size -@ ","v size ","x name == ","x name ","ims select reject ","ims select "," all_methods_for ","v source_location nil? ","v alias? ","ims reject! ","File  expand_path  end_with? ","(send\n  (lvar : all_relevant_methods_for ) :group_by) sort_by ","(send\n  (lvar : all_methods_for ) :group_by) sort_by "," all_relevant_methods_for  group_by "," all_methods_for  group_by "," all_relevant_methods_for  sort_by "," all_methods_for  sort_by "," all_relevant_methods_for  select reject "," all_methods_for  select reject "," all_relevant_methods_for  select "," all_methods_for  select "," all_relevant_methods_for  reject! "," all_methods_for  reject! "]}," Pry WrappedModule method_candidates":{"type":"method","name":"method_candidates","children":[],"call":["methods_sorted_by_source_line last ","methods_sorted_by_source_line first ","group last sort_by ","group last "," all_source_locations_by_popularity map "," all_source_locations_by_popularity ","sorted_by_lowest_line_number first ","group last sort_by  last ","group last sort_by  first "]}," Pry WrappedModule primary_candidate":{"type":"method","name":"primary_candidate","children":[],"call":[" candidate ","c file "," candidates find "," candidates "]}," Pry WrappedModule super":{"type":"method","name":"super","children":[],"call":["Pry  WrappedModule "," ancestors [] "," ancestors ","(send\n  (send nil :ancestors) :select) [] ","v is_a? "," ancestors select "," wrapped is_a? "," wrapped ","times zero? "]}," Pry WrappedModule yard_docs?":{"type":"method","name":"yard_docs?","children":[],"call":["(and\n  (defined?\n    (const nil :YARD))\n  (send\n    (const\n      (const nil :YARD) :Registry) :at\n    (send nil :name))) ! ! ","(and\n  (defined?\n    (const nil :YARD))\n  (send\n    (const\n      (const nil :YARD) :Registry) :at\n    (send nil :name))) ! ","YARD Registry  at "," name "]}," Pry WrappedModule candidates":{"type":"method","name":"candidates","children":[],"call":["enum to_a ","Pry Helpers BaseHelpers  jruby_19? ","y yield "," candidate ","(erange\n  (int 0)\n  (send nil :number_of_candidates)) each "," number_of_candidates ","Enumerator  new ","Helpers Platform  jruby_19? "," generator new "," generator "]}," Pry WrappedModule number_of_candidates":{"type":"method","name":"number_of_candidates","children":[],"call":[" method_candidates count "," method_candidates "]}," Pry WrappedModule candidate":{"type":"method","name":"candidate","children":[],"call":["Candidate  new ","@memoized_candidates [] ","WrappedModule Candidate  new "]}," Pry WrappedModule yard_doc":{"type":"method","name":"yard_doc","children":[],"call":["YARD Registry  at docstring to_s ","YARD Registry  at docstring ","YARD Registry  at "," name "," yard_docs? "]}," Pry WrappedModule yard_line":{"type":"method","name":"yard_line","children":[],"call":["YARD Registry  at line ","YARD Registry  at "," name "," yard_docs? "]}," Pry WrappedModule yard_file":{"type":"method","name":"yard_file","children":[],"call":["YARD Registry  at file ","YARD Registry  at "," name "," yard_docs? "]}," Pry WrappedModule source":{"type":"method","name":"source","children":[],"call":[" primary_candidate source "," primary_candidate "," source_for_candidate "]}," Pry WrappedModule doc":{"type":"method","name":"doc","children":[],"call":[" primary_candidate doc "," primary_candidate "," process_doc "," raise "," name ","@doc ! "," extract_doc_for_candidate "," source_location nil? "," source_location ","from_yard docstring ","YARD Registry  at "," yard_docs? "," process_doc  ! "," extract_doc_for_candidate  ! ","from_yard docstring  ! ","YARD Registry  at  docstring "]}," Pry WrappedModule line":{"type":"method","name":"line","children":[],"call":[" Array last "," Array "," source_location "]}," Pry WrappedModule file":{"type":"method","name":"file","children":[],"call":[" Array first "," Array "," source_location "]}," Pry WrappedModule source_location":{"type":"method","name":"source_location","children":[],"call":[" primary_candidate source_location "," primary_candidate "," module_source_location_for_candidate "]}," Pry WrappedModule respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" wrapped respond_to? "," wrapped "," wrapped send "," block "," args "]}," Pry WrappedModule method_missing":{"type":"method","name":"method_missing","children":[],"call":[" wrapped send "," wrapped "," wrapped respond_to? "]}," Pry WrappedModule singleton_instance":{"type":"method","name":"singleton_instance","children":[],"call":["(sclass\n  (lvar :x)\n  (self)) == "," wrapped ","ObjectSpace  each_object detect ","ObjectSpace  each_object "," wrapped to_java attached "," wrapped to_java ","Helpers BaseHelpers  jruby? "," raise "," singleton_class? ","Helpers Platform  jruby? ","RUBY_ENGINE  =~ "]}," Pry WrappedModule class?":{"type":"method","name":"class?","children":[],"call":[" wrapped instance_of? "," wrapped "]}," Pry WrappedModule module?":{"type":"method","name":"module?","children":[],"call":[" wrapped instance_of? "," wrapped "]}," Pry WrappedModule singleton_class?":{"type":"method","name":"singleton_class?","children":[],"call":[" wrapped != ","Pry Method  safe_send first ","Pry Method  safe_send "," wrapped ","Rubinius Type  singleton_class_object ! ! ","Rubinius Type  singleton_class_object ! ","Rubinius Type  singleton_class_object "," wrapped ancestors first "," wrapped ancestors "," wrapped singleton_class? "," wrapped respond_to? "]}," Pry WrappedModule nonblank_name":{"type":"method","name":"nonblank_name","children":[],"call":[" name "," wrapped inspect "," wrapped "," name to_s == "," name to_s "]}," Pry WrappedModule method_prefix":{"type":"method","name":"method_prefix","children":[],"call":[" nonblank_name ","WrappedModule  new nonblank_name ","WrappedModule  new "," singleton_instance ","Module  === "," singleton_class? "]}," Pry WrappedModule constants":{"type":"method","name":"constants","children":[],"call":["Module  instance_method bind call ","Module  instance_method bind ","Module  instance_method ","method call ","(send\n  (send\n    (ivar :@wrapped) :ancestors) :-\n  (array\n    (ivar :@wrapped))) map flatten ","(send\n  (send\n    (ivar :@wrapped) :ancestors) :-\n  (array\n    (ivar :@wrapped))) map ","@wrapped ancestors - ","@wrapped ancestors ","inherit ! ","method arity == ","method arity ","Module  instance_Module  instance_method bind  bind call ","Module  instance_Module  instance_method bind  bind ","Module  instance_Module  instance_method bind  ","Module  instance_method bind  call ","Module  instance_method bind  arity == ","Module  instance_method bind  arity "]}," Pry WrappedModule initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","mod inspect "," Module  === ","mod is_a? "]}," Pry WrappedModule safe_to_evaluate?":{"type":"method","name":"safe_to_evaluate?","children":[],"call":["kind =~ ","target eval ","str strip == ","str strip ","str =~ ","target eval  =~ "]}," Pry WrappedModule from_str":{"type":"method","name":"from_str","children":[],"call":[]}," Pry WrappedModule":{"type":"method","name":"WrappedModule","children":[],"call":["Pry WrappedModule  new ","obj is_a? "]}," PryTester reset_output":{"type":"method","name":"reset_output","children":[],"call":["@pry output= ","StringIO  new "]}," PryTester last_command_result_or_output":{"type":"method","name":"last_command_result_or_output","children":[],"call":[" last_output ","result != "," last_command_result "," last_command_result  != "," last_command_ last_command_result  "]}," PryTester last_command_result":{"type":"method","name":"last_command_result","children":[],"call":["result retval ","Pry  current [] ","Pry  current ","Pry  current []  retval "]}," PryTester process_command":{"type":"method","name":"process_command","children":[],"call":[" last_command_result_or_output "," raise ","@pry process_command "]}," PryTester last_output":{"type":"method","name":"last_output","children":[],"call":["@out string "]}," PryTester push_binding":{"type":"method","name":"push_binding","children":[],"call":["@pry push_binding "]}," PryTester push":{"type":"method","name":"push","children":[],"call":["@pry eval "," Array flatten each "," Array flatten "," Array "]}," PryTester eval":{"type":"method","name":"eval","children":[],"call":["@pry evaluate_ruby "," last_command_result_or_output ","@pry process_command ","@history push ","str strip ","strs flatten each ","strs flatten "," reset_output ","str !~ "," last_command_@pry evaluate_ruby _or_output "," last_command_ last_command_result_or_output _or_output "]}," PryTester initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_output ","@pry inject_sticky_locals! ","options [] ","Pry  new ","options merge ","@pry input_array << ","@pry input_array ","@pry inject_sticky_locals ","@pry binding_stack << ","@pry binding_stack ","Pry  binding_for ","Pry  new  inject_sticky_locals! ","Pry  new  input_array << ","Pry  new  input_array ","Pry  new  inject_sticky_locals ","Pry  new  binding_stack << ","Pry  new  binding_stack "]}," pry_eval":{"type":"method","name":"pry_eval","children":[],"call":[" pry_tester eval "," pry_tester ","Pry  binding_for ","eval_strs shift ","Pry  toplevel_binding ","eval_strs first is_a? ","eval_strs first ","Pry  Pry  binding_for _for ","Pry  Pry  toplevel_binding _for ","Pry  toplevel_Pry  binding_for  ","Pry  toplevel_Pry  toplevel_binding  "]}," pry_tester":{"type":"method","name":"pry_tester","children":[],"call":["(sclass\n  (lvar :t)\n  (self)) class_eval ","PryTester  new tap ","PryTester  new ","args unshift ","Pry  toplevel_binding ","args [] is_a? ","args [] ","args length == ","args length "]}," PryTestHelpers mock_exception":{"type":"method","name":"mock_exception","children":[],"call":["e define_singleton_method ","StandardError  new tap ","StandardError  new "," define_method ","(sclass\n  (lvar :e)\n  (self)) class_eval ","StandardError  new  dStandardError  new finStandardError  new _singlStandardError  new ton_mStandardError  new thod ","StandardError  nStandardError  new w tap ","StandardError  nStandardError  new w "," dStandardError  new finStandardError  new _mStandardError  new thod ","(sclass\n  (lvar :StandardError  new )\n  (sStandardError  new lf)) class_StandardError  new val "]}," PryTestHelpers mock_command":{"type":"method","name":"mock_command","children":[],"call":["Struct  new new ","output string ","Struct  new ","cmd new call_safely ","cmd new ","opts merge ","Pry  new ","StringIO  new ","StringIO  new  string "]}," PryTestHelpers unindent":{"type":"method","name":"unindent","children":[],"call":["Pry Helpers CommandHelpers  unindent "]}," PryTestHelpers temp_file":{"type":"method","name":"temp_file","children":[],"call":["File  unlink ","file path ","File  exists? ","file close ","Tempfile  new ","File  exist? ","Tempfile  new  path ","Tempfile  new  close ","TempTempfile  new   new "]}," PryTestHelpers constant_scope":{"type":"method","name":"constant_scope","children":[],"call":["Object  remove_const ","Object  const_defined? ","names each "]}," PryTestHelpers inject_var":{"type":"method","name":"inject_var","children":[],"call":["Pry  current []= ","Pry  current ","b eval "]}," reset_defaults":{"type":"method","name":"reset_defaults","children":[],"call":["Pry  config collision_warning= ","Pry  config ","Pry  config hooks= ","Pry Hooks  new ","Pry  config correct_indent= ","Pry  config history should_save= ","Pry  config history ","Pry  config history should_load= ","Pry  config should_load_plugins= ","Pry  config should_load_local_rc= ","Pry  config should_load_rc= ","Pry  config pager= ","Pry  config color= "," orig_reset_defaults ","Pry  config auto_indent= ","Pry  pager= ","Pry  color= "]}," Terminal nonzero_column?":{"type":"method","name":"nonzero_column?","children":[],"call":["size [] to_i > ","size [] to_i ","size [] "]}," Terminal screen_size_according_to_ansicon_env":{"type":"method","name":"screen_size_according_to_ansicon_env","children":[],"call":[" nonzero_column? ","ENV  [] =~ ","ENV  [] "]}," Terminal screen_size_according_to_readline":{"type":"method","name":"screen_size_according_to_readline","children":[],"call":[" nonzero_column? ","Readline  get_screen_size ","Readline  respond_to? ","Readline  get_screen_Readline  get_screen_size  "]}," Terminal screen_size_according_to_env":{"type":"method","name":"screen_size_according_to_env","children":[],"call":[" nonzero_column? ","ENV  [] "]}," Terminal screen_size_according_to_io_console":{"type":"method","name":"screen_size_according_to_io_console","children":[],"call":["$stdout winsize ","$stdout respond_to? ","$stdout tty? "," require ","Pry Helpers BaseHelpers  jruby? ","Pry Helpers Platform  jruby? "]}," Terminal actual_screen_size":{"type":"method","name":"actual_screen_size","children":[],"call":[" screen_size_according_to_ansicon_env "," screen_size_according_to_readline "," screen_size_according_to_env "," screen_size_according_to_io_console "]}," Terminal height!":{"type":"method","name":"height!","children":[],"call":[" size! [] "," size! "]}," Terminal width!":{"type":"method","name":"width!","children":[],"call":[" size! [] "," size! "]}," Terminal size!":{"type":"method","name":"size!","children":[],"call":[" screen_size "]}," Terminal screen_size":{"type":"method","name":"screen_size","children":[],"call":["cols to_i ","rows to_i "," actual_screen_size ","cols to_i != ","rows to_i != "]}," Pry Rubygem install":{"type":"method","name":"install","children":[],"call":["Gem  refresh "," raise ","Pry Helpers Text  green ","installer install ","Gem DependencyInstaller  new ","Gem  user_dir ","Gem  dir ","File  writable? ","gemrc_opts include? ","Gem  configuration [] split ","Gem  configuration [] ","Gem  configuration ","gem_config split ","gem_config nil? "," require "," green "," text green "," text ","Gem DependencyInstaller  new  install ","Gem  configuration [] split  include? ","Gem  configuration []  split ","Gem  configuration []  nil? "]}," Pry Rubygem complete":{"type":"method","name":"complete","children":[],"call":[" list map "," list ","so_far =~ "]}," Pry Rubygem list":{"type":"method","name":"list","children":[],"call":["spec name =~ ","spec name ","Gem  source_index gems values select ","Gem  source_index gems values ","Gem  source_index gems ","Gem  source_index ","Gem Specification  select ","Gem Specification  respond_to? "]}," Pry Rubygem spec":{"type":"method","name":"spec","children":[],"call":[" raise ","(send\n  (lvar :specs) :sort_by) last ","Gem Version  new ","spec version ","specs sort_by ","Gem  source_index find_name ","Gem  source_index ","Gem Specification  find_all_by_name ","Gem Specification  respond_to? ","(send\n  (lvar :specs) :sort_by) first ","(send\n  (lvar :Gem  source_index find_name ) :sort_by) last ","(send\n  (lvar :Gem Specification  find_all_by_name ) :sort_by) last ","(send\n  (lvar :(send\n  (lvar :specs) :sort_by) first s) :sort_by) last ","(send\n  (lvar :specs) :sort_by) first  version ","Gem  source_index find_name  sort_by ","Gem Specification  find_all_by_name  sort_by ","(send\n  (lvar :specs) :sort_by) first s sort_by ","(send\n  (lvar :Gem  source_index find_name ) :sort_by) first ","(send\n  (lvar :Gem Specification  find_all_by_name ) :sort_by) first ","(send\n  (lvar :(send\n  (lvar :specs) :sort_by) first s) :sort_by) first "]}," Pry Rubygem installed?":{"type":"method","name":"installed?","children":[],"call":["Gem  source_index find_name first ","Gem  source_index find_name ","Gem  source_index ","Gem Specification  find_all_by_name any? ","Gem Specification  find_all_by_name ","Gem Specification  respond_to? "]}," Pry REPLFileLoader load":{"type":"method","name":"load","children":[],"call":[" non_interactive_mode ","Pry  new ","Pry  start ","StringIO  new ","Pry  toplevel_binding ","Pry  config hooks add_hook ","Pry  config hooks ","Pry  config "," define_additional_commands ","Pry  initial_session_setup "]}," Pry REPLFileLoader define_additional_commands":{"type":"method","name":"define_additional_commands","children":[],"call":["s non_interactive_mode ","File  read ","File  expand_path "," _pry_ ","Pry Commands  command ","s interactive_mode "," pry_instance "," _pry_ input= "," _pry_ input_stack push "," _pry_ input "," _pry_ input_stack ","StringIO  new "," _pry_ input_stack pop "]}," Pry REPLFileLoader non_interactive_mode":{"type":"method","name":"non_interactive_mode","children":[],"call":[" interactive_mode ","_pry_ output puts ","_pry_ eval_string ","_pry_ output ","_pry_ eval_string empty? ","_pry_ eval ","content lines each ","content lines ","_pry_ exception_handler= ","o puts ","_p_ run_command "," proc ","_pry_ print= ","pry_instance output puts ","pry_instance eval_string ","pry_instance output ","pry_instance eval_string empty? ","pry_instance eval ","pry_instance exception_handler= ","p run_command ","pry_instance print= ","_pry_ run_command "]}," Pry REPLFileLoader interactive_mode":{"type":"method","name":"interactive_mode","children":[],"call":["Pry REPL  new start ","Pry REPL  new ","_pry_ config exception_handler= ","Pry  config exception_handler ","Pry  config ","_pry_ config ","_pry_ config print= ","Pry  config print ","_pry_ config input= ","Pry  config input ","pry_instance config exception_handler= ","pry_instance config ","pry_instance config print= ","pry_instance config input= ","_pry_ exception_handler= ","_pry_ print= ","_pry_ input= "]}," Pry REPLFileLoader initialize":{"type":"method","name":"initialize","children":[],"call":["File  read "," define_additional_commands "," raise ","File  exists? ! ","File  exists? ","File  expand_path ","File  exist? ! ","File  exist? ","StringIO  new "]}," Pry REPL input_readline":{"type":"method","name":"input_readline","children":[],"call":[" input readline "," input ","Pry InputLock  for interruptible_region ","Pry InputLock  for "]}," Pry REPL read_line":{"type":"method","name":"read_line","children":[],"call":[" input_readline "," input method arity == "," input method arity "," input method "," input "," input is_a? "," input == "," input completion_proc= ","@pry complete "," proc "," input respond_to? ","completions compact ","cool completed_word "," handle_read_errors "," coolline_available? "," set_readline_output "," readline_available? ","@pry complete  compact "]}," Pry REPL handle_read_errors":{"type":"method","name":"handle_read_errors","children":[],"call":[" puts "," input ","exception_count < "," output puts ","e backtrace "," output ","e message ","should_retry ! "," pry config input= ","Pry  config input ","Pry  config "," pry config "," pry "]}," Pry REPL read":{"type":"method","name":"read","children":[],"call":[" output flush "," output "," output print ","@indent correct_indentation ","original_val length - ","indented_val length ","original_val length ","Pry Helpers BaseHelpers  use_ansi_codes? "," pry config correct_indent "," pry config "," pry "," output tty? ","@indent indent "," pry config auto_indent ","String  === "," read_line ","@indent current_prefix "," pry select_prompt ","@indent reset "," pry eval_string empty? "," pry eval_string "," calculate_overhang ","val is_a? ","@indent correct_@indent current_prefix  ","original_ read_line  length - ","@indent indent  length ","indented_ read_line  length ","original_ read_line  length "," pry e read_line _string empty? "," pry e read_line _string "," read_line  is_a? "]}," Pry REPL epilogue":{"type":"method","name":"epilogue","children":[],"call":[" pry exec_hook "," pry "," pry current_binding "," pry output "]}," Pry REPL repl":{"type":"method","name":"repl","children":[],"call":[" pry exit_value "," pry "," pry eval "," output puts "," output "," output tty? ","val nil? "," pry reset_eval_string "," read "," loop "," pry exit_ read ue "," pry e read  "," read  nil? "," pry reset_e read _string "]}," Pry REPL prologue":{"type":"method","name":"prologue","children":[],"call":["Kernel  print ","Pry Helpers BaseHelpers  windows_ansi? "," pry config correct_indent "," pry config "," pry "," pry exec_hook "," pry current_binding "," pry output ","Helpers Platform  windows_ansi? "," output print "," output "]}," Pry REPL start":{"type":"method","name":"start","children":[],"call":[" epilogue "," repl ","Pry InputLock  for with_ownership ","Pry InputLock  for "," prologue "]}," Pry REPL initialize":{"type":"method","name":"initialize","children":[],"call":["@pry push_binding ","options [] ","Pry Indent  new "]}," Pry RbxPath rvm_ruby?":{"type":"method","name":"rvm_ruby?","children":[],"call":["(send\n  (lvar :path) :=~\n  (regexp\n    (str \"\\\\.rvm\")\n    (regopt))) ! ! ","(send\n  (lvar :path) :=~\n  (regexp\n    (str \"\\\\.rvm\")\n    (regopt))) ! ","path =~ "]}," Pry RbxPath convert_path_to_full":{"type":"method","name":"convert_path_to_full","children":[],"call":["File  join ","File  dirname ","path start_with? "," std_convert_path_to_full "," rvm_convert_path_to_full "," rvm_ruby? "]}," Pry RbxPath is_core_path?":{"type":"method","name":"is_core_path?","children":[],"call":["File  exist? "," convert_path_to_full ","path start_with? ","Pry Helpers BaseHelpers  rbx? "]}," Pry raise_up!":{"type":"method","name":"raise_up!","children":[],"call":[" raise_up_common "]}," Pry raise_up":{"type":"method","name":"raise_up","children":[],"call":[" raise_up_common "]}," Pry raise_up_common":{"type":"method","name":"raise_up_common","children":[],"call":[" raise "," binding_stack pop "," binding_stack "," throw "," binding_stack clear "," binding_stack one? ","exception set_backtrace "," caller ","args [] ","args length === ","args length ","exception is_a? ","args first exception ","args first ","args first respond_to? ! ","args first respond_to? ","args length > ","RuntimeError  new ","args first is_a? ","args length == "," last_exception ","args == ","args size == ","args size "]}," Pry output":{"type":"method","name":"output","children":[],"call":["Pry Output  new "]}," Pry pager":{"type":"method","name":"pager","children":[],"call":["Pry Pager  new "]}," Pry pop_prompt":{"type":"method","name":"pop_prompt","children":[],"call":[" prompt "," prompt_stack pop "," prompt_stack "," prompt_stack size > "," prompt_stack size "]}," Pry push_prompt":{"type":"method","name":"push_prompt","children":[],"call":[" prompt_stack push "," prompt_stack "]}," Pry prompt_stack":{"type":"method","name":"prompt_stack","children":[],"call":["Array  new "]}," Pry generate_prompt":{"type":"method","name":"generate_prompt","children":[],"call":["prompt_proc call ","conf _pry_ ","conf nesting_level ","conf object ","prompt_proc arity == ","prompt_proc arity ","conf pry_instance "]}," Pry select_prompt":{"type":"method","name":"select_prompt","children":[],"call":[" generate_prompt "," Array last "," Array "," prompt "," Array first "," eval_string empty? "," eval_string ","Pry  critical_section ","Pry Config  from_hash ","@eval_string empty? ! ","@eval_string empty? "," input_array "," binding_stack "," input_array count ","Pry  history history_line_count + ","Pry  history history_line_count ","Pry  history ","Pry  history session_line_count + ","Pry  history session_line_count "," binding_stack size - "," binding_stack size ","@indent stack last ","@indent stack ","@indent open_delimiters last ","@indent open_delimiters ","@indent open_delimiters any? "," current_binding eval "," current_binding ","Pry Config  assign "," input_ring "," input_ring count ","Kernel  warn ","prompt_proc call ","c pry_instance ","c nesting_level ","c object "," prompt incomplete_proc "," prompt wait_proc "," prompt is_a? ","OpenStruct  new "," Array last call "," nesting level "," nesting "," Array first call ","eval_string empty? ","eval_string empty? ! ","target eval ","Pry  Pry Config  from_hash ritiPry Config  from_hash al_sePry Config  from_hash tion ","Pry  Pry Config  assign ritiPry Config  assign al_sePry Config  assign tion ","Pry  OpenStruct  new ritiOpenStruct  new al_seOpenStruct  new tion "," binding_staPry Config  from_hash k "," binding_staPry Config  assign k "," binding_staOpenStruct  new k "," input_array Pry Config  from_hash ount "," input_array Pry Config  assign ount "," input_array OpenStruct  new ount ","Pry  history history_line_Pry Config  from_hash ount + ","Pry  history history_line_Pry Config  assign ount + ","Pry  history history_line_OpenStruct  new ount + ","Pry  history history_line_Pry Config  from_hash ount ","Pry  history history_line_Pry Config  assign ount ","Pry  history history_line_OpenStruct  new ount ","Pry  history session_line_Pry Config  from_hash ount + ","Pry  history session_line_Pry Config  assign ount + ","Pry  history session_line_OpenStruct  new ount + ","Pry  history session_line_Pry Config  from_hash ount ","Pry  history session_line_Pry Config  assign ount ","Pry  history session_line_OpenStruct  new ount "," binding_staPry Config  from_hash k size - "," binding_staPry Config  assign k size - "," binding_staOpenStruct  new k size - "," binding_staPry Config  from_hash k size "," binding_staPry Config  assign k size "," binding_staOpenStruct  new k size ","@indent staPry Config  from_hash k last ","@indent staPry Config  assign k last ","@indent staOpenStruct  new k last ","@indent staPry Config  from_hash k ","@indent staPry Config  assign k ","@indent staOpenStruct  new k "," Pry Config  from_hash urrent_binding eval "," Pry Config  assign urrent_binding eval "," OpenStruct  new urrent_binding eval "," Pry Config  from_hash urrent_binding "," Pry Config  assign urrent_binding "," OpenStruct  new urrent_binding "," input_ring Pry Config  from_hash ount "," input_ring Pry Config  assign ount "," input_ring OpenStruct  new ount ","prompt_proPry Config  from_hash  Pry Config  from_hash all ","prompt_proPry Config  assign  Pry Config  assign all ","prompt_proOpenStruct  new  OpenStruct  new all "," prompt incomplete_proc  call "," prompt wait_proc  call ","Pry Config  from_hash  pry_instanPry Config  from_hash e ","Pry Config  assign  pry_instanPry Config  assign e ","OpenStruct  new  pry_instanOpenStruct  new e ","Pry Config  from_hash  nesting_level ","Pry Config  assign  nesting_level ","OpenStruct  new  nesting_level ","Pry Config  from_hash  objePry Config  from_hash t ","Pry Config  assign  objePry Config  assign t ","OpenStruct  new  objeOpenStruct  new t ","c  current_binding eval  "," prompt inPry Config  from_hash omplete_proPry Config  from_hash  "," prompt inPry Config  assign omplete_proPry Config  assign  "," prompt inOpenStruct  new omplete_proOpenStruct  new  "," prompt wait_proPry Config  from_hash  "," prompt wait_proPry Config  assign  "," prompt wait_proOpenStruct  new  ","OpenStruPry Config  from_hash t  new ","OpenStruPry Config  assign t  new ","OpenStruOpenStruct  new t  new "," Array last Pry Config  from_hash all "," Array last Pry Config  assign all "," Array last OpenStruct  new all "," Array first Pry Config  from_hash all "," Array first Pry Config  assign all "," Array first OpenStruct  new all "]}," Pry should_print?":{"type":"method","name":"should_print?","children":[],"call":["@suppress_output ! "," last_result_is_exception? ","result is_a? "]}," Pry last_result_is_exception?":{"type":"method","name":"last_result_is_exception?","children":[],"call":[]}," Pry update_input_history":{"type":"method","name":"update_input_history","children":[],"call":["code each_line count ","code each_line ","Pry  current_line ","Pry  line_buffer push ","Pry  line_buffer ","@input_array << ","code lines count ","code lines ","@input_ring << ","Readline HISTORY  pop ","last == ","last empty? ","Readline HISTORY  [] strip ","Readline HISTORY  [] ","final_index - ","Readline HISTORY  size > ","Readline HISTORY  size ","Readline HISTORY  [] strip  == ","Readline HISTORY  [] strip  empty? "]}," Pry last_exception=":{"type":"method","name":"last_exception=","children":[],"call":["@output_array << ","Pry LastException  new ","@output_ring << ","ex bt_source_location_for ","ex line= ","ex file= ","ex bt_index= ","(send\n  (ivar :@bt_index) :+\n  (int 1)) % "," backtrace size "," backtrace ","@bt_index + ","2 to_i "," backtrace [] =~ "," backtrace [] "," attr_accessor ","(send\n  (ivar :(send\n  (ivar :@bt_index) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@bt_index) :+\n  (int 1)) %  + "]}," Pry set_last_result":{"type":"method","name":"set_last_result","children":[],"call":[" last_result= ","code =~ ","@output_array << ","@output_ring << ","target eval ","Pry  last_result= "]}," Pry exec_hook":{"type":"method","name":"exec_hook","children":[],"call":[" output puts "," output ","e backtrace first ","e backtrace ","e message ","e class "," hooks errors [] each "," hooks errors [] "," hooks errors "," hooks "," hooks exec_hook tap "," hooks exec_hook "," hooks errors size ","e backtrace first to_s "," hooks [] call "," hooks [] "]}," Pry run_command":{"type":"method","name":"run_command","children":[],"call":[" commands process_line "," output "," current_binding "," commands "," process_line ","@command_processor process_commands "]}," Pry process_command_safely":{"type":"method","name":"process_command_safely","children":[],"call":[" output puts ","e message "," output ","Pry  last_internal_error= "," process_command "]}," Pry process_command":{"type":"method","name":"process_command","children":[],"call":["@eval_string replace ","result void_command? ! ","result void_command? ","result command? ","Pry  current []= ","Pry  current "," commands process_line "," output "," current_binding "," commands ","val chomp "," hooks ","val lstrip ","(str \"^\\\\s\\\\S\") !~ ","eval_string replace ","Thread  current []= ","Thread  current ","@command_processor process_commands ","@eval chomp _string replace ","@eval lstrip _string replace "," commands process_line  void_command? ! ","@command_processor process_commands  void_command? ! "," commands process_line  void_command? ","@command_processor process_commands  void_command? "," commands process_line  command? ","@command_processor process_commands  command? ","val chomp  chomp ","val lstrip  chomp ","val chomp  lstrip ","val lstrip  lstrip ","eval chomp _string replace ","eval lstrip _string replace "]}," Pry ensure_correct_encoding!":{"type":"method","name":"ensure_correct_encoding!","children":[],"call":["@eval_string force_encoding ","val encoding ","val encoding != ","@eval_string encoding ","val respond_to? ","@eval_string empty? "]}," Pry show_result":{"type":"method","name":"show_result","children":[],"call":[" output flush "," output "," output respond_to? "," output puts "," last_result_is_exception? ","e inspect "," print call "," print "," should_print? "," exception_handler call "," exception_handler ","e backtrace join ","e backtrace "]}," Pry evaluate_ruby":{"type":"method","name":"evaluate_ruby","children":[],"call":[" exec_hook "," update_input_history "," set_last_result "," current_binding eval ","Pry  current_line ","Pry  eval_path "," current_binding "," inject_sticky_locals! ","target eval "," inject_sticky_locals ","Pry  binding_for "," set_last_ current_binding eval  "," set_last_target eval  ","Pry  binding_for  eval "]}," Pry handle_line":{"type":"method","name":"handle_line","children":[],"call":[" throw "," current_binding nil? "," current_binding "," show_result ","Pry  critical_section "," last_exception= ","e class __persistent__= ","e class ","e class respond_to? ","Pry Helpers BaseHelpers  jruby? "," evaluate_ruby "," reset_eval_string ","jruby_exceptions << ","@eval_string =~ ","@eval_string empty? "," output puts ","e message sub ","e message "," output ","Pry Code  complete_expression? "," exec_hook "," eval_string ","@eval_string << ","line chomp ","@eval_string empty? ! ","line empty? ! ","line empty? "," process_command_safely ! "," process_command_safely ","line lstrip "," inject_sticky_locals! ","Pry  history << ","Pry  history ","options [] "," ensure_correct_encoding! "," config control_d_handler call "," config control_d_handler "," config ","line nil? ","Helpers Platform  jruby? ","e message gsub "," show_ evaluate_ruby  ","Pry Code  Pry Code  complete_expression? ession? "]}," Pry eval":{"type":"method","name":"eval","children":[],"call":[" raise ","@stopped ! "," handle_line "," catch "]}," Pry reset_eval_string":{"type":"method","name":"reset_eval_string","children":[],"call":[" dup "]}," Pry sticky_locals":{"type":"method","name":"sticky_locals","children":[],"call":["(pair\n  (sym :_in_)\n  (send nil :input_array)) merge "," config extra_sticky_locals "," config "," output_array [] "," output_array "," proc "," last_result "," last_dir "," last_file "," last_exception wrapped_exception "," last_exception "," input_array ","(pair\n  (sym :_in_)\n  (send nil :input_ring)) merge "," output_ring [] "," output_ring "," input_ring ","(pair\n  (sym :_in_)\n  (block\n    (send nil :proc)\n    (args)\n    (ivar :@input_array))) merge "," extra_sticky_locals ","@output_array [] "]}," Pry add_sticky_local":{"type":"method","name":"add_sticky_local","children":[],"call":[" config extra_sticky_locals []= "," config extra_sticky_locals "," config "," sticky_locals []= "," sticky_locals "]}," Pry inject_sticky_locals!":{"type":"method","name":"inject_sticky_locals!","children":[],"call":[" inject_local "," current_binding "," sticky_locals each_pair "," sticky_locals "]}," Pry memory_size=":{"type":"method","name":"memory_size=","children":[],"call":["Pry HistoryArray  new ","Pry Ring  new "]}," Pry memory_size":{"type":"method","name":"memory_size","children":[],"call":["@output_array max_size ","@output_ring max_size "]}," Pry inject_local":{"type":"method","name":"inject_local","children":[],"call":["Pry  current []= ","Pry  current ","b eval ","b local_variable_set ","b respond_to? ","value call ","Proc  === ","binding eval ","binding local_variable_set ","binding respond_to? ","value is_a? ","Thread  current []= ","Thread  current ","value call  call ","value call  is_a? "]}," Pry complete":{"type":"method","name":"complete","children":[],"call":["completer call "," custom_completions call push "," sticky_locals keys "," sticky_locals "," custom_completions call "," custom_completions "," current_binding "," config completer new "," config input "," config "," config completer ","Pry  critical_section "," config completer new  call "," config  config completer new  new "," config  config completer new  "]}," Pry push_binding":{"type":"method","name":"push_binding","children":[],"call":[" binding_stack << ","Pry  binding_for "," binding_stack "]}," Pry current_binding":{"type":"method","name":"current_binding","children":[],"call":[" binding_stack last "," binding_stack "]}," Pry push_initial_binding":{"type":"method","name":"push_initial_binding","children":[],"call":[" push_binding ","Pry  toplevel_binding "]}," Pry prompt=":{"type":"method","name":"prompt=","children":[],"call":[" prompt_stack []= "," prompt_stack "," push_prompt "," prompt_stack empty? "," config prompt= "," config "]}," Pry initialize":{"type":"method","name":"initialize","children":[],"call":[" exec_hook "," push_initial_binding ","@input_array << "," set_last_result "," config command_completions "," config ","Pry HistoryArray  new "," config memory_size "," push_prompt "," config prompt "," config merge! ","Pry Config  new ","options delete "," caller ","Pry Indent  new ","@input_ring << ","Pry Ring  new "," class config merge "," class config "," class "," dup ","Pry  view ","nest == "," proc ","Pry  wait_prompt ","Pry  default_prompt "," instance_variable_set ","default_options [] ","ConfigOptions  each ","default_options merge! ","h []= ","Pry  send ","CONFIG_OPTIONS  each ","default_options []= ","CommandProcessor  new "," send "," refresh ","Pry HistoryArray  new  << ","Pry Ring  new  << "]}," Pry critical_section":{"type":"method","name":"critical_section","children":[],"call":[]}," Pry in_critical_section?":{"type":"method","name":"in_critical_section?","children":[],"call":[]}," Pry toplevel_binding=":{"type":"method","name":"toplevel_binding=","children":[],"call":[]}," Pry toplevel_binding":{"type":"method","name":"toplevel_binding","children":[],"call":[]}," Pry binding_for":{"type":"method","name":"binding_for","children":[],"call":[" binding ","target instance_eval ","target == ","TOPLEVEL_BINDING  eval ","target is_a? ","target __binding__ "]}," Pry init":{"type":"method","name":"init","children":[],"call":[]}," Pry reset_defaults":{"type":"method","name":"reset_defaults","children":[],"call":[]}," Pry auto_resize!":{"type":"method","name":"auto_resize!","children":[],"call":[]}," Pry default_editor_for_platform":{"type":"method","name":"default_editor_for_platform","children":[],"call":[]}," Pry initial_session?":{"type":"method","name":"initial_session?","children":[],"call":[]}," Pry load_history":{"type":"method","name":"load_history","children":[],"call":[]}," Pry view_clip":{"type":"method","name":"view_clip","children":[],"call":[]}," Pry load_file_through_repl":{"type":"method","name":"load_file_through_repl","children":[],"call":[]}," Pry start":{"type":"method","name":"start","children":[],"call":[" toplevel_binding "]}," Pry initial_session_setup":{"type":"method","name":"initial_session_setup","children":[],"call":[]}," Pry load_win32console":{"type":"method","name":"load_win32console","children":[],"call":[]}," Pry load_traps":{"type":"method","name":"load_traps","children":[],"call":[]}," Pry load_requires":{"type":"method","name":"load_requires","children":[],"call":[]}," Pry real_path_to":{"type":"method","name":"real_path_to","children":[],"call":[]}," Pry rc_files_to_load":{"type":"method","name":"rc_files_to_load","children":[],"call":[]}," Pry load_rc_files":{"type":"method","name":"load_rc_files","children":[],"call":[]}," Pry load_file_at_toplevel":{"type":"method","name":"load_file_at_toplevel","children":[],"call":[]}," Pry current":{"type":"method","name":"current","children":[],"call":[]}," Pry main":{"type":"method","name":"main","children":[],"call":[]}," Pry history":{"type":"method","name":"history","children":[],"call":["History  new "]}," Pry PluginManager gem_located?":{"type":"method","name":"gem_located?","children":[],"call":["plugin gem_name == ","plugin gem_name ","@plugins any? "]}," Pry PluginManager load_plugins":{"type":"method","name":"load_plugins","children":[],"call":["plugin activate! ","plugin enabled? ","@plugins each "]}," Pry PluginManager plugins":{"type":"method","name":"plugins","children":[],"call":["h []= ","plugin name ","@plugins each ","NoPlugin  new ","Hash  new ","Pry  config plugins strict_loading ","Pry  config plugins ","Pry  config "]}," Pry PluginManager locate_plugins":{"type":"method","name":"locate_plugins","children":[],"call":["@plugins << ","Plugin  new ","gem name "," gem_located? ! "," gem_located? ","gem name split last ","gem name split ","gem name !~ ","(if\n  (send\n    (const\n      (const nil :Gem) :Specification) :respond_to?\n    (sym :each))\n  (const\n    (const nil :Gem) :Specification)\n  (send\n    (send\n      (const nil :Gem) :source_index) :find_name\n    (str \"\"))) each ","Gem  source_index find_name ","Gem  source_index ","Gem Specification  respond_to? ","Gem  refresh ","plugin tap "," plugin_located? ! "," plugin_located? ","plugin supported? "," gem_list each "," gem_list ","@Plugin  new s << ","Plugin  new  tap "," Plugin  new _located? ! "," Plugin  new _located? ","Plugin  new  supported? "]}," Pry PluginManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry PluginManager Plugin activate!":{"type":"method","name":"activate!","children":[],"call":[" enabled= "," active= "," warn "," gem_name "," require "," active? ! "," active? ","Pry  config send ","Pry Config  from_hash "," gem_name gsub ","Pry  config ","OpenStruct  new "," gem_name tr "," raise ","$stderr puts "]}," Pry PluginManager Plugin load_cli_options":{"type":"method","name":"load_cli_options","children":[],"call":[" require ","File  exists? ","File  join "," spec name "," spec "," spec full_gem_path ","File  exist? ","File  realpath ","Gem Version  new >= ","Gem Version  new "]}," Pry PluginManager Plugin enable!":{"type":"method","name":"enable!","children":[],"call":[" enabled= "]}," Pry PluginManager Plugin disable!":{"type":"method","name":"disable!","children":[],"call":[" enabled= "]}," Pry PluginManager Plugin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry PluginManager NoPlugin method_missing":{"type":"method","name":"method_missing","children":[],"call":[" warn ","$stderr puts "]}," Pry PluginManager NoPlugin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pager PageTracker line_length":{"type":"method","name":"line_length","children":[],"call":["line chomp gsub length ","line chomp gsub ","line chomp "]}," Pager PageTracker reset":{"type":"method","name":"reset","children":[],"call":[]}," Pager PageTracker page?":{"type":"method","name":"page?","children":[],"call":["@row >= "]}," Pager PageTracker record":{"type":"method","name":"record","children":[],"call":[" line_length ","(send\n  (begin\n    (send\n      (send\n        (ivar :@col) :+\n        (send nil :line_length\n          (lvar :line))) :-\n      (int 1))) :/\n  (ivar :@cols)) + ","(send\n  (send\n    (ivar :@col) :+\n    (send nil :line_length\n      (lvar :line))) :-\n  (int 1)) / ","@col + - ","@col + ","line end_with? ","str lines each ","str lines "]}," Pager PageTracker initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Pager SystemPager pager":{"type":"method","name":"pager","children":[],"call":["IO  popen "," class default_pager "," class "]}," Pager SystemPager invoked_pager?":{"type":"method","name":"invoked_pager?","children":[],"call":[]}," Pager SystemPager write_to_pager":{"type":"method","name":"write_to_pager","children":[],"call":[" pager write ","@out decolorize_maybe "," pager "]}," Pager SystemPager close":{"type":"method","name":"close","children":[],"call":["@out puts "," pager close "," pager "," invoked_pager? "]}," Pager SystemPager write":{"type":"method","name":"write","children":[],"call":[" raise "," write_to_pager ","@tracker page? ","@buffer << ","@tracker record "," invoked_pager? "]}," Pager SystemPager initialize":{"type":"method","name":"initialize","children":[],"call":["PageTracker  new "," width "," height ","SystemPager  default_pager "]}," Pager SystemPager available?":{"type":"method","name":"available?","children":[],"call":[]}," Pager SystemPager default_pager":{"type":"method","name":"default_pager","children":[],"call":[]}," Pager SimplePager write":{"type":"method","name":"write","children":[],"call":["@tracker reset "," raise ","Readline  readline chomp == ","Readline  readline chomp ","Readline  readline ","@out print ","@tracker page? ","@tracker record ","str lines each ","str lines "]}," Pager SimplePager initialize":{"type":"method","name":"initialize","children":[],"call":["PageTracker  new "," width "," height - "," height "]}," Pager NullPager width":{"type":"method","name":"width","children":[],"call":["Pry Terminal  width! "]}," Pager NullPager height":{"type":"method","name":"height","children":[],"call":["Pry Terminal  height! "]}," Pager NullPager close":{"type":"method","name":"close","children":[],"call":[]}," Pager NullPager write":{"type":"method","name":"write","children":[],"call":["@out write "]}," Pager NullPager print":{"type":"method","name":"print","children":[],"call":[" write "]}," Pager NullPager puts":{"type":"method","name":"puts","children":[],"call":[" print ","str chomp "]}," Pager NullPager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pager best_available":{"type":"method","name":"best_available","children":[],"call":["SystemPager  new "," _pry_ output "," _pry_ ","SimplePager  new ","Pry Helpers BaseHelpers  jruby? ","SystemPager  available? ! ","SystemPager  available? ","NullPager  new "," _pry_ config pager ! "," _pry_ config pager "," _pry_ config ","Helpers Platform  jruby? "]}," Pager enabled?":{"type":"method","name":"enabled?","children":[],"call":["@enabled ! ! ","@enabled ! "]}," Pager open":{"type":"method","name":"open","children":[],"call":["pager close "," best_available "," best_available  close "]}," Pager page":{"type":"method","name":"page","children":[],"call":["pager << "," open "]}," Pager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Output respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" _pry_ config respond_to? "," _pry_ config "," _pry_ ","@output respond_to? "]}," Pry Output method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _pry_ config output send "," _pry_ config output "," _pry_ config "," _pry_ ","@output __send__ ","@output respond_to? "]}," Pry Output decolorize_maybe":{"type":"method","name":"decolorize_maybe","children":[],"call":["Helpers Text  strip_color "," _pry_ config color "," _pry_ config "," _pry_ ","Pry Helpers Text  strip_color "]}," Pry Output print":{"type":"method","name":"print","children":[],"call":[" _pry_ config output print "," decolorize_maybe ","obj to_s "," _pry_ config output "," _pry_ config "," _pry_ ","objs each ","@output print "," puts ","value inspect ","value message ","value class ","Pry  view "," out puts "," out "]}," Pry Output puts":{"type":"method","name":"puts","children":[],"call":[" print ","obj to_s chomp ","obj to_s "," puts ","Array  try_convert ","objs each ","objs empty? "]}," Pry Output initialize":{"type":"method","name":"initialize","children":[],"call":["pry_instance config color ","pry_instance config ","pry_instance config output "]}," Pry ObjectPath handle_failure":{"type":"method","name":"handle_failure","children":[],"call":[" raise ","e set_backtrace ","err backtrace ","CommandError  new tap ","CommandError  new ","(dstr\n  (str \"Bad object path: \")\n  (begin\n    (send\n      (ivar :@path_string) :inspect))) join ","err inspect ","context inspect ","@path_string inspect ","command_error set_backtrace ","CommandError  new  set_backtrace "]}," Pry ObjectPath complete?":{"type":"method","name":"complete?","children":[],"call":["Pry Code  complete_expression? ","SPECIAL_TERMS  include? "]}," Pry ObjectPath resolve":{"type":"method","name":"resolve","children":[],"call":[" handle_failure ","stack push ","Pry  binding_for ","stack last eval ","stack last ","stack pop ","stack size == ","stack size ","stack first ","next_segment chomp ","next_segment << ","scanner getch ","scanner eos? "," complete? ","scanner scan "," loop ","@current_stack dup ","StringScanner  new ","@path_string strip ","@current_stack dup  push ","@current_stack dup  last eval ","@current_stack dup  last ","@current_stack dup  pop ","@current_stack dup  size == ","@current_stack dup  size ","@current_stack dup  first ","StringScanner  new  getch ","StringScanner  new  eos? ","StringScanner  new  scan ","@current_@current_stack dup  dup "]}," Pry ObjectPath initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry WrappedModule Candidate number_of_lines_in_first_chunk":{"type":"method","name":"number_of_lines_in_first_chunk","children":[],"call":["end_method_line - "," line "," last_method_source_location last "," last_method_source_location "," last_method_source_location last  - "]}," Pry WrappedModule Candidate last_method_source_location":{"type":"method","name":"last_method_source_location","children":[],"call":[" method_candidates [] last source_location "," method_candidates [] last "," method_candidates [] "," method_candidates "," adjusted_source_location "]}," Pry WrappedModule Candidate first_method_source_location":{"type":"method","name":"first_method_source_location","children":[],"call":[" method_candidates [] first source_location "," method_candidates [] first "," method_candidates [] "," method_candidates "," adjusted_source_location "]}," Pry WrappedModule Candidate class_regexes":{"type":"method","name":"class_regexes","children":[],"call":[" wrapped name split last "," wrapped name split "," wrapped name "," wrapped "," wrapped class "," wrapped class to_s downcase "," wrapped class to_s "]}," Pry WrappedModule Candidate first_line_of_module_definition":{"type":"method","name":"first_line_of_module_definition","children":[],"call":["(send\n  (lvar :searchable_lines) :rindex) + ","r =~ "," class_regexes any? "," class_regexes ","searchable_lines rindex "," lines_for_file [] ","line - "," lines_for_file "," module_definition_first_line? ","(send\n  (lvar : lines_for_file [] ) :rindex) + "," lines_for_file []  rindex "]}," Pry WrappedModule Candidate source_location":{"type":"method","name":"source_location","children":[],"call":[" first_line_of_module_definition ","file is_a? ! ","file is_a? "," first_method_source_location ","idx + ","r =~ ","class_regexes any? ","search_lines rindex ","host_file_lines [] ","line - "," lines_for_file "," wrapped name split last "," wrapped name split "," wrapped name "," wrapped "," wrapped class "," wrapped class to_s downcase "," wrapped class to_s ","host_file_lines []  rindex "," lines_for_file  [] "]}," Pry WrappedModule Candidate doc":{"type":"method","name":"doc","children":[],"call":[" get_comment_content ","Pry Code  from_file comment_describing "," line ","Pry Code  from_file "," file "," file nil? "," process_doc "," raise "," wrapped "," strip_leading_hash_and_whitespace_from_ruby_comments "]}," Pry WrappedModule Candidate source":{"type":"method","name":"source","children":[],"call":[" strip_leading_whitespace ","Pry Code  from_file expression_at "," number_of_lines_in_first_chunk "," line ","Pry Code  from_file "," file "," file nil? "," raise "," wrapped "]}," Pry WrappedModule Candidate initialize":{"type":"method","name":"initialize","children":[],"call":[" source_location "," raise "," number_of_candidates - "," number_of_candidates ","rank > "," name "," number_of_candidates <= "]}," Pry Method ruby_source":{"type":"method","name":"ruby_source","children":[],"call":[" strip_leading_whitespace "," raise ","MethodSource SourceNotFoundError  new ","e message ","Pry Code  from_file expression_at ","Pry Code  from_file "," name_with_owner "," source_location "]}," Pry Method c_source":{"type":"method","name":"c_source","children":[],"call":[" strip_comments_from_c_code ","info source "," pry_doc_info "," pry_doc_info  source "," pry_doc_ pry_doc_info  "]}," Pry Method method_name_from_first_line":{"type":"method","name":"method_name_from_first_line","children":[],"call":["t2 first ","t1 == ","t2 last == ","t2 last ","tokens each_cons ","tokens tokens each_slice ","tokens tokens ","tokens respond_to? ","CodeRay  scan ","first_ln strip !~ ","first_ln strip ","SyntaxHighlighter  tokenize ","tokens tokens each_slice  each_cons ","CodeRay  scan  each_cons ","SyntaxHighlighter  tokenize  each_cons ","tokens tokens each_slice  tokens tokens each_slice  each_slice ","CodeRay  scan  CodeRay  scan  each_slice ","SyntaxHighlighter  tokenize  SyntaxHighlighter  tokenize  each_slice ","tokens tokens each_slice  tokens tokens each_slice  ","CodeRay  scan  CodeRay  scan  ","SyntaxHighlighter  tokenize  SyntaxHighlighter  tokenize  ","tokens tokens each_slice  respond_to? ","CodeRay  scan  respond_to? ","SyntaxHighlighter  tokenize  respond_to? "]}," Pry Method super_using_ancestors":{"type":"method","name":"super_using_ancestors","children":[],"call":[" safe_send "," name ","ancestors [] ","(or\n  (send\n    (send\n      (lvar :ancestors) :[]\n      (lvar :i)) :method_defined?\n    (send nil :name))\n  (send\n    (send\n      (lvar :ancestors) :[]\n      (lvar :i)) :private_method_defined?\n    (send nil :name))) ! ","ancestors [] private_method_defined? ","ancestors [] method_defined? ","ancestors index + ","ancestors index ","times times "," owner ","next_owner instance_method ","(or\n  (send\n    (send\n      (lvar :ancestors) :[]\n      (lvar :ancestors index + )) :method_defancestors index + ned?\n    (send nancestors index + l :name))\n  (send\n    (send\n      (lvar :ancestors) :[]\n      (lvar :ancestors index + )) :prancestors index + vate_method_defancestors index + ned?\n    (send nancestors index + l :name))) ! ","ancestors [] prancestors index + vate_method_defancestors index + ned? ","ancestors [] method_defancestors index + ned? ","ancestors ancestors index + ndex + ","ancestors ancestors index + ndex ","tancestors index + mes tancestors index + mes ","ancestors []  instance_method "," owner  instance_method ","next_owner ancestors index + nstance_method "]}," Pry Method pry_doc_info":{"type":"method","name":"pry_doc_info","children":[],"call":[" raise "," mri? "," name ","Pry MethodInfo  info_for ","Pry  config has_pry_doc ","Pry  config ","Helpers Platform  mri? "," mri_19? "," mri_18? "]}," Pry Method comment":{"type":"method","name":"comment","children":[],"call":["Pry Code  from_file comment_describing "," source_line ","Pry Code  from_file "," source_file "]}," Pry Method method_missing":{"type":"method","name":"method_missing","children":[],"call":["@method send ","@method __send__ ","@method respond_to? "]}," Pry Method respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@method respond_to? "]}," Pry Method is_a?":{"type":"method","name":"is_a?","children":[],"call":["@method is_a? ","klass == "]}," Pry Method ==":{"type":"method","name":"==","children":[],"call":["@method == ","obj == ","obj is_a? ","other == ","other is_a? "]}," Pry Method alias?":{"type":"method","name":"alias?","children":[],"call":[" name != "," original_name "," name "]}," Pry Method aliases":{"type":"method","name":"aliases","children":[],"call":["alias_list map ","alias_list delete ","(send\n  (send\n    (lvar :all_methods_to_compare) :combination\n    (int 2)) :select) flatten ","owner instance_method == ","owner instance_method ","pair last ","pair first ","pair include? ","all_methods_to_compare combination select ","all_methods_to_compare combination ","owner instance_methods | ","owner private_instance_methods ","owner instance_methods ","@method name ","@method owner ","(send\n  (send\n    (send\n      (lvar :owner) :instance_methods) :combination\n    (int 2)) :select) flatten ","owner instance_methods combination select ","owner instance_methods combination ","(send\n  (send\n    (lvar :all_methods_to_compare) :combination\n    (int 2)) :select) flatten  map ","(send\n  (send\n    (send\n      (lvar :owner) :instance_methods) :combination\n    (int 2)) :select) flatten  map ","(send\n  (send\n    (lvar :all_methods_to_compare) :combination\n    (int 2)) :select) flatten  delete ","(send\n  (send\n    (send\n      (lvar :owner) :instance_methods) :combination\n    (int 2)) :select) flatten  delete ","(send\n  (send\n    (lvar :owner instance_methods | ) :combination\n    (int 2)) :select) flatten ","@method owner  instance_method == ","@method owner  instance_method ","owner instance_methods |  combination select ","owner instance_methods |  combination ","@method owner  instance_methods | ","@method owner  private_instance_methods ","@method owner  instance_methods ","@method @method name  ","@method @method owner  ","(send\n  (send\n    (send\n      (lvar :@method owner ) :instance_methods) :combination\n    (int 2)) :select) flatten ","@method owner  instance_methods combination select ","@method owner  instance_methods combination "]}," Pry Method pry_method?":{"type":"method","name":"pry_method?","children":[],"call":[" source_file == ","Pry  eval_path "," source_file "]}," Pry Method singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[" wrapped_owner singleton_class? "," wrapped_owner "]}," Pry Method bound_method?":{"type":"method","name":"bound_method?","children":[],"call":[" is_a? "]}," Pry Method unbound_method?":{"type":"method","name":"unbound_method?","children":[],"call":[" is_a? "]}," Pry Method dynamically_defined?":{"type":"method","name":"dynamically_defined?","children":[],"call":["(and\n  (send nil :source_file)\n  (send\n    (send nil :source_file) :=~\n    (regexp\n      (str \"(\\\\(.*\\\\))|<.*>\")\n      (regopt)))) ! ! ","(and\n  (send nil :source_file)\n  (send\n    (send nil :source_file) :=~\n    (regexp\n      (str \"(\\\\(.*\\\\))|<.*>\")\n      (regopt)))) ! "," source_file =~ "," source_file "]}," Pry Method original_name":{"type":"method","name":"original_name","children":[],"call":[" method_name_from_first_line "," source lines first "," source lines "," source "," source_type != "," source_type ","name to_s ","name is_a? ","b first == ","b first ","b is_a? ","tree each_cons ","RubyParser  new parse ","RubyParser  new ","first_line + "," require ","lst [] ","lst [] == ","tree flatten each ","tree flatten ","Ripper SexpBuilder  new parse ","Ripper SexpBuilder  new ","RUBY_ENGINE  == ","RUBY_VERSION  =~ ","first_line strip !~ ","first_line strip "," method_name_from_ source lines first  ","Ripper SexpBuilder  new parse  each_cons "," source lines first  + ","Ripper SexpBuilder  new parse  flatten each ","Ripper SexpBuilder  new parse  flatten "," source lines first  strip !~ "," source lines first  strip "]}," Pry Method super":{"type":"method","name":"super","children":[],"call":["Pry Method  new ","sup bind "," receiver "," super_using_ancestors ","Pry Method  resolution_order ","Pry Method  instance_resolution_order "," owner ","UnboundMethod  === ","@method is_a? "," respond_to? "," super_using_ancestors  bind ","  super_using_ancestors er_using_ancestors "]}," Pry Method signature":{"type":"method","name":"signature","children":[],"call":["args join "," name ","args []= ","args [] "," arity < "," arity ","(irange\n  (int 1)\n  (send\n    (send nil :arity) :abs)) map "," arity abs ","arr << ","name to_s ","arr size + ","arr size ","type == "," parameters inject "," parameters "," respond_to? ","nam to_s ","typ == ","args_array push ","args_array size + ","args_array size ","arg_type == "]}," Pry Method visibility":{"type":"method","name":"visibility","children":[],"call":["m to_s == "," name ","m to_s "," owner private_instance_methods any? "," owner private_instance_methods "," owner "," owner protected_instance_methods any? "," owner protected_instance_methods "," owner public_instance_methods any? "," owner public_instance_methods "]}," Pry Method source_range":{"type":"method","name":"source_range","children":[],"call":[" source_line + - "," source_line + "," source lines count "," source lines "," source "," source_line "," source_location nil? "," source_location "]}," Pry Method source_line":{"type":"method","name":"source_line","children":[],"call":[" source_location last "," source_location "," source_location nil? "]}," Pry Method source_file":{"type":"method","name":"source_file","children":[],"call":[" source_location first "," source_location ","info file "," pry_doc_info "," source_type == "," source_type "," rbx? ! "," rbx? "," source_location nil? ","Helpers BaseHelpers  rbx? ! ","Helpers BaseHelpers  rbx? "," pry_doc_info  file "," pry_doc_ pry_doc_info  "]}," Pry Method source_type":{"type":"method","name":"source_type","children":[],"call":[" source_location nil? "," source_location "," core? ","Helpers BaseHelpers  rbx? "]}," Pry Method doc":{"type":"method","name":"doc","children":[],"call":[" get_comment_content "," comment ","info docstring "," pry_doc_info "," source_type "," strip_leading_hash_and_whitespace_from_ruby_comments ","@method comment "," doc_for_pry_method "," pry_method? "," core_doc "," pry_method? ! ","Helpers BaseHelpers  rbx? "," rbx? "," raise "," core? "," pry_doc_info  docstring "," pry_doc_ pry_doc_info  "]}," Pry Method source?":{"type":"method","name":"source?","children":[],"call":[" source ! ! "," source ! "," source "]}," Pry Method redefine":{"type":"method","name":"redefine","children":[],"call":["Pry  Method "," owner instance_method "," name "," owner ","Patcher  new patch_in_ram ","Patcher  new "]}," Pry Method source":{"type":"method","name":"source","children":[],"call":[" ruby_source "," c_source "," source_type "," strip_leading_whitespace "," raise ","MethodSource SourceNotFoundError  new ","e message ","Pry Code  from_file expression_at ","Pry Code  from_file "," name_with_owner "," source_location "," strip_comments_from_c_code ","info source "," pry_doc_info ","@method source ","Pry  new r ","Pry  new "," proc ","StringIO  new ","Pry  line_buffer [] join ","Pry  line_buffer [] "," source_line ","Pry  line_buffer "," pry_method? "," core_code ","Pry Hooks  new "," core? ","Helpers BaseHelpers  rbx? ","Pry Code  retrieve_complete_expression_from "," pry_method? ! "," strip_comments_from_c_Pry Code  from_file expression_at  "," strip_comments_from_c_ strip_comments_from_c_code  "," strip_comments_from_c_@method source  "," strip_comments_from_c_Pry  new r  "," strip_comments_from_c_ core_code  "," strip_comments_from_c_Pry Code  retrieve_complete_expression_from  "," pry_doc_info  source "," pry_doc_ pry_doc_info  "," core_Pry Code  from_file expression_at  "," core_ strip_comments_from_c_code  "," core_@method source  "," core_Pry  new r  "," core_ core_code  "," core_Pry Code  retrieve_complete_expression_from  "]}," Pry Method name_with_owner":{"type":"method","name":"name_with_owner","children":[],"call":[" name "," wrapped_owner method_prefix "," wrapped_owner "]}," Pry Method undefined?":{"type":"method","name":"undefined?","children":[],"call":[]}," Pry Method wrapped":{"type":"method","name":"wrapped","children":[],"call":[]}," Pry Method wrapped_owner":{"type":"method","name":"wrapped_owner","children":[],"call":["Pry WrappedModule  new "," owner "]}," Pry Method name":{"type":"method","name":"name","children":[],"call":["@method name to_s ","@method name "]}," Pry Method initialize":{"type":"method","name":"initialize","children":[],"call":["known_info [] "]}," Pry Method singleton_class_of":{"type":"method","name":"singleton_class_of","children":[],"call":["obj class "]}," Pry Method singleton_class_resolution_order":{"type":"method","name":"singleton_class_resolution_order","children":[],"call":["resolution_order reverse uniq reverse - ","Class  included_modules ","resolution_order reverse uniq reverse ","resolution_order reverse uniq ","resolution_order reverse ","(send\n  (send\n    (lvar :ancestors) :grep\n    (const nil :Class)) :map) flatten "," singleton_class_of included_modules "," singleton_class_of ","ancestors grep map ","ancestors grep ","Pry Method  safe_send ","ancestors grep flat_map ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact flatten ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact ","(send nil :singleton_class\n  (lvar :anc)) + "," singleton_class included_modules "," singleton_class ","anc is_a? ","klass ancestors map ","klass ancestors ","(send\n  (send\n    (lvar :ancestors) :grep\n    (const nil :Class)) :map) flatten  reverse uniq reverse - ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact flatten  reverse uniq reverse - ","(send\n  (send\n    (lvar :ancestors) :grep\n    (const nil :Class)) :map) flatten  reverse uniq reverse ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact flatten  reverse uniq reverse ","(send\n  (send\n    (lvar :ancestors) :grep\n    (const nil :Class)) :map) flatten  reverse uniq ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact flatten  reverse uniq ","(send\n  (send\n    (lvar :ancestors) :grep\n    (const nil :Class)) :map) flatten  reverse ","(send\n  (send\n    (lvar :klass) :ancestors) :map) compact flatten  reverse ","(send\n  (send\n    (lvar :Pry Method  safe_send ) :grep\n    (const nil :Class)) :map) flatten ","Pry Method  safe_send  grep map ","Pry Method  safe_send  grep ","Pry Method  safe_send  grep flat_map ","(send\n  (send\n    (lvar :klass) :Pry Method  safe_send ) :map) compact flatten ","(send\n  (send\n    (lvar :klass) :Pry Method  safe_send ) :map) compact ","klass Pry Method  safe_send  map ","klass Pry Method  safe_send  "]}," Pry Method instance_method_definition?":{"type":"method","name":"instance_method_definition?","children":[],"call":["(str \"^define_method\\\\(?\\\\s*[:\\\\\\\"\\\\']\") =~ ","definition_line strip ","Regexp  escape ","regexp =~ "]}," Pry Method singleton_method_definition?":{"type":"method","name":"singleton_method_definition?","children":[],"call":["(str \"^define_singleton_method\\\\(?\\\\s*[:\\\\\\\"\\\\']\") =~ ","definition_line strip ","Regexp  escape ","regexp =~ "]}," Pry Method method_definition?":{"type":"method","name":"method_definition?","children":[],"call":[" instance_method_definition? "," singleton_method_definition? "]}," Pry Method instance_resolution_order":{"type":"method","name":"instance_resolution_order","children":[],"call":["(send\n  (array\n    (lvar :klass)) :+\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (lvar :klass)\n    (sym :ancestors))) uniq ","(lvar :klass) + ","Pry Method  safe_send ","(send\n  (array\n    (lvar :klass)) :+\n  (send\n    (lvar :klass) :ancestors)) uniq ","klass ancestors "]}," Pry Method resolution_order":{"type":"method","name":"resolution_order","children":[],"call":[" instance_resolution_order ","obj class "," singleton_class_of "," singleton_class_resolution_order + "," singleton_class_resolution_order ","Class  === "," singleton_class "]}," Pry Method all_from_common":{"type":"method","name":"all_from_common","children":[],"call":[" all_from_obj ","(send\n  (array\n    (str \"public\")\n    (str \"protected\")\n    (str \"private\")) :map) flatten "," new ","visibility to_sym "," safe_send "," safe_send map ","(str \"public\") map "]}," Pry Method all_from_obj":{"type":"method","name":"all_from_obj","children":[],"call":[" all_from_class "," singleton_class_of "," all_from_common "]}," Pry Method all_from_class":{"type":"method","name":"all_from_class","children":[],"call":["(send\n  (array\n    (str \"public\")\n    (str \"protected\")\n    (str \"private\")) :map) flatten "," new ","visibility to_sym "," safe_send "," safe_send map ","(str \"public\") map ","(str \"public\") flat_map "," all_from_common "]}," Pry Method from_obj":{"type":"method","name":"from_obj","children":[],"call":[" new "," lookup_method_via_binding "," safe_send ","obj method "]}," Pry Method from_class":{"type":"method","name":"from_class","children":[],"call":[" new "," lookup_method_via_binding "," safe_send ","klass instance_method "]}," Pry Method lookup_method_via_binding":{"type":"method","name":"lookup_method_via_binding","children":[],"call":["Pry  current []= ","Pry  current ","target eval ","obj is_a? "]}," Pry Method from_binding":{"type":"method","name":"from_binding","children":[],"call":["WeirdMethodLocator  new get_method ","WeirdMethodLocator  new ","WeirdMethodLocator  weird_method? ","Disowned  new ","meth_name to_s ","b eval "," new ","Kernel  instance_method bind call ","Kernel  instance_method bind ","Kernel  instance_method ","Object  === ","(sym :__script__) include? ","WeirdMethodLocator  new find_method ","binding eval ","guess super ","guess source_range include? ","guess source_range ","File  expand_path == ","File  expand_path ","guess source_file ","meth_name to_s inspect ","b eval  to_s ","binding eval  to_s ","guess super  super ","guess super  source_range include? ","guess super  source_range ","guess super  source_file ","b eval  to_s inspect ","binding eval  to_s inspect "]}," Pry Method from_str":{"type":"method","name":"from_str","children":[],"call":[" from_str "," from_obj ","target eval ","options [] "," from_module ","name to_s =~ ","name to_s ","name nil? ","Regexp  last_match "," from_binding "]}," Pry Method":{"type":"method","name":"Method","children":[],"call":["Pry Method  new ","obj is_a? "]}," Pry Method WeirdMethodLocator all_methods_for":{"type":"method","name":"all_methods_for","children":[],"call":["obj public_methods + + ","obj protected_methods ","obj public_methods + ","obj private_methods ","obj public_methods "]}," Pry Method WeirdMethodLocator lines_for_file":{"type":"method","name":"lines_for_file","children":[],"call":["File  readlines ","Pry  line_buffer ","Pry  eval_path == ","Pry  eval_path ","@lines_for_file [] "]}," Pry Method WeirdMethodLocator valid_file?":{"type":"method","name":"valid_file?","children":[],"call":["Pry  eval_path == ","Pry  eval_path ","File  directory? ! ","File  directory? ","File  exists? ","File  exist? "]}," Pry Method WeirdMethodLocator index_to_line_number":{"type":"method","name":"index_to_line_number","children":[],"call":["index + "," pry_file? "]}," Pry Method WeirdMethodLocator renamed_method_source_location":{"type":"method","name":"renamed_method_source_location","children":[],"call":[" index_to_line_number "," target_file ","Pry Method  method_definition? "," method name "," method "," lines_for_file [] rindex "," lines_for_file [] "," target_line - "," target_line "," lines_for_file "]}," Pry Method WeirdMethodLocator expanded_source_location":{"type":"method","name":"expanded_source_location","children":[],"call":["sl last ","File  expand_path ","sl first "," pry_file? ","sl ! ","source_location last ","source_location first "]}," Pry Method WeirdMethodLocator find_renamed_method":{"type":"method","name":"find_renamed_method","children":[],"call":["Pry  Method "," target_self method "," target_self "," expanded_source_location == "," renamed_method_source_location "," expanded_source_location "," target_self method source_location "," all_methods_for find "," all_methods_for "," valid_file? ! "," valid_file? "," target_file "," expanded_source_ target_self method source_location  == "," renamed_method_source_ target_self method source_location  "," expanded_source_ target_self method source_location  "," target_self method source_ target_self method source_location  "]}," Pry Method WeirdMethodLocator find_method_in_superclass":{"type":"method","name":"find_method_in_superclass","children":[],"call":["guess super "," normal_method? "," method ","guess != "," skip_superclass_search? ","guess == ","guess super  super "," method  super ","guess super  != "," method  != ","guess super  == "," method  == "]}," Pry Method WeirdMethodLocator pry_file?":{"type":"method","name":"pry_file?","children":[],"call":["Pry  eval_path == "," target eval "," target ","Pry  eval_path "," target source_location first "," target source_location "," target respond_to? "]}," Pry Method WeirdMethodLocator target_line":{"type":"method","name":"target_line","children":[],"call":[" target eval "," target "," target source_location last "," target source_location "," target respond_to? "]}," Pry Method WeirdMethodLocator target_file":{"type":"method","name":"target_file","children":[],"call":["File  expand_path "," target eval "," target "," pry_file? "," target source_location first "," target source_location "," target respond_to? "," pry_ target eval ? "," pry_ target source_location first ? "]}," Pry Method WeirdMethodLocator target_self":{"type":"method","name":"target_self","children":[],"call":[" target eval "," target "]}," Pry Method WeirdMethodLocator normal_method?":{"type":"method","name":"normal_method?","children":[],"call":[" class normal_method? "," target "," class ","method source_range include? ","b eval ","method source_range ","File  expand_path == ","File  expand_path ","method source_file ","binding eval ","binding source_location ","binding respond_to? "]}," Pry Method WeirdMethodLocator lost_method?":{"type":"method","name":"lost_method?","children":[],"call":["(and\n  (send\n    (send nil :get_method) :nil?)\n  (send nil :renamed_method_source_location)) ! ! ","(and\n  (send\n    (send nil :get_method) :nil?)\n  (send nil :renamed_method_source_location)) ! "," renamed_method_source_location "," get_method nil? "," get_method ","(and\n  (send\n    (send nil :find_method) :nil?)\n  (send nil :renamed_method_source_location)) ! ! ","(and\n  (send\n    (send nil :find_method) :nil?)\n  (send nil :renamed_method_source_location)) ! "," find_method nil? "," find_method "]}," Pry Method WeirdMethodLocator get_method":{"type":"method","name":"get_method","children":[],"call":[" find_renamed_method "," find_method_in_superclass "]}," Pry Method WeirdMethodLocator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Method WeirdMethodLocator weird_method?":{"type":"method","name":"weird_method?","children":[],"call":[" normal_method? ! "," normal_method? "]}," Pry Method Patcher wrap_for_nesting":{"type":"method","name":"wrap_for_nesting","children":[],"call":["(send\n  (send\n    (send\n      (lvar :nesting) :+\n      (array\n        (lvar :source))) :+\n    (block\n      (send\n        (lvar :nesting) :map)\n      (args)\n      (str \"end\"))) :+\n  (array\n    (str \"\"))) join ","nesting + + + ","nesting + + ","nesting map ","nesting + ","Pry Code  from_file nesting_at "," method source_line "," method ","Pry Code  from_file "," method source_file ","(send\n  (send\n    (send\n      (lvar :Pry Code  from_file nesting_at ) :+\n      (array\n        (lvar :source))) :+\n    (block\n      (send\n        (lvar :Pry Code  from_file nesting_at ) :map)\n      (args)\n      (str \"end\"))) :+\n  (array\n    (str \"\"))) join ","Pry Code  from_file nesting_at  + + + ","Pry Code  from_file nesting_at  + + ","Pry Code  from_file nesting_at  map ","Pry Code  from_file nesting_at  + ","Pry Code  from_file Pry Code  from_file nesting_at _at "]}," Pry Method Patcher wrap_for_owner":{"type":"method","name":"wrap_for_owner","children":[],"call":[" method name to_sym inspect "," method name to_sym "," method name "," method "," method visibility to_s "," method visibility "," definition_for_owner ","Pry  current []= "," method owner ","Pry  current "]}," Pry Method Patcher wrap":{"type":"method","name":"wrap","children":[],"call":[" wrap_for_nesting "," wrap_for_owner "]}," Pry Method Patcher definition_for_owner":{"type":"method","name":"definition_for_owner","children":[],"call":[" raise "," method original_name "," method ","line =~ ","Regexp  escape "]}," Pry Method Patcher with_method_transaction":{"type":"method","name":"with_method_transaction","children":[],"call":["method send "," alias_method ","method original_name ","method name ","method owner class_eval ","method owner "," method "," method original_name "," method  send "," alias_ method  "," method  original_name "," method  name "," method  owner class_eval "," method  owner ","  method  ","  method  original_name "]}," Pry Method Patcher cache_key":{"type":"method","name":"cache_key","children":[],"call":[" method name "," method "," method owner object_id to_s "," method owner object_id "," method owner "]}," Pry Method Patcher redefine":{"type":"method","name":"redefine","children":[],"call":["TOPLEVEL_BINDING  eval "," cache_key "," wrap ","@@source_cache []= "]}," Pry Method Patcher patch_in_ram":{"type":"method","name":"patch_in_ram","children":[],"call":[" redefine "," with_method_transaction "," method alias? "," method "]}," Pry Method Patcher code_for":{"type":"method","name":"code_for","children":[],"call":[]}," Pry Method Patcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Method Disowned method_missing":{"type":"method","name":"method_missing","children":[],"call":["Object  instance_method bind call ","Object  instance_method bind ","Object  instance_method "," raise "," method respond_to? "," method ","method call ","Object  instance_Object  instance_method bind  bind call ","Object  instance_Object  instance_method bind  bind ","Object  instance_Object  instance_method bind  "," Object  instance_method bind  respond_to? "," Object  instance_method bind  ","Object  instance_method bind  call "]}," Pry Method Disowned owner":{"type":"method","name":"owner","children":[],"call":[" receiver "]}," Pry Method Disowned source?":{"type":"method","name":"source?","children":[],"call":[]}," Pry Method Disowned undefined?":{"type":"method","name":"undefined?","children":[],"call":[]}," Pry Method Disowned initialize":{"type":"method","name":"initialize","children":[],"call":[]}," LastException inc_bt_index":{"type":"method","name":"inc_bt_index","children":[],"call":["(send\n  (ivar :@bt_index) :+\n  (int 1)) % "," backtrace size "," backtrace ","@bt_index + ","(send\n  (ivar :(send\n  (ivar :@bt_index) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@bt_index) :+\n  (int 1)) %  + "]}," LastException bt_source_location_for":{"type":"method","name":"bt_source_location_for","children":[],"call":["2 to_i "," backtrace [] =~ "," backtrace [] "," backtrace "]}," LastException wrapped_exception":{"type":"method","name":"wrapped_exception","children":[],"call":[]}," LastException line":{"type":"method","name":"line","children":[],"call":[]}," LastException file":{"type":"method","name":"file","children":[],"call":[]}," LastException respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@e respond_to? "]}," LastException method_missing":{"type":"method","name":"method_missing","children":[],"call":["@e public_send ","@e respond_to? "]}," LastException initialize":{"type":"method","name":"initialize","children":[],"call":[" bt_source_location_for "]}," Pry InputLock interruptible_region":{"type":"method","name":"interruptible_region","children":[],"call":[" leave_interruptible_region "," sleep ","block call "," enter_interruptible_region "]}," Pry InputLock leave_interruptible_region":{"type":"method","name":"leave_interruptible_region","children":[],"call":["@cond broadcast ","@owners last == ","Thread  current ","@owners last ","@mutex synchronize "]}," Pry InputLock enter_interruptible_region":{"type":"method","name":"enter_interruptible_region","children":[],"call":["@cond wait ","@owners last == ","Thread  current ","@owners last ","@mutex synchronize "]}," Pry InputLock with_ownership":{"type":"method","name":"with_ownership","children":[],"call":[" __with_ownership ","block call ","@owners include? ","Thread  current ","@mutex synchronize "]}," Pry InputLock __with_ownership":{"type":"method","name":"__with_ownership","children":[],"call":["@cond broadcast ","@owners delete ","Thread  current ","@mutex synchronize ","block call ","@owners << ","@cond wait ","@owners last raise ","@owners last "]}," Pry InputLock initialize":{"type":"method","name":"initialize","children":[],"call":["ConditionVariable  new ","Mutex  new "]}," Pry InputLock for":{"type":"method","name":"for","children":[],"call":[]}," InputCompleter build_path":{"type":"method","name":"build_path","children":[],"call":["i nil? ! ","i nil? ","contexts [] push join ","contexts [] push ","contexts [] "," proc ","input chomp split ","input chomp ","input end_with? ","i to_s ","input [] ","contexts [] contexts [] push join ush join ","input chomp split  [] push join ","contexts [] contexts [] push join ush ","input chomp split  [] push ","input chomp split  [] "," contexts [] push join roc ","incontexts [] push join ut chomcontexts [] push join  scontexts [] push join lit ","contexts []  chomp split ","incontexts [] push join ut chomcontexts [] push join  ","contexts []  chomp ","incontexts [] push join ut end_with? ","contexts []  end_with? ","incontexts [] push join ut [] ","contexts []  [] "]}," InputCompleter select_message":{"type":"method","name":"select_message","children":[],"call":["(send\n  (send\n    (lvar :candidates) :grep\n    (regexp\n      (str \"^\")\n      (begin\n        (lvar :message))\n      (regopt))) :collect) compact ","path call ","receiver + << ","receiver + ","candidates grep collect ","candidates grep "]}," InputCompleter call":{"type":"method","name":"call","children":[],"call":["candidates collect ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","Regexp  quote ","candidates | | ","candidates | "," eval collect "," eval "," select_message ","String  instance_methods collect ","String  instance_methods ","candidates uniq! ","candidates sort! ","candidates concat ","m instance_methods collect ","m instance_methods ","m respond_to? ","name != ","m name to_s ","m name ","ObjectSpace  each_object ","(str \"\\\\.\") !~ ","(send\n  (send\n    (lvar :gv) :|\n    (lvar :lv)) :|\n  (lvar :cv)) include? ","gv | | ","gv | "," global_variables collect grep "," global_variables collect "," global_variables ","Regexp  new "," eval methods collect "," eval methods ","Symbol  instance_methods collect ","Symbol  instance_methods ","receiver + + ","receiver + ","candidates grep collect ","candidates grep ","context constants collect ","context constants ","context class ","context respond_to? ","target eval ",":: << ","Object  constants collect ","Object  constants ",": << ","s id2name ","Symbol  all_symbols collect ","Symbol  all_symbols ","Symbol  respond_to? ","Hash  instance_methods collect ","Hash  instance_methods ","Proc  instance_methods collect ","Proc  instance_methods ","Array  instance_methods collect ","Array  instance_methods ","Regexp  instance_methods collect ","Regexp  instance_methods ","options [] ","Pry ObjectPath  new resolve last ","Pry ObjectPath  new resolve ","Pry ObjectPath  new ","@pry binding_stack ","path call ","path call empty? "," build_path ","receiver << << ","receiver << ","candidates sort ","candidates merge ","to_ignore include? "," ignored_modules ","Set  new "," require ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  collect "," eval collect  collect ","String  instance_methods collect  collect "," global_variables collect grep  collect "," eval methods collect  collect ","Symbol  instance_methods collect  collect "," eval  collect ","candidates grep collect  collect ","context constants collect  collect ","Object  constants collect  collect ","Proc  instance_methods collect  collect ","Array  instance_methods collect  collect ","Regexp  instance_methods collect  collect ","Set  new  collect ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :String  instance_methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : global_variables collect grep ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Symbol  instance_methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :candidates grep collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :context constants collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Object  constants collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Proc  instance_methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Array  instance_methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Regexp  instance_methods collect ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Set  new ) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    ( eval collect ar :candidates) :|\n    (const nil :ReservedWords)) :|\n  ( eval collect ar :custom_completions)) grep ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  | | "," eval collect  | | ","String  instance_methods collect  | | "," global_variables collect grep  | | "," eval methods collect  | | ","Symbol  instance_methods collect  | | "," eval  | | ","candidates grep collect  | | ","context constants collect  | | ","Object  constants collect  | | ","Proc  instance_methods collect  | | ","Array  instance_methods collect  | | ","Regexp  instance_methods collect  | | ","Set  new  | | ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  | "," eval collect  | ","String  instance_methods collect  | "," global_variables collect grep  | "," eval methods collect  | ","Symbol  instance_methods collect  | "," eval  | ","candidates grep collect  | ","context constants collect  | ","Object  constants collect  | ","Proc  instance_methods collect  | ","Array  instance_methods collect  | ","Regexp  instance_methods collect  | ","Set  new  | "," select_Regexp  quote  ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  uniq! "," eval collect  uniq! ","String  instance_methods collect  uniq! "," global_variables collect grep  uniq! "," eval methods collect  uniq! ","Symbol  instance_methods collect  uniq! "," eval  uniq! ","candidates grep collect  uniq! ","context constants collect  uniq! ","Object  constants collect  uniq! ","Proc  instance_methods collect  uniq! ","Array  instance_methods collect  uniq! ","Regexp  instance_methods collect  uniq! ","Set  new  uniq! ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  sort! "," eval collect  sort! ","String  instance_methods collect  sort! "," global_variables collect grep  sort! "," eval methods collect  sort! ","Symbol  instance_methods collect  sort! "," eval  sort! ","candidates grep collect  sort! ","context constants collect  sort! ","Object  constants collect  sort! ","Proc  instance_methods collect  sort! ","Array  instance_methods collect  sort! ","Regexp  instance_methods collect  sort! ","Set  new  sort! ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  concat "," eval collect  concat ","String  instance_methods collect  concat "," global_variables collect grep  concat "," eval methods collect  concat ","Symbol  instance_methods collect  concat "," eval  concat ","candidates grep collect  concat ","context constants collect  concat ","Object  constants collect  concat ","Proc  instance_methods collect  concat ","Array  instance_methods collect  concat ","Regexp  instance_methods collect  concat ","Set  new  concat ","m name to_s  != ","m m name to_s  to_s ","m m name to_s  ","(send\n  (send\n    (lvar :gv) :|\n    (lvar :lv)) :|\n  (lvar : eval collect )) include? ","(send\n  (send\n    ( eval collect ar :gv) :|\n    ( eval collect ar : eval collect )) :|\n  ( eval collect ar :cv)) include? ","(send\n  (send\n    (lvar : eval collect ) :|\n    (lvar :lv)) :|\n  (lvar :cv)) include? ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  grep collect "," eval collect  grep collect ","String  instance_methods collect  grep collect "," global_variables collect grep  grep collect "," eval methods collect  grep collect ","Symbol  instance_methods collect  grep collect "," eval  grep collect ","candidates grep collect  grep collect ","context constants collect  grep collect ","Object  constants collect  grep collect ","Proc  instance_methods collect  grep collect ","Array  instance_methods collect  grep collect ","Regexp  instance_methods collect  grep collect ","Set  new  grep collect ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  grep "," eval collect  grep ","String  instance_methods collect  grep "," global_variables collect grep  grep "," eval methods collect  grep ","Symbol  instance_methods collect  grep "," eval  grep ","candidates grep collect  grep ","context constants collect  grep ","Object  constants collect  grep ","Proc  instance_methods collect  grep ","Array  instance_methods collect  grep ","Regexp  instance_methods collect  grep ","Set  new  grep ","context class  constants collect ","target eval  constants collect ","context class  constants ","target eval  constants ","context class  class ","target eval  class ","context class  respond_to? ","target eval  respond_to? ","options []  eval ","Pry ObjectPath  new resolve last  eval ","s id2m name to_s  ","Symbol  all_Regexp  quote bols collect ","Symbol  all_Regexp  quote bols ","Pry ObjectPath  new reso eval collect e last ","Pry ObjectPath  new reso eval collect e ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  sort "," eval collect  sort ","String  instance_methods collect  sort "," global_variables collect grep  sort "," eval methods collect  sort ","Symbol  instance_methods collect  sort "," eval  sort ","candidates grep collect  sort ","context constants collect  sort ","Object  constants collect  sort ","Proc  instance_methods collect  sort ","Array  instance_methods collect  sort ","Regexp  instance_methods collect  sort ","Set  new  sort ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :ReservedWords)) :|\n  (lvar :custom_completions)) grep  merge "," eval collect  merge ","String  instance_methods collect  merge "," global_variables collect grep  merge "," eval methods collect  merge ","Symbol  instance_methods collect  merge "," eval  merge ","candidates grep collect  merge ","context constants collect  merge ","Object  constants collect  merge ","Proc  instance_methods collect  merge ","Array  instance_methods collect  merge ","Regexp  instance_methods collect  merge ","Set  new  merge "," ignored_modules  include? "]}," InputCompleter initialize":{"type":"method","name":"initialize","children":[],"call":["@input completion_append_character= ","@input respond_to? ","@input basic_word_break_characters= "]}," Pry Indent correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":[" colorize_code ","Pry Helpers BaseHelpers  windows_ansi? ","(if\n  (send\n    (lvar :cols) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :line_to_measure) :length) :/\n        (lvar :cols)) :+\n      (int 1)))\n  (int 1)) to_i ","line_to_measure length / + ","line_to_measure length / ","line_to_measure length ","cols != ","cols to_i ","Terminal  screen_size ","  * ","Pry Helpers Text  strip_color << ","Pry Helpers Text  strip_color ","prompt delete ","Helpers Platform  windows_ansi? ","(send\n  (send\n    (send\n      (lvar :line_to_measure) :length) :/\n    (lvar :cols)) :+\n  (int 1)) to_i ","cols == ","Terminal  width! ","@pry_instance output width ","@pry_instance output ","full_line length / + ","full_line length / ","full_line length "," screen_size ","prompt + ","TerminalInfo  screen_size ","ENV  [] to_i ","ENV  [] ","ENV  [] != ","Readline  get_screen_size ","Readline  respond_to? ","CodeRay  scan term ","CodeRay  scan ","$stdout winsize ","$stdout tty? ","$stdout respond_to? ","cols to_i != ","(if\n  (send\n    (lvar :cols to_i ) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :line_to_measure) :length) :/\n        (lvar :cols to_i )) :+\n      (int 1)))\n  (int 1)) to_i ","(if\n  (send\n    (lvar :Terminal  width! ) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :line_to_measure) :length) :/\n        (lvar :Terminal  width! )) :+\n      (int 1)))\n  (int 1)) to_i ","(if\n  (send\n    (lvar :@pry_instance output width ) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :line_to_measure) :length) :/\n        (lvar :@pry_instance output width )) :+\n      (int 1)))\n  (int 1)) to_i ","(if\n  (send\n    (lvar :ENV  [] to_i ) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :line_to_measure) :length) :/\n        (lvar :ENV  [] to_i )) :+\n      (int 1)))\n  (int 1)) to_i ","(if\n  (send\n    (lvar :cols) :!=\n    (int 0))\n  (begin\n    (send\n      (send\n        (send\n          (lvar :Pry Helpers Text  strip_color << ) :length) :/\n        (lvar :cols)) :+\n      (int 1)))\n  (int 1)) to_i ","Pry Helpers Text  strip_color <<  length / + ","Pry Helpers Text  strip_color <<  length / ","Pry Helpers Text  strip_color <<  length ","cols to_i  != ","Terminal  width!  != ","@pry_instance output width  != ","ENV  [] to_i  != ","cols to_i  to_i ","Terminal  width!  to_i ","@pry_instance output width  to_i ","ENV  [] to_i  to_i ","prompt delete  delete ","(send\n  (send\n    (send\n      (lvar :line_to_measure) :length) :/\n    (lvar :cols to_i )) :+\n  (int 1)) to_i ","(send\n  (send\n    (send\n      (lvar :line_to_measure) :length) :/\n    (lvar :Terminal  width! )) :+\n  (int 1)) to_i ","(send\n  (send\n    (send\n      (lvar :line_to_measure) :length) :/\n    (lvar :@pry_instance output width )) :+\n  (int 1)) to_i ","(send\n  (send\n    (send\n      (lvar :line_to_measure) :length) :/\n    (lvar :ENV  [] to_i )) :+\n  (int 1)) to_i ","(send\n  (send\n    (send\n      (lvar :Pry Helpers Text  strip_color << ) :length) :/\n    (lvar :cols)) :+\n  (int 1)) to_i ","cols to_i  == ","Terminal  width!  == ","@pry_instance output width  == ","ENV  [] to_i  == ","prompt +  length / + ","prompt +  length / ","prompt +  length ","prompt delete  + ","cols to_i  to_i != ","Terminal  width!  to_i != ","@pry_instance output width  to_i != ","ENV  [] to_i  to_i != "]}," Pry Indent module_nesting":{"type":"method","name":"module_nesting","children":[],"call":[" raise ","@module_nesting inspect ","token nil? ","@module_nesting map "]}," Pry Indent track_module_nesting_end":{"type":"method","name":"track_module_nesting_end","children":[],"call":["@module_nesting pop ","token == ","kind == ","(str \"class\") include? "]}," Pry Indent track_module_nesting":{"type":"method","name":"track_module_nesting","children":[],"call":["@module_nesting last []= ","@module_nesting last ","kind == ","token =~ ","@module_nesting last [] == ","@module_nesting last [] ","token == ","@module_nesting << ","(str \"class\") include? "]}," Pry Indent open_delimiters_line":{"type":"method","name":"open_delimiters_line","children":[],"call":[" open_delimiters join "," open_delimiters "]}," Pry Indent open_delimiters":{"type":"method","name":"open_delimiters","children":[],"call":["@heredoc_queue + ","(ivar :@string_start) compact "]}," Pry Indent track_delimiter":{"type":"method","name":"track_delimiter","children":[],"call":["@heredoc_queue shift ","@close_heredocs [] ","@heredoc_queue first ","@close_heredocs []= ","@heredoc_queue << "]}," Pry Indent tokenize":{"type":"method","name":"tokenize","children":[],"call":["tokens to_a ","tokens tokens each_slice ","tokens tokens ","tokens respond_to? ","CodeRay  scan ","SyntaxHighlighter  tokenize ","tokens tokens each_slice  to_a ","CodeRay  scan  to_a ","SyntaxHighlighter  tokenize  to_a ","tokens tokens each_slice  tokens tokens each_slice  each_slice ","CodeRay  scan  CodeRay  scan  each_slice ","SyntaxHighlighter  tokenize  SyntaxHighlighter  tokenize  each_slice ","tokens tokens each_slice  tokens tokens each_slice  ","CodeRay  scan  CodeRay  scan  ","SyntaxHighlighter  tokenize  SyntaxHighlighter  tokenize  ","tokens tokens each_slice  respond_to? ","CodeRay  scan  respond_to? ","SyntaxHighlighter  tokenize  respond_to? "]}," Pry Indent in_string?":{"type":"method","name":"in_string?","children":[],"call":[" open_delimiters empty? ! "," open_delimiters empty? "," open_delimiters "]}," Pry Indent end_of_statement?":{"type":"method","name":"end_of_statement?","children":[],"call":["STATEMENT_END_TOKENS  include? ","last_token =~ "]}," Pry Indent indentation_delta":{"type":"method","name":"indentation_delta","children":[],"call":["add_after == ","MIDWAY_TOKENS  include? "," track_module_nesting_end ","@stack pop ","token == ","OPEN_TOKENS  [] ","@stack last ","@stack << ","is_singleline_if ! ","is_optional_do ! ","OPEN_TOKENS  keys include? ","OPEN_TOKENS  keys "," track_delimiter ","kind == ","seen_for_at << ","OPTIONAL_DO_TOKENS  include? "," track_module_nesting ","IGNORE_TOKENS  include? ","seen_for_at include? ","add_after - "," end_of_statement? ","SINGLELINE_TOKENS  include? ","tokens each ","OPEN_TOKENS  key? "]}," Pry Indent current_prefix":{"type":"method","name":"current_prefix","children":[],"call":[" indent_level "," in_string? "]}," Pry Indent indent":{"type":"method","name":"indent","children":[],"call":["prefix + ","line lstrip ","SPACES  * ","prefix sub! ","before times "," indentation_delta "," tokenize ","(and\n  (send\n    (const nil :String) :===\n    (lvar :token))\n  (send\n    (lvar :token) :include?\n    (str \"\\n\"))) ! ","token include? ","String  === ","tokens drop_while "," open_delimiters_line "," in_string? ","input lines each ","input lines "," indent_level ","(and\n  (send\n    (lvar :token) :is_a?\n    (const nil :String))\n  (send\n    (lvar :token) :include?\n    (str \"\\n\"))) ! ","token is_a? ","output gsub ","line rstrip + ","line rstrip ","prefix + + ","line strip ","tokens tokens each_slice ","tokens tokens ","tokens respond_to? ","CodeRay  scan ","OPEN_TOKENS  keys "," indent_level  + ","prefix +  lstrip ","line rstrip +  lstrip "," indent_level  sub! "," tokenize  drop_while ","tokens tokens each_slice  drop_while ","CodeRay  scan  drop_while "," open_delimiters_prefix +  "," open_delimiters_line rstrip +  ","input prefix + s each ","input line rstrip + s each ","input prefix + s ","input line rstrip + s ","prefix +  rstrip + ","line rstrip +  rstrip + ","prefix +  rstrip ","line rstrip +  rstrip "," indent_level  + + ","prefix +  strip ","line rstrip +  strip "," tokenize   tokenize  each_slice ","tokens tokens each_slice  tokens tokens each_slice  each_slice ","CodeRay  scan  CodeRay  scan  each_slice "," tokenize   tokenize  ","tokens tokens each_slice  tokens tokens each_slice  ","CodeRay  scan  CodeRay  scan  "," tokenize  respond_to? ","tokens tokens each_slice  respond_to? ","CodeRay  scan  respond_to? "]}," Pry Indent reset":{"type":"method","name":"reset","children":[],"call":["String  new "]}," Pry Indent initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Pry Indent nesting_at":{"type":"method","name":"nesting_at","children":[],"call":[]}," Pry Hooks hook_exists?":{"type":"method","name":"hook_exists?","children":[],"call":["(and\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event_name))\n  (block\n    (send\n      (send\n        (ivar :@hooks) :[]\n        (lvar :event_name)) :find)\n    (args\n      (arg :name)\n      (arg :_))\n    (send\n      (lvar :name) :==\n      (lvar :hook_name)))) ! ! ","(and\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event_name))\n  (block\n    (send\n      (send\n        (ivar :@hooks) :[]\n        (lvar :event_name)) :find)\n    (args\n      (arg :name)\n      (arg :_))\n    (send\n      (lvar :name) :==\n      (lvar :hook_name)))) ! ","name == ","@hooks [] find ","@hooks [] ","@hooks [] map include? ","@hooks [] map ","event_name to_s ","(send\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event_name)) :find) ! ! ","(send\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event_name)) :find) ! "]}," Pry Hooks clear_all":{"type":"method","name":"clear_all","children":[],"call":[]}," Pry Hooks delete_hooks":{"type":"method","name":"delete_hooks","children":[],"call":["@hooks []= "]}," Pry Hooks delete_hook":{"type":"method","name":"delete_hook","children":[],"call":["current_hook_name == ","@hooks [] delete_if ","@hooks [] ","event_name to_s "]}," Pry Hooks get_hooks":{"type":"method","name":"get_hooks","children":[],"call":["Hash  [] ","@hooks [] ","event_name to_s "]}," Pry Hooks get_hook":{"type":"method","name":"get_hook","children":[],"call":["hook last ","current_hook_name == ","@hooks [] find ","@hooks [] ","event_name to_s "]}," Pry Hooks hook_count":{"type":"method","name":"hook_count","children":[],"call":["@hooks [] size ","@hooks [] ","event_name to_s "]}," Pry Hooks exec_hook":{"type":"method","name":"exec_hook","children":[],"call":["(send\n  (send\n    (ivar :@hooks) :[]\n    (lvar :event_name)) :map) last "," errors << "," errors ","callable call ","@hooks [] map ","@hooks [] ","(send\n  (send\n    (ivar :@hooks) :[]\n    (send\n      (lvar :event_name) :to_s)) :map) last ","event_name to_s ","Pry Helpers BaseHelpers  silence_warnings "]}," Pry Hooks add_hook":{"type":"method","name":"add_hook","children":[],"call":["@hooks [] << ","@hooks [] ","h nil? ","@hooks [] delete_if ","hook_name nil? "," raise ","callable ! ","block ! ","hook_name nil? ! "," hook_exists? ","event_name to_s ","event_name to_s  to_s "]}," Pry Hooks merge":{"type":"method","name":"merge","children":[],"call":["v merge! "," dup tap "," dup "]}," Pry Hooks uniq_keeping_last":{"type":"method","name":"uniq_keeping_last","children":[],"call":["output unshift ","hash [] ","block [] ","input reverse each ","input reverse "]}," Pry Hooks merge_arrays":{"type":"method","name":"merge_arrays","children":[],"call":[" uniq_keeping_last ","array1 + ","result push ","hash [] ","keys each ","keys uniq! ","hash []= ","array2 each ","keys push ","array2 map ","array1 each ","array1 map "]}," Pry Hooks merge!":{"type":"method","name":"merge!","children":[],"call":[" merge_arrays ","@hooks merge! ","other dup hooks ","other dup ","output unshift ","temp_hash [] ","pair first ","(send\n  (lvar :array) :+\n  (lvar :other_array)) reverse_each ","array + "]}," Pry Hooks errors":{"type":"method","name":"errors","children":[],"call":[]}," Pry Hooks hooks":{"type":"method","name":"hooks","children":[],"call":[]}," Pry Hooks initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["hooks_dup []= ","v dup ","@hooks each ","@hooks dup ","@hooks dup  []= "]}," Pry Hooks initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," Pry Hooks from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Pry HistoryArray convert_range":{"type":"method","name":"convert_range","children":[],"call":["Range  new ","(lvar :end_index) min "," convert_index ","range begin ","range exclude_end? ","range end ","(lvar : convert_index ) min "]}," Pry HistoryArray convert_index":{"type":"method","name":"convert_index","children":[],"call":["@count + ","n >= "]}," Pry HistoryArray inspect":{"type":"method","name":"inspect","children":[],"call":[" max_size ","@count - "," size "," class "]}," Pry HistoryArray pop!":{"type":"method","name":"pop!","children":[],"call":["@hash delete ","@count - "]}," Pry HistoryArray to_h":{"type":"method","name":"to_h","children":[],"call":["@hash dup "]}," Pry HistoryArray to_a":{"type":"method","name":"to_a","children":[],"call":["@hash [] ","(erange\n  (begin\n    (send\n      (ivar :@count) :-\n      (send nil :size)))\n  (ivar :@count)) map ","@count - "," size "]}," Pry HistoryArray each":{"type":"method","name":"each","children":[],"call":["@hash [] ","(erange\n  (begin\n    (send\n      (ivar :@count) :-\n      (send nil :size)))\n  (ivar :@count)) each ","@count - "," size "]}," Pry HistoryArray empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "]}," Pry HistoryArray size":{"type":"method","name":"size","children":[],"call":[]}," Pry HistoryArray []":{"type":"method","name":"[]","children":[],"call":["@hash [] ","range map ","range begin > ","range begin "," convert_range ","(erange\n  (lvar :index)\n  (send\n    (array\n      (lvar :end_index)\n      (ivar :@count)) :min)) map ","(lvar :end_index) min ","index > ","index + "," convert_index ","index_or_range is_a? "," convert_range  map "," convert_range  begin > "," convert_range  begin "," convert_ convert_range  ","(e convert_range \n  (lvar :index)\n  (send\n    (array\n      (lvar :end_index)\n      (ivar :@count)) :min)) map ","(erange\n  (lvar :index)\n  (send\n    (array\n      (lvar :index + )\n      (ivar :@count)) :min)) map ","(erange\n  (lvar : convert_index )\n  (send\n    (array\n      (lvar :end_ convert_index )\n      (ivar :@count)) :min)) map ","(lvar :index + ) min ","(lvar :end_ convert_index ) min "," convert_index  > "," convert_index  + "," convert_ convert_index  ","index_or_ convert_range  is_a? "," convert_index _or_range is_a? "]}," Pry HistoryArray <<":{"type":"method","name":"<<","children":[],"call":["@hash delete ","@count - "," max_size ","@hash size > ","@hash size ","@hash []= "]}," Pry HistoryArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry History file_path":{"type":"method","name":"file_path","children":[],"call":["Pry  config history file ","Pry  config history ","Pry  config "]}," Pry History history_file":{"type":"method","name":"history_file","children":[],"call":[" warn ","f sync= ","File  open tap ","File  open "," file_path ","file sync= "," history_file_path ","error message ","FileUtils  mkdir_p ","File  dirname ","File  exist? "]}," Pry History save_to_file":{"type":"method","name":"save_to_file","children":[],"call":[" history_file puts "," history_file "]}," Pry History clear_readline":{"type":"method","name":"clear_readline","children":[],"call":["Readline HISTORY  shift ","Readline HISTORY  empty? ","Pry  require_readline "]}," Pry History push_to_readline":{"type":"method","name":"push_to_readline","children":[],"call":["Readline HISTORY  << ","Pry  require_readline "]}," Pry History read_from_file":{"type":"method","name":"read_from_file","children":[],"call":[" warn ","error message ","File  foreach ","File  exists? ","File  expand_path ","Pry  config history file ","Pry  config history ","Pry  config "," history_file_path ","File  exist? ","error message empty? ","File  expand_ history_file_path  "," history_file_ history_file_path  "," File  expand_path _path "]}," Pry History to_a":{"type":"method","name":"to_a","children":[],"call":["@history dup ","@history to_a "]}," Pry History session_line_count":{"type":"method","name":"session_line_count","children":[],"call":["@history count - ","@history count ","@history_line_count - "]}," Pry History history_line_count":{"type":"method","name":"history_line_count","children":[],"call":["@history count "]}," Pry History clear":{"type":"method","name":"clear","children":[],"call":["@clearer call ","@history clear ","Readline HISTORY  shift ","Readline HISTORY  empty? "]}," Pry History push":{"type":"method","name":"push","children":[],"call":["@saver call ","Pry  config history should_save ","Pry  config history ","Pry  config ","@history << ","@pusher call ","line == ","@history last ","line empty? "," should_ignore? ! "," should_ignore? "," invalid_readline_line? ","Pry  config history_save ","@history [] ","Readline HISTORY  << ","line strip == ","@history last strip ","line strip "]}," Pry History load":{"type":"method","name":"load","children":[],"call":["@history << ","line chomp ","@pusher call ","@loader call "," invalid_readline_line? ","@history length ","Readline HISTORY  << ","File  foreach "]}," Pry History restore_default_behavior":{"type":"method","name":"restore_default_behavior","children":[],"call":[" proc "," method ","Pry  config input ","Pry  config "]}," Pry History initialize":{"type":"method","name":"initialize","children":[],"call":[" restore_default_behavior ","options [] "," method ","@history count "]}," Pry Helpers Text indent":{"type":"method","name":"indent","children":[],"call":["(send\n  (send\n    (lvar :text) :lines) :map) join ","  * ","text lines map ","text lines "]}," Pry Helpers Text with_line_numbers":{"type":"method","name":"with_line_numbers","children":[],"call":["(send\n  (send\n    (lvar :lines) :each_with_index) :map) join "," send ","(send\n  (lvar :index) :+\n  (lvar :offset)) to_s rjust ","(send\n  (lvar :index) :+\n  (lvar :offset)) to_s ","index + ","lines each_with_index map ","lines each_with_index ","(send\n  (lvar :offset) :+\n  (send\n    (lvar :lines) :count)) to_s length ","(send\n  (lvar :offset) :+\n  (send\n    (lvar :lines) :count)) to_s ","offset + ","lines count ","text each_line to_a ","text each_line "," blue ","(send\n  (send\n    (lvar :text each_line to_a ) :each_with_index) :map) join ","text each_line to_a  each_with_index map ","text each_line to_a  each_with_index ","(send\n  (lvar :offset) :+\n  (send\n    (lvar :text each_line to_a ) :count)) to_s length ","(send\n  (lvar :offset) :+\n  (send\n    (lvar :text each_line to_a ) :count)) to_s ","text each_line to_a  count "]}," Pry Helpers Text no_pager":{"type":"method","name":"no_pager","children":[],"call":["Pry  config pager= ","Pry  config ","Pry  config pager "]}," Pry Helpers Text no_color":{"type":"method","name":"no_color","children":[],"call":["Pry  config color= ","Pry  config ","Pry  config color ","Pry  color= ","Pry  color "]}," Pry Helpers Text default":{"type":"method","name":"default","children":[],"call":["text to_s "]}," Pry Helpers Text bold":{"type":"method","name":"bold","children":[],"call":["text to_s ","Pry  color "]}," Pry Helpers Text strip_color":{"type":"method","name":"strip_color","children":[],"call":["text to_s gsub ","text to_s "]}," Pry Helpers Table _recall_color_for":{"type":"method","name":"_recall_color_for","children":[],"call":["@colorless_cache [] "]}," Pry Helpers Table _recolumn":{"type":"method","name":"_recolumn","children":[],"call":["@rows_without_colors << ","@plain_items [] ","row_indices map ","row_count * + ","row_count * ","(erange\n  (int 0)\n  (send nil :column_count)) map "," column_count ","row_count times ","(send\n  (send\n    (send\n      (send nil :items) :size) :to_f) :/\n  (send nil :column_count)) ceil "," items size to_f / "," items size to_f "," items size "," items "," items size zero? ","(send\n  (send\n    (send\n      (send nil :items) :size) :to_f) :/\n  (send nil :column_count)) ceil  * + ","(send\n  (send\n    (send\n      (send nil :items) :size) :to_f) :/\n  (send nil :column_count)) ceil  * ","(send\n  (send\n    (send\n      (send nil :items) :size) :to_f) :/\n  (send nil :column_count)) ceil  times "]}," Pry Helpers Table _rebuild_colorless_cache":{"type":"method","name":"_rebuild_colorless_cache","children":[],"call":["@plain_items << ","@colorless_cache []= ","Pry Helpers Text  strip_color "," items map "," items ","@Pry Helpers Text  strip_color _items << "]}," Pry Helpers Table _max_width":{"type":"method","name":"_max_width","children":[],"call":["things compact map max ","things compact map ","things compact "]}," Pry Helpers Table to_a":{"type":"method","name":"to_a","children":[],"call":[" items to_a "," items "]}," Pry Helpers Table ==":{"type":"method","name":"==","children":[],"call":[" items == ","other to_a "," items "]}," Pry Helpers Table columns":{"type":"method","name":"columns","children":[],"call":["@rows_without_colors transpose "]}," Pry Helpers Table fits_on_line?":{"type":"method","name":"fits_on_line?","children":[],"call":[" _max_width <= "," _max_width "," rows_to_s "]}," Pry Helpers Table column_count=":{"type":"method","name":"column_count=","children":[],"call":[" _recolumn "]}," Pry Helpers Table items=":{"type":"method","name":"items=","children":[],"call":[" _recolumn "," _rebuild_colorless_cache "]}," Pry Helpers Table rows_to_s":{"type":"method","name":"rows_to_s","children":[],"call":["padded join ","Pry  config ls separator ","Pry  config ls ","Pry  config ","padded << ","item sub! "," _recall_color_for ","color_on == ","e ljust ","widths [] ","r each_with_index ","@rows_without_colors map "," _max_width "," columns map "," columns ","@config ls separator ","@config ls ","style == ","e ljust  sub! "]}," Pry Helpers Table to_s":{"type":"method","name":"to_s","children":[],"call":[" rows_to_s join "," rows_to_s "]}," Pry Helpers Table initialize":{"type":"method","name":"initialize","children":[],"call":[" items= ","args [] ","pry_instance config "]}," Pry Helpers tablify":{"type":"method","name":"tablify","children":[],"call":["Pry  config ","Pry  new "]}," Pry Helpers tablify_to_screen_width":{"type":"method","name":"tablify_to_screen_width","children":[],"call":["Pry  config ","Pry  new "]}," Pry Helpers tablify_or_one_line":{"type":"method","name":"tablify_or_one_line","children":[],"call":["Pry  config ","Pry  new "]}," Pry Helpers OptionsHelpers method_object":{"type":"method","name":"method_object","children":[],"call":[" get_method_or_raise "," opts present? ! "," opts present? "," opts "," opts [] "," args join "," args "," args empty? "]}," Pry Helpers OptionsHelpers method_options":{"type":"method","name":"method_options","children":[],"call":["Pry  binding_for "," target eval "," target ","opt on "]}," Pry Helpers DocumentationHelpers strip_leading_whitespace":{"type":"method","name":"strip_leading_whitespace","children":[],"call":["Pry Helpers CommandHelpers  unindent "]}," Pry Helpers DocumentationHelpers get_comment_content":{"type":"method","name":"get_comment_content","children":[],"call":[" strip_leading_whitespace ","comment gsub! ","comment dup ","comment dup  gsub! ","comment dup  dup "]}," Pry Helpers DocumentationHelpers strip_comments_from_c_code":{"type":"method","name":"strip_comments_from_c_code","children":[],"call":["code sub "]}," Pry Helpers DocumentationHelpers process_comment_markup":{"type":"method","name":"process_comment_markup","children":[],"call":[" process_yardoc "," process_rdoc "]}," Pry Helpers DocumentationHelpers process_yardoc":{"type":"method","name":"process_yardoc","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :yard_tags) :-\n      (array\n        (str \"example\")))) :inject\n  (lvar :comment)) gsub ","yard_tags join "," process_yardoc_tag ","(send\n  (lvar :yard_tags) :-\n  (array\n    (str \"example\"))) inject ","yard_tags - ","Regexp  last_match ","(send\n  (begin\n    (send\n      (const nil :YARD_TAGS) :-\n      (array\n        (str \"example\")))) :inject\n  (lvar :comment)) gsub ","YARD_TAGS  join ","(send\n  (const nil :YARD_TAGS) :-\n  (array\n    (str \"example\"))) inject ","YARD_TAGS  - ","Pry  color "]}," Pry Helpers DocumentationHelpers process_yardoc_tag":{"type":"method","name":"process_yardoc_tag","children":[],"call":["(send\n  (send\n    (lvar :comment) :lines) :map) join ","v =~ ","Pry Helpers Text  strip_color ","v !~ ","comment lines map ","comment lines "]}," Pry Helpers DocumentationHelpers process_rdoc":{"type":"method","name":"process_rdoc","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (send\n                  (send\n                    (const nil :CodeRay) :scan\n                    (nth-ref 1)\n                    (sym :ruby)) :term)) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (dstr\n      (str \"\\e[32m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (send\n              (send\n                (const nil :CodeRay) :scan\n                (nth-ref 1)\n                (sym :ruby)) :term)) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (send\n          (send\n            (const nil :CodeRay) :scan\n            (nth-ref 1)\n            (sym :ruby)) :term)) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (send\n      (send\n        (const nil :CodeRay) :scan\n        (nth-ref 1)\n        (sym :ruby)) :term)) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment gsub ","comment dup ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (block\n                    (send\n                      (lvar :comment) :gsub\n                      (regexp\n                        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                        (regopt :m)))\n                    (args)\n                    (send\n                      (send\n                        (const nil :CodeRay) :scan\n                        (nth-ref 1)\n                        (sym :ruby)) :term)) :gsub\n                  (regexp\n                    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                    (regopt :m)))\n                (args)\n                (dstr\n                  (str \"\\e[1m\")\n                  (begin\n                    (nth-ref 1))\n                  (str \"\\e[0m\"))) :gsub\n              (regexp\n                (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n            (regopt :m)))\n        (args)\n        (send\n          (send\n            (const nil :CodeRay) :scan\n            (nth-ref 1)\n            (sym :ruby)) :term)) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (dstr\n      (str \"\\e[32m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (send\n                  (send\n                    (const nil :CodeRay) :scan\n                    (nth-ref 1)\n                    (sym :ruby)) :term)) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n        (regopt :m)))\n    (args)\n    (send\n      (send\n        (const nil :CodeRay) :scan\n        (nth-ref 1)\n        (sym :ruby)) :term)) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (send\n              (send\n                (const nil :CodeRay) :scan\n                (nth-ref 1)\n                (sym :ruby)) :term)) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n    (regopt :m))) gsub ","last_match_ruby call ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m))\n              (block-pass\n                (lvar :last_match_ruby))) :gsub\n            (regexp\n              (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n              (regopt :m)))\n          (args)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (send\n                (const nil :Regexp) :last_match\n                (int 1)))\n            (str \"\\e[0m\"))) :gsub\n        (regexp\n          (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n          (regopt :m)))\n      (args)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (send\n            (const nil :Regexp) :last_match\n            (int 1)))\n        (str \"\\e[0m\"))) :gsub\n    (regexp\n      (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub gsub ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m))\n              (block-pass\n                (lvar :last_match_ruby))) :gsub\n            (regexp\n              (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n              (regopt :m)))\n          (args)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (send\n                (const nil :Regexp) :last_match\n                (int 1)))\n            (str \"\\e[0m\"))) :gsub\n        (regexp\n          (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n          (regopt :m)))\n      (args)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (send\n            (const nil :Regexp) :last_match\n            (int 1)))\n        (str \"\\e[0m\"))) :gsub\n    (regexp\n      (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","Regexp  last_match ","(send\n  (block\n    (send\n      (send\n        (lvar :comment) :gsub\n        (regexp\n          (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n          (regopt :m))\n        (block-pass\n          (lvar :last_match_ruby))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (send\n          (const nil :Regexp) :last_match\n          (int 1)))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub gsub ","(send\n  (block\n    (send\n      (send\n        (lvar :comment) :gsub\n        (regexp\n          (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n          (regopt :m))\n        (block-pass\n          (lvar :last_match_ruby))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (send\n          (const nil :Regexp) :last_match\n          (int 1)))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (send\n    (lvar :comment) :gsub\n    (regexp\n      (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","comment gsub gsub ","SyntaxHighlighter  highlight "," proc ","Pry  color ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (sym :ruby)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (sym :ruby)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (sym :ruby)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (sym :ruby)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (send\n                  (send\n                    (const nil :CodeRay) :scan\n                    (nth-ref 1)\n                    (sym :ruby)) :term)) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (dstr\n      (str \"\\e[32m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (send\n              (send\n                (const nil :CodeRay) :scan\n                (nth-ref 1)\n                (sym :ruby)) :term)) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (send\n          (send\n            (const nil :CodeRay) :scan\n            (nth-ref 1)\n            (sym :ruby)) :term)) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment dup ) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (send\n      (send\n        (const nil :CodeRay) :scan\n        (nth-ref 1)\n        (sym :ruby)) :term)) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment dup ) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment dup  gsub ","comment dup  dup ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (block\n                    (send\n                      (lvar :comment dup ) :gsub\n                      (regexp\n                        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                        (regopt :m)))\n                    (args)\n                    (send\n                      (send\n                        (const nil :CodeRay) :scan\n                        (nth-ref 1)\n                        (sym :ruby)) :term)) :gsub\n                  (regexp\n                    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                    (regopt :m)))\n                (args)\n                (dstr\n                  (str \"\\e[1m\")\n                  (begin\n                    (nth-ref 1))\n                  (str \"\\e[0m\"))) :gsub\n              (regexp\n                (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n            (regopt :m)))\n        (args)\n        (send\n          (send\n            (const nil :CodeRay) :scan\n            (nth-ref 1)\n            (sym :ruby)) :term)) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (dstr\n      (str \"\\e[32m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (send\n                  (send\n                    (const nil :CodeRay) :scan\n                    (nth-ref 1)\n                    (sym :ruby)) :term)) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (dstr\n              (str \"\\e[1m\")\n              (begin\n                (nth-ref 1))\n              (str \"\\e[0m\"))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n        (regopt :m)))\n    (args)\n    (send\n      (send\n        (const nil :CodeRay) :scan\n        (nth-ref 1)\n        (sym :ruby)) :term)) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (send\n              (send\n                (const nil :CodeRay) :scan\n                (nth-ref 1)\n                (sym :ruby)) :term)) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (dstr\n          (str \"\\e[1m\")\n          (begin\n            (nth-ref 1))\n          (str \"\\e[0m\"))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (nth-ref 1))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n    (regopt :m))) gsub ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m))\n              (block-pass\n                (lvar :last_match_ruby))) :gsub\n            (regexp\n              (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n              (regopt :m)))\n          (args)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (send\n                (const nil :Regexp) :last_match\n                (int 1)))\n            (str \"\\e[0m\"))) :gsub\n        (regexp\n          (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n          (regopt :m)))\n      (args)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (send\n            (const nil :Regexp) :last_match\n            (int 1)))\n        (str \"\\e[0m\"))) :gsub\n    (regexp\n      (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub gsub ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m))\n              (block-pass\n                (lvar :last_match_ruby))) :gsub\n            (regexp\n              (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n              (regopt :m)))\n          (args)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (send\n                (const nil :Regexp) :last_match\n                (int 1)))\n            (str \"\\e[0m\"))) :gsub\n        (regexp\n          (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n          (regopt :m)))\n      (args)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (send\n            (const nil :Regexp) :last_match\n            (int 1)))\n        (str \"\\e[0m\"))) :gsub\n    (regexp\n      (str \"<tt>(?:\\\\s*\\\\n)?(.*?)\\\\s*</tt>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w+?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (send\n        (lvar :comment dup ) :gsub\n        (regexp\n          (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n          (regopt :m))\n        (block-pass\n          (lvar :last_match_ruby))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (send\n          (const nil :Regexp) :last_match\n          (int 1)))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub gsub ","(send\n  (block\n    (send\n      (send\n        (lvar :comment dup ) :gsub\n        (regexp\n          (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n          (regopt :m))\n        (block-pass\n          (lvar :last_match_ruby))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (dstr\n      (str \"\\e[1m\")\n      (begin\n        (send\n          (const nil :Regexp) :last_match\n          (int 1)))\n      (str \"\\e[0m\"))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (send\n    (lvar :comment dup ) :gsub\n    (regexp\n      (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n      (regopt :m))\n    (block-pass\n      (lvar :last_match_ruby))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","comment dup  gsub gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (sym :ruby)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (sym :ruby)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (sym :ruby)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment dup ) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (sym :ruby)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment dup ) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub "]}," Pry Helpers CommandHelpers set_file_and_dir_locals":{"type":"method","name":"set_file_and_dir_locals","children":[],"call":["_pry_ inject_local ","_pry_ last_dir ","_pry_ last_dir= ","File  dirname ","_pry_ last_file ","_pry_ last_file= ","File  expand_path ","file_name ! ","target ! ","pry inject_local ","pry last_dir ","pry last_dir= ","pry last_file ","pry last_file= ","ctx ! "]}," Pry Helpers CommandHelpers absolute_index_range":{"type":"method","name":"absolute_index_range","children":[],"call":["Range  new "," absolute_index_number ","range_or_number end ","range_or_number begin ","R absolute_index_number nge  new "," a absolute_index_number solute_index_num absolute_index_number er ","  absolute_index_number bsolute_index_number ","range_or_num absolute_index_number er end ","r absolute_index_number nge_or_number end ","range_or_num absolute_index_number er  absolute_index_number egin ","r absolute_index_number nge_or_number begin "]}," Pry Helpers CommandHelpers absolute_index_number":{"type":"method","name":"absolute_index_number","children":[],"call":["(send\n  (lvar :array_length) :+\n  (lvar :line_number)) max ","array_length + ","line_number >= "]}," Pry Helpers CommandHelpers one_index_range_or_number":{"type":"method","name":"one_index_range_or_number","children":[],"call":[" one_index_number "," one_index_range "]}," Pry Helpers CommandHelpers one_index_range":{"type":"method","name":"one_index_range","children":[],"call":["Range  new "," one_index_number ","range end ","range begin "]}," Pry Helpers CommandHelpers one_index_number":{"type":"method","name":"one_index_number","children":[],"call":["line_number - ","line_number > "]}," Pry Helpers CommandHelpers restrict_to_lines":{"type":"method","name":"restrict_to_lines","children":[],"call":[" Array join "," Array ","content lines to_a [] ","content lines to_a ","content lines "," one_index_range_or_number "]}," Pry Helpers CommandHelpers unindent":{"type":"method","name":"unindent","children":[],"call":["text gsub ","  * ","current_margin start_with? ","next_indent start_with? ","text scan inject ","text scan ","text sub ","scanned_text inject ","dirty_text sub ","text sub  gsub ","dirty_text sub  gsub ","text sub  scan inject ","dirty_text sub  scan inject ","text sub  scan ","dirty_text sub  scan ","text sub  sub ","dirty_text sub  sub ","scanned_text sub  inject ","scanned_dirty_text sub  inject ","text scan  inject ","dirty_dirty_text sub  sub "]}," Pry Helpers CommandHelpers command_error":{"type":"method","name":"command_error","children":[],"call":[" raise "," command_name "]}," Pry Helpers CommandHelpers get_method_or_raise":{"type":"method","name":"get_method_or_raise","children":[],"call":[" set_file_and_dir_locals ","meth source_file "," command_error "," internal_binding? ","name ! ","meth ! ","meth name_with_owner ","meth super ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :super))\n  (int 0)) times ","opts [] ","Pry Method  from_str ","method source_file "," raise ","method_name ! ","method ! ","method name_with_owner ","method super "," class_name ","meth owner ","meth name ","meth super  source_file ","Pry Method  from_str  source_file ","meth super  ! ","Pry Method  from_str  ! ","meth super  name_with_owner ","Pry Method  from_str  name_with_owner ","meth super  super ","Pry Method  from_str  super ","meth super od source_file ","Pry Method  from_str od source_file ","method super  source_file ","meth super od_name ! ","Pry Method  from_str od_name ! ","method super _name ! ","Pry Method  from_str _name ! ","meth super od ! ","Pry Method  from_str od ! ","method super  ! ","meth super od name_with_owner ","Pry Method  from_str od name_with_owner ","method super  name_with_owner ","meth super od super ","Pry Method  from_str od super ","method super  super ","meth super  owner ","Pry Method  from_str  owner ","meth super  name ","Pry Method  from_str  name "]}," Pry Helpers CommandHelpers internal_binding?":{"type":"method","name":"internal_binding?","children":[],"call":["(str \"__binding__\") include? ","target eval to_s ","target eval ","context eval to_s ","context eval "]}," Pry Helpers CommandHelpers temp_file":{"type":"method","name":"temp_file","children":[],"call":["file close ","Tempfile  new ","file path ","Tempfile  new  close ","TempTempfile  new   new ","Tempfile  new  path "]}," Pry Helpers BaseHelpers stagger_output":{"type":"method","name":"stagger_output","children":[],"call":["Pry  new pager page ","Pry  new pager ","Pry  new "," _pry_ pager page "," _pry_ pager "," _pry_ "," pry_instance pager page "," pry_instance pager "," pry_instance "," simple_pager ","less puts "," lesspipe ","RUBY_ENGINE  =~ ","Object  const_defined? "," output puts "," output ","Pry  pager ! ","Pry  pager ","text lines count < "," page_size ","text lines count ","text lines ","output puts "," jruby? ","out puts ","Pry  output ","Pry  respond_to? "," respond_to? ","Pry Pager  page ","Pry Pager  page_size "]}," Pry Helpers BaseHelpers mri_21?":{"type":"method","name":"mri_21?","children":[],"call":["RUBY_VERSION  =~ "," mri? "]}," Pry Helpers BaseHelpers mri_20?":{"type":"method","name":"mri_20?","children":[],"call":["RUBY_VERSION  =~ "," mri? "]}," Pry Helpers BaseHelpers mri_2?":{"type":"method","name":"mri_2?","children":[],"call":["RUBY_VERSION  =~ "," mri? "]}," Pry Helpers BaseHelpers mri_19?":{"type":"method","name":"mri_19?","children":[],"call":["RUBY_VERSION  =~ "," mri? ","RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Pry Helpers BaseHelpers mri?":{"type":"method","name":"mri?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Pry Helpers BaseHelpers rbx?":{"type":"method","name":"rbx?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] ","RUBY_ENGINE  =~ "]}," Pry Helpers BaseHelpers jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "," jruby? "]}," Pry Helpers BaseHelpers jruby?":{"type":"method","name":"jruby?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] ","RUBY_ENGINE  =~ "]}," Pry Helpers BaseHelpers windows_ansi?":{"type":"method","name":"windows_ansi?","children":[],"call":[" mri_2? "," windows? ","ENV  [] "]}," Pry Helpers BaseHelpers windows?":{"type":"method","name":"windows?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Pry Helpers BaseHelpers heading":{"type":"method","name":"heading","children":[],"call":["Pry  color "]}," Pry Helpers BaseHelpers highlight":{"type":"method","name":"highlight","children":[],"call":["string gsub "]}," Pry Helpers BaseHelpers colorize_code":{"type":"method","name":"colorize_code","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","SyntaxHighlighter  highlight ","Pry  color "]}," Pry Helpers BaseHelpers use_ansi_codes?":{"type":"method","name":"use_ansi_codes?","children":[],"call":["ENV  [] != ","ENV  [] "," windows_ansi? ","term != ","Pry Env  [] ","Pry Helpers Platform  windows_ansi? ","Pry Env  []  != "]}," Pry Helpers BaseHelpers command_dependencies_met?":{"type":"method","name":"command_dependencies_met?","children":[],"call":["Rubygem  installed? "," Array all? "," Array ","options [] ","options [] ! "," gem_installed? "]}," Pry Helpers BaseHelpers not_a_real_file?":{"type":"method","name":"not_a_real_file?","children":[],"call":["file == ","file =~ "]}," Pry Helpers BaseHelpers find_command":{"type":"method","name":"find_command","children":[],"call":["command_match last ","listing != ","(lvasgn :listing\n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :listing))) == ","command options [] ","command options ","set find ","listing nil? ! ","listing nil? ","command options [] == "," commands find "," commands ","command options []  != ","(lvasgn :command options [] \n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :command options [] ))) == ","command options []  nil? ! ","command options []  nil? "]}," Pry Helpers BaseHelpers safe_send":{"type":"method","name":"safe_send","children":[],"call":["(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method ","Module  === ","(if\n  (send\n    (lvar :obj) :is_a?\n    (const nil :Module))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (lvar :obj) :is_a?\n    (const nil :Module))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (lvar :obj) :is_a?\n    (const nil :Module))\n  (const nil :Module)\n  (const nil :Object)) instance_method ","obj is_a? "]}," Pry Helpers BaseHelpers silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Pry FrozenObjectException ===":{"type":"method","name":"===","children":[],"call":[]}," Pry TooSafeException ===":{"type":"method","name":"===","children":[],"call":[]}," Pry RescuableException ===":{"type":"method","name":"===","children":[],"call":[]}," Pry Editor editor_name":{"type":"method","name":"editor_name","children":[],"call":["File  basename split first ","File  basename split ","File  basename "," _pry_ config editor "," _pry_ config "," _pry_ "," pry_instance config editor "," pry_instance config "," pry_instance ","Pry  config editor ","Pry  config "]}," Pry Editor start_line_syntax_for_editor":{"type":"method","name":"start_line_syntax_for_editor","children":[],"call":[" windows? "," editor_name ","line_number <= ","Helpers Platform  windows? ","file_name to_s "]}," Pry Editor blocking_flag_for_editor":{"type":"method","name":"blocking_flag_for_editor","children":[],"call":[" editor_name "]}," Pry Editor open_editor_on_jruby":{"type":"method","name":"open_editor_on_jruby","children":[],"call":[" system ","Process  waitpid ","Spoon  spawnp ","Shellwords  split "," require ","editor_invocation split ","Process  waitSpoon  spawnp  "]}," Pry Editor open_editor":{"type":"method","name":"open_editor","children":[],"call":[" raise ","$? exitstatus "," system ","Shellwords  split ","$CHILD_STATUS exitstatus "]}," Pry Editor build_editor_invocation_string":{"type":"method","name":"build_editor_invocation_string","children":[],"call":[" start_line_syntax_for_editor "," blocking_flag_for_editor "," _pry_ config editor "," _pry_ config "," _pry_ ","Shellwords  escape ","file gsub "," windows? "," _pry_ config editor call ","(lvar :file) [] "," _pry_ config editor arity "," _pry_ config editor respond_to? ","Helpers Platform  windows? "," pry_instance config editor "," pry_instance config "," pry_instance "," pry_instance config editor call "," pry_instance config editor arity "," pry_instance config editor respond_to? ","Pry  config editor ","Pry  config ","Pry  config editor call ","Pry  config editor arity ","Pry  config editor respond_to? ","  start_line_syntax_for_editor _syntax_for_editor "," start_line_syntax_for_ pry_instance config editor  "," blocking_ blocking_flag_for_editor _for_editor "," blocking_flag_for_ pry_instance config editor  "," _pry_ config  pry_instance config editor  "," _pry_ config  pry_instance config editor  call "," _pry_ config  pry_instance config editor  arity "," _pry_ config  pry_instance config editor  respond_to? "," pry_instance config  pry_instance config editor  "," pry_instance config  pry_instance config editor  call "," pry_instance config  pry_instance config editor  arity "," pry_instance config  pry_instance config editor  respond_to? ","Pry  config  pry_instance config editor  ","Pry  config  pry_instance config editor  call ","Pry  config  pry_instance config editor  arity ","Pry  config  pry_instance config editor  respond_to? "]}," Pry Editor invoke_editor":{"type":"method","name":"invoke_editor","children":[],"call":[" open_editor "," open_editor_on_jruby "," jruby? "," build_editor_invocation_string "," raise "," _pry_ config editor "," _pry_ config "," _pry_ ","Helpers Platform  jruby? "," pry_instance config editor "," pry_instance config "," pry_instance ","Pry  config editor ","Pry  config "," build_ build_editor_invocation_string _string "]}," Pry Editor edit_tempfile_with_content":{"type":"method","name":"edit_tempfile_with_content","children":[],"call":["File  read ","f path "," invoke_editor ","f close ","f flush ","f puts "," temp_file "]}," Pry Editor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BasicObject __binding__":{"type":"method","name":"__binding__","children":[],"call":[" __pry__ ","(sclass\n  (self)\n  (self)) class_eval ","116 + ","126 + ","127 + ","129 + "]}," Object __binding__":{"type":"method","name":"__binding__","children":[],"call":[" __pry__ "," class class_eval "," class "," instance_eval "," respond_to? "," class_eval "," is_a? "," binding "," name == "," name ","Pry Helpers BaseHelpers  jruby? "," class method_defined? ","Pry Helpers Platform  jruby? "," name nil? "," __binding_impl__ ","55 + "]}," Object pry":{"type":"method","name":"pry","children":[],"call":["Pry  start ","Hash  === ","object nil? ","args unshift ","args length == ","args length ","args first is_a? ","args first "]}," Config hooks=":{"type":"method","name":"hooks=","children":[],"call":[" []= ","Pry Hooks  from_hash "," warn ","hooks is_a? "]}," Config shortcuts":{"type":"method","name":"shortcuts","children":[],"call":[]}," Default lazy_readline":{"type":"method","name":"lazy_readline","children":[],"call":[" raise "," warn "," require "]}," Default configure_history":{"type":"method","name":"configure_history","children":[],"call":[" history should_load= "," history "," history should_save= "," should_load_rc= "," history file nil? "," history file "," history file= ","File  expand_path "," []= ","Pry Config  from_hash "]}," Default configure_gist":{"type":"method","name":"configure_gist","children":[],"call":[" []= ","Pry Config  from_hash "," proc "]}," Default quiet?":{"type":"method","name":"quiet?","children":[],"call":[" quiet "]}," Default initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_history "," configure_gist "]}," Convenience config_shortcut":{"type":"method","name":"config_shortcut","children":[],"call":[" config public_send "," config "," define_method ","names each "]}," Behavior try_convert_to_hash":{"type":"method","name":"try_convert_to_hash","children":[],"call":["obj to_hash ","obj respond_to? ","obj to_h ","Hash  === "]}," Behavior _dup":{"type":"method","name":"_dup","children":[],"call":["value dup ","klass === ","NODUP  any? "]}," Behavior _clip_inspect":{"type":"method","name":"_clip_inspect","children":[],"call":["(begin\n  (send\n    (lvar :obj) :class)) % << ","(begin\n  (send\n    (lvar :obj) :class)) % ","obj object_id ","obj class "]}," Behavior pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "," inspect [] gsub "," inspect [] "," inspect "]}," Behavior inspect":{"type":"method","name":"inspect","children":[],"call":["@default inspect "," _clip_inspect ","(send\n  (send nil :keys) :map) join "," keys map "," keys "," __clip_inspect "]}," Behavior to_hash":{"type":"method","name":"to_hash","children":[],"call":["@lookup dup "]}," Behavior keys":{"type":"method","name":"keys","children":[],"call":["@lookup keys "]}," Behavior forget":{"type":"method","name":"forget","children":[],"call":["@lookup delete ","key to_s "," __remove ","key to_s  to_s "]}," Behavior clear":{"type":"method","name":"clear","children":[],"call":["@lookup clear "]}," Behavior key?":{"type":"method","name":"key?","children":[],"call":["@lookup key? ","key to_s ","@lookup key to_s ? ","key to_s  to_s "]}," Behavior respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@default respond_to? "," key? ","key to_s chomp ","key to_s "," key to_s chomp ? ","key to_s chomp  to_s chomp ","key to_s chomp  to_s "]}," Behavior ==":{"type":"method","name":"==","children":[],"call":["@lookup == "," try_convert_to_hash "," __try_convert_to_hash "]}," Behavior merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other each "," raise "," try_convert_to_hash "," __try_convert_to_hash "," try_convert_to_hash  each "," __try_convert_to_hash  each "]}," Behavior method_missing":{"type":"method","name":"method_missing","children":[],"call":[" []= ","value dup ","key == ","@default public_send ","@default respond_to? "," [] "," key? ","args [] ","key [] ","key [] == ","name to_s "," __dup ","@default public_send  dup ","value dup  dup ","name to_s  == "," name to_s ? ","name to_s  [] ","name to_s  [] == "]}," Behavior []=":{"type":"method","name":"[]=","children":[],"call":["@lookup []= "," raise ","RESERVED_KEYS  include? ","key to_s "," __push ","@reserved_keys include? ","key to_s  to_s ","@reserved_key to_s s include? "]}," Behavior []":{"type":"method","name":"[]","children":[],"call":["@lookup [] ","key to_s ","@default [] "," key? ","key to_s  to_s "," key to_s ? "]}," Behavior default":{"type":"method","name":"default","children":[],"call":[]}," Behavior initialize":{"type":"method","name":"initialize","children":[],"call":[" methods map freeze "," methods map "," methods "]}," Behavior included":{"type":"method","name":"included","children":[],"call":[]}," Behavior Builder from_hash":{"type":"method","name":"from_hash","children":[],"call":["config merge! "," new tap "," new ","config []= "," from_hash ","Hash  === ","attributes each "]}," Pry Wtf size_of_backtrace":{"type":"method","name":"size_of_backtrace","children":[],"call":["(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max * ","(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max "," captures [] size "," captures [] "," captures "]}," Pry Wtf backtrace":{"type":"method","name":"backtrace","children":[],"call":[" exception backtrace "," exception "]}," Pry Wtf with_line_numbers":{"type":"method","name":"with_line_numbers","children":[],"call":["Pry Code  new with_line_numbers to_s ","Pry Code  new with_line_numbers ","Pry Code  new "]}," Pry Wtf exception":{"type":"method","name":"exception","children":[],"call":[" _pry_ last_exception "," _pry_ "]}," Pry Wtf process":{"type":"method","name":"process","children":[],"call":[" output puts "," with_line_numbers "," backtrace first "," size_of_backtrace "," backtrace "," output "," opts verbose? "," opts "," exception "," exception class "," text bold "," text "," raise ","cause cause ","cause backtrace first ","cause backtrace ","cause class "," exception cause "," exception respond_to? "," bold ","cause cause  cause cause  "," exception cause   exception cause  ","cause cause  backtrace first "," exception cause  backtrace first ","cause cause  backtrace "," exception cause  backtrace ","cause cause  class "," exception cause  class "," exception cause cause  "," exception  exception cause  "]}," Pry Wtf options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Whereami window_size":{"type":"method","name":"window_size","children":[],"call":[" args first to_i "," args first "," args "," _pry_ config default_window_size "," _pry_ config "," _pry_ "," args empty? ","Pry  config default_window_size ","Pry  config "]}," Pry Whereami expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path ","Pry  eval_path == ","Pry  eval_path ","f ! "]}," Pry Whereami valid_method?":{"type":"method","name":"valid_method?","children":[],"call":["@method source_range include? ","@method source_range "," expand_path == "," expand_path ","@method source_file ","@method source? "]}," Pry Whereami class_code":{"type":"method","name":"class_code","children":[],"call":["Pry Code  from_module "," expand_path == "," expand_path ","v source_file ","mod candidates find_index ","mod candidates "," target_class ","Pry  WrappedModule ","@method owner "," valid_method? ","Pry Code  from_ target_class ule ","Pry Code  from_Pry  WrappedModule ule "," target_class  candidates find_index ","Pry  WrappedModule  candidates find_index "," target_class  candidates ","Pry  WrappedModule  candidates "]}," Pry Whereami target_class":{"type":"method","name":"target_class","children":[],"call":["Pry  WrappedModule "," target_self class "," target_self "," target_self is_a? "]}," Pry Whereami method_code":{"type":"method","name":"method_code","children":[],"call":["Pry Code  from_method "," valid_method? "]}," Pry Whereami code_window":{"type":"method","name":"code_window","children":[],"call":["Pry Code  from_file around "," window_size ","Pry Code  from_file "]}," Pry Whereami default_code":{"type":"method","name":"default_code","children":[],"call":[" code_window "," method_code "," small_method? "]}," Pry Whereami small_method?":{"type":"method","name":"small_method?","children":[],"call":["@method source_range count < "," class method_size_cutoff "," class ","@method source_range count ","@method source_range "]}," Pry Whereami handle_internal_binding":{"type":"method","name":"handle_internal_binding","children":[],"call":[" output puts ","Pry  view_clip "," target_self "," output "," top_level? "]}," Pry Whereami top_level?":{"type":"method","name":"top_level?","children":[],"call":[" target_self == ","Pry  main "," target_self ","TOPLEVEL_BINDING  eval "]}," Pry Whereami marker":{"type":"method","name":"marker","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Whereami use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Whereami nothing_to_do?":{"type":"method","name":"nothing_to_do?","children":[],"call":[" code? ! "," code? "," internal_binding? "," target "," opts quiet? "," opts "]}," Pry Whereami process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page "," _pry_ pager "," _pry_ ","(str \"\\n\") << << ","(str \"\\n\") << "," code with_line_numbers with_marker "," marker "," code with_line_numbers "," use_line_numbers? "," code "," location "," text bold "," text "," set_file_and_dir_locals "," handle_internal_binding "," internal_binding? "," target "," nothing_to_do? "," raise "," bad_option_combination? "," code with_line_numbers with_marker highlighted "," bold "," output puts "," output "," stagger_output ","(str \"\\n\") + + ","(str \"\\n\") + "," code with_line_numbers with_marker to_s "," (str \"\\n\") << << put puts "," (str \"\\n\") + + put puts "," (str \"\\n\") << << put "," (str \"\\n\") + + put "," stagger_(str \"\\n\") << << put "," stagger_(str \"\\n\") + + put "]}," Pry Whereami location":{"type":"method","name":"location","children":[],"call":["@method name_with_owner "]}," Pry Whereami bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :m)) count > ","(send\n  (send nil :opts) :present?\n  (sym :m)) count "," args any? "," args "," opts present? "," opts "]}," Pry Whereami code?":{"type":"method","name":"code?","children":[],"call":[" code ! ! "," code ! "," code "]}," Pry Whereami code":{"type":"method","name":"code","children":[],"call":[" default_code "," code_window "," args any? "," args ","Pry Code  from_file "," opts present? "," opts "," raise "," class_code "," method_code ","Pry Code  from_file around "," window_size ","Pry Code  from_method "," show_method? "]}," Pry Whereami options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Whereami setup":{"type":"method","name":"setup","children":[],"call":["Pry Method  from_binding "," target "," target eval "," expand_path "]}," Pry WatchExpression add_hook":{"type":"method","name":"add_hook","children":[],"call":[" eval_and_print_changed ","_pry_ output "," _pry_ hooks add_hook "," _pry_ hooks "," _pry_ "," _pry_ hooks hook_exists? "]}," Pry WatchExpression add_expression":{"type":"method","name":"add_expression","children":[],"call":[" output puts ","Code  new "," arg_string "," output "," expressions << ","Expression  new "," target "," _pry_ "," expressions ","Code  new highlighted "]}," Pry WatchExpression eval_and_print_changed":{"type":"method","name":"eval_and_print_changed","children":[],"call":["output puts ","expr to_s "," text blue "," text ","expr changed? ","expr eval! "," expressions each "," expressions "," blue "]}," Pry WatchExpression list":{"type":"method","name":"list","children":[],"call":["pager puts ","pager print "," text with_line_numbers ","index + ","expr to_s "," text "," expressions each_with_index "," expressions "," _pry_ pager open "," _pry_ pager "," _pry_ "," output puts "," output "," expressions empty? "," with_line_numbers "]}," Pry WatchExpression delete":{"type":"method","name":"delete","children":[],"call":[" expressions clear "," expressions "," output puts "," output "," expressions delete_at ","index - "," expressions [] "]}," Pry WatchExpression expressions":{"type":"method","name":"expressions","children":[],"call":[" _pry_ config watch_expressions "," _pry_ config "," _pry_ "]}," Pry WatchExpression process":{"type":"method","name":"process","children":[],"call":[" add_expression "," args "," add_hook "," list "," args empty? "," opts present? "," opts "," delete "," opts [] "]}," Pry WatchExpression options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry WatchExpression Expression target_eval":{"type":"method","name":"target_eval","children":[],"call":["target eval "]}," Pry WatchExpression Expression changed?":{"type":"method","name":"changed?","children":[],"call":[" value != "," previous_value "," value "]}," Pry WatchExpression Expression to_s":{"type":"method","name":"to_s","children":[],"call":[" value ","Code  new strip ","Code  new "," source ","Code  new highlighted strip ","Code  new highlighted "]}," Pry WatchExpression Expression eval!":{"type":"method","name":"eval!","children":[],"call":["Pry ColorPrinter  pp "," target_eval "," source "," target "," value "]}," Pry WatchExpression Expression initialize":{"type":"method","name":"initialize","children":[],"call":["source strip ","Code  new strip ","Code  new "]}," Pry ToggleColor color_toggle":{"type":"method","name":"color_toggle","children":[],"call":[" _pry_ color ! "," _pry_ color "," _pry_ "]}," Pry ToggleColor process":{"type":"method","name":"process","children":[],"call":[" output puts "," _pry_ color "," _pry_ "," output "," _pry_ color= "," color_toggle ","Pry  color ","Pry  color= ","Pry  color ! "]}," Pry SwitchTo process":{"type":"method","name":"process","children":[],"call":["Pry  start "," _pry_ binding_stack [] "," _pry_ binding_stack "," _pry_ "," raise ","selection > "," _pry_ binding_stack size - "," _pry_ binding_stack size ","selection < ","selection to_i ","selection to_i  > ","selection to_i  < ","selection to_i  to_i "]}," Pry Stat process":{"type":"method","name":"process","children":[],"call":[" output puts "," unindent ","meth source_location join ","meth source_location ","meth signature ","meth arity ","meth is_a? ","meth visibility ","meth owner ","aliases join ","aliases any? ","aliases length > ","aliases length ","meth name "," output ","meth aliases "," method_object "," method_object  source_location join "," method_object  source_location "," method_object  signature "," method_object  arity "," method_object  is_a? "," method_object  visibility "," method_object  owner ","meth aliases  join ","meth aliases  any? ","meth aliases  length > ","meth aliases  length "," method_object  name ","meth meth aliases  "," method_object  aliases ","  method_object od_object "]}," Pry Stat options":{"type":"method","name":"options","children":[],"call":[" method_options "]}," Pry SimplePrompt process":{"type":"method","name":"process","children":[],"call":[" _pry_ push_prompt "," _pry_ "," _pry_ pop_prompt "," _pry_ prompt "]}," Pry ShowSource content_for":{"type":"method","name":"content_for","children":[],"call":["Code  new with_line_numbers "," use_line_numbers? ","Code  new "," start_line_for ","code_object source ","Code  new with_line_numbers highlighted ","code with_line_numbers highlighted ","code with_line_numbers ","Code  new with_line_numbers to_s "," raise ","code_object source ! "," cannot_locate_source_error ","Code  new _object source ","Code  new  with_line_numbers highlighted ","Code  new  with_line_numbers ","Code  new _object source ! "]}," Pry ShowSource process":{"type":"method","name":"process","children":[],"call":[" args= ","obj class name ","obj class ","obj name ","Module  === ","Array  new "," target eval "," args first "," args "," target "," opts present? "," opts "," target eval  class name "," target eval  class "," target eval  name "]}," Pry ShowSource options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry ShowInput process":{"type":"method","name":"process","children":[],"call":[" output puts ","Code  new with_line_numbers ","Code  new "," eval_string "," output "]}," Pry ShowInfo complete":{"type":"method","name":"complete","children":[],"call":["(send\n  (lvar :methods) :map) compact ","(lvar :prefix) join ","method name ","method name start_with? ","methods map ","Pry Method  all_from_class "," binding eval "," binding ","input =~ "]}," Pry ShowInfo file_and_line_for":{"type":"method","name":"file_and_line_for","children":[],"call":[" start_line_for ","code_object source_file ","code_object yard_line ","code_object yard_file ","code_object module_with_yard_docs? "]}," Pry ShowInfo start_line_for":{"type":"method","name":"start_line_for","children":[],"call":["code_object source_line "," opts present? "," opts "]}," Pry ShowInfo use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry ShowInfo obj_name":{"type":"method","name":"obj_name","children":[],"call":[" args join "," args "," args empty? "]}," Pry ShowInfo show_all_modules?":{"type":"method","name":"show_all_modules?","children":[],"call":[" opts present? "," opts ","code_object is_a? "]}," Pry ShowInfo header_options":{"type":"method","name":"header_options","children":[],"call":[]}," Pry ShowInfo method_sections":{"type":"method","name":"method_sections","children":[],"call":["(and\n  (lvar :new)\n  (lvar :old)) to_s ","(pair\n  (sym :owner)\n  (dstr\n    (str \"\\n\")\n    (begin\n      (send\n        (send nil :text) :bold\n        (str \"Owner:\")))\n    (str \" \")\n    (begin\n      (or\n        (send\n          (lvar :code_object) :owner)\n        (str \"N/A\")))\n    (str \"\\n\"))) merge "," header_options ","code_object signature "," text bold "," text ","code_object visibility ","code_object owner ","(pair\n  (sym :owner)\n  (dstr\n    (str \"\\n\")\n    (begin\n      (send nil :bold\n        (str \"Owner:\")))\n    (str \" \")\n    (begin\n      (or\n        (send\n          (lvar :code_object) :owner)\n        (str \"N/A\")))\n    (str \"\\n\"))) merge "," bold "]}," Pry ShowInfo module_header":{"type":"method","name":"module_header","children":[],"call":["h << "," text bold << ","code_object number_of_candidates to_s ","code_object number_of_candidates "," text bold "," text ","code_object number_of_candidates > ","code_object nonblank_name ","code_object module? "," bold << "," bold "," text bold + "]}," Pry ShowInfo method_header":{"type":"method","name":"method_header","children":[],"call":["h << "," method_sections [] "," method_sections ","code_object c_method? "]}," Pry ShowInfo code_object_header":{"type":"method","name":"code_object_header","children":[],"call":[" module_header ","code_object is_a? "," method_header ","code_object real_method_object? "]}," Pry ShowInfo header":{"type":"method","name":"header","children":[],"call":["h << << ","code_object nonblank_name ","@original_code_object nonblank_name ","h << ","Helpers Text  bold "," content_for lines count "," content_for lines "," content_for ","Pry Helpers Text  bold "," code_object_header "," file_and_line_for ","code_object name "," bold ","content lines none? ","content lines ","content lines count "," method_header ","code_object real_method_object? ","Helpers Text  bold + ","  content_for _for lines count ","  content_for _for lines ","  content_for _for "," content_for  lines none? "," content_for  lines "," content_for  lines count "]}," Pry ShowInfo no_definition_message":{"type":"method","name":"no_definition_message","children":[],"call":[" obj_name "]}," Pry ShowInfo content_and_headers_for_all_module_candidates":{"type":"method","name":"content_and_headers_for_all_module_candidates","children":[],"call":["result << ","result << << ","content lines count ","content lines "," content_for ","candidate source_line ","candidate source_file ","mod number_of_candidates ","v + ","mod candidate ","mod number_of_candidates times ","mod name "," content_for  lines count "," content_for  lines ","  content_for _for ","mod candidate  source_line ","mod candidate  source_file ","mod number_of_mod candidate s ","mod mod candidate  ","mod number_of_mod candidate s times "]}," Pry ShowInfo content_and_header_for_code_object":{"type":"method","name":"content_and_header_for_code_object","children":[],"call":[" header << "," content_for "," header "," header + "]}," Pry ShowInfo valid_superclass?":{"type":"method","name":"valid_superclass?","children":[],"call":["code_object super wrapped != ","code_object super wrapped ","code_object super "]}," Pry ShowInfo code_object_with_accessible_source":{"type":"method","name":"code_object_with_accessible_source","children":[],"call":[" code_object_with_accessible_source ","code_object super "," raise "," no_definition_message "," valid_superclass? ! "," valid_superclass? ","code_object candidates find ","code_object candidates ","code_object is_a? "," cannot_locate_source_error ","candidate ! ","code_object candidates find tap ","code_object code_object candidates find s find ","code_object code_object candidates find s ","code_object candidates find  ! ","code_object code_object candidates find s find tap "]}," Pry ShowInfo process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page "," _pry_ pager "," _pry_ "," set_file_and_dir_locals ","code_object source_file "," content_and_header_for_code_object "," code_object_with_accessible_source "," content_and_headers_for_all_module_candidates "," show_all_modules? "," raise "," no_definition_message ","code_object ! ","Pry CodeObject  lookup "," opts [] "," opts "," obj_name ","\n         However, you can view monkey-patches applied to this class.\n + ","code_object candidates any? ","code_object candidates ","Warning: You're inside an object, whose class is defined by means\n + + ","Warning: You're inside an object, whose class is defined by means\n + "," opts [] ! ","code_object c_module? "," obj_name ! "," stagger_output "," cannot_locate_source_error "," code_object_with_accessible_source de_object source_file ","Pry CodeObject  lookup  source_file ","  code_object_with_accessible_source ntent_and_header_for_ code_object_with_accessible_source de_object "," content_and_header_for_Pry CodeObject  lookup  ","  code_object_with_accessible_source de_object_with_accessible_source "," Pry CodeObject  lookup _with_accessible_source ","  code_object_with_accessible_source ntent_and_headers_for_all_module_candidates "," code_object_with_accessible_source de_object ! ","Pry CodeObject  lookup  ! "," code_object_with_accessible_source de_object candidates any? ","Pry CodeObject  lookup  candidates any? "," code_object_with_accessible_source de_object candidates ","Pry CodeObject  lookup  candidates "," code_object_with_accessible_source de_object c_module? ","Pry CodeObject  lookup  c_module? "]}," Pry ShowInfo options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry ShowDoc start_line_for":{"type":"method","name":"start_line_for","children":[],"call":["code_object source_line - ","code_object doc lines count ","code_object doc lines ","code_object doc ","code_object source_line ","code_object source_line nil? "," opts present? "," opts ","code_object command? "]}," Pry ShowDoc header_options":{"type":"method","name":"header_options","children":[],"call":[" merge "]}," Pry ShowDoc docs_for":{"type":"method","name":"docs_for","children":[],"call":["code_object doc ","code_object yard_doc ","code_object module_with_yard_docs? "]}," Pry ShowDoc render_doc_markup_for":{"type":"method","name":"render_doc_markup_for","children":[],"call":[" process_comment_markup "," raise "," obj_name ","docs empty? ","code_object command? "," docs_for "," docs_for  empty? ","  docs_for _for "]}," Pry ShowDoc content_for":{"type":"method","name":"content_for","children":[],"call":["Code  new with_line_numbers to_s ","Code  new with_line_numbers "," use_line_numbers? ","Code  new "," start_line_for "," render_doc_markup_for "]}," Pry ShellMode process":{"type":"method","name":"process","children":[],"call":[" _pry_ custom_completions= "," _pry_ config command_completions "," _pry_ config "," _pry_ "," _pry_ push_prompt "," _pry_ config file_completions "," _pry_ pop_prompt "," _pry_ prompt "," _pry_ prompt= "," state prev_prompt "," state ","Pry Prompt  [] [] ","Pry Prompt  [] "," state prev_prompt= "," state disabled ","Readline  completion_proc= ","Pry InputCompleter  build_completion_proc "," _pry_ instance_eval "," target "]}," Pry ShellCommand process_cd":{"type":"method","name":"process_cd","children":[],"call":[" raise ","Dir  chdir ","File  expand_path "," state old_pwd= ","Dir  pwd "," state "," path_from_cd_path "]}," Pry ShellCommand parse_destination":{"type":"method","name":"parse_destination","children":[],"call":[" raise "," state old_pwd "," state ","dest == ","dest empty? "]}," Pry ShellCommand process":{"type":"method","name":"process","children":[],"call":[" _pry_ config system call "," _pry_ "," output "," _pry_ config system "," _pry_ config "," command_block call "," command_block "," pass_block "," process_cd "," parse_destination ","cmd =~ ","Pry  config system call ","Pry  config system ","Pry  config "," raise ","Dir  chdir ","File  expand_path "]}," Pry SaveFile mode":{"type":"method","name":"mode","children":[],"call":[" opts present? "," opts "]}," Pry SaveFile display_content":{"type":"method","name":"display_content","children":[],"call":[" output puts "," output ","@cc content "]}," Pry SaveFile save_file":{"type":"method","name":"save_file","children":[],"call":[" output puts "," file_name "," output ","f puts ","@cc content ","File  open "," mode "]}," Pry SaveFile file_name":{"type":"method","name":"file_name","children":[],"call":[" opts [] "," opts "]}," Pry SaveFile process":{"type":"method","name":"process","children":[],"call":[" save_file "," display_content "," file_name ! "," file_name "," raise ","@cc content empty? ","@cc content ","CodeCollector  new "," _pry_ "," opts "," args ","CodeCollector  new  content empty? ","CodeCollector  new  content "]}," Pry SaveFile options":{"type":"method","name":"options","children":[],"call":["opt on ","CodeCollector  inject_options "]}," Pry Ri process":{"type":"method","name":"process","children":[{"type":"method","name":"initialize","children":[],"asgn":[null],"call":[]},{"type":"method","name":"page","children":[],"asgn":[{"type":"local","name":"paging_text","value":"StringIO  new "},["StringIO  new "]],"call":["@pager page ","paging_text string ","StringIO  new "]},{"type":"method","name":"formatter","children":[],"asgn":[],"call":["RDoc Markup ToAnsi  new ","@formatter_klass new "]}],"call":[" output puts ","e name "," output ","ri display_names ","RDoc RI PryDriver  new "," _pry_ pager "," _pry_ ","RDoc RI  const_set ","RDoc Markup ToAnsi  new ","@formatter_klass new ","@pager page ","paging_text string ","StringIO  new ","subclass class_eval ","Class  new "," require ","Pry Pager  page ","RDoc RI PryDriver  new  display_names ","RDoc RI PryDRDoc RI PryDriver  new ver  new ","paging_text stRDoc RI PryDriver  new ng ","StringIO  new  string ","StRDoc RI PryDriver  new ngIO  new ","Class  new  class_eval "]}," Pry Reset process":{"type":"method","name":"process","children":[],"call":[" exec "," output puts "," output "]}," Pry ReloadCode check_for_reloadability":{"type":"method","name":"check_for_reloadability","children":[],"call":[" raise ","code_object source_file ","File  exists? ! ","File  exists? ","code_object source_file ! ","code_object ! ","File  exist? ! ","File  exist? "," obj_name "]}," Pry ReloadCode reload_object":{"type":"method","name":"reload_object","children":[],"call":[" output puts "," output "," load ","code_object source_file "," check_for_reloadability ","Pry CodeObject  lookup "," _pry_ ","Pry CodeObject  lookup  source_file "]}," Pry ReloadCode reload_current_file":{"type":"method","name":"reload_current_file","children":[],"call":[" output puts "," current_file "," output "," load "," raise ","File  exists? ! ","File  exists? ","File  exist? ! ","File  exist? "]}," Pry ReloadCode current_file":{"type":"method","name":"current_file","children":[],"call":["File  expand_path "," target eval "," target "]}," Pry ReloadCode process":{"type":"method","name":"process","children":[],"call":[" reload_current_file "," reload_object "," internal_binding? "," target "," args join "," args "," args empty? ! "," args empty? "," reload_code_object "," check_for_reloadability ","Pry CodeObject  lookup "," _pry_ "," obj_name "," obj_name empty? "," reload_Pry CodeObject  lookup  "]}," Pry RaiseUp process":{"type":"method","name":"process","children":[],"call":[" target eval "," captures [] "," captures "," target "," _pry pager page "," help "," _pry pager "," _pry "," captures [] =~ "," stagger_output "]}," Pry Version process":{"type":"method","name":"process","children":[],"call":[" output puts "," output "]}," Pry PryBacktrace process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page "," text bold << << "," _pry_ backtrace join "," _pry_ backtrace "," _pry_ "," text bold << "," text bold "," text "," _pry_ pager "," bold << << "," bold << "," bold "," stagger_output "," text bold + + "," text bold + "]}," Pry Play file_content":{"type":"method","name":"file_content","children":[],"call":[" raise "," default_file inspect "," default_file ","@cc restrict_to_lines ","@cc line_range ","File  read ","File  exists? ","File  exist? "]}," Pry Play default_file":{"type":"method","name":"default_file","children":[],"call":["File  expand_path "," target eval "," target "]}," Pry Play content":{"type":"method","name":"content","children":[],"call":["@cc content "," file_content "," should_use_default_file? "]}," Pry Play should_use_default_file?":{"type":"method","name":"should_use_default_file?","children":[],"call":[" opts present? ! "," opts present? "," opts "," args first ! "," args first "," args "]}," Pry Play code_object":{"type":"method","name":"code_object","children":[],"call":["Pry Code  new "," content "]}," Pry Play content_at_expression":{"type":"method","name":"content_at_expression","children":[],"call":[" code_object expression_at "," opts [] "," opts "," code_object "]}," Pry Play content_after_options":{"type":"method","name":"content_after_options","children":[],"call":[" content "," content_at_expression "," opts present? "," opts "," restrict_to_lines "]}," Pry Play show_input":{"type":"method","name":"show_input","children":[],"call":[" run ","Pry Code  complete_expression? ! ","Pry Code  complete_expression? "," eval_string "," opts present? "," opts "]}," Pry Play perform_play":{"type":"method","name":"perform_play","children":[],"call":[" run "," eval_string << "," content_after_options "," eval_string "," content "," restrict_to_lines "," opts present? "," opts "]}," Pry Play process":{"type":"method","name":"process","children":[],"call":[" show_input "," perform_play ","CodeCollector  new "," _pry_ "," opts "," args "," run ","Pry Code  complete_expression? "," eval_string "]}," Pry Play options":{"type":"method","name":"options","children":[],"call":["opt on ","CodeCollector  inject_options "]}," Pry Nesting process":{"type":"method","name":"process","children":[],"call":[" output puts ","Pry  view_clip ","obj eval "," output ","level == "," _pry_ binding_stack each_with_index "," _pry_ binding_stack "," _pry_ "]}," Pry Ls raise_errors_if_arguments_are_weird":{"type":"method","name":"raise_errors_if_arguments_are_weird","children":[],"call":[" raise "," opts present? "," opts "," error_list each "," error_list ","(array\n  (str \"-l does not make sense with a specified Object\")\n  (sym :locals)\n  (send\n    (send\n      (send nil :args) :empty?) :!)) each "," interrogating_a_module? ! "," interrogating_a_module? "," args empty? ! "," args empty? "," args "]}," Pry Ls error_list":{"type":"method","name":"error_list","children":[],"call":[" opts present? "," opts ","(send\n  (const nil :Module) :===\n  (ivar :@interrogatee)) ! ","Module  === "," args any? "," args "]}," Pry Ls process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page ","ls_entity entities_table "," _pry_ pager "," _pry_ ","LsEntity  new "," args "," opts "," no_user_opts? "," raise_errors_if_arguments_are_weird "," target eval "," args join "," target "," target_self "," args empty? "," stagger_output ","(send nil :write_out_globals) compact join ","(send nil :write_out_globals) compact "," write_out_locals "," write_out_local_names "," write_out_ivars "," write_out_self_methods "," write_out_methods "," write_out_constants "," write_out_globals ","x grep "," lambda ","Regexp  new "," opts [] "," opts present? ","LsEntity  new  entities_table "]}," Pry Ls no_user_opts?":{"type":"method","name":"no_user_opts?","children":[],"call":["(or\n  (or\n    (or\n      (or\n        (or\n          (or\n            (send\n              (send nil :opts) :[]\n              (sym :methods))\n            (send\n              (send nil :opts) :[]\n              (str \"instance-methods\")))\n          (send\n            (send nil :opts) :[]\n            (sym :ppp)))\n        (send\n          (send nil :opts) :[]\n          (sym :globals)))\n      (send\n        (send nil :opts) :[]\n        (sym :locals)))\n    (send\n      (send nil :opts) :[]\n      (sym :constants)))\n  (send\n    (send nil :opts) :[]\n    (sym :ivars))) ! "," opts [] "," opts "]}," Pry Ls options":{"type":"method","name":"options","children":[],"call":["opt on "," jruby? ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n << << ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n << ","  * ","Object  respond_to? ","Helpers Platform  jruby? ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n + + ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n + ","opt banner "," unindent "]}," Pry Ls SelfMethods correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[" interrogating_a_module? "]}," Pry Ls SelfMethods output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," format ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," grep regexp [] ","m name "," grep regexp "," grep ","m owner == ","m owner "," all_methods select "," all_methods "]}," Pry Ls SelfMethods initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," MethodsHelper format":{"type":"method","name":"format","children":[],"call":[" color ","method name ","method visibility == ","method visibility ","method name == ","methods sort_by map ","methods sort_by "]}," MethodsHelper resolution_order":{"type":"method","name":"resolution_order","children":[],"call":["Pry Method  resolution_order ","Pry Method  instance_resolution_order "]}," MethodsHelper all_methods":{"type":"method","name":"all_methods","children":[],"call":["method visibility == ","method visibility ","methods select "," trim_jruby_aliases ","@jruby_switch ! ","Pry Helpers BaseHelpers  jruby? ","Pry Method  all_from_obj ","Pry Method  all_from_class ","Pry Helpers Platform  jruby? "," trim_jruby_aliases  select ","Pry Method  all_from_obj  select ","Pry Method  all_from_class  select "]}," Pry Ls Methods below_ceiling":{"type":"method","name":"below_ceiling","children":[],"call":["ceiling include? ! ","ceiling include? "," lambda "," _pry_ config ls ceiling dup "," _pry_ config ls ceiling "," _pry_ config ls "," _pry_ config "," _pry_ ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) + ","Pry Method  safe_send [] ","Pry Method  safe_send "," interrogatee_mod ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  include? ! ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  include? "," _pry_ config ls (send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  dup "," _pry_ config ls (send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  "]}," Pry Ls Methods correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Ls Methods output_self":{"type":"method","name":"output_self","children":[],"call":["(send\n  (send\n    (send\n      (send nil :resolution_order) :take_while\n      (block-pass\n        (send nil :below_ceiling))) :reverse) :map) join "," output_section "," format ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," grep regexp [] ","m name "," grep regexp "," grep ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar :klass))\n  (array)) select ","methods [] "," resolution_order take_while reverse map "," resolution_order take_while reverse "," resolution_order take_while "," below_ceiling "," resolution_order "," all_methods group_by "," all_methods ","(or\n  (send\n    (lvar : all_methods group_by ) :[]\n    (lvar :klass))\n  (array)) select "," all_methods group_by  [] "," all_ all_methods group_by  group_by "," all_ all_methods group_by  "]}," Pry Ls Methods initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Ls LsEntity entities":{"type":"method","name":"entities","children":[],"call":[" local_vars "," local_names "," instance_vars "," self_methods "," methods "," constants "," globals "]}," Pry Ls LsEntity local_vars":{"type":"method","name":"local_vars","children":[],"call":["LocalVars  new "," _pry_ "]}," Pry Ls LsEntity local_names":{"type":"method","name":"local_names","children":[],"call":[" grep ","LocalNames  new "," _pry_ "]}," Pry Ls LsEntity instance_vars":{"type":"method","name":"instance_vars","children":[],"call":[" grep ","InstanceVars  new "," _pry_ "]}," Pry Ls LsEntity self_methods":{"type":"method","name":"self_methods","children":[],"call":[" grep ","SelfMethods  new "," _pry_ "]}," Pry Ls LsEntity methods":{"type":"method","name":"methods","children":[],"call":[" grep ","Methods  new "," _pry_ "]}," Pry Ls LsEntity constants":{"type":"method","name":"constants","children":[],"call":[" grep ","Constants  new "," _pry_ "]}," Pry Ls LsEntity globals":{"type":"method","name":"globals","children":[],"call":[" grep ","Globals  new "," _pry_ "]}," Pry Ls LsEntity grep":{"type":"method","name":"grep","children":[],"call":["o grep= ","entity tap "]}," Pry Ls LsEntity entities_table":{"type":"method","name":"entities_table","children":[],"call":["(send\n  (send\n    (send nil :entities) :map\n    (block-pass\n      (sym :write_out))) :reject) join ","o ! "," entities map reject "," entities map "," entities "]}," Pry Ls LsEntity initialize":{"type":"method","name":"initialize","children":[],"call":["opts delete ","Grep  new ","Regexp  new ","opts [] [] ","opts [] "]}," Pry Ls LocalVars colorized_assignment_style":{"type":"method","name":"colorized_assignment_style","children":[],"call":["(str \"%-\") % "," color ","desired_width + ","colorized_lhs size - ","lhs size ","colorized_lhs size "," color  size - "," color  size "]}," Pry Ls LocalVars format":{"type":"method","name":"format","children":[],"call":[" colorized_assignment_style "," format_value ","(send\n  (lvar :name_value_pairs) :sort_by) reverse map ","(send\n  (lvar :name_value_pairs) :sort_by) reverse ","value to_s size ","value to_s ","name_value_pairs sort_by "]}," Pry Ls LocalVars output_self":{"type":"method","name":"output_self","children":[],"call":[" format join "," format ","@target eval ","name to_s ","(send\n  (send\n    (ivar :@target) :eval\n    (str \"local_variables\")) :reject) map ","@sticky_locals keys include? ","e to_sym ","@sticky_locals keys ","@target eval reject "]}," Pry Ls LocalVars initialize":{"type":"method","name":"initialize","children":[],"call":["_pry_ sticky_locals ","opts [] "]}," Pry Ls LocalNames format":{"type":"method","name":"format","children":[],"call":[" color ","@sticky_locals include? ","name to_sym ","locals sort_by map ","locals sort_by "]}," Pry Ls LocalNames output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," format "," grep regexp [] ","@target eval "," grep regexp "," grep "]}," Pry Ls LocalNames correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":["@args empty? "]}," Pry Ls LocalNames initialize":{"type":"method","name":"initialize","children":[],"call":["_pry_ sticky_locals "]}," JRubyHacks rubbishness":{"type":"method","name":"rubbishness","children":[],"call":["(send\n  (send\n    (lvar :name) :each_char) :map) inject + ","name size / ","name size ","(send\n  (send\n    (lvar :name) :each_char) :map) inject ","name each_char map ","name each_char "]}," JRubyHacks trim_jruby_aliases":{"type":"method","name":"trim_jruby_aliases","children":[],"call":["(send\n  (lvar :grouped) :map) flatten ","found << ","(send\n  (lvar :found) :any?) ! ","x == ","found any? ","values select "," rubbishness ","m name ","values sort_by ","grouped map ","m name sub gsub downcase ","m name sub gsub ","m name sub ","methods group_by ","grouped flat_map "]}," Interrogatable interrogatee_mod":{"type":"method","name":"interrogatee_mod","children":[],"call":["(send\n  (send\n    (send\n      (lvar :singleton) :ancestors) :grep\n    (const\n      (cbase) :Class)) :reject) first ","c == ","singleton ancestors grep reject ","singleton ancestors grep ","singleton ancestors ","Pry Method  singleton_class_of "," interrogating_a_module? ","(send\n  (send\n    (send\n      (lvar :Pry Method  singleton_class_of ) :ancestors) :grep\n    (const\n      (cbase) :Class)) :reject) first ","Pry Method  singleton_class_of  ancestors grep reject ","Pry Method  singleton_class_of  ancestors grep ","Pry Method  singleton_class_of  ancestors ","Pry Method  Pry Method  singleton_class_of _class_of "]}," Interrogatable interrogating_a_module?":{"type":"method","name":"interrogating_a_module?","children":[],"call":["Module  === "]}," Pry Ls InstanceVars format":{"type":"method","name":"format","children":[],"call":[" color ","(send\n  (lvar :vars) :sort_by) map ","var to_s downcase ","var to_s ","vars sort_by "]}," Pry Ls InstanceVars output_self":{"type":"method","name":"output_self","children":[],"call":["ivars_out + "," output_section "," format ","Pry Method  safe_send "," interrogatee_mod ","Object  === "," output_section  + ","Pry Method  safe_send _out + "]}," Pry Ls InstanceVars correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Ls InstanceVars initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Ls Grep regexp":{"type":"method","name":"regexp","children":[],"call":["x =~ ","x grep ","x instance_of? "," proc "]}," Pry Ls Grep initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Ls Globals format":{"type":"method","name":"format","children":[],"call":[" color ","BUILTIN_GLOBALS  include? ","PSEUDO_GLOBALS  include? ","globals map sort_by map ","globals map sort_by ","globals map "]}," Pry Ls Globals output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," grep regexp [] "," grep regexp "," grep "," format ","@target eval "]}," Pry Ls Globals initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Ls Formatter grep":{"type":"method","name":"grep","children":[],"call":[" proc "]}," Pry Ls Formatter output_self":{"type":"method","name":"output_self","children":[],"call":[" raise "]}," Pry Ls Formatter correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Ls Formatter format_value":{"type":"method","name":"format_value","children":[],"call":["Pry ColorPrinter  pp "]}," Pry Ls Formatter output_section":{"type":"method","name":"output_section","children":[],"call":["Pry Helpers  tablify_or_one_line ","Pry Helpers Text  bold "," color ","body compact empty? ","body compact ","@_pry_ config "]}," Pry Ls Formatter color":{"type":"method","name":"color","children":[],"call":["Pry Helpers Text  send "," _pry_ config ls [] "," _pry_ config ls "," _pry_ config "," _pry_ "]}," Pry Ls Formatter write_out":{"type":"method","name":"write_out","children":[],"call":[" output_self "," correct_opts? "]}," Pry Ls Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["_pry_ current_context "]}," Pry Ls Constants format":{"type":"method","name":"format","children":[],"call":[" color ","Module  === ","mod const_get ","const < ","mod autoload? ! ","mod autoload? ","constants sort_by map ","constants sort_by "," show_deprecated_constants? ! "," show_deprecated_constants? ","DEPRECATED_CONSTANTS  include? ","Object  respond_to? "]}," Pry Ls Constants output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," grep regexp [] "," format "," grep regexp "," grep ","WrappedModule  new constants ","WrappedModule  new "," interrogatee_mod ","WrappedModule  new WrappedModule  new constants  "," interrogatee_ interrogatee_mod  "]}," Pry Ls Constants correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[" interrogating_a_module? "]}," Pry Ls Constants initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","opts dconstants? "]}," ListPrompts selected_prompt?":{"type":"method","name":"selected_prompt?","children":[],"call":[" _pry_ prompt == ","prompt [] "," _pry_ prompt "," _pry_ "]}," ListPrompts selected_text":{"type":"method","name":"selected_text","children":[],"call":[" text red "," text "]}," ListPrompts prompt_map":{"type":"method","name":"prompt_map","children":[],"call":[]}," ListPrompts process":{"type":"method","name":"process","children":[],"call":[" output puts "," output ","prompt [] "," selected_text "," selected_prompt? "," output write "," text bold "," text "," prompt_map each "," prompt_map "," heading + "," heading "]}," ListInspectors selected_inspector?":{"type":"method","name":"selected_inspector?","children":[],"call":[" _pry_ print == ","inspector [] "," _pry_ print "," _pry_ "]}," ListInspectors selected_text":{"type":"method","name":"selected_text","children":[],"call":[" text red "," text "," red "]}," ListInspectors inspector_map":{"type":"method","name":"inspector_map","children":[],"call":[]}," ListInspectors process":{"type":"method","name":"process","children":[],"call":[" output puts "," output ","inspector [] "," selected_text "," selected_inspector? "," output write "," text bold "," text "," inspector_map each "," inspector_map "," heading + "," heading "," bold "]}," Pry JumpTo process":{"type":"method","name":"process","children":[],"call":[" output puts "," output ","nesting_level - "," _pry_ binding_stack slice! "," _pry_ binding_stack size "," _pry_ binding_stack "," _pry_ ","break_level + "," _pry_ binding_stack size - ","break_level to_i "," _pry_ binding_stack= "," _pry_ binding_stack [] "," _pry_ binding_stack size -  - ","break_level to_i  + ","break_level to_i  to_i "]}," Pry InstallCommand process":{"type":"method","name":"process","children":[],"call":[" output puts "," text green "," text "," output "," raise "," require ","gems_to_install each ","Rubygem  install ","Rubygem  installed? "," Array ","command options [] ","command options "," command_dependencies_met? "," find_command "," green ","Gem  refresh ","Gem DependencyInstaller  new install ","Gem DependencyInstaller  new ","command name "," Array  each "," find_command  options [] "," find_command  options ","  find_command _dependencies_met? "," find_ find_command  "," find_command  name "]}," Pry ImportSet process":{"type":"method","name":"process","children":[],"call":[" _pry_ commands import "," _pry_ commands "," _pry_ "," target eval "," arg_string "," target "," raise "," command_set nil? "," command_set "," command_ target eval  nil? "," command_ target eval  "]}," Pry Hist find_history":{"type":"method","name":"find_history","children":[],"call":["Pry  Code ","h [] ","Pry  history to_a last ","Pry  history session_line_count ","Pry  history ","Pry  history to_a "," opts present? "," opts ","Pry  history filter ","Pry  history to_a last  [] ","Pry  history to_a  [] ","Pry  Pry  history to_a last istory to_a last ","Pry  Pry  history to_a istory to_a last ","Pry  Pry  history to_a last istory session_line_count ","Pry  Pry  history to_a istory session_line_count ","Pry  Pry  history to_a last istory ","Pry  Pry  history to_a istory ","Pry  Pry  history to_a last istory to_a ","Pry  Pry  history to_a istory to_a ","Pry  Pry  history to_a last istory filter ","Pry  Pry  history to_a istory filter "]}," Pry Hist check_for_juxtaposed_replay":{"type":"method","name":"check_for_juxtaposed_replay","children":[],"call":[" raise ","index min ","index max nil? ","index max ","index min == "," opts [] "," opts ","replay_sequence split join ","replay_sequence split ","_slop present? ","_slop parse ","replay_sequence split [] "," slop ","replay_sequence =~ ","index min  min "," opts []  min ","index min  max nil? "," opts []  max nil? ","index min  max "," opts []  max ","index min  min == "," opts []  min == ","replay_sequence split join  split join ","replay_sequence split join  split "," slop  present? "," slop  parse ","replay_sequence split join  split [] ","replay_sequence split join  =~ "]}," Pry Hist process_replay":{"type":"method","name":"process_replay","children":[],"call":[" _pry_ eval "," _pry_ ","replay_sequence lines each ","replay_sequence lines "," check_for_juxtaposed_replay ","@history raw ","@history between "," opts [] "," opts "," _pry_ input= ","StringIO  new "," _pry_ input_stack push "," _pry_ input "," _pry_ input_stack ","@history raw  lines each ","@history raw  lines ","@history between  raw ","@history between  between "]}," Pry Hist process_clear":{"type":"method","name":"process_clear","children":[],"call":[" output puts "," output ","Pry  history clear ","Pry  history "]}," Pry Hist process_save":{"type":"method","name":"process_save","children":[],"call":[" output puts "," output ","f write ","@history raw ","File  open ","File  expand_path "," opts [] "," opts "," args first "," args "," raise ","@history between ","@history between  raw ","@history between  between "]}," Pry Hist process_display":{"type":"method","name":"process_display","children":[],"call":["@history print_to_output "," _pry_ pager open "," _pry_ pager "," _pry_ ","@history with_line_numbers "," opts present? "," opts "," render_output ","@history with_line_numbers  print_to_output ","@history with_line_numbers  with_line_numbers "]}," Pry Hist process":{"type":"method","name":"process","children":[],"call":[" process_display "," process_replay "," opts present? "," opts "," process_clear "," process_save "," command_set valid_command? ! "," command_set valid_command? ","loc line "," command_set ","@history select ","@history between "," opts [] ","@history take_lines ","(or\n  (send\n    (send nil :opts) :[]\n    (sym :tail))\n  (int 10)) -@ ","@history grep "," find_history ","Pry  Code ","Pry  history to_a ","Pry  history ","@history grep  select ","@history between  select "," find_history  select ","Pry  Code  select ","@history grep  between ","@history between  between "," find_history  between ","Pry  Code  between ","@history grep  take_lines ","@history between  take_lines "," find_history  take_lines ","Pry  Code  take_lines ","@history grep  grep ","@history between  grep "," find_history  grep ","Pry  Code  grep "]}," Pry Hist options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Help group_sort_key":{"type":"method","name":"group_sort_key","children":[],"call":["(str \"Help\") index ","group_name gsub "]}," Pry Help normalize":{"type":"method","name":"normalize","children":[],"call":["key downcase gsub ","key downcase "]}," Pry Help search_hash":{"type":"method","name":"search_hash","children":[],"call":["matching []= "," normalize start_with? "," normalize "," normalize == ","key is_a? ","hash each_pair "]}," Pry Help display_command":{"type":"method","name":"display_command","children":[],"call":[" _pry_ pager page ","command new help ","command new "," _pry_ pager "," _pry_ "," stagger_output "]}," Pry Help display_filtered_commands":{"type":"method","name":"display_filtered_commands","children":[],"call":[" display_index ","filtered values "," display_command ","filtered values first ","filtered size == ","filtered size "," raise "," args first "," args ","filtered empty? "," search_hash "," visible_commands "," search_hash  values "," search_hash  values first "," search_hash  size == "," search_hash  size "," search_hash  empty? "]}," Pry Help display_filtered_search_results":{"type":"method","name":"display_filtered_search_results","children":[],"call":[" display_filtered_commands "," display_index ","groups size > ","groups size "," search_hash "," command_groups "," search_hash  size > "," search_hash  size "," command_ search_hash  "]}," Pry Help display_search":{"type":"method","name":"display_search","children":[],"call":[" display_filtered_search_results "," display_command "," command_set find_command_for_help "," command_set "," display_ command_set find_command_for_help  ","  command_set find_command_for_help _set find_ command_set find_command_for_help _for_help ","  command_set find_command_for_help _set "]}," Pry Help sorted_commands":{"type":"method","name":"sorted_commands","children":[],"call":["command options [] to_s ","command options [] ","command options ","commands sort_by "]}," Pry Help sorted_group_names":{"type":"method","name":"sorted_group_names","children":[],"call":["groups keys sort_by "," method ","groups keys "]}," Pry Help help_text_for_commands":{"type":"method","name":"help_text_for_commands","children":[],"call":["(begin\n  (send\n    (send nil :text) :bold\n    (send\n      (lvar :name) :capitalize))) << ","(send\n  (lvar :commands) :map) join ","command description capitalize ","command description ","command options [] to_s ljust ","command options [] to_s ","command options [] ","command options ","commands map "," text bold ","name capitalize "," text ","(begin\n  (send nil :bold\n    (send\n      (lvar :name) :capitalize))) << "," bold ","(begin\n  (send\n    (send nil :text) :bold\n    (lvar :name))) + "]}," Pry Help display_index":{"type":"method","name":"display_index","children":[],"call":[" _pry_ pager page ","help_text join "," _pry_ pager "," _pry_ ","help_text << "," help_text_for_commands ","commands any? "," sorted_commands ","groups [] "," sorted_group_names each "," sorted_group_names "," stagger_output "," help_text_for_ sorted_commands  "," sorted_commands  any? "," sorted_ sorted_commands  "]}," Pry Help process":{"type":"method","name":"process","children":[],"call":[" display_search "," args first "," args "," display_index "," command_groups "," args empty? "]}," Pry Help command_groups":{"type":"method","name":"command_groups","children":[],"call":[" visible_commands values group_by "," visible_commands values "," visible_commands "]}," Pry Help visible_commands":{"type":"method","name":"visible_commands","children":[],"call":["visible []= ","command description empty? ! ","command description empty? ","command description "," commands each "," commands "]}," Pry Gist gist_content":{"type":"method","name":"gist_content","children":[],"call":[" output puts "," output ","message << "," Gist  copy ","response [] "," Gist  gist "," opts [] ! ! "," opts [] ! "," opts [] "," opts ","Jist  copy ","Jist  gist "," Gist  gist  [] ","Jist  gist  [] "]}," Pry Gist comment_expression_result_for_gist":{"type":"method","name":"comment_expression_result_for_gist","children":[],"call":["content << ","index == ","result lines each_with_index ","result lines "]}," Pry Gist input_content":{"type":"method","name":"input_content","children":[],"call":["content << "," comment_expression_result_for_gist "," _pry_ config gist inspecter call "," _pry_ output_array [] "," _pry_ output_array "," _pry_ "," _pry_ config gist inspecter "," _pry_ config gist "," _pry_ config ","code !~ ","code != ","index + ","range first "," Array each_with_index "," Array "," _pry_ input_array [] "," _pry_ input_array ","CodeCollector  input_expression_ranges each ","CodeCollector  input_expression_ranges "," _pry_ output_ring [] "," _pry_ output_ring "," _pry_ input_ring [] "," _pry_ input_ring ","Pry  config gist inspecter call ","Pry  config gist inspecter ","Pry  config gist ","Pry  config "]}," Pry Gist clipboard_content":{"type":"method","name":"clipboard_content","children":[],"call":[" output puts "," output "," Gist  copy ","Jist  copy "]}," Pry Gist process":{"type":"method","name":"process","children":[],"call":[" gist_content ","cc file ","cc content "," input_content "," opts present? "," opts "," clipboard_content "," raise ","cc content =~ ","CodeCollector  new "," _pry_ "," args "," Gist  login! ","Jist  login! "," gist_cc content  "," gist_ input_content  ","CodeCollector  new  file ","cc cc content  ","cc  input_content  ","CodeCollector  new  content "," input_cc content  "," input_ input_content  "," clipboard_cc content  "," clipboard_ input_content  ","cc cc content  =~ ","cc  input_content  =~ ","CodeCollector  new  content =~ "]}," Pry Gist options":{"type":"method","name":"options","children":[],"call":["opt on ","CodeCollector  inject_options "]}," Pry Gist setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Pry GemOpen complete":{"type":"method","name":"complete","children":[],"call":["Rubygem  complete "]}," Pry GemOpen process":{"type":"method","name":"process","children":[],"call":["Pry Editor  invoke_editor ","Dir  chdir ","Rubygem  spec full_gem_path ","Rubygem  spec ","Pry Editor  new invoke_editor ","Pry Editor  new "," _pry_ "]}," Pry GemList process":{"type":"method","name":"process","children":[],"call":[" output puts ","versions join "," text default "," text "," output "," text green ","spec version to_s ","spec version "," text bright_green ","index == ","specs each_with_index map ","specs each_with_index ","Gem Version  new <=> ","Gem Version  new ","a version ","b version ","specs sort! ","gems each ","Rubygem  list group_by ","Rubygem  list ","Regexp  compile "," default "," green "," bright_green ","Rubygem  list group_by  each "]}," Pry GemInstall process":{"type":"method","name":"process","children":[],"call":[" require ","gem split join ","gem split "," output puts "," text green "," text "," output ","Rubygem  install "," green "]}," Pry GemInstall setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Pry GemCd complete":{"type":"method","name":"complete","children":[],"call":["Rubygem  complete "]}," Pry GemCd process":{"type":"method","name":"process","children":[],"call":[" output puts ","Dir  pwd "," output ","Dir  chdir ","Rubygem  spec full_gem_path ","Rubygem  spec "]}," Pry FixIndent process":{"type":"method","name":"process","children":[],"call":[" eval_string replace "," eval_string ","Pry Indent  indent "]}," Pry FindMethod content_search":{"type":"method","name":"content_search","children":[],"call":["meth source =~ "," pattern ","meth source "," search_all_methods "]}," Pry FindMethod name_search":{"type":"method","name":"name_search","children":[],"call":["meth name =~ "," pattern ","meth name "," search_all_methods "]}," Pry FindMethod search_all_methods":{"type":"method","name":"search_all_methods","children":[],"call":["matches << ","done [] []= ","method name ","done [] ","method owner ","done [] [] ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :all_from_class\n    (lvar :klass)) :+\n  (send\n    (const\n      (const nil :Pry) :Method) :all_from_obj\n    (lvar :klass))) each ","Pry Method  all_from_class + ","Pry Method  all_from_obj ","Pry Method  all_from_class "," recurse_namespace ","h []= ","Hash  new "]}," Pry FindMethod recurse_namespace":{"type":"method","name":"recurse_namespace","children":[],"call":[" recurse_namespace ","klass const_get ","klass autoload? ","klass constants each ","klass constants ","done []= ","done [] ","(send\n  (const nil :Module) :===\n  (lvar :klass)) ! ","Module  === ","klass klass const_get _get ","klass klass const_get ants each ","klass klass const_get ants ","(send\n  (klass const_get  nil :Module) :===\n  (lvar :klass)) ! "]}," Pry FindMethod matched_method_lines":{"type":"method","name":"matched_method_lines","children":[],"call":["(send\n  (send\n    (send\n      (lvar :method) :source) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :select) join ","  * ","header length ","x =~ "," pattern ","method source split select ","method source split ","method source "]}," Pry FindMethod additional_info":{"type":"method","name":"additional_info","children":[],"call":[":  << "," colorize_code "," matched_method_lines "," opts content? "," opts ",":  + "]}," Pry FindMethod print_matches_for_class":{"type":"method","name":"print_matches_for_class","children":[],"call":[" output puts ","header + "," additional_info "," output ","method name_with_owner ","grouped [] each ","grouped [] "," text bold ","klass name "," text "," bold ","method name_with_owner  + "]}," Pry FindMethod print_matches":{"type":"method","name":"print_matches","children":[],"call":[" print_matches_for_class ","order each ","x to_s ","x name ","grouped keys sort_by ","grouped keys ","matches group_by ","matches group_by  keys sort_by ","matches group_by  keys "]}," Pry FindMethod search_class":{"type":"method","name":"search_class","children":[],"call":["klass class ","klass is_a? "," target_self "," target eval "," args [] "," args "," target "," target_self  class "," target eval  class "," target_self  is_a? "," target eval  is_a? "]}," Pry FindMethod show_search_results":{"type":"method","name":"show_search_results","children":[],"call":[" print_matches "," output puts "," text bold "," text "," output ","matches empty? "," bold "]}," Pry FindMethod pattern":{"type":"method","name":"pattern","children":[],"call":[" Regexp  new "," args [] "," args "]}," Pry FindMethod process":{"type":"method","name":"process","children":[],"call":[" show_search_results "," name_search "," content_search "," opts content? "," opts "," search_class "," args size < "," args size "," args "]}," Pry FindMethod options":{"type":"method","name":"options","children":[],"call":["opt on ","opti on "]}," Pry ExitProgram process":{"type":"method","name":"process","children":[],"call":["Kernel  exit "," target eval to_i "," target eval "," arg_string "," target ","Pry  save_history ","Pry  config history should_save ","Pry  config history ","Pry  config "]}," Pry ExitAll process":{"type":"method","name":"process","children":[],"call":[" throw "," _pry_ binding_stack clear "," _pry_ binding_stack "," _pry_ "," target eval "," arg_string "," target "]}," Pry Exit process_pop_and_return":{"type":"method","name":"process_pop_and_return","children":[],"call":[" target eval "," arg_string "," target "," arg_string empty? "," _pry_ binding_stack pop eval "," _pry_ binding_stack pop "," _pry_ binding_stack "," _pry_ "]}," Pry Exit process":{"type":"method","name":"process","children":[],"call":[" process_pop_and_return "," _pry_ run_command "," arg_string "," _pry_ "," _pry_ binding_stack one? "," _pry_ binding_stack "]}," Pry Edit probably_a_file?":{"type":"method","name":"probably_a_file?","children":[],"call":["str =~ ","(str \".rb\") include? ","File  extname "]}," Pry Edit initial_temp_file_content":{"type":"method","name":"initial_temp_file_content","children":[],"call":["x strip != ","x strip "," _pry_ input_array reverse_each find "," _pry_ input_array reverse_each "," _pry_ input_array "," _pry_ "," eval_string "," eval_string strip != "," eval_string strip "," input_expression "," opts present? "," opts "," _pry_ input_ring to_a reverse_each find "," _pry_ input_ring to_a reverse_each "," _pry_ input_ring to_a "," _pry_ input_ring "]}," Pry Edit reload?":{"type":"method","name":"reload?","children":[],"call":[" never_reload? ! "," never_reload? ","file_name end_with? "," reloadable? "]}," Pry Edit never_reload?":{"type":"method","name":"never_reload?","children":[],"call":[" _pry_ config disable_auto_reload "," _pry_ config "," _pry_ "," opts present? "," opts ","Pry  config disable_auto_reload ","Pry  config "]}," Pry Edit reloadable?":{"type":"method","name":"reloadable?","children":[],"call":[" opts present? "," opts "]}," Pry Edit input_expression":{"type":"method","name":"input_expression","children":[],"call":[" raise "," opts [] "," opts "," _pry_ input_array [] "," _pry_ input_array "," _pry_ ","(or\n  (send\n    (send\n      (send nil :_pry_) :input_array) :[]\n    (send\n      (send nil :opts) :[]\n      (sym :i)))\n  (array)) join "," _pry_ input_ring [] "," _pry_ input_ring ","(or\n  (send\n    (send\n      (send nil :_pry_) :input_ring) :[]\n    (send\n      (send nil :opts) :[]\n      (sym :i)))\n  (array)) join "]}," Pry Edit bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :ex)) count > ","(send\n  (send nil :opts) :present?\n  (sym :ex)) count "," filename_argument empty? ! "," filename_argument empty? "," filename_argument "," opts present? "," opts "]}," Pry Edit patch_exception?":{"type":"method","name":"patch_exception?","children":[],"call":[" opts present? "," opts "]}," Pry Edit pry_method?":{"type":"method","name":"pry_method?","children":[],"call":["code_object pry_method? ","code_object is_a? "]}," Pry Edit code_object":{"type":"method","name":"code_object","children":[],"call":["Pry CodeObject  lookup "," _pry_ "," filename_argument "," probably_a_file? ! "," probably_a_file? "]}," Pry Edit filename_argument":{"type":"method","name":"filename_argument","children":[],"call":[" args join "," args "]}," Pry Edit file_edit":{"type":"method","name":"file_edit","children":[],"call":[" load "," silence_warnings "," reload? "," set_file_and_dir_locals ","Pry Editor  new invoke_editor ","Pry Editor  new "," _pry_ "," ensure_file_name_is_valid "," file_and_line ","TOPLEVEL_BINDING  eval ","File  read ","Pry Editor  invoke_editor "]}," Pry Edit file_and_line":{"type":"method","name":"file_and_line","children":[],"call":[" opts [] to_i "," opts [] "," opts "," opts present? ","FileAndLineLocator  from_filename_argument "," filename_argument ","FileAndLineLocator  from_code_object "," code_object "," file_and_line_for_current_exception ","FileAndLineLocator  from_binding "," target "]}," Pry Edit file_and_line_for_current_exception":{"type":"method","name":"file_and_line_for_current_exception","children":[],"call":["FileAndLineLocator  from_exception "," opts [] to_i "," opts [] "," opts "," _pry_ last_exception "," _pry_ "]}," Pry Edit ensure_file_name_is_valid":{"type":"method","name":"ensure_file_name_is_valid","children":[],"call":[" raise "," not_a_real_file? "," filename_argument ","file_name ! "]}," Pry Edit apply_runtime_patch":{"type":"method","name":"apply_runtime_patch","children":[],"call":[" raise "," code_object "," code_object redefine ","Pry Editor  new edit_tempfile_with_content "," code_object source ","Pry Editor  new "," _pry_ "," code_object is_a? ","ExceptionPatcher  new perform_patch ","ExceptionPatcher  new "," file_and_line_for_current_exception "," state "," patch_exception? ","MethodPatcher  new perform_patch ","MethodPatcher  new "]}," Pry Edit runtime_patch?":{"type":"method","name":"runtime_patch?","children":[],"call":[" pry_method? "," code_object "," opts present? "," opts "," file_based_exception? ! "," file_based_exception? "," previously_patched? "]}," Pry Edit file_based_exception?":{"type":"method","name":"file_based_exception?","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Edit repl_edit":{"type":"method","name":"repl_edit","children":[],"call":[" eval_string replace "," eval_string "," silence_warnings ","Pry Editor  new edit_tempfile_with_content "," initial_temp_file_content lines count "," initial_temp_file_content lines "," initial_temp_file_content ","Pry Editor  new "," _pry_ ","Pry  history push ","Pry  history "," repl_reload? ","Pry Editor  edit_tempfile_with_content ","Pry Editor  new edit_tempfile_with_Pry Editor  new edit_tempfile_with_content  ","Pry Editor  new edit_tempfile_with_Pry Editor  edit_tempfile_with_content  "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  lines count "," initial_temp_file_Pry Editor  edit_tempfile_with_content  lines count "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  lines "," initial_temp_file_Pry Editor  edit_tempfile_with_content  lines "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  "," initial_temp_file_Pry Editor  edit_tempfile_with_content  ","Pry Editor  edit_tempfile_with_Pry Editor  new edit_tempfile_with_content  ","Pry Editor  edit_tempfile_with_Pry Editor  edit_tempfile_with_content  "]}," Pry Edit repl_edit?":{"type":"method","name":"repl_edit?","children":[],"call":[" filename_argument empty? "," filename_argument "," opts present? ! "," opts present? "," opts "]}," Pry Edit process":{"type":"method","name":"process","children":[],"call":[" file_edit "," apply_runtime_patch "," runtime_patch? "," repl_edit "," repl_edit? "," raise "," bad_option_combination? "]}," Pry Edit options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Edit FileAndLineLocator from_filename_argument":{"type":"method","name":"from_filename_argument","children":[],"call":["1 to_i ","f sub! ","File  expand_path ","File  expand_path  sub! ","Fi1 to_i e  expand_path "]}," Pry Edit FileAndLineLocator from_exception":{"type":"method","name":"from_exception","children":[],"call":[" raise ","Pry  eval_path == ","Pry  eval_path ","file_name nil? ","exception bt_source_location_for ","exception nil? ","RbxPath  convert_path_to_full ","RbxPath  is_core_path? ","RbxPath  convert_path_to_full  nil? "]}," Pry Edit FileAndLineLocator from_code_object":{"type":"method","name":"from_code_object","children":[],"call":[" raise ","code_object source_line ","code_object source_file ","File  exists? ","code_object source_file to_s ","File  exist? "]}," Pry Edit FileAndLineLocator from_binding":{"type":"method","name":"from_binding","children":[],"call":["target eval "]}," Pry Edit ExceptionPatcher perform_patch":{"type":"method","name":"perform_patch","children":[],"call":[" state dynamical_ex_file= ","source split "," state "," _pry_ evaluate_ruby "," _pry_ ","Pry Editor  new edit_tempfile_with_content ","Pry Editor  new ","File  read "," state dynamical_ex_file "," file_and_line ","Pry Editor  edit_tempfile_with_content ","Pry Editor  new edit_tempfile_with_content  split ","Pry Editor  edit_tempfile_with_content  split "]}," Pry Edit ExceptionPatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry DisablePry process":{"type":"method","name":"process","children":[],"call":[" _pry_ run_command "," _pry_ ","ENV  []= "]}," Pry CodeCollector convert_to_range":{"type":"method","name":"convert_to_range","children":[],"call":["n is_a? ! ","n is_a? "]}," Pry CodeCollector could_not_locate":{"type":"method","name":"could_not_locate","children":[],"call":[" raise "]}," Pry CodeCollector file_content":{"type":"method","name":"file_content","children":[],"call":[" could_not_locate "," obj_name ","File  read "," file= ","File  exists? ","File  exist? "]}," Pry CodeCollector code_object_source_or_file":{"type":"method","name":"code_object_source_or_file","children":[],"call":[" file_content "," code_object source "," code_object "]}," Pry CodeCollector code_object_doc":{"type":"method","name":"code_object_doc","children":[],"call":[" could_not_locate "," obj_name "," code_object doc "," code_object "]}," Pry CodeCollector pry_array_content_as_string":{"type":"method","name":"pry_array_content_as_string","children":[],"call":["all << ","block call ","ranged_array compact each ","ranged_array compact "," Array ","array [] "," raise "," convert_to_range first == "," convert_to_range first "," convert_to_range ","ranges each "]}," Pry CodeCollector bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :in)) count > ","(send\n  (send nil :opts) :present?\n  (sym :in)) count "," args empty? ! "," args empty? "," args "," opts present? "," opts "]}," Pry CodeCollector obj_name":{"type":"method","name":"obj_name","children":[],"call":[" args join "," args "," args empty? "," no_arg "]}," Pry CodeCollector line_range":{"type":"method","name":"line_range","children":[],"call":[" one_index_range_or_number "," opts [] "," opts "," opts present? "]}," Pry CodeCollector pry_input_content":{"type":"method","name":"pry_input_content","children":[],"call":[" pry_array_content_as_string "," class input_expression_ranges "," class "," _pry_ input_array "," _pry_ "," _pry_ input_ring "]}," Pry CodeCollector pry_output_content":{"type":"method","name":"pry_output_content","children":[],"call":[" _pry_ config gist inspecter call "," _pry_ config gist inspecter "," _pry_ config gist "," _pry_ config "," _pry_ "," pry_array_content_as_string "," class output_result_ranges "," class "," _pry_ output_array "," _pry_ output_ring ","Pry  config gist inspecter call ","Pry  config gist inspecter ","Pry  config gist ","Pry  config "]}," Pry CodeCollector restrict_to_lines":{"type":"method","name":"restrict_to_lines","children":[],"call":[" Array join "," Array ","content lines to_a [] ","content lines to_a ","content lines "]}," Pry CodeCollector code_object":{"type":"method","name":"code_object","children":[],"call":["Pry CodeObject  lookup "," opts [] "," opts "," _pry_ "," obj_name "]}," Pry CodeCollector content":{"type":"method","name":"content","children":[],"call":[" restrict_to_lines "," line_range "," code_object_source_or_file "," code_object_doc "," opts present? "," opts "," pry_input_content "," pry_output_content "," raise "," bad_option_combination? "]}," Pry CodeCollector inject_options":{"type":"method","name":"inject_options","children":[],"call":[]}," Pry CodeCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChangePrompt prompt_map":{"type":"method","name":"prompt_map","children":[],"call":[]}," ChangePrompt process":{"type":"method","name":"process","children":[],"call":[" raise "," _pry_ prompt= "," prompt_map [] [] "," prompt_map [] "," prompt_map "," _pry_ "," prompt_map key? "," change_prompt "," list_prompts "," opts present? "," opts "]}," ChangeInspector inspector_map":{"type":"method","name":"inspector_map","children":[],"call":[]}," ChangeInspector process":{"type":"method","name":"process","children":[],"call":[" raise "," output puts "," output "," _pry_ print= "," inspector_map [] [] "," inspector_map [] "," inspector_map "," _pry_ "," inspector_map key? "]}," Pry Cd process":{"type":"method","name":"process","children":[],"call":[" _pry_ binding_stack= "," _pry_ "," state old_stack= "," _pry_ binding_stack "," state ","stack != ","ObjectPath  new resolve ","ObjectPath  new "," arg_string "," state old_stack "," state old_stack empty? "," arg_string strip == "," arg_string strip "," context_from_object_path "," _pry_ binding_ObjectPath  new resolve = "," state old_ObjectPath  new resolve = "," _pry_ binding_ObjectPath  new resolve  ","ObjectPath  new resolve  != "," state old_ObjectPath  new resolve  "," state old_ObjectPath  new resolve  empty? "]}," Pry Cat load_path_completions":{"type":"method","name":"load_path_completions","children":[],"call":["f sub! ","path + ","File  directory? ","Dir  [] map ","Dir  [] ","$LOAD_PATH flat_map "]}," Pry Cat complete":{"type":"method","name":"complete","children":[],"call":[" | "," load_path_completions "," + ","Bond Rc  files ","search split last ","search split "]}," Pry Cat process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page "," _pry_ pager "," _pry_ ","FileFormatter  new format ","FileFormatter  new "," opts "," args first "," args ","InputExpressionFormatter  new format ","InputExpressionFormatter  new "," _pry_ input_array "," opts present? ","ExceptionFormatter  new format ","ExceptionFormatter  new "," _pry_ last_exception "," _pry_ input_ring "," stagger_output "]}," Pry Cat options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Cat InputExpressionFormatter normalized_expression_range":{"type":"method","name":"normalized_expression_range","children":[],"call":[" absolute_index_range "," input_expressions length "," input_expressions "," opts [] "," opts "," input_expressions count "]}," Pry Cat InputExpressionFormatter numbered_input_items":{"type":"method","name":"numbered_input_items","children":[],"call":["s == ","s nil? "," normalized_expression_range zip reject "," normalized_expression_range zip "," selected_input_items "," normalized_expression_range "]}," Pry Cat InputExpressionFormatter selected_input_items":{"type":"method","name":"selected_input_items","children":[],"call":[" input_expressions [] "," normalized_expression_range "," input_expressions "]}," Pry Cat InputExpressionFormatter format":{"type":"method","name":"format","children":[],"call":[" decorate ","Pry  Code "," selected_input_items first "," selected_input_items ","content << << "," decorate to_s ","Pry  Code with_indentation ","content << ","Helpers Text  bold ","i to_s "," numbered_input_items each "," numbered_input_items "," numbered_input_items length > "," numbered_input_items length "," raise "," numbered_input_items length < "]}," Pry Cat InputExpressionFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Cat FileFormatter detect_code_type_from_file":{"type":"method","name":"detect_code_type_from_file","children":[],"call":["File  basename split ","File  basename ","code_type == ","@code_from_file code_type ","File  basename split first ","File  baseFile  basename split first  split ","File  baseFile  basename split first  ","@code_from_file code_type  == ","@code_from_file @code_from_file code_type  ","File  baseFile  basename split first  split first "]}," Pry Cat FileFormatter code_type":{"type":"method","name":"code_type","children":[],"call":[" detect_code_type_from_file "," file_name "," opts [] "," opts "]}," Pry Cat FileFormatter decorate":{"type":"method","name":"decorate","children":[],"call":[" around "," code_window_size "," line_number ","content around "]}," Pry Cat FileFormatter code_window_size":{"type":"method","name":"code_window_size","children":[],"call":[" _pry_ config default_window_size "," _pry_ config "," _pry_ ","Pry  config default_window_size ","Pry  config "]}," Pry Cat FileFormatter line_number":{"type":"method","name":"line_number","children":[],"call":[" file_and_line last "," file_and_line "]}," Pry Cat FileFormatter file_name":{"type":"method","name":"file_name","children":[],"call":[" file_and_line first "," file_and_line "]}," Pry Cat FileFormatter file_and_line":{"type":"method","name":"file_and_line","children":[],"call":["line_num to_i "," file_with_embedded_line split "," file_with_embedded_line ","File  expand_path "]}," Pry Cat FileFormatter format":{"type":"method","name":"format","children":[],"call":[" decorate "," set_file_and_dir_locals "," _pry_ current_context "," _pry_ "," file_name "," raise "," file_with_embedded_line ! "," file_with_embedded_line ","Pry Code  from_file "]}," Pry Cat FileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Pry Code  from_file "," file_name "," raise ","file_with_embedded_line ! "]}," Pry Cat ExceptionFormatter header":{"type":"method","name":"header","children":[],"call":[" unindent "," ex backtrace size - "," ex backtrace size "," ex backtrace "," ex ","Helpers Text  bold "," backtrace_level "," backtrace_line "," backtrace_file "," ex message "," ex class "," bold "]}," Pry Cat ExceptionFormatter start_and_end_line_for_code_window":{"type":"method","name":"start_and_end_line_for_code_window","children":[],"call":[" backtrace_line + "," code_window_size "," backtrace_line ","start_line < "," backtrace_line - "," backtrace_line -  < "]}," Pry Cat ExceptionFormatter check_for_errors":{"type":"method","name":"check_for_errors","children":[],"call":[" raise "," backtrace_file "," ex "]}," Pry Cat ExceptionFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":[" Array last "," Array "," ex bt_source_location_for "," backtrace_level "," ex "]}," Pry Cat ExceptionFormatter backtrace_file":{"type":"method","name":"backtrace_file","children":[],"call":[" Array first "," Array "," ex bt_source_location_for "," backtrace_level "," ex ","RbxPath  convert_path_to_full ","RbxPath  is_core_path? "]}," Pry Cat ExceptionFormatter increment_backtrace_level":{"type":"method","name":"increment_backtrace_level","children":[],"call":[" ex inc_bt_index "," ex "]}," Pry Cat ExceptionFormatter backtrace_level":{"type":"method","name":"backtrace_level","children":[],"call":[" increment_backtrace_level "," ex bt_index= "," absolute_index_number "," ex backtrace size "," ex backtrace "," ex "," opts [] "," opts "," ex bt_index "," opts [] nil? "]}," Pry Cat ExceptionFormatter code_window_size":{"type":"method","name":"code_window_size","children":[],"call":[" _pry_ config default_window_size "," _pry_ config "," _pry_ ","Pry  config default_window_size ","Pry  config "]}," Pry Cat ExceptionFormatter format":{"type":"method","name":"format","children":[],"call":[" header "," decorate ","Pry Code  from_file between with_marker "," backtrace_line ","Pry Code  from_file between "," start_and_end_line_for_code_window ","Pry Code  from_file "," backtrace_file "," set_file_and_dir_locals "," _pry_ current_context "," _pry_ "," check_for_errors "," decorate to_s "," start_and_end_line_for_ decorate _window "," start_and_end_line_for_ decorate to_s _window "]}," Pry Cat ExceptionFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Cat AbstractFormatter between_lines":{"type":"method","name":"between_lines","children":[],"call":[" opts [] "," opts "]}," Pry Cat AbstractFormatter use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry Cat AbstractFormatter code_type":{"type":"method","name":"code_type","children":[],"call":[" opts [] "," opts "]}," Pry Cat AbstractFormatter decorate":{"type":"method","name":"decorate","children":[],"call":["content between with_line_numbers "," use_line_numbers? ","content between "," between_lines ","content code_type= "," code_type ","content between with_line_numbers highlighted "]}," Pry BangPry process":{"type":"method","name":"process","children":[],"call":[" target pry "," target "]}," Pry Bang process":{"type":"method","name":"process","children":[],"call":[" eval_string replace "," eval_string "," output puts "," output "]}," Pry AmendLine line_range":{"type":"method","name":"line_range","children":[],"call":[" line_count - "," line_count "," zero_indexed_range_from_one_indexed_numbers "," start_and_end_line_number "]}," Pry AmendLine zero_indexed_range_from_one_indexed_numbers":{"type":"method","name":"zero_indexed_range_from_one_indexed_numbers","children":[],"call":[" one_index_number "]}," Pry AmendLine start_and_end_line_number":{"type":"method","name":"start_and_end_line_number","children":[],"call":["end_line_number to_i ","start_line_number to_i "," args "]}," Pry AmendLine line_count":{"type":"method","name":"line_count","children":[],"call":[" eval_string lines count "," eval_string lines "," eval_string "]}," Pry AmendLine replace_in_array":{"type":"method","name":"replace_in_array","children":[],"call":["array []= "," arg_string + "," arg_string "]}," Pry AmendLine insert_into_array":{"type":"method","name":"insert_into_array","children":[],"call":["array insert "," arg_string [] << "," arg_string [] "," arg_string "," Array first "," Array "," arg_string [] + "]}," Pry AmendLine delete_from_array":{"type":"method","name":"delete_from_array","children":[],"call":["array slice! "]}," Pry AmendLine amended_input":{"type":"method","name":"amended_input","children":[],"call":["input_array join "," replace_in_array "," line_range "," insert_into_array "," arg_string start_with? "," arg_string "," delete_from_array "," arg_string == "," eval_string each_line to_a "," eval_string each_line "," eval_string "," eval_string each_line to_a  join "]}," Pry AmendLine process":{"type":"method","name":"process","children":[],"call":[" run "," eval_string replace "," amended_input "," eval_string "," raise "," eval_string empty? "," amend_input "]}," Pry Result void_command?":{"type":"method","name":"void_command?","children":[],"call":[" retval == "," retval "]}," Pry Result command?":{"type":"method","name":"command?","children":[],"call":[]}," Pry Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry CommandSet complete":{"type":"method","name":"complete","children":[],"call":["key + ","(send\n  (send\n    (ivar :@commands) :keys) :select) map ","key start_with? ","String  === ","@commands keys select ","@commands keys ","command new complete ","command new "," find_command ","keys map ","key is_a? ","(send\n  (block\n    (send\n      (send\n        (send nil :commands) :keys) :select)\n    (args\n      (arg :x))\n    (and\n      (send\n        (const nil :String) :===\n        (lvar :x))\n      (send\n        (lvar :x) :start_with?\n        (lvar :search)))) :map) + ","Bond DefaultMission  completions ","command + ","(send\n  (send\n    (send nil :commands) :keys) :select) map ","x start_with? "," commands keys select "," commands keys "," commands ","(send\n  (send\n    (ivar :@ find_command s) :keys) :select) map ","@ find_command s keys select ","@ find_command s keys "," find_command  new complete "," find_command  new "," find_ find_command  ","(send\n  (block\n    (send\n      (send\n        (send nil : find_command s) :keys) :select)\n    (args\n      (arg :x))\n    (and\n      (send\n        (const nil :String) :===\n        (lvar :x))\n      (send\n        (lvar :x) :start_with?\n        (lvar :search)))) :map) + "," find_command  + ","(send\n  (send\n    (send nil : find_command s) :keys) :select) map ","  find_command s keys select ","  find_command s keys ","  find_command s "]}," Pry CommandSet run_command":{"type":"method","name":"run_command","children":[],"call":["command new call_safely ","command new "," raise ","NoCommandError  new ","@commands [] ","command call "," commands [] "," commands ","context extend "," helper_module "," puts ","command name ","args empty? ","command options [] ","command options ","command nil? ","@commands []  new call_safely "," commands []  new call_safely ","@commands []  new "," commands []  new ","@@commands [] s [] ","@ commands [] s [] ","@commands []  call "," commands []  call "," @commands [] s [] ","  commands [] s [] "," @commands [] s ","  commands [] s ","@commands []  name "," commands []  name ","@commands []  options [] "," commands []  options [] ","@commands []  options "," commands []  options ","@commands []  nil? "," commands []  nil? "]}," Pry CommandSet process_line":{"type":"method","name":"process_line","children":[],"call":["Result  new ","command new process_line ","command new ","context merge "," find_command "," find_command  new process_line "," find_command  new ","context merge  merge "," find_ find_command  "]}," Pry CommandSet valid_command?":{"type":"method","name":"valid_command?","children":[],"call":[" find_command ! ! "," find_command ! "," find_command "]}," Pry CommandSet find_command_for_help":{"type":"method","name":"find_command_for_help","children":[],"call":[" find_command_by_match_or_listing "," find_command "," find_command_by_name_or_listing "]}," Pry CommandSet add_command":{"type":"method","name":"add_command","children":[],"call":[" []= ","command match "," commands []= "," commands "]}," Pry CommandSet []=":{"type":"method","name":"[]=","children":[],"call":["@commands []= ","command_copy match= ","command dup ","pattern != ","command match "," raise ","command < ","Class  === ","@commands delete ","command equal? ","command is_a? ","command dup  match= "]}," Pry CommandSet []":{"type":"method","name":"[]","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (ivar :@commands) :values) :select)\n    (args\n      (arg :command))\n    (send\n      (lvar :command) :matches?\n      (lvar :pattern))) :sort_by) last ","command match_score ","(send\n  (send\n    (ivar :@commands) :values) :select) sort_by ","command matches? ","@commands values select ","@commands values ","commands max_by "]}," Pry CommandSet to_hash":{"type":"method","name":"to_hash","children":[],"call":["@commands dup "]}," Pry CommandSet list_commands":{"type":"method","name":"list_commands","children":[],"call":["@commands keys "," commands keys "," commands "]}," Pry CommandSet helpers":{"type":"method","name":"helpers","children":[],"call":[" helper_module class_eval "," helper_module "]}," Pry CommandSet desc":{"type":"method","name":"desc","children":[],"call":["cmd description= ","cmd description ","description ! "," find_command_by_match_or_listing "," commands [] description= "," commands [] "," commands "," find_command_by_name_or_listing "," find_command_by_match_or_listing  description= "," find_command_by_name_or_listing  description= "," find_command_by_match_or_listing  description "," find_command_by_name_or_listing  description "]}," Pry CommandSet disabled_command":{"type":"method","name":"disabled_command","children":[],"call":[" output puts "," output "," define_method "," description "," match "," create_command "]}," Pry CommandSet rename_command":{"type":"method","name":"rename_command","children":[],"call":["@commands delete ","cmd match ","@commands [] options merge! ","@commands [] options ","@commands [] ","@commands [] description= ","options delete ","@commands [] match= ","@commands []= ","cmd dup ","(pair\n  (sym :listing)\n  (lvar :new_match)) merge! ","cmd description "," find_command_by_match_or_listing "," commands delete "," commands "," commands [] options merge! "," commands [] options "," commands [] "," commands [] description= "," commands [] match= "," commands []= ","cmd name "," commands [] name= ","(pair\n  (sym :listing)\n  (lvar :new_name)) merge! "," find_command_by_name_or_listing "," find_command_by_match_or_listing  match "," find_command_by_name_or_listing  match ","@commands [] (pair\n  (sym :listing)\n  (lvar :new_match)) merge!  merge! ","@commands [] (pair\n  (sym :listing)\n  (lvar :new_name)) merge!  merge! ","@commands [] (pair\n  (sym :listing)\n  (lvar :new_match)) merge!  ","@commands [] (pair\n  (sym :listing)\n  (lvar :new_name)) merge!  ","(pair\n  (sym :listing)\n  (lvar :new_match)) merge!  delete ","(pair\n  (sym :listing)\n  (lvar :new_name)) merge!  delete "," find_command_by_match_or_listing  dup "," find_command_by_name_or_listing  dup "," find_command_by_match_or_listing  description "," find_command_by_name_or_listing  description "," commands [] (pair\n  (sym :listing)\n  (lvar :new_match)) merge!  merge! "," commands [] (pair\n  (sym :listing)\n  (lvar :new_name)) merge!  merge! "," commands [] (pair\n  (sym :listing)\n  (lvar :new_match)) merge!  "," commands [] (pair\n  (sym :listing)\n  (lvar :new_name)) merge!  "," find_command_by_match_or_listing  name "," find_command_by_name_or_listing  name "]}," Pry CommandSet alias_command":{"type":"method","name":"alias_command","children":[],"call":["c group ","cmd new complete ","cmd new "," context "," define_method ","c class_eval "," run "," block_command ","options delete to_s ","options delete ","original_options merge! merge! ","original_options merge! ","cmd options dup ","cmd options "," fail "," find_command "," raise ","match inspect ","match is_a? "," commands [] description= "," commands [] "," commands "," commands [] name= "," commands []= "," commands [] dup "," find_command options dup "," find_command options ","orig_command dup "," find_command_by_name_or_listing "," find_command  new complete "," find_command  new ","original_options merge! merge!  delete to_s ","original_options merge! merge!  delete ","original_original_options merge! merge!  merge! merge! ","cmd options dup  merge! merge! "," find_command options dup  merge! merge! ","original_original_options merge! merge!  merge! ","cmd options dup  merge! "," find_command options dup  merge! ","cmd original_options merge! merge!  dup "," find_command  options dup ","cmd original_options merge! merge!  "," find_command  options "," commands [] options delete to_s ription= "," find_command original_options merge! merge!  dup "," find_command original_options merge! merge!  "," find_command_by_name_or_listing  dup "]}," Pry CommandSet find_command_by_match_or_listing":{"type":"method","name":"find_command_by_match_or_listing","children":[],"call":[" raise ","Pry Helpers BaseHelpers  find_command ","@commands [] ","cmd ! ","command options [] == ","command options [] ","command options "," commands find "," commands "," commands [] "," commands []  ! "]}," Pry CommandSet import_from":{"type":"method","name":"import_from","children":[],"call":["@commands []= ","cmd match ","set find_command_by_match_or_listing ","matches each "," helper_module send ","set helper_module "," helper_module "," commands []= ","set commands [] ","set commands "," commands ","names each ","cmd name ","set find_command_by_name_or_listing ","set find_command_by_match_or_listing  match ","set find_command_by_name_or_listing  match ","set find_command_by_match_or_listing  name ","set find_command_by_name_or_listing  name "]}," Pry CommandSet import":{"type":"method","name":"import","children":[],"call":[" helper_module send ","set helper_module "," helper_module ","@commands merge! ","set to_hash ","sets each "," commands merge! ","set commands "," commands "]}," Pry CommandSet delete":{"type":"method","name":"delete","children":[],"call":["@commands delete ","cmd match "," find_command_by_match_or_listing ","searches each "," commands delete "," commands ","names each ","cmd name "," find_command_by_name_or_listing "," find_command_by_match_or_listing  match "," find_command_by_name_or_listing  match "," find_command_by_match_or_listing  name "," find_command_by_name_or_listing  name "]}," Pry CommandSet each":{"type":"method","name":"each","children":[],"call":["@commands each "]}," Pry CommandSet after_command":{"type":"method","name":"after_command","children":[],"call":["cmd hooks [] << ","cmd hooks [] ","cmd hooks "," find_command_by_match_or_listing ","cmd hooks add_hook "," random_hook_name ","cmd command_name "," find_command_by_name_or_listing ","cmd block= "," instance_exec "," proc ","cmd block "," find_command_by_match_or_listing  hooks [] << "," find_command_by_name_or_listing  hooks [] << "," find_command_by_match_or_listing  hooks [] "," find_command_by_name_or_listing  hooks [] "," find_command_by_match_or_listing  hooks "," find_command_by_name_or_listing  hooks "," find_command_by_match_or_listing  hooks add_hook "," find_command_by_name_or_listing  hooks add_hook "," find_command_by_match_or_listing  command_name "," find_command_by_name_or_listing  command_name "," find_command_by_match_or_listing  block= "," find_command_by_name_or_listing  block= "," find_command_by_match_or_listing  block "," find_command_by_name_or_listing  block "]}," Pry CommandSet before_command":{"type":"method","name":"before_command","children":[],"call":["cmd hooks [] unshift ","cmd hooks [] ","cmd hooks "," find_command_by_match_or_listing ","cmd hooks add_hook "," random_hook_name ","cmd command_name "," find_command_by_name_or_listing ","cmd block= "," instance_exec "," proc ","cmd block "," find_command_by_match_or_listing  hooks [] unshift "," find_command_by_name_or_listing  hooks [] unshift "," find_command_by_match_or_listing  hooks [] "," find_command_by_name_or_listing  hooks [] "," find_command_by_match_or_listing  hooks "," find_command_by_name_or_listing  hooks "," find_command_by_match_or_listing  hooks add_hook "," find_command_by_name_or_listing  hooks add_hook "," find_command_by_match_or_listing  command_name "," find_command_by_name_or_listing  command_name "," find_command_by_match_or_listing  block= "," find_command_by_name_or_listing  block= "," find_command_by_match_or_listing  block "," find_command_by_name_or_listing  block "]}," Pry CommandSet create_command":{"type":"method","name":"create_command","children":[],"call":["@commands [] ","@commands [] class_eval ","@commands []= ","Pry ClassCommand  subclass "," helper_module ","Pry Command  default_options merge! ","Pry Command  default_options ","description is_a? "," commands [] "," commands "," commands [] class_eval "," commands []= "," default_options merge! "," default_options ","Pry Command  default_Pry Command  default_options merge!  merge! ","Pry Command  default_ default_options merge!  merge! ","Pry Command  default_Pry Command  default_options merge!  ","Pry Command  default_ default_options merge!  "," default_Pry Command  default_options merge!  merge! "," default_ default_options merge!  merge! "," default_Pry Command  default_options merge!  "," default_ default_options merge!  "]}," Pry CommandSet block_command":{"type":"method","name":"block_command","children":[],"call":["@commands []= ","Pry BlockCommand  subclass "," helper_module ","Pry Command  default_options merge! ","Pry Command  default_options ","description is_a? "," commands []= "," commands "," default_options merge! "," default_options ","Pry Command  default_Pry Command  default_options merge!  merge! ","Pry Command  default_ default_options merge!  merge! ","Pry Command  default_Pry Command  default_options merge!  ","Pry Command  default_ default_options merge!  "," default_Pry Command  default_options merge!  merge! "," default_ default_options merge!  merge! "," default_Pry Command  default_options merge!  "," default_ default_options merge!  "]}," Pry CommandSet initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval "," import ","Module  new "," define_default_commands "]}," Pry NoCommandError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry ClassCommand process":{"type":"method","name":"process","children":[],"call":[" raise "," command_name "," name "]}," Pry ClassCommand options":{"type":"method","name":"options","children":[],"call":[]}," Pry ClassCommand subcommands":{"type":"method","name":"subcommands","children":[],"call":[]}," Pry ClassCommand setup":{"type":"method","name":"setup","children":[],"call":[]}," Pry ClassCommand complete":{"type":"method","name":"complete","children":[],"call":["(send\n  (send nil :slop) :map) flatten compact + ","(send\n  (send nil :slop) :map) flatten compact ","(send\n  (send nil :slop) :map) flatten ","opt short ","opt long "," slop map "," slop ","(send\n  (send nil :slop) :flat_map) compact + ","(send\n  (send nil :slop) :flat_map) compact "," slop flat_map "]}," Pry ClassCommand slop":{"type":"method","name":"slop","children":[],"call":["opt on "," options "," subcommands ","opt banner "," unindent "," class banner "," class ","Slop  new ","Pry Slop  new ","Slop  parse "]}," Pry ClassCommand help":{"type":"method","name":"help","children":[],"call":[" slop help "," slop "]}," Pry ClassCommand call":{"type":"method","name":"call","children":[],"call":[" process "," correct_arg_arity "," method arity "," method "," void "," output puts "," slop help "," slop "," output "," opts present? "," opts "," args= "," opts parse! "," opts= "," setup "," normalize_method_args "]}," Pry ClassCommand source_object":{"type":"method","name":"source_object","children":[],"call":["Pry  Method "," block ","Pry  WrappedModule "," name =~ "," name "]}," Pry ClassCommand source_line":{"type":"method","name":"source_line","children":[],"call":[" source_object source_line "," source_object ","Pry  WrappedModule source_line ","Pry  WrappedModule "]}," Pry ClassCommand source_file":{"type":"method","name":"source_file","children":[],"call":[" source_object source_file "," source_object ","Pry  WrappedModule source_file ","Pry  WrappedModule "]}," Pry ClassCommand source_location":{"type":"method","name":"source_location","children":[],"call":[" source_object source_location "," source_object ","Pry  WrappedModule source_location ","Pry  WrappedModule "]}," Pry ClassCommand doc":{"type":"method","name":"doc","children":[],"call":[" new help "," new "]}," Pry ClassCommand source":{"type":"method","name":"source","children":[],"call":[" source_object source "," source_object ","Pry  WrappedModule source ","Pry  WrappedModule "]}," Pry ClassCommand inherited":{"type":"method","name":"inherited","children":[],"call":["klass command_options "," options ","klass description "," description ","klass match "," match "]}," Pry BlockCommand help":{"type":"method","name":"help","children":[],"call":[" description "," command_options [] to_s ljust "," command_options [] to_s "," command_options [] "," command_options "]}," Pry BlockCommand call":{"type":"method","name":"call","children":[],"call":[" instance_exec "," block "," correct_arg_arity "," block arity "," normalize_method_args "]}," Pry Command correct_arg_arity":{"type":"method","name":"correct_arg_arity","children":[],"call":["args values_at ","(irange\n  (int 0)\n  (begin\n    (send\n      (lvar :arity) :-\n      (int 1)))) to_a ","arity - ","arity > ","arity == ","arity < "]}," Pry Command call_with_hooks":{"type":"method","name":"call_with_hooks","children":[],"call":[" instance_exec "," class hooks [] each "," class hooks [] "," class hooks "," class "," call "," after_hooks each "," after_hooks "," before_hooks each "," before_hooks "]}," Pry Command complete":{"type":"method","name":"complete","children":[],"call":["Bond DefaultMission  completions "]}," Pry Command dependencies_met?":{"type":"method","name":"dependencies_met?","children":[],"call":[" command_dependencies_met? "," command_options "]}," Pry Command call_safely":{"type":"method","name":"call_safely","children":[],"call":[" void "," command_options [] "," command_options "," call_with_hooks "," raise "," command_name ","args empty? "," output puts "," output ","gems_not_installed join "," text bold "," text ","Rubygem  installed? ! ","Rubygem  installed? ","gems_needed select "," Array "," dependencies_met? "," use_unpatched_symbol ","Helpers Text  bold ","install-command  + "," gem_installed? ! "," gem_installed? "," name "," Array  select "]}," Pry Command pass_block":{"type":"method","name":"pass_block","children":[],"call":[" raise "," command_block= "," target eval "," target "," _pry_ r "," _pry_ ","Pry Code  complete_expression? ! ","Pry Code  complete_expression? ","arg_string slice! [] ","arg_string slice! ","block_index ! ","$~ offset [] ","$~ offset ","arg_string scan "," pry_instance r "," pry_instance ","$LAST_MATCH_INFO offset [] ","$LAST_MATCH_INFO offset ","arg_string rindex "," _pry_ complete_expression? ! "," _pry_ complete_expression? ","arg_string rindex  ! "]}," Pry Command process_line":{"type":"method","name":"process_line","children":[],"call":[" call_safely ","captures + "," captures= "," arg_string= "," check_for_command_collision ","Pry  config collision_warning ","Pry  config "," tokenize "," check_for_command_name_collision "]}," Pry Command tokenize":{"type":"method","name":"tokenize","children":[],"call":["val [] rstrip ","val [] ","arg_string split ","Shellwords  shellwords "," command_options [] "," command_options "," pass_block ","arg_string slice! ","arg_string start_with? ","Regexp  last_match end ","Regexp  last_match ","Regexp  last_match captures "," raise "," class command_regex =~ "," class command_regex "," class ","val replace "," interpolate_string "," interpolate_string  [] rstrip "," interpolate_string  [] ","val []  split ","val []  slice! ","val []  start_with? ","Regexp  last_match Regexp  last_match captures  "," interpolate_string  replace "]}," Pry Command check_for_command_collision":{"type":"method","name":"check_for_command_collision","children":[],"call":[" output puts "," text bold "," text "," output ","arg_string match "," target eval "," target ","Helpers Text  bold ","arg_string =~ ","(begin\n  (send\n    (const\n      (const\n        (const nil :Pry) :Helpers) :Text) :bold\n    (str \"WARNING:\"))) + ","Pry Helpers Text  bold ","(begin\n  (send\n    (send nil :text) :bold\n    (str \"WARNING:\"))) + "]}," Pry Command interpolate_string":{"type":"method","name":"interpolate_string","children":[],"call":[" target eval "," target ","dumped_str gsub! ","str dump ","str dump  gsub! "]}," Pry Command state":{"type":"method","name":"state","children":[],"call":["Pry Config  from_hash "," _pry_ command_state [] "," match "," _pry_ command_state "," _pry_ "," class state "," class ","Pry CommandState  default state_for ","Pry CommandState  default ","OpenStruct  new "]}," Pry Command target_self":{"type":"method","name":"target_self","children":[],"call":[" target eval "," target "]}," Pry Command initialize":{"type":"method","name":"initialize","children":[],"call":[" _pry_= ","context [] "," command_set= "," eval_string= "," output= "," target= "," context= "," hooks= "," pry_instance= "]}," Pry Command void":{"type":"method","name":"void","children":[],"call":[]}," Pry Command text":{"type":"method","name":"text","children":[],"call":[]}," Pry Command commands":{"type":"method","name":"commands","children":[],"call":[" command_set to_hash "," command_set "," command_set commands "]}," Pry Command run":{"type":"method","name":"run","children":[],"call":[" command_set process_line "," context "," command_set ","(begin\n  (lvar :command_string)) rstrip ","args join "," _pry_ config command_prefix to_s + "," _pry_ config command_prefix to_s "," _pry_ config command_prefix "," _pry_ config "," _pry_ "," pry_instance config command_prefix to_s + "," pry_instance config command_prefix to_s "," pry_instance config command_prefix "," pry_instance config "," pry_instance ","(begin\n  (lvar : _pry_ config command_prefix to_s + )) rstrip ","(begin\n  (lvar : pry_instance config command_prefix to_s + )) rstrip "]}," Pry Command group":{"type":"method","name":"group","children":[],"call":["version to_s ","name to_s ","1 capitalize gsub ","1 capitalize ","Pry  Method source_file ","Pry  Method "," block ","Regexp  last_match ","Regexp  last_match capitalize tr ","Regexp  last_match capitalize ","Regexp  last_match  to_s "]}," Pry Command convert_to_regex":{"type":"method","name":"convert_to_regex","children":[],"call":["Regexp  escape "]}," Pry Command command_regex":{"type":"method","name":"command_regex","children":[],"call":[" convert_to_regex "," match "," options [] "," options ","Pry  config command_prefix ","Pry  config ","Pry  respond_to? "," name ","Pry  config command_ convert_to_regex  ","Pry  config command_Pry  config command_prefix efix "]}," Pry Command hooks":{"type":"method","name":"hooks","children":[],"call":["Pry  hooks "]}," Pry Command match_score":{"type":"method","name":"match_score","children":[],"call":["Regexp  last_match end ","Regexp  last_match ","Regexp  last_match begin ","Regexp  last_match size > ","Regexp  last_match size "," command_regex =~ "," command_regex "]}," Pry Command matches?":{"type":"method","name":"matches?","children":[],"call":[" command_regex =~ "," command_regex "]}," Pry Command subclass":{"type":"method","name":"subclass","children":[],"call":["klass block= ","klass command_options= ","klass description= ","klass match= ","klass send ","Class  new ","klass name= ","klass options= ","Class  new  block= ","Class  new  command_options= ","Class  new  description= ","Class  new  match= ","Class  new  send ","Class  new  name= ","Class  new  options= "]}," Pry Command command_name":{"type":"method","name":"command_name","children":[],"call":[" options [] "," options "," class command_name "," class "," command_options [] "," command_options "]}," Pry Command inspect":{"type":"method","name":"inspect","children":[],"call":[" name "," name inspect "]}," Pry Command name":{"type":"method","name":"name","children":[],"call":[" match inspect "," match "," to_s == "," to_s "," class name "," class "]}," Pry Command source_location":{"type":"method","name":"source_location","children":[],"call":[" class source_location "," class "," block source_location "," block "]}," Pry Command source":{"type":"method","name":"source","children":[],"call":[" class source "," class "," strip_leading_whitespace ","Pry Code  from_file expression_at ","Pry Code  from_file "," block source_location "," block "]}," Pry Command command_options":{"type":"method","name":"command_options","children":[],"call":[" class options "," class ","@command_options merge! "," default_options "," match "]}," Pry Command block":{"type":"method","name":"block","children":[],"call":[" class block "," class "," instance_method "]}," Pry Command description":{"type":"method","name":"description","children":[],"call":[" class description "," class "]}," Pry Command match":{"type":"method","name":"match","children":[],"call":[" class match "," class ","@command_options []= ","arg inspect ","arg is_a? "," default_options "]}," Pry Command default_options":{"type":"method","name":"default_options","children":[],"call":["match inspect ","String  === ","match is_a? "]}," Pry Command source_line":{"type":"method","name":"source_line","children":[],"call":[" Array last "," Array "," block source_location "," block "]}," Pry Command source_file":{"type":"method","name":"source_file","children":[],"call":[" Array first "," Array "," block source_location "," block "]}," Pry Command doc":{"type":"method","name":"doc","children":[],"call":[" new help "," new "]}," Pry Command banner":{"type":"method","name":"banner","children":[],"call":[" description "]}," Pry ColorPrinter highlight_object_literal":{"type":"method","name":"highlight_object_literal","children":[],"call":["code start_with? ","Pry SyntaxHighlighter  keyword_token_color ","Pry SyntaxHighlighter  keyword_token_color  start_with? "]}," Pry ColorPrinter pp":{"type":"method","name":"pp","children":[],"call":[" text "," highlight_object_literal ","obj __id__ to_s ","obj __id__ ","(send\n  (lvar :ancestors) :reject) first ","k == ","ancestors reject ","Pry Method  safe_send "," raise ","e is_a? ","obj inspect ","Object  instance_method bind call ","Object  instance_method bind ","Object  instance_method ","String  === "," inspect_object ","exception is_a? ","object inspect ","object is_a? ","(send\n  (lvar :Pry Method  safe_send ) :reject) first ","Pry Method  safe_send  reject "]}," Pry ColorPrinter text":{"type":"method","name":"text","children":[],"call":["CodeRay  scan term ","CodeRay  scan "," highlight_object_literal ","str == ","str start_with? ","str include? ","SyntaxHighlighter  highlight ","(str \"=\") include? "]}," Pry CodeObject lookup_super":{"type":"method","name":"lookup_super","children":[],"call":[" raise ","obj wrapped ","sup ! ","obj super ","obj ! ","obj super  ! ","obj obj super er "]}," Pry CodeObject target_self":{"type":"method","name":"target_self","children":[],"call":[" target eval "," target "]}," Pry CodeObject safe_to_evaluate?":{"type":"method","name":"safe_to_evaluate?","children":[],"call":["kind =~ "," target eval "," target ","str strip == ","str strip ","str =~ "," target eval  =~ "]}," Pry CodeObject looks_like_an_instance_method?":{"type":"method","name":"looks_like_an_instance_method?","children":[],"call":["str =~ "]}," Pry CodeObject sourcable_object?":{"type":"method","name":"sourcable_object?","children":[],"call":["obj is_a? ","(const\n  (cbase) :Proc) any? "]}," Pry CodeObject method_or_class_lookup":{"type":"method","name":"method_or_class_lookup","children":[],"call":[" lookup_super "," super_level ","Pry Method  from_str "," target "," str ","Pry WrappedModule  from_str "," str sub "," str =~ "," str to_s empty? "," str to_s "]}," Pry CodeObject default_lookup":{"type":"method","name":"default_lookup","children":[],"call":["Pry  WrappedModule ","obj class ","obj is_a? ! ","obj is_a? ","Pry  Method "," sourcable_object? "," target eval "," str "," target "," looks_like_an_instance_method? ! "," looks_like_an_instance_method? "," safe_to_evaluate? "," target eval  class "," target eval  is_a? ! "," target eval  is_a? "," sourcable_ target eval ect? "]}," Pry CodeObject empty_lookup":{"type":"method","name":"empty_lookup","children":[],"call":[" lookup_super "," super_level ","Pry Method  from_binding "," target ","Pry  WrappedModule "," target_self class "," target_self "," target_self is_a? "," internal_binding? "," str empty? ! "," str empty? "," str "]}," Pry CodeObject command_lookup":{"type":"method","name":"command_lookup","children":[],"call":[" _pry_ commands find_command_by_match_or_listing "," str "," _pry_ commands "," _pry_ "," pry_instance commands find_command_by_match_or_listing "," pry_instance commands "," pry_instance "," pry commands find_command_by_match_or_listing "," pry commands "," pry "]}," Pry CodeObject initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","_pry_ current_context ","(pair\n  (sym :super)\n  (int 0)) merge! ","pry_instance current_context ","(pair\n  (sym :super)\n  (int 0)) merge!  [] "]}," Pry CodeObject lookup":{"type":"method","name":"lookup","children":[],"call":["co empty_lookup ","co command_lookup ","co method_or_class_lookup ","co default_lookup "," new "," new  empty_lookup "," new   new mmand_lookup "," new  method_or_class_lookup "," new  default_lookup "]}," Pry CodeObject Helpers command?":{"type":"method","name":"command?","children":[],"call":[" <= "," is_a? "]}," Pry CodeObject Helpers module_with_yard_docs?":{"type":"method","name":"module_with_yard_docs?","children":[],"call":[" yard_docs? "," is_a? "]}," Pry CodeObject Helpers c_method?":{"type":"method","name":"c_method?","children":[],"call":[" source_type == "," source_type "," real_method_object? "]}," Pry CodeObject Helpers real_method_object?":{"type":"method","name":"real_method_object?","children":[],"call":[" is_a? "]}," Pry Code alter":{"type":"method","name":"alter","children":[],"call":["o instance_eval "," dup tap "," dup "]}," Pry Code method_missing":{"type":"method","name":"method_missing","children":[],"call":[" to_s send "," to_s ","string __send__ ","(lvasgn :string\n  (send nil :to_s)) respond_to? "," to_s  __send__ ","(lvasgn : to_s \n  (send nil :to_s)) respond_to? "]}," Pry Code ==":{"type":"method","name":"==","children":[],"call":[" to_s chomp == ","other to_s chomp ","other to_s "," to_s chomp "," to_s ","loc == ","other_lines [] ","@lines each_with_index all? ","@lines each_with_index ","other instance_variable_get ","other is_a? ","ln == ","@other_lines [] last ","@other_lines [] ","l == ","@other_lines [] first ","other instance_variable_get  [] ","@other instance_variable_get  [] last ","other instance_variable_get  [] last ","@other instance_variable_get  [] ","@other instance_variable_get  [] first ","other instance_variable_get  [] first "]}," Pry Code length":{"type":"method","name":"length","children":[],"call":["@lines length "]}," Pry Code raw":{"type":"method","name":"raw","children":[],"call":["@lines map join << ","@lines map join ","@lines map ","@lines map join + "]}," Pry Code nesting_at":{"type":"method","name":"nesting_at","children":[],"call":["Pry Indent  nesting_at "," raw "]}," Pry Code expression_at":{"type":"method","name":"expression_at","children":[],"call":[" class expression_at "," raw "," class "]}," Pry Code comment_describing":{"type":"method","name":"comment_describing","children":[],"call":[" class comment_describing "," raw "," class "]}," Pry Code print_to_output":{"type":"method","name":"print_to_output","children":[],"call":["output << ","loc line ","loc indent ","loc add_marker ","loc add_line_number "," max_lineno_width ","loc colorize ","loc dup ","@lines each ","loc dup  line ","loc dup  indent ","loc dup  add_marker ","loc dup  add_line_number ","loc dup  colorize ","loc dup  dup "]}," Pry Code to_s":{"type":"method","name":"to_s","children":[],"call":[" print_to_output "," dup ","(send\n  (lvar :lines) :map) join ","l first ","lines map ","l []= ","l [] ","  * ","lines each ","l [] == ","Pry Helpers BaseHelpers  colorize_code ","padded_line_num to_s ","l [] to_s rjust ","l [] to_s ","lines last last to_s length ","lines last last to_s ","lines last last ","lines last ","lines length > ","lines length ","CodeRay  scan term ","CodeRay  scan ","Pry  color ","@lines map ","(send\n  (ivar :@lines) :map) join + ","(send\n  (ivar :@lines) :map) join ","loc line ","loc indent ","loc add_marker ","loc add_line_number "," max_lineno_width ","loc colorize ","loc dup ","Pry Helpers Text  blue ","(send\n  (lvar :@lines map ) :map) join ","@lines map  map ","@lines map  each ","l [] to_s rjust  to_s ","@lines map  last last to_s length ","@lines map  last last to_s ","@lines map  last last ","@lines map  last ","@lines map  length > ","@lines map  length ","@@lines map  map ","(send\n  (ivar :@@lines map ) :map) join + ","(send\n  (ivar :@@lines map ) :map) join ","loc dup  line ","loc dup  indent ","loc dup  add_marker ","loc dup  add_line_number ","loc dup  colorize ","loc dup  dup "]}," Pry Code max_lineno_width":{"type":"method","name":"max_lineno_width","children":[],"call":["@lines last lineno to_s length ","@lines last lineno to_s ","@lines last lineno ","@lines last ","@lines length > ","@lines length ","@lines empty? ! ","@lines empty? "]}," Pry Code inspect":{"type":"method","name":"inspect","children":[],"call":["Object  instance_method bind call ","Object  instance_method bind ","Object  instance_method "]}," Pry Code with_indentation":{"type":"method","name":"with_indentation","children":[],"call":["spaces ! ! ","spaces ! "," alter "]}," Pry Code with_marker":{"type":"method","name":"with_marker","children":[],"call":["lineno ! ! ","lineno ! "," alter ","line_num ! ! ","line_num ! "]}," Pry Code with_line_numbers":{"type":"method","name":"with_line_numbers","children":[],"call":[" alter "]}," Pry Code grep":{"type":"method","name":"grep","children":[],"call":["loc line =~ ","loc line "," select ","Regexp  new ","l =~ "]}," Pry Code after":{"type":"method","name":"after","children":[],"call":["loc lineno <= ","lineno + ","loc lineno ","loc lineno > "," select ","ln <= ","line_num + ","ln > "]}," Pry Code around":{"type":"method","name":"around","children":[],"call":["loc lineno <= ","lineno + ","loc lineno ","loc lineno >= ","lineno - "," select ","ln <= ","line_num + ","ln >= ","line_num - "]}," Pry Code before":{"type":"method","name":"before","children":[],"call":["loc lineno < ","loc lineno ","loc lineno >= ","lineno - "," select ","ln < ","ln >= ","line_num - "]}," Pry Code take_lines":{"type":"method","name":"take_lines","children":[],"call":["@lines slice "," alter ","(send\n  (send\n    (ivar :@lines) :length) :+\n  (lvar :start_line)) max ","@lines length + ","@lines length ","loc lineno >= ","loc lineno ","@lines index ","start_line >= ","l last >= ","l last ","@lines slice  slice ","(send\n  (send\n    (ivar :@lines slice ) :length) :+\n  (lvar :start_line)) max ","@lines slice  length + ","@lines slice  length ","@lines slice  index "]}," Pry Code between":{"type":"method","name":"between","children":[],"call":["@lines [] ","code_range indices_range "," alter ","CodeRange  new ","(or\n  (block\n    (send\n      (ivar :@lines) :index)\n    (args\n      (arg :l))\n    (send\n      (send\n        (lvar :l) :last) :>\n      (lvar :end_line)))\n  (int 0)) - ","l last > ","l last ","@lines index ","end_line > ","@lines length ","l last >= ","start_line > ","start_line first ","start_line exclude_end? ","start_line last ","start_line is_a? ","CodeRange  new  indices_range ","(or\n  (block\n    (send\n      (ivar :@lines) :index)\n    (args\n      (arg :l))\n    (send\n      (send\n        (lvar :l) :last) :>\n      (lvar :start_line last )))\n  (int 0)) - ","start_line last  > ","start_line first  > ","start_line first  first ","start_line first  exclude_end? ","start_line first  last ","start_line first  is_a? "]}," Pry Code select":{"type":"method","name":"select","children":[],"call":["@lines select "," alter ","@lines select  select "]}," Pry Code push":{"type":"method","name":"push","children":[],"call":["@lines push ","LOC  new ","@lines last lineno + ","@lines last lineno ","@lines last ","lineno nil? ","@lines any? ","line chomp ","@lines last last + ","@lines last last ","@lines last @lines last lineno +  + ","@lines last @lines last lineno +  ","@lines last lineno +  nil? "]}," Pry Code initialize":{"type":"method","name":"initialize","children":[],"call":["LOC  new ","lineno + ","start_line to_i ","lines each_with_index map ","lines each_with_index ","lines lines ","lines is_a? ","i + ","l chomp ","lines lines  each_with_index map ","lines lines  each_with_index ","lines lines  lines lines  ","lines lines  is_a? "]}," Pry Code from_module":{"type":"method","name":"from_module","children":[],"call":[" new ","candidate source ","candidate line ","Pry  WrappedModule candidate ","Pry  WrappedModule ","mod source ","mod source_line ","Pry  WrappedModule candidate  source ","Pry  WrappedModule candidate  line ","Pry  WrappedModule Pry  WrappedModule candidate  ","Pry  WrappedModule  source ","Pry  WrappedModule  source_line "]}," Pry Code from_method":{"type":"method","name":"from_method","children":[],"call":[" new ","meth source_type ","meth source ","meth source_line ","Pry  Method ","Pry  Method  source_type ","Pry  Method  source ","Pry  Method  source_line "]}," Pry Code from_file":{"type":"method","name":"from_file","children":[],"call":[" new ","code_file code_type ","code_file code ","CodeFile  new ","f close ","f respond_to? "," raise ","fn inspect "," type_from_filename ","File  open ","File  readable? ","Pry  line_buffer drop ","Pry  line_buffer ","fn == ","Pry  eval_path ","File  read "," abs_path ","filename == ","CodeFile  new  code_type ","code_file  type_from_filename  ","code_File  open ile code_type ","code_Pry  line_buffer drop ile code_type ","File  read _file File  read _type ","Pry  line_buffer drop _file Pry  line_buffer drop _type ","CodeFile  new  code ","code_File  open ile code ","code_Pry  line_buffer drop ile code ","File  read _file File  read  ","Pry  line_buffer drop _file Pry  line_buffer drop  ","File  open  close ","Pry  line_buffer drop  close ","File  open  respond_to? ","Pry  line_buffer drop  respond_to? ","File  open n inspect ","Pry  line_buffer drop n inspect "," type_File  open rom_File  open ilename "," type_Pry  line_buffer drop rom_Pry  line_buffer drop ilename ","Pry  line_buFile  open File  open er drop ","Pry  line_buPry  line_buffer drop Pry  line_buffer drop er drop ","Pry  line_buFile  open File  open er ","Pry  line_buPry  line_buffer drop Pry  line_buffer drop er ","File  open n == ","Pry  line_buffer drop n == ","File  open ilename == ","Pry  line_buffer drop ilename == "]}," Pry Code":{"type":"method","name":"Code","children":[],"call":["Code  new ","Code  from_method "]}," Pry Code LOC indent":{"type":"method","name":"indent","children":[],"call":[" tuple []= "," line ","  * "," tuple "]}," Pry Code LOC add_marker":{"type":"method","name":"add_marker","children":[],"call":[" tuple []= "," line "," lineno == "," lineno "," tuple "]}," Pry Code LOC add_line_number":{"type":"method","name":"add_line_number","children":[],"call":[" tuple []= "," line "," tuple ","Pry Helpers BaseHelpers  colorize_code "," lineno to_s rjust "," lineno to_s "," lineno "," handle_multiline_entries_from_edit_command "]}," Pry Code LOC colorize":{"type":"method","name":"colorize","children":[],"call":[" tuple []= ","CodeRay  scan term ","CodeRay  scan "," line "," tuple ","SyntaxHighlighter  highlight "]}," Pry Code LOC lineno":{"type":"method","name":"lineno","children":[],"call":[" tuple last "," tuple "]}," Pry Code LOC line":{"type":"method","name":"line","children":[],"call":[" tuple first "," tuple "]}," Pry Code LOC dup":{"type":"method","name":"dup","children":[],"call":[" class new "," lineno "," line "," class "]}," Pry Code LOC ==":{"type":"method","name":"==","children":[],"call":["other tuple == "," tuple ","other tuple "]}," Pry Code LOC initialize":{"type":"method","name":"initialize","children":[],"call":["lineno to_i ","line chomp "]}," Pry Code CodeRange set_end_line_from_range":{"type":"method","name":"set_end_line_from_range","children":[],"call":[" start_line first "," start_line "," start_line exclude_end? "," start_line last "]}," Pry Code CodeRange find_end_index":{"type":"method","name":"find_end_index","children":[],"call":["(or\n  (block\n    (send\n      (lvar :lines) :index)\n    (args\n      (arg :loc))\n    (send\n      (send\n        (lvar :loc) :lineno) :>\n      (send nil :end_line)))\n  (int 0)) - ","loc lineno > "," end_line ","loc lineno ","lines index "," end_line < "]}," Pry Code CodeRange find_start_index":{"type":"method","name":"find_start_index","children":[],"call":["lines length ","loc lineno >= "," start_line ","loc lineno ","lines index "," start_line < "]}," Pry Code CodeRange indices":{"type":"method","name":"indices","children":[],"call":[" find_end_index "," find_start_index "]}," Pry Code CodeRange force_set_end_line":{"type":"method","name":"force_set_end_line","children":[],"call":[" start_line "," set_end_line_from_range "," start_line is_a? "]}," Pry Code CodeRange end_line":{"type":"method","name":"end_line","children":[],"call":[]}," Pry Code CodeRange start_line":{"type":"method","name":"start_line","children":[],"call":[]}," Pry Code CodeRange indices_range":{"type":"method","name":"indices_range","children":[],"call":["Range  new "," indices "]}," Pry Code CodeRange initialize":{"type":"method","name":"initialize","children":[],"call":[" force_set_end_line "]}," Pry CodeFile from_load_path":{"type":"method","name":"from_load_path","children":[],"call":["File  expand_path ","$LOAD_PATH map "]}," Pry CodeFile from_pry_init_pwd":{"type":"method","name":"from_pry_init_pwd","children":[],"call":["File  expand_path "]}," Pry CodeFile from_pwd":{"type":"method","name":"from_pwd","children":[],"call":["File  expand_path ","Dir  pwd "]}," Pry CodeFile type_from_filename":{"type":"method","name":"type_from_filename","children":[],"call":[" code_type ","ext == ","File  extname ","k any? ","EXTENSIONS  find ","file_name == ","File  basename ","FILES  find "]}," Pry CodeFile code_path":{"type":"method","name":"code_path","children":[],"call":[" from_load_path "," from_pry_init_pwd "," from_pwd "]}," Pry CodeFile readable?":{"type":"method","name":"readable?","children":[],"call":["File  readable? ","path << ","File  directory? ! ","File  directory? "]}," Pry CodeFile abs_path":{"type":"method","name":"abs_path","children":[],"call":[" raise ","@filename inspect "," readable? "," code_path detect "," code_path "]}," Pry CodeFile code":{"type":"method","name":"code","children":[],"call":["File  read "," type_from_filename "," abs_path ","RbxPath  convert_path_to_full ","RbxPath  is_core_path? ","Pry Method Patcher  code_for ","Pry  line_buffer drop ","Pry  line_buffer ","@filename == ","Pry  eval_path "," abs_ abs_path  ","RbxPath  convert_ abs_path _to_full ","RbxPath  is_core_ abs_path ? ","Pry  eval_ abs_path  "]}," Pry CodeFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry CLI parse_options":{"type":"method","name":"parse_options","children":[],"call":["processor call "," option_processors each "," option_processors "," exit "," puts ","Slop  new "," options ","Slop  parse! "," input_args= "," raise ","Pry  final_session_setup ","Pry Slop  new ","Pry Slop  parse! ","Pry  initial_session_setup ","Kernel  exit ","args replace ","args [] ","@pass_argv + ","(str \"-\") include? ","args index "," options ! ","Slop  parse "]}," Pry CLI reset":{"type":"method","name":"reset","children":[],"call":[" option_processors= "," options= "]}," Pry CLI add_option_processor":{"type":"method","name":"add_option_processor","children":[],"call":[" option_processors << "," option_processors "]}," Pry CLI add_plugin_options":{"type":"method","name":"add_plugin_options","children":[],"call":["plugin load_cli_options ","Pry  plugins values each ","Pry  plugins values ","Pry  plugins "]}," Pry CLI add_options":{"type":"method","name":"add_options","children":[],"call":[" options= "," instance_exec "," proc "," options "]}," Pry Code highlighted":{"type":"method","name":"highlighted","children":[],"call":[" print_to_output "," dup "]}," Pry quiet?":{"type":"method","name":"quiet?","children":[],"call":[" config quiet "," config "]}," Pager output":{"type":"method","name":"output","children":[],"call":[]}," Pry History history_file_path":{"type":"method","name":"history_file_path","children":[],"call":["File  expand_path ","Pry  config history file ","Pry  config history ","Pry  config ","Pry  config history_file "]}," Pry Whereami initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry ShowInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PryTestHelpers inner_scope":{"type":"method","name":"inner_scope","children":[],"call":[" throw "," lambda "," catch "]}," Slop commands_to_help":{"type":"method","name":"commands_to_help","children":[],"call":["(send\n  (ivar :@commands) :map) join ","opts description ","  * ","padding - ","cmd size ","@commands map ","c size ","c size > ","@commands each ","c size  - "]}," Slop clean":{"type":"method","name":"clean","children":[],"call":["object to_s sub ","object to_s "]}," Slop extract_long_flag":{"type":"method","name":"extract_long_flag","children":[],"call":[" clean sub "," clean ","objects shift ","config []= ","flag end_with? ","config [] ","flag =~ ","objects first to_s ","objects first ","objects first to_s  end_with? ","objects first to_s  =~ "]}," Slop extract_short_flag":{"type":"method","name":"extract_short_flag","children":[],"call":["objects shift ","flag size == ","flag size ","flag chop! ","config [] ","flag end_with? "," clean ","objects first "," clean  size == "," clean  size "," clean  chop! "," clean  end_with? "]}," Slop build_option":{"type":"method","name":"build_option","children":[],"call":["Option  new ","objects shift ","objects [] respond_to? ","objects [] "," extract_long_flag "," extract_short_flag ","objects pop ","config merge! ","objects last ","objects last is_a? ","config []= ","@config [] "," extract_ extract_long_flag _flag "," extract_ extract_short_flag _flag "]}," Slop autocreate":{"type":"method","name":"autocreate","children":[],"call":[" options << "," options ","option config []= ","option config ","argument !~ ","items [] ","index + "," build_option "," Array ","@trash include? ! ","@trash include? "," fetch_option ! "," fetch_option ","  build_option s << ","  build_option s "," build_option  config []= "," build_option  config ","items []  !~ "," build_ build_option  "," fetch_ build_option  ! "," fetch_ build_option  "]}," Slop extract_option":{"type":"method","name":"extract_option","children":[],"call":["option argument_in_value= "," fetch_option ","flag gsub ","flag downcase "," config [] "," config "," fetch_option  argument_in_value= "," fetch_ fetch_option  "]}," Slop execute_multiple_switches":{"type":"method","name":"execute_multiple_switches","children":[],"call":[" execute_option ","opt count "," fetch_option ","argument split each ","argument split "," execute_ fetch_option ion "," fetch_option  count "," fetch_ fetch_option ion "]}," Slop execute_option":{"type":"method","name":"execute_option","children":[],"call":["option call ","option value "," raise ","argument match ! ","argument match ","option config [] ","option config ","option match? ","option value= ","option count > ","option count ","@trash << ","index + ","option argument_in_value ","item end_with? "," strict? "," config [] "," config ","option ! "]}," Slop process_item":{"type":"method","name":"process_item","children":[],"call":["block call ","@trash include? ! ","@trash include? ","@unknown_options << ","item =~ "," strict? ","option call ","option value= ","option count > ","option count "," execute_multiple_switches "," config [] "," config "," execute_option ","argument =~ ","items at ","index + ","option accepts_optional_argument? "," raise ","option key ","argument ! ","option expects_argument? ","@triggered_options << ","@trash << ","option key [] == ","option key [] ","item start_with? "," extract_option ","items [] ","items []  =~ ","items [] s at ","items []  start_with? ","items [] s [] "]}," Slop method_missing":{"type":"method","name":"method_missing","children":[],"call":[" present? ","meth gsub ","meth chop! ","meth end_with? ","method to_s ","method to_s  gsub ","method to_s  chop! ","method to_s  end_with? ","method to_s od to_s "]}," Slop to_s":{"type":"method","name":"to_s","children":[],"call":["@separators [] ","@commands any? ","File  basename ","banner nil? "," config [] "," config ","optstr << "," commands_to_help ","optstr empty? ! ","optstr empty? ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join ","(lvar :o) join ","i + ","opts each_with_index map ","opts each_with_index ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select ","heads + "," options - "," options "," options reject "," config []  nil? ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join  << ","opt@separators []  << ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map tr << ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join  empty? ! ","opt@separators []  empty? ! ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map tr empty? ! ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join  empty? ","opt@separators []  empty? ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map tr empty? ","(send\n  (send\n    (lvar :(send\n  (lvar :heads) :+\n  (lvar :tails)) select map ) :each_with_index) :map) join ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map  each_with_index map ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map  each_with_index ","(send\n  (lvar : options reject ) :+\n  (lvar :tails)) select map ","(send\n  (lvar : options reject ) :+\n  (lvar :tails)) select "," options reject  + "]}," Slop separator":{"type":"method","name":"separator","children":[],"call":["@separators []= "," options size "," options ","@separators [] << ","@separators [] "]}," Slop add_callback":{"type":"method","name":"add_callback","children":[],"call":["(or-asgn\n  (send\n    (ivar :@callbacks) :[]\n    (lvar :label))\n  (array)) << ","@callbacks [] "]}," Slop fetch_command":{"type":"method","name":"fetch_command","children":[],"call":["@commands [] ","command to_s "]}," Slop fetch_option":{"type":"method","name":"fetch_option","children":[],"call":["(send\n  (lvar :option) :long) include? "," clean ","option short ","option long "," options find "," options "]}," Slop missing":{"type":"method","name":"missing","children":[],"call":["(send\n  (send nil :options) :-\n  (ivar :@triggered_options)) map "," options - "," options "]}," Slop respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["o key == ","method_name to_s chop ","method_name to_s ","o key "," options any? "," options "]}," Slop present?":{"type":"method","name":"present?","children":[],"call":["opt count > ","opt count "," fetch_option ","keys all? "," fetch_option  count > "," fetch_option  count "," fetch_ fetch_option ion "]}," Slop run":{"type":"method","name":"run","children":[],"call":[" raise ","@runner respond_to? "]}," Slop each":{"type":"method","name":"each","children":[],"call":[" options each "," options "]}," Slop to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash merge! ","opts to_hash ","cmd to_sym ","@commands each ","Hash  [] ","opt value ","opt key to_sym ","opt key "," options map "," options ","Hash  []  merge! ","opts to_Hash  []  "]}," Slop []":{"type":"method","name":"[]","children":[],"call":["option value "," fetch_option "," fetch_option  value "," fetch_ fetch_option  "]}," Slop on":{"type":"method","name":"on","children":[],"call":[" options << "," options "," build_option ","  build_option s << ","  build_option s "," build_ build_option  "]}," Slop parse!":{"type":"method","name":"parse!","children":[],"call":["@runner call ","@runner respond_to? ","cb call ","@callbacks [] each ","@callbacks [] ","@triggered_options empty? "," raise ","@unknown_options join ","@unknown_options any? ","missing_options map join ","missing_options map ","missing_options any? ","opt count < ","opt count ","opt required? "," options select "," options ","@trash include? ","items reject! with_index ","items reject! "," process_item "," autocreate "," config [] "," config ","@trash << ","item == ","items each_with_index ","cmd parse! ","items [] ","@commands [] ","items empty? ","slop parse! ","Pry Slop  new ","config empty? ","items is_a? ","@commands []  parse! ","Pry Slop  new  parse! "]}," Slop parse":{"type":"method","name":"parse","children":[],"call":[" parse! ","items dup "]}," Slop command":{"type":"method","name":"command","children":[],"call":["@commands []= ","Pry Slop  new ","command to_s "]}," Slop description":{"type":"method","name":"description","children":[],"call":[" config [] "," config "," config []= "]}," Slop description=":{"type":"method","name":"description=","children":[],"call":[" config []= "," config "]}," Slop banner":{"type":"method","name":"banner","children":[],"call":[" config [] "," config "," config []= "]}," Slop banner=":{"type":"method","name":"banner=","children":[],"call":[" config []= "," config "]}," Slop strict?":{"type":"method","name":"strict?","children":[],"call":[" config [] "," config "]}," Slop initialize":{"type":"method","name":"initialize","children":[],"call":["$stderr puts "," help "," on ","config [] "," instance_eval ","block arity == ","block arity "," block_given? ","DEFAULT_OPTIONS  merge "]}," Slop optspec":{"type":"method","name":"optspec","children":[],"call":["opt config []= ","opt config ","long sub! ","long end_with? ","opts on ","s sub ","opt split map ","opt split ","line split ","lines each ","Slop  new ","optspec split reject ","optspec split ","string split ","config []= ","string [] ","opts on  config []= ","opts on  config ","opts on s on ","Slop  new  on ","opts on  split map ","opts on  split ","optspec split reject  each ","opts on spec split reject ","Slop  new pec split reject ","opts on spec split ","Slop  new pec split "]}," Slop Option value_to_range":{"type":"method","name":"value_to_range","children":[],"call":[" raise ","@slop strict? ","Range  new ","2 == ","3 to_i ","1 to_i ","value to_s "]}," Slop Option value_to_float":{"type":"method","name":"value_to_float","children":[],"call":["value to_s to_f ","value to_s "," raise "," Float ","@slop strict? "]}," Slop Option value_to_integer":{"type":"method","name":"value_to_integer","children":[],"call":["value to_s to_i ","value to_s "," raise "," Integer ","@slop strict? "]}," Slop Option inspect":{"type":"method","name":"inspect","children":[],"call":["(str \"#<Slop::Option [-\") + + "," config inspect "," config "," description ","(str \"#<Slop::Option [-\") + "," accepts_optional_argument? "," expects_argument? "," long "," short "]}," Slop Option to_s":{"type":"method","name":"to_s","children":[],"call":[" description ","out << ","  * ","@slop config [] + ","@slop config [] ","@slop config ","diff + ","@slop config [] - "," long size "," long "," short "," config [] "," config "," config [] respond_to? ","@slop config [] -  + "," long  long size  "]}," Slop Option value":{"type":"method","name":"value","children":[],"call":["callable call "," types [] ","type to_s downcase to_sym ","type to_s downcase ","type to_s "," types ","type call ","type respond_to? "," config [] "," config "," config [] to_s != "," config [] to_s ","(true) include? ","@value nil? "," types []  call ","  config [] s [] "," config []  to_s downcase to_sym "," config []  to_s downcase "," config []  to_s ","  config [] s "," config []  call "," config []  respond_to? ","@ config []  nil? "]}," Slop Option value=":{"type":"method","name":"value=","children":[],"call":["@value concat ","new_value split "," config [] "," config ","new_value respond_to? "," config [] to_s downcase == "," config [] to_s downcase "," config [] to_s "]}," Slop Option call":{"type":"method","name":"call","children":[],"call":["@callback call ","@callback respond_to? "]}," Slop Option key":{"type":"method","name":"key","children":[],"call":[" short "," long "]}," Slop Option accepts_optional_argument?":{"type":"method","name":"accepts_optional_argument?","children":[],"call":[" config [] == "," config [] "," config "]}," Slop Option expects_argument?":{"type":"method","name":"expects_argument?","children":[],"call":[" config [] != "," config [] "," config "]}," Slop Option initialize":{"type":"method","name":"initialize","children":[],"call":["@config [] ! ! ","@config [] ! ","@config [] "," class __send__ "," class "," class method_defined? ","@config each_key ","@slop config []= ","long size ","@slop config ","long size > ","@slop config [] "," proc "," value_to_range "," value_to_float "," value_to_integer ","v to_sym ","v to_s ","config [] "," block_given? ","DEFAULT_OPTIONS  merge ","DEFAULT_OPTIONS  merge  [] ! ! ","DEFAULT_OPTIONS  merge  [] ! ","DEFAULT_OPTIONS  merge  [] ","DEFAULT_OPTIONS  merge  each_key "]}," Slop Commands execute_global_opts!":{"type":"method","name":"execute_global_opts!","children":[],"call":["global_opts parse! "," commands [] "," commands "," commands []  parse! "]}," Slop Commands execute_arguments!":{"type":"method","name":"execute_arguments!","children":[],"call":["items shift ","@arguments size ","arg start_with? ! ","arg start_with? ","items take_while "]}," Slop Commands inspect":{"type":"method","name":"inspect","children":[],"call":[" commands values map "," commands values "," commands "," config inspect "," config "]}," Slop Commands to_s":{"type":"method","name":"to_s","children":[],"call":["banner + ","(send\n  (lvar :helps) :map) join ","helps map ","helps merge! ","defaults to_s ","defaults options any? ","defaults options ","globals to_s ","globals options any? ","globals options ","v options none? ","v options "," commands reject "," commands "," commands delete "," commands delete  to_s "," commands delete  options any? "," commands delete  options "]}," Slop Commands to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  [] ","v to_hash ","k to_sym "," commands map "," commands "]}," Slop Commands parse!":{"type":"method","name":"parse!","children":[],"call":[" execute_global_opts! "," raise ","items [] "," config [] "," config ","opts parse! "," commands [] "," commands "," execute_arguments! ","items shift ","items [] to_s "," execute_global_ commands [] ! "," commands []  parse! "]}," Slop Commands parse":{"type":"method","name":"parse","children":[],"call":[" parse! ","items dup "]}," Slop Commands each":{"type":"method","name":"each","children":[],"call":["@commands each "]}," Slop Commands present?":{"type":"method","name":"present?","children":[],"call":["key to_s == ","key to_s "]}," Slop Commands []":{"type":"method","name":"[]","children":[],"call":[" commands [] ","key to_s "," commands "]}," Slop Commands global":{"type":"method","name":"global","children":[],"call":[" on "]}," Slop Commands default":{"type":"method","name":"default","children":[],"call":[" on "]}," Slop Commands on":{"type":"method","name":"on","children":[],"call":[" commands []= ","Slop  new ","@config merge ","command to_s "," commands "]}," Slop Commands banner":{"type":"method","name":"banner","children":[],"call":[]}," Slop Commands initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval ","block arity == ","block arity "," block_given? "," warn "]}," Pry REPL set_readline_output":{"type":"method","name":"set_readline_output","children":[],"call":["Readline  output= ","Pry  config output ","Pry  config "," piping? "]}," Pry REPL piping?":{"type":"method","name":"piping?","children":[],"call":["Pry Helpers BaseHelpers  windows? ! ","Pry Helpers BaseHelpers  windows? ","$stdin tty? ","$stdout tty? ! ","$stdout tty? ","$stdout respond_to? ","Helpers Platform  windows? ! ","Helpers Platform  windows? "]}," Pry REPL coolline_available?":{"type":"method","name":"coolline_available?","children":[],"call":[" input is_a? "," input "]}," Pry REPL readline_available?":{"type":"method","name":"readline_available?","children":[],"call":[" input == "," input "]}," Pry final_session_setup":{"type":"method","name":"final_session_setup","children":[],"call":[]}," Pry configure":{"type":"method","name":"configure","children":[],"call":[" config "]}," Pry PluginManager gem_list":{"type":"method","name":"gem_list","children":[],"call":["Gem  source_index find_name ","Gem  source_index ","Gem Specification  respond_to? ","Gem  refresh "]}," Pry PluginManager plugin_located?":{"type":"method","name":"plugin_located?","children":[],"call":["existing gem_name == ","plugin gem_name ","existing gem_name ","@plugins any? "]}," Pry PluginManager Plugin supported?":{"type":"method","name":"supported?","children":[],"call":["dependency requirement satisfied_by? ","dependency requirement ","dependency name == ","dependency name "," spec dependencies each "," spec dependencies "," spec ","Gem Version  new "]}," Output decolorize_maybe":{"type":"method","name":"decolorize_maybe","children":[],"call":["Pry Helpers Text  strip_color "," _pry_ config color "," _pry_ config "," _pry_ "]}," Output respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@boxed_io respond_to? "]}," Output method_missing":{"type":"method","name":"method_missing","children":[],"call":["@boxed_io __send__ "]}," Output tty?":{"type":"method","name":"tty?","children":[],"call":["@boxed_io tty? ","@boxed_io respond_to? "]}," Output print":{"type":"method","name":"print","children":[],"call":["@boxed_io print "," decolorize_maybe ","obj to_s ","objs each "]}," Output puts":{"type":"method","name":"puts","children":[],"call":[" print ","obj to_s chomp ","obj to_s "," puts ","Array  try_convert ","objs each ","objs empty? "]}," Output initialize":{"type":"method","name":"initialize","children":[],"call":["_pry_ config output ","_pry_ config "]}," InputCompleter ignored_modules":{"type":"method","name":"ignored_modules","children":[],"call":["s delete ","scanner call ","Object  const_get ","Object  const_defined? ","(sym :IRB) each ","value is_a? ","m const_get ","m constants each ","m constants ","s << ","s include? "," lambda ","Set  new ","Set  new  delete ","Set  new canner call ","Object  conSet  new t_get ","Object  conSet  new t_defined? ","(Set  new ym :IRB) each ","m const_get  is_a? ","value iSet  new _a? ","m conSet  new t_get ","m conSet  new tantSet  new  each ","m conSet  new tantSet  new  ","Set  new  << ","Set  new  include? "]}," Pry Hooks clear_event_hooks":{"type":"method","name":"clear_event_hooks","children":[],"call":["@hooks []= ","event_name to_s "]}," Pry History should_ignore?":{"type":"method","name":"should_ignore?","children":[],"call":["line to_s match ","line to_s ","hist_ignore any? ","hist_ignore empty? ","hist_ignore nil? ","Pry  config history histignore ","Pry  config history ","Pry  config ","Pry  config history_ignorelist ","Pry  config history histignore  any? ","Pry  config history_ignorelist  any? ","Pry  config history histignore  empty? ","Pry  config history_ignorelist  empty? ","Pry  config history histignore  nil? ","Pry  config history_ignorelist  nil? "]}," Pry History filter":{"type":"method","name":"filter","children":[],"call":[" should_ignore? ","history select "]}," Pry Forwardable def_private_delegators":{"type":"method","name":"def_private_delegators","children":[],"call":[" private "," class_eval "," instance_variable_get __send__ "," instance_variable_get "," define_method ","private_delegates each "]}," Memoization memoized_methods":{"type":"method","name":"memoized_methods","children":[],"call":["MEMOIZED_METHODS  [] "," class "]}," Memoization included":{"type":"method","name":"included","children":[],"call":[]}," Memoization ClassMethods def_memoized":{"type":"method","name":"def_memoized","children":[],"call":["method_table keys ","MEMOIZED_METHODS  [] ","method_table [] ","method_table []= "," instance_eval ","method_table [] equal? "," define_method ","method_table each "]}," Behavior __remove":{"type":"method","name":"__remove","children":[],"call":["@lookup delete "]}," Behavior __push":{"type":"method","name":"__push","children":[],"call":["@lookup []= "," define_singleton_method "," [] "," singleton_class method_defined? "," singleton_class "]}," Behavior __dup":{"type":"method","name":"__dup","children":[],"call":["value dup ","klass === ","NODUP  any? "]}," Behavior __try_convert_to_hash":{"type":"method","name":"__try_convert_to_hash","children":[],"call":["obj to_hash ","obj respond_to? ","obj to_h ","Hash  === "]}," Behavior __clip_inspect":{"type":"method","name":"__clip_inspect","children":[],"call":["(begin\n  (send\n    (lvar :obj) :class)) % ","obj object_id ","obj class "]}," Behavior last_default":{"type":"method","name":"last_default","children":[],"call":["last default ","last default  default "]}," Behavior eager_load!":{"type":"method","name":"eager_load!","children":[],"call":["@default default "," []= ","default public_send "," key ","default memoized_methods each ","default memoized_methods ","default respond_to? ","local_last_default public_send ","local_last_default lazy_keys each ","local_last_default lazy_keys "," last_default ","@@default default  @default default  ","@default default  public_send ","@default default  memoized_methods each ","@default default  memoized_methods ","@default default  respond_to? ","local_last_@default default  public_send "," last_default  public_send ","local_last_@default default  lazy_keys each "," last_default  lazy_keys each ","local_last_@default default  lazy_keys "," last_default  lazy_keys "," last_@default default  "]}," Pry ShellCommand special_case_path?":{"type":"method","name":"special_case_path?","children":[],"call":["dest =~ ","(str \".\") include? "]}," Pry ShellCommand path_from_cd_path":{"type":"method","name":"path_from_cd_path","children":[],"call":["path split last == ","path split last ","path split ","File  directory? "," cd_path_env split each "," cd_path_env split "," cd_path_env "," special_case_path? ","(and\n  (lvar :dest)\n  (send nil :cd_path_exists?)) ! "," cd_path_exists? "]}," Pry ShellCommand cd_path_exists?":{"type":"method","name":"cd_path_exists?","children":[],"call":[" cd_path_env length nonzero? "," cd_path_env length "," cd_path_env "]}," Pry ShellCommand cd_path_env":{"type":"method","name":"cd_path_env","children":[],"call":["ENV  [] "]}," Pry Ls Constants show_deprecated_constants?":{"type":"method","name":"show_deprecated_constants?","children":[],"call":["@dconstants == "]}," GemSearch list_as_string":{"type":"method","name":"list_as_string","children":[],"call":["(send\n  (send\n    (lvar :gems) :[]\n    (irange\n      (int 0)\n      (send\n        (lvar :limit) :-\n        (int 1)))) :map) join "," text bold ","v + "," text ","gem values_at ","gems [] map ","gems [] ","limit - "," bold "]}," GemSearch process":{"type":"method","name":"process","children":[],"call":[" _pry_ pager page "," list_as_string "," opts [] "," opts "," _pry_ pager "," _pry_ ","JSON  load ","Net HTTP  get ","uri query= ","URI  encode_www_form ","URI  parse ","URI  parse  query= "]}," GemSearch options":{"type":"method","name":"options","children":[],"call":["opt on "]}," GemSearch setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," GemReadme process":{"type":"method","name":"process","children":[],"call":[" raise "," _pry_ pager page ","File  read "," _pry_ pager "," _pry_ ","File  exist? ","readme to_s ","Dir  [] [] ","Dir  [] ","File  join ","spec full_gem_path ","Gem Specification  find_by_name ","Dir  [] []  to_s ","Gem Specification  find_by_name  full_gem_path "]}," Pry Edit previously_patched?":{"type":"method","name":"previously_patched?","children":[],"call":["Pry Method Patcher  code_for ","code_object source_location first ","code_object source_location ","code_object is_a? "]}," Pry CommandSet random_hook_name":{"type":"method","name":"random_hook_name","children":[],"call":["(send\n  (begin\n    (erange\n      (int 0)\n      (int 8))) :map) join ","(irange\n  (str \"a\")\n  (str \"z\")) to_a [] "," rand ","(irange\n  (str \"a\")\n  (str \"z\")) to_a ","(erange\n  (int 0)\n  (int 8)) map "]}," Pry Command after_hooks":{"type":"method","name":"after_hooks","children":[],"call":[" find_hooks "]}," Pry Command before_hooks":{"type":"method","name":"before_hooks","children":[],"call":[" find_hooks "]}," Pry Command find_hooks":{"type":"method","name":"find_hooks","children":[],"call":["(or\n  (send\n    (self) :hooks)\n  (send\n    (send\n      (self) :class) :hooks)) get_hooks values ","(or\n  (send\n    (self) :hooks)\n  (send\n    (send\n      (self) :class) :hooks)) get_hooks "," class hooks "," class "," hooks "," command_name ","(or\n  (or\n    (send nil :hooks)\n    (send\n      (const nil :Pry) :hooks))\n  (send\n    (send\n      (self) :class) :hooks)) get_hooks values ","(or\n  (or\n    (send nil :hooks)\n    (send\n      (const nil :Pry) :hooks))\n  (send\n    (send\n      (self) :class) :hooks)) get_hooks ","Pry  hooks "]}," Pry Command use_unpatched_symbol":{"type":"method","name":"use_unpatched_symbol","children":[],"call":[" define_method ","Symbol  instance_eval ","Symbol  class_eval ","Symbol  instance_method ","Symbol  method_defined? "]}," Pry CodeObject Helpers c_module?":{"type":"method","name":"c_module?","children":[],"call":["c_methods > ","method_locations count - ","method_locations count ","method_locations grep count ","method_locations grep ","method_locations concat "," wrapped instance_method source_location "," wrapped instance_method "," wrapped "," wrapped instance_methods map "," wrapped instance_methods "," wrapped method source_location "," wrapped method "," wrapped methods map "," wrapped methods "," is_a? ","method_locations grep count  > "]}," Pry Code respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" respond_to? "]}," Pry CLI start":{"type":"method","name":"start","children":[],"call":["Pry  start ","StringIO  new ","Pry  config exec_string ","Pry  config "," exit ","Pry  load_file_through_repl ","File  expand_path ","Pry CLI  input_args first ","Pry CLI  input_args ","Pry CLI  input_args != ","Pry CLI  input_args any? ","Pry  toplevel_binding ","Pry  final_session_setup ","Pry  binding_for "," eval ","opts [] ","Pry  initial_session_setup ","Pry  cli= ","opts help? ","Kernel  exit ","@pass_argv ! "]}," Lazy lazy_keys":{"type":"method","name":"lazy_keys","children":[],"call":["LAZY_KEYS  [] "," class "]}," Lazy included":{"type":"method","name":"included","children":[],"call":[]}," Lazy ClassMethods lazy_implement":{"type":"method","name":"lazy_implement","children":[],"call":["method_name_to_func keys ","LAZY_KEYS  [] ","method_name_to_func [] ","method_name_to_func []= "," instance_eval ","method_name_to_func [] equal? "," define_method ","method_name_to_func each "]}," Testable unset_testenv_variables":{"type":"method","name":"unset_testenv_variables","children":[],"call":[]}," Testable set_testenv_variables":{"type":"method","name":"set_testenv_variables","children":[],"call":[]}," Testable included":{"type":"method","name":"included","children":[],"call":[]}," Variables insert_variable":{"type":"method","name":"insert_variable","children":[],"call":["Pry  current []= ","Pry  current ","b eval "]}," Variables temporary_constants":{"type":"method","name":"temporary_constants","children":[],"call":["Object  remove_const ","Object  const_defined? ","names each "]}," Utility inner_scope":{"type":"method","name":"inner_scope","children":[],"call":[" throw "," lambda "," catch "]}," Utility unindent":{"type":"method","name":"unindent","children":[],"call":["Pry Helpers CommandHelpers  unindent "]}," Utility temp_file":{"type":"method","name":"temp_file","children":[],"call":["file close ","Tempfile  open ","Tempfile  open  close ","TempTempfile  open   open "]}," Mockable mock_exception":{"type":"method","name":"mock_exception","children":[],"call":["e define_singleton_method ","StandardError  new tap ","StandardError  new "]}," Mockable mock_command":{"type":"method","name":"mock_command","children":[],"call":["Struct  new new ","output string ","Struct  new ","cmd new call_safely ","cmd new ","opts merge ","Pry  new ","StringIO  new ","StringIO  new  string "]}," Evalable pry_eval":{"type":"method","name":"pry_eval","children":[],"call":[" pry_tester eval "," pry_tester ","Pry  binding_for ","eval_strs shift ","Pry  toplevel_binding ","String  === ","eval_strs first ","Pry  Pry  binding_for inding_for ","Pry  Pry  toplevel_binding inding_for ","Pry  toplevel_Pry  binding_for inding ","Pry  toplevel_Pry  toplevel_binding inding "]}," Evalable pry_tester":{"type":"method","name":"pry_tester","children":[],"call":["t singleton_class class_eval ","t singleton_class ","Pry Testable PryTester  new tap ","Pry Testable PryTester  new ","args unshift ","Pry  toplevel_binding ","args [] is_a? ","args [] ","args length == ","args length "]}," Platform mri_2?":{"type":"method","name":"mri_2?","children":[],"call":["(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A2\")\n      (regopt)))) ! ! ","(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A2\")\n      (regopt)))) ! ","RUBY_VERSION  =~ "," mri? "]}," Platform mri_19?":{"type":"method","name":"mri_19?","children":[],"call":["(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A1\\\\.9\")\n      (regopt)))) ! ! ","(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A1\\\\.9\")\n      (regopt)))) ! ","RUBY_VERSION  =~ "," mri? "]}," Platform mri?":{"type":"method","name":"mri?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Platform rbx?":{"type":"method","name":"rbx?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Platform jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "," jruby? "]}," Platform jruby?":{"type":"method","name":"jruby?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Platform windows_ansi?":{"type":"method","name":"windows_ansi?","children":[],"call":["(or\n  (or\n    (defined?\n      (const\n        (const nil :Win32) :Console))\n    (send\n      (const nil :ENV) :[]\n      (str \"ANSICON\")))\n  (send nil :mri_2?)) ! ! ","(or\n  (or\n    (defined?\n      (const\n        (const nil :Win32) :Console))\n    (send\n      (const nil :ENV) :[]\n      (str \"ANSICON\")))\n  (send nil :mri_2?)) ! "," mri_2? ","ENV  [] "," windows? ! "," windows? "]}," Platform windows?":{"type":"method","name":"windows?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw\")\n    (regopt))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw\")\n    (regopt))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Platform linux?":{"type":"method","name":"linux?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt :i))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt :i))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Platform mac_osx?":{"type":"method","name":"mac_osx?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"\\\\Adarwin\")\n    (regopt :i))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"\\\\Adarwin\")\n    (regopt :i))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Pry Method WeirdMethodLocator skip_superclass_search?":{"type":"method","name":"skip_superclass_search?","children":[],"call":["(send\n  (send\n    (lvar :target_mod) :ancestors) :take_while) any? ","mod != ","target_mod ancestors take_while ","target_mod ancestors ","@target eval class ","@target eval ","(send\n  (send\n    (lvar :@target eval class ) :ancestors) :take_while) any? ","@target eval class  ancestors take_while ","@target eval class  ancestors "]}," BaseHelpers stagger_output":{"type":"method","name":"stagger_output","children":[],"call":["Pry  new pager page ","Pry  new pager ","Pry  new "," _pry_ pager page "," _pry_ pager "," _pry_ "]}," BaseHelpers heading":{"type":"method","name":"heading","children":[],"call":[]}," BaseHelpers highlight":{"type":"method","name":"highlight","children":[],"call":["string gsub "]}," BaseHelpers colorize_code":{"type":"method","name":"colorize_code","children":[],"call":["CodeRay  scan term ","CodeRay  scan "]}," BaseHelpers use_ansi_codes?":{"type":"method","name":"use_ansi_codes?","children":[],"call":["ENV  [] != ","ENV  [] "," windows_ansi? ","Pry Helpers Platform  windows_ansi? "]}," BaseHelpers command_dependencies_met?":{"type":"method","name":"command_dependencies_met?","children":[],"call":["Pry Rubygem  installed? "," Array all? "," Array ","options [] ","options [] ! "]}," BaseHelpers not_a_real_file?":{"type":"method","name":"not_a_real_file?","children":[],"call":["file == ","file =~ "]}," BaseHelpers find_command":{"type":"method","name":"find_command","children":[],"call":["command_match last ","listing != ","(lvasgn :listing\n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :listing))) == ","command options [] ","command options ","set find ","command options []  != ","(lvasgn :command options [] \n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :command options [] ))) == "]}," BaseHelpers safe_send":{"type":"method","name":"safe_send","children":[],"call":["(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method ","Module  === "]}," BaseHelpers silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Pry Ring clear":{"type":"method","name":"clear","children":[],"call":["@mutex synchronize "]}," Pry Ring to_a":{"type":"method","name":"to_a","children":[],"call":["last_part + ","@buffer - ","@buffer slice ","@buffer size "," count % "," max_size "," count ","@buffer dup "," count <= "," transpose_buffer_tail ","@buffer slice  + "]}," Pry Ring []":{"type":"method","name":"[]","children":[],"call":["(send\n  (lvar :last_part) :+\n  (begin\n    (send\n      (ivar :@buffer) :-\n      (lvar :last_part)))) [] ","last_part + ","@buffer - ","@buffer slice "," count % "," max_size "," count ","(send\n  (lvar :index) :end) min "," max_size - ","index end ","@buffer [] "," count <= ","(send\n  (send nil :count) :+\n  (lvar :index)) % "," count + ","index is_a? ","@mutex synchronize "," transpose_buffer_tail [] "," transpose_buffer_tail ","(send\n  (lvar :@buffer slice ) :+\n  (begin\n    (send\n      (ivar :@buffer) :-\n      (lvar :@buffer slice )))) [] ","@buffer slice  + "]}," Pry Ring <<":{"type":"method","name":"<<","children":[],"call":["@buffer []= "," count % "," max_size "," count ","@mutex synchronize "]}," Pry Ring initialize":{"type":"method","name":"initialize","children":[],"call":[" clear ","Mutex  new "]}," Pry REPL calculate_overhang":{"type":"method","name":"calculate_overhang","children":[],"call":["(int 0) max ","current_prompt length - ","indented_val length ","current_prompt length ","Readline  vi_editing_mode? ","Readline  respond_to? "," readline_available? ","original_val length - ","original_val length "," output width - - ","indented_val size "," output width - ","current_prompt size "," output width "," output "]}," Pry output_array":{"type":"method","name":"output_array","children":[],"call":[" warn "," class "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Pry input_array":{"type":"method","name":"input_array","children":[],"call":[" warn "," class "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Pry lazy":{"type":"method","name":"lazy","children":[],"call":[]}," Pry Prompt prompt_name":{"type":"method","name":"prompt_name","children":[],"call":["name call ","name is_a? "]}," Pry Prompt add":{"type":"method","name":"add","children":[],"call":["@prompts []= "," proc ","separators map ","prompt_name to_s "," raise ","separators size ","separators size == "," new ","@prompts key? ","name to_s ","prompt_name to_s  to_s ","name to_s  to_s "]}," Pry Prompt all":{"type":"method","name":"all","children":[],"call":["@prompts dup "]}," Pry Prompt []":{"type":"method","name":"[]","children":[],"call":[" all [] ","prompt_name to_s "," all ","@prompts [] ","Pry Warning  warn "," class ","key to_s == ","key to_s "," public_send ","(str \"name\") include? ","name to_s ","key to_s  to_s == ","key to_s  to_s "]}," Pry Platform mri_2?":{"type":"method","name":"mri_2?","children":[],"call":["(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A2\")\n      (regopt)))) ! ! ","(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A2\")\n      (regopt)))) ! ","RUBY_VERSION  =~ "," mri? "]}," Pry Platform mri_19?":{"type":"method","name":"mri_19?","children":[],"call":["(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A1\\\\.9\")\n      (regopt)))) ! ! ","(and\n  (send nil :mri?)\n  (send\n    (const nil :RUBY_VERSION) :=~\n    (regexp\n      (str \"\\\\A1\\\\.9\")\n      (regopt)))) ! ","RUBY_VERSION  =~ "," mri? "]}," Pry Platform mri?":{"type":"method","name":"mri?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Pry Platform jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "," jruby? "]}," Pry Platform jruby?":{"type":"method","name":"jruby?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] "]}," Pry Platform windows_ansi?":{"type":"method","name":"windows_ansi?","children":[],"call":["(or\n  (or\n    (defined?\n      (const\n        (const nil :Win32) :Console))\n    (send\n      (const nil :ENV) :[]\n      (str \"ANSICON\")))\n  (send nil :mri_2?)) ! ! ","(or\n  (or\n    (defined?\n      (const\n        (const nil :Win32) :Console))\n    (send\n      (const nil :ENV) :[]\n      (str \"ANSICON\")))\n  (send nil :mri_2?)) ! "," mri_2? ","ENV  [] "," windows? ! "," windows? "]}," Pry Platform windows?":{"type":"method","name":"windows?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw\")\n    (regopt))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw\")\n    (regopt))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Pry Platform linux?":{"type":"method","name":"linux?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt :i))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt :i))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Pry Platform mac_osx?":{"type":"method","name":"mac_osx?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"\\\\Adarwin\")\n    (regopt :i))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"\\\\Adarwin\")\n    (regopt :i))) ! ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Pry History invalid_readline_line?":{"type":"method","name":"invalid_readline_line?","children":[],"call":["line include? "]}," Pry Helpers Platform mri_2?":{"type":"method","name":"mri_2?","children":[],"call":[]}," Pry Helpers Platform mri_19?":{"type":"method","name":"mri_19?","children":[],"call":[]}," Pry Helpers Platform mri?":{"type":"method","name":"mri?","children":[],"call":[]}," Pry Helpers Platform jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":[]}," Pry Helpers Platform jruby?":{"type":"method","name":"jruby?","children":[],"call":[]}," Pry Helpers Platform windows_ansi?":{"type":"method","name":"windows_ansi?","children":[],"call":[]}," Pry Helpers Platform windows?":{"type":"method","name":"windows?","children":[],"call":[]}," Pry Helpers Platform linux?":{"type":"method","name":"linux?","children":[],"call":[]}," Pry Helpers Platform mac_osx?":{"type":"method","name":"mac_osx?","children":[],"call":[]}," BaseHelpers mri_2?":{"type":"method","name":"mri_2?","children":[],"call":["Pry Helpers Platform  mri_2? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers mri_19?":{"type":"method","name":"mri_19?","children":[],"call":["Pry Helpers Platform  mri_19? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers mri?":{"type":"method","name":"mri?","children":[],"call":["Pry Helpers Platform  mri? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers jruby_19?":{"type":"method","name":"jruby_19?","children":[],"call":["Pry Helpers Platform  jruby_19? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers jruby?":{"type":"method","name":"jruby?","children":[],"call":["Pry Helpers Platform  jruby? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers windows_ansi?":{"type":"method","name":"windows_ansi?","children":[],"call":["Pry Helpers Platform  windows_ansi? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers windows?":{"type":"method","name":"windows?","children":[],"call":["Pry Helpers Platform  windows? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers linux?":{"type":"method","name":"linux?","children":[],"call":["Pry Helpers Platform  linux? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," BaseHelpers mac_osx?":{"type":"method","name":"mac_osx?","children":[],"call":["Pry Helpers Platform  mac_osx? "," warn "," __method__ ","loc lineno ","loc path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first ations first "," caller_ caller_locations first ations "]}," Pry Config shortcuts":{"type":"method","name":"shortcuts","children":[],"call":[]}," Pry Config Lazy call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Pry Config Lazy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Config Memoization memoized_methods":{"type":"method","name":"memoized_methods","children":[],"call":["MEMOIZED_METHODS  [] "," class "]}," Pry Config Memoization included":{"type":"method","name":"included","children":[],"call":[]}," Pry Config Memoization ClassMethods def_memoized":{"type":"method","name":"def_memoized","children":[],"call":["method_table keys ","MEMOIZED_METHODS  [] ","method_table [] ","method_table []= "," instance_eval ","method_table [] equal? "," define_method ","method_table each "]}," Pry Config Default lazy_readline":{"type":"method","name":"lazy_readline","children":[],"call":[" raise "," warn "," require "]}," Pry Config Default initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Config Convenience config_shortcut":{"type":"method","name":"config_shortcut","children":[],"call":[" config public_send "," config "," define_method ","names each "]}," Pry Config Behavior __remove":{"type":"method","name":"__remove","children":[],"call":["@lookup delete "]}," Pry Config Behavior __push":{"type":"method","name":"__push","children":[],"call":["@lookup []= "," define_singleton_method "," [] "," singleton_class method_defined? "," singleton_class "]}," Pry Config Behavior __dup":{"type":"method","name":"__dup","children":[],"call":["value dup ","klass === ","NODUP  any? "]}," Pry Config Behavior __try_convert_to_hash":{"type":"method","name":"__try_convert_to_hash","children":[],"call":["obj to_hash ","obj respond_to? ","obj to_h ","Hash  === "]}," Pry Config Behavior __clip_inspect":{"type":"method","name":"__clip_inspect","children":[],"call":["(begin\n  (send\n    (lvar :obj) :class)) % ","obj object_id ","obj class "]}," Pry Config Behavior respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@default respond_to? "," key? ","key to_s chomp ","key to_s "," key to_s chomp ? ","key to_s chomp  to_s chomp ","key to_s chomp  to_s "]}," Pry Config Behavior method_missing":{"type":"method","name":"method_missing","children":[],"call":[" []= "," __dup ","@default public_send ","@default respond_to? "," [] "," key? ","args [] ","key [] ","key [] == ","name to_s "," name to_s ? ","name to_s  [] ","name to_s  [] == "]}," Pry Config Behavior pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "," inspect [] gsub "," inspect [] "," inspect "]}," Pry Config Behavior inspect":{"type":"method","name":"inspect","children":[],"call":["@default inspect "," __clip_inspect ","(send\n  (send nil :keys) :map) join "," keys map "," keys "]}," Pry Config Behavior to_hash":{"type":"method","name":"to_hash","children":[],"call":["@lookup dup "]}," Pry Config Behavior last_default":{"type":"method","name":"last_default","children":[],"call":["last default ","last default  default "]}," Pry Config Behavior eager_load!":{"type":"method","name":"eager_load!","children":[],"call":["@default default "," []= ","default public_send "," key ","default memoized_methods each ","default memoized_methods ","default respond_to? ","@@default default  @default default  ","@default default  public_send ","@default default  memoized_methods each ","@default default  memoized_methods ","@default default  respond_to? "]}," Pry Config Behavior keys":{"type":"method","name":"keys","children":[],"call":["@lookup keys "]}," Pry Config Behavior clear":{"type":"method","name":"clear","children":[],"call":["@lookup clear "]}," Pry Config Behavior key?":{"type":"method","name":"key?","children":[],"call":["@lookup key? ","key to_s ","@lookup key to_s ? ","key to_s  to_s "]}," Pry Config Behavior ==":{"type":"method","name":"==","children":[],"call":["@lookup == "," __try_convert_to_hash "]}," Pry Config Behavior merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other each "," raise "," __try_convert_to_hash "," __try_convert_to_hash  each "]}," Pry Config Behavior forget":{"type":"method","name":"forget","children":[],"call":[" __remove ","key to_s ","key to_s  to_s "]}," Pry Config Behavior []=":{"type":"method","name":"[]=","children":[],"call":[" __push "," raise ","@reserved_keys include? ","key to_s ","@reserved_key to_s s include? ","key to_s  to_s "]}," Pry Config Behavior []":{"type":"method","name":"[]","children":[],"call":["@default [] ","@lookup [] "," key? ","key to_s "," key to_s ? ","key to_s  to_s "]}," Pry Config Behavior default":{"type":"method","name":"default","children":[],"call":[]}," Pry Config Behavior initialize":{"type":"method","name":"initialize","children":[],"call":[" methods map freeze "," methods map "," methods "]}," Pry Config Behavior included":{"type":"method","name":"included","children":[],"call":[]}," Pry Config Behavior Builder from_hash":{"type":"method","name":"from_hash","children":[],"call":["config []= "," from_hash ","Hash  === ","attributes each "," new tap "," new "]}," Pry Config Behavior Builder assign":{"type":"method","name":"assign","children":[],"call":["behavior merge! "," new tap "," new "]}," GemStat format_dependencies":{"type":"method","name":"format_dependencies","children":[],"call":[" with_line_numbers ","(send\n  (lvar :rdeps) :map) join ","h [] ","rdeps map "," bold ","rdeps empty? "]}," GemStat format_gem":{"type":"method","name":"format_gem","children":[],"call":["format_str % "," format_dependencies ","h dependencies development ","h dependencies ","h dependencies runtime ","h version_downloads ","h downloads "," bold ","h version "," green ","h name "," unindent "," red ","Pry Config  from_hash "," unindent  % ","Pry Config  from_hash  dependencies development ","Pry Config  from_hash  dependencies ","Pry Config  from_hash  dependencies runtime ","Pry Config  from_hash  version_downloads ","Pry Config  from_hash  downloads ","Pry Config  from_hash  version ","Pry Config  from_hash  name ","Pry Config  from_Pry Config  from_hash asPry Config  from_hash  "]}," GemStat process":{"type":"method","name":"process","children":[],"call":["client finish "," raise ","res class "," _pry_ pager page "," bright_red "," bright_blue "," _pry_ pager "," _pry_ "," format_gem ","JSON  parse ","res body ","client get ","STAT_PATH  % ","URI  encode_www_form_component ","Net HTTP  start ","Net HTTP  start  finish ","client get  class ","client get  body ","Net HTTP  start  get "]}," ClearScreen process":{"type":"method","name":"process","children":[],"call":[" _pry_ config system call "," _pry_ "," _pry_ output "," _pry_ config system "," _pry_ config ","Helpers Platform  windows? "]}," ChangePrompt change_prompt":{"type":"method","name":"change_prompt","children":[],"call":[" raise "," _pry_ prompt= ","Pry Prompt  all [] [] ","Pry Prompt  all [] ","Pry Prompt  all "," _pry_ ","Pry Prompt  all key? "]}," ChangePrompt list_prompts":{"type":"method","name":"list_prompts","children":[],"call":[" output puts ","prompts join "," output ","(begin\n  (send nil :bold\n    (lvar :name))) + ","prompt [] "," red "," _pry_ prompt == "," _pry_ prompt "," _pry_ "," bold ","Pry Prompt  all map ","Pry Prompt  all ","\n * "]}," ChangePrompt options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry AmendLine amend_input":{"type":"method","name":"amend_input","children":[],"call":["input_array join "," replace_in_array "," line_range "," insert_into_array "," arg_string start_with? "," arg_string "," delete_from_array "," arg_string == "," eval_string each_line to_a "," eval_string each_line "," eval_string "," eval_string each_line to_a  join "]}," Pry Code LOC handle_multiline_entries_from_edit_command":{"type":"method","name":"handle_multiline_entries_from_edit_command","children":[],"call":["(send\n  (send\n    (send\n      (lvar :line) :split\n      (str \"\\n\")) :map) :with_index) join ","  * ","max_width + ","i zero? ","line split map with_index ","line split map ","line split "]}," Pry Pager PageTracker line_length":{"type":"method","name":"line_length","children":[],"call":["line chomp gsub length ","line chomp gsub ","line chomp "]}," Pry Pager PageTracker reset":{"type":"method","name":"reset","children":[],"call":[]}," Pry Pager PageTracker page?":{"type":"method","name":"page?","children":[],"call":["@row >= "]}," Pry Pager PageTracker record":{"type":"method","name":"record","children":[],"call":[" line_length ","(send\n  (begin\n    (send\n      (send\n        (ivar :@col) :+\n        (send nil :line_length\n          (lvar :line))) :-\n      (int 1))) :/\n  (ivar :@cols)) + ","(send\n  (send\n    (ivar :@col) :+\n    (send nil :line_length\n      (lvar :line))) :-\n  (int 1)) / ","@col + - ","@col + ","line end_with? ","str lines each ","str lines "]}," Pry Pager PageTracker initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Pry Pager SystemPager pager":{"type":"method","name":"pager","children":[],"call":["IO  popen "," class default_pager "," class "]}," Pry Pager SystemPager invoked_pager?":{"type":"method","name":"invoked_pager?","children":[],"call":[]}," Pry Pager SystemPager write_to_pager":{"type":"method","name":"write_to_pager","children":[],"call":[" pager write ","@out decolorize_maybe "," pager "]}," Pry Pager SystemPager close":{"type":"method","name":"close","children":[],"call":["@out puts "," pager close "," pager "," invoked_pager? "]}," Pry Pager SystemPager write":{"type":"method","name":"write","children":[],"call":[" raise "," write_to_pager ","@tracker page? ","@buffer << ","@tracker record "," invoked_pager? "]}," Pry Pager SystemPager initialize":{"type":"method","name":"initialize","children":[],"call":["PageTracker  new "," width "," height "]}," Pry Pager SystemPager available?":{"type":"method","name":"available?","children":[],"call":[]}," Pry Pager SystemPager default_pager":{"type":"method","name":"default_pager","children":[],"call":[]}," Pry Pager SimplePager write":{"type":"method","name":"write","children":[],"call":["@tracker reset "," raise ","Readline  readline chomp == ","Readline  readline chomp ","Readline  readline ","@out print ","@tracker page? ","@tracker record ","str lines each ","str lines "]}," Pry Pager SimplePager initialize":{"type":"method","name":"initialize","children":[],"call":["PageTracker  new "," width "," height - "," height "]}," Pry Pager NullPager width":{"type":"method","name":"width","children":[],"call":["Pry Terminal  width! ","@out width "]}," Pry Pager NullPager height":{"type":"method","name":"height","children":[],"call":["Pry Terminal  height! ","@out height "]}," Pry Pager NullPager close":{"type":"method","name":"close","children":[],"call":[]}," Pry Pager NullPager write":{"type":"method","name":"write","children":[],"call":["@out write "]}," Pry Pager NullPager print":{"type":"method","name":"print","children":[],"call":[" write "]}," Pry Pager NullPager puts":{"type":"method","name":"puts","children":[],"call":[" print ","str chomp "]}," Pry Pager NullPager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Pager best_available":{"type":"method","name":"best_available","children":[],"call":["SystemPager  new "," _pry_ output "," _pry_ ","SimplePager  new ","Helpers Platform  jruby? ","SystemPager  available? ! ","SystemPager  available? ","NullPager  new "," _pry_ config pager ! "," _pry_ config pager "," _pry_ config "," pry_instance output "," pry_instance "," pry_instance config pager ! "," pry_instance config pager "," pry_instance config "]}," Pry Pager output":{"type":"method","name":"output","children":[],"call":[]}," Pry Pager enabled?":{"type":"method","name":"enabled?","children":[],"call":["@enabled ! ! ","@enabled ! "]}," Pry Pager open":{"type":"method","name":"open","children":[],"call":["pager close "," best_available "," best_available  close "]}," Pry Pager page":{"type":"method","name":"page","children":[],"call":["pager << "," open "]}," Pry Pager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry WrappedModule respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" wrapped respond_to? "," wrapped "]}," Pry Warning warn":{"type":"method","name":"warn","children":[],"call":[]}," Pry Testable unset_testenv_variables":{"type":"method","name":"unset_testenv_variables","children":[],"call":[]}," Pry Testable set_testenv_variables":{"type":"method","name":"set_testenv_variables","children":[],"call":[]}," Pry Testable included":{"type":"method","name":"included","children":[],"call":[]}," Pry Testable Variables insert_variable":{"type":"method","name":"insert_variable","children":[],"call":["Pry  current []= ","Pry  current ","binding eval "]}," Pry Testable Variables temporary_constants":{"type":"method","name":"temporary_constants","children":[],"call":["Object  remove_const ","Object  const_defined? ","names each "]}," Pry Testable Utility inner_scope":{"type":"method","name":"inner_scope","children":[],"call":[" throw "," lambda "," catch "]}," Pry Testable Utility unindent":{"type":"method","name":"unindent","children":[],"call":["Pry Helpers CommandHelpers  unindent "]}," Pry Testable Utility temp_file":{"type":"method","name":"temp_file","children":[],"call":["file close ","Tempfile  open ","Tempfile  open  close ","TempTempfile  open   open "]}," Pry Testable PryTester reset_output":{"type":"method","name":"reset_output","children":[],"call":["@pry output= ","StringIO  new "]}," Pry Testable PryTester last_command_result_or_output":{"type":"method","name":"last_command_result_or_output","children":[],"call":[" last_output ","result != "," last_command_result "," last_command_result  != "," last_command_ last_command_result  "]}," Pry Testable PryTester last_command_result":{"type":"method","name":"last_command_result","children":[],"call":["result retval ","Pry  current [] ","Pry  current ","Pry  current []  retval "]}," Pry Testable PryTester process_command":{"type":"method","name":"process_command","children":[],"call":[" last_command_result_or_output "," raise ","@pry process_command "]}," Pry Testable PryTester last_output":{"type":"method","name":"last_output","children":[],"call":["@out string "]}," Pry Testable PryTester push_binding":{"type":"method","name":"push_binding","children":[],"call":["@pry push_binding "]}," Pry Testable PryTester push":{"type":"method","name":"push","children":[],"call":["@pry eval "," Array flatten each "," Array flatten "," Array "]}," Pry Testable PryTester eval":{"type":"method","name":"eval","children":[],"call":["@pry evaluate_ruby ","@pry output puts ","exception message sub ","exception message ","@pry output ","Pry Code  complete_expression? "," last_command_result_or_output ","@pry process_command ","@history push ","str strip ","str !~ ","strs flatten each ","strs flatten "," reset_output ","Pry Code  Pry Code  complete_expression? ession? "," last_command_ last_command_result_or_output _or_output "]}," Pry Testable PryTester initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_output ","@pry inject_sticky_locals! ","options [] ","Pry  new ","options merge ","Pry  new  inject_sticky_locals! "]}," Pry Testable Mockable mock_exception":{"type":"method","name":"mock_exception","children":[],"call":["e define_singleton_method ","StandardError  new tap ","StandardError  new "]}," Pry Testable Mockable mock_command":{"type":"method","name":"mock_command","children":[],"call":["Struct  new new ","output string ","Struct  new ","cmd new call_safely ","cmd new ","opts merge ","Pry  new ","StringIO  new ","StringIO  new  string "]}," Pry Testable Evalable pry_eval":{"type":"method","name":"pry_eval","children":[],"call":[" pry_tester eval "," pry_tester ","Pry  binding_for ","eval_strs shift ","Pry  toplevel_binding ","eval_strs first is_a? ","eval_strs first ","Pry  Pry  binding_for inding_for ","Pry  Pry  toplevel_binding inding_for ","Pry  toplevel_Pry  binding_for inding ","Pry  toplevel_Pry  toplevel_binding inding "]}," Pry Testable Evalable pry_tester":{"type":"method","name":"pry_tester","children":[],"call":["t singleton_class class_eval ","t singleton_class ","Pry Testable PryTester  new tap ","Pry Testable PryTester  new ","args unshift ","Pry  toplevel_binding ","args [] is_a? ","args [] ","args empty? "]}," Pry SystemCommandHandler default":{"type":"method","name":"default","children":[],"call":["output puts ","Kernel  system "]}," Pry SyntaxHighlighter overwrite_coderay_comment_token!":{"type":"method","name":"overwrite_coderay_comment_token!","children":[],"call":[]}," Pry SyntaxHighlighter keyword_token_color":{"type":"method","name":"keyword_token_color","children":[],"call":[]}," Pry SyntaxHighlighter tokenize":{"type":"method","name":"tokenize","children":[],"call":[]}," Pry SyntaxHighlighter highlight":{"type":"method","name":"highlight","children":[],"call":[]}," Pry Slop commands_to_help":{"type":"method","name":"commands_to_help","children":[],"call":["(send\n  (ivar :@commands) :map) join ","opts description ","  * ","padding - ","cmd size ","@commands map ","c size ","c size > ","@commands each ","c size  - "]}," Pry Slop clean":{"type":"method","name":"clean","children":[],"call":["object to_s sub ","object to_s "]}," Pry Slop extract_long_flag":{"type":"method","name":"extract_long_flag","children":[],"call":[" clean sub "," clean ","objects shift ","config []= ","flag end_with? ","config [] ","flag =~ ","objects first to_s ","objects first ","objects first to_s  end_with? ","objects first to_s  =~ "]}," Pry Slop extract_short_flag":{"type":"method","name":"extract_short_flag","children":[],"call":["objects shift ","flag size == ","flag size ","flag chop! ","config [] ","flag end_with? "," clean ","objects first "," clean  size == "," clean  size "," clean  chop! "," clean  end_with? "]}," Pry Slop build_option":{"type":"method","name":"build_option","children":[],"call":["Option  new ","objects shift ","objects [] respond_to? ","objects [] "," extract_long_flag "," extract_short_flag ","objects pop ","config merge! ","objects last ","objects last is_a? ","config []= ","@config [] "," extract_ extract_long_flag _flag "," extract_ extract_short_flag _flag "]}," Pry Slop autocreate":{"type":"method","name":"autocreate","children":[],"call":[" options << "," options ","option config []= ","option config ","argument !~ ","items [] ","index + "," build_option "," Array ","@trash include? "," fetch_option ","  build_option s << ","  build_option s "," build_option  config []= "," build_option  config ","items []  !~ "," build_ build_option  "," fetch_ build_option  "]}," Pry Slop extract_option":{"type":"method","name":"extract_option","children":[],"call":["option argument_in_value= ","Regexp  last_match "," fetch_option ","flag gsub ","flag downcase "," config [] "," config "," fetch_option  argument_in_value= "," fetch_ fetch_option  "]}," Pry Slop execute_multiple_switches":{"type":"method","name":"execute_multiple_switches","children":[],"call":[" execute_option ","opt count "," fetch_option ","argument split each ","argument split "," execute_ fetch_option ion "," fetch_option  count "," fetch_ fetch_option ion "]}," Pry Slop execute_option":{"type":"method","name":"execute_option","children":[],"call":["option call ","option value "," raise ","argument match ! ","argument match ","option config [] ","option config ","option match? ","option value= ","option count > ","option count ","@trash << ","index + ","option argument_in_value ","item end_with? "," strict? "," config [] "," config "]}," Pry Slop process_item":{"type":"method","name":"process_item","children":[],"call":["@trash include? ! ","@trash include? ","@unknown_options << ","item =~ "," strict? ","option call ","option value= ","option count > ","option count "," execute_multiple_switches "," config [] "," config "," execute_option ","argument =~ ","items at ","index + ","option accepts_optional_argument? "," raise ","option key ","argument ! ","option expects_argument? ","@triggered_options << ","@trash << ","option key [] == ","option key [] ","item start_with? "," extract_option ","items [] ","items []  =~ ","items [] s at ","items []  start_with? ","items [] s [] "]}," Pry Slop method_missing":{"type":"method","name":"method_missing","children":[],"call":[" present? ","meth tr ","meth chop ","meth end_with? ","method to_s ","meth chop  tr ","method to_s  tr ","meth chop  chop ","method to_s  chop ","meth chop  end_with? ","method to_s  end_with? ","meth chop od to_s ","method to_s od to_s "]}," Pry Slop to_s":{"type":"method","name":"to_s","children":[],"call":["@separators [] ","@commands any? ","File  basename "," config [] "," config ","optstr << "," commands_to_help ","optstr empty? ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join ","(lvar :o) join ","i + ","opts each_with_index map ","opts each_with_index ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select ","heads + "," options - "," options "," options reject ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join  << ","opt@separators []  << ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map tr << ","(send\n  (send\n    (lvar :opts) :each_with_index) :map) join  empty? ","opt@separators []  empty? ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map tr empty? ","(send\n  (send\n    (lvar :(send\n  (lvar :heads) :+\n  (lvar :tails)) select map ) :each_with_index) :map) join ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map  each_with_index map ","(send\n  (lvar :heads) :+\n  (lvar :tails)) select map  each_with_index ","(send\n  (lvar : options reject ) :+\n  (lvar :tails)) select map ","(send\n  (lvar : options reject ) :+\n  (lvar :tails)) select "," options reject  + "]}," Pry Slop separator":{"type":"method","name":"separator","children":[],"call":["@separators []= "," options size "," options ","@separators [] << ","@separators [] "]}," Pry Slop add_callback":{"type":"method","name":"add_callback","children":[],"call":["(or-asgn\n  (send\n    (ivar :@callbacks) :[]\n    (lvar :label))\n  (array)) << ","@callbacks [] "]}," Pry Slop fetch_command":{"type":"method","name":"fetch_command","children":[],"call":["@commands [] ","command to_s "]}," Pry Slop fetch_option":{"type":"method","name":"fetch_option","children":[],"call":["(send\n  (lvar :option) :long) include? "," clean ","option short ","option long "," options find "," options "]}," Pry Slop missing":{"type":"method","name":"missing","children":[],"call":["(send\n  (send nil :options) :-\n  (ivar :@triggered_options)) map "," options - "," options "]}," Pry Slop respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["o key == ","method_name to_s chop ","method_name to_s ","o key "," options any? "," options "]}," Pry Slop present?":{"type":"method","name":"present?","children":[],"call":["opt count > ","opt count "," fetch_option ","keys all? "," fetch_option  count > "," fetch_option  count "," fetch_ fetch_option ion "]}," Pry Slop run":{"type":"method","name":"run","children":[],"call":[" raise ","@runner respond_to? "]}," Pry Slop each":{"type":"method","name":"each","children":[],"call":[" options each "," options "]}," Pry Slop to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash merge! ","opts to_hash ","cmd to_sym ","@commands each ","Hash  [] ","opt value ","opt key to_sym ","opt key "," options map "," options ","Hash  []  merge! ","opts to_Hash  []  "]}," Pry Slop []":{"type":"method","name":"[]","children":[],"call":["option value "," fetch_option "," fetch_option  value "," fetch_ fetch_option  "]}," Pry Slop on":{"type":"method","name":"on","children":[],"call":[" options << "," options "," build_option ","  build_option s << ","  build_option s "," build_ build_option  "]}," Pry Slop parse!":{"type":"method","name":"parse!","children":[],"call":["@runner call ","@runner respond_to? ","cb call ","@callbacks [] each ","@callbacks [] ","@triggered_options empty? "," raise ","@unknown_options join ","@unknown_options any? ","missing_options map join ","missing_options map ","missing_options any? ","opt count < ","opt count ","opt required? "," options select "," options ","@trash include? ","items reject! with_index ","items reject! "," process_item "," autocreate "," config [] "," config ","@trash << ","item == ","items each_with_index ","cmd parse! ","items [] ","@commands [] ","items empty? ","slop parse! ","Pry Slop  new ","config empty? ","items is_a? ","@commands []  parse! ","Pry Slop  new  parse! "]}," Pry Slop parse":{"type":"method","name":"parse","children":[],"call":[" parse! ","items dup "]}," Pry Slop command":{"type":"method","name":"command","children":[],"call":["@commands []= ","Pry Slop  new ","command to_s "]}," Pry Slop description":{"type":"method","name":"description","children":[],"call":[" config [] "," config "," config []= "]}," Pry Slop description=":{"type":"method","name":"description=","children":[],"call":[" config []= "," config "]}," Pry Slop banner":{"type":"method","name":"banner","children":[],"call":[" config [] "," config "," config []= "]}," Pry Slop banner=":{"type":"method","name":"banner=","children":[],"call":[" config []= "," config "]}," Pry Slop strict?":{"type":"method","name":"strict?","children":[],"call":[" config [] "," config "]}," Pry Slop initialize":{"type":"method","name":"initialize","children":[],"call":[" warn "," help "," on ","config [] "," instance_eval ","block arity == ","block arity "," block_given? ","DEFAULT_OPTIONS  merge "]}," Pry Slop optspec":{"type":"method","name":"optspec","children":[],"call":["opt config []= ","opt config ","long sub! ","long end_with? ","opts on ","s sub ","opt split map ","opt split ","line split ","lines each ","Slop  new ","optspec split reject ","optspec split ","string split ","config []= ","string [] ","opts on  config []= ","opts on  config ","opts on s on ","Slop  new  on ","opts on  split map ","opts on  split ","optspec split reject  each ","opts on spec split reject ","Slop  new pec split reject ","opts on spec split ","Slop  new pec split "]}," Pry Slop Option value_to_range":{"type":"method","name":"value_to_range","children":[],"call":[" raise ","@slop strict? ","Range  new ","Regexp  last_match == ","Regexp  last_match ","Regexp  last_match to_i ","value to_s "]}," Pry Slop Option value_to_float":{"type":"method","name":"value_to_float","children":[],"call":["value to_s to_f ","value to_s "," raise "," Float ","@slop strict? "]}," Pry Slop Option value_to_integer":{"type":"method","name":"value_to_integer","children":[],"call":["value to_s to_i ","value to_s "," raise "," Integer ","@slop strict? "]}," Pry Slop Option inspect":{"type":"method","name":"inspect","children":[],"call":[" config inspect "," config "," description "," accepts_optional_argument? "," expects_argument? "," long "," short "]}," Pry Slop Option to_s":{"type":"method","name":"to_s","children":[],"call":[" description ","  * ","@slop config [] + ","@slop config [] ","@slop config ","diff + ","@slop config [] - "," long size "," long "," short "," config [] "," config "," config [] respond_to? ","@slop config [] -  + "," long  long size  "]}," Pry Slop Option value":{"type":"method","name":"value","children":[],"call":["callable call "," types [] ","type to_s downcase to_sym ","type to_s downcase ","type to_s "," types ","type call ","type respond_to? "," config [] "," config "," config [] to_s != "," config [] to_s ","(true) include? ","@value nil? "," types []  call ","  config [] s [] "," config []  to_s downcase to_sym "," config []  to_s downcase "," config []  to_s ","  config [] s "," config []  call "," config []  respond_to? ","@ config []  nil? "]}," Pry Slop Option value=":{"type":"method","name":"value=","children":[],"call":["@value concat ","new_value split "," config [] "," config ","new_value respond_to? "," config [] to_s casecmp == "," config [] to_s casecmp "," config [] to_s "]}," Pry Slop Option call":{"type":"method","name":"call","children":[],"call":["@callback call ","@callback respond_to? "]}," Pry Slop Option key":{"type":"method","name":"key","children":[],"call":[" short "," long "]}," Pry Slop Option accepts_optional_argument?":{"type":"method","name":"accepts_optional_argument?","children":[],"call":[" config [] == "," config [] "," config "]}," Pry Slop Option expects_argument?":{"type":"method","name":"expects_argument?","children":[],"call":[" config [] != "," config [] "," config "]}," Pry Slop Option initialize":{"type":"method","name":"initialize","children":[],"call":["@config key? ! ","@config key? "," class __send__ "," class "," class method_defined? ","@config each_key ","@slop config []= ","long size ","@slop config ","long size > ","@slop config [] "," proc "," value_to_range "," value_to_float "," value_to_integer ","v to_sym ","v to_s ","config [] "," block_given? ","DEFAULT_OPTIONS  merge ","DEFAULT_OPTIONS  merge  key? ! ","DEFAULT_OPTIONS  merge  key? ","DEFAULT_OPTIONS  merge  each_key "]}," Pry Slop Commands execute_global_opts!":{"type":"method","name":"execute_global_opts!","children":[],"call":["global_opts parse! "," commands [] "," commands "," commands []  parse! "]}," Pry Slop Commands execute_arguments!":{"type":"method","name":"execute_arguments!","children":[],"call":["items shift ","@arguments size ","arg start_with? ! ","arg start_with? ","items take_while "]}," Pry Slop Commands inspect":{"type":"method","name":"inspect","children":[],"call":[" commands values map "," commands values "," commands "," config inspect "," config "]}," Pry Slop Commands to_s":{"type":"method","name":"to_s","children":[],"call":["banner + ","(send\n  (lvar :helps) :map) join ","helps map ","helps []= ","defaults to_s ","defaults options any? ","defaults options ","globals to_s ","globals options any? ","globals options ","v options none? ","v options "," commands reject "," commands "," commands delete "," commands delete  to_s "," commands delete  options any? "," commands delete  options "]}," Pry Slop Commands to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  [] ","v to_hash ","k to_sym "," commands map "," commands "]}," Pry Slop Commands parse!":{"type":"method","name":"parse!","children":[],"call":[" execute_global_opts! "," raise ","items [] "," config [] "," config ","opts parse! "," commands [] "," commands "," execute_arguments! ","items shift ","items [] to_s "," execute_global_ commands [] ! "," commands []  parse! "]}," Pry Slop Commands parse":{"type":"method","name":"parse","children":[],"call":[" parse! ","items dup "]}," Pry Slop Commands each":{"type":"method","name":"each","children":[],"call":["@commands each "]}," Pry Slop Commands present?":{"type":"method","name":"present?","children":[],"call":["key to_s == ","key to_s "]}," Pry Slop Commands []":{"type":"method","name":"[]","children":[],"call":[" commands [] ","key to_s "," commands "]}," Pry Slop Commands global":{"type":"method","name":"global","children":[],"call":[" on "]}," Pry Slop Commands default":{"type":"method","name":"default","children":[],"call":[" on "]}," Pry Slop Commands on":{"type":"method","name":"on","children":[],"call":[" commands []= ","Slop  new ","@config merge ","command to_s "," commands "]}," Pry Slop Commands banner":{"type":"method","name":"banner","children":[],"call":[]}," Pry Slop Commands initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval ","block arity == ","block arity "," block_given? "," warn "]}," Pry Ring transpose_buffer_tail":{"type":"method","name":"transpose_buffer_tail","children":[],"call":["tail concat ","@buffer slice "," count % "," max_size "," count ","@buffer size ","@buffer slice  concat "]}," Pry Prompt incomplete_proc":{"type":"method","name":"incomplete_proc","children":[],"call":["@prompt_procs last "]}," Pry Prompt wait_proc":{"type":"method","name":"wait_proc","children":[],"call":["@prompt_procs first "]}," Pry Prompt initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry PluginManager NoPlugin respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[]}," Pry Output nonzero_column?":{"type":"method","name":"nonzero_column?","children":[],"call":["size [] to_i > ","size [] to_i ","size [] "]}," Pry Output ansicon_env_size":{"type":"method","name":"ansicon_env_size","children":[],"call":[" nonzero_column? ","Regexp  last_match ","Pry Env  [] =~ ","Pry Env  [] "]}," Pry Output readline_size":{"type":"method","name":"readline_size","children":[],"call":[" nonzero_column? ","Readline  get_screen_size ","Readline  respond_to? ","Readline  get_screen_Readline  get_screen_size  "]}," Pry Output env_size":{"type":"method","name":"env_size","children":[],"call":[" nonzero_column? ","Pry Env  [] "]}," Pry Output io_console_size":{"type":"method","name":"io_console_size","children":[],"call":["@output winsize ","@output respond_to? "," tty? "," require ","Pry Helpers Platform  jruby? "]}," Pry Output actual_screen_size":{"type":"method","name":"actual_screen_size","children":[],"call":[" ansicon_env_size "," readline_size "," env_size "," io_console_size "]}," Pry Output height":{"type":"method","name":"height","children":[],"call":[" size first "," size "]}," Pry Output width":{"type":"method","name":"width","children":[],"call":[" size last "," size "]}," Pry Output size":{"type":"method","name":"size","children":[],"call":["cols to_i ","rows to_i ","cols to_i != ","rows to_i != "," actual_screen_size "]}," Pry Output tty?":{"type":"method","name":"tty?","children":[],"call":["@output tty? ","@output respond_to? "]}," Pry Method respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@method respond_to? "]}," Pry Method WeirdMethodLocator find_method":{"type":"method","name":"find_method","children":[],"call":[" find_renamed_method "," find_method_in_superclass "]}," Pry Method Disowned respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" method respond_to? ! "," method respond_to? "," method "]}," Pry LastException inc_bt_index":{"type":"method","name":"inc_bt_index","children":[],"call":["(send\n  (ivar :@bt_index) :+\n  (int 1)) % "," backtrace size "," backtrace ","@bt_index + ","(send\n  (ivar :(send\n  (ivar :@bt_index) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@bt_index) :+\n  (int 1)) %  + "]}," Pry LastException bt_source_location_for":{"type":"method","name":"bt_source_location_for","children":[],"call":[" Regexp  last_match to_i "," Regexp  last_match "," backtrace [] =~ "," backtrace [] "," backtrace "]}," Pry LastException wrapped_exception":{"type":"method","name":"wrapped_exception","children":[],"call":[]}," Pry LastException respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@exception respond_to? "]}," Pry LastException method_missing":{"type":"method","name":"method_missing","children":[],"call":["@exception public_send ","@exception respond_to? "]}," Pry LastException initialize":{"type":"method","name":"initialize","children":[],"call":[" bt_source_location_for "]}," Pry InputCompleter ignored_modules":{"type":"method","name":"ignored_modules","children":[],"call":["s delete ","scanner call ","Object  const_get ","Object  const_defined? ","(sym :IRB) each ","value is_a? ","m const_get ","m constants each ","m constants ","s << ","s include? "," lambda ","Set  new ","Set  new  delete ","Set  new canner call ","Object  conSet  new t_get ","Object  conSet  new t_defined? ","(Set  new ym :IRB) each ","m const_get  is_a? ","value iSet  new _a? ","m conSet  new t_get ","m conSet  new tantSet  new  each ","m conSet  new tantSet  new  ","Set  new  << ","Set  new  include? "]}," Pry InputCompleter build_path":{"type":"method","name":"build_path","children":[],"call":["i nil? ! ","i nil? ","contexts [] push join ","contexts [] push ","contexts [] "," proc ","input chomp split ","input chomp ","input end_with? ","i to_s ","input [] ","contexts [] contexts [] push join ush join ","input chomp split  [] push join ","contexts [] contexts [] push join ush ","input chomp split  [] push ","input chomp split  [] "," contexts [] push join roc ","incontexts [] push join ut chomcontexts [] push join  scontexts [] push join lit ","contexts []  chomp split ","incontexts [] push join ut chomcontexts [] push join  ","contexts []  chomp ","incontexts [] push join ut end_with? ","contexts []  end_with? ","incontexts [] push join ut [] ","contexts []  [] "]}," Pry InputCompleter select_message":{"type":"method","name":"select_message","children":[],"call":["(send\n  (send\n    (lvar :candidates) :grep\n    (regexp\n      (str \"^\")\n      (begin\n        (lvar :message))\n      (regopt))) :collect) compact ","path call ","receiver + + ","receiver + ","e =~ ","candidates grep collect ","candidates grep "]}," Pry InputCompleter call":{"type":"method","name":"call","children":[],"call":["candidates collect ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","Regexp  quote ","candidates | | ","candidates | "," eval collect "," eval ","210 - "," select_message ","String  instance_methods collect ","String  instance_methods ","Regexp  last_match ","candidates sort ","candidates merge ","m instance_methods collect ","m instance_methods ","m respond_to? ","to_ignore include? ","ObjectSpace  each_object "," ignored_modules ","Set  new "," require ","(str \"\\\\.\") !~ ","(send\n  (send\n    (lvar :gv) :|\n    (lvar :lv)) :|\n  (lvar :cv)) include? ","gv | | ","gv | "," global_variables collect grep "," global_variables collect "," global_variables ","Regexp  new "," eval methods collect "," eval methods ","Symbol  instance_methods collect ","Symbol  instance_methods ","receiver + + ","receiver + ","candidates grep collect ","candidates grep ","context constants collect ","context constants ","context class ","context respond_to? ","target eval ",":: + ","Object  constants collect ","Object  constants ",": + ","s id2name ","Symbol  all_symbols collect ","Symbol  all_symbols ","Symbol  respond_to? ","Hash  instance_methods collect ","Hash  instance_methods ","Proc  instance_methods collect ","Proc  instance_methods ","Array  instance_methods collect ","Array  instance_methods ","Regexp  instance_methods collect ","Regexp  instance_methods ","options [] ","Pry ObjectPath  new resolve last ","Pry ObjectPath  new resolve ","Pry ObjectPath  new ","@pry binding_stack ","path call ","path call empty? "," build_path ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  collect "," eval collect  collect ","String  instance_methods collect  collect ","Set  new  collect "," global_variables collect grep  collect "," eval methods collect  collect ","Symbol  instance_methods collect  collect "," eval  collect ","candidates grep collect  collect ","context constants collect  collect ","Object  constants collect  collect ","Proc  instance_methods collect  collect ","Array  instance_methods collect  collect ","Regexp  instance_methods collect  collect ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :String  instance_methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Set  new ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : global_variables collect grep ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Symbol  instance_methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar : eval ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :candidates grep collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :context constants collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Object  constants collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Proc  instance_methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Array  instance_methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    (lvar :Regexp  instance_methods collect ) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep ","(send\n  (send\n    ( eval collect ar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  ( eval collect ar :custom_completions)) grep ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  | | "," eval collect  | | ","String  instance_methods collect  | | ","Set  new  | | "," global_variables collect grep  | | "," eval methods collect  | | ","Symbol  instance_methods collect  | | "," eval  | | ","candidates grep collect  | | ","context constants collect  | | ","Object  constants collect  | | ","Proc  instance_methods collect  | | ","Array  instance_methods collect  | | ","Regexp  instance_methods collect  | | ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  | "," eval collect  | ","String  instance_methods collect  | ","Set  new  | "," global_variables collect grep  | "," eval methods collect  | ","Symbol  instance_methods collect  | "," eval  | ","candidates grep collect  | ","context constants collect  | ","Object  constants collect  | ","Proc  instance_methods collect  | ","Array  instance_methods collect  | ","Regexp  instance_methods collect  | "," select_Regexp  quote  "," select_Regexp  last_match  ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  sort "," eval collect  sort ","String  instance_methods collect  sort ","Set  new  sort "," global_variables collect grep  sort "," eval methods collect  sort ","Symbol  instance_methods collect  sort "," eval  sort ","candidates grep collect  sort ","context constants collect  sort ","Object  constants collect  sort ","Proc  instance_methods collect  sort ","Array  instance_methods collect  sort ","Regexp  instance_methods collect  sort ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  merge "," eval collect  merge ","String  instance_methods collect  merge ","Set  new  merge "," global_variables collect grep  merge "," eval methods collect  merge ","Symbol  instance_methods collect  merge "," eval  merge ","candidates grep collect  merge ","context constants collect  merge ","Object  constants collect  merge ","Proc  instance_methods collect  merge ","Array  instance_methods collect  merge ","Regexp  instance_methods collect  merge "," ignored_modules  include? ","(send\n  (send\n    (lvar :gv) :|\n    (lvar :lv)) :|\n  (lvar : eval collect )) include? ","(send\n  (send\n    ( eval collect ar :gv) :|\n    ( eval collect ar : eval collect )) :|\n  ( eval collect ar :cv)) include? ","(send\n  (send\n    (lvar : eval collect ) :|\n    (lvar :lv)) :|\n  (lvar :cv)) include? ","Regexp  last_match  + + ","Regexp  last_match  + ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  grep collect "," eval collect  grep collect ","String  instance_methods collect  grep collect ","Set  new  grep collect "," global_variables collect grep  grep collect "," eval methods collect  grep collect ","Symbol  instance_methods collect  grep collect "," eval  grep collect ","candidates grep collect  grep collect ","context constants collect  grep collect ","Object  constants collect  grep collect ","Proc  instance_methods collect  grep collect ","Array  instance_methods collect  grep collect ","Regexp  instance_methods collect  grep collect ","(send\n  (send\n    (lvar :candidates) :|\n    (const nil :RESERVED_WORDS)) :|\n  (lvar :custom_completions)) grep  grep "," eval collect  grep ","String  instance_methods collect  grep ","Set  new  grep "," global_variables collect grep  grep "," eval methods collect  grep ","Symbol  instance_methods collect  grep "," eval  grep ","candidates grep collect  grep ","context constants collect  grep ","Object  constants collect  grep ","Proc  instance_methods collect  grep ","Array  instance_methods collect  grep ","Regexp  instance_methods collect  grep ","context class  constants collect ","target eval  constants collect ","context class  constants ","target eval  constants ","context class  class ","target eval  class ","context class  respond_to? ","target eval  respond_to? ","options []  eval ","Pry ObjectPath  new resolve last  eval ","Symbol  all_Regexp  quote bols collect ","Symbol  all_Regexp  quote bols ","Pry ObjectPath  new reso eval collect e last ","Pry ObjectPath  new reso eval collect e "]}," Pry InputCompleter initialize":{"type":"method","name":"initialize","children":[],"call":["@input completion_append_character= ","@input respond_to? ","@input basic_word_break_characters= "]}," Pry Hooks default":{"type":"method","name":"default","children":[],"call":[]}," Pry History default_file":{"type":"method","name":"default_file","children":[],"call":[]}," Pry ExceptionHandler cause_text":{"type":"method","name":"cause_text","children":[],"call":["cause backtrace first ","cause backtrace ","cause class "]}," Pry ExceptionHandler exception_text":{"type":"method","name":"exception_text","children":[],"call":["exception backtrace first ","exception backtrace ","exception message ","exception class "]}," Pry ExceptionHandler standard_error_text_for":{"type":"method","name":"standard_error_text_for","children":[],"call":["cause cause "," cause_text ","exception cause ","exception respond_to? "," exception_text ","cause cause  cause cause  ","exception cause  exception cause  "," cause cause _text "," exception cause _text "," cause_ exception_text  ","exception cause cause  ","exception exception cause  "," exception_ exception_text  "]}," Pry ExceptionHandler handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["output puts "," standard_error_text_for ","exception message sub ","exception message ","exception is_a? "]}," Pry Env []":{"type":"method","name":"[]","children":[],"call":[]}," Pry Editor default":{"type":"method","name":"default","children":[],"call":[]}," Pry ControlDHandler default":{"type":"method","name":"default","children":[],"call":[]}," Pry Config default_rc_file":{"type":"method","name":"default_rc_file","children":[],"call":["File  exist? ","File  expand_path ","xdg_home + ","Pry Env  [] ","(send\n  (const\n    (const nil :Pry) :Env) :[]\n  (str \"PRYRC\")) compact find ","(send\n  (const\n    (const nil :Pry) :Env) :[]\n  (str \"PRYRC\")) compact ","Pry Env  []  + "]}," Pry Config lazy_readline":{"type":"method","name":"lazy_readline","children":[],"call":[" raise "," output puts "," output "," require "]}," Pry Config control_d_handler=":{"type":"method","name":"control_d_handler=","children":[],"call":["value call ","args first ","args [] ","args size == ","args size "," proc ","args first eval_string ","Pry Warning  warn ","value arity == ","value arity "]}," Pry Config initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["@custom_attrs dup ","@custom_attrs dup  dup "]}," Pry Config respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@custom_attrs key? ","method_name to_s tr ","method_name to_s "]}," Pry Config method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","@custom_attrs key? "," []= ","args first ","name [] ","name end_with? ","method_name to_s ","method_name to_s  [] ","method_name to_s  end_with? ","method_method_name to_s  to_s "]}," Pry Config []":{"type":"method","name":"[]","children":[],"call":["@custom_attrs [] call ","@custom_attrs [] ","attr to_s "]}," Pry Config []=":{"type":"method","name":"[]=","children":[],"call":["@custom_attrs []= ","Config Value  new ","attr to_s "]}," Pry Config merge":{"type":"method","name":"merge","children":[],"call":[" dup merge! "," dup "]}," Pry Config merge!":{"type":"method","name":"merge!","children":[],"call":[" __send__ ","config_hash each_pair "]}," Pry Config initialize":{"type":"method","name":"initialize","children":[],"call":[" merge! ","Pry History  new "," input ","MemoizedValue  new ","Pry History  default_file ","OpenStruct  new ","Dir  [] "," proc "," commands keys "," commands ","Pry ControlDHandler  method ","Pry Helpers BaseHelpers  use_ansi_codes? ","Pry Helpers Platform  jruby? "," default_rc_file ","Pry Editor  default ","Pry SystemCommandHandler  method ","Pry Hooks  default "," unrescued_exceptions "," output puts "," output ","Pry ExceptionHandler  method ","Pry ColorPrinter  method ","Pry Prompt  [] ","out sync= ","$stdout tap "," lazy_readline "]}," Pry Config Value call":{"type":"method","name":"call","children":[],"call":["@value call ","(const\n  (const nil :Config) :MemoizedValue) include? ","@value class "]}," Pry Config Value initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Config MemoizedValue call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Pry Config MemoizedValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Config LazyValue call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Pry Config LazyValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Config Attributable attribute":{"type":"method","name":"attribute","children":[],"call":[" attr_writer ","value call ","Config Value  new "," instance_variable_get "," define_method ","Config Value  new  call "]}," Pry Command Wtf read_line":{"type":"method","name":"read_line","children":[],"call":["f gets ","(send\n  (lvar :line) :-\n  (int 1)) times ","line - ","File  open "]}," Pry Command Wtf trim_backtrace":{"type":"method","name":"trim_backtrace","children":[],"call":["backtrace first ","(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max * ","(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max "," captures [] size "," captures [] "," captures "," opts verbose? "," opts "]}," Pry Command Wtf format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["Pry Code  new with_line_numbers to_s ","Pry Code  new with_line_numbers ","Pry Code  new ","lines compact ","(send nil :bold\n  (lvar :frame)) join "," bold "," read_line ","match [] to_i ","match [] ","frame match "," opts code? "," opts "," trim_backtrace map "," trim_backtrace ","frame match  [] to_i ","frame match  [] ","frame frame match  "," opts  read_line ? "]}," Pry Command Wtf format_header":{"type":"method","name":"format_header","children":[],"call":["exception class "," bold ","title + "]}," Pry Command Wtf unwind_exceptions":{"type":"method","name":"unwind_exceptions","children":[],"call":["exception cause ","exception respond_to? ","exception_list << "," pry_instance last_exception "," pry_instance "," pry_instance last_exception  cause "," pry_instance last_exception  respond_to? "," pry_instance last_exception _list << "," pry_instance last_ pry_instance last_exception  "]}," Pry Command Wtf process":{"type":"method","name":"process","children":[],"call":[" output puts "," output ","text << "," format_backtrace ","exception backtrace "," format_header ","i == "," unwind_exceptions each_with_index "," unwind_exceptions "," dup "," raise "," pry_instance last_exception "," pry_instance "," dup  << "]}," Pry Command Wtf options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command Whereami window_size":{"type":"method","name":"window_size","children":[],"call":[" args first to_i "," args first "," args "," pry_instance config default_window_size "," pry_instance config "," pry_instance "," args empty? "]}," Pry Command Whereami expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path ","Pry  eval_path == ","Pry  eval_path "]}," Pry Command Whereami valid_method?":{"type":"method","name":"valid_method?","children":[],"call":["@method source_range include? ","@method source_range "," expand_path == "," expand_path ","@method source_file ","@method source? "]}," Pry Command Whereami class_code":{"type":"method","name":"class_code","children":[],"call":["Pry Code  from_module "," expand_path == "," expand_path ","v source_file ","mod candidates find_index ","mod candidates "," target_class ","Pry  WrappedModule ","@method owner ","Pry Code  from_ target_class ule ","Pry Code  from_Pry  WrappedModule ule "," target_class  candidates find_index ","Pry  WrappedModule  candidates find_index "," target_class  candidates ","Pry  WrappedModule  candidates "]}," Pry Command Whereami target_class":{"type":"method","name":"target_class","children":[],"call":["Pry  WrappedModule "," target_self class "," target_self "," target_self is_a? "]}," Pry Command Whereami method_code":{"type":"method","name":"method_code","children":[],"call":["Pry Code  from_method "," valid_method? "]}," Pry Command Whereami code_window":{"type":"method","name":"code_window","children":[],"call":["Pry Code  from_file around "," window_size ","Pry Code  from_file "]}," Pry Command Whereami default_code":{"type":"method","name":"default_code","children":[],"call":[" code_window "," method_code "," small_method? "]}," Pry Command Whereami small_method?":{"type":"method","name":"small_method?","children":[],"call":["@method source_range count < "," class method_size_cutoff "," class ","@method source_range count ","@method source_range "]}," Pry Command Whereami handle_internal_binding":{"type":"method","name":"handle_internal_binding","children":[],"call":[" output puts ","Pry  view_clip "," target_self "," output "," top_level? "]}," Pry Command Whereami top_level?":{"type":"method","name":"top_level?","children":[],"call":[" target_self == ","Pry  main "," target_self "]}," Pry Command Whereami marker":{"type":"method","name":"marker","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Command Whereami use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Command Whereami nothing_to_do?":{"type":"method","name":"nothing_to_do?","children":[],"call":[" code? ! "," code? "," internal_binding? "," target "," opts quiet? "," opts "]}," Pry Command Whereami process":{"type":"method","name":"process","children":[],"call":[" pry_instance pager page ","(str \"\\n\") + + ","(str \"\\n\") + "," location "," bold "," pry_instance pager "," pry_instance "," code with_line_numbers with_marker highlighted "," code with_line_numbers with_marker "," marker "," code with_line_numbers "," use_line_numbers? "," code "," set_file_and_dir_locals "," handle_internal_binding "," internal_binding? "," target "," nothing_to_do? "," raise "," bad_option_combination? "]}," Pry Command Whereami location":{"type":"method","name":"location","children":[],"call":["@method name_with_owner "]}," Pry Command Whereami bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :m)) count > ","(send\n  (send nil :opts) :present?\n  (sym :m)) count "," args any? "," args "," opts present? "," opts "]}," Pry Command Whereami code?":{"type":"method","name":"code?","children":[],"call":[" code ! ! "," code ! "," code "]}," Pry Command Whereami code":{"type":"method","name":"code","children":[],"call":[" default_code "," code_window "," args any? "," args ","Pry Code  from_file "," opts present? "," opts "," raise "," class_code "," method_code "]}," Pry Command Whereami options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command Whereami setup":{"type":"method","name":"setup","children":[],"call":["Pry Method  from_binding "," target "," target eval "," expand_path "," target source_location "," target respond_to? "]}," Pry Command Whereami initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command WatchExpression add_hook":{"type":"method","name":"add_hook","children":[],"call":[" eval_and_print_changed ","pry_instance output "," pry_instance hooks add_hook "," pry_instance hooks "," pry_instance "," pry_instance hooks hook_exists? "]}," Pry Command WatchExpression add_expression":{"type":"method","name":"add_expression","children":[],"call":[" output puts ","Code  new highlighted ","Code  new "," arg_string "," output "," expressions << ","Expression  new "," target "," pry_instance "," expressions "]}," Pry Command WatchExpression eval_and_print_changed":{"type":"method","name":"eval_and_print_changed","children":[],"call":["output puts "," blue ","expr changed? ","expr eval! "," expressions each "," expressions "]}," Pry Command WatchExpression list":{"type":"method","name":"list","children":[],"call":["pager puts ","pager print "," with_line_numbers ","index + ","expr to_s "," expressions each_with_index "," expressions "," pry_instance pager open "," pry_instance pager "," pry_instance "," output puts "," output "," expressions empty? "]}," Pry Command WatchExpression delete":{"type":"method","name":"delete","children":[],"call":[" expressions clear "," expressions "," output puts "," output "," expressions delete_at ","index - "," expressions [] "]}," Pry Command WatchExpression expressions":{"type":"method","name":"expressions","children":[],"call":[" state watch_expressions "," state "]}," Pry Command WatchExpression process":{"type":"method","name":"process","children":[],"call":[" add_expression "," args "," add_hook "," list "," args empty? "," opts present? "," opts "," delete "," opts [] "]}," Pry Command WatchExpression options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command WatchExpression Expression target_eval":{"type":"method","name":"target_eval","children":[],"call":["target eval "]}," Pry Command WatchExpression Expression changed?":{"type":"method","name":"changed?","children":[],"call":[" value != "," previous_value "," value "]}," Pry Command WatchExpression Expression to_s":{"type":"method","name":"to_s","children":[],"call":[" value ","Code  new highlighted strip ","Code  new highlighted ","Code  new "," source "]}," Pry Command WatchExpression Expression eval!":{"type":"method","name":"eval!","children":[],"call":["Pry ColorPrinter  pp "," dup "," target_eval "," source "," target "," value "]}," Pry Command WatchExpression Expression initialize":{"type":"method","name":"initialize","children":[],"call":["Code  new strip ","Code  new "]}," Pry Command ToggleColor color_toggle":{"type":"method","name":"color_toggle","children":[],"call":[" pry_instance color ! "," pry_instance color "," pry_instance "]}," Pry Command ToggleColor process":{"type":"method","name":"process","children":[],"call":[" output puts "," pry_instance color "," pry_instance "," output "," pry_instance color= "," color_toggle "]}," Pry Command SwitchTo process":{"type":"method","name":"process","children":[],"call":["Pry  start "," pry_instance binding_stack [] "," pry_instance binding_stack "," pry_instance "," raise ","selection > "," pry_instance binding_stack size - "," pry_instance binding_stack size ","selection < ","selection to_i ","selection to_i  > ","selection to_i  < ","selection to_i  to_i "]}," Pry Command Stat process":{"type":"method","name":"process","children":[],"call":[" output puts "," unindent ","meth source_location join ","meth source_location ","meth signature ","meth arity ","meth is_a? ","meth visibility ","meth owner ","aliases join ","aliases any? ","aliases length > ","aliases length ","meth name "," output ","meth aliases "," method_object "," method_object  source_location join "," method_object  source_location "," method_object  signature "," method_object  arity "," method_object  is_a? "," method_object  visibility "," method_object  owner ","meth aliases  join ","meth aliases  any? ","meth aliases  length > ","meth aliases  length "," method_object  name ","meth meth aliases  "," method_object  aliases ","  method_object od_object "]}," Pry Command Stat options":{"type":"method","name":"options","children":[],"call":[" method_options "]}," Pry Command ShowSource start_line_for":{"type":"method","name":"start_line_for","children":[],"call":["code_object source_line - ","code_object doc lines count ","code_object doc lines ","code_object doc ","code_object source_line "," opts present? "," opts ","code_object command? "]}," Pry Command ShowSource header_options":{"type":"method","name":"header_options","children":[],"call":[" merge "]}," Pry Command ShowSource docs_for":{"type":"method","name":"docs_for","children":[],"call":["code_object doc ","code_object yard_doc ","code_object module_with_yard_docs? "]}," Pry Command ShowSource render_doc_markup_for":{"type":"method","name":"render_doc_markup_for","children":[],"call":[" process_comment_markup "," raise "," obj_name ","docs empty? ","code_object command? "," docs_for "," docs_for  empty? ","  docs_for _for "]}," Pry Command ShowSource content_for":{"type":"method","name":"content_for","children":[],"call":["code with_line_numbers highlighted ","code with_line_numbers "," use_line_numbers? ","Code  new "," start_line_for ","code_object source ","code with_line_numbers to_s "," render_doc_markup_for "," opts present? "," opts ","Code  new  with_line_numbers highlighted ","Code  new  with_line_numbers ","Code  new _object source ","Code  new  with_line_numbers to_s "]}," Pry Command ShowSource process":{"type":"method","name":"process","children":[],"call":[" args= ","obj class name ","obj class ","obj name ","obj is_a? ","Array  new "," target eval "," args first "," args "," target "," opts present? "," opts "," target eval  class name "," target eval  class "," target eval  name "," target eval  is_a? "]}," Pry Command ShowSource options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command ShowInput process":{"type":"method","name":"process","children":[],"call":[" output puts ","Code  new with_line_numbers ","Code  new "," eval_string "," output "]}," Pry Command ShowInfo complete":{"type":"method","name":"complete","children":[],"call":["(send\n  (lvar :methods) :map) compact ","(lvar :prefix) join ","method name ","method name start_with? ","methods map ","Pry Method  all_from_class "," binding eval "," binding ","Regexp  last_match ","input =~ ","(lvar :Regexp  last_match ) join "]}," Pry Command ShowInfo file_and_line_for":{"type":"method","name":"file_and_line_for","children":[],"call":[" start_line_for ","code_object source_file ","code_object yard_line ","code_object yard_file ","code_object module_with_yard_docs? "]}," Pry Command ShowInfo start_line_for":{"type":"method","name":"start_line_for","children":[],"call":["code_object source_line "," opts present? "," opts "]}," Pry Command ShowInfo use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry Command ShowInfo obj_name":{"type":"method","name":"obj_name","children":[],"call":[" args join "," args "," args empty? "]}," Pry Command ShowInfo show_all_modules?":{"type":"method","name":"show_all_modules?","children":[],"call":[" opts present? "," opts ","code_object is_a? "]}," Pry Command ShowInfo header_options":{"type":"method","name":"header_options","children":[],"call":[]}," Pry Command ShowInfo method_sections":{"type":"method","name":"method_sections","children":[],"call":["(and\n  (lvar :new)\n  (lvar :old)) to_s ","(pair\n  (sym :owner)\n  (dstr\n    (str \"\\n\")\n    (begin\n      (send nil :bold\n        (str \"Owner:\")))\n    (str \" \")\n    (begin\n      (or\n        (send\n          (lvar :code_object) :owner)\n        (str \"N/A\")))\n    (str \"\\n\"))) merge "," header_options ","code_object signature "," bold ","code_object visibility ","code_object owner "]}," Pry Command ShowInfo module_header":{"type":"method","name":"module_header","children":[],"call":["code_object number_of_candidates to_s ","code_object number_of_candidates "," bold ","code_object number_of_candidates > ","code_object nonblank_name ","code_object module? "]}," Pry Command ShowInfo method_header":{"type":"method","name":"method_header","children":[],"call":[" method_sections [] "," method_sections ","code_object c_method? "]}," Pry Command ShowInfo code_object_header":{"type":"method","name":"code_object_header","children":[],"call":[" module_header ","code_object is_a? "," method_header ","code_object real_method_object? "]}," Pry Command ShowInfo header":{"type":"method","name":"header","children":[],"call":["code_object name "," bold ","content lines none? ","content lines ","code_object nonblank_name ","@original_code_object nonblank_name ","(str \"\\n\") + ","content lines count "," code_object_header "," content_for "," file_and_line_for "," content_for  lines none? "," content_for  lines "," content_for  lines count ","  content_for _for "]}," Pry Command ShowInfo no_definition_message":{"type":"method","name":"no_definition_message","children":[],"call":[" obj_name "]}," Pry Command ShowInfo content_and_headers_for_all_module_candidates":{"type":"method","name":"content_and_headers_for_all_module_candidates","children":[],"call":["(str \"Number of lines: \") + ","content lines count ","content lines "," content_for ","candidate source_line ","candidate source_file ","mod number_of_candidates ","v + ","mod candidate ","mod number_of_candidates times ","mod name "," content_for  lines count "," content_for  lines ","  content_for _for ","mod candidate  source_line ","mod candidate  source_file ","mod number_of_mod candidate s ","mod mod candidate  ","mod number_of_mod candidate s times "]}," Pry Command ShowInfo content_and_header_for_code_object":{"type":"method","name":"content_and_header_for_code_object","children":[],"call":[" header + "," content_for "," header "]}," Pry Command ShowInfo valid_superclass?":{"type":"method","name":"valid_superclass?","children":[],"call":["code_object super wrapped != ","code_object super wrapped ","code_object super "]}," Pry Command ShowInfo code_object_with_accessible_source":{"type":"method","name":"code_object_with_accessible_source","children":[],"call":[" code_object_with_accessible_source ","code_object super "," raise "," no_definition_message "," valid_superclass? ","code_object candidates find ","code_object candidates ","code_object is_a? ","code_object code_object candidates find s find ","code_object code_object candidates find s "]}," Pry Command ShowInfo process":{"type":"method","name":"process","children":[],"call":[" pry_instance pager page "," pry_instance pager "," pry_instance "," set_file_and_dir_locals ","code_object source_file "," content_and_header_for_code_object "," code_object_with_accessible_source "," content_and_headers_for_all_module_candidates "," show_all_modules? ","code_object candidates any? ","code_object candidates "," opts [] ! "," opts [] "," opts ","code_object c_module? "," obj_name ! "," obj_name "," raise "," no_definition_message ","Pry CodeObject  lookup "," code_object_with_accessible_source de_object source_file ","Pry CodeObject  lookup  source_file ","  code_object_with_accessible_source ntent_and_header_for_ code_object_with_accessible_source de_object "," content_and_header_for_Pry CodeObject  lookup  ","  code_object_with_accessible_source de_object_with_accessible_source "," Pry CodeObject  lookup _with_accessible_source ","  code_object_with_accessible_source ntent_and_headers_for_all_module_candidates "," code_object_with_accessible_source de_object candidates any? ","Pry CodeObject  lookup  candidates any? "," code_object_with_accessible_source de_object candidates ","Pry CodeObject  lookup  candidates "," code_object_with_accessible_source de_object c_module? ","Pry CodeObject  lookup  c_module? "]}," Pry Command ShowInfo options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command ShowInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command ShowDoc start_line_for":{"type":"method","name":"start_line_for","children":[],"call":["code_object source_line - ","code_object doc lines count ","code_object doc lines ","code_object doc ","code_object source_line "," opts present? "," opts ","code_object command? "]}," Pry Command ShowDoc header_options":{"type":"method","name":"header_options","children":[],"call":[" merge "]}," Pry Command ShowDoc docs_for":{"type":"method","name":"docs_for","children":[],"call":["code_object doc ","code_object yard_doc ","code_object module_with_yard_docs? "]}," Pry Command ShowDoc render_doc_markup_for":{"type":"method","name":"render_doc_markup_for","children":[],"call":[" process_comment_markup "," raise "," obj_name ","docs empty? ","code_object command? "," docs_for "," docs_for  empty? ","  docs_for _for "]}," Pry Command ShowDoc content_for":{"type":"method","name":"content_for","children":[],"call":["Code  new with_line_numbers to_s ","Code  new with_line_numbers "," use_line_numbers? ","Code  new "," start_line_for "," render_doc_markup_for "]}," Pry Command ShowDoc process":{"type":"method","name":"process","children":[],"call":[" output puts "," obj_name "," output "]}," Pry Command ShellMode process":{"type":"method","name":"process","children":[],"call":[" pry_instance prompt= "," state prev_prompt "," state "," pry_instance ","Pry Prompt  [] "," state prev_prompt= "," pry_instance prompt "," state disabled "]}," Pry Command ShellCommand special_case_path?":{"type":"method","name":"special_case_path?","children":[],"call":["dest =~ ","(str \".\") include? "]}," Pry Command ShellCommand path_from_cd_path":{"type":"method","name":"path_from_cd_path","children":[],"call":["path split last == ","path split last ","path split ","File  directory? "," cd_path_env split each "," cd_path_env split "," cd_path_env "," special_case_path? ","(and\n  (lvar :dest)\n  (send nil :cd_path_exists?)) ! "," cd_path_exists? "]}," Pry Command ShellCommand cd_path_exists?":{"type":"method","name":"cd_path_exists?","children":[],"call":[" cd_path_env length nonzero? "," cd_path_env length "," cd_path_env "]}," Pry Command ShellCommand cd_path_env":{"type":"method","name":"cd_path_env","children":[],"call":["Pry Env  [] "]}," Pry Command ShellCommand process_cd":{"type":"method","name":"process_cd","children":[],"call":[" raise ","Dir  chdir ","File  expand_path "," path_from_cd_path "," state old_pwd= ","Dir  pwd "," state "]}," Pry Command ShellCommand parse_destination":{"type":"method","name":"parse_destination","children":[],"call":[" raise "," state old_pwd "," state ","dest == ","dest empty? "]}," Pry Command ShellCommand process":{"type":"method","name":"process","children":[],"call":[" pry_instance config system call "," pry_instance "," output "," pry_instance config system "," pry_instance config "," command_block call "," command_block "," pass_block "," process_cd "," parse_destination ","Regexp  last_match ","cmd =~ "]}," Pry Command SaveFile mode":{"type":"method","name":"mode","children":[],"call":[" opts present? "," opts "]}," Pry Command SaveFile display_content":{"type":"method","name":"display_content","children":[],"call":[" output puts "," output ","@cc content "]}," Pry Command SaveFile save_file":{"type":"method","name":"save_file","children":[],"call":[" output puts "," file_name "," output ","f puts ","@cc content ","File  open "," mode "]}," Pry Command SaveFile file_name":{"type":"method","name":"file_name","children":[],"call":[" opts [] "," opts "]}," Pry Command SaveFile process":{"type":"method","name":"process","children":[],"call":[" save_file "," display_content "," file_name ! "," file_name "," raise ","@cc content empty? ","@cc content ","CodeCollector  new "," pry_instance "," opts "," args ","CodeCollector  new  content empty? ","CodeCollector  new  content "]}," Pry Command SaveFile options":{"type":"method","name":"options","children":[],"call":["opt on ","CodeCollector  inject_options "]}," Pry Command Ri process":{"type":"method","name":"process","children":[{"type":"method","name":"initialize","children":[],"asgn":[null],"call":[]},{"type":"method","name":"page","children":[],"asgn":[{"type":"local","name":"paging_text","value":"StringIO  new "},["StringIO  new "]],"call":["@pager page ","paging_text string ","StringIO  new "]},{"type":"method","name":"formatter","children":[],"asgn":[],"call":["RDoc Markup ToAnsi  new ","@formatter_klass new "]}],"call":[" output puts ","e name "," output ","ri display_names ","RDoc RI PryDriver  new "," pry_instance pager "," pry_instance ","RDoc RI  const_set ","RDoc Markup ToAnsi  new ","@formatter_klass new ","@pager page ","paging_text string ","StringIO  new ","subclass class_eval ","Class  new "," require ","RDoc RI PryDriver  new  display_names ","RDoc RI PryDRDoc RI PryDriver  new ver  new ","paging_text stRDoc RI PryDriver  new ng ","StringIO  new  string ","StRDoc RI PryDriver  new ngIO  new ","Class  new  class_eval "]}," Pry Command Reset process":{"type":"method","name":"process","children":[],"call":[" exec "," output puts "," output "]}," Pry Command ReloadCode check_for_reloadability":{"type":"method","name":"check_for_reloadability","children":[],"call":[" raise ","code_object source_file ","File  exist? ","code_object source_file ! ","code_object ! "]}," Pry Command ReloadCode reload_object":{"type":"method","name":"reload_object","children":[],"call":[" output puts "," output "," load ","code_object source_file "," check_for_reloadability ","Pry CodeObject  lookup "," pry_instance ","Pry CodeObject  lookup  source_file "]}," Pry Command ReloadCode reload_current_file":{"type":"method","name":"reload_current_file","children":[],"call":[" output puts "," current_file "," output "," load "," raise ","File  exist? "]}," Pry Command ReloadCode current_file":{"type":"method","name":"current_file","children":[],"call":["File  expand_path "," target eval "," target "," target source_location first "," target source_location "," target respond_to? "]}," Pry Command ReloadCode process":{"type":"method","name":"process","children":[],"call":[" reload_current_file "," reload_object "," internal_binding? "," target "," args join "," args "," args empty? ! "," args empty? "]}," Pry Command RaiseUp process":{"type":"method","name":"process","children":[],"call":[" target eval "," captures [] "," captures "," target "," _pry pager page "," help "," _pry pager "," _pry "," captures [] =~ "]}," Pry Command Version process":{"type":"method","name":"process","children":[],"call":[" output puts "," output "]}," Pry Command PryBacktrace process":{"type":"method","name":"process","children":[],"call":[" pry_instance pager page "," pry_instance pager "," pry_instance ","text << "," pry_instance backtrace join "," pry_instance backtrace "," bold "," bold  << "]}," Pry Command Play file_content":{"type":"method","name":"file_content","children":[],"call":["@cc restrict_to_lines ","@cc line_range ","File  read "," default_file "," raise "," default_file inspect ","File  exist? ! ","File  exist? "," default_file ! "]}," Pry Command Play default_file":{"type":"method","name":"default_file","children":[],"call":["File  expand_path "," target eval "," target "," target source_location first "," target source_location "," target respond_to? "]}," Pry Command Play content":{"type":"method","name":"content","children":[],"call":["@cc content "," file_content "," should_use_default_file? "]}," Pry Command Play should_use_default_file?":{"type":"method","name":"should_use_default_file?","children":[],"call":[" opts present? ! "," opts present? "," opts "," args first ! "," args first "," args "]}," Pry Command Play code_object":{"type":"method","name":"code_object","children":[],"call":["Pry Code  new "," content "]}," Pry Command Play content_at_expression":{"type":"method","name":"content_at_expression","children":[],"call":[" code_object expression_at "," opts [] "," opts "," code_object "]}," Pry Command Play content_after_options":{"type":"method","name":"content_after_options","children":[],"call":[" content "," content_at_expression "," opts present? "," opts "," restrict_to_lines "]}," Pry Command Play show_input":{"type":"method","name":"show_input","children":[],"call":[" run ","Pry Code  complete_expression? "," eval_string "," opts present? "," opts "]}," Pry Command Play perform_play":{"type":"method","name":"perform_play","children":[],"call":[" run "," eval_string << "," content_after_options "," eval_string "]}," Pry Command Play process":{"type":"method","name":"process","children":[],"call":[" show_input "," perform_play ","CodeCollector  new "," pry_instance "," opts "," args "]}," Pry Command Play options":{"type":"method","name":"options","children":[],"call":["opt on ","CodeCollector  inject_options "]}," Pry Command Nesting process":{"type":"method","name":"process","children":[],"call":[" output puts ","Pry  view_clip ","obj eval "," output ","level == "," pry_instance binding_stack each_with_index "," pry_instance binding_stack "," pry_instance "]}," Pry Command Ls raise_errors_if_arguments_are_weird":{"type":"method","name":"raise_errors_if_arguments_are_weird","children":[],"call":[" raise "," opts present? "," opts "," error_list each "," error_list "]}," Pry Command Ls error_list":{"type":"method","name":"error_list","children":[],"call":[" opts present? "," opts ","(send\n  (const nil :Module) :===\n  (ivar :@interrogatee)) ! ","Module  === "," args any? "," args "]}," Pry Command Ls process":{"type":"method","name":"process","children":[],"call":[" pry_instance pager page ","ls_entity entities_table "," pry_instance pager "," pry_instance ","LsEntity  new "," args "," opts "," no_user_opts? "," raise_errors_if_arguments_are_weird "," target eval "," args join "," target "," target_self "," args empty? ","LsEntity  new  entities_table "]}," Pry Command Ls no_user_opts?":{"type":"method","name":"no_user_opts?","children":[],"call":["(or\n  (or\n    (or\n      (or\n        (or\n          (or\n            (send\n              (send nil :opts) :[]\n              (sym :methods))\n            (send\n              (send nil :opts) :[]\n              (str \"instance-methods\")))\n          (send\n            (send nil :opts) :[]\n            (sym :ppp)))\n        (send\n          (send nil :opts) :[]\n          (sym :globals)))\n      (send\n        (send nil :opts) :[]\n        (sym :locals)))\n    (send\n      (send nil :opts) :[]\n      (sym :constants)))\n  (send\n    (send nil :opts) :[]\n    (sym :ivars))) ! "," opts [] "," opts "]}," Pry Command Ls options":{"type":"method","name":"options","children":[],"call":["opt on ","Helpers Platform  jruby? ","Object  respond_to? ","  * "]}," Pry Command Ls SelfMethods correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[" interrogating_a_module? "]}," Pry Command Ls SelfMethods output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," format ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," grep regexp [] ","m name "," grep regexp "," grep ","m owner == ","m owner "," all_methods select "," all_methods "]}," Pry Command Ls SelfMethods initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Command Ls MethodsHelper format":{"type":"method","name":"format","children":[],"call":[" color ","method name ","method visibility == ","method visibility ","method name == ","methods sort_by map ","methods sort_by "]}," Pry Command Ls MethodsHelper resolution_order":{"type":"method","name":"resolution_order","children":[],"call":["Pry Method  resolution_order ","Pry Method  instance_resolution_order "]}," Pry Command Ls MethodsHelper all_methods":{"type":"method","name":"all_methods","children":[],"call":["method visibility == ","method visibility ","methods select "," trim_jruby_aliases ","@jruby_switch ! ","Pry Helpers Platform  jruby? ","Pry Method  all_from_obj ","Pry Method  all_from_class "," trim_jruby_aliases  select ","Pry Method  all_from_obj  select ","Pry Method  all_from_class  select "]}," Pry Command Ls Methods below_ceiling":{"type":"method","name":"below_ceiling","children":[],"call":["ceiling include? ! ","ceiling include? "," lambda "," pry_instance config ls ceiling dup "," pry_instance config ls ceiling "," pry_instance config ls "," pry_instance config "," pry_instance ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) + ","Pry Method  safe_send [] ","Pry Method  safe_send "," interrogatee_mod ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  include? ! ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  include? "," pry_instance config ls (send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  dup "," pry_instance config ls (send\n  (send\n    (const\n      (const nil :Pry) :Method) :safe_send\n    (send nil :interrogatee_mod)\n    (sym :ancestors)) :[]\n  (int 1)) +  "]}," Pry Command Ls Methods correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Command Ls Methods output_self":{"type":"method","name":"output_self","children":[],"call":["(send\n  (send\n    (send\n      (send nil :resolution_order) :take_while\n      (block-pass\n        (send nil :below_ceiling))) :reverse) :map) join "," output_section "," format ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," grep regexp [] ","m name "," grep regexp "," grep ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar :klass))\n  (array)) select ","methods [] "," resolution_order take_while reverse map "," resolution_order take_while reverse "," resolution_order take_while "," below_ceiling "," resolution_order "," all_methods group_by "," all_methods ","(or\n  (send\n    (lvar : all_methods group_by ) :[]\n    (lvar :klass))\n  (array)) select "," all_methods group_by  [] "," all_ all_methods group_by  group_by "," all_ all_methods group_by  "]}," Pry Command Ls Methods initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Command Ls LsEntity entities":{"type":"method","name":"entities","children":[],"call":[" local_vars "," local_names "," instance_vars "," self_methods "," methods "," constants "," globals "]}," Pry Command Ls LsEntity local_vars":{"type":"method","name":"local_vars","children":[],"call":["LocalVars  new "," pry_instance "]}," Pry Command Ls LsEntity local_names":{"type":"method","name":"local_names","children":[],"call":[" grep ","LocalNames  new "," pry_instance "]}," Pry Command Ls LsEntity instance_vars":{"type":"method","name":"instance_vars","children":[],"call":[" grep ","InstanceVars  new "," pry_instance "]}," Pry Command Ls LsEntity self_methods":{"type":"method","name":"self_methods","children":[],"call":[" grep ","SelfMethods  new "," pry_instance "]}," Pry Command Ls LsEntity methods":{"type":"method","name":"methods","children":[],"call":[" grep ","Methods  new "," pry_instance "]}," Pry Command Ls LsEntity constants":{"type":"method","name":"constants","children":[],"call":[" grep ","Constants  new "," pry_instance "]}," Pry Command Ls LsEntity globals":{"type":"method","name":"globals","children":[],"call":[" grep ","Globals  new "," pry_instance "]}," Pry Command Ls LsEntity grep":{"type":"method","name":"grep","children":[],"call":["o grep= ","entity tap "]}," Pry Command Ls LsEntity entities_table":{"type":"method","name":"entities_table","children":[],"call":["(send\n  (send\n    (send nil :entities) :map\n    (block-pass\n      (sym :write_out))) :select) join "," entities map select "," entities map "," entities "]}," Pry Command Ls LsEntity initialize":{"type":"method","name":"initialize","children":[],"call":["opts delete ","Grep  new ","Regexp  new ","opts [] [] ","opts [] "]}," Pry Command Ls LocalVars colorized_assignment_style":{"type":"method","name":"colorized_assignment_style","children":[],"call":["Kernel  format "," color ","desired_width + ","colorized_lhs size - ","lhs size ","colorized_lhs size "," color  size - "," color  size "]}," Pry Command Ls LocalVars format":{"type":"method","name":"format","children":[],"call":[" colorized_assignment_style "," format_value ","sorted reverse map ","sorted reverse ","value to_s size ","value to_s ","name_value_pairs sort_by "]}," Pry Command Ls LocalVars output_self":{"type":"method","name":"output_self","children":[],"call":[" format join "," format ","@target eval ","name to_s ","locals map ","@sticky_locals key? ","e to_sym ","@target eval reject "]}," Pry Command Ls LocalVars initialize":{"type":"method","name":"initialize","children":[],"call":["pry_instance sticky_locals ","opts [] "]}," Pry Command Ls LocalNames format":{"type":"method","name":"format","children":[],"call":[" color ","@sticky_locals include? ","name to_sym ","locals sort_by map ","locals sort_by "]}," Pry Command Ls LocalNames output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," format "," grep regexp [] ","@target eval "," grep regexp "," grep "]}," Pry Command Ls LocalNames correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":["@args empty? "]}," Pry Command Ls LocalNames initialize":{"type":"method","name":"initialize","children":[],"call":["pry_instance sticky_locals "]}," Pry Command Ls JRubyHacks rubbishness":{"type":"method","name":"rubbishness","children":[],"call":["(send\n  (send\n    (lvar :name) :each_char) :map) inject + ","name size / ","name size ","(send\n  (send\n    (lvar :name) :each_char) :map) inject ","name each_char map ","name each_char "]}," Pry Command Ls JRubyHacks trim_jruby_aliases":{"type":"method","name":"trim_jruby_aliases","children":[],"call":["found << ","x == ","found none? ","values select "," rubbishness ","m name ","values sort_by ","grouped flat_map ","m name sub gsub downcase ","m name sub gsub ","m name sub ","methods group_by "]}," Pry Command Ls Interrogatable interrogatee_mod":{"type":"method","name":"interrogatee_mod","children":[],"call":["(send\n  (send\n    (send\n      (lvar :singleton) :ancestors) :grep\n    (const\n      (cbase) :Class)) :reject) first ","c == ","singleton ancestors grep reject ","singleton ancestors grep ","singleton ancestors ","Pry Method  singleton_class_of "," interrogating_a_module? ","(send\n  (send\n    (send\n      (lvar :Pry Method  singleton_class_of ) :ancestors) :grep\n    (const\n      (cbase) :Class)) :reject) first ","Pry Method  singleton_class_of  ancestors grep reject ","Pry Method  singleton_class_of  ancestors grep ","Pry Method  singleton_class_of  ancestors ","Pry Method  Pry Method  singleton_class_of _class_of "]}," Pry Command Ls Interrogatable interrogating_a_module?":{"type":"method","name":"interrogating_a_module?","children":[],"call":["Module  === "]}," Pry Command Ls InstanceVars format":{"type":"method","name":"format","children":[],"call":[" color ","(send\n  (lvar :vars) :sort_by) map ","var to_s downcase ","var to_s ","vars sort_by "]}," Pry Command Ls InstanceVars output_self":{"type":"method","name":"output_self","children":[],"call":["ivars_out + "," output_section "," format ","Pry Method  safe_send "," interrogatee_mod ","Object  === "," output_section  + ","Pry Method  safe_send _out + "]}," Pry Command Ls InstanceVars correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Command Ls InstanceVars initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Command Ls Grep regexp":{"type":"method","name":"regexp","children":[],"call":["x =~ ","x grep ","x instance_of? "," proc "]}," Pry Command Ls Grep initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command Ls Globals format":{"type":"method","name":"format","children":[],"call":[" color ","BUILTIN_GLOBALS  include? ","PSEUDO_GLOBALS  include? ","globals map sort_by map ","globals map sort_by ","globals map "]}," Pry Command Ls Globals output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," grep regexp [] "," grep regexp "," grep "," format ","@target eval "]}," Pry Command Ls Globals initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Pry Command Ls Formatter grep":{"type":"method","name":"grep","children":[],"call":[" proc "]}," Pry Command Ls Formatter output_self":{"type":"method","name":"output_self","children":[],"call":[" raise "]}," Pry Command Ls Formatter correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[]}," Pry Command Ls Formatter format_value":{"type":"method","name":"format_value","children":[],"call":["Pry ColorPrinter  pp "," dup "]}," Pry Command Ls Formatter output_section":{"type":"method","name":"output_section","children":[],"call":["Pry Helpers  tablify_or_one_line ","Pry Helpers Text  bold "," color ","body compact empty? ","body compact "]}," Pry Command Ls Formatter color":{"type":"method","name":"color","children":[],"call":["Pry Helpers Text  send "," pry_instance config ls send "," pry_instance config ls "," pry_instance config "," pry_instance "]}," Pry Command Ls Formatter write_out":{"type":"method","name":"write_out","children":[],"call":[" output_self "," correct_opts? "]}," Pry Command Ls Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["pry_instance current_context "]}," Pry Command Ls Constants format":{"type":"method","name":"format","children":[],"call":[" color ","mod const_get is_a? ","mod const_get ","const < ","mod autoload? ! ","mod autoload? "," show_deprecated_constants? ! "," show_deprecated_constants? ","DEPRECATED_CONSTANTS  include? ","Object  respond_to? ","constants sort_by map ","constants sort_by "]}," Pry Command Ls Constants show_deprecated_constants?":{"type":"method","name":"show_deprecated_constants?","children":[],"call":["@dconstants == "]}," Pry Command Ls Constants output_self":{"type":"method","name":"output_self","children":[],"call":[" output_section "," grep regexp [] "," format "," grep regexp "," grep ","WrappedModule  new constants ","WrappedModule  new "," interrogatee_mod ","WrappedModule  new WrappedModule  new constants  "," interrogatee_ interrogatee_mod  "]}," Pry Command Ls Constants correct_opts?":{"type":"method","name":"correct_opts?","children":[],"call":[" interrogating_a_module? "]}," Pry Command Ls Constants initialize":{"type":"method","name":"initialize","children":[],"call":["opts dconstants? ","opts [] "]}," Pry Command ListInspectors selected_inspector?":{"type":"method","name":"selected_inspector?","children":[],"call":[" pry_instance print == ","inspector [] "," pry_instance print "," pry_instance "]}," Pry Command ListInspectors selected_text":{"type":"method","name":"selected_text","children":[],"call":[" red "]}," Pry Command ListInspectors inspector_map":{"type":"method","name":"inspector_map","children":[],"call":[]}," Pry Command ListInspectors process":{"type":"method","name":"process","children":[],"call":[" output puts "," output ","inspector [] "," selected_text "," selected_inspector? "," output write "," bold "," inspector_map each "," inspector_map "," heading + "," heading "]}," Pry Command JumpTo process":{"type":"method","name":"process","children":[],"call":[" output puts "," output "," pry_instance binding_stack= "," pry_instance binding_stack [] "," pry_instance binding_stack "," pry_instance ","nesting_level - "," pry_instance binding_stack size - "," pry_instance binding_stack size ","break_level to_i "," pry_instance binding_stack size -  - ","break_level to_i  to_i "]}," Pry Command ImportSet process":{"type":"method","name":"process","children":[],"call":[" pry_instance commands import "," pry_instance commands "," pry_instance "," target eval "," arg_string "," target "," raise "," command_set nil? "," command_set "," command_ target eval  nil? "," command_ target eval  "]}," Pry Command Hist find_history":{"type":"method","name":"find_history","children":[],"call":["Pry  Code ","Pry  history filter ","h [] ","Pry  history ","Pry  history to_a last ","Pry  history session_line_count ","Pry  history to_a "," opts present? "," opts ","Pry  Pry  history to_a last istory filter ","Pry  Pry  history to_a istory filter ","Pry  history to_a last  [] ","Pry  history to_a  [] ","Pry  Pry  history to_a last istory ","Pry  Pry  history to_a istory ","Pry  Pry  history to_a last istory to_a last ","Pry  Pry  history to_a istory to_a last ","Pry  Pry  history to_a last istory session_line_count ","Pry  Pry  history to_a istory session_line_count ","Pry  Pry  history to_a last istory to_a ","Pry  Pry  history to_a istory to_a "]}," Pry Command Hist check_for_juxtaposed_replay":{"type":"method","name":"check_for_juxtaposed_replay","children":[],"call":[" raise ","index min ","index max nil? ","index max ","index min == "," opts [] "," opts ","replay_sequence split join ","replay_sequence split ","slop_instance present? ","slop_instance parse ","replay_sequence split [] "," slop ","replay_sequence =~ ","index min  min "," opts []  min ","index min  max nil? "," opts []  max nil? ","index min  max "," opts []  max ","index min  min == "," opts []  min == ","replay_sequence split join  split join ","replay_sequence split join  split "," slop  present? "," slop  parse ","replay_sequence split join  split [] ","replay_sequence split join  =~ "]}," Pry Command Hist process_replay":{"type":"method","name":"process_replay","children":[],"call":[" pry_instance eval "," pry_instance ","replay_sequence lines each ","replay_sequence lines "," check_for_juxtaposed_replay ","@history raw ","@history between "," opts [] "," opts ","@history raw  lines each ","@history raw  lines ","@history between  raw ","@history between  between "]}," Pry Command Hist process_clear":{"type":"method","name":"process_clear","children":[],"call":[" output puts "," output ","Pry  history clear ","Pry  history "]}," Pry Command Hist process_save":{"type":"method","name":"process_save","children":[],"call":[" output puts "," output ","f write ","@history raw ","File  open ","File  expand_path "," opts [] "," opts "," args first "," args "," raise ","@history between ","@history between  raw ","@history between  between "]}," Pry Command Hist process_display":{"type":"method","name":"process_display","children":[],"call":["@history print_to_output "," pry_instance pager open "," pry_instance pager "," pry_instance ","@history with_line_numbers "," opts present? "," opts ","@history with_line_numbers  print_to_output ","@history with_line_numbers  with_line_numbers "]}," Pry Command Hist process":{"type":"method","name":"process","children":[],"call":[" process_display "," process_replay "," opts present? "," opts "," process_clear "," process_save "," command_set valid_command? ","loc line "," command_set ","@history reject ","@history take_lines "," opts [] ","(or\n  (send\n    (send nil :opts) :[]\n    (sym :tail))\n  (int 10)) -@ ","@history grep ","@history between "," find_history ","@history take_lines  reject ","@history grep  reject ","@history between  reject "," find_history  reject ","@history take_lines  take_lines ","@history grep  take_lines ","@history between  take_lines "," find_history  take_lines ","@history take_lines  grep ","@history grep  grep ","@history between  grep "," find_history  grep ","@history take_lines  between ","@history grep  between ","@history between  between "," find_history  between "]}," Pry Command Hist options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command Help group_sort_key":{"type":"method","name":"group_sort_key","children":[],"call":["(str \"Help\") index ","group_name tr "]}," Pry Command Help normalize":{"type":"method","name":"normalize","children":[],"call":["key downcase gsub ","key downcase "]}," Pry Command Help search_hash":{"type":"method","name":"search_hash","children":[],"call":["matching []= "," normalize start_with? "," normalize "," normalize == ","key is_a? ","hash each_pair "]}," Pry Command Help display_command":{"type":"method","name":"display_command","children":[],"call":[" pry_instance pager page ","command new help ","command new "," pry_instance pager "," pry_instance "]}," Pry Command Help display_filtered_commands":{"type":"method","name":"display_filtered_commands","children":[],"call":[" display_index ","filtered values "," display_command ","filtered values first ","filtered size == ","filtered size "," raise "," args first "," args ","filtered empty? "," search_hash "," visible_commands "," search_hash  values "," search_hash  values first "," search_hash  size == "," search_hash  size "," search_hash  empty? "]}," Pry Command Help display_filtered_search_results":{"type":"method","name":"display_filtered_search_results","children":[],"call":[" display_filtered_commands "," display_index ","groups empty? ! ","groups empty? "," search_hash "," command_groups "," search_hash  empty? ! "," search_hash  empty? "," command_ search_hash  "]}," Pry Command Help display_search":{"type":"method","name":"display_search","children":[],"call":[" display_filtered_search_results "," display_command "," command_set find_command_for_help "," command_set "," display_ command_set find_command_for_help  ","  command_set find_command_for_help _set find_ command_set find_command_for_help _for_help ","  command_set find_command_for_help _set "]}," Pry Command Help sorted_commands":{"type":"method","name":"sorted_commands","children":[],"call":["command options [] to_s ","command options [] ","command options ","commands sort_by "]}," Pry Command Help sorted_group_names":{"type":"method","name":"sorted_group_names","children":[],"call":["groups keys sort_by "," method ","groups keys "]}," Pry Command Help help_text_for_commands":{"type":"method","name":"help_text_for_commands","children":[],"call":["(begin\n  (send nil :bold\n    (send\n      (lvar :name) :capitalize))) + ","(send\n  (lvar :commands) :map) join ","command description capitalize ","command description ","command options [] to_s ljust ","command options [] to_s ","command options [] ","command options ","commands map "," bold ","name capitalize "]}," Pry Command Help display_index":{"type":"method","name":"display_index","children":[],"call":[" pry_instance pager page ","help_text join "," pry_instance pager "," pry_instance ","help_text << "," help_text_for_commands ","commands any? "," sorted_commands ","groups [] "," sorted_group_names each "," sorted_group_names "," help_text_for_ sorted_commands  "," sorted_commands  any? "," sorted_ sorted_commands  "]}," Pry Command Help process":{"type":"method","name":"process","children":[],"call":[" display_search "," args first "," args "," display_index "," command_groups "," args empty? "]}," Pry Command Help command_groups":{"type":"method","name":"command_groups","children":[],"call":[" visible_commands values group_by "," visible_commands values "," visible_commands "]}," Pry Command Help visible_commands":{"type":"method","name":"visible_commands","children":[],"call":["visible []= ","command description empty? ! ","command description empty? ","command description "," commands each "," commands "]}," Pry Command FixIndent process":{"type":"method","name":"process","children":[],"call":[" pry_instance eval_string= "," pry_instance ","Pry Indent  indent "," eval_string "]}," Pry Command FindMethod content_search":{"type":"method","name":"content_search","children":[],"call":["meth source =~ "," pattern ","meth source "," search_all_methods "]}," Pry Command FindMethod name_search":{"type":"method","name":"name_search","children":[],"call":["meth name =~ "," pattern ","meth name "," search_all_methods "]}," Pry Command FindMethod search_all_methods":{"type":"method","name":"search_all_methods","children":[],"call":["matches << ","done [] []= ","method name ","done [] ","method owner ","done [] [] ","methods each ","Pry Method  all_from_class + ","Pry Method  all_from_obj ","Pry Method  all_from_class "," recurse_namespace ","h []= ","Hash  new ","Pry Method  all_from_class +  each "]}," Pry Command FindMethod recurse_namespace":{"type":"method","name":"recurse_namespace","children":[],"call":[" recurse_namespace ","klass const_get ","klass autoload? ","klass constants each ","klass constants ","done []= ","done [] ","klass is_a? ! ","klass is_a? ","klass klass const_get _get ","klass klass const_get ants each ","klass klass const_get ants "]}," Pry Command FindMethod matched_method_lines":{"type":"method","name":"matched_method_lines","children":[],"call":["(send\n  (send\n    (send\n      (lvar :method) :source) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :select) join ","  * ","header length ","x =~ "," pattern ","method source split select ","method source split ","method source "]}," Pry Command FindMethod additional_info":{"type":"method","name":"additional_info","children":[],"call":[":  + "," colorize_code "," matched_method_lines "," opts content? "," opts "]}," Pry Command FindMethod print_matches_for_class":{"type":"method","name":"print_matches_for_class","children":[],"call":[" output puts ","header + "," additional_info "," output ","method name_with_owner ","grouped [] each ","grouped [] "," bold ","klass name ","method name_with_owner  + "]}," Pry Command FindMethod print_matches":{"type":"method","name":"print_matches","children":[],"call":[" print_matches_for_class ","order each ","x to_s ","x name ","grouped keys sort_by ","grouped keys ","matches group_by ","matches group_by  keys sort_by ","matches group_by  keys "]}," Pry Command FindMethod search_class":{"type":"method","name":"search_class","children":[],"call":["klass class ","klass is_a? "," target_self "," target eval "," args [] "," args "," target "," target_self  class "," target eval  class "," target_self  is_a? "," target eval  is_a? "]}," Pry Command FindMethod show_search_results":{"type":"method","name":"show_search_results","children":[],"call":[" print_matches "," output puts "," bold "," output ","matches empty? "]}," Pry Command FindMethod pattern":{"type":"method","name":"pattern","children":[],"call":[" Regexp  new "," args [] "," args "]}," Pry Command FindMethod process":{"type":"method","name":"process","children":[],"call":[" show_search_results "," name_search "," content_search "," opts content? "," opts "," search_class "," args empty? "," args "]}," Pry Command FindMethod options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command ExitProgram process":{"type":"method","name":"process","children":[],"call":["Kernel  exit "," target eval to_i "," target eval "," arg_string "," target "]}," Pry Command ExitAll process":{"type":"method","name":"process","children":[],"call":[" throw "," pry_instance binding_stack clear "," pry_instance binding_stack "," pry_instance "," target eval "," arg_string "," target "]}," Pry Command Exit process_pop_and_return":{"type":"method","name":"process_pop_and_return","children":[],"call":[" target eval "," arg_string "," target "," arg_string empty? "," pry_instance binding_stack pop eval "," pry_instance binding_stack pop "," pry_instance binding_stack "," pry_instance "]}," Pry Command Exit process":{"type":"method","name":"process","children":[],"call":[" process_pop_and_return "," pry_instance run_command "," arg_string "," pry_instance "," pry_instance binding_stack one? "," pry_instance binding_stack "]}," Pry Command Edit probably_a_file?":{"type":"method","name":"probably_a_file?","children":[],"call":["str =~ ","(str \".rb\") include? ","File  extname "]}," Pry Command Edit initial_temp_file_content":{"type":"method","name":"initial_temp_file_content","children":[],"call":["x strip != ","x strip "," pry_instance input_ring to_a reverse_each find "," pry_instance input_ring to_a reverse_each "," pry_instance input_ring to_a "," pry_instance input_ring "," pry_instance "," eval_string "," eval_string strip != "," eval_string strip "," input_expression "," opts present? "," opts "]}," Pry Command Edit reload?":{"type":"method","name":"reload?","children":[],"call":[" never_reload? ! "," never_reload? ","file_name end_with? "," reloadable? "]}," Pry Command Edit never_reload?":{"type":"method","name":"never_reload?","children":[],"call":[" pry_instance config disable_auto_reload "," pry_instance config "," pry_instance "," opts present? "," opts "]}," Pry Command Edit reloadable?":{"type":"method","name":"reloadable?","children":[],"call":[" opts present? "," opts "]}," Pry Command Edit input_expression":{"type":"method","name":"input_expression","children":[],"call":[" raise "," opts [] "," opts "," pry_instance input_ring [] "," pry_instance input_ring "," pry_instance ","(or\n  (send\n    (send\n      (send nil :pry_instance) :input_ring) :[]\n    (send\n      (send nil :opts) :[]\n      (sym :i)))\n  (array)) join "]}," Pry Command Edit bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :ex)) count > ","(send\n  (send nil :opts) :present?\n  (sym :ex)) count "," filename_argument empty? ! "," filename_argument empty? "," filename_argument "," opts present? "," opts "]}," Pry Command Edit patch_exception?":{"type":"method","name":"patch_exception?","children":[],"call":[" opts present? "," opts "]}," Pry Command Edit previously_patched?":{"type":"method","name":"previously_patched?","children":[],"call":["Pry Method Patcher  code_for ","code_object source_location first ","code_object source_location ","code_object is_a? "]}," Pry Command Edit pry_method?":{"type":"method","name":"pry_method?","children":[],"call":["code_object pry_method? ","code_object is_a? "]}," Pry Command Edit code_object":{"type":"method","name":"code_object","children":[],"call":["Pry CodeObject  lookup "," pry_instance "," filename_argument "," probably_a_file? ! "," probably_a_file? "]}," Pry Command Edit filename_argument":{"type":"method","name":"filename_argument","children":[],"call":[" args join "," args "]}," Pry Command Edit file_edit":{"type":"method","name":"file_edit","children":[],"call":[" load "," silence_warnings "," reload? "," set_file_and_dir_locals ","Pry Editor  new invoke_editor ","Pry Editor  new "," pry_instance "," ensure_file_name_is_valid "," file_and_line "]}," Pry Command Edit file_and_line":{"type":"method","name":"file_and_line","children":[],"call":[" opts [] to_i "," opts [] "," opts "," opts present? ","FileAndLineLocator  from_filename_argument "," filename_argument ","FileAndLineLocator  from_code_object "," code_object "," file_and_line_for_current_exception ","FileAndLineLocator  from_binding "," target "]}," Pry Command Edit file_and_line_for_current_exception":{"type":"method","name":"file_and_line_for_current_exception","children":[],"call":["FileAndLineLocator  from_exception "," opts [] to_i "," opts [] "," opts "," pry_instance last_exception "," pry_instance "]}," Pry Command Edit ensure_file_name_is_valid":{"type":"method","name":"ensure_file_name_is_valid","children":[],"call":[" raise "," not_a_real_file? "," filename_argument "]}," Pry Command Edit apply_runtime_patch":{"type":"method","name":"apply_runtime_patch","children":[],"call":[" raise "," code_object "," code_object redefine ","Pry Editor  new edit_tempfile_with_content "," code_object source ","Pry Editor  new "," pry_instance "," code_object is_a? ","ExceptionPatcher  new perform_patch ","ExceptionPatcher  new "," file_and_line_for_current_exception "," state "," patch_exception? "]}," Pry Command Edit runtime_patch?":{"type":"method","name":"runtime_patch?","children":[],"call":[" pry_method? "," code_object "," previously_patched? "," opts present? "," opts "," file_based_exception? ! "," file_based_exception? "]}," Pry Command Edit file_based_exception?":{"type":"method","name":"file_based_exception?","children":[],"call":[" opts present? ! "," opts present? "," opts "]}," Pry Command Edit repl_edit":{"type":"method","name":"repl_edit","children":[],"call":["Pry  history push ","Pry  history "," pry_instance eval_string= "," pry_instance ","Pry Editor  new edit_tempfile_with_content "," initial_temp_file_content lines count "," initial_temp_file_content lines "," initial_temp_file_content ","Pry Editor  new ","Pry Editor  new edit_tempfile_with_Pry Editor  new edit_tempfile_with_content  "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  lines count "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  lines "," initial_temp_file_Pry Editor  new edit_tempfile_with_content  "]}," Pry Command Edit repl_edit?":{"type":"method","name":"repl_edit?","children":[],"call":[" filename_argument empty? "," filename_argument "," opts present? ! "," opts present? "," opts "]}," Pry Command Edit process":{"type":"method","name":"process","children":[],"call":[" file_edit "," apply_runtime_patch "," runtime_patch? "," repl_edit "," repl_edit? "," raise "," bad_option_combination? "]}," Pry Command Edit options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command Edit FileAndLineLocator from_filename_argument":{"type":"method","name":"from_filename_argument","children":[],"call":["Regexp  last_match to_i ","Regexp  last_match ","f sub! ","File  expand_path ","Regexp  Regexp  last_match to_i ast_match to_i ","Regexp  Regexp  last_match to_i ast_match ","File  expand_path  sub! ","FiRegexp  last_match to_i e  expand_path "]}," Pry Command Edit FileAndLineLocator from_exception":{"type":"method","name":"from_exception","children":[],"call":[" raise ","Pry  eval_path == ","Pry  eval_path ","file_name nil? ","exception bt_source_location_for ","exception nil? "]}," Pry Command Edit FileAndLineLocator from_code_object":{"type":"method","name":"from_code_object","children":[],"call":["code_object source_line ","code_object source_file "," raise ","File  exist? ","code_object source_file to_s "]}," Pry Command Edit FileAndLineLocator from_binding":{"type":"method","name":"from_binding","children":[],"call":["target eval ","target source_location ","target respond_to? "]}," Pry Command Edit ExceptionPatcher perform_patch":{"type":"method","name":"perform_patch","children":[],"call":[" state dynamical_ex_file= ","source split "," state "," pry_instance evaluate_ruby "," pry_instance ","Pry Editor  new edit_tempfile_with_content ","Pry Editor  new ","File  read "," state dynamical_ex_file "," file_and_line ","Pry Editor  new edit_tempfile_with_content  split "]}," Pry Command Edit ExceptionPatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command DisablePry process":{"type":"method","name":"process","children":[],"call":[" pry_instance run_command "," pry_instance ","ENV  []= "]}," Pry Command CodeCollector convert_to_range":{"type":"method","name":"convert_to_range","children":[],"call":["range is_a? "]}," Pry Command CodeCollector could_not_locate":{"type":"method","name":"could_not_locate","children":[],"call":[" raise "]}," Pry Command CodeCollector file_content":{"type":"method","name":"file_content","children":[],"call":[" could_not_locate "," obj_name ","File  read "," file= ","File  exist? "]}," Pry Command CodeCollector code_object_source_or_file":{"type":"method","name":"code_object_source_or_file","children":[],"call":[" file_content "," code_object source "," code_object "]}," Pry Command CodeCollector code_object_doc":{"type":"method","name":"code_object_doc","children":[],"call":[" could_not_locate "," obj_name "," code_object doc "," code_object "]}," Pry Command CodeCollector pry_array_content_as_string":{"type":"method","name":"pry_array_content_as_string","children":[],"call":["ranged_array compact each ","ranged_array compact "," Array ","array [] "," raise "," convert_to_range first == "," convert_to_range first "," convert_to_range ","ranges each "]}," Pry Command CodeCollector bad_option_combination?":{"type":"method","name":"bad_option_combination?","children":[],"call":["(send\n  (send nil :opts) :present?\n  (sym :in)) count > ","(send\n  (send nil :opts) :present?\n  (sym :in)) count "," args empty? ! "," args empty? "," args "," opts present? "," opts "]}," Pry Command CodeCollector obj_name":{"type":"method","name":"obj_name","children":[],"call":[" args join "," args "," args empty? "]}," Pry Command CodeCollector line_range":{"type":"method","name":"line_range","children":[],"call":[" one_index_range_or_number "," opts [] "," opts "," opts present? "]}," Pry Command CodeCollector pry_input_content":{"type":"method","name":"pry_input_content","children":[],"call":[" pry_array_content_as_string "," class input_expression_ranges "," class "," pry_instance input_ring "," pry_instance "]}," Pry Command CodeCollector pry_output_content":{"type":"method","name":"pry_output_content","children":[],"call":[" pry_array_content_as_string "," class output_result_ranges "," class "," pry_instance output_ring "," pry_instance "]}," Pry Command CodeCollector restrict_to_lines":{"type":"method","name":"restrict_to_lines","children":[],"call":[" Array join "," Array ","content lines to_a [] ","content lines to_a ","content lines "]}," Pry Command CodeCollector code_object":{"type":"method","name":"code_object","children":[],"call":["Pry CodeObject  lookup "," opts [] "," opts "," pry_instance "," obj_name "]}," Pry Command CodeCollector content":{"type":"method","name":"content","children":[],"call":[" restrict_to_lines "," line_range "," code_object_source_or_file "," code_object_doc "," opts present? "," opts "," pry_input_content "," pry_output_content "," raise "," bad_option_combination? "," pry_input_ pry_output_content  "," pry_output_ pry_output_content  "]}," Pry Command CodeCollector inject_options":{"type":"method","name":"inject_options","children":[],"call":[]}," Pry Command CodeCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command ClearScreen process":{"type":"method","name":"process","children":[],"call":[" pry_instance config system call "," pry_instance "," pry_instance output "," pry_instance config system "," pry_instance config ","Pry Helpers Platform  windows? "]}," Pry Command ChangePrompt change_prompt":{"type":"method","name":"change_prompt","children":[],"call":[" raise "," pry_instance prompt= ","Pry Prompt  [] "," pry_instance "]}," Pry Command ChangePrompt list_prompts":{"type":"method","name":"list_prompts","children":[],"call":[" output puts ","prompts join ","\n * "," output ","(begin\n  (send nil :bold\n    (lvar :name))) + ","prompt description "," red "," pry_instance prompt == "," pry_instance prompt "," pry_instance "," bold ","Pry Prompt  all map ","Pry Prompt  all "]}," Pry Command ChangePrompt process":{"type":"method","name":"process","children":[],"call":[" change_prompt "," list_prompts "," opts present? "," opts "]}," Pry Command ChangePrompt options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command ChangeInspector inspector_map":{"type":"method","name":"inspector_map","children":[],"call":[]}," Pry Command ChangeInspector process":{"type":"method","name":"process","children":[],"call":[" output puts "," output "," pry_instance print= "," inspector_map [] [] "," inspector_map [] "," inspector_map "," pry_instance "," raise "," inspector_map key? "]}," Pry Command Cd process":{"type":"method","name":"process","children":[],"call":[" pry_instance binding_stack= "," pry_instance "," state old_stack= "," pry_instance binding_stack "," state ","stack != ","ObjectPath  new resolve ","ObjectPath  new "," arg_string "," state old_stack "," state old_stack empty? "," arg_string strip == "," arg_string strip "," pry_instance binding_ObjectPath  new resolve = "," state old_ObjectPath  new resolve = "," pry_instance binding_ObjectPath  new resolve  ","ObjectPath  new resolve  != "," state old_ObjectPath  new resolve  "," state old_ObjectPath  new resolve  empty? "]}," Pry Command Cat load_path_completions":{"type":"method","name":"load_path_completions","children":[],"call":["f sub! ","path + ","File  directory? ","Dir  [] map ","Dir  [] ","$LOAD_PATH flat_map "]}," Pry Command Cat complete":{"type":"method","name":"complete","children":[],"call":[" | "," load_path_completions "]}," Pry Command Cat process":{"type":"method","name":"process","children":[],"call":[" pry_instance pager page "," pry_instance pager "," pry_instance ","FileFormatter  new format ","FileFormatter  new "," opts "," args first "," args ","InputExpressionFormatter  new format ","InputExpressionFormatter  new "," pry_instance input_ring "," opts present? ","ExceptionFormatter  new format ","ExceptionFormatter  new "," pry_instance last_exception "]}," Pry Command Cat options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry Command Cat InputExpressionFormatter normalized_expression_range":{"type":"method","name":"normalized_expression_range","children":[],"call":[" absolute_index_range "," input_expressions count "," input_expressions "," opts [] "," opts "]}," Pry Command Cat InputExpressionFormatter numbered_input_items":{"type":"method","name":"numbered_input_items","children":[],"call":["s == ","s nil? "," normalized_expression_range zip reject "," normalized_expression_range zip "," selected_input_items "," normalized_expression_range "]}," Pry Command Cat InputExpressionFormatter selected_input_items":{"type":"method","name":"selected_input_items","children":[],"call":[" input_expressions [] "," normalized_expression_range "," input_expressions "]}," Pry Command Cat InputExpressionFormatter format":{"type":"method","name":"format","children":[],"call":[" decorate ","Pry  Code "," selected_input_items first "," selected_input_items "," decorate to_s ","Pry  Code with_indentation ","Helpers Text  bold ","i to_s "," numbered_input_items each "," numbered_input_items "," numbered_input_items length > "," numbered_input_items length "," raise "," numbered_input_items empty? "]}," Pry Command Cat InputExpressionFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command Cat FileFormatter detect_code_type_from_file":{"type":"method","name":"detect_code_type_from_file","children":[],"call":["File  basename split first ","File  basename split ","File  basename ","code_type == ","@code_from_file code_type ","File  baseFile  basename split first  split first ","File  baseFile  basename split first  split ","File  baseFile  basename split first  ","@code_from_file code_type  == ","@code_from_file @code_from_file code_type  "]}," Pry Command Cat FileFormatter code_type":{"type":"method","name":"code_type","children":[],"call":[" detect_code_type_from_file "," file_name "," opts [] "," opts "]}," Pry Command Cat FileFormatter decorate":{"type":"method","name":"decorate","children":[],"call":["content around "," code_window_size "," line_number "]}," Pry Command Cat FileFormatter code_window_size":{"type":"method","name":"code_window_size","children":[],"call":[" pry_instance config default_window_size "," pry_instance config "," pry_instance "]}," Pry Command Cat FileFormatter line_number":{"type":"method","name":"line_number","children":[],"call":[" file_and_line last "," file_and_line "]}," Pry Command Cat FileFormatter file_name":{"type":"method","name":"file_name","children":[],"call":[" file_and_line first "," file_and_line "]}," Pry Command Cat FileFormatter file_and_line":{"type":"method","name":"file_and_line","children":[],"call":["line_num to_i "," file_with_embedded_line split "," file_with_embedded_line "]}," Pry Command Cat FileFormatter format":{"type":"method","name":"format","children":[],"call":[" decorate "," set_file_and_dir_locals "," pry_instance current_context "," pry_instance "," file_name "]}," Pry Command Cat FileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Pry Code  from_file "," file_name "," raise "]}," Pry Command Cat ExceptionFormatter header":{"type":"method","name":"header","children":[],"call":[" unindent "," ex backtrace size - "," ex backtrace size "," ex backtrace "," ex "," bold "," backtrace_level "," backtrace_line "," backtrace_file "," ex message "," ex class "]}," Pry Command Cat ExceptionFormatter start_and_end_line_for_code_window":{"type":"method","name":"start_and_end_line_for_code_window","children":[],"call":[" backtrace_line + "," code_window_size "," backtrace_line ","start_line < "," backtrace_line - "," backtrace_line -  < "]}," Pry Command Cat ExceptionFormatter check_for_errors":{"type":"method","name":"check_for_errors","children":[],"call":[" raise "," backtrace_file "," ex "]}," Pry Command Cat ExceptionFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":[" Array last "," Array "," ex bt_source_location_for "," backtrace_level "," ex "]}," Pry Command Cat ExceptionFormatter backtrace_file":{"type":"method","name":"backtrace_file","children":[],"call":[" Array first "," Array "," ex bt_source_location_for "," backtrace_level "," ex "]}," Pry Command Cat ExceptionFormatter increment_backtrace_level":{"type":"method","name":"increment_backtrace_level","children":[],"call":[" ex inc_bt_index "," ex "]}," Pry Command Cat ExceptionFormatter backtrace_level":{"type":"method","name":"backtrace_level","children":[],"call":[" increment_backtrace_level "," ex bt_index= "," absolute_index_number "," ex backtrace size "," ex backtrace "," ex "," opts [] "," opts "," ex bt_index "," opts [] nil? "]}," Pry Command Cat ExceptionFormatter code_window_size":{"type":"method","name":"code_window_size","children":[],"call":[" pry_instance config default_window_size "," pry_instance config "," pry_instance "]}," Pry Command Cat ExceptionFormatter format":{"type":"method","name":"format","children":[],"call":[" header "," decorate ","Pry Code  from_file between with_marker "," backtrace_line ","Pry Code  from_file between "," start_and_end_line_for_code_window ","Pry Code  from_file "," backtrace_file "," set_file_and_dir_locals "," pry_instance current_context "," pry_instance "," check_for_errors "," start_and_end_line_for_ decorate _window "]}," Pry Command Cat ExceptionFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Command Cat AbstractFormatter between_lines":{"type":"method","name":"between_lines","children":[],"call":[" opts [] "," opts "]}," Pry Command Cat AbstractFormatter use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry Command Cat AbstractFormatter code_type":{"type":"method","name":"code_type","children":[],"call":[" opts [] "," opts "]}," Pry Command Cat AbstractFormatter decorate":{"type":"method","name":"decorate","children":[],"call":["content between with_line_numbers highlighted ","content between with_line_numbers "," use_line_numbers? ","content between "," between_lines ","content code_type= "," code_type "]}," Pry Command BangPry process":{"type":"method","name":"process","children":[],"call":[" target pry "," target "]}," Pry Command Bang process":{"type":"method","name":"process","children":[],"call":[" eval_string replace "," eval_string "," output puts "," output "]}," Pry Command AmendLine line_range":{"type":"method","name":"line_range","children":[],"call":[" line_count - "," line_count "," zero_indexed_range_from_one_indexed_numbers "," start_and_end_line_number "]}," Pry Command AmendLine zero_indexed_range_from_one_indexed_numbers":{"type":"method","name":"zero_indexed_range_from_one_indexed_numbers","children":[],"call":[" one_index_number "]}," Pry Command AmendLine start_and_end_line_number":{"type":"method","name":"start_and_end_line_number","children":[],"call":["end_line_number to_i ","start_line_number to_i "," args "]}," Pry Command AmendLine line_count":{"type":"method","name":"line_count","children":[],"call":[" eval_string lines count "," eval_string lines "," eval_string "]}," Pry Command AmendLine replace_in_array":{"type":"method","name":"replace_in_array","children":[],"call":["array []= "," arg_string + "," arg_string "]}," Pry Command AmendLine insert_into_array":{"type":"method","name":"insert_into_array","children":[],"call":["array insert "," arg_string [] << "," arg_string [] "," arg_string "," Array first "," Array "]}," Pry Command AmendLine delete_from_array":{"type":"method","name":"delete_from_array","children":[],"call":["array slice! "]}," Pry Command AmendLine amend_input":{"type":"method","name":"amend_input","children":[],"call":["input_array join "," replace_in_array "," line_range "," insert_into_array "," arg_string start_with? "," arg_string "," delete_from_array "," arg_string == "," eval_string each_line to_a "," eval_string each_line "," eval_string "," eval_string each_line to_a  join "]}," Pry Command AmendLine process":{"type":"method","name":"process","children":[],"call":[" run "," eval_string replace "," amend_input "," eval_string "," raise "," eval_string empty? "]}," Pry CommandState reset":{"type":"method","name":"reset","children":[],"call":["@command_state []= ","OpenStruct  new "]}," Pry CommandState state_for":{"type":"method","name":"state_for","children":[],"call":["OpenStruct  new ","@command_state [] "]}," Pry CommandState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry CommandState default":{"type":"method","name":"default","children":[],"call":[]}," Pry Command normalize_method_args":{"type":"method","name":"normalize_method_args","children":[],"call":["args values_at ","(irange\n  (int 0)\n  (begin\n    (send\n      (send\n        (lvar :method) :arity) :-\n      (int 1)))) to_a ","method arity - ","method arity "]}," Pry Command _pry_":{"type":"method","name":"_pry_","children":[],"call":[" pry_instance ","Pry Warning  warn "]}," Pry ColorPrinter inspect_object":{"type":"method","name":"inspect_object","children":[],"call":["object __id__ to_s ","object __id__ ","k != ","ancestors find ","Pry Method  safe_send ","object inspect ","Pry Method  safe_send  find "]}," Pry ColorPrinter default":{"type":"method","name":"default","children":[],"call":[]}," Pry Code lines":{"type":"method","name":"lines","children":[],"call":[" to_a "]}," Pry Code reject":{"type":"method","name":"reject","children":[],"call":["@lines reject "," alter ","@lines reject  reject "]}," Pry WrappedModule Candidate module_definition_first_line?":{"type":"method","name":"module_definition_first_line?","children":[],"call":["(str \"^\\\\s*(::)?\") =~ "," wrapped class "," wrapped ","(str \"(^|=)\\\\s*\") =~ "," wrapped name split last "," wrapped name split "," wrapped name "," wrapped class to_s downcase "," wrapped class to_s "]}," Pry mutex_available?":{"type":"method","name":"mutex_available?","children":[],"call":[]}," Pry ObjectExtensions pry":{"type":"method","name":"pry","children":[],"call":["Pry  start ","Pry  binding_for ","Pry  new repl ","Pry  new "]}," Pry level":{"type":"method","name":"level","children":[],"call":[]}," Pry Output exit_program":{"type":"method","name":"exit_program","children":[],"call":[]}," Pry Output jump_to":{"type":"method","name":"jump_to","children":[],"call":[]}," Pry Output exit":{"type":"method","name":"exit","children":[],"call":[]}," Pry Output error_invalid_nest_level":{"type":"method","name":"error_invalid_nest_level","children":[],"call":[" puts "]}," Pry Output show_status":{"type":"method","name":"show_status","children":[],"call":[" puts ","Pry  last_result inspect ","Pry  last_result ","target eval inspect ","target eval ","nesting level ","Pry  view "," out puts "," out "]}," Pry Output show_nesting":{"type":"method","name":"show_nesting","children":[],"call":[" puts ","obj inspect ","level == ","nesting each ","Pry  view "," out puts "," out "]}," Pry Output show_help":{"type":"method","name":"show_help","children":[],"call":[" puts "," out puts "," out "]}," Pry Output session_end":{"type":"method","name":"session_end","children":[],"call":[" puts ","obj inspect ","Pry  view "," out puts "," out "]}," Pry Output session_start":{"type":"method","name":"session_start","children":[],"call":[" puts ","obj inspect ","Pry  view "," out puts "," out "]}," Pry Output refresh":{"type":"method","name":"refresh","children":[],"call":[" puts "," out puts "," out "]}," Pry Input read":{"type":"method","name":"read","children":[],"call":["Readline  readline "]}," Pry old_valid_expression?":{"type":"method","name":"old_valid_expression?","children":[],"call":["RubyParser  new parse ","RubyParser  new "]}," Pry nesting=":{"type":"method","name":"nesting=","children":[],"call":[" class nesting= "," class "]}," Pry nesting":{"type":"method","name":"nesting","children":[],"call":[" class nesting "," class "]}," Pry view":{"type":"method","name":"view","children":[],"call":[]}," Pry Output err_invalid_nest_level":{"type":"method","name":"err_invalid_nest_level","children":[],"call":[" puts "," out puts "," out "]}," Pry Output warn_already_at_level":{"type":"method","name":"warn_already_at_level","children":[],"call":[" puts "," out puts "," out "]}," Pry SourceInput read":{"type":"method","name":"read","children":[],"call":["@f readline "]}," Pry SourceInput initialize":{"type":"method","name":"initialize","children":[],"call":["@f readline ","(send\n  (lvar :line) :-\n  (int 1)) times ","line - ","File  open ","File  open  readline "]}," Pry get_method_source":{"type":"method","name":"get_method_source","children":[],"call":["target eval "]}," Pry Output show_method":{"type":"method","name":"show_method","children":[],"call":["code display "," out puts "," out "]}," Pry Output ls":{"type":"method","name":"ls","children":[],"call":[" puts ","target eval "," out puts "," out "]}," Pry Output show_doc":{"type":"method","name":"show_doc","children":[],"call":[" out puts "," out "]}," Pry Output cat":{"type":"method","name":"cat","children":[],"call":[" out puts ","target eval "," out "]}," Pry readline":{"type":"method","name":"readline","children":[],"call":[" input readline "," input "," input method arity == "," input method arity "," input method "," input == "," input= ","Pry  input "," input is_a? "," input completion_proc= "," input respond_to? ","completion_proc call ","cool completed_word "," proc "," handle_read_errors ","completions compact ","Readline  output= ","File  open ","Pry Helpers BaseHelpers  windows? ! ","Pry Helpers BaseHelpers  windows? ","$stdin tty? ","$stdout tty? ! ","$stdout tty? ","Pry  history << ","line dup ","Pry  history "," input read input readline  ","completion_proc call  compact ","Read input readline   output= "," input readline  dup "]}," Pry parent":{"type":"method","name":"parent","children":[],"call":["Pry  sessions [] ","idx - ","Pry  sessions ","idx > ","Pry  sessions index ","Pry  sessions index  - ","Pry  sessions index  > "]}," Pry sessions":{"type":"method","name":"sessions","children":[],"call":[]}," Pry ObjectExtensions __binding__":{"type":"method","name":"__binding__","children":[],"call":[" __binding_impl__ "," class class_eval "," class "," respond_to? "," class_eval "," is_a? "," instance_eval "]}," Pry InputCompleter build_completion_proc":{"type":"method","name":"build_completion_proc","children":[],"call":[]}," Pry CommandBase inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Pry CommandBase import_from":{"type":"method","name":"import_from","children":[],"call":[" commands merge! "," commands ","Hash  [] ","names include? ","klass commands select ","klass commands "]}," Pry CommandBase run":{"type":"method","name":"run","children":[],"call":[" instance_exec "," opts [] [] [] "," opts [] [] "," opts [] "," opts "," raise ","name inspect "," opts [] include? ","command_processor execute_system_command "," target ","args join ","command_processor system_command? ","CommandProcessor  new "," target eval ","target eval ","CommandProcessor  new  execute_system_command ","CommandProcessor  new  system_command? "]}," Pry CommandBase delete":{"type":"method","name":"delete","children":[],"call":[" commands delete "," commands ","names each "]}," Pry CommandBase command":{"type":"method","name":"command","children":[],"call":[" commands []= "," commands "," Array each "," Array ","options [] ","(pair\n  (sym :keep_retval)\n  (false)) merge! "," create_command_stub "," command_dependencies_met? ","(pair\n  (sym :keep_retval)\n  (false)) merge!  [] "]}," Pry CommandBase desc":{"type":"method","name":"desc","children":[],"call":[" commands [] []= "," commands [] "," commands "]}," Pry CommandBase alias_command":{"type":"method","name":"alias_command","children":[],"call":[" commands [] []= "," commands [] "," commands "," commands []= "," commands [] dup "]}," Pry load_rc":{"type":"method","name":"load_rc","children":[],"call":[]}," Pry set_last_exception":{"type":"method","name":"set_last_exception","children":[],"call":["target eval ","Pry  last_exception= ","2 to_i ","ex line= ","ex file= ","ex backtrace first =~ ","ex backtrace first ","ex backtrace "," attr_accessor ","@output_array << "," last_exception= ","ex bt_source_location_for ","ex bt_index= "," backtrace [] =~ "," backtrace [] "," backtrace "]}," Pry repl_epilogue":{"type":"method","name":"repl_epilogue","children":[],"call":[" throw ","nesting_level != "," Array "," exec_hook "," output "," nesting pop "," nesting "," save_history "," finished_top_level_session? ","Pry  config history should_save ","Pry  config history ","Pry  config ","Pry  config history save ","Pry  save_history "," binding_stack pop "," binding_stack ","Pry  active_sessions == ","Pry  active_sessions "," hooks exec_hook "," hooks "]}," Pry repl_prologue":{"type":"method","name":"repl_prologue","children":[],"call":[" session_target= ","target eval ","Pry  active_instance= "," exec_hook "," output "," set_last_result ","Pry  last_result ","@input_array << "," set_active_instance "," binding_stack push "," binding_stack ","Pry  active_sessions "," initialize_special_locals "," hooks exec_hook "," hooks "]}," Pry execute_command":{"type":"method","name":"execute_command","children":[],"call":["options [] clear ","options [] "," commands instance_exec "," commands ","args values_at ","action arity - ","action arity ","action arity <=> "," commands output= "," output "," commands target= "," commands opts= "]}," Pry command_matched":{"type":"method","name":"command_matched","children":[],"call":["(str \"^\") =~ "," commands commands find "," commands commands "," commands "]}," Pry process_line":{"type":"method","name":"process_line","children":[],"call":["eval_string << ","Pry  cmd_ret_value ","Pry  cmd_ret_value= "," process_commands ","val chomp! ","val empty? ! ","val empty? ","@command_processor process_commands ","val rstrip! ","val rstrip ","eval_string replace ","result void_command? ! ","result void_command? ","result command? ","Thread  current []= ","Thread  current ","@command_processor process_commands  void_command? ! ","@command_processor process_commands  void_command? ","@command_processor process_commands  command? "]}," Pry retrieve_line":{"type":"method","name":"retrieve_line","children":[],"call":[" throw "," nesting level "," nesting "," output puts "," output ","val ! "," readline "," select_prompt ","target eval ","eval_string empty? ","Pry  history << ","Pry  history "," input is_a? "," input ","eval_string << ","indented_val rstrip ","val empty? "," process_command ! "," process_command "," output flush "," output print ","@indent correct_indentation ","original_val length - ","indented_val length ","original_val length ","Pry  config correct_indent ","Pry  config ","Pry Helpers BaseHelpers  use_ansi_codes? "," output tty? ","@indent indent "," input is_a? ! ","Pry  config auto_indent ","eval_string force_encoding ","val encoding "," should_force_encoding? ","Pry  config control_d_handler call ","Pry  config control_d_handler ","eval_string replace ","@indent current_prefix ","Pry InputCompleter  build_completion_proc "," instance_eval "," custom_completions ","@indent reset ","indented_val chomp ","completion_proc call ","Pry  critical_section "," proc ","Pry  config completer build_completion_proc ","Pry  config completer ","(lvar :val) all? ","val dup ","orig_val length - ","val length ","orig_val length ","current_prompt + ","orig_val != ","@command_processor valid_command? ! ","@command_processor valid_command? ","val encoding != ","eval_string encoding ","val respond_to? ","@indent indent_level ","original_val != "," readline  ! ","@indent indent  ! ","target e readline  ","target e@indent indent  ","e readline _string empty? ","e@indent indent _string empty? ","e readline _string << ","e@indent indent _string << ","indented_ readline  rstrip ","indented_@indent indent  rstrip ","@indent indent  rstrip "," readline  empty? ","@indent indent  empty? ","@indent correct_@indent current_prefix  ","@indent correct_@indent indent_level  ","original_ readline  length - ","original_@indent indent  length - ","indented_ readline  length ","indented_@indent indent  length ","@indent indent  length ","original_ readline  length ","original_@indent indent  length ","e readline _string force_encoding ","e@indent indent _string force_encoding "," readline  encoding ","@indent indent  encoding ","e readline _string replace ","e@indent indent _string replace ","Pry InputCompleter  build_Pry InputCompleter  build_completion_proc  ","Pry InputCompleter  build_Pry  config completer build_completion_proc  "," instance_e readline  "," instance_e@indent indent  ","indented_ readline  chomp ","indented_@indent indent  chomp ","@indent indent  chomp ","Pry InputCompleter  build_completion_proc  call ","Pry  config completer build_completion_proc  call ","Pry  config completer build_Pry InputCompleter  build_completion_proc  ","Pry  config completer build_Pry  config completer build_completion_proc  ","(lvar : readline ) all? ","(lvar :@indent indent ) all? "," readline  dup ","@indent indent  dup ","orig_ readline  length - ","orig_@indent indent  length - "," readline  length ","orig_ readline  length ","orig_@indent indent  length "," select_prompt  + ","orig_ readline  != ","orig_@indent indent  != ","@command_processor  readline id_command? ! ","@command_processor @indent indent id_command? ! ","@command_processor  readline id_command? ","@command_processor @indent indent id_command? "," readline  encoding != ","@indent indent  encoding != ","e readline _string encoding ","e@indent indent _string encoding "," readline  respond_to? ","@indent indent  respond_to? ","original_ readline  != ","original_@indent indent  != "]}," Pry null_input?":{"type":"method","name":"null_input?","children":[],"call":["Pry  cmd_ret_value ! ","Pry  cmd_ret_value ","val empty? "]}," Pry CommandProcessor execute_command":{"type":"method","name":"execute_command","children":[],"call":["options [] clear ","options [] "," commands instance_exec "," commands ","args values_at ","action arity - ","action arity ","action arity <=> "," commands output= "," output "," commands target= "," commands opts= "," commands run_command ","context command_processor= ","context command_set= ","context output= ","context target= ","context opts= ","CommandContext  new ","options [] replace ","context arg_string= ","context eval_string= ","context captures= ","context _pry_= ","context target_self= ","target eval "," catch ","CommandContext  new  command_processor= ","CommandContext  new  command_set= ","CommandContext  new  output= ","CommandContext  new  target= ","CommandContext  new  opts= ","CommandContext  new  arg_string= ","CommandContext  new  eval_string= ","CommandContext  new  captures= ","CommandContext  new  _pry_= ","CommandContext  new  target_self= "]}," Pry CommandProcessor process_commands":{"type":"method","name":"process_commands","children":[{"type":"method","name":"clear","children":[],"asgn":[],"call":[]},{"type":"method","name":"clear","children":[],"asgn":[],"call":[]}],"call":[" execute_command "," commands commands "," commands "," nesting ","cmd_data [] ","Shellwords  shellwords "," command_matched ","val replace "," interpolate_string "," pry_command? ! "," pry_command? "," execute_system_command "," system_command? "," replace ","cmd_data ! "," system_command ","command name ","captures + ","arg_string slice! ","arg_string start_with? ","val [] ","command ! ","val [] strip ","command options [] ","command options "," valid_command? ! "," valid_command? ","Result  new ","arg_string split "," check_for_command_name_collision ","val [] rstrip ","Pry  config collision_warning ","Pry  config ","val []  slice! ","val [] strip  slice! ","val []  start_with? ","val [] strip  start_with? ","val []  split ","val [] strip  split "]}," Pry CommandProcessor command_matched":{"type":"method","name":"command_matched","children":[],"call":["(str \"^\") =~ ","Regexp  escape "," commands commands find "," commands commands "," commands ","Regexp  last_match end ","Regexp  last_match ","Regexp  last_match captures ","command_regex =~ ","val replace "," interpolate_string ","data options [] ","data options "," convert_to_regex ","Pry  config command_prefix ","Pry  config ","Pry  config command_Regexp  escape  ","Pry  config command_ convert_to_regex  "]}," Pry CommandProcessor execute_system_command":{"type":"method","name":"execute_system_command","children":[],"call":["val replace "," output puts "," output "," system ! "," system ","Dir  chdir ","@@cd_history << ","Dir  pwd ","File  expand_path ","@@cd_history pop ","1 == ","cmd =~ "," interpolate_string ","SYSTEM_COMMAND_REGEX  =~ ","val clear "," interpolate_string  =~ "]}," Pry CommandProcessor interpolate_string":{"type":"method","name":"interpolate_string","children":[],"call":["target eval ","dumped_str gsub! ","str dump ","str dump  gsub! "]}," Pry CommandProcessor pry_command?":{"type":"method","name":"pry_command?","children":[],"call":[" command_matched first ! ! "," command_matched first ! "," command_matched first "," command_matched "]}," Pry CommandProcessor system_command?":{"type":"method","name":"system_command?","children":[],"call":["(send\n  (const nil :SYSTEM_COMMAND_REGEX) :=~\n  (lvar :val)) ! ! ","(send\n  (const nil :SYSTEM_COMMAND_REGEX) :=~\n  (lvar :val)) ! ","SYSTEM_COMMAND_REGEX  =~ "]}," Pry CommandProcessor valid_command?":{"type":"method","name":"valid_command?","children":[],"call":[" pry_command? "," system_command? ","(send\n  (send nil :command_matched\n    (lvar :val)\n    (lvar :target)) :[]\n  (int 0)) ! ! ","(send\n  (send nil :command_matched\n    (lvar :val)\n    (lvar :target)) :[]\n  (int 0)) ! "," command_matched [] "," command_matched ","(send\n  (send nil :command_matched\n    (lvar :val)) :[]\n  (int 0)) ! ! ","(send\n  (send nil :command_matched\n    (lvar :val)) :[]\n  (int 0)) ! ","(send\n  (send nil :command_matched\n    (lvar :val)\n    (send nil :binding)) :[]\n  (int 0)) ! ! ","(send\n  (send nil :command_matched\n    (lvar :val)\n    (send nil :binding)) :[]\n  (int 0)) ! "," binding "]}," Pry CommandProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry Commands CommandHelpers prompt":{"type":"method","name":"prompt","children":[],"call":[" output puts ","response inspect "," output ","default downcase ","Pry  input readline downcase ","Pry  input readline ","Pry  input "," loop ","defaults first "," raise "," default inspect "," default ","defaults size > ","defaults size ","o downcase ","opts map ","o upcase == ","o upcase ","opts select ","opts join ","options scan ","Pry  input readline downcase  inspect ","defaults first  downcase ","defaults first s first "," defaults first  inspect "," defaults first  ","defaults first s size > ","defaults first s size ","options scan  map ","options scan  select ","options scan  join "]}," Pry Commands CommandHelpers strip_comments_from_c_code":{"type":"method","name":"strip_comments_from_c_code","children":[],"call":["code sub "]}," Pry Commands CommandHelpers strip_leading_hash_and_whitespace_from_ruby_comments":{"type":"method","name":"strip_leading_hash_and_whitespace_from_ruby_comments","children":[],"call":[" strip_leading_whitespace ","comment gsub! ","comment dup ","comment dup  gsub! ","comment dup  dup "]}," Pry Commands CommandHelpers strip_leading_whitespace":{"type":"method","name":"strip_leading_whitespace","children":[],"call":["text gsub ","text lines first [] ","text lines first ","text lines ","text empty? "]}," Pry Commands CommandHelpers process_comment_markup":{"type":"method","name":"process_comment_markup","children":[],"call":[" process_yardoc "," process_rdoc "]}," Pry Commands CommandHelpers process_yardoc":{"type":"method","name":"process_yardoc","children":[],"call":["Pry  color ","(send\n  (begin\n    (send\n      (lvar :yard_tags) :-\n      (array\n        (str \"example\")))) :inject\n  (lvar :comment)) gsub ","yard_tags join "," process_yardoc_tag ","(send\n  (lvar :yard_tags) :-\n  (array\n    (str \"example\"))) inject ","yard_tags - "]}," Pry Commands CommandHelpers process_yardoc_tag":{"type":"method","name":"process_yardoc_tag","children":[],"call":["(send\n  (send\n    (lvar :comment) :lines) :map) join ","v =~ "," strip_color_codes ","v !~ ","comment lines map ","comment lines "]}," Pry Commands CommandHelpers process_rdoc":{"type":"method","name":"process_rdoc","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","Pry  color ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[32m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[34m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[32m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[34m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment gsub ","comment dup ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[32m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[34m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[32m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[34m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment dup ) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment dup ) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment dup  gsub ","comment dup  dup "]}," Pry Commands CommandHelpers strip_color_codes":{"type":"method","name":"strip_color_codes","children":[],"call":["str gsub "]}," Pry Commands CommandHelpers read_between_the_lines":{"type":"method","name":"read_between_the_lines","children":[],"call":[" normalized_line_number ","lines_array size ","lines_array [] join ","lines_array [] ","content each_line to_a ","content each_line ","File  read ","File  expand_path ","content each_line to_a  size ","content each_line to_a  [] join ","content each_line to_a  [] ","File  read  each_line to_a ","File  read  each_line "]}," Pry Commands CommandHelpers normalized_line_number":{"type":"method","name":"normalized_line_number","children":[],"call":["line_number + ","line_number < "]}," Pry Commands CommandHelpers syntax_highlight_by_file_type_or_specified":{"type":"method","name":"syntax_highlight_by_file_type_or_specified","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","matcher == ","File  basename ","File  extname "," Array any? "," Array "," file_map find "," file_map "]}," Pry Commands CommandHelpers file_map":{"type":"method","name":"file_map","children":[],"call":[]}," Pry Commands CommandHelpers code_type_for":{"type":"method","name":"code_type_for","children":[],"call":[" check_for_dynamically_defined_method "," output puts ","meth name "," output "," is_a_c_method? ","info source ","Pry MethodInfo  info_for "," should_use_pry_doc? ","Pry MethodInfo  info_for  source ","Pry MethodInfo  Pry MethodInfo  info_for _for "]}," Pry Commands CommandHelpers should_use_pry_doc?":{"type":"method","name":"should_use_pry_doc?","children":[],"call":[" is_a_c_method? ","Pry  has_pry_doc "]}," Pry Commands CommandHelpers is_a_c_method?":{"type":"method","name":"is_a_c_method?","children":[],"call":["meth source_location nil? ","meth source_location "]}," Pry Commands CommandHelpers make_header":{"type":"method","name":"make_header","children":[],"call":[" bold ","Pry MethodInfo  info_for file ","Pry MethodInfo  info_for ","meth source_location ","content each_line count to_s ","content each_line count ","content each_line ","Pry MethodInfo  info_for Pry MethodInfo  info_for file  "]}," Pry Commands CommandHelpers get_method_object":{"type":"method","name":"get_method_object","children":[],"call":["target eval ","options [] ","meth_name ! "]}," Pry Commands CommandHelpers doc_and_code_type_for":{"type":"method","name":"doc_and_code_type_for","children":[],"call":[" set_file_and_dir_locals ","meth source_location first ","meth source_location "," strip_leading_hash_and_whitespace_from_ruby_comments ","meth comment ","Pry MethodInfo  info_for docstring ","Pry MethodInfo  info_for "," code_type_for ","Pry MethodInfo  info_for  strip_leading_hash_and_whitespace_from_ruby_comments string ","Pry MethodInfo  info_for meth comment string ","Pry MethodInfo  info_for Pry MethodInfo  info_for docstring string ","  code_type_for _for "]}," Pry Commands CommandHelpers code_and_code_type_for":{"type":"method","name":"code_and_code_type_for","children":[],"call":[" set_file_and_dir_locals ","meth source_location first ","meth source_location "," strip_leading_whitespace ","meth source "," strip_comments_from_c_code ","Pry MethodInfo  info_for source ","Pry MethodInfo  info_for "," code_type_for "," strip_comments_from_c_ strip_leading_whitespace  "," strip_comments_from_c_ strip_comments_from_c_code  "," strip_comments_from_c_Pry MethodInfo  info_for source  ","  strip_leading_whitespace _type_for ","  strip_comments_from_c_code _type_for "," Pry MethodInfo  info_for source _type_for ","  code_type_for _for "]}," Pry Commands CommandHelpers no_color":{"type":"method","name":"no_color","children":[],"call":["Pry  color= ","Pry  color "]}," Pry Commands CommandHelpers remove_first_word":{"type":"method","name":"remove_first_word","children":[],"call":["text split drop join ","text split drop ","text split "]}," Pry Commands CommandHelpers check_for_dynamically_defined_method":{"type":"method","name":"check_for_dynamically_defined_method","children":[],"call":[" raise ","file =~ ","meth source_location "," is_a_dynamically_defined_method? "]}," Pry Commands CommandHelpers render_output":{"type":"method","name":"render_output","children":[],"call":[" stagger_output "," output puts "," output "," add_line_numbers "]}," Pry Commands CommandHelpers add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["(send\n  (send\n    (lvar :line_array) :each_with_index) :map) join ","CodeRay  scan term ","CodeRay  scan ","Pry  color ","idx + ","line_array each_with_index map ","line_array each_with_index ","lines each_line to_a ","lines each_line ","(send\n  (send\n    (lvar :lines each_line to_a ) :each_with_index) :map) join ","lines each_line to_a  each_with_index map ","lines each_line to_a  each_with_index "]}," Pry Commands CommandHelpers set_file_and_dir_locals":{"type":"method","name":"set_file_and_dir_locals","children":[],"call":[" target eval "," target ","File  dirname ","File  expand_path "," target ! "]}," Pry Commands CommandHelpers meth_name_from_binding":{"type":"method","name":"meth_name_from_binding","children":[],"call":["(sym :__script__) include? ","b eval "]}," Pry Commands CommandHelpers try_to_load_pry_doc":{"type":"method","name":"try_to_load_pry_doc","children":[],"call":[" require ","RUBY_ENGINE  !~ ","Object  const_defined? ! ","Object  const_defined? "]}," Pry CommandBase CommandBaseHelpers lesspipe":{"type":"method","name":"lesspipe","children":[],"call":["less puts ","IO  popen ","params * ","params << ","$stderr puts ","options [] == ","options [] ","args first ","args any? ","args pop ","args last is_a? ","args last ","args pop  [] == ","args pop  [] "]}," Pry CommandBase CommandBaseHelpers stagger_output":{"type":"method","name":"stagger_output","children":[],"call":[" simple_pager ","less puts "," lesspipe ","RUBY_ENGINE  =~ ","Object  const_defined? "," output puts "," output ","Pry  pager ! ","Pry  pager ","text lines count < "," page_size ","text lines count ","text lines "]}," Pry CommandBase CommandBaseHelpers simple_pager":{"type":"method","name":"simple_pager","children":[],"call":["$stdin gets chomp == ","$stdin gets chomp ","$stdin gets "," output puts "," output ","text_array size > "," page_size ","text_array size ","chunk size < ","chunk size ","chunk join ","text_array each_slice ","text lines to_a ","text lines ","text lines to_a  size > ","text lines to_a  size ","text lines to_a  each_slice "]}," Pry CommandBase CommandBaseHelpers page_size":{"type":"method","name":"page_size","children":[],"call":[]}," Pry CommandBase CommandBaseHelpers heading":{"type":"method","name":"heading","children":[],"call":["Pry  color "]}," Pry CommandBase CommandBaseHelpers highlight":{"type":"method","name":"highlight","children":[],"call":["string gsub "]}," Pry CommandBase CommandBaseHelpers colorize":{"type":"method","name":"colorize","children":[],"call":["result << "," send ","stack last "," raise ","stack delete_at ","stack rindex ","VALID_COLORS  include? ","stack push ","tokens each ","token size == ","token size ","tokens delete_if ","string split ","string split  each ","string split  delete_if "]}," Pry CommandBase CommandBaseHelpers bold":{"type":"method","name":"bold","children":[],"call":["Pry  color "]}," Pry CommandBase CommandBaseHelpers create_command_stub":{"type":"method","name":"create_command_stub","children":[],"call":[" commands []= "," stub_proc "," commands "," Array each "," Array "]}," Pry CommandBase CommandBaseHelpers stub_proc":{"type":"method","name":"stub_proc","children":[],"call":[" output puts "," output ","gems_not_installed join ","gems_needed join "," proc "," gem_installed? ! "," gem_installed? ","gems_needed select "," Array ","options [] "," Array  join "," Array  select "]}," Pry CommandBase CommandBaseHelpers command_dependencies_met?":{"type":"method","name":"command_dependencies_met?","children":[],"call":[" gem_installed? "," Array all? "," Array ","options [] ","options [] ! "]}," Pry CommandBase CommandBaseHelpers gem_installed?":{"type":"method","name":"gem_installed?","children":[],"call":["Gem  source_index find_name first ! ! ","Gem  source_index find_name first ! ","Gem  source_index find_name first ","Gem  source_index find_name ","Gem  source_index "," require "]}," Pry execute_system_command":{"type":"method","name":"execute_system_command","children":[],"call":[" system ","Dir  chdir ","File  expand_path ","cmd =~ "]}," Pry system_command":{"type":"method","name":"system_command","children":[],"call":["val clear "," execute_system_command ","val =~ "]}," Pry CommandProcessor system_command":{"type":"method","name":"system_command","children":[],"call":["val clear "," execute_system_command ","val =~ "]}," Pry Commands CommandHelpers lesspipe":{"type":"method","name":"lesspipe","children":[],"call":["less puts ","IO  popen ","params * ","params << ","$stderr puts ","options [] == ","options [] ","args first ","args any? ","args pop ","args last is_a? ","args last ","args pop  [] == ","args pop  [] "]}," Pry Commands CommandHelpers stagger_output":{"type":"method","name":"stagger_output","children":[],"call":[" simple_pager ","less puts "," lesspipe "]}," Pry Commands CommandHelpers simple_pager":{"type":"method","name":"simple_pager","children":[],"call":["$stdin gets chomp == ","$stdin gets chomp ","$stdin gets "," output puts "," output ","text_array size > ","text_array size ","chunk size < ","chunk size ","chunk join ","text_array each_slice ","text lines to_a ","text lines ","text lines to_a  size > ","text lines to_a  size ","text lines to_a  each_slice "]}," Pry Commands CommandHelpers is_a_dynamically_defined_method?":{"type":"method","name":"is_a_dynamically_defined_method?","children":[],"call":["(send\n  (lvar :file) :=~\n  (regexp\n    (str \"(\\\\(.*\\\\))|<.*>\")\n    (regopt))) ! ! ","(send\n  (lvar :file) :=~\n  (regexp\n    (str \"(\\\\(.*\\\\))|<.*>\")\n    (regopt))) ! ","file =~ ","meth source_location "]}," Pry Commands CommandHelpers editor_with_start_line":{"type":"method","name":"editor_with_start_line","children":[],"call":["Pry  editor ","RUBY_PLATFORM  =~ "]}," Pry Helpers CommandHelpers prompt":{"type":"method","name":"prompt","children":[],"call":[" output puts ","response inspect "," output ","default downcase ","Pry  input readline downcase ","Pry  input readline ","Pry  input "," loop ","defaults first "," raise "," default inspect "," default ","defaults size > ","defaults size ","o downcase ","opts map ","o upcase == ","o upcase ","opts select ","opts join ","options scan ","Pry  input readline downcase  inspect ","defaults first  downcase ","defaults first s first "," defaults first  inspect "," defaults first  ","defaults first s size > ","defaults first s size ","options scan  map ","options scan  select ","options scan  join "]}," Pry Helpers CommandHelpers strip_comments_from_c_code":{"type":"method","name":"strip_comments_from_c_code","children":[],"call":["code sub "]}," Pry Helpers CommandHelpers strip_leading_hash_and_whitespace_from_ruby_comments":{"type":"method","name":"strip_leading_hash_and_whitespace_from_ruby_comments","children":[],"call":[" strip_leading_whitespace ","comment gsub! ","comment dup ","comment dup  gsub! ","comment dup  dup "]}," Pry Helpers CommandHelpers strip_leading_whitespace":{"type":"method","name":"strip_leading_whitespace","children":[],"call":["text gsub ","text lines first [] ","text lines first ","text lines ","text empty? "]}," Pry Helpers CommandHelpers process_comment_markup":{"type":"method","name":"process_comment_markup","children":[],"call":[" process_yardoc "," process_rdoc "]}," Pry Helpers CommandHelpers process_yardoc":{"type":"method","name":"process_yardoc","children":[],"call":["Pry  color ","(send\n  (begin\n    (send\n      (lvar :yard_tags) :-\n      (array\n        (str \"example\")))) :inject\n  (lvar :comment)) gsub ","yard_tags join "," process_yardoc_tag ","(send\n  (lvar :yard_tags) :-\n  (array\n    (str \"example\"))) inject ","yard_tags - "]}," Pry Helpers CommandHelpers process_yardoc_tag":{"type":"method","name":"process_yardoc_tag","children":[],"call":["(send\n  (send\n    (lvar :comment) :lines) :map) join ","v =~ "," strip_color_codes ","v !~ ","comment lines map ","comment lines ","Pry Helpers Text  strip_color "]}," Pry Helpers CommandHelpers process_rdoc":{"type":"method","name":"process_rdoc","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","Pry  color ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[32m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[34m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[32m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[34m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment gsub ","comment dup ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[32m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[34m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[32m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[34m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub ","(send\n  (block\n    (send\n      (lvar :comment dup ) :gsub\n      (regexp\n        (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (send\n        (send\n          (const nil :CodeRay) :scan\n          (nth-ref 1)\n          (lvar :code_type)) :term)\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n    (regopt :m))) gsub ","(send\n  (lvar :comment dup ) :gsub\n  (regexp\n    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n    (regopt :m))) gsub ","comment dup  gsub ","comment dup  dup ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (block\n                (send\n                  (lvar :comment dup ) :gsub\n                  (regexp\n                    (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                    (regopt :m)))\n                (args)\n                (if\n                  (send\n                    (const nil :Pry) :color)\n                  (send\n                    (send\n                      (const nil :CodeRay) :scan\n                      (nth-ref 1)\n                      (lvar :code_type)) :term)\n                  (nth-ref 1))) :gsub\n              (regexp\n                (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (dstr\n                (str \"\\e[1m\")\n                (begin\n                  (nth-ref 1))\n                (str \"\\e[0m\"))\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n        (regopt)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[32m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"((?:^[ \\\\t]+.+(?:\\\\n+|\\\\Z))+)\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (lvar :comment dup ) :gsub\n              (regexp\n                (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n                (regopt :m)))\n            (args)\n            (if\n              (send\n                (const nil :Pry) :color)\n              (send\n                (send\n                  (const nil :CodeRay) :scan\n                  (nth-ref 1)\n                  (lvar :code_type)) :term)\n              (nth-ref 1))) :gsub\n          (regexp\n            (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (dstr\n            (str \"\\e[1m\")\n            (begin\n              (nth-ref 1))\n            (str \"\\e[0m\"))\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"\\\\B\\\\+(\\\\w*?)\\\\+\\\\B\")\n    (regopt))) gsub ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :comment dup ) :gsub\n          (regexp\n            (str \"<code>(?:\\\\s*\\\\n)?(.*?)\\\\s*</code>\")\n            (regopt :m)))\n        (args)\n        (if\n          (send\n            (const nil :Pry) :color)\n          (send\n            (send\n              (const nil :CodeRay) :scan\n              (nth-ref 1)\n              (lvar :code_type)) :term)\n          (nth-ref 1))) :gsub\n      (regexp\n        (str \"<em>(?:\\\\s*\\\\n)?(.*?)\\\\s*</em>\")\n        (regopt :m)))\n    (args)\n    (if\n      (send\n        (const nil :Pry) :color)\n      (dstr\n        (str \"\\e[1m\")\n        (begin\n          (nth-ref 1))\n        (str \"\\e[0m\"))\n      (nth-ref 1))) :gsub\n  (regexp\n    (str \"<i>(?:\\\\s*\\\\n)?(.*?)\\\\s*</i>\")\n    (regopt :m))) gsub "]}," Pry Helpers CommandHelpers strip_color_codes":{"type":"method","name":"strip_color_codes","children":[],"call":["str gsub "]}," Pry Helpers CommandHelpers read_between_the_lines":{"type":"method","name":"read_between_the_lines","children":[],"call":[" normalized_line_number ","lines_array size ","lines_array [] join ","lines_array [] ","content each_line to_a ","content each_line ","File  read ","File  expand_path ","Pry  line_buffer drop join ","Pry  line_buffer drop ","Pry  line_buffer ","file_name == ","Pry  eval_path ","content each_line to_a  size ","content each_line to_a  [] join ","content each_line to_a  [] ","File  read  each_line to_a ","Pry  line_buffer drop join  each_line to_a ","File  read  each_line ","Pry  line_buffer drop join  each_line "]}," Pry Helpers CommandHelpers normalized_line_number":{"type":"method","name":"normalized_line_number","children":[],"call":["line_number + ","line_number < "]}," Pry Helpers CommandHelpers syntax_highlight_by_file_type_or_specified":{"type":"method","name":"syntax_highlight_by_file_type_or_specified","children":[],"call":["CodeRay  scan term ","CodeRay  scan ","matcher == ","File  basename ","File  extname "," Array any? "," Array "," file_map find "," file_map ","Pry  color "]}," Pry Helpers CommandHelpers file_map":{"type":"method","name":"file_map","children":[],"call":[]}," Pry Helpers CommandHelpers code_type_for":{"type":"method","name":"code_type_for","children":[],"call":[" check_for_dynamically_defined_method "," output puts ","meth name "," output "," is_a_c_method? ","info source ","Pry MethodInfo  info_for "," should_use_pry_doc? ","Pry MethodInfo  info_for  source ","Pry MethodInfo  Pry MethodInfo  info_for _for "]}," Pry Helpers CommandHelpers should_use_pry_doc?":{"type":"method","name":"should_use_pry_doc?","children":[],"call":[" is_a_c_method? ","Pry  has_pry_doc ","Pry  config has_pry_doc ","Pry  config "]}," Pry Helpers CommandHelpers is_a_c_method?":{"type":"method","name":"is_a_c_method?","children":[],"call":["meth source_location nil? ","meth source_location "]}," Pry Helpers CommandHelpers make_header":{"type":"method","name":"make_header","children":[],"call":[" bold ","Pry MethodInfo  info_for file ","Pry MethodInfo  info_for ","meth source_location ","content each_line count to_s ","content each_line count ","content each_line ","Pry Helpers Text  bold "," path_line_for ","header << ","meth source_line ","meth source_type == ","meth source_type ","meth source_file ","Pry MethodInfo  info_for Pry MethodInfo  info_for file  ","meth source_Pry MethodInfo  info_for file  "]}," Pry Helpers CommandHelpers get_method_object":{"type":"method","name":"get_method_object","children":[],"call":["target eval ","options [] ","meth_name ! "," meth_name_from_binding ","options []= ","Pry  binding_for ","meth_name =~ "," get_method_object_from_target "," get_method_attributes ","Pry  binding_for  eval "," meth_name_from_binding  ! ","  meth_name_from_binding _from_binding "," meth_name_from_binding  =~ "," get_method_object_from_Pry  binding_for  "]}," Pry Helpers CommandHelpers doc_and_code_type_for":{"type":"method","name":"doc_and_code_type_for","children":[],"call":[" set_file_and_dir_locals ","meth source_location first ","meth source_location "," strip_leading_hash_and_whitespace_from_ruby_comments ","meth comment ","Pry MethodInfo  info_for docstring ","Pry MethodInfo  info_for "," code_type_for "," path_line_for first "," path_line_for "," rbx_core_doc_for "," rbx_core? ","Pry MethodInfo  info_for  strip_leading_hash_and_whitespace_from_ruby_comments string ","Pry MethodInfo  info_for meth comment string ","Pry MethodInfo  info_for Pry MethodInfo  info_for docstring string ","  code_type_for _for "," rbx_core_ strip_leading_hash_and_whitespace_from_ruby_comments _for "," rbx_core_meth comment _for "," rbx_core_Pry MethodInfo  info_for docstring _for "]}," Pry Helpers CommandHelpers code_and_code_type_for":{"type":"method","name":"code_and_code_type_for","children":[],"call":[" set_file_and_dir_locals ","meth source_location first ","meth source_location "," strip_leading_whitespace ","meth source "," strip_comments_from_c_code ","Pry MethodInfo  info_for source ","Pry MethodInfo  info_for "," code_type_for "," path_line_for first "," path_line_for "," rbx_core_code_for "," rbx_core? ","Pry  new r "," target ","Pry  new ","StringIO  new ","Pry  line_buffer [] join ","Pry  line_buffer [] ","Pry  line_buffer ","meth source_location last ","meth source_location first == ","Pry  eval_path "," proc "," striPry  new r _leading_whitesPry  new r ace "," strip_comments_from_c_ strip_leading_whitespace  "," strip_comments_from_c_ strip_comments_from_c_code  "," strip_comments_from_c_Pry MethodInfo  info_for source  "," striPry  new r _comments_from_c_code ","  strip_leading_whitespace _type_for ","  strip_comments_from_c_code _type_for "," Pry MethodInfo  info_for source _type_for ","  code_type_for _for "," code_tyPry  new r e_for "," Pry  new r ath_line_for first "," Pry  new r ath_line_for "," rbx_core_ strip_leading_whitespace _for "," rbx_core_ strip_comments_from_c_code _for "," rbx_core_Pry MethodInfo  info_for source _for ","Pry  eval_Pry  new r ath "," Pry  new r roc "]}," Pry Helpers CommandHelpers no_color":{"type":"method","name":"no_color","children":[],"call":["Pry  color= ","Pry  color "]}," Pry Helpers CommandHelpers remove_first_word":{"type":"method","name":"remove_first_word","children":[],"call":["text split drop join ","text split drop ","text split "]}," Pry Helpers CommandHelpers check_for_dynamically_defined_method":{"type":"method","name":"check_for_dynamically_defined_method","children":[],"call":[" raise ","file =~ ","meth source_location "," is_a_dynamically_defined_method? ","file != ","Pry  eval_path "]}," Pry Helpers CommandHelpers is_a_dynamically_defined_method?":{"type":"method","name":"is_a_dynamically_defined_method?","children":[],"call":["(send\n  (lvar :file) :=~\n  (regexp\n    (str \"(\\\\(.*\\\\))|<.*>\")\n    (regopt))) ! ! ","(send\n  (lvar :file) :=~\n  (regexp\n    (str \"(\\\\(.*\\\\))|<.*>\")\n    (regopt))) ! ","file =~ ","meth source_location "]}," Pry Helpers CommandHelpers render_output":{"type":"method","name":"render_output","children":[],"call":[" stagger_output "," output puts "," output "," add_line_numbers ","Pry Helpers Text  with_line_numbers ","opts [] "]}," Pry Helpers CommandHelpers add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["(send\n  (send\n    (lvar :line_array) :each_with_index) :map) join ","CodeRay  scan term ","CodeRay  scan ","Pry  color ","idx + ","line_array each_with_index map ","line_array each_with_index ","lines each_line to_a ","lines each_line ","(send\n  (send\n    (lvar :lines each_line to_a ) :each_with_index) :map) join ","lines each_line to_a  each_with_index map ","lines each_line to_a  each_with_index "]}," Pry Helpers CommandHelpers meth_name_from_binding":{"type":"method","name":"meth_name_from_binding","children":[],"call":["(sym :__script__) include? ","b eval "]}," Pry Helpers CommandHelpers try_to_load_pry_doc":{"type":"method","name":"try_to_load_pry_doc","children":[],"call":[" require ","RUBY_ENGINE  !~ ","Object  const_defined? ! ","Object  const_defined? "]}," Pry Helpers BaseHelpers lesspipe":{"type":"method","name":"lesspipe","children":[],"call":["less puts ","IO  popen ","params * ","params << ","$stderr puts ","options [] == ","options [] ","args first ","args any? ","args pop ","args last is_a? ","args last ","args pop  [] == ","args pop  [] "]}," Pry Helpers BaseHelpers simple_pager":{"type":"method","name":"simple_pager","children":[],"call":["$stdin gets chomp == ","$stdin gets chomp ","$stdin gets "," output puts "," output ","text_array size > "," page_size ","text_array size ","chunk size < ","chunk size ","chunk join ","text_array each_slice ","text lines to_a ","text lines ","output puts ","text lines to_a  size > ","text lines to_a  size ","text lines to_a  each_slice "]}," Pry Helpers BaseHelpers page_size":{"type":"method","name":"page_size","children":[],"call":[]}," Pry Helpers BaseHelpers colorize":{"type":"method","name":"colorize","children":[],"call":["result << "," send ","stack last "," raise ","stack delete_at ","stack rindex ","VALID_COLORS  include? ","stack push ","tokens each ","token size == ","token size ","tokens delete_if ","string split ","string split  each ","string split  delete_if "]}," Pry Helpers BaseHelpers bold":{"type":"method","name":"bold","children":[],"call":["Pry  color "]}," Pry Helpers BaseHelpers create_command_stub":{"type":"method","name":"create_command_stub","children":[],"call":[" commands []= "," stub_proc "," commands "," Array each "," Array "]}," Pry Helpers BaseHelpers stub_proc":{"type":"method","name":"stub_proc","children":[],"call":[" output puts "," output ","gems_not_installed join ","gems_needed join "," proc "," gem_installed? ! "," gem_installed? ","gems_needed select "," Array ","options [] "," Array  join "," Array  select "]}," Pry Helpers BaseHelpers set_file_and_dir_locals":{"type":"method","name":"set_file_and_dir_locals","children":[],"call":[" target eval "," target ","File  dirname ","File  expand_path "," target ! "," _pry_ inject_local "," _pry_ last_dir "," _pry_ "," _pry_ last_dir= "," _pry_ last_file "," _pry_ last_file= ","file_name ! ","_pry_ inject_local ","_pry_ last_dir ","_pry_ last_dir= ","_pry_ last_file ","_pry_ last_file= ","target ! "]}," Pry Helpers BaseHelpers gem_installed?":{"type":"method","name":"gem_installed?","children":[],"call":["Gem  source_index find_name first ! ! ","Gem  source_index find_name first ! ","Gem  source_index find_name first ","Gem  source_index find_name ","Gem  source_index "," require ","Gem Specification  find_all_by_name empty? ! ","Gem Specification  find_all_by_name empty? ","Gem Specification  find_all_by_name ","Gem Specification  respond_to? "]}," Pry Helpers BaseHelpers no_color":{"type":"method","name":"no_color","children":[],"call":["Pry  color= ","Pry  color "]}," Pry DefaultCommands start_line_for_editor":{"type":"method","name":"start_line_for_editor","children":[],"call":["RUBY_PLATFORM  =~ ","Pry  editor "]}," Pry CommandSet define_default_commands":{"type":"method","name":"define_default_commands","children":[],"call":[" output puts "," output "," commands [] options delete "," commands [] options "," commands [] "," commands ","Gem  refresh ","Gem DependencyInstaller  new install ","Gem DependencyInstaller  new "," gem_installed? ","gems_to_install each "," Array "," commands [] options [] ","stub_info ! "," command ","command description "," stagger_output ","help_text << ","(begin\n  (lvar :key)) ljust + + ","(begin\n  (lvar :key)) ljust + ","(begin\n  (lvar :key)) ljust ","command description empty? ! ","command description empty? "," commands each "," heading + "," heading ","cmd ! ","command options delete ","command options "," require ","command options [] "," find_command ","(begin\n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :listing))) ljust + + ","(begin\n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :listing))) ljust + ","(begin\n  (send\n    (send\n      (lvar :command) :options) :[]\n    (sym :listing))) ljust ","(send\n  (send nil :commands) :map) compact sort join ","(send\n  (send nil :commands) :map) compact sort ","(send\n  (send nil :commands) :map) compact "," commands map "," raise ","command name "," command_dependencies_met? "," banner "," create_command ","command options [] to_s ljust ","command options [] to_s ","command new help ","command new "," args first "," args "," description ","  commands [] s [] options delete ","  find_command s [] options delete ","  commands [] s [] options ","  find_command s [] options ","  commands [] s [] ","  find_command s [] ","  commands [] s ","  find_command s "," Array  each ","  commands [] s [] options [] ","  find_command s [] options [] "," commands [] options []  ! ","command options []  ! ","  commands []  ","  find_command  "," commands []  description "," find_command  description "," heading +  << "," commands []  description empty? ! "," find_command  description empty? ! "," commands []  description empty? "," find_command  description empty? ","  commands [] s each ","  find_command s each "," args first  ! "," commands []  options delete "," find_command  options delete "," commands []  options "," find_command  options "," commands []  options [] "," find_command  options [] "," find_ commands []  "," find_ find_command  ","(begin\n  (send\n    (send\n      (lvar : commands [] ) :options) :[]\n    (sym :listing))) ljust + + ","(begin\n  (send\n    (send\n      (lvar : find_command ) :options) :[]\n    (sym :listing))) ljust + + ","(begin\n  (send\n    (send\n      (lvar : commands [] ) :options) :[]\n    (sym :listing))) ljust + ","(begin\n  (send\n    (send\n      (lvar : find_command ) :options) :[]\n    (sym :listing))) ljust + ","(begin\n  (send\n    (send\n      (lvar : commands [] ) :options) :[]\n    (sym :listing))) ljust ","(begin\n  (send\n    (send\n      (lvar : find_command ) :options) :[]\n    (sym :listing))) ljust ","(send\n  (send nil : commands [] s) :map) compact sort join ","(send\n  (send nil : find_command s) :map) compact sort join ","(send\n  (send nil : commands [] s) :map) compact sort ","(send\n  (send nil : find_command s) :map) compact sort ","(send\n  (send nil : commands [] s) :map) compact ","(send\n  (send nil : find_command s) :map) compact ","  commands [] s map ","  find_command s map "," commands []  name "," find_command  name ","  commands [] _dependencies_met? ","  find_command _dependencies_met? "," create_ commands []  "," create_ find_command  "," commands []  options [] to_s ljust "," find_command  options [] to_s ljust "," commands []  options [] to_s "," find_command  options [] to_s "," commands []  new help "," find_command  new help "," commands []  new "," find_command  new "]}," Pry CommandSet command":{"type":"method","name":"command","children":[],"call":[" commands []= ","Command  new "," commands "," Array each "," Array ","options []= "," output puts "," output ","gems_not_installed join ","gems_needed join "," proc "," gem_installed? ! "," gem_installed? ","gems_needed select ","options [] "," command_dependencies_met? ","(pair\n  (sym :requires_gem)\n  (array)) merge "," Array first ","Helpers Text  bold ","(pair\n  (sym :requires_gem)\n  (array)) merge! ","Pry BlockCommand  subclass "," helper_module "," default_options merge! "," default_options ","(pair\n  (sym :requires_gem)\n  (array)) merge  []= ","(pair\n  (sym :requires_gem)\n  (array)) merge!  []= "," default_options merge!  []= "," Array  join "," Array  select ","(pair\n  (sym :requires_gem)\n  (array)) merge  [] ","(pair\n  (sym :requires_gem)\n  (array)) merge!  [] "," default_options merge!  [] "," default_(pair\n  (sym :requires_gem)\n  (array)) merge  merge! "," default_(pair\n  (sym :requires_gem)\n  (array)) merge!  merge! "," default_ default_options merge!  merge! "," default_(pair\n  (sym :requires_gem)\n  (array)) merge  "," default_(pair\n  (sym :requires_gem)\n  (array)) merge!  "," default_ default_options merge!  "]}," Pry CommandSet Command correct_arg_arity":{"type":"method","name":"correct_arg_arity","children":[],"call":["args values_at ","arity - ","arity <=> ","args [] ","Pry Helpers BaseHelpers  jruby? "]}," Pry CommandSet Command call":{"type":"method","name":"call","children":[],"call":[" options [] "," options ","context instance_exec "," block "," correct_arg_arity "," block arity ","context instance_eval ","context command_name= "]}," Pry CommandContext commands":{"type":"method","name":"commands","children":[],"call":[" command_set commands "," command_set "]}," Pry CommandContext run":{"type":"method","name":"run","children":[],"call":[" command_set run_command "," command_set "," command_processor execute_system_command "," target ","(lvar :name) join ","Shellwords  join "," command_processor ","name [] ","name start_with? "," command_processor process_commands "," eval_string ","args join "]}," Pry save_history":{"type":"method","name":"save_history","children":[],"call":["f write ","Readline HISTORY  to_a join ","Readline HISTORY  to_a ","File  open ","File  expand_path ","Pry  config history file ","Pry  config history ","Pry  config "]}," Pry set_active_instance":{"type":"method","name":"set_active_instance","children":[],"call":["target eval ","Pry  active_instance= "]}," Pry finished_top_level_session?":{"type":"method","name":"finished_top_level_session?","children":[],"call":[" nesting empty? "," nesting "]}," Pry refresh":{"type":"method","name":"refresh","children":[],"call":[" send ","defaults merge! each ","defaults merge! ","defaults []= ","Pry  send ","attributes each "," respond_to? ","Pry  input_stack dup ","Pry  input_stack "]}," Pry set_config_defaults":{"type":"method","name":"set_config_defaults","children":[],"call":[]}," Pry delegate_accessors":{"type":"method","name":"delegate_accessors","children":[],"call":[]}," Pry PluginManager method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Pry Helpers CommandHelpers path_line_for":{"type":"method","name":"path_line_for","children":[],"call":["meth source_location "," rbx_core_path_line_for "," rbx_core? "]}," Pry Helpers CommandHelpers rvm_rbx_core_path_line_for":{"type":"method","name":"rvm_rbx_core_path_line_for","children":[],"call":["meth source_location last ","meth source_location "," raise ","File  exists? ! ","File  exists? ","File  join ","meth source_location first ","File  dirname ","File  dirname split last ","File  dirname split "," rbx_rvm_convert_path_to_full "]}," Pry Helpers CommandHelpers std_rbx_core_path_line_for":{"type":"method","name":"std_rbx_core_path_line_for","children":[],"call":["meth source_location last ","meth source_location "," raise ","File  exists? ! ","File  exists? ","File  join ","meth source_location first "," rbx_std_convert_path_to_full "]}," Pry Helpers CommandHelpers rbx_core_path_line_for":{"type":"method","name":"rbx_core_path_line_for","children":[],"call":[" std_rbx_core_path_line_for "," rvm_rbx_core_path_line_for "," rvm_ruby? "]}," Pry Helpers CommandHelpers rbx_core_code_or_doc_for":{"type":"method","name":"rbx_core_code_or_doc_for","children":[],"call":["MethodSource  comment_helper ","MethodSource  source_helper "," rbx_core_path_line_for "," rbx_core_ rbx_core_path_line_for _for "]}," Pry Helpers CommandHelpers rbx_core_doc_for":{"type":"method","name":"rbx_core_doc_for","children":[],"call":[" rbx_core_code_or_doc_for "]}," Pry Helpers CommandHelpers rbx_core_code_for":{"type":"method","name":"rbx_core_code_for","children":[],"call":[" rbx_core_code_or_doc_for "]}," Pry Helpers CommandHelpers rvm_ruby?":{"type":"method","name":"rvm_ruby?","children":[],"call":["(send\n  (lvar :path) :=~\n  (regexp\n    (str \"\\\\.rvm\")\n    (regopt))) ! ! ","(send\n  (lvar :path) :=~\n  (regexp\n    (str \"\\\\.rvm\")\n    (regopt))) ! ","path =~ "]}," Pry Helpers CommandHelpers rbx_core?":{"type":"method","name":"rbx_core?","children":[],"call":["meth source_location first start_with? ","meth source_location first ","meth source_location ","RUBY_ENGINE  =~ "," is_core_rbx_path? "]}," Pry DefaultCommands trim_methods":{"type":"method","name":"trim_methods","children":[],"call":["Object  send ","options [] "," should_trim? "]}," Pry DefaultCommands start_line_syntax_for_editor":{"type":"method","name":"start_line_syntax_for_editor","children":[],"call":["RUBY_PLATFORM  =~ ","Pry  editor ","file_name gsub! ","file_name gsub ","file_name gsub  gsub! ","file_name gsub  gsub "]}," Pry DefaultCommands invoke_editor":{"type":"method","name":"invoke_editor","children":[],"call":[" run "," start_line_syntax_for_editor ","Pry  editor ","Pry  editor call ","Pry  editor respond_to? "]}," Pry DefaultCommands one_index_range_or_number":{"type":"method","name":"one_index_range_or_number","children":[],"call":[" one_index_number "," one_index_range "]}," Pry DefaultCommands one_index_range":{"type":"method","name":"one_index_range","children":[],"call":["Range  new "," one_index_number ","range end ","range begin "]}," Pry DefaultCommands one_index_number":{"type":"method","name":"one_index_number","children":[],"call":["line_number < ","line_number - ","line_number > "]}," Pry DefaultCommands signature_for":{"type":"method","name":"signature_for","children":[],"call":["param_strings join ","meth name ","param_strings << ","meth parameters each ","meth parameters ","args join ","method name ","args []= ","args [] ","method arity < ","method arity ","(irange\n  (int 1)\n  (send\n    (send\n      (lvar :method) :arity) :abs)) map ","method arity abs ","arr << ","name to_s ","arr size + ","arr size ","type == ","method parameters inject ","method parameters ","method respond_to? "]}," Pry CommandProcessor convert_to_regex":{"type":"method","name":"convert_to_regex","children":[],"call":["Regexp  escape "]}," Pry CommandContext text":{"type":"method","name":"text","children":[],"call":[]}," Pry WrappedModule process_doc":{"type":"method","name":"process_doc","children":[],"call":[" process_comment_markup "," strip_leading_hash_and_whitespace_from_ruby_comments "]}," Pry WrappedModule safe_send":{"type":"method","name":"safe_send","children":[],"call":["(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method ","Module  === "]}," Pry WrappedModule all_from_common":{"type":"method","name":"all_from_common","children":[],"call":["(send\n  (array\n    (str \"public\")\n    (str \"protected\")\n    (str \"private\")) :map) flatten ","Pry Method  new ","visibility to_sym "," safe_send ","(send\n  (send nil :safe_send\n    (lvar :mod)\n    (dsym\n      (begin\n        (lvar :visibility))\n      (str \"_\")\n      (begin\n        (lvar :method_type))\n      (str \"s\"))\n    (false)) :select) map "," safe_send owner == "," safe_send owner ","method_type == "," safe_send select ","(str \"public\") map "]}," Pry RbxMethod core_doc":{"type":"method","name":"core_doc","children":[],"call":["MethodSource  comment_helper "," source_location "," core_path_line "]}," Pry RbxMethod core_code":{"type":"method","name":"core_code","children":[],"call":["MethodSource  source_helper "," source_location "," core_path_line "]}," Pry handle_read_errors":{"type":"method","name":"handle_read_errors","children":[],"call":[" throw "," puts "," input ","exception_count < "," output puts ","e backtrace "," output ","e message "," raise "," input= "," input_stack pop "," input_stack ","should_retry ! ","Pry  config input ","Pry  config "," input_stack empty? "]}," Pry should_force_encoding?":{"type":"method","name":"should_force_encoding?","children":[],"call":["val encoding != ","eval_string encoding ","val encoding ","val respond_to? ","eval_string empty? "]}," Pry inject_sticky_locals":{"type":"method","name":"inject_sticky_locals","children":[],"call":[" inject_local "," sticky_locals each_pair "," sticky_locals "]}," Pry current_context":{"type":"method","name":"current_context","children":[],"call":[" binding_stack last "," binding_stack "]}," Pry hooks=":{"type":"method","name":"hooks=","children":[],"call":["Pry Hooks  from_hash "," warn ","v is_a? "]}," __pry__":{"type":"method","name":"__pry__","children":[],"call":[]}," Pry fix_coderay_colors":{"type":"method","name":"fix_coderay_colors","children":[],"call":[]}," Pry load_local_rc":{"type":"method","name":"load_local_rc","children":[],"call":[]}," Pry WrappedModule Candidate adjusted_source_location":{"type":"method","name":"adjusted_source_location","children":[],"call":["RbxPath  convert_path_to_full ","RbxPath  is_core_path? "]}," Pry Method doc_for_pry_method":{"type":"method","name":"doc_for_pry_method","children":[],"call":["buffer replace ","buffer << ","line lstrip ","line =~ ","Pry  line_buffer [] each ","Pry  line_buffer [] ","line_num - ","Pry  line_buffer "," source_location ","line - "]}," Pry Method source_location":{"type":"method","name":"source_location","children":[],"call":["@method source_location ","RbxPath  convert_path_to_full ","Helpers BaseHelpers  rbx? "," rbx? "]}," Pry Method singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," Pry Method safe_send":{"type":"method","name":"safe_send","children":[],"call":["(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (const nil :Module) :===\n    (lvar :obj))\n  (const nil :Module)\n  (const nil :Object)) instance_method ","Module  === ","(if\n  (send\n    (const nil :Class) :===\n    (lvar :obj))\n  (const nil :Class)\n  (const nil :Object)) instance_method bind call ","(if\n  (send\n    (const nil :Class) :===\n    (lvar :obj))\n  (const nil :Class)\n  (const nil :Object)) instance_method bind ","(if\n  (send\n    (const nil :Class) :===\n    (lvar :obj))\n  (const nil :Class)\n  (const nil :Object)) instance_method ","Class  === "]}," Pry Indent screen_size":{"type":"method","name":"screen_size","children":[],"call":["cols to_i > ","cols to_i ","(and\n  (and\n    (send\n      (gvar :$stdout) :tty?)\n    (send\n      (gvar :$stdout) :respond_to?\n      (sym :winsize)))\n  (send\n    (gvar :$stdout) :winsize)) detect ","ENV  [] =~ ","ENV  [] ","Readline  get_screen_size ","Readline  respond_to? ","$stdout winsize ","$stdout respond_to? ","$stdout tty? "]}," Pry Hooks []=":{"type":"method","name":"[]=","children":[],"call":[" add_hook "," warn "]}," Pry Hooks []":{"type":"method","name":"[]","children":[],"call":[" get_hook "," warn "]}," Pry History write_to_file":{"type":"method","name":"write_to_file","children":[],"call":[" warn ","f puts ","lines each ","File  open ","File  expand_path ","Pry  config history file ","Pry  config history ","Pry  config ","File  writable? "]}," Pry History save":{"type":"method","name":"save","children":[],"call":["history_to_save length ","@history length ","@saver call ","@history [] ","f puts ","history_to_save each ","File  open ","@history []  length ","@history []  each "]}," Pry Helpers DocumentationHelpers strip_leading_hash_and_whitespace_from_ruby_comments":{"type":"method","name":"strip_leading_hash_and_whitespace_from_ruby_comments","children":[],"call":[" strip_leading_whitespace ","comment gsub! ","comment dup ","comment dup  gsub! ","comment dup  dup "]}," Pry Helpers CommandHelpers editor_name":{"type":"method","name":"editor_name","children":[],"call":["File  basename split first ","File  basename split ","File  basename ","Pry  config editor ","Pry  config "]}," Pry Helpers CommandHelpers start_line_syntax_for_editor":{"type":"method","name":"start_line_syntax_for_editor","children":[],"call":[" windows? "," editor_name ","line_number <= ","file_name gsub ","RUBY_PLATFORM  =~ ","Pry  editor ","Pry  config editor ","Pry  config ","file_name gsub  gsub "]}," Pry Helpers CommandHelpers blocking_flag_for_editor":{"type":"method","name":"blocking_flag_for_editor","children":[],"call":[" editor_name ","Pry  config editor ","Pry  config "]}," Pry Helpers CommandHelpers invoke_editor":{"type":"method","name":"invoke_editor","children":[],"call":[" raise ","$? exitstatus "," system ","Process  waitpid ","Spoon  spawnp ","editor_invocation split "," require "," jruby? "," start_line_syntax_for_editor "," blocking_flag_for_editor ","Pry  config editor ","Pry  config ","Pry  config editor call ","(lvar :file) [] ","Pry  config editor arity ","Pry  config editor respond_to? "," run ","Pry  editor ","Pry  editor call ","Pry  editor respond_to? ","Process  waitSpoon  spawnp  ","Pry  config editor call  split ","Pry  editor call  split "]}," Pry Helpers CommandHelpers file_and_line_from_binding":{"type":"method","name":"file_and_line_from_binding","children":[],"call":["target instance_variable_get to_s ","target instance_variable_get ","target instance_variable_set ","RbxPath  convert_path_to_full ","target variables method file to_s ","target variables method file ","target variables method ","target variables ","target instance_variable_defined? ! ","target instance_variable_defined? "," rbx? ","target eval ","target variables method target instance_variable_get to_s  to_s ","target variables method target eval  to_s ","target variables method target instance_variable_get to_s  ","target variables method target eval  "]}," Pry Helpers BaseHelpers mri_18?":{"type":"method","name":"mri_18?","children":[],"call":["RbConfig CONFIG  [] == ","RbConfig CONFIG  [] ","RUBY_VERSION  =~ "]}," Pry DefaultCommands window_size":{"type":"method","name":"window_size","children":[],"call":[" args first to_i "," args first "," args ","Pry  config default_window_size ","Pry  config "," args empty? "]}," Pry DefaultCommands code?":{"type":"method","name":"code?","children":[],"call":[" code ! ! "," code ! "," code "]}," Pry DefaultCommands show_method?":{"type":"method","name":"show_method?","children":[],"call":["@method source_range include? ","@method source_range ","@method source_file == ","@method source_file ","@method source_range count < ","@method source_range count ","@method source? "," args empty? "," args ","@method instance_of? ! ","@method instance_of? "]}," Pry DefaultCommands process":{"type":"method","name":"process","children":[],"call":[" output puts "," output "," code with_line_numbers with_marker "," code with_line_numbers "," code "," location "," text bold "," text "," set_file_and_dir_locals ","Pry  view_clip "," target_self "," target_self == ","TOPLEVEL_BINDING  eval "," internal_binding? "," target "," code? ! "," code? "," opts quiet? "," opts "," process_pop_and_return "," _pry_ run_command "," arg_string "," _pry_ "," _pry_ binding_stack one? "," _pry_ binding_stack "," output_section "," format_locals ","grep [] "," target eval "," format_variables ","Pry Method  safe_send ","obj class ","Module  === "," format_methods ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new ","m name =~ ","m name ","m owner == ","m owner "," all_methods select "," all_methods ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar :klass))\n  (array)) select ","methods [] "," resolution_order take_while reverse each "," resolution_order take_while reverse "," resolution_order take_while "," below_ceiling "," resolution_order "," all_methods group_by "," format_constants ","(send\n  (send\n    (lvar :mod) :ancestors) :-\n  (array\n    (lvar :mod))) map flatten ","(send\n  (send\n    (lvar :mod) :ancestors) :-\n  (array\n    (lvar :mod))) map ","mod ancestors - ","mod ancestors "," opts present? ","mod constants "," format_globals "," raise ","(send\n  (const nil :Module) :===\n  (lvar :obj)) ! "," args empty? ! "," args empty? "," args ","x grep "," lambda ","Regexp  new "," opts [] ","has_opts ! "," args join ","e name ","ri display_names ","RDoc RI PryDriver  new ","RDoc RI  const_set ","RDoc Markup ToAnsi  new ","@formatter_klass new ","Pry Helpers BaseHelpers  lesspipe ","subclass class_eval ","Class  new "," require "," unindent ","meth source_location join ","meth source_location ","meth signature ","meth arity ","meth is_a? ","meth visibility ","meth owner ","meth name "," method_object "," render_output ","code between with_line_numbers ","code between ","code code_type= ","handler call "," method "," save_file "," file_name= ","File  expand_path "," args first "," process_display "," process_replay "," process_clear "," process_save "," command_set valid_command? ! "," command_set valid_command? "," command_set ","@history select ","@history between ","@history take_lines ","(or\n  (send\n    (send nil :opts) :[]\n    (sym :tail))\n  (int 10)) -@ ","@history grep ","Pry  Code ","Pry  history to_a ","Pry  history "," display_search "," display_index "," command_groups "," perform_gist "," perform_clipboard "," content =~ "," content ","Jist  login! ","versions join "," text default "," text green ","spec version to_s ","spec version "," text bright_green ","index == ","specs each_with_index map ","specs each_with_index ","Gem Version  new <=> ","Gem Version  new ","a version ","b version ","specs sort! ","gems each ","gemname =~ ","Gem  source_index gems values group_by select ","Gem  source_index gems values group_by ","Gem  source_index gems values ","Gem  source_index gems ","Gem  source_index ","(send\n  (const\n    (const nil :Gem) :Specification) :select) group_by ","spec name =~ ","spec name ","Gem Specification  select ","Gem Specification  respond_to? ","Regexp  compile ","Dir  pwd ","Dir  chdir ","spec full_gem_path ","(send\n  (lvar :specs) :sort) first ","specs sort ","Gem  source_index find_name ","Gem Specification  find_all_by_name ","Gem  refresh ","installer install ","Gem DependencyInstaller  new ","Gem  user_dir ","Gem  dir ","File  writable? "," print_matches ","matches empty? "," name_search "," content_search "," opts content? "," target_self class "," target_self is_a? ","klass class ","klass is_a? ! ","klass is_a? "," args [] "," Regexp  new "," args size < "," args size "," run ","Pry Code  complete_expression? "," eval_string "," perform_play "," eval_string replace ","input_array join ","input_array []= "," arg_string + ","input_array insert "," arg_string [] + "," arg_string [] "," Array first "," Array "," arg_string start_with? ","input_array slice! "," arg_string == ","input_array size - ","input_array size "," one_index_number ","end_line_number to_i ","start_line_number to_i ","end_line_number ! "," eval_string each_line to_a "," eval_string each_line ","replacement_line ! "," eval_string empty? "," process_file ","File  exist? ! ","File  exist? "," process_patch ","@method dynamically_defined? ","Pry  config editor ! ","Pry  config editor ","Pry  config "," process_remote_edit "," process_local_edit "," opts present? ! ","(send\n  (send nil :opts) :present?\n  (sym :ex)) count > ","(send\n  (send nil :opts) :present?\n  (sym :ex)) count ","Code  new with_line_numbers ","Code  new "," captures [] "," captures "," stagger_output "," help "," captures [] =~ ","Code  new with_line_numbers to_s "," _pry_ last_exception backtrace first ","(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max * ","(send\n  (send\n    (send nil :captures) :[]\n    (int 0)) :size) max "," captures [] size "," _pry_ last_exception backtrace "," _pry_ last_exception "," opts verbose? "," _pry_ last_exception class "," _pry_ backtrace join "," _pry_ backtrace ","gems_to_install each ","Gem DependencyInstaller  new install "," gem_installed? ","command options [] ","command options ","command name "," command_dependencies_met? "," find_command "," _pry_ commands import "," _pry_ commands "," command_set nil? "," _pry_ binding_stack= ","e inspect "," arg_string chomp "," state old_stack= "," state ","stack push ","Pry  binding_for ","stack last eval ","stack last ","stack dup ","i == "," state old_stack ","old_stack empty? ","stack pop ","path first == ","path first ","stack size == ","stack size ","stack first ","context chomp ","path each_with_index ","path empty? "," _pry_ binding_stack dup ","a =~ "," arg_string split delete_if "," arg_string split ","klass __send__ ","obj __send__ ","(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by ","method visibility == ","method visibility ","Code  from_method with_line_numbers "," use_line_numbers? ","Code  from_method "," start_line "," method_object visibility "," method_object owner "," make_header "," method_object source "," _pry_ complete_expression? "," process_comment_markup ","meth source_type ","meth doc ","meth doc empty? ","meth doc nil? "," process_exit_all ","path each "," load ","Pry  config disable_auto_reload ! ","Pry  config disable_auto_reload "," silence_warnings "," invoke_editor ","meth source_line ","meth source_file ","meth source_type == ","Pry  new rep ","Pry  new ","StringIO  new ","File  read ","f path ","Pry  binding_for eval "," with_method_transaction ","meth alias? ","f flush ","f puts ","lines join "," temp_file ","lines []= ","lines [] =~ ","lines [] ","meth original_name ","meth source lines to_a ","meth source lines ","meth source ","meth dynamically_defined? ","CodeRay  scan term ","CodeRay  scan ","Pry  color "," method_option "," doc_option "," file_option "," in_option "," content= "," process_input "," process_method "," command_option ","code with_line_numbers with_marker ","code with_line_numbers ","code empty? ! ","code empty? ","@method name_with_owner ","Pry Code  from_file around ","Pry Code  from_file ","Pry Code  from_file between "," show_method? "," invalid_file? "," args first to_i ","@method source_range end ","@method source_range ","@method source_range begin ","@method source_file "," Code  from_method with_line_numbers  with_line_numbers with_marker "," meth source  with_line_numbers with_marker "," CodeRay  scan term  with_line_numbers with_marker "," Pry Code  from_file around  with_line_numbers with_marker "," Pry Code  from_file between  with_line_numbers with_marker "," code with_line_numbers with_ target eval  "," Code  from_method with_line_numbers  with_line_numbers "," meth source  with_line_numbers "," CodeRay  scan term  with_line_numbers "," Pry Code  from_file around  with_line_numbers "," Pry Code  from_file between  with_line_numbers "," Code  from_method with_line_numbers  "," meth source  "," CodeRay  scan term  "," Pry Code  from_file around  "," Pry Code  from_file between  ","  target eval _file_and_dir_locals "," set_ target eval _and_dir_locals "," set_@method source_file _and_dir_locals "," Code  from_method with_line_numbers ? ! "," meth source ? ! "," CodeRay  scan term ? ! "," Pry Code  from_file around ? ! "," Pry Code  from_file between ? ! "," Code  from_method with_line_numbers ? "," meth source ? "," CodeRay  scan term ? "," Pry Code  from_file around ? "," Pry Code  from_file between ? "," _pry_ run_ find_command  "," arg_stRDoc RI PryDriver  new ng "," _pry_ binding_ _pry_ binding_stack dup  one? "," _pry_ binding_ _pry_ binding_stack dup  "," format_vaRDoc RI PryDriver  new ables "," target eval  class "," target_self  class "," format_ all_methods group_by  "," format_(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by  "," format_ method_object ods ","Pry WrappedModule  new  method_object od_prefix "," all_ all_methods group_by  select "," all_(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by  select "," all_ method_object ods select "," all_ all_methods group_by  "," all_(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by  "," all_ method_object ods ","(or\n  (send\n    (lvar : all_methods group_by ) :[]\n    (lvar :klass))\n  (array)) select ","(or\n  (send\n    (lvar :(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by ) :[]\n    (lvar :klass))\n  (array)) select ","(or\n  (send\n    (lvar : method_object ods) :[]\n    (lvar :klass))\n  (array)) select ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar : target_self class ))\n  (array)) select ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar : target_self ))\n  (array)) select ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar :klass class ))\n  (array)) select ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar : target eval ))\n  (array)) select "," all_methods group_by  [] ","(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by  [] "," method_object ods [] "," all_ all_methods group_by  group_by "," all_(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by  group_by "," all_ method_object ods group_by "," format_mod constants  ","mod mod constants  ","(send\n  (const nil :Module) :===\n  (lvar : target eval )) ! ","(send\n  (const nil :Module) :===\n  (lvar : target_self )) ! ","RDoc RI PryDriver  new  display_names ","RDoc RI PryDRDoc RI PryDriver  new ver  new ","RDoc RI  const_ target eval  ","@formatter_ target_self class  new ","@formatter_ target_self  new ","@formatter_klass class  new ","@formatter_ target eval  new ","Class  new  class_eval "," method_object  source_location join "," method_object  source_location "," method_object  signature ","meth aRDoc RI PryDriver  new ty "," method_object  arity "," method_object  is_a? "," method_object  visibility "," method_object  owner "," method_object  name "," method_ target eval ect "," method_ target_self ect ","  method_object od_object ","Code  from_method with_line_numbers  between with_line_numbers ","meth source  between with_line_numbers ","CodeRay  scan term  between with_line_numbers ","Pry Code  from_file around  between with_line_numbers ","Pry Code  from_file between  between with_line_numbers ","Code  from_method with_line_numbers  between ","meth source  between ","CodeRay  scan term  between ","Pry Code  from_file around  between ","Pry Code  from_file between  between ","Code  from_method with_line_numbers  Code  from_method with_line_numbers _type= ","meth source  meth source _type= ","CodeRay  scan term  CodeRay  scan term _type= ","Pry Code  from_file around  Pry Code  from_file around _type= ","Pry Code  from_file between  Pry Code  from_file between _type= ","  method_object od "," save_ target eval  "," save_@method source_file  ","  target eval _name= "," @method source_file _name= ","File  expand_ arg_string split  ","  find_command _set valid_ find_command ? ! "," command_ target eval  valid_command? ! ","  find_command _set valid_ find_command ? "," command_ target eval  valid_command? ","  find_command _set "," command_ target eval  ","@history grep  select ","@history between  select ","Pry  Code  select ","@history grep  between ","@history between  between ","Pry  Code  between ","@history grep  take_lines ","@history between  take_lines ","Pry  Code  take_lines ","@history take_meth source lines to_a  ","@history grep  grep ","@history between  grep ","Pry  Code  grep ","  find_command _groups ","(send\n  (lvar :specs) :sort) first  version to_s ","(send\n  (lvar :specs) :sort) first  version "," text bRDoc RI PryDriver  new ght_green ","(send\n  (lvar :specs) :sort) first s each_with_index map ","Gem  source_index find_name  each_with_index map ","Gem Specification  find_all_by_name  each_with_index map ","(send\n  (lvar :specs) :sort) first s each_with_index ","Gem  source_index find_name  each_with_index ","Gem Specification  find_all_by_name  each_with_index ","(send\n  (lvar :specs) :sort) first s sort! ","Gem  source_index find_name  sort! ","Gem Specification  find_all_by_name  sort! ","(send\n  (const\n    (const nil :Gem) :Specification) :select) group_by  each ","Gem  source_index (send\n  (const\n    (const nil :Gem) :Specification) :select) group_by  values group_by select ","Gem  source_index (send\n  (const\n    (const nil :Gem) :Specification) :select) group_by  values group_by ","Gem  source_index (send\n  (const\n    (const nil :Gem) :Specification) :select) group_by  values ","Gem  source_index (send\n  (const\n    (const nil :Gem) :Specification) :select) group_by  ","(send\n  (lvar :specs) :sort) first  name =~ ","(send\n  (lvar :specs) :sort) first  name ","(send\n  (lvar :specs) :sort) first  full_gem_path ","spec full_gem_ arg_string split  ","(send\n  (lvar :(send\n  (lvar :specs) :sort) first s) :sort) first ","(send\n  (lvar :Gem  source_index find_name ) :sort) first ","(send\n  (lvar :Gem Specification  find_all_by_name ) :sort) first ","(send\n  (lvar :specs) :sort) first s sort ","Gem  source_index find_name  sort ","Gem Specification  find_all_by_name  sort ","Gem DependencyInstaller  new  install ","File  wRDoc RI PryDriver  new table? "," pRDoc RI PryDriver  new nt_matches "," print_ name_search  "," print_ content_search  "," name_search  empty? "," content_search  empty? "," target_self class  class ","klass class  class "," target_self class  is_a? ! "," target_self  is_a? ! ","klass class  is_a? ! "," target eval  is_a? ! "," target_self class  is_a? "," target_self  is_a? ","klass class  is_a? "," target eval  is_a? "," eval_stRDoc RI PryDriver  new ng "," eval_stRDoc RI PryDriver  new ng replace "," eval_string each_line to_a  join "," eval_string each_line to_a  []= "," arg_stRDoc RI PryDriver  new ng + "," eval_string each_line to_a  insert "," arg_stRDoc RI PryDriver  new ng [] + "," arg_stRDoc RI PryDriver  new ng [] "," arg_stRDoc RI PryDriver  new ng start_with? "," arg_string  target eval _with? "," arg_string @method source_range begin _with? "," eval_string each_line to_a  slice! "," arg_stRDoc RI PryDriver  new ng == "," eval_string each_line to_a  size - "," eval_string each_line to_a  size ","start_line_number to_i  to_i "," target eval _line_number to_i ","@method source_range begin _line_number to_i ","start_line_number to_i  ! "," eval_stRDoc RI PryDriver  new ng each_line to_a "," eval_stRDoc RI PryDriver  new ng each_line "," eval_stRDoc RI PryDriver  new ng empty? "," process_ target eval  "," process_@method source_file  ","@ method_object od dynamically_defined? "," method_object  dynamically_defined? ","(send\n  (const\n    (const nil :Gem) :Specification) :select) group_by _to_install each "," Array  each "," find_command  options [] "," find_command  options "," find_command  name ","  find_command _dependencies_met? "," find_ find_command  "," _pry_  find_command s import "," _pry_  find_command s ","  find_command _set nil? "," command_ target eval  nil? "," _pry_ binding_ _pry_ binding_stack dup = ","e in(send\n  (lvar :specs) :sort) first t "," arg_stRDoc RI PryDriver  new ng chomp "," state old_ _pry_ binding_stack dup = "," _pry_ binding_stack dup  push "," _pry_ binding_stack dup  last eval "," _pry_ binding_stack dup  last "," _pry_ binding_stack dup  dup "," state old_ _pry_ binding_stack dup  ","old_ _pry_ binding_stack dup  empty? "," _pry_ binding_stack dup  pop "," arg_string split  first == "," arg_string split  first "," _pry_ binding_stack dup  size == "," _pry_ binding_stack dup  size "," _pry_ binding_stack dup  first "," arg_string split  each_with_index "," arg_string split  empty? "," _pry_ binding_ _pry_ binding_stack dup  dup "," arg_stRDoc RI PryDriver  new ng split delete_if "," arg_stRDoc RI PryDriver  new ng split "," target_self class  __send__ "," target_self  __send__ ","klass class  __send__ "," target eval  __send__ ","(send\n  (send nil :all_ all_methods group_by \n    (lvar :obj)) :select) group_by ","(send\n  (send nil :all_(send\n  (send nil :all_methods\n    (lvar :obj)) :select) group_by \n    (lvar :obj)) :select) group_by ","(send\n  (send nil :all_methods\n    (lvar : target eval )) :select) group_by ","(send\n  (send nil :all_methods\n    (lvar : target_self )) :select) group_by ","(send\n  (send nil :all_ method_object ods\n    (lvar :obj)) :select) group_by "," method_object od visibility == "," method_object od visibility ","Code  from_ method_object od with_line_numbers ","Code  from_ method_object od ","  target eval _line "," @method source_range begin _line "," method_ target eval ect visibility "," method_ target_self ect visibility ","  method_object od_object visibility "," method_ target eval ect owner "," method_ target_self ect owner ","  method_object od_object owner "," method_ target eval ect source "," method_ target_self ect source ","  method_object od_object source "," method_object  source_type "," method_object  doc ","meth Code  new with_line_numbers  ","meth  process_comment_markup  "," method_object  doc empty? ","meth Code  new with_line_numbers  empty? ","meth  process_comment_markup  empty? "," method_object  doc nil? ","meth Code  new with_line_numbers  nil? ","meth  process_comment_markup  nil? "," arg_string split  each "," method_object  source_line "," method_object  source_file ","meth source_ target eval  ","meth source_@method source_file  "," method_object  source_type == ","StRDoc RI PryDriver  new ngIO  new ","f  arg_string split  "," with_ method_object od_transaction "," method_object  alias? ","meth source lines to_a  join "," temp_ target eval  "," temp_@method source_file  ","meth source lines to_a  []= ","meth source lines to_a  [] =~ ","meth source lines to_a  [] ","meth oRDoc RI PryDriver  new ginal_name "," method_object  original_name ","meth meth original_name  "," method_object  source lines to_a ","meth source meth source lines to_a  to_a "," method_object  source lines ","meth source meth source lines to_a  "," method_object  source ","  method_object od_option "," Code  new with_line_numbers _option ","  process_comment_markup _option ","  target eval _option "," @method source_file _option "," process_ method_object od ","  find_command _option ","Code  from_method with_line_numbers  with_line_numbers with_marker ","meth source  with_line_numbers with_marker ","CodeRay  scan term  with_line_numbers with_marker ","Pry Code  from_file around  with_line_numbers with_marker ","Pry Code  from_file between  with_line_numbers with_marker ","code with_line_numbers with_ target eval  ","Code  from_method with_line_numbers  with_line_numbers ","meth source  with_line_numbers ","CodeRay  scan term  with_line_numbers ","Pry Code  from_file around  with_line_numbers ","Pry Code  from_file between  with_line_numbers ","Code  from_method with_line_numbers  empty? ! ","meth source  empty? ! ","CodeRay  scan term  empty? ! ","Pry Code  from_file around  empty? ! ","Pry Code  from_file between  empty? ! ","Code  from_method with_line_numbers  empty? ","meth source  empty? ","CodeRay  scan term  empty? ","Pry Code  from_file around  empty? ","Pry Code  from_file between  empty? ","@ method_object od name_with_owner "," method_object  name_with_owner ","Pry Code  from_ target eval  around ","Pry Code  from_@method source_file  around ","Pry Code  from_ target eval  ","Pry Code  from_@method source_file  ","Pry Code  from_ target eval  between ","Pry Code  from_@method source_file  between "," show_ method_object od? "," invalid_ target eval ? "," invalid_@method source_file ? ","@ method_object od source_range end "," method_object  source_range end ","@ method_object od source_range "," method_object  source_range ","@ method_object od source_range begin "," method_object  source_range begin ","@ method_object od source_file ","@method source_ target eval  ","@method source_@method source_file  "]}," Pry DefaultCommands location":{"type":"method","name":"location","children":[],"call":["@method name_with_owner ","@method source_line "," show_method? "]}," Pry DefaultCommands code":{"type":"method","name":"code","children":[],"call":["Pry Code  from_file around "," window_size ","Pry Code  from_file ","Pry Code  from_method "," show_method? "]}," Pry DefaultCommands options":{"type":"method","name":"options","children":[],"call":["opt on "," jruby? ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n + + ","Show constants, highlighting classes (in blue), and exceptions (in purple).\n + ","  * ","opt banner "," unindent "," method_options "," content << "," content "," Array each "," Array "," _pry_ input_array [] "," _pry_ input_array "," _pry_ ","Pry  config gist inspecter call "," _pry_ output_array [] "," _pry_ output_array ","Pry  config gist inspecter ","Pry  config gist ","Pry  config ","range each "," convert_to_range ","File  read ","File  expand_path ","block source ","Pry Method  new ","command block "," find_command ","mod source ","Pry WrappedModule  from_str "," target ","meth source "," get_method_or_raise "," comment_expression_result_for_gist ","code !~ ","code != ","index + ","range first "," Array each_with_index "," filename= "," content << << ","h [] join ","h [] "," one_index_range ","Pry  history to_a ","Pry  history "," raise "," target eval ","mod source_file ","block source_file ","meth source_file + ","meth source_file "," process_comment_markup ","meth doc "," text no_color "," text ","opti on "," find_command block "," code_type= "," code_type ","meth source_type "," text bold "," input_ranges << "," absolute_index_range "," _pry_ input_array length "," input_ranges ","SPry  history to_a ow constants, Pry  history to_a igPry  history to_a ligPry  history to_a ting classes (in blue), and exceptions (in purple).\n + + ","SPry  history to_a ow constants, Pry  history to_a igPry  history to_a ligPry  history to_a ting classes (in blue), and exceptions (in purple).\n + ","  get_method_or_raise od_options "," metPry  history to_a od_options "," Array eacPry  history to_a  "," convert_to_range  each ","range eacPry  history to_a  "," convert_to_ convert_to_range  ","File  expand_patPry  history to_a  ","Pry Method  new  source ","Pry MetPry  history to_a od  new ","command Pry Method  new  "," find_command  block "," find_ find_command  ","Pry WrappedModule  from_str  source "," get_method_or_raise  source ","metPry  history to_a  source "," get_ get_method_or_raise od_or_raise "," get_metPry  history to_a od_or_raise "," convert_to_range  first "," Array eacPry  history to_a _witPry  history to_a _index ","Pry  history to_a  [] join ","Pry  history to_a  [] "," one_index_ convert_to_range  ","Pry  Pry  history to_a istory to_a ","Pry  Pry  history to_a istory ","Pry WrappedModule  from_str  source_file ","Pry Method  new  source_file "," get_method_or_raise  source_file + ","metPry  history to_a  source_file + "," get_method_or_raise  source_file ","metPry  history to_a  source_file "," get_method_or_raise  doc ","metPry  history to_a  doc "," find_command Pry Method  new  "," find_ find_command  block "," get_method_or_raise  source_type ","metPry  history to_a  source_type "," input_ convert_to_range s << "," absolute_index_ convert_to_range  "," _pry_ input_array lengtPry  history to_a  "," input_ convert_to_range s "]}," Pry DefaultCommands setup":{"type":"method","name":"setup","children":[],"call":[" target eval "," target ","Pry Method  from_binding "," require "," mri_18? "," content= "," filename= "," code_type= "]}," Pry DefaultCommands process_pop_and_return":{"type":"method","name":"process_pop_and_return","children":[],"call":[" target eval "," arg_string "," target "," arg_string empty? "," _pry_ binding_stack pop eval "," _pry_ binding_stack pop "," _pry_ binding_stack "," _pry_ "]}," Pry DefaultCommands color":{"type":"method","name":"color","children":[],"call":[" text send ","Pry  config ls send ","Pry  config ls ","Pry  config "," text "]}," Pry DefaultCommands output_section":{"type":"method","name":"output_section","children":[],"call":[" output puts ","body compact join ","Pry  config ls separator ","Pry  config ls ","Pry  config ","body compact "," text bold "," color "," text "," output ","body compact empty? "]}," Pry DefaultCommands format_locals":{"type":"method","name":"format_locals","children":[],"call":[" color "," _pry_ sticky_locals include? ","name to_sym "," _pry_ sticky_locals "," _pry_ ","locals sort_by map ","locals sort_by "," _pry_ special_locals include? "," _pry_ special_locals "]}," Pry DefaultCommands format_globals":{"type":"method","name":"format_globals","children":[],"call":[" color ","BUILTIN_GLOBALS  include? ","PSEUDO_GLOBALS  include? ","globals sort_by map ","globals sort_by "]}," Pry DefaultCommands format_constants":{"type":"method","name":"format_constants","children":[],"call":[" color ","Module  === ","mod const_get ","const < ","mod autoload? ! ","mod autoload? ","constants sort_by map ","constants sort_by "]}," Pry DefaultCommands format_variables":{"type":"method","name":"format_variables","children":[],"call":[" color ","vars sort_by map ","vars sort_by "]}," Pry DefaultCommands format_methods":{"type":"method","name":"format_methods","children":[],"call":[" color ","method name ","method visibility == ","method visibility ","method name == ","methods sort_by map ","methods sort_by "]}," Pry DefaultCommands below_ceiling":{"type":"method","name":"below_ceiling","children":[],"call":["ceiling include? ! ","ceiling include? "," lambda ","Pry  config ls ceiling dup ","Pry  config ls ceiling ","Pry  config ls ","Pry  config "," opts present? "," opts ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) + ","obj class ancestors [] ","obj class ancestors ","obj class ","obj ancestors [] ","obj ancestors ","opts v? ","(if\n  (send\n    (lvar :opts) :M?)\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) + ","opts M? ","opts q? ","opts present? ","(if\n  (send\n    (lvar :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) + ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ! ","(if\n  (send\n    (lvar :opts) :M?)\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ! ","(if\n  (send\n    (lvar :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ! ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ","(if\n  (send\n    (lvar :opts) :M?)\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ","(if\n  (send\n    (lvar :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ","Pry  config ls (if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  dup ","Pry  config ls (if\n  (send\n    (lvar :opts) :M?)\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  dup ","Pry  config ls (if\n  (send\n    (lvar :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  dup ","Pry  config ls (if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  ","Pry  config ls (if\n  (send\n    (lvar :opts) :M?)\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  ","Pry  config ls (if\n  (send\n    (lvar :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  "]}," Pry DefaultCommands resolution_order":{"type":"method","name":"resolution_order","children":[],"call":["Pry Method  resolution_order ","Pry Method  instance_resolution_order "," opts present? "," opts ","opts M? ","opts present? "]}," Pry DefaultCommands rubbishness":{"type":"method","name":"rubbishness","children":[],"call":["(send\n  (send\n    (lvar :name) :each_char) :map) inject + ","name size / ","name size ","(send\n  (send\n    (lvar :name) :each_char) :map) inject ","name each_char map ","name each_char "]}," Pry DefaultCommands trim_jruby_aliases":{"type":"method","name":"trim_jruby_aliases","children":[],"call":["(send\n  (lvar :grouped) :map) flatten ","found << ","(send\n  (lvar :found) :any?) ! ","x == ","found any? ","values select "," rubbishness ","m name ","values sort_by ","grouped map ","m name sub gsub downcase ","m name sub gsub ","m name sub ","methods group_by "]}," Pry DefaultCommands all_methods":{"type":"method","name":"all_methods","children":[],"call":["method visibility == ","method visibility "," opts present? "," opts ","methods select "," trim_jruby_aliases "," opts present? ! "," jruby? ","Pry Method  all_from_obj ","Pry Method  all_from_class ","opts M? ","opts present? "," trim_jruby_aliases  select ","Pry Method  all_from_obj  select ","Pry Method  all_from_class  select "]}," Pry DefaultCommands start_line":{"type":"method","name":"start_line","children":[],"call":[" method_object source_line "," method_object "," opts present? "," opts "," method_object source_line - "," method_object doc lines count "," method_object doc lines "," method_object doc "]}," Pry DefaultCommands use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry DefaultCommands all_modules":{"type":"method","name":"all_modules","children":[],"call":["result << ","code lines count ","code lines ","Code  from_module with_line_numbers to_s ","Code  from_module with_line_numbers "," use_line_numbers? ","Code  from_module "," module_start_line ","candidate line ","candidate file ","mod number_of_candidates ","v + ","mod candidate ","mod number_of_candidates times ","mod name "," module_object ","doc << ","candidate doc "," module_object number_of_candidates "," module_object candidate "," module_object number_of_candidates times "," module_object name ","code << ","Code  new with_line_numbers to_s ","Code  new with_line_numbers ","Code  new ","mod source_for_candidate ","mod source_line_for_candidate ","mod source_file_for_candidate ","dc empty? ","mod doc_for_candidate ","Code  from_module with_line_numbers to_s  lines count ","Code  new with_line_numbers to_s  lines count ","Code  from_module with_line_numbers to_s  lines ","Code  new with_line_numbers to_s  lines ","Code  from_ module_object ule with_line_numbers to_s ","Code  from_ module_object ule with_line_numbers ","Code  from_ module_object ule ","  module_object ule_start_line ","mod candidate  line "," module_object candidate  line ","mod candidate  file "," module_object candidate  file ","mod number_of_mod candidate s ","mod number_of_ module_object candidate s "," module_object  number_of_candidates ","mod mod candidate  ","mod  module_object candidate  "," module_object  candidate ","mod number_of_mod candidate s times ","mod number_of_ module_object candidate s times "," module_object  number_of_candidates times "," module_object  name ","  module_object ule_object ","mod candidate  doc "," module_object candidate  doc "," module_object number_of_mod candidate s "," module_object number_of_ module_object candidate s ","  module_object ule_object number_of_candidates "," module_object mod candidate  "," module_object  module_object candidate  ","  module_object ule_object candidate "," module_object number_of_mod candidate s times "," module_object number_of_ module_object candidate s times ","  module_object ule_object number_of_candidates times ","  module_object ule_object name ","Code  from_module with_line_numbers to_s  << ","Code  new with_line_numbers to_s  << ","mod source_for_mod candidate  ","mod source_for_ module_object candidate  "," module_object  source_for_candidate ","mod source_line_for_mod candidate  ","mod source_line_for_ module_object candidate  "," module_object  source_line_for_candidate ","mod source_file_for_mod candidate  ","mod source_file_for_ module_object candidate  "," module_object  source_file_for_candidate ","mod doc_for_candidate  empty? ","mod doc_for_mod candidate  ","mod doc_for_ module_object candidate  "," module_object  doc_for_candidate "]}," Pry DefaultCommands normal_module":{"type":"method","name":"normal_module","children":[],"call":["result << ","code lines count ","code lines ","Pry Helpers Text  bold ","Code  from_module with_line_numbers to_s ","Code  from_module with_line_numbers "," use_line_numbers? ","Code  from_module "," module_start_line "," module_object "," set_file_and_dir_locals "," module_object candidate source_location "," module_object candidate "," attempt ","doc insert ","Code  new with_line_numbers to_s ","Code  new with_line_numbers ","Code  new ","doc << "," module_object candidate doc "," module_object yard_doc "," module_object yard_line "," module_object yard_file "," module_object yard_docs? ","code << ","mod source_location ","mod doc ","mod yard_docs? ! ","mod yard_docs? "," output puts "," output ","mod doc empty? ","mod source_file ","Code  from_module with_line_numbers to_s  lines count ","Code  from_module with_line_numbers to_s  lines ","Code  from_ module_object ule with_line_numbers to_s ","Code  from_ module_object ule with_line_numbers ","Code  from_ module_object ule "," module_ module_start_line  ","  module_object ule_start_line ","  module_object ule_object ","  module_object ule_object candidate source_location ","  module_object ule_object candidate ","Code  new with_line_numbers to_s  insert ","Code  new with_line_numbers to_s  << "," module_object candidate Code  new with_line_numbers to_s  ","  module_object ule_object candidate doc "," module_object yard_Code  new with_line_numbers to_s  ","  module_object ule_object yard_doc ","  module_object ule_object yard_line ","  module_object ule_object yard_file "," module_object yard_Code  new with_line_numbers to_s s? ","  module_object ule_object yard_docs? ","Code  from_module with_line_numbers to_s  << "," module_object  source_location ","mod Code  new with_line_numbers to_s  "," module_object  doc ","mod yard_Code  new with_line_numbers to_s s? ! "," module_object  yard_docs? ! ","mod yard_Code  new with_line_numbers to_s s? "," module_object  yard_docs? ","mod Code  new with_line_numbers to_s  empty? "," module_object  doc empty? "," module_object  source_file "]}," Pry DefaultCommands process_module":{"type":"method","name":"process_module","children":[],"call":[" normal_module "," all_modules "," opts present? "," opts "]}," Pry DefaultCommands process_method":{"type":"method","name":"process_method","children":[],"call":["code << ","Code  from_method with_line_numbers to_s ","Code  from_method with_line_numbers "," use_line_numbers? ","Code  from_method "," start_line "," method_object "," method_object visibility "," text bold "," text "," method_object owner "," make_header "," raise "," method_object source ","Code  new with_line_numbers to_s ","Code  new with_line_numbers ","Code  new "," output puts "," output "," method_object signature "," process_comment_markup "," method_object doc "," method_object doc empty? "," method_object doc nil? "," eval_string << "," Array join "," Array ","meth source each_line to_a [] ","meth source each_line to_a ","meth source each_line ","meth source "," eval_string "," opts present? "," opts "," one_index_range_or_number "," opts [] "," get_method_or_raise "," target ","meth signature ","meth visibility ","meth owner ","meth source_type ","meth doc ","meth doc empty? ","meth doc nil? ","Code  from_ get_method_or_raise od with_line_numbers to_s ","Code  from_ method_object od with_line_numbers to_s ","Code  from_ get_method_or_raise od with_line_numbers ","Code  from_ method_object od with_line_numbers ","Code  from_ get_method_or_raise od ","Code  from_ method_object od ","  get_method_or_raise od_object ","  method_object od_object ","  get_method_or_raise od_object visibility ","  method_object od_object visibility ","  get_method_or_raise od_object owner ","  method_object od_object owner ","  get_method_or_raise od_object source ","  method_object od_object source ","  get_method_or_raise od_object signature ","  method_object od_object signature "," method_object Code  new with_line_numbers to_s  "," method_object  process_comment_markup  ","  get_method_or_raise od_object doc ","  method_object od_object doc "," method_object Code  new with_line_numbers to_s  empty? "," method_object  process_comment_markup  empty? ","  get_method_or_raise od_object doc empty? ","  method_object od_object doc empty? "," method_object Code  new with_line_numbers to_s  nil? "," method_object  process_comment_markup  nil? ","  get_method_or_raise od_object doc nil? ","  method_object od_object doc nil? "," get_method_or_raise  source each_line to_a [] "," method_object  source each_line to_a [] "," get_method_or_raise  source each_line to_a "," method_object  source each_line to_a "," get_method_or_raise  source each_line "," method_object  source each_line "," get_method_or_raise  source "," method_object  source "," one_index_ one_index_range_or_number _or_number "," get_ get_method_or_raise od_or_raise "," get_ method_object od_or_raise "," get_method_or_raise  signature "," method_object  signature "," get_method_or_raise  visibility "," method_object  visibility "," get_method_or_raise  owner "," method_object  owner "," get_method_or_raise  source_type "," method_object  source_type ","meth Code  new with_line_numbers to_s  ","meth  process_comment_markup  "," get_method_or_raise  doc "," method_object  doc ","meth Code  new with_line_numbers to_s  empty? ","meth  process_comment_markup  empty? "," get_method_or_raise  doc empty? "," method_object  doc empty? ","meth Code  new with_line_numbers to_s  nil? ","meth  process_comment_markup  nil? "," get_method_or_raise  doc nil? "," method_object  doc nil? "]}," Pry DefaultCommands module_start_line":{"type":"method","name":"module_start_line","children":[],"call":["mod candidate line - ","mod candidate doc lines count ","mod candidate doc lines ","mod candidate doc ","mod candidate ","mod candidate line "," opts present? "," opts ","mod source_line_for_candidate - ","mod doc_for_candidate lines count ","mod doc_for_candidate lines ","mod doc_for_candidate ","mod source_line_for_candidate "]}," Pry DefaultCommands ModuleIntrospectionHelpers attempt":{"type":"method","name":"attempt","children":[],"call":[" raise ","rank > "," module_object number_of_candidates - "," module_object number_of_candidates "," module_object "]}," Pry DefaultCommands ModuleIntrospectionHelpers use_line_numbers?":{"type":"method","name":"use_line_numbers?","children":[],"call":[" opts present? "," opts "]}," Pry DefaultCommands ModuleIntrospectionHelpers module_start_line":{"type":"method","name":"module_start_line","children":[],"call":["mod candidate line ","mod candidate "," opts present? "," opts ","mod source_line_for_candidate "]}," Pry DefaultCommands ModuleIntrospectionHelpers process_alternatives":{"type":"method","name":"process_alternatives","children":[],"call":[" process_method "," process_module "," module_object= ","Pry  WrappedModule "," target_self class "," target_self "," target_self is_a? "," internal_binding? "," target "," args empty? "," args "," process_ target_self class ule "," process_ target_self ule ","  target_self class ule_object= ","  target_self ule_object= "]}," Pry DefaultCommands ModuleIntrospectionHelpers process":{"type":"method","name":"process","children":[],"call":[" render_output "," opts "," process_alternatives "," process_method "," method? "," process_module "," module? "]}," Pry DefaultCommands ModuleIntrospectionHelpers method?":{"type":"method","name":"method?","children":[],"call":[" method_object ! ! "," method_object ! "," method_object "]}," Pry DefaultCommands ModuleIntrospectionHelpers module?":{"type":"method","name":"module?","children":[],"call":[" module_object= ","Pry WrappedModule  from_str "," target "]}," Pry DefaultCommands detect_code_type_from_file":{"type":"method","name":"detect_code_type_from_file","children":[],"call":["File  basename split ","File  basename "]}," Pry DefaultCommands process_file":{"type":"method","name":"process_file","children":[],"call":["code around ","Pry  config default_window_size ","Pry  config ","line_num to_i ","code code_type= "," detect_code_type_from_file "," opts [] "," opts ","Pry Code  from_file "," set_file_and_dir_locals ","File  expand_path ","file_name split "," raise "," args shift "," args "," load "," silence_warnings "," invoke_editor ","Pry  config disable_auto_reload ! ","Pry  config disable_auto_reload "," opts present? ! "," opts present? "," extract_file_and_line "," eval_string << "," Array join "," Array ","text_array [] "," eval_string "," one_index_range_or_number ","File  readlines ","File  exists? ! ","File  exists? ","code around  around ","code around  code around _type= "," detect_code around _type_from_file ","File  expand_path  split "," args shift  split ","File  readlines  [] "," one_index_ one_index_range_or_number _or_number "]}," Pry DefaultCommands process_in":{"type":"method","name":"process_in","children":[],"call":["Pry  Code ","zipped_items first last ","zipped_items first ","contents << ","(send\n  (send\n    (const nil :Pry) :Code\n    (lvar :s)) :with_indentation\n  (int 2)) to_s ","Pry  Code with_indentation "," text bold ","i to_s "," text ","zipped_items each ","zipped_items length > ","zipped_items length "," raise ","s == ","s nil? ","normalized_range zip reject ","normalized_range zip "," _pry_ input_array [] "," _pry_ input_array "," _pry_ "," absolute_index_range "," _pry_ input_array length "," opts [] "," opts "," absolute_index_range  zip reject "," absolute_index_range  zip "]}," Pry DefaultCommands process_ex":{"type":"method","name":"process_ex","children":[],"call":["Pry Code  from_file between with_marker ","Pry Code  from_file between ","Pry Code  from_file "," unindent ","ex backtrace size - ","ex backtrace size ","ex backtrace "," text bold "," text ","ex message ","ex class ","ex_line + ","start_line < ","ex_line - "," set_file_and_dir_locals ","RbxPath  convert_path_to_full ","RbxPath  is_core_path? "," raise ","ex bt_source_location_for ","ex inc_bt_index ","ex bt_index= "," opts [] "," opts ","ex bt_index "," opts [] nil? "," _pry_ last_exception "," _pry_ ","Pry  config default_window_size ","Pry  config "," _pry_ last_exception  backtrace size - "," _pry_ last_exception  backtrace size "," _pry_ last_exception  backtrace "," t _pry_ last_exception t bold "," t _pry_ last_exception t "," _pry_ last_exception  message "," _pry_ last_exception  class "," _pry_ last_exception _line + ","ex_line -  < "," _pry_ last_exception _line - "," _pry_ last_exception  bt_source_location_for ","ex inc_ opts []  ","ex inc_ex bt_index  "," _pry_ last_exception  inc_bt_ind _pry_ last_exception  ","ex  opts [] = ","ex ex bt_index = "," _pry_ last_exception  bt_ind _pry_ last_exception = ","ex  opts []  ","ex ex bt_index  "," _pry_ last_exception  bt_ind _pry_ last_exception  "," _pry_ last_ _pry_ last_exception ception "]}," Pry DefaultCommands mode":{"type":"method","name":"mode","children":[],"call":[" opts present? "," opts "]}," Pry DefaultCommands save_file":{"type":"method","name":"save_file","children":[],"call":["f puts "," content "," restrict_to_lines "," opts [] "," opts "," opts present? ","File  open "," mode "," file_name "," raise "," content empty? "]}," Pry DefaultCommands convert_to_range":{"type":"method","name":"convert_to_range","children":[],"call":["n is_a? ! ","n is_a? "]}," Pry DefaultCommands process_replay":{"type":"method","name":"process_replay","children":[],"call":[" _pry_ input= ","StringIO  new ","@history raw "," _pry_ "," _pry_ input_stack push "," _pry_ input "," _pry_ input_stack ","@history between "," opts [] "," opts ","@history to_s "," _pry_ input_stack << ","@history between  raw ","@history between  between ","@history between  to_s "]}," Pry DefaultCommands process_clear":{"type":"method","name":"process_clear","children":[],"call":[" output puts "," output ","Pry  history clear ","Pry  history "]}," Pry DefaultCommands process_save":{"type":"method","name":"process_save","children":[],"call":[" output puts "," output ","f write ","@history raw ","File  open ","File  expand_path "," opts [] "," opts "," args first "," args "," raise ","@history between ","@history to_s ","@history between  raw ","@history between  between ","@history between  to_s "]}," Pry DefaultCommands process_display":{"type":"method","name":"process_display","children":[],"call":[" render_output "," opts ","@history with_line_numbers "," opts present? ","@history with_line_numbers  with_line_numbers "]}," Pry DefaultCommands group_sort_key":{"type":"method","name":"group_sort_key","children":[],"call":["(str \"Help\") index ","group_name gsub "]}," Pry DefaultCommands normalize":{"type":"method","name":"normalize","children":[],"call":["key downcase gsub ","key downcase "]}," Pry DefaultCommands search_hash":{"type":"method","name":"search_hash","children":[],"call":["matching []= "," normalize start_with? "," normalize "," normalize == ","key is_a? ","hash each_pair "]}," Pry DefaultCommands display_command":{"type":"method","name":"display_command","children":[],"call":[" stagger_output ","command new help ","command new "]}," Pry DefaultCommands display_search":{"type":"method","name":"display_search","children":[],"call":[" display_index ","filtered values "," display_command ","filtered values first ","filtered size == ","filtered size "," raise "," args first "," args ","filtered empty? "," search_hash "," visible_commands ","groups size > ","groups size "," command_groups "," command_set find_command_for_help "," command_set "," search_hash  values "," display_ command_set find_command_for_help  "," search_hash  values first "," search_hash  size == "," search_hash  size "," search_hash  empty? "," visible_ command_set find_command_for_help s "," search_hash  size > "," command_ search_hash  ","  command_set find_command_for_help _groups ","  command_set find_command_for_help _set find_ command_set find_command_for_help _for_help ","  command_set find_command_for_help _set "]}," Pry DefaultCommands display_index":{"type":"method","name":"display_index","children":[],"call":[" stagger_output ","help_text join ","help_text << ","(begin\n  (send\n    (send nil :text) :bold\n    (lvar :key))) + ","(send\n  (lvar :commands) :map) join ","command description ","command options [] to_s ljust ","command options [] to_s ","command options [] ","command options ","commands map "," text bold "," text ","commands empty? ","groups [] sort_by ","groups [] ","groups keys sort_by each ","groups keys sort_by "," method ","groups keys "]}," Pry DefaultCommands command_groups":{"type":"method","name":"command_groups","children":[],"call":[" visible_commands values group_by "," visible_commands values "," visible_commands "]}," Pry DefaultCommands visible_commands":{"type":"method","name":"visible_commands","children":[],"call":["visible []= ","command description empty? ! ","command description empty? ","command description "," commands each "," commands "]}," Pry DefaultCommands copy":{"type":"method","name":"copy","children":[],"call":["clip print ","IO  popen ","cmd to_s "," system "]}," Pry DefaultCommands comment_expression_result_for_gist":{"type":"method","name":"comment_expression_result_for_gist","children":[],"call":["content << ","index == ","result lines each_with_index ","result lines "]}," Pry DefaultCommands perform_gist":{"type":"method","name":"perform_gist","children":[],"call":[" output puts ","response [] "," output "," copy ","Jist  gist "," opts [] ! ! "," opts [] ! "," opts [] "," opts ","File  basename "," filename "," content "," content= "," restrict_to_lines "," opts present? ","Gist  copy ","Gist  write ","type_map [] "," code_type "," gist_file_extension "," raise "," content =~ ","Jist  gist  [] "]}," Pry DefaultCommands perform_clipboard":{"type":"method","name":"perform_clipboard","children":[],"call":[" output puts "," output "," copy "," content "]}," Pry DefaultCommands content_search":{"type":"method","name":"content_search","children":[],"call":["meth source =~ ","meth source "," search_all_methods "]}," Pry DefaultCommands name_search":{"type":"method","name":"name_search","children":[],"call":["meth name =~ ","meth name "," search_all_methods "]}," Pry DefaultCommands search_all_methods":{"type":"method","name":"search_all_methods","children":[],"call":["matches << ","done [] []= ","method name ","done [] ","method owner ","done [] [] ","(send\n  (send\n    (const\n      (const nil :Pry) :Method) :all_from_class\n    (lvar :klass)) :+\n  (send\n    (const\n      (const nil :Pry) :Method) :all_from_obj\n    (lvar :klass))) each ","Pry Method  all_from_class + ","Pry Method  all_from_obj ","Pry Method  all_from_class "," recurse_namespace ","h []= ","Hash  new "]}," Pry DefaultCommands recurse_namespace":{"type":"method","name":"recurse_namespace","children":[],"call":[" recurse_namespace ","klass const_get ","klass autoload? ","klass constants each ","klass constants ","done []= ","done [] ","(send\n  (const nil :Module) :===\n  (lvar :klass)) ! ","Module  === ","klass klass const_get _get ","klass klass const_get ants each ","klass klass const_get ants ","(send\n  (klass const_get  nil :Module) :===\n  (lvar :klass)) ! "]}," Pry DefaultCommands print_matches":{"type":"method","name":"print_matches","children":[],"call":[" output puts ","header + "," output "," colorize_code ","(block\n  (send\n    (send\n      (send\n        (lvar :method) :source) :split\n      (regexp\n        (str \"\\\\n\")\n        (regopt))) :select)\n  (args\n    (arg :x))\n  (send\n    (lvar :x) :=~\n    (lvar :pattern))) join ","  * ","header length ","x =~ ","method source split select ","method source split ","method source "," opts content? "," opts ","method name_with_owner ","grouped [] each ","grouped [] "," text bold ","klass name "," text ","order each ","x to_s ","x name ","grouped keys sort_by ","grouped keys ","matches group_by ","method name_with_owner  + ","method name_with_owner  length ","matches group_by  [] each ","matches group_by  [] ","matches group_by  keys sort_by ","matches group_by  keys "]}," Pry DefaultCommands perform_play":{"type":"method","name":"perform_play","children":[],"call":[" eval_string << "," content "," eval_string "," content= "," restrict_to_lines "," opts present? "," opts "," opts [] "," process_non_opt "]}," Pry DefaultCommands process_non_opt":{"type":"method","name":"process_non_opt","children":[],"call":[" raise "," content << "," target eval "," target "," content "," args each "," args "]}," Pry DefaultCommands definition_line_for_owner":{"type":"method","name":"definition_line_for_owner","children":[],"call":[" raise "," original_name ","line =~ ","Regexp  escape "]}," Pry DefaultCommands original_name":{"type":"method","name":"original_name","children":[],"call":[" raise ","@method original_name "]}," Pry DefaultCommands with_method_transaction":{"type":"method","name":"with_method_transaction","children":[],"call":["target eval ","Pry  binding_for ","Pry  binding_for  eval "]}," Pry DefaultCommands extract_file_and_line":{"type":"method","name":"extract_file_and_line","children":[],"call":[" target eval "," target ","@method source_line ","@method source_file "," raise ","@method source_type == ","@method source_type "]}," Pry DefaultCommands process_patch":{"type":"method","name":"process_patch","children":[],"call":["Pry  new rep ","@method owner ","Pry  new ","StringIO  new ","File  read ","f path ","Pry  binding_for eval "," original_name ","@method name ","Pry  binding_for "," with_method_transaction ","@method alias? "," invoke_editor ","f close ","f flush ","f puts ","lines join "," temp_file ","lines []= "," definition_line_for_owner ","lines [] ","@method source lines to_a ","@method source lines ","@method source "," raise ","lines [] =~ ","@method original_name "," @method original_name  ","@method source lines to_a  join ","@method source lines to_a  []= ","@method source lines to_a  [] ","@method source @method source lines to_a  to_a ","@method source @method source lines to_a  ","@method source lines to_a  [] =~ ","@method @method original_name  "]}," Pry DefaultCommands process_remote_edit":{"type":"method","name":"process_remote_edit","children":[],"call":["TOPLEVEL_BINDING  eval ","File  read "," silence_warnings "," set_file_and_dir_locals "," invoke_editor ","Shellwords  escape ","Pry  config disable_auto_reload ! ","Pry  config disable_auto_reload ","Pry  config "," opts present? ! "," opts present? "," opts ","file_name end_with? "," opts [] to_i "," opts [] "," raise "," not_a_real_file? ","1 to_i ","file_name sub! ","File  expand_path "," args first "," args "," target eval "," target ","Pry  eval_path == ","Pry  eval_path ","file_name nil? ","RbxPath  convert_path_to_full ","RbxPath  is_core_path? ","ex bt_source_location_for "," _pry_ last_exception "," _pry_ "," _pry_ last_exception nil? ","File  expand_path  end_with? "," target eval  end_with? ","RbxPath  convert_path_to_full  end_with? ","File  expand_path  sub! "," target eval  sub! ","RbxPath  convert_path_to_full  sub! ","File   _pry_ last_exception pand_path ","File  expand_path  nil? "," target eval  nil? ","RbxPath  convert_path_to_full  nil? "," _pry_ last_exception  bt_source_location_for "," _pry_ last_ _pry_ last_exception ception "," _pry_ last_ _pry_ last_exception ception nil? "]}," Pry DefaultCommands process_local_edit":{"type":"method","name":"process_local_edit","children":[],"call":[" eval_string replace ","File  read ","f path "," eval_string "," silence_warnings "," invoke_editor ","f close ","Pry  config disable_auto_reload ! ","Pry  config disable_auto_reload ","Pry  config "," opts present? ! "," opts present? "," opts ","f flush ","f puts "," temp_file ","content lines count ","content lines ","x strip != ","x strip "," _pry_ input_array reverse_each find "," _pry_ input_array reverse_each "," _pry_ input_array "," _pry_ "," eval_string strip != "," eval_string strip "," process_i ","content content lines count s count ","content content lines count s "]}," Pry DefaultCommands process_i":{"type":"method","name":"process_i","children":[],"call":[" output puts "," opts [] "," opts "," output "," _pry_ input_array [] "," _pry_ input_array "," _pry_ ","(or\n  (send\n    (send\n      (send nil :_pry_) :input_array) :[]\n    (send\n      (send nil :opts) :[]\n      (sym :i)))\n  (array)) join "]}," Array pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," [] ","q seplist ","q group "]}," Pry Config hooks=":{"type":"method","name":"hooks=","children":[],"call":["Pry Hooks  from_hash "," warn ","v is_a? "]}," Pry CommandSet default_options":{"type":"method","name":"default_options","children":[],"call":["match inspect ","String  === "]}," Pry CommandSet find_command":{"type":"method","name":"find_command","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send nil :commands) :values) :select)\n    (args\n      (arg :c))\n    (send\n      (lvar :c) :matches?\n      (lvar :val))) :sort_by) last ","c match_score ","(send\n  (send\n    (send nil :commands) :values) :select) sort_by ","c matches? "," commands values select "," commands values "," commands "," commands values detect "]}," Pry Code type_from_filename":{"type":"method","name":"type_from_filename","children":[],"call":["ext == ","File  extname ","k any? ","map find ","Pry Code EXTENSIONS  find "]}," Pry CLI process_options":{"type":"method","name":"process_options","children":[],"call":[" option_processors << "," option_processors "]}," __binding_impl__":{"type":"method","name":"__binding_impl__","children":[],"call":[]}," Pry output_with_default_format":{"type":"method","name":"output_with_default_format","children":[],"call":[]}," PryTester simulate_repl":{"type":"method","name":"simulate_repl","children":[],"call":[" raise "," throw "," catch "]}," PryTester context=":{"type":"method","name":"context=","children":[],"call":["@pry binding_stack << ","Pry  binding_for ","@pry binding_stack "]}," PryTestHelpers mri18_and_no_real_source_location?":{"type":"method","name":"mri18_and_no_real_source_location?","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Method) :instance_method\n      (sym :source_location)) :owner) :==\n  (const nil :Method)) ! ","Method  instance_method owner == ","Method  instance_method owner ","Method  instance_method ","Pry Helpers BaseHelpers  mri_18? "]}," TerminalInfo readline_screen_size":{"type":"method","name":"readline_screen_size","children":[],"call":[]}," TerminalInfo actual_screen_size":{"type":"method","name":"actual_screen_size","children":[],"call":[]}," TerminalInfo screen_size":{"type":"method","name":"screen_size","children":[],"call":[]}," Pager SystemPager page":{"type":"method","name":"page","children":[],"call":["io write ","IO  popen "]}," Pager SimplePager page":{"type":"method","name":"page","children":[],"call":["$stdin gets chomp == ","$stdin gets chomp ","$stdin gets "," puts ","text_array size > ","Pry Pager  page_size ","text_array size ","chunk size < ","chunk size ","chunk join ","text_array each_slice ","@text lines to_a ","@text lines ","Pry Pager  page_size - ","Readline  readline chomp == ","Readline  readline chomp ","Readline  readline ","@text lines to_a  size > ","Pry Pager  Pry Pager  page_size -  ","@text lines to_a  size ","@text lines to_a  each_slice ","Pry Pager  Pry Pager  page_size -  - "]}," Pager page_size":{"type":"method","name":"page_size","children":[],"call":[]}," Pry Helpers BaseHelpers context_from_object_path":{"type":"method","name":"context_from_object_path","children":[],"call":[" raise ","err set_backtrace ","e backtrace ","CommandError  new tap ","CommandError  new ","(dstr\n  (str \"Bad object path: \")\n  (begin\n    (lvar :arg_string))\n  (str \".\")) join ","e inspect ","stack push ","Pry  binding_for ","stack last eval ","stack last ","stack dup ","i == ","old_stack empty? ","stack pop ","path first == ","path first ","stack size == ","stack size ","stack first ","context chomp ","path each_with_index ","path empty? ","_pry_ binding_stack dup ","_pry_ binding_stack ","a =~ ","arg_string split delete_if ","arg_string split ","_pry_ binding_stack dup  push ","_pry_ binding_stack dup  last eval ","_pry_ binding_stack dup  last ","_pry_ binding_stack dup  dup ","old__pry_ binding_stack dup  empty? ","_pry_ binding_stack dup  pop ","_pry_ binding_stack dup  size == ","_pry_ binding_stack dup  size ","_pry_ binding_stack dup  first ","_pry_ binding__pry_ binding_stack dup  dup ","_pry_ binding__pry_ binding_stack dup  "]}," Pry BondCompleter start":{"type":"method","name":"start","children":[],"call":[]}," Pry BondCompleter build_completion_proc":{"type":"method","name":"build_completion_proc","children":[],"call":[]}," Pry Whereami show_method?":{"type":"method","name":"show_method?","children":[],"call":["@method source_range include? ","@method source_range ","@method source_file == ","@method source_file ","@method source_range count < ","@method source_range count ","@method source? "," args empty? "," args "]}," Pry ShowInfo setup":{"type":"method","name":"setup","children":[],"call":[" require "," mri_18? "]}," Pry ShellCommand complete":{"type":"method","name":"complete","children":[],"call":[" + ","Bond Rc  files ","search split last ","search split "]}," Pry ReloadCode obj_name":{"type":"method","name":"obj_name","children":[],"call":[" args join "," args "," args empty? "]}," Pry ReloadCode reload_code_object":{"type":"method","name":"reload_code_object","children":[],"call":[" output puts "," obj_name "," output "," load ","code_object source_file "," check_for_reloadability "]}," Pry Ls color":{"type":"method","name":"color","children":[],"call":[" text send ","Pry  config ls send ","Pry  config ls ","Pry  config "," text "]}," Pry Ls output_section":{"type":"method","name":"output_section","children":[],"call":[" text bold "," color "," text ","Pry Helpers  tablify_to_screen_width ","body compact empty? ","body compact ","Pry Helpers  tablify_or_one_line "]}," Pry Ls format_value":{"type":"method","name":"format_value","children":[],"call":["accumulator string ","Pry  output_with_default_format ","StringIO  new ","StringIO  new  string "]}," Pry Ls colorized_assignment_style":{"type":"method","name":"colorized_assignment_style","children":[],"call":["(str \"%-\") % "," color ","desired_width + ","colorized_lhs size - ","lhs size ","colorized_lhs size "," color  size - "," color  size "]}," Pry Ls format_locals":{"type":"method","name":"format_locals","children":[],"call":[" colorized_assignment_style "," format_value ","(send\n  (lvar :name_value_pairs) :sort_by) reverse map ","(send\n  (lvar :name_value_pairs) :sort_by) reverse ","value to_s size ","value to_s ","name_value_pairs sort_by "]}," Pry Ls format_local_names":{"type":"method","name":"format_local_names","children":[],"call":[" color "," _pry_ sticky_locals include? ","name to_sym "," _pry_ sticky_locals "," _pry_ ","locals sort_by map ","locals sort_by "]}," Pry Ls format_globals":{"type":"method","name":"format_globals","children":[],"call":[" color ","BUILTIN_GLOBALS  include? ","PSEUDO_GLOBALS  include? ","globals sort_by map ","globals sort_by "]}," Pry Ls format_constants":{"type":"method","name":"format_constants","children":[],"call":[" color ","Module  === ","mod const_get ","const < ","mod autoload? ! ","mod autoload? ","constants sort_by map ","constants sort_by "]}," Pry Ls format_variables":{"type":"method","name":"format_variables","children":[],"call":[" color ","vars sort_by map ","vars sort_by "]}," Pry Ls format_methods":{"type":"method","name":"format_methods","children":[],"call":[" color ","method name ","method visibility == ","method visibility ","method name == ","methods sort_by map ","methods sort_by "]}," Pry Ls write_out_locals":{"type":"method","name":"write_out_locals","children":[],"call":[" format_locals join "," format_locals "," target eval ","name to_s "," target ","loc_names map "," _pry_ sticky_locals keys include? ","e to_sym "," _pry_ sticky_locals keys "," _pry_ sticky_locals "," _pry_ "," target eval reject "," opts present? "," opts "]}," Pry Ls write_out_local_names":{"type":"method","name":"write_out_local_names","children":[],"call":[" output_section "," format_local_names "," grep [] "," target eval "," target "," grep "," args empty? "," args "," has_user_specified_any_options ! "," has_user_specified_any_options "]}," Pry Ls write_out_ivars":{"type":"method","name":"write_out_ivars","children":[],"call":[" output_section + "," output_section "," format_variables ","Pry Method  safe_send "," object_to_interrogate "," object_to_interrogate class "," interrogating_a_module? "," has_user_specified_any_options ! "," has_user_specified_any_options "," opts present? "," opts "]}," Pry Ls write_out_self_methods":{"type":"method","name":"write_out_self_methods","children":[],"call":[" output_section "," format_methods ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," object_to_interrogate ","m name =~ "," grep_regex ","m name ","m owner == ","m owner "," all_methods select "," all_methods "," interrogating_a_module? "," has_user_specified_any_options ! "," has_user_specified_any_options "]}," Pry Ls write_out_methods":{"type":"method","name":"write_out_methods","children":[],"call":["output << "," output_section ","Pry WrappedModule  new method_prefix ","Pry WrappedModule  new "," format_methods ","m name =~ "," grep_regex ","m name ","(or\n  (send\n    (lvar :methods) :[]\n    (lvar :klass))\n  (array)) select ","methods [] "," resolution_order take_while reverse each "," resolution_order take_while reverse "," resolution_order take_while "," below_ceiling "," object_to_interrogate "," resolution_order "," all_methods group_by "," all_methods "," has_user_specified_any_options ! "," has_user_specified_any_options "," opts present? "," opts "," format_ all_methods group_by  ","(or\n  (send\n    (lvar : all_methods group_by ) :[]\n    (lvar :klass))\n  (array)) select "," all_methods group_by  [] "," all_ all_methods group_by  group_by "," all_ all_methods group_by  "]}," Pry Ls write_out_constants":{"type":"method","name":"write_out_constants","children":[],"call":[" output_section "," grep [] "," format_constants "," grep ","(send\n  (send\n    (lvar :mod) :ancestors) :-\n  (array\n    (lvar :mod))) map flatten ","(send\n  (send\n    (lvar :mod) :ancestors) :-\n  (array\n    (lvar :mod))) map ","mod ancestors - ","mod ancestors "," opts present? "," opts ","mod constants "," object_to_interrogate "," interrogating_a_module? "," has_user_specified_any_options ! "," has_user_specified_any_options ","WrappedModule  new constants ","WrappedModule  new "," format_mod constants  "," format_WrappedModule  new constants  ","(send\n  (send\n    (lvar : object_to_interrogate ) :ancestors) :-\n  (array\n    (lvar : object_to_interrogate ))) map flatten ","(send\n  (send\n    (lvar : object_to_interrogate ) :ancestors) :-\n  (array\n    (lvar : object_to_interrogate ))) map "," object_to_interrogate  ancestors - "," object_to_interrogate  ancestors ","mod mod constants  ","mod WrappedModule  new constants  "," object_to_interrogate  constants "," interrogating_a_ object_to_interrogate ule? ","WrappedModule  new mod constants  ","WrappedModule  new WrappedModule  new constants  "]}," Pry Ls write_out_globals":{"type":"method","name":"write_out_globals","children":[],"call":[" output_section "," grep [] "," format_globals "," target eval "," target "," grep "," opts present? "," opts "]}," Pry Ls interrogating_a_module?":{"type":"method","name":"interrogating_a_module?","children":[],"call":["Module  === "," object_to_interrogate "]}," Pry Ls below_ceiling":{"type":"method","name":"below_ceiling","children":[],"call":["ceiling include? ! ","ceiling include? "," lambda ","Pry  config ls ceiling dup ","Pry  config ls ceiling ","Pry  config ls ","Pry  config "," opts present? "," opts ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) + ","obj class ancestors [] ","obj class ancestors ","obj class ","obj ancestors [] ","obj ancestors ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ! ","(if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  include? ","Pry  config ls (if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  dup ","Pry  config ls (if\n  (send\n    (send nil :opts) :present?\n    (sym :\"instance-methods\"))\n  (send\n    (send\n      (lvar :obj) :ancestors) :[]\n    (int 1))\n  (send\n    (send\n      (send\n        (lvar :obj) :class) :ancestors) :[]\n    (int 1))) +  "]}," Pry Ls resolution_order":{"type":"method","name":"resolution_order","children":[],"call":["Pry Method  resolution_order ","Pry Method  instance_resolution_order "," opts present? "," opts "]}," Pry Ls rubbishness":{"type":"method","name":"rubbishness","children":[],"call":["(send\n  (send\n    (lvar :name) :each_char) :map) inject + ","name size / ","name size ","(send\n  (send\n    (lvar :name) :each_char) :map) inject ","name each_char map ","name each_char "]}," Pry Ls trim_jruby_aliases":{"type":"method","name":"trim_jruby_aliases","children":[],"call":["(send\n  (lvar :grouped) :map) flatten ","found << ","(send\n  (lvar :found) :any?) ! ","x == ","found any? ","values select "," rubbishness ","m name ","values sort_by ","grouped map ","m name sub gsub downcase ","m name sub gsub ","m name sub ","methods group_by "]}," Pry Ls all_methods":{"type":"method","name":"all_methods","children":[],"call":["method visibility == ","method visibility "," opts present? "," opts ","methods select "," trim_jruby_aliases "," opts present? ! "," jruby? ","Pry Method  all_from_obj ","Pry Method  all_from_class "," trim_jruby_aliases  select ","Pry Method  all_from_obj  select ","Pry Method  all_from_class  select "]}," Pry FindMethod setup":{"type":"method","name":"setup","children":[],"call":[" require "," mri_18? "]}," Pry Edit complete":{"type":"method","name":"complete","children":[],"call":[" + ","Bond Rc  files ","search split last ","search split "]}," Pry Edit repl_reload?":{"type":"method","name":"repl_reload?","children":[],"call":[" never_reload? ! "," never_reload? "]}," Pry Edit MethodPatcher wrap_for_nesting":{"type":"method","name":"wrap_for_nesting","children":[],"call":["(send\n  (send\n    (send\n      (lvar :nesting) :+\n      (array\n        (lvar :source))) :+\n    (block\n      (send\n        (lvar :nesting) :map)\n      (args)\n      (str \"end\"))) :+\n  (array\n    (str \"\"))) join ","nesting + + + ","nesting + + ","nesting map ","nesting + ","Pry Code  from_file nesting_at "," code_object source_line "," code_object ","Pry Code  from_file "," code_object source_file ","(send\n  (send\n    (send\n      (lvar :Pry Code  from_file nesting_at ) :+\n      (array\n        (lvar :source))) :+\n    (block\n      (send\n        (lvar :Pry Code  from_file nesting_at ) :map)\n      (args)\n      (str \"end\"))) :+\n  (array\n    (str \"\"))) join ","Pry Code  from_file nesting_at  + + + ","Pry Code  from_file nesting_at  + + ","Pry Code  from_file nesting_at  map ","Pry Code  from_file nesting_at  + ","Pry Code  from_file Pry Code  from_file nesting_at _at "]}," Pry Edit MethodPatcher wrap_for_owner":{"type":"method","name":"wrap_for_owner","children":[],"call":["Pry  current []= "," code_object owner "," code_object ","Pry  current "]}," Pry Edit MethodPatcher wrap":{"type":"method","name":"wrap","children":[],"call":[" wrap_for_nesting "," wrap_for_owner "]}," Pry Edit MethodPatcher definition_line_for_owner":{"type":"method","name":"definition_line_for_owner","children":[],"call":[" raise "," code_object original_name "," code_object ","line =~ ","Regexp  escape "]}," Pry Edit MethodPatcher with_method_transaction":{"type":"method","name":"with_method_transaction","children":[],"call":["co send "," alias_method ","co original_name ","co name "," code_object owner class_eval "," code_object owner "," code_object "," code_object original_name "," code_object  send "," code_object  original_name "," code_object  name ","  code_object de_object owner class_eval ","  code_object de_object owner ","  code_object de_object ","  code_object de_object original_name "]}," Pry Edit MethodPatcher adjusted_lines":{"type":"method","name":"adjusted_lines","children":[],"call":["lines []= "," definition_line_for_owner ","lines first "," code_object source lines to_a "," code_object source lines "," code_object source "," code_object "," code_object source lines to_a  []= "," code_object source lines to_a  first "," code_object source  code_object source lines to_a  to_a "," code_object source  code_object source lines to_a  "]}," Pry Edit MethodPatcher patched_code":{"type":"method","name":"patched_code","children":[],"call":[" wrap ","Pry Editor  edit_tempfile_with_content "," adjusted_lines "]}," Pry Edit MethodPatcher perform_patch":{"type":"method","name":"perform_patch","children":[],"call":[" _pry_ evaluate_ruby "," patched_code "," _pry_ "," with_method_transaction "," code_object alias? "," code_object "]}," Pry Edit MethodPatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry CommandSet deprecated_command":{"type":"method","name":"deprecated_command","children":[],"call":[" output puts "," output "," define_method "," description "," match "," create_command "]}," Pry Code abs_path":{"type":"method","name":"abs_path","children":[],"call":[" raise ","filename inspect ","File  readable? ","(send\n  (const nil :File) :expand_path\n  (lvar :filename)\n  (send\n    (const nil :Dir) :pwd)) detect ","File  expand_path ","Dir  pwd "]}," TerminalInfo width!":{"type":"method","name":"width!","children":[],"call":[]}," Pry WrappedModule generator":{"type":"method","name":"generator","children":[],"call":[" require "]}," Pry require_readline":{"type":"method","name":"require_readline","children":[],"call":[]}," Pry Config input=":{"type":"method","name":"input=","children":[],"call":[]}," Pry Config input":{"type":"method","name":"input","children":[],"call":["@input call ","@input respond_to? "]}," Pry InputCompleter initialize_readline":{"type":"method","name":"initialize_readline","children":[],"call":[]}," Pry ShowInfo cannot_locate_source_error":{"type":"method","name":"cannot_locate_source_error","children":[],"call":[" raise "," obj_name "]}," Pry ExtendedCommands relative_path":{"type":"method","name":"relative_path","children":[],"call":["path =~ ","Regexp  escape ","File  expand_path "]}," Pry ExtendedCommands method_code_from_head":{"type":"method","name":"method_code_from_head","children":[],"call":["code lines to_a [] join ","code lines to_a [] ","(send\n  (lvar :start_line) :-\n  (int 1)) + ","start_line - ","code lines to_a ","code lines ","meth source lines count ","meth source lines ","meth source ","meth source_location last ","meth source_location "," get_file_from_commit "," relative_path ","meth source_location first "," get_file_from_commit  lines to_a [] join "," get_file_from_commit  lines to_a [] ","(send\n  (lvar :meth source_location last ) :-\n  (int 1)) + ","meth source_location last  - "," get_file_from_commit  lines to_a "," get_file_from_commit  lines "]}," Pry ExtendedCommands get_file_from_commit":{"type":"method","name":"get_file_from_commit","children":[],"call":["blob data ","v basename == ","v basename ","tree blobs find ","tree blobs ","t basename == ","t basename ","a trees find ","a trees ","tree_names [] inject ","tree_names [] ","tree_names last ","head tree ","path split ","repo commits first ","repo commits ","Grit Repo  new ","path split  [] inject ","path split  [] ","path split  last ","repo commits first  tree ","Grit Repo  new  commits first ","Grit Repo  new  commits "]}," Pry DefaultCommands should_trim?":{"type":"method","name":"should_trim?","children":[],"call":["options [] ","target eval >= ","target eval ","target eval is_a? "]}," Pry history_file":{"type":"method","name":"history_file","children":[],"call":[]}," Pry DefaultCommands ls_color_map":{"type":"method","name":"ls_color_map","children":[],"call":["Pry  config ls constant_color ","Pry  config ls ","Pry  config ","Pry  config ls instance_method_color ","Pry  config ls method_color ","Pry  config ls global_var_color ","Pry  config ls class_var_color ","Pry  config ls instance_var_color ","Pry  config ls local_var_color "]}," Pry DefaultCommands method_visibility":{"type":"method","name":"method_visibility","children":[],"call":["meth owner private_instance_methods include? ","meth name ","meth owner private_instance_methods ","meth owner ","meth owner protected_instance_methods include? ","meth owner protected_instance_methods ","meth owner public_instance_methods include? ","meth owner public_instance_methods "]}," Pry inject_special_locals":{"type":"method","name":"inject_special_locals","children":[],"call":[" inject_local "," last_result "," last_dir "," last_file "," last_exception "," special_locals each_pair "," special_locals "]}," Pry initialize_special_locals":{"type":"method","name":"initialize_special_locals","children":[],"call":[" inject_local "," set_last_result "," last_dir "," last_file "," last_exception "]}," Pry Helpers CommandHelpers rbx_std_convert_path_to_full":{"type":"method","name":"rbx_std_convert_path_to_full","children":[],"call":[" raise ","File  exists? ! ","File  exists? ","File  join "]}," Pry Helpers CommandHelpers rbx_rvm_convert_path_to_full":{"type":"method","name":"rbx_rvm_convert_path_to_full","children":[],"call":[" raise ","File  exists? ! ","File  exists? ","File  join ","File  dirname ","File  dirname split last ","File  dirname split "]}," Pry Helpers CommandHelpers rbx_convert_path_to_full":{"type":"method","name":"rbx_convert_path_to_full","children":[],"call":[" rbx_std_convert_path_to_full "," rbx_rvm_convert_path_to_full "," rvm_ruby? "]}," Pry Helpers CommandHelpers is_core_rbx_path?":{"type":"method","name":"is_core_rbx_path?","children":[],"call":["path start_with? "," rbx? "]}," Pry CommandProcessor Result keep_retval?":{"type":"method","name":"keep_retval?","children":[],"call":[]}," Pry CommandProcessor Result void_command?":{"type":"method","name":"void_command?","children":[],"call":[" retval == "," retval "," keep_retval? ! "," keep_retval? "," command? "]}," Pry CommandProcessor Result command?":{"type":"method","name":"command?","children":[],"call":[]}," Pry CommandProcessor Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pry CommandContext void":{"type":"method","name":"void","children":[],"call":[]}," Pry CommandContext inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Pry Helpers CommandHelpers get_method_object_from_target":{"type":"method","name":"get_method_object_from_target","children":[],"call":[" get_method_object_from_target ","target eval "]}," Pry Helpers CommandHelpers get_method_attributes":{"type":"method","name":"get_method_attributes","children":[],"call":[" meth_name_from_binding ","options [] ","Pry  binding_for ","target eval ","meth_name =~ ","  meth_name_from_binding _from_binding ","Pry  binding_for  eval "," meth_name_from_binding  =~ "]}," Pry RbxPath std_convert_path_to_full":{"type":"method","name":"std_convert_path_to_full","children":[],"call":[" raise ","File  exists? ! ","File  exists? ","File  join "]}," Pry RbxPath rvm_convert_path_to_full":{"type":"method","name":"rvm_convert_path_to_full","children":[],"call":[" raise ","File  exists? ! ","File  exists? ","File  join ","File  dirname ","File  dirname split last ","File  dirname split "]}," Pry RbxMethod core_path_line":{"type":"method","name":"core_path_line","children":[],"call":[" source_line ","RbxPath  convert_path_to_full "," source_file "]}," Pry RbxMethod core?":{"type":"method","name":"core?","children":[],"call":["RbxPath  is_core_path? "," source_file "]}," Pry special_locals":{"type":"method","name":"special_locals","children":[],"call":[" last_result "," last_dir "," last_file "," last_exception "]}," Pry Method strip_leading_whitespace":{"type":"method","name":"strip_leading_whitespace","children":[],"call":["Pry Helpers CommandHelpers  unindent "]}," Pry Method strip_leading_hash_and_whitespace_from_ruby_comments":{"type":"method","name":"strip_leading_hash_and_whitespace_from_ruby_comments","children":[],"call":[" strip_leading_whitespace ","comment gsub! ","comment dup ","comment dup  gsub! ","comment dup  dup "]}," Pry Method strip_comments_from_c_code":{"type":"method","name":"strip_comments_from_c_code","children":[],"call":["code sub "]}," Pry Helpers OptionsHelpers process_method_object_options":{"type":"method","name":"process_method_object_options","children":[],"call":[" get_method_or_raise ","opts to_hash ","args join ","args empty? ","opts options [] force_argument_value ","opts options [] count ","opts options [] ","opts options ","opts super? ","opts []= ","opts [] ","opts m? ","opts present? ! ","opts present? "]}," Pry Helpers OptionsHelpers add_method_object_options":{"type":"method","name":"add_method_object_options","children":[],"call":["Pry  binding_for "," target eval "," target ","opt on "]}," Pry Helpers OptionsHelpers parse_options!":{"type":"method","name":"parse_options!","children":[],"call":["(lvar :opts) + "," send ","extras map ","extras empty? "," throw "," output puts "," output ","opt on ","extras each ","Slop  parse! ","opt to_s "]}," Pry DefaultCommands class_name":{"type":"method","name":"class_name","children":[],"call":["klass to_s sub ","klass to_s "," class_name ","(lvar :x) == ","ObjectSpace  each_object detect ","ObjectSpace  each_object ","klass ancestors include? ","klass ancestors ","klass name ","(or\n  (send\n    (lvar :klass) :name)\n  (str \"\")) == ","klass == ","klass ancestors first "]}," Pry incomplete_user_input_exception?":{"type":"method","name":"incomplete_user_input_exception?","children":[],"call":["ex message "]}," Pry complete_expression?":{"type":"method","name":"complete_expression?","children":[],"call":[" raise "," incomplete_user_input_exception? ","str !~ "," eval ","Pry  eval_path "," binding ","Helpers BaseHelpers  silence_warnings "," catch ","Rubinius Melbourne  parse_string ","Rubinius Melbourne19  parse_string ","RUBY_VERSION  =~ "]}," Pry DefaultCommands gist_file_extension":{"type":"method","name":"gist_file_extension","children":[],"call":["file_name split last ","file_name split "]}," Pry DefaultCommands process_exit_all":{"type":"method","name":"process_exit_all","children":[],"call":[" throw "," target eval "," arg_string "," target "," _pry_ binding_stack clear "," _pry_ binding_stack "," _pry_ "]}," Pry CommandSet find_command_by_name_or_listing":{"type":"method","name":"find_command_by_name_or_listing","children":[],"call":[" raise ","cmd ! ","command options [] == ","command options [] ","command options "," commands find "," commands "," commands [] "," commands []  ! "]}," Pry Command check_for_command_name_collision":{"type":"method","name":"check_for_command_name_collision","children":[],"call":[" output puts ","Pry Helpers Text  bold "," output "," target eval "," target ","(begin\n  (send\n    (const\n      (const\n        (const nil :Pry) :Helpers) :Text) :bold\n    (str \"WARNING:\"))) + ","arg_string match "]}," Pry Hooks clear":{"type":"method","name":"clear","children":[],"call":["@hooks []= "]}," Pry CommandProcessor check_for_command_name_collision":{"type":"method","name":"check_for_command_name_collision","children":[],"call":[" pry_instance output puts ","Pry Helpers Text  bold "," pry_instance output "," pry_instance ","target eval "]}," Pry DefaultCommands restrict_to_lines":{"type":"method","name":"restrict_to_lines","children":[],"call":["content lines to_a [] join ","content lines to_a [] ","content lines to_a ","content lines "," one_index_range "]}," Pry DefaultCommands method_option":{"type":"method","name":"method_option","children":[],"call":[" code_type= ","meth source_type "," content= "," restrict_to_lines "," opts [] "," opts "," opts present? ","meth source "," get_method_or_raise "," target "," content << "," content "," get_method_or_raise  source_type "," get_method_or_raise  source "," get_ get_method_or_raise od_or_raise "]}," Pry DefaultCommands doc_option":{"type":"method","name":"doc_option","children":[],"call":[" code_type= "," content= "," process_comment_markup "," code_type "," content "," text no_color "," text ","meth source_type ","meth doc "," get_method_or_raise "," target "," opts [] "," opts "," content << "," get_method_or_raise  source_type "," get_method_or_raise  doc "," get_ get_method_or_raise od_or_raise "]}," Pry DefaultCommands file_option":{"type":"method","name":"file_option","children":[],"call":[" content= "," restrict_to_lines "," opts [] "," opts "," opts present? ","File  read ","File  expand_path "," content << "," content "]}," Pry DefaultCommands in_option":{"type":"method","name":"in_option","children":[],"call":[" content << "," comment_expression_result_for_gist ","Pry  config gist inspecter call "," _pry_ output_array [] "," _pry_ output_array "," _pry_ ","Pry  config gist inspecter ","Pry  config gist ","Pry  config "," content ","code !~ ","code != ","index + ","range first ","input_expressions each_with_index map ","input_expressions each_with_index "," _pry_ input_array [] "," _pry_ input_array "," input_ranges each "," input_ranges "," content= "," code_type= "]}," Pry CommandSet command_class":{"type":"method","name":"command_class","children":[],"call":[" commands [] "," commands "," commands [] class_eval "," commands []= ","Pry ClassCommand  subclass "," helper_module "," default_options merge! "," default_options "," default_ default_options merge!  merge! "," default_ default_options merge!  "]}," Pry ClassCommand banner":{"type":"method","name":"banner","children":[],"call":[" description "]}," Pry BlockCommand correct_arg_arity":{"type":"method","name":"correct_arg_arity","children":[],"call":["args values_at ","(irange\n  (int 0)\n  (begin\n    (send\n      (lvar :arity) :-\n      (int 1)))) to_a ","arity - ","arity > ","arity == ","arity < "]}," Pry ExtendedCommands edit_temporarily":{"type":"method","name":"edit_temporarily","children":[],"call":["@pry commands import ","@pry commands ","@pry commands delete ","@command name ","pry rep "," binding ","Pry  new ","StringIO  new "," silence_warnings ","CommandSet  new ","File  read ","f path "," invoke_editor ","f flush ","f write "," temp_file ","Pry  Method source ","Pry  Method ","@command block ","@Pry  new  commands import ","@Pry  new  commands ","@Pry  new  commands delete ","Pry  new  rep "]}," Pry ExtendedCommands edit_permanently":{"type":"method","name":"edit_permanently","children":[],"call":[" set_file_and_dir_locals ","@pry commands import ","@pry commands ","@pry commands delete ","@command name "," raise ","command_set is_a? "," eval ","File  read "," silence_warnings "," invoke_editor ","@command block source_location ","@command block "]}," Pry ExtendedCommands process":{"type":"method","name":"process","children":[],"call":[" edit_permanently "," edit_temporarily "," opts present? "," opts "," raise ","@command nil? ","@pry commands find_command "," args first "," args ","@pry commands "," _pry_ commands import "," _pry_ commands "," _pry_ "," _pry_ commands delete ","command name "," eval "," binding ","Pry CommandSet  new ","command block source_location ","command block ","command block source ","command nil? "," _pry_ commands find_command ","@pry commands find_command  nil? ","@ _pry_ commands find_command  nil? ","@pry  _pry_ commands find_command s find_ _pry_ commands find_command  ","@pry  _pry_ commands find_command s "," _pry_  _pry_ commands find_command s import "," _pry_  _pry_ commands find_command s "," _pry_  _pry_ commands find_command s delete "," _pry_ commands find_command  name "," _pry_ commands find_command  block source_location "," _pry_ commands find_command  block "," _pry_ commands find_command  block source "," _pry_ commands find_command  nil? "," _pry_  _pry_ commands find_command s find_ _pry_ commands find_command  "]}," Pry ExtendedCommands options":{"type":"method","name":"options","children":[],"call":["opt on "]}," Pry ExtendedCommands initialize":{"type":"method","name":"initialize","children":[],"call":["env [] "]}," Pry DefaultCommands process_input":{"type":"method","name":"process_input","children":[],"call":[" eval_string << "," Array join "," Array ","code each_line to_a [] ","code each_line to_a ","code each_line "," eval_string "," opts present? "," opts "," one_index_range_or_number "," opts [] "," target eval "," args first "," args "," target "," raise "," args first ! "," target eval  each_line to_a [] "," target eval  each_line to_a "," target eval  each_line "," one_index_ one_index_range_or_number _or_number "]}," Pry DefaultCommands command_option":{"type":"method","name":"command_option","children":[],"call":[" code_type= "," content << "," content "," restrict_to_lines "," opts [] "," opts "," opts present? ","command block source ","command block "," find_command "," find_command  block source "," find_command  block "," find_ find_command  "]}," Pry WrappedModule method_source_location_for_candidate":{"type":"method","name":"method_source_location_for_candidate","children":[],"call":["RbxPath  convert_path_to_full ","RbxPath  is_core_path? "," method_candidates [] source_location "," method_candidates [] "," method_candidates "]}," Pry WrappedModule extract_doc_for_candidate":{"type":"method","name":"extract_doc_for_candidate","children":[],"call":["buffer replace ","buffer << ","line lstrip ","line =~ "," lines_for_file [] each "," lines_for_file [] ","line - "," lines_for_file "," source_file_for_candidate "," module_source_location_for_candidate "]}," Pry WrappedModule extract_doc":{"type":"method","name":"extract_doc","children":[],"call":[" extract_doc_for_candidate "]}," Pry WrappedModule module_source_location_for_candidate":{"type":"method","name":"module_source_location_for_candidate","children":[],"call":["idx + ","class_regex2 =~ ","class_regex1 =~ ","search_lines rindex ","host_file_lines [] ","line - "," lines_for_file "," wrapped class "," wrapped "," wrapped name split last "," wrapped name split "," wrapped name ","file is_a? ! ","file is_a? "," method_source_location_for_candidate "," wrapped class to_s downcase "," wrapped class to_s ","host_file_lines []  rindex "," lines_for_file  [] "]}," Pry WrappedModule source_line_for_candidate":{"type":"method","name":"source_line_for_candidate","children":[],"call":[" Array last "," Array "," module_source_location_for_candidate "]}," Pry WrappedModule source_file_for_candidate":{"type":"method","name":"source_file_for_candidate","children":[],"call":[" Array first "," Array "," module_source_location_for_candidate "]}," Pry WrappedModule source_line":{"type":"method","name":"source_line","children":[],"call":[" source_line_for_candidate "]}," Pry WrappedModule source_file":{"type":"method","name":"source_file","children":[],"call":[" source_file_for_candidate ","from_yard file ","YARD Registry  at "," name "," yard_docs? ","YARD Registry  at  file "]}," Pry WrappedModule source_for_candidate":{"type":"method","name":"source_for_candidate","children":[],"call":[" strip_leading_whitespace ","Pry Code  retrieve_complete_expression_from "," lines_for_file [] ","line - "," lines_for_file "," raise "," wrapped ","file nil? "," module_source_location_for_candidate "]}," Pry WrappedModule doc_for_candidate":{"type":"method","name":"doc_for_candidate","children":[],"call":[" process_doc "," raise "," name ","doc ! "," extract_doc_for_candidate "," process_ extract_doc_for_candidate  "," extract_doc_for_candidate  ! "," extract_ extract_doc_for_candidate _for_candidate "]}," Pry DefaultCommands invalid_file?":{"type":"method","name":"invalid_file?","children":[],"call":["file == ","file =~ ","file != ","Pry  eval_path "]}," Pry Code retrieve_complete_expression_from":{"type":"method","name":"retrieve_complete_expression_from","children":[],"call":[" complete_expression? ","code << ","lines each ","str_or_lines each_line to_a ","str_or_lines each_line ","str_or_lines is_a? ","str_or_lines each_line to_a  each ","str_or_str_or_lines each_line to_a  each_line to_a ","str_or_str_or_lines each_line to_a  each_line ","str_or_str_or_lines each_line to_a  is_a? "]}," Pry Code incomplete_user_input_exception?":{"type":"method","name":"incomplete_user_input_exception?","children":[],"call":["ex message "]}," Pry Code complete_expression?":{"type":"method","name":"complete_expression?","children":[],"call":[" raise "," incomplete_user_input_exception? ","str !~ "," eval ","Pry  eval_path "," binding ","Helpers BaseHelpers  silence_warnings "," catch ","Rubinius Melbourne  parse_string ","Rubinius Melbourne19  parse_string ","RUBY_VERSION  =~ "]}}