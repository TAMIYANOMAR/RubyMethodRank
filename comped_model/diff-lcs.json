{" LCS __normalize_patchset":{"type":"method","name":"__normalize_patchset","children":[],"call":["(send\n  (lvar :patchset) :map) flatten "," raise ","hunk class ","Diff LCS Change  from_a ","Diff LCS ContextChange  from_a ","change [] kind_of? ","change [] ","hunk map ","hunk [] kind_of? ","hunk [] ","hunk [] kind_of? ! ","patchset map "]}," LCS __diff_direction":{"type":"method","name":"__diff_direction","children":[],"call":[" raise ","right_miss >= ","right == ","left_miss >= ","left == ","count > ","limit nil? ! ","limit nil? ","element == ","change new_element ","src [] ","change new_position ","change old_element ","change old_position ","re != ","le != ","change action ","element != ","change element ","change position ","patchset each ","src kind_of? ","src [] ft_miss >= ","src [] ft == ","src []  == ","esrc [] ment == ","change new_src []  ","change new_esrc [] ment ","change old_src []  ","change old_esrc [] ment ","src []  != ","esrc [] ment != ","change src []  ","change esrc [] ment "]}," LCS __position_hash":{"type":"method","name":"__position_hash","children":[],"call":["hash [] << ","hash [] ","enum [] ","enum kind_of? ","interval each ","hh []= ","Hash  new "]}," LCS __inverse_vector":{"type":"method","name":"__inverse_vector","children":[],"call":["inverse []= ","vector [] ","vector [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :vector) :size)) each ","vector size ","a dup ","a dup  []= "]}," LCS __replace_next_larger":{"type":"method","name":"__replace_next_larger","children":[],"call":["enum []= ","ii - ","ii + ","value > ","value == ","enum [] ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ","first_index + ","first_index <= ","enum size ","enum size - ","enum << ","enum empty? ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >>  - ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >>  + ","(send\n  (lvar :first_index) :+\n  (lvar :ii - )) >> ","(send\n  (lvar :ii + ) :+\n  (lvar :last_index)) >> ","ii +  + ","ii +  <= "]}," LCS __lcs":{"type":"method","name":"__lcs","children":[],"call":["link [] ","vector []= ","link nil? ! ","link nil? ","links [] ","thresh size - ","thresh size ","thresh empty? ","links []= ","kk - ","kk > ","kk nil? ","Diff LCS  __replace_next_larger ","thresh []= ","thresh [] < ","thresh [] ","thresh [] > ","bm reverse_each ","b_matches [] ","a [] ","a kind_of? ","(irange\n  (lvar :a_start)\n  (lvar :a_finish)) each ","Diff LCS  __position_hash ","a [] == ","b [] ","b_start <= ","a_start <= ","b size - ","b size ","a size - ","a size ","link []  [] ","links []  [] ","link []  nil? ! ","links []  nil? ! ","link []  nil? ","links []  nil? ","link [] s [] ","links [] s [] ","link [] s []= ","links [] s []= ","Diff LCS  __replace_next_larger  - ","Diff LCS  __replace_next_larger  > ","Diff LCS  __replace_next_larger  nil? ","b_matches []  reverse_each ","Diff LCS  __position_hash  [] ","(irange\n  (lvar :a_start)\n  (lvar :a size - )) each "]}," LCS patch!":{"type":"method","name":"patch!","children":[],"call":["Diff LCS  patch ","Diff LCS  patch! "]}," LCS unpatch!":{"type":"method","name":"unpatch!","children":[],"call":["Diff LCS  patch ","Diff LCS  unpatch! "]}," LCS patch":{"type":"method","name":"patch","children":[],"call":["res << ","src [] ","ai < ","src size ","change element ","bj < ","change position ","change old_position ","change new_position ","change old_element ","change new_element ","PATCH_MAP  [] [] ","change action ","PATCH_MAP  [] ","patchset each ","Diff LCS  __diff_direction "," __normalize_patchset ","src class new ","src class ","src kind_of? ","Diff LCS  patch "," dup ","src class new  << ","change change old_element ement ","change change new_element ement ","change old_change old_element ement ","change old_change new_element ement ","change new_change old_element ement ","change new_change new_element ement ","change PATCH_MAP  [] []  "," __normalize_patchset  each "," __normalize_ __normalize_patchset  "]}," LCS traverse_balanced":{"type":"method","name":"traverse_balanced","children":[],"call":["callbacks discard_b "," block_given? ","Diff LCS ContextChange  new ","callbacks discard_a ","seq1 [] ","callbacks change ","callbacks respond_to? ","bj < ","ai < ","seq2 [] ","callbacks match ","matches [] ","ma >= ","matches size ","matches [] nil? ","ma < "," loop ","seq1 kind_of? ","seq2 size ","seq1 size ","Diff LCS  __lcs "," traverse_balanced ","Diff LCS  YieldingCallbacks ","Diff LCS  traverse_balanced ","Diff LCS  __lcs  [] ","Diff LCS  __lcs  size ","Diff LCS  __lcs  [] nil? "]}," LCS traverse_sequences":{"type":"method","name":"traverse_sequences","children":[],"call":["callbacks discard_b "," block_given? ","Diff LCS ContextChange  new ","seq2 [] ","seq1 [] ","bj < ","callbacks discard_a ","ai < "," loop ","callbacks finished_b ","b_size - ","run_finished_b ! ","callbacks respond_to? ","bj == ","callbacks finished_a ","a_size - ","run_finished_a ! ","ai == ","callbacks match ","ax nil? ","b_line nil? ","matches [] ","(irange\n  (int 0)\n  (send\n    (lvar :matches) :size)) each ","matches size ","seq2 size ","seq1 size ","seq1 kind_of? ","Diff LCS  __lcs "," traverse_sequences ","Diff LCS  YieldingCallbacks ","Diff LCS  traverse_sequences ","seq2 size  - ","seq1 size  - ","seq1 []  nil? ","matches []  nil? ","Diff LCS  __lcs  [] ","(irange\n  (int 0)\n  (send\n    (lvar :Diff LCS  __lcs ) :size)) each ","Diff LCS  __lcs  size "]}," LCS sdiff":{"type":"method","name":"sdiff","children":[],"call":["callbacks diffs ","hunk map ","hunk kind_of? ","callbacks diffs map "," block_given? ","callbacks finish ","callbacks respond_to? "," traverse_balanced ","callbacks new ","callbacks kind_of? ","Diff LCS  sdiff "]}," LCS diff":{"type":"method","name":"diff","children":[],"call":["callbacks diffs ","hunk map ","hunk kind_of? ","callbacks diffs map "," block_given? ","callbacks finish ","callbacks respond_to? "," traverse_sequences ","callbacks new ","callbacks kind_of? ","Diff LCS  diff "]}," LCS LCS":{"type":"method","name":"LCS","children":[],"call":["ret << ","seq1 [] "," block_given? ","matches [] nil? ","matches [] ","matches each_with_index ","Diff LCS  __lcs ","Diff LCS  __lcs  [] nil? ","Diff LCS  __lcs  [] ","Diff LCS  __lcs  each_with_index "]}," LCS unpatch":{"type":"method","name":"unpatch","children":[],"call":["Diff LCS  unpatch "," dup "]}," LCS lcs":{"type":"method","name":"lcs","children":[],"call":["Diff LCS  LCS ","Diff LCS  lcs "]}," Hunk unified_range":{"type":"method","name":"unified_range","children":[],"call":["length == ","length < ","e - + ","e - ","@end_new + ","@start_new + ","@end_old + ","@start_old + ","first to_s ","length <= ","e - +  == ","e - +  < ","e - +  <= "]}," Hunk context_range":{"type":"method","name":"context_range","children":[],"call":["s < ","@end_new + ","@start_new + ","@end_old + ","@start_old + ","e to_s ","e zero? "]}," Hunk ed_diff":{"type":"method","name":"ed_diff","children":[],"call":["s << ","@data_new [] each ","@data_new [] ","@blocks [] insert empty? ","@blocks [] insert ","@blocks [] ","op_act [] ","@blocks [] op "," context_range gsub "," context_range ","format == "," warn ","@blocks size > ","@blocks size "," encode ","e + ","e chomp + ","e chomp ","ED_DIFF_OP_ACTION  [] "," encode  << ","@block encode  [] in encode ert empty? ","@block encode  [] in encode ert ","@block encode  [] ","@block encode  [] op "," context_range g encode ub ","@block encode   encode ize > ","@block encode   encode ize "]}," Hunk context_diff":{"type":"method","name":"context_diff","children":[],"call":["s << ","outlist join ","block op ","outlist [] gsub! ","outlist [] ","item position - ","item position ","block insert each ","block insert ","inserts each ","e gsub ","@data_new [] collect ","@data_new [] ","e insert empty? ! ","e insert empty? ","e insert ","@blocks select ","block remove each ","block remove ","removes each ","@data_old [] collect ","@data_old [] ","e remove empty? ! ","e remove empty? ","e remove "," context_range ","outlist [] []= "," encode ","@data_old [] map ","outlist [] insert ","@blocks reject ","outlist << ","block == ","inserts [] ","String  new ","e chomp ","@data_new [] map ","inserts empty? ","s << << ","removes [] ","removes empty? "," missing_last_newline? "," encode  << ","outli encode t join ","outli encode t [] g encode ub! ","outli encode t [] ","item po encode ition - ","item po encode ition ","block inse context_range t each ","block in encode ert each ","block inse context_range t ","block in encode ert ","inse context_range ts each ","in encode ert encode  each ","e g encode ub ","e inse context_range t empty? ! ","e in encode ert empty? ! ","e inse context_range t empty? ","e in encode ert empty? ","e inse context_range t ","e in encode ert ","@block encode   encode elect ","block  context_range emove each ","block  context_range emove "," context_range emoves each ","remove encode  each ","e  context_range emove empty? ! ","e  context_range emove empty? ","e  context_range emove "," context_ context_range ange ","outli encode t [] []= ","outlist [] inse context_range t ","outli encode t [] in encode ert ","@blocks  context_range eject ","@block encode  reject ","outli encode t << ","inse context_range ts [] ","in encode ert encode  [] ","St context_range ing  new ","inse context_range ts empty? ","in encode ert encode  empty? "," encode  << << "," context_range emoves [] ","remove encode  [] "," context_range emoves empty? ","remove encode  empty? "," mi encode  encode ing_la encode t_newline? "]}," Hunk unified_diff":{"type":"method","name":"unified_diff","children":[],"call":["s << ","outlist join ","outlist []= ","@data_new [] ","item position ","item position - + ","item position - ","item action to_s ","item action ","block insert each ","block insert ","outlist [] gsub! ","op to_s ","outlist [] ","block remove each ","block remove ","@blocks each ","e gsub ","@data_old [] collect ","@data_old [] "," unified_range "," encode "," encode + ","outlist [] []= ","e insert ","@data_old [] map ","outlist << ","@data_new [] chomp ","new_missing_newline ! ","block == "," missing_last_newline? "," blocks [] "," blocks ","String  new ","e chomp "," encode  << ","outli encode t join ","outli encode t []= ","item po encode ition ","item po encode ition - + ","item po encode ition - ","item action to_ encode  ","block in encode ert each ","block in encode ert ","outli encode t [] g encode ub! ","item action to_s  to_s ","op to_ encode  ","outli encode t [] ","@block encode  each ","e g encode ub ","outli encode t [] []= ","e in encode ert ","outli encode t << ","new_mi encode  encode ing_newline ! "," missing_last_newline?  ! "," mi encode  encode ing_la encode t_newline? "," block encode  [] "," block encode  "]}," Hunk old_diff":{"type":"method","name":"old_diff","children":[],"call":["s << ","@data_new [] each ","@data_new [] ","block insert empty? ","block insert ","block op == ","block op ","@data_old [] each ","@data_old [] ","block remove empty? ","block remove "," context_range ","op_act [] ","@blocks [] "," warn ","@blocks size > ","@blocks size "," encode + + "," encode "," encode + ","e chomp ","OLD_DIFF_OP_ACTION  [] "," encode  << ","@blocks []  insert empty? ","block in encode ert empty? ","@blocks []  insert ","block in encode ert ","@blocks []  op == ","@blocks []  op ","@blocks []  remove empty? ","@blocks []  remove ","@@blocks [] s [] ","@block encode  [] ","@@blocks [] s size > ","@block encode   encode ize > ","@@blocks [] s size ","@block encode   encode ize "]}," Hunk each_old":{"type":"method","name":"each_old","children":[],"call":["@data_old [] each ","@data_old [] "]}," Hunk diff":{"type":"method","name":"diff","children":[],"call":[" raise "," ed_diff "," context_diff "," unified_diff "," old_diff "," fail "]}," Hunk overlaps?":{"type":"method","name":"overlaps?","children":[],"call":["(send\n  (ivar :@start_new) :-\n  (send\n    (lvar :hunk) :end_new)) <= ","@start_new - ","hunk end_new ","(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= ","@start_old - ","hunk end_old ","hunk nil? ","(send\n  (iv(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= r :@st(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= rt_new) :-\n  (send\n    (lv(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= r :hunk) :end_new)) <= ","@st(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= rt_new - ","(send\n  (iv(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= r :@st(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= rt_old) :-\n  (send\n    (lv(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= r :hunk) :end_old)) <= ","@st(send\n  (ivar :@start_old) :-\n  (send\n    (lvar :hunk) :end_old)) <= rt_old - "]}," Hunk unshift":{"type":"method","name":"unshift","children":[],"call":[" blocks unshift ","hunk blocks "," blocks ","hunk start_new ","hunk start_old "]}," Hunk flag_context=":{"type":"method","name":"flag_context=","children":[],"call":["@data_old size - ","@data_old size ","(send\n  (ivar :@end_old) :+\n  (lvar :context)) > ","@end_old + ","context > ","context zero? ","context nil? ","add_end > ","add_end >= ","old_size - ","@data_old size -  > ","old_size -  > ","@data_old size -  >= ","old_size -  >= ","@data_old size  - "]}," Hunk initialize":{"type":"method","name":"initialize","children":[],"call":[" flag_context= ","a2 + ","b2 - ","a1 + ","b1 - ","@blocks [] insert [] position ","@blocks [] insert [] ","@blocks [] insert ","@blocks [] ","@blocks [] insert empty? ","@blocks [] remove [] position ","@blocks [] remove [] ","@blocks [] remove ","@blocks [] remove empty? ","@blocks [] diff_size ","Diff LCS Block  new ","data_old [] encoding ","data_old [] ","String  method_defined? ","data_old fetch encoding ","data_old fetch ","data_new fetch ","(send\n  (send\n    (ivar :@blocks) :lazy) :map) max ","e diff_size ","@blocks lazy map ","@blocks lazy ","(send\n  (ivar :@blocks) :map) max ","@blocks map ","e diff_size abs "," fail ","piece inspect ","@blocks [] remove [] position  + ","@blocks [] insert [] position  - "]}," ContextChange simplify":{"type":"method","name":"simplify","children":[],"call":[]}," ContextChange from_a":{"type":"method","name":"from_a","children":[],"call":[]}," ContextChange to_a":{"type":"method","name":"to_a","children":[],"call":[]}," ContextChange initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@new_position kind_of? ","@new_position nil? ","@old_position kind_of? ","@old_position nil? ","Diff LCS Change  valid_action? "," fail "]}," ContextChange <=>":{"type":"method","name":"<=>","children":[],"call":["@new_element <=> ","other new_element ","r zero? ","@old_element <=> ","other old_element ","@new_position <=> ","other new_position ","@old_position <=> ","other old_position ","@action <=> ","other action ","othe@new_element <=>  new_element ","othe@old_element <=>  new_element ","othe@new_position <=>  new_element ","othe@old_position <=>  new_element ","othe@action <=>  new_element ","@new_element <=>  ze@new_element <=> o? ","@old_element <=>  ze@old_element <=> o? ","@new_position <=>  ze@new_position <=> o? ","@old_position <=>  ze@old_position <=> o? ","@action <=>  ze@action <=> o? ","othe@new_element <=>  old_element ","othe@old_element <=>  old_element ","othe@new_position <=>  old_element ","othe@old_position <=>  old_element ","othe@action <=>  old_element ","othe@new_element <=>  new_position ","othe@old_element <=>  new_position ","othe@new_position <=>  new_position ","othe@old_position <=>  new_position ","othe@action <=>  new_position ","othe@new_element <=>  old_position ","othe@old_element <=>  old_position ","othe@new_position <=>  old_position ","othe@old_position <=>  old_position ","othe@action <=>  old_position ","othe@new_element <=>  action ","othe@old_element <=>  action ","othe@new_position <=>  action ","othe@old_position <=>  action ","othe@action <=>  action "]}," ContextChange inspect":{"type":"method","name":"inspect","children":[],"call":[" new_element inspect "," new_element "," old_element inspect "," old_element "," new_position "," old_position "," action "," __id__ "," class name "," class "," to_a inspect "," to_a "]}," ContextChange ==":{"type":"method","name":"==","children":[],"call":["@new_element == ","other new_element ","@old_element == ","other old_element ","@new_position == ","other new_position ","@old_position == ","other old_position ","@action == ","other action "," class == ","other class "," class "]}," Change from_a":{"type":"method","name":"from_a","children":[],"call":[]}," Change to_a":{"type":"method","name":"to_a","children":[],"call":[]}," Change initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@position kind_of? ","Diff LCS Change  valid_action? "," fail "]}," Change <=>":{"type":"method","name":"<=>","children":[],"call":[" element <=> ","other element "," element ","r zero? "," position <=> ","other position "," position "," action <=> ","other action "," action ","othe element <=>  element ","othe position <=>  element ","othe action <=>  element "," element <=>  ze element <=> o? "," position <=>  ze position <=> o? "," action <=>  ze action <=> o? ","othe element <=>  position ","othe position <=>  position ","othe action <=>  position ","othe element <=>  action ","othe position <=>  action ","othe action <=>  action "]}," Change ==":{"type":"method","name":"==","children":[],"call":[" element == ","other element "," element "," position == ","other position "," position "," action == ","other action "," action "," class == ","other class "," class "]}," ChangeTypeTests finished_b?":{"type":"method","name":"finished_b?","children":[],"call":["@changed == "]}," ChangeTypeTests finished_a?":{"type":"method","name":"finished_a?","children":[],"call":["@changed == "]}," ChangeTypeTests changed?":{"type":"method","name":"changed?","children":[],"call":["@changed == "]}," ChangeTypeTests unchanged?":{"type":"method","name":"unchanged?","children":[],"call":["@action == "]}," ChangeTypeTests adding?":{"type":"method","name":"adding?","children":[],"call":["@action == "]}," ChangeTypeTests deleting?":{"type":"method","name":"deleting?","children":[],"call":["@action == "]}," SDiffCallbacks change":{"type":"method","name":"change","children":[],"call":["@diffs << ","Diff LCS ContextChange  simplify "]}," SDiffCallbacks discard_b":{"type":"method","name":"discard_b","children":[],"call":["@diffs << ","Diff LCS ContextChange  simplify "]}," SDiffCallbacks discard_a":{"type":"method","name":"discard_a","children":[],"call":["@diffs << ","Diff LCS ContextChange  simplify "]}," SDiffCallbacks match":{"type":"method","name":"match","children":[],"call":["@diffs << ","Diff LCS ContextChange  simplify "]}," SDiffCallbacks initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," ContextDiffCallbacks change":{"type":"method","name":"change","children":[],"call":["@hunk << ","Diff LCS ContextChange  simplify "]}," ContextDiffCallbacks discard_b":{"type":"method","name":"discard_b","children":[],"call":["@hunk << ","Diff LCS ContextChange  simplify "]}," ContextDiffCallbacks discard_a":{"type":"method","name":"discard_a","children":[],"call":["@hunk << ","Diff LCS ContextChange  simplify "]}," DiffCallbacks add_nonempty_hunk":{"type":"method","name":"add_nonempty_hunk","children":[],"call":["@diffs << ","@hunk empty? "]}," DiffCallbacks discard_b":{"type":"method","name":"discard_b","children":[],"call":["@hunk << ","Diff LCS Change  new ","event new_element ","event new_position "]}," DiffCallbacks discard_a":{"type":"method","name":"discard_a","children":[],"call":["@hunk << ","Diff LCS Change  new ","event old_element ","event old_position "]}," DiffCallbacks match":{"type":"method","name":"match","children":[],"call":[" add_nonempty_hunk "," finish_hunk "]}," DiffCallbacks finish":{"type":"method","name":"finish","children":[],"call":[" add_nonempty_hunk "," finish_hunk "]}," DiffCallbacks initialize":{"type":"method","name":"initialize","children":[],"call":[" finish "," block_given? "]}," LCS DefaultCallbacks change":{"type":"method","name":"change","children":[],"call":[]}," LCS DefaultCallbacks discard_b":{"type":"method","name":"discard_b","children":[],"call":[]}," LCS DefaultCallbacks discard_a":{"type":"method","name":"discard_a","children":[],"call":[]}," LCS DefaultCallbacks match":{"type":"method","name":"match","children":[],"call":[]}," Block op":{"type":"method","name":"op","children":[],"call":["@insert empty? ","@remove empty? "]}," Block diff_size":{"type":"method","name":"diff_size","children":[],"call":["@insert size - ","@remove size ","@insert size ","(send\n  (send\n    (ivar :@insert) :size) :-\n  (send\n    (ivar :@remove) :size)) abs "]}," Block initialize":{"type":"method","name":"initialize","children":[],"call":["@insert << ","item adding? ","@remove << ","item deleting? ","@changes << ","chunk each "]}," Ldiff run":{"type":"method","name":"run","children":[],"call":["real_output << ","e diff ","output reverse_each ","@format == ","output << ","oldhunk diff ","hunk unshift ","hunk overlaps? ","@lines > ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each "," puts ","File  stat mtime localtime strftime ","File  stat mtime localtime ","File  stat mtime ","File  stat ","diffs empty? ","Diff LCS  diff ","data_old == ","e chomp ","IO  readlines map! ","IO  readlines ","data_new split map! ","data_new split ","data_old split map! ","data_old split ","new_txt ! ","old_txt ! ","data_new [] grep empty? ","data_new [] grep ","data_new [] ","data_old [] grep empty? ","data_old [] grep ","data_old [] ","@binary nil? ","IO  read ","+ * ","- * ","* * ","error << ","args options ","args size == ","args size ","o parse! ","o on_tail ","o on ","o separator ","o banner= ","File  basename ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","hunk unshiFile  stat mtime localtime strftime  ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","File  stat mtime localtime strFile  stat mtime localtime strftime ime ","Diff LCS  diff  empty? ","IO  read  == ","IO  read  split map! ","IO  read  split ","data_new [] grep empty?  ! ","data_old [] grep empty?  ! ","IO  read  [] grep empty? ","IO  read  [] grep ","IO  read  [] "]}," HTMLDiff run":{"type":"method","name":"run","children":[],"call":["@options [] << ","@options [] ","Diff LCS  traverse_sequences ","Callbacks  new ","CGI  escapeHTML ","line chomp ","@right map! ","@left map! ","formatter expand "," right map "," right "," left map "," left ","formatter tabstop= ","Text Format  new "," class can_expand_tabs "," class ","@options [] > "," verify_options ","@options [] positive? ","Text Format  new  expand ","Text Format  new  tabstop= "]}," HTMLDiff verify_options":{"type":"method","name":"verify_options","children":[],"call":["@options [] ","DEFAULT_CSS  dup ","@options []= ","@options [] < ","@options [] negative? "]}," HTMLDiff initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  dup ","@options nil? ","DEFAULT_OPTIONS  dup  nil? "]}," HTMLDiff Callbacks discard_b":{"type":"method","name":"discard_b","children":[],"call":["@output << "," htmlize ","event new_element "]}," HTMLDiff Callbacks discard_a":{"type":"method","name":"discard_a","children":[],"call":["@output << "," htmlize ","event old_element "]}," HTMLDiff Callbacks match":{"type":"method","name":"match","children":[],"call":["@output << "," htmlize ","event old_element "]}," HTMLDiff Callbacks htmlize":{"type":"method","name":"htmlize","children":[],"call":[" __send__ ","element empty? "]}," HTMLDiff Callbacks initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," patch!":{"type":"method","name":"patch!","children":[],"call":[" patch "]}," unpatch!":{"type":"method","name":"unpatch!","children":[],"call":[" patch "]}," patch":{"type":"method","name":"patch","children":[],"call":["res << ","src [] ","ai < ","src size ","change element ","bj < ","change position ","change old_position ","change new_position ","change old_element ","change new_element ","patch_map [] ","change action ","patchset flatten each ","patchset flatten ","PATCH_MAP  [] ","Diff LCS Internals  intuit_diff_direction ","src class new ","src class ","src kind_of? ","src dup ","src respond_to? ","has_changes ! ","Diff LCS Internals  analyze_patchset ","patchset each ","src class new  << ","change change old_element ement ","change change new_element ement ","change old_change old_element ement ","change old_change new_element ement ","change new_change old_element ement ","change new_change new_element ement ","PATCH_MAP  []  [] ","change patch_map []  ","src src class new pond_to? "]}," traverse_balanced":{"type":"method","name":"traverse_balanced","children":[],"call":["callbacks discard_b "," block_given? ","Diff LCS ContextChange  new ","callbacks discard_a ","seq1 [] ","callbacks change ","callbacks respond_to? ","bj < ","ai < ","seq2 [] ","callbacks match ","matches [] ","ma >= ","matches size ","matches [] nil? ","ma < "," loop ","seq1 kind_of? ","seq2 size ","seq1 size ","Diff LCS Internals  lcs ","Diff LCS Internals  lcs  [] ","Diff LCS Internals  lcs  size ","Diff LCS Internals  lcs  [] nil? "]}," traverse_sequences":{"type":"method","name":"traverse_sequences","children":[],"call":["callbacks discard_b "," block_given? ","Diff LCS ContextChange  new ","seq2 [] ","seq1 [] ","bj < ","callbacks discard_a ","ai < "," loop ","callbacks finished_b ","b_size - ","run_finished_b ! ","callbacks respond_to? ","bj == ","callbacks finished_a ","a_size - ","run_finished_a ! ","ai == ","callbacks match ","ax empty? ","ax nil? ","b_line nil? ","matches [] ","(irange\n  (int 0)\n  (send\n    (lvar :matches) :size)) each ","matches size ","seq2 size ","seq1 size ","seq1 kind_of? ","Diff LCS Internals  lcs ","seq1 [] nil? ","matches each ","seq2 size  - ","seq1 size  - ","seq1 []  empty? ","seq1 []  nil? ","matches []  nil? ","Diff LCS Internals  lcs  [] ","(irange\n  (int 0)\n  (send\n    (lvar :Diff LCS Internals  lcs ) :size)) each ","Diff LCS Internals  lcs  size ","Diff LCS Internals  lcs  each "]}," sdiff":{"type":"method","name":"sdiff","children":[],"call":[" diff_traversal "]}," diff":{"type":"method","name":"diff","children":[],"call":[" diff_traversal "]}," lcs":{"type":"method","name":"lcs","children":[],"call":["ret << ","block [] ","seq1 [] ","matches [] nil? ","matches [] ","matches each_with_index ","seq1 kind_of? ","Diff LCS Internals  lcs ","link [] ","vector []= ","link nil? ! ","link nil? ","links [] ","thresh size - ","thresh size ","thresh empty? ","links []= ","k - ","k > ","k nil? "," replace_next_larger ","thresh []= ","thresh [] < ","thresh [] ","thresh [] > ","bm reverse_each ","b_matches [] ","a [] ","(irange\n  (lvar :a_start)\n  (lvar :a_finish)) each ","a kind_of? "," position_hash ","a [] == ","b [] ","b_start <= ","a_start <= ","b size - ","b size ","a size - ","a size ","k positive? ","bloc replace_next_larger  [] ","Diff LCS Internals  lcs  [] nil? ","Diff LCS Internals  lcs  [] ","Diff LCS Internals  lcs  each_with_index ","seq1  replace_next_larger ind_of? ","link []  [] ","links []  [] ","lin replace_next_larger  [] ","block [] ector []= ","seq1 [] ector []= ","link []  nil? ! ","links []  nil? ! ","lin replace_next_larger  nil? ! ","link []  nil? ","links []  nil? ","lin replace_next_larger  nil? ","link [] s [] ","links [] s [] ","lin replace_next_larger s [] ","link [] s []= ","links [] s []= ","lin replace_next_larger s []= "," replace_next_larger  - "," replace_next_larger  > "," replace_next_larger  nil? ","bm reblock [] erse_each ","bm reseq1 [] erse_each ","b_matches []  reverse_each ","b_Diff LCS Internals  lcs  [] "," position_hash  [] ","(irange\n  (lblock [] ar :a_start)\n  (lblock [] ar :a_finish)) each ","(irange\n  (lseq1 [] ar :a_start)\n  (lseq1 [] ar :a_finish)) each ","(irange\n  (lvar :a_start)\n  (lvar :a size - )) each ","a  replace_next_larger ind_of? ","k positiblock [] e? ","k positiseq1 [] e? "," replace_next_larger  positive? "]}," LCS unpatch_me":{"type":"method","name":"unpatch_me","children":[],"call":[" unpatch! "," replace "," respond_to? "]}," LCS patch_me":{"type":"method","name":"patch_me","children":[],"call":[" patch! "," replace "," respond_to? "]}," run":{"type":"method","name":"run","children":[],"call":["real_output << ","e diff ","output reverse_each ","@format == ","output << << ","output << ","oldhunk diff ","hunk merge ","@lines > ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each "," puts ","File  stat mtime localtime strftime ","File  stat mtime localtime ","File  stat mtime ","File  stat ","diffs empty? ","Diff LCS  diff ","data_old == ","e chomp ","IO  readlines map ","IO  readlines ","data_new split map ","data_new split ","data_old split map ","data_old split ","new_txt ! ","old_txt ! ","data_new [] scan empty? ","data_new [] scan ","data_new [] ","data_old [] scan empty? ","data_old [] scan ","data_old [] ","@binary nil? ","IO  read ","+ * ","- * ","* * ","error << ","args options ","args size == ","args size ","o parse! ","o on_tail ","o on ","o separator ","o banner= ","File  basename ","last << ","last end_with? ! ","last end_with? ","last respond_to? ","@lines positive? ","data_new lines to_a ","data_new lines ","data_old lines to_a ","data_old lines ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  merge ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","File  stat mtime localtime strFile  stat mtime localtime strftime ime ","Diff LCS  diff  empty? ","IO  read  == ","data_old lines to_a  == ","IO  read  split map ","data_new lines to_a  split map ","IO  read  split ","data_new lines to_a  split ","data_old lines to_a  split map ","data_old lines to_a  split ","data_new [] scan empty?  ! ","data_old [] scan empty?  ! ","IO  read  [] scan empty? ","data_new lines to_a  [] scan empty? ","IO  read  [] scan ","data_new lines to_a  [] scan ","IO  read  [] ","data_new lines to_a  [] ","data_old lines to_a  [] scan empty? ","data_old lines to_a  [] scan ","data_old lines to_a  [] ","old_txt !  nil? ","oldhunk diff  << ","oldhunk diff  end_with? ! ","oldhunk diff  end_with? ","oldhunk diff  respond_to? ","IO  read  lines to_a ","data_new lines to_a  lines to_a ","IO  read  lines ","data_new lines to_a  lines ","data_old lines to_a  lines to_a ","data_old lines to_a  lines "]}," position_hash":{"type":"method","name":"position_hash","children":[],"call":["hash [] << ","hash [] ","enum [] ","interval each ","h []= ","Hash  new ","enum kind_of? ","enum enum [] ind_of? "]}," inverse_vector":{"type":"method","name":"inverse_vector","children":[],"call":["inverse []= ","vector [] ","vector [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :vector) :size)) each ","vector size ","a dup ","a dup  []= "]}," replace_next_larger":{"type":"method","name":"replace_next_larger","children":[],"call":["enum []= ","i - ","i + ","value > ","value == ","enum [] ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ","first_index + ","first_index <= ","enum size ","enum size - ","enum << ","enum empty? ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >>  - ","(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >>  + ","(send\n  (lvar :first_index) :+\n  (lvar :i - )) >> ","(send\n  (lvar :i + ) :+\n  (lvar :last_index)) >> ","(send\n  (lvar :f(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> rst_(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ndex) :+\n  (lvar :last_(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ndex)) >> ","i +  + ","f(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> rst_(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ndex + ","i +  <= ","f(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> rst_(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ndex <= ","enum s(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ze ","enum s(send\n  (lvar :first_index) :+\n  (lvar :last_index)) >> ze - "]}," intuit_diff_direction":{"type":"method","name":"intuit_diff_direction","children":[],"call":[" raise ","left_match <=> ","right_miss > ","right_match == ","left_miss > ","left_match == ","count > ","limit nil? ! ","limit nil? ","element != ","change element ","element == ","change action ","src [] ","change position ","re == ","change new_element ","le == ","change old_element ","re != ","le != ","change new_position ","change old_position ","patchset each ","src kind_of? ","right_miss zero? ","left_miss zero? "," fail ","right_miss positive? ","right_match zero? ","left_miss positive? ","left_match zero? ","src [] ft_match <=> ","src [] ft_miss > ","src [] ft_match == ","src []  != ","esrc [] ment != ","change src []  ","change esrc [] ment ","src []  == ","esrc [] ment == ","change new_src []  ","change new_esrc [] ment ","change old_src []  ","change old_esrc [] ment ","src [] ft_miss zero? ","src [] ft_miss positive? ","src [] ft_match zero? "]}," analyze_patchset":{"type":"method","name":"analyze_patchset","children":[],"call":["patchset flatten "," raise ","hunk class ","hunk flatten "," analyze_patchset ","depth + ","hunk unchanged? ! ","hunk unchanged? ","Diff LCS Change  from_a ","Diff LCS Change  valid_action? ","hunk [] ","patchset map ","depth > "," fail ","new_patchset concat ","new_patchset << ","patchset each ","Diff LCS Change  from_a  class ","Diff LCS Change  from_a  flatten ","Diff LCS Change  from_a  unchanged? ! ","Diff LCS Change  from_a  unchanged? ","Diff LCS Change  from_a  [] "]}," diff_traversal":{"type":"method","name":"diff_traversal","children":[],"call":["callbacks diffs ","block [] ","hunk map ","hunk kind_of? ","callbacks diffs map ","callbacks finish ","callbacks respond_to? "," traverse_balanced "," traverse_sequences "," callbacks_for "," callbacks_for  diffs "," callbacks_for  diffs map "," callbacks_for  finish "," callbacks_for  respond_to? ","  callbacks_for _for "]}," Hunk merge":{"type":"method","name":"merge","children":[],"call":[" blocks unshift ","hunk blocks "," blocks ","hunk start_new ","hunk start_old "," overlaps? "]}," Change finished_b?":{"type":"method","name":"finished_b?","children":[],"call":["@action == "]}," Change finished_a?":{"type":"method","name":"finished_a?","children":[],"call":["@action == "]}," Change changed?":{"type":"method","name":"changed?","children":[],"call":["@action == "]}," Change unchanged?":{"type":"method","name":"unchanged?","children":[],"call":["@action == "]}," Change deleting?":{"type":"method","name":"deleting?","children":[],"call":["@action == "]}," Change adding?":{"type":"method","name":"adding?","children":[],"call":["@action == "]}," Change inspect":{"type":"method","name":"inspect","children":[],"call":[" to_a inspect "," to_a "," class "]}," Change valid_action?":{"type":"method","name":"valid_action?","children":[],"call":[]}," DiffCallbacks finish_hunk":{"type":"method","name":"finish_hunk","children":[],"call":["@diffs << ","@hunk empty? "]}," LCS callbacks_for":{"type":"method","name":"callbacks_for","children":[],"call":[]}," Hunk encode_as":{"type":"method","name":"encode_as","children":[],"call":["arg encode ","string encoding ","args map "]}," Hunk encode":{"type":"method","name":"encode","children":[],"call":["literal encode "]}," Fixnum positive?":{"type":"method","name":"positive?","children":[],"call":[" > "]}," Hunk missing_last_newline?":{"type":"method","name":"missing_last_newline?","children":[],"call":["data [] end_with? ! ","data [] end_with? ","data [] "," encode "]}}