{" Dry Struct to_hash":{"type":"method","name":"to_hash","children":[],"call":["result []= ","Hashify  [] "," [] "," class schema keys each_with_object "," class schema keys "," class schema "," class "," attributes key? "," attributes ","key name "," class schema each_with_object "]}," Dry Struct []":{"type":"method","name":"[]","children":[],"call":[" public_send "," raise ","MissingAttributeError  new ","@attributes fetch "]}," Dry Struct initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","attributes each "]}," Dry Struct Value new":{"type":"method","name":"new","children":[],"call":[]}," Dry Struct Hashify []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Struct RepeatedAttributeError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Struct ClassInterface valid?":{"type":"method","name":"valid?","children":[],"call":[" === "]}," Dry Struct ClassInterface default?":{"type":"method","name":"default?","children":[],"call":[]}," Dry Struct ClassInterface maybe?":{"type":"method","name":"maybe?","children":[],"call":[]}," Dry Struct ClassInterface try":{"type":"method","name":"try","children":[],"call":[" block_given? ","Types Result Failure  new ","e message ","Types Result Success  new "," [] "," failure "," success "," Types Result Failure  new  "]}," Dry Struct ClassInterface default_attributes":{"type":"method","name":"default_attributes","children":[],"call":["result []= ","type [] ","type evaluate ","type default? "," schema each_with_object "," schema "," check_invalid_schema_keys "," default_attributes ","type schema "," struct? ","default_schema each_with_object ","key schema ","key name ","key type "]}," Dry Struct ClassInterface new":{"type":"method","name":"new","children":[],"call":[" raise "," constructor [] "," constructor ","attributes instance_of? "," input [] "," input "," schema [] "," schema "," load "," schema call_unsafe "," schema call_safe "," equal? ","attributes class ","error backtrace "," new ","attributes to_h ","attributes is_a? ","e backtrace "]}," Dry Struct ClassInterface schema":{"type":"method","name":"schema","children":[],"call":["super_schema merge "," superclass schema "," superclass "," superclass respond_to? "," input member_types "," input "," superclass schema  merge "]}," Dry Struct ClassInterface constructor_type":{"type":"method","name":"constructor_type","children":[],"call":[]}," Dry Struct ClassInterface check_schema_duplication":{"type":"method","name":"check_schema_duplication","children":[],"call":[" fail ","shared_keys first ","shared_keys any? ","new_schema keys & "," schema keys "," schema ","new_schema keys "," raise "," schema keys - "," superclass schema keys "," superclass schema "," superclass ","overlapping_keys first ","overlapping_keys any? ","new_keys & "," attribute_names - "," superclass attribute_names "," attribute_names ","new_schema keys &  first ","new_schema keys &  any? ","new_keys &  first ","new_keys &  any? "]}," Dry Struct ClassInterface attributes":{"type":"method","name":"attributes","children":[],"call":[" equalizer instance_variable_get concat ","new_schema keys "," equalizer instance_variable_get "," equalizer "," attr_reader ","Types  [] public_send "," schema "," constructor_type ","Types  [] ","prev_schema merge "," check_schema_duplication "," input "," schema merge "," instance_methods include? "," instance_methods ","new_schema each_key ","d attributes ","d schema key? ","d schema ","new_schema reject ","(send\n  (send nil :descendants) :select) each ","d superclass == ","d superclass "," descendants select "," descendants "," class_eval ","key inspect "," input schema ","d has_attribute? ","k to_s chomp to_sym ","k to_s chomp ","k to_s ","direct_descendants each ","keys each "," schema schema ","new_schema keys map "," define_accessors "," schema  merge "]}," Dry Struct ClassInterface attribute":{"type":"method","name":"attribute","children":[],"call":[" attributes "," raise ","type nil? "," struct_builder call "," struct_builder ","Dry Types  [] ","type is_a? "," build_type "," struct_builder call  nil? ","Dry Types  []  nil? "," struct_builder call  is_a? ","Dry Types  []  is_a? "," build_ struct_builder call  "," build_Dry Types  []  "]}," Dry Struct ClassInterface inherited":{"type":"method","name":"inherited","children":[],"call":["klass attributes "," equal? ","Types  register ","Types  identifier ","klass constructor= ","Types  [] ","klass == ","klass send ","klass equalizer ","klass constructor_type= "," constructor_type ","klass equalizer= ","Equalizer  new "," schema keys "," schema ","klass instance_variable_set "," extend ","base meta ","klass class_eval "," name eql? "," name ","klass extend ","klass name eql? ","klass name "]}," Dry Struct ClassInterface primitive":{"type":"method","name":"primitive","children":[],"call":[]}," Dry Struct ClassInterface constrained?":{"type":"method","name":"constrained?","children":[],"call":[]}," Dry Struct ClassInterface result":{"type":"method","name":"result","children":[],"call":["klass new "]}," Dry Struct ClassInterface failure":{"type":"method","name":"failure","children":[],"call":[" result "]}," Dry Struct ClassInterface success":{"type":"method","name":"success","children":[],"call":[" result "]}," Dry Struct ClassInterface extended":{"type":"method","name":"extended","children":[],"call":[]}," Dry Struct new":{"type":"method","name":"new","children":[],"call":[" class [] "," to_hash merge "," to_hash "," class "," __attributes__ merge "," __attributes__ "," raise "," class load "," class schema apply "," class schema "]}," Dry Struct ClassInterface optional?":{"type":"method","name":"optional?","children":[],"call":[]}," Dry Struct ClassInterface argument_error_msg":{"type":"method","name":"argument_error_msg","children":[],"call":["keys join "]}," Dry Struct ClassInterface check_invalid_schema_keys":{"type":"method","name":"check_invalid_schema_keys","children":[],"call":[" raise "," argument_error_msg ","invalid_keys keys ","invalid_keys any? ","type instance_of? "," schema select "," schema "]}," Dry Struct ClassInterface call":{"type":"method","name":"call","children":[],"call":[" new ","attributes is_a? "]}," Dry Struct Constructor call":{"type":"method","name":"call","children":[],"call":[" type [] "," fn [] "," fn "," type "]}," Dry Struct Constructor initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Dry Struct ClassInterface attribute_names":{"type":"method","name":"attribute_names","children":[],"call":[" schema keys "," schema "," schema map "]}," Dry Struct ClassInterface attribute?":{"type":"method","name":"attribute?","children":[],"call":[" schema key? "," schema "," attribute "," build_type meta "," build_type "," has_attribute? ","args [] ","Dry Core Deprecations  warn ","block nil? ","args size == ","args size ","Core Deprecations  warn "]}," Dry Struct ClassInterface constructor":{"type":"method","name":"constructor","children":[],"call":["Struct Constructor  new ","Constructor  new ","Constructor  [] "]}," Dry Struct __attributes__":{"type":"method","name":"__attributes__","children":[],"call":["h []= "," instance_variable_get "," class attribute_names each_with_object "," class attribute_names "," class "]}," Dry Struct inspect":{"type":"method","name":"inspect","children":[],"call":["klass inspect ","klass name ","(send\n  (send\n    (lvar :klass) :attribute_names) :map) join ","@attributes [] inspect ","@attributes [] ","klass attribute_names map ","klass attribute_names "," class "," class  inspect "," class  name ","(send\n  (send\n    (lvar : class ) :attribute_names) :map) join "," class  attribute_names map "," class  attribute_names "]}," Dry Struct":{"type":"method","name":"Struct","children":[],"call":[]}," Dry Struct Sum try_struct":{"type":"method","name":"try_struct","children":[],"call":[" right try_struct "," right "," left try_struct "," left "]}," Dry Struct Sum |":{"type":"method","name":"|","children":[],"call":[" class new "," class ","type is_a? ","type <= ","Sum  new "]}," Dry Struct Sum try":{"type":"method","name":"try","children":[],"call":[" try_struct ","input is_a? "]}," Dry Struct StructBuilder visit_constructor":{"type":"method","name":"visit_constructor","children":[],"call":[" visit "]}," Dry Struct StructBuilder visit_definition":{"type":"method","name":"visit_definition","children":[],"call":[" default_superclass "]}," Dry Struct StructBuilder visit_array":{"type":"method","name":"visit_array","children":[],"call":[" visit "]}," Dry Struct StructBuilder visit_constrained":{"type":"method","name":"visit_constrained","children":[],"call":[" visit "]}," Dry Struct StructBuilder check_name":{"type":"method","name":"check_name","children":[],"call":[" raise "," struct "," struct const_defined? "]}," Dry Struct StructBuilder const_name":{"type":"method","name":"const_name","children":[],"call":["Dry Core Inflector  camelize ","Dry Core Inflector  singularize "," array? ","Core Inflector  camelize ","Core Inflector  singularize "]}," Dry Struct StructBuilder default_superclass":{"type":"method","name":"default_superclass","children":[],"call":[" struct < "," struct "," struct value? "]}," Dry Struct StructBuilder parent":{"type":"method","name":"parent","children":[],"call":[" default_superclass "," visit ","type to_ast "," array? ","type right "," optional? "]}," Dry Struct StructBuilder array?":{"type":"method","name":"array?","children":[],"call":["type primitive equal? ","type primitive ","type is_a? ","type optional? ! ","type optional? "," type? "]}," Dry Struct StructBuilder call":{"type":"method","name":"call","children":[],"call":["type of "," array? "," struct const_set "," struct ","Class  new "," parent "," check_name "," const_name "," Class  new "," class_exec "," schema ","builder struct schema clear ","builder struct schema ","builder struct ","Undefined  equal? ","Undefined  default "," struct abstract_class ","new_type optional "," optional? ","  parent  ","  const_name  ","Class  new  optional "," Class  new  optional "]}," Dry Struct StructBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Struct MissingAttributeError initialize":{"type":"method","name":"initialize","children":[],"call":["key inspect "]}," Dry Struct ClassInterface struct?":{"type":"method","name":"struct?","children":[],"call":["type <= ","type is_a? "]}," Dry Struct ClassInterface struct_builder":{"type":"method","name":"struct_builder","children":[],"call":["StructBuilder  new freeze ","StructBuilder  new "]}," Dry Struct ClassInterface |":{"type":"method","name":"|","children":[],"call":["Struct Sum  new ","type <= ","type is_a? ","Sum  new "]}," Dry Struct ClassInterface meta":{"type":"method","name":"meta","children":[],"call":["@meta merge ","meta empty? ","Class  new ","meta equal? "," Class  new "," schema "," schema meta ","@meta merge  merge "]}," Dry Struct ClassInterface try_struct":{"type":"method","name":"try_struct","children":[],"call":["Types Result Success  new ","input is_a? "]}," Dry Struct ClassInterface transform_keys":{"type":"method","name":"transform_keys","children":[],"call":[" input "," input with_key_transform "," schema "," schema with_key_transform "]}," Dry Struct ClassInterface transform_types":{"type":"method","name":"transform_types","children":[],"call":[" input "," input with_type_transform "," schema "," schema with_type_transform "]}," Dry Struct pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp pp ","pp text ","pp group ","pp breakable ","@attributes [] ","pp seplist "," proc ","@attributes keys ","klass inspect ","klass name "," class ","column_name to_s "," class  inspect "," class  name "]}," Dry Struct ClassInterface build_type":{"type":"method","name":"build_type","children":[],"call":[" struct_builder call "," struct_builder "," raise ","type nil? ","block nil? ","Dry Types  [] ","type is_a? ","Types  [] ","Undefined  equal? "]}," Dry Struct ClassInterface has_attribute?":{"type":"method","name":"has_attribute?","children":[],"call":[" schema key? "," schema "]}," Dry Struct StructBuilder visit_nominal":{"type":"method","name":"visit_nominal","children":[],"call":[" default_superclass "]}," Dry Struct ClassInterface load":{"type":"method","name":"load","children":[],"call":["struct send "," allocate ","struct __send__ "," allocate  send "," allocate  __send__ "]}," Dry Struct Sum ===":{"type":"method","name":"===","children":[],"call":[" right === "," right "," left === "," left "]}," Dry Struct Sum call":{"type":"method","name":"call","children":[],"call":[" right try_struct "," right "," left try_struct "," left "]}," Dry Types Printer visit_struct_sum":{"type":"method","name":"visit_struct_sum","children":[],"call":[" visit_options ","sum meta "," visit_sum_constructors "]}," Dry Struct ClassInterface to_proc":{"type":"method","name":"to_proc","children":[],"call":[" call "," proc "]}," Dry Struct ClassInterface ===":{"type":"method","name":"===","children":[],"call":["other is_a? "]}," Dry Struct ClassInterface call_unsafe":{"type":"method","name":"call_unsafe","children":[],"call":[" new ","input is_a? "]}," Dry Struct ClassInterface call_safe":{"type":"method","name":"call_safe","children":[],"call":[" new ","input is_a? "]}," Dry Struct deconstruct":{"type":"method","name":"deconstruct","children":[],"call":[" attributes "]}," Dry Struct deconstruct_keys":{"type":"method","name":"deconstruct_keys","children":[],"call":[" attributes "]}," Dry Struct Value value?":{"type":"method","name":"value?","children":[],"call":[]}," Dry Struct ClassInterface value?":{"type":"method","name":"value?","children":[],"call":[]}," Dry Struct to_h":{"type":"method","name":"to_h","children":[],"call":["result []= ","Hashify  [] "," [] ","key name "," attributes key? "," attributes "," class schema each_with_object "," class schema "," class "]}," Dry Struct RecycledStructError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Struct Compiler visit_struct":{"type":"method","name":"visit_struct","children":[],"call":[" raise ","struct weakref_alive? ","struct __getobj__ "]}," Dry Struct ClassInterface define_accessors":{"type":"method","name":"define_accessors","children":[],"call":[" class_eval ","key inspect "," instance_methods include? "," instance_methods ","keys each ","483 + "]}," Dry Struct ClassInterface to_ast":{"type":"method","name":"to_ast","children":[],"call":[" schema to_ast "," schema "," WeakRef  new "]}," Dry Struct ClassInterface abstract":{"type":"method","name":"abstract","children":[],"call":[" abstract_class "]}," Dry Struct ClassInterface attributes_from":{"type":"method","name":"attributes_from","children":[],"call":[" attributes ","(send\n  (send\n    (send\n      (lvar :struct) :schema) :keys) :map) to_h ","key type ","key name ","key required? ","struct schema keys map ","struct schema keys ","struct schema "]}," Dry Struct StructBuilder optional?":{"type":"method","name":"optional?","children":[],"call":["type optional? "," type? "]}," Dry Struct StructBuilder type?":{"type":"method","name":"type?","children":[],"call":["type is_a? "]}," Dry Struct loader":{"type":"method","name":"loader","children":[],"call":["loader ignore ","loader push_dir ","loader inflector= "," Zeitwerk GemInflector  new ","loader tag= "," File  expand_path "," __dir__ "," Zeitwerk Loader  new tap "," Zeitwerk Loader  new "]}}