{" RateLimiter Limit initialize":{"type":"method","name":"initialize","children":[],"call":["options delete ","options dup ","options dup  delete ","options dup  dup "]}," RateLimiter Fetch limit":{"type":"method","name":"limit","children":[],"call":["lim add ","conn lpush ","work message ","work queue_name ","lim exceeded? ","Limit  new ","Sidekiq  redis ","(and\n  (and\n    (lvar :klass)\n    (lvar :limit))\n  (lvar :interval)) ! ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :limit))\n  (lvar :interval)) ! ","rate [] ","message [] ","JSON  parse ","(if\n  (send\n    (lvar :name) :respond_to?\n    (sym :call))\n  (send\n    (lvar :name) :call\n    (splat\n      (lvar :args)))\n  (lvar :name)) to_s ","name call ","name respond_to? ","(if\n  (send\n    (lvar :interval) :respond_to?\n    (sym :call))\n  (send\n    (lvar :interval) :call\n    (splat\n      (lvar :args)))\n  (lvar :interval)) to_f ","interval call ","interval respond_to? ","(if\n  (send\n    (lvar :limit) :respond_to?\n    (sym :call))\n  (send\n    (lvar :limit) :call\n    (splat\n      (lvar :args)))\n  (lvar :limit)) to_i ","limit call ","limit respond_to? ","rate name ","rate interval ","rate limit ","(and\n  (lvar :klass)\n  (send\n    (lvar :rate) :valid?)) ! ! ","(and\n  (lvar :klass)\n  (send\n    (lvar :rate) :valid?)) ! ","rate valid? ","Rate  new ","work job ","work respond_to? ","(if\n  (send\n    (lvar :interval) :respond_to?\n    (sym :call))\n  (send\n    (lvar :interval) :call\n    (splat\n      (lvar :args)))\n  (lvar :interval)) to_i ","Limit  new  add ","work queue_rate name  ","Limit  new  exceeded? ","(and\n  (and\n    (lvar :klass)\n    (lvar :Limit  new it))\n  (lvar :interval)) ! ! ","(and\n  (and\n    (lvar :message [] )\n    (lvar :limit))\n  (lvar :interval)) ! ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :limit))\n  (lvar :rate interval )) ! ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :rate limit ))\n  (lvar :interval)) ! ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :Limit  new it))\n  (lvar :interval)) ! ","(and\n  (and\n    (lvar :message [] )\n    (lvar :limit))\n  (lvar :interval)) ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :limit))\n  (lvar :rate interval )) ! ","(and\n  (and\n    (lvar :klass)\n    (lvar :rate limit ))\n  (lvar :interval)) ! ","Rate  new  [] ","(if\n  (send\n    (lvar :rate name ) :respond_to?\n    (sym :call))\n  (send\n    (lvar :rate name ) :call\n    (splat\n      (lvar :args)))\n  (lvar :rate name )) to_s ","(if\n  (send\n    (lvar :name) :respond_to?\n    (sym :call))\n  (send\n    (lvar :name) :call\n    (splat\n      (lvar :message [] )))\n  (lvar :name)) to_s ","rate name  call ","rate name  respond_to? ","(if\n  (send\n    (lvar :rate interval ) :respond_to?\n    (sym :call))\n  (send\n    (lvar :rate interval ) :call\n    (splat\n      (lvar :args)))\n  (lvar :rate interval )) to_f ","(if\n  (send\n    (lvar :interval) :respond_to?\n    (sym :call))\n  (send\n    (lvar :interval) :call\n    (splat\n      (lvar :message [] )))\n  (lvar :interval)) to_f ","rate interval  call ","rate interval  respond_to? ","(if\n  (send\n    (lvar :Limit  new it) :respond_to?\n    (sym :call))\n  (send\n    (lvar :Limit  new it) :call\n    (splat\n      (lvar :args)))\n  (lvar :Limit  new it)) to_i ","(if\n  (send\n    (lvar :rate limit ) :respond_to?\n    (sym :call))\n  (send\n    (lvar :rate limit ) :call\n    (splat\n      (lvar :args)))\n  (lvar :rate limit )) to_i ","(if\n  (send\n    (lvar :limit) :respond_to?\n    (sym :call))\n  (send\n    (lvar :limit) :call\n    (splat\n      (lvar :message [] )))\n  (lvar :limit)) to_i ","Limit  new it call ","rate limit  call ","Limit  new it respond_to? ","rate limit  respond_to? ","rate rate name  ","Rate  new  name ","rate rate interval  ","Rate  new  interval ","rate Limit  new it ","rate rate limit  ","Rate  new  limit ","(and\n  (lvar :message [] )\n  (send\n    (lvar :rate) :valid?)) ! ! ","(and\n  (lvar :klass)\n  (send\n    (lvar :Rate  new ) :valid?)) ! ! ","(and\n  (lvar :message [] )\n  (send\n    (lvar :rate) :valid?)) ! ","(and\n  (lvar :klass)\n  (send\n    (lvar :Rate  new ) :valid?)) ! ","Rate  new  valid? ","(if\n  (send\n    (lvar :rate interval ) :respond_to?\n    (sym :call))\n  (send\n    (lvar :rate interval ) :call\n    (splat\n      (lvar :args)))\n  (lvar :rate interval )) to_i ","(if\n  (send\n    (lvar :interval) :respond_to?\n    (sym :call))\n  (send\n    (lvar :interval) :call\n    (splat\n      (lvar :message [] )))\n  (lvar :interval)) to_i "]}," RateLimiter Fetch retrieve_work":{"type":"method","name":"retrieve_work","children":[],"call":[" limit "]}," RateLimiter Rate server_rate":{"type":"method","name":"server_rate","children":[],"call":["server_rate stringify_keys ","options [] ","Object  const_get get_sidekiq_options ","Object  const_get ","@message [] ","(send\n  (lvar :server_rate) :map) to_h ","k to_s ","server_rate map "]}," RateLimiter Rate client_rate":{"type":"method","name":"client_rate","children":[],"call":["@message [] "]}," RateLimiter Rate use_server_rate?":{"type":"method","name":"use_server_rate?","children":[],"call":[" server_rate [] respond_to? "," server_rate [] "," server_rate "]}," RateLimiter Rate rate":{"type":"method","name":"rate","children":[],"call":[" client_rate "," server_rate "," use_server_rate? "]}," RateLimiter Rate valid?":{"type":"method","name":"valid?","children":[],"call":["(and\n  (send nil :limit)\n  (send nil :interval)) ! ! ","(and\n  (send nil :limit)\n  (send nil :interval)) ! "," interval "," limit "]}," RateLimiter Rate name":{"type":"method","name":"name","children":[],"call":[" rate [] "," rate "]}," RateLimiter Rate interval":{"type":"method","name":"interval","children":[],"call":[" rate [] "," rate "]}," RateLimiter Rate limit":{"type":"method","name":"limit","children":[],"call":[" rate [] "," rate "]}," RateLimiter Rate initialize":{"type":"method","name":"initialize","children":[],"call":[]}}