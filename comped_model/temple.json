{" Temple Parsers Mustache ctag=":{"type":"method","name":"ctag=","children":[],"call":["Regexp  escape "]}," Temple Parsers Mustache ctag":{"type":"method","name":"ctag","children":[],"call":["Regexp  escape "]}," Temple Parsers Mustache otag=":{"type":"method","name":"otag=","children":[],"call":["Regexp  escape "]}," Temple Parsers Mustache otag":{"type":"method","name":"otag","children":[],"call":["Regexp  escape "]}," Temple Parsers Mustache compile_tags":{"type":"method","name":"compile_tags","children":[],"call":["res << ","2 strip to_sym ","2 strip ","2 strip split "," ctag= "," otag= "," raise ","src =~ "," ctag "," otag "]}," Temple Parsers Mustache compile":{"type":"method","name":"compile","children":[],"call":["res << "," compile_tags "," compile ","1 strip to_sym ","1 strip ","src =~ "," ctag "," otag "]}," Temple Parsers ERB compile":{"type":"method","name":"compile","children":[],"call":["result << ","1 [] == ","1 [] ","1 [] strip ","src =~ ","content << ","scanner stag= ","content chop! ","content [] == ","content [] ","scanner stag ","token to_s strip ","token to_s ","content size > ","content size ","scanner stag nil? ","token == ","token nil? ","scanner scan ","@compiler make_scanner "," raise ","src encoding ","src encoding dummy? ","src respond_to? "," append_static ","@compiler make_scanner  stag= ","@compiler make_scanner  stag ","@compiler make_scanner  stag nil? ","@compiler make_scanner  scan ","@compiler make_@compiler make_scanner  "]}," Temple Generator on_multi":{"type":"method","name":"on_multi","children":[],"call":["(send\n  (lvar :exp) :map) join "," compile_part ","exp map ","(ivar :@in_multi) join ","(send nil :preamble) flatten "," postamble "," preamble "," compile "," compile! ",";  freeze "]}," Temple Generator postamble":{"type":"method","name":"postamble","children":[],"call":[" restore_buffer "," return_buffer "]}," Temple Generator preamble":{"type":"method","name":"preamble","children":[],"call":[" create_buffer "," save_buffer "]}," Temple Generator buffer":{"type":"method","name":"buffer","children":[],"call":["@options [] + ","@options [] "," options [] "," options "]}," Temple Generator compile_part":{"type":"method","name":"compile_part","children":[],"call":[" send ","exp [] ","exp first "]}," Temple Generator compile":{"type":"method","name":"compile","children":[],"call":[" preamble + + "," postamble "," preamble + "," compile_part "," preamble "," concat ","CONCATABLE  include? ","exp first "," send ","exp [] ","(send nil :preamble) join "," compile ","recv send "," compile! "," raise ","exp inspect "," respond_to? ","  send pond_to? "]}," Temple Generator initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  merge "]}," Temple Filters StaticMerger on_multi":{"type":"method","name":"on_multi","children":[],"call":["res << "," compile ","curr << ","exp [] ","exp [] dup ","state == ","exp first == ","exp first ","exps each "," compile! ","result [] ","result size == ","result size ","result << ","exp last dup ","exp last ","text << ","exp [] dup  << ","exp last dup  << "]}," Temple Filters StaticMerger compile":{"type":"method","name":"compile","children":[],"call":[" on_multi ","exp [] ","exp first == ","exp first "]}," Temple Filters Mustache on_section":{"type":"method","name":"on_section","children":[],"call":["res pop ","res << ","block split each ","block split ","name to_s ","name inspect "," tmpid "," compile "]}," Temple Filters Mustache on_var":{"type":"method","name":"on_var","children":[],"call":["name inspect "]}," Temple Filters Mustache on_evar":{"type":"method","name":"on_evar","children":[],"call":["exp []= ","exp [] "," on_var "," on_var  []= "," on_var  [] "]}," Temple Filters Mustache compile":{"type":"method","name":"compile","children":[],"call":[" compile ","exp [] map ","exp [] "," send ","exp first "]}," Temple Filters Mustache tmpid":{"type":"method","name":"tmpid","children":[],"call":[]}," Temple Filters Mustache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Filters Escapable is_escape?":{"type":"method","name":"is_escape?","children":[],"call":["exp [] == ","exp [] ","exp respond_to? "]}," Temple Filters Escapable compile":{"type":"method","name":"compile","children":[],"call":[" compile ","exp map ","@escaper % ","exp [] "," is_escape? "," eval ","exp [] [] inspect ","exp [] [] ","exp [] == ","exp is_a? ","exp is_a? ! "," raise "]}," Temple Filters Escapable initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," eval ","@escape_code % "," options [] "," options "]}," Temple Filters DynamicInliner dynamic":{"type":"method","name":"dynamic","children":[],"call":["#{%s} % "]}," Temple Filters DynamicInliner static":{"type":"method","name":"static","children":[],"call":["str inspect [] ","str inspect ","Generator  to_ruby [] ","Generator  to_ruby "]}," Temple Filters DynamicInliner on_multi":{"type":"method","name":"on_multi","children":[],"call":["res << "," compile ","head == ","state == ","curr [] << ","curr [] "," send ","\" + ","(send\n  (lvar :exps) :+\n  (array\n    (sym :noop))) each ","exps + ","res concat ","prev << "," compile! ","result [] ","result size == ","result size ","result concat ","state != ","result << ","arg inspect [] ","arg inspect ","type == ","exps each ","\" dup "]}," Temple Filters DynamicInliner compile":{"type":"method","name":"compile","children":[],"call":[" on_multi ","exp [] ","exp first == ","exp first "]}," Temple Engine compile":{"type":"method","name":"compile","children":[],"call":["e compile ","@chain inject "," chain inject "," chain "]}," Temple Engine initialize":{"type":"method","name":"initialize","children":[],"call":["filter new "," class filters map "," class filters "," class ","memo []= ","options [] ","options has_key? ","args inject ","args pop ","args last is_a? ","args last ","args last dup ","result []= "," options [] "," options "," options has_key? ","opt each "," class chain dup "," class chain "," build_chain ","block call ","(splat\n  (send\n    (send nil :options) :[]\n    (sym :chain))) compact each ","(splat\n  (send\n    (send nil :options) :[]\n    (sym :chain))) compact "," block_given? ","args pop ions [] ","args last ions [] ","args last dup ions [] ","args pop ions has_key? ","args last ions has_key? ","args last dup ions has_key? "," args pop ions [] "," args last ions [] "," args last dup ions [] "," args pop ions "," args last ions "," args last dup ions "," args pop ions has_key? "," args last ions has_key? "," args last dup ions has_key? ","args pop  each ","args last  each ","args last dup  each ","(splat\n  (send\n    (send nil :args pop ions) :[]\n    (sym :chain))) compact each ","(splat\n  (send\n    (send nil :args last ions) :[]\n    (sym :chain))) compact each ","(splat\n  (send\n    (send nil :args last dup ions) :[]\n    (sym :chain))) compact each ","(splat\n  (send\n    (send nil :args pop ions) :[]\n    (sym :chain))) compact ","(splat\n  (send\n    (send nil :args last ions) :[]\n    (sym :chain))) compact ","(splat\n  (send\n    (send nil :args last dup ions) :[]\n    (sym :chain))) compact "]}," Temple Engine generator":{"type":"method","name":"generator","children":[],"call":[]}," Temple Engine filter":{"type":"method","name":"filter","children":[],"call":[]}," Temple Engine parser":{"type":"method","name":"parser","children":[],"call":[]}," Temple Engine use":{"type":"method","name":"use","children":[],"call":[]}," Temple Engine filters":{"type":"method","name":"filters","children":[],"call":[]}," Temple Core Interpolation on_block":{"type":"method","name":"on_block","children":[],"call":["#{%s;nil} % "]}," Temple Core Interpolation on_multi":{"type":"method","name":"on_multi","children":[],"call":["#{%s} % ","(send\n  (lvar :exps) :map) join "," compile ","exp [] ","exp [] == ","exps map ","exps detect "]}," Temple Core Interpolation on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":["#{%s} % "]}," Temple Core Interpolation on_static":{"type":"method","name":"on_static","children":[],"call":["text inspect [] ","text inspect "]}," Temple Core Interpolation postamble":{"type":"method","name":"postamble","children":[],"call":[]}," Temple Core Interpolation preamble":{"type":"method","name":"preamble","children":[],"call":[]}," Temple Core StringBuffer on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" buffer ","Utils  literal_string? ","@options [] "," concat + "," concat "]}," Temple Core StringBuffer postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Core StringBuffer preamble":{"type":"method","name":"preamble","children":[],"call":[" buffer "]}," Temple Core Array postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Core ArrayBuffer on_block":{"type":"method","name":"on_block","children":[],"call":["code + "]}," Temple Core ArrayBuffer on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" buffer "," concat "]}," Temple Core ArrayBuffer on_static":{"type":"method","name":"on_static","children":[],"call":[" buffer ","text inspect "," to_ruby "," concat "]}," Temple Core ArrayBuffer postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Core ArrayBuffer preamble":{"type":"method","name":"preamble","children":[],"call":[" buffer "]}," Temple Utils literal_string?":{"type":"method","name":"literal_string?","children":[],"call":["lexer token nil? ","lexer token ","LITERAL_TOKENS  include? ","lexer token class ","lexer set_input ","StringIO  new ","str strip ","RubyLex  new ","RubyLex  new  token nil? ","RubyLex  new  token ","RubyLex  new  token class ","RubyLex  new  set_input "]}," Temple Parsers ERB initialize":{"type":"method","name":"initialize","children":[],"call":["Compiler  new ","options [] "]}," Temple Generator on_capture":{"type":"method","name":"on_capture","children":[],"call":["@options []= ","CONCATABLE  include? ","block first "," compile ","name to_s ","@options [] ","(send\n  (ivar :@capture) :preamble) join ","@capture postamble ","@capture compile ","@capture preamble "," capture_generator new "," capture_generator "," capture_generator new compile "," options [] new compile "," options [] new "," options [] "," options "," capture_generator new call "," options [] new call ","(send\n  (ivar : capture_generator new ) :preamble) join "," capture_generator new  postamble "," capture_generator new  compile "," capture_generator new  preamble "]}," Temple Generator on_newline":{"type":"method","name":"on_newline","children":[],"call":[]}," Temple Generator concat":{"type":"method","name":"concat","children":[],"call":[" buffer "]}," Temple Generator to_ruby":{"type":"method","name":"to_ruby","children":[],"call":["Generator  to_ruby "]}," Temple Filters StaticMerger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Filters MultiFlattener compile":{"type":"method","name":"compile","children":[],"call":["result << ","result concat ","e [] ","e first == ","e first "," compile ","exp [] each ","exp [] ","exp length == ","exp length ","exp first == ","exp first "," on_multi ","r compile sult << ","r compile sult concat "," compile  [] "," compile  first == "," compile  first "," compil compile  "," compile xp []  compile ach "," compile xp [] "," compile xp l compile ngth == "," compile xp l compile ngth "," compile xp first == "," compile xp first "]}," Temple Filters MultiFlattener initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Filters DynamicInliner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Engines ERB detect_magic_comment":{"type":"method","name":"detect_magic_comment","children":[],"call":["Encoding  find ","1 sub ","comment [] "," percent? "]}," Temple Engines ERB percent?":{"type":"method","name":"percent?","children":[],"call":["@trim_mode include? ","@trim_mode is_a? "]}," Temple Engines ERB initialize":{"type":"method","name":"initialize","children":[],"call":["@src << ","@src insert ","str encoding "," detect_magic_comment ","str respond_to? ","@generator compile ","e compile ","Optimizers  inject ","@parser compile ","@generator new ","@generator is_a? ","options [] ","Parsers ERB  new ","@generator compile  << ","@generator compile  insert ","@generator new  compile ","Parsers ERB  new  compile ","@generator new  new ","@generator new  is_a? "]}," Temple Engines ERB suck!":{"type":"method","name":"suck!","children":[],"call":[]}," Temple Engines ERB rock!":{"type":"method","name":"rock!","children":[],"call":[]}," Temple Utils empty_exp?":{"type":"method","name":"empty_exp?","children":[],"call":["e [] == ","e [] ","exp [] all? ","exp [] "," empty_exp? "]}," Temple Parsers ERB append_static":{"type":"method","name":"append_static","children":[],"call":["result << ","content count times ","content count "]}," Temple HTML Fast on_basicattr":{"type":"method","name":"on_basicattr","children":[],"call":["@options [] "]}," Temple HTML Fast merge_basicattrs":{"type":"method","name":"merge_basicattrs","children":[],"call":["final << ","result each_with_index ","result << ","position []= ","result size ","result []= ","name == ","result [] last ","result [] ","position [] ","attrs each ","position [] ition []= ","position [] ition [] "]}," Temple HTML Fast attr_easily_compilable?":{"type":"method","name":"attr_easily_compilable?","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","exp [] == "]}," Temple HTML Fast on_attrs":{"type":"method","name":"on_attrs","children":[],"call":[" raise "," compile "," merge_basicattrs map "," merge_basicattrs "," attr_easily_compilable? ","exp all? "]}," Temple HTML Fast on_tag":{"type":"method","name":"on_tag","children":[],"call":["result << ","ac ! "," compile "," xhtml? ","@options [] include? ","@options [] ","@options [] include?  ! "]}," Temple HTML Fast on_comment":{"type":"method","name":"on_comment","children":[],"call":[" compile "]}," Temple HTML Fast on_doctype":{"type":"method","name":"on_doctype","children":[],"call":["str << "," html4? "," xhtml? "," html5? ","text split [] ","text split ","@options [] ","(sym :multi) concat ","(array\n  (sym :newline)) * ","trailing_newlines size "," html? ","text index == ","text index ","type to_s downcase strip ","type to_s downcase ","type to_s ","type [] to_s ","type [] ","type to_s downcase strip  split [] ","type to_s downcase strip  split ","type [] to_s  size ","type to_s downcase strip  index == ","type to_s downcase strip  index "]}," Temple HTML Fast on_multi":{"type":"method","name":"on_multi","children":[],"call":[" compile ","exp map "]}," Temple HTML Fast compile":{"type":"method","name":"compile","children":[],"call":[" send ","exp [] "]}," Temple HTML Fast html4?":{"type":"method","name":"html4?","children":[],"call":["@options [] == ","@options [] "," options [] == "," options [] "," options "]}," Temple HTML Fast html5?":{"type":"method","name":"html5?","children":[],"call":["@options [] == ","@options [] "," options [] == "," options [] "," options "]}," Temple HTML Fast html?":{"type":"method","name":"html?","children":[],"call":[" html4? "," html5? "," options [] == "," options [] "," options ","HTML  include? "," xhtml? ! "," xhtml? "]}," Temple HTML Fast xhtml?":{"type":"method","name":"xhtml?","children":[],"call":["@options [] == ","@options [] "," options [] == "," options [] "," options "]}," Temple HTML Fast initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@options [] inspect ","@options [] ","(sym :xhtml) include? ","DEFAULT_OPTIONS  merge ","@options []= ","@options [] == ","wrapper inspect ","@format == ","wrapper == "," options [] "," options ","@format inspect "," warn "," options [] inspect "," options []= "," options [] == "," xhtml? ","DEFAULT_OPTIONS  merge  [] inspect ","DEFAULT_OPTIONS  merge  [] ","DEFAULT_OPTIONS  merge  []= ","DEFAULT_OPTIONS  merge  [] == "," options []  inspect "," options []  == "]}," Temple Filters MultiFlattener on_multi":{"type":"method","name":"on_multi","children":[],"call":["result << ","result concat ","exp [] ","exp first == ","exp first "," compile ","exps each ","exps first ","exps length == ","exps length "," compile! ","exps size == ","exps size "," compile  [] "," compile!  [] "," compile  first == "," compile!  first == "," compile  first "," compile!  first "," compile s each "," compile! s each "," compile s first "," compile! s first "," compile s length == "," compile! s length == "," compile s length "," compile! s length "," compile s size == "," compile! s size == "," compile s size "," compile! s size "]}," Temple HTML Fast on_capture":{"type":"method","name":"on_capture","children":[],"call":[" compile "]}," Temple Generator capture_generator":{"type":"method","name":"capture_generator","children":[],"call":["@options [] "," options [] "," options ","Generators  const_get ","Class  === "," class "]}," Temple Utils escape_html":{"type":"method","name":"escape_html","children":[],"call":["html to_s gsub gsub gsub gsub gsub ","html to_s gsub gsub gsub gsub ","html to_s gsub gsub gsub ","html to_s gsub gsub ","html to_s gsub ","html to_s ","EscapeUtils  escape_html ","CGI  escapeHTML ","ESCAPE_HTML  [] "]}," Temple Utils escape_html_safe":{"type":"method","name":"escape_html_safe","children":[],"call":[" escape_html ","html html_safe? ","s html_safe? ","html to_s "," ehtml to_s cape_html ","html html_html to_s afe? ","html to_s  html_html to_s afe? ","html to_html to_s  "]}," Temple Template precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[]}," Temple Template prepare":{"type":"method","name":"prepare","children":[],"call":[" class engine new compile "," data "," class engine new "," options merge "," eval_file "," options "," class engine "," class "]}," Temple Template engine":{"type":"method","name":"engine","children":[],"call":[" raise "]}," Temple Mixins Options ClassMethods default_options":{"type":"method","name":"default_options","children":[],"call":[" superclass default_options dup "," superclass default_options "," superclass "," superclass respond_to? "," superclass default_options [] ","Hash  new "]}," Temple Mixins Options ClassMethods set_default_options":{"type":"method","name":"set_default_options","children":[],"call":[" default_options merge! "," default_options "]}," Temple Mixins Options initialize":{"type":"method","name":"initialize","children":[],"call":[" class default_options merge "," class default_options "," class ","ImmutableMap  new "," update update update "," update update "," class thread_options "," update "," class options "," class options validate_map! ","Utils ImmutableHash  new ","ImmutableHash  new "," class default_options validate_hash! "]}," Temple Mixins Options included":{"type":"method","name":"included","children":[],"call":[]}," Temple Mixins Dispatcher ClassMethods temple_dispatch":{"type":"method","name":"temple_dispatch","children":[],"call":[" class_eval ","base to_s inspect ","base to_s ","bases each "]}," Temple Mixins Dispatcher on_capture":{"type":"method","name":"on_capture","children":[],"call":[" compile! "]}," Temple Mixins Dispatcher on_multi":{"type":"method","name":"on_multi","children":[],"call":[" compile! ","exps map "]}," Temple Mixins Dispatcher compile!":{"type":"method","name":"compile!","children":[],"call":[" send "," respond_to? "]}," Temple Mixins Dispatcher compile":{"type":"method","name":"compile","children":[],"call":[" compile! "," send "," respond_to? "]}," Temple Mixins Dispatcher included":{"type":"method","name":"included","children":[],"call":[]}," Temple HTML Pretty tag_indent":{"type":"method","name":"tag_indent","children":[],"call":[" indent ","INDENT_TAGS  include? "," options [] include? "," options [] "," options ","@indent_next != ","@format == ","@last != "," options [] include?  != "]}," Temple HTML Pretty indent":{"type":"method","name":"indent","children":[],"call":["\n + ","(or\n  (send\n    (send nil :options) :[]\n    (sym :indent))\n  (str \"\")) * ","@stack size "," options [] "," options ","@stack include? "]}," Temple HTML Pretty on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":["result << "," tag_indent ","closed ! ","@stack pop "," compile! ","@stack << "," xhtml? "," raise "," empty_exp? ! "," empty_exp? "," options [] include? "," options [] "," options "," options [] ! "," options [] include? ! "," compile ","@pre_tags ! ","(if\n  (and\n    (lvar :closed)\n    (send\n      (ivar :@format) :!=\n      (sym :html)))\n  (str \" /\")\n  (str \"\")) + ","@format != ","content ! ","name to_s ","(if\n  (and\n    (lvar :closed)\n    (send nil :xhtml?))\n  (str \" /\")\n  (str \"\")) + "," tag_ tag_indent  ","name to_s  to_s "]}," Temple HTML Pretty on_html_comment":{"type":"method","name":"on_html_comment","children":[],"call":[" indent "," options [] ! "," options [] "," options "," tag_indent "]}," Temple HTML Pretty on_html_doctype":{"type":"method","name":"on_html_doctype","children":[],"call":[" tag_indent "]}," Temple HTML Pretty on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" indent inspect "," indent "," options [] "," options ","@preformatted ! ",",  + ","indent_next inspect "," unique_name "," respond_to? ","indent_code << "," options [] include? "]}," Temple HTML Pretty on_static":{"type":"method","name":"on_static","children":[],"call":["content gsub "," indent "," options [] "," options ","@preformatted ! ","\n freeze ","content sub ","@pre_tags =~ ","content sub! ","Utils  indent ","content gsub! ","@pre_tags !~ "," options [] include? ","content gsub  gsub ","content sub  gsub ","Utils  indent  gsub ","content gsub  sub ","content sub  sub ","Utils  indent  sub ","content gsub  sub! ","content sub  sub! ","Utils  indent  sub! ","content gsub  gsub! ","content sub  gsub! ","Utils  indent  gsub! "]}," Temple HTML Pretty initialize":{"type":"method","name":"initialize","children":[],"call":[" options [] "," options ","Regexp  union "," options [] map ","@format != ","Regexp  new ","(send\n  (send\n    (send nil :options) :[]\n    (sym :pre_tags)) :map) join "]}," Temple HTML Fast on_html_staticattrs":{"type":"method","name":"on_html_staticattrs","children":[],"call":["list << "," options [] "," options ","result sort inject ","result sort ","result []= ","name == ","result [] "," raise "," options [] ! ","(str \"class\") include? ","attrs each "," compile_attribute "]}," Temple HTML Fast on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":["result << ","closed ! ","result << << "," compile! "," xhtml? "," raise "," empty_exp? ! "," empty_exp? "," options [] include? "," options [] "," options "," compile ","(if\n  (and\n    (lvar :closed)\n    (send\n      (ivar :@format) :!=\n      (sym :html)))\n  (str \" /\")\n  (str \"\")) + ","@format != ","@format == ","content ! ","name to_s ","(if\n  (and\n    (lvar :closed)\n    (send nil :xhtml?))\n  (str \" /\")\n  (str \"\")) + ","name to_s  to_s "]}," Temple HTML Fast on_html_comment":{"type":"method","name":"on_html_comment","children":[],"call":[" compile! "," compile "]}," Temple HTML Fast on_html_doctype":{"type":"method","name":"on_html_doctype","children":[],"call":["str << ","XHTML_DOCTYPES  [] ","HTML4_DOCTYPES  [] "," options [] "," options ","text split [] ","text split "," raise "," html? ","text =~ ","type downcase strip ","type downcase ","type [] to_s ","type [] ","DOCTYPES  [] [] ","DOCTYPES  [] ","@format == ","type =~ ","type to_s downcase ","type to_s ","HTML_DOCTYPES  [] ","type downcase strip  split [] ","type downcase strip  split ","type downcase strip  =~ ","type do options [] ncase strip ","type to_s downcase  downcase strip ","type to_s  downcase strip ","type do options [] ncase ","type to_s downcase  downcase ","type to_s  downcase ","type to_s downcase  [] to_s ","type to_s  [] to_s ","type to_s downcase  [] ","type to_s  [] ","type to_s downcase  =~ ","type to_s  =~ ","type to_s do options [] ncase ","type to_s downcase  to_s downcase ","type to_s  to_s downcase ","type to_s downcase  to_s ","type to_s  to_s "]}," Temple Generators StringBuffer on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" concat + "," concat "]}," Temple Generators StringBuffer preamble":{"type":"method","name":"preamble","children":[],"call":[" buffer "]}," Temple Generators Array postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Generators ArrayBuffer on_block":{"type":"method","name":"on_block","children":[],"call":[]}," Temple Generators ArrayBuffer on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" concat "]}," Temple Generators ArrayBuffer on_static":{"type":"method","name":"on_static","children":[],"call":[" concat ","text inspect "]}," Temple Generators ArrayBuffer postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Generators ArrayBuffer preamble":{"type":"method","name":"preamble","children":[],"call":[" buffer "]}," Temple Generator compile!":{"type":"method","name":"compile!","children":[],"call":[" send "]}," Temple Filters EscapeHTML on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":[" compile! "]}," Temple Filters EscapeHTML on_html_comment":{"type":"method","name":"on_html_comment","children":[],"call":[" compile! "]}," Temple Filters EscapeHTML on_html_staticattrs":{"type":"method","name":"on_html_staticattrs","children":[],"call":[" compile! ","attrs map "]}," Temple Filters EscapeHTML on_escape_dynamic":{"type":"method","name":"on_escape_dynamic","children":[],"call":[" options [] "," options "]}," Temple Filters EscapeHTML on_escape_static":{"type":"method","name":"on_escape_static","children":[],"call":[" escape_html "," escape_html_safe "," options [] "," options "]}," Temple Filters Debugger compile":{"type":"method","name":"compile","children":[],"call":[" puts ","exp inspect "," options [] "," options "," p "," pp "]}," Temple ERB Trimming static?":{"type":"method","name":"static?","children":[],"call":["exp [] == ","exp [] "]}," Temple ERB Trimming code?":{"type":"method","name":"code?","children":[],"call":["exp [] == ","exp [] "]}," Temple ERB Trimming on_multi":{"type":"method","name":"on_multi","children":[],"call":["exps [] [] gsub! ","exps [] [] ","exps [] ","i + ","exps [] [] =~ "," static? ","i - ","exps [] ! "," code? ","exps each_with_index ","b [] gsub! ","b [] ","exps each_cons "," options [] "," options ","e last rstrip ","e last ","exps [] first == ","exps [] first ","i < ","exps size - ","exps size ","e first == ","e first ","e last lstrip ","i > ","exps each_with_index map ","exps delete_at ","exps [] == "]}," Temple ERB Parser compile":{"type":"method","name":"compile","children":[],"call":["result << ","input [] "," options [] ! "," options [] "," options ","indicator length > ","indicator length ","code count times ","code count ","ESCAPED  [] ","text empty? ! ","text empty? ","m end ","m begin ","Regexp  last_match ","input scan ","code count tiRegexp  last_match es ","input []  empty? ! ","text eRegexp  last_match pty? ! ","input []  empty? ","text eRegexp  last_match pty? ","Regexp  last_match  end ","Regexp  last_match  begin ","Regexp  last_Regexp  last_match atch "]}," Temple Filters Debugger initialize":{"type":"method","name":"initialize","children":[],"call":[" require "," options [] "," options "]}," Temple Generators RailsOutputBuffer concat":{"type":"method","name":"concat","children":[],"call":[" buffer "]}," Temple Generators RailsOutputBuffer preamble":{"type":"method","name":"preamble","children":[],"call":[" options [] "," options "," buffer "," options [] == "]}," Temple Engine chain":{"type":"method","name":"chain","children":[],"call":["f call "," options "," class chain map "," class chain "," class "]}," Temple Utils indent":{"type":"method","name":"indent","children":[],"call":["text gsub ","pre_tags =~ ","text gsub! ","pre_tags !~ ","text to_s ","text to_s  gsub ","text to_s  gsub! ","text to_s  to_s "]}," Temple HTML Pretty preamble":{"type":"method","name":"preamble","children":[],"call":["(send\n  (send\n    (send nil :options) :[]\n    (sym :pre_tags)) :map) join "," options [] map "," options [] "," options ","@pre_tags source "," unique_name "]}," Temple HTML Pretty compile":{"type":"method","name":"compile","children":[],"call":[" compile! "," preamble "]}," Temple Utils indent_dynamic":{"type":"method","name":"indent_dynamic","children":[],"call":["text html_safe ","text gsub ","\n freeze ","text sub ","level > ","text scan map min ","text scan map ","text scan ","text =~ ","text html_safe? ","text respond_to? ","text to_s ","text gsub  html_safe ","text sub  html_safe ","text to_s  html_safe ","text gsub  gsub ","text sub  gsub ","text to_s  gsub ","text gsub  sub ","text sub  sub ","text to_s  sub ","text scan map min  > ","text gsub  scan map min ","text sub  scan map min ","text to_s  scan map min ","text gsub  scan map ","text sub  scan map ","text to_s  scan map ","text gsub  scan ","text sub  scan ","text to_s  scan ","text gsub  =~ ","text sub  =~ ","text to_s  =~ ","text gsub  html_safe? ","text sub  html_safe? ","text to_s  html_safe? ","text gsub  respond_to? ","text sub  respond_to? ","text to_s  respond_to? ","text gsub  to_s ","text sub  to_s ","text to_s  to_s "]}," Temple Utils unique_name":{"type":"method","name":"unique_name","children":[],"call":[" class name gsub downcase "," class name gsub ","_ freeze ",":: freeze "," class name "," class "]}," Temple Templates method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Temple Templates Tilt register_as":{"type":"method","name":"register_as","children":[],"call":[]}," Temple Templates Tilt precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[]}," Temple Templates Tilt prepare":{"type":"method","name":"prepare","children":[],"call":[" class compile "," data "," class ","opts []= ","opts delete ","opts include? "," metadata []= "," metadata "," update update update "," eval_file "," update update "," options "," update "," class options "," class build_engine call "," class build_engine "," class default_options ","opts [] "," update update update  []= "," update update update  delete "," update update update  include? "," update update update  [] "]}," Temple Templates Rails register_as":{"type":"method","name":"register_as","children":[],"call":[]}," Temple Templates Rails supports_streaming?":{"type":"method","name":"supports_streaming?","children":[],"call":[" class options [] "," class options "," class "," class default_options [] "," class default_options "]}," Temple Templates Rails call":{"type":"method","name":"call","children":[],"call":[" class compile ","template source "," class ","opts []= ","template short_identifier ","template format == ","template format ","ActionView Base  try "," update update ","template identifier "," update "," class options "," class build_engine call "," class build_engine "," class default_options "," update update  []= "]}," Temple StaticAnalyzer SyntaxChecker on_parse_error":{"type":"method","name":"on_parse_error","children":[],"call":[" raise "]}," Temple StaticAnalyzer syntax_error?":{"type":"method","name":"syntax_error?","children":[],"call":["SyntaxChecker  new parse ","SyntaxChecker  new "]}," Temple StaticAnalyzer static?":{"type":"method","name":"static?","children":[],"call":["STATIC_OPERATORS  include? ","STATIC_KEYWORDS  include? ","Ripper  lex each ","Ripper  lex "," syntax_error? ","code strip empty? ","code strip ","code nil? "]}," Temple StaticAnalyzer available?":{"type":"method","name":"available?","children":[],"call":["Ripper  respond_to? "]}," Temple Mixins Template create":{"type":"method","name":"create","children":[],"call":["template register_as ","template options update ","template options ","template options []= ","template disable_option_validator! ","Class  new ","options delete ","options [] ","template init ","template default_options update ","template default_options ","template default_options []= ","Class  new  register_as ","template options delete  ","Class  new  options update ","Class  new  options ","Class  new  options []= ","Class  new  disable_option_validator! ","Class  new  init ","Class  new  default_options update ","Class  new  default_options ","Class  new  default_options []= "]}," Temple Mixins Template register_as":{"type":"method","name":"register_as","children":[],"call":[" raise "]}," Temple Mixins Template compile":{"type":"method","name":"compile","children":[],"call":["engine new call ","engine new "," raise ","options delete ","options delete  new call ","options delete  new "]}," Temple Mixins ThreadOptions thread_options_key":{"type":"method","name":"thread_options_key","children":[],"call":["(begin\n  (send\n    (self) :name)) to_sym "," name "]}," Temple Mixins ThreadOptions thread_options":{"type":"method","name":"thread_options","children":[],"call":["Thread  current [] "," thread_options_key ","Thread  current "]}," Temple Mixins ThreadOptions with_options":{"type":"method","name":"with_options","children":[],"call":["Thread  current []= "," thread_options_key ","Thread  current ","ImmutableMap  new "," thread_options ","ImmutableHash  new "]}," Temple Mixins ClassOptions disable_option_validator!":{"type":"method","name":"disable_option_validator!","children":[],"call":[]}," Temple Mixins ClassOptions define_deprecated_options":{"type":"method","name":"define_deprecated_options","children":[],"call":[" options add_deprecated_keys "," options "," options update ","hash keys ","opts pop to_hash ","opts pop ","opts last respond_to? ","opts last ","opts pop to_hash  keys ","opts pop to_opts pop to_hash  "]}," Temple Mixins ClassOptions define_options":{"type":"method","name":"define_options","children":[],"call":[" options add_valid_keys "," options "," options update ","hash keys ","opts pop to_hash ","opts pop ","opts last respond_to? ","opts last ","opts pop to_hash  keys ","opts pop to_opts pop to_hash  "]}," Temple Mixins ClassOptions options":{"type":"method","name":"options","children":[],"call":[" warn ","key inspect ","OptionMap  new "," superclass options "," superclass "," superclass respond_to? "]}," Temple Mixins ClassOptions set_options":{"type":"method","name":"set_options","children":[],"call":[" options update "," options "]}," Temple Mixins ClassOptions default_options":{"type":"method","name":"default_options","children":[],"call":[" options "," warn "]}," Temple Mixins ClassOptions set_default_options":{"type":"method","name":"set_default_options","children":[],"call":[" set_options "," warn "]}," Temple Mixins GrammarDSL const_missing":{"type":"method","name":"const_missing","children":[],"call":[" const_set ","Root  new "]}," Temple Mixins GrammarDSL Rule":{"type":"method","name":"Rule","children":[],"call":[" raise ","rule inspect ","c << ","curr each "," Value ","Element  new ","curr << ","2 == ","elem << ","2 != "," const_get ","rule each ","Or  new ","elem =~ "," Value  << ","Element  new  << "," Value  =~ ","Element  new  =~ "]}," Temple Mixins GrammarDSL Value":{"type":"method","name":"Value","children":[],"call":["Value  new "]}," Temple Mixins GrammarDSL validate!":{"type":"method","name":"validate!","children":[],"call":[" const_get validate! "," const_get "]}," Temple Mixins GrammarDSL match?":{"type":"method","name":"match?","children":[],"call":[" const_get match? "," const_get "]}," Temple Mixins GrammarDSL extended":{"type":"method","name":"extended","children":[],"call":[" const_get copy_to "," const_get ","Rule  === "," constants each "," constants ","mod extend "]}," Temple Mixins GrammarDSL Value match":{"type":"method","name":"match","children":[],"call":["@value === "]}," Temple Mixins GrammarDSL Value initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Mixins GrammarDSL Element after_copy":{"type":"method","name":"after_copy","children":[],"call":["@rule copy_to ","child copy_to ","child == ","@children map ","@rule copy_to  copy_to "]}," Temple Mixins GrammarDSL Element match":{"type":"method","name":"match","children":[],"call":["@rule match ","exp empty? ! ","exp empty? ","Array  === "]}," Temple Mixins GrammarDSL Element initialize":{"type":"method","name":"initialize","children":[],"call":["grammar Rule "]}," Temple Mixins GrammarDSL Root after_copy":{"type":"method","name":"after_copy","children":[],"call":["@grammar const_set "]}," Temple Mixins GrammarDSL Root copy_to":{"type":"method","name":"copy_to","children":[],"call":["grammar const_get ","grammar const_defined? "]}," Temple Mixins GrammarDSL Root validate!":{"type":"method","name":"validate!","children":[],"call":[" raise ","PP  pp ","entry first ","entry last ","u flatten size < ","entry flatten size ","entry flatten ","u flatten size ","u flatten ","unmatched reverse_each ","unmatched first "," require "," match ","(begin\n  (ivar :@grammar)) dup ","(send\n  (lvar :unmatched) :sort_by) first ","(splat\n  (lvar :e)) flatten size ","(splat\n  (lvar :e)) flatten ","unmatched sort_by ","unmatched first  first ","unmatched first  last ","unmatched first  flatten size ","unmatched first  flatten "]}," Temple Mixins GrammarDSL Root match":{"type":"method","name":"match","children":[],"call":["unmatched << "]}," Temple Mixins GrammarDSL Root initialize":{"type":"method","name":"initialize","children":[],"call":["name to_sym "]}," Temple Mixins GrammarDSL Or after_copy":{"type":"method","name":"after_copy","children":[],"call":["child copy_to ","@children map "]}," Temple Mixins GrammarDSL Or match":{"type":"method","name":"match","children":[],"call":["unmatched concat ","rule match ","@children any? ","unmatched push "]}," Temple Mixins GrammarDSL Or <<":{"type":"method","name":"<<","children":[],"call":["@children << ","@grammar Rule "]}," Temple Mixins GrammarDSL Or initialize":{"type":"method","name":"initialize","children":[],"call":["@grammar Rule ","children map "]}," Temple Mixins GrammarDSL Rule copy_to":{"type":"method","name":"copy_to","children":[],"call":["copy after_copy ","copy respond_to? "," dup instance_eval "," dup "]}," Temple Mixins GrammarDSL Rule |":{"type":"method","name":"|","children":[],"call":["Or  new "]}," Temple Mixins GrammarDSL Rule match?":{"type":"method","name":"match?","children":[],"call":[" match "]}," Temple Mixins GrammarDSL Rule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Mixins EngineDSL chain_element":{"type":"method","name":"chain_element","children":[],"call":[" proc "," raise ","filter respond_to? ","args empty? "," chain_class_constructor ","args first ","args size > ","args size "," chain_proc_constructor ","args shift ","Symbol  === ","filter name to_sym ","filter name ","Class  === "," chain_callable_constructor ","filter filter name to_sym  to_sym ","filter args shift  to_sym ","filter filter name to_sym  ","filter args shift  "]}," Temple Mixins EngineDSL chain_proc_constructor":{"type":"method","name":"chain_proc_constructor","children":[],"call":["f new ","engine options ","f options valid_key? ","f options ","engine options to_hash select ","engine options to_hash ","f respond_to? "," raise ","filter bind call ","filter bind ","filter arity == ","filter arity "," proc "," instance_method "," define_method ","c class_eval "," singleton_class ","Class  === ","filter arity > "," method ","(sclass\n  (self)\n  (self)) class_eval ","filter bind call  new ","filter bind call  options valid_key? ","filter bind call  options ","engine options to_hash sele singleton_class t ","filter bind call  respond_to? ","filter bind call ilter bind call ","filter bind  singleton_class all "," method  bind call "," instance_method  bind call ","filter bind call ilter bind "," method  bind "," instance_method  bind ","filter bind call ilter arity == "," method  arity == "," instance_method  arity == ","filter bind call ilter arity "," method  arity "," instance_method  arity "," pro singleton_class  "," instan singleton_class e_method "," defilter bind call ine_method "," singleton_class   singleton_class lass_eval "," singleton_ singleton_class lass ","filter bind call ilter arity > "," method  arity > "," instance_method  arity > ","(sclass\n  (selfilter bind call )\n  (selfilter bind call )) class_eval ","(s singleton_class lass\n  (self)\n  (self))  singleton_class lass_eval "]}," Temple Mixins EngineDSL chain_class_constructor":{"type":"method","name":"chain_class_constructor","children":[],"call":["filter new ","opts update ","filter options valid_key? ! ","filter options valid_key? ","filter options ","opts delete_if ","filter respond_to? "," update ","engine options "," proc "," define_options ","filter options valid_keys "," respond_to? ","ImmutableHash  new ","Hash  [] ","(send\n  (block\n    (send\n      (lvar :option_filter) :select)\n    (args\n      (arg :k))\n    (send\n      (send\n        (lvar :engine) :options) :include?\n      (lvar :k))) :map) flatten ","engine options [] ","(send\n  (lvar :option_filter) :select) map ","engine options include? ","option_filter select "," raise ","Symbol  === ","option_filter all? ","option_filter pop ","Hash  === ","option_filter last ","(send\n  (send\n    (hash) :update\n    (send\n      (lvar :engine) :options)) :delete_if) update ","option_filter include? ! ","option_filter include? "," update delete_if ","option_filter pop to_hash ","option_filter last respond_to? "," update  update "," update  delete_if "]}," Temple Mixins EngineDSL chain_name":{"type":"method","name":"chain_name","children":[],"call":[" raise ","name to_sym ","name name to_sym ","name name ","Symbol  === ","Class  === ","name name to_sym  to_sym ","name name to_sym  name name to_sym  to_sym ","name name to_sym  name name to_sym  "]}," Temple Mixins EngineDSL replace":{"type":"method","name":"replace","children":[],"call":[" chain_modified! "," raise "," chain include? "," chain ","name === ","f first "," chain map! "," chain_element "," chain_name "," chain []= ","c first == ","c first "," chain each_with_index "," element ","Symbol  === ","name name to_sym ","name name ","Class  === ","f first == "," chain_modifi chain_element d! "," chain_modifi element d! "," rais chain_element  "," rais element  "," chain includ chain_element ? "," chain includ element ? ","nam chain_element  === ","nam element  === "," chain_name  === ","name name to_sym  === "," chain_ chain_element l chain_element m chain_element nt "," chain_ element l element m element nt "," chain_nam chain_element  "," chain_nam element  "," chain_ chain_name  "," chain_name name to_sym  "," chain  chain_element ach_with_ind chain_element x "," chain  element ach_with_ind element x ","  chain_element l chain_element m chain_element nt ","  element l element m element nt ","nam chain_element  nam chain_element  to_sym ","nam element  nam element  to_sym "," chain_name   chain_name  to_sym ","name name to_sym  name name to_sym  to_sym ","nam chain_element  nam chain_element  ","nam element  nam element  "," chain_name   chain_name  ","name name to_sym  name name to_sym  "]}," Temple Mixins EngineDSL after":{"type":"method","name":"after","children":[],"call":[" chain_modified! "," raise "," chain include? "," chain ","(send\n  (send nil :chain) :map!) flatten! ","name === ","f first "," chain map! "," chain_element "," chain_name "," chain insert "," chain [] first == "," chain [] first "," chain [] ","i < "," chain size "," element ","Symbol  === ","name name to_sym ","name name ","Class  === ","f first == "," chain_modifi chain_element d! "," chain_modifi element d! "," rais chain_element  "," rais element  "," chain includ chain_element ? "," chain includ element ? ","(s chain_element nd\n  (s chain_element nd nil :chain) :map!) flatt chain_element n! ","(s element nd\n  (s element nd nil :chain) :map!) flatt element n! ","nam chain_element  === ","nam element  === "," chain_name  === ","name name to_sym  === "," chain_ chain_element l chain_element m chain_element nt "," chain_ element l element m element nt "," chain_nam chain_element  "," chain_nam element  "," chain_ chain_name  "," chain_name name to_sym  "," chain ins chain_element rt "," chain ins element rt "," chain siz chain_element  "," chain siz element  ","  chain_element l chain_element m chain_element nt ","  element l element m element nt ","nam chain_element  nam chain_element  to_sym ","nam element  nam element  to_sym "," chain_name   chain_name  to_sym ","name name to_sym  name name to_sym  to_sym ","nam chain_element  nam chain_element  ","nam element  nam element  "," chain_name   chain_name  ","name name to_sym  name name to_sym  "]}," Temple Mixins EngineDSL before":{"type":"method","name":"before","children":[],"call":[" chain_modified! "," raise "," chain include? "," chain ","(send\n  (send nil :chain) :map!) flatten! ","name === ","f first "," chain map! "," chain_element "," chain_name "," chain insert "," chain [] first == "," chain [] first "," chain [] ","i < "," chain size "," element ","Symbol  === ","name name to_sym ","name name ","Class  === ","f first == "," chain_modifi chain_element d! "," chain_modifi element d! "," rais chain_element  "," rais element  "," chain includ chain_element ? "," chain includ element ? ","(s chain_element nd\n  (s chain_element nd nil :chain) :map!) flatt chain_element n! ","(s element nd\n  (s element nd nil :chain) :map!) flatt element n! ","nam chain_element  === ","nam element  === "," chain_name  === ","name name to_sym  === "," chain_ chain_element l chain_element m chain_element nt "," chain_ element l element m element nt "," chain_nam chain_element  "," chain_nam element  "," chain_ chain_name  "," chain_name name to_sym  "," chain ins chain_element rt "," chain ins element rt "," chain siz chain_element  "," chain siz element  ","  chain_element l chain_element m chain_element nt ","  element l element m element nt ","nam chain_element  nam chain_element  to_sym ","nam element  nam element  to_sym "," chain_name   chain_name  to_sym ","name name to_sym  name name to_sym  to_sym ","nam chain_element  nam chain_element  ","nam element  nam element  "," chain_name   chain_name  ","name name to_sym  name name to_sym  "]}," Temple Mixins EngineDSL remove":{"type":"method","name":"remove","children":[],"call":[" chain_modified! "," raise ","name === ","i first "," chain reject! "," chain "," chain_name ","i first == "," chain_name  === "," chain_ chain_name  "]}," Temple Mixins EngineDSL prepend":{"type":"method","name":"prepend","children":[],"call":[" chain_modified! "," chain unshift "," chain_element "," chain "," element "]}," Temple Mixins EngineDSL append":{"type":"method","name":"append","children":[],"call":[" chain_modified! "," chain << "," chain_element "," chain "," element "]}," Temple Mixins EngineDSL chain_modified!":{"type":"method","name":"chain_modified!","children":[],"call":[]}," Temple Mixins CompiledDispatcher DispatchNode compile":{"type":"method","name":"compile","children":[],"call":["code << << << ","code << << ","code << ","\n freeze ","child compile gsub ","\n   freeze ","child compile ","level + ","key inspect "," each ","String  new "," raise "," method "," empty? ","level == ","code join ","(send\n  (str \"  \") :*\n  (lvar :level)) + ","   * ","parent ! ","String  new  << << << ","String  new  << << ","String  new  << ","String  new  join "]}," Temple Mixins CompiledDispatcher DispatchNode initialize":{"type":"method","name":"initialize","children":[],"call":["hsh []= ","DispatchNode  new "]}," Temple Mixins CompiledDispatcher dispatched_methods":{"type":"method","name":"dispatched_methods","children":[],"call":[" methods map select ","re method "," methods map "," methods "]}," Temple Mixins CompiledDispatcher replace_dispatcher":{"type":"method","name":"replace_dispatcher","children":[],"call":[" dispatcher "," class class_eval ","63 + ","tree compile gsub ","tree compile "," class ","(send\n  (send\n    (send\n      (lvar :method) :split\n      (send\n        (str \"_\") :freeze)) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :tree)) method= ","node [] ","type to_sym ","method split [] inject ","method split [] ","method split ","_ freeze "," dispatched_methods each "," dispatched_methods ","DispatchNode  new ","64 + "," case_statement ","tmp [] ","method_types [] ","tmp []= ","i == ","method_types size - ","method_types size "," raise ","Hash  === ","(erange\n  (int 0)\n  (send\n    (lvar :method_types) :size)) inject ","1 split ","method to_s !~ ","method to_s "," class instance_methods each "," class instance_methods ","(send\n  (send\n    (send\n      (lvar :method) :split\n      (str \"_\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :tree)) method= ","DispatchNode  new  compile gsub ","DispatchNode  new  compile ","(send\n  (send\n    (send\n      (lvar :method) :split\n      (send\n        (str \"_\") :freeze)) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :DispatchNode  new )) method= ","1 split  [] ","1 split  size - ","1 split  size ","(erange\n  (int 0)\n  (send\n    (lvar :1 split ) :size)) inject ","(send\n  (send\n    (send\n      (lvar :method) :split\n      (str \"_\")) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :DispatchNode  new )) method= "]}," Temple Mixins CompiledDispatcher dispatcher":{"type":"method","name":"dispatcher","children":[],"call":[" replace_dispatcher "]}," Temple Mixins CompiledDispatcher compile":{"type":"method","name":"compile","children":[],"call":[" dispatcher "]}," Temple Mixins CompiledDispatcher call":{"type":"method","name":"call","children":[],"call":[" compile "]}," Temple Mixins ControlFlowDispatcher on_cond":{"type":"method","name":"on_cond","children":[],"call":[" compile ","cases map "]}," Temple Mixins ControlFlowDispatcher on_block":{"type":"method","name":"on_block","children":[],"call":[" compile "]}," Temple Mixins ControlFlowDispatcher on_case":{"type":"method","name":"on_case","children":[],"call":[" compile ","cases map "]}," Temple Mixins ControlFlowDispatcher on_if":{"type":"method","name":"on_if","children":[],"call":[" compile ","cases compact map ","cases compact "]}," Temple Mixins EscapeDispatcher on_escape":{"type":"method","name":"on_escape","children":[],"call":[" compile "]}," Temple Mixins CoreDispatcher on_capture":{"type":"method","name":"on_capture","children":[],"call":[" compile "]}," Temple Mixins CoreDispatcher on_multi":{"type":"method","name":"on_multi","children":[],"call":["multi << "," compile ","exps each ","exps map "]}," Temple OptionMap valid_key?":{"type":"method","name":"valid_key?","children":[],"call":["h valid_key? ","h respond_to? ","@map any? ","@valid include? "," include? "]}," Temple OptionMap deprecated_key?":{"type":"method","name":"deprecated_key?","children":[],"call":["h deprecated_key? ","h respond_to? ","@map any? ","@deprecated include? "]}," Temple OptionMap validate_key!":{"type":"method","name":"validate_key!","children":[],"call":["@handler call "," valid_key? "," deprecated_key? "]}," Temple OptionMap validate_map!":{"type":"method","name":"validate_map!","children":[],"call":[" validate_key! ","map to_hash keys each ","map to_hash keys ","map to_hash "]}," Temple OptionMap add_deprecated_keys":{"type":"method","name":"add_deprecated_keys","children":[],"call":["@valid []= ","@deprecated []= ","keys flatten each ","keys flatten "]}," Temple OptionMap add_valid_keys":{"type":"method","name":"add_valid_keys","children":[],"call":["@valid []= ","keys flatten each ","keys flatten "]}," Temple OptionMap valid_keys":{"type":"method","name":"valid_keys","children":[],"call":["(send\n  (send\n    (send nil :keys) :+\n    (send\n      (ivar :@valid) :keys)) :+\n  (send\n    (send\n      (block\n        (send\n          (ivar :@map) :map)\n        (args\n          (arg :h))\n        (if\n          (send\n            (lvar :h) :respond_to?\n            (sym :valid_keys))\n          (send\n            (lvar :h) :valid_keys) nil)) :compact) :flatten)) uniq "," keys + + ","(send\n  (ivar :@map) :map) compact flatten ","(send\n  (ivar :@map) :map) compact ","h valid_keys ","h respond_to? ","@map map "," keys + ","@valid keys "," keys "]}," Temple OptionMap update":{"type":"method","name":"update","children":[],"call":[" validate_map! "]}," Temple OptionMap []=":{"type":"method","name":"[]=","children":[],"call":[" validate_key! "]}," Temple OptionMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple MutableMap update":{"type":"method","name":"update","children":[],"call":["@map first update ","@map first "]}," Temple MutableMap []=":{"type":"method","name":"[]=","children":[],"call":["@map first []= ","@map first "]}," Temple MutableMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple ImmutableMap to_hash":{"type":"method","name":"to_hash","children":[],"call":["result []= "," each "]}," Temple ImmutableMap values":{"type":"method","name":"values","children":[],"call":[" [] "," keys map "," keys "]}," Temple ImmutableMap keys":{"type":"method","name":"keys","children":[],"call":["(send\n  (ivar :@map) :inject\n  (array)) uniq ","keys concat ","h keys ","@map inject "]}," Temple ImmutableMap each":{"type":"method","name":"each","children":[],"call":[" [] "," keys each "," keys "]}," Temple ImmutableMap []":{"type":"method","name":"[]","children":[],"call":["h [] ","h include? ","@map each "]}," Temple ImmutableMap include?":{"type":"method","name":"include?","children":[],"call":["h include? ","@map any? "]}," Temple ImmutableMap initialize":{"type":"method","name":"initialize","children":[],"call":["map compact "]}," String html_safe":{"type":"method","name":"html_safe","children":[],"call":["Temple HTML SafeString  new "]}," Numeric html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," Object html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," Temple HTML SafeString to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Temple HTML SafeString html_safe":{"type":"method","name":"html_safe","children":[],"call":[]}," Temple HTML SafeString html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," Temple HTML Pretty call":{"type":"method","name":"call","children":[],"call":[" compile "," preamble "]}," Temple HTML Filter contains_nonempty_static?":{"type":"method","name":"contains_nonempty_static?","children":[],"call":["exp last empty? ! ","exp last empty? ","exp last "," contains_nonempty_static? ","exp [] any? ","exp [] ","exp first "]}," Temple HTML Fast on_html_js":{"type":"method","name":"on_html_js","children":[],"call":[" compile ","@js_wrapper last ","@js_wrapper first "]}," Temple HTML Fast on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":[" options [] "," options "," compile "," empty_exp? ","@format == "," attribute "," unique_name "," contains_static? "," html? "]}," Temple HTML Fast on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map ","result sort map ","result sort ","result []= ","result [] [] ","result [] "," unique_name "," contains_static? "," raise "," options [] [] "," options [] "," options "," empty_exp? ","attr [] ","attr [] to_s ","attr [] != ","attrs each "]}," Temple HTML Fast on_html_condcomment":{"type":"method","name":"on_html_condcomment","children":[],"call":[" on_html_comment "]}," Temple HTML Dispatcher on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":["result << "," compile "]}," Temple HTML Dispatcher on_html_js":{"type":"method","name":"on_html_js","children":[],"call":[" compile "]}," Temple HTML Dispatcher on_html_condcomment":{"type":"method","name":"on_html_condcomment","children":[],"call":[" compile "]}," Temple HTML Dispatcher on_html_comment":{"type":"method","name":"on_html_comment","children":[],"call":[" compile "]}," Temple HTML Dispatcher on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":[" compile "]}," Temple HTML Dispatcher on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map "]}," Temple HTML AttributeSorter on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":["attr [] to_s ","attr [] "," raise ","attr [] != ","attrs sort_by "," options [] "," options "]}," Temple HTML AttributeSorter call":{"type":"method","name":"call","children":[],"call":[" options [] "," options "]}," Temple HTML AttributeRemover on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":[" compile "," unique_name "," contains_nonempty_static? "," empty_exp? "," options [] include? ","name to_s "," options [] "," options "," contains_static? "]}," Temple HTML AttributeRemover on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map "," options [] "," options "]}," Temple HTML AttributeRemover initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","String  === "," options [] all? "," options [] "," options ","Array  === "]}," Temple HTML AttributeMerger on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":["value first ","exp << ","delimiter inspect ","value each_with_index "," unique_name ","exp << << ","value [] each ","value [] "," contains_nonempty_static? ","value all? ","value size > ","value size "," options [] [] "," options [] "," options ","values map ","values []= ","values [] << ","values [] "," raise ","name to_s ","attrs each "," compile ","result sort map ","result sort ","result []= ","result [] [] ","result [] "," contains_static? "," empty_exp? ","attr [] ","attr [] to_s ","attr [] != ","result map ","names map ","names << ","values []  first ","value first  << "," options [] []  inspect ","values []  each_with_index "," unique_name to_s  ","value first  << << ","values []  [] each ","values []  [] ","values []  all? ","values []  size > ","values []  size ","values [] s map ","values [] s []= ","values [] s [] << ","values [] s [] ","name to_s  to_s ","result sort  sort map ","result sort  sort ","result sort  []= ","result sort  [] [] ","result sort  [] "," empty_value first ? ","result sort  map ","name to_s s map ","name to_s s << "]}," Temple Generators StringBuffer return_buffer":{"type":"method","name":"return_buffer","children":[],"call":[" buffer "]}," Temple Generators StringBuffer create_buffer":{"type":"method","name":"create_buffer","children":[],"call":[" buffer "]}," Temple Generators RailsOutputBuffer create_buffer":{"type":"method","name":"create_buffer","children":[],"call":[" options [] "," options "," buffer "," buffer == "," options [] == "]}," Temple Generators RailsOutputBuffer call":{"type":"method","name":"call","children":[],"call":["(send nil :preamble) flatten compact join ",";  freeze ","(send nil :preamble) flatten compact ","(send nil :preamble) flatten "," postamble "," compile "," preamble ","(send nil :preamble) join "]}," Temple Generators ERB on_code":{"type":"method","name":"on_code","children":[],"call":[]}," Temple Generators ERB on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[]}," Temple Generators ERB on_static":{"type":"method","name":"on_static","children":[],"call":[]}," Temple Generators ERB on_capture":{"type":"method","name":"on_capture","children":[],"call":[" on_code "]}," Temple Generators ERB on_multi":{"type":"method","name":"on_multi","children":[],"call":["(send\n  (lvar :exp) :map) join "," compile ","exp map "]}," Temple Generators ERB call":{"type":"method","name":"call","children":[],"call":[" compile "]}," Temple Generators ArrayBuffer return_buffer":{"type":"method","name":"return_buffer","children":[],"call":[" buffer "," options [] "," options "]}," Temple Generators ArrayBuffer call":{"type":"method","name":"call","children":[],"call":["(send nil :save_buffer) compact join ","(send nil :save_buffer) compact "," restore_buffer ","exp last "," buffer "," save_buffer ","exp last inspect ","exp first "]}," Temple Generators Array return_buffer":{"type":"method","name":"return_buffer","children":[],"call":[" buffer "]}," Temple Generators Array create_buffer":{"type":"method","name":"create_buffer","children":[],"call":[" buffer "]}," Temple Generator on_code":{"type":"method","name":"on_code","children":[],"call":[]}," Temple Generator on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" concat "]}," Temple Generator on_static":{"type":"method","name":"on_static","children":[],"call":[" concat ","text inspect "," options [] "," options "]}," Temple Generator on":{"type":"method","name":"on","children":[],"call":[" raise ","exp inspect "]}," Temple Generator return_buffer":{"type":"method","name":"return_buffer","children":[],"call":[]}," Temple Generator create_buffer":{"type":"method","name":"create_buffer","children":[],"call":[]}," Temple Generator restore_buffer":{"type":"method","name":"restore_buffer","children":[],"call":[" buffer "," options [] "," options "]}," Temple Generator save_buffer":{"type":"method","name":"save_buffer","children":[],"call":[" buffer "," unique_name "," options [] "," options "]}," Temple Generator call":{"type":"method","name":"call","children":[],"call":["(send nil :preamble) flatten compact join ","(send nil :preamble) flatten compact ","(send nil :preamble) flatten "," postamble "," compile "," preamble ","(send nil :preamble) join "]}," Temple Filters Validator compile":{"type":"method","name":"compile","children":[],"call":[" options [] validate! "," options [] "," options "]}," Temple Filters StringSplitter call":{"type":"method","name":"call","children":[],"call":[]}," Temple Filters StringSplitter SyntaxChecker on_parse_error":{"type":"method","name":"on_parse_error","children":[],"call":[" raise "]}," Temple Filters StringSplitter SyntaxChecker syntax_error?":{"type":"method","name":"syntax_error?","children":[],"call":[]}," Temple Filters StringSplitter string_literal?":{"type":"method","name":"string_literal?","children":[],"call":["type == ","instructions first ","instructions size > ","instructions size ","type != ","Ripper  sexp ","SyntaxChecker  syntax_error? "]}," Temple Filters StringSplitter on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":["temple << "," on_dynamic ","StringSplitter  compile each ","StringSplitter  compile ","code include? "," string_literal? "]}," Temple Filters StringSplitter shift_balanced_embexpr":{"type":"method","name":"shift_balanced_embexpr","children":[],"call":["embedded << ","embexpr_open == ","tokens shift ","tokens empty? ","String  new tap ","String  new "]}," Temple Filters StringSplitter escape_quotes":{"type":"method","name":"escape_quotes","children":[],"call":["beg_str sub ","beg_str [] "]}," Temple Filters StringSplitter compile_tokens!":{"type":"method","name":"compile_tokens!","children":[],"call":["exps << ","embedded empty? "," shift_balanced_embexpr "," eval to_s "," eval "," escape_quotes ","tokens shift ","tokens empty? "," strip_quotes! "," shift_balanced_embexpr  empty? "]}," Temple Filters StringSplitter strip_quotes!":{"type":"method","name":"strip_quotes!","children":[],"call":[" raise ","type != ","tokens pop ","tokens shift "]}," Temple Filters StringSplitter compile":{"type":"method","name":"compile","children":[],"call":[" compile_tokens! "," raise ","tokens size ","tokens size < ","tokens pop ","(sym :on_comment) include? ","tokens last [] ","tokens last ","Ripper  lex ","code strip "," tap "," compile_Ripper  lex ! ","Ripper  lex  size ","Ripper  lex  size < ","Ripper  lex  pop ","Ripper  lex  last [] ","Ripper  lex  last "]}," Temple Filters StaticAnalyzer on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":["newlines times map ","newlines times ","newlines == ","code count "," eval to_s "," eval "," Temple StaticAnalyzer  static? ","StaticAnalyzer  static? ","code count  times map ","code count  times ","code count  == "]}," Temple Filters StaticAnalyzer call":{"type":"method","name":"call","children":[],"call":[" Temple StaticAnalyzer  available? "]}," Temple Filters RemoveBOM call":{"type":"method","name":"call","children":[],"call":["s gsub "," freeze ","Regexp  new ","\\A﻿ encode ","s encoding name ","s encoding ","s encoding name !~ ","s encoding name =~ ","s respond_to? "]}," Temple Filters Escapable on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":["@escape_code % "]}," Temple Filters Escapable on_static":{"type":"method","name":"on_static","children":[],"call":["@escaper [] "]}," Temple Filters Escapable on_escape":{"type":"method","name":"on_escape","children":[],"call":[" compile "," options [] ! "," options [] "," options "]}," Temple Filters Eraser do?":{"type":"method","name":"do?","children":[],"call":["exp [] == ","exp [] ","type size ","(send\n  (send\n    (send\n      (send nil :options) :[]\n      (lvar :list)) :to_a) :map) any? "," options [] to_a map "," options [] to_a "," options [] "," options "]}," Temple Filters Eraser compile":{"type":"method","name":"compile","children":[],"call":[" do? ! "," do? ","exp first == ","exp first "]}," Temple Filters Encoding call":{"type":"method","name":"call","children":[],"call":["s force_encoding ","s valid_encoding? "," options [] "," options ","s dup ","s frozen? ","s encoding ","s respond_to? ","s dup  force_encoding ","s dup  valid_encoding? "," options dup  [] "," options dup  ","s dup  dup ","s dup  frozen? ","s dup  encoding ","s dup  res dup pond_to? "]}," Temple Filters ControlFlow on_block":{"type":"method","name":"on_block","children":[],"call":[" compile "]}," Temple Filters ControlFlow on_cond":{"type":"method","name":"on_cond","children":[],"call":[" on_case "]}," Temple Filters ControlFlow on_case":{"type":"method","name":"on_case","children":[],"call":["result << ","result << << "," compile ","condition == ","cases map ","exps each "]}," Temple Filters ControlFlow on_if":{"type":"method","name":"on_if","children":[],"call":["result << ","result << << "," compile ","no [] ","no first == ","no first ","no []  [] ","no []  first == ","no []  first "]}," Temple Filters CodeMerger on_multi":{"type":"method","name":"on_multi","children":[],"call":["result [] ","result size == ","result size ","result << "," compile ","code << ","exp first == ","exp first ","exp last dup ","exp last ","code =~ ","exps each ","exp last dup  << ","exp last dup  =~ "]}," Temple Filters Ambles call":{"type":"method","name":"call","children":[],"call":["ret << "]}," Temple Filters Ambles initialize":{"type":"method","name":"initialize","children":[],"call":[" options [] "," options "]}," Temple ERB Parser call":{"type":"method","name":"call","children":[],"call":["result << ","input [] ","indicator size == ","indicator size ","\n * ","code count ","text empty? ","token slice! ","result << << ","$~ end ","$~ begin ","input scan "," options [] "," options ","indicator length <= ","indicator length ","code count times ","ESCAPED  [] ","text empty? ! ","m end ","m begin ","Regexp  last_match ","indicator size <= ","input []  empty? ","text eRegexp  last_match pty? ","code count tiRegexp  last_match es ","input []  empty? ! ","text eRegexp  last_match pty? ! ","Regexp  last_match  end ","Regexp  last_match  begin ","Regexp  last_Regexp  last_match atch "]}," Temple Engine call_chain":{"type":"method","name":"call_chain","children":[],"call":["(send\n  (ivar :@chain) :map) compact "," raise ","f respond_to? ! ","f respond_to? ","constructor call ","@chain map ","filter bind ","filter new ","ImmutableHash  new ","Hash  [] ","(send\n  (block\n    (send\n      (lvar :option_filter) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) flatten "," options [] "," options ","(send\n  (lvar :option_filter) :select) map "," options include? ","option_filter select ","filter call ","filter arity == ","filter arity ","constructor call  respond_to? ! ","constructor call  respond_to? ","constructor call ilter bind ","filter bind  bind ","constructor call ilter new ","filter bind  new ","(send\n  (block\n    (send\n      (lvar :option_constructor call ilter) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) constructor call latten ","(send\n  (block\n    (send\n      (lvar :option_filter bind ) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) flatten ","(send\n  (lvar :option_constructor call ilter) :select) map ","(send\n  (lvar :option_filter bind ) :select) map ","option_constructor call ilter select ","option_filter bind  select ","constructor call ilter call ","filter bind  call ","constructor call ilter arity == ","filter bind  arity == ","constructor call ilter arity ","filter bind  arity "]}," Temple Engine chain_modified!":{"type":"method","name":"chain_modified!","children":[],"call":[]}," Temple Engine call":{"type":"method","name":"call","children":[],"call":["e call "," call_chain inject "," call_chain "," chain inject "," chain "]}," Temple Filters DynamicMerger count_newline":{"type":"method","name":"count_newline","children":[],"call":["exp == ","exps each "]}," Temple Filters DynamicMerger merge_dynamic":{"type":"method","name":"merge_dynamic","children":[],"call":[" raise ","type inspect ","strlit_body << ","arg dump sub! sub! gsub ","arg dump sub! sub! ","arg dump sub! ","arg dump ","exps each ","String  new ","type == ","exps any? ","String  new  << "]}," Temple Filters DynamicMerger on_multi":{"type":"method","name":"on_multi","children":[],"call":["result [] ","result size == ","result size ","result concat "," merge_dynamic ","result << "," compile ","exps shift ","buffer << ","(send\n  (lvar :count) :+\n  (int 1)) times ","count + ","count == ","exps [] last count ","exps [] last ","exps [] ","exps [] first == ","exps [] first ","exps size > "," count_newline ","exps size ","type == ","(send\n  (int 1) :+\n  (lvar :count)) times ","1 + ","e == ","exps [] all? ","arg count ","arg count == ","exps first ","exps empty? ","exps dup ","exps dup  shift ","(send\n  (lvar : count_newline ) :+\n  (int 1)) times ","(send\n  (lvar :arg count ) :+\n  (int 1)) times "," count_newline  + ","arg count  + "," count_newline  == ","arg count  == ","exps [] last  count_newline  ","exps [] last arg count  ","exps dup  [] last count ","exps dup  [] last ","exps dup  [] ","exps dup  [] first == ","exps dup  [] first ","exps dup  size > ","  count_newline _newline "," arg count _newline ","exps dup  size ","(send\n  (int 1) :+\n  (lvar : count_newline )) times ","(send\n  (int 1) :+\n  (lvar :arg count )) times ","exps dup  [] all? ","arg  count_newline  ","arg arg count  ","arg  count_newline  == ","arg arg count  == ","exps dup  first ","exps dup  empty? ","exps dup  dup "]}," Temple Utils tmp_var":{"type":"method","name":"tmp_var","children":[],"call":[]}," Temple Utils MutableHash update":{"type":"method","name":"update","children":[],"call":["@hash first update ","@hash first "]}," Temple Utils MutableHash []=":{"type":"method","name":"[]=","children":[],"call":["@hash first []= ","@hash first "]}," Temple Utils MutableHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Utils ImmutableHash values":{"type":"method","name":"values","children":[],"call":[" [] "," keys map "," keys "]}," Temple Utils ImmutableHash keys":{"type":"method","name":"keys","children":[],"call":["(send\n  (ivar :@hash) :inject\n  (array)) uniq ","h keys ","@hash inject "]}," Temple Utils ImmutableHash each":{"type":"method","name":"each","children":[],"call":[" [] "," keys each "," keys "]}," Temple Utils ImmutableHash []":{"type":"method","name":"[]","children":[],"call":["h [] ","h include? ","@hash each "]}," Temple Utils ImmutableHash include?":{"type":"method","name":"include?","children":[],"call":["h include? ","@hash any? "]}," Temple Utils ImmutableHash initialize":{"type":"method","name":"initialize","children":[],"call":["hash compact "]}," Temple Templates Rails compile":{"type":"method","name":"compile","children":[],"call":[" class build_engine call ","template source "," class build_engine "," class ","template identifier "," class compile "," update update "," update "," class default_options "]}," Temple Mixins Template chain":{"type":"method","name":"chain","children":[],"call":["chain << "," default_options [] "," default_options "]}," Temple Mixins Template build_engine":{"type":"method","name":"build_engine","children":[],"call":["e instance_eval "," chain each "," chain "," engine new ","Utils ImmutableHash  new "," engine ","options << "," default_options "," raise ","ImmutableHash  new "]}," Temple Mixins Template engine":{"type":"method","name":"engine","children":[],"call":[" default_options [] "," default_options "," default_options []= "]}," Temple Mixins DefaultOptions default_options":{"type":"method","name":"default_options","children":[],"call":["Utils MutableHash  new "," superclass default_options "," superclass "," superclass respond_to? ","MutableHash  new "," puts ","key inspect ","OptionHash  new "," warn "]}," Temple Mixins DefaultOptions set_default_options":{"type":"method","name":"set_default_options","children":[],"call":[" default_options update "," default_options "]}," Temple Mixins Dispatcher call":{"type":"method","name":"call","children":[],"call":[" compile "]}," Temple Mixins CoreDispatcher on_escape":{"type":"method","name":"on_escape","children":[],"call":[" compile "]}," Temple Mixins EngineDSL element":{"type":"method","name":"element","children":[],"call":[" raise ","filter respond_to? ","Symbol  === ","args all? ","args pop ","Hash  === ","args last "," method "," define_method ","(sclass\n  (self)\n  (self)) class_eval "," instance_method ","Class  === ","filter arity == ","filter arity ","args empty? ","args shift ","filter name to_sym ","filter name "," define_chain_method ","filter arity > ","filter filter name to_sym  to_sym ","filter args shift  to_sym ","filter filter name to_sym  ","filter args shift  "]}," Temple Mixins EngineDSL generator":{"type":"method","name":"generator","children":[],"call":[" use ","Temple Generators  const_get "]}," Temple Mixins EngineDSL filter":{"type":"method","name":"filter","children":[],"call":[" use ","Temple Filters  const_get "]}," Temple HTML Fast contains_static?":{"type":"method","name":"contains_static?","children":[],"call":[" contains_static? ","exp [] any? ","exp [] "]}," Temple HTML Fast attribute":{"type":"method","name":"attribute","children":[],"call":[" options [] "," options "," compile "]}," Temple HTML Fast compile_attribute":{"type":"method","name":"compile_attribute","children":[],"call":[" attribute "," tmp_var "," contains_static? "," empty_exp? ","  tmp_var _var "]}," Temple HTML Dispatcher on_html_staticattrs":{"type":"method","name":"on_html_staticattrs","children":[],"call":[" compile ","attrs map "]}," Temple Filters EscapeHTML on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" options [] "," options "]}," Temple Filters EscapeHTML on_static":{"type":"method","name":"on_static","children":[],"call":[" escape_html "," escape_html_safe "," options [] "," options "]}," Temple Filters EscapeHTML on_escape":{"type":"method","name":"on_escape","children":[],"call":[" compile "]}," Temple Filters EscapeHTML initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple Filters Debugger call":{"type":"method","name":"call","children":[],"call":[" puts "," p "," pp "," options [] "," options "]}," Temple Engine build_chain":{"type":"method","name":"build_chain","children":[],"call":["filter bind ","filter new ","Utils ImmutableHash  new ","Hash  [] ","(send\n  (block\n    (send\n      (lvar :option_filter) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) flatten "," options [] "," options ","(send\n  (lvar :option_filter) :select) map "," options include? ","option_filter select "," chain map "," chain "]}," Temple Mixins GrammarDSL Root match?":{"type":"method","name":"match?","children":[],"call":[" match "]}," Temple Mixins CompiledDispatcher case_statement":{"type":"method","name":"case_statement","children":[],"call":["code << ","code << << "," case_statement ","Hash  === ","name to_sym inspect ","name to_sym ","types each "]}," Temple MutableHash update":{"type":"method","name":"update","children":[],"call":["@hash first update ","@hash first "]}," Temple MutableHash []=":{"type":"method","name":"[]=","children":[],"call":["@hash first []= ","@hash first "]}," Temple MutableHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple ImmutableHash values":{"type":"method","name":"values","children":[],"call":[" [] "," keys map "," keys "]}," Temple ImmutableHash keys":{"type":"method","name":"keys","children":[],"call":["(send\n  (ivar :@hash) :inject\n  (array)) uniq ","h keys ","@hash inject ","keys concat "]}," Temple ImmutableHash each":{"type":"method","name":"each","children":[],"call":[" [] "," keys each "," keys "]}," Temple ImmutableHash []":{"type":"method","name":"[]","children":[],"call":["h [] ","h include? ","@hash each "]}," Temple ImmutableHash include?":{"type":"method","name":"include?","children":[],"call":["h include? ","@hash any? "]}," Temple ImmutableHash initialize":{"type":"method","name":"initialize","children":[],"call":["hash compact "]}," Temple Generators Array preamble":{"type":"method","name":"preamble","children":[],"call":[" buffer "]}," Temple Mixins EngineDSL define_chain_method":{"type":"method","name":"define_chain_method","children":[],"call":[" method "," define_method ","(sclass\n  (self)\n  (self)) class_eval "," instance_method ","Class  === "]}," Temple Mixins EngineDSL wildcard":{"type":"method","name":"wildcard","children":[],"call":[" chain_modified! "," chain << "," define_chain_method "," chain "," raise ","block arity <= ","block arity "]}," Temple HTML AttributeMerger contains_static?":{"type":"method","name":"contains_static?","children":[],"call":[" contains_static? ","exp [] ","exp [] any? "]}," Temple HTML AttributeMerger on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":[" compile "," unique_name "," contains_static? "," empty_exp? "]}," Temple Utils contains_static?":{"type":"method","name":"contains_static?","children":[],"call":[" contains_static? ","exp [] ","exp [] any? "]}," Temple Templates Tilt init":{"type":"method","name":"init","children":[],"call":[]}," Temple Mixins Template init":{"type":"method","name":"init","children":[],"call":[]}," Temple Mixins EngineDSL chain_callable_constructor":{"type":"method","name":"chain_callable_constructor","children":[],"call":[" proc "," raise ","filter respond_to? "]}," Temple Generators StringBuffer postamble":{"type":"method","name":"postamble","children":[],"call":[" buffer "]}," Temple Templates Tilt default_mime_type=":{"type":"method","name":"default_mime_type=","children":[],"call":[]}," Temple Templates Tilt default_mime_type":{"type":"method","name":"default_mime_type","children":[],"call":[]}," Temple Mixins DefaultOptions disable_option_validator!":{"type":"method","name":"disable_option_validator!","children":[],"call":[]}," Temple Mixins DefaultOptions define_deprecated_options":{"type":"method","name":"define_deprecated_options","children":[],"call":[" default_options add_deprecated_keys "," default_options "," default_options update ","hash keys ","opts pop to_hash ","opts pop ","opts last respond_to? ","opts last ","opts pop to_hash  keys ","opts pop to_opts pop to_hash  "]}," Temple Mixins DefaultOptions define_options":{"type":"method","name":"define_options","children":[],"call":[" default_options add_valid_keys "," default_options "," default_options update ","hash keys ","opts pop to_hash ","opts pop ","opts last respond_to? ","opts last ","opts pop to_hash  keys ","opts pop to_opts pop to_hash  "]}," Temple OptionHash valid_key?":{"type":"method","name":"valid_key?","children":[],"call":["h valid_key? ","h respond_to? ","@hash any? ","@valid include? "," include? "]}," Temple OptionHash deprecated_key?":{"type":"method","name":"deprecated_key?","children":[],"call":["h deprecated_key? ","h respond_to? ","@hash any? ","@deprecated include? "]}," Temple OptionHash validate_key!":{"type":"method","name":"validate_key!","children":[],"call":["@handler call "," valid_key? "," deprecated_key? "]}," Temple OptionHash validate_hash!":{"type":"method","name":"validate_hash!","children":[],"call":[" validate_key! ","hash to_hash keys each ","hash to_hash keys ","hash to_hash "]}," Temple OptionHash add_deprecated_keys":{"type":"method","name":"add_deprecated_keys","children":[],"call":["@valid []= ","@deprecated []= ","keys flatten each ","keys flatten "]}," Temple OptionHash add_valid_keys":{"type":"method","name":"add_valid_keys","children":[],"call":["@valid []= ","keys flatten each ","keys flatten "]}," Temple OptionHash valid_keys":{"type":"method","name":"valid_keys","children":[],"call":[" keys concat uniq "," keys concat ","@valid keys "," keys ","(send\n  (send\n    (send nil :keys) :+\n    (send\n      (ivar :@valid) :keys)) :+\n  (send\n    (send\n      (block\n        (send\n          (ivar :@hash) :map)\n        (args\n          (arg :h))\n        (if\n          (send\n            (lvar :h) :respond_to?\n            (sym :valid_keys))\n          (send\n            (lvar :h) :valid_keys) nil)) :compact) :flatten)) uniq "," keys + + ","(send\n  (ivar :@hash) :map) compact flatten ","(send\n  (ivar :@hash) :map) compact ","h valid_keys ","h respond_to? ","@hash map "," keys + "]}," Temple OptionHash update":{"type":"method","name":"update","children":[],"call":[" validate_hash! "]}," Temple OptionHash []=":{"type":"method","name":"[]=","children":[],"call":[" validate_key! "]}," Temple OptionHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Temple ImmutableHash to_hash":{"type":"method","name":"to_hash","children":[],"call":["result []= "," each "]}," Temple Generators ERB on_newline":{"type":"method","name":"on_newline","children":[],"call":[]}," Temple Filters StaticFreezer on_static":{"type":"method","name":"on_static","children":[],"call":["s inspect "," options [] "," options "]}," Temple Filters StaticAnalyzer SyntaxChecker on_parse_error":{"type":"method","name":"on_parse_error","children":[],"call":[" raise "]}," Temple Filters StaticAnalyzer SyntaxChecker syntax_error?":{"type":"method","name":"syntax_error?","children":[],"call":[]}," Temple Filters StaticAnalyzer static?":{"type":"method","name":"static?","children":[],"call":[]}}