{" Aws Sigv4 Signer uri_escape":{"type":"method","name":"uri_escape","children":[],"call":["CGI  escape gsub gsub ","CGI  escape gsub ","CGI  escape ","string encode ","string nil? "," class uri_escape "," class "]}," Aws Sigv4 Signer uri_escape_path":{"type":"method","name":"uri_escape_path","children":[],"call":[" uri_escape ","path gsub "," class uri_escape_path "," class "]}," Aws Sigv4 Signer credentials_set?":{"type":"method","name":"credentials_set?","children":[],"call":["credentials secret_access_key ","credentials access_key_id ","credentials secret_access_key empty? ! ","credentials secret_access_key empty? ","credentials secret_access_key nil? ! ","credentials secret_access_key nil? ","credentials access_key_id empty? ! ","credentials access_key_id empty? ","credentials access_key_id nil? ! ","credentials access_key_id nil? "]}," Aws Sigv4 Signer get_credentials":{"type":"method","name":"get_credentials","children":[],"call":[" raise ","Errors MissingCredentialsError  new "," credentials_set? ","@credentials_provider credentials "," @credentials_provider credentials _set? ","@@credentials_provider credentials _provider @credentials_provider credentials  "]}," Aws Sigv4 Signer extract_expires_in":{"type":"method","name":"extract_expires_in","children":[],"call":[" raise ","options [] to_s ","options [] ","900 to_s "]}," Aws Sigv4 Signer downcase_headers":{"type":"method","name":"downcase_headers","children":[],"call":["hash []= ","key downcase ","(or\n  (lvar :headers)\n  (hash)) to_hash inject ","(or\n  (lvar :headers)\n  (hash)) to_hash ","(or\n  (lvar :headers)\n  (hash)) to_hash transform_keys "]}," Aws Sigv4 Signer extract_url":{"type":"method","name":"extract_url","children":[],"call":[" raise ","URI  parse ","request [] to_s ","request [] "]}," Aws Sigv4 Signer extract_http_method":{"type":"method","name":"extract_http_method","children":[],"call":[" raise ","request [] upcase ","request [] "]}," Aws Sigv4 Signer extract_credentials_provider":{"type":"method","name":"extract_credentials_provider","children":[],"call":[" raise ","StaticCredentialsProvider  new ","options key? ","options [] "]}," Aws Sigv4 Signer extract_region":{"type":"method","name":"extract_region","children":[],"call":[" raise ","options [] "]}," Aws Sigv4 Signer extract_service":{"type":"method","name":"extract_service","children":[],"call":[" raise ","options [] "]}," Aws Sigv4 Signer hexhmac":{"type":"method","name":"hexhmac","children":[],"call":["OpenSSL HMAC  hexdigest ","OpenSSL Digest  new "]}," Aws Sigv4 Signer hmac":{"type":"method","name":"hmac","children":[],"call":["OpenSSL HMAC  digest ","OpenSSL Digest  new "]}," Aws Sigv4 Signer sha256_hexdigest":{"type":"method","name":"sha256_hexdigest","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sha256 hexdigest ","value rewind ","sha256 update ","value read ","1024 * ","OpenSSL Digest SHA256  new ","value respond_to? ","OpenSSL Digest SHA256  file hexdigest ","OpenSSL Digest SHA256  file ","File  exist? ","value path ","value path nil? ! ","value path nil? ","Tempfile  === ","File  === "," loop ","OpenSSL Digest  new ","value is_a? ","OpenSSL Digest SHA256  new  hexdigest ","OpenSSL Digest  new  hexdigest ","OpenSSL Digest SHA256  new  update ","OpenSSL Digest  new  update "]}," Aws Sigv4 Signer standard_port?":{"type":"method","name":"standard_port?","children":[],"call":["uri port == ","uri port ","uri scheme == ","uri scheme "]}," Aws Sigv4 Signer host":{"type":"method","name":"host","children":[],"call":["uri port ","uri host "," standard_port? ","uri default_port == ","uri default_port "]}," Aws Sigv4 Signer canonical_header_value":{"type":"method","name":"canonical_header_value","children":[],"call":["value gsub strip ","value gsub ","value match "]}," Aws Sigv4 Signer canonical_headers":{"type":"method","name":"canonical_headers","children":[],"call":["(send\n  (lvar :headers) :map) join "," canonical_header_value ","v to_s ","headers map ","headers sort_by ","headers << ","@unsigned_headers include? ","headers inject ","hdrs << ","(send\n  (lvar :headers sort_by ) :map) join ","headers sort_by  map ","headers sort_by  sort_by ","headers sort_by  << ","@unsigned_headers sort_by  include? ","headers sort_by  inject "]}," Aws Sigv4 Signer signed_headers":{"type":"method","name":"signed_headers","children":[],"call":["(send\n  (lvar :headers) :inject\n  (array)) sort join ","(send\n  (lvar :headers) :inject\n  (array)) sort ","signed_headers << ","@unsigned_headers include? ","headers inject "]}," Aws Sigv4 Signer normalized_querystring":{"type":"method","name":"normalized_querystring","children":[],"call":["(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join ","(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map ","a_name <=> ","a_offset <=> ","a_name == ","b split [] ","b split ","a split [] ","a split ","params each with_index sort ","params each with_index ","params each ","p + ","p match ","params map ","querystring split ","a_value <=> ","a_value == ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join ) :each) :with_index) :sort) map join ","(send\n  (send\n    (send\n      (lvar :querystring split ) :each) :with_index) :sort) map join ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join ) :each) :with_index) :sort) map ","(send\n  (send\n    (send\n      (lvar :querystring split ) :each) :with_index) :sort) map ","a split []  <=> ","a split []  == ","(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join  each with_index sort ","querystring split  each with_index sort ","(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join  each with_index ","querystring split  each with_index ","(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join  each ","querystring split  each ","(send\n  (send\n    (send\n      (lvar :params) :each) :with_index) :sort) map join  map ","querystring split  map "]}," Aws Sigv4 Signer path":{"type":"method","name":"path","children":[],"call":[" uri_escape_path ","path == ","url path "," uri_escape_url path  ","url path  == ","url url path  "]}," Aws Sigv4 Signer signature":{"type":"method","name":"signature","children":[],"call":[" hexhmac "," hmac ","AWS4 + "]}," Aws Sigv4 Signer credential":{"type":"method","name":"credential","children":[],"call":[" credential_scope ","credentials access_key_id "]}," Aws Sigv4 Signer credential_scope":{"type":"method","name":"credential_scope","children":[],"call":["(lvar :date) join "]}," Aws Sigv4 Signer string_to_sign":{"type":"method","name":"string_to_sign","children":[],"call":["(str \"AWS4-HMAC-SHA256\") join "," sha256_hexdigest "," credential_scope ","datetime [] "]}," Aws Sigv4 Signer canonical_request":{"type":"method","name":"canonical_request","children":[],"call":["(lvar :http_method) join "," signed_headers "," canonical_headers + "," canonical_headers "," normalized_querystring ","url query "," path "]}," Aws Sigv4 Signer presign_url":{"type":"method","name":"presign_url","children":[],"call":["&X-Amz-Signature= + "," signature ","creds secret_access_key ","url query "," string_to_sign "," canonical_request ","url query= ","& + ","(send\n  (lvar :params) :map) join "," uri_escape ","params map ","params []= ","creds session_token "," signed_headers "," extract_expires_in "," credential "," sha256_hexdigest ","options [] ","headers [] ","datetime [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :time))\n  (send\n    (const nil :Time) :now)) utc strftime ","(or\n  (send\n    (lvar :options) :[]\n    (sym :time))\n  (send\n    (const nil :Time) :now)) utc ","Time  now ","headers []= "," host "," downcase_headers "," extract_url "," extract_http_method "," get_credentials "," fetch_credentials ","options [] []= ","options [] is_a? ","URI  parse ","signing_result [] ","Aws Crt Auth Signer  sign_request ","url to_s ","Aws Crt Auth Signable  new ","Aws Crt Http Message  new ","Aws Crt Auth SigningConfig  new ","options fetch ","headers delete "," crt_presign_url ","Signer  use_crt? "," presigned_url_expiration to_s "," presigned_url_expiration ","Time  strptime ","@signing_algorithm == ","sigv4-s3express to_sym "," get_credentials  secret_access_key "," fetch_credentials  secret_access_key "," extract_url  query ","URI  parse  query "," extract_url  query= ","URI  parse  query= ","(send\n  (lvar :(send\n  (lvar :params) :map) join ) :map) join ","(send\n  (lvar :params) :map) join  map ","(send\n  (lvar :params) :map) join  []= "," get_credentials  session_token "," fetch_credentials  session_token "," signed_ downcase_headers  "," downcase_headers  [] ","datetime [] time [] ","headers []  [] ","headers delete  [] "," downcase_headers  []= "," downcase_ downcase_headers  "," extract_ extract_url  "," extract_URI  parse  "," extract_ extract_http_method  ","Aws Crt Auth Signer  sign_request  [] "," extract_url  to_s ","URI  parse  to_s "," downcase_headers  delete "," crt_presign_ extract_url  "," crt_presign_URI  parse  "," presigned_ extract_url _expiration to_s "," presigned_URI  parse _expiration to_s "," presigned_ extract_url _expiration "," presigned_URI  parse _expiration "]}," Aws Sigv4 Signer sign_request":{"type":"method","name":"sign_request","children":[],"call":["Signature  new ","sigv4_headers []= ","(dstr\n  (str \"AWS4-HMAC-SHA256 Credential=\")\n  (begin\n    (send nil :credential\n      (lvar :creds)\n      (lvar :date)))) join "," signed_headers "," credential "," signature ","creds secret_access_key "," string_to_sign "," canonical_request ","headers merge ","sigv4_headers [] ","creds session_token "," host "," sha256_hexdigest ","request [] ","headers [] ","datetime [] ","Time  now utc strftime ","Time  now utc ","Time  now "," downcase_headers "," extract_url "," extract_http_method "," get_credentials "," fetch_credentials ","sigv4_headers merge ","signing_result [] ","Aws Crt Auth Signer  sign_request ","Aws Crt Auth Signable  new ","Aws Crt Http Message  new ","url to_s ","Aws Crt Auth SigningConfig  new ","headers []= ","headers include? ","headers delete ","Time  parse "," crt_sign_request ","Signer  use_crt? ","@signing_algorithm == ","sigv4-s3express to_sym "," signature v4_headers []= ","sigv4_headers merge  []= ","sigv4_ downcase_headers  []= ","(dstr\n  (str \"AWS4-HMAC-SHA256 Credential=\")\n  (begin\n    (send nil :credential\n      (lvar :creds)\n      (lvar :datetime [] )))) join ","(dstr\n  (str \"AWS4-HMAC-SHA256 Credential=\")\n  (begin\n    (send nil :credential\n      (lvar : get_credentials )\n      (lvar :date)))) join ","(dstr\n  (str \"AWS4-HMAC-SHA256 Credential=\")\n  (begin\n    (send nil :credential\n      (lvar : fetch_credentials )\n      (lvar :date)))) join ","  signature ned_headers "," signed_headers merge  "," signed_ downcase_headers  ","  signature nature "," get_credentials  secret_access_key "," fetch_credentials  secret_access_key "," string_to_ signature n ","headers merge  merge "," downcase_headers  merge "," signature v4_headers [] ","sigv4_headers merge  [] ","sigv4_ downcase_headers  [] "," get_credentials  session_token "," fetch_credentials  session_token ","headers merge  [] "," downcase_headers  [] ","datetime [] time [] ","headers []  [] ","Time  parse  [] "," downcase_headers merge  "," downcase_ downcase_headers  "," extract_ extract_url  "," extract_ extract_http_method  "," signature v4_headers merge ","sigv4_headers merge  merge ","sigv4_ downcase_headers  merge "," signature ning_result [] ","Aws Crt Auth Signer  sign_request  [] ","Aws Crt Auth Signer   signature n_request "," extract_url  to_s ","headers merge  []= "," downcase_headers  []= ","headers merge  include? "," downcase_headers  include? ","headers merge  delete "," downcase_headers  delete "," crt_ signature n_request ","@ signature ning_algorithm == "," signature v4-s3express to_sym "]}," Aws Sigv4 Signer initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","options [] ! ! ","options [] ! ","options [] ","options key? ","(sym :uri_escape_path) each ","@unsigned_headers << ","Set  new ","(send\n  (lvar :options) :fetch\n  (sym :unsigned_headers)\n  (array)) map ","options fetch "," extract_credentials_provider "," extract_region "," extract_service "," raise ","options [] == ","Signer  use_crt? ! ","Signer  use_crt? ","@signing_algorithm == ","Aws Crt GEM_VERSION  <= ","sigv4-s3express to_sym ","Set  new  << ","options fetch  == "]}," Aws Sigv4 Signature initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","options each_pair "]}," Aws Sigv4 Request body":{"type":"method","name":"body","children":[],"call":[]}," Aws Sigv4 Request body=":{"type":"method","name":"body=","children":[],"call":[]}," Aws Sigv4 Request headers":{"type":"method","name":"headers","children":[],"call":[]}," Aws Sigv4 Request headers=":{"type":"method","name":"headers=","children":[],"call":[]}," Aws Sigv4 Request endpoint":{"type":"method","name":"endpoint","children":[],"call":[]}," Aws Sigv4 Request endpoint=":{"type":"method","name":"endpoint=","children":[],"call":["URI  parse ","endpoint to_s "]}," Aws Sigv4 Request http_method":{"type":"method","name":"http_method","children":[],"call":[]}," Aws Sigv4 Request http_method=":{"type":"method","name":"http_method=","children":[],"call":[]}," Aws Sigv4 Request initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","options each_pair "]}," Aws Sigv4 Errors MissingRegionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws Sigv4 Errors MissingCredentialsError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"missing credentials, provide credentials with one of the following options:\\n\") strip "]}," Aws Sigv4 StaticCredentialsProvider initialize":{"type":"method","name":"initialize","children":[],"call":["Credentials  new ","options [] "]}," Aws Sigv4 Credentials set?":{"type":"method","name":"set?","children":[],"call":["(and\n  (send nil :access_key_id)\n  (send nil :secret_access_key)) ! ! ","(and\n  (send nil :access_key_id)\n  (send nil :secret_access_key)) ! "," secret_access_key "," access_key_id "," secret_access_key empty? ! "," secret_access_key empty? "," secret_access_key nil? ! "," secret_access_key nil? "," access_key_id empty? ! "," access_key_id empty? "," access_key_id nil? ! "," access_key_id nil? "]}," Aws Sigv4 Credentials initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","options [] ","options [] empty? ! ","options [] empty? "]}," Aws Sigv4 Signer event_signature":{"type":"method","name":"event_signature","children":[],"call":[" hmac ","AWS4 + "]}," Aws Sigv4 Signer event_string_to_sign":{"type":"method","name":"event_string_to_sign","children":[],"call":["(str \"AWS4-HMAC-SHA256-PAYLOAD\") join "," sha256_hexdigest "," credential_scope ","datetime [] ","encoder encode_headers read ","encoder encode_headers ","Aws EventStream Message  new "]}," Aws Sigv4 Signer sign_event":{"type":"method","name":"sign_event","children":[],"call":["sig unpack first ","sig unpack ","headers []= ","Aws EventStream HeaderValue  new "," event_signature ","creds secret_access_key "," event_string_to_sign ","time to_i * ","time to_i ","datetime [] ","time utc strftime ","time utc ","Time  now "," get_credentials "," fetch_credentials ","@credentials_provider credentials "," event_signature  unpack first "," event_signature  unpack "," event_ event_signature nature "," get_credentials  secret_access_key "," fetch_credentials  secret_access_key ","@credentials_provider credentials  secret_access_key "," event_string_to_ event_signature n ","Time  now  to_i * ","Time  now  to_i ","datetime [] time [] ","time utc strftime  [] ","dateTime  now  [] ","Time  now  utc strfTime  now  ","Time  now  utc "]}," Aws Sigv4 Signer fetch_credentials":{"type":"method","name":"fetch_credentials","children":[],"call":[" raise ","credentials secret_access_key ","credentials access_key_id ","@credentials_provider credentials ","credentials set? "," credentials_set? ","Aws Crt Auth StaticCredentialsProvider  new ","credentials session_token ","@credentials_provider expiration ","@credentials_provider respond_to? ","@credentials_provider credentials  secret_access_key ","@credentials_provider credentials  access_key_id ","@@credentials_provider credentials _provider @credentials_provider credentials  ","@credentials_provider credentials  set? "," @credentials_provider credentials _set? ","@credentials_provider credentials  session_token ","@@credentials_provider credentials _provider expiration ","@credentials_provider @credentials_provider expiration  ","@@credentials_provider credentials _provider respond_to? "]}," Aws Sigv4 StaticCredentialsProvider set?":{"type":"method","name":"set?","children":[],"call":[" credentials set? "," credentials "," credentials ! ! "," credentials ! "]}," Aws Sigv4 Signer use_crt?":{"type":"method","name":"use_crt?","children":[],"call":[" require "]}," Aws Sigv4 Signer crt_presign_url":{"type":"method","name":"crt_presign_url","children":[],"call":["options [] []= ","options [] ","options [] is_a? ","URI  parse ","signing_result [] ","Aws Crt Auth Signer  sign_request ","url to_s ","Aws Crt Auth Signable  new ","Aws Crt Http Message  new ","Aws Crt Auth SigningConfig  new ","options fetch "," sha256_hexdigest ","headers delete ","Time  now "," host ","headers [] "," downcase_headers "," extract_url "," extract_http_method "," crt_fetch_credentials "," presigned_url_expiration ","Time  strptime ","Aws Crt Auth Signer  sign_request  [] ","URI  parse  to_s "," extract_url  to_s "," downcase_headers  delete "," downcase_headers  [] "," downcase_ downcase_headers  "," extract_URI  parse  "," extract_ extract_url  "," extract_ extract_http_method  "," presigned_URI  parse _expiration "," presigned_ extract_url _expiration "]}," Aws Sigv4 Signer crt_sign_request":{"type":"method","name":"crt_sign_request","children":[],"call":["Signature  new ","sigv4_headers merge "," downcase_headers ","signing_result [] ","Aws Crt Auth Signer  sign_request ","Aws Crt Auth Signable  new ","Aws Crt Http Message  new ","url to_s ","Aws Crt Auth SigningConfig  new ","headers merge ","sigv4_headers []= ","headers [] ","headers []= ","headers include? "," host "," sha256_hexdigest ","request [] ","headers delete ","Time  parse "," extract_url "," extract_http_method "," crt_fetch_credentials ","sigv4_headers merge  merge ","sigv4_ downcase_headers  merge "," downcase_headers merge  "," downcase_ downcase_headers  ","Aws Crt Auth Signer  sign_request  [] "," extract_url  to_s ","headers merge  merge "," downcase_headers  merge ","sigv4_headers merge  []= ","sigv4_ downcase_headers  []= ","headers merge  [] "," downcase_headers  [] ","headers merge  []= "," downcase_headers  []= ","headers merge  include? "," downcase_headers  include? ","headers merge  delete "," downcase_headers  delete "," extract_ extract_url  "," extract_ extract_http_method  "]}," Aws Sigv4 Signer crt_fetch_credentials":{"type":"method","name":"crt_fetch_credentials","children":[],"call":["Aws Crt Auth StaticCredentialsProvider  new ","creds session_token ","creds secret_access_key ","creds access_key_id "," fetch_credentials "," fetch_credentials  session_token "," fetch_credentials  secret_access_key "," fetch_credentials  access_key_id "]}," Aws Sigv4 Signer presigned_url_expiration":{"type":"method","name":"presigned_url_expiration","children":[],"call":["(lvar :expires_in) min ","(send\n  (lvar :expiration) :-\n  (send\n    (const nil :Time) :now)) to_i ","expiration - ","Time  now "," extract_expires_in ","expiration_seconds <= ","(send\n  (lvar :expiration) :-\n  (lvar :datetime)) to_i ","(lvar : extract_expires_in ) min "," extract_ extract_expires_in  ","(send\n  (lvar :expiration) :-\n  (send\n    (const nil :Time) :now)) to_i  <= ","(send\n  (lvar :expiration) :-\n  (lvar :datetime)) to_i  <= "]}}