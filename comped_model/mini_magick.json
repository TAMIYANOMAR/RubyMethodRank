{" MiniMagick CommandBuilder method_missing":{"type":"method","name":"method_missing","children":[],"call":["(dstr\n  (str \"-\")\n  (begin\n    (lvar :symbol))) + ","@args << ","symbol to_s gsub ","symbol to_s "," push ","args join ","args first to_s include? ","args first to_s ","args first ","args size == ","args size ","MOGRIFY_COMMANDS  include? ","args any? "," args "," add "," raise ","guessed_command_name == "," add_creation_operator ","IMAGE_CREATION_OPERATORS  include? "," add_command ","symbol to_s gsub  == "]}," MiniMagick CommandBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[" push ","options each "]}," MiniMagick Image run_command":{"type":"method","name":"run_command","children":[],"call":[" raise ","args join ","$? != ","a to_s ","args collect ","a [] == ","a [] ","arg [] == ","arg [] ","arg to_s ","args collect! ","(pair\n  (sym :status_code)\n  (gvar :$?)) inspect ","command inspect ","$? exitstatus != ","$? exitstatus ","arg !~ ","sub output ","(pair\n  (sym :status_code)\n  (send\n    (lvar :sub) :exitstatus)) inspect ","sub exitstatus ","sub output =~ "," destroy! ","sub exitstatus != ","Subexec  run ","MiniMagick  timeout ","(begin\n  (send\n    (const nil :MiniMagick) :processor)) strip ","MiniMagick  processor ","(pair\n  (sym :status_code)\n  (lvar :exit_status)) inspect ","output =~ ","exit_status != "," MiniMagick  use_subexec "," run ","CommandBuilder  new ","args unshift ","command == ","MiniMagick  processor to_s == ","MiniMagick  processor to_s ","MiniMagick  mogrify? "," run_queue ","MiniMagick  debug ! ","MiniMagick  debug ","builder << ","args each ","MiniMagick Tool  const_get new ","MiniMagick Tool  const_get ","tool_name capitalize "," ra to_s ise ","a to_s rgs join ","arg to_s s join ","a to_s  to_s ","a to_s rgs collect ","arg to_s s collect ","a to_s  [] == ","a to_s  [] ","a to_s rg [] == ","arg to_s  [] == ","a to_s rg [] ","arg to_s  [] ","a to_s rg to_s ","arg to_s  to_s ","a to_s rgs collect! ","arg to_s s collect! ","(pa to_s ir\n  (sym :sta to_s tus_code)\n  (gva to_s r :$?)) inspect ","comma to_s nd inspect ","(begin\n  (send\n    (const nil :MiniMagick) :processor)) strip  inspect ","$? exitsta to_s tus != ","$? exitsta to_s tus ","a to_s rg !~ ","arg to_s  !~ ","Subexec  run  output ","sub sub output  ","(pa to_s ir\n  (sym :sta to_s tus_code)\n  (send\n    (lva to_s r :sub) :exitsta to_s tus)) inspect ","(pair\n  (sym :status_code)\n  (send\n    (lvar :Subexec  run ) :exitstatus)) inspect ","sub exitsta to_s tus ","Subexec  run  exitstatus ","Subexec  run  output =~ ","sub sub output  =~ ","sub exitsta to_s tus != ","Subexec  run  exitstatus != ","MiniMa to_s gick  timeout ","(begin\n  (send\n    (const nil :MiniMa to_s gick) :processor)) strip ","MiniMa to_s gick  processor ","(pa to_s ir\n  (sym :sta to_s tus_code)\n  (lva to_s r :exit_sta to_s tus)) inspect ","(pair\n  (sym :status_code)\n  (lvar :$? exitstatus )) inspect ","(pair\n  (sym :status_code)\n  (lvar :sub exitstatus )) inspect ","sub output  =~ ","exit_sta to_s tus != ","$? exitstatus  != ","sub exitstatus  != "," MiniMa to_s gick  use_subexec "," MiniMagick  use_Subexec  run exec ","Comma to_s ndBuilder  new ","a to_s rgs unshift ","arg to_s s unshift ","comma to_s nd == ","(begin\n  (send\n    (const nil :MiniMagick) :processor)) strip  == ","MiniMa to_s gick  processor to_s == ","MiniMa to_s gick  processor to_s ","MiniMa to_s gick  mogrify? ","MiniMa to_s gick  debug ! ","MiniMa to_s gick  debug ","a to_s rgs ea to_s ch ","arg to_s s each ","MiniMa to_s gick Tool  const_get new ","MiniMa to_s gick Tool  const_get ","tool_na to_s me ca to_s pita to_s lize "]}," MiniMagick Image info":{"type":"method","name":"info","children":[],"call":["info_array [] match [] to_i ","info_array [] match [] ","info_array [] match ","info_array [] "," run_command split "," run_command ","@info [] "," run_queue "," run_command split  [] match [] to_i "," run_command split  [] match [] "," run_command split  [] match "," run_command split  [] "]}," MiniMagick Image combine_options":{"type":"method","name":"combine_options","children":[],"call":[" run_command ","c args << ","c args ","block call ","CommandBuilder  new "," run ","c << ","tool == ","tool to_s == ","tool to_s "," path "," block_given? "," mogrify "," run_CommandBuilder  new ommand ","CommandBuilder  new  args << ","CommandBuilder  new  args ","bloCommandBuilder  new k CommandBuilder  new all ","CommandBuilder  new  << "," bloCommandBuilder  new k_given? "]}," MiniMagick Image method_missing":{"type":"method","name":"method_missing","children":[],"call":[" run_command ","args push ","MOGRIFY_COMMANDS  include? ","symbol to_s ","symbol to_s gsub ","c method_missing "," combine_options ","c send ","@queue send ","builder send ","builder respond_to? "," mogrify "]}," MiniMagick Image write":{"type":"method","name":"write","children":[],"call":["output_file write ","image_file read "," open "," run_command ","FileUtils  copy_file ","output_to write ","f read ","f binmode ","File  open ","output_to respond_to? ! ","output_to respond_to? ","output_to kind_of? ","output_to to_s gsub ","output_to to_s ","output_to to_s inspect "," path "," path_for_windows_quote_space ","MiniMagick Utilities  windows? ","MiniMagick  validate_on_write "," run_queue ","MiniMagick Utilities  path ","IO  copy_stream ","builder << ","MiniMagick Tool Convert  new "," layer? "," path == "]}," MiniMagick Image initialize":{"type":"method","name":"initialize","children":[],"call":[" run_command "," reset_queue "," combine_options ","MiniMagick Image Info  new "," fail ","source inspect ","source path ","source respond_to? ","source to_s ","source is_a? ","input_path to_s "]}," MiniMagick Image from_file":{"type":"method","name":"from_file","children":[],"call":[" from_blob ","f read ","File  open ","File  extname "," open "," warn "]}," MiniMagick Image from_blob":{"type":"method","name":"from_blob","children":[],"call":[" new ","tmp path ","tmp close ","tmp write ","Tempfile  new ","tmp binmode ","@tmp path ","@tmp close ","@tmp write ","@tmp binmode ","ImageTempFile  new ","tempfile path ","tempfile close ","tempfile write ","tempfile binmode ","ext to_s "," raise ","image valid? ! ","image valid? ","f write "," create "," warn ","Tempfile  new  path ","Tempfile  new  close ","Tempfile  new  write ","Tempfile  new  binmode ","@Tempfile  new  path ","ImageTempFile  new  path ","@Tempfile  new  close ","ImageTempFile  new  close ","@Tempfile  new  write ","ImageTempFile  new  write ","@Tempfile  new  binmode ","ImageTempFile  new  binmode "," new  valid? ! "," new  valid? "]}," MiniMagick Image format":{"type":"method","name":"format","children":[],"call":[" info [] "," info "," raise ","File  exists? ","@path sub "," run_command ","File  unlink ","Dir  [] each ","Dir  [] "," e ","File  exist? ","FileUtils  copy_file ","File  delete ","old_path == ","@path sub! ","@path dup ","old_path != "," run ","c << "," block_given? ","CommandBuilder  new ","@path + "," path "," path= "," path sub "," fail "," run_queue "," path replace "," path == ","@tempfile unlink ","convert << ","MiniMagick Tool Convert  new ","new_tempfile path ","MiniMagick Utilities  tempfile ","@info clear "," layer? "," destroy! ","convert send ","opt to_s ","read_opts each ","input_path << "," layer? ! "," path dup "," Pathname sub_ext to_s "," Pathname sub_ext "," Pathname ","new_tempfile unlink ","@tempfile != ","new_path sub! ","@path sub  sub "," run_CommandBuilder  new ommand ","Dir  [] eaCommandBuilder  new h ","FileUtils  CommandBuilder  new opy_file ","@path dup  == "," path  == ","@path sub  sub! ","@path sub  dup ","@path dup  != "," path  != ","CommandBuilder  new  << "," bloCommandBuilder  new k_given? ","@path sub  + "," path replaCommandBuilder  new e ","CommandBuilder  new onvert << ","MiniMagiCommandBuilder  new k Tool Convert  new ","MiniMagick Utilities  tempfile  path ","MiniMagiCommandBuilder  new k Utilities  tempfile ","@info CommandBuilder  new lear ","CommandBuilder  new onvert send ","read_opts eaCommandBuilder  new h "," path dup  << ","MiniMagick Utilities  tempfile  unlink "," path sub  sub! ","new_tempfile path  sub! "," Pathname sub_ext to_s  sub! "]}," MiniMagick Image height":{"type":"method","name":"height","children":[],"call":[" info [] "," info "]}," MiniMagick Image width":{"type":"method","name":"width","children":[],"call":[" info [] "," info "]}," MiniMagick Image []":{"type":"method","name":"[]","children":[],"call":[" run_command "," run_command chop ","Time  local "," [] split "," [] "," run_command split [] to_i "," run_command split [] "," run_command split ","value to_s "," format_option ","File  size ","v to_i "," run_command split [] split map "," run_command split [] split "," read_character_data ","result include? "," escaped_path "," run_command split [] strip "," path "," run_command chomp ","MiniMagick Utilities  windows? ","@info [] ","@info []= ","retrieved nil? ","width_height [] "," info ","value to_sym "," run_command chop  include? "," run_command chomp  include? "," info  nil? "]}," MiniMagick Image format_option":{"type":"method","name":"format_option","children":[],"call":[" windows? "]}," MiniMagick Image windows?":{"type":"method","name":"windows?","children":[],"call":["(send\n  (const nil :RUBY_PLATFORM) :=~\n  (regexp\n    (str \"win32\")\n    (regopt))) nil? ! ","(send\n  (const nil :RUBY_PLATFORM) :=~\n  (regexp\n    (str \"win32\")\n    (regopt))) nil? ","RUBY_PLATFORM  =~ ","(send\n  (const nil :RUBY_PLATFORM) :=~\n  (regexp\n    (str \"win32|mswin|mingw\")\n    (regopt))) nil? ! ","(send\n  (const nil :RUBY_PLATFORM) :=~\n  (regexp\n    (str \"win32|mswin|mingw\")\n    (regopt))) nil? "]}," MiniMagick CommandBuilder +":{"type":"method","name":"+","children":[],"call":["@args << "," push "," puts "," warn ","options each ","options any? ","@args pop gsub ","@args pop "," escape_string ","options to_a each ","options to_a "]}," MiniMagick Image to_blob":{"type":"method","name":"to_blob","children":[],"call":["File  read ","f close ","f read ","f binmode ","File  new "," path "," run_queue ","File  binread ","File  new  close ","File  new  read ","File  new  binmode "]}," MiniMagick ImageTempFile make_tmpname":{"type":"method","name":"make_tmpname","children":[],"call":[" sprintf ","File  basename ","File  extname ","mini_magick%d-%d%s % ","File  File  extname name "]}," MiniMagick Image <<":{"type":"method","name":"<<","children":[],"call":[" run_command ","args << "," escaped_path "," path "]}," MiniMagick Image open":{"type":"method","name":"open","children":[],"call":[" from_blob ","File  extname ","f read ","File  open "," read ","Kernel  open "," require ","Kernel  respond_to? ! ","Kernel  respond_to? ","file_or_url include? ","file_or_url to_s ","URI  parse path ","URI  parse ","file_or_url to_s  include? ","file_or_url to_s  to_s "]}," MiniMagick Image destroy!":{"type":"method","name":"destroy!","children":[],"call":["File  unlink "," tempfile path "," tempfile "," tempfile nil? ","@tempfile path ","@tempfile nil? ","File  exists? "," path ","File  exist? ","@tempfile unlink ","FileUtils  rm_f ","@tempfile path sub ","@tempfile path end_with? "]}," MiniMagick Image collapse!":{"type":"method","name":"collapse!","children":[],"call":[" run_command "," path ","builder quality "," mogrify "]}," MiniMagick Image read_character_data":{"type":"method","name":"read_character_data","children":[],"call":["result << ","%c % ","val to_i ","chars each ","list_of_characters gsub split ","list_of_characters gsub ","string scan map map join ","string scan map map ","string scan map ","string scan ","list_of_characters gsub split  each "]}," MiniMagick CommandBuilder push":{"type":"method","name":"push","children":[],"call":["@args << ","value to_s strip ","value to_s ","value !~ ","arg strip ","arg to_s strip ","arg to_s "]}," MiniMagick CommandBuilder command":{"type":"method","name":"command","children":[],"call":["(begin\n  (send\n    (const nil :MiniMagick) :processor)) strip ","@args join ","MiniMagick  processor ","com strip ","File  join ","MiniMagick  processor_path ","MiniMagick  processor_path nil? ","MiniMagick  processor nil? ","(begin\n  (ivar :@tool)) strip "," args join "," args ","MiniMagick  mogrify? ","File  join  strip ","(begin\n  (ivar :@tool)) strip  strip "]}," MiniMagick Image run":{"type":"method","name":"run","children":[],"call":["sub output "," raise ","(pair\n  (sym :status_code)\n  (send\n    (lvar :sub) :exitstatus)) inspect ","sub exitstatus ","command inspect ","sub output =~ "," destroy! ","sub exitstatus != ","Subexec  run ","MiniMagick  timeout ","command_builder command ","command inspect gsub "," fail ","Subexec  run  output ","(pair\n  (sym :status_code)\n  (send\n    (lvar :Subexec  run ) :exitstatus)) inspect ","Subexec  run  exitstatus ","command_builder command  inspect ","Subexec  run  output =~ ","Subexec  run  exitstatus != ","command_builder command _builder command_builder command  ","command inspect gSubexec  run  ","command_builder command  inspect gsub "]}," MiniMagick Image composite":{"type":"method","name":"composite","children":[],"call":["Image  new ","tempfile path "," run ","command push "," path ","other_image path ","block call ","CommandBuilder  new ","tempfile close ","tempfile binmode ","Tempfile  new ","second_tempfile path ","second_tempfile close ","second_tempfile binmode ","mask path ","mask nil? "," run_queue ","output_tempfile path ","composite << "," block_given? ","MiniMagick Tool Composite  new ","MiniMagick Utilities  tempfile ","Tempfile  new  path ","CommandBuilder  new  push ","Tempfile  new  close ","Tempfile  new  binmode ","second_Tempfile  new  path ","second_Tempfile  new  close ","second_Tempfile  new  binmode ","output_Tempfile  new  path ","MiniMagick Utilities  tempfile  path ","MiniMagick Utilities  Tempfile  new  "]}," MiniMagick Image valid?":{"type":"method","name":"valid?","children":[],"call":[" run_command "," path "," validate! "]}," MiniMagick CommandBuilder add":{"type":"method","name":"add","children":[],"call":[" push ","options join ","options any? ","options each "]}," MiniMagick Image create":{"type":"method","name":"create","children":[],"call":["tempfile close "," raise ","image valid? ! ","image valid? "," new ","tempfile path ","block call ","tempfile binmode ","Tempfile  new ","ext to_s ","ext to_s downcase "," fail ","MiniMagick  validate_on_create ","Tempfile  new  close "," new  valid? ! "," new  valid? ","Tempfile  new  path ","Tempfile  new  binmode "]}," MiniMagick Image read":{"type":"method","name":"read","children":[],"call":["f write ","stream read "," create ","StringIO  new ","stream is_a? ","f read ","File  open ","stream path to_s ","stream path ","File  binread ","File  respond_to? ","stream respond_to? ","StringIO  new  read ","StringIO  new  is_a? ","StringIO  new  path to_s ","StringIO  new  path ","StringIO  new  respond_to? "]}," MiniMagick choose_processor":{"type":"method","name":"choose_processor","children":[],"call":[" processor= ","(str \"type -P gm\") size > ","(str \"type -P gm\") size ","(str \"type -P mogrify\") size > ","(str \"type -P mogrify\") size ","MiniMagick Utilities  which size > ","MiniMagick Utilities  which size ","MiniMagick Utilities  which "]}," MiniMagick Image escaped_path":{"type":"method","name":"escaped_path","children":[],"call":["Pathname  new to_s gsub ","Pathname  new to_s ","Pathname  new ","Pathname  new to_s inspect "]}," MiniMagick Image import_pixels":{"type":"method","name":"import_pixels","children":[],"call":["image path= ","image run ","CommandBuilder  new ","image path ","image path [] + ","image path [] ","f write "," create "]}," MiniMagick Image mime_type":{"type":"method","name":"mime_type","children":[],"call":["image/ + ","format downcase "," [] ","format to_s downcase ","format to_s "," []  downcase "," []  to_s downcase "," []  to_s "]}," MiniMagick CommandBuilder add_creation_operator":{"type":"method","name":"add_creation_operator","children":[],"call":[" push ","creation_command << ","options each ","options any? ","options to_a each ","options to_a "]}," MiniMagick CommandBuilder escape_string":{"type":"method","name":"escape_string","children":[],"call":["\" + + ","\" + ","Shellwords  escape ","value to_s "]}," MiniMagick CommandBuilder add_command":{"type":"method","name":"add_command","children":[],"call":[" push "," escape_string ","options each ","options any? ","options to_a each ","options to_a "]}," MiniMagick valid_version_installed?":{"type":"method","name":"valid_version_installed?","children":[],"call":[" image_magick_version >= "," minimum_image_magick_version "," image_magick_version "]}," MiniMagick minimum_image_magick_version":{"type":"method","name":"minimum_image_magick_version","children":[],"call":["Gem Version  create "]}," MiniMagick image_magick_version":{"type":"method","name":"image_magick_version","children":[],"call":["Gem Version  create ","(str \"mogrify --version\") split [] split first ","(str \"mogrify --version\") split [] split ","(str \"mogrify --version\") split [] ","(str \"mogrify --version\") split "]}," MiniMagick CommandBuilder format":{"type":"method","name":"format","children":[],"call":[" raise "," fail "]}," MiniMagick CommandBuilder args":{"type":"method","name":"args","children":[],"call":["@args map "," escape_string_windows ","MiniMagick Utilities  windows? ! ","MiniMagick Utilities  windows? ","Utilities  windows_escape ","Utilities  escape "]}," MiniMagick gm?":{"type":"method","name":"gm?","children":[],"call":[" processor == "," processor "," choose_processor "," processor nil? "," processor to_s downcase to_sym == "," processor to_s downcase to_sym "," processor to_s downcase "," processor to_s "," processor to_sym == "," processor to_sym "]}," MiniMagick mogrify?":{"type":"method","name":"mogrify?","children":[],"call":[" processor == "," processor "," choose_processor "," processor nil? "," processor to_s downcase to_sym == "," processor to_s downcase to_sym "," processor to_s downcase "," processor to_s "," processor to_sym == "," processor to_sym "]}," MiniMagick Utilities windows_escape":{"type":"method","name":"windows_escape","children":[],"call":["\" + + ","\" + ","cmdline gsub gsub gsub gsub ","cmdline gsub gsub gsub ","cmdline gsub gsub ","cmdline gsub ","escaped inspect ","escaped include? ","escaped !~ ","value gsub gsub ","value gsub ","value gsub gsub  inspect ","value gsub gsub  include? ","value gsub gsub  !~ "]}," MiniMagick Utilities windows?":{"type":"method","name":"windows?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," MiniMagick Utilities which":{"type":"method","name":"which","children":[],"call":["File  executable? ","File  join ","exts each ","ENV  [] split each ","ENV  [] split ","ENV  [] ","ENV  fetch split each ","ENV  fetch split ","ENV  fetch ","File  File  join cutable? ","ENV  [] split  each "]}," MiniMagick Image path=":{"type":"method","name":"path=","children":[],"call":[]}," MiniMagick Image path":{"type":"method","name":"path","children":[],"call":[" path_for_windows_quote_space ","MiniMagick Utilities  windows? "," run_queue ","MiniMagick Utilities  path "]}," MiniMagick Image path_for_windows_quote_space":{"type":"method","name":"path_for_windows_quote_space","children":[],"call":["path inspect ","@path include? ","Pathname  new to_s ","Pathname  new ","Pathname  new to_s  inspect ","@Pathname  new to_s  include? "]}," MiniMagick CommandBuilder escape_string_windows":{"type":"method","name":"escape_string_windows","children":[],"call":["escaped inspect ","escaped include? ","escaped !~ ","value gsub gsub ","value gsub ","value gsub gsub  inspect ","value gsub gsub  include? ","value gsub gsub  !~ "]}," MiniMagick Image run_queue":{"type":"method","name":"run_queue","children":[],"call":[" reset_queue "," run ","@queue << "," path_for_windows_quote_space ","MiniMagick Utilities  windows? ","MiniMagick Utilities  path "]}," MiniMagick Image reset_queue":{"type":"method","name":"reset_queue","children":[],"call":["@info clear ","MiniMagick CommandBuilder  new "]}," MiniMagick processor":{"type":"method","name":"processor","children":[],"call":["MiniMagick Utilities  which ","processor to_s ","(sym :mogrify) detect "]}," MiniMagick version":{"type":"method","name":"version","children":[],"call":[]}," MiniMagick Utilities path":{"type":"method","name":"path","children":[],"call":["pathname inspect ","path include? ","Pathname  new to_s ","Pathname  new "," windows? ","Pathname  new to_s  inspect "]}," MiniMagick Utilities shell_escape":{"type":"method","name":"shell_escape","children":[],"call":["Shellwords  escape "]}," MiniMagick Utilities escape":{"type":"method","name":"escape","children":[],"call":[" shell_escape "," windows_escape "," windows? "]}," MiniMagick cli_version":{"type":"method","name":"cli_version","children":[],"call":[]}," MiniMagick graphicsmagick?":{"type":"method","name":"graphicsmagick?","children":[],"call":[]}," MiniMagick imagemagick?":{"type":"method","name":"imagemagick?","children":[],"call":[]}," MiniMagick with_cli":{"type":"method","name":"with_cli","children":[],"call":[]}," MiniMagick Utilities tempfile":{"type":"method","name":"tempfile","children":[],"call":["tempfile close "," block_given? ","tempfile binmode ","Tempfile  new tap ","Tempfile  new ","MiniMagick  tmpdir "]}," MiniMagick Tool OptionMethods cli_options":{"type":"method","name":"cli_options","children":[],"call":["help scan map ","help scan ","b << ","MiniMagick Tool  new ","cli_options << ","MiniMagick  graphicsmagick? ","@tool_name == ","help_page scan map ","help_page scan ","tool call ","tool << ","tool call  scan map ","tool call  scan ","help scan map  << ","help_page scan map  << ","@MiniMagick Tool  new _name == ","tool call _page scan map ","tool call _page scan ","MiniMagick Tool  new  call ","MiniMagick Tool  new  << "]}," MiniMagick Tool OptionMethods creation_operators":{"type":"method","name":"creation_operators","children":[],"call":[]}," MiniMagick Tool OptionMethods creation_operator":{"type":"method","name":"creation_operator","children":[],"call":[" << "," define_method ","operator gsub ","operators each "]}," MiniMagick Tool OptionMethods option":{"type":"method","name":"option","children":[],"call":[" merge! "," << "," define_method ","option [] gsub ","option [] ","options each ","value to_s ","option [] tr "]}," MiniMagick Tool OptionMethods reload_methods":{"type":"method","name":"reload_methods","children":[],"call":[" option "," cli_options "," creation_operator "," creation_operators "," undef_method "," instance_methods each "," instance_methods ","help scan map ","help scan ","(send\n  (send\n    (const\n      (const nil :MiniMagick) :Tool) :new\n    (ivar :@tool_name)) :<<\n  (str \"-help\")) call ","MiniMagick Tool  new << ","MiniMagick Tool  new "," help scan map  ","(send\n  (send\n    (const\n      (const nil :MiniMagick) :Tool) :new\n    (ivar :@tool_name)) :<<\n  (str \"-help\")) call  scan map ","(send\n  (send\n    (const\n      (const nil :MiniMagick) :Tool) :new\n    (ivar :@tool_name)) :<<\n  (str \"-help\")) call  scan ","(send\n  (send\n    (const\n      (const nil :MiniMagick) :Tool) :new\n    (ivar :@tool_name)) :<<\n  (str \"-(send\n  (send\n    (const\n      (const nil :MiniMagick) :Tool) :new\n    (ivar :@tool_name)) :<<\n  (str \"-help\")) call \")) call "]}," MiniMagick Tool OptionMethods to_s":{"type":"method","name":"to_s","children":[],"call":[]}," MiniMagick Tool OptionMethods initialize":{"type":"method","name":"initialize","children":[],"call":[" class instances << "," class instances "," class "," reload_methods "]}," MiniMagick Tool OptionMethods instances":{"type":"method","name":"instances","children":[],"call":[]}," MiniMagick Tool +":{"type":"method","name":"+","children":[],"call":[" merge! "," args []= "," args [] sub "," args [] "," args "," args << ","value to_s "," args last sub! "," args last "]}," MiniMagick Tool merge!":{"type":"method","name":"merge!","children":[],"call":[" << ","new_args each "]}," MiniMagick Tool <<":{"type":"method","name":"<<","children":[],"call":[" args << ","arg to_s "," args "]}," MiniMagick Tool executable":{"type":"method","name":"executable","children":[],"call":["exe unshift ","File  join ","exe shift ","MiniMagick  cli_path ","MiniMagick  graphicsmagick? "," name "," Array reverse_each "," Array ","MiniMagick  cli_prefix "," name != ","MiniMagick  imagemagick7? "]}," MiniMagick Tool command":{"type":"method","name":"command","children":[],"call":[" args "," executable "]}," MiniMagick Tool call":{"type":"method","name":"call","children":[],"call":["shell run strip ","shell run "," command ","MiniMagick Shell  new ","stdout chomp "," block_given? ","options []= ","args fetch "," warn ","args any? ","args pop ","args [] is_a? ","args [] ","options merge ","stdout strip ","MiniMagick Shell  new  run strip ","MiniMagick Shell  new  run ","args pop  []= ","args pop  merge "]}," MiniMagick Tool initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","MiniMagick  whiny ","options is_a? "," warn ","options is_a? ! "]}," MiniMagick Tool new":{"type":"method","name":"new","children":[],"call":[]}," MiniMagick Tool inherited":{"type":"method","name":"inherited","children":[],"call":[]}," MiniMagick Tool Stream initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Montage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Mogrify initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Import initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Identify initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Display initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Convert initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Conjure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Composite initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Compare initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Tool Animate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Shell execute":{"type":"method","name":"execute","children":[],"call":["command first ","status exitstatus ","Open3  capture3 ","Timeout  timeout ","MiniMagick  timeout ","MiniMagick  logger debug ","command join ","MiniMagick  logger "," send ","MiniMagick  shell_api gsub ","MiniMagick  shell_api "," log ","MiniMagick  shell_api tr "]}," MiniMagick Shell run":{"type":"method","name":"run","children":[],"call":["$stderr print "," fail ","command join "," execute ","options [] == ","options [] ","options fetch ","MiniMagick  whiny ","status != "]}," MiniMagick Shell initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Logger benchmark":{"type":"method","name":"benchmark","children":[],"call":["action call ","Benchmark  realtime "]}," MiniMagick Logger output":{"type":"method","name":"output","children":[],"call":[" printf "," format "]}," MiniMagick Logger debug":{"type":"method","name":"debug","children":[],"call":[" output ","MiniMagick  debug "," benchmark "]}," MiniMagick Logger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Image layer?":{"type":"method","name":"layer?","children":[],"call":[" path =~ "," path "]}," MiniMagick Image mogrify":{"type":"method","name":"mogrify","children":[{"type":"method","name":"format","children":[],"asgn":[],"call":[" fail "]}],"call":["builder << "," path "," block_given? "," fail ","builder instance_eval ","MiniMagick Tool Mogrify  new ","@info clear ","MiniMagick Tool MogrifyRestricted  new "]}," MiniMagick Image identify":{"type":"method","name":"identify","children":[],"call":["builder << "," path "," block_given? ","MiniMagick Tool Identify  new "]}," MiniMagick Image respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["MiniMagick Tool Mogrify  new respond_to? ","MiniMagick Tool Mogrify  new ","MiniMagick Tool Mogrify  option_methods include? ","method_name to_s ","MiniMagick Tool Mogrify  option_methods "]}," MiniMagick Image layers":{"type":"method","name":"layers","children":[],"call":["MiniMagick Image  new "," path ","layers_count times map ","layers_count times "," identify lines count "," identify lines "," identify "," identify lines count  times map "," identify lines count  times "]}," MiniMagick Image validate!":{"type":"method","name":"validate!","children":[],"call":[" raise ","error message "," identify "]}," MiniMagick Image hash":{"type":"method","name":"hash","children":[],"call":[" signature hash "," signature "]}," MiniMagick Image eql?":{"type":"method","name":"eql?","children":[],"call":[" signature == ","other signature "," signature "," class equal? ","other class "," class "]}," MiniMagick Image attribute":{"type":"method","name":"attribute","children":[],"call":["name to_s "]}," MiniMagick Image Info decode_comma_separated_ascii_characters":{"type":"method","name":"decode_comma_separated_ascii_characters","children":[],"call":["encoded_value scan map map join ","encoded_value scan map map ","encoded_value scan map ","encoded_value scan ","encoded_value include? "]}," MiniMagick Image Info identify":{"type":"method","name":"identify","children":[],"call":["builder << "," block_given? ","MiniMagick Tool Identify  new "," path ","path =~ "]}," MiniMagick Image Info signature":{"type":"method","name":"signature","children":[],"call":["@info []= "," [] ","@info fetch ","@info [] "]}," MiniMagick Image Info raw":{"type":"method","name":"raw","children":[],"call":["@info []= ","b format "," identify ","@info fetch ","@info [] "]}," MiniMagick Image Info exif":{"type":"method","name":"exif","children":[],"call":["@info []= ","hash []= "," decode_comma_separated_ascii_characters ","hash [] ","hash has_key? ","ASCII_ENCODED_EXIF_KEYS  each ","Hash  [] tap ","Hash  [] ","line split ","output gsub split map ","output gsub split ","output gsub "," [] ","@info fetch ","value scan map map join ","value scan map map ","value scan map ","value scan ","value include? ","hash each ","value gsub! ","line == ","hash [] << ","hash keys last ","hash keys ","ASCII_ENCODED_EXIF_KEYS  include? ","match post_match split ","match post_match ","line match ","MiniMagick  cli ","line chomp ","output each_line ","@info [] ","line chomp  split "," []  gsub split map "," []  gsub split "," []  gsub ","hash []  scan map map join "," decode_comma_separated_ascii_characters  scan map map join ","hash []  scan map map "," decode_comma_separated_ascii_characters  scan map map ","hash []  scan map "," decode_comma_separated_ascii_characters  scan map ","hash []  scan "," decode_comma_separated_ascii_characters  scan ","hash []  include? "," decode_comma_separated_ascii_characters  include? ","hash []  gsub! "," decode_comma_separated_ascii_characters  gsub! ","line chomp  == ","line match  post_line match  split ","line match  post_line match  ","line line match  ","line chomp  match ","line chomp  chomp "," []  each_line ","output each_line chomp  "]}," MiniMagick Image Info raw_exif":{"type":"method","name":"raw_exif","children":[],"call":[" [] "]}," MiniMagick Image Info resolution":{"type":"method","name":"resolution","children":[],"call":["output split map ","output split ","b format ","b units "," identify "]}," MiniMagick Image Info mime_type":{"type":"method","name":"mime_type","children":[],"call":[" [] downcase "," [] "]}," MiniMagick Image Info colorspace":{"type":"method","name":"colorspace","children":[],"call":["@info []= "," [] ","@info fetch ","@info [] "]}," MiniMagick Image Info cheap_info":{"type":"method","name":"cheap_info","children":[],"call":["@info fetch ","@info update ","size to_i "," Integer "," [] split "," [] "," raise ","File  size ","path match pre_match ","path match ","path =~ "," parse_warnings split "," parse_warnings ","path match pre_match  match pre_match ","path match pre_match  match ","path match pre_match  =~ "]}," MiniMagick Image Info clear":{"type":"method","name":"clear","children":[],"call":["@info clear "]}," MiniMagick Image Info []":{"type":"method","name":"[]","children":[],"call":[" raw "," exif "," raw_exif "," signature "," resolution "," mime_type "," colorspace "," cheap_info "," data "," details "]}," MiniMagick Image Info initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Configuration reload_tools":{"type":"method","name":"reload_tools","children":[],"call":["MiniMagick Tool OptionMethods  instances each ","MiniMagick Tool OptionMethods  instances "," warn "]}," MiniMagick Configuration logger":{"type":"method","name":"logger","children":[],"call":["MiniMagick Logger  new "]}," MiniMagick Configuration cli_path":{"type":"method","name":"cli_path","children":[],"call":[" instance_variable_set "," instance_variable_get "," instance_variable_defined? "]}," MiniMagick Configuration cli=":{"type":"method","name":"cli=","children":[],"call":[" reload_tools "," raise ","@cli inspect ","(sym :imagemagick) include? ","CLI_DETECTION  key? ! ","CLI_DETECTION  key? ","Utilities  which ","(sym :imagemagick) include? ! "]}," MiniMagick Configuration cli":{"type":"method","name":"cli","children":[],"call":[" processor to_s "," processor "," raise "," instance_variable_set "," fail ","CLI_DETECTION  key "," instance_variable_get "," instance_variable_defined? "]}," MiniMagick Configuration processor=":{"type":"method","name":"processor=","children":[],"call":[" reload_tools "," raise ","@processor inspect ","(str \"mogrify\") include? ","processor to_s ","CLI_DETECTION  value? ","processor to_s  inspect "]}," MiniMagick Configuration processor":{"type":"method","name":"processor","children":[],"call":["MiniMagick Utilities  which ","(str \"mogrify\") detect ","CLI_DETECTION  values detect ","CLI_DETECTION  values "]}," MiniMagick Configuration configure":{"type":"method","name":"configure","children":[],"call":[]}," MiniMagick Configuration extended":{"type":"method","name":"extended","children":[],"call":[]}," MiniMagick Tool OptionMethods new":{"type":"method","name":"new","children":[],"call":[]}," MiniMagick Shell execute_posix_spawn":{"type":"method","name":"execute_posix_spawn","children":[],"call":["stderr read ","stdout read ","Process  waitpid ","POSIX Spawn  popen4 "," require "," raise ","child status ","child err ","child out ","POSIX Spawn Child  new ","MiniMagick  timeout ","options [] to_s ","options [] ","stdin write ","(lvar :stdin) each "," capture_command ","Process  detach ","stdstderr read  read ","stdstdout read  read ","POSIX Spawn Child  new  status ","POSIX Spawn Child  new  err ","child stderr read  ","POSIX Spawn Child  new  out ","child stdout read  ","MiniMagick  timestdout read  "]}," MiniMagick Shell execute_open3":{"type":"method","name":"execute_open3","children":[],"call":["Open3  capture3 "," require ","thread value ","stderr_reader value ","stdout_reader value "," raise ","Process  waitpid ","thread pid ","Process  kill ","thread join ","Timeout  timeout ","MiniMagick  timeout ","in_w close ","in_w write ","options [] to_s ","options [] ","err_r read ","Thread  new ","out_r read ","(lvar :in_w) each ","Open3  popen3 "," capture_command "]}," MiniMagick Tool stack":{"type":"method","name":"stack","children":[],"call":[" << "," block_given? "," send ","value each ","args each "]}," MiniMagick imagemagick7?":{"type":"method","name":"imagemagick7?","children":[],"call":[]}," MiniMagick Tool option_methods":{"type":"method","name":"option_methods","children":[],"call":[]}," MiniMagick Tool method_missing":{"type":"method","name":"method_missing","children":[],"call":[" merge! "," << ","name to_s tr ","name to_s "]}," MiniMagick Tool clone":{"type":"method","name":"clone","children":[],"call":[" merge! "," << "]}," MiniMagick Tool stdout":{"type":"method","name":"stdout","children":[],"call":[" << "]}," MiniMagick Tool stdin":{"type":"method","name":"stdin","children":[],"call":[" << "]}," MiniMagick Tool MogrifyRestricted format":{"type":"method","name":"format","children":[],"call":[" fail "]}," MiniMagick Tool Magick initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniMagick Shell log":{"type":"method","name":"log","children":[],"call":["MiniMagick  logger debug ","[%.2fs] %s % ","MiniMagick  logger ","block call ","Benchmark  realtime "]}," MiniMagick Image portrait?":{"type":"method","name":"portrait?","children":[],"call":[" height > "," width "," height "]}," MiniMagick Image landscape?":{"type":"method","name":"landscape?","children":[],"call":[" width > "," height "," width "]}," MiniMagick Image get_pixels":{"type":"method","name":"get_pixels","children":[],"call":["pixels_array clear ","output clear ","pixels_array each_slice each_slice to_a ","pixels_array each_slice each_slice "," width ","pixels_array each_slice ","output unpack ","shell run ","convert command ","MiniMagick Shell  new ","convert << ","convert depth "," path ","MiniMagick Tool Convert  new ","map length "," raise ","(str \"RGB\") include? ","pixels_array each_slice each_slice to_a _array clear ","output unpack  clear ","pixels_array each_slice each_slice to_a _array each_slice each_slice to_a ","output unpack  each_slice each_slice to_a ","pixels_array each_slice each_slice to_a _array each_slice each_slice ","output unpack  each_slice each_slice ","pixels_array each_slice each_slice to_a _array each_slice ","output unpack  each_slice ","MiniMagick Shell  new  run ","MiniMagick Tool Convert  new  command ","MiniMagick Tool Convert  new  << ","MiniMagick Tool Convert  new  depth "]}," MiniMagick Image ==":{"type":"method","name":"==","children":[],"call":[" signature == ","other signature "," signature "," class == ","other class "," class "]}," MiniMagick Image Info path":{"type":"method","name":"path","children":[],"call":["value =~ "]}," MiniMagick Image Info data":{"type":"method","name":"data","children":[],"call":["data fetch ","data is_a? ","JSON  parse ","convert << "," path ","MiniMagick Tool Convert  new ","@info [] "," raise ","MiniMagick  graphicsmagick? ","JSON  parse fetch ","data fetch  fetch ","JSON  parse  fetch ","data fetch  is_a? ","JSON  parse  is_a? "]}," MiniMagick Image Info details":{"type":"method","name":"details","children":[],"call":["hash []= ","key_stack push ","value empty? ","_hash fetch ","key_stack inject ","line partition map ","line partition ","details_hash [] << ","details_hash [] ","details_hash []= ","details_hash [] empty? ","details_hash keys last ","details_hash keys ","key_stack pop ","key_stack size <= ","key_stack size ","level >= ","line [] length / - ","line [] length / ","line [] length ","line [] ","line strip length zero? ","line strip length ","line strip ","line valid_encoding? ! ","line valid_encoding? ","details_string lines to_a [] each_with_object ","details_string lines to_a [] ","details_string lines to_a ","details_string lines "," identify ","@info [] "," warn ","MiniMagick  imagemagick7? ","MiniMagick  imagemagick? ","level < ","level == ","line split map ","line split ","hash fetch ","details_string each_line with_object inject ","details_string each_line with_object ","details_string each_line ","details_string lines [] each_with_object ","details_string lines [] ","h fetch ","line [] length / -  >= "," identify  lines to_a [] each_with_object "," identify  lines to_a [] "," identify  lines to_a "," identify  lines ","line [] length / -  < ","line [] length / -  == "," identify  each_line with_object inject "," identify  each_line with_object "," identify  each_line "," identify  lines [] each_with_object "," identify  lines [] "]}," MiniMagick Configuration debug=":{"type":"method","name":"debug=","children":[],"call":[" logger level= "," logger "," warn "]}," MiniMagick Image get_image_from_pixels":{"type":"method","name":"get_image_from_pixels","children":[],"call":[]}," MiniMagick Image Info parse_warnings":{"type":"method","name":"parse_warnings","children":[],"call":[" raise ","line match? ","raw_info split each ","raw_info split ","raw_info split size > ","raw_info split size "]}," MiniMagick Tool respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[]}," MiniMagick Shell capture_command":{"type":"method","name":"capture_command","children":[],"call":["(lvar :out_r) each "," raise ","Process  kill ","subprocess_thread pid ","subprocess_thread value ","stderr_reader value ","stdout_reader value ","subprocess_thread join ","Timeout  timeout ","MiniMagick  timeout ","in_w close ","in_w write ","options [] to_s ","options [] ","err_r read ","Thread  new ","out_r read ","(lvar :in_w) each "]}}