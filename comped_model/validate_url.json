{" Perfectline ValidatesUrl Rails3 ClassMethods validates_url":{"type":"method","name":"validates_url","children":[],"call":[" validates_with "," _merge_attributes "]}," Perfectline ValidatesUrl Rails3 UrlValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options fetch "," options ","record errors ","Perfectline ValidatesUrl Validator  valid_url? "]}," Perfectline ValidatesUrl Rails3 UrlValidator initialize":{"type":"method","name":"initialize","children":[],"call":["options reverse_merge! "]}," Perfectline ValidatesUrl Rails2 validates_url":{"type":"method","name":"validates_url","children":[],"call":["record errors add ","options [] ","record errors "," valid_url? ","options fetch "," validates_each ","options reverse_merge! ","attribute_names extract_options! symbolize_keys ","attribute_names extract_options! ","attribute_names extract_options! symbolize_keys  [] ","attribute_names extract_options! symbolize_keys  fetch ","attribute_names extract_options! symbolize_keys  reverse_merge! ","attribute_names extract_attribute_names extract_options! symbolize_keys ! symbolize_keys ","attribute_names extract_attribute_names extract_options! symbolize_keys ! "]}," Perfectline ValidatesUrl Validator valid_url?":{"type":"method","name":"valid_url?","children":[],"call":[]}," ActiveModel Validations ClassMethods validates_url":{"type":"method","name":"validates_url","children":[],"call":[" validates_with "," _merge_attributes "]}," ActiveModel Validations UrlValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options fetch "," options ","record errors ","URI  regexp match ","URI  regexp ","(splat\n  (send\n    (send nil :options) :fetch\n    (sym :schemes))) map ","URI  parse ","schemes include? ","uri scheme ","Addressable URI  parse ","uri host "," filtered_options ","PublicSuffix  valid? "," options fetch ! ","host include? ","value =~ "," validate_url ","errors first ","errors any? ","result reject ","value flat_map ","value reject "," options include? "," options include? ! ","value respond_to? ","uri host include? ","URI  escape ","record result reject  add ","record result reject  ","(splat\n  (send\n    (send nil :options) :fetch\n    (sym :(splat\n  (send\n    (send nil :options) :fetch\n    (sym :schemes))) map ))) map ","(splat\n  (send\n    (send nil :options) :fetch\n    (sym :schemes))) map  include? ","Addressable URI  parse  scheme ","URI  parse  scheme ","Addressable URI  parse  host ","URI  parse  host ","value reject  =~ ","result reject  first ","result reject  any? ","value reject  flat_map ","value reject  reject ","value reject  respond_to? ","Addressable URI  parse  host include? ","URI  parse  host include? "]}," ActiveModel Validations UrlValidator initialize":{"type":"method","name":"initialize","children":[],"call":["options reverse_merge! "]}," ActiveModel Validations UrlValidator filtered_options":{"type":"method","name":"filtered_options","children":[],"call":["filtered []= "," options except "," options "," options except  []= "]}," ActiveModel Validations UrlValidator validate_url":{"type":"method","name":"validate_url","children":[],"call":["record errors add "," filtered_options ","record errors "," options fetch "," options ","PublicSuffix  valid? "," options fetch ! ","host include? ","schemes include? ","value =~ ","URI  regexp ","uri scheme ","uri host ","URI  parse ","URI  parse  scheme ","URI  parse  host "]}}