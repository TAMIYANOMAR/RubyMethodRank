{" Timecop Version check":{"type":"method","name":"check","children":[],"call":[]}," Timecop parse_travel_args":{"type":"method","name":"parse_travel_args","children":[],"call":["args shift ","t sec ","t min ","t hour ","t day ","t month ","t year ","Time  now + ","Time  now ","arg kind_of? ","args empty? ","arg day ","arg month ","arg year ","arg is_a? ","Object  const_defined? ","arg sec ","arg min ","arg hour ","args shifTime  now +  ","args shift s shift ","Time  now +  sec ","Time  now +  min ","Time  now +  hour ","Time  now +  day ","Time  now +  monTime  now + h ","Time  now +  year ","args shift  kind_of? ","args empTime  now + y? ","args shift s empty? ","args shift  day ","arg monTime  now + h ","args shift  month ","args shift  year ","args shift  is_a? ","ObjecTime  now +   consTime  now + _defined? ","args shift  sec ","args shift  min ","args shift  hour "]}," Timecop move_all":{"type":"method","name":"move_all","children":[],"call":["Time  move_time ","Time  local ","Time  zone local ","Time  zone ","Time  zone nil? ! ","Time  zone nil? ","Time  respond_to? ","Time  move_Time  local  ","Time  move_Time  zone local  "]}," Timecop freeze_all":{"type":"method","name":"freeze_all","children":[],"call":["Time  freeze_time ","Time  local ","Time  zone local ","Time  zone ","Time  zone nil? ! ","Time  zone nil? ","Time  respond_to? ","Time  freeze_Time  local  ","Time  freeze_Time  zone local  "]}," Timecop unmock!":{"type":"method","name":"unmock!","children":[],"call":["Time  unmock! "," set_stack "," set_baseline "]}," Timecop travel":{"type":"method","name":"travel","children":[],"call":[" move_all ","new_top second ","new_top minute ","new_top hour ","new_top day ","new_top month ","new_top year "," freeze_all ","new_top mock_type == ","new_top mock_type ","@_stack last "," unmock! ","@_stack size == ","@_stack size ","@_stack pop "," block_given? ","@_stack << ","StackItem  new ","mock_type == "," parse_travel_args "," freeze_or_move ","TimeStackItem  new ","stack_item time ","Time  now "," instance send "," instance "," send_travel ","@_stack replace ","@_stack dup "," raise "," block_given? ! ","Timecop  safe_mode? ","@stack replace "," stack << "," stack "," stack dup ","@safe ! "," stack replace ","@_stack last  second ","@_stack last  minute ","@_stack last  hour ","@_stack last  day ","@_stack last  month ","@_stack last  year ","@_stack last  mock_type == ","@_stack last  mock_type ","@_stack pop  time ","StackItem  new  time ","TimeStackItem  new  time "]}," Timecop initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Timecop unset_all":{"type":"method","name":"unset_all","children":[],"call":[]}," Timecop return":{"type":"method","name":"return","children":[],"call":["Time  now "," instance send "," instance "," unmock! "," block_given? "," set_baseline "," set_stack "," baseline "," stack "," instance unmock! "," instance return "]}," Timecop freeze":{"type":"method","name":"freeze","children":[],"call":["Time  now "," instance send "," instance "," block_given? "," send_travel "]}," DateTime now_with_mock_time":{"type":"method","name":"now_with_mock_time","children":[],"call":[" now_without_mock_time "," mock_time ","Time  now send ","Time  now "]}," DateTime mock_time":{"type":"method","name":"mock_time","children":[],"call":["DateTime  new ","t_now sec ","t_now min ","t_now hour ","t_now day ","t_now month ","t_now year ","t_now nil? ","Time  mock_time ","mocked_time_stack_item datetime ","mocked_time_stack_item nil? ","Timecop  top_stack_item "," mocked_time_stack_item datetime "," mocked_time_stack_item "," mocked_time_stack_item nil? ","Time  mock_time  sec ","Time  mock_time  min ","Time  mock_time  hour ","Time  mock_time  day ","Time  mock_time  month ","Time  mock_time  year ","Time  mock_time  nil? ","Timecop  top_stack_item  datetime ","Timecop  top_stack_item  nil? "," Timecop  top_stack_item  datetime "," Timecop  top_stack_item  "," Timecop  top_stack_item  nil? "]}," Date today_with_mock_date":{"type":"method","name":"today_with_mock_date","children":[],"call":[" today_without_mock_date "," mock_date ","Time  now send ","Time  now "]}," Date mock_date":{"type":"method","name":"mock_date","children":[],"call":["Date  new ","now day ","now month ","now year ","now nil? ","Time  mock_time ","mocked_time_stack_item date ","mocked_time_stack_item nil? ","Timecop  top_stack_item "," mocked_time_stack_item date "," mocked_time_stack_item "," mocked_time_stack_item nil? ","Time  mock_time  day ","Time  mock_time  month ","Time  mock_time  year ","Time  mock_time  nil? ","Timecop  top_stack_item  date ","Timecop  top_stack_item  nil? "," Timecop  top_stack_item  date "," Timecop  top_stack_item  "," Timecop  top_stack_item  nil? "]}," Time now_with_mock_time":{"type":"method","name":"now_with_mock_time","children":[],"call":[" now_without_mock_time "," mock_time "]}," Time unmock!":{"type":"method","name":"unmock!","children":[],"call":[" move_time "]}," Time move_time":{"type":"method","name":"move_time","children":[],"call":[" now_without_mock_time - "," now_without_mock_time ","new_now nil? "]}," Time freeze_time":{"type":"method","name":"freeze_time","children":[],"call":[]}," Time mock_time":{"type":"method","name":"mock_time","children":[],"call":[" now_without_mock_time - "," now_without_mock_time ","@@mock_offset nil? ! ","@@mock_offset nil? ","mocked_time_stack_item time ","mocked_time_stack_item nil? ","Timecop  top_stack_item ","Timecop  top_stack_item  time ","Timecop  top_stack_item  nil? "]}," StackItem initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Timecop set_all":{"type":"method","name":"set_all","children":[],"call":[]}," DateTime mock_time=":{"type":"method","name":"mock_time=","children":[],"call":[]}," Date mock_date=":{"type":"method","name":"mock_date=","children":[],"call":[]}," Time mock_time=":{"type":"method","name":"mock_time=","children":[],"call":[]}," Timecop StackItem initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Timecop time_for_stack_item":{"type":"method","name":"time_for_stack_item","children":[],"call":["Time  local ","stack_item second ","stack_item minute ","stack_item hour ","stack_item day ","stack_item month ","stack_item year ","Time  zone local ","Time  zone ","Time  zone nil? ! ","Time  zone nil? ","Time  respond_to? "]}," Timecop freeze_or_move":{"type":"method","name":"freeze_or_move","children":[],"call":["Time  move_time "," time_for_stack_item ","Time  freeze_time ","stack_item mock_type == ","stack_item mock_type ","stack_item time "]}," Timecop top_stack_item":{"type":"method","name":"top_stack_item","children":[],"call":[" instance instance_variable_get last "," instance instance_variable_get "," instance "," instance send last "," instance send "," instance stack last "," instance stack "]}," Timecop TimeStackItem compute_travel_offset":{"type":"method","name":"compute_travel_offset","children":[],"call":["@time - ","Time  now_without_mock_time "," mock_type == "," mock_type "," time - "," time "]}," Timecop TimeStackItem compute_dst_adjustment":{"type":"method","name":"compute_dst_adjustment","children":[],"call":["60 * ","-1 * * ","-1 * "," time dst? "," time ","(send\n  (send\n    (send nil :time) :dst?) :^\n  (send\n    (send\n      (const nil :Time) :now) :dst?)) ! "," time dst? ^ ","Time  now dst? ","Time  now ","time dst? ","(send\n  (send\n    (lvar :time) :dst?) :^\n  (send\n    (send\n      (const nil :Time) :now) :dst?)) ! ","time dst? ^ "]}," Timecop TimeStackItem parse_time":{"type":"method","name":"parse_time","children":[],"call":["Time  local ","args shift ","Time  now + ","Time  now ","arg kind_of? ","args empty? ","arg day ","arg month ","arg year ","arg is_a? ","Object  const_defined? ","Time  local + ","arg sec ","arg min ","arg hour ","Time  now utc_offset - "," rational_to_utc_offset ","arg offset ","Time  now utc_offset ","arg getlocal ","time_klass local ","Time  parse ","Time  respond_to? ","arg nil? ","expected_time + "," compute_dst_adjustment ","expected_time utc_offset - ","expected_time utc_offset ","arg in_time_zone ","arg respond_to? ","Time  zone ","Timecop  active_support != ","Timecop  active_support "," time_klass local "," time_klass "," time_klass at getlocal "," time_klass at ","arg to_time to_f ","arg to_time "," time_klass parse "," time_klass now "," time_klass now + ","args shift s shift ","args shift  kind_of? ","args shift s empty? ","args shift  day ","args shift  month ","args shift  year ","args shift  is_a? ","args shift  sec ","args shift  min ","args shift  hour ","args shift  offset ","args shift  getlocal ","Time  zone  local ","args shift  nil? ","time_klass local  + "," time_klass local  + ","time_klass local  utc_offset - "," time_klass local  utc_offset - ","time_klass local  utc_offset "," time_klass local  utc_offset ","args shift  in_time_zone ","args shift  respond_to? "," Time  zone  local "," Time  zone  "," Time  zone  at getlocal "," Time  zone  at ","args shift  to_time to_f ","args shift  to_time "," Time  zone  parse "," Time  zone  now "," Time  zone  now + "]}," Timecop TimeStackItem utc_offset_to_rational":{"type":"method","name":"utc_offset_to_rational","children":[],"call":[" Rational ","24 * * ","24 * "]}," Timecop TimeStackItem rational_to_utc_offset":{"type":"method","name":"rational_to_utc_offset","children":[],"call":["(send\n  (begin\n    (send\n      (float 24.0) :/\n      (send\n        (lvar :rational) :denominator))) :*\n  (send\n    (lvar :rational) :numerator)) * ","60 * ","(send\n  (float 24.0) :/\n  (send\n    (lvar :rational) :denominator)) * ","rational numerator ","24.0 / ","rational denominator "]}," Timecop TimeStackItem dst_adjustment":{"type":"method","name":"dst_adjustment","children":[],"call":[]}," Timecop TimeStackItem datetime":{"type":"method","name":"datetime","children":[],"call":["DateTime  new "," utc_offset_to_rational "," sec "," min "," hour "," day "," month "," year "," utc_offset + "," dst_adjustment "," utc_offset "," time send "," time "," sec + "," time to_f % "," time to_f ","datetime_klass new ","Float  method_defined? ","fractions_of_a_second + "," sec zero? ! "," sec zero? "," time to_f %  + "]}," Timecop TimeStackItem date":{"type":"method","name":"date","children":[],"call":[" time send "," time ","date_klass jd "," time to_date jd "," time to_date "," time __send__ jd "," time __send__ "]}," Timecop TimeStackItem time":{"type":"method","name":"time","children":[],"call":["Time  now_without_mock_time + "," travel_offset ","Time  now_without_mock_time "," travel_offset nil? ","@time clone ","time_klass at ","(send\n  (send\n    (const nil :Time) :now_without_mock_time) :+\n  (send nil :travel_offset)) to_f ","@time to_f "," scaled_time "," scaling_factor nil? "," scaling_factor "," times_are_equal_within_epsilon ","klass at ","@time utc to_r ","@time utc ","@time respond_to? ","@time dup utc to_r ","@time dup utc ","@time dup ","@time dup localtime ","@time localtime ","Time  now_without_mock_time_klass at  + ","Time  now_without_mock_klass at  + ","Time  now_without_mock_time_klass at  ","Time  now_without_mock_klass at  ","@time_klass at  clone ","@klass at  clone ","time_klass at _klass at ","klass at _klass at ","(send\n  (send\n    (const nil :Time) :now_without_mock_time_klass at ) :+\n  (send nil :travel_offset)) to_f ","(send\n  (send\n    (const nil :Time) :now_without_mock_klass at ) :+\n  (send nil :travel_offset)) to_f ","@time_klass at  to_f ","@klass at  to_f "," scaled_time_klass at  "," scaled_klass at  "," time_klass at s_are_equal_within_epsilon "," klass at s_are_equal_within_epsilon ","@time_klass at  utc to_r ","@klass at  utc to_r ","@time_klass at  utc ","@klass at  utc ","@time_klass at  respond_to? ","@klass at  respond_to? ","@time_klass at  dup utc to_r ","@klass at  dup utc to_r ","@time_klass at  dup utc ","@klass at  dup utc ","@time_klass at  dup ","@klass at  dup ","@time_klass at  dup localtime_klass at  ","@klass at  dup localklass at  ","@time_klass at  localtime_klass at  ","@klass at  localklass at  "]}," Timecop TimeStackItem travel_offset":{"type":"method","name":"travel_offset","children":[],"call":[" mock_type == "," mock_type "]}," Timecop TimeStackItem utc_offset":{"type":"method","name":"utc_offset","children":[],"call":[" time utc_offset "," time "]}," Timecop TimeStackItem sec":{"type":"method","name":"sec","children":[],"call":[" time sec "," time ","@time sec "]}," Timecop TimeStackItem min":{"type":"method","name":"min","children":[],"call":[" time min "," time ","@time min "]}," Timecop TimeStackItem hour":{"type":"method","name":"hour","children":[],"call":[" time hour "," time ","@time hour "]}," Timecop TimeStackItem day":{"type":"method","name":"day","children":[],"call":[" time day "," time ","@time day "]}," Timecop TimeStackItem month":{"type":"method","name":"month","children":[],"call":[" time month "," time ","@time month "]}," Timecop TimeStackItem year":{"type":"method","name":"year","children":[],"call":[" time year "," time ","@time year "]}," Timecop TimeStackItem initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_dst_adjustment "," compute_travel_offset "," parse_time "," raise ","(sym :freeze) include? ","Time  local ","args shift ","Time  now + ","Time  now ","arg kind_of? ","args empty? ","arg day ","arg month ","arg year ","arg is_a? ","Object  const_defined? ","Time  local + ","arg sec ","arg min ","arg hour ","Time  now_without_mock_time utc_offset - "," rational_to_utc_offset ","arg offset ","Time  now_without_mock_time utc_offset ","Time  now_without_mock_time ","arg getlocal ","mock_type == ","args shift s shift ","args shift  kind_of? ","args shift s empty? ","args shift  day ","args shift  month ","args shift  year ","args shift  is_a? ","args shift  sec ","args shift  min ","args shift  hour ","args shift  offset ","args shift  getlocal "]}," DateTime now_without_mock_time":{"type":"method","name":"now_without_mock_time","children":[],"call":["Time  now_without_mock_time send ","Time  now_without_mock_time ","Time  now_without_mock_time to_datetime "]}," Timecop return_to_baseline":{"type":"method","name":"return_to_baseline","children":[],"call":[" unmock! ","@_stack shift ","Time  now "," instance send "," instance "," set_stack "," stack shift "," stack "," baseline "," instance return_to_baseline "]}," Timecop baseline=":{"type":"method","name":"baseline=","children":[],"call":["@_stack << ","TimeStackItem  new "," instance send "," instance "," stack << "," stack "," set_baseline "," instance baseline= "]}," Timecop baseline":{"type":"method","name":"baseline","children":[],"call":[" instance send "," instance ","Thread  current [] ","Thread  current "," instance baseline "]}," Time new_with_mock_time":{"type":"method","name":"new_with_mock_time","children":[],"call":[" now "," new_without_mock_time ","args size > ","args size "," raise ","ArgumentError  new ","args size <= "]}," Timecop scale":{"type":"method","name":"scale","children":[],"call":[" block_given? "," instance send "," instance ","Time  now "," send_travel "]}," Timecop TimeStackItem scaled_time":{"type":"method","name":"scaled_time","children":[],"call":["(send\n  (ivar :@time) :+\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Time) :now_without_mock_time) :-\n        (ivar :@time_was))) :*\n    (send nil :scaling_factor))) to_f ","@time + ","(send\n  (send\n    (const nil :Time) :now_without_mock_time) :-\n  (ivar :@time_was)) * "," scaling_factor ","Time  now_without_mock_time - ","Time  now_without_mock_time "]}," Timecop TimeStackItem scaling_factor":{"type":"method","name":"scaling_factor","children":[],"call":[]}," Timecop send_travel":{"type":"method","name":"send_travel","children":[],"call":["Time  now "," block_given? "," instance send "," instance "," instance travel "]}," Timecop TimeStackItem times_are_equal_within_epsilon":{"type":"method","name":"times_are_equal_within_epsilon","children":[],"call":["(send\n  (lvar :t1) :-\n  (lvar :t2)) abs < ","(send\n  (lvar :t1) :-\n  (lvar :t2)) abs ","t1 - "]}," Timecop TimeStackItem time_klass":{"type":"method","name":"time_klass","children":[],"call":["Time  zone ","Time  respond_to? "]}," Timecop SafeModeException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Timecop safe_mode?":{"type":"method","name":"safe_mode?","children":[],"call":[]}," Timecop safe_mode=":{"type":"method","name":"safe_mode=","children":[],"call":[]}," Date strptime_with_mock_date":{"type":"method","name":"strptime_with_mock_date","children":[],"call":["Time  strptime to_date ","Time  strptime "," raise ","(str \"Timecop's \") + "," __method__ ","start == ","Date  new ","now mday ","Date  new + ","d [] - ","now wday ","d [] ","now mon ","now year ","Time  now to_date ","Time  now ","Date  strptime_without_mock_date ","Date  _strptime ","Time  at to_date ","Time  at ","Date  commercial ","Date  new next_day ","d keys == ","d keys ","now strftime to_i ","now strftime ","(send\n  (send\n    (lvar :d) :[]\n    (sym :wday)) :+\n  (int 6)) % + ","(send\n  (send\n    (lvar :d) :[]\n    (sym :wday)) :+\n  (int 6)) % ","d [] + ","Time  strptime to_Date  _strptime ate "," __methoDate  _strptime __ ","Time  now to_date  mday ","now mDate  _strptime ay ","Date  _strptime  [] - ","Time  now to_date  wday ","now wDate  _strptime ay ","Date  _strptime  [] ","Time  now to_date  mon ","Time  now to_date  year ","Time  Time  now to_date  to_date ","Time  now to_Date  _strptime ate ","Time  Time  now to_date  ","Date  strptime_without_mock_Date  _strptime ate ","Time  at to_Date  _strptime ate ","Date  new next_Date  _strptime ay ","Date  _strptime  keys == ","Date  _strptime  keys ","Time  now to_date  strftime to_i ","Time  now to_date  strftime ","(senDate  _strptime \n  (senDate  _strptime \n    (lvar :Date  _strptime ) :[]\n    (sym :wDate  _strptime ay)) :+\n  (int 6)) % + ","(senDate  _strptime \n  (senDate  _strptime \n    (lvar :Date  _strptime ) :[]\n    (sym :wDate  _strptime ay)) :+\n  (int 6)) % ","Date  _strptime  [] + "]}," DateTime parse_with_mock_date":{"type":"method","name":"parse_with_mock_date","children":[],"call":[" parse_without_mock_date ","DateTime  new ","parsed_weekday day ","parsed_weekday month ","parsed_weekday year ","DateTime  now + ","DateTime  now ","Date WEEKDAYS  [] - ","DateTime  now wday ","Date WEEKDAYS  [] ","str downcase ","Date WEEKDAYS  keys include? ","Date WEEKDAYS  keys ","args first ","parsed_date + "," mocked_time_stack_item travel_offset_days "," mocked_time_stack_item ","Date  closest_wday to_datetime ","Date  closest_wday ","date_hash [] "," mocked_time_stack_item year ","DateTime  _parse ","Date  _parse "," mocked_time_stack_item month ","args first  downcase "," parse_without_mock_date  + "," mocked_time_stack_item travel_Date WEEKDAYS  [] - _days ","DateTime  _parse  [] ","Date  _parse  [] "]}," Date parse_with_mock_date":{"type":"method","name":"parse_with_mock_date","children":[],"call":[" parse_without_mock_date ","Date  today + ","Date  today ","WEEKDAYS  [] - ","Date  today wday ","WEEKDAYS  [] ","str downcase ","WEEKDAYS  keys include? ","WEEKDAYS  keys ","args first ","parsed_date + "," mocked_time_stack_item travel_offset_days "," mocked_time_stack_item "," closest_wday ","date_hash [] ","Date  new "," mocked_time_stack_item year ","Date  _parse "," mocked_time_stack_item month ","args first  downcase "," parse_without_mock_date  + "," mocked_time_stack_item travel_WEEKDAYS  [] - _days ","Date  _parse  [] "]}," Timecop frozen?":{"type":"method","name":"frozen?","children":[],"call":[" instance instance_variable_get empty? ! "," instance instance_variable_get empty? "," instance instance_variable_get "," instance "," instance send empty? ! "," instance send empty? "," instance send "," instance stack empty? ! "," instance stack empty? "," instance stack "," instance stack last mock_type == "," instance stack last mock_type "," instance stack last "]}," Timecop thread_safe":{"type":"method","name":"thread_safe","children":[],"call":[" instance send "," instance "," instance thread_safe "]}," Timecop thread_safe=":{"type":"method","name":"thread_safe=","children":[],"call":[" initialize "," instance send "," instance "," instance thread_safe= "]}," Timecop set_stack":{"type":"method","name":"set_stack","children":[],"call":["Thread  current []= ","Thread  current "]}," Timecop stack":{"type":"method","name":"stack","children":[],"call":["Thread  current [] ","Thread  current "]}," Timecop set_baseline":{"type":"method","name":"set_baseline","children":[],"call":["Thread  current []= ","Thread  current "]}," Timecop TimeStackItem travel_offset_days":{"type":"method","name":"travel_offset_days","children":[],"call":["(send\n  (send\n    (send\n      (ivar :@travel_offset) :/\n      (int 60)) :/\n    (int 60)) :/\n  (int 24)) round ","@travel_offset / / / ","@travel_offset / / ","@travel_offset / "]}," DateTime mocked_time_stack_item":{"type":"method","name":"mocked_time_stack_item","children":[],"call":["Timecop  top_stack_item "]}," Date closest_wday":{"type":"method","name":"closest_wday","children":[],"call":["wday == ","result wday ","today - ","today wday ","Date  today ","today -  wday ","Date  today  - ","Date  today  wday ","Date  Date  today  "]}," Date mocked_time_stack_item":{"type":"method","name":"mocked_time_stack_item","children":[],"call":["Timecop  top_stack_item "]}}