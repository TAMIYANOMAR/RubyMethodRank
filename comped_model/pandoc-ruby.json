{" PandocRuby convert_options":{"type":"method","name":"convert_options","children":[],"call":["string + ","flag to_s length == ","flag to_s length ","flag to_s ","@options inject ","opt to_s length == ","opt to_s length ","opt to_s ","s + ","opt inject ","opt respond_to? ","opt to_s gsub "," convert_opts_with_args ","(send\n  (ivar :@options) :+\n  (lvar :opts)) flatten inject ","(send\n  (ivar :@options) :+\n  (lvar :opts)) flatten ","@options + "]}," PandocRuby convert":{"type":"method","name":"convert","children":[],"call":[" execute ","@executable + "," convert_options ","File  join + ","File  join ","executable + "," convert_binary "," will_output_binary? "," convert_string "," binary_output "," option_string= "," prepare_options "," options ","@File  join  + ","File  join  + "]}," PandocRuby execute":{"type":"method","name":"execute","children":[],"call":["stdout read strip ","stdout read ","stdin close ","stdin puts ","Open4  popen4 ","Open3  popen3 "," raise ","exit_status success? ","wait_thr value ","stderr read ","Process  kill ","wait_thr pid ","@input_string nil? ","Timeout  timeout "," input_string ","wait_thr value  success? "]}," PandocRuby initialize":{"type":"method","name":"initialize","children":[],"call":["args last ","args last respond_to? ","args [] ","EXECUTABLES  include? ","args [] respond_to? ! ","args [] respond_to? ","File  read ","File  exists? ","args empty? ","args shift "," options= ","args shift join ","args [] is_a? "," input_files= "," input_string= ","(send\n  (send\n    (lvar :args) :shift) :map) join ","args shift map "]}," PandocRuby bin_path=":{"type":"method","name":"bin_path=","children":[],"call":[]}," PandocRuby to_html":{"type":"method","name":"to_html","children":[],"call":[" convert ","@options << "]}," PandocRuby convert_opts_with_args":{"type":"method","name":"convert_opts_with_args","children":[],"call":["string + ","flag length == ","flag length ","flag to_s gsub ","flag to_s ","opt inject ","flag to_s gsub  length == ","flag to_s gsub  length ","flag to_s gsub  to_s gsub ","flag to_s gsub  to_s "]}," PandocRuby allow_file_paths=":{"type":"method","name":"allow_file_paths=","children":[],"call":[]}," PandocRuby will_output_binary?":{"type":"method","name":"will_output_binary?","children":[],"call":["BINARY_WRITERS  keys include? ","opt_value to_s ","BINARY_WRITERS  keys ","opt_key == ","opt each_pair ","opt respond_to? ","(send\n  (ivar :@options) :+\n  (lvar :opts)) flatten each ","(send\n  (ivar :@options) :+\n  (lvar :opts)) flatten ","@options + "]}," PandocRuby convert_binary":{"type":"method","name":"convert_binary","children":[],"call":["tmp_file unlink ","IO  binread "," execute ","executable + "," convert_options ","tmp_file path ","Tempfile  new ","tmp_file close "," command_with_options "," option_string= "," option_string "," options "," execute_pandoc ","Tempfile  new  unlink ","Tempfile  new  path ","Tempfile  new  close "]}," PandocRuby set_pandoc_ruby_options":{"type":"method","name":"set_pandoc_ruby_options","children":[],"call":[" binary_output= ","BINARY_WRITERS  keys include? "," writer ","BINARY_WRITERS  keys "," writer= ","argument to_s ","flag to_sym ","flag == ","BINARY_WRITERS  key? "]}," PandocRuby option_flag":{"type":"method","name":"option_flag","children":[],"call":["flag to_s gsub ","flag to_s ","flag length == ","flag length "]}," PandocRuby create_option":{"type":"method","name":"create_option","children":[],"call":[" option_flag ","argument ! ! ","argument ! "," set_pandoc_ruby_options ","flag ! "," format_flag ","flag to_s ","argument nil? ! ","argument nil? ","flag == ","argument =~ ","argument to_s =~ ","argument to_s "," option_flag to_s  ","flag to_s  ! "," format_flag to_s  ","flag to_s  to_s ","flag to_s  == "]}," PandocRuby prepare_options":{"type":"method","name":"prepare_options","children":[],"call":[" create_option "," prepare_options ","option respond_to? ","value != ","opts inject ","string + "]}," PandocRuby command_with_options":{"type":"method","name":"command_with_options","children":[],"call":[" executable + "," option_string "," executable "]}," PandocRuby convert_string":{"type":"method","name":"convert_string","children":[],"call":[" execute "," command_with_options "," option_string ","@input_files nil? ! ","@input_files nil? "," execute_pandoc "]}," PandocRuby executable":{"type":"method","name":"executable","children":[],"call":["File  join "]}," PandocRuby writer":{"type":"method","name":"writer","children":[],"call":[]}," PandocRuby binary_output":{"type":"method","name":"binary_output","children":[],"call":[]}," PandocRuby options_string":{"type":"method","name":"options_string","children":[],"call":[]}," PandocRuby options":{"type":"method","name":"options","children":[],"call":[]}," PandocRuby format_flag":{"type":"method","name":"format_flag","children":[],"call":["flag to_s gsub ","flag to_s ","flag length == ","flag length ","flag to_s tr ","flag =~ "]}," PandocRuby option_string":{"type":"method","name":"option_string","children":[],"call":[]}," PandocRuby pandoc_path=":{"type":"method","name":"pandoc_path=","children":[],"call":[]}," PandocRuby execute_pandoc":{"type":"method","name":"execute_pandoc","children":[],"call":[" execute "," option_string ","@input_files nil? ! ","@input_files nil? "," input_files "," input_files nil? ! "," input_files nil? ","PandocRuby  pandoc_path "]}}