{" Builder XmlMarkup _ensure_no_block":{"type":"method","name":"_ensure_no_block","children":[],"call":[" fail "," Kernel  raise ","IllegalBlockError  new "]}," Builder XmlMarkup _insert_attributes":{"type":"method","name":"_insert_attributes","children":[],"call":["@target << "," _escape ","v to_s ","k to_s ","attrs each ","attrs nil? ","order member? ","attrs [] ","order each "," _attr_value ","attrs []  to_s "," _attr_attrs [] alue "]}," Builder XmlMarkup _end_tag":{"type":"method","name":"_end_tag","children":[],"call":["@target << "]}," Builder XmlMarkup _start_tag":{"type":"method","name":"_start_tag","children":[],"call":["@target << "," _insert_attributes "]}," Builder XmlMarkup _special":{"type":"method","name":"_special","children":[],"call":[" _newline ","@target << "," _insert_attributes "," _indent "]}," Builder XmlMarkup _text":{"type":"method","name":"_text","children":[],"call":["@target << "]}," Builder XmlMarkup instruct!":{"type":"method","name":"instruct!","children":[],"call":[" _special ","a merge ","directive_tag == "," _ensure_no_block "," block_given? ","attrs [] downcase ","attrs [] "," Kernel  block_given? ","a merge  [] downcase ","a merge  [] "]}," Builder XmlMarkup declare!":{"type":"method","name":"declare!","children":[],"call":[" _special "," _ensure_no_block "," block_given? "," _newline ","@target << "," _nested_structures ","args each "," _indent "," Kernel  block_given? "]}," Builder XmlMarkup comment!":{"type":"method","name":"comment!","children":[],"call":[" _special "," _ensure_no_block "," block_given? "," Kernel  block_given? "]}," Builder XmlMarkup target!":{"type":"method","name":"target!","children":[],"call":[]}," Builder XmlMarkup initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options [] == "," dup "]}," Builder XmlEvents _end_tag":{"type":"method","name":"_end_tag","children":[],"call":["@target end_tag "]}," Builder XmlEvents _start_tag":{"type":"method","name":"_start_tag","children":[],"call":[" _end_tag ","@target start_tag "]}," Builder XmlEvents text!":{"type":"method","name":"text!","children":[],"call":["@target text "]}," Builder XmlBase _nested_structures":{"type":"method","name":"_nested_structures","children":[],"call":["block call "]}," Builder XmlBase _indent":{"type":"method","name":"_indent","children":[],"call":[" text! ","  * ","@level * ","@level == ","@indent == "]}," Builder XmlBase _newline":{"type":"method","name":"_newline","children":[],"call":[" text! ","@indent == "]}," Builder XmlBase _capture_outer_self":{"type":"method","name":"_capture_outer_self","children":[],"call":[" eval "]}," Builder XmlBase _escape":{"type":"method","name":"_escape","children":[],"call":["text gsub gsub gsub ","text gsub gsub ","text gsub ","text to_xs ","$KCODE != ","@encoding != ","(send\n  (lvar :result) :gsub\n  (regexp\n    (str \"[^\\\\u0000-\\\\u007F]\")\n    (regopt))) force_encoding ","c ord ","result gsub ","result encode ","XChar  encode ","text method arity == ","text method arity ","text method "," raise ","encoding dummy? "," Encoding  find ","@ Encoding  find  != ","(send\n  (lvar :XChar  encode ) :gsub\n  (regexp\n    (str \"[^\\\\u0000-\\\\u007F]\")\n    (regopt))) force_encoding ","(send\n  (lvar :result) :gsub\n  (regexp\n    (str \"[^\\\\u0000-\\\\u007F]\")\n    (regopt))) force_ Encoding  find  ","XChar  encode  gsub ","XChar  encode  encode "," Encoding  find  dummy? "]}," Builder XmlBase nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Builder XmlBase <<":{"type":"method","name":"<<","children":[],"call":[" _text "]}," Builder XmlBase text!":{"type":"method","name":"text!","children":[],"call":[" _text "," _escape "]}," Builder XmlBase method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _newline "," _end_tag "," text! "," _start_tag "," _indent ","text nil? "," _nested_structures "," _capture_outer_self ","@self nil? "," raise ","text << ","arg to_s ","attrs merge! ","args each ","args shift ","args first kind_of? ","args first "," Kernel  raise "," tag! "," cache_method_call "," Builder XmlBase  cache_method_calls "]}," Builder XmlBase tag!":{"type":"method","name":"tag!","children":[],"call":[" __send__ "," method_missing ","sym to_sym "," _newline "," _end_tag "," text! "," _start_tag "," _indent ","text nil? "," _nested_structures "," Kernel  raise ","text << ","arg to_s ","attrs merge! ","args each ","sym class == ","sym class ","args shift ","args first kind_of? ","args first ","text empty? "," explicit_nil_handling? "," dup ","sym to_sym  to_sym to_sym  ","sym to_sym  class == ","sym to_sym  class "]}," Builder XmlBase initialize":{"type":"method","name":"initialize","children":[],"call":["encoding downcase "]}," Object method_added":{"type":"method","name":"method_added","children":[],"call":["Builder BlankSlate  hide "," != "," blank_slate_method_added ","BlankSlate  hide "]}," Kernel method_added":{"type":"method","name":"method_added","children":[],"call":["Builder BlankSlate  hide "," != "," blank_slate_method_added ","BlankSlate  hide "]}," Builder BlankSlate hide":{"type":"method","name":"hide","children":[],"call":[" undef_method ","name =~ ","name !~ "," instance_methods include? ","name to_s "," instance_methods "]}," Builder XmlMarkup cdata!":{"type":"method","name":"cdata!","children":[],"call":[" _special "," _ensure_no_block "," block_given? "," Kernel  block_given? ","text gsub "]}," Builder XmlMarkup _attr_value":{"type":"method","name":"_attr_value","children":[],"call":[" _escape_quote ","value to_s "," _escape_attribute "]}," Builder XmlBase _escape_quote":{"type":"method","name":"_escape_quote","children":[],"call":[" _escape gsub "," _escape "]}," String to_xs":{"type":"method","name":"to_xs","children":[],"call":["(send\n  (send nil :unpack\n    (str \"C*\")) :map) join ","n xchr "," unpack map "," unpack ","(send\n  (send nil :unpack\n    (str \"U*\")) :map) join "]}," Fixnum xchr":{"type":"method","name":"xchr","children":[],"call":["n chr ","n < ","XChar PREDEFINED  [] ","range include? ","XChar VALID  find ","XChar CP1252  [] ","(lvar :n) pack "]}," Builder check_for_name_collision":{"type":"method","name":"check_for_name_collision","children":[],"call":[]}," Module append_features":{"type":"method","name":"append_features","children":[],"call":["BlankSlate  hide "," instance_methods each "," instance_methods ","mod != "," blankslate_original_append_features "]}," Object find_hidden_method":{"type":"method","name":"find_hidden_method","children":[],"call":[]}," BlankSlate reveal":{"type":"method","name":"reveal","children":[],"call":["bound_method call ","unbound_method bind "," define_method "," fail "," find_hidden_method "," find_hidden_method  bind "," find_ find_hidden_method  "]}," BlankSlate find_hidden_method":{"type":"method","name":"find_hidden_method","children":[],"call":[" superclass find_hidden_method "," superclass ","@hidden_methods [] "]}," BlankSlate hide":{"type":"method","name":"hide","children":[],"call":[" undef_method ","@hidden_methods []= "," instance_method ","name to_sym ","name !~ "," instance_methods include? ","name to_s "," instance_methods ","name _blankslate_as_name "]}," Builder XChar encode":{"type":"method","name":"encode","children":[],"call":[]}," Builder XChar unicode":{"type":"method","name":"unicode","children":[],"call":[]}," Builder XmlBase cache_method_call":{"type":"method","name":"cache_method_call","children":[],"call":[" instance_eval ","sym to_s "," tag! "," define_method ","(self) class_eval "," method_defined? "]}," Builder XmlBase _escape_attribute":{"type":"method","name":"_escape_attribute","children":[],"call":[" _escape gsub gsub gsub "," _escape gsub gsub "," _escape gsub "," _escape "]}," Symbol _blankslate_as_name":{"type":"method","name":"_blankslate_as_name","children":[],"call":[" to_s "]}," String _blankslate_as_name":{"type":"method","name":"_blankslate_as_name","children":[],"call":[" to_sym "]}," Builder XmlBase explicit_nil_handling?":{"type":"method","name":"explicit_nil_handling?","children":[],"call":[]}," Integer xchr":{"type":"method","name":"xchr","children":[],"call":["(lvar :n) pack ","n chr ","n < ","XChar PREDEFINED  [] ","XChar CP1252  [] "]}," Builder XmlMarkup cdata_value!":{"type":"method","name":"cdata_value!","children":[],"call":[" _special ","text gsub "," _ensure_no_block "," Kernel  block_given? "]}}