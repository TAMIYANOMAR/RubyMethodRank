{" EventMachine HttpRequest send_request":{"type":"method","name":"send_request","children":[],"call":["conn on_error ","EventMachine HttpClient  new "," raise ","e message == ","e message ","c pending_connect_timeout= ","options [] ","c comm_inactivity_timeout= ","c options= ","c method= ","c uri= ","EventMachine  connect ","@uri port ","@uri host ","method to_s upcase ","method to_s ","@uri port= ","options []= ","options [] ! ","(str \"^/\") === ","@uri path ","blk call ","blk nil? ","@req options [] ","@req options ","@req method ","@req uri ","@req port ","@req host ","conn uri= ","@options [] "," real_send_request ","client setup ","FakeHttpClient  new ","@@registry_count [] [] ","@@registry_count [] ","s [] ","@@registry [] "," encode_query ","@uri query ","@uri scheme ","EventMachine HttpClient  new  on_error "," rai@@registry [] e ","e me@@registry [] @@registry [] age == ","e me@@registry [] @@registry [] age ","c pending_EventMachine HttpClient  new ect_timeout= ","option@@registry []  [] ","c option@@registry [] = ","c method to_s upcase = ","EventMachine  EventMachine HttpClient  new ect ","@uri ho@@registry [] t ","method to_s upcase  to_s upcase ","method to_@@registry []  upca@@registry [] e ","method to_s upcase  to_s ","method to_@@registry []  ","option@@registry []  []= ","option@@registry []  [] ! ","(@@registry [] tr \"^/\") === ","@req option@@registry []  [] ","@req option@@registry []  ","@req method to_s upcase  ","@req ho@@registry [] t ","EventMachine HttpClient  new  uri= ","@option@@registry []  [] "," real_@@registry [] end_reque@@registry [] t ","FakeHttpClient  new  setup ","client @@registry [] etup ","@@regi@@registry [] try_count [] [] ","@@regi@@registry [] try_count [] ","@@registry []  [] ","@@regi@@registry [] try [] ","@uri @@registry [] cheme "]}," EventMachine HttpRequest post":{"type":"method","name":"post","children":[],"call":[" send_request "," setup_request "]}," EventMachine HttpRequest head":{"type":"method","name":"head","children":[],"call":[" send_request "," setup_request "]}," EventMachine HttpRequest get":{"type":"method","name":"get","children":[],"call":[" send_request "," setup_request "]}," EventMachine HttpRequest initialize":{"type":"method","name":"initialize","children":[],"call":["Addressable URI  parse ","host kind_of? ","host to_s "]}," EventMachine MultiRequest check_progress":{"type":"method","name":"check_progress","children":[],"call":[" succeed ","(send\n  (send\n    (send\n      (ivar :@responses) :[]\n      (sym :succeeded)) :size) :+\n  (send\n    (send\n      (ivar :@responses) :[]\n      (sym :failed)) :size)) == ","@requests size ","@responses [] size + ","@responses [] size ","@responses [] "," finished? "]}," EventMachine MultiRequest add":{"type":"method","name":"add","children":[],"call":["@requests push "," check_progress ","@responses [] push ","@responses [] ","conn errback ","conn callback ","@responses [] []= ","@requests []= "," raise ","@requests key? "]}," EventMachine MultiRequest initialize":{"type":"method","name":"initialize","children":[],"call":[" callback "," block_given? "," add ","conns each "]}," HttpDecoders GZip finalize":{"type":"method","name":"finalize","children":[],"call":[" raise ","Zlib GzipReader  new read ","Zlib GzipReader  new ","StringIO  new ","@buf to_s ","@gzip read ","@zstream close ","@zstream finish ","@zstream finished? ! ","@zstream finished? "," @zstream finish aise ","Zlib GzipReade@zstream finish   new @zstream finish ead ","Zlib GzipReade@zstream finish   new ","St@zstream finish ingIO  new ","@gzip @zstream finish ead ","@zst@zstream finish eam close ","@zst@zstream finish eam finish ","@zst@zstream finish eam finished? ! ","@zst@zstream finish eam finished? "]}," HttpDecoders GZip decompress":{"type":"method","name":"decompress","children":[],"call":["@gzip readline ","Zlib GzipReader  new ","@buf size > ","@buf size ","@buf << ","LazyStringIO  new "," raise ","@zstream inflate ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ ","@header extract_stream ","@header finished? ! ","@header finished? ","GZipHeader  new "]}," HttpDecoders GZip encoding_names":{"type":"method","name":"encoding_names","children":[],"call":[]}," HttpDecoders Deflate finalize":{"type":"method","name":"finalize","children":[],"call":[" raise ","@zstream close ","@zstream inflate "," @zstream inflate aise ","@zst@zstream inflate eam close ","@zst@zstream inflate eam inflate "]}," HttpDecoders Deflate decompress":{"type":"method","name":"decompress","children":[],"call":[" raise ","@zstream inflate ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ "]}," HttpDecoders Base finalize":{"type":"method","name":"finalize","children":[],"call":[]}," HttpDecoders Base decompress":{"type":"method","name":"decompress","children":[],"call":[]}," HttpDecoders Base receive_decompressed":{"type":"method","name":"receive_decompressed","children":[],"call":["@chunk_callback call ","decompressed size > ","decompressed size "]}," HttpDecoders Base finalize!":{"type":"method","name":"finalize!","children":[],"call":[" receive_decompressed "," finalize "," receive_ finalize  "]}," HttpDecoders Base <<":{"type":"method","name":"<<","children":[],"call":[" receive_decompressed "," decompress ","compressed size > ","compressed size "," receive_ decompress  "]}," HttpDecoders Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HttpDecoders Base encoding_names":{"type":"method","name":"encoding_names","children":[],"call":[]}," HttpDecoders decoder_for_encoding":{"type":"method","name":"decoder_for_encoding","children":[],"call":["d encoding_names include? ","d encoding_names ","DECODERS  each "]}," HttpDecoders accepted_encodings":{"type":"method","name":"accepted_encodings","children":[],"call":["r + ","d encoding_names ","DECODERS  inject "]}," Hash from_array":{"type":"method","name":"from_array","children":[],"call":[]}," Hash to_params":{"type":"method","name":"to_params","children":[],"call":["params chop! ","params << ","stack << ","v is_a? ","hash each ","stack each ","Hash  from_array "," each "]}," EventMachine HttpClient process_body":{"type":"method","name":"process_body","children":[],"call":[" on_error "," on_request_complete ","@data empty? ","@data clear ","@response_header keep_alive? "," on_body_data ","@data read ","@data size ","@data size < ","@bytes_remaining zero? ","@bytes_remaining nil? "]}," EventMachine HttpClient process_response_footer":{"type":"method","name":"process_response_footer","children":[],"call":[" on_error "," on_request_complete ","@data empty? ","@data read == ","@data read ","@data size < ","@data size "]}," EventMachine HttpClient process_chunk_footer":{"type":"method","name":"process_chunk_footer","children":[],"call":[" on_error ","@data read == ","@data read ","@data size < ","@data size "]}," EventMachine HttpClient process_chunk_body":{"type":"method","name":"process_chunk_body","children":[],"call":[" on_body_data ","@data read ","@data size ","@data size < "]}," EventMachine HttpClient parse_chunk_header":{"type":"method","name":"parse_chunk_header","children":[],"call":["@bytes_remaining > ","HttpChunkHeader  new ","@chunk_header chunk_size "," parse_header ","@chunk_header chunk_size  > ","HttpChunkHeader  new  chunk_size "]}," EventMachine HttpClient parse_response_header":{"type":"method","name":"parse_response_header","children":[],"call":[" on_error "," on_decoded_body_data ","decoder_class new ","HttpDecoders  decoder_for_encoding "," response_header [] "," response_header ","@response_header content_length ","@response_header chunked_encoding? "," on_request_complete ","@method == ","@response_header []= ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s ","@uri merge ","location relative? ","URI  parse ","@response_header location ","@response_header http_reason ","@response_header http_status "," parse_header ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s ","@uri join ","Addressable URI  parse ","Encoding  default_external ","Encoding  find ","1 gsub ","(str \";\\\\s*charset=\\\\s*(.+?)\\\\s*(;|$)\") match ","String  method_defined? ","@req decoding ","@req method == ","@req method "," raise ","location host nil? ","location host ","location to_s ","@req uri join ","@req uri ","@cookies << ","@response_header cookie ","@req pass_cookies ","@headers call ","@response_header http_reason= ","CODE  [] ","@response_header http_status= ","@response_header http_version= ","version join ","key upcase gsub ","key upcase ","header each ","(send\n  (send nil :response_header) :[]\n  (const nil :CONTENT_TYPE)) flatten first ","(send\n  (send nil :response_header) :[]\n  (const nil :CONTENT_TYPE)) flatten ","@cookiejar set ","(send\n  (ivar :@response_header) :cookie) flatten each ","(send\n  (ivar :@response_header) :cookie) flatten ","@response_header raw= ","location path= ","location path empty? ","location path ","HttpDecoders  decoder_for_encoding  new ","(send\n  (ivar :@uri) :merge\n  (lvar :(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :URI  parse )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :Addressable URI  parse )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :@req uri join )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  relative? ","URI  parse  relative? ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  relative? ","Addressable URI  parse  relative? ","@req uri join  relative? ","@response_header (send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  ","@response_header URI  parse  ","@response_header (send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  ","@response_header Addressable URI  parse  ","@response_header @req uri join  ","(send\n  (ivar :@uri) :join\n  (lvar :(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s )) to_s ","(send\n  (ivar :@uri) :join\n  (lvar :URI  parse )) to_s ","(send\n  (ivar :@uri) :join\n  (lvar :(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s )) to_s ","(send\n  (ivar :@uri) :join\n  (lvar :Addressable URI  parse )) to_s ","(send\n  (ivar :@uri) :join\n  (lvar :@req uri join )) to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  host nil? ","URI  parse  host nil? ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  host nil? ","Addressable URI  parse  host nil? ","@req uri join  host nil? ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  host ","URI  parse  host ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  host ","Addressable URI  parse  host ","@req uri join  host ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  to_s ","URI  parse  to_s ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  to_s ","Addressable URI  parse  to_s ","@req uri join  to_s ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  path= ","URI  parse  path= ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  path= ","Addressable URI  parse  path= ","@req uri join  path= ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  path empty? ","URI  parse  path empty? ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  path empty? ","Addressable URI  parse  path empty? ","@req uri join  path empty? ","(send\n  (ivar :@uri) :merge\n  (lvar :location)) to_s  path ","URI  parse  path ","(send\n  (ivar :@uri) :join\n  (lvar :location)) to_s  path ","Addressable URI  parse  path ","@req uri join  path "]}," EventMachine HttpClient parse_header":{"type":"method","name":"parse_header","children":[],"call":["@parser reset ","@data read ","@parser finished? "," on_error ","@parser execute ","@data to_str ","@data empty? "]}," EventMachine HttpClient dispatch":{"type":"method","name":"dispatch","children":[],"call":[" raise "," process_body "," process_response_footer "," process_chunk_footer "," process_chunk_body "," parse_chunk_header "," parse_response_header "," parse_response_proxy "]}," EventMachine HttpClient unbind":{"type":"method","name":"unbind","children":[],"call":[" close_connection "," fail "," succeed ","@bytes_remaining nil? ","@state == "," on_error ","e message ","@conn redirect ","@req set_uri ","@response_header location ","@req followed "," redirect? ","m response ","m respond_to? ","@conn middleware each ","@conn middleware "," finished? ","@req options [] ","@req options ","@cookiejar get map ","@cookiejar get ","@req pass_cookies ","@cookies clear ","@cookiejar get map  clear "]}," EventMachine HttpClient on_decoded_body_data":{"type":"method","name":"on_decoded_body_data","children":[],"call":["@response << ","@stream call ","data force_encoding "]}," EventMachine HttpClient on_body_data":{"type":"method","name":"on_body_data","children":[],"call":[" on_decoded_body_data "," on_error ","@content_decoder << "]}," EventMachine HttpClient receive_data":{"type":"method","name":"receive_data","children":[],"call":[" dispatch ","@data << "]}," EventMachine HttpClient send_request_body":{"type":"method","name":"send_request_body","children":[],"call":[" send_data "," normalize_body ","@options [] "," raise ","@req_body inspect ","@conn stream_data ","@req_body respond_to? ","@conn stream_file_data ","@req_body to_path ","@req_body is_a? ","@conn send_data ","@req_body nil? "," normalize_ normalize_body  ","@req_ normalize_body  inspect ","@req_ normalize_body  respond_to? ","@req_ normalize_body  to_path ","@req_ normalize_body  is_a? ","@req_ normalize_body  nil? "]}," EventMachine HttpClient send_request_header":{"type":"method","name":"send_request_header","children":[],"call":[" send_data ","request_header << "," encode_headers "," encode_request ","@uri path ","head []= "," encode_cookie ","head delete ","head [] ","body length "," encode_host "," normalize_body "," munge_header_keys ","@options [] "," options [] is_a? "," options [] "," options ","head [] ! ","@uri query ","HTTP_REQUEST_HEADER  % ","@uri port ","@uri host ","proxy [] ","@state == "," encode_request  << ","HTTP_REQUEST_HEADER  %  << ","request_ munge_header_keys er << "," encode_ munge_header_keys ers "," munge_header_keys  []= "," encode_head delete  "," munge_header_keys  delete "," munge_header_keys  [] "," normalize_body  length "," normalize_ normalize_body  "," munge_ munge_header_keys er_keys "," munge_header_keys  [] ! ","@uri @options []  ","@options []  [] "]}," EventMachine HttpClient normalize_body":{"type":"method","name":"normalize_body","children":[],"call":["@options [] ","@options [] to_params ","@options [] is_a? "," form_encode_body ","body is_a? "]}," EventMachine HttpClient stream":{"type":"method","name":"stream","children":[],"call":[]}," EventMachine HttpClient on_error":{"type":"method","name":"on_error","children":[],"call":[" unbind "," fail ","dns_error == "]}," EventMachine HttpClient on_request_complete":{"type":"method","name":"on_request_complete","children":[],"call":[" unbind "," on_error ","@content_decoder finalize! "]}," EventMachine HttpClient connection_completed":{"type":"method","name":"connection_completed","children":[],"call":[" send_request_body "," send_request_header "," start_tls ","@uri port == ","@uri port ","@uri scheme == ","@uri scheme ","@options [] ","@state == "," send_request ","m request ","m respond_to? ","@conn middleware each ","@conn middleware ","@req body "," build_request "]}," EventMachine HttpClient post_init":{"type":"method","name":"post_init","children":[],"call":["HttpChunkHeader  new ","HttpResponseHeader  new ","EventMachine Buffer  new ","HttpClientParser  new "]}," EventMachine HttpEncoding encode_cookie":{"type":"method","name":"encode_cookie","children":[],"call":["result << "," encode_param + "," encode_param ","cookie inject ","cookie is_a? "]}," EventMachine HttpEncoding encode_headers":{"type":"method","name":"encode_headers","children":[],"call":["result << "," encode_field "," encode_basic_auth ","key == ","(send\n  (send\n    (lvar :key) :split\n    (str \"-\")) :map) join ","k capitalize ","key split map ","key split ","head inject "," encode_auth ","k to_s capitalize ","k to_s ","(send\n  (send\n    (lvar :key) :split\n    (str \"-\")) :map) join  == ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :key) :split\n    (str \"-\")) :map) join ) :split\n    (str \"-\")) :map) join ","(send\n  (send\n    (lvar :key) :split\n    (str \"-\")) :map) join  split map ","(send\n  (send\n    (lvar :key) :split\n    (str \"-\")) :map) join  split "]}," EventMachine HttpEncoding encode_basic_auth":{"type":"method","name":"encode_basic_auth","children":[],"call":["BASIC_AUTH_ENCODING  % ","Base64  encode64 chomp ","Base64  encode64 ","v join "]}," EventMachine HttpEncoding encode_field":{"type":"method","name":"encode_field","children":[],"call":["FIELD_ENCODING  % "]}," EventMachine HttpEncoding encode_param":{"type":"method","name":"encode_param","children":[],"call":[" escape + + "," escape "," escape + ","(send\n  (lvar :v) :map) join ","v map ","v is_a? "]}," EventMachine HttpEncoding encode_query":{"type":"method","name":"encode_query","children":[],"call":["encoded_query to_s empty? ","encoded_query to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join ","part empty? ","(lvar :encoded_query) reject ","@uri query ","@uri query to_s empty? ! ","@uri query to_s empty? ","@uri query to_s ","query to_s ","(send\n  (lvar :query) :map) join "," encode_param ","query map ","query kind_of? ","(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join ","uri_query to_s empty? ! ","uri_query to_s empty? ","uri_query to_s ","uri path ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ","uri query ","uri query to_s empty? ! ","uri query to_s empty? ","uri query to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join  to_s empty? ","query to_s  to_s empty? ","(send\n  (lvar :query) :map) join  to_s empty? ","(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join  to_s empty? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s empty? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join  to_s ","query to_s  to_s ","(send\n  (lvar :query) :map) join  to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join  to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join )\n    (send\n      (ivar :@uri) :query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (send\n      (ivar :@uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (send\n      (ivar :@uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join )\n    (send\n      (ivar :@uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join )\n    (send\n      (ivar :@uri) :query)) :reject) join ","(lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join ) reject ","(lvar :query to_s ) reject ","(lvar :(send\n  (lvar :query) :map) join ) reject ","(lvar :(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join ) reject ","(lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ) reject ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (ivar :@uri) :query)) :reject) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (lvar :uri_query)) :reject) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join )\n    (send\n      (lvar :uri) :query)) :reject) join "]}," EventMachine HttpEncoding encode_request":{"type":"method","name":"encode_request","children":[],"call":["HTTP_REQUEST_HEADER  % "," encode_query ","method to_s upcase ","method to_s ","uri join ","proxy [] ! ","proxy [] ","proxy [] != ","connopts connect_proxy? ! ","connopts connect_proxy? ","connopts proxy ","query userinfo= "," encode_uri join  "," encode_ encode_query  ","uri join  userinfo= "," encode_query  userinfo= "]}," EventMachine HttpEncoding encode_host":{"type":"method","name":"encode_host","children":[],"call":["@uri host + ","@uri port ","@uri port != ","@uri host ","@uri port == ","@req uri host + ","@req uri port ","@req uri ","@req uri host ","@req uri port == ","@req uri port nil? "]}," EventMachine HttpEncoding munge_header_keys":{"type":"method","name":"munge_header_keys","children":[],"call":["h []= ","k to_s downcase ","k to_s ","head inject "]}," EventMachine HttpEncoding unescape":{"type":"method","name":"unescape","children":[],"call":["(send\n  (nth-ref 1) :delete\n  (str \"%\")) pack ","1 delete ","s tr gsub ","s tr ","EscapeUtils  unescape_url ","s to_s "]}," EventMachine HttpEncoding escape":{"type":"method","name":"escape","children":[],"call":["(send\n  (send\n    (lvar :s) :to_s) :gsub\n  (regexp\n    (str \"([^ a-zA-Z0-9_.-]+)\")\n    (regopt :n))) tr ","% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * ","1 size ","s to_s gsub ","s to_s ","EscapeUtils  escape_url "," bytesize "]}," EventMachine HttpChunkHeader chunk_size":{"type":"method","name":"chunk_size","children":[],"call":["@http_chunk_size to_i ","@chunk_size nil? ","@http_chunk_size to_i  nil? "]}," EventMachine HttpResponseHeader location":{"type":"method","name":"location","children":[],"call":[" [] "]}," EventMachine HttpResponseHeader compressed?":{"type":"method","name":"compressed?","children":[],"call":["(str \"gzip|compressed|deflate\") === "," [] "]}," EventMachine HttpResponseHeader keep_alive?":{"type":"method","name":"keep_alive?","children":[],"call":["(str \"keep-alive\") === "," [] "]}," EventMachine HttpResponseHeader chunked_encoding?":{"type":"method","name":"chunked_encoding?","children":[],"call":["(str \"chunked\") === "," [] "]}," EventMachine HttpResponseHeader cookie":{"type":"method","name":"cookie","children":[],"call":[" [] "]}," EventMachine HttpResponseHeader content_length":{"type":"method","name":"content_length","children":[],"call":["1 to_i ","s =~ "," [] "," []  =~ "]}," EventMachine HttpResponseHeader status":{"type":"method","name":"status","children":[],"call":[" Integer "," http_status "]}," EventMachine HttpResponseHeader last_modified":{"type":"method","name":"last_modified","children":[],"call":["Time  parse "," [] "]}," EventMachine HttpResponseHeader etag":{"type":"method","name":"etag","children":[],"call":[" [] "]}," EventMachine HttpRequest setup_request":{"type":"method","name":"setup_request","children":[],"call":[" send_request ","HttpOptions  new ","method to_s upcase ","method to_s ","@uri port ","@options []= ","@options [] ! ","@options [] "," raise ","(str \"^/\") === ","@uri path ","@uri host ","proxy [] ","options [] ","@uri scheme == ","@uri scheme ","options []  [] "]}," EventMachine HttpRequest put":{"type":"method","name":"put","children":[],"call":[" setup_request "]}," EventMachine HttpRequest delete":{"type":"method","name":"delete","children":[],"call":[" setup_request "]}," EventMachine MockHttpRequest send_request":{"type":"method","name":"send_request","children":[],"call":[" raise ","@req options [] inspect ","@req options [] ","@req options ","@req method "," real_send_request ","client setup ","@req uri "," class registered_content "," class ","FakeHttpClient  new "," class increment_access "," class registered? ","@req options [] to_s "," encode_query ","@req uri query ","@req uri path ","@req uri port ","@req uri host ","@req uri scheme ","@@registry_count [] [] ","@@registry_count [] ","s [] ","@@registry [] ","@uri query ","@options [] ","@uri path ","@uri port ","@uri host ","@uri scheme "," rai@@registry [] e ","@req option@@registry []  [] in@@registry [] pect ","@req option@@registry []  [] ","@req option@@registry []  "," real_@@registry [] end_reque@@registry [] t ","FakeHttpClient  new  setup ","client @@registry [] etup "," class registered_ class registered_content  "," cla@@registry [] @@registry []  regi@@registry [] tered_content "," cla@@registry [] @@registry []  "," cla@@registry [] @@registry []  increment_acce@@registry [] @@registry []  "," cla@@registry [] @@registry []  regi@@registry [] tered? ","@req option@@registry []  [] to_@@registry []  ","@req uri ho@@registry [] t ","@req uri @@registry [] cheme ","@@regi@@registry [] try_count [] [] ","@@regi@@registry [] try_count [] ","@@registry []  [] ","@@regi@@registry [] try [] ","@option@@registry []  [] ","@uri ho@@registry [] t ","@uri @@registry [] cheme "]}," EventMachine MockHttpRequest increment_access":{"type":"method","name":"increment_access","children":[],"call":[]}," EventMachine MockHttpRequest registered_content":{"type":"method","name":"registered_content","children":[],"call":[]}," EventMachine MockHttpRequest registered?":{"type":"method","name":"registered?","children":[],"call":[]}," EventMachine MockHttpRequest count":{"type":"method","name":"count","children":[],"call":[]}," EventMachine MockHttpRequest register_file":{"type":"method","name":"register_file","children":[],"call":[]}," EventMachine MockHttpRequest register":{"type":"method","name":"register","children":[],"call":[]}," EventMachine MockHttpRequest pass_through_requests":{"type":"method","name":"pass_through_requests","children":[],"call":[]}," EventMachine MockHttpRequest pass_through_requests=":{"type":"method","name":"pass_through_requests=","children":[],"call":[]}," EventMachine MockHttpRequest reset_registry!":{"type":"method","name":"reset_registry!","children":[],"call":[]}," EventMachine MockHttpRequest reset_counts!":{"type":"method","name":"reset_counts!","children":[],"call":[]}," EventMachine MockHttpRequest FakeHttpClient unbind":{"type":"method","name":"unbind","children":[],"call":[]}," EventMachine MockHttpRequest FakeHttpClient setup":{"type":"method","name":"setup","children":[],"call":[" succeed "," receive_data "," fail ","response == ","@state == ","response call ","response respond_to? "]}," HttpOptions initialize":{"type":"method","name":"initialize","children":[],"call":["@uri port ","uri scheme == ","uri scheme ","@options [] ","uri port ","uri host ","proxy [] ","options [] ","method to_s upcase ","method to_s "," raise ","(str \"^/\") === ","uri path ","uri normalize! ","options delete ","uri path= ","uri path empty? "," set_uri ","options []  [] "]}," String bytesize":{"type":"method","name":"bytesize","children":[],"call":[" size "]}," EventMachine MockHttpRequest parse_register_args":{"type":"method","name":"parse_register_args","children":[],"call":[]}," EventMachine MockHttpRequest deactivate!":{"type":"method","name":"deactivate!","children":[],"call":[]}," EventMachine MockHttpRequest activate!":{"type":"method","name":"activate!","children":[],"call":[]}," EventMachine MockHttpRequest use":{"type":"method","name":"use","children":[],"call":[]}," EventMachine MockHttpRequest RegisteredRequest build":{"type":"method","name":"build","children":[],"call":[]}," EventMachine HttpRequest count":{"type":"method","name":"count","children":[],"call":[]}," EventMachine HttpRequest register_file":{"type":"method","name":"register_file","children":[],"call":[]}," EventMachine HttpRequest register":{"type":"method","name":"register","children":[],"call":[]}," EventMachine HttpRequest pass_through_requests":{"type":"method","name":"pass_through_requests","children":[],"call":[]}," EventMachine HttpRequest pass_through_requests=":{"type":"method","name":"pass_through_requests=","children":[],"call":[]}," EventMachine HttpRequest reset_registry!":{"type":"method","name":"reset_registry!","children":[],"call":[]}," EventMachine HttpRequest reset_counts!":{"type":"method","name":"reset_counts!","children":[],"call":[]}," EventMachine HttpRequest FakeHttpClient unbind":{"type":"method","name":"unbind","children":[],"call":[]}," EventMachine HttpRequest FakeHttpClient setup":{"type":"method","name":"setup","children":[],"call":[" succeed "," receive_data "]}," EventMachine HttpClient parse_response_proxy":{"type":"method","name":"parse_response_proxy","children":[],"call":[" on_error "," connection_completed ","HttpResponseHeader  new ","@response_header http_status to_i == ","@response_header http_status to_i ","@response_header http_status ","@response_header http_reason "," parse_header ","HttpResponseHeader  new  http_status to_i == ","HttpResponseHeader  new  http_status to_i ","HttpResponseHeader  new  http_status ","HttpResponseHeader  new  http_reason "]}," EventMachine HttpEncoding encode_auth":{"type":"method","name":"encode_auth","children":[],"call":[" encode_field ","FIELD_ENCODING  % ","(str \"Basic\") join ","Base64  encode64 chomp ","Base64  encode64 ","v join ","v is_a? ","Base64  encode64 split join ","Base64  encode64 split ","Base64  strict_encode64 split join ","Base64  strict_encode64 split ","Base64  strict_encode64 "]}," EventMachine HttpChunkHeader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," EventMachine HttpEncoding form_encode_body":{"type":"method","name":"form_encode_body","children":[],"call":["pairs join ","recursive call ","pairs << "," escape ","v is_a? ","nh []= ","v [] ","v size times ","v size ","Hash  new ","prefix == ","h each ","Proc  new ","Hash  new  []= "]}," EventMachine HttpEncoding bytesize":{"type":"method","name":"bytesize","children":[],"call":["string size ","string bytesize "]}," EventMachine HttpRequest middleware":{"type":"method","name":"middleware","children":[],"call":[]}," EventMachine HttpRequest use":{"type":"method","name":"use","children":[],"call":[]}," EventMachine HttpRequest new":{"type":"method","name":"new","children":[],"call":[]}," EventMachine MultiRequest finished?":{"type":"method","name":"finished?","children":[],"call":["(send\n  (send\n    (send\n      (ivar :@responses) :[]\n      (sym :callback)) :size) :+\n  (send\n    (send\n      (ivar :@responses) :[]\n      (sym :errback)) :size)) == ","@requests size ","@responses [] size + ","@responses [] size ","@responses [] "]}," EventMachine Middleware OAuth request":{"type":"method","name":"request","children":[],"call":["head []= ","SimpleOAuth Header  new ","request method ","params []= ","v first ","v size == ","v size ","CGI  parse each ","CGI  parse ","client normalize_body ","head [] to_s downcase start_with? ","head [] to_s downcase ","head [] to_s ","head [] ","body is_a? ","(str \"POST\") include? ","request uri join "," encode_query ","request query ","request uri ","client req ","head merge! ","client options [] ","client options ","@consumer sign! ","client req  method ","request request uri join  join ","client req  uri join ","client req  query ","request request uri join  ","client req  uri "]}," EventMachine Middleware OAuth initialize":{"type":"method","name":"initialize","children":[],"call":["@opts delete ","@opts [] ","opts dup "," OAuth AccessToken  new ","opts [] "," OAuth Consumer  new ","opts dup  delete ","opts dup  [] "]}," EventMachine Middleware JSONResponse response":{"type":"method","name":"response","children":[],"call":["resp response= ","Yajl Parser  parse ","resp response ","MultiJson  load "]}," EventMachine HttpResponseHeader keepalive?":{"type":"method","name":"keepalive?","children":[],"call":["(str \"keep-alive\") === "," [] "]}," HttpConnectionOptions initialize":{"type":"method","name":"initialize","children":[],"call":["uri port ","uri host ","proxy [] ","options [] ","uri port= ","uri scheme == ","uri scheme ","Addressable URI  parse ","uri to_s ","uri kind_of? ","bind [] ","@tls []= ","uri hostname "," proxy [] "," proxy "," proxy_from_env ","Addressable URI  parse  port ","Addressable URI  parse  host ","options []  [] ","Addressable URI  parse  port= ","Addressable URI  parse  scheme == ","Addressable URI  parse  scheme ","Addressable URI  parse  to_s ","Addressable URI  parse  kind_of? ","Addressable URI  parse  hostname "," options []  [] "," options []  "," options [] _from_env "]}," EventMachine HttpConnection client":{"type":"method","name":"client","children":[],"call":["@clients first "]}," EventMachine HttpConnection stream_file_data":{"type":"method","name":"stream_file_data","children":[],"call":["@conn stream_file_data "]}," EventMachine HttpConnection send_data":{"type":"method","name":"send_data","children":[],"call":["@conn send_data "]}," EventMachine HttpConnection unbind":{"type":"method","name":"unbind","children":[],"call":["@clients pop close ","e message ","@clients pop ","r connection_completed ","@conn callback ","@conn reconnect ","r req port ","r req ","r req host ","@conn set_deferred_status ","@p reset! ","r reset! ","@clients push ","@pending shift ","c unbind ","@clients map "," callback "," reconnect "," set_deferred_status ","@connopts port ","@connopts host ","@connopts proxy ","@conn close_connection ","@conn comm_inactivity_timeout= ","@connopts inactivity_timeout ","@conn pending_connect_timeout= ","@connopts connect_timeout ","@pending shift  connection_completed ","@conn @pending shift econnect ","@pending shift  @pending shift eq po@pending shift t ","@pending shift  @pending shift eq ","@pending shift  @pending shift eq host ","@conn set_defe@pending shift @pending shift ed_status ","@p @pending shift eset! ","@pending shift  @pending shift eset! "," @pending shift econnect "," set_defe@pending shift @pending shift ed_status ","@connopts po@pending shift t ","@connopts p@pending shift oxy "]}," EventMachine HttpConnection redirect":{"type":"method","name":"redirect","children":[],"call":["@pending push ","client on_error ","e message ","client req set_uri ","client req ","client connection_completed ","@clients push ","conn activate_connection ","conn uri= ","client req uri ","conn connopts= ","client conn= ","HttpConnection  new ","old_location origin != ","new_location origin ","old_location origin ","client req keepalive ","conn connopts https= ","new_location scheme == ","new_location scheme ","conn connopts ","client HttpConnection  new ection_completed ","HttpConnection  new  activate_HttpConnection  new ection ","HttpConnection  new  uri= ","HttpConnection  new  HttpConnection  new opts= ","client HttpConnection  new = ","client req uri  origin != ","client req set_uri  origin ","client req uri  origin ","HttpConnection  new  HttpConnection  new opts https= ","client req set_uri  scheme == ","client req set_uri  scheme ","HttpConnection  new  HttpConnection  new opts "]}," EventMachine HttpConnection start":{"type":"method","name":"start","children":[],"call":["@conn succeed ","@conn start_tls ","@connopts tls "," client req ssl? "," client req "," client "," succeed "," start_tls ","@opts uri port == ","@opts uri port ","@opts uri ","@opts uri scheme == ","@opts uri scheme ","@opts options [] ","@opts options "," client ssl? "]}," EventMachine HttpConnection connection_completed":{"type":"method","name":"connection_completed","children":[],"call":[" start "," socksify ","@connopts proxy [] ","@connopts proxy "," client req uri port "," client req uri "," client req "," client "," client req uri host ","@connopts proxy [] == ","@conn get_peername ","@opts proxy [] ","@opts proxy ","@opts uri port ","@opts uri ","@opts uri host ","@opts proxy [] == "," connectify ","@connopts connect_proxy? ","@connopts socks_proxy? "," client req uri inferred_port "," client req uri hostname "]}," EventMachine HttpConnection receive_data":{"type":"method","name":"receive_data","children":[],"call":["c on_error ","e message "," unbind ","c nil? ","@clients shift ","@p << ","@clients shift  on_error ","@clients shift  nil? ","@@clients shift lients shift "]}," EventMachine HttpConnection peer":{"type":"method","name":"peer","children":[],"call":["Socket  unpack_sockaddr_in [] ","Socket  unpack_sockaddr_in "]}," EventMachine HttpConnection use":{"type":"method","name":"use","children":[],"call":["@middleware << ","klass new "]}," EventMachine HttpConnection post_init":{"type":"method","name":"post_init","children":[],"call":["@p on_message_complete= ","c on_request_complete ","c state= ","@clients shift "," client continue? ! "," client continue? "," client "," proc ","@p on_body= "," client on_body_data ","@p on_headers_complete= "," client parse_response_header ","@p status_code ","@p http_version ","@p header_value_type= ","Http Parser  new ","@clients first continue? ! ","@clients first continue? ","@clients first ","@clients first on_body_data ","@clients first parse_response_header "," client req no_body? "," client req "," unbind ","@p reset! "," client send_request_body ","@p status_code == ","@p on_message_@clients shift omplete= ","Http Parser  new  on_message_complete= ","@clients shift  on_request_@clients shift omplete ","@clients shift  state= ","@@clients shift lients shift "," @clients shift lient @clients shift ontinue? ! "," @clients shift lient @clients shift ontinue? "," @clients shift lient "," pro@clients shift  ","Http Parser  new  on_body= "," @clients shift lient on_body_data ","@p on_headers_@clients shift omplete= ","Http Parser  new  on_headers_complete= "," @clients shift lient parse_response_header ","@p status_@clients shift ode ","Http Parser  new  status_code ","Http Parser  new  http_version ","Http Parser  new  header_value_type= ","@@clients shift lients first @clients shift ontinue? ! ","@@clients shift lients first @clients shift ontinue? ","@@clients shift lients first ","@@clients shift lients first on_body_data ","@@clients shift lients first parse_response_header "," @clients shift lient req no_body? "," @clients shift lient req ","Http Parser  new  reset! "," @clients shift lient send_request_body ","@p status_@clients shift ode == ","Http Parser  new  status_code == "]}," EventMachine HttpConnection middleware":{"type":"method","name":"middleware","children":[],"call":["(send\n  (const nil :HttpRequest) :middleware) flatten ","HttpRequest  middleware "]}," EventMachine HttpConnection finalize_request":{"type":"method","name":"finalize_request","children":[],"call":["@clients push ","c callback ","m method ","m respond_to? "," middleware each "," middleware ","c connection_completed ","@conn callback "]}," EventMachine HttpConnection setup_request":{"type":"method","name":"setup_request","children":[],"call":[" finalize_request "," activate_connection ","HttpClient  new ","HttpClientOptions  new ","@clients push ","c callback ","m method ","m respond_to? "," middleware each "," middleware ","c connection_completed "," callback ","HttpOptions  new ","@opts uri "," aHttpClient  new tivate_HttpClient  new onneHttpClient  new tion ","@HttpClient  new lients push ","HttpClient  new  HttpClient  new allbaHttpClient  new k "," middleware eaHttpClient  new h ","HttpClient  new  HttpClient  new onneHttpClient  new tion_HttpClient  new ompleted "," HttpClient  new allbaHttpClient  new k "]}," EventMachine HttpConnection activate_connection":{"type":"method","name":"activate_connection","children":[],"call":["client close ","e message "," finalize_request ","conn comm_inactivity_timeout= ","@connopts inactivity_timeout ","conn pending_connect_timeout= ","@connopts connect_timeout ","conn parent= "," post_init ","EventMachine  connect ","@connopts port ","@connopts host ","EM  next_tick ","EventMachine  bind_connect ","@connopts bind_port ","@connopts bind "]}," EventMachine HttpConnection conn=":{"type":"method","name":"conn=","children":[],"call":[]}," EventMachine HttpConnection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," EventMachine HttpStubConnection unbind":{"type":"method","name":"unbind","children":[],"call":["@parent unbind "]}," EventMachine HttpStubConnection connection_completed":{"type":"method","name":"connection_completed","children":[],"call":["@parent connection_completed "]}," EventMachine HttpStubConnection receive_data":{"type":"method","name":"receive_data","children":[],"call":["@parent receive_data ","@parent close ","e message "]}," EventMachine HttpStubConnection parent=":{"type":"method","name":"parent=","children":[],"call":["@parent conn= "]}," EventMachine HTTPMethods post":{"type":"method","name":"post","children":[],"call":[" setup_request "]}," EventMachine HTTPMethods put":{"type":"method","name":"put","children":[],"call":[" setup_request "]}," EventMachine HTTPMethods delete":{"type":"method","name":"delete","children":[],"call":[" setup_request "]}," EventMachine HTTPMethods head":{"type":"method","name":"head","children":[],"call":[" setup_request "]}," EventMachine HTTPMethods get":{"type":"method","name":"get","children":[],"call":[" setup_request "]}," HttpClientOptions set_uri":{"type":"method","name":"set_uri","children":[],"call":["@uri port ","@uri host ","@proxy [] ","@proxy empty? ! ","@proxy empty? ","@uri scheme == ","@uri scheme ","uri path= ","uri path empty? ","uri path ","Addressable URI  parse ","uri to_s ","uri kind_of? ","@port nil? ","uri port ","uri host ","uri hostname ","@Addressable URI  parse  port ","@Addressable URI  parse  host ","@Addressable URI  parse  scheme == ","@Addressable URI  parse  scheme ","Addressable URI  parse  path= ","Addressable URI  parse  path empty? ","Addressable URI  parse  path ","Addressable URI  parse  to_s ","Addressable URI  parse  kind_of? ","@uri port  nil? ","@proxy []  nil? ","uri port  nil? ","Addressable URI  parse  port ","Addressable URI  parse  host ","Addressable URI  parse  hostname "]}," HttpClientOptions ssl?":{"type":"method","name":"ssl?","children":[],"call":["@uri port == ","@uri port ","@uri scheme == ","@uri scheme "]}," HttpClientOptions http_proxy?":{"type":"method","name":"http_proxy?","children":[],"call":["(nil) include? ","@proxy [] "]}," HttpClientOptions follow_redirect?":{"type":"method","name":"follow_redirect?","children":[],"call":["@followed < "]}," HttpClientOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" set_uri ","options fetch ","options [] ","method to_s upcase ","method to_s "]}," EventMachine HttpClient send_request":{"type":"method","name":"send_request","children":[],"call":["@conn stream_file_data ","@req file ","@conn send_data ","request_header << "," encode_headers "," encode_request ","@conn connopts proxy ","@conn connopts ","@req uri ","@req method ","head []= ","@req body is_a? ","@req body ","head [] ! ","head [] ","body bytesize ","File  size ","@req query "," normalize_body ","@options [] ","@conn opts proxy ","@conn opts ","@options [] is_a? ","@req method == "," send_request_body ","@req headers [] == ","@req headers [] ","@req headers ","Pathname  new ","body size ","body respond_to? ","@conn stream_@req file _data ","@conn stream_@options [] _data ","@req @req file  ","@req @options []  ","@req  normalize_body  is_a? ","@req  normalize_body  "," normalize_body  bytesize ","@req @req query  "," normalize_ normalize_body  "," send_request_ normalize_body  "," normalize_body  size "," normalize_body  respond_to? "]}," EventMachine HttpClient build_request":{"type":"method","name":"build_request","children":[],"call":["head [] "," encode_host ","head []= ","@req keepalive ! ","@req keepalive ","@cookies compact uniq join squeeze ","@cookies compact uniq join ","@cookies compact uniq ","@cookies compact ","@cookies empty? ","@cookies << "," encode_cookie ","@req proxy [] ","@req proxy ","@req http_proxy? "," munge_header_keys ","@req headers ","@options [] ","head delete ","proxy [] "," http_proxy? ","@req uri userinfo split ","@req uri userinfo ","@req uri ","@conn connopts proxy ","@conn connopts ","@conn connopts http_proxy? ","head [] nil? ","head key? ! ","head key? "," req compressed "," req "," munge_header_keys  [] "," munge_header_keys  []= ","@head [] s compact uniq join squeeze ","@head delete s compact uniq join squeeze ","@head [] s compact uniq join ","@head delete s compact uniq join ","@head [] s compact uniq ","@head delete s compact uniq ","@head [] s compact ","@head delete s compact ","@head [] s empty? ","@head delete s empty? ","@head [] s << ","@head delete s << "," encode_head []  "," encode_head delete  ","@req @req proxy  [] ","@req @options []  [] ","@req @conn connopts proxy  [] ","@req @req proxy  ","@req @options []  ","@req @conn connopts proxy  ","@req http_@req proxy ? ","@req http_@options [] ? ","@req http_@conn connopts proxy ? "," munge_ munge_header_keys er_keys ","@req  munge_header_keys ers "," munge_header_keys  delete ","@req proxy  [] ","@options []  [] ","@conn connopts proxy  [] "," http_@req proxy ? "," http_@options [] ? "," http_@conn connopts proxy ? ","@conn connopts @req proxy  ","@conn connopts @options []  ","@conn connopts @conn connopts proxy  ","@conn connopts http_@req proxy ? ","@conn connopts http_@options [] ? ","@conn connopts http_@conn connopts proxy ? "," munge_header_keys  [] nil? "," munge_header_keys  key? ! "," munge_header_keys  key? "]}," EventMachine HttpClient headers":{"type":"method","name":"headers","children":[],"call":[]}," EventMachine HttpClient redirect?":{"type":"method","name":"redirect?","children":[],"call":["@req follow_redirect? ","@response_header location ","@response_header redirection? "]}," EventMachine HttpClient finished?":{"type":"method","name":"finished?","children":[],"call":["@response_header content_length nil? ","@response_header content_length ","@state == "]}," EventMachine HttpClient continue?":{"type":"method","name":"continue?","children":[],"call":["@req method == ","@req method ","@response_header status == ","@response_header status ","@method == "]}," EventMachine HttpClient peer":{"type":"method","name":"peer","children":[],"call":["@conn peer "]}," EventMachine HttpClient redirects":{"type":"method","name":"redirects","children":[],"call":["@req followed ","@req options [] ","@req options "]}," EventMachine HttpClient last_effective_url":{"type":"method","name":"last_effective_url","children":[],"call":["@req uri "]}," EventMachine HttpClient reset!":{"type":"method","name":"reset!","children":[],"call":["HttpResponseHeader  new "]}," EventMachine HttpClient initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! ","req method ","CookieJar  new "]}," HttpOptions set_uri":{"type":"method","name":"set_uri","children":[],"call":["@uri port ","@uri host ","proxy [] ","@options [] ","@uri scheme == ","@uri scheme ","uri path= ","@options delete ","uri path empty? ","uri path ","Addressable URI  parse ","uri to_s ","uri kind_of? ","@Addressable URI  parse  port ","@Addressable URI  parse  host ","@options []  [] ","@Addressable URI  parse  scheme == ","@Addressable URI  parse  scheme ","uri @options delete = ","Addressable URI  parse  path= ","uri @options delete  empty? ","Addressable URI  parse  path empty? ","uri @options delete  ","Addressable URI  parse  path ","Addressable URI  parse  to_s ","Addressable URI  parse  kind_of? "]}," HttpOptions follow_redirect?":{"type":"method","name":"follow_redirect?","children":[],"call":["@options [] < ","@options [] "]}," HttpOptions proxy":{"type":"method","name":"proxy","children":[],"call":["@options [] "]}," EventMachine FailedConnection setup_request":{"type":"method","name":"setup_request","children":[],"call":["c close ","HttpClient  new ","HttpOptions  new ","@opts uri ","HttpClient  new  HttpClient  new lose "]}," EventMachine FailedConnection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," EventMachine HttpClient socks_proxy?":{"type":"method","name":"socks_proxy?","children":[],"call":["@options [] [] == ","@options [] [] ","@options [] "," proxy? "]}," EventMachine HttpClient http_proxy?":{"type":"method","name":"http_proxy?","children":[],"call":["(nil) include? ","@options [] [] ","@options [] "," proxy? "]}," EventMachine HttpClient proxy?":{"type":"method","name":"proxy?","children":[],"call":["@options [] nil? ! ","@options [] nil? ","@options [] "]}," EventMachine HttpClient ssl?":{"type":"method","name":"ssl?","children":[],"call":["@req uri port == ","@req uri port ","@req uri ","@req uri scheme == ","@req uri scheme "]}," EventMachine Middleware CookieJar response":{"type":"method","name":"response","children":[],"call":["r response ","EventMachine Middleware CookieJar  cookiejar set_cookie ","r last_effective_url ","EventMachine Middleware CookieJar  cookiejar ","(lvar :cookies) flatten each ","(lvar :cookies) flatten ","r response_header cookie ","r response_header ","(lvar :r response_header cookie ) flatten each ","(lvar :r response_header cookie ) flatten "]}," EventMachine Middleware CookieJar request":{"type":"method","name":"request","children":[],"call":["h []= ","cookies empty? ","CookieJar  cookiejar get_cookie_header ","c last_effective_url ","CookieJar  cookiejar "," raise ","h delete ","CookieJar  cookiejar get_cookie_header  empty? "]}," EventMachine Middleware CookieJar set_cookie":{"type":"method","name":"set_cookie","children":[],"call":["@cookiejar set_cookie "]}," EventMachine Middleware CookieJar cookiejar=":{"type":"method","name":"cookiejar=","children":[],"call":[]}," EventMachine HttpResponseHeader []":{"type":"method","name":"[]","children":[],"call":["key upcase gsub ","key upcase "]}," HttpClientOptions no_body?":{"type":"method","name":"no_body?","children":[],"call":["@method == "]}," EventMachine HttpClient CookieJar get":{"type":"method","name":"get","children":[],"call":["@jar get_cookies ","URI  parse "]}," EventMachine HttpClient CookieJar set":{"type":"method","name":"set","children":[],"call":["@jar set_cookie "]}," EventMachine HttpClient CookieJar initialize":{"type":"method","name":"initialize","children":[],"call":[" CookieJar Jar  new "]}," HttpConnectionOptions http_proxy?":{"type":"method","name":"http_proxy?","children":[],"call":["(nil) include? ","@proxy [] ","@https ! ","@proxy [] nil? ","@proxy [] == "]}," EventMachine HTTPMethods options":{"type":"method","name":"options","children":[],"call":[" setup_request "]}," EventMachine HTTPMethods patch":{"type":"method","name":"patch","children":[],"call":[" setup_request "]}," HttpDecoders GZip LazyStringIO size":{"type":"method","name":"size","children":[],"call":["@stream size "]}," HttpDecoders GZip LazyStringIO read":{"type":"method","name":"read","children":[],"call":["@stream [] ","buffer << ","length - ","@stream []  [] "]}," HttpDecoders GZip LazyStringIO <<":{"type":"method","name":"<<","children":[],"call":["@stream << "]}," HttpDecoders GZip LazyStringIO initialize":{"type":"method","name":"initialize","children":[],"call":[]}," EventMachine Middleware OAuth2 update_uri!":{"type":"method","name":"update_uri!","children":[],"call":[" encode_param "," access_token ","uri query ","uri query= ","uri query nil? "]}," EventMachine Middleware OAuth2 request":{"type":"method","name":"request","children":[],"call":["client req set_uri ","client req "," update_uri! ","client req uri dup ","client req uri ","client req set_client req uri dup  "," update_client req uri dup ! ","client req client req uri dup  dup ","client req client req uri dup  "]}," EventMachine Middleware OAuth2 initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," access_token= ","opts [] "]}," EventMachine Middleware DigestAuth next_nonce":{"type":"method","name":"next_nonce","children":[],"call":[]}," EventMachine Middleware DigestAuth make_cnonce":{"type":"method","name":"make_cnonce","children":[],"call":["Digest MD5  hexdigest ","(send\n  (send\n    (const nil :Time) :now) :to_i) join ","SecureRandom  random_number ","2 ** ","Time  now to_i ","Time  now "]}," EventMachine Middleware DigestAuth get_params":{"type":"method","name":"get_params","children":[],"call":["@digest_params []= ","match [] ","match [] to_sym ","www_authenticate scan each ","www_authenticate scan "]}," EventMachine Middleware DigestAuth build_auth_digest":{"type":"method","name":"build_auth_digest","children":[],"call":["header join ","header << ","params [] ","params key? ","%08x % ","algorithm hexdigest [] ","algorithm hexdigest ","request_digest join ","request_digest << ","request_digest push ","(send\n  (lvar :algorithm) :hexdigest\n  (dstr\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :username)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :realm)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :password))))) join "," make_cnonce "," raise "," eval ","(str \"MD5\") include? ","splitted_algorithm [] ","params [] split "," unescape "," next_nonce ","@opts merge ","params ! ","@opts merge  [] ","@opts merge  key? "," eval  hexdigest [] "," eval  hexdigest ","request_digest join  join ","request_digest join  << ","request_digest join  push ","(send\n  (lvar : eval ) :hexdigest\n  (dstr\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :username)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :realm)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :password))))) join ","(send\n  (lvar :algorithm) :hexdigest\n  (dstr\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :username)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :realm)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym : unescape ))))) join ","(send\n  (lvar :algorithm) :hexdigest\n  (dstr\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym : unescape name)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :realm)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :params) :[]\n        (sym :password))))) join ","(send\n  (lvar :algorithm) :hexdigest\n  (dstr\n    (begin\n      (send\n        (lvar :@opts merge ) :[]\n        (sym :username)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :@opts merge ) :[]\n        (sym :realm)))\n    (str \":\")\n    (begin\n      (send\n        (lvar :@opts merge ) :[]\n        (sym :password))))) join "," make_ make_cnonce  ","splitted_ eval  [] ","params [] split  [] ","@opts merge  [] split ","@opts merge  ! "]}," EventMachine Middleware DigestAuth response":{"type":"method","name":"response","children":[],"call":["@digest_params []= ","authentication_info =~ ","resp response_header [] ","resp response_header ","resp response_header []  =~ "]}," EventMachine Middleware DigestAuth request":{"type":"method","name":"request","children":[],"call":["head []= ","@opts [] "," build_auth_digest ","@opts merge ","client req uri path ","client req uri ","client req ","client req method "]}," EventMachine Middleware DigestAuth initialize":{"type":"method","name":"initialize","children":[],"call":[" get_params ","www_authenticate =~ "]}," EventMachine HttpResponseHeader server_error?":{"type":"method","name":"server_error?","children":[],"call":["600 > "," status ","500 <= "]}," EventMachine HttpResponseHeader client_error?":{"type":"method","name":"client_error?","children":[],"call":["500 > "," status ","400 <= "]}," EventMachine HttpResponseHeader redirection?":{"type":"method","name":"redirection?","children":[],"call":["400 > "," status ","300 <= "]}," EventMachine HttpResponseHeader successful?":{"type":"method","name":"successful?","children":[],"call":["300 > "," status ","200 <= "]}," EventMachine HttpResponseHeader informational?":{"type":"method","name":"informational?","children":[],"call":["200 > "," status ","100 <= "]}," HttpConnectionOptions socks_proxy?":{"type":"method","name":"socks_proxy?","children":[],"call":["@proxy [] == ","@proxy [] "]}," HttpConnectionOptions connect_proxy?":{"type":"method","name":"connect_proxy?","children":[],"call":["@proxy [] nil? ","@proxy [] ","@proxy [] == "]}," HttpDecoders GZipHeader extract_stream":{"type":"method","name":"extract_stream","children":[],"call":["compressed [] ","@pos - "," finished? "," read ! "," read ","(send\n  (ivar :@flags) :&\n  (int 2)) nonzero? ","@flags & ","buffer == ","(lvasgn :buffer\n  (send nil :readbyte)) nil? ! ","(lvasgn :buffer\n  (send nil :readbyte)) nil? "," readbyte ","(send\n  (ivar :@flags) :&\n  (int 16)) nonzero? ","(send\n  (ivar :@flags) :&\n  (int 8)) nonzero? ","(send\n  (ivar :@flags) :&\n  (int 4)) nonzero? ","buffer unpack [] ","buffer unpack "," raise ","DecoderError  new ","(send\n  (ivar :@flags) :&\n  (int 224)) nonzero? ","buffer getbyte ","buffer getbyte != "," finished? ! "," eof? ! "," eof? ","@data << ","@data length - ","compressed length ","@data length ","(send\n  (ivar :buffer getbyte ) :&\n  (int 2)) nonzero? ","buffer getbyte  & "," readbyte  == ","(lvasgn : readbyte \n  (send nil :readbyte)) nil? ! ","(lvasgn : readbyte \n  (send nil :readbyte)) nil? ","(send\n  (ivar :buffer getbyte ) :&\n  (int 16)) nonzero? ","(send\n  (ivar :buffer getbyte ) :&\n  (int 8)) nonzero? ","(send\n  (ivar :buffer getbyte ) :&\n  (int 4)) nonzero? "," readbyte  unpack [] "," readbyte  unpack ","(send\n  (ivar :buffer getbyte ) :&\n  (int 224)) nonzero? "," readbyte  getbyte "," readbyte  getbyte != "]}," HttpDecoders GZipHeader eof?":{"type":"method","name":"eof?","children":[],"call":["@pos >= ","@data size "]}," HttpDecoders GZipHeader readbyte":{"type":"method","name":"readbyte","children":[],"call":["@data getbyte ","@pos - ","(send\n  (ivar :@pos) :+\n  (int 1)) <= ","@data size ","@pos + "]}," HttpDecoders GZipHeader read":{"type":"method","name":"read","children":[],"call":["buffer << ","@data [] ","@pos + - ","@pos + ","(send\n  (ivar :@pos) :+\n  (lvar :n)) <= ","@data size "]}," HttpDecoders GZipHeader finished?":{"type":"method","name":"finished?","children":[],"call":["@state == "]}," HttpDecoders GZipHeader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HttpConnectionOptions proxy_from_env":{"type":"method","name":"proxy_from_env","children":[],"call":["proxy_env_uri port ","proxy_env_uri host ","Addressable URI  parse ","proxy_str empty? ","proxy_str ! ","ENV  [] ","Addressable URI  parse  port ","Addressable URI  parse  host "]}," EventMachine HttpConnection stream_data":{"type":"method","name":"stream_data","children":[],"call":["EventMachine IOStreamer  new "]}," EventMachine HttpStubConnection certificate_store":{"type":"method","name":"certificate_store","children":[],"call":["store add_file "," parent connopts tls [] "," parent connopts tls "," parent connopts "," parent ","store set_default_paths ","OpenSSL X509 Store  new ","OpenSSL X509 Store  new  add_file ","OpenSSL X509 Store  new  set_default_paths "]}," EventMachine HttpStubConnection host":{"type":"method","name":"host","children":[],"call":[" parent connopts host "," parent connopts "," parent "]}," EventMachine HttpStubConnection verify_peer?":{"type":"method","name":"verify_peer?","children":[],"call":[" parent connopts tls [] "," parent connopts tls "," parent connopts "," parent "]}," EventMachine HttpStubConnection ssl_handshake_completed":{"type":"method","name":"ssl_handshake_completed","children":[],"call":[" raise ","OpenSSL SSL SSLError  new "," host ","OpenSSL SSL  verify_certificate_identity "," warn ","[WARNING; em-http-request] TLS hostname validation is disabled (use 'tls: {verify_peer: true}'), see + "," verify_peer? "," parent connopts tls has_key? "," parent connopts tls "," parent connopts "," parent "]}," EventMachine HttpStubConnection ssl_verify_peer":{"type":"method","name":"ssl_verify_peer","children":[],"call":[" raise ","OpenSSL SSL SSLError  new "," host ","e message == ","e message "," certificate_store add_cert "," certificate_store "," certificate_store verify ","OpenSSL X509 Certificate  new "," OpenSSL X509 Certificate  new ificate_store add_OpenSSL X509 Certificate  new  "," OpenSSL X509 Certificate  new ificate_store "," OpenSSL X509 Certificate  new ificate_store verify "]}," EventMachine HttpClient request_body_pending?":{"type":"method","name":"request_body_pending?","children":[],"call":["@req_body ! ! ","@req_body ! "]}," EventMachine IOStreamer stream_one_chunk":{"type":"method","name":"stream_one_chunk","children":[],"call":["@connection send_data ","@buff length to_s ","@buff length ","@io read "," stream_one_chunk ","EventMachine  next_tick ","@connection get_outbound_data_size > ","@connection get_outbound_data_size ","@connection respond_to? "," succeed ","@io eof? "," loop "]}," EventMachine IOStreamer initialize":{"type":"method","name":"initialize","children":[],"call":[" stream_one_chunk ","@io binmode ","@io respond_to? ","String  new ","opts [] "]}}