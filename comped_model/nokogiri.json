{" Nokogiri":{"type":"method","name":"Nokogiri","children":[],"call":["Nokogiri HTML  parse ","builder doc ","Nokogiri HTML Builder  new "," block_given? ","Nokogiri  parse ","Nokogiri HTML Builder  new doc root ","Nokogiri HTML Builder  new doc ","builder doc root ","Nokogiri HTML Builder  new  doc ","Nokogiri HTML Builder  new  doc root "]}," Nokogiri make":{"type":"method","name":"make","children":[],"call":[" Nokogiri ","Nokogiri XML Node  new_from_str ","Nokogiri HTML  fragment children first ","Nokogiri HTML  fragment children ","Nokogiri HTML  fragment "]}," Nokogiri parse":{"type":"method","name":"parse","children":[],"call":[" block_given? ","Nokogiri XML  parse ","Nokogiri HTML  parse ","string =~ ","(or\n  (send\n    (lvar :string) :respond_to?\n    (sym :read))\n  (send\n    (regexp\n      (str \"^\\\\s*<(?:!DOCTYPE\\\\s+)?html[\\\\s>]\")\n      (regopt :i)) :===\n    (send\n      (lvar :string) :[]\n      (int 0)\n      (int 512)))) tap ","Nokogiri  XML ","Nokogiri  HTML ","(str \"^\\\\s*<(?:!DOCTYPE\\\\s+)?html[\\\\s>]\") === ","string [] ","string respond_to? ","Nokogiri XML Document  parse ","Nokogiri HTML Document  parse "]}," Nokogiri XSLT parse":{"type":"method","name":"parse","children":[],"call":["Stylesheet  parse_stylesheet_doc ","XML  parse ","Nokogiri  jruby? ","XSLT  register ","modules each "]}," Nokogiri XML load_external_subsets=":{"type":"method","name":"load_external_subsets=","children":[],"call":["Document  load_external_subsets= "]}," Nokogiri XML substitute_entities=":{"type":"method","name":"substitute_entities=","children":[],"call":["Document  substitute_entities= "]}," Nokogiri XML parse":{"type":"method","name":"parse","children":[],"call":["Document  read_memory ","Document  new ","string_or_io empty? ","string_or_io nil? ","string_or_io read ","string_or_io path ","string_or_io respond_to? ","Document  read_io ","Document  parse ","string_or_io read  empty? ","string_or_io read  nil? ","string_or_io read  read ","string_or_io read  path ","string_or_io read  respond_to? "]}," Nokogiri XML":{"type":"method","name":"XML","children":[],"call":["Nokogiri XML  parse ","Nokogiri XML Document  parse "]}," Nokogiri XML XPathContext register_namespaces":{"type":"method","name":"register_namespaces","children":[],"call":[" register_ns ","k gsub ","namespaces each ","k to_s gsub ","k to_s ","k gsub  gsub ","k to_s gsub  gsub ","k gsub  to_s gsub ","k to_s gsub  to_s gsub ","k gsub  to_s ","k to_s gsub  to_s "]}," Nokogiri XML SyntaxError fatal?":{"type":"method","name":"fatal?","children":[],"call":[" level == "," level "]}," Nokogiri XML SyntaxError error?":{"type":"method","name":"error?","children":[],"call":[" level == "," level "]}," Nokogiri XML SyntaxError warning?":{"type":"method","name":"warning?","children":[],"call":[" level == "," level "]}," Nokogiri XML SyntaxError none?":{"type":"method","name":"none?","children":[],"call":[" level == "," level "]}," Nokogiri XML SAX Parser parse_file":{"type":"method","name":"parse_file","children":[],"call":[" native_parse_file "," raise ","File  directory? ","File  exists? ","ctx parse_with "," block_given? ","ParserContext  file ","File  exist? ","ParserContext  file  parse_with "]}," Nokogiri XML SAX Parser parse_io":{"type":"method","name":"parse_io","children":[],"call":[" parse_memory ","io read "," native_parse_io ","ctx parse_with "," block_given? ","ParserContext  io ","ENCODINGS  [] "," check_encoding ","ParserContext  io  parse_with "]}," Nokogiri XML SAX Parser parse":{"type":"method","name":"parse","children":[],"call":[" parse_memory ","thing read ","thing is_a? "," parse_io ","thing respond_to? "]}," Nokogiri XML SAX Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" check_encoding "]}," Nokogiri XML SAX Document cdata_block":{"type":"method","name":"cdata_block","children":[],"call":[]}," Nokogiri XML SAX Document error":{"type":"method","name":"error","children":[],"call":[]}," Nokogiri XML SAX Document warning":{"type":"method","name":"warning","children":[],"call":[]}," Nokogiri XML SAX Document comment":{"type":"method","name":"comment","children":[],"call":[]}," Nokogiri XML SAX Document characters":{"type":"method","name":"characters","children":[],"call":[]}," Nokogiri XML SAX Document end_element":{"type":"method","name":"end_element","children":[],"call":[]}," Nokogiri XML SAX Document start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Nokogiri XML SAX Document end_document":{"type":"method","name":"end_document","children":[],"call":[]}," Nokogiri XML SAX Document start_document":{"type":"method","name":"start_document","children":[],"call":[]}," Nokogiri XML Reader each":{"type":"method","name":"each","children":[],"call":["block call "," read "]}," Nokogiri XML NodeSet size":{"type":"method","name":"size","children":[],"call":[" length "]}," Nokogiri XML NodeSet to_html":{"type":"method","name":"to_html","children":[],"call":["(send nil :map) join ","x to_html "," map ","args insert ","options []= ","Node SaveOptions NO_DECLARATION  | | ","Node SaveOptions NO_DECLARATION  | ","options [] ! ","options [] ","args shift ","args first is_a? ","args first ","Nokogiri  jruby? ","args shift  []= ","args shift  [] ! ","args shift  [] "]}," Nokogiri XML NodeSet to_s":{"type":"method","name":"to_s","children":[],"call":["(send nil :map) join ","x to_s "," map "," map join "]}," Nokogiri XML NodeSet wrap":{"type":"method","name":"wrap","children":[],"call":["j parent= ","nest child ","nest child nil? ","j replace ","Nokogiri  make "," each ","node wrap "," map ","new_parent add_child ","j parent add_child ","j parent ","j add_next_sibling "," document root parse first "," document root parse "," document root "," document "," document parse first "," document parse ","nest child  child ","nest child  child nil? ","Nokogiri  make  add_child "," document root parse first  add_child "," document parse first  add_child "]}," Nokogiri XML NodeSet inner_text":{"type":"method","name":"inner_text","children":[],"call":["(send nil :collect) join ","j inner_text "," collect "," collect join "]}," Nokogiri XML NodeSet each":{"type":"method","name":"each","children":[],"call":[" [] ","x < "," length ","0 upto "," length - "," to_enum "," block_given? "]}," Nokogiri XML NodeSet remove_attr":{"type":"method","name":"remove_attr","children":[],"call":["el remove_attribute ","el respond_to? "," each ","el delete "]}," Nokogiri XML NodeSet attr":{"type":"method","name":"attr","children":[],"call":[" [] get_attribute "," [] "," attr ","key each ","key is_a? ","el set_attribute ","blk [] "," each ","el []= ","hash each "," first attribute "," first ","Hash  === ","node []= ","block call "]}," Nokogiri XML NodeSet remove_class":{"type":"method","name":"remove_class","children":[],"call":["el remove_attribute ","el set_attribute ","(send\n  (lvar :classes) :-\n  (array\n    (lvar :name))) uniq join ","(send\n  (lvar :classes) :-\n  (array\n    (lvar :name))) uniq ","classes - ","el get_attribute to_s split ","el get_attribute to_s ","el get_attribute ","el respond_to? "," each ","el remove_class ","el delete ","el []= ","classes empty? ","el [] to_s split ","el [] to_s ","el [] ","(send\n  (lvar :el get_attribute to_s split ) :-\n  (array\n    (lvar :name))) uniq join ","(send\n  (lvar :el [] to_s split ) :-\n  (array\n    (lvar :name))) uniq join ","(send\n  (lvar :el get_attribute to_s split ) :-\n  (array\n    (lvar :name))) uniq ","(send\n  (lvar :el [] to_s split ) :-\n  (array\n    (lvar :name))) uniq ","el get_attribute to_s split  - ","el [] to_s split  - ","el get_attribute to_s split  empty? ","el [] to_s split  empty? "]}," Nokogiri XML NodeSet add_class":{"type":"method","name":"add_class","children":[],"call":["el set_attribute ","classes push uniq join ","classes push uniq ","classes push ","el get_attribute to_s split ","el get_attribute to_s ","el get_attribute ","el respond_to? "," each ","el add_class ","el []= ","el [] to_s split ","el [] to_s ","el [] ","el get_attribute to_s split  push uniq join ","el [] to_s split  push uniq join ","el get_attribute to_s split  push uniq ","el [] to_s split  push uniq ","el get_attribute to_s split  push ","el [] to_s split  push "]}," Nokogiri XML NodeSet at":{"type":"method","name":"at","children":[],"call":[" search first "," search "," [] ","path is_a? ","args first ","args first is_a? ","args length == ","args length "]}," Nokogiri XML NodeSet search":{"type":"method","name":"search","children":[],"call":["sub_set document= "," document ","sub_set << ","node search each ","node search "," each "," document decorate ","NodeSet  new ","paths + "," document root namespaces "," document root ","paths pop ","paths last is_a? ","paths last "," send ","path =~ ","paths each ","(send\n  (lvar :paths) :+\n  (array\n    (lvar :ns)\n    (lvar :handler))) compact ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","paths last class ","NodeSet  new  document= ","NodeSet  new  << ","(send\n  (lvar :paths) :+\n  (array\n    (lvar : document root namespaces )\n    (lvar :handler))) compact ","(send\n  (lvar :paths) :+\n  (array\n    (lvar :paths pop )\n    (lvar :handler))) compact ","(send\n  (lvar :paths) :+\n  (array\n    (lvar :ns)\n    (lvar :paths pop ))) compact ","(co document root namespaces t nil :Hash) include? ! ","(copaths pop t nil :Hash) include? ! ","(co document root namespaces t nil :Hash) include? ","(copaths pop t nil :Hash) include? "]}," Nokogiri XML NodeSet unlink":{"type":"method","name":"unlink","children":[],"call":[" document= ","node unlink "," each "," cstruct nodeTab= "," cstruct ","nodetab []= ","node cstruct pointer ","node cstruct ","Node  wrap ","nodetab [] "," cstruct [] times "," cstruct [] "," cstruct nodeTab ","node_cstruct [] != ","node_cstruct [] ","LibXML XmlNode  new "," cstruct [] == ","Node  wrap  unlink "," cstruct Node  wrap Tab= ","Node  wrap tab []= "," cstruct nodeTab  []= ","Node  wrap  cstruct pointer ","Node  wrap  cstruct ","Node  wrap tab [] "," cstruct nodeTab  [] "," cstruct Node  wrap Tab ","Node  wrap _cstruct [] != ","LibXML XmlNode  new  [] != ","Node  wrap _cstruct [] ","LibXML XmlNode  new  [] "]}," Nokogiri XML NodeSet <<":{"type":"method","name":"<<","children":[],"call":[" push "]}," Nokogiri XML NodeSet after":{"type":"method","name":"after","children":[],"call":[" last after "," last "]}," Nokogiri XML NodeSet before":{"type":"method","name":"before","children":[],"call":[" first before "," first "]}," Nokogiri XML NodeSet empty?":{"type":"method","name":"empty?","children":[],"call":[" length == "," length "]}," Nokogiri XML NodeSet last":{"type":"method","name":"last","children":[],"call":[" [] "," length - "," length "]}," Nokogiri XML NodeSet first":{"type":"method","name":"first","children":[],"call":[" [] ","list << ","(lvar :n) min times ","(lvar :n) min "," length ","0 upto ","n - ","n times "]}," Nokogiri XML NodeSet initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," << ","list each ","document decorate "]}," Nokogiri XML Node traverse":{"type":"method","name":"traverse","children":[],"call":["block call ","j traverse "," children each "," children "]}," Nokogiri XML Node collect_namespaces":{"type":"method","name":"collect_namespaces","children":[],"call":["ns merge! ","j namespaces "," traverse "]}," Nokogiri XML Node css_path":{"type":"method","name":"css_path","children":[],"call":["(send\n  (send\n    (send nil :path) :split\n    (regexp\n      (str \"/\")\n      (regopt))) :map) compact join ","(send\n  (send\n    (send nil :path) :split\n    (regexp\n      (str \"/\")\n      (regopt))) :map) compact ","part gsub ","part length == ","part length "," path split map "," path split "," path "]}," Nokogiri XML Node to_html":{"type":"method","name":"to_html","children":[],"call":[" to_xml "," to_format "," serialize ","SaveOptions FORMAT  | | | ","SaveOptions FORMAT  | | ","SaveOptions FORMAT  | "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","options [] ","$stderr puts "," caller first "," caller ","options is_a? ","options []= ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node html?":{"type":"method","name":"html?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node xml?":{"type":"method","name":"xml?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node cdata?":{"type":"method","name":"cdata?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node comment?":{"type":"method","name":"comment?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node content=":{"type":"method","name":"content=","children":[],"call":[" native_content= "," encode_special_chars ","string to_s "]}," Nokogiri XML Node text":{"type":"method","name":"text","children":[],"call":[" content "]}," Nokogiri XML Node set_attribute":{"type":"method","name":"set_attribute","children":[],"call":[" []= "]}," Nokogiri XML Node has_attribute?":{"type":"method","name":"has_attribute?","children":[],"call":[" key? "]}," Nokogiri XML Node after":{"type":"method","name":"after","children":[],"call":[" add_next_sibling ","handler after_nodes reverse each ","handler after_nodes reverse ","handler after_nodes ","parser parse "," eval new "," eval ","classes join ","AfterHandler  new ","classes []= "," document class name split "," document class name "," document class "," document "," fragment children to_a reverse each "," fragment children to_a reverse "," fragment children to_a "," fragment children "," fragment ","AfterHandler  new  after_nodes reverse each ","AfterHandler  new  after_nodes reverse ","AfterHandler  new  after_nodes "," eval new  parse "," document class name split  join "," document class name split  []= "]}," Nokogiri XML Node before":{"type":"method","name":"before","children":[],"call":["parser parse "," eval new ","BeforeHandler  new "," eval ","classes join ","classes []= "," document class name split "," document class name "," document class "," document "," add_previous_sibling "," fragment children each "," fragment children "," fragment "," eval new  parse "," document class name split  join "," document class name split  []= "]}," Nokogiri XML Node remove":{"type":"method","name":"remove","children":[],"call":[" unlink "]}," Nokogiri XML Node next":{"type":"method","name":"next","children":[],"call":[" next_sibling "]}," Nokogiri XML Node []":{"type":"method","name":"[]","children":[],"call":[" get "," key? ","name to_s "]}," Nokogiri XML Node at":{"type":"method","name":"at","children":[],"call":[" search first "," search "]}," Nokogiri XML Node css":{"type":"method","name":"css","children":[],"call":[" xpath ","(send\n  (lvar :rules) :map) flatten uniq ","(send\n  (lvar :rules) :map) flatten ",". + ","ast to_xpath ","CSS Parser  parse map ","CSS Parser  parse ","rules map ","CSS  xpath_for ","(send\n  (lvar :rules) :map) flatten uniq + ","(lvar :ns) compact ","rules pop ","rules last is_a? ","rules last ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","rules last class "," document root namespaces "," document root "," document "," implied_xpath_context "," extract_params ","(send\n  (lvar :(send\n  (lvar :rules) :map) flatten uniq + ) :map) flatten uniq ","(send\n  (lvar :(send\n  (lvar :rules) :map) flatten uniq + ) :map) flatten ","(send\n  (lvar :rules) :map) flatten uniq +  map ","(send\n  (lvar :(send\n  (lvar :rules) :map) flatten uniq + ) :map) flatten uniq + ","(lvar :rules pop ) compact ","(lvar : document root namespaces ) compact ","(send\n  (lvar :rules) :map) flatten uniq +  pop ","(send\n  (lvar :rules) :map) flatten uniq +  last is_a? ","(send\n  (lvar :rules) :map) flatten uniq +  last ","(corules pop t nil :Hash) include? ! ","(co document root namespaces t nil :Hash) include? ! ","(corules pop t nil :Hash) include? ","(co document root namespaces t nil :Hash) include? ","(send\n  (lvar :rules) :map) flatten uniq +  last class "]}," Nokogiri XML Node xpath":{"type":"method","name":"xpath","children":[],"call":["combined << ","set each ","sets each "," document decorate "," document ","NodeSet  new ","sets first ","sets length == ","sets length ","set document= ","ctx evaluate node_set ","ctx evaluate ","ctx register_namespaces ","XPathContext  new ","paths map "," document root ","paths pop ","paths last is_a? ","paths last ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","paths last class "," document root namespaces ","ctx register_variable ","key to_s ","binds each "," extract_params ","path gsub ","Nokogiri  uses_libxml? ","ctx evaluate node_set  each ","ctx evaluate node_set s each ","ctx evaluate node_set s first ","ctx evaluate node_set s length == ","ctx evaluate node_set s length ","ctx evaluate node_set  document= ","ctx evaluate node_ctx evaluate node_set  ","XPathContext  new  evaluate node_set ","XPathContext  new  evaluate ","XPathContext  new  register_namespaces ","path gsub s map ","path gsub s pop ","path gsub s last is_a? ","path gsub s last ","(copaths pop t nil :Hash) include? ! ","(co document root namespaces t nil :Hash) include? ! ","(copaths pop t nil :Hash) include? ","(co document root namespaces t nil :Hash) include? ","path gsub s last class ","XPathContext  new  register_variable ","path gsub  gsub "]}," Nokogiri XML Node search":{"type":"method","name":"search","children":[],"call":[" xpath ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (if\n        (send\n          (lvar :path) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path)\n        (block\n          (send\n            (send\n              (const\n                (const nil :CSS) :Parser) :parse\n              (lvar :path)) :map)\n          (args\n            (arg :ast))\n          (send\n            (lvar :ast) :to_xpath)))) :flatten) :uniq) + ","(send\n  (lvar :paths) :map) flatten uniq ","(send\n  (lvar :paths) :map) flatten ","ast to_xpath ","CSS Parser  parse map ","CSS Parser  parse ","path =~ ","paths map ","paths pop ","paths last is_a? ","paths last ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (if\n        (send\n          (lvar :path) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path)\n        (send\n          (const nil :CSS) :xpath_for\n          (lvar :path)\n          (hash\n            (pair\n              (sym :prefix)\n              (str \".//\")))))) :flatten) :uniq) + ","CSS  xpath_for ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (const nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))))))) :flatten) :uniq) + ","path to_s ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (const nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + "," document root namespaces "," document root "," document ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (const nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + "," implied_xpath_context ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (const nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.|\\\\.$)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (const nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + "," xpath to_s  ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (if\n        (send\n          (lvar :path) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path)\n        (block\n          (send\n            (send\n              (copaths pop t\n                (copaths pop t nil :CSS) :Parser) :parse\n              (lvar :path)) :map)\n          (args\n            (arg :ast))\n          (send\n            (lvar :ast) :to_xpath)))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (if\n        (send\n          (lvar :path to_s ) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path to_s )\n        (block\n          (send\n            (send\n              (const\n                (const nil :CSS) :Parser) :parse\n              (lvar :path to_s )) :map)\n          (args\n            (arg :ast))\n          (send\n            (lvar :ast) :to_xpath to_s )))) :flatten) :uniq) + ","(send\n  (lvar :path to_s s) :map) flatten uniq ","(send\n  (lvar :path to_s s) :map) flatten ","ast to_xpath to_s  ","path to_s  =~ ","path to_s s map ","path to_s s pop ","path to_s s last is_a? ","path to_s s last ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (if\n        (send\n          (lvar :path) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path)\n        (send\n          (copaths pop t nil :CSS) :xpath_for\n          (lvar :path)\n          (hash\n            (pair\n              (sym :prefix)\n              (str \".//\")))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (if\n        (send\n          (lvar :path to_s ) :=~\n          (regexp\n            (str \"^(\\\\./|/)\")\n            (regopt)))\n        (lvar :path to_s )\n        (send\n          (const nil :CSS) :xpath to_s _for\n          (lvar :path to_s )\n          (hash\n            (pair\n              (sym :prefix)\n              (str \".//\")))))) :flatten) :uniq) + ","CSS  xpath to_s _for ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (copaths pop t nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (begin\n        (lvasgn :path to_s \n          (send\n            (lvar :path to_s ) :to_s))\n        (if\n          (send\n            (lvar :path to_s ) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path to_s )\n          (send\n            (const nil :CSS) :xpath to_s _for\n            (lvar :path to_s )\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))))))) :flatten) :uniq) + ","path to_s  to_s ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (copaths pop t nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))\n              (pair\n                (sym :paths pop )\n                (lvar :paths pop ))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (begin\n        (lvasgn :path to_s \n          (send\n            (lvar :path to_s ) :to_s))\n        (if\n          (send\n            (lvar :path to_s ) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path to_s )\n          (send\n            (const nil :CSS) :xpath to_s _for\n            (lvar :path to_s )\n            (hash\n              (pair\n                (sym :prefix)\n                (str \".//\"))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (copaths pop t nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :paths pop )\n                (lvar :paths pop ))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (begin\n        (lvasgn :path to_s \n          (send\n            (lvar :path to_s ) :to_s))\n        (if\n          (send\n            (lvar :path to_s ) :=~\n            (regexp\n              (str \"^(\\\\./|/)\")\n              (regopt)))\n          (lvar :path to_s )\n          (send\n            (const nil :CSS) :xpath to_s _for\n            (lvar :path to_s )\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + "," implied_xpath to_s _context ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (copaths pop t nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :paths pop )\n                (lvar :paths pop ))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (begin\n        (lvasgn :path to_s \n          (send\n            (lvar :path to_s ) :to_s))\n        (if\n          (send\n            (lvar :path to_s ) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.)\")\n              (regopt)))\n          (lvar :path to_s )\n          (send\n            (const nil :CSS) :xpath to_s _for\n            (lvar :path to_s )\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :paths) :map)\n      (args\n        (arg :path))\n      (begin\n        (lvasgn :path\n          (send\n            (lvar :path) :to_s))\n        (if\n          (send\n            (lvar :path) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.|\\\\.$)\")\n              (regopt)))\n          (lvar :path)\n          (send\n            (copaths pop t nil :CSS) :xpath_for\n            (lvar :path)\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :paths pop )\n                (lvar :paths pop ))))))) :flatten) :uniq) + ","(send\n  (send\n    (block\n      (send\n        (lvar :path to_s s) :map)\n      (args\n        (arg :path to_s ))\n      (begin\n        (lvasgn :path to_s \n          (send\n            (lvar :path to_s ) :to_s))\n        (if\n          (send\n            (lvar :path to_s ) :=~\n            (regexp\n              (str \"^(\\\\./|/|\\\\.\\\\.|\\\\.$)\")\n              (regopt)))\n          (lvar :path to_s )\n          (send\n            (const nil :CSS) :xpath to_s _for\n            (lvar :path to_s )\n            (hash\n              (pair\n                (sym :prefix)\n                (lvar :prefix))\n              (pair\n                (sym :ns)\n                (lvar :ns))))))) :flatten) :uniq) + "]}," Nokogiri XML Node children":{"type":"method","name":"children","children":[],"call":["list << ","first blank? ","first next "," child "," document decorate "," document ","list document= ","NodeSet  new ","child cstruct [] ","child cstruct ","LibXML  xmlXPathNodeSetAdd ","set cstruct ","Node  wrap ","child_ptr null? ! ","child_ptr null? ","set cstruct= ","LibXML XmlNodeSet  new ","LibXML  xmlXPathNodeSetCreate ","child document "," cstruct [] "," cstruct "," cstruct [] null? ","LibXML  xmlXPathNodeSetAddUnique ","NodeSet  wrap ","NodeSet  new  << ","first next  blank? "," child  blank? ","first next  next "," child  next "," Node  wrap  ","NodeSet  new  document= ","Node  wrap  cstruct [] ","Node  wrap  cstruct ","NodeSet  new  cstruct ","NodeSet  wrap  cstruct ","child cstruct []  null? ! ","Node  wrap _ptr null? ! ","child cstruct []  null? ","Node  wrap _ptr null? ","NodeSet  new  cstruct= ","NodeSet  wrap  cstruct= ","Node  wrap  document "]}," Nokogiri XML Node decorate!":{"type":"method","name":"decorate!","children":[],"call":[" document decorate "," document "]}," Nokogiri XML EntityDeclaration attributes":{"type":"method","name":"attributes","children":[],"call":[]}," Nokogiri XML Document namespaces":{"type":"method","name":"namespaces","children":[],"call":[" root collect_namespaces "," root "," root namespaces "]}," Nokogiri XML Document to_xml":{"type":"method","name":"to_xml","children":[],"call":[" serialize "]}," Nokogiri XML Document decorate":{"type":"method","name":"decorate","children":[],"call":["node extend "," decorators [] each "," decorators [] "," decorators ","node class name split last downcase ","node class name split last ","node class name split ","node class name ","node class ","list each ","node is_a? ","@decorators each "]}," Nokogiri XML Document name":{"type":"method","name":"name","children":[],"call":[]}," Nokogiri XML Document decorators":{"type":"method","name":"decorators","children":[],"call":["h []= ","Hash  new ","@decorators [] "]}," Nokogiri XML CDATA name":{"type":"method","name":"name","children":[],"call":[]}," Nokogiri XML Builder NodeBuilder method_missing":{"type":"method","name":"method_missing","children":[],"call":["@doc_builder instance_eval ","@doc_builder parent= "," block_given? ","@node content= ","args first ","@node []= ","(send\n  (send\n    (begin\n      (or\n        (send\n          (ivar :@node) :[]\n          (str \"class\"))\n        (str \"\"))) :split\n    (regexp\n      (str \"\\\\s\")\n      (regopt))) :+\n  (array\n    (send\n      (lvar :method) :to_s))) join ","(or\n  (send\n    (ivar :@node) :[]\n    (str \"class\"))\n  (str \"\")) split + ","method to_s ","(or\n  (send\n    (ivar :@node) :[]\n    (str \"class\"))\n  (str \"\")) split ","@node [] ","@doc_builder parent ","(send\n  (send\n    (begin\n      (or\n        (send\n          (ivar :@node) :[]\n          (send\n            (lvar :k) :to_s))\n        (str \"\"))) :split\n    (regexp\n      (str \"\\\\s\")\n      (regopt))) :+\n  (array\n    (lvar :v))) join ","(or\n  (send\n    (ivar :@node) :[]\n    (send\n      (lvar :k) :to_s))\n  (str \"\")) split + ","(or\n  (send\n    (ivar :@node) :[]\n    (send\n      (lvar :k) :to_s))\n  (str \"\")) split ","k to_s ","opts each ","args pop ","args last is_a? ","args last ","args pop  each "]}," Nokogiri XML Builder NodeBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML Builder insert":{"type":"method","name":"insert","children":[],"call":["NodeBuilder  new ","node parent "," instance_eval "," block_given? ","node parent= ","block call ","@arity <= ","block arity ","@parent add_child ","@parent add_child  parent ","@parent add_child  parent= ","node parent  add_child "]}," Nokogiri XML Builder method_missing":{"type":"method","name":"method_missing","children":[],"call":[" insert ","n content= ","n []= ","v to_s ","k to_s ","content each ","content is_a? ","args first ","Nokogiri XML Node  new ","method to_s ","@context send ","@context respond_to? "," raise ","@ns [] ","node namespace nil? ","node namespace ","node namespace= ","x prefix == ","x prefix ","node namespace_definitions find ","node namespace_definitions ","@ns is_a? ","n namespace= ","@doc create_element ","method to_s sub ","arg each ","args each ","n add_namespace_definition ","key split [] ","key split ","key =~ ","n args first = ","args first  each ","args first  is_a? ","k to_s  split [] ","k to_s  split ","k to_s  =~ "]}," Nokogiri XML Builder to_xml":{"type":"method","name":"to_xml","children":[],"call":["@doc to_xml ","args insert ","options []= ","options [] ! ","options [] ","args shift ","args first is_a? ","args first ","Nokogiri  jruby? ","args shift  []= ","args shift  [] ! ","args shift  [] "]}," Nokogiri XML Builder cdata":{"type":"method","name":"cdata","children":[],"call":[" insert ","Nokogiri XML CData  new ","Nokogiri XML CDATA  new "," doc create_cdata "," doc ","string to_s "]}," Nokogiri XML Builder text":{"type":"method","name":"text","children":[],"call":[" insert ","Nokogiri XML Text  new ","@doc create_text_node ","string to_s ","@doc create_text_Nokogiri XML Text  new  "]}," Nokogiri XML Builder initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval "," eval new "," eval ","namespace join ","namespace []= "," class name split "," class name "," class ","block binding ","@arity <= ","block arity "," block_given? ","@doc send ","options each ","root document ","klass new ","Object  const_get ",":: + ","(send\n  (send\n    (send\n      (send\n        (send\n          (self) :class) :name) :split\n      (str \"::\")) :[]\n    (irange\n      (int 0)\n      (int -2))) :+\n  (array\n    (str \"Document\"))) join "," class name split [] + "," class name split [] "," class name split  join "," class name split  []= ","block arity  <= "," eval new  send ","root document  send ","klass new  send "]}," Nokogiri XML BeforeHandler end_element":{"type":"method","name":"end_element","children":[],"call":["@stack pop ","@node add_previous_sibling ","@stack last ","@stack length == ","@stack length ","@original_html =~ "]}," Nokogiri XML BeforeHandler characters":{"type":"method","name":"characters","children":[],"call":["node content ","@stack last ","@stack last  content "]}," Nokogiri XML BeforeHandler start_element":{"type":"method","name":"start_element","children":[],"call":["@stack << ","node parent= ","@stack last ","@stack length != ","@stack length ","node []= ","Hash  [] each ","Hash  [] ","Node  new ","@original_html =~ ","Node  new  parent= ","Node  new  []= "]}," Nokogiri XML BeforeHandler initialize":{"type":"method","name":"initialize","children":[],"call":["node document "]}," Nokogiri XML AfterHandler end_element":{"type":"method","name":"end_element","children":[],"call":["@stack pop ","@after_nodes << ","@stack last ","@stack length == ","@stack length ","@original_html =~ "]}," Nokogiri XML AfterHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri HTML fragment":{"type":"method","name":"fragment","children":[],"call":["finder call ","doc children ","child children ","string =~ ","child name ","children each "," lambda "," parse ","HTML DocumentFragment  parse ","c each ","fragment children length > ","fragment children length ","fragment children ","fragment add_child ","XML DocumentFragment  new ","child name == ","string == ","child content "," parse  children ","XML DocumentFragment  new  children length > ","XML DocumentFragment  new  children length ","XML DocumentFragment  new  children ","XML DocumentFragment  new  add_child "]}," Nokogiri HTML parse":{"type":"method","name":"parse","children":[],"call":["Document  read_memory ","string_or_io read ","string_or_io path ","string_or_io respond_to? ","Document  parse ","Document  read_io ","string_or_io encoding name ","string_or_io encoding ","Document  new ","string_or_io length == ","string_or_io length ","string_or_io read  read ","string_or_io read  path ","string_or_io read  respond_to? ","string_or_io read  encoding name ","string_or_io read  encoding ","string_or_io read  length == ","string_or_io read  length "]}," Nokogiri HTML":{"type":"method","name":"HTML","children":[],"call":["Nokogiri HTML  parse ","Nokogiri HTML Document  parse "]}," Nokogiri HTML SAX Parser parse_file":{"type":"method","name":"parse_file","children":[],"call":[" native_parse_file "," raise ","File  directory? ","File  exists? ","ctx parse_with "," block_given? ","ParserContext  file ","File  exist? ","ParserContext  file parse_with ","ParserContext  file  parse_with "]}," Nokogiri HTML SAX Parser parse_memory":{"type":"method","name":"parse_memory","children":[],"call":[" native_parse_memory ","ctx parse_with "," block_given? ","ParserContext  memory ","data length > ","data length "," raise ","ParserContext  memory parse_with ","ParserContext  memory  parse_with "]}," Nokogiri HTML Document to_html":{"type":"method","name":"to_html","children":[],"call":[" serialize "]}," Nokogiri HTML Builder to_html":{"type":"method","name":"to_html","children":[],"call":["@doc to_html "]}," Nokogiri Hpricot":{"type":"method","name":"Hpricot","children":[],"call":["Nokogiri Hpricot  add_decorators ","Nokogiri HTML  parse ","builder doc ","Nokogiri HTML Builder  new "," block_given? ","Nokogiri  parse "," warn "," caller first "," caller ","builder Nokogiri HTML  parse  ","builder Nokogiri  parse  ","Nokogiri HTML Builder  new  doc "]}," Nokogiri Hpricot add_decorators":{"type":"method","name":"add_decorators","children":[],"call":["doc decorate! ","doc decorators [] << ","doc decorators [] ","doc decorators ","doc decorators << "]}," Nokogiri Hpricot make":{"type":"method","name":"make","children":[],"call":["ns << ","XML Text  new ","XML NodeSet  new ","XML Document  new "," warn "," caller first "," caller ","XML NodeSet  new  << "]}," Nokogiri Hpricot XML":{"type":"method","name":"XML","children":[],"call":[" add_decorators ","Nokogiri XML  parse ","Nokogiri XML Document  parse "," warn "," caller first "," caller "]}," Nokogiri Hpricot parse":{"type":"method","name":"parse","children":[],"call":[" add_decorators ","Nokogiri  parse "," warn "," caller first "," caller "]}," Nokogiri Decorators Hpricot XPathVisitor visit_attribute_condition":{"type":"method","name":"visit_attribute_condition","children":[],"call":["(lvar :node) gsub ","node value first value []= ","child:: + ","node value first value [] ","node value first value ","node value first ","node value ","node value first value first =~ ","node value first value first ","node value first type == ","node value first type "]}," Nokogiri Decorators Hpricot NodeSet filter":{"type":"method","name":"filter","children":[],"call":[" search ",".//self:: + ","visitor accept ","ctx first ","visitor extend ","CSS XPathVisitor  new ","CSS Parser  parse ","rule to_s "," filter_transformer "," lambda ","CSS XPathVisitor  new  accept ","CSS Parser  parse  first ","CSS XPathVisitor  new  extend "]}," Nokogiri Decorators Hpricot Node to_original_html":{"type":"method","name":"to_original_html","children":[],"call":[" to_html "]}," Nokogiri Decorators Hpricot Node target":{"type":"method","name":"target","children":[],"call":[" name "]}," Nokogiri Decorators Hpricot Node convert_to_xpath":{"type":"method","name":"convert_to_xpath","children":[],"call":[".// + ","visitor accept ","ast preprocess! ","ctx map ","visitor extend ","CSS XPathVisitor  new ","CSS Parser  parse ","rule to_s ","CSS  xpath_for ","Hpricot XPathVisitor  xpath_namespace_helper ","CSS XPathVisitor  new  accept ","CSS Parser  parse  map ","CSS XPathVisitor  new  extend ","rule to_s  to_s "]}," Nokogiri Decorators Hpricot Node get_elements_by_tag_name":{"type":"method","name":"get_elements_by_tag_name","children":[],"call":[" search "]}," Nokogiri Decorators Hpricot Node get_element_by_id":{"type":"method","name":"get_element_by_id","children":[],"call":[" search first "," search "]}," Nokogiri Decorators Hpricot Node raw_attributes":{"type":"method","name":"raw_attributes","children":[],"call":[]}," Nokogiri Decorators Hpricot Node xpath":{"type":"method","name":"xpath","children":[],"call":[" path ","args length > ","args length "]}," Nokogiri Decorators Hpricot Node /":{"type":"method","name":"/","children":[],"call":[" search "]}," Nokogiri Decorators Hpricot Node search":{"type":"method","name":"search","children":[],"call":["converted + "," document namespaces merge "," document namespaces "," document "," document xml? ","(send\n  (lvar :paths) :map) flatten uniq ","(send\n  (lvar :paths) :map) flatten "," convert_to_xpath ","paths map ","paths pop ","paths last is_a? ","paths last ","(send\n  (lvar :paths) :map) flatten uniq  + "," document  document namespaces merge  merge "," document  document namespaces merge  "]}," Nokogiri CSS XPathVisitor an_plus_b":{"type":"method","name":"an_plus_b","children":[],"call":["a abs ","a < ","b == ","node value [] to_i ","node value [] ","node value "," raise ","node value inspect ","node value size == ","node value size ","options [] ","a anode value [] to_i s ","node value [] to_i  node value [] to_i bs ","node value [] to_i  < ","node value [] to_i  == ","node vnode value [] to_i lue [] to_i ","node vnode value [] to_i lue [] ","node vnode value [] to_i lue "," rnode value [] to_i ise ","node vnode value [] to_i lue inspect ","node vnode value [] to_i lue size == ","node vnode value [] to_i lue size "]}," Nokogiri CSS XPathVisitor accept":{"type":"method","name":"accept","children":[],"call":["node accept "]}," Nokogiri CSS XPathVisitor visit_element_name":{"type":"method","name":"visit_element_name","children":[],"call":["node value first ","node value "]}," Nokogiri CSS XPathVisitor visit_child_selector":{"type":"method","name":"visit_child_selector","children":[],"call":["node value first accept + + ","node value last accept ","node value last ","node value ","node value first accept + ","node value first accept ","node value first "]}," Nokogiri CSS XPathVisitor visit_descendant_selector":{"type":"method","name":"visit_descendant_selector","children":[],"call":["node value first accept + + ","node value last accept ","node value last ","node value ","node value first accept + ","node value first accept ","node value first "]}," Nokogiri CSS XPathVisitor visit_conditional_selector":{"type":"method","name":"visit_conditional_selector","children":[],"call":["node value first accept + + + ","node value first accept + + ","node value last accept ","node value last ","node value ","node value first accept + ","node value first accept ","node value first "]}," Nokogiri CSS XPathVisitor visit_combinator":{"type":"method","name":"visit_combinator","children":[],"call":["node value first accept + + ","node value last accept ","node value last ","node value ","node value first accept + ","node value first accept ","node value first "," is_of_type_pseudo_class? "]}," Nokogiri CSS XPathVisitor visit_class_condition":{"type":"method","name":"visit_class_condition","children":[],"call":["node value first ","node value "]}," Nokogiri CSS XPathVisitor visit_pseudo_class":{"type":"method","name":"visit_pseudo_class","children":[],"call":["node value first ","node value "," send "," respond_to? ","node value first gsub ","node value first accept ","node value first type == ","node value first type ","node value first is_a? ","node value first + "]}," Nokogiri CSS XPathVisitor visit_attribute_condition":{"type":"method","name":"visit_attribute_condition","children":[],"call":["attribute + + ","attribute + ","node value [] ","node value ","(str \"substring(\") + ","value !~ ","node value last ","node value length == ","node value length ","attribute gsub! ","node value first accept ","node value first ","node value first value first =~ ","node value first value first ","node value first value ","node value first type == ","node value first type ","concat(\" + + ","concat(\" + ","str_value split join ","str_value split ","str_value include? ","value [] ","\"' include? ","value [] == ","node node value last  [] ","node concat(\" + +  [] ","node node value last  ","node concat(\" + +  ","node value last  !~ ","concat(\" + +  !~ ","node node value last  last ","node concat(\" + +  last ","node node value last  length == ","node concat(\" + +  length == ","node node value last  length ","node concat(\" + +  length ","node node value last  first accept ","node concat(\" + +  first accept ","node node value last  first ","node concat(\" + +  first ","node node value last  first node value last  first =~ ","node concat(\" + +  first concat(\" + +  first =~ ","node node value last  first node value last  first ","node concat(\" + +  first concat(\" + +  first ","node node value last  first node value last  ","node concat(\" + +  first concat(\" + +  ","node node value last  first type == ","node concat(\" + +  first type == ","node node value last  first type ","node concat(\" + +  first type ","str_node value last  split join ","str_concat(\" + +  split join ","value []  split join ","str_node value last  split ","str_concat(\" + +  split ","value []  split ","str_node value last  include? ","str_concat(\" + +  include? ","value []  include? ","node value last  [] ","concat(\" + +  [] ","node value last  [] == ","concat(\" + +  [] == "]}," Nokogiri CSS XPathVisitor visit_id":{"type":"method","name":"visit_id","children":[],"call":["node value first =~ ","node value first ","node value "]}," Nokogiri CSS XPathVisitor visit_direct_adjacent_selector":{"type":"method","name":"visit_direct_adjacent_selector","children":[],"call":["node value first accept + + ","node value last accept ","node value last ","node value ","node value first accept + ","node value first accept ","node value first "]}," Nokogiri CSS XPathVisitor visit_preceding_selector":{"type":"method","name":"visit_preceding_selector","children":[],"call":["node value last accept + + + ","node value last accept + + ","node value first accept ","node value first ","node value ","node value last accept + ","node value last accept ","node value last "]}," Nokogiri CSS XPathVisitor visit_not":{"type":"method","name":"visit_not","children":[],"call":["not( + + ","not( + ","node value first accept ","node value first ","node value ","child accept ","ELEMENT_NAME == ","child type ","node value first  accept ","node value first  type "]}," Nokogiri CSS XPathVisitor visit_function":{"type":"method","name":"visit_function","children":[],"call":["node value first + ","node value first ","node value ","node value [] ","position() =  + "," an_plus_b ","node value [] type == ","node value [] type ","node value [] is_a? "," send "," respond_to? ","node value first gsub ","args join ","(str \".\") + ","node value [] accept ","node value [] to_i - ","node value [] to_i "," nth ","index == ","(str \".\") +  join ","node value [] to_i -  == "]}," Nokogiri CSS Tokenizer scan":{"type":"method","name":"scan","children":[],"call":[" scan_evaluate "]}," Nokogiri CSS Parser next_token":{"type":"method","name":"next_token","children":[],"call":["@tokenizer next_token "]}," Nokogiri CSS Parser parse":{"type":"method","name":"parse","children":[],"call":[" do_parse ","@tokenizer scan "," new parse "," new ","@tokenizer scan_setup ","$stderr puts "]}," Nokogiri CSS Parser initialize":{"type":"method","name":"initialize","children":[],"call":["Tokenizer  new "]}," Nokogiri CSS Node to_a":{"type":"method","name":"to_a","children":[],"call":["(ivar :@type) + ","n to_a ","n respond_to? ","@value map "]}," Nokogiri CSS Node to_type":{"type":"method","name":"to_type","children":[],"call":["(ivar :@type) + ","(send\n  (ivar :@value) :map) compact ","n to_type ","n respond_to? ","@value map "]}," Nokogiri CSS Node find_by_type":{"type":"method","name":"find_by_type","children":[],"call":["v find_by_type ","v respond_to? ","@value each ","matches << "," to_type == "," to_type "]}," Nokogiri CSS Node preprocess!":{"type":"method","name":"preprocess!","children":[],"call":["match value []= ","Node  new ","match value [] value first ","match value [] value ","match value [] ","match value ","match value [] value= ","only-child == ","match value [] value first gsub ","(str \"first-child\") include? ","matches each "," find_by_type ","match value [] value [] ","match value [] value [] value [] =~ ","match value [] value [] value [] ","match value [] value [] value "," find_by_type  each "]}," Nokogiri CSS Node to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["prefix + ","XPathVisitor  new accept ","XPathVisitor  new "," preprocess! ","visitor accept "," value first nil? "," value first "," value ","ALLOW_COMBINATOR_ON_SELF  include? "," type "]}," Nokogiri CSS Node accept":{"type":"method","name":"accept","children":[],"call":["visitor send "," type to_s downcase "," type to_s "," type "]}," Nokogiri CSS Node initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri CSS GeneratedTokenizer scan_evaluate":{"type":"method","name":"scan_evaluate","children":[],"call":[" raise ","undefined state: ' + + ","undefined state: ' + ","state to_s ","can not match: ' + + ","can not match: ' + ","ss string [] ","ss pos ","ss string ","@rex_tokens push "," action ","ss scan ","text == ","ss peek ","ss eos? ","StringScanner  new "," scan_setup ","StringScanner  new  string [] ","StringScanner  new  pos ","StringScanner  new  string ","StringScanner  new  scan ","ss string []  == ","ss scan  == ","ss peek  == ","StringScanner  new  peek ","StringScanner  new  eos? "]}," Nokogiri CSS GeneratedTokenizer next_token":{"type":"method","name":"next_token","children":[],"call":["@rex_tokens shift "," raise ","undefined state: ' + + ","undefined state: ' + "," state to_s "," state ","can not match: ' + + ","can not match: ' + ","@ss string [] ","@ss pos ","@ss string "," action ","@ss scan ","text == ","@ss peek ","@ss eos? ","@ss string []  == ","@ss scan  == ","@ss peek  == "]}," Nokogiri CSS GeneratedTokenizer scan_file":{"type":"method","name":"scan_file","children":[],"call":[" do_parse "," load_file "]}," Nokogiri CSS GeneratedTokenizer load_file":{"type":"method","name":"load_file","children":[],"call":[" scan_evaluate ","f read "," open "," scan_setup "]}," Nokogiri CSS GeneratedTokenizer scan_str":{"type":"method","name":"scan_str","children":[],"call":[" do_parse "," scan_evaluate "," scan_setup "]}," Nokogiri CSS GeneratedTokenizer action":{"type":"method","name":"action","children":[],"call":[]}," Nokogiri CSS GeneratedTokenizer scan_setup":{"type":"method","name":"scan_setup","children":[],"call":["StringScanner  new "]}," Nokogiri CSS GeneratedParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," Nokogiri XML NodeSet to_ary":{"type":"method","name":"to_ary","children":[],"call":[" to_a "]}," Nokogiri XML Node inner_html":{"type":"method","name":"inner_html","children":[],"call":["(send\n  (send nil :children) :map) join ","x to_html "," children map "," children "]}," Nokogiri XML Document inner_html":{"type":"method","name":"inner_html","children":[],"call":[" serialize "]}," Nokogiri XML Node ==":{"type":"method","name":"==","children":[],"call":[" pointer_id == ","other pointer_id "," pointer_id ","other respond_to? "]}," Nokogiri XML Document document":{"type":"method","name":"document","children":[],"call":[]}," Nokogiri XML Document node_cache":{"type":"method","name":"node_cache","children":[],"call":[]}," Nokogiri Hpricot HTML":{"type":"method","name":"HTML","children":[],"call":[" add_decorators ","Nokogiri HTML  parse ","Nokogiri HTML Document  parse "," warn "," caller first "," caller "]}," Nokogiri Decorators Hpricot XPathVisitor xpath_namespace_helper":{"type":"method","name":"xpath_namespace_helper","children":[],"call":[]}," Nokogiri Decorators Hpricot NodeSet filter_transformer":{"type":"method","name":"filter_transformer","children":[],"call":["sub_set << ","transformer call ","node at ",".//self:: + ","visitor accept ","ctx first "," each ","visitor extend ","CSS XPathVisitor  new ","CSS Parser  parse ","rule to_s ","node == ","rule is_a? "," document decorate "," document ","XML NodeSet  new ","CSS  parse ","XML NodeSet  new  << ","CSS XPathVisitor  new  accept ","CSS Parser  parse  first ","CSS  parse  first ","CSS XPathVisitor  new  extend "]}," Nokogiri Decorators Hpricot NodeSet not":{"type":"method","name":"not","children":[],"call":[" filter_transformer ","j ! "," lambda "]}," Nokogiri CSS xpath_for":{"type":"method","name":"xpath_for","children":[],"call":["Parser  new xpath_for ","Parser  new ","options [] "]}," Nokogiri CSS parse":{"type":"method","name":"parse","children":[],"call":["Parser  new parse ","Parser  new "]}," Nokogiri CSS Parser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise ","SyntaxError  new ","value_stack compact last ","value_stack compact "]}," Nokogiri CSS Parser xpath_for":{"type":"method","name":"xpath_for","children":[],"call":[" class add_cache ","ast to_xpath "," parse map "," parse "," class ","options [] ","v nil? "," class check_cache "," new xpath_for "," new "," class []= "," class [] ","XPathVisitor  new ","string + ","options [] to_s "," class check_cache  nil? "," class []  nil? "]}," Nokogiri CSS Parser clear_cache":{"type":"method","name":"clear_cache","children":[],"call":["@mutex synchronize "]}," Nokogiri CSS Parser add_cache":{"type":"method","name":"add_cache","children":[],"call":["@cache []= "," cache_on? "]}," Nokogiri CSS Parser check_cache":{"type":"method","name":"check_cache","children":[],"call":["@cache [] "," cache_on? "]}," Nokogiri CSS Parser cache_on?":{"type":"method","name":"cache_on?","children":[],"call":[" instance_variable_defined? "]}," Nokogiri CSS Parser set_cache":{"type":"method","name":"set_cache","children":[],"call":[]}," Nokogiri Slop":{"type":"method","name":"Slop","children":[],"call":[" Nokogiri slop! "," Nokogiri "]}," Nokogiri XML Document slop!":{"type":"method","name":"slop!","children":[],"call":[" decorate! "," decorators << "," decorators "," decorators include? "]}," Nokogiri Decorators Slop method_missing":{"type":"method","name":"method_missing","children":[],"call":["list first ","list length == ","list length ","list empty? "," xpath ","CSS  xpath_for ","args first ","CSS Parser  without_cache "," Array collect "," Array ","hash [] "," css ","args first is_a? ","args empty? "," Array join ","name to_s sub ","name to_s "," implied_xpath_context "," xpath  first "," css  first "," xpath  length == "," css  length == "," xpath  length "," css  length "," xpath  empty? "," css  empty? ","args first  [] "]}," Nokogiri CSS Parser without_cache":{"type":"method","name":"without_cache","children":[],"call":["block call "]}," ActionController TestResponseBehavior xml":{"type":"method","name":"xml","children":[],"call":["Nokogiri  XML "," body "," warn "]}," ActionController TestResponseBehavior html":{"type":"method","name":"html","children":[],"call":["Nokogiri  HTML "," body ","Nokogiri  Hpricot ","flavor == "," warn "]}," Nokogiri XSLT quote_params":{"type":"method","name":"quote_params","children":[],"call":["parray flatten ","parray []= ","v to_s ","v gsub ","v =~ ","i % > ","i % ","parray each_with_index ","(if\n  (send\n    (lvar :params) :instance_of?\n    (const nil :Hash))\n  (send\n    (send\n      (lvar :params) :to_a) :flatten)\n  (lvar :params)) dup ","params to_a flatten ","params to_a ","params instance_of? ","(if\n  (send\n    (lvar :params) :instance_of?\n    (const nil :Hash))\n  (send\n    (send\n      (lvar :params) :to_a) :flatten)\n  (lvar :params)) dup  flatten ","(if\n  (send\n    (lvar :params) :instance_of?\n    (const nil :Hash))\n  (send\n    (send\n      (lvar :params) :to_a) :flatten)\n  (lvar :params)) dup  []= ","(if\n  (send\n    (lvar :params) :instance_of?\n    (const nil :Hash))\n  (send\n    (send\n      (lvar :params) :to_a) :flatten)\n  (lvar :params)) dup  each_with_index "]}," Nokogiri XML Node replace":{"type":"method","name":"replace","children":[],"call":[" replace_with_node "," raise ","new_node is_a? "," replace_node "," unlink "," add_previous_sibling ","node_or_tags each ","node_or_tags is_a? "," coerce ","replacee replace "," add_previous_sibling_node ","Nokogiri XML Node  new "," document "," text? ","new_node is_a? ! ","node children each ","node children ","node type == ","node type ","Node  verify_nodeishness ","replacee unlink ","replacee add_previous_sibling "," coerce  each "," coerce  is_a? ","Nokogiri XML Node  new  replace ","Nokogiri XML Node  new  unlink ","Nokogiri XML Node  new  add_previous_sibling "]}," Nokogiri XML Node ancestors":{"type":"method","name":"ancestors","children":[],"call":["this_parent parent ","parents << ","this_parent != "," parent ","NodeSet  new ","search_results include? ","parents find_all "," document ","root search ","parents last ","parents last parent ","parents last respond_to? "," respond_to? ","parent matches? ","root search include? ","this_parent parent  parent "," parent  parent ","this_parent parent  != "," parent  != ","root search  include? ","parents last  search ","parents last  search include? "]}," Nokogiri XML Node <<":{"type":"method","name":"<<","children":[],"call":[" add_child "]}," Nokogiri XML Node parent=":{"type":"method","name":"parent=","children":[],"call":["parent_node add_child "]}," Nokogiri CSS Parser []=":{"type":"method","name":"[]=","children":[],"call":["@cache []= ","@mutex synchronize "]}," Nokogiri CSS Parser []":{"type":"method","name":"[]","children":[],"call":["@cache [] ","@mutex synchronize "]}," Nokogiri XML Reader attributes":{"type":"method","name":"attributes","children":[],"call":["Hash  [] merge "," namespaces ","Hash  [] ","(send\n  (send nil :attribute_nodes) :map) flatten ","node to_s ","node name "," attribute_nodes map "," attribute_nodes "]}," Nokogiri XML NodeSet to_xml":{"type":"method","name":"to_xml","children":[],"call":["(send nil :map) join ","x to_xml "," map "]}," Nokogiri XML NodeSet inner_html":{"type":"method","name":"inner_html","children":[],"call":["(send nil :collect) join ","j inner_html "," collect "]}," Nokogiri XML Node to_s":{"type":"method","name":"to_s","children":[],"call":[" to_html "," to_xml "," document xml? "," document "]}," Nokogiri XML Node element?":{"type":"method","name":"element?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node read_only?":{"type":"method","name":"read_only?","children":[],"call":["(const nil :NOTATION_NODE) include? "," type "]}," Nokogiri XML Node text?":{"type":"method","name":"text?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node remove_attribute":{"type":"method","name":"remove_attribute","children":[],"call":[" attributes [] remove "," attributes [] "," attributes "," key? "," clear_xpath_context ","Nokogiri  jruby? ","  attributes [] remove ibutes [] remove ","  attributes [] remove ibutes [] ","  attributes [] remove ibutes "]}," Nokogiri XML Node attributes":{"type":"method","name":"attributes","children":[],"call":["Hash  [] ","(send\n  (send nil :attribute_nodes) :map) flatten ","node name "," attribute_nodes map "," attribute_nodes ","node node_name "]}," Nokogiri XML Node previous":{"type":"method","name":"previous","children":[],"call":[" previous_sibling "]}," Nokogiri XML Attr value":{"type":"method","name":"value","children":[],"call":[" children first to_s "," children first "," children "]}," XSD XMLParser Nokogiri end_element_namespace":{"type":"method","name":"end_element_namespace","children":[],"call":[" end_element ","(lvar :prefix) compact join ","(lvar :prefix) compact "]}," XSD XMLParser Nokogiri start_element_namespace":{"type":"method","name":"start_element_namespace","children":[],"call":[" start_element ","(send\n  (lvar :ns) :map) + ","(send\n  (lvar :attrs) :map) flatten ","attr value ","(send\n  (lvar :attr) :prefix) compact join ","(send\n  (lvar :attr) :prefix) compact ","attr localname ","attr prefix ","attrs map ","(str \"xmlns\") compact join ","(str \"xmlns\") compact ","ns map ","(lvar :prefix) compact join ","(lvar :prefix) compact ","attr local(lvar :prefix) compact join  "]}," XSD XMLParser Nokogiri cdata_block":{"type":"method","name":"cdata_block","children":[],"call":[" characters "]}," XSD XMLParser Nokogiri error":{"type":"method","name":"error","children":[],"call":[" raise ","ParseError  new "]}," XSD XMLParser Nokogiri end_element":{"type":"method","name":"end_element","children":[],"call":[]}," XSD XMLParser Nokogiri start_element":{"type":"method","name":"start_element","children":[],"call":["Hash  [] ","attrs flatten "]}," XSD XMLParser Nokogiri do_parse":{"type":"method","name":"do_parse","children":[],"call":["@parser parse "]}," XSD XMLParser Nokogiri initialize":{"type":"method","name":"initialize","children":[],"call":[" Nokogiri XML SAX Parser  new "]}," Nokogiri install_default_aliases":{"type":"method","name":"install_default_aliases","children":[],"call":["EncodingHandler  alias ","EncodingHandler  [] nil? ","EncodingHandler  [] ","(pair\n  (str \"Windows-31J\")\n  (str \"CP932\")) each "]}," Nokogiri XSLT":{"type":"method","name":"XSLT","children":[],"call":["XSLT  parse "]}," Nokogiri XSLT Stylesheet apply_to":{"type":"method","name":"apply_to","children":[],"call":[" serialize "," transform "," transform to_s "]}," Nokogiri XML fragment":{"type":"method","name":"fragment","children":[],"call":["XML DocumentFragment  parse "]}," Nokogiri XML Reader":{"type":"method","name":"Reader","children":[],"call":["Reader  from_memory ","options to_i ","Reader  from_io ","string_or_io respond_to? "," block_given? ","Nokogiri XML ParseOptions  new ","Integer  === ","Fixnum  === ","Nokogiri XML ParseOptions  new  to_i "]}," Nokogiri XML XPath SyntaxError to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (zsuper) :chomp) compact join ","(send\n  (zsuper) :chomp) compact "," str1 "," chomp "]}," Nokogiri XML Text content=":{"type":"method","name":"content=","children":[],"call":[" native_content= ","string to_s "]}," Nokogiri XML SyntaxError location_to_s":{"type":"method","name":"location_to_s","children":[],"call":[" column "," line "," nil_or_zero? "]}," Nokogiri XML SyntaxError nil_or_zero?":{"type":"method","name":"nil_or_zero?","children":[],"call":["attribute zero? ","attribute nil? "]}," Nokogiri XML SyntaxError level_to_s":{"type":"method","name":"level_to_s","children":[],"call":[" level "]}," Nokogiri XML SyntaxError to_s":{"type":"method","name":"to_s","children":[],"call":["(send nil :location_to_s) compact join force_encoding ","message encoding ","(send nil :location_to_s) compact join ","(send nil :location_to_s) compact "," level_to_s "," location_to_s "," chomp "," chomp  encoding "]}," Nokogiri XML Searchable extract_params":{"type":"method","name":"extract_params","children":[],"call":[" document root namespaces "," document root "," document ","hashes reverse ","params empty? ","hashes << ","params pop ","params last nil? ","params last ","Hash  === ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","param class ","params find "]}," Nokogiri XML Searchable xpath_query_from_css_rule":{"type":"method","name":"xpath_query_from_css_rule","children":[],"call":["(send\n  (const\n    (send\n      (self) :class) :IMPLIED_XPATH_CONTEXTS) :map) join ","CSS  xpath_for ","rule to_s "," class IMPLIED_XPATH_CONTEXTS  map "," class ","(send\n  (send nil :implied_xpath_contexts) :map) join "," implied_xpath_contexts map "," implied_xpath_contexts "]}," Nokogiri XML Searchable css_rules_to_xpath":{"type":"method","name":"css_rules_to_xpath","children":[],"call":[" xpath_query_from_css_rule ","rules map "]}," Nokogiri XML Searchable xpath_impl":{"type":"method","name":"xpath_impl","children":[],"call":["ctx evaluate ","ctx register_variable ","key to_s ","binds each ","path gsub ","Nokogiri  uses_libxml? ","ctx register_namespaces ","XPathContext  new ","XPathContext  new  evaluate ","XPathContext  new  register_variable ","path gsub  gsub ","XPathContext  new  register_namespaces "]}," Nokogiri XML Searchable xpath_internal":{"type":"method","name":"xpath_internal","children":[],"call":["combined << "," xpath_impl each "," xpath_impl ","paths each ","NodeSet  new ","paths first ","paths length == ","paths length ","node document ","node node document  "]}," Nokogiri XML Searchable css_internal":{"type":"method","name":"css_internal","children":[],"call":[" xpath_internal "," css_rules_to_xpath ","node xpath ","xpaths + ","(lvar :ns) compact "," xpath_query_from_css_rule ","rules map "]}," Nokogiri XML Searchable at_xpath":{"type":"method","name":"at_xpath","children":[],"call":[" xpath first "," xpath "]}," Nokogiri XML Searchable xpath":{"type":"method","name":"xpath","children":[],"call":[" xpath_internal "," extract_params ","combined << ","set each ","sets each ","NodeSet  new "," document ","sets first ","sets length == ","sets length ","ctx evaluate ","ctx register_variable ","key to_s ","binds each ","path gsub ","Nokogiri  uses_libxml? ","ctx register_namespaces ","XPathContext  new ","paths map "," xpath gsub _internal ","XPathContext  new  evaluate ","XPathContext  new  register_variable ","path gsub  gsub ","XPathContext  new  register_namespaces ","path gsub s map "]}," Nokogiri XML Searchable at_css":{"type":"method","name":"at_css","children":[],"call":[" css first "," css "]}," Nokogiri XML Searchable css":{"type":"method","name":"css","children":[],"call":[" css_internal "," extract_params "]}," Nokogiri XML Searchable at":{"type":"method","name":"at","children":[],"call":[" search first "," search "]}," Nokogiri XML Searchable search":{"type":"method","name":"search","children":[],"call":[" xpath ","xpaths + ","(lvar :ns) compact ","(send\n  (send\n    (lvar :paths) :map\n    (block-pass\n      (sym :to_s))) :map) flatten uniq ","(send\n  (send\n    (lvar :paths) :map\n    (block-pass\n      (sym :to_s))) :map) flatten "," xpath_query_from_css_rule ","path =~ ","paths map map ","paths map "," extract_params ","(send\n  (send\n    (lvar :paths) :map\n    (block-pass\n      (sym :to_s))) :map) flatten uniq  + "]}," Nokogiri XML Schema valid?":{"type":"method","name":"valid?","children":[],"call":[" validate length == "," validate length "," validate "]}," Nokogiri XML Schema validate":{"type":"method","name":"validate","children":[],"call":[" raise "," validate_file ","File  file? "," validate_document ","thing is_a? ","Nokogiri  XML ","File  read "]}," Nokogiri XML Schema new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML Schema":{"type":"method","name":"Schema","children":[],"call":["Schema  new "]}," Nokogiri XML SAX PushParser finish":{"type":"method","name":"finish","children":[],"call":[" write "]}," Nokogiri XML SAX PushParser write":{"type":"method","name":"write","children":[],"call":[" native_write "]}," Nokogiri XML SAX PushParser initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_native ","XML SAX Parser  new "]}," Nokogiri XML SAX ParserContext new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML SAX Parser check_encoding":{"type":"method","name":"check_encoding","children":[],"call":[" raise ","ArgumentError  new ","ENCODINGS  [] ","encoding upcase tap ","encoding upcase ","encoding upcase! "]}," Nokogiri XML SAX Parser parse_memory":{"type":"method","name":"parse_memory","children":[],"call":["ctx parse_with "," block_given? ","ParserContext  memory ","LibXML  xmlSAXUserParseMemory ","data length "," cstruct "," raise ","data nil? ","ParserContext  memory  parse_with "]}," Nokogiri XML SAX Document processing_instruction":{"type":"method","name":"processing_instruction","children":[],"call":[]}," Nokogiri XML SAX Document end_element_namespace":{"type":"method","name":"end_element_namespace","children":[],"call":[" end_element ","(lvar :prefix) compact join ","(lvar :prefix) compact "]}," Nokogiri XML SAX Document start_element_namespace":{"type":"method","name":"start_element_namespace","children":[],"call":[" start_element ","(send\n  (lvar :ns) :map) + ","attr value ","(send\n  (lvar :attr) :prefix) compact join ","(send\n  (lvar :attr) :prefix) compact ","attr localname ","attr prefix ","attrs map ","(str \"xmlns\") compact join ","(str \"xmlns\") compact ","ns map ","(lvar :prefix) compact join ","(lvar :prefix) compact ","(send\n  (lvar :attrs) :map) flatten ","attr local(lvar :prefix) compact join  "]}," Nokogiri XML SAX Document xmldecl":{"type":"method","name":"xmldecl","children":[],"call":[]}," Nokogiri XML RelaxNG":{"type":"method","name":"RelaxNG","children":[],"call":["RelaxNG  new "]}," Nokogiri XML Reader attribute_nodes":{"type":"method","name":"attribute_nodes","children":[],"call":["v instance_variable_set ","nodes each "," attr_nodes ","node attribute_nodes ","Node  wrap ","Document  wrap ","doc_struct alloc_tuple ","LibXML XmlDocumentCast  new ","node_struct [] ","node_struct document ruby_doc ","node_struct document ","LibXML XmlNode  new ","ptr null? ","LibXML  xmlTextReaderExpand "," cstruct "," attributes? ","Node  node_properties "," attr_nodes  each ","Node  wrap s each "," attr_ attr_nodes  "," attr_Node  wrap s ","node attribute_ attr_nodes  ","Node  wrap  attribute_Node  wrap s ","Document  wrap _struct alloc_tuple ","LibXML XmlDocumentCast  new  alloc_tuple ","Node  wrap _struct [] ","LibXML XmlNode  new  [] ","Node  wrap _struct document ruby_doc ","node_struct Document  wrap ument ruby_Document  wrap  ","LibXML XmlNode  new  document ruby_doc ","Node  wrap _struct document ","node_struct Document  wrap ument ","LibXML XmlNode  new  document ","LibXML  xmlTextReaderExpand  null? ","Node  Node  wrap _properties "]}," Nokogiri XML Reader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML ProcessingInstruction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML PP Node pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp breakable ","pp pp ","v last ","pp text ","v first ","pp seplist ","pp group ","v first to_s sub ","v first to_s ","(sym :attribute_nodes) include? ","x last empty? ! ","x last empty? ","x last ","x first ","(send\n  (send nil :inspect_attributes) :map) compact find_all ","(send\n  (send nil :inspect_attributes) :map) compact "," send "," respond_to? "," inspect_attributes map "," inspect_attributes "," sprintf "," object_id "," class name split last "," class name split "," class name "," class "]}," Nokogiri XML PP Node inspect":{"type":"method","name":"inspect","children":[],"call":[" sprintf "," object_id "," class name "," class ","(send\n  (block\n    (send\n      (send nil :inspect_attributes) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join "," send inspect "," send ","attribute to_s sub ","attribute to_s ","(send\n  (send nil :inspect_attributes) :reject) map ","attribute empty? ","attribute respond_to? ","attribute ! "," inspect_attributes reject "," inspect_attributes ","(send\n  (block\n    (send\n      (send nil :inspect_(send\n  (block\n    (send\n      (send nil :inspect_attributes) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join ) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join ","(send\n  (block\n    (send\n      (send nil :inspect_ send s) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn : send \n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar : send ) :!)\n            (begin\n              (and\n                (send\n                  (lvar : send ) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar : send ) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join "," send  to_s sub "," send  to_s ","(send\n  (send nil :inspect_(send\n  (block\n    (send\n      (send nil :inspect_attributes) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join ) :reject) map ","(send\n  (send nil :inspect_ send s) :reject) map "," send  empty? "," send  respond_to? "," send  ! "," inspect_(send\n  (block\n    (send\n      (send nil :inspect_attributes) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join  reject "," inspect_ send s reject "," inspect_(send\n  (block\n    (send\n      (send nil :inspect_attributes) :reject)\n    (args\n      (arg :x))\n    (kwbegin\n      (rescue\n        (begin\n          (lvasgn :attribute\n            (send nil :send\n              (lvar :x)))\n          (or\n            (send\n              (lvar :attribute) :!)\n            (begin\n              (and\n                (send\n                  (lvar :attribute) :respond_to?\n                  (sym :empty?))\n                (send\n                  (lvar :attribute) :empty?)))))\n        (resbody\n          (array\n            (const nil :NoMethodError)) nil\n          (true)) nil))) :map) join  "," inspect_ send s "]}," Nokogiri XML PP CharacterData inspect":{"type":"method","name":"inspect","children":[],"call":[" text inspect "," text "," sprintf "," object_id "," class name "," class "]}," Nokogiri XML PP CharacterData pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp pp "," text ","pp group "," class name split last "," class name split "," class name "," class "]}," Nokogiri XML ParseOptions inspect":{"type":"method","name":"inspect","children":[],"call":[" sub ","  + + ","  + ","options join ","options << ","k downcase "," send "," class constants each "," class constants "," class "]}," Nokogiri XML ParseOptions strict?":{"type":"method","name":"strict?","children":[],"call":["@options & == ","@options & "]}," Nokogiri XML ParseOptions strict":{"type":"method","name":"strict","children":[],"call":["RECOVER  ~ "]}," Nokogiri XML ParseOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML NodeSet inspect":{"type":"method","name":"inspect","children":[],"call":[" map join "," map ","(send nil :map) join ","c inspect "]}," Nokogiri XML NodeSet reverse":{"type":"method","name":"reverse","children":[],"call":["node_set push "," [] ","(send\n  (send nil :length) :-\n  (int 1)) downto "," length - "," length ","NodeSet  new "," document ","NodeSet  new  push "]}," Nokogiri XML NodeSet children":{"type":"method","name":"children","children":[],"call":["node_set push ","node children each ","node children "," each ","NodeSet  new "," document "," inject ","NodeSet  new  push "]}," Nokogiri XML NodeSet ==":{"type":"method","name":"==","children":[],"call":["node == ","other [] "," each_with_index "," length == ","other length "," length ","other is_a? "]}," Nokogiri XML NodeSet shift":{"type":"method","name":"shift","children":[],"call":[" delete "," first "," length == "," length "]}," Nokogiri XML NodeSet pop":{"type":"method","name":"pop","children":[],"call":[" delete "," last "," length == "," length "]}," Nokogiri XML NodeSet to_xhtml":{"type":"method","name":"to_xhtml","children":[],"call":["(send nil :map) join ","x to_xhtml "," map "]}," Nokogiri XML NodeSet append_class":{"type":"method","name":"append_class","children":[],"call":["el append_class "," each "]}," Nokogiri XML NodeSet filter":{"type":"method","name":"filter","children":[],"call":["node matches? "," find_all "]}," Nokogiri XML NodeSet >":{"type":"method","name":">","children":[],"call":[" xpath ","CSS  xpath_for first ","CSS  xpath_for "," document root namespaces "," document root "," document "]}," Nokogiri XML NodeSet xpath":{"type":"method","name":"xpath","children":[],"call":["set + "," xpath_internal "," inject ","NodeSet  new "," document "," extract_params "," document decorate ","node xpath ","paths + "," each "," document root namespaces "," document root ","paths pop ","paths last is_a? ","paths last ","(lvar :ns) compact ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","paths last class ","(lvar :paths pop ) compact ","(copaths pop t nil :Hash) include? ! ","(copaths pop t nil :Hash) include? "]}," Nokogiri XML NodeSet css":{"type":"method","name":"css","children":[],"call":["set + "," xpath_internal "," inject ","NodeSet  new "," document "," css_rules_to_xpath "," extract_params "," document decorate ","node xpath ","xpaths + "," each ","(send\n  (const nil :CSS) :xpath_for\n  (send\n    (lvar :rule) :to_s)\n  (hash\n    (pair\n      (sym :prefix)\n      (str \".//\"))\n    (pair\n      (sym :ns)\n      (lvar :ns)))) join ","CSS  xpath_for ","rule to_s ","paths map "," document root namespaces "," document root ","paths pop ","paths last is_a? ","paths last ","(lvar :search_ns) compact ","(send\n  (const nil :CSS) :xpath_for\n  (send\n    (lvar :rule) :to_s)\n  (hash\n    (pair\n      (sym :prefix)\n      (str \".//\"))\n    (pair\n      (sym :ns)\n      (lvar :search_ns)))) join ","doc root namespaces ","doc root ","node document ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","paths last class "," css_internal "," node document ument "," node document ument decorate ","x css_rules_to_xpath  + ","(send\n  (copaths pop t nil :CSS) :xpath_for\n  (send\n    (lvar :rule) :to_s)\n  (hash\n    (pair\n      (sym :prefix)\n      (str \".//\"))\n    (pair\n      (sym :paths pop )\n      (lvar :paths pop )))) join "," css_rules_to_xpath  map "," node document ument root namespaces "," node document ument root "," css_rules_to_xpath  pop "," css_rules_to_xpath  last is_a? "," css_rules_to_xpath  last ","(lvar :search_paths pop ) compact ","(lvar :doc root namespaces ) compact ","(send\n  (copaths pop t nil :CSS) :xpath_for\n  (send\n    (lvar :rule) :to_s)\n  (hash\n    (pair\n      (sym :prefix)\n      (str \".//\"))\n    (pair\n      (sym :paths pop )\n      (lvar :search_paths pop )))) join ","(send\n  (const nil :CSS) :xpath_for\n  (send\n    (lvar :rule) :to_s)\n  (hash\n    (pair\n      (sym :prefix)\n      (str \".//\"))\n    (pair\n      (sym :ns)\n      (lvar :doc root namespaces )))) join ","node document  root namespaces ","node document  root ","node node document ument ","(copaths pop t nil :Hash) include? ! ","(copaths pop t nil :Hash) include? "," css_rules_to_xpath  last class "]}," Nokogiri XML NodeSet index":{"type":"method","name":"index","children":[],"call":[" each_with_index "," block_given? ","member == "," warn "]}," Nokogiri XML Node add_child_node_and_reparent_attrs":{"type":"method","name":"add_child_node_and_reparent_attrs","children":[],"call":["node []= ","attr_node value ","attr_node name ","attr_node remove ","(send\n  (send\n    (lvar :node) :attribute_nodes) :find_all) each ","a name =~ ","a name ","node attribute_nodes find_all ","node attribute_nodes "," add_child_node "]}," Nokogiri XML Node coerce":{"type":"method","name":"coerce","children":[],"call":[" raise ","data class "," fragment children "," fragment ","data children ","data is_a? ! ","data is_a? "]}," Nokogiri XML Node inspect_attributes":{"type":"method","name":"inspect_attributes","children":[],"call":[]}," Nokogiri XML Node write_format_to":{"type":"method","name":"write_format_to","children":[],"call":[" write_to ","options [] ","io << "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node to_format":{"type":"method","name":"to_format","children":[],"call":[" serialize ","options []= ","options [] "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node add_sibling":{"type":"method","name":"add_sibling","children":[],"call":[" send ","pivot unlink "," text? ","pivot send ","node_or_tags send ","Nokogiri XML Node  new "," document ","node_or_tags is_a? "," coerce ","next_or_previous == ","Nokogiri XML Node  new  unlink ","Nokogiri XML Node  new  send "," coerce  send "," coerce  is_a? "]}," Nokogiri XML Node canonicalize":{"type":"method","name":"canonicalize","children":[],"call":["tn ancestors include? ","tn ancestors ","tn == ","node is_a? "," document canonicalize "," document "]}," Nokogiri XML Node do_xinclude":{"type":"method","name":"do_xinclude","children":[],"call":[" process_xincludes ","options to_i "," block_given? ","Nokogiri XML ParseOptions  new ","Integer  === ","Fixnum  === ","Nokogiri XML ParseOptions  new  to_i "]}," Nokogiri XML Node <=>":{"type":"method","name":"<=>","children":[],"call":[" compare "," document == ","other document "," document ","other is_a? "]}," Nokogiri XML Node write_xml_to":{"type":"method","name":"write_xml_to","children":[],"call":[" write_to ","options [] ","SaveOptions FORMAT  | ","$stderr puts "," caller first "," caller ","options is_a? "]}," Nokogiri XML Node write_xhtml_to":{"type":"method","name":"write_xhtml_to","children":[],"call":[" write_format_to "," write_to ","SaveOptions FORMAT  | | | ","SaveOptions FORMAT  | | ","SaveOptions FORMAT  | ","options [] ","io << "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","$stderr puts "," caller first "," caller ","options is_a? ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node write_html_to":{"type":"method","name":"write_html_to","children":[],"call":[" write_format_to "," write_to ","SaveOptions FORMAT  | | | ","SaveOptions FORMAT  | | ","SaveOptions FORMAT  | ","options [] ","io << "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","$stderr puts "," caller first "," caller ","options is_a? ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node write_to":{"type":"method","name":"write_to","children":[],"call":[" native_write_to ","config options ","indent_text * "," block_given? ","SaveOptions  new ","save_options to_i ","options [] ","Nokogiri  jruby? ","options shift ","options first is_a? ","options first ","$stderr puts "," caller first "," caller ","options first is_a? ! ","options length > ","options length ","SaveOptions  new  options ","config options shift  ","save_options shift  to_i ","options shift  [] ","options shift  shift ","options shift  first is_a? ","options shift  first ","options shift  first is_a? ! ","options shift  length > ","options shift  length "]}," Nokogiri XML Node to_xhtml":{"type":"method","name":"to_xhtml","children":[],"call":[" to_format "," serialize ","SaveOptions FORMAT  | | | ","SaveOptions FORMAT  | | ","SaveOptions FORMAT  | "," dump_html ","(str \"2\") === ","LIBXML_VERSION  split [] ","LIBXML_VERSION  split ","options [] ","$stderr puts "," caller first "," caller ","options is_a? ","options []= ","Nokogiri  uses_libxml? "]}," Nokogiri XML Node to_xml":{"type":"method","name":"to_xml","children":[],"call":[" serialize ","options [] ","SaveOptions FORMAT  | ","$stderr puts "," caller first "," caller ","options is_a? ","options []= "]}," Nokogiri XML Node serialize":{"type":"method","name":"serialize","children":[],"call":["io string "," write_to ","StringIO  new ","outstring force_encoding ","Encoding  find ","String  new ","options []= "," document encoding "," document ","options [] ","args [] ","args shift ","args first is_a? ","args first ","io read ","io rewind ","$stderr puts "," class "," caller first "," caller ","args first is_a? ! ","outstring respond_to? ","StringIO  new  string ","String  new  force_encoding ","optStringIO  new ns []= ","args shift  []= ","optStringIO  new ns [] ","args shift  [] ","StringIO  new  read ","StringIO  new  rewind ","String  new  respond_to? "]}," Nokogiri XML Node accept":{"type":"method","name":"accept","children":[],"call":["visitor visit "]}," Nokogiri XML Node namespace=":{"type":"method","name":"namespace=","children":[],"call":[" set_namespace "," raise ","ns document != "," document ","ns document ","ns class ","Nokogiri XML Namespace  === ","ns is_a? "]}," Nokogiri XML Node default_namespace=":{"type":"method","name":"default_namespace=","children":[],"call":[" add_namespace_definition "]}," Nokogiri XML Node description":{"type":"method","name":"description","children":[],"call":["Nokogiri HTML ElementDescription  [] "," name "," document xml? "," document "]}," Nokogiri XML Node fragment?":{"type":"method","name":"fragment?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node processing_instruction?":{"type":"method","name":"processing_instruction?","children":[],"call":[" type == "," type "]}," Nokogiri XML Node document?":{"type":"method","name":"document?","children":[],"call":[" is_a? "]}," Nokogiri XML Node namespaces":{"type":"method","name":"namespaces","children":[],"call":["Hash  [] ","nd href ","(str \"xmlns\") compact join ","(str \"xmlns\") compact ","nd prefix "," namespace_scopes map "," namespace_scopes ","(send\n  (send nil :namespace_definitions) :map) flatten ","key force_encoding "," document encoding "," document "," namespace_definitions map "," namespace_definitions ","RUBY_VERSION  >= ","(send\n  (send nil :namespace_scopes) :map) flatten ","(str \"xmlns\") compact join  force_encoding "]}," Nokogiri XML Node parse":{"type":"method","name":"parse","children":[],"call":["fragment children ","Nokogiri HTML DocumentFragment  parse ","options recover? "," document errors length > "," document errors length "," document errors "," document ","node_set empty? "," in_context ","options to_i ","Nokogiri XML NodeSet  new ","contents empty? ","string_or_io read ","string_or_io respond_to? "," block_given? ","Nokogiri XML ParseOptions  new ","Integer  === "," document html? "," document parse "," parent fragment? "," parent "," parent ! "," document? ! "," document? "," element? ! "," element? ","Fixnum  === "," xml? ! "," xml? ","Nokogiri HTML DocumentFragment  parse  children ","Nokogiri XML ParseOptions  new  recover? ","fragment children  empty? "," in_context  empty? ","Nokogiri XML ParseOptions  new  to_i ","string_or_io read  empty? "," parent Nokogiri HTML DocumentFragment  parse ? "]}," Nokogiri XML Node fragment":{"type":"method","name":"fragment","children":[],"call":[" DocumentFragment  new "," document "," document html? ","parser parse "," eval new ","FragmentHandler  new "," eval ","classes join ","DocumentFragment  new ","classes []= "," document class name split "," document class name "," document class "," document fragment "," eval new  parse "," document class name split  join "," document class name split  []= "," document DocumentFragment  new  "]}," Nokogiri XML Node matches?":{"type":"method","name":"matches?","children":[],"call":[" ancestors last search include? "," ancestors last search "," ancestors last "," ancestors "," document search include? "," document search "," document "]}," Nokogiri XML Node remove_class":{"type":"method","name":"remove_class","children":[],"call":[" delete "," []= ","names join ","names empty? "," classes - ","name scan "," classes "," classes -  join "," classes -  empty? "]}," Nokogiri XML Node append_class":{"type":"method","name":"append_class","children":[],"call":[" []= ","(send\n  (send nil :classes) :+\n  (send\n    (lvar :name) :scan\n    (regexp\n      (str \"\\\\S+\")\n      (regopt)))) join "," classes + ","name scan "," classes "]}," Nokogiri XML Node add_class":{"type":"method","name":"add_class","children":[],"call":[" []= ","(send\n  (lvar :names) :+\n  (begin\n    (send\n      (send\n        (lvar :name) :scan\n        (regexp\n          (str \"\\\\S+\")\n          (regopt))) :-\n      (lvar :names)))) join ","names + ","name scan - ","name scan "," classes ","(send\n  (lvar : classes ) :+\n  (begin\n    (send\n      (send\n        (lvar :name) :scan\n        (regexp\n          (str \"\\\\S+\")\n          (regopt))) :-\n      (lvar : classes )))) join "," classes  + "]}," Nokogiri XML Node classes":{"type":"method","name":"classes","children":[],"call":[" [] to_s scan "," [] to_s "," [] "]}," Nokogiri XML Node each":{"type":"method","name":"each","children":[],"call":["node value ","node node_name "," attribute_nodes each "," attribute_nodes ","block call "]}," Nokogiri XML Node keys":{"type":"method","name":"keys","children":[],"call":[" attribute_nodes map "," attribute_nodes ","node node_name "]}," Nokogiri XML Node values":{"type":"method","name":"values","children":[],"call":[" attribute_nodes map "," attribute_nodes ","node value "]}," Nokogiri XML Node swap":{"type":"method","name":"swap","children":[],"call":[" replace "," remove "," before "]}," Nokogiri XML Node children=":{"type":"method","name":"children=","children":[],"call":[" add_child_node_and_reparent_attrs ","node_or_tags each ","node_or_tags is_a? "," children unlink "," children "," coerce "," add_child "," add_child_node "," coerce  each "," coerce  is_a? "]}," Nokogiri XML Node inner_html=":{"type":"method","name":"inner_html=","children":[],"call":[" children= "," add_child "," fragment children to_a reverse each "," fragment children to_a reverse "," fragment children to_a "," fragment children "," fragment ","x remove "," children each "," children "," fragment children to_a each "," add_child_node ","node_or_tags each ","node_or_tags is_a? "," children unlink "," coerce "," coerce  each "," coerce  is_a? "]}," Nokogiri XML Node add_next_sibling":{"type":"method","name":"add_next_sibling","children":[],"call":[" add_sibling "," raise ","ArgumentError  new ","(or\n  (send\n    (lvar :node_or_tags) :comment?)\n  (send\n    (lvar :node_or_tags) :processing_instruction?)) ! ","node_or_tags processing_instruction? ","node_or_tags comment? "," parent document? "," parent ","LibXML  xmlAddNextSibling ","Node  reparent_node_with "," add_next_sibling_node ","node children reverse each ","node children reverse ","node children ","node type == ","node type ","Node  verify_nodeishness ","node_or_tags reverse_each ","node_or_tags reverse each ","node_or_tags reverse ","1.8.6 == ","node_or_tags is_a? "," coerce ","pivot unlink "," text? ","pivot send ","Nokogiri XML Node  new "," document "," parent is_a? ","node_or_tags processing_instruction? ! ","(or\n  (send\n    (lvar : coerce ) :comment?)\n  (send\n    (lvar : coerce ) :processing_instruction?)) ! "," coerce  processing_instruction? "," coerce  comment? "," coerce  reverse_each "," coerce  reverse each "," coerce  reverse "," coerce  is_a? ","Nokogiri XML Node  new  unlink ","Nokogiri XML Node  new  send "," coerce  processing_instruction? ! "]}," Nokogiri XML Node add_previous_sibling":{"type":"method","name":"add_previous_sibling","children":[],"call":[" add_sibling "," raise ","ArgumentError  new ","(or\n  (send\n    (lvar :node_or_tags) :comment?)\n  (send\n    (lvar :node_or_tags) :processing_instruction?)) ! ","node_or_tags processing_instruction? ","node_or_tags comment? "," parent document? "," parent ","LibXML  xmlAddPrevSibling ","Node  reparent_node_with "," add_previous_sibling_node ","node children each ","node children ","node type == ","node type ","Node  verify_nodeishness ","node_or_tags each ","node_or_tags is_a? "," coerce ","pivot unlink "," text? ","pivot send ","Nokogiri XML Node  new "," document ","node_or_tags is_a? ! "," parent is_a? ","node_or_tags processing_instruction? ! ","(or\n  (send\n    (lvar : coerce ) :comment?)\n  (send\n    (lvar : coerce ) :processing_instruction?)) ! "," coerce  processing_instruction? "," coerce  comment? "," coerce  each "," coerce  is_a? ","Nokogiri XML Node  new  unlink ","Nokogiri XML Node  new  send "," coerce  is_a? ! "," coerce  processing_instruction? ! "]}," Nokogiri XML Node wrap":{"type":"method","name":"wrap","children":[],"call":["new_parent add_child "," add_next_sibling "," document parse first "," document parse "," document "," document parse first  add_child "]}," Nokogiri XML Node prepend_child":{"type":"method","name":"prepend_child","children":[],"call":[" add_child ","first __send__ "," raise ","(or\n  (send\n    (lvar :node_or_tags) :comment?)\n  (send\n    (lvar :node_or_tags) :processing_instruction?)) ! ","node_or_tags processing_instruction? ","node_or_tags comment? "," document? "," children first "," children ","node_or_tags is_a? ! ","node_or_tags is_a? "," is_a? ","node_or_tags processing_instruction? ! "," children first  __send__ "," children  children first  "]}," Nokogiri XML Node add_child":{"type":"method","name":"add_child","children":[],"call":[" add_child_node_and_reparent_attrs ","node_or_tags each ","node_or_tags is_a? "," coerce ","LibXML  xmlAddChild ","Node  reparent_node_with "," add_child_node ","node children each ","node children ","node type == ","node type ","Node  verify_nodeishness "," coerce  each "," coerce  is_a? "]}," Nokogiri XML Node []=":{"type":"method","name":"[]=","children":[],"call":[" set ","value to_s ","name to_s ","LibXML  xmlSetProp "," cstruct "]}," Nokogiri XML Node >":{"type":"method","name":">","children":[],"call":[" xpath ","CSS  xpath_for first ","CSS  xpath_for "," document root namespaces "," document root "," document "]}," Nokogiri XML Node initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML Node SaveOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML Namespace inspect_attributes":{"type":"method","name":"inspect_attributes","children":[],"call":[]}," Nokogiri XML EntityReference inspect_attributes":{"type":"method","name":"inspect_attributes","children":[],"call":[]}," Nokogiri XML EntityReference children":{"type":"method","name":"children","children":[],"call":["NodeSet  new "," document "]}," Nokogiri XML EntityDecl inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," sprintf "," object_id "," class name "," class "]}," Nokogiri XML EntityDecl new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML ElementDecl inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," sprintf "," object_id "," class name "," class "]}," Nokogiri XML ElementContent children":{"type":"method","name":"children","children":[],"call":["(send nil :c1) compact "," c2 "," c1 "]}," Nokogiri XML DTD html5_dtd?":{"type":"method","name":"html5_dtd?","children":[],"call":[" system_id == "," system_id "," system_id nil? "," external_id nil? "," external_id "," html_dtd? "]}," Nokogiri XML DTD html_dtd?":{"type":"method","name":"html_dtd?","children":[],"call":[" name casecmp zero? "," name casecmp "," name "]}," Nokogiri XML DTD each":{"type":"method","name":"each","children":[],"call":[" attributes each "," attributes ","block call "]}," Nokogiri XML DTD keys":{"type":"method","name":"keys","children":[],"call":[" attributes keys "," attributes "]}," Nokogiri XML DocumentFragment coerce":{"type":"method","name":"coerce","children":[],"call":[" document fragment children "," document fragment "," document ","String  === "]}," Nokogiri XML DocumentFragment namespace_declarations":{"type":"method","name":"namespace_declarations","children":[],"call":["(send\n  (send\n    (lvar :ctx) :namespace_scopes) :map) join ","namespace href ","namespace prefix ","namespace prefix nil? ","ctx namespace_scopes map ","ctx namespace_scopes "]}," Nokogiri XML DocumentFragment errors=":{"type":"method","name":"errors=","children":[],"call":[" document errors= "," document "]}," Nokogiri XML DocumentFragment errors":{"type":"method","name":"errors","children":[],"call":[" document errors "," document "]}," Nokogiri XML DocumentFragment parse":{"type":"method","name":"parse","children":[],"call":[" new ","XML Document  new ","XML DocumentFragment  new "]}," Nokogiri XML DocumentFragment search":{"type":"method","name":"search","children":[],"call":[" children css ","(lvar :rule) compact "," children "," xpath ","rule =~ ","rules inject ","NodeSet  new "," document "," extract_params "]}," Nokogiri XML DocumentFragment css":{"type":"method","name":"css","children":[],"call":["NodeSet  new "," document "," children css "," children "," children any? "]}," Nokogiri XML DocumentFragment to_xml":{"type":"method","name":"to_xml","children":[],"call":[" children to_xml "," children "]}," Nokogiri XML DocumentFragment to_xhtml":{"type":"method","name":"to_xhtml","children":[],"call":[" children to_xhtml "," children ","args insert ","options []= ","Node SaveOptions NO_DECLARATION  | | ","Node SaveOptions NO_DECLARATION  | ","options [] ! ","options [] ","args shift ","args first is_a? ","args first ","Nokogiri  jruby? ","args shift  []= ","args shift  [] ! ","args shift  [] "]}," Nokogiri XML DocumentFragment to_html":{"type":"method","name":"to_html","children":[],"call":[" children to_html "," children ","args insert ","options []= ","Node SaveOptions NO_DECLARATION  | | ","Node SaveOptions NO_DECLARATION  | ","options [] ! ","options [] ","args shift ","args first is_a? ","args first ","Nokogiri  jruby? ","args shift  []= ","args shift  [] ! ","args shift  [] "]}," Nokogiri XML DocumentFragment to_s":{"type":"method","name":"to_s","children":[],"call":[" children to_s "," children "]}," Nokogiri XML DocumentFragment name":{"type":"method","name":"name","children":[],"call":[]}," Nokogiri XML DocumentFragment dup":{"type":"method","name":"dup","children":[],"call":["child dup parent= ","child dup "," children each "," children "," class new "," class "," document dup "," document ","XML DocumentFragment  new "]}," Nokogiri XML DocumentFragment initialize":{"type":"method","name":"initialize","children":[],"call":["child parent= ","children each ","XML Document  parse xpath ","XML Document  parse ","ctx parse ","ctx parse children "," namespace_declarations ","Nokogiri  jruby? ","parser parse ","XML SAX Parser  new ","FragmentHandler  new ","HTML SAX Parser  new "," kind_of? ","div unlink ","div children each ","div children "," child ","XML SAX Parser  new parse ","tags strip ","HTML SAX Parser  new parse ","ctx parse xpath ","XML Document  parse xpath  each ","ctx parse  each ","ctx parse XML Document  parse xpath  ","ctx parse ctx parse  ","XML SAX Parser  new  parse ","HTML SAX Parser  new  parse "," child  unlink ","div XML Document  parse xpath  each ","div ctx parse  each "," child  children each ","div XML Document  parse xpath  ","div ctx parse  "," child  children "]}," Nokogiri XML Document inspect_attributes":{"type":"method","name":"inspect_attributes","children":[],"call":[]}," Nokogiri XML Document empty_doc?":{"type":"method","name":"empty_doc?","children":[],"call":[]}," Nokogiri XML Document to_java":{"type":"method","name":"to_java","children":[],"call":[" toJavaDocument "," raise ","Nokogiri  jruby? "]}," Nokogiri XML Document wrap":{"type":"method","name":"wrap","children":[],"call":["doc send ","doc instance_eval ","doc cstruct ruby_doc= ","doc cstruct ","doc cstruct= "," allocate ","LibXML XmlDocument  new ","doc_struct null? ","doc_struct is_a? "," allocate  send "," allocate  instance_eval "," allocate  cstruct ruby_ allocate = "," allocate  cstruct "," allocate  cstruct= "," allocate _struct null? ","LibXML XmlDocument  new  null? "," allocate _struct is_a? ","LibXML XmlDocument  new  is_a? "]}," Nokogiri XML Document add_child":{"type":"method","name":"add_child","children":[],"call":["node_or_tags first "," raise ","node_or_tags size > ","node_or_tags size ","node_or_tags is_a? "," coerce ","(or\n  (send\n    (lvar :node_or_tags) :comment?)\n  (send\n    (lvar :node_or_tags) :processing_instruction?)) ! ","node_or_tags processing_instruction? ","node_or_tags comment? "," root name != "," root name "," root ","(const\n  (const nil :Node) :ELEMENT_NODE) include? ","child type ","child children first ","child children ","child children size > ","child children size ","child type == "," coerce  first "," coerce  size > "," coerce  size "," coerce  is_a? ","(or\n  (send\n    (lvar : coerce ) :comment?)\n  (send\n    (lvar : coerce ) :processing_instruction?)) ! "," coerce  processing_instruction? "," coerce  comment? "]}," Nokogiri XML Document fragment":{"type":"method","name":"fragment","children":[],"call":["DocumentFragment  new "," root "]}," Nokogiri XML Document validate":{"type":"method","name":"validate","children":[],"call":[" internal_subset validate "," internal_subset "]}," Nokogiri XML Document collect_namespaces":{"type":"method","name":"collect_namespaces","children":[],"call":["hash []= ","ns href ","(str \"xmlns\") compact join ","(str \"xmlns\") compact ","ns prefix ","ns prefix != "," xpath inject "," xpath ","ns merge! ","j namespaces "," traverse "]}," Nokogiri XML Document create_comment":{"type":"method","name":"create_comment","children":[],"call":["Nokogiri XML Comment  new ","string to_s "]}," Nokogiri XML Document create_cdata":{"type":"method","name":"create_cdata","children":[],"call":["Nokogiri XML CDATA  new ","string to_s ","text to_s "]}," Nokogiri XML Document create_text_node":{"type":"method","name":"create_text_node","children":[],"call":["Nokogiri XML Text  new ","string to_s ","text to_s "]}," Nokogiri XML Document create_element":{"type":"method","name":"create_element","children":[],"call":["elm namespace= ","n prefix == ","n prefix ","n prefix nil? ","elm namespace_definitions find ","elm namespace_definitions ","elm content= ","elm []= ","v to_s ","k to_s ","elm add_namespace_definition ","key split [] ","key split ","key =~ ","arg each ","args each ","Nokogiri XML Element  new ","Nokogiri XML Element  new  namespace= ","Nokogiri XML Element  new  namespace_definitions find ","Nokogiri XML Element  new  namespace_definitions ","Nokogiri XML Element  new  content= ","Nokogiri XML Element  new  []= ","Nokogiri XML Element  new  add_namespace_definition ","k to_s  split [] ","k to_s  split ","k to_s  =~ "]}," Nokogiri XML Document initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XML Document parse":{"type":"method","name":"parse","children":[],"call":[" read_memory ","options to_i "," new ","string_or_io empty? ","string_or_io nil? "," read_io ","string_or_io path ","string_or_io respond_to? "," block_given? ","Nokogiri XML ParseOptions  new ","Fixnum  === ","Nokogiri XML ParseOptions  new  to_i "]}," Nokogiri XML Builder NodeBuilder []":{"type":"method","name":"[]","children":[],"call":["@node [] "]}," Nokogiri XML Builder NodeBuilder []=":{"type":"method","name":"[]=","children":[],"call":["@node []= "]}," Nokogiri XML Builder <<":{"type":"method","name":"<<","children":[],"call":[" insert ","@doc fragment children each ","@doc fragment children ","@doc fragment "]}," Nokogiri XML Builder []":{"type":"method","name":"[]","children":[],"call":["ns to_s ","x prefix == ","x prefix ","a namespace_definitions find ","a namespace_definitions ","a == "," doc ","@parent ancestors each ","@parent ancestors ","@parent namespace_definitions find ","@parent namespace_definitions ","@parent != "," raise "]}," Nokogiri XML Builder comment":{"type":"method","name":"comment","children":[],"call":[" insert "," doc create_comment "," doc "]}," Nokogiri XML Builder with":{"type":"method","name":"with","children":[],"call":[]}," Nokogiri XML AttributeDecl inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s inspect "," to_s "," sprintf "," object_id "," class name "," class "]}," Nokogiri XML Attr inspect_attributes":{"type":"method","name":"inspect_attributes","children":[],"call":[]}," Nokogiri jruby?":{"type":"method","name":"jruby?","children":[],"call":[]}," Nokogiri uses_libxml?":{"type":"method","name":"uses_libxml?","children":[],"call":[]}," Nokogiri VersionInfo instance":{"type":"method","name":"instance","children":[],"call":[]}," Nokogiri VersionInfo to_markdown":{"type":"method","name":"to_markdown","children":[],"call":["(str \"# Nokogiri (\") + ","(send\n  (send\n    (send\n      (const nil :YAML) :dump\n      (send nil :to_hash)) :each_line) :map) join ","YAML  dump each_line map ","YAML  dump each_line ","YAML  dump "," to_hash "," require "]}," Nokogiri VersionInfo to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash_info []= "," jruby? "," warnings ","hash_info [] []= "," loaded_parser_version ","hash_info [] "," compiled_parser_version "," libxml2_using_packaged? "," libxml2? "," engine "]}," Nokogiri VersionInfo warnings":{"type":"method","name":"warnings","children":[],"call":[" loaded_parser_version "," compiled_parser_version "," compiled_parser_version != "," libxml2? "]}," Nokogiri VersionInfo libxml2_using_packaged?":{"type":"method","name":"libxml2_using_packaged?","children":[],"call":[]}," Nokogiri VersionInfo libxml2_using_system?":{"type":"method","name":"libxml2_using_system?","children":[],"call":[" libxml2_using_packaged? ! "," libxml2_using_packaged? "]}," Nokogiri VersionInfo libxml2?":{"type":"method","name":"libxml2?","children":[],"call":[]}," Nokogiri VersionInfo compiled_parser_version":{"type":"method","name":"compiled_parser_version","children":[],"call":[]}," Nokogiri VersionInfo loaded_parser_version":{"type":"method","name":"loaded_parser_version","children":[],"call":["LIBXML_PARSER_VERSION  scan first collect join ","LIBXML_PARSER_VERSION  scan first collect ","LIBXML_PARSER_VERSION  scan first ","LIBXML_PARSER_VERSION  scan ","(send\n  (send\n    (send\n      (const nil :LIBXML_PARSER_VERSION) :scan\n      (regexp\n        (str \"^(.*)(..)(..)$\")\n        (regopt))) :first) :collect) join ","j to_i ","(send\n  (send\n    (send\n      (const nil :LIBXML_PARSER_VERSION) :scan\n      (regexp\n        (str \"^(\\\\d+)(\\\\d\\\\d)(\\\\d\\\\d)(?!\\\\d)\")\n        (regopt))) :first) :collect) join "]}," Nokogiri VersionInfo engine":{"type":"method","name":"engine","children":[],"call":[]}," Nokogiri VersionInfo jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_PLATFORM  == "]}," Nokogiri HTML SAX PushParser finish":{"type":"method","name":"finish","children":[],"call":[" write "]}," Nokogiri HTML SAX PushParser write":{"type":"method","name":"write","children":[],"call":[" native_write "]}," Nokogiri HTML SAX PushParser initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_native ","HTML SAX Parser  new "]}," Nokogiri HTML SAX ParserContext new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri HTML SAX Parser parse_io":{"type":"method","name":"parse_io","children":[],"call":["ctx parse_with "," block_given? ","ParserContext  io ","ENCODINGS  [] "," check_encoding ","ParserContext  io  parse_with "]}," Nokogiri HTML EntityLookup []":{"type":"method","name":"[]","children":[],"call":["val value "," get "," get   get ue "]}," Nokogiri HTML ElementDescription required_attributes":{"type":"method","name":"required_attributes","children":[],"call":["d attrs_req "," default_desc "," get_string_array_from "," default_desc  attrs_req ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription deprecated_attributes":{"type":"method","name":"deprecated_attributes","children":[],"call":["d attrs_depr "," default_desc "," get_string_array_from "," default_desc  attrs_ default_desc epr ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription optional_attributes":{"type":"method","name":"optional_attributes","children":[],"call":["d attrs_opt "," default_desc "," get_string_array_from "," default_desc  attrs_opt ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription default_sub_element":{"type":"method","name":"default_sub_element","children":[],"call":["d defaultsubelt "," default_desc "," cstruct [] "," cstruct "," default_desc   default_desc efaultsubelt ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription description":{"type":"method","name":"description","children":[],"call":["d desc "," default_desc "," cstruct [] "," cstruct "," default_desc   default_desc esc ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription deprecated?":{"type":"method","name":"deprecated?","children":[],"call":["d depr "," default_desc "," cstruct [] != "," cstruct [] "," cstruct "," default_desc   default_desc epr ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription save_end_tag?":{"type":"method","name":"save_end_tag?","children":[],"call":["d saveEndTag "," default_desc "," cstruct [] != "," cstruct [] "," cstruct "," default_desc  saveEn default_desc Tag ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription implied_end_tag?":{"type":"method","name":"implied_end_tag?","children":[],"call":["d endTag "," default_desc "," cstruct [] != "," cstruct [] "," cstruct "," default_desc  en default_desc Tag ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription implied_start_tag?":{"type":"method","name":"implied_start_tag?","children":[],"call":["d startTag "," default_desc "," cstruct [] != "," cstruct [] "," cstruct "," default_desc  startTag ","  default_desc efault_ default_desc esc "]}," Nokogiri HTML ElementDescription default_desc":{"type":"method","name":"default_desc","children":[],"call":["DefaultDescriptions  [] "," name downcase "," name "]}," Nokogiri HTML ElementDescription inspect":{"type":"method","name":"inspect","children":[],"call":[" description "," name "," class name "," class "]}," Nokogiri HTML ElementDescription to_s":{"type":"method","name":"to_s","children":[],"call":[" description "," name "]}," Nokogiri HTML ElementDescription block?":{"type":"method","name":"block?","children":[],"call":[" inline? ! "," inline? "]}," Nokogiri HTML DocumentFragment initialize":{"type":"method","name":"initialize","children":[],"call":[" children "," errors= ","temp_doc errors ","child parent= ","temp_doc xpath each ","temp_doc xpath ","HTML Document  parse ","document encoding ","tags strip =~ ","tags strip ","document errors - ","document errors ","node_set first children each ","node_set first children ","node_set first ","node_set empty? ","ctx parse ","document errors dup ","children each ","HTML Document  parse xpath ","ctx parse first children ","ctx parse first "," ctx parse first children  ","HTML Document  parse  errors ","HTML Document  parse  xpath each ","HTML Document  parse  xpath ","ctx parse  first children each ","node_set first ctx parse first children  each ","ctx parse  first children ","node_set first ctx parse first children  ","ctx parse  first ","ctx parse  empty? ","ctx parse first children  each ","ctx parse first ctx parse first children  "]}," Nokogiri HTML DocumentFragment parse":{"type":"method","name":"parse","children":[],"call":["HTML DocumentFragment  new ","HTML Document  new "," new "]}," Nokogiri HTML Document EncodingReader read":{"type":"method","name":"read","children":[],"call":["ret empty? ","ret << ","@io read ","(op-asgn\n  (lvasgn :len) :-\n  (send\n    (lvar :ret) :length)) > ","ret length ","@firstchunk slice! "," raise ","EncodingFound  new ","EncodingReader  detect_encoding ","@firstchunk ! ","@firstchunk slice!  empty? ","@firstchunk slice!  << ","(op-asgn\n  (lvasgn :len) :-\n  (send\n    (lvar :@firstchunk slice! ) :length)) > ","@firstchunk slice!  length ","@io read  slice! ","EncodingReader  detect_EncodingReader  detect_encoding  ","@io read  ! "]}," Nokogiri HTML Document EncodingReader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri HTML Document EncodingReader detect_encoding_for_jruby_without_fix":{"type":"method","name":"detect_encoding_for_jruby_without_fix","children":[],"call":[]}," Nokogiri HTML Document EncodingReader is_jruby_without_fix?":{"type":"method","name":"is_jruby_without_fix?","children":[],"call":[]}," Nokogiri HTML Document EncodingReader detect_encoding":{"type":"method","name":"detect_encoding","children":[],"call":[]}," Nokogiri HTML Document EncodingReader JumpSAXHandler start_element":{"type":"method","name":"start_element","children":[],"call":[" throw ","name =~ "]}," Nokogiri HTML Document EncodingReader JumpSAXHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri HTML Document EncodingReader SAXHandler start_element":{"type":"method","name":"start_element","children":[],"call":["m [] ","content match ","attr [] ","http_equiv match ","Hash  [] ","name == "," found "," not_found ","content match  [] ","content content match atch ","attr []  match ","Hash  []  [] ","http_equiv content match atch ","nacontent match e == "]}," Nokogiri HTML Document EncodingReader SAXHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri HTML Document EncodingFound initialize":{"type":"method","name":"initialize","children":[],"call":["encoding found: %s % "]}," Nokogiri HTML Document parse":{"type":"method","name":"parse","children":[],"call":[" read_memory ","options to_i ","EncodingReader  detect_encoding "," new ","i encoding= "," new tap ","string_or_io empty? ","string_or_io nil? "," read_io ","e found_encoding ","EncodingReader  new ","string_or_io path ","string_or_io respond_to? ","string_or_io encoding name ","string_or_io encoding ","string_or_io encoding name == "," block_given? ","Nokogiri XML ParseOptions  new ","Integer  === ","string_or_io length == ","string_or_io length ","Fixnum  === ","encoding ! ","e encoding ","Nokogiri XML ParseOptions  new  to_i ","EncodingReader  detect_e found_encoding  ","EncodingReader  detect_EncodingReader  detect_encoding  ","EncodingReader  detect_e encoding  ","i e found_encoding = ","i EncodingReader  detect_encoding = ","i e encoding = ","EncodingReader  new  empty? ","EncodingReader  new  nil? ","e found_e found_encoding  ","e found_EncodingReader  detect_encoding  ","e found_e encoding  ","EncodingReader  new  path ","EncodingReader  new  respond_to? ","string_or_io e found_encoding  name ","string_or_io EncodingReader  detect_encoding  name ","string_or_io e encoding  name ","EncodingReader  new  encoding name ","string_or_io e found_encoding  ","string_or_io EncodingReader  detect_encoding  ","string_or_io e encoding  ","EncodingReader  new  encoding ","string_or_io e found_encoding  name == ","string_or_io EncodingReader  detect_encoding  name == ","string_or_io e encoding  name == ","EncodingReader  new  encoding name == ","EncodingReader  new  length == ","EncodingReader  new  length ","e found_encoding  ! ","EncodingReader  detect_encoding  ! ","e encoding  ! ","e e found_encoding  ","e EncodingReader  detect_encoding  ","e e encoding  "]}," Nokogiri HTML Document fragment":{"type":"method","name":"fragment","children":[],"call":["DocumentFragment  new "," root "]}," Nokogiri HTML Document serialize":{"type":"method","name":"serialize","children":[],"call":["options [] ","XML Node SaveOptions FORMAT  | | | ","XML Node SaveOptions FORMAT  | | ","XML Node SaveOptions FORMAT  | ","args [] ","args shift ","args first is_a? ","args first ","$stderr puts "," class "," caller join "," caller ","args first is_a? ! ","args shift  [] "]}," Nokogiri HTML Document set_metadata_element":{"type":"method","name":"set_metadata_element","children":[],"call":["head prepend_child ","html add_child ","XML Node  new "," add_child ","first add_previous_sibling "," children find "," children ","html prepend_child "," at ","head << ","html add_child  prepend_child ","html prepend_child  prepend_child "," at  prepend_child "," add_child  add_child "," at  add_child "," add_child  prepend_child ","html add_child  << ","html prepend_child  << "," at  << "]}," Nokogiri HTML Document title=":{"type":"method","name":"title=","children":[],"call":[" set_metadata_element ","meta add_next_sibling "," meta_content_type "," at ","head << ","XML Node  new << ","XML Node  new ","title children= ","XML Text  new ","Nokogiri XML Node  new "," at  << ","XML Node  new <<  children= "," at  children= ","Nokogiri XML Node  new  children= "]}," Nokogiri HTML Document title":{"type":"method","name":"title","children":[],"call":["title inner_text "," at "," at  inner_text "]}," Nokogiri HTML Document meta_content_type":{"type":"method","name":"meta_content_type","children":[],"call":["node [] =~ ","node [] "," xpath find "," xpath "," css find "," css ","node [] empty? ! ","node [] empty? ","node [] nil? ! ","node [] nil? "]}," Nokogiri HTML Document meta_encoding=":{"type":"method","name":"meta_encoding=","children":[],"call":[" set_metadata_element ","head prepend_child "," at ","meta []= ","text/html; charset=%s % ","dtd html5_dtd? "," internal_subset ","XML Node  new "," meta_content_type ","LibXML  htmlSetMetaEncoding "," cstruct ","node [] =~ ","node [] "," css find "," css "," set_XML Node  new data_element "," set_ at data_element "," set_ meta_content_type data_element "," at  prepend_child ","XML Node  new  []= "," at  []= "," meta_content_type  []= "," internal_subset  html5_ internal_subset ? "," XML Node  new _content_type ","  at _content_type ","  meta_content_type _content_type "]}," Nokogiri HTML Document meta_encoding":{"type":"method","name":"meta_encoding","children":[],"call":["meta [] [] ","meta [] "," meta_content_type "," at ","LibXML  htmlGetMetaEncoding "," cstruct ","(str \"charset\\\\s*=\\\\s*([\\\\w\\\\d-]+)\") match [] ","(str \"charset\\\\s*=\\\\s*([\\\\w\\\\d-]+)\") match ","node [] =~ ","node [] "," css find "," css ","(str \"charset\\\\s*=\\\\s*([\\\\w-]+)\") match [] ","(str \"charset\\\\s*=\\\\s*([\\\\w-]+)\") match ","match [] "," meta_content_type  [] [] "," at  [] [] "," meta_content_type  [] "," at  [] ","  meta_content_type _content_type ","  at _content_type ","(str \"charset\\\\s*=\\\\s*([\\\\w\\\\d-]+)\") (str \"charset\\s*=\\s*([\\w-]+)\") match  [] ","(str \"charset\\\\s*=\\\\s*([\\\\w\\\\d-]+)\") (str \"charset\\s*=\\s*([\\w-]+)\") match  ","(str \"charset\\\\s*=\\\\s*([\\\\w-]+)\") (str \"charset\\s*=\\s*([\\w-]+)\") match  [] ","(str \"charset\\\\s*=\\\\s*([\\\\w-]+)\") (str \"charset\\s*=\\s*([\\w-]+)\") match  ","(str \"charset\\s*=\\s*([\\w-]+)\") match  [] "]}," Nokogiri Decorators Slop respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["list empty? ! ","list empty? "," xpath ","name to_s sub ","name to_s "," implied_xpath_context "," xpath  empty? ! "," xpath  empty? "]}," Nokogiri CSS XPathVisitor is_of_type_pseudo_class?":{"type":"method","name":"is_of_type_pseudo_class?","children":[],"call":["(and\n  (send\n    (send\n      (send\n        (lvar :node) :value) :[]\n      (int 0)) :is_a?\n    (const\n      (const\n        (const nil :Nokogiri) :CSS) :Node))\n  (send\n    (send\n      (send\n        (send\n          (lvar :node) :value) :[]\n        (int 0)) :type) :==\n    (sym :FUNCTION))) =~ ","node value [] ","node value ","node value [] value [] ","node value [] value ","node value [] type == ","node value [] type ","node value [] is_a? ","node type == ","node type "]}," Nokogiri CSS XPathVisitor read_a_and_positive_b":{"type":"method","name":"read_a_and_positive_b","children":[],"call":[" raise ","op inspect ","a - ","values [] to_i % ","values [] to_i ","values [] ","op == "," rvalues [] to_i ise ","values []  inspect ","values [] to_i  - ","vvalues [] to_i lues [] to_i % ","vvalues [] to_i lues [] to_i ","vvalues [] to_i lues [] ","values []  == "]}," Nokogiri CSS XPathVisitor nth":{"type":"method","name":"nth","children":[],"call":["a abs ","a abs == ","a < ","b zero? ","options [] "," read_a_and_positive_b ","node value "," raise ","node value inspect ","node value size == ","node value size ","b == "]}," Nokogiri CSS Tokenizer _next_token":{"type":"method","name":"_next_token","children":[],"call":[" raise ","undefined state: ' + + ","undefined state: ' + "," state to_s "," state ","can not match: ' + + ","can not match: ' + ","@ss string [] ","@ss pos ","@ss string "," action ","@ss scan ","text == ","@ss peek ","@ss string []  == ","@ss scan  == ","@ss peek  == "]}," Nokogiri CSS Tokenizer next_token":{"type":"method","name":"next_token","children":[],"call":["@ss eos? "," _next_token "," _next_ _next_token  "]}," Nokogiri CSS Tokenizer scan_file":{"type":"method","name":"scan_file","children":[],"call":[" do_parse "," load_file "]}," Nokogiri CSS Tokenizer load_file":{"type":"method","name":"load_file","children":[],"call":[" scan_setup ","f read "," open ","File  open "]}," Nokogiri CSS Tokenizer scan_str":{"type":"method","name":"scan_str","children":[],"call":[" do_parse "," scan_setup "]}," Nokogiri CSS Tokenizer action":{"type":"method","name":"action","children":[],"call":[]}," Nokogiri CSS Tokenizer scan_setup":{"type":"method","name":"scan_setup","children":[],"call":["StringScanner  new "]}," Nokogiri CSS Parser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," Nokogiri CSS Parser _reduce_70":{"type":"method","name":"_reduce_70","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_69":{"type":"method","name":"_reduce_69","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_68":{"type":"method","name":"_reduce_68","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_67":{"type":"method","name":"_reduce_67","children":[],"call":[]}," Nokogiri CSS Parser _reduce_66":{"type":"method","name":"_reduce_66","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":[]}," Nokogiri CSS Parser _reduce_63":{"type":"method","name":"_reduce_63","children":[],"call":[]}," Nokogiri CSS Parser _reduce_61":{"type":"method","name":"_reduce_61","children":[],"call":["val [] ","val first "]}," Nokogiri CSS Parser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":[" unescape_css_string ","val [] ","val first "]}," Nokogiri CSS Parser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[" unescape_css_identifier ","val [] ","val first ","Node  new "]}," Nokogiri CSS Parser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":["Node  new "," unescape_css_identifier ","val first ","val [] "]}," Nokogiri CSS Parser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_51":{"type":"method","name":"_reduce_51","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_50":{"type":"method","name":"_reduce_50","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":["Node  new ","val [] "," raise ","val unshift ","val []= ","val [] == "]}," Nokogiri CSS Parser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":["Node  new ","val [] "," raise ","val [] == ","val << "]}," Nokogiri CSS Parser _reduce_43":{"type":"method","name":"_reduce_43","children":[],"call":[" raise ","val [] ","Node  new ","val << ","n == ","n [] ","n size ","val []= ","n [] == ","val [] == ","val unshift ","Node  val [] ew ","val []  == ","val []  [] ","val []  size ","val []  [] == ","val uval [] shift "]}," Nokogiri CSS Parser _reduce_42":{"type":"method","name":"_reduce_42","children":[],"call":[" raise ","val [] ","Node  new ","val unshift ","val []= ","val [] == ","val << "]}," Nokogiri CSS Parser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":[" raise ","val [] ","Node  new ","val [] == ","val << ","val unshift ","val []= "]}," Nokogiri CSS Parser _reduce_40":{"type":"method","name":"_reduce_40","children":[],"call":["Node  new ","val [] "," raise ","val unshift ","val []= ","val [] == ","val last ","val first "]}," Nokogiri CSS Parser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":["val last ","val first ","Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip "]}," Nokogiri CSS Parser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":["val last ","val first ","Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip "]}," Nokogiri CSS Parser _reduce_35":{"type":"method","name":"_reduce_35","children":[],"call":["val last ","val first ","Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip "]}," Nokogiri CSS Parser _reduce_34":{"type":"method","name":"_reduce_34","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first ","val last "]}," Nokogiri CSS Parser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first ","val last "]}," Nokogiri CSS Parser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first "]}," Nokogiri CSS Parser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last "]}," Nokogiri CSS Parser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":["Node  new ","val first strip ","val first ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] "]}," Nokogiri CSS Parser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":["Node  new ","val first ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","(send\n  (lvar :val) :[]\n  (int 1)) + ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last "]}," Nokogiri CSS Parser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":["Node  new ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","val first ","val first strip ","val [] ","(send\n  (lvar :val) :[]\n  (int 1)) + "]}," Nokogiri CSS Parser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":["Node  new ","val [] ","(send\n  (lvar :val) :[]\n  (int 1)) + "]}," Nokogiri CSS Parser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":["Node  new ","(send\n  (lvar :val) :[]\n  (int 1)) + ","val [] "]}," Nokogiri CSS Parser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":["Node  new ","(send\n  (lvar :val) :[]\n  (int 1)) + ","val [] ","(send\n  (const nil :Node) :new\n  (sym :ELEMENT_NAME)\n  (array\n    (send\n      (lvar :val) :[]\n      (int 1)))) + ","val first ","@namespaces key? ","@val first spaces key? "]}," Nokogiri CSS Parser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":["val [] ","Node  new ","val first ","@namespaces key? ","@val first spaces key? "]}," Nokogiri CSS Parser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":["Node  new ","val first ","@namespaces key? ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","@val first spaces key? "]}," Nokogiri CSS Parser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":["Node  new ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","val first ","@namespaces key? ","val [] ","@val first spaces key? "]}," Nokogiri CSS Parser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":["Node  new ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","val first "]}," Nokogiri CSS Parser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":["Node  new "," unescape_css_identifier ","val [] ","val last ","val first "]}," Nokogiri CSS Parser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":["Node  new ","val last ","val first ","val [] "]}," Nokogiri CSS Parser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":["Node  new ","val last ","val first ","val [] "]}," Nokogiri CSS Parser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":["Node  new ","val last ","val first "]}," Nokogiri CSS Parser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":["Node  new ","val first "]}," Nokogiri CSS Parser _reduce_12":{"type":"method","name":"_reduce_12","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":["Node  new ","val last ","val [] ","val first "]}," Nokogiri CSS Parser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":["Node  new ","val [] ","val first ","val [] nil? "]}," Nokogiri CSS Parser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":[]}," Nokogiri CSS Parser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[]}," Nokogiri CSS Parser _reduce_6":{"type":"method","name":"_reduce_6","children":[],"call":[]}," Nokogiri CSS Parser _reduce_5":{"type":"method","name":"_reduce_5","children":[],"call":[]}," Nokogiri CSS Parser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[]}," Nokogiri CSS Parser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":["(send\n  (lvar :val) :last) flatten ","val last ","val flatten "]}," Nokogiri CSS Parser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["val flatten "]}," Nokogiri CSS Parser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":["(send\n  (lvar :val) :first) flatten ","val last ","val first "]}," Nokogiri CSS Parser unescape_css_string":{"type":"method","name":"unescape_css_string","children":[],"call":["(send\n  (nth-ref 2) :hex) pack ","2 hex ","1 == ","str gsub "]}," Nokogiri CSS Parser unescape_css_identifier":{"type":"method","name":"unescape_css_identifier","children":[],"call":["(send\n  (nth-ref 2) :hex) pack ","2 hex ","identifier gsub "]}," Nokogiri XML Node new_from_str":{"type":"method","name":"new_from_str","children":[],"call":[]}," Nokogiri XML DTD attributes":{"type":"method","name":"attributes","children":[],"call":[" internal_attributes "]}," Nokogiri XML FragmentHandler end_element":{"type":"method","name":"end_element","children":[],"call":["@stack pop ","@stack last name == ","@stack last name ","@stack last "]}," Nokogiri XML FragmentHandler characters":{"type":"method","name":"characters","children":[],"call":["@stack last << ","Nokogiri XML Text  new ","@stack last ","@original_html =~ ","@original_html strip =~ ","Regexp  escape ","string strip ","@original_html strip ","Text  new "]}," Nokogiri XML FragmentHandler start_element":{"type":"method","name":"start_element","children":[],"call":["@stack << ","@stack last << ","@stack last ","node []= ","Hash  [] each ","Hash  [] ","Node  new ","@original_html =~ ","attrs << ","(send\n  (send\n    (lvar :attrs) :length) :%\n  (int 2)) == ","attrs length % ","attrs length ","Regexp  escape ","@klass == ","Element  new ","node namespace= ","x prefix == ","x prefix ","@document root namespace_definitions detect ","@document root namespace_definitions ","@document root ","match [] ","name match ","@doc_started ! ","Node  new  []= ","Element  new  []= ","Node  new  namespace= ","Element  new  namespace= ","name match  [] ","name name match  "]}," Nokogiri XML FragmentHandler initialize":{"type":"method","name":"initialize","children":[],"call":["node document ","original_html [] ","original_html index ","node kind_of? ","@original_html [] ","@original_html index ","original_html lstrip "," prepare_for_regex ","original_html strip ","original_html []  [] ","@original_html []  [] ","original_html lstrip  [] "," prepare_for_regex  [] ","original_html []  index ","@original_html []  index ","original_html lstrip  index "," prepare_for_regex  index "]}," Nokogiri XML SAX Document end_element_ns":{"type":"method","name":"end_element_ns","children":[],"call":[]}," Nokogiri XML SAX Document start_element_ns":{"type":"method","name":"start_element_ns","children":[],"call":[]}," Nokogiri is_2_6_16?":{"type":"method","name":"is_2_6_16?","children":[],"call":[]}," Nokogiri ffi?":{"type":"method","name":"ffi?","children":[],"call":[]}," Nokogiri HTML Document initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Nokogiri XSLT Stylesheet transform":{"type":"method","name":"transform","children":[],"call":["XML Document  wrap "," raise ","ptr null? ","LibXML  xsltApplyStylesheet ","document cstruct "," cstruct ","param_arr [] put_pointer ","param_arr [] ","params length ","FFI MemoryPointer  from_string ","param to_s ","params each_with_index ","FFI MemoryPointer  new ","params length + ","param_arr put_pointer ","LibXML  pointer_offset ","param_arr put_array_of_pointer ","params map ","params is_a? ","params to_a flatten ","params to_a ","document kind_of? ","LibXML  xsltApplyStylesheet  null? ","FFI MemoryPointer  new  [] put_pointer ","FFI MemoryPointer  new  [] ","params to_a flatten  length ","params to_a flatten  each_with_index ","params to_a flatten  length + ","FFI MemoryPointer  new  put_pointer ","FFI MemoryPointer  new  put_array_of_pointer ","params to_a flatten  map ","params to_a flatten  is_a? ","params to_a flatten  to_a flatten ","params to_a flatten  to_a "]}," Nokogiri XSLT Stylesheet serialize":{"type":"method","name":"serialize","children":[],"call":["buf pointer read_string ","buf_len read_int ","buf pointer ","Nokogiri LibXML XmlAlloc  new ","buf_ptr read_pointer ","LibXML  xsltSaveResultToString "," cstruct ","document cstruct ","FFI MemoryPointer  new ","buf_len get_int ","buf_ptr get_pointer ","FFI Buffer  new ","Nokogiri LibXML XmlAlloc  new  pointer read_string ","Nokogiri LibXML XmlAlloc  new _len read_int ","FFI MemoryPointer  new  read_int ","FFI Buffer  new  read_int ","Nokogiri LibXML XmlAlloc  new  pointer ","Nokogiri LibXML XmlAlloc  new _ptr read_pointer ","FFI MemoryPointer  new  read_pointer ","FFI Buffer  new  read_pointer ","Nokogiri LibXML XmlAlloc  new _len get_int ","FFI MemoryPointer  new  get_int ","FFI Buffer  new  get_int ","Nokogiri LibXML XmlAlloc  new _ptr get_pointer ","FFI MemoryPointer  new  get_pointer ","FFI Buffer  new  get_pointer "]}," Nokogiri XSLT Stylesheet parse_stylesheet_doc":{"type":"method","name":"parse_stylesheet_doc","children":[],"call":[]}," Nokogiri XML XPathContext ruby_funcall":{"type":"method","name":"ruby_funcall","children":[],"call":[" raise ","RuntimeError  new ","result class inspect ","result class ","LibXML  xmlXPathReturnNodeSet ","LibXML  xmlXPathNodeSetMerge ","result cstruct ","result is_a? ","node_set cstruct ","XML NodeSet  new ","Array  to_s ","NilClass  to_s ","LibXML  xmlXPathReturnFalse ","FalseClass  to_s ","LibXML  xmlXPathReturnTrue ","TrueClass  to_s ","LibXML  xmlXPathReturnString ","LibXML  xmlXPathWrapCString ","String  to_s ","LibXML  xmlXPathReturnNumber ","Bignum  to_s ","Float  to_s ","Fixnum  to_s ","result class to_s ","xpath_handler send ","LibXML  xmlFree ","char_ptr read_string ","params unshift ","LibXML  xmlXPathCastToString ","set cstruct= ","NodeSet  allocate ","LibXML XmlNodeSet  new ","obj [] ","obj [] == ","LibXML XmlXpathObject  new ","LibXML  valuePop ","nargs times ","context doc ruby_doc ","context doc ","parser_context context ","LibXML XmlXpathParserContext  new "," lambda ","NodeSet  wrap ","context_cstruct document ruby_doc ","context_cstruct document ","xpath_handler send  class inspect ","xpath_handler send  class ","xpath_handler send  cstruct ","xpath_handler send  is_a? ","XML NodeSet  new  cstruct ","node_NodeSet  allocate  cstruct ","xpath_handler send  class to_s ","char_ptr read_char_ptr read_string  ","params unshift  read_string ","NodeSet  allocate  cstruct= ","LibXML XmlXpathObject  new  [] ","LibXML XmlXpathObject  new  [] == ","context context doc ruby_doc  ruby_context doc ruby_doc  ","parser_context context  doc ruby_doc ","context context doc ruby_doc  ","parser_context context  doc ","parser_parser_context context  parser_context context  ","LibXML XmlXpathParserContext  new  context ","context_cstruct context doc ruby_doc ument ruby_context doc ruby_doc  ","parser_context context _cstruct document ruby_doc ","context_cstruct context_cstruct document ruby_doc  ruby_doc ","parser_context context  document ruby_doc ","context_cstruct context doc ruby_doc ument ","parser_context context _cstruct document ","context_cstruct context_cstruct document ruby_doc  ","parser_context context  document "]}," Nokogiri XML XPathContext new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML XPathContext evaluate":{"type":"method","name":"evaluate","children":[],"call":["xpath document= "," cstruct [] "," cstruct ","xpath cstruct= ","LibXML XmlXpathObject  new ","XML XPath  new "," raise ","XPath SyntaxError  wrap ","LibXML  xmlGetLastError ","xpath_ptr null? ","LibXML  xmlSetGenericErrorFunc ","LibXML  xmlSetStructuredErrorFunc ","LibXML  xmlXPathEvalExpression ","RuntimeError  new "," lambda ","LibXML  xmlResetLastError ","LibXML  xmlXPathRegisterFuncLookup "," ruby_funcall ","xpath_handler respond_to? ","search_path to_s ","NodeSet  new ","xpath document ","0 != ","xpath cstruct [] ","xpath cstruct ","NodeSet  wrap ","xpath cstruct [] null? "," cstruct document ruby_doc "," cstruct document ","XML XPath  new  document= ","XML XPath  new  cstruct= ","XML XPath  new _ptr null? ","LibXML  xmlXPathEvalExpression  null? ","XML XPath  new _handler respond_to? ","XML XPath  new  document ","XML XPath  new  cstruct [] ","XML XPath  new  cstruct ","XML XPath  new  cstruct [] null? "]}," Nokogiri XML XPathContext register_ns":{"type":"method","name":"register_ns","children":[],"call":["LibXML  xmlXPathRegisterNs "," cstruct "]}," Nokogiri XML XPath node_set":{"type":"method","name":"node_set","children":[],"call":["set document= ","set cstruct= ","LibXML XmlNodeSet  new ","XML NodeSet  new ","LibXML  xmlXPathNodeSetCreate ","ptr null? "," cstruct [] "," cstruct ","XML NodeSet  new  document= ","XML NodeSet  new  cstruct= ","LibXML  xmlXPathNodeSetCreate  null? "," cstruct []  null? "]}," Nokogiri XML Text new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML SyntaxError wrap":{"type":"method","name":"wrap","children":[],"call":["error cstruct= "," new ","LibXML XmlSyntaxError  new ","LibXML  xmlCopyError ","LibXML XmlSyntaxError  allocate "," allocate "," new  cstruct= "," allocate  cstruct= "]}," Nokogiri XML SyntaxError error_array_pusher":{"type":"method","name":"error_array_pusher","children":[],"call":["array << "," wrap ","Proc  new "]}," Nokogiri XML SyntaxError column":{"type":"method","name":"column","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML SyntaxError int1":{"type":"method","name":"int1","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML SyntaxError str3":{"type":"method","name":"str3","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] null? "]}," Nokogiri XML SyntaxError str2":{"type":"method","name":"str2","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] null? "]}," Nokogiri XML SyntaxError str1":{"type":"method","name":"str1","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] null? "]}," Nokogiri XML SyntaxError line":{"type":"method","name":"line","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML SyntaxError file":{"type":"method","name":"file","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] null? "]}," Nokogiri XML SyntaxError level":{"type":"method","name":"level","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML SyntaxError message":{"type":"method","name":"message","children":[],"call":[" cstruct [] "," cstruct ","val read_string ","val null? ","val read_string chomp "," cstruct []  read_string "," cstruct []  null? "," cstruct []  read_string chomp "]}," Nokogiri XML SyntaxError code":{"type":"method","name":"code","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML SyntaxError domain":{"type":"method","name":"domain","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Schema read_memory":{"type":"method","name":"read_memory","children":[],"call":[]}," Nokogiri XML Schema validate_document":{"type":"method","name":"validate_document","children":[],"call":["LibXML  xmlSchemaFreeValidCtxt ","LibXML  xmlSchemaValidateDoc ","document cstruct ","LibXML  xmlSchemaSetValidStructuredErrors ","SyntaxError  error_array_pusher ","Nokogiri  is_2_6_16? "," raise ","RuntimeError  new ","ctx null? ","LibXML  xmlSchemaNewValidCtxt "," cstruct ","LibXML  xmlSchemaNewValidCtxt  null? "]}," Nokogiri XML SAX PushParser initialize_native":{"type":"method","name":"initialize_native","children":[],"call":[" cstruct= ","LibXML XmlSaxPushParserContext  new "," raise ","ctx_ptr null? ","LibXML  xmlCreatePushParserCtxt ","sax cstruct ","filename to_s ","filename nil? ","LibXML  xmlCreatePushParserCtxt  null? ","filename to_s  to_s ","filename to_s  nil? "]}," Nokogiri XML SAX PushParser native_write":{"type":"method","name":"native_write","children":[],"call":[" raise ","0 != ","LibXML  xmlParseChunk "," cstruct ","chunk length ","chunk to_s ","chunk nil? ","Nokogiri XML SyntaxError  wrap ","LibXML  xmlCtxtGetLastError ","rcode != ","(send\n  (send\n    (send nil :cstruct) :[]\n    (sym :options)) :&\n  (const\n    (const\n      (const nil :XML) :ParseOptions) :RECOVER)) == "," cstruct [] & "," cstruct [] ","LibXML  xmlParseChunk != ","chunk to_s  length ","chunk to_s  to_s ","chunk to_s  nil? ","LibXML  xmlParseChunk  != "]}," Nokogiri XML SAX Parser __internal__endElementNs":{"type":"method","name":"__internal__endElementNs","children":[],"call":["@document end_element ","@document respond_to? ","@document end_element_ns ","uri read_string ","uri null? ","prefix read_string ","prefix null? ","localname read_string ","localname null? "," end_element_namespace ","@document end_element_namespace ","uri read_string  read_string ","uri read_string  null? ","prefix read_string  read_string ","prefix read_string  null? ","localname read_string  read_string ","localname read_string  null? "]}," Nokogiri XML SAX Parser __internal__startElementNs":{"type":"method","name":"__internal__startElementNs","children":[],"call":["@document start_element ","attr_hash to_a flatten ","attr_hash to_a ","@document respond_to? ","@document start_element_ns ","ns_hash []= ","value read_string ","value null? ","namespaces get_pointer ","LibXML  pointer_offset ","j + ","key read_string ","key null? ","(irange\n  (int 0)\n  (send\n    (begin\n      (send\n        (lvar :nb_namespaces) :-\n        (int 1))) :*\n    (int 2))) step ","(send\n  (lvar :nb_namespaces) :-\n  (int 1)) * ","nb_namespaces - ","namespaces null? ! ","namespaces null? ","attr_hash []= ","attributes get_pointer get_string ","attributes get_pointer ","attributes get_pointer address - ","attributes get_pointer address ","attributes get_pointer read_string ","(irange\n  (int 0)\n  (send\n    (begin\n      (send\n        (lvar :nb_attributes) :-\n        (int 1))) :*\n    (int 5))) step ","(send\n  (lvar :nb_attributes) :-\n  (int 1)) * ","nb_attributes - ","attributes null? ! ","attributes null? ","uri read_string ","uri null? ","prefix read_string ","prefix null? ","localname read_string ","localname null? "," start_element_namespace ","@document start_element_namespace ","ns_list << ","attr_list << ","Attribute  new ","attr_uri read_string ","attr_uri null? ","attr_prefix read_string ","attr_prefix null? ","value read_string  read_string ","namespaces get_pointer  read_string ","attributes get_pointer get_string  read_string ","value read_string  null? ","namespaces get_pointer  null? ","attributes get_pointer get_string  null? ","key read_string  read_string ","attributes get_pointer read_string  read_string ","key read_string  null? ","attributes get_pointer read_string  null? ","uri read_string  read_string ","uri read_string  null? ","prefix read_string  read_string ","prefix read_string  null? ","localname read_string  read_string ","localname read_string  null? ","attr_uri read_string  read_string ","attributes get_pointer  read_string ","attr_uri read_string  null? ","attributes get_pointer  null? ","attr_prefix read_string  read_string ","attr_prefix read_string  null? "]}," Nokogiri XML SAX Parser __internal__cdataBlock":{"type":"method","name":"__internal__cdataBlock","children":[],"call":["@document cdata_block ","data slice "]}," Nokogiri XML SAX Parser __internal__error":{"type":"method","name":"__internal__error","children":[],"call":["@document error "]}," Nokogiri XML SAX Parser __internal__warning":{"type":"method","name":"__internal__warning","children":[],"call":["@document warning "]}," Nokogiri XML SAX Parser __internal__comment":{"type":"method","name":"__internal__comment","children":[],"call":["@document comment "]}," Nokogiri XML SAX Parser __internal__characters":{"type":"method","name":"__internal__characters","children":[],"call":["@document characters ","data slice "]}," Nokogiri XML SAX Parser __internal__endElement":{"type":"method","name":"__internal__endElement","children":[],"call":["@document end_element "]}," Nokogiri XML SAX Parser __internal__startElement":{"type":"method","name":"__internal__startElement","children":[],"call":["@document start_element ","attrs << ","value read_string ","(lvasgn :value\n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (lvar :j)))) null? ! ","(lvasgn :value\n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (lvar :j)))) null? ","attributes get_pointer ","LibXML  pointer_offset ","attributes null? ","attributes get_array_of_string ","attributes get_pointer null? ! ","attributes get_pointer null? ","attributes null? ! ","attributes get_array_of_string  << ","attributes get_pointer  read_string ","(lvasgn :attributes get_pointer \n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (lvar :j)))) null? ! ","(lvasgn :value\n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (attributes get_array_of_string t nil :LibXML) :pointer_offset\n      (lvar :j)))) null? ! ","(lvasgn :attributes get_pointer \n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (lvar :j)))) null? ","(lvasgn :value\n  (send\n    (lvar :attributes) :get_pointer\n    (send\n      (attributes get_array_of_string t nil :LibXML) :pointer_offset\n      (lvar :j)))) null? "]}," Nokogiri XML SAX Parser __internal__endDocument":{"type":"method","name":"__internal__endDocument","children":[],"call":["@document end_document "]}," Nokogiri XML SAX Parser __internal__startDocument":{"type":"method","name":"__internal__startDocument","children":[],"call":["@document start_document ","@document xmldecl ","@ctxt [] ","(pair\n  (int 0)\n  (str \"no\")) [] ","@ctxt [] != ","@ctxt [] == "]}," Nokogiri XML SAX Parser setup_lambdas":{"type":"method","name":"setup_lambdas","children":[],"call":[" cstruct []= "," cstruct ","@closures each ","@closures []= "," send "," lambda ","(sym :startDocument) each "]}," Nokogiri XML SAX Parser new":{"type":"method","name":"new","children":[],"call":["XML SAX Document  new "]}," Nokogiri XML SAX Parser native_parse_file":{"type":"method","name":"native_parse_file","children":[],"call":["LibXML  xmlSAXUserParseFile "," cstruct "]}," Nokogiri XML SAX Parser native_parse_io":{"type":"method","name":"native_parse_io","children":[],"call":["LibXML  xmlFreeParserCtxt ","LibXML  xmlParseDocument ","LibXML  xmlCreateIOParserCtxt ","IoCallbacks  reader "," cstruct "]}," Nokogiri XML RelaxNG read_memory":{"type":"method","name":"read_memory","children":[],"call":[]}," Nokogiri XML RelaxNG validate_document":{"type":"method","name":"validate_document","children":[],"call":["LibXML  xmlRelaxNGFreeValidCtxt ","LibXML  xmlRelaxNGValidateDoc ","document cstruct ","LibXML  xmlRelaxNGSetValidStructuredErrors ","SyntaxError  error_array_pusher ","Nokogiri  is_2_6_16? "," raise ","RuntimeError  new ","ctx null? ","LibXML  xmlRelaxNGNewValidCtxt "," cstruct ","LibXML  xmlRelaxNGNewValidCtxt  null? "]}," Nokogiri XML Reader node_namespaces":{"type":"method","name":"node_namespaces","children":[],"call":["ns_cstruct [] ","ahash []= ","prefix empty? ","prefix nil? ","LibXML XmlNs  new ","ns null? ! ","ns null? ","cstruct [] ","cstruct [] == ","node cstruct ","LibXML XmlNode  new ","ns_cstruct [] _cstruct [] ","cstruct [] _cstruct [] ","LibXML XmlNs  new  [] ","ns_node cstruct  [] ","ns_LibXML XmlNode  new  [] ","ns_cstruct []  empty? ","ns_cstruct []  nil? ","ns_cstruct []  null? ! ","cstruct []  null? ! ","ns_cstruct []  null? ","cstruct []  null? ","node cstruct  [] ","LibXML XmlNode  new  [] ","node cstruct  [] == ","LibXML XmlNode  new  [] == ","node node cstruct  ","node LibXML XmlNode  new  "]}," Nokogiri XML Reader from_io":{"type":"method","name":"from_io","children":[],"call":[]}," Nokogiri XML Reader from_memory":{"type":"method","name":"from_memory","children":[],"call":[]}," Nokogiri XML Reader read":{"type":"method","name":"read","children":[],"call":[" raise ","SyntaxError  wrap ","LibXML  xmlGetLastError ","ret == ","LibXML  xmlSetStructuredErrorFunc ","LibXML  xmlTextReaderRead "," cstruct ","SyntaxError  error_array_pusher "," errors ","LibXML  xmlTextReaderRead  == ","SyntaxError  LibXML  xmlGetLastError _array_pusher "," LibXML  xmlGetLastError s "]}," Nokogiri XML Reader state":{"type":"method","name":"state","children":[],"call":["LibXML  xmlTextReaderReadState "," cstruct "]}," Nokogiri XML Reader name":{"type":"method","name":"name","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstName "," cstruct ","LibXML  xmlTextReaderConstName  read_string ","LibXML  xmlTextReaderConstName  null? "]}," Nokogiri XML Reader local_name":{"type":"method","name":"local_name","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstLocalName "," cstruct ","LibXML  xmlTextReaderConstLocalName  read_string ","LibXML  xmlTextReaderConstLocalName  null? "]}," Nokogiri XML Reader namespace_uri":{"type":"method","name":"namespace_uri","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstNamespaceUri "," cstruct ","LibXML  xmlTextReaderConstNamespaceUri  read_string ","LibXML  xmlTextReaderConstNamespaceUri  null? "]}," Nokogiri XML Reader prefix":{"type":"method","name":"prefix","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstPrefix "," cstruct ","LibXML  xmlTextReaderConstPrefix  read_string ","LibXML  xmlTextReaderConstPrefix  null? "]}," Nokogiri XML Reader value":{"type":"method","name":"value","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstValue "," cstruct ","LibXML  xmlTextReaderConstValue  read_string ","LibXML  xmlTextReaderConstValue  null? "]}," Nokogiri XML Reader lang":{"type":"method","name":"lang","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstXmlLang "," cstruct ","LibXML  xmlTextReaderConstXmlLang  read_string ","LibXML  xmlTextReaderConstXmlLang  null? "]}," Nokogiri XML Reader xml_version":{"type":"method","name":"xml_version","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstXmlVersion "," cstruct ","LibXML  xmlTextReaderConstXmlVersion  read_string ","LibXML  xmlTextReaderConstXmlVersion  null? "]}," Nokogiri XML Reader depth":{"type":"method","name":"depth","children":[],"call":["val == ","LibXML  xmlTextReaderDepth "," cstruct ","LibXML  xmlTextReaderDepth  == "]}," Nokogiri XML Reader attribute_count":{"type":"method","name":"attribute_count","children":[],"call":["count == ","LibXML  xmlTextReaderAttributeCount "," cstruct ","LibXML  xmlTextReaderAttributeCount  == "]}," Nokogiri XML Reader attribute":{"type":"method","name":"attribute","children":[],"call":["LibXML  xmlFree ","attr_ptr read_string ","attr_ptr null? ","LibXML  xmlTextReaderLookupNamespace ","prefix read_string "," cstruct ","prefix read_string length == ","prefix read_string length ","prefix null? ","localname read_string ","localname null? ! ","localname null? ","prefix_ptr get_pointer ","LibXML  xmlSplitQName2 ","FFI MemoryPointer  new ","LibXML  xmlTextReaderGetAttribute ","name to_s ","name nil? ","FFI Buffer  new ","attr_ptr read_string _ptr read_string ","LibXML  xmlTextReaderLookupNamespace  read_string ","LibXML  xmlTextReaderGetAttribute  read_string ","attr_ptr read_string _ptr null? ","LibXML  xmlTextReaderLookupNamespace  null? ","LibXML  xmlTextReaderGetAttribute  null? ","prefix_ptr get_pointer  read_string ","prefix_ptr get_pointer  read_string length == ","prefix_ptr get_pointer  read_string length ","prefix_ptr get_pointer  null? ","LibXML  xmlSplitQName2  read_string ","LibXML  xmlSplitQName2  null? ! ","LibXML  xmlSplitQName2  null? ","prefix_ptr get_pointer _ptr get_pointer ","FFI MemoryPointer  new  get_pointer ","FFI Buffer  new  get_pointer "]}," Nokogiri XML Reader attribute_at":{"type":"method","name":"attribute_at","children":[],"call":["LibXML  xmlFree ","attr_ptr read_string ","attr_ptr null? ","LibXML  xmlTextReaderGetAttributeNo "," cstruct ","index to_i ","index nil? ","attr_ptr read_string _ptr read_string ","LibXML  xmlTextReaderGetAttributeNo  read_string ","attr_ptr read_string _ptr null? ","LibXML  xmlTextReaderGetAttributeNo  null? ","index to_i  to_i ","index to_i  nil? "]}," Nokogiri XML Reader namespaces":{"type":"method","name":"namespaces","children":[],"call":["Reader  node_namespaces ","Node  wrap ","ptr null? ","LibXML  xmlTextReaderExpand "," cstruct "," attributes? ","Reader  Node  wrap _namespaces ","LibXML  xmlTextReaderExpand  null? "]}," Nokogiri XML Reader attributes?":{"type":"method","name":"attributes?","children":[],"call":["node [] null? ! ","node [] null? ","node [] ","node [] == ","LibXML XmlNode  new ","node_ptr null? ","LibXML  xmlTextReaderCurrentNode "," cstruct ","LibXML XmlNode  new  [] null? ! ","LibXML XmlNode  new  [] null? ","LibXML XmlNode  new  [] ","LibXML XmlNode  new  [] == ","LibXML XmlNode  new _ptr null? ","LibXML  xmlTextReaderCurrentNode  null? "]}," Nokogiri XML Reader value?":{"type":"method","name":"value?","children":[],"call":["LibXML  xmlTextReaderHasValue == ","LibXML  xmlTextReaderHasValue "," cstruct "]}," Nokogiri XML Reader default?":{"type":"method","name":"default?","children":[],"call":["LibXML  xmlTextReaderIsDefault == ","LibXML  xmlTextReaderIsDefault "," cstruct "]}," Nokogiri XML ProcessingInstruction new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML NodeSet subseq":{"type":"method","name":"subseq","children":[],"call":["LibXML  xmlXPathNodeSetAdd "," cstruct nodeAt "," cstruct ","set cstruct ","beg upto ","beg + - ","beg + ","NodeSet  wrap ","LibXML  xmlXPathNodeSetCreate ","len < ","beg < ","beg > "," cstruct [] ","LibXML  xmlXPathNodeSetAddUnique "," document "," cstruct [] - ","beg + > ","NodeSet  wrap  cstruct "," cstruct [] -  < "]}," Nokogiri XML NodeSet index_at":{"type":"method","name":"index_at","children":[],"call":["Node  wrap "," cstruct nodeAt "," cstruct ","number + "," cstruct [] ","number < ","number abs > ","number abs ","number >= ","Namespace  wrap "," document cstruct "," document ","node_cstruct [] == ","node_cstruct [] ","LibXML XmlNode  new ","number +  + ","number +  < ","number +  abs > ","number +  abs ","number +  >= ","LibXML XmlNode  new  [] == ","LibXML XmlNode  new  [] "]}," Nokogiri XML NodeSet new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML NodeSet to_a":{"type":"method","name":"to_a","children":[],"call":["Node  wrap "," cstruct nodeTab collect "," cstruct nodeTab "," cstruct ","Namespace  wrap "," document cstruct "," document ","node_cstruct [] == ","node_cstruct [] ","LibXML XmlNode  new ","LibXML XmlNode  new  [] == ","LibXML XmlNode  new  [] "]}," Nokogiri XML NodeSet include?":{"type":"method","name":"include?","children":[],"call":["LibXML  xmlXPathNodeSetContains != ","LibXML  xmlXPathNodeSetContains ","node cstruct "," cstruct "," raise ","node is_a? "]}," Nokogiri XML NodeSet &":{"type":"method","name":"&","children":[],"call":["NodeSet  wrap ","LibXML  xmlXPathIntersection ","node_set cstruct "," cstruct "," raise ","node_set is_a? "," document "]}," Nokogiri XML NodeSet []":{"type":"method","name":"[]","children":[],"call":[" index_at "," subseq ","arg last - + ","arg last - ","arg first ","arg last ","arg is_a? ","args [] "," cstruct [] "," cstruct ","beg < ","args length == ","args length "," raise ","args length > ","args []  last - + ","args []  last - ","args []  first ","args []  last ","args []  is_a? ","args [] s [] ","args []  < ","args [] s length == ","args args [] gth == ","args [] s length ","args args [] gth ","args [] s length > ","args args [] gth > "]}," Nokogiri XML NodeSet delete":{"type":"method","name":"delete","children":[],"call":["LibXML  xmlXPathNodeSetDel ","node cstruct "," cstruct ","LibXML  xmlXPathNodeSetContains != ","LibXML  xmlXPathNodeSetContains "," raise ","node is_a? "]}," Nokogiri XML NodeSet -":{"type":"method","name":"-","children":[],"call":["NodeSet  wrap ","LibXML  xmlXPathNodeSetDel ","other_nodetab [] ","node_set cstruct [] times ","node_set cstruct [] ","node_set cstruct ","node_set cstruct nodeTab ","LibXML  xmlXPathNodeSetMerge "," cstruct "," raise ","node_set is_a? "," document ","node_set cstruct nodeTab  [] "]}," Nokogiri XML NodeSet +":{"type":"method","name":"+","children":[],"call":["NodeSet  wrap ","LibXML  xmlXPathNodeSetMerge ","node_set cstruct "," cstruct "," raise ","node_set is_a? ","new_set document= "," document ","NodeSet  wrap  document= "]}," Nokogiri XML NodeSet push":{"type":"method","name":"push","children":[],"call":["LibXML  xmlXPathNodeSetAdd ","node cstruct "," cstruct "," raise ","node is_a? "]}," Nokogiri XML NodeSet length":{"type":"method","name":"length","children":[],"call":[" cstruct [] "," cstruct "," cstruct pointer null? "," cstruct pointer "]}," Nokogiri XML NodeSet dup":{"type":"method","name":"dup","children":[],"call":["NodeSet  wrap ","LibXML  xmlXPathNodeSetMerge "," cstruct "," document "]}," Nokogiri XML Node set_xml_tree_indent_string":{"type":"method","name":"set_xml_tree_indent_string","children":[],"call":["LibXML  __xmlTreeIndentString write_pointer ","LibXML  xmlStrdup ","value to_s ","LibXML  __xmlTreeIndentString "]}," Nokogiri XML Node set_xml_indent_tree_output":{"type":"method","name":"set_xml_indent_tree_output","children":[],"call":["LibXML  __xmlIndentTreeOutput write_int ","LibXML  __xmlIndentTreeOutput "]}," Nokogiri XML Node cstruct_node_from":{"type":"method","name":"cstruct_node_from","children":[],"call":["Node  wrap ","(lvasgn :val\n  (send\n    (send nil :cstruct) :[]\n    (lvar :sym))) null? "," cstruct [] "," cstruct ","(lvasgn : cstruct [] \n  (send\n    (send nil :cstruct) :[]\n    (lvar :sym))) null? "]}," Nokogiri XML Node relink_namespace":{"type":"method","name":"relink_namespace","children":[],"call":[]}," Nokogiri XML Node reparent_node_with":{"type":"method","name":"reparent_node_with","children":[],"call":[]}," Nokogiri XML Node document":{"type":"method","name":"document","children":[],"call":[" cstruct document ruby_doc "," cstruct document "," cstruct "]}," Nokogiri XML Node compare":{"type":"method","name":"compare","children":[],"call":["LibXML  xmlXPathCmpNodes "," cstruct ","other cstruct "]}," Nokogiri XML Node dump_html":{"type":"method","name":"dump_html","children":[],"call":["buffer [] ","LibXML  htmlNodeDump "," cstruct "," cstruct [] ","LibXML XmlBuffer  new ","LibXML  xmlBufferCreate "," to_xml "," type == "," type ","LibXML XmlBuffer  new  [] "]}," Nokogiri XML Node new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML Node add_namespace_definition":{"type":"method","name":"add_namespace_definition","children":[],"call":["Namespace  wrap "," cstruct document "," cstruct ","LibXML  xmlSetNs ","prefix nil? ","LibXML  xmlNewNs ","LibXML  xmlSearchNs ","prefix to_s ","ns null? "," != ","namespacee cstruct "," parent "," type != "," type ","LibXML  xmlNewNs  null? ","LibXML  xmlSearchNs  null? "," parent  cstruct "]}," Nokogiri XML Node line":{"type":"method","name":"line","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Node native_write_to":{"type":"method","name":"native_write_to","children":[],"call":["LibXML  xmlSaveClose ","LibXML  xmlSaveTree "," cstruct ","LibXML  xmlSaveToIO ","IoCallbacks  writer "," set_xml_tree_indent_string "," set_xml_indent_tree_output "]}," Nokogiri XML Node path":{"type":"method","name":"path","children":[],"call":["LibXML  xmlFree ","path_ptr read_string ","path_ptr null? ","LibXML  xmlGetNodePath "," cstruct ","LibXML  xmlGetNodePath  read_string ","LibXML  xmlGetNodePath  null? "]}," Nokogiri XML Node node_name":{"type":"method","name":"node_name","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Node node_name=":{"type":"method","name":"node_name=","children":[],"call":["LibXML  xmlNodeSetName "," cstruct "]}," Nokogiri XML Node parent":{"type":"method","name":"parent","children":[],"call":[" cstruct_node_from "]}," Nokogiri XML Node content":{"type":"method","name":"content","children":[],"call":["LibXML  xmlFree ","content_ptr read_string ","content_ptr null? ","LibXML  xmlNodeGetContent "," cstruct ","content_ptr read_string _ptr read_string ","LibXML  xmlNodeGetContent  read_string ","content_ptr read_string _ptr null? ","LibXML  xmlNodeGetContent  null? "]}," Nokogiri XML Node native_content=":{"type":"method","name":"native_content=","children":[],"call":["LibXML  xmlNodeSetContent "," cstruct "," cstruct keep_reference_from_document! ","LibXML  xmlUnlinkNode ","child cstruct ","child cstruct [] ","Node  wrap ","child_ptr null? ! ","child_ptr null? "," cstruct [] ","Node  wrap  cstruct ","Node  wrap  cstruct [] ","Node  wrap _ptr null? ! "," cstruct []  null? ! ","Node  wrap _ptr null? "," cstruct []  null? "]}," Nokogiri XML Node node_type":{"type":"method","name":"node_type","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Node namespace_definitions":{"type":"method","name":"namespace_definitions","children":[],"call":["ns cstruct [] ","ns cstruct ","list << ","Namespace  wrap "," cstruct document "," cstruct ","ns_ptr null? ! ","ns_ptr null? "," cstruct [] ","Namespace  wrap  cstruct [] ","Namespace  wrap  cstruct ","ns cstruct []  null? ! "," cstruct []  null? ! ","Namespace  wrap _ptr null? ! ","ns cstruct []  null? "," cstruct []  null? ","Namespace  wrap _ptr null? "]}," Nokogiri XML Node namespace":{"type":"method","name":"namespace","children":[],"call":["Namespace  wrap "," cstruct [] "," cstruct "," cstruct document "," cstruct [] null? "]}," Nokogiri XML Node attribute_nodes":{"type":"method","name":"attribute_nodes","children":[],"call":["prop cstruct [] ","prop cstruct ","attr << ","Node  wrap ","prop_cstruct null? ! ","prop_cstruct null? "," cstruct [] "," cstruct ","Node  node_properties ","Node  wrap  cstruct [] ","Node  wrap  cstruct ","prop cstruct []  null? ! "," cstruct []  null? ! ","Node  wrap _cstruct null? ! ","prop cstruct []  null? "," cstruct []  null? ","Node  wrap _cstruct null? ","Node  node_Node  wrap erties "]}," Nokogiri XML Node attribute_with_ns":{"type":"method","name":"attribute_with_ns","children":[],"call":["Node  wrap ","prop null? ","LibXML  xmlHasNsProp ","namespace to_s ","namespace nil? ","name to_s "," cstruct ","LibXML  xmlHasNsProp  null? "]}," Nokogiri XML Node attribute":{"type":"method","name":"attribute","children":[],"call":[" raise ","x name == ","x name "," attribute_nodes find "," attribute_nodes "]}," Nokogiri XML Node set_namespace":{"type":"method","name":"set_namespace","children":[],"call":["LibXML  xmlSetNs ","namespace cstruct "," cstruct "]}," Nokogiri XML Node get":{"type":"method","name":"get","children":[],"call":["LibXML  xmlFree ","propstr read_string ","propstr null? ","LibXML  xmlGetProp ","attribute to_s "," cstruct ","LibXML  xmlGetProp  read_string ","LibXML  xmlGetProp  null? "]}," Nokogiri XML Node namespaced_key?":{"type":"method","name":"namespaced_key?","children":[],"call":["prop null? ","LibXML  xmlHasNsProp ","namespace to_s ","namespace nil? ","attribute to_s "," cstruct ","prop null? ! ","LibXML  xmlHasNsProp  null? ","LibXML  xmlHasNsProp  null? ! "]}," Nokogiri XML Node key?":{"type":"method","name":"key?","children":[],"call":["(lvasgn :prop\n  (send\n    (const nil :LibXML) :xmlHasProp\n    (send nil :cstruct)\n    (send\n      (lvar :attribute) :to_s))) null? ! ","(lvasgn :prop\n  (send\n    (const nil :LibXML) :xmlHasProp\n    (send nil :cstruct)\n    (send\n      (lvar :attribute) :to_s))) null? ","LibXML  xmlHasProp ","attribute to_s "," cstruct ","(lvasgn :LibXML  xmlHasProp \n  (send\n    (const nil :LibXML) :xmlHasProp\n    (send nil :cstruct)\n    (send\n      (lvar :attribute) :to_s))) null? ! ","(lvasgn :LibXML  xmlHasProp \n  (send\n    (const nil :LibXML) :xmlHasProp\n    (send nil :cstruct)\n    (send\n      (lvar :attribute) :to_s))) null? "]}," Nokogiri XML Node child":{"type":"method","name":"child","children":[],"call":["Node  wrap ","(lvasgn :val\n  (send\n    (send nil :cstruct) :[]\n    (sym :children))) null? "," cstruct [] "," cstruct ","(lvasgn : cstruct [] \n  (send\n    (send nil :cstruct) :[]\n    (sym :children))) null? "]}," Nokogiri XML Node replace_with_node":{"type":"method","name":"replace_with_node","children":[],"call":["Node  send ","new_node cstruct ","LibXML  xmlReplaceNode "," cstruct "]}," Nokogiri XML Node previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":[" cstruct_node_from "]}," Nokogiri XML Node next_sibling":{"type":"method","name":"next_sibling","children":[],"call":[" cstruct_node_from "]}," Nokogiri XML Node blank?":{"type":"method","name":"blank?","children":[],"call":["LibXML  xmlIsBlankNode == ","LibXML  xmlIsBlankNode "," cstruct "]}," Nokogiri XML Node unlink":{"type":"method","name":"unlink","children":[],"call":[" cstruct keep_reference_from_document! "," cstruct ","LibXML  xmlUnlinkNode "]}," Nokogiri XML Node dup":{"type":"method","name":"dup","children":[],"call":["Node  wrap "," class ","dup_ptr null? ","LibXML  xmlDocCopyNode "," cstruct document "," cstruct ","LibXML  xmlDocCopyNode  null? "]}," Nokogiri XML Node internal_subset":{"type":"method","name":"internal_subset","children":[],"call":["Node  wrap ","dtd null? ","LibXML  xmlGetIntSubset "," cstruct document "," cstruct "," cstruct [] null? "," cstruct [] ","LibXML  xmlGetIntSubset  null? "," cstruct  cstruct document ument "]}," Nokogiri XML Node encode_special_chars":{"type":"method","name":"encode_special_chars","children":[],"call":["LibXML  xmlFree ","char_ptr read_string ","LibXML  xmlEncodeSpecialChars "," [] ","LibXML  xmlEncodeSpecialChars  read_string "]}," Nokogiri XML Node pointer_id":{"type":"method","name":"pointer_id","children":[],"call":[" cstruct pointer "," cstruct "]}," Nokogiri XML Namespace wrap":{"type":"method","name":"wrap","children":[],"call":["ns cstruct ruby_node= ","ns cstruct ","ns cstruct= ","ns document= ","document ruby_doc ","Nokogiri XML Namespace  allocate ","ruby_node nil? ","node_struct ruby_node ","LibXML XmlNs  new ","node_struct null? ","node_struct is_a? ","cache << ","ns document instance_variable_get ","ns document ","Nokogiri XML Namespace  allocate  cstruct ruby_node= ","ns cstruct node_struct ruby_node = ","Nokogiri XML Namespace  allocate  cstruct ","Nokogiri XML Namespace  allocate  cstruct= ","Nokogiri XML Namespace  allocate  document= ","node_struct ruby_node  nil? ","node_struct node_struct ruby_node  ","LibXML XmlNs  new  ruby_node ","LibXML XmlNs  new  null? ","LibXML XmlNs  new  is_a? ","ns document instance_variable_get  << ","Nokogiri XML Namespace  allocate  document iNokogiri XML Namespace  allocate tance_variable_get ","Nokogiri XML Namespace  allocate  document "]}," Nokogiri XML Namespace href":{"type":"method","name":"href","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] nil? "]}," Nokogiri XML Namespace prefix":{"type":"method","name":"prefix","children":[],"call":[" cstruct [] "," cstruct "," cstruct [] nil? "]}," Nokogiri XML EntityReference new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML DTD internal_attributes":{"type":"method","name":"internal_attributes","children":[],"call":["LibXML  xmlHashScan ","ahash []= ","Node  wrap "," lambda ","attr_ptr null? "," cstruct [] ","attr_name to_sym "," cstruct "," cstruct []  null? "]}," Nokogiri XML DTD notations":{"type":"method","name":"notations","children":[],"call":["LibXML  xmlHashScan ","ahash []= ","Notation  new ","notation_cstruct [] ","LibXML XmlNotation  new "," lambda ","attr_ptr null? "," cstruct [] "," cstruct ","LibXML XmlNotation  new  [] "," cstruct []  null? "]}," Nokogiri XML DTD entities":{"type":"method","name":"entities","children":[],"call":[" internal_attributes "]}," Nokogiri XML DTD elements":{"type":"method","name":"elements","children":[],"call":[" internal_attributes "]}," Nokogiri XML DocumentFragment new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML Document wrap_with_error_handling":{"type":"method","name":"wrap_with_error_handling","children":[],"call":["document errors= "," wrap "," raise ","SyntaxError  wrap ","LibXML  xmlGetLastError ","ptr null? ","LibXML  xmlSetStructuredErrorFunc ","SyntaxError  error_array_pusher ","LibXML  xmlResetLastError ","LibXML  xmlInitParser "," wrap  errors= ","document LibXML  xmlGetLastError s= ","SyntaxError  LibXML  xmlGetLastError _array_pusher "]}," Nokogiri XML Document new":{"type":"method","name":"new","children":[],"call":["doc send "," wrap ","LibXML  xmlNewDoc ","args first "," wrap  send "]}," Nokogiri XML Document dup":{"type":"method","name":"dup","children":[],"call":[" class wrap "," class ","cstruct []= "," type ","LibXML XmlDocumentCast  new ","dup_ptr null? ","LibXML  xmlCopyDoc "," cstruct ","LibXML XmlDocumentCast  new  []= ","LibXML  xmlCopyDoc  null? "," LibXML XmlDocumentCast  new  "]}," Nokogiri XML Document read_memory":{"type":"method","name":"read_memory","children":[],"call":[]}," Nokogiri XML Document read_io":{"type":"method","name":"read_io","children":[],"call":[]}," Nokogiri XML Document encoding":{"type":"method","name":"encoding","children":[],"call":[" cstruct [] read_string "," cstruct [] "," cstruct ","ptr read_string ","ptr null? "," cstruct []  read_string "," cstruct []  null? "]}," Nokogiri XML Document encoding=":{"type":"method","name":"encoding=","children":[],"call":[" cstruct []= ","LibXML  xmlStrdup "," cstruct "]}," Nokogiri XML Document root":{"type":"method","name":"root","children":[],"call":["Node  wrap ","LibXML XmlNode  new ","ptr null? ","LibXML  xmlDocGetRootElement "," cstruct ","LibXML  xmlDocGetRootElement  null? "]}," Nokogiri XML Document root=":{"type":"method","name":"root=","children":[],"call":["LibXML  xmlDocSetRootElement ","node cstruct "," cstruct ","LibXML XmlNode  new keep_reference_from_document! ","LibXML XmlNode  new ","old_root_ptr null? ! ","old_root_ptr null? ","new_root cstruct ","Node  wrap "," raise "," RuntimeError ","new_root_ptr null? ","LibXML  xmlDocCopyNode ","LibXML  xmlDocGetRootElement ","new_root cstruct [] != "," cstruct [] ","new_root cstruct [] ","old_root cstruct keep_reference_from_document! ","old_root cstruct ","LibXML  xmlUnlinkNode ","new_root nil? ","LibXML  xmlDocGetRootElement  null? ! ","Node  wrap _ptr null? ! ","LibXML  xmlDocGetRootElement  null? ","Node  wrap _ptr null? ","Node  wrap  cstruct ","LibXML  xmlDocCopyNode  null? ","Node  wrap  cstruct [] != ","Node  wrap  cstruct [] ","Node  wrap  cstruct keep_reference_from_document! ","Node  wrap  nil? "]}," Nokogiri XML Document url":{"type":"method","name":"url","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Comment new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML CDATA new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri XML Attr value=":{"type":"method","name":"value=","children":[],"call":["LibXML  xmlFree ","child cstruct [] ","child cstruct "," cstruct []= "," cstruct ","child cstruct []= "," cstruct [] ","Node  wrap ","child_cstruct null? ! ","child_cstruct null? ","LibXML  xmlStringGetNodeList ","LibXML  xmlEncodeEntitiesReentrant ","LibXML  xmlFreeNodeList "," cstruct [] null? ","Node  wrap  cstruct [] ","Node  wrap  cstruct ","Node  wrap  cstruct []= ","child cstruct []  null? ! "," cstruct []  null? ! ","Node  wrap _cstruct null? ! ","child cstruct []  null? "," cstruct []  null? ","Node  wrap _cstruct null? "]}," Nokogiri XML Attr new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri LibXML XsltStylesheet release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlXpathParserContext context":{"type":"method","name":"context","children":[],"call":["LibXML XmlXpathContextCast  new "," [] ","LibXML XmlX [] athContextCast  new "]}," Nokogiri LibXML XmlXpathObject release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlXpathContext release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlXpathContextMixin doc":{"type":"method","name":"doc","children":[],"call":["LibXML XmlDocumentCast  new "," [] "]}," Nokogiri LibXML XmlXpathContextMixin node":{"type":"method","name":"node","children":[],"call":["LibXML XmlNode  new "," [] "]}," Nokogiri LibXML XmlXpathContextMixin included":{"type":"method","name":"included","children":[],"call":[]}," Nokogiri LibXML XmlTextReader release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlSyntaxError release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlSyntaxError allocate":{"type":"method","name":"allocate","children":[],"call":[]}," Nokogiri LibXML XmlSchema release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlSaxPushParserContext release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlSaxHandler release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlSaxHandler allocate":{"type":"method","name":"allocate","children":[],"call":[]}," Nokogiri LibXML XmlRelaxNG release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlNodeSet release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlNodeSetMixin nodeTab=":{"type":"method","name":"nodeTab=","children":[],"call":[" [] write_array_of_pointer "," [] "]}," Nokogiri LibXML XmlNodeSetMixin nodeTab":{"type":"method","name":"nodeTab","children":[],"call":[" [] read_array_of_pointer "," [] "," [] null? "]}," Nokogiri LibXML XmlNodeSetMixin nodeAt":{"type":"method","name":"nodeAt","children":[],"call":[" [] get_pointer ","LibXML  pointer_offset "," [] "]}," Nokogiri LibXML XmlNodeSetMixin document":{"type":"method","name":"document","children":[],"call":["LibXML XmlDocumentCast  new ","p null? "," [] "," []  null? "]}," Nokogiri LibXML XmlNodeSetMixin included":{"type":"method","name":"included","children":[],"call":[]}," Nokogiri LibXML XmlDocument release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlDocument initialize":{"type":"method","name":"initialize","children":[],"call":[" alloc_tuple "]}," Nokogiri LibXML XmlDocumentMixin alloc_tuple":{"type":"method","name":"alloc_tuple","children":[],"call":[" [] put_pointer ","LibXML  xmlXPathNodeSetCreate ","FFI  type_size "," [] "," []= ","LibXML  calloc ","LibXML  pointer_offset "]}," Nokogiri LibXML XmlDocumentMixin node_set":{"type":"method","name":"node_set","children":[],"call":["LibXML XmlNodeSetCast  new "," [] get_pointer ","FFI  type_size "," [] "]}," Nokogiri LibXML XmlDocumentMixin ruby_doc=":{"type":"method","name":"ruby_doc=","children":[],"call":[" [] put_long ","object object_id "," [] ","Nokogiri WeakBucket  set_object "]}," Nokogiri LibXML XmlDocumentMixin ruby_doc":{"type":"method","name":"ruby_doc","children":[],"call":["ObjectSpace  _id2ref ","ptr get_long ","ptr null? "," [] ","Nokogiri WeakBucket  get_object "," []  get_long "," []  null? "]}," Nokogiri LibXML XmlDocumentMixin document":{"type":"method","name":"document","children":[],"call":["LibXML XmlDocumentCast  new ","p null? "," [] "," []  null? "]}," Nokogiri LibXML XmlDocumentMixin included":{"type":"method","name":"included","children":[],"call":[]}," Nokogiri LibXML XmlBuffer release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML XmlAlloc release":{"type":"method","name":"release","children":[],"call":[]}," Nokogiri LibXML CommonNode keep_reference_from_document!":{"type":"method","name":"keep_reference_from_document!","children":[],"call":["LibXML  xmlXPathNodeSetAdd ","doc node_set "," raise "," document ","doc unlinked_nodes "," document  node_set ","  document ument "," document  unlinked_nodes "]}," Nokogiri LibXML CommonNode ruby_node=":{"type":"method","name":"ruby_node=","children":[],"call":[" []= ","object object_id ","Nokogiri WeakBucket  set_object "]}," Nokogiri LibXML CommonNode ruby_node":{"type":"method","name":"ruby_node","children":[],"call":["ObjectSpace  _id2ref "," [] "," [] != ","Nokogiri WeakBucket  get_object "]}," Nokogiri LibXML CommonNode document":{"type":"method","name":"document","children":[],"call":["LibXML XmlDocumentCast  new ","p null? "," [] "," []  null? "]}," Nokogiri LibXML pointer_offset":{"type":"method","name":"pointer_offset","children":[],"call":[]}," Nokogiri LibXML xmlFree":{"type":"method","name":"xmlFree","children":[],"call":[]}," Nokogiri LibXML xmlXPathReturnNumber":{"type":"method","name":"xmlXPathReturnNumber","children":[],"call":[" valuePush "," xmlXPathNewFloat "]}," Nokogiri LibXML xmlXPathReturnString":{"type":"method","name":"xmlXPathReturnString","children":[],"call":[" valuePush "," xmlXPathWrapString "]}," Nokogiri LibXML xmlXPathReturnFalse":{"type":"method","name":"xmlXPathReturnFalse","children":[],"call":[" valuePush "," xmlXPathNewBoolean "]}," Nokogiri LibXML xmlXPathReturnTrue":{"type":"method","name":"xmlXPathReturnTrue","children":[],"call":[" valuePush "," xmlXPathNewBoolean "]}," Nokogiri LibXML xmlXPathReturnNodeSet":{"type":"method","name":"xmlXPathReturnNodeSet","children":[],"call":[" valuePush "," xmlXPathWrapNodeSet "]}," Nokogiri IoCallbacks writer":{"type":"method","name":"writer","children":[],"call":["io write "," lambda "]}," Nokogiri IoCallbacks reader":{"type":"method","name":"reader","children":[],"call":["string length ","buffer put_bytes ","string nil? ","io read "," lambda ","rcode < ","FFI IO  native_read ","io read  length ","io read  nil? ","FFI IO  native_read  < "]}," Nokogiri HTML SAX Parser native_parse_memory":{"type":"method","name":"native_parse_memory","children":[],"call":["LibXML  xmlFreeDoc ","LibXML  htmlSAXParseDoc "," cstruct "]}," Nokogiri HTML SAX Parser native_parse_file":{"type":"method","name":"native_parse_file","children":[],"call":["LibXML  xmlFreeDoc ","LibXML  htmlSAXParseFile "," cstruct "]}," Nokogiri HTML EntityLookup get":{"type":"method","name":"get","children":[],"call":["EntityDescription  new ","cstruct [] ","LibXML HtmlEntityDesc  new ","ptr null? ","LibXML  htmlEntityLookup ","key to_s ","LibXML HtmlEntityDesc  new  [] ","LibXML  htmlEntityLookup  null? "]}," Nokogiri HTML ElementDescription get_string_array_from":{"type":"method","name":"get_string_array_from","children":[],"call":["list << ","ptr read_string ","ptr null? ! ","ptr null? "," cstruct [] get_pointer ","j * ","FFI  type_size "," cstruct [] "," cstruct "," cstruct [] null? ","ptr get_array_of_string "," cstruct [] get_pointer  read_string "," cstruct []  read_string "," cstruct [] get_pointer  null? ! "," cstruct []  null? ! "," cstruct [] get_pointer  null? "," cstruct []  null? "," cstruct [] get_pointer  get_array_of_string "," cstruct []  get_array_of_string "]}," Nokogiri HTML ElementDescription []":{"type":"method","name":"[]","children":[],"call":[]}," Nokogiri HTML ElementDescription name":{"type":"method","name":"name","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri HTML ElementDescription empty?":{"type":"method","name":"empty?","children":[],"call":[" cstruct [] != "," cstruct [] "," cstruct "]}," Nokogiri HTML ElementDescription inline?":{"type":"method","name":"inline?","children":[],"call":[" cstruct [] != "," cstruct [] "," cstruct "]}," Nokogiri HTML ElementDescription sub_elements":{"type":"method","name":"sub_elements","children":[],"call":[" get_string_array_from "]}," Nokogiri HTML Document read_memory":{"type":"method","name":"read_memory","children":[],"call":[]}," Nokogiri HTML Document read_io":{"type":"method","name":"read_io","children":[],"call":[]}," Nokogiri HTML Document new":{"type":"method","name":"new","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_63":{"type":"method","name":"_reduce_63","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_61":{"type":"method","name":"_reduce_61","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_56":{"type":"method","name":"_reduce_56","children":[],"call":["val [] ","val first "]}," Nokogiri CSS GeneratedParser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":["val [] ","val first ","Node  new "]}," Nokogiri CSS GeneratedParser _reduce_53":{"type":"method","name":"_reduce_53","children":[],"call":["val [] ","val first ","Node  new "]}," Nokogiri CSS GeneratedParser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_47":{"type":"method","name":"_reduce_47","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":["Node  new ","val [] "," raise ","val << ","val [] == "]}," Nokogiri CSS GeneratedParser _reduce_40":{"type":"method","name":"_reduce_40","children":[],"call":["Node  new ","val [] "," raise ","val << ","val [] == ","val unshift ","val []= "]}," Nokogiri CSS GeneratedParser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":[" raise ","val [] ","Node  new ","val << ","val [] == ","val unshift ","val []= "]}," Nokogiri CSS GeneratedParser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[" raise ","val [] ","Node  new ","val unshift ","val []= ","val [] == "]}," Nokogiri CSS GeneratedParser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[" raise ","val [] ","Node  new ","val [] == "]}," Nokogiri CSS GeneratedParser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":["Node  new ","val [] == ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":["val last ","val first "]}," Nokogiri CSS GeneratedParser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":["val last ","val first ","Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip "]}," Nokogiri CSS GeneratedParser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":["val last ","val first ","Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip "]}," Nokogiri CSS GeneratedParser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first "]}," Nokogiri CSS GeneratedParser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first "]}," Nokogiri CSS GeneratedParser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":["Node  new ","(send\n  (send\n    (lvar :val) :first) :strip) flatten ","val [] ","val first strip ","val first "]}," Nokogiri CSS GeneratedParser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":["Node  new ","val first strip ","val first ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":["Node  new ","val [] ","(send\n  (lvar :val) :[]\n  (int 1)) + "]}," Nokogiri CSS GeneratedParser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":["Node  new ","(send\n  (lvar :val) :[]\n  (int 1)) + ","val [] ","(send\n  (const nil :Node) :new\n  (sym :ELEMENT_NAME)\n  (array\n    (send\n      (lvar :val) :[]\n      (int 1)))) + "]}," Nokogiri CSS GeneratedParser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":["Node  new ","(send\n  (const nil :Node) :new\n  (sym :ELEMENT_NAME)\n  (array\n    (send\n      (lvar :val) :[]\n      (int 1)))) + ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":["val [] ","Node  new "]}," Nokogiri CSS GeneratedParser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":["Node  new ","val first ","@namespaces key? ","@val first spaces key? "]}," Nokogiri CSS GeneratedParser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":["Node  new ","val first ","@namespaces key? ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","@val first spaces key? "]}," Nokogiri CSS GeneratedParser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":["Node  new ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","val first ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":["Node  new ","val last ","val first ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":["Node  new ","val first "]}," Nokogiri CSS GeneratedParser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":["Node  new ","val last ","val [] ","val first "]}," Nokogiri CSS GeneratedParser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":["Node  new ","val [] ","val first ","val [] nil? "]}," Nokogiri CSS GeneratedParser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_6":{"type":"method","name":"_reduce_6","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_5":{"type":"method","name":"_reduce_5","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":[]}," Nokogiri CSS GeneratedParser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["val flatten "]}," Nokogiri CSS GeneratedParser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":["(send\n  (lvar :val) :first) flatten ","val last ","val first "]}," Nokogiri XML SAX LegacyHandlers end_element_namespace":{"type":"method","name":"end_element_namespace","children":[],"call":["@document end_element ","(lvar :prefix) compact join ","(lvar :prefix) compact ","@document end_element_ns "," warn ","@document respond_to? "]}," Nokogiri XML SAX LegacyHandlers start_element_namespace":{"type":"method","name":"start_element_namespace","children":[],"call":["@document start_element ","(send\n  (lvar :ns) :map) + ","(send\n  (lvar :attrs) :map) flatten ","attr value ","(send\n  (lvar :attr) :prefix) compact join ","(send\n  (lvar :attr) :prefix) compact ","attr localname ","attr prefix ","attrs map ","(str \"xmlns\") compact join ","(str \"xmlns\") compact ","ns map ","(lvar :prefix) compact join ","(lvar :prefix) compact ","@document start_element_ns ","Hash  [] ","ns flatten ","attr_hash []= ","attrs each "," warn ","@document respond_to? ","attr local(lvar :prefix) compact join  "]}," Nokogiri XML FragmentHandler cdata_block":{"type":"method","name":"cdata_block","children":[],"call":["@stack last << ","Nokogiri XML CDATA  new ","@stack last ","CDATA  new "]}," Nokogiri XML FragmentHandler comment":{"type":"method","name":"comment","children":[],"call":["@stack last << ","Nokogiri XML Comment  new ","@stack last ","Comment  new "]}," Nokogiri XML Schema from_document":{"type":"method","name":"from_document","children":[],"call":[]}," Nokogiri XML RelaxNG from_document":{"type":"method","name":"from_document","children":[],"call":[]}," Nokogiri XML DTD validate":{"type":"method","name":"validate","children":[],"call":["LibXML  xmlFreeValidCtxt ","LibXML  xmlSetStructuredErrorFunc ","LibXML  xmlValidateDtd "," cstruct ","document cstruct ","SyntaxError  error_array_pusher ","LibXML  xmlNewValidCtxt "]}," Nokogiri IoCallbacks ffi_io_native_reader":{"type":"method","name":"ffi_io_native_reader","children":[],"call":["rcode < ","FFI IO  native_read "," lambda "," plain_old_reader ","io is_a? ","FFI IO  native_read  < "]}," Nokogiri IoCallbacks plain_old_reader":{"type":"method","name":"plain_old_reader","children":[],"call":["string length ","buffer put_bytes ","string nil? ","io read "," lambda ","io read  length ","io read  nil? "]}," Nokogiri XML Node node_properties":{"type":"method","name":"node_properties","children":[],"call":["prop cstruct [] ","prop cstruct ","attr << ","Node  wrap ","prop_cstruct null? ! ","prop_cstruct null? ","cstruct [] ","Node  wrap  cstruct [] ","Node  wrap  cstruct ","prop cstruct []  null? ! ","cstruct []  null? ! ","Node  wrap _cstruct null? ! ","prop cstruct []  null? ","cstruct []  null? ","Node  wrap _cstruct null? "]}," Nokogiri LibXML XmlDocumentMixin unlinked_nodes":{"type":"method","name":"unlinked_nodes","children":[],"call":["LibXML XmlNodeSetCast  new "," [] get_pointer ","FFI  type_size "," [] ","LibXML  pointer_offset "]}," Nokogiri XML SyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":[" message= "," cstruct []= ","FFI MemoryPointer  from_string "," cstruct "," cstruct= ","LibXML XmlSyntaxError  new ","LibXML XmlSyntaxError  allocate ","LibXML  xmlStrdup "]}," Nokogiri XML Node at_css":{"type":"method","name":"at_css","children":[],"call":[" css first "," css "]}," Nokogiri XML Node at_xpath":{"type":"method","name":"at_xpath","children":[],"call":[" xpath first "," xpath "]}," Nokogiri XML SyntaxError message=":{"type":"method","name":"message=","children":[],"call":[" cstruct []= "," cstruct ","LibXML  xmlFree "," cstruct [] "," cstruct [] null? ","LibXML  xmlStrdup "]}," Nokogiri XML SAX ParserContext replace_entities":{"type":"method","name":"replace_entities","children":[],"call":[" cstruct [] == "," cstruct [] "," cstruct "]}," Nokogiri XML SAX ParserContext replace_entities=":{"type":"method","name":"replace_entities=","children":[],"call":[" cstruct []= "," cstruct "]}," Nokogiri XML SAX ParserContext parse_with":{"type":"method","name":"parse_with","children":[],"call":["LibXML  xmlFreeDoc "," cstruct [] "," cstruct "," cstruct [] null? "," cstruct []= ","LibXML  send ","sax_handler instance_variable_set ","sax_handler cstruct "," raise ","XML SAX Parser  === ","sax_handler cstruct _handler instance_variable_set ","sax_handler cstruct _handler cstruct "]}," Nokogiri XML SAX ParserContext file":{"type":"method","name":"file","children":[],"call":[]}," Nokogiri XML SAX ParserContext io":{"type":"method","name":"io","children":[],"call":[]}," Nokogiri XML SAX ParserContext memory":{"type":"method","name":"memory","children":[],"call":[]}," Nokogiri XML Reader node_type":{"type":"method","name":"node_type","children":[],"call":["LibXML  xmlTextReaderNodeType "," cstruct "]}," Nokogiri XML Reader outer_xml":{"type":"method","name":"outer_xml","children":[],"call":["LibXML  xmlFree ","string_ptr read_string ","string_ptr null? ","LibXML  xmlTextReaderReadOuterXml "," cstruct ","string_ptr read_string _ptr read_string_ptr read_string  ","LibXML  xmlTextReaderReadOuterXml  read_string ","string_ptr read_string _ptr null? ","LibXML  xmlTextReaderReadOuterXml  null? "]}," Nokogiri XML Reader inner_xml":{"type":"method","name":"inner_xml","children":[],"call":["LibXML  xmlFree ","string_ptr read_string ","string_ptr null? ","LibXML  xmlTextReaderReadInnerXml "," cstruct ","string_ptr read_string _ptr read_string_ptr read_string  ","LibXML  xmlTextReaderReadInnerXml  read_string ","string_ptr read_string _ptr null? ","LibXML  xmlTextReaderReadInnerXml  null? "]}," Nokogiri XML Reader attr_nodes":{"type":"method","name":"attr_nodes","children":[],"call":["Node  node_properties ","LibXML XmlNode  new ","ptr null? ","LibXML  xmlTextReaderExpand "," cstruct "," attributes? ","LibXML  xmlTextReaderExpand  null? "]}," Nokogiri XML NodeSet |":{"type":"method","name":"|","children":[],"call":["new_set document= "," document ","NodeSet  wrap ","LibXML  xmlXPathNodeSetMerge ","node_set cstruct "," cstruct "," raise ","node_set is_a? ","NodeSet  wrap  document= "]}," Nokogiri XML Node create_external_subset":{"type":"method","name":"create_external_subset","children":[],"call":["Node  wrap ","dtd_ptr null? ","LibXML  xmlNewDtd "," cstruct document "," cstruct "," raise "," external_subset ","LibXML  xmlNewDtd  null? "," cstruct  cstruct document ument "]}," Nokogiri XML Node create_internal_subset":{"type":"method","name":"create_internal_subset","children":[],"call":["Node  wrap ","dtd_ptr null? ","LibXML  xmlCreateIntSubset "," cstruct document "," cstruct "," raise "," internal_subset ","LibXML  xmlCreateIntSubset  null? "," cstruct  cstruct document ument "]}," Nokogiri XML Node external_subset":{"type":"method","name":"external_subset","children":[],"call":["Node  wrap ","doc [] ","doc [] null? "," cstruct document "," cstruct "," cstruct document  [] "," cstruct document  [] null? "," cstruct  cstruct document ument "]}," Nokogiri XML EntityDecl original_content":{"type":"method","name":"original_content","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML EntityDecl system_id":{"type":"method","name":"system_id","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML EntityDecl external_id":{"type":"method","name":"external_id","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML EntityDecl entity_type":{"type":"method","name":"entity_type","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML EntityDecl content":{"type":"method","name":"content","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementDecl content":{"type":"method","name":"content","children":[],"call":["ElementContent  wrap "," document "," cstruct [] "," cstruct "]}," Nokogiri XML ElementDecl prefix":{"type":"method","name":"prefix","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementDecl element_type":{"type":"method","name":"element_type","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementContent c2":{"type":"method","name":"c2","children":[],"call":[" class wrap "," document "," cstruct [] "," cstruct "," class "]}," Nokogiri XML ElementContent c1":{"type":"method","name":"c1","children":[],"call":[" class wrap "," document "," cstruct [] "," cstruct "," class "]}," Nokogiri XML ElementContent name":{"type":"method","name":"name","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementContent occur":{"type":"method","name":"occur","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementContent prefix":{"type":"method","name":"prefix","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementContent type":{"type":"method","name":"type","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML ElementContent wrap":{"type":"method","name":"wrap","children":[],"call":[]}," Nokogiri XML DTD external_id":{"type":"method","name":"external_id","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML DTD system_id":{"type":"method","name":"system_id","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Document recursively_remove_namespaces_from_node":{"type":"method","name":"recursively_remove_namespaces_from_node","children":[],"call":[" recursively_remove_namespaces_from_node ","node children each ","node children ","node cstruct []= ","node cstruct ","LibXML  xmlFreeNsList ","node cstruct [] ","node cstruct [] nil? ","prop_cstruct [] ","prop_cstruct []= ","prop_cstruct [] nil? ","LibXML XmlAttr  new ","prop_ptr null? ! ","prop_ptr null? ","LibXML XmlAttr  new  [] ","LibXML XmlAttr  new  []= ","LibXML XmlAttr  new  [] nil? ","prop_cstruct []  null? ! ","node cstruct []  null? ! ","prop_cstruct []  null? ","node cstruct []  null? "]}," Nokogiri XML Document remove_namespaces!":{"type":"method","name":"remove_namespaces!","children":[],"call":[" class recursively_remove_namespaces_from_node "," root "," class "]}," Nokogiri XML Document version":{"type":"method","name":"version","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML AttributeDecl default":{"type":"method","name":"default","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML AttributeDecl attribute_type":{"type":"method","name":"attribute_type","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML AttributeDecl enumeration":{"type":"method","name":"enumeration","children":[],"call":["LibXML XmlEnumeration  new ","head [] ","head [] null? ","list << "," loop "," cstruct [] "," cstruct "," cstruct [] null? ","LibXML XmlEnumeration  new  [] ","LibXML XmlEnumeration  new  [] null? "]}," Nokogiri HTML SAX ParserContext parse_with":{"type":"method","name":"parse_with","children":[],"call":[]}," Nokogiri HTML SAX ParserContext memory":{"type":"method","name":"memory","children":[],"call":[]}," Nokogiri HTML SAX ParserContext file":{"type":"method","name":"file","children":[],"call":[]}," Nokogiri XML Node verify_nodeishness":{"type":"method","name":"verify_nodeishness","children":[],"call":[]}," Nokogiri XML FragmentHandler prepare_for_regex":{"type":"method","name":"prepare_for_regex","children":[],"call":["string slice ","string index "]}," Nokogiri XML SyntaxError initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["LibXML  xmlCopyError "," cstruct ","other cstruct "," raise ","other is_a? "]}," Nokogiri XML SAX PushParser options=":{"type":"method","name":"options=","children":[],"call":[" raise ","LibXML  xmlCtxtUseOptions != ","LibXML  xmlCtxtUseOptions "," cstruct "]}," Nokogiri XML SAX PushParser options":{"type":"method","name":"options","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri XML Node add_previous_sibling_node":{"type":"method","name":"add_previous_sibling_node","children":[],"call":["LibXML  xmlAddPrevSibling ","Node  reparent_node_with "]}," Nokogiri XML Node add_next_sibling_node":{"type":"method","name":"add_next_sibling_node","children":[],"call":["LibXML  xmlAddNextSibling ","Node  reparent_node_with "]}," Nokogiri XML Node add_child_node":{"type":"method","name":"add_child_node","children":[],"call":["LibXML  xmlAddChild ","Node  reparent_node_with "]}," Nokogiri XML Node replace_node":{"type":"method","name":"replace_node","children":[],"call":["retval == ","self_cstruct pointer ","LibXML  xmlReplaceNode ","Node  reparent_node_with ","LibXML XmlNode  new ","LibXML  xmlTextMerge ","retval [] ","LibXML XmlNode  new [] == ","LibXML XmlNode  new [] ","retval [] == ","retval is_a? ","pivot_struct pointer ","retval [] null? ! ","retval [] null? ","LibXML  xmlReplaceNode  == ","LibXML XmlNode  new  == ","LibXML  xmlReplaceNode  [] ","LibXML XmlNode  new  [] ","LibXML  xmlReplaceNode  [] == ","LibXML XmlNode  new  [] == ","LibXML  xmlReplaceNode  is_a? ","LibXML XmlNode  new  is_a? ","LibXML  xmlReplaceNode  [] null? ! ","LibXML XmlNode  new  [] null? ! ","LibXML  xmlReplaceNode  [] null? ","LibXML XmlNode  new  [] null? "]}," Nokogiri XML Node previous_element":{"type":"method","name":"previous_element","children":[],"call":["Node  wrap ","sibling_ptr null? ","sibling_cstruct [] ","sibling_cstruct [] == ","LibXML XmlNode  new ","sibling_ptr null? ! "," cstruct [] "," cstruct ","sibling_cstruct []  null? "," cstruct []  null? ","LibXML XmlNode  new  [] ","LibXML XmlNode  new  [] == ","sibling_cstruct []  null? ! "," cstruct []  null? ! "]}," Nokogiri XML Node next_element":{"type":"method","name":"next_element","children":[],"call":["Node  wrap ","sibling_ptr null? ","sibling_cstruct [] ","sibling_cstruct [] == ","LibXML XmlNode  new ","sibling_ptr null? ! "," cstruct [] "," cstruct ","LibXML  xmlNextElementSibling ","LibXML  xmlNextElementSiblingHack ","sibling_cstruct []  null? "," cstruct []  null? ","LibXML  xmlNextElementSibling  null? ","LibXML XmlNode  new  [] ","LibXML XmlNode  new  [] == ","sibling_cstruct []  null? ! "," cstruct []  null? ! ","LibXML  xmlNextElementSibling  null? ! "]}," Nokogiri EncodingHandler name":{"type":"method","name":"name","children":[],"call":[" cstruct [] "," cstruct "]}," Nokogiri EncodingHandler wrap":{"type":"method","name":"wrap","children":[],"call":["eh cstruct= ","Nokogiri EncodingHandler  allocate ","LibXML XmlCharEncodingHandler  new ","Nokogiri EncodingHandler  allocate  cstruct= ","eh LibXML XmlCharEncodingHandler  new = "]}," Nokogiri EncodingHandler clear_aliases!":{"type":"method","name":"clear_aliases!","children":[],"call":["LibXML  xmlCleanupEncodingAliases "]}," Nokogiri EncodingHandler alias":{"type":"method","name":"alias","children":[],"call":["LibXML  xmlAddEncodingAlias "]}," Nokogiri EncodingHandler delete":{"type":"method","name":"delete","children":[],"call":["LibXML  xmlDelEncodingAlias != ","LibXML  xmlDelEncodingAlias "]}," Nokogiri EncodingHandler []":{"type":"method","name":"[]","children":[],"call":[" wrap ","handler null? ","LibXML  xmlFindCharEncodingHandler ","LibXML  xmlFindCharEncodingHandler  null? "]}," Nokogiri CSS GeneratedParser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":["val [] ","val first "]}," Nokogiri CSS GeneratedParser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_42":{"type":"method","name":"_reduce_42","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_34":{"type":"method","name":"_reduce_34","children":[],"call":["val last ","val first "]}," Nokogiri XML Schema validate_file":{"type":"method","name":"validate_file","children":[],"call":["LibXML  xmlSchemaFreeValidCtxt ","LibXML  xmlSchemaValidateFile ","LibXML  xmlSchemaSetValidStructuredErrors ","SyntaxError  error_array_pusher ","Nokogiri  is_2_6_16? "," raise ","RuntimeError  new ","ctx null? ","LibXML  xmlSchemaNewValidCtxt "," cstruct ","LibXML  xmlSchemaNewValidCtxt  null? "]}," Nokogiri XML Reader base_uri":{"type":"method","name":"base_uri","children":[],"call":["val read_string ","val null? ","LibXML  xmlTextReaderConstBaseUri "," cstruct ","LibXML  xmlTextReaderConstBaseUri  read_string ","LibXML  xmlTextReaderConstBaseUri  null? "]}," Nokogiri XML Node in_context":{"type":"method","name":"in_context","children":[],"call":["list cstruct [] ","list cstruct ","LibXML  xmlXPathNodeSetAddUnique ","set cstruct ","Node  wrap ","list_ptr null? ! ","list_ptr null? ","list_memory get_pointer ","NodeSet  wrap "," document ","LibXML  xmlXPathNodeSetCreate ","LibXML  xmlSetStructuredErrorFunc ","LibXML  htmlHandleOmittedElem ","LibXML  xmlParseInNodeContext ","string length "," cstruct ","FFI MemoryPointer  new ","SyntaxError  error_array_pusher "," raise "," parent nil? "," parent "," document errors= ","child cstruct []= "," cstruct [] ","child cstruct ","child cstruct [] != ","child cstruct [] "," document children each "," document children ","Node  wrap  cstruct [] ","Node  wrap  cstruct ","NodeSet  wrap  cstruct ","list cstruct []  null? ! ","list_memory get_pointer  null? ! ","Node  wrap _ptr null? ! ","list cstruct []  null? ","list_memory get_pointer  null? ","Node  wrap _ptr null? ","Node  wrap _memory get_pointer ","FFI MemoryPointer  new  get_pointer "]}," Nokogiri XML Node namespace_scopes":{"type":"method","name":"namespace_scopes","children":[],"call":["LibXML  xmlFree ","list << ","Namespace  wrap "," cstruct document "," cstruct ","(lvasgn :ns_ptr\n  (send\n    (lvar :ns_list) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (send\n        (lvar :list) :length)))) null? ","ns_list get_pointer ","LibXML  pointer_offset ","list length ","ns_list null? ","LibXML  xmlGetNsList "," cstruct [] ","(lvasgn :ns_list get_pointer \n  (send\n    (lvar :ns_list) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (send\n        (lvar :list) :length)))) null? ","(lvasgn :ns_ptr\n  (send\n    (lvar :LibXML  xmlGetNsList ) :get_pointer\n    (send\n      (const nil :LibXML) :pointer_offset\n      (send\n        (lvar :list) :length)))) null? ","LibXML  xmlGetNsList  get_pointer ","LibXML  xmlGetNsList  null? "]}," Nokogiri XML Node last_element_child":{"type":"method","name":"last_element_child","children":[],"call":["Node  wrap ","element_child null? ","LibXML  xmlLastElementChild "," cstruct ","LibXML  xmlLastElementChildHack ","LibXML  xmlLastElementChild  null? "]}," Nokogiri XML Node first_element_child":{"type":"method","name":"first_element_child","children":[],"call":["Node  wrap ","element_child null? ","LibXML  xmlFirstElementChild "," cstruct ","LibXML  xmlFirstElementChildHack ","LibXML  xmlFirstElementChild  null? "]}," Nokogiri XML Node element_children":{"type":"method","name":"element_children","children":[],"call":["LibXML  xmlNextElementSibling ","child cstruct ","LibXML  xmlXPathNodeSetAddUnique ","set cstruct ","Node  wrap ","next_sibling null? ! ","next_sibling null? ","NodeSet  wrap "," document ","LibXML  xmlXPathNodeSetCreate ","NodeSet  new ","child null? ","LibXML  xmlFirstElementChild "," cstruct ","LibXML  xmlNextElementSiblingHack ","next_sibling nil? ! ","next_sibling nil? ","child nil? ","LibXML  xmlFirstElementChildHack ","Node  wrap  cstruct ","LibXML  xmlFirstElementChild  cstruct ","LibXML  xmlFirstElementChildHack  cstruct ","NodeSet  wrap  cstruct ","LibXML  xmlNextElementSibling  null? ! ","LibXML  xmlNextElementSiblingHack  null? ! ","LibXML  xmlNextElementSibling  null? ","LibXML  xmlNextElementSiblingHack  null? ","Node  wrap  null? ","LibXML  xmlFirstElementChild  null? ","LibXML  xmlFirstElementChildHack  null? ","LibXML  xmlNextElementSibling  nil? ! ","LibXML  xmlNextElementSiblingHack  nil? ! ","LibXML  xmlNextElementSibling  nil? ","LibXML  xmlNextElementSiblingHack  nil? ","Node  wrap  nil? ","LibXML  xmlFirstElementChild  nil? ","LibXML  xmlFirstElementChildHack  nil? "]}," Nokogiri XML Document create_entity":{"type":"method","name":"create_entity","children":[],"call":["Node  wrap ","LibXML XmlEntity  new "," raise ","SyntaxError  wrap ","LibXML  xmlGetLastError ","ptr null? ","LibXML  xmlAddDocEntity "," cstruct ","LibXML  xmlResetLastError ","LibXML  xmlAddDocEntity  null? "]}," Nokogiri WeakBucket set_object":{"type":"method","name":"set_object","children":[],"call":[]}," Nokogiri WeakBucket get_object":{"type":"method","name":"get_object","children":[],"call":[]}," Nokogiri WeakBucket initialize":{"type":"method","name":"initialize","children":[],"call":["Weakling IdHash  new "]}," Nokogiri LibXML XmlXpathContextMixin document":{"type":"method","name":"document","children":[],"call":["LibXML XmlDocumentCast  new ","p null? "," [] "," []  null? "]}," Nokogiri LibXML XmlDocumentMixin ruby_node_pointer=":{"type":"method","name":"ruby_node_pointer=","children":[],"call":[" [] put_long "," [] "]}," Nokogiri LibXML XmlDocumentMixin ruby_node_pointer":{"type":"method","name":"ruby_node_pointer","children":[],"call":["tuple get_long ","tuple null? "," [] "," []  get_long "," []  null? "]}," Nokogiri LibXML CommonNode keep_reference_from!":{"type":"method","name":"keep_reference_from!","children":[],"call":["LibXML  xmlXPathNodeSetAdd ","document unlinked_nodes "," raise "]}," Nokogiri LibXML CommonNode ruby_node_pointer=":{"type":"method","name":"ruby_node_pointer=","children":[],"call":[" []= "]}," Nokogiri LibXML CommonNode ruby_node_pointer":{"type":"method","name":"ruby_node_pointer","children":[],"call":[" [] "]}," Nokogiri XML NodeSet at_css":{"type":"method","name":"at_css","children":[],"call":[" css first "," css "]}," Nokogiri XML NodeSet at_xpath":{"type":"method","name":"at_xpath","children":[],"call":[" xpath first "," xpath "]}," Nokogiri XML Reader empty_element?":{"type":"method","name":"empty_element?","children":[],"call":["LibXML  xmlTextReaderIsEmptyElement != ","LibXML  xmlTextReaderIsEmptyElement "," cstruct "]}," Nokogiri LibXML xmlNextElementSiblingHack":{"type":"method","name":"xmlNextElementSiblingHack","children":[],"call":["sibling element? ","sibling next_sibling ","(const\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Node) :ELEMENT_NODE) include? ","sibling type ","sibling nil? ","sibling next_sibling  element? ","sibling next_sibling  next_sibling next_sibling  ","sibling next_sibling  type ","sibling next_sibling  nil? "]}," Nokogiri LibXML xmlLastElementChildHack":{"type":"method","name":"xmlLastElementChildHack","children":[],"call":["child element? ","parent children reverse find ","parent children reverse ","parent children ","(const\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Node) :ELEMENT_NODE) include? ","parent type ","parent nil? "]}," Nokogiri LibXML xmlFirstElementChildHack":{"type":"method","name":"xmlFirstElementChildHack","children":[],"call":["child element? ","parent children find ","parent children ","(const\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Node) :ELEMENT_NODE) include? ","parent type ","parent nil? "]}," Nokogiri CSS GeneratedParser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":["Node  new "]}," Nokogiri CSS GeneratedParser _reduce_43":{"type":"method","name":"_reduce_43","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS GeneratedParser _reduce_35":{"type":"method","name":"_reduce_35","children":[],"call":["val last ","val first "]}," Nokogiri CSS GeneratedParser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":["val [] "]}," Nokogiri CSS GeneratedParser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":["Node  new ","val last ","val first ","val [] "]}," Nokogiri XML Node implied_xpath_context":{"type":"method","name":"implied_xpath_context","children":[],"call":[]}," Nokogiri XML Node extract_params":{"type":"method","name":"extract_params","children":[],"call":[" document root namespaces "," document root "," document ","hashes reverse ","hashes << ","params pop ","params last nil? ","params last ","Hash  === ","(const nil :Hash) include? ! ","(const nil :Hash) include? ","param class ","params find ","params empty? "]}," Nokogiri XML Document implied_xpath_context":{"type":"method","name":"implied_xpath_context","children":[],"call":[]}," Nokogiri XSLT register":{"type":"method","name":"register","children":[],"call":[]}," Nokogiri XML XPathContext register_variable":{"type":"method","name":"register_variable","children":[],"call":["LibXML  xmlXPathRegisterVariable "," cstruct ","LibXML  xmlXPathNewCString "]}," Nokogiri XML SAX ParserContext column":{"type":"method","name":"column","children":[],"call":["input [] ","LibXML XmlParserInput  new "," cstruct [] "," cstruct "," cstruct [] null? ","LibXML XmlParserInput  new  [] "]}," Nokogiri XML SAX ParserContext line":{"type":"method","name":"line","children":[],"call":["input [] ","LibXML XmlParserInput  new "," cstruct [] "," cstruct "," cstruct [] null? ","LibXML XmlParserInput  new  [] "]}," Nokogiri HTML Document EncodingReader SAXHandler not_found":{"type":"method","name":"not_found","children":[],"call":[" found "]}," Nokogiri HTML Document EncodingReader SAXHandler found":{"type":"method","name":"found","children":[],"call":[" throw "]}," Nokogiri HTML Document EncodingFoundException initialize":{"type":"method","name":"initialize","children":[],"call":["encoding found: %s % "]}," Nokogiri CSS Parser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":[]}," Nokogiri CSS Parser _reduce_56":{"type":"method","name":"_reduce_56","children":[],"call":["val [] ","val first "]}," Nokogiri CSS Parser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":["val [] ","val first ","Node  new "]}," Nokogiri CSS Parser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":["Node  new "]}," Nokogiri CSS Parser _reduce_47":{"type":"method","name":"_reduce_47","children":[],"call":["Node  new ","val [] "]}," Nokogiri CSS Parser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":["Node  new "," raise ","val [] ","val << ","val [] == "]}," Nokogiri CSS Parser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":[" raise ","val [] ","Node  new ","val [] == ","val last ","val first "]}," Nokogiri CSS Parser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":["Node  new ","val [] == ","val [] ","val last ","val first "]}," Nokogiri CSS Parser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":["Node  new ","val [] ","val last ","val first "]}," Nokogiri CSS Parser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":["Node  new ","val last ","val first ","val [] "]}," Nokogiri CSS Parser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":["Node  new ","val last ","val [] ","val first ","val [] nil? "]}," Nokogiri CSS Parser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":["val [] ","val first ","Node  new "]}," Nokogiri CSS Parser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":["val [] ","Node  new ","(send\n  (lvar :val) :first) compact join ","(send\n  (lvar :val) :first) compact ","val last ","val first "]}," Nokogiri CSS Parser _reduce_53":{"type":"method","name":"_reduce_53","children":[],"call":["Node  new "]}," Nokogiri XML NodeSet implied_xpath_contexts":{"type":"method","name":"implied_xpath_contexts","children":[],"call":[]}," Nokogiri XML Node implied_xpath_contexts":{"type":"method","name":"implied_xpath_contexts","children":[],"call":[]}," Nokogiri XML Document implied_xpath_contexts":{"type":"method","name":"implied_xpath_contexts","children":[],"call":[]}}