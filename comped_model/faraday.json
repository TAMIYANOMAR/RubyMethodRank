{" Object tap":{"type":"method","name":"tap","children":[],"call":[]}," Faraday Adapter loaded_adapters":{"type":"method","name":"loaded_adapters","children":[],"call":[]}," Faraday Adapter adapters":{"type":"method","name":"adapters","children":[],"call":[]}," Faraday load":{"type":"method","name":"load","children":[],"call":[]}," Faraday Response processed!":{"type":"method","name":"processed!","children":[],"call":[" body= "," body join "," body "," body respond_to? "]}," Faraday Response process!":{"type":"method","name":"process!","children":[],"call":[" processed! "," process "]}," Faraday Response process":{"type":"method","name":"process","children":[],"call":[" body << "," body "," body= "," body ! "]}," Faraday Response initialize":{"type":"method","name":"initialize","children":[],"call":[" processed! "," block_given? ","Env  from "]}," Faraday Response loaded?":{"type":"method","name":"loaded?","children":[],"call":[" load_error ! "," load_error "]}," Faraday Response YajlResponse object_parsed":{"type":"method","name":"object_parsed","children":[],"call":[]}," Faraday Response YajlResponse processed!":{"type":"method","name":"processed!","children":[],"call":[]}," Faraday Response YajlResponse process":{"type":"method","name":"process","children":[],"call":["@parser << ","@parser on_parse_complete= "," method ","Yajl Parser  new ","@parser ! ","Yajl Parser  new  << ","Yajl Parser  new  on_parse_complete= ","Yajl Parser  new  ! "]}," Faraday Response YajlResponse initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Connection escape_for_querystring":{"type":"method","name":"escape_for_querystring","children":[],"call":["escaped gsub! ","URI  encode_component tap ","URI  encode_component ","s to_s "]}," Faraday Connection params_to_query":{"type":"method","name":"params_to_query","children":[],"call":["(send\n  (lvar :params) :inject\n  (array)) join ","memo << "," escape_for_querystring ","params inject "]}," Faraday Connection build_uri":{"type":"method","name":"build_uri","children":[],"call":["uri query= ","query empty? ! ","query empty? "," params_to_query ","uri path= ","uri path ","@path_prefix size > ","@path_prefix size ","uri path !~ ","uri port ","uri host ","uri scheme ","URI  parse ","params empty? ! ","params empty? ","uri  params_to_query = ","URI  parse  query= "," params_to_query  empty? ! "," params_to_query  empty? "," params_to_ params_to_query  ","URI  parse  path= ","URI  parse  path ","URI  parse  path !~ ","URI  parse  port ","URI  parse  host ","URI  parse  scheme "]}," Faraday Connection path_prefix=":{"type":"method","name":"path_prefix=","children":[],"call":["value replace ","value !~ ","value chomp! "," url_prefix path= ","/ + ","value [] == ","value [] "," url_prefix ","value chomp ","/ +  replace ","value chomp  replace ","/ +  !~ ","value chomp  !~ ","/ +  chomp! ","value chomp  chomp! ","/ +  [] == ","value chomp  [] == ","/ +  [] ","value chomp  [] ","/ +  chomp ","value chomp  chomp "]}," Faraday Connection run_parallel_requests":{"type":"method","name":"run_parallel_requests","children":[],"call":[]}," Faraday Connection setup_parallel_manager":{"type":"method","name":"setup_parallel_manager","children":[],"call":[]}," Faraday Connection in_parallel":{"type":"method","name":"in_parallel","children":[],"call":["@parallel_manager run "," warn "," caller [] join "," caller [] "," caller "," default_parallel_manager "]}," Faraday Connection in_parallel?":{"type":"method","name":"in_parallel?","children":[],"call":["@parallel_manager ! ! ","@parallel_manager ! "]}," Faraday Connection response_class=":{"type":"method","name":"response_class=","children":[],"call":[" raise ","v inspect ","v loaded? ! ","v loaded? ","v respond_to? "]}," Faraday Connection response_class":{"type":"method","name":"response_class","children":[],"call":[]}," Faraday Connection get":{"type":"method","name":"get","children":[],"call":[" _get "," build_uri "," build_headers "," build_params "," run_request ","Proc  new "," block_given? "," build_ build_uri  "," Proc  new _given? "]}," Faraday Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" path_prefix= ","uri path "," port= ","uri port "," host= ","uri host "," scheme= ","uri scheme ","URI  parse "," url_prefix= ","options [] ","url is_a? ","@headers [] "," block_given? "," proxy ","http:// + ","uri !~ ","uri empty? ! ","uri empty? ","ENV  [] ","options fetch ","@headers update ","options headers ","@params update ","options params ","options new_builder ","Proc  new ","options builder ","options parallel_manager ","options ssl ","options request ","Utils ParamsHash  new ","Utils Headers  new ","ConnectionOptions  from ","options url ","options merge ","options is_a? "," find_default_proxy ","url find_proxy ","URI  parse find_proxy ","URI  parse respond_to? "," proxy_from_env ","ProxyOptions  from ","options proxy ","options proxy ! ! ","options proxy ! "," initialize_proxy "," proc ","Builder  create_with_inner_app "," merge_headers "," merge_params ","HeaderHash  new ","Builder  new ","Builder  create ","block call ","@builder build ","Headers  new ","Utils  deep_merge ","URI  parse  path ","http:// +  path ","ENV  []  path "," find_default_proxy  path ","url find_proxy  path ","URI  parse find_proxy  path ","URI  parse  port ","http:// +  port ","ENV  []  port "," find_default_proxy  port ","url find_proxy  port ","URI  parse find_proxy  port ","URI  parse  host ","http:// +  host ","ENV  []  host "," find_default_proxy  host ","url find_proxy  host ","URI  parse find_proxy  host ","URI  parse  scheme ","http:// +  scheme ","ENV  []  scheme "," find_default_proxy  scheme ","url find_proxy  scheme ","URI  parse find_proxy  scheme "," options [] _prefix= "," options url _prefix= ","ConnectionOptions  from  [] ","options merge  [] ","Utils  deep_merge  [] ","options []  is_a? ","options url  is_a? ","Utils Headers  new  [] ","HeaderHash  new  [] ","Headers  new  [] "," Proc  new _given? ","URI  parse  !~ ","http:// +  !~ ","ENV  []  !~ "," find_default_proxy  !~ ","url find_proxy  !~ ","URI  parse find_proxy  !~ ","URI  parse  empty? ! ","http:// +  empty? ! ","ENV  []  empty? ! "," find_default_proxy  empty? ! ","url find_proxy  empty? ! ","URI  parse find_proxy  empty? ! ","URI  parse  empty? ","http:// +  empty? ","ENV  []  empty? "," find_default_proxy  empty? ","url find_proxy  empty? ","URI  parse find_proxy  empty? ","ConnectionOptions  from  fetch ","options merge  fetch ","Utils  deep_merge  fetch ","Utils Headers  new  update ","HeaderHash  new  update ","Headers  new  update ","ConnectionOptions  from  headers ","options merge  headers ","Utils  deep_merge  headers ","Utils ParamsHash  new  update ","ConnectionOptions  from  params ","options merge  params ","Utils  deep_merge  params ","ConnectionOptions  from  new_builder ","options merge  new_builder ","Utils  deep_merge  new_builder ","ConnectionOptions  from  builder ","options merge  builder ","Utils  deep_merge  builder ","ConnectionOptions  from  parallel_manager ","options merge  parallel_manager ","Utils  deep_merge  parallel_manager ","ConnectionOptions  from  ssl ","options merge  ssl ","Utils  deep_merge  ssl ","ConnectionOptions  from  request ","options merge  request ","Utils  deep_merge  request ","options options []  ","options options url  ","ConnectionOptions  from  url ","options merge  url ","Utils  deep_merge  url ","ConnectionOptions  from  merge ","options merge  merge ","Utils  deep_merge  merge ","ConnectionOptions  from  is_a? ","options merge  is_a? ","Utils  deep_merge  is_a? ","options []  find_proxy ","options url  find_proxy ","ConnectionOptions  from  proxy ","options merge  proxy ","Utils  deep_merge  proxy ","ConnectionOptions  from  proxy ! ! ","options merge  proxy ! ! ","Utils  deep_merge  proxy ! ! ","ConnectionOptions  from  proxy ! ","options merge  proxy ! ","Utils  deep_merge  proxy ! ","Proc  new  call ","Builder  create_with_inner_app  build ","Builder  create  build ","Builder  new  build "]}," Faraday Connection Options loaded?":{"type":"method","name":"loaded?","children":[],"call":["@load_error ! "]}," Faraday Connection Options supports_async=":{"type":"method","name":"supports_async=","children":[],"call":[]}," Faraday Connection Options supports_async":{"type":"method","name":"supports_async","children":[],"call":[]}," Faraday Connection Options load_error=":{"type":"method","name":"load_error=","children":[],"call":[]}," Faraday Connection Options load_error":{"type":"method","name":"load_error","children":[],"call":[]}," Faraday Adapter Typhoeus parse_response_headers":{"type":"method","name":"parse_response_headers","children":[],"call":["Hash  [] ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :header_string) :split\n            (regexp\n              (str \"\\\\r\\\\n\")\n              (regopt))) :tap)\n        (args\n          (arg :a))\n        (send\n          (lvar :a) :shift)) :map!)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s+\")\n        (regopt))\n      (int 2))) :map!) flatten! ","k downcase ","(send\n  (block\n    (send\n      (send\n        (lvar :header_string) :split\n        (regexp\n          (str \"\\\\r\\\\n\")\n          (regopt))) :tap)\n    (args\n      (arg :a))\n    (send\n      (lvar :a) :shift)) :map!) map! ","h split ","(send\n  (send\n    (lvar :header_string) :split\n    (regexp\n      (str \"\\\\r\\\\n\")\n      (regopt))) :tap) map! ","a shift ","header_string split tap ","header_string split ","header_string empty? ! ","header_string empty? ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :header_string) :split\n                (regexp\n                  (str \"\\\\r\\\\n\")\n                  (regopt))) :tap)\n            (args\n              (arg :a))\n            (send\n              (lvar :a) :shift)) :map)\n        (args\n          (arg :h))\n        (send\n          (lvar :h) :split\n          (regexp\n            (str \":\\\\s+\")\n            (regopt))\n          (int 2))) :reject)\n    (args\n      (mlhs\n        (arg :k)\n        (arg :v)))\n    (send\n      (lvar :k) :nil?)) :map) flatten ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :header_string) :split\n            (regexp\n              (str \"\\\\r\\\\n\")\n              (regopt))) :tap)\n        (args\n          (arg :a))\n        (send\n          (lvar :a) :shift)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s+\")\n        (regopt))\n      (int 2))) :reject) map ","k nil? ","(send\n  (block\n    (send\n      (send\n        (lvar :header_string) :split\n        (regexp\n          (str \"\\\\r\\\\n\")\n          (regopt))) :tap)\n    (args\n      (arg :a))\n    (send\n      (lvar :a) :shift)) :map) reject ","(send\n  (send\n    (lvar :header_string) :split\n    (regexp\n      (str \"\\\\r\\\\n\")\n      (regopt))) :tap) map "]}," Faraday Adapter Typhoeus _get":{"type":"method","name":"_get","children":[],"call":[" raise "," run_parallel_requests ","is_async ! ","@parallel_manager queue ","resp headers= "," parse_response_headers ","response headers ","resp process! ","response body ","req on_complete "," Typhoeus Request  new ","uri to_s "," setup_parallel_manager "," in_parallel? "," response_class new "," response_class "," _perform "," run_parallel_ Typhoeus Request  new uests "," in_parallel?  ! "," Typhoeus Request  new  on_complete "]}," Faraday Adapter Typhoeus run_parallel_requests":{"type":"method","name":"run_parallel_requests","children":[],"call":["@parallel_manager run "]}," Faraday Adapter Typhoeus setup_parallel_manager":{"type":"method","name":"setup_parallel_manager","children":[],"call":[" Typhoeus Hydra  new "]}," Faraday Adapter Typhoeus in_parallel":{"type":"method","name":"in_parallel","children":[],"call":[" run_parallel_requests "," setup_parallel_manager ","@hydra run "," Typhoeus Hydra  new "," Typhoeus Hydra  new  run "]}," Faraday Adapter Typhoeus in_parallel?":{"type":"method","name":"in_parallel?","children":[],"call":["@parallel_manager ! ! ","@parallel_manager ! "]}," Faraday Adapter NetHttp _get":{"type":"method","name":"_get","children":[],"call":[" raise ","resp headers []= ","resp headers ","http_resp each_header ","resp process ","http get ","uri path "," response_class new "," response_class ","Net HTTP  new ","uri port ","uri host "," path_for "," _perform ","uri query ","Net HTTP  new _resp each_header ","Net HTTP  new  get "]}," Faraday Adapter MockRequest _get":{"type":"method","name":"_get","children":[],"call":["resp process ","stub body ","resp headers= ","stub response_headers "," response_class new "," response_class ","@stubs match ","uri path "," raise "," stubs empty? "," stubs ","@stubs match  body ","@stubs match  response_headers ","@@stubs match s match "," @stubs match s empty? "," @stubs match s "]}," Faraday Adapter MockRequest stubs":{"type":"method","name":"stubs","children":[],"call":["Stubs  new "]}," Faraday Adapter MockRequest initialize":{"type":"method","name":"initialize","children":[],"call":[" stubs "," configure "]}," Faraday Adapter MockRequest Stub matches?":{"type":"method","name":"matches?","children":[],"call":["headers [] == ","headers [] "," request_headers each "," request_headers "," request_headers empty? ","request_path != "," path ","headers [] != ","params != "," data "]}," Faraday Adapter MockRequest Stubs new_stub":{"type":"method","name":"new_stub","children":[],"call":["Stub  new ","block call "]}," Faraday Adapter MockRequest Stubs get":{"type":"method","name":"get","children":[],"call":["(or-asgn\n  (send\n    (ivar :@stack) :[]\n    (sym :get))\n  (array)) << "," new_stub ","@stack [] "]}," Faraday Adapter MockRequest Stubs match":{"type":"method","name":"match","children":[],"call":["stub matches? ","@stack [] detect ","@stack [] ","@stack key? ! ","@stack key? ","@stack [] delete "]}," Faraday Adapter MockRequest Stubs empty?":{"type":"method","name":"empty?","children":[],"call":["@stack empty? "]}," Faraday Adapter MockRequest Stubs initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," Faraday Adapter MockRequest loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," Faraday AutoloadHelper load":{"type":"method","name":"load","children":[],"call":[" const_get "," autoload? "," constants each "," constants "]}," Faraday AutoloadHelper autoload_all":{"type":"method","name":"autoload_all","children":[],"call":[" autoload ","File  join ","options each ","Faraday  root_path ","prefix =~ ","prefix match? ","File  join  =~ ","File  join  match? "]}," Faraday Connection build_hash":{"type":"method","name":"build_hash","children":[],"call":[" send "," send merge "]}," Faraday Connection build_headers":{"type":"method","name":"build_headers","children":[],"call":["headers []= ","headers delete to_s ","headers delete ","headers keys each ","headers keys "," build_hash tap "," build_hash "]}," Faraday Connection build_params":{"type":"method","name":"build_params","children":[],"call":[" build_hash "]}," Faraday Connection path_for":{"type":"method","name":"path_for","children":[],"call":["s << ","uri fragment ","uri query ","uri path tap ","uri path "]}," Faraday Connection url_prefix=":{"type":"method","name":"url_prefix=","children":[],"call":[" path_prefix= ","uri path "," port= ","uri port "," host= ","uri host "," scheme= ","uri scheme ","URI  parse ","uri user= ","uri password= "," basic_auth "," with_uri_credentials ","uri query= "," params merge_query ","uri query "," params ","Utils  URI "," merge_params "," parse_query ","uri query empty? ! ","uri query empty? ","uri password ","uri user ","@params merge_query ","CGI  unescape "," class URI "," class "," proxy_from_env "," set_basic_auth ","URI  parse  path ","URI  parse  port ","URI  parse  host ","URI  parse  scheme ","URI  parse  user= ","URI  parse  password= "," with_URI  parse _credentials ","URI  parse  query= ","URI  parse  query ","URI  parse  query empty? ! ","URI  parse  query empty? ","URI  parse  password ","URI  parse  user "]}," Faraday Adapter MockRequest configure":{"type":"method","name":"configure","children":[],"call":[" stubs "]}," Faraday Request YajlRequest body":{"type":"method","name":"body","children":[],"call":["Yajl Encoder  encode "]}," Faraday Request YajlRequest headers":{"type":"method","name":"headers","children":[],"call":["@headers merge "]}," Faraday Request YajlRequest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Request PostRequest create_post_params":{"type":"method","name":"create_post_params","children":[],"call":["(send\n  (array) :tap) join ","toreturn << ","CGI  escape ","params [] to_s ","params [] "," create_post_params ","params [] kind_of? ","base == ","params each_key "," tap "]}," Faraday Request PostRequest body":{"type":"method","name":"body","children":[],"call":[" create_post_params "]}," Faraday Request PostRequest headers":{"type":"method","name":"headers","children":[],"call":["@headers merge "]}," Faraday Request PostRequest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Loadable loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," Faraday Loadable extended":{"type":"method","name":"extended","children":[],"call":[]}," Faraday Connection request_class=":{"type":"method","name":"request_class=","children":[],"call":[" raise ","v inspect ","v loaded? ! ","v loaded? ","v respond_to? "]}," Faraday Connection request_class":{"type":"method","name":"request_class","children":[],"call":[]}," Faraday Connection delete":{"type":"method","name":"delete","children":[],"call":[" _delete "," build_headers "," build_uri "," build_params "," run_request ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Connection put":{"type":"method","name":"put","children":[],"call":[" _put "," build_headers "," build_params "," build_uri "," run_request ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Connection post":{"type":"method","name":"post","children":[],"call":[" _post "," build_headers "," build_params "," build_uri "," run_request ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Adapter Typhoeus _perform":{"type":"method","name":"_perform","children":[],"call":[" raise "," run_parallel_requests ","is_async ! ","@parallel_manager queue ","resp headers= "," parse_response_headers ","response headers ","resp process! ","response body ","response code == ","response code ","req on_complete "," Typhoeus Request  new ","uri to_s ","params []= "," setup_parallel_manager "," in_parallel? "," response_class new "," response_class "," run_parallel_ Typhoeus Request  new uests "," in_parallel?  ! "," Typhoeus Request  new  on_complete "]}," Faraday Adapter Typhoeus _delete":{"type":"method","name":"_delete","children":[],"call":[" _perform "]}," Faraday Adapter Typhoeus _put":{"type":"method","name":"_put","children":[],"call":[" _perform ","request body ","request headers "," request_class new "," request_class "," request_class new  body "," request_class new  headers ","  request_class new _class new ","  request_class new _class "]}," Faraday Adapter Typhoeus _post":{"type":"method","name":"_post","children":[],"call":[" _perform ","request body ","request headers "," request_class new "," request_class "," request_class new  body "," request_class new  headers ","  request_class new _class new ","  request_class new _class "]}," Faraday Adapter NetHttp _delete":{"type":"method","name":"_delete","children":[],"call":[" _perform ","uri query "]}," Faraday Adapter NetHttp _post":{"type":"method","name":"_post","children":[],"call":[" _perform ","request headers ","request body "," request_class new "," request_class "," request_class new  headers "," request_class new  body ","  request_class new _class new ","  request_class new _class "]}," Faraday Adapter NetHttp _put":{"type":"method","name":"_put","children":[],"call":[" _perform ","request headers ","request body "," request_class new "," request_class "," request_class new  headers "," request_class new  body ","  request_class new _class new ","  request_class new _class "]}," Faraday Adapter NetHttp _perform":{"type":"method","name":"_perform","children":[],"call":[" raise ","resp headers []= ","resp headers ","http_resp each_header ","resp process ","http_resp body ","http_resp code == ","http_resp code ","http send_request "," path_for "," response_class new "," response_class ","Net HTTP  new ","uri port ","uri host ","http send_request  each_header ","Net HTTP  new _resp each_header ","http send_request  body ","Net HTTP  new _resp body ","http send_request  code == ","Net HTTP  new _resp code == ","http send_request  code ","Net HTTP  new _resp code ","Net HTTP  new  send_request "]}," Faraday Adapter MockRequest _put":{"type":"method","name":"_put","children":[],"call":["resp process ","stub body ","resp headers= ","stub response_headers "," response_class new "," response_class ","@stubs match ","uri path "," raise "," stubs empty? "," stubs ","@stubs match  body ","@stubs match  response_headers ","@@stubs match s match "," @stubs match s empty? "," @stubs match s "]}," Faraday Adapter MockRequest _post":{"type":"method","name":"_post","children":[],"call":["resp process ","stub body ","resp headers= ","stub response_headers "," response_class new "," response_class ","@stubs match ","uri path "," raise "," stubs empty? "," stubs ","@stubs match  body ","@stubs match  response_headers ","@@stubs match s match "," @stubs match s empty? "," @stubs match s "]}," Faraday Adapter MockRequest _delete":{"type":"method","name":"_delete","children":[],"call":["resp process ","stub body ","resp headers= ","stub response_headers "," response_class new "," response_class ","@stubs match ","uri path "," raise "," stubs empty? "," stubs ","@stubs match  body ","@stubs match  response_headers ","@@stubs match s match "," @stubs match s empty? "," @stubs match s "]}," Faraday Adapter MockRequest Stubs put":{"type":"method","name":"put","children":[],"call":["(or-asgn\n  (send\n    (ivar :@stack) :[]\n    (sym :put))\n  (array)) << "," new_stub ","@stack [] "]}," Faraday Adapter MockRequest Stubs post":{"type":"method","name":"post","children":[],"call":["(or-asgn\n  (send\n    (ivar :@stack) :[]\n    (sym :post))\n  (array)) << "," new_stub ","@stack [] "]}," Faraday Adapter MockRequest Stubs delete":{"type":"method","name":"delete","children":[],"call":["(or-asgn\n  (send\n    (ivar :@stack) :[]\n    (sym :delete))\n  (array)) << "," new_stub ","@stack [] "]}," Faraday const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Faraday MiddlewareRegistry load_middleware":{"type":"method","name":"load_middleware","children":[],"call":[" load_middleware ","@registered_middleware []= "," require "," middleware_mutex ","value call "," const_get "," fetch_middleware "," registered_middleware [] "," registered_middleware "," fetch_middleware  call "," registered_middleware []  call "]}," Faraday MiddlewareRegistry fetch_middleware":{"type":"method","name":"fetch_middleware","children":[],"call":["@registered_middleware [] "]}," Faraday MiddlewareRegistry middleware_mutex":{"type":"method","name":"middleware_mutex","children":[],"call":["@middleware_mutex synchronize ","Monitor  new "," require "]}," Faraday MiddlewareRegistry lookup_middleware":{"type":"method","name":"lookup_middleware","children":[],"call":[" raise ","Faraday Error  new ","key inspect "," load_middleware "," const_get ","found is_a? ","@registered_middleware []= ","found call ","@registered_middleware [] "," registered_middleware [] "," registered_middleware ","@registered_middleware []=  is_a? ","@registered_middleware []  is_a? ","@registered_middleware []=  call ","@registered_middleware []  call "]}," Faraday MiddlewareRegistry register_middleware":{"type":"method","name":"register_middleware","children":[],"call":["(or-asgn\n  (ivasgn :@registered_middleware)\n  (hash)) update "," middleware_mutex ","mapping nil? "," registered_middleware update "," registered_middleware "]}," Faraday default_connection_options":{"type":"method","name":"default_connection_options","children":[],"call":["ConnectionOptions  new "]}," Faraday default_connection":{"type":"method","name":"default_connection","children":[],"call":["Connection  new "," default_connection_options "]}," Faraday method_missing":{"type":"method","name":"method_missing","children":[],"call":[" default_connection send "," default_connection "," default_connection respond_to? "]}," Faraday respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" default_connection respond_to? "," default_connection "]}," Faraday default_adapter=":{"type":"method","name":"default_adapter=","children":[],"call":[]}," Faraday require_libs":{"type":"method","name":"require_libs","children":[],"call":[" require "," lib_path ","libs each "]}," Faraday new":{"type":"method","name":"new","children":[],"call":["Faraday Connection  new "," default_connection_options dup "," default_connection_options "," default_connection_options merge ","Proc  new "," block_given? ","Utils  deep_merge "," default_connection_ default_connection_options dup  dup "," default_connection_ default_connection_options merge  dup "," default_connection_ default_connection_options  dup "," default_connection_Utils  deep_merge  dup "," default_connection_ default_connection_options dup  "," default_connection_ default_connection_options merge  "," default_connection_ default_connection_options  "," default_connection_Utils  deep_merge  "," default_connection_ default_connection_options dup  merge "," default_connection_ default_connection_options merge  merge "," default_connection_ default_connection_options  merge "," default_connection_Utils  deep_merge  merge "," Proc  new _given? "]}," Faraday Utils sort_query_params":{"type":"method","name":"sort_query_params","children":[],"call":["query split sort join ","query split sort ","query split "]}," Faraday Utils deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" deep_merge! ","source dup "]}," Faraday Utils deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":["target []= "," deep_merge ","target [] ","Hash  === ","hash each ","target [] is_a? ","value is_a? "]}," Faraday Utils normalize_path":{"type":"method","name":"normalize_path","children":[],"call":["(if\n  (send\n    (send\n      (lvar :url) :path) :start_with?\n    (str \"/\"))\n  (send\n    (lvar :url) :path)\n  (send\n    (str \"/\") :+\n    (send\n      (lvar :url) :path))) + "," sort_query_params ","url query ","/ + ","url path ","url path start_with? "," URI ","(if\n  (send\n    (send\n      (lvar :url) :path) :!=\n    (str \"\"))\n  (send\n    (lvar :url) :path)\n  (str \"/\")) + ","url path != ","(if\n  (send\n    (send\n      (lvar :url) :path) :start_with?\n    (str \"/\"))\n  (send\n    (lvar :url) :path)\n  (dstr\n    (str \"/\")\n    (begin\n      (send\n        (lvar :url) :path)))) + ","(if\n  (send\n    (send\n      (lvar : URI ) :path) :start_with?\n    (str \"/\"))\n  (send\n    (lvar : URI ) :path)\n  (send\n    (str \"/\") :+\n    (send\n      (lvar : URI ) :path))) + "," URI  query "," URI  path "," URI  path start_with? ","(if\n  (send\n    (send\n      (lvar : URI ) :path) :!=\n    (str \"\"))\n  (send\n    (lvar : URI ) :path)\n  (str \"/\")) + "," URI  path != ","(if\n  (send\n    (send\n      (lvar : URI ) :path) :start_with?\n    (str \"/\"))\n  (send\n    (lvar : URI ) :path)\n  (dstr\n    (str \"/\")\n    (begin\n      (send\n        (lvar : URI ) :path)))) + "]}," Faraday Utils default_uri_parser=":{"type":"method","name":"default_uri_parser=","children":[],"call":["parser method ","parser nil? ","parser respond_to? "]}," Faraday Utils default_uri_parser":{"type":"method","name":"default_uri_parser","children":[],"call":["Kernel  method "," require "]}," Faraday Utils URI":{"type":"method","name":"URI","children":[],"call":[" raise "," default_uri_parser call "," default_uri_parser ","url respond_to? ","Kernel  URI "]}," Faraday Utils normalize_params":{"type":"method","name":"normalize_params","children":[],"call":["params []= "," normalize_params ","params [] "," raise ","params [] class name ","params [] class ","params [] is_a? ","params [] << ","params [] last ","params [] last key? ! ","params [] last key? ","params [] last is_a? ","after =~ ","after == ","Array  [] ","params [] kind_of? ","k empty? ","name =~ "]}," Faraday Utils default_params_encoder":{"type":"method","name":"default_params_encoder","children":[],"call":[]}," Faraday Utils parse_nested_query":{"type":"method","name":"parse_nested_query","children":[],"call":["NestedParamsEncoder  decode "," normalize_params "," unescape ","p split map ","p split ","(or\n  (lvar :qs)\n  (str \"\")) split each ","(or\n  (lvar :qs)\n  (str \"\")) split "]}," Faraday Utils parse_query":{"type":"method","name":"parse_query","children":[],"call":["FlatParamsEncoder  decode ","params []= ","params [] << ","params [] ","cur class == ","cur class "," unescape ","p split map ","p split ","(or\n  (lvar :qs)\n  (str \"\")) split each ","(or\n  (lvar :qs)\n  (str \"\")) split ","params []  class == ","params []  class "]}," Faraday Utils unescape":{"type":"method","name":"unescape","children":[],"call":["CGI  unescape ","s to_s ","str to_s "]}," Faraday Utils escape":{"type":"method","name":"escape","children":[],"call":["(send\n  (send\n    (lvar :s) :to_s) :gsub\n  (const nil :ESCAPE_RE)) tr ","% + ","match unpack join upcase ","match unpack join ","match unpack ","H2 * ","match bytesize ","s to_s gsub ","s to_s ","(send\n  (send\n    (lvar :str) :to_s) :gsub\n  (const nil :ESCAPE_RE)) tr ","str to_s gsub ","str to_s ","% << ","c upcase! ","1 unpack join tap ","1 unpack join ","1 unpack "," bytesize ","match unpack join tap ","s gsub ","s dup force_encoding ","s dup ","s respond_to? ","CGI  escape ","$& unpack join upcase ","$& unpack join ","$& unpack ","$& bytesize ","(send\n  (send\n    (lvar :str) :to_s) :gsub\n  (const nil :ESCAPE_RE)) gsub "," default_space_encoding ","(s dup force_encoding end\n  (s dup force_encoding end\n    (lvar :s dup force_encoding ) :to_s dup force_encoding ) :gs dup force_encoding ub\n  (cons dup force_encoding t nil :ESCAPE_RE)) tr ","(s to_s end\n  (s to_s end\n    (lvar :s to_s ) :to_s to_s ) :gs to_s ub\n  (cons to_s t nil :ESCAPE_RE)) tr ","match unpack join upcas dup force_encoding e ","match unpack join upcas to_s e ","match bytes dup force_encoding ize ","match bytes to_s ize ","s dup force_encoding  to_s dup force_encoding  gs dup force_encoding ub ","s to_s  to_s to_s  gs to_s ub ","s dup force_encoding  to_s dup force_encoding  ","s to_s  to_s to_s  ","(s dup force_encoding end\n  (s dup force_encoding end\n    (lvar :s dup force_encoding tr) :to_s dup force_encoding ) :gs dup force_encoding ub\n  (cons dup force_encoding t nil :ESCAPE_RE)) tr ","(s to_s end\n  (s to_s end\n    (lvar :s to_s tr) :to_s to_s ) :gs to_s ub\n  (cons to_s t nil :ESCAPE_RE)) tr ","s dup force_encoding tr to_s dup force_encoding  gs dup force_encoding ub ","s to_s tr to_s to_s  gs to_s ub ","s dup force_encoding tr to_s dup force_encoding  ","s to_s tr to_s to_s  ","c upcas dup force_encoding e! ","c upcas to_s e! "," bytes dup force_encoding ize "," bytes to_s ize ","s dup force_encoding  gs dup force_encoding ub ","s to_s  gs to_s ub ","s dup force_encoding  dup force_encoding ","s to_s  dup force_encoding ","s dup force_encoding  dup ","s to_s  dup ","s dup force_encoding  res dup force_encoding pond_to? ","s to_s  res to_s pond_to? ","CGI  es dup force_encoding cape ","CGI  es to_s cape ","$& unpack join upcas dup force_encoding e ","$& unpack join upcas to_s e ","$& bytes dup force_encoding ize ","$& bytes to_s ize ","(s dup force_encoding end\n  (s dup force_encoding end\n    (lvar :s dup force_encoding tr) :to_s dup force_encoding ) :gs dup force_encoding ub\n  (cons dup force_encoding t nil :ESCAPE_RE)) gs dup force_encoding ub ","(s to_s end\n  (s to_s end\n    (lvar :s to_s tr) :to_s to_s ) :gs to_s ub\n  (cons to_s t nil :ESCAPE_RE)) gs to_s ub "," default_s dup force_encoding pace_encoding "," default_s to_s pace_encoding "]}," Faraday Utils build_nested_query":{"type":"method","name":"build_nested_query","children":[],"call":["NestedParamsEncoder  encode "," escape "," raise ","prefix nil? ","(send\n  (lvar :value) :map) join "," build_nested_query ","value map "]}," Faraday Utils build_query":{"type":"method","name":"build_query","children":[],"call":["FlatParamsEncoder  encode ","(send\n  (lvar :params) :map) join "," escape ","v nil? "," build_query ","v map ","v class == ","v class ","params map "]}," Faraday Utils ParamsHash convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s "]}," Faraday Utils ParamsHash to_query":{"type":"method","name":"to_query","children":[],"call":["(or\n  (lvar :encoder)\n  (send\n    (const nil :Utils) :default_params_encoder)) encode ","Utils  default_params_encoder ","Utils  build_query ","Utils  build_nested_query "]}," Faraday Utils ParamsHash merge_query":{"type":"method","name":"merge_query","children":[],"call":[" update ","(or\n  (lvar :encoder)\n  (send\n    (const nil :Utils) :default_params_encoder)) decode ","Utils  default_params_encoder ","query empty? ! ","query empty? ","Utils  parse_query ","Utils  parse_nested_query "]}," Faraday Utils ParamsHash replace":{"type":"method","name":"replace","children":[],"call":[" update "," clear "]}," Faraday Utils ParamsHash merge":{"type":"method","name":"merge","children":[],"call":[" dup update "," dup "]}," Faraday Utils ParamsHash update":{"type":"method","name":"update","children":[],"call":[" []= ","params each "]}," Faraday Utils ParamsHash include?":{"type":"method","name":"include?","children":[],"call":[" convert_key "]}," Faraday Utils ParamsHash delete":{"type":"method","name":"delete","children":[],"call":[" convert_key "]}," Faraday Utils ParamsHash []=":{"type":"method","name":"[]=","children":[],"call":[" convert_key "]}," Faraday Utils ParamsHash []":{"type":"method","name":"[]","children":[],"call":[" convert_key "]}," Faraday Utils Headers names":{"type":"method","name":"names","children":[],"call":[]}," Faraday Utils Headers parse":{"type":"method","name":"parse","children":[],"call":[" []= "," [] << << "," [] << "," [] ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :header_string) :split\n            (regexp\n              (str \"\\\\r\\\\n\")\n              (regopt))) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (send\n                (lvar :a) :first) :index\n              (str \"HTTP/\")) :==\n            (int 0))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s*\")\n        (regopt))\n      (int 2))) :reject) each ","p [] nil? ","p [] ","(send\n  (block\n    (send\n      (send\n        (lvar :header_string) :split\n        (regexp\n          (str \"\\\\r\\\\n\")\n          (regopt))) :tap)\n    (args\n      (arg :a))\n    (if\n      (send\n        (send\n          (send\n            (lvar :a) :first) :index\n          (str \"HTTP/\")) :==\n        (int 0))\n      (send\n        (lvar :a) :shift) nil)) :map) reject ","h split ","(send\n  (send\n    (lvar :header_string) :split\n    (regexp\n      (str \"\\\\r\\\\n\")\n      (regopt))) :tap) map ","a shift ","a first index == ","a first index ","a first ","header_string split tap ","header_string split ","header_string empty? ! ","header_string empty? ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :last_response) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (send\n                (lvar :a) :first) :index\n              (str \"HTTP/\")) :==\n            (int 0))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s*\")\n        (regopt))\n      (int 2))) :reject) each ","(send\n  (block\n    (send\n      (lvar :last_response) :tap)\n    (args\n      (arg :a))\n    (if\n      (send\n        (send\n          (send\n            (lvar :a) :first) :index\n          (str \"HTTP/\")) :==\n        (int 0))\n      (send\n        (lvar :a) :shift) nil)) :map) reject ","(send\n  (lvar :last_response) :tap) map ","last_response tap ","headers slice ","headers size ","x match ","headers rindex "," add_parsed ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :last_response) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (lvar :a) :first) :start_with?\n            (str \"HTTP/\"))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s*\")\n        (regopt))\n      (int 2))) :reject) each ","(send\n  (block\n    (send\n      (lvar :last_response) :tap)\n    (args\n      (arg :a))\n    (if\n      (send\n        (send\n          (lvar :a) :first) :start_with?\n        (str \"HTTP/\"))\n      (send\n        (lvar :a) :shift) nil)) :map) reject ","a first start_with? ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :header_string) :split\n            (regexp\n              (str \"\\\\r\\\\n\")\n              (regopt))) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (send\n                (lvar :a) :first) :index\n              (str \"HTTP/\")) :==\n            (int 0))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s+\")\n        (regopt))\n      (int 2))) :reject) each ","k nil? ","x start_with? ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :headers slice ) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (send\n                (lvar :a) :first) :index\n              (str \"HTTP/\")) :==\n            (int 0))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s*\")\n        (regopt))\n      (int 2))) :reject) each ","(send\n  (block\n    (send\n      (lvar :headers slice ) :tap)\n    (args\n      (arg :a))\n    (if\n      (send\n        (send\n          (send\n            (lvar :a) :first) :index\n          (str \"HTTP/\")) :==\n        (int 0))\n      (send\n        (lvar :a) :shift) nil)) :map) reject ","(send\n  (lvar :headers slice ) :tap) map ","headers slice  tap ","header_string split  slice ","header_string split  size ","header_string split  rindex ","(send\n  (block\n    (send\n      (block\n        (send\n          (lvar :headers slice ) :tap)\n        (args\n          (arg :a))\n        (if\n          (send\n            (send\n              (lvar :a) :first) :start_with?\n            (str \"HTTP/\"))\n          (send\n            (lvar :a) :shift) nil)) :map)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :split\n      (regexp\n        (str \":\\\\s*\")\n        (regopt))\n      (int 2))) :reject) each ","(send\n  (block\n    (send\n      (lvar :headers slice ) :tap)\n    (args\n      (arg :a))\n    (if\n      (send\n        (send\n          (lvar :a) :first) :start_with?\n        (str \"HTTP/\"))\n      (send\n        (lvar :a) :shift) nil)) :map) reject "]}," Faraday Utils Headers to_hash":{"type":"method","name":"to_hash","children":[],"call":[" Hash  new update "," Hash  new "," update "]}," Faraday Utils Headers replace":{"type":"method","name":"replace","children":[],"call":[" update ","@names clear "," clear "]}," Faraday Utils Headers merge":{"type":"method","name":"merge","children":[],"call":["hash merge! "," dup "," dup  merge! "]}," Faraday Utils Headers merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other each "]}," Faraday Utils Headers include?":{"type":"method","name":"include?","children":[],"call":["@names include? ","k downcase ","key downcase "]}," Faraday Utils Headers delete":{"type":"method","name":"delete","children":[],"call":["@names delete ","k downcase ","@names [] ","KeyMap  [] ","key downcase ","@names []  downcase ","KeyMap  []  downcase ","@names [] ey downcase ","KeyMap  [] ey downcase "]}," Faraday Utils Headers fetch":{"type":"method","name":"fetch","children":[],"call":["@names fetch ","k downcase ","KeyMap  [] ","key downcase ","KeyMap  []  downcase ","@names fetch  downcase ","KeyMap  [] ey downcase "]}," Faraday Utils Headers []=":{"type":"method","name":"[]=","children":[],"call":["v to_ary join ","v to_ary ","v respond_to? ","@names [] ","k downcase ","KeyMap  [] ","val to_ary join ","val to_ary ","val respond_to? ","key downcase ","v to_ary join  to_ary join ","v to_ary join  to_ary ","v to_ary join  respond_to? ","KeyMap  []  downcase ","v to_ary join al to_ary join ","val to_ary join  to_ary join ","v to_ary join al to_ary ","val to_ary join  to_ary ","v to_ary join al respond_to? ","val to_ary join  respond_to? ","KeyMap  [] ey downcase "]}," Faraday Utils Headers []":{"type":"method","name":"[]","children":[],"call":["@names [] ","k downcase ","KeyMap  [] ","key downcase ","KeyMap  []  downcase ","KeyMap  [] ey downcase "]}," Faraday Utils Headers initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other names dup ","other names "]}," Faraday Utils Headers initialize":{"type":"method","name":"initialize","children":[],"call":[" update "]}," Faraday Utils Headers from":{"type":"method","name":"from","children":[],"call":[]}," Faraday CompositeReadIO advance_io":{"type":"method","name":"advance_io","children":[],"call":[]}," Faraday CompositeReadIO current_io":{"type":"method","name":"current_io","children":[],"call":["@ios [] "]}," Faraday CompositeReadIO ensure_open_and_readable":{"type":"method","name":"ensure_open_and_readable","children":[],"call":[]}," Faraday CompositeReadIO close":{"type":"method","name":"close","children":[],"call":["io close ","@ios each "]}," Faraday CompositeReadIO read":{"type":"method","name":"read","children":[],"call":["got_result ! "," advance_io ","length == ","result length ","outbuf << ","result force_encoding ","result respond_to? ","result nil? ! ","result nil? ","io read "," current_io ","outbuf replace "," +@ ","(send\n  (lvar :outbuf) :+@) replace ","outbuf +@ ","got_io read  ! "," advance_ current_io  ","io read  length ","outbuf replace  << "," +@  << ","(send\n  (lvar :outbuf) :+@) replace  << ","io read  force_encoding ","io read  respond_to? ","io read  nil? ! ","io read  nil? "," current_io  read "," current_ current_io  ","outbuf replace  replace "," +@  replace ","(send\n  (lvar :outbuf) :+@) replace  replace ","(send\n  (lvar :outbuf replace ) :+@) replace ","(send\n  (lvar : +@ ) :+@) replace ","(send\n  (lvar :(send\n  (lvar :outbuf) :+@) replace ) :+@) replace ","outbuf replace  +@ "," +@  +@ ","(send\n  (lvar :outbuf) :+@) replace  +@ "]}," Faraday CompositeReadIO rewind":{"type":"method","name":"rewind","children":[],"call":["io rewind ","@ios each "]}," Faraday CompositeReadIO length":{"type":"method","name":"length","children":[],"call":["sum + ","part length ","@parts inject "]}," Faraday CompositeReadIO initialize":{"type":"method","name":"initialize","children":[],"call":["part to_io ","@parts map ","parts flatten ","parts map ","sum + ","part length ","parts inject ","parts flatten  map "]}," Faraday Response apply_request":{"type":"method","name":"apply_request","children":[],"call":["Env  from update ","Env  from "," raise "," finished? ","request_env merge ","Env  from merge "]}," Faraday Response marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["Env  from "]}," Faraday Response marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":["@env response_headers ","@env body ","@env status "," finished? ! "," finished? "," to_hash ","@env [] "]}," Faraday Response success?":{"type":"method","name":"success?","children":[],"call":[" env success? "," env "," finished? "," status == "," status ","(irange\n  (int 200)\n  (int 299)) include? "]}," Faraday Response finish":{"type":"method","name":"finish","children":[],"call":["callback call ","@on_complete_callbacks each ","Env  from ","env is_a? "," raise "," finished? ","env [] ","c call "]}," Faraday Response on_complete":{"type":"method","name":"on_complete","children":[],"call":[" env ","@on_complete_callbacks << ","Proc  new "," finished? ! "," finished? "]}," Faraday Response finished?":{"type":"method","name":"finished?","children":[],"call":[" env ! ! "," env ! "," env "]}," Faraday Response body":{"type":"method","name":"body","children":[],"call":[" env body "," env "," finished? "," env [] "]}," Faraday Response headers":{"type":"method","name":"headers","children":[],"call":[" env response_headers "," env "," finished? "," env [] "]}," Faraday Response reason_phrase":{"type":"method","name":"reason_phrase","children":[],"call":[" env reason_phrase "," env "," finished? "]}," Faraday Response status":{"type":"method","name":"status","children":[],"call":[" env status "," env "," finished? "," env [] "]}," Faraday Response Middleware on_complete":{"type":"method","name":"on_complete","children":[],"call":["env body= "," parse ","env body ","env parse_body? "," respond_to? ","env []= ","env [] ","(int 204) index "]}," Faraday Response Middleware call":{"type":"method","name":"call","children":[],"call":[" on_complete ","@app call on_complete ","@app call "," class register_on_complete "," class "]}," Faraday RaiseError response_values":{"type":"method","name":"response_values","children":[],"call":["env body ","env response_headers ","env status ","env [] "]}," Faraday RaiseError on_complete":{"type":"method","name":"on_complete","children":[],"call":[" raise "," response_values ","env [] ","Faraday ConnectionFailed  new "]}," Faraday Logger log_body?":{"type":"method","name":"log_body?","children":[],"call":["@options [] ","@options [] [] "]}," Faraday Logger log_headers?":{"type":"method","name":"log_headers?","children":[],"call":["@options [] ","@options [] [] "]}," Faraday Logger pretty_inspect":{"type":"method","name":"pretty_inspect","children":[],"call":["body pretty_inspect "," require ","body respond_to? "]}," Faraday Logger dump_body":{"type":"method","name":"dump_body","children":[],"call":[" pretty_inspect ","body to_str ","body respond_to? "]}," Faraday Logger dump_headers":{"type":"method","name":"dump_headers","children":[],"call":["(send\n  (lvar :headers) :map) join ","v inspect ","headers map "]}," Faraday Logger on_complete":{"type":"method","name":"on_complete","children":[],"call":[" dump_body ","env [] "," debug "," log_body? "," dump_headers ","env response_headers "," log_headers? ","env status to_s ","env status "," info "," apply_filters ","env [] to_s "]}," Faraday Logger call":{"type":"method","name":"call","children":[],"call":[" dump_body ","env [] "," debug "," log_body? "," dump_headers ","env request_headers "," log_headers? "," info ","env url to_s ","env url ","env method "," apply_filters ","env method upcase ","env [] to_s "]}," Faraday Logger initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  merge "," Logger  new "," require "," block_given? "]}," Faraday Request to_env":{"type":"method","name":"to_env","children":[],"call":["Env  new ","connection parallel_manager ","connection ssl "," headers "," options ","connection build_exclusive_url "," params "," path "," body "," method ","connection options merge ","connection proxy ","connection options ","connection build_url ","connection headers merge ","connection headers ","connection params merge ","connection params ","Utils  deep_merge! ","Utils  deep_merge "," http_method "]}," Faraday Request []=":{"type":"method","name":"[]=","children":[],"call":[" headers []= "," headers "]}," Faraday Request []":{"type":"method","name":"[]","children":[],"call":[" headers [] "," headers "]}," Faraday Request url":{"type":"method","name":"url","children":[],"call":[" params update "," params "," params merge_query "," options params_encoder "," options "," path= ","path split ","path slice ","anchor_index nil? ","path index ","path query= ","path dup ","path query ","path respond_to? "," params= "," params merge_path query  "," path slice = "," path dup = ","path slice  split ","path dup  split ","path slice  slice ","path dup  slice ","path index  nil? ","path slice  index ","path dup  index ","path slice  query= ","path dup  query= ","path path query = ","path slice  dup ","path dup  dup ","path slice  query ","path dup  query ","path path query  ","path slice  respond_to? ","path dup  respond_to? "]}," Faraday Request headers=":{"type":"method","name":"headers=","children":[],"call":[" headers replace "," headers "]}," Faraday Request params=":{"type":"method","name":"params=","children":[],"call":[" params replace "," params "]}," Faraday Request create":{"type":"method","name":"create","children":[],"call":[]}," Faraday UrlEncoded request_type":{"type":"method","name":"request_type","children":[],"call":["type split first ","type split ","type index ","env request_headers [] to_s ","env request_headers [] ","env request_headers ","env [] [] to_s ","env [] [] ","env [] ","type split first  split first ","env request_headers [] to_s  split first ","env [] [] to_s  split first ","type split first  split ","env request_headers [] to_s  split ","env [] [] to_s  split ","type split first  index ","env request_headers [] to_s  index ","env [] [] to_s  index "]}," Faraday UrlEncoded process_request?":{"type":"method","name":"process_request?","children":[],"call":["type == "," class mime_type "," class ","type empty? ","env body "," request_type ","env [] "," request_type  == "," class mime_ request_type  "," request_type  empty? "," request_ request_type  "]}," Faraday UrlEncoded match_content_type":{"type":"method","name":"match_content_type","children":[],"call":["env body ","env body respond_to? "," class mime_type "," class ","env request_headers [] ","env request_headers "," process_request? ","env [] ","env [] respond_to? ","env [] [] "," request_type "," class mime_ request_type  "," request_ request_type  "]}," Faraday UrlEncoded call":{"type":"method","name":"call","children":[],"call":["@app call ","env body= ","params to_query ","env params_encoder ","Faraday Utils ParamsHash  [] "," match_content_type ","env []= ","Faraday Utils  build_nested_query ","Faraday Utils ParamsHash  []  to_query ","env Faraday Utils ParamsHash  [] _encoder "]}," Faraday TokenAuthentication initialize":{"type":"method","name":"initialize","children":[],"call":["values * ","  * ","Authorization: Token  size ","values << ","value to_s inspect ","value to_s ","options each ","token to_s inspect ","token to_s "]}," Faraday TokenAuthentication header":{"type":"method","name":"header","children":[],"call":[]}," Faraday Retry retry_request?":{"type":"method","name":"retry_request?","children":[],"call":["@options retry_if call ","@options retry_if ","@options methods include? ","env [] ","@options methods "]}," Faraday Retry build_exception_matcher":{"type":"method","name":"build_exception_matcher","children":[],"call":["error class to_s == ","ex to_s ","error class to_s ","error class ","error is_a? ","ex is_a? ","exceptions any? "," define_method ","(sclass\n  (lvar :matcher)\n  (self)) class_eval ","Module  new ","(sclass\n  (lvar :Module  new )\n  (self)) class_eval "]}," Faraday Retry call":{"type":"method","name":"call","children":[],"call":[" raise "," sleep "," sleep_amount ","retries + "," retry_request? ","retries > ","@app call ","env []= ","env [] ","@options max "," rewind_files ","exception response ","exception is_a? "," calculate_sleep_amount ","@options retry_block call ","@options retry_block ","Faraday Error RetriableResponse  new ","@options retry_statuses include? ","resp status ","@options retry_statuses ","@app call tap ","Faraday RetriableResponse  new ","@options interval ","@options interval > ","  calculate_sleep_amount  ","@options max  + ","@options max  > "," calculate_ calculate_sleep_amount  "]}," Faraday Retry sleep_amount":{"type":"method","name":"sleep_amount","children":[],"call":["current_interval + "," rand * * ","@options interval "," rand * ","@options interval_randomness to_f ","@options interval_randomness "," rand ","(lvar :current_interval) min ","@options max_interval ","@options interval * ","@options backoff_factor ** ","@options backoff_factor ","@options max - ","@options max ","(lvar :current_interval) min  + ","@options interval *  + ","(lvar :(lvar :current_interval) min ) min ","(lvar :@options interval * ) min "]}," Faraday Retry initialize":{"type":"method","name":"initialize","children":[],"call":[" build_exception_matcher ","@options exceptions ","Options  from ","Options  from  exceptions "]}," Faraday Retry Options retry_if":{"type":"method","name":"retry_if","children":[],"call":[" [] "]}," Faraday Retry Options methods":{"type":"method","name":"methods","children":[],"call":[" Array "," [] "]}," Faraday Retry Options exceptions":{"type":"method","name":"exceptions","children":[],"call":[" Array "," [] "]}," Faraday Retry Options backoff_factor":{"type":"method","name":"backoff_factor","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :backoff_factor))\n  (int 1)) to_f "," [] "]}," Faraday Retry Options interval_randomness":{"type":"method","name":"interval_randomness","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :interval_randomness))\n  (int 0)) to_f "," [] ","(or-asgn\n  (send\n    (self) :[]\n    (sym :interval_randomness))\n  (int 0)) to_i "]}," Faraday Retry Options max_interval":{"type":"method","name":"max_interval","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :max_interval))\n  (const\n    (const nil :Float) :MAX)) to_f "," [] "]}," Faraday Retry Options interval":{"type":"method","name":"interval","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :interval))\n  (int 0)) to_f "," [] "]}," Faraday Retry Options max":{"type":"method","name":"max","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :max))\n  (int 2)) to_i "," [] "]}," Faraday Retry Options from":{"type":"method","name":"from","children":[],"call":[]}," Faraday Multipart process_params":{"type":"method","name":"process_params","children":[],"call":["all << ","block call "," process_params ","a << ","value inject ","params inject "]}," Faraday Multipart create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["env request_headers []= ","body length to_s ","body length ","env request_headers ","Faraday CompositeReadIO  new ","parts << ","Faraday Parts EpiloguePart  new ","Faraday Parts Part  new "," process_params ","env request boundary ","env request ","env [] []= ","env [] ","env [] [] ","Faraday CompositeReadIO  new  length to_s ","Faraday CompositeReadIO  new  length ","env request env request boundary  ","env request env [] []  "]}," Faraday Multipart has_multipart?":{"type":"method","name":"has_multipart?","children":[],"call":[" has_multipart? ","val respond_to? ","(if\n  (send\n    (lvar :obj) :respond_to?\n    (sym :values))\n  (send\n    (lvar :obj) :values)\n  (lvar :obj)) each ","obj values ","obj respond_to? ","obj is_a? ! ","obj is_a? ","body values each ","body values "]}," Faraday Multipart process_request?":{"type":"method","name":"process_request?","children":[],"call":["type == "," class mime_type "," class "," has_multipart? ","env body ","type empty? ","env body empty? ! ","env body empty? ","env body respond_to? "," request_type ","env [] ","env [] empty? ! ","env [] empty? ","env [] respond_to? "," request_type  == "," class mime_ request_type  "," request_type  empty? "," request_ request_type  "]}," Faraday Multipart call":{"type":"method","name":"call","children":[],"call":["@app call ","env body= "," create_multipart ","env request boundary ","env request ","env request_headers [] ","env request_headers "," match_content_type "," unique_boundary ","env []= ","env [] [] ","env [] "]}," Faraday Instrumentation call":{"type":"method","name":"call","children":[],"call":["@app call ","@instrumenter instrument "]}," Faraday Instrumentation initialize":{"type":"method","name":"initialize","children":[],"call":["Options  from values_at ","Options  from ","Options  from values "]}," Faraday Instrumentation Options instrumenter":{"type":"method","name":"instrumenter","children":[],"call":[" [] "]}," Faraday Instrumentation Options name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Faraday BasicAuthentication header":{"type":"method","name":"header","children":[],"call":[]}," Faraday Authorization call":{"type":"method","name":"call","children":[],"call":["@app call ","env request_headers []= ","env request_headers ","env request_headers [] ","env [] []= ","env [] ","env [] [] "]}," Faraday Authorization initialize":{"type":"method","name":"initialize","children":[],"call":[" class header "," class "]}," Faraday Authorization build_hash":{"type":"method","name":"build_hash","children":[],"call":[]}," Faraday Authorization header":{"type":"method","name":"header","children":[],"call":[]}," Faraday RackBuilder assert_index":{"type":"method","name":"assert_index","children":[],"call":[" raise ","index inspect ","@handlers index ","index is_a? "]}," Faraday RackBuilder use_symbol":{"type":"method","name":"use_symbol","children":[],"call":[" use ","mod lookup_middleware "]}," Faraday RackBuilder raise_if_locked":{"type":"method","name":"raise_if_locked","children":[],"call":[" raise "," locked? "]}," Faraday RackBuilder build_env":{"type":"method","name":"build_env","children":[],"call":["Env  new ","connection parallel_manager ","connection ssl ","request headers ","request options ","connection build_exclusive_url ","request options params_encoder ","request params ","request path ","request body ","request method ","request http_method ","connection build_connection build_exclusive_url  "]}," Faraday RackBuilder dup":{"type":"method","name":"dup","children":[],"call":[" class new ","@handlers dup "," class ","@adapter dup "]}," Faraday RackBuilder ==":{"type":"method","name":"==","children":[],"call":["@handlers == ","other handlers ","other is_a? "," class ","@adapter == ","other adapter "]}," Faraday RackBuilder to_app":{"type":"method","name":"to_app","children":[],"call":["handler build ","@handlers reverse inject ","@handlers reverse ","@adapter build "]}," Faraday RackBuilder app":{"type":"method","name":"app","children":[],"call":[" to_app ","response finish ","env parallel? ","env response= ","Response  new "," lambda "," lock! "," ensure_adapter! ","Response  new  finish ","env Response  new = "]}," Faraday RackBuilder build_response":{"type":"method","name":"build_response","children":[],"call":[" app call "," build_env "," app "," warn "," adapter_set? "]}," Faraday RackBuilder delete":{"type":"method","name":"delete","children":[],"call":["@handlers delete "," raise_if_locked "]}," Faraday RackBuilder swap":{"type":"method","name":"swap","children":[],"call":[" insert ","@handlers delete_at "," assert_index "," raise_if_locked "," assert_ assert_index  "]}," Faraday RackBuilder insert_after":{"type":"method","name":"insert_after","children":[],"call":[" insert ","index + "," assert_index "," assert_index  + "," assert_ assert_index  "]}," Faraday RackBuilder insert":{"type":"method","name":"insert","children":[],"call":["@handlers insert "," class Handler  new "," class "," assert_index "," raise_if_locked "," warn_middleware_after_adapter "," inserting_after_adapter? ","@ class Handler  new s insert "," assert_ assert_index  "]}," Faraday RackBuilder adapter":{"type":"method","name":"adapter","children":[],"call":[" use_symbol "," class Handler  new "," class ","Faraday Adapter  lookup_middleware ","klass is_a? ","klass == ","klass nil? ","Faraday Adapter  lookup_middleware  is_a? ","Faraday Adapter  lookup_middleware  == ","Faraday Adapter  lookup_middleware  nil? "]}," Faraday RackBuilder response":{"type":"method","name":"response","children":[],"call":[" use_symbol "]}," Faraday RackBuilder request":{"type":"method","name":"request","children":[],"call":[" use_symbol "]}," Faraday RackBuilder use":{"type":"method","name":"use","children":[],"call":["@handlers << "," class Handler  new "," class "," raise_if_locked "," use_symbol ","klass is_a? "," warn_middleware_after_adapter "," adapter_set? "," raise_if_adapter "]}," Faraday RackBuilder locked?":{"type":"method","name":"locked?","children":[],"call":["@handlers frozen? "]}," Faraday RackBuilder lock!":{"type":"method","name":"lock!","children":[],"call":["@handlers freeze "]}," Faraday RackBuilder []":{"type":"method","name":"[]","children":[],"call":["@handlers [] "]}," Faraday RackBuilder build":{"type":"method","name":"build","children":[],"call":[" block_given? ","@handlers clear ","options [] "," raise_if_locked "," adapter ","Faraday  default_adapter "," request ","Faraday  default_adapter_options "]}," Faraday RackBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[" adapter ","Faraday  default_adapter "," request ","@handlers empty? "," build ","Proc  new "," block_given? "]}," Faraday RackBuilder Handler build":{"type":"method","name":"build","children":[],"call":[" klass new "," klass "]}," Faraday RackBuilder Handler ==":{"type":"method","name":"==","children":[],"call":["@name == ","other to_s "," klass == "," klass ","other respond_to? "," name == ","other name "," name ","other is_a? "]}," Faraday RackBuilder Handler inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Faraday RackBuilder Handler klass":{"type":"method","name":"klass","children":[],"call":["@@constants [] ","REGISTRY  get "]}," Faraday RackBuilder Handler initialize":{"type":"method","name":"initialize","children":[],"call":["@@constants []= ","@@constants_mutex synchronize ","klass respond_to? ","klass to_s ","REGISTRY  set "]}," Faraday FlatParamsEncoder decode":{"type":"method","name":"decode","children":[],"call":[]}," Faraday FlatParamsEncoder encode":{"type":"method","name":"encode","children":[],"call":[]}," Faraday NestedParamsEncoder dehash":{"type":"method","name":"dehash","children":[],"call":[]}," Faraday NestedParamsEncoder decode":{"type":"method","name":"decode","children":[],"call":[]}," Faraday NestedParamsEncoder encode":{"type":"method","name":"encode","children":[],"call":[]}," Faraday Env member_set":{"type":"method","name":"member_set","children":[],"call":[]}," Faraday Env in_member_set?":{"type":"method","name":"in_member_set?","children":[],"call":[" class member_set include? ","key to_s "," class member_set "," class ","key to_sym "]}," Faraday Env custom_members":{"type":"method","name":"custom_members","children":[],"call":[]}," Faraday Env inspect":{"type":"method","name":"inspect","children":[],"call":["attrs join "," class ","attrs << "," custom_members inspect "," custom_members "," custom_members empty? ! "," custom_members empty? ","value inspect "," send "," members each "," members "," send  inspect "]}," Faraday Env parallel?":{"type":"method","name":"parallel?","children":[],"call":[" parallel_manager ! ! "," parallel_manager ! "," parallel_manager "]}," Faraday Env parse_body?":{"type":"method","name":"parse_body?","children":[],"call":["StatusesWithoutBody  include? ! ","StatusesWithoutBody  include? "," status "]}," Faraday Env clear_body":{"type":"method","name":"clear_body","children":[],"call":[" body= "," request_headers []= "," request_headers "," +@ "]}," Faraday Env needs_body?":{"type":"method","name":"needs_body?","children":[],"call":["MethodsWithBodies  include? "," method "," body ! "," body "]}," Faraday Env success?":{"type":"method","name":"success?","children":[],"call":["SuccessfulStatuses  include? "," status "]}," Faraday Env []=":{"type":"method","name":"[]=","children":[],"call":[" custom_members []= "," custom_members "," in_member_set? "," current_body ","key == "]}," Faraday Env []":{"type":"method","name":"[]","children":[],"call":[" custom_members [] "," custom_members "," in_member_set? "," [] "," current_body ","key == "]}," Faraday Env from":{"type":"method","name":"from","children":[],"call":[]}," Faraday ConnectionOptions new_builder":{"type":"method","name":"new_builder","children":[],"call":[" builder_class new "," builder_class "]}," Faraday ProxyOptions from":{"type":"method","name":"from","children":[],"call":[]}," Faraday SSLOptions disable?":{"type":"method","name":"disable?","children":[],"call":[" verify? ! "," verify? "]}," Faraday SSLOptions verify?":{"type":"method","name":"verify?","children":[],"call":[" verify != "," verify "]}," Faraday RequestOptions []=":{"type":"method","name":"[]=","children":[],"call":["ProxyOptions  from ","key to_sym == ","key to_sym "]}," Faraday Options fetch_error_class":{"type":"method","name":"fetch_error_class","children":[],"call":[]}," Faraday Options inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Faraday Options symbolized_key_set":{"type":"method","name":"symbolized_key_set","children":[],"call":["Set  new ","k to_sym "," keys map "," keys "]}," Faraday Options []":{"type":"method","name":"[]","children":[],"call":[" []= "," instance_eval "," class memoized_attributes [] "," class memoized_attributes "," class ","key to_sym ","key to_sym  to_sym "]}," Faraday Options memoized_attributes":{"type":"method","name":"memoized_attributes","children":[],"call":[]}," Faraday Options memoized":{"type":"method","name":"memoized","children":[],"call":[]}," Faraday Options attribute_options":{"type":"method","name":"attribute_options","children":[],"call":[]}," Faraday Options options_for":{"type":"method","name":"options_for","children":[],"call":[]}," Faraday Options options":{"type":"method","name":"options","children":[],"call":[]}," Faraday Options inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","  << ","values join ","values empty? ","values << ","value inspect "," send "," members each "," members "," send s join ","values join  join "," send s empty? ","values join  empty? "," send s << ","values join  << "," send  inspect "]}," Faraday Options to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash []= ","key to_sym ","value nil? "," send "," members each "," members "," send  nil? "]}," Faraday Options value?":{"type":"method","name":"value?","children":[],"call":[" values include? "," values "]}," Faraday Options each_value":{"type":"method","name":"each_value","children":[],"call":[" values each "," values "," to_enum "," block_given? "]}," Faraday Options key?":{"type":"method","name":"key?","children":[],"call":[" keys include? "," keys "]}," Faraday Options each_key":{"type":"method","name":"each_key","children":[],"call":[" keys each "," keys "," to_enum "," block_given? "]}," Faraday Options empty?":{"type":"method","name":"empty?","children":[],"call":[" keys empty? "," keys "]}," Faraday Options keys":{"type":"method","name":"keys","children":[],"call":[" send nil? "," send "," members reject "," members "]}," Faraday Options values_at":{"type":"method","name":"values_at","children":[],"call":[" send ","keys map "]}," Faraday Options fetch":{"type":"method","name":"fetch","children":[],"call":[" send "," raise ","key inspect "," class fetch_error_class "," class ","Proc  new call ","Proc  new "," block_given? ","args first ","args size > ","args size "," symbolized_key_set include? ","key to_sym "," symbolized_key_set ","args empty? ! ","args empty? "]}," Faraday Options merge":{"type":"method","name":"merge","children":[],"call":[" dup update "," dup "," dup merge! "]}," Faraday Options clear":{"type":"method","name":"clear","children":[],"call":[" delete "," members each "," members "]}," Faraday Options delete":{"type":"method","name":"delete","children":[],"call":[" send "]}," Faraday Options update":{"type":"method","name":"update","children":[],"call":[" send ","value nil? ","hash []= ","value each ","Hash  === ","sub_options from "," class options_for "," class ","obj each ","new_value nil? ","value dup ","value is_a? ","sub_options from  nil? ","sub_options from  each "," class options_for  from ","new_sub_options from  nil? ","value dup  nil? ","sub_options from  dup ","sub_options from  is_a? "]}," Faraday Options each":{"type":"method","name":"each","children":[],"call":[" send ","key to_sym "," members each "," members "," to_enum "," block_given? ","block call "]}," Faraday Options from":{"type":"method","name":"from","children":[],"call":[]}," Faraday Middleware initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Middleware inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Faraday Middleware loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," Faraday Middleware new":{"type":"method","name":"new","children":[],"call":[]}," Faraday Middleware dependency":{"type":"method","name":"dependency","children":[],"call":[]}," Faraday TimeoutError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday ClientError inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","inner << ","inner empty? ","@response inspect ","@wrapped_exception inspect "]}," Faraday ClientError backtrace":{"type":"method","name":"backtrace","children":[],"call":["@wrapped_exception backtrace "]}," Faraday ClientError initialize":{"type":"method","name":"initialize","children":[],"call":["ex to_s ","ex [] ","ex respond_to? ","ex message "]}," Faraday Connection set_authorization_header":{"type":"method","name":"set_authorization_header","children":[],"call":[" headers []= "," headers ","Faraday Request  lookup_middleware header ","Faraday Request  lookup_middleware "," Faraday Request  lookup_middleware header s []= "," Faraday Request  lookup_middleware header s ","Faraday Request  lookup_middleware Faraday Request  lookup_middleware header  "]}," Faraday Connection with_uri_credentials":{"type":"method","name":"with_uri_credentials","children":[],"call":["Utils  unescape ","uri password ","uri user "]}," Faraday Connection dup":{"type":"method","name":"dup","children":[],"call":[" class new "," options dup "," options "," ssl dup "," ssl "," builder dup "," builder "," params dup "," params "," headers dup "," headers "," build_exclusive_url "," class "," build_url "]}," Faraday Connection build_exclusive_url":{"type":"method","name":"build_exclusive_url","children":[],"call":["uri query= ","uri query empty? ","uri query ","params to_query "," options params_encoder "," options ","base + ","base path= ","base path + ","base path ","base dup ","base path !~ "," url_prefix ","url empty? ","url respond_to? ","url to_s gsub ","url to_s ","URI  parse opaque ","URI  parse "," url_prefix dup ","base path end_with? ! ","base path end_with? ","Utils  URI opaque ","Utils  URI ","base +  query= ","base +  query empty? ","base +  query ","base dup  + "," url_prefix  + "," url_prefix dup  + ","base dup  path= "," url_prefix  path= "," url_prefix dup  path= ","base dup  path + "," url_prefix  path + "," url_prefix dup  path + ","base dup  path "," url_prefix  path "," url_prefix dup  path ","base dup  dup "," url_prefix  dup "," url_prefix dup  dup ","base dup  path !~ "," url_prefix  path !~ "," url_prefix dup  path !~ "," url to_s gsub _prefix ","url to_s gsub  empty? ","url to_s gsub  respond_to? ","url to_s gsub  to_s gsub ","url to_s gsub  to_s "," url to_s gsub _prefix dup ","base dup  path end_with? ! "," url_prefix  path end_with? ! "," url_prefix dup  path end_with? ! ","base dup  path end_with? "," url_prefix  path end_with? "," url_prefix dup  path end_with? "]}," Faraday Connection build_request":{"type":"method","name":"build_request","children":[],"call":[" block_given? ","req options= "," options merge "," proxy "," options ","req headers= "," headers dup "," headers ","req params= "," params dup "," params ","Request  create "," options dup "]}," Faraday Connection run_request":{"type":"method","name":"run_request","children":[],"call":[" builder build_response "," builder "," block_given? ","req body= ","req headers update ","req headers ","req url "," build_request "," raise ","METHODS  include? ! ","METHODS  include? ","req options= ","req options merge ","req options "," proxy_from_env "," URI absolute? "," URI "," proxy ","Utils  URI absolute? ","Utils  URI "," proxy_for_request ","Request  run "," app call "," app ","request to_env ","Request  create ","req options proxy= "," proxy_from_request to_env  ","request to_request to_env  "]}," Faraday Connection build_url":{"type":"method","name":"build_url","children":[],"call":["uri query= ","query_values to_query "," options params_encoder "," options ","query_values empty? ","query_values update "," params dup merge_query ","uri query "," params dup "," params "," build_exclusive_url "," replace_query ","uri path= ","uri path ","@path_prefix size > ","@path_prefix size ","uri path !~ ","uri port ","uri host ","uri scheme ","URI  parse ","url to_s ","params to_query ","params empty? ","params update ","@params dup merge_query ","@params dup ","new_path << ","uri path empty? ","@path_prefix dup "," build_exclusive_url  query= ","URI  parse  query= "," params dup merge_query  to_query "," options @params dup merge_query _encoder "," params dup merge_query  empty? "," params dup merge_query  update "," @params dup merge_query  dup merge_query "," build_exclusive_url  query ","URI  parse  query "," @params dup merge_query  dup "," @params dup merge_query  "," build_exclusive_url  path= ","URI  parse  path= "," build_exclusive_url  path ","URI  parse  path "," build_exclusive_url  path !~ ","URI  parse  path !~ "," build_exclusive_url  port ","URI  parse  port "," build_exclusive_url  host ","URI  parse  host "," build_exclusive_url  scheme ","URI  parse  scheme ","@params dup merge_query  to_query ","@params dup merge_query  empty? ","@params dup merge_query  update ","@@params dup merge_query  dup merge_query ","@@params dup merge_query  dup ","@path_prefix dup  << "," build_exclusive_url  path empty? ","URI  parse  path empty? "]}," Faraday Connection proxy":{"type":"method","name":"proxy","children":[],"call":["ProxyOptions  from ","arg nil? "," warn "," raise ","arg []= "," proxy_arg_to_uri ","arg [] ","URI  parse ","arg merge ","arg fetch ","arg is_a? "," class URI "," class ","@proxy [] "," with_uri_credentials "," proxy_arg_to_ class URI  ","ProxyOptions  from  [] "," with_ class URI _credentials "]}," Faraday Connection default_parallel_manager":{"type":"method","name":"default_parallel_manager","children":[],"call":[" block_given? ","handler klass setup_parallel_manager ","handler klass ","h klass supports_parallel? ","h klass ","h klass respond_to? ","@builder handlers detect ","@builder handlers ","adapter setup_parallel_manager "," support_parallel? ","@builder adapter klass ","@builder adapter ","@builder handlers find ","@builder adapter klass  setup_parallel_manager ","@builder @builder adapter klass  klass ","@builder @builder adapter klass  "]}," Faraday Connection authorization":{"type":"method","name":"authorization","children":[],"call":[" set_authorization_header "," headers []= ","Faraday Request Authorization  header "," headers "," warn "]}," Faraday Connection token_auth":{"type":"method","name":"token_auth","children":[],"call":[" set_authorization_header ","@headers []= ","values * ","  * ","values << ","value to_s inspect ","value to_s ","options each ","token to_s inspect ","token to_s "," headers []= ","Faraday Request TokenAuthentication  header "," headers ","@builder insert "," warn "]}," Faraday Connection basic_auth":{"type":"method","name":"basic_auth","children":[],"call":[" set_authorization_header ","@headers []= ","Base64  encode64 strip ","Base64  encode64 ","auth gsub! "," headers []= ","Faraday Request BasicAuthentication  header "," headers ","@builder insert "," warn "," set_Base64  encode64 orization_header ","Base64  encode64  gsub! "]}," Faraday Connection headers=":{"type":"method","name":"headers=","children":[],"call":["@headers replace "]}," Faraday Connection params=":{"type":"method","name":"params=","children":[],"call":["@params replace "]}," Faraday AutoloadHelper all_loaded_constants":{"type":"method","name":"all_loaded_constants","children":[],"call":["a loaded? ","a respond_to? ","(send\n  (send nil :constants) :map) select "," const_get "," constants map "," constants "]}," Faraday AutoloadHelper load_autoloaded_constants":{"type":"method","name":"load_autoloaded_constants","children":[],"call":[" const_get "," autoload? "," constants each "," constants "]}," Faraday Adapter save_response":{"type":"method","name":"save_response","children":[],"call":["env response_headers= "," block_given? ","response_headers update ","headers nil? ","Utils Headers  new tap ","Utils Headers  new ","env reason_phrase= ","reason_phrase to_s strip ","reason_phrase to_s ","env body= ","env status= ","env response ","env response finish ","env parallel? ","env []= ","finished ! "]}," Faraday Adapter call":{"type":"method","name":"call","children":[],"call":["env clear_body ","env needs_body? ","env response= ","Response  new "," process_body_for_request ","env []= ","env [] []= ","env [] ","Connection METHODS_WITH_BODIES  include? ","env [] ! "]}," Faraday Adapter Parallelism inherited":{"type":"method","name":"inherited","children":[],"call":["subclass supports_parallel= "," supports_parallel? "]}," Faraday Adapter Parallelism supports_parallel?":{"type":"method","name":"supports_parallel?","children":[],"call":[]}," Faraday Adapter Typhoeus parallel?":{"type":"method","name":"parallel?","children":[],"call":["env [] ! ! ","env [] ! ","env [] "]}," Faraday Adapter Typhoeus request_options":{"type":"method","name":"request_options","children":[],"call":["env [] "]}," Faraday Adapter Typhoeus configure_socket":{"type":"method","name":"configure_socket","children":[],"call":["req interface= ","bind [] "," request_options [] "," request_options "," request_options []  [] "]}," Faraday Adapter Typhoeus configure_timeout":{"type":"method","name":"configure_timeout","children":[],"call":["req connect_timeout= ","env_req [] * ","env_req [] ","req timeout= "," request_options "," request_options  [] * "," request_options  [] "]}," Faraday Adapter Typhoeus configure_proxy":{"type":"method","name":"configure_proxy","children":[],"call":["req proxy_password= ","proxy [] ","req proxy_username= ","req proxy= ","proxy [] port ","proxy [] host "," request_options [] "," request_options ","req  request_options [] _password= "," request_options []  [] ","req  request_options [] _username= ","req  request_options [] = "," request_options []  [] port "," request_options []  [] host "]}," Faraday Adapter Typhoeus configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["req ssl_capath= ","ssl [] ","req ssl_cacert= ","req ssl_key= ","req ssl_cert= ","req ssl_version= ","env [] ","req env [] _capath= ","env []  [] ","req env [] _cacert= ","req env [] _key= ","req env [] _cert= ","req env [] _version= "]}," Faraday Adapter Typhoeus request":{"type":"method","name":"request","children":[],"call":["env [] finish ","env [] "," parallel? ","response_headers parse ","resp headers "," save_response ","resp body ","resp code "," raise ","resp curl_error_message ","resp curl_return_code ","resp timed_out? ","req on_complete "," configure_socket "," configure_timeout "," configure_proxy "," configure_ssl "," Typhoeus Request  new ","env [] disable? ","env [] to_s ","method to_s upcase ","method to_s ","method == ","env [] fetch ! ","env [] fetch "," Typhoeus Request  new  on_complete ","method to_s upcase  to_s upcase ","env []  to_s upcase ","method to_s upcase  to_s ","env []  to_s ","method to_s upcase  == ","env []  == "]}," Faraday Adapter Typhoeus read_body":{"type":"method","name":"read_body","children":[],"call":["env []= ","env [] read ","env [] ","env [] respond_to? "]}," Faraday Adapter Typhoeus perform_request":{"type":"method","name":"perform_request","children":[],"call":[" raise ","hydra run "," parallel? ","hydra queue "," request "," class setup_parallel_manager "," class ","env [] "," read_body "]}," Faraday Adapter Typhoeus call":{"type":"method","name":"call","children":[],"call":["@app call "," perform_request "," raise ","hydra run ","env [] ! ","env [] ","hydra queue ","env [] finish ","env update ","resp body "," parse_response_headers ","resp headers ","resp code ","req on_complete "," Typhoeus Request  new ","env [] to_s "," class setup_parallel_manager "," class "," process_body_for_request ","env [] [] == ","env [] [] ","Error ConnectionFailed  new ","req connect_timeout= ","env_req [] * ","env_req [] ","req timeout= ","is_parallel ! ","env [] ! ! "," response_headers parse "," response_headers ","env [] fetch ! ","env [] fetch ","env []= ","env [] read ","env [] respond_to? ","response_headers parse "," save_response ","req ssl_capath= ","ssl [] ","req ssl_cacert= ","req ssl_key= ","req ssl_cert= ","req proxy_password= ","proxy [] ","req proxy_username= ","req proxy= ","proxy [] port ","proxy [] host "," perform_ Typhoeus Request  new uest "," Typhoeus Request  new  on_complete "," process_body_for_ Typhoeus Request  new uest "," Typhoeus Request  new  connect_timeout= ","env_ Typhoeus Request  new  [] * ","env []  [] * ","env_ Typhoeus Request  new  [] ","env []  [] "," Typhoeus Request  new  timeout= ","env [] ! !  ! "," Typhoeus Request  new  ssl_capath= ","req env [] _capath= "," Typhoeus Request  new  ssl_cacert= ","req env [] _cacert= "," Typhoeus Request  new  ssl_key= ","req env [] _key= "," Typhoeus Request  new  ssl_cert= ","req env [] _cert= "," Typhoeus Request  new  proxy_password= ","req env_req [] _password= ","env_req []  [] "," Typhoeus Request  new  proxy_username= ","req env_req [] _username= "," Typhoeus Request  new  proxy= ","req env_req [] = ","env_req []  [] port ","env_req []  [] host "]}," Faraday Adapter Test call":{"type":"method","name":"call","children":[],"call":["@app call "," raise ","env [] "," save_response ","stub block call ","stub block ","(lvar :env) take ","block_arity >= ","stub block arity ","env []= ","params_encoder decode ","env [] query "," stubs match ","env request_headers "," stubs ","Faraday Utils  default_params_encoder ","env request params_encoder ","env request ","Faraday Utils  normalize_path ","env [] host "," request_uri ","env update "," response_headers update "," response_headers ","Rack Utils  parse_nested_query ","Faraday Utils  parse_nested_query ","env params_encoder decode ","env params_encoder "," Timeout  timeout "," request_timeout "," stubs match  block call "," stubs match  block ","stub block arity  >= "," stubs match  block arity ","(lvar :env) take _encoder decode ","env [] env [] query  ","  stubs match s match ","  stubs match s ","Faraday Utils  default_(lvar :env) take _encoder ","env request (lvar :env) take _encoder ","env [] env [] host  ","Rack Utils  parse_nested_env [] query  ","Faraday Utils  parse_nested_env [] query  ","env (lvar :env) take _encoder decode ","env (lvar :env) take _encoder "," Timeout   request_timeout  "," request_ request_timeout  "]}," Faraday Adapter Test configure":{"type":"method","name":"configure","children":[],"call":[" stubs "]}," Faraday Adapter Test initialize":{"type":"method","name":"initialize","children":[],"call":[" configure ","Stubs  new "]}," Faraday Adapter Test Stub to_s":{"type":"method","name":"to_s","children":[],"call":[" body "," path "]}," Faraday Adapter Test Stub headers_match?":{"type":"method","name":"headers_match?","children":[],"call":["request_headers [] == "," headers [] "," headers ","request_headers [] "," headers keys all? "," headers keys ","Set  new == ","Set  new ","hs [] "," headers dup tap "," headers dup "," strict_mode "]}," Faraday Adapter Test Stub params_match?":{"type":"method","name":"params_match?","children":[],"call":["request_params [] == "," params [] "," params ","request_params [] "," params keys all? "," params keys ","params [] ","params keys all? ","params keys ","Set  new == ","Set  new "," strict_mode ","env params_encoder decode "," query ","env params_encoder ","env [] ","env []  [] == ","env []  [] "]}," Faraday Adapter Test Stub path_match?":{"type":"method","name":"path_match?","children":[],"call":[" path == "," path ","(send\n  (lvar :meta) :[]=\n  (sym :match_data)\n  (send\n    (send nil :path) :match\n    (lvar :request_path))) ! ! ","(send\n  (lvar :meta) :[]=\n  (sym :match_data)\n  (send\n    (send nil :path) :match\n    (lvar :request_path))) ! ","meta []= "," path match "," path is_a? "]}," Faraday Adapter Test Stub matches?":{"type":"method","name":"matches?","children":[],"call":[" headers_match? ","request_body == "," body "," body to_s size zero? "," body to_s size "," body to_s "," params_match? "," path_match? ","Faraday Utils  parse_nested_query ","request_uri split "," host == "," host "," host nil? ","request_path == "," path ","Rack Utils  parse_nested_query ","env [] ","env request_headers ","Faraday Utils  normalize_path ","env [] path ","env [] host "," body_match? ","env []  == ","Faraday Utils  normalize_path  == ","env env request_headers  "]}," Faraday Adapter Test Stub initialize":{"type":"method","name":"initialize","children":[],"call":["Faraday Utils  parse_nested_query ","full split ","full respond_to? ","Rack Utils  parse_nested_query "]}," Faraday Adapter Test Stubs matches?":{"type":"method","name":"matches?","children":[],"call":["stub matches? ","stack each ","stack detect "]}," Faraday Adapter Test Stubs new_stub":{"type":"method","name":"new_stub","children":[],"call":["(or-asgn\n  (send\n    (ivar :@stack) :[]\n    (lvar :request_method))\n  (array)) << ","Stub  new ","@stack [] ","Faraday Utils  normalize_path ","path is_a? ","Faraday Utils  URI host ","Faraday Utils  URI "," normalize_path ","Utils Headers  new ","normalized_path split ","normalized_path respond_to? ","Faraday Utils  normalize_path  split ","Faraday Utils  normalize_path  respond_to? "]}," Faraday Adapter Test Stubs verify_stubbed_calls":{"type":"method","name":"verify_stubbed_calls","children":[],"call":[" raise ","failed_stubs join ","failed_stubs size == ","failed_stubs size ","failed_stubs concat ","stubs map ","stubs size == ","stubs size ","@stack each ","failed_stubs empty? ","stubs empty? "]}," Faraday Adapter Test Stubs options":{"type":"method","name":"options","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs delete":{"type":"method","name":"delete","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs patch":{"type":"method","name":"patch","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs put":{"type":"method","name":"put","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs post":{"type":"method","name":"post","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs head":{"type":"method","name":"head","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs get":{"type":"method","name":"get","children":[],"call":[" new_stub "]}," Faraday Adapter Test Stubs match":{"type":"method","name":"match","children":[],"call":[" matches? ","consumed << ","stack delete ","@consumed [] ","@stack [] ","@stack key? ! ","@stack key? ","@stack [] delete ","stub matches? ","@stack [] detect "," normalize_path ","env [] ","removed nil? ","@stubs_mutex synchronize ","@stack []  delete ","@@stack []  [] ","@@stack []  key? ! ","@@stack []  key? ","@@stack []  [] delete "," matches?  matches? ","@@stack []  [] detect "," normalize_ normalize_path  ","stack delete  nil? ","@ matches? s_mutex synchronize "]}," Faraday Adapter Test Stubs empty?":{"type":"method","name":"empty?","children":[],"call":["@stack empty? "]}," Faraday Adapter Test Stubs initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Monitor  new "]}," Faraday Adapter Rack execute_request":{"type":"method","name":"execute_request","children":[],"call":["@session request ","env [] to_s ","env [] "]}," Faraday Adapter Rack call":{"type":"method","name":"call","children":[],"call":["@app call "," save_response ","response headers ","response body ","response status "," execute_request ","Timer  timeout ","env [] [] ","env [] ","rack_env []= ","SPECIAL_HEADERS  include? ","name upcase tr ","name upcase ","env [] each ","env [] scheme ","env [] read ","env [] respond_to? ","req on_data call ","response body bytesize ","req on_data "," warn "," class name "," class ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_response? "," build_rack_env "," request_timeout "," save_ execute_request  "," execute_request  headers "," execute_request  body "," execute_request  status "," execute_env [] uest ","Timer   request_timeout  "," build_rack_env  []= ","name upcase tr  upcase tr ","name upcase tr  upcase ","env []  on_data call "," execute_request  body bytesize ","env []  on_data "," class name upcase tr  ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_ execute_request ? ","(lvasgn :env [] \n  (send\n    (lvar :env) :[]\n    (sym :env [] uest))) stream_response? "," build_ build_rack_env  "," env [] uest_timeout "," request_ request_timeout  "]}," Faraday Adapter Rack initialize":{"type":"method","name":"initialize","children":[],"call":[" Rack Test Session  new "," Rack MockSession  new "]}," Faraday Adapter Patron create_session":{"type":"method","name":"create_session","children":[],"call":["@block call ","session insecure= "," Patron Session  new ","@config_block call "," Patron Session  new  insecure= "]}," Faraday Adapter Patron call":{"type":"method","name":"call","children":[],"call":[" raise ","err message include? ","err message ","err message == ","@app call "," save_response ","response headers ","response body ","response status ","response status_line gsub ","response status_line ","session request ","env [] ","env [] to_s ","session proxy= ","proxy_uri to_s ","proxy_uri password= ","Utils  escape gsub ","Utils  escape ","proxy [] ","proxy_uri user= ","proxy [] dup ","req [] ","session connect_timeout= ","session timeout= "," create_session ","env []= ","env [] read ","env [] respond_to? "," configure_ssl ","env [] scheme == ","env [] scheme "," connection_timed_out_message? ","@config_block call "," Patron Session  new ","e message include? ","e message ","req on_data call ","response body bytesize ","req on_data "," warn "," class name "," class ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_response? ","env [] finish ","env update ","resp body ","memo update ","k downcase ","resp headers inject ","resp headers ","resp status ","sess send ","args insert ","Faraday Connection METHODS_WITH_BODIES  include? "," process_body_for_request ","Error ConnectionFailed  new "," response_headers update "," response_headers ","session send ","Connection METHODS_WITH_BODIES  include? "," prepend_proxy_auth_string ","proxy [] to_s "," connection "," save_sess send onse ","sess send onse headers ","sess send onse body ","sess send onse status ","sess send onse status_line gsub ","sess send onse status_line ","session env [] uest "," Patron Session  new  request "," Patron Session  new ion request ","session req [] = "," Patron Session  new  proxy= "," Patron Session  new ion proxy= ","proxy [] dup  to_s ","req [] _uri to_s ","proxy [] dup  password= ","req [] _uri password= ","req []  [] ","proxy [] dup  user= ","req [] _uri user= ","req []  [] dup ","env []  [] "," Patron Session  new  connect_timeout= "," Patron Session  new ion connect_timeout= "," Patron Session  new  timeout= "," Patron Session  new ion timeout= "," create_ Patron Session  new  "," create_ Patron Session  new ion ","env [] sess send ond_to? ","req on_env [] to_s  call ","env []  on_data call ","sess send onse body bytesize ","req on_env [] to_s  ","env []  on_data ","(lvasgn :env [] \n  (send\n    (lvar :env) :[]\n    (sym :env [] uest))) stream_response? ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_sess send onse? ","sess send  body ","sess send  headers inject ","sess send  headers ","sess send  status "," Patron Session  new  send "," process_body_for_env [] uest "," sess send onse_headers update "," sess send onse_headers "," Patron Session  new ion send "," prepend_req [] _auth_string ","req []  [] to_s "]}," Faraday Adapter Patron initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," Faraday Adapter NetHttpPersistent configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["http ssl_version= ","ssl [] ","http ca_file= ","http private_key= ","http certificate= ","http cert_store= "," ssl_cert_store ","http verify_mode= "," ssl_verify_mode "," http_set ","(send\n  (const nil :SSL_CONFIGURATIONS) :select) each ","SSL_CONFIGURATIONS  select "]}," Faraday Adapter NetHttpPersistent perform_request":{"type":"method","name":"perform_request","children":[],"call":[" raise ","error message include? ","error message ","http request "," create_request ","env [] ","e message include? ","e message "]}," Faraday Adapter NetHttpPersistent with_net_http_connection":{"type":"method","name":"with_net_http_connection","children":[],"call":["Net HTTP Persistent  new ","proxy [] "," define_method ","(sclass\n  (lvar :proxy_uri)\n  (self)) class_eval ","proxy_uri user= ","proxy_uri password= "," URI  parse ","proxy [] to_s ","proxy [] dup "," URI HTTP  === ","env [] [] ","env [] ","env [] []  [] ","(sclass\n  (lvar : URI  parse )\n  (self)) class_eval ","(sclass\n  (lvar :proxy [] dup )\n  (self)) class_eval ","(sclass\n  (lvar :env [] [] _uri)\n  (self)) class_eval "," URI  parse  user= ","proxy [] dup  user= ","env [] [] _uri user= "," URI  parse  password= ","proxy [] dup  password= ","env [] [] _uri password= ","env [] []  [] to_s ","env [] []  [] dup "]}," Faraday Adapter NetHttp ssl_verify_mode":{"type":"method","name":"ssl_verify_mode","children":[],"call":["ssl fetch ","ssl [] "]}," Faraday Adapter NetHttp ssl_cert_store":{"type":"method","name":"ssl_cert_store","children":[],"call":["cert_store set_default_paths ","OpenSSL X509 Store  new ","ssl [] ","@cert_store set_default_paths ","OpenSSL X509 Store  new tap ","OpenSSL X509 Store  new  set_default_paths ","@OpenSSL X509 Store  new  set_default_paths "]}," Faraday Adapter NetHttp configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["http ssl_version= ","ssl [] ","http verify_depth= ","http ca_path= ","http ca_file= ","http key= ","http cert= ","http cert_store= "," ssl_cert_store ","http verify_mode= "," ssl_verify_mode ","http use_ssl= ","http max_version= ","http min_version= "]}," Faraday Adapter NetHttp net_http_connection":{"type":"method","name":"net_http_connection","children":[],"call":["(lvasgn :proxy\n  (send\n    (send\n      (lvar :env) :[]\n      (sym :request)) :[]\n    (sym :proxy))) new ","env [] scheme == ","env [] scheme ","env [] ","env [] port ","env [] host ","Net HTTP  Proxy ","proxy [] ","proxy [] port ","proxy [] host ","env [] [] ","env [] hostname ","proxy [] hostname ","klass new ","Net HTTP  new ","(lvasgn :env [] [] \n  (send\n    (send\n      (lvar :env) :[]\n      (sym :request)) :[]\n    (sym :env [] [] ))) new ","env [] []  [] ","env [] []  [] port ","env [] []  [] host ","env [] []  [] hostname ","Net HTTP  Proxy  new "]}," Faraday Adapter NetHttp with_net_http_connection":{"type":"method","name":"with_net_http_connection","children":[],"call":[" net_http_connection "]}," Faraday Adapter NetHttp perform_request":{"type":"method","name":"perform_request","children":[],"call":["http request "," create_request ","http get ","env [] ","env [] request_uri ","env [] ! ","get == "," request_with_wrapped_block ","http_response body= ","env [] on_data call ","env [] on_data ","chunk bytesize ","size positive? ","chunk bytesize positive? ","env [] stream_response? "," +@ "]}," Faraday Adapter NetHttp create_request":{"type":"method","name":"create_request","children":[],"call":["request body= ","env [] ","request body_stream= ","env [] respond_to? ","Net HTTPGenericRequest  new ","env [] request_uri ","head != ","env [] ! ! ","env [] ! ","env [] to_s upcase ","env [] to_s ","env [] != ","Net HTTPGenericRequest  new  body= ","Net HTTPGenericRequest  new  body_stream= ","env [] Net HTTPGenericRequest  new _uri "]}," Faraday Adapter NetHttp call":{"type":"method","name":"call","children":[],"call":[" raise ","@app call ","response_headers []= ","http_response each_header "," save_response ","http_response message ","http_response body ","http_response code to_i ","http_response code ","OpenSSL SSL SSLError  === "," perform_request ","http open_timeout= ","req [] ","http read_timeout= ","env [] "," configure_ssl ","env [] scheme == ","env [] scheme "," with_net_http_connection "," configure_request ","e is_a? ","env update ","http_resp body ","http_resp code to_i ","http_resp code ","resp_headers []= ","http_resp each_header ","http send_request ","env [] to_s upcase ","env [] to_s "," full_path_for ","env [] fragment ","env [] query ","env [] path ","Net HTTP  new ","env [] port ","env [] host "," process_body_for_request "," net open_timeout= "," net ","http ca_file= ","ssl [] ","http key= ","http cert= ","http verify_mode= ","ssl [] == ","http use_ssl= "," net_http_class new "," net_http_class ","Error ConnectionFailed  new ","http request ","env []= ","http_req body_stream= ","env [] respond_to? ","Net HTTPGenericRequest  new "," response_headers []= "," response_headers ","http get ","url request_uri ","get == ","http_request body_stream= ","env [] ! ! ","env [] ! ","get != ","http cert_store= ","ssl fetch ","url scheme == ","url scheme ","url inferred_port ","url host ","http ca_path= ","http verify_depth= ","store set_default_paths ","OpenSSL X509 Store  new ","env [] nil? ","head != "," net_http_connection ","url port "," +@ "," connection "," perform_request  each_header ","http request  each_header ","http get  each_header ","http send_request onse each_header ","http request onse each_header ","Net HTTP  new _response each_header "," net_http_class new _response each_header "," net_http_connection _response each_header "," perform_request  message ","http request  message ","http get  message ","http send_request onse message ","http request onse message ","Net HTTP  new _response message "," net_http_class new _response message "," net_http_connection _response message "," perform_request  body ","http request  body ","http get  body ","http send_request onse body ","http request onse body ","Net HTTP  new _response body "," net_http_class new _response body "," net_http_connection _response body "," perform_request  code to_i ","http request  code to_i ","http get  code to_i ","http send_request onse code to_i ","http request onse code to_i ","Net HTTP  new _response code to_i "," net_http_class new _response code to_i "," net_http_connection _response code to_i "," perform_request  code ","http request  code ","http get  code ","http send_request onse code ","http request onse code ","Net HTTP  new _response code "," net_http_class new _response code "," net_http_connection _response code "," perform_env [] uest ","Net HTTP  new  open_timeout= "," net_http_class new  open_timeout= "," net_http_connection  open_timeout= ","env []  [] ","Net HTTP  new  read_timeout= "," net_http_class new  read_timeout= "," net_http_connection  read_timeout= "," configure_env []  "," with_net_Net HTTP  new _connection "," with_net_ net_http_class new _connection "," with_net_ net_http_connection _connection "," configure_env [] uest ","http send_request  body ","Net HTTP  new _resp body "," net_http_class new _resp body "," net_http_connection _resp body ","http send_request  code to_i ","Net HTTP  new _resp code to_i "," net_http_class new _resp code to_i "," net_http_connection _resp code to_i ","http send_request  code ","Net HTTP  new _resp code "," net_http_class new _resp code "," net_http_connection _resp code ","http send_request  each_header ","Net HTTP  new _resp each_header "," net_http_class new _resp each_header "," net_http_connection _resp each_header ","http send_env [] uest ","Net HTTP  new  send_request "," net_http_class new  send_request "," net_http_connection  send_request ","  full_path_for _for "," process_body_for_env [] uest ","Net HTTP  new  ca_file= "," net_http_class new  ca_file= "," net_http_connection  ca_file= ","Net HTTP  new  key= "," net_http_class new  key= "," net_http_connection  key= ","Net HTTP  new  cert= "," net_http_class new  cert= "," net_http_connection  cert= ","Net HTTP  new  verify_mode= "," net_http_class new  verify_mode= "," net_http_connection  verify_mode= ","env []  [] == ","Net HTTP  new  use_ssl= "," net_http_class new  use_ssl= "," net_http_connection  use_ssl= ","http use_env [] = "," net_Net HTTP  new _class new "," net_ net_http_class new _class new "," net_ net_http_connection _class new "," net_Net HTTP  new _class "," net_ net_http_class new _class "," net_ net_http_connection _class ","http env [] uest ","Net HTTP  new  request "," net_http_class new  request "," net_http_connection  request ","http_env []  body_stream= ","Net HTTP  new _req body_stream= "," net_http_class new _req body_stream= "," net_http_connection _req body_stream= ","Net HTTPGenericRequest  new  body_stream= ","Net HTTP  new  get "," net_http_class new  get "," net_http_connection  get ","url env [] uest_uri ","env []  request_uri ","http_env [] uest body_stream= ","Net HTTP  new _request body_stream= "," net_http_class new _request body_stream= "," net_http_connection _request body_stream= ","Net HTTPGenericRequest  new uest body_stream= ","Net HTTP  new  cert_store= "," net_http_class new  cert_store= "," net_http_connection  cert_store= ","http cert_OpenSSL X509 Store  new = ","env []  fetch ","env []  scheme == ","env []  scheme ","env []  inferred_port ","env []  host ","Net HTTP  new  ca_path= "," net_http_class new  ca_path= "," net_http_connection  ca_path= ","Net HTTP  new  verify_depth= "," net_http_class new  verify_depth= "," net_http_connection  verify_depth= ","OpenSSL X509 Store  new  set_default_paths "," net_Net HTTP  new _connection "," net_ net_http_class new _connection "," net_ net_http_connection _connection ","env []  port "]}," Faraday Adapter HTTPClient ssl_verify_mode":{"type":"method","name":"ssl_verify_mode","children":[],"call":["OpenSSL SSL VERIFY_PEER  | ","ssl fetch ","ssl [] "]}," Faraday Adapter HTTPClient ssl_cert_store":{"type":"method","name":"ssl_cert_store","children":[],"call":["cert_store set_default_paths ","OpenSSL X509 Store  new ","ssl [] ","OpenSSL X509 Store  new tap ","OpenSSL X509 Store  new  set_default_paths "]}," Faraday Adapter HTTPClient configure_timeouts":{"type":"method","name":"configure_timeouts","children":[],"call":[" client send_timeout= ","req [] "," client "," client connect_timeout= "," client receive_timeout= "," configure_open_timeout "," configure_timeout ","client receive_timeout= "," request_timeout ","client send_timeout= ","client connect_timeout= "]}," Faraday Adapter HTTPClient configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["ssl_config verify_depth= ","ssl [] ","ssl_config client_key= ","ssl_config client_cert= ","ssl_config add_trust_ca ","ssl_config cert_store= "," ssl_cert_store ","ssl_config verify_mode= "," ssl_verify_mode "," client ssl_config "," client ","client ssl_config "," client ssl_config  verify_depth= ","client ssl_config  verify_depth= "," client ssl_config  client_key= ","client ssl_config  client_key= "," client ssl_config  client_cert= ","client ssl_config  client_cert= "," client ssl_config  add_trust_ca ","client ssl_config  add_trust_ca "," client ssl_config  cert_store= ","client ssl_config  cert_store= "," client ssl_config  verify_mode= ","client ssl_config  verify_mode= "," client  client ssl_config  "," client client ssl_config  ","client  client ssl_config  ","client client ssl_config  "]}," Faraday Adapter HTTPClient configure_proxy":{"type":"method","name":"configure_proxy","children":[],"call":[" client set_proxy_auth ","proxy [] "," client "," client proxy= ","client set_proxy_auth ","client proxy= "]}," Faraday Adapter HTTPClient configure_socket":{"type":"method","name":"configure_socket","children":[],"call":[" client socket_local port= ","bind [] "," client socket_local "," client "," client socket_local host= ","client socket_local port= ","client socket_local ","client socket_local host= "]}," Faraday Adapter HTTPClient call":{"type":"method","name":"call","children":[],"call":[" raise ","OpenSSL SSL SSLError  === ","err message include? ","err message ","@app call "," save_response ","resp reason ","resp headers ","resp body ","resp status "," client request ","env [] "," client ","env []= ","env [] read ","env [] respond_to? "," configure_ssl ","env [] scheme == ","env [] scheme "," configure_timeouts "," configure_socket ","req [] "," configure_proxy "," client transparent_gzip_decompression= "," configure_client ","e is_a? ","e message include? ","e message ","req on_data call ","resp body bytesize ","req on_data "," warn "," class name "," class ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_response? ","http request "," connection "," save_ client request onse "," save_http request onse "," client request  reason ","http request  reason "," client request  headers ","http request  headers "," client request  body ","http request  body "," client request  status ","http request  status "," client env [] uest ","env []  client request ond_to? ","env [] http request ond_to? "," configure_env []  ","env []  [] "," configure_req []  ","env []  on_data call "," client request  body bytesize ","http request  body bytesize ","env []  on_data ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_ client request onse? ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_http request onse? ","(lvasgn :env [] \n  (send\n    (lvar :env) :[]\n    (sym :env [] uest))) stream_response? ","http env [] uest "]}," Faraday Adapter HTTPClient client":{"type":"method","name":"client","children":[],"call":[" HTTPClient  new "]}," Faraday Adapter Excon read_body":{"type":"method","name":"read_body","children":[],"call":["env [] ","env [] read ","env [] respond_to? "]}," Faraday Adapter Excon call":{"type":"method","name":"call","children":[],"call":[" raise ","err message =~ ","err message ","@app call "," save_response ","resp reason_phrase ","resp headers ","resp body ","resp status to_i ","resp status ","conn request "," read_body ","env [] ","env [] to_s upcase ","env [] to_s "," Excon  new ","opts merge ","opts []= ","req [] [] ","req [] ","req [] [] scheme ","req [] [] port ","req [] [] hostname ","req [] [] host ","ssl [] ","ssl fetch ! ! ","ssl fetch ! ","ssl fetch ","env [] scheme == ","env [] scheme "," create_connection ","e message =~ ","e message ","req_opts []= ","req on_data call ","chunk size ","req on_data "," lambda "," opts_from_env ","Error ConnectionFailed  new ","env [] []= ","key downcase ","resp headers each ","env update "," Excon  ssl_ca_path= "," Excon  ssl_verify_peer= ","ssl [] ! ! ","ssl [] ! ","ssl key? "," response_headers update "," response_headers ","http request "," connection ","resp body bytesize "," warn "," class name "," class ","e message match? "," save_conn request onse ","conn request  reason_phrase ","conn request  headers ","conn request  body ","conn request  status to_i ","conn request  status "," Excon  new  request "," create_connection  request ","conn env [] uest "," opts_from_env  merge "," opts_from_env  []= ","env []  [] [] ","env []  [] ","env []  [] [] scheme ","env []  [] [] port ","env []  [] [] hostname ","env []  [] [] host ","env []  fetch ! ! ","env []  fetch ! ","env []  fetch "," create_ Excon  new ection "," create_ create_connection ection ","env [] _opts []= ","req_ opts_from_env  []= ","env []  on_data call ","env []  on_data ","  opts_from_env _from_env ","conn request  headers each "," Excon  env [] _ca_path= "," Excon  env [] _verify_peer= ","env []  [] ! ! ","env []  [] ! ","env []  key? "," conn request onse_headers update "," conn request onse_headers ","http env [] uest ","  Excon  new ection ","  create_connection ection ","conn request  body bytesize "]}," Faraday Adapter Excon initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Adapter EMSynchrony call":{"type":"method","name":"call","children":[],"call":[" raise ","OpenSSL SSL SSLError  === ","err message == ","err message ","err message include? ","@app call ","resp_headers []= ","name to_sym ","client response_header each ","client response_header "," save_response ","client response ","client response_header http_reason ","client response_header status ","client error ","block call ","(send\n  (const nil :Fiber) :new) resume ","EM  stop ","Fiber  new ","EM  run ","EM  reactor_running? ! ","EM  reactor_running? ","request send "," request_config "," lambda ","env [] finish ","env [] ","resp response_header each ","resp response_header ","resp response ","resp response_header status ","env [] add ","env [] to_s downcase to_sym ","env [] to_s downcase ","env [] to_s ","EventMachine HttpRequest  new "," connection_config ","Utils  URI "," create_request ","e is_a? ","e message include? ","e message ","e message == "," execute_single_request "," execute_parallel_request ","env update ","Header  new ","client response_header http_status to_i ","client response_header http_status ","options []= ","(or\n  (send\n    (lvar :req) :[]\n    (sym :timeout))\n  (int 0)) max ","req [] ","options [] []= ","proxy [] ","options [] ","uri port ","uri host ","Addressable URI  parse ","env [] read ","env [] respond_to? ","URI  parse "," process_body_for_request "," response_headers []= "," response_headers ","uri inferred_port ","response_headers []= ","block call  response_header each ","block call  response_header ","block call  response ","client response_header http_client response_header http_reason  ","block call  response_header http_reason ","client response_header client response_header status  ","block call  response_header status ","block call  error ","EventMachine HttpRequest  new  send "," create_request  send ","env [] uest send "," EventMachine HttpRequest  new _config ","  create_request _config "," env [] uest_config ","resp response_header client response_header status  "," create_EventMachine HttpRequest  new  "," create_ create_request  "," create_env [] uest "," execute_single_EventMachine HttpRequest  new  "," execute_single_ create_request  "," execute_single_env [] uest "," execute_parallel_EventMachine HttpRequest  new  "," execute_parallel_ create_request  "," execute_parallel_env [] uest ","client response_header http_client response_header status  to_i ","block call  response_header http_status to_i ","client response_header http_client response_header status  ","block call  response_header http_status ","(or\n  (send\n    (lvar :env [] ) :[]\n    (sym :timeout))\n  (int 0)) max ","env []  [] ","req []  [] ","Addressable URI  parse  port ","URI  parse  port ","Addressable URI  parse  host ","URI  parse  host "," process_body_for_EventMachine HttpRequest  new  "," process_body_for_ create_request  "," process_body_for_env [] uest ","Addressable URI  parse  inferred_port ","URI  parse  inferred_port "]}," Faraday Adapter EMSynchrony setup_parallel_manager":{"type":"method","name":"setup_parallel_manager","children":[],"call":[]}," Faraday Adapter EMSynchrony ParallelManager perform":{"type":"method","name":"perform","children":[],"call":["multi perform ","multi add ","(str \"req_\") to_sym ","multi requests size ","multi requests ","req callback ","item [] ","item [] send ","(str \"a\") to_sym "," queue each "," queue "," EM Synchrony Multi  new "," EM Synchrony Multi  new  perform "," EM Synchrony Multi  new  add ","(str \"item [] send _\") to_sym ","multi item [] send uests size "," EM Synchrony Multi  new  requests size ","multi item [] send uests "," EM Synchrony Multi  new  requests ","item [] send  callback "]}," Faraday Adapter EMSynchrony ParallelManager queue":{"type":"method","name":"queue","children":[],"call":[]}," Faraday Adapter EMSynchrony ParallelManager run":{"type":"method","name":"run","children":[],"call":[" perform ","(send\n  (const nil :Fiber) :new) resume ","EM  stop ","Fiber  new ","EM  run ","EM  reactor_running? ! ","EM  reactor_running? "]}," Faraday Adapter EMSynchrony ParallelManager add":{"type":"method","name":"add","children":[],"call":[" queue << "," queue "]}," EmHttpSslPatch certificate_store":{"type":"method","name":"certificate_store","children":[],"call":["store add_file "," parent connopts tls [] "," parent connopts tls "," parent connopts "," parent ","store set_default_paths ","OpenSSL X509 Store  new ","OpenSSL X509 Store  new  add_file ","OpenSSL X509 Store  new  set_default_paths "]}," EmHttpSslPatch host":{"type":"method","name":"host","children":[],"call":[" parent uri host "," parent uri "," parent "," parent connopts host "," parent connopts "]}," EmHttpSslPatch verify_peer?":{"type":"method","name":"verify_peer?","children":[],"call":[" parent connopts tls [] "," parent connopts tls "," parent connopts "," parent "]}," EmHttpSslPatch ssl_handshake_completed":{"type":"method","name":"ssl_handshake_completed","children":[],"call":[" raise ","OpenSSL SSL SSLError  new "," host ","OpenSSL SSL  verify_certificate_identity "," verify_peer? "," verified_cert_identity? "]}," EmHttpSslPatch ssl_verify_peer":{"type":"method","name":"ssl_verify_peer","children":[],"call":[" raise ","OpenSSL SSL SSLError  new "," host ","e message == ","e message "," certificate_store add_cert "," certificate_store "," certificate_store verify ","OpenSSL X509 Certificate  new "," OpenSSL X509 Certificate  new ificate_store add_OpenSSL X509 Certificate  new  "," OpenSSL X509 Certificate  new ificate_store "," OpenSSL X509 Certificate  new ificate_store verify "]}," Faraday Adapter EMHttp Manager check_finished":{"type":"method","name":"check_finished","children":[],"call":["EventMachine  stop ","@num_succeeded + == ","@num_succeeded + ","@errors size "]}," Faraday Adapter EMHttp Manager perform_request":{"type":"method","name":"perform_request","children":[],"call":[" check_finished ","@errors << ","client error ","client errback ","client callback "]}," Faraday Adapter EMHttp Manager run":{"type":"method","name":"run","children":[],"call":[" reset "," raise ","@errors first ","@errors size > ","@errors size "," perform_request ","@registered_procs each ","EventMachine  run ","@num_registered > ","@errors empty? ","@num_registered positive? "]}," Faraday Adapter EMHttp Manager add":{"type":"method","name":"add","children":[],"call":["@registered_procs << ","Proc  new "," perform_request "," running? "]}," Faraday Adapter EMHttp Manager running?":{"type":"method","name":"running?","children":[],"call":[]}," Faraday Adapter EMHttp Manager reset":{"type":"method","name":"reset","children":[],"call":[]}," Faraday Adapter EMHttp Manager initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Faraday Adapter EMHttp parallel?":{"type":"method","name":"parallel?","children":[],"call":["env [] ! ! ","env [] ! ","env [] "]}," Faraday Adapter EMHttp raise_error":{"type":"method","name":"raise_error","children":[],"call":[" raise ","msg == "," timeout_message? "]}," Faraday Adapter EMHttp error_message":{"type":"method","name":"error_message","children":[],"call":["client error "]}," Faraday Adapter EMHttp perform_single_request":{"type":"method","name":"perform_single_request","children":[],"call":["resp_headers []= ","name to_sym ","client response_header each ","client response_header "," save_response ","client response ","client response_header http_reason ","client response_header status ","req setup_request callback ","req setup_request "," request_config ","env [] ","EventMachine HttpRequest  new "," connection_config "," create_request ","headers []= ","env [] on_data call ","client response bytesize ","env [] on_data "," warn "," class name "," class ","env [] stream_response? ","req callback ","client response_header http_client response_header http_reason  ","client response_header client response_header status  ","EventMachine HttpRequest  new  setup_EventMachine HttpRequest  new uest callback "," create_request  setup_ create_request uest callback ","req setup_request  setup_req setup_request uest callback ","EventMachine HttpRequest  new  setup_EventMachine HttpRequest  new uest "," create_request  setup_ create_request uest ","req setup_request  setup_req setup_request uest "," EventMachine HttpRequest  new uest_config ","  create_request uest_config "," req setup_request uest_config "," create_EventMachine HttpRequest  new uest "," create_ create_request uest "," create_req setup_request uest ","EventMachine HttpRequest  new  callback "," create_request  callback ","req setup_request  callback "]}," Faraday Adapter EMHttp perform_request":{"type":"method","name":"perform_request","children":[],"call":[" raise ","OpenSSL SSL SSLError  === ","err message include? ","err message "," raise_error ","EventMachine  stop "," error_message ","(send\n  (send nil :perform_single_request\n    (lvar :env)) :callback) errback "," perform_single_request callback "," perform_single_request ","EventMachine  run ","env [] finish ","env [] ","env []= ","EventMachine  reactor_running? ","manager add "," parallel? ","e is_a? ","e message include? ","e message "," raise_ error_message  ","  error_message _message ","env []  add "]}," Faraday Adapter EMHttp call":{"type":"method","name":"call","children":[],"call":["@app call "," perform_request "]}," Faraday Adapter EMHttp setup_parallel_manager":{"type":"method","name":"setup_parallel_manager","children":[],"call":[]}," Faraday Adapter EMHttp Options request_options":{"type":"method","name":"request_options","children":[],"call":["env [] "]}," Faraday Adapter EMHttp Options configure_compression":{"type":"method","name":"configure_compression","children":[],"call":["options [] []= ","options [] ","options [] key? ! ","options [] key? ","env [] == ","env [] "]}," Faraday Adapter EMHttp Options configure_timeout":{"type":"method","name":"configure_timeout","children":[],"call":["options []= "," request_options values_at "," request_options "," request_timeout ","  request_options uest_options values_at ","  request_options uest_options ","  request_options uest_timeout "]}," Faraday Adapter EMHttp Options configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["options []= ","env [] fetch ","env [] ","env [] [] ","env [] scheme == ","env [] scheme "]}," Faraday Adapter EMHttp Options configure_socket":{"type":"method","name":"configure_socket","children":[],"call":["options []= ","bind [] "," request_options [] "," request_options "," request_options []  [] "]}," Faraday Adapter EMHttp Options configure_proxy":{"type":"method","name":"configure_proxy","children":[],"call":["options []= ","proxy [] ","proxy [] port ","proxy [] host "," request_options [] "," request_options "," request_options []  [] "," request_options []  [] port "," request_options []  [] host "]}," Faraday Adapter EMHttp Options read_body":{"type":"method","name":"read_body","children":[],"call":["body read ","body respond_to? ","env [] ","env []  read ","env []  respond_to? "]}," Faraday Adapter EMHttp Options request_config":{"type":"method","name":"request_config","children":[],"call":[" configure_compression ","env [] "," read_body "]}," Faraday Adapter EMHttp Options connection_config":{"type":"method","name":"connection_config","children":[],"call":[" configure_ssl "," configure_socket "," configure_timeout "," configure_proxy "]}," Faraday default_connection_options=":{"type":"method","name":"default_connection_options=","children":[],"call":["ConnectionOptions  from "]}," Faraday Utils Headers encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," Faraday Utils Headers init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," Faraday Logger apply_filters":{"type":"method","name":"apply_filters","children":[],"call":["output to_s gsub ","output to_s ","@filter each ","output to_s gsub  to_s gsub ","output to_s gsub  to_s "]}," Faraday Logger filter":{"type":"method","name":"filter","children":[],"call":["@filter push "]}," Faraday Options dup":{"type":"method","name":"dup","children":[],"call":[" class from "," class "]}," Faraday Adapter initialize":{"type":"method","name":"initialize","children":[],"call":["env response "," lambda "]}," Faraday Adapter NetHttpPersistent net_http_connection":{"type":"method","name":"net_http_connection","children":[],"call":["Net HTTP Persistent  new ","proxy [] "," define_method ","(sclass\n  (lvar :proxy_uri)\n  (self)) class_eval ","proxy_uri user= ","proxy_uri password= "," URI  parse ","proxy [] to_s ","proxy [] dup "," URI HTTP  === ","env [] [] ","env [] ","Net HTTP Persistent  instance_method parameters first == ","Net HTTP Persistent  instance_method parameters first ","Net HTTP Persistent  instance_method parameters ","Net HTTP Persistent  instance_method "," cached_connection "," proxy_uri ","@cached_connection proxy= ","@cached_connection proxy_uri != ","@cached_connection proxy_uri ","options []= ","@connection_options [] ","@connection_options key? ","env [] [] [] ","env [] []  [] ","(sclass\n  (lvar : URI  parse )\n  (self)) class_eval ","(sclass\n  (lvar :proxy [] dup )\n  (self)) class_eval ","(sclass\n  (lvar : proxy_uri )\n  (self)) class_eval ","(sclass\n  (lvar :env [] [] _uri)\n  (self)) class_eval "," URI  parse  user= ","proxy [] dup  user= "," proxy_uri  user= ","env [] [] _uri user= "," URI  parse  password= ","proxy [] dup  password= "," proxy_uri  password= ","env [] [] _uri password= ","env [] []  [] to_s ","env [] []  [] dup ","  URI  parse  "," proxy [] dup  ","  proxy_uri  "," env [] [] _uri ","@cached_connection env [] [] = ","@cached_connection  URI  parse  != ","@cached_connection proxy [] dup  != ","@cached_connection  proxy_uri  != ","@cached_connection env [] [] _uri != ","@cached_connection  URI  parse  ","@cached_connection proxy [] dup  ","@cached_connection  proxy_uri  ","@cached_connection env [] [] _uri "]}," Faraday Adapter NetHttp configure_request":{"type":"method","name":"configure_request","children":[],"call":["@config_block call ","http open_timeout= ","req [] ","http read_timeout= ","http max_retries= ","http respond_to? ","http write_timeout= "," request_timeout "]}," Faraday Adapter HTTPClient configure_client":{"type":"method","name":"configure_client","children":[],"call":["@config_block call "," client "]}," Faraday Adapter Excon create_connection":{"type":"method","name":"create_connection","children":[],"call":[" Excon  new ","opts merge ","env [] to_s ","env [] "]}," Faraday Adapter EMSynchrony create_request":{"type":"method","name":"create_request","children":[],"call":["EventMachine HttpRequest  new "," connection_config merge "," connection_config ","Utils  URI ","env [] to_s ","env [] "]}," Faraday Adapter EMHttp create_request":{"type":"method","name":"create_request","children":[],"call":["EventMachine HttpRequest  new "," connection_config merge "," connection_config ","env [] "]}," Faraday Retry rewind_files":{"type":"method","name":"rewind_files","children":[],"call":["value rewind ","value is_a? ","env each ","body each ","body is_a? "]}," Faraday Multipart unique_boundary":{"type":"method","name":"unique_boundary","children":[],"call":["SecureRandom  hex "]}," Faraday Options deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" class from "," class "]}," Faraday Options merge!":{"type":"method","name":"merge!","children":[],"call":[" send ","new_value nil? ","self_value merge "," class options_for "," class ","other each ","self_value merge  nil? "," send  merge "]}," Faraday Connection find_default_proxy":{"type":"method","name":"find_default_proxy","children":[],"call":["http:// + ","uri !~ ","uri empty? ! ","uri empty? ","ENV  [] "," warn ","uri match? ","ENV  fetch ","http:// +  !~ ","ENV  []  !~ ","ENV  fetch  !~ ","http:// +  empty? ! ","ENV  []  empty? ! ","ENV  fetch  empty? ! ","http:// +  empty? ","ENV  []  empty? ","ENV  fetch  empty? ","http:// +  match? ","ENV  []  match? ","ENV  fetch  match? "]}," Faraday Utils Headers initialize_names":{"type":"method","name":"initialize_names","children":[],"call":[]}," Faraday Utils Headers allocate":{"type":"method","name":"allocate","children":[],"call":[]}," Faraday RackBuilder is_adapter?":{"type":"method","name":"is_adapter?","children":[],"call":["handler klass ancestors include? ","handler klass ancestors ","handler klass ","klass ancestors include? ","klass ancestors ","klass <= "]}," Faraday RackBuilder inserting_after_adapter?":{"type":"method","name":"inserting_after_adapter?","children":[],"call":["index > ","adapter_index nil? "," is_adapter? ","@handlers find_index "]}," Faraday RackBuilder adapter_set?":{"type":"method","name":"adapter_set?","children":[],"call":[" is_adapter? ","@handlers any? ","@adapter nil? ! ","@adapter nil? "]}," Faraday RackBuilder warn_middleware_after_adapter":{"type":"method","name":"warn_middleware_after_adapter","children":[],"call":[" warn "]}," Faraday Adapter Patron configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["session insecure= ","session cacert= ","ssl [] ","ssl fetch "]}," Faraday Connection proxy_from_env":{"type":"method","name":"proxy_from_env","children":[],"call":["ProxyOptions  from "," find_default_proxy "," warn ","ENV  [] ","url find_proxy ","URI  parse find_proxy ","URI  parse ","URI  parse respond_to? ","uri hostname ","uri scheme ","Utils  URI ","Faraday  ignore_env_proxy ","uri host ","uri host nil? "," find_default_proxy  hostname ","url find_proxy  hostname ","URI  parse find_proxy  hostname ","Utils  URI  hostname "," find_default_proxy  scheme ","url find_proxy  scheme ","URI  parse find_proxy  scheme ","Utils  URI  scheme "," find_default_proxy  host ","url find_proxy  host ","URI  parse find_proxy  host ","Utils  URI  host "," find_default_proxy  host nil? ","url find_proxy  host nil? ","URI  parse find_proxy  host nil? ","Utils  URI  host nil? "]}," Faraday Connection proxy=":{"type":"method","name":"proxy=","children":[],"call":["ProxyOptions  from "]}," Faraday Connection proxy_for_request":{"type":"method","name":"proxy_for_request","children":[],"call":[" proxy "," proxy_from_env ","Utils  URI absolute? ","Utils  URI "]}," Faraday Adapter Patron connection_timed_out_message?":{"type":"method","name":"connection_timed_out_message?","children":[],"call":["message include? ","CURL_TIMEOUT_MESSAGES  any? "]}," Faraday Retry calculate_retry_interval":{"type":"method","name":"calculate_retry_interval","children":[],"call":["current_interval + "," rand * * ","@options interval "," rand * ","@options interval_randomness to_f ","@options interval_randomness "," rand ","(lvar :current_interval) min ","@options max_interval ","@options interval * ","@options backoff_factor ** ","@options backoff_factor ","@options max - ","@options max ","(lvar :current_interval) min  + ","@options interval *  + ","(lvar :(lvar :current_interval) min ) min ","(lvar :@options interval * ) min "]}," Faraday Retry calculate_retry_after":{"type":"method","name":"calculate_retry_after","children":[],"call":["retry_after_value to_f ","datetime to_time - ","Time  now utc ","Time  now ","datetime to_time ","DateTime  rfc2822 ","env [] [] ","env [] ","env [] []  to_f ","DateTime  rfc2822  to_time - ","DateTime  rfc2822  to_time "]}," Faraday Retry calculate_sleep_amount":{"type":"method","name":"calculate_sleep_amount","children":[],"call":["retry_after >= ","retry_after > ","@options max_interval "," calculate_retry_interval "," calculate_retry_after "," calculate_retry_after  >= "," calculate_retry_after  > "," calculate_ calculate_retry_interval  "," calculate_ calculate_retry_after  "]}," Faraday Retry Options retry_statuses":{"type":"method","name":"retry_statuses","children":[],"call":[" Array "," [] "]}," Faraday Retry Options retry_block":{"type":"method","name":"retry_block","children":[],"call":["Proc  new "," [] "]}," Faraday Adapter NetHttpPersistent cached_connection":{"type":"method","name":"cached_connection","children":[],"call":["(or-asgn\n  (ivasgn :@cached_connection)\n  (hash)) [] ","url port ","url host ","url scheme "]}," Faraday Adapter NetHttpPersistent proxy_uri":{"type":"method","name":"proxy_uri","children":[],"call":["proxy [] "," define_method ","(sclass\n  (lvar :proxy_uri)\n  (self)) class_eval ","proxy_uri user= ","proxy_uri password= "," URI  parse ","proxy [] to_s ","proxy [] dup "," URI HTTP  === ","env [] [] ","env [] ","proxy [] is_a? ","env [] []  [] ","(sclass\n  (lvar : URI  parse )\n  (self)) class_eval ","(sclass\n  (lvar :proxy [] dup )\n  (self)) class_eval ","(sclass\n  (lvar :env [] [] _uri)\n  (self)) class_eval "," URI  parse  user= ","proxy [] dup  user= ","env [] [] _uri user= "," URI  parse  password= ","proxy [] dup  password= ","env [] [] _uri password= ","env [] []  [] to_s ","env [] []  [] dup ","env [] []  [] is_a? "]}," Faraday Adapter NetHttpPersistent http_set":{"type":"method","name":"http_set","children":[],"call":["http send ","http send != "]}," Faraday Adapter NetHttp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Request marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" options= ","serialised [] "," params= "," path= "," headers= "," body= "," method= "," http_method= "]}," Faraday Request marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" options "," params "," path "," headers "," body "," method "," http_method "]}," Faraday respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" default_connection respond_to? "," default_connection "]}," Faraday Utils Headers add_parsed":{"type":"method","name":"add_parsed","children":[],"call":[" []= "," [] << << "," [] << "," [] "," [] to_s "," key? "]}," Faraday Response to_hash":{"type":"method","name":"to_hash","children":[],"call":[" env response_headers "," env "," env body "," env status "," env url "]}," Faraday Response RaiseError response_values":{"type":"method","name":"response_values","children":[],"call":["env body ","env response_headers ","env status ","env request_body ","env request_headers ","env params ","env url path ","env url ","env method "," query_params ","response merge "," options fetch "," options "]}," Faraday Response RaiseError on_complete":{"type":"method","name":"on_complete","children":[],"call":[" raise "," response_values ","Faraday ProxyAuthError  new ","env [] "]}," Faraday Response Logger on_complete":{"type":"method","name":"on_complete","children":[],"call":["@formatter response "]}," Faraday Response Logger call":{"type":"method","name":"call","children":[],"call":["@formatter request "]}," Faraday Response Logger initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","formatter_class new ","options delete "," Logger  new "," require "]}," Faraday Request UrlEncoded request_type":{"type":"method","name":"request_type","children":[],"call":["type split first ","type split ","type index ","env request_headers [] to_s ","env request_headers [] ","env request_headers ","type split first  split first ","env request_headers [] to_s  split first ","type split first  split ","env request_headers [] to_s  split ","type split first  index ","env request_headers [] to_s  index "]}," Faraday Request UrlEncoded process_request?":{"type":"method","name":"process_request?","children":[],"call":["type == "," class mime_type "," class ","type empty? ","env body "," request_type "," request_type  == "," class mime_ request_type  "," request_type  empty? "," request_ request_type  "]}," Faraday Request UrlEncoded match_content_type":{"type":"method","name":"match_content_type","children":[],"call":["env body ","env body respond_to? "," class mime_type "," class ","env request_headers [] ","env request_headers "," process_request? "]}," Faraday Request UrlEncoded call":{"type":"method","name":"call","children":[],"call":["@app call ","env body= ","params to_query ","env params_encoder ","Faraday Utils ParamsHash  [] "," match_content_type ","Faraday Utils ParamsHash  []  to_query ","env Faraday Utils ParamsHash  [] _encoder "]}," Faraday Request TokenAuthentication initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Request TokenAuthentication header":{"type":"method","name":"header","children":[],"call":[]}," Faraday Request Retry calculate_retry_interval":{"type":"method","name":"calculate_retry_interval","children":[],"call":["current_interval + "," rand * * ","@options interval "," rand * ","@options interval_randomness to_f ","@options interval_randomness "," rand ","(lvar :current_interval) min ","@options max_interval ","@options interval * ","@options backoff_factor ** ","@options backoff_factor ","@options max - ","@options max ","(lvar :current_interval) min  + ","@options interval *  + ","(lvar :(lvar :current_interval) min ) min ","(lvar :@options interval * ) min "]}," Faraday Request Retry calculate_retry_after":{"type":"method","name":"calculate_retry_after","children":[],"call":["retry_after_value to_f ","datetime to_time - ","Time  now utc ","Time  now ","datetime to_time ","DateTime  rfc2822 ","env [] [] ","env [] ","env [] []  to_f ","DateTime  rfc2822  to_time - ","DateTime  rfc2822  to_time "]}," Faraday Request Retry rewind_files":{"type":"method","name":"rewind_files","children":[],"call":["value rewind ","value is_a? ","body each ","body is_a? "]}," Faraday Request Retry retry_request?":{"type":"method","name":"retry_request?","children":[],"call":["@options retry_if call ","@options retry_if ","@options methods include? ","env [] ","@options methods "]}," Faraday Request Retry build_exception_matcher":{"type":"method","name":"build_exception_matcher","children":[],"call":["error class to_s == ","ex to_s ","error class to_s ","error class ","error is_a? ","ex is_a? ","exceptions any? "," define_method ","(sclass\n  (lvar :matcher)\n  (self)) class_eval ","Module  new ","Object  const_get ","Object  const_defined? ","(sclass\n  (lvar :Module  new )\n  (self)) class_eval "]}," Faraday Request Retry call":{"type":"method","name":"call","children":[],"call":["e response "," raise ","e is_a? "," sleep "," calculate_sleep_amount ","retries + ","@options retry_block call ","@options retry_block "," rewind_files "," retry_request? ","retries positive? ","Faraday RetriableResponse  new ","@options retry_statuses include? ","resp status ","@options retry_statuses ","@app call tap ","@app call ","env []= ","env [] ","@options max "," calculate_ calculate_sleep_amount  ","@options max  + ","@options max  positive? "]}," Faraday Request Retry calculate_sleep_amount":{"type":"method","name":"calculate_sleep_amount","children":[],"call":["retry_after >= ","retry_after > ","@options max_interval "," calculate_retry_interval "," calculate_retry_after "," calculate_retry_after  >= "," calculate_retry_after  > "," calculate_ calculate_retry_interval  "," calculate_ calculate_retry_after  "]}," Faraday Request Retry initialize":{"type":"method","name":"initialize","children":[],"call":[" build_exception_matcher ","@options exceptions ","Options  from ","Options  from  exceptions "]}," Faraday Request Retry Options retry_statuses":{"type":"method","name":"retry_statuses","children":[],"call":[" Array "," [] "]}," Faraday Request Retry Options retry_block":{"type":"method","name":"retry_block","children":[],"call":[" proc "," [] "]}," Faraday Request Retry Options retry_if":{"type":"method","name":"retry_if","children":[],"call":[" [] "]}," Faraday Request Retry Options methods":{"type":"method","name":"methods","children":[],"call":[" Array "," [] "]}," Faraday Request Retry Options exceptions":{"type":"method","name":"exceptions","children":[],"call":[" Array "," [] "]}," Faraday Request Retry Options backoff_factor":{"type":"method","name":"backoff_factor","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :backoff_factor))\n  (int 1)) to_f "," [] "]}," Faraday Request Retry Options interval_randomness":{"type":"method","name":"interval_randomness","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :interval_randomness))\n  (int 0)) to_f "," [] "]}," Faraday Request Retry Options max_interval":{"type":"method","name":"max_interval","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :max_interval))\n  (const\n    (const nil :Float) :MAX)) to_f "," [] "]}," Faraday Request Retry Options interval":{"type":"method","name":"interval","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :interval))\n  (int 0)) to_f "," [] "]}," Faraday Request Retry Options max":{"type":"method","name":"max","children":[],"call":["(or-asgn\n  (send\n    (self) :[]\n    (sym :max))\n  (int 2)) to_i "," [] "]}," Faraday Request Retry Options from":{"type":"method","name":"from","children":[],"call":[]}," Faraday Request Multipart process_params":{"type":"method","name":"process_params","children":[],"call":["all << ","block call "," process_params ","a << ","value inject ","params inject ","prefix to_s ","@options [] "]}," Faraday Request Multipart unique_boundary":{"type":"method","name":"unique_boundary","children":[],"call":["SecureRandom  hex "]}," Faraday Request Multipart part":{"type":"method","name":"part","children":[],"call":["Faraday Parts Part  new ","value to_part ","value respond_to? "]}," Faraday Request Multipart create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["env request_headers []= ","body length to_s ","body length ","env request_headers ","Faraday CompositeReadIO  new ","parts << ","Faraday Parts EpiloguePart  new "," part "," process_params ","env request boundary ","env request ","Faraday Parts Part  new ","Faraday CompositeReadIO  new  length to_s ","Faraday CompositeReadIO  new  length ","env request env request boundary  "]}," Faraday Request Multipart has_multipart?":{"type":"method","name":"has_multipart?","children":[],"call":[" has_multipart? ","val respond_to? ","(if\n  (send\n    (lvar :obj) :respond_to?\n    (sym :values))\n  (send\n    (lvar :obj) :values)\n  (lvar :obj)) each ","obj values ","obj respond_to? "]}," Faraday Request Multipart process_request?":{"type":"method","name":"process_request?","children":[],"call":["type == "," class mime_type "," class "," has_multipart? ","env body ","type empty? ","env body empty? ! ","env body empty? ","env body respond_to? "," request_type "," request_type  == "," class mime_ request_type  "," request_type  empty? "," request_ request_type  "]}," Faraday Request Multipart call":{"type":"method","name":"call","children":[],"call":["@app call ","env body= "," create_multipart ","env request boundary ","env request ","env request_headers [] ","env request_headers "," unique_boundary "," match_content_type "]}," Faraday Request Instrumentation call":{"type":"method","name":"call","children":[],"call":["@app call ","@instrumenter instrument "]}," Faraday Request Instrumentation initialize":{"type":"method","name":"initialize","children":[],"call":["Options  from values_at ","Options  from "]}," Faraday Request Instrumentation Options instrumenter":{"type":"method","name":"instrumenter","children":[],"call":[" [] "]}," Faraday Request Instrumentation Options name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Faraday Request BasicAuthentication header":{"type":"method","name":"header","children":[],"call":[]}," Faraday Request Authorization call":{"type":"method","name":"call","children":[],"call":["@app call ","env request_headers []= ","env request_headers ","env request_headers [] "]}," Faraday Request Authorization initialize":{"type":"method","name":"initialize","children":[],"call":[" class header "," class "]}," Faraday Request Authorization build_hash":{"type":"method","name":"build_hash","children":[],"call":[]}," Faraday Request Authorization header":{"type":"method","name":"header","children":[],"call":[]}," Faraday RackBuilder raise_if_adapter":{"type":"method","name":"raise_if_adapter","children":[],"call":[" raise "," is_adapter? "]}," Faraday ParamPart headers":{"type":"method","name":"headers","children":[],"call":[" content_id "," content_type "]}," Faraday ParamPart to_part":{"type":"method","name":"to_part","children":[],"call":["Faraday Parts Part  new "," headers "," value "]}," Faraday ParamPart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday RequestOptions stream_response?":{"type":"method","name":"stream_response?","children":[],"call":[" on_data is_a? "," on_data "]}," Faraday Env body=":{"type":"method","name":"body=","children":[],"call":[" []= "]}," Faraday Env body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Faraday Env current_body":{"type":"method","name":"current_body","children":[],"call":[" status ! ! "," status ! "," status "]}," Faraday MiddlewareRegistry unregister_middleware":{"type":"method","name":"unregister_middleware","children":[],"call":["@registered_middleware delete "," registered_middleware delete "," registered_middleware "]}," Faraday Logging Formatter apply_filters":{"type":"method","name":"apply_filters","children":[],"call":["output to_s gsub ","output to_s ","@filter each ","output to_s gsub  to_s gsub ","output to_s gsub  to_s "]}," Faraday Logging Formatter log_body?":{"type":"method","name":"log_body?","children":[],"call":["@options [] ","@options [] [] "]}," Faraday Logging Formatter log_headers?":{"type":"method","name":"log_headers?","children":[],"call":["@options [] ","@options [] [] "]}," Faraday Logging Formatter pretty_inspect":{"type":"method","name":"pretty_inspect","children":[],"call":["body pretty_inspect "]}," Faraday Logging Formatter dump_body":{"type":"method","name":"dump_body","children":[],"call":[" pretty_inspect ","body to_str ","body respond_to? "]}," Faraday Logging Formatter dump_headers":{"type":"method","name":"dump_headers","children":[],"call":["(send\n  (lvar :headers) :map) join ","v inspect ","headers map ","headers nil? "]}," Faraday Logging Formatter filter":{"type":"method","name":"filter","children":[],"call":["@filter push "]}," Faraday Logging Formatter response":{"type":"method","name":"response","children":[],"call":[" apply_filters "," dump_body ","env [] "," debug "," log_body? "," dump_headers ","env response_headers "," log_headers? ","env status "," info "," log_body "," log_headers "," public_send "," log_level "," proc "]}," Faraday Logging Formatter request":{"type":"method","name":"request","children":[],"call":[" apply_filters "," dump_body ","env [] "," debug "," log_body? "," dump_headers ","env request_headers "," log_headers? ","env url to_s ","env url ","env method upcase ","env method "," info "," log_body "," log_headers "," public_send "," log_level "," proc "]}," Faraday Logging Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  merge ","@options []= ","(sym :debug) include? ","@options [] ","DEFAULT_OPTIONS  merge  []= ","DEFAULT_OPTIONS  merge  [] "]}," Faraday Error inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","inner << ","inner empty? ","@response inspect ","@wrapped_exception inspect "," +@ "," +@  << "," +@  empty? "]}," Faraday Error backtrace":{"type":"method","name":"backtrace","children":[],"call":["@wrapped_exception backtrace "]}," Faraday Error initialize":{"type":"method","name":"initialize","children":[],"call":["exc to_s ","exc [] ","exc respond_to? ","exc message "," exc_msg_and_response! "]}," Faraday DecodeMethods dehash":{"type":"method","name":"dehash","children":[],"call":["hash sort map ","hash sort ","k =~ ","hash keys all? ","hash keys ","hash empty? ! ","hash empty? ","depth positive? ","hash []= "," dehash ","depth + ","value is_a? ","hash each "]}," Faraday DecodeMethods add_to_context":{"type":"method","name":"add_to_context","children":[],"call":["context []= ","context << "]}," Faraday DecodeMethods match_context":{"type":"method","name":"match_context","children":[],"call":["context last ","context << ","context last key? ","context last is_a? ! ","context last is_a? "]}," Faraday DecodeMethods new_context":{"type":"method","name":"new_context","children":[],"call":["value_type new ","context [] "," raise ","context [] class name ","context [] class ","value_type name ","context [] is_a? ! ","context [] is_a? "]}," Faraday DecodeMethods prepare_context":{"type":"method","name":"prepare_context","children":[],"call":[" match_context ","is_array ! ","context is_a? "," new_context ","last_subkey ! "," match_ match_context  "," match_ new_context  "," match_context  is_a? "," new_context  is_a? "," new_ match_context  "," new_ new_context  "]}," Faraday DecodeMethods decode_pair":{"type":"method","name":"decode_pair","children":[],"call":[" add_to_context "," prepare_context ","i == ","subkeys length - ","subkeys length ","subkey =~ ","subkeys each_with_index ","key scan ","Regexp  last_match pre_match ","Regexp  last_match "," add_to_ prepare_context  "," prepare_ prepare_context  ","key scan  length - ","Regexp  last_match pre_match s length - ","key scan  length ","Regexp  last_match pre_match s length ","Regexp  last_match pre_match  =~ ","key scan  each_with_index ","Regexp  last_match pre_match s each_with_index "]}," Faraday DecodeMethods decode":{"type":"method","name":"decode","children":[],"call":[" dehash "," decode_pair "," unescape ","value tr ","pair split ","pair empty? ","query split each ","query split ","query nil? "," unescape  tr "]}," Faraday EncodeMethods encode_array":{"type":"method","name":"encode_array","children":[],"call":["buffer chop ","buffer << "," encode_pair ","value each "," +@ ","value empty? ","value each_with_index "," +@  chop "," +@  << "]}," Faraday EncodeMethods encode_hash":{"type":"method","name":"encode_hash","children":[],"call":["buffer chop ","buffer << "," encode_pair ","value each "," +@ ","(send\n  (lvar :value) :map) sort "," escape ","value map "," +@  chop "," +@  << ","(send\n  (lvar :value) :map) sort  each ","(send\n  (lvar :(send\n  (lvar :value) :map) sort ) :map) sort ","(send\n  (lvar :value) :map) sort  map "]}," Faraday EncodeMethods encode_pair":{"type":"method","name":"encode_pair","children":[],"call":[" escape ","value nil? "," encode_array ","value is_a? "," encode_hash "]}," Faraday EncodeMethods encode":{"type":"method","name":"encode","children":[],"call":["buffer chop ","buffer << "," encode_pair "," escape ","params each "," +@ ","params sort! ","key to_s ","key is_a? ","params map ","params to_hash "," raise ","params class ","params respond_to? ","params is_a? ","params nil? "," +@  chop "," +@  << ","params to_hash  each ","params to_hash  sort! ","key to_s  to_s ","key to_s  is_a? ","params to_hash  map ","params to_hash  to_hash ","params to_hash  class ","params to_hash  respond_to? ","params to_hash  is_a? ","params to_hash  nil? "]}," Faraday DependencyLoader inherited":{"type":"method","name":"inherited","children":[],"call":["subclass send "," load_error "]}," Faraday DependencyLoader loaded?":{"type":"method","name":"loaded?","children":[],"call":[" load_error nil? "," load_error "]}," Faraday DependencyLoader new":{"type":"method","name":"new","children":[],"call":[" raise "," load_error message "," load_error "," loaded? "]}," Faraday DependencyLoader dependency":{"type":"method","name":"dependency","children":[],"call":[" load_error= "," require "]}," Faraday Connection support_parallel?":{"type":"method","name":"support_parallel?","children":[],"call":["adapter respond_to? "]}," Faraday Connection options":{"type":"method","name":"options","children":[],"call":[" block_given? ","request params update ","request params "," run_request ","args size zero? ","args size ","args empty? "]}," Faraday Connection initialize_proxy":{"type":"method","name":"initialize_proxy","children":[],"call":[" proxy_from_env ","ProxyOptions  from ","options proxy ","options proxy ! ! ","options proxy ! "]}," Faraday AdapterRegistry set":{"type":"method","name":"set","children":[],"call":["@constants []= ","@lock synchronize ","klass to_s "]}," Faraday AdapterRegistry get":{"type":"method","name":"get","children":[],"call":[" set ","Object  const_get tap ","Object  const_get ","@constants [] ","@lock synchronize "]}," Faraday AdapterRegistry initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new "]}," Faraday Adapter Rack build_rack_env":{"type":"method","name":"build_rack_env","children":[],"call":["env [] scheme ","env [] ","env [] read ","env [] respond_to? "]}," Faraday Adapter NetHttp request_via_request_method":{"type":"method","name":"request_via_request_method","children":[],"call":["http request "," create_request ","response read_body "," block_given? ","opened_http request ","http start "]}," Faraday Adapter NetHttp request_via_get_method":{"type":"method","name":"request_via_get_method","children":[],"call":["http get ","env [] ","env [] request_uri ","opened_http get ","http start "]}," Faraday Adapter NetHttp request_with_wrapped_block":{"type":"method","name":"request_with_wrapped_block","children":[],"call":[" request_via_request_method "," request_via_get_method ","env [] ! ","env [] ","env [] == "]}," Faraday Adapter HTTPClient configure_open_timeout":{"type":"method","name":"configure_open_timeout","children":[],"call":[" client send_timeout= ","req [] "," client "," client connect_timeout= "]}," Faraday Adapter HTTPClient configure_timeout":{"type":"method","name":"configure_timeout","children":[],"call":[" client send_timeout= ","req [] "," client "," client receive_timeout= "," client connect_timeout= "]}," Faraday Adapter Excon proxy_settings_for_opts":{"type":"method","name":"proxy_settings_for_opts","children":[],"call":["proxy [] ","proxy [] scheme ","proxy [] port ","proxy [] hostname ","proxy [] host "]}," Faraday Adapter Excon amend_opts_with_proxy_settings!":{"type":"method","name":"amend_opts_with_proxy_settings!","children":[],"call":["opts []= "," proxy_settings_for_opts ","req [] "]}," Faraday Adapter Excon amend_opts_with_timeouts!":{"type":"method","name":"amend_opts_with_timeouts!","children":[],"call":["opts []= ","req [] "," request_timeout "," request_req []  "]}," Faraday Adapter Excon amend_opts_with_ssl!":{"type":"method","name":"amend_opts_with_ssl!","children":[],"call":["opts []= ","ssl [] ","OPTS_KEYS  each ","ssl fetch ! ! ","ssl fetch ! ","ssl fetch "]}," Faraday Adapter Excon needs_ssl_settings?":{"type":"method","name":"needs_ssl_settings?","children":[],"call":["env [] ","env [] scheme == ","env [] scheme "]}," Faraday Adapter Excon opts_from_env":{"type":"method","name":"opts_from_env","children":[],"call":[" amend_opts_with_proxy_settings! "," amend_opts_with_timeouts! ","env [] "," amend_opts_with_ssl! "," needs_ssl_settings? "]}," Faraday Adapter EMSynchrony call_block":{"type":"method","name":"call_block","children":[],"call":["(send\n  (const nil :Fiber) :new) resume ","EM  stop ","block call ","Fiber  new ","EM  run ","EM  reactor_running? "]}," Faraday Adapter EMSynchrony execute_single_request":{"type":"method","name":"execute_single_request","children":[],"call":["headers []= ","name to_sym ","client response_header each ","client response_header "," save_response ","client response ","client response_header http_reason ","client response_header status ","env [] on_data call ","client response bytesize ","env [] on_data ","env [] "," warn "," class name "," class ","env [] stream_response? "," raise ","client error "," call_block ","request send "," request_config "," lambda "," call_block  response_header each "," call_block  response_header "," call_block  response ","client response_header http_client response_header http_reason  "," call_block  response_header http_reason ","client response_header client response_header status  "," call_block  response_header status "," call_block  response bytesize "," call_block  error "]}," Faraday Adapter EMSynchrony execute_parallel_request":{"type":"method","name":"execute_parallel_request","children":[],"call":["env [] finish ","env [] ","resp_headers []= ","name to_sym ","resp response_header each ","resp response_header "," save_response ","resp response ","resp response_header status ","req on_data call ","resp response bytesize ","req on_data "," warn "," class name "," class ","(lvasgn :req\n  (send\n    (lvar :env) :[]\n    (sym :request))) stream_response? ","env [] add "," request_config ","env []  on_data call ","env []  on_data ","(lvasgn :env [] \n  (send\n    (lvar :env) :[]\n    (sym :env [] uest))) stream_response? "," env [] uest_config "]}," EmHttpSslPatch verified_cert_identity?":{"type":"method","name":"verified_cert_identity?","children":[],"call":["OpenSSL SSL  verify_certificate_identity "," host "]}," Faraday Adapter EMHttp timeout_message?":{"type":"method","name":"timeout_message?","children":[],"call":["msg include? ","msg is_a? ","msg == "]}," Faraday DeprecatedConstant warn":{"type":"method","name":"warn","children":[],"call":[" puts "]}," Faraday DeprecatedConstant method_missing":{"type":"method","name":"method_missing","children":[],"call":["@new_const __send__ "," warn "]}," Faraday DeprecatedConstant const_missing":{"type":"method","name":"const_missing","children":[],"call":["@new_const const_get "," warn "]}," Faraday DeprecatedConstant class":{"type":"method","name":"class","children":[],"call":["@new_const class "]}," Faraday DeprecatedConstant inspect":{"type":"method","name":"inspect","children":[],"call":["@new_const inspect "]}," Faraday DeprecatedConstant initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday DeprecatedConstant new":{"type":"method","name":"new","children":[],"call":[]}," Faraday DeprecatedClass proxy_class":{"type":"method","name":"proxy_class","children":[],"call":[]}," Faraday NilStatusError initialize":{"type":"method","name":"initialize","children":[],"call":[" unwrap_resp! "," exc_msg_and_response! "]}," Faraday Deprecate deprecate":{"type":"method","name":"deprecate","children":[],"call":[" send "," warn ","msg join ","Faraday Deprecate  skip ","Gem  location_of_caller join ","Gem  location_of_caller ","repl == ","name == "," class "," is_a? "," define_method "," alias_method ","Gem Version  new "," class_eval "]}," Faraday Deprecate skip_during":{"type":"method","name":"skip_during","children":[],"call":["Faraday Deprecate  skip= ","Faraday Deprecate  skip "]}," Faraday Deprecate skip=":{"type":"method","name":"skip=","children":[],"call":[]}," Faraday Deprecate skip":{"type":"method","name":"skip","children":[],"call":[]}," Faraday NilStatusError unwrap_resp":{"type":"method","name":"unwrap_resp","children":[],"call":[" unwrap_resp ","resp [] ","resp keys size == ","resp keys size ","resp keys "]}," Faraday Error exc_msg_and_response":{"type":"method","name":"exc_msg_and_response","children":[],"call":["exc to_s ","exc [] ","exc respond_to? ","exc message "]}," Faraday Error exc_msg_and_response!":{"type":"method","name":"exc_msg_and_response!","children":[],"call":["exc to_s "," exc_msg_and_response ","@wrapped_exception nil? ","@response nil? "]}," Faraday AutoloadHelper lookup_module":{"type":"method","name":"lookup_module","children":[],"call":[" const_get ","@lookup_module_index [] ","@lookup_module_index ! "]}," Faraday AutoloadHelper register_lookup_modules":{"type":"method","name":"register_lookup_modules","children":[],"call":["(or-asgn\n  (ivasgn :@lookup_module_index)\n  (hash)) update "]}," Faraday Response Middleware register_on_complete":{"type":"method","name":"register_on_complete","children":[],"call":[]}," Faraday Yajl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Yajl register_on_complete":{"type":"method","name":"register_on_complete","children":[],"call":[]}," Faraday ActiveSupportJson initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday ActiveSupportJson register_on_complete":{"type":"method","name":"register_on_complete","children":[],"call":[]}," Faraday Request run":{"type":"method","name":"run","children":[],"call":["app call "," to_env_hash ","connection to_app ","connection builder to_app call ","connection builder to_app ","connection builder ","env []= ","response finish ","env [] ","Response  new "," lambda ","connection to_app  call "," to_ to_env_hash _hash ","connection to_connection to_app  ","connection builder to_connection to_app  call ","connection builder to_connection to_app  "," to_env_hash  []= ","Response  new  finish "," to_env_hash  [] "]}," Faraday Request to_env_hash":{"type":"method","name":"to_env_hash","children":[],"call":["Response  new ","connection parallel_manager ","connection build_url "," path "," body ","connection merge_params "," params ","connection merge_headers "," headers ","connection params dup ","connection params ","connection headers dup ","connection headers ","env_headers update ","connection ssl ","connection options merge ","connection proxy ","connection options ","connection headers dup  update "]}," Faraday Yajl call":{"type":"method","name":"call","children":[],"call":["@app call ","env []= ","Yajl Encoder  encode ","env [] ","env [] respond_to? ! ","env [] respond_to? ","env [] []= "]}," Faraday ActiveSupportJson call":{"type":"method","name":"call","children":[],"call":["@app call ","env []= ","ActiveSupport JSON  encode ","env [] ","env [] respond_to? ! ","env [] respond_to? ","env [] []= "]}," Faraday Middleware create_form_params":{"type":"method","name":"create_form_params","children":[],"call":["(send\n  (array) :tap) join ","result << "," escape ","value to_s "," create_form_params ","value kind_of? ","params [] ","params each_key "," tap ","params []  to_s ","params []  kind_of? "]}," Faraday Middleware process_body_for_request":{"type":"method","name":"process_body_for_request","children":[],"call":["env []= "," create_form_params ","env [] ","env [] [] ","env [] respond_to? ! ","env [] respond_to? ","env [] empty? ","env [] nil? "]}," Faraday Middleware full_path_for":{"type":"method","name":"full_path_for","children":[],"call":["full_path << ","fragment empty? ! ","fragment empty? ","query empty? ! ","query empty? ","path dup ","path dup  << "]}," Faraday Middleware setup_parallel_manager":{"type":"method","name":"setup_parallel_manager","children":[],"call":[]}," Faraday Connection escape":{"type":"method","name":"escape","children":[],"call":["% << ","c upcase! ","1 unpack join tap ","1 unpack join ","1 unpack ","H2 * "," bytesize ","s to_s gsub ","s to_s "]}," Faraday Connection merge_headers":{"type":"method","name":"merge_headers","children":[],"call":["existing_headers []= ","value to_s ","HEADERS  [] ","new_headers each "]}," Faraday Connection merge_params":{"type":"method","name":"merge_params","children":[],"call":["existing_params []= ","key to_s ","new_params each "]}," Faraday Connection replace_query":{"type":"method","name":"replace_query","children":[],"call":["uri query= "," build_query ","url_params empty? "," merge_params ","params empty? ! ","params empty? "," parse_query ","uri query ","uri query empty? ! ","uri query empty? ","@params dup ","@params dup  empty? "]}," Faraday Connection to_app":{"type":"method","name":"to_app","children":[],"call":["@builder to_app "]}," Faraday Connection head":{"type":"method","name":"head","children":[],"call":[" run_request ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Builder use_symbol":{"type":"method","name":"use_symbol","children":[],"call":[" use ","mod lookup_module ","Proc  new "," block_given? ","mod lookup_middleware "," Proc  new _given? "]}," Faraday Builder adapter":{"type":"method","name":"adapter","children":[],"call":[" use_symbol ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Builder response":{"type":"method","name":"response","children":[],"call":[" use_symbol ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Builder request":{"type":"method","name":"request","children":[],"call":[" use_symbol ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Builder use":{"type":"method","name":"use","children":[],"call":["@handlers unshift ","klass new "," lambda "," run ","Proc  new "," block_given? ","@handlers << "," class Handler  new "," class "," raise_if_locked "," use_symbol ","klass is_a? "," Proc  new _given? "]}," Faraday Builder to_app":{"type":"method","name":"to_app","children":[],"call":["middleware call ","@handlers [] inject ","@handlers [] ","@handlers first ","b adapter ","Faraday  default_adapter "," build ","@handlers empty? ","handler build ","@handlers reverse inject ","@handlers reverse "]}," Faraday Builder run":{"type":"method","name":"run","children":[],"call":["@handlers unshift "]}," Faraday Builder initialize":{"type":"method","name":"initialize","children":[],"call":[" build "," block_given? ","Proc  new "," adapter ","Faraday  default_adapter "," request ","@handlers empty? "]}," Faraday Builder create_with_inner_app":{"type":"method","name":"create_with_inner_app","children":[],"call":[]}," Faraday Adapter Test request_uri":{"type":"method","name":"request_uri","children":[],"call":["(if\n  (send\n    (send\n      (lvar :url) :path) :!=\n    (str \"\"))\n  (send\n    (lvar :url) :path)\n  (str \"/\")) + ","url query ","url path ","url path != "]}," Faraday Adapter Test loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," Faraday Connection build":{"type":"method","name":"build","children":[],"call":["@builder build "]}," Faraday Builder dup":{"type":"method","name":"dup","children":[],"call":[" class new ","@handlers dup "," class "]}," Faraday Builder ==":{"type":"method","name":"==","children":[],"call":["@handlers == ","other handlers ","other is_a? "," class "]}," Faraday Builder []":{"type":"method","name":"[]","children":[],"call":["@handlers [] ","(send\n  (lvar :index) :+\n  (int 1)) -@ ","index + "]}," Faraday Builder build":{"type":"method","name":"build","children":[],"call":[" run "," class inner_app "," class ","block call ","@handlers clear ","options [] ! ","options [] ","@handlers shift "," block_given? "," raise_if_locked "," class @handlers shift _app "]}," Faraday Builder inner_app":{"type":"method","name":"inner_app","children":[],"call":[]}," Faraday Builder create":{"type":"method","name":"create","children":[],"call":[]}," Faraday path_prefix=":{"type":"method","name":"path_prefix=","children":[],"call":[]}," Faraday url_prefix=":{"type":"method","name":"url_prefix=","children":[],"call":[]}," Faraday proxy":{"type":"method","name":"proxy","children":[],"call":[]}," Faraday in_parallel":{"type":"method","name":"in_parallel","children":[],"call":[]}," Faraday in_parallel?":{"type":"method","name":"in_parallel?","children":[],"call":[]}," Faraday delete":{"type":"method","name":"delete","children":[],"call":[]}," Faraday head":{"type":"method","name":"head","children":[],"call":[]}," Faraday put":{"type":"method","name":"put","children":[],"call":[]}," Faraday post":{"type":"method","name":"post","children":[],"call":[]}," Faraday get":{"type":"method","name":"get","children":[],"call":[]}," Faraday build":{"type":"method","name":"build","children":[],"call":[]}," Faraday Connection proxy_arg_to_uri":{"type":"method","name":"proxy_arg_to_uri","children":[],"call":["URI  parse "]}," Faraday Adapter NetHttp net_http_class":{"type":"method","name":"net_http_class","children":[],"call":["Net HTTP  Proxy ","proxy [] ","proxy [] port ","proxy [] host ","env [] [] ","env [] ","env [] []  [] ","env [] []  [] port ","env [] []  [] host "]}," Faraday Utils merge_headers":{"type":"method","name":"merge_headers","children":[],"call":["existing_headers []= ","value to_s ","HEADERS  [] ","new_headers each "]}," Faraday Utils merge_params":{"type":"method","name":"merge_params","children":[],"call":["existing_params []= ","key to_s ","new_params each "]}," Faraday Yajl parse":{"type":"method","name":"parse","children":[],"call":[]}," Faraday ActiveSupportJson parse":{"type":"method","name":"parse","children":[],"call":[]}," Faraday Error ClientError inspect":{"type":"method","name":"inspect","children":[],"call":["@inner_exception inspect "," class "]}," Faraday Error ClientError to_s":{"type":"method","name":"to_s","children":[],"call":["@inner_exception to_s "]}," Faraday Error ClientError backtrace":{"type":"method","name":"backtrace","children":[],"call":["@inner_exception backtrace ","@wrapped_exception backtrace "]}," Faraday Error ClientError message":{"type":"method","name":"message","children":[],"call":["@inner_exception message ","@inner_exception to_s ","@inner_exception respond_to? "]}," Faraday Error ClientError initialize":{"type":"method","name":"initialize","children":[],"call":["ex to_s ","ex [] ","ex respond_to? ","ex message "]}," Faraday Connection adapter":{"type":"method","name":"adapter","children":[],"call":["@builder adapter "]}," Faraday Connection response":{"type":"method","name":"response","children":[],"call":["@builder response "]}," Faraday Connection request":{"type":"method","name":"request","children":[],"call":["@builder request "]}," Faraday Connection use":{"type":"method","name":"use","children":[],"call":["@builder use "]}," Faraday Adapter full_path_for":{"type":"method","name":"full_path_for","children":[],"call":["full_path << ","fragment empty? ! ","fragment empty? ","query empty? ! ","query empty? ","path dup ","path dup  << "]}," Faraday Adapter process_to_params":{"type":"method","name":"process_to_params","children":[],"call":["pieces << ","block call "," process_to_params ","value kind_of? ","params each ","a << ","value inject ","params to_a each ","params to_a ","Proc  new "," block_given? ","Proc  new  call "," Proc  new _given? "]}," Faraday Adapter create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["Faraday CompositeReadIO  new ","p to_io ","parts map ","env [] []= ","(send\n  (lvar :parts) :inject\n  (int 0)) to_s ","sum + ","i length ","parts inject ","env [] ","parts << ","Faraday Parts EpiloguePart  new ","Faraday Parts Part  new "," process_to_params ","env [] [] "]}," Faraday Adapter has_multipart?":{"type":"method","name":"has_multipart?","children":[],"call":[" has_multipart? ","v respond_to? ","body values each ","body values "]}," Faraday Adapter process_body_for_request":{"type":"method","name":"process_body_for_request","children":[],"call":["env []= ","parts * "," escape ","value to_s "," process_to_params ","env [] ","headers []= ","type empty? ","type nil? ","headers [] "," create_multipart ","MULTIPART_TYPE  + ","env [] [] "," has_multipart? ","body respond_to? ! ","body respond_to? ","body empty? ","body nil? ","headers []  empty? ","headers []  nil? "]}," Faraday Adapter Typhoeus create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["stream read "]}," Faraday Adapter Test create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["stream read "]}," Faraday Adapter Patron create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["stream read "]}," Faraday Adapter ActionDispatch create_multipart":{"type":"method","name":"create_multipart","children":[],"call":["stream read "]}," Faraday Adapter ActionDispatch call":{"type":"method","name":"call","children":[],"call":["@app call ","env update ","resp body ","resp headers ","resp status ","@session response ","@session __send__ ","env [] "," full_path_for ","env [] fragment ","env [] query ","env [] path "," response_headers update "," response_headers ","env [] request_uri "," save_response ","@session response  body ","@session response  headers ","@session response  status ","@session @session response onse ","  full_path_for _for "," @session response onse_headers update "," @session response onse_headers "," save_@session response onse "]}," Faraday Adapter ActionDispatch initialize":{"type":"method","name":"initialize","children":[],"call":["@session reset! "]}," Faraday Adapter EMSynchrony Header initialize":{"type":"method","name":"initialize","children":[],"call":[" []= "," content_length= "," content_type= ","response response_header each ","response response_header "]}," Faraday Adapter Logger call":{"type":"method","name":"call","children":[],"call":["@app call ","(send\n  (send\n    (lvar :resp_env) :[]\n    (sym :response_headers)) :map) join ","v inspect ","resp_env [] map ","resp_env [] ","@logger debug ","env [] to_s ","env [] ","@logger info ","env [] on_complete ","(send\n  (send\n    (lvar :env) :[]\n    (sym :request_headers)) :map) join ","env [] map "]}," Faraday Adapter Logger initialize":{"type":"method","name":"initialize","children":[],"call":[" Logger  new "," require "]}," Faraday Adapter Logger loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," Faraday JSON call":{"type":"method","name":"call","children":[],"call":["@app call ","env []= "," class adapter encode "," class adapter "," class "," match_content_type "]}," Faraday Builder assert_index":{"type":"method","name":"assert_index","children":[],"call":[" raise ","index inspect ","@handlers index ","index is_a? "]}," Faraday Builder delete":{"type":"method","name":"delete","children":[],"call":["@handlers delete "," raise_if_locked "]}," Faraday Builder swap":{"type":"method","name":"swap","children":[],"call":[" insert ","@handlers delete_at "," assert_index "," raise_if_locked "," assert_ assert_index  "]}," Faraday Builder insert_after":{"type":"method","name":"insert_after","children":[],"call":[" insert ","index + "," assert_index "," assert_index  + "," assert_ assert_index  "]}," Faraday Builder insert":{"type":"method","name":"insert","children":[],"call":["@handlers insert "," class Handler  new "," class "," assert_index "," raise_if_locked ","@ class Handler  new s insert "," assert_ assert_index  "]}," Faraday Builder Handler build":{"type":"method","name":"build","children":[],"call":[" klass new "," klass "]}," Faraday Builder Handler ==":{"type":"method","name":"==","children":[],"call":["@name == ","other to_s "," klass == "," klass ","other respond_to? "," name == ","other name "," name ","other is_a? "]}," Faraday Builder Handler inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Faraday Builder Handler klass":{"type":"method","name":"klass","children":[],"call":["@@constants [] "]}," Faraday Builder Handler initialize":{"type":"method","name":"initialize","children":[],"call":["@@constants []= ","klass respond_to? ","klass to_s "]}," Faraday Adapter response_headers":{"type":"method","name":"response_headers","children":[],"call":["Utils Headers  new ","env [] "]}," Faraday Request initialize":{"type":"method","name":"initialize","children":[],"call":[" headers= "," params= "," options= "]}," Faraday Connection patch":{"type":"method","name":"patch","children":[],"call":[" run_request ","Proc  new "," block_given? "," Proc  new _given? "]}," Faraday Connection app":{"type":"method","name":"app","children":[],"call":[" builder to_app ","env []= ","response finish ","env [] ","Response  new "," lambda "," builder "," builder lock! ","Response  new  finish "]}," Faraday Builder raise_if_locked":{"type":"method","name":"raise_if_locked","children":[],"call":[" raise "," locked? "]}," Faraday Builder locked?":{"type":"method","name":"locked?","children":[],"call":["@handlers frozen? "]}," Faraday Builder lock!":{"type":"method","name":"lock!","children":[],"call":["@handlers freeze "]}," Faraday JSON adapter":{"type":"method","name":"adapter","children":[],"call":[" raise "]}," Faraday register_middleware":{"type":"method","name":"register_middleware","children":[],"call":[]}," Faraday Connection URI":{"type":"method","name":"URI","children":[],"call":[]}," Faraday Adapter Test Stubs normalize_path":{"type":"method","name":"normalize_path","children":[],"call":["path gsub ","path + ","path sub ","/ + ","path index != ","path index ","path +  gsub ","path sub  gsub ","/ +  gsub ","path +  + ","path sub  + ","/ +  + ","path +  sub ","path sub  sub ","/ +  sub ","path +  index != ","path sub  index != ","/ +  index != ","path +  index ","path sub  index ","/ +  index "]}," Faraday Adapter prepend_proxy_auth_string":{"type":"method","name":"prepend_proxy_auth_string","children":[],"call":["session proxy insert ","proxy [] ","session proxy "]}," Faraday Adapter EMHttp request_options":{"type":"method","name":"request_options","children":[],"call":["env [] "]}," Faraday Adapter EMHttp configure_compression":{"type":"method","name":"configure_compression","children":[],"call":["options [] []= ","options [] ","options [] key? ! ","options [] key? ","env [] == ","env [] "]}," Faraday Adapter EMHttp configure_timeout":{"type":"method","name":"configure_timeout","children":[],"call":["options []= "," request_options values_at "," request_options "]}," Faraday Adapter EMHttp configure_proxy":{"type":"method","name":"configure_proxy","children":[],"call":["options []= ","proxy [] port ","proxy [] ","proxy [] host "," request_options [] "," request_options "," request_options []  [] port "," request_options []  [] "," request_options []  [] host "]}," Faraday Adapter EMHttp configure_ssl":{"type":"method","name":"configure_ssl","children":[],"call":["env [] "]}," Faraday Adapter EMHttp read_body":{"type":"method","name":"read_body","children":[],"call":["body read ","body respond_to? ","env [] ","env []  read ","env []  respond_to? "]}," Faraday Adapter EMHttp request_config":{"type":"method","name":"request_config","children":[],"call":[" configure_compression ","env [] "," read_body "]}," Faraday Adapter EMHttp connection_config":{"type":"method","name":"connection_config","children":[],"call":[" configure_timeout "," configure_proxy "," configure_ssl "]}," Faraday TokenAuthentication call":{"type":"method","name":"call","children":[],"call":["@app call ","env [] []= ","env [] ","env [] [] "]}," Faraday BasicAuthentication call":{"type":"method","name":"call","children":[],"call":["@app call ","env [] []= ","env [] ","env [] [] "]}," Faraday BasicAuthentication initialize":{"type":"method","name":"initialize","children":[],"call":["Base64  encode64 gsub ","Base64  encode64 ","(lvar :login) join "]}," Faraday Error TimeoutError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday FlatParamsEncoder unescape":{"type":"method","name":"unescape","children":[],"call":[]}," Faraday FlatParamsEncoder escape":{"type":"method","name":"escape","children":[],"call":[]}," Faraday NestedParamsEncoder unescape":{"type":"method","name":"unescape","children":[],"call":[]}," Faraday NestedParamsEncoder escape":{"type":"method","name":"escape","children":[],"call":[]}," Faraday ConnectionOptions builder_class":{"type":"method","name":"builder_class","children":[],"call":[" [] "]}," Faraday ConnectionOptions ssl":{"type":"method","name":"ssl","children":[],"call":[" class options_for new "," class options_for "," class "," [] "]}," Faraday ConnectionOptions request":{"type":"method","name":"request","children":[],"call":[" class options_for new "," class options_for "," class "," [] "]}," Faraday ProxyOptions password":{"type":"method","name":"password","children":[],"call":["Utils  unescape "," uri password "," uri "," [] "]}," Faraday ProxyOptions user":{"type":"method","name":"user","children":[],"call":["Utils  unescape "," uri user "," uri "," [] "]}," Faraday Middleware close":{"type":"method","name":"close","children":[],"call":[" warn ","@app close ","@app respond_to? "," app "," app close "," app respond_to? "]}," Faraday Logging Formatter log_body":{"type":"method","name":"log_body","children":[],"call":[" public_send "," log_level "," apply_filters "," dump_body "," proc "]}," Faraday Logging Formatter log_headers":{"type":"method","name":"log_headers","children":[],"call":[" public_send "," log_level "," apply_filters "," dump_headers "," proc "]}," Faraday Logging Formatter log_level":{"type":"method","name":"log_level","children":[],"call":["@options [] ","(sym :debug) include? "]}," Faraday Connection close":{"type":"method","name":"close","children":[],"call":[" app close "," app "]}," Faraday Adapter request_timeout":{"type":"method","name":"request_timeout","children":[],"call":["options [] "," raise ","type inspect ","TIMEOUT_KEYS  fetch "]}," Faraday Adapter close":{"type":"method","name":"close","children":[],"call":[]}," Faraday Adapter connection":{"type":"method","name":"connection","children":[],"call":[" block_given? "," build_connection "," build_ build_connection ection "]}," Faraday Adapter Patron configure_proxy":{"type":"method","name":"configure_proxy","children":[],"call":["session proxy= ","proxy_uri to_s ","proxy_uri password= ","Utils  escape gsub ","Utils  escape ","proxy [] ","proxy_uri user= ","proxy [] dup ","proxy [] dup  to_s ","proxy [] dup  password= ","proxy [] dup  user= "]}," Faraday Adapter Patron configure_timeouts":{"type":"method","name":"configure_timeouts","children":[],"call":["session connect_timeout= "," request_timeout ","session timeout= "]}," Faraday Adapter Patron build_connection":{"type":"method","name":"build_connection","children":[],"call":[" configure_proxy ","req [] "," configure_timeouts ","env [] "," configure_ssl ","env [] scheme == ","env [] scheme "," Patron Session  new ","env []  [] "]}," Faraday Adapter NetHttp build_connection":{"type":"method","name":"build_connection","children":[],"call":[" configure_request ","env [] "," configure_ssl ","http use_ssl= ","env [] scheme == ","env [] scheme ","http respond_to? "," net_http_connection tap "," net_http_connection "]}," Faraday Adapter HTTPClient build_connection":{"type":"method","name":"build_connection","children":[],"call":[" configure_client "," configure_ssl ","env [] ","env [] scheme == ","env [] scheme "," configure_timeouts "," configure_socket ","req [] "," configure_proxy ","cli transparent_gzip_decompression= "," HTTPClient  new tap "," HTTPClient  new "," configure_env []  ","env []  [] "," configure_req []  "]}," Faraday Adapter Excon build_connection":{"type":"method","name":"build_connection","children":[],"call":[" Excon  new ","opts merge ","env [] to_s ","env [] "," opts_from_env "," opts_from_env  merge ","  opts_from_env _from_env "]}," Faraday Utils default_space_encoding":{"type":"method","name":"default_space_encoding","children":[],"call":[]}," Faraday Request method":{"type":"method","name":"method","children":[],"call":[" http_method "," warn "," caller_locations first "," caller_locations "," __method__ "]}," Faraday Request Multipart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faraday Response Json response_type":{"type":"method","name":"response_type","children":[],"call":["type split first ","type split ","type index ","env [] [] to_s ","env [] [] ","env [] ","type split first  split first ","env [] [] to_s  split first ","type split first  split ","env [] [] to_s  split ","type split first  index ","env [] [] to_s  index "]}," Faraday Response Json process_response_type?":{"type":"method","name":"process_response_type?","children":[],"call":["type == ","type match? ","pattern is_a? ","@content_types any? ","@content_types empty? "," response_type "," response_type  == "," response_type  match? ","@content_ response_type s any? ","@content_ response_type s empty? "," response_ response_type  "]}," Faraday Response Json parse_response?":{"type":"method","name":"parse_response?","children":[],"call":["env [] respond_to? ","env [] "," process_response_type? "]}," Faraday Response Json parse":{"type":"method","name":"parse","children":[],"call":[" JSON  parse ","body strip empty? ","body strip "]}," Faraday Response Json process_response":{"type":"method","name":"process_response","children":[],"call":[" raise ","Faraday ParsingError  new ","env [] ","env []= "," parse "]}," Faraday Response Json on_complete":{"type":"method","name":"on_complete","children":[],"call":[" process_response "," parse_response? "]}," Faraday Response Json initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," Array "]}," Faraday Request Json request_type":{"type":"method","name":"request_type","children":[],"call":["type split first ","type split ","type index ","env [] [] to_s ","env [] [] ","env [] ","type split first  split first ","env [] [] to_s  split first ","type split first  split ","env [] [] to_s  split ","type split first  index ","env [] [] to_s  index "]}," Faraday Request Json body?":{"type":"method","name":"body?","children":[],"call":["(and\n  (send\n    (lvar :body) :respond_to?\n    (sym :to_str))\n  (send\n    (lvar :body) :empty?)) ! ","body empty? ","body respond_to? ","env [] ","(and\n  (send\n    (lvar :env [] ) :respond_to?\n    (sym :to_str))\n  (send\n    (lvar :env [] ) :empty?)) ! ","env []  empty? ","env []  respond_to? "]}," Faraday Request Json process_request?":{"type":"method","name":"process_request?","children":[],"call":["type match? ","type empty? "," body? "," request_type "," request_type  match? "," request_type  empty? "," request_ request_type  "]}," Faraday Request Json match_content_type":{"type":"method","name":"match_content_type","children":[],"call":["env [] ","env [] respond_to? ","env [] [] "," process_request? "]}," Faraday Request Json encode":{"type":"method","name":"encode","children":[],"call":[" JSON  generate "]}," Faraday Request Json on_request":{"type":"method","name":"on_request","children":[],"call":["env []= "," encode "," match_content_type "]}," Faraday Request Authorization on_request":{"type":"method","name":"on_request","children":[],"call":["env request_headers []= "," class header "," class ","env request_headers ","env request_headers [] "," header_from "]}," Faraday Middleware call":{"type":"method","name":"call","children":[],"call":[" on_complete "," respond_to? "," app call on_complete "," app call "," app "," on_request "," raise "," on_error "]}," Faraday Error response_body":{"type":"method","name":"response_body","children":[],"call":["@response [] ","@response body ","@response is_a? "]}," Faraday Error response_headers":{"type":"method","name":"response_headers","children":[],"call":["@response [] ","@response headers ","@response is_a? "]}," Faraday Error response_status":{"type":"method","name":"response_status","children":[],"call":["@response [] ","@response status ","@response is_a? "]}," Faraday Connection set_basic_auth":{"type":"method","name":"set_basic_auth","children":[],"call":[" headers []= "," headers ","Faraday Request BasicAuthentication  header ","Faraday Utils  basic_header_from "," Faraday Request BasicAuthentication  header s []= "," Faraday Utils  basic_header_from s []= "," Faraday Request BasicAuthentication  header s "," Faraday Utils  basic_header_from s ","Faraday Request BasicAuthentication  Faraday Request BasicAuthentication  header  ","Faraday Request BasicAuthentication  Faraday Utils  basic_header_from  ","Faraday Utils  basic_Faraday Request BasicAuthentication  header _from ","Faraday Utils  basic_Faraday Utils  basic_header_from _from "]}," Faraday Adapter Test Stubs strict_mode=":{"type":"method","name":"strict_mode=","children":[],"call":["stub strict_mode= ","stubs each ","@stack each "]}," Faraday Utils basic_header_from":{"type":"method","name":"basic_header_from","children":[],"call":["value delete! ","Base64  encode64 ","Base64  encode64  delete! "]}," Faraday Response RaiseError query_params":{"type":"method","name":"query_params","children":[],"call":["env params_encoder decode ","env url query ","env url ","env params_encoder ","Faraday Utils  default_params_encoder ","env request params_encoder ","env request "]}," Faraday Request Authorization header_from":{"type":"method","name":"header_from","children":[],"call":["value call ","value respond_to? ","value is_a? ","params first "," raise ","params size ","params size != ","Utils  basic_header_from ","params size == ","type to_s casecmp zero? ","type to_s casecmp ","type to_s ","value method arity == ","value method arity ","value method ","value arity == ","value arity ","value call  call ","params first  call ","value call  respond_to? ","params first  respond_to? ","value call  is_a? ","params first  is_a? ","value call  method arity == ","params first  method arity == ","value call  method arity ","params first  method arity ","value call  method ","params first  method ","value call  arity == ","params first  arity == ","value call  arity ","params first  arity "]}," Faraday RackBuilder ensure_adapter!":{"type":"method","name":"ensure_adapter!","children":[],"call":[" raise "]}," Faraday RackBuilder initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["original handlers dup ","original handlers ","original adapter "]}," Faraday MiddlewareRegistry registered_middleware":{"type":"method","name":"registered_middleware","children":[],"call":[]}," Faraday SSLOptions verify_hostname?":{"type":"method","name":"verify_hostname?","children":[],"call":[" verify_hostname != "," verify_hostname "]}," Faraday Adapter Test Stub body_match?":{"type":"method","name":"body_match?","children":[],"call":["request_body == "," body "," body call "," body to_s size zero? "," body to_s size "," body to_s "," body to_s empty? "]}," Faraday Env stream_response":{"type":"method","name":"stream_response","children":[],"call":[" request on_data call "," +@ "," request on_data "," request ","chunk bytesize ","size positive? ","chunk bytesize positive? ","block call "]}," Faraday Env stream_response?":{"type":"method","name":"stream_response?","children":[],"call":[" request stream_response? "," request "]}," Faraday Response Logger on_error":{"type":"method","name":"on_error","children":[],"call":["@formatter error ","@formatter respond_to? ","@formatter exception "]}," Faraday Logging Formatter log_errors?":{"type":"method","name":"log_errors?","children":[],"call":["@options [] "]}," Faraday Logging Formatter error":{"type":"method","name":"error","children":[],"call":[" log_body ","error response_body "," log_body? ","error respond_to? "," log_headers ","error response_headers "," log_headers? "," public_send "," log_level ","error full_message "," proc "," log_errors? "]}," Faraday to_env":{"type":"method","name":"to_env","children":[],"call":["Env  new ","connection parallel_manager ","connection ssl "," headers "," options ","connection build_exclusive_url "," params "," path "," body "," http_method "]}," Faraday marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" options= ","serialised [] "," params= "," path= "," headers= "," body= "," http_method= "]}," Faraday marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" options "," params "," path "," headers "," body "," http_method "]}," Faraday []=":{"type":"method","name":"[]=","children":[],"call":[" headers []= "," headers ","ProxyOptions  from ","key to_sym == ","key to_sym "," custom_members []= "," custom_members "," in_member_set? "," current_body ","key == "]}," Faraday []":{"type":"method","name":"[]","children":[],"call":[" headers [] "," headers "," custom_members [] "," custom_members "," in_member_set? "," [] "," current_body ","key == "]}," Faraday url":{"type":"method","name":"url","children":[],"call":[" params update "," params "," params merge_query "," options params_encoder "," options "," path= ","path split ","path slice ","anchor_index nil? ","path index ","path query= ","path dup ","path query ","path respond_to? "," params merge_path query  "," path slice = "," path dup = ","path slice  split ","path dup  split ","path slice  slice ","path dup  slice ","path index  nil? ","path slice  index ","path dup  index ","path slice  query= ","path dup  query= ","path path query = ","path slice  dup ","path dup  dup ","path slice  query ","path dup  query ","path path query  ","path slice  respond_to? ","path dup  respond_to? "]}," Faraday headers=":{"type":"method","name":"headers=","children":[],"call":[" member_set "," headers replace "," headers "]}," Faraday params=":{"type":"method","name":"params=","children":[],"call":[" member_set "," params replace "," params "]}," Faraday create":{"type":"method","name":"create","children":[],"call":[]}," Faraday Request Instrumentation instrumenter":{"type":"method","name":"instrumenter","children":[],"call":[" [] "]}," Faraday Request Instrumentation name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Faraday verify_hostname?":{"type":"method","name":"verify_hostname?","children":[],"call":[" verify_hostname != "," verify_hostname "]}," Faraday disable?":{"type":"method","name":"disable?","children":[],"call":[" verify? ! "," verify? "]}," Faraday verify?":{"type":"method","name":"verify?","children":[],"call":[" verify != "," verify "]}," Faraday stream_response?":{"type":"method","name":"stream_response?","children":[],"call":[" on_data is_a? "," on_data "," request stream_response? "," request "]}," Faraday from":{"type":"method","name":"from","children":[],"call":[]}," Faraday member_set":{"type":"method","name":"member_set","children":[],"call":[]}," Faraday in_member_set?":{"type":"method","name":"in_member_set?","children":[],"call":[" class member_set include? ","key to_s "," class member_set "," class ","key to_sym "]}," Faraday custom_members":{"type":"method","name":"custom_members","children":[],"call":[]}," Faraday stream_response":{"type":"method","name":"stream_response","children":[],"call":[" request on_data call "," +@ "," request on_data "," request ","chunk bytesize ","size positive? ","chunk bytesize positive? ","block call "]}," Faraday inspect":{"type":"method","name":"inspect","children":[],"call":["attrs join "," class ","attrs << "," custom_members inspect "," custom_members "," custom_members empty? ","value inspect "," send "," members each "," members "," send  inspect "]}," Faraday parallel?":{"type":"method","name":"parallel?","children":[],"call":[" parallel_manager ! ! "," parallel_manager ! "," parallel_manager "]}," Faraday parse_body?":{"type":"method","name":"parse_body?","children":[],"call":["Env StatusesWithoutBody  include? ! ","Env StatusesWithoutBody  include? "," status "]}," Faraday clear_body":{"type":"method","name":"clear_body","children":[],"call":[" body= "," +@ "," request_headers []= "," request_headers "]}," Faraday needs_body?":{"type":"method","name":"needs_body?","children":[],"call":["Env MethodsWithBodies  include? "," method "," body ! "," body "]}," Faraday success?":{"type":"method","name":"success?","children":[],"call":["Env SuccessfulStatuses  include? "," status "]}," Faraday body=":{"type":"method","name":"body=","children":[],"call":[" []= "]}," Faraday body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Faraday current_body":{"type":"method","name":"current_body","children":[],"call":[" status ! ! "," status ! "," status "]}," Faraday new_builder":{"type":"method","name":"new_builder","children":[],"call":[" builder_class new "," builder_class "]}," Faraday Logging Formatter exception":{"type":"method","name":"exception","children":[],"call":[" log_body ","exc response_body "," log_body? ","exc respond_to? "," log_headers ","exc response_headers "," log_headers? ","exc full_message "," public_send "," log_level "," log_errors? "," proc "]}," Faraday Adapter Test to_s":{"type":"method","name":"to_s","children":[],"call":[" body "," path "]}," Faraday Adapter Test body_match?":{"type":"method","name":"body_match?","children":[],"call":["request_body == "," body "," body call "," body to_s empty? "," body to_s "]}," Faraday Adapter Test headers_match?":{"type":"method","name":"headers_match?","children":[],"call":["request_headers [] == "," headers [] "," headers ","request_headers [] "," headers keys all? "," headers keys ","Set  new == ","Set  new ","hs [] "," headers dup tap "," headers dup "," strict_mode "]}," Faraday Adapter Test params_match?":{"type":"method","name":"params_match?","children":[],"call":["request_params [] == ","params [] ","request_params [] ","params keys all? ","params keys ","Set  new == ","Set  new "," strict_mode ","env params_encoder decode "," query ","env params_encoder ","env [] ","env []  [] == ","env []  [] "]}," Faraday Adapter Test path_match?":{"type":"method","name":"path_match?","children":[],"call":[" path == "," path ","(send\n  (lvar :meta) :[]=\n  (sym :match_data)\n  (send\n    (send nil :path) :match\n    (lvar :request_path))) ! ! ","(send\n  (lvar :meta) :[]=\n  (sym :match_data)\n  (send\n    (send nil :path) :match\n    (lvar :request_path))) ! ","meta []= "," path match "," path is_a? "]}," Faraday Adapter Test matches?":{"type":"method","name":"matches?","children":[],"call":[" headers_match? "," body_match? "," params_match? "," path_match? "," host == "," host "," host nil? ","env [] ","env request_headers ","Faraday Utils  normalize_path ","env [] path ","env [] host ","env env request_headers  "]}}