{" AwesomePrintRails awesome_active_support_time":{"type":"method","name":"awesome_active_support_time","children":[],"call":[" awesome_self "]}," AwesomePrintRails awesome_active_record_class":{"type":"method","name":"awesome_active_record_class","children":[],"call":["object inspect ","(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","c type ","c name to_sym ","c name ","object columns inject ","ActiveSupport OrderedHash  new ","object columns ","object table_exists? ","object respond_to? "]}," AwesomePrintRails awesome_active_record_instance":{"type":"method","name":"awesome_active_record_instance","children":[],"call":["(begin\n  (lvar :object)) + "," awesome_hash ","hash []= ","object send ","name to_sym ","object new_record? ","object has_attribute? ","object class column_names inject ","ActiveSupport OrderedHash  new ","object class column_names ","object class "]}," AwesomePrintRails printable_with_rails":{"type":"method","name":"printable_with_rails","children":[],"call":["object class is_a? ","ActiveRecord Base  class ","object class ","printable == ","object is_a? "," printable_without_rails "," printable_without_rails  == ","  printable_without_rails _without_rails "]}," AwesomePrintRails included":{"type":"method","name":"included","children":[],"call":[]}," Kernel ap":{"type":"method","name":"ap","children":[],"call":["ap puts ","AwesomePrint  new "," puts ","object ai ","AwesomePrint  console? ","AwesomePrint  new  puts "]}," AwesomePrint outdent":{"type":"method","name":"outdent","children":[],"call":["  * ","@indentation - ","@options [] ","@options [] abs "]}," AwesomePrint indent":{"type":"method","name":"indent","children":[],"call":["  * "]}," AwesomePrint indented":{"type":"method","name":"indented","children":[],"call":["@options [] ","@options [] abs "]}," AwesomePrint plain_single_line":{"type":"method","name":"plain_single_line","children":[],"call":["@options []= ","@options [] "]}," AwesomePrint colorize":{"type":"method","name":"colorize","children":[],"call":["s send ","@options [] [] ","@options [] ","@options [] [] nil? "," colorize? ! "," colorize? ","@options [] [] ! ","CGI  escapeHTML ","CGI  escapeHTML  CGI  escapeHTML end ","@optionCGI  escapeHTML  [] [] ","@optionCGI  escapeHTML  [] ","@optionCGI  escapeHTML  [] [] nil? ","@optionCGI  escapeHTML  [] [] ! ","CGI  eCGI  escapeHTML capeHTML "]}," AwesomePrint declassify":{"type":"method","name":"declassify","children":[],"call":["object class to_s gsub downcase to_sym ","object class to_s gsub downcase ","object class to_s gsub ","object class to_s ","object class ","object is_a? "]}," AwesomePrint printable":{"type":"method","name":"printable","children":[],"call":["CORE  grep [] ","CORE  grep "," declassify "]}," AwesomePrint nested":{"type":"method","name":"nested","children":[],"call":[" colorize ","object class "," printable "]}," AwesomePrint awesome":{"type":"method","name":"awesome","children":[],"call":["Thread  current [] pop ","Thread  current [] ","Thread  current "," send "," printable ","Thread  current [] << ","object object_id "," nested ","Thread  current [] include? "]}," AwesomePrint awesome_self":{"type":"method","name":"awesome_self","children":[],"call":[" colorize "," declassify ","appear [] ","object inspect << ","appear [] to_s ","object inspect ","object inspect to_s << ","object inspect to_s "]}," AwesomePrint awesome_dir":{"type":"method","name":"awesome_dir","children":[],"call":[" awesome_self ","ls chop ","ls empty? ","d path ","d path shellescape "]}," AwesomePrint awesome_file":{"type":"method","name":"awesome_file","children":[],"call":[" awesome_self ","ls chop ","ls empty? ","f path ","File  directory? ","f path shellescape "]}," AwesomePrint awesome_class":{"type":"method","name":"awesome_class","children":[],"call":[" awesome_self ","c superclass ","c c superclass  "]}," AwesomePrint awesome_hash":{"type":"method","name":"awesome_hash","children":[],"call":["data join ","{\n << << "," outdent ","{\n << ","@options [] ","arr << ","formatted_key << "," awesome "," indented ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :multiline))\n  (send\n    (lvar :key) :rjust\n    (lvar :width))\n  (lvar :key)) << "," colorize ","key rjust ","data inject ","(send\n  (lvar :data) :map) max + ","(send\n  (lvar :data) :map) max ","key size ","data map ","h [] "," plain_single_line ","h keys inject ","h keys ","formatted_key << << "," indent + ","key ljust "," indent ","@options [] >= ","@options [] > ","h == ","h keys map ","keys map ","a to_s <=> ","b to_s ","a to_s ","h keys sort ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :multiline))\n  (send\n    (lvar :key) :rjust\n    (lvar :width))\n  (lvar :key)) <<  << ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :multiline))\n  (send\n    (lvar :key) :rjust\n    (lvar :(send\n  (lvar :data) :map) max + ))\n  (lvar :key)) << ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :multiline))\n  (send\n    (lvar :key) :rjust\n    (lvar :(send\n  (lvar :data) :map) max ))\n  (lvar :key)) << ","h h keys  inject ","h h keys  ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :multiline))\n  (send\n    (lvar :key) :rjust\n    (lvar :width))\n  (lvar :key)) <<  << << ","h h keys  map ","h keys  map ","h h keys  sort "]}," AwesomePrint awesome_array":{"type":"method","name":"awesome_array","children":[],"call":["data join ","arr << "," awesome ","a inject ","[\n << << "," outdent ","[\n << ","index << "," indented "," colorize ","arr size to_s rjust ","arr size to_s ","arr size "," indent ","(send\n  (send\n    (lvar :a) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :a) :size) :-\n  (int 1)) to_s ","a size - ","a size ","@options [] ","a == ","[  << << ","[  << ","(send\n  (lvar :a) :map) join ","a map "," methods_array ","a instance_variable_defined? "," colorize  << "]}," AwesomePrint puts":{"type":"method","name":"puts","children":[],"call":["Kernel  puts "," awesome "]}," AwesomePrint initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current [] ","Thread  current ","@options [] ","(pair\n  (sym :multiline)\n  (true)) merge ","(pair\n  (sym :array)\n  (sym :white)) merge ","options delete ","@options [] abs "," load_custom_defaults "," merge_options! "," merge_custom_defaults! ","(pair\n  (sym :multiline)\n  (true)) merge  [] ","(pair\n  (sym :multiline)\n  (true)) merge  [] abs "]}," Kernel ai":{"type":"method","name":"ai","children":[],"call":["ap send ","AwesomePrint  new ","ap awesome ","AwesomePrint Inspector  new ","awesome html_safe ","options [] ","AwesomePrint  new  send ","AwesomePrint Inspector  new  send ","AwesomePrint  new  awesome ","AwesomePrint Inspector  new  awesome ","ap awesome html_safe  ","ap ap awesome  ","awesome html_safe  html_safe ","ap awesome  html_safe "]}," AwesomePrint defaults=":{"type":"method","name":"defaults=","children":[],"call":[]}," AwesomePrint defaults":{"type":"method","name":"defaults","children":[],"call":[]}," AwesomePrint load_custom_defaults":{"type":"method","name":"load_custom_defaults","children":[],"call":["$stderr puts ","@options merge! "," class defaults "," class ","@options [] merge! "," class defaults delete ","@options [] "," load ","File  readable? ","File  join ","ENV  [] "]}," AwesomePrint merge_custom_defaults!":{"type":"method","name":"merge_custom_defaults!","children":[],"call":["$stderr puts "," merge_options! "," class defaults "," class "," load ","File  readable? ","File  join ","ENV  [] "]}," AwesomePrint merge_options!":{"type":"method","name":"merge_options!","children":[],"call":["@options merge! ","@options [] merge! ","options delete ","@options [] "]}," AwesomePrint awesome_bigdecimal":{"type":"method","name":"awesome_bigdecimal","children":[],"call":[" awesome_self ","n to_f "]}," AwesomePrintActiveSupport awesome_hash_with_indifferent_access":{"type":"method","name":"awesome_hash_with_indifferent_access","children":[],"call":[" awesome_hash "]}," AwesomePrintActiveSupport awesome_active_support_time":{"type":"method","name":"awesome_active_support_time","children":[],"call":[" awesome_self "]}," AwesomePrintActiveSupport printable_with_active_support":{"type":"method","name":"printable_with_active_support","children":[],"call":["object is_a? ","printable == "," printable_without_active_support ","(const nil :HashWithIndifferentAccess) ! ","(const\n  (const nil :ActiveSupport) :TimeWithZone) ! "," printable_without_active_support  == ","  printable_without_active_support _without_active_support "]}," AwesomePrintActiveSupport included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrintActiveRecord awesome_active_record_class":{"type":"method","name":"awesome_active_record_class","children":[],"call":["object inspect ","(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","c type ","c name to_sym ","c name ","object columns inject ","ActiveSupport OrderedHash  new ","object columns ","object respond_to? ","object respond_to? ! ","(const\n  (const nil :ActiveSupport) :OrderedHash) ! "]}," AwesomePrintActiveRecord awesome_active_record_instance":{"type":"method","name":"awesome_active_record_instance","children":[],"call":["(begin\n  (lvar :object)) + "," awesome_hash ","hash []= ","object send ","name to_sym ","object new_record? ","object has_attribute? ","object class column_names inject ","ActiveSupport OrderedHash  new ","object class column_names ","object class ","object inspect ","(const\n  (const nil :ActiveSupport) :OrderedHash) ! "]}," AwesomePrintActiveRecord printable_with_active_record":{"type":"method","name":"printable_with_active_record","children":[],"call":["object ancestors include? ","object ancestors ","printable == ","object is_a? "," printable_without_active_record ","(const\n  (const nil :ActiveRecord) :Base) ! "," printable_without_active_record  == ","  printable_without_active_record _without_active_record "]}," AwesomePrintActiveRecord included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrintLogger ap":{"type":"method","name":"ap","children":[],"call":[" send ","object ai ","AwesomePrint  defaults [] ","AwesomePrint  defaults "]}," AwesomePrintActionView ap_debug":{"type":"method","name":"ap_debug","children":[],"call":[" content_tag ","formatted gsub! "," class AP_ANSI_TO_HTML  each "," class ","options [] "," h ","object ai ","object ai sub ","options merge "," h  gsub! "]}," AwesomePrintActionView included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint awesome_struct":{"type":"method","name":"awesome_struct","children":[],"call":[" awesome_hash ","h []= ","s each_pair "]}," Array grep":{"type":"method","name":"grep","children":[],"call":["(or\n  (send\n    (lvar :item) :is_a?\n    (const nil :Symbol))\n  (send\n    (lvar :item) :is_a?\n    (const nil :String))) ! ","item is_a? ","arr reject! ","arr instance_variable_set "," instance_variable_get "," instance_variable_defined? "," original_grep "," eval ","blk binding ","pattern inspect ","match to_s gsub ","match to_s "," original_grep  reject! "," original_grep  instance_variable_set "]}," AwesomePrint method_tuple":{"type":"method","name":"method_tuple","children":[],"call":["owner to_s ","args join ","method name to_s ","method name ","(begin\n  (nth-ref 2)) gsub ","method to_s =~ ","method to_s ","args []= ","args [] ","method arity < ","method arity ","i + ","method arity abs times map ","method arity abs times ","method arity abs ","arr << ","name to_s ","arr size + ","arr size ","type == ","method parameters inject ","method parameters ","method respond_to? ","(irange\n  (int 1)\n  (send\n    (send\n      (lvar :method) :arity) :abs)) map ","(begin\n  (nth-ref 2)) gsub  to_s "]}," AwesomePrint methods_array":{"type":"method","name":"methods_array","children":[],"call":["[\n << << "," outdent ","[\n << ","data join ","arr << "," colorize ","item [] ","item [] ljust ","item [] rjust "," indented "," indent ","arr size to_s rjust ","arr size to_s ","arr size ","@options [] ","tuples inject ","(send\n  (lvar :tuples) :map) max ","item [] size ","tuples map ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s ","tuples size - ","tuples size ","name to_s "," method_tuple ","object instance_method ","object respond_to? ","object method ","a map ","a instance_variable_get ","the_method respond_to? ","a instance_variable_get  instance_method ","a instance_variable_get  respond_to? ","a instance_variable_get  method "]}," AwesomePrint awesome_method":{"type":"method","name":"awesome_method","children":[],"call":[" colorize "," method_tuple "]}," UnboundMethod name":{"type":"method","name":"name","children":[],"call":[" inspect split [] "," inspect split "," inspect "]}," Method name":{"type":"method","name":"name","children":[],"call":[" inspect split [] "," inspect split "," inspect "]}," AwesomePrintMongoMapper awesome_mongo_mapper_class":{"type":"method","name":"awesome_mongo_mapper_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s underscore intern ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s underscore ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s ","c last type ","c last ","c first ","(send\n  (send\n    (lvar :object) :keys) :sort_by) inject ","ActiveSupport OrderedHash  new ","object keys sort_by ","object keys ","object inspect ","object respond_to? ! ","object respond_to? ","(const\n  (const nil :ActiveSupport) :OrderedHash) ! "]}," AwesomePrintMongoMapper awesome_mongo_mapper_instance":{"type":"method","name":"awesome_mongo_mapper_instance","children":[],"call":["(begin\n  (lvar :object)) + "," awesome_hash ","hash []= ","object [] ","(send\n  (send\n    (send\n      (lvar :object) :keys) :keys) :sort_by) inject ","ActiveSupport OrderedHash  new ","object keys keys sort_by ","object keys keys ","object keys ","object inspect ","(const\n  (const nil :ActiveSupport) :OrderedHash) ! "]}," AwesomePrintMongoMapper printable_with_mongo_mapper":{"type":"method","name":"printable_with_mongo_mapper","children":[],"call":["(send\n  (send\n    (lvar :object) :ancestors) :&\n  (array\n    (const\n      (const nil :MongoMapper) :Document)\n    (const\n      (const nil :MongoMapper) :EmbeddedDocument))) size > ","(send\n  (send\n    (lvar :object) :ancestors) :&\n  (array\n    (const\n      (const nil :MongoMapper) :Document)\n    (const\n      (const nil :MongoMapper) :EmbeddedDocument))) size ","object ancestors & ","object ancestors ","printable == ","object is_a? ","(const\n  (const nil :MongoMapper) :Document) ! "," printable_without_mongo_mapper "," printable_without_mongo_mapper  == ","  printable_without_mongo_mapper _without_mongo_mapper "]}," AwesomePrintMongoMapper included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint force_colors!":{"type":"method","name":"force_colors!","children":[],"call":[]}," AwesomePrint colorize?":{"type":"method","name":"colorize?","children":[],"call":["ENV  [] ","ENV  [] != ","STDOUT  tty? "]}," AwesomePrint version":{"type":"method","name":"version","children":[],"call":[]}," AwesomePrint Inspector merge_custom_defaults!":{"type":"method","name":"merge_custom_defaults!","children":[],"call":["$stderr puts "," merge_options! ","AwesomePrint  defaults "," load ","File  readable? ","File  join ","ENV  [] ","AwesomePrint  defaults is_a? "," dotfile "," load_dotfile "," File  join  "," load_File  join  "]}," AwesomePrint Inspector merge_options!":{"type":"method","name":"merge_options!","children":[],"call":["@options merge! ","@options [] merge! ","options delete ","@options [] "]}," AwesomePrint Inspector printable":{"type":"method","name":"printable","children":[],"call":["object class to_s gsub downcase to_sym ","object class to_s gsub downcase ","object class to_s gsub ","object class to_s ","object class ","object ancestors to_a include? ","object ancestors to_a ","object ancestors ","object respond_to? "]}," AwesomePrint Inspector unnested":{"type":"method","name":"unnested","children":[],"call":["@formatter format "," printable "]}," AwesomePrint Inspector nested":{"type":"method","name":"nested","children":[],"call":["@formatter colorize ","object class "," printable "]}," AwesomePrint Inspector colorize?":{"type":"method","name":"colorize?","children":[],"call":["ENV  [] ","ENV  [] != ","STDOUT  tty? ","AwesomePrint  force_colors "]}," AwesomePrint Inspector awesome":{"type":"method","name":"awesome","children":[],"call":["Thread  current [] pop ","Thread  current [] ","Thread  current "," unnested ","Thread  current [] << ","object object_id "," nested ","Thread  current [] include? "]}," AwesomePrint Inspector initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current [] ","Thread  current ","AwesomePrint Formatter  new "," merge_options! "," merge_custom_defaults! ","AwesomePrint Indentator  new ","@options [] abs ","@options [] "]}," AwesomePrint Formatter limited":{"type":"method","name":"limited","children":[],"call":["temp []= ","data length - - ","data length - ","data length ","head to_s rjust ","head to_s "," indent ","data [] strip ","data [] ","data [] + + ","tail -@ ","data [] + ","head - ","(send\n  (lvar :limit) :-\n  (int 1)) % ","limit - ","limit / ","data length <= "," get_limit_size ","data [] + +  []= ","limit /  to_s rjust ","limit /  to_s ","head -  -@ ","limit /  - ","(send\n  (lvar : get_limit_size ) :-\n  (int 1)) % "," get_limit_size  - "," get_limit_size  / "," get_ get_limit_size _size "]}," AwesomePrint Formatter get_limit_size":{"type":"method","name":"get_limit_size","children":[],"call":["@options [] ","@options [] == "]}," AwesomePrint Formatter should_be_limited?":{"type":"method","name":"should_be_limited?","children":[],"call":["@options [] > ","@options [] ","@options [] is_a? ","@options [] == "]}," AwesomePrint Formatter outdent":{"type":"method","name":"outdent","children":[],"call":["  * ","@indentation - ","@options [] abs ","@options [] "]}," AwesomePrint Formatter indent":{"type":"method","name":"indent","children":[],"call":["  * "]}," AwesomePrint Formatter left_aligned":{"type":"method","name":"left_aligned","children":[],"call":["@options []= ","@options [] "]}," AwesomePrint Formatter indented":{"type":"method","name":"indented","children":[],"call":["@options [] abs ","@options [] "]}," AwesomePrint Formatter align":{"type":"method","name":"align","children":[],"call":[" indent [] + ","value ljust "," indent [] ","@indentation + ","@options [] "," indent "," indent + ","@options [] == ","value rjust ","@options [] > "]}," AwesomePrint Formatter plain_single_line":{"type":"method","name":"plain_single_line","children":[],"call":["@options []= ","@options [] "]}," AwesomePrint Formatter method_tuple":{"type":"method","name":"method_tuple","children":[],"call":["owner to_s ","args join ","method name to_s ","method name ","(begin\n  (nth-ref 2)) gsub ","method to_s =~ ","method to_s ","args []= ","args [] ","method arity < ","method arity ","(irange\n  (int 1)\n  (send\n    (send\n      (lvar :method) :arity) :abs)) map ","method arity abs ","arr << ","name to_s ","arr size + ","arr size ","type == ","method parameters inject ","method parameters ","method respond_to? ","(begin\n  (lvar :klass)) gsub ","klass sub! ","klass =~ ","(begin\n  (nth-ref 2)) gsub  to_s ","(begin\n  (lvar :klass)) gsub  to_s "]}," AwesomePrint Formatter methods_array":{"type":"method","name":"methods_array","children":[],"call":["[\n << << "," outdent ","[\n << ","data join ","arr << "," colorize ","item [] ","item [] ljust ","item [] rjust "," indented ","index << ","arr size to_s rjust ","arr size to_s ","arr size ","@options [] "," indent ","tuples inject ","(send\n  (lvar :tuples) :map) max ","item [] size ","tuples map ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s ","tuples size - ","tuples size ","name to_s "," method_tuple ","object instance_method ","object respond_to? ","the_method respond_to? ","object method ","a map ","a instance_variable_get ","name is_a? ","x to_s <=> ","y to_s ","x to_s ","a sort! "," indent  << ","a instance_variable_get  instance_method ","a instance_variable_get  respond_to? ","a instance_variable_get  method "]}," AwesomePrint Formatter awesome_instance":{"type":"method","name":"awesome_instance","children":[],"call":["(begin\n  (send\n    (lvar :o) :class)) % ","o __id__ * ","o __id__ ","o class "]}," AwesomePrint Formatter awesome_method":{"type":"method","name":"awesome_method","children":[],"call":[" colorize "," method_tuple ","Formatters MethodFormatter  new format ","Formatters MethodFormatter  new "]}," AwesomePrint Formatter awesome_bigdecimal":{"type":"method","name":"awesome_bigdecimal","children":[],"call":[" colorize ","n to_f inspect ","n to_f ","n to_s "," awesome_simple "," cn to_s ln to_s rize ","n tn to_s _f inspect ","n tn to_s _f ","n tn to_s _s "," awesn to_s me_simple "]}," AwesomePrint Formatter awesome_dir":{"type":"method","name":"awesome_dir","children":[],"call":[" colorize ","ls chop ","d inspect ","ls empty? ","d path shellescape ","d path ","Formatters DirFormatter  new format ","Formatters DirFormatter  new "]}," AwesomePrint Formatter awesome_file":{"type":"method","name":"awesome_file","children":[],"call":[" colorize ","ls chop ","f inspect ","ls empty? ","f path shellescape ","f path ","File  directory? ","Formatters FileFormatter  new format ","Formatters FileFormatter  new "]}," AwesomePrint Formatter awesome_class":{"type":"method","name":"awesome_class","children":[],"call":[" colorize ","c inspect ","c superclass ","Formatters ClassFormatter  new format ","Formatters ClassFormatter  new ","c c superclass  "]}," AwesomePrint Formatter awesome_struct":{"type":"method","name":"awesome_struct","children":[],"call":[" awesome_hash ","hash []= ","s each_pair ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new ","s members ","Formatters StructFormatter  new format ","Formatters StructFormatter  new "]}," AwesomePrint Formatter awesome_object":{"type":"method","name":"awesome_object","children":[],"call":["data join "," awesome_instance "," outdent ","@options [] ","key << "," colorize + ","@inspector awesome ","o instance_variable_get "," colorize "," indented ","key sub! ","key =~ "," align ","declaration size "," left_aligned ","vars sort map ","vars sort ","var to_s ","o respond_to? ","var [] to_sym ","var [] ","o instance_variables map ","o instance_variables ","var to_s [] to_sym ","var to_s [] ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new "]}," AwesomePrint Formatter awesome_hash":{"type":"method","name":"awesome_hash","children":[],"call":["data join ","{\n << << "," outdent ","{\n << ","@options [] "," limited "," should_be_limited? "," align << << ","@inspector awesome "," align << "," colorize "," align "," indented ","data map ","@options [] > ","(send\n  (lvar :data) :map) max ","key size ","h [] "," plain_single_line ","keys map ","h keys ","a to_s <=> ","b to_s ","a to_s ","h keys sort ","h == ","Formatters HashFormatter  new format ","Formatters HashFormatter  new "," limited  join "," limited  map ","(send\n  (lvar : limited ) :map) max ","h keys  map ","h h keys  ","h h keys  sort "]}," AwesomePrint Formatter awesome_array":{"type":"method","name":"awesome_array","children":[],"call":["[  << << ","[  << ","(send\n  (lvar :a) :map) join ","@inspector awesome ","a map ","[\n << << "," outdent ","[\n << ","data join "," limited "," should_be_limited? ","arr << ","index << "," indented "," colorize ","arr size to_s rjust ","arr size to_s ","arr size ","@options [] "," indent ","a inject ","(send\n  (send\n    (lvar :a) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :a) :size) :-\n  (int 1)) to_s ","a size - ","a size "," methods_array ","a instance_variable_defined? ","a == ","Formatters ArrayFormatter  new format ","Formatters ArrayFormatter  new "," limited  join "," indent  << "]}," AwesomePrint Formatter awesome_self":{"type":"method","name":"awesome_self","children":[],"call":[" colorize ","object inspect to_s ","object inspect "," awesome_object ","object instance_variables any? ","object instance_variables ","@options [] "," awesome_hash ","object to_hash ","object == ","object respond_to? "," awesome_simple "," convert_to_hash "," awesome_ convert_to_hash  ","object to_ convert_to_hash  "," convert_to_ convert_to_hash  "]}," AwesomePrint Formatter colorize":{"type":"method","name":"colorize","children":[],"call":["s send ","@options [] ","@options [] [] ","@inspector colorize? ! ","@inspector colorize? ","@options [] [] ! ","CGI  escapeHTML ","str send ","str method arity == ","str method arity ","str method ","CGI  escapeHTML  CGI  escapeHTML end ","@optionCGI  escapeHTML  [] ","@optionCGI  escapeHTML  [] [] ","@inCGI  escapeHTML pector colorize? ! ","@inCGI  escapeHTML pector colorize? ","@optionCGI  escapeHTML  [] [] ! ","CGI  eCGI  escapeHTML capeHTML ","CGI  escapeHTML tr CGI  escapeHTML end ","CGI  escapeHTML  send ","CGI  escapeHTML tr method arity == ","CGI  escapeHTML  method arity == ","CGI  escapeHTML tr method arity ","CGI  escapeHTML  method arity ","CGI  escapeHTML tr method ","CGI  escapeHTML  method "]}," AwesomePrint Formatter cast":{"type":"method","name":"cast","children":[],"call":["CORE  grep [] ","CORE  grep ","CORE_FORMATTERS  include? "]}," AwesomePrint Formatter format":{"type":"method","name":"format","children":[],"call":["@options [] "," awesome_self "," send ","core_class != "," cast ","AwesomePrint Formatters FallbackFormatter  new format ","AwesomePrint Formatters FallbackFormatter  new "," puts ","AwesomePrint  debug ","fmt last new format ","fmt last new ","fmt last ","fmt first to_s red ","fmt first to_s ","fmt first ","fmt last formattable? ","fmt last core? ","fmt last to_s blue ","fmt last to_s ","fmt first to_s greenish "," class registered_formatters each "," class registered_formatters "," class ","format_with new format ","format_with new ","format_with to_s blueish ","format_with to_s "," active_formatter ","type to_s red ","type to_s ","  awesome_self _self ","  send _self "," cast  != "," active_formatter  new format "," active_formatter  new "," active_formatter  to_s blueish "," active_formatter  to_s "]}," AwesomePrint Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] abs ","@options [] ","inspector options ","inspector options  [] abs ","inspector options  [] "]}," AwesomePrint Nokogiri awesome_nokogiri_xml_node":{"type":"method","name":"awesome_nokogiri_xml_node","children":[],"call":[" colorize ","contents empty? ! ","contents empty? ","xml gsub! ","object to_xml ","object empty? ","object is_a? "," colorize  empty? ! "," colorize  empty? ","object to_xml  gsub! ","object to_object to_xml  "]}," AwesomePrint Nokogiri cast_with_nokogiri":{"type":"method","name":"cast_with_nokogiri","children":[],"call":["object is_a? "," cast_without_nokogiri ","  cast_without_nokogiri _without_nokogiri "]}," AwesomePrint Nokogiri included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint Mongoid awesome_mongoid_class":{"type":"method","name":"awesome_mongoid_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s underscore intern ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s underscore ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s ","c [] type ","c [] ","c [] name ","object fields inject "," ActiveSupport OrderedHash  new ","object fields ","object inspect ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","c [] name to_sym ","(send\n  (send\n    (lvar :object) :fields) :sort_by) inject ","object fields sort_by ","(lvar :name) join "," awesome_simple ","object superclass to_s ","object to_s "]}," AwesomePrint Mongoid cast_with_mongoid":{"type":"method","name":"cast_with_mongoid","children":[],"call":["object ancestors include? ","object ancestors ","object is_a? "," cast_without_mongoid ","object class ancestors include? ","object class ancestors ","object class ","  cast_without_mongoid _without_mongoid "]}," AwesomePrint Mongoid included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint MongoMapper awesome_mongo_mapper_class":{"type":"method","name":"awesome_mongo_mapper_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s underscore intern ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s underscore ","(or\n  (send\n    (send\n      (lvar :c) :last) :type)\n  (str \"undefined\")) to_s ","c last type ","c last ","c first ","object keys sort inject "," ActiveSupport OrderedHash  new ","object keys sort ","object keys ","object inspect ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","data []= ","name to_s ","object associations each ","object associations ","@options [] [] ","@options [] ","(lvar :name) join "," awesome_simple ","object superclass to_s ","object to_s "]}," AwesomePrint MongoMapper cast_with_mongo_mapper":{"type":"method","name":"cast_with_mongo_mapper","children":[],"call":["(send\n  (send\n    (lvar :object) :ancestors) :&\n  (array\n    (const\n      (const\n        (cbase) :MongoMapper) :Document)\n    (const\n      (const\n        (cbase) :MongoMapper) :EmbeddedDocument))) size > ","(send\n  (send\n    (lvar :object) :ancestors) :&\n  (array\n    (const\n      (const\n        (cbase) :MongoMapper) :Document)\n    (const\n      (const\n        (cbase) :MongoMapper) :EmbeddedDocument))) size ","object ancestors & ","object ancestors ","object is_a? "," cast_without_mongo_mapper "," apply_default_mongo_mapper_options ","  cast_without_mongo_mapper _without_mongo_mapper "]}," AwesomePrint MongoMapper included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint ActiveSupport awesome_hash_with_indifferent_access":{"type":"method","name":"awesome_hash_with_indifferent_access","children":[],"call":[" awesome_hash "]}," AwesomePrint ActiveSupport awesome_active_support_time":{"type":"method","name":"awesome_active_support_time","children":[],"call":[" colorize ","object inspect "]}," AwesomePrint ActiveSupport cast_with_active_support":{"type":"method","name":"cast_with_active_support","children":[],"call":["object is_a? "," cast_without_active_support ","  cast_without_active_support _without_active_support "]}," AwesomePrint ActiveSupport included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint ActiveRecord awesome_active_record_class":{"type":"method","name":"awesome_active_record_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","c type ","c name to_sym ","c name ","object columns inject "," ActiveSupport OrderedHash  new ","object columns ","object inspect ","object to_s == ","object to_s ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! "," awesome_class ","object abstract_class? ","(lvar :name) join "," awesome_simple ","object superclass to_s "]}," AwesomePrint ActiveRecord cast_with_active_record":{"type":"method","name":"cast_with_active_record","children":[],"call":["object ancestors include? ","object ancestors ","object is_a? "," cast_without_active_record ","(const\n  (cbase) :ActiveRecord) ! ","type == ","object class ancestors include? ","object class ancestors ","object class ","(const\n  (const\n    (cbase) :ActiveRecord) :Base) ! ","  cast_without_active_record _without_active_record "]}," AwesomePrint ActiveRecord included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint ActionView ap_debug":{"type":"method","name":"ap_debug","children":[],"call":["object ai sub ","object ai ","options merge "]}," AwesomePrint Logger ap":{"type":"method","name":"ap","children":[],"call":[" send ","object ai ","AwesomePrint  defaults [] ","AwesomePrint  defaults "]}," AwesomePrint Mongoid awesome_mongoid_bson_id":{"type":"method","name":"awesome_mongoid_bson_id","children":[],"call":["object inspect "]}," AwesomePrint Mongoid awesome_mongoid_document":{"type":"method","name":"awesome_mongoid_document","children":[],"call":[" awesome_hash ","object errors ","object errors empty? ! ","object errors empty? ","hash []= ","c [] ","c [] to_sym ","(send\n  (send\n    (lvar :object) :attributes) :sort_by) inject "," ActiveSupport OrderedHash  new ","object attributes sort_by ","object attributes ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","(send\n  (begin\n    (or\n      (send\n        (lvar :object) :attributes)\n      (hash))) :sort_by) inject ","(or\n  (send\n    (lvar :object) :attributes)\n  (hash)) sort_by "]}," AwesomePrint ActiveRecord awesome_active_record_instance":{"type":"method","name":"awesome_active_record_instance","children":[],"call":["(begin\n  (lvar :object)) << "," awesome_hash ","hash []= ","object send ","name to_sym ","object new_record? ","object has_attribute? ","object class column_names inject "," ActiveSupport OrderedHash  new ","object class column_names ","object class "," awesome_object ","@options [] ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","object read_attribute ","object respond_to? ","object attributes ","object class column_names != ","object attributes keys "]}," AwesomePrint pry!":{"type":"method","name":"pry!","children":[],"call":["Pry  print= ","output puts ","value ai "," proc "]}," AwesomePrint irb!":{"type":"method","name":"irb!","children":[{"type":"method","name":"inspect_object","children":[],"asgn":[],"call":["object ai "]},{"type":"method","name":"output_value","children":[],"asgn":[],"call":[" ap ","@context last_value "]}],"call":[" ap ","@context last_value ","IRB Irb  class_eval ","IRB  formatter= ","(send\n  (const nil :Class) :new\n  (const\n    (const nil :IRB) :Formatter)) new ","object ai ","Class  new ","IRB  version include? ","IRB  version "," usual_rb "," diet_rb "]}," AwesomePrint rails_console?":{"type":"method","name":"rails_console?","children":[],"call":["(or\n  (defined?\n    (const\n      (const nil :Rails) :Console))\n  (send\n    (const nil :ENV) :[]\n    (str \"RAILS_ENV\"))) ! ! ","(or\n  (defined?\n    (const\n      (const nil :Rails) :Console))\n  (send\n    (const nil :ENV) :[]\n    (str \"RAILS_ENV\"))) ! ","ENV  [] "," console? "," boolean "]}," AwesomePrint console?":{"type":"method","name":"console?","children":[],"call":["(or\n  (defined?\n    (const nil :IRB))\n  (defined?\n    (const nil :Pry))) ! ! ","(or\n  (defined?\n    (const nil :IRB))\n  (defined?\n    (const nil :Pry))) ! "," boolean "]}," AwesomePrint Formatter awesome_rational":{"type":"method","name":"awesome_rational","children":[],"call":[" colorize ","n to_s "," awesome_simple "," cn to_s ln to_s rize ","n tn to_s _s "," awesn to_s me_simple "]}," AwesomePrint MongoMapper apply_default_mongo_mapper_options":{"type":"method","name":"apply_default_mongo_mapper_options","children":[],"call":["@options [] ","@options [] [] "]}," AwesomePrint MongoMapper awesome_mongo_mapper_bson_id":{"type":"method","name":"awesome_mongo_mapper_bson_id","children":[],"call":["object inspect "]}," AwesomePrint MongoMapper awesome_mongo_mapper_association":{"type":"method","name":"awesome_mongo_mapper_association","children":[],"call":[" colorize ","object class_name ","object embeddable? ","object class name split last titleize downcase sub ","object class name split last titleize downcase ","object class name split last titleize ","object class name split last ","object class name split ","object class name ","object class "," awesome_object ","@options [] ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","object object class_name  "]}," AwesomePrint MongoMapper awesome_mongo_mapper_instance":{"type":"method","name":"awesome_mongo_mapper_instance","children":[],"call":["(begin\n  (lvar :label)) << "," awesome_hash "," colorize ","object is_a? ","object to_s ","data []= ","name to_s ","object send ","assoc embeddable? ","@options [] [] ","@options [] ","object associations each ","object associations ","hash []= ","object [] ","(send\n  (send\n    (send\n      (lvar :object) :keys) :keys) :sort_by) inject "," ActiveSupport OrderedHash  new ","object keys keys sort_by ","object keys keys ","object keys "," awesome_object ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","(begin\n  (lvar :object to_s )) << "]}," AwesomePrint Formatter awesome_set":{"type":"method","name":"awesome_set","children":[],"call":[" awesome_array ","s to_a ","Formatters ArrayFormatter  new format ","Formatters ArrayFormatter  new "]}," AwesomePrint Sequel awesome_sequel_model_class":{"type":"method","name":"awesome_sequel_model_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","h merge ","data [] ","object db_schema inject ","object db_schema ","(lvar :name) join "," awesome_simple ","object superclass to_s ","object to_s ","defn [] "]}," AwesomePrint Sequel awesome_sequel_dataset":{"type":"method","name":"awesome_sequel_dataset","children":[],"call":["(send nil :awesome_array\n  (send\n    (lvar :dataset) :to_a)) join "," awesome_print ","dataset sql "," awesome_array ","dataset to_a "]}," AwesomePrint Sequel awesome_sequel_document":{"type":"method","name":"awesome_sequel_document","children":[],"call":[" awesome_hash ","object errors ","object errors empty? ! ","object errors empty? ","hash []= ","c [] ","c [] to_sym ","(send\n  (send\n    (lvar :object) :values) :sort_by) inject ","key to_s ","object values sort_by ","object values "]}," AwesomePrint Sequel cast_with_sequel":{"type":"method","name":"cast_with_sequel","children":[],"call":["object class ancestors include? ","object class ancestors ","object class ","object ancestors include? ","object ancestors ","object is_a? "," cast_without_sequel ","  cast_without_sequel _without_sequel "]}," AwesomePrint Sequel included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint Ripple awesome_ripple_document_class":{"type":"method","name":"awesome_ripple_document_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","defn type to_s downcase to_sym ","defn type to_s downcase ","defn type to_s ","defn type ","name to_sym ","object properties inject "," ActiveSupport OrderedHash  new ","object properties ","object inspect ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","(lvar :name) join "," data "," awesome_simple ","object superclass to_s ","object to_s "]}," AwesomePrint Ripple awesome_ripple_document_instance":{"type":"method","name":"awesome_ripple_document_instance","children":[],"call":["(str \"#\") << "," awesome_hash ","hash []= ","object get_proxy ","assoc name ","object class embedded_associations inject ","object class embedded_associations ","object class ","object send ","name to_sym ","object attributes inject "," ActiveSupport OrderedHash  new ","object attributes ","@options [] "," awesome_object ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","(begin\n  (lvar :object)) << "]}," AwesomePrint Ripple cast_with_ripple":{"type":"method","name":"cast_with_ripple","children":[],"call":["object is_a? ","(const\n  (cbase) :Ripple) ! "," cast_without_ripple ","  cast_without_ripple _without_ripple "]}," AwesomePrint Ripple included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint NoBrainer awesome_no_brainer_document":{"type":"method","name":"awesome_no_brainer_document","children":[],"call":[" awesome_hash ","object errors ","object errors empty? ! ","object errors empty? ","hash []= ","c [] ","c [] to_sym ","(send\n  (send\n    (lvar :object) :attributes) :sort_by) inject "," ActiveSupport OrderedHash  new ","object attributes sort_by ","object attributes ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! "]}," AwesomePrint NoBrainer awesome_no_brainer_class":{"type":"method","name":"awesome_no_brainer_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","hash []= ","c [] ","(send\n  (send\n    (lvar :object) :fields) :sort_by) inject "," ActiveSupport OrderedHash  new ","key [] to_s ","key [] ","key [] == ","object fields sort_by ","object fields ","object inspect ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! "]}," AwesomePrint NoBrainer cast_with_no_brainer":{"type":"method","name":"cast_with_no_brainer","children":[],"call":["object class ancestors include? ","object class ancestors ","object class ","object ancestors include? ","object ancestors ","object is_a? "," cast_without_no_brainer ","  cast_without_no_brainer _without_no_brainer "]}," AwesomePrint NoBrainer included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint OpenStruct awesome_open_struct_instance":{"type":"method","name":"awesome_open_struct_instance","children":[],"call":[" awesome_hash ","object marshal_dump ","object class "]}," AwesomePrint OpenStruct cast_with_ostruct":{"type":"method","name":"cast_with_ostruct","children":[],"call":["object is_a? "," cast_without_ostruct ","  cast_without_ostruct _without_ostruct "]}," AwesomePrint OpenStruct included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint Inspector increase_indentation":{"type":"method","name":"increase_indentation","children":[],"call":[" indentator indent ","Proc  new "," indentator "]}," AwesomePrint Inspector current_indentation":{"type":"method","name":"current_indentation","children":[],"call":[" indentator indentation "," indentator "]}," AwesomePrint Indentator indent":{"type":"method","name":"indent","children":[],"call":[" shift_width "]}," AwesomePrint Indentator initialize":{"type":"method","name":"initialize","children":[],"call":["indentation freeze "]}," AwesomePrint Formatters SimpleFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," type "," string "," class formatted_object_type "," class ","object to_s "]}," AwesomePrint Formatters SimpleFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters ObjectFormatter left_aligned":{"type":"method","name":"left_aligned","children":[],"call":[" options []= "," options "," options [] "]}," AwesomePrint Formatters ObjectFormatter awesome_instance":{"type":"method","name":"awesome_instance","children":[],"call":["(begin\n  (send\n    (send nil :object) :class)) % "," object __id__ * "," object __id__ "," object "," object class ","str << ",":0x%08x % "," options [] "," options "," object send to_s "," object send ","String  new ","String  new  << "," object send to_s  << "]}," AwesomePrint Formatters ObjectFormatter valid_instance_var?":{"type":"method","name":"valid_instance_var?","children":[],"call":["variable_name to_s start_with? ","variable_name to_s "]}," AwesomePrint Formatters ObjectFormatter format":{"type":"method","name":"format","children":[],"call":["data join "," awesome_instance "," outdent "," options [] "," options ","key << "," colorize + "," inspector awesome "," inspector "," colorize "," object send "," object "," object instance_variable_get "," valid_instance_var? "," indented ","key sub! ","key =~ "," align ","declaration size "," left_aligned ","vars sort map ","vars sort ","var to_s "," object respond_to? ","var to_s [] to_sym ","var to_s [] "," variables map "," variables ","(if\n  (send\n    (send nil :options) :[]\n    (sym :sort_vars))\n  (send\n    (lvar :vars) :sort)\n  (lvar :vars)) map ","String  new ","object instance_variable_get ","object respond_to? ","Formatters HashFormatter  new format ","object to_h ","Formatters HashFormatter  new ","object to_s == ","object to_s ","object instance_variables "]}," AwesomePrint Formatters ObjectFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options ","object instance_variables "]}," AwesomePrint Formatters MethodFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," method_tuple "," method "]}," AwesomePrint Formatters MethodFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters HashFormatter plain_single_line":{"type":"method","name":"plain_single_line","children":[],"call":[" options []= "," options "," options [] "]}," AwesomePrint Formatters HashFormatter format":{"type":"method","name":"format","children":[],"call":["data join ","{\n << << "," outdent ","{\n << "," options [] "," options "," limited "," should_be_limited? "," align << << "," inspector awesome "," inspector "," align << "," colorize "," align "," indented ","data map "," indentation "," options [] > ","(send\n  (lvar :data) :map) max ","key size "," hash [] "," hash "," plain_single_line ","keys map ","a to_s <=> ","b to_s ","a to_s ","keys sort "," hash keys "," hash == "," simple_hash "," multiline_hash "," multiline_hash? "," empty_hash "," hash empty? ","hash empty? "," limited  join "," limited  map ","(send\n  (lvar : limited ) :map) max "," hash keys  map "," hash keys  sort "," hash  hash keys  "]}," AwesomePrint Formatters HashFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters FileFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","ls chop "," file inspect "," file ","ls empty? "," file path shellescape "," file path ","File  directory? ","file inspect ","file path shellescape ","file path "]}," AwesomePrint Formatters FileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters DirFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","ls chop "," dir inspect "," dir ","ls empty? "," dir path shellescape "," dir path ","dir inspect ","dir path shellescape ","dir path "]}," AwesomePrint Formatters DirFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters ClassFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," klass inspect "," klass "," klass superclass ","klass inspect ","klass superclass "," klass  klass superclass  "," klass klass superclass  ","klass  klass superclass  ","klass klass superclass  "]}," AwesomePrint Formatters ClassFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters BaseFormatter align":{"type":"method","name":"align","children":[],"call":[" indent [] + ","value ljust "," indent [] "," indentation + "," options [] "," options "," indentation "," indent "," indent + "," options [] == ","value rjust "," options [] > "]}," AwesomePrint Formatters BaseFormatter outdent":{"type":"method","name":"outdent","children":[],"call":["  * "," indentation - "," options [] abs "," options [] "," options "," indentation "]}," AwesomePrint Formatters BaseFormatter indent":{"type":"method","name":"indent","children":[],"call":["  * "," indentation "]}," AwesomePrint Formatters BaseFormatter indented":{"type":"method","name":"indented","children":[],"call":[" inspector increase_indentation ","Proc  new "," inspector "]}," AwesomePrint Formatters BaseFormatter indentation":{"type":"method","name":"indentation","children":[],"call":[" inspector current_indentation "," inspector "]}," AwesomePrint Formatters BaseFormatter method_tuple":{"type":"method","name":"method_tuple","children":[],"call":["owner to_s ","args join ","method name to_s ","method name ","(begin\n  (lvar :klass)) gsub ","klass sub! ","klass =~ ","method to_s =~ ","method to_s ","args []= ","args [] ","method arity < ","method arity ","(irange\n  (int 1)\n  (send\n    (send\n      (lvar :method) :arity) :abs)) map ","method arity abs ","arr << ","name to_s ","arr size + ","arr size ","type == ","method parameters inject ","method parameters ","method respond_to? ","(begin\n  (lvar :klass)) gsub  to_s "]}," AwesomePrint Formatters BaseFormatter limited":{"type":"method","name":"limited","children":[],"call":["temp []= ","data length - - ","data length - ","data length ","head to_s rjust ","head to_s "," indent ","data [] strip ","data [] ","data [] + + ","tail -@ ","data [] + ","head - ","(send\n  (lvar :limit) :-\n  (int 1)) % ","limit - ","limit / ","data length <= "," get_limit_size ","data [] + +  []= ","limit /  to_s rjust ","limit /  to_s ","head -  -@ ","limit /  - ","(send\n  (lvar : get_limit_size ) :-\n  (int 1)) % "," get_limit_size  - "," get_limit_size  / "," get_ get_limit_size _size "]}," AwesomePrint Formatters BaseFormatter get_limit_size":{"type":"method","name":"get_limit_size","children":[],"call":[" options [] "," options "]}," AwesomePrint Formatters BaseFormatter should_be_limited?":{"type":"method","name":"should_be_limited?","children":[],"call":[" options [] > "," options [] "," options "," options [] is_a? "]}," AwesomePrint Formatters ArrayFormatter methods_array":{"type":"method","name":"methods_array","children":[],"call":["[\n << << "," outdent ","[\n << ","data join ","arr << "," colorize ","item [] ","item [] ljust ","item [] rjust "," indented ","index << ","arr size to_s rjust ","arr size to_s ","arr size ","@options [] "," indent ","tuples inject ","(send\n  (lvar :tuples) :map) max ","item [] size ","tuples map ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :tuples) :size) :-\n  (int 1)) to_s ","tuples size - ","tuples size ","name to_s "," method_tuple ","object instance_method ","object respond_to? ","the_method respond_to? ","object method ","name is_a? ","a map ","a instance_variable_get ","x to_s <=> ","y to_s ","x to_s ","a sort! "," generate_printable_tuples join "," generate_printable_tuples "," array map! sort! "," array map! "," array "," generate_printable_tuples join  join "," indent  << ","a instance_variable_get  instance_method ","a instance_variable_get  respond_to? ","a instance_variable_get  method "]}," AwesomePrint Formatters ArrayFormatter format":{"type":"method","name":"format","children":[],"call":["[  << << ","[  << ","(send\n  (send nil :array) :map) join "," inspector awesome "," inspector "," array map "," array ","[\n << << "," outdent ","[\n << ","data join "," limited "," should_be_limited? ","arr << ","index << "," indented "," colorize ","arr size to_s rjust ","arr size to_s ","arr size "," options [] "," options "," indent "," array inject ","(send\n  (send\n    (send nil :array) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (send nil :array) :size) :-\n  (int 1)) to_s "," array size - "," array size "," methods_array "," array instance_variable_defined? "," array == "," simple_array "," methods_array? "," array empty? "," array length zero? "," array length ","object length zero? ","object length "," limited  join "," indent  << "]}," AwesomePrint Formatters ArrayFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatter convert_to_hash":{"type":"method","name":"convert_to_hash","children":[],"call":["hash respond_to? ! ","hash respond_to? ","object to_hash ","object method arity != ","object method arity ","object method ","object respond_to? ! ","object respond_to? ","object permitted? ! ","object permitted? "," has_method_accessor? ","object to_hash  respond_to? ! ","object to_hash  respond_to? ","object to_object to_hash  "]}," AwesomePrint Formatter awesome_simple":{"type":"method","name":"awesome_simple","children":[],"call":["AwesomePrint Formatters SimpleFormatter  new format ","AwesomePrint Formatters SimpleFormatter  new "]}," AwesomePrint NoBrainer awesome_nobrainer_document":{"type":"method","name":"awesome_nobrainer_document","children":[],"call":[" awesome_hash ","object errors ","object errors present? ","object inspectable_attributes symbolize_keys ","object inspectable_attributes "]}," AwesomePrint NoBrainer awesome_nobrainer_class":{"type":"method","name":"awesome_nobrainer_class","children":[],"call":["(str \"class \") << "," awesome_hash ","object superclass ","Hash  [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :type))\n  (const nil :Object)) to_s underscore to_sym ","(or\n  (send\n    (lvar :options) :[]\n    (sym :type))\n  (const nil :Object)) to_s underscore ","(or\n  (send\n    (lvar :options) :[]\n    (sym :type))\n  (const nil :Object)) to_s ","options [] ","object fields map ","object fields ","(lvar :name) join "," awesome_simple ","object superclass to_s ","object to_s "]}," AwesomePrint NoBrainer cast_with_nobrainer":{"type":"method","name":"cast_with_nobrainer","children":[],"call":["object is_a? ","object < "," cast_without_nobrainer ","  cast_without_nobrainer _without_nobrainer "]}," AwesomePrint Colorize colorize":{"type":"method","name":"colorize","children":[],"call":["str send "," options [] [] "," options [] "," options ","str method arity == ","str method arity ","str method "," inspector colorize? ! "," inspector colorize? "," inspector "," options [] [] ! ","CGI  escapeHTML ","CGI  escapeHTML  send ","CGI  escapeHTML  method arity == ","CGI  escapeHTML  method arity ","CGI  escapeHTML  method "]}," AwesomePrint Inspector dotfile_readable?":{"type":"method","name":"dotfile_readable?","children":[],"call":["File  readable? ","@@dotfile != ","@@dotfile_readable nil? ","File  readable?  nil? "]}," AwesomePrint Inspector load_dotfile":{"type":"method","name":"load_dotfile","children":[],"call":[" load "," dotfile_readable? ","File  join ","ENV  [] "," File  join _readable? "]}," AwesomePrint Formatters StructFormatter left_aligned":{"type":"method","name":"left_aligned","children":[],"call":[" options []= "," options "," options [] "]}," AwesomePrint Formatters StructFormatter awesome_instance":{"type":"method","name":"awesome_instance","children":[],"call":["(begin\n  (send\n    (send\n      (send nil :struct) :class) :superclass)) % "," struct __id__ * "," struct __id__ "," struct "," struct class "," struct class superclass "]}," AwesomePrint Formatters StructFormatter format":{"type":"method","name":"format","children":[],"call":["data join "," awesome_instance "," outdent "," options [] "," options ","key << "," colorize + "," inspector awesome "," struct send "," struct "," inspector "," colorize "," indented ","key sub! ","key =~ "," align ","declaration size "," left_aligned ","vars sort map ","vars sort ","var to_s "," struct respond_to? ","var to_s [] to_sym ","var to_s [] "," variables map "," variables ","struct send ","struct respond_to? ","struct members "]}," AwesomePrint Formatters StructFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options ","struct members "]}," AwesomePrint Formatters HashFormatter pre_ruby19_syntax":{"type":"method","name":"pre_ruby19_syntax","children":[],"call":[" align << << "," inspector awesome "," inspector "," align << "," colorize "," align "]}," AwesomePrint Formatters HashFormatter ruby19_syntax":{"type":"method","name":"ruby19_syntax","children":[],"call":[" align << << "," inspector awesome "," inspector "," align << "," colorize "," align ","width - ","key []= "]}," AwesomePrint Formatters HashFormatter symbol?":{"type":"method","name":"symbol?","children":[],"call":["key [] == ","key [] "]}," AwesomePrint Formatters HashFormatter printable_keys":{"type":"method","name":"printable_keys","children":[],"call":[" hash [] "," hash "," inspector awesome "," inspector "," plain_single_line ","keys map! ","a to_s <=> ","b to_s ","a to_s ","keys sort! "," options [] "," options "," hash keys ","String  new "," hash keys  map! "," hash keys  sort! "," hash  hash keys  "]}," AwesomePrint Formatters HashFormatter max_key_width":{"type":"method","name":"max_key_width","children":[],"call":["(send\n  (lvar :keys) :map) max ","key size ","keys map "]}," AwesomePrint Formatters HashFormatter left_width":{"type":"method","name":"left_width","children":[],"call":[" indentation "," options [] > "," options [] "," options "," max_key_width "]}," AwesomePrint Formatters HashFormatter printable_hash":{"type":"method","name":"printable_hash","children":[],"call":[" limited "," should_be_limited? "," pre_ruby19_syntax "," ruby19_syntax "," symbol? "," options [] "," options "," indented ","data map! "," left_width "," printable_keys "," printable_keys  map! "," left_ left_width  "]}," AwesomePrint Formatters HashFormatter simple_hash":{"type":"method","name":"simple_hash","children":[],"call":[" printable_hash join "," printable_hash "]}," AwesomePrint Formatters HashFormatter multiline_hash":{"type":"method","name":"multiline_hash","children":[],"call":["{\n << << "," outdent ","{\n << "," printable_hash join "," printable_hash ","(str \"{\\n\") join "]}," AwesomePrint Formatters HashFormatter multiline_hash?":{"type":"method","name":"multiline_hash?","children":[],"call":[" options [] "," options "]}," AwesomePrint Formatters HashFormatter empty_hash":{"type":"method","name":"empty_hash","children":[],"call":[]}," AwesomePrint Formatters ArrayFormatter width":{"type":"method","name":"width","children":[],"call":["(send\n  (send\n    (lvar :items) :size) :-\n  (int 1)) to_s size ","(send\n  (send\n    (lvar :items) :size) :-\n  (int 1)) to_s ","items size - ","items size "]}," AwesomePrint Formatters ArrayFormatter generic_prefix":{"type":"method","name":"generic_prefix","children":[],"call":[" indent + "," indent "," colorize ","iteration to_s rjust ","iteration to_s "," options [] "," options "]}," AwesomePrint Formatters ArrayFormatter find_method":{"type":"method","name":"find_method","children":[],"call":["object instance_method ","object method "," array instance_variable_get "," array "," array instance_variable_get  instance_method "," array instance_variable_get  method "]}," AwesomePrint Formatters ArrayFormatter generate_tuple":{"type":"method","name":"generate_tuple","children":[],"call":["name to_s "," method_tuple "," find_method "]}," AwesomePrint Formatters ArrayFormatter tuple_prefix":{"type":"method","name":"tuple_prefix","children":[],"call":[" generic_prefix "]}," AwesomePrint Formatters ArrayFormatter name_and_args_width":{"type":"method","name":"name_and_args_width","children":[],"call":["name_and_args [] map max ","name_and_args [] map ","name_and_args [] "," tuples transpose "," tuples "," tuples transpose  [] map max "," tuples transpose  [] map "," tuples transpose  [] "]}," AwesomePrint Formatters ArrayFormatter tuples":{"type":"method","name":"tuples","children":[],"call":[" generate_tuple "," array map "," array "]}," AwesomePrint Formatters ArrayFormatter tuple_template":{"type":"method","name":"tuple_template","children":[],"call":["(send nil :colorize\n  (send\n    (send\n      (lvar :item) :[]\n      (int 0)) :rjust\n    (lvar :name_width))\n  (sym :method)) join "," colorize ","item [] ","item [] ljust ","item [] rjust "," name_and_args_width "]}," AwesomePrint Formatters ArrayFormatter generate_printable_tuples":{"type":"method","name":"generate_printable_tuples","children":[],"call":["temp << "," tuple_template "," indented "," tuple_prefix tap "," tuple_prefix "," width "," tuples "," tuples map with_index "," tuples map "]}," AwesomePrint Formatters ArrayFormatter array_prefix":{"type":"method","name":"array_prefix","children":[],"call":[" generic_prefix "]}," AwesomePrint Formatters ArrayFormatter generate_printable_array":{"type":"method","name":"generate_printable_array","children":[],"call":["temp << "," inspector awesome "," inspector "," indented "," array_prefix tap "," array_prefix "," width "," array "," array map with_index "," array map "]}," AwesomePrint Formatters ArrayFormatter multiline_array":{"type":"method","name":"multiline_array","children":[],"call":[" outdent ","data join "," generate_printable_array "," limited "," width "," array "," should_be_limited? "," generate_printable_array  join "," limited  join "]}," AwesomePrint Formatters ArrayFormatter simple_array":{"type":"method","name":"simple_array","children":[],"call":["[  << << ","[  << ","(send\n  (send nil :array) :map) join "," inspector awesome "," inspector "," array map "," array "," multiline_array "," options [] "," options "]}," AwesomePrint Formatters ArrayFormatter methods_array?":{"type":"method","name":"methods_array?","children":[],"call":[" array instance_variable_defined? "," array "]}," AwesomePrint boolean":{"type":"method","name":"boolean","children":[],"call":[]}," AwesomePrint usual_rb":{"type":"method","name":"usual_rb","children":[{"type":"method","name":"output_value","children":[],"asgn":[],"call":[" puts "," ap ","@context last_value "]}],"call":[" puts "," ap ","@context last_value ","IRB Irb  class_eval "]}," AwesomePrint diet_rb":{"type":"method","name":"diet_rb","children":[{"type":"method","name":"inspect_object","children":[],"asgn":[],"call":["object ai "]}],"call":["IRB  formatter= ","(send\n  (const nil :Class) :new\n  (const\n    (const nil :IRB) :Formatter)) new ","object ai ","Class  new "]}," AwesomeMethodArray grep":{"type":"method","name":"grep","children":[],"call":["(or\n  (send\n    (lvar :item) :is_a?\n    (const nil :Symbol))\n  (send\n    (lvar :item) :is_a?\n    (const nil :String))) ! ","item is_a? ","arr reject! ","arr instance_variable_set "," instance_variable_get "," eval ","blk binding ","pattern inspect ","match to_s gsub ","match to_s "]}," AwesomeMethodArray &":{"type":"method","name":"&","children":[],"call":["arr instance_variable_set "," instance_variable_get "," tap "]}," AwesomeMethodArray -":{"type":"method","name":"-","children":[],"call":["arr instance_variable_set "," instance_variable_get "," tap "]}," AwesomePrint Formatter has_method_accessor?":{"type":"method","name":"has_method_accessor?","children":[],"call":["object method ! ","object method "]}," AwesomePrint ActiveRecord awesome_active_model_error":{"type":"method","name":"awesome_active_model_error","children":[],"call":[" awesome_hash ","data merge! ","object messages ","object details ","hash []= ","name to_sym ","object_dump read_attribute ","object_dump send ","object_dump respond_to? ","object_dump new_record? ","object_dump has_attribute? ","object_dump class column_names inject "," ActiveSupport OrderedHash  new ","object_dump class column_names ","object_dump class ","object_dump attributes ","object_dump class column_names != ","object_dump attributes keys ","object marshal_dump first ","object marshal_dump "," awesome_object ","@options [] ","object inspect ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","object_dump attributes  merge! ","object marshal_dump first  read_attribute ","object marshal_dump first  send ","object marshal_dump first  respond_to? ","object marshal_dump first  new_record? ","object marshal_dump first  has_attribute? ","object marshal_dump first  class column_names inject ","object marshal_dump first  class column_names ","object marshal_dump first  class ","object marshal_dump first  attributes ","object marshal_dump first  class column_names != ","object marshal_dump first  attributes keys "]}," AwesomePrint debug":{"type":"method","name":"debug","children":[],"call":[]}," AwesomePrint Registrar ClassMethods formatter_for":{"type":"method","name":"formatter_for","children":[],"call":["AwesomePrint Formatter  register "," formatted_object_type= "]}," AwesomePrint Registrar included":{"type":"method","name":"included","children":[],"call":[]}," AwesomePrint Limiter limited":{"type":"method","name":"limited","children":[],"call":["temp []= ","data length - - ","data length - ","data length ","head to_s rjust ","head to_s "," indent ","data [] strip ","data [] ","data [] + + ","tail -@ ","data [] + ","head - ","(send\n  (lvar :limit) :-\n  (int 1)) % ","limit - ","limit / ","data length <= "," get_limit_size ","data [] + +  []= ","limit /  to_s rjust ","limit /  to_s ","head -  -@ ","limit /  - ","(send\n  (lvar : get_limit_size ) :-\n  (int 1)) % "," get_limit_size  - "," get_limit_size  / "," get_ get_limit_size _size "]}," AwesomePrint Limiter get_limit_size":{"type":"method","name":"get_limit_size","children":[],"call":[" options [] "," options "]}," AwesomePrint Limiter should_be_limited?":{"type":"method","name":"should_be_limited?","children":[],"call":[" options [] > "," options [] "," options "," options [] is_a? "]}," AwesomePrint Formatters UnboundMethodFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters TrueClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters SymbolFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," class formatted_object_type "," class ","object to_s "]}," AwesomePrint Formatters SymbolFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters StructFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters StringFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," class formatted_object_type "," class ","object to_s "]}," AwesomePrint Formatters SimpleFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters SimpleFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters SetFormatter format":{"type":"method","name":"format","children":[],"call":["Formatters ArrayFormatter  new format ","object to_a ","Formatters ArrayFormatter  new "]}," AwesomePrint Formatters SetFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters RationalFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters OpenStruct format":{"type":"method","name":"format","children":[],"call":["HashFormatter  new format ","object marshal_dump ","HashFormatter  new "," inspector ","object class "]}," AwesomePrint Formatters OpenStruct formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ObjectFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ObjectFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters NilClassFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," class formatted_object_type "," class "]}," AwesomePrint Formatters NilClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ModuleFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","object inspect "]}," AwesomePrint Formatters ModuleFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters MethodFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters MethodFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters HashFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters FileFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters FalseClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters FallbackFormatter convert_to_hash":{"type":"method","name":"convert_to_hash","children":[],"call":["hash respond_to? ! ","hash respond_to? ","object to_hash ","object method arity != ","object method arity ","object method ","object respond_to? ! ","object respond_to? ","object to_hash  respond_to? ! ","object to_hash  respond_to? ","object to_object to_hash  "]}," AwesomePrint Formatters FallbackFormatter format":{"type":"method","name":"format","children":[],"call":["Formatters SimpleFormatter  new format ","object inspect to_s ","object inspect ","Formatters SimpleFormatter  new ","Formatters HashFormatter  new format ","Formatters HashFormatter  new "," convert_to_hash ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new ","object instance_variables any? ","object instance_variables ","@options [] "," convert_to_ convert_to_hash  "]}," AwesomePrint Formatters FallbackFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters FallbackFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters TimeWithZoneFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","object inspect "]}," AwesomePrint Formatters TimeWithZoneFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters SequelModelFormatter format":{"type":"method","name":"format","children":[],"call":["hf format "," colorize ","object to_s ","Formatters HashFormatter  new ","object errors ","object errors empty? ! ","object errors empty? ","hash []= ","c [] ","c [] to_sym ","(send\n  (send\n    (lvar :object) :values) :sort_by) inject ","key to_s ","object values sort_by ","object values ","Formatters HashFormatter  new  format "]}," AwesomePrint Formatters SequelModelFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters SequelModelClassFormatter format":{"type":"method","name":"format","children":[],"call":["(dstr\n  (str \"class \")\n  (begin\n    (send nil :colorize\n      (send\n        (lvar :object) :to_s)\n      (sym :class)))) join ","Formatters HashFormatter  new format ","Formatters HashFormatter  new "," colorize ","object superclass to_s ","object superclass ","object to_s ","h merge ","defn [] ","object db_schema inject ","object db_schema "]}," AwesomePrint Formatters SequelModelClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters SequelDatasetFormatter format":{"type":"method","name":"format","children":[],"call":["(send\n  (lvar :af) :format\n  (send\n    (send nil :dataset) :to_a)) join "," colorize "," dataset sql "," dataset ","af format "," dataset to_a ","Formatters ArrayFormatter  new ","(send\n  (lvar :Formatters ArrayFormatter  new ) :format\n  (send\n    (send nil :dataset) :to_a)) join ","Formatters ArrayFormatter  new  format "]}," AwesomePrint Formatters SequelDatasetFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters NokogiriNodesetFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","contents empty? ! ","contents empty? ","xml gsub! ","object to_xml ","object empty? "," colorize  empty? ! "," colorize  empty? ","object to_xml  gsub! ","object to_object to_xml  "]}," AwesomePrint Formatters NokogiriNodesetFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters NokogiriNodeFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","contents empty? ! ","contents empty? ","xml gsub! ","object to_xml "," colorize  empty? ! "," colorize  empty? ","object to_xml  gsub! ","object to_object to_xml  "]}," AwesomePrint Formatters NokogiriNodeFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters NokogiriDocumentFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize ","contents empty? ! ","contents empty? ","xml gsub! ","object to_xml "," colorize  empty? ! "," colorize  empty? ","object to_xml  gsub! ","object to_object to_xml  "]}," AwesomePrint Formatters NokogiriDocumentFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters MongoidDocument format_as_instance":{"type":"method","name":"format_as_instance","children":[],"call":["Formatters HashFormatter  new format ","Formatters HashFormatter  new ","object errors ","object errors empty? ! ","object errors empty? ","hash []= ","c [] ","c [] to_sym ","(send\n  (begin\n    (or\n      (send\n        (lvar :object) :attributes)\n      (hash))) :sort_by) inject "," ActiveSupport OrderedHash  new ","(or\n  (send\n    (lvar :object) :attributes)\n  (hash)) sort_by ","object attributes "]}," AwesomePrint Formatters MongoidDocument format_as_class":{"type":"method","name":"format_as_class","children":[],"call":["(dstr\n  (str \"class \")\n  (begin\n    (send nil :colorize\n      (send\n        (lvar :object) :to_s)\n      (sym :class)))) join ","Formatters HashFormatter  new format ","Formatters HashFormatter  new "," colorize ","object superclass to_s ","object superclass ","object to_s ","hash []= ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s underscore to_sym ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s underscore ","(or\n  (send\n    (send\n      (lvar :c) :[]\n      (int 1)) :type)\n  (str \"undefined\")) to_s ","c [] type ","c [] ","c [] name to_sym ","c [] name ","(send\n  (send\n    (lvar :object) :fields) :sort_by) inject "," ActiveSupport OrderedHash  new ","object fields sort_by ","object fields "]}," AwesomePrint Formatters MongoidDocument format":{"type":"method","name":"format","children":[],"call":[" format_as_instance "," puts ","AwesomePrint  debug "," format_as_class ","object is_a? ","Formatters SimpleFormatter  new format ","object inspect ","Formatters SimpleFormatter  new "]}," AwesomePrint Formatters MongoidDocument formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters HashWithIndifferentAccessFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters HashWithIndifferentAccessFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters BsonObjectidFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," class formatted_object_type "," class ","object inspect "]}," AwesomePrint Formatters BsonObjectidFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordRelationFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordRelationFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordInstanceFormatter format":{"type":"method","name":"format","children":[],"call":["(begin\n  (lvar :object)) << ","Formatters HashFormatter  new format ","Formatters HashFormatter  new ","hash []= ","name to_sym ","object read_attribute ","object send ","object respond_to? ","object new_record? ","object has_attribute? ","object class column_names inject "," ActiveSupport OrderedHash  new ","object class column_names ","object class ","object attributes ","object class column_names != ","object attributes keys ","Formatters SimpleFormatter  new format ","object inspect ","Formatters SimpleFormatter  new ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new ","@options [] "]}," AwesomePrint Formatters ActiveRecordInstanceFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordClassFormatter format":{"type":"method","name":"format","children":[],"call":["(dstr\n  (str \"class \")\n  (begin\n    (send nil :colorize\n      (send\n        (lvar :object) :to_s)\n      (sym :class)))) join ","Formatters HashFormatter  new format ","Formatters HashFormatter  new "," colorize ","object superclass to_s ","object superclass ","object to_s ","hash []= ","c type ","c name to_sym ","c name ","object columns inject "," ActiveSupport OrderedHash  new ","object columns ","Formatters SimpleFormatter  new format ","object inspect ","Formatters SimpleFormatter  new ","object respond_to? ! ","object respond_to? ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","Formatters ClassFormatter  new format ","Formatters ClassFormatter  new ","object abstract_class? ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new ","object to_s == ","@options [] "]}," AwesomePrint Formatters ActiveRecordClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordAttributesetFormatter format":{"type":"method","name":"format","children":[],"call":["Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new "]}," AwesomePrint Formatters ActiveRecordAttributesetFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ActiveRecordAttributesetFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters ActiveModelErrorFormatter format":{"type":"method","name":"format","children":[],"call":["(begin\n  (lvar :object)) << ","Formatters HashFormatter  new format ","Formatters HashFormatter  new ","data merge! ","object messages ","object details ","hash []= ","name to_sym ","object_dump read_attribute ","object_dump send ","object_dump respond_to? ","object_dump new_record? ","object_dump has_attribute? ","object_dump class column_names inject "," ActiveSupport OrderedHash  new ","object_dump class column_names ","object_dump class ","object_dump attributes ","object_dump class column_names != ","object_dump attributes keys ","object marshal_dump first ","object marshal_dump ","Formatters SimpleFormatter  new format ","object inspect ","Formatters SimpleFormatter  new ","(const\n  (const\n    (cbase) :ActiveSupport) :OrderedHash) ! ","Formatters ObjectFormatter  new format ","Formatters ObjectFormatter  new ","@options [] ","object_dump attributes  merge! ","object marshal_dump first  read_attribute ","object marshal_dump first  send ","object marshal_dump first  respond_to? ","object marshal_dump first  new_record? ","object marshal_dump first  has_attribute? ","object marshal_dump first  class column_names inject ","object marshal_dump first  class column_names ","object marshal_dump first  class ","object marshal_dump first  attributes ","object marshal_dump first  class column_names != ","object marshal_dump first  attributes keys "]}," AwesomePrint Formatters ActiveModelErrorFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters DirFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ClassFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters BigdecimalFormatter format":{"type":"method","name":"format","children":[],"call":[" colorize "," class formatted_object_type "," class ","object to_s "]}," AwesomePrint Formatters BigdecimalFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters BaseFormatter format":{"type":"method","name":"format","children":[],"call":[" raise "]}," AwesomePrint Formatters BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["inspector options "]}," AwesomePrint Formatters BaseFormatter core?":{"type":"method","name":"core?","children":[],"call":[]}," AwesomePrint Formatters BaseFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatters ArrayFormatter formattable?":{"type":"method","name":"formattable?","children":[],"call":[]}," AwesomePrint Formatter active_formatter":{"type":"method","name":"active_formatter","children":[],"call":[" class registered_formatters [] "," class registered_formatters "," class "]}," AwesomePrint Formatter register":{"type":"method","name":"register","children":[],"call":[]}," AwesomePrint Formatter registered_formatters":{"type":"method","name":"registered_formatters","children":[],"call":[]}}