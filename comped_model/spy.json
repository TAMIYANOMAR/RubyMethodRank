{" Spy unhook_and_remove_spy":{"type":"method","name":"unhook_and_remove_spy","children":[],"call":["removed_spies << ","spy unhook ","spy method_name == ","spy method_name ","spy base_object == ","spy base_object "," all delete_if "," all "]}," Spy create_and_hook_spy":{"type":"method","name":"create_and_hook_spy","children":[],"call":[" raise ","ArgumentError  new ","method_name class "," create_and_hook_spy and_return "," create_and_hook_spy ","method_name map "," all << "," all "," new hook "," new ","Subroutine  new hook ","Subroutine  new ","Subroutine  on and_return ","Subroutine  on "," create_and_hook_ new hook  and_return "," create_and_hook_ new hook  "]}," Spy get":{"type":"method","name":"get","children":[],"call":["spies first ","spies size > ","spies size ","base_object send "," __secret_method_key__ ","base_object method parameters == ","base_object method parameters ","base_object method ","base_object singleton_methods include? ","method_name to_sym ","base_object singleton_methods ","method_names map ","Subroutine  get "]}," Spy __secret_method_key__":{"type":"method","name":"__secret_method_key__","children":[],"call":["Object  new "]}," Spy double":{"type":"method","name":"double","children":[],"call":["Double  new "]}," Spy reset":{"type":"method","name":"reset","children":[],"call":[]}," Spy teardown":{"type":"method","name":"teardown","children":[],"call":[" reset "," all each "," all ","Agency  instance dissolve! ","Agency  instance "]}," Spy all":{"type":"method","name":"all","children":[],"call":[]}," Spy off":{"type":"method","name":"off","children":[],"call":["removed_spies first ","removed_spies size > ","removed_spies size "," raise ","removed_spies empty? ","(send\n  (lvar :method_names) :map) flatten "," unhook_and_remove_spy ","method_names map ","spy unhook ","Subroutine  get ","spy inspect ","base_object inspect ","(send\n  (lvar :method_names) :map) flatten  first ","(send\n  (lvar :method_names) :map) flatten  size > ","(send\n  (lvar :method_names) :map) flatten  size ","(send\n  (lvar :method_names) :map) flatten  empty? "," unhook_and_remove_Subroutine  get  ","Subroutine  get  unhook ","Subroutine  get  inspect "]}," Spy on":{"type":"method","name":"on","children":[],"call":["spies first ","spies size > ","spies size ","(send\n  (lvar :method_names) :map) flatten "," create_and_hook_spy ","method_names map ","(send\n  (lvar :method_names) :map) flatten  first ","(send\n  (lvar :method_names) :map) flatten  size > ","(send\n  (lvar :method_names) :map) flatten  size "]}," Spy arity_range":{"type":"method","name":"arity_range","children":[],"call":[" original_method parameters each "," original_method parameters "," original_method "]}," Spy check_arity!":{"type":"method","name":"check_arity!","children":[],"call":[" raise ","ArgumentError  new "," arity_range max "," arity_range ","arity > "," arity_range min ","arity < "]}," Spy method_visibility":{"type":"method","name":"method_visibility","children":[],"call":[" base_object respond_to? "," method_name "," base_object "," original_method owner protected_method_defined? "," original_method owner "," original_method "]}," Spy clear_method!":{"type":"method","name":"clear_method!","children":[],"call":[]}," Spy reset!":{"type":"method","name":"reset!","children":[],"call":[" clear_method! "]}," Spy record":{"type":"method","name":"record","children":[],"call":["@plan call "," calls << ","CallLog  new "," calls "," check_arity! ","args size "]}," Spy has_been_called_with?":{"type":"method","name":"has_been_called_with?","children":[],"call":["call_log args == ","call_log args "," calls any? "," calls "]}," Spy has_been_called?":{"type":"method","name":"has_been_called?","children":[],"call":[" calls size > "," calls size "," calls "]}," Spy and_call_through":{"type":"method","name":"and_call_through","children":[],"call":[" base_object send "," method_name "," base_object ","Proc  new "," original_method "," raise "," method_visibility "]}," Spy and_return":{"type":"method","name":"and_return","children":[],"call":["Proc  new "," raise ","ArgumentError  new ","value nil? ! ","value nil? "," block_given? "]}," Spy hooked?":{"type":"method","name":"hooked?","children":[],"call":[]}," Spy unhook":{"type":"method","name":"unhook","children":[],"call":[" clear_method! "," base_object singleton_class send "," method_name "," method_visibility "," base_object singleton_class "," base_object "," base_object define_singleton_method "," original_method "," original_method owner == "," original_method owner "," raise "," hooked? "]}," Spy hook":{"type":"method","name":"hook","children":[],"call":[" base_object singleton_class send "," method_name ","opts [] "," base_object singleton_class "," base_object ","__method_spy__ record ","__spy_args first === ","__method_spy__ class __secret_method_key__ ","__method_spy__ class ","__spy_args first "," base_object define_singleton_method "," original_method owner == "," original_method owner "," original_method "," method_visibility "," base_object method ","opts [] ! "," base_object respond_to? "," base_object is_a? "," raise "," class get "," class "," hooked? "]}," Spy initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! "]}," Spy Dsl spy":{"type":"method","name":"spy","children":[],"call":[]}," Spy Double initialize":{"type":"method","name":"initialize","children":[],"call":["Spy  on ","args size > ","args size "]}," Spy get_const":{"type":"method","name":"get_const","children":[],"call":["spies first ","spies size > ","spies size ","Constant  get "," constant_name ","constant_names map ","constant_names unshift ","base_module is_a? "]}," Spy off_const":{"type":"method","name":"off_const","children":[],"call":["spies first ","spies size > ","spies size ","(send\n  (lvar :constant_names) :map) flatten "," raise ","ArgumentError  new ","constant_name class "," off_const and_return "," off_const ","constant_name map ","Constant  off ","constant_names map ","constant_names unshift ","base_module is_a? ","constant_name is_a? ","(send\n  (lvar :constant_names) :map) flatten  first ","(send\n  (lvar :constant_names) :map) flatten  size > ","(send\n  (lvar :constant_names) :map) flatten  size "]}," Spy on_const":{"type":"method","name":"on_const","children":[],"call":["spies first ","spies size > ","spies size ","(send\n  (lvar :constant_names) :map) flatten "," raise ","ArgumentError  new ","constant_name class "," on_const and_return "," on_const ","constant_name map ","Constant  on ","constant_names map ","constant_names unshift ","base_module is_a? ","Constant  on and_return ","(send\n  (lvar :constant_names) :map) flatten  first ","(send\n  (lvar :constant_names) :map) flatten  size > ","(send\n  (lvar :constant_names) :map) flatten  size "]}," Spy Subroutine get_spies":{"type":"method","name":"get_spies","children":[],"call":["(send\n  (send\n    (lvar :base_object) :singleton_methods) :map) compact ","base_object send ","base_object method parameters == ","base_object method parameters ","base_object method ","base_object singleton_methods map ","base_object singleton_methods ","(send\n  (lvar :all_methods) :map) compact ","Agency  instance find "," get_spy_id ","Agency  instance ","all_methods map ","base_object instance_methods + ","base_object private_instance_methods ","base_object instance_methods ","base_object respond_to? ","base_object public_methods + + ","base_object private_methods ","base_object public_methods + ","base_object protected_methods ","base_object public_methods ","base_object public_instance_methods + + ","base_object public_instance_methods + ","base_object protected_instance_methods ","base_object public_instance_methods ","(send\n  (lvar :base_object public_methods + + ) :map) compact ","(send\n  (lvar :base_object instance_methods + ) :map) compact ","(send\n  (lvar :base_object public_instance_methods + + ) :map) compact ","base_object public_methods + +  map ","base_object instance_methods +  map ","base_object public_instance_methods + +  map "]}," Spy Subroutine get":{"type":"method","name":"get","children":[],"call":["base_object send ","base_object method parameters == ","base_object method parameters ","base_object method ","(send\n  (send\n    (lvar :base_object) :singleton_methods) :+\n  (send\n    (send\n      (lvar :base_object) :singleton_class) :private_instance_methods\n    (false))) include? ","method_name to_sym ","base_object singleton_methods + ","base_object singleton_class private_instance_methods ","base_object singleton_class ","base_object singleton_methods ","Agency  instance find "," get_spy_id ","Agency  instance ","base_object instance_method ","(send\n  (send\n    (lvar :base_object) :instance_methods) :+\n  (send\n    (lvar :base_object) :private_instance_methods)) include? ","base_object instance_methods + ","base_object private_instance_methods ","base_object instance_methods ","base_object respond_to? ","(send\n  (send\n    (send\n      (lvar :base_object) :public_instance_methods) :+\n    (send\n      (lvar :base_object) :protected_instance_methods)) :+\n  (send\n    (lvar :base_object) :private_instance_methods)) include? ","base_object public_instance_methods + + ","base_object public_instance_methods + ","base_object protected_instance_methods ","base_object public_instance_methods "]}," Spy Subroutine check_arity_against_range!":{"type":"method","name":"check_arity_against_range!","children":[],"call":[" raise ","ArgumentError  new ","arity_range max ","arity > ","arity_range min ","arity < "]}," Spy Subroutine arity_range_of":{"type":"method","name":"arity_range_of","children":[],"call":["block parameters each ","block parameters "," raise ","block inspect ","block respond_to? "]}," Spy Subroutine arity_range":{"type":"method","name":"arity_range","children":[],"call":[" class arity_range_of "," original_method "," class "," original_method parameters each "," original_method parameters "]}," Spy Subroutine check_arity!":{"type":"method","name":"check_arity!","children":[],"call":[" class check_arity_against_range! "," arity_range "," class "," raise ","ArgumentError  new "," arity_range max ","arity > "," arity_range min ","arity < "]}," Spy Subroutine method_visibility":{"type":"method","name":"method_visibility","children":[],"call":[" base_object respond_to? "," method_name "," base_object "," original_method owner protected_method_defined? "," original_method owner "," original_method "," base_object_respond_to? "]}," Spy Subroutine clear_method!":{"type":"method","name":"clear_method!","children":[],"call":[]}," Spy Subroutine call_with_yield":{"type":"method","name":"call_with_yield","children":[],"call":["block call ","@eval_context instance_exec ","@error_generator raise_wrong_arity_error ","block arity ","args length != ","args length ","block arity > ","@args_to_yield each "," raise "]}," Spy Subroutine reset!":{"type":"method","name":"reset!","children":[],"call":[" clear_method! "]}," Spy Subroutine invoke":{"type":"method","name":"invoke","children":[],"call":[" calls << ","CallLog  new "," calls ","@plan call "," check_arity! ","args size "," check_for_too_many_arguments! "," base_object is_a? "," base_object "," call_plan "," build_call_through_plan ","kwargs present? ","(lvar :kwargs) ! "," check_args size ! "]}," Spy Subroutine has_been_called_with?":{"type":"method","name":"has_been_called_with?","children":[],"call":["call_log args == ","call_log args "," calls any? "," calls "," raise ","call args == ","call args "," proc ","Proc  new "," block_given? ","call kwargs == ","call kwargs "]}," Spy Subroutine has_been_called?":{"type":"method","name":"has_been_called?","children":[],"call":[" calls size > "," calls size "," calls "," raise "]}," Spy Subroutine and_throw":{"type":"method","name":"and_throw","children":[],"call":[" throw ","Proc  new "]}," Spy Subroutine and_raise":{"type":"method","name":"and_raise","children":[],"call":[" raise ","Proc  new ","exception exception ","exception respond_to? ","exception exception  exception exception  ","exception exception  respond_to? "]}," Spy Subroutine and_call_through":{"type":"method","name":"and_call_through","children":[],"call":[" base_object send "," method_name "," base_object ","Proc  new "," original_method "," raise "," method_visibility "," original_method call ","bound_method call "," original_method bind "," original_method is_a? ","@base_object is_a? "," original_method bind  call "]}," Spy Subroutine and_yield":{"type":"method","name":"and_yield","children":[],"call":["eval_context instance_exec ","Proc  new ","Object  new "," block_given? ","Object  new  instance_exec "]}," Spy Subroutine and_return":{"type":"method","name":"and_return","children":[],"call":["Proc  new "," raise ","ArgumentError  new ","value nil? ! ","value nil? ","@plan arity "," original_method arity "," original_method ","@plan arity > "," original_method arity >= ","(and\n  (send\n    (lvar :value) :is_a?\n    (const nil :Hash))\n  (send\n    (lvar :value) :[]\n    (sym :force))) ! ","value [] ","value is_a? ","value has_key? "," block_given? "," check_for_too_many_arguments! ","(or\n  (send\n    (lvar :value) :nil?)\n  (and\n    (send\n      (lvar :value) :is_a?\n      (const nil :Hash))\n    (send\n      (lvar :value) :has_key?\n      (sym :force)))) ! ","value [] ! ! ","value [] ! ","Proc  new  arity ","Proc  new  arity > "]}," Spy Subroutine hooked?":{"type":"method","name":"hooked?","children":[],"call":[" == "," class get "," method_name "," base_object "," class "," singleton_method "]}," Spy Subroutine unhook":{"type":"method","name":"unhook","children":[],"call":["Agency  instance retire ","Agency  instance "," clear_method! "," base_object singleton_class send "," method_name "," base_object singleton_class "," base_object "," method_visibility "," base_object define_singleton_method "," original_method "," original_method owner == "," original_method owner "," raise "," hooked? "," method_owner send "," method_owner "," original_method owner send "," method_owner == "," original_method_visibility "]}," Spy Subroutine hook":{"type":"method","name":"hook","children":[],"call":["Agency  instance recruit ","Agency  instance "," base_object singleton_class send "," method_name ","opts [] "," base_object singleton_class "," base_object ","__method_spy__ invoke ","__spy_args first === ","__spy_args first "," base_object define_singleton_method "," method_visibility "," base_object method ","opts [] ! "," base_object respond_to? "," base_object is_a? "," raise "," hooked? "," method_owner send "," hook_opts [] "," hook_opts "," method_owner ","(sym :public) include? "," base_object send "," override_method "," define_method_with "," current_method "," hook_opts [] ! "," base_object_respond_to? "," original_method_visibility "," singleton_method "," method_visibility_of "," class get "," class "," base_object define_method "," base_object alias_method "," base_object private_method_defined? "," base_object method_defined? "," base_object singleton_class alias_method "," base_object singleton_class private_method_defined? "," base_object singleton_class method_defined? "," original_method owner send "," original_method owner "," original_method "," original_method owner == "]}," Spy Subroutine initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! "]}," Spy Nest all":{"type":"method","name":"all","children":[],"call":[]}," Spy Nest fetch":{"type":"method","name":"fetch","children":[],"call":[" new "," all [] ","base_module name "," all "]}," Spy Nest get":{"type":"method","name":"get","children":[],"call":[" all [] ","base_module name "," all ","@constant_spies [] "]}," Spy Nest hooked?":{"type":"method","name":"hooked?","children":[],"call":["@hooked_constants [] ! ! ","@hooked_constants [] ! ","@hooked_constants [] "," get ! ! "," get ! "," get "]}," Spy Nest remove":{"type":"method","name":"remove","children":[],"call":["@hooked_constants delete ","spy constant_name ","@hooked_constants [] == ","@hooked_constants [] "," raise "," base_module name "," base_module ","@constant_spies delete ","@constant_spies [] == ","@constant_spies [] "]}," Spy Nest add":{"type":"method","name":"add","children":[],"call":["@hooked_constants []= ","spy constant_name "," raise ","@hooked_constants [] ","@constant_spies []= ","@constant_spies [] "]}," Spy Nest initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","base_module is_a? "]}," Marshal dump_with_mocks":{"type":"method","name":"dump_with_mocks","children":[],"call":["spy hook ","spy_hook_options each "," dump_without_mocks ","args unshift ","object dup ","spy unhook ","spy opts ","spies map ","spies empty? ","Spy Subroutine  get_spies ","args shift ","spy hook_opts ","args shift  dup ","spy spy opts  ","Spy Subroutine  get_spies  map ","Spy Subroutine  get_spies  empty? ","Spy Subroutine  get_Spy Subroutine  get_spies  ","spy hook_spy opts  "]}," Spy Constant get":{"type":"method","name":"get","children":[],"call":["Nest  get hooked_constants [] ","Nest  get hooked_constants ","Nest  get ","nest hooked_constants [] ","nest hooked_constants ","nest get ","Nest  get  hooked_constants [] ","Nest  get  hooked_constants ","Nest  get  get "]}," Spy Constant off":{"type":"method","name":"off","children":[],"call":[" get unhook "," get ","spy unhook "," raise "," get  unhook "]}," Spy Constant on":{"type":"method","name":"on","children":[],"call":[" new hook "," new "]}," Spy Constant hooked?":{"type":"method","name":"hooked?","children":[],"call":["Nest  get hooked? "," constant_name ","Nest  get "," base_module "," class get == "," class get "," class "]}," Spy Constant and_return":{"type":"method","name":"and_return","children":[],"call":[" base_module const_set "," constant_name "," base_module "," base_module send "," base_module const_defined? "," and_hide "]}," Spy Constant and_hide":{"type":"method","name":"and_hide","children":[],"call":[" base_module send "," constant_name "," base_module "," currently_defined? "]}," Spy Constant unhook":{"type":"method","name":"unhook","children":[],"call":["Nest  fetch remove ","Nest  fetch "," base_module ","Agency  instance retire ","Agency  instance "," and_return ","Nest  get remove ","Nest  get "," previously_defined? "]}," Spy Constant hook":{"type":"method","name":"hook","children":[],"call":["Agency  instance recruit ","Agency  instance ","Nest  fetch add ","Nest  fetch "," base_module "," and_return "," base_module const_get "," constant_name ","opts [] ! ","opts [] "," base_module const_defined? "," currently_defined? "," previously_defined? "]}," Spy Constant initialize":{"type":"method","name":"initialize","children":[],"call":["constant_name to_sym "," raise ","constant_name inspect ","constant_name is_a? ","base_module inspect ","base_module is_a? "]}," Spy Agency clear!":{"type":"method","name":"clear!","children":[],"call":[]}," Spy Agency dissolve!":{"type":"method","name":"dissolve!","children":[],"call":[" clear! "," constants each "," constants "," subroutines each "," subroutines ","spy unhook ","spy respond_to? ","@spies values each ","@spies values "]}," Spy Agency active?":{"type":"method","name":"active?","children":[],"call":[" doubles include? "," doubles "," constants include? "," constants "," subroutines include? "," subroutines "," raise ","@spies has_key? ","spy object_id ","spy is_a? "," check_spy! "]}," Spy Agency retire":{"type":"method","name":"retire","children":[],"call":[" raise "," doubles delete "," doubles "," constants delete "," constants "," subroutines delete "," subroutines ","@spies delete ","spy object_id ","@spies [] ","spy is_a? "]}," Spy Agency recruit":{"type":"method","name":"recruit","children":[],"call":[" raise "," doubles << "," doubles "," constants << "," constants "," subroutines << "," subroutines ","@spies []= ","spy object_id ","@spies [] ","spy is_a? "," check_spy! "]}," Spy Agency initialize":{"type":"method","name":"initialize","children":[],"call":[" clear! "]}," Spy off_instance_method":{"type":"method","name":"off_instance_method","children":[],"call":["removed_spies first ","removed_spies size > ","removed_spies size "," raise ","spy unhook ","Subroutine  get ","method_names map ","spy inspect ","base_object inspect ","base_class inspect ","Subroutine  get  unhook ","Subroutine  get  inspect "]}," Spy on_instance_method":{"type":"method","name":"on_instance_method","children":[],"call":["spies first ","spies size > ","spies size ","(send\n  (lvar :method_names) :map) flatten "," create_and_hook_spy ","method_names map ","(send\n  (lvar :method_names) :map) flatten  first ","(send\n  (lvar :method_names) :map) flatten  size > ","(send\n  (lvar :method_names) :map) flatten  size "]}," Spy Subroutine get_spy_id":{"type":"method","name":"get_spy_id","children":[],"call":["first_param_name split last to_i ","first_param_name split last ","first_param_name split ","first_param_name include? ","method parameters [] [] to_s ","method parameters [] [] ","method parameters [] ","method parameters ","method parameters [] is_a? ","id to_i ","method parameters [] [] to_s sub! ","raw_id [] to_i ","raw_id [] ","SPY_ARGS_PREFIX  length ","raw_id start_with? ","method parameters [] [] to_s  split last to_i ","method parameters [] [] to_s  split last ","method parameters [] [] to_s  split ","method parameters [] [] to_s  include? ","method parameters [] [] to_s sub!  to_i ","raw_method parameters [] [] to_s sub!  [] to_i ","method parameters [] [] to_s  [] to_i ","raw_method parameters [] [] to_s sub!  [] ","method parameters [] [] to_s  [] ","raw_method parameters [] [] to_s sub!  start_with? ","method parameters [] [] to_s  start_with? "]}," Spy Subroutine method_owner":{"type":"method","name":"method_owner","children":[],"call":[" current_method owner "," current_method "]}," Spy Subroutine current_method":{"type":"method","name":"current_method","children":[],"call":[" base_object instance_method "," method_name "," base_object "," base_object method "," singleton_method "]}," Spy Subroutine define_method_with":{"type":"method","name":"define_method_with","children":[],"call":[]}," Spy Subroutine base_object_respond_to?":{"type":"method","name":"base_object_respond_to?","children":[],"call":[" base_object private_instance_methods include? "," base_object private_instance_methods "," base_object "," base_object instance_methods include? "," base_object instance_methods "," base_object respond_to? "]}," Spy Subroutine override_method":{"type":"method","name":"override_method","children":[],"call":[" eval ","201 + "," binding "," object_id ","196 + ","227 + ","226 + ","228 + ","229 + ","265 + ","245 + ","241 + ","244 + "]}," Spy Double to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect gsub gsub "," inspect gsub "," inspect "]}," Spy Double inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," sprintf "," object_id "," class "]}," Spy Double ==":{"type":"method","name":"==","children":[],"call":["other == "]}," Spy Constant previously_defined?":{"type":"method","name":"previously_defined?","children":[],"call":[]}," Spy Constant currently_defined?":{"type":"method","name":"currently_defined?","children":[],"call":[" base_module const_defined? "," constant_name "," base_module "]}," Spy Constant hidden?":{"type":"method","name":"hidden?","children":[],"call":[" currently_defined? "," hooked? "]}," Spy Constant name":{"type":"method","name":"name","children":[],"call":[" constant_name "," base_module name "," base_module "]}," Spy CallLog initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spy Agency spies":{"type":"method","name":"spies","children":[],"call":["@spies values "]}," Spy Agency find":{"type":"method","name":"find","children":[],"call":["@spies [] "]}," Spy Subroutine check_for_too_many_arguments!":{"type":"method","name":"check_for_too_many_arguments!","children":[],"call":[" raise ","ArgumentError  new "," arity_range max "," arity_range ","min_arity > ","min_arity abs - ","min_arity abs ","min_arity < ","block arity "," arity_range nil? "," base_object is_a? "," base_object ","min_arity abs -  > ","block arity  > ","min_arity abs -  abs - ","block arity  abs - ","min_arity abs -  abs ","block arity  abs ","min_arity abs -  < ","block arity  < "]}," Spy Subroutine method_visibility_of":{"type":"method","name":"method_visibility_of","children":[],"call":[" base_object private_instance_methods include? "," base_object private_instance_methods "," base_object "," base_object protected_instance_methods include? "," base_object protected_instance_methods "," base_object public_instance_methods include? "," base_object public_instance_methods "," base_object private_methods include? "," base_object private_methods "," base_object protected_methods include? "," base_object protected_methods "," base_object public_methods include? "," base_object public_methods "," singleton_method "]}," Spy Subroutine original_method_visibility":{"type":"method","name":"original_method_visibility","children":[],"call":[" method_visibility_of "," method_name "]}," Spy Subroutine off":{"type":"method","name":"off","children":[],"call":["spy unhook "," raise "," get "," get  unhook "]}," Spy Subroutine on":{"type":"method","name":"on","children":[],"call":[" new hook "," new "]}," Spy Nest hooked_constants":{"type":"method","name":"hooked_constants","children":[],"call":["@constant_spies keys "]}," Spy NoSpyError message":{"type":"method","name":"message","children":[],"call":[]}," Spy NeverHookedError message":{"type":"method","name":"message","children":[],"call":[]}," Spy NotHookedError message":{"type":"method","name":"message","children":[],"call":[]}," Spy AlreadyHookedError message":{"type":"method","name":"message","children":[],"call":[]}," Spy AlreadyStubbedError message":{"type":"method","name":"message","children":[],"call":[]}," Spy mock_all":{"type":"method","name":"mock_all","children":[],"call":[" on ","unstubbed_methods size > ","unstubbed_methods size ","mock_klass mocked_methods - ","spies map ","mock_klass mocked_methods ","stubs size > ","stubs size ","mock_klass new ","Mock  new ","mock_klass mocked_methods -  size > ","mock_klass mocked_methods -  size ","Mock  new  mocked_methods - "," on  map ","Mock  new  mocked_methods ","Mock  new  new "]}," Spy mock":{"type":"method","name":"mock","children":[],"call":[" on ","stubs size > ","stubs size ","Mock  new new ","Mock  new "]}," Spy Mock args_for_method":{"type":"method","name":"args_for_method","children":[],"call":["args join ","args << ","(send\n  (send\n    (lvar :method) :parameters) :map) compact ","method parameters map ","method parameters ","args compact! ","args map! ","(send\n  (send\n    (lvar :method) :parameters) :map) compact  join ","method parameters  join ","(send\n  (send\n    (lvar :method) :parameters) :map) compact  << ","method parameters  << ","(send\n  (send\n    (lvar :method) :parameters) :map) compact  compact! ","method parameters  compact! ","(send\n  (send\n    (lvar :method) :parameters) :map) compact  map! ","method parameters  map! "]}," Spy Mock get_inherited_methods":{"type":"method","name":"get_inherited_methods","children":[],"call":["instance_methods - ","instance_methods uniq! ","instance_methods flatten! ","klass send ","(begin\n  (lvar :visibility)) to_sym ","klass_ancestors map "]}," Spy Mock classes_to_override_methods":{"type":"method","name":"classes_to_override_methods","children":[],"call":["method_classes slice! ","method_classes index ","CLASSES_NOT_TO_OVERRIDE  each ","method_classes delete ","method_classes shift ","mod ancestors ","mod ancestors  slice! ","method_classes method_classes index  ","mod ancestors  index ","mod ancestors  delete ","mod ancestors  shift "]}," Spy Mock included":{"type":"method","name":"included","children":[],"call":["mod define_singleton_method ","mod class_eval ","68 + "," args_for_method ","mod instance_method ","mocked_methods << "," get_inherited_methods each "," get_inherited_methods ","(sym :public) each "," classes_to_override_methods ","mod send ","67 + ","  args_for_method _for_method "]}," Spy Mock new":{"type":"method","name":"new","children":[],"call":["Agency  instance recruit ","Agency  instance "," include "," define_method "," private ","mock_klass class_exec ","Class  new ","Class  new  class_exec "]}," Spy Mock method":{"type":"method","name":"method","children":[],"call":[" _mock_class send "," _mock_class ","new_method parameters last last == ","new_method parameters last last ","new_method parameters last ","new_method parameters ","new_method parameters size >= ","new_method parameters size "," class instance_method bind "," class instance_method "," class ","parameters last last == ","parameters last last ","parameters last ","parameters size >= ","parameters size ","new_method new_method parameters  last last == ","new_method new_method parameters  last last ","new_method new_method parameters  last ","new_method new_method parameters  ","new_method new_method parameters  size >= ","new_method new_method parameters  size ","new_method parameters  last last == ","new_method parameters  last last ","new_method parameters  last ","new_method parameters  size >= ","new_method parameters  size "]}," Spy Mock instance_of?":{"type":"method","name":"instance_of?","children":[],"call":["other == "," class "]}," Spy Mock is_a?":{"type":"method","name":"is_a?","children":[],"call":[" class ancestors include? "," class ancestors "," class "]}," Spy Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Agency  instance recruit ","Agency  instance "]}," Spy NoSpyError to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spy NeverHookedError to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spy NotHookedError to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spy AlreadyHookedError to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spy AlreadyStubbedError to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Spy Agency check_spy!":{"type":"method","name":"check_spy!","children":[],"call":[" raise ","spy respond_to? ","spy is_a? "]}," Spy RspecAdapter teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":["Spy  teardown "]}," Spy RspecAdapter verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[]}," Spy RspecAdapter setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[]}," Spy TestUnitAdapter spy_teardown":{"type":"method","name":"spy_teardown","children":[],"call":["Spy  teardown "]}," Spy TestUnitAdapter included":{"type":"method","name":"included","children":[],"call":[]}," Spy MiniTestAdapter after_teardown":{"type":"method","name":"after_teardown","children":[],"call":["Spy  teardown "]}," Spy API HaveReceived spy":{"type":"method","name":"spy","children":[],"call":["Subroutine  get "]}," Spy API HaveReceived args_message":{"type":"method","name":"args_message","children":[],"call":["@with inspect "]}," Spy API HaveReceived description":{"type":"method","name":"description","children":[],"call":[" args_message "," method_name inspect "," method_name "]}," Spy API HaveReceived failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" args_message "," method_name inspect "," method_name "," actual inspect "," actual "]}," Spy API HaveReceived failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" args_message "," method_name inspect "," method_name "," actual inspect "," actual "]}," Spy API HaveReceived with":{"type":"method","name":"with","children":[],"call":["Proc  new "," block_given? "]}," Spy API HaveReceived matches?":{"type":"method","name":"matches?","children":[],"call":[" spy has_been_called? "," spy "," spy has_been_called_with? "]}," Spy API HaveReceived initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spy API have_received":{"type":"method","name":"have_received","children":[],"call":["HaveReceived  new "]}," Spy API assert_received_with":{"type":"method","name":"assert_received_with","children":[],"call":[" assert ","args inspect ","base_object inspect ","Subroutine  get has_been_called_with? ","Subroutine  get "]}," Spy API assert_received":{"type":"method","name":"assert_received","children":[],"call":[" assert ","base_object inspect ","Subroutine  get has_been_called? ","Subroutine  get "]}," Spy Subroutine ruby_27_last_arg_hash?":{"type":"method","name":"ruby_27_last_arg_hash?","children":[],"call":["Gem Version  new >= ","Gem Version  new ","last empty? ! ","last empty? ","last instance_of? ","args last ","args last  empty? ! ","args last  empty? ","args last  instance_of? ","args args last  "]}," Spy Subroutine call_plan":{"type":"method","name":"call_plan","children":[],"call":["plan call "," ruby_27_last_arg_hash? "]}," Spy Subroutine build_call_through_plan":{"type":"method","name":"build_call_through_plan","children":[],"call":[" base_object send "," method_name "," base_object ","Proc  new "," original_method "," original_method bind "," original_method is_a? ","@base_object is_a? "]}}