{" RbVmomi connect":{"type":"method","name":"connect","children":[],"call":[]}," RbVmomi VIM get_log_keys":{"type":"method","name":"get_log_keys","children":[],"call":["keys << ","desc key ","diagMgr QueryDescriptions each ","diagMgr QueryDescriptions "," serviceContent diagnosticManager "," serviceContent "," serviceContent diagnosticManager  QueryDescriptions each "," serviceContent diagnosticManager  QueryDescriptions "]}," RbVmomi VIM get_log_lines":{"type":"method","name":"get_log_lines","children":[],"call":["log lineEnd ","log lineText ","log lineText slice ","log lineText size ","lines -@ ","log lineText size > ","diagMgr BrowseDiagnosticLog ","start < ","lineEnd - ","start ! "," serviceContent diagnosticManager "," serviceContent ","diagMgr BrowseDiagnosticLog  lineEnd ","log log lineEnd  ","diagMgr BrowseDiagnosticLog  lineText ","diagMgr BrowseDiagnosticLog  lineText slice ","diagMgr BrowseDiagnosticLog  lineText size ","diagMgr BrowseDiagnosticLog  lineText size > "," serviceContent diagnosticManager  BrowseDiagnosticLog ","lineEnd -  < ","log lineEnd  - ","lineEnd -  ! "]}," RbVmomi VIM instanceUuid":{"type":"method","name":"instanceUuid","children":[],"call":[" serviceContent about instanceUuid "," serviceContent about "," serviceContent "]}," RbVmomi VIM pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text ","@opts [] "]}," RbVmomi VIM searchIndex":{"type":"method","name":"searchIndex","children":[],"call":[" serviceContent searchIndex "," serviceContent "]}," RbVmomi VIM propertyCollector":{"type":"method","name":"propertyCollector","children":[],"call":[" serviceContent propertyCollector "," serviceContent "]}," RbVmomi VIM rootFolder":{"type":"method","name":"rootFolder","children":[],"call":[" serviceContent rootFolder "," serviceContent "]}," RbVmomi VIM serviceContent":{"type":"method","name":"serviceContent","children":[],"call":[" serviceInstance RetrieveServiceContent "," serviceInstance "]}," RbVmomi VIM serviceInstance":{"type":"method","name":"serviceInstance","children":[],"call":["VIM  ServiceInstance "]}," RbVmomi VIM rev=":{"type":"method","name":"rev=","children":[],"call":[]}," RbVmomi VIM close":{"type":"method","name":"close","children":[],"call":[" cookie= ","$stderr puts ","e message "," debug "," serviceContent sessionManager Logout "," serviceContent sessionManager "," serviceContent ","RbVmomi  logger error ","RbVmomi  logger "]}," RbVmomi VIM connect":{"type":"method","name":"connect","children":[],"call":[]}," VirtualMachine update_spec_add_delta_disk_layer_on_all_disks":{"type":"method","name":"update_spec_add_delta_disk_layer_on_all_disks","children":[],"call":["spec [] ","spec deviceChange ","spec is_a? ","device_change << ","x backing parent= ","disk backing ","x backing ","x backing fileName= ","disk backing datastore name ","disk backing datastore ","x backing= ","x backing dup ","disk dup tap ","disk dup ","disks each ","devices grep "," collect ","devices grep  each "]}," VirtualMachine add_delta_disk_layer_on_all_disks":{"type":"method","name":"add_delta_disk_layer_on_all_disks","children":[],"call":[" ReconfigVM_Task wait_for_completion "," ReconfigVM_Task "," update_spec_add_delta_disk_layer_on_all_disks "," update_ update_spec_add_delta_disk_layer_on_all_disks _add_delta_disk_layer_on_all_disks "]}," VirtualMachine guest_ip":{"type":"method","name":"guest_ip","children":[],"call":["g ipAddress ","g toolsStatus == ","g toolsStatus "," guest "," guest  ipAddress "," guest  toolsStatus == "," guest  toolsStatus ","  guest uest "]}," VirtualMachine disks":{"type":"method","name":"disks","children":[],"call":[" config hardware device grep "," config hardware device "," config hardware "," config "]}," VirtualMachine macs":{"type":"method","name":"macs","children":[],"call":["Hash  [] ","x macAddress ","x deviceInfo label ","x deviceInfo "," config hardware device grep map "," config hardware device grep "," config hardware device "," config hardware "," config "]}," Task child_tasks":{"type":"method","name":"child_tasks","children":[],"call":["col DestroyCollector ","x task ","col latestPage map ","col latestPage ","tm CreateCollectorForTasks "," info key "," info "," _connection serviceContent taskManager "," _connection serviceContent "," _connection ","tm CreateCollectorForTasks  DestroyCollector ","tm CreateCollectorForTasks  latestPage map ","tm CreateCollectorForTasks  latestPage "," _connection serviceContent taskManager  CreateCollectorForTasks "]}," Task wait_for_progress":{"type":"method","name":"wait_for_progress","children":[],"call":[" raise "," info error "," info "," info result "," info state ","(str \"success\") member? "," info progress "," block_given? "," wait_until "]}," Task wait_for_childtask_completion":{"type":"method","name":"wait_for_childtask_completion","children":[],"call":["Hash  [] "," raise ","props [] ","tasks_props map ","si wait_for_multiple_tasks "," child_tasks "," _connection serviceInstance "," _connection ","si wait_for_multiple_tasks  map "," _connection serviceInstance  wait_for_multiple_tasks "]}," Task wait_for_completion":{"type":"method","name":"wait_for_completion","children":[],"call":[" raise "," info error "," info "," info result "," info state ","(str \"success\") member? "," wait_until "]}," ServiceInstance wait_for_multiple_tasks":{"type":"method","name":"wait_for_multiple_tasks","children":[],"call":["filter DestroyPropertyFilter "," _connection propertyCollector CancelWaitForUpdates "," _connection propertyCollector "," _connection "," block_given? ","task_props [] []= ","changes [] ","task_props [] ","changes member? ","x _ref == ","o obj _ref ","o obj ","x _ref ","tasks find ","interested each ","Hash  [] ","x val ","x name ","o changeSet map ","o changeSet ","os each ","result filterSet [] objectSet ","result filterSet [] ","result filterSet ","result version "," _connection propertyCollector WaitForUpdates ","(str \"success\") member? ","h [] ","task_props all? ","task_props size == ","tasks size ","task_props size "," _connection propertyCollector CreateFilter ","tasks map ","h []= ","Hash  new ","(send\n  (lvar :interested) :+\n  (array\n    (str \"info.state\"))) uniq ","interested + "," _connection propertyCollector CreateFilter  DestroyPropertyFilter ","Hash  []  [] ","Hash  []  member? ","(send\n  (lvar :interested) :+\n  (array\n    (str \"info.state\"))) uniq  each ","result filterSet [] objectSet  each "," _connection propertyCollector WaitForUpdates  filterSet [] objectSet ","result  _connection propertyCollector CreateFilter Set [] objectSet "," _connection propertyCollector WaitForUpdates  filterSet [] ","result  _connection propertyCollector CreateFilter Set [] "," _connection propertyCollector WaitForUpdates  filterSet ","result  _connection propertyCollector CreateFilter Set ","result result version  "," _connection propertyCollector WaitForUpdates  version ","(send\n  (lvar :(send\n  (lvar :interested) :+\n  (array\n    (str \"info.state\"))) uniq ) :+\n  (array\n    (str \"info.state\"))) uniq ","(send\n  (lvar :interested) :+\n  (array\n    (str \"info.state\"))) uniq  + "]}," ServiceInstance find_datacenter":{"type":"method","name":"find_datacenter","children":[],"call":[" content rootFolder childEntity grep first "," content rootFolder childEntity grep "," content rootFolder childEntity "," content rootFolder "," content "," content rootFolder traverse "]}," ResourcePool resourcePoolSubTree":{"type":"method","name":"resourcePoolSubTree","children":[],"call":[" class resourcePoolSubTree "," class "]}," ResourcePool traverse":{"type":"method","name":"traverse","children":[],"call":["f find ","es inject ","path split reject ","path split ","path split reject  inject "]}," ResourcePool find":{"type":"method","name":"find","children":[],"call":[" _connection searchIndex FindChild "," _connection searchIndex "," _connection "]}," RbVmomi ReflectManagedMethodExecuter execute":{"type":"method","name":"execute","children":[],"call":[" _connection deserializer deserialize "," Nokogiri root "," Nokogiri ","result response "," _connection deserializer "," _connection "," ExecuteSoap ","soap_arg val= ","xml target! "," _connection obj2xml ","Builder XmlMarkup  new ","soap_arg name= ","VIM ReflectManagedMethodExecuterSoapArgument  new tap ","VIM ReflectManagedMethodExecuterSoapArgument  new ","args map "," ExecuteSoap  response ","Builder XmlMarkup  new  target! "," _connection obj2Builder XmlMarkup  new  "]}," RbVmomi ReflectManagedMethodExecuter fetch":{"type":"method","name":"fetch","children":[],"call":[" _connection deserializer deserialize ","xml root "," _connection deserializer "," _connection "," Nokogiri ","result response "," FetchSoap "," Nokogiri  root "," FetchSoap  response "]}," PropertyCollector collectMultiple":{"type":"method","name":"collectMultiple","children":[],"call":["Hash  [] ","x to_hash ","x obj ","res map "," RetrieveProperties ","klass wsdl_name ","objs map ","klasses first ","klasses map inject [] ","klasses map inject ","klasses map ","klasses length > ","klasses length ","(send\n  (lvar :objs) :map) uniq ","x class ","objs empty? "," RetrieveProperties  map ","klasses first  wsdl_name ","klasses map inject []  wsdl_name ","klasses first es first ","klasses map inject [] es first ","(send\n  (lvar :objs) :map) uniq  first ","klasses first es map inject [] ","klasses map inject [] es map inject [] ","(send\n  (lvar :objs) :map) uniq  map inject [] ","klasses first es map inject ","klasses map inject [] es map inject ","(send\n  (lvar :objs) :map) uniq  map inject ","klasses first es map ","klasses map inject [] es map ","(send\n  (lvar :objs) :map) uniq  map ","klasses first es length > ","klasses map inject [] es length > ","(send\n  (lvar :objs) :map) uniq  length > ","klasses first es length ","klasses map inject [] es length ","(send\n  (lvar :objs) :map) uniq  length "]}," PerformanceManager active_intervals":{"type":"method","name":"active_intervals","children":[],"call":["Hash  [] ","x level >= ","x level ","x enabled ","intervals select ","(irange\n  (int 1)\n  (int 4)) map "," historicalInterval "," historicalInterval  select "]}," PerformanceManager retrieve_stats":{"type":"method","name":"retrieve_stats","children":[],"call":["Hash  [] ","metric value ","metric id instance ","metric id "," perfcounter_idhash [] name "," perfcounter_idhash [] ","metric id counterId "," perfcounter_idhash ","res value map ","res value ","res sampleInfo ","res entity ","stats map ","opts [] ! ","opts [] "," QueryPerf ","RbVmomi VIM  PerfQuerySpec ","opts [] to_datetime ","realtime == ","objects map ","metric_ids << ","RbVmomi VIM  PerfMetricId ","counter key ","instances each "," fail "," pp "," perfcounter_hash keys "," perfcounter_hash ","counter ! "," perfcounter_hash [] ","metrics each ","instances is_a? ! ","instances is_a? ","opts [] == ","provider refreshRate "," provider_summary ","objects first ","opts []= ","opts dup "," raise "," perf perfcounter_hash [] _idhash [] name "," perf perfcounter_hash [] _idhash [] ","metric id  perfcounter_hash [] Id "," perf perfcounter_hash [] _idhash "," QueryPerf  map ","opts dup  [] ! ","opts dup  [] ","opts dup  [] to_datetime "," perfcounter_hash []  key "," perf perfcounter_hash [] _hash keys "," perf perfcounter_hash [] _hash "," perfcounter_hash []  ! "," perf perfcounter_hash [] _hash [] ","opts dup  [] == "," provider_summary  refreshRate ","  provider_summary _summary ","opts dup  []= ","opts dup  dup "]}," PerformanceManager provider_summary":{"type":"method","name":"provider_summary","children":[],"call":[" QueryPerfProviderSummary ","@provider_summary [] ","obj class "]}," PerformanceManager perfcounter_idhash":{"type":"method","name":"perfcounter_idhash","children":[],"call":["Hash  [] ","x key "," perfcounter_cached map "," perfcounter_cached "]}," PerformanceManager perfcounter_hash":{"type":"method","name":"perfcounter_hash","children":[],"call":["Hash  [] ","x name "," perfcounter_cached map "," perfcounter_cached "]}," PerformanceManager perfcounter_cached":{"type":"method","name":"perfcounter_cached","children":[],"call":[" perfCounter "]}," Time to_datetime":{"type":"method","name":"to_datetime","children":[],"call":["DateTime  new "," min "," hour "," day "," month "," year "," Rational ","60 * * ","60 * "," utc_offset "," sec + ","10 ** "," usec "," sec "," utc_ Rational  "]}," PerfCounterInfo name":{"type":"method","name":"name","children":[],"call":[" nameInfo key "," nameInfo "," groupInfo key "," groupInfo "]}," OvfManager _handle_ost":{"type":"method","name":"_handle_ost","children":[],"call":["ost to_s ","x []= ","ost xpath each ","ost xpath ","opts [] == ","opts [] ","Nokogiri  XML ","Nokogiri  XML  to_s ","Nokogiri  XML  xpath each ","Nokogiri  XML  xpath "]}," OvfManager deployOVF":{"type":"method","name":"deployOVF","children":[],"call":[" raise ","nfcLease HttpNfcLeaseAbort "," puts ","i < ","nfcLease HttpNfcLeaseComplete "," sleep ","nfcLease info entity ","nfcLease info ","vm ! ","i <= ","nfcLease error ","nfcLease state == ","nfcLease state ","nfcLease HttpNfcLeaseProgress ","progress to_i ","90.0 / ","result fileItem length ","result fileItem ","keepAliveThread join ","keepAliveThread kill "," system ","URI  escape ","deviceUrl url gsub ","deviceUrl url ","opts [] config network vnic [] spec ip ipAddress ","opts [] config network vnic [] spec ip ","opts [] config network vnic [] spec ","opts [] config network vnic [] ","opts [] config network vnic ","opts [] config network ","opts [] config ","opts [] ","ip ! ","1 * ","Thread  new ","fileItem create ","file:// + "," URI scheme nil? "," URI scheme "," URI ","tmp join ","tmp << ","fileItem path ","tmp pop ","ovfFilename split ","opts [] to_s ","fileItem deviceId ","deviceUrl ! ","x importKey == ","x importKey ","leaseInfo deviceUrl find ","leaseInfo deviceUrl ","leaseInfo == ","leaseState != ","nfcLease collect ","leaseState ! ","result fileItem each ","timeout < ","4 * ","nfcLease state != ","nfcLease wait_until ","opts [] ImportVApp ","section xml= "," _handle_ost ","section xml ","child section map ","child section ","importSpec instantiationOst child each ","importSpec instantiationOst child ","importSpec instantiationOst ","result importSpec ","x localizedMessage chomp ","x localizedMessage ","result warning each ","result warning ","result error [] localizedMessage ","result error [] ","result error ","result error empty? ! ","result error empty? "," CreateImportSpec "," open read "," open ","RbVmomi VIM  OvfCreateImportSpecParams ","opts [] to_a ","RbVmomi VIM  OvfNetworkMapping ","opts [] map "," fail ","k to_sym ","(str \"uri\") each ","(pair\n  (sym :networkMappings)\n  (hash)) merge ","opts [] ImportVApp  HttpNfcLeaseAbort ","opts [] ImportVApp  HttpNfcLeaseComplete ","opts [] ImportVApp  info entity ","opts [] ImportVApp  info ","nfcLease info entity  ! ","opts [] ImportVApp  error ","opts [] ImportVApp  state == ","opts [] ImportVApp  state ","opts [] ImportVApp  HttpNfcLeaseProgress "," CreateImportSpec  fileItem length "," CreateImportSpec  fileItem ","opts [] config network vnic [] spec opts [] config network vnic [] spec ip ipAddress  opts [] config network vnic [] spec ip ipAddress Address ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network vnic [] spec ip ipAddress ","opts [] config network vnic [] spec opts [] config network vnic [] spec ip ipAddress  ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network vnic [] spec ip ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network vnic [] spec ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network vnic [] ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network vnic ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config network ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] config ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] ","opts [] config network vnic [] spec ip ipAddress  ! ","ovfFilename split  join ","ovfFilename split  << ","ovfFilename split  pop ","opts [] to_s  split ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] to_s ","opts [] ImportVApp  collect "," CreateImportSpec  fileItem each ","opts [] ImportVApp  state != ","opts [] ImportVApp  wait_until ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] ImportVApp ","result importSpec  instantiationOst child each ","result importSpec  instantiationOst child ","result importSpec  instantiationOst ","result result importSpec  "," CreateImportSpec  importSpec "," CreateImportSpec  warning each "," CreateImportSpec  warning "," CreateImportSpec  error [] localizedMessage "," CreateImportSpec  error [] "," CreateImportSpec  error "," CreateImportSpec  error empty? ! "," CreateImportSpec  error empty? ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] to_a ","(pair\n  (sym :networkMappings)\n  (hash)) merge  [] map "]}," ObjectUpdate to_hash_uncached":{"type":"method","name":"to_hash_uncached","children":[],"call":["h []= ","x val ","x name "," fail ","h member? "," changeSet each "," changeSet "," raise "]}," ObjectUpdate []":{"type":"method","name":"[]","children":[],"call":[" to_hash [] "," to_hash "]}," ObjectUpdate to_hash":{"type":"method","name":"to_hash","children":[],"call":[" to_hash_uncached "]}," ObjectContent to_hash_uncached":{"type":"method","name":"to_hash_uncached","children":[],"call":["h []= ","x val ","x name "," fail ","h member? "," propSet each "," propSet "," raise "]}," ObjectContent []":{"type":"method","name":"[]","children":[],"call":[" to_hash [] "," to_hash "]}," ObjectContent to_hash":{"type":"method","name":"to_hash","children":[],"call":[" to_hash_uncached "]}," ManagedObject collect":{"type":"method","name":"collect","children":[],"call":[" block_given? ","h [] ","k to_s ","pathSet map "," collect! "," collect!  [] ","pat collect! Set map "]}," ManagedObject collect!":{"type":"method","name":"collect!","children":[],"call":["ret [] to_hash ","ret [] ","ret length > ","ret length "," _connection propertyCollector RetrieveProperties "," _connection propertyCollector "," _connection "," class wsdl_name "," class "," _connection propertyCollector RetrieveProperties  [] to_hash "," _connection propertyCollector RetrieveProperties  [] "," _connection propertyCollector RetrieveProperties  length > "," _connection propertyCollector RetrieveProperties  length "]}," ManagedObject wait_until":{"type":"method","name":"wait_until","children":[],"call":["filter DestroyPropertyFilter ","b call ","result version "," _connection propertyCollector WaitForUpdates "," _connection propertyCollector "," _connection "," loop "," _connection propertyCollector CreateFilter "," class wsdl_name "," class ","pathSet empty? "," _connection propertyCollector CreateFilter  DestroyPropertyFilter ","b cpathSet empty?  ","result result version sion "," _connection propertyCollector WaitForUpdates  version "]}," ManagedEntity pretty_path":{"type":"method","name":"pretty_path","children":[],"call":["(send\n  (send\n    (send nil :path) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) * ","x [] "," path [] map "," path [] "," path "]}," ManagedEntity paths":{"type":"method","name":"paths","children":[],"call":[]}," ManagedEntity path":{"type":"method","name":"path","children":[],"call":[" class paths [] "," class paths "," class "]}," RbVmomi EsxcliCommand call":{"type":"method","name":"call","children":[],"call":["@ns host mme execute ","@type_info name ","@ns type_name ","@ns obj _ref ","@ns obj ","@ns host mme ","@ns host ","real_args member? ! ","real_args member? ","k to_s ","args reject ","Set  new "," type_info paramTypeInfo map "," type_info paramTypeInfo "," type_info ","@ns obj _call ","@type_info wsdlName ","@ns host direct? ","Set  new  member? ! ","Set  new  member? "]}," RbVmomi EsxcliCommand cli_info":{"type":"method","name":"cli_info","children":[],"call":["x name == ","@type_info name ","x name ","@ns cli_info method find ","@ns cli_info method ","@ns cli_info "]}," RbVmomi EsxcliCommand name":{"type":"method","name":"name","children":[],"call":["@type_info name "]}," RbVmomi EsxcliCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi EsxcliNamespace pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q breakable ","v name ","q pp ","v is_a? ","q seplist ","(send\n  (send\n    (ivar :@namespaces) :values) :+\n  (send\n    (ivar :@commands) :values)) sort_by ","@namespaces values + ","@commands values ","@namespaces values ","q group "]}," RbVmomi EsxcliNamespace method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","@commands [] call ","@commands [] ","@commands member? ","@namespaces [] ","args empty? ","@namespaces member? ","name to_s ","@name to_s spaces [] ","@name to_s spaces member? ","name to_s  to_s "]}," RbVmomi EsxcliNamespace obj":{"type":"method","name":"obj","children":[],"call":["conn type new ","conn type ","@type_info wsdlName ","@host _connection ","@host _connection  type new ","@host _connection  type ","@host _@host _connection ection "]}," RbVmomi EsxcliNamespace cli_info":{"type":"method","name":"cli_info","children":[],"call":["@host mme execute "," type_name ","@host cli_info_fetcher _ref ","@host cli_info_fetcher ","@host mme ","@host cli_info_fetcher VimCLIInfoFetchCLIInfo ","@host direct? "]}," RbVmomi EsxcliNamespace type_name":{"type":"method","name":"type_name","children":[],"call":["@parent type_name "]}," RbVmomi EsxcliNamespace realize":{"type":"method","name":"realize","children":[],"call":["@commands []= ","VIM EsxcliCommand  new ","method_type_info name ","@type_info method each ","@type_info method "," fail "," raise ","method_type_info method_type_info name  "]}," RbVmomi EsxcliNamespace initialize":{"type":"method","name":"initialize","children":[],"call":["h []= "," class new "," class ","Hash  new "]}," RbVmomi EsxcliNamespace root":{"type":"method","name":"root","children":[],"call":[]}," RbVmomi HostSystem direct?":{"type":"method","name":"direct?","children":[],"call":["@ref == "]}," RbVmomi HostSystem mme":{"type":"method","name":"mme","children":[],"call":[" RetrieveManagedMethodExecuter "]}," RbVmomi HostSystem cli_info_fetcher":{"type":"method","name":"cli_info_fetcher","children":[],"call":[" create_dynamic_managed_object ","x moType == ","x moType "," dtm DynamicTypeMgrQueryMoInstances find "," dtm DynamicTypeMgrQueryMoInstances "," dtm "]}," RbVmomi HostSystem create_dynamic_managed_object":{"type":"method","name":"create_dynamic_managed_object","children":[],"call":[" _connection type new ","inst id "," _connection "," _connection type ","(send\n  (send\n    (send nil :dti) :managedTypeInfo) :find) wsdlName ","x name == ","inst moType ","x name "," dti managedTypeInfo find "," dti managedTypeInfo "," dti ","(send\n  (send\n    (send nil :dti) :managedTypeInfo) :find) (send\n  (send\n    (send nil :dti) :managedTypeInfo) :find) wsdlName  "]}," RbVmomi HostSystem dti":{"type":"method","name":"dti","children":[],"call":[" dtm DynamicTypeMgrQueryTypeInfo "," dtm "]}," RbVmomi HostSystem dtm":{"type":"method","name":"dtm","children":[],"call":[" raise ","VIM  InternalDynamicTypeManager "," _connection "," direct? "," summary config product version < "," summary config product version "," summary config product "," summary config "," summary "," summary config product version >= "," RetrieveDynamicTypeManager "]}," RbVmomi HostSystem esxcli":{"type":"method","name":"esxcli","children":[],"call":["VIM EsxcliNamespace  root "]}," Folder inventory":{"type":"method","name":"inventory","children":[],"call":["tree []= ","obj is_a? ","tree [] []= ","h [] ","tree [] ","Hash  [] ","y val ","y name ","x propSet map ","x propSet ","obj == ","inv each "," inventory_flat ","Hash  []  [] ","HasHash  []   [] ","inv eacHash  []  "," inventory_flat  each ","  inventory_flat entory_flat "]}," Folder inventory_tree":{"type":"method","name":"inventory_tree","children":[],"call":["rec [] ","Hash  [] ","x obj ","(or\n  (send\n    (lvar :children) :[]\n    (lvar :parent))\n  (array)) map ","children [] "," lambda ","v [] ","inv values group_by ","inv values "," inventory_flat "," inventory_flat  values group_by "," inventory_flat  values ","  inventory_flat entory_flat "]}," Folder inventory_flat":{"type":"method","name":"inventory_flat","children":[],"call":["h []= ","r obj ","result each "," tap "," _connection propertyCollector RetrieveProperties "," _connection propertyCollector "," _connection ","RbVmomi VIM  PropertyFilterSpec ","RbVmomi VIM  TraversalSpec ","RbVmomi VIM  SelectionSpec ","propSet << "," fail ","v + ","v is_a? ","v == ","k to_s ","k wsdl_name ","k < ","propSpecs each "," raise "," _connection propertyCollector RetrieveProperties  each ","k to_s  to_s ","k wsdl_name  to_s ","k to_s  wsdl_name ","k wsdl_name  wsdl_name ","k to_s  < ","k wsdl_name  < "]}," Folder children":{"type":"method","name":"children","children":[],"call":[" childEntity "]}," Folder traverse":{"type":"method","name":"traverse","children":[],"call":["p CreateDatacenter ","type == ","p CreateFolder ","p find ","f CreateFolder ","f find ","es inject ","es pop ","es empty? "," fail ","path class ","path is_a? ","path split reject ","path split "," raise ","path split reject  inject ","path split reject  pop ","path split reject  empty? "]}," Folder traverse!":{"type":"method","name":"traverse!","children":[],"call":[" traverse "]}," Folder findByInventoryPath":{"type":"method","name":"findByInventoryPath","children":[],"call":[" _connection searchIndex FindByInventoryPath "," _connection searchIndex "," _connection "]}," Folder findByUuid":{"type":"method","name":"findByUuid","children":[],"call":["x is_a? "," _connection searchIndex FindByUuid "," _connection searchIndex "," _connection ","prop_specs []= ","type == "," _connection searchIndex FindByUuid  is_a? "," _connection searchInde _connection searchIndex FindByUuid  FindByUuid "," _connection searchInde _connection searchIndex FindByUuid  "]}," Folder findByIp":{"type":"method","name":"findByIp","children":[],"call":["x is_a? "," _connection searchIndex FindByIp "," _connection searchIndex "," _connection ","propSpecs []= ","type == "," _connection searchIndex FindByIp  is_a? "," _connection searchInde _connection searchIndex FindByIp  FindByIp "," _connection searchInde _connection searchIndex FindByIp  "]}," Folder findByDnsName":{"type":"method","name":"findByDnsName","children":[],"call":["x is_a? "," _connection searchIndex FindByDnsName "," _connection searchIndex "," _connection ","propSpecs []= ","type == "," _connection searchIndex FindByDnsName  is_a? "," _connection searchInde _connection searchIndex FindByDnsName  FindByDnsName "," _connection searchInde _connection searchIndex FindByDnsName  "]}," Folder find":{"type":"method","name":"find","children":[],"call":["x is_a? "," _connection searchIndex FindChild "," _connection searchIndex "," _connection "," _connection searchIndex FindChild  is_a? "," _connection searchInde _connection searchIndex FindChild  FindChild "," _connection searchInde _connection searchIndex FindChild  "]}," DynamicTypeMgrManagedTypeInfo toRbvmomiTypeHash":{"type":"method","name":"toRbvmomiTypeHash","children":[],"call":["Hash  [] ","result version ","a name == ","a name ","result annotation find ","result annotation ","result type =~ ","result type ","result type gsub ","result name ","result nil? ","param version ","param annotation find ","param annotation ","param type =~ ","param type ","param type gsub ","param name ","method paramTypeInfo map ","method paramTypeInfo ","method wsdlName ","method returnTypeInfo "," method map "," method ","prop version ","prop annotation find ","prop annotation ","prop type =~ ","prop type ","prop type gsub ","prop name "," property map "," property "," base first "," base "," name "," wsdlName ","method returnTypeInfo  version ","method returnTypeInfo  annotation find ","method returnTypeInfo  annotation ","method returnTypeInfo  type =~ ","method returnTypeInfo  type ","method returnTypeInfo  type gsub ","method returnTypeInfo  name ","method returnTypeInfo  nil? "]}," DynamicTypeMgrDataTypeInfo toRbvmomiTypeHash":{"type":"method","name":"toRbvmomiTypeHash","children":[],"call":["prop version ","a name == ","a name ","prop annotation find ","prop annotation ","prop type =~ ","prop type ","prop type gsub ","prop name "," property map "," property "," base first "," base "," name "," wsdlName "]}," DynamicTypeMgrAllTypeInfo toRbvmomiTypeHash":{"type":"method","name":"toRbvmomiTypeHash","children":[],"call":["Hash  [] "," fail ","r delete ","r []= ","id2name [] ","r [] ","x [] each ","x [] ","y []= ","y [] ","t [] each ","t [] ","x delete ","x []= ","t []= ","types map ","id2name []= ","types each ","types merge! ","x toRbvmomiTypeHash "," dataTypeInfo each "," dataTypeInfo "," managedTypeInfo each "," managedTypeInfo ","vmodl. + ","(str \"DataObject\") each ","id2name merge! "," raise ","x []  []= ","x []  [] ","Hash  []  map ","tx [] pes map ","Hash  []  each ","tx [] pes each ","Hash  []  merge! ","tx [] pes merge! ","x toRbvmomiTx [] peHash "," dataTx [] peInfo each "," dataTx [] peInfo "," managedTx [] peInfo each "," managedTx [] peInfo "]}," Datastore mkuripath":{"type":"method","name":"mkuripath","children":[],"call":["URI  escape "," name ","(send\n  (send\n    (send\n      (send nil :datacenter) :path) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","elem [] "," datacenter path [] map "," datacenter path [] "," datacenter path "," datacenter ","URI  encode_www_form_component "]}," Datastore datacenter":{"type":"method","name":"datacenter","children":[],"call":[" fail ","x is_a? ","x parent ","x is_a? ! "," parent "," raise ","x parent  is_a? "," parent  is_a? ","x parent  parent "," parent  parent ","x parent  is_a? ! "," parent  is_a? ! "]}," Datastore upload":{"type":"method","name":"upload","children":[],"call":[" fail ","$? success? ","Process  waitpid "," spawn "," _connection cookie "," _connection "," mkuripath "," _connection http port "," _connection http "," _connection http address "," _connection http use_ssl? "," raise ","Process  wait spawn  "]}," Datastore download":{"type":"method","name":"download","children":[],"call":[" fail ","$? success? ","Process  waitpid "," spawn "," _connection cookie "," _connection "," mkuripath "," _connection http port "," _connection http "," _connection http address "," _connection http use_ssl? "," raise ","Process  wait spawn  "]}," Datastore exists?":{"type":"method","name":"exists?","children":[],"call":[" fail ","resp inspect "," _connection http request "," _connection http "," _connection ","req initialize_http_header "," _connection cookie ","Net HTTP Head  new "," mkuripath "," raise "," _connection http request  inspect "," _connection http Net HTTP Head  new uest ","Net HTTP Head  new  initialize_http_header "]}," Datacenter find_folder":{"type":"method","name":"find_folder","children":[],"call":[" vmFolder traverse "," vmFolder "]}," Datacenter find_vm":{"type":"method","name":"find_vm","children":[],"call":[" vmFolder traverse "," vmFolder "]}," Datacenter find_datastore":{"type":"method","name":"find_datastore","children":[],"call":["x name == ","x name "," datastore find "," datastore "]}," Datacenter find_compute_resource":{"type":"method","name":"find_compute_resource","children":[],"call":[" hostFolder traverse "," hostFolder "]}," ComputeResource stats":{"type":"method","name":"stats","children":[],"call":["x [] ","stats [] ","x [] / ","1024 * ","x [] * ","x [] == ","result each "," _connection propertyCollector RetrieveProperties "," _connection propertyCollector "," _connection ","RbVmomi VIM  PropertyFilterSpec ","RbVmomi VIM  TraversalSpec "," _connection propertyCollector RetrieveProperties  each "]}," PerfAggregator construct_tree_rows_from_vm_props":{"type":"method","name":"construct_tree_rows_from_vm_props","children":[{"type":"method","name":"visualize_node","children":[],"asgn":[null,{"type":"local","name":"stats","value":"node [] [] "},["node [] [] "],null,null],"call":[" visualize_node ","indent + ","inventory [] ","node [] each ","node [] ","rows << ","node [] ","node [] [] ","node [] ","node [] [] ! ","node [] [] ","node [] ","node [] ! ","node [] ","node ! "]}],"call":["Hash  [] "," visualize_node ","v [] [] == ","v [] [] ","v [] ","@inventory find ","path_types map ","indent + ","inventory [] ","node [] each ","node [] ","rows << ","node [] [] ","node [] [] ! ","node [] ! ","node ! "," visualize_node  << "]}," PerfAggregator visualize_vm_props":{"type":"method","name":"visualize_vm_props","children":[],"call":[" puts ","stats [] ","   * ","rows each ","path_types_rows each "," construct_tree_rows_from_vm_props "," construct_tree_rows_from_vm_props  each "]}," PerfAggregator _aggregate_vms":{"type":"method","name":"_aggregate_vms","children":[],"call":["inventory [] [] []= ","inventory [] [] ","inventory [] ","reverse_index [] "," _aggregate_metrics ","(send\n  (lvar :vms_props) :select) values ","vms member? ","vms_props select ","paths_vms each ","parent [] [] ","parent [] ","paths_vms [] << ","paths_vms [] "," pp ","index keys "," puts ","parent ! ","index [] ","props [] [] ","props [] ","props [] [] ! ","props [] ! ","vms_props each ","reverse_index []= ","index []= ","v [] [] ","v [] ","inventory each ","path_types each ","v [] [] s_vms each ","index []  [] [] ","index []  [] ","v [] [] s_vms [] << ","v [] [] s_vms [] ","index []  ! ","v [] [] _types each "]}," PerfAggregator _mo2str":{"type":"method","name":"_mo2str","children":[],"call":["mo _ref ","mo _connection instanceUuid ","mo _connection ","mo is_a? ! ","mo is_a? "]}," PerfAggregator _make_marshal_friendly":{"type":"method","name":"_make_marshal_friendly","children":[],"call":["JSON  load ","JSON  dump ","Hash  [] "," _mo2str ","v []= ","k class name ","k class ","v [] map ","v [] ","hash map ","JSON  load  map ","Hash  []  map "]}," PerfAggregator collect_info_on_all_vms":{"type":"method","name":"collect_info_on_all_vms","children":[],"call":[" log "," _aggregate_vms ","opts [] "," _compute_parents_and_children ","@vm_processing_callback call "," _make_marshal_friendly ","t join ","(send\n  (lvar :root_folders) :map) each "," raise ","ex backtrace each ","ex backtrace ","ex message ","ex class ","hosts_props merge! ","inventory merge! ","inventory [] [] ","inventory [] ","single_inventory [] [] ","single_inventory [] ","vms_props merge! ","lock synchronize "," _collect_info_on_all_vms_single ","Thread  new ","root_folders map ","Mutex  new "," _make_marshal_friendly  merge! "," _aggregate_vms  merge! "," _aggregate_vms  [] [] "," _make_marshal_friendly  [] [] "," _aggregate_vms  [] "," _make_marshal_friendly  [] ","single_ _aggregate_vms  [] [] ","single_ _make_marshal_friendly  [] [] ","single_ _aggregate_vms  [] ","single_ _make_marshal_friendly  [] ","Mutex  new  synchronize "]}," PerfAggregator _collect_info_on_all_vms_single":{"type":"method","name":"_collect_info_on_all_vms_single","children":[],"call":["props []= ","Hash  [] ","x value ","x key ","props [] map ","props [] ","props [] is_a? ! ","props [] is_a? ","YAML  load ","props [] []= ","rp_props [] ","inventory [] ","props [] ! ","inventory [] [] ","(send\n  (lvar :per_ds_usage) :map) inject ","x unshared ","per_ds_usage map ","x uncommitted ","x committed ","props delete ","props merge! "," _aggregate_metrics ","stats [] ","vms_stats [] ","props [] == ","connected_vms member? ! ","connected_vms member? ","vms_props each ","hosts_stats [] ","connected_hosts [] ! ","connected_hosts [] ","hosts_props each ","pm retrieve_stats ","host_perf_metrics keys ","connected_hosts keys ","connected_hosts length > ","connected_hosts length ","v [] != ","v [] ","hosts_props select "," raise ","ex fault obj ","ex fault ","ex fault is_a? ","perf_metrics keys ","connected_vms length == ","connected_vms length ","(send\n  (lvar :vms_props) :select) keys ","is_template ! ","props [] != ","vms_props select ","conn instanceUuid ","sc perfManager ","sc propertyCollector ","conn serviceContent ","root_folder _connection ","k is_a? ","inventory select ","vms_props keys "," all_inventory_flat ","host_perf_metrics ! ","opts [] ","perf_metrics ! ","prop_names ! ","inventory []  [] ","(send\n  (lvar :props [] ) :map) inject ","props []  map "," _aggregate_metrics  [] ","vms_ _aggregate_metrics  [] ","pm retrieve_stats  [] ","vms_props keys _stats [] ","(send\n  (lvar :vms_props) :select) keys  member? ! ","root_folder _connection ected_vms member? ! ","connected_vms_props keys  member? ! ","(send\n  (lvar :vms_props) :select) keys  member? ","root_folder _connection ected_vms member? ","connected_vms_props keys  member? ","vms_props keys _props each ","hosts_ _aggregate_metrics  [] ","root_folder _connection ected_hosts [] ! ","root_folder _connection ected_hosts [] ","pm retrieve_ _aggregate_metrics  ","sc perfManager  retrieve_stats ","opts []  keys ","host_opts []  keys ","root_folder _connection ected_hosts keys ","root_folder _connection ected_hosts length > ","root_folder _connection ected_hosts length ","(send\n  (lvar :vms_props) :select) keys  length == ","root_folder _connection ected_vms length == ","connected_vms_props keys  length == ","(send\n  (lvar :vms_props) :select) keys  length ","root_folder _connection ected_vms length ","connected_vms_props keys  length ","(send\n  (lvar :vms_props keys _props) :select) keys ","props []  ! ","vms_props keys _props select ","root_folder _connection  instanceUuid ","conn serviceContent  perfManager ","conn serviceContent  propertyCollector ","root_folder _connection  serviceContent ","root_folder _root_folder _connection ection ","vms_props keys _props keys ","opts []  ! ","host_opts []  ! "]}," PerfAggregator _aggregate_metrics":{"type":"method","name":"_aggregate_metrics","children":[],"call":["out []= ","out [] / ","avg_counter [] ","out [] ","avg_counter [] > ","type == ","perf_metrics each ","val to_f ","val > ","(send\n  (lvar :out) :[]\n  (lvar :key)) max ","values compact each ","values compact ","values is_a? ! ","values is_a? ","vm_stats [] ","vms_stats each ","Hash  [] ","perf_metrics keys map ","perf_metrics keys ","Hash  []  []= ","Hash  []  [] / ","Hash  []  [] ","Hash  []  [] > ","(send\n  (lvar :Hash  [] ) :[]\n  (lvar :key)) max ","vm_stats []  compact each ","vm_stats []  compact ","vm_stats []  is_a? ! ","vm_stats []  is_a? "]}," PerfAggregator _compute_parents_and_children":{"type":"method","name":"_compute_parents_and_children","children":[],"call":["parent [] << ","parent [] ","props [] []= ","parent [] [] ","props [] ","props [] keys each ","props [] keys ","objs [] ","props [] ! ","props []= ","objs each ","objs []  [] << ","objs []  [] ","objs []  [] [] "]}," PerfAggregator _compute_vmfolders_and_rp_paths":{"type":"method","name":"_compute_vmfolders_and_rp_paths","children":[],"call":["props []= ","props [] []= ","props [] ","objs [] [] == ","objs [] [] ","objs [] ","obj_with_parents [] ","dc_index - ","obj_with_parents index ","obj is_a? ","dc ! ","x is_a? ","obj_with_parents find ","(lvar :obj) + "," _compute_vmfolder_and_rp_path_and_parents ","objs each ","(lvar :obj) +  [] ","obj_with_parents index  - ","(lvar :obj) +  index ","(lvar :obj) +  find "," _compute_vmobj_with_parents [] _and_rp_path_and_parents "]}," PerfAggregator _compute_vmfolder_and_rp_path_and_parents":{"type":"method","name":"_compute_vmfolder_and_rp_path_and_parents","children":[],"call":["obj []= ","(send\n  (lvar :obj) :[]\n  (str \"parent\")) + ","parent [] ","obj [] ","%s/%s % "," _compute_vmfolder_and_rp_path_and_parents ","objs [] ","obj [] ! ","(send\n  (lvar :obj) :[]\n  (str \"objs [] \")) + ","objs []  [] "," _compute_vmfolder_and_rp_path_and_objs [] s "]}," PerfAggregator all_inventory_flat":{"type":"method","name":"all_inventory_flat","children":[],"call":[" _compute_parents_and_children "," _compute_vmfolders_and_rp_paths ","conn host ","inventory []= ","r to_hash ","r obj ","vms []= ","r obj is_a? ","result each ","pc RetrieveProperties ","RbVmomi VIM  PropertyFilterSpec ","RbVmomi VIM  TraversalSpec ","RbVmomi VIM  SelectionSpec ","conn propertyCollector ","rootFolder _connection ","rootFolder _connection  host ","pc RetrieveProperties  each ","conn propertyCollector  RetrieveProperties ","rootFolder _connection  propertyCollector ","rootFolder _rootFolder _connection ection "]}," PerfAggregator add_node_unless_exists":{"type":"method","name":"add_node_unless_exists","children":[],"call":["inventory []= ","props merge ","inventory [] ! ","inventory [] "]}," PerfAggregator set_vm_processing_callback":{"type":"method","name":"set_vm_processing_callback","children":[],"call":[]}," PerfAggregator log":{"type":"method","name":"log","children":[],"call":[" puts ","Time  now ","@logger info "]}," PerfAggregator initialize":{"type":"method","name":"initialize","children":[],"call":["@path_types << ","Set  new ","Set  new  << "]}," LeaseTool filter_expired_vms":{"type":"method","name":"filter_expired_vms","children":[],"call":["Hash  [] ","(send\n  (lvar :vms) :map) compact ","(send\n  (lvar :lease) :-\n  (lvar :time)) + ","lease - ","time > ","note [] ","note is_a? ","YAML  load ","props [] ","vmprops [] ","vms map "," current_time + "," current_time ","opts [] ","(send\n  (lvar :note [] ) :-\n  (lvar :time)) + ","(send\n  (lvar :lease) :-\n  (lvar : current_time + )) + ","note []  - "," current_time +  > ","YAML  load  [] ","YAML  load  is_a? ","vmprops []  [] ","vmvmprops []  [] "," current_ current_time +  + "," current_ current_time +  "]}," LeaseTool find_leaseless_vms":{"type":"method","name":"find_leaseless_vms","children":[],"call":["note [] ","note is_a? ","YAML  load ","props [] ","vmprops [] ","vms reject ","YAML  load  [] ","YAML  load  is_a? ","vmprops []  [] ","vmvmprops []  [] "]}," LeaseTool set_lease_on_leaseless_vms":{"type":"method","name":"set_lease_on_leaseless_vms","children":[],"call":["si wait_for_multiple_tasks ","vms first _connection serviceInstance ","vms first _connection ","vms first "," set_lease_on_vm_task ","vmprops [] [] ","vmprops [] ","vms map ","vms length > ","vms length "," find_leaseless_vms "," raise ","lease_minutes ! ","opts [] ","vms first _connection serviceInstance  wait_for_multiple_tasks ","si wait_for_multiple_ set_lease_on_vm_task s "," find_leaseless_vms  first _connection serviceInstance "," find_leaseless_vms  first _connection "," find_leaseless_vms  first "," set_lease_on_vm_ set_lease_on_vm_task  "," find_leaseless_vms  map "," find_leaseless_vms  length > "," find_leaseless_vms  length "," find_leaseless_ find_leaseless_vms  ","opts []  ! "]}," LeaseTool set_lease_on_vm_task":{"type":"method","name":"set_lease_on_vm_task","children":[],"call":["vm ReconfigVM_Task "," set_lease_in_vm_config ","vm collect ","annotation ! ","vm collect  ! "]}," LeaseTool set_lease_in_vm_config":{"type":"method","name":"set_lease_in_vm_config","children":[],"call":["vmconfig []= ","YAML  dump ","note []= "," current_time + ","lease_minutes * "," current_time ","note is_a? ! ","note is_a? ","YAML  load ","vmconfig [] ","YAML  load  []= "," current_time + _minutes * ","YAML  load  is_a? ! ","YAML  load  is_a? "]}," LeaseTool current_time":{"type":"method","name":"current_time","children":[],"call":["Time  now "]}," LeaseTool get_vms_props":{"type":"method","name":"get_vms_props","children":[],"call":["pc collectMultiple ","vms first _connection serviceContent propertyCollector ","vms first _connection serviceContent ","vms first _connection ","vms first ","vms length > ","vms length ","vms first _connection serviceContent propertyCollector  collectMultiple "]}," LeaseTool vms_props_list":{"type":"method","name":"vms_props_list","children":[],"call":[]}," CachedOvfDeployer _wait_for_template_ready":{"type":"method","name":"_wait_for_template_ready","children":[],"call":[" sleep ","runtime powerState == ","runtime powerState ","runtime host ","vm collect "," log ","x name == ","x name ","vm_folder children find ","vm_folder children ","vm ! "]}," CachedOvfDeployer linked_clone":{"type":"method","name":"linked_clone","children":[],"call":["template_vm CloneVM_Task wait_for_completion ","template_vm CloneVM_Task "," puts ","Time  now "," _wait_for_template_ready "," raise ","fault fault is_a? ","fault fault ","@computer name ","opts [] ","template_template_vm CloneVM_Task wait_for_completion  CloneVM_Task wait_for_completion ","template_ _wait_for_template_ready  CloneVM_Task wait_for_completion ","template_template_vm CloneVM_Task wait_for_completion  CloneVM_Task ","template_ _wait_for_template_ready  CloneVM_Task "]}," CachedOvfDeployer lookup_template":{"type":"method","name":"lookup_template","children":[],"call":["is_template ! ","config template ","template config ","@template_folder traverse ","@computer name ","is_@template_folder traverse  ! ","template config  template ","config @template_folder traverse  ","template template config  ","@template_folder traverse  config ","@@template_folder traverse _folder traverse "]}," CachedOvfDeployer upload_ovf_as_template":{"type":"method","name":"upload_ovf_as_template","children":[],"call":[" log "," _wait_for_template_ready ","vm MarkAsTemplate ","vm ReconfigVM_Task wait_for_completion ","vm ReconfigVM_Task ","vm update_spec_add_delta_disk_layer_on_all_disks ","opts [] ","opts [] != ","wait_for_template ! "," raise ","fault fault is_a? ! ","fault fault is_a? ","fault fault ","@vim serviceContent ovfManager deployOVF ","@vim serviceContent ovfManager ","@vim serviceContent "," _run_without_interruptions ","template_name + ","@computer name ","hosts_props [] [] ","hosts_props [] "," fail ","host ! ","host_props [] ! ","host_props [] ","host_props [] member? ","host_props [] == ","hosts shuffle find ","hosts shuffle ","pc collectMultiple ","@computer host ","@vim serviceContent propertyCollector ","network_mappings_str join ","v name ","network_mappings map ","Hash  [] ","networks map ","x [] ","ovf xpath map ","ovf xpath ","ovf remove_namespaces! ","Nokogiri  XML ","io read "," open "," URI path "," URI "," URI host nil? "," URI host "," URI scheme == "," URI scheme "," lookup_template "," _wait_for_ lookup_template _ready "," _wait_for_template_ready  MarkAsTemplate ","@vim serviceContent ovfManager deployOVF  MarkAsTemplate "," _wait_for_template_ready  ReconfigVM_Task wait_for_completion ","@vim serviceContent ovfManager deployOVF  ReconfigVM_Task wait_for_completion ","vm Revm update_spec_add_delta_disk_layer_on_all_disks VM_Task wait_for_completion "," _wait_for_template_ready  ReconfigVM_Task ","@vim serviceContent ovfManager deployOVF  ReconfigVM_Task ","vm Revm update_spec_add_delta_disk_layer_on_all_disks VM_Task "," _wait_for_template_ready  update_spec_add_delta_disk_layer_on_all_disks ","@vim serviceContent ovfManager deployOVF  update_spec_add_delta_disk_layer_on_all_disks ","wait_for_ lookup_template  ! "," lookup_template _name + ","pc collectMultiple  [] [] ","@computer host _props [] [] ","pc collectMultiple  [] ","@computer host _props [] ","hosts_props []  [] ! ","hosts_props []  [] ","hosts_props []  [] member? ","hosts_props []  [] == ","@computer host  shuffle find ","@computer host  shuffle ","@vim serviceContent propertyCollector  collectMultiple ","Hash  [] _str join ","Hash  []  map "," lookup_ lookup_template  "]}," CachedOvfDeployer _run_without_interruptions":{"type":"method","name":"_run_without_interruptions","children":[],"call":["Signal  trap "]}," CachedOvfDeployer log":{"type":"method","name":"log","children":[],"call":[" puts ","Time  now ","@logger info "]}," CachedOvfDeployer initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","@computer resourcePool "]}," AdmissionControlledResourceScheduler make_placement_decision":{"type":"method","name":"make_placement_decision","children":[],"call":[" log ","datastore name "," datastore "," rand + "," rand ","opts [] ","(str \"User stats: \") % ","unshared to_f / ","1024 ** ","unshared to_f ","(send\n  (lvar :user_vms) :map) inject ","(send\n  (send\n    (send\n      (lvar :info) :[]\n      (str \"storage\")) :perDatastoreUsage) :map) inject ","x unshared ","info [] perDatastoreUsage map ","info [] perDatastoreUsage ","info [] ","user_vms map ","user_vms length ","k is_a? "," vm_folder inventory_flat select "," vm_folder inventory_flat "," vm_folder ","(send\n  (int 100) :*\n  (send\n    (lvar :stats) :[]\n    (sym :usedMem))) / ","stats [] ","100 * ","(send\n  (int 100) :*\n  (send\n    (lvar :stats) :[]\n    (sym :usedCPU))) / ","stats [] > ","@computer stats ","@rp pretty_path "," fail ","@rp ! ","@computer resourcePool traverse ","@computer resourcePool ","@computer name "," pick_computer "," filtered_pods "," raise "," datastore  name ","  datastore  ","(str \"User @computer stats : \") % ","(send\n  (lvar :user_vms) :map) inject  to_f / ","(send\n  (lvar :user_vms) :map) inject  to_f ","x (send\n  (lvar :user_vms) :map) inject  ","(send\n  (int 100) :*\n  (send\n    (lvar :@computer stats ) :[]\n    (sym :usedMem))) / ","@computer stats  [] ","(send\n  (int 100) :*\n  (send\n    (lvar :@computer stats ) :[]\n    (sym :usedCPU))) / ","@computer stats  [] > ","@computer @computer stats  ","@computer resourcePool traverse  pretty_path ","@computer resourcePool traverse  ! "]}," AdmissionControlledResourceScheduler datastore":{"type":"method","name":"datastore","children":[],"call":["eligible first ","eligible [] ","placementHint % ","eligible length ","placementHint > "," fail ","eligible length == ","free_percent > ","ds_sum freeSpace to_f * / ","ds_sum capacity ","ds_sum freeSpace to_f * ","ds_sum freeSpace to_f ","ds_sum freeSpace ","@datastore_props [] [] ","@datastore_props [] ","min_ds_free > ","pod_datastores select "," pick_computer datastore & "," datastores "," pick_computer datastore "," pick_computer "," raise ","ds_sum freeSpace to_f * /  > ","@datastore_props [] []  freeSpace to_f * / ","@datastore_props [] []  capacity ","@datastore_props [] []  freeSpace to_f * ","@datastore_props [] []  freeSpace to_f ","@datastore_props [] []  freeSpace ","eligible first _props [] [] ","eligible [] _props [] [] ","eligible first _props [] ","eligible [] _props [] "," pick_computer datastore &  select "]}," AdmissionControlledResourceScheduler pick_computer":{"type":"method","name":"pick_computer","children":[],"call":[" fail ","computer ! ","2 ** + ","stats [] to_f / ","stats [] ","stats [] to_f ","2 ** ","eligible min_by ","(send\n  (lvar :eligible) :map) [] ","placementhint % ","eligible length ","x [] ","eligible map ","eligible length > ","stats [] > ","available member? "," computers select "," computers "," filtered_pods flatten "," filtered_pods ","@computer ! "," raise ","(send\n  (lvar :eligible) :map) []  ! "," filtered_pods flatten  member? "," (send\n  (lvar :eligible) :map) [] s select "," (send\n  (lvar :eligible) :map) [] s ","@(send\n  (lvar :eligible) :map) []  ! "]}," AdmissionControlledResourceScheduler filtered_pods":{"type":"method","name":"filtered_pods","children":[],"call":[" fail "," log ","@filtered_pods length == ","@filtered_pods length ","denied ! ","hosts_available ! ","stats [] > ","stats [] ","Hash  [] [] ","Hash  [] "," computers ","pod any? ","(send\n  (lvar :low_list) :map) join ","@datastore_props [] [] ","@datastore_props [] ","low_list map ","low_list length == ","pod_datastores length ","low_list length ","@datastore_props [] [] <= ","pod_datastores select ","min_ds_free > ","num_pod_vms > ","max_vms > ","%.2f GB (%.2f%%) % ","ds_props [] freeSpace to_f / ","1024 ** ","ds_props [] freeSpace to_f ","ds_props [] freeSpace ","ds_props [] ","pod_datastores each ","@datastore_props [] []= ","ds_sum freeSpace to_f * / ","ds_sum capacity ","ds_sum freeSpace to_f * ","ds_sum freeSpace to_f ","ds_sum freeSpace ","(send\n  (lvar :pod) :map) join ","x name ","pod map "," pod_datastores ","on_vms length ","v [] == ","v [] "," pod_vms select "," pod_vms "," pods select "," pods ","@filtered_pods ! "," raise ","Hash  [] []  [] > ","Hash  [] []  [] "," pod_datastores  length "," pod_datastores  select ","min_ds_ds_props []  > ","on_vms length  > ","ds_props [] ds_props [] Space to_f / ","@datastore_props []  [] freeSpace to_f / ","ds_props [] ds_props [] Space to_f ","@datastore_props []  [] freeSpace to_f ","ds_props [] ds_props [] Space ","@datastore_props []  [] freeSpace ","@datastore_props []  [] "," pod_datastores  each ","ds_sum ds_props [] Space to_f * / ","@datastore_props [] []  freeSpace to_f * / ","@datastore_props [] []  capacity ","ds_sum ds_props [] Space to_f * ","@datastore_props [] []  freeSpace to_f * ","ds_sum ds_props [] Space to_f ","@datastore_props [] []  freeSpace to_f ","ds_sum ds_props [] Space ","@datastore_props [] []  freeSpace ","  pod_datastores  "]}," AdmissionControlledResourceScheduler pod_datastores":{"type":"method","name":"pod_datastores","children":[],"call":["pod first datastore & "," datastores ","pod first datastore ","pod first "]}," AdmissionControlledResourceScheduler pod_vms":{"type":"method","name":"pod_vms","children":[],"call":["obj is_a? ","out select ","Hash  [] ","y val ","y name ","x propSet map ","x propSet ","x obj ","result map ","@vim propertyCollector RetrieveProperties ","@vim propertyCollector ","RbVmomi VIM  PropertyFilterSpec ","RbVmomi VIM  TraversalSpec ","RbVmomi VIM  SelectionSpec ","computer resourcePool ","pod map ","@vim propertyCollector RetrieveProperties  map "]}," AdmissionControlledResourceScheduler pods":{"type":"method","name":"pods","children":[],"call":["(send\n  (send\n    (lvar :computer) :datastore) :&\n  (send\n    (self) :datastores)) == ","computer datastore & "," datastores ","computer datastore ","(send\n  (send nil :computers) :map) select ","x [] "," computers map "," computers ","(send\n  (send nil :computers) :map) uniq map ","(send\n  (send nil :computers) :map) uniq ","computersProps [] [] & ","computersProps [] [] ","computersProps [] ","@pc collectMultiple ","@pods ! ","@pc collectMultiple  [] [] & ","@pc collectMultiple  [] [] ","@pc collectMultiple  [] "]}," AdmissionControlledResourceScheduler computers":{"type":"method","name":"computers","children":[],"call":["computer stats "," datacenter find_compute_resource "," datacenter ","@computer_names map ","@computers ! "," datacenter find_compute_resource  stats ","@ datacenter find_compute_resource _names map ","@ datacenter find_compute_resource s ! "]}," AdmissionControlledResourceScheduler datastores":{"type":"method","name":"datastores","children":[],"call":["@pc collectMultiple ","@datastore_props ! "," fail ","ds ! "," datacenter datastoreFolder traverse "," datacenter datastoreFolder "," datacenter ","@datastore_paths map ","@datastores ! "," raise ","@pc collectMultiple  ! "," datacenter datastoreFolder traverse  ! "]}," AdmissionControlledResourceScheduler datacenter":{"type":"method","name":"datacenter","children":[],"call":[" fail ","@datacenter ! ","@root_folder traverse "," raise ","@root_folder traverse  ! "]}," AdmissionControlledResourceScheduler vm_folder":{"type":"method","name":"vm_folder","children":[],"call":["retries >= "," raise ","fault fault is_a? ! ","fault fault is_a? ","fault fault "," fail ","@vm_folder ! "," datacenter vmFolder traverse! "," datacenter vmFolder "," datacenter "]}," AdmissionControlledResourceScheduler log":{"type":"method","name":"log","children":[],"call":[" puts ","Time  now ","@logger info "]}," AdmissionControlledResourceScheduler initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","@vim serviceContent rootFolder ","@vim serviceContent ","@vim serviceContent propertyCollector "]}," RbVmomi TypeLoader make_enum_type":{"type":"method","name":"make_enum_type","children":[],"call":["klass wsdl_name= ","desc [] ","klass init ","Class  new tap ","Class  new "]}," RbVmomi TypeLoader make_managed_type":{"type":"method","name":"make_managed_type","children":[],"call":["klass wsdl_name= ","desc [] ","klass init ","Class  new tap ","Class  new "," get "]}," RbVmomi TypeLoader make_data_type":{"type":"method","name":"make_data_type","children":[],"call":["klass wsdl_name= ","desc [] ","klass init ","Class  new tap ","Class  new "," get "]}," RbVmomi TypeLoader make_type":{"type":"method","name":"make_type","children":[],"call":[" fail ","desc inspect "," make_enum_type "," make_managed_type "," make_data_type ","desc [] ","@db [] ","BasicTypes  const_get ","BasicTypes BUILTIN  member? ","name to_s "," raise "," make_opaque_type ","@db []  inspect ","@db []  [] ","name to_s  to_s "]}," RbVmomi TypeLoader load_extension":{"type":"method","name":"load_extension","children":[],"call":[" load ","(send\n  (block\n    (send\n      (ivar :@extension_dirs) :map)\n    (args\n      (arg :x))\n    (send\n      (const nil :File) :join\n      (lvar :x)\n      (dstr\n        (begin\n          (lvar :name))\n        (str \".rb\")))) :select) each ","File  exist? ","(send\n  (ivar :@extension_dirs) :map) select ","File  join ","@extension_dirs map "]}," RbVmomi TypeLoader typenames":{"type":"method","name":"typenames","children":[],"call":["@db keys "]}," RbVmomi TypeLoader add_types":{"type":"method","name":"add_types","children":[],"call":["Hash  [] ","%s%s % ","name [] ","first_char upcase ","first_char downcase == ","first_char downcase ","name [] chr ","value [] ","@db map ","@db merge! ","@lock synchronize ","%s%s %  [] ","name [] chr  upcase ","name [] chr  downcase == ","name [] chr  downcase ","%s%s %  [] chr ","Hash  []  map ","Hash  []  merge! "]}," RbVmomi TypeLoader get":{"type":"method","name":"get","children":[],"call":["@loaded []= "," load_extension ","@namespace const_set "," make_type ","@loaded [] ","@loaded member? ","@lock synchronize ","%s%s % ","name [] ","first_char upcase ","first_char downcase == ","first_char downcase ","name [] chr "," fail ","name class ","name is_a? "," raise ","@%s%s % space const_set ","%s%s %  [] ","name [] chr  upcase ","name [] chr  downcase == ","name [] chr  downcase ","%s%s %  [] chr ","%s%s %  class ","%s%s %  is_a? "]}," RbVmomi TypeLoader has?":{"type":"method","name":"has?","children":[],"call":["BasicTypes BUILTIN  member? ","@db member? "," fail ","name is_a? "," raise "]}," RbVmomi TypeLoader reload_extensions_dir":{"type":"method","name":"reload_extensions_dir","children":[],"call":[" load ","File  join ","loaded member? ","file =~ ","dir each ","Dir  open ","Set  new ","@namespace const_defined? "," typenames select "," typenames ","Set  new  member? "]}," RbVmomi TypeLoader reload_extensions":{"type":"method","name":"reload_extensions","children":[],"call":[" reload_extensions_dir ","@extension_dirs each "]}," RbVmomi TypeLoader preload":{"type":"method","name":"preload","children":[],"call":[" get ","names each "," has? ","(send\n  (send\n    (ivar :@namespace) :constants) :+\n  (send\n    (const nil :Object) :constants)) map uniq select ","(send\n  (send\n    (ivar :@namespace) :constants) :+\n  (send\n    (const nil :Object) :constants)) map uniq ","(send\n  (send\n    (ivar :@namespace) :constants) :+\n  (send\n    (const nil :Object) :constants)) map ","@namespace constants + ","Object  constants ","@namespace constants "]}," RbVmomi TypeLoader initialize":{"type":"method","name":"initialize","children":[],"call":[" preload "," add_types ","k =~ ","vmodl_database reject! ","Marshal  load ","File  open ","Hash  [] ","BasicTypes BUILTIN  map ","Monitor  new "]}," TrivialSoap request":{"type":"method","name":"request","children":[],"call":["response body size ","response body ","nk xpath select first ","nk xpath select ","nk xpath ","$stderr puts ","%.3f % ","end_time - "," Nokogiri "," cookie= ","response [] ","response key? "," raise ","response is_a? ","Time  now "," restart_http ","@http request_post ","@opts [] ","@lock synchronize ","@sso sign_request ","@sso request_token ","@sso assertion_id ","@cookie nil? ","headers []= ","RbVmomi  logger debug ","RbVmomi  logger ","response @sso sign_request  size ","response @sso sign_request  "," Nokogiri  xpath select first "," Nokogiri  xpath select "," Nokogiri  xpath ","Time  now  - "]}," TrivialSoap soap_envelope":{"type":"method","name":"soap_envelope","children":[],"call":[" block_given? ","xml tag! ","Builder XmlMarkup  new ","Builder XmlMarkup  new  tag! "]}," TrivialSoap restart_http":{"type":"method","name":"restart_http","children":[{"type":"method","name":"on_connect","children":[],"asgn":[],"call":[]}],"call":["@http start ","@socket io setsockopt ","@socket io ","@http open_timeout= ","@opts [] ","@http read_timeout= ","@http set_debug_output ","@http key= ","OpenSSL PKey RSA  new ","@http cert= ","OpenSSL X509 Certificate  new ","@http ca_file= ","@http verify_mode= ","@http use_ssl= "," require ","Net HTTP  new "," puts ","ex backtrace join ","ex backtrace ","ex message ","@http finish ","Net HTTP  new  start ","Net HTTP  new  open_timeout= ","Net HTTP  new  read_timeout= ","Net HTTP  new  set_debug_output ","Net HTTP  new  key= ","Net HTTP  new  cert= ","Net HTTP  new  ca_file= ","Net HTTP  new  verify_mode= ","Net HTTP  new  use_ssl= ","Net HTTP  new  finish "]}," TrivialSoap close":{"type":"method","name":"close","children":[],"call":["@http finish "]}," TrivialSoap host":{"type":"method","name":"host","children":[],"call":["@opts [] "]}," TrivialSoap initialize":{"type":"method","name":"initialize","children":[],"call":[" restart_http ","Mutex  new ","@opts [] "," fail ","opts is_a? "," raise "]}," RbVmomi SSO generate_id":{"type":"method","name":"generate_id","children":[],"call":["SecureRandom  uuid "]}," RbVmomi SSO wsse_binary_security_token":{"type":"method","name":"wsse_binary_security_token","children":[],"call":["xml [] BinarySecurityToken ","Base64  strict_encode64 ","@certificate to_der ","xml [] "]}," RbVmomi SSO wsse_username_token":{"type":"method","name":"wsse_username_token","children":[],"call":["xml [] Password ","xml [] ","xml [] Username ","xml [] UsernameToken "]}," RbVmomi SSO wsu_timestamp":{"type":"method","name":"wsu_timestamp","children":[],"call":["xml [] Expires ","xml [] ","xml [] Created ","xml [] Timestamp ","(send\n  (lvar :datum) :+\n  (int 600)) iso8601 ","datum + ","datum iso8601 ","Time  now utc ","Time  now "]}," RbVmomi SSO ds_signed_info":{"type":"method","name":"ds_signed_info","children":[],"call":["xml [] DigestValue ","xml [] ","xml [] DigestMethod ","xml [] Transform ","xml [] Transforms ","xml [] Reference ","xml [] SignatureMethod ","xml [] CanonicalizationMethod ","xml [] SignedInfo "]}," RbVmomi SSO ds_signature":{"type":"method","name":"ds_signature","children":[],"call":["xml [] KeyInfo ","xml [] ","xml [] SignatureValue "," ds_signed_info ","xml [] Signature ","signature_id []= "]}," RbVmomi SSO load_x509":{"type":"method","name":"load_x509","children":[],"call":["@certificate sign ","OpenSSL Digest SHA512  new ","@certificate public_key= ","@private_key public_key ","@certificate serial= "," rand ","2 ** ","@certificate issuer= ","@certificate subject ","@certificate subject= ","OpenSSL X509 Name  new ","@certificate not_after= ","timestamp + ","@certificate not_before= ","OpenSSL X509 Certificate  new ","Time  now utc ","Time  now ","@certificate is_a? "," raise ","private_key ! ","OpenSSL PKey RSA  new ","@private_key is_a? ","OpenSSL X509 Certificate  new  sign ","OpenSSL X509 Certificate  new  public_key= ","OpenSSL PKey RSA  new  public_key ","OpenSSL X509 Certificate  new  serial= ","OpenSSL X509 Certificate  new  issuer= ","OpenSSL X509 Certificate  new  subject ","OpenSSL X509 Certificate  new  subject= ","OpenSSL X509 Certificate  new  not_after= ","Time  now utc  + ","OpenSSL X509 Certificate  new  not_before= ","OpenSSL X509 Certificate  new  is_a? ","OpenSSL PKey RSA  new  is_a? "]}," RbVmomi SSO sign":{"type":"method","name":"sign","children":[],"call":["doc to_xml strip ","doc to_xml ","signature_value_tag add_child ","Nokogiri XML Text  new ","doc at_xpath ","doc collect_namespaces ","Base64  strict_encode64 ","@private_key sign ","signed_info canonicalize ","OpenSSL Digest SHA512  new ","digest_tag add_child ","Digest SHA2  new digest ","data canonicalize ","Digest SHA2  new ","signature_digest_references each ","a value sub ","a value ","doc xpath map ","doc xpath ","doc at_xpath  add_child ","Base64  strict_encode64 _value_tag add_child ","doc at_xpath  canonicalize ","Base64  strict_encode64 _tag add_child ","Digest SHA2  new Base64  strict_encode64  ","Base64  strict_encode64 _digest_references each ","signature_Base64  strict_encode64 _references each "]}," RbVmomi SSO extract_assertion":{"type":"method","name":"extract_assertion","children":[],"call":["@assertion at_xpath value ","@assertion at_xpath ","sso_response at_xpath ","(send\n  (lvar :namespaces) :find) first gsub ","(send\n  (lvar :namespaces) :find) first ","uri == ","namespaces find ","sso_response collect_namespaces ","Nokogiri  XML ","sso_response is_a? ","sso_response at_xpath  at_xpath value ","sso_response at_xpath  at_xpath ","Nokogiri  XML  at_xpath ","(send\n  (lvar :sso_response collect_namespaces ) :find) first gsub ","(send\n  (lvar :sso_response collect_namespaces ) :find) first ","sso_response collect_namespaces  find ","sso_response collect_sso_response collect_namespaces  ","Nokogiri  XML  collect_namespaces ","Nokogiri  XML  is_a? "]}," RbVmomi SSO hok_token_request":{"type":"method","name":"hok_token_request","children":[],"call":[" sign ","builder doc ","xml [] UseKey ","xml [] ","xml [] Delegatable ","xml [] SignatureAlgorithm ","xml [] KeyType ","xml [] Renewing ","xml [] Expires ","xml [] Created ","xml [] Lifetime ","xml [] RequestType ","xml [] TokenType ","xml [] RequestSecurityToken ","xml [] Body ","x [] Reference ","x [] ","x [] SecurityTokenReference "," ds_signature "," wsse_binary_security_token "," wsse_username_token "," wsu_timestamp ","xml [] Security ","xml [] Header ","xml [] Envelope ","Hash  [] ","NAMESPACES  map ","Nokogiri XML Builder  new ","(send\n  (lvar :datum) :+\n  (int 1800)) iso8601 ","datum + ","datum iso8601 ","Time  now utc ","Time  now "," generate_id ","(send\n  (lvar :Time  now utc ) :+\n  (int 1800)) iso8601 ","Time  now utc  + ","Time  now utc  iso8601 "]}," RbVmomi SSO sso_call":{"type":"method","name":"sso_call","children":[],"call":["http request ","req body= ","req content_type= ","req add_field ","Net HTTP Post  new ","sso_url request_uri ","http verify_mode= ","http use_ssl= ","Net HTTP  new ","sso_url port ","sso_url host ","URI HTTPS  build ","http Net HTTP Post  new uest ","Net HTTP  new  request ","Net HTTP Post  new  body= ","Net HTTP Post  new  content_type= ","Net HTTP Post  new  add_field ","sso_url Net HTTP Post  new uest_uri ","URI HTTPS  build  request_uri ","Net HTTP  new  verify_mode= ","Net HTTP  new  use_ssl= ","URI HTTPS  build  port ","URI HTTPS  build  host "]}," RbVmomi SSO sign_request":{"type":"method","name":"sign_request","children":[],"call":["signed gsub! ","@assertion to_xml strip ","@assertion to_xml "," sign ","body []= ","body add_namespace ","NAMESPACES  [] ","body add_previous_sibling ","builder doc root ","builder doc ","request xpath each ","request xpath ","e add_namespace ","ns to_s ","NAMESPACES  each ","request at_xpath tap ","request at_xpath ","builder doc at_xpath add_previous_sibling ","Nokogiri XML Text  new ","builder doc at_xpath ","x [] KeyIdentifier ","x [] ","x [] SecurityTokenReference "," ds_signature "," wsu_timestamp ","xml [] Security ","xml [] ","xml [] Header ","Hash  [] ","NAMESPACES  map ","Nokogiri XML Builder  new ","Nokogiri  XML ","request is_a? "," generate_id "," raise "," sign  gsub! ","Nokogiri  XML  xpath each ","Nokogiri  XML  xpath ","Nokogiri  XML  at_xpath tap ","Nokogiri  XML  at_xpath ","Nokogiri  XML  is_a? "]}," RbVmomi SSO request_token":{"type":"method","name":"request_token","children":[],"call":[" extract_assertion ","req body "," raise ","resp at_xpath ","resp remove_namespaces! ","Nokogiri  XML ","req is_a? "," sso_call "," hok_token_request "," sso_call  body ","Nokogiri  XML  at_xpath ","Nokogiri  XML  remove_namespaces! "," sso_call  is_a? "," hok_token_ sso_call uest "]}," RbVmomi SSO initialize":{"type":"method","name":"initialize","children":[],"call":[" load_x509 ","opts [] ","opts fetch "]}," RbVmomi SMS pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text ","@opts [] "]}," RbVmomi SMS serviceInstance":{"type":"method","name":"serviceInstance","children":[],"call":["VIM  SmsServiceInstance "]}," RbVmomi SMS rev=":{"type":"method","name":"rev=","children":[],"call":[]}," RbVmomi SMS vcSessionCookie=":{"type":"method","name":"vcSessionCookie=","children":[],"call":[]}," RbVmomi SMS connect":{"type":"method","name":"connect","children":[],"call":[]}," SmsStorageManager RegisterProvider_Task2":{"type":"method","name":"RegisterProvider_Task2","children":[],"call":[" RegisterProvider_Task "]}," RbVmomi PBM pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text ","@opts [] "]}," RbVmomi PBM serviceContent":{"type":"method","name":"serviceContent","children":[],"call":[" serviceInstance PbmRetrieveServiceContent "," serviceInstance "]}," RbVmomi PBM serviceInstance":{"type":"method","name":"serviceInstance","children":[],"call":["VIM  PbmServiceInstance "]}," RbVmomi PBM rev=":{"type":"method","name":"rev=","children":[],"call":[]}," RbVmomi PBM vcSessionCookie=":{"type":"method","name":"vcSessionCookie=","children":[],"call":[]}," RbVmomi PBM connect":{"type":"method","name":"connect","children":[],"call":[]}," Optimist Parser rbvmomi_datastore_opt":{"type":"method","name":"rbvmomi_datastore_opt","children":[],"call":[" opt ","ENV  [] "]}," Optimist Parser rbvmomi_computer_opt":{"type":"method","name":"rbvmomi_computer_opt","children":[],"call":[" opt ","ENV  [] "]}," Optimist Parser rbvmomi_folder_opt":{"type":"method","name":"rbvmomi_folder_opt","children":[],"call":[" opt ","ENV  [] "]}," Optimist Parser rbvmomi_datacenter_opt":{"type":"method","name":"rbvmomi_datacenter_opt","children":[],"call":[" opt ","ENV  [] "]}," Optimist Parser rbvmomi_connection_opts":{"type":"method","name":"rbvmomi_connection_opts","children":[],"call":[" opt ","ENV  [] ","ENV  [] == ","ENV  [] to_i ","ENV  member? "]}," RbVmomi Fault method_missing":{"type":"method","name":"method_missing","children":[],"call":["@fault send "]}," RbVmomi Fault initialize":{"type":"method","name":"initialize","children":[],"call":["fault class wsdl_name ","fault class "]}," RbVmomi OldDeserializer demangle_array_type":{"type":"method","name":"demangle_array_type","children":[],"call":["x downcase "]}," RbVmomi OldDeserializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" raise ","$stderr puts ","xml to_s ","xml name ","$! class "," fail ","t ancestors * ","t ancestors ","t inspect ","t == ","xml text unpack [] ","xml text unpack ","xml text ","xml text == ","Time  parse ","t <= ","xml text to_f ","xml text to_i ","xml text to_sym ","h [] ","h []= ","c text ","c name ","c element? ","xml children each ","xml children ","@conn type new ","@conn type ","t wsdl_name ","xml [] ","t new ","h [] << ","h [] is_a? "," deserialize ","d [] ","t find_prop_desc ","field to_s ","c name to_sym ","d [] to_sym ","(send\n  (lvar :props_desc) :select) each ","props_desc select ","t full_props_desc ","xml children select map ","xml children select "," demangle_array_type ","typename =~ ","(or\n  (lvar :type_attr)\n  (lvar :typename)) to_s ","xml attribute_with_ns ","a namespace prefix == ","a namespace prefix ","a namespace ","a name == ","a name ","xml attribute_nodes find ","xml attribute_nodes ","RbVmomi  logger error ","RbVmomi  logger ","$stt find_prop_desc err puts ","$s@conn type derr pu@conn type s ","xml t deserialize _s ","xml @conn type o_s ","t ancest deserialize rs * ","@conn type  ances@conn type ors * ","t ancest deserialize rs ","@conn type  ances@conn type ors ","@conn type  inspec@conn type  ","@conn type  == ","xml @conn type ex@conn type  unpack [] ","xml @conn type ex@conn type  unpack ","xml @conn type ex@conn type  ","xml @conn type ex@conn type  == ","@conn type  <= ","xml text t deserialize _f ","xml @conn type ex@conn type  @conn type o_f ","xml text t deserialize _i ","xml @conn type ex@conn type  @conn type o_i ","xml text t deserialize _sym ","xml @conn type ex@conn type  @conn type o_sym ","c @conn type ex@conn type  ","c elemen@conn type ? ","xml chilt find_prop_desc ren each ","xml chilt find_prop_desc ren ","@c deserialize nn type new ","@conn @conn type ype new ","@c deserialize nn type ","@conn @conn type ype ","t wst find_prop_desc l_name ","@conn type  wsdl_name ","@conn type  new "," t find_prop_desc eserialize ","t find_prop_desc  [] ","t find_pr deserialize p_desc ","t fint find_prop_desc _prop_t find_prop_desc esc ","@conn type  find_prop_desc ","field t deserialize _s ","fielt find_prop_desc  to_s ","c name to_sym  to_s ","field @conn type o_s ","c name t deserialize _sym ","c name @conn type o_sym ","d [] t deserialize _sym ","t find_prop_desc  [] to_sym ","d [] @conn type o_sym ","(send\n  (lvar :pr deserialize ps_desc) :select) each ","(sent find_prop_desc \n  (lvar :props_t find_prop_desc esc) :select) each ","(send\n  (lvar :t full_props_desc ) :select) each ","(send\n  (lvar :props_desc) :selec@conn type ) each ","pr deserialize ps_desc select ","props_t find_prop_desc esc select ","t full_props_desc  select ","props_desc selec@conn type  ","t full_pr deserialize ps_desc ","t full_props_t find_prop_desc esc ","t full_t full_props_desc  ","@conn type  full_props_desc ","xml chilt find_prop_desc ren select map ","xml children selec@conn type  map ","xml chilt find_prop_desc ren select ","xml children selec@conn type  "," t find_prop_desc emangle_array_type "," demangle_array_@conn type ype ","@conn type ypename =~ "," demangle_array_type  =~ ","(or\n  (lvar :type_attr)\n  (lvar :typename)) to_s  =~ ","( deserialize r\n  (lvar :type_attr)\n  (lvar :typename)) t deserialize _s ","(or\n  (lvar :@conn type ype_a@conn type @conn type r)\n  (lvar :@conn type ypename)) @conn type o_s ","(or\n  (lvar :type_attr)\n  (lvar : demangle_array_type )) to_s ","(or\n  (lvar :type_attr)\n  (lvar :(or\n  (lvar :type_attr)\n  (lvar :typename)) to_s )) to_s ","(or\n  (lvar :xml attribute_with_ns )\n  (lvar :typename)) to_s ","xml a@conn type @conn type ribu@conn type e_wi@conn type h_ns ","xml attribute_n deserialize des find ","xml attribute_not find_prop_desc es fint find_prop_desc  ","xml a@conn type @conn type ribu@conn type e_nodes find ","xml attribute_n deserialize des ","xml attribute_not find_prop_desc es ","xml a@conn type @conn type ribu@conn type e_nodes ","RbVm deserialize mi  l deserialize gger err deserialize r ","RbVm deserialize mi  l deserialize gger "]}," RbVmomi OldDeserializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi NewDeserializer leaf_keyvalue":{"type":"method","name":"leaf_keyvalue","children":[],"call":["h [] ","h []= ","child content ","child name ","child element? ","node children each ","node children "]}," RbVmomi NewDeserializer leaf_binary":{"type":"method","name":"leaf_binary","children":[],"call":["node content unpack [] ","node content unpack ","node content "]}," RbVmomi NewDeserializer leaf_date":{"type":"method","name":"leaf_date","children":[],"call":["Time  parse ","node content "]}," RbVmomi NewDeserializer leaf_managed":{"type":"method","name":"leaf_managed","children":[],"call":["klass new ","node content ","@loader get ","node [] ","@loader get  new "]}," RbVmomi NewDeserializer traverse_data":{"type":"method","name":"traverse_data","children":[],"call":["props []= "," deserialize ","name to_sym ","child name == ","child name ","children [] ","a << ","desc [] ","klass full_props_set member? ! ","klass full_props_set member? ","klass full_props_set ","klass full_props_desc each ","klass full_props_desc ","node children select ","node children ","obj props ","klass new ","obj props  []= ","desc []  to_sym ","children []  name == ","child desc []  == ","children []  name ","child desc []  ","children [] ren [] ","node children select  [] ","klass full_obj props _set member? ! ","klass full_obj props _set member? ","klass full_obj props _set ","klass full_obj props _desc each ","klass full_obj props _desc ","node children [] ren select ","node node children select  select ","node children [] ren ","node node children select  ","obj obj props  ","klass new  props "]}," RbVmomi NewDeserializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" fail "," leaf_managed ","node content "," traverse_data ","klass kind ","@loader get ","type split [] ","type split ","type =~ "," deserialize ","node children select map ","node children select ","node children ","DEMANGLED_ARRAY_TYPES  [] "," leaf_keyvalue "," leaf_binary "," leaf_date ","node content to_f ","node content to_i ","node content == ","BUILTIN_TYPE_ACTIONS  [] ","node attributes [] value ","node attributes [] ","node attributes ","type_attr ! ","node [] "," raise "," leaf_opaque ","@loader get  kind ","type split []  split [] ","type split []  split ","type split []  =~ ","type split [] _attr ! ","node attributes [] value  ! ","node []  ! "]}," RbVmomi NewDeserializer initialize":{"type":"method","name":"initialize","children":[],"call":["conn class loader ","conn class "]}," RbVmomi Connection load_vmodl":{"type":"method","name":"load_vmodl","children":[],"call":[]}," RbVmomi Connection method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," RbVmomi Connection const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RbVmomi Connection loader":{"type":"method","name":"loader","children":[],"call":[]}," RbVmomi Connection reload_extensions":{"type":"method","name":"reload_extensions","children":[],"call":[]}," RbVmomi Connection add_extension_dir":{"type":"method","name":"add_extension_dir","children":[],"call":[]}," RbVmomi Connection extension_dirs":{"type":"method","name":"extension_dirs","children":[],"call":[]}," RbVmomi Connection instanceUuid":{"type":"method","name":"instanceUuid","children":[],"call":[]}," RbVmomi Connection type":{"type":"method","name":"type","children":[],"call":[" class type "," class "]}," RbVmomi Connection obj2xml":{"type":"method","name":"obj2xml","children":[],"call":[" raise ","PP  pp ","$stderr puts ","$! class "," fail ","o class ","xml tag! ","o to_s ","attrs []= ","o iso8601 ","expected == ","o strftime ","(lvar :o) pack chomp gsub ","(lvar :o) pack chomp ","(lvar :o) pack ","expected wsdl_name ","(const\n  (const nil :BasicTypes) :Boolean) member? "," obj2xml ","expected new ","expected <= ","o to_a ","o value to_s ","o value ","desc [] ","v nil? ","o props [] ","desc [] to_sym ","o props ","o props member? ","o class full_props_desc each ","o class full_props_desc ","attrs merge ","o class wsdl_name ","name inspect ","expected == ! ","expected >= ! ","expected >= ","o _ref ","o each ","o [] to_s ","o [] ","is_array ! ","expected != ","o is_a? ","(or\n  (send\n    (lvar :o) :is_a?\n    (const nil :Array))\n  (begin\n    (and\n      (send\n        (lvar :o) :is_a?\n        (const nil :Hash))\n      (send\n        (lvar :expected) :==\n        (const\n          (const nil :BasicTypes) :KeyValue))))) ! "," type ","RbVmomi  logger error ","o pretty_inspect ","RbVmomi  logger "," type  == ","(lo props [] ar :o) pack chomp gsub ","(lo props [] ar :o) pack chomp ","(lo props [] ar :o) pack "," type  wsdl_name "," type  new "," type  <= ","o o props [] alue to_s ","o o props [] alue ","o props []  nil? "," type  == ! "," type  >= ! "," type  >= "," type  != ","(or\n  (send\n    (lo props [] ar :o) :is_a?\n    (const nil :Array))\n  (begin\n    (and\n      (send\n        (lo props [] ar :o) :is_a?\n        (const nil :Hash))\n      (send\n        (lo props [] ar :expected) :==\n        (const\n          (const nil :BasicTypes) :KeyValue))))) ! ","(or\n  (send\n    (lvar :o) :is_a?\n    (const nil :Array))\n  (begin\n    (and\n      (send\n        (lvar :o) :is_a?\n        (const nil :Hash))\n      (send\n        (lvar : type ) :==\n        (const\n          (const nil :BasicTypes) :KeyValue))))) ! "]}," RbVmomi Connection call":{"type":"method","name":"call","children":[],"call":["@profile_summary [] ","profile_info [] ","@profile [] << ","@profile [] ","body length "," caller ","t4 - ","t2 - ","t3 - ","Time  now "," parse_response ","desc [] "," request ","(send nil :soap_envelope) target! "," emit_request "," soap_envelope "," fail ","desc is_a? ","params is_a? ","this is_a? "," raise ","(send nil :soap_envelope) target!  length ","Time  now  - "]}," RbVmomi Connection parse_response":{"type":"method","name":"parse_response","children":[],"call":["returnvals first ","desc [] ! ","desc [] ","@deserializer deserialize ","resp children select map ","resp children select ","resp children "," fail ","resp at text ","resp at "," raise ","RbVmomi Fault  new ","detail children first ","detail children ","resp at  children first ","resp at  children "]}," RbVmomi Connection emit_request":{"type":"method","name":"emit_request","children":[],"call":[" fail ","d [] "," obj2xml ","v == ! ","v == ","params [] ","k to_sym ","params member? ","params member? ! ","descs each ","xml tag! "," raise ","params []  == ! ","params []  == ","k to_sym  to_sym ","d []  to_sym "]}," RbVmomi Connection reset_profiling":{"type":"method","name":"reset_profiling","children":[],"call":[]}," RbVmomi Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_profiling ","Deserializer  new "," fail ","opts [] "," raise "]}," RbVmomi BasicTypes KeyValue []":{"type":"method","name":"[]","children":[],"call":[" fail ","i inspect ","i == "," raise "]}," RbVmomi BasicTypes KeyValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi BasicTypes KeyValue wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes Int to_s":{"type":"method","name":"to_s","children":[],"call":["@val to_s "]}," RbVmomi BasicTypes Int initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi BasicTypes Int wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes Float wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes Integer wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes String wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes Class wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[" class name "," class "]}," RbVmomi BasicTypes Binary wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes AnyType wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes Boolean wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes ManagedObjectReference wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes TypeName wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes PropertyPath wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes MethodName wsdl_name":{"type":"method","name":"wsdl_name","children":[],"call":[]}," RbVmomi BasicTypes LocalizedMethodFault exception":{"type":"method","name":"exception","children":[],"call":["RbVmomi Fault  new "," fault "," localizedMessage "]}," RbVmomi BasicTypes MethodFault ===":{"type":"method","name":"===","children":[],"call":[]}," RbVmomi BasicTypes Enum initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi BasicTypes Enum kind":{"type":"method","name":"kind","children":[],"call":[]}," RbVmomi BasicTypes Enum init":{"type":"method","name":"init","children":[],"call":[]}," RbVmomi BasicTypes ManagedObject hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," class "]}," RbVmomi BasicTypes ManagedObject ==":{"type":"method","name":"==","children":[],"call":["x _connection instanceUuid == "," _connection instanceUuid "," _connection ","x _connection instanceUuid ","x _connection ","x _connection host ","x _ref == ","x _ref ","x class == "," class ","x class "]}," RbVmomi BasicTypes ManagedObject []":{"type":"method","name":"[]","children":[],"call":[" _get_property "]}," RbVmomi BasicTypes ManagedObject pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text "," to_s "]}," RbVmomi BasicTypes ManagedObject to_s":{"type":"method","name":"to_s","children":[],"call":["@ref inspect "," class wsdl_name "," class "]}," RbVmomi BasicTypes ManagedObject _call":{"type":"method","name":"_call","children":[],"call":["@connection call "," fail "," class full_methods_desc [] ","method to_s "," class full_methods_desc "," class ","o is_a? "," raise "," class full_methods_ class full_methods_desc []  [] "," class full_methods_ class full_methods_desc []  "]}," RbVmomi BasicTypes ManagedObject _set_property":{"type":"method","name":"_set_property","children":[],"call":[" fail "," raise "]}," RbVmomi BasicTypes ManagedObject _get_property":{"type":"method","name":"_get_property","children":[],"call":["ret propSet [] val ","ret propSet [] ","ret propSet "," raise ","ret missingSet [] fault ","ret missingSet [] ","ret missingSet ","ret missingSet empty? ","ret propSet empty? ","ret ! ","@connection propertyCollector RetrieveProperties [] ","@connection propertyCollector RetrieveProperties ","sym to_s "," class wsdl_name "," class ","@connection propertyCollector ","@connection propertyCollector RetrieveProperties []  propSet [] val ","@connection propertyCollector RetrieveProperties []  propSet [] ","@connection propertyCollector RetrieveProperties []  propSet ","@connection propertyCollector RetrieveProperties []  missingSet [] fault ","@connection propertyCollector RetrieveProperties []  missingSet [] ","@connection propertyCollector RetrieveProperties []  missingSet ","@connection propertyCollector RetrieveProperties []  missingSet empty? ","@connection propertyCollector RetrieveProperties []  propSet empty? ","@connection propertyCollector RetrieveProperties []  ! "]}," RbVmomi BasicTypes ManagedObject _ref":{"type":"method","name":"_ref","children":[],"call":[]}," RbVmomi BasicTypes ManagedObject _connection":{"type":"method","name":"_connection","children":[],"call":[]}," RbVmomi BasicTypes ManagedObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RbVmomi BasicTypes ManagedObject kind":{"type":"method","name":"kind","children":[],"call":[]}," RbVmomi BasicTypes DataObject to_json":{"type":"method","name":"to_json","children":[],"call":["m to_json ","h merge "," class name "," class ","JSON  create_id "," props "," to_hash merge to_json "," to_hash merge "," to_hash ","h merge  to_json ","h h merge erge "," props  merge "," class nah merge e "," to_hash h merge erge to_json "," to_ props as props  merge to_json "," to_hash h merge erge "," to_ props as props  merge "," to_ props as props  "]}," RbVmomi BasicTypes DataObject pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","q breakable ","q pp ","k to_s ","q group ","q seplist ","@props sort_by "," class wsdl_name "," class "]}," RbVmomi BasicTypes DataObject hash":{"type":"method","name":"hash","children":[],"call":[" props hash "," props "]}," RbVmomi BasicTypes DataObject ==":{"type":"method","name":"==","children":[],"call":[" props [] == ","o props [] ","o props "," props [] "," props ","keys all? ","(send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq "," props keys + ","o props keys "," props keys ","o class == "," class ","o class "," hash == ","o hash "," hash ","(send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq  all? ","(send\n  (send\n    (send nil :props) :(send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq ) :+\n  (send\n    (send\n      (lvar :o) :props) :(send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq )) uniq "," props (send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq  + ","o props (send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq  "," props (send\n  (send\n    (send nil :props) :keys) :+\n  (send\n    (send\n      (lvar :o) :props) :keys)) uniq  "]}," RbVmomi BasicTypes DataObject []=":{"type":"method","name":"[]=","children":[],"call":[" _set_property "]}," RbVmomi BasicTypes DataObject _set_property":{"type":"method","name":"_set_property","children":[],"call":["@props []= "]}," RbVmomi BasicTypes DataObject []":{"type":"method","name":"[]","children":[],"call":[" _get_property "]}," RbVmomi BasicTypes DataObject _get_property":{"type":"method","name":"_get_property","children":[],"call":["@props [] "]}," RbVmomi BasicTypes DataObject initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@props dup ","@props dup  dup "]}," RbVmomi BasicTypes DataObject initialize":{"type":"method","name":"initialize","children":[],"call":[" fail "," class find_prop_desc "," class ","@props each ","Hash  [] ","k to_sym ","props map ","props == "," raise ","Hash  []  each "]}," RbVmomi BasicTypes DataObject kind":{"type":"method","name":"kind","children":[],"call":[]}," RbVmomi BasicTypes ObjectWithMethods full_methods_desc":{"type":"method","name":"full_methods_desc","children":[],"call":["(if\n  (send\n    (self) :==\n    (const nil :ObjectWithMethods))\n  (hash)\n  (send\n    (send nil :superclass) :full_methods_desc)) merge "," methods_desc "," superclass full_methods_desc "," superclass "," == "]}," RbVmomi BasicTypes ObjectWithMethods init":{"type":"method","name":"init","children":[],"call":[" _call "," define_method ","k to_sym ","@methods_desc each ","k to_k to_sym  "]}," RbVmomi BasicTypes ObjectWithProperties _set_property":{"type":"method","name":"_set_property","children":[],"call":[" fail "," raise "]}," RbVmomi BasicTypes ObjectWithProperties _get_property":{"type":"method","name":"_get_property","children":[],"call":[" fail "," raise "]}," RbVmomi BasicTypes ObjectWithProperties find_prop_desc":{"type":"method","name":"find_prop_desc","children":[],"call":["x [] == ","name to_s ","x [] "," full_props_desc find "," full_props_desc "]}," RbVmomi BasicTypes ObjectWithProperties full_props_desc":{"type":"method","name":"full_props_desc","children":[],"call":["(if\n  (send\n    (self) :==\n    (const nil :ObjectWithProperties))\n  (array)\n  (send\n    (send nil :superclass) :full_props_desc)) + "," props_desc "," superclass full_props_desc "," superclass "," == "]}," RbVmomi BasicTypes ObjectWithProperties full_props_set":{"type":"method","name":"full_props_set","children":[],"call":["Set  new ","x [] "," full_props_desc map "," full_props_desc "]}," RbVmomi BasicTypes ObjectWithProperties init":{"type":"method","name":"init","children":[],"call":[" _set_property "," define_method "," _get_property ","d [] to_sym ","d [] ","@props_desc each ","d [] to_d [] to_sym  "]}," RbVmomi BasicTypes Base to_s":{"type":"method","name":"to_s","children":[],"call":[]}," RbVmomi BasicTypes Base init":{"type":"method","name":"init","children":[],"call":[]}," RbVmomi BasicTypes Enum to_hash":{"type":"method","name":"to_hash","children":[],"call":[" value "]}," RbVmomi BasicTypes ManagedObject to_hash":{"type":"method","name":"to_hash","children":[],"call":[" to_s "]}," RbVmomi BasicTypes DataObject to_hash":{"type":"method","name":"to_hash","children":[],"call":[" as_hash "," props transform_values "," props "]}," RbVmomi BasicTypes DataObject as_hash":{"type":"method","name":"as_hash","children":[],"call":["val to_hash ","val respond_to? "," as_hash ","val map ","val kind_of? "]}," VmodlHelper wsdl_constantize":{"type":"method","name":"wsdl_constantize","children":[],"call":["(str \"RbVmomi::VIM::\") safe_constantize ","(str \"RbVmomi::BasicTypes::\") safe_constantize ","type safe_constantize ","type camelcase ","type == ","(str \"long\") include? ","type split last ","type split ","(begin\n  (send nil :wsdl_to_rbvmomi_namespace\n    (ivar :@wsdl))) safe_constantize "," wsdl_to_rbvmomi_namespace ","type camelcase  safe_constantize ","type split last  safe_constantize ","type camelcase  camelcase ","type split last  camelcase ","type camelcase  == ","type split last  == ","type camelcase  split last ","type split last  split last ","type camelcase  split ","type split last  split "]}," VmodlHelper wsdl_to_rbvmomi_namespace":{"type":"method","name":"wsdl_to_rbvmomi_namespace","children":[],"call":[" raise ","type targetnamespace "]}," VmodlHelper wsdl_to_vmodl_type":{"type":"method","name":"wsdl_to_vmodl_type","children":[],"call":[" raise ","type source ","type name ","type name == "]}," VmodlHelper wsdl_types_by_name":{"type":"method","name":"wsdl_types_by_name","children":[],"call":["type name name ","type name ","(send\n  (send\n    (ivar :@wsdl) :collect_complextypes) :reject) index_by ","type name name match? ","@wsdl collect_complextypes reject ","@wsdl collect_complextypes "]}," VmodlHelper dump_vmodl!":{"type":"method","name":"dump_vmodl!","children":[],"call":["File  write ","Marshal  dump "]}," VmodlHelper load_vmodl":{"type":"method","name":"load_vmodl","children":[],"call":["Marshal  load ","path read "]}," VmodlHelper load_wsdl":{"type":"method","name":"load_wsdl","children":[],"call":["WSDL Parser  new parse ","path read ","WSDL Parser  new ","Dir  chdir ","path dirname "]}," VmodlHelper generate!":{"type":"method","name":"generate!","children":[],"call":[" dump_vmodl! ","vmodl_prop []= ","wsdl_klass wsdl_name ","vmodl_klass <= "," wsdl_constantize ","wsdl_prop type source ","wsdl_prop type ","vmodl_prop [] ","wsdl_prop nil? ","elements_by_name [] ","vmodl_data [] each ","vmodl_data [] ","e name name ","e name ","type elements index_by ","type elements ","@vmodl [] ","type name name ","type name "," wsdl_types_by_name each_value "," wsdl_types_by_name "," wsdl_to_rbvmomi_namespace loader add_types "," wsdl_to_rbvmomi_namespace loader "," wsdl_to_rbvmomi_namespace "," puts ","@vmodl [] [] << ","@vmodl [] [] ","@vmodl []= ","type complexcontent extension base name ","type complexcontent extension base ","type complexcontent extension ","type complexcontent "," wsdl_to_vmodl_type ","element type ","element maxoccurs != ","element maxoccurs ","element minoccurs == ","element minoccurs ","element name name ","element name ","properties map ","inherited_properties include? ","type elements reject ","base_class elements map ","base_class elements "," wsdl_types_by_name [] ","vmodl_data nil? "," run! "," wsdl_classes_by_name each_value "," wsdl_classes_by_name ","vmodl_data []= ","enum restriction enumeration ","enum restriction "," build_wsdl_enum ","enum name name ","enum name "," wsdl_enums_by_name each_value "," wsdl_enums_by_name "," extra_props_for_type "," build_vmodl_property ","props_by_name [] "," wsdl_properties map "," wsdl_properties ","prop [] ","vmodl_data [] index_by "," build_wsdl_class! "," wsdl_constantize  wsdl_name "," wsdl_constantize  <= ","elements_by_name []  type source ","elements_by_name []  type ","elements_by_name []  nil? ","@vmodl []  [] each ","@vmodl []  [] "," wsdl_types_by_name []  elements map "," wsdl_types_by_name []  elements ","@vmodl []  nil? ","@vmodl []  []= "," elements_by_name [] erties map "," elements_by_name [] erties ","@vmodl []  [] index_by "]}," VmodlHelper verify!":{"type":"method","name":"verify!","children":[],"call":[" puts ","vmodl_klass wsdl_name ","wsdl_klass wsdl_name ","vmodl_prop [] ","vmodl_klass <= "," wsdl_constantize ","wsdl_prop type source ","wsdl_prop type ","wsdl_prop nil? ","elements_by_name [] ","vmodl_data [] each ","vmodl_data [] ","e name name ","e name ","type elements index_by ","type elements ","vmodl_data nil? ","@vmodl [] ","type name name ","type name "," wsdl_types_by_name each_value "," wsdl_types_by_name "," run! ","enum name name ","enum name "," wsdl_enums_by_name each_value "," wsdl_enums_by_name "," wsdl_classes_by_name each_value "," wsdl_classes_by_name "," wsdl_constantize  wsdl_name "," wsdl_constantize  <= ","elements_by_name []  type source ","elements_by_name []  type ","elements_by_name []  nil? ","@vmodl []  [] each ","@vmodl []  [] ","@vmodl []  nil? "]}," VmodlHelper initialize":{"type":"method","name":"initialize","children":[],"call":[" load_wsdl "," load_vmodl ","Pathname  new "]}," VmodlHelper options":{"type":"method","name":"options","children":[],"call":[" banner "," opt "," educate_on_error ","Optimist  options ","ARGV  slice_after to_a last ","ARGV  slice_after to_a ","ARGV  slice_after "]}," VmodlHelper run!":{"type":"method","name":"run!","children":[],"call":[" new send "," new "," options values_at "," options "]}," RbVmomi logger":{"type":"method","name":"logger","children":[],"call":[]}," VmodlHelper wsdl_enums_by_name":{"type":"method","name":"wsdl_enums_by_name","children":[],"call":["type name name ","type name ","@wsdl collect_simpletypes index_by ","@wsdl collect_simpletypes "]}," VmodlHelper wsdl_classes_by_name":{"type":"method","name":"wsdl_classes_by_name","children":[],"call":["type name name ","type name ","(send\n  (send\n    (ivar :@wsdl) :collect_complextypes) :reject) index_by ","type name name match? ","@wsdl collect_complextypes reject ","@wsdl collect_complextypes "]}," VmodlHelper extra_props_for_type":{"type":"method","name":"extra_props_for_type","children":[],"call":["@extra_props_for_type [] "]}," VmodlHelper wsdl_properties":{"type":"method","name":"wsdl_properties","children":[],"call":["type elements ","inherited_properties include? ","e name name ","e name ","type elements reject ","element name name ","element name ","base_class elements map ","base_class elements "," wsdl_classes_by_name [] ","type complexcontent "," wsdl_classes_by_name "," wsdl_classes_by_name []  elements map "," wsdl_classes_by_name []  elements "]}," VmodlHelper build_vmodl_property":{"type":"method","name":"build_vmodl_property","children":[],"call":[" wsdl_to_vmodl_type ","element type ","element maxoccurs != ","element maxoccurs ","element minoccurs == ","element minoccurs ","element name name ","element name "]}," VmodlHelper build_wsdl_enum":{"type":"method","name":"build_wsdl_enum","children":[],"call":[" wsdl_to_rbvmomi_namespace loader add_types "," wsdl_to_rbvmomi_namespace loader "," wsdl_to_rbvmomi_namespace ","@vmodl [] [] << ","@vmodl [] [] ","@vmodl [] ","@vmodl []= "," puts ","enum name name ","enum name "]}," VmodlHelper build_wsdl_class!":{"type":"method","name":"build_wsdl_class!","children":[],"call":[" wsdl_to_rbvmomi_namespace loader add_types "," wsdl_to_rbvmomi_namespace loader "," wsdl_to_rbvmomi_namespace ","@vmodl [] [] << ","@vmodl [] [] ","@vmodl [] ","@vmodl []= ","type complexcontent extension base name ","type complexcontent extension base ","type complexcontent extension ","type complexcontent "," puts ","type name name ","type name "]}," RbVmomi TypeLoader make_opaque_type":{"type":"method","name":"make_opaque_type","children":[],"call":["klass wsdl_name= ","desc [] ","klass init ","Class  new tap ","Class  new "]}," RbVmomi NewDeserializer leaf_opaque":{"type":"method","name":"leaf_opaque","children":[],"call":["klass new ","node content "]}," RbVmomi BasicTypes OpaqueObject kind":{"type":"method","name":"kind","children":[],"call":[]}," RbVmomi BasicTypes ObjectWithRefAndConnection hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," class "]}," RbVmomi BasicTypes ObjectWithRefAndConnection ==":{"type":"method","name":"==","children":[],"call":["x _connection instanceUuid == "," _connection instanceUuid "," _connection ","x _connection instanceUuid ","x _connection ","x _connection host ","x _ref == ","x _ref ","x class == "," class ","x class ","x hash == "," hash ","x hash "]}," RbVmomi BasicTypes ObjectWithRefAndConnection pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text "," to_s "]}," RbVmomi BasicTypes ObjectWithRefAndConnection to_hash":{"type":"method","name":"to_hash","children":[],"call":[" to_s "]}," RbVmomi BasicTypes ObjectWithRefAndConnection to_s":{"type":"method","name":"to_s","children":[],"call":["@ref inspect "," class wsdl_name "," class "]}," RbVmomi BasicTypes ObjectWithRefAndConnection _ref":{"type":"method","name":"_ref","children":[],"call":[]}," RbVmomi BasicTypes ObjectWithRefAndConnection _connection":{"type":"method","name":"_connection","children":[],"call":[]}," RbVmomi BasicTypes ObjectWithRefAndConnection initialize":{"type":"method","name":"initialize","children":[],"call":[]}}