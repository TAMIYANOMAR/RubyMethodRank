{" Proc bind":{"type":"method","name":"bind","children":[],"call":["(send\n  (begin\n    (sclass\n      (lvar :object)\n      (self))) :class_eval) bind "," remove_method "," instance_method "," define_method ","time usec ","time to_i ","(sclass\n  (lvar :object)\n  (self)) class_eval ","Time  now "," remove_ instance_method  "," instance_ instance_method  "," define_ instance_method  "]}," ThoughtBot Shoulda Private model_class":{"type":"method","name":"model_class","children":[],"call":[" name gsub constantize "," name gsub "," name "]}," ThoughtBot Shoulda Private get_options!":{"type":"method","name":"get_options!","children":[],"call":[" raise ","opts keys join ","opts keys ","opts keys empty? ","ret << ","opts delete ","wanted each ","args pop ","args last is_a? ","args last "]}," ThoughtBot Shoulda Macros should_not_change":{"type":"method","name":"should_not_change","children":[],"call":[" assert_equal ","expression inspect ","expression_eval bind call ","expression_eval bind "," should "," lambda "," eval "]}," ThoughtBot Shoulda Macros should_change":{"type":"method","name":"should_change","children":[],"call":[" assert_equal ","old_value + "," assert_operator ","to inspect ","expression inspect "," assert_not_equal ","by == ","from inspect ","expression_eval bind call ","expression_eval bind "," should "," lambda "," eval ","stmt << ","by inspect "," get_options! "]}," ThoughtBot Shoulda Helpers report!":{"type":"method","name":"report!","children":[],"call":[" puts "," caller first "," caller "]}," ThoughtBot Shoulda Controller ResourceOptions ensure_valid_members":{"type":"method","name":"ensure_valid_members","children":[],"call":[" raise ","invalid inspect ","invalid empty? ","ary - ","ary -  inspect ","ary -  empty? "]}," ThoughtBot Shoulda Controller ResourceOptions normalize!":{"type":"method","name":"normalize!","children":[],"call":["@denied redirect ","@update redirect ","@create redirect ","(block\n  (send\n    (ivar :@parent) :map)\n  (args\n    (arg :n))\n  (dstr\n    (str \"@\")\n    (begin\n      (send nil :object))\n    (str \".\")\n    (begin\n      (lvar :n)))) flatten join ","(block\n  (send\n    (ivar :@parent) :map)\n  (args\n    (arg :n))\n  (dstr\n    (str \"@\")\n    (begin\n      (send nil :object))\n    (str \".\")\n    (begin\n      (lvar :n)))) flatten "," object ","@parent map ","(ivar :@parent) flatten join ","(ivar :@parent) flatten ","@destroy redirect ","(send\n  (ivar :@parent) :map) join ","@object to_s pluralize ","@object to_s ","@parent is_a? ","@klass name tableize singularize ","@klass name tableize ","@klass name ","target name gsub singularize constantize ","target name gsub singularize ","target name gsub ","target name "," ensure_valid_members ","@denied actions ","@formats map ","@actions map ","@denied actions= ","@denied actions map ","@formats == ","@actions == ","@denied actions == ","@formats map  map ","@actions map  map ","@formats map  == ","@actions map  == "]}," ThoughtBot Shoulda Controller ResourceOptions initialize":{"type":"method","name":"initialize","children":[],"call":["@denied actions= ","@update params ","@create params ","@denied flash ","@destroy flash ","@update flash ","@create flash ","DeniedOptions  new ","ActionOptions  new ","DeniedOptions  new  actions= ","ActionOptions  new  params ","DeniedOptions  new  flash ","ActionOptions  new  flash "]}," ThoughtBot Shoulda Controller Macros should_route":{"type":"method","name":"should_route","children":[],"call":[" assert_routing "," should ","options inspect ","method to_s upcase ","method to_s ","populated_path gsub! ","value to_s ","key inspect ","options []= ","value to_param ","value respond_to? ","options each ","path dup ","options [] to_s ","options [] "," name gsub tableize "," name gsub "," name ","path dup  gsub! "]}," ThoughtBot Shoulda Controller Macros should_render_a_form":{"type":"method","name":"should_render_a_form","children":[],"call":[" assert_select "," should "]}," ThoughtBot Shoulda Controller Macros should_redirect_to":{"type":"method","name":"should_redirect_to","children":[],"call":[" assert_redirected_to "," eval "," send "," instantiate_variables_from_assigns "," should ","url inspect "]}," ThoughtBot Shoulda Controller Macros should_render_without_layout":{"type":"method","name":"should_render_without_layout","children":[],"call":[" should_render_with_layout "]}," ThoughtBot Shoulda Controller Macros should_render_with_layout":{"type":"method","name":"should_render_with_layout","children":[],"call":[" assert_nil ","@response layout "," should "," assert_equal ","@response layout split last ","@response layout split ","@response layout blank? ","expected_layout to_s ","expected_layout inspect "]}," ThoughtBot Shoulda Controller Macros should_render_template":{"type":"method","name":"should_render_template","children":[],"call":[" assert_template ","template to_s "," should ","template inspect "]}," ThoughtBot Shoulda Controller Macros should_return_from_session":{"type":"method","name":"should_return_from_session","children":[],"call":[" assert_equal "," session [] "," session ","expected_value inspect "," eval "," send "," instantiate_variables_from_assigns "," should "," eval  inspect "]}," ThoughtBot Shoulda Controller Macros should_respond_with_content_type":{"type":"method","name":"should_respond_with_content_type","children":[],"call":[" assert_equal ","@response content_type "," assert_match ","content_type is_a? ","Mime EXTENSION_LOOKUP  [] to_s ","Mime EXTENSION_LOOKUP  [] ","content_type to_s "," should ","@response Mime EXTENSION_LOOKUP  [] to_s  ","Mime EXTENSION_LOOKUP  [] to_s  is_a? ","Mime EXTENSION_LOOKUP  [] to_s  to_s "]}," ThoughtBot Shoulda Controller Macros should_respond_with":{"type":"method","name":"should_respond_with","children":[],"call":[" assert_response "," should "]}," ThoughtBot Shoulda Controller Macros should_not_assign_to":{"type":"method","name":"should_not_assign_to","children":[],"call":[" assert "," assigns ! "," assigns ","name to_sym "," should ","names each "]}," ThoughtBot Shoulda Controller Macros should_assign_to":{"type":"method","name":"should_assign_to","children":[],"call":[" assert_equal ","(str \"Instance variable @\") + "," eval "," send ","opts [] "," instantiate_variables_from_assigns "," assert_kind_of "," assert "," assigns ","name to_sym "," should ","test_name << ","names each ","names extract_options! ","names extract_options!  [] "]}," ThoughtBot Shoulda Controller Macros should_not_set_the_flash":{"type":"method","name":"should_not_set_the_flash","children":[],"call":[" should_set_the_flash_to "]}," ThoughtBot Shoulda Controller Macros should_set_the_flash_to":{"type":"method","name":"should_set_the_flash_to","children":[],"call":[" assert_equal "," flash inspect "," flash "," should "," assert_contains "," flash values ","val inspect "]}," ThoughtBot Shoulda Controller Macros should_be_restful":{"type":"method","name":"should_be_restful","children":[],"call":[" flunk "," should "," send "," respond_to? ","resource actions each ","resource actions ","resource formats each ","resource formats ","resource normalize! ","blk call ","ResourceOptions  new "," warn ","ResourceOptions  new  actions each ","ResourceOptions  new  actions ","ResourceOptions  new  formats each ","ResourceOptions  new  formats ","ResourceOptions  new  normalize! "]}," ThoughtBot Shoulda Controller Helpers make_parent_params":{"type":"method","name":"make_parent_params","children":[],"call":["(pair\n  (dsym\n    (begin\n      (lvar :parent_name))\n    (str \"_id\"))\n  (send\n    (lvar :parent) :to_param)) merge "," make_parent_params ","parent to_param ","parent_name to_s classify constantize find ","parent_name to_s classify constantize ","parent_name to_s classify ","parent_name to_s ","record send ","parent_names shift ","parent_names == ","resource parents reverse ","resource parents ","(pair\n  (dsym\n    (begin\n      (lvar :parent_name to_s classify constantize find _name))\n    (str \"_id\"))\n  (send\n    (lvar :parent_name to_s classify constantize find ) :to_param)) merge ","(pair\n  (dsym\n    (begin\n      (lvar :record send _name))\n    (str \"_id\"))\n  (send\n    (lvar :record send ) :to_param)) merge ","(pair\n  (dsym\n    (begin\n      (lvar :parent_names shift ))\n    (str \"_id\"))\n  (send\n    (lvar :parent) :to_param)) merge "," make_parent_name to_s classify constantize find _params "," make_record send _params ","parent_name to_s classify constantize find  to_param ","record send  to_param ","parent_name to_s classify constantize find _name to_s classify constantize find ","record send _name to_s classify constantize find ","parent_names shift  to_s classify constantize find ","parent_name to_s classify constantize find _name to_s classify constantize ","record send _name to_s classify constantize ","parent_names shift  to_s classify constantize ","parent_name to_s classify constantize find _name to_s classify ","record send _name to_s classify ","parent_names shift  to_s classify ","parent_name to_s classify constantize find _name to_s ","record send _name to_s ","parent_names shift  to_s ","parent_name to_s classify constantize find _names shift ","record send _names shift ","parent_names shift s shift ","parent_name to_s classify constantize find _names == ","record send _names == ","parent_names shift s == ","resource parent_name to_s classify constantize find s reverse ","resource record send s reverse ","resource parent_name to_s classify constantize find s ","resource record send s "]}," ThoughtBot Shoulda Controller Helpers get_existing_record":{"type":"method","name":"get_existing_record","children":[],"call":[" assert ","res object "," returning "," instance_variable_get "]}," ThoughtBot Shoulda Controller Helpers instantiate_variables_from_assigns":{"type":"method","name":"instantiate_variables_from_assigns","children":[],"call":[" instance_variable_set ","old [] ","names each ","blk call "," assigns ","name to_sym ","old []= "," instance_variable_get ","@response template assigns keys - ","@response template assigns keys ","@response template assigns ","@response template ","names empty? "]}," ThoughtBot Shoulda Controller XML assert_xml_response":{"type":"method","name":"assert_xml_response","children":[],"call":[" assert_match ","@response body first chomp ","@response body first ","@response body ","regex inspect ","content_type inspect ","(or\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"Content-Type\"))\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"type\"))) to_s ","@response headers [] ","@response headers ","(or\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"Content-Type\"))\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"type\"))) to_s  inspect "]}," ThoughtBot Shoulda Controller XML request_xml":{"type":"method","name":"request_xml","children":[],"call":["@request accept= "]}," ThoughtBot Shoulda Controller XML ClassMethods make_update_xml_tests":{"type":"method","name":"make_update_xml_tests","children":[],"call":[" assert_equal ","res object "," assigns errors full_messages "," assigns errors "," assigns "," should "," should_assign_to "," should_respond_with "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," put ","parent_params merge ","res update params ","res update ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller XML ClassMethods make_create_xml_tests":{"type":"method","name":"make_create_xml_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_assign_to ","res klass count ","res klass "," should_not_assign_to "," should_respond_with ","res denied actions include? ","res denied actions ","res denied "," post ","parent_params merge ","res create params ","res create "," make_parent_params "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller XML ClassMethods make_destroy_xml_tests":{"type":"method","name":"make_destroy_xml_tests","children":[],"call":["@record reload "," assert_raises ","res object "," should "," assert "," should_respond_with ","res denied actions include? ","res denied actions ","res denied "," delete ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," get_existing_record  reload "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller XML ClassMethods make_index_xml_tests":{"type":"method","name":"make_index_xml_tests","children":[],"call":[" should_assign_to ","res object to_s pluralize ","res object to_s ","res object "," should_respond_with_xml_for "," should_respond_with "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," get "," make_parent_params "," request_xml "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller XML ClassMethods make_new_xml_tests":{"type":"method","name":"make_new_xml_tests","children":[],"call":[]}," ThoughtBot Shoulda Controller XML ClassMethods make_edit_xml_tests":{"type":"method","name":"make_edit_xml_tests","children":[],"call":[]}," ThoughtBot Shoulda Controller XML ClassMethods make_show_xml_tests":{"type":"method","name":"make_show_xml_tests","children":[],"call":[" should_respond_with_xml_for ","res object "," should_respond_with "," should_assign_to "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," get ","parent_params merge ","record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "," get_existing_ get_existing_record  "]}," ThoughtBot Shoulda Controller XML ClassMethods should_respond_with_xml_for":{"type":"method","name":"should_respond_with_xml_for","children":[],"call":[" assert_select ","name to_s dasherize ","name to_s ","@response body first map ","@response body first ","@response body "," should "," assert_xml_response "]}," ThoughtBot Shoulda Controller XML included":{"type":"method","name":"included","children":[],"call":[]}," ThoughtBot Shoulda Controller HTML ClassMethods make_update_html_tests":{"type":"method","name":"make_update_html_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_redirect_to ","res update redirect ","res update "," should_respond_with ","res update redirect is_a? "," should_set_the_flash_to ","res update flash "," should_assign_to ","res denied flash ","res denied ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," put ","parent_params merge ","res update params ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context ","res create params inspect ","res create params ","res create "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_create_html_tests":{"type":"method","name":"make_create_html_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_redirect_to ","res create redirect ","res create "," should_respond_with ","res create redirect is_a? "," should_set_the_flash_to ","res create flash "," should_assign_to ","res klass count ","res klass "," should_not_assign_to ","res denied flash ","res denied ","res denied redirect ","res denied actions include? ","res denied actions "," post ","parent_params merge ","res create params "," make_parent_params "," get_existing_record "," setup "," context ","res create params inspect "," controller_name_from_class "," make_parent_params  merge "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_destroy_html_tests":{"type":"method","name":"make_destroy_html_tests","children":[],"call":["@record reload "," assert_raises ","res object "," should "," should_redirect_to ","res destroy redirect ","res destroy "," should_respond_with ","res destroy redirect is_a? "," should_set_the_flash_to ","res destroy flash "," assert "," assert_nothing_raised ","res denied flash ","res denied ","res denied redirect ","res denied actions include? ","res denied actions "," delete ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," get_existing_record  reload "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_new_html_tests":{"type":"method","name":"make_new_html_tests","children":[],"call":[" should_render_a_form "," should_render_template "," should_not_set_the_flash "," should_assign_to ","res object "," should_respond_with "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_index_html_tests":{"type":"method","name":"make_index_html_tests","children":[],"call":[" should_not_set_the_flash "," should_render_template "," should_assign_to ","res object to_s pluralize ","res object to_s ","res object "," should_respond_with "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_edit_html_tests":{"type":"method","name":"make_edit_html_tests","children":[],"call":[" assert_equal "," assigns ","res object "," should "," should_render_a_form "," should_not_set_the_flash "," should_render_template "," should_respond_with "," should_assign_to "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," ThoughtBot Shoulda Controller HTML ClassMethods make_show_html_tests":{"type":"method","name":"make_show_html_tests","children":[],"call":[" should_not_set_the_flash "," should_render_template "," should_respond_with "," should_assign_to ","res object "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get ","parent_params merge ","record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "," get_existing_ get_existing_record  "]}," ThoughtBot Shoulda Controller HTML ClassMethods controller_name_from_class":{"type":"method","name":"controller_name_from_class","children":[],"call":[" name gsub "," name "]}," ThoughtBot Shoulda Controller HTML included":{"type":"method","name":"included","children":[],"call":[]}," Thoughtbot Shoulda Context method_missing":{"type":"method","name":"method_missing","children":[],"call":[" test_unit_class send "," test_unit_class "]}," Thoughtbot Shoulda Context build":{"type":"method","name":"build","children":[],"call":[" print_should_eventuallys ","context build "," subcontexts each "," subcontexts "," create_test_from_should_hash "," shoulds each "," shoulds "]}," Thoughtbot Shoulda Context print_should_eventuallys":{"type":"method","name":"print_should_eventuallys","children":[],"call":[" puts ","  * DEFERRED:  + ","(send nil :full_name) flatten join ","(send nil :full_name) flatten ","should [] "," full_name "," should_eventuallys each "," should_eventuallys "]}," Thoughtbot Shoulda Context run_all_teardown_blocks":{"type":"method","name":"run_all_teardown_blocks","children":[],"call":[" parent run_all_teardown_blocks "," parent "," am_subcontext? ","teardown_block bind call ","teardown_block bind "," teardown_blocks reverse each "," teardown_blocks reverse "," teardown_blocks "]}," Thoughtbot Shoulda Context run_current_setup_blocks":{"type":"method","name":"run_current_setup_blocks","children":[],"call":["setup_block bind call ","setup_block bind "," setup_blocks each "," setup_blocks "]}," Thoughtbot Shoulda Context run_parent_setup_blocks":{"type":"method","name":"run_parent_setup_blocks","children":[],"call":[" parent run_all_setup_blocks "," parent "," am_subcontext? "]}," Thoughtbot Shoulda Context run_all_setup_blocks":{"type":"method","name":"run_all_setup_blocks","children":[],"call":[" run_current_setup_blocks "," run_parent_setup_blocks "]}," Thoughtbot Shoulda Context create_test_from_should_hash":{"type":"method","name":"create_test_from_should_hash","children":[],"call":["context run_all_teardown_blocks ","should [] bind call ","should [] bind ","should [] ","context run_current_setup_blocks ","context run_parent_setup_blocks "," test_unit_class send "," test_unit_class "," warn "," test_unit_class instance_methods include? ","test_name to_s "," test_unit_class instance_methods ","(str \"test:\") flatten join to_sym ","(str \"test:\") flatten join ","(str \"test:\") flatten "," full_name ","(str \"test:\") flatten join to_sym  to_s "]}," Thoughtbot Shoulda Context test_unit_class":{"type":"method","name":"test_unit_class","children":[],"call":[" parent "," parent test_unit_class "," am_subcontext? "]}," Thoughtbot Shoulda Context am_subcontext?":{"type":"method","name":"am_subcontext?","children":[],"call":[" parent is_a? "," class "," parent "]}," Thoughtbot Shoulda Context full_name":{"type":"method","name":"full_name","children":[],"call":["(lvar :parent_name) join strip ","(lvar :parent_name) join "," name "," parent full_name "," parent "," am_subcontext? ","(lvar : parent full_name ) join strip ","(lvar : parent full_name ) join "]}," Thoughtbot Shoulda Context should_eventually":{"type":"method","name":"should_eventually","children":[],"call":[" should_eventuallys << "," should_eventuallys "]}," Thoughtbot Shoulda Context should":{"type":"method","name":"should","children":[],"call":[" should_eventuallys << "," should_eventuallys "," shoulds << ","options [] "," shoulds "," block_given? "]}," Thoughtbot Shoulda Context teardown":{"type":"method","name":"teardown","children":[],"call":[" teardown_blocks << "," teardown_blocks "]}," Thoughtbot Shoulda Context setup":{"type":"method","name":"setup","children":[],"call":[" setup_blocks << "," setup_blocks "]}," Thoughtbot Shoulda Context context":{"type":"method","name":"context","children":[],"call":[" subcontexts << ","Context  new "," subcontexts "]}," Thoughtbot Shoulda Context merge_block":{"type":"method","name":"merge_block","children":[],"call":["blk bind call ","blk bind "]}," Thoughtbot Shoulda Context initialize":{"type":"method","name":"initialize","children":[],"call":["Shoulda  remove_context "," merge_block "," subcontexts= "," should_eventuallys= "," shoulds= "," teardown_blocks= "," setup_blocks= "," parent= "," name= ","Shoulda  add_context "]}," Thoughtbot Shoulda context":{"type":"method","name":"context","children":[],"call":["context build ","Thoughtbot Shoulda Context  new ","Shoulda  current_context context ","Shoulda  current_context ","Thoughtbot Shoulda Context  new  build ","Shoulda  current_Thoughtbot Shoulda Context  new  Thoughtbot Shoulda Context  new  ","Shoulda  current_Thoughtbot Shoulda Context  new  "]}," Thoughtbot Shoulda should_eventually":{"type":"method","name":"should_eventually","children":[],"call":["context build "," should_eventually ","Thoughtbot Shoulda Context  new "," name gsub "," name "]}," Thoughtbot Shoulda before_should":{"type":"method","name":"before_should","children":[],"call":[" assert "," should "]}," Thoughtbot Shoulda should":{"type":"method","name":"should","children":[],"call":["context build "," should_eventually "," should "," block_given? ","Thoughtbot Shoulda Context  new "," name gsub "," name ","Should  current_context should_eventually ","Should  current_context ","Shoulda  current_context should ","Shoulda  current_context "]}," Thoughtbot Shoulda remove_context":{"type":"method","name":"remove_context","children":[],"call":[" contexts pop "," contexts "]}," Thoughtbot Shoulda add_context":{"type":"method","name":"add_context","children":[],"call":[" contexts push "," contexts "]}," Thoughtbot Shoulda current_context":{"type":"method","name":"current_context","children":[],"call":[" contexts last "," contexts "]}," Thoughtbot Shoulda contexts":{"type":"method","name":"contexts","children":[],"call":[]}," ThoughtBot Shoulda ActiveRecord Macros should_have_named_scope":{"type":"method","name":"should_have_named_scope","children":[],"call":[" assert_equal ","@scope proxy_options "," should ","scope_opts inspect ","scope_opts empty? ","@scope class "," eval "," setup "," context ","scope_call to_s ","args extract_options! "," model_class "," eval  proxy_options ","args extract_options!  inspect ","args extract_options!  empty? "," eval  class ","scope_call to_s  to_s "]}," ThoughtBot Shoulda ActiveRecord Macros should_require_acceptance_of":{"type":"method","name":"should_require_acceptance_of","children":[],"call":[" assert_bad_value "," should ","attributes each "," model_class ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "," default_error_ get_options!  "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_indices":{"type":"method","name":"should_have_indices","children":[],"call":[" assert_contains ","(lvar :column) flatten map ","(lvar :column) flatten "," should ","column inspect ","columns each "," ActiveRecord Base  connection indexes map "," ActiveRecord Base  connection indexes "," ActiveRecord Base  connection "," model_class name tableize "," model_class name "," model_class "," model_class table_name ","(lvar :column) flatten map  each "," model_class name  model_class name tableize ize "," model_class name  model_class table_name ize "," model_class  model_class name tableize _name "," model_class  model_class table_name _name "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_db_column":{"type":"method","name":"should_have_db_column","children":[],"call":[" assert_equal ","v to_s ","column instance_variable_get to_s ","column instance_variable_get ","opts each "," assert ","klass name ","c name == ","name to_s ","c name ","klass columns detect ","klass columns "," should "," with options  + ","opts inspect ","opts empty? "," model_class "," model_class  name "," model_class  columns detect "," model_class  columns "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_db_columns":{"type":"method","name":"should_have_db_columns","children":[],"call":[" assert ","klass name ","c name == ","name to_s ","c name ","klass columns detect ","klass columns "," should ","columns each "," model_class "," get_options! "," model_class  name "," model_class  columns detect "," model_class  columns "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_instance_methods":{"type":"method","name":"should_have_instance_methods","children":[],"call":[" assert_respond_to ","klass name ","klass new "," should ","methods each "," model_class "," get_options! "," model_class  name "," model_class  new "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_class_methods":{"type":"method","name":"should_have_class_methods","children":[],"call":[" assert_respond_to ","klass name "," should ","methods each "," model_class "," get_options! "," model_class  name "]}," ThoughtBot Shoulda ActiveRecord Macros should_belong_to":{"type":"method","name":"should_belong_to","children":[],"call":[" assert ","klass name ","klass column_names include? ","fk to_s ","klass column_names ","reflection primary_key_name ","reflection options [] ","reflection options ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize ","association to_s camelize ","association to_s "," assert_equal ","reflection macro ","klass reflect_on_association "," should ","associations each "," model_class "," get_options! "," model_class  name "," model_class  column_names include? "," model_class  column_names ","klass reflect_on_association  primary_key_name ","klass reflect_on_association  options [] ","klass reflect_on_association  options ","(or\n  (send\n    (send\n      (lvar :klass reflect_on_association ) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize ","klass reflect_on_association  macro "," model_class  reflect_on_association "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_and_belong_to_many":{"type":"method","name":"should_have_and_belong_to_many","children":[],"call":[" assert "," ActiveRecord Base  connection tables include? "," ActiveRecord Base  connection tables "," ActiveRecord Base  connection ","reflection options [] ","reflection options "," assert_equal ","reflection macro ","klass name ","klass reflect_on_association "," should ","associations each "," model_class "," get_options! ","table to_s "," ActiveRecord Base  connection reflection options [] s include? "," ActiveRecord Base  connection reflection options [] s ","klass reflect_on_association  options [] ","klass reflect_on_association  options ","klass reflect_on_association  macro "," model_class  name "," model_class  reflect_on_association ","reflection options []  to_s "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_one":{"type":"method","name":"should_have_one","children":[],"call":[" assert_equal ","reflection options [] to_s ","reflection options [] ","reflection options ","dependent to_s "," assert ","associated_klass name ","associated_klass column_names include? ","fk to_s ","associated_klass column_names ","klass name foreign_key ","klass name ","fk gsub ","reflection options [] to_s foreign_key ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize ","association to_s camelize ","association to_s ","reflection macro ","klass reflect_on_association "," should ","associations each "," model_class "," get_options! ","klass reflect_on_association  options [] to_s ","klass reflect_on_association  options [] ","klass reflect_on_association  options "," get_options!  to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize  name ","associated_ model_class  name ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize  column_names include? ","associated_ model_class  column_names include? ","klass name foreign_key  to_s ","reflection options [] to_s foreign_key  to_s ","reflection options []  to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize  column_names ","associated_ model_class  column_names "," model_class  name foreign_key "," model_class  name ","klass name foreign_key  gsub ","reflection options [] to_s foreign_key  gsub ","reflection options []  gsub ","klass reflect_on_association  options [] to_s foreign_key ","(or\n  (send\n    (send\n      (lvar :klass reflect_on_association ) :options) :[]\n    (sym :class_name))\n  (send\n    (send\n      (lvar :association) :to_s) :camelize)) constantize ","klass reflect_on_association  macro "," model_class  reflect_on_association "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_many":{"type":"method","name":"should_have_many","children":[],"call":[" assert ","associated_klass name ","associated_klass column_names include? ","fk to_s ","associated_klass column_names ","associated_klass_name constantize ","association to_s classify ","association to_s ","reflection options [] ","reflection options ","reflection primary_key_name ","reflection options [] to_s foreign_key ","reflection options [] to_s "," assert_equal ","dependent to_s ","klass name ","klass reflect_on_association ","reflection macro "," should ","associations each "," model_class "," get_options! ","associated_klass_name constantize  name ","associated_ model_class  name ","associated_klass_name constantize  column_names include? ","associated_ model_class  column_names include? ","reflection primary_key_name  to_s ","reflection options [] to_s foreign_key  to_s ","reflection options []  to_s ","associated_klass_name constantize  column_names ","associated_ model_class  column_names ","associated_klass_name constantize _name constantize ","associated_ model_class _name constantize ","klass reflect_on_association  options [] ","klass reflect_on_association  options ","klass reflect_on_association  primary_key_name ","klass reflect_on_association  options [] to_s foreign_key ","klass reflect_on_association  options [] to_s "," model_class  name "," model_class  reflect_on_association ","klass reflect_on_association  macro "]}," ThoughtBot Shoulda ActiveRecord Macros should_only_allow_numeric_values_for":{"type":"method","name":"should_only_allow_numeric_values_for","children":[],"call":[" assert_bad_value "," should ","attribute to_sym ","attributes each "," model_class ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message ","attribute to_sym  to_sym ","attribute to_sym s each "," default_error_ get_options!  "]}," ThoughtBot Shoulda ActiveRecord Macros should_ensure_value_in_range":{"type":"method","name":"should_ensure_value_in_range","children":[],"call":[" assert_good_value "," should "," assert_bad_value ","max + ","min - ","range last ","range first "," model_class ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "," assert_good_max + alue "," assert_good_min - alue "," assert_bad_max + alue "," assert_bad_min - alue ","range last  + ","range first  - "]}," ThoughtBot Shoulda ActiveRecord Macros should_ensure_length_is":{"type":"method","name":"should_ensure_length_is","children":[],"call":[" assert_good_value ","x * "," should "," assert_bad_value ","length + ","length - "," model_class ","DEFAULT_ERROR_MESSAGES  [] % ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "," default_error_ get_options!  "]}," ThoughtBot Shoulda ActiveRecord Macros should_ensure_length_at_least":{"type":"method","name":"should_ensure_length_at_least","children":[],"call":[" assert_good_value ","x * "," should "," assert_bad_value ","min_length - ","min_length > "," model_class ","DEFAULT_ERROR_MESSAGES  [] % ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "]}," ThoughtBot Shoulda ActiveRecord Macros should_ensure_length_in_range":{"type":"method","name":"should_ensure_length_in_range","children":[],"call":[" assert_good_value ","x * "," should "," assert_bad_value ","max_length + ","min_length > ","min_length - ","min_length == ","range last ","range first "," model_class ","DEFAULT_ERROR_MESSAGES  [] % ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message ","range last  + ","range first  > ","range first  - ","range first  == "]}," ThoughtBot Shoulda ActiveRecord Macros should_allow_values_for":{"type":"method","name":"should_allow_values_for","children":[],"call":[" assert_good_value "," should ","v inspect ","good_values each "," model_class "," get_options! "]}," ThoughtBot Shoulda ActiveRecord Macros should_not_allow_values_for":{"type":"method","name":"should_not_allow_values_for","children":[],"call":[" assert_bad_value "," should ","v inspect ","bad_values each "," model_class ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "," default_error_ get_options!  "]}," ThoughtBot Shoulda ActiveRecord Macros should_have_readonly_attributes":{"type":"method","name":"should_have_readonly_attributes","children":[],"call":[" assert ","readonly to_a to_sentence ","readonly to_a ","readonly empty? ","readonly include? ","attribute to_s ","klass readonly_attributes "," should ","attribute to_sym ","attributes each "," model_class "," get_options! ","attribute to_sym  to_s ","klass readonly_attribute to_sym s "," model_class  readonly_attributes ","attribute to_sym  to_sym ","attribute to_sym s each "]}," ThoughtBot Shoulda ActiveRecord Macros should_protect_attributes":{"type":"method","name":"should_protect_attributes","children":[],"call":[" assert ","protected to_a to_sentence ","protected to_a ","accessible empty? ","accessible include? ! ","accessible include? ","attribute to_s ","accessible empty? ! ","protected include? ","klass accessible_attributes ","klass protected_attributes "," should ","attribute to_sym ","attributes each "," model_class "," get_options! ","attribute to_sym  to_s ","klass accessible_attribute to_sym s "," model_class  accessible_attributes ","klass protected_attribute to_sym s "," model_class  protected_attributes ","attribute to_sym  to_sym ","attribute to_sym s each "]}," ThoughtBot Shoulda ActiveRecord Macros should_require_unique_attributes":{"type":"method","name":"should_require_unique_attributes","children":[],"call":[" assert_good_value ","object send ","existing send next ","existing send ","existing send nil? ","scope each ","scope blank? ! ","scope blank? "," assert_bad_value "," assert_respond_to ","klass name ","klass new "," assert ","klass find "," should ","scope join ","attribute to_sym ","attributes each "," model_class ","DEFAULT_ERROR_MESSAGES  [] ","(splat\n  (lvar :scope)) compact "," get_options! "," default_error_message ","klass new  send ","klass find  send next ","klass find  send ","klass find  send nil? ","(splat\n  (lvar :scope)) compact  each ","(splat\n  (lvar :scope)) compact  blank? ! ","(splat\n  (lvar :scope)) compact  blank? "," model_class  name "," model_class  new "," model_class  find ","(splat\n  (lvar :scope)) compact  join ","attribute to_sym  to_sym ","attribute to_sym s each ","(splat\n  (lvar :(splat\n  (lvar :scope)) compact )) compact "]}," ThoughtBot Shoulda ActiveRecord Macros should_require_attributes":{"type":"method","name":"should_require_attributes","children":[],"call":[" assert_bad_value "," should ","attributes each "," model_class ","DEFAULT_ERROR_MESSAGES  [] "," get_options! "," default_error_message "," default_error_ get_options!  "]}," ThoughtBot Shoulda ActiveRecord Macros load_all_fixtures":{"type":"method","name":"load_all_fixtures","children":[],"call":[" fixtures "," warn "]}," ThoughtBot Shoulda ActiveRecord Assertions get_instance_of":{"type":"method","name":"get_instance_of","children":[],"call":["klass new "," instance_variable_get ","klass to_s underscore ","klass to_s ","object_or_klass is_a? "]}," ThoughtBot Shoulda ActiveRecord Assertions pretty_error_messages":{"type":"method","name":"pretty_error_messages","children":[],"call":["obj send inspect ","obj send ","obj errors map ","obj errors ","msg << ","a to_sym == ","a to_sym "]}," ThoughtBot Shoulda ActiveRecord Assertions assert_bad_value":{"type":"method","name":"assert_bad_value","children":[],"call":[" assert_contains ","value inspect ","object errors on ","object errors "," assert ","object class ","object valid? ! ","object valid? ","object send "," get_instance_of "," get_instance_of  errors on "," get_instance_of  errors "," get_instance_of  class "," get_instance_of  valid? ! "," get_instance_of  valid? "," get_instance_of  send "]}," ThoughtBot Shoulda ActiveRecord Assertions assert_good_value":{"type":"method","name":"assert_good_value","children":[],"call":[" assert_does_not_contain ","value inspect ","object errors on ","object errors ","object valid? ","object send "," get_instance_of "," get_instance_of  errors on "," get_instance_of  errors "," get_instance_of  valid? "," get_instance_of  send "]}," ThoughtBot Shoulda ActiveRecord Assertions assert_valid":{"type":"method","name":"assert_valid","children":[],"call":[" assert "," pretty_error_messages ","obj valid? "]}," ThoughtBot Shoulda ActiveRecord Assertions assert_save":{"type":"method","name":"assert_save","children":[],"call":["obj reload "," assert "," pretty_error_messages ","obj save "]}," ThoughtBot Shoulda ActionMailer Assertions assert_did_not_send_email":{"type":"method","name":"assert_did_not_send_email","children":[],"call":[" assert "," ActionMailer Base  deliveries empty? "," ActionMailer Base  deliveries ","msg << ","m to to_sentence ","m to ","m subject "," ActionMailer Base  deliveries each "," ActionMailer Base  deliveries size "]}," ThoughtBot Shoulda ActionMailer Assertions assert_sent_email":{"type":"method","name":"assert_sent_email","children":[],"call":[" assert ","matching_emails empty? ! ","matching_emails empty? ","emails select "," block_given? ","emails empty? ! ","emails empty? "," ActionMailer Base  deliveries ","matching_ ActionMailer Base  deliveries  empty? ! ","matching_ ActionMailer Base  deliveries  empty? "," ActionMailer Base  deliveries  select "," ActionMailer Base  deliveries  empty? ! "," ActionMailer Base  deliveries  empty? "]}," ThoughtBot Shoulda Controller Macros should_filter_params":{"type":"method","name":"should_filter_params","children":[],"call":[" assert_equal ","filtered [] ","key to_s ","@controller send "," assert ","@controller respond_to? "," should ","keys each ","@controller send  [] "]}," ThoughtBot Shoulda ActiveRecord MacroHelpers default_error_message":{"type":"method","name":"default_error_message","children":[],"call":[" ActiveRecord Errors  default_error_messages [] % ","values [] "," ActiveRecord Errors  default_error_messages [] "," ActiveRecord Errors  default_error_messages ","I18n  translate ","Object  const_defined? "]}," ThoughtBot Shoulda Assertions assert_does_not_contain":{"type":"method","name":"assert_does_not_contain","children":[],"call":[" assert ","collection include? ! ","collection include? ","(send\n  (lvar :collection) :detect) ! ","e =~ ","collection detect ","(begin\n  (send\n    (lvar :x) :inspect)) + ","collection to_a inspect ","collection to_a ","x inspect ","collection is_a? "]}," ThoughtBot Shoulda Assertions assert_contains":{"type":"method","name":"assert_contains","children":[],"call":[" assert ","collection include? ","e =~ ","collection detect ","collection to_a inspect ","collection to_a ","x inspect ","collection is_a? "]}," ThoughtBot Shoulda Assertions assert_same_elements":{"type":"method","name":"assert_same_elements","children":[],"call":[" assert_equal "," assert ","h []= ","(send\n  (lvar :a2) :select) size ","i == ","a2 select ","a2 inject ","(send\n  (lvar :a1) :select) size ","a1 select ","a1 inject "," assert_respond_to ","a inspect ","(lvar :a1) each ","(sym :select) each "]}," Shoulda Private model_class":{"type":"method","name":"model_class","children":[],"call":[" name gsub constantize "," name gsub "," name "]}," Shoulda Private get_options!":{"type":"method","name":"get_options!","children":[],"call":[" raise ","opts keys join ","opts keys ","opts keys empty? ","ret << ","opts delete ","wanted each ","args pop ","args last is_a? ","args last ","ret first ","wanted size == ","wanted size "]}," Shoulda Macros should_not_change":{"type":"method","name":"should_not_change","children":[],"call":[" assert_equal ","expression inspect ","expression_eval bind call ","expression_eval bind "," should "," lambda "," eval ","code bind call ","code bind "," warn ","[DEPRECATION] should_not_change(expression) is deprecated.  << "," block_given? ","block bind call ","block bind "," ActiveSupport Deprecation  warn "]}," Shoulda Macros should_change":{"type":"method","name":"should_change","children":[],"call":[" assert_equal ","old_value + "," assert_operator ","to inspect ","expression inspect "," assert_not_equal ","by == ","from inspect ","expression_eval bind call ","expression_eval bind "," should "," lambda "," eval ","stmt << ","by inspect "," get_options! ","code bind call ","code bind "," warn ","[DEPRECATION] should_change(expression, options) is deprecated.  << "," block_given? ","block bind call ","block bind "," ActiveSupport Deprecation  warn "]}," Shoulda Helpers report!":{"type":"method","name":"report!","children":[],"call":[" puts "," caller first "," caller "]}," Shoulda Context method_missing":{"type":"method","name":"method_missing","children":[],"call":[" test_unit_class send "," test_unit_class "]}," Shoulda Context build":{"type":"method","name":"build","children":[],"call":[" print_should_eventuallys ","context build "," subcontexts each "," subcontexts "," create_test_from_should_hash "," shoulds each "," shoulds "]}," Shoulda Context print_should_eventuallys":{"type":"method","name":"print_should_eventuallys","children":[],"call":[" puts ","  * DEFERRED:  + ","(send nil :full_name) flatten join ","(send nil :full_name) flatten ","should [] "," full_name "," should_eventuallys each "," should_eventuallys "]}," Shoulda Context run_all_teardown_blocks":{"type":"method","name":"run_all_teardown_blocks","children":[],"call":[" parent run_all_teardown_blocks "," parent "," am_subcontext? ","teardown_block bind call ","teardown_block bind "," teardown_blocks reverse each "," teardown_blocks reverse "," teardown_blocks "]}," Shoulda Context run_current_setup_blocks":{"type":"method","name":"run_current_setup_blocks","children":[],"call":["setup_block bind call ","setup_block bind "," setup_blocks each "," setup_blocks "]}," Shoulda Context run_parent_setup_blocks":{"type":"method","name":"run_parent_setup_blocks","children":[],"call":[" parent run_all_setup_blocks "," parent "," am_subcontext? "]}," Shoulda Context run_all_setup_blocks":{"type":"method","name":"run_all_setup_blocks","children":[],"call":[" run_current_setup_blocks "," run_parent_setup_blocks "]}," Shoulda Context create_test_from_should_hash":{"type":"method","name":"create_test_from_should_hash","children":[],"call":["context run_all_teardown_blocks ","should [] bind call ","should [] bind ","should [] ","context run_current_setup_blocks ","context run_parent_setup_blocks "," test_unit_class send "," test_unit_class "," warn "," test_unit_class instance_methods include? ","test_name to_s "," test_unit_class instance_methods ","(str \"test:\") flatten join to_sym ","(str \"test:\") flatten join ","(str \"test:\") flatten "," full_name ","(str \"test:\") flatten join to_sym  to_s "]}," Shoulda Context test_unit_class":{"type":"method","name":"test_unit_class","children":[],"call":[" parent "," parent test_unit_class "," am_subcontext? "]}," Shoulda Context am_subcontext?":{"type":"method","name":"am_subcontext?","children":[],"call":[" parent is_a? "," class "," parent "]}," Shoulda Context full_name":{"type":"method","name":"full_name","children":[],"call":["(lvar :parent_name) join strip ","(lvar :parent_name) join "," name "," parent full_name "," parent "," am_subcontext? ","(lvar : parent full_name ) join strip ","(lvar : parent full_name ) join "]}," Shoulda Context should_eventually":{"type":"method","name":"should_eventually","children":[],"call":[" should_eventuallys << "," should_eventuallys "]}," Shoulda Context should":{"type":"method","name":"should","children":[],"call":[" should_eventuallys << "," should_eventuallys "," shoulds << ","options [] "," shoulds "," block_given? "," assert_accepts "," subject "," lambda ","name_or_matcher description ","name_or_matcher respond_to? ","name_or_matcher description _or_matcher description ","name_or_matcher description _or_matcher respond_to? "]}," Shoulda Context teardown":{"type":"method","name":"teardown","children":[],"call":[" teardown_blocks << "," teardown_blocks "]}," Shoulda Context setup":{"type":"method","name":"setup","children":[],"call":[" setup_blocks << "," setup_blocks "]}," Shoulda Context context":{"type":"method","name":"context","children":[],"call":[" subcontexts << ","Context  new "," subcontexts "]}," Shoulda Context merge_block":{"type":"method","name":"merge_block","children":[],"call":["blk bind call ","blk bind "]}," Shoulda Context initialize":{"type":"method","name":"initialize","children":[],"call":["Shoulda  remove_context "," merge_block "," subcontexts= "," should_eventuallys= "," shoulds= "," teardown_blocks= "," setup_blocks= "," parent= "," name= ","Shoulda  add_context "]}," Shoulda ClassMethods context":{"type":"method","name":"context","children":[],"call":["context build ","Shoulda Context  new ","Shoulda  current_context context ","Shoulda  current_context ","Shoulda Context  new  build ","Shoulda  current_Shoulda Context  new  Shoulda Context  new  ","Shoulda  current_Shoulda Context  new  "]}," Shoulda ClassMethods should_eventually":{"type":"method","name":"should_eventually","children":[],"call":["context build "," should_eventually ","Shoulda Context  new "," name gsub "," name "]}," Shoulda ClassMethods before_should":{"type":"method","name":"before_should","children":[],"call":[" assert "," should "]}," Shoulda ClassMethods should":{"type":"method","name":"should","children":[],"call":["context build "," should_eventually "," should "," block_given? ","Shoulda Context  new "," name gsub "," name ","Should  current_context should_eventually ","Should  current_context ","Shoulda  current_context should ","Shoulda  current_context ","Shoulda  current_context should_eventually "]}," Shoulda remove_context":{"type":"method","name":"remove_context","children":[],"call":[" contexts pop "," contexts "]}," Shoulda add_context":{"type":"method","name":"add_context","children":[],"call":[" contexts push "," contexts "]}," Shoulda current_context":{"type":"method","name":"current_context","children":[],"call":[" contexts last "," contexts "]}," Shoulda contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Shoulda autoload_macros":{"type":"method","name":"autoload_macros","children":[],"call":[]}," Shoulda Assertions assert_rejects":{"type":"method","name":"assert_rejects","children":[],"call":[" assert_block ","matcher negative_failure_message ","matcher matches? ! ","matcher matches? "," assert_match ","matcher failure_message ","options [] ","matcher in_context ","matcher respond_to? "]}," Shoulda Assertions assert_accepts":{"type":"method","name":"assert_accepts","children":[],"call":[" assert_block ","matcher failure_message ","matcher matches? "," assert_match ","matcher negative_failure_message ","options [] ","matcher in_context ","matcher respond_to? "]}," Shoulda Assertions assert_does_not_contain":{"type":"method","name":"assert_does_not_contain","children":[],"call":[" assert ","collection include? ! ","collection include? ","(send\n  (lvar :collection) :detect) ! ","e =~ ","collection detect ","(begin\n  (send\n    (lvar :x) :inspect)) + ","collection to_a inspect ","collection to_a ","x inspect ","collection is_a? "]}," Shoulda Assertions assert_contains":{"type":"method","name":"assert_contains","children":[],"call":[" assert ","collection include? ","e =~ ","collection detect ","collection to_a inspect ","collection to_a ","x inspect ","collection is_a? "]}," Shoulda Assertions assert_same_elements":{"type":"method","name":"assert_same_elements","children":[],"call":[" assert_equal "," assert ","h []= ","(send\n  (lvar :a2) :select) size ","i == ","a2 select ","a2 inject ","(send\n  (lvar :a1) :select) size ","a1 select ","a1 inject "," assert_respond_to ","a inspect ","(lvar :a1) each ","(sym :select) each "]}," Shoulda ActiveRecord Matchers ValidationMatcher disallows_value_of":{"type":"method","name":"disallows_value_of","children":[],"call":["disallow failure_message ","disallow negative_failure_message ","disallow matches? ","AllowValueMatcher  new for with_message ","AllowValueMatcher  new for ","AllowValueMatcher  new ","AllowValueMatcher  new for with_message  failure_message ","AllowValueMatcher  new for with_message  negative_failure_message ","AllowValueMatcher  new for with_message  matches? "]}," Shoulda ActiveRecord Matchers ValidationMatcher allows_value_of":{"type":"method","name":"allows_value_of","children":[],"call":["allow negative_failure_message ","allow failure_message ","allow matches? ","AllowValueMatcher  new for with_message ","AllowValueMatcher  new for ","AllowValueMatcher  new ","AllowValueMatcher  new for with_message  negative_failure_message ","AllowValueMatcher  new for with_message  failure_message ","AllowValueMatcher  new for with_message  matches? "]}," Shoulda ActiveRecord Matchers ValidationMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidationMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidationMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher existing_value":{"type":"method","name":"existing_value","children":[],"call":["value swapcase! ","value respond_to? ","@existing send ","@existing send  swapcase! ","@existing send  respond_to? "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher class_name":{"type":"method","name":"class_name","children":[],"call":["@subject class name ","@subject class "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher validate_after_scope_change":{"type":"method","name":"validate_after_scope_change","children":[],"call":["@failure_message << ","@negative_failure_message << "," allows_value_of "," existing_value ","@subject send ","previous_value next ","@existing send ","@scopes all? ","@scopes blank? ","@existing send  next "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher validate_attribute":{"type":"method","name":"validate_attribute","children":[],"call":[" disallows_value_of "," existing_value "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher set_scoped_attributes":{"type":"method","name":"set_scoped_attributes","children":[],"call":["@subject send ","@existing send "," class_name ","@subject respond_to? ","@scopes each ","@scopes blank? "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher find_existing":{"type":"method","name":"find_existing","children":[],"call":[" class_name ","@subject class find ","@subject class "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" validate_after_scope_change "," validate_attribute "," set_scoped_attributes "," find_existing ","subject class new ","subject class "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher description":{"type":"method","name":"description","children":[],"call":["result << ","@scopes join ","@scopes blank? "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher case_insensitive":{"type":"method","name":"case_insensitive","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher scoped_to":{"type":"method","name":"scoped_to","children":[],"call":["(splat\n  (lvar :scopes)) flatten "]}," Shoulda ActiveRecord Matchers ValidateUniquenessOfMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers validate_uniqueness_of":{"type":"method","name":"validate_uniqueness_of","children":[],"call":["ValidateUniquenessOfMatcher  new "]}," Shoulda ActiveRecord Matchers ValidatePresenceOfMatcher collection?":{"type":"method","name":"collection?","children":[],"call":["(sym :has_many) include? ","reflection macro ","@subject class reflect_on_association ","@subject class ","@subject class reflect_on_association  macro "]}," Shoulda ActiveRecord Matchers ValidatePresenceOfMatcher blank_value":{"type":"method","name":"blank_value","children":[],"call":[" collection? "]}," Shoulda ActiveRecord Matchers ValidatePresenceOfMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidatePresenceOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" disallows_value_of "," blank_value "]}," Shoulda ActiveRecord Matchers ValidatePresenceOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers validate_presence_of":{"type":"method","name":"validate_presence_of","children":[],"call":["ValidatePresenceOfMatcher  new "]}," Shoulda ActiveRecord Matchers ValidateNumericalityOfMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateNumericalityOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" disallows_value_of "]}," Shoulda ActiveRecord Matchers ValidateNumericalityOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers validate_numericality_of":{"type":"method","name":"validate_numericality_of","children":[],"call":["ValidateNumericalityOfMatcher  new "]}," Shoulda ActiveRecord Matchers ValidateAcceptanceOfMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateAcceptanceOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" disallows_value_of "]}," Shoulda ActiveRecord Matchers ValidateAcceptanceOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers validate_acceptance_of":{"type":"method","name":"validate_acceptance_of","children":[],"call":["ValidateAcceptanceOfMatcher  new "]}," Shoulda ActiveRecord Matchers HaveReadonlyAttributeMatcher class_name":{"type":"method","name":"class_name","children":[],"call":["@subject class name ","@subject class "]}," Shoulda ActiveRecord Matchers HaveReadonlyAttributeMatcher readonly_attributes":{"type":"method","name":"readonly_attributes","children":[],"call":["@subject class readonly_attributes ","@subject class "]}," Shoulda ActiveRecord Matchers HaveReadonlyAttributeMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveReadonlyAttributeMatcher matches?":{"type":"method","name":"matches?","children":[],"call":["(begin\n  (send nil :class_name)) << << ","(begin\n  (send nil :class_name)) << "," readonly_attributes to_sentence "," readonly_attributes "," class_name "," readonly_attributes empty? "," readonly_attributes include? "]}," Shoulda ActiveRecord Matchers HaveReadonlyAttributeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["attribute to_s "]}," Shoulda ActiveRecord Matchers have_readonly_attribute":{"type":"method","name":"have_readonly_attribute","children":[],"call":["HaveReadonlyAttributeMatcher  new "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher finds_correct_scope?":{"type":"method","name":"finds_correct_scope?","children":[],"call":["@missing_expectation << "," scope proxy_options inspect "," scope proxy_options "," scope ","@finding inspect ","@finding == ","@finding nil? "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher returns_scope?":{"type":"method","name":"returns_scope?","children":[],"call":[" ActiveRecord NamedScope Scope  === "," scope "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher scope":{"type":"method","name":"scope","children":[],"call":["@context instance_eval ","@subject class name ","@subject class "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher call_succeeds?":{"type":"method","name":"call_succeeds?","children":[],"call":["(begin\n  (send\n    (send\n      (ivar :@subject) :class) :name)) << << ","exception inspect ","(begin\n  (send\n    (send\n      (ivar :@subject) :class) :name)) << ","@subject class name ","@subject class "," scope "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher description":{"type":"method","name":"description","children":[],"call":["result << ","@finding inspect ","@finding nil? "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" finds_correct_scope? "," returns_scope? "," call_succeeds? "]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher finding":{"type":"method","name":"finding","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveNamedScopeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["scope_call to_s "]}," Shoulda ActiveRecord Matchers have_named_scope":{"type":"method","name":"have_named_scope","children":[],"call":["HaveNamedScopeMatcher  new in_context ","HaveNamedScopeMatcher  new "," warn "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher normalize_columns_to_array":{"type":"method","name":"normalize_columns_to_array","children":[],"call":["columns to_s ","each to_s ","columns collect ","columns class == ","columns class "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher index_type":{"type":"method","name":"index_type","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveIndexMatcher expectation":{"type":"method","name":"expectation","children":[],"call":[" description "," model_class name "," model_class "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher indexes":{"type":"method","name":"indexes","children":[],"call":[" ActiveRecord Base  connection indexes "," table_name "," ActiveRecord Base  connection "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher table_name":{"type":"method","name":"table_name","children":[],"call":[" model_class table_name "," model_class "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher model_class":{"type":"method","name":"model_class","children":[],"call":["@subject class "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher matched_index":{"type":"method","name":"matched_index","children":[],"call":["each columns == ","each columns "," indexes detect "," indexes "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher correct_unique?":{"type":"method","name":"correct_unique?","children":[],"call":["(begin\n  (send nil :table_name)) << "," matched_index unique "," matched_index "," matched_index name "," table_name "," matched_index unique == ","@unique nil? "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher index_exists?":{"type":"method","name":"index_exists?","children":[],"call":[" matched_index nil? ! "," matched_index nil? "," matched_index "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher description":{"type":"method","name":"description","children":[],"call":[" index_type "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" correct_unique? "," index_exists? "]}," Shoulda ActiveRecord Matchers HaveIndexMatcher unique":{"type":"method","name":"unique","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveIndexMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_columns_to_array "]}," Shoulda ActiveRecord Matchers have_index":{"type":"method","name":"have_index","children":[],"call":["HaveIndexMatcher  new "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher expectation":{"type":"method","name":"expectation","children":[],"call":[" description "," model_class name "," model_class "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher model_class":{"type":"method","name":"model_class","children":[],"call":["@subject class "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher matched_column":{"type":"method","name":"matched_column","children":[],"call":["each name == ","@column to_s ","each name "," model_class columns detect "," model_class columns "," model_class "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_scale?":{"type":"method","name":"correct_scale?","children":[],"call":["(begin\n  (send nil :model_class)) << "," matched_column scale "," matched_column "," model_class "," matched_column scale to_s == ","@scale to_s "," matched_column scale to_s ","@scale nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_null?":{"type":"method","name":"correct_null?","children":[],"call":["(begin\n  (send nil :model_class)) << << ","(begin\n  (send nil :model_class)) << "," matched_column null "," matched_column "," model_class "," matched_column null to_s == ","@null to_s "," matched_column null to_s ","@null nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_default?":{"type":"method","name":"correct_default?","children":[],"call":["(begin\n  (send nil :model_class)) << << ","(begin\n  (send nil :model_class)) << "," matched_column default "," matched_column "," model_class "," matched_column default to_s == ","@default to_s "," matched_column default to_s ","@default nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_limit?":{"type":"method","name":"correct_limit?","children":[],"call":["(begin\n  (send nil :model_class)) << << ","(begin\n  (send nil :model_class)) << "," matched_column limit "," matched_column "," model_class "," matched_column limit to_s == ","@limit to_s "," matched_column limit to_s ","@limit nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_precision?":{"type":"method","name":"correct_precision?","children":[],"call":["(begin\n  (send nil :model_class)) << << ","(begin\n  (send nil :model_class)) << "," matched_column precision "," matched_column "," model_class "," matched_column precision to_s == ","@precision to_s "," matched_column precision to_s ","@precision nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher correct_column_type?":{"type":"method","name":"correct_column_type?","children":[],"call":["(begin\n  (send nil :model_class)) << "," matched_column type "," matched_column "," model_class "," matched_column type to_s == ","@column_type to_s "," matched_column type to_s ","@column_type nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher column_exists?":{"type":"method","name":"column_exists?","children":[],"call":[" model_class "," model_class column_names include? ","@column to_s "," model_class column_names "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher description":{"type":"method","name":"description","children":[],"call":["desc << ","@scale nil? ","@primary nil? ","@null nil? ","@default nil? ","@limit nil? ","@precision nil? ","@column_type nil? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" correct_scale? "," correct_null? "," correct_default? "," correct_limit? "," correct_precision? "," correct_column_type? "," column_exists? "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher with_options":{"type":"method","name":"with_options","children":[],"call":["opts [] "]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher of_type":{"type":"method","name":"of_type","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveDbColumnMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers have_db_column":{"type":"method","name":"have_db_column","children":[],"call":["HaveDbColumnMatcher  new "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher string_of_length":{"type":"method","name":"string_of_length","children":[],"call":["x * "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher disallows_length_of":{"type":"method","name":"disallows_length_of","children":[],"call":[" disallows_value_of "," string_of_length ","length nil? "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher allows_length_of":{"type":"method","name":"allows_length_of","children":[],"call":[" allows_value_of "," string_of_length ","length nil? "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher allows_maximum_length":{"type":"method","name":"allows_maximum_length","children":[],"call":[" allows_length_of "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher allows_minimum_length":{"type":"method","name":"allows_minimum_length","children":[],"call":[" allows_length_of "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher disallows_higher_length":{"type":"method","name":"disallows_higher_length","children":[],"call":[" disallows_length_of ","@maximum + ","@maximum nil? "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher disallows_lower_length":{"type":"method","name":"disallows_lower_length","children":[],"call":[" disallows_length_of ","@minimum - ","@minimum nil? ","@minimum == "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher translate_messages!":{"type":"method","name":"translate_messages!","children":[],"call":[" default_error_message ","Symbol  === "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" allows_maximum_length "," disallows_higher_length ","@minimum == "," allows_minimum_length "," disallows_lower_length "," translate_messages! "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher description":{"type":"method","name":"description","children":[],"call":["description << ","@minimum == "]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher with_long_message":{"type":"method","name":"with_long_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher with_short_message":{"type":"method","name":"with_short_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher is_equal_to":{"type":"method","name":"is_equal_to","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher is_at_most":{"type":"method","name":"is_at_most","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureLengthOfMatcher is_at_least":{"type":"method","name":"is_at_least","children":[],"call":[]}," Shoulda ActiveRecord Matchers ensure_length_of":{"type":"method","name":"ensure_length_of","children":[],"call":["EnsureLengthOfMatcher  new "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher allows_maximum_value":{"type":"method","name":"allows_maximum_value","children":[],"call":[" allows_value_of "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher allows_minimum_value":{"type":"method","name":"allows_minimum_value","children":[],"call":[" allows_value_of "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher disallows_higher_value":{"type":"method","name":"disallows_higher_value","children":[],"call":[" disallows_value_of ","@maximum + "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher disallows_lower_value":{"type":"method","name":"disallows_lower_value","children":[],"call":[" disallows_value_of ","@minimum - ","@minimum == "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" allows_maximum_value "," disallows_higher_value "," allows_minimum_value "," disallows_lower_value "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher description":{"type":"method","name":"description","children":[],"call":["@range inspect "]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher with_high_message":{"type":"method","name":"with_high_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher with_low_message":{"type":"method","name":"with_low_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers EnsureInclusionOfMatcher in_range":{"type":"method","name":"in_range","children":[],"call":["range last ","range first "]}," Shoulda ActiveRecord Matchers ensure_inclusion_of":{"type":"method","name":"ensure_inclusion_of","children":[],"call":["EnsureInclusionOfMatcher  new "]}," Shoulda ActiveRecord Matchers AssociationMatcher macro_description":{"type":"method","name":"macro_description","children":[],"call":["@macro to_s "]}," Shoulda ActiveRecord Matchers AssociationMatcher expectation":{"type":"method","name":"expectation","children":[],"call":[" model_class name "," model_class "]}," Shoulda ActiveRecord Matchers AssociationMatcher through_reflection":{"type":"method","name":"through_reflection","children":[],"call":[" model_class reflect_on_association "," model_class "]}," Shoulda ActiveRecord Matchers AssociationMatcher reflection":{"type":"method","name":"reflection","children":[],"call":[" model_class reflect_on_association "," model_class "]}," Shoulda ActiveRecord Matchers AssociationMatcher through?":{"type":"method","name":"through?","children":[],"call":[" reflection options [] "," reflection options "," reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher foreign_key":{"type":"method","name":"foreign_key","children":[],"call":[" reflection primary_key_name "," reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher associated_class":{"type":"method","name":"associated_class","children":[],"call":[" reflection klass "," reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher join_table":{"type":"method","name":"join_table","children":[],"call":[" reflection options [] "," reflection options "," reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher model_class":{"type":"method","name":"model_class","children":[],"call":["@subject class "]}," Shoulda ActiveRecord Matchers AssociationMatcher class_has_foreign_key?":{"type":"method","name":"class_has_foreign_key?","children":[],"call":[" foreign_key ","klass column_names include? "," foreign_key to_s ","klass column_names "]}," Shoulda ActiveRecord Matchers AssociationMatcher join_table_exists?":{"type":"method","name":"join_table_exists?","children":[],"call":[" join_table "," ActiveRecord Base  connection tables include? "," join_table to_s "," ActiveRecord Base  connection tables "," ActiveRecord Base  connection ","@macro != "]}," Shoulda ActiveRecord Matchers AssociationMatcher dependent_correct?":{"type":"method","name":"dependent_correct?","children":[],"call":["@dependent to_s == "," reflection options [] to_s "," reflection options [] "," reflection options "," reflection ","@dependent to_s ","@dependent nil? "]}," Shoulda ActiveRecord Matchers AssociationMatcher through_association_correct?":{"type":"method","name":"through_association_correct?","children":[],"call":["(str \"Expected \") << "," reflection options [] "," reflection options "," reflection "," model_class name "," model_class ","@through == "]}," Shoulda ActiveRecord Matchers AssociationMatcher through_association_exists?":{"type":"method","name":"through_association_exists?","children":[],"call":[" model_class name "," model_class "," through_reflection nil? "," through_reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher through_association_valid?":{"type":"method","name":"through_association_valid?","children":[],"call":[" through_association_correct? "," through_association_exists? ","@through nil? "]}," Shoulda ActiveRecord Matchers AssociationMatcher has_foreign_key_missing?":{"type":"method","name":"has_foreign_key_missing?","children":[],"call":[" class_has_foreign_key? ! "," class_has_foreign_key? "," associated_class "," through? ! "," through? ","(sym :has_many) include? "]}," Shoulda ActiveRecord Matchers AssociationMatcher belongs_foreign_key_missing?":{"type":"method","name":"belongs_foreign_key_missing?","children":[],"call":[" class_has_foreign_key? ! "," class_has_foreign_key? "," model_class ","@macro == "]}," Shoulda ActiveRecord Matchers AssociationMatcher foreign_key_exists?":{"type":"method","name":"foreign_key_exists?","children":[],"call":["(or\n  (send nil :belongs_foreign_key_missing?)\n  (send nil :has_foreign_key_missing?)) ! "," has_foreign_key_missing? "," belongs_foreign_key_missing? "]}," Shoulda ActiveRecord Matchers AssociationMatcher macro_correct?":{"type":"method","name":"macro_correct?","children":[],"call":[" reflection macro "," reflection "," reflection macro == "]}," Shoulda ActiveRecord Matchers AssociationMatcher association_exists?":{"type":"method","name":"association_exists?","children":[],"call":[" reflection nil? "," reflection "]}," Shoulda ActiveRecord Matchers AssociationMatcher description":{"type":"method","name":"description","children":[],"call":[" macro_description "]}," Shoulda ActiveRecord Matchers AssociationMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers AssociationMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers AssociationMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" join_table_exists? "," dependent_correct? "," through_association_valid? "," foreign_key_exists? "," macro_correct? "," association_exists? "]}," Shoulda ActiveRecord Matchers AssociationMatcher dependent":{"type":"method","name":"dependent","children":[],"call":[]}," Shoulda ActiveRecord Matchers AssociationMatcher through":{"type":"method","name":"through","children":[],"call":[]}," Shoulda ActiveRecord Matchers AssociationMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers have_and_belong_to_many":{"type":"method","name":"have_and_belong_to_many","children":[],"call":["AssociationMatcher  new "]}," Shoulda ActiveRecord Matchers have_one":{"type":"method","name":"have_one","children":[],"call":["AssociationMatcher  new "]}," Shoulda ActiveRecord Matchers have_many":{"type":"method","name":"have_many","children":[],"call":["AssociationMatcher  new "]}," Shoulda ActiveRecord Matchers belong_to":{"type":"method","name":"belong_to","children":[],"call":["AssociationMatcher  new "]}," Shoulda ActiveRecord Matchers AllowValueMatcher error_description":{"type":"method","name":"error_description","children":[],"call":[" pretty_error_messages ","@instance errors empty? ","@instance errors "]}," Shoulda ActiveRecord Matchers AllowValueMatcher expectation":{"type":"method","name":"expectation","children":[],"call":["(str \"errors to include \") << ","@value inspect ","@expected_message inspect ","errors  << << ","errors  << "]}," Shoulda ActiveRecord Matchers AllowValueMatcher errors_match_string?":{"type":"method","name":"errors_match_string?","children":[],"call":["@errors include? "]}," Shoulda ActiveRecord Matchers AllowValueMatcher errors_match_regexp?":{"type":"method","name":"errors_match_regexp?","children":[],"call":["@matched_error nil? ! ","@matched_error nil? ","e =~ ","@errors detect ","Regexp  === "]}," Shoulda ActiveRecord Matchers AllowValueMatcher errors_match?":{"type":"method","name":"errors_match?","children":[],"call":[" errors_match_string? "," errors_match_regexp? ","@errors is_a? ","@instance errors on ","@instance errors ","@instance valid? ","@errors != ","@errors compact any? ","@errors compact "," errors_for_attribute ","@instance errors on  is_a? "," errors_for_attribute  is_a? ","@instance errors on  != "," errors_for_attribute  != ","@instance errors on  compact any? "," errors_for_attribute  compact any? ","@instance errors on  compact "," errors_for_attribute  compact "]}," Shoulda ActiveRecord Matchers AllowValueMatcher description":{"type":"method","name":"description","children":[],"call":["@value inspect "]}," Shoulda ActiveRecord Matchers AllowValueMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" error_description "," expectation "]}," Shoulda ActiveRecord Matchers AllowValueMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers AllowValueMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" errors_match? ! "," errors_match? ","@instance send "," default_error_message ","Symbol  === "]}," Shoulda ActiveRecord Matchers AllowValueMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers AllowValueMatcher for":{"type":"method","name":"for","children":[],"call":[]}," Shoulda ActiveRecord Matchers AllowValueMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers allow_value":{"type":"method","name":"allow_value","children":[],"call":["AllowValueMatcher  new "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher class_name":{"type":"method","name":"class_name","children":[],"call":["@subject class name ","@subject class "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher attr_mass_assignable?":{"type":"method","name":"attr_mass_assignable?","children":[],"call":[" protected_attributes include? ! "," protected_attributes include? "," protected_attributes "," accessible_attributes include? "," accessible_attributes "," whitelisting? "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher whitelisting?":{"type":"method","name":"whitelisting?","children":[],"call":[" accessible_attributes empty? ! "," accessible_attributes empty? "," accessible_attributes "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher accessible_attributes":{"type":"method","name":"accessible_attributes","children":[],"call":["@subject class accessible_attributes ","@subject class "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher protected_attributes":{"type":"method","name":"protected_attributes","children":[],"call":["@subject class protected_attributes ","@subject class "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" whitelisting? ","(begin\n  (send nil :class_name)) << << ","(begin\n  (send nil :class_name)) << "," protected_attributes to_a to_sentence "," protected_attributes to_a "," protected_attributes "," class_name "," protected_attributes empty? "," attr_mass_assignable? "]}," Shoulda ActiveRecord Matchers AllowMassAssignmentOfMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["attribute to_s "]}," Shoulda ActiveRecord Matchers allow_mass_assignment_of":{"type":"method","name":"allow_mass_assignment_of","children":[],"call":["AllowMassAssignmentOfMatcher  new "]}," Shoulda ActiveRecord Macros should_have_named_scope":{"type":"method","name":"should_have_named_scope","children":[],"call":[" assert_accepts ","klass new ","matcher in_context "," should ","matcher description "," have_named_scope finding "," have_named_scope "," model_class "," subject "," model_class  new "," have_named_scope finding  in_context "," have_named_scope finding  description "]}," Shoulda ActiveRecord Macros should_require_acceptance_of":{"type":"method","name":"should_require_acceptance_of","children":[],"call":[" should_validate_acceptance_of "," warn ","[DEPRECATION] should_require_acceptance_of is deprecated.  << "]}," Shoulda ActiveRecord Macros should_validate_acceptance_of":{"type":"method","name":"should_validate_acceptance_of","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," validate_acceptance_of with_message "," validate_acceptance_of ","attributes each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," validate_acceptance_of with_message  description "," validate_acceptance_of with_ get_options!  "]}," Shoulda ActiveRecord Macros should_have_indices":{"type":"method","name":"should_have_indices","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_index unique "," have_index ","columns each "," model_class "," get_options! "," should_have_db_indices "," warn ","[DEPRECATION] should_have_indices is deprecated.  << "," model_class  new "," have_index unique  description "," have_index  get_options!  "]}," Shoulda ActiveRecord Macros should_have_db_columns":{"type":"method","name":"should_have_db_columns","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_db_column of_type with_options "," have_db_column of_type "," have_db_column ","columns each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," have_db_column of_type with_options  description "]}," Shoulda ActiveRecord Macros should_have_instance_methods":{"type":"method","name":"should_have_instance_methods","children":[],"call":[" assert_respond_to ","klass name ","klass new "," should ","methods each "," model_class "," get_options! "," described_type "," ActiveSupport Deprecation  warn "," model_class  name "," described_type  name "," model_class  new "," described_type  new "]}," Shoulda ActiveRecord Macros should_have_class_methods":{"type":"method","name":"should_have_class_methods","children":[],"call":[" assert_respond_to ","klass name "," should ","methods each "," model_class "," get_options! "," described_type "," ActiveSupport Deprecation  warn "," model_class  name "," described_type  name "]}," Shoulda ActiveRecord Macros should_belong_to":{"type":"method","name":"should_belong_to","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," belong_to dependent "," belong_to ","associations each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," belong_to dependent  description "," belong_to  get_options!  "]}," Shoulda ActiveRecord Macros should_have_and_belong_to_many":{"type":"method","name":"should_have_and_belong_to_many","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_and_belong_to_many ","associations each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," have_and_belong_to_many  description "]}," Shoulda ActiveRecord Macros should_have_one":{"type":"method","name":"should_have_one","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_one dependent "," have_one ","associations each "," model_class "," get_options! "," subject "," have_one dependent through "," ActiveSupport Deprecation  warn "," model_class  new "," have_one dependent  description "," have_one dependent through  description "," have_one  get_options!  "," have_one  get_options!  through "]}," Shoulda ActiveRecord Macros should_have_many":{"type":"method","name":"should_have_many","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_many through dependent "," have_many through "," have_many ","associations each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," have_many through dependent  description "]}," Shoulda ActiveRecord Macros should_only_allow_numeric_values_for":{"type":"method","name":"should_only_allow_numeric_values_for","children":[],"call":[" should_validate_numericality_of "," warn ","[DEPRECATION] should_only_allow_numeric_values_for is  << "]}," Shoulda ActiveRecord Macros should_validate_numericality_of":{"type":"method","name":"should_validate_numericality_of","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," validate_numericality_of with_message "," validate_numericality_of ","attributes each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," validate_numericality_of with_message  description "," validate_numericality_of with_ get_options!  "]}," Shoulda ActiveRecord Macros should_ensure_value_in_range":{"type":"method","name":"should_ensure_value_in_range","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," ensure_inclusion_of in_range with_message with_low_message with_high_message "," ensure_inclusion_of in_range with_message with_low_message "," ensure_inclusion_of in_range with_message "," ensure_inclusion_of in_range "," ensure_inclusion_of "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," default_error_message "," ensure_inclusion_of in_range with_message with_low_message with_high_message  description "," ensure_inclusion_of in_range with_message  description "," ensure_inclusion_of in_range with_ get_options!  with_low_ get_options!  with_high_ get_options!  "," ensure_inclusion_of in_range with_ get_options!  with_low_ get_options!  "," ensure_inclusion_of in_range with_ get_options!  "," default_error_ get_options!  "]}," Shoulda ActiveRecord Macros should_ensure_length_is":{"type":"method","name":"should_ensure_length_is","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," ensure_length_of is_equal_to with_message "," ensure_length_of is_equal_to "," ensure_length_of "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," ensure_length_of is_equal_to with_message  description "," ensure_length_of is_equal_to with_ get_options!  "]}," Shoulda ActiveRecord Macros should_ensure_length_at_least":{"type":"method","name":"should_ensure_length_at_least","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," ensure_length_of is_at_least with_short_message "," ensure_length_of is_at_least "," ensure_length_of "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," ensure_length_of is_at_least with_short_message  description "," ensure_length_of is_at_least with_ get_options!  "]}," Shoulda ActiveRecord Macros should_ensure_length_in_range":{"type":"method","name":"should_ensure_length_in_range","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," ensure_length_of is_at_least with_short_message is_at_most with_long_message "," ensure_length_of is_at_least with_short_message is_at_most ","range last "," ensure_length_of is_at_least with_short_message "," ensure_length_of is_at_least ","range first "," ensure_length_of "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," ensure_length_of is_at_least with_short_message is_at_most with_long_message  description "]}," Shoulda ActiveRecord Macros should_allow_values_for":{"type":"method","name":"should_allow_values_for","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," allow_value for "," allow_value ","good_values each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," allow_value for  description "]}," Shoulda ActiveRecord Macros should_not_allow_values_for":{"type":"method","name":"should_not_allow_values_for","children":[],"call":[" assert_rejects "," get_instance_of "," should ","matcher description "," allow_value for with_message "," allow_value for "," allow_value ","bad_values each "," model_class "," get_options! "," subject "," should_not "," ActiveSupport Deprecation  warn "," allow_value for with_message  description "," allow_value for with_ get_options!  "]}," Shoulda ActiveRecord Macros should_have_readonly_attributes":{"type":"method","name":"should_have_readonly_attributes","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," have_readonly_attribute ","attributes each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," have_readonly_attribute  description "]}," Shoulda ActiveRecord Macros should_protect_attributes":{"type":"method","name":"should_protect_attributes","children":[],"call":[" should_not_allow_mass_assignment_of "," warn ","[DEPRECATION] should_protect_attributes is deprecated.  << "]}," Shoulda ActiveRecord Macros should_not_allow_mass_assignment_of":{"type":"method","name":"should_not_allow_mass_assignment_of","children":[],"call":[" assert_rejects ","klass new "," should ","matcher description "," allow_mass_assignment_of ","attributes each "," model_class "," get_options! "," subject "," should_not "," ActiveSupport Deprecation  warn "," model_class  new "," allow_mass_assignment_of  description "]}," Shoulda ActiveRecord Macros should_allow_mass_assignment_of":{"type":"method","name":"should_allow_mass_assignment_of","children":[],"call":[" assert_accepts ","klass new "," should ","matcher description "," allow_mass_assignment_of ","attributes each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," model_class  new "," allow_mass_assignment_of  description "]}," Shoulda ActiveRecord Macros should_require_unique_attributes":{"type":"method","name":"should_require_unique_attributes","children":[],"call":[" should_validate_uniqueness_of "," warn ","[DEPRECATION] should_require_unique_attributes is deprecated.  << "]}," Shoulda ActiveRecord Macros should_validate_uniqueness_of":{"type":"method","name":"should_validate_uniqueness_of","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description ","matcher case_insensitive "," validate_uniqueness_of with_message scoped_to "," validate_uniqueness_of with_message "," validate_uniqueness_of ","attributes each "," model_class ","case_sensitive nil? ","(splat\n  (lvar :scope)) compact "," get_options! "," subject "," ActiveSupport Deprecation  warn ","matcher case_insensitive  description "," validate_uniqueness_of with_message scoped_to  description ","matcher case_insensitive  case_insensitive "," validate_uniqueness_of with_message scoped_to  case_insensitive "," validate_uniqueness_of with_message (splat\n  (lvar :scope)) compact d_to ","(splat\n  (lvar :(splat\n  (lvar :scope)) compact )) compact "]}," Shoulda ActiveRecord Macros should_require_attributes":{"type":"method","name":"should_require_attributes","children":[],"call":[" should_validate_presence_of "," warn ","[DEPRECATION] should_require_attributes is deprecated.  << "]}," Shoulda ActiveRecord Macros should_validate_presence_of":{"type":"method","name":"should_validate_presence_of","children":[],"call":[" assert_accepts "," get_instance_of "," should ","matcher description "," validate_presence_of with_message "," validate_presence_of ","attributes each "," model_class "," get_options! "," subject "," ActiveSupport Deprecation  warn "," validate_presence_of with_message  description "," validate_presence_of with_ get_options!  "]}," Shoulda ActiveRecord Helpers default_error_message":{"type":"method","name":"default_error_message","children":[],"call":[" ActiveRecord Errors  default_error_messages [] % ","values [] "," ActiveRecord Errors  default_error_messages [] "," ActiveRecord Errors  default_error_messages ","I18n  translate ","Object  const_defined? ","result =~ ","I18n  translate  =~ "]}," Shoulda ActiveRecord Helpers instance_variable_name_for":{"type":"method","name":"instance_variable_name_for","children":[],"call":["klass to_s split last underscore ","klass to_s split last ","klass to_s split ","klass to_s "]}," Shoulda ActiveRecord Helpers get_instance_of":{"type":"method","name":"get_instance_of","children":[],"call":["klass new "," instance_variable_get "," instance_variable_name_for ","object_or_klass is_a? "]}," Shoulda ActiveRecord Helpers pretty_error_messages":{"type":"method","name":"pretty_error_messages","children":[],"call":["msg << ","obj send inspect ","obj send ","a to_sym == ","a to_sym ","obj errors map ","obj errors "]}," Shoulda ActiveRecord Assertions assert_bad_value":{"type":"method","name":"assert_bad_value","children":[],"call":[" assert_rejects "," allow_value for with_message "," allow_value for "," allow_value "," get_instance_of "]}," Shoulda ActiveRecord Assertions assert_good_value":{"type":"method","name":"assert_good_value","children":[],"call":[" assert_accepts "," allow_value for with_message "," allow_value for "," allow_value "," get_instance_of "]}," Shoulda ActiveRecord Assertions assert_valid":{"type":"method","name":"assert_valid","children":[],"call":[" assert "," pretty_error_messages ","obj valid? "]}," Shoulda ActiveRecord Assertions assert_save":{"type":"method","name":"assert_save","children":[],"call":["obj reload "," assert "," pretty_error_messages ","obj save "]}," Shoulda ActionView Macros should_render_page_with_metadata":{"type":"method","name":"should_render_page_with_metadata","children":[],"call":[" assert_select ","value is_a? ","key to_sym == ","key to_sym "," should ","options each "," warn "]}," Shoulda ActionView Macros should_render_a_form":{"type":"method","name":"should_render_a_form","children":[],"call":[" assert_select "," should "," warn "]}," Shoulda ActionMailer Assertions assert_did_not_send_email":{"type":"method","name":"assert_did_not_send_email","children":[],"call":[" assert "," ActionMailer Base  deliveries empty? "," ActionMailer Base  deliveries ","msg << ","m to to_sentence ","m to ","m subject "," ActionMailer Base  deliveries each "," ActionMailer Base  deliveries size "," ActiveSupport Deprecation  warn "]}," Shoulda ActionMailer Assertions assert_sent_email":{"type":"method","name":"assert_sent_email","children":[],"call":[" assert ","matching_emails empty? ! ","matching_emails empty? ","emails select "," block_given? ","emails empty? ! ","emails empty? "," ActionMailer Base  deliveries "," ActiveSupport Deprecation  warn ","matching_ ActionMailer Base  deliveries  empty? ! ","matching_ ActionMailer Base  deliveries  empty? "," ActionMailer Base  deliveries  select "," ActionMailer Base  deliveries  empty? ! "," ActionMailer Base  deliveries  empty? "]}," Shoulda ActionController Matchers SetTheFlashMatcher flash_description":{"type":"method","name":"flash_description","children":[],"call":[" flash inspect "," flash "," flash blank? "]}," Shoulda ActionController Matchers SetTheFlashMatcher expectation":{"type":"method","name":"expectation","children":[],"call":["expectation << "," flash_description ","@value inspect ","@value nil? "]}," Shoulda ActionController Matchers SetTheFlashMatcher flash":{"type":"method","name":"flash","children":[],"call":["@controller response session [] ","@controller response session ","@controller response ","@controller send ","flash_and_now delete ","flash keys each ","flash keys ","@controller request session [] ","@controller request session ","@controller request ","@controller request session [] dup ","@controller send _and_now delete ","@controller request session []  delete ","@controller request session [] dup  delete ","@controller send  keys each ","@controller send  keys "]}," Shoulda ActionController Matchers SetTheFlashMatcher regexp_value_matches?":{"type":"method","name":"regexp_value_matches?","children":[],"call":["value =~ "," flash values any? "," flash values "," flash ","Regexp  === "]}," Shoulda ActionController Matchers SetTheFlashMatcher string_value_matches?":{"type":"method","name":"string_value_matches?","children":[],"call":["value == "," flash values any? "," flash values "," flash ","String  === "]}," Shoulda ActionController Matchers SetTheFlashMatcher sets_the_flash?":{"type":"method","name":"sets_the_flash?","children":[],"call":[" flash blank? ! "," flash blank? "," flash "]}," Shoulda ActionController Matchers SetTheFlashMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers SetTheFlashMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers SetTheFlashMatcher description":{"type":"method","name":"description","children":[],"call":["description << ","@value inspect ","@value nil? "]}," Shoulda ActionController Matchers SetTheFlashMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" regexp_value_matches? "," string_value_matches? "," sets_the_flash? "]}," Shoulda ActionController Matchers SetTheFlashMatcher to":{"type":"method","name":"to","children":[],"call":[]}," Shoulda ActionController Matchers set_the_flash":{"type":"method","name":"set_the_flash","children":[],"call":["SetTheFlashMatcher  new "]}," Shoulda ActionController Matchers SetSessionMatcher result":{"type":"method","name":"result","children":[],"call":[" session inspect "," session "," session empty? "]}," Shoulda ActionController Matchers SetSessionMatcher expectation":{"type":"method","name":"expectation","children":[],"call":["expectation << ","@value inspect "]}," Shoulda ActionController Matchers SetSessionMatcher session":{"type":"method","name":"session","children":[],"call":["@controller response session data ","@controller response session ","@controller response ","@controller request session to_hash ","@controller request session ","@controller request ","@controller request respond_to? "]}," Shoulda ActionController Matchers SetSessionMatcher assigned_value":{"type":"method","name":"assigned_value","children":[],"call":[" session [] "," session "]}," Shoulda ActionController Matchers SetSessionMatcher assigned_correct_value?":{"type":"method","name":"assigned_correct_value?","children":[],"call":[" assigned_value == "," assigned_value ","@value nil? "]}," Shoulda ActionController Matchers SetSessionMatcher assigned_value?":{"type":"method","name":"assigned_value?","children":[],"call":[" assigned_value blank? ! "," assigned_value blank? "," assigned_value "," assigned_value nil? ! "," assigned_value nil? "]}," Shoulda ActionController Matchers SetSessionMatcher description":{"type":"method","name":"description","children":[],"call":["description << ","@value inspect ","@key inspect "]}," Shoulda ActionController Matchers SetSessionMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" result "," expectation "]}," Shoulda ActionController Matchers SetSessionMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" result "," expectation "]}," Shoulda ActionController Matchers SetSessionMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" assigned_correct_value? "," assigned_value? "," cleared_value? ","@context instance_eval "]}," Shoulda ActionController Matchers SetSessionMatcher to":{"type":"method","name":"to","children":[],"call":[]}," Shoulda ActionController Matchers SetSessionMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["key to_s "]}," Shoulda ActionController Matchers set_session":{"type":"method","name":"set_session","children":[],"call":["SetSessionMatcher  new "]}," Shoulda ActionController Matchers RouteMatcher route_recognized?":{"type":"method","name":"route_recognized?","children":[],"call":["error message "," description ","@context send "]}," Shoulda ActionController Matchers RouteMatcher stringify_params!":{"type":"method","name":"stringify_params!","children":[],"call":["@params []= ","value to_param ","@params each ","v to_param ","value collect ","value is_a? "]}," Shoulda ActionController Matchers RouteMatcher guess_controller!":{"type":"method","name":"guess_controller!","children":[],"call":["@controller controller_path ","@params [] "]}," Shoulda ActionController Matchers RouteMatcher description":{"type":"method","name":"description","children":[],"call":["@params inspect ","@method to_s upcase ","@method to_s "]}," Shoulda ActionController Matchers RouteMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" route_recognized? "," stringify_params! "," guess_controller! "]}," Shoulda ActionController Matchers RouteMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionController Matchers RouteMatcher to":{"type":"method","name":"to","children":[],"call":[" stringify_params! "]}," Shoulda ActionController Matchers RouteMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActionController Matchers route":{"type":"method","name":"route","children":[],"call":["RouteMatcher  new "]}," Shoulda ActionController Matchers RespondWithMatcher expectation":{"type":"method","name":"expectation","children":[],"call":[" response_code "]}," Shoulda ActionController Matchers RespondWithMatcher symbol_to_status_code":{"type":"method","name":"symbol_to_status_code","children":[],"call":[" ActionController StatusCodes SYMBOL_TO_STATUS_CODE  [] "," ActionController Base SYMBOL_TO_STATUS_CODE  [] "," Rack Utils SYMBOL_TO_STATUS_CODE  [] "]}," Shoulda ActionController Matchers RespondWithMatcher response_code":{"type":"method","name":"response_code","children":[],"call":["@controller response response_code ","@controller response "]}," Shoulda ActionController Matchers RespondWithMatcher correct_status_code_range?":{"type":"method","name":"correct_status_code_range?","children":[],"call":["@status include? "," response_code ","@status is_a? "]}," Shoulda ActionController Matchers RespondWithMatcher correct_status_code?":{"type":"method","name":"correct_status_code?","children":[],"call":[" response_code == "," response_code "]}," Shoulda ActionController Matchers RespondWithMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActionController Matchers RespondWithMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers RespondWithMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers RespondWithMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" correct_status_code_range? "," correct_status_code? "]}," Shoulda ActionController Matchers RespondWithMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" symbol_to_status_code "]}," Shoulda ActionController Matchers respond_with":{"type":"method","name":"respond_with","children":[],"call":["RespondWithMatcher  new "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher expectation":{"type":"method","name":"expectation","children":[],"call":["(str \"content type to be \") << "," response_content_type "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher lookup_by_extension":{"type":"method","name":"lookup_by_extension","children":[],"call":["Mime Type  lookup_by_extension to_s ","Mime Type  lookup_by_extension ","extension to_s "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher response_content_type":{"type":"method","name":"response_content_type","children":[],"call":["@controller response content_type ","@controller response ","@controller response content_type to_s "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" response_content_type == "," response_content_type "," response_content_type =~ ","@content_type is_a? "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" lookup_by_extension ","content_type is_a? "]}," Shoulda ActionController Matchers respond_with_content_type":{"type":"method","name":"respond_with_content_type","children":[],"call":["RespondWithContentTypeMatcher  new "]}," Shoulda ActionController Matchers RenderWithLayout result":{"type":"method","name":"result","children":[],"call":[" layout inspect "," layout "," rendered_with_layout? ","rendered with  << ","(send\n  (send nil :rendered_layouts) :map) join ","layout inspect "," rendered_layouts map "," rendered_layouts "]}," Shoulda ActionController Matchers RenderWithLayout expectation":{"type":"method","name":"expectation","children":[],"call":[" description "]}," Shoulda ActionController Matchers RenderWithLayout layout":{"type":"method","name":"layout","children":[],"call":["layout split last ","layout split ","layout nil? ","@controller response layout ","@controller response ","@controller response layout  split last ","@controller response layout  split ","@controller response layout  nil? ","@controller response @controller response layout  "]}," Shoulda ActionController Matchers RenderWithLayout rendered_with_expected_layout?":{"type":"method","name":"rendered_with_expected_layout?","children":[],"call":[" layout == "," layout ","@layout nil? "," rendered_layouts include? "," rendered_layouts ","@expected_layout nil? "]}," Shoulda ActionController Matchers RenderWithLayout rendered_with_layout?":{"type":"method","name":"rendered_with_layout?","children":[],"call":[" layout blank? ! "," layout blank? "," layout "," rendered_layouts empty? ! "," rendered_layouts empty? "," rendered_layouts "]}," Shoulda ActionController Matchers RenderWithLayout description":{"type":"method","name":"description","children":[],"call":["description << ","@layout inspect ","@layout nil? ","@expected_layout inspect ","@expected_layout nil? "]}," Shoulda ActionController Matchers RenderWithLayout negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" result "," expectation "]}," Shoulda ActionController Matchers RenderWithLayout failure_message":{"type":"method","name":"failure_message","children":[],"call":[" result "," expectation "]}," Shoulda ActionController Matchers RenderWithLayout matches?":{"type":"method","name":"matches?","children":[],"call":[" rendered_with_expected_layout? "," rendered_with_layout? "]}," Shoulda ActionController Matchers RenderWithLayout initialize":{"type":"method","name":"initialize","children":[],"call":["layout to_s ","layout nil? ","expected_layout to_s ","expected_layout nil? "]}," Shoulda ActionController Matchers render_with_layout":{"type":"method","name":"render_with_layout","children":[],"call":["RenderWithLayout  new "]}," Shoulda ActionController Matchers FilterParamMatcher filtered_value":{"type":"method","name":"filtered_value","children":[],"call":["filtered [] ","@key to_s ","@controller send "," filtered_controller_value "," filtered_request_value "," request respond_to? "," request ","@controller send  [] "," @controller send _controller_value "," @controller send _request_value "]}," Shoulda ActionController Matchers FilterParamMatcher filters_key?":{"type":"method","name":"filters_key?","children":[],"call":[" filtered_value == "," filtered_value "]}," Shoulda ActionController Matchers FilterParamMatcher filters_params?":{"type":"method","name":"filters_params?","children":[],"call":["@controller respond_to? "," request respond_to? "," request "]}," Shoulda ActionController Matchers FilterParamMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActionController Matchers FilterParamMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Shoulda ActionController Matchers FilterParamMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Shoulda ActionController Matchers FilterParamMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" filters_key? "," filters_params? "]}," Shoulda ActionController Matchers FilterParamMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["key to_s "]}," Shoulda ActionController Matchers filter_param":{"type":"method","name":"filter_param","children":[],"call":["FilterParamMatcher  new "]}," Shoulda ActionController Matchers AssignToMatcher assigns":{"type":"method","name":"assigns","children":[],"call":["@controller response template assigns ","@controller response template ","@controller response "]}," Shoulda ActionController Matchers AssignToMatcher assigned_value":{"type":"method","name":"assigned_value","children":[],"call":[" assigns [] "," assigns ","@controller instance_variable_get "]}," Shoulda ActionController Matchers AssignToMatcher equal_to_expected_value?":{"type":"method","name":"equal_to_expected_value?","children":[],"call":["(str \"Expected action to assign \") << "," assigned_value inspect "," assigned_value ","@expected_value inspect ","(str \"Didn't expect action to assign \") << ","@expected_value == "]}," Shoulda ActionController Matchers AssignToMatcher kind_of_expected_class?":{"type":"method","name":"kind_of_expected_class?","children":[],"call":["(str \"Expected action to assign a kind of \") << << ","@variable class name ","@variable class ","(str \"Expected action to assign a kind of \") << ","@variable inspect ","(str \"Didn't expect action to assign a kind of \") << "," assigned_value kind_of? "," assigned_value "]}," Shoulda ActionController Matchers AssignToMatcher assigned_value?":{"type":"method","name":"assigned_value?","children":[],"call":["(str \"Didn't expect action to assign a value for @\") << "," assigned_value inspect "," assigned_value "," assigned_value nil? "]}," Shoulda ActionController Matchers AssignToMatcher description":{"type":"method","name":"description","children":[],"call":["description << "]}," Shoulda ActionController Matchers AssignToMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" equal_to_expected_value? "," kind_of_expected_class? "," assigned_value? ","@context instance_eval "]}," Shoulda ActionController Matchers AssignToMatcher with":{"type":"method","name":"with","children":[],"call":[]}," Shoulda ActionController Matchers AssignToMatcher with_kind_of":{"type":"method","name":"with_kind_of","children":[],"call":[]}," Shoulda ActionController Matchers AssignToMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["variable to_s "]}," Shoulda ActionController Matchers assign_to":{"type":"method","name":"assign_to","children":[],"call":["AssignToMatcher  new "]}," Shoulda ActionController Macros should_route":{"type":"method","name":"should_route","children":[],"call":[" assert_accepts ","matcher in_context "," should ","matcher description "," route to "," route ","options []= "," name gsub tableize "," name gsub "," name ","options [] "," ActiveSupport Deprecation  warn "," route to  in_context "," route to  description "]}," Shoulda ActionController Macros should_redirect_to":{"type":"method","name":"should_redirect_to","children":[],"call":[" assert_redirected_to "," eval "," send "," instantiate_variables_from_assigns "," instance_eval "," should "," warn ","[DEPRECATION] should_redirect_to without a block is  << "," redirect_to "," ActiveSupport Deprecation  warn "]}," Shoulda ActionController Macros should_render_without_layout":{"type":"method","name":"should_render_without_layout","children":[],"call":[" should_render_with_layout "," should_not "," render_with_layout "," ActiveSupport Deprecation  warn "]}," Shoulda ActionController Macros should_render_with_layout":{"type":"method","name":"should_render_with_layout","children":[],"call":[" assert_rejects "," should "," assert_accepts ","matcher description "," render_with_layout "," ActiveSupport Deprecation  warn "," render_with_layout  description "]}," Shoulda ActionController Macros should_render_template":{"type":"method","name":"should_render_template","children":[],"call":[" assert_template ","template to_s "," should ","template inspect "," render_template "," ActiveSupport Deprecation  warn "]}," Shoulda ActionController Macros should_return_from_session":{"type":"method","name":"should_return_from_session","children":[],"call":[" should_set_session "," warn ","[DEPRECATION] should_require_attributes is deprecated.  << "]}," Shoulda ActionController Macros should_set_session":{"type":"method","name":"should_set_session","children":[],"call":[" assert_accepts ","matcher to "," instance_eval "," eval "," send "," instantiate_variables_from_assigns "," should ","matcher description "," warn ","[DEPRECATION] should_set_session :key, 'val' is deprecated.  << "," set_session "," ActiveSupport Deprecation  warn ","matcher to  to "," set_session  to ","matcher to  description "," set_session  description "]}," Shoulda ActionController Macros should_respond_with_content_type":{"type":"method","name":"should_respond_with_content_type","children":[],"call":[" assert_accepts "," respond_with_content_type "," should ","matcher description "," ActiveSupport Deprecation  warn "," respond_with_content_type  description "]}," Shoulda ActionController Macros should_respond_with":{"type":"method","name":"should_respond_with","children":[],"call":[" assert_accepts "," respond_with "," should "," ActiveSupport Deprecation  warn "]}," Shoulda ActionController Macros should_not_assign_to":{"type":"method","name":"should_not_assign_to","children":[],"call":[" assert_rejects "," should ","matcher description "," assign_to ","names each "," should_not "," ActiveSupport Deprecation  warn "," assign_to  description "]}," Shoulda ActionController Macros should_assign_to":{"type":"method","name":"should_assign_to","children":[],"call":[" assert_accepts ","matcher with "," instance_eval "," eval "," send ","opts [] "," instantiate_variables_from_assigns "," should ","test_name << ","matcher description "," assign_to with_kind_of "," assign_to ","names each "," warn ","[DEPRECATION] should_assign_to :var, :equals => 'val'  << ","names extract_options! "," get_options! "," ActiveSupport Deprecation  warn ","matcher with  with "," assign_to with_kind_of  with ","names extract_options!  [] ","matcher description  << ","matcher with  description "," assign_to with_kind_of  description "]}," Shoulda ActionController Macros should_filter_params":{"type":"method","name":"should_filter_params","children":[],"call":[" assert_accepts "," should ","matcher description "," filter_param ","keys each "," ActiveSupport Deprecation  warn "," filter_param  description "]}," Shoulda ActionController Macros should_not_set_the_flash":{"type":"method","name":"should_not_set_the_flash","children":[],"call":[" should_set_the_flash_to "," assert_rejects "," should ","matcher description "," set_the_flash "," should_not "," ActiveSupport Deprecation  warn "," set_the_flash  description "]}," Shoulda ActionController Macros should_set_the_flash_to":{"type":"method","name":"should_set_the_flash_to","children":[],"call":[" assert_rejects "," should ","matcher description "," assert_accepts "," set_the_flash to "," set_the_flash "," should_not_set_the_flash "," warn ","[DEPRECATION] should_set_the_flash_to nil is deprecated.  << "," ActiveSupport Deprecation  warn "," set_the_flash to  description "]}," Shoulda ActionController Helpers instantiate_variables_from_assigns":{"type":"method","name":"instantiate_variables_from_assigns","children":[],"call":[" instance_variable_set ","old [] ","names each ","blk call "," assigns ","name to_sym ","old []= "," instance_variable_get ","@response template assigns keys - ","@response template assigns keys ","@response template assigns ","@response template ","names empty? "]}," Shoulda ActionController Matchers SetSessionMatcher cleared_value?":{"type":"method","name":"cleared_value?","children":[],"call":[" assigned_value nil? "," assigned_value ","@value nil? "]}," Shoulda Macros should_change_record_count_of":{"type":"method","name":"should_change_record_count_of","children":[],"call":[" assert_equal ","klass count ","@_before_change_record_count + "," should ","class_name to_s humanize downcase ","class_name to_s humanize ","class_name to_s "," lambda ","class_name to_s camelize constantize ","class_name to_s camelize ","class_name to_s camelize constantize  count ","klass count  + "]}," Shoulda Macros should_destroy":{"type":"method","name":"should_destroy","children":[],"call":[" should_change_record_count_of "," ActiveSupport Deprecation  warn "]}," Shoulda Macros should_create":{"type":"method","name":"should_create","children":[],"call":[" should_change_record_count_of "," ActiveSupport Deprecation  warn "]}," Shoulda Context subject":{"type":"method","name":"subject","children":[],"call":[" subject_block= "]}," Shoulda InstanceMethods instance_variable_name_for":{"type":"method","name":"instance_variable_name_for","children":[],"call":["klass to_s split last underscore ","klass to_s split last ","klass to_s split ","klass to_s "]}," Shoulda InstanceMethods get_instance_of":{"type":"method","name":"get_instance_of","children":[],"call":["klass new "," warn ","(str \"[WARNING] Using \") << << << ","(str \"[WARNING] Using \") << << ","(str \"[WARNING] Using \") << "," instance_variable_get "," instance_variable_name_for ","object_or_klass is_a? ","object_or_klass new ","  instance_variable_get _variable_get ","  instance_variable_get _variable_name_for "]}," Shoulda InstanceMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[" class subject_block "," class ","@shoulda_context subject_block "]}," Shoulda InstanceMethods subject":{"type":"method","name":"subject","children":[],"call":[" get_instance_of "," class described_type "," class "," instance_eval "," subject_block "," construct_subject "]}," Shoulda ClassMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[]}," Shoulda ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[]}," Shoulda ClassMethods described_type":{"type":"method","name":"described_type","children":[],"call":[" name gsub constantize "," name gsub "," name "]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" allows_value_of "," disallows_value_of "]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher not_with":{"type":"method","name":"not_with","children":[],"call":[" raise "]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher with":{"type":"method","name":"with","children":[],"call":[" raise "]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher with_message":{"type":"method","name":"with_message","children":[],"call":[]}," Shoulda ActiveRecord Matchers ValidateFormatOfMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActiveRecord Matchers validate_format_of":{"type":"method","name":"validate_format_of","children":[],"call":["ValidateFormatOfMatcher  new "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher normalize_columns_to_array":{"type":"method","name":"normalize_columns_to_array","children":[],"call":["columns to_s ","each to_s ","columns collect ","columns class == ","columns class "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher index_type":{"type":"method","name":"index_type","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher expectation":{"type":"method","name":"expectation","children":[],"call":[" description "," model_class name "," model_class "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher indexes":{"type":"method","name":"indexes","children":[],"call":[" ActiveRecord Base  connection indexes "," table_name "," ActiveRecord Base  connection "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher table_name":{"type":"method","name":"table_name","children":[],"call":[" model_class table_name "," model_class "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher model_class":{"type":"method","name":"model_class","children":[],"call":["@subject class "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher matched_index":{"type":"method","name":"matched_index","children":[],"call":["each columns == ","each columns "," indexes detect "," indexes "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher correct_unique?":{"type":"method","name":"correct_unique?","children":[],"call":["(begin\n  (send nil :table_name)) << "," matched_index unique "," matched_index "," matched_index name "," table_name "," matched_index unique == ","@unique nil? "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher index_exists?":{"type":"method","name":"index_exists?","children":[],"call":[" matched_index nil? ! "," matched_index nil? "," matched_index "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher description":{"type":"method","name":"description","children":[],"call":["@columns join "," index_type "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" expectation "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" correct_unique? "," index_exists? "]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher unique":{"type":"method","name":"unique","children":[],"call":[]}," Shoulda ActiveRecord Matchers HaveDbIndexMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_columns_to_array "]}," Shoulda ActiveRecord Matchers have_db_index":{"type":"method","name":"have_db_index","children":[],"call":["HaveDbIndexMatcher  new "]}," Shoulda ActiveRecord Macros should_have_index":{"type":"method","name":"should_have_index","children":[],"call":[" should_have_db_index "," warn ","[DEPRECATION] should_have_index is deprecated.  << "]}," Shoulda ActiveRecord Macros should_have_db_indices":{"type":"method","name":"should_have_db_indices","children":[],"call":[" assert_accepts "," subject "," should ","matcher description "," have_db_index unique "," have_db_index ","columns each "," get_options! "," ActiveSupport Deprecation  warn "," have_db_index unique  description "," have_db_index  get_options!  "]}," Shoulda ActionController Matchers RespondWithContentTypeMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda Context subject_block":{"type":"method","name":"subject_block","children":[],"call":[" parent subject_block "," parent "]}," Shoulda InstanceMethods construct_subject":{"type":"method","name":"construct_subject","children":[],"call":[" get_instance_of "," class described_type "," class "," instance_eval "," subject_block "]}," Shoulda Context should_not":{"type":"method","name":"should_not","children":[],"call":[" shoulds << "," shoulds "," assert_rejects "," subject "," lambda ","matcher description "]}," Shoulda ClassMethods should_not":{"type":"method","name":"should_not","children":[],"call":["context build "," should_not ","Shoulda Context  new "," name gsub "," name ","Shoulda  current_context should_not ","Shoulda  current_context "]}," Shoulda ActiveRecord Matchers AllowValueMatcher errors_for_attribute":{"type":"method","name":"errors_for_attribute","children":[],"call":["instance errors on ","instance errors ","instance errors [] ","instance errors respond_to? "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher regexp_or_string_match_in_array":{"type":"method","name":"regexp_or_string_match_in_array","children":[],"call":["an_array include? ","(send\n  (lvar :an_array) :detect) any? ","e =~ ","an_array detect "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher regexp_or_string_match":{"type":"method","name":"regexp_or_string_match","children":[],"call":["a_string == ","a_string =~ "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher anything_failed?":{"type":"method","name":"anything_failed?","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["@mail to inspect ","@mail to ","@mail from inspect ","@mail from ","@mail body inspect ","@mail body ","@mail subject inspect ","@mail subject "," anything_failed? ","@recipient inspect ","@sender inspect ","@body inspect ","@email_subject inspect "," expectation "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":["@mail to inspect ","@mail to ","@mail from inspect ","@mail from ","@mail body inspect ","@mail body ","@mail subject inspect ","@mail subject "," anything_failed? ","@recipient inspect ","@sender inspect ","@body inspect ","@email_subject inspect "," expectation "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" anything_failed? "," regexp_or_string_match_in_array ! "," regexp_or_string_match_in_array ","mail to ","mail from "," regexp_or_string_match ! "," regexp_or_string_match ","mail body ","mail subject "," ActionMailer Base  deliveries each "," ActionMailer Base  deliveries "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher to":{"type":"method","name":"to","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher with_body":{"type":"method","name":"with_body","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher from":{"type":"method","name":"from","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher with_subject":{"type":"method","name":"with_subject","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActionMailer Matchers have_sent_email":{"type":"method","name":"have_sent_email","children":[],"call":["HaveSentEmailMatcher  new "]}," TestCase subject":{"type":"method","name":"subject","children":[],"call":[]}," Shoulda ActionController Matchers SetSessionMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionController Matchers RenderWithLayout recorded_layouts":{"type":"method","name":"recorded_layouts","children":[],"call":["@context instance_variable_get "]}," Shoulda ActionController Matchers RenderWithLayout rendered_layouts":{"type":"method","name":"rendered_layouts","children":[],"call":["layout split last ","layout split ","layout nil? ","@controller response layout ","@controller response ","layout sub "," recorded_layouts keys compact map "," recorded_layouts keys compact "," recorded_layouts keys "," recorded_layouts ","@controller response layout  split last ","@controller response layout  split ","@controller response layout  nil? ","@controller response @controller response layout  ","@controller response layout  sub "," recorded_@controller response layout s keys compact map "," recorded_@controller response layout s keys compact "," recorded_@controller response layout s keys "," recorded_@controller response layout s "]}," Shoulda ActionController Matchers RenderWithLayout in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionController Matchers RenderTemplateMatcher renders_template?":{"type":"method","name":"renders_template?","children":[],"call":["error message ","@context send "]}," Shoulda ActionController Matchers RenderTemplateMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionController Matchers RenderTemplateMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActionController Matchers RenderTemplateMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" renders_template? "]}," Shoulda ActionController Matchers RenderTemplateMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["template to_s "]}," Shoulda ActionController Matchers render_template":{"type":"method","name":"render_template","children":[],"call":["RenderTemplateMatcher  new "]}," Shoulda ActionController Matchers RedirectToMatcher redirects_to_url?":{"type":"method","name":"redirects_to_url?","children":[],"call":["error message ","@context send ","@context instance_eval "]}," Shoulda ActionController Matchers RedirectToMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Shoulda ActionController Matchers RedirectToMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" redirects_to_url? "]}," Shoulda ActionController Matchers RedirectToMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionController Matchers RedirectToMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Shoulda ActionController Matchers redirect_to":{"type":"method","name":"redirect_to","children":[],"call":["RedirectToMatcher  new "]}," Shoulda ActionController Matchers FilterParamMatcher request":{"type":"method","name":"request","children":[],"call":[" ActionController TestRequest  new "]}," Shoulda ActionController Matchers FilterParamMatcher filtered_request_value":{"type":"method","name":"filtered_request_value","children":[],"call":[" request filtered_parameters [] ","@key to_s "," request filtered_parameters "," request "," request env []= "," request env "]}," Shoulda ActionController Matchers FilterParamMatcher filtered_controller_value":{"type":"method","name":"filtered_controller_value","children":[],"call":["filtered [] ","@key to_s ","@controller send ","@controller send  [] "]}," Shoulda ActionController Matchers AssignToMatcher in_context":{"type":"method","name":"in_context","children":[],"call":[]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher inspect_deliveries":{"type":"method","name":"inspect_deliveries","children":[],"call":["(send\n  (send\n    (const\n      (const\n        (cbase) :ActionMailer) :Base) :deliveries) :map) join ","delivery to inspect ","delivery to ","delivery subject inspect ","delivery subject "," ActionMailer Base  deliveries map "," ActionMailer Base  deliveries "]}," Shoulda ActionMailer Matchers HaveSentEmailMatcher expectation":{"type":"method","name":"expectation","children":[],"call":["expectation << "," inspect_deliveries ","@recipient inspect ","@sender inspect ","@body inspect ","@email_subject inspect "]}," Shoulda ActionController Matchers SetTheFlashMatcher now":{"type":"method","name":"now","children":[],"call":[]}," Shoulda Controller ResourceOptions ensure_valid_members":{"type":"method","name":"ensure_valid_members","children":[],"call":[" raise ","invalid inspect ","invalid empty? ","ary - ","ary -  inspect ","ary -  empty? "]}," Shoulda Controller ResourceOptions normalize!":{"type":"method","name":"normalize!","children":[],"call":["@denied redirect ","@update redirect ","@create redirect ","(block\n  (send\n    (ivar :@parent) :map)\n  (args\n    (arg :n))\n  (dstr\n    (str \"@\")\n    (begin\n      (send nil :object))\n    (str \".\")\n    (begin\n      (lvar :n)))) flatten join ","(block\n  (send\n    (ivar :@parent) :map)\n  (args\n    (arg :n))\n  (dstr\n    (str \"@\")\n    (begin\n      (send nil :object))\n    (str \".\")\n    (begin\n      (lvar :n)))) flatten "," object ","@parent map ","(ivar :@parent) flatten join ","(ivar :@parent) flatten ","@destroy redirect ","(send\n  (ivar :@parent) :map) join ","@object to_s pluralize ","@object to_s ","@parent is_a? ","@klass name tableize singularize ","@klass name tableize ","@klass name ","target name gsub singularize constantize ","target name gsub singularize ","target name gsub ","target name "," ensure_valid_members ","@denied actions ","@formats map ","@actions map ","@denied actions= ","@denied actions map ","@formats == ","@actions == ","@denied actions == ","@formats map  map ","@actions map  map ","@formats map  == ","@actions map  == "]}," Shoulda Controller ResourceOptions initialize":{"type":"method","name":"initialize","children":[],"call":["@denied actions= ","@update params ","@create params ","@denied flash ","@destroy flash ","@update flash ","@create flash ","DeniedOptions  new ","ActionOptions  new ","DeniedOptions  new  actions= ","ActionOptions  new  params ","DeniedOptions  new  flash ","ActionOptions  new  flash "]}," Shoulda Controller Macros should_route":{"type":"method","name":"should_route","children":[],"call":[" assert_routing "," should ","options inspect ","method to_s upcase ","method to_s ","populated_path gsub! ","value to_s ","key inspect ","options []= ","value to_param ","value respond_to? ","options each ","path dup ","options [] to_s ","options [] "," name gsub tableize "," name gsub "," name ","path dup  gsub! "]}," Shoulda Controller Macros should_render_page_with_metadata":{"type":"method","name":"should_render_page_with_metadata","children":[],"call":[" assert_select ","value is_a? ","key to_sym == ","key to_sym "," should ","options each "]}," Shoulda Controller Macros should_render_a_form":{"type":"method","name":"should_render_a_form","children":[],"call":[" assert_select "," should "]}," Shoulda Controller Macros should_redirect_to":{"type":"method","name":"should_redirect_to","children":[],"call":[" assert_redirected_to "," eval "," send "," instantiate_variables_from_assigns "," should ","url inspect "]}," Shoulda Controller Macros should_render_without_layout":{"type":"method","name":"should_render_without_layout","children":[],"call":[" should_render_with_layout "]}," Shoulda Controller Macros should_render_with_layout":{"type":"method","name":"should_render_with_layout","children":[],"call":[" assert_nil ","@response layout "," should "," assert_equal ","expected_layout to_s ","@response layout split last ","@response layout split ","@response layout blank? ","expected_layout inspect "]}," Shoulda Controller Macros should_render_template":{"type":"method","name":"should_render_template","children":[],"call":[" assert_template ","template to_s "," should ","template inspect "]}," Shoulda Controller Macros should_return_from_session":{"type":"method","name":"should_return_from_session","children":[],"call":[" assert_equal "," session [] "," session ","expected_value inspect "," eval "," send "," instantiate_variables_from_assigns "," should "," eval  inspect "]}," Shoulda Controller Macros should_respond_with_content_type":{"type":"method","name":"should_respond_with_content_type","children":[],"call":[" assert_equal ","@response content_type "," assert_match ","content_type is_a? ","Mime EXTENSION_LOOKUP  [] to_s ","Mime EXTENSION_LOOKUP  [] ","content_type to_s "," should ","@response Mime EXTENSION_LOOKUP  [] to_s  ","Mime EXTENSION_LOOKUP  [] to_s  is_a? ","Mime EXTENSION_LOOKUP  [] to_s  to_s "]}," Shoulda Controller Macros should_respond_with":{"type":"method","name":"should_respond_with","children":[],"call":[" assert_response "," should "]}," Shoulda Controller Macros should_not_assign_to":{"type":"method","name":"should_not_assign_to","children":[],"call":[" assert "," assigns ! "," assigns ","name to_sym "," should ","names each "]}," Shoulda Controller Macros should_assign_to":{"type":"method","name":"should_assign_to","children":[],"call":[" assert_equal ","(str \"Instance variable @\") + "," eval "," send ","opts [] "," instantiate_variables_from_assigns "," assert_kind_of "," assert_not_nil "," assigns ","name to_sym "," should ","test_name << ","names each ","names extract_options! ","names extract_options!  [] "]}," Shoulda Controller Macros should_filter_params":{"type":"method","name":"should_filter_params","children":[],"call":[" assert_equal ","filtered [] ","key to_s ","@controller send "," assert ","@controller respond_to? "," should ","keys each ","@controller send  [] "]}," Shoulda Controller Macros should_not_set_the_flash":{"type":"method","name":"should_not_set_the_flash","children":[],"call":[" should_set_the_flash_to "]}," Shoulda Controller Macros should_set_the_flash_to":{"type":"method","name":"should_set_the_flash_to","children":[],"call":[" assert_equal "," flash inspect "," flash "," should "," assert_contains "," flash values ","val inspect "]}," Shoulda Controller Macros should_be_restful":{"type":"method","name":"should_be_restful","children":[],"call":[" flunk "," should "," send "," respond_to? ","resource actions each ","resource actions ","resource formats each ","resource formats ","resource normalize! ","blk call ","ResourceOptions  new "," warn ","ResourceOptions  new  actions each ","ResourceOptions  new  actions ","ResourceOptions  new  formats each ","ResourceOptions  new  formats ","ResourceOptions  new  normalize! "]}," Shoulda Controller Helpers make_parent_params":{"type":"method","name":"make_parent_params","children":[],"call":["(pair\n  (dsym\n    (begin\n      (lvar :parent_name))\n    (str \"_id\"))\n  (send\n    (lvar :parent) :to_param)) merge "," make_parent_params ","parent to_param ","parent_name to_s classify constantize find ","parent_name to_s classify constantize ","parent_name to_s classify ","parent_name to_s ","record send ","parent_names shift ","parent_names == ","resource parents reverse ","resource parents ","(pair\n  (dsym\n    (begin\n      (lvar :parent_name to_s classify constantize find _name))\n    (str \"_id\"))\n  (send\n    (lvar :parent_name to_s classify constantize find ) :to_param)) merge ","(pair\n  (dsym\n    (begin\n      (lvar :record send _name))\n    (str \"_id\"))\n  (send\n    (lvar :record send ) :to_param)) merge ","(pair\n  (dsym\n    (begin\n      (lvar :parent_names shift ))\n    (str \"_id\"))\n  (send\n    (lvar :parent) :to_param)) merge "," make_parent_name to_s classify constantize find _params "," make_record send _params ","parent_name to_s classify constantize find  to_param ","record send  to_param ","parent_name to_s classify constantize find _name to_s classify constantize find ","record send _name to_s classify constantize find ","parent_names shift  to_s classify constantize find ","parent_name to_s classify constantize find _name to_s classify constantize ","record send _name to_s classify constantize ","parent_names shift  to_s classify constantize ","parent_name to_s classify constantize find _name to_s classify ","record send _name to_s classify ","parent_names shift  to_s classify ","parent_name to_s classify constantize find _name to_s ","record send _name to_s ","parent_names shift  to_s ","parent_name to_s classify constantize find _names shift ","record send _names shift ","parent_names shift s shift ","parent_name to_s classify constantize find _names == ","record send _names == ","parent_names shift s == ","resource parent_name to_s classify constantize find s reverse ","resource record send s reverse ","resource parent_name to_s classify constantize find s ","resource record send s "]}," Shoulda Controller Helpers get_existing_record":{"type":"method","name":"get_existing_record","children":[],"call":[" assert ","res object "," returning "," instance_variable_get "]}," Shoulda Controller Helpers instantiate_variables_from_assigns":{"type":"method","name":"instantiate_variables_from_assigns","children":[],"call":[" instance_variable_set ","old [] ","names each ","blk call "," assigns ","name to_sym ","old []= "," instance_variable_get ","@response template assigns keys - ","@response template assigns keys ","@response template assigns ","@response template ","names empty? "]}," Shoulda Controller XML assert_xml_response":{"type":"method","name":"assert_xml_response","children":[],"call":[" assert_match ","@response body first chomp ","@response body first ","@response body ","regex inspect ","content_type inspect ","(or\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"Content-Type\"))\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"type\"))) to_s ","@response headers [] ","@response headers ","(or\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"Content-Type\"))\n  (send\n    (send\n      (ivar :@response) :headers) :[]\n    (str \"type\"))) to_s  inspect "]}," Shoulda Controller XML request_xml":{"type":"method","name":"request_xml","children":[],"call":["@request accept= "]}," Shoulda Controller XML ClassMethods make_update_xml_tests":{"type":"method","name":"make_update_xml_tests","children":[],"call":[" assert_equal ","res object "," assigns errors full_messages "," assigns errors "," assigns "," should "," should_assign_to "," should_respond_with "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," put ","parent_params merge ","res update params ","res update ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," Shoulda Controller XML ClassMethods make_create_xml_tests":{"type":"method","name":"make_create_xml_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_assign_to ","res klass count ","res klass "," should_not_assign_to "," should_respond_with ","res denied actions include? ","res denied actions ","res denied "," post ","parent_params merge ","res create params ","res create "," make_parent_params "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," make_ make_parent_params  "]}," Shoulda Controller XML ClassMethods make_destroy_xml_tests":{"type":"method","name":"make_destroy_xml_tests","children":[],"call":["@record reload "," assert_raises ","res object "," should "," assert "," should_respond_with ","res denied actions include? ","res denied actions ","res denied "," delete ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," get_existing_record  reload "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," Shoulda Controller XML ClassMethods make_index_xml_tests":{"type":"method","name":"make_index_xml_tests","children":[],"call":[" should_assign_to ","res object to_s pluralize ","res object to_s ","res object "," should_respond_with_xml_for "," should_respond_with "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," get "," make_parent_params "," request_xml "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," Shoulda Controller XML ClassMethods make_new_xml_tests":{"type":"method","name":"make_new_xml_tests","children":[],"call":[]}," Shoulda Controller XML ClassMethods make_edit_xml_tests":{"type":"method","name":"make_edit_xml_tests","children":[],"call":[]}," Shoulda Controller XML ClassMethods make_show_xml_tests":{"type":"method","name":"make_show_xml_tests","children":[],"call":[" should_respond_with_xml_for ","res object "," should_respond_with "," should_assign_to "," should_not_assign_to ","res denied actions include? ","res denied actions ","res denied "," get ","parent_params merge ","record to_param ","res identifier "," make_parent_params "," get_existing_record "," request_xml "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "," get_existing_ get_existing_record  "]}," Shoulda Controller XML ClassMethods should_respond_with_xml_for":{"type":"method","name":"should_respond_with_xml_for","children":[],"call":[" assert_select ","name to_s dasherize ","name to_s ","@response body first map ","@response body first ","@response body "," should "," assert_xml_response "]}," Shoulda Controller XML included":{"type":"method","name":"included","children":[],"call":[]}," Shoulda Controller HTML ClassMethods make_update_html_tests":{"type":"method","name":"make_update_html_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_redirect_to ","res update redirect ","res update "," should_respond_with ","res update redirect is_a? "," should_set_the_flash_to ","res update flash "," should_assign_to ","res denied flash ","res denied ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," put ","parent_params merge ","res update params ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context ","res create params inspect ","res create params ","res create "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_create_html_tests":{"type":"method","name":"make_create_html_tests","children":[],"call":[" assert_equal ","res object "," pretty_error_messages "," assigns "," should "," should_redirect_to ","res create redirect ","res create "," should_respond_with ","res create redirect is_a? "," should_set_the_flash_to ","res create flash "," should_assign_to ","res klass count ","res klass "," should_not_assign_to ","res denied flash ","res denied ","res denied redirect ","res denied actions include? ","res denied actions "," post ","parent_params merge ","res create params "," make_parent_params "," get_existing_record "," setup "," context ","res create params inspect "," controller_name_from_class "," make_parent_params  merge "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_destroy_html_tests":{"type":"method","name":"make_destroy_html_tests","children":[],"call":["@record reload "," assert_raises ","res object "," should "," should_redirect_to ","res destroy redirect ","res destroy "," should_respond_with ","res destroy redirect is_a? "," should_set_the_flash_to ","res destroy flash "," assert "," assert_nothing_raised ","res denied flash ","res denied ","res denied redirect ","res denied actions include? ","res denied actions "," delete ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," get_existing_record  reload "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_new_html_tests":{"type":"method","name":"make_new_html_tests","children":[],"call":[" should_render_a_form "," should_render_template "," should_not_set_the_flash "," should_assign_to ","res object "," should_respond_with "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_index_html_tests":{"type":"method","name":"make_index_html_tests","children":[],"call":[" should_not_set_the_flash "," should_render_template "," should_assign_to ","res object to_s pluralize ","res object to_s ","res object "," should_respond_with "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_edit_html_tests":{"type":"method","name":"make_edit_html_tests","children":[],"call":[" assert_equal "," assigns ","res object "," should "," should_render_a_form "," should_not_set_the_flash "," should_render_template "," should_respond_with "," should_assign_to "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get ","parent_params merge ","@record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "]}," Shoulda Controller HTML ClassMethods make_show_html_tests":{"type":"method","name":"make_show_html_tests","children":[],"call":[" should_not_set_the_flash "," should_render_template "," should_respond_with "," should_assign_to ","res object "," should_set_the_flash_to ","res denied flash ","res denied "," should_redirect_to ","res denied redirect "," should_not_assign_to ","res denied actions include? ","res denied actions "," get ","parent_params merge ","record to_param ","res identifier "," make_parent_params "," get_existing_record "," setup "," context "," controller_name_from_class "," make_parent_params  merge "," get_existing_record  to_param "," make_ make_parent_params  "," get_existing_ get_existing_record  "]}," Shoulda Controller HTML ClassMethods controller_name_from_class":{"type":"method","name":"controller_name_from_class","children":[],"call":[" name gsub "," name "]}," Shoulda Controller HTML included":{"type":"method","name":"included","children":[],"call":[]}," Shoulda ActiveRecord Macros load_all_fixtures":{"type":"method","name":"load_all_fixtures","children":[],"call":[" fixtures "," warn "]}}