{" RuboCop Cop Performance UriDefaultParser autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc "," uri_parser_new? "," lambda "]}," RuboCop Cop Performance UriDefaultParser on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," uri_parser_new? ","corrector replace ","node loc expression ","node loc "]}," RuboCop Cop Performance UnneededSort accessor_start":{"type":"method","name":"accessor_start","children":[],"call":["node loc selector begin_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot "]}," RuboCop Cop Performance UnneededSort arg_value":{"type":"method","name":"arg_value","children":[],"call":[" arg_node node_parts first "," arg_node node_parts "," arg_node "," arg_node nil? "]}," RuboCop Cop Performance UnneededSort arg_node":{"type":"method","name":"arg_node","children":[],"call":["node arguments first ","node arguments "]}," RuboCop Cop Performance UnneededSort suffix":{"type":"method","name":"suffix","children":[],"call":["sorter == "]}," RuboCop Cop Performance UnneededSort base":{"type":"method","name":"base","children":[],"call":["arg == ","accessor == ","arg zero? "]}," RuboCop Cop Performance UnneededSort suggestion":{"type":"method","name":"suggestion","children":[],"call":[" base + "," suffix "," base "]}," RuboCop Cop Performance UnneededSort message":{"type":"method","name":"message","children":[],"call":[" format "," suggestion "," arg_value "," range_between source "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector "]}," RuboCop Cop Performance UnneededSort autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," suggestion "," arg_value ","sort_node loc selector ","sort_node loc ","corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc "," accessor_start "," lambda "," unneeded_sort? "]}," RuboCop Cop Performance UnneededSort on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","sort_node loc selector begin_pos ","sort_node loc selector ","sort_node loc "," unneeded_sort? ","  range_between _between "]}," RuboCop Cop Performance UnfreezeString on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," string_new? "," dup_string? ","corrector replace "," string_value ","node parent "]}," RuboCop Cop Performance TimesMap message":{"type":"method","name":"message","children":[],"call":[" format ","map_or_collect method_name ","count source ","MESSAGE  + ","count literal? "]}," RuboCop Cop Performance TimesMap check":{"type":"method","name":"check","children":[],"call":[" add_offense "," message "," times_map_call ","corrector replace ","map_or_collect loc expression ","map_or_collect loc ","(send\n  (send\n    (lvar :map_or_collect) :arguments) :map) join ","arg source ","map_or_collect arguments map ","map_or_collect arguments ","count source "]}," RuboCop Cop Performance TimesMap autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","map_or_collect loc expression ","map_or_collect loc "," lambda ","(send\n  (send\n    (lvar :map_or_collect) :arguments) :map) join ","arg source ","map_or_collect arguments map ","map_or_collect arguments ","count source "," times_map_call "]}," RuboCop Cop Performance TimesMap on_block":{"type":"method","name":"on_block","children":[],"call":[" check "]}," RuboCop Cop Performance TimesMap on_send":{"type":"method","name":"on_send","children":[],"call":[" check "]}," RuboCop Cop Performance StringReplacement remove_second_param":{"type":"method","name":"remove_second_param","children":[],"call":["corrector replace "," method_suffix "," range_between ","node source_range end_pos ","node source_range ","first_param source_range end_pos ","first_param source_range "]}," RuboCop Cop Performance StringReplacement method_suffix":{"type":"method","name":"method_suffix","children":[],"call":["node loc end source ","node loc end ","node loc "]}," RuboCop Cop Performance StringReplacement message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," replacement_method ","  replacement_method  "]}," RuboCop Cop Performance StringReplacement replacement_method":{"type":"method","name":"replacement_method","children":[],"call":["node bang_method? ","first_source length == ","first_source length ","second_source empty? "]}," RuboCop Cop Performance StringReplacement range":{"type":"method","name":"range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","node loc selector begin_pos ","node loc selector ","node loc "]}," RuboCop Cop Performance StringReplacement source_from_regex_constructor":{"type":"method","name":"source_from_regex_constructor","children":[],"call":[" source_from_regex_literal ","regex type "]}," RuboCop Cop Performance StringReplacement source_from_regex_literal":{"type":"method","name":"source_from_regex_literal","children":[],"call":[]}," RuboCop Cop Performance StringReplacement first_source":{"type":"method","name":"first_source","children":[],"call":["first_param children first ","first_param children "," source_from_regex_constructor "," source_from_regex_literal ","first_param type "]}," RuboCop Cop Performance StringReplacement offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," range "," message "," interpret_string_escapes ","first_param str_type? "," first_source "," autocorrect ","  message  ","  interpret_string_escapes  "]}," RuboCop Cop Performance StringReplacement accept_first_param?":{"type":"method","name":"accept_first_param?","children":[],"call":["first_source length != ","first_source length "," interpret_string_escapes ","first_source =~ ","first_param str_type? ","first_source nil? "," first_source ","first_source is_a? "," interpret_string_escapes  length != "," interpret_string_escapes  length "," interpret_string_escapes  =~ "," interpret_string_escapes  nil? ","  interpret_string_escapes  "," interpret_string_escapes  is_a? "]}," RuboCop Cop Performance StringReplacement accept_second_param?":{"type":"method","name":"accept_second_param?","children":[],"call":["second_source length > ","second_source length "]}," RuboCop Cop Performance StringReplacement replace_method":{"type":"method","name":"replace_method","children":[],"call":[" remove_second_param ","first length == ","first length ","second empty? ","corrector replace "," to_string_literal ","first_param source_range ","first_param str_type? ","node loc selector ","node loc "," lambda ","first_source length == ","first_source length ","second_source empty? "," replacement_method ","  replacement_method  "]}," RuboCop Cop Performance StringReplacement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" replace_method "," replacement_method "," interpret_string_escapes ","first_param str_type? "," first_source ","  replacement_method  ","  interpret_string_escapes  "]}," RuboCop Cop Performance StringReplacement on_send":{"type":"method","name":"on_send","children":[],"call":[" offense "," accept_first_param? "," accept_second_param? "," string_replacement? "]}," RuboCop Cop Performance StartWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source + + + ","receiver source + + "," to_string_literal ","receiver source + ","receiver source "," lambda "," interpret_string_escapes ","regex_str [] ","receiver is_a? "," redundant_regex? "," drop_start_metacharacter "," interpret_string_escapes  [] ","regex_str []  [] "," drop_start_metacharacter  [] "]}," RuboCop Cop Performance StartWith on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," redundant_regex? ","corrector replace ","node source_range "," to_string_literal ","receiver source "," interpret_string_escapes "," drop_start_metacharacter ","receiver is_a? ","node loc dot source ","node loc dot ","node loc ","node loc node loc dot source  source ","node loc node loc dot source  "]}," RuboCop Cop Performance StartWith literal_at_start?":{"type":"method","name":"literal_at_start?","children":[],"call":["regex_str =~ "]}," RuboCop Cop Performance Size hash?":{"type":"method","name":"hash?","children":[],"call":["node method_name == ","node method_name ","constant == ","node hash_type? ","node receiver ","node send_type? ","node method? "]}," RuboCop Cop Performance Size array?":{"type":"method","name":"array?","children":[],"call":["node method_name == ","node method_name ","constant == ","node array_type? ","node receiver ","node send_type? ","node method? "]}," RuboCop Cop Performance Size allowed_parent?":{"type":"method","name":"allowed_parent?","children":[],"call":["node block_type? "]}," RuboCop Cop Performance Size eligible_receiver?":{"type":"method","name":"eligible_receiver?","children":[],"call":[" hash? "," array? "]}," RuboCop Cop Performance Size eligible_node?":{"type":"method","name":"eligible_node?","children":[],"call":[" allowed_parent? ! "," allowed_parent? ","node parent "," eligible_receiver? ","node receiver ","node arguments? ! ","node arguments? ","node method? "]}," RuboCop Cop Performance Size autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Performance Size on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," eligible_node? ","corrector replace ","node loc selector ","node loc "," count? ! "," count? ","node parent "]}," RuboCop Cop Performance Sample extract_source":{"type":"method","name":"extract_source","children":[],"call":["args first source ","args first ","args empty? "]}," RuboCop Cop Performance Sample sample_arg":{"type":"method","name":"sample_arg","children":[],"call":[" sample_size "," extract_source "]}," RuboCop Cop Performance Sample correction":{"type":"method","name":"correction","children":[],"call":["args empty? ","(lvar :sample_arg) compact join ","(lvar :sample_arg) compact "," sample_arg "," extract_source ","(lvar :sample_arg) compact join  empty? ","(lvar : sample_arg ) compact join ","(lvar : sample_arg ) compact ","  sample_arg  "]}," RuboCop Cop Performance Sample message":{"type":"method","name":"message","children":[],"call":[" format ","range source "," correction "]}," RuboCop Cop Performance Sample source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","node source_range end_pos ","node source_range ","shuffle_node loc selector begin_pos ","shuffle_node loc selector ","shuffle_node loc ","shuffle_node source_range source_buffer ","shuffle_node source_range "]}," RuboCop Cop Performance Sample range_size":{"type":"method","name":"range_size","children":[],"call":["(irange\n  (lvar :low)\n  (lvar :high)) size ","(erange\n  (lvar :low)\n  (lvar :high)) size ","range_node type ","high >= ","low zero? ","val children [] ","val children ","vals map ","vals all? ","range_node to_a ","range_node to_a  map ","range_node to_a  all? "]}," RuboCop Cop Performance Sample sample_size_for_two_args":{"type":"method","name":"sample_size_for_two_args","children":[],"call":["second to_a first ","second to_a ","second int_type? ","first to_a first zero? ","first to_a first ","first to_a ","first int_type? "]}," RuboCop Cop Performance Sample sample_size_for_one_arg":{"type":"method","name":"sample_size_for_one_arg","children":[],"call":["(int 0) include? ","arg to_a first ","arg to_a "," range_size ","arg type "]}," RuboCop Cop Performance Sample sample_size":{"type":"method","name":"sample_size","children":[],"call":[" sample_size_for_two_args "," sample_size_for_one_arg ","method_args first ","method_args size "]}," RuboCop Cop Performance Sample offensive?":{"type":"method","name":"offensive?","children":[],"call":[" sample_size != "," sample_size "]}," RuboCop Cop Performance Sample autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correction "," source_range "," lambda "," sample_candidate? "]}," RuboCop Cop Performance Sample on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," source_range "," offensive? "," sample_candidate? ","  message  "," source_ source_range  "]}," RuboCop Cop Performance ReverseEach autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc dot ","node loc "," lambda "," range_between ","node loc selector begin_pos ","node loc selector ","node loc dot begin_pos ","  range_between _between "]}," RuboCop Cop Performance ReverseEach on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range_between ","node loc selector end_pos ","node loc selector ","node loc ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc "," reverse_each? ","corrector replace "," offense_range "," use_return_value? "," replacement_range ","  range_between _between ","  offense_range _between "," offense_ range_between  "," offense_ offense_range  "," replacement_ range_between  "," replacement_ offense_range  "]}," RuboCop Cop Performance RegexpMatch correction_range":{"type":"method","name":"correction_range","children":[],"call":["Parser Source Range  new ","arg loc expression begin_pos ","arg loc expression ","arg loc ","recv loc expression end_pos ","recv loc expression ","recv loc "," processed_source buffer "," processed_source ","arg source_range begin_pos ","arg source_range ","recv source_range end_pos ","recv source_range "," processed_source  processed_source buffer  "]}," RuboCop Cop Performance RegexpMatch swap_receiver_and_arg":{"type":"method","name":"swap_receiver_and_arg","children":[],"call":["corrector replace ","recv source ","arg loc expression ","arg loc ","arg source ","recv loc expression ","recv loc "]}," RuboCop Cop Performance RegexpMatch correct_operator":{"type":"method","name":"correct_operator","children":[],"call":["corrector insert_before ","recv loc expression ","recv loc ","oper == ","corrector insert_after ","arg loc expression ","arg loc ","corrector replace "," swap_receiver_and_arg ","TYPES_IMPLEMENTING_MATCH  include? ","arg type ","recv type "," correction_range ","op_range source end_with? ","op_range source "," replace_with_match_predicate_method "," correction_range  source end_with? "," correction_range  source "]}," RuboCop Cop Performance RegexpMatch match_gvar?":{"type":"method","name":"match_gvar?","children":[],"call":["(sym :$~) include? "]}," RuboCop Cop Performance RegexpMatch scope_root":{"type":"method","name":"scope_root","children":[],"call":["ancestor module_type? ","ancestor class_type? ","ancestor defs_type? ","ancestor def_type? ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Performance RegexpMatch scope_body":{"type":"method","name":"scope_body","children":[],"call":["children [] ","node type ","node children ","node children  [] ","node node children  "]}," RuboCop Cop Performance RegexpMatch find_last_match":{"type":"method","name":"find_last_match","children":[],"call":[" scope_root == "," scope_root ","range cover? ","ref loc expression begin_pos ","ref loc expression ","ref loc "," last_matches find "," last_matches ","ref source_range begin_pos ","ref source_range "]}," RuboCop Cop Performance RegexpMatch next_match_pos":{"type":"method","name":"next_match_pos","children":[],"call":["node loc expression begin_pos ","node loc expression ","node loc "," scope_root == "," scope_root ","match loc expression begin_pos > ","match loc expression begin_pos ","match loc expression ","match loc "," search_match_nodes find "," search_match_nodes ","begin_pos > ","match parent if_branch loc expression begin_pos ","match parent if_branch loc expression ","match parent if_branch loc ","match parent if_branch ","match parent "," modifier_form? ","node source_range begin_pos ","node source_range ","match source_range begin_pos ","match source_range ","match parent if_branch source_range begin_pos ","match parent if_branch source_range ","node loc expression match loc expression begin_pos  ","node loc expression match parent if_branch loc expression begin_pos  ","node loc expression match source_range begin_pos  ","node loc expression match parent if_branch source_range begin_pos  ","match loc expression match loc expression begin_pos  > ","match loc expression match parent if_branch loc expression begin_pos  > ","match loc expression match source_range begin_pos  > ","match loc expression match parent if_branch source_range begin_pos  > ","match loc expression match loc expression begin_pos  ","match loc expression match parent if_branch loc expression begin_pos  ","match loc expression match source_range begin_pos  ","match loc expression match parent if_branch source_range begin_pos  ","match loc expression begin_pos  > ","match parent if_branch loc expression begin_pos  > ","match source_range begin_pos  > ","match parent if_branch source_range begin_pos  > ","match parent if_branch loc expression match loc expression begin_pos  ","match parent if_branch loc expression match parent if_branch loc expression begin_pos  ","match parent if_branch loc expression match source_range begin_pos  ","match parent if_branch loc expression match parent if_branch source_range begin_pos  ","node source_range match loc expression begin_pos  ","node source_range match parent if_branch loc expression begin_pos  ","node source_range match source_range begin_pos  ","node source_range match parent if_branch source_range begin_pos  ","match source_range match loc expression begin_pos  ","match source_range match parent if_branch loc expression begin_pos  ","match source_range match source_range begin_pos  ","match source_range match parent if_branch source_range begin_pos  ","match parent if_branch source_range match loc expression begin_pos  ","match parent if_branch source_range match parent if_branch loc expression begin_pos  ","match parent if_branch source_range match source_range begin_pos  ","match parent if_branch source_range match parent if_branch source_range begin_pos  "]}," RuboCop Cop Performance RegexpMatch last_match_used?":{"type":"method","name":"last_match_used?","children":[],"call":[" find_last_match "," next_match_pos ","match_node loc expression begin_pos ","match_node loc expression ","match_node loc ","match_node parent modifier_form? ","match_node parent ","match_node parent if_type? ","match_node ancestors last ","match_node ancestors "," scope_body "," scope_root "," range_to_search_for_last_matches ","  next_match_pos  "," scope_match_node ancestors last  "," scope_ scope_body  ","  scope_root  ","  range_to_search_for_last_matches _to_search_for_last_matches "]}," RuboCop Cop Performance RegexpMatch message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "]}," RuboCop Cop Performance RegexpMatch check_condition":{"type":"method","name":"check_condition","children":[],"call":[" add_offense "," last_match_used? "," match_node? "," autocorrect "," message ","  message  "]}," RuboCop Cop Performance RegexpMatch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_operator "," match_with_lvasgn? "," match_threequals? "," match_operator? ","corrector replace ","node loc selector ","node loc "," match_method? "," lambda "," match_with_int_arg_method? "]}," RuboCop Cop Performance RegexpMatch on_case":{"type":"method","name":"on_case","children":[],"call":[" check_condition ","when_node each_condition ","node each_when ","node condition "]}," RuboCop Cop Performance RegexpMatch on_if":{"type":"method","name":"on_if","children":[],"call":[" check_condition ","node condition "]}," RuboCop Cop Performance RegexpMatch match_with_lvasgn?":{"type":"method","name":"match_with_lvasgn?","children":[],"call":["regexp to_regexp named_captures empty? ","regexp to_regexp named_captures ","regexp to_regexp ","node match_with_lvasgn_type? "]}," RuboCop Cop Performance RedundantSortBy sort_by_range":{"type":"method","name":"sort_by_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance RedundantSortBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," sort_by_range "," lambda "]}," RuboCop Cop Performance RedundantSortBy on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," sort_by_range "," redundant_sort_by "," sort_by_ sort_by_range  "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector unwind":{"type":"method","name":"unwind","children":[],"call":["receiver send_type? ","receiver respond_to? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector second_argument":{"type":"method","name":"second_argument","children":[],"call":[" each_with_object_node ","parent parent ","parent begin_type? "," node parent "," node ","parent parent  parent parent  "," node parent   node parent  ","parent parent  begin_type? "," node parent  begin_type? "," node parent parent  "," node  node parent  "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector eligible_receiver?":{"type":"method","name":"eligible_receiver?","children":[],"call":[" receiver lvar_type? "," receiver "," receiver respond_to? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector value_used?":{"type":"method","name":"value_used?","children":[],"call":[" receiver loc name source == "," second_argument loc name source "," second_argument loc name "," second_argument loc "," second_argument "," receiver loc name source "," receiver loc name "," receiver loc "," receiver "," eligible_receiver? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector initialize":{"type":"method","name":"initialize","children":[],"call":[" unwind "]}," RuboCop Cop Performance RedundantMerge max_key_value_pairs":{"type":"method","name":"max_key_value_pairs","children":[],"call":[" Integer "," cop_config [] "," cop_config "]}," RuboCop Cop Performance RedundantMerge indent_width":{"type":"method","name":"indent_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Performance RedundantMerge leading_spaces":{"type":"method","name":"leading_spaces","children":[],"call":["node source_range source_line [] ","node source_range source_line ","node source_range "]}," RuboCop Cop Performance RedundantMerge rewrite_with_modifier":{"type":"method","name":"rewrite_with_modifier","children":[],"call":["parent loc keyword source << << << << << << << ","parent loc keyword source << << << << << << "," leading_spaces ","parent loc keyword source << << << << << ","parent loc keyword source << << << << ","parent loc keyword source << << << ","parent loc keyword source << << ","cond source ","parent loc keyword source << ","parent loc keyword source ","parent loc keyword ","parent loc ","new_source gsub! ","(send\n  (str \" \") :*\n  (send nil :indent_width)) + ","  * "," indent_width "," format chomp "," format ","parent condition source ","parent condition ","indent + "," configured_indentation_width ","(send\n  (str \" \") :*\n  (send nil :  * _width)) + ","   * _width ","  *  + "," configured_  * ation_width "]}," RuboCop Cop Performance RedundantMerge to_assignments":{"type":"method","name":"to_assignments","children":[],"call":[" format ","value source ","receiver source ","key source ","pair colon? ","key sym_type? ","pairs map ","key source  source ","key source  sym_type? "]}," RuboCop Cop Performance RedundantMerge correct_single_element":{"type":"method","name":"correct_single_element","children":[],"call":["corrector replace ","node source_range "," lambda "]}," RuboCop Cop Performance RedundantMerge correct_multiple_elements":{"type":"method","name":"correct_multiple_elements","children":[],"call":["corrector replace ","node source_range "," lambda ","new_source gsub! "," leading_spaces "," rewrite_with_modifier "," modifier_flow_control? "," rewrite_with_modifier  gsub! "]}," RuboCop Cop Performance RedundantMerge non_redundant_value_used?":{"type":"method","name":"non_redundant_value_used?","children":[],"call":["EachWithObjectInspector  new value_used? ! ","EachWithObjectInspector  new value_used? ","EachWithObjectInspector  new ","node value_used? "]}," RuboCop Cop Performance RedundantMerge non_redundant_pairs?":{"type":"method","name":"non_redundant_pairs?","children":[],"call":["pairs size > "," max_key_value_pairs ","pairs size ","receiver pure? ! ","receiver pure? "]}," RuboCop Cop Performance RedundantMerge non_redundant_merge?":{"type":"method","name":"non_redundant_merge?","children":[],"call":[" non_redundant_value_used? "," non_redundant_pairs? "," kwsplat_used? ","pairs empty? "]}," RuboCop Cop Performance RedundantMerge each_redundant_merge":{"type":"method","name":"each_redundant_merge","children":[],"call":[" non_redundant_merge? "," redundant_merge_candidate "]}," RuboCop Cop Performance RedundantMerge message":{"type":"method","name":"message","children":[],"call":[" format ","node source "," to_assignments join "," to_assignments "," redundant_merge_candidate "," to_ to_assignments join  join "," to_ to_assignments join  "]}," RuboCop Cop Performance RedundantMerge autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_single_element "," correct_multiple_elements ","node parent ","pairs size > ","pairs size "," to_assignments join "," to_assignments "," redundant_merge_candidate "]}," RuboCop Cop Performance RedundantMerge on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," each_redundant_merge "," correct_single_element "," correct_multiple_elements ","node parent ","pairs size > ","pairs size "," to_assignments join "," to_assignments "," redundant_merge_candidate "," message ","  message  "]}," RuboCop Cop Performance RedundantMatch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","node receiver source + + ","node first_argument source ","node first_argument ","node receiver source + ","node receiver source ","node receiver ","node first_argument regexp_type? "," replacement "]}," RuboCop Cop Performance RedundantMatch on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","(and\n  (send\n    (lvar :node) :parent)\n  (send\n    (send\n      (lvar :node) :parent) :block_type?)) ! ","node parent block_type? ","node parent "," only_truthiness_matters? ","node value_used? ! ","node value_used? "," match_call? "," autocorrect "," autocorrectable? "]}," RuboCop Cop Performance RedundantBlockCall args_include_block_pass?":{"type":"method","name":"args_include_block_pass?","children":[],"call":["args any? "]}," RuboCop Cop Performance RedundantBlockCall calls_to_report":{"type":"method","name":"calls_to_report","children":[],"call":[" args_include_block_pass? ","calls any? "," to_enum "," blockarg_assigned? "," blockarg_calls map "," blockarg_calls "," shadowed_block_argument? "," to_enum  any? "," blockarg_ to_enum  map "," blockarg_ to_enum  "]}," RuboCop Cop Performance RedundantBlockCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","new_source << ","args empty? ! ","args empty? "," parentheses? ","args map join ","args map ","String  new ","String  new  << "]}," RuboCop Cop Performance RedundantBlockCall on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format "," calls_to_report each "," calls_to_report "," blockarg_def "," autocorrect "]}," RuboCop Cop Performance RangeInclude autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Performance RangeInclude on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range_include ","corrector replace ","node loc selector ","node loc "," format "]}," RuboCop Cop Performance LstripRstrip autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," range_between ","node source_range end_pos ","node source_range ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Performance LstripRstrip on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," range_between ","node source_range end_pos ","node source_range ","first_send loc selector begin_pos ","first_send loc selector ","first_send loc "," lstrip_rstrip ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_hash_expression":{"type":"method","name":"autocorrect_hash_expression","children":[],"call":["node receiver receiver source ","node receiver receiver ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_argument":{"type":"method","name":"autocorrect_argument","children":[],"call":["node arguments first source ","node arguments first ","node arguments "]}," RuboCop Cop Performance InefficientHashSearch use_long_method":{"type":"method","name":"use_long_method","children":[],"call":["preferred_config [] ","preferred_config [] == "," config for_all_cops [] "," config for_all_cops "," config "," config for_all_cops []  [] "," config for_all_cops []  [] == "]}," RuboCop Cop Performance InefficientHashSearch current_method":{"type":"method","name":"current_method","children":[],"call":["node receiver method_name ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_method":{"type":"method","name":"autocorrect_method","children":[],"call":[" use_long_method "," current_method "]}," RuboCop Cop Performance InefficientHashSearch message":{"type":"method","name":"message","children":[],"call":[" current_method "," autocorrect_method "," correct_method "]}," RuboCop Cop Performance InefficientHashSearch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," autocorrect_argument "," autocorrect_method "," autocorrect_hash_expression ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Performance InefficientHashSearch on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","receiver nil? "," inefficient_include? ","corrector replace "," autocorrect_argument "," autocorrect_method "," autocorrect_hash_expression ","node loc expression ","node loc "," message "," replacement ","  message  "]}," RuboCop Cop Performance FlatMap register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","map_node loc selector begin_pos ","map_node loc selector ","map_node loc "," autocorrect ","node source_range end_pos ","node source_range ","map_send_node loc selector begin_pos ","map_send_node loc selector ","map_send_node loc ","map_node send_node ","map_node block_type? ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  ","map_node send_node  loc selector begin_pos ","map_node send_node  loc selector ","map_node send_node  loc "]}," RuboCop Cop Performance FlatMap offense_for_method":{"type":"method","name":"offense_for_method","children":[],"call":[" register_offense "]}," RuboCop Cop Performance FlatMap offense_for_levels":{"type":"method","name":"offense_for_levels","children":[],"call":[" register_offense ","MSG  + "]}," RuboCop Cop Performance FlatMap autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","map_node loc selector ","map_node loc ","corrector remove "," lambda "," range_between ","node source_range end_pos ","node source_range ","node loc dot begin_pos ","node loc dot ","node loc ","params first "," flat_map_candidate? ","map_send_node loc selector ","map_send_node loc ","map_node source_range end_pos ","map_node source_range ","map_node send_node ","map_node block_type? ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  ","map_node send_node  loc selector ","map_node send_node  loc ","map_node source_ range_between  end_pos ","map_node source_ range_between  "]}," RuboCop Cop Performance FlatMap on_send":{"type":"method","name":"on_send","children":[],"call":[" offense_for_method ","flatten_level == "," offense_for_levels ","flatten_level ! "," cop_config [] "," cop_config ","params first "," flat_map_candidate? "]}," RuboCop Cop Performance FixedSize non_string_argument?":{"type":"method","name":"non_string_argument?","children":[],"call":["node str_type? ! ","node str_type? "]}," RuboCop Cop Performance FixedSize contains_double_splat?":{"type":"method","name":"contains_double_splat?","children":[],"call":["node each_child_node any? ","node each_child_node ","node hash_type? "]}," RuboCop Cop Performance FixedSize contains_splat?":{"type":"method","name":"contains_splat?","children":[],"call":["node each_child_node any? ","node each_child_node ","node array_type? "]}," RuboCop Cop Performance FixedSize allowed_parent?":{"type":"method","name":"allowed_parent?","children":[],"call":["node block_type? ","node casgn_type? "]}," RuboCop Cop Performance FixedSize allowed_argument?":{"type":"method","name":"allowed_argument?","children":[],"call":[" non_string_argument? ","arg first "]}," RuboCop Cop Performance FixedSize allowed_variable?":{"type":"method","name":"allowed_variable?","children":[],"call":[" contains_double_splat? "," contains_splat? "]}," RuboCop Cop Performance FixedSize on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," allowed_argument? "," allowed_variable? "," counter "," allowed_parent? ","node parent ","node ancestors any? ","node ancestors "]}," RuboCop Cop Performance EndWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source + + + ","receiver source + + "," to_string_literal ","receiver source + ","receiver source "," lambda "," interpret_string_escapes ","regex_str [] ","receiver is_a? "," redundant_regex? "," drop_end_metacharacter "," interpret_string_escapes  [] ","regex_str []  [] "," drop_end_metacharacter  [] "]}," RuboCop Cop Performance EndWith on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," redundant_regex? ","corrector replace ","node source_range "," to_string_literal ","receiver source "," interpret_string_escapes "," drop_end_metacharacter ","receiver is_a? ","node loc dot source ","node loc dot ","node loc ","node loc node loc dot source  source ","node loc node loc dot source  "]}," RuboCop Cop Performance EndWith literal_at_end?":{"type":"method","name":"literal_at_end?","children":[],"call":["regex_str =~ "]}," RuboCop Cop Performance DoubleStartEndWith check_for_active_support_aliases?":{"type":"method","name":"check_for_active_support_aliases?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Performance DoubleStartEndWith add_offense_for_double_call":{"type":"method","name":"add_offense_for_double_call","children":[],"call":[" add_offense "," format ","node source ","receiver source "]}," RuboCop Cop Performance DoubleStartEndWith combine_args":{"type":"method","name":"combine_args","children":[],"call":["(send\n  (lvar :first_call_args) :+\n  (lvar :second_call_args)) map join ","(send\n  (lvar :first_call_args) :+\n  (lvar :second_call_args)) map ","first_call_args + "]}," RuboCop Cop Performance DoubleStartEndWith process_source":{"type":"method","name":"process_source","children":[],"call":[" two_start_end_with_calls "," check_with_active_support_aliases "," check_for_active_support_aliases? "]}," RuboCop Cop Performance DoubleStartEndWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","first_argument join ","second_call_args last loc expression ","second_call_args last loc ","second_call_args last ","first_call_args first loc expression ","first_call_args first loc ","first_call_args first "," combine_args "," process_source ","second_call_args last source_range ","first_call_args first source_range ","first_call_args first loc expression  join ","first_call_args first source_range  join ","second_call_args last source_first_argument join  ","first_call_args first source_first_argument join  "]}," RuboCop Cop Performance DoubleStartEndWith on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense_for_double_call "," combine_args ","second_call_args all? "," process_source "," autocorrect "," add_offense "," message "]}," RuboCop Cop Performance Detect lazy?":{"type":"method","name":"lazy?","children":[],"call":["receiver nil? ! ","receiver nil? ","method == "]}," RuboCop Cop Performance Detect preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" config for_cop [] [] "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Performance Detect register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," preferred_method ","second_method == ","receiver loc selector join ","node loc selector ","node loc ","receiver loc selector ","receiver loc "," autocorrect "," replacement "," message_for_method ","  message_for_method _for_method "]}," RuboCop Cop Performance Detect accept_first_call?":{"type":"method","name":"accept_first_call?","children":[],"call":[" lazy? ","args block_pass_type? ! ","args block_pass_type? ","args nil? ","body nil? "]}," RuboCop Cop Performance Detect autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","receiver loc selector ","receiver loc ","corrector remove "," lambda ","receiver block_type? ","receiver source_range end join ","node loc selector ","node loc ","receiver source_range end ","receiver source_range "," preferred_method ","first_method == "]}," RuboCop Cop Performance Detect on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," accept_first_call? ","receiver block_type? ","args empty? "," detect_candidate? "," rails_safe_mode? ","second_method == "]}," RuboCop Cop Performance Count source_starting_at":{"type":"method","name":"source_starting_at","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","node source_range begin_pos "," block_given? ","node source_range node source_range begin_pos  "]}," RuboCop Cop Performance Count eligible_node?":{"type":"method","name":"eligible_node?","children":[],"call":["(and\n  (send\n    (lvar :node) :parent)\n  (send\n    (send\n      (lvar :node) :parent) :block_type?)) ! ","node parent block_type? ","node parent "]}," RuboCop Cop Performance Count autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","corrector remove "," lambda ","n loc dot begin_pos ","n loc dot ","n loc "," source_starting_at ","selector == ","selector_node loc selector ","selector_node loc "," count_candidate? "," negate_reject "]}," RuboCop Cop Performance Count on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","selector_node loc selector begin_pos ","selector_node loc selector ","selector_node loc "," source_starting_at "," eligible_node? "," count_candidate? "," rails_safe_mode? "," autocorrect "]}," RuboCop Cop Performance CompareWithBlock compare_range":{"type":"method","name":"compare_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance CompareWithBlock message":{"type":"method","name":"message","children":[],"call":[" format ","key source ","args first ","method == ","send method_name ","REPLACEMENT  [] ","args first  source "]}," RuboCop Cop Performance CompareWithBlock slow_compare?":{"type":"method","name":"slow_compare?","children":[],"call":["args_a empty? ","(sym :sym) include? ","key type ","args_a first ","args_a size == ","args_a size ","method == ","args_a == ","args_a first  type "]}," RuboCop Cop Performance CompareWithBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," compare_range ","send method_name ","arg first source ","arg first ","method == "," replaceable_body? "," compare? "," lambda "]}," RuboCop Cop Performance CompareWithBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," message "," compare_range "," slow_compare? "," replaceable_body? "," compare? ","corrector replace ","send method_name ","args_a first source ","args_a first ","method == ","REPLACEMENT  [] "," compare_ compare_range  "]}," RuboCop Cop Performance Casecmp correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc expression ","node loc ","arg source ","variable source "," parentheses? ! "," parentheses? ","arg send_type? ","corrector insert_before ","method == "," lambda "," build_good_method "]}," RuboCop Cop Performance Casecmp downcase_eq_range":{"type":"method","name":"downcase_eq_range","children":[],"call":["loc selector join ","send_downcase loc selector ","send_downcase loc ","loc selector ","loc expression ","CASE_METHODS  include? "]}," RuboCop Cop Performance Casecmp inefficient_comparison":{"type":"method","name":"inefficient_comparison","children":[],"call":["loc selector join ","send_downcase loc selector ","send_downcase loc ","loc selector "," eq_downcase "," downcase_eq_range "," downcase_eq ","node loc ","node loc  selector join ","send_downcase node loc  selector ","send_downcase node loc  ","node loc  selector "," downcase_eq_loc selector join  ","node node loc  "]}," RuboCop Cop Performance Casecmp autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correction "," eq_downcase "," downcase_eq "," downcase_downcase "," take_method_apart ","corrector replace "]}," RuboCop Cop Performance Casecmp on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","methods join "," ignore_node "," inefficient_comparison "," part_of_ignored_node? ","node source "," build_good_method "," take_method_apart "," eq_downcase "," downcase_eq "," correction "," autocorrect "," build_ build_good_method  "]}," RuboCop Cop Performance CaseWhenSplat needs_reorder?":{"type":"method","name":"needs_reorder?","children":[],"call":[" non_splat? ","when_branch conditions any? ","when_branch conditions ","following_branches any? ","when_node parent when_branches [] ","when_node branch_index + ","when_node branch_index ","when_node parent when_branches ","when_node parent ","when_node parent when_branches []  any? "]}," RuboCop Cop Performance CaseWhenSplat non_splat?":{"type":"method","name":"non_splat?","children":[],"call":["condition splat_type? ! ","condition splat_type? ","variable array_type? "]}," RuboCop Cop Performance CaseWhenSplat splat_offenses":{"type":"method","name":"splat_offenses","children":[],"call":["offenses compact "," non_splat? ","when_conditions reverse map ","when_conditions reverse "]}," RuboCop Cop Performance CaseWhenSplat indent_for":{"type":"method","name":"indent_for","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Performance CaseWhenSplat new_branch_without_then":{"type":"method","name":"new_branch_without_then","children":[],"call":["node body source ","node body "," indent_for "]}," RuboCop Cop Performance CaseWhenSplat new_condition_with_then":{"type":"method","name":"new_condition_with_then","children":[],"call":["node body source ","node body "," indent_for "]}," RuboCop Cop Performance CaseWhenSplat when_branch_range":{"type":"method","name":"when_branch_range","children":[],"call":[" range_between ","next_branch source_range begin_pos ","next_branch source_range ","when_node source_range begin_pos ","when_node source_range ","when_node parent when_branches [] ","when_node branch_index + ","when_node branch_index ","when_node parent when_branches ","when_node parent ","when_node parent when_branches []  source_range begin_pos ","when_node parent when_branches []  source_range "]}," RuboCop Cop Performance CaseWhenSplat reordering_correction":{"type":"method","name":"reordering_correction","children":[],"call":[" new_branch_without_then "," new_condition_with_then "," same_line? ","when_node body "," replacement ","when_node conditions ","  replacement _with_then "]}," RuboCop Cop Performance CaseWhenSplat reorder_condition":{"type":"method","name":"reorder_condition","children":[],"call":["corrector insert_after "," reordering_correction ","when_branches last source_range ","when_branches last ","corrector remove "," when_branch_range ","when_branches one? ","when_node parent when_branches ","when_node parent ","when_node parent when_branches  last source_range ","when_node parent when_branches  last ","when_node parent when_branches  one? ","when_node parent when_node parent when_branches  "]}," RuboCop Cop Performance CaseWhenSplat inline_fix_branch":{"type":"method","name":"inline_fix_branch","children":[],"call":["corrector replace "," replacement "," range_between ","conditions [] loc expression end_pos ","conditions [] loc expression ","conditions [] loc ","conditions [] ","conditions [] loc expression begin_pos ","when_node conditions ","conditions [] source_range end_pos ","conditions [] source_range ","conditions [] source_range begin_pos ","  range_between _between ","when_node conditions  [] loc expression end_pos ","when_node conditions  [] loc expression ","when_node conditions  [] loc ","when_node conditions  [] ","when_node conditions  [] loc expression begin_pos ","when_node when_node conditions  ","conditions [] source_ range_between  end_pos ","when_node conditions  [] source_range end_pos ","conditions [] source_ range_between  ","when_node conditions  [] source_range ","conditions [] source_ range_between  begin_pos ","when_node conditions  [] source_range begin_pos "]}," RuboCop Cop Performance CaseWhenSplat replacement":{"type":"method","name":"replacement","children":[],"call":["reordered flatten map join ","reordered flatten map ","reordered flatten ","conditions partition reverse ","conditions partition ","conditions partition reverse  flatten map join ","conditions partition reverse  flatten map ","conditions partition reverse  flatten "]}," RuboCop Cop Performance CaseWhenSplat autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" inline_fix_branch "," reorder_condition "," needs_reorder? "," lambda "]}," RuboCop Cop Performance CaseWhenSplat on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense ","condition parent ","variable array_type? ","condition parent loc keyword join ","condition source_range ","condition parent loc keyword ","condition parent loc "," splat_offenses reverse_each "," splat_offenses ","case_node when_branches flat_map ","case_node when_branches "," autocorrect "," range "," ignore_node "," ignored_node? ","condition source_condition parent loc keyword join  "," condition parent loc keyword join  "]}," RuboCop Cop Performance Caller int_value":{"type":"method","name":"int_value","children":[],"call":["node children [] ","node children "]}," RuboCop Cop Performance Caller message":{"type":"method","name":"message","children":[],"call":[" format "," int_value ","node first_argument ","node method_name == ","node method_name ","node receiver first_argument ","node receiver ","node receiver method_name ","node method? "," for int_value at "," i int_value t_value ","node first_argu int_value ent "," int_value ode first_argume int_value t ","node  int_value ethod_na int_value e == "," int_value ode method_ int_value ame == ","node node receiver method_name  == ","node  int_value ethod_na int_value e "," int_value ode method_ int_value ame ","node node receiver method_name  ","node receiver first_argu int_value ent "," int_value ode receiver first_argume int_value t "," int_value ode receiver ","node receiver  int_value ethod_na int_value e "," int_value ode receiver method_ int_value ame ","node receiver node receiver method_name  ","node  int_value ethod? "," int_value ode method? "]}," RuboCop Cop Performance Caller on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," caller_with_scope_method? ","corrector replace "," format ","node source "," int_value ","node first_argument ","node method? ","node receiver first_argument ","node receiver ","node receiver method_name "," message "," add_offe int_value se "," caller_with_scope_ int_value ethod? "," for int_value at "," int_value ode source "," i int_value t_value ","node first_argu int_value ent "," int_value ode first_argume int_value t ","node  int_value ethod? "," int_value ode method? ","node receiver first_argu int_value ent "," int_value ode receiver first_argume int_value t "," int_value ode receiver ","node receiver  int_value ethod_na int_value e "," int_value ode receiver method_ int_value ame ","node receiver node receiver method_name  ","  format  ","  message  ","  int_value essage "]}," RuboCop Cop Performance ChainArrayAllocation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," range_between ","node source_range end_pos ","node source_range ","node loc dot begin_pos ","node loc dot ","node loc "," flat_map_candidate? "," chain_array_allocation? ","descendant method? ","node each_descendant any? ","node each_descendant ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Performance Casecmp build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["arg source ","variable source "," parentheses? ! "," parentheses? ","arg send_type? ","method == "]}," RuboCop Cop Performance Casecmp take_method_apart":{"type":"method","name":"take_method_apart","children":[],"call":[" eq_downcase "," downcase_eq "," downcase_downcase "]}," RuboCop Performance Inject defaults!":{"type":"method","name":"defaults!","children":[],"call":[]}," RuboCop Cop Performance RedundantMerge kwsplat_used?":{"type":"method","name":"kwsplat_used?","children":[],"call":["pairs any? "]}," RuboCop Cop Performance OpenStruct on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," open_struct ","node loc selector ","node loc "]}," RuboCop Performance Version document_version":{"type":"method","name":"document_version","children":[],"call":[]}," RuboCop Cop Performance UnfreezeString string_value":{"type":"method","name":"string_value","children":[],"call":["node receiver source ","node receiver ","node first_argument source ","node first_argument ","node arguments empty? ","node arguments ","node method? ","node receiver source == "]}," RuboCop Cop Performance Sum method_call_with_args_range":{"type":"method","name":"method_call_with_args_range","children":[],"call":["node source_range ","receiver source_range end join ","node source_range end ","receiver source_range end ","receiver source_range ","node receiver ","node receiver source_range end join ","node receiver source_range end ","node receiver source_range ","node receiver  source_range end join ","node receiver  source_range end ","node receiver  source_range ","node node receiver  ","node node receiver  source_range end join ","node node receiver  source_range end ","node node receiver  source_range "]}," RuboCop Cop Performance Sum build_block_bad_method":{"type":"method","name":"build_block_bad_method","children":[],"call":["body source ","init source ","init first ","init empty? ","method to_s ","init first  source ","init first  first ","init first  empty? "]}," RuboCop Cop Performance Sum build_method_bad_method":{"type":"method","name":"build_method_bad_method","children":[],"call":["operation block_pass_type? ","init source ","init first ","init empty? ","init first  source ","init first  first ","init first  empty? "]}," RuboCop Cop Performance Sum build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["args join ","args empty? ","args << ","block_pass source ","init source ","init value zero? ","init value ","init int_type? ","init first ","init empty? ","init source to_i != ","init source to_i ","init first  source ","init first  value zero? ","init first  value ","init first  int_type? ","init first  first ","init first  empty? ","init first  source to_i != ","init first  source to_i "]}," RuboCop Cop Performance Sum build_block_message":{"type":"method","name":"build_block_message","children":[],"call":[" format "," build_block_bad_method ","send method_name "," build_good_method "," build_block_ build_block_bad_method  "," build_ build_good_method  "]}," RuboCop Cop Performance Sum build_sum_map_message":{"type":"method","name":"build_sum_map_message","children":[],"call":[" format "," build_good_method "]}," RuboCop Cop Performance Sum build_method_message":{"type":"method","name":"build_method_message","children":[],"call":[" format "," array_literal? ! "," array_literal? ","init empty? "," build_method_bad_method "," build_good_method "," build_method_ build_method_bad_method  "," build_ build_good_method  "]}," RuboCop Cop Performance Sum sum_block_range":{"type":"method","name":"sum_block_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance Sum sum_map_range":{"type":"method","name":"sum_map_range","children":[],"call":[" range_between ","sum source_range end end_pos ","sum source_range end ","sum source_range ","map loc selector begin_pos ","map loc selector ","map loc "]}," RuboCop Cop Performance Sum sum_method_range":{"type":"method","name":"sum_method_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","node loc selector begin_pos ","node loc selector ","node loc expression end_pos ","node loc expression ","node source_range end_pos ","node source_range "]}," RuboCop Cop Performance Sum autocorrect_sum_map":{"type":"method","name":"autocorrect_sum_map","children":[],"call":["corrector replace ","map receiver ","corrector remove "," build_good_method ","map last_argument "," method_call_with_args_range "]}," RuboCop Cop Performance Sum autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," build_good_method "," safe_autocorrect? ","init empty? "]}," RuboCop Cop Performance Sum array_literal?":{"type":"method","name":"array_literal?","children":[],"call":["node children first ","node children "]}," RuboCop Cop Performance Sum empty_array_literal?":{"type":"method","name":"empty_array_literal?","children":[],"call":["receiver children empty? ","receiver children "," array_literal? ","node children first ","node children ","node children first  children empty? ","node children first  children "]}," RuboCop Cop Performance Sum handle_sum_map_candidate":{"type":"method","name":"handle_sum_map_candidate","children":[],"call":[" autocorrect_sum_map "," add_offense "," sum_map_range "," build_sum_map_message ","map method_name ","node block_argument? ","node block_literal? "," sum_map_candidate? "," build_sum_map_ build_sum_map_message  "]}," RuboCop Cop Performance Sum handle_sum_candidate":{"type":"method","name":"handle_sum_candidate","children":[],"call":[" autocorrect "," add_offense "," build_method_message "," sum_method_range "," sum_candidate? ","init empty? "," cop_config [] "," cop_config "," build_method_ build_method_message  "," sum_method_ sum_method_range  "]}," RuboCop Cop Performance Sum on_block":{"type":"method","name":"on_block","children":[],"call":[" autocorrect "," add_offense "," build_block_message "," sum_block_range "," elem_plus_acc? "," acc_plus_elem? "," sum_with_block_candidate? "," build_block_ build_block_message  "," sum_block_ sum_block_range  "]}," RuboCop Cop Performance Sum on_send":{"type":"method","name":"on_send","children":[],"call":[" handle_sum_map_candidate "," handle_sum_candidate "," empty_array_literal? "," autocorrect "," add_offense "," build_method_message "," sum_method_range "," sum_candidate? "," build_method_ build_method_message  "," sum_method_ sum_method_range  "]}," RuboCop Cop Performance StringInclude literal?":{"type":"method","name":"literal?","children":[],"call":["regex_str match? "]}," RuboCop Cop Performance StringInclude on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node source_range "," to_string_literal ","receiver source "," interpret_string_escapes ","receiver is_a? "," add_offense "," redundant_regex? "," format ","node method? ","node send_type? ","node loc dot source ","node loc dot ","node loc ","node loc node loc dot source  source ","node loc node loc dot source  "]}," RuboCop Cop Performance Squeeze repeating_literal?":{"type":"method","name":"repeating_literal?","children":[],"call":["regex_str match? "]}," RuboCop Cop Performance Squeeze on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node source_range ","receiver source "," to_string_literal "," add_offense ","node loc selector ","node loc "," format ","PREFERRED_METHODS  [] ","replace_str == "," interpret_string_escapes ","regexp_str [] "," squeeze_candidate? ","node loc dot source ","node loc dot "," to_ to_string_literal  "," interpret_string_escapes  [] ","regexp_str []  [] "]}," RuboCop Cop Performance SortReverse message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Performance SortReverse on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace "," add_offense "," message "," sort_range "," replaceable_body? "," sort_with_block? "," register_offense "," sort_ sort_range  "]}," RuboCop Cop Performance ReverseFirst build_bad_method":{"type":"method","name":"build_bad_method","children":[],"call":["node arguments first source ","node arguments first ","node arguments ","node arguments? "]}," RuboCop Cop Performance ReverseFirst build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["node arguments first source ","node arguments first ","node arguments ","node arguments? "]}," RuboCop Cop Performance ReverseFirst build_message":{"type":"method","name":"build_message","children":[],"call":[" format "," build_bad_method "," build_good_method "," build_ build_bad_method  "," build_ build_good_method  "]}," RuboCop Cop Performance ReverseFirst correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Performance ReverseFirst on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," build_good_method "," add_offense "," build_message "," correction_range "," reverse_first_candidate? "," build_ build_message  "," correction_ correction_range  "]}," RuboCop Cop Performance ReverseEach offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc selector end_pos ","node loc selector ","node loc ","node children first loc selector begin_pos ","node children first loc selector ","node children first loc ","node children first ","node children "]}," RuboCop Cop Performance RegexpMatch replace_with_match_predicate_method":{"type":"method","name":"replace_with_match_predicate_method","children":[],"call":["corrector replace "," swap_receiver_and_arg ","TYPES_IMPLEMENTING_MATCH  include? ","arg type ","recv type "]}," RuboCop Cop Performance RegexpMatch modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":["match_node parent modifier_form? ","match_node parent ","match_node parent if_type? "]}," RuboCop Cop Performance RegexpMatch range_to_search_for_last_matches":{"type":"method","name":"range_to_search_for_last_matches","children":[],"call":[" next_match_pos ","expression begin_pos ","match_node loc expression ","match_node loc ","match_node parent if_branch loc expression ","match_node parent if_branch loc ","match_node parent if_branch ","match_node parent "," modifier_form? ","match_node source_range ","match_node parent if_branch source_range ","  next_match_pos  ","match_node loc expression  begin_pos ","match_node parent if_branch loc expression  begin_pos ","match_node source_range  begin_pos ","match_node parent if_branch source_range  begin_pos ","match_node loc match_node loc expression  ","match_node loc match_node parent if_branch loc expression  ","match_node loc match_node source_range  ","match_node loc match_node parent if_branch source_range  ","match_node parent if_branch loc match_node loc expression  ","match_node parent if_branch loc match_node parent if_branch loc expression  ","match_node parent if_branch loc match_node source_range  ","match_node parent if_branch loc match_node parent if_branch source_range  "]}," RuboCop Cop Performance RedundantStringChars build_call_args":{"type":"method","name":"build_call_args","children":[],"call":["call_args_node map join ","call_args_node map "]}," RuboCop Cop Performance RedundantStringChars build_bad_method":{"type":"method","name":"build_bad_method","children":[],"call":[" build_call_args ","args any? "]}," RuboCop Cop Performance RedundantStringChars build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["args first source ","args first ","args any? "," build_call_args "," build_good_method_for_brackets_or_first_method "]}," RuboCop Cop Performance RedundantStringChars build_message":{"type":"method","name":"build_message","children":[],"call":[" format "," build_bad_method "," build_good_method "," build_ build_bad_method  "," build_ build_good_method  "]}," RuboCop Cop Performance RedundantStringChars correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc dot begin_pos ","receiver loc dot ","receiver loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Performance RedundantStringChars offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Performance RedundantStringChars on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," build_good_method "," correction_range "," add_offense "," build_message "," offense_range "," redundant_chars_call? ","args empty? ! ","args empty? ","method == "," correction_ correction_range  "," correction_ offense_range  "," build_ build_message  "," offense_ correction_range  "," offense_ offense_range  "]}," RuboCop Cop Performance RedundantSplitRegexpArgument replacement":{"type":"method","name":"replacement","children":[],"call":["(send\n  (lvar :chars) :map) join ","char delete! ","STR_SPECIAL_CHARS  include? ","char dup ","chars map ","strings << ","stack pop ","stack push ","char == ","stack empty? ","regexp_content chars each_with_object ","regexp_content chars ","node first_argument content ","node first_argument ","regexp_node content ","(send\n  (lvar :char dup s) :map) join ","char dup  delete! ","char dup  dup ","char dup s map ","char dup  == ","regexp_content char dup s each_with_object ","node first_argument content  chars each_with_object ","regexp_node content  chars each_with_object ","regexp_content char dup s ","node first_argument content  chars ","regexp_node content  chars "]}," RuboCop Cop Performance RedundantSplitRegexpArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node first_argument "," replacement "]}," RuboCop Cop Performance RedundantSplitRegexpArgument determinist_regexp?":{"type":"method","name":"determinist_regexp?","children":[],"call":["DETERMINISTIC_REGEX  match? ","first_argument source ","regexp_node source "]}," RuboCop Cop Performance RedundantSplitRegexpArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense ","node first_argument "," determinist_regexp? "," split_call_with_regexp? ","corrector replace "," replacement ","regexp_node ignore_case? ","regexp_node content == ","regexp_node content "," split_call_with_regexp?  ignore_case? "," split_call_with_regexp?  content == "," split_call_with_regexp?  content "]}," RuboCop Cop Performance RedundantSortBlock message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Performance RedundantSortBlock on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace "," add_offense "," message "," sort_range "," replaceable_body? "," sort_with_block? "," register_offense "," sort_ sort_range  "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock offense_range":{"type":"method","name":"offense_range","children":[],"call":["node send_node loc selector join ","node source_range end ","node source_range ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock new_argument":{"type":"method","name":"new_argument","children":[],"call":["block_body receiver source ","block_body receiver ","block_argument source == ","block_body first_argument source ","block_body first_argument ","block_argument source ","lhs source "," use_block_argument_in_method_argument_of_operand? ","rhs source ","block_body receiver  source ","block_body first_argument  source "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock use_equality_comparison_block?":{"type":"method","name":"use_equality_comparison_block?","children":[],"call":["COMPARISON_METHODS  include? ","block_body method_name ","block_body send_type? ","REGEXP_METHODS  include? "," allow_regexp_match? ! "," allow_regexp_match? ","block_body block_body method_name  "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace "," add_offense "," format ","node method_name "," offense_range "," new_argument "," use_equality_comparison_block? ","node body ","node arguments first ","node arguments ","TARGET_METHODS  include? "," same_block_argument_and_is_a_argument? ","node arguments one? "," one_block_argument? "," offense_ offense_range  ","  new_argument  "," same_node arguments first _and_is_a_argument? "," one_node arguments first ? "]}," RuboCop Cop Performance MethodObjectAsBlock on_block_pass":{"type":"method","name":"on_block_pass","children":[],"call":[" add_offense "," method_object_as_argument? "]}," RuboCop Cop Performance IoReadlines build_call_args":{"type":"method","name":"build_call_args","children":[],"call":["call_args_node map join ","call_args_node map "]}," RuboCop Cop Performance IoReadlines correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","enumerable_call loc dot begin_pos ","enumerable_call loc dot ","enumerable_call loc ","enumerable_call loc expression end_pos ","enumerable_call loc expression ","enumerable_call method? ","readlines_call loc selector begin_pos ","readlines_call loc selector ","readlines_call loc ","enumerable_call source_range end_pos ","enumerable_call source_range ","enumerable_call loc dot readlines_call loc selector begin_pos  ","enumerable_call loc expression enumerable_call loc dot begin_pos  ","enumerable_call loc expression enumerable_call loc expression end_pos  ","enumerable_call loc expression enumerable_call source_range end_pos  ","readlines_call loc selector readlines_call loc selector begin_pos  ","enumerable_call source_range enumerable_call loc dot begin_pos  ","enumerable_call source_range enumerable_call loc expression end_pos  ","enumerable_call source_range enumerable_call source_range end_pos  "]}," RuboCop Cop Performance IoReadlines build_bad_method":{"type":"method","name":"build_bad_method","children":[],"call":["enumerable_call method_name "]}," RuboCop Cop Performance IoReadlines build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["enumerable_call method_name ","enumerable_call method? "]}," RuboCop Cop Performance IoReadlines offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","enumerable_call loc selector end_pos ","enumerable_call loc selector ","enumerable_call loc ","readlines_call loc selector begin_pos ","readlines_call loc selector ","readlines_call loc "]}," RuboCop Cop Performance IoReadlines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," build_call_args ","readlines_call arguments ","readlines_call arguments? "," correction_range ","receiver nil? "," lambda "," readlines_on_instance? "," build_ build_call_args  "," correction_ correction_range  "]}," RuboCop Cop Performance IoReadlines on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," format "," build_bad_method "," build_good_method "," offense_range "," readlines_on_instance? "," readlines_on_class? "," offense "," build_ build_bad_method  "," build_ build_good_method  "," offense_ offense_range  "]}," RuboCop Cop Performance DoubleStartEndWith message":{"type":"method","name":"message","children":[],"call":[" format ","node source ","receiver source "]}," RuboCop Cop Performance Detect message_for_method":{"type":"method","name":"message_for_method","children":[],"call":["index == "]}," RuboCop Cop Performance Detect replacement":{"type":"method","name":"replacement","children":[],"call":[" preferred_method ","index == ","method == "]}," RuboCop Cop Performance DeleteSuffix on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","receiver source "," to_string_literal "," interpret_string_escapes "," drop_end_metacharacter "," add_offense ","node loc selector ","node loc "," format ","PREFERRED_METHODS  [] ","replace_string blank? "," delete_suffix_candidate? ","replace_string empty? ","node loc dot source ","node loc dot "," gsub_method? "," to_ to_string_literal  "]}," RuboCop Cop Performance DeletePrefix on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","receiver source "," to_string_literal "," interpret_string_escapes "," drop_start_metacharacter "," add_offense ","node loc selector ","node loc "," format ","PREFERRED_METHODS  [] ","replace_string blank? "," delete_prefix_candidate? ","replace_string empty? ","node loc dot source ","node loc dot "," gsub_method? "," to_ to_string_literal  "]}," RuboCop Cop Performance ConstantRegexp include_interpolated_const?":{"type":"method","name":"include_interpolated_const?","children":[],"call":[" regexp_escape? ","inner_node const_type? ","begin_node children first ","begin_node children ","node each_child_node all? ","node each_child_node ","node interpolation? ","begin_node children first  const_type? "]}," RuboCop Cop Performance ConstantRegexp within_allowed_assignment?":{"type":"method","name":"within_allowed_assignment?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Performance ConstantRegexp on_regexp":{"type":"method","name":"on_regexp","children":[],"call":["corrector insert_after "," add_offense ","node single_interpolation? "," include_interpolated_const? ! "," include_interpolated_const? "," within_allowed_assignment? "," within_const_assignment? "]}," RuboCop Cop Performance CollectionLiteralInLoop min_size":{"type":"method","name":"min_size","children":[],"call":[" Integer "," cop_config [] "," cop_config "]}," RuboCop Cop Performance CollectionLiteralInLoop enumerable_method?":{"type":"method","name":"enumerable_method?","children":[],"call":["ENUMERABLE_METHOD_NAMES  include? "]}," RuboCop Cop Performance CollectionLiteralInLoop literal_class":{"type":"method","name":"literal_class","children":[],"call":["node hash_type? ","node array_type? "]}," RuboCop Cop Performance CollectionLiteralInLoop node_within_enumerable_loop?":{"type":"method","name":"node_within_enumerable_loop?","children":[],"call":["(csend\n  (lvar :receiver) :descendants) ! ","receiver != "," enumerable_loop? ","receiver descendants include? ! ","receiver descendants include? ","receiver descendants "]}," RuboCop Cop Performance CollectionLiteralInLoop keyword_loop?":{"type":"method","name":"keyword_loop?","children":[],"call":["LOOP_TYPES  include? "]}," RuboCop Cop Performance CollectionLiteralInLoop loop?":{"type":"method","name":"loop?","children":[],"call":[" node_within_enumerable_loop? "," kernel_loop? "," keyword_loop? ","ancestor type "]}," RuboCop Cop Performance CollectionLiteralInLoop parent_is_loop?":{"type":"method","name":"parent_is_loop?","children":[],"call":[" loop? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Performance CollectionLiteralInLoop nonmutable_method_of_array_or_hash?":{"type":"method","name":"nonmutable_method_of_array_or_hash?","children":[],"call":["HASH_METHODS  include? ","node hash_type? ","ARRAY_METHODS  include? ","node array_type? "]}," RuboCop Cop Performance CollectionLiteralInLoop check_literal?":{"type":"method","name":"check_literal?","children":[],"call":["node recursive_basic_literal? ","node children size >= "," min_size ","node children size ","node children "," nonmutable_method_of_array_or_hash? ","node nil? ! ","node nil? "]}," RuboCop Cop Performance CollectionLiteralInLoop on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," literal_class "," parent_is_loop? "," check_literal? ","node children "]}," RuboCop Cop Performance CaseWhenSplat range":{"type":"method","name":"range","children":[],"call":["node parent loc keyword join ","node source_range ","node parent loc keyword ","node parent loc ","node parent "]}," RuboCop Cop Performance BlockGivenWithExplicitBlock on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," reassigns_block_arg? ","block_arg loc name source to_sym ","block_arg loc name source ","block_arg loc name ","block_arg loc ","def_node arguments find ","def_node arguments ","node each_ancestor first ","node each_ancestor ","block_arg_name source to_sym ","block_arg_name source "," reassigns_def_node arguments find ? ","def_node arguments find  loc name source to_sym ","def_node arguments find  loc name source ","def_node arguments find  loc name ","def_node arguments find  loc ","node each_ancestor first  arguments find ","node each_ancestor first  arguments ","block_arg loc name source to_sym  source to_sym ","block_arg_name source to_sym  source to_sym ","block_arg loc name  source to_sym ","def_node arguments find _name source to_sym ","block_arg loc name source to_sym  source ","block_arg_name source to_sym  source ","block_arg loc name  source ","def_node arguments find _name source "]}," RuboCop Cop Performance BindCall build_call_args":{"type":"method","name":"build_call_args","children":[],"call":["call_args_node map join ","call_args_node map "]}," RuboCop Cop Performance BindCall correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node source_range end end_pos ","node source_range end ","node source_range ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","node loc end end_pos ","node loc end ","node loc "]}," RuboCop Cop Performance BindCall message":{"type":"method","name":"message","children":[],"call":[" format ","call_args empty? "]}," RuboCop Cop Performance BindCall on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","bind_arg source ","call_args empty? "," add_offense "," message "," build_call_args "," correction_range "," bind_with_call_method? "," build_call_args  empty? ","  message  "," build_ build_call_args  "," correction_ correction_range  "]}," RuboCop Cop Performance BigDecimalWithNumericArgument specifies_precision?":{"type":"method","name":"specifies_precision?","children":[],"call":["node arguments [] hash_type? ! ","node arguments [] hash_type? ","node arguments [] ","node arguments ","node arguments size > ","node arguments size "]}," RuboCop Cop Performance BigDecimalWithNumericArgument on_send":{"type":"method","name":"on_send","children":[],"call":["corrector wrap "," add_offense ","numeric source_range "," specifies_precision? ","numeric float_type? "," big_decimal_with_numeric_argument? ","corrector replace ","node arguments map unshift join ","node arguments map unshift ","numeric_to_d source ","node arguments map ","node arguments ","numeric_to_d source_range "," to_d? "," big_decimal_with_numeric_argument?  source_range "," big_decimal_with_numeric_argument?  float_type? "," big_decimal_with_ big_decimal_with_numeric_argument? _argument? "," big_decimal_with_numeric_argument? _to_d source "," to_d?  source "," big_decimal_with_numeric_argument? _to_d source_range "," to_d?  source_range "]}," RuboCop Cop Performance ArraySemiInfiniteRangeSlice correction":{"type":"method","name":"correction","children":[],"call":["receiver source ","range_node end value ","range_node end ","range_node end value + ","range_node irange_type? ","range_node begin value ","range_node begin "]}," RuboCop Cop Performance ArraySemiInfiniteRangeSlice on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," correction "," add_offense "," format ","range_node begin "," endless_range_slice? "]}," RuboCop Cop Performance AncestorsInclude range":{"type":"method","name":"range","children":[],"call":[" range_between ","node loc selector end_pos ","node loc selector ","node loc ","node children [] loc selector begin_pos ","node children [] loc selector ","node children [] loc ","node children [] ","node children "]}," RuboCop Cop Performance AncestorsInclude on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","superclass source ","subclass source "," add_offense "," range ","subclass const_type? ! ","subclass const_type? "," ancestors_include_candidate? "," range_between ","node loc selector end_pos ","node loc selector ","node loc ","node children [] loc selector begin_pos ","node children [] loc selector ","node children [] loc ","node children [] ","node children ","  range_between  ","  range_between _between "]}," RuboCop Cop SortBlock sort_range":{"type":"method","name":"sort_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop RegexpMetacharacter safe_multiline?":{"type":"method","name":"safe_multiline?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop RegexpMetacharacter drop_end_metacharacter":{"type":"method","name":"drop_end_metacharacter","children":[],"call":["regexp_string chop ","regexp_string chomp ","regexp_string end_with? "]}," RuboCop Cop RegexpMetacharacter drop_start_metacharacter":{"type":"method","name":"drop_start_metacharacter","children":[],"call":["regexp_string [] ","regexp_string start_with? "]}," RuboCop Cop RegexpMetacharacter literal_at_end_with_dollar?":{"type":"method","name":"literal_at_end_with_dollar?","children":[],"call":["(str \"\\\\A(?:\") match? "]}," RuboCop Cop RegexpMetacharacter literal_at_end_with_backslash_z?":{"type":"method","name":"literal_at_end_with_backslash_z?","children":[],"call":["(str \"\\\\A(?:\") match? "]}," RuboCop Cop RegexpMetacharacter literal_at_start_with_caret?":{"type":"method","name":"literal_at_start_with_caret?","children":[],"call":["(str \"\\\\A\\\\^(?:\") match? "]}," RuboCop Cop RegexpMetacharacter literal_at_start_with_backslash_a?":{"type":"method","name":"literal_at_start_with_backslash_a?","children":[],"call":["(str \"\\\\A\\\\\\\\A(?:\") match? "]}," RuboCop Cop RegexpMetacharacter literal_at_end?":{"type":"method","name":"literal_at_end?","children":[],"call":[" literal_at_end_with_dollar? "," safe_multiline? ! "," safe_multiline? "," literal_at_end_with_backslash_z? ","regex_str =~ "]}," RuboCop Cop RegexpMetacharacter literal_at_start?":{"type":"method","name":"literal_at_start?","children":[],"call":[" literal_at_start_with_caret? "," safe_multiline? ! "," safe_multiline? "," literal_at_start_with_backslash_a? ","regex_str =~ "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock same_block_argument_and_is_a_argument?":{"type":"method","name":"same_block_argument_and_is_a_argument?","children":[],"call":["block_argument source == ","block_body first_argument source ","block_body first_argument ","block_argument source ","IS_A_METHODS  include? ","block_body method_name ","block_argument source != ","block_body children [] source ","block_body children [] ","block_body children ","block_body method? ","block_body receiver source == ","block_body first_argument receiver ","block_body receiver source ","block_body receiver "]}," RuboCop Cop Performance ReverseEach use_return_value?":{"type":"method","name":"use_return_value?","children":[],"call":["(send\n  (send\n    (lvar :node) :ancestors) :detect) ! ! ","(send\n  (send\n    (lvar :node) :ancestors) :detect) ! ","ancestor return_type? ","ancestor send_type? ","ancestor assignment? ","node ancestors detect ","node ancestors "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock one_block_argument?":{"type":"method","name":"one_block_argument?","children":[],"call":["block_arguments source include? ! ","block_arguments source include? ","block_arguments source ","block_arguments one? "]}," RuboCop Cop Performance RedundantBlockCall shadowed_block_argument?":{"type":"method","name":"shadowed_block_argument?","children":[],"call":["body arguments map include? ","block_argument_of_method_signature to_s ","body arguments map ","body arguments ","body block_type? "]}," RuboCop Cop Performance SelectMap offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","map_method loc expression end_pos ","map_method loc expression ","map_method loc ","node loc selector begin_pos ","node loc selector ","node loc ","map_method source_range end_pos ","map_method source_range "]}," RuboCop Cop Performance SelectMap map_method_candidate":{"type":"method","name":"map_method_candidate","children":[],"call":["parent send_type? ","parent parent ","parent block_type? ","node parent ","node parent  send_type? ","node parent  node parent  ","node parent  block_type? ","node node parent  "]}," RuboCop Cop Performance SelectMap on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name "," offense_range ","send_node parent ","send_node method? "," map_method_candidate ","first_argument block_pass_type? ! ","first_argument block_pass_type? ","node first_argument "," offense_ offense_range  "," map_method_candidate  parent "," map_method_candidate  method? "," send_node parent _candidate ","node first_argument  block_pass_type? ! ","node first_argument  block_pass_type? ","node node first_argument  "]}," RuboCop Cop Performance MapCompact on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove ","compact_loc selector ","compact_loc dot ","corrector replace ","map_node loc selector ","map_node loc "," add_offense "," range_between ","compact_loc selector end_pos ","map_node loc selector begin_pos ","node loc "," map_compact "," compact_method_range "," remove_compact_method ","node parent ","node loc  selector ","node loc  dot "," map_compact  loc selector "," map_compact  loc ","  range_between _between ","node loc  selector end_pos "," map_compact  loc selector begin_pos "," compact_method_ range_between  "]}," RuboCop Cop Performance MapCompact compact_method_range":{"type":"method","name":"compact_method_range","children":[],"call":[" range_by_whole_lines ","compact_node multiline? ","compact_node loc selector ","compact_node loc "," invoke_method_after_map_compact_on_same_line? ! "," invoke_method_after_map_compact_on_same_line? ","compact_node parent ","(lvar :chained_method) respond_to? ","(lvar :compact_node parent ) respond_to? "]}," RuboCop Cop Performance MapCompact invoke_method_after_map_compact_on_same_line?":{"type":"method","name":"invoke_method_after_map_compact_on_same_line?","children":[],"call":["compact_node loc selector line == ","chained_method loc selector line ","chained_method loc selector ","chained_method loc ","compact_node loc selector line ","compact_node loc selector ","compact_node loc ","chained_method loc last_line "]}," RuboCop Cop Performance MapCompact remove_compact_method":{"type":"method","name":"remove_compact_method","children":[],"call":["corrector remove ","compact_node loc dot ","compact_node loc "," range_by_whole_lines "," invoke_method_after_map_compact_on_same_line? ! "," invoke_method_after_map_compact_on_same_line? ","(lvar :chained_method) respond_to? ","compact_node multiline? ","compact_node loc selector ","compact_node parent ","chained_method dot? "," compact_method_with_final_newline_range "," map_method_and_compact_method_on_same_line? ! "," map_method_and_compact_method_on_same_line? "," use_dot? ","(lvar :compact_node parent ) respond_to? ","compact_node parent  dot? "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock use_block_argument_in_method_argument_of_operand?":{"type":"method","name":"use_block_argument_in_method_argument_of_operand?","children":[],"call":["(send\n  (lvar :arguments) :inject\n  (send\n    (lvar :arguments) :map\n    (block-pass\n      (sym :source)))) any? ","block_argument source ","operand_sources + ","argument each_descendant map ","argument each_descendant ","arguments inject ","arguments map ","operand arguments ","operand send_type? ","(send\n  (lvar :operand arguments ) :inject\n  (send\n    (lvar :operand arguments ) :map\n    (block-pass\n      (sym :source)))) any? ","operand arguments  inject ","operand arguments  map ","operand operand arguments  "]}," RuboCop Cop Performance ConcurrentMonotonicTime on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node source ","node first_argument source ","node first_argument "," concurrent_monotonic_time? "]}," RuboCop Cop Performance StringIdentifierArgument on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","first_argument source ","first_argument value to_sym inspect ","first_argument value to_sym ","first_argument value ","first_argument value include? ","first_argument str_type? ","node first_argument ","first_argument_value to_sym inspect ","first_argument_value to_sym ","first_argument_value include? ","node receiver ","COMMAND_METHODS  include? ","node method_name ","node first_argument  source ","node first_argument  value to_sym inspect ","node first_argument  value to_sym ","node first_argument  value ","node first_argument  value include? ","node first_argument  str_type? ","node node first_argument  ","node first_argument _value to_sym inspect ","first_argument value  to_sym inspect ","node first_argument _value to_sym ","first_argument value  to_sym ","node first_argument _value include? ","first_argument value  include? "]}," RuboCop Cop Performance RedundantStringChars build_good_method_for_brackets_or_first_method":{"type":"method","name":"build_good_method_for_brackets_or_first_method","children":[],"call":["first_arg source ","args first source ","args first ","args any? ","method == "," build_call_args ","args first  source "]}," RuboCop Cop Performance MapCompact compact_method_with_final_newline_range":{"type":"method","name":"compact_method_with_final_newline_range","children":[],"call":[" range_by_whole_lines "]}," RuboCop Cop Performance MapCompact map_method_and_compact_method_on_same_line?":{"type":"method","name":"map_method_and_compact_method_on_same_line?","children":[],"call":["compact_node loc selector line == ","map_node loc selector line ","map_node loc selector ","map_node loc ","compact_node loc selector line ","compact_node loc selector ","compact_node loc ","compact_node children first send_node ","compact_node children first ","compact_node children ","compact_node children first respond_to? ","compact_node children first send_node  loc selector line ","compact_node children first send_node  loc selector ","compact_node children first send_node  loc "]}," RuboCop Cop Performance SortReverse register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," sort_range "," sort_ sort_range  "]}," RuboCop Cop Performance SortReverse on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" register_offense "," replaceable_body? ","arg_count == "," sort_with_numblock? "]}," RuboCop Cop Performance RedundantSortBlock register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," sort_range "," sort_ sort_range  "]}," RuboCop Cop Performance RedundantSortBlock on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" register_offense "," replaceable_body? ","arg_count == "," sort_with_numblock? "]}," RuboCop Cop Performance RedundantMatch autocorrectable?":{"type":"method","name":"autocorrectable?","children":[],"call":["node first_argument regexp_type? ","node first_argument ","node receiver regexp_type? ","node receiver "]}," RuboCop Cop Performance MapCompact use_dot?":{"type":"method","name":"use_dot?","children":[],"call":["node dot? ","node respond_to? "]}," RuboCop Cop Performance Count negate_block_pass_as_inline_block":{"type":"method","name":"negate_block_pass_as_inline_block","children":[],"call":["node last_argument children first source ","node last_argument children first ","node last_argument children ","node last_argument ","node last_argument children first value ","node last_argument children first sym_type? "]}," RuboCop Cop Performance Count negate_expression":{"type":"method","name":"negate_expression","children":[],"call":["node source "]}," RuboCop Cop Performance Count negate_block_reject":{"type":"method","name":"negate_block_reject","children":[],"call":["corrector replace "," negate_expression ","node receiver body ","node receiver ","node receiver body children last ","node receiver body children ","node receiver body begin_type? "]}," RuboCop Cop Performance Count negate_block_pass_reject":{"type":"method","name":"negate_block_pass_reject","children":[],"call":["corrector replace "," negate_block_pass_as_inline_block ","node receiver ","node receiver loc expression with ","node receiver loc begin begin_pos ","node receiver loc begin ","node receiver loc ","node receiver loc expression ","node receiver source_range with ","node receiver source_range "]}," RuboCop Cop Performance Count negate_reject":{"type":"method","name":"negate_reject","children":[],"call":[" negate_block_reject "," negate_block_pass_reject ","node receiver send_type? ","node receiver "]}," RuboCop Cop Performance RedundantEqualityComparisonBlock allow_regexp_match?":{"type":"method","name":"allow_regexp_match?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Performance RegexpMatch autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Performance ConstantRegexp autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Performance MapMethodChain find_begin_of_chained_map_method":{"type":"method","name":"find_begin_of_chained_map_method","children":[],"call":[" find_begin_of_chained_map_method "," block_pass_with_symbol_arg? ","receiver first_argument ","receiver call_type? ","chained_map_method receiver ","map_args unshift ","chained_map_method first_argument ","RESTRICT_ON_SEND  include? ! ","RESTRICT_ON_SEND  include? ","chained_map_method method_name ","chained_map_method call_type? ! ","chained_map_method call_type? ","node receiver "," find_begin_of_node receiver  ","chained_map_method receiver  first_argument ","chained_map_method receiver  call_type? ","chained_map_method chained_map_method receiver  ","node receiver  receiver "," block_pass_with_symbol_arg? s unshift ","node receiver  first_argument ","node receiver  method_name ","node receiver  call_type? ! ","node receiver  call_type? ","node chained_map_method receiver  "]}," RuboCop Cop Performance MapMethodChain on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," add_offense "," format ","map_args join ","begin_of_chained_map_method method_name ","begin_of_chained_map_method loc selector begin join ","node source_range end ","node source_range ","begin_of_chained_map_method loc selector begin ","begin_of_chained_map_method loc selector ","begin_of_chained_map_method loc "," find_begin_of_chained_map_method "," block_pass_with_symbol_arg? ","node first_argument "," part_of_ignored_node? "," block_pass_with_symbol_arg? s join "," find_begin_of_chained_map_method  method_name "," find_begin_of_chained_map_method  loc selector begin join ","node source_begin_of_chained_map_method loc selector begin join  end ","node source_begin_of_chained_map_method loc selector begin join  "," find_begin_of_chained_map_method  loc selector begin "," find_begin_of_chained_map_method  loc selector "," find_begin_of_chained_map_method  loc "," find_ find_begin_of_chained_map_method  "]}," RuboCop Cop Performance InefficientHashSearch correct_dot":{"type":"method","name":"correct_dot","children":[],"call":["node receiver loc dot source ","node receiver loc dot ","node receiver loc ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch correct_hash_expression":{"type":"method","name":"correct_hash_expression","children":[],"call":["node receiver receiver source ","node receiver receiver ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch correct_argument":{"type":"method","name":"correct_argument","children":[],"call":["node arguments first source ","node arguments first ","node arguments "]}," RuboCop Cop Performance InefficientHashSearch correct_method":{"type":"method","name":"correct_method","children":[],"call":[" use_long_method "," current_method "]}," RuboCop Cop Performance InefficientHashSearch replacement":{"type":"method","name":"replacement","children":[],"call":[" correct_argument "," correct_method "," correct_dot "," correct_hash_expression "]}," autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[" push "]}," RuboCop Cop Performance RedundantMatch call_like?":{"type":"method","name":"call_like?","children":[],"call":["arg super_type? ","arg yield_type? ","arg call_type? "]}," RuboCop Cop Performance RedundantMatch requires_parentheses_for_call_like?":{"type":"method","name":"requires_parentheses_for_call_like?","children":[],"call":["HIGHER_PRECEDENCE_OPERATOR_METHODS  include? ! ","HIGHER_PRECEDENCE_OPERATOR_METHODS  include? ","arg method_name ","arg arguments? ! ","arg arguments? ","arg parenthesized? "]}," RuboCop Cop Performance RedundantMatch requires_parentheses?":{"type":"method","name":"requires_parentheses?","children":[],"call":[" requires_parentheses_for_call_like? "," call_like? ","arg range_type? ","arg or_type? ","arg and_type? ","arg ternary? ","arg if_type? "]}," RuboCop Cop Performance RedundantMatch replacement":{"type":"method","name":"replacement","children":[],"call":["arg source "," requires_parentheses? ","node first_argument ","node first_argument  source ","node first_node first_argument ument "]}," RuboCop Cop Performance BlockGivenWithExplicitBlock autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Performance DeleteSuffix autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","receiver source "," to_string_literal "," interpret_string_escapes "," drop_end_metacharacter ","PREFERRED_METHODS  [] "," lambda "," gsub_method? ","node source_range "," delete_suffix_candidate? "," to_ to_string_literal  "]}," RuboCop Cop Performance DeletePrefix autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","receiver source "," to_string_literal "," interpret_string_escapes "," drop_start_metacharacter ","PREFERRED_METHODS  [] "," lambda "," gsub_method? ","node source_range "," delete_prefix_candidate? "," to_ to_string_literal  "]}," RuboCop Cop Performance BindCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","bind_arg source ","call_args empty? "," build_call_args "," correction_range "," bind_with_call_method? "," build_call_args  empty? "," build_ build_call_args  "," correction_ correction_range  "]}," RuboCop Cop Performance StringInclude autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source + + + ","receiver source + + "," to_string_literal ","receiver source + ","receiver source "," lambda "," interpret_string_escapes ","receiver is_a? "," redundant_regex? "]}," RuboCop Cop Performance Squeeze autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source "," to_string_literal ","PREFERRED_METHODS  [] "," lambda "," squeeze_candidate? "," to_ to_string_literal  "]}," RuboCop Cop Performance SortReverse autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," sort_range "," lambda "," sort_with_block? "," sort_ sort_range  "]}," RuboCop Cop Performance ReverseFirst autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," build_good_method "," correction_range "," reverse_first_candidate? "," correction_ correction_range  "]}," RuboCop Cop Performance RedundantStringChars replaceable_method?":{"type":"method","name":"replaceable_method?","children":[],"call":["REPLACEABLE_METHODS  include? "]}," RuboCop Cop Performance RedundantStringChars autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," build_good_method "," correction_range "," redundant_chars_call? "," correction_ correction_range  "]}," RuboCop Cop Performance RedundantSortBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," sort_range "," lambda "," sort_with_block? "," sort_ sort_range  "]}," RuboCop Cop Performance IoReadlines offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format "," build_bad_method "," build_good_method "," offense_range "," build_ build_bad_method  "," build_ build_good_method  "," offense_ offense_range  "]}," RuboCop Cop Performance IoReadlines enumerable_method?":{"type":"method","name":"enumerable_method?","children":[],"call":["ENUMERABLE_METHODS  include? ","node to_sym "]}," RuboCop Cop Performance BigDecimalWithNumericArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector wrap "," lambda "," big_decimal_with_numeric_argument? "]}," RuboCop Cop Performance AncestorsInclude autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","superclass source ","subclass source "," lambda "," ancestors_include_candidate? "]}," RuboCop Cop Performance ReverseEach replacement_range":{"type":"method","name":"replacement_range","children":[],"call":[" range_between ","node loc selector begin_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot "]}," RuboCop Cop Performance ConstantRegexp within_const_assignment?":{"type":"method","name":"within_const_assignment?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}}