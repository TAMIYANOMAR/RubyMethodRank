{" Redis get_size":{"type":"method","name":"get_size","children":[],"call":["string size ","string bytesize ","string respond_to? "]}," Redis read_reply":{"type":"method","name":"read_reply","children":[],"call":[" raise ","res << "," read_reply ","objects times ","bulklen == ","line to_i ","@sock read ","line strip ","MINUS  + ","@sock gets ","rtype ! ","line to_i  times ","line to_i  == ","@sock gets  to_i ","@sock gets  strip ","@sock read  ! "]}," Redis pipelined":{"type":"method","name":"pipelined","children":[],"call":["pipeline execute ","Pipeline  new ","original call_pipelined ","@client commands ","@client commands empty? "," synchronize ","original call_pipeline ","prior_client call_pipeline ","PipelinedConnection  new ","DeprecatedPipeline  new ","Pipeline  deprecation_warning ","Kernel  caller_locations ","(lvar :block) == ","client pipelined ","Pipeline  new  execute ","original call_Pipeline  new d ","Pipeline  new  commands ","DeprecatedPipeline  new  commands ","Pipeline  new  commands empty? ","DeprecatedPipeline  new  commands empty? ","original call_Pipeline  new  ","prior_client call_Pipeline  new  ","client Pipeline  new d "]}," Redis quit":{"type":"method","name":"quit","children":[],"call":[" call_command ","@client call ","@client disconnect "," synchronize ","client disconnect ","client call "]}," Redis type":{"type":"method","name":"type","children":[],"call":[" call_command ","@client call "," synchronize ","client call "]}," Redis mapped_mget":{"type":"method","name":"mapped_mget","children":[],"call":["result merge! ","value nil? ","keys shift "," mget each "," mget ","Hash  [] ","keys zip flatten ","keys zip ","reply kind_of? ","hash []= ","keys zip each ","Hash  new ","reply is_a? ","keys shift s shift ","keys shift s zip flatten ","keys shift s zip "," mget  kind_of? ","Hash  new  []= ","keys shift s zip each "," mget  is_a? "]}," Redis decr":{"type":"method","name":"decr","children":[],"call":[" call_command ","@client call "," synchronize ","client call "]}," Redis incr":{"type":"method","name":"incr","children":[],"call":[" call_command ","@client call "," synchronize ","client call "]}," Redis sort":{"type":"method","name":"sort","children":[],"call":[" call_command ","cmd << ","options [] join ","options [] ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten * ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten ","@client call ","command to_a ","c value ","c words ","c multi ","c splat ","CommandOptions  new ","options [] split "," Array each "," Array "," synchronize ","reply each_slice to_a ","reply each_slice ","get size ","get size > ","client call ","args concat ","order split ","(str \"GET\") product flatten ","(str \"GET\") product ","get empty? ","(sym :sort) + ","(str \"LIMIT\") + ","store ! ","args << << ","args << ","get each ","(send\n  (lvar :options) :[]\n  (sym : Array )) flatten * ","(send\n  (lvar :options) :[]\n  (sym : Array )) flatten "," Array  size "," Array  size > ","options []  split "," Array  empty? ","options []  ! "," Array  each "]}," Redis set":{"type":"method","name":"set","children":[],"call":[" expire "," call_command == "," call_command ","@client call "," synchronize ","client call ","value to_s ","(sym :set) + "," _boolify_set ","args concat ","options [] ","args << ","args << << "," options [] pire ","  call_command == ynchronize ","value to_ call_command ==  ","( call_command == ym : call_command == et) + "," _boolify_ call_command == et ","arg call_command ==  concat ","option call_command ==  [] ","arg call_command ==  << ","arg call_command ==  << << "]}," Redis []=":{"type":"method","name":"[]=","children":[],"call":[" set "]}," Redis []":{"type":"method","name":"[]","children":[],"call":[" get "]}," Redis select":{"type":"method","name":"select","children":[],"call":[" raise ","@client call ","@client db= "," synchronize ","client call ","client db= "]}," Redis maybe_lock":{"type":"method","name":"maybe_lock","children":[],"call":["block call ","@mutex synchronize "]}," Redis process_command":{"type":"method","name":"process_command","children":[],"call":[" read_reply ","processor call ","REPLY_PROCESSOR  [] ","argv [] ","argvv map ","@sock write ","REPLY_PROCESSOR  []  call "]}," Redis raw_call_command":{"type":"method","name":"raw_call_command","children":[],"call":["results [] "," process_command "," maybe_lock ","command << ","argv join ","argv []= "," get_size ","argv [] to_s ","argv [] ","argv length > ","argv length ","BULK_COMMANDS  [] "," raise ","DISABLED_COMMANDS  [] ","ALIASES  [] ","argv [] to_s downcase ","argvv each ","(send\n  (lvar :command) :map) join ","command map ","v to_s ","argvp each ","argvp size ","values unshift ","argvp [] ","argvp pop to_a flatten ","argvp pop to_a ","argvp pop ","argvv flatten ","MULTI_BULK_COMMANDS  [] ","argvv flatten [] to_s ","argvv flatten [] ","argvp [] is_a? "," process_(send\n  (lvar :command) :map) join  ","(send\n  (lvar :command) :map) join  << ","argv to_s  join ","argv to_s  []= ","argv to_s  [] to_s ","argv to_s  [] ","argv to_s  length > ","argv to_s  length ","argv to_s  [] to_s downcase ","argv to_s v to_s  each ","(send\n  (lvar :(send\n  (lvar :command) :map) join ) :map) join ","(send\n  (lv to_s ar :command) :map) join ","(send\n  (lvar :command) :map) join  map ","v to_s  to_s ","argv to_s p each ","values unshift  each ","argvv flatten  each ","argv to_s p size ","values unshift  size ","argvv flatten  size ","v to_s alues unshift ","argvp pop to_a flatten  unshift ","argv to_s p [] ","values unshift  [] ","argvv flatten  [] ","argv to_s p pop to_a flatten ","values unshift  pop to_a flatten ","argvv flatten  pop to_a flatten ","argv to_s p pop to_a ","values unshift  pop to_a ","argvv flatten  pop to_a ","argv to_s p pop ","values unshift  pop ","argvv flatten  pop ","argv to_s v to_s  flatten ","argv to_s v to_s  flatten [] to_s ","argv to_s v to_s  flatten [] ","argv to_s p [] is_a? ","values unshift  [] is_a? ","argvv flatten  [] is_a? "]}," Redis call_command":{"type":"method","name":"call_command","children":[],"call":[" raw_call_command ","argv dup "," connect_to_server ","@sock close ","@sock ! ","argv inspect ","@logger debug "]}," Redis method_missing":{"type":"method","name":"method_missing","children":[],"call":[" call_command ","@client call "," synchronize ","client call ","(lvar :command) + "]}," Redis connect_to":{"type":"method","name":"connect_to","children":[],"call":["sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - ","TCPSocket  new "," raise ","@timeout != ","@logger info ","ex message ","ex class name ","ex class ","TCPSocket  new  setTCPSocket  new opt ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "]}," Redis connect_to_server":{"type":"method","name":"connect_to_server","children":[],"call":[" call_command ","@db == "," connect_to ","@timeout == "]}," Redis server":{"type":"method","name":"server","children":[],"call":[]}," Redis to_s":{"type":"method","name":"to_s","children":[],"call":[" server "]}," Redis initialize":{"type":"method","name":"initialize","children":[],"call":[" to_s ","@logger info ","Mutex  new ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (int 5)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (int 0)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :port))\n  (int 6379)) to_i ","Client  new ","Client ThreadSafe  new "," extend ","options [] == ","block call "," mon_synchronize "," lambda ","options dup ","h []= ","Hash  new ","client new ","options key? ","Monitor  new ","@client inherit_socket! "," initialize_client ","@options delete ","@options []= ","ENV  [] ","@options key? ","SERVER_URL_OPTIONS  none? ","options []  info ","Client  new  inherit_socket! ","Client ThreadSafe  new  inherit_socket! ","client new  inherit_socket! "," initialize_client  inherit_socket! ","@client @options delete ! ","options dup  delete ","options dup  []= ","options dup  key? "]}," Redis Pipeline execute":{"type":"method","name":"execute","children":[],"call":["@commands clear ","@redis call_command ","@commands empty? "]}," Redis Pipeline call_command":{"type":"method","name":"call_command","children":[],"call":["@commands << "]}," Redis Pipeline initialize":{"type":"method","name":"initialize","children":[],"call":["client client ","client is_a? "]}," HashRing binary_search":{"type":"method","name":"binary_search","children":[],"call":["idx + ","idx - ","comp > ","comp == ","ary [] <=> ","ary [] ","(send\n  (lvar :lower) :+\n  (lvar :upper)) / ","lower + ","lower <= ","ary size - ","ary size ","upper < ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  + ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  - ","ary [] <=>  > ","ary [] <=>  == ","(send\n  (lvar :idx + ) :+\n  (lvar :upper)) / ","(send\n  (lvar :lower) :+\n  (lvar :idx - )) / ","(send\n  (lvar :lower) :+\n  (lvar :ary size - )) / ","idx +  + ","idx +  <= ","idx -  < ","ary size -  < "]}," HashRing iter_nodes":{"type":"method","name":"iter_nodes","children":[],"call":["@ring [] ","@sorted_keys [] each ","@sorted_keys [] "," get_node_pos ","@ring size == ","@ring size "]}," HashRing get_node_pos":{"type":"method","name":"get_node_pos","children":[],"call":["@ring [] ","@sorted_keys [] ","HashRing  binary_search ","Zlib  crc32 ","@ring size == ","@ring size ","Zlib  Zlib  crc32 32 "]}," HashRing get_node":{"type":"method","name":"get_node","children":[],"call":[" get_node_pos [] "," get_node_pos "]}," HashRing remove_node":{"type":"method","name":"remove_node","children":[],"call":["k == ","@sorted_keys reject! ","@ring delete ","Zlib  crc32 ","@replicas times ","n to_s == ","node to_s ","n to_s ","@nodes reject! ","@sorted_Zlib  crc32 s reject! "]}," HashRing add_node":{"type":"method","name":"add_node","children":[],"call":["@sorted_keys sort! ","@sorted_keys << ","@ring []= ","Zlib  crc32 ","@replicas times ","@nodes << ","@sorted_Zlib  crc32 s sort! ","@sorted_Zlib  crc32 s << "]}," HashRing initialize":{"type":"method","name":"initialize","children":[],"call":[" add_node ","nodes each "]}," DistRedis on_each_node":{"type":"method","name":"on_each_node","children":[],"call":["red send ","@ring nodes each ","@ring nodes "]}," DistRedis delete_cloud!":{"type":"method","name":"delete_cloud!","children":[],"call":["red delete ","red keys each ","red keys ","@ring nodes each ","@ring nodes "]}," DistRedis flush_db":{"type":"method","name":"flush_db","children":[],"call":[" on_each_node "]}," DistRedis flush_all":{"type":"method","name":"flush_all","children":[],"call":[" on_each_node "]}," DistRedis quit":{"type":"method","name":"quit","children":[],"call":[" on_each_node "]}," DistRedis bgsave":{"type":"method","name":"bgsave","children":[],"call":[" on_each_node "]}," DistRedis save":{"type":"method","name":"save","children":[],"call":[" on_each_node "]}," DistRedis keys":{"type":"method","name":"keys","children":[],"call":["red keys ","@ring nodes map ","@ring nodes "]}," DistRedis method_missing":{"type":"method","name":"method_missing","children":[],"call":["redis send "," node_for_key ","args first to_s ","args first "," node_for_key  send "]}," DistRedis add_server":{"type":"method","name":"add_server","children":[],"call":["@ring add_node ","Redis  new ","server split "]}," DistRedis node_for_key":{"type":"method","name":"node_for_key","children":[],"call":["@ring get_node ","key =~ "]}," DistRedis initialize":{"type":"method","name":"initialize","children":[],"call":["HashRing  new ","hosts << ","Redis  new ","h split ","opts [] each ","opts [] "," raise "]}," DistRedis keys_by_node":{"type":"method","name":"keys_by_node","children":[],"call":["kbn [] << ","kbn [] ","kbn [] include? "," node_for_key ","keyz flatten inject ","keyz flatten ","  node_for_key _for_key "]}," DistRedis mget":{"type":"method","name":"mget","children":[],"call":["results [] ","keyz flatten map ","keyz flatten ","results []= ","node mapped_mget each ","node mapped_mget ","kbn each "," keys_by_node "," keys_by_node  each "]}," DistRedis mset":{"type":"method","name":"mset","children":[],"call":[]}," RedisRb Pipeline execute":{"type":"method","name":"execute","children":[],"call":["@commands clear ","@redis call_command ","@commands empty? "]}," RedisRb Pipeline call_command":{"type":"method","name":"call_command","children":[],"call":["@commands << "]}," RedisRb Pipeline initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedisRb HashRing binary_search":{"type":"method","name":"binary_search","children":[],"call":["ary size - ","ary size ","upper < ","idx + ","idx - ","comp > ","comp == ","ary [] <=> ","ary [] ","(send\n  (lvar :lower) :+\n  (lvar :upper)) / ","lower + ","lower <= ","ary size -  < ","idx -  < ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  + ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  - ","ary [] <=>  > ","ary [] <=>  == ","(send\n  (lvar :lower) :+\n  (lvar :ary size - )) / ","(send\n  (lvar :lower) :+\n  (lvar :idx - )) / ","(send\n  (lvar :idx + ) :+\n  (lvar :upper)) / ","idx +  + ","idx +  <= "]}," RedisRb HashRing iter_nodes":{"type":"method","name":"iter_nodes","children":[],"call":["@ring [] ","@sorted_keys [] each ","@sorted_keys [] "," get_node_pos ","@ring size == ","@ring size "]}," RedisRb HashRing get_node_pos":{"type":"method","name":"get_node_pos","children":[],"call":["@ring [] ","@sorted_keys [] ","HashRing  binary_search ","Zlib  crc32 ","@ring size == ","@ring size ","Zlib  Zlib  crc32 32 "]}," RedisRb HashRing get_node":{"type":"method","name":"get_node","children":[],"call":[" get_node_pos [] "," get_node_pos "]}," RedisRb HashRing remove_node":{"type":"method","name":"remove_node","children":[],"call":["k == ","@sorted_keys reject! ","@ring delete ","Zlib  crc32 ","@replicas times ","n to_s == ","node to_s ","n to_s ","@nodes reject! ","@sorted_Zlib  crc32 s reject! "]}," RedisRb HashRing add_node":{"type":"method","name":"add_node","children":[],"call":["@sorted_keys sort! ","@sorted_keys << ","@ring []= ","Zlib  crc32 ","@replicas times ","@nodes << ","@sorted_Zlib  crc32 s sort! ","@sorted_Zlib  crc32 s << "]}," RedisRb HashRing initialize":{"type":"method","name":"initialize","children":[],"call":[" add_node ","nodes each "]}," RedisRb DistRedis keys_by_node":{"type":"method","name":"keys_by_node","children":[],"call":["kbn [] << ","kbn [] ","kbn [] include? "," node_for_key ","keyz flatten inject ","keyz flatten ","  node_for_key _for_key "]}," RedisRb DistRedis mget":{"type":"method","name":"mget","children":[],"call":["results [] ","keyz flatten map ","keyz flatten ","results []= ","node mapped_mget each ","node mapped_mget ","kbn each "," keys_by_node "," keys_by_node  each "]}," RedisRb DistRedis mset":{"type":"method","name":"mset","children":[],"call":[]}," RedisRb DistRedis on_each_node":{"type":"method","name":"on_each_node","children":[],"call":["red send ","@ring nodes each ","@ring nodes "]}," RedisRb DistRedis delete_cloud!":{"type":"method","name":"delete_cloud!","children":[],"call":["red delete ","red keys each ","red keys ","@ring nodes each ","@ring nodes "]}," RedisRb DistRedis flush_db":{"type":"method","name":"flush_db","children":[],"call":[" on_each_node "]}," RedisRb DistRedis flush_all":{"type":"method","name":"flush_all","children":[],"call":[" on_each_node "]}," RedisRb DistRedis quit":{"type":"method","name":"quit","children":[],"call":[" on_each_node "]}," RedisRb DistRedis bgsave":{"type":"method","name":"bgsave","children":[],"call":[" on_each_node "]}," RedisRb DistRedis save":{"type":"method","name":"save","children":[],"call":[" on_each_node "]}," RedisRb DistRedis keys":{"type":"method","name":"keys","children":[],"call":[" node_keys flatten "," node_keys "]}," RedisRb DistRedis node_keys":{"type":"method","name":"node_keys","children":[],"call":["red keys ","@ring nodes map ","@ring nodes "]}," RedisRb DistRedis method_missing":{"type":"method","name":"method_missing","children":[],"call":["redis send "," node_for_key ","args first to_s ","args first "," node_for_key  send "]}," RedisRb DistRedis add_server":{"type":"method","name":"add_server","children":[],"call":["@ring add_node ","Client  new ","server split "]}," RedisRb DistRedis node_for_key":{"type":"method","name":"node_for_key","children":[],"call":["@ring get_node ","key =~ "]}," RedisRb DistRedis initialize":{"type":"method","name":"initialize","children":[],"call":["HashRing  new ","hosts << ","Client  new ","h split ","opts [] each ","opts [] "," raise "]}," RedisRb Client get_size":{"type":"method","name":"get_size","children":[],"call":["string size ","string bytesize ","string respond_to? "]}," RedisRb Client multi":{"type":"method","name":"multi","children":[],"call":[" raise "," discard "," exec "," block_given? "," call_command "]}," RedisRb Client exec":{"type":"method","name":"exec","children":[],"call":[" call_command "]}," RedisRb Client read_reply":{"type":"method","name":"read_reply","children":[],"call":[" raise ","res << "," read_reply ","objects times ","bulklen == ","line to_i ","@sock read ","line strip ","MINUS  + ","@sock gets ","rtype ! ","line to_i  times ","line to_i  == ","@sock gets  to_i ","@sock gets  strip ","@sock read  ! "]}," RedisRb Client pipelined":{"type":"method","name":"pipelined","children":[],"call":["pipeline execute ","Pipeline  new ","Pipeline  new  execute "]}," RedisRb Client quit":{"type":"method","name":"quit","children":[],"call":[" call_command "]}," RedisRb Client type":{"type":"method","name":"type","children":[],"call":[" call_command "]}," RedisRb Client mapped_mget":{"type":"method","name":"mapped_mget","children":[],"call":["result merge! ","value nil? ","keys shift "," mget each "," mget ","keys shift s shift "]}," RedisRb Client decr":{"type":"method","name":"decr","children":[],"call":[" call_command "]}," RedisRb Client incr":{"type":"method","name":"incr","children":[],"call":[" call_command "]}," RedisRb Client sort":{"type":"method","name":"sort","children":[],"call":[" call_command ","cmd << ","options [] ","options [] join ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten * ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten "]}," RedisRb Client msetnx":{"type":"method","name":"msetnx","children":[],"call":[" call_command ","args unshift ","hsh to_a flatten unshift ","hsh to_a flatten ","hsh to_a ","args pop ","Hash  === ","args last ","args pop  to_a flatten unshift ","args pop  to_a flatten ","args pop  to_a "]}," RedisRb Client mset":{"type":"method","name":"mset","children":[],"call":[" call_command ","args unshift ","hsh to_a flatten unshift ","hsh to_a flatten ","hsh to_a ","args pop ","Hash  === ","args last ","args pop  to_a flatten unshift ","args pop  to_a flatten ","args pop  to_a "]}," RedisRb Client set":{"type":"method","name":"set","children":[],"call":[" expire "," call_command == "," call_command "]}," RedisRb Client []=":{"type":"method","name":"[]=","children":[],"call":[" set "]}," RedisRb Client []":{"type":"method","name":"[]","children":[],"call":[" get "]}," RedisRb Client select":{"type":"method","name":"select","children":[],"call":[" raise "]}," RedisRb Client maybe_lock":{"type":"method","name":"maybe_lock","children":[],"call":["block call ","@mutex synchronize "]}," RedisRb Client process_command":{"type":"method","name":"process_command","children":[],"call":[" read_reply ","processor call ","REPLY_PROCESSOR  [] ","argv [] to_s ","argv [] ","argvv map ","@sock write ","REPLY_PROCESSOR  []  call "]}," RedisRb Client raw_call_command":{"type":"method","name":"raw_call_command","children":[],"call":["results [] "," process_command "," maybe_lock ","command << ","argv join ","argv []= "," get_size ","argv [] to_s ","argv [] ","argv length > ","argv length ","BULK_COMMANDS  [] "," raise ","DISABLED_COMMANDS  [] ","ALIASES  [] ","argv [] to_s downcase ","argvv each ","a to_s ","argv each ","argv size ","MULTI_BULK_COMMANDS  [] ","argvv [] [] to_s ","argvv [] [] ","argvv [] ","argvp [] is_a? ","argvp [] "," process_comma to_s nd "," ma to_s ybe_lock ","comma to_s nd << ","a to_s rgv join ","a to_s rgv []= ","a to_s rgv [] to_s ","a to_s rgv [] ","a to_s rgv length > ","a to_s rgv length "," ra to_s ise ","a to_s rgv [] to_s downca to_s se ","a to_s rgvv ea to_s ch ","a to_s  to_s ","a to_s rgv ea to_s ch ","a to_s rgv size ","a to_s rgvv [] [] to_s ","a to_s rgvv [] [] ","a to_s rgvv [] ","a to_s rgvp [] is_a to_s ? ","a to_s rgvp [] "]}," RedisRb Client call_command":{"type":"method","name":"call_command","children":[],"call":[" raw_call_command ","argv dup "," connect_to_server ","@sock close ","@sock ! ","argv inspect ","@logger debug "]}," RedisRb Client method_missing":{"type":"method","name":"method_missing","children":[],"call":[" call_command "]}," RedisRb Client connect_to":{"type":"method","name":"connect_to","children":[],"call":["@logger info ","ex message ","ex class name ","ex class ","sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - ","TCPSocket  new "," raise ","@timeout != ","TCPSocket  new  setTCPSocket  new opt ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "]}," RedisRb Client connect_to_server":{"type":"method","name":"connect_to_server","children":[],"call":[" call_command ","@db == "," connect_to ","@timeout == "]}," RedisRb Client server":{"type":"method","name":"server","children":[],"call":[]}," RedisRb Client to_s":{"type":"method","name":"to_s","children":[],"call":[" server "]}," RedisRb Client initialize":{"type":"method","name":"initialize","children":[],"call":[" to_s ","@logger info ","Mutex  new ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (int 5)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (int 0)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :port))\n  (int 6379)) to_i ","options []  info "]}," Redis new":{"type":"method","name":"new","children":[],"call":[]}," Redis HashRing binary_search":{"type":"method","name":"binary_search","children":[],"call":["ary size - ","ary size ","upper < ","idx + ","idx - ","comp > ","comp == ","ary [] <=> ","ary [] ","(send\n  (lvar :lower) :+\n  (lvar :upper)) / ","lower + ","lower <= ","upper - ","mid + ","ary [] > ","lower < ","ary size -  < ","idx -  < ","ary size  < ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  + ","(send\n  (lvar :lower) :+\n  (lvar :upper)) /  - ","ary [] <=>  > ","ary [] <=>  == ","(send\n  (lvar :lower) :+\n  (lvar :ary size - )) / ","(send\n  (lvar :lower) :+\n  (lvar :idx - )) / ","(send\n  (lvar :lower) :+\n  (lvar :ary size )) / ","(send\n  (lvar :idx + ) :+\n  (lvar :upper)) / ","(send\n  (lvar :mid + ) :+\n  (lvar :upper)) / ","idx +  + ","mid +  + ","idx +  <= ","mid +  <= ","ary size -  - ","idx -  - ","ary size  - ","idx +  < ","mid +  < "]}," Redis HashRing iter_nodes":{"type":"method","name":"iter_nodes","children":[],"call":["@ring [] ","@sorted_keys [] each ","@sorted_keys [] "," get_node_pos ","@ring size == ","@ring size ","(send\n  (lvar :pos) :+\n  (lvar :n)) % ","pos + ","@ring size times ","@ring empty? "," binary_search "," hash_for "," get_node_ binary_search  ","(send\n  (lvar : binary_search ) :+\n  (lvar :n)) % "," binary_search  + "]}," Redis HashRing get_node_pos":{"type":"method","name":"get_node_pos","children":[],"call":["@ring [] ","@sorted_keys [] ","HashRing  binary_search ","Zlib  crc32 ","@ring size == ","@ring size ","@ring empty? ","Zlib  Zlib  crc32 32 "]}," Redis HashRing get_node":{"type":"method","name":"get_node","children":[],"call":[" get_node_pos [] "," get_node_pos ","@ring [] ","@sorted_keys [] "," binary_search "," hash_for ","  hash_for _for "]}," Redis HashRing remove_node":{"type":"method","name":"remove_node","children":[],"call":["k == ","@sorted_keys reject! ","@ring delete ","Zlib  crc32 ","@replicas times ","n to_s == ","node to_s ","n to_s ","@nodes reject! ","node id ","n id == ","n id "," server_hash_for ","@sorted_Zlib  crc32 s reject! ","@sorted_ server_hash_for s reject! "]}," Redis HashRing add_node":{"type":"method","name":"add_node","children":[],"call":["@sorted_keys sort! ","@sorted_keys << ","@ring []= ","Zlib  crc32 ","@replicas times ","@nodes << ","node id "," raise ","@ring has_key? "," server_hash_for ","@sorted_Zlib  crc32 s sort! ","@sorted_ server_hash_for s sort! ","@sorted_Zlib  crc32 s << ","@sorted_ server_hash_for s << ","@ring has_Zlib  crc32 ? ","@ring has_ server_hash_for ? "]}," Redis HashRing initialize":{"type":"method","name":"initialize","children":[],"call":[" add_node ","nodes each "]}," Redis DistRedis keys_by_node":{"type":"method","name":"keys_by_node","children":[],"call":["kbn [] << ","kbn [] ","kbn [] include? "," node_for_key ","keyz flatten inject ","keyz flatten ","  node_for_key _for_key "]}," Redis DistRedis mget":{"type":"method","name":"mget","children":[],"call":["results [] ","keyz flatten map ","keyz flatten ","results []= ","node mapped_mget each ","node mapped_mget ","kbn each "," keys_by_node "," keys_by_node  each "]}," Redis DistRedis mset":{"type":"method","name":"mset","children":[],"call":[]}," Redis DistRedis on_each_node":{"type":"method","name":"on_each_node","children":[],"call":["red send ","@ring nodes each ","@ring nodes "]}," Redis DistRedis delete_cloud!":{"type":"method","name":"delete_cloud!","children":[],"call":["red delete ","red keys each ","red keys ","@ring nodes each ","@ring nodes ","red del "]}," Redis DistRedis flush_db":{"type":"method","name":"flush_db","children":[],"call":[" on_each_node "]}," Redis DistRedis flush_all":{"type":"method","name":"flush_all","children":[],"call":[" on_each_node "]}," Redis DistRedis quit":{"type":"method","name":"quit","children":[],"call":[" on_each_node "]}," Redis DistRedis bgsave":{"type":"method","name":"bgsave","children":[],"call":[" on_each_node "]}," Redis DistRedis save":{"type":"method","name":"save","children":[],"call":[" on_each_node "]}," Redis DistRedis keys":{"type":"method","name":"keys","children":[],"call":[" node_keys flatten "," node_keys "]}," Redis DistRedis node_keys":{"type":"method","name":"node_keys","children":[],"call":["red keys ","@ring nodes map ","@ring nodes "]}," Redis DistRedis method_missing":{"type":"method","name":"method_missing","children":[],"call":["redis send "," node_for_key ","args first to_s ","args first "," node_for_key  send "]}," Redis DistRedis add_server":{"type":"method","name":"add_server","children":[],"call":["@ring add_node ","Client  new ","server split "]}," Redis DistRedis node_for_key":{"type":"method","name":"node_for_key","children":[],"call":["@ring get_node ","key =~ "]}," Redis DistRedis initialize":{"type":"method","name":"initialize","children":[],"call":["HashRing  new ","hosts << ","Client  new ","h split ","opts [] each ","opts [] "," raise ","Redis  deprecate "," caller [] "," caller "]}," Redis Client deprecated":{"type":"method","name":"deprecated","children":[],"call":["$stderr puts ","Redis  deprecate ","message << "]}," Redis Client log":{"type":"method","name":"log","children":[],"call":["@logger send ","str to_s "]}," Redis Client get_size":{"type":"method","name":"get_size","children":[],"call":["string size ","string bytesize ","string respond_to? "]}," Redis Client read_reply":{"type":"method","name":"read_reply","children":[],"call":[" raise ","res << "," read_reply ","objects times ","bulklen == ","line to_i ","@sock read ","line strip ","MINUS  + ","@sock gets ","rtype ! "," format_reply "," disconnect ","line to_i  times ","line to_i  == ","@sock gets  to_i ","@sock gets  strip ","@sock read  ! "]}," Redis Client maybe_lock":{"type":"method","name":"maybe_lock","children":[],"call":["block call ","@mutex synchronize "]}," Redis Client process_command":{"type":"method","name":"process_command","children":[],"call":[" read_reply ","processor call ","REPLY_PROCESSOR  [] ","argv [] to_s ","argv [] ","argvv map ","@sock write ","REPLY_PROCESSOR  []  call "]}," Redis Client raw_call_command":{"type":"method","name":"raw_call_command","children":[],"call":["results [] "," process_command "," maybe_lock ","@sock write ","command << ","argv join ","argv []= "," get_size ","argv [] to_s ","argv [] ","argv length > ","argv length ","BULK_COMMANDS  [] "," raise ","DISABLED_COMMANDS  [] ","ALIASES  [] "," deprecated "," caller [] "," caller ","argvv each ","a to_s ","argv each ","argv size ","MULTI_BULK_COMMANDS  [] ","argvv [] [] to_s ","argvv [] [] ","argvv [] ","argvp [] is_a? ","argvp [] "," set_socket_timeout "," requires_timeout_reset? "," set_socket_timeout! "," process_comma to_s nd "," ma to_s ybe_lock ","comma to_s nd << ","a to_s rgv join ","a to_s rgv []= ","a to_s rgv [] to_s ","a to_s rgv [] ","a to_s rgv length > ","a to_s rgv length "," ra to_s ise "," depreca to_s ted "," ca to_s ller [] "," ca to_s ller ","a to_s rgvv ea to_s ch ","a to_s  to_s ","a to_s rgv ea to_s ch ","a to_s rgv size ","a to_s rgvv [] [] to_s ","a to_s rgvv [] [] ","a to_s rgvv [] ","a to_s rgvp [] is_a to_s ? ","a to_s rgvp [] "]}," Redis Client method_missing":{"type":"method","name":"method_missing","children":[],"call":[" call_command "]}," Redis Client connect_to_server":{"type":"method","name":"connect_to_server","children":[],"call":[" call_command ","@db == "," connect_to ","@timeout == ","@db != "]}," Redis Client connect_to":{"type":"method","name":"connect_to","children":[],"call":[" log ","ex message ","ex class name ","ex class ","sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - ","TCPSocket  new "," raise ","@timeout != "," set_socket_timeout "," set_socket_timeout! ","@sock setsockopt "," timeout= "," with_timeout "," connection connect "," connection ","TCPSocket  new  setTCPSocket  new opt ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "," set_TCPSocket  new et_timeout "," set_TCPSocket  new et_timeout! ","@TCPSocket  new  setTCPSocket  new opt ","TCPSocket  new  setsockopt "]}," Redis Client server":{"type":"method","name":"server","children":[],"call":[]}," Redis Client call_command":{"type":"method","name":"call_command","children":[],"call":[" raw_call_command ","argv dup "," connect_to_server ","@sock close ","@sock ! "," log ","argv inspect "," raise "," reconnect "," connected? "]}," Redis Client unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" call_command "]}," Redis Client subscribe":{"type":"method","name":"subscribe","children":[],"call":["r [] == ","r [] ","msg [] == ","msg [] "," read_reply "," call_command ","@pubsub == "," raise "," block_given? "," block_given? ! ","reply [] == ","reply [] ","type == ","sub send call ","sub send ","Subscription  new ","@pubsub ! "," read_reply  [] == "," read_reply  [] ","  read_reply ead_ read_reply eply ","@pubSubscription  new  == ","  read_reply aise "," read_reply eply [] == "," read_reply eply [] ","Subscription  new  send call ","Subscription  new  send ","Subsc read_reply iption  new ","@pubSubscription  new  ! "]}," Redis Client multi":{"type":"method","name":"multi","children":[],"call":[" raise "," discard "," exec "," block_given? "," call_command ","error backtrace ","error message ","ERROR_MAPPING  fetch ","error class "," translate_error! ","Client  translate_error! "]}," Redis Client exec":{"type":"method","name":"exec","children":[],"call":[" call_command "]}," Redis Client pipelined":{"type":"method","name":"pipelined","children":[],"call":["pipeline execute ","Pipeline  new ","Redis  deprecate "," caller [] "," caller "," raise ","error backtrace ","error message ","ERROR_MAPPING  fetch ","error class "," translate_error! ","Client  translate_error! ","Pipeline  new  execute "]}," Redis Client quit":{"type":"method","name":"quit","children":[],"call":[" call_command "]}," Redis Client type":{"type":"method","name":"type","children":[],"call":[" call_command "]}," Redis Client decr":{"type":"method","name":"decr","children":[],"call":[" call_command "," decrby "," deprecated "," caller [] "," caller "]}," Redis Client incr":{"type":"method","name":"incr","children":[],"call":[" call_command "," incrby "," deprecated "," caller [] "," caller "]}," Redis Client sort":{"type":"method","name":"sort","children":[],"call":[" call_command ","cmd << ","options [] ","options [] join ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten * ","(send\n  (lvar :options) :[]\n  (sym :get)) flatten "]}," Redis Client mapped_mget":{"type":"method","name":"mapped_mget","children":[],"call":["result merge! ","value nil? ","keys shift "," mget each "," mget ","keys shift s shift "]}," Redis Client mapped_msetnx":{"type":"method","name":"mapped_msetnx","children":[],"call":[" msetnx ","hash to_a flatten ","hash to_a "]}," Redis Client msetnx":{"type":"method","name":"msetnx","children":[],"call":[" call_command ","args unshift "," mapped_msetnx ","args [] "," deprecated "," caller [] "," caller ","args size == ","args size "]}," Redis Client mapped_mset":{"type":"method","name":"mapped_mset","children":[],"call":[" mset ","hash to_a flatten ","hash to_a "]}," Redis Client mset":{"type":"method","name":"mset","children":[],"call":[" call_command ","args unshift "," mapped_mset ","args [] "," deprecated "," caller [] "," caller ","args size == ","args size "]}," Redis Client set_with_expire":{"type":"method","name":"set_with_expire","children":[],"call":[" expire "," set "," multi ","Redis  deprecate "," caller [] "," caller "]}," Redis Client set":{"type":"method","name":"set","children":[],"call":[" call_command "," set_with_expire "," deprecated "," caller [] "," caller "]}," Redis Client []=":{"type":"method","name":"[]=","children":[],"call":[" set "]}," Redis Client []":{"type":"method","name":"[]","children":[],"call":[" get "]}," Redis Client select":{"type":"method","name":"select","children":[],"call":[" raise "]}," Redis Client to_s":{"type":"method","name":"to_s","children":[],"call":[" server "]}," Redis Client initialize":{"type":"method","name":"initialize","children":[],"call":[" log ","Mutex  new ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (int 5)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (int 0)) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :port))\n  (int 6379)) to_i "," Mutex  new ","Connection  new ","Connection  drivers last new ","Connection  drivers last ","Connection  drivers ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (int 5)) to_f ","@path nil? ","@options [] "," _parse_options ","Connector  new ","Connector Sentinel  new ","options include? ","options delete new ","options delete ","options [] respond_to? ","@options [] nil? ! ","@options [] nil? ","Process  pid ","options []  nil? "," _parse_options  [] "," _parse_options  [] nil? ! "," _parse_options  [] nil? "]}," Subscription message":{"type":"method","name":"message","children":[],"call":[" block_given? "]}," Subscription unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" block_given? "]}," Subscription subscribe":{"type":"method","name":"subscribe","children":[],"call":[" block_given? "]}," Redis Client set_socket_timeout":{"type":"method","name":"set_socket_timeout","children":[],"call":[" log ","ex message ","ex class name ","ex class ","sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "]}," Redis Client requires_timeout_reset?":{"type":"method","name":"requires_timeout_reset?","children":[],"call":["BLOCKING_COMMANDS  [] "]}," Redis Subscription message":{"type":"method","name":"message","children":[],"call":[" block_given? ","@callbacks []= "]}," Redis Subscription unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" block_given? ","@callbacks []= "]}," Redis Subscription subscribe":{"type":"method","name":"subscribe","children":[],"call":[" block_given? ","@callbacks []= "]}," Redis Client format_multi_bulk_reply":{"type":"method","name":"format_multi_bulk_reply","children":[],"call":["reply << "," read_reply ","line to_i times ","line to_i "," read ","n times ","n == ","Array  new ","liline to_i e to_i times ","liline to_i e to_i ","line to_i  times ","line to_i  == ","Array  line to_i ew "]}," Redis Client format_bulk_reply":{"type":"method","name":"format_bulk_reply","children":[],"call":["@sock read ","bulklen == ","line to_i "," encode ","line to_i  == "]}," Redis Client format_integer_reply":{"type":"method","name":"format_integer_reply","children":[],"call":["line to_i "]}," Redis Client format_status_reply":{"type":"method","name":"format_status_reply","children":[],"call":["line strip "]}," Redis Client format_error_reply":{"type":"method","name":"format_error_reply","children":[],"call":[" raise ","- + ","line strip "]}," Redis Client format_reply":{"type":"method","name":"format_reply","children":[],"call":[" raise ","ProtocolError  new "," format_multi_bulk_reply "," format_bulk_reply "," format_integer_reply "," format_status_reply "," format_error_reply "]}," Redis Client reconnect":{"type":"method","name":"reconnect","children":[],"call":[" connect_to_server "," disconnect "," connect "]}," Redis Client disconnect":{"type":"method","name":"disconnect","children":[],"call":["@sock close "," connected? "," connection disconnect "," connection "," connection connected? "]}," Redis Client connected?":{"type":"method","name":"connected?","children":[],"call":["@sock ! ! ","@sock ! "," connection connected? "," connection ","(and\n  (send nil :connection)\n  (send\n    (send nil :connection) :connected?)) ! ! ","(and\n  (send nil :connection)\n  (send\n    (send nil :connection) :connected?)) ! "]}," Redis Client set_socket_timeout!":{"type":"method","name":"set_socket_timeout!","children":[],"call":[" log ","e message ","e class name ","e class ","@sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "]}," Redis Client ProtocolError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis DistRedis type":{"type":"method","name":"type","children":[],"call":[" method_missing "]}," Redis Client get":{"type":"method","name":"get","children":[],"call":[" call_command "]}," Redis deprecate":{"type":"method","name":"deprecate","children":[],"call":[" caller [] "," caller "]}," Redis Distributed type":{"type":"method","name":"type","children":[],"call":[" method_missing "," node_for type "," node_for "]}," Redis Distributed keys_by_node":{"type":"method","name":"keys_by_node","children":[],"call":["kbn [] << ","kbn [] ","kbn [] include? "," node_for_key ","keyz flatten inject ","keyz flatten ","  node_for_key _for_key "]}," Redis Distributed mget":{"type":"method","name":"mget","children":[],"call":["results [] ","keyz flatten map ","keyz flatten ","results []= ","node mapped_mget each ","node mapped_mget ","kbn each "," keys_by_node "," raise "," mapped_mget values_at "," mapped_mget ","keys flatten! "," keys_by_node  each "]}," Redis Distributed mset":{"type":"method","name":"mset","children":[],"call":[" raise "]}," Redis Distributed on_each_node":{"type":"method","name":"on_each_node","children":[],"call":["red send ","@ring nodes each ","@ring nodes ","node send "," nodes map "," nodes "]}," Redis Distributed delete_cloud!":{"type":"method","name":"delete_cloud!","children":[],"call":["red del ","red keys each ","red keys ","@ring nodes each ","@ring nodes "]}," Redis Distributed flush_db":{"type":"method","name":"flush_db","children":[],"call":[" on_each_node "]}," Redis Distributed flush_all":{"type":"method","name":"flush_all","children":[],"call":[" on_each_node "]}," Redis Distributed quit":{"type":"method","name":"quit","children":[],"call":[" on_each_node "]}," Redis Distributed bgsave":{"type":"method","name":"bgsave","children":[],"call":[" on_each_node "]}," Redis Distributed save":{"type":"method","name":"save","children":[],"call":[" on_each_node "]}," Redis Distributed keys":{"type":"method","name":"keys","children":[],"call":[" node_keys flatten "," node_keys "," on_each_node flatten "," on_each_node "]}," Redis Distributed node_keys":{"type":"method","name":"node_keys","children":[],"call":["red keys ","@ring nodes map ","@ring nodes "]}," Redis Distributed method_missing":{"type":"method","name":"method_missing","children":[],"call":["redis send "," node_for_key ","args first to_s ","args first "," node_for_key  send "]}," Redis Distributed add_server":{"type":"method","name":"add_server","children":[],"call":["@ring add_node ","Client  new ","server split "]}," Redis Distributed node_for_key":{"type":"method","name":"node_for_key","children":[],"call":["@ring get_node ","key =~ "]}," Redis Distributed initialize":{"type":"method","name":"initialize","children":[],"call":["HashRing  new ","hosts << ","Client  new ","h split ","opts [] each ","opts [] "," raise ","Redis  connect ","options merge ","urls map ","options delete ","Redis  new "," add_node ","node_configs each ","options dup ","node_configs dup ","options [] ","node_configs map "]}," Redis subscription":{"type":"method","name":"subscription","children":[],"call":["@client send ","SubscribedClient  new ","@client call "," subscribed? "]}," Redis _bool":{"type":"method","name":"_bool","children":[],"call":["value == "]}," Redis CommandOptions insert":{"type":"method","name":"insert","children":[],"call":["@options [] ","name to_s upcase gsub ","name to_s upcase ","name to_s "]}," Redis CommandOptions to_a":{"type":"method","name":"to_a","children":[],"call":[]}," Redis CommandOptions words":{"type":"method","name":"words","children":[],"call":["value split "," insert "]}," Redis CommandOptions multi":{"type":"method","name":"multi","children":[],"call":["(lvar :argument) product flatten ","(lvar :argument) product "," Array "," insert "]}," Redis CommandOptions splat":{"type":"method","name":"splat","children":[],"call":[" insert "]}," Redis CommandOptions value":{"type":"method","name":"value","children":[],"call":[" insert "]}," Redis CommandOptions bool":{"type":"method","name":"bool","children":[],"call":[" insert "]}," Redis CommandOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis id":{"type":"method","name":"id","children":[],"call":["@client id "," synchronize ","client id ","@original_client id ","@client server_url "]}," Redis psubscribe":{"type":"method","name":"psubscribe","children":[],"call":[" subscription ","@client psubscribe ","SubscribedClient  new ","@client call ","@client kind_of? "," synchronize "," _subscription "]}," Redis subscribe":{"type":"method","name":"subscribe","children":[],"call":[" subscription ","@client subscribe ","SubscribedClient  new ","@client call ","@client kind_of? "," synchronize "," _subscription "]}," Redis punsubscribe":{"type":"method","name":"punsubscribe","children":[],"call":["@client punsubscribe "," raise "," subscribed? "," synchronize ","client punsubscribe "]}," Redis unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@client unsubscribe "," raise "," subscribed? ","@client call ","@client kind_of? "," synchronize ","client unsubscribe ","@client unsubscribe  unsubscribe ","@client unsubscribe  call ","@client unsubscribe  kind_of? "]}," Redis subscribed?":{"type":"method","name":"subscribed?","children":[],"call":["@client kind_of? "," synchronize ","client kind_of? ","client is_a? "]}," Redis publish":{"type":"method","name":"publish","children":[],"call":["@client call "," synchronize ","client call "]}," Redis multi":{"type":"method","name":"multi","children":[],"call":[" exec "," raise "," discard "," block_given? ","@client call ","result last "," multi "," pipelined "," block_given? ! "," synchronize ","original call_pipeline ","Pipeline Multi  new ","client call ","prior_client call_pipeline ","prior_client call "," send_command ","PipelinedConnection  new ","DeprecatedMulti  new ","Pipeline  deprecation_warning ","Kernel  caller_locations ","(lvar :block) == ","Pipeline Multi  new  call ","DeprecatedMulti  new  call ","@client call  last "," Pipeline Multi  new d ","original call_Pipeline Multi  new  ","prior_client call_Pipeline Multi  new  "]}," Redis exec":{"type":"method","name":"exec","children":[],"call":["@client call "," synchronize ","client call "]}," Redis decrby":{"type":"method","name":"decrby","children":[],"call":["@client call "," synchronize ","client call "]}," Redis incrby":{"type":"method","name":"incrby","children":[],"call":["@client call "," synchronize ","client call "]}," Redis mapped_msetnx":{"type":"method","name":"mapped_msetnx","children":[],"call":[" msetnx ","hash to_a flatten ","hash to_a "]}," Redis msetnx":{"type":"method","name":"msetnx","children":[],"call":["@client call "," synchronize ","client call "," _boolify ","(sym :msetnx) + "]}," Redis mapped_mset":{"type":"method","name":"mapped_mset","children":[],"call":[" mset ","hash to_a flatten ","hash to_a "]}," Redis mset":{"type":"method","name":"mset","children":[],"call":["@client call "," synchronize ","client call ","(sym :mset) + "]}," Redis setex":{"type":"method","name":"setex","children":[],"call":["@client call "," synchronize ","client call ","value to_s "]}," Redis monitor":{"type":"method","name":"monitor","children":[],"call":["@client call_loop "," raise "," synchronize ","client call_loop "]}," Redis hexists":{"type":"method","name":"hexists","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis discard":{"type":"method","name":"discard","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hincrby":{"type":"method","name":"hincrby","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hvals":{"type":"method","name":"hvals","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hlen":{"type":"method","name":"hlen","children":[],"call":["@client call "," synchronize ","client call "]}," Redis mapped_hmset":{"type":"method","name":"mapped_hmset","children":[],"call":[" hmset ","hash to_a flatten ","hash to_a "]}," Redis hmset":{"type":"method","name":"hmset","children":[],"call":["@client call "," synchronize ","client call ","(sym :hmset) + "]}," Redis hset":{"type":"method","name":"hset","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify ","attrs first flatten ","attrs first ","attrs first is_a? ","attrs size == ","attrs size ","attrs first flatten  first flatten ","attrs first flatten  first ","attrs first flatten  first is_a? ","attrs first flatten  size == ","attrs first flatten  size "]}," Redis expireat":{"type":"method","name":"expireat","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis ttl":{"type":"method","name":"ttl","children":[],"call":["@client call "," synchronize ","client call "]}," Redis expire":{"type":"method","name":"expire","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis renamenx":{"type":"method","name":"renamenx","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis rename":{"type":"method","name":"rename","children":[],"call":["@client call "," synchronize ","client call "]}," Redis del":{"type":"method","name":"del","children":[],"call":[" _bool ","@client call "," synchronize ","client call ","(sym :del) + ","keys empty? ","keys flatten! "]}," Redis setnx":{"type":"method","name":"setnx","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify ","value to_s "]}," Redis move":{"type":"method","name":"move","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis zunionstore":{"type":"method","name":"zunionstore","children":[],"call":["@client call ","keys + ","command to_a ","keys size ","c value ","c splat ","CommandOptions  new "," synchronize ","client call ","args concat ","options [] ","(sym :zunionstore) + + ","(sym :zunionstore) + ","(str \"WEIGHTS\") + ","args << << ","args << "]}," Redis zinterstore":{"type":"method","name":"zinterstore","children":[],"call":["@client call ","keys + ","command to_a ","keys size ","c value ","c splat ","CommandOptions  new "," synchronize ","client call ","args concat ","options [] ","(sym :zinterstore) + + ","(sym :zinterstore) + ","(str \"WEIGHTS\") + ","args << << ","args << "]}," Redis zrem":{"type":"method","name":"zrem","children":[],"call":[" _bool ","@client call "," synchronize "," _boolify call "," _boolify ","member is_a? ","client call ","Boolify  call "]}," Redis zscore":{"type":"method","name":"zscore","children":[],"call":["@client call "," synchronize "," Float ","client call "," _floatify "]}," Redis zremrangebyrank":{"type":"method","name":"zremrangebyrank","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zremrangebyscore":{"type":"method","name":"zremrangebyscore","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zrevrange":{"type":"method","name":"zrevrange","children":[],"call":["@client call ","command to_a ","c bool ","CommandOptions  new "," synchronize "," Float ","reply each_slice map ","reply each_slice ","client call ","args << ","options [] "," _floatify ","(sym :zrevrange) + "," _floatify_pairs "]}," Redis zrangebyscore":{"type":"method","name":"zrangebyscore","children":[],"call":["@client call ","command to_a ","c bool ","c splat ","CommandOptions  new "," synchronize "," Float ","reply each_slice map ","reply each_slice ","client call ","args concat ","options [] "," _floatify ","(sym :zrangebyscore) + ","(str \"LIMIT\") + "," _floatify_pairs ","args << "]}," Redis zrange":{"type":"method","name":"zrange","children":[],"call":["@client call ","command to_a ","c bool ","CommandOptions  new "," synchronize "," Float ","reply each_slice map ","reply each_slice ","client call ","args << ","options [] "," _floatify ","(sym :zrange) + "," _floatify_pairs "]}," Redis zcard":{"type":"method","name":"zcard","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zincrby":{"type":"method","name":"zincrby","children":[],"call":["@client call "," synchronize "," Float ","client call "," _floatify "]}," Redis zrevrank":{"type":"method","name":"zrevrank","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zrank":{"type":"method","name":"zrank","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zadd":{"type":"method","name":"zadd","children":[],"call":[" _bool ","@client call "," synchronize "," raise ","client call "," _boolify ","args [] ","args size == ","args size ","(sym :zadd) + ","args [] is_a? "," _floatify ","(sym :zadd) + + "," _identity ","zadd_options << ","options [] ","args pop ","args last is_a? ","args last ","command + ","command << "," synoptions [] ronize ","zadd_args pop  << ","args pop  [] "]}," Redis srandmember":{"type":"method","name":"srandmember","children":[],"call":["@client call "," synchronize ","client call ","count nil? "]}," Redis sdiffstore":{"type":"method","name":"sdiffstore","children":[],"call":["@client call "," synchronize ","client call ","(sym :sdiffstore) + "]}," Redis sdiff":{"type":"method","name":"sdiff","children":[],"call":["@client call "," synchronize ","client call ","(sym :sdiff) + "]}," Redis sunionstore":{"type":"method","name":"sunionstore","children":[],"call":["@client call "," synchronize ","client call ","(sym :sunionstore) + "]}," Redis sunion":{"type":"method","name":"sunion","children":[],"call":["@client call "," synchronize ","client call ","(sym :sunion) + "]}," Redis sinterstore":{"type":"method","name":"sinterstore","children":[],"call":["@client call "," synchronize ","client call ","(sym :sinterstore) + "]}," Redis sinter":{"type":"method","name":"sinter","children":[],"call":["@client call "," synchronize ","client call ","(sym :sinter) + "]}," Redis scard":{"type":"method","name":"scard","children":[],"call":["@client call "," synchronize ","client call "]}," Redis spop":{"type":"method","name":"spop","children":[],"call":["@client call "," synchronize ","client call ","count nil? "]}," Redis smove":{"type":"method","name":"smove","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis srem":{"type":"method","name":"srem","children":[],"call":[" _bool ","@client call "," synchronize "," _boolify call "," _boolify ","member is_a? ","client call ","Boolify  call "]}," Redis sadd":{"type":"method","name":"sadd","children":[],"call":[" _bool ","@client call "," synchronize "," _boolify call "," _boolify ","member is_a? ","client call ","Boolify  call "]}," Redis sismember":{"type":"method","name":"sismember","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis smembers":{"type":"method","name":"smembers","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lpop":{"type":"method","name":"lpop","children":[],"call":["@client call "," synchronize ","client call ","command << "]}," Redis rpoplpush":{"type":"method","name":"rpoplpush","children":[],"call":["@client call "," synchronize ","client call "]}," Redis brpop":{"type":"method","name":"brpop","children":[],"call":["@client call_without_timeout ","@client call_blocking "," synchronize "," _bpop "]}," Redis blpop":{"type":"method","name":"blpop","children":[],"call":["@client call_without_timeout ","@client call_blocking "," synchronize "," _bpop "]}," Redis rpop":{"type":"method","name":"rpop","children":[],"call":["@client call "," synchronize ","client call ","command << "]}," Redis lpush":{"type":"method","name":"lpush","children":[],"call":["@client call "," synchronize ","client call "]}," Redis rpush":{"type":"method","name":"rpush","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lrem":{"type":"method","name":"lrem","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lset":{"type":"method","name":"lset","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lindex":{"type":"method","name":"lindex","children":[],"call":["@client call "," synchronize ","client call "]}," Redis ltrim":{"type":"method","name":"ltrim","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lrange":{"type":"method","name":"lrange","children":[],"call":["@client call "," synchronize ","client call "]}," Redis llen":{"type":"method","name":"llen","children":[],"call":["@client call "," synchronize ","client call "]}," Redis exists":{"type":"method","name":"exists","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "," _exists "," exists? "," Kernel  warn "," Kernel  caller first "," Kernel  caller ","keys size == ","keys size ","Redis  exists_returns_integer ! ","Redis  exists_returns_integer ","Redis  exists_returns_integer nil? "]}," Redis dbsize":{"type":"method","name":"dbsize","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lastsave":{"type":"method","name":"lastsave","children":[],"call":["@client call "," synchronize ","client call "]}," Redis ping":{"type":"method","name":"ping","children":[],"call":["@client call "," synchronize ","client call ","(sym :ping) compact "]}," Redis echo":{"type":"method","name":"echo","children":[],"call":["@client call "," synchronize ","client call "]}," Redis randomkey":{"type":"method","name":"randomkey","children":[],"call":["@client call "," synchronize ","client call "]}," Redis keys":{"type":"method","name":"keys","children":[],"call":["@client call "," _array ","reply split ","reply kind_of? "," synchronize ","client call ","reply is_a? ","@client call  split ","@client call  kind_of? ","@client call  is_a? "]}," Redis hkeys":{"type":"method","name":"hkeys","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hdel":{"type":"method","name":"hdel","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hget":{"type":"method","name":"hget","children":[],"call":["@client call "," synchronize ","client call "]}," Redis hgetall":{"type":"method","name":"hgetall","children":[],"call":["Hash  [] ","@client call ","reply kind_of? "," synchronize ","client call "," _hashify ","hash []= ","reply each_slice ","Hash  new ","@client call  kind_of? "," _Hash  new ify ","Hash  new  []= ","@client call  each_slice "]}," Redis substr":{"type":"method","name":"substr","children":[],"call":["@client call "," synchronize "]}," Redis append":{"type":"method","name":"append","children":[],"call":["@client call "," synchronize ","client call "]}," Redis mget":{"type":"method","name":"mget","children":[],"call":["@client call "," synchronize ","client call ","(sym :mget) + "]}," Redis getset":{"type":"method","name":"getset","children":[],"call":["@client call "," synchronize ","client call ","value to_s "]}," Redis get":{"type":"method","name":"get","children":[],"call":["@client call "," synchronize ","client call "]}," Redis bgsave":{"type":"method","name":"bgsave","children":[],"call":["@client call "," synchronize ","client call "]}," Redis save":{"type":"method","name":"save","children":[],"call":["@client call "," synchronize ","client call "]}," Redis flushdb":{"type":"method","name":"flushdb","children":[],"call":["@client call "," synchronize ","client call ","options [] "]}," Redis info":{"type":"method","name":"info","children":[],"call":["Hash  [] ","@client call split ","@client call ","reply split grep ","reply split ","reply kind_of? "," synchronize ","v split ","k [] ","reply map ","cmd to_s == ","cmd to_s ","(sym :info) compact ","line split ","line =~ ","reply split map ","client call ","e split ","v split map ","(send\n  (send\n    (lvar :reply) :split\n    (str \"\\r\\n\")) :map) compact ","HashifyInfo  call ","reply is_a? ","@client call  split grep ","Hash  []  split grep ","HashifyInfo  call  split grep ","@client call  split ","Hash  []  split ","HashifyInfo  call  split ","@client call  kind_of? ","Hash  []  kind_of? ","HashifyInfo  call  kind_of? ","@client call  map ","Hash  []  map ","HashifyInfo  call  map ","@client call  split map ","Hash  []  split map ","HashifyInfo  call  split map ","(send\n  (send\n    (lvar :@client call ) :split\n    (str \"\\r\\n\")) :map) compact ","(send\n  (send\n    (lvar :Hash  [] ) :split\n    (str \"\\r\\n\")) :map) compact ","(send\n  (send\n    (lvar :HashifyInfo  call ) :split\n    (str \"\\r\\n\")) :map) compact ","@client call  is_a? ","Hash  []  is_a? ","HashifyInfo  call  is_a? "]}," Redis connect":{"type":"method","name":"connect","children":[],"call":[]}," Redis ProtocolError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"      Got '\") gsub ","(str \"        Got '\") gsub "]}," Redis Subscription pmessage":{"type":"method","name":"pmessage","children":[],"call":["@callbacks []= "]}," Redis Subscription punsubscribe":{"type":"method","name":"punsubscribe","children":[],"call":["@callbacks []= "]}," Redis Subscription psubscribe":{"type":"method","name":"psubscribe","children":[],"call":["@callbacks []= "]}," Redis Subscription initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= "," lambda ","Hash  new "]}," Redis SubscribedClient subscription":{"type":"method","name":"subscription","children":[],"call":[" send ","rest last == ","rest last ","type == ","sub callbacks [] call ","sub callbacks [] ","sub callbacks ","@client call_loop ","Subscription  new ","unsubscribed ! ","callback call "," raise ","event message ","Client ERROR_MAPPING  fetch ","event class ","event is_a? ","@client next_event "," call_v ","@client call_v ","channels each ","Subscription  new  callbacks [] call ","sub sub callbacks [] s [] call ","Subscription  new  callbacks [] ","sub sub callbacks [] s [] ","Subscription  new  callbacks ","sub sub callbacks [] s ","unSubscription  new scribed ! ","sub callbacks []  call ","@client next_event  message ","@client next_event  class ","@client next_event  is_a? ","@client next_@client next_event  "]}," Redis SubscribedClient punsubscribe":{"type":"method","name":"punsubscribe","children":[],"call":[" call ","@client call_async "," call_v "]}," Redis SubscribedClient unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" call ","@client call_async "," call_v "]}," Redis SubscribedClient psubscribe":{"type":"method","name":"psubscribe","children":[],"call":[" subscription ","@client call_async ","channel == ","type == ","sub callbacks [] call ","sub callbacks [] ","sub callbacks ","@client read "," loop ","Subscription  new "," Subscription  new scription ","Subscription  new  callbacks [] call ","Subscription  new  callbacks [] ","Subscription  new  callbacks "]}," Redis SubscribedClient subscribe":{"type":"method","name":"subscribe","children":[],"call":[" subscription ","@client call_async ","message == ","type == ","sub callbacks [] call ","sub callbacks [] ","sub callbacks ","@client read "," loop ","Subscription  new "," Subscription  new scription ","Subscription  new  callbacks [] call ","Subscription  new  callbacks [] ","Subscription  new  callbacks "]}," Redis SubscribedClient call":{"type":"method","name":"call","children":[],"call":["@client process ","@client call_async ","args first ","args size == ","args size ","args first is_a? "]}," Redis SubscribedClient initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new "]}," Redis Pipeline call":{"type":"method","name":"call","children":[],"call":["@commands << ","args first ","args size == ","args size ","args first is_a? ","@futures << ","Future  new ","command first == ","command first ","@args first s << ","@Future  new s << ","args first  first == ","args first  first "]}," Redis Distributed ensure_same_node":{"type":"method","name":"ensure_same_node","children":[],"call":[" node_for ","keys first "," raise ","tags uniq size != ","tags uniq size ","tags uniq ","tags all? ! ","tags all? "," key_tag ","keys map ","tags compact uniq size != ","tags compact uniq size ","tags compact uniq ","tags compact ","keys uniq size != ","keys uniq size ","keys uniq ","all ! "," key_tag s uniq size != "," key_tag s uniq size "," key_tag s uniq "," key_tag s all? ! "," key_tag s all? "," key_ key_tag  "," key_tag s compact uniq size != "," key_tag s compact uniq size "," key_tag s compact uniq "," key_tag s compact "]}," Redis Distributed key_tag":{"type":"method","name":"key_tag","children":[],"call":["key [] ","key to_s [] ","key to_s ","key match? ","key to_s  [] ","key to_s  to_s [] ","key to_s  to_s ","key to_s  match? "]}," Redis Distributed node_index_for":{"type":"method","name":"node_index_for","children":[],"call":[" nodes index "," node_for "," nodes "]}," Redis Distributed pipelined":{"type":"method","name":"pipelined","children":[],"call":[" raise "]}," Redis Distributed echo":{"type":"method","name":"echo","children":[],"call":[" on_each_node "]}," Redis Distributed monitor":{"type":"method","name":"monitor","children":[],"call":[" raise "]}," Redis Distributed info":{"type":"method","name":"info","children":[],"call":[" on_each_node "]}," Redis Distributed lastsave":{"type":"method","name":"lastsave","children":[],"call":[" on_each_node "]}," Redis Distributed psubscribe":{"type":"method","name":"psubscribe","children":[],"call":[" raise "]}," Redis Distributed punsubscribe":{"type":"method","name":"punsubscribe","children":[],"call":[" raise "]}," Redis Distributed subscribe":{"type":"method","name":"subscribe","children":[],"call":["node subscribe "," ensure_same_node ","@subscribed_node subscribe "," node_for ","channels empty? "," raise ","(lvar :channel) + "," node_for  subscribe "]}," Redis Distributed unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@subscribed_node unsubscribe "," raise "," subscribed? "]}," Redis Distributed subscribed?":{"type":"method","name":"subscribed?","children":[],"call":["@subscribed_node ! ! ","@subscribed_node ! "]}," Redis Distributed publish":{"type":"method","name":"publish","children":[],"call":[" node_for publish "," node_for "," raise "]}," Redis Distributed discard":{"type":"method","name":"discard","children":[],"call":[" raise "," node_for discard "," node_for "]}," Redis Distributed exec":{"type":"method","name":"exec","children":[],"call":[" raise "," node_for exec "," node_for "]}," Redis Distributed multi":{"type":"method","name":"multi","children":[],"call":[" raise "," block_given? "," node_for multi "," node_for "]}," Redis Distributed sort":{"type":"method","name":"sort","children":[],"call":["node sort "," ensure_same_node ","(lvar :key) compact "," Array ","options [] "," raise "]}," Redis Distributed hincrby":{"type":"method","name":"hincrby","children":[],"call":[" node_for hincrby "," node_for "]}," Redis Distributed hmset":{"type":"method","name":"hmset","children":[],"call":[" node_for hmset "," node_for "]}," Redis Distributed hgetall":{"type":"method","name":"hgetall","children":[],"call":[" node_for hgetall "," node_for "]}," Redis Distributed hvals":{"type":"method","name":"hvals","children":[],"call":[" node_for hvals "," node_for "]}," Redis Distributed hkeys":{"type":"method","name":"hkeys","children":[],"call":[" node_for hkeys "," node_for "]}," Redis Distributed hlen":{"type":"method","name":"hlen","children":[],"call":[" node_for hlen "," node_for "]}," Redis Distributed hexists":{"type":"method","name":"hexists","children":[],"call":[" node_for hexists "," node_for "]}," Redis Distributed hdel":{"type":"method","name":"hdel","children":[],"call":[" node_for hdel "," node_for ","fields flatten! "]}," Redis Distributed hget":{"type":"method","name":"hget","children":[],"call":[" node_for hget "," node_for "]}," Redis Distributed hset":{"type":"method","name":"hset","children":[],"call":[" node_for hset "," node_for "]}," Redis Distributed zunionstore":{"type":"method","name":"zunionstore","children":[],"call":["node zunionstore "," ensure_same_node ","(lvar :destination) + ","(lvar :destination) concat ","keys flatten! "]}," Redis Distributed zinterstore":{"type":"method","name":"zinterstore","children":[],"call":["node zinterstore "," ensure_same_node ","(lvar :destination) + ","(lvar :destination) concat ","keys flatten! "]}," Redis Distributed zscore":{"type":"method","name":"zscore","children":[],"call":[" node_for zscore "," node_for "]}," Redis Distributed zcard":{"type":"method","name":"zcard","children":[],"call":[" node_for zcard "," node_for "]}," Redis Distributed zrangebyscore":{"type":"method","name":"zrangebyscore","children":[],"call":[" node_for zrangebyscore "," node_for "]}," Redis Distributed zremrangebyrank":{"type":"method","name":"zremrangebyrank","children":[],"call":[" node_for zremrangebyrank "," node_for "]}," Redis Distributed zremrangebyscore":{"type":"method","name":"zremrangebyscore","children":[],"call":[" node_for zremrangebyscore "," node_for "]}," Redis Distributed zrevrange":{"type":"method","name":"zrevrange","children":[],"call":[" node_for zrevrange "," node_for "]}," Redis Distributed zrevrank":{"type":"method","name":"zrevrank","children":[],"call":[" node_for zrevrank "," node_for "]}," Redis Distributed zrank":{"type":"method","name":"zrank","children":[],"call":[" node_for zrank "," node_for "]}," Redis Distributed zrange":{"type":"method","name":"zrange","children":[],"call":[" node_for zrange "," node_for "]}," Redis Distributed zincrby":{"type":"method","name":"zincrby","children":[],"call":[" node_for zincrby "," node_for "]}," Redis Distributed zrem":{"type":"method","name":"zrem","children":[],"call":[" node_for zrem "," node_for "]}," Redis Distributed zadd":{"type":"method","name":"zadd","children":[],"call":[" node_for zadd "," node_for "]}," Redis Distributed srandmember":{"type":"method","name":"srandmember","children":[],"call":[" node_for srandmember "," node_for "]}," Redis Distributed smembers":{"type":"method","name":"smembers","children":[],"call":[" node_for smembers "," node_for "]}," Redis Distributed sdiffstore":{"type":"method","name":"sdiffstore","children":[],"call":["node sdiffstore "," ensure_same_node "," raise ","(lvar :destination) + ","(lvar :destination) concat ","keys flatten! "]}," Redis Distributed sdiff":{"type":"method","name":"sdiff","children":[],"call":["node sdiff "," ensure_same_node "," raise ","keys flatten! "]}," Redis Distributed sunionstore":{"type":"method","name":"sunionstore","children":[],"call":["node sunionstore "," ensure_same_node "," raise ","(lvar :destination) + ","(lvar :destination) concat ","keys flatten! "]}," Redis Distributed sunion":{"type":"method","name":"sunion","children":[],"call":["node sunion "," ensure_same_node "," raise ","keys flatten! "]}," Redis Distributed sinterstore":{"type":"method","name":"sinterstore","children":[],"call":["node sinterstore "," ensure_same_node "," raise ","(lvar :destination) + ","(lvar :destination) concat ","keys flatten! "]}," Redis Distributed sinter":{"type":"method","name":"sinter","children":[],"call":["node sinter "," ensure_same_node "," raise ","keys flatten! "]}," Redis Distributed sismember":{"type":"method","name":"sismember","children":[],"call":[" node_for sismember "," node_for "]}," Redis Distributed scard":{"type":"method","name":"scard","children":[],"call":[" node_for scard "," node_for "]}," Redis Distributed smove":{"type":"method","name":"smove","children":[],"call":["node smove "," ensure_same_node "," raise "]}," Redis Distributed spop":{"type":"method","name":"spop","children":[],"call":[" node_for spop "," node_for "]}," Redis Distributed srem":{"type":"method","name":"srem","children":[],"call":[" node_for srem "," node_for "]}," Redis Distributed sadd":{"type":"method","name":"sadd","children":[],"call":[" node_for sadd "," node_for "]}," Redis Distributed brpop":{"type":"method","name":"brpop","children":[],"call":[" node_for brpop "," node_for "," _bpop "]}," Redis Distributed blpop":{"type":"method","name":"blpop","children":[],"call":[" node_for blpop "," node_for "," _bpop "]}," Redis Distributed rpoplpush":{"type":"method","name":"rpoplpush","children":[],"call":["node rpoplpush "," ensure_same_node "," raise "]}," Redis Distributed rpop":{"type":"method","name":"rpop","children":[],"call":[" node_for rpop "," node_for "]}," Redis Distributed lpop":{"type":"method","name":"lpop","children":[],"call":[" node_for lpop "," node_for "]}," Redis Distributed lrem":{"type":"method","name":"lrem","children":[],"call":[" node_for lrem "," node_for "]}," Redis Distributed lset":{"type":"method","name":"lset","children":[],"call":[" node_for lset "," node_for "]}," Redis Distributed lindex":{"type":"method","name":"lindex","children":[],"call":[" node_for lindex "," node_for "]}," Redis Distributed ltrim":{"type":"method","name":"ltrim","children":[],"call":[" node_for ltrim "," node_for "]}," Redis Distributed lrange":{"type":"method","name":"lrange","children":[],"call":[" node_for lrange "," node_for "]}," Redis Distributed llen":{"type":"method","name":"llen","children":[],"call":[" node_for llen "," node_for "]}," Redis Distributed lpush":{"type":"method","name":"lpush","children":[],"call":[" node_for lpush "," node_for "]}," Redis Distributed rpush":{"type":"method","name":"rpush","children":[],"call":[" node_for rpush "," node_for "]}," Redis Distributed decrby":{"type":"method","name":"decrby","children":[],"call":[" node_for decrby "," node_for "]}," Redis Distributed decr":{"type":"method","name":"decr","children":[],"call":[" node_for decr "," node_for "]}," Redis Distributed incrby":{"type":"method","name":"incrby","children":[],"call":[" node_for incrby "," node_for "]}," Redis Distributed incr":{"type":"method","name":"incr","children":[],"call":[" node_for incr "," node_for "]}," Redis Distributed mapped_msetnx":{"type":"method","name":"mapped_msetnx","children":[],"call":[" raise "]}," Redis Distributed msetnx":{"type":"method","name":"msetnx","children":[],"call":[" raise "]}," Redis Distributed mapped_mset":{"type":"method","name":"mapped_mset","children":[],"call":[" mset ","hash to_a flatten ","hash to_a "," raise "]}," Redis Distributed setnx":{"type":"method","name":"setnx","children":[],"call":[" node_for setnx "," node_for "]}," Redis Distributed mapped_mget":{"type":"method","name":"mapped_mget","children":[],"call":[" raise ","results merge! ","node mapped_mget ","(send\n  (lvar :keys) :group_by) inject "," node_for ","keys group_by ","keys flatten! "]}," Redis Distributed []=":{"type":"method","name":"[]=","children":[],"call":[" set "]}," Redis Distributed substr":{"type":"method","name":"substr","children":[],"call":[" node_for substr "," node_for "]}," Redis Distributed append":{"type":"method","name":"append","children":[],"call":[" node_for append "," node_for "]}," Redis Distributed []":{"type":"method","name":"[]","children":[],"call":[" get "]}," Redis Distributed getset":{"type":"method","name":"getset","children":[],"call":[" node_for getset "," node_for "]}," Redis Distributed get":{"type":"method","name":"get","children":[],"call":[" node_for get "," node_for "]}," Redis Distributed setex":{"type":"method","name":"setex","children":[],"call":[" node_for setex "," node_for "]}," Redis Distributed set":{"type":"method","name":"set","children":[],"call":[" node_for set "," node_for "]}," Redis Distributed flushdb":{"type":"method","name":"flushdb","children":[],"call":[" on_each_node "]}," Redis Distributed move":{"type":"method","name":"move","children":[],"call":[" node_for move "," node_for "]}," Redis Distributed ttl":{"type":"method","name":"ttl","children":[],"call":[" node_for ttl "," node_for "]}," Redis Distributed expireat":{"type":"method","name":"expireat","children":[],"call":[" node_for expireat "," node_for "]}," Redis Distributed expire":{"type":"method","name":"expire","children":[],"call":[" node_for expire "," node_for "]}," Redis Distributed dbsize":{"type":"method","name":"dbsize","children":[],"call":[" on_each_node "]}," Redis Distributed renamenx":{"type":"method","name":"renamenx","children":[],"call":["node renamenx "," ensure_same_node "," raise "]}," Redis Distributed rename":{"type":"method","name":"rename","children":[],"call":["node rename "," ensure_same_node "," raise "]}," Redis Distributed randomkey":{"type":"method","name":"randomkey","children":[],"call":[" raise "]}," Redis Distributed del":{"type":"method","name":"del","children":[],"call":[" on_each_node ","sum + ","node del ","keys_per_node inject "," node_for ","args group_by ","args flatten! "]}," Redis Distributed exists":{"type":"method","name":"exists","children":[],"call":[" node_for exists "," node_for ","sum + ","node _exists ","keys_per_node inject ","args group_by "," exists? "," warn "," Warning  warn "," Kernel  caller first "," Kernel  caller ","args size == ","args size ","Redis  exists_returns_integer ! ","Redis  exists_returns_integer "," Redis  deprecate! ","node exists ","args flatten! "]}," Redis Distributed flushall":{"type":"method","name":"flushall","children":[],"call":[" on_each_node "]}," Redis Distributed ping":{"type":"method","name":"ping","children":[],"call":[" on_each_node "]}," Redis Distributed select":{"type":"method","name":"select","children":[],"call":[" on_each_node "]}," Redis Distributed add_node":{"type":"method","name":"add_node","children":[],"call":["@ring add_node ","Redis  connect ","@default_options merge ","Redis  new ","options is_a? ","options delete ","@default_@default_options merge  merge ","@default_options merge  is_a? ","@default_options merge  delete "]}," Redis Distributed nodes":{"type":"method","name":"nodes","children":[],"call":["@ring nodes "]}," Redis Distributed node_for":{"type":"method","name":"node_for","children":[],"call":["@ring get_node "," key_tag ","key to_s "," raise ","@watch_key != "]}," Redis Distributed CannotDistribute message":{"type":"method","name":"message","children":[],"call":["@command to_s upcase ","@command to_s "]}," Redis Distributed CannotDistribute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Array product":{"type":"method","name":"product","children":[],"call":["result << ","a + ","b each ","t each "," != ","enums unshift "]}," Redis Client ThreadSafe ensure_connected":{"type":"method","name":"ensure_connected","children":[],"call":[" synchronize "]}," Redis Client ThreadSafe synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize "]}," Redis Client ThreadSafe initialize":{"type":"method","name":"initialize","children":[],"call":[" Monitor  new "," require "]}," Redis Client ensure_connected":{"type":"method","name":"ensure_connected","children":[],"call":[" raise "," reconnect "," connect "," connected? "," disconnect ","tries < ","Tried to use a connection from a child process without reconnecting.  + ","Process  pid != ","Process  pid ","attempts <= ","@options [] ","Tried to use a connection from a child process without reconnecting.  + + ","Process  pid == "," inherit_socket? ","@pending_reads > ","Kernel  sleep ","(begin\n  (send\n    (send\n      (ivar :@options) :[]\n      (sym :reconnect_delay)) :*\n    (send\n      (int 2) :**\n      (begin\n        (send\n          (lvar :attempts) :-\n          (int 1)))))) min ","@options [] * ","2 ** ","attempts - "," inherit_socket? ! ","@pid != ","(or-asgn\n  (ivasgn :@pid)\n  (send\n    (const nil :Process) :pid)) == "]}," Redis Client timeout=":{"type":"method","name":"timeout=","children":[],"call":["@sock setsockopt ","(lvar :secs) pack "," Integer ","(send\n  (lvar :timeout) :-\n  (lvar :secs)) * ","timeout - "," connection timeout= ","timeout * "," connection ","(lvar : Integer ) pack ","(send\n  (lvar :timeout) :-\n  (lvar : Integer )) * "]}," Redis Client logging":{"type":"method","name":"logging","children":[],"call":["@logger debug ","Redis >> %0.2fms % ","(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :t1)) * ","Time  now - ","Time  now ","args join ","name to_s upcase ","name to_s ","commands each ","@logger debug? ","args map join ","args map ","[Redis] call_time=%0.2f ms % ","logged_args join ","a __id__ ","(sclass\n  (self)\n  (self)) superclass ","a instance_exec ","a to_s ","a respond_to? ","a inspect ","(send\n  (send\n    (const nil :Time) :now) :-\n  (lvar :Time  now )) * "]}," Redis Client string_size":{"type":"method","name":"string_size","children":[],"call":["string to_s size ","string to_s ","string to_s bytesize "]}," Redis Client join_commands":{"type":"method","name":"join_commands","children":[],"call":["(send\n  (lvar :commands) :map) join + ","(send\n  (lvar :commands) :map) join "," build_command join + "," build_command join "," build_command ","commands map "]}," Redis Client build_command":{"type":"method","name":"build_command","children":[],"call":["command << "," string_size ","arg to_s ","args each ","args size + ","args size ","arg to_s  to_s ","arg to_s s each ","arg to_s s size + ","arg to_s s size "]}," Redis Client without_socket_timeout":{"type":"method","name":"without_socket_timeout","children":[],"call":[" timeout= "," ensure_connected "," connected? "," connect "," connection timeout= "," timeout "," connection "," with_socket_timeout "]}," Redis Client read":{"type":"method","name":"read","children":[],"call":[" format_reply ","@sock gets "," raise "," disconnect ","@sock read "," connection disconnect "," connection "," connection read "," io "]}," Redis Client process":{"type":"method","name":"process","children":[],"call":[" block_given? ","@sock write "," join_commands "," ensure_connected "," logging "," connection write "," connection ","commands each ","command []= "," command_map [] ","command first "," command_map ","command dup "," write "," join_command dup s ","command dup s each ","command dup  []= "," command dup _map [] ","command dup  first "," command dup _map ","command dup  dup "]}," Redis Client call_without_timeout":{"type":"method","name":"call_without_timeout","children":[],"call":[" call "," without_socket_timeout "," call_with_timeout "]}," Redis Client call_pipelined":{"type":"method","name":"call_pipelined","children":[],"call":[" read ","Array  new ","commands size "," process "," process_and_read "," ensure_connected "," raise ","options [] "," disconnect ","replies unshift ","reply is_a? ","remaining > ","commands size - ","first is_a? ","options []= ","options has_key? ","result []= ","i + ","(send\n  (send\n    (lvar :commands) :size) :-\n  (int 1)) times ","commands empty? ","exception nil? ","commands size times "," with_socket_timeout ","pipeline timeouts each_with_index ","pipeline timeouts ","pipeline commands ","pipeline futures empty? ","pipeline futures ","pipeline commands  size "," read  is_a? ","commands size -  > ","pipeline commands  size - ","Array  new  []= ","(send\n  (send\n    (lvar :pipeline commands ) :size) :-\n  (int 1)) times ","pipeline commands  empty? ","pipeline commands  size times ","pipeline pipeline commands  "]}," Redis Client call_loop":{"type":"method","name":"call_loop","children":[],"call":[" read "," loop "," process "," without_socket_timeout "," raise ","reply is_a? ","args first ","args size == ","args size ","args first is_a? "," with_socket_timeout "," read  is_a? "]}," Redis Client call":{"type":"method","name":"call","children":[],"call":[" read "," process "," process_and_read first "," process_and_read "," ensure_connected "," raise ","reply is_a? ","args first ","args size == ","args size ","args first is_a? ","block call "," block_given? ","reply != "]}," Redis Client id":{"type":"method","name":"id","children":[],"call":[" db "," port "," host "," location ","@options [] "," config id "," config "]}," Redis Client connect":{"type":"method","name":"connect","children":[],"call":[" call ","@db != "," connect_to "," establish_connection "," db "," db != "," password ","Process  pid "," with_reconnect ","@connector check ","@options [] ","(sym :auth) compact "," username "," raise ","err message match? ","err message "," Kernel  warn "," username inspect "," Redis  deprecate! "]}," Redis Client process_and_read":{"type":"method","name":"process_and_read","children":[],"call":[" read ","Array  new map ","Array  new ","commands size ","@mutex synchronize "," process "]}," Redis Client call_blocking":{"type":"method","name":"call_blocking","children":[],"call":[" call "," without_socket_timeout "," ensure_connected "]}," Redis Client call_async":{"type":"method","name":"call_async","children":[],"call":[" process "," ensure_connected "]}," Redis zunion":{"type":"method","name":"zunion","children":[],"call":["@client call ","keys size "]}," Redis zinter":{"type":"method","name":"zinter","children":[],"call":["@client call ","keys size ","client call "," synchronize ","args << ","args << << ","args concat "]}," Redis Distributed zunion":{"type":"method","name":"zunion","children":[],"call":["node zunion "," ensure_same_node ","keys flatten! "]}," Redis Distributed zinter":{"type":"method","name":"zinter","children":[],"call":["node zinter "," ensure_same_node ","keys flatten! "]}," Redis _array":{"type":"method","name":"_array","children":[],"call":["value split ","value kind_of? "]}," Redis unwatch":{"type":"method","name":"unwatch","children":[],"call":["@client call "," synchronize ","client call "]}," Redis watch":{"type":"method","name":"watch","children":[],"call":["@client call "," synchronize "," raise "," unwatch "," block_given? ","client call ","(sym :watch) + "]}," Redis Distributed unwatch":{"type":"method","name":"unwatch","children":[],"call":[" raise "," node_for unwatch "," node_for "]}," Redis Distributed watch":{"type":"method","name":"watch","children":[],"call":[" raise ","node watch ","keys first to_s ","keys first "," key_tag "," ensure_same_node "]}," Redis inspect":{"type":"method","name":"inspect","children":[],"call":[" info [] "," info "," id "," synchronize ","client id ","@original_client id "]}," Redis slaveof":{"type":"method","name":"slaveof","children":[],"call":["@client call "," synchronize ","client call "]}," Redis shutdown":{"type":"method","name":"shutdown","children":[],"call":["@client call "," synchronize ","@client call_without_reply ","client call ","client with_reconnect ","@client without_reconnect ","client without_reconnect "]}," Redis sync":{"type":"method","name":"sync","children":[],"call":["@client call "," synchronize ","client call "]}," Redis debug":{"type":"method","name":"debug","children":[],"call":["@client call "," synchronize ","client call ","(sym :debug) + "]}," Redis mapped_hmget":{"type":"method","name":"mapped_hmget","children":[],"call":["Hash  [] ","fields zip flatten ","fields zip "," hmget ","reply kind_of? ","hash []= ","fields zip each ","Hash  new ","reply is_a? "," hmget  kind_of? ","Hash  new  []= "," hmget  is_a? "]}," Redis hmget":{"type":"method","name":"hmget","children":[],"call":["@client call "," synchronize ","client call ","(sym :hmget) + "]}," Redis hsetnx":{"type":"method","name":"hsetnx","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis persist":{"type":"method","name":"persist","children":[],"call":[" _bool ","@client call "," synchronize ","client call "," _boolify "]}," Redis zcount":{"type":"method","name":"zcount","children":[],"call":["@client call "," synchronize ","client call "]}," Redis lpushx":{"type":"method","name":"lpushx","children":[],"call":["@client call "," synchronize ","client call "]}," Redis rpushx":{"type":"method","name":"rpushx","children":[],"call":["@client call "," synchronize ","client call "]}," Redis linsert":{"type":"method","name":"linsert","children":[],"call":["@client call "," synchronize ","client call "]}," Redis strlen":{"type":"method","name":"strlen","children":[],"call":["@client call "," synchronize ","client call "]}," Redis bgrewriteaof":{"type":"method","name":"bgrewriteaof","children":[],"call":["@client call "," synchronize ","client call "]}," Redis flushall":{"type":"method","name":"flushall","children":[],"call":["@client call "," synchronize ","client call ","options [] "]}," Redis config":{"type":"method","name":"config","children":[],"call":["Hash  [] ","action == ","@client call ","reply kind_of? "," synchronize ","client call ","reply each_slice to_a ","reply each_slice ","(sym :config) + "," _pairify ","Hashify  call ","reply is_a? ","@client call  kind_of? ","@client call  each_slice to_a ","@client call  each_slice ","@client call  is_a? "]}," Redis auth":{"type":"method","name":"auth","children":[],"call":["@client call "," synchronize ","client call "]}," Redis Distributed persist":{"type":"method","name":"persist","children":[],"call":[" node_for persist "," node_for "]}," Redis Client encode":{"type":"method","name":"encode","children":[],"call":["string force_encoding ","Encoding  default_external "]}," Redis Client with_timeout":{"type":"method","name":"with_timeout","children":[],"call":["Timeout  timeout ","SystemTimer  timeout_after "]}," URI Redis check_path":{"type":"method","name":"check_path","children":[],"call":[]}," URI Redis db":{"type":"method","name":"db","children":[],"call":[" path [] to_i "," path [] "," path "]}," Redis current=":{"type":"method","name":"current=","children":[],"call":[" deprecate! "," caller first "," caller "]}," Redis current":{"type":"method","name":"current","children":[],"call":["Redis  new "," deprecate! "," caller first "," caller "]}," Redis Connection encode":{"type":"method","name":"encode","children":[],"call":["string force_encoding ","Encoding  default_external "]}," Redis Connection string_size":{"type":"method","name":"string_size","children":[],"call":["string to_s size ","string to_s ","string to_s bytesize "]}," Redis Connection format_multi_bulk_reply":{"type":"method","name":"format_multi_bulk_reply","children":[],"call":[" read ","Array  new ","n == ","line to_i ","Array  line to_i ew ","line to_i  == ","liline to_i e to_i "]}," Redis Connection format_bulk_reply":{"type":"method","name":"format_bulk_reply","children":[],"call":["@sock read "," encode ","bulklen == ","line to_i ","line to_i  == "]}," Redis Connection format_integer_reply":{"type":"method","name":"format_integer_reply","children":[],"call":["line to_i "]}," Redis Connection format_status_reply":{"type":"method","name":"format_status_reply","children":[],"call":["line strip "]}," Redis Connection format_error_reply":{"type":"method","name":"format_error_reply","children":[],"call":[" raise ","- + ","line strip "]}," Redis Connection format_reply":{"type":"method","name":"format_reply","children":[],"call":[" raise ","ProtocolError  new "," format_multi_bulk_reply "," format_bulk_reply "," format_integer_reply "," format_status_reply "," format_error_reply "]}," Redis Connection read":{"type":"method","name":"read","children":[],"call":[" format_reply ","@sock gets "," raise ","@sock read "]}," Redis Connection build_command":{"type":"method","name":"build_command","children":[],"call":["command << "," string_size ","arg to_s ","args each ","args size + ","args size ","arg to_s  to_s ","arg to_s s each ","arg to_s s size + ","arg to_s s size "]}," Redis Connection write":{"type":"method","name":"write","children":[],"call":["@sock write "," build_command join "," build_command "]}," Redis Connection timeout=":{"type":"method","name":"timeout=","children":[],"call":["@sock setsockopt ","(lvar :secs) pack "," Integer ","usecs - ","secs * ","usecs / ","(lvar : Integer ) pack "," Integer  - ","u Integer  - "," Integer  * "," Integer  / ","u Integer  / "]}," Redis Connection disconnect":{"type":"method","name":"disconnect","children":[],"call":["@sock close "]}," Redis Connection connect":{"type":"method","name":"connect","children":[],"call":["@sock setsockopt ","TCPSocket  new ","TCPSocket  new  setsockopt "]}," Redis Connection connected?":{"type":"method","name":"connected?","children":[],"call":["@sock ! ! ","@sock ! "]}," Redis Connection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis setrange":{"type":"method","name":"setrange","children":[],"call":["@client call "," synchronize ","client call ","value to_s "]}," Redis setbit":{"type":"method","name":"setbit","children":[],"call":["@client call "," synchronize ","client call "]}," Redis zrevrangebyscore":{"type":"method","name":"zrevrangebyscore","children":[],"call":["@client call ","command to_a "," synchronize ","c bool ","c splat ","CommandOptions  new "," Float ","reply each_slice map ","reply each_slice ","client call ","args concat ","options [] "," _floatify ","(sym :zrevrangebyscore) + ","(str \"LIMIT\") + "," _floatify_pairs ","args << "]}," Redis brpoplpush":{"type":"method","name":"brpoplpush","children":[],"call":["@client call_without_timeout "," synchronize ","client call_without_timeout ","options [] ","client call_with_timeout ","client timeout ","timeout > "]}," Redis getrange":{"type":"method","name":"getrange","children":[],"call":["@client call "," synchronize ","client call "]}," Redis getbit":{"type":"method","name":"getbit","children":[],"call":["@client call "," synchronize ","client call "]}," Redis without_reconnect":{"type":"method","name":"without_reconnect","children":[],"call":["@client without_reconnect "," synchronize "," with_reconnect ","client without_reconnect ","@client disable_reconnection "]}," Redis DisableThreadSafety synchronize":{"type":"method","name":"synchronize","children":[],"call":[]}," Redis Pipeline call_pipelined":{"type":"method","name":"call_pipelined","children":[],"call":["@commands concat "]}," Redis Distributed mapped_hmget":{"type":"method","name":"mapped_hmget","children":[],"call":["Hash  [] ","fields zip flatten ","fields zip "," hmget "," node_for mapped_hmget "," node_for ","fields flatten! "]}," Redis Distributed hmget":{"type":"method","name":"hmget","children":[],"call":[" node_for hmget "," node_for ","fields flatten! "]}," Redis Distributed mapped_hmset":{"type":"method","name":"mapped_hmset","children":[],"call":[" node_for hmset ","hash to_a flatten ","hash to_a "," node_for "]}," Redis Distributed zrevrangebyscore":{"type":"method","name":"zrevrangebyscore","children":[],"call":[" node_for zrevrangebyscore "," node_for "]}," Redis Distributed brpoplpush":{"type":"method","name":"brpoplpush","children":[],"call":["node brpoplpush "," ensure_same_node "]}," Redis Distributed getrange":{"type":"method","name":"getrange","children":[],"call":[" node_for getrange "," node_for "]}," Redis Distributed getbit":{"type":"method","name":"getbit","children":[],"call":[" node_for getbit "," node_for "]}," Redis Distributed setrange":{"type":"method","name":"setrange","children":[],"call":[" node_for setrange "," node_for "]}," Redis Distributed setbit":{"type":"method","name":"setbit","children":[],"call":[" node_for setbit "," node_for "]}," Redis Connection Synchrony setup_connect_callbacks":{"type":"method","name":"setup_connect_callbacks","children":[],"call":[" raise ","r == ","Fiber  yield ","f resume ","conn errback ","conn callback "," Fiber  yield aise ","Fiber  yield  == ","FibeFiber  yield   yield ","f Fiber  yield esume ","conn eFiber  yield Fiber  yield back "]}," Redis Connection Synchrony read":{"type":"method","name":"read","children":[],"call":[" raise ","type inspect ","type == ","@connection read "]}," Redis Connection Synchrony write":{"type":"method","name":"write","children":[],"call":["@connection send "," build_command join "," build_command "]}," Redis Connection Synchrony disconnect":{"type":"method","name":"disconnect","children":[],"call":["@connection close_connection "]}," Redis Connection Synchrony connect_unix":{"type":"method","name":"connect_unix","children":[],"call":[" setup_connect_callbacks ","Fiber  current ","EventMachine  connect_unix_domain "," setup_EventMachine  connect_unix_domain ect_callbacks ","EventMachine  EventMachine  connect_unix_domain ect_unix_domain "]}," Redis Connection Synchrony connect":{"type":"method","name":"connect","children":[],"call":[" setup_connect_callbacks ","Fiber  current ","c pending_connect_timeout= ","(send nil :Float\n  (send\n    (lvar :timeout) :/\n    (int 1000000))) max "," Float ","timeout / ","EventMachine  connect "]}," Redis Connection Synchrony timeout=":{"type":"method","name":"timeout=","children":[],"call":["@connection timeout= "]}," Redis Connection Synchrony connected?":{"type":"method","name":"connected?","children":[],"call":["@state == ","@connection connected? "]}," Redis Connection Synchrony initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Connection RedisClient unbind":{"type":"method","name":"unbind","children":[],"call":[" fail ","@req fail "]}," Redis Connection RedisClient send":{"type":"method","name":"send","children":[],"call":[" send_data "," callback "]}," Redis Connection RedisClient read":{"type":"method","name":"read","children":[],"call":["EventMachine Synchrony  sync ","EventMachine DefaultDeferrable  new ","@req timeout ","@timeout > ","EventMachine DefaultDeferrable  new  timeout "]}," Redis Connection RedisClient receive_data":{"type":"method","name":"receive_data","children":[],"call":["@req fail "," Redis ProtocolError  new ","err message ","@req succeed ","(lvasgn :reply\n  (send\n    (ivar :@reader) :gets)) == ","@reader gets ","@reader feed ","ProtocolError  new ","CommandError  new ","reply message ","reply is_a? ","reply == "," loop ","(lvasgn :@reader gets \n  (send\n    (ivar :@reader) :gets)) == ","(lvasgn :CommandError  new \n  (send\n    (ivar :@reader) :gets)) == ","@reader gets  message ","CommandError  new  message ","@reader gets  is_a? ","CommandError  new  is_a? ","@reader gets  == ","CommandError  new  == "]}," Redis Connection RedisClient connection_completed":{"type":"method","name":"connection_completed","children":[],"call":[" succeed "]}," Redis Connection RedisClient post_init":{"type":"method","name":"post_init","children":[],"call":[" Hiredis Reader  new "]}," Redis Connection Ruby with_timeout":{"type":"method","name":"with_timeout","children":[],"call":["Timeout  timeout ","SystemTimer  timeout_after "]}," Redis Connection Ruby format_multi_bulk_reply":{"type":"method","name":"format_multi_bulk_reply","children":[],"call":[" read ","Array  new ","n == ","line to_i ","Array  line to_i ew ","line to_i  == ","liline to_i e to_i "]}," Redis Connection Ruby format_bulk_reply":{"type":"method","name":"format_bulk_reply","children":[],"call":["@sock read "," encode ","bulklen == ","line to_i ","line to_i  == "]}," Redis Connection Ruby format_integer_reply":{"type":"method","name":"format_integer_reply","children":[],"call":["line to_i "]}," Redis Connection Ruby format_status_reply":{"type":"method","name":"format_status_reply","children":[],"call":["line strip "]}," Redis Connection Ruby format_error_reply":{"type":"method","name":"format_error_reply","children":[],"call":["RuntimeError  new ","line strip ","CommandError  new "]}," Redis Connection Ruby format_reply":{"type":"method","name":"format_reply","children":[],"call":[" raise ","ProtocolError  new "," format_multi_bulk_reply "," format_bulk_reply "," format_integer_reply "," format_status_reply "," format_error_reply "]}," Redis Connection Ruby read":{"type":"method","name":"read","children":[],"call":[" format_reply ","@sock gets "," raise ","@sock read ","line slice! ","ssl_error message ","ssl_error message match? ","@sock gets  slice! "]}," Redis Connection Ruby write":{"type":"method","name":"write","children":[],"call":["@sock syswrite "," build_command join "," build_command ","@sock write "]}," Redis Connection Ruby timeout=":{"type":"method","name":"timeout=","children":[],"call":["@sock setsockopt ","(lvar :secs) pack "," Integer ","usecs - ","secs * ","usecs / ","@sock timeout= ","@sock respond_to? ","(lvar : Integer ) pack "," Integer  - ","u Integer  - "," Integer  * "," Integer  / ","u Integer  / "]}," Redis Connection Ruby disconnect":{"type":"method","name":"disconnect","children":[],"call":["@sock close "]}," Redis Connection Ruby connect_unix":{"type":"method","name":"connect_unix","children":[],"call":["UNIXSocket  new "," with_timeout ","timeout to_f / ","timeout to_f "]}," Redis Connection Ruby connect":{"type":"method","name":"connect","children":[],"call":["@sock setsockopt ","TCPSocket  new "," with_timeout ","timeout to_f / ","timeout to_f ","TCPSocket  new  setsockopt "]}," Redis Connection Ruby connected?":{"type":"method","name":"connected?","children":[],"call":["@sock ! ! ","@sock ! "]}," Redis Connection Ruby initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Connection drivers":{"type":"method","name":"drivers","children":[],"call":["RedisClient  default_driver "]}," Redis Connection Hiredis read":{"type":"method","name":"read","children":[],"call":[" raise "," Redis ProtocolError  new ","err message ","@connection read ","ProtocolError  new ","CommandError  new ","reply message ","reply is_a? ","CommandError  new  message ","@connection read  message ","CommandError  new  is_a? ","@connection read  is_a? "]}," Redis Connection Hiredis write":{"type":"method","name":"write","children":[],"call":["@connection write "," raise ","command flatten "]}," Redis Connection Hiredis disconnect":{"type":"method","name":"disconnect","children":[],"call":["@connection disconnect "]}," Redis Connection Hiredis connect_unix":{"type":"method","name":"connect_unix","children":[],"call":[" raise ","@connection connect_unix "]}," Redis Connection Hiredis connect":{"type":"method","name":"connect","children":[],"call":[" raise ","@connection connect "]}," Redis Connection Hiredis timeout=":{"type":"method","name":"timeout=","children":[],"call":["@connection timeout= "," Integer ","timeout * "]}," Redis Connection Hiredis connected?":{"type":"method","name":"connected?","children":[],"call":["@connection connected? "]}," Redis Connection Hiredis initialize":{"type":"method","name":"initialize","children":[],"call":[" Hiredis Connection  new "]}," Redis Connection CommandHelper encode":{"type":"method","name":"encode","children":[],"call":["string force_encoding ","Encoding  default_external "]}," Redis Connection CommandHelper string_size":{"type":"method","name":"string_size","children":[],"call":["string to_s size ","string to_s ","string to_s bytesize "]}," Redis Connection CommandHelper build_command":{"type":"method","name":"build_command","children":[],"call":["command << "," string_size ","arg to_s ","args each ","args size ","command join ","command []= ","(send\n  (send\n    (lvar :command) :length) :-\n  (int 1)) / ","command length - ","command length ","i bytesize ","i to_s ","j bytesize ","j to_s ","i each ","i is_a? ","i b ","i encoding == ","i encoding ","j b ","j encoding == ","j encoding "," stri to_s ng_si to_s ze "," stri b ng_si b ze ","arg to_s  to_s ","arg to_s s each ","arg to_s s size ","args si to_s ze ","args si b ze ","command joi to_s n ","command joi b n ","command j to_s oin ","command j b oin ","(send\n  (send\n    (lvar :command) :length) :-\n  (i to_s nt 1)) / ","(send\n  (send\n    (lvar :command) :length) :-\n  (i b nt 1)) / ","i to_s  bytesi to_s ze ","i b  bytesi b ze ","i to_s  to_s ","i b  to_s ","j bytesi to_s ze ","j bytesi b ze ","j to_s  bytesize ","j b  bytesize ","j to_s  to_s ","j b  to_s ","i to_s  each ","i b  each ","i to_s  i to_s s_a? ","i b  i b s_a? ","i to_s  b ","i b  b ","i to_s  encodi to_s ng == ","i b  encodi b ng == ","i to_s  encodi to_s ng ","i b  encodi b ng ","j to_s  b ","j b  b ","j encodi to_s ng == ","j encodi b ng == ","j to_s  encoding == ","j b  encoding == ","j encodi to_s ng ","j encodi b ng ","j to_s  encoding ","j b  encoding "]}," Redis Client establish_connection":{"type":"method","name":"establish_connection","children":[],"call":[" raise "," location "," timeout= "," connection connect "," connection "," connection connect_unix "," Integer ","@timeout * ","@options [] connect ","@options dup ","@options [] ","@options []= ","server [] ","@connector resolve dup ","@connector resolve ","$! class ","server include? ","error class ","  Integer = ","@ Integer  * ","@connector resolve dup  [] ","@connector resolve dup  include? "]}," Redis Client without_reconnect":{"type":"method","name":"without_reconnect","children":[],"call":[" with_reconnect "]}," Redis Client location":{"type":"method","name":"location","children":[],"call":[" port "," host "," path "]}," Redis object":{"type":"method","name":"object","children":[],"call":["@client call "," synchronize ","client call ","(sym :object) + "]}," Redis SubscribedClient call_without_reply":{"type":"method","name":"call_without_reply","children":[],"call":["@commands push "]}," Redis Pipeline call_without_reply":{"type":"method","name":"call_without_reply","children":[],"call":["@commands push "]}," Redis Distributed inspect":{"type":"method","name":"inspect","children":[],"call":["node_info join ","node info [] ","node info ","node id "," nodes map "," nodes "," nodes map join "]}," Redis Connection RedisClient connected?":{"type":"method","name":"connected?","children":[],"call":[]}," Redis Client call_without_reply":{"type":"method","name":"call_without_reply","children":[],"call":[" process "]}," Redis Distributed hsetnx":{"type":"method","name":"hsetnx","children":[],"call":[" node_for hsetnx "," node_for "]}," Redis _subscription":{"type":"method","name":"_subscription","children":[],"call":["@client send ","SubscribedClient  new ","@client call "," subscribed? ","(lvar :method) + ","timeout > ","@subscription_client call_v ","(lvar :method) concat "," raise ","@subscription_client send ","@client pubsub ","SubscribedClient  new  call_v ","SubscribedClient  new  send "]}," Redis _hashify":{"type":"method","name":"_hashify","children":[],"call":["hash []= ","array each_slice ","Hash  new "," lambda ","Hash  new  []= "]}," Redis _boolify":{"type":"method","name":"_boolify","children":[],"call":["value == "," lambda "]}," Redis evalsha":{"type":"method","name":"evalsha","children":[],"call":[" _eval "]}," Redis eval":{"type":"method","name":"eval","children":[],"call":[" _eval "]}," Redis _eval":{"type":"method","name":"_eval","children":[],"call":["client call ","(lvar :cmd) + + ","(lvar :cmd) + ","keys length "," synchronize ","options [] ","args shift ","args pop ","args last is_a? ","args last ","args pop  [] "]}," Redis script":{"type":"method","name":"script","children":[],"call":["client call ","(sym :script) + "," synchronize ","reply first ","arg is_a? "," _boolify call "," _boolify ","reply map ","args first ","subcommand == ","subcommand to_s downcase ","subcommand to_s ","Boolify  call ","args first  is_a? ","args first s first ","subcommand to_s downcase  == ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis hincrbyfloat":{"type":"method","name":"hincrbyfloat","children":[],"call":[" Float ","client call "," synchronize "," _floatify "]}," Redis _bpop":{"type":"method","name":"_bpop","children":[],"call":["client call_without_timeout "," synchronize ","options [] ","args flatten ","args size > ","args size ","options []= ","args pop ","args last ","client call_with_timeout ","client timeout ","timeout > ","args pop to_int ","args last respond_to? ","args last is_a? ","args pop  [] ","args pop  []= "]}," Redis psetex":{"type":"method","name":"psetex","children":[],"call":["client call "," synchronize ","value to_s "]}," Redis incrbyfloat":{"type":"method","name":"incrbyfloat","children":[],"call":[" Float ","client call "," synchronize "," _floatify "]}," Redis pttl":{"type":"method","name":"pttl","children":[],"call":["client call "," synchronize "]}," Redis pexpireat":{"type":"method","name":"pexpireat","children":[],"call":["client call "," _boolify "," synchronize "]}," Redis pexpire":{"type":"method","name":"pexpire","children":[],"call":["client call "," _boolify "," synchronize "]}," Redis time":{"type":"method","name":"time","children":[],"call":["reply map ","client call "," synchronize "]}," Redis slowlog":{"type":"method","name":"slowlog","children":[],"call":["client call ","args << "," synchronize ","@client call "]}," Redis with_reconnect":{"type":"method","name":"with_reconnect","children":[],"call":["client with_reconnect "," synchronize "]}," Redis synchronize":{"type":"method","name":"synchronize","children":[],"call":[" mon_synchronize ","@synchronizer call ","@monitor synchronize "]}," Redis Future value":{"type":"method","name":"value","children":[],"call":[" Kernel  raise ","@object kind_of? ","@object is_a? "]}," Redis Future _command":{"type":"method","name":"_command","children":[],"call":[]}," Redis Future _set":{"type":"method","name":"_set","children":[],"call":[" value ","@transformation call ","@coerce call "]}," Redis Future inspect":{"type":"method","name":"inspect","children":[],"call":["@command inspect "]}," Redis Future initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis FutureNotReady initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Pipeline Multi commands":{"type":"method","name":"commands","children":[],"call":["(array\n  (sym :multi)) + + ","(array\n  (sym :multi)) + "," empty? "]}," Redis Pipeline Multi finish":{"type":"method","name":"finish","children":[],"call":["CommandError  new ","reply message ","reply is_a? ","replies last "," raise ","r kind_of? ","replies detect ","replies last size < "," futures size - "," futures size "," futures ","replies last size ","replies last nil? ","r is_a? ","exec size < ","exec size ","exec is_a? ","exec nil? ","replies last  size < ","replies last  size ","replies last  is_a? ","replies last  nil? "]}," Redis Pipeline finish":{"type":"method","name":"finish","children":[],"call":["future _set ","replies [] "," futures each_with_index map "," futures each_with_index "," futures ","blk call "]}," Redis Pipeline without_reconnect":{"type":"method","name":"without_reconnect","children":[],"call":[" with_reconnect "]}," Redis Pipeline with_reconnect":{"type":"method","name":"with_reconnect","children":[],"call":[]}," Redis Pipeline commands":{"type":"method","name":"commands","children":[],"call":["f _command ","@futures map "]}," Redis Pipeline call_pipeline":{"type":"method","name":"call_pipeline","children":[],"call":["@futures concat ","pipeline futures ","pipeline shutdown? ","pipeline db ","pipeline materialized_futures "]}," Redis Pipeline shutdown?":{"type":"method","name":"shutdown?","children":[],"call":[]}," Redis Pipeline without_reconnect?":{"type":"method","name":"without_reconnect?","children":[],"call":["@with_reconnect ! "]}," Redis Pipeline with_reconnect?":{"type":"method","name":"with_reconnect?","children":[],"call":[]}," Redis Distributed evalsha":{"type":"method","name":"evalsha","children":[],"call":[" _eval "]}," Redis Distributed eval":{"type":"method","name":"eval","children":[],"call":[" _eval "]}," Redis Distributed _eval":{"type":"method","name":"_eval","children":[],"call":["node send "," ensure_same_node ","options [] ","args shift ","args pop ","args last is_a? ","args last ","args pop  [] "]}," Redis Distributed script":{"type":"method","name":"script","children":[],"call":[" on_each_node "]}," Redis Distributed hincrbyfloat":{"type":"method","name":"hincrbyfloat","children":[],"call":[" node_for hincrbyfloat "," node_for "]}," Redis Distributed zcount":{"type":"method","name":"zcount","children":[],"call":[" node_for zcount "," node_for "]}," Redis Distributed linsert":{"type":"method","name":"linsert","children":[],"call":[" node_for linsert "," node_for "]}," Redis Distributed _bpop":{"type":"method","name":"_bpop","children":[],"call":["node __send__ "," ensure_same_node ","args flatten ","args size > ","args size ","options []= ","args pop ","args last ","args pop to_int ","args last respond_to? ","args last is_a? ","options [] ","last_arg to_int "," Redis  deprecate! "," caller first "," caller ","args map join ","args map ","args flatten! ","args pop  []= ","args pop  [] ","args pop  to_int "]}," Redis Distributed rpushx":{"type":"method","name":"rpushx","children":[],"call":[" node_for rpushx "," node_for "]}," Redis Distributed lpushx":{"type":"method","name":"lpushx","children":[],"call":[" node_for lpushx "," node_for "]}," Redis Distributed strlen":{"type":"method","name":"strlen","children":[],"call":[" node_for strlen "," node_for "]}," Redis Distributed psetex":{"type":"method","name":"psetex","children":[],"call":[" node_for psetex "," node_for "]}," Redis Distributed incrbyfloat":{"type":"method","name":"incrbyfloat","children":[],"call":[" node_for incrbyfloat "," node_for "]}," Redis Distributed pttl":{"type":"method","name":"pttl","children":[],"call":[" node_for pttl "," node_for "]}," Redis Distributed pexpireat":{"type":"method","name":"pexpireat","children":[],"call":[" node_for pexpireat "," node_for "]}," Redis Distributed pexpire":{"type":"method","name":"pexpire","children":[],"call":[" node_for pexpire "," node_for "]}," Redis Distributed time":{"type":"method","name":"time","children":[],"call":[" on_each_node "]}," Redis Connection UNIXSocket connect":{"type":"method","name":"connect","children":[],"call":[]}," Redis Connection TCPSocket connect":{"type":"method","name":"connect","children":[],"call":[]}," Redis Connection SocketMixin _read_from_socket":{"type":"method","name":"_read_from_socket","children":[],"call":[" raise ","IO  select "," read_nonblock "," wait_writable "," wait_readable "," loop "]}," Redis Connection SocketMixin gets":{"type":"method","name":"gets","children":[],"call":["@buffer slice! ","crlf + ","CRLF  bytesize ","@buffer << "," _read_from_socket ","(lvasgn :crlf\n  (send\n    (ivar :@buffer) :index\n    (const nil :CRLF))) == ","@buffer index ","(lvasgn :crlf\n  (send\n    (ivar :@buffer) :index\n    (const nil :CRLF))) nil? ","@buffer index  + ","(lvasgn :@buffer index \n  (send\n    (ivar :@buffer) :index\n    (const nil :CRLF))) == ","(lvasgn :@buffer index \n  (send\n    (ivar :@buffer) :index\n    (const nil :CRLF))) nil? "]}," Redis Connection SocketMixin read":{"type":"method","name":"read","children":[],"call":["result << "," _read_from_socket ","nbytes - ","result bytesize ","result bytesize < ","@buffer slice! "," b ","String  new ","@buffer slice!  << ","@buffer slice!  bytesize ","@buffer slice!  bytesize < ","@String  new  slice! "]}," Redis Connection SocketMixin timeout=":{"type":"method","name":"timeout=","children":[],"call":["timeout > "]}," Redis Connection SocketMixin initialize":{"type":"method","name":"initialize","children":[],"call":[" dup "," b "]}," Redis Client _parse_driver":{"type":"method","name":"_parse_driver","children":[],"call":[" raise "," require ","driver kind_of? ","driver to_s ","driver is_a? ","driver inspect ","Connection  const_get ","driver capitalize ","e message "," require_relative ","error message ","driver to_s  kind_of? ","Connection  const_get  kind_of? ","driver to_s  to_s ","Connection  const_get  to_s ","driver to_s  is_a? ","Connection  const_get  is_a? ","driver to_s  inspect ","Connection  const_get  inspect ","driver to_s  capitalize ","Connection  const_get  capitalize "]}," Redis Client _parse_options":{"type":"method","name":"_parse_options","children":[],"call":["options []= ","Connection  drivers last ","Connection  drivers "," _parse_driver ","options [] ","options [] to_i ","options [] to_f ","options [] to_s ","options delete ","defaults merge ","defaults []= ","uri path [] to_i ","uri path [] ","uri path ","uri password ","uri port ","uri host ","uri scheme "," raise ","uri scheme == "," URI "," require ","ENV  [] ","DEFAULTS  dup ","options [] - ","options [] >= ","key inspect ","options [] [] is_a? ","options [] [] ","(sym :time) each ","defaults [] ","defaults keys each ","defaults keys ","CGI  unescape ","key to_s ","options has_key? ","defaults [] call ","defaults [] respond_to? ","options dup ","options [] nil? "," Float ","url == ","options key? ","url nil? ","uri password empty? ! ","uri password empty? ","uri user ","uri user empty? ! ","uri user empty? ","defaults each_key ","uri host sub ","defaults merge  []= ","options dup  []= ","defaults merge  [] ","options dup  [] ","defaults merge  [] to_i ","options dup  [] to_i ","defaults merge  [] to_f ","options dup  [] to_f ","defaults merge  [] to_s ","options dup  [] to_s ","defaults merge  delete ","options dup  delete ","DEFAULTS  dup  merge ","DEFAULTS  dup  []= "," URI  path [] to_i "," URI  path [] "," URI  path "," URI  password "," URI  port "," URI  host "," URI  scheme "," URI  scheme == ","defaults merge  [] - ","options dup  [] - ","defaults merge  [] >= ","options dup  [] >= ","defaults merge  [] [] is_a? ","options dup  [] [] is_a? ","defaults merge  [] [] ","options dup  [] [] ","DEFAULTS  dup  [] ","DEFAULTS  dup  keys each ","DEFAULTS  dup  keys ","defaults merge  has_key? ","options dup  has_key? ","DEFAULTS  dup  [] call ","DEFAULTS  dup  [] respond_to? ","defaults merge  dup ","options dup  dup ","defaults merge  [] nil? ","options dup  [] nil? ","defaults []  == ","options []  == ","defaults merge  key? ","options dup  key? ","defaults []  nil? ","options []  nil? "," URI  password empty? ! "," URI  password empty? "," URI  user "," URI  user empty? ! "," URI  user empty? ","DEFAULTS  dup  each_key "," URI  host sub "]}," Redis Client with_reconnect":{"type":"method","name":"with_reconnect","children":[],"call":[]}," Redis Client write":{"type":"method","name":"write","children":[],"call":[" connection write "," connection "," io "]}," Redis Client io":{"type":"method","name":"io","children":[],"call":[" raise ","Connection lost (%s) % ","e class name split last ","e class name split ","e class name ","e class ","e2 set_backtrace ","e1 backtrace ","TimeoutError  new ","TimeoutError  new  set_backtrace "]}," Redis Client call_pipeline":{"type":"method","name":"call_pipeline","children":[],"call":[" raise ","pipeline shutdown? ","pipeline finish "," call_pipelined ","pipeline commands "," with_reconnect ","pipeline with_reconnect? ","shutdown_wrapper call ","without_reconnect_wrapper call ","blk call "," lambda "," without_reconnect ","pipeline without_reconnect? "," db= ","pipeline db ","pipeline finish tap ","commands empty? ","pipeline futures empty? ","pipeline futures ","pipeline pipeline commands  ","pipeline commands  empty? "]}," Redis Client db=":{"type":"method","name":"db=","children":[],"call":["@options []= ","db to_i "]}," Redis Client db":{"type":"method","name":"db","children":[],"call":["@options [] "," config db "," config "]}," Redis Client password":{"type":"method","name":"password","children":[],"call":["@options [] "," config password "," config "]}," Redis Client timeout":{"type":"method","name":"timeout","children":[],"call":["@options [] "," config read_timeout "," config "]}," Redis Client path":{"type":"method","name":"path","children":[],"call":["@options [] "," config path "," config "]}," Redis Client port":{"type":"method","name":"port","children":[],"call":["@options [] "," config port "," config "," config path "]}," Redis Client host":{"type":"method","name":"host","children":[],"call":["@options [] "," config host "," config "," config path "]}," Redis Client scheme":{"type":"method","name":"scheme","children":[],"call":["@options [] "]}," Redis _floatify":{"type":"method","name":"_floatify","children":[],"call":[" Float ","(if\n  (send\n    (lvar :inf) :[]\n    (int 1))\n  (float -1.0)\n  (float 1.0)) / ","inf [] ","str match "," lambda ","(if\n  (send\n    (lvar :str match ) :[]\n    (int 1))\n  (float -1.0)\n  (float 1.0)) / ","str match  [] "]}," Redis Connection Ruby get_tcp_keepalive":{"type":"method","name":"get_tcp_keepalive","children":[],"call":["@sock getsockopt int ","@sock getsockopt "]}," Redis Connection Ruby set_tcp_keepalive":{"type":"method","name":"set_tcp_keepalive","children":[],"call":["@sock setsockopt ","keepalive [] ","keepalive is_a? "]}," Redis bitop":{"type":"method","name":"bitop","children":[],"call":["client call ","(sym :bitop) + "," synchronize "]}," Redis bitcount":{"type":"method","name":"bitcount","children":[],"call":["client call "," synchronize "]}," Redis restore":{"type":"method","name":"restore","children":[],"call":["client call "," synchronize ","args << ","options [] "]}," Redis dump":{"type":"method","name":"dump","children":[],"call":["client call "," synchronize "]}," Redis Distributed bitop":{"type":"method","name":"bitop","children":[],"call":["node bitop "," ensure_same_node ","(lvar :destkey) + ","keys flatten! "]}," Redis Distributed bitcount":{"type":"method","name":"bitcount","children":[],"call":[" node_for bitcount "," node_for "]}," Redis Distributed restore":{"type":"method","name":"restore","children":[],"call":[" node_for restore "," node_for "]}," Redis Distributed dump":{"type":"method","name":"dump","children":[],"call":[" node_for dump "," node_for "]}," Redis Connection UNIXSocket _read_from_socket":{"type":"method","name":"_read_from_socket","children":[],"call":[" raise "," readpartial "]}," Redis Client with_socket_timeout":{"type":"method","name":"with_socket_timeout","children":[],"call":[" connection timeout= "," timeout "," connection "," connected? "," connect ","@options []= ","@options [] "]}," Redis Client call_with_timeout":{"type":"method","name":"call_with_timeout","children":[],"call":[" call "," with_socket_timeout "," timeout + "," timeout ","extra_timeout == "," with_socket_ timeout +  ","  timeout +  + ","  timeout +  ","extra_ timeout +  == "]}," Redis Future class":{"type":"method","name":"class","children":[],"call":[]}," Redis Future is_a?":{"type":"method","name":"is_a?","children":[],"call":[" class ancestors include? "," class ancestors "," class "]}," Redis _boolify_set":{"type":"method","name":"_boolify_set","children":[],"call":["OK == "," lambda "]}," Redis migrate":{"type":"method","name":"migrate","children":[],"call":["client call "," synchronize ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i "," client timeout "," client ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i "," client db "," raise ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i ","@client timeout ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i ","@client db ","key is_a? ","args << ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i ))\n  (send\n    (send nil :client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i )) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i ))\n  (send\n    (send nil :client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i )) to_i "," client (or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i  "," client (or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i  ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i ))\n  (send\n    (send nil :client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i )) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i ))\n  (send\n    (send nil :client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i )) to_i "," client (or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i  "," client (or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i  ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i ))\n  (send\n    (ivar :@client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i )) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i ))\n  (send\n    (ivar :@client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i )) to_i ","@client (or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (send nil :client) :timeout)) to_i  ","@client (or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i  ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i ))\n  (send\n    (ivar :@client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i )) to_i ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i ))\n  (send\n    (ivar :@client) :(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i )) to_i ","@client (or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (send nil :client) :db)) to_i  ","@client (or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i  "]}," Redis connected?":{"type":"method","name":"connected?","children":[],"call":["@original_client connected? ","@client connected? "]}," Redis Distributed migrate":{"type":"method","name":"migrate","children":[],"call":[" raise "]}," Redis _pairify":{"type":"method","name":"_pairify","children":[],"call":["array each_slice to_a ","array each_slice "]}," Redis _floatify_pairs":{"type":"method","name":"_floatify_pairs","children":[],"call":[" _floatify call "," _floatify ","array each_slice map ","array each_slice "," lambda "]}," Redis sscan_each":{"type":"method","name":"sscan_each","children":[],"call":["cursor == ","keys each "," sscan "," loop "," to_enum "," block_given? "]}," Redis sscan":{"type":"method","name":"sscan","children":[],"call":[" _scan "]}," Redis zscan_each":{"type":"method","name":"zscan_each","children":[],"call":["cursor == ","values each "," zscan "," loop "," to_enum "," block_given? "]}," Redis zscan":{"type":"method","name":"zscan","children":[],"call":[" _floatify_pairs call ","reply [] "," _floatify_pairs "," _scan ","FloatifyPairs  call "]}," Redis hscan_each":{"type":"method","name":"hscan_each","children":[],"call":["cursor == ","values each "," hscan "," loop "," to_enum "," block_given? "]}," Redis hscan":{"type":"method","name":"hscan","children":[],"call":[" _pairify ","reply [] "," _scan ","reply [] each_slice to_a ","reply [] each_slice "]}," Redis scan_each":{"type":"method","name":"scan_each","children":[],"call":["cursor == ","keys each "," scan "," loop "," to_enum "," block_given? "]}," Redis scan":{"type":"method","name":"scan","children":[],"call":[" _scan "]}," Redis _scan":{"type":"method","name":"_scan","children":[],"call":["client call ","(lvar :command) + "," synchronize ","args concat ","options [] ","args << ","args << << "]}," Redis dup":{"type":"method","name":"dup","children":[],"call":[" class new "," class "]}," Redis Distributed dup":{"type":"method","name":"dup","children":[],"call":[" class new "," class "]}," Redis Connection TCPSocket connect_addrinfo":{"type":"method","name":"connect_addrinfo","children":[],"call":[]}," Redis Client driver":{"type":"method","name":"driver","children":[],"call":["@options [] "]}," Redis Client options":{"type":"method","name":"options","children":[],"call":["Marshal  load ","Marshal  dump "]}," Redis pfmerge":{"type":"method","name":"pfmerge","children":[],"call":["client call "," _boolify_set "," synchronize "]}," Redis pfcount":{"type":"method","name":"pfcount","children":[],"call":["client call "," synchronize ","(sym :pfcount) + "]}," Redis pfadd":{"type":"method","name":"pfadd","children":[],"call":["client call "," _boolify "," synchronize "]}," Redis bitpos":{"type":"method","name":"bitpos","children":[],"call":["client call ","command << "," synchronize "," raise ","start ! "]}," Redis Distributed pfmerge":{"type":"method","name":"pfmerge","children":[],"call":["node pfmerge "," ensure_same_node "]}," Redis Distributed pfcount":{"type":"method","name":"pfcount","children":[],"call":[" node_for pfcount "," node_for ","node pfcount "," ensure_same_node ","keys flatten "]}," Redis Distributed pfadd":{"type":"method","name":"pfadd","children":[],"call":[" node_for pfadd "," node_for "]}," Redis Distributed bitpos":{"type":"method","name":"bitpos","children":[],"call":[" node_for bitpos "," node_for "]}," Redis Client inherit_socket?":{"type":"method","name":"inherit_socket?","children":[],"call":["@options [] "]}," Redis zrangebylex":{"type":"method","name":"zrangebylex","children":[],"call":["client call ","(sym :zrangebylex) + "," synchronize ","args concat ","(str \"LIMIT\") + ","options [] ","args << "]}," Redis Client Connector Sentinel resolve_slave":{"type":"method","name":"resolve_slave","children":[],"call":["slave fetch ","Hash  [] ","reply sample ","client call "," sentinel_detect ","slaves sample "," raise ","slaves empty? ","s fetch include? ","s fetch ","slaves reject! ","s []= ","s fetch split ","slaves each ","s each_slice to_h ","s each_slice ","reply map ","Hash  []  fetch ","slaves sample  fetch ","client call  sample ","Hash  [] s sample ","slaves sample s sample ","Hash  [] s empty? ","slaves sample s empty? ","Hash  [] s reject! ","slaves sample s reject! ","Hash  [] s each ","slaves sample s each ","client call  map "]}," Redis Client Connector Sentinel resolve_master":{"type":"method","name":"resolve_master","children":[],"call":["reply [] ","client call "," sentinel_detect ","client call  [] "]}," Redis Client Connector Sentinel sentinel_detect":{"type":"method","name":"sentinel_detect","children":[],"call":["client disconnect ","@sentinels unshift ","@sentinels delete ","Client  new ","sentinel [] ","@sentinels each "," raise ","@options merge ","@options []= ","DEFAULTS  fetch ","err message start_with? ","err message ","Client  new  disconnect "]}," Redis Client Connector Sentinel resolve":{"type":"method","name":"resolve","children":[],"call":[" raise "," resolve_slave "," resolve_master "]}," Redis Client Connector Sentinel check":{"type":"method","name":"check","children":[],"call":[" raise "," disconnect ","role != ","client call [] ","client call ","client disconnect ","client call []  != "]}," Redis Client Connector Sentinel initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options [] to_s ","options fetch dup ","options fetch ","@options [] ","@options fetch to_s ","@options fetch ","@options delete dup ","@options delete ","@options []= ","DEFAULTS  fetch ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :role))\n  (str \"master\")) to_s "]}," Redis Client Connector check":{"type":"method","name":"check","children":[],"call":[]}," Redis Client Connector resolve":{"type":"method","name":"resolve","children":[],"call":[]}," Redis Client Connector initialize":{"type":"method","name":"initialize","children":[],"call":["options dup "]}," Redis pubsub":{"type":"method","name":"pubsub","children":[],"call":["client call ","(sym :pubsub) + "," synchronize "]}," Redis zrevrangebylex":{"type":"method","name":"zrevrangebylex","children":[],"call":["client call ","(sym :zrevrangebylex) + "," synchronize ","args concat ","(str \"LIMIT\") + ","options [] ","args << "]}," Redis disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@original_client disconnect "]}," Redis _identity":{"type":"method","name":"_identity","children":[],"call":[" lambda "]}," Redis sentinel":{"type":"method","name":"sentinel","children":[],"call":[" _hashify call "," _hashify ","reply map ","reply [] kind_of? ","reply [] ","reply kind_of? ","client call ","(sym :sentinel) + "," synchronize ","subcommand to_s downcase ","subcommand to_s ","Hashify  call ","reply [] is_a? ","reply is_a? ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis psubscribe_with_timeout":{"type":"method","name":"psubscribe_with_timeout","children":[],"call":[" _subscription "," synchronize "]}," Redis subscribe_with_timeout":{"type":"method","name":"subscribe_with_timeout","children":[],"call":[" _subscription "," synchronize "]}," Redis commit":{"type":"method","name":"commit","children":[],"call":["@queue delete ","Thread  current object_id ","Thread  current ","client call_pipelined ","@queue [] "," synchronize ","pipeline call ","@queue [] each ","Pipeline  new "," Redis  deprecate! ","Kernel  caller first ","Kernel  caller ","client call_Pipeline  new d ","Pipeline  new  call "]}," Redis queue":{"type":"method","name":"queue","children":[],"call":["@queue [] << ","@queue [] ","Thread  current object_id ","Thread  current "," synchronize "," Redis  deprecate! "," caller first "," caller "]}," Redis call":{"type":"method","name":"call","children":[],"call":["client call "," synchronize "]}," Redis close":{"type":"method","name":"close","children":[],"call":["@original_client disconnect ","@client close "]}," Redis SubscribedClient psubscribe_with_timeout":{"type":"method","name":"psubscribe_with_timeout","children":[],"call":[" subscription "]}," Redis SubscribedClient subscribe_with_timeout":{"type":"method","name":"subscribe_with_timeout","children":[],"call":[" subscription "]}," Redis Connection Ruby write_timeout=":{"type":"method","name":"write_timeout=","children":[],"call":["@sock write_timeout= "]}," Redis Connection SSLSocket connect":{"type":"method","name":"connect","children":[],"call":[]}," Redis Connection SocketMixin write":{"type":"method","name":"write","children":[],"call":["Timeout  timeout ","data byteslice ","total_count >= "," _write_to_socket "," loop ","data bytesize ","data b ","buffer byteslice ","total_bytes_written >= "," raise "," wait_writable "," wait_readable "," write_nonblock ","buffer bytesize ","data byteslice  byteslice ","data b  byteslice ","total_ _write_to_socket  >= ","data byteslice  bytesize ","data b  bytesize ","data byteslice  b ","data b  b ","buffer byteslice  byteslice ","total_ write_nonblock  >= ","buffer byteslice  bytesize "]}," Redis Connection SocketMixin write_timeout=":{"type":"method","name":"write_timeout=","children":[],"call":["timeout > "]}," Redis Client connect_timeout":{"type":"method","name":"connect_timeout","children":[],"call":["@options [] "]}," Redis Client read_timeout":{"type":"method","name":"read_timeout","children":[],"call":["@options [] "]}," Redis Connection SocketMixin _write_to_socket":{"type":"method","name":"_write_to_socket","children":[],"call":[" raise ","IO  select "," write_nonblock ","data slice! ","bytes_written < ","data bytesize "," wait_writable "," wait_readable "," loop "," write_nonblock  < "]}," String byteslice":{"type":"method","name":"byteslice","children":[],"call":[" slice "]}," Redis connection":{"type":"method","name":"connection","children":[],"call":["@original_client location ","@original_client id ","@original_client db ","@original_client port ","@original_client host ","@original_client connection_info ","@client port ","@client host "," id ","@client db "]}," Redis zlexcount":{"type":"method","name":"zlexcount","children":[],"call":["client call "," synchronize "]}," Redis client":{"type":"method","name":"client","children":[],"call":["Hash  [] ","entries each_slice to_a ","entries each_slice ","line chomp split ","line chomp ","reply lines map ","reply lines ","subcommand to_s == ","subcommand to_s ","client call ","(sym :client) + "," synchronize ","line chomp split  each_slice to_a ","line chomp split  each_slice "]}," Redis _client":{"type":"method","name":"_client","children":[],"call":[]}," Redis Distributed sscan_each":{"type":"method","name":"sscan_each","children":[],"call":[" node_for sscan_each "," node_for "]}," Redis Distributed sscan":{"type":"method","name":"sscan","children":[],"call":[" node_for sscan "," node_for "]}," Redis _geoarguments":{"type":"method","name":"_geoarguments","children":[],"call":["args uniq ","args push "]}," Redis geodist":{"type":"method","name":"geodist","children":[],"call":["client call "," synchronize "]}," Redis geopos":{"type":"method","name":"geopos","children":[],"call":["client call "," synchronize "]}," Redis georadiusbymember":{"type":"method","name":"georadiusbymember","children":[],"call":["client call "," synchronize "," _geoarguments "," _ _geoarguments  "]}," Redis georadius":{"type":"method","name":"georadius","children":[],"call":["client call "," synchronize "," _geoarguments "," _ _geoarguments  "]}," Redis geohash":{"type":"method","name":"geohash","children":[],"call":["client call "," synchronize "]}," Redis geoadd":{"type":"method","name":"geoadd","children":[],"call":["client call "," synchronize "]}," Redis unlink":{"type":"method","name":"unlink","children":[],"call":["client call ","(sym :unlink) + "," synchronize "]}," Redis Pipeline empty?":{"type":"method","name":"empty?","children":[],"call":["@futures empty? "]}," Redis Distributed unlink":{"type":"method","name":"unlink","children":[],"call":["sum + ","node unlink ","keys_per_node inject "," node_for ","args group_by ","args flatten! "]}," Redis asking":{"type":"method","name":"asking","children":[],"call":["client call "," synchronize "]}," Redis cluster":{"type":"method","name":"cluster","children":[],"call":["client call ","(sym :cluster) + "," synchronize ","subcommand to_s downcase ","subcommand to_s ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis Cluster CrossSlotPipeliningError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Cluster AmbiguousNodeError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Cluster CommandErrorCollection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Cluster OrchestrationCommandNotSupported initialize":{"type":"method","name":"initialize","children":[],"call":["(lvar :command) map reject join upcase ","(lvar :command) map reject join ","(lvar :command) map reject ","(lvar :command) map "]}," Redis Cluster extract_keys_in_pipeline":{"type":"method","name":"extract_keys_in_pipeline","children":[],"call":["(send\n  (send\n    (lvar :pipeline) :commands) :map) reject ","@command extract_first_key ","pipeline commands map ","pipeline commands ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact uniq ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact "," find_node_key "]}," Redis Cluster update_cluster_info!":{"type":"method","name":"update_cluster_info!","children":[],"call":[" fetch_cluster_info! ","@node map ","@option add_node ","NodeKey  split ","node_key nil? "]}," Redis Cluster find_node":{"type":"method","name":"find_node","children":[],"call":["@node find_by "," update_cluster_info! ","@node sample ","node_key nil? "]}," Redis Cluster find_node_key":{"type":"method","name":"find_node_key","children":[],"call":["@slot find_node_key_of_slave ","@slot find_node_key_of_master ","@command should_send_to_master? ","@slot exists? ","KeySlotConverter  convert ","key empty? ","@command extract_first_key ","@KeySlotConverter  convert  find_node_key_of_slave ","@slot find_node_@command extract_first_key _of_slave ","@KeySlotConverter  convert  find_node_key_of_master ","@slot find_node_@command extract_first_key _of_master ","@KeySlotConverter  convert  exists? ","@command extract_first_key  empty? ","@command extract_first_@command extract_first_key  "]}," Redis Cluster assign_node":{"type":"method","name":"assign_node","children":[],"call":[" find_node "," find_node_key "," find_ find_node_key  "]}," Redis Cluster assign_asking_node":{"type":"method","name":"assign_asking_node","children":[],"call":[" find_node ","err_msg split "]}," Redis Cluster assign_redirection_node":{"type":"method","name":"assign_redirection_node","children":[],"call":[" find_node ","@slot put ","slot to_i ","err_msg split ","@slot to_i  put ","slot to_i  to_i "]}," Redis Cluster try_send":{"type":"method","name":"try_send","children":[],"call":[" raise ","node call "," assign_asking_node ","err message ","retry_count <= ","err message start_with? "," assign_redirection_node public_send "," assign_redirection_node ","node public_send "," update_cluster_info! "," assign_asking_node  call "," assign_redirection_node  call "," assign_asking_ assign_asking_node  "," assign_asking_ assign_redirection_node  "," assign_redirection_ assign_asking_node  public_send "," assign_redirection_ assign_redirection_node  public_send "," assign_redirection_ assign_asking_node  "," assign_redirection_ assign_redirection_node  "," assign_asking_node  public_send "," assign_redirection_node  public_send "]}," Redis Cluster send_pubsub_command":{"type":"method","name":"send_pubsub_command","children":[],"call":[" assign_node call "," assign_node ","@node call_all reduce ","@node call_all ","v1 + ","a merge ","(send\n  (send\n    (send\n      (ivar :@node) :call_all\n      (lvar :command)\n      (block-pass\n        (lvar :block))) :reject\n    (block-pass\n      (sym :empty?))) :map) reduce ","Hash  [] ","@node call_all reject map ","@node call_all reject ","@node call_all flatten uniq sort ","@node call_all flatten uniq ","@node call_all flatten ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_script_command":{"type":"method","name":"send_script_command","children":[],"call":[" assign_node call "," assign_node ","@node call_master first ","@node call_master ","@node call_all first ","@node call_all ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_cluster_command":{"type":"method","name":"send_cluster_command","children":[],"call":[" assign_node call "," assign_node ","@node call_all first ","@node call_all "," raise ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_client_command":{"type":"method","name":"send_client_command","children":[],"call":[" assign_node call "," assign_node ","@node call_all first ","@node call_all ","@node call_all flatten ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_memory_command":{"type":"method","name":"send_memory_command","children":[],"call":[" assign_node call "," assign_node ","@node call_all first ","@node call_all ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_config_command":{"type":"method","name":"send_config_command","children":[],"call":[" assign_node call "," assign_node ","@node call_all first ","@node call_all ","command [] to_s downcase ","command [] to_s ","command [] "]}," Redis Cluster send_command":{"type":"method","name":"send_command","children":[],"call":[" try_send "," assign_node "," raise "," send_pubsub_command "," send_script_command "," send_memory_command "," send_cluster_command "," send_client_command "," send_config_command ","@node call_all ","@node call_all sort ","@node call_slave reduce ","@node call_slave ","@node call_slave flatten sort ","@node call_slave flatten ","@node call_master first ","@node call_master ","@node call_all first ","command first to_s downcase ","command first to_s ","command first ","@node call_master reduce "," _scan "," assign_ assign_node  ","@ assign_node  call_all ","@ assign_node  call_all sort ","@ assign_node  call_slave reduce ","@ assign_node  call_slave ","@ assign_node  call_slave flatten sort ","@ assign_node  call_slave flatten ","@ assign_node  call_master first ","@ assign_node  call_master ","@ assign_node  call_all first ","@ assign_node  call_master reduce "]}," Redis Cluster fetch_command_details":{"type":"method","name":"fetch_command_details","children":[],"call":["Command  new ","CommandLoader  load "]}," Redis Cluster fetch_cluster_info!":{"type":"method","name":"fetch_cluster_info!","children":[],"call":["node map ","Slot  new ","option use_replica? ","Node  new ","option per_node_key ","option update_node ","NodeKey  to_node_urls ","option secure? ","available_slots keys ","NodeLoader  load_flags ","SlotLoader  load ","NodeKey  optionize ","available_slots keys map ","Node  new  map ","option per_Node  new _key ","option update_Node  new  ","NodeKey  to_Node  new _urls ","SlotLoader  load  keys ","SlotLoader  load  keys map "]}," Redis Cluster process":{"type":"method","name":"process","children":[],"call":[" try_send "," assign_node ","commands first ","@node process_all ","commands first size == ","commands first size ","(str \"unsubscribe\") include? ","commands first first to_s downcase ","commands first first to_s ","commands first first ","commands size == ","commands size "," assign_ assign_node  ","@ assign_node  process_all "]}," Redis Cluster call_without_timeout":{"type":"method","name":"call_without_timeout","children":[],"call":[" call_with_timeout "]}," Redis Cluster call_with_timeout":{"type":"method","name":"call_with_timeout","children":[],"call":[" try_send "," assign_node "," assign_ assign_node  "]}," Redis Cluster call_pipeline":{"type":"method","name":"call_pipeline","children":[],"call":[" try_send "," find_node ","node_keys first "," raise ","node_keys size > ","node_keys size "," extract_keys_in_pipeline ","(send\n  (send\n    (lvar :pipeline) :commands) :map) reject uniq ","(send\n  (send\n    (lvar :pipeline) :commands) :map) reject ","@command extract_first_key ","pipeline commands map ","pipeline commands ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact uniq ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact "," find_node_key "," find_ find_node  "," find_node _keys first ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact uniq  first "," find_node _keys size > ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact uniq  size > "," find_node _keys size ","(send\n  (send\n    (lvar :pipeline) :commands) :map) compact uniq  size "," find_ find_node _key "]}," Redis Cluster call_loop":{"type":"method","name":"call_loop","children":[],"call":[" try_send "," assign_node "," assign_ assign_node  "]}," Redis Cluster call":{"type":"method","name":"call","children":[],"call":[" send_command "]}," Redis Cluster with_reconnect":{"type":"method","name":"with_reconnect","children":[],"call":[" try_send ","@node sample "]}," Redis Cluster connection_info":{"type":"method","name":"connection_info","children":[],"call":["client location ","client id ","client db ","client port ","client host ","@node sort_by map ","@node sort_by "]}," Redis Cluster disconnect":{"type":"method","name":"disconnect","children":[],"call":["@node each "]}," Redis Cluster connected?":{"type":"method","name":"connected?","children":[],"call":["@node any? "]}," Redis Cluster timeout":{"type":"method","name":"timeout","children":[],"call":["@node first timeout ","@node first "]}," Redis Cluster db=":{"type":"method","name":"db=","children":[],"call":[]}," Redis Cluster db":{"type":"method","name":"db","children":[],"call":[]}," Redis Cluster id":{"type":"method","name":"id","children":[],"call":["@node map sort join ","@node map sort ","@node map "]}," Redis Cluster initialize":{"type":"method","name":"initialize","children":[],"call":[" fetch_command_details "," fetch_cluster_info! ","Option  new "]}," Redis Cluster SlotLoader stringify_node_key":{"type":"method","name":"stringify_node_key","children":[],"call":["NodeKey  build_from_host_port ","ip empty? "]}," Redis Cluster SlotLoader parse_slot_info":{"type":"method","name":"parse_slot_info","children":[],"call":["(send\n  (send\n    (lvar :arr) :[]\n    (irange\n      (int 2)\n      (int -1))) :map) flatten "," stringify_node_key ","arr [] map ","arr [] ","(irange\n  (lvar :first_slot)\n  (lvar :last_slot)) freeze "]}," Redis Cluster SlotLoader fetch_slot_info":{"type":"method","name":"fetch_slot_info","children":[],"call":["(send\n  (send\n    (lvar :node) :call\n    (array\n      (sym :cluster)\n      (sym :slots))) :map) flatten "," parse_slot_info ","node host ","node call map ","node call ","h [] << ","arr [] ","h [] ","(send\n  (send\n    (lvar :node) :call\n    (array\n      (sym :cluster)\n      (sym :slots))) :flat_map) each_with_object ","node call flat_map ","h []= ","Hash  new "]}," Redis Cluster SlotLoader load":{"type":"method","name":"load","children":[],"call":[" raise ","info empty? ","Hash  [] "," fetch_slot_info ","nodes each ","nodes map ","Hash  []  empty? "," fetch_slot_info  empty? "," fetch_slot_Hash  []  "," fetch_slot_ fetch_slot_info  "]}," Redis Cluster Slot assign_node_key":{"type":"method","name":"assign_node_key","children":[],"call":["mappings [] [] add ","mappings [] [] ","mappings [] ","mappings [] []= "," master? ","Set  new "," Set  new "]}," Redis Cluster Slot build_slot_node_key_map":{"type":"method","name":"build_slot_node_key_map","children":[],"call":[" assign_node_key ","slots each ","available_slots each_with_object ","slots_arr each ","by_slot []= ","by_ranges each ","by_ranges [] [] << ","by_ranges [] [] ","by_ranges [] ","by_ranges [] [] include? ! ","by_ranges [] [] include? ","by_ranges [] []= "," master? ","available_slots each "]}," Redis Cluster Slot slave?":{"type":"method","name":"slave?","children":[],"call":["@node_flags [] == ","@node_flags [] "]}," Redis Cluster Slot master?":{"type":"method","name":"master?","children":[],"call":[" slave? ! "," slave? "]}," Redis Cluster Slot replica_disabled?":{"type":"method","name":"replica_disabled?","children":[],"call":["@with_replica ! "]}," Redis Cluster Slot put":{"type":"method","name":"put","children":[],"call":[" assign_node_key ","@map [] [] << ","@map [] [] ","@map [] ","@map [] [] include? ! ","@map [] [] include? ","@map [] []= "," master? ","@map []= ","@map [] dup "]}," Redis Cluster Slot find_node_key_of_slave":{"type":"method","name":"find_node_key_of_slave","children":[],"call":["@map [] [] to_a sample ","@map [] [] to_a ","@map [] [] ","@map [] "," find_node_key_of_master "," replica_disabled? "," exists? ","@map [] [] sample "]}," Redis Cluster Slot find_node_key_of_master":{"type":"method","name":"find_node_key_of_master","children":[],"call":["@map [] [] ","@map [] "," exists? "]}," Redis Cluster Slot exists?":{"type":"method","name":"exists?","children":[],"call":["@map key? "]}," Redis Cluster Slot initialize":{"type":"method","name":"initialize","children":[],"call":[" build_slot_node_key_map "]}," Redis Cluster Option parse_node_hash":{"type":"method","name":"parse_node_hash","children":[],"call":["URI Generic  build ","addr [] to_i ","addr [] "," raise ","addr values_at any? ","addr values_at ","(send\n  (lvar :addr) :map) to_h ","k to_sym ","addr map ","(send\n  (lvar :addr) :map) to_h  [] to_i ","(send\n  (lvar :addr) :map) to_h  [] ","(send\n  (lvar :addr) :map) to_h  values_at any? ","(send\n  (lvar :addr) :map) to_h  values_at ","(send\n  (lvar :(send\n  (lvar :addr) :map) to_h ) :map) to_h ","(send\n  (lvar :addr) :map) to_h  map "]}," Redis Cluster Option parse_node_url":{"type":"method","name":"parse_node_url","children":[],"call":[" raise ","err message ","VALID_SCHEMES  include? ","uri scheme "," URI ","v nil? ","(pair\n  (sym :scheme)\n  (send\n    (lvar :uri) :scheme)) reject ","uri port ","uri host ","uri password ","uri path split [] ","uri path split ","uri path ","v == ","uri user ","URI  decode_www_form_component "," URI  scheme ","(pair\n  (sym :scheme)\n  (send\n    (lvar : URI ) :scheme)) reject "," URI  port "," URI  host "," URI  password ","uri URI  decode_www_form_component  "," URI  path split [] "," URI  path split "," URI  path "," URI  user "]}," Redis Cluster Option parse_node_addr":{"type":"method","name":"parse_node_addr","children":[],"call":[" raise "," parse_node_hash "," parse_node_url "," parse_node_option "]}," Redis Cluster Option build_node_uris":{"type":"method","name":"build_node_uris","children":[],"call":[" parse_node_addr ","addrs map "," raise ","addrs is_a? "]}," Redis Cluster Option add_node":{"type":"method","name":"add_node","children":[],"call":["@node_uris << "," parse_node_hash ","@node_opts << "]}," Redis Cluster Option update_node":{"type":"method","name":"update_node","children":[],"call":[" build_node_uris "," build_node_options "]}," Redis Cluster Option use_replica?":{"type":"method","name":"use_replica?","children":[],"call":[]}," Redis Cluster Option secure?":{"type":"method","name":"secure?","children":[],"call":["@options [] ","uri scheme == ","uri scheme ","@node_uris any? "]}," Redis Cluster Option per_node_key":{"type":"method","name":"per_node_key","children":[],"call":["(send\n  (ivar :@node_uris) :map) to_h ","@options merge ","uri to_s ","NodeKey  build_from_uri ","@node_uris map ","(send\n  (ivar :@node_opts) :map) to_h ","NodeKey  build_from_host_port ","opt [] ","@node_opts map ","options merge ","@fixed_hostname empty? ! ","@fixed_hostname empty? ","@options merge  merge ","@@options merge  merge ","options merge  merge "]}," Redis Cluster Option initialize":{"type":"method","name":"initialize","children":[],"call":["options delete == ","options delete "," build_node_uris ","options dup "," add_common_node_option_if_needed "," build_node_options ","options dup  delete == ","options dup  delete ","options dup  dup "," build_node_options dup  "]}," Redis Cluster NodeLoader fetch_node_info":{"type":"method","name":"fetch_node_info","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :node) :call\n          (array\n            (sym :cluster)\n            (sym :nodes))) :split\n        (str \"\\n\")) :map)\n    (args\n      (arg :str))\n    (send\n      (lvar :str) :split\n      (str \" \"))) :map) to_h ","(send\n  (send\n    (send\n      (lvar :arr) :[]\n      (int 2)) :split\n    (str \",\")) :&\n  (array\n    (str \"master\")\n    (str \"slave\"))) first ","arr [] split & ","arr [] split ","arr [] ","arr [] split first ","(send\n  (send\n    (send\n      (lvar :node) :call\n      (array\n        (sym :cluster)\n        (sym :nodes))) :split\n    (str \"\\n\")) :map) map ","str split ","node call split map ","node call split ","node call "]}," Redis Cluster NodeLoader load_flags":{"type":"method","name":"load_flags","children":[],"call":[" raise ","info empty? "," fetch_node_info ","nodes each ","nodes map "," fetch_node_info  empty? "," fetch_node_ fetch_node_info  "]}," Redis Cluster NodeKey build_from_host_port":{"type":"method","name":"build_from_host_port","children":[],"call":[]}," Redis Cluster NodeKey build_from_uri":{"type":"method","name":"build_from_uri","children":[],"call":["uri port ","uri host "]}," Redis Cluster NodeKey split":{"type":"method","name":"split","children":[],"call":["node_key split "]}," Redis Cluster NodeKey to_node_urls":{"type":"method","name":"to_node_urls","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","k [] to_i ","k [] ","(send\n  (lvar :node_keys) :map) map ","k split ","node_keys map "]}," Redis Cluster Node try_map":{"type":"method","name":"try_map","children":[],"call":[" raise ","errors empty? ","errors []= ","results []= ","reply nil? ","@clients each "]}," Redis Cluster Node build_clients":{"type":"method","name":"build_clients","children":[],"call":["clients compact to_h ","clients compact ","client call "," slave? ","Client  new "," replica_disabled? ","options map ","option merge ","Client  new s compact to_h ","Client  new s compact ","Client  new  call ","option merge s map ","option merge  merge "]}," Redis Cluster Node slave?":{"type":"method","name":"slave?","children":[],"call":["@node_flags [] == ","@node_flags [] "]}," Redis Cluster Node master?":{"type":"method","name":"master?","children":[],"call":[" slave? ! "," slave? "]}," Redis Cluster Node replica_disabled?":{"type":"method","name":"replica_disabled?","children":[],"call":["@with_replica ! "]}," Redis Cluster Node process_all":{"type":"method","name":"process_all","children":[],"call":["(send nil :try_map) values ","client process "," try_map "]}," Redis Cluster Node call_slave":{"type":"method","name":"call_slave","children":[],"call":["(send nil :try_map) values ","client call "," master? "," try_map "," call_master "," replica_disabled? "]}," Redis Cluster Node call_master":{"type":"method","name":"call_master","children":[],"call":["(send nil :try_map) values ","client call "," slave? "," try_map "]}," Redis Cluster Node call_all":{"type":"method","name":"call_all","children":[],"call":["(send nil :try_map) values ","client call "," try_map "]}," Redis Cluster Node find_by":{"type":"method","name":"find_by","children":[],"call":[" raise ","@clients fetch "]}," Redis Cluster Node sample":{"type":"method","name":"sample","children":[],"call":["@clients values sample ","@clients values "]}," Redis Cluster Node each":{"type":"method","name":"each","children":[],"call":["@clients values each ","@clients values "]}," Redis Cluster Node initialize":{"type":"method","name":"initialize","children":[],"call":[" build_clients "]}," Redis Cluster KeySlotConverter convert":{"type":"method","name":"convert","children":[],"call":["crc % ","(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^ ","XMODEM_CRC16_LOOKUP  [] ","(send\n  (begin\n    (send\n      (lvar :crc) :>>\n      (int 8))) :^\n  (lvar :b)) & ","(send\n  (lvar :crc) :>>\n  (int 8)) ^ ","crc >> ","(send\n  (lvar :crc) :<<\n  (int 8)) & ","crc << ","key each_byte ","(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^  % ","(send\n  (begin\n    (send\n      (lvar :(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^ ) :<<\n      (int 8))) :&\n  (int 65535)) ^ ","(send\n  (begin\n    (send\n      (lvar :(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^ ) :>>\n      (int 8))) :^\n  (lvar :b)) & ","(send\n  (lvar :(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^ ) :>>\n  (int 8)) ^ ","(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^  >> ","(send\n  (lvar :(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^ ) :<<\n  (int 8)) & ","(send\n  (begin\n    (send\n      (lvar :crc) :<<\n      (int 8))) :&\n  (int 65535)) ^  << "]}," Redis Cluster CommandLoader fetch_command_details":{"type":"method","name":"fetch_command_details","children":[],"call":["(send\n  (send\n    (lvar :node) :call\n    (array\n      (sym :command))) :map) to_h ","reply [] ","node call map ","node call "]}," Redis Cluster CommandLoader load":{"type":"method","name":"load","children":[],"call":["details empty? "," fetch_command_details ","nodes each "," raise ","nodes map "," fetch_command_details  empty? "," fetch_command_ fetch_command_details  "]}," Redis Cluster Command extract_hash_tag":{"type":"method","name":"extract_hash_tag","children":[],"call":["key [] ","e - ","s + ","e nil? ","s nil? ","key index ","s to_i + ","s to_i ","kkey index y [] ","key index  - ","key index  + ","key index  nil? ","kkey index y indkey index x ","key index  to_i + ","key index  to_i "]}," Redis Cluster Command determine_optional_key_position":{"type":"method","name":"determine_optional_key_position","children":[],"call":["idx + ","idx nil? ","command map map index ","command map map ","command map ","command map map index  + ","command map map index  nil? "]}," Redis Cluster Command determine_first_key_position":{"type":"method","name":"determine_first_key_position","children":[],"call":[" dig_details to_i "," dig_details "," determine_optional_key_position ","command [] to_s casecmp zero? ","command [] to_s casecmp ","command [] to_s ","command [] ","command first to_s downcase ","command first to_s ","command first "]}," Redis Cluster Command dig_details":{"type":"method","name":"dig_details","children":[],"call":["@details fetch fetch ","@details fetch ","@details key? ","command first to_s ","command first "]}," Redis Cluster Command pick_details":{"type":"method","name":"pick_details","children":[],"call":["(send\n  (lvar :details) :map) to_h ","detail [] include? ","detail [] ","details map ","details transform_values "]}," Redis Cluster Command should_send_to_slave?":{"type":"method","name":"should_send_to_slave?","children":[],"call":[" dig_details "]}," Redis Cluster Command should_send_to_master?":{"type":"method","name":"should_send_to_master?","children":[],"call":[" dig_details "]}," Redis Cluster Command extract_first_key":{"type":"method","name":"extract_first_key","children":[],"call":["hash_tag empty? "," extract_hash_tag ","command [] to_s ","command [] ","i == "," determine_first_key_position "," extract_hash_tag  empty? "," extract_ extract_hash_tag  "," determine_first_key_position  == "," determine_first_command [] to_s _position "," determ determine_first_key_position ne_f determine_first_key_position rst_key_pos determine_first_key_position t determine_first_key_position on "]}," Redis Cluster Command initialize":{"type":"method","name":"initialize","children":[],"call":[" pick_details "]}," Redis _xread":{"type":"method","name":"_xread","children":[],"call":["client call_with_timeout ","client timeout to_f + ","blocking_timeout_msec to_f / ","blocking_timeout_msec to_f ","client timeout to_f ","client timeout ","client call ","blocking_timeout_msec nil? "," synchronize ","args concat ","args << ","ids is_a? ","keys is_a? ","client call_without_timeout ","blocking_timeout_msec to_f zero? ","client call_with_client timeout to_f +  ","client client timeout to_f +  to_f + ","blocking_client timeout to_f + _msec to_f / ","blocking_client timeout to_f + _msec to_f ","client client timeout to_f +  to_f ","client client timeout to_f +  ","blocking_client timeout to_f + _msec nil? ","client call_without_client timeout to_f +  ","blocking_client timeout to_f + _msec to_f zero? "]}," Redis xpending":{"type":"method","name":"xpending","children":[],"call":["client call "," synchronize ","args empty? "," raise ","args size + ","args size ","command_args concat "]}," Redis xclaim":{"type":"method","name":"xclaim","children":[],"call":["client call "," synchronize ","opts [] ","args << ","args concat ","opts [] to_i ","(sym :xclaim) concat ","ids flatten ","(sym :xclaim) concat  << ","(sym :xclaim) concat  concat "]}," Redis xack":{"type":"method","name":"xack","children":[],"call":["client call "," synchronize ","(sym :xack) concat ","ids flatten "]}," Redis xreadgroup":{"type":"method","name":"xreadgroup","children":[],"call":[" _xread ","opts [] ","args << ","args << << ","opts [] to_i ","block to_i "]}," Redis xgroup":{"type":"method","name":"xgroup","children":[],"call":["client call "," synchronize ","(sym :xgroup) compact "]}," Redis xread":{"type":"method","name":"xread","children":[],"call":[" _xread ","args << << ","block to_i ","args << "]}," Redis xlen":{"type":"method","name":"xlen","children":[],"call":["client call "," synchronize "]}," Redis xrevrange":{"type":"method","name":"xrevrange","children":[],"call":["client call "," synchronize ","args concat "]}," Redis xrange":{"type":"method","name":"xrange","children":[],"call":["client call "," synchronize ","args concat "]}," Redis xdel":{"type":"method","name":"xdel","children":[],"call":["client call "," synchronize ","(sym :xdel) concat ","ids flatten "]}," Redis xtrim":{"type":"method","name":"xtrim","children":[],"call":["client call "," synchronize ","(sym :xtrim) compact "]}," Redis xadd":{"type":"method","name":"xadd","children":[],"call":["client call "," synchronize ","args concat ","entry to_a flatten ","entry to_a ","args << ","opts [] ","(str \"MAXLEN\") compact "]}," Redis xinfo":{"type":"method","name":"xinfo","children":[],"call":["Hashify  call ","reply map ","subcommand to_s downcase ","subcommand to_s ","client call "," synchronize ","(sym :xinfo) compact "]}," Redis bzpopmin":{"type":"method","name":"bzpopmin","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis bzpopmax":{"type":"method","name":"bzpopmax","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis zpopmin":{"type":"method","name":"zpopmin","children":[],"call":["members first ","count to_i > ","count to_i ","client call ","(sym :zpopmin) compact "," synchronize ","client call  first "]}," Redis zpopmax":{"type":"method","name":"zpopmax","children":[],"call":["members first ","count to_i > ","count to_i ","client call ","(sym :zpopmax) compact "," synchronize ","client call  first "]}," Redis Pipeline Multi timeouts":{"type":"method","name":"timeouts","children":[],"call":[" empty? "]}," Redis Pipeline timeouts":{"type":"method","name":"timeouts","children":[],"call":["@futures map "]}," Redis Pipeline call_with_timeout":{"type":"method","name":"call_with_timeout","children":[],"call":[" call "]}," Redis Pipeline timeout":{"type":"method","name":"timeout","children":[],"call":[" client timeout "," client "]}," Redis Connection Ruby set_tcp_nodelay":{"type":"method","name":"set_tcp_nodelay","children":[],"call":["@sock setsockopt "]}," Redis Future ==":{"type":"method","name":"==","children":[],"call":["$stderr puts "," Warning  warn ","message << "," Kernel  caller first "," Kernel  caller ","The methods == and != are deprecated for Redis::Future and will be removed in 4.2.0 +@ "," Kernel  warn "," Redis  deprecate! ","The methods == and != are deprecated for Redis::Future and will be removed in 5.0.0 +@ ","The methods == and != are deprecated for Redis::Future and will be removed in 4.2.0 +@  << ","The methods == and != are deprecated for Redis::Future and will be removed in 5.0.0 +@  << "]}," Redis Cluster Option add_common_node_option_if_needed":{"type":"method","name":"add_common_node_option_if_needed","children":[],"call":["node_opts first [] ","node_opts first ","options [] ","node_opts first [] nil? ","options [] nil? "]}," Redis Cluster Option parse_node_option":{"type":"method","name":"parse_node_option","children":[],"call":[" raise ","addr values_at any? ","addr values_at ","(send\n  (lvar :addr) :map) to_h ","k to_sym ","addr map ","(send\n  (lvar :addr) :map) to_h  values_at any? ","(send\n  (lvar :addr) :map) to_h  values_at ","(send\n  (lvar :(send\n  (lvar :addr) :map) to_h ) :map) to_h ","(send\n  (lvar :addr) :map) to_h  map "]}," Redis Cluster Option build_node_options":{"type":"method","name":"build_node_options","children":[],"call":[" parse_node_addr ","addrs map "," raise ","addrs is_a? "]}," Redis Cluster NodeKey optionize":{"type":"method","name":"optionize","children":[],"call":[" split "]}," Redis exists?":{"type":"method","name":"exists?","children":[],"call":["client call "," synchronize ","value > "]}," Redis _exists":{"type":"method","name":"_exists","children":[],"call":["client call "," synchronize "]}," Redis Distributed exists?":{"type":"method","name":"exists?","children":[],"call":["node exists? ","keys_per_node each "," node_for ","args group_by ","args flatten! "]}," Redis exists_returns_integer=":{"type":"method","name":"exists_returns_integer=","children":[],"call":[" Kernel  warn "," deprecate! "]}," Redis Connection SSLSocket wait_writable":{"type":"method","name":"wait_writable","children":[],"call":[" to_io wait_writable "," to_io "]}," Redis Connection SSLSocket wait_readable":{"type":"method","name":"wait_readable","children":[],"call":[" to_io wait_readable "," to_io "]}," Redis Client username":{"type":"method","name":"username","children":[],"call":["@options [] "," config username "," config "]}," Redis xautoclaim":{"type":"method","name":"xautoclaim","children":[],"call":["client call "," synchronize ","args << ","args << << ","count to_s "]}," Redis _normalize_move_wheres":{"type":"method","name":"_normalize_move_wheres","children":[],"call":[" raise ","where_destination != ","where_source != ","where_destination to_s upcase ","where_destination to_s ","where_source to_s upcase ","where_source to_s ","where_destination to_s upcase  != ","where_source to_s upcase  != ","where_destination to_s upcase  to_s upcase ","where_destination to_s upcase  to_s ","where_source to_s upcase  to_s upcase ","where_source to_s upcase  to_s "]}," Redis zrandmember":{"type":"method","name":"zrandmember","children":[],"call":["client call "," synchronize ","args << "," raise ","count nil? "]}," Redis zmscore":{"type":"method","name":"zmscore","children":[],"call":["reply map ","client call "," synchronize "]}," Redis smismember":{"type":"method","name":"smismember","children":[],"call":["reply map ","client call "," synchronize "]}," Redis blmove":{"type":"method","name":"blmove","children":[],"call":["client call_with_timeout ","client timeout ","timeout > "," synchronize "," _normalize_move_wheres "]}," Redis lmove":{"type":"method","name":"lmove","children":[],"call":["client call "," synchronize "," _normalize_move_wheres "]}," Redis getex":{"type":"method","name":"getex","children":[],"call":["client call "," synchronize ","args << ","args << << "]}," Redis getdel":{"type":"method","name":"getdel","children":[],"call":["client call "," synchronize "]}," Redis Distributed zmscore":{"type":"method","name":"zmscore","children":[],"call":[" node_for zmscore "," node_for "]}," Redis Distributed zrandmember":{"type":"method","name":"zrandmember","children":[],"call":[" node_for zrandmember "," node_for "]}," Redis Distributed smismember":{"type":"method","name":"smismember","children":[],"call":[" node_for smismember "," node_for "]}," Redis Distributed blmove":{"type":"method","name":"blmove","children":[],"call":["node blmove "," ensure_same_node "]}," Redis Distributed lmove":{"type":"method","name":"lmove","children":[],"call":["node lmove "," ensure_same_node "]}," Redis Distributed getex":{"type":"method","name":"getex","children":[],"call":[" node_for getex "," node_for "]}," Redis Distributed getdel":{"type":"method","name":"getdel","children":[],"call":[" node_for getdel "," node_for "]}," Redis send_blocking_command":{"type":"method","name":"send_blocking_command","children":[],"call":["@client call_with_timeout ","@monitor synchronize ","@client blocking_call_v "]}," Redis send_command":{"type":"method","name":"send_command","children":[],"call":["@client call ","@monitor synchronize ","@client call_v ","Client  translate_error! "]}," Redis deprecate!":{"type":"method","name":"deprecate!","children":[],"call":[" Kernel  warn "," raise "," raise_deprecations "," silence_deprecations "]}," Redis DeprecatedMulti __getobj__":{"type":"method","name":"__getobj__","children":[],"call":["Pipeline  deprecation_warning ","Kernel  caller_locations "]}," Redis DeprecatedMulti initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis DeprecatedPipeline __getobj__":{"type":"method","name":"__getobj__","children":[],"call":["Pipeline  deprecation_warning ","Kernel  caller_locations "]}," Redis DeprecatedPipeline initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Pipeline deprecation_warning":{"type":"method","name":"deprecation_warning","children":[],"call":[" Redis  deprecate! ","caller_locations last ","l path start_with? ! ","l path start_with? ","l path ","caller_locations find "]}," Redis PipelinedConnection send_blocking_command":{"type":"method","name":"send_blocking_command","children":[],"call":["@pipeline call_with_timeout ","@futures << ","future _set ","@pipeline blocking_call_v ","Future  new ","@Future  new s << ","Future  new  _set "]}," Redis PipelinedConnection send_command":{"type":"method","name":"send_command","children":[],"call":["@pipeline call ","@futures << ","future _set ","@pipeline call_v ","Future  new ","@Future  new s << ","Future  new  _set "]}," Redis PipelinedConnection synchronize":{"type":"method","name":"synchronize","children":[],"call":[]}," Redis PipelinedConnection pipelined":{"type":"method","name":"pipelined","children":[],"call":[]}," Redis PipelinedConnection db=":{"type":"method","name":"db=","children":[],"call":["@pipeline db= "]}," Redis PipelinedConnection db":{"type":"method","name":"db","children":[],"call":["@pipeline db "]}," Redis PipelinedConnection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Distributed hrandfield":{"type":"method","name":"hrandfield","children":[],"call":[" node_for hrandfield "," node_for "]}," Redis Distributed zdiffstore":{"type":"method","name":"zdiffstore","children":[],"call":["node zdiffstore "," ensure_same_node ","(lvar :destination) + ","keys flatten! "]}," Redis Distributed zdiff":{"type":"method","name":"zdiff","children":[],"call":["node zdiff "," ensure_same_node ","keys flatten! "]}," Redis Distributed zrangestore":{"type":"method","name":"zrangestore","children":[],"call":["node zrangestore "," ensure_same_node "]}," Redis Distributed copy":{"type":"method","name":"copy","children":[],"call":["node copy "," ensure_same_node "]}," Redis Commands method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send_command "]}," Redis Commands sentinel":{"type":"method","name":"sentinel","children":[],"call":["Hashify  call ","reply map ","reply [] is_a? ","reply [] ","reply is_a? "," send_command ","(sym :sentinel) + ","subcommand to_s downcase ","subcommand to_s ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis Commands call":{"type":"method","name":"call","children":[],"call":[" send_command "]}," Redis Commands Transactions discard":{"type":"method","name":"discard","children":[],"call":[" send_command "]}," Redis Commands Transactions exec":{"type":"method","name":"exec","children":[],"call":[" send_command "]}," Redis Commands Transactions unwatch":{"type":"method","name":"unwatch","children":[],"call":[" send_command "]}," Redis Commands Transactions watch":{"type":"method","name":"watch","children":[],"call":[" raise "," unwatch "," block_given? ","client call "," synchronize ","client call_v ","(sym :watch) + "]}," Redis Commands Strings strlen":{"type":"method","name":"strlen","children":[],"call":[" send_command "]}," Redis Commands Strings getex":{"type":"method","name":"getex","children":[],"call":[" send_command ","args << ","args << << "," Integer "]}," Redis Commands Strings getdel":{"type":"method","name":"getdel","children":[],"call":[" send_command "]}," Redis Commands Strings getset":{"type":"method","name":"getset","children":[],"call":[" send_command ","value to_s "]}," Redis Commands Strings append":{"type":"method","name":"append","children":[],"call":[" send_command "]}," Redis Commands Strings getrange":{"type":"method","name":"getrange","children":[],"call":[" send_command "," Integer "]}," Redis Commands Strings setrange":{"type":"method","name":"setrange","children":[],"call":[" send_command ","value to_s "," Integer "]}," Redis Commands Strings mapped_mget":{"type":"method","name":"mapped_mget","children":[],"call":["Hash  [] ","keys zip ","reply is_a? "," mget "]}," Redis Commands Strings mget":{"type":"method","name":"mget","children":[],"call":[" send_command ","keys flatten! "]}," Redis Commands Strings get":{"type":"method","name":"get","children":[],"call":[" send_command "]}," Redis Commands Strings mapped_msetnx":{"type":"method","name":"mapped_msetnx","children":[],"call":[" msetnx ","hash to_a flatten ","hash to_a ","hash flatten "]}," Redis Commands Strings msetnx":{"type":"method","name":"msetnx","children":[],"call":[" send_command "]}," Redis Commands Strings mapped_mset":{"type":"method","name":"mapped_mset","children":[],"call":[" mset ","hash to_a flatten ","hash to_a ","hash flatten "]}," Redis Commands Strings mset":{"type":"method","name":"mset","children":[],"call":[" send_command ","(sym :mset) + "]}," Redis Commands Strings setnx":{"type":"method","name":"setnx","children":[],"call":[" send_command ","value to_s "]}," Redis Commands Strings psetex":{"type":"method","name":"psetex","children":[],"call":[" send_command ","value to_s "," Integer "]}," Redis Commands Strings setex":{"type":"method","name":"setex","children":[],"call":[" send_command ","value to_s "," Integer "]}," Redis Commands Strings set":{"type":"method","name":"set","children":[],"call":[" send_command ","args << ","args << << ","value to_s "," Integer "]}," Redis Commands Strings incrbyfloat":{"type":"method","name":"incrbyfloat","children":[],"call":[" send_command "," Float "]}," Redis Commands Strings incrby":{"type":"method","name":"incrby","children":[],"call":[" send_command "," Integer "]}," Redis Commands Strings incr":{"type":"method","name":"incr","children":[],"call":[" send_command "]}," Redis Commands Strings decrby":{"type":"method","name":"decrby","children":[],"call":[" send_command "," Integer "]}," Redis Commands Strings decr":{"type":"method","name":"decr","children":[],"call":[" send_command "]}," Redis Commands Streams _xread":{"type":"method","name":"_xread","children":[],"call":[" send_blocking_command ","blocking_timeout_msec to_f / ","blocking_timeout_msec to_f ","blocking_timeout_msec to_f zero? "," send_command ","blocking_timeout_msec nil? ","args concat ","args << ","ids is_a? ","keys is_a? "]}," Redis Commands Streams xpending":{"type":"method","name":"xpending","children":[],"call":[" send_command ","args empty? "," raise ","args size + ","args size ","command_args concat ","command_args << << "," Integer ","command_args << "]}," Redis Commands Streams xautoclaim":{"type":"method","name":"xautoclaim","children":[],"call":[" send_command ","args << ","args << << ","count to_s "]}," Redis Commands Streams xclaim":{"type":"method","name":"xclaim","children":[],"call":[" send_command ","opts [] ","args << ","args concat ","opts [] to_i ","(sym :xclaim) concat ","ids flatten ","(sym :xclaim) concat  << ","(sym :xclaim) concat  concat "]}," Redis Commands Streams xack":{"type":"method","name":"xack","children":[],"call":[" send_command ","(sym :xack) concat ","ids flatten "]}," Redis Commands Streams xreadgroup":{"type":"method","name":"xreadgroup","children":[],"call":[" _xread ","args << ","args << << ","block to_i "]}," Redis Commands Streams xgroup":{"type":"method","name":"xgroup","children":[],"call":[" send_command ","(sym :xgroup) compact "]}," Redis Commands Streams xread":{"type":"method","name":"xread","children":[],"call":[" _xread ","args << << ","block to_i ","args << "]}," Redis Commands Streams xlen":{"type":"method","name":"xlen","children":[],"call":[" send_command "]}," Redis Commands Streams xrevrange":{"type":"method","name":"xrevrange","children":[],"call":[" send_command ","args concat "]}," Redis Commands Streams xrange":{"type":"method","name":"xrange","children":[],"call":["client call "," synchronize ","args concat "," send_command "]}," Redis Commands Streams xdel":{"type":"method","name":"xdel","children":[],"call":[" send_command ","(sym :xdel) concat ","ids flatten "]}," Redis Commands Streams xtrim":{"type":"method","name":"xtrim","children":[],"call":[" send_command ","(sym :xtrim) compact ","args concat ","args << ","strategy to_s upcase ","strategy to_s ","(sym :xtrim) compact  concat ","(sym :xtrim) compact  << ","strategy to_s upcase  to_s upcase ","strategy to_s upcase  to_s "]}," Redis Commands Streams xadd":{"type":"method","name":"xadd","children":[],"call":[" send_command ","args concat ","entry to_a flatten ","entry to_a ","args << ","entry flatten "]}," Redis Commands Streams xinfo":{"type":"method","name":"xinfo","children":[],"call":["Hashify  call ","reply map ","subcommand to_s downcase ","subcommand to_s ","client call "," synchronize ","(sym :xinfo) compact "," send_command ","r map "," proc "]}," Redis Commands SortedSets _zsets_operation_store":{"type":"method","name":"_zsets_operation_store","children":[],"call":[" send_command ","command << << ","command << ","command concat ","keys size ","(lvar :cmd) concat ","keys flatten! "," send_(lvar :cmd) concat  ","(lvar :cmd) concat  << << ","(lvar :cmd) concat  << ","(lvar :cmd) concat  concat "]}," Redis Commands SortedSets _zsets_operation":{"type":"method","name":"_zsets_operation","children":[],"call":[" send_command ","command << ","command << << ","command concat ","keys size ","(lvar :cmd) concat ","keys flatten! "," send_(lvar :cmd) concat  ","(lvar :cmd) concat  << ","(lvar :cmd) concat  << << ","(lvar :cmd) concat  concat "]}," Redis Commands SortedSets zscan_each":{"type":"method","name":"zscan_each","children":[],"call":["cursor == ","values each "," zscan "," loop "," to_enum "," block_given? "]}," Redis Commands SortedSets zscan":{"type":"method","name":"zscan","children":[],"call":["FloatifyPairs  call ","reply [] "," _scan "]}," Redis Commands SortedSets zdiffstore":{"type":"method","name":"zdiffstore","children":[],"call":[" _zsets_operation_store "]}," Redis Commands SortedSets zdiff":{"type":"method","name":"zdiff","children":[],"call":[" _zsets_operation "]}," Redis Commands SortedSets zunionstore":{"type":"method","name":"zunionstore","children":[],"call":[" _zsets_operation_store "]}," Redis Commands SortedSets zunion":{"type":"method","name":"zunion","children":[],"call":[" _zsets_operation "]}," Redis Commands SortedSets zinterstore":{"type":"method","name":"zinterstore","children":[],"call":[" _zsets_operation_store "]}," Redis Commands SortedSets zinter":{"type":"method","name":"zinter","children":[],"call":[" _zsets_operation "]}," Redis Commands SortedSets zcount":{"type":"method","name":"zcount","children":[],"call":[" send_command "]}," Redis Commands SortedSets zremrangebyscore":{"type":"method","name":"zremrangebyscore","children":[],"call":[" send_command "]}," Redis Commands SortedSets zrevrangebyscore":{"type":"method","name":"zrevrangebyscore","children":[],"call":[" send_command ","args concat ","args << "," Integer ","limit map "]}," Redis Commands SortedSets zrangebyscore":{"type":"method","name":"zrangebyscore","children":[],"call":[" send_command ","args concat ","args << "," Integer ","limit map "]}," Redis Commands SortedSets zrevrangebylex":{"type":"method","name":"zrevrangebylex","children":[],"call":[" send_command ","args concat ","args << "," Integer ","limit map "]}," Redis Commands SortedSets zrangebylex":{"type":"method","name":"zrangebylex","children":[],"call":[" send_command ","args concat ","args << "," Integer ","limit map "]}," Redis Commands SortedSets zlexcount":{"type":"method","name":"zlexcount","children":[],"call":[" send_command "]}," Redis Commands SortedSets zremrangebyrank":{"type":"method","name":"zremrangebyrank","children":[],"call":[" send_command "]}," Redis Commands SortedSets zrevrank":{"type":"method","name":"zrevrank","children":[],"call":[" send_command "]}," Redis Commands SortedSets zrank":{"type":"method","name":"zrank","children":[],"call":[" send_command "]}," Redis Commands SortedSets zrevrange":{"type":"method","name":"zrevrange","children":[],"call":[" send_command ","args << "," Integer "]}," Redis Commands SortedSets zrangestore":{"type":"method","name":"zrangestore","children":[],"call":[" send_command ","args concat ","args << "," raise "," Integer ","limit map "]}," Redis Commands SortedSets zrange":{"type":"method","name":"zrange","children":[],"call":[" send_command ","args << ","args concat "," raise "," Integer ","limit map "]}," Redis Commands SortedSets zrandmember":{"type":"method","name":"zrandmember","children":[],"call":[" send_command ","args << "," raise ","count nil? "," Integer "]}," Redis Commands SortedSets zmscore":{"type":"method","name":"zmscore","children":[],"call":["reply map "," send_command "]}," Redis Commands SortedSets zscore":{"type":"method","name":"zscore","children":[],"call":[" send_command "]}," Redis Commands SortedSets bzpopmin":{"type":"method","name":"bzpopmin","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis Commands SortedSets bzpopmax":{"type":"method","name":"bzpopmax","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis Commands SortedSets zpopmin":{"type":"method","name":"zpopmin","children":[],"call":["members first ","count to_i > ","count to_i ","FloatifyPairs  call "," send_command ","(sym :zpopmin) compact ","command << "," Integer ","FloatifyPairs  call  first "]}," Redis Commands SortedSets zpopmax":{"type":"method","name":"zpopmax","children":[],"call":["members first ","count to_i > ","count to_i ","FloatifyPairs  call "," send_command ","(sym :zpopmax) compact ","command << "," Integer ","FloatifyPairs  call  first "]}," Redis Commands SortedSets zrem":{"type":"method","name":"zrem","children":[],"call":["Boolify  call ","member is_a? "," send_command ","members_to_remove empty? "]}," Redis Commands SortedSets zincrby":{"type":"method","name":"zincrby","children":[],"call":[" send_command "]}," Redis Commands SortedSets zadd":{"type":"method","name":"zadd","children":[],"call":[" raise "," send_command ","command + ","args size == ","args size ","args [] ","args [] is_a? ","command << ","members_to_add empty? ","args []  empty? "]}," Redis Commands SortedSets zcard":{"type":"method","name":"zcard","children":[],"call":[" send_command "]}," Redis Commands Sets sscan_each":{"type":"method","name":"sscan_each","children":[],"call":["cursor == ","keys each "," sscan "," loop "," to_enum "," block_given? "]}," Redis Commands Sets sscan":{"type":"method","name":"sscan","children":[],"call":[" _scan "]}," Redis Commands Sets sunionstore":{"type":"method","name":"sunionstore","children":[],"call":[" send_command ","(sym :sunionstore) concat ","keys flatten! "]}," Redis Commands Sets sunion":{"type":"method","name":"sunion","children":[],"call":[" send_command ","(sym :sunion) concat ","keys flatten! "]}," Redis Commands Sets sinterstore":{"type":"method","name":"sinterstore","children":[],"call":[" send_command ","(sym :sinterstore) concat ","keys flatten! "]}," Redis Commands Sets sinter":{"type":"method","name":"sinter","children":[],"call":[" send_command ","(sym :sinter) concat ","keys flatten! "]}," Redis Commands Sets sdiffstore":{"type":"method","name":"sdiffstore","children":[],"call":[" send_command ","(sym :sdiffstore) concat ","keys flatten! "]}," Redis Commands Sets sdiff":{"type":"method","name":"sdiff","children":[],"call":[" send_command ","(sym :sdiff) concat ","keys flatten! "]}," Redis Commands Sets smembers":{"type":"method","name":"smembers","children":[],"call":[" send_command "]}," Redis Commands Sets smismember":{"type":"method","name":"smismember","children":[],"call":["reply map "," send_command ","(sym :smismember) concat ","members flatten! "]}," Redis Commands Sets sismember":{"type":"method","name":"sismember","children":[],"call":[" send_command "]}," Redis Commands Sets smove":{"type":"method","name":"smove","children":[],"call":[" send_command "]}," Redis Commands Sets srandmember":{"type":"method","name":"srandmember","children":[],"call":[" send_command ","count nil? "]}," Redis Commands Sets spop":{"type":"method","name":"spop","children":[],"call":[" send_command ","count nil? "," Integer "]}," Redis Commands Sets srem":{"type":"method","name":"srem","children":[],"call":["Boolify  call ","member is_a? "," send_command "," Redis  deprecate! "," caller first "," caller ","member is_a? ! ","Redis  sadd_returns_boolean ","(sym :srem) concat ","members flatten! "]}," Redis Commands Sets sadd":{"type":"method","name":"sadd","children":[],"call":["Boolify  call ","member is_a? "," send_command "," Redis  deprecate! "," caller first "," caller ","member is_a? ! ","Redis  sadd_returns_boolean ","(sym :sadd) concat ","members flatten! "]}," Redis Commands Sets scard":{"type":"method","name":"scard","children":[],"call":[" send_command "]}," Redis Commands Server debug":{"type":"method","name":"debug","children":[],"call":[" send_command ","(sym :debug) + "]}," Redis Commands Server time":{"type":"method","name":"time","children":[],"call":[" send_command "]}," Redis Commands Server sync":{"type":"method","name":"sync","children":[],"call":[" send_command "]}," Redis Commands Server slowlog":{"type":"method","name":"slowlog","children":[],"call":["client call ","args << "," synchronize "," send_command "," Integer "]}," Redis Commands Server slaveof":{"type":"method","name":"slaveof","children":[],"call":[" send_command "]}," Redis Commands Server shutdown":{"type":"method","name":"shutdown","children":[],"call":["client call ","client with_reconnect "," synchronize ","client call_v ","client disable_reconnection "]}," Redis Commands Server save":{"type":"method","name":"save","children":[],"call":[" send_command "]}," Redis Commands Server monitor":{"type":"method","name":"monitor","children":[],"call":["client call_loop "," synchronize ","client next_event "," loop ","client call_v ","client pubsub ","client pubsub  call_loop ","client pubsub  next_event ","client pubsub  call_v ","client pubsub  pubsub "]}," Redis Commands Server lastsave":{"type":"method","name":"lastsave","children":[],"call":[" send_command "]}," Redis Commands Server info":{"type":"method","name":"info","children":[],"call":["Hash  [] ","k [] ","e split ","v split map ","v split ","reply map ","cmd to_s == ","cmd to_s ","HashifyInfo  call ","reply is_a? "," send_command ","(sym :info) compact ","Hash  []  map ","HashifyInfo  call  map ","Hash  []  is_a? ","HashifyInfo  call  is_a? "]}," Redis Commands Server flushdb":{"type":"method","name":"flushdb","children":[],"call":[" send_command ","options [] "]}," Redis Commands Server flushall":{"type":"method","name":"flushall","children":[],"call":[" send_command ","options [] "]}," Redis Commands Server dbsize":{"type":"method","name":"dbsize","children":[],"call":[" send_command "]}," Redis Commands Server client":{"type":"method","name":"client","children":[],"call":["Hash  [] ","entries each_slice to_a ","entries each_slice ","line chomp split ","line chomp ","reply lines map ","reply lines ","subcommand to_s == ","subcommand to_s "," send_command ","(sym :client) + ","line chomp split  each_slice to_a ","line chomp split  each_slice "]}," Redis Commands Server config":{"type":"method","name":"config","children":[],"call":["Hashify  call ","action == ","reply is_a? "," send_command ","(sym :config) + "]}," Redis Commands Server bgsave":{"type":"method","name":"bgsave","children":[],"call":[" send_command "]}," Redis Commands Server bgrewriteaof":{"type":"method","name":"bgrewriteaof","children":[],"call":[" send_command "]}," Redis Commands Scripting _eval":{"type":"method","name":"_eval","children":[],"call":[" send_command ","(lvar :cmd) + + ","(lvar :cmd) + ","keys length ","options [] ","args shift ","args pop ","args last is_a? ","args last ","args pop  [] "]}," Redis Commands Scripting evalsha":{"type":"method","name":"evalsha","children":[],"call":[" _eval "]}," Redis Commands Scripting eval":{"type":"method","name":"eval","children":[],"call":[" _eval "]}," Redis Commands Scripting script":{"type":"method","name":"script","children":[],"call":[" send_command ","(sym :script) + ","reply first ","arg is_a? ","Boolify  call ","reply map ","args first ","subcommand == ","subcommand to_s downcase ","subcommand to_s ","args first  is_a? ","args first s first ","subcommand to_s downcase  == ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis Commands Pubsub pubsub":{"type":"method","name":"pubsub","children":[],"call":[" send_command ","(sym :pubsub) + "]}," Redis Commands Pubsub punsubscribe":{"type":"method","name":"punsubscribe","children":[],"call":["client punsubscribe "," raise "," subscribed? "," synchronize "," _subscription "]}," Redis Commands Pubsub psubscribe_with_timeout":{"type":"method","name":"psubscribe_with_timeout","children":[],"call":[" _subscription "," synchronize "]}," Redis Commands Pubsub psubscribe":{"type":"method","name":"psubscribe","children":[],"call":[" _subscription "," synchronize "]}," Redis Commands Pubsub unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["client unsubscribe "," raise "," subscribed? "," synchronize "," _subscription "]}," Redis Commands Pubsub subscribe_with_timeout":{"type":"method","name":"subscribe_with_timeout","children":[],"call":[" _subscription "," synchronize "]}," Redis Commands Pubsub subscribe":{"type":"method","name":"subscribe","children":[],"call":[" _subscription "," synchronize "]}," Redis Commands Pubsub subscribed?":{"type":"method","name":"subscribed?","children":[],"call":["client is_a? "," synchronize ","@subscription_client nil? ! ","@subscription_client nil? "]}," Redis Commands Pubsub publish":{"type":"method","name":"publish","children":[],"call":[" send_command "]}," Redis Commands Lists _normalize_move_wheres":{"type":"method","name":"_normalize_move_wheres","children":[],"call":[" raise ","where_destination != ","where_source != ","where_destination to_s upcase ","where_destination to_s ","where_source to_s upcase ","where_source to_s ","where_destination to_s upcase  != ","where_source to_s upcase  != ","where_destination to_s upcase  to_s upcase ","where_destination to_s upcase  to_s ","where_source to_s upcase  to_s upcase ","where_source to_s upcase  to_s "]}," Redis Commands Lists _bpop":{"type":"method","name":"_bpop","children":[],"call":[" send_blocking_command ","args flatten ","args size > ","args size ","args pop to_int ","args pop ","args last respond_to? ","args last ","options [] ","args last is_a? ","last_arg to_int "," Redis  deprecate! "," caller first "," caller ","args map join ","args map ","command << ","(lvar :cmd) concat ","args flatten! "," raise ","timeout class ","timeout is_a? "," send_blocking_(lvar :cmd) concat  ","args pop  [] ","args pop  to_int ","(lvar :cmd) concat  << "]}," Redis Commands Lists ltrim":{"type":"method","name":"ltrim","children":[],"call":[" send_command "," Integer "]}," Redis Commands Lists lset":{"type":"method","name":"lset","children":[],"call":[" send_command "," Integer "]}," Redis Commands Lists lrem":{"type":"method","name":"lrem","children":[],"call":[" send_command "," Integer "]}," Redis Commands Lists lrange":{"type":"method","name":"lrange","children":[],"call":[" send_command "," Integer "]}," Redis Commands Lists linsert":{"type":"method","name":"linsert","children":[],"call":[" send_command "]}," Redis Commands Lists lindex":{"type":"method","name":"lindex","children":[],"call":[" send_command "," Integer "]}," Redis Commands Lists brpoplpush":{"type":"method","name":"brpoplpush","children":[],"call":[" send_blocking_command "]}," Redis Commands Lists brpop":{"type":"method","name":"brpop","children":[],"call":[" _bpop "]}," Redis Commands Lists blpop":{"type":"method","name":"blpop","children":[],"call":[" _bpop "]}," Redis Commands Lists rpoplpush":{"type":"method","name":"rpoplpush","children":[],"call":[" send_command "]}," Redis Commands Lists rpop":{"type":"method","name":"rpop","children":[],"call":[" send_command ","command << "," Integer "]}," Redis Commands Lists lpop":{"type":"method","name":"lpop","children":[],"call":[" send_command ","command << "," Integer "]}," Redis Commands Lists rpushx":{"type":"method","name":"rpushx","children":[],"call":[" send_command "]}," Redis Commands Lists rpush":{"type":"method","name":"rpush","children":[],"call":[" send_command "]}," Redis Commands Lists lpushx":{"type":"method","name":"lpushx","children":[],"call":[" send_command "]}," Redis Commands Lists lpush":{"type":"method","name":"lpush","children":[],"call":[" send_command "]}," Redis Commands Lists blmove":{"type":"method","name":"blmove","children":[],"call":[" send_blocking_command "," _normalize_move_wheres "]}," Redis Commands Lists lmove":{"type":"method","name":"lmove","children":[],"call":[" send_command "," _normalize_move_wheres "]}," Redis Commands Lists llen":{"type":"method","name":"llen","children":[],"call":[" send_command "]}," Redis Commands Keys _scan":{"type":"method","name":"_scan","children":[],"call":[" send_command ","(lvar :command) + ","args << << ","args << "," Integer "]}," Redis Commands Keys type":{"type":"method","name":"type","children":[],"call":[" send_command "]}," Redis Commands Keys sort":{"type":"method","name":"sort","children":[],"call":["reply each_slice to_a ","reply each_slice ","get size ","store ! ","get size > "," send_command ","args << << ","args << ","args concat ","order split ","get each "," Array "," Array  size "," Array  size > "," Array  each "]}," Redis Commands Keys renamenx":{"type":"method","name":"renamenx","children":[],"call":[" send_command "]}," Redis Commands Keys rename":{"type":"method","name":"rename","children":[],"call":[" send_command "]}," Redis Commands Keys randomkey":{"type":"method","name":"randomkey","children":[],"call":[" send_command "]}," Redis Commands Keys object":{"type":"method","name":"object","children":[],"call":[" send_command ","(sym :object) + "]}," Redis Commands Keys copy":{"type":"method","name":"copy","children":[],"call":[" send_command ","command << ","command << << "]}," Redis Commands Keys move":{"type":"method","name":"move","children":[],"call":[" send_command "]}," Redis Commands Keys keys":{"type":"method","name":"keys","children":[],"call":["reply split ","reply is_a? "," send_command "]}," Redis Commands Keys exists?":{"type":"method","name":"exists?","children":[],"call":["value > "," send_command "]}," Redis Commands Keys _exists":{"type":"method","name":"_exists","children":[],"call":[" send_command "]}," Redis Commands Keys exists":{"type":"method","name":"exists","children":[],"call":[" _exists "," exists? "," Redis  deprecate! "," Kernel  caller first "," Kernel  caller ","Redis  exists_returns_integer nil? ","Redis  exists_returns_integer ","keys size == ","keys size ","Redis  exists_returns_integer ! "," send_command "]}," Redis Commands Keys unlink":{"type":"method","name":"unlink","children":[],"call":[" send_command ","(sym :unlink) + "]}," Redis Commands Keys del":{"type":"method","name":"del","children":[],"call":[" send_command ","(sym :del) + ","keys empty? ","keys flatten! "]}," Redis Commands Keys migrate":{"type":"method","name":"migrate","children":[],"call":[" send_command ","key is_a? ","args << ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :timeout))\n  (send\n    (ivar :@client) :timeout)) to_i ","@client timeout ","(or\n  (send\n    (lvar :options) :[]\n    (sym :db))\n  (send\n    (ivar :@client) :db)) to_i ","@client db "," raise "]}," Redis Commands Keys restore":{"type":"method","name":"restore","children":[],"call":[" send_command ","args << "]}," Redis Commands Keys dump":{"type":"method","name":"dump","children":[],"call":[" send_command "]}," Redis Commands Keys pttl":{"type":"method","name":"pttl","children":[],"call":[" send_command "]}," Redis Commands Keys pexpireat":{"type":"method","name":"pexpireat","children":[],"call":[" send_command ","args << "," Integer "]}," Redis Commands Keys pexpire":{"type":"method","name":"pexpire","children":[],"call":[" send_command ","args << "," Integer "]}," Redis Commands Keys ttl":{"type":"method","name":"ttl","children":[],"call":[" send_command "]}," Redis Commands Keys expireat":{"type":"method","name":"expireat","children":[],"call":[" send_command ","args << "," Integer "]}," Redis Commands Keys expire":{"type":"method","name":"expire","children":[],"call":[" send_command ","args << "," Integer "]}," Redis Commands Keys persist":{"type":"method","name":"persist","children":[],"call":[" send_command "]}," Redis Commands Keys scan_each":{"type":"method","name":"scan_each","children":[],"call":["cursor == ","keys each "," scan "," loop "," to_enum "," block_given? "]}," Redis Commands Keys scan":{"type":"method","name":"scan","children":[],"call":[" _scan "]}," Redis Commands HyperLogLog pfmerge":{"type":"method","name":"pfmerge","children":[],"call":[" send_command "]}," Redis Commands HyperLogLog pfcount":{"type":"method","name":"pfcount","children":[],"call":[" send_command ","(sym :pfcount) + ","keys flatten "]}," Redis Commands HyperLogLog pfadd":{"type":"method","name":"pfadd","children":[],"call":[" send_command "]}," Redis Commands Hashes hscan_each":{"type":"method","name":"hscan_each","children":[],"call":["cursor == ","values each "," hscan "," loop "," to_enum "," block_given? "]}," Redis Commands Hashes hscan":{"type":"method","name":"hscan","children":[],"call":["reply [] each_slice to_a ","reply [] each_slice ","reply [] "," _scan "]}," Redis Commands Hashes hgetall":{"type":"method","name":"hgetall","children":[],"call":[" send_command "]}," Redis Commands Hashes hvals":{"type":"method","name":"hvals","children":[],"call":[" send_command "]}," Redis Commands Hashes hkeys":{"type":"method","name":"hkeys","children":[],"call":[" send_command "]}," Redis Commands Hashes hincrbyfloat":{"type":"method","name":"hincrbyfloat","children":[],"call":[" send_command "," Float "]}," Redis Commands Hashes hincrby":{"type":"method","name":"hincrby","children":[],"call":[" send_command "," Integer "]}," Redis Commands Hashes hexists":{"type":"method","name":"hexists","children":[],"call":[" send_command "]}," Redis Commands Hashes hdel":{"type":"method","name":"hdel","children":[],"call":[" send_command ","(sym :hdel) concat ","fields flatten! "]}," Redis Commands Hashes hrandfield":{"type":"method","name":"hrandfield","children":[],"call":[" send_command ","args << "," raise ","count nil? "]}," Redis Commands Hashes mapped_hmget":{"type":"method","name":"mapped_hmget","children":[],"call":["Hash  [] ","fields zip ","reply is_a? "," hmget ","fields flatten! "]}," Redis Commands Hashes hmget":{"type":"method","name":"hmget","children":[],"call":[" send_command ","(sym :hmget) + ","(sym :hmget) concat ","fields flatten! "]}," Redis Commands Hashes hget":{"type":"method","name":"hget","children":[],"call":[" send_command "]}," Redis Commands Hashes mapped_hmset":{"type":"method","name":"mapped_hmset","children":[],"call":[" hmset ","hash to_a flatten ","hash to_a ","hash flatten "]}," Redis Commands Hashes hmset":{"type":"method","name":"hmset","children":[],"call":[" send_command ","(sym :hmset) + "]}," Redis Commands Hashes hsetnx":{"type":"method","name":"hsetnx","children":[],"call":[" send_command "]}," Redis Commands Hashes hset":{"type":"method","name":"hset","children":[],"call":[" send_command ","attrs first flatten ","attrs first ","attrs first is_a? ","attrs size == ","attrs size ","attrs first flatten  first flatten ","attrs first flatten  first ","attrs first flatten  first is_a? ","attrs first flatten  size == ","attrs first flatten  size "]}," Redis Commands Hashes hlen":{"type":"method","name":"hlen","children":[],"call":[" send_command "]}," Redis Commands Geo _geoarguments":{"type":"method","name":"_geoarguments","children":[],"call":["args push ","args << ","args << << "," Integer "]}," Redis Commands Geo geodist":{"type":"method","name":"geodist","children":[],"call":[" send_command "]}," Redis Commands Geo geopos":{"type":"method","name":"geopos","children":[],"call":[" send_command "]}," Redis Commands Geo georadiusbymember":{"type":"method","name":"georadiusbymember","children":[],"call":[" send_command "," _geoarguments "," _ _geoarguments  "]}," Redis Commands Geo georadius":{"type":"method","name":"georadius","children":[],"call":[" send_command "," _geoarguments "," _ _geoarguments  "]}," Redis Commands Geo geohash":{"type":"method","name":"geohash","children":[],"call":[" send_command "]}," Redis Commands Geo geoadd":{"type":"method","name":"geoadd","children":[],"call":[" send_command "]}," Redis Commands Connection quit":{"type":"method","name":"quit","children":[],"call":["client disconnect ","client call "," synchronize ","client close ","client call_v "]}," Redis Commands Connection select":{"type":"method","name":"select","children":[],"call":["client call ","client db= "," synchronize "," send_command "]}," Redis Commands Connection echo":{"type":"method","name":"echo","children":[],"call":[" send_command "]}," Redis Commands Connection ping":{"type":"method","name":"ping","children":[],"call":[" send_command ","(sym :ping) compact "]}," Redis Commands Connection auth":{"type":"method","name":"auth","children":[],"call":[" send_command "]}," Redis Commands Cluster asking":{"type":"method","name":"asking","children":[],"call":[" send_command "]}," Redis Commands Cluster cluster":{"type":"method","name":"cluster","children":[],"call":[" send_command ","(sym :cluster) + ","subcommand to_s downcase ","subcommand to_s ","subcommand to_s downcase  to_s downcase ","subcommand to_s downcase  to_s "]}," Redis Commands Bitmaps bitpos":{"type":"method","name":"bitpos","children":[],"call":[" send_command ","command << "," raise ","start ! "]}," Redis Commands Bitmaps bitop":{"type":"method","name":"bitop","children":[],"call":[" send_command ","command concat ","keys flatten! "]}," Redis Commands Bitmaps bitcount":{"type":"method","name":"bitcount","children":[],"call":[" send_command "]}," Redis Commands Bitmaps getbit":{"type":"method","name":"getbit","children":[],"call":[" send_command "]}," Redis Commands Bitmaps setbit":{"type":"method","name":"setbit","children":[],"call":[" send_command "]}," Redis Cluster _scan":{"type":"method","name":"_scan","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :result_cursor) :<<\n      (int 8))) :+\n  (lvar :client_index)) to_s ","(send\n  (lvar :result_cursor) :<<\n  (int 8)) + ","result_cursor << ","result_cursor == "," Integer ","client call ","command []= ","raw_cursor to_s ","clients [] ","@node scale_reading_clients ","input_cursor >> ","input_cursor % ","command [] ","(send\n  (begin\n    (send\n      (lvar : Integer ) :<<\n      (int 8))) :+\n  (lvar :client_index)) to_s ","(send\n  (begin\n    (send\n      (lvar :result_cursor) :<<\n      (int 8))) :+\n  (lvar :clients [] _index)) to_s ","(send\n  (begin\n    (send\n      (lvar :result_cursor) :<<\n      (int 8))) :+\n  (lvar :input_cursor % )) to_s ","(send\n  (lvar : Integer ) :<<\n  (int 8)) + "," Integer  << "," Integer  == ","clients []  call ","input_cursor >>  to_s ","clients [] s [] ","@node scale_reading_clients  [] ","@node scale_reading_clients [] s ","@node scale_reading_@node scale_reading_clients  "," Integer  >> "," Integer  % "]}," Redis Cluster Node scale_reading_clients":{"type":"method","name":"scale_reading_clients","children":[],"call":["reading_clients << "," slave? "," master? "," replica_disabled? ","@clients each "]}," Redis with":{"type":"method","name":"with","children":[],"call":[]}," Redis MultiFuture _set":{"type":"method","name":"_set","children":[],"call":["future _set ","replies [] ","@futures each_with_index "]}," Redis MultiFuture initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Redis Pipeline Multi materialized_futures":{"type":"method","name":"materialized_futures","children":[],"call":["MultiFuture  new "," futures ","Future  new "," empty? "]}," Redis PipelinedConnection call_pipeline":{"type":"method","name":"call_pipeline","children":[],"call":["@pipeline call_pipeline "]}," Redis Cluster InitialSetupError initialize":{"type":"method","name":"initialize","children":[],"call":["errors map uniq join ","errors map uniq ","errors map "]}," Redis Commands Transactions multi":{"type":"method","name":"multi","children":[],"call":[" send_command ","prior_client call_pipeline ","PipelinedConnection  new ","Pipeline Multi  new "," synchronize ","Pipeline  deprecation_warning ","Kernel  caller_locations ","(lvar :block) == "," block_given? ","MultiConnection  new ","client multi ","prior_client call_Pipeline Multi  new  "]}," Redis Distributed srem?":{"type":"method","name":"srem?","children":[],"call":[" node_for srem? "," node_for "]}," Redis Distributed sadd?":{"type":"method","name":"sadd?","children":[],"call":[" node_for sadd? "," node_for "]}," Redis Commands Sets srem?":{"type":"method","name":"srem?","children":[],"call":[" send_command ","(sym :srem) concat ","members flatten! "]}," Redis Commands Sets sadd?":{"type":"method","name":"sadd?","children":[],"call":[" send_command ","(sym :sadd) concat ","members flatten! "]}," Redis initialize_client":{"type":"method","name":"initialize_client","children":[],"call":["Client  config new_client ","Client  config ","Client  sentinel new_client ","Client  sentinel ","options []= ","uri user ","uri user empty? ! ","uri user empty? ","options key? ! ","options key? ","uri password ","uri password empty? ! ","uri password empty? ","uri host ","URI  parse ","options delete "," raise ","URI  parse  user ","URI  parse  user empty? ! ","URI  parse  user empty? ","URI  parse  password ","URI  parse  password empty? ! ","URI  parse  password empty? ","URI  parse  host "]}," Redis SubscribedClient close":{"type":"method","name":"close","children":[],"call":["@client close "]}," Redis SubscribedClient call_v":{"type":"method","name":"call_v","children":[],"call":["@client call_v ","@write_monitor synchronize "]}," Redis MultiConnection send_blocking_command":{"type":"method","name":"send_blocking_command","children":[],"call":[" send_command "]}," Redis MultiConnection multi":{"type":"method","name":"multi","children":[],"call":[" raise "]}," Redis PipelinedConnection multi":{"type":"method","name":"multi","children":[],"call":["@futures << ","multi_future _set ","@pipeline call_v ","MultiFuture  new ","@futures [] ","@futures size "," send_command ","MultiConnection  new ","MultiFuture  new  _set ","@futures @futures size  "]}," Redis HashRing server_hash_for":{"type":"method","name":"server_hash_for","children":[],"call":["Digest MD5  digest unpack1 ","Digest MD5  digest "]}," Redis HashRing hash_for":{"type":"method","name":"hash_for","children":[],"call":["Zlib  crc32 "]}," Redis Distributed bzpopmin":{"type":"method","name":"bzpopmin","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis Distributed bzpopmax":{"type":"method","name":"bzpopmax","children":[],"call":["Floatify  call ","reply [] ","reply is_a? "," _bpop "]}," Redis Distributed close":{"type":"method","name":"close","children":[],"call":[" on_each_node "]}," Redis Client inherit_socket!":{"type":"method","name":"inherit_socket!","children":[],"call":[]}," Redis Client disable_reconnection":{"type":"method","name":"disable_reconnection","children":[],"call":[" ensure_connected "]}," Redis Client blocking_call_v":{"type":"method","name":"blocking_call_v","children":[],"call":[" raise ","error backtrace ","error message ","ERROR_MAPPING  fetch ","error class ","timeout > "," translate_error! "," config read_timeout "," config ","Client  translate_error! "]}," Redis Client call_v":{"type":"method","name":"call_v","children":[],"call":[" raise ","error backtrace ","error message ","ERROR_MAPPING  fetch ","error class "," translate_error! ","Client  translate_error! "]}," Redis Client server_url":{"type":"method","name":"server_url","children":[],"call":[" config server_url "," config "]}," Redis Client sentinel":{"type":"method","name":"sentinel","children":[],"call":[]}," Redis Client config":{"type":"method","name":"config","children":[],"call":[]}," Redis Client close":{"type":"method","name":"close","children":[],"call":[]}," Redis Client translate_error_class":{"type":"method","name":"translate_error_class","children":[],"call":[" raise ","ERROR_MAPPING  []= ","ERROR_MAPPING  [] ","error_class ancestors find ","error_class ancestors ","ERROR_MAPPING  fetch "]}," Redis Client translate_error!":{"type":"method","name":"translate_error!","children":[],"call":[" raise ","error backtrace ","error message "," translate_error_class ","error class "]}," Redis Distributed zmpop":{"type":"method","name":"zmpop","children":[],"call":["node zmpop "," ensure_same_node "]}," Redis Distributed bzmpop":{"type":"method","name":"bzmpop","children":[],"call":["node bzmpop "," ensure_same_node "]}," Redis Distributed lmpop":{"type":"method","name":"lmpop","children":[],"call":["node lmpop "," ensure_same_node "]}," Redis Distributed blmpop":{"type":"method","name":"blmpop","children":[],"call":["node blmpop "," ensure_same_node "]}," Redis Commands SortedSets zmpop":{"type":"method","name":"zmpop","children":[],"call":["(send\n  (lvar :entry) :map) flatten ","FloatifyPairs  call ","entry map "," send_command ","args << << "," Integer ","args << ","keys size "," raise ","modifier == "]}," Redis Commands SortedSets bzmpop":{"type":"method","name":"bzmpop","children":[],"call":["(send\n  (lvar :entry) :map) flatten ","FloatifyPairs  call ","entry map "," send_blocking_command ","args << << "," Integer ","args << ","keys size "," raise ","modifier == "]}," Redis Commands Lists lmpop":{"type":"method","name":"lmpop","children":[],"call":[" send_command ","args << << "," Integer ","args << ","keys size "," raise ","modifier == "]}," Redis Commands Lists blmpop":{"type":"method","name":"blmpop","children":[],"call":[" send_blocking_command ","args << << "," Integer ","args << ","keys size "," raise ","modifier == "]}," Redis Subscription smessage":{"type":"method","name":"smessage","children":[],"call":["@callbacks []= "]}," Redis Subscription sunsubscribe":{"type":"method","name":"sunsubscribe","children":[],"call":["@callbacks []= "]}," Redis Subscription ssubscribe":{"type":"method","name":"ssubscribe","children":[],"call":["@callbacks []= "]}," Redis SubscribedClient sunsubscribe":{"type":"method","name":"sunsubscribe","children":[],"call":[" call_v "]}," Redis SubscribedClient ssubscribe_with_timeout":{"type":"method","name":"ssubscribe_with_timeout","children":[],"call":[" subscription "]}," Redis SubscribedClient ssubscribe":{"type":"method","name":"ssubscribe","children":[],"call":[" subscription "]}," Redis Commands Pubsub sunsubscribe":{"type":"method","name":"sunsubscribe","children":[],"call":[" _subscription "]}," Redis Commands Pubsub ssubscribe_with_timeout":{"type":"method","name":"ssubscribe_with_timeout","children":[],"call":[" _subscription "]}," Redis Commands Pubsub ssubscribe":{"type":"method","name":"ssubscribe","children":[],"call":[" _subscription "]}," Redis Commands Pubsub spublish":{"type":"method","name":"spublish","children":[],"call":[" send_command "]}}