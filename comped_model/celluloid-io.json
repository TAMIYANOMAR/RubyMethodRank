{" Celluloid IO included":{"type":"method","name":"included","children":[],"call":[]}," Celluloid IO UDPSocket to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO UDPSocket recvfrom":{"type":"method","name":"recvfrom","children":[],"call":[" wait_readable ","@socket recvfrom ","@socket recvfrom_nonblock ","@socket respond_to? ","socket recvfrom ","socket recvfrom_nonblock ","socket respond_to? "," to_io ","@ to_io  recvfrom ","@ to_io  recvfrom_nonblock ","@ to_io  respond_to? "," to_io  recvfrom "," to_io  recvfrom_nonblock "," to_io  respond_to? "]}," Celluloid IO UDPSocket wait_readable":{"type":"method","name":"wait_readable","children":[],"call":["Kernel  select ","Celluloid  current_actor wait_readable ","Celluloid  current_actor "," evented? ","Celluloid IO  wait_readable "]}," Celluloid IO UDPSocket evented?":{"type":"method","name":"evented?","children":[],"call":["actor mailbox is_a? ","actor mailbox ","Thread  current [] ","Thread  current ","Thread  current []  mailbox is_a? ","Thread  current []  mailbox "]}," Celluloid IO UDPSocket initialize":{"type":"method","name":"initialize","children":[],"call":[" UDPSocket  new "," fail ","socket class ","socket kind_of? ","args size ","args size != ","args first ","args first kind_of? ","args first  class ","args first  kind_of? "]}," Celluloid IO TCPSocket to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO TCPSocket initialize":{"type":"method","name":"initialize","children":[],"call":[" wait_writable ","@socket connect_nonblock ","Socket  sockaddr_in ","@addr to_s ","@socket bind ","Addrinfo  tcp ","Socket  new "," raise ","@addr class ","addrs [] "," rand ","addrs size ","addrs empty? "," Array ","DNSResolver  new resolve ","DNSResolver  new ","Resolv IPv6  create ","Resolv IPv4  create ","@socket to_channel finish_connect ","@socket to_channel ","remote_port nil? ","remote_host is_a? ","RUBY_PLATFORM  == "," fail "," create_socket ","socket class ","socket kind_of? ","args size ","args size != ","args first ","args first kind_of? "," TCPSocket  new ","Socket  new  connect_nonblock "," TCPSocket  new  connect_nonblock ","@args first  connect_nonblock ","addrs []  to_s ","Resolv IPv6  create  to_s ","Resolv IPv4  create  to_s ","Socket  new  bind "," TCPSocket  new  bind ","@args first  bind ","addrs []  class ","Resolv IPv6  create  class ","Resolv IPv4  create  class "," Array  [] "," Array  size "," Array  empty? ","Socket  new  to_channel finish_connect "," TCPSocket  new  to_channel finish_connect ","@args first  to_channel finish_connect ","Socket  new  to_channel "," TCPSocket  new  to_channel ","@args first  to_channel "," create_args first  ","args first  class ","args first  kind_of? "]}," Celluloid IO TCPSocket from_ruby_socket":{"type":"method","name":"from_ruby_socket","children":[],"call":[]}," Celluloid IO TCPServer evented?":{"type":"method","name":"evented?","children":[],"call":["actor mailbox is_a? ","actor mailbox ","Thread  current [] ","Thread  current ","Thread  current []  mailbox is_a? ","Thread  current []  mailbox "]}," Celluloid IO TCPServer to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO TCPServer accept_nonblock":{"type":"method","name":"accept_nonblock","children":[],"call":["Celluloid IO TCPSocket  from_ruby_socket ","@server accept_nonblock ","Celluloid IO TCPSocket  new "," to_io accept_nonblock "," to_io "]}," Celluloid IO TCPServer accept":{"type":"method","name":"accept","children":[],"call":["Celluloid IO TCPSocket  from_ruby_socket ","@server accept "," accept_nonblock ","Celluloid  current_actor wait_readable ","Celluloid  current_actor "," evented? ","Thread  current [] ","Thread  current ","Celluloid IO  wait_readable "," to_io ","Celluloid  current_Thread  current []  wait_readable ","Celluloid  current_Thread  current []  "]}," Celluloid IO TCPServer initialize":{"type":"method","name":"initialize","children":[],"call":[" TCPServer  new ","port nil? "," fail ","socket class ","socket kind_of? ","args size ","args size != ","args first ","args first kind_of? ","args first  class ","args first  kind_of? "]}," Celluloid IO Reactor run_once":{"type":"method","name":"run_once","children":[],"call":["Logger  warn ","task resume ","task running? ","monitor close ","monitor value ","@selector select ","monitor value resume ","registered delete ","ios each ","(array\n  (lvar :readers)\n  (ivar :@readers)) each ","readers include? ","@waker io "," select ","@writers keys ","@readers keys << ","@readers keys ","@selector deregister ","monitor io ","@selector select_each ","monitor value  resume ","registered delete  resume ","monitor value  running? ","registered delete  running? "]}," Celluloid IO Reactor wait":{"type":"method","name":"wait","children":[],"call":["Task  suspend ","monitor value= ","Task  current ","@selector register "," raise ","io class ","io is_a? "," IO  try_convert "," IO  respond_to? ","io to_io ","io respond_to? ","@monitors []= ","Monitor  new ","@monitors [] ","monitor close "," fail ","monitor closed? ","IO  try_convert ","IO  respond_to? ","@selector register  value= ","Monitor  new  value= ","@monitors []  value= "," IO  try_convert  class ","io to_io  class ","IO  try_convert  class "," IO  try_convert  is_a? ","io to_io  is_a? ","IO  try_convert  is_a? "," IO  try_convert  to_ IO  try_convert  ","io to_io  to_io to_io  ","IO  try_convert  to_IO  try_convert  "," IO  try_convert  respond_to? ","io to_io  respond_to? ","IO  try_convert  respond_to? ","@@selector register s []= ","@Monitor  new s []= ","@@monitors [] s []= ","@@selector register s [] ","@Monitor  new s [] ","@@monitors [] s [] ","@selector register  close ","Monitor  new  close ","@monitors []  close ","@selector register  closed? ","Monitor  new  closed? ","@monitors []  closed? "]}," Celluloid IO Reactor wait_writable":{"type":"method","name":"wait_writable","children":[],"call":[" wait ","monitor wait_writable "]}," Celluloid IO Reactor wait_readable":{"type":"method","name":"wait_readable","children":[],"call":[" wait ","monitor wait_readable "," wait_for_io "]}," Celluloid IO Reactor initialize":{"type":"method","name":"initialize","children":[],"call":["NIO Selector  new "]}," Celluloid IO Mailbox shutdown":{"type":"method","name":"shutdown","children":[],"call":["@reactor shutdown ","@waker cleanup "]}," Celluloid IO Mailbox receive":{"type":"method","name":"receive","children":[],"call":[" raise "," shutdown "," next_message ","@reactor run_once ","wait_interval < ","wait_until - ","now + ","Time  now ","@waker wait "," next_ next_message  ","wait_until -  < ","Time  now  + ","Time  Time  now  "]}," Celluloid IO Mailbox system_event":{"type":"method","name":"system_event","children":[],"call":["@mutex unlock ","@reactor wakeup ","current_actor mailbox == ","current_actor mailbox ","Thread  current [] ","Thread  current ","@messages unshift ","@mutex lock ","@waker signal ","@lock synchronize ","Thread  current []  mailbox == ","Thread  current []  mailbox "]}," Celluloid IO Mailbox <<":{"type":"method","name":"<<","children":[],"call":["@mutex unlock "," raise ","@reactor wakeup ","current_actor mailbox == ","current_actor mailbox ","Thread  current [] ","Thread  current ","@messages << ","@mutex lock ","@messages unshift ","message is_a? ","@waker signal ","@lock synchronize ","Thread  current []  mailbox == ","Thread  current []  mailbox "]}," Celluloid IO Mailbox initialize":{"type":"method","name":"initialize","children":[],"call":["Reactor  new ","Mutex  new ","Waker  new "]}," Celluloid IO DNSResolver resolve":{"type":"method","name":"resolve","children":[],"call":["addrs first ","addrs size == ","addrs size ","addrs empty? ","addrs << ","value address ","response each_answer ","Resolv DNS Message  decode ","@socket recvfrom ","@socket send ","query encode ","query add_question ","query rd= ","query id= "," class generate_id "," class ","Resolv DNS Message  new "," raise ","Resolv IPv6  create ","Resolv IPv4  create ","@hosts [] ","addrs compact! ","value respond_to? "," build_query "," resolve_host "," resolve_hostname ","@server to_s "," fail ","Resolv DNS Message  decode  each_answer ","Resolv DNS Message  new  encode "," build_query  encode ","Resolv DNS Message  new  add_question "," build_query  add_question ","Resolv DNS Message  new  rd= "," build_query  rd= ","Resolv DNS Message  new  id= "," build_query  id= ","@@hosts [] s [] ","@ resolve_hostname s [] "," build_Resolv DNS Message  new  "," build_ build_query  "," resolve_@hosts []  "," resolve_ resolve_hostname  "," resolve_@hosts [] name "," resolve_ resolve_hostname name "]}," Celluloid IO DNSResolver initialize":{"type":"method","name":"initialize","children":[],"call":["UDPSocket  new ","@nameservers first "," class hosts "," class "," class nameservers ","@server family ","IPAddr  new ","@nameservers sample "," class nameservers  first ","@nameservers first  family ","IPAddr  new  family "," class nameservers  sample "]}," Celluloid IO DNSResolver hosts":{"type":"method","name":"hosts","children":[],"call":[]}," Celluloid IO DNSResolver nameservers":{"type":"method","name":"nameservers","children":[],"call":[]}," Celluloid IO DNSResolver generate_id":{"type":"method","name":"generate_id","children":[],"call":[]}," Celluloid IO CommonMethods write":{"type":"method","name":"write","children":[],"call":[" release_ownership ","remaining slice! ","written < ","remaining length "," wait_writable "," write_nonblock ","total_written < "," acquire_ownership ","string length ","string [] ","remaining == ","string []  slice! "," write_nonblock  < ","remaining string length  ","string []  length ","total_ write_nonblock  < ","string string length  ","string []  == "]}," Celluloid IO CommonMethods readpartial":{"type":"method","name":"readpartial","children":[],"call":[" wait_readable "," read_nonblock "," force_encoding "]}," Celluloid IO CommonMethods read":{"type":"method","name":"read","children":[],"call":[" release_ownership ","str length ","buffer << ","length == "," readpartial ","remaining zero? "," acquire_ownership "," read_nonblock "," force_encoding "," readpartial  length "]}," Celluloid IO CommonMethods release_ownership":{"type":"method","name":"release_ownership","children":[],"call":["Actor  current signal ","Actor  current "," instance_variable_set "," raise "," instance_variable_get == ","Task  current "," instance_variable_get ","Thread  current [] ","Thread  current ","Thread  current [] signal "," instance_variable_defined? "]}," Celluloid IO CommonMethods acquire_ownership":{"type":"method","name":"acquire_ownership","children":[],"call":[" instance_variable_set ","Task  current ","Actor  current wait ","Actor  current "," instance_variable_get "," raise ","Thread  current [] ","Thread  current ","Thread  current [] wait "," instance_variable_defined? "]}," Celluloid IO CommonMethods wait_writable":{"type":"method","name":"wait_writable","children":[],"call":["Kernel  select "," to_io ","Celluloid  current_actor wait_writable ","Celluloid  current_actor "," evented? ","Thread  current [] ","Thread  current ","Celluloid  current_Thread  current []  wait_writable ","Celluloid  current_Thread  current []  "]}," Celluloid IO CommonMethods wait_readable":{"type":"method","name":"wait_readable","children":[],"call":["Kernel  select "," to_io ","Celluloid  current_actor wait_readable ","Celluloid  current_actor "," evented? "]}," Celluloid IO CommonMethods evented?":{"type":"method","name":"evented?","children":[],"call":["actor mailbox is_a? ","actor mailbox ","Thread  current [] ","Thread  current ","Thread  current []  mailbox is_a? ","Thread  current []  mailbox "]}," Celluloid IO Mailbox next_message":{"type":"method","name":"next_message","children":[],"call":["@mutex unlock ","@mutex lock "]}," Celluloid IO UNIXSocket to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO UNIXSocket initialize":{"type":"method","name":"initialize","children":[],"call":[" UNIXSocket  new "," UNIXSocket  open ","socket_path is_a? "]}," Celluloid IO UNIXSocket from_ruby_socket":{"type":"method","name":"from_ruby_socket","children":[],"call":[]}," Celluloid IO UNIXSocket open":{"type":"method","name":"open","children":[],"call":[]}," Celluloid IO UNIXServer evented?":{"type":"method","name":"evented?","children":[],"call":["actor mailbox is_a? ","actor mailbox ","Thread  current [] ","Thread  current ","Thread  current []  mailbox is_a? ","Thread  current []  mailbox "]}," Celluloid IO UNIXServer to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO UNIXServer accept_nonblock":{"type":"method","name":"accept_nonblock","children":[],"call":["Celluloid IO UNIXSocket  from_ruby_socket ","@server accept_nonblock ","Celluloid IO UNIXSocket  new "," to_io accept_nonblock "," to_io "]}," Celluloid IO UNIXServer accept":{"type":"method","name":"accept","children":[],"call":["Celluloid IO UNIXSocket  from_ruby_socket ","@server accept "," accept_nonblock ","Celluloid  current_actor wait_readable ","Celluloid  current_actor "," evented? ","Thread  current [] ","Thread  current ","Celluloid IO  wait_readable "," to_io ","Celluloid  current_Thread  current []  wait_readable ","Celluloid  current_Thread  current []  "]}," Celluloid IO UNIXServer initialize":{"type":"method","name":"initialize","children":[],"call":[" UNIXServer  new "," raise ","Errno EADDRINUSE  new ","ex message ","ex message include? ","ex class name == ","ex class name ","ex class ","RUBY_PLATFORM  == "," fail ","socket class ","socket kind_of? "]}," Celluloid IO UNIXServer open":{"type":"method","name":"open","children":[],"call":[]}," Celluloid IO TCPSocket open":{"type":"method","name":"open","children":[],"call":[]}," Celluloid IO TCPServer from_ruby_server":{"type":"method","name":"from_ruby_server","children":[],"call":[]}," Celluloid IO Stream Latch synchronize":{"type":"method","name":"synchronize","children":[],"call":["@condition signal ","@waiters > ","Task  current ","@condition wait ","@condition owner= ","actor proxy ","@condition owner != ","@condition owner ","Thread  current [] ","Thread  current ","Thread  current []  proxy "]}," Celluloid IO Stream Latch initialize":{"type":"method","name":"initialize","children":[],"call":["Celluloid Condition  new "]}," Celluloid IO Stream do_write":{"type":"method","name":"do_write","children":[],"call":["@write_buffer []= "," syswrite ","@write_buffer [] ","remain > ","@write_buffer length ","idx + ","$/ size ","@write_buffer rindex ","@write_buffer size > ","@write_buffer size ","@write_buffer force_encoding ","@write_buffer << ","@write_buffer length  > ","idx +  > ","@write_buffer rindex  + "]}," Celluloid IO Stream consume_rbuff":{"type":"method","name":"consume_rbuff","children":[],"call":["@read_buffer []= ","@read_buffer [] ","@read_buffer size ","@read_buffer empty? ","@read_buffer @read_buffer size  "]}," Celluloid IO Stream fill_rbuff":{"type":"method","name":"fill_rbuff","children":[],"call":["@read_buffer << "," sysread "]}," Celluloid IO Stream close":{"type":"method","name":"close","children":[],"call":[" sysclose "," flush "]}," Celluloid IO Stream flush":{"type":"method","name":"flush","children":[],"call":[" do_write "]}," Celluloid IO Stream printf":{"type":"method","name":"printf","children":[],"call":[" do_write ","s % "]}," Celluloid IO Stream print":{"type":"method","name":"print","children":[],"call":[" do_write ","s << ","arg to_s ","args each "]}," Celluloid IO Stream puts":{"type":"method","name":"puts","children":[],"call":[" do_write ","s << ","(str \"\\\\n\\\\z\") !~ ","arg to_s ","args each ","args empty? "]}," Celluloid IO Stream <<":{"type":"method","name":"<<","children":[],"call":[" do_write "]}," Celluloid IO Stream write":{"type":"method","name":"write","children":[],"call":["s bytesize "," do_write "]}," Celluloid IO Stream eof?":{"type":"method","name":"eof?","children":[],"call":["@read_buffer empty? "," fill_rbuff ","@eof ! "]}," Celluloid IO Stream ungetc":{"type":"method","name":"ungetc","children":[],"call":["@read_buffer []= ","c chr "]}," Celluloid IO Stream readchar":{"type":"method","name":"readchar","children":[],"call":[" getc "," raise "," eof? "]}," Celluloid IO Stream each_byte":{"type":"method","name":"each_byte","children":[],"call":[" c ord "," c "," getc ","c ord ","  getc  ord ","  getc  "," get getc  "," getc  ord "]}," Celluloid IO Stream getc":{"type":"method","name":"getc","children":[],"call":[" read "]}," Celluloid IO Stream readline":{"type":"method","name":"readline","children":[],"call":[" gets "," raise "," eof? "]}," Celluloid IO Stream readlines":{"type":"method","name":"readlines","children":[],"call":["ary << "," line "," gets ","  gets  "]}," Celluloid IO Stream each":{"type":"method","name":"each","children":[],"call":[" gets "]}," Celluloid IO Stream gets":{"type":"method","name":"gets","children":[],"call":[" consume_rbuff ","(lvar :size) min ","limit >= ","idx + ","eol size ","$& size ","eol is_a? ","@read_buffer index "," fill_rbuff ","(lvar :(lvar :size) min ) min ","(lvar :idx + ) min ","@read_buffer index  + ","eol (lvar :size) min  ","eol idx +  ","$& (lvar :size) min  ","$& idx +  "]}," Celluloid IO Stream readpartial":{"type":"method","name":"readpartial","children":[],"call":[" raise ","ret empty? ","buf replace "," consume_rbuff "," sysread ","@read_buffer empty? ","buf clear ","maxlen == "," consume_rbuff  empty? "]}," Celluloid IO Stream read":{"type":"method","name":"read","children":[],"call":["ret empty? ","buf replace "," consume_rbuff "," fill_rbuff ","size <= ","@read_buffer size ","buf clear ","size == "]}," Celluloid IO Stream syswrite":{"type":"method","name":"syswrite","children":[],"call":["remaining slice! ","written < ","remaining length "," wait_writable "," write_nonblock ","total_written < ","@write_latch synchronize ","string length "," write_nonblock  < ","remaining string length  ","total_ write_nonblock  < ","string string length  "]}," Celluloid IO Stream sysread":{"type":"method","name":"sysread","children":[],"call":[" wait_readable "," read_nonblock ","@read_latch synchronize "," force_encoding "]}," Celluloid IO Stream wait_writable":{"type":"method","name":"wait_writable","children":[],"call":["Kernel  select "," to_io ","Celluloid  current_actor wait_writable ","Celluloid  current_actor "," evented? ","Celluloid IO  wait_writable "]}," Celluloid IO Stream wait_readable":{"type":"method","name":"wait_readable","children":[],"call":["Kernel  select "," to_io ","Celluloid  current_actor wait_readable ","Celluloid  current_actor "," evented? ","Celluloid IO  wait_readable "]}," Celluloid IO Stream evented?":{"type":"method","name":"evented?","children":[],"call":["actor mailbox is_a? ","actor mailbox ","Thread  current [] ","Thread  current ","Thread  current []  mailbox is_a? ","Thread  current []  mailbox "]}," Celluloid IO Stream initialize":{"type":"method","name":"initialize","children":[],"call":["Latch  new "," force_encoding "]}," Celluloid IO SSLSocket to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO SSLSocket accept":{"type":"method","name":"accept","children":[],"call":[" wait_writable "," wait_readable ","@socket accept_nonblock "," to_io accept_nonblock "," to_io "]}," Celluloid IO SSLSocket connect":{"type":"method","name":"connect","children":[],"call":[" wait_readable ","@socket connect_nonblock "," to_io connect_nonblock "," to_io "]}," Celluloid IO SSLSocket initialize":{"type":"method","name":"initialize","children":[],"call":["OpenSSL SSL SSLSocket  new "," IO  try_convert ","@socket sync_close= ","@socket respond_to? ","socket sync_close= ","socket respond_to? ","OpenSSL SSL SSLSocket  new  sync_close= ","@OpenSSL SSL SSLSocket  new  sync_close= ","OpenSSL SSL SSLSocket  new  respond_to? ","@OpenSSL SSL SSLSocket  new  respond_to? "]}," Celluloid IO SSLServer accept":{"type":"method","name":"accept","children":[],"call":[" raise ","sock close ","ssl accept ","Celluloid IO SSLSocket  new ","@tcp_server accept ","@tcp_server accept  close ","Celluloid IO SSLSocket  new  accept "]}," Celluloid IO SSLServer initialize":{"type":"method","name":"initialize","children":[],"call":["Celluloid IO TCPServer  from_ruby_server ","server is_a? ","Socket  try_convert ","Celluloid IO TCPServer  from_ruby_Celluloid IO TCPServer  from_ruby_server  ","Celluloid IO TCPServer  from_ruby_server  is_a? "]}," Celluloid IO CommonMethods <<":{"type":"method","name":"<<","children":[],"call":[" write "]}," Celluloid IO wait_writable":{"type":"method","name":"wait_writable","children":[],"call":["Kernel  select ","actor mailbox reactor wait_writable ","actor mailbox reactor ","actor mailbox ","actor mailbox is_a? ","Thread  current [] ","Thread  current ","io to_io ","mailbox reactor wait_writable ","mailbox reactor ","IO  evented? ","Thread  current []  mailbox reThread  current []  wait_writable ","actor Thread  current []  reactor wait_writable ","Thread  current []  mailbox reThread  current []  ","actor Thread  current []  reactor ","Thread  current []  mailbox ","actor Thread  current []  ","Thread  current []  mailbox is_a? ","actor Thread  current []  is_a? ","io to_io  to_io to_io  ","mailbox reThread  current []  wait_writable ","Thread  current []  reactor wait_writable ","mailbox reThread  current []  ","Thread  current []  reactor "]}," Celluloid IO wait_readable":{"type":"method","name":"wait_readable","children":[],"call":["Kernel  select ","actor mailbox reactor wait_readable ","actor mailbox reactor ","actor mailbox ","actor mailbox is_a? ","Thread  current [] ","Thread  current ","io to_io ","mailbox reactor wait_readable ","mailbox reactor ","IO  evented? "," current_actor mailbox reactor wait_readable "," current_actor mailbox reactor "," current_actor mailbox "," current_actor ","Thread  current []  mailbox reThread  current []  wait_readable ","actor Thread  current []  reactor wait_readable ","Thread  current []  mailbox reThread  current []  ","actor Thread  current []  reactor ","Thread  current []  mailbox ","actor Thread  current []  ","Thread  current []  mailbox is_a? ","actor Thread  current []  is_a? ","io to_io  to_io to_io  ","mailbox reThread  current []  wait_readable ","Thread  current []  reactor wait_readable ","mailbox reThread  current []  ","Thread  current []  reactor "," current_Thread  current []  mailbox reThread  current []  wait_readable "," current_actor Thread  current []  reactor wait_readable "," current_Thread  current []  mailbox reThread  current []  "," current_actor Thread  current []  reactor "," current_Thread  current []  mailbox "," current_actor Thread  current []  "," current_Thread  current []  "]}," Celluloid IO evented?":{"type":"method","name":"evented?","children":[],"call":[]}," Celluloid IO TCPSocket send":{"type":"method","name":"send","children":[],"call":[" write "," raise ","flags zero? "," fail "]}," Celluloid IO TCPSocket recv":{"type":"method","name":"recv","children":[],"call":[" readpartial "," raise ","flags zero? ! ","flags zero? "," fail "]}," Celluloid IO DNSResolver resolve_ip":{"type":"method","name":"resolve_ip","children":[],"call":["klass create "]}," Celluloid IO DNSResolver resolve_host":{"type":"method","name":"resolve_host","children":[],"call":[" resolve_ip "," get_address "]}," Celluloid IO DNSResolver build_query":{"type":"method","name":"build_query","children":[],"call":["query add_question ","query rd= ","query id= "," class generate_id "," class ","Resolv DNS Message  new tap ","Resolv DNS Message  new "]}," Celluloid IO DNSResolver resolv":{"type":"method","name":"resolv","children":[],"call":["Resolv Hosts  new "]}," Celluloid IO DNSResolver resolve_hostname":{"type":"method","name":"resolve_hostname","children":[],"call":[" resolv getaddresses pop "," resolv getaddresses "," resolv "]}," Celluloid IO copy_stream":{"type":"method","name":"copy_stream","children":[],"call":[]}," Celluloid IO try_convert":{"type":"method","name":"try_convert","children":[],"call":[]}," Celluloid IO Reactor Monitor resume_for":{"type":"method","name":"resume_for","children":[],"call":[" raise ","task resume ","task running? ","@interests delete ","@interests delete  resume ","@interests delete  running? "]}," Celluloid IO Reactor Monitor resume":{"type":"method","name":"resume","children":[],"call":[" reregister "," resume_for ","@monitor writable? ","@monitor readable? "," raise "]}," Celluloid IO Reactor Monitor interests_symbol":{"type":"method","name":"interests_symbol","children":[],"call":["@interests keys "]}," Celluloid IO Reactor Monitor reregister":{"type":"method","name":"reregister","children":[],"call":["@monitor value= ","@selector register "," interests_symbol ","@monitor close ","@selector register  value= ","@selector register  close "]}," Celluloid IO Reactor Monitor wait":{"type":"method","name":"wait","children":[],"call":["Task  suspend "," reregister ","@interests []= ","Task  current "," raise ","interest inspect ","@interests include? "]}," Celluloid IO Reactor Monitor wait_writable":{"type":"method","name":"wait_writable","children":[],"call":[" wait "]}," Celluloid IO Reactor Monitor wait_readable":{"type":"method","name":"wait_readable","children":[],"call":[" wait "]}," Celluloid IO Reactor Monitor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid IO DNSResolver get_address":{"type":"method","name":"get_address","children":[],"call":["Resolv Hosts  new get_address rescue ","Resolv Hosts  new get_address ","Resolv Hosts  new ","Resolv Hosts  new getaddress "]}," Celluloid IO TCPSocket create_socket":{"type":"method","name":"create_socket","children":[],"call":["socket to_channel finish_connect ","socket to_channel ","RUBY_PLATFORM  == ","Celluloid IO  wait_writable ","socket connect_nonblock ","Socket  sockaddr_in ","addr to_s ","socket bind ","Addrinfo  tcp ","Socket  new "," fail ","addr class ","addrs [] "," rand ","addrs size ","addrs empty? "," Array ","DNSResolver  new resolve ","DNSResolver  new ","Resolv IPv6  create ","Resolv IPv4  create ","Socket  new  to_channel finish_connect ","Socket  new  to_channel ","Socket  new  connect_nonblock ","Socket  sockaddrs [] _in ","Socket  sockResolv IPv6  create _in ","Socket  sockResolv IPv4  create _in ","addrs []  to_s ","Resolv IPv6  create  to_s ","Resolv IPv4  create  to_s ","Socket  new  bind ","addrs []  class ","Resolv IPv6  create  class ","Resolv IPv4  create  class ","addrs [] s [] ","Resolv IPv6  create s [] ","Resolv IPv4  create s [] "," Array  [] ","addrs [] s size ","Resolv IPv6  create s size ","Resolv IPv4  create s size "," Array  size ","addrs [] s empty? ","Resolv IPv6  create s empty? ","Resolv IPv4  create s empty? "," Array  empty? "]}," Celluloid IO TCPSocket addr":{"type":"method","name":"addr","children":[],"call":[" raise ","socket inspect ","Resolv IPv6  create ","ra ip_address ","ra ipv6? ","Resolv IPv4  create ","ra ipv4? ","socket remote_address "," to_io "," socket remote_address ise "," to_io  inspect ","socket remote_address  ip_address ","socket remote_address  ipv6? ","socket remote_address  ipv4? "," to_io  remote_address "]}," Celluloid IO Socket try_convert":{"type":"method","name":"try_convert","children":[],"call":[]}," Celluloid IO Socket new":{"type":"method","name":"new","children":[],"call":[]}," Celluloid IO Socket to_io":{"type":"method","name":"to_io","children":[],"call":[]}," Celluloid IO Socket initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","socket inspect "]}," Celluloid IO wait_writeable":{"type":"method","name":"wait_writeable","children":[],"call":[" current_actor mailbox reactor wait_writeable "," current_actor mailbox reactor "," current_actor mailbox "," current_actor "]}," Celluloid IO Waker cleanup":{"type":"method","name":"cleanup","children":[],"call":["@sender close ","@receiver close "]}," Celluloid IO Waker io":{"type":"method","name":"io","children":[],"call":[]}," Celluloid IO Waker wait":{"type":"method","name":"wait","children":[],"call":[" raise ","byte == ","@receiver read ","@receiver read  == "]}," Celluloid IO Waker signal":{"type":"method","name":"signal","children":[],"call":[" raise ","@sender << "]}," Celluloid IO Waker initialize":{"type":"method","name":"initialize","children":[],"call":[" IO  pipe "]}," Celluloid IO Reactor wait_for_io":{"type":"method","name":"wait_for_io","children":[],"call":["Task  suspend ","set []= ","Task  current "," raise ","io inspect ","set has_key? ","io class ","io to_io ","io respond_to? ","IO  try_convert ","IO  respond_to? ","io is_a? ","io to_io  inspect ","IO  try_convert  inspect ","io to_io  class ","IO  try_convert  class ","io to_io  to_io to_io  ","IO  try_convert  to_IO  try_convert  ","io to_io  respond_to? ","IO  try_convert  respond_to? ","io to_io  is_a? ","IO  try_convert  is_a? "]}," Celluloid IO Reactor wait_writeable":{"type":"method","name":"wait_writeable","children":[],"call":[" wait_for_io "," wait "]}}