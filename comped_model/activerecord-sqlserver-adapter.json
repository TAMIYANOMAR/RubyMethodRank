{" SQLServerDBI TypeUtil ClassMethods type_name_to_module_with_sqlserver_types":{"type":"method","name":"type_name_to_module_with_sqlserver_types","children":[],"call":[" type_name_to_module_without_sqlserver_types "]}," SQLServerDBI TypeUtil included":{"type":"method","name":"included","children":[],"call":[]}," SQLServerDBI Type SqlserverForcedString parse":{"type":"method","name":"parse","children":[],"call":[]}," SQLServerDBI Type SqlserverTimestamp parse":{"type":"method","name":"parse","children":[],"call":[]}," SQLServerDBI Timestamp to_sqlserver_string":{"type":"method","name":"to_sqlserver_string","children":[],"call":[" sprintf ","nanoseconds to_i / ","nanoseconds to_i "," to_s split "," to_s "]}," ActiveRecord ConnectionAdapters SQLServerJoinAssociationChanges InstanceMethods aliased_table_name_for_with_sqlserver_support":{"type":"method","name":"aliased_table_name_for_with_sqlserver_support","children":[],"call":["name [] + ","table_index + ","name [] "," active_record connection table_alias_length - "," active_record connection table_alias_length "," active_record connection "," active_record ","table_index > ","@join_dependency table_aliases [] ","@join_dependency table_aliases "," active_record connection table_alias_for "," parent_table_name "," pluralize "," reflection name "," reflection ","@join_dependency table_aliases [] zero? "," parent table_joins to_s downcase =~ ","Regexp  escape "," active_record connection quote_table_name ","name downcase "," parent table_joins to_s downcase "," parent table_joins to_s "," parent table_joins "," parent "," parent table_joins blank? ! "," parent table_joins blank? ","name [] +  [] + "," active_record connection table_alias_for  [] + ","@join_dependency table_aliases []  + ","name [] +  [] "," active_record connection table_alias_for  [] ","@join_dependency table_aliases []  > "," parent_table_name [] +  "," parent_table_ active_record connection table_alias_for  "," reflection name [] +  "," reflection  active_record connection table_alias_for  "," active_record connection quote_table_name [] +  "," active_record connection quote_table_ active_record connection table_alias_for  ","name [] +  downcase "," active_record connection table_alias_for  downcase "]}," ActiveRecord ConnectionAdapters SQLServerJoinAssociationChanges included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods add_order_with_sqlserver_unique_checking!":{"type":"method","name":"add_order_with_sqlserver_unique_checking!","children":[],"call":[" add_order_without_sqlserver_unique_checking! ","sql << ","(send\n  (lvar :orders_and_dirs_set) :inject\n  (array)) join ","array << ","(begin\n  (lvar :ord)) strip ","unique_order_hash []= ","unique_order_hash [] ","ord_table_name == ","ord_tn_and_cn first ","ord_tn_and_cn size > ","ord_tn_and_cn size ","o tr ","ord to_s split map ","ord to_s split ","ord to_s ","orders_and_dirs_set inject "," connection send "," connection ","select_table_name tr! ","order_sql blank? "," connection respond_to? ","(send\n  (lvar : connection send ) :inject\n  (array)) join "," connection send  inject "," connection send  tr! "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods reset_column_information_with_sqlserver_cache_support":{"type":"method","name":"reset_column_information_with_sqlserver_cache_support","children":[],"call":[" reset_column_information_without_sqlserver_cache_support "," connection send "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods coerced_sqlserver_time_columns":{"type":"method","name":"coerced_sqlserver_time_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods coerced_sqlserver_date_columns":{"type":"method","name":"coerced_sqlserver_date_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods coerce_sqlserver_time":{"type":"method","name":"coerce_sqlserver_time","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods coerce_sqlserver_date":{"type":"method","name":"coerce_sqlserver_date","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":[" connection execute_procedure "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter repair_special_columns":{"type":"method","name":"repair_special_columns","children":[],"call":["sql gsub! ","col to_s ","special_cols to_a "," special_columns "," get_table_name "," special_columns  to_a "]}," ActiveRecord ConnectionAdapters SQLServerAdapter special_columns":{"type":"method","name":"special_columns","children":[],"call":[" columns select map "," columns select "," columns "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_order_direction":{"type":"method","name":"change_order_direction","children":[],"call":["(send\n  (send\n    (lvar :order) :split\n    (str \",\")) :collect) join ","String  new split join + ","String  new split join ","String  new split ","String  new ","fragment gsub ","order split collect ","order split "]}," ActiveRecord ConnectionAdapters SQLServerAdapter column_for":{"type":"method","name":"column_for","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," columns detect "," columns "]}," ActiveRecord ConnectionAdapters SQLServerAdapter column_definitions":{"type":"method","name":"column_definitions","children":[],"call":["ci delete ","ci []= ","ci [] to_i == ","ci [] to_i ","ci [] ","ci [] match [] ","ci [] match "," select_value "," without_type_conversion "," info_schema_query "," views_real_column_name "," table_name_or_views_table_name "," views include? "," views ","ci [] nil? ","ci symbolize_keys! ","results collect "," select ","(str \"\\n\") gsub "," unqualify_table_name "," unqualify_db_name ","match_data [] ","ci symbolize_keys ","ci symbolize_keys  delete ","ci symbolize_keys  []= ","ci symbolize_keys  [] to_i == ","ci symbolize_keys  [] to_i ","ci symbolize_keys  [] ","ci symbolize_keys  [] match [] ","ci symbolize_keys  [] match "," views_ views_real_column_name  ","  unqualify_table_name _or_views_ unqualify_table_name  ","ci symbolize_keys  [] nil? ","ci symbolize_keys  symbolize_keys! "," unqualify_ unqualify_table_name  "," unqualify_ unqualify_db_name  ","ci [] match  [] ","ci symbolize_keys  symbolize_keys "]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize_sqlserver_caches":{"type":"method","name":"initialize_sqlserver_caches","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_sqlserver_columns_cache_for":{"type":"method","name":"remove_sqlserver_columns_cache_for","children":[],"call":[" initialize_sqlserver_caches ","@sqlserver_columns_cache []= "," unqualify_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sql_for_association_limiting?":{"type":"method","name":"sql_for_association_limiting?","children":[],"call":["select_froms first include? ! ","select_froms first include? ","select_froms first ","select_froms size == ","select_froms size ","md [] split ","md [] ","sql match ","md [] split  first include? ! ","md [] split  first include? ","md [] split  first ","md [] split  size == ","md [] split  size ","sql match  [] split ","sql match  [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter order_to_min_set":{"type":"method","name":"order_to_min_set","children":[],"call":["(send\n  (lvar :orders_dirs) :map) join ","(str \"MIN(\") strip ","orders_dirs map "," orders_and_dirs_set ","(send\n  (lvar : orders_and_dirs_set ) :map) join "," orders_and_dirs_set  map "]}," ActiveRecord ConnectionAdapters SQLServerAdapter views_real_column_name":{"type":"method","name":"views_real_column_name","children":[],"call":["match_data [] ","view_definition match "," view_information [] "," view_information ","view_definition match  [] "," view_information []  match "]}," ActiveRecord ConnectionAdapters SQLServerAdapter orders_and_dirs_set":{"type":"method","name":"orders_and_dirs_set","children":[],"call":["ord strip ","match upcase strip ","match upcase ","ord sub! ","orders map ","order sub split map reject ","order sub split map ","order sub split ","order sub ","order sub split map reject  map "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_table_name":{"type":"method","name":"get_table_name","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter unqualify_db_name":{"type":"method","name":"unqualify_db_name","children":[],"call":["table_names first tr ","table_names first ","table_names length == ","table_names length ","table_name to_s split ","table_name to_s ","table_name to_s split  first tr ","table_name to_s split  first ","table_name to_s split  length == ","table_name to_s split  length "]}," ActiveRecord ConnectionAdapters SQLServerAdapter unqualify_table_name":{"type":"method","name":"unqualify_table_name","children":[],"call":["table_name to_s split last gsub ","table_name to_s split last ","table_name to_s split ","table_name to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter insert_sql?":{"type":"method","name":"insert_sql?","children":[],"call":["(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*INSERT\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*INSERT\")\n    (regopt :i))) nil? ","sql =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter table_name_or_views_table_name":{"type":"method","name":"table_name_or_views_table_name","children":[],"call":[" view_table_name "," views include? "," views "," unqualify_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter identity_column":{"type":"method","name":"identity_column","children":[],"call":[" columns detect "," columns "]}," ActiveRecord ConnectionAdapters SQLServerAdapter query_requires_identity_insert?":{"type":"method","name":"query_requires_identity_insert?","children":[],"call":["sql =~ ","id_column name "," identity_column "," get_table_name "," insert_sql? "," quote_table_name "," identity_column  name "," get_ get_table_name  "," quote_ get_table_name  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter set_identity_insert":{"type":"method","name":"set_identity_insert","children":[],"call":[" raise "," do_execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter with_identity_insert_enabled":{"type":"method","name":"with_identity_insert_enabled","children":[],"call":[" set_identity_insert "," quote_table_name "," table_name_or_views_table_name "," quote_ quote_table_name  ","  quote_table_name _or_views_ quote_table_name  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter default_name":{"type":"method","name":"default_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_indexes":{"type":"method","name":"remove_indexes","children":[],"call":[" remove_index ","index name ","(send\n  (send nil :indexes\n    (lvar :table_name)) :select) each ","index columns include? ","column_name to_s ","index columns "," indexes select "," indexes "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_default_constraint":{"type":"method","name":"remove_default_constraint","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name ","constraints each "," select_values "," quote_string ","row [] ","(send\n  (send nil :select_all\n    (dstr\n      (str \"EXEC sp_helpconstraint '\")\n      (begin\n        (send nil :quote_string\n          (lvar :table_name)))\n      (str \"','nomsg'\"))) :select) each ","row [] == "," select_all select "," select_all ","(send\n  (send\n    (send nil :select_all\n      (dstr\n        (str \"EXEC sp_helpconstraint '\")\n        (begin\n          (send nil :quote_string\n            (lvar :table_name)))\n        (str \"','nomsg'\"))) :flatten) :select) each "," select_all flatten select "," select_all flatten "," select_values  each "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_check_constraints":{"type":"method","name":"remove_check_constraints","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name ","constraints each "," select_values "," quote_string "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit_offset_for_association_limiting!":{"type":"method","name":"add_limit_offset_for_association_limiting!","children":[],"call":["sql replace ","(str \"\\n\") gsub ","options [] + ","options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_as_array":{"type":"method","name":"handle_as_array","children":[],"call":[" finish_statement_handle ","rows << ","values << ","row inject ","handle inject "]}," ActiveRecord ConnectionAdapters SQLServerAdapter raw_select":{"type":"method","name":"raw_select","children":[],"call":["rows << ","row []= ","value to_sqlserver_string ","value is_a? ","row each_with_index ","results inject "," handle_as_array ","handle column_names "," raw_execute "," finish_statement_handle "," handle_to_names_and_values "," raw_connection_run "," log ","c name ","handle columns map ","handle columns "," handle_more_results? ","fields_and_row_sets << "," handle_to_fields_and_rows_adonet "," handle_to_fields_and_rows_odbc "," connection_mode "," loop "," handle_as_array  inject ","  raw_execute _as_array ","  raw_connection_run _as_array "," raw_execute  column_names "," raw_connection_run  column_names "," finish_statement_ raw_execute  "," finish_statement_ raw_connection_run  ","  raw_execute _to_names_and_values ","  raw_connection_run _to_names_and_values "," raw_execute  columns map "," raw_connection_run  columns map "," raw_execute  columns "," raw_connection_run  columns "," handle_more_ handle_as_array ? ","  raw_execute _more_results? ","  raw_connection_run _more_results? ","handle column_names _and_row_sets << "," handle_to_handle column_names _and_rows_adonet ","  raw_execute _to_fields_and_rows_adonet ","  raw_connection_run _to_fields_and_rows_adonet "," handle_to_handle column_names _and_rows_odbc ","  raw_execute _to_fields_and_rows_odbc ","  raw_connection_run _to_fields_and_rows_odbc "]}," ActiveRecord ConnectionAdapters SQLServerAdapter do_execute":{"type":"method","name":"do_execute","children":[],"call":[" raw_connection do "," raw_connection "," with_auto_reconnect "," log "," raw_connection_do "]}," ActiveRecord ConnectionAdapters SQLServerAdapter without_type_conversion":{"type":"method","name":"without_type_conversion","children":[],"call":[" raw_connection convert_types= "," raw_connection "," raw_connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" raw_connection execute "," raw_connection "," with_auto_reconnect "," block_given? "," log "," raw_connection_run "]}," ActiveRecord ConnectionAdapters SQLServerAdapter info_schema_query":{"type":"method","name":"info_schema_query","children":[],"call":["ActiveRecord Base  silence "," log_info_schema_queries "]}," ActiveRecord ConnectionAdapters SQLServerAdapter update_sql":{"type":"method","name":"update_sql","children":[],"call":[" select_value "," execute ","@connection_options [] "," sqlserver_2000? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" select_value "," execute ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select":{"type":"method","name":"select","children":[],"call":["results << ","row_hash []= ","row [] ","fields each_with_index ","rows inject "," raw_select "," repair_special_columns ","final_result_set first ","final_result_set many? ","rs << "," zip_fields_and_rows ","fields_and_row_sets inject "," raw_select  inject "]}," ActiveRecord ConnectionAdapters SQLServerAdapter auto_reconnected?":{"type":"method","name":"auto_reconnected?","children":[],"call":["ActiveRecord Base  did_lose_sqlserver_connection "," reconnect! ","ActiveRecord Base  did_retry_sqlserver_connection "," sleep ","2 ** ","count <= "," auto_connect "," auto_connect_duration / "," auto_connect_duration "]}," ActiveRecord ConnectionAdapters SQLServerAdapter with_auto_reconnect":{"type":"method","name":"with_auto_reconnect","children":[],"call":[" raise "," auto_reconnected? ","e message =~ ","Regexp  new ","e message ","LOST_CONNECTION_MESSAGES  any? "," lost_connection_messages any? "," lost_connection_messages "," lost_connection_exceptions "," translate_exception is_a? "," translate_exception "]}," ActiveRecord ConnectionAdapters SQLServerAdapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" raw_connection []= "," raw_connection "," use_database "," initialize_dateformatter "," version_year "," _raw_select first first "," _raw_select first "," _raw_select "]}," ActiveRecord ConnectionAdapters SQLServerAdapter connect":{"type":"method","name":"connect","children":[],"call":[" raise "," configure_connection ","DBI  connect ","connection open ","connection connection_string= ","(send\n  (send\n    (const\n      (const\n        (const\n          (const nil :System) :Data) :SqlClient) :SqlConnectionStringBuilder) :new) :tap) to_s ","cs pooling= ","cs multiple_active_result_sets= ","cs initial_catalog= ","config [] ","cs add ","config [] to_clr_string ","cs password= ","cs user_i_d= ","cs integrated_security= ","System Data SqlClient SqlConnectionStringBuilder  new tap ","System Data SqlClient SqlConnectionStringBuilder  new ","System Data SqlClient SqlConnection  new tap ","System Data SqlClient SqlConnection  new ","c use_utc= ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","c use_time= ","c respond_to? ","(send\n  (send\n    (lvar :config) :[]\n    (sym :dsn)) :include?\n  (str \";\")) tap ","ODBC  connect ","ODBC Database  new drvconnect ","ODBC Database  new ","d attrs= ","h []= ","(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :config) :[]\n          (sym :dsn)) :split\n        (str \";\")) :map)\n    (args\n      (arg :atr))\n    (send\n      (lvar :atr) :split\n      (str \"=\"))) :reject) inject ","kv size != ","kv size ","(send\n  (send\n    (send\n      (lvar :config) :[]\n      (sym :dsn)) :split\n    (str \";\")) :map) reject ","atr split ","config [] split map ","config [] split ","d name= ","ODBC Driver  new tap ","ODBC Driver  new ","config [] include? ","@connection_options [] ","client execute do ","client execute ","TinyTds Client  new tap ","TinyTds Client  new ","config [] present? ","Rails  application class name split first ","Rails  application class name split ","Rails  application class name ","Rails  application class ","Rails  application ","config [] to_i / ","config [] to_i "," connection_mode "," configure_application_name ","config [] == ","driver attrs= ","(send\n  (block\n    (send\n      (send\n        (send nil :dsn) :split\n        (str \";\")) :map)\n    (args\n      (arg :atr))\n    (send\n      (lvar :atr) :split\n      (str \"=\"))) :reject) inject ","(send\n  (send\n    (send nil :dsn) :split\n    (str \";\")) :map) reject "," dsn split map "," dsn split "," dsn ","odbc connect ","(send\n  (array\n    (str \"::ODBC\")\n    (str \"::ODBC_UTF8\")\n    (str \"::ODBC_NONE\")) :detect) constantize ","odbc_ns constantize ","(str \"::ODBC\") detect "," Database  new drvconnect "," Database  new "," Driver  new tap "," Driver  new "," warn "," _raw_select first first "," _raw_select first "," _raw_select "," odbc_connect "," dblib_connect "," version_year "," class new_client "," class "," perform_connection_configuration ","DBI  connect _options [] "," class new_client _options [] ","(send\n  (array\n    (str \"::ODBC\")\n    (str \"::ODBC_UTF8\")\n    (str \"::ODBC_NONE\")) :detect) constantize  connect ","(send\n  (array\n    (str \"::ODBC\")\n    (str \"::ODBC_UTF8\")\n    (str \"::ODBC_NONE\")) :detect) constantize _ns constantize "," (send\n  (array\n    (str \"::ODBC\")\n    (str \"::ODBC_UTF8\")\n    (str \"::ODBC_NONE\")) :detect) constantize _connect "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_database_connections_and_rollback":{"type":"method","name":"remove_database_connections_and_rollback","children":[],"call":[" do_execute "," quote_table_name "," block_given? "," current_database "," quote_database_name ","SQLServer Utils  extract_identifiers "," quote_table_SQLServer Utils  extract_identifiers  "," quote_database_SQLServer Utils  extract_identifiers  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServerAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" do_execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" raise "," remove_database_connections_and_rollback ","retry_count >= ","err message =~ ","err message "," do_execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" do_execute ","name to_s == ","name to_s "," create_database "," drop_database "," current_database to_s "," current_database "," remove_database_connections_and_rollback "]}," ActiveRecord ConnectionAdapters SQLServerAdapter pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["idcol name "," identity_column "," primary_key "," identity_column  name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" do_execute ","sql << "," type_to_sql ","column scale ","column precision ","column limit ","column type "," quote_column_name "," quote "," quote_table_name ","default nil? "," column_for "," column_for  scale "," column_for  precision "," column_for  limit "," column_for  type "," quote_ column_for _name ","  column_for _for "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_order_by_for_association_limiting!":{"type":"method","name":"add_order_by_for_association_limiting!","children":[],"call":["sql << "," order_to_min_set ","options [] ","sql sub! ","sql match [] strip ","sql match [] ","sql match ","options [] blank? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s "," class type_limitable? "," class "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" do_execute "," quote_column_name "," index_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," column_for "," initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," quote_column_name "," quote "," default_name "," quote_table_name "," remove_default_constraint "," initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute ","sql_commands each ","sql_commands << "," quote_column_name "," quote ","options [] "," default_name "," quote_table_name "," remove_default_constraint "," options_include_default? ","change_column_sql << ","options [] == "," type_to_sql "," initialize_sqlserver_caches ","column_object type != ","type to_sym ","column_object type ","c name to_s == ","column_name to_s ","c name to_s ","c name "," columns detect "," columns "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," quote_column_name "," quote_table_name "," remove_indexes "," remove_default_constraint "," remove_check_constraints ","column_names flatten each ","column_names flatten "," initialize_sqlserver_caches "," raise ","ArgumentError  new ","column_names empty? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[" remove_sqlserver_columns_cache_for "," initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter create_table":{"type":"method","name":"create_table","children":[],"call":[" remove_sqlserver_columns_cache_for "," initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter columns":{"type":"method","name":"columns","children":[],"call":["SQLServerColumn  new ","ci [] ","ci except "," column_definitions collect "," column_definitions ","@sqlserver_columns_cache [] "," unqualify_table_name ","table_name blank? ","@@sqlserver_columns_cache [] ","ci except merge "," database_year "]}," ActiveRecord ConnectionAdapters SQLServerAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","column gsub! ","column ends_with? ","column strip! ","index [] split map ","index [] split ","index [] ","index [] =~ "," select inject "," select "," quote_table_name "," unqualify_table_name ","index with_indifferent_access ","data inject ","index with_indifferent_access es << ","index with_indifferent_access  [] split map ","index with_indifferent_access  [] split ","index with_indifferent_access  [] ","index with_indifferent_access  [] =~ "," quote_table_index []  "," unqualify_table_index []  ","index with_indifferent_access  with_indifferent_access "]}," ActiveRecord ConnectionAdapters SQLServerAdapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" views include? ","table_name to_s "," views "," tables include? "," unqualify_table_name "," tables "]}," ActiveRecord ConnectionAdapters SQLServerAdapter view_table_name":{"type":"method","name":"view_table_name","children":[],"call":[" get_table_name ","view_info [] "," view_information "," view_information  [] ","  view_information rmation "]}," ActiveRecord ConnectionAdapters SQLServerAdapter view_information":{"type":"method","name":"view_information","children":[],"call":["view_info []= "," select_values join "," select_values "," info_schema_query ","view_info [] length == ","view_info [] length ","view_info [] ","view_info [] blank? "," select_one ","@sqlserver_view_information_cache [] "," unqualify_table_name ","@@sqlserver_view_information_cache [] ","view_info with_indifferent_access "," quote_table_name "," warn ","view_info with_indifferent_access  []= ","view_info with_indifferent_access  [] length == ","view_info with_indifferent_access  [] length ","view_info with_indifferent_access  [] ","view_info with_indifferent_access  [] blank? ","@sqlserver_view_info with_indifferent_access rmation_cache [] "," unqualify_ unqualify_table_name  ","@@sqlserver_view_info with_indifferent_access rmation_cache [] ","view_info with_indifferent_access  with_indifferent_access "," quote_ unqualify_table_name  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter views":{"type":"method","name":"views","children":[],"call":[" select_values "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter tables":{"type":"method","name":"tables","children":[],"call":[" select_values "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" native_binary_database_type "," native_text_database_type "," native_string_database_type "," initialize_native_database_types freeze "," initialize_native_database_types "," native_date_database_type "," native_time_database_type "]}," ActiveRecord ConnectionAdapters SQLServerAdapter limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":["where_sql sub! ","match_data [] ","where_sql match ","where_sql match  [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter case_sensitive_equality_operator":{"type":"method","name":"case_sensitive_equality_operator","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter empty_insert_statement":{"type":"method","name":"empty_insert_statement","children":[],"call":[" quote_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_lock!":{"type":"method","name":"add_lock!","children":[],"call":["sql gsub! ","options [] ","options [] == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql replace ","options [] ","md [] ","sql match ","sql !~ ","sql << "," change_order_direction ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join ","(lvar :order_by_column) join strip ","(lvar :order_by_column) join ","order_by_column split last ","order_by_column split ","order_by_column =~ ","sql =~ ","Regexp  escape "," quote_column_name ","field split ","options [] split map ","options [] split ","sql sub! ","options [] + "," add_limit_offset_for_association_limiting! "," sql_for_association_limiting? ","options []= ","total_rows - ","total_rows - >= ","(send\n  (send\n    (lvar :options) :[]\n    (sym :limit)) :+\n  (send\n    (lvar :options) :[]\n    (sym :offset))) >= "," select_value to_i "," select_value "," add_lock! ","sql sub "," raise ","options [] to_i ","options [] =~ ","(send\n  (send\n    (lvar :options) :[]\n    (sym :limit)) :kind_of?\n  (const nil :Integer)) ! ","options [] kind_of? ","sql match  [] "," change_(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _direction ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join )) :split\n    (str \",\")) :map) join ","(lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _by_column) join strip ","(lvar :order_by_column split last ) join strip ","(lvar : quote_column_name ) join strip ","(lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _by_column) join ","(lvar :order_by_column split last ) join ","(lvar : quote_column_name ) join ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _by_column split last ","order_by_column split last  split last "," quote_column_name  split last ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _by_column split ","order_by_column split last  split "," quote_column_name  split ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join _by_column =~ ","order_by_column split last  =~ "," quote_column_name  =~ "," select_value to_i  - "," select_value to_i  - >= "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" do_execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" do_execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter outside_transaction?":{"type":"method","name":"outside_transaction?","children":[],"call":[" select_value == "," select_value "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":["results << ","row with_indifferent_access "," select inject "," select ","(str \"EXEC \") strip ","(send\n  (lvar :variables) :map) join "," quote ","variables map ","results first ","results many? ","get_rows call "," handle_more_results? ","rows []= ","r with_indifferent_access ","rows each_with_index "," handle_to_names_and_values "," lambda "," raw_connection_run "," log "," select map ","@connection_options [] ","result each "," block_given? ","@connection execute ","row is_a? ","result each map ","rs << ","row inject ","row kind_of? ","row with_indifferent_access esults << ","@connection execute s << ","row with_indifferent_access ow with_indifferow with_indifferent_access ent_access ","(strow with_indifferent_access  \"EXEC \") strow with_indifferent_access ip ","(send\n  (lvarow with_indifferent_access  :varow with_indifferent_access iables) :map) join ","varow with_indifferent_access iables map ","row with_indifferent_access esults firow with_indifferent_access st ","@connection execute s first ","row with_indifferent_access esults many? ","@connection execute s many? ","get_ handle_to_names_and_values  call ","get_row with_indifferent_access ows call "," handle_morow with_indifferent_access e_row with_indifferent_access esults? "," handle_more_@connection execute s? "," handle_to_names_and_values  []= ","row with_indifferent_access ows []= ","row with_indifferent_access  with_indifferow with_indifferent_access ent_access "," handle_to_names_and_values  each_with_index ","row with_indifferent_access ows each_with_index "," row with_indifferent_access aw_connection_row with_indifferent_access un ","row with_indifferent_access esult each ","@connection execute  each ","row with_indifferent_access ow is_a? ","row with_indifferent_access esult each map ","@connection execute  each map ","row with_indifferent_access s << ","row with_indifferent_access ow inject ","row with_indifferent_access ow kind_of? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter execute":{"type":"method","name":"execute","children":[],"call":[" finish_statement_handle "," raw_execute "," with_identity_insert_enabled "," query_requires_identity_insert? "," do_execute "," finish_statement_ raw_execute  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select_rows":{"type":"method","name":"select_rows","children":[],"call":[" raw_select last "," raw_select "," raw_select first last "," raw_select first "]}," ActiveRecord ConnectionAdapters SQLServerAdapter run_with_isolation_level":{"type":"method","name":"run_with_isolation_level","children":[],"call":[" do_execute "," block_given? "," user_options [] "," user_options "," raise ","VALID_ISOLATION_LEVELS  to_sentence ","VALID_ISOLATION_LEVELS  include? ! ","VALID_ISOLATION_LEVELS  include? ","isolation_level upcase "]}," ActiveRecord ConnectionAdapters SQLServerAdapter user_options":{"type":"method","name":"user_options","children":[],"call":["values []= ","row [] ","row [] gsub "," select_rows inject ","HashWithIndifferentAccess  new "," select_rows "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter finish_statement_handle":{"type":"method","name":"finish_statement_handle","children":[],"call":["handle finish ","handle finished? ! ","handle finished? ","handle respond_to? ","handle dispose ","handle close ","handle is_closed ! ","handle is_closed ","handle drop ","@connection_options [] ","handle cancel "," connection_mode "]}," ActiveRecord ConnectionAdapters SQLServerAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":[" raw_connection disconnect "," raw_connection ","@connection close ","@connection disconnect ","@connection_options [] "," raw_connection close "," connection_mode "," reset_transaction "]}," ActiveRecord ConnectionAdapters SQLServerAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" active? "," connect "," disconnect! "," reset_transaction "]}," ActiveRecord ConnectionAdapters SQLServerAdapter active?":{"type":"method","name":"active?","children":[],"call":[" raw_connection execute finish "," raw_connection execute "," raw_connection "," lost_connection_exceptions "," raw_connection_do ","connected ! ","@connection closed? ! ","@connection closed? ","@connection_options [] ","@connection active? "," connection_errors "]}," ActiveRecord ConnectionAdapters SQLServerAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" do_execute ","tables each "," tables_with_referential_integrity "," quote_table_name "," tables_with_referential_integrity  each ","  tables_with_referential_integrity _with_referential_integrity "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_utf8_value":{"type":"method","name":"quoted_utf8_value","children":[],"call":[" quote_string "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec / ","value usec ","value respond_to? ","value acts_like? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name ","table_name =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["(send\n  (send\n    (send\n      (lvar :column_name) :to_s) :split\n    (str \".\")) :map) join ","column_name to_s split map ","column_name to_s split ","column_name to_s ","name =~ ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :split\n    (str \".\")) :map) join ","n =~ ","name to_s split map ","name to_s split ","name to_s ","@sqlserver_quoted_column_and_table_names [] ","n to_s gsub ","n to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["string to_s gsub ","string to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote":{"type":"method","name":"quote","children":[],"call":[" quoted_utf8_value ","column is_utf8? ","column respond_to? ","column class string_to_binary ","column class ","column type == ","column type "," quote_string ","value is_utf8? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_binary_database_type":{"type":"method","name":"native_binary_database_type","children":[],"call":[" sqlserver_2008? "," sqlserver_2005? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_text_database_type":{"type":"method","name":"native_text_database_type","children":[],"call":[" enable_default_unicode_types "," sqlserver_2008? "," sqlserver_2005? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_string_database_type":{"type":"method","name":"native_string_database_type","children":[],"call":[" enable_default_unicode_types "]}," ActiveRecord ConnectionAdapters SQLServerAdapter auto_connect":{"type":"method","name":"auto_connect","children":[],"call":["@@auto_connect is_a? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter inspect":{"type":"method","name":"inspect","children":[],"call":["@connection_options inspect "," database_year "," version "," class ","@edition inspect ","@product_version inspect ","@product_level inspect "," sqlserver_azure? inspect "," sqlserver_azure? ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter version":{"type":"method","name":"version","children":[],"call":[" class "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2008?":{"type":"method","name":"sqlserver_2008?","children":[],"call":[" database_year == "," database_year ","@database_year == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2005?":{"type":"method","name":"sqlserver_2005?","children":[],"call":[" database_year == "," database_year ","@database_year == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2000?":{"type":"method","name":"sqlserver_2000?","children":[],"call":[" database_year == "," database_year ","@database_year == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver?":{"type":"method","name":"sqlserver?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_year":{"type":"method","name":"database_year","children":[],"call":["DATABASE_VERSION_REGEXP  match [] to_i ","DATABASE_VERSION_REGEXP  match [] ","DATABASE_VERSION_REGEXP  match "," database_version "]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_version":{"type":"method","name":"database_version","children":[],"call":[" select_value "," info_schema_query "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_ddl_transactions?":{"type":"method","name":"supports_ddl_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","SUPPORTED_VERSIONS  to_sentence ","SUPPORTED_VERSIONS  include? "," database_year "," initialize_sqlserver_caches "," raw_connection "," connect "," use_database "," initialize_native_database_types ","DATABASE_VERSION_REGEXP  match [] to_i ","DATABASE_VERSION_REGEXP  match [] ","DATABASE_VERSION_REGEXP  match "," select_value "," info_schema_query ","year to_i ","year == ","@database_version match [] to_i ","@database_version match [] ","@database_version match ","@database_version =~ "," initialize_dateformatter ","Arel Visitors SQLServer  new ","Sqlserver SchemaCache  new ","@sqlserver_azure == ","(send\n  (send nil :select_value\n    (str \"SELECT @@version\")\n    (str \"SCHEMA\")) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! ! ","(send\n  (send nil :select_value\n    (str \"SELECT @@version\")\n    (str \"SCHEMA\")) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! "," select_value =~ ","SQLServer SchemaCache  new "," configure_connection "," perform_connection_configuration "," database_DATABASE_VERSION_REGEXP  match []  ","DATABASE_VERSION_REGEXP  match []  to_i ","DATABASE_VERSION_REGEXP  match []  == "," select_value  match [] to_i "," select_value  match [] "," select_value  match "," select_value  =~ ","(send\n  (send nil :select_value\n    (str \"SELECT @@version\")\n    (str \"SCHEMA\")) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! !  == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter type_limitable?":{"type":"method","name":"type_limitable?","children":[],"call":["LIMITABLE_TYPES  include? ","type to_s "]}," ActiveRecord ConnectionAdapters SQLServerColumn simplified_datetime":{"type":"method","name":"simplified_datetime","children":[],"call":[" table_klass coerced_sqlserver_time_columns include? "," name "," table_klass coerced_sqlserver_time_columns "," table_klass "," table_klass coerced_sqlserver_date_columns include? "," table_klass coerced_sqlserver_date_columns "," database_year >= "," database_year "]}," ActiveRecord ConnectionAdapters SQLServerColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":[" simplified_datetime "]}," ActiveRecord ConnectionAdapters SQLServerColumn extract_limit":{"type":"method","name":"extract_limit","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn table_klass":{"type":"method","name":"table_klass","children":[],"call":["@table_klass < "," table_name classify constantize "," table_name classify "," table_name "]}," ActiveRecord ConnectionAdapters SQLServerColumn table_name":{"type":"method","name":"table_name","children":[],"call":["@sqlserver_options [] "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_utf8?":{"type":"method","name":"is_utf8?","children":[],"call":[" sql_type =~ "," sql_type ","@sql_type =~ ","(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"nvarchar|ntext|nchar\")\n    (regopt :i))) ! ! ","(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"nvarchar|ntext|nchar\")\n    (regopt :i))) ! "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_special?":{"type":"method","name":"is_special?","children":[],"call":[" sql_type =~ "," sql_type ","@sql_type =~ "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_identity?":{"type":"method","name":"is_identity?","children":[],"call":["@sqlserver_options [] "]}," ActiveRecord ConnectionAdapters SQLServerColumn type_cast_code":{"type":"method","name":"type_cast_code","children":[],"call":[" class name "," class "," is_utf8? "," type == "," type "]}," ActiveRecord ConnectionAdapters SQLServerColumn type_cast":{"type":"method","name":"type_cast","children":[],"call":[" class string_to_utf8_encoding "," class "," is_utf8? "," type == "," type "]}," ActiveRecord ConnectionAdapters SQLServerColumn binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":["(lvar :value) pack ","value =~ ","value dup force_encoding ","value dup ","value respond_to? ","value force_encoding ","value encoding != ","value encoding ","(lvar :value dup force_encoding ) pack ","(lvar :value force_encoding ) pack ","value dup force_encoding  =~ ","value force_encoding  =~ ","value dup force_encoding  dup force_encoding ","value force_encoding  dup force_encoding ","value dup force_encoding  dup ","value force_encoding  dup ","value dup force_encoding  respond_to? ","value force_encoding  respond_to? ","value dup force_encoding  force_encoding ","value force_encoding  force_encoding ","value dup force_encoding  encoding != ","value force_encoding  encoding != ","value dup force_encoding  encoding ","value force_encoding  encoding "]}," ActiveRecord ConnectionAdapters SQLServerColumn string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":["value unpack [] ","value unpack ","value dup force_encoding ","value dup ","value respond_to? ","value dup force_encoding  unpack [] ","value dup force_encoding  unpack ","value dup force_encoding  dup force_encoding ","value dup force_encoding  dup ","value dup force_encoding  respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerColumn string_to_utf8_encoding":{"type":"method","name":"string_to_utf8_encoding","children":[],"call":["value force_encoding "]}," ActiveRecord ConnectionAdapters SQLServerColumn initialize":{"type":"method","name":"initialize","children":[],"call":["sqlserver_options symbolize_keys ","@sqlserver_options [] ","sqlserver_options symbolize_keys  [] "]}," ActiveRecord Base did_lose_sqlserver_connection":{"type":"method","name":"did_lose_sqlserver_connection","children":[],"call":[]}," ActiveRecord Base did_retry_sqlserver_connection":{"type":"method","name":"did_retry_sqlserver_connection","children":[],"call":[]}," ActiveRecord Base sqlserver_connection":{"type":"method","name":"sqlserver_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerActiveRecordExtensions ClassMethods add_limit_with_sqlserver_order_checking!":{"type":"method","name":"add_limit_with_sqlserver_order_checking!","children":[],"call":[" add_limit_without_sqlserver_order_checking! ","options []= "," add_order_with_sqlserver_unique_checking! gsub "," add_order_with_sqlserver_unique_checking! ","options [] ","scope [] ","options dup "," scope ","auto == "," connection respond_to? "," connection "," add_limit_without_sqlserver_options [] _checking! ","options dup  []= "," add_options [] _with_sqlserver_unique_checking! gsub "," add_options [] _with_sqlserver_unique_checking! ","options dup  [] "," scope  [] ","options dup  dup ","  scope  "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI TypeUtil ClassMethods type_name_to_module_with_sqlserver_types":{"type":"method","name":"type_name_to_module_with_sqlserver_types","children":[],"call":[" type_name_to_module_without_sqlserver_types "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI TypeUtil included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI Type SqlserverForcedString parse":{"type":"method","name":"parse","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI Type SqlserverTimestamp parse":{"type":"method","name":"parse","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI Timestamp to_sqlserver_string":{"type":"method","name":"to_sqlserver_string","children":[],"call":[" sprintf ","nanoseconds to_i / ","nanoseconds to_i "," to_s split "," to_s "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord JoinAssociationChanges InstanceMethods aliased_table_name_for_with_sqlserver_support":{"type":"method","name":"aliased_table_name_for_with_sqlserver_support","children":[],"call":["name [] + ","table_index + ","name [] "," active_record connection table_alias_length - "," active_record connection table_alias_length "," active_record connection "," active_record ","table_index > ","@join_dependency table_aliases [] ","@join_dependency table_aliases "," active_record connection table_alias_for "," parent_table_name "," pluralize "," reflection name "," reflection ","@join_dependency table_aliases [] zero? "," parent table_joins to_s downcase =~ ","Regexp  escape "," active_record connection quote_table_name ","name downcase "," parent table_joins to_s downcase "," parent table_joins to_s "," parent table_joins "," parent "," parent table_joins blank? ! "," parent table_joins blank? ","name [] +  [] + "," active_record connection table_alias_for  [] + ","@join_dependency table_aliases []  + ","name [] +  [] "," active_record connection table_alias_for  [] ","@join_dependency table_aliases []  > "," parent_table_name [] +  "," parent_table_ active_record connection table_alias_for  "," reflection name [] +  "," reflection  active_record connection table_alias_for  "," active_record connection quote_table_name [] +  "," active_record connection quote_table_ active_record connection table_alias_for  ","name [] +  downcase "," active_record connection table_alias_for  downcase "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord JoinAssociationChanges included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods add_order_with_sqlserver_unique_checking!":{"type":"method","name":"add_order_with_sqlserver_unique_checking!","children":[],"call":[" add_order_without_sqlserver_unique_checking! ","sql << ","(send\n  (lvar :orders_and_dirs_set) :inject\n  (array)) join ","array << ","(begin\n  (lvar :ord)) strip ","unique_order_hash []= ","unique_order_hash [] ","ord_table_name == ","ord_tn_and_cn first ","ord_tn_and_cn size > ","ord_tn_and_cn size ","o tr ","ord to_s split map ","ord to_s split ","ord to_s ","orders_and_dirs_set inject "," connection send "," connection ","select_table_name tr! ","order_sql blank? "," connection respond_to? ","(send\n  (lvar : connection send ) :inject\n  (array)) join "," connection send  inject "," connection send  tr! "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods add_limit_with_sqlserver_order_checking!":{"type":"method","name":"add_limit_with_sqlserver_order_checking!","children":[],"call":[" add_limit_without_sqlserver_order_checking! ","options []= "," add_order_with_sqlserver_unique_checking! gsub "," add_order_with_sqlserver_unique_checking! ","options [] ","scope [] ","options dup "," scope ","auto == "," connection respond_to? "," connection "," add_limit_without_sqlserver_options [] _checking! ","options dup  []= "," add_options [] _with_sqlserver_unique_checking! gsub "," add_options [] _with_sqlserver_unique_checking! ","options dup  [] "," scope  [] ","options dup  dup ","  scope  "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods reset_column_information_with_sqlserver_cache_support":{"type":"method","name":"reset_column_information_with_sqlserver_cache_support","children":[],"call":[" reset_column_information_without_sqlserver_cache_support "," connection send "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods coerced_sqlserver_time_columns":{"type":"method","name":"coerced_sqlserver_time_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods coerced_sqlserver_date_columns":{"type":"method","name":"coerced_sqlserver_date_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods coerce_sqlserver_time":{"type":"method","name":"coerce_sqlserver_time","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods coerce_sqlserver_date":{"type":"method","name":"coerce_sqlserver_date","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord ClassMethods execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":[" connection execute_procedure "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ActiveRecord included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions DBI Type SqlserverForcedTinyint parse":{"type":"method","name":"parse","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize_native_database_types":{"type":"method","name":"initialize_native_database_types","children":[],"call":["ActiveRecord ConnectionAdapters SQLServerAdapter  const_set "," native_binary_database_type "," native_date_database_type "," native_time_database_type "," native_text_database_type "," native_string_database_type "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_names_and_values_adonet":{"type":"method","name":"handle_to_names_and_values_adonet","children":[],"call":["names_and_values << ","h []= ","row [] ","names [] ","i < ","row size ","rows each ","options [] != ","options [] ","rows << ","names << ","handle get_name to_s ","handle get_name ","row << ","String  new ","System Array  [] ","value to_string to_s ","value to_string ","value to_s ","handle get_value ","handle visible_field_count times ","handle visible_field_count ","handle read ","options [] == ","handle has_rows ","names_and_handle get_value s << ","handle get_value  to_string to_s ","handle get_value  to_string ","handle get_value  to_s ","handle get_handle get_value  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_names_and_values_odbc":{"type":"method","name":"handle_to_names_and_values_odbc","children":[],"call":["row []= ","v to_sqlserver_string ","v respond_to? ","row [] ","i < ","row size ","rows each ","handle fetch_all ","names_and_values << ","h []= ","names [] ","c name ","handle columns map ","handle columns ","handle fetch ","options [] == ","options [] ","handle fetch_hash ","handle each_hash ","@connection use_utc= ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","handle fetch  []= ","handle fetch_hash  []= ","row []  to_sqlserrow [] er_string ","row []  respond_to? ","handle fetch  [] ","handle fetch_hash  [] ","handle fetch  size ","handle fetch_hash  size ","handle fetch s each ","handle fetch_hash s each ","names_and_row [] alues << ","Actirow [] eRecord Base  default_timezone == ","Actirow [] eRecord Base  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_names_and_values":{"type":"method","name":"handle_to_names_and_values","children":[],"call":[" handle_to_names_and_values_adonet "," handle_to_names_and_values_odbc ","@connection_options [] "," handle_to_names_and_values_dblib "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_more_results?":{"type":"method","name":"handle_more_results?","children":[],"call":["handle next_result ","handle more_results ","@connection_options [] "," connection_mode "]}," ActiveRecord ConnectionAdapters SQLServerAdapter raw_connection_do":{"type":"method","name":"raw_connection_do","children":[],"call":["(send\n  (send\n    (ivar :@connection) :create_command) :tap) execute_non_query ","cmd command_text= ","@connection create_command tap ","@connection create_command ","@connection do ","@connection_options [] ","@connection execute do ","@connection execute ","@connection execute insert "," raw_connection do "," raw_connection "," connection_mode ","(send\n  (send\n    (send nil :raw_connection) :create_command) :tap) execute_non_query "," raw_connection create_command tap "," raw_connection create_command "]}," ActiveRecord ConnectionAdapters SQLServerAdapter raw_connection_run":{"type":"method","name":"raw_connection_run","children":[],"call":["(send\n  (send\n    (ivar :@connection) :create_command) :tap) execute_reader ","cmd command_text= ","@connection create_command tap ","@connection create_command ","@connection run ","@connection run_block "," block_given? ","@connection_options [] "," with_auto_reconnect ","@connection execute "," raw_connection run "," raw_connection "," raw_connection run_block "," connection_mode ","(send\n  (send\n    (send nil :raw_connection) :create_command) :tap) execute_reader "," raw_connection create_command tap "," raw_connection create_command "]}," ActiveRecord ConnectionAdapters SQLServerAdapter lost_connection_messages":{"type":"method","name":"lost_connection_messages","children":[],"call":["LOST_CONNECTION_MESSAGES  [] ","@connection_options [] "," connection_mode "]}," ActiveRecord ConnectionAdapters SQLServerAdapter lost_connection_exceptions":{"type":"method","name":"lost_connection_exceptions","children":[],"call":["exceptions map ","LOST_CONNECTION_EXCEPTIONS  [] ","@connection_options [] "," connection_mode ","LOST_CONNECTION_EXCEPTIONS  []  map "]}," ActiveRecord ConnectionAdapters SQLServerAdapter charset":{"type":"method","name":"charset","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServerAdapter recreate_database!":{"type":"method","name":"recreate_database!","children":[],"call":[" use_database "," create_database "," drop_database "," do_execute ","database to_s == ","database to_s "," current_database "]}," ActiveRecord ConnectionAdapters SQLServerAdapter newsequentialid_function":{"type":"method","name":"newsequentialid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServerAdapter newid_function":{"type":"method","name":"newid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServerAdapter use_database":{"type":"method","name":"use_database","children":[],"call":[" do_execute "," quote_table_name ","database blank? ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select_one_with_query_cache":{"type":"method","name":"select_one_with_query_cache","children":[],"call":[" select_one_without_query_cache "," cache_sql ","args first "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result first present? "," raw_select "," raw_select  first "," raw_select  first present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_date_database_type":{"type":"method","name":"native_date_database_type","children":[],"call":[" sqlserver_2008? "," sqlserver_2005? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_time_database_type":{"type":"method","name":"native_time_database_type","children":[],"call":[" sqlserver_2008? "," sqlserver_2005? "]}," ActiveRecord ConnectionAdapters SQLServerColumn database_year":{"type":"method","name":"database_year","children":[],"call":["@sqlserver_options [] "]}," ActiveRecord ConnectionAdapters SQLServerColumn default_function":{"type":"method","name":"default_function","children":[],"call":["@sqlserver_options [] "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ODBC Database run_block":{"type":"method","name":"run_block","children":[],"call":["sth drop "," run "," run  drop "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ODBC Statement finished?":{"type":"method","name":"finished?","children":[],"call":[" connected? "]}," ActiveRecord ConnectionAdapters SQLServerCoreExtensions ODBC TimeStamp to_sqlserver_string":{"type":"method","name":"to_sqlserver_string","children":[],"call":[" sprintf ","nanoseconds to_i / ","nanoseconds to_i "," to_s split "," to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_names_and_values_dblib":{"type":"method","name":"handle_to_names_and_values_dblib","children":[],"call":["handle each ","qo []= ","options [] == ","options [] ","ActiveRecord Base  default_timezone "," tap "]}," ActiveRecord ConnectionAdapters SQLServerAdapter connection_mode":{"type":"method","name":"connection_mode","children":[],"call":["@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter configure_application_name":{"type":"method","name":"configure_application_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_fields_and_rows_adonet":{"type":"method","name":"handle_to_fields_and_rows_adonet","children":[],"call":["rows << ","fields << ","handle get_name to_s ","handle get_name ","row << ","value to_string to_s ","value to_string ","value is_a? ","value to_s ","handle get_value ","handle visible_field_count times ","handle visible_field_count ","handle read ","handle has_rows ","value to_s  to_string to_s ","handle get_value  to_string to_s ","value to_s  to_string ","handle get_value  to_string ","value to_s  is_a? ","handle get_value  is_a? ","value to_s  to_s ","handle get_value  to_s ","handle get_value to_s  ","handle get_handle get_value  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter handle_to_fields_and_rows_odbc":{"type":"method","name":"handle_to_fields_and_rows_odbc","children":[],"call":["rows << ","row []= ","value to_sqlserver_string ","value is_a? ","row each_with_index ","results inject ","values << ","row inject ","handle inject ","c name ","handle columns map ","handle columns "]}," ActiveRecord ConnectionAdapters SQLServerAdapter zip_fields_and_rows":{"type":"method","name":"zip_fields_and_rows","children":[],"call":["results << ","row_hash []= ","row [] ","fields each_with_index ","rows inject "]}," Arel SqlCompiler SQLServerCompiler uncorrelated_inner_join_relation?":{"type":"method","name":"uncorrelated_inner_join_relation?","children":[],"call":["r relation2 sub! ","r relation2 ","r relation2 insert ","r relation2 index ","string_join_table_name == ","outter_join_table2 alias name ","outter_join_table2 alias ","outter_join_table2 name ","outter_join_table1 alias name ","outter_join_table1 alias ","outter_join_table1 name "," unqualify_table_name ","string_join_table_info include? ","r relation2 split first sub ","r relation2 split first ","r relation2 split ","r relation1 relation2 table ","r relation1 relation2 ","r relation1 ","r relation1 relation1 table ","r relation1 relation1 ","r relation2 starts_with? ","r relation2 is_a? ","r relation1 is_a? ","r is_a? "," unqualify_table_name  == ","r relation1 relation2 table  alias name ","r relation1 relation2 table  alias ","r relation1 relation2 table  name ","r relation1 relation1 table  alias name ","r relation1 relation1 table  alias ","r relation1 relation1 table  name ","r relation2 split first sub  include? "]}," Arel SqlCompiler SQLServerCompiler find_and_fix_uncorrelated_joins":{"type":"method","name":"find_and_fix_uncorrelated_joins","children":[],"call":["join_relation relation "," uncorrelated_inner_join_relation? ","join_relation present? "," relation "," relation  relation "," uncorrelated_inner_ relation ? "," relation  present? "]}," Arel SqlCompiler SQLServerCompiler correlated_safe_joins":{"type":"method","name":"correlated_safe_joins","children":[],"call":[" relation joins "," relation "," find_and_fix_uncorrelated_joins ","joins present? "," relation  relation joins  "," find_and_fix_uncorrelated_ relation joins  "," relation joins  present? "]}," Arel SqlCompiler SQLServerCompiler unique_orders":{"type":"method","name":"unique_orders","children":[],"call":["queued_orders << ","existing_columns [] << ","existing_columns [] ","existing_columns [] include? ","table_column unshift ","table_column size == ","table_column size ","table_column tr split ","table_column tr "," clause_without_expression split "," clause_without_expression ","orders inject ","table_column tr split  unshift ","table_column tr split  size == ","table_column tr split  size ","table_column tr split  tr split ","table_column tr split  tr "]}," Arel SqlCompiler SQLServerCompiler table_names_from_select_clauses":{"type":"method","name":"table_names_from_select_clauses","children":[],"call":["(send\n  (send\n    (send nil :relation) :select_clauses) :map) flatten compact uniq ","(send\n  (send\n    (send nil :relation) :select_clauses) :map) flatten compact ","(send\n  (send\n    (send nil :relation) :select_clauses) :map) flatten "," table_name_from_select_clause ","sc split map ","sc split "," relation select_clauses map "," relation select_clauses "," relation "]}," Arel SqlCompiler SQLServerCompiler table_name_from_select_clause":{"type":"method","name":"table_name_from_select_clause","children":[],"call":["tn tr ","parts first ","parts second ","parts third "," clause_without_expression split "," clause_without_expression ","parts second  tr "," clause_without_expression split  first "," clause_without_expression split  second "," clause_without_expression split  third "]}," Arel SqlCompiler SQLServerCompiler unqualify_table_name":{"type":"method","name":"unqualify_table_name","children":[],"call":["table_name to_s split last tr ","table_name to_s split last ","table_name to_s split ","table_name to_s "]}," Arel SqlCompiler SQLServerCompiler clause_without_expression":{"type":"method","name":"clause_without_expression","children":[],"call":["(send\n  (send\n    (send\n      (lvar :clause) :to_s) :split\n    (str \",\")) :map) join ","c strip ","c sub! ","c strip! ","clause to_s split map ","clause to_s split ","clause to_s "]}," Arel SqlCompiler SQLServerCompiler pk_for_table":{"type":"method","name":"pk_for_table","children":[],"call":[" engine connection primary_key "," engine connection "," engine "]}," Arel SqlCompiler SQLServerCompiler quote":{"type":"method","name":"quote","children":[],"call":[" engine connection quote_column_name "," engine connection "," engine "]}," Arel SqlCompiler SQLServerCompiler limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":[" build_query "," engine connection quote_table_name "," relation table name "," relation table "," relation "," engine connection "," engine "," taken_clause "," relation taken present? "," relation taken ","(str \" \") strip "," engine connection quote_column_name "," relation primary_key "]}," Arel SqlCompiler SQLServerCompiler rowtable_order_clauses":{"type":"method","name":"rowtable_order_clauses","children":[],"call":[" quote "," relation primary_key "," relation "," relation table name "," relation table "," pk_for_table "," table_names_from_select_clauses map "," table_names_from_select_clauses "," relation join? ","orders present? "," relation order_clauses "," relation order_clauses  present? "]}," Arel SqlCompiler SQLServerCompiler rowtable_select_clauses":{"type":"method","name":"rowtable_select_clauses","children":[],"call":["sc gsub "," relation table name "," relation table "," relation "," relation select_clauses map "," relation select_clauses "," expression_select? ","(send\n  (send\n    (lvar :sc) :split\n    (str \",\")) :map) join ","c split last strip ","c split last ","c split ","sc split map ","sc split "," all_select_clauses_aliased? "," relation join? "," Array  wrap ","sc strip! ","sc sub! "," table_name_from_select_clause ","(str \"DISTINCT \") strip "," taken_clause "," relation taken present? "," relation taken "," relation select_clauses first dup tap "," relation select_clauses first dup "," relation select_clauses first "," single_distinct_select? "]}," Arel SqlCompiler SQLServerCompiler select_sql_with_skipped":{"type":"method","name":"select_sql_with_skipped","children":[],"call":[" build_query "," relation skipped to_i "," relation skipped "," relation "," select_sql_without_skipped "," unique_orders join "," unique_orders "," rowtable_order_clauses "," rowtable_select_clauses join "," rowtable_select_clauses "," taken_clause "," single_distinct_select? ! "," single_distinct_select? "," relation taken present? "," relation taken "]}," Arel SqlCompiler SQLServerCompiler select_sql_without_skipped":{"type":"method","name":"select_sql_without_skipped","children":[],"call":[" build_query "," unique_orders join "," unique_orders ","windowed ! ","orders present? ","havings join ","havings blank? ","groups join ","groups blank? ","wheres join ","wheres blank? ","joins blank? "," locked "," locked blank? "," relation from_clauses "," relation ","selects join ","sc unshift ","sc shift ","selects tap ","selects first "," taken_clause "," taken_only? ","(send\n  (send\n    (send\n      (lvar :oc) :split\n      (str \",\")) :reject\n    (block-pass\n      (sym :blank?))) :map) join "," clause_without_expression sub strip "," clause_without_expression sub "," clause_without_expression ","c =~ ","oc split reject map ","oc split reject ","oc split ","orders map ","selects map "," eager_limiting_select? "," expression_select? "," relation order_clauses "," relation having_clauses "," relation group_clauses "," relation where_clauses "," correlated_safe_joins "," relation select_clauses "," unique_ relation order_clauses  join "," unique_ relation order_clauses  "," relation order_clauses  present? "," relation having_clauses  join "," relation having_clauses  blank? "," relation group_clauses  join "," relation group_clauses  blank? "," relation where_clauses  join "," relation where_clauses  blank? "," correlated_safe_joins  blank? "," lo clause_without_expression sub strip ked "," lo clause_without_expression sub strip ked blank? "," relation from_ clause_without_expression sub strip lauses ","sele clause_without_expression sub strip ts join "," relation select_clauses  join ","s clause_without_expression sub strip  unshift ","s clause_without_expression sub strip  shift ","sele clause_without_expression sub strip ts tap "," relation select_clauses  tap ","sele clause_without_expression sub strip ts first "," relation select_clauses  first "," taken_ clause_without_expression sub strip lause ","(send\n  (send\n    (send\n      (lvar :o clause_without_expression sub strip ) :split\n      (str \",\")) :reje clause_without_expression sub strip t\n    (blo clause_without_expression sub strip k-pass\n      (sym :blank?))) :map) join ","  clause_without_expression sub strip lause_without_expression sub strip ","  clause_without_expression sub strip lause_without_expression sub ","  clause_without_expression sub strip lause_without_expression "," clause_without_expression sub strip  =~ ","o clause_without_expression sub strip  split reje clause_without_expression sub strip t map ","o clause_without_expression sub strip  split reje clause_without_expression sub strip t ","o clause_without_expression sub strip  split "," relation order_clauses  map ","sele clause_without_expression sub strip ts map "," relation select_clauses  map "," eager_limiting_sele clause_without_expression sub strip t? "," expression_sele clause_without_expression sub strip t? "," relation order_ clause_without_expression sub strip lauses "," relation having_ clause_without_expression sub strip lauses "," relation group_ clause_without_expression sub strip lauses "," relation where_ clause_without_expression sub strip lauses ","  clause_without_expression sub strip orrelated_safe_joins "," correlated_safe_ correlated_safe_joins  "," relation sele clause_without_expression sub strip t_ clause_without_expression sub strip lauses "]}," Arel SqlCompiler SQLServerCompiler select_sql_with_complex_count":{"type":"method","name":"select_sql_with_complex_count","children":[],"call":[" build_query "," relation skipped to_i "," relation skipped "," relation "," unique_orders join "," unique_orders ","orders blank? ","havings join ","havings blank? ","groups join ","groups blank? ","wheres join ","wheres blank? ","joins blank? "," locked "," locked blank? "," relation from_clauses "," rowtable_order_clauses ","taken + "," relation taken present? "," relation taken "," relation taken to_i "," relation order_clauses "," relation having_clauses "," relation group_clauses "," relation where_clauses "," correlated_safe_joins "," relation  relation skipped to_i  to_i "," relation  relation skipped to_i  "," unique_ relation order_clauses  join "," unique_ relation order_clauses  "," relation order_clauses  blank? "," relation having_clauses  join "," relation having_clauses  blank? "," relation group_clauses  join "," relation group_clauses  blank? "," relation where_clauses  join "," relation where_clauses  blank? "," correlated_safe_joins  blank? "," relation taken to_i  + "," relation  relation taken to_i  present? "," relation  relation taken to_i  "," relation  relation taken to_i  to_i "," correlated_safe_ correlated_safe_joins  "]}," Arel SqlCompiler SQLServerCompiler all_select_clauses_aliased?":{"type":"method","name":"all_select_clauses_aliased?","children":[],"call":["c include? ","sc split all? ","sc split "," relation select_clauses all? "," relation select_clauses "," relation "]}," Arel SqlCompiler SQLServerCompiler single_distinct_select?":{"type":"method","name":"single_distinct_select?","children":[],"call":[" relation select_clauses first to_s include? "," relation select_clauses first to_s "," relation select_clauses first "," relation select_clauses "," relation "," relation select_clauses size == "," relation select_clauses size "]}," Arel SqlCompiler SQLServerCompiler eager_limiting_select?":{"type":"method","name":"eager_limiting_select?","children":[],"call":[" relation group_clauses blank? "," relation group_clauses "," relation "," taken_only? "," single_distinct_select? "]}," Arel SqlCompiler SQLServerCompiler expression_select?":{"type":"method","name":"expression_select?","children":[],"call":["sc match "," relation select_clauses any? "," relation select_clauses "," relation "]}," Arel SqlCompiler SQLServerCompiler taken_clause":{"type":"method","name":"taken_clause","children":[],"call":[" relation taken to_i "," relation taken "," relation "]}," Arel SqlCompiler SQLServerCompiler taken_only?":{"type":"method","name":"taken_only?","children":[],"call":[" relation skipped blank? "," relation skipped "," relation "," relation taken present? "," relation taken "]}," Arel SqlCompiler SQLServerCompiler complex_count_sql?":{"type":"method","name":"complex_count_sql?","children":[],"call":[" relation joins blank? "," relation joins "," relation "," relation wheres present? "," relation wheres "," relation taken present? "," relation taken ","projections size == ","projections size ","projections first is_a? ","projections first "," relation projections "," relation projections  size == "," relation projections  size "," relation projections  first is_a? "," relation projections  first "," relation  relation projections  "]}," Arel SqlCompiler SQLServerCompiler delete_sql":{"type":"method","name":"delete_sql","children":[],"call":[" build_query "," relation wheres collect join "," relation wheres collect "," relation wheres "," relation "," relation wheres blank? "," relation table_sql ","(str \"DELETE \") strip "," taken_clause "," relation taken present? "," relation taken "]}," Arel SqlCompiler SQLServerCompiler select_sql":{"type":"method","name":"select_sql","children":[],"call":[" select_sql_without_skipped "," select_sql_with_skipped "," relation skipped "," relation "," select_sql_with_complex_count "," complex_count_sql? "]}," Arel Lock initialize":{"type":"method","name":"initialize","children":[],"call":[" == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["LostConnection  new "," lost_connection_messages ","InvalidForeignKey  new ","RecordNotUnique  new ","DeadlockVictim  new ","NoDatabaseError  new ","ValueTooLong  new ","RangeError  new ","NotNullViolation  new ","MismatchedForeignKey  new ","pk_id object ","pk_id schema ","fk_id object ","fk_id schema ","SQLServer Utils  extract_identifiers ","StatementTimeout  new ","ConnectionNotEstablished  new "]}," ActiveRecord ConnectionAdapters SQLServerAdapter cs_equality_operator":{"type":"method","name":"cs_equality_operator","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":[" identity_column try "," identity_column "," columns detect try "," columns detect "," columns "," schema_cache columns [] detect try "," schema_cache columns [] detect "," schema_cache columns [] "," schema_cache columns "," schema_cache "," schema_cache columns find try "," schema_cache columns find "]}," ActiveRecord ConnectionAdapters SQLServerAdapter reset!":{"type":"method","name":"reset!","children":[],"call":[" remove_database_connections_and_rollback "," do_execute "," reset_transaction "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_count_distinct?":{"type":"method","name":"supports_count_distinct?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements identity_column":{"type":"method","name":"identity_column","children":[],"call":[" columns detect "," columns "," schema_cache columns [] detect "," schema_cache columns [] "," schema_cache columns "," schema_cache "," schema_cache columns find "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements set_identity_insert":{"type":"method","name":"set_identity_insert","children":[],"call":[" raise "," do_execute "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements with_identity_insert_enabled":{"type":"method","name":"with_identity_insert_enabled","children":[],"call":[" set_identity_insert "," quote_table_name "," table_name_or_views_table_name "," quote_ quote_table_name  ","  quote_table_name _or_views_ quote_table_name  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements insert_sql?":{"type":"method","name":"insert_sql?","children":[],"call":["(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*INSERT\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*INSERT\")\n    (regopt :i))) nil? ","sql =~ ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements query_requires_identity_insert?":{"type":"method","name":"query_requires_identity_insert?","children":[],"call":[" quote_table_name ","sql =~ ","id_column name "," identity_column "," get_table_name "," insert_sql? ","id_column is_integer? "," quote_ get_table_name  "," identity_column  name "," get_ get_table_name  "," identity_column  is_integer? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements initialize_sqlserver_caches":{"type":"method","name":"initialize_sqlserver_caches","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_sqlserver_columns_cache_for":{"type":"method","name":"remove_sqlserver_columns_cache_for","children":[],"call":[" initialize_sqlserver_caches ","@sqlserver_columns_cache []= "," unqualify_table_name "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements views_real_column_name":{"type":"method","name":"views_real_column_name","children":[],"call":["match_data [] ","view_definition match "," view_information [] "," view_information "," schema_cache view_information [] "," schema_cache view_information "," schema_cache ","view_definition match  [] "," view_information []  match "," schema_cache view_information []  match "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements table_name_or_views_table_name":{"type":"method","name":"table_name_or_views_table_name","children":[],"call":[" view_table_name "," views include? "," views "," unqualify_table_name "," schema_cache view_names include? "," schema_cache view_names "," schema_cache ","Utils  unqualify_table_name "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements view_information":{"type":"method","name":"view_information","children":[],"call":["view_info []= "," select_values join "," select_values "," info_schema_query ","view_info [] length == ","view_info [] length ","view_info [] ","view_info [] blank? ","view_info with_indifferent_access "," select_one ","@sqlserver_view_information_cache [] "," unqualify_table_name "," quote_table_name "," warn ","Utils  unqualify_table_name ","view_info with_indifferent_access  []= "," select_one  []= ","view_info with_indifferent_access  [] length == "," select_one  [] length == ","view_info with_indifferent_access  [] length "," select_one  [] length ","view_info with_indifferent_access  [] "," select_one  [] ","view_info with_indifferent_access  [] blank? "," select_one  [] blank? ","view_info with_indifferent_access  with_indifferent_access "," select_one  with_indifferent_access ","@sqlserver_view_info with_indifferent_access rmation_cache [] ","@sqlserver_ select_one rmation_cache [] "," unqualify_ unqualify_table_name  "," unqualify_Utils  unqualify_table_name  "," quote_ unqualify_table_name  "," quote_Utils  unqualify_table_name  ","Utils  unqualify_ unqualify_table_name  ","Utils  unqualify_Utils  unqualify_table_name  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements view_table_name":{"type":"method","name":"view_table_name","children":[],"call":[" get_table_name ","view_info [] "," view_information "," schema_cache view_information "," schema_cache "," view_information  [] "," schema_cache view_information  [] ","  view_information rmation ","  schema_cache view_information rmation "," schema_cache  view_information rmation "," schema_cache  schema_cache view_information rmation "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements detect_column_for!":{"type":"method","name":"detect_column_for!","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," columns detect "," columns "," schema_cache columns [] detect "," schema_cache columns [] "," schema_cache columns "," schema_cache "," schema_cache columns find "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements default_constraint_name":{"type":"method","name":"default_constraint_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements get_table_name":{"type":"method","name":"get_table_name","children":[],"call":["sql =~ ","Regexp  last_match [] ","Regexp  last_match "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements unqualify_db_name":{"type":"method","name":"unqualify_db_name","children":[],"call":["table_names first tr ","table_names first ","table_names length == ","table_names length ","table_name to_s split ","table_name to_s ","table_name to_s split  first tr ","table_name to_s split  first ","table_name to_s split  length == ","table_name to_s split  length "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements unqualify_table_name":{"type":"method","name":"unqualify_table_name","children":[],"call":["table_name to_s split last tr ","table_name to_s split last ","table_name to_s split ","table_name to_s "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements info_schema_query":{"type":"method","name":"info_schema_query","children":[],"call":["ActiveRecord Base  silence "," log_info_schema_queries "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_indexes":{"type":"method","name":"remove_indexes","children":[],"call":[" remove_index ","index name ","(send\n  (send nil :indexes\n    (lvar :table_name)) :select) each ","index columns include? ","column_name to_s ","index columns "," indexes select "," indexes "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_default_constraint":{"type":"method","name":"remove_default_constraint","children":[],"call":[" do_execute ","row [] "," quote_table_name ","(send\n  (send nil :select_all\n    (dstr\n      (str \"EXEC sp_helpconstraint '\")\n      (begin\n        (send nil :quote_string\n          (lvar :table_name)))\n      (str \"','nomsg'\"))) :select) each ","row [] == "," select_all select "," select_all "," quote_string ","(send\n  (send\n    (send nil :select_all\n      (dstr\n        (str \"EXEC sp_helpconstraint '\")\n        (begin\n          (send nil :quote_string\n            (lvar :table_name)))\n        (str \"','nomsg'\"))) :flatten) :select) each "," select_all flatten select "," select_all flatten ","(send\n  (send\n    (send nil :execute_procedure\n      (sym :sp_helpconstraint)\n      (lvar :table_name)\n      (str \"nomsg\")) :flatten) :select) each "," execute_procedure flatten select "," execute_procedure flatten "," execute_procedure "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_check_constraints":{"type":"method","name":"remove_check_constraints","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name ","constraints each "," select_values "," quote_string "," info_schema_query "," select_values  each "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements column_definitions":{"type":"method","name":"column_definitions","children":[],"call":["ci delete ","ci []= ","ci [] to_i == ","ci [] to_i ","ci [] ","match_data [] ","ci [] match "," select_value "," info_schema_query "," views_real_column_name "," table_name_or_views_table_name "," views include? "," views ","ci [] nil? ","ci symbolize_keys ","results collect "," select ","(str \"\\n\") gsub "," unqualify_table_name "," unqualify_db_name ","table_schema nil? "," unqualify_table_schema "," do_exec_query ","binds << ","table_schema blank? "," lowercase_schema_reflection_sql "," schema_cache view_names include? "," schema_cache view_names "," schema_cache ","Utils  unqualify_table_name ","Utils  unqualify_table_schema ","Utils  unqualify_db_name ","(const nil :TrueClass) include? ","ci [] class ","Regexp  last_match [] ","Regexp  last_match ","results map ","match_data [] gsub ","ci symbolize_keys  delete ","ci symbolize_keys  []= ","ci symbolize_keys  [] to_i == ","ci symbolize_keys  [] to_i ","ci symbolize_keys  [] ","ci [] match  [] ","ci symbolize_keys  [] match "," views_ views_real_column_name  ","  unqualify_table_name _or_views_ unqualify_table_name  "," Utils  unqualify_table_name _or_views_Utils  unqualify_table_name  ","ci symbolize_keys  [] nil? ","ci symbolize_keys  symbolize_keys "," do_exec_query  collect "," unqualify_ unqualify_table_name  "," unqualify_Utils  unqualify_table_name  "," unqualify_ unqualify_db_name  "," unqualify_Utils  unqualify_db_name  "," unqualify_table_schema  nil? ","Utils  unqualify_table_schema  nil? "," unqualify_ unqualify_table_schema  "," unqualify_Utils  unqualify_table_schema  "," unqualify_table_schema  blank? ","Utils  unqualify_table_schema  blank? "," lowercase_schema_reflection_(str \"\\n\") gsub  ","Utils  unqualify_ unqualify_table_name  ","Utils  unqualify_Utils  unqualify_table_name  ","Utils  unqualify_ unqualify_table_schema  ","Utils  unqualify_Utils  unqualify_table_schema  ","Utils  unqualify_ unqualify_db_name  ","Utils  unqualify_Utils  unqualify_db_name  ","ci symbolize_keys  [] class "," do_exec_query  map ","ci [] match  [] gsub "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements views":{"type":"method","name":"views","children":[],"call":[" select_values "," info_schema_query "," tables "," lowercase_schema_reflection_sql "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" do_execute ","sql << "," type_to_sql ","column scale ","column precision ","column limit ","column type "," quote_column_name "," quote "," quote_table_name ","default nil? "," detect_column_for! ","allow_null == ","allow_null nil? ! ","allow_null nil? ","default nil? ! "," detect_column_for!  scale "," detect_column_for!  precision "," detect_column_for!  limit "," detect_column_for!  type "," quote_ detect_column_for! _name "," detect_ detect_column_for! _for! "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s ","(str \"string\") include? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements rename_column":{"type":"method","name":"rename_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," detect_column_for! "," clear_cache! "," schema_cache clear_table_cache! "," schema_cache "," rename_column_indexes "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," quote_column_name "," quote "," default_constraint_name "," quote_table_name "," remove_default_constraint "," clear_cache! "," schema_cache clear_table_cache! "," schema_cache "," quote_default_value ","c name to_s == ","column_name to_s ","c name to_s ","c name "," schema_cache columns find "," schema_cache columns "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements change_column":{"type":"method","name":"change_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute ","sql_commands each ","sql_commands << "," quote_column_name "," quote ","options [] "," default_constraint_name "," quote_table_name "," options_include_default? "," remove_default_constraint ","column_object type != ","type to_sym ","column_object type ","change_column_sql << ","options [] == "," type_to_sql ","c name to_s == ","column_name to_s ","c name to_s ","c name "," columns detect "," columns "," clear_cache! "," schema_cache columns [] detect "," schema_cache columns [] "," schema_cache columns "," schema_cache ","(send\n  (send\n    (lvar :index) :columns) :collect) join ","index columns collect ","index columns ","index name ","indexes each ","sql_commands [] << ","sql_commands [] ","options [] nil? ! ","options [] nil? "," remove_indexes ","index columns include? "," indexes select "," indexes ","(send\n  (send\n    (lvar :index) :columns) :map) join ","index columns map "," quote_default_value "," schema_cache columns find "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements remove_column":{"type":"method","name":"remove_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," do_execute "," quote_column_name "," quote_table_name "," remove_indexes "," remove_default_constraint "," remove_check_constraints ","column_names flatten each ","column_names flatten "," raise ","ArgumentError  new ","column_names empty? "," clear_cache! ","ActiveSupport Deprecation  warn "," caller ","column_names flatten! ","column_name is_a? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements add_column":{"type":"method","name":"add_column","children":[],"call":[" remove_sqlserver_columns_cache_for "," clear_cache! "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements drop_table":{"type":"method","name":"drop_table","children":[],"call":[" remove_sqlserver_columns_cache_for "," clear_cache! "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements rename_table":{"type":"method","name":"rename_table","children":[],"call":[" do_execute "," rename_table_indexes "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements create_table":{"type":"method","name":"create_table","children":[],"call":[" remove_sqlserver_columns_cache_for "," clear_cache! "," schema_cache clear_table_cache! "," schema_cache "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements columns":{"type":"method","name":"columns","children":[],"call":["SQLServerColumn  new ","ci [] ","ci except merge "," database_year ","ci except "," column_definitions collect "," column_definitions ","@sqlserver_columns_cache [] "," unqualify_table_name ","table_name blank? "," columns_cache_key "," column_definitions map "," columns_ unqualify_table_name  "," columns_ columns_cache_key  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","column gsub! ","column ends_with? ","column strip! ","index [] split map ","index [] split ","index [] ","index [] =~ ","index with_indifferent_access "," select inject "," select "," quote_table_name "," unqualify_table_name ","data inject "," quote ","data reduce "," select_value ","index with_indifferent_access es << ","index with_indifferent_access  [] split map ","index with_indifferent_access  [] split ","index with_indifferent_access  [] ","index with_indifferent_access  [] =~ ","index with_indifferent_access  with_indifferent_access "," quote_table_index []  "," unqualify_table_index []  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" views include? "," views "," tables include? "," tables "," unqualify_table_name ","table_name blank? ","Utils  unqualify_table_name "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements tables":{"type":"method","name":"tables","children":[],"call":[" select_values "," info_schema_query "," lowercase_schema_reflection_sql "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" native_binary_database_type "," native_date_database_type "," native_time_database_type "," native_text_database_type "," native_string_database_type "," initialize_native_database_types freeze "," initialize_native_database_types "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_value_as_utf8?":{"type":"method","name":"quote_value_as_utf8?","children":[],"call":[" enable_default_unicode_types ","value is_utf8? "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_utf8_value":{"type":"method","name":"quoted_utf8_value","children":[],"call":[" quote_string "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec / ","value usec ","value respond_to? ","value acts_like? ","value to_s "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name ","table_name =~ "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["(send\n  (send\n    (send\n      (lvar :column_name) :to_s) :split\n    (str \".\")) :map) join ","name =~ ","column_name to_s split map ","column_name to_s split ","column_name to_s ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :split\n    (str \".\")) :map) join ","n =~ ","name to_s split map ","name to_s split ","name to_s ","@sqlserver_quoted_column_and_table_names [] ","n to_s gsub ","n to_s "," schema_cache quote_name "," schema_cache "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["string to_s gsub ","string to_s "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote":{"type":"method","name":"quote","children":[],"call":[" quoted_utf8_value ","column is_utf8? ","column respond_to? "," quote_value_as_utf8? ","column class string_to_binary ","column class ","column type == ","column type "," quote_string ","value is_utf8? ","column sql_type == ","column sql_type "," quoted_full_iso8601 "," quoted_datetime ","value blank? "," quoted_string_prefix ","value to_i to_s ","value to_i ","(sym :uuid) include? "]}," ActiveRecord ConnectionAdapters Sqlserver QueryCache select_one":{"type":"method","name":"select_one","children":[],"call":[" cache_sql ","args first "]}," ActiveRecord ConnectionAdapters Sqlserver Errors lost_connection_messages":{"type":"method","name":"lost_connection_messages","children":[],"call":["LOST_CONNECTION_MESSAGES  [] "," connection_mode ","@connection_options [] "]}," ActiveRecord ConnectionAdapters Sqlserver Errors lost_connection_exceptions":{"type":"method","name":"lost_connection_exceptions","children":[],"call":["(send\n  (lvar :exceptions) :map) compact ","e constantize ","exceptions map ","LOST_CONNECTION_EXCEPTIONS  [] "," connection_mode ","@connection_options [] ","(send\n  (lvar :LOST_CONNECTION_EXCEPTIONS  [] ) :map) compact ","LOST_CONNECTION_EXCEPTIONS  []  map "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements finish_statement_handle":{"type":"method","name":"finish_statement_handle","children":[],"call":["handle dispose ","handle respond_to? ","handle close ","handle is_closed ! ","handle is_closed ","handle drop ","handle finished? ! ","handle finished? "," connection_mode ","@connection_options [] ","handle cancel "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements handle_to_names_and_values_adonet":{"type":"method","name":"handle_to_names_and_values_adonet","children":[],"call":["rows << ","fields << ","handle get_name to_s ","handle get_name ","row << ","value to_string to_s ","value to_string ","value is_a? ","value to_s ","handle get_value ","handle visible_field_count times ","handle visible_field_count ","handle read ","handle has_rows ","names_and_values << ","h []= ","row [] ","names [] ","i < ","row size ","rows each ","options [] != ","options [] ","names << ","String  new ","System Array  [] ","options [] == ","value to_s  to_string to_s ","handle get_value  to_string to_s ","value to_s  to_string ","handle get_value  to_string ","value to_s  is_a? ","handle get_value  is_a? ","value to_s  to_s ","handle get_value  to_s ","handle get_value to_s  ","handle get_handle get_value  ","names_and_value to_s s << ","names_and_handle get_value s << "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements handle_to_names_and_values_odbc":{"type":"method","name":"handle_to_names_and_values_odbc","children":[],"call":["row []= ","v to_sqlserver_string ","v respond_to? ","row [] ","i < ","row size ","rows each ","handle fetch_all ","names_and_values << ","h []= ","names [] ","c name ","handle columns map ","handle columns ","handle fetch ","options [] == ","options [] ","handle fetch_hash ","handle each_hash ","@connection use_utc= ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","ActiveRecord Result  new ","c name downcase "," lowercase_schema_reflection ","handle fetch  []= ","handle fetch_hash  []= ","row []  to_sqlserrow [] er_string ","row []  respond_to? ","handle fetch  [] ","handle fetch_hash  [] ","handle fetch  size ","handle fetch_hash  size ","handle fetch s each ","handle fetch_hash s each ","names_and_row [] alues << ","Actirow [] eRecord Base  default_timezone == ","Actirow [] eRecord Base  default_timezone ","Actirow [] eRecord Result  new "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements handle_to_names_and_values":{"type":"method","name":"handle_to_names_and_values","children":[],"call":[" handle_to_names_and_values_adonet "," handle_to_names_and_values_odbc "," connection_mode ","@connection_options [] "," handle_to_names_and_values_dblib "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements handle_more_results?":{"type":"method","name":"handle_more_results?","children":[],"call":["handle next_result ","handle more_results "," connection_mode ","@connection_options [] "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements raw_connection_run":{"type":"method","name":"raw_connection_run","children":[],"call":["(send\n  (send\n    (send nil :raw_connection) :create_command) :tap) execute_reader ","cmd command_text= "," raw_connection create_command tap "," raw_connection create_command "," raw_connection "," raw_connection run "," raw_connection run_block "," block_given? "," connection_mode "," with_auto_reconnect ","(send\n  (send\n    (ivar :@connection) :create_command) :tap) execute_reader ","@connection create_command tap ","@connection create_command ","@connection run ","@connection run_block ","@connection_options [] ","@connection execute "," with_sqlserver_error_handling "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements raw_select":{"type":"method","name":"raw_select","children":[],"call":[" finish_statement_handle "," handle_to_names_and_values "," raw_connection_run "," log "," _raw_select "," finish_statement_ raw_connection_run  ","  raw_connection_run _to_names_and_values "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements raw_connection_do":{"type":"method","name":"raw_connection_do","children":[],"call":["(send\n  (send\n    (send nil :raw_connection) :create_command) :tap) execute_non_query ","cmd command_text= "," raw_connection create_command tap "," raw_connection create_command "," raw_connection "," raw_connection do "," connection_mode ","(send\n  (send\n    (ivar :@connection) :create_command) :tap) execute_non_query ","@connection create_command tap ","@connection create_command ","@connection do ","@connection_options [] ","@connection execute do ","@connection execute ","@connection execute insert "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements do_execute":{"type":"method","name":"do_execute","children":[],"call":[" raw_connection_do "," with_auto_reconnect "," log "," with_sqlserver_error_handling "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements valid_isolation_levels":{"type":"method","name":"valid_isolation_levels","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements update_sql":{"type":"method","name":"update_sql","children":[],"call":[" select_value "," execute ","@connection_options [] "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" select_value "," execute ","@connection_options [] "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements select":{"type":"method","name":"select","children":[],"call":[" raw_select "," exec_query to_a "," exec_query "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements charset":{"type":"method","name":"charset","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements create_database":{"type":"method","name":"create_database","children":[],"call":[" do_execute "," quote_table_name "," quote_database_name "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements drop_database":{"type":"method","name":"drop_database","children":[],"call":[" raise "," remove_database_connections_and_rollback ","retry_count >= ","err message =~ ","err message "," do_execute "," quote_table_name "," quote_database_name "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements recreate_database!":{"type":"method","name":"recreate_database!","children":[],"call":[" use_database "," create_database "," drop_database "," do_execute ","database to_s == ","database to_s "," current_database "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" do_execute "," remove_database_connections_and_rollback "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements newsequentialid_function":{"type":"method","name":"newsequentialid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements newid_function":{"type":"method","name":"newid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements run_with_isolation_level":{"type":"method","name":"run_with_isolation_level","children":[],"call":[" do_execute "," block_given? "," user_options [] "," user_options "," raise "," valid_isolation_levels to_sentence "," valid_isolation_levels "," valid_isolation_levels include? ! "," valid_isolation_levels include? ","isolation_level upcase "," user_options_isolation_level "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements user_options":{"type":"method","name":"user_options","children":[],"call":["values []= ","row [] ","row [] gsub "," select_rows inject ","HashWithIndifferentAccess  new "," select_rows "," info_schema_query "," sqlserver_azure? ","row instance_of? ","row values [] ","row values ","row values [] gsub ","rows reduce ","rows first ","rows last empty? ","rows last ","rows size == ","rows size "," select_rows reduce "," select_rows first  inject "," select_ select_rows  inject "," select_rows first  "," select_ select_rows  ","rows first  reduce "," select_rows  reduce ","rows first  first "," select_rows  first ","rows first  last empty? "," select_rows  last empty? ","rows first  last "," select_rows  last ","rows first  size == "," select_rows  size == ","rows first  size "," select_rows  size "," select_rows first  reduce "," select_ select_rows  reduce "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements use_database":{"type":"method","name":"use_database","children":[],"call":[" do_execute "," quote_table_name ","database blank? ","@connection_options [] "," sqlserver_azure? "," quote_database_name "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":["results first ","results many? ","get_rows call "," handle_more_results? ","results << ","rows []= ","r with_indifferent_access ","rows each_with_index "," handle_to_names_and_values "," lambda "," raw_connection_run "," log ","(str \"EXEC \") strip ","(send\n  (lvar :variables) :map) join "," quote ","variables map "," select map "," select ","row with_indifferent_access ","row is_a? ","result each map ","result each "," block_given? ","@connection execute ","@connection_options [] ","(and\n  (send\n    (lvar :variables) :any?)\n  (send\n    (send\n      (lvar :variables) :first) :is_a?\n    (const nil :Hash))) join ","variables first map ","variables first ","variables first is_a? ","variables any? ","row with_indifferent_access esults firow with_indifferent_access st ","@connection execute s first ","row with_indifferent_access esults many? ","@connection execute s many? ","get_ handle_to_names_and_values  call ","get_row with_indifferent_access ows call "," handle_morow with_indifferent_access e_row with_indifferent_access esults? "," handle_more_@connection execute s? ","row with_indifferent_access esults << ","@connection execute s << "," handle_to_names_and_values  []= ","row with_indifferent_access ows []= ","row with_indifferent_access  with_indifferow with_indifferent_access ent_access "," handle_to_names_and_values  each_with_index ","row with_indifferent_access ows each_with_index "," row with_indifferent_access aw_connection_row with_indifferent_access un ","(strow with_indifferent_access  \"EXEC \") strow with_indifferent_access ip ","(send\n  (lvarow with_indifferent_access  :varow with_indifferent_access iables) :map) join ","varow with_indifferent_access iables map ","row with_indifferent_access ow with_indifferow with_indifferent_access ent_access ","row with_indifferent_access ow is_a? ","row with_indifferent_access esult each map ","@connection execute  each map ","row with_indifferent_access esult each ","@connection execute  each ","(and\n  (send\n    (lvarow with_indifferent_access  :varow with_indifferent_access iables) :any?)\n  (send\n    (send\n      (lvarow with_indifferent_access  :varow with_indifferent_access iables) :firow with_indifferent_access st) :is_a?\n    (const nil :Hash))) join ","varow with_indifferent_access iables firow with_indifferent_access st map ","varow with_indifferent_access iables firow with_indifferent_access st ","varow with_indifferent_access iables firow with_indifferent_access st is_a? ","varow with_indifferent_access iables any? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":["where_sql sub! ","match_data [] ","where_sql match ","where_sql match  [] "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements case_sensitive_equality_operator":{"type":"method","name":"case_sensitive_equality_operator","children":[],"call":[" cs_equality_operator "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements empty_insert_statement_value":{"type":"method","name":"empty_insert_statement_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" do_execute "," current_savepoint_name "," disable_auto_reconnect "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" do_execute "," current_savepoint_name "," disable_auto_reconnect "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" do_execute "," disable_auto_reconnect "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements outside_transaction?":{"type":"method","name":"outside_transaction?","children":[],"call":[" select_value == "," select_value "," info_schema_query "," uncached "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":[" do_execute "," with_identity_insert_enabled "," query_requires_identity_insert? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":[" raw_select "," do_exec_query "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result first present? "," raw_select "," raw_select  first "," raw_select  first present? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits joins_per_query":{"type":"method","name":"joins_per_query","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits sql_query_length":{"type":"method","name":"sql_query_length","children":[],"call":["65536 * "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits in_clause_length":{"type":"method","name":"in_clause_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits columns_per_multicolumn_index":{"type":"method","name":"columns_per_multicolumn_index","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits indexes_per_table":{"type":"method","name":"indexes_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits columns_per_table":{"type":"method","name":"columns_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits table_name_length":{"type":"method","name":"table_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits column_name_length":{"type":"method","name":"column_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseLimits table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ODBC Database run_block":{"type":"method","name":"run_block","children":[],"call":["sth drop "," run "," run  drop "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ODBC Database parent_modules_error_exceptions":{"type":"method","name":"parent_modules_error_exceptions","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ODBC Database parent_modules":{"type":"method","name":"parent_modules","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ODBC Statement finished?":{"type":"method","name":"finished?","children":[],"call":["Database  parent_modules_error_exceptions "," connected? "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ODBC TimeStamp to_sqlserver_string":{"type":"method","name":"to_sqlserver_string","children":[],"call":[" sprintf ","nanoseconds to_i / ","nanoseconds to_i "," to_s split "," to_s "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods reset_column_information_with_sqlserver_cache_support":{"type":"method","name":"reset_column_information_with_sqlserver_cache_support","children":[],"call":[" reset_column_information_without_sqlserver_cache_support "," connection send "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods coerced_sqlserver_time_columns":{"type":"method","name":"coerced_sqlserver_time_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods coerced_sqlserver_date_columns":{"type":"method","name":"coerced_sqlserver_date_columns","children":[],"call":[" read_inheritable_attribute "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods coerce_sqlserver_time":{"type":"method","name":"coerce_sqlserver_time","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "," coerced_sqlserver_time_columns "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods coerce_sqlserver_date":{"type":"method","name":"coerce_sqlserver_date","children":[],"call":[" write_inheritable_attribute ","Set  new ","attributes map "," coerced_sqlserver_date_columns "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord ClassMethods execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":[" connection execute_procedure "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ActiveRecord included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements initialize_native_database_types":{"type":"method","name":"initialize_native_database_types","children":[],"call":["ActiveRecord ConnectionAdapters SQLServerAdapter  const_set "," native_binary_database_type "," native_date_database_type "," native_time_database_type "," native_text_database_type "," native_string_database_type "]}," Arel Visitors SQLServer projection_without_expression":{"type":"method","name":"projection_without_expression","children":[],"call":["Arel  sql ","(send\n  (send\n    (lvar :projection) :split\n    (str \",\")) :map) join ","x strip ","x sub! ","x strip! ","projection split map ","projection split ","Arel Nodes SqlLiteral  new ","(send\n  (send\n    (send nil :visit\n      (lvar :projection)) :split\n    (str \",\")) :map) join "," visit split map "," visit split "," visit ","(send\n  (send\n    (send nil :visit\n      (lvar :projection)\n      (lvar :a)) :split\n    (str \",\")) :map) join "]}," Arel Visitors SQLServer rowtable_orders":{"type":"method","name":"rowtable_orders","children":[],"call":["(send\n  (send\n    (send\n      (lvar :o) :orders) :empty?) :!) uniq ","c asc ","t columns first ","t columns ","t primary_key "," table_from_select_statement ","o orders ","o orders empty? ! ","o orders empty? ","o cores first ","o cores "," table_from_select_statement primary_key asc "," table_from_select_statement primary_key "," join_in_select_statement? ","(send\n  (send\n    (send\n      (lvar :o) :orders) :emp table_from_select_statement y?) :!) uniq "," table_from_select_statement  columns firs table_from_select_statement  "," table_from_select_statement  columns "," table_from_select_statement  primary_key ","  table_from_select_statement able_from_selec table_from_select_statement _s table_from_select_statement a table_from_select_statement emen table_from_select_statement  ","o orders emp table_from_select_statement y? ! ","o orders emp table_from_select_statement y? ","o cores firs table_from_select_statement  ","o o cores first s first ","o o cores first s ","  table_from_select_statement able_from_selec table_from_select_statement _s table_from_select_statement a table_from_select_statement emen table_from_select_statement  primary_key asc ","  table_from_select_statement able_from_selec table_from_select_statement _s table_from_select_statement a table_from_select_statement emen table_from_select_statement  primary_key "," join_in_selec table_from_select_statement _s table_from_select_statement a table_from_select_statement emen table_from_select_statement ? "]}," Arel Visitors SQLServer rowtable_projections":{"type":"method","name":"rowtable_projections","children":[],"call":["x gsub ","core projections map ","core projections "," table_from_select_statement name "," table_from_select_statement ","Arel  sql "," function_select_statement? ","(send\n  (send\n    (lvar :x) :split\n    (str \",\")) :map) join ","y split last strip ","y split last ","y split ","x split map ","x split "," all_projections_aliased_in_select_statement? "," join_in_select_statement? ","p strip! ","p sub! ","(str \"DISTINCT \") strip "," visit ","o limit ","x dup tap ","x dup "," single_distinct_select_statement? ","o cores first ","o cores ","p gsub! ","Arel Nodes SqlLiteral  new ","x relation instance_variable_set ","x relation ","x relation= ","x relation dup ","x respond_to? "," quote_column_name ","core projections first name ","core projections first "," select_primary_key_sql? ","Arel  star ","(send\n  (send\n    (send nil :visit\n      (lvar :x)) :split\n    (str \",\")) :map) join "," visit split map "," visit split ","p insert ","core groups blank? ","core groups "," windowed_single_distinct_select_statement? ","(send\n  (send\n    (send nil :visit\n      (lvar :x)\n      (lvar :a)) :split\n    (str \",\")) :map) join ","x dup  gsub ","o cores first  projections map ","o cores first  projections ","(send\n  (send\n    (lvar :x dup ) :split\n    (str \",\")) :map) join ","x dup  split map ","x dup  split ","x dup  dup tap ","x dup  dup ","o o cores first s first ","o o cores first s ","x dup  relation instance_variable_set ","x dup  relation ","x dup  relation= ","x dup  relation dup ","x dup  respond_to? ","o cores first  projections first name ","o cores first  projections first ","(send\n  (send\n    (send nil :visit\n      (lvar :x dup )) :split\n    (str \",\")) :map) join ","o cores first  groups blank? ","o cores first  groups ","(send\n  (send\n    (send nil :visit\n      (lvar :x dup )\n      (lvar :a)) :split\n    (str \",\")) :map) join "]}," Arel Visitors SQLServer find_and_fix_uncorrelated_joins_in_select_statement":{"type":"method","name":"find_and_fix_uncorrelated_joins_in_select_statement","children":[],"call":["j2 sub! ","j2 insert ","j2 index ","j1_tn == ","j2 match try ","j2 match ","j1 right name ","j1 right ","j2 include? ","Arel Nodes SqlLiteral  === ","Arel Nodes OuterJoin  === ","core froms right ","core froms ","core froms left ","(send\n  (const\n    (const\n      (const nil :Arel) :Nodes) :StringJoin) :===\n  (send\n    (lvar :core) :froms)) ! ","Arel Nodes StringJoin  === "," join_in_select_statement? ! "," join_in_select_statement? ","o cores first ","o cores ","core froms right  sub! ","core froms right  insert ","core froms right  index ","j1 right name  == ","core froms left _tn == ","core froms right  match try ","core froms right  match ","core froms left  right name ","core froms left  right ","core froms right  include? ","o cores first  froms right ","o cores first  froms ","o cores first  froms left ","(send\n  (const\n    (const\n      (const nil :Arel) :Nodes) :StringJoin) :===\n  (send\n    (lvar :o cores first ) :froms)) ! ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer complex_count_sql?":{"type":"method","name":"complex_count_sql?","children":[],"call":[" join_in_select_statement? ! "," join_in_select_statement? ","core wheres empty? ! ","core wheres empty? ","core wheres ","o limit ","Arel Nodes Count  === ","core projections first ","core projections ","core projections size == ","core projections size ","o cores first ","o cores ","o cores first  wheres empty? ! ","o cores first  wheres empty? ","o cores first  wheres ","o cores first  projections first ","o cores first  projections ","o cores first  projections size == ","o cores first  projections size ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer join_in_select_statement?":{"type":"method","name":"join_in_select_statement?","children":[],"call":["Arel Nodes Join  === ","core froms ","o cores first ","o cores ","core source right any? ","core source right ","core source ","o cores first  froms ","o o cores first s first ","o o cores first s ","o cores first  source right any? ","o cores first  source right ","o cores first  source "]}," Arel Visitors SQLServer eager_limiting_select_statement?":{"type":"method","name":"eager_limiting_select_statement?","children":[],"call":["core groups empty? ","core groups ","o offset ! ","o offset ","o limit "," single_distinct_select_statement? ","o cores first ","o cores "," single_distinct_select_everything_statement? ! "," single_distinct_select_everything_statement? ","o cores first  groups empty? ","o cores first  groups ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer function_select_statement?":{"type":"method","name":"function_select_statement?","children":[],"call":["Arel Nodes Function  === ","core projections any? ","core projections ","o cores first ","o cores ","o cores first  projections any? ","o cores first  projections ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer all_projections_aliased_in_select_statement?":{"type":"method","name":"all_projections_aliased_in_select_statement?","children":[],"call":["y include? ","x split all? ","x split ","projections all? ","o cores first projections ","o cores first ","o cores "," visit split all? "," visit split "," visit ","o cores first projections  all? ","o cores first o cores first projections  "]}," Arel Visitors SQLServer single_distinct_select_statement?":{"type":"method","name":"single_distinct_select_statement?","children":[],"call":["p1 include? ","p1 respond_to? ","p1 distinct ","projections size == ","projections size ","projections first ","o cores first projections ","o cores first ","o cores ","projections first  include? ","projections first  respond_to? ","projections first  distinct ","o cores first projections  size == ","o cores first projections  size ","o cores first projections  first ","o cores first o cores first projections  "]}," Arel Visitors SQLServer table_from_select_statement":{"type":"method","name":"table_from_select_statement","children":[],"call":["table_finder call ","core froms ","x left ","Arel Table  new "," lambda ","o cores first ","o cores ","o cores first  froms ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer source_with_lock_for_select_statement":{"type":"method","name":"source_with_lock_for_select_statement","children":[],"call":["source insert ","source match [] length ","source match [] ","source match "," visit ","o lock ","core froms ","o cores first ","o cores "," visit strip ","core source ","source match [] mb_chars length ","source match [] mb_chars "," visit strip  insert "," visit strip  match [] length "," visit strip  match [] "," visit strip  match ","o  visit  ","o cores first  froms ","o o cores first s first ","o o cores first s ","o cores first  source ","core  visit strip  "," visit strip  match [] mb_chars length "," visit strip  match [] mb_chars "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatementForComplexCount":{"type":"method","name":"visit_Arel_Nodes_SelectStatementForComplexCount","children":[],"call":["(str \"SELECT COUNT([count]) AS [count_id]\") compact join ","(str \"SELECT COUNT([count]) AS [count_id]\") compact "," visit ","o offset ","(send\n  (send\n    (lvar :o) :orders) :map) join ","o orders map ","o orders ","o orders empty? ! ","o orders empty? ","core having ","(send\n  (send\n    (lvar :core) :groups) :map) join ","core groups map ","core groups ","core groups empty? ","(send\n  (send\n    (lvar :core) :wheres) :map) join ","core wheres map ","core wheres ","core wheres empty? "," source_with_lock_for_select_statement ","(send\n  (lvar :orders) :map) join ","orders map ","o limit "," rowtable_orders ","o limit expr= ","Arel  sql ","o offset expr ","o limit expr ","o cores first ","o cores ","o limit expr + ","(send\n  (send\n    (lvar :o) : rowtable_orders ) :map) join ","o  rowtable_orders  map ","o  rowtable_orders  ","o  rowtable_orders  empty? ! ","o  rowtable_orders  empty? ","o cores first  having ","(send\n  (send\n    (lvar :o cores first ) :groups) :map) join ","o cores first  groups map ","o cores first  groups ","o cores first  groups empty? ","(send\n  (send\n    (lvar :o cores first ) :wheres) :map) join ","o cores first  wheres map ","o cores first  wheres ","o cores first  wheres empty? ","(send\n  (lvar : rowtable_orders ) :map) join "," rowtable_orders  map "," rowtable_ rowtable_orders  ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatementWithOffset":{"type":"method","name":"visit_Arel_Nodes_SelectStatementWithOffset","children":[],"call":["(str \"SELECT\") compact join ","(str \"SELECT\") compact "," visit ","o offset "," visit_Arel_Nodes_SelectStatementWithOutOffset ","(send\n  (lvar :orders) :map) join ","orders map ","(send\n  (send nil :rowtable_projections\n    (lvar :o)) :map) join "," rowtable_projections map "," rowtable_projections ","o limit "," single_distinct_select_statement? ! "," single_distinct_select_statement? "," rowtable_orders "," windowed_single_distinct_select_statement? ! "," windowed_single_distinct_select_statement? ","Arel Nodes Limit  new ","core set_quantifier ","o cores first ","o cores ","(send\n  (send nil :rowtable_projections\n    (lvar :o)\n    (lvar :a)) :map) join ","(send\n  (lvar : rowtable_orders ) :map) join "," rowtable_orders  map "," rowtable_ rowtable_orders  ","o cores first  set_quantifier ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatementWithOutOffset":{"type":"method","name":"visit_Arel_Nodes_SelectStatementWithOutOffset","children":[],"call":["(begin\n  (if\n    (send\n      (lvar :windowed) :!)\n    (str \"SELECT\") nil)) compact join ","(begin\n  (if\n    (send\n      (lvar :windowed) :!)\n    (str \"SELECT\") nil)) compact ","(send\n  (lvar :orders) :map) join "," visit ","orders map ","windowed ! ","orders empty? ! ","orders empty? ","core having ","(send\n  (lvar :groups) :map) join ","groups map ","groups empty? ","(send\n  (send\n    (lvar :core) :wheres) :map) join ","core wheres map ","core wheres ","core wheres empty? "," source_with_lock_for_select_statement ","(send\n  (lvar :projections) :map) join ","projections map ","o limit ","Arel Nodes Min  new ","Arel Nodes Max  new ","x descending? ","Arel  sql "," projection_without_expression ","x expr "," eager_limiting_select_statement? "," function_select_statement? ","o orders uniq ","o orders ","core groups ","core projections ","o cores first ","o cores "," find_and_fix_uncorrelated_joins_in_select_statement ","Arel Nodes SqlLiteral  new "," top_one_everything_for_through_join? "," windowed_single_distinct_select_statement? ","v == ","core set_quantifier ","(begin\n  (if\n    (lvar :windowed) nil\n    (str \"SELECT\"))) compact join ","(begin\n  (if\n    (lvar :windowed) nil\n    (str \"SELECT\"))) compact ","(begin\n  (if\n    (send\n      (l visit ar :windowed) :!)\n    (str \"SELECT\") nil)) compact join ","(begin\n  (if\n    (send\n      (l visit ar :windowed) :!)\n    (str \"SELECT\") nil)) compact ","(send\n  (lvar :o orders uniq ) :map) join ","(send\n  (l visit ar :orders) :map) join ","  visit isit ","o orders uniq  map ","o orders uniq  empty? ! ","o orders uniq  empty? ","o cores first  having ","core ha visit ing ","(send\n  (lvar :core groups ) :map) join ","(send\n  (l visit ar :groups) :map) join ","core groups  map ","core groups  empty? ","(send\n  (send\n    (lvar :o cores first ) :wheres) :map) join ","(send\n  (send\n    (l visit ar :core) :wheres) :map) join ","o cores first  wheres map ","o cores first  wheres ","o cores first  wheres empty? ","(send\n  (lvar :core projections ) :map) join ","(send\n  (l visit ar :projections) :map) join ","core projections  map "," projection_without_Arel  sql ession "," projection_without_Arel Nodes SqlLiteral  new ession ","x Arel  sql  ","x Arel Nodes SqlLiteral  new  ","o o orders uniq  uniq ","o o orders uniq  ","core core groups  ","o cores first  groups ","core core projections  ","o cores first  projections ","o o cores first s first ","o o cores first s "," top_one_e visit erything_for_through_join? "," visit  == ","o cores first  set_quantifier ","(begin\n  (if\n    (l visit ar :windowed) nil\n    (str \"SELECT\"))) compact join ","(begin\n  (if\n    (l visit ar :windowed) nil\n    (str \"SELECT\"))) compact "]}," Arel Visitors SQLServer visit_Arel_Nodes_LockWithSQLServer":{"type":"method","name":"visit_Arel_Nodes_LockWithSQLServer","children":[],"call":["o expr "]}," Arel Visitors SQLServer visit_Arel_Nodes_Lock":{"type":"method","name":"visit_Arel_Nodes_Lock","children":[],"call":[" visit ","o expr ","collector << ","o expr= ","Arel  sql ","o expr to_s =~ ","o expr to_s "]}," Arel Visitors SQLServer visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":[" visit ","o expr ","collector << "," node_value == "," node_value "]}," Arel Visitors SQLServer visit_Arel_Nodes_Offset":{"type":"method","name":"visit_Arel_Nodes_Offset","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" visit_Arel_Nodes_SelectStatementWithOutOffset "," visit_Arel_Nodes_SelectStatementWithOffset ","o offset "," visit_Arel_Nodes_SelectStatementForComplexCount "," complex_count_sql? "," visit_Arel_Nodes_SelectStatementDistinctNonPresentOrders "," distinct_non_present_orders? "," visit_Make_Fetch_Happen "," visit_Orders_And_Let_Fetch_Happen "," visit_Arel_Nodes_SelectCore ","o cores inject ","o cores ","collector << "," visit ","o with "," distinct_One_As_One_Is_So_Not_Fetch "," visit_Make_Fetch_Happen  << "," visit_Orders_And_Let_Fetch_Happen  << "," visit  << "]}," Arel SelectManager lock":{"type":"method","name":"lock","children":[],"call":[" lock_without_sqlserver ","@ast lock= ","Arel Nodes LockWithSQLServer  new ","Arel Visitors SQLServer  === ","Arel Nodes Lock  new ","Arel  sql "," engine_activerecord_sqlserver_adapter? "]}," Arel SelectManager order":{"type":"method","name":"order","children":[],"call":["@ast orders concat ","(send\n  (lvar :exprs) :map) flatten ","Arel Nodes Ordering  new ","Arel  sql ","x to_s ","direction =~ ","s split ","x split map ","x split ","table [] ","x name ","Arel Table  new ","x relation name ","x relation ","x relation table_alias ","exprs map ","@ast orders "," order_without_sqlserver ","Arel Visitors SQLServer  === ","Arel Nodes SqlLiteral  new ","c quote_column_name ","c quote_table_name "," engine connection "," engine ","(send\n  (lvar :expr) :map) flatten ","Arel Nodes Ascending  new ","Arel Nodes Descending  new ","d =~ ","expr map "," engine_activerecord_sqlserver_adapter? ","d == ","s mb_chars [] strip ","s mb_chars [] ","d length -@ ","d length ","s mb_chars ","d nil? ","1 upcase ","s =~ ","s strip! ","x strip =~ ","x strip ","Regexp  last_match [] upcase ","Regexp  last_match [] ","Regexp  last_match ","@ast orders  engine connection on engine connection at ","@ast ordArel  sql rs concat ","@ast ordtable [] rs concat ","@ast ords mb_chars [] strip rs concat ","@ast or1 upcase ers concat ","@ast orRegexp  last_match [] upcase ers concat ","(send\n  (lvar :Arel  sql s) :map) flatten ","(send\n  (lvar :table [] s) :map) flatten ","(send\n  (lvar :Arel Nodes SqlLiteral  new s) :map) flatten ","(sArel  sql nd\n  (lvar :Arel  sql xprs) :map) flattArel  sql n ","(stable [] nd\n  (lvar :table [] xprs) :map) flatttable [] n ","(ss mb_chars [] strip nd\n  (lvar :s mb_chars [] strip xprs) :map) flatts mb_chars [] strip n ","(sen1 upcase \n  (lvar :exprs) :map) flatten ","(senRegexp  last_match [] upcase \n  (lvar :exprs) :map) flatten ","ArArel  sql l NodArel  sql s OrdArel  sql ring  nArel  sql w ","Artable [] l Nodtable [] s Ordtable [] ring  ntable [] w ","Ars mb_chars [] strip l Nods mb_chars [] strip s Ords mb_chars [] strip ring  ns mb_chars [] strip w ","Arel No1 upcase es Or1 upcase ering  new ","Arel NoRegexp  last_match [] upcase es OrRegexp  last_match [] upcase ering  new ","ArArel  sql l  sql ","Artable [] l  sql ","Ars mb_chars [] strip l  sql ","dire engine connection tion =~ ","dirArel  sql ction =~ ","dirtable [] ction =~ ","dirs mb_chars [] strip ction =~ ","1 upcase irection =~ ","Regexp  last_match [] upcase irection =~ ","Arel Table  new  [] ","tablArel  sql  [] ","tabltable []  [] ","tabls mb_chars [] strip  [] ","x namArel  sql  ","x namtable []  ","x nams mb_chars [] strip  ","ArArel  sql l TablArel  sql   nArel  sql w ","Artable [] l Tabltable []   ntable [] w ","Ars mb_chars [] strip l Tabls mb_chars [] strip   ns mb_chars [] strip w ","x rArel  sql lation namArel  sql  ","x rtable [] lation namtable []  ","x rs mb_chars [] strip lation nams mb_chars [] strip  ","x rArel  sql lation ","x rtable [] lation ","x rs mb_chars [] strip lation ","x relation Arel Table  new _alias ","x rArel  sql lation tablArel  sql _alias ","x rtable [] lation tabltable [] _alias ","x rs mb_chars [] strip lation tabls mb_chars [] strip _alias ","Arel  sql s map ","table [] s map ","Arel Nodes SqlLiteral  new s map ","Arel  sql xprs map ","table [] xprs map ","s mb_chars [] strip xprs map ","@ast ordArel  sql rs ","@ast ordtable [] rs ","@ast ords mb_chars [] strip rs ","@ast or1 upcase ers ","@ast orRegexp  last_match [] upcase ers "," ordArel  sql r_without_sqlsArel  sql rvArel  sql r "," ordtable [] r_without_sqlstable [] rvtable [] r "," ords mb_chars [] strip r_without_sqlss mb_chars [] strip rvs mb_chars [] strip r "," or1 upcase er_without_sqlserver "," orRegexp  last_match [] upcase er_without_sqlserver ","ArArel  sql l Visitors SQLSArel  sql rvArel  sql r  === ","Artable [] l Visitors SQLStable [] rvtable [] r  === ","Ars mb_chars [] strip l Visitors SQLSs mb_chars [] strip rvs mb_chars [] strip r  === ","ArArel  sql l NodArel  sql s SqlLitArel  sql ral  nArel  sql w ","Artable [] l Nodtable [] s SqlLittable [] ral  ntable [] w ","Ars mb_chars [] strip l Nods mb_chars [] strip s SqlLits mb_chars [] strip ral  ns mb_chars [] strip w ","Arel No1 upcase es SqlLiteral  new ","Arel NoRegexp  last_match [] upcase es SqlLiteral  new "," engine connection  quote_ engine connection olumn_name ","c quotArel  sql _column_namArel  sql  ","c quottable [] _column_namtable []  ","c quots mb_chars [] strip _column_nams mb_chars [] strip  ","c quote_Arel Table  new _name "," engine connection  quote_table_name ","c quotArel  sql _tablArel  sql _namArel  sql  ","c quottable [] _tabltable [] _namtable []  ","c quots mb_chars [] strip _tabls mb_chars [] strip _nams mb_chars [] strip  "," engine  engine connection onne engine connection tion "," Arel  sql nginArel  sql  connArel  sql ction "," table [] ngintable []  conntable [] ction "," s mb_chars [] strip ngins mb_chars [] strip  conns mb_chars [] strip ction "," Arel  sql nginArel  sql  "," table [] ngintable []  "," s mb_chars [] strip ngins mb_chars [] strip  ","(send\n  (lvar :Arel  sql ) :map) flatten ","(send\n  (lvar :table [] ) :map) flatten ","(send\n  (lvar :Arel Nodes SqlLiteral  new ) :map) flatten ","(sArel  sql nd\n  (lvar :Arel  sql xpr) :map) flattArel  sql n ","(stable [] nd\n  (lvar :table [] xpr) :map) flatttable [] n ","(ss mb_chars [] strip nd\n  (lvar :s mb_chars [] strip xpr) :map) flatts mb_chars [] strip n ","(sen1 upcase \n  (lvar :expr) :map) flatten ","(senRegexp  last_match [] upcase \n  (lvar :expr) :map) flatten ","Arel Nodes As engine connection ending  new ","ArArel  sql l NodArel  sql s AscArel  sql nding  nArel  sql w ","Artable [] l Nodtable [] s Asctable [] nding  ntable [] w ","Ars mb_chars [] strip l Nods mb_chars [] strip s Ascs mb_chars [] strip nding  ns mb_chars [] strip w ","Arel No1 upcase es Ascen1 upcase ing  new ","Arel NoRegexp  last_match [] upcase es AscenRegexp  last_match [] upcase ing  new ","Arel Nodes Des engine connection ending  new ","ArArel  sql l NodArel  sql s DArel  sql scArel  sql nding  nArel  sql w ","Artable [] l Nodtable [] s Dtable [] sctable [] nding  ntable [] w ","Ars mb_chars [] strip l Nods mb_chars [] strip s Ds mb_chars [] strip scs mb_chars [] strip nding  ns mb_chars [] strip w ","Arel No1 upcase es Descen1 upcase ing  new ","Arel NoRegexp  last_match [] upcase es DescenRegexp  last_match [] upcase ing  new ","1 upcase  =~ ","Regexp  last_match [] upcase  =~ ","Arel  sql  map ","table []  map ","Arel Nodes SqlLiteral  new  map ","Arel  sql xpr map ","table [] xpr map ","s mb_chars [] strip xpr map "," engine_a engine connection tivere engine connection ord_sqlserver_adapter? "," Arel  sql nginArel  sql _activArel  sql rArel  sql cord_sqlsArel  sql rvArel  sql r_adaptArel  sql r? "," table [] ngintable [] _activtable [] rtable [] cord_sqlstable [] rvtable [] r_adapttable [] r? "," s mb_chars [] strip ngins mb_chars [] strip _activs mb_chars [] strip rs mb_chars [] strip cord_sqlss mb_chars [] strip rvs mb_chars [] strip r_adapts mb_chars [] strip r? "," engine_activerecor1 upcase _sqlserver_a1 upcase apter? "," engine_activerecorRegexp  last_match [] upcase _sqlserver_aRegexp  last_match [] upcase apter? ","1 upcase  == ","Regexp  last_match [] upcase  == ","s mb_ engine connection hars [] strip ","s mb_ engine connection hars [] ","d lArel  sql ngth -@ ","d ltable [] ngth -@ ","d ls mb_chars [] strip ngth -@ ","1 upcase  length -@ ","Regexp  last_match [] upcase  length -@ ","d lArel  sql ngth ","d ltable [] ngth ","d ls mb_chars [] strip ngth ","1 upcase  length ","Regexp  last_match [] upcase  length ","s mb_ engine connection hars ","1 upcase  nil? ","Regexp  last_match [] upcase  nil? ","1 up engine connection ase ","1 upcasArel  sql  ","1 upcastable []  ","1 upcass mb_chars [] strip  ","Regexp  last_mat engine connection h [] up engine connection ase ","RArel  sql gArel  sql xp  last_match [] upcasArel  sql  ","Rtable [] gtable [] xp  last_match [] upcastable []  ","Rs mb_chars [] strip gs mb_chars [] strip xp  last_match [] upcass mb_chars [] strip  ","Regexp  last_mat engine connection h [] ","RArel  sql gArel  sql xp  last_match [] ","Rtable [] gtable [] xp  last_match [] ","Rs mb_chars [] strip gs mb_chars [] strip xp  last_match [] ","Regexp  last_mat engine connection h ","RArel  sql gArel  sql xp  last_match ","Rtable [] gtable [] xp  last_match ","Rs mb_chars [] strip gs mb_chars [] strip xp  last_match "]}," Arel Nodes Ordering eql?":{"type":"method","name":"eql?","children":[],"call":[" == "," expr == ","other expr "," expr ","other is_a? "]}," Arel Nodes Ordering ==":{"type":"method","name":"==","children":[],"call":[" expr == ","other expr "," expr "," class == ","other class "," class ","other is_a? "]}," Arel Nodes Ordering hash":{"type":"method","name":"hash","children":[],"call":[" expr hash "," expr "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2011?":{"type":"method","name":"sqlserver_2011?","children":[],"call":["@database_year == "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements handle_to_names_and_values_dblib":{"type":"method","name":"handle_to_names_and_values_dblib","children":[],"call":["handle each ","qo []= ","options [] == ","options [] ","ActiveRecord Base  default_timezone "," tap ","ActiveRecord Result  new ","handle fields ","c downcase ","handle fields map "," lowercase_schema_reflection "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_azure?":{"type":"method","name":"sqlserver_azure?","children":[],"call":["@database_year == ","(send\n  (send nil :select_value\n    (str \"SELECT @@version\")\n    (str \"SCHEMA\")) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! ! ","(send\n  (send nil :select_value\n    (str \"SELECT @@version\")\n    (str \"SCHEMA\")) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! "," select_value =~ "," select_value ","(send\n  (send nil :sqlserver_version) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! ! ","(send\n  (send nil :sqlserver_version) :=~\n  (regexp\n    (str \"Azure\")\n    (regopt :i))) ! "," sqlserver_version =~ "," sqlserver_version "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements columns_cache_key":{"type":"method","name":"columns_cache_key","children":[],"call":[" unqualify_table_name "," unqualify_table_schema "," unqualify_ unqualify_table_name  "," unqualify_ unqualify_table_schema  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements unqualify_table_schema":{"type":"method","name":"unqualify_table_schema","children":[],"call":["table_name to_s split [] gsub ","table_name to_s split [] ","table_name to_s split ","table_name to_s "]}," Arel Nodes Offset initialize":{"type":"method","name":"initialize","children":[],"call":["expr to_i "]}," Arel Nodes Limit initialize":{"type":"method","name":"initialize","children":[],"call":["expr to_i "]}," Arel Visitors SQLServer select_primary_key_sql?":{"type":"method","name":"select_primary_key_sql?","children":[],"call":["t primary_key name == ","p name ","t primary_key name ","t primary_key ","Arel Attributes Attribute  === "," table_from_select_statement ","core projections first ","core projections ","core projections size != ","core projections size ","o cores first ","o cores "," table_from_select_statement  primary_key name == ","t core projections first rimary_key name == ","core projections first  name "," table_from_select_statement  primary_key name ","t core projections first rimary_key name "," table_from_select_statement  primary_key ","t core projections first rimary_key ","Arel A table_from_select_statement  table_from_select_statement ribu table_from_select_statement es A table_from_select_statement  table_from_select_statement ribu table_from_select_statement e  === ","  table_from_select_statement able_from_selec table_from_select_statement _s table_from_select_statement a table_from_select_statement emen table_from_select_statement  ","core projec table_from_select_statement ions firs table_from_select_statement  ","core core projections first rojections first ","o cores first  projections first ","core projec table_from_select_statement ions ","core core projections first rojections ","o cores first  projections ","core projec table_from_select_statement ions size != ","core core projections first rojections size != ","o cores first  projections size != ","core projec table_from_select_statement ions size ","core core projections first rojections size ","o cores first  projections size ","o cores firs table_from_select_statement  ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer top_one_everything_for_through_join?":{"type":"method","name":"top_one_everything_for_through_join?","children":[],"call":[" join_in_select_statement? ","o offset ! ","o offset ","o limit "," single_distinct_select_everything_statement? "]}," Arel Visitors SQLServer single_distinct_select_everything_statement?":{"type":"method","name":"single_distinct_select_everything_statement?","children":[],"call":[" visit ends_with? "," visit ","o cores first projections first ","o cores first projections ","o cores first ","o cores "," single_distinct_select_statement? "]}," Arel Visitors SQLServer visit_Arel_Nodes_Bin":{"type":"method","name":"visit_Arel_Nodes_Bin","children":[],"call":["@connection cs_equality_operator "," visit ","o expr ","@engine connection cs_equality_operator ","@engine connection ","collector << ","ActiveRecord ConnectionAdapters SQLServerAdapter  cs_equality_operator ","o expr val is_a? ","o expr val "]}," Arel Visitors SQLServer visit_Arel_Nodes_Ordering":{"type":"method","name":"visit_Arel_Nodes_Ordering","children":[],"call":[" visit ","o expr ","o ascending? ","o respond_to? "]}," Arel Visitors SQLServer visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":["o limit= ","Nodes Limit  new ","o limit nil? ","o limit ","o orders any? ","o orders "]}," Arel SelectManager engine_activerecord_sqlserver_adapter?":{"type":"method","name":"engine_activerecord_sqlserver_adapter?","children":[],"call":["@engine connection class name == ","@engine connection class name ","@engine connection class ","@engine connection "]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize_dateformatter":{"type":"method","name":"initialize_dateformatter","children":[],"call":[" Time DATE_FORMATS  []= "," Date DATE_FORMATS  []= ","f upcase! ","f == ","(lvar :a) each ","@database_dateformat each_char to_a ","@database_dateformat each_char "," user_options [] "," user_options "," user_options_dateformat ","time strftime ","time formatted_offset "," lambda "," user_options []  each_char to_a "," user_options_dateformat  each_char to_a "," user_options []  each_char "," user_options_dateformat  each_char "]}," ActiveRecord ConnectionAdapters SQLServerAdapter auto_connect_duration":{"type":"method","name":"auto_connect_duration","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":[" initialize_sqlserver_caches "]}," ActiveRecord ConnectionAdapters SQLServerAdapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":["Arel Visitors SQLServer  new "]}," ActiveRecord ConnectionAdapters SQLServerColumn sql_type_for_statement":{"type":"method","name":"sql_type_for_statement","children":[],"call":[" sql_type "," sql_type sub "," is_real? "," is_integer? "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_real?":{"type":"method","name":"is_real?","children":[],"call":["(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"real\")\n    (regopt :i))) ! ! ","(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"real\")\n    (regopt :i))) ! ","@sql_type =~ "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_integer?":{"type":"method","name":"is_integer?","children":[],"call":["(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"int\")\n    (regopt :i))) ! ! ","(send\n  (ivar :@sql_type) :=~\n  (regexp\n    (str \"int\")\n    (regopt :i))) ! ","@sql_type =~ "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements lowercase_schema_reflection_sql":{"type":"method","name":"lowercase_schema_reflection_sql","children":[],"call":[" lowercase_schema_reflection "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_value_acts_like_time_filter":{"type":"method","name":"quoted_value_acts_like_time_filter","children":[],"call":["value send ","value respond_to? ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_full_iso8601":{"type":"method","name":"quoted_full_iso8601","children":[],"call":[" quoted_date "," quoted_value_acts_like_time_filter iso8601 to "," quoted_value_acts_like_time_filter iso8601 "," quoted_value_acts_like_time_filter "," quoted_value_acts_like_time_filter to_time xmlschema to "," quoted_value_acts_like_time_filter to_time xmlschema "," quoted_value_acts_like_time_filter to_time ","value is_a? ","value acts_like? "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_datetime":{"type":"method","name":"quoted_datetime","children":[],"call":[" quoted_date "," quoted_value_acts_like_time_filter iso8601 to "," quoted_value_acts_like_time_filter iso8601 "," quoted_value_acts_like_time_filter "," quoted_value_acts_like_time_filter to_time xmlschema to "," quoted_value_acts_like_time_filter to_time xmlschema "," quoted_value_acts_like_time_filter to_time ","value is_a? ","value acts_like? ","time_zone_qualified_value iso8601 to ","time_zone_qualified_value iso8601 ","time_zone_qualified_value to_time ","RUBY_VERSION  < ","time_zone_qualified_value to_time xmlschema to ","time_zone_qualified_value to_time xmlschema ","time_zone_qualified_value to_time  iso8601 to "," quoted_value_acts_like_time_filter  iso8601 to ","time_zone_qualified_value to_time  iso8601 "," quoted_value_acts_like_time_filter  iso8601 ","time_zone_qualified_value to_time  to_time "," quoted_value_acts_like_time_filter  to_time ","time_zone_qualified_value to_time  to_time xmlschema to "," quoted_value_acts_like_time_filter  to_time xmlschema to ","time_zone_qualified_value to_time  to_time xmlschema "," quoted_value_acts_like_time_filter  to_time xmlschema "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel  sql ","column sql_type == ","column sql_type ","column respond_to? ","Arel Nodes BindParam  new "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements do_exec_query":{"type":"method","name":"do_exec_query","children":[],"call":[" raw_select ","sql << ","params join "," quote ","names_and_types join ","binds empty? ","params << ","names_and_types << "," raise ","value to_i ","column is_a? ","column acts_like? ","column sql_type_for_statement ","value present? ","column is_integer? ","column sql_type == ","column sql_type ","binds each_with_index ","sql sub! ","params each_with_index ","name == ","options []= ","options [] != ","options [] ","binds []= ","value to_i alue to_i ","column sql_type_for_ quote  ","value to_i alue present? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":["sql insert ","sql index ","sql insert  insert ","sql insert  index "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":["Arel Nodes Bin  new ","node acts_like? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements exec_update":{"type":"method","name":"exec_update","children":[],"call":[" rows first first "," rows first "," rows ","sql << "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":[" rows first first "," rows first "," rows ","sql << "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" exec_query "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":[" do_exec_query "," with_identity_insert_enabled "," query_requires_identity_insert? ","sqlserver_options [] "," strip_ident_from_update "," update_sql? "," strip_ident_from_update server_options [] "," update_ strip_ident_from_update ? "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quoted_string_prefix":{"type":"method","name":"quoted_string_prefix","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements user_options_language":{"type":"method","name":"user_options_language","children":[],"call":[" user_options [] "," user_options "," select_value "," info_schema_query "," sqlserver_azure? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements user_options_isolation_level":{"type":"method","name":"user_options_isolation_level","children":[],"call":[" user_options [] "," user_options "," select_value ","(str \"SELECT CASE [transaction_isolation_level] \\n\") squish "," info_schema_query "," sqlserver_azure? ","(str \"SELECT CASE [transaction_isolation_level]\\n\") squish "," (str \"SELECT CASE [transaction_isolation_level] \\n\") squish server_azure? "," (str \"SELECT CASE [transaction_isolation_level]\\n\") squish server_azure? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements user_options_dateformat":{"type":"method","name":"user_options_dateformat","children":[],"call":[" user_options [] "," user_options "," select_value "," info_schema_query "," sqlserver_azure? "]}," ActiveRecord ConnectionAdapters SQLServerColumn is_primary?":{"type":"method","name":"is_primary?","children":[],"call":["@sqlserver_options [] "]}," Arel Visitors SQLServer windowed_single_distinct_select_statement?":{"type":"method","name":"windowed_single_distinct_select_statement?","children":[],"call":[" single_distinct_select_statement? ","o offset ","o limit "]}," ActiveRecord ConnectionAdapters SQLServerAdapter disable_auto_reconnect":{"type":"method","name":"disable_auto_reconnect","children":[],"call":[" class auto_connect= "," class "," class auto_connect "]}," ActiveRecord ConnectionAdapters SQLServerAdapter with_sqlserver_error_handling":{"type":"method","name":"with_sqlserver_error_handling","children":[],"call":[" raise "," open_transactions == "," open_transactions "," retry_deadlock_victim? "," auto_reconnected? "," translate_exception ","e message "]}," ActiveRecord ConnectionAdapters SQLServerAdapter retry_deadlock_victim":{"type":"method","name":"retry_deadlock_victim","children":[],"call":["@@retry_deadlock_victim is_a? "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements _raw_select":{"type":"method","name":"_raw_select","children":[],"call":[" finish_statement_handle "," handle_to_names_and_values "," raw_connection_run "," finish_statement_ raw_connection_run  ","  raw_connection_run _to_names_and_values "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements activity_stats":{"type":"method","name":"activity_stats","children":[],"call":[" select_all "," current_database "]}," ActiveRecord ConnectionAdapters Sqlserver DatabaseStatements transaction":{"type":"method","name":"transaction","children":[],"call":[" block_given? "," transaction_with_retry_deadlock_victim "," retry_deadlock_victim? "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt DatabaseStatements transaction_with_retry_deadlock_victim":{"type":"method","name":"transaction_with_retry_deadlock_victim","children":[],"call":[" raise "," rollback_transaction_records "," rollback_to_savepoint "," rollback_db_transaction "," open_transactions == "," open_transactions ","@_current_transaction_records last concat ","@_current_transaction_records last ","@_current_transaction_records push ","@_current_transaction_records empty? ","save_point_records blank? ","@_current_transaction_records pop "," release_savepoint "," commit_transaction_records "," commit_db_transaction "," decrement_open_transactions "," outside_transaction? ","database_transaction_rollback is_a? "," outside_transaction? ! "," increment_open_transactions "," create_savepoint "," begin_db_transaction "," block_given? ","last_transaction_joinable ! ","options [] ","options has_key? ","options assert_valid_keys ","@_current_transaction_records pop  blank? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2012?":{"type":"method","name":"sqlserver_2012?","children":[],"call":["@database_year == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_bulk_alter?":{"type":"method","name":"supports_bulk_alter?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver Utils unqualify_db_name":{"type":"method","name":"unqualify_db_name","children":[],"call":["table_names first tr ","table_names first ","table_names length == ","table_names length ","table_name to_s split ","table_name to_s ","table_name to_s split  first tr ","table_name to_s split  first ","table_name to_s split  length == ","table_name to_s split  length "]}," ActiveRecord ConnectionAdapters Sqlserver Utils unqualify_table_schema":{"type":"method","name":"unqualify_table_schema","children":[],"call":["table_name to_s split [] gsub ","table_name to_s split [] ","table_name to_s split ","table_name to_s "]}," ActiveRecord ConnectionAdapters Sqlserver Utils unqualify_table_name":{"type":"method","name":"unqualify_table_name","children":[],"call":["table_name to_s split last tr ","table_name to_s split last ","table_name to_s split ","table_name to_s "]}," ActiveRecord ConnectionAdapters Sqlserver Utils unquote_string":{"type":"method","name":"unquote_string","children":[],"call":["string to_s gsub ","string to_s "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan showplan_printer":{"type":"method","name":"showplan_printer","children":[],"call":[" option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan showplan_xml?":{"type":"method","name":"showplan_xml?","children":[],"call":[" option == "," option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan showplan_text?":{"type":"method","name":"showplan_text?","children":[],"call":[" option == "," option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan showplan_all?":{"type":"method","name":"showplan_all?","children":[],"call":[" option == "," option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan option":{"type":"method","name":"option","children":[],"call":[" raise ","opt inspect ","OPTIONS  exclude? ","(or\n  (send\n    (const nil :SQLServerAdapter) :showplan_option)\n  (const nil :OPTION_ALL)) tap ","SQLServerAdapter  showplan_option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan set_showplan_option":{"type":"method","name":"set_showplan_option","children":[],"call":[" raise "," option "," raw_connection_do "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan with_showplan_on":{"type":"method","name":"with_showplan_on","children":[],"call":[" set_showplan_option "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan explain":{"type":"method","name":"explain","children":[],"call":["printer pp "," showplan_printer new "," showplan_printer "," do_exec_query "," with_showplan_on "," to_sql "," showplan_printer new  pp "," showplan_ showplan_printer new  new "," showplan_ showplan_printer new  "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterXml pp":{"type":"method","name":"pp","children":[],"call":["Nokogiri  XML to_xml ","Nokogiri  XML ","@result rows first first ","@result rows first ","@result rows ","Nokogiri  XML to_@result rows first first  "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterXml initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable cast_item":{"type":"method","name":"cast_item","children":[],"call":["item to_s truncate "," max_column_width ","item to_s ","item to_s to "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable build_cells":{"type":"method","name":"build_cells","children":[],"call":["cells join ","cells << "," cast_item ljust ","@widths [] "," cast_item ","items each_with_index "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable build_separator":{"type":"method","name":"build_separator","children":[],"call":["+ + + ","+ + ","(send\n  (ivar :@widths) :map) join ","- * ","w + "," cell_padding * "," cell_padding ","@widths map "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable compute_column_widths":{"type":"method","name":"compute_column_widths","children":[],"call":["computed_widths << "," max_column_width ","computed_width > ","cells_in_column map max ","cells_in_column map ","(lvar :column) + "," cast_item ","r [] "," result rows map "," result rows "," result "," result columns each_with_index "," result columns "," tap ","cells_in_column map max s << ","cells_in_column map max  > ","(lvar :column) +  map max ","(lvar :column) +  map "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << "," build_cells "," result rows each "," result rows "," result "," result columns "," build_separator "," compute_column_widths "]}," ActiveRecord ConnectionAdapters Sqlserver Showplan PrinterTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache table_name_key":{"type":"method","name":"table_name_key","children":[],"call":["Utils  unqualify_table_name "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache quote_name":{"type":"method","name":"quote_name","children":[],"call":["@quoted_names []= ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :split\n    (str \".\")) :map) join ","n to_s gsub ","n to_s ","n =~ ","name to_s split map ","name to_s split ","name to_s ","@quoted_names [] ","@quoted_names key? "," quote_name_part "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache view_information":{"type":"method","name":"view_information","children":[],"call":["@view_information []= "," connection send "," connection ","@view_information [] ","@view_information key? "," table_name_key ","@view_information  table_name_key ? "," table_name_ table_name_key  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache view_exists?":{"type":"method","name":"view_exists?","children":[],"call":[" table_exists? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache view_names":{"type":"method","name":"view_names","children":[],"call":[" connection views "," connection "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache table_names":{"type":"method","name":"table_names","children":[],"call":[" connection tables "," connection "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache clear_table_cache!":{"type":"method","name":"clear_table_cache!","children":[],"call":["@view_information delete ","@view_names delete ","@table_names delete "," table_name_key "," table_name_ table_name_key  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache clear!":{"type":"method","name":"clear!","children":[],"call":["@quoted_names clear ","@view_information clear "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache table_exists?":{"type":"method","name":"table_exists?","children":[],"call":["@tables []= "," connection table_exists? "," connection ","@tables [] ","@tables key? "," table_name_key ","table_name blank? ","@tables  table_name_key ? "," table_name_ table_name_key  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt Explain unprepare_sqlserver_statement":{"type":"method","name":"unprepare_sqlserver_statement","children":[],"call":["Utils  unquote_string ","executesql_args join strip match [] ","executesql_args join strip match ","executesql_args join strip ","executesql_args join ","executesql_args pop ","executesql_args many? ","arg =~ ","executesql_args reject! ","executesql split ","sql from ","SQLSERVER_STATEMENT_PREFIX  length ","sql starts_with? ","executesql_args join strip match [] _args join strip match [] ","sql from _args join strip match [] ","executesql split  join strip match [] ","executesql_args join strip match [] _args join strip match ","sql from _args join strip match ","executesql split  join strip match ","executesql_args join strip match [] _args join strip ","sql from _args join strip ","executesql split  join strip ","executesql_args join strip match [] _args join ","sql from _args join ","executesql split  join ","executesql_args join strip match [] _args pop ","sql from _args pop ","executesql split  pop ","executesql_args join strip match [] _args many? ","sql from _args many? ","executesql split  many? ","executesql_args join strip match [] _args reject! ","sql from _args reject! ","executesql split  reject! ","executesql_args join strip match []  split ","sql from  split "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt Explain exec_explain":{"type":"method","name":"exec_explain","children":[],"call":[" unprepare_sqlserver_statement ","queries map "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt Relation tables_in_string":{"type":"method","name":"tables_in_string","children":[],"call":[" - "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ExplainSubscriber ignore_sqlserver_payload?":{"type":"method","name":"ignore_sqlserver_payload?","children":[],"call":["payload [] !~ ","payload [] ","IGNORED_PAYLOADS  include? "]}," ActiveRecord ConnectionAdapters Sqlserver CoreExt ExplainSubscriber call":{"type":"method","name":"call","children":[],"call":["queries << ","payload values_at "," ignore_sqlserver_payload? ","args last ","Thread  current [] ","Thread  current ","Thread  current []  << ","args last  values_at "," ignore_sqlserver_args last ? "]}," Arel Visitors SQLServer distinct_non_present_orders?":{"type":"method","name":"distinct_non_present_orders?","children":[],"call":["expressions include? ","tables_all_columns include? ","table_match [] ","(str \"^(\\\\w+)\\\\.\\\\w+$\") match ","order downcase! ","order strip! ","order gsub! "," visit ","o orders uniq each ","o orders uniq ","o orders ","(send\n  (send\n    (send nil :visit\n      (lvar :p)\n      (lvar :a)) :split\n    (str \",\")) :map) join ","x strip downcase ","x strip ","tables_all_columns << ","star_match [] ","(str \"^(\\\\w+)\\\\.\\\\*$\") match ","x gsub! ","x strip! "," visit split map "," visit split ","projections map ","o orders uniq empty? ","found_distinct ! ","p1 include? ","p1 respond_to? ","p1 distinct ","sq class to_s =~ ","sq class to_s ","sq class ","projections first ","o cores first set_quantifier ","o cores first ","o cores ","o cores first projections ","(str \"^(\\w+)\\.\\w+$\") match  [] "," visit  downcase! "," visit  strip! "," visit  gsub! ","o  visit s uniq each ","o  visit s uniq ","o  visit s ","(str \"^(\\w+)\\.\\*$\") match  [] ","o cores first projections  map ","o  visit s uniq empty? ","projections first  include? ","projections first  respond_to? ","projections first  distinct ","o cores first set_quantifier  class to_s =~ ","o cores first set_quantifier  class to_s ","o cores first set_quantifier  class ","o cores first projections  first ","o cores first o cores first projections  "]}," Arel Visitors SQLServer projection_to_sql_remove_distinct":{"type":"method","name":"projection_to_sql_remove_distinct","children":[],"call":["frag gsub! ","core set_quantifier= ","Arel Nodes Distinct  new ","frag =~ ","Arel  sql "," visit ","Arel  sql  gsub! ","Arel  sql  =~ "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatementDistinctNonPresentOrders":{"type":"method","name":"visit_Arel_Nodes_SelectStatementDistinctNonPresentOrders","children":[],"call":["(begin\n  (str \"SELECT\")) join "," visit ","o offset expr ","o offset ","FROM ( + + ","FROM ( + ","o limit ","core set_quantifier ","(begin\n  (str \"SELECT\")) compact join ","(begin\n  (str \"SELECT\")) compact ","core having ","(send\n  (lvar :groups) :map) join ","groups map ","groups empty? ","(send\n  (send\n    (lvar :core) :wheres) :map) join ","core wheres map ","core wheres ","core wheres empty? "," source_with_lock_for_select_statement ","(begin\n  (lvar :projection_list)) join ","(send\n  (lvar :orders) :map) join ","orders map ","orders empty? ","orders empty? ! ","select_frags join ","o offset ! ","(send\n  (lvar :projections) :map) join "," projection_to_sql_remove_distinct ","projections map ","select_frags << ","frag gsub ","frag gsub! ","o orders uniq ","o orders ","core groups ","core projections ","o cores first ","o cores ","o cores first  set_quantifier ","o cores first  having ","(send\n  (lvar :core groups ) :map) join ","core groups  map ","core groups  empty? ","(send\n  (send\n    (lvar :o cores first ) :wheres) :map) join ","o cores first  wheres map ","o cores first  wheres ","o cores first  wheres empty? ","(begin\n  (lvar :(send\n  (lvar :projections) :map) join )) join ","(send\n  (lvar :o orders uniq ) :map) join ","o orders uniq  map ","o orders uniq  empty? ","o orders uniq  empty? ! ","select_ projection_to_sql_remove_distinct s join ","(send\n  (lvar :core projections ) :map) join "," projection_to_(begin\n  (str \"SELECT\")) join _remove_distinct "," projection_to_(begin\n  (str \"SELECT\")) compact join _remove_distinct ","core projections  map ","select_ projection_to_sql_remove_distinct s << "," projection_to_sql_remove_distinct  gsub "," projection_to_sql_remove_distinct  gsub! ","o o orders uniq  uniq ","o o orders uniq  ","core core groups  ","o cores first  groups ","core core projections  ","o cores first  projections ","o o cores first s first ","o o cores first s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter odbc_connect":{"type":"method","name":"odbc_connect","children":[],"call":[" warn ","c use_utc= ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","c use_time= ","(send\n  (send\n    (lvar :config) :[]\n    (sym :dsn)) :include?\n  (str \";\")) tap ","ODBC  connect ","config [] ","ODBC Database  new drvconnect ","ODBC Database  new ","d attrs= ","a []= ","(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :config) :[]\n          (sym :dsn)) :split\n        (str \";\")) :map)\n    (args\n      (arg :atr))\n    (send\n      (lvar :atr) :split\n      (str \"=\"))) :reject) reduce ","kv size != ","kv size ","(send\n  (send\n    (send\n      (lvar :config) :[]\n      (sym :dsn)) :split\n    (str \";\")) :map) reject ","atr split ","config [] split map ","config [] split ","d name= ","ODBC Driver  new tap ","ODBC Driver  new ","config [] include? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter encoding":{"type":"method","name":"encoding","children":[],"call":["config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter timeout":{"type":"method","name":"timeout","children":[],"call":["config [] to_i / ","config [] to_i ","config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter login_timeout":{"type":"method","name":"login_timeout","children":[],"call":["config [] to_i ","config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter appname":{"type":"method","name":"appname","children":[],"call":["Rails  application class name split first ","Rails  application class name split ","Rails  application class name ","Rails  application class ","Rails  application "," configure_application_name ","config [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter dblib_connect":{"type":"method","name":"dblib_connect","children":[],"call":["client execute do ","client execute ","config [] ","TinyTds Client  new tap ","TinyTds Client  new "," encoding "," timeout "," login_timeout "," appname "," config_encoding "," config_timeout "," config_login_timeout "," config_appname "," raise ","e message match ","e message "]}," ActiveRecord ConnectionAdapters SQLServerAdapter schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["Sqlserver SchemaCreation  new ","SQLServer SchemaCreation  new "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_partial_index?":{"type":"method","name":"supports_partial_index?","children":[],"call":["@database_year >= "]}," ActiveRecord ConnectionAdapters Sqlserver TableDefinition column":{"type":"method","name":"column","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options []= ","options fetch ","type == "]}," ActiveRecord ConnectionAdapters Sqlserver TableDefinition uuid":{"type":"method","name":"uuid","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["TableDefinition  new "," native_database_types "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements update_sql?":{"type":"method","name":"update_sql?","children":[],"call":["(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(UPDATE|EXEC sp_executesql N'UPDATE)\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(UPDATE|EXEC sp_executesql N'UPDATE)\")\n    (regopt :i))) nil? ","sql =~ "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements strip_ident_from_update":{"type":"method","name":"strip_ident_from_update","children":[],"call":["sql gsub ","sql =~ ","Regexp  quote "," quote_column_name ","id_column name "," identity_column "," get_table_name ","sql gsub  gsub ","sql gsub  =~ "," identity_column  name "," get_ get_table_name  "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaStatements columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":[]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options delete ","options [] =~ ","options [] ","(sym :uniqueidentifier) include? ","column type ","options fetch "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","sql << ","o type == ","o type ","o primary_key? "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCache quote_name_part":{"type":"method","name":"quote_name_part","children":[],"call":["part to_s gsub ","part to_s ","part =~ "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_default_value":{"type":"method","name":"quote_default_value","children":[],"call":[" quote ","value =~ ","column type == ","column type "]}," ActiveRecord ConnectionAdapters Sqlserver Quoting quote_database_name":{"type":"method","name":"quote_database_name","children":[],"call":[" schema_cache quote_name "," schema_cache "]}," ActiveRecord ConnectionAdapters Sqlserver SchemaCreation visit_TableDefinition":{"type":"method","name":"visit_TableDefinition","children":[],"call":["create_sql << ","o options ","(send\n  (send\n    (lvar :o) :columns) :map) join "," accept ","o columns map ","o columns "," raise ","o as ","o as is_a? ","o as to_sql "," quote_table_name ","(if\n  (send\n    (lvar :o) :temporary)\n  (str \"#\")\n  (str \"\")) + ","o name to_s ","o name ","o temporary "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_2014?":{"type":"method","name":"sqlserver_2014?","children":[],"call":["@database_year == "]}," Arel Visitors SQLServer primary_Key_From_Table":{"type":"method","name":"primary_Key_From_Table","children":[],"call":["t [] ","t engine columns first try ","t engine columns first ","t engine columns ","t engine ","t engine connection schema_cache primary_keys ","t engine table_name ","t engine connection schema_cache ","t engine connection ","t engine arel_table [] ","t engine arel_table ","t engine primary_key ","t primary_key "," column_cache first try try "," column_cache first try "," column_cache first "," column_cache ","t name "," schema_cache primary_keys "," schema_cache ","@connection schema_cache columns_hash first try try ","@connection schema_cache columns_hash first try ","@connection schema_cache columns_hash first ","@connection schema_cache columns_hash ","@connection schema_cache ","@connection schema_cache primary_keys ","candidate_column try ","candidate_columns first ","candidate_columns find ","@connection schema_cache columns_hash slice values ","@connection schema_cache columns_hash slice ","t engine connection schema_cache @connection schema_cache primary_keys  "," schema_cache @connection schema_cache primary_keys  ","@connection schema_cache @connection schema_cache primary_keys  ","candidate_columns find  try ","candidate_columns find s first ","@connection schema_cache columns_hash slice values  first ","candidate_columns find s find ","@connection schema_cache columns_hash slice values  find "]}," Arel Visitors SQLServer table_From_Statement":{"type":"method","name":"table_From_Statement","children":[],"call":["core source left ","core source ","Arel Table  new ","Arel Nodes SqlLiteral  === ","Arel Nodes JoinSource  === ","core from ","Arel Table  === ","o cores first ","o cores ","core source left left ","o cores first  source left ","o cores first  source ","o cores first  from ","o o cores first s first ","o o cores first s ","o cores first  source left left "]}," Arel Visitors SQLServer distinct_One_As_One_Is_So_Not_Fetch":{"type":"method","name":"distinct_One_As_One_Is_So_Not_Fetch","children":[],"call":["o limit= ","core projections= ","Arel  sql ","o offset ! ","o offset "," node_value == "," node_value ","o limit ","x == ","core projections all? ","core projections ","Nodes Distinct  === ","core set_quantifier ","o cores first ","o cores ","(nil) include? ","o cores first  projections= ","o cores first  projections all? ","o cores first  projections ","o cores first  set_quantifier ","o o cores first s first ","o o cores first s "]}," Arel Visitors SQLServer make_Fetch_Possible_And_Deterministic":{"type":"method","name":"make_Fetch_Possible_And_Deterministic","children":[],"call":["o orders= ","pk asc ","o orders empty? ","o orders "," primary_Key_From_Table "," table_From_Statement ","o offset nil? ","o offset ","o limit nil? ","o limit "," primary_Key_From_Table  asc ","o orders emp table_From_Statement y? ","  table_From_Statement able_From_S table_From_Statement a table_From_Statement emen table_From_Statement  ","o offse table_From_Statement  nil? ","o offse table_From_Statement  ","o limi table_From_Statement  nil? ","o limi table_From_Statement  "]}," Arel Visitors SQLServer select_statement_lock?":{"type":"method","name":"select_statement_lock?","children":[],"call":["@select_statement lock "]}," Arel Visitors SQLServer node_value":{"type":"method","name":"node_value","children":[],"call":["node expr expr ","node expr "]}," Arel Visitors SQLServer visit_Make_Fetch_Happen":{"type":"method","name":"visit_Make_Fetch_Happen","children":[],"call":[" visit ","o limit ","o offset ","o offset= ","Nodes Offset  new ","o offset ! "]}," Arel Visitors SQLServer visit_Orders_And_Let_Fetch_Happen":{"type":"method","name":"visit_Orders_And_Let_Fetch_Happen","children":[],"call":["collector << ","len == "," visit ","o orders each_with_index ","o orders ","o orders length - ","o orders length ","o orders empty? "," make_Fetch_Possible_And_Deterministic "," visit  << ","o orders length -  == ","o orders o orders length - gth - ","o orders o orders length - gth "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectStatement_SQLServer_Lock":{"type":"method","name":"visit_Arel_Nodes_SelectStatement_SQLServer_Lock","children":[],"call":["collector << ","options [] "," visit ","@select_statement lock "," select_statement_lock? "," visit  << "]}," Arel Visitors SQLServer visit_Arel_Nodes_OuterJoin":{"type":"method","name":"visit_Arel_Nodes_OuterJoin","children":[],"call":[" visit ","o right ","collector << "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock ","o left ","o left left is_a? ","o left left ","o left is_a? "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock  << "," visit  << "]}," Arel Visitors SQLServer visit_Arel_Nodes_JoinSource":{"type":"method","name":"visit_Arel_Nodes_JoinSource","children":[],"call":[" inject_join ","o right ","collector << ","o left ","o right any? "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock "," visit "," inject_join  << "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock  << "," visit  << "]}," Arel Visitors SQLServer visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":["i - ","collector add_bind ","o value "]}," ActiveRecord ConnectionAdapters SQLServerAdapter config_encoding":{"type":"method","name":"config_encoding","children":[],"call":["config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter config_timeout":{"type":"method","name":"config_timeout","children":[],"call":["config [] to_i / ","config [] to_i ","config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter config_login_timeout":{"type":"method","name":"config_login_timeout","children":[],"call":["config [] to_i ","config [] ","config [] present? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter config_appname":{"type":"method","name":"config_appname","children":[],"call":["Rails  application class name split first ","Rails  application class name split ","Rails  application class name ","Rails  application class ","Rails  application "," configure_application_name ","config [] "," rails_application_name ","ActiveSupport Deprecation  warn ","(str \"Configuring the application name used by TinyTDS by overriding the\\n\") squish "," instance_methods include? "," instance_methods "]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["m register_type ","SQLServer Type Timestamp  new ","SQLServer Type Uuid  new ","SQLServer Type VarbinaryMax  new "," register_class_with_limit ","SQLServer Type UnicodeText  new ","SQLServer Type UnicodeVarcharMax  new ","m alias_type ","SQLServer Type Text  new ","SQLServer Type VarcharMax  new ","SQLServer Type Time  new "," extract_precision "," extract_scale ","SQLServer Type SmallDateTime  new ","SQLServer Type DateTime  new ","SQLServer Type Date  new ","SQLServer Type Real  new ","SQLServer Type Float  new ","SQLServer Type SmallMoney  new ","SQLServer Type Money  new ","SQLServer Type Decimal  new ","SQLServer Type Boolean  new ","SQLServer Type UnicodeString  new ","SQLServer Type DateTimeOffset  new ","SQLServer Type DateTime2  new ","SQLServer Type DecimalWithoutScale  new ","scale == "," extract_ extract_precision  "," extract_ extract_scale  "," extract_scale  == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_foreign_keys?":{"type":"method","name":"supports_foreign_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_transaction_isolation?":{"type":"method","name":"supports_transaction_isolation?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter valid_type?":{"type":"method","name":"valid_type?","children":[],"call":[" native_database_types [] nil? ! "," native_database_types [] nil? "," native_database_types [] "," native_database_types "]}," ActiveRecord ConnectionAdapters SQLServer Utils with_sqlserver_db_date_formats":{"type":"method","name":"with_sqlserver_db_date_formats","children":[],"call":["Time DATE_FORMATS  []= ","Date DATE_FORMATS  []= ","Date DATE_FORMATS  [] ","Time DATE_FORMATS  [] "]}," ActiveRecord ConnectionAdapters SQLServer Utils extract_identifiers":{"type":"method","name":"extract_identifiers","children":[],"call":["SQLServer Utils Name  new "]}," ActiveRecord ConnectionAdapters SQLServer Utils unquote_string":{"type":"method","name":"unquote_string","children":[],"call":["s to_s gsub ","s to_s "]}," ActiveRecord ConnectionAdapters SQLServer Utils quote_string":{"type":"method","name":"quote_string","children":[],"call":["s to_s gsub ","s to_s "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name parts":{"type":"method","name":"parts","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Utils Name unquote":{"type":"method","name":"unquote","children":[],"call":["part [] ","part start_with? "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name quote":{"type":"method","name":"quote","children":[],"call":["part to_s gsub ","part to_s ","part =~ "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name parse_raw_name":{"type":"method","name":"parse_raw_name","children":[],"call":["@parts << "," unquote ","rest [] ","rest starts_with? ","scanner rest ","@parts first ","@parts length ","scanner scan_until ","scanner exist? ","part blank? ","matched [] ","StringScanner  new "," raw_name "," raw_name blank? ","rest start_with? ","@matched [] s << ","rest []  [] ","scanner rest  [] ","rest []  starts_with? ","scanner rest  starts_with? ","scanner rest []  ","scanner scanner rest  ","StringScanner  new  rest ","@matched [] s first ","@matched [] s length ","StringScanner  new  scan_until ","StringScanner  new  exist? ","matched []  blank? ","scanner scan_until  [] ","rest []  start_with? ","scanner rest  start_with? "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name hash":{"type":"method","name":"hash","children":[],"call":[" parts hash "," parts "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name ==":{"type":"method","name":"==","children":[],"call":["o parts == "," parts ","o parts ","o class == "," class ","o class ","other parts == ","other parts ","other class == ","other class "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name quoted":{"type":"method","name":"quoted","children":[],"call":["(send\n  (send nil :parts) :map) join "," quote "," parts map "," parts "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name to_s":{"type":"method","name":"to_s","children":[],"call":[" quoted "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name server_quoted":{"type":"method","name":"server_quoted","children":[],"call":[" server "," quote "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name database_quoted":{"type":"method","name":"database_quoted","children":[],"call":[" database "," quote "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name schema_quoted":{"type":"method","name":"schema_quoted","children":[],"call":[" schema "," quote "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name object_quoted":{"type":"method","name":"object_quoted","children":[],"call":[" quote "," object "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_raw_name ","name to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type VarcharMax type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type VarcharMax initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Varchar type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Varchar initialize":{"type":"method","name":"initialize","children":[],"call":["@limit to_i == ","@limit to_i "]}," ActiveRecord ConnectionAdapters SQLServer Type VarbinaryMax type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type VarbinaryMax initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Varbinary type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Varbinary initialize":{"type":"method","name":"initialize","children":[],"call":["@limit to_i == ","@limit to_i "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s [] ","value to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarcharMax type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarcharMax initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarchar type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarchar initialize":{"type":"method","name":"initialize","children":[],"call":["@limit to_i == ","@limit to_i "]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeText type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeChar type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TinyInteger min_value":{"type":"method","name":"min_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TinyInteger max_value":{"type":"method","name":"max_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Timestamp type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Time quote_usec":{"type":"method","name":"quote_usec","children":[],"call":[" usec_to_seconds_frction to_s split last "," usec_to_seconds_frction to_s split "," usec_to_seconds_frction to_s "," usec_to_seconds_frction "]}," ActiveRecord ConnectionAdapters SQLServer Type Time usec_to_seconds_frction":{"type":"method","name":"usec_to_seconds_frction","children":[],"call":["(send\n  (send\n    (send\n      (lvar :value) :usec) :to_f) :/\n  (float 1000000.0)) round "," precision ","value usec to_f / ","value usec to_f ","value usec "]}," ActiveRecord ConnectionAdapters SQLServer Type Time cast_usec":{"type":"method","name":"cast_usec","children":[],"call":["(send\n  (send nil :usec_to_seconds_frction\n    (lvar :value)) :*\n  (int 1000000)) to_i "," usec_to_seconds_frction * "," usec_to_seconds_frction "]}," ActiveRecord ConnectionAdapters SQLServer Type Time cast_value":{"type":"method","name":"cast_value","children":[],"call":["value change "," cast_usec ","value blank? ","value respond_to? "," cast_fractional ","value acts_like? "," apply_seconds_precision ","value change  change ","value change  blank? ","value change  respond_to? ","value change  acts_like? "]}," ActiveRecord ConnectionAdapters SQLServer Type Time quote_ss":{"type":"method","name":"quote_ss","children":[],"call":[" quote_usec ","value to_s "," cast_value ","value acts_like? "," cast_value  to_s "," cast_ cast_value  "," cast_value  acts_like? "]}," ActiveRecord ConnectionAdapters SQLServer Type Time type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value acts_like? "," type_cast_for_database inspect "," type_cast_for_database "," serialize quoted "," serialize "]}," ActiveRecord ConnectionAdapters SQLServer Type Time type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["Quoter  new ","value nil? ","v << ","fraction to_i zero? ","fraction to_i "," quote_fractional ","(begin\n  (lvar :time)) tap ","value to_s ","value acts_like? "," quote_fractional  to_i zero? "," quote_fractional  to_i "," quote_ quote_fractional al ","(begin\n  (lvar :value to_s )) tap "]}," ActiveRecord ConnectionAdapters SQLServer Type Time initialize":{"type":"method","name":"initialize","children":[],"call":["@precision == "]}," ActiveRecord ConnectionAdapters SQLServer Type Text type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime cast_usec_for_database":{"type":"method","name":"cast_usec_for_database","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime cast_usec":{"type":"method","name":"cast_usec","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type SmallMoney type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type SmallMoney initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Real type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Quoter quote_ss_value":{"type":"method","name":"quote_ss_value","children":[],"call":[" type quote_ss "," value "," type "]}," ActiveRecord ConnectionAdapters SQLServer Type Quoter ==":{"type":"method","name":"==","children":[],"call":["other == "," to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Quoter to_s":{"type":"method","name":"to_s","children":[],"call":["@value to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Quoter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Money type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Money initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Float type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime second_precision":{"type":"method","name":"second_precision","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime cast_usec":{"type":"method","name":"cast_usec","children":[],"call":["(send\n  (lvar :ss_seconds) :*\n  (int 1000000)) to_i ","ss_seconds * ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :second_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round / ","1 / "," second_precision ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round ","seconds * ","value usec to_f / ","value usec to_f ","value usec ","value usec zero? ","value respond_to? ! ","value respond_to? ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :second_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round ) :*\n  (int 1000000)) to_i ","(send\n  (lvar :ss_value usec to_f / ) :*\n  (int 1000000)) to_i ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :second_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round  * ","ss_value usec to_f /  * ","(send\n  (send\n    (begin\n      (send\n        (lvar :value usec to_f / ) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :second_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round ","(send\n  (lvar :value usec to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round / ","(send\n  (lvar :value usec to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :second_precision)))) round ","value usec to_f /  * "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime cast_value":{"type":"method","name":"cast_value","children":[],"call":["value change "," cast_usec ","value respond_to? "," cast_fractional ","value acts_like? "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value acts_like? "," type_cast_for_database inspect "," type_cast_for_database "," serialize quoted "," serialize "]}," ActiveRecord Type Value SQLServerBehavior type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" type_cast_from_ss_database? "]}," ActiveRecord Type Value SQLServerBehavior type_cast_from_ss_database?":{"type":"method","name":"type_cast_from_ss_database?","children":[],"call":[" class type_cast_from_ss_database "," class "]}," ActiveRecord Type Value SQLServerBehavior ClassMethods type_cast_from_ss_database=":{"type":"method","name":"type_cast_from_ss_database=","children":[],"call":["boolean ! ! ","boolean ! "]}," ActiveRecord Type Value SQLServerBehavior ClassMethods type_cast_from_ss_database":{"type":"method","name":"type_cast_from_ss_database","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Char type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Castable type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" type_cast_from_ss_database? "]}," ActiveRecord ConnectionAdapters SQLServer Type Binary type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type BigInteger type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerRealTransaction reset_starting_isolation_level":{"type":"method","name":"reset_starting_isolation_level","children":[],"call":[" connection set_transaction_isolation_level "," starting_isolation_level "," connection "," sqlserver? "]}," ActiveRecord ConnectionAdapters SQLServerRealTransaction commit":{"type":"method","name":"commit","children":[],"call":[" reset_starting_isolation_level "]}," ActiveRecord ConnectionAdapters SQLServerRealTransaction initialize":{"type":"method","name":"initialize","children":[],"call":[" current_isolation_level ","options [] "]}," ActiveRecord ConnectionAdapters SQLServerTransaction current_isolation_level":{"type":"method","name":"current_isolation_level","children":[],"call":["level upcase ","level blank? "," connection user_options_isolation_level "," connection "," sqlserver? ","level == "," connection user_options_isolation_level  upcase "," connection user_options_isolation_level  blank? "," connection user_options_isolation_ connection user_options_isolation_level  "," connection user_options_isolation_level  == "]}," ActiveRecord ConnectionAdapters SQLServerTransaction sqlserver?":{"type":"method","name":"sqlserver?","children":[],"call":[" connection sqlserver? "," connection "," connection respond_to? "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition ss_timestamp":{"type":"method","name":"ss_timestamp","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition uuid":{"type":"method","name":"uuid","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition varbinary":{"type":"method","name":"varbinary","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition binary_basic":{"type":"method","name":"binary_basic","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition ntext":{"type":"method","name":"ntext","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition nchar":{"type":"method","name":"nchar","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition text_basic":{"type":"method","name":"text_basic","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition varchar_max":{"type":"method","name":"varchar_max","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition varchar":{"type":"method","name":"varchar","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition char":{"type":"method","name":"char","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition smallmoney":{"type":"method","name":"smallmoney","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition money":{"type":"method","name":"money","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition real":{"type":"method","name":"real","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options []= ","options fetch ","type == "]}," ActiveRecord ConnectionAdapters SQLServer Showplan showplan_printer":{"type":"method","name":"showplan_printer","children":[],"call":[" option "," showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan showplan_xml?":{"type":"method","name":"showplan_xml?","children":[],"call":[" option == "," option "," showplan_option == "," showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan showplan_text?":{"type":"method","name":"showplan_text?","children":[],"call":[" option == "," option "," showplan_option == "," showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan showplan_all?":{"type":"method","name":"showplan_all?","children":[],"call":[" option == "," option "," showplan_option == "," showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan option":{"type":"method","name":"option","children":[],"call":[" raise ","opt inspect ","OPTIONS  exclude? ","(or\n  (send\n    (const nil :SQLServerAdapter) :showplan_option)\n  (const nil :OPTION_ALL)) tap ","SQLServerAdapter  showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan set_showplan_option":{"type":"method","name":"set_showplan_option","children":[],"call":[" raise "," option "," raw_connection_do "," showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan with_showplan_on":{"type":"method","name":"with_showplan_on","children":[],"call":[" set_showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer Showplan explain":{"type":"method","name":"explain","children":[],"call":["printer pp "," showplan_printer new "," showplan_printer "," sp_executesql "," with_showplan_on "," to_sql "," showplan_printer new  pp "," showplan_ showplan_printer new  new "," showplan_ showplan_printer new  "," sp_execute to_sql  "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterXml pp":{"type":"method","name":"pp","children":[],"call":["Nokogiri  XML to_xml ","Nokogiri  XML ","@result rows first first ","@result rows first ","@result rows ","Nokogiri  XML to_@result rows first first  "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterXml initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable cast_item":{"type":"method","name":"cast_item","children":[],"call":["item to_s truncate "," max_column_width ","item to_s ","item to_s to "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable build_cells":{"type":"method","name":"build_cells","children":[],"call":["cells join ","cells << "," cast_item ljust ","@widths [] "," cast_item ","items each_with_index "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable build_separator":{"type":"method","name":"build_separator","children":[],"call":["+ + + ","+ + ","(send\n  (ivar :@widths) :map) join ","- * ","w + "," cell_padding * "," cell_padding ","@widths map "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable compute_column_widths":{"type":"method","name":"compute_column_widths","children":[],"call":["computed_widths << "," max_column_width ","computed_width > ","cells_in_column map max ","cells_in_column map ","(lvar :column) + "," cast_item ","r [] "," result rows map "," result rows "," result "," result columns each_with_index "," result columns "," tap ","cells_in_column map max s << ","cells_in_column map max  > ","(lvar :column) +  map max ","(lvar :column) +  map "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << "," build_cells "," result rows each "," result rows "," result "," result columns "," build_separator "," compute_column_widths "]}," ActiveRecord ConnectionAdapters SQLServer Showplan PrinterTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["SQLServer TableDefinition  new "," native_database_types "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements identity_column":{"type":"method","name":"identity_column","children":[],"call":[" schema_cache columns find "," schema_cache columns "," schema_cache "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements insert_sql?":{"type":"method","name":"insert_sql?","children":[],"call":["(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? ","sql =~ "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements query_requires_identity_insert?":{"type":"method","name":"query_requires_identity_insert?","children":[],"call":[" quote_table_name ","sql =~ ","id_column name "," identity_column "," get_table_name "," insert_sql? "," identity_columns first "," identity_columns "," quote_ get_table_name  "," identity_column  name "," identity_columns first  name "," get_ get_table_name  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements views_real_column_name":{"type":"method","name":"views_real_column_name","children":[],"call":["match_data [] ","view_definition match "," schema_cache view_information [] "," schema_cache view_information "," schema_cache "," view_information [] "," view_information ","view_definition match  [] "," schema_cache view_information []  match "," view_information []  match "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements table_name_or_views_table_name":{"type":"method","name":"table_name_or_views_table_name","children":[],"call":[" view_table_name "," schema_cache view_exists? "," schema_cache "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements view_information":{"type":"method","name":"view_information","children":[],"call":["view_info []= "," warn "," select_values join "," select_values ","identifier object_quoted ","view_info [] length == ","view_info [] length ","view_info [] ","view_info [] blank? ","view_info with_indifferent_access "," select_one ","identifier object ","SQLServer Utils  extract_identifiers ","@view_information [] "," quote ","identifier database ","identifier database present? ","view_info with_indifferent_access  []= "," select_one  []= ","SQLServer Utils  extract_identifiers  object_quoted ","view_info with_indifferent_access  [] length == "," select_one  [] length == ","view_info with_indifferent_access  [] length "," select_one  [] length ","view_info with_indifferent_access  [] "," select_one  [] ","view_info with_indifferent_access  [] blank? "," select_one  [] blank? ","view_info with_indifferent_access  with_indifferent_access "," select_one  with_indifferent_access ","SQLServer Utils  extract_identifiers  object ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s ","@view_info with_indifferent_access rmation [] ","@ select_one rmation [] ","SQLServer Utils  extract_identifiers  database ","SQLServer Utils  extract_identifiers  database present? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements view_table_name":{"type":"method","name":"view_table_name","children":[],"call":[" get_table_name ","view_info [] "," schema_cache view_information "," schema_cache "," view_information "," schema_cache view_information  [] "," view_information  [] "," schema_cache  schema_cache view_information rmation "," schema_cache  view_information rmation ","  schema_cache view_information rmation ","  view_information rmation "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements lowercase_schema_reflection_sql":{"type":"method","name":"lowercase_schema_reflection_sql","children":[],"call":[" lowercase_schema_reflection "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements detect_column_for!":{"type":"method","name":"detect_column_for!","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," schema_cache columns find "," schema_cache columns "," schema_cache "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements default_constraint_name":{"type":"method","name":"default_constraint_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements get_table_name":{"type":"method","name":"get_table_name","children":[],"call":["SQLServer Utils  extract_identifiers object ","SQLServer Utils  extract_identifiers ","Regexp  last_match [] ","Regexp  last_match ","sql =~ "," get_raw_table_name "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_indexes":{"type":"method","name":"remove_indexes","children":[],"call":[" remove_index ","index name ","(send\n  (send nil :indexes\n    (lvar :table_name)) :select) each ","index columns include? ","column_name to_s ","index columns "," indexes select "," indexes "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_default_constraint":{"type":"method","name":"remove_default_constraint","children":[],"call":[" do_execute ","row [] "," quote_table_name ","(send\n  (send\n    (send nil :execute_procedure\n      (sym :sp_helpconstraint)\n      (lvar :table_name)\n      (str \"nomsg\")) :flatten) :select) each ","row [] == "," execute_procedure flatten select "," execute_procedure flatten "," execute_procedure "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_check_constraints":{"type":"method","name":"remove_check_constraints","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name ","constraints each "," select_values "," quote_string "," select_values  each "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements info_schema_table_schema_column":{"type":"method","name":"info_schema_table_schema_column","children":[],"call":[" new_column "," lookup_cast_type "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements info_schema_table_name_column":{"type":"method","name":"info_schema_table_name_column","children":[],"call":[" new_column "," lookup_cast_type "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements column_definitions":{"type":"method","name":"column_definitions","children":[],"call":["ci []= ","ci [] to_i == ","ci [] to_i ","ci [] ","(const nil :TrueClass) include? ","ci [] class ","ci delete "," select_value ","default match [] ","default match ","SQLServer Utils  unquote_string ","Regexp  last_match [] ","Regexp  last_match ","(str \"\\n\") squish "," views_real_column_name ","default nil? ","ci symbolize_keys ","results map "," sp_executesql ","binds << ","identifier schema "," info_schema_table_schema_column ","identifier schema blank? ","identifier object "," info_schema_table_name_column ","(str \"\\n\") gsub ","identifier database_quoted "," lowercase_schema_reflection_sql "," table_name_or_views_table_name "," schema_cache view_exists? "," schema_cache ","SQLServer Utils  extract_identifiers ","identifier fully_qualified_database_quoted "," database_prefix "," database_prefix_remote_server? ","Relation QueryAttribute  new ","SQLServer Type UnicodeVarchar  new ","(str \"\\n\") gsub strip "," quote "," prepared_statements "," view_table_name "," view_exists? "," database_prefix_identifier "," column_definitions_sql "," raise ","result empty? ","columns tap ","ci symbolize_keys  []= ","ci symbolize_keys  [] to_i == ","ci symbolize_keys  [] to_i ","ci symbolize_keys  [] ","ci symbolize_keys  [] class ","ci symbolize_keys  delete "," select_ select_value  "," select_default match []  "," select_value  match [] ","ci []  match [] "," select_value  match ","ci []  match "," select_value  nil? ","ci []  nil? ","ci symbolize_keys  symbolize_keys "," sp_executesql  map "," sp_execute(str \"\\n\") gsub  "," sp_execute(str \"\\n\") gsub strip  "," sp_execute column_definitions_sql  ","SQLServer Utils  extract_identifiers  schema "," database_prefix_identifier  schema ","SQLServer Utils  extract_identifiers  schema blank? "," database_prefix_identifier  schema blank? ","SQLServer Utils  extract_identifiers  object "," database_prefix_identifier  object ","SQLServer Utils  extract_identifiers  database_quoted "," database_prefix_identifier  database_quoted ","identifier identifier fully_qualified_database_quoted _quoted "," lowercase_schema_reflection_(str \"\\n\") gsub  "," lowercase_schema_reflection_(str \"\\n\") gsub strip  "," lowercase_schema_reflection_ column_definitions_sql  "," schema_cache  schema_cache view_exists? ? "," schema_cache  view_exists? ? ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s ","SQLServer Utils  extract_ database_prefix_identifier s ","SQLServer Utils  extract_identifiers  fully_qualified_database_quoted "," database_prefix_identifier  fully_qualified_database_quoted ","identifier fully_qualified_identifier fully_qualified_database_quoted _quoted "," identifier fully_qualified_database_quoted _prefix "," identifier fully_qualified_database_quoted _prefix_remote_server? ","  schema_cache view_exists? ? ","  view_exists? ? "," database_prefix_SQLServer Utils  extract_identifiers  "," database_prefix_ database_prefix_identifier  "," identifier fully_qualified_database_quoted _prefix_identifier "," column_definitions_(str \"\\n\") gsub  "," column_definitions_(str \"\\n\") gsub strip  "," column_definitions_ column_definitions_sql  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements initialize_native_database_types":{"type":"method","name":"initialize_native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements views":{"type":"method","name":"views","children":[],"call":[" tables "," tables_sql "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" do_execute ","sql << ","allow_null == ","allow_null nil? ! ","allow_null nil? "," type_to_sql ","column scale ","column precision ","column limit ","column type "," quote_column_name "," quote "," quote_table_name ","default nil? ! ","default nil? "," detect_column_for! ","SQLServer Utils  extract_identifiers "," column_for "," detect_column_for!  scale "," column_for  scale "," detect_column_for!  precision "," column_for  precision "," detect_column_for!  limit "," column_for  limit "," detect_column_for!  type "," column_for  type "," quote_ detect_column_for! _name "," quote_ column_for _name "," detect_ detect_column_for! _for! "," detect_ column_for _for! ","  detect_column_for! _for ","  column_for _for "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":["(zsuper) join ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map with_index ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject ","s gsub gsub ","s gsub ","s to_sql ","s is_a? ","orders reject map ","orders reject ","(send\n  (lvar :order_columns) :<<\n  (zsuper)) join ","order_columns << ","(zs to_sql uper) join ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject ","s to_sql  gs to_sql ub gs to_sql ub ","s to_sql  gs to_sql ub ","s to_sql  to_s to_sql ql ","s to_sql  is to_sql _a? ","orders to_sql  reject map ","orders to_sql  reject ","(s to_sql end\n  (lvar :order_columns to_sql ) :<<\n  (zs to_sql uper)) join ","order_columns to_sql  << "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s ","(str \"string\") include? ","column_type_sql << ","(irange\n  (int 0)\n  (int 7)) === "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":["ForeignKeyDefinition  new "," extract_foreign_key_action ","row [] ","identifier object ","fk_info map "," execute_procedure ","identifier schema ","SQLServer Utils  extract_identifiers ","SQLServer Utils  extract_identifiers  object "," execute_procedure  map ","SQLServer Utils  extract_identifiers  schema ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" do_execute "," quote_table_name "," quote_column_name "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute_procedure ","identifier quoted ","SQLServer Utils  extract_identifiers "," raise "," allowed_index_name_length ","new_name length > ","new_name length "," index_name_length ","SQLServer Utils  extract_identifiers  quoted ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements rename_column":{"type":"method","name":"rename_column","children":[],"call":[" schema_cache clear_table_cache! "," schema_cache "," rename_column_indexes "," execute_procedure ","identifier quoted ","SQLServer Utils  extract_identifiers "," detect_column_for! "," clear_cache! ","SQLServer Utils  extract_identifiers  quoted ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" schema_cache clear_table_cache! "," schema_cache "," do_execute "," quote_column_name "," quote_default_value "," default_constraint_name "," quote_table_name ","c name to_s == ","column_name to_s ","c name to_s ","c name "," schema_cache columns find "," schema_cache columns "," remove_default_constraint "," clear_cache! "," quote_default_expression "," extract_new_default_value "," column_for "," quote_ column_for _name "," quote_ extract_new_default_value _value ","  extract_new_default_value _constraint_name "," column_for _name to_s "," schema_cache  column_for s find "," schema_cache  column_for s "," remove_ extract_new_default_value _constraint "," quote_ extract_new_default_value _expression "," extract_new_ extract_new_default_value _value ","  column_for _for "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements change_column":{"type":"method","name":"change_column","children":[],"call":[" do_execute ","sql_commands each ","sql_commands << ","(send\n  (send\n    (lvar :index) :columns) :map) join "," quote_column_name ","index columns map ","index columns "," quote_table_name ","index name ","indexes each "," quote_default_value ","options [] "," default_constraint_name "," options_include_default? ","sql_commands [] << ","sql_commands [] ","options [] == ","options [] nil? ! ","options [] nil? "," type_to_sql "," remove_indexes ","index columns include? ","column_name to_s "," indexes select "," indexes "," remove_default_constraint ","column_object type != ","type to_sym ","column_object type ","c name to_s == ","c name to_s ","c name "," schema_cache columns find "," schema_cache columns "," schema_cache "," quote_default_expression "," clear_cache! "," change_column_default "," default_constraint_name present? ","options key? ","sql_commands last << ","sql_commands last "," column_for ","column_object default ","options key? ! ","options [] present? "," quote_ quote_default_expression _value "," quote_options [] _value "," quote_column_object default _value ","  quote_default_expression _constraint_name "," options [] _constraint_name "," column_object default _constraint_name "," options_include_ quote_default_expression ? "," options_include_options [] ? "," options_include_column_object default ? "," remove_ quote_default_expression _constraint "," remove_options [] _constraint "," remove_column_object default _constraint "," quote_ quote_default_expression _expression "," quote_options [] _expression "," quote_column_object default _expression "," change_column_ quote_default_expression  "," change_column_options []  "," change_column_column_object default  ","  quote_default_expression _constraint_name present? "," options [] _constraint_name present? "," column_object default _constraint_name present? ","column_object  quote_default_expression  ","column_object options []  ","column_object column_object default  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_column":{"type":"method","name":"remove_column","children":[],"call":[" do_execute "," quote_column_name "," quote_table_name "," remove_indexes "," remove_default_constraint "," remove_check_constraints "," raise ","ArgumentError  new ","column_name is_a? "," column_exists? ! "," column_exists? ","options [] == ","options [] "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements rename_table":{"type":"method","name":"rename_table","children":[],"call":[" rename_table_indexes "," do_execute "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements new_column":{"type":"method","name":"new_column","children":[],"call":["SQLServerColumn  new ","SQLServer Column  new "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements columns":{"type":"method","name":"columns","children":[],"call":[" new_column ","ci [] "," lookup_cast_type ","ci slice "," column_definitions map "," column_definitions ","table_name blank? "," fetch_type_metadata "," lookup_ lookup_cast_type  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","column gsub! ","column ends_with? ","column strip! ","index [] split map ","index [] split ","index [] ","index [] =~ ","index with_indifferent_access ","data reduce "," select "," quote "," select_value ","columns << ","orders []= ","index [] split each ","column end_with? ","index with_indifferent_access es << ","index with_indifferent_access  [] split map ","index with_indifferent_access  [] split ","index with_indifferent_access  [] ","index with_indifferent_access  [] =~ ","index with_indifferent_access  with_indifferent_access ","index with_indifferent_access  [] split each "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements create_table":{"type":"method","name":"create_table","children":[],"call":[" schema_cache clear_table_cache! "," schema_cache "," clear_cache! "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" views include? "," views "," tables include? "," tables ","SQLServer Utils  extract_identifiers object ","SQLServer Utils  extract_identifiers ","table_name blank? "," data_source_exists? ","ActiveSupport Deprecation  warn ","(str \"            #table_exists? currently checks both tables and views.\\n\") squish "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements tables":{"type":"method","name":"tables","children":[],"call":[" select_values "," lowercase_schema_reflection_sql "," tables_sql ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" initialize_native_database_types freeze "," initialize_native_database_types "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation action_sql":{"type":"method","name":"action_sql","children":[],"call":[" raise ","(str \"              '\") strip_heredoc ","(str \"'\") squish "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options delete ","options [] =~ ","options [] ","column type == ","column type ","options fetch ","options [] == "," quote_default_expression "," options_include_default? ","options [] present? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation visit_TableDefinition":{"type":"method","name":"visit_TableDefinition","children":[],"call":["o instance_variable_set ","@conn to_sql match captures ","@conn to_sql match ","@conn to_sql ","o as "," quote_table_name ","o name ","o temporary ","query match captures ","query match ","o as to_sql ","o as respond_to? ","o if_not_exists "," quote_ quote_table_name  "," quote_o name  ","o as  match captures ","o as to_sql  match captures ","o as  match ","o as to_sql  match ","o o if_not_exists  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","sql << ","o type == ","o type ","o primary_key? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache prepare_views":{"type":"method","name":"prepare_views","children":[],"call":["@views []= "," key "," connection views each "," connection views "," connection "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache prepare_tables":{"type":"method","name":"prepare_tables","children":[],"call":["@tables []= "," key "," connection tables each "," connection tables "," connection "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache prepare_tables_and_views":{"type":"method","name":"prepare_tables_and_views","children":[],"call":[" prepare_tables ","@tables empty? "," prepare_views ","@views empty? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache key":{"type":"method","name":"key","children":[],"call":[" identifier quoted "," identifier "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache identifier":{"type":"method","name":"identifier","children":[],"call":["SQLServer Utils  extract_identifiers "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache view_information":{"type":"method","name":"view_information","children":[],"call":["@view_information []= "," connection send "," connection ","@view_information [] ","@view_information key? "," key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache view_exists?":{"type":"method","name":"view_exists?","children":[],"call":["@views []= "," connection views include? "," connection views "," connection ","@views [] ","@views key? "," prepare_tables_and_views "," key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["array [] "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache clear_table_cache!":{"type":"method","name":"clear_table_cache!","children":[],"call":["@view_information delete ","@views delete ","@tables delete ","@primary_keys delete ","@columns_hash delete ","@columns delete "," key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache size":{"type":"method","name":"size","children":[],"call":[" + ","(send\n  (array\n    (ivar :@views)\n    (ivar :@view_information)) :map) inject ","x size ","(ivar :@views) map "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache clear!":{"type":"method","name":"clear!","children":[],"call":["@view_information clear ","@views clear "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["Hash  [] ","col name "," columns map "," columns ","@columns_hash [] "," key ","col  key  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache columns":{"type":"method","name":"columns","children":[],"call":[" connection columns "," connection ","@columns [] "," key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache tables":{"type":"method","name":"tables","children":[],"call":[" key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" view_exists? ","@tables []= "," connection table_exists? "," connection ","@tables [] ","@tables key? "," prepare_tables_and_views "," key "," connection @tables []= ? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" connection primary_key "," connection "," table_exists? ","@primary_keys [] "," key "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting quoted_value_acts_like_time_filter":{"type":"method","name":"quoted_value_acts_like_time_filter","children":[],"call":["value send ","value respond_to? ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServer Quoting _quote":{"type":"method","name":"_quote","children":[],"call":["value is_utf8? ","value quote_ss_value ","value hex ","value quoted "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":["value to_s ","value acts_like? ","(send\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :value) :usec) :to_s)) :/\n  (int 1000000)) round to_s split last ","(send\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :value) :usec) :to_s)) :/\n  (int 1000000)) round to_s split ","(send\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :value) :usec) :to_s)) :/\n  (int 1000000)) round to_s ","(send\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :value) :usec) :to_s)) :/\n  (int 1000000)) round "," BigDecimal / "," BigDecimal ","value usec to_s ","value usec ","value respond_to? ","SQLServer Utils  with_sqlserver_db_date_formats ","Type DateTime  new type_cast_for_database ","Type DateTime  new ","Type Date  new type_cast_for_database ","Type Date  new ","Type DateTime  new serialize ","Type Date  new serialize "]}," ActiveRecord ConnectionAdapters SQLServer Quoting unquoted_false":{"type":"method","name":"unquoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting unquoted_true":{"type":"method","name":"unquoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_default_value":{"type":"method","name":"quote_default_value","children":[],"call":[" quote ","value =~ ","column type == ","column type "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["SQLServer Utils  extract_identifiers quoted ","SQLServer Utils  extract_identifiers "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["SQLServer Utils  quote_string "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements finish_statement_handle":{"type":"method","name":"finish_statement_handle","children":[],"call":["handle drop ","handle finished? ! ","handle finished? ","handle respond_to? ","handle cancel ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements handle_to_names_and_values_odbc":{"type":"method","name":"handle_to_names_and_values_odbc","children":[],"call":["handle fetch_all ","handle each_hash ","options [] ","ActiveRecord Result  new ","c name ","handle columns map ","handle columns ","c name downcase "," lowercase_schema_reflection ","@connection use_utc= ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements handle_to_names_and_values_dblib":{"type":"method","name":"handle_to_names_and_values_dblib","children":[],"call":["ActiveRecord Result  new ","options [] ","handle fields ","c downcase ","handle fields map "," lowercase_schema_reflection ","handle each ","qo []= ","options [] == ","ActiveRecord Base  default_timezone "," tap ","ActiveRecord  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements handle_to_names_and_values":{"type":"method","name":"handle_to_names_and_values","children":[],"call":[" handle_to_names_and_values_odbc "," handle_to_names_and_values_dblib ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements handle_more_results?":{"type":"method","name":"handle_more_results?","children":[],"call":["handle more_results ","@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements raw_connection_run":{"type":"method","name":"raw_connection_run","children":[],"call":["@connection run ","@connection run_block "," block_given? ","@connection execute ","@connection_options [] "," dblib_execute "," ensure_established_connection! "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements _raw_select":{"type":"method","name":"_raw_select","children":[],"call":[" finish_statement_handle "," handle_to_names_and_values "," raw_connection_run "," finish_statement_ raw_connection_run  ","  raw_connection_run _to_names_and_values "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements raw_select":{"type":"method","name":"raw_select","children":[],"call":[" _raw_select "," log ","options [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements raw_connection_do":{"type":"method","name":"raw_connection_do","children":[],"call":["@connection do ","@connection execute do ","@connection execute ","@connection_options [] ","result do "," raise ","result is_a? "," dblib_execute "," ensure_established_connection! ","@connection execute  do ","@connection execute  is_a? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sp_executesql_sql":{"type":"method","name":"sp_executesql_sql","children":[],"call":["sql << ","params empty? "," quote ","(send\n  (send\n    (lvar :params) :map) :with_index) join ","params map with_index ","params map ","types join ","sql sub! ","params each with_index ","params each ","name == ","param to_s ","sql sub ","sql freeze ","sql sub  << ","(send\n  (send\n    (lvar :params) :map) :with_index) join  empty? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :params) :map) :with_index) join ) :map) :with_index) join ","(send\n  (send\n    (lvar :params) :map) :with_index) join  map with_index ","(send\n  (send\n    (lvar :params) :map) :with_index) join  map "," quote  join ","sql sub  sub! ","(send\n  (send\n    (lvar :params) :map) :with_index) join  each with_index ","(send\n  (send\n    (lvar :params) :map) :with_index) join  each ","sql sub  sub ","sql sub  freeze "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sp_executesql_sql_type":{"type":"method","name":"sp_executesql_sql_type","children":[],"call":["value is_a? ","column sql_type_for_statement ","SQLServerColumn  === ","nvarchar(max) freeze ","int freeze ","attr value_for_database ","attr type sqlserver_type ","attr type ","attr type respond_to? ","bigint freeze ","value > ","attr value_for_database  is_a? ","attr attr value_for_database _for_database ","attr value_for_database  > "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sp_executesql_types_and_parameters":{"type":"method","name":"sp_executesql_types_and_parameters","children":[],"call":["params << "," quote ","types << "," sp_executesql_sql_type ","binds each_with_index "," sp_executesql_sql_param ","attr value ","attr is_a? ","attr value  value ","attr value  is_a? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sp_executesql":{"type":"method","name":"sp_executesql","children":[],"call":[" raw_select "," sp_executesql_sql "," sp_executesql_types_and_parameters ","options []= ","options [] != ","options [] "," without_prepared_statement? "," sp_execute sp_executesql_sql _ sp_executesql_sql  "," sp_execute sp_executesql_sql _types_and_parameters "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements do_execute":{"type":"method","name":"do_execute","children":[],"call":[" raw_connection_do "," log "," materialize_transactions "," mark_transaction_written_if_write "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements set_identity_insert":{"type":"method","name":"set_identity_insert","children":[],"call":[" raise "," do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements table_name_from_binds":{"type":"method","name":"table_name_from_binds","children":[],"call":["(send\n  (lvar :binds) :detect) try try ","(send\n  (lvar :binds) :detect) try ","SQLServerColumn  === ","binds detect "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements binds_have_identity_column?":{"type":"method","name":"binds_have_identity_column?","children":[],"call":["column is_identity? ","SQLServerColumn  === ","binds any? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":["sql insert ","sql index ","SQLServer Utils  extract_identifiers quoted ","SQLServer Utils  extract_identifiers "," database_prefix_remote_server? ! "," database_prefix_remote_server? "," class use_output_inserted "," class "," primary_key "," query_requires_identity_insert? ","pk nil? ","sql dup insert ","sql dup ","(str \"                      DECLARE @ssaIdInsertTable table (\") strip_heredoc ","exclude_output_inserted is_a? "," exclude_output_inserted_table_name? "," use_output_inserted? "," get_table_name ","(str \"DECLARE @ssaIdInsertTable table (\") squish "," primary_key  nil? "," exclude_output_inserted_table_name?  is_a? "," exclude_output_inserted_ query_requires_identity_insert? ? ","  exclude_output_inserted_table_name? _table_name? "," get_ query_requires_identity_insert?  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements select":{"type":"method","name":"select","children":[],"call":[" exec_query "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements charset":{"type":"method","name":"charset","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements create_database":{"type":"method","name":"create_database","children":[],"call":[" do_execute ","options inject ","v present? ","options select ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge! ","options symbolize_keys ","@connection_options [] ","SQLServer Utils  extract_identifiers ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  inject ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  select ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge! ) :[]\n    (sym :collation))) merge! ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  symbolize_keys ","@connection_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements drop_database":{"type":"method","name":"drop_database","children":[],"call":[" raise ","err message =~ ","err message "," remove_database_connections_and_rollback ","retry_count >= "," do_execute ","(str \"\\n\") squish "," quote ","name object ","SQLServer Utils  extract_identifiers ","SQLServer Utils  extract_identifiers  object "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements recreate_database!":{"type":"method","name":"recreate_database!","children":[],"call":[" use_database "," create_database "," drop_database "," current_database "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" do_execute "," remove_database_connections_and_rollback "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements newsequentialid_function":{"type":"method","name":"newsequentialid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements newid_function":{"type":"method","name":"newid_function","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements user_options_language":{"type":"method","name":"user_options_language","children":[],"call":[" user_options [] "," user_options "," select_value "," sqlserver_azure? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements user_options_isolation_level":{"type":"method","name":"user_options_isolation_level","children":[],"call":[" user_options [] "," user_options "," select_value ","(str \"SELECT CASE [transaction_isolation_level]\\n\") squish "," sqlserver_azure? "," (str \"SELECT CASE [transaction_isolation_level]\\n\") squish server_azure? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements user_options_dateformat":{"type":"method","name":"user_options_dateformat","children":[],"call":[" user_options [] "," user_options "," select_value "," sqlserver_azure? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements user_options":{"type":"method","name":"user_options","children":[],"call":["values []= ","row [] ","row [] gsub ","row instance_of? ","row values [] ","row values ","row values [] gsub "," select_rows reduce ","HashWithIndifferentAccess  new "," select_rows "," sqlserver_azure? ","rows reduce ","rows first ","rows last empty? ","rows last ","rows size == ","rows size "," select_rows first  reduce "," select_ select_rows  reduce "," select_rows first  "," select_ select_rows  ","rows first  reduce "," select_rows  reduce ","rows first  first "," select_rows  first ","rows first  last empty? "," select_rows  last empty? ","rows first  last "," select_rows  last ","rows first  size == "," select_rows  size == ","rows first  size "," select_rows  size "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements use_database":{"type":"method","name":"use_database","children":[],"call":[" do_execute ","name blank? ","SQLServer Utils  extract_identifiers quoted ","SQLServer Utils  extract_identifiers ","@connection_options [] "," sqlserver_azure? ","SQLServer Utils  extract_identifiers quoted  blank? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements with_identity_insert_enabled":{"type":"method","name":"with_identity_insert_enabled","children":[],"call":[" set_identity_insert "," quote_table_name "," table_name_or_views_table_name "," quote_ quote_table_name  ","  quote_table_name _or_views_ quote_table_name  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":["results first ","results many? ","get_rows call "," handle_more_results? ","results << ","rows []= ","r with_indifferent_access ","rows each_with_index "," handle_to_names_and_values "," lambda "," raw_connection_run ","row with_indifferent_access ","row is_a? ","result each map ","result each "," block_given? ","@connection execute ","@connection_options [] "," log ","(str \"EXEC \") strip ","(and\n  (send\n    (lvar :variables) :any?)\n  (send\n    (send\n      (lvar :variables) :first) :is_a?\n    (const nil :Hash))) join "," quote ","variables map ","variables first map ","variables first ","variables first is_a? ","variables any? ","ActiveRecord Base  default_timezone "," materialize_transactions "," dblib_execute "," ensure_established_connection! ","ActiveRecord  default_timezone ","row with_indifferent_access esults firow with_indifferent_access st ","@connection execute s first ","row with_indifferent_access esults many? ","@connection execute s many? ","get_ handle_to_names_and_values  call ","get_row with_indifferent_access ows call "," handle_morow with_indifferent_access e_row with_indifferent_access esults? "," handle_more_@connection execute s? ","row with_indifferent_access esults << ","@connection execute s << "," handle_to_names_and_values  []= ","row with_indifferent_access ows []= ","row with_indifferent_access  with_indifferow with_indifferent_access ent_access "," handle_to_names_and_values  each_with_index ","row with_indifferent_access ows each_with_index "," row with_indifferent_access aw_connection_row with_indifferent_access un ","row with_indifferent_access ow with_indifferow with_indifferent_access ent_access ","row with_indifferent_access ow is_a? ","row with_indifferent_access esult each map ","@connection execute  each map ","row with_indifferent_access esult each ","@connection execute  each ","(strow with_indifferent_access  \"EXEC \") strow with_indifferent_access ip ","(and\n  (send\n    (lvarow with_indifferent_access  :varow with_indifferent_access iables) :any?)\n  (send\n    (send\n      (lvarow with_indifferent_access  :varow with_indifferent_access iables) :firow with_indifferent_access st) :is_a?\n    (const nil :Hash))) join ","varow with_indifferent_access iables map ","varow with_indifferent_access iables firow with_indifferent_access st map ","varow with_indifferent_access iables firow with_indifferent_access st ","varow with_indifferent_access iables firow with_indifferent_access st is_a? ","varow with_indifferent_access iables any? ","ActiveRecorow with_indifferent_access d Base  default_timezone "," materow with_indifferent_access ialize_trow with_indifferent_access ansactions "," ensurow with_indifferent_access e_established_connection! ","ActiveRecorow with_indifferent_access d  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":["Arel Nodes Bin  new ","Arel Nodes  build_quoted "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements set_transaction_isolation_level":{"type":"method","name":"set_transaction_isolation_level","children":[],"call":[" begin_db_transaction "," do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" begin_db_transaction "," set_transaction_isolation_level "," transaction_isolation_levels fetch "," transaction_isolation_levels "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements transaction_isolation_levels":{"type":"method","name":"transaction_isolation_levels","children":[],"call":[" merge "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_update":{"type":"method","name":"exec_update","children":[],"call":[" rows first first "," rows first "," rows ","sql << ","(lvar :sql) rows first first ","(lvar :sql) rows first ","(lvar :sql) rows ","sql dup << ","sql dup ","sql dup <<  << ","(lvar :sql dup << ) rows first first ","(lvar :sql dup << ) rows first ","(lvar :sql dup << ) rows ","sql dup <<  dup << ","sql dup <<  dup "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":[" rows first first "," rows first "," rows ","sql << ","(lvar :sql) rows first first ","(lvar :sql) rows first ","(lvar :sql) rows ","sql dup << ","sql dup ","sql dup <<  << ","(lvar :sql dup << ) rows first first ","(lvar :sql dup << ) rows first ","(lvar :sql dup << ) rows ","sql dup <<  dup << ","sql dup <<  dup "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" exec_query "," with_identity_insert_enabled "," table_name_from_binds "," binds_have_identity_column? "," query_requires_identity_insert? "," exec_insert_requires_identity? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":[" sp_executesql "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," mark_transaction_written_if_write "," transform_query "," sp_execute transform_query  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":[" do_execute "," with_identity_insert_enabled "," query_requires_identity_insert? "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," mark_transaction_written_if_write "," transform_query "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":[" sp_executesql "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits joins_per_query":{"type":"method","name":"joins_per_query","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits sql_query_length":{"type":"method","name":"sql_query_length","children":[],"call":["65536 * "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits in_clause_length":{"type":"method","name":"in_clause_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits columns_per_multicolumn_index":{"type":"method","name":"columns_per_multicolumn_index","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits indexes_per_table":{"type":"method","name":"indexes_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits columns_per_table":{"type":"method","name":"columns_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits table_name_length":{"type":"method","name":"table_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits column_name_length":{"type":"method","name":"column_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer CoreExt ODBC Database run_block":{"type":"method","name":"run_block","children":[],"call":["sth drop "," run "," run  drop "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt ODBC Statement finished?":{"type":"method","name":"finished?","children":[],"call":[" connected? "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Explain unprepare_sqlserver_statement":{"type":"method","name":"unprepare_sqlserver_statement","children":[],"call":["Utils  unquote_string ","executesql_args join strip match [] ","executesql_args join strip match ","executesql_args join strip ","executesql_args join ","executesql_args pop ","executesql_args many? ","arg =~ ","executesql_args reject! ","executesql split ","sql from ","SQLSERVER_STATEMENT_PREFIX  length ","sql starts_with? ","unprepared_sql sub! ","arg match [] ","arg match ","args each_with_index ","args from ","args length / ","args length ","args shift strip match [] ","args shift strip match ","args shift strip ","args shift ","executesql sub "," connection quote "," connection ","binds each_with_index ","executesql match to_a [] ","executesql match to_a ","executesql match ","bind value_for_database ","bind is_a? ","sql start_with? ","executesql_args join strip match [] _args join strip match [] ","sql from _args join strip match [] ","executesql sub _args join strip match [] ","executesql match to_a [] _args join strip match [] ","executesql split  join strip match [] ","executesql_args from  join strip match [] ","executesql_executesql split  join strip match [] ","executesql_args join strip match [] _args join strip match ","sql from _args join strip match ","executesql sub _args join strip match ","executesql match to_a [] _args join strip match ","executesql split  join strip match ","executesql_args from  join strip match ","executesql_executesql split  join strip match ","executesql_args join strip match [] _args join strip ","sql from _args join strip ","executesql sub _args join strip ","executesql match to_a [] _args join strip ","executesql split  join strip ","executesql_args from  join strip ","executesql_executesql split  join strip ","executesql_args join strip match [] _args join ","sql from _args join ","executesql sub _args join ","executesql match to_a [] _args join ","executesql split  join ","executesql_args from  join ","executesql_executesql split  join ","executesql_args join strip match [] _args pop ","sql from _args pop ","executesql sub _args pop ","executesql match to_a [] _args pop ","executesql split  pop ","executesql_args from  pop ","executesql_executesql split  pop ","executesql_args join strip match [] _args many? ","sql from _args many? ","executesql sub _args many? ","executesql match to_a [] _args many? ","executesql split  many? ","executesql_args from  many? ","executesql_executesql split  many? ","executesql_args join strip match [] _args reject! ","sql from _args reject! ","executesql sub _args reject! ","executesql match to_a [] _args reject! ","executesql split  reject! ","executesql_args from  reject! ","executesql_executesql split  reject! ","executesql_args join strip match []  split ","sql from  split ","executesql sub  split ","executesql match to_a []  split ","Utils  unquote_string  sub! ","args shift strip match []  sub! ","args from  each_with_index ","executesql split  each_with_index ","args from  from ","executesql split  from ","args from  length / ","executesql split  length / ","args from  length ","executesql split  length ","args from  shift strip match [] ","executesql split  shift strip match [] ","args from  shift strip match ","executesql split  shift strip match ","args from  shift strip ","executesql split  shift strip ","args from  shift ","executesql split  shift ","executesql_args join strip match []  sub ","sql from  sub ","executesql sub  sub ","executesql match to_a []  sub ","executesql_args join strip match []  match to_a [] ","sql from  match to_a [] ","executesql sub  match to_a [] ","executesql match to_a []  match to_a [] ","executesql_args join strip match []  match to_a ","sql from  match to_a ","executesql sub  match to_a ","executesql match to_a []  match to_a ","executesql_args join strip match []  match ","sql from  match ","executesql sub  match ","executesql match to_a []  match ","bind arg match [] _for_database ","bind  connection quote _for_database "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Explain exec_explain":{"type":"method","name":"exec_explain","children":[],"call":[" unprepare_sqlserver_statement ","queries map "," connection adapter_name == "," connection adapter_name "," connection "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt AttributeMethods attributes_for_update":{"type":"method","name":"attributes_for_update","children":[],"call":["column is_identity? ","column respond_to? "," class columns_hash [] "," class columns_hash "," class "," reject "," class connection adapter_name == "," class connection adapter_name "," class connection "," class columns_hash []  is_identity? "," class columns_hash []  respond_to? "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt ActiveRecord ClassMethods execute_procedure":{"type":"method","name":"execute_procedure","children":[],"call":[" connection execute_procedure "," connection "," connection respond_to? "]}," Arel Visitors SQLServer remote_server_table_name":{"type":"method","name":"remote_server_table_name","children":[],"call":["ActiveRecord ConnectionAdapters SQLServer Utils  extract_identifiers quoted ","ActiveRecord ConnectionAdapters SQLServer Utils  extract_identifiers ","o name ","o engine connection database_prefix ","o engine connection ","o engine ","o class engine connection database_prefix ","o class engine connection ","o class engine ","o class "]}," Arel Visitors SQLServer visit_Arel_Table":{"type":"method","name":"visit_Arel_Table","children":[],"call":["collector << "," quote_table_name ","o table_alias ","o name "," remote_server_table_name ","o engine connection database_prefix_remote_server? ","o engine connection ","o engine ","o engine connection respond_to? ","o class engine connection database_prefix_remote_server? ","o class engine connection ","o class engine ","o class ","o class engine connection respond_to? "," quote_ quote_table_name  "," quote_ remote_server_table_name  "," remote_server_ quote_table_name  "," remote_server_ remote_server_table_name  "]}," ActiveRecord Tasks DatabaseTasksSQLServer ClassMethods local_ipaddr?":{"type":"method","name":"local_ipaddr?","children":[],"call":["ip include? ","LOCAL_IPADDR  any? "]}," ActiveRecord Tasks DatabaseTasksSQLServer ClassMethods configuration_host_ip":{"type":"method","name":"configuration_host_ip","children":[],"call":["Socket  getaddrinfo [] [] ","Socket  getaddrinfo [] ","Socket  getaddrinfo ","configuration [] ","configuration host "]}," ActiveRecord Tasks DatabaseTasksSQLServer ClassMethods local_database?":{"type":"method","name":"local_database?","children":[],"call":[" local_ipaddr? "," configuration_host_ip "]}," ActiveRecord Tasks SQLServerDatabaseTasks establish_master_connection":{"type":"method","name":"establish_master_connection","children":[],"call":[" establish_connection "," configuration merge "," configuration "," configuration_hash merge "," configuration_hash "]}," ActiveRecord Tasks SQLServerDatabaseTasks default_collation":{"type":"method","name":"default_collation","children":[],"call":[" configuration [] "," configuration "," configuration_hash [] "," configuration_hash "]}," ActiveRecord Tasks SQLServerDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks SQLServerDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":[" connection execute ","File  read "," connection "]}," ActiveRecord Tasks SQLServerDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["file puts ","File  open ","dump gsub! ","File  read "," raise ","Kernel  system ","command join ","command concat ","Shellwords  escape "," connection views map "," connection views "," connection "," connection tables map "," connection tables "," configuration [] "," configuration "," puts ","command inspect "," configuration_hash [] "," configuration_hash ","File  read  gsub! "]}," ActiveRecord Tasks SQLServerDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" create "," drop "," clear_active_connections! "]}," ActiveRecord Tasks SQLServerDatabaseTasks collation":{"type":"method","name":"collation","children":[],"call":[" connection collation "," connection "]}," ActiveRecord Tasks SQLServerDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" connection charset "," connection "]}," ActiveRecord Tasks SQLServerDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":[" connection drop_database "," configuration [] "," configuration "," connection "," establish_master_connection "," configuration database "]}," ActiveRecord Tasks SQLServerDatabaseTasks create":{"type":"method","name":"create","children":[],"call":[" raise ","(str \"database .* already exists\") === ","error message "," establish_connection "," configuration "," connection create_database "," configuration merge "," default_collation "," configuration [] "," connection "," establish_master_connection ","e message "," configuration_hash merge "," configuration_hash "," configuration database "]}," ActiveRecord Tasks SQLServerDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["@configuration configuration_hash "]}," ActiveRecord ConnectionHandling sqlserver_connection":{"type":"method","name":"sqlserver_connection","children":[],"call":["ConnectionAdapters SQLServerAdapter  new ","config merge "," logger "," raise ","config inspect "," require ","config key? ","config [] to_s downcase underscore to_sym ","config [] to_s downcase underscore ","config [] to_s downcase ","config [] to_s ","config [] ","config reverse_merge! ","config symbolize_keys ","e message match ","e message ","ConnectionAdapters SQLServerAdapter  new_client ","config []= "," sqlserver_adapter_class new "," sqlserver_adapter_class new_client "," sqlserver_adapter_class ","config symbolize_keys  merge ","config symbolize_keys  inspect ","config symbolize_keys  key? ","config symbolize_keys  [] to_s downcase underscore to_sym ","config symbolize_keys  [] to_s downcase underscore ","config symbolize_keys  [] to_s downcase ","config symbolize_keys  [] to_s ","config symbolize_keys  [] ","config symbolize_keys  reverse_merge! ","config symbolize_keys  symbolize_keys ","config symbolize_keys  []= "]}," ActiveRecord ConnectionAdapters SQLServerColumn case_sensitive?":{"type":"method","name":"case_sensitive?","children":[],"call":[" collation match ! "," collation match "," collation "]}," ActiveRecord ConnectionAdapters SQLServerColumn collation":{"type":"method","name":"collation","children":[],"call":["@sqlserver_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_prefix":{"type":"method","name":"database_prefix","children":[],"call":["@connection_options [] "]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_prefix_remote_server?":{"type":"method","name":"database_prefix_remote_server?","children":[],"call":["name object blank? ","name object ","name fully_qualified? ","SQLServer Utils  extract_identifiers "," database_prefix "," database_prefix blank? ","SQLServer Utils  extract_identifiers  object blank? ","SQLServer Utils  extract_identifiers  object ","SQLServer Utils  extract_identifiers  fully_qualified? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter tables_with_referential_integrity":{"type":"method","name":"tables_with_referential_integrity","children":[],"call":["SQLServer Utils  quoted_raw ","schemas_and_tables map "," select_rows ","(str \"          SELECT s.name, o.name\\n\") strip_heredoc ","(str \"          SELECT DISTINCT s.name, o.name\\n\") strip_heredoc ","(str \"SELECT DISTINCT s.name, o.name\\n\") squish "," select_rows  map "]}," ActiveRecord ConnectionAdapters SQLServer Utils quoted_raw":{"type":"method","name":"quoted_raw","children":[],"call":["SQLServer Utils Name  new quoted_raw ","SQLServer Utils Name  new "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name quoted_raw":{"type":"method","name":"quoted_raw","children":[],"call":[" quote "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name fully_qualified?":{"type":"method","name":"fully_qualified?","children":[],"call":[" parts compact size == "," parts compact size "," parts compact "," parts "," qualified_level == "," qualified_level "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name fully_qualified_database_quoted":{"type":"method","name":"fully_qualified_database_quoted","children":[],"call":["(send nil :server_quoted) compact join ","(send nil :server_quoted) compact "," database_quoted "," server_quoted "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_scale":{"type":"method","name":"fractional_scale","children":[],"call":[" precision "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_precision":{"type":"method","name":"fractional_precision","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_digits":{"type":"method","name":"fractional_digits","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_property":{"type":"method","name":"fractional_property","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional fractional_scale":{"type":"method","name":"fractional_scale","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional fractional_precision":{"type":"method","name":"fractional_precision","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional fractional_operator":{"type":"method","name":"fractional_operator","children":[],"call":["10 ** "," fractional_digits "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional fractional_digits":{"type":"method","name":"fractional_digits","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional fractional_property":{"type":"method","name":"fractional_property","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional quote_fractional":{"type":"method","name":"quote_fractional","children":[],"call":["seconds to_d to_s split last to "," fractional_scale - "," fractional_scale ","seconds to_d to_s split last ","seconds to_d to_s split ","seconds to_d to_s ","seconds to_d ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ","value send to_f / "," fractional_operator to_f "," fractional_operator ","value send to_f ","value send "," fractional_property ","seconds to_s split last to ","seconds to_s split last ","seconds to_s split ","seconds to_s ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ","frac_seconds to_f / ","frac_seconds to_f "," seconds_precision "," fractional_scale == ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split last to ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split last to ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split last ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split last ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s split ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d to_s ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_d ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split last to ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split last to ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split last ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split last ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s split ","(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s ","(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_s ","(send\n  (send\n    (lvar :frac_(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ","(send\n  (send\n    (lvar :frac_(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ","(send\n  (send\n    (lvar : seconds_precision ) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round ","frac_(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_f / ","frac_(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_f / "," seconds_precision  to_f / ","frac_(send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_f ","frac_(send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round  to_f "," seconds_precision  to_f "," (send\n  (send\n    (send\n      (lvar :value) :send\n      (send nil :fractional_property)) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round _precision "," (send\n  (send\n    (lvar :frac_seconds) :to_f) :/\n  (send\n    (send nil :fractional_operator) :to_f)) round _precision "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional cast_fractional":{"type":"method","name":"cast_fractional","children":[],"call":["value change "," fractional_property ","(send\n  (lvar :seconds) :*\n  (send nil :fractional_operator)) to_i ","seconds * "," fractional_operator ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round "," fractional_scale ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","1 / "," fractional_precision ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","value send to_f / "," fractional_operator to_f ","value send to_f ","value send ","value send zero? ","value respond_to? ! ","value respond_to? "," fractional_scale == ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (send nil :fractional_operator)) to_i ","(send\n  (lvar :value send to_f / ) :*\n  (send nil :fractional_operator)) to_i ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round  * ","value send to_f /  * ","(send\n  (send\n    (begin\n      (send\n        (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (send\n    (begin\n      (send\n        (lvar :value send to_f / ) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","(send\n  (lvar :value send to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (lvar :value send to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round "]}," ActiveRecord ConnectionAdapters SQLServer Type Time fractional_scale":{"type":"method","name":"fractional_scale","children":[],"call":[" precision "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime cast_fractional":{"type":"method","name":"cast_fractional","children":[],"call":["value change "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset zone_conversion":{"type":"method","name":"zone_conversion","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":[" type_cast_for_database inspect "," type_cast_for_database "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value to_s ","value acts_like? "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime2 type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime zone_conversion":{"type":"method","name":"zone_conversion","children":[],"call":["value send ","value respond_to? ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["v << ","fraction to_i zero? ","fraction to_i "," quote_fractional ","(begin\n  (lvar :datetime)) tap ","value to_s "," zone_conversion ","value acts_like? "," quote_fractional  to_i zero? "," quote_fractional  to_i "," quote_ quote_fractional al ","(begin\n  (lvar :value to_s )) tap "," zone_conversion  to_s "," zone_conversion  acts_like? "]}," ActiveRecord ConnectionAdapters SQLServer Type Date type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":[" type_cast_for_database inspect "," type_cast_for_database "," serialize quoted "," serialize "]}," ActiveRecord ConnectionAdapters SQLServer Type Date type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value to_s ","value acts_like? ","value present? "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition datetimeoffset":{"type":"method","name":"datetimeoffset","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition datetime2":{"type":"method","name":"datetime2","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements data_sources":{"type":"method","name":"data_sources","children":[],"call":[" tables + "," views "," tables "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks create_database_edition_options":{"type":"method","name":"create_database_edition_options","children":[],"call":["edition_options present? ","(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :maxsize)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_maxsize)))\n            (pair\n              (sym :edition)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_edition)))\n            (pair\n              (sym :service_objective)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_service_objective)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ","k to_s upcase ","k to_s ","(send\n  (send\n    (hash\n      (pair\n        (sym :maxsize)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_maxsize)))\n      (pair\n        (sym :edition)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_edition)))\n      (pair\n        (sym :service_objective)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_service_objective)))) :merge\n    (send\n      (lvar :options) :symbolize_keys)) :select) slice map ","(send\n  (send\n    (hash\n      (pair\n        (sym :maxsize)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_maxsize)))\n      (pair\n        (sym :edition)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_edition)))\n      (pair\n        (sym :service_objective)\n        (send\n          (lvar :copts) :[]\n          (sym :azure_service_objective)))) :merge\n    (send\n      (lvar :options) :symbolize_keys)) :select) slice ","v present? ","(pair\n  (sym :maxsize)\n  (send\n    (lvar :copts) :[]\n    (sym :azure_maxsize))) merge select ","(pair\n  (sym :maxsize)\n  (send\n    (lvar :copts) :[]\n    (sym :azure_maxsize))) merge ","options symbolize_keys ","copts [] ","(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :maxsize)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_maxsize)))\n            (pair\n              (sym :edition)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_edition)))\n            (pair\n              (sym :service_objective)\n              (send\n                (lvar :copts) :[]\n                (sym :azure_service_objective)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join  present? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks create_database_options":{"type":"method","name":"create_database_options","children":[],"call":["(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ","k to_s upcase ","k to_s ","(send\n  (send\n    (hash\n      (pair\n        (sym :collate)\n        (send\n          (lvar :copts) :[]\n          (sym :collation)))) :merge\n    (send\n      (lvar :options) :symbolize_keys)) :select) slice map ","(send\n  (send\n    (hash\n      (pair\n        (sym :collate)\n        (send\n          (lvar :copts) :[]\n          (sym :collation)))) :merge\n    (send\n      (lvar :options) :symbolize_keys)) :select) slice ","v present? ","(pair\n  (sym :collate)\n  (send\n    (lvar :copts) :[]\n    (sym :collation))) merge select ","(pair\n  (sym :collate)\n  (send\n    (lvar :copts) :[]\n    (sym :collation))) merge ","options symbolize_keys ","copts [] ","(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ","(send\n  (send\n    (hash\n      (pair\n        (sym :collate)\n        (send\n          (lvar :copts) :[]\n          (sym :collation)))) :merge\n    (send\n      (lvar :(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ) :symbolize_keys)) :select) slice map ","(send\n  (send\n    (hash\n      (pair\n        (sym :collate)\n        (send\n          (lvar :copts) :[]\n          (sym :collation)))) :merge\n    (send\n      (lvar :(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join ) :symbolize_keys)) :select) slice ","(send\n  (send\n    (block\n      (send\n        (send\n          (hash\n            (pair\n              (sym :collate)\n              (send\n                (lvar :copts) :[]\n                (sym :collation)))) :merge\n          (send\n            (lvar :options) :symbolize_keys)) :select)\n      (args\n        (arg :_)\n        (arg :v))\n      (send\n        (lvar :v) :present?)) :slice\n    (splat\n      (lvar :keys))) :map) join  symbolize_keys "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks collation":{"type":"method","name":"collation","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks drop_database":{"type":"method","name":"drop_database","children":[],"call":[" do_execute ","SQLServer Utils  extract_identifiers "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseTasks create_database":{"type":"method","name":"create_database","children":[],"call":[" do_execute "," create_database_edition_options "," create_database_options ","SQLServer Utils  extract_identifiers ","options inject ","v present? ","options select ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge! ","options symbolize_keys ","@connection_options [] "," create_database_ create_database_edition_options  "," create_database_edition_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  "," create_database_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  inject ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  select ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge! ) :[]\n    (sym :collation))) merge! ","(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  symbolize_keys ","@connection_(pair\n  (sym :collation)\n  (send\n    (ivar :@connection_options) :[]\n    (sym :collation))) merge!  [] "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements case_insensitive_comparison":{"type":"method","name":"case_insensitive_comparison","children":[],"call":["table [] eq ","table [] ","column case_sensitive? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements case_sensitive_comparison":{"type":"method","name":"case_sensitive_comparison","children":[],"call":["table [] eq ","table [] ","column case_sensitive? ","Arel Nodes Bin  new ","Arel Nodes BindParam  new ","value acts_like? ","column case_sensitive? ! ","column collation ","attribute eq "," column_for_attribute "," column_for_attribute  case_sensitive? "," column_for_attribute  case_sensitive? ! "," column_for_attribute  collation ","  column_for_attribute _for_attribute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_rollback_to_savepoint":{"type":"method","name":"exec_rollback_to_savepoint","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":[" do_execute "]}," ActiveRecord ConnectionAdapters SQLServer Type Char Data quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string "]}," ActiveRecord ConnectionAdapters SQLServer Type Char Data initialize":{"type":"method","name":"initialize","children":[],"call":["value to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Char type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["Data  new ","value is_a? ","value nil? "]}," ActiveRecord ConnectionAdapters SQLServerRealTransaction rollback":{"type":"method","name":"rollback","children":[],"call":[" reset_starting_isolation_level "]}," ActiveRecord ConnectionAdapters SQLServer Type Char Data to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter connection_errors":{"type":"method","name":"connection_errors","children":[],"call":["errors << "," tap "]}," ActiveRecord ConnectionAdapters SQLServer Type Char Data ==":{"type":"method","name":"==","children":[],"call":[" to_s == ","other to_s "," to_s "]}," ActiveRecord ConnectionAdapters SQLServer Quoting _type_cast":{"type":"method","name":"_type_cast","children":[],"call":["value to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter combine_bind_parameters":{"type":"method","name":"combine_bind_parameters","children":[],"call":["result << ","from_clause + + + ","from_clause + + ","from_clause + ","from_clause + + +  << "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_comments_in_create?":{"type":"method","name":"supports_comments_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_comments?":{"type":"method","name":"supports_comments?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":["@version_year >= "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_datetime_with_precision?":{"type":"method","name":"supports_datetime_with_precision?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_indexes_in_create?":{"type":"method","name":"supports_indexes_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_expression_index?":{"type":"method","name":"supports_expression_index?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_advisory_locks?":{"type":"method","name":"supports_advisory_locks?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter arel_visitor":{"type":"method","name":"arel_visitor","children":[],"call":["Arel Visitors SQLServer  new "]}," ActiveRecord ConnectionAdapters SQLServer Utils quote_string_single_national":{"type":"method","name":"quote_string_single_national","children":[],"call":[" quote_string "]}," ActiveRecord ConnectionAdapters SQLServer Utils quote_string_single":{"type":"method","name":"quote_string_single","children":[],"call":[" quote_string "]}," ActiveRecord ConnectionAdapters SQLServer Type VarcharMax sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["varchar(max) freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Varchar sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","varchar tap ","varchar yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type VarbinaryMax sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["varbinary(max) freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Varbinary sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","varbinary tap ","varbinary yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid cast":{"type":"method","name":"cast","children":[],"call":["value to_s [] ","value to_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new "]}," ActiveRecord ConnectionAdapters SQLServer Type Uuid sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["uniqueidentifier freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarcharMax sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["nvarchar(max) freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeVarchar sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","nvarchar tap ","nvarchar yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeText sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["ntext freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type UnicodeChar sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","nchar tap ","nchar yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type TinyInteger sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["tinyint freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Timestamp sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["timestamp freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_scale_max":{"type":"method","name":"fractional_scale_max","children":[],"call":["(send\n  (str \"9\") :*\n  (send nil :fractional_scale)) + ","0 * "," fractional_digits - "," fractional_scale "," fractional_digits ","9 * "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 fractional_max":{"type":"method","name":"fractional_max","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional2 seconds_precision":{"type":"method","name":"seconds_precision","children":[],"call":[" fractional_scale_max ","seconds > "," fractional_max "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional seconds_precision":{"type":"method","name":"seconds_precision","children":[],"call":["(send\n  (lvar :seconds) :*\n  (send nil :fractional_operator)) round to_i ","(send\n  (lvar :seconds) :*\n  (send nil :fractional_operator)) round ","seconds * "," fractional_operator ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round "," fractional_scale ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","1 / "," fractional_precision ","(send\n  (lvar :seconds) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","value send to_f / "," fractional_operator to_f ","value send to_f ","value send "," fractional_property "," fractional_scale == ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (send nil :fractional_operator)) round to_i ","(send\n  (lvar :value send to_f / ) :*\n  (send nil :fractional_operator)) round to_i ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (send nil :fractional_operator)) round ","(send\n  (lvar :value send to_f / ) :*\n  (send nil :fractional_operator)) round ","(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round  * ","value send to_f /  * ","(send\n  (send\n    (begin\n      (send\n        (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (send\n    (begin\n      (send\n        (lvar :value send to_f / ) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","(send\n  (lvar :value send to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round / ","(send\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (lvar :seconds) :*\n        (begin\n          (send\n            (int 1) :/\n            (send nil :fractional_precision))))) :round) :/\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round ","(send\n  (lvar :value send to_f / ) :*\n  (begin\n    (send\n      (int 1) :/\n      (send nil :fractional_precision)))) round "]}," ActiveRecord ConnectionAdapters SQLServer Type TimeValueFractional apply_seconds_precision":{"type":"method","name":"apply_seconds_precision","children":[],"call":["value change "," seconds_precision "," fractional_property ","value send zero? ","value send ","value respond_to? ! ","value respond_to? "]}," ActiveRecord ConnectionAdapters SQLServer Type Time quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Type Time sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":[" precision to_i "," precision "]}," ActiveRecord ConnectionAdapters SQLServer Type Time deserialize":{"type":"method","name":"deserialize","children":[],"call":["value value ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Type Time serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new ","v << "," quote_fractional ","value to_s tap ","value to_s ","value acts_like? ","value to_formatted_s "," quote_ quote_fractional al "]}," ActiveRecord ConnectionAdapters SQLServer Type Text sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["text freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime apply_seconds_precision":{"type":"method","name":"apply_seconds_precision","children":[],"call":["value change "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime fast_string_to_time_format":{"type":"method","name":"fast_string_to_time_format","children":[],"call":[" Time DATE_FORMATS  [] "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallDateTime sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["smalldatetime freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallMoney sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["smallmoney freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type SmallInteger sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["smallint freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Real sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["real freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Money sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["money freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Integer sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["int freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Float sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["float freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Decimal type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value inspect ","value to_s ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Type Decimal sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," scale to_i "," scale "," precision to_i "," precision ","decimal tap ","decimal yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTimeOffset sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":[" precision to_i "," precision "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime2 sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":[" precision to_i "," precision "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime fast_string_to_time_zone":{"type":"method","name":"fast_string_to_time_zone","children":[],"call":["ActiveSupport TimeZone  [] "," Time  zone "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime fast_string_to_time_format":{"type":"method","name":"fast_string_to_time_format","children":[],"call":["(begin\n  (send\n    (const\n      (const\n        (cbase) :Time) :DATE_FORMATS) :[]\n    (sym :_sqlserver_datetime))) freeze "," Time DATE_FORMATS  [] "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime fast_string_to_time":{"type":"method","name":"fast_string_to_time","children":[],"call":[" fast_string_to_time_zone strptime time "," fast_string_to_time_zone strptime "," fast_string_to_time_format "," fast_string_to_time_zone "," new_time "," Rational ","time nsec ","time sec ","time min ","time hour ","time day ","time month ","time year ","ActiveSupport TimeZone  [] strptime ","ActiveSupport TimeZone  [] "," fast_string_to_ActiveSupport TimeZone  [] strptime _zone strpActiveSupport TimeZone  [] strptime  ActiveSupport TimeZone  [] strptime  "," fast_string_to_ActiveSupport TimeZone  [] strptime _zone strpActiveSupport TimeZone  [] strptime  "," fast_string_to_ActiveSupport TimeZone  [] strptime _format "," fast_string_to_ActiveSupport TimeZone  [] strptime _zone "," new_ActiveSupport TimeZone  [] strptime  ","ActiveSupport TimeZone  [] strptime  nsec ","ActiveSupport TimeZone  [] strptime  sec ","ActiveSupport TimeZone  [] strptime  min ","ActiveSupport TimeZone  [] strptime  hour ","ActiveSupport TimeZone  [] strptime  day ","ActiveSupport TimeZone  [] strptime  month ","ActiveSupport TimeZone  [] strptime  year ","ActiveSupport TimeZone  [] strpActiveSupport TimeZone  [] strptime  "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime deserialize":{"type":"method","name":"deserialize","children":[],"call":["value value ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new ","v << "," quote_fractional ","value to_s tap ","value to_s ","value acts_like? ","value to_formatted_s "," quote_ quote_fractional al "]}," ActiveRecord ConnectionAdapters SQLServer Type DateTime sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["datetime freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Date fast_string_to_date_format":{"type":"method","name":"fast_string_to_date_format","children":[],"call":[" Date DATE_FORMATS  [] "]}," ActiveRecord ConnectionAdapters SQLServer Type Date fast_string_to_date":{"type":"method","name":"fast_string_to_date","children":[],"call":[" Date  strptime "," fast_string_to_date_format "]}," ActiveRecord ConnectionAdapters SQLServer Type Date quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Type Date deserialize":{"type":"method","name":"deserialize","children":[],"call":["value value ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Type Date serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new ","(lvar :value) to_s ","value present? ","value acts_like? ","(lvar :value) to_formatted_s "]}," ActiveRecord ConnectionAdapters SQLServer Type Date sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["date freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Data inspect":{"type":"method","name":"inspect","children":[],"call":["@value inspect "]}," ActiveRecord ConnectionAdapters SQLServer Type Data to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Data quoted":{"type":"method","name":"quoted","children":[],"call":[" type quoted "," type "]}," ActiveRecord ConnectionAdapters SQLServer Type Data initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type Char quoted":{"type":"method","name":"quoted","children":[],"call":["Utils  quote_string_single ","value quoted_id ","value respond_to? "]}," ActiveRecord ConnectionAdapters SQLServer Type Char sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","char tap ","char yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type Char serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new ","value is_a? ","value nil? "]}," ActiveRecord ConnectionAdapters SQLServer Type Boolean sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["bit freeze "]}," ActiveRecord ConnectionAdapters SQLServer Type Binary sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["type << "," limit ","binary tap ","binary yield_self "]}," ActiveRecord ConnectionAdapters SQLServer Type BigInteger sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":["bigint freeze "]}," ActiveRecord ConnectionAdapters SQLServer TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["options [] ","type == ","options []= ","options [] nil? ","options key? "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods ss_timestamp":{"type":"method","name":"ss_timestamp","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods uuid":{"type":"method","name":"uuid","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods varbinary":{"type":"method","name":"varbinary","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods binary_basic":{"type":"method","name":"binary_basic","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods ntext":{"type":"method","name":"ntext","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods nchar":{"type":"method","name":"nchar","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods text_basic":{"type":"method","name":"text_basic","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods varchar_max":{"type":"method","name":"varchar_max","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods varchar":{"type":"method","name":"varchar","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods char":{"type":"method","name":"char","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods smallmoney":{"type":"method","name":"smallmoney","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods datetimeoffset":{"type":"method","name":"datetimeoffset","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods datetime2":{"type":"method","name":"datetime2","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods datetime":{"type":"method","name":"datetime","children":[],"call":[" column "," datetime2 ","options [] ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods money":{"type":"method","name":"money","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods real":{"type":"method","name":"real","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options []= ","options fetch ","type == ","options key? ","(sym :integer) include? "]}," ActiveRecord ConnectionAdapters SQLServer SqlTypeMetadata attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters SQLServer SqlTypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":["kwargs extract! "]}," ActiveRecord ConnectionAdapters SQLServer Showplan showplan_option":{"type":"method","name":"showplan_option","children":[],"call":[" raise ","opt inspect ","OPTIONS  exclude? ","(or\n  (send\n    (const nil :SQLServerAdapter) :showplan_option)\n  (const nil :OPTION_ALL)) tap ","SQLServerAdapter  showplan_option "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements identity_columns":{"type":"method","name":"identity_columns","children":[],"call":[" columns select "," columns "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements tables_sql":{"type":"method","name":"tables_sql","children":[],"call":[" select_values "," lowercase_schema_reflection_sql "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["SQLServer Table  new "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" identity_columns map "," identity_columns ","primaries present? "," schema_cache columns select map "," schema_cache columns select "," schema_cache columns "," schema_cache "," primary_keys_select "," schema_cache columns select map  present? "," primary_keys_select  present? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements view_exists?":{"type":"method","name":"view_exists?","children":[],"call":["identifier object ","SQLServer Utils  extract_identifiers ","SQLServer Utils  extract_identifiers  object ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":["SQLServer Utils  extract_identifiers object ","SQLServer Utils  extract_identifiers ","table_name blank? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaDumper schema_collation":{"type":"method","name":"schema_collation","children":[],"call":["column collation ","column collation != "," collation ","@connection collation ","collation != ","@connection collation inspect ","column collation inspect ","column column collation inspect  ","column column collation inspect  != "," column collation inspect  ","@connection column collation inspect  ","column collation inspect  != ","@connection column collation inspect  inspect ","column column collation inspect  inspect "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_default_expression":{"type":"method","name":"quote_default_expression","children":[],"call":["value =~ ","cast_type type == ","cast_type type "," lookup_cast_type ","column sql_type ","value include? ","value is_a? "," lookup_cast_type  type == "," lookup_cast_type  type "," lookup_ lookup_cast_type  "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_string_single_national":{"type":"method","name":"quote_string_single_national","children":[],"call":["SQLServer Utils  quote_string_single_national "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote_string_single":{"type":"method","name":"quote_string_single","children":[],"call":["SQLServer Utils  quote_string_single "]}," ActiveRecord ConnectionAdapters SQLServer Quoting fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["SQLServer SqlTypeMetadata  new ","cast_type scale ","cast_type precision ","cast_type limit ","cast_type type "," lookup_cast_type ","SQLServer TypeMetadata  new ","SqlTypeMetadata  new "," lookup_cast_type  scale "," lookup_cast_type  precision "," lookup_cast_type  limit "," lookup_cast_type  type "," lookup_ lookup_cast_type  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements sp_executesql_sql_param":{"type":"method","name":"sp_executesql_sql_param","children":[],"call":[" quote "," type_cast ","attr value_for_database ","attr attr value_for_database _for_database "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements can_perform_case_insensitive_comparison_for?":{"type":"method","name":"can_perform_case_insensitive_comparison_for?","children":[],"call":["column type == ","column type ","column case_sensitive? ","column collation ! ","column collation "]}," ActiveRecord ConnectionAdapters SQLServerAdapter version_year":{"type":"method","name":"version_year","children":[],"call":["(str \"SQL Server (\\\\d+)\") match to_a last to_s to_i ","(str \"SQL Server (\\\\d+)\") match to_a last to_s ","(str \"SQL Server (\\\\d+)\") match to_a last ","(str \"SQL Server (\\\\d+)\") match to_a ","(str \"SQL Server (\\\\d+)\") match "," _raw_select first first to_s "," _raw_select first first "," _raw_select first "," _raw_select ","vstring =~ "," sqlserver_version "," sqlserver_version =~ "," _raw_select first first to_s  =~ "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements drop_table":{"type":"method","name":"drop_table","children":[],"call":[" execute "," quote_table_name "," quote ","@version_year != ","options [] "," do_execute "," quote_column_name "," remove_foreign_key ","fkdata [] "," execute_procedure each "," execute_procedure ","options [] == ","@version_year < "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_in_memory_oltp?":{"type":"method","name":"supports_in_memory_oltp?","children":[],"call":["@version_year >= "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods json":{"type":"method","name":"json","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods smalldatetime":{"type":"method","name":"smalldatetime","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer ColumnMethods primary_key_nonclustered":{"type":"method","name":"primary_key_nonclustered","children":[],"call":[" column ","args each ","names each "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements identity_columns":{"type":"method","name":"identity_columns","children":[],"call":[" schema_cache columns select "," schema_cache columns "," schema_cache "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements insert_sql?":{"type":"method","name":"insert_sql?","children":[],"call":["(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? ! ","(send\n  (lvar :sql) :=~\n  (regexp\n    (str \"^\\\\s*(INSERT|EXEC sp_executesql N'INSERT)\")\n    (regopt :i))) nil? ","sql =~ "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements query_requires_identity_insert?":{"type":"method","name":"query_requires_identity_insert?","children":[],"call":[" quote_table_name ","sql =~ ","id_column name "," identity_columns first "," identity_columns "," get_table_name "," insert_sql? ","SQLServer Utils  extract_identifiers object ","SQLServer Utils  extract_identifiers "," get_raw_table_name ","SQLServer Utils  extract_identifiers quoted "," quote_ get_table_name  "," identity_columns first  name "," get_ get_table_name  "," get_raw_ get_table_name  "," get_ get_raw_table_name  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exec_insert_requires_identity?":{"type":"method","name":"exec_insert_requires_identity?","children":[],"call":[" query_requires_identity_insert? ","binds map include? ","binds map "]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_prefix_identifier":{"type":"method","name":"database_prefix_identifier","children":[],"call":["SQLServer Utils  extract_identifiers "," database_prefix "," database_prefix_remote_server? "]}," ActiveRecord ConnectionAdapters SQLServer Type Data eql?":{"type":"method","name":"eql?","children":[],"call":[" value == ","other value "," value "," class == ","other class "," class "," type is_a? "," type ","other is_a? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements quoted_scope":{"type":"method","name":"quoted_scope","children":[],"call":["scope []= ","identifier object ","identifier schema "," tap ","SQLServer Utils  extract_identifiers ","identifier database ","SQLServer Utils  extract_identifiers  object ","SQLServer Utils  extract_identifiers  schema ","SQLServer Utils  extract_SQLServer Utils  extract_identifiers s ","SQLServer Utils  extract_identifiers  database "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements data_source_sql":{"type":"method","name":"data_source_sql","children":[],"call":["sql << "," quote ","scope [] "," lowercase_schema_reflection_sql "," quoted_scope ","scope [] present? "," quoted_scope  [] "," quoted_ quoted_scope  "," quoted_scope  [] present? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements primary_keys_select":{"type":"method","name":"primary_keys_select","children":[],"call":["r [] "," sp_executesql map "," sp_executesql ","binds << ","Relation QueryAttribute  new ","identifier schema ","identifier schema blank? ","identifier object ","SQLServer Type UnicodeVarchar  new ","(str \"\\n\") gsub "," quote "," prepared_statements ","identifier fully_qualified_database_quoted "," database_prefix_identifier "," lowercase_schema_reflection_sql "," sp_execute(str \"\\n\") gsub  map "," sp_execute(str \"\\n\") gsub  "," database_prefix_identifier  schema "," database_prefix_identifier  schema blank? "," database_prefix_identifier  object ","identifier fully_qualified_identifier fully_qualified_database_quoted _quoted "," database_prefix_identifier  fully_qualified_database_quoted "," identifier fully_qualified_database_quoted _prefix_identifier "," database_prefix_ database_prefix_identifier  "," lowercase_schema_reflection_(str \"\\n\") gsub  "]}," ActiveRecord ConnectionAdapters SQLServer SchemaDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":["column is_identity? ","column is_primary? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaDumper schema_limit":{"type":"method","name":"schema_limit","children":[],"call":["SQLSEVER_NO_LIMIT_TYPES  include? ","column sql_type "]}," ActiveRecord ConnectionAdapters SQLServer SchemaDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column is_identity? ! ","column is_identity? ","column is_primary? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation options_primary_key_with_nil_default?":{"type":"method","name":"options_primary_key_with_nil_default?","children":[],"call":["options [] nil? ","options [] ","options include? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation options_include_default?":{"type":"method","name":"options_include_default?","children":[],"call":[" options_primary_key_with_nil_default? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exclude_output_inserted_table_name?":{"type":"method","name":"exclude_output_inserted_table_name?","children":[],"call":[" class exclude_output_inserted_table_names [] "," class exclude_output_inserted_table_names "," class "," get_table_name "," exclude_output_inserted_table_names? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements exclude_output_inserted_table_names?":{"type":"method","name":"exclude_output_inserted_table_names?","children":[],"call":[" class exclude_output_inserted_table_names empty? ! "," class exclude_output_inserted_table_names empty? "," class exclude_output_inserted_table_names "," class "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements use_output_inserted?":{"type":"method","name":"use_output_inserted?","children":[],"call":[" class use_output_inserted "," class "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Calculations build_count_subquery":{"type":"method","name":"build_count_subquery","children":[],"call":["Arel SelectManager  new project ","Arel SelectManager  new "," operation_over_aggregate_column ","Arel  star ","relation arel as ","Arel  sql ","relation arel ","relation select_values= "," aggregate_column as "," aggregate_column "," table [] "," table ","column_name == ","relation unscope "," klass connection adapter_name == "," klass connection adapter_name "," klass connection "," klass ","relation  operation_over_aggregate_column s= "]}," Arel Visitors SQLServer visit_Arel_Nodes_InnerJoin":{"type":"method","name":"visit_Arel_Nodes_InnerJoin","children":[],"call":[" visit ","o right ","collector << "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock ","o left ","o left left is_a? ","o left left ","o left is_a? "," visit_Arel_Nodes_SelectStatement_SQLServer_Lock  << "," visit  << "]}," ActiveRecord ConnectionAdapters SQLServerAdapter sqlserver_version":{"type":"method","name":"sqlserver_version","children":[],"call":[" _raw_select first first to_s "," _raw_select first first "," _raw_select first "," _raw_select "]}," ActiveRecord ConnectionAdapters SQLServer Type String changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["raw_old_value value != ","raw_old_value value ","raw_old_value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements create_schema_dumper":{"type":"method","name":"create_schema_dumper","children":[],"call":["SQLServer SchemaDumper  create "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements default_insert_value":{"type":"method","name":"default_insert_value","children":[],"call":["Arel  sql "," quote "," quote_table_name ","column table_name ","column is_identity? "," quote_ quote  ","column  quote  "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements combine_multi_statements":{"type":"method","name":"combine_multi_statements","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements insert_fixtures_set":{"type":"method","name":"insert_fixtures_set","children":[],"call":[" block_given? "," execute ","total_sql each "," transaction "," disable_referential_integrity ","Array  wrap "," combine_multi_statements ","table_deletes + ","(str \"DELETE FROM \") dup "," quote_table_name ","tables_to_delete map ","fixture_inserts << "," build_fixture_sql ","fixtures each_slice "," insert_rows_length ","fixture_set each ","total_sqls each ","Array  wrap  each ","Array  wrap s each "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits insert_rows_length":{"type":"method","name":"insert_rows_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseLimits bind_params_length":{"type":"method","name":"bind_params_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Calculations type_cast_calculated_value":{"type":"method","name":"type_cast_calculated_value","children":[],"call":["type deserialize ","value to_d ","value to_i "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt QueryMethods table_name_matches?":{"type":"method","name":"table_name_matches?","children":[],"call":["(str \"(?:\\\\A|(?<!FROM)\\\\s)(?:\\\\b\") match? ","from to_s ","Regexp  escape "," connection quote_table_name "," table name "," table "," connection "," connection quote_Regexp  escape  "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt FinderMethods construct_relation_for_exists":{"type":"method","name":"construct_relation_for_exists","children":[],"call":["relation where! "," primary_key ","conditions == ","conditions empty? "," except _select! limit! "," except _select! "," except ","relation except ","relation order "," select_values "," select_values present? "," limit! "," offset_value "," distinct_value "," except limit! "," order limit! "," order "," sanitize_forbidden_attributes "," klass connection adapter_name == "," klass connection adapter_name "," klass connection "," klass "," except _select! limit!  where! ","relation except  where! ","relation order  where! "," limit!  where! "," except limit!  where! "," order limit!  where! "," sanitize_forbidden_attributes  == "," sanitize_forbidden_attributes  empty? "," except _select! limit!  except ","relation except  except ","relation order  except "," limit!  except "," except limit!  except "," order limit!  except "," except _select! limit!  order ","relation except  order ","relation order  order "," limit!  order "," except limit!  order "," order limit!  order "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Calculations calculate":{"type":"method","name":"calculate","children":[],"call":[" perform_calculation ","relation calculate ","relation select_values= "," table [] ","Arel  star "," table "," klass primary_key "," klass ","relation distinct! "," distinct_select? "," select_for_count "," distinct_value ","operation to_s downcase == ","operation to_s downcase ","operation to_s "," apply_join_dependency "," has_include? "," klass connection adapter_name == "," klass connection adapter_name "," klass connection "," apply_join_dependency  calculate "," apply_join_dependency  select_values= "," apply_join_dependency  distinct! "]}," Arel Visitors SQLServer remove_invalid_ordering_from_select_statement":{"type":"method","name":"remove_invalid_ordering_from_select_statement","children":[],"call":["node orders= ","node limit ","node offset ","Arel Nodes SelectStatement  === "]}," Arel Visitors SQLServer collect_in_clause":{"type":"method","name":"collect_in_clause","children":[],"call":[" remove_invalid_ordering_from_select_statement ","right each ","Array  === "]}," Arel Visitors SQLServer visit_Arel_Nodes_Grouping":{"type":"method","name":"visit_Arel_Nodes_Grouping","children":[],"call":[" remove_invalid_ordering_from_select_statement ","o expr "]}," Arel Visitors SQLServer visit_Arel_Nodes_Concat":{"type":"method","name":"visit_Arel_Nodes_Concat","children":[],"call":[" visit ","o right ","collector << ","o left "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_database_version":{"type":"method","name":"get_database_version","children":[],"call":[" version_year "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_insert_conflict_target?":{"type":"method","name":"supports_insert_conflict_target?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_insert_on_duplicate_update?":{"type":"method","name":"supports_insert_on_duplicate_update?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_insert_on_duplicate_skip?":{"type":"method","name":"supports_insert_on_duplicate_skip?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_insert_returning?":{"type":"method","name":"supports_insert_returning?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter database_exists?":{"type":"method","name":"database_exists?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements column_definitions_sql":{"type":"method","name":"column_definitions_sql","children":[],"call":["(str \"\\n\") gsub strip ","(str \"\\n\") gsub "," lowercase_schema_reflection_sql "," quote ","identifier schema "," prepared_statements ","identifier schema blank? ","identifier object "]}," ActiveRecord ConnectionAdapters SQLServer Quoting column_name_with_order_matcher":{"type":"method","name":"column_name_with_order_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Quoting column_name_matcher":{"type":"method","name":"column_name_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements build_insert_sql":{"type":"method","name":"build_insert_sql","children":[],"call":["sql << ","insert values_list ","sql << << ","(send\n  (lvar :returning) :map) join "," quote_column_name ","returning map ","insert send returning ","insert send ","(str \"INSERT \") +@ ","insert into ","returning is_a? ","(str \"INSERT \") +@  << ","(str \"INSERT \") +@  << << ","(send\n  (lvar :insert send returning ) :map) join ","insert send returning  map ","insert send insert send returning  ","insert send returning  is_a? "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements write_query?":{"type":"method","name":"write_query?","children":[],"call":["READ_QUERY  match? ! ","READ_QUERY  match? ","sql b "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Preloader in_clause_length":{"type":"method","name":"in_clause_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer CoreExt Preloader records_for":{"type":"method","name":"records_for","children":[],"call":["(send\n  (send\n    (send nil :scope) :where\n    (hash\n      (pair\n        (send nil :association_key_name)\n        (lvar :slice)))) :load) records ","association set_inverse_instance ","owner association "," reflection name "," reflection "," owners_by_key [] first "," owners_by_key [] "," convert_key ","record [] "," association_key_name "," owners_by_key "," scope where load "," scope where "," scope ","ids each_slice flat_map ","ids each_slice "," in_clause_length "," klass connection adapter_name == "," klass connection adapter_name "," klass connection "," klass ","(send\n  (send\n    (send nil :scope) :where\n    (hash\n      (pair\n        (send nil :owner association _key_name)\n        (lvar :slice)))) :load) records ","owner association  set_inverse_instance ","owner owner association  "," owners_by_key [] first  association ","  owners_by_key [] first s_by_key [] first ","  owners_by_key [] first s_by_key [] "," owner association _key_name ","  owners_by_key [] first s_by_key "]}," Arel Visitors SQLServer sanitize_as_option_clause":{"type":"method","name":"sanitize_as_option_clause","children":[],"call":["value gsub "]}," Arel Visitors SQLServer visit_Arel_Nodes_Lateral":{"type":"method","name":"visit_Arel_Nodes_Lateral","children":[],"call":[" visit ","o expr ","collector << ","o expr is_a? "]}," Arel Visitors SQLServer collect_optimizer_hints":{"type":"method","name":"collect_optimizer_hints","children":[],"call":[]}," Arel Visitors SQLServer visit_Arel_Nodes_OptimizerHints":{"type":"method","name":"visit_Arel_Nodes_OptimizerHints","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :expr) :map) join "," sanitize_as_option_clause ","o expr map ","o expr "]}," Arel Visitors SQLServer visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" maybe_visit ","o optimizer_hints "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_optimizer_hints?":{"type":"method","name":"supports_optimizer_hints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer Type DecimalWithoutScale type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value inspect ","value to_s ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Type DecimalWithoutScale sqlserver_type":{"type":"method","name":"sqlserver_type","children":[],"call":[" precision to_i "," precision ","decimal yield_self "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements drop_schema":{"type":"method","name":"drop_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements change_table_schema":{"type":"method","name":"change_table_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements create_schema":{"type":"method","name":"create_schema","children":[],"call":[" execute "]}," Arel Visitors SQLServer visit_Arel_Nodes_In":{"type":"method","name":"visit_Arel_Nodes_In","children":[],"call":[" remove_invalid_ordering_from_select_statement ","o right ","o right each ","Array  === "]}," Arel Visitors SQLServer visit_Arel_Nodes_HomogeneousIn":{"type":"method","name":"visit_Arel_Nodes_HomogeneousIn","children":[],"call":["collector << ","collector add_binds "," bind_block ","ActiveRecord Relation QueryAttribute  new ","values map ","o attribute relation type_for_attribute ","o column_name ","o attribute relation ","o attribute ","@connection prepared_statements ","@connection quote ","values empty? ","o casted_values ","o type == ","o type ","collector << << << "," quote_column_name ","collector << << "," quote_table_name ","o table_name ","collector preparable= ","column_type cast_type ","column_type is_a? ","o casted_values  map ","o o column_name  ","o casted_values  empty? ","o casted_o casted_values  "," quote_o column_name  ","o attribute relation type_for_attribute  cast_type ","column_type cast_type  cast_type ","o attribute relation type_for_attribute  is_a? ","column_type cast_type  is_a? "]}," Arel Visitors SQLServer bind_block":{"type":"method","name":"bind_block","children":[],"call":[]}," ActiveRecord Tasks SQLServerDatabaseTasks using_database_configurations?":{"type":"method","name":"using_database_configurations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" freeze "," comment -@ "," comment "," collation -@ "," collation "," default_function -@ "," default_function "," default dup freeze "," default dup "," default "," default -@ "," default is_a? "," sql_type_metadata deduplicate "," sql_type_metadata "," name -@ "," name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter new_client":{"type":"method","name":"new_client","children":[],"call":[" raise ","config inspect "," dblib_connect "," require ","config [] "]}," ActiveRecord ConnectionAdapters SQLServer TypeMetadata deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" __setobj__ "," __getobj__ deduplicate "," __getobj__ "]}," ActiveRecord ConnectionAdapters SQLServer TypeMetadata hash":{"type":"method","name":"hash","children":[],"call":["TypeMetadata  hash ^ ^ "," sqlserver_options hash "," sqlserver_options ","TypeMetadata  hash ^ "," __getobj__ hash "," __getobj__ ","TypeMetadata  hash ","TypeMetadata  hash ^ ^ ^ ^ ^ "," ordinal_position hash "," ordinal_position ","TypeMetadata  hash ^ ^ ^ ^ "," table_name hash "," table_name ","TypeMetadata  hash ^ ^ ^ "," is_primary hash "," is_primary "," is_identity hash "," is_identity "]}," ActiveRecord ConnectionAdapters SQLServer TypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" sqlserver_options == ","other sqlserver_options "," sqlserver_options "," __getobj__ == ","other __getobj__ "," __getobj__ ","other is_a? "," ordinal_position == ","other ordinal_position "," ordinal_position "," table_name == ","other table_name "," table_name "," is_primary == ","other is_primary "," is_primary "," is_identity == ","other is_identity "," is_identity "]}," ActiveRecord ConnectionAdapters SQLServer TypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation visit_CreateIndexDefinition":{"type":"method","name":"visit_CreateIndexDefinition","children":[],"call":["o index name ","o index ","o if_not_exists= ","o if_not_exists ","sql join ","sql << ","index where "," quoted_columns "," quote_table_name ","index table "," quote_column_name ","index name ","index type upcase ","index type ","index unique ","o o index  name ","o o index  ","o o if_not_exists = ","o o if_not_exists  ","o index  where ","o index  table ","o index  name ","o index  type upcase ","o index  type ","o index  unique "]}," ActiveRecord ConnectionAdapters SQLServer SchemaCreation supports_index_using?":{"type":"method","name":"supports_index_using?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements ensure_established_connection!":{"type":"method","name":"ensure_established_connection!","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SQLServer DatabaseStatements dblib_execute":{"type":"method","name":"dblib_execute","children":[],"call":[" raise ","result is_a? ","@connection execute tap ","@connection execute "]}," ActiveRecord ConnectionAdapters SQLServer Column deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" freeze "," comment -@ "," comment "," collation -@ "," collation "," default_function -@ "," default_function "," default dup freeze "," default dup "," default "," default -@ "," default is_a? "," sql_type_metadata deduplicate "," sql_type_metadata "," name -@ "," name "]}," ActiveRecord ConnectionAdapters SQLServer Column hash":{"type":"method","name":"hash","children":[],"call":["Column  hash ^ ^ ^ ^ ^ "," ordinal_position hash "," ordinal_position ","Column  hash ^ ^ ^ ^ "," table_name hash "," table_name ","Column  hash ^ ^ ^ "," is_primary? hash "," is_primary? ","Column  hash ^ ^ "," is_identity? hash "," is_identity? ","Column  hash ^ "," hash ","Column  hash "]}," ActiveRecord ConnectionAdapters SQLServer Column ==":{"type":"method","name":"==","children":[],"call":[" ordinal_position == ","other ordinal_position "," ordinal_position "," table_name == ","other table_name "," table_name "," is_primary? == ","other is_primary? "," is_primary? "," is_identity? == ","other is_identity? "," is_identity? ","other is_a? "]}," ActiveRecord ConnectionAdapters SQLServer Column encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," ActiveRecord ConnectionAdapters SQLServer Column init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," ActiveRecord ConnectionAdapters SQLServer Column case_sensitive?":{"type":"method","name":"case_sensitive?","children":[],"call":[" collation match "," collation "]}," ActiveRecord ConnectionAdapters SQLServer Column is_utf8?":{"type":"method","name":"is_utf8?","children":[],"call":[" sql_type =~ "," sql_type "]}," ActiveRecord ConnectionAdapters SQLServer Column is_primary?":{"type":"method","name":"is_primary?","children":[],"call":[" is_primary "]}," ActiveRecord ConnectionAdapters SQLServer Column is_identity?":{"type":"method","name":"is_identity?","children":[],"call":[" is_identity "]}," ActiveRecord ConnectionAdapters SQLServer Column initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter rails_application_name":{"type":"method","name":"rails_application_name","children":[],"call":["Rails  application class name split first ","Rails  application class name split ","Rails  application class name ","Rails  application class ","Rails  application ","Rails  application nil? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter configure_connection_defaults":{"type":"method","name":"configure_connection_defaults","children":[],"call":[" use_database "," initialize_dateformatter "," version_year "," _raw_select first first "," _raw_select first "," _raw_select "]}," ActiveRecord ConnectionAdapters SQLServerAdapter perform_connection_configuration":{"type":"method","name":"perform_connection_configuration","children":[],"call":[" configure_connection "," respond_to? "," configure_connection_defaults "]}," ActiveRecord ConnectionAdapters SQLServer Utils Name qualified_level":{"type":"method","name":"qualified_level","children":[],"call":[" parts compact size "," parts compact "," parts "]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements get_raw_table_name":{"type":"method","name":"get_raw_table_name","children":[],"call":["Regexp  last_match [] ","Regexp  last_match "]}," ActiveRecord ConnectionAdapters SQLServerAdapter type_map":{"type":"method","name":"type_map","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer SchemaStatements remove_columns_for_alter":{"type":"method","name":"remove_columns_for_alter","children":[],"call":["(send nil :remove_column_for_alter\n  (lvar :table_name)\n  (lvar :first)) + "," quote_column_name ","rest map "," remove_column_for_alter "]}," ActiveRecord ConnectionAdapters SQLServer Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s "]}," ActiveRecord ConnectionAdapters SQLServer Quoting quote":{"type":"method","name":"quote","children":[],"call":["value quoted ","value hex "]}," ActiveRecord ConnectionAdapters SQLServer CoreExt LoaderQuery in_clause_length":{"type":"method","name":"in_clause_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServer CoreExt LoaderQuery load_records_for_keys":{"type":"method","name":"load_records_for_keys","children":[],"call":[" scope where load records "," scope where load "," scope where "," association_key_name "," scope ","keys each_slice flat_map ","keys each_slice "," in_clause_length "," scope connection adapter_name == "," scope connection adapter_name "," scope connection "]}," ActiveRecord ConnectionHandling sqlserver_adapter_class":{"type":"method","name":"sqlserver_adapter_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter dbconsole":{"type":"method","name":"dbconsole","children":[],"call":[" find_cmd_and_exec ","host_arg << ","sqlserver_config [] ","(str \"tcp:\") +@ ","config database ","config configuration_hash ","(str \"tcp:\") +@  << ","config configuration_hash  [] "]}}