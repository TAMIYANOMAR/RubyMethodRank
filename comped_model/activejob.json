{" ActiveJob version":{"type":"method","name":"version","children":[],"call":[]}," ActiveJob QueueName queue_as":{"type":"method","name":"queue_as","children":[],"call":[" queue_name= "," queue_base_name "]}," ActiveJob QueueAdapters SuckerPunchAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["job new perform ","Parameters  deserialize ","job new ","Base  execute ","job new execute "]}," ActiveJob QueueAdapters SuckerPunchAdapter queue":{"type":"method","name":"queue","children":[],"call":["JobWrapper  new async perform ","JobWrapper  new async ","JobWrapper  new "]}," ActiveJob QueueAdapters SneakersAdapter JobWrapper work":{"type":"method","name":"work","children":[],"call":["job new perform ","Parameters  deserialize ","job new "," ack! ","Base  execute ","ActiveSupport JSON  decode ","job_name constantize new execute ","job_name constantize new ","job_name constantize "]}," ActiveJob QueueAdapters SneakersAdapter queue":{"type":"method","name":"queue","children":[],"call":["JobWrapper  enqueue ","JobWrapper  from_queue ","job queue_name ","@mutex synchronize "]}," ActiveJob QueueAdapters SidekiqAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["job_name constantize new perform ","Parameters  deserialize ","job_name constantize new ","job_name constantize ","Base  execute ","job_name constantize new execute ","job_data merge "," jid "]}," ActiveJob QueueAdapters SidekiqAdapter queue":{"type":"method","name":"queue","children":[],"call":["Sidekiq Client  push ","job queue_name "]}," ActiveJob QueueAdapters ResqueAdapter JobWrapper to_s":{"type":"method","name":"to_s","children":[],"call":[" class name "," class "]}," ActiveJob QueueAdapters ResqueAdapter JobWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["job queue_name "]}," ActiveJob QueueAdapters ResqueAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["job_name constantize new perform ","Parameters  deserialize ","job_name constantize new ","job_name constantize ","Base  execute ","job_name constantize new execute "]}," ActiveJob QueueAdapters ResqueAdapter queue":{"type":"method","name":"queue","children":[],"call":["Resque  enqueue ","JobWrapper  new "]}," ActiveJob QueueAdapters QueueClassicAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["Base  execute ","job_name constantize new execute ","job_name constantize new ","job_name constantize "]}," ActiveJob QueueAdapters QueueClassicAdapter queue":{"type":"method","name":"queue","children":[],"call":["QC Queue  new enqueue ","JobWrapper  name ","QC Queue  new ","job queue_name "]}," ActiveJob QueueAdapters QueAdapter JobWrapper run":{"type":"method","name":"run","children":[],"call":["job new perform ","Parameters  deserialize ","job new ","Base  execute ","job_name constantize new execute ","job_name constantize new ","job_name constantize "]}," ActiveJob QueueAdapters QueAdapter queue":{"type":"method","name":"queue","children":[],"call":["JobWrapper  enqueue ","job queue_name "]}," ActiveJob QueueAdapters InlineAdapter queue":{"type":"method","name":"queue","children":[],"call":["job new perform ","Parameters  deserialize ","job new "]}," ActiveJob QueueAdapters DelayedJobAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["job new perform ","Parameters  deserialize ","job new ","Base  execute "," job_data ","job new execute "]}," ActiveJob QueueAdapters DelayedJobAdapter queue":{"type":"method","name":"queue","children":[],"call":["JobWrapper  new delay perform ","JobWrapper  new delay ","job queue_name ","JobWrapper  new "]}," ActiveJob QueueAdapters BackburnerAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["job_name constantize new perform ","Parameters  deserialize ","job_name constantize new ","job_name constantize ","Base  execute ","job_name constantize new execute "]}," ActiveJob QueueAdapters BackburnerAdapter queue":{"type":"method","name":"queue","children":[],"call":["Backburner Worker  enqueue ","job queue_name ","job name "]}," ActiveJob QueueAdapter load_adapter":{"type":"method","name":"load_adapter","children":[],"call":["(str \"ActiveJob::QueueAdapters::\") constantize ","name to_s camelize ","name to_s "," require "]}," ActiveJob QueueAdapter queue_adapter=":{"type":"method","name":"queue_adapter=","children":[],"call":[" load_adapter "]}," ActiveJob Parameters deserialize":{"type":"method","name":"deserialize","children":[],"call":[]}," ActiveJob Parameters serialize":{"type":"method","name":"serialize","children":[],"call":[]}," ActiveJob LogSubscriber logger":{"type":"method","name":"logger","children":[],"call":["ActiveJob Base  logger "]}," ActiveJob LogSubscriber enqueue":{"type":"method","name":"enqueue","children":[],"call":[" info ","(str \"Enqueued \") + ","event payload [] inspect ","event payload [] ","event payload ","event payload [] any? ","event payload [] name ","event payload [] name demodulize remove ","event payload [] name demodulize "," args_info "," queue_name ","job job_id ","job class name ","job class ","ex message ","ex class "," error ","job enqueue_error "," event payload [] name demodulize remove  ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class ","event payload []  message ","event payload []  enqueue_error "]}," ActiveJob gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," ActiveJob Enqueuing enqueue":{"type":"method","name":"enqueue","children":[],"call":[" queue_adapter queue "," queue_adapter ","ActiveSupport Notifications  instrument ","Parameters  serialize "," class queue_adapter enqueue "," class queue_adapter "," class "," class queue_adapter enqueue_at "," scheduled_at "," run_callbacks "," queue_name= "," class queue_name_from_part ","options [] "," scheduled_at= ","options [] to_f ","options [] seconds from_now to_f ","options [] seconds from_now ","options [] seconds "," priority= ","options [] to_i ","ActiveSupport Deprecation  warn "," class return_false_on_aborted_enqueue "," queue_adapter enqueue "," queue_adapter enqueue_at "," successfully_enqueued? "," enqueue_error= "," successfully_enqueued= "," set "," _scheduled_at_time to_f "," _scheduled_at_time "]}," Rails Generators JobGenerator create_job_file":{"type":"method","name":"create_job_file","children":[],"call":[" template ","File  join "," file_name "," class_path "," application_job_file_name ","File  exist? ! ","File  exist? "," behavior == "," behavior "," in_root "]}," Rails Generators JobGenerator default_generator_root":{"type":"method","name":"default_generator_root","children":[],"call":[]}," ActiveJob TestHelper clear_performed_jobs":{"type":"method","name":"clear_performed_jobs","children":[],"call":[" performed_jobs clear "," performed_jobs "," using_test_adapter? "]}," ActiveJob TestHelper clear_enqueued_jobs":{"type":"method","name":"clear_enqueued_jobs","children":[],"call":[" enqueued_jobs clear "," enqueued_jobs "," using_test_adapter? "]}," ActiveJob TestHelper queue_adapter":{"type":"method","name":"queue_adapter","children":[],"call":["ActiveJob Base  queue_adapter "]}," ActiveJob TestHelper perform_enqueued_jobs":{"type":"method","name":"perform_enqueued_jobs","children":[],"call":[" queue_adapter perform_enqueued_at_jobs= "," queue_adapter "," queue_adapter perform_enqueued_jobs= "," queue_adapter perform_enqueued_at_jobs "," queue_adapter perform_enqueued_jobs "," queue_adapter filter= "," queue_adapter filter "," queue_adapter reject= "," queue_adapter reject "," validate_option "," queue_adapter queue= "," queue_adapter queue "," flush_enqueued_jobs "," block_given? "," queue_adapter at= "," assert_nothing_raised "," queue_adapter at "," _assert_nothing_raised_or_warn "," using_test_adapter? "]}," ActiveJob TestHelper assert_performed_with":{"type":"method","name":"assert_performed_with","children":[],"call":[" queue_adapter performed_jobs= ","original_performed_jobs + "," performed_jobs "," queue_adapter "," assert ","value == ","job [] ","args all? "," performed_jobs any? "," perform_enqueued_jobs ","args assert_valid_keys "," clear_performed_jobs "," performed_jobs dup ","serialized_args all? "," serialize_args_for_assertion "," instantiate_job ","in_block_jobs find "," performed_jobs drop "," performed_jobs count ","in_block_job [] ","(pair\n  (sym :job)\n  (lvar :job)) compact ","deserialized_job [] ","expected_args all? "," deserialize_args_for_assertion "," prepare_args_for_assertion ","value call ","value respond_to? ","jobs find "," block_given? ","message << ","potential_matches join ","potential_matches present? ","(str \"No performed job found with \") +@ ","potential_matches << ","matching_class join ","(send\n  (lvar :potential_matches) :map) join ","potential_matches map ","expected [] ","matching_class empty? ","potential_matches empty? ","enqueued_job [] == ","job to_s ","enqueued_job [] ","potential_matches select "," queue_adapter performed_ performed_jobs = "," queue_adapter performed_ performed_jobs drop = "," performed_jobs dup  + ","original_performed_ performed_jobs  + ","original_performed_ performed_jobs drop  + "," performed_ performed_jobs  "," performed_ performed_jobs drop  "," performed_ performed_jobs  any? "," performed_ performed_jobs drop  any? "," perform_enqueued_ performed_jobs  "," perform_enqueued_ performed_jobs drop  "," clear_performed_ performed_jobs  "," clear_performed_ performed_jobs drop  "," performed_ performed_jobs  dup "," performed_ performed_jobs drop  dup "," serialize_args_for_assertion  all? "," performed_jobs drop  find ","in_block_ performed_jobs  find ","in_block_ performed_jobs drop  find "," performed_ performed_jobs  drop "," performed_ performed_jobs drop  drop "," performed_ performed_jobs  count "," performed_ performed_jobs drop  count "," deserialize_args_for_assertion  [] ","(pair\n  (sym :job)\n  (lvar :job)) compact _args all? "," prepare_args_for_assertion  all? "," performed_jobs  find ","(str \"No performed job found with \") +@  << ","(pair\n  (sym :job)\n  (lvar :job)) compact  [] "]}," ActiveJob TestHelper assert_enqueued_with":{"type":"method","name":"assert_enqueued_with","children":[],"call":[" queue_adapter enqueued_jobs= ","original_enqueued_jobs + "," enqueued_jobs "," queue_adapter "," assert ","value == ","job [] ","args all? "," enqueued_jobs any? ","args assert_valid_keys "," clear_enqueued_jobs "," enqueued_jobs dup ","serialized_args all? "," serialize_args_for_assertion "," instantiate_job ","in_block_jobs find "," enqueued_jobs drop "," enqueued_jobs count ","in_block_job [] ","(pair\n  (sym :job)\n  (lvar :job)) compact ","deserialized_job [] ","expected_args all? "," deserialize_args_for_assertion "," prepare_args_for_assertion ","value call ","value respond_to? ","jobs find "," block_given? ","message << ","potential_matches join ","potential_matches present? ","(str \"No enqueued job found with \") +@ ","potential_matches << "," enqueued_jobs - "," assert_nothing_raised ","matching_class join ","(send\n  (lvar :potential_matches) :map) join ","potential_matches map ","expected [] ","matching_class empty? ","potential_matches empty? ","enqueued_job [] == ","job to_s ","enqueued_job [] ","potential_matches select "," _assert_nothing_raised_or_warn "," queue_adapter enqueued_ enqueued_jobs = "," queue_adapter enqueued_ enqueued_jobs drop = "," queue_adapter enqueued_ enqueued_jobs - = "," enqueued_jobs dup  + ","original_enqueued_ enqueued_jobs  + ","original_enqueued_ enqueued_jobs drop  + ","original_enqueued_ enqueued_jobs -  + "," enqueued_ enqueued_jobs  "," enqueued_ enqueued_jobs drop  "," enqueued_ enqueued_jobs -  "," enqueued_ enqueued_jobs  any? "," enqueued_ enqueued_jobs drop  any? "," enqueued_ enqueued_jobs -  any? "," clear_enqueued_ enqueued_jobs  "," clear_enqueued_ enqueued_jobs drop  "," clear_enqueued_ enqueued_jobs -  "," enqueued_ enqueued_jobs  dup "," enqueued_ enqueued_jobs drop  dup "," enqueued_ enqueued_jobs -  dup "," serialize_args_for_assertion  all? "," enqueued_jobs drop  find ","in_block_ enqueued_jobs  find ","in_block_ enqueued_jobs drop  find ","in_block_ enqueued_jobs -  find "," enqueued_ enqueued_jobs  drop "," enqueued_ enqueued_jobs drop  drop "," enqueued_ enqueued_jobs -  drop "," enqueued_ enqueued_jobs  count "," enqueued_ enqueued_jobs drop  count "," enqueued_ enqueued_jobs -  count "," deserialize_args_for_assertion  [] ","(pair\n  (sym :job)\n  (lvar :job)) compact _args all? "," prepare_args_for_assertion  all? "," enqueued_jobs  find "," enqueued_jobs -  find ","(str \"No enqueued job found with \") +@  << "," enqueued_ enqueued_jobs  - "," enqueued_ enqueued_jobs drop  - "," enqueued_ enqueued_jobs -  - ","(pair\n  (sym :job)\n  (lvar :job)) compact  [] "]}," ActiveJob TestHelper assert_no_performed_jobs":{"type":"method","name":"assert_no_performed_jobs","children":[],"call":[" assert_performed_jobs "]}," ActiveJob TestHelper assert_performed_jobs":{"type":"method","name":"assert_performed_jobs","children":[],"call":[" assert_equal "," performed_jobs size "," performed_jobs ","new_count - ","original_count + "," perform_enqueued_jobs "," block_given? "," performed_jobs_with "," performed_jobs_with count "," performed_jobs size  - "," performed_jobs size  + "]}," ActiveJob TestHelper assert_no_enqueued_jobs":{"type":"method","name":"assert_no_enqueued_jobs","children":[],"call":[" assert_enqueued_jobs "]}," ActiveJob TestHelper assert_enqueued_jobs":{"type":"method","name":"assert_enqueued_jobs","children":[],"call":[" assert_equal "," enqueued_jobs size "," enqueued_jobs ","new_count - ","original_count + "," block_given? "," enqueued_jobs_size "," enqueued_jobs_with "," enqueued_jobs_with count ","(send\n  (lvar :new_jobs) :-\n  (lvar :original_jobs)) count ","new_jobs - "," assert_nothing_raised "," _assert_nothing_raised_or_warn "," enqueued_jobs size  - "," enqueued_jobs_size  - "," enqueued_jobs_with  - "," enqueued_jobs size  + "," enqueued_jobs_size  + "," enqueued_jobs_with  + ","  enqueued_jobs size  ","(send\n  (lvar : enqueued_jobs_with ) :-\n  (lvar :original_jobs)) count ","(send\n  (lvar :new_jobs) :-\n  (lvar : enqueued_jobs_with )) count "]}," ActiveJob TestHelper after_teardown":{"type":"method","name":"after_teardown","children":[],"call":["ActiveJob Base  queue_adapter= ","klass queue_adapter= ","@old_queue_adapters each ","klass disable_test_adapter "," queue_adapter_changed_jobs each "," queue_adapter_changed_jobs "]}," ActiveJob TestHelper before_setup":{"type":"method","name":"before_setup","children":[],"call":[" clear_performed_jobs "," clear_enqueued_jobs ","ActiveJob Base  queue_adapter= "," queue_adapter ","klass queue_adapter= ","(lvar :klass) tap ","klass queue_adapter ","(send\n  (begin\n    (send\n      (send\n        (const\n          (const nil :ActiveJob) :Base) :subclasses) :<<\n      (const\n        (const nil :ActiveJob) :Base))) :select) map ","klass singleton_class public_instance_methods include? ","klass singleton_class public_instance_methods ","klass singleton_class ","(send\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :subclasses) :<<\n  (const\n    (const nil :ActiveJob) :Base)) select ","ActiveJob Base  subclasses << ","ActiveJob Base  subclasses "," queue_adapter_for_test ","ActiveJob QueueAdapters TestAdapter  new ","(send\n  (begin\n    (send\n      (send\n        (const\n          (const nil :ActiveJob) :Base) :descendants) :<<\n      (const\n        (const nil :ActiveJob) :Base))) :select) map ","(send\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :descendants) :<<\n  (const\n    (const nil :ActiveJob) :Base)) select ","ActiveJob Base  descendants << ","ActiveJob Base  descendants ","klass enable_test_adapter "," queue_adapter_changed_jobs each "," queue_adapter_changed_jobs ","klass enable_ queue_adapter_for_test  ","klass enable_ActiveJob QueueAdapters TestAdapter  new  "]}," ActiveJob QueueName queue_name":{"type":"method","name":"queue_name","children":[],"call":[" class queue_name_from_part "," instance_exec "," class ","@queue_name is_a? "," class queue_name_from_part  is_a? "]}," ActiveJob QueueName ClassMethods queue_name_from_part":{"type":"method","name":"queue_name_from_part","children":[],"call":["name_parts compact join "," queue_name_delimiter ","name_parts compact "," queue_name_prefix presence "," queue_name_prefix "," default_queue_name ","part_name to_s presence ","part_name to_s ","name_parts compact join -@ "]}," ActiveJob QueueName ClassMethods queue_as":{"type":"method","name":"queue_as","children":[],"call":[" queue_name= "," queue_name_from_part "," block_given? ","name_parts compact join ","name_parts compact "," queue_name_prefix presence "," queue_name_prefix "," default_queue_name ","part_name to_s presence ","part_name to_s "]}," ActiveJob QueueAdapters TestAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" enqueued_jobs << ","job queue_name ","job arguments ","job class "," enqueued_jobs ","job perform_now "," performed_jobs << "," performed_jobs "," perform_enqueued_at_jobs ","job serialize [] ","job serialize ","Base  execute "," enqueue_or_perform "," job_to_hash "," filtered? "," perform_or_enqueue "," filtered? ! "]}," ActiveJob QueueAdapters TestAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":[" enqueued_jobs << ","job queue_name ","job arguments ","job class "," enqueued_jobs ","job perform_now "," performed_jobs << "," performed_jobs "," perform_enqueued_jobs ","job serialize [] ","job serialize ","Base  execute "," enqueue_or_perform "," job_to_hash "," filtered? "," perform_or_enqueue "," filtered? ! "]}," ActiveJob QueueAdapters TestAdapter performed_jobs":{"type":"method","name":"performed_jobs","children":[],"call":[]}," ActiveJob QueueAdapters TestAdapter enqueued_jobs":{"type":"method","name":"enqueued_jobs","children":[],"call":[]}," ActiveJob QueueAdapters SuckerPunchAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" raise ","JobWrapper  perform_in ","job serialize ","timestamp - ","Time  current to_f ","Time  current ","JobWrapper  respond_to? "]}," ActiveJob QueueAdapters SuckerPunchAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["JobWrapper  new async perform ","job serialize ","JobWrapper  new async ","JobWrapper  new ","JobWrapper  perform_async ","JobWrapper  respond_to? "]}," ActiveJob QueueAdapters SneakersAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" raise "]}," ActiveJob QueueAdapters SneakersAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["JobWrapper  enqueue ","ActiveSupport JSON  encode ","job serialize ","JobWrapper  from_queue ","job queue_name ","@monitor synchronize ","job name "]}," ActiveJob QueueAdapters SidekiqAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["Sidekiq Client  push ","job serialize ","job queue_name ","job class to_s ","job class ","job provider_job_id= ","JobWrapper  set perform_at ","JobWrapper  set "]}," ActiveJob QueueAdapters SidekiqAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["Sidekiq Client  push ","job serialize ","job queue_name ","job class to_s ","job class ","job provider_job_id= ","JobWrapper  set perform_async ","JobWrapper  set "]}," ActiveJob QueueAdapters ResqueAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["Resque  enqueue_at_with_queue ","job serialize ","job queue_name "," raise ","Resque  respond_to? ","job name "]}," ActiveJob QueueAdapters ResqueAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["Resque  enqueue_to ","job serialize ","job queue_name ","job name ","JobWrapper  instance_variable_set "]}," ActiveJob QueueAdapters QueueClassicAdapter build_queue":{"type":"method","name":"build_queue","children":[],"call":["QC Queue  new "]}," ActiveJob QueueAdapters QueueClassicAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["queue enqueue_at ","job serialize ","JobWrapper  name "," raise ","queue respond_to? "," build_queue ","job queue_name ","job provider_job_id= ","qc_job [] ","qc_job is_a? "," build_queue  en build_queue _at "," build_queue  respond_to? "," build_ build_queue  ","job  build_queue _name ","queue enqueue_at  [] ","queue enqueue_at  is_a? "]}," ActiveJob QueueAdapters QueueClassicAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":[" build_queue enqueue ","job serialize ","JobWrapper  name "," build_queue ","job queue_name ","QC Queue  new enqueue ","job name ","QC Queue  new ","job provider_job_id= ","qc_job [] ","qc_job is_a? "," build_queue enqueue  [] "," build_queue enqueue  is_a? "]}," ActiveJob QueueAdapters QueAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["JobWrapper  enqueue ","Time  at ","job queue_name ","job serialize "," raise ","job provider_job_id= ","que_job attrs [] ","que_job attrs ","job priority "," require_job_options_kwarg? ","JobWrapper  enqueue  attrs [] ","JobWrapper  enqueue  attrs "]}," ActiveJob QueueAdapters QueAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["JobWrapper  enqueue ","job queue_name ","job serialize ","job name ","job provider_job_id= ","que_job attrs [] ","que_job attrs ","job priority "," require_job_options_kwarg? ","JobWrapper  enqueue  attrs [] ","JobWrapper  enqueue  attrs "]}," ActiveJob QueueAdapters QuAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["Base  execute ","@job new execute ","@job new "]}," ActiveJob QueueAdapters QuAdapter JobWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["job_name constantize "]}," ActiveJob QueueAdapters QuAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" raise "]}," ActiveJob QueueAdapters QuAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["(send\n  (send\n    (const\n      (const nil :Qu) :Payload) :new\n    (hash\n      (pair\n        (sym :klass)\n        (const nil :JobWrapper))\n      (pair\n        (sym :args)\n        (array\n          (send\n            (lvar :job) :serialize))))) :tap) push ","payload instance_variable_set ","job queue_name ","Qu Payload  new tap ","Qu Payload  new ","job serialize ","(send\n  (send\n    (const\n      (const nil :Qu) :Payload) :new\n    (hash\n      (pair\n        (sym :klass)\n        (const nil :JobWrapper))\n      (pair\n        (sym :args)\n        (array\n          (send\n            (lvar :job) :name)\n          (splat\n            (lvar :args)))))) :tap) push ","job name ","job provider_job_id= ","qu_job id ","qu_job nil? ","(send\n  (send\n    (const\n      (const nil :Qu) :Payload) :new\n    (hash\n      (pair\n        (sym :klass)\n        (const nil :JobWrapper))\n      (pair\n        (sym :args)\n        (array\n          (send\n            (lvar :job) :serialize))))) :tap) push  id ","(send\n  (send\n    (const\n      (const nil :Qu) :Payload) :new\n    (hash\n      (pair\n        (sym :klass)\n        (const nil :JobWrapper))\n      (pair\n        (sym :args)\n        (array\n          (send\n            (lvar :job) :serialize))))) :tap) push  nil? "]}," ActiveJob QueueAdapters InlineAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" raise ","NotImplementedError  new "]}," ActiveJob QueueAdapters InlineAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["Base  execute ","job serialize ","job new execute ","job new ","(send\n  (const nil :Thread) :new) join ","Thread  new "]}," ActiveJob QueueAdapters DelayedJobAdapter JobWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveJob QueueAdapters DelayedJobAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["Delayed Job  enqueue ","Time  at ","job queue_name ","JobWrapper  new ","job serialize ","JobWrapper  new delay perform ","JobWrapper  new delay ","job provider_job_id= ","delayed_job id ","job priority ","Delayed Job  enqueue  id "]}," ActiveJob QueueAdapters DelayedJobAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["Delayed Job  enqueue ","job queue_name ","JobWrapper  new ","job serialize ","JobWrapper  new delay perform ","JobWrapper  new delay ","job provider_job_id= ","delayed_job id ","job priority ","Delayed Job  enqueue  id "]}," ActiveJob QueueAdapters BackburnerAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["Backburner Worker  enqueue ","job queue_name ","job serialize ","timestamp - ","Time  current to_f ","Time  current "," raise ","job priority ","job provider_job_id= ","response [] ","response is_a? ","Backburner Worker  enqueue  [] ","Backburner Worker  enqueue  is_a? "]}," ActiveJob QueueAdapters BackburnerAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["Backburner Worker  enqueue ","job queue_name ","job serialize ","job name ","job priority ","job provider_job_id= ","response [] ","response is_a? ","Backburner Worker  enqueue  [] ","Backburner Worker  enqueue  is_a? "]}," ActiveJob QueueAdapter ClassMethods load_adapter":{"type":"method","name":"load_adapter","children":[],"call":["(str \"ActiveJob::QueueAdapters::\") constantize ","name to_s camelize ","name to_s "]}," ActiveJob QueueAdapter ClassMethods queue_adapter=":{"type":"method","name":"queue_adapter=","children":[],"call":[" load_adapter ","ActiveJob QueueAdapters TestAdapter  new ","name_or_adapter respond_to? "," _queue_adapter= "," interpret_adapter "," raise "," assign_adapter ","name_or_adapter class name demodulize remove underscore ","name_or_adapter class name demodulize remove ","name_or_adapter class name demodulize ","name_or_adapter class name ","name_or_adapter class "," queue_adapter? ","name_or_adapter to_s ","ActiveJob QueueAdapters  lookup new ","ActiveJob QueueAdapters  lookup ","ActiveJob  adapter_name underscore ","ActiveJob  adapter_name "," _ActiveJob QueueAdapters  lookup new = "," ActiveJob QueueAdapters  lookup new ? ","ActiveJob  ActiveJob  adapter_name underscore  underscore ","ActiveJob  ActiveJob  adapter_name underscore  "]}," ActiveJob Logging LogSubscriber logger":{"type":"method","name":"logger","children":[],"call":["ActiveJob Base  logger "]}," ActiveJob Logging LogSubscriber scheduled_at":{"type":"method","name":"scheduled_at","children":[],"call":["Time  at utc ","Time  at ","event payload [] scheduled_at ","event payload [] ","event payload "]}," ActiveJob Logging LogSubscriber args_info":{"type":"method","name":"args_info","children":[],"call":[" with arguments:  + ","(send\n  (send\n    (lvar :job) :arguments) :map) join ","arg inspect ","arg try try ","arg try ","job arguments map ","job arguments ","job arguments any? ","event payload [] map join ","event payload [] map ","event payload [] ","event payload ","event payload [] any? ","job arguments map join "," format inspect "," format "]}," ActiveJob Logging LogSubscriber queue_name":{"type":"method","name":"queue_name","children":[],"call":["event payload [] name demodulize remove + ","event payload [] queue_name ","event payload [] ","event payload ","event payload [] name demodulize remove ","event payload [] name demodulize ","event payload [] name ","event payload [] class name demodulize remove + ","event payload [] class name demodulize remove ","event payload [] class name demodulize ","event payload [] class name ","event payload [] class "]}," ActiveJob Logging LogSubscriber perform":{"type":"method","name":"perform","children":[],"call":["event duration round ","event duration "," queue_name ","job class name ","job class ","event payload [] ","event payload "," info ","event duration round to_s ","event payload [] name ","job job_id ","(str \"Error performing \") + "," Array join "," Array ","ex backtrace ","ex message ","ex class "," error ","event payload []  class name ","event payload []  class ","event payload []  event payload [] _id ","event payload []  backtrace ","event payload []  message "]}," ActiveJob Logging LogSubscriber perform_start":{"type":"method","name":"perform_start","children":[],"call":["(str \"Performing \") + "," args_info "," queue_name ","job class name ","job class ","event payload [] ","event payload "," info ","event payload [] name ","job job_id ","job enqueued_at ","event payload []  class name ","event payload []  class ","event payload []  event payload [] _id ","event payload []  enqueued_at "]}," ActiveJob Logging LogSubscriber enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["(str \"Enqueued \") + "," args_info "," scheduled_at "," queue_name ","job job_id ","job class name ","job class ","event payload [] ","event payload "," info "," enqueued_at ","event payload [] name ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class "]}," ActiveJob Logging LogSubscriber enqueue":{"type":"method","name":"enqueue","children":[],"call":["(str \"Enqueued \") + "," args_info "," queue_name ","job job_id ","job class name ","job class ","event payload [] ","event payload "," info ","event payload [] name ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class "]}," ActiveJob Logging logger_tagged_by_active_job?":{"type":"method","name":"logger_tagged_by_active_job?","children":[],"call":[" logger formatter current_tags include? "," logger formatter current_tags "," logger formatter "," logger "]}," ActiveJob Logging tag_logger":{"type":"method","name":"tag_logger","children":[],"call":["ActiveJob Base  logger tagged ","ActiveJob Base  logger ","tags unshift "," logger_tagged_by_active_job? "," logger respond_to? "," logger "," logger tagged "]}," ActiveJob Execution perform":{"type":"method","name":"perform","children":[],"call":[" fail "]}," ActiveJob Execution perform_now":{"type":"method","name":"perform_now","children":[],"call":[" raise "," rescue_with_handler "," perform "," arguments "," run_callbacks "," deserialize_arguments_if_needed "," executions= ","(or\n  (send nil :executions)\n  (int 0)) + "," executions "," _perform_job "," run_after_discard_procs "]}," ActiveJob Execution ClassMethods execute":{"type":"method","name":"execute","children":[],"call":["job perform_now "," deserialize ","ActiveJob Callbacks  run_callbacks "," deserialize  perform_now "]}," ActiveJob Execution ClassMethods perform_now":{"type":"method","name":"perform_now","children":[],"call":[" job_or_instantiate perform_now "," job_or_instantiate "]}," ActiveJob Enqueuing retry_job":{"type":"method","name":"retry_job","children":[],"call":[" enqueue "]}," ActiveJob Enqueuing ClassMethods job_or_instantiate":{"type":"method","name":"job_or_instantiate","children":[],"call":[" new ","args first ","args first is_a? "]}," ActiveJob Enqueuing ClassMethods perform_later":{"type":"method","name":"perform_later","children":[],"call":[" job_or_instantiate enqueue "," job_or_instantiate "," block_given? ","job enqueue ","  job_or_instantiate _or_instantiate enqueue ","  job_or_instantiate _or_instantiate "," job_or_instantiate  enqueue "]}," ActiveJob Core deserialize_arguments":{"type":"method","name":"deserialize_arguments","children":[],"call":["Arguments  deserialize "]}," ActiveJob Core serialize_arguments":{"type":"method","name":"serialize_arguments","children":[],"call":["Arguments  serialize "]}," ActiveJob Core deserialize_arguments_if_needed":{"type":"method","name":"deserialize_arguments_if_needed","children":[],"call":[" deserialize_arguments ","@serialized_arguments present? "," arguments_serialized? "]}," ActiveJob Core serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_arguments "," arguments "," queue_name "," job_id "," class name "," class ","I18n  locale ","I18n  locale to_s "," priority "," provider_job_id "," executions "," serialize_arguments_if_needed ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Time  zone try ","Time  zone "," exception_executions "," timezone "," _scheduled_at_time utc iso8601 "," _scheduled_at_time utc "," _scheduled_at_time "]}," ActiveJob Core initialize":{"type":"method","name":"initialize","children":[],"call":[" class queue_name "," class ","SecureRandom  uuid "," class priority ","Time  zone try ","Time  zone "]}," ActiveJob Core ClassMethods set":{"type":"method","name":"set","children":[],"call":["ConfiguredJob  new "]}," ActiveJob Core ClassMethods deserialize":{"type":"method","name":"deserialize","children":[],"call":["job serialized_arguments= ","job_data [] ","job queue_name= ","job job_id= ","job_data [] constantize new ","job_data [] constantize ","job locale= ","I18n  locale ","job deserialize ","job_data [] constantize new  serialized_arguments= ","job_data [] constantize new _data [] ","job_data [] constantize new  queue_name= ","job_data [] constantize new  job_data [] constantize new _id= ","job_data [] constantize new _data [] constantize new ","job_data [] constantize new _data [] constantize ","job_data [] constantize new  locale= ","job_data [] constantize new  deserialize "]}," ActiveJob ConfiguredJob perform_later":{"type":"method","name":"perform_later","children":[],"call":["@job_class new enqueue ","@job_class new "]}," ActiveJob ConfiguredJob perform_now":{"type":"method","name":"perform_now","children":[],"call":["@job_class new perform_now ","@job_class new ","@job_class new set perform_now ","@job_class new set "]}," ActiveJob ConfiguredJob initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveJob Callbacks ClassMethods around_enqueue":{"type":"method","name":"around_enqueue","children":[],"call":[" set_callback "]}," ActiveJob Callbacks ClassMethods after_enqueue":{"type":"method","name":"after_enqueue","children":[],"call":[" set_callback "]}," ActiveJob Callbacks ClassMethods before_enqueue":{"type":"method","name":"before_enqueue","children":[],"call":[" set_callback "]}," ActiveJob Callbacks ClassMethods around_perform":{"type":"method","name":"around_perform","children":[],"call":[" set_callback "]}," ActiveJob Callbacks ClassMethods after_perform":{"type":"method","name":"after_perform","children":[],"call":[" set_callback "]}," ActiveJob Callbacks ClassMethods before_perform":{"type":"method","name":"before_perform","children":[],"call":[" set_callback "]}," ActiveJob Arguments serialize_hash_key":{"type":"method","name":"serialize_hash_key","children":[],"call":[" raise ","SerializationError  new ","key class ","key inspect ","key to_s ","key class name "]}," ActiveJob Arguments deserialize_hash":{"type":"method","name":"deserialize_hash","children":[],"call":["hash []= "," deserialize_argument ","serialized_hash each_with_object "," with_indifferent_access "," transform_symbol_keys ","result delete ","result with_indifferent_access ","serialized_hash transform_values ","Hash  ruby2_keywords_hash "," transform_result delete  "," transform_symbol_keys  delete ","result with_indifferent_access  delete ","Hash  ruby2_keywords_hash  delete "," transform_symbol_keys  with_indifferent_access ","result with_indifferent_access  with_indifferent_access ","Hash  ruby2_keywords_hash  with_indifferent_access "]}," ActiveJob Arguments deserialize_global_id":{"type":"method","name":"deserialize_global_id","children":[],"call":["GlobalID Locator  locate ","hash [] "]}," ActiveJob Arguments serialized_global_id?":{"type":"method","name":"serialized_global_id?","children":[],"call":["hash include? ","hash size == ","hash size "]}," ActiveJob Arguments deserialize_argument":{"type":"method","name":"deserialize_argument","children":[],"call":[" raise ","argument inspect "," deserialize_hash "," deserialize_global_id "," serialized_global_id? "," deserialize_argument ","argument map ","GlobalID Locator  locate ","DeserializationError  new ","Hash  [] with_indifferent_access ","Hash  [] "," deserialize ","Serializers  deserialize "," custom_serialized? "]}," ActiveJob Arguments serialize_argument":{"type":"method","name":"serialize_argument","children":[],"call":[" raise ","SerializationError  new ","argument class name ","argument class ","hash []= "," serialize_argument "," serialize_hash_key ","argument each_with_object ","argument map ","argument to_global_id to_s ","argument to_global_id ","Hash  [] "," serialize ","argument global_id to_s ","argument global_id ","result []= "," serialize_hash ","argument each_key grep map ","argument each_key grep ","argument each_key "," convert_to_global_id_hash "," serialize_indifferent_hash ","argument to_h ","arg respond_to? "," lambda ","Serializers  serialize ","Hash  ruby2_keywords_hash? ","argument each_key grep map! ","ActiveJob  deprecator warn ","ActiveJob  deprecator ","ActiveJob  use_big_decimal_serializer ! ","ActiveJob  use_big_decimal_serializer ","BigDecimal  === "," serialize_hash  []= "]}," ActiveJob Arguments deserialize":{"type":"method","name":"deserialize","children":[],"call":[" raise ","DeserializationError  new "," deserialize_argument ","arguments map "]}," ActiveJob Arguments serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_argument ","arguments map "]}," ActiveJob DeserializationError initialize":{"type":"method","name":"initialize","children":[],"call":[" set_backtrace ","e backtrace ","e message ","$! backtrace ","$! message ","ActiveSupport Deprecation  warn "," caller "]}," ActiveJob Logging LogSubscriber enqueued_at":{"type":"method","name":"enqueued_at","children":[],"call":["Time  at utc ","Time  at ","event payload [] ","event payload "]}," ActiveJob Identifier job_id":{"type":"method","name":"job_id","children":[],"call":["SecureRandom  uuid "]}," ActiveJob Execution deserialize_arguments":{"type":"method","name":"deserialize_arguments","children":[],"call":["Arguments  deserialize "]}," ActiveJob Execution execute":{"type":"method","name":"execute","children":[],"call":[" raise "," rescue_with_handler "," perform "," arguments "," run_callbacks "," arguments= "," deserialize_arguments "," job_id= "]}," ActiveJob Enqueuing retry_at":{"type":"method","name":"retry_at","children":[],"call":[" class enqueue_at "," arguments "," class "]}," ActiveJob Enqueuing retry_in":{"type":"method","name":"retry_in","children":[],"call":[" class enqueue_in "," arguments "," class "]}," ActiveJob Enqueuing retry_now":{"type":"method","name":"retry_now","children":[],"call":[" class enqueue "," arguments "," class "]}," ActiveJob Enqueuing initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveJob Enqueuing ClassMethods enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" queue_adapter enqueue_at ","Arguments  serialize ","job job_id ","timestamp to_f "," queue_adapter ","job run_callbacks ","job enqueued_at= "," new tap "," new "]}," ActiveJob Enqueuing ClassMethods enqueue_in":{"type":"method","name":"enqueue_in","children":[],"call":[" enqueue_at ","interval seconds from_now ","interval seconds "]}," ActiveJob Enqueuing ClassMethods enqueue":{"type":"method","name":"enqueue","children":[],"call":[" queue_adapter enqueue ","Arguments  serialize ","job job_id "," queue_adapter ","job run_callbacks "," new tap "," new "]}," ActiveJob TestHelper serialize_args_for_assertion":{"type":"method","name":"serialize_args_for_assertion","children":[],"call":["serialized_args []= ","ActiveJob Arguments  serialize ","serialized_args delete ","args dup ","serialized_args [] to_f ","serialized_args [] ","args dup tap ","args dup  []= ","args dup  delete ","args dup  [] to_f ","args dup  [] "]}," ActiveJob QueueAdapters TestAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" perform_enqueued_at_jobs= "," perform_enqueued_jobs= "]}," ActiveJob Arguments transform_symbol_keys":{"type":"method","name":"transform_symbol_keys","children":[],"call":["key to_sym ","symbol_keys include? ","hash transform_keys ","hash to_h transform_keys ","hash to_h "]}," ActiveJob Arguments serialize_hash":{"type":"method","name":"serialize_hash","children":[],"call":["hash []= "," serialize_argument "," serialize_hash_key ","argument each_with_object "]}," Rails Generators JobGenerator application_job_file_name":{"type":"method","name":"application_job_file_name","children":[],"call":[" namespaced_path "," mountable_engine? "]}," ActiveJob TestHelper instantiate_job":{"type":"method","name":"instantiate_job","children":[],"call":["job queue_name= ","payload [] ","job scheduled_at= ","Time  at ","payload key? ","payload [] new ","ActiveJob Arguments  deserialize ","job send ","payload [] deserialize ","payload [] to_f ","payload [] new  queue_name= ","payload [] deserialize  queue_name= ","payload [] new  scheduled_at= ","payload [] deserialize  scheduled_at= ","payload [] new  send ","payload [] deserialize  send "]}," ActiveJob TestHelper enqueued_jobs_size":{"type":"method","name":"enqueued_jobs_size","children":[],"call":[" enqueued_jobs count "," enqueued_jobs "," Array include? ","job fetch "," Array ","queue to_s == ","job_class queue_name ","queue to_s "," validate_option ","job fetch  queue_name "]}," ActiveJob TestHelper queue_adapter_for_test":{"type":"method","name":"queue_adapter_for_test","children":[],"call":["ActiveJob QueueAdapters TestAdapter  new "]}," ActiveJob QueuePriority priority":{"type":"method","name":"priority","children":[],"call":[" instance_exec ","@priority is_a? "," instance_exec  is_a? "]}," ActiveJob QueuePriority ClassMethods queue_with_priority":{"type":"method","name":"queue_with_priority","children":[],"call":[" priority= "," block_given? "]}," ActiveJob QueueAdapters lookup":{"type":"method","name":"lookup","children":[],"call":[" const_get ","name to_s camelize << ","name to_s camelize ","name to_s "]}," ActiveJob QueueAdapters TestAdapter filtered?":{"type":"method","name":"filtered?","children":[],"call":[" Array include? ! "," Array include? ","job class "," Array "," filter "," reject "," filtered_job_class? "," filtered_queue? "," filtered_time? "]}," ActiveJob QueueAdapters TestAdapter enqueue_or_perform":{"type":"method","name":"enqueue_or_perform","children":[],"call":[" enqueued_jobs << "," enqueued_jobs ","Base  execute ","job serialize "," performed_jobs << "," performed_jobs "," filtered? ","perform ! "]}," ActiveJob QueueAdapters TestAdapter job_to_hash":{"type":"method","name":"job_to_hash","children":[],"call":["(pair\n  (sym :job)\n  (send\n    (lvar :job) :class)) merge! ","job queue_name ","job serialize fetch ","job serialize ","job class ","(send\n  (send\n    (lvar :job) :serialize) :tap) merge ","job_data []= ","job_data fetch ","job serialize tap "]}," ActiveJob QueueAdapters SneakersAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new "]}," ActiveJob QueueAdapters AsyncAdapter Scheduler executor":{"type":"method","name":"executor","children":[],"call":[" immediate "]}," ActiveJob QueueAdapters AsyncAdapter Scheduler shutdown":{"type":"method","name":"shutdown","children":[],"call":["@async_executor wait_for_termination ","@async_executor shutdown "]}," ActiveJob QueueAdapters AsyncAdapter Scheduler enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" enqueue ","Concurrent ScheduledTask  execute "," executor ","delay > ","timestamp - ","Time  current to_f ","Time  current "," immediate ! "," immediate ","timestamp -  > "]}," ActiveJob QueueAdapters AsyncAdapter Scheduler enqueue":{"type":"method","name":"enqueue","children":[],"call":[" executor post "," executor "]}," ActiveJob QueueAdapters AsyncAdapter Scheduler initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent ThreadPoolExecutor  new ","DEFAULT_EXECUTOR_OPTIONS  merge ","Concurrent ImmediateExecutor  new "," immediate= "]}," ActiveJob QueueAdapters AsyncAdapter JobWrapper perform":{"type":"method","name":"perform","children":[],"call":["Base  execute "]}," ActiveJob QueueAdapters AsyncAdapter JobWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["job serialize ","job provider_job_id= ","SecureRandom  uuid "]}," ActiveJob QueueAdapters AsyncAdapter immediate=":{"type":"method","name":"immediate=","children":[],"call":["@scheduler immediate= "]}," ActiveJob QueueAdapters AsyncAdapter shutdown":{"type":"method","name":"shutdown","children":[],"call":["@scheduler shutdown "]}," ActiveJob QueueAdapters AsyncAdapter enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["@scheduler enqueue_at ","job queue_name ","JobWrapper  new ","ActiveJob AsyncJob  enqueue_at ","job serialize "]}," ActiveJob QueueAdapters AsyncAdapter enqueue":{"type":"method","name":"enqueue","children":[],"call":["@scheduler enqueue ","job queue_name ","JobWrapper  new ","ActiveJob AsyncJob  enqueue ","job serialize "]}," ActiveJob QueueAdapters AsyncAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["Scheduler  new "]}," ActiveJob QueueAdapter ClassMethods queue_adapter_class?":{"type":"method","name":"queue_adapter_class?","children":[],"call":["object public_method_defined? ","QUEUE_ADAPTER_METHODS  all? ","object is_a? "]}," ActiveJob QueueAdapter ClassMethods queue_adapter?":{"type":"method","name":"queue_adapter?","children":[],"call":["object respond_to? ","QUEUE_ADAPTER_METHODS  all? "]}," ActiveJob QueueAdapter ClassMethods interpret_adapter":{"type":"method","name":"interpret_adapter","children":[],"call":[" raise ","name_or_adapter_or_class new ","ActiveSupport Deprecation  warn ","name_or_adapter_or_class name ","name_or_adapter_or_class name demodulize remove underscore ","name_or_adapter_or_class name demodulize remove ","name_or_adapter_or_class name demodulize "," queue_adapter_class? "," queue_adapter? ","ActiveJob QueueAdapters  lookup new ","ActiveJob QueueAdapters  lookup "," assign_adapter ","name_or_adapter_or_class class name demodulize remove underscore ","name_or_adapter_or_class class name demodulize remove ","name_or_adapter_or_class class name demodulize ","name_or_adapter_or_class class name ","name_or_adapter_or_class class ","name_or_adapter_or_class to_s "]}," ActiveJob QueueAdapter ClassMethods queue_adapter":{"type":"method","name":"queue_adapter","children":[],"call":[" _queue_adapter "]}," ActiveJob Logging LogSubscriber format":{"type":"method","name":"format","children":[],"call":["arg to_global_id "," format ","arg map ","arg transform_values "]}," ActiveJob Core deserialize":{"type":"method","name":"deserialize","children":[],"call":[" locale= ","I18n  locale to_s ","I18n  locale ","job_data [] "," serialized_arguments= "," priority= "," queue_name= "," job_id= "," provider_job_id= "," executions= "," enqueued_at= "," timezone= ","Time  zone try ","Time  zone "," exception_executions= "," scheduled_at= ","Time  iso8601 "]}," ActiveJob Arguments convert_to_global_id_hash":{"type":"method","name":"convert_to_global_id_hash","children":[],"call":[" raise ","argument class ","argument to_global_id to_s ","argument to_global_id "]}," ActiveJob DeserializationError original_exception":{"type":"method","name":"original_exception","children":[],"call":[" cause ","ActiveSupport Deprecation  warn "," caller "]}," ActiveJob AsyncJob enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":[" enqueue ","ActiveJob Base  execute ","Concurrent ScheduledTask  execute ","QUEUES  [] ","delay > ","timestamp - ","Time  current to_f ","Time  current ","timestamp -  > "]}," ActiveJob AsyncJob enqueue":{"type":"method","name":"enqueue","children":[],"call":["ActiveJob Base  execute ","QUEUES  [] post ","QUEUES  [] "]}," ActiveJob AsyncJob create_thread_pool":{"type":"method","name":"create_thread_pool","children":[],"call":["Concurrent ThreadPoolExecutor  new ","Concurrent ImmediateExecutor  new "]}," ActiveJob AsyncJob perform_asynchronously!":{"type":"method","name":"perform_asynchronously!","children":[],"call":[]}," ActiveJob AsyncJob perform_immediately!":{"type":"method","name":"perform_immediately!","children":[],"call":[]}," ActiveJob TestHelper queue_adapter_changed_jobs":{"type":"method","name":"queue_adapter_changed_jobs","children":[],"call":["klass singleton_class public_instance_methods include? ","klass singleton_class public_instance_methods ","klass singleton_class ","(send\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :descendants) :<<\n  (const\n    (const nil :ActiveJob) :Base)) select ","ActiveJob Base  descendants << ","ActiveJob Base  descendants "]}," ActiveJob TestHelper TestQueueAdapter ClassMethods enable_test_adapter":{"type":"method","name":"enable_test_adapter","children":[],"call":[" _test_adapter= "]}," ActiveJob TestHelper TestQueueAdapter ClassMethods disable_test_adapter":{"type":"method","name":"disable_test_adapter","children":[],"call":[" _test_adapter= "]}," ActiveJob TestHelper TestQueueAdapter ClassMethods queue_adapter":{"type":"method","name":"queue_adapter","children":[],"call":[" _test_adapter "," _test_adapter nil? "]}," ActiveJob Exceptions determine_delay":{"type":"method","name":"determine_delay","children":[],"call":[" raise ","seconds_or_duration_or_algorithm inspect ","algorithm call "," executions ","duration to_i ","(send\n  (send nil :executions) :**\n  (int 4)) + "," executions ** ","(send\n  (lvar :executions) :**\n  (int 4)) + ","executions ** ","delay + "," determine_jitter_for_delay ","seconds_or_duration_or_algorithm to_i ","delay + + "," class retry_jitter "," class ","jitter == ","seconds_or_duration_or_algorithm to_i  + ","executions **  + "," determine_jitter_for_seconds_or_duration_or_algorithm to_i  "," determine_jitter_for_executions **  "," determine_ class retry_jitter _for_delay ","seconds_or_duration_or_algorithm to_i  + + ","executions **  + + "," class retry_ class retry_jitter  "," class retry_jitter  == "]}," ActiveJob Exceptions retry_job":{"type":"method","name":"retry_job","children":[],"call":[" enqueue "," instrument ","options slice "]}," ActiveJob Exceptions ClassMethods discard_on":{"type":"method","name":"discard_on","children":[],"call":[" logger error ","error cause inspect ","error cause "," class "," logger "," rescue_from "," block_given? "," instrument "," run_after_discard_procs "]}," ActiveJob Exceptions ClassMethods retry_on":{"type":"method","name":"retry_on","children":[],"call":[" raise "," logger error ","error cause inspect ","error cause "," executions "," class "," logger "," block_given? "," retry_job "," determine_delay "," executions < "," rescue_from "," instrument ","executions < "," executions_for "," exception_executions [] < "," exception_executions [] ","exceptions to_s "," exception_executions "," exception_executions []= ","(or\n  (send\n    (send nil :exception_executions) :[]\n    (send\n      (lvar :exceptions) :to_s))\n  (int 0)) + ","attempts == "," run_after_discard_procs ","ActiveJob  deprecator warn ","(str \"`wait: :exponentially_longer` will actually wait polynomially longer and is therefore deprecated.\\n\") squish ","ActiveJob  deprecator ","wait == ","  executions_for  ","  executions_for  < "," executions_for  < ","  executions_for _for "," exception_ executions_for  [] < "," exception_ executions_for  [] "," exception_ executions_for  "," exception_ executions_for  []= ","(or\n  (send\n    (send nil :exception_ executions_for ) :[]\n    (send\n      (lvar :exceptions) :to_s))\n  (int 0)) + "]}," ActiveJob TestHelper validate_option":{"type":"method","name":"validate_option","children":[],"call":[" raise "]}," ActiveJob QueueAdapters DelayedJobAdapter JobWrapper display_name":{"type":"method","name":"display_name","children":[],"call":[" job_data [] "," job_data "," log_arguments? "]}," ActiveJob QueueAdapter ClassMethods assign_adapter":{"type":"method","name":"assign_adapter","children":[],"call":[" _queue_adapter= "," _queue_adapter_name= "]}," ActiveJob QueueAdapter ClassMethods queue_adapter_name":{"type":"method","name":"queue_adapter_name","children":[],"call":[" _queue_adapter_name "]}," ActiveJob Core arguments_serialized?":{"type":"method","name":"arguments_serialized?","children":[],"call":[]}," ActiveJob Core serialize_arguments_if_needed":{"type":"method","name":"serialize_arguments_if_needed","children":[],"call":[" serialize_arguments "," arguments_serialized? "]}," ActiveJob TestHelper deserialize_args_for_assertion":{"type":"method","name":"deserialize_args_for_assertion","children":[],"call":["new_job []= ","ActiveJob Arguments  deserialize ","new_job [] ","job dup tap ","job dup "," round_time_arguments ","Time  at "]}," ActiveJob TestHelper prepare_args_for_assertion":{"type":"method","name":"prepare_args_for_assertion","children":[],"call":["arguments []= ","arguments [] to_f ","arguments [] ","args dup tap ","args dup "," round_time_arguments ","at_range cover? "," lambda ","arguments [] + ","arguments [] - ","arguments [] respond_to? ! ","arguments [] respond_to? ","arguments [] acts_like? ","arguments [] to_s ","arguments [] is_a? "]}," ActiveJob Arguments serialize_indifferent_hash":{"type":"method","name":"serialize_indifferent_hash","children":[],"call":["result []= "," serialize_argument "," serialize_hash "," serialize_hash  []= "]}," Rails Generators JobGenerator file_name":{"type":"method","name":"file_name","children":[],"call":[" sub "]}," ActiveJob TestHelper round_time_arguments":{"type":"method","name":"round_time_arguments","children":[],"call":[" round_time_arguments ","argument map ","argument transform_values ","argument change "]}," ActiveJob TestHelper flush_enqueued_jobs":{"type":"method","name":"flush_enqueued_jobs","children":[],"call":[" queue_adapter performed_jobs << "," queue_adapter performed_jobs "," queue_adapter "," instantiate_job perform_now "," instantiate_job "," enqueued_jobs_with ","(send nil :enqueued_jobs_with\n  (hash\n    (pair\n      (sym :only)\n      (lvar :only))\n    (pair\n      (sym :except)\n      (lvar :except))\n    (pair\n      (sym :queue)\n      (lvar :queue))\n    (pair\n      (sym :at)\n      (lvar :at)))) count "," queue_adapter enqueued_jobs delete "," queue_adapter enqueued_jobs "]}," ActiveJob TestHelper performed_jobs_with":{"type":"method","name":"performed_jobs_with","children":[],"call":[" jobs_with "," performed_jobs "]}," ActiveJob TestHelper enqueued_jobs_with":{"type":"method","name":"enqueued_jobs_with","children":[],"call":[" jobs_with "," enqueued_jobs "]}," ActiveJob TestHelper filter_as_proc":{"type":"method","name":"filter_as_proc","children":[],"call":[" Array include? ","job fetch "," Array "," lambda ","filter is_a? "]}," ActiveJob TestHelper jobs_with":{"type":"method","name":"jobs_with","children":[],"call":[" block_given? ","queue to_s == ","job fetch ","job_class queue_name ","queue to_s "," filter_as_proc call "," filter_as_proc ","jobs count "," validate_option ","job [] > ","at to_f ","job [] ","jobs dup select ","jobs dup ","job fetch  queue_name "]}," ActiveJob Serializers add_serializers":{"type":"method","name":"add_serializers","children":[],"call":["new_serializers flatten "," _additional_serializers "]}," ActiveJob Serializers serializers":{"type":"method","name":"serializers","children":[],"call":[" _additional_serializers "]}," ActiveJob Serializers deserialize":{"type":"method","name":"deserialize","children":[],"call":["serializer deserialize "," raise ","serializer_name safe_constantize ","argument inspect ","argument [] ","serializer_name safe_constantize  deserialize ","serializer_name safe_constantize _name safe_constantize ","argument []  safe_constantize "]}," ActiveJob Serializers serialize":{"type":"method","name":"serialize","children":[],"call":["serializer serialize "," raise ","SerializationError  new ","argument class name ","argument class ","s serialize? "," serializers detect "," serializers "]}," ActiveJob Serializers TimeWithZoneSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers TimeWithZoneSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["Time  iso8601 in_time_zone ","Time  iso8601 ","hash [] "]}," ActiveJob Serializers TimeWithZoneSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["time iso8601 "]}," ActiveJob Serializers TimeSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers TimeSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["Time  iso8601 ","hash [] "]}," ActiveJob Serializers TimeSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["time iso8601 "]}," ActiveJob Serializers SymbolSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers SymbolSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["argument [] to_sym ","argument [] "]}," ActiveJob Serializers SymbolSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["argument to_s "]}," ActiveJob Serializers ObjectSerializer klass":{"type":"method","name":"klass","children":[],"call":[" raise "]}," ActiveJob Serializers ObjectSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" raise "]}," ActiveJob Serializers ObjectSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["(pair\n  (const\n    (const nil :Arguments) :OBJECT_SERIALIZER_KEY)\n  (send\n    (send\n      (self) :class) :name)) merge! "," class name "," class "]}," ActiveJob Serializers ObjectSerializer serialize?":{"type":"method","name":"serialize?","children":[],"call":["argument is_a? "," klass "]}," ActiveJob Serializers DurationSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers DurationSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" klass new "," klass ","Arguments  deserialize ","hash [] ","parts to_h ","Arguments  deserialize  to_h "]}," ActiveJob Serializers DurationSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["Arguments  serialize ","duration parts ","duration value "]}," ActiveJob Serializers DateTimeSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers DateTimeSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["DateTime  iso8601 ","hash [] "]}," ActiveJob Serializers DateTimeSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["time iso8601 "]}," ActiveJob Serializers DateSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers DateSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["Date  iso8601 ","hash [] "]}," ActiveJob Serializers DateSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["date iso8601 "]}," ActiveJob QueueAdapters TestAdapter filter_as_proc":{"type":"method","name":"filter_as_proc","children":[],"call":[" Array include? ","job class "," Array "," lambda ","filter is_a? "]}," ActiveJob QueueAdapters TestAdapter filtered_job_class?":{"type":"method","name":"filtered_job_class?","children":[],"call":[" filter_as_proc call "," filter_as_proc "," reject "," filter_as_proc call ! "," filter "]}," ActiveJob QueueAdapters TestAdapter filtered_queue?":{"type":"method","name":"filtered_queue?","children":[],"call":["job queue_name != "," queue to_s "," queue ","job queue_name "]}," ActiveJob QueueAdapters TestAdapter perform_or_enqueue":{"type":"method","name":"perform_or_enqueue","children":[],"call":[" enqueued_jobs << "," enqueued_jobs ","Base  execute ","job serialize "," performed_jobs << "," performed_jobs "]}," ActiveJob Logging LogSubscriber discard":{"type":"method","name":"discard","children":[],"call":["ex class ","job class "," error ","event payload [] ","event payload ","event payload []  class "]}," ActiveJob Logging LogSubscriber retry_stopped":{"type":"method","name":"retry_stopped","children":[],"call":["job executions ","ex class ","job class "," error ","event payload [] ","event payload ","job event payload [] ecutions ","event payload []  executions ","event payload []  class "]}," ActiveJob Logging LogSubscriber enqueue_retry":{"type":"method","name":"enqueue_retry","children":[],"call":["wait to_i ","job class ","ex class "," info ","event payload [] ","event payload ","event payload []  to_i ","event payload []  class "]}," ActiveJob Exceptions executions_for":{"type":"method","name":"executions_for","children":[],"call":[" executions "," exception_executions []= ","(or\n  (send\n    (send nil :exception_executions) :[]\n    (send\n      (lvar :exceptions) :to_s))\n  (int 0)) + "," exception_executions [] ","exceptions to_s "," exception_executions "]}," ActiveJob Exceptions instrument":{"type":"method","name":"instrument","children":[],"call":["ActiveSupport Notifications  instrument "," class queue_adapter "," class "]}," ActiveJob Arguments custom_serialized?":{"type":"method","name":"custom_serialized?","children":[],"call":["hash key? "]}," ActiveJob Arguments _ruby2_keywords_hash":{"type":"method","name":"_ruby2_keywords_hash","children":[],"call":["args last "]}," ActiveJob Arguments ruby2_keywords_hash":{"type":"method","name":"ruby2_keywords_hash","children":[],"call":[" _ruby2_keywords_hash "]}," ActiveJob Arguments ruby2_keywords_hash?":{"type":"method","name":"ruby2_keywords_hash?","children":[],"call":[" new default equal? ! "," new default equal? "," new default "," new "]}," ActiveJob Serializers TimeObjectSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["time iso8601 "]}," ActiveJob Serializers ModuleSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers ModuleSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":["hash [] constantize ","hash [] "]}," ActiveJob Serializers ModuleSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["constant name "," raise "]}," ActiveJob QueueAdapters TestAdapter filtered_time?":{"type":"method","name":"filtered_time?","children":[],"call":["job scheduled_at > "," at to_f "," at ","job scheduled_at "]}," ActiveJob LogSubscriber scheduled_at":{"type":"method","name":"scheduled_at","children":[],"call":["Time  at utc ","Time  at ","event payload [] scheduled_at ","event payload [] ","event payload "]}," ActiveJob LogSubscriber format":{"type":"method","name":"format","children":[],"call":["arg to_global_id "," format ","arg map ","arg transform_values "]}," ActiveJob LogSubscriber args_info":{"type":"method","name":"args_info","children":[],"call":[" with arguments:  + ","(send\n  (send\n    (lvar :job) :arguments) :map) join "," format inspect "," format ","job arguments map ","job arguments ","job arguments any? ","job class log_arguments? ","job class "]}," ActiveJob LogSubscriber queue_name":{"type":"method","name":"queue_name","children":[],"call":["event payload [] class name demodulize remove + ","event payload [] queue_name ","event payload [] ","event payload ","event payload [] class name demodulize remove ","event payload [] class name demodulize ","event payload [] class name ","event payload [] class ","ActiveJob  adapter_name + ","ActiveJob  adapter_name "]}," ActiveJob LogSubscriber discard":{"type":"method","name":"discard","children":[],"call":["ex class ","job class "," error ","event payload [] ","event payload ","ex message ","job job_id ","event payload []  class ","event payload []  message ","event payload []  event payload [] _id "]}," ActiveJob LogSubscriber retry_stopped":{"type":"method","name":"retry_stopped","children":[],"call":["job executions ","ex class ","job class "," error ","event payload [] ","event payload ","ex message ","job job_id ","job event payload [] ecutions ","event payload []  executions ","event payload []  class ","event payload []  message ","event payload []  event payload [] _id "]}," ActiveJob LogSubscriber enqueue_retry":{"type":"method","name":"enqueue_retry","children":[],"call":["wait to_i ","job class ","ex class "," info ","event payload [] ","event payload ","job executions ","job job_id ","ex message ","event payload []  to_i ","event payload []  class ","job event payload [] ecutions ","event payload []  executions ","event payload []  event payload [] _id ","event payload []  message "]}," ActiveJob LogSubscriber perform":{"type":"method","name":"perform","children":[],"call":["event duration round ","event duration "," queue_name ","job job_id ","job class name ","job class "," info "," error ","event payload [] ","event payload ","(str \"Error performing \") + "," Array join "," Array ","ex backtrace ","ex message ","ex class ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class ","event payload []  backtrace ","event payload []  message "]}," ActiveJob LogSubscriber perform_start":{"type":"method","name":"perform_start","children":[],"call":["(str \"Performing \") + "," args_info ","job enqueued_at "," queue_name ","job job_id ","job class name ","job class ","event payload [] ","event payload "," info ","job enqueued_at utc iso8601 ","job enqueued_at utc ","(str \"Performing \") + + ","job enqueued_at present? ","event payload []  enqueued_at ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class ","event payload []  enqueued_at utc iso8601 ","event payload []  enqueued_at utc ","event payload []  enqueued_at present? "]}," ActiveJob LogSubscriber enqueue_at":{"type":"method","name":"enqueue_at","children":[],"call":["(str \"Enqueued \") + "," args_info "," scheduled_at "," queue_name ","job job_id ","job class name ","job class "," info ","event payload [] ","event payload ","ex message ","ex class "," error "," scheduled_at to_default_s ","job enqueue_error ","event payload []  event payload [] _id ","event payload []  class name ","event payload []  class ","event payload []  message ","event payload []  enqueue_error "]}," ActiveJob Instrumentation halted_callback_hook":{"type":"method","name":"halted_callback_hook","children":[],"call":[]}," ActiveJob Instrumentation instrument":{"type":"method","name":"instrument","children":[],"call":["ActiveSupport Notifications  instrument ","payload merge "," queue_adapter ","event_payload []= ","block call "," lambda ","payload []= "]}," ActiveJob Exceptions determine_jitter_for_delay":{"type":"method","name":"determine_jitter_for_delay","children":[],"call":["Kernel  rand * * ","Kernel  rand * ","Kernel  rand ","jitter zero? "]}," ActiveJob Callbacks halted_callback_hook":{"type":"method","name":"halted_callback_hook","children":[],"call":["ActiveSupport Deprecation  warn ","c kind == ","c kind ","callbacks any? "," class skip_after_callbacks_if_terminated ! "," class skip_after_callbacks_if_terminated "," class "," public_send ","(sym :enqueue) include? ","name to_sym "," public_send  any? "," class skip_after_ public_send _if_terminated ! "," class skip_after_ public_send _if_terminated "]}," ActiveJob Callbacks ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["klass get_callbacks config []= "," skip_after_callbacks_if_terminated ","klass get_callbacks config ","klass get_callbacks "]}," ActiveJob Serializers RangeSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers RangeSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" klass new ","Arguments  deserialize ","hash values_at "," klass "]}," ActiveJob Serializers RangeSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["KEYS  zip to_h ","KEYS  zip ","Arguments  serialize ","range exclude_end? ","range end ","range begin "]}," ActiveJob QueueAdapters DelayedJobAdapter JobWrapper log_arguments?":{"type":"method","name":"log_arguments?","children":[],"call":[" job_data [] constantize log_arguments? "," job_data [] constantize "," job_data [] "," job_data "]}," ActiveJob Logging perform_now":{"type":"method","name":"perform_now","children":[],"call":[" tag_logger "," job_id "," class name "," class "]}," ActiveJob Instrumentation _perform_job":{"type":"method","name":"_perform_job","children":[],"call":[" instrument "]}," ActiveJob Instrumentation perform_now":{"type":"method","name":"perform_now","children":[],"call":[" instrument "]}," ActiveJob Execution _perform_job":{"type":"method","name":"_perform_job","children":[],"call":[" perform "," arguments "," run_callbacks ","ActiveSupport ExecutionContext  []= "]}," ActiveJob Core set":{"type":"method","name":"set","children":[],"call":[" priority= ","options [] to_i ","options [] "," queue_name= "," class queue_name_from_part "," class "," scheduled_at= ","options [] to_f ","options [] seconds from_now to_f ","options [] seconds from_now ","options [] seconds "]}," ActiveJob Core successfully_enqueued?":{"type":"method","name":"successfully_enqueued?","children":[],"call":[]}," ActiveJob QueryTags expose_job_to_query_logs":{"type":"method","name":"expose_job_to_query_logs","children":[],"call":["ActiveRecord QueryLogs  set_context "]}," ActiveJob QueueAdapters QueAdapter require_job_options_kwarg?":{"type":"method","name":"require_job_options_kwarg?","children":[],"call":["pname == ","ptype == ","JobWrapper  method parameters any? ","JobWrapper  method parameters ","JobWrapper  method "]}," Rails Generators JobGenerator parent_class_name":{"type":"method","name":"parent_class_name","children":[],"call":[" options [] "," options "]}," ActiveJob TestHelper using_test_adapter?":{"type":"method","name":"using_test_adapter?","children":[],"call":[" queue_adapter is_a? "," queue_adapter "]}," ActiveJob Serializers BigDecimalSerializer klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveJob Serializers BigDecimalSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" BigDecimal ","hash [] "]}," ActiveJob Serializers BigDecimalSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["big_decimal to_s "]}," ActiveJob QueueAdapters SidekiqAdapter enqueue_all":{"type":"method","name":"enqueue_all","children":[],"call":["jids compact size ","jids compact ","Sidekiq Client  push_bulk ","job scheduled_at ","scheduled_jobs map ","job serialize ","scheduled_jobs any? ","immediate_jobs map ","immediate_jobs any? ","job scheduled_at nil? ","same_class_and_queue_jobs partition ","same_class_jobs group_by each ","same_class_jobs group_by ","jobs group_by each ","jobs group_by ","Sidekiq Client  push_bulk  compact size ","Sidekiq Client  push_bulk  compact "]}," ActiveJob adapter_name":{"type":"method","name":"adapter_name","children":[],"call":["adapter_class name demodulize delete_suffix ","adapter_class name demodulize ","adapter_class name ","adapter class ","adapter is_a? ","adapter queue_adapter_name ","adapter respond_to? ","adapter class  name demodulize delete_suffix ","adapter class  name demodulize ","adapter class  name "]}," ActiveJob LogSubscriber enqueued_jobs_message":{"type":"method","name":"enqueued_jobs_message","children":[],"call":["(send\n  (lvar :job_classes_counts) :map) join ","job_classes_counts map ","ActiveJob  adapter_name ","job pluralize ","v -@ ","enqueued_jobs map tally sort_by ","enqueued_jobs map tally ","enqueued_jobs map ","enqueued_jobs size "]}," ActiveJob LogSubscriber extract_enqueue_source_location":{"type":"method","name":"extract_enqueue_source_location","children":[],"call":[" backtrace_cleaner clean first "," backtrace_cleaner clean ","locations lazy "," backtrace_cleaner "]}," ActiveJob LogSubscriber log_enqueue_source":{"type":"method","name":"log_enqueue_source","children":[],"call":[" logger info "," logger "," extract_enqueue_source_location "," caller "," extract_enqueue_ extract_enqueue_source_location _location "]}," ActiveJob LogSubscriber error":{"type":"method","name":"error","children":[],"call":[" log_enqueue_source ","ActiveJob  verbose_enqueue_logs "]}," ActiveJob LogSubscriber info":{"type":"method","name":"info","children":[],"call":[" log_enqueue_source ","ActiveJob  verbose_enqueue_logs "]}," ActiveJob LogSubscriber enqueue_all":{"type":"method","name":"enqueue_all","children":[],"call":["ActiveJob  adapter_name ","job pluralize ","jobs size - ","jobs size "," enqueued_jobs_message ","failed_enqueue_count == ","jobs select ","jobs any? ","enqueued_count == ","event payload [] ","event payload "," info ","ActiveJob  event payload [] _name ","event payload []  size - ","event payload []  size "," jobs select _message "," enqueued_event payload [] _message ","jobs size -  == ","event payload []  select ","event payload []  any? ","event payload []  == "]}," ActiveJob instrument_enqueue_all":{"type":"method","name":"instrument_enqueue_all","children":[],"call":["payload []= ","ActiveSupport Notifications  instrument "]}," ActiveJob Exceptions run_after_discard_procs":{"type":"method","name":"run_after_discard_procs","children":[],"call":[" raise ","exceptions last ","exceptions empty? ","exceptions << "," instance_exec "," after_discard_procs each "," after_discard_procs "]}," ActiveJob Exceptions ClassMethods after_discard":{"type":"method","name":"after_discard","children":[],"call":[" after_discard_procs "]}," ActiveJob perform_all_later":{"type":"method","name":"perform_all_later","children":[],"call":["adapter_jobs count ","job enqueue_error= ","job successfully_enqueued= ","queue_adapter enqueue ","queue_adapter enqueue_at ","job _scheduled_at_time to_f ","job _scheduled_at_time ","job scheduled_at ","adapter_jobs each ","queue_adapter enqueue_all ","queue_adapter respond_to? "," instrument_enqueue_all ","jobs group_by each ","jobs group_by ","jobs flatten! "]}," ActiveJob deprecator":{"type":"method","name":"deprecator","children":[],"call":[]}," ActiveJob Core scheduled_at=":{"type":"method","name":"scheduled_at=","children":[],"call":["Time  at ","ActiveJob  deprecator warn ","Assigning a numeric/epoch value to scheduled_at is deprecated. Use a Time object instead.\n squish ","ActiveJob  deprecator "]}," ActiveJob ConfiguredJob perform_all_later":{"type":"method","name":"perform_all_later","children":[],"call":["@job_class perform_all_later "]}}