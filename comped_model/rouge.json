{" Rouge version":{"type":"method","name":"version","children":[],"call":[]}," Rouge highlight":{"type":"method","name":"highlight","children":[],"call":["formatter render ","lexer lex "," raise ","Lexer  find ","lexer respond_to? "," lexer_name ","lexer is_a? ","formatter format ","Formatter  find ","formatter respond_to? ","Formatter  find  render ","Lexer  find  lex ","Lexer  find  respond_to? "," Lexer  find _name ","Lexer  find  is_a? ","Formatter  find  format ","Formatter  find  respond_to? "]}," Rouge Token each_token":{"type":"method","name":"each_token","children":[],"call":[" base sub_tokens each_value "," base sub_tokens "," base ","token sub_tokens each_value ","token sub_tokens ","b call "," proc ","Token  cache each ","Token  cache "]}," Rouge Token token":{"type":"method","name":"token","children":[],"call":["tok shortname= "," get "," const_set "," make_token "," get  shortname= "," make_token  shortname= "," make_ get en "," make_ make_token en "]}," Rouge Token get":{"type":"method","name":"get","children":[],"call":[" base [] "," base ","name is_a? "]}," Rouge Token base":{"type":"method","name":"base","children":[],"call":[" new "]}," Rouge Token inspect":{"type":"method","name":"inspect","children":[],"call":["parts join ","parts << "," shortname inspect "," shortname "," name inspect "," name "," qualname "]}," Rouge Token ===":{"type":"method","name":"===","children":[],"call":["(and\n  (send\n    (lvar :other) :parent)\n  (send\n    (self) :===\n    (send\n      (lvar :other) :parent))) ! ! ","(and\n  (send\n    (lvar :other) :parent)\n  (send\n    (self) :===\n    (send\n      (lvar :other) :parent))) ! "," === ","other parent "," name == "," name "," == "," class == ","other class "," class "]}," Rouge Token ancestors":{"type":"method","name":"ancestors","children":[],"call":[" parent ancestors "," parent "," enum_for "," block_given? "]}," Rouge Token sub_tokens":{"type":"method","name":"sub_tokens","children":[],"call":[]}," Rouge Token []":{"type":"method","name":"[]","children":[],"call":["tok make_single ","tok sub_tokens [] ","tok sub_tokens ","name split inject ","name split ","name to_s ","Token  cache [] ","Token  cache ","qualname is_a? ","name to_s  split inject ","name to_s  split ","name to_s  to_s ","qualname to_s  is_a? "]}," Rouge Token make":{"type":"method","name":"make","children":[],"call":["tok make_single ","names inject ","name split ","name split  inject "]}," Rouge Token make_single":{"type":"method","name":"make_single","children":[],"call":[" sub_tokens []= "," sub_tokens ","new_token instance_eval "," clone ","(send\n  (self) :name) compact join ","(send\n  (self) :name) compact "," name ","name to_s "," clone  instance_eval ","(send\n  (self) :name to_s ) compact join ","(send\n  (self) :name to_s ) compact "," name to_s  ","name to_s  to_s "]}," Rouge Themes Base16 make_light!":{"type":"method","name":"make_light!","children":[],"call":[]}," Rouge Themes Base16 make_dark!":{"type":"method","name":"make_dark!","children":[],"call":[]}," Rouge Themes Base16 dark!":{"type":"method","name":"dark!","children":[],"call":[]}," Rouge Themes Base16 light!":{"type":"method","name":"light!","children":[],"call":[]}," Rouge CSSTheme inflate_token":{"type":"method","name":"inflate_token","children":[],"call":[" inflate_token "," styles [] ","st name "," styles ","tok sub_tokens each ","tok sub_tokens "," enum_for "," block_given? "," class styles include? "," class styles "," class ","tok sub_tokens each_value "]}," Rouge CSSTheme single_css_selector":{"type":"method","name":"single_css_selector","children":[],"call":["token shortname ","token == ","Token  [] "]}," Rouge CSSTheme css_selector":{"type":"method","name":"css_selector","children":[],"call":["(send\n  (send nil :inflate_token\n    (lvar :token)) :map) join "," single_css_selector "," raise ","tok inspect ","tok shortname nil? ","tok shortname "," inflate_token map "," inflate_token ","token parent ","base << ","tok shortname empty? ","token token parent  "]}," Rouge CSSTheme render":{"type":"method","name":"render","children":[],"call":["style render "," css_selector ","Token  [] "," styles each "," styles "," enum_for to_a join "," enum_for to_a "," enum_for ","out join ","out << "," stream "," class styles each "," class styles "," class ","Style  new render ","Style  new "]}," Rouge CSSTheme initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Rouge HasModes mode!":{"type":"method","name":"mode!","children":[],"call":[" send "," set_mode! "," register "," name "]}," Rouge HasModes get_mode":{"type":"method","name":"get_mode","children":[],"call":[" mode! "," name ","Class  new "," mode == "," mode "," set_mode! "]}," Rouge HasModes mode":{"type":"method","name":"mode","children":[],"call":[" get_mode ","@modes [] ","arg == "]}," Rouge Theme registry":{"type":"method","name":"registry","children":[],"call":[]}," Rouge Theme find":{"type":"method","name":"find","children":[],"call":[" registry [] ","n to_s "," registry "]}," Rouge Theme name":{"type":"method","name":"name","children":[],"call":["Theme  registry []= ","Theme  registry ","n to_s ","n nil? "," registry []= "," registry "," register "," class name "," class "]}," Rouge Theme style":{"type":"method","name":"style","children":[],"call":[" styles []= ","tok to_s "," styles ","tokens each ","Style  new ","tokens pop ","tokens last is_a? ","tokens last ","tokens empty? ","style merge! "," Style  new s []= "," tokens pop s []= "," Style  new s "," tokens pop s ","Style  new  merge! ","tokens pop  merge! "]}," Rouge Theme styles":{"type":"method","name":"styles","children":[],"call":[" class styles dup "," class styles "," class "]}," Rouge Theme palette":{"type":"method","name":"palette","children":[],"call":[" class palette "," class "]}," Rouge Theme Style render":{"type":"method","name":"render","children":[],"call":["(or\n  (send\n    (self) :[]\n    (sym :rules))\n  (array)) each "," [] ","@theme palette "," empty? "," enum_for to_a join "," enum_for to_a "," enum_for "," bg "," fg "," rendered_rules each "," rendered_rules "]}," Rouge Theme Style initialize":{"type":"method","name":"initialize","children":[],"call":[" merge! "]}," Rouge Theme InheritableHash keys":{"type":"method","name":"keys","children":[],"call":["keys uniq! "," own_keys concat "," parent keys "," parent "," own_keys "," own_keys concat  uniq! "," own_ own_keys concat  concat "," parent  own_keys concat  "," own_ own_keys concat  "]}," Rouge Theme InheritableHash each":{"type":"method","name":"each","children":[],"call":["b call "," [] "," keys each "," keys "]}," Rouge Theme InheritableHash include?":{"type":"method","name":"include?","children":[],"call":[" parent include? "," parent "]}," Rouge Theme InheritableHash parent":{"type":"method","name":"parent","children":[],"call":[]}," Rouge Theme InheritableHash []":{"type":"method","name":"[]","children":[],"call":[" parent [] "," parent "," own_keys include? "," own_keys "]}," Rouge Theme InheritableHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge TextAnalyzer lexes_cleanly?":{"type":"method","name":"lexes_cleanly?","children":[],"call":["tok name == ","tok name ","lexer lex "]}," Rouge TextAnalyzer doctype?":{"type":"method","name":"doctype?","children":[],"call":["type === "," doctype "]}," Rouge TextAnalyzer doctype":{"type":"method","name":"doctype","children":[],"call":[" =~ "," instance_variable_defined? "]}," Rouge TextAnalyzer shebang?":{"type":"method","name":"shebang?","children":[],"call":["match === "," shebang "]}," Rouge TextAnalyzer shebang":{"type":"method","name":"shebang","children":[],"call":[" =~ "," instance_variable_defined? "]}," Rouge Plugins Redcarpet block_code":{"type":"method","name":"block_code","children":[],"call":["Rouge  highlight ","Formatters HTML  new ","lexer_class tag ","lexer_class new ","Lexer  find ","Lexer  guess ","opts [] ","Hash  [] ","vals [] ","vals empty? ","k to_sym ","CGI  parse map ","CGI  parse ","language split ","lexer tag ","code gsub! ","lexer_class tag == ","formatter format ","lexer lex ","lexer tag == ","Lexer  find_fancy "," rouge_formatter ","e alternatives first ","e alternatives ","lexer_class new _class tag ","Lexer  guess _class tag ","lexer_class new _class new ","Lexer  guess _class new ","Hash  []  [] ","lexer_class new  tag ","Lexer  guess  tag ","lexer_class new _class tag == ","Lexer  guess _class tag == ","Formatters HTML  new  format "," rouge_formatter  format ","lexer_class new  lex ","Lexer  guess  lex ","lexer_class new  tag == ","Lexer  guess  tag == "," rouge_Formatters HTML  new  "," rouge_ rouge_formatter  "]}," Rouge Lexers XML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Text stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":["stream string ","Token  [] "," token "]}," Rouge Lexers TCL gen_delimiter_states":{"type":"method","name":"gen_delimiter_states","children":[],"call":[]}," Rouge Lexers TCL gen_command_state":{"type":"method","name":"gen_command_state","children":[],"call":[]}," Rouge Lexers TCL analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Shell analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Python analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers JSON analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Javascript analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers HTML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Haskell analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Diff analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers CommonLisp stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":["Token  [] ","BUILTIN_CLASSES  include? ","BUILTIN_TYPES  include? ","DECLARATIONS  include? ","LAMBDA_LIST_KEYWORDS  include? ","MACROS  include? ","SPECIAL_FORMS  include? ","BUILTIN_FUNCTIONS  include? "]}," Rouge RegexLexer run_rule":{"type":"method","name":"run_rule","children":[],"call":["b call ","Token  [] ","res inspect ","tok to_s inspect ","tok to_s "," debug ","scan_state run_callback each ","scan_state run_callback ","rule callback ","match [] inspect ","match [] ","scan_state scan ","rule re ","rule inspect "," step "," get_state ","stack push ","lexer name "," get_lexer ","rule next_lexer ","stack pop ","rule next_lexer == ","tok name inspect ","tok name ","tok is_a? ","rule callback call ","rule consume "," get_lexer step "," run_callback each "," run_callback ","stream [] inspect ","stream [] "," scan ","scanner matched_size zero? ","scanner matched_size ","scanner scan ","(or-asgn\n  (ivasgn :@null_steps)\n  (int 0)) >= ","scanner beginning_of_line? ! ","scanner beginning_of_line? ","rule beginning_of_line? ","stream beginning_of_line? ! ","stream beginning_of_line? "," step  inspect ","Token  []  to_s inspect ","Token  []  to_s "," get_lexer  name "," get_ get_lexer  ","rule next_ get_lexer  ","rule next_ get_lexer  == ","Token  []  name inspect ","Token  []  name ","Token  []  is_a? "," get_ get_lexer  step "]}," Rouge RegexLexer step":{"type":"method","name":"step","children":[],"call":[" run_rule ","state rules each ","state rules "," rules each "," rules "," run_callback ","rule callback ","stream [] inspect ","stream [] "," debug ","rule inspect ","rule name "," step "," puts ","@null_steps > ","size zero? "," instance_exec ","stream skip ","rule re ","stream beginning_of_line? ! ","stream beginning_of_line? ","rule beginning_of_line ","rule is_a? ","stream skip  zero? "]}," Rouge RegexLexer stream_with_state":{"type":"method","name":"stream_with_state","children":[],"call":["b call ","scan_state scanner getch ","scan_state scanner ","Token  [] "," debug ","success ! "," step "," get_state ","scan_state state ","scan_state scanner peek inspect ","scan_state scanner peek ","scan_state stack map inspect ","scan_state stack map ","scan_state stack ","scan_state eos? "," step  ! "]}," Rouge RegexLexer stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":[" stream_with_state ","ScanState  new ","scan_state instance_eval "," class start_procs each "," class start_procs "," class ","b call "," scan_state scanner getch "," scan_state scanner "," scan_state ","Token  [] "," debug ","success ! "," step "," get_state "," scan_state state "," scan_state scanner peek inspect "," scan_state scanner peek "," scan_state stack map inspect "," scan_state stack map "," scan_state stack "," class tag "," scan_state eos? "," scan_state scanner= "," stream_with_stack ","stream dup ","stream getch "," state ","stream peek inspect ","stream peek "," stack map inspect "," stack map "," stack ","stream eos? ","(send\n  (const nil :Enumerator) :new) each "," instance_exec ","Enumerator  new ","t == "," class postprocesses find "," class postprocesses "," stream_without_postprocessing "," with_output_stream ","StringScanner  new ","t === "," puts "," class states "," stack map map inspect "," stack map map "," stream dup _with_state "," StringScanner  new _with_state ","ScanState  new  instance_eval "," ScanState  new  scanner getch "," ScanState  new  scanner "," ScanState  new  "," step  ! "," ScanState  new  state "," ScanState  new  scanner peek inspect "," ScanState  new  scanner peek "," ScanState  new  stack map inspect "," ScanState  new  stack map "," ScanState  new  stack "," ScanState  new  eos? "," ScanState  new  scanner= "," stream dup _with_stack "," StringScanner  new _with_stack ","stream dup  dup ","StringScanner  new  dup ","stream dup  getch ","StringScanner  new  getch ","stream dup  peek inspect ","StringScanner  new  peek inspect ","stream dup  peek ","StringScanner  new  peek ","stream dup  eos? ","StringScanner  new  eos? "," stream dup _without_postprocessing "," StringScanner  new _without_postprocessing "," with_output_stream dup  "," with_output_StringScanner  new  "]}," Rouge RegexLexer get_state":{"type":"method","name":"get_state","children":[],"call":[" class get_state "," class "]}," Rouge RegexLexer []":{"type":"method","name":"[]","children":[],"call":[]}," Rouge RegexLexer initialize":{"type":"method","name":"initialize","children":[],"call":["parent is_a? "]}," Rouge RegexLexer state":{"type":"method","name":"state","children":[],"call":[" raise "," stack last "," stack "]}," Rouge RegexLexer states":{"type":"method","name":"states","children":[],"call":[]}," Rouge RegexLexer StateDSL mixin":{"type":"method","name":"mixin","children":[],"call":[" rules << ","lexer_name to_s "," rules ","state to_s "]}," Rouge RegexLexer StateDSL rule":{"type":"method","name":"rule","children":[],"call":[" rules << ","Rule  new "," rules "," push "," pop! "," token ","ss [] "," proc ","Token  [] "," block_given? "," raise ","next_state inspect ","@output_stream call ","stream [] "," puts ","stream [] inspect ","tok qualname ","@stack push ","state name "," class get_state "," class ","@states [] ","@stack last ","@stack last name ","@stack pop ","callback nil? ","tok nil? "," close! "," context_sensitive? ! "," context_sensitive? ","InvalidRegex  new ","re =~ ","ClosedState  new "," Token  [] en ","Token  []  qualname ","Token  []  nil? "]}," Rouge RegexLexer StateDSL initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge RegexLexer ScanState scan":{"type":"method","name":"scan","children":[],"call":[" scanner matched_size == "," scanner matched_size "," scanner "," scanner matched? "," scanner scan "," debug ","@null_steps >= "," raise "," scanner peek ","@steps >= "]}," Rouge RegexLexer ScanState state":{"type":"method","name":"state","children":[],"call":[" stack last "," stack "," raise "," stack empty? "]}," Rouge RegexLexer ScanState delegate":{"type":"method","name":"delegate","children":[],"call":[" token ","val inspect ","tok inspect "," debug ","lexer lex "," scanner [] "," scanner ","lexer name ","lexer inspect "]}," Rouge RegexLexer ScanState group":{"type":"method","name":"group","children":[],"call":[" token "," scanner [] "," scanner "]}," Rouge RegexLexer ScanState token":{"type":"method","name":"token","children":[],"call":["@output_stream << "," scanner [] "," scanner ","Token  [] "," raise ","val == "," scanner []  == "]}," Rouge RegexLexer ScanState run_callback":{"type":"method","name":"run_callback","children":[],"call":[" instance_exec ","Enumerator  new "]}," Rouge RegexLexer ScanState state?":{"type":"method","name":"state?","children":[],"call":["state_name to_s == "," state name "," state ","state_name to_s "]}," Rouge RegexLexer ScanState in_state?":{"type":"method","name":"in_state?","children":[],"call":[" stack map include? ","state_name to_s "," stack map "," stack "]}," Rouge RegexLexer ScanState push":{"type":"method","name":"push","children":[],"call":[" stack push "," state relative_state "," state "," stack "," debug ","push_state name "," state  name "," state relative_state  name "]}," Rouge RegexLexer ScanState pop!":{"type":"method","name":"pop!","children":[],"call":[" stack pop "," stack "," debug "," raise "," stack empty? "]}," Rouge RegexLexer ScanState initialize":{"type":"method","name":"initialize","children":[],"call":["lexer get_state "]}," Rouge RegexLexer State load!":{"type":"method","name":"load!","children":[],"call":["StateDSL  new instance_eval ","StateDSL  new "," rules ","lexer_class get_state ","rule is_a? "," rules map! "]}," Rouge RegexLexer State rules":{"type":"method","name":"rules","children":[],"call":[]}," Rouge RegexLexer State relative_state":{"type":"method","name":"relative_state","children":[],"call":["@lexer_class get_state ","State  new load! ","State  new ","b inspect "]}," Rouge RegexLexer State initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge RegexLexer Rule consume":{"type":"method","name":"consume","children":[],"call":["stream matched? ","stream scan ","stream slice! ","$& size ","stream match ","stream stream match ed? ","stream stream match  "]}," Rouge RegexLexer Rule inspect":{"type":"method","name":"inspect","children":[],"call":["@re inspect ","@orig_re inspect "]}," Rouge RegexLexer Rule initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  new ","re source ","re source [] == ","re source [] "]}," Rouge Lexer analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexer stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":[" raise "]}," Rouge Lexer lex":{"type":"method","name":"lex","children":[],"call":["b call ","last_val << ","tok == ","val empty? "," stream_tokens ","StringScanner  new "," enum_for "," block_given? "," new lex "," new "," reset! ","opts [] ","Lexer  assert_utf8! "," continue_lex "," warn ","Improper use of Lexer#lex - this method does not receive options. + ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :continue))) size > ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :continue))) size ","opts keys - ","opts keys ","opts nil? "]}," Rouge Lexer get_tokens":{"type":"method","name":"get_tokens","children":[],"call":[" lex to_a "," lex "]}," Rouge Lexer debug":{"type":"method","name":"debug","children":[],"call":[" puts ","b call "," option "," debug "," instance_variable_defined? "," warn "]}," Rouge Lexer option":{"type":"method","name":"option","children":[],"call":[" options "," options [] ","v == ","k to_s "," option_docs []= ","name to_s "," option_docs "]}," Rouge Lexer options":{"type":"method","name":"options","children":[],"call":[" class default_options merge "," class default_options "," class ","(or-asgn\n  (ivasgn :@options)\n  (hash)) merge! ","(or-asgn\n  (ivasgn :@options)\n  (send nil :default_options)) merge! "," default_options "]}," Rouge Lexer initialize":{"type":"method","name":"initialize","children":[],"call":[" options "," option "," bool_option ","Lexer  debug_enabled? ","@options []= ","k to_s ","opts each "]}," Rouge Lexer registry":{"type":"method","name":"registry","children":[],"call":[]}," Rouge Lexer mimetypes":{"type":"method","name":"mimetypes","children":[],"call":["(or-asgn\n  (ivasgn :@mimetypes)\n  (array)) concat "]}," Rouge Lexer filenames":{"type":"method","name":"filenames","children":[],"call":["(or-asgn\n  (ivasgn :@filenames)\n  (array)) concat "]}," Rouge Lexer aliases":{"type":"method","name":"aliases","children":[],"call":["Lexer  register ","args each ","(or-asgn\n  (ivasgn :@aliases)\n  (array)) concat ","args map! "]}," Rouge Lexer tag":{"type":"method","name":"tag","children":[],"call":[" aliases ","t to_s ","t nil? ","Lexer  register "," class tag "," class "]}," Rouge Lexer register":{"type":"method","name":"register","children":[],"call":[" registry []= ","name to_s "," registry "]}," Rouge Lexer guess_by_source":{"type":"method","name":"guess_by_source","children":[],"call":["result > ","result == ","lexer analyze_text "," registry values each "," registry values "," registry ","TextAnalyzer  new "," assert_utf8! "," guess "]}," Rouge Lexer guess_by_filename":{"type":"method","name":"guess_by_filename","children":[],"call":["File  fnmatch? ","lexer filenames any? ","lexer filenames "," registry values detect "," registry values "," registry ","File  basename "," guess "]}," Rouge Lexer guess_by_mimetype":{"type":"method","name":"guess_by_mimetype","children":[],"call":["lexer mimetypes include? ","lexer mimetypes "," registry values detect "," registry values "," registry "," guess "]}," Rouge Lexer guess":{"type":"method","name":"guess","children":[],"call":[" guess_by_source ","info [] "," guess_by_filename "," guess_by_mimetype "," raise ","AmbiguousGuess  new ","lexers [] ","lexers size == ","lexers size ","lexers empty? "," guesses ","Guesser Ambiguous  new ","fallback call "," guess_ guess_by_source  "," guess_ guess_by_filename  "," guess_ guess_by_mimetype  "," guesses  [] "," guesses  size == "," guesses  size "," guesses  empty? "]}," Rouge Lexer find":{"type":"method","name":"find","children":[],"call":[" registry [] ","name to_s "," registry "]}," Rouge Lexer default_options":{"type":"method","name":"default_options","children":[],"call":["@default_options merge! "]}," Rouge Lexer new":{"type":"method","name":"new","children":[],"call":[" force_load! "]}," Rouge Lexer force_load!":{"type":"method","name":"force_load!","children":[],"call":[" instance_eval "]}," Rouge Lexer make":{"type":"method","name":"make","children":[],"call":["_sup default_options merge ","_sup default_options ","Class  new "]}," Rouge Formatters HTML stream":{"type":"method","name":"stream","children":[],"call":["tok shortname inspect ","tok shortname "," raise ","tok inspect ","CGI  escape_html ","tokens each ","@css_class inspect ","val gsub! "," stream_untableized "," stream_tableized "," span ","CGI  escape_html  gsub! "]}," Rouge Formatters HTML initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","opts fetch ","Theme  find new ","Theme  find ","@inline_theme is_a? ","@css_class inspect ","opts fetch  is_a? ","Theme  find new  is_a? ","opts fetch  inspect "]}," Rouge Formatter stream":{"type":"method","name":"stream","children":[],"call":[" raise "]}," Rouge Formatter render":{"type":"method","name":"render","children":[],"call":[" enum_for to_a join "," enum_for to_a "," enum_for "," format "," warn "]}," Rouge CLI normalize_hash_keys":{"type":"method","name":"normalize_hash_keys","children":[],"call":["out []= ","k tr to_sym ","k tr ","hash each "]}," Rouge CLI style":{"type":"method","name":"style","children":[],"call":[" puts ","theme new render ","theme new "," options "," raise ","Theme  find "," method ","Theme  find  new render ","Theme  find  new "]}," Rouge CLI highlight":{"type":"method","name":"highlight","children":[],"call":[" puts ","Rouge  highlight ","lexer_class new "," normalize_hash_keys "," options [] "," options ","Formatters HTML  new "," raise ","Lexer  find ","Lexer  guess "," options [] nil? ","$stdin read ","File  read ","formatter_class new ","Formatter  find ","formatter format "," method ","lexer lex ","lexer_class new _class new ","Lexer  find  new ","Lexer  guess  new ","Formatters HTML  new _class new ","formatter_class new _class new ","Formatter  find  new ","Formatters HTML  new  format ","formatter_class new  format ","lexer_class new  lex "]}," Rouge CLI start":{"type":"method","name":"start","children":[],"call":[]}," Rouge Lexers Ruby analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge RegexLexer start":{"type":"method","name":"start","children":[],"call":[]}," Rouge RegexLexer start_procs":{"type":"method","name":"start_procs","children":[],"call":[]}," Rouge Theme get_style":{"type":"method","name":"get_style","children":[],"call":[" styles [] "," styles ","anc name ","token ancestors "," style [] "," style "," get_own_style "," base_style "," class get_style "," class "]}," Rouge Theme render":{"type":"method","name":"render","children":[],"call":[]}," Rouge Lexers TeX analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers PHP stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":["Token  [] "," builtins include? "," builtins ","tok name == ","tok name "]}," Rouge Lexers PHP start_inline?":{"type":"method","name":"start_inline?","children":[],"call":["@start_inline ! ! ","@start_inline ! "]}," Rouge Lexers PHP builtins":{"type":"method","name":"builtins","children":[],"call":["builtins merge ","@disabledmodules include? "," class builtins each "," class builtins "," class "," require ","Pathname  new dirname join ","Pathname  new dirname ","Pathname  new ","Set  new tap ","Set  new "]}," Rouge Lexers PHP initialize":{"type":"method","name":"initialize","children":[],"call":["opts delete "," list_option "," bool_option "]}," Rouge Lexers Perl analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Make initialize":{"type":"method","name":"initialize","children":[],"call":["Shell  new "]}," Rouge Lexers Make analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers ERB initialize":{"type":"method","name":"initialize","children":[],"call":["Ruby  new ","lexer_class new ","Lexer  find ","@parent is_a? ","opts delete ","Lexer  find  new ","lexer_class new  is_a? "]}," Rouge Lexers ERB analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge RegexLexer reset!":{"type":"method","name":"reset!","children":[],"call":[" scan_state instance_eval "," scan_state "," class start_procs each "," class start_procs "," class "," instance_eval "," puts "," class start_procs any? "]}," Rouge RegexLexer scan_state":{"type":"method","name":"scan_state","children":[],"call":["ScanState  new "]}," Rouge Lexer reset!":{"type":"method","name":"reset!","children":[],"call":[]}," Rouge Formatters Terminal256 escape_sequence":{"type":"method","name":"escape_sequence","children":[],"call":["esc style delete ","esc style ","token name == ","token name ","EscapeSequence  new "," theme get_style "," theme ","@escape_sequences [] "," get_style ","token qualname "," escape? "," make_escape_sequence ","Unescape  new ","EscapeSequence  new  style delete ","EscapeSequence  new  style ","@EscapeSequence  new ape_sequences [] "," EscapeSequence  new ape? "," make_EscapeSequence  new ape_sequence ","UnEscapeSequence  new ape  new "]}," Rouge Formatters Terminal256 EscapeSequence closest_color":{"type":"method","name":"closest_color","children":[],"call":[]}," Rouge Formatters Terminal256 EscapeSequence get_rgb":{"type":"method","name":"get_rgb","children":[],"call":[]}," Rouge Formatters Terminal256 EscapeSequence color_index":{"type":"method","name":"color_index","children":[],"call":[]}," Rouge Formatters Terminal256 EscapeSequence escape":{"type":"method","name":"escape","children":[],"call":["attrs join ","attrs empty? "]}," Rouge Formatters Terminal256 EscapeSequence reset_string":{"type":"method","name":"reset_string","children":[],"call":[" escape ","attrs << "," style [] "," style "," bg "," fg "]}," Rouge Formatters Terminal256 EscapeSequence style_string":{"type":"method","name":"style_string","children":[],"call":[" escape ","attrs << "," style [] "," style "," bg to_s "," bg "," fg to_s "," fg "]}," Rouge Formatters Terminal256 EscapeSequence bg":{"type":"method","name":"bg","children":[],"call":[" class color_index "," style bg "," style "," class "," instance_variable_defined? "]}," Rouge Formatters Terminal256 EscapeSequence fg":{"type":"method","name":"fg","children":[],"call":[" class color_index "," style fg "," style "," class "," instance_variable_defined? "]}," Rouge Formatters Terminal256 EscapeSequence xterm_colors":{"type":"method","name":"xterm_colors","children":[],"call":[]}," Rouge Formatters Terminal256 EscapeSequence initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Formatters Terminal256 stream":{"type":"method","name":"stream","children":[],"call":["escape reset_string ","escape style_string "," escape_sequence ","tokens each ","val gsub "," escape_sequence stream_value "," escape_sequence  reset_string "," escape_sequence  style_string ","  escape_sequence _sequence ","  escape_sequence _sequence stream_value "]}," Rouge Formatters Terminal256 initialize":{"type":"method","name":"initialize","children":[],"call":["Theme  find ","@theme is_a? ","opts [] "," raise ","theme inspect ","Themes ThankfulEyes  new ","theme [] ","theme is_a? ","Theme  find  is_a? "]}," Rouge Formatter find":{"type":"method","name":"find","children":[],"call":[]}," Rouge Formatter tag":{"type":"method","name":"tag","children":[],"call":[]}," Rouge CSSTheme render_stanza":{"type":"method","name":"render_stanza","children":[],"call":["(or\n  (send\n    (lvar :style) :[]\n    (sym :rules))\n  (array)) each ","style [] ","style empty? "]}," Rouge CSSTheme stream_single":{"type":"method","name":"stream_single","children":[],"call":[" render_stanza "," css_selector "]}," Rouge CSSTheme stream":{"type":"method","name":"stream","children":[],"call":[" render_stanza "," class main_style "," class "," stream_single ","Token  [] "," class styles each "," class styles "," enum_for "," block_given? "]}," Rouge Theme main_style":{"type":"method","name":"main_style","children":[],"call":[]}," Rouge RegexLexer get_lexer":{"type":"method","name":"get_lexer","children":[],"call":[" lexer "]}," Rouge RegexLexer stream_with_stack":{"type":"method","name":"stream_with_stack","children":[],"call":["b call ","stream slice! ","Token  [] "," debug ","success ! ","stack last step ","stack last ","stream slice inspect ","stream slice ","stack map inspect ","stack map ","stream empty? ","stack last step  ! "]}," Rouge RegexLexer rule":{"type":"method","name":"rule","children":[],"call":[" rules << ","Rule  new "," get_lexer "," rules ","b call "," proc ","Token  [] ","token is_a? "," block_given? ","Token  []  is_a? "]}," Rouge RegexLexer rules":{"type":"method","name":"rules","children":[],"call":[" force_load! "]}," Rouge RegexLexer mixin":{"type":"method","name":"mixin","children":[],"call":[" rules << "," rules ","lexer force_load! "," get_lexer "," get_lexer  force_load! "," get_ get_lexer  "]}," Rouge RegexLexer lexer":{"type":"method","name":"lexer","children":[],"call":["@parent lexer ","@scope [] ","l instance_variable_set ","@scope []= ","RegexLexer  new "," options merge "," options "," block_given? ","name to_s ","@parent @scope []= exer ","@scope []=  instance_variab@scope []= e_set "," b@scope []= ock_given? ","name to_s  to_s "]}," Rouge Lexer name":{"type":"method","name":"name","children":[],"call":[" aliases ","n to_s ","n nil? "]}," Rouge Lexer create":{"type":"method","name":"create","children":[],"call":[" new send "," new "]}," Rouge Lexer extension_registry":{"type":"method","name":"extension_registry","children":[],"call":[]}," Rouge Lexer extensions":{"type":"method","name":"extensions","children":[],"call":["Lexer  extension_registry []= ","Lexer  extension_registry ","exts each "]}," Rouge Lexers TCLLexer gen_delimiter_states":{"type":"method","name":"gen_delimiter_states","children":[],"call":[]}," Rouge Lexers TCLLexer gen_command_state":{"type":"method","name":"gen_command_state","children":[],"call":[]}," Rouge RegexLexer state?":{"type":"method","name":"state?","children":[],"call":["state_name to_s == "," state name "," state ","state_name to_s ","state_name to_sym == ","state_name to_sym "]}," Rouge RegexLexer in_state?":{"type":"method","name":"in_state?","children":[],"call":[" stack map include? ","state_name to_s "," stack map "," stack ","state name == ","state name "," stack any? ","state_name to_sym ","state_name to_s  to_s ","state_name to_sym  to_s ","state_name to_s  to_sym ","state_name to_sym  to_sym "]}," Rouge RegexLexer pop!":{"type":"method","name":"pop!","children":[],"call":[" stack pop "," stack "," debug "," raise "," stack empty? ","times times "," puts "]}," Rouge RegexLexer push":{"type":"method","name":"push","children":[],"call":[" stack push "," stack ","push_state name "," debug "," state "," state relative_state ","State  new load! ","State  new ","b inspect "," block_given? "," get_state "," class ","StateDSL  new to_state ","StateDSL  new "," puts "," state  name "," state relative_state  name "," get_state  name "]}," Rouge RegexLexer delegate":{"type":"method","name":"delegate","children":[],"call":[" token ","val inspect ","tok inspect "," debug ","lexer lex ","@last_matches [] ","lexer inspect ","@last_match [] ","@current_stream [] "," yield_token "," puts ","lexer continue_lex "]}," Rouge RegexLexer group":{"type":"method","name":"group","children":[],"call":[" token ","@last_matches [] ","@last_match [] "," yield_token ","@current_stream [] "," raise "]}," Rouge RegexLexer token":{"type":"method","name":"token","children":[],"call":["@output_stream << ","Token  [] "," raise ","@last_matches [] ","val == ","val empty? ","@last_match [] "," yield_token ","@current_stream [] ","@last_matches []  == ","@last_match []  == ","@current_stream []  == ","@last_matches []  empty? ","@last_match []  empty? ","@current_stream []  empty? "]}," Rouge RegexLexer scan":{"type":"method","name":"scan","children":[],"call":["scanner matched_size == ","scanner matched_size ","scanner matched? ","scanner scan "," debug ","@null_steps >= ","scanner beginning_of_line? ! ","scanner beginning_of_line? ","re source [] == ","re source [] ","re source "]}," Rouge RegexLexer run_callback":{"type":"method","name":"run_callback","children":[],"call":[" instance_exec ","Enumerator  new "," with_output_stream "]}," Rouge RegexLexer stack":{"type":"method","name":"stack","children":[],"call":[" get_state "]}," Rouge InheritableList push":{"type":"method","name":"push","children":[],"call":[" own_entries << "," own_entries "]}," Rouge InheritableList own_entries":{"type":"method","name":"own_entries","children":[],"call":[]}," Rouge InheritableList each":{"type":"method","name":"each","children":[],"call":[" own_entries each "," own_entries "," parent each "," parent "," enum_for "," block_given? "]}," Rouge InheritableList parent":{"type":"method","name":"parent","children":[],"call":[]}," Rouge InheritableList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge InheritableHash keys":{"type":"method","name":"keys","children":[],"call":["keys uniq! "," own_keys concat "," parent keys "," parent "," own_keys "," own_keys concat  uniq! "," own_ own_keys concat  concat "," parent  own_keys concat  "," own_ own_keys concat  "]}," Rouge InheritableHash each":{"type":"method","name":"each","children":[],"call":["b call "," [] "," keys each "," keys "]}," Rouge InheritableHash include?":{"type":"method","name":"include?","children":[],"call":[" parent include? "," parent "]}," Rouge InheritableHash parent":{"type":"method","name":"parent","children":[],"call":[]}," Rouge InheritableHash []":{"type":"method","name":"[]","children":[],"call":[" parent [] "," parent "," own_keys include? "," own_keys "]}," Rouge InheritableHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge TemplateLexer parent":{"type":"method","name":"parent","children":[],"call":["lexer_class new "," options ","Lexer  find ","@parent is_a? "," option "," instance_variable_defined? ","Lexers HTML  new "," lexer_option ","Lexer  find  new ","lexer_class new  is_a? "]}," Rouge RegexLexer reset_stack":{"type":"method","name":"reset_stack","children":[],"call":[" stack push "," get_state "," stack "," stack clear "," debug "," puts "]}," Rouge RegexLexer stream_without_postprocessing":{"type":"method","name":"stream_without_postprocessing","children":[],"call":["b call ","stream getch ","Token  [] "," debug ","success ! "," step "," get_state "," state ","stream peek inspect ","stream peek "," stack map inspect "," stack map "," stack "," class tag "," class ","stream eos? "," step  ! "]}," Rouge RegexLexer postprocesses":{"type":"method","name":"postprocesses","children":[],"call":[]}," Rouge RegexLexer postprocess":{"type":"method","name":"postprocess","children":[],"call":[]}," Rouge Lexers YAML set_indent":{"type":"method","name":"set_indent","children":[],"call":["@last_match [] size ","@last_match [] ","opts [] ","@indent_stack << "," indent < "," indent ","match size "," puts "]}," Rouge Lexers YAML continue_indent":{"type":"method","name":"continue_indent","children":[],"call":["@last_match [] size ","@last_match [] "," debug ","match size "," puts "]}," Rouge Lexers YAML save_indent":{"type":"method","name":"save_indent","children":[],"call":["match [] "," indent "," debug ","@indent_stack pop "," dedent? ","match size ","@last_match [] "," puts ","@last_match []  [] ","@last_match []  size ","@last_@last_match []  [] "]}," Rouge Lexers YAML indent?":{"type":"method","name":"indent?","children":[],"call":["level > "," indent "]}," Rouge Lexers YAML dedent?":{"type":"method","name":"dedent?","children":[],"call":["level < "," indent "]}," Rouge Lexers YAML indent":{"type":"method","name":"indent","children":[],"call":["@indent_stack last "," raise ","@indent_stack empty? "]}," Rouge Lexers YAML reset_indent":{"type":"method","name":"reset_indent","children":[],"call":[" debug "," puts "]}," Rouge Lexers Markdown html":{"type":"method","name":"html","children":[],"call":["HTML  new "," options "]}," Rouge Lexers Haml indentation":{"type":"method","name":"indentation","children":[],"call":[" push ","indent_str != ","indent_str start_with? ","@block_indentation inspect "," debug ","indent_str inspect "]}," Rouge Lexers Haml starts_block":{"type":"method","name":"starts_block","children":[],"call":["@block_indentation inspect "," debug ","block_state inspect "]}," Rouge Lexers Haml filters":{"type":"method","name":"filters","children":[],"call":["ERB  new "," options "," ruby ","CSS  new ","Javascript  new ","Markdown  new "]}," Rouge Lexers Haml html":{"type":"method","name":"html","children":[],"call":["HTML  new "," options "]}," Rouge Lexers Haml ruby":{"type":"method","name":"ruby","children":[],"call":["Ruby  new "," options "]}," Rouge Lexers Haml initialize":{"type":"method","name":"initialize","children":[],"call":[" filters []= ","name to_s "," filters ","lexer new "," options "," raise ","Lexer  find ","lexer respond_to? ","(or\n  (send\n    (lvar :opts) :delete\n    (sym :filters))\n  (hash)) each ","opts delete ","PlainText  new "," as_lexer "," hash_option ","Sass  new ","Markdown  new ","ERB  new "," ruby ","CSS  new ","Javascript  new ","lexer new  new ","Lexer  find  new ","lexer new  respond_to? ","Lexer  find  respond_to? "," as_lexer new  "," as_Lexer  find  "]}," Rouge Lexers Haml analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Factor builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Factor analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Yielder <<":{"type":"method","name":"<<","children":[],"call":["@proc call "]}," Rouge Yielder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge RegexLexer with_output_stream":{"type":"method","name":"with_output_stream","children":[],"call":["output_stream call ","Token  [] ","val inspect ","tok to_s inspect ","tok to_s "," debug ","Yielder  new ","Enumerator Yielder  new ","tok qualname "]}," Rouge Lexers VimL find_likely_mapping":{"type":"method","name":"find_likely_mapping","children":[],"call":["mapping [] ","max - ","mid + ","word <=> ","(send\n  (lvar :max) :+\n  (lvar :min)) / ","max + ","max == ","mapping size ","mapping size  - ","(send\n  (lvar :max) :+\n  (lvar :min)) /  + ","(send\n  (lvar :max) :+\n  (lvar :mid + )) / ","(send\n  (lvar :mapping size ) :+\n  (lvar :min)) / ","mapping size  + ","mapping size  == "]}," Rouge Lexers VimL mapping_contains?":{"type":"method","name":"mapping_contains?","children":[],"call":["longest start_with? ","word start_with? "," find_likely_mapping "]}," Rouge Lexers VimL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers SQL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexer all":{"type":"method","name":"all","children":[],"call":[" registry values uniq "," registry values "," registry "]}," Rouge Lexer desc":{"type":"method","name":"desc","children":[],"call":["arg == "]}," Rouge CLI list":{"type":"method","name":"list","children":[],"call":[" puts ","%s: %s % ","lexer tag ","desc << ","lexer aliases join ","lexer aliases ","lexer aliases any? ","lexer desc ","Lexer  all each ","Lexer  all ","(send\n  (lvar :all_lexers) :map) max ","l tag size ","l tag ","all_lexers map ","(send\n  (lvar :Lexer  all ) :map) max ","Lexer  all  map "]}," Rouge Indentation indentation":{"type":"method","name":"indentation","children":[],"call":[" push ","indent_str != ","indent_str start_with? ","@block_indentation inspect "," debug ","indent_str inspect "," puts "]}," Rouge Indentation starts_block":{"type":"method","name":"starts_block","children":[],"call":["@block_indentation inspect "," debug ","block_state inspect "," puts "]}," Rouge Indentation reset!":{"type":"method","name":"reset!","children":[],"call":[]}," Rouge Theme get_own_style":{"type":"method","name":"get_own_style","children":[],"call":[" styles [] ","anc name "," styles ","token ancestors ","token token_chain each ","token token_chain ","token token_chain reverse_each ","Style  new "," class get_own_style "," class "]}," Rouge RegexLexer Rule beginning_of_line?":{"type":"method","name":"beginning_of_line?","children":[],"call":[" re source [] == "," re source [] "," re source "," re "," instance_variable_defined? "]}," Rouge Lexers YAML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Text token":{"type":"method","name":"token","children":[],"call":["Token  [] "," option "]}," Rouge Lexers Session until_prompt_regex":{"type":"method","name":"until_prompt_regex","children":[],"call":[" prompt_regex "]}," Rouge Lexers Session line_regex":{"type":"method","name":"line_regex","children":[],"call":[]}," Rouge Lexers Session stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":["scanner [] ","Token  [] ","scanner [] inspect "," until_prompt_regex inspect "," until_prompt_regex "," debug ","scanner scan "," parent lex "," parent "," line_regex "," prompt_regex ","scanner eos? ","StringScanner  new ","StringScanner  new  [] ","StringScanner  new  [] inspect ","StringScanner  new  scan ","StringScanner  new  eos? "]}," Rouge Lexers Session prompt_regex":{"type":"method","name":"prompt_regex","children":[],"call":["Regexp  new ","Regexp  === "," option tap "," option "]}," Rouge Lexers Sed replacement":{"type":"method","name":"replacement","children":[],"call":["Replacement  new "," options "]}," Rouge Lexers Sed regex":{"type":"method","name":"regex","children":[],"call":["Regex  new "," options "]}," Rouge Lexers Sed analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Scheme builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Scheme keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Rust builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Rust keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Rust analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers PHP keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ObjectiveC reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers ObjectiveC keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ObjectiveC keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers ObjectiveC decorators":{"type":"method","name":"decorators","children":[],"call":[]}," Rouge Lexers Javascript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Javascript constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Javascript reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Javascript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Javascript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers IO builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers IO constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers IO analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Groovy constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Groovy types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Groovy declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Groovy keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers CSS vendor_prefixes":{"type":"method","name":"vendor_prefixes","children":[],"call":[]}," Rouge Lexers CSS constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers CSS builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers CSS attributes":{"type":"method","name":"attributes","children":[],"call":[]}," Rouge Lexers Cpp reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Cpp keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Cpp keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Coffeescript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Coffeescript constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Coffeescript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Coffeescript analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Clojure name_token":{"type":"method","name":"name_token","children":[],"call":[" class builtins include? "," class builtins "," class "," class keywords include? "," class keywords "]}," Rouge Lexers Clojure builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Clojure keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers C reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers C keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers C keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexer assert_utf8!":{"type":"method","name":"assert_utf8!","children":[],"call":[" raise ","EncodingError  new ","(str \"Bad encoding: \") + ","str encoding names join ","str encoding names ","str encoding ","(str \"US-ASCII\") include? ","str encoding name ","encoding == ","(str \"Bad str encoding name : \") + ","(str \"Bad str encoding : \") + ","str str encoding name  names join ","str str encoding  names join ","str str encoding name  names ","str str encoding  names ","str str encoding name  ","str str encoding  ","str str encoding name  name ","str str encoding  name ","str encoding name  == ","str encoding  == "]}," Rouge Lexer demo":{"type":"method","name":"demo","children":[],"call":["File  read "," demo_file ","arg == "]}," Rouge Lexer demo_file":{"type":"method","name":"demo_file","children":[],"call":["Pathname  new dirname join "," tag ","Pathname  new dirname ","Pathname  new ","arg == ","File  join "," __dir__ "]}," Rouge Lexer find_fancy":{"type":"method","name":"find_fancy","children":[],"call":["lexer_class new "," find "," guess ","opts [] ","Hash  [] ","vals [] ","vals empty? ","k to_sym ","CGI  parse map ","CGI  parse ","str split ","additional_options merge ","k to_s ","vals size ","str != ","str include? ! ","str include? "," lookup_fancy "," find  new ","Hash  []  [] ","additional_options merge  [] "]}," Rouge Formatters Terminal256 text_style":{"type":"method","name":"text_style","children":[],"call":["style delete "," theme get_style ","Token  [] "," theme "," theme get_style  delete "," theme get_ theme get_style  "]}," Rouge Formatters Terminal256 get_style":{"type":"method","name":"get_style","children":[],"call":[" text_style "," theme get_own_style "," theme ","token name == ","token name ","token == ","token ancestors include? ","token ancestors "]}," Rouge Formatters HTML span":{"type":"method","name":"span","children":[],"call":["tok shortname inspect ","tok shortname "," raise ","val inspect ","tok inspect ","CGI  escape_html ","rules to_a join inspect ","rules to_a join ","rules to_a ","@inline_theme style_for rendered_rules ","@inline_theme style_for ","shortname empty? ","val gsub "," safe_span "," escape_special_html_chars "," escape? ","tok tok shortname  inspect ","tok tok shortname  ","CGI  escape_html  inspect ","val gsub  inspect ","@inline_theme style_for rendered_rules  to_a join inspect ","@inline_theme style_for rendered_rules  to_a join ","@inline_theme style_for rendered_rules  to_a ","@inline_theme style_for rendered_@inline_theme style_for rendered_rules  ","tok shortname  empty? ","CGI  escape_html  gsub ","val gsub  gsub "]}," Rouge Formatters HTML stream_tableized":{"type":"method","name":"stream_tableized","children":[],"call":["@css_class inspect ","(send\n  (send\n    (lvar :num_lines) :times) :map) join ","x + ","num_lines times map ","num_lines times ","code [] != ","code [] ","code << "," span ","val scan size ","val scan ","tokens each ","formatted << ","last_val [] != ","last_val [] ","(irange\n  (ivar :@start_line)\n  (send\n    (send\n      (lvar :num_lines) :+\n      (ivar :@start_line)) :-\n    (int 1))) to_a join ","(irange\n  (ivar :@start_line)\n  (send\n    (send\n      (lvar :num_lines) :+\n      (ivar :@start_line)) :-\n    (int 1))) to_a ","num_lines + - ","num_lines + "]}," Rouge Formatters HTML stream_untableized":{"type":"method","name":"stream_untableized","children":[],"call":[" span ","tokens each ","@css_class inspect "]}," Rouge Formatter format":{"type":"method","name":"format","children":[],"call":["out << "," stream "," block_given? "," enum_for to_a join "," enum_for to_a "," enum_for ","String  new ","Formatter  escape_enabled? ","String  new  << "]}," Rouge Lexers Rust macro_closed?":{"type":"method","name":"macro_closed?","children":[],"call":["@macro_delims values all? ","@macro_delims values "]}," Rouge Lexers TOML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Puppet metaparameters":{"type":"method","name":"metaparameters","children":[],"call":[]}," Rouge Lexers Puppet constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Puppet keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Puppet analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers LiterateHaskell haskell":{"type":"method","name":"haskell","children":[],"call":["Haskell  new "," options "]}," Rouge Lexers LiterateCoffeescript coffee":{"type":"method","name":"coffee","children":[],"call":["Coffeescript  new "," options "]}," Rouge Lexers LiterateCoffeescript markdown":{"type":"method","name":"markdown","children":[],"call":["Markdown  new "," options "]}," Rouge Lexers INI analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Lua builtins":{"type":"method","name":"builtins","children":[],"call":["builtins merge ","@disabled_modules include? "," class builtins each "," class builtins "," class ","Set  new tap ","Set  new "]}," Rouge Lexers Lua analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Lua initialize":{"type":"method","name":"initialize","children":[],"call":["opts delete "]}," Rouge Lexers Prolog analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers LLVM analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Gherkin step_regex":{"type":"method","name":"step_regex","children":[],"call":[]}," Rouge Lexers Gherkin keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Gherkin analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexer best_by_source":{"type":"method","name":"best_by_source","children":[],"call":["result > ","result == ","lexer analyze_text "," registry values each "," registry values "," registry ","TextAnalyzer  new "," assert_utf8! ","lexers each "," raise ","source read ","s respond_to? "," lambda ","TextAnalyzer  new  read "]}," Rouge Lexer filter_by_filename":{"type":"method","name":"filter_by_filename","children":[],"call":["out << ","score == ","score < ","best_seen nil? ","(send\n  (send\n    (lvar :lexer) :filenames) :map) compact min ","(send\n  (send\n    (lvar :lexer) :filenames) :map) compact ","pattern scan size ","pattern scan ","File  fnmatch? ","lexer filenames map ","lexer filenames ","lexers each ","File  basename ","out any? ","(send\n  (send\n    (lvar :lexer) :filenames) :map) compact min  == ","(send\n  (send\n    (lvar :lexer) :filenames) :map) compact min  < "]}," Rouge Lexer filter_by_mimetype":{"type":"method","name":"filter_by_mimetype","children":[],"call":["lexer mimetypes include? ","lexer mimetypes ","lexers select ","filtered any? "]}," Rouge Lexer AmbiguousGuess message":{"type":"method","name":"message","children":[],"call":[" alternatives map inspect "," alternatives map "," alternatives "]}," Rouge Lexer AmbiguousGuess initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexer guesses":{"type":"method","name":"guesses","children":[],"call":["(send nil :best_by_source\n  (lvar :lexers)\n  (lvar :source)\n  (lvar :source_threshold)) compact "," best_by_source ","lexers size < ","lexers size ","lexers size == "," filter_by_filename "," filter_by_mimetype "," registry values uniq "," registry values "," registry ","info values_at ","Guesser  guess ","Lexer  all ","guessers << ","Guessers Source  new ","Guessers Modeline  new ","Guessers Filename  new ","Guessers GlobMapping  by_pairs ","Guessers Mimetype  new ","(or\n  (send\n    (lvar :info) :[]\n    (sym :guessers))\n  (array)) dup ","info [] ","Guessers Disambiguation  new ","(send nil :best_by_source\n  (lvar : filter_by_filename )\n  (lvar :source)\n  (lvar :source_threshold)) compact ","(send nil :best_by_source\n  (lvar : filter_by_mimetype )\n  (lvar :source)\n  (lvar :source_threshold)) compact ","(send nil :best_by_source\n  (lvar : registry values uniq )\n  (lvar :source)\n  (lvar :source_threshold)) compact "," filter_by_filename  size < "," filter_by_mimetype  size < "," registry values uniq  size < "," filter_by_filename  size "," filter_by_mimetype  size "," registry values uniq  size "," filter_by_filename  size == "," filter_by_mimetype  size == "," registry values uniq  size == ","(or\n  (send\n    (lvar :info) :[]\n    (sym :guessers))\n  (array)) dup  << ","(or\n  (send\n    (lvar :info) :[]\n    (sym :(or\n  (send\n    (lvar :info) :[]\n    (sym :guessers))\n  (array)) dup ))\n  (array)) dup "]}," Rouge Lexers Racket builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Racket keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Racket analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers R analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers R keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers HTTP methods":{"type":"method","name":"methods","children":[],"call":[]}," Rouge Lexers Go analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Erlang analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge CSSTheme style_for":{"type":"method","name":"style_for","children":[],"call":["Style  new "," style_for ","tok parent "," styles fetch ","tok name "," styles "," class get_style "," class "]}," Rouge Theme Style rendered_rules":{"type":"method","name":"rendered_rules","children":[],"call":["(or\n  (send\n    (self) :[]\n    (sym :rules))\n  (array)) each "," [] "," bg "," fg "," enum_for "]}," Rouge Token Tokens token":{"type":"method","name":"token","children":[],"call":[]}," Rouge Token make_token":{"type":"method","name":"make_token","children":[],"call":[" class_eval "," register! ","Class  new "]}," Rouge Token register!":{"type":"method","name":"register!","children":[],"call":[" parent sub_tokens []= "," name "," parent sub_tokens "," parent ","Token  cache []= "," qualname ","Token  cache "]}," Rouge Token qualname":{"type":"method","name":"qualname","children":[],"call":[" token_chain map join "," token_chain map "," token_chain "]}," Rouge Token token_chain":{"type":"method","name":"token_chain","children":[],"call":["(send\n  (send nil :ancestors) :take_while) reverse ","x != "," ancestors take_while "," ancestors "]}," Rouge Token matches?":{"type":"method","name":"matches?","children":[],"call":["other token_chain include? ","other token_chain "]}," Rouge Token cache":{"type":"method","name":"cache","children":[],"call":[]}," Rouge Token shortname":{"type":"method","name":"shortname","children":[],"call":[]}," Rouge Token parent":{"type":"method","name":"parent","children":[],"call":[]}," Rouge Token name":{"type":"method","name":"name","children":[],"call":[]}," Rouge RegexLexer yield_token":{"type":"method","name":"yield_token","children":[],"call":["@output_stream yield ","val empty? ","val nil? "," puts ","val inspect ","tok qualname "]}," Rouge RegexLexer goto":{"type":"method","name":"goto","children":[],"call":[" stack []= "," get_state "," stack "," raise "," stack empty? "," puts "]}," Rouge RegexLexer groups":{"type":"method","name":"groups","children":[],"call":[" yield_token ","@current_stream [] ","i + ","tokens each_with_index "]}," Rouge Lexers SassCommon included":{"type":"method","name":"included","children":[],"call":[]}," Rouge Lexers PlainText stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":[" token "]}," Rouge Lexers PlainText token":{"type":"method","name":"token","children":[],"call":["Token  [] "," option "]}," Rouge RegexLexer recurse":{"type":"method","name":"recurse","children":[],"call":[" delegate "," class "]}," Rouge RegexLexer append":{"type":"method","name":"append","children":[],"call":[]}," Rouge RegexLexer prepend":{"type":"method","name":"prepend","children":[],"call":[]}," Rouge RegexLexer replace_state":{"type":"method","name":"replace_state","children":[],"call":[]}," Rouge RegexLexer state_definitions":{"type":"method","name":"state_definitions","children":[],"call":[]}," Rouge RegexLexer StateDSL load!":{"type":"method","name":"load!","children":[],"call":[" instance_eval "]}," Rouge RegexLexer StateDSL appended":{"type":"method","name":"appended","children":[],"call":[" instance_eval ","StateDSL  new "]}," Rouge RegexLexer StateDSL prepended":{"type":"method","name":"prepended","children":[],"call":[" instance_eval ","StateDSL  new "]}," Rouge RegexLexer StateDSL to_state":{"type":"method","name":"to_state","children":[],"call":["State  new ","lexer_class get_state ","rule is_a? ","@rules map "," load! "]}," Rouge RegexLexer State inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," class name "," class "]}," Rouge Lexers ObjectiveC analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers ObjectiveC builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers ObjectiveC at_builtins":{"type":"method","name":"at_builtins","children":[],"call":[]}," Rouge Lexers ObjectiveC at_keywords":{"type":"method","name":"at_keywords","children":[],"call":[]}," Rouge Lexers C builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers C analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers HTTP content_lexer":{"type":"method","name":"content_lexer","children":[],"call":["Lexer  guess_by_mimetype "," guess_content_lexer "," lexer_option "]}," Rouge CLI normalize_syntax":{"type":"method","name":"normalize_syntax","children":[],"call":[]}," Rouge CLI List run":{"type":"method","name":"run","children":[],"call":[" puts ","%s: %s % ","lexer tag ","desc << ","lexer aliases join ","lexer aliases ","lexer aliases any? ","lexer desc ","Lexer  all each ","Lexer  all ","Lexer  all sort_by each ","Lexer  all sort_by ","lexer option_docs [] ","lexer option_docs ","lexer option_docs keys sort each ","lexer option_docs keys sort ","lexer option_docs keys ","String  new ","String  new  << ","lexer String  new  "]}," Rouge CLI List parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI List doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge CLI List desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge CLI Style run":{"type":"method","name":"run","children":[],"call":["@theme render "," method "]}," Rouge CLI Style initialize":{"type":"method","name":"initialize","children":[],"call":["theme_class new "," error! "," theme_name ","Theme  find ","opts delete ","TexThemeRenderer  new ","opts [] ","Theme  find  new "," opts delete  "]}," Rouge CLI Style parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Style doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge CLI Style desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge CLI Highlight parse_cgi":{"type":"method","name":"parse_cgi","children":[],"call":[]}," Rouge CLI Highlight run":{"type":"method","name":"run","children":[],"call":[" print "," formatter format "," lexer lex "," input "," lexer "," formatter "," method ","Formatter  enable_escape! "]}," Rouge CLI Highlight initialize":{"type":"method","name":"initialize","children":[],"call":["formatter_class new ","opts [] "," error! ","Formatter  find ","opts [] inspect ","Lexer  find ","Formatters HTMLTable  new ","Formatters HTML  new ","Formatters HTMLInline  new ","Formatters HTMLPygments  new ","Formatters Terminal256  new ","Theme  find new ","Theme  find "," require ","opts [] each ","Rouge Lexer  enable_debug! ","Formatters Null  new ","Formatters Tex  new ","Formatters HTMLLineTable  new ","Formatters TerminalTruecolor  new ","Formatter  find  new "]}," Rouge CLI Highlight lexer":{"type":"method","name":"lexer","children":[],"call":[" lexer_class new "," lexer_class "," raw_lexer "," escape_lexer "]}," Rouge CLI Highlight lexer_class":{"type":"method","name":"lexer_class","children":[],"call":["Lexer  guess "," input_stream "]}," Rouge CLI Highlight input":{"type":"method","name":"input","children":[],"call":[" input_stream read "," input_stream "]}," Rouge CLI Highlight input_stream":{"type":"method","name":"input_stream","children":[],"call":["FileReader  new "]}," Rouge CLI Highlight parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Highlight doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge CLI Highlight desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge CLI Help run":{"type":"method","name":"run","children":[],"call":["@mode doc each "," method ","@mode doc "]}," Rouge CLI Help initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Rouge CLI Help parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Help doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge CLI Help desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge CLI class_from_arg":{"type":"method","name":"class_from_arg","children":[],"call":[]}," Rouge CLI error!":{"type":"method","name":"error!","children":[],"call":[" raise ","Error  new "," class error! "," class "]}," Rouge CLI initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge CLI parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge CLI doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge FileReader read":{"type":"method","name":"read","children":[],"call":[" file close "," file "," exit ","$stderr puts ","e message "," input "," file read ","File  read "]}," Rouge FileReader file":{"type":"method","name":"file","children":[],"call":[" input ","i respond_to? "," lambda ","File  new ","IO  new ","$stdin fileno "]}," Rouge FileReader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers SML token_for_id":{"type":"method","name":"token_for_id","children":[],"call":[" class symbolic_reserved include? "," class symbolic_reserved "," class "," class keywords include? "," class keywords "]}," Rouge Lexers SML token_for_final_id":{"type":"method","name":"token_for_final_id","children":[],"call":[" class symbolic_reserved include? "," class symbolic_reserved "," class "," class keywords include? "," class keywords "]}," Rouge Lexers SML token_for_id_with_dot":{"type":"method","name":"token_for_id_with_dot","children":[],"call":[" class keywords include? "," class keywords "," class "]}," Rouge Lexers SML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers SML keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Moonscript builtins":{"type":"method","name":"builtins","children":[],"call":["builtins merge ","@disabled_modules include? ","Rouge Lexers Lua  builtins each ","Rouge Lexers Lua  builtins ","Set  new tap ","Set  new "]}," Rouge Lexers Moonscript analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Moonscript initialize":{"type":"method","name":"initialize","children":[],"call":["opts delete "," list_option "," bool_option "]}," Rouge Lexer load_const":{"type":"method","name":"load_const","children":[],"call":[" load ","root join ","Pathname  new dirname join ","Pathname  new dirname ","Pathname  new ","Lexers  const_defined? ","Pathname  new dirname join  join "]}," Rouge CSSTheme render_base":{"type":"method","name":"render_base","children":[],"call":[" class base_style render "," class base_style "," class "]}," Rouge Theme base_style":{"type":"method","name":"base_style","children":[],"call":[" styles [] "," styles "," get_own_style "]}," Rouge Plugins Redcarpet rouge_formatter":{"type":"method","name":"rouge_formatter","children":[],"call":["Formatters HTML  new ","lexer tag ","Formatters HTMLLegacy  new "]}," Rouge Lexers VisualBasic builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers VisualBasic operator_words":{"type":"method","name":"operator_words","children":[],"call":[]}," Rouge Lexers VisualBasic keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers VisualBasic keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Tulip analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers SML symbolic_reserved":{"type":"method","name":"symbolic_reserved","children":[],"call":[]}," Rouge Lexers Slim filters":{"type":"method","name":"filters","children":[],"call":["Sass  new "," options ","Scss  new ","Markdown  new ","Coffeescript  new ","CSS  new ","Javascript  new ","ERB  new "," ruby "]}," Rouge Lexers Slim html":{"type":"method","name":"html","children":[],"call":["HTML  new "," options "]}," Rouge Lexers Slim ruby":{"type":"method","name":"ruby","children":[],"call":["Ruby  new "," options "]}," Rouge Lexers Python exceptions":{"type":"method","name":"exceptions","children":[],"call":[]}," Rouge Lexers Python builtins_pseudo":{"type":"method","name":"builtins_pseudo","children":[],"call":[]}," Rouge Lexers Python builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Python keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Properties analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Praat analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers PHP analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers OCaml primitives":{"type":"method","name":"primitives","children":[],"call":[]}," Rouge Lexers OCaml word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers OCaml keyopts":{"type":"method","name":"keyopts","children":[],"call":[]}," Rouge Lexers OCaml keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Nim underscorize":{"type":"method","name":"underscorize","children":[],"call":[]}," Rouge Lexers Matlab builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Matlab keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Matlab analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Glsl builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Glsl reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Glsl keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Glsl keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers AppleScript studio_properties":{"type":"method","name":"studio_properties","children":[],"call":[]}," Rouge Lexers AppleScript studio_commands":{"type":"method","name":"studio_commands","children":[],"call":[]}," Rouge Lexers AppleScript studio_events":{"type":"method","name":"studio_events","children":[],"call":[]}," Rouge Lexers AppleScript studio_classes":{"type":"method","name":"studio_classes","children":[],"call":[]}," Rouge Lexers AppleScript reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers AppleScript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers AppleScript controls":{"type":"method","name":"controls","children":[],"call":[]}," Rouge Lexers AppleScript operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers AppleScript references":{"type":"method","name":"references","children":[],"call":[]}," Rouge Lexers AppleScript commands":{"type":"method","name":"commands","children":[],"call":[]}," Rouge Lexers AppleScript handler_params":{"type":"method","name":"handler_params","children":[],"call":[]}," Rouge Lexers AppleScript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers AppleScript classes":{"type":"method","name":"classes","children":[],"call":[]}," Rouge Lexers AppleScript literals":{"type":"method","name":"literals","children":[],"call":[]}," Rouge Lexers Apache name_for_token":{"type":"method","name":"name_for_token","children":[],"call":[" class keywords [] include? "," class keywords [] "," class keywords "," class "," class values include? "," class values "," class directives include? "," class directives "," class sections include? "," class sections "]}," Rouge Lexers load_lexer":{"type":"method","name":"load_lexer","children":[],"call":[]}," Rouge Lexer title":{"type":"method","name":"title","children":[],"call":[" tag capitalize "," tag ","t nil? ","  tag capitalize ag capi tag capitalize alize ","  tag capitalize ag "," tag capitalize  nil? "]}," Rouge Formatters Null stream":{"type":"method","name":"stream","children":[],"call":["val inspect ","tokens each ","tokens to_a ","tok qualname "]}," Rouge Formatters Null initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Formatters HTMLLinewise next_line_class":{"type":"method","name":"next_line_class","children":[],"call":[" sprintf inspect "," sprintf "]}," Rouge Formatters HTMLLinewise stream":{"type":"method","name":"stream","children":[],"call":["@formatter span "," next_line_class ","s == ","val scan ","tokens each ","line each "," token_lines ","@formatter stream "," sprintf "," token_lines with_index "]}," Rouge Formatters HTMLLinewise initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," Rouge Formatters HTMLInline safe_span":{"type":"method","name":"safe_span","children":[],"call":["rules to_a join ","rules to_a ","@inline_theme style_for rendered_rules ","@inline_theme style_for ","tok == ","@theme style_for rendered_rules ","@theme style_for ","@inline_theme style_for rendered_rules  to_a join ","@theme style_for rendered_rules  to_a join ","@inline_theme style_for rendered_rules  to_a ","@theme style_for rendered_rules  to_a ","@inline_theme style_for rendered_@inline_theme style_for rendered_rules  ","@inline_theme style_for rendered_@theme style_for rendered_rules  ","@theme style_for rendered_@inline_theme style_for rendered_rules  ","@theme style_for rendered_@theme style_for rendered_rules  "]}," Rouge Formatters HTMLInline initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","theme inspect ","Rouge Theme  find new ","Rouge Theme  find ","theme is_a? ","theme new ","theme < "]}," Rouge CLI Version run":{"type":"method","name":"run","children":[],"call":[" puts ","Rouge  version "]}," Rouge CLI Version parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Version desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge Lexers Verilog keywords_system_task":{"type":"method","name":"keywords_system_task","children":[],"call":[]}," Rouge Lexers Verilog keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Verilog keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Typescript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Typescript reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Typescript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Typescript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Twig word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers Twig pseudo_keywords":{"type":"method","name":"pseudo_keywords","children":[],"call":[]}," Rouge Lexers Twig tests":{"type":"method","name":"tests","children":[],"call":[]}," Rouge Lexers Twig keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Tap analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Smarty builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Smarty analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Nasm builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Nasm analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Nasm reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Nasm keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Nasm keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Julia analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Jsonnet builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Jsonnet constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Jsonnet declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Jsonnet keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Jinja word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers Jinja pseudo_keywords":{"type":"method","name":"pseudo_keywords","children":[],"call":[]}," Rouge Lexers Jinja tests":{"type":"method","name":"tests","children":[],"call":[]}," Rouge Lexers Jinja keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Gradle types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Gradle keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Fortran intrinsics":{"type":"method","name":"intrinsics","children":[],"call":[]}," Rouge Lexers Fortran types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Fortran keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Coq classify":{"type":"method","name":"classify","children":[],"call":[]}," Rouge Lexers Coq end_sentence":{"type":"method","name":"end_sentence","children":[],"call":[]}," Rouge Lexers Coq keyopts":{"type":"method","name":"keyopts","children":[],"call":[]}," Rouge Lexers Coq terminators":{"type":"method","name":"terminators","children":[],"call":[]}," Rouge Lexers Coq tacticals":{"type":"method","name":"tacticals","children":[],"call":[]}," Rouge Lexers Coq ltac":{"type":"method","name":"ltac","children":[],"call":[]}," Rouge Lexers Coq coq":{"type":"method","name":"coq","children":[],"call":[]}," Rouge Lexers Coq gallina":{"type":"method","name":"gallina","children":[],"call":[]}," Rouge Lexers Coq analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers BIML analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers APIBlueprint analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Actionscript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Actionscript constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Actionscript reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Actionscript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Actionscript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Formatters HTMLWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Themes Gruvbox make_light!":{"type":"method","name":"make_light!","children":[],"call":[]}," Rouge Themes Gruvbox make_dark!":{"type":"method","name":"make_dark!","children":[],"call":[]}," Rouge Themes Gruvbox dark!":{"type":"method","name":"dark!","children":[],"call":[]}," Rouge Themes Gruvbox light!":{"type":"method","name":"light!","children":[],"call":[]}," Rouge Lexers HTTP http_methods":{"type":"method","name":"http_methods","children":[],"call":[]}," Rouge Lexers Cfscript types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Cfscript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Cfscript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Guessers Source filter":{"type":"method","name":"filter","children":[],"call":["lexer analyze_text ","lexer methods include? ","lexer methods "," collect_best ","TextAnalyzer  new ","Lexer  assert_utf8! "," raise ","@source read ","s respond_to? "," lambda ","lexers size < ","lexers size ","lexers size == ","lexer detect? "," get_source ","lexer detectable? "]}," Rouge Guessers Source initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Guessers Modeline filter":{"type":"method","name":"filter","children":[],"call":["(send\n  (send\n    (const nil :Set) :new\n    (send\n      (array\n        (send\n          (lvar :l) :tag)) :+\n      (send\n        (lvar :l) :aliases))) :&\n  (lvar :match_set)) any? ","Set  new & ","Set  new ","(send\n  (lvar :l) :tag) + ","l aliases ","l tag ","lexers select ","m [] ","matches map ","(send\n  (const nil :MODELINES) :map) compact ","re match ","MODELINES  map ","(send\n  (send\n    (lvar :lines) :first\n    (ivar :@lines)) :+\n  (send\n    (lvar :lines) :last\n    (ivar :@lines))) join ","lines first + ","lines last ","lines first ","source_text split ","source_text read ","source_text respond_to? ","lexers size == ","lexers size ","match_set include? ","l aliases any? ","matches any? "," get_source ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (array\n        (send\n          (lvar :l) :tag)) :+\n      (send\n        (lvar :l) :aliases))) :&\n  (lvar :Set  new )) any? ","(send\n  (const nil :MODELINES) :map) compact  map ","(send\n  (send\n    (lvar :source_text split ) :first\n    (ivar :@source_text split )) :+\n  (send\n    (lvar :source_text split ) :last\n    (ivar :@source_text split ))) join ","source_text split  first + ","source_text split  last ","source_text split  first ","source_text read  split "," get_source  split ","source_text read  read "," get_source  read ","source_text read  respond_to? "," get_source  respond_to? ","Set  new  include? ","(send\n  (const nil :MODELINES) :map) compact  any? "]}," Rouge Guessers Modeline initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Rouge Guessers Mimetype filter":{"type":"method","name":"filter","children":[],"call":["lexer mimetypes include? ","lexer mimetypes ","lexers select "]}," Rouge Guessers Mimetype initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Guessers GlobMapping test_pattern":{"type":"method","name":"test_pattern","children":[],"call":["File  fnmatch? ","File FNM_DOTMATCH  | "]}," Rouge Guessers GlobMapping filter":{"type":"method","name":"filter","children":[],"call":["(send\n  (begin\n    (or\n      (send\n        (ivar :@glob_map) :[]\n        (send\n          (lvar :lexer) :name))\n      (array))) :map) compact min ","(send\n  (begin\n    (or\n      (send\n        (ivar :@glob_map) :[]\n        (send\n          (lvar :lexer) :name))\n      (array))) :map) compact ","pattern scan size -@ ","pattern scan size ","pattern scan "," test_pattern ","(or\n  (send\n    (ivar :@glob_map) :[]\n    (send\n      (lvar :lexer) :name))\n  (array)) map ","@glob_map [] ","lexer name "," collect_best ","File  basename "," filename "," test_glob ","File  File  basename  "]}," Rouge Guessers GlobMapping initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Guessers GlobMapping by_pairs":{"type":"method","name":"by_pairs","children":[],"call":[]}," Rouge Guessers Filename filter":{"type":"method","name":"filter","children":[],"call":["GlobMapping  new filter ","GlobMapping  new ","mapping []= ","lexer filenames ","lexer name ","lexers each "]}," Rouge Guessers Filename initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Guesser filter":{"type":"method","name":"filter","children":[],"call":[" raise "]}," Rouge Guesser collect_best":{"type":"method","name":"collect_best","children":[],"call":["best << ","score == ","score > ","best_score nil? ","score nil? ","scorer call ","lexers each ","opts [] ","scorer call  == ","scorer call  > ","best_scorer call  nil? ","opts []  nil? ","scorer call  nil? ","scorer call r call "]}," Rouge Guesser guess":{"type":"method","name":"guess","children":[],"call":[]}," Rouge Lexers load_const":{"type":"method","name":"load_const","children":[],"call":[]}," Rouge Themes Monokai make_sublime!":{"type":"method","name":"make_sublime!","children":[],"call":[]}," Rouge Themes Monokai sublime!":{"type":"method","name":"sublime!","children":[],"call":[]}," Rouge Lexers Swift constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Swift types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Swift declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Swift keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Slim analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Swift at_keywords":{"type":"method","name":"at_keywords","children":[],"call":[]}," Rouge Formatters HTMLTable stream":{"type":"method","name":"stream","children":[],"call":["(send\n  (begin\n    (irange\n      (ivar :@start_line)\n      (send\n        (send\n          (lvar :num_lines) :+\n          (ivar :@start_line)) :-\n        (int 1)))) :map) join "," sprintf << "," sprintf ","(irange\n  (ivar :@start_line)\n  (send\n    (send\n      (lvar :num_lines) :+\n      (ivar :@start_line)) :-\n    (int 1))) map ","num_lines + - ","num_lines + ","formatted << ","@inner span ","last_val [] != ","last_val [] ","val scan size ","val scan ","tokens each ","buffer join ","buffer << ","(send\n  (begin\n    (irange\n      (ivar :@start_line)\n      (begin\n        (send\n          (send\n            (ivar :@start_line) :+\n            (lvar :num_lines)) :-\n          (int 1))))) :map) join << ","(send\n  (begin\n    (irange\n      (ivar :@start_line)\n      (begin\n        (send\n          (send\n            (ivar :@start_line) :+\n            (lvar :num_lines)) :-\n          (int 1))))) :map) join ","(irange\n  (ivar :@start_line)\n  (begin\n    (send\n      (send\n        (ivar :@start_line) :+\n        (lvar :num_lines)) :-\n      (int 1)))) map ","@start_line + - ","@start_line + ","last_val end_with? ","@inner format ","count + ","(lvasgn :last_val\n  (lvar :val)) count ","tokens reduce ","String  new ","@inner format  << ","String  new  << "]}," Rouge Formatters HTMLTable style":{"type":"method","name":"style","children":[],"call":[]}," Rouge Formatters HTMLTable initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," Rouge Formatters HTMLPygments stream":{"type":"method","name":"stream","children":[],"call":["@inner stream "]}," Rouge Formatters HTMLPygments initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Formatters HTMLLegacy stream":{"type":"method","name":"stream","children":[],"call":["@formatter stream "]}," Rouge Formatters HTMLLegacy initialize":{"type":"method","name":"initialize","children":[],"call":["HTMLPygments  new ","opts fetch ","HTMLTable  new ","opts [] ","HTML  new ","HTMLInline  new "]}," Rouge Formatters HTML safe_span":{"type":"method","name":"safe_span","children":[],"call":[" raise ","safe_val inspect ","tok inspect ","tok shortname ","tok == ","tok tok shortname  "]}," Rouge Formatter token_lines":{"type":"method","name":"token_lines","children":[],"call":["out any? ","out << ","s == ","val scan ","tokens each "," enum_for "," block_given? "]}," Rouge Formatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers IDLang routines":{"type":"method","name":"routines","children":[],"call":[]}," Rouge Lexers IDLang conditionals":{"type":"method","name":"conditionals","children":[],"call":[]}," Rouge Lexers IDLang operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers IDLang decorators":{"type":"method","name":"decorators","children":[],"call":[]}," Rouge Lexers IDLang standalone_statements":{"type":"method","name":"standalone_statements","children":[],"call":[]}," Rouge Lexers IDLang keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers IDLang exec_unit":{"type":"method","name":"exec_unit","children":[],"call":[]}," Rouge Lexers IDLang analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge reload!":{"type":"method","name":"reload!","children":[],"call":[" load ","Object  send ","Kernel  load "]}," Rouge Guesser Ambiguous message":{"type":"method","name":"message","children":[],"call":[" alternatives map inspect "," alternatives map "," alternatives "]}," Rouge Guesser Ambiguous initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers FSharp primitives":{"type":"method","name":"primitives","children":[],"call":[]}," Rouge Lexers FSharp word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers FSharp keyopts":{"type":"method","name":"keyopts","children":[],"call":[]}," Rouge Lexers FSharp keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers VHDL operator_words":{"type":"method","name":"operator_words","children":[],"call":[]}," Rouge Lexers VHDL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers VHDL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Turtle analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Prometheus functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers JSX tag_token":{"type":"method","name":"tag_token","children":[],"call":["name [] =~ ","name [] "]}," Rouge Lexers JSX start_embed!":{"type":"method","name":"start_embed!","children":[],"call":[" push ","@embed push ","@embed reset! ","JSX  new "," options "]}," Rouge Lexers Javascript id_regex":{"type":"method","name":"id_regex","children":[],"call":[]}," Rouge Lexers Vue lookup_lang":{"type":"method","name":"lookup_lang","children":[],"call":["lang gsub ","lang downcase! ","lang gsub  gsub ","lang gsub  downcase! "]}," Rouge Lexers Vue analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Vue initialize":{"type":"method","name":"initialize","children":[],"call":["Javascript  new "," options "]}," Rouge Lexers Haml ruby!":{"type":"method","name":"ruby!","children":[],"call":[" push "," ruby reset! "," ruby "]}," Rouge Lexers ABAP new_keywords":{"type":"method","name":"new_keywords","children":[],"call":[]}," Rouge Lexers ABAP types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers ABAP builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers ABAP keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge HasModes set_mode!":{"type":"method","name":"set_mode!","children":[],"call":[" send "]}," Rouge Theme register":{"type":"method","name":"register","children":[],"call":["Theme  registry []= ","name to_s ","Theme  registry "]}," Rouge Lexers Wollok any":{"type":"method","name":"any","children":[],"call":["(send\n  (lvar :expressions) :map) join ","expressions map "]}," Rouge Lexers Wollok analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers TypescriptCommon builtins":{"type":"method","name":"builtins","children":[],"call":[" + "]}," Rouge Lexers TypescriptCommon reserved":{"type":"method","name":"reserved","children":[],"call":[" + ","Set  new "]}," Rouge Lexers TypescriptCommon declarations":{"type":"method","name":"declarations","children":[],"call":[" + ","Set  new "]}," Rouge Lexers TypescriptCommon keywords":{"type":"method","name":"keywords","children":[],"call":[" + ","Set  new "]}," Rouge Lexers Sieve tests":{"type":"method","name":"tests","children":[],"call":[]}," Rouge Lexers Sieve actions":{"type":"method","name":"actions","children":[],"call":[]}," Rouge Lexers Sieve controls":{"type":"method","name":"controls","children":[],"call":[]}," Rouge Lexers Q analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Q builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Q word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers Q keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Plist analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers PlainText initialize":{"type":"method","name":"initialize","children":[],"call":[" token_option "]}," Rouge Lexers Mosel analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Lasso start_inline?":{"type":"method","name":"start_inline?","children":[],"call":[]}," Rouge Lexers Lasso initialize":{"type":"method","name":"initialize","children":[],"call":[" bool_option "]}," Rouge Lexers Lasso analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers IRBLexer allow_comments?":{"type":"method","name":"allow_comments?","children":[],"call":[]}," Rouge Lexers IRBLexer prompt_regex":{"type":"method","name":"prompt_regex","children":[],"call":[]}," Rouge Lexers IRBLexer lang_lexer":{"type":"method","name":"lang_lexer","children":[],"call":["Ruby  new "]}," Rouge Lexers IRBLexer output_lexer":{"type":"method","name":"output_lexer","children":[],"call":["IRBOutputLexer  new "]}," Rouge Lexers IgorPro object_name":{"type":"method","name":"object_name","children":[],"call":[]}," Rouge Lexers IgorPro hdf5Operation":{"type":"method","name":"hdf5Operation","children":[],"call":[]}," Rouge Lexers IgorPro igorOperation":{"type":"method","name":"igorOperation","children":[],"call":[]}," Rouge Lexers IgorPro igorFunction":{"type":"method","name":"igorFunction","children":[],"call":[]}," Rouge Lexers IgorPro igorConstants":{"type":"method","name":"igorConstants","children":[],"call":[]}," Rouge Lexers IgorPro igorDeclarations":{"type":"method","name":"igorDeclarations","children":[],"call":[]}," Rouge Lexers IgorPro preprocessor":{"type":"method","name":"preprocessor","children":[],"call":[]}," Rouge Lexers IgorPro keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers HyLang name_token":{"type":"method","name":"name_token","children":[],"call":[" class builtins include? "," class builtins "," class "," class keywords include? "," class keywords "]}," Rouge Lexers HyLang builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers HyLang keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Groovy analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers Digdag analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexers ConsoleLexer process_line":{"type":"method","name":"process_line","children":[],"call":[" output_lexer lex ","input [] "," output_lexer "," lang_lexer reset! "," lang_lexer "," puts ","input [] inspect "," output_lexer reset! "," comment_regex =~ ","input [] strip "," comment_regex "," lang_lexer lex ","$& empty? ","$' =~ "," prompt_regex =~ "," prompt_regex ","input [] =~ ","input scan "," line_regex "," output_lexer continue_lex "," lang_lexer continue_lex "," error_regex =~ "," error_regex "]}," Rouge Lexers ConsoleLexer stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":[" process_line ","input eos? ! ","input eos? "," output_lexer reset! "," output_lexer "," lang_lexer reset! "," lang_lexer ","StringScanner  new ","StringScanner  new  eos? ! ","StringScanner  new  eos? "]}," Rouge Lexers ConsoleLexer comment_regex":{"type":"method","name":"comment_regex","children":[],"call":[]}," Rouge Lexers ConsoleLexer line_regex":{"type":"method","name":"line_regex","children":[],"call":[]}," Rouge Lexers ConsoleLexer output_lexer":{"type":"method","name":"output_lexer","children":[],"call":["Lexer  find new "," options ","Lexer  find ","@output new ","PlainText  new "]}," Rouge Lexers ConsoleLexer lang_lexer":{"type":"method","name":"lang_lexer","children":[],"call":["Lexer  find new "," options ","Lexer  find ","@lang new ","Shell  new "]}," Rouge Lexers ConsoleLexer prompt_prefix_regex":{"type":"method","name":"prompt_prefix_regex","children":[],"call":[" allow_comments? "]}," Rouge Lexers ConsoleLexer allow_comments?":{"type":"method","name":"allow_comments?","children":[],"call":[" end_chars include? ! "," end_chars include? "," end_chars ","@prompt empty? ! ","@prompt empty? "]}," Rouge Lexers ConsoleLexer end_chars":{"type":"method","name":"end_chars","children":[],"call":["c empty? ","@prompt reject ","@prompt any? "," allow_comments? "]}," Rouge Lexers ConsoleLexer prompt_regex":{"type":"method","name":"prompt_regex","children":[],"call":[" end_chars map join "," end_chars map ","Regexp  method "," end_chars "," prompt_prefix_regex "]}," Rouge Lexers ConsoleLexer initialize":{"type":"method","name":"initialize","children":[],"call":[" bool_option ","PlainText  new "," lexer_option "," list_option "]}," Rouge Lexers Awk builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Awk constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Awk reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Awk declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Awk keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Awk analyze_text":{"type":"method","name":"analyze_text","children":[],"call":[]}," Rouge Lexer hash_option":{"type":"method","name":"hash_option","children":[],"call":["out []= ","val_cast call ","@options delete ","1 == ","key =~ ","@options keys each ","@options keys ","k to_s ","base each ","base is_a? ","name to_s ","defaults dup ","defaults dup  []= ","@options delete  each ","@options delete  is_a? ","name to_s  to_s "]}," Rouge Lexer token_option":{"type":"method","name":"token_option","children":[],"call":[" as_token ","@options delete ","name to_s "]}," Rouge Lexer list_option":{"type":"method","name":"list_option","children":[],"call":[" as_list ","@options delete ","name to_s "]}," Rouge Lexer lexer_option":{"type":"method","name":"lexer_option","children":[],"call":[" as_lexer ","@options delete ","name to_s "]}," Rouge Lexer string_option":{"type":"method","name":"string_option","children":[],"call":[" as_string ","@options delete ","name to_s "]}," Rouge Lexer bool_option":{"type":"method","name":"bool_option","children":[],"call":["default call "," as_bool ","@options [] ","name to_s ","@options key? "]}," Rouge Lexer as_token":{"type":"method","name":"as_token","children":[],"call":["Token  [] "," as_token ","val last ","val is_a? "]}," Rouge Lexer as_lexer":{"type":"method","name":"as_lexer","children":[],"call":["lexer_class new ","Lexer  find ","val new ","val < ","val is_a? "," as_lexer ","val last ","Lexer  find  new "]}," Rouge Lexer as_list":{"type":"method","name":"as_list","children":[],"call":["val split "," as_list ","val flat_map "]}," Rouge Lexer as_string":{"type":"method","name":"as_string","children":[],"call":["val to_s "," as_string ","val last ","val is_a? "]}," Rouge Lexer as_bool":{"type":"method","name":"as_bool","children":[],"call":[" as_bool ","val last ","val empty? "]}," Rouge Lexer debug_enabled?":{"type":"method","name":"debug_enabled?","children":[],"call":["@debug_enabled ! ! ","@debug_enabled ! "]}," Rouge Lexer disable_debug!":{"type":"method","name":"disable_debug!","children":[],"call":[" remove_instance_variable "]}," Rouge Lexer enable_debug!":{"type":"method","name":"enable_debug!","children":[],"call":[]}," Rouge Lexer option_docs":{"type":"method","name":"option_docs","children":[],"call":["InheritableHash  new "," superclass option_docs "," superclass "]}," Rouge Lexers YAML detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers XML detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Tulip detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers TeX detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers TCL detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Shell detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Sed detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Rust detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Ruby detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Racket detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers R detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Python detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Puppet detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Praat detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers PHP detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Perl detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Mosel detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Moonscript detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Lua detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Lasso detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Julia detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Javascript detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers IO detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers HTML detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Haskell detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Groovy detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Gherkin detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Factor detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Diff detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Coffeescript detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers BIML detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Awk detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexer detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Guessers Util get_source":{"type":"method","name":"get_source","children":[],"call":[" raise ","source inspect ","SourceNormalizer  normalize ","source read ","source respond_to? ","source to_str "]}," Rouge Guessers Util test_glob":{"type":"method","name":"test_glob","children":[],"call":["File  fnmatch? ","File FNM_DOTMATCH  | "]}," Rouge Guessers Util SourceNormalizer normalize":{"type":"method","name":"normalize","children":[],"call":[]}," Rouge Guessers Disambiguation Disambiguator match?":{"type":"method","name":"match?","children":[],"call":[" test_glob ","@patterns any? "]}," Rouge Guessers Disambiguation Disambiguator decide!":{"type":"method","name":"decide!","children":[],"call":["guesser instance_eval "]}," Rouge Guessers Disambiguation Disambiguator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Guessers Disambiguation disambiguators":{"type":"method","name":"disambiguators","children":[],"call":[]}," Rouge Guessers Disambiguation disambiguate":{"type":"method","name":"disambiguate","children":[],"call":[]}," Rouge Guessers Disambiguation matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (ivar :@analyzer) :=~\n  (lvar :re)) ! ! ","(send\n  (ivar :@analyzer) :=~\n  (lvar :re)) ! ","@analyzer =~ "]}," Rouge Guessers Disambiguation contains?":{"type":"method","name":"contains?","children":[],"call":["@analyzer include? "]}," Rouge Guessers Disambiguation filter":{"type":"method","name":"filter","children":[],"call":["disambiguator decide! ","disambiguator match? "," class disambiguators each "," class disambiguators "," class ","TextAnalyzer  new "," get_source ","lexers size == ","Lexer  all size ","Lexer  all ","lexers size "]}," Rouge Guessers Disambiguation initialize":{"type":"method","name":"initialize","children":[],"call":["File  basename "]}," Rouge CLI Guess run":{"type":"method","name":"run","children":[],"call":[" puts ","l desc inspect ","l desc ","l title inspect ","l title ","l tag inspect ","l tag "," lexers each "," lexers "]}," Rouge CLI Guess lexers":{"type":"method","name":"lexers","children":[],"call":["Lexer  guesses "," input_source "," input_file "]}," Rouge CLI Guess initialize":{"type":"method","name":"initialize","children":[],"call":["FileReader  new read ","FileReader  new ","opts [] "]}," Rouge CLI Guess parse":{"type":"method","name":"parse","children":[],"call":[]}," Rouge CLI Guess desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge Lexers Hack keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Hack detect?":{"type":"method","name":"detect?","children":[],"call":[]}," lexer_dir":{"type":"method","name":"lexer_dir","children":[],"call":["File  join "," __dir__ "]}," load_relative":{"type":"method","name":"load_relative","children":[],"call":[" load ","File  join "," __dir__ "]}," Rouge TexThemeRenderer render_style":{"type":"method","name":"render_style","children":[],"call":["out << ","style [] "," palette_name "," token_name ","String  new ","String  new  << "]}," Rouge TexThemeRenderer render_blank":{"type":"method","name":"render_blank","children":[],"call":[" token_name "]}," Rouge TexThemeRenderer token_name":{"type":"method","name":"token_name","children":[],"call":["tok shortname "]}," Rouge TexThemeRenderer palette_name":{"type":"method","name":"palette_name","children":[],"call":[" camelize ","name to_s ","@theme name "," inline_name "]}," Rouge TexThemeRenderer camelize":{"type":"method","name":"camelize","children":[],"call":["1 upcase ","name gsub "]}," Rouge TexThemeRenderer gen_inline":{"type":"method","name":"gen_inline","children":[],"call":[" palette_name ","@gen_inline [] "," inline_name "]}," Rouge TexThemeRenderer inline_name":{"type":"method","name":"inline_name","children":[],"call":["(send\n  (nth-ref 1) :size) upcase "," raise ","1 gsub ","1 size ","color =~ "]}," Rouge TexThemeRenderer render_inline_pallete":{"type":"method","name":"render_inline_pallete","children":[],"call":[" gen_inline ","style [] "]}," Rouge TexThemeRenderer render_palette":{"type":"method","name":"render_palette","children":[],"call":[" palette_name "," inline_name ","palette each "]}," Rouge TexThemeRenderer render":{"type":"method","name":"render","children":[],"call":[" render_blank "," render_style ","@theme class get_own_style ","@theme class ","Token  each_token "," render_inline_pallete ","@theme styles each ","@theme styles "," render_palette ","@theme palette "," inline_name ","base bg ","base fg ","@theme class base_style ","(str \"\\\\makeatletter\\n\") gsub "," render_@theme class get_own_style  ","@theme class get_own_@theme class get_own_style  ","@theme @theme class get_own_style s each ","@theme @theme class get_own_style s ","@theme class base_style  bg ","@theme class base_style  fg ","@theme class base_@theme class get_own_style  ","@theme class @theme class base_style _style "]}," Rouge TexThemeRenderer initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," Rouge Lexers XQuery keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers XPath constructorTypes":{"type":"method","name":"constructorTypes","children":[],"call":[]}," Rouge Lexers XPath word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers XPath keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers XPath operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers XPath axes":{"type":"method","name":"axes","children":[],"call":[]}," Rouge Lexers XPath kindTestForPI":{"type":"method","name":"kindTestForPI","children":[],"call":[]}," Rouge Lexers XPath kindTest":{"type":"method","name":"kindTest","children":[],"call":[]}," Rouge Lexers XPath openParen":{"type":"method","name":"openParen","children":[],"call":[]}," Rouge Lexers XPath commentStart":{"type":"method","name":"commentStart","children":[],"call":[]}," Rouge Lexers XPath eqName":{"type":"method","name":"eqName","children":[],"call":[]}," Rouge Lexers XPath uriQName":{"type":"method","name":"uriQName","children":[],"call":[]}," Rouge Lexers XPath qName":{"type":"method","name":"qName","children":[],"call":[]}," Rouge Lexers XPath ncName":{"type":"method","name":"ncName","children":[],"call":[]}," Rouge Lexers XPath stringLiteral":{"type":"method","name":"stringLiteral","children":[],"call":[]}," Rouge Lexers XPath doubleLiteral":{"type":"method","name":"doubleLiteral","children":[],"call":[]}," Rouge Lexers XPath decimalLiteral":{"type":"method","name":"decimalLiteral","children":[],"call":[]}," Rouge Lexers XPath digits":{"type":"method","name":"digits","children":[],"call":[]}," Rouge Lexers Terraform builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Terraform constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Terraform reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Terraform declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Terraform keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers SuperCollider constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers SuperCollider reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers SuperCollider keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers SQL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers SQF commands":{"type":"method","name":"commands","children":[],"call":[]}," Rouge Lexers SQF diag_commands":{"type":"method","name":"diag_commands","children":[],"call":[]}," Rouge Lexers SQF namespaces":{"type":"method","name":"namespaces","children":[],"call":[]}," Rouge Lexers SQF constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers SQF controlflow":{"type":"method","name":"controlflow","children":[],"call":[]}," Rouge Lexers SQF initializers":{"type":"method","name":"initializers","children":[],"call":[]}," Rouge Lexers SQF wordoperators":{"type":"method","name":"wordoperators","children":[],"call":[]}," Rouge Lexers SPARQL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers SPARQL builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers SAS sas_proc_names":{"type":"method","name":"sas_proc_names","children":[],"call":[]}," Rouge Lexers SAS proc_keywords":{"type":"method","name":"proc_keywords","children":[],"call":[]}," Rouge Lexers SAS sas_auto_macro_vars":{"type":"method","name":"sas_auto_macro_vars","children":[],"call":[]}," Rouge Lexers SAS sas_macro_functions":{"type":"method","name":"sas_macro_functions","children":[],"call":[]}," Rouge Lexers SAS sas_macro_statements":{"type":"method","name":"sas_macro_statements","children":[],"call":[]}," Rouge Lexers SAS sas_functions":{"type":"method","name":"sas_functions","children":[],"call":[]}," Rouge Lexers SAS data_step_statements":{"type":"method","name":"data_step_statements","children":[],"call":[]}," Rouge Lexers ReasonML keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers OpenTypeFeatureFile keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers OpenEdge keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers OpenEdge keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers OCamlCommon primitives":{"type":"method","name":"primitives","children":[],"call":[]}," Rouge Lexers OCamlCommon word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers OCamlCommon keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Mathematica builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Mathematica keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Mason detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Mason initialize":{"type":"method","name":"initialize","children":[],"call":["Perl  new "]}," Rouge Lexers Make functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers Magik label":{"type":"method","name":"label","children":[],"call":[]}," Rouge Lexers Magik global_ref":{"type":"method","name":"global_ref","children":[],"call":[]}," Rouge Lexers Magik symbol":{"type":"method","name":"symbol","children":[],"call":[]}," Rouge Lexers Magik package_identifier":{"type":"method","name":"package_identifier","children":[],"call":[]}," Rouge Lexers Magik identifier":{"type":"method","name":"identifier","children":[],"call":[]}," Rouge Lexers Magik piped_identifier":{"type":"method","name":"piped_identifier","children":[],"call":[]}," Rouge Lexers Magik simple_identifier":{"type":"method","name":"simple_identifier","children":[],"call":[]}," Rouge Lexers Magik character":{"type":"method","name":"character","children":[],"call":[]}," Rouge Lexers Magik number":{"type":"method","name":"number","children":[],"call":[]}," Rouge Lexers Magik decimal":{"type":"method","name":"decimal","children":[],"call":[]}," Rouge Lexers Magik exponent":{"type":"method","name":"exponent","children":[],"call":[]}," Rouge Lexers Magik radix":{"type":"method","name":"radix","children":[],"call":[]}," Rouge Lexers Magik digits":{"type":"method","name":"digits","children":[],"call":[]}," Rouge Lexers Magik string_single":{"type":"method","name":"string_single","children":[],"call":[]}," Rouge Lexers Magik string_double":{"type":"method","name":"string_double","children":[],"call":[]}," Rouge Lexers Magik keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers M68k builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers M68k reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers M68k keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers M68k keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Lutin primitives":{"type":"method","name":"primitives","children":[],"call":[]}," Rouge Lexers Lutin word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers Lutin keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Lustre primitives":{"type":"method","name":"primitives","children":[],"call":[]}," Rouge Lexers Lustre word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers Lustre keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers JSP initialize":{"type":"method","name":"initialize","children":[],"call":["Java  new "]}," Rouge Lexers HQL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers HQL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Hcl builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Hcl constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Hcl reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Hcl declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Hcl keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Haxe builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Haxe constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Haxe reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Haxe declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Haxe imports":{"type":"method","name":"imports","children":[],"call":[]}," Rouge Lexers Haxe keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Haxe detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers GDScript builtins_type":{"type":"method","name":"builtins_type","children":[],"call":[]}," Rouge Lexers GDScript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers GDScript keywords_reserved":{"type":"method","name":"keywords_reserved","children":[],"call":[]}," Rouge Lexers GDScript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Escape stream_tokens":{"type":"method","name":"stream_tokens","children":[],"call":["stream rest ","stream [] ","stream scan "," to_end_regex ","@lang continue_lex "," puts ","stream [] inspect "," to_start_regex "," loop ","StringScanner  new ","StringScanner  new  rest ","StringScanner  new  [] ","StringScanner  new  scan ","StringScanner  new  [] inspect "]}," Rouge Lexers Escape to_end_regex":{"type":"method","name":"to_end_regex","children":[],"call":["Regexp  escape "]}," Rouge Lexers Escape to_start_regex":{"type":"method","name":"to_start_regex","children":[],"call":["Regexp  escape "]}," Rouge Lexers Escape initialize":{"type":"method","name":"initialize","children":[],"call":["PlainText  new "," lexer_option "," string_option "]}," Rouge Lexers EPP initialize":{"type":"method","name":"initialize","children":[],"call":["Puppet  new ","PlainText  new "," lexer_option "]}," Rouge Lexers EEX initialize":{"type":"method","name":"initialize","children":[],"call":["Elixir  new "]}," Rouge Lexers Cython c_keywords":{"type":"method","name":"c_keywords","children":[],"call":[]}," Rouge Lexers Cython keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Cython initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers CUDA keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers CUDA keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Crystal detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Coffeescript reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers CMHG preproc_keyword":{"type":"method","name":"preproc_keyword","children":[],"call":[]}," Rouge Lexers Clean keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers BBCBASIC constant":{"type":"method","name":"constant","children":[],"call":[]}," Rouge Lexers BBCBASIC operator":{"type":"method","name":"operator","children":[],"call":[]}," Rouge Lexers BBCBASIC statement":{"type":"method","name":"statement","children":[],"call":[]}," Rouge Lexers BBCBASIC function":{"type":"method","name":"function","children":[],"call":[]}," Rouge Lexers BBCBASIC punctuation":{"type":"method","name":"punctuation","children":[],"call":[]}," Rouge Lexers Batchfile attributes":{"type":"method","name":"attributes","children":[],"call":[]}," Rouge Lexers Batchfile other_commands":{"type":"method","name":"other_commands","children":[],"call":[]}," Rouge Lexers Batchfile builtin_commands":{"type":"method","name":"builtin_commands","children":[],"call":[]}," Rouge Lexers Batchfile devices":{"type":"method","name":"devices","children":[],"call":[]}," Rouge Lexers Batchfile operator_words":{"type":"method","name":"operator_words","children":[],"call":[]}," Rouge Lexers Batchfile keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ArmAsm operator":{"type":"method","name":"operator","children":[],"call":[]}," Rouge Lexers ArmAsm builtin":{"type":"method","name":"builtin","children":[],"call":[]}," Rouge Lexers ArmAsm shift_or_condition":{"type":"method","name":"shift_or_condition","children":[],"call":[]}," Rouge Lexers ArmAsm general_directive":{"type":"method","name":"general_directive","children":[],"call":[]}," Rouge Lexers ArmAsm file_directive":{"type":"method","name":"file_directive","children":[],"call":[]}," Rouge Lexers ArmAsm preproc_keyword":{"type":"method","name":"preproc_keyword","children":[],"call":[]}," Rouge Lexers Ada idents":{"type":"method","name":"idents","children":[],"call":[]}," Rouge Lexer continue_lex":{"type":"method","name":"continue_lex","children":[],"call":["b call ","last_val << ","tok == ","val empty? "," stream_tokens "," enum_for "," block_given? "," lex "]}," Rouge Lexer detectable?":{"type":"method","name":"detectable?","children":[],"call":[" methods include? "," methods "," singleton_methods include? "," singleton_methods "]}," Rouge Formatters Tex tag":{"type":"method","name":"tag","children":[],"call":[" escape_tex ","tok shortname ","tok == "," escape? "]}," Rouge Formatters Tex hphantom_tag":{"type":"method","name":"hphantom_tag","children":[],"call":[" tag ","val empty? ","x * ","$& size ","val sub! "]}," Rouge Formatters Tex render_line":{"type":"method","name":"render_line","children":[],"call":[" hphantom_tag ","line each "," tag ","rest each "," tag_first "]}," Rouge Formatters Tex stream":{"type":"method","name":"stream","children":[],"call":[" render_line "," token_lines "]}," Rouge Formatters Tex escape_tex":{"type":"method","name":"escape_tex","children":[],"call":["str gsub "]}," Rouge Formatters Tex initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," Rouge Formatters HTMLLineTable stream":{"type":"method","name":"stream","children":[],"call":["buffer join ","buffer << ","@formatter stream "," sprintf "," token_lines ","@start_line - "," token_lines with_index "]}," Rouge Formatters HTMLLineTable initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," Rouge Formatters HTML escape_special_html_chars":{"type":"method","name":"escape_special_html_chars","children":[],"call":["value gsub ","value =~ "]}," Rouge Formatter filter_escapes":{"type":"method","name":"filter_escapes","children":[],"call":["t == ","tokens each "]}," Rouge Formatter escape?":{"type":"method","name":"escape?","children":[],"call":["tok == "]}," Rouge Formatter disable_escape!":{"type":"method","name":"disable_escape!","children":[],"call":[]}," Rouge Formatter enable_escape!":{"type":"method","name":"enable_escape!","children":[],"call":[]}," Rouge Formatter escape_enabled?":{"type":"method","name":"escape_enabled?","children":[],"call":[]}," Rouge Formatter with_escape":{"type":"method","name":"with_escape","children":[],"call":[]}," Rouge CLI Highlight escape_lexer":{"type":"method","name":"escape_lexer","children":[],"call":["Rouge Lexers Escape  new "," raw_lexer ","@escape [] "]}," Rouge CLI Highlight raw_lexer":{"type":"method","name":"raw_lexer","children":[],"call":[" lexer_class new "," lexer_class "]}," Rouge Lexers RobotFramework settings_with_args":{"type":"method","name":"settings_with_args","children":[],"call":[]}," Rouge Lexers RobotFramework settings_with_keywords":{"type":"method","name":"settings_with_keywords","children":[],"call":[]}," Rouge Lexers RobotFramework initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers Apex constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Apex types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Apex soql":{"type":"method","name":"soql","children":[],"call":[]}," Rouge Lexers Apex declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Apex keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers MiniZinc operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers MiniZinc keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers MiniZinc keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers MiniZinc builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers TTCN3 types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers TTCN3 reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers TTCN3 keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Slice keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Slice keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers NesAsm keywords_reserved":{"type":"method","name":"keywords_reserved","children":[],"call":[]}," Rouge Lexers NesAsm keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers NesAsm keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ObjectiveCCommon extended":{"type":"method","name":"extended","children":[],"call":[]}," Rouge Lexers ObjectiveCCommon builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers ObjectiveCCommon at_builtins":{"type":"method","name":"at_builtins","children":[],"call":[]}," Rouge Lexers ObjectiveCCommon at_keywords":{"type":"method","name":"at_keywords","children":[],"call":[]}," Rouge Lexers LLVM types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers LLVM instructions":{"type":"method","name":"instructions","children":[],"call":[]}," Rouge Lexers LLVM keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers FreeFEM attributes":{"type":"method","name":"attributes","children":[],"call":[]}," Rouge Lexers FreeFEM builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers FreeFEM reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers FreeFEM keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers FreeFEM keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Varnish variables":{"type":"method","name":"variables","children":[],"call":[]}," Rouge Lexers Varnish functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers Varnish keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Formatters TerminalTruecolor make_escape_sequence":{"type":"method","name":"make_escape_sequence","children":[],"call":["TruecolorEscapeSequence  new "]}," Rouge Formatters TerminalTruecolor TruecolorEscapeSequence get_rgb":{"type":"method","name":"get_rgb","children":[],"call":[" raise ","color inspect ","cc to_i ","color scan map ","color scan ","c to_i * ","c to_i ","color chars map ","color chars ","color size ","color =~ "]}," Rouge Formatters TerminalTruecolor TruecolorEscapeSequence style_string":{"type":"method","name":"style_string","children":[],"call":["out << "," escape "," style [] "," style "," get_rgb "," style fg "," style bg ","String  new ","String  new  << "]}," Rouge Formatters Terminal256 make_escape_sequence":{"type":"method","name":"make_escape_sequence","children":[],"call":["EscapeSequence  new "]}," Rouge Formatters Terminal256 Unescape stream_value":{"type":"method","name":"stream_value","children":[],"call":[]}," Rouge Formatters Terminal256 Unescape reset_string":{"type":"method","name":"reset_string","children":[],"call":[]}," Rouge Formatters Terminal256 Unescape style_string":{"type":"method","name":"style_string","children":[],"call":[]}," Rouge Formatters Terminal256 Unescape initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Formatters Terminal256 EscapeSequence stream_value":{"type":"method","name":"stream_value","children":[],"call":[" reset_string ","val gsub gsub "," style_string ","val gsub "]}," Rouge CLI Highlight supports_truecolor?":{"type":"method","name":"supports_truecolor?","children":[],"call":[]}," Rouge Lexers ECL typed":{"type":"method","name":"typed","children":[],"call":[]}," Rouge Lexers ECL type":{"type":"method","name":"type","children":[],"call":[]}," Rouge Lexers ECL template":{"type":"method","name":"template","children":[],"call":[]}," Rouge Lexers ECL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ECL functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers ECL class_second":{"type":"method","name":"class_second","children":[],"call":[]}," Rouge Lexers ECL class_first":{"type":"method","name":"class_first","children":[],"call":[]}," Rouge load_lexers":{"type":"method","name":"load_lexers","children":[],"call":["Lexers  load_lexer ","f sub ","Dir  glob each ","Dir  glob ","File  join ","f relative_path_from ","Pathname  glob each ","Pathname  glob ","lexer_dir / ","Pathname  new / ","Pathname  new ","File  join  / ","Pathname  new /  / "]}," Rouge load_file":{"type":"method","name":"load_file","children":[],"call":[" load ","File  join ","Kernel  load "]}," Rouge Lexers YANG types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers YANG constants_keywords":{"type":"method","name":"constants_keywords","children":[],"call":[]}," Rouge Lexers YANG list_stmts_keywords":{"type":"method","name":"list_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG type_stmts_keywords":{"type":"method","name":"type_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG data_def_stmts_keywords":{"type":"method","name":"data_def_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG body_stmts_keywords":{"type":"method","name":"body_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG linkage_stmts_keywords":{"type":"method","name":"linkage_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG meta_stmts_keywords":{"type":"method","name":"meta_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG module_header_stmts_keywords":{"type":"method","name":"module_header_stmts_keywords","children":[],"call":[]}," Rouge Lexers YANG top_stmts_keywords":{"type":"method","name":"top_stmts_keywords","children":[],"call":[]}," Rouge Lexers Solidity reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Solidity keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Solidity constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Solidity builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Solidity keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Solidity detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers Python StringRegister type?":{"type":"method","name":"type?","children":[],"call":[" last [] include? "," last [] "," last "]}," Rouge Lexers Python StringRegister remove":{"type":"method","name":"remove","children":[],"call":[" pop "]}," Rouge Lexers Python StringRegister register":{"type":"method","name":"register","children":[],"call":[" push "]}," Rouge Lexers Python StringRegister delim?":{"type":"method","name":"delim?","children":[],"call":[" last [] == "," last [] "," last "]}," Rouge Lexers Python current_string":{"type":"method","name":"current_string","children":[],"call":["StringRegister  new "]}," Rouge Lexers builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Lasso keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ISBL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers ISBL globals":{"type":"method","name":"globals","children":[],"call":[]}," Rouge Lexers ISBL interfaces":{"type":"method","name":"interfaces","children":[],"call":[]}," Rouge Lexers ISBL constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers ISBL builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Datastudio sql_keywords":{"type":"method","name":"sql_keywords","children":[],"call":[]}," Rouge Lexers Cypher keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Cypher predicates":{"type":"method","name":"predicates","children":[],"call":[]}," Rouge Lexers Cypher functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers ConsoleLexer error_regex":{"type":"method","name":"error_regex","children":[],"call":["@error map join ","@error map ","Regexp  method ","@error any? "]}," Rouge Lexers Apache keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Apache values":{"type":"method","name":"values","children":[],"call":[]}," Rouge Lexers Apache sections":{"type":"method","name":"sections","children":[],"call":[]}," Rouge Lexers Apache directives":{"type":"method","name":"directives","children":[],"call":[]}," Rouge Lexers Zig builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Zig keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers TypescriptCommon extended":{"type":"method","name":"extended","children":[],"call":[]}," Rouge Lexers Livescript loop_control_keywords":{"type":"method","name":"loop_control_keywords","children":[],"call":[]}," Rouge Lexers Livescript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Livescript constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Livescript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Livescript declarations":{"type":"method","name":"declarations","children":[],"call":[]}," Rouge Lexers Livescript detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge Lexers HLSL builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers HLSL reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers HLSL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers HLSL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Augeas reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Rego operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers Rego constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Janet name_token":{"type":"method","name":"name_token","children":[],"call":[" class bundled include? "," class bundled "," class "," class specials include? "," class specials "]}," Rouge Lexers Janet bundled":{"type":"method","name":"bundled","children":[],"call":[]}," Rouge Lexers Janet specials":{"type":"method","name":"specials","children":[],"call":[]}," Rouge Lexers Brightscript builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers Brightscript operator_word":{"type":"method","name":"operator_word","children":[],"call":[]}," Rouge Lexers Brightscript keyword_type":{"type":"method","name":"keyword_type","children":[],"call":[]}," Rouge Lexers Brightscript keyword_reserved_unsupported":{"type":"method","name":"keyword_reserved_unsupported","children":[],"call":[]}," Rouge Lexers Brightscript keyword_reserved":{"type":"method","name":"keyword_reserved","children":[],"call":[]}," Rouge Lexers Brightscript name_builtin":{"type":"method","name":"name_builtin","children":[],"call":[]}," Rouge Lexers PostScript detect?":{"type":"method","name":"detect?","children":[],"call":[]}," Rouge RegexLexer StateDSL close!":{"type":"method","name":"close!","children":[],"call":[]}," Rouge RegexLexer StateDSL context_sensitive?":{"type":"method","name":"context_sensitive?","children":[],"call":["source =~ ","re source ","re source  =~ ","re re source  "]}," Rouge RegexLexer ClosedState to_s":{"type":"method","name":"to_s","children":[],"call":["rule re source include? ","rule re source ","rule re ","rule inspect "," state name "," state ","@state rules last ","@state rules ","@state rules last  re source include? ","@state rules last  re source ","@state rules last  re ","@state rules last  inspect ","@state @state rules last s last ","@state @state rules last s "]}," Rouge RegexLexer ClosedState rule":{"type":"method","name":"rule","children":[],"call":["@state rules last ","@state rules "]}," Rouge RegexLexer ClosedState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge RegexLexer InvalidRegex to_s":{"type":"method","name":"to_s","children":[],"call":["@re inspect "]}," Rouge RegexLexer InvalidRegex initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rouge Lexers J control_words_id":{"type":"method","name":"control_words_id","children":[],"call":[]}," Rouge Lexers J control_words":{"type":"method","name":"control_words","children":[],"call":[]}," Rouge Lexers J primitive":{"type":"method","name":"primitive","children":[],"call":[]}," Rouge Lexers J primitive_table":{"type":"method","name":"primitive_table","children":[],"call":[]}," Rouge Lexers J inflection_list":{"type":"method","name":"inflection_list","children":[],"call":[]}," Rouge Lexers J token_map":{"type":"method","name":"token_map","children":[],"call":[]}," Rouge Lexers HTTP guess_content_lexer":{"type":"method","name":"guess_content_lexer","children":[],"call":["Lexer  guess_by_mimetype "]}," Rouge Lexer with":{"type":"method","name":"with","children":[],"call":[" class new "," class ","new_options []= ","k to_s ","opts each ","@options dup ","@options dup  []= "]}," Rouge Lexer lookup_fancy":{"type":"method","name":"lookup_fancy","children":[],"call":[" find "," guess ","opts [] ","default_options merge ","Hash  [] ","k to_s ","vals [] ","vals size ","CGI  parse map ","CGI  parse ","str split ","str != ","str include? ! ","str include? ","default_options merge  [] "]}," Rouge Formatters HTMLLineHighlighter stream":{"type":"method","name":"stream","children":[],"call":["@highlight_lines include? ","@delegate format "," token_lines "," token_lines with_index "]}," Rouge Formatters HTMLLineHighlighter initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","opts fetch "]}," Rouge CLI Debug parse_opts":{"type":"method","name":"parse_opts","children":[],"call":[]}," Rouge CLI Debug doc":{"type":"method","name":"doc","children":[],"call":[]}," Rouge CLI Debug desc":{"type":"method","name":"desc","children":[],"call":[]}," Rouge CLI Highlight parse_opts":{"type":"method","name":"parse_opts","children":[],"call":[]}," Rouge Lexers ReScript word_operators":{"type":"method","name":"word_operators","children":[],"call":[]}," Rouge Lexers ReScript types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers ReScript keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers OCL functions":{"type":"method","name":"functions","children":[],"call":[]}," Rouge Lexers OCL operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers OCL builtins":{"type":"method","name":"builtins","children":[],"call":[]}," Rouge Lexers OCL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers OCL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Stata reserved_keywords":{"type":"method","name":"reserved_keywords","children":[],"call":[]}," Rouge Lexers Stata type_keywords":{"type":"method","name":"type_keywords","children":[],"call":[]}," Rouge Lexers Stan constants":{"type":"method","name":"constants","children":[],"call":[]}," Rouge Lexers Stan distributions":{"type":"method","name":"distributions","children":[],"call":[]}," Rouge Lexers Stan builtin_functions":{"type":"method","name":"builtin_functions","children":[],"call":[]}," Rouge Lexers Stan reserved":{"type":"method","name":"reserved","children":[],"call":[]}," Rouge Lexers Stan types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Stan keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Syzprog keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Syzlang keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers Syzlang keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers PLSQL keywords_type":{"type":"method","name":"keywords_type","children":[],"call":[]}," Rouge Lexers PLSQL keywords_func":{"type":"method","name":"keywords_func","children":[],"call":[]}," Rouge Lexers PLSQL keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers PLSQL keywords_reserved":{"type":"method","name":"keywords_reserved","children":[],"call":[]}," Rouge Lexers Lean operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers Lean types":{"type":"method","name":"types","children":[],"call":[]}," Rouge Lexers Lean keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Idris prelude_functions":{"type":"method","name":"prelude_functions","children":[],"call":[]}," Rouge Lexers Idris ascii":{"type":"method","name":"ascii","children":[],"call":[]}," Rouge Lexers Idris reserved_keywords":{"type":"method","name":"reserved_keywords","children":[],"call":[]}," Rouge Lexers Nial consts":{"type":"method","name":"consts","children":[],"call":[]}," Rouge Lexers Nial funcs":{"type":"method","name":"funcs","children":[],"call":[]}," Rouge Lexers Nial transformers":{"type":"method","name":"transformers","children":[],"call":[]}," Rouge Lexers Nial punctuations":{"type":"method","name":"punctuations","children":[],"call":[]}," Rouge Lexers Nial operators":{"type":"method","name":"operators","children":[],"call":[]}," Rouge Lexers Nial keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Meson StringRegister type?":{"type":"method","name":"type?","children":[],"call":[" last [] include? "," last [] "," last "]}," Rouge Lexers Meson StringRegister remove":{"type":"method","name":"remove","children":[],"call":[" pop "]}," Rouge Lexers Meson StringRegister register":{"type":"method","name":"register","children":[],"call":[" push "]}," Rouge Lexers Meson StringRegister delim?":{"type":"method","name":"delim?","children":[],"call":[" last [] == "," last [] "," last "]}," Rouge Lexers Meson current_string":{"type":"method","name":"current_string","children":[],"call":["StringRegister  new "]}," Rouge Lexers Meson builtin_functions":{"type":"method","name":"builtin_functions","children":[],"call":[]}," Rouge Lexers Meson builtin_variables":{"type":"method","name":"builtin_variables","children":[],"call":[]}," Rouge Lexers Meson keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Isabelle word":{"type":"method","name":"word","children":[],"call":["keywords join "]}," Rouge Lexers Isabelle keyword_proof_script":{"type":"method","name":"keyword_proof_script","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_asm_goal":{"type":"method","name":"keyword_proof_asm_goal","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_asm":{"type":"method","name":"keyword_proof_asm","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_decl":{"type":"method","name":"keyword_proof_decl","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_chain":{"type":"method","name":"keyword_proof_chain","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_block":{"type":"method","name":"keyword_proof_block","children":[],"call":[]}," Rouge Lexers Isabelle keyword_proof_goal":{"type":"method","name":"keyword_proof_goal","children":[],"call":[]}," Rouge Lexers Isabelle keyword_abandon_proof":{"type":"method","name":"keyword_abandon_proof","children":[],"call":[]}," Rouge Lexers Isabelle keyword_qed":{"type":"method","name":"keyword_qed","children":[],"call":[]}," Rouge Lexers Isabelle keyword_theory_goal":{"type":"method","name":"keyword_theory_goal","children":[],"call":[]}," Rouge Lexers Isabelle keyword_theory_script":{"type":"method","name":"keyword_theory_script","children":[],"call":[]}," Rouge Lexers Isabelle keyword_theory_decl":{"type":"method","name":"keyword_theory_decl","children":[],"call":[]}," Rouge Lexers Isabelle keyword_subsection":{"type":"method","name":"keyword_subsection","children":[],"call":[]}," Rouge Lexers Isabelle keyword_section":{"type":"method","name":"keyword_section","children":[],"call":[]}," Rouge Lexers Isabelle keyword_thy":{"type":"method","name":"keyword_thy","children":[],"call":[]}," Rouge Lexers Isabelle keyword_diag":{"type":"method","name":"keyword_diag","children":[],"call":[]}," Rouge Lexers Isabelle keyword_minor":{"type":"method","name":"keyword_minor","children":[],"call":[]}," Rouge Formatters Tex tag_first":{"type":"method","name":"tag_first","children":[],"call":[" tag ","x * ","$& size ","val sub! "]}," Rouge Lexers RML arithmetic_keywords":{"type":"method","name":"arithmetic_keywords","children":[],"call":[]}," Rouge Lexers RML keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Lexers Praat object_attributes":{"type":"method","name":"object_attributes","children":[],"call":[]}," Rouge Lexers Praat variables_string":{"type":"method","name":"variables_string","children":[],"call":[]}," Rouge Lexers Praat variables_numeric":{"type":"method","name":"variables_numeric","children":[],"call":[]}," Rouge Lexers Praat objects":{"type":"method","name":"objects","children":[],"call":[]}," Rouge Lexers Praat functions_builtin":{"type":"method","name":"functions_builtin","children":[],"call":[]}," Rouge Lexers Praat functions_string_vector":{"type":"method","name":"functions_string_vector","children":[],"call":[]}," Rouge Lexers Praat functions_matrix":{"type":"method","name":"functions_matrix","children":[],"call":[]}," Rouge Lexers Praat functions_array":{"type":"method","name":"functions_array","children":[],"call":[]}," Rouge Lexers Praat functions_numeric":{"type":"method","name":"functions_numeric","children":[],"call":[]}," Rouge Lexers Praat functions_string":{"type":"method","name":"functions_string","children":[],"call":[]}," Rouge Lexers Praat keywords":{"type":"method","name":"keywords","children":[],"call":[]}," Rouge Themes Github make_light!":{"type":"method","name":"make_light!","children":[],"call":[]}," Rouge Themes Github make_dark!":{"type":"method","name":"make_dark!","children":[],"call":[]}," Rouge Themes Github dark!":{"type":"method","name":"dark!","children":[],"call":[]}," Rouge Themes Github light!":{"type":"method","name":"light!","children":[],"call":[]}," Rouge Lexers OpenEdge keywords_prepro":{"type":"method","name":"keywords_prepro","children":[],"call":[]}," Rouge Lexers Wollok entities":{"type":"method","name":"entities","children":[],"call":[]}," Rouge Lexers Svelte initialize":{"type":"method","name":"initialize","children":[],"call":["Javascript  new "," options "]}," Rouge Lexers Elixir detect?":{"type":"method","name":"detect?","children":[],"call":[]}}