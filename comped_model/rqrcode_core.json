{" RQRCodeCore QRUtil demerit_points_4_dark_ratio":{"type":"method","name":"demerit_points_4_dark_ratio","children":[],"call":[]}," RQRCodeCore QRUtil demerit_points_3_dangerous_patterns":{"type":"method","name":"demerit_points_3_dangerous_patterns","children":[],"call":[]}," RQRCodeCore QRUtil demerit_points_2_full_blocks":{"type":"method","name":"demerit_points_2_full_blocks","children":[],"call":[]}," RQRCodeCore QRUtil demerit_points_1_same_color":{"type":"method","name":"demerit_points_1_same_color","children":[],"call":[]}," RQRCodeCore QRUtil get_lost_points":{"type":"method","name":"get_lost_points","children":[],"call":[]}," RQRCodeCore QRUtil get_length_in_bits":{"type":"method","name":"get_length_in_bits","children":[],"call":[]}," RQRCodeCore QRUtil get_error_correct_polynomial":{"type":"method","name":"get_error_correct_polynomial","children":[],"call":[]}," RQRCodeCore QRUtil get_mask":{"type":"method","name":"get_mask","children":[],"call":[]}," RQRCodeCore QRUtil get_pattern_positions":{"type":"method","name":"get_pattern_positions","children":[],"call":[]}," RQRCodeCore QRUtil get_bch_digit":{"type":"method","name":"get_bch_digit","children":[],"call":[]}," RQRCodeCore QRUtil get_bch_version":{"type":"method","name":"get_bch_version","children":[],"call":[]}," RQRCodeCore QRUtil get_bch_format_info":{"type":"method","name":"get_bch_format_info","children":[],"call":[]}," RQRCodeCore QRUtil max_size":{"type":"method","name":"max_size","children":[],"call":[]}," RQRCodeCore QRRSBlock get_rs_block_table":{"type":"method","name":"get_rs_block_table","children":[],"call":[]}," RQRCodeCore QRRSBlock get_rs_blocks":{"type":"method","name":"get_rs_blocks","children":[],"call":[]}," RQRCodeCore QRRSBlock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RQRCodeCore QRPolynomial mod":{"type":"method","name":"mod","children":[],"call":["QRPolynomial  new mod ","QRPolynomial  new ","num []= ","tmp ^ ","QRMath  gexp ","QRMath  glog + ","QRMath  glog ","e get ","num [] ","num [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :e) :get_length)) each ","e get_length "," get ","(erange\n  (int 0)\n  (send nil :get_length)) each "," get_length ","Array  new ","QRMath  glog - "," get_length - < "," get_length - ","Array  new  []= ","num []  ^ ","Array  new  [] ","Array  new  [] nil? "]}," RQRCodeCore QRPolynomial multiply":{"type":"method","name":"multiply","children":[],"call":["QRPolynomial  new ","num []= ","tmp ^ ","QRMath  gexp ","QRMath  glog + ","QRMath  glog ","e get "," get ","i + ","num [] ","num [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :e) :get_length)) each ","e get_length ","(erange\n  (int 0)\n  (send nil :get_length)) each "," get_length ","Array  new "," get_length + - "," get_length + ","Array  new  []= ","num []  ^ ","Array  new  [] ","Array  new  [] nil? "]}," RQRCodeCore QRPolynomial get_length":{"type":"method","name":"get_length","children":[],"call":["@num size "]}," RQRCodeCore QRPolynomial get":{"type":"method","name":"get","children":[],"call":["@num [] "]}," RQRCodeCore QRPolynomial initialize":{"type":"method","name":"initialize","children":[],"call":["@num []= ","num [] ","i + ","(erange\n  (int 0)\n  (send\n    (send\n      (lvar :num) :size) :-\n    (lvar :offset))) each ","num size - ","num size ","Array  new ","num size - + ","offset + ","num [] == ","offset < "," raise ","num empty? ","Array  new  []= ","(erange\n  (int 0)\n  (send\n    (send\n      (lvar :num) :size) :-\n    (lvar :offset + ))) each ","offset +  + ","offset +  < "]}," RQRCodeCore QRNumeric get_code":{"type":"method","name":"get_code","children":[],"call":["chars to_i "]}," RQRCodeCore QRNumeric get_bit_length":{"type":"method","name":"get_bit_length","children":[],"call":["NUMBER_LENGTH  [] "]}," RQRCodeCore QRNumeric write":{"type":"method","name":"write","children":[],"call":["buffer put "," get_code "," get_bit_length ","chars length ","@data [] ","i % == ","i % ","(send\n  (ivar :@data) :size) times ","@data size ","buffer numeric_encoding_start "," get_length ","@data size times "," get_ get_bit_length  ","@data []  length "]}," RQRCodeCore QRNumeric valid_data?":{"type":"method","name":"valid_data?","children":[],"call":[]}," RQRCodeCore QRNumeric get_length":{"type":"method","name":"get_length","children":[],"call":["@data size "]}," RQRCodeCore QRNumeric initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","QRNumeric  valid_data? ","QRMODE  [] "]}," RQRCodeCore QRMath gexp":{"type":"method","name":"gexp","children":[],"call":["EXP_TABLE  [] ","n - ","n >= ","n + ","n < ","n -  - ","n +  - ","n -  >= ","n +  >= ","n -  + ","n +  + ","n -  < ","n +  < "]}," RQRCodeCore QRMath glog":{"type":"method","name":"glog","children":[],"call":["LOG_TABLE  [] "," raise ","n < "]}," RQRCodeCore QRCode create_bytes":{"type":"method","name":"create_bytes","children":[],"call":["data []= ","ecdata [] [] ","ecdata [] ","i < ","ecdata [] size ","rs_blocks size times ","rs_blocks size ","max_ec_count times ","dcdata [] [] ","dcdata [] ","dcdata [] size ","max_dc_count times ","Array  new ","sum + ","rs_block total_count ","rs_blocks reduce ","ecdata []= ","ecdata_block []= ","mod_poly get ","mod_index >= ","i + - ","ecdata_block size ","i + ","mod_poly get_length ","ecdata_block size times ","rs_poly get_length - ","rs_poly get_length ","raw_poly mod ","QRPolynomial  new ","QRUtil  get_error_correct_polynomial ","dcdata []= ","dcdata_block []= ","255 & ","buffer buffer [] ","buffer buffer ","dcdata_block size times ","dcdata_block size ","(lvar :max_ec_count) max ","(lvar :max_dc_count) max ","rs_block total_count - ","rs_block data_count ","rs_blocks each_with_index ","Array  new  []= ","ecArray  new  [] [] ","Array  new  [] [] ","ecArray  new  [] ","Array  new  [] ","ecArray  new  [] size ","Array  new  [] size ","(lvar :max_ec_count) max  times ","max_rs_block total_count -  times ","dcArray  new  [] [] ","dcArray  new  [] ","dcArray  new  [] size ","(lvar :max_dc_count) max  times ","max_rs_block data_count  times ","ecArray  new  []= ","ecArray  new _block []= ","Array  new _block []= ","raw_poly mod  get ","i + -  >= ","ecArray  new _block size ","Array  new  size ","Array  new _block size ","raw_poly mod  get_length ","ecArray  new _block size times ","Array  new  size times ","Array  new _block size times ","QRUtil  get_error_correct_polynomial  get_length - ","QRUtil  get_error_correct_polynomial  get_length ","QRPolynomial  new  mod ","dcArray  new  []= ","dcArray  new _block []= ","dcArray  new _block size times ","dcArray  new _block size ","(lvar :(lvar :max_ec_count) max ) max ","(lvar :max_rs_block total_count - ) max ","(lvar :(lvar :max_dc_count) max ) max ","(lvar :max_rs_block data_count ) max ","rs_block Array  new _count "]}," RQRCodeCore QRCode create_data":{"type":"method","name":"create_data","children":[],"call":["QRCode  create_bytes ","buffer pad_until "," raise ","buffer get_length_in_bits ","buffer get_length_in_bits > ","buffer end_of_message ","data_list write ","QRBitBuffer  new ","QRCode  count_max_data_bits ","QRRSBlock  get_rs_blocks ","QRBitBuffer  new  pad_until ","QRBitBuffer  new  get_length_in_bits ","QRBitBuffer  new  get_length_in_bits > ","QRBitBuffer  new  end_of_message ","QRCode  count_QRCode  count_max_data_bits  ","QRRSBlock  get_QRRSBlock  get_rs_blocks  "]}," RQRCodeCore QRCode count_max_data_bits":{"type":"method","name":"count_max_data_bits","children":[],"call":["max_data_bytes * ","sum + ","rs_block data_count ","rs_blocks reduce "]}," RQRCodeCore QRCode smallest_size_for":{"type":"method","name":"smallest_size_for","children":[],"call":["ver + "," raise ","i >= ","max_size_array index ","string bytesize "]}," RQRCodeCore QRCode map_data":{"type":"method","name":"map_data","children":[],"call":["inc -@ ","@module_count <= ","row < ","bit_index == ","@modules [] []= ","col - ","@modules [] ","dark ! ","QRUtil  get_mask ","(send\n  (send\n    (begin\n      (send\n        (lvar :data) :[]\n        (lvar :byte_index))) :rszf\n    (lvar :bit_index)) :&\n  (int 1)) == ","(send\n  (lvar :data) :[]\n  (lvar :byte_index)) rszf & ","(send\n  (lvar :data) :[]\n  (lvar :byte_index)) rszf ","data [] ","data [] nil? ! ","data [] nil? ","byte_index < ","data size ","@modules [] [] nil? ","@modules [] [] ","(erange\n  (int 0)\n  (int 2)) each ","col <= ","(send\n  (ivar :@module_count) :-\n  (int 1)) step ","@module_count - ","(send\n  (send\n    (const nil :QRUtil) :rszf\n    (send\n      (lvar :data) :[]\n      (lvar :byte_index))\n    (lvar :bit_index)) :&\n  (int 1)) == ","QRUtil  rszf & ","QRUtil  rszf "," loop ","inc -@  -@ ","@module_count -  < ","col -  - ","dark !  ! ","QRUtil  get_QRUtil  get_mask  ","col -  <= "]}," RQRCodeCore QRCode place_format_info":{"type":"method","name":"place_format_info","children":[],"call":["@modules [] []= ","test ! ","@modules [] ","@module_count - ","15 - - ","15 - ","15 - - + ","i < ","@module_count - - ","@module_count - + ","i + ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","QRFORMATINFOLENGTH  times ","QRUtil  get_bch_format_info ","@error_correct_level << | ","@error_correct_level << ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_format_info ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_format_info ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_format_info  >> "]}," RQRCodeCore QRCode place_version_info":{"type":"method","name":"place_version_info","children":[],"call":["@modules [] []= ","(send\n  (lvar :i) :/\n  (int 3)) floor ","i / ","@modules [] ","i % + - - ","i % + - ","i % + ","i % ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","test ! ","(erange\n  (int 0)\n  (int 18)) each ","QRUtil  get_bch_version ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_version ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_version ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_version  >> "]}," RQRCodeCore QRCode place_position_adjust_pattern":{"type":"method","name":"place_position_adjust_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c == ","r == ","c abs == ","c abs ","r abs == ","r abs ","(irange\n  (int -2)\n  (int 2)) each ","@modules [] [] nil? ","@modules [] [] ","positions each ","QRUtil  get_pattern_positions ","QRUtil  get_pattern_positions  each ","QRUtil  get_pattern_QRUtil  get_pattern_positions  "]}," RQRCodeCore QRCode place_timing_pattern":{"type":"method","name":"place_timing_pattern","children":[],"call":["@modules [] []= ","i % == ","i % ","@modules [] ","(erange\n  (int 8)\n  (send\n    (ivar :@module_count) :-\n    (int 8))) each ","@module_count - "]}," RQRCodeCore QRCode get_best_mask_pattern":{"type":"method","name":"get_best_mask_pattern","children":[],"call":["min_lost_point > ","i == ","QRUtil  get_lost_points "," modules "," make_impl ","(erange\n  (int 0)\n  (int 8)) each ","min_QRUtil  get_lost_points  > ","QRUtil  get_QRUtil  get_lost_points s "]}," RQRCodeCore QRCode place_position_probe_pattern":{"type":"method","name":"place_position_probe_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c between? ","r between? ","r == ","c == ","(send\n  (lvar :col) :+\n  (lvar :c)) between? ! ","(send\n  (lvar :col) :+\n  (lvar :c)) between? ","@module_count - ","(irange\n  (int -1)\n  (int 7)) each ","(send\n  (lvar :row) :+\n  (lvar :r)) between? ! ","(send\n  (lvar :row) :+\n  (lvar :r)) between? "]}," RQRCodeCore QRCode make_impl":{"type":"method","name":"make_impl","children":[],"call":[" map_data ","QRCode  create_data ","@data_cache nil? "," place_version_info ","@version >= "," place_format_info ","@common_patterns map ","QRCode  create_data  nil? "]}," RQRCodeCore QRCode prepare_common_patterns":{"type":"method","name":"prepare_common_patterns","children":[],"call":["@modules map "," place_timing_pattern "," place_position_adjust_pattern "," place_position_probe_pattern ","@module_count - ","Array  new ","@modules map! "]}," RQRCodeCore QRCode make":{"type":"method","name":"make","children":[],"call":[" make_impl "," get_best_mask_pattern "," prepare_common_patterns "]}," RQRCodeCore QRCode mode":{"type":"method","name":"mode","children":[],"call":[]}," RQRCodeCore QRCode error_correction_level":{"type":"method","name":"error_correction_level","children":[],"call":["QRERRORCORRECTLEVEL  invert [] ","QRERRORCORRECTLEVEL  invert "]}," RQRCodeCore QRCode inspect":{"type":"method","name":"inspect","children":[],"call":[]}," RQRCodeCore QRCode to_s":{"type":"method","name":"to_s","children":[],"call":["rows join ","rows << ","light * ","rows first length / ","light size ","rows first length ","rows first ","rows unshift ","quiet_zone_size times ","row each ","@modules each ","options [] ","args extract_options! "," extract_options! ","args extract_options!  [] "," extract_options!  [] ","args extract_args extract_options! ! ","args extract_ extract_options! ! "," extract_args extract_options! ! "," extract_ extract_options! ! "]}," RQRCodeCore QRCode checked?":{"type":"method","name":"checked?","children":[],"call":["@modules [] [] ","@modules [] "," raise ","col between? ! ","col between? ","@module_count - ","row between? ! ","row between? "]}," RQRCodeCore QRCode initialize":{"type":"method","name":"initialize","children":[],"call":[" make ","QR8bitByte  new ","QRAlphanumeric  new ","QRNumeric  new ","Array  new ","@version * + ","@version * ","QRERRORCORRECTLEVEL  [] "," raise ","QRUtil  max_size ","size > "," smallest_size_for ","options [] ","QRMAXDIGITS  [] [] ","QRMAXDIGITS  [] ","QRMODE_NAME  [] ","QRAlphanumeric  valid_data? ","RQRCodeCore QRNumeric  valid_data? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :mode))\n  (str \"\")) to_sym ","level inspect ","QRERRORCORRECTLEVEL  has_key? ! ","QRERRORCORRECTLEVEL  has_key? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym ","args extract_options! ","string class ","string is_a? ! ","string is_a? "," extract_options! ","@data writer ","QRMulti  new "," multi_segment? "," minimum_version ","QRSegment  new ","data map ","seg key? ","(sym :data) all? ","seg is_a? ","data all? ","args extract_options!  [] "," extract_options!  [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :QRMODE_NAME  [] ))\n  (str \"\")) to_sym ","(or\n  (send\n    (lvar :args extract_options! ) :[]\n    (sym :mode))\n  (str \"\")) to_sym ","(or\n  (send\n    (lvar : extract_options! ) :[]\n    (sym :mode))\n  (str \"\")) to_sym ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym  inspect ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym ))\n  (sym :h)) to_sym ","(or\n  (send\n    (lvar :args extract_options! ) :[]\n    (sym :level))\n  (sym :h)) to_sym ","(or\n  (send\n    (lvar : extract_options! ) :[]\n    (sym :level))\n  (sym :h)) to_sym ","args extract_args extract_options! ! ","args extract_ extract_options! ! "," extract_args extract_options! ! "," extract_ extract_options! ! "]}," RQRCodeCore QRBitBuffer end_of_message":{"type":"method","name":"end_of_message","children":[],"call":[" put "," get_length_in_bits + > "," get_length_in_bits + "," get_length_in_bits "]}," RQRCodeCore QRBitBuffer pad_until":{"type":"method","name":"pad_until","children":[],"call":[" put "," get_length_in_bits < "," get_length_in_bits "," put_bit "," get_length_in_bits % != "," get_length_in_bits % "]}," RQRCodeCore QRBitBuffer numeric_encoding_start":{"type":"method","name":"numeric_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCodeCore QRBitBuffer alphanumeric_encoding_start":{"type":"method","name":"alphanumeric_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCodeCore QRBitBuffer byte_encoding_start":{"type":"method","name":"byte_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCodeCore QRBitBuffer put_bit":{"type":"method","name":"put_bit","children":[],"call":["(int 128) rszf ","@length % ","@buffer [] ","@buffer << ","@buffer size <= ","@buffer size ","(send\n  (ivar :@length) :/\n  (int 8)) floor ","@length / ","QRUtil  rszf "]}," RQRCodeCore QRBitBuffer get_length_in_bits":{"type":"method","name":"get_length_in_bits","children":[],"call":[]}," RQRCodeCore QRBitBuffer put":{"type":"method","name":"put","children":[],"call":[" put_bit ","(send\n  (begin\n    (send\n      (begin\n        (lvar :num)) :rszf\n      (send\n        (send\n          (lvar :length) :-\n          (lvar :i)) :-\n        (int 1)))) :&\n  (int 1)) == ","(send\n  (begin\n    (lvar :num)) :rszf\n  (send\n    (send\n      (lvar :length) :-\n      (lvar :i)) :-\n    (int 1))) & ","(lvar :num) rszf ","length - - ","length - ","(erange\n  (int 0)\n  (lvar :length)) each ","(send\n  (begin\n    (send\n      (const nil :QRUtil) :rszf\n      (lvar :num)\n      (send\n        (send\n          (lvar :length) :-\n          (lvar :i)) :-\n        (int 1)))) :&\n  (int 1)) == ","(send\n  (const nil :QRUtil) :rszf\n  (lvar :num)\n  (send\n    (send\n      (lvar :length) :-\n      (lvar :i)) :-\n    (int 1))) & ","QRUtil  rszf "]}," RQRCodeCore QRBitBuffer get":{"type":"method","name":"get","children":[],"call":["(send\n  (begin\n    (send\n      (begin\n        (send\n          (ivar :@buffer) :[]\n          (lvar :buf_index))) :rszf\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (begin\n    (send\n      (ivar :@buffer) :[]\n      (lvar :buf_index))) :rszf\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & ","(send\n  (ivar :@buffer) :[]\n  (lvar :buf_index)) rszf ","7 - ","index % ","@buffer [] ","(send\n  (lvar :index) :/\n  (int 8)) floor ","index / ","(send\n  (begin\n    (send\n      (const nil :QRUtil) :rszf\n      (send\n        (ivar :@buffer) :[]\n        (lvar :buf_index))\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (const nil :QRUtil) :rszf\n  (send\n    (ivar :@buffer) :[]\n    (lvar :buf_index))\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & ","QRUtil  rszf ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (ivar :@buffer) :[]\n          (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))) :rszf\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (begin\n    (send\n      (ivar :@buffer) :[]\n      (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))) :rszf\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & ","(send\n  (ivar :@buffer) :[]\n  (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor )) rszf ","(send\n  (begin\n    (send\n      (const nil :QRUtil) :rszf\n      (send\n        (ivar :@buffer) :[]\n        (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (const nil :QRUtil) :rszf\n  (send\n    (ivar :@buffer) :[]\n    (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & "]}," RQRCodeCore QRBitBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RQRCodeCore QRAlphanumeric write":{"type":"method","name":"write","children":[],"call":["buffer put ","(send\n  (send\n    (const nil :ALPHANUMERIC) :index\n    (send\n      (ivar :@data) :[]\n      (lvar :i))) :*\n  (int 45)) + ","ALPHANUMERIC  index ","@data [] ","i + ","ALPHANUMERIC  index * ","i == ","@data size - ","@data size ","i % == ","i % ","(send\n  (ivar :@data) :size) times ","buffer alphanumeric_encoding_start "," get_length ","@data size times "]}," RQRCodeCore QRAlphanumeric valid_data?":{"type":"method","name":"valid_data?","children":[],"call":[]}," RQRCodeCore QRAlphanumeric get_length":{"type":"method","name":"get_length","children":[],"call":["@data size "]}," RQRCodeCore QRAlphanumeric initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","QRAlphanumeric  valid_data? ","QRMODE  [] "]}," RQRCodeCore QR8bitByte write":{"type":"method","name":"write","children":[],"call":["buffer put ","@data each_byte ","buffer byte_encoding_start "," get_length ","@data bytesize "]}," RQRCodeCore QR8bitByte get_length":{"type":"method","name":"get_length","children":[],"call":["@data bytesize "]}," RQRCodeCore QR8bitByte initialize":{"type":"method","name":"initialize","children":[],"call":["QRMODE  [] "]}," RQRCodeCore CoreExtensions Integer Bitwise rszf":{"type":"method","name":"rszf","children":[],"call":["(send\n  (self) :>>\n  (lvar :count)) & ","(send\n  (int 2) :**\n  (begin\n    (send\n      (begin\n        (send\n          (send\n            (self) :size) :*\n          (int 8))) :-\n      (lvar :count)))) - ","2 ** ","(send\n  (send\n    (self) :size) :*\n  (int 8)) - "," size * "," size "," >> "]}," RQRCodeCore CoreExtensions Array Behavior extract_options!":{"type":"method","name":"extract_options!","children":[],"call":[" pop "," last is_a? "," last "]}," RQRCodeCore QRUtil rszf":{"type":"method","name":"rszf","children":[],"call":[]}," RQRCodeCore QRCode extract_options!":{"type":"method","name":"extract_options!","children":[],"call":["arr pop ","arr last is_a? ","arr last "]}," RQRCodeCore QRSegment data_length":{"type":"method","name":"data_length","children":[],"call":[" data bytesize "," data "]}," RQRCodeCore QRSegment writer":{"type":"method","name":"writer","children":[],"call":["QR8bitByte  new "," data ","QRMulti  new ","QRAlphanumeric  new ","QRNumeric  new "," mode "]}," RQRCodeCore QRSegment content_size":{"type":"method","name":"content_size","children":[],"call":["(send\n  (send nil :data_length) :/\n  (lvar :chunk_size)) * + ","(send\n  (send nil :data_length) :%\n  (lvar :chunk_size)) == "," data_length % "," data_length ","(send\n  (send nil :data_length) :/\n  (lvar :chunk_size)) * "," data_length / ","QRNumeric NUMBER_LENGTH  [] "," mode "]}," RQRCodeCore QRSegment header_size":{"type":"method","name":"header_size","children":[],"call":["QRUtil  get_length_in_bits ","QRMODE  [] "," mode "]}," RQRCodeCore QRSegment size":{"type":"method","name":"size","children":[],"call":["4 + + "," content_size ","4 + "," header_size "]}," RQRCodeCore QRSegment initialize":{"type":"method","name":"initialize","children":[],"call":["QRMODE_NAME  [] ","QRAlphanumeric  valid_data? ","RQRCodeCore QRNumeric  valid_data? ","QRMODE_NAME  dig "]}," RQRCodeCore QRMulti write":{"type":"method","name":"write","children":[],"call":["seg writer write ","seg writer ","@data each "]}," RQRCodeCore QRMulti initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RQRCodeCore QRCode minimum_version":{"type":"method","name":"minimum_version","children":[],"call":[" minimum_version ","version + ","size_bits < ","@data size ","seg size ","@data sum "," multi_segment? ","QRMAXBITS  [] [] ","version - ","QRMAXBITS  [] "," error_correction_level "," raise ","version > ","@data size  < "]}," RQRCodeCore QRCode multi_segment?":{"type":"method","name":"multi_segment?","children":[],"call":["@data is_a? "]}}