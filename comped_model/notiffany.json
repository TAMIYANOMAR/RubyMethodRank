{" Notiffany Notifier _client?":{"type":"method","name":"_client?","children":[],"call":["pid != "," _env notify_pid "," _env "," _env notify_pid  != "," _env notify_ _env notify_pid  "]}," Notiffany Notifier _check_server!":{"type":"method","name":"_check_server!","children":[],"call":[" fail "," _client? "]}," Notiffany Notifier _env":{"type":"method","name":"_env","children":[],"call":["Env  new "," config env_namespace "," config "]}," Notiffany Notifier available":{"type":"method","name":"available","children":[],"call":["@detected available "]}," Notiffany Notifier notify":{"type":"method","name":"notify","children":[],"call":["notifier notify ","message_opts dup ","@detected available each ","@detected available "," active? "," enabled? "," _client? "]}," Notiffany Notifier active?":{"type":"method","name":"active?","children":[],"call":[" _env notify_active? "," _env "]}," Notiffany Notifier enabled?":{"type":"method","name":"enabled?","children":[],"call":[" _env notify? "," _env "]}," Notiffany Notifier turn_off":{"type":"method","name":"turn_off","children":[],"call":[" _env notify_active= "," _env ","obj turn_off ","obj respond_to? ","@detected available each ","@detected available "," fail "," active? "," _check_server! "]}," Notiffany Notifier turn_on":{"type":"method","name":"turn_on","children":[],"call":[" _env notify_active= "," _env ","obj turn_on ","obj respond_to? ","@logger debug "," format ","obj title ","@detected available each ","@detected available ","options [] "," fail "," active? "," enabled? "," _check_server! "," _turn_on_notifiers "]}," Notiffany Notifier disconnect":{"type":"method","name":"disconnect","children":[],"call":[" _env notify_pid= "," _env ","@detected reset ","@detected nil? "," turn_off "," active? "," _client? "]}," Notiffany Notifier initialize":{"type":"method","name":"initialize","children":[],"call":["@logger info ","e to_s "," turn_on ","@detected detect ","@detected add ","notifiers each ","notifiers any? ","opts fetch ","options [] "," enabled? ","DEFAULTS  merge "," fail "," active? "," _env notify_pid= "," _env "," _client? ","Detected  new ","l level= ","Logger  new tap ","Logger  new "," config logger info "," config logger "," config "," _activate "," config env_namespace ","Config  new ","Detected  new  detect ","Detected  new  add ","opts fetch  each ","opts fetch  any? ","DEFAULTS  merge  [] "]}," Notiffany connect":{"type":"method","name":"connect","children":[],"call":[]}," Notiffany Notifier Tmux client":{"type":"method","name":"client","children":[],"call":["options [] "]}," Notiffany Notifier Tmux _session":{"type":"method","name":"_session","children":[],"call":[]}," Notiffany Notifier Tmux _end_session":{"type":"method","name":"_end_session","children":[],"call":["@session close "," fail "]}," Notiffany Notifier Tmux _start_session":{"type":"method","name":"_start_session","children":[],"call":["Session  new "," fail "]}," Notiffany Notifier Tmux _tmux_color":{"type":"method","name":"_tmux_color","children":[],"call":["opts [] ","type to_sym ","type to_sym  to_sym "]}," Notiffany Notifier Tmux _display_message":{"type":"method","name":"_display_message","children":[],"call":["cl display_message ","cl message_bg= ","cl message_fg= ","cl display_time= ","display_time * ","Client  new "," client ","message_format % ","message split join ","message split "," _tmux_color ","opts fetch ","(begin\n  (lvar :type)) to_sym ","opts [] ","Client  new  display_message ","Client  new  message_bg= ","Client  new  message_fg= ","Client  new  display_time= ","cl opts [] = ","opts []  * "," Client  new ient ","opts fetch  % ","message_(begin\n  (lvar :type)) to_sym  % "," _tmux_ _tmux_color  "," _tmux_(begin\n  (lvar :type)) to_sym  "]}," Notiffany Notifier Tmux _display_title":{"type":"method","name":"_display_title","children":[],"call":["Client  new title= ","Client  new "," client ","title_format % ","message split first ","message split ","options fetch ","options [] ","(begin\n  (lvar :type)) to_sym ","options fetch  % ","title_(begin\n  (lvar :type)) to_sym  % "]}," Notiffany Notifier Tmux _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" _display_message "," _display_title ","Client  new set ","Client  new "," client ","locations each "," _tmux_color ","options [] ","options [] to_s "," Array ","tmux display_message ","tmux display_title ","tmux colorize ","Notification  new "," _options []  "," _display_options []  "," Array  each "," _tmux_ _tmux_color  "," _Notification  new _color ","tmux options []  ","Notification  new  display_message ","tmux display_options []  ","Notification  new  display_title ","tmux  _tmux_color ize ","Notification  new  colorize "]}," Notiffany Notifier Tmux _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail ","e message "," format ","version < ","Client  version ","ENV  key? ","opts [] ","Client  version  < ","Client  Client  version  "]}," Notiffany Notifier Tmux _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier Tmux turn_off":{"type":"method","name":"turn_off","children":[],"call":[" class _end_session "," class "]}," Notiffany Notifier Tmux turn_on":{"type":"method","name":"turn_on","children":[],"call":[" class _start_session "," class "]}," Notiffany Notifier Tmux Session close":{"type":"method","name":"close","children":[],"call":["Client  new unset ","Client  new ","options each ","@options_store each "]}," Notiffany Notifier Tmux Session initialize":{"type":"method","name":"initialize","children":[],"call":["@options_store []= ","(pair\n  (str \"status-left-bg\")\n  (nil)) merge ","Client  new parse_options ","Client  new ","Client  new clients each ","Client  new clients "]}," Notiffany Notifier Tmux Client _parse_option":{"type":"method","name":"_parse_option","children":[],"call":["line partition map reject ","line partition map ","line partition "]}," Notiffany Notifier Tmux Client _capture":{"type":"method","name":"_capture","children":[],"call":[" class _capture "," class ","Shellany Sheller  stdout ","(send\n  (array\n    (const nil :CLIENT)) :+\n  (lvar :args)) join ","(const nil :CLIENT) + "]}," Notiffany Notifier Tmux Client _run":{"type":"method","name":"_run","children":[],"call":[" class _run "," class ","Shellany Sheller  run ","(send\n  (array\n    (const nil :CLIENT)) :+\n  (lvar :args)) join ","(const nil :CLIENT) + "]}," Notiffany Notifier Tmux Client title=":{"type":"method","name":"title=","children":[],"call":[" set "]}," Notiffany Notifier Tmux Client display_time=":{"type":"method","name":"display_time=","children":[],"call":[" set "]}," Notiffany Notifier Tmux Client message_bg=":{"type":"method","name":"message_bg=","children":[],"call":[" set "]}," Notiffany Notifier Tmux Client message_fg=":{"type":"method","name":"message_fg=","children":[],"call":[" set "]}," Notiffany Notifier Tmux Client parse_options":{"type":"method","name":"parse_options","children":[],"call":["Hash  [] "," _parse_option ","output lines map ","output lines "," _capture "," _capture  lines map "," _capture  lines "]}," Notiffany Notifier Tmux Client unset":{"type":"method","name":"unset","children":[],"call":[" _run ","client strip "," clients each "," clients "," _all_args_for "]}," Notiffany Notifier Tmux Client display_message":{"type":"method","name":"display_message","children":[],"call":[" _run ","client strip "," clients each "," clients "]}," Notiffany Notifier Tmux Client set":{"type":"method","name":"set","children":[],"call":[" _run ","client strip "," clients each "," clients "]}," Notiffany Notifier Tmux Client clients":{"type":"method","name":"clients","children":[],"call":["ttys delete ","ttys split "," _capture ","@client == ","ttys split  delete "," _capture  delete ","ttys split  split "," _capture  split "]}," Notiffany Notifier Tmux Client initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Notiffany Notifier Tmux Client version":{"type":"method","name":"version","children":[],"call":[" Float "," _capture [] "," _capture "," raise "]}," Notiffany Notifier TerminalTitle _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":["STDOUT  puts ","opts [] ","message sub sub ","message sub "]}," Notiffany Notifier TerminalTitle _check_available":{"type":"method","name":"_check_available","children":[],"call":[]}," Notiffany Notifier TerminalTitle _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier TerminalTitle turn_off":{"type":"method","name":"turn_off","children":[],"call":["STDOUT  puts "]}," Notiffany Notifier TerminalNotifier _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" TerminalNotifier Guard  execute ","opts delete ","opts [] ","opts []= ","(pair\n  (sym :title)\n  (lvar :title)) merge ","(send\n  (lvar :opts) :[]\n  (sym :app_name)) join ","opts [] downcase capitalize ","opts [] downcase ","(pair\n  (sym :title)\n  (lvar :title)) merge  delete ","(pair\n  (sym :title)\n  (lvar :title)) merge  [] ","(pair\n  (sym :title)\n  (lvar :title)) merge  []= ","(pair\n  (sym :(send\n  (lvar :opts) :[]\n  (sym :app_name)) join )\n  (lvar :(send\n  (lvar :opts) :[]\n  (sym :app_name)) join )) merge ","(send\n  (lvar :(pair\n  (sym :title)\n  (lvar :title)) merge ) :[]\n  (sym :app_name)) join ","(pair\n  (sym :title)\n  (lvar :title)) merge  [] downcase capitalize ","(pair\n  (sym :title)\n  (lvar :title)) merge  [] downcase "]}," Notiffany Notifier TerminalNotifier _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail "," TerminalNotifier Guard  available? "]}," Notiffany Notifier TerminalNotifier _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier TerminalNotifier _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier Notifu _notifu_type":{"type":"method","name":"_notifu_type","children":[],"call":["type to_sym "]}," Notiffany Notifier Notifu _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" Notifu  show ","options []= "," _notifu_type ","opts [] ","opts dup ","opts dup  []= "]}," Notiffany Notifier Notifu _check_available":{"type":"method","name":"_check_available","children":[],"call":[]}," Notiffany Notifier Notifu _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier Notifu _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier NotifySend _to_arguments":{"type":"method","name":"_to_arguments","children":[],"call":["cmd << << ","value to_s ","cmd << ","supported include? ","opts inject "]}," Notiffany Notifier NotifySend _notifysend_urgency":{"type":"method","name":"_notifysend_urgency","children":[],"call":["(pair\n  (sym :failed)\n  (str \"normal\")) fetch "]}," Notiffany Notifier NotifySend _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":["Shellany Sheller  run "," _to_arguments ","opts merge "," _notifysend_urgency ","opts [] ","opts merge  merge ","opts merge  [] "]}," Notiffany Notifier NotifySend _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail ","Shellany Sheller  stdout empty? ","Shellany Sheller  stdout ","which empty? ","which nil? ","Shellany Sheller  stdout  empty? ","Shellany Sheller  stdout  nil? "]}," Notiffany Notifier NotifySend _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier Libnotify _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" Libnotify  show ","opts merge ","opts [] == ","opts [] ","opts merge  merge ","opts merge  [] == ","opts merge  [] "]}," Notiffany Notifier Libnotify _check_available":{"type":"method","name":"_check_available","children":[],"call":[]}," Notiffany Notifier Libnotify _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier Growl _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" Growl  notify ","(pair\n  (sym :name)\n  (str \"Notiffany\")) merge "," Growl Base  switches include? "," Growl Base  switches ","opts select! ","(pair\n  (sym :name)\n  (str \"Notiffany\")) merge  select! "]}," Notiffany Notifier Growl _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail "," Growl  installed? "]}," Notiffany Notifier Growl _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier GNTP _gntp_client":{"type":"method","name":"_gntp_client","children":[],"call":["gntp register "," _image_path "," GNTP  new ","CLIENT_DEFAULTS  [] ","opts fetch "," GNTP  new  register "]}," Notiffany Notifier GNTP _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" _gntp_client notify "," _gntp_client ","(pair\n  (sym :name)\n  (send\n    (send\n      (lvar :opts) :[]\n      (sym :type)) :to_s)) merge ","opts [] ","opts [] to_s ","(pair\n  (sym :name)\n  (send\n    (send\n      (lvar :(pair\n  (sym :name)\n  (send\n    (send\n      (lvar :opts) :[]\n      (sym :type)) :to_s)) merge ) :[]\n      (sym :type)) :to_s)) merge ","(pair\n  (sym :name)\n  (send\n    (send\n      (lvar :opts) :[]\n      (sym :type)) :to_s)) merge  [] ","(pair\n  (sym :name)\n  (send\n    (send\n      (lvar :opts) :[]\n      (sym :type)) :to_s)) merge  [] to_s "]}," Notiffany Notifier GNTP _check_available":{"type":"method","name":"_check_available","children":[],"call":[]}," Notiffany Notifier GNTP _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier GNTP _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier File _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier File _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" File  write ","format % ","opts [] "," fail "," format ","opts []  % "," opts []  "]}," Notiffany Notifier File _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail ","opts [] "]}," Notiffany Notifier Emacs _emacs_color":{"type":"method","name":"_emacs_color","children":[],"call":["options fetch ","type to_sym ","DEFAULTS  [] "]}," Notiffany Notifier Emacs _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":["Client  new notify ","Client  new "," _emacs_color ","opts [] ","opts merge "," _erb_for "," _emacs_ _emacs_color  ","opts merge  [] ","opts merge  merge "]}," Notiffany Notifier Emacs _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail ","Client  new available? ","Client  new "," raise ","options merge "]}," Notiffany Notifier Emacs _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier Emacs Client emacs_eval":{"type":"method","name":"emacs_eval","children":[],"call":["Shellany Sheller  run "]}," Notiffany Notifier Emacs Client notify":{"type":"method","name":"notify","children":[],"call":[" emacs_eval ","(str \"            (set-face-attribute 'mode-line nil\\n\") gsub strip ","(str \"            (set-face-attribute 'mode-line nil\\n\") gsub "," _emacs_eval ","Elisp  new result ","Elisp  new "," elisp_erb "," (str \"            (set-face-attribute 'mode-line nil\\n\") gsub strip _erb "," Elisp  new result _erb "]}," Notiffany Notifier Emacs Client available?":{"type":"method","name":"available?","children":[],"call":[" emacs_eval "," _emacs_eval ","Elisp  new result ","Elisp  new "]}," Notiffany Notifier Emacs Client initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," raise "," elisp_erb "]}," Notiffany Notifier Detected _data":{"type":"method","name":"_data","children":[],"call":["@environment notifiers "]}," Notiffany Notifier Detected _to_module":{"type":"method","name":"_to_module","children":[],"call":["notifier last ","n == ","group detect ","@supported each "]}," Notiffany Notifier Detected add":{"type":"method","name":"add","children":[],"call":["item []= ","item [] == ","item [] ","all each ","@environment notifiers= ","all << ","klass new "," fail "," _to_module ","names include? ","all map map ","all map ","@environment notifiers "," _notifiers ","@logger warning ","e message "," _add ","@environment notifiers  each "," _notifiers  each ","@environment notifiers  << "," _notifiers  << "," _to_module  new ","all map map  include? ","@environment notifiers  map map "," _notifiers  map map ","@environment notifiers  map "," _notifiers  map "]}," Notiffany Notifier Detected available":{"type":"method","name":"available","children":[],"call":[" _to_module new ","entry [] "," _to_module "," _data map "," _data "," _notifiers map "," _notifiers "]}," Notiffany Notifier Detected detect":{"type":"method","name":"detect","children":[],"call":[" fail "," _data empty? "," _data ","@logger debug ","e message "," add ","group detect ","@supported each "," _notifiers empty? "," _notifiers "," _add "]}," Notiffany Notifier Detected reset":{"type":"method","name":"reset","children":[],"call":["@environment notifiers= "]}," Notiffany Notifier Detected initialize":{"type":"method","name":"initialize","children":[],"call":["YamlEnvStorage  new "]}," Notiffany Notifier Detected UnknownNotifier message":{"type":"method","name":"message","children":[],"call":["@name inspect "]}," Notiffany Notifier Detected UnknownNotifier name":{"type":"method","name":"name","children":[],"call":[]}," Notiffany Notifier Detected UnknownNotifier initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Notiffany Notifier Base _require_gem":{"type":"method","name":"_require_gem","children":[],"call":[" fail "," _gem_name ","Kernel  require "," _gem_name nil? "]}," Notiffany Notifier Base _check_host_supported":{"type":"method","name":"_check_host_supported","children":[],"call":[" fail ","expr match ","RbConfig CONFIG  [] "," _supported_hosts * "," _supported_hosts "," _supported_hosts == "]}," Notiffany Notifier Base _notify_options":{"type":"method","name":"_notify_options","children":[],"call":["opts []= "," _image_path "," _notification_type ","opts [] ","opts fetch ","@options merge ","@options merge  []= ","@options merge  [] ","@options merge  fetch "]}," Notiffany Notifier Base _notification_type":{"type":"method","name":"_notification_type","children":[],"call":["(sym :failed) include? "]}," Notiffany Notifier Base _perform_notify":{"type":"method","name":"_perform_notify","children":[],"call":[" fail "]}," Notiffany Notifier Base _check_available":{"type":"method","name":"_check_available","children":[],"call":[" fail "]}," Notiffany Notifier Base _supported_hosts":{"type":"method","name":"_supported_hosts","children":[],"call":[]}," Notiffany Notifier Base _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[" name "]}," Notiffany Notifier Base _image_path":{"type":"method","name":"_image_path","children":[],"call":["@images_path join to_s ","@images_path join ","images include? "]}," Notiffany Notifier Base notify":{"type":"method","name":"notify","children":[],"call":[" _perform_notify "," _notify_options freeze "," _notify_options "]}," Notiffany Notifier Base name":{"type":"method","name":"name","children":[],"call":[" title gsub downcase "," title gsub "," title "]}," Notiffany Notifier Base title":{"type":"method","name":"title","children":[],"call":[" class to_s [] "," class to_s "," class "]}," Notiffany Notifier Base initialize":{"type":"method","name":"initialize","children":[],"call":[" _check_available "," _require_gem "," _check_host_supported ","Pathname  new dirname + ","Pathname  new dirname ","Pathname  new ","(pair\n  (sym :title)\n  (str \"Notiffany\")) merge merge freeze ","(pair\n  (sym :title)\n  (str \"Notiffany\")) merge merge ","(pair\n  (sym :title)\n  (str \"Notiffany\")) merge "," class const_get "," class ","options delete ","opts dup ","opts dup  delete "]}," Notiffany Notifier Base UnsupportedPlatform initialize":{"type":"method","name":"initialize","children":[],"call":["RbConfig CONFIG  [] inspect ","RbConfig CONFIG  [] "]}," Notiffany Notifier Base RequireFailed initialize":{"type":"method","name":"initialize","children":[],"call":["ERROR_ADD_GEM_AND_RUN_BUNDLE  % "]}," Notiffany Notifier Base UnavailableError message":{"type":"method","name":"message","children":[],"call":[]}," Notiffany Notifier Base UnavailableError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Notiffany Notifier NotifySend _gem_name":{"type":"method","name":"_gem_name","children":[],"call":[]}," Notiffany Notifier Detected _notifiers":{"type":"method","name":"_notifiers","children":[],"call":["@environment notifiers "]}," Notiffany Notifier _turn_on_notifiers":{"type":"method","name":"_turn_on_notifiers","children":[],"call":["obj turn_on ","obj respond_to? "," config logger debug "," format ","obj title "," config logger "," config ","@detected available each ","@detected available ","options [] "]}," Notiffany Notifier _activate":{"type":"method","name":"_activate","children":[],"call":[" turn_on "," _detect_or_add_notifiers "," _notification_wanted? "," fail "," active? "," _env notify_pid= "," _env "]}," Notiffany Notifier _notification_wanted?":{"type":"method","name":"_notification_wanted?","children":[],"call":[" config notify? "," config "," enabled? "]}," Notiffany Notifier _detect_or_add_notifiers":{"type":"method","name":"_detect_or_add_notifiers","children":[],"call":["@detected add ","notifiers each ","@detected detect ","notifiers empty? "," config notifiers "," config "," config notifiers  each "," config notifiers  empty? "," config  config notifiers  "]}," Notiffany Notifier Tmux Notification _message_for":{"type":"method","name":"_message_for","children":[],"call":[" format ","message split join "," separator ","message split "," _value_for "]}," Notiffany Notifier Tmux Notification _value_for":{"type":"method","name":"_value_for","children":[],"call":[" options fetch "," options "," options [] ","(str \"default_\") to_sym ","(begin\n  (send nil :type)) to_sym "," type ","(str \" options [] _\") to_sym "]}," Notiffany Notifier Tmux Notification colorize":{"type":"method","name":"colorize","children":[],"call":[" client set "," color "," client ","locations each "]}," Notiffany Notifier Tmux Notification display_message":{"type":"method","name":"display_message","children":[],"call":[" client display_message "," client "," client message_bg= "," color "," client message_fg= "," message_color "," client display_time= "," options [] * "," options [] "," options "," _message_for "," client display_ _message_for  "," client  _message_for _bg= "," client  _message_for _fg= ","  _message_for _color "," _ _message_for _for "]}," Notiffany Notifier Tmux Notification display_title":{"type":"method","name":"display_title","children":[],"call":[" client title= "," client "," format ","message split first ","message split "," _value_for "]}," Notiffany Notifier Tmux Notification initialize":{"type":"method","name":"initialize","children":[],"call":["Client  new ","options [] "," _value_for ","type to_sym "]}," Notiffany Notifier Tmux Client _all_args_for":{"type":"method","name":"_all_args_for","children":[],"call":["(lvar :value) compact ","client strip "]}," Notiffany Notifier Emacs _erb_for":{"type":"method","name":"_erb_for","children":[],"call":["IO  read "," File  expand_path "]}," Notiffany Notifier Emacs Client _emacs_eval":{"type":"method","name":"_emacs_eval","children":[],"call":["Shellany Sheller  run "]}," Notiffany Notifier Emacs Client Elisp result":{"type":"method","name":"result","children":[],"call":[" binding "]}," Notiffany Notifier Emacs Client Elisp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Notiffany Notifier Detected _add":{"type":"method","name":"_add","children":[],"call":["item []= ","item [] == ","item [] ","all each ","@environment notifiers= ","all << ","klass new "," fail "," _to_module ","names include? ","all map map ","all map "," _notifiers "," _notifiers  each "," _notifiers  << "," _to_module  new ","all map map  include? "," _notifiers  map map "," _notifiers  map "]}," Notiffany Notifier Config _setup_logger":{"type":"method","name":"_setup_logger","children":[],"call":["l level= ","Logger  new tap ","Logger  new ","opts fetch "]}," Notiffany Notifier Config notify?":{"type":"method","name":"notify?","children":[],"call":[]}," Notiffany Notifier Config initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch ","options [] "," _setup_logger ","DEFAULTS  merge ","DEFAULTS  merge  [] "]}}