{" Listen to":{"type":"method","name":"to","children":[],"call":[" _add_listener ","(lvar :target) + ","options delete ","args last ","args last is_a? ","Celluloid  boot ","Celluloid  running? ","Listener  new ","TCP Listener  new "," boot_celluloid "," require ","@listeners << ","Listener  new tap ","@listeners enq ","WeakRef  new ","(lvar :options delete ) + ","args last  delete "]}," Listen Listener relative_path":{"type":"method","name":"relative_path","children":[],"call":["path sub ","directory sub "]}," Listen Listener detect_additions":{"type":"method","name":"detect_additions","children":[],"call":[" insert_path ","@changes [] << "," relative_path ","@changes [] ","File  file? ","@paths [] [] ","File  basename ","@paths [] ","File  dirname "," all_existing_paths "," filtered_file? "," ignored_path? ! "," ignored_path? "," existing_path? ! "," existing_path? ","Find  prune ","options [] ! ","options [] ","directory != ","File  directory? ","@directory == ","Find  find "]}," Listen Listener detect_modifications_and_removals":{"type":"method","name":"detect_modifications_and_removals","children":[],"call":["@changes [] << "," relative_path ","@changes [] ","@paths [] delete ","@paths [] ","@paths [] []= ","stat mtime != ","new_stat mtime ","stat mtime ","File  stat ","File  exist? ","File  directory? "," detect_modifications_and_removals ","stat directory? ","File  join ","@paths [] each ","@sha1_checksums delete "," content_modified? ","@diffed_at == ","@diffed_at < ","File  mtime to_i ","File  mtime ","@paths delete ","options [] "," relative_File  join  ","@File  join s [] delete ","@File  join s [] ","@File  join s [] []= ","File  stat  mtime ","@File  join s [] each ","@File  join s delete "]}," Listen Listener insert_path":{"type":"method","name":"insert_path","children":[],"call":["@paths [] []= ","File  stat ","File  basename ","@paths [] ","File  dirname ","File  directory? "]}," Listen Listener all_existing_paths":{"type":"method","name":"all_existing_paths","children":[],"call":["path =~ ","@file_filters any? ","@file_filters empty? ","Find  prune ","@ignored_paths any? ","File  directory? ","Find  find "," filtered_file? "," ignored_path? ! "," ignored_path? ","@directory == "]}," Listen Listener diff":{"type":"method","name":"diff","children":[],"call":[" detect_additions "," detect_modifications_and_removals ","Time  now to_i ","Time  now ","directories each ","(send\n  (lvar :directories) :sort_by) reverse ","el length ","directories sort_by ","(send\n  (lvar :directories) :sort_by) reverse  each ","(send\n  (lvar :(send\n  (lvar :directories) :sort_by) reverse ) :sort_by) reverse ","(send\n  (lvar :directories) :sort_by) reverse  sort_by "]}," Listen Listener init_paths":{"type":"method","name":"init_paths","children":[],"call":[" insert_path "," all_existing_paths ","h []= ","Hash  new ","Time  now to_i ","Time  now "]}," Listen Listener on_change":{"type":"method","name":"on_change","children":[],"call":["@block call ","changes [] ","changes == "," diff ","paths empty? ","changes values all? ","changes values ","@directory_record fetch_changes ","options merge "," block call "," block "," fetch_records_changes ","Kernel  warn ","ex inspect ","ex backtrace join ","ex backtrace "," diff  [] ","@directory_record fetch_changes  [] "," fetch_records_changes  [] "," diff  == ","@directory_record fetch_changes  == "," fetch_records_changes  == "," diff  values all? ","@directory_record fetch_changes  values all? "," fetch_records_changes  values all? "," diff  values ","@directory_record fetch_changes  values "," fetch_records_changes  values ","@directory_record fetch_ diff  ","@directory_record fetch_@directory_record fetch_changes  ","@directory_record fetch_ fetch_records_changes  "," fetch_records_ diff  "," fetch_records_@directory_record fetch_changes  "," fetch_records_ fetch_records_changes  "]}," Listen Listener change":{"type":"method","name":"change","children":[],"call":[]}," Listen Listener filter":{"type":"method","name":"filter","children":[],"call":["@file_filters push ","@directory_record filter ","r filter "," directories_records each "," directories_records "]}," Listen Listener ignore":{"type":"method","name":"ignore","children":[],"call":["@ignored_paths push ","@directory_record ignore ","r ignore "," directories_records each "," directories_records ","Celluloid Actor  []= ","Silencer  new "," options "," options []= "," options [] ","@options []= "," _reconfigure_silencer "," registry []= "," registry ","@silencer_controller append_ignores "]}," Listen Listener stop":{"type":"method","name":"stop","children":[],"call":["@adapter stop "," adapter stop "," adapter ","Celluloid Actor  [] terminate ","Celluloid Actor  [] ","Celluloid Actor  kill "," thread kill "," thread ","@thread kill "," record terminate "," record "," thread join "," transition "," supervisor terminate "," supervisor "]}," Listen Listener start":{"type":"method","name":"start","children":[],"call":["@adapter start "," init_paths "," sleep ","@adapter nil? "," initialize_adapter ","Thread  new ","t join ","@directory_record build "," adapter start "," adapter "," setup ","Kernel  warn ","deprecated_blocking nil? "," _wait_for_changes ","Celluloid Actor  [] async start ","Celluloid Actor  [] async ","Celluloid Actor  [] "," unpause "," _init_actors "," _signals_trap "," adapter async start "," adapter async "," transition "," registry [] async start "," registry [] async "," registry [] "," registry "," state == "," state "," raise "," state inspect "," initialize_adapter  start "," initialize_adapter  nil? "]}," Listen Listener initialize":{"type":"method","name":"initialize","children":[],"call":["Adapter  select_and_initialize "," Array ","args [] [] ","args [] ","args first ","options delete ","options [] ","@directory_record filter ","@directory_record ignore ","DirectoryRecord  new ","Pathname  new realpath to_s ","Pathname  new realpath ","Pathname  new "," filter "," ignore "," initialize_relative_paths_usage "," initialize_directories_and_directories_records ","args flatten ","args pop ","args last is_a? ","args last "," _init_debug ","args flatten map "," _init_options "," transition ","Celluloid Registry  new ","Queue  new "," _init_tcp_options ","args shift ","(sym :recipient) include? "," _reconfigure_silencer ","Silencer  new "," _info ","Celluloid  logger level ","Celluloid  logger ","Celluloid  logger level= "," _debug_level ","Celluloid SupervisionGroup  run! "," _log ","Event Loop  new ","Event Config  new ","@backend min_delay_between_events ","QueueOptimizer  new ","QueueOptimizer Config  new ","Backend  new ","Silencer Controller  new ","@config silencer_rules ","@processor wakeup_on_event ","Event Queue  new ","Event Queue Config  new ","@config relative? ","Config  new ","dirs pop ","dirs last is_a? ","dirs last "," initialize_fsm ","args pop  delete ","dirs pop  delete ","args pop  [] ","dirs pop  [] ","args first _record filter ","Pathname  new realpath to_s _record filter ","DirectoryRecord  new  filter ","args first _record ignore ","Pathname  new realpath to_s _record ignore ","DirectoryRecord  new  ignore "," initialize_args flatten _and_args flatten _records "," _init_args pop  "," _init_dirs pop  "," _init_tcp_args pop  "," _init_tcp_dirs pop  "," _reconfigure_Silencer  new  ","Backend  new  min_delay_between_events ","@config silencer_@config silencer_rules  ","@config Silencer  new _rules ","Config  new  silencer_rules ","Event Loop  new  wakeup_on_event ","Config  new  relative? "]}," Listen Adapters Polling poll":{"type":"method","name":"poll","children":[],"call":[" sleep ","nap_time > ","@latency - ","Time  now to_f - ","Time  now to_f ","Time  now ","@listener on_change ","@listener directory ","@callback call ","@turnstile signal ","@directories dup ","@latency -  > "]}," Listen Adapters Polling stop":{"type":"method","name":"stop","children":[],"call":["@poll_thread join ","@stop == ","@mutex synchronize "]}," Listen Adapters Polling start":{"type":"method","name":"start","children":[],"call":[" poll ","@poll_thread join ","Thread  new ","@stop == ","@mutex synchronize "]}," Listen Adapters Polling initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Adapter initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","Turnstile  new ","Set  new ","Mutex  new "," Array ","options [] nil? "," initialize_worker ","options fetch "," default_latency "]}," Listen Adapter select_and_initialize":{"type":"method","name":"select_and_initialize","children":[],"call":[]}," Listen Listener filtered_file?":{"type":"method","name":"filtered_file?","children":[],"call":["path =~ ","@file_filters any? ","@file_filters empty? "]}," Listen Listener ignored_path?":{"type":"method","name":"ignored_path?","children":[],"call":["path =~ ","@ignored_paths any? "]}," Listen Listener content_modified?":{"type":"method","name":"content_modified?","children":[],"call":["@sha1_checksums []= ","@sha1_checksums [] != ","@sha1_checksums [] ","Digest SHA1  file to_s ","Digest SHA1  file ","@Digest SHA1  file to_s s []= ","@Digest SHA1  file to_s s [] != ","@Digest SHA1  file to_s s [] "]}," Listen Listener existing_path?":{"type":"method","name":"existing_path?","children":[],"call":["@paths [] [] != ","@paths [] [] ","File  basename ","@paths [] ","File  dirname "]}," Listen Adapters Windows poll_changed_dirs":{"type":"method","name":"poll_changed_dirs","children":[],"call":["@listener on_change ","@changed_dirs clear ","@changed_dirs to_a ","@changed_dirs empty? "," sleep ","@callback call ","@@changed_dirs to_a  clear ","@@changed_dirs to_a  to_a ","@@changed_dirs to_a  empty? "]}," Listen Adapters Windows init_worker":{"type":"method","name":"init_worker","children":[],"call":["@changed_dirs << ","File  expand_path ","event watcher path ","event watcher ","@worker watch ","@listener directory ","FChange Notifier  new ","worker add_watcher ","@mutex synchronize ","worker watch ","@directories each ","FChange Notifier  new tap ","worker watch_recursively ","WDM Monitor  new tap ","WDM Monitor  new ","File  dirname ","change path ","Proc  new ","FChange Notifier  new  watch ","@FChange Notifier  new  watch ","FChange Notifier  new  add_watcher ","FChange Notifier  new  watch_recursively "]}," Listen Adapters Windows usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapters Windows stop":{"type":"method","name":"stop","children":[],"call":["@worker stop ","@poll_thread join ","Thread  kill ","@stop == ","@mutex synchronize ","@worker_thread join "]}," Listen Adapters Windows start":{"type":"method","name":"start","children":[],"call":[" poll_changed_dirs ","@worker run ","Thread  new ","@poll_thread join ","@stop == ","@mutex synchronize ","@worker_thread join "," sleep ","@worker run! "]}," Listen Adapters Windows initialize":{"type":"method","name":"initialize","children":[],"call":[" init_worker ","Set  new "]}," Listen Adapters Linux poll_changed_dirs":{"type":"method","name":"poll_changed_dirs","children":[],"call":["@listener on_change ","@changed_dirs clear ","@changed_dirs to_a ","@changed_dirs empty? "," sleep ","@callback call ","@@changed_dirs to_a  clear ","@@changed_dirs to_a  to_a ","@@changed_dirs to_a  empty? "]}," Listen Adapters Linux init_worker":{"type":"method","name":"init_worker","children":[],"call":["@changed_dirs << ","File  dirname ","event absolute_name ","event name == ","event name ","@worker watch ","EVENTS  map ","@listener directory ","INotify Notifier  new ","@mutex synchronize ","event flags & != ","event flags & ","event flags ","event flags include? ","worker watch ","@directories each ","INotify Notifier  new tap "," lambda ","INotify Notifier  new  watch ","@INotify Notifier  new  watch "]}," Listen Adapters Linux usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapters Linux stop":{"type":"method","name":"stop","children":[],"call":["@worker stop ","@poll_thread join ","Thread  kill ","@stop == ","@mutex synchronize "]}," Listen Adapters Linux start":{"type":"method","name":"start","children":[],"call":[" poll_changed_dirs ","@worker run ","Thread  new ","@poll_thread join ","@stop == ","@mutex synchronize ","@worker_thread join "]}," Listen Adapters Linux initialize":{"type":"method","name":"initialize","children":[],"call":[" init_worker ","Set  new "," abort "]}," Listen Adapters Darwin init_worker":{"type":"method","name":"init_worker","children":[],"call":["@listener on_change ","path sub ","changed_dirs map! ","@worker watch ","@listener directory ","FSEvent  new ","@callback call ","@changed_dirs << ","changes each ","@mutex synchronize ","worker watch ","@directories dup ","FSEvent  new tap ","FSEvent  new  watch "]}," Listen Adapters Darwin usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapters Darwin stop":{"type":"method","name":"stop","children":[],"call":["@worker stop ","@poll_thread join ","Thread  kill ","@stop == ","@mutex synchronize ","@worker_thread join "]}," Listen Adapters Darwin start":{"type":"method","name":"start","children":[],"call":["@worker run ","@poll_thread join "," sleep "," poll_changed_dirs ","Thread  new ","@stop == ","@mutex synchronize ","@worker_thread join "]}," Listen Adapters Darwin initialize":{"type":"method","name":"initialize","children":[],"call":[" init_worker "]}," Listen Adapter stop":{"type":"method","name":"stop","children":[],"call":["@turnstile signal "," poller_thread join "," poller_thread ","Thread  kill "," worker_thread "," worker stop "," worker "," turnstile signal "," turnstile "," stopped "," mutex synchronize "," mutex "," poller_thread kill "]}," Listen Adapter start":{"type":"method","name":"start","children":[],"call":[" start_poller "," start_worker "," stopped "," mutex synchronize "," mutex "]}," Listen Listener initialize_adapter":{"type":"method","name":"initialize_adapter","children":[],"call":["Adapter  select_and_initialize "," on_change "," lambda "," adapter_options "," directories "]}," Listen Listener polling_fallback_message":{"type":"method","name":"polling_fallback_message","children":[],"call":["@adapter_options []= "]}," Listen Listener force_polling":{"type":"method","name":"force_polling","children":[],"call":["@adapter_options []= "]}," Listen Listener latency":{"type":"method","name":"latency","children":[],"call":["@adapter_options []= "]}," Listen Adapter work?":{"type":"method","name":"work?","children":[],"call":[]}," Listen Adapter usable_and_work?":{"type":"method","name":"usable_and_work?","children":[],"call":[]}," Listen Listener paused?":{"type":"method","name":"paused?","children":[],"call":["@paused == ","@adapter paused == ","@adapter paused ","@adapter nil? ! ","@adapter nil? ","@adapter ! ! ","@adapter ! "," adapter paused? "," adapter "," adapter ! ! "," adapter ! "," state == "," state "]}," Listen Listener unpause":{"type":"method","name":"unpause","children":[],"call":["@adapter start "," init_paths ","@adapter paused= ","@directory_record build "," adapter unpause "," adapter "," build_directories_records ","Celluloid Actor  [] build ","Celluloid Actor  [] "," _build_record_if_needed "," registry [] build "," registry [] "," registry "]}," Listen Listener pause":{"type":"method","name":"pause","children":[],"call":[" sleep ","@adapter stop ","@adapter paused= "," adapter pause "," adapter "," transition "]}," Listen Turnstile signal":{"type":"method","name":"signal","children":[],"call":["@q push ","@q num_waiting == ","@q num_waiting "," queue push "," queue "," queue num_waiting == "," queue num_waiting "]}," Listen Turnstile wait":{"type":"method","name":"wait","children":[],"call":["@q pop ","@q num_waiting == ","@q num_waiting "," queue pop "," queue "," queue num_waiting == "," queue num_waiting "]}," Listen Turnstile initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new "]}," Listen MultiListener fetch_records_changes":{"type":"method","name":"fetch_records_changes","children":[],"call":["record_changes [] ","h [] ","h each ","h merge! ","h empty? ","r fetch_changes ","options merge ","@directories_records inject ","r fetch_changes  [] "]}," Listen MultiListener initialize_adapter":{"type":"method","name":"initialize_adapter","children":[],"call":["Adapter  select_and_initialize "," on_change "," lambda "]}," Listen MultiListener on_change":{"type":"method","name":"on_change","children":[],"call":["@block call ","changes [] ","paths empty? ","changes values all? ","changes values "," fetch_records_changes "," fetch_records_changes  [] "," fetch_records_changes  values all? "," fetch_records_changes  values "," fetch_records_ fetch_records_changes  "]}," Listen MultiListener filter":{"type":"method","name":"filter","children":[],"call":["r filter ","@directories_records each "]}," Listen MultiListener ignore":{"type":"method","name":"ignore","children":[],"call":["r ignore ","@directories_records each "]}," Listen MultiListener unpause":{"type":"method","name":"unpause","children":[],"call":["@adapter paused= ","r build ","@directories_records each "]}," Listen MultiListener start":{"type":"method","name":"start","children":[],"call":["@adapter start ","t join ","r build ","@directories_records each "," initialize_adapter ","Thread  new "," initialize_adapter  start "]}," Listen MultiListener initialize":{"type":"method","name":"initialize","children":[],"call":[" filter ","options delete ","options [] "," ignore ","DirectoryRecord  new ","directories map ","args pop ","args last is_a? ","args last ","@directories map ","Pathname  new realpath to_s ","Pathname  new realpath ","Pathname  new ","Kernel  warn ","args pop  delete ","args pop  [] "]}," Listen DirectoryRecord relative_to_base":{"type":"method","name":"relative_to_base","children":[],"call":["path sub ","path [] ","Regexp  quote ","path force_encoding ","path respond_to? "," directory ","relative_path start_with? ","Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  new ","path sub! ","Regexp  new ","regexp force_encoding ","path dup ","path force_encoding  sub ","path dup  sub ","path force_encoding  [] ","path dup  [] ","path force_encoding  force_encoding ","path dup  force_encoding ","path force_encoding  respond_to? ","path dup  respond_to? ","relative_path force_encoding  start_with? ","relative_path dup  start_with? ","Pathname  new relative_path_from to_s  start_with? ","Pathname  new relative_path force_encoding _from to_s ","Pathname  new relative_path dup _from to_s ","Pathname  new Pathname  new relative_path_from to_s _from to_s ","Pathname  new relative_path force_encoding _from ","Pathname  new relative_path dup _from ","Pathname  new Pathname  new relative_path_from to_s _from ","path force_encoding  sub! ","path dup  sub! ","path force_encoding  dup ","path dup  dup "]}," Listen DirectoryRecord existing_path?":{"type":"method","name":"existing_path?","children":[],"call":["@paths [] [] != ","@paths [] [] ","File  basename ","@paths [] ","File  dirname "," paths [] [] != "," paths [] [] "," paths [] "," paths "]}," Listen DirectoryRecord insert_path":{"type":"method","name":"insert_path","children":[],"call":["@paths [] []= ","File  directory? ","File  basename ","@paths [] ","File  dirname ","meta_data mtime= "," mtime_of ","meta_data type == ","meta_data type ","meta_data type= ","MetaData  new ","MetaData  new  mtime= ","MetaData  new  type == ","MetaData  new  type ","MetaData  new  type= "]}," Listen DirectoryRecord important_paths":{"type":"method","name":"important_paths","children":[],"call":[" filtered? "," ignored? ! "," ignored? ","Find  prune ","File  directory? ","path == ","Find  find ","path + "," directory "]}," Listen DirectoryRecord content_modified?":{"type":"method","name":"content_modified?","children":[],"call":["@sha1_checksums []= ","@sha1_checksums [] != ","@sha1_checksums [] ","Digest SHA1  file to_s ","Digest SHA1  file ","@sha1_checksums [] nil? ","@sha1_checksums [] == ","@sha1_checksums key? "," insert_sha1_checksum ","@sha1_checksums key? ! "," sha1_checksum "," update_sha1_checksum "," sha1_checksums key? ! "," sha1_checksums key? "," sha1_checksums "," sha1_checksums [] == "," sha1_checksums [] ","File  ftype == ","File  ftype ","@Digest SHA1  file to_s s []= "," sha1_checksum s []= ","@Digest SHA1  file to_s s [] != "," sha1_checksum s [] != ","@Digest SHA1  file to_s s [] "," sha1_checksum s [] ","@Digest SHA1  file to_s s [] nil? "," sha1_checksum s [] nil? ","@Digest SHA1  file to_s s [] == "," sha1_checksum s [] == ","@Digest SHA1  file to_s s key? "," sha1_checksum s key? "," insert_Digest SHA1  file to_s  ","@Digest SHA1  file to_s s key? ! "," sha1_checksum s key? ! "," Digest SHA1  file to_s  "," update_Digest SHA1  file to_s  "," Digest SHA1  file to_s s key? ! "," Digest SHA1  file to_s s key? "," Digest SHA1  file to_s s "," Digest SHA1  file to_s s [] == "," Digest SHA1  file to_s s [] "]}," Listen DirectoryRecord detect_additions":{"type":"method","name":"detect_additions","children":[],"call":[" insert_path ","@changes [] << "," relative_to_base ","options [] ","@changes [] ","File  file? "," existing_path? ! "," existing_path? "," filtered? "," ignored? ! "," ignored? ","Find  prune ","options [] ! ","directory != ","File  directory? ","path == ","Find  find ","File  exist? ","path + "]}," Listen DirectoryRecord detect_modifications_and_removals":{"type":"method","name":"detect_modifications_and_removals","children":[],"call":["@changes [] << "," relative_to_base ","options [] ","@changes [] ","@sha1_checksums delete ","@paths [] delete ","@paths [] "," content_modified? ","@updated_at == ","@updated_at < ","File  mtime to_i ","File  mtime ","File  exist? ","@paths delete "," detect_modifications_and_removals ","(pair\n  (sym :recursive)\n  (true)) merge ","File  directory? ","File  join ","@paths [] each ","File  mtime to_f ","@paths [] []= ","meta_data mtime= ","meta_data mtime < ","meta_data mtime ","meta_data mtime to_i == ","new_mtime to_i ","meta_data mtime to_i "," mtime_of ","meta_data type "," insert_sha1_checksum "," detect_modification_or_removal_for_file "," detect_modification_or_removal_for_dir "," paths [] each "," paths [] "," paths ","@File  join s [] delete ","@File  join s [] ","@File  join s delete ","@File  join s [] each ","@File  join s [] []= ","File  mtime to_i  to_i ","File  mtime to_f  to_i "," mtime_of  to_i "," File  join s [] each "," File  join s [] "," File  join s "]}," Listen DirectoryRecord fetch_changes":{"type":"method","name":"fetch_changes","children":[],"call":["Time  now to_i ","Time  now "," detect_additions "," detect_modifications_and_removals ","directory [] ","directories each ","(send\n  (lvar :directories) :sort_by) reverse ","el length ","directories sort_by ","Time  now to_f ","(send\n  (lvar :directories) :sort_by) reverse  each ","(send\n  (lvar :(send\n  (lvar :directories) :sort_by) reverse ) :sort_by) reverse ","(send\n  (lvar :directories) :sort_by) reverse  sort_by "]}," Listen DirectoryRecord build":{"type":"method","name":"build","children":[],"call":["Time  now to_i ","Time  now "," insert_path "," important_paths ","h []= ","Hash  new ","Time  now to_f "]}," Listen DirectoryRecord filtered?":{"type":"method","name":"filtered?","children":[],"call":["path =~ ","@filters any? ","@filters empty? ","pattern =~ ","@filtering_patterns any? "," relative_to_base ","@filtering_patterns empty? "," relative_to_base  =~ "]}," Listen DirectoryRecord ignored?":{"type":"method","name":"ignored?","children":[],"call":["path =~ ","@ignored_paths any? ","pattern =~ ","@ignoring_patterns any? "," relative_to_base "," relative_to_base  =~ ","@ignored_ relative_to_base s any? "]}," Listen DirectoryRecord filter":{"type":"method","name":"filter","children":[],"call":["@filters merge ","@filtering_patterns merge ","r nil? ","@filtering_patterns merge reject! "]}," Listen DirectoryRecord ignore":{"type":"method","name":"ignore","children":[],"call":["@ignored_paths merge ","@ignoring_patterns merge ","r nil? ","@ignoring_patterns merge reject! "]}," Listen DirectoryRecord filters":{"type":"method","name":"filters","children":[],"call":["@filters to_a "]}," Listen DirectoryRecord ignored_paths":{"type":"method","name":"ignored_paths","children":[],"call":["@ignored_paths to_a "]}," Listen DirectoryRecord initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","Set  new "," raise ","File  directory? ","@ignoring_patterns merge ","DirectoryRecord  generate_default_ignoring_patterns ","File  expand_path ","Set  new  merge "]}," Listen Adapter poll_changed_dirs":{"type":"method","name":"poll_changed_dirs","children":[],"call":["@turnstile signal ","@callback call ","@changed_dirs clear ","@changed_dirs to_a ","@mutex synchronize ","@changed_dirs empty? "," sleep "," report_changes ","@@changed_dirs to_a  clear ","@@changed_dirs to_a  to_a ","@@changed_dirs to_a  empty? "]}," Listen Adapter works?":{"type":"method","name":"works?","children":[],"call":[]}," Listen Adapter usable_and_works?":{"type":"method","name":"usable_and_works?","children":[],"call":[]}," Listen Adapter wait_for_callback":{"type":"method","name":"wait_for_callback","children":[],"call":["@turnstile wait "," turnstile wait "," turnstile "," paused "]}," Listen DirectoryRecord filtering_patterns":{"type":"method","name":"filtering_patterns","children":[],"call":["@filtering_patterns to_a "]}," Listen DirectoryRecord ignoring_patterns":{"type":"method","name":"ignoring_patterns","children":[],"call":["@ignoring_patterns to_a "]}," Listen DirectoryRecord generate_default_ignoring_patterns":{"type":"method","name":"generate_default_ignoring_patterns","children":[],"call":["default_patterns << ","ignored_extensions join ","Regexp  escape ","DEFAULT_IGNORED_EXTENSIONS  map ","ignored_directories join ","DEFAULT_IGNORED_DIRECTORIES  map ","Array  new tap ","Array  new "]}," Listen Listener relative_paths":{"type":"method","name":"relative_paths","children":[],"call":[]}," Listen DirectoryRecord mtime_of":{"type":"method","name":"mtime_of","children":[],"call":["File  mtime send ","File  mtime ","File  lstat mtime send ","File  lstat mtime ","File  lstat "]}," Listen Adapter started?":{"type":"method","name":"started?","children":[],"call":["@stop ! ","@stop nil? "," stopped ! "," stopped "]}," Listen DependencyManager running_under_bundler?":{"type":"method","name":"running_under_bundler?","children":[],"call":["(and\n  (send\n    (const nil :File) :exists?\n    (str \"Gemfile\"))\n  (send\n    (const nil :ENV) :[]\n    (str \"BUNDLE_GEMFILE\"))) ! ! ","(and\n  (send\n    (const nil :File) :exists?\n    (str \"Gemfile\"))\n  (send\n    (const nil :ENV) :[]\n    (str \"BUNDLE_GEMFILE\"))) ! ","ENV  [] ","File  exists? "]}," Listen DependencyManager dependencies_loaded?":{"type":"method","name":"dependencies_loaded?","children":[],"call":["@_dependencies empty? "]}," Listen DependencyManager load_depenencies":{"type":"method","name":"load_depenencies","children":[],"call":[" raise ","Error  new ","message + ","GEM_LOAD_MESSAGE  % ","GEM_INSTALL_COMMAND  % ","args reverse ","BUNDLER_DECLARE_GEM  % "," running_under_bundler? ","dependency version ","dependency name ","@_dependencies delete ","DependencyManager  add_loaded "," require "," gem ","DependencyManager  already_loaded? ","@_dependencies each ","GEM_LOAD_MESSAGE  %  + "]}," Listen DependencyManager dependency":{"type":"method","name":"dependency","children":[],"call":["@_dependencies << ","Dependency  new "]}," Listen DependencyManager clear_loaded":{"type":"method","name":"clear_loaded","children":[],"call":["@_loaded_dependencies clear "]}," Listen DependencyManager already_loaded?":{"type":"method","name":"already_loaded?","children":[],"call":["@_loaded_dependencies include? "]}," Listen DependencyManager add_loaded":{"type":"method","name":"add_loaded","children":[],"call":["@_loaded_dependencies << "]}," Listen DependencyManager extended":{"type":"method","name":"extended","children":[],"call":["Set  new ","base class_eval "]}," Listen Adapter report_changes":{"type":"method","name":"report_changes","children":[],"call":["@callback call ","@changed_dirs clear ","@changed_dirs to_a ","@changed_dirs empty? ","@mutex synchronize ","@turnstile signal "," turnstile signal "," turnstile "," callback call "," callback ","@changed_directories clear ","@changed_directories to_a ","@changed_directories empty? "," mutex synchronize "," mutex ","@@changed_dirs to_a  clear ","@@changed_directories to_a  clear ","@@changed_dirs to_a  to_a ","@@changed_directories to_a  to_a ","@@changed_dirs to_a  empty? ","@@changed_directories to_a  empty? "]}," Listen Adapter usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter wait_for_changes":{"type":"method","name":"wait_for_changes","children":[],"call":[" sleep ","changes >= ","@changed_dirs size ","@mutex synchronize "," loop "," latency "," stopped "," paused "," changed_directories size "," changed_directories "," mutex synchronize "," mutex ","@changed_dirs size  >= "," changed_directories size  >= "]}," Listen DirectoryRecord sha1_checksum":{"type":"method","name":"sha1_checksum","children":[],"call":["Digest SHA1  file to_s ","Digest SHA1  file "]}," Listen DirectoryRecord insert_sha1_checksum":{"type":"method","name":"insert_sha1_checksum","children":[],"call":["@sha1_checksums []= "," sha1_checksum "]}," Listen MultiListener filter!":{"type":"method","name":"filter!","children":[],"call":["r filter! ","@directories_records each "]}," Listen MultiListener ignore!":{"type":"method","name":"ignore!","children":[],"call":["r ignore! ","@directories_records each "]}," Listen Listener filter!":{"type":"method","name":"filter!","children":[],"call":["@directory_record filter! ","r filter! "," directories_records each "," directories_records "]}," Listen Listener ignore!":{"type":"method","name":"ignore!","children":[],"call":["@directory_record ignore! ","r ignore! "," directories_records each "," directories_records ","Celluloid Actor  []= ","Silencer  new "," options "," options []= "," options delete ","@options []= ","@options delete "," _reconfigure_silencer "," registry []= "," registry ","@silencer_controller replace_with_bang_ignores "]}," Listen DirectoryRecord filter!":{"type":"method","name":"filter!","children":[],"call":["@filtering_patterns replace ","r nil? ","@filtering_patterns replace reject! "]}," Listen DirectoryRecord ignore!":{"type":"method","name":"ignore!","children":[],"call":["@ignoring_patterns replace ","r nil? ","@ignoring_patterns replace reject! "]}," Listen Adapters BSD init_kqueue":{"type":"method","name":"init_kqueue","children":[],"call":["queue watch_file ","Find  find ","@directories each ","KQueue Queue  new tap ","KQueue Queue  new ","v path == ","file to_s ","v path ","queue watchers detect ","queue watchers ","event watcher queue ","event watcher ","(send\n  (send\n    (lvar :event) :flags) :&\n  (array\n    (sym :write))) empty? ! ","(send\n  (send\n    (lvar :event) :flags) :&\n  (array\n    (sym :write))) empty? ","event flags & ","event flags ","File  directory? ","@changed_dirs << ","File  dirname ","@mutex synchronize ","event watcher path "," lambda "," require ","event watcher queue  watch_file ","v event watcher path  == ","v event watcher path  ","event watcher queue  watchers detect ","event watcher queue  watchers ","event watcher event watcher queue  ","event watcher event watcher path  "]}," Listen Adapters BSD usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapters BSD stop":{"type":"method","name":"stop","children":[],"call":["@poll_thread join ","Thread  kill ","@kqueue stop ","@stop == ","@mutex synchronize "]}," Listen Adapters BSD start":{"type":"method","name":"start","children":[],"call":["@kqueue_thread join "," poll_changed_dirs ","Thread  new "," sleep ","@kqueue poll ","@stop == ","@mutex synchronize "]}," Listen Adapters BSD initialize":{"type":"method","name":"initialize","children":[],"call":[" init_kqueue "]}," Listen _init_listener":{"type":"method","name":"_init_listener","children":[],"call":[]}," Listen to!":{"type":"method","name":"to!","children":[],"call":[]}," Listen Listener fetch_records_changes":{"type":"method","name":"fetch_records_changes","children":[],"call":["record_changes [] ","h [] ","h each ","h merge! ","h empty? ","r fetch_changes ","options merge "," use_relative_paths "," directories_records inject "," directories_records ","r fetch_changes  [] "]}," Listen Listener build_directories_records":{"type":"method","name":"build_directories_records","children":[],"call":["r build "," directories_records each "," directories_records "]}," Listen Listener setup":{"type":"method","name":"setup","children":[],"call":["t join "," initialize_adapter "," build_directories_records ","Thread  new "]}," Listen Listener initialize_relative_paths_usage":{"type":"method","name":"initialize_relative_paths_usage","children":[],"call":["options delete "," directories one? "," directories ","Kernel  warn ","options [] "," directories size > "," directories size "]}," Listen Listener initialize_directories_and_directories_records":{"type":"method","name":"initialize_directories_and_directories_records","children":[],"call":["DirectoryRecord  new ","directories map ","Pathname  new realpath to_s ","Pathname  new realpath ","Pathname  new "]}," Listen Listener start!":{"type":"method","name":"start!","children":[],"call":[" adapter start! "," adapter "," setup "]}," Listen DirectoryRecord update_sha1_checksum":{"type":"method","name":"update_sha1_checksum","children":[],"call":["@sha1_checksums []= "," sha1_checksum "]}," Listen DirectoryRecord removal_detected":{"type":"method","name":"removal_detected","children":[],"call":["@changes [] << "," relative_to_base ","options [] ","@changes [] ","@sha1_checksums delete ","@paths [] delete ","File  basename ","@paths [] ","File  dirname "]}," Listen DirectoryRecord modification_detected":{"type":"method","name":"modification_detected","children":[],"call":["@changes [] << "," relative_to_base ","options [] ","@changes [] ","@paths [] []= ","File  basename ","@paths [] ","File  dirname ","meta_data mtime= "," update_sha1_checksum "]}," Listen DirectoryRecord detect_modification":{"type":"method","name":"detect_modification","children":[],"call":[" modification_detected ","meta_data mtime < ","meta_data mtime "," content_modified? ","meta_data mtime to_i == ","new_mtime to_i ","meta_data mtime to_i "," mtime_of "," mtime_of  to_i "]}," Listen DirectoryRecord detect_modification_or_removal_for_file":{"type":"method","name":"detect_modification_or_removal_for_file","children":[],"call":[" removal_detected "," detect_modification ","File  exist? "]}," Listen DirectoryRecord detect_modification_or_removal_for_dir":{"type":"method","name":"detect_modification_or_removal_for_dir","children":[],"call":["@paths delete ","File  basename ","File  dirname ","@paths [] delete ","@paths [] "," detect_modifications_and_removals ","options [] ","File  directory? "]}," Listen Adapters Windows start_worker":{"type":"method","name":"start_worker","children":[],"call":[" sleep "," worker run! "," worker ","Thread  new "]}," Listen Adapters Windows initialize_worker":{"type":"method","name":"initialize_worker","children":[],"call":["worker watch_recursively "," directories each "," directories ","WDM Monitor  new tap ","WDM Monitor  new ","@changed_directories << ","File  dirname ","change path "," mutex synchronize "," mutex "," paused ","Proc  new "]}," Listen Adapters Windows at_least_ruby_1_9?":{"type":"method","name":"at_least_ruby_1_9?","children":[],"call":[]}," Listen Adapters Windows mri?":{"type":"method","name":"mri?","children":[],"call":[]}," Listen Adapters Windows load_dependency":{"type":"method","name":"load_dependency","children":[],"call":[]}," Listen Adapters Windows adapter_gem":{"type":"method","name":"adapter_gem","children":[],"call":[]}," Listen Adapters Windows target_os_regex":{"type":"method","name":"target_os_regex","children":[],"call":[]}," Listen Adapters Polling poll_changed_directories":{"type":"method","name":"poll_changed_directories","children":[],"call":[" sleep ","nap_time > "," latency - ","Time  now to_f - ","Time  now to_f ","Time  now "," latency "," turnstile signal "," turnstile "," callback call "," directories dup "," directories "," callback "," paused "," stopped "," latency -  > "]}," Listen Adapters Polling start_worker":{"type":"method","name":"start_worker","children":[],"call":[]}," Listen Adapters Polling blocking_thread":{"type":"method","name":"blocking_thread","children":[],"call":[" poller_thread "]}," Listen Adapters Polling default_latency":{"type":"method","name":"default_latency","children":[],"call":[]}," Listen Adapters Linux start_worker":{"type":"method","name":"start_worker","children":[],"call":[" worker run "," worker ","Thread  new "]}," Listen Adapters Linux initialize_worker":{"type":"method","name":"initialize_worker","children":[],"call":["worker watch "," directories each "," directories ","INotify Notifier  new tap ","INotify Notifier  new ","@changed_directories << ","File  dirname ","event absolute_name "," mutex synchronize "," mutex ","(send\n  (send\n    (lvar :event) :flags) :&\n  (array\n    (sym :close)\n    (sym :modify))) any? ","event flags & ","event flags ","event flags include? ","event name == ","event name "," paused "," lambda "]}," Listen Adapters Linux adapter_gem":{"type":"method","name":"adapter_gem","children":[],"call":[]}," Listen Adapters Linux target_os_regex":{"type":"method","name":"target_os_regex","children":[],"call":[]}," Listen Adapters Darwin start_worker":{"type":"method","name":"start_worker","children":[],"call":[" sleep "," worker run "," worker ","Thread  new "]}," Listen Adapters Darwin initialize_worker":{"type":"method","name":"initialize_worker","children":[],"call":["@changed_directories << ","path sub ","changes each "," mutex synchronize "," mutex "," paused ","worker watch "," latency "," directories dup "," directories ","FSEvent  new tap ","FSEvent  new "]}," Listen Adapters Darwin adapter_gem":{"type":"method","name":"adapter_gem","children":[],"call":[]}," Listen Adapters Darwin target_os_regex":{"type":"method","name":"target_os_regex","children":[],"call":[]}," Listen Adapters BSD start_worker":{"type":"method","name":"start_worker","children":[],"call":[" sleep "," latency "," worker poll "," worker "," stopped ","Thread  new "]}," Listen Adapters BSD initialize_worker":{"type":"method","name":"initialize_worker","children":[],"call":["queue watch_file ","Find  find "," directories each "," directories ","KQueue Queue  new tap ","KQueue Queue  new ","v path == ","file to_s ","v path ","queue watchers detect ","queue watchers ","event watcher queue ","event watcher ","event flags include? ","event flags ","File  directory? ","@changed_directories << ","File  dirname "," mutex synchronize "," mutex ","event watcher path "," lambda "," require ","event watcher queue  watch_file ","v event watcher path  == ","v event watcher path  ","event watcher queue  watchers detect ","event watcher queue  watchers ","event watcher event watcher queue  ","event watcher event watcher path  "]}," Listen Adapters BSD adapter_gem":{"type":"method","name":"adapter_gem","children":[],"call":[]}," Listen Adapters BSD target_os_regex":{"type":"method","name":"target_os_regex","children":[],"call":[]}," Listen Adapter poll_changed_directories":{"type":"method","name":"poll_changed_directories","children":[],"call":[" report_changes "," sleep "," latency "," stopped "]}," Listen Adapter warn_polling_fallback":{"type":"method","name":"warn_polling_fallback","children":[],"call":[]}," Listen Adapter start_poller":{"type":"method","name":"start_poller","children":[],"call":[" poll_changed_directories ","Thread  new "]}," Listen Adapter start_worker":{"type":"method","name":"start_worker","children":[],"call":[" raise "," __method__ "," class "]}," Listen Adapter initialize_worker":{"type":"method","name":"initialize_worker","children":[],"call":[]}," Listen Adapter blocking_thread":{"type":"method","name":"blocking_thread","children":[],"call":[" worker_thread "]}," Listen Adapter default_latency":{"type":"method","name":"default_latency","children":[],"call":[]}," Listen Adapter load_dependency":{"type":"method","name":"load_dependency","children":[],"call":[]}," Listen Adapter paused?":{"type":"method","name":"paused?","children":[],"call":[" paused "]}," Listen Adapter unpause":{"type":"method","name":"unpause","children":[],"call":[]}," Listen Adapter pause":{"type":"method","name":"pause","children":[],"call":[]}," Listen Adapter start!":{"type":"method","name":"start!","children":[],"call":[" blocking_thread join "," blocking_thread "," start "]}," Listen Adapters Windows load_dependent_adapter":{"type":"method","name":"load_dependent_adapter","children":[],"call":[]}," Listen Adapter load_dependent_adapter":{"type":"method","name":"load_dependent_adapter","children":[],"call":[]}," Listen Listener force_adapter":{"type":"method","name":"force_adapter","children":[],"call":["@adapter_options []= "]}," Listen Silencer _default_ignored_extensions_patterns":{"type":"method","name":"_default_ignored_extensions_patterns","children":[],"call":["ignored_extensions join ","Regexp  escape ","DEFAULT_IGNORED_EXTENSIONS  map ","e is_a? "]}," Listen Silencer _default_ignored_directories_patterns":{"type":"method","name":"_default_ignored_directories_patterns","children":[],"call":["ignored_directories join ","Regexp  escape ","DEFAULT_IGNORED_DIRECTORIES  map "]}," Listen Silencer _default_patterns":{"type":"method","name":"_default_patterns","children":[],"call":[" _default_ignored_extensions_patterns "," _default_ignored_directories_patterns "]}," Listen Silencer _init_patterns":{"type":"method","name":"_init_patterns","children":[],"call":["@patterns flatten! ","@patterns compact! ","@patterns << << "," options [] "," options ","@patterns << "," _default_patterns ","@patterns compact "," listener options [] "," listener options "," listener "]}," Listen Silencer silenced?":{"type":"method","name":"silenced?","children":[],"call":["path to_s =~ ","path to_s "," patterns any? "," patterns ","pattern =~ "," _relative_path =~ "," _relative_path ","path =~ "," ignore_patterns any? "," ignore_patterns "," only_patterns any? "," only_patterns ","type == ","relative_path to_s ","(send\n  (send nil :only_patterns) :any?) ! ","relative_path =~ "," _only? ! "," _only? "," _ignore? ","relative_path to_s  to_s =~ ","relative_path to_s  to_s "," _relative_relative_path to_s  =~ "," _ _relative_path  =~ "," _relative_relative_path to_s  "," _ _relative_path  ","relative_path to_s  =~ ","relative_relative_path to_s  to_s "," _relative_path  to_s ","relative_relative_path to_s  =~ "," _relative_path  =~ "]}," Listen Silencer initialize":{"type":"method","name":"initialize","children":[],"call":[" _init_patterns "," configure "," _init_ignore_patterns "," _init_only_patterns "]}," Listen Record _init_paths":{"type":"method","name":"_init_paths","children":[],"call":["h []= ","Hash  new "]}," Listen Record build":{"type":"method","name":"build","children":[],"call":["Actor  [] change ","Actor  [] "," listener directories each "," listener directories "," listener "," _init_paths "," raise ","Celluloid Logger  warn ","$ERROR_INFO inspect ","Celluloid Logger  info ","Time  now to_f - ","Time  now to_f ","Time  now "," _fast_build ","directory to_s "," _auto_hash "," listener registry [] change "," listener registry [] "," listener registry ","$! inspect ","Celluloid  logger warn ","Celluloid  logger "," sleep ","@last_build_at + < ","@last_build_at + "," listener sync change "," listener sync ","Celluloid  logger info "," _fast_build_dir ","remaining empty? ","remaining << ","Entry  new "," root ","Queue  new ","SymlinkDetector  new "," Queue  new "," reset_tree ","Time  now  + < ","Time  now  + ","Queue  new  empty? "," Queue  new  empty? ","Queue  new  << "," Queue  new  << "]}," Listen Record dir_entries":{"type":"method","name":"dir_entries","children":[],"call":["@paths [] ","path to_s ","result []= ","values key? ","tree each ","@paths [] [] ","rel_path to_s ","dir to_s "," _auto_hash ","(nil) include? ","@paths [] dup ","subtree each "," tree [] "," tree "," _sub_tree ","subtree transform_values ","@tree [] ","(str \"\") include? ","values has_key? ","values is_a? ","subtree each_with_object "," empty_dirname? ","@paths []  each ","sub@paths []  each "," tree  each "," _sub_tree  each ","@tree []  each "," @paths []  [] "," @paths []  "," _sub_@paths []  ","sub@paths []  transform_values "," tree  transform_values "," _sub_tree  transform_values ","@tree []  transform_values ","@@paths []  [] ","sub@paths []  each_with_object "," tree  each_with_object "," _sub_tree  each_with_object ","@tree []  each_with_object "]}," Listen Record file_data":{"type":"method","name":"file_data","children":[],"call":["@paths [] [] "," File  basename ","@paths [] "," File  dirname ","root [] [] dup ","root [] [] ","root [] ","root [] dup ","(nil) include? "," Pathname split map "," Pathname split "," Pathname ","dir to_s "," tree [] [] dup "," tree [] [] "," tree [] "," tree "," tree [] dup ","@tree [] [] dup ","@tree [] [] ","@tree [] ","@tree [] dup "," empty_dirname? ","@paths []  [] [] dup ","@paths []  [] [] ","@paths []  [] ","@paths []  [] dup "]}," Listen Record unset_path":{"type":"method","name":"unset_path","children":[],"call":["@paths [] delete "," File  basename ","@paths [] "," File  dirname "," _fast_unset_path "," Pathname split map "," Pathname split "," Pathname ","@paths [] [] ","dir to_s "]}," Listen Record set_path":{"type":"method","name":"set_path","children":[],"call":["@paths [] []= "," file_data merge "," file_data "," File  basename ","@paths [] "," File  dirname "," file_data merge merge "]}," Listen Record initialize":{"type":"method","name":"initialize","children":[],"call":[" _init_paths "," _auto_hash ","directory to_s "," reset_tree "]}," Listen Listener _pop_changes":{"type":"method","name":"_pop_changes","children":[],"call":["v uniq! ","changes each ","changes [] << ","v to_s ","changes [] ","change each ","@changes pop ","@changes empty? ","popped << ","@changes shift ","@changes pop s each ","@changes pop s [] << ","@changes pop s [] ","@changes pop  each ","@@changes pop s pop ","@@changes pop s empty? ","@@changes pop s shift "]}," Listen Listener _wait_for_changes":{"type":"method","name":"_wait_for_changes","children":[],"call":["Kernel  warn ","ex backtrace join ","ex backtrace "," sleep "," block call ","changes [] "," block ","v empty? ","changes all? "," _pop_changes "," loop ","changes [] uniq ","changes values all? ","changes values "," exit "," _terminate_celluloid_actors "," _terminate_actors "," _format_error "," _process_changes "," state == "," state ","diff > ","latency + - ","latency + ","Time  now to_f ","Time  now ","@queue empty? "," options [] "," options "," supervisor finalize "," supervisor ","Listen  stopping ","hash [] "," _smoosh_changes ","changes empty? ","new_changes empty? ","$@ join "," _pop_changes  [] "," _pop_changes  all? "," _pop_ _pop_changes  "," _pop_changes  [] uniq "," _pop_changes  values all? "," _pop_changes  values "," _process_ _pop_changes  ","latency + -  > "," options []  + - "," options []  + ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "," _smoosh_changes  [] "," _smoosh_ _pop_changes  "," _pop_changes  empty? ","new_ _pop_changes  empty? "]}," Listen Listener _signals_trap":{"type":"method","name":"_signals_trap","children":[],"call":[" exit ","Signal  trap ","Signal  list keys include? ","Signal  list keys ","Signal  list "," stop "]}," Listen Listener _init_actors":{"type":"method","name":"_init_actors","children":[],"call":["Celluloid Actor  []= ","Record  new ","Adapter  new ","Change  pool ","Silencer  new "," options ","Celluloid  cores "," supervisor add "," _adapter_class "," supervisor ","options first merge! ","options first ","@tcp_mode == "," registry [] start "," registry [] "," registry "," require "," supervisor pool ","Celluloid SupervisionGroup  run! "," directories ","adapter_options merge! "," options [] "," options key? ","valid_adapter_options each "," _adapter_class const_get keys "," _adapter_class const_get ","Adapter  select "," _Adapter  select  "," _adapter_class const_get keys  each "," _Adapter  select  const_get keys "," _Adapter  select  const_get "]}," Listen Listener _init_debug":{"type":"method","name":"_init_debug","children":[],"call":["Celluloid  logger= ","Celluloid  logger level= ","Celluloid  logger "," options [] "," options ","ENV  [] =~ ","ENV  [] ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Listen Listener _init_options":{"type":"method","name":"_init_options","children":[],"call":["(pair\n  (sym :debug)\n  (false)) merge "]}," Listen Listener listen?":{"type":"method","name":"listen?","children":[],"call":["@paused == ","@stopping == "]}," Listen File _md5":{"type":"method","name":"_md5","children":[],"call":["Digest MD5  file digest ","Digest MD5  file "," path "]}," Listen File _lstat":{"type":"method","name":"_lstat","children":[],"call":[" File  lstat "," path "]}," Listen File _mode":{"type":"method","name":"_mode","children":[],"call":[" _lstat mode "," _lstat "]}," Listen File _mtime":{"type":"method","name":"_mtime","children":[],"call":[" _lstat mtime to_f "," _lstat mtime "," _lstat "]}," Listen File _record":{"type":"method","name":"_record","children":[],"call":["Celluloid Actor  [] "," listener registry [] "," listener registry "," listener "]}," Listen File _record_data":{"type":"method","name":"_record_data","children":[],"call":[" _record future file_data value "," _record future file_data "," path "," _record future "," _record "]}," Listen File _new_data":{"type":"method","name":"_new_data","children":[],"call":["data []= "," _md5 ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "," _mode "," _mtime "," md5 "]}," Listen File _unset_record_data":{"type":"method","name":"_unset_record_data","children":[],"call":[" _record async unset_path "," path "," _record async "," _record "]}," Listen File _set_record_data":{"type":"method","name":"_set_record_data","children":[],"call":[" _record async set_path "," data "," path "," _record async "," _record ","@data merge! "," _new_data "]}," Listen File _content_modified?":{"type":"method","name":"_content_modified?","children":[],"call":[" _md5 != "," _record_data [] "," _record_data "," _md5 "," _set_record_data "," md5 != "," md5 "," _set_md5 "," _mtime to_i == ","Time  now to_i ","Time  now "," _mtime to_i "," _mtime ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Listen File _mode_modified?":{"type":"method","name":"_mode_modified?","children":[],"call":[" _mode != "," _record_data [] "," _record_data "," _mode "]}," Listen File _modified?":{"type":"method","name":"_modified?","children":[],"call":[" _content_modified? "," _mode_modified? "," _mtime > "," _record_data [] "," _record_data "," _mtime "]}," Listen File _exist?":{"type":"method","name":"_exist?","children":[],"call":[" File  exist? "," path "]}," Listen File _record_data?":{"type":"method","name":"_record_data?","children":[],"call":[" _record_data empty? ! "," _record_data empty? "," _record_data "]}," Listen File _removed_path?":{"type":"method","name":"_removed_path?","children":[],"call":[" _exist? ! "," _exist? "]}," Listen File _existing_path?":{"type":"method","name":"_existing_path?","children":[],"call":[" _record_data? "," _exist? "]}," Listen File _new_path?":{"type":"method","name":"_new_path?","children":[],"call":[" _record_data? ! "," _record_data? "," _exist? "]}," Listen File change":{"type":"method","name":"change","children":[],"call":[" _unset_record_data "," _removed_path? "," _set_record_data "," _new_path? "," _modified? "," _existing_path? "]}," Listen File initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Directory _async_change":{"type":"method","name":"_async_change","children":[],"call":[" _change_pool async change "," _change_pool async "," _change_pool "," path join "," path "]}," Listen Directory _recursive_scan?":{"type":"method","name":"_recursive_scan?","children":[],"call":[" options [] "," options "," Dir  exists? ! "," Dir  exists? "," Dir  exist? ! "," Dir  exist? "]}," Listen Directory _change_pool":{"type":"method","name":"_change_pool","children":[],"call":["Celluloid Actor  [] "," listener registry [] "," listener registry "," listener "]}," Listen Directory _record":{"type":"method","name":"_record","children":[],"call":["Celluloid Actor  [] "," listener registry [] "," listener registry "," listener "]}," Listen Directory _record_entries":{"type":"method","name":"_record_entries","children":[],"call":["future value "," _record future dir_entries "," path "," _record future "," _record "," _record future dir_entries  value "," _record  _record future dir_entries  dir_entries "," _record  _record future dir_entries  "]}," Listen Directory _entry_type":{"type":"method","name":"_entry_type","children":[],"call":["entry_path directory? ","entry_path file? "," path join "," path "," path join  directory? "," path join  file? "]}," Listen Directory _entries":{"type":"method","name":"_entries","children":[],"call":["Hash  [] ","entries flatten "," _entry_type ","entries map "," Dir  entries - "," Dir  entries "," path "," Dir  exists? "," Dir  exist? "," Dir  entries -  flatten "," Dir  entries -  map "," Dir   Dir  entries -  - "," Dir   Dir  entries -  "]}," Listen Directory _all_entries":{"type":"method","name":"_all_entries","children":[],"call":[" _record_entries merge "," _entries "," _record_entries "]}," Listen Directory _update_record":{"type":"method","name":"_update_record","children":[],"call":[" _record async unset_path "," path "," _record async "," _record "," _record async set_path "," Dir  exists? "," Dir  exist? "]}," Listen Directory scan":{"type":"method","name":"scan","children":[],"call":[" _async_change "," options merge "," options "," _recursive_scan? ","data [] "," _all_entries each "," _all_entries "," _update_record "]}," Listen Directory initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Change _silencer":{"type":"method","name":"_silencer","children":[],"call":["Celluloid Actor  [] "," listener registry [] "," listener registry "," listener "]}," Listen Change _notify_listener":{"type":"method","name":"_notify_listener","children":[],"call":[" listener changes << "," listener changes "," listener ","(pair\n  (lvar :change)\n  (lvar :path)) merge "]}," Listen Change _dir_change":{"type":"method","name":"_dir_change","children":[],"call":["Directory  new scan ","Directory  new "," listener "]}," Listen Change _file_change":{"type":"method","name":"_file_change","children":[],"call":[" _notify_listener ","options [] ! ","options [] "," listener listen? "," listener ","File  new change ","File  new ","File  new File  new change  "]}," Listen Change change":{"type":"method","name":"change","children":[],"call":[" send ","options [] downcase ","options [] "," _notify_listener "," _silencer silenced? "," _silencer "," silencer silenced? "," silencer "," raise "," _log "," format ","$ERROR_POSITION * ","$ERROR_INFO inspect "," listener queue "," listener ","change ! ","File  change ","Directory  scan "," listener async ","type == "," listener sync ","options inspect ","watched_dir + ","rel_path inspect "," listener silencer silenced? "," Pathname "," listener silencer ","cookie ! ","$@ join ","$! inspect ","record async still_building! ","record async ","path inspect ","options []  ! ","File  change  ! ","File  options []  ","File  File  change  ","rel_watched_dir +  inspect "," listener sync  async still_building! "," listener sync  async ","watched_dir +  inspect "]}," Listen Change initialize":{"type":"method","name":"initialize","children":[],"call":["Silencer  new ","listener options "]}," Listen Adapter not_mri?":{"type":"method","name":"not_mri?","children":[],"call":[]}," Listen Adapter _warn_polling_fallback":{"type":"method","name":"_warn_polling_fallback","children":[],"call":["Kernel  warn ","options fetch "]}," Listen Adapter _usable_adapter_class":{"type":"method","name":"_usable_adapter_class","children":[],"call":["OPTIMIZED_ADAPTERS  detect ","OPTIMIZED_ADAPTERS  find "]}," Listen Adapter _select":{"type":"method","name":"_select","children":[],"call":[]}," Listen Adapter new":{"type":"method","name":"new","children":[],"call":[]}," Listen Adapter Windows _change":{"type":"method","name":"_change","children":[],"call":["types include? ","(pair\n  (sym :modified)\n  (array\n    (sym :modified))) each ","(pair\n  (sym :modified)\n  (array\n    (sym :modified)\n    (sym :attrib))) each ","(pair\n  (sym :modified)\n  (array\n    (sym :modified)\n    (sym :attrib))) find "]}," Listen Adapter Windows _path":{"type":"method","name":"_path","children":[],"call":["Pathname  new "]}," Listen Adapter Windows _worker_callback":{"type":"method","name":"_worker_callback","children":[],"call":[" _notify_change "," _change ","change type "," _path ","change path "," lambda "]}," Listen Adapter Windows _init_worker":{"type":"method","name":"_init_worker","children":[],"call":["worker watch_recursively "," _worker_callback "," _directories_path each "," _directories_path ","WDM Monitor  new tap ","WDM Monitor  new "]}," Listen Adapter Windows start":{"type":"method","name":"start","children":[],"call":["worker run! "," _init_worker ","Thread  new "," _init_worker  run! "," _init_ _init_worker  "]}," Listen Adapter Windows usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter Polling _nap_time":{"type":"method","name":"_nap_time","children":[],"call":[" sleep ","nap_time > "," _latency - ","Time  now to_f - ","Time  now to_f ","Time  now "," _latency "," _latency -  > "]}," Listen Adapter Polling _napped_loop":{"type":"method","name":"_napped_loop","children":[],"call":[" _nap_time "," loop "]}," Listen Adapter Polling _poll_directories":{"type":"method","name":"_poll_directories","children":[],"call":[" _notify_change "," listener directories each "," listener directories "," listener "," _napped_loop "]}," Listen Adapter Polling _latency":{"type":"method","name":"_latency","children":[],"call":[" listener options [] "," listener options "," listener "]}," Listen Adapter Polling start":{"type":"method","name":"start","children":[],"call":[" _poll_directories ","Thread  new "]}," Listen Adapter Polling usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter Linux _event_path":{"type":"method","name":"_event_path","children":[],"call":["Pathname  new ","event absolute_name "]}," Listen Adapter Linux _dir_event?":{"type":"method","name":"_dir_event?","children":[],"call":["event flags include? ","event flags "]}," Listen Adapter Linux _change":{"type":"method","name":"_change","children":[],"call":["(send\n  (lvar :flags) :&\n  (lvar :event_flags)) empty? ","flags & ","(pair\n  (sym :modified)\n  (array\n    (sym :attrib))) each ","(pair\n  (sym :modified)\n  (array\n    (sym :attrib)\n    (sym :close_write))) each "]}," Listen Adapter Linux _skip_event?":{"type":"method","name":"_skip_event?","children":[],"call":["(send\n  (send\n    (lvar :event) :flags) :&\n  (array\n    (sym :close)\n    (sym :modify))) any? ","event flags & ","event flags "," _dir_event? ","event name == ","event name "]}," Listen Adapter Linux _worker_callback":{"type":"method","name":"_worker_callback","children":[],"call":[" _notify_change "," _change ","event flags "," _event_path "," _dir_event? "," _skip_event? "," lambda ","(pair\n  (sym :type)\n  (str \"File\")) merge ","(pair\n  (sym :type)\n  (str \"Dir\")) merge ","Celluloid  logger info ","event name ","event flags inspect ","Celluloid  logger ","event cookie ","event cookie zero? ","options merge "," _log "," _event_ _event_path  "]}," Listen Adapter Linux _init_worker":{"type":"method","name":"_init_worker","children":[],"call":["worker watch "," _worker_callback "," _directories_path each "," _directories_path ","INotify Notifier  new tap ","INotify Notifier  new "]}," Listen Adapter Linux start":{"type":"method","name":"start","children":[],"call":[" abort ","worker run "," _init_worker ","Thread  new ","STDERR  flush ","STDERR  puts "," _init_worker  run "," _init_ _init_worker  "]}," Listen Adapter Linux initialize":{"type":"method","name":"initialize","children":[],"call":[" require "]}," Listen Adapter Linux usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter Darwin _changes_path":{"type":"method","name":"_changes_path","children":[],"call":["Pathname  new ","path sub! ","changes map "]}," Listen Adapter Darwin _init_worker":{"type":"method","name":"_init_worker","children":[],"call":[" _notify_change "," _changes_path each "," _changes_path ","worker watch "," _latency "," _directories_path ","FSEvent  new tap ","FSEvent  new ","paths each "," _changes_path  each "]}," Listen Adapter Darwin start":{"type":"method","name":"start","children":[],"call":["worker run "," _init_worker ","Thread  new "," _init_worker  run "," _init_ _init_worker  "]}," Listen Adapter Darwin initialize":{"type":"method","name":"initialize","children":[],"call":[" require "]}," Listen Adapter Darwin usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter BSD _watch_file":{"type":"method","name":"_watch_file","children":[],"call":["queue watch_file "," _worker_callback "," _log ","e message "," options events "," options ","Listen  logger warn ","Listen  logger "]}," Listen Adapter BSD _watch_for_new_file":{"type":"method","name":"_watch_for_new_file","children":[],"call":[" _watch_file ","v path == "," file to_s "," file ","v path ","queue watchers detect ","queue watchers ","Find  find "," path ","event watcher queue ","event watcher ","file_path to_s "," _find "," _event_path to_s "," _event_path ","queue watchers find ","event watcher queue  watchers detect ","event watcher queue  watchers ","event watcher event watcher queue  ","event watcher queue  watchers find "]}," Listen Adapter BSD _new_file_added?":{"type":"method","name":"_new_file_added?","children":[],"call":["event flags include? ","event flags ","File  directory? ","event watcher path ","event watcher "," File  directory? "]}," Listen Adapter BSD _event_path":{"type":"method","name":"_event_path","children":[],"call":["Pathname  new ","event watcher path ","event watcher "]}," Listen Adapter BSD _change":{"type":"method","name":"_change","children":[],"call":["(send\n  (lvar :flags) :&\n  (lvar :event_flags)) empty? ","flags & ","(pair\n  (sym :modified)\n  (array\n    (sym :attrib)\n    (sym :extend))) each "]}," Listen Adapter BSD _worker_callback":{"type":"method","name":"_worker_callback","children":[],"call":[" _watch_for_new_file "," _new_file_added? "," _notify_change "," _change ","event flags "," _event_path "," lambda ","path directory? "," _notify_ _change  "," _ _change  "," _event_ _event_path  "," _event_path  directory? "]}," Listen Adapter BSD _init_worker":{"type":"method","name":"_init_worker","children":[],"call":[" _watch_file ","Find  find "," _directories_path each "," _directories_path ","KQueue Queue  new tap ","KQueue Queue  new "," _find "]}," Listen Adapter BSD start":{"type":"method","name":"start","children":[],"call":["worker poll "," _init_worker ","Thread  new ","worker run "," _init_worker  poll "," _init_ _init_worker  "," _init_worker  run "]}," Listen Adapter BSD usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen Adapter Base _notify_change":{"type":"method","name":"_notify_change","children":[],"call":["Actor  [] async change ","Actor  [] async ","Actor  [] "," listener listen? "," listener "," listener registry [] async change "," listener registry [] async "," listener registry [] "," listener registry "," sleep ","pool async change ","pool async "," raise "," _log ","$@ join ","worker change "," listener async "," listener registry []  async change "," listener registry []  async "," listener async  change "]}," Listen Adapter Base _directories_path":{"type":"method","name":"_directories_path","children":[],"call":[" listener directories map "," listener directories "," listener "]}," Listen Adapter Base _latency":{"type":"method","name":"_latency","children":[],"call":[" listener options [] "," listener options "," listener "]}," Listen Adapter Base start":{"type":"method","name":"start","children":[],"call":[" raise "," _log_exception "," _run ","Listen Internals ThreadPool  add "," configure "," caller dup "," caller "," _log ","$@ join ","Thread  new "," fail "," _configure ","snapshot record build ","snapshot record "," _timed ","@snapshots values each ","@snapshots values "," started? ","Listen Thread  new ","Listen  logger warn ","Listen  logger ","@snapshots each_value "]}," Listen Adapter Base usable?":{"type":"method","name":"usable?","children":[],"call":[" const_get =~ ","RbConfig CONFIG  [] "," const_get "]}," Listen Adapter Base initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," _log_exception ","Listen Options  new "," class const_get "," class ","@recursion nil? ","options delete "," fail ","dir inspect ","dir is_a? "," Array each "," Array ","opts dup "," caller "," _log ","$@ join ","config adapter_options ","config directories empty? ","config directories ","options delete  nil? ","opts dup  delete ","config adapter_opts dup  "]}," Listen Listener _build_record_if_needed":{"type":"method","name":"_build_record_if_needed","children":[],"call":[" record build "," record "]}," Listen Listener record":{"type":"method","name":"record","children":[],"call":["Celluloid Actor  [] "]}," Listen Listener adapter":{"type":"method","name":"adapter","children":[],"call":["Celluloid Actor  [] "]}," Listen Listener _terminate_celluloid_actors":{"type":"method","name":"_terminate_celluloid_actors","children":[],"call":["Celluloid Actor  [] terminate ","Celluloid Actor  [] ","Celluloid Actor  kill "]}," Listen Silencer _relative_path":{"type":"method","name":"_relative_path","children":[],"call":["path start_with? ! ","path start_with? ","relative_paths detect ","path relative_path_from to_s ","path relative_path_from "," listener directories map "," listener directories "," listener ","rel_path start_with? ! ","rel_path start_with? "]}," Listen Listener _terminate_actors":{"type":"method","name":"_terminate_actors","children":[],"call":["Celluloid Actor  [] terminate ","Celluloid Actor  [] "]}," Listen _add_listener":{"type":"method","name":"_add_listener","children":[],"call":["@listeners << ","Listener  new tap ","Listener  new "]}," Listen on":{"type":"method","name":"on","children":[],"call":[" _add_listener ","TCP Listener  new "," require ","Listener  new "]}," Listen stop":{"type":"method","name":"stop","children":[],"call":["Celluloid  shutdown ","listener stop ","@listeners each ","Internals ThreadPool  stop ","@listeners deq ","@listeners deq  stop ","@@listeners deq s each ","@@listeners deq s deq "]}," Listen TCP Message from_buffer":{"type":"method","name":"from_buffer","children":[],"call":[]}," Listen TCP Message payload=":{"type":"method","name":"payload=","children":[],"call":["JSON  parse ","@payload unpack "]}," Listen TCP Message object=":{"type":"method","name":"object=","children":[],"call":["(ivar :@size) pack ","@body bytesize ","JSON  generate ","(ivar :@body bytesize ) pack ","JSON  generate  bytesize "]}," Listen TCP Message initialize":{"type":"method","name":"initialize","children":[],"call":[" object= "]}," Listen TCP Broadcaster _unicast":{"type":"method","name":"_unicast","children":[],"call":[" _log ","socket inspect ","socket write "]}," Listen TCP Broadcaster _log":{"type":"method","name":"_log","children":[],"call":["Celluloid Logger  send ","Celluloid  logger send ","Celluloid  logger "]}," Listen TCP Broadcaster run":{"type":"method","name":"run","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * ","@sockets << ","@server accept "," handle_connection ","$@ join ","$! inspect ","@@server accept s << "]}," Listen TCP Broadcaster broadcast":{"type":"method","name":"broadcast","children":[],"call":["@sockets replace "," _unicast ","@sockets select "," unicast ","@sockets each "]}," Listen TCP Broadcaster finalize":{"type":"method","name":"finalize","children":[],"call":["@server close ","@sockets map ","@sockets clear "]}," Listen TCP Broadcaster start":{"type":"method","name":"start","children":[],"call":[" async run "," async "]}," Listen TCP Broadcaster initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * ","TCPServer  new ","$@ join ","$! inspect "]}," Listen Silencer _init_ignores":{"type":"method","name":"_init_ignores","children":[],"call":["patterns compact flatten ","patterns compact ","patterns << "]}," Listen Silencer configure":{"type":"method","name":"configure","children":[],"call":[" _init_ignores ","options [] "," Array "]}," Listen Record _fast_try_file":{"type":"method","name":"_fast_try_file","children":[],"call":[" _fast_unset_path ","entry name ","entry relative ","entry root "," _fast_update_file ","entry meta "]}," Listen Record _fast_build_dir":{"type":"method","name":"_fast_build_dir","children":[],"call":[" _fast_unset_path ","entry name ","entry relative ","entry root "," _fast_try_file "," add_dir ","entry record_dir_key ","remaining << ","children each ","symlink_detector verify_unwatched! ","entry children ","remaining pop ","entry children each ","@silencer silenced? ","remaining pop  name ","remaining pop  relative ","remaining pop  root ","remaining pop  record_dir_key ","entry children  each ","entry entry children  ","remaining pop  children ","entry entry children  each ","remaining pop  children each "]}," Listen Record _fast_build":{"type":"method","name":"_fast_build","children":[],"call":[" _fast_build_dir ","remaining empty? ","remaining << ","Entry  new ","Queue  new ","@paths []= "," _auto_hash ","SymlinkDetector  new "," _fast_unset_path "," _fast_update_file ","lstat mode ","lstat mtime to_f ","lstat mtime "," File  lstat ","left << "," File  join ","dirname == ","Dir  exist? ","current each ","Dir  entries - ","Dir  entries ","path to_s "," add_dir ","left pop ","left empty? ! ","left empty? ","Queue  new  empty? ","Queue  new  << ","@ File  join s []= "," _fast_unset_ File  join  "," File  lstat  mode "," File  lstat  mtime to_f "," File  lstat  mtime "," File   File  lstat  ","left pop  == ","Dir  entries -  each "," File  join  to_s ","Queue  new  pop ","Queue  new  empty? ! "]}," Listen Record _fast_unset_path":{"type":"method","name":"_fast_unset_path","children":[],"call":["root [] delete ","root [] ","root key? ","root delete ","(nil) include? ","@paths [] ","dir to_s "," tree [] delete "," tree [] "," tree "," tree key? "," tree delete ","@tree [] delete ","@tree [] ","@tree key? ","@tree delete "," empty_dirname? ","dirname to_s ","@paths []  [] delete ","@paths []  [] ","@paths []  key? ","@paths []  delete "]}," Listen Record _fast_update_file":{"type":"method","name":"_fast_update_file","children":[],"call":["root [] []= ","(or\n  (send\n    (send\n      (lvar :root) :[]\n      (lvar :dirname)) :[]\n    (lvar :basename))\n  (hash)) merge ","root [] [] ","root [] ","root []= ","(or\n  (send\n    (lvar :root) :[]\n    (lvar :basename))\n  (hash)) merge ","(nil) include? ","@paths [] ","dir to_s "," tree [] []= ","(or\n  (send\n    (send\n      (send nil :tree) :[]\n      (lvar :dirname)) :[]\n    (lvar :basename))\n  (hash)) merge "," tree [] [] "," tree [] "," tree "," tree []= ","(or\n  (send\n    (send nil :tree) :[]\n    (lvar :basename))\n  (hash)) merge ","@tree [] []= ","(or\n  (send\n    (send\n      (ivar :@tree) :[]\n      (lvar :dirname)) :[]\n    (lvar :basename))\n  (hash)) merge ","@tree [] [] ","@tree [] ","@tree []= ","(or\n  (send\n    (ivar :@tree) :[]\n    (lvar :basename))\n  (hash)) merge ","@tree [] merge "," empty_dirname? ","dirname to_s ","@paths []  [] []= ","(or\n  (send\n    (send\n      (lvar :@paths [] ) :[]\n      (lvar :dirname)) :[]\n    (lvar :basename))\n  (hash)) merge ","@paths []  [] [] ","@paths []  [] ","@paths []  []= ","(or\n  (send\n    (lvar :@paths [] ) :[]\n    (lvar :basename))\n  (hash)) merge "]}," Listen Record _auto_hash":{"type":"method","name":"_auto_hash","children":[],"call":["h []= ","Hash  new "]}," Listen Record update_file":{"type":"method","name":"update_file","children":[],"call":[" _fast_update_file "," Pathname split map "," Pathname split "," Pathname "]}," Listen Record add_dir":{"type":"method","name":"add_dir","children":[],"call":["@paths [] [] ","@paths [] ","dir to_s ","(nil) include? ","@tree [] ","(nil) include? ! ","rel_path to_s "," empty_dirname? ! "," empty_dirname? "]}," Listen Record SymlinkDetector _fail":{"type":"method","name":"_fail","children":[],"call":[" fail ","STDERR  puts "," format "," raise "," warn "]}," Listen Record SymlinkDetector verify_unwatched!":{"type":"method","name":"verify_unwatched!","children":[],"call":[" _fail ","entry sys_path ","@real_dirs add? ","entry real_path ","entry entry real_path  "]}," Listen Record SymlinkDetector initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Listen Record Entry _join":{"type":"method","name":"_join","children":[],"call":[" File  join ","args empty? ","(ivar :@relative) compact ","(ivar :@relative) compact  empty? "]}," Listen Record Entry real_path":{"type":"method","name":"real_path","children":[],"call":[" File  realpath "," sys_path "]}," Listen Record Entry sys_path":{"type":"method","name":"sys_path","children":[],"call":[" File  join ","(ivar :@root) compact "]}," Listen Record Entry record_dir_key":{"type":"method","name":"record_dir_key","children":[],"call":[" File  join ","(ivar :@relative) compact "]}," Listen Record Entry meta":{"type":"method","name":"meta","children":[],"call":["lstat mode ","lstat mtime to_f ","lstat mtime "," File  lstat "," sys_path ","lstat size "," File  lstat  mode "," File  lstat  mtime to_f "," File  lstat  mtime "," File   File  lstat  "," File  lstat  size "]}," Listen Record Entry children":{"type":"method","name":"children","children":[],"call":["Entry  new ","(send\n  (send\n    (const nil :Dir) :entries\n    (send nil :sys_path)) :-\n  (array\n    (str \".\")\n    (str \"..\"))) map ","Dir  entries - ","Dir  entries "," sys_path "," _join ","(send\n  (send nil :_entries\n    (send nil :sys_path)) :-\n  (array\n    (str \".\")\n    (str \"..\"))) map "," _entries - "," _entries "]}," Listen Record Entry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen QueueOptimizer _detect_possible_editor_save":{"type":"method","name":"_detect_possible_editor_save","children":[],"call":[" _silenced? "," Pathname ","data [] ","changes each ","changes size == ","changes size "," _silenced? ! "," config silenced? "," config "]}," Listen QueueOptimizer _reinterpret_related_changes":{"type":"method","name":"_reinterpret_related_changes","children":[],"call":["(send\n  (lvar :cookies) :map) flatten ","table fetch ","not_silenced map "," _silenced? "," Pathname ","changes reject "," _detect_possible_editor_save ","cookies map "," config silenced? "," config ","cookies flat_map "," editor_modified? ","  editor_modified? ? "]}," Listen QueueOptimizer _calculate_add_remove_difference":{"type":"method","name":"_calculate_add_remove_difference","children":[],"call":["diff < ","added > ","diff zero? ","diff > ","path exist? ","added - ","x == ","actions count "," config exist? "," config ","added -  < ","added -  zero? ","added -  > "]}," Listen QueueOptimizer _logical_action_for":{"type":"method","name":"_logical_action_for","children":[],"call":[" _calculate_add_remove_difference ","x == ","actions detect ","actions << ","actions delete ","actions find "]}," Listen QueueOptimizer _squash_changes":{"type":"method","name":"_squash_changes","children":[],"call":[" _log ","squashed inspect ","squashed [] << ","squashed [] ","type nil? ","actions each ","(pair\n  (sym :modified)\n  (array)) tap ","actions inspect ","path to_s "," _logical_action_for ","action_list map ","changes group_by map ","changes group_by ","dir + ","changes map "," config debug "," config "]}," Listen QueueOptimizer _smoosh_changes":{"type":"method","name":"_smoosh_changes","children":[],"call":["v uniq! ","s each ","smooshed tap ","smooshed [] << ","(send\n  (lvar :dir) :+\n  (lvar :rel_path)) to_s ","dir + ","smooshed [] ","changes each "," _squash_changes "," _reinterpret_related_changes ","(or\n  (lvar :options)\n  (hash)) [] ","changes group_by "," _adapter_class local_fs? "," _adapter_class ","smooshed key? ","path to_s "]}," Listen Options method_missing":{"type":"method","name":"method_missing","children":[],"call":[" fail ","@options keys inspect ","@options keys ","name inspect ","@options [] ","@options key? "," raise "," respond_to_missing? "]}," Listen Options initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","Celluloid Logger  warn ","given_options inspect ","given_options empty? ","@options []= ","defaults [] ","given_options delete ","defaults keys each ","defaults keys ","opts dup ","Listen Logger  warn ","Listen  logger warn ","Listen  logger "," raise ","defaults each_key ","opts dup  inspect ","opts dup  empty? ","opts dup  delete "]}," Listen Listener _queue_raw_change":{"type":"method","name":"_queue_raw_change","children":[],"call":[" raise "," _error_exception ","worker change "," _warn "," async ","(lvar :type) inspect "," _debug "," _log ","$@ join "," __method__ "," async  change "]}," Listen Listener _stop_wait_thread":{"type":"method","name":"_stop_wait_thread","children":[],"call":[" wait_thread join "," wait_thread "," wait_thread wakeup "," wait_thread alive? "]}," Listen Listener _wakeup_wait_thread":{"type":"method","name":"_wakeup_wait_thread","children":[],"call":[" wait_thread wakeup "," wait_thread "," wait_thread alive? "]}," Listen Listener _start_wait_thread":{"type":"method","name":"_start_wait_thread","children":[],"call":[" _wait_for_changes ","Thread  new "]}," Listen Listener _reconfigure_silencer":{"type":"method","name":"_reconfigure_silencer","children":[],"call":["@silencer configure ","Hash  [] ","rules compact ","@options [] ","@options key? ","(sym :only) map ","@options merge! "," registry []= ","Silencer  new "," registry "]}," Listen Listener _init_tcp_options":{"type":"method","name":"_init_tcp_options","children":[],"call":["port to_i ","target split ","target is_a? ","@options []= ","@tcp_mode == "," fail "," require "]}," Listen Listener _process_changes":{"type":"method","name":"_process_changes","children":[],"call":[" _debug ","Time  now to_f - ","Time  now to_f ","Time  now "," block call "," block ","result all? ","hash [] "," _smoosh_changes "," block nil? ","changes << ","@queue pop ","@queue empty? "," _log ","@queue empty? ! "," _smoosh_changes  [] "]}," Listen Listener _adapter_class":{"type":"method","name":"_adapter_class","children":[],"call":["Adapter  select "," options "]}," Listen Listener _start_adapter":{"type":"method","name":"_start_adapter","children":[],"call":["adapter start "," sync "," sync start "," sync  start "]}," Listen Listener _silenced?":{"type":"method","name":"_silenced?","children":[],"call":["@silencer silenced? "," registry [] silenced? "," registry [] "," registry ","path directory? "," sync silenced? "," sync "]}," Listen Listener _debug_level":{"type":"method","name":"_debug_level","children":[],"call":["debugging to_s "," options [] "," options ","ENV  [] ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Listen Listener queue":{"type":"method","name":"queue","children":[],"call":[" registry [] async broadcast ","message payload "," registry [] async "," registry [] "," registry ","TCP Message  new ","@tcp_mode == "," _wakeup_wait_thread "," state == "," state ","Time  now to_f ","Time  now ","@queue << ","dir relative_path_from ","Pathname  pwd ","@options [] "," fail ","path inspect ","path is_a? ","change inspect ","change is_a? ","type inspect ","(sym :dir) include? ","TCP Message  new  payload "]}," Listen Listener sync":{"type":"method","name":"sync","children":[],"call":["@registry [] "]}," Listen Listener async":{"type":"method","name":"async","children":[],"call":["proxy async "," sync "," sync  async "]}," Listen Listener only":{"type":"method","name":"only","children":[],"call":[" _reconfigure_silencer "," registry []= ","Silencer  new "," registry ","@options []= ","@silencer_controller replace_with_only "]}," Listen Listener paused=":{"type":"method","name":"paused=","children":[],"call":[" transition "]}," Listen Listener processing?":{"type":"method","name":"processing?","children":[],"call":[" state == "," state "]}," Listen Internals ThreadPool stop":{"type":"method","name":"stop","children":[],"call":[]}," Listen Internals ThreadPool add":{"type":"method","name":"add","children":[],"call":[]}," Listen Internals Logging _error_exception":{"type":"method","name":"_error_exception","children":[],"call":[" _log "," _format_error "]}," Listen Internals Logging _format_error":{"type":"method","name":"_format_error","children":[],"call":[" format ",", Backtrace: \n + ","$ERROR_POSITION * "]}," Listen Internals Logging _log":{"type":"method","name":"_log","children":[],"call":["Celluloid Logger  send ","block call "]}," Listen Internals Logging _debug":{"type":"method","name":"_debug","children":[],"call":[" _log "]}," Listen Internals Logging _warn":{"type":"method","name":"_warn","children":[],"call":[" _log "]}," Listen Internals Logging _info":{"type":"method","name":"_info","children":[],"call":[" _log "]}," Listen File inaccurate_mac_time?":{"type":"method","name":"inaccurate_mac_time?","children":[],"call":[]}," Listen Directory _log":{"type":"method","name":"_log","children":[],"call":[]}," Listen Directory _change":{"type":"method","name":"_change","children":[],"call":[]}," Listen Directory _async_changes":{"type":"method","name":"_async_changes","children":[],"call":[]}," Listen Forwarder start":{"type":"method","name":"start","children":[],"call":[" sleep ","listener listen? ","listener start ","Listen  to "," logger info "," logger ","modified empty? ","removed empty? ","added empty? ","@options [] "," proc "," puts ","Proc  new ","listener processing? ","Listen  to  listen? ","Listen  to  start ","Listen  to  processing? "]}," Listen Forwarder initialize":{"type":"method","name":"initialize","children":[],"call":["@logger formatter= "," proc ","@logger level= ","Logger  new "," Logger  new ","Logger  new  formatter= "," Logger  new  formatter= ","Logger  new  level= "," Logger  new  level= "]}," Listen CLI start":{"type":"method","name":"start","children":[],"call":["Listen Forwarder  new start ","Listen Forwarder  new "," options "]}," Listen Change _log":{"type":"method","name":"_log","children":[],"call":["Celluloid Logger  send ","Celluloid  logger send ","Celluloid  logger "]}," Listen Adapter _log":{"type":"method","name":"_log","children":[],"call":["Listen Logger  send "]}," Listen Adapter select":{"type":"method","name":"select","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * ","$ERROR_POSITION inspect "," _warn_polling_fallback "," _usable_adapter_class ","options [] ","Listen  logger warn ","Listen  logger ","Listen  logger debug "]}," Listen Adapter Windows _process_event":{"type":"method","name":"_process_event","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * ","event inspect "," _queue_change ","change type == ","change type "," Pathname dirname to_s "," Pathname dirname "," Pathname ","full_path directory? "," _change ","full_path relative_path_from to_s ","full_path relative_path_from ","change path ","$@ join ","Listen  logger error ","Listen  logger ","Listen  logger debug "," Pathname  directory? "," Pathname  relative_path_from to_s "," Pathname  relative_path_from "]}," Listen Adapter Windows _run":{"type":"method","name":"_run","children":[],"call":["@worker run! "]}," Listen Adapter Windows _configure":{"type":"method","name":"_configure","children":[],"call":["callback call ","@worker watch_recursively ","dir to_s ","WDM Monitor  new "," _log "," require "," _attr_callback ","path to_s "," _dir_callback "," _file_callback "," _directories each "," _directories ","Listen  logger debug ","Listen  logger ","WDM Monitor  new  watch_recursively "]}," Listen Adapter TCP local_fs?":{"type":"method","name":"local_fs?","children":[],"call":[]}," Listen Adapter TCP handle_message":{"type":"method","name":"handle_message","children":[],"call":[" _queue_change ","change to_sym "," Pathname ","type to_sym ","(lvar :type) inspect "," _log ","message object "," _notify_change ","paths each ","message object each ","modification to_sym "]}," Listen Adapter TCP handle_data":{"type":"method","name":"handle_data","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * "," handle_message ","Listen TCP Message  from_buffer ","@buffer << ","$@ join "," handle_Listen TCP Message  from_buffer  "]}," Listen Adapter TCP run":{"type":"method","name":"run","children":[],"call":[" async handle_data "," async ","@socket recv "," async handle_@socket recv  "]}," Listen Adapter TCP finalize":{"type":"method","name":"finalize","children":[],"call":["@socket close "]}," Listen Adapter TCP start":{"type":"method","name":"start","children":[],"call":[" raise "," _log "," format ","$ERROR_POSITION * ","$ERROR_INFO inspect ","attempts > "," sleep "," async run "," async ","TCPSocket  new "," options port "," options "," options host "," run ","String  new "," listener port "," listener "," listener host ","$@ join ","$! inspect "," retries > "," retries "]}," Listen Adapter Polling _process_event":{"type":"method","name":"_process_event","children":[],"call":[" _queue_change "]}," Listen Adapter Polling _run":{"type":"method","name":"_run","children":[],"call":[" sleep ","nap_time > "," options latency - ","Time  now to_f - ","Time  now to_f ","Time  now "," options latency "," options ","callback call ","@polling_callbacks each "," loop "," _latency - "," _latency "," _notify_change "," _directories each "," _directories ","(lvasgn :nap_time\n  (send\n    (send\n      (send nil :options) :latency) :-\n    (begin\n      (send\n        (send\n          (const nil :MonotonicTime) :now) :-\n        (lvar :start))))) > ","MonotonicTime  now - ","MonotonicTime  now "," options latency -  > "," _latency -  > ","(lvasgn : options latency - \n  (send\n    (send\n      (send nil :options) :latency) :-\n    (begin\n      (send\n        (send\n          (const nil :MonotonicTime) :now) :-\n        (lvar :start))))) > ","(lvasgn : _latency - \n  (send\n    (send\n      (send nil :options) :latency) :-\n    (begin\n      (send\n        (send\n          (const nil :MonotonicTime) :now) :-\n        (lvar :start))))) > ","(lvasgn :nap_time\n  (send\n    (send\n      (send nil :options) :latency) :-\n    (begin\n      (send\n        (send\n          (const nil :MonotonicTime) :now) :-\n        (lvar :Time  now to_f ))))) > ","(lvasgn :nap_time\n  (send\n    (send\n      (send nil :options) :latency) :-\n    (begin\n      (send\n        (send\n          (const nil :MonotonicTime) :now) :-\n        (lvar :MonotonicTime  now ))))) > "]}," Listen Adapter Polling _configure":{"type":"method","name":"_configure","children":[],"call":["@polling_callbacks << "]}," Listen Adapter Linux _process_event":{"type":"method","name":"_process_event","children":[],"call":[" _queue_change ","cookie_params merge "," _change ","event flags "," _dir_event? ","event cookie ","event cookie zero? "," _skip_event? ","path dirname relative_path_from to_s ","path dirname relative_path_from ","path dirname ","event flags & ","ENV  [] "," _log ","event flags inspect ","path relative_path_from to_s ","path relative_path_from ","Pathname  new + ","event name ","Pathname  new ","event watcher path ","event watcher "," Pathname dirname "," Pathname ","Listen  logger debug ","Listen  logger ","cookie_cookie_params merge  merge ","Pathname  new +  dirname relative_Pathname  new + _from to_s ","Pathname  new +  dirname relative_Pathname  new + _from ","Pathname  new +  dirname ","Pathname  new +  relative_Pathname  new + _from to_s ","Pathname  new +  relative_Pathname  new + _from ","event watcher Pathname  new +  "]}," Listen Adapter Linux _run":{"type":"method","name":"_run","children":[],"call":["@worker run ","Thread  current []= ","Thread  current "]}," Listen Adapter Linux _configure":{"type":"method","name":"_configure","children":[],"call":[" abort ","STDERR  flush ","STDERR  puts ","@worker watch "," options events "," options ","directory to_s ","INotify Notifier  new "," require "," _callback ","path to_s "," _directories each "," _directories "," INotify Notifier  new ","Kernel  require "," raise ","INotify Notifier  new  watch "]}," Listen Adapter Darwin _process_event":{"type":"method","name":"_process_event","children":[],"call":[" _queue_change ","new_path relative_path_from to_s ","new_path relative_path_from "," _log ","Pathname  new ","path sub ","event each ","event inspect ","path relative_path_from to_s ","path relative_path_from ","path inspect ","Listen  logger debug ","Listen  logger ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Listen Adapter Darwin _run":{"type":"method","name":"_run","children":[],"call":["first run "," _log_exception ","@workers pop run ","@workers pop ","Listen Internals ThreadPool  add ","@workers empty? ","@workers empty? ! ","@worker run ","next_worker run "," _run_worker "," _run_workers_in_background "," _to_array ","worker watch "," method "," options latency "," options ","dirs_to_watch inspect "," _log ","@callbacks keys map ","@callbacks keys ","FSEvent  new "," require ","worker run ","Listen Thread  new ","Listen  logger info ","Listen  logger ","@workers pop  run ","@FSEvent  new s pop run ","@FSEvent  new s pop ","@FSEvent  new s empty? ","@FSEvent  new s empty? ! ","@FSEvent  new  run ","next_FSEvent  new  run "," _run_FSEvent  new  "," _run_FSEvent  new s_in_background ","FSEvent  new  watch ","@callbacks keys map  inspect ","FSEvent  new  run "]}," Listen Adapter Darwin _configure":{"type":"method","name":"_configure","children":[],"call":["@workers << ","worker watch ","dir to_s ","FSEvent  new tap ","FSEvent  new ","Queue  new "," options latency "," options "," require "," _notify_change "," _log ","Pathname  new ","path sub ","changes each ","@worker watch "," _latency "," _directories map "," _directories "," Queue  new ","dir to_s inspect ","@callbacks []= ","FSEvent  new s << ","FSEvent  new  watch "]}," Listen Adapter BSD _find":{"type":"method","name":"_find","children":[],"call":["Find  send "]}," Listen Adapter BSD _process_event":{"type":"method","name":"_process_event","children":[],"call":[" _watch_for_new_file ","full_path directory? "," _queue_change "," _change ","event flags ","path to_s ","full_path relative_path_from ","full_path exist? "," _event_path ","path directory? ","full_full_path relative_path_from  directory? "," _event_path  directory? ","full_path relative_path_from  to_s ","full_full_path relative_path_from  relative_full_path relative_path_from _from "," _event_path  relative_path_from ","full_full_path relative_path_from  exist? "," _event_path  exist? "," _event_full_path relative_path_from  ","full_path relative_path_from  directory? "]}," Listen Adapter BSD _run":{"type":"method","name":"_run","children":[],"call":["@worker run "]}," Listen Adapter BSD _configure":{"type":"method","name":"_configure","children":[],"call":[" _watch_file "," _find ","directory to_s ","KQueue Queue  new ","path to_s "," _directories each "," _directories "]}," Listen Adapter Base _log":{"type":"method","name":"_log","children":[],"call":[" class send "," class ","Celluloid  logger send ","Celluloid  logger ","Listen Logger  send "]}," Listen Adapter Base _log_exception":{"type":"method","name":"_log_exception","children":[],"call":[" _log "," format ","$ERROR_POSITION * ","caller_stack * ","Listen  logger error ","Listen  logger "]}," Listen Adapter Base _queue_change":{"type":"method","name":"_queue_change","children":[],"call":["@mq send ","@snapshots [] invalidate ","@snapshots [] "]}," Listen Adapter Base local_fs?":{"type":"method","name":"local_fs?","children":[],"call":[]}," Listen Adapter Base configure":{"type":"method","name":"configure","children":[],"call":[" _configure ","@callbacks []= "," _process_event "," lambda ","@callbacks [] "," fail ","dir inspect ","dir is_a? ","@directories each ","@snapshots []= ","Change  new ","Record  new "," config directories each "," config directories "," config ","Change Config  new "," config silencer "," config queue "," _log ","Listen  logger warn ","Listen  logger ","@Change  new s []= "]}," Listen Silencer _default_ignore_patterns":{"type":"method","name":"_default_ignore_patterns","children":[],"call":[" _default_ignored_extensions_patterns "," _default_ignored_directories_patterns "]}," Listen Silencer _init_ignore_patterns":{"type":"method","name":"_init_ignore_patterns","children":[],"call":["@ignore_patterns flatten! ","@ignore_patterns compact! ","@ignore_patterns << << "," listener options [] "," listener options "," listener ","@ignore_patterns << "," _default_ignore_patterns ","patterns flatten! ","patterns compact! ","patterns << ","options [] "," listener  listener options  [] "," listener  listener options  "," listener options  [] "]}," Listen Silencer _init_only_patterns":{"type":"method","name":"_init_only_patterns","children":[],"call":[" Array "," listener options [] "," listener options "," listener "]}," Listen TCP Listener target=":{"type":"method","name":"target=","children":[],"call":["@port to_i ","target split ","target is_a? "," recipient? "," raise "," fail ","@port to_i  to_i "]}," Listen TCP Listener mode=":{"type":"method","name":"mode=","children":[],"call":[" raise ","(sym :broadcaster) include? "," fail "]}," Listen TCP Listener _init_options":{"type":"method","name":"_init_options","children":[],"call":["options []= "," recipient? "]}," Listen TCP Listener block":{"type":"method","name":"block","children":[],"call":["@block call "," registry [] async broadcast ","message payload "," registry [] async "," registry [] "," registry ","Message  new ","Proc  new "," broadcaster? "," proc ","Message  new  payload "]}," Listen TCP Listener start":{"type":"method","name":"start","children":[],"call":[" registry [] start "," registry [] "," registry "," supervisor add "," port "," host "," supervisor "," broadcaster? "]}," Listen TCP Listener recipient?":{"type":"method","name":"recipient?","children":[],"call":["@mode == "]}," Listen TCP Listener broadcaster?":{"type":"method","name":"broadcaster?","children":[],"call":["@mode == "]}," Listen TCP Listener initialize":{"type":"method","name":"initialize","children":[],"call":[" target= "," mode= "]}," Listen TCP Broadcaster handle_connection":{"type":"method","name":"handle_connection","children":[],"call":["@sockets << "]}," Listen TCP Broadcaster unicast":{"type":"method","name":"unicast","children":[],"call":["@sockets delete ","socket write "]}," Listen Adapter TCP usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Listen File _set_md5":{"type":"method","name":"_set_md5","children":[],"call":["Digest MD5  file digest ","Digest MD5  file "," path "]}," Listen boot_celluloid":{"type":"method","name":"boot_celluloid","children":[],"call":["Celluloid  boot ","Celluloid  running? "]}," Listen Listener _smoosh_changes":{"type":"method","name":"_smoosh_changes","children":[],"call":["v uniq! ","smooshed each ","smooshed [] << ","h [] to_s ","h [] ","smooshed [] ","h keys first ","h keys ","changes each "," _squash_changes "," _reinterpret_related_changes ","x [] ","changes group_by "," _local_fs? ","s each ","smooshed tap ","path to_s ","changes map each ","changes map "," registry [] class local_fs? "," registry [] class "," registry [] "," registry "]}," Listen Listener _log":{"type":"method","name":"_log","children":[],"call":["Celluloid Logger  send ","Celluloid  logger send ","Celluloid  logger "]}," Listen Listener _detect_possible_editor_save":{"type":"method","name":"_detect_possible_editor_save","children":[],"call":[" _silenced? ! "," _silenced? ","to [] ","from [] ","x keys first <=> ","y keys first ","y keys ","x keys first ","x keys ","changes sort ","changes size == ","changes size "]}," Listen Listener _reinterpret_related_changes":{"type":"method","name":"_reinterpret_related_changes","children":[],"call":["(send\n  (lvar :cookies) :map) flatten ","table fetch ","(send\n  (send\n    (lvar :changes) :map\n    (block-pass\n      (sym :first))) :reject) map "," _silenced? ","changes map reject ","changes map "," _detect_possible_editor_save ","cookies map ","not_silenced map "]}," Listen Listener _calculate_add_remove_difference":{"type":"method","name":"_calculate_add_remove_difference","children":[],"call":["diff < ","added > ","diff zero? ","diff > ","path exist? ","added - ","x == ","actions count ","added -  < ","added -  zero? ","added -  > "]}," Listen Listener _logical_action_for":{"type":"method","name":"_logical_action_for","children":[],"call":[" _calculate_add_remove_difference ","x == ","actions find ","actions << ","actions delete ","actions detect "]}," Listen Listener _squash_changes":{"type":"method","name":"_squash_changes","children":[],"call":["Celluloid  logger info ","squashed inspect ","Celluloid  logger ","squashed [] << ","squashed [] ","type nil? ","actions each ","(pair\n  (sym :modified)\n  (array)) tap ","actions inspect ","path to_s "," _logical_action_for ","action_list map ","changes group_by map ","changes group_by "]}," Listen Listener _local_fs?":{"type":"method","name":"_local_fs?","children":[],"call":[" registry [] is_a? ! "," registry [] is_a? "," registry [] "," registry "]}," Listen Silencer match":{"type":"method","name":"match","children":[],"call":[" silenced? ","args first "]}," Listen Adapter Linux _log":{"type":"method","name":"_log","children":[],"call":["Celluloid  logger info ","Celluloid  logger ","event flags inspect ","event flags ","event name ","event event flags inspect  inspect ","event event flags inspect  ","event event name  "]}," Listen Record still_building!":{"type":"method","name":"still_building!","children":[],"call":["Time  now "]}," Listen Listener silencer":{"type":"method","name":"silencer","children":[],"call":["@registry [] "]}," Listen Adapter Windows _dir_callback":{"type":"method","name":"_dir_callback","children":[],"call":[" raise "," _log ","$@ join "," _notify_change ","change type == ","change type ","path dirname ","change inspect "," _path ","change path "," lambda "," _path  dirname "," _ _path  ","change  _path  "]}," Listen Adapter Windows _attr_callback":{"type":"method","name":"_attr_callback","children":[],"call":[" raise "," _log ","$@ join "," _notify_change "," _path ","change path "," _change ","change type ","change inspect ","path directory? "," lambda "," _ _path  ","change  _path  "," _path  directory? "]}," Listen Adapter Windows _file_callback":{"type":"method","name":"_file_callback","children":[],"call":[" raise "," _log ","$@ join "," _notify_change "," _change ","change type ","change inspect "," _path ","change path "," lambda "," _ _path  ","change  _path  "]}," Listen Adapter Linux _callback":{"type":"method","name":"_callback","children":[],"call":[" _notify_change ","options merge "," _change ","event flags "," _dir_event? ","event cookie ","event cookie zero? "," _skip_event? ","path dirname ","event flags & ","ENV  [] "," _log ","event flags inspect ","event name ","Pathname  new + ","Pathname  new ","event watcher path ","event watcher "," lambda ","Pathname  new +  dirname ","event watcher Pathname  new +  "]}," Listen Adapter Darwin _latency":{"type":"method","name":"_latency","children":[],"call":[" listener options [] "," listener options "," listener "]}," Listen Adapter Base _directories":{"type":"method","name":"_directories","children":[],"call":[" listener directories "," listener "]}," Listen Adapter Base _configure":{"type":"method","name":"_configure","children":[],"call":[]}," Listen Silencer Controller _reconfigure_silencer":{"type":"method","name":"_reconfigure_silencer","children":[],"call":["@silencer configure ","@prev_silencer_options dup freeze ","@prev_silencer_options dup ","opts delete ","opts [] empty? ","opts [] ","opts key? ","Hash  [] "," Array flatten compact "," Array flatten "," Array ","opts map ","extra_options dup ","Hash  []  delete ","extra_options dup  delete ","Hash  []  [] empty? ","extra_options dup  [] empty? ","Hash  []  [] ","extra_options dup  [] ","Hash  []  key? ","extra_options dup  key? ","Hash  []  map ","extra_options dup  map "]}," Listen Silencer Controller replace_with_only":{"type":"method","name":"replace_with_only","children":[],"call":[" _reconfigure_silencer "]}," Listen Silencer Controller replace_with_bang_ignores":{"type":"method","name":"replace_with_bang_ignores","children":[],"call":[" _reconfigure_silencer "]}," Listen Silencer Controller append_ignores":{"type":"method","name":"append_ignores","children":[],"call":[" _reconfigure_silencer ","prev_ignores + "," Array ","@prev_silencer_options [] "," Array  + "]}," Listen Silencer Controller initialize":{"type":"method","name":"initialize","children":[],"call":[" _reconfigure_silencer ","Hash  [] ","rules compact ","opts [] ","opts key? ","(sym :only) map "]}," Listen Record tree":{"type":"method","name":"tree","children":[],"call":[]}," Listen QueueOptimizer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen QueueOptimizer smoosh_changes":{"type":"method","name":"smoosh_changes","children":[],"call":[" _squash_changes "," _reinterpret_related_changes ","(or\n  (lvar :options)\n  (hash)) [] ","changes group_by "]}," Listen QueueOptimizer Config debug":{"type":"method","name":"debug","children":[],"call":["Listen  logger debug ","Listen  logger "]}," Listen QueueOptimizer Config silenced?":{"type":"method","name":"silenced?","children":[],"call":["@silencer silenced? "]}," Listen QueueOptimizer Config exist?":{"type":"method","name":"exist?","children":[],"call":[" Pathname exist? "," Pathname "]}," Listen QueueOptimizer Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen setup_default_logger_if_unset":{"type":"method","name":"setup_default_logger_if_unset","children":[],"call":[]}," Listen logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Listen logger":{"type":"method","name":"logger","children":[],"call":[" default_logger "]}," Listen Listener Config adapter_select_options":{"type":"method","name":"adapter_select_options","children":[],"call":["Hash  [] ","valid_keys include? ","@options select ","(str \"force_polling\") map ","(str \"force_polling\") map  include? "]}," Listen Listener Config adapter_instance_options":{"type":"method","name":"adapter_instance_options","children":[],"call":["Hash  [] ","valid_keys include? ","@options select ","klass const_get keys ","klass const_get ","klass const_get keys  include? "]}," Listen Listener Config silencer_rules":{"type":"method","name":"silencer_rules","children":[],"call":[]}," Listen Listener Config min_delay_between_events":{"type":"method","name":"min_delay_between_events","children":[],"call":[]}," Listen Listener Config relative?":{"type":"method","name":"relative?","children":[],"call":[]}," Listen Listener Config initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] ","DEFAULTS  merge ","DEFAULTS  merge  [] "]}," Listen FSM State valid_transition?":{"type":"method","name":"valid_transition?","children":[],"call":["@transitions include? ","new_state to_sym ","@transitions ! "]}," Listen FSM State call":{"type":"method","name":"call","children":[],"call":["obj instance_eval "]}," Listen FSM State initialize":{"type":"method","name":"initialize","children":[],"call":[" Array map "," Array "]}," Listen FSM current_state_name":{"type":"method","name":"current_state_name","children":[],"call":[" current_state name "," current_state "]}," Listen FSM current_state":{"type":"method","name":"current_state","children":[],"call":[" states [] "," states "," class states [] "," class states "," class "]}," Listen FSM default_state":{"type":"method","name":"default_state","children":[],"call":[" class default_state "," class "]}," Listen FSM states":{"type":"method","name":"states","children":[],"call":[" class states "," class "]}," Listen FSM transition_with_callbacks!":{"type":"method","name":"transition_with_callbacks!","children":[],"call":["state_name call "," transition! ","state_name name ","new_state call ","new_state name "]}," Listen FSM validate_and_sanitize_new_state":{"type":"method","name":"validate_and_sanitize_new_state","children":[],"call":[" fail "," class ","state_name == "," default_state "," states [] "," states "," current_state transitions map join "," current_state transitions map "," current_state transitions "," current_state "," current_state valid_transition? ! "," current_state valid_transition? "," current_state_name == "," current_state_name ","state_name to_sym "," raise ","new_state_name == "," class start_state "," class states [] "," class states ","@state == ","state_name to_sym  == "," current_state  current_state transitions map join _transition? ! "," current_state  current_state transitions map join _transition? "," current_state_name to_sym  == "," current_state_name to_sym  ","state_name to_sym  to_sym "," states [] _name == "," class states [] _name == ","new_state_name to_sym  == "]}," Listen FSM transition!":{"type":"method","name":"transition!","children":[],"call":["@state_changed broadcast "," block_given? ","@mutex synchronize "," raise ","new_state_name inspect ","new_state_name is_a? "]}," Listen FSM transition":{"type":"method","name":"transition","children":[],"call":[" transition_with_callbacks! "," validate_and_sanitize_new_state "," raise ","new_state_name inspect ","new_state_name is_a? "," validate_and_sanitize_ validate_and_sanitize_new_state  "," validate_and_sanitize_new_state _name inspect "," validate_and_sanitize_new_state _name is_a? "]}," Listen FSM initialize":{"type":"method","name":"initialize","children":[],"call":[" class default_state "," class "]}," Listen FSM ClassMethods state":{"type":"method","name":"state","children":[],"call":[" states []= ","State  new ","options [] "," states "," default_state ","name to_sym ","args each ","h []= ","k to_s ","args pop each_with_object ","args pop ","args last is_a? ","args last "," raise ","state_name inspect ","state_name is_a? ","name to_sym  to_sym ","state_name to_sym  inspect ","state_name to_sym  is_a? "]}," Listen FSM ClassMethods states":{"type":"method","name":"states","children":[],"call":[]}," Listen FSM ClassMethods default_state":{"type":"method","name":"default_state","children":[],"call":["new_default to_sym "]}," Listen FSM included":{"type":"method","name":"included","children":[],"call":[]}," Listen Event Queue _safe_relative_from_cwd":{"type":"method","name":"_safe_relative_from_cwd","children":[],"call":["dir relative_path_from ","Pathname  pwd "," config relative? "," config "]}," Listen Event Queue pop":{"type":"method","name":"pop","children":[],"call":[" event_queue pop "," event_queue "]}," Listen Event Queue empty?":{"type":"method","name":"empty?","children":[],"call":[" event_queue empty? "," event_queue "]}," Listen Event Queue <<":{"type":"method","name":"<<","children":[],"call":[" block call "," block "," event_queue public_send "," event_queue "," _safe_relative_from_cwd "," fail ","path inspect ","path is_a? ","change inspect ","change is_a? ","type inspect ","(sym :dir) include? ","@event_queue << ","@config relative? ","(sym : _safe_relative_from_cwd ) include? "]}," Listen Event Queue initialize":{"type":"method","name":"initialize","children":[],"call":["Thread Queue  new "," Queue  new "]}," Listen Event Queue Config relative?":{"type":"method","name":"relative?","children":[],"call":[]}," Listen Event Queue Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Event Processor _process_changes":{"type":"method","name":"_process_changes","children":[],"call":["Listen Logger  debug "," _timestamp - "," _timestamp "," config call "," config ","result all? ","hash [] "," config optimize_changes "," config callable? ","changes << "," config event_queue pop "," config event_queue "," config event_queue empty? "," _reset_no_unprocessed_events ","Listen  logger debug ","Listen  logger "," Listen Thread  rescue_and_log ","MonotonicTime  now - ","MonotonicTime  now "," config optimize_changes  [] "," config  config callable? ? "]}," Listen Event Processor _timestamp":{"type":"method","name":"_timestamp","children":[],"call":[" config timestamp "," config "]}," Listen Event Processor _flush_wakeup_reasons":{"type":"method","name":"_flush_wakeup_reasons","children":[],"call":[" block_given? ","reasons pop ","reasons empty? ","@reasons pop ","@reasons empty? ","reasons pop s pop ","@reasons pop s pop ","reasons pop s empty? ","@reasons pop s empty? ","@@reasons pop s pop ","@@reasons pop s empty? "]}," Listen Event Processor _wait_until_events":{"type":"method","name":"_wait_until_events","children":[],"call":[" _timestamp "," _sleep "," config event_queue empty? "," config event_queue "," config "," config event_queue pop tap "," config event_queue pop ","MonotonicTime  now "]}," Listen Event Processor _deadline":{"type":"method","name":"_deadline","children":[],"call":["@first_unprocessed_event_time + ","@_remember_time_of_first_unprocessed_event + "]}," Listen Event Processor _reset_no_unprocessed_events":{"type":"method","name":"_reset_no_unprocessed_events","children":[],"call":[]}," Listen Event Processor _remember_time_of_first_unprocessed_event":{"type":"method","name":"_remember_time_of_first_unprocessed_event","children":[],"call":[" _timestamp ","MonotonicTime  now "]}," Listen Event Processor _sleep":{"type":"method","name":"_sleep","children":[],"call":[" _remember_time_of_first_unprocessed_event "," config paused? "," config ","reason == "," _flush_wakeup_reasons "," _check_stopped "," config sleep ","@listener paused? ! ","@listener paused? "]}," Listen Event Processor _check_stopped":{"type":"method","name":"_check_stopped","children":[],"call":[" raise "," _flush_wakeup_reasons "," config stopped? "," config ","@listener stopped? "]}," Listen Event Processor _wait_until_no_longer_paused":{"type":"method","name":"_wait_until_no_longer_paused","children":[],"call":[" _sleep "," config paused? "," config ","@listener wait_for_state ","Listener  states keys - ","Listener  states keys ","Listener  states "]}," Listen Event Processor _wait_until_events_calm_down":{"type":"method","name":"_wait_until_events_calm_down","children":[],"call":[" _sleep ","diff <= "," _deadline - "," _deadline "," _timestamp "," loop ","MonotonicTime  now "," _deadline -  <= ","MonotonicTime   _timestamp  ","MonotonicTime  MonotonicTime  now  "]}," Listen Event Processor loop_for":{"type":"method","name":"loop_for","children":[],"call":["Listen Logger  debug "," _process_changes "," _wait_until_no_longer_paused "," _wait_until_events_calm_down "," _wait_until_events "," loop ","Listen  logger debug ","Listen  logger "," _check_stopped "," _wait_until_ _wait_until_events s_calm_down "," _wait_until_ _wait_until_events s "]}," Listen Event Processor initialize":{"type":"method","name":"initialize","children":[],"call":[" _reset_no_unprocessed_events ","config listener "]}," Listen Event Loop _wakeup":{"type":"method","name":"_wakeup","children":[],"call":[" wait_thread wakeup "," wait_thread ","@reasons << ","@wait_thread wakeup "]}," Listen Event Loop _nice_error":{"type":"method","name":"_nice_error","children":[],"call":["Listen Logger  error "," format ","ex backtrace * ","ex backtrace "]}," Listen Event Loop _wait_until_resumed":{"type":"method","name":"_wait_until_resumed","children":[],"call":[" state= "," sleep ","ready_queue << "]}," Listen Event Loop _sleep":{"type":"method","name":"_sleep","children":[],"call":["Kernel  sleep "]}," Listen Event Loop _wait_for_changes":{"type":"method","name":"_wait_for_changes","children":[],"call":[" _nice_error ","processor loop_for ","config min_delay_between_events "," _wait_until_resumed ","Event Processor  new ","Event Processor  new  loop_for "]}," Listen Event Loop stopped?":{"type":"method","name":"stopped?","children":[],"call":[" wait_thread ! "," wait_thread "," state == "," state "]}," Listen Event Loop teardown":{"type":"method","name":"teardown","children":[],"call":[" wait_thread join "," wait_thread "," _wakeup "," wait_thread alive? "]}," Listen Event Loop pause":{"type":"method","name":"pause","children":[],"call":[" fail "]}," Listen Event Loop resume":{"type":"method","name":"resume","children":[],"call":[" _wakeup "," wait_thread "," fail "," stopped? "]}," Listen Event Loop setup":{"type":"method","name":"setup","children":[],"call":["q pop ","Timeout  timeout ","Listen Logger  debug "," _wait_for_changes "," config ","Internals ThreadPool  add ","Thread Queue  new "," Queue  new ","Thread Queue  new  pop "," Queue  new  pop "]}," Listen Event Loop processing?":{"type":"method","name":"processing?","children":[],"call":[" state == "," state "," paused? "," stopped? "]}," Listen Event Loop paused?":{"type":"method","name":"paused?","children":[],"call":[" state == "," state "," wait_thread "]}," Listen Event Loop wakeup_on_event":{"type":"method","name":"wakeup_on_event","children":[],"call":[" _wakeup "," wait_thread alive? "," wait_thread "," processing? "," stopped? "," started? "]}," Listen Event Loop initialize":{"type":"method","name":"initialize","children":[],"call":["Thread Queue  new "," Queue  new "," initialize_fsm "]}," Listen Event Config paused?":{"type":"method","name":"paused?","children":[],"call":[" listener state == "," listener state "," listener "]}," Listen Event Config stopped?":{"type":"method","name":"stopped?","children":[],"call":[" listener state == "," listener state "," listener "]}," Listen Event Config min_delay_between_events":{"type":"method","name":"min_delay_between_events","children":[],"call":[]}," Listen Event Config optimize_changes":{"type":"method","name":"optimize_changes","children":[],"call":["@queue_optimizer smoosh_changes "]}," Listen Event Config callable?":{"type":"method","name":"callable?","children":[],"call":[]}," Listen Event Config event_queue":{"type":"method","name":"event_queue","children":[],"call":[]}," Listen Event Config timestamp":{"type":"method","name":"timestamp","children":[],"call":["Time  now to_f ","Time  now "]}," Listen Event Config call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Listen Event Config sleep":{"type":"method","name":"sleep","children":[],"call":["Kernel  sleep "]}," Listen Event Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Directory detect_type":{"type":"method","name":"detect_type","children":[],"call":[]}," Listen Change invalidate":{"type":"method","name":"invalidate","children":[],"call":[" raise ","Listen Logger  error "," format ","ex backtrace * ","ex backtrace "," exinspect "," __method__ "," class "," config queue "," config ","options [] ","change ! ","File  change "," record ","Directory  scan ","type == ","options inspect ","Listen Logger  debug ","watched_dir + ","rel_path inspect "," config silenced? ","cookie ! ","Pathname  new "," record root ","Listen  logger error ","Listen  logger ","Listen  logger debug ","@config queue ","options [] ! ","@config silenced? ","File  change  ! ","options []  ! ","File  File  change  ","File  options []  ","Pathname  new  + ","rel_watched_dir +  inspect "]}," Listen Change Config queue":{"type":"method","name":"queue","children":[],"call":["@queue << "]}," Listen Change Config silenced?":{"type":"method","name":"silenced?","children":[],"call":["@silencer silenced? "," Pathname "]}," Listen Change Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Listen Backend min_delay_between_events":{"type":"method","name":"min_delay_between_events","children":[],"call":[]}," Listen Backend stop":{"type":"method","name":"stop","children":[],"call":[" adapter stop "," adapter "]}," Listen Backend start":{"type":"method","name":"start","children":[],"call":[" adapter start "," adapter "]}," Listen Backend initialize":{"type":"method","name":"initialize","children":[],"call":["adapter_class new ","Adapter Config  new ","config adapter_instance_options "," DEFAULTS  [] ","config min_delay_between_events ","Adapter  select ","config adapter_select_options ","Adapter  select  new "]}," Listen Adapter Config initialize":{"type":"method","name":"initialize","children":[],"call":["Pathname  new realpath ","Pathname  new ","directory to_s ","directories map ","Dir  pwd ","directories to_a empty? ","directories to_a "," fail ","pathname directory? ","@directories each "]}," Listen Adapter Base _timed":{"type":"method","name":"_timed","children":[],"call":[" raise ","Listen Logger  warn ","$ERROR_INFO inspect ","Listen Logger  info "," format ","Time  now to_f - ","Time  now to_f ","Time  now ","Listen  logger warn ","Listen  logger ","Listen  logger info ","MonotonicTime  now - ","MonotonicTime  now "]}," Listen Adapter Base started?":{"type":"method","name":"started?","children":[],"call":[]}," Listen Adapter Darwin _to_array":{"type":"method","name":"_to_array","children":[],"call":["workers << ","queue pop ","queue empty? "]}," Listen Adapter Darwin _run_workers_in_background":{"type":"method","name":"_run_workers_in_background","children":[],"call":[" _run_worker ","Listen Internals ThreadPool  add ","workers each "]}," Listen Adapter Darwin _run_worker":{"type":"method","name":"_run_worker","children":[],"call":[" _log_exception ","worker run "," _log ","worker inspect "," caller "]}," Listen Adapter Linux _stop":{"type":"method","name":"_stop","children":[],"call":["@worker close "]}," Listen Adapter Base _stop":{"type":"method","name":"_stop","children":[],"call":[]}," Listen Adapter Base stop":{"type":"method","name":"stop","children":[],"call":[" _stop "," config queue close "," config queue "," config "]}," Listen Record Entry _entries":{"type":"method","name":"_entries","children":[],"call":[" raise ","Dir  entries ","directory ! "," File  directory? "," File  exist? ","RUBY_ENGINE  == "," File  directory?  ! "," File   File  directory? ? "]}," Listen Directory _children":{"type":"method","name":"_children","children":[],"call":[]}," Listen Directory ascendant_of?":{"type":"method","name":"ascendant_of?","children":[],"call":[]}," Listen Adapter Darwin _process_changes":{"type":"method","name":"_process_changes","children":[],"call":["callback call ","Listen Directory  ascendant_of? ","watched_dir eql? ","@callbacks each ","Pathname  new ","dir sub ","dirs each ","watched_Pathname  new  eql? ","Pathname  new  sub ","Pathname  new s each "]}," Listen Thread _exception_with_causes":{"type":"method","name":"_exception_with_causes","children":[],"call":["result << "," _exception_with_causes ","ex cause ","(begin\n  (send\n    (lvar :ex) :class)) +@ ","ex class ","exception cause ","(begin\n  (send\n    (lvar :exception) :class)) +@ ","exception class ","(begin\n  (send\n    (lvar :ex) :class)) +@  << ","(begin\n  (send\n    (lvar :exception) :class)) +@  << "]}," Listen Thread _log_exception":{"type":"method","name":"_log_exception","children":[],"call":["Listen  logger error ","Listen  logger ","complete_backtrace * "," _exception_with_causes ","ex backtrace ","exception backtrace ","ex backtrace  * ","exception backtrace  * "]}," Listen Thread rescue_and_log":{"type":"method","name":"rescue_and_log","children":[],"call":[" _log_exception "]}," Listen Thread new":{"type":"method","name":"new","children":[],"call":["thread name= ","(send\n  (const\n    (cbase) :Thread) :new) tap "," rescue_and_log "," Thread  new "," caller "," _log_exception "]}," Listen Record _sub_tree":{"type":"method","name":"_sub_tree","children":[],"call":["result []= ","path sub ","result merge! ","path == ","path start_with? "," tree each_with_object "," tree ","@tree each_with_object "]}," Listen default_logger":{"type":"method","name":"default_logger","children":[],"call":[" Logger  new ","ENV  [] to_s ","ENV  [] "]}," Listen Listener stopped?":{"type":"method","name":"stopped?","children":[],"call":[" state == "," state "]}," Listen FSM wait_for_state":{"type":"method","name":"wait_for_state","children":[],"call":["wait_for_states include? ","@state_changed wait ","wait_for_states include? ! ","@mutex synchronize "," raise ","state inspect ","state is_a? ","wait_for_states each "]}," Listen FSM initialize_fsm":{"type":"method","name":"initialize_fsm","children":[],"call":[" ConditionVariable  new "," Mutex  new "," class start_state "," class "]}," Listen FSM ClassMethods start_state":{"type":"method","name":"start_state","children":[],"call":[" raise ","new_start_state inspect ","new_start_state is_a? "]}," Listen Event Loop _process_changes":{"type":"method","name":"_process_changes","children":[],"call":["processor loop_for ","@config min_delay_between_events "," transition! ","Event Processor  new ","Event Processor  new  loop_for "]}," Listen Event Loop stop":{"type":"method","name":"stop","children":[],"call":["@wait_thread join ","@wait_thread alive? "," transition! "," stopped? "]}," Listen Event Loop start":{"type":"method","name":"start","children":[],"call":["Listen  logger debug ","Listen  logger "," raise "," state inspect "," state "," wait_for_state "," _process_changes ","Listen Thread  new "," transition! "," state == "]}," Listen Event Loop started?":{"type":"method","name":"started?","children":[],"call":[" state == "," state "]}," Listen Adapter Darwin _stop":{"type":"method","name":"_stop","children":[],"call":[]}," Listen Silencer _only?":{"type":"method","name":"_only?","children":[],"call":["path =~ "," only_patterns any? "," only_patterns "]}," Listen Silencer _ignore?":{"type":"method","name":"_ignore?","children":[],"call":["path =~ "," ignore_patterns any? "," ignore_patterns "]}," Listen QueueOptimizer editor_modified?":{"type":"method","name":"editor_modified?","children":[],"call":[" config silenced? ! "," config silenced? "," Pathname "," config ","data [] ","changes each ","changes size == ","changes size "]}," Listen Options respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@options has_key? "]}," Listen MonotonicTime now":{"type":"method","name":"now","children":[],"call":["Time  now to_f ","Time  now ","Process  clock_gettime "]}," Listen Record reset_tree":{"type":"method","name":"reset_tree","children":[],"call":["h []= ","Hash  new "]}," Listen Record empty_dirname?":{"type":"method","name":"empty_dirname?","children":[],"call":["dirname == "]}}