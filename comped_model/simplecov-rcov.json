{" RcovFormatter path_result":{"type":"method","name":"path_result","children":[],"call":[]}," RcovFormatter format":{"type":"method","name":"format","children":[],"call":[" puts ","SimpleCov Formatter RcovFormatter  path_result ","result command_name ","file_result write ","File  open ","FileUtils  mkdir_p ","File  dirname ","template result "," binding ","ERB  new ","File  read ","result covered_percent ","(send\n  (send\n    (lvar :result) :files) :map) inject ","e covered_lines count + ","e missed_lines count ","e missed_lines ","e covered_lines count ","e covered_lines ","result files map ","result files ","e lines count ","e lines ","SimpleCov Formatter RcovFormatter  total_coverage "," coverage ","SimpleCov Formatter RcovFormatter  output_path "," write_file ","File  join "," relative_filename "," shortened_filename ","result files each "," template "," coverage_code ","Time  now ","h []= ","Pathname  new cleanpath to_s gsub gsub gsub + ","Pathname  new cleanpath to_s gsub gsub gsub ","Pathname  new cleanpath to_s gsub gsub ","Pathname  new cleanpath to_s gsub ","Pathname  new cleanpath to_s ","Pathname  new cleanpath ","Pathname  new ","Hash  new ","FileUtils  cp_r "," asset_output_path ","Dir  [] each ","Dir  [] ","ERB  new  result "," template  result "," ERB  new  ","  template  "]}," RcovFormatter total_coverage":{"type":"method","name":"total_coverage","children":[],"call":[]}," RcovFormatter coverage":{"type":"method","name":"coverage","children":[],"call":[" lines_covered * / "," lines_of_code to_f "," lines_of_code "," lines_covered * "," lines_covered ","(send\n  (lvar :file_list) :map) inject ","f missed_lines count ","f missed_lines ","file_list map "," lines_of_code == ","file_list length == ","file_list length ","(send\n  (send nil :lines_covered\n    (lvar :file_list)) :+\n  (lvar :never_lines)) * / "," lines to_f "," lines ","(send\n  (send nil :lines_covered\n    (lvar :file_list)) :+\n  (lvar :never_lines)) * "," lines_covered + ","f never_lines count ","f never_lines ","(send\n  (send nil :lines_covered\n    (lvar :file_list)) :+\n  (lvar :(send\n  (lvar :file_list) :map) inject )) * / ","(send\n  (send nil :lines_covered\n    (lvar :file_list)) :+\n  (lvar :(send\n  (lvar :file_list) :map) inject )) * ","f (send\n  (lvar :file_list) :map) inject  count ","f (send\n  (lvar :file_list) :map) inject  "]}," RcovFormatter lines_of_code":{"type":"method","name":"lines_of_code","children":[],"call":[" lines_missed + "," lines_covered "," lines_missed "]}," RcovFormatter lines_missed":{"type":"method","name":"lines_missed","children":[],"call":["(send\n  (lvar :file_list) :map) inject ","f missed_lines count ","f missed_lines ","file_list map ","file_list length == ","file_list length "]}," RcovFormatter lines_covered":{"type":"method","name":"lines_covered","children":[],"call":["(send\n  (lvar :file_list) :map) inject ","f covered_lines count ","f covered_lines ","file_list map ","file_list length == ","file_list length "]}," RcovFormatter line_css_for":{"type":"method","name":"line_css_for","children":[],"call":["coverage > ","coverage nil? "]}," RcovFormatter file_filter_classes":{"type":"method","name":"file_filter_classes","children":[],"call":["file_path split [] * ","file_path split [] ","file_path split "]}," RcovFormatter relative_filename":{"type":"method","name":"relative_filename","children":[],"call":["@path_relativizer [] "]}," RcovFormatter shortened_filename":{"type":"method","name":"shortened_filename","children":[],"call":["file filename gsub ","SimpleCov  root ","file filename "]}," RcovFormatter coverage_threshold_classes":{"type":"method","name":"coverage_threshold_classes","children":[],"call":["(send\n  (block\n    (send\n      (begin\n        (irange\n          (int 1)\n          (int 10))) :find_all)\n    (args\n      (arg :i))\n    (send\n      (send\n        (lvar :i) :*\n        (int 10)) :>\n      (lvar :percentage))) :map) * ","i to_i * ","i to_i ","(send\n  (begin\n    (irange\n      (int 1)\n      (int 10))) :find_all) map ","i * > ","i * ","(irange\n  (int 1)\n  (int 10)) find_all ","percentage == "]}," RcovFormatter total_coverage_for_report":{"type":"method","name":"total_coverage_for_report","children":[],"call":["(send\n  (send\n    (send\n      (lvar :file) :covered_lines) :count) :+\n  (send\n    (send\n      (lvar :file) :never_lines) :count)) * / ","file lines count to_f ","file lines count ","file lines ","(send\n  (send\n    (send\n      (lvar :file) :covered_lines) :count) :+\n  (send\n    (send\n      (lvar :file) :never_lines) :count)) * ","file covered_lines count + ","file never_lines count ","file never_lines ","file covered_lines count ","file covered_lines ","file lines count == "]}," RcovFormatter code_coverage_html":{"type":"method","name":"code_coverage_html","children":[],"call":["100 - ","code_coverage_percentage round ","%3.2f % "]}," RcovFormatter assets_path":{"type":"method","name":"assets_path","children":[],"call":["File  join "]}," RcovFormatter project_name":{"type":"method","name":"project_name","children":[],"call":["SimpleCov  project_name "]}," RcovFormatter asset_output_path":{"type":"method","name":"asset_output_path","children":[],"call":["FileUtils  mkdir_p ","File  join ","SimpleCov Formatter RcovFormatter  output_path "]}," RcovFormatter output_path":{"type":"method","name":"output_path","children":[],"call":[]}," RcovFormatter coverage_code":{"type":"method","name":"coverage_code","children":[],"call":[" lines_covered * / "," lines_of_code to_f "," lines_of_code "," lines_covered * "," lines_covered "," lines_of_code == ","file_list length == ","file_list length "]}," RcovFormatter lines":{"type":"method","name":"lines","children":[],"call":["(send\n  (lvar :file_list) :map) inject ","e lines count ","e lines ","file_list map ","file_list length == ","file_list length "]}," RcovFormatter template":{"type":"method","name":"template","children":[],"call":["ERB  new ","File  read ","File  join ","File  dirname "]}," RcovFormatter write_file":{"type":"method","name":"write_file","children":[],"call":["file_result write ","File  open ","template result "]}}