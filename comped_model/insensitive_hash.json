{" Hash insensitive":{"type":"method","name":"insensitive","children":[],"call":["InsensitiveHash  new ","InsensitiveHash  [] ","ih underscore= ","options [] ","options has_key? ","ih replace ","InsensitiveHash  new tap ","ih safe= ","ih default_proc= "," default_proc ","ih default= "," default ","InsensitiveHash  [] tap ","ih encoder= ","ih merge_recursive! "]}," InsensitiveHash encode":{"type":"method","name":"encode","children":[],"call":["key to_s downcase ","key to_s ","key downcase ","key gsub ","key to_s downcase gsub ","@encoder call ","key to_s downcase  to_s downcase ","key to_s downcase  to_s ","key to_s downcase  downcase ","key to_s downcase  gsub ","key to_s downcase  to_s downcase gsub "]}," InsensitiveHash wrap":{"type":"method","name":"wrap","children":[],"call":[" wrap ","value map ","ih underscore= ","InsensitiveHash  [] tap ","InsensitiveHash  [] ","ih underscore? ","value tap ","ih merge_recursive! ","ih encoder= "," encoder ","ih safe= "," safe? ","InsensitiveHash  new tap ","InsensitiveHash  new "," class new tap "," class new "," class "]}," InsensitiveHash delete":{"type":"method","name":"delete","children":[],"call":["@key_map [] "," encode "," lookup_key "]}," InsensitiveHash has_key?":{"type":"method","name":"has_key?","children":[],"call":["@key_map [] "," encode "]}," InsensitiveHash []=":{"type":"method","name":"[]=","children":[],"call":["InsensitiveHash  wrap ","@key_map []= "," encode "," delete "," lookup_key ","@key_map [] ","@key_map has_key? "," wrap "," underscore? "]}," InsensitiveHash []":{"type":"method","name":"[]","children":[],"call":["@key_map [] "," encode "]}," InsensitiveHash initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","InsensitiveHash  wrap ","hash each ","h []= "," encode ","hash keys inject ","hash keys "," block_given? "," raise ","ArgumentError  new ","default nil? "]}," InsensitiveHash lookup_key":{"type":"method","name":"lookup_key","children":[],"call":["@key_map [] ","@key_map delete ","@key_map has_key? "," encode "]}," InsensitiveHash values_at":{"type":"method","name":"values_at","children":[],"call":[" [] ","keys map "]}," InsensitiveHash shift":{"type":"method","name":"shift","children":[],"call":["v == ","ret first ","@key_map delete_if "," tap "]}," InsensitiveHash replace":{"type":"method","name":"replace","children":[],"call":[" []= ","other each "," clear "," underscore= "," default_proc= ","other default_proc "," default= ","other default "," detect_clash "," underscore? ","other underscore? ","other respond_to? ","@key_map []= "," encode "," each ","@key_map clear "," safe= ","other safe? "," safe? "," encoder= ","other encoder "]}," InsensitiveHash clear":{"type":"method","name":"clear","children":[],"call":["@key_map clear "]}," InsensitiveHash merge":{"type":"method","name":"merge","children":[],"call":["ih merge! ","InsensitiveHash  [] tap ","InsensitiveHash  [] ","ih replace ","InsensitiveHash  new tap ","InsensitiveHash  new "," class new tap "," class new "," class "]}," InsensitiveHash merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other_hash each "," detect_clash "," underscore? "," deep_set "," store "]}," InsensitiveHash to_hash":{"type":"method","name":"to_hash","children":[],"call":[" merge "]}," InsensitiveHash fetch":{"type":"method","name":"fetch","children":[],"call":["args []= "," lookup_key ","args [] ","args first "]}," InsensitiveHash detect_clash":{"type":"method","name":"detect_clash","children":[],"call":[" raise ","KeyClashError  new ","ekeys != ","ekeys uniq ","(send\n  (send\n    (lvar :hash) :keys) :map) tap "," encode ","hash keys map ","hash keys "]}," InsensitiveHash underscore?":{"type":"method","name":"underscore?","children":[],"call":[]}," InsensitiveHash underscore=":{"type":"method","name":"underscore=","children":[],"call":[" []= "," delete "," keys each "," keys "," detect_clash "," raise ","ArgumentError  new ","(true) include? "]}," InsensitiveHash safe?":{"type":"method","name":"safe?","children":[],"call":[]}," InsensitiveHash safe=":{"type":"method","name":"safe=","children":[],"call":[" raise ","ArgumentError  new ","(true) include? "]}," InsensitiveHash clone":{"type":"method","name":"clone","children":[],"call":["copy instance_variable_set ","@key_map dup "," tap "]}," InsensitiveHash dup":{"type":"method","name":"dup","children":[],"call":["copy instance_variable_set ","@key_map dup "," tap "]}," InsensitiveHash deep_set":{"type":"method","name":"deep_set","children":[],"call":[" []= "," wrap "]}," InsensitiveHash encoder=":{"type":"method","name":"encoder=","children":[],"call":[" store ","kvs each "," clear "," to_a "," raise ","prc is_a? ","prc respond_to? "," to_a  each "]}," InsensitiveHash merge_recursive!":{"type":"method","name":"merge_recursive!","children":[],"call":[" deep_set ","other_hash each "," detect_clash "]}}