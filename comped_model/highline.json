{" HighLine get_response":{"type":"method","name":"get_response","children":[],"call":["@input gets chomp ","@input gets "," say "," get_character chr "," get_character ","@input getc chr ","@input getc ","@question character == ","@question character "," get_line ","@question character nil? ","@question change_case ","@question echo ","@question remove_whitespace ","character == ","line << ","character chr ","@question echo != ","@question echo == ","@output print ","line size == ","@question limit ","line size ","@question limit nil? "," raise ","@input eof? ","@question first_answer ","@question first_answer? "," restore_mode "," raw_no_echo_mode ","CHARACTER_MODE  == ","@output flush ","@question overwrite ","line slice! ","backspace_limit >= ","@input getbyte chr ","@input getbyte ","@java_terminal enableEcho ","HighLine  Style code ","HighLine  Style "," get_single_character chr "," get_single_character ","@java_terminal disableEcho ","@java_terminal isEchoEnabled ","line force_encoding ","Encoding  default_external ","line_with_next_char_encoded [] ","line_with_next_char_encoded valid_encoding? ","line dup force_encoding ","line dup ","line dup force_encoding size "," encode "," get_ get_character  chr "," get_ get_single_character  chr "," get_ get_character  "," get_ get_single_character  ","@question  get_character  == ","@question  get_single_character  == ","@question  get_character  ","@question  get_single_character  "," get_line force_encoding  "," get_ encode  ","@question  get_character  nil? ","@question  get_single_character  nil? "," get_character  == "," get_single_character  == ","line force_encoding  << "," encode  << "," get_character  chr "," get_single_character  chr ","line force_encoding  size == "," encode  size == ","line force_encoding  size "," encode  size ","line force_encoding  slice! "," encode  slice! ","line size  >= ","line dup force_encoding size  >= "," get_single_ get_character  chr "," get_single_ get_single_character  chr "," get_single_ get_character  "," get_single_ get_single_character  ","line force_encoding  force_encoding "," encode  force_encoding ","line dup force_encoding  [] ","line force_encoding _with_next_char_encoded [] "," encode _with_next_char_encoded [] ","line dup force_encoding  valid_encoding? ","line force_encoding _with_next_char_encoded valid_encoding? "," encode _with_next_char_encoded valid_encoding? ","line force_encoding  dup force_encoding "," encode  dup force_encoding ","line force_encoding  dup "," encode  dup ","line force_encoding  dup force_encoding size "," encode  dup force_encoding size "]}," HighLine explain_error":{"type":"method","name":"explain_error","children":[],"call":[" say ","question responses [] ","question responses ","question responses [] == ","@question responses [] ","@question responses ","@question responses [] == ","error nil? ","question ask_on_error_msg ","question final_responses [] ","question final_responses "]}," HighLine say":{"type":"method","name":"say","children":[],"call":["@output puts ","@output flush ","@output print ","statement [] == ","statement [] ","statement length > ","statement length ","statement to_s ","template result "," binding ","ERB  new "," page_print ","@page_at nil? "," wrap ","@wrap_at nil? ","statement to_str "," indentation + "," indentation ","statement gsub ","statement force_encoding ","Encoding  default_external "," format_statement ","(send\n  (send nil :indentation) :+\n  (lvar :statement)) encode "," output puts "," output "," output flush "," output print ","statement empty? "," render_statement ","@(send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put puts ","@(send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put flush ","@(send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put print ","statement to_s  [] == ","template result  [] == "," page_print  [] == "," wrap  [] == ","statement to_str  [] == ","statement gsub  [] == "," format_statement  [] == "," render_statement  [] == ","statement to_s  [] ","template result  [] "," page_print  [] "," wrap  [] ","statement to_str  [] ","statement gsub  [] "," format_statement  [] "," render_statement  [] ","statement to_s  length > ","template result  length > "," page_print  length > "," wrap  length > ","statement to_str  length > ","statement gsub  length > "," format_statement  length > "," render_statement  length > ","statement to_s  length ","template result  length "," page_print  length "," wrap  length ","statement to_str  length ","statement gsub  length "," format_statement  length "," render_statement  length ","statement to_s  to_s ","template result  to_s "," page_print  to_s "," wrap  to_s ","statement to_str  to_s ","statement gsub  to_s "," format_statement  to_s "," render_statement  to_s ","ERB  new  result ","statement to_s  to_str ","template result  to_str "," page_print  to_str "," wrap  to_str ","statement to_str  to_str ","statement gsub  to_str "," format_statement  to_str "," render_statement  to_str ","statement to_s  gsub ","template result  gsub "," page_print  gsub "," wrap  gsub ","statement to_str  gsub ","statement gsub  gsub "," format_statement  gsub "," render_statement  gsub ","statement to_s  force_encoding ","template result  force_encoding "," page_print  force_encoding "," wrap  force_encoding ","statement to_str  force_encoding ","statement gsub  force_encoding "," format_statement  force_encoding "," render_statement  force_encoding "," format_statement to_s  "," format_template result  "," format_ page_print  "," format_ wrap  "," format_statement to_str  "," format_statement gsub  "," format_ format_statement  "," format_ render_statement  ","(send\n  (send nil :indentation) :+\n  (lvar :statement to_s )) encode ","(send\n  (send nil :indentation) :+\n  (lvar :template result )) encode ","(send\n  (send nil :indentation) :+\n  (lvar : page_print )) encode ","(send\n  (send nil :indentation) :+\n  (lvar : wrap )) encode ","(send\n  (send nil :indentation) :+\n  (lvar :statement to_str )) encode ","(send\n  (send nil :indentation) :+\n  (lvar :statement gsub )) encode ","(send\n  (send nil :indentation) :+\n  (lvar : format_statement )) encode ","(send\n  (send nil :indentation) :+\n  (lvar : render_statement )) encode "," (send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put puts "," (send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put "," (send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put flush "," (send\n  (send nil :indentation) :+\n  (lvar :statement)) encode put print ","statement to_s  empty? ","template result  empty? "," page_print  empty? "," wrap  empty? ","statement to_str  empty? ","statement gsub  empty? "," format_statement  empty? "," render_statement  empty? "," render_statement to_s  "," render_template result  "," render_ page_print  "," render_ wrap  "," render_statement to_str  "," render_statement gsub  "," render_ format_statement  "," render_ render_statement  "]}," HighLine ask":{"type":"method","name":"ask","children":[],"call":[" explain_error "," raise ","$! is_a? ","question in_range? ","question convert ","question valid_answer? ","question answer_or_default "," get_response "," say ","Question  new ","@question in_range? ","@question convert ","@question valid_answer? ","@question answer_or_default ","context_change agree ","template result "," binding ","ERB  new ","@question confirm ","@question confirm == "," class new "," class ","@question readline "," gather ","@question gather ","@question echo == ","@question echo ","error message =~ ","error message ","error is_a? ","@question limit nil? ","@question limit ","QuestionAsker  new ask_once ","QuestionAsker  new ","QuestionAsker  new gather_answers ","question gather ","Question  build ","Question  new  in_range? ","Question  build  in_range? ","Question  new  convert ","Question  build  convert ","question valid_question convert ? ","question valid_question answer_or_default ? ","question valid_@question convert ? ","question valid_@question answer_or_default ? ","Question  new  valid_answer? ","Question  build  valid_answer? ","question question convert _or_default ","question question answer_or_default _or_default ","question @question convert _or_default ","question @question answer_or_default _or_default ","Question  new  answer_or_default ","Question  build  answer_or_default ","@Question  new  in_range? ","@Question  build  in_range? ","@Question  new  convert ","@Question  build  convert ","@question valid_question convert ? ","@question valid_question answer_or_default ? ","@question valid_@question convert ? ","@question valid_@question answer_or_default ? ","@Question  new  valid_answer? ","@Question  build  valid_answer? ","@question question convert _or_default ","@question question answer_or_default _or_default ","@question @question convert _or_default ","@question @question answer_or_default _or_default ","@Question  new  answer_or_default ","@Question  build  answer_or_default "," class new  agree ","ERB  new  result ","@Question  new  confirm ","@Question  build  confirm ","Question  new  confirm ","@Question  new  confirm == ","@Question  build  confirm == ","Question  new  confirm == ","@Question  new  readline ","@Question  build  readline ","Question  new  readline ","@Question  new  gather ","@Question  build  gather ","Question  new  gather ","@Question  new  echo == ","@Question  build  echo == ","Question  new  echo == ","@Question  new  echo ","@Question  build  echo ","Question  new  echo ","@Question  new  limit nil? ","@Question  build  limit nil? ","Question  new  limit nil? ","@Question  new  limit ","@Question  build  limit ","Question  new  limit ","QuestionAsker  new gather_question convert s ","QuestionAsker  new gather_question answer_or_default s ","QuestionAsker  new gather_@question convert s ","QuestionAsker  new gather_@question answer_or_default s ","Question  build  gather "]}," HighLine agree":{"type":"method","name":"agree","children":[],"call":["q responses []= ","q responses ","q validate= "," ask ","yn downcase [] == ","yn downcase [] ","yn downcase "," lambda ","q character= "," block_given? ","q completion= "]}," HighLine initialize":{"type":"method","name":"initialize","children":[],"call":[" page_at= "," wrap_at= ","@java_console setUsePagination ","@java_console setBellEnabled ","@java_console setUseHistory ","ConsoleReader  new ","Terminal  getTerminal ","OutputStreamWriter  new ","Channels  newOutputStream ","$stdout to_channel ","Channels  newInputStream ","$stdin to_channel "," java_import "," require "," initialize_system_extensions "," respond_to? ","HighLine Terminal  get_terminal "," default_use_color ","ConsoleReader  new  setUsePagination ","ConsoleReader  new  setBellEnabled ","ConsoleReader  new  setUseHistory "]}," HighLine Question expected_range":{"type":"method","name":"expected_range","children":[],"call":["expected [] join + ","expected last ","expected [] join ","expected [] ","expected join ","expected first ","expected size ","expected << ","@in inspect ","@in nil? ","@below nil? ","@above nil? "," below "," above "]}," HighLine Question append_default":{"type":"method","name":"append_default","children":[],"call":["@question << ","@question []= ","@question [] == ","@question [] ","@question == ","@question =~ "," template << "," default "," template "," template []= "," template [] == "," template [] "," template == ","Regexp  last_match "," template =~ ","@template << ","@template []= ","@template [] == ","@template [] ","@template == ","@template =~ "]}," HighLine Question valid_answer?":{"type":"method","name":"valid_answer?","children":[],"call":["@validate [] ","@validate is_a? ","answer_string =~ ","@validate nil? "," validate [] "," answer "," validate "," validate is_a? "," answer =~ "," validate ! ","@validate ! "," validate valid? "," validate respond_to? "]}," HighLine Question to_s":{"type":"method","name":"to_s","children":[],"call":[" template "]}," HighLine Question in_range?":{"type":"method","name":"in_range?","children":[],"call":["@in include? ","@in nil? ","answer_object < ","@below nil? ","answer_object > ","@above nil? "," answer ","@in ! "," answer < "," below "," below ! "," answer > "," above "," above ! ","@below ! ","@above ! "]}," HighLine Question answer_or_default":{"type":"method","name":"answer_or_default","children":[],"call":["@default nil? ! ","@default nil? ","answer_string length == ","answer_string length "," default ","answer_string empty? "]}," HighLine Question convert":{"type":"method","name":"convert","children":[],"call":["@answer_type [] ","@answer_type is_a? ","@answer_type parse ","(const nil :Date) include? ","@answer_type complete last ","@answer_type complete ","@answer_type extend ","Regexp  new ","@answer_type == ","answer_string to_sym ","Kernel  send ","@answer_type to_s to_sym ","@answer_type to_s ","(const nil :Float) include? ","@answer_type nil? ","answer last "," raise ","answer nil? ","Pathname  new ","File  join ","@directory to_s ","File  open ","choices complete ","choices extend "," selection ","(const nil :File) include? ","HighLine  String ","(const\n  (cbase) :String) include? ","AnswerConverter  new convert ","AnswerConverter  new ","@@answer_type complete _type [] ","@choices complete _type [] ","@@answer_type complete _type is_a? ","@choices complete _type is_a? ","@@answer_type complete _type parse ","@choices complete _type parse ","@@answer_type complete _type complete last ","@choices complete _type complete last ","@@answer_type complete _type complete ","@choices complete _type complete ","@@answer_type complete _type extend ","@choices complete _type extend ","@@answer_type complete _type == ","@choices complete _type == ","@answer_type complete _string to_sym ","choices complete _string to_sym ","@@answer_type complete _type to_s to_sym ","@choices complete _type to_s to_sym ","@@answer_type complete _type to_s ","@choices complete _type to_s ","@@answer_type complete _type nil? ","@choices complete _type nil? ","@answer_type complete  last ","choices complete  last ","@answer_type complete  nil? ","choices complete  nil? "," selection  complete "," selection  extend "]}," HighLine Question initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :ambiguous_completion)\n  (send\n    (str \"Ambiguous choice.  \") :+\n    (dstr\n      (str \"Please choose one of \")\n      (begin\n        (send\n          (ivar :@answer_type) :inspect))\n      (str \".\")))) merge ","Your answer isn't valid (must match  + ","@validate inspect ","Your answer isn't within the expected range  + "," expected_range ","Ambiguous choice.   + ","@answer_type inspect "," append_default "," default nil? "," default "," block_given? ","Hash  new "," build_responses ","Pathname  new ","File  expand_path ","File  dirname ","question dup "," String dup "," String "," default_responses_hash ","template dup "]}," HighLine get_line":{"type":"method","name":"get_line","children":[],"call":["@question remove_whitespace ","@input gets ","@question change_case ","Readline  readline ","Readline  completion_proc= ","completions [] "," lambda ","@question selection abbrev ","@question selection ","@output string "," say ","StringIO  new "," require ","@question readline "," raise ","@input eof? ","@question selection grep ","Regexp  escape ","@java_terminal enableEcho ","@java_console readLine ","@java_terminal disableEcho ","@java_terminal isEchoEnabled ","String  new ","raw_answer nil? ","@question question "," format_statement "," terminal get_line "," terminal ","@@output string  remove_whitespace ","@@output string  change_case ","@question selection abbrev  [] ","@@output string  selection abbrev ","@@output string  selection ","StringIO  new  string ","@@output string  readline ","@@output string  selection grep ","raw_@question change_case  nil? ","@input gets  nil? ","@java_console readLine  nil? ","String  new  nil? ","Readline  readline  nil? ","@@output string  @output string  "," format_ format_statement  "]}," HighLine get_character":{"type":"method","name":"get_character","children":[],"call":[" system ","@input getc ","Win32API  new Call ","Win32API  new ","Termios  setattr ","(send\n  (const\n    (const nil :Termios) :ECHO) :|\n  (const\n    (const nil :Termios) :ICANON)) ~ ","Termios ECHO  | ","new_settings c_lflag ","old_settings dup ","Termios  getattr ","old_settings dup  c_lflag ","Termios  getattr  dup "]}," HighLine color":{"type":"method","name":"color","children":[],"call":["colors join "," class const_get ","c to_s upcase ","c to_s "," class ","c is_a? ","colors map! "," class use_color? ","colors flatten join ","colors flatten "," class color_scheme [] "," class color_scheme "," class color_scheme include? "," class using_color_scheme? "," class color ","HighLine  Style color ","HighLine  Style "," use_color? "]}," HighLine Question remove_whitespace":{"type":"method","name":"remove_whitespace","children":[],"call":["answer_string gsub ","@whitespace == ","result gsub ","answer_string send ","@whitespace to_s [] ","@whitespace to_s ","(sym :strip_and_collapse) include? ","(sym :strip) include? ","@whitespace nil? "," whitespace == "," whitespace "," whitespace to_s [] "," whitespace to_s "," whitespace ! ","@whitespace ! ","answer_string send  gsub "]}," HighLine wrap":{"type":"method","name":"wrap","children":[],"call":["wrapped join ","wrapped << ","line []= ","line sub! ","replace sub! ","replace []= ","replace rindex ","1 dup ","line =~ ","@wrap_at + ","lines each ","text each_line ","$~ begin + ","$~ begin ","wrap_at + ","line length - "," actual_length ","line length ","1 dup  sub! ","1 dup  []= ","replace rreplace rindex  ","1 dup  rindex ","@@wrap_at +  + ","@wrap_at +  + "]}," HighLine page_print":{"type":"method","name":"page_print","children":[],"call":["lines join ","@output puts "," ask ","lines slice! join ","lines slice! ","lines size > ","lines size ","output scan ","HighLine  new ask ","HighLine  new ","(send\n  (array\n    (str \"...\\n\")) :+\n  (send\n    (lvar :lines) :slice\n    (int -2)\n    (int 1))) join ","(str \"...\\n\") + ","lines slice "," continue_paging? ","lines last ","output lines to_a ","output lines ","output scan  join ","output lines to_a  join ","output scan  slice! join ","output lines to_a  slice! join ","output scan  slice! ","output lines to_a  slice! ","output scan  size > ","output lines to_a  size > ","output scan  size ","output lines to_a  size ","(send\n  (array\n    (str \"...\\n\")) :+\n  (send\n    (lvar :output scan ) :slice\n    (int -2)\n    (int 1))) join ","(send\n  (array\n    (str \"...\\n\")) :+\n  (send\n    (lvar :output lines to_a ) :slice\n    (int -2)\n    (int 1))) join ","output scan  slice ","output lines to_a  slice ","output scan  last ","output lines to_a  last ","output output scan  to_a ","output output lines to_a  to_a ","output output scan  ","output output lines to_a  "]}," HighLine Question change_case":{"type":"method","name":"change_case","children":[],"call":["answer_string capitalize ","@case == ","answer_string downcase ","(sym :down) include? ","answer_string upcase ","(sym :up) include? "]}," HighLine list":{"type":"method","name":"list","children":[],"call":["(send\n  (lvar :items) :map) join ","items map ","list << ","(send\n  (lvar :columns) :map) compact join + ","(send\n  (lvar :columns) :map) compact join ","(send\n  (lvar :columns) :map) compact ","column [] ","columns map ","columns first size times ","columns first size ","columns first ","columns [] << ","columns [] ","index / ","items each_with_index ","Array  new ","(send\n  (lvar :rows) :map) join ","row join + ","row join ","rows map ","rows [] << ","rows [] ","mode == ","(send\n  (send\n    (lvar :items) :size) :/\n  (send\n    (lvar :option) :to_f)) ceil ","items size / ","option to_f ","items size ","(str \"%-\") % ","(send\n  (lvar :items) :max) length ","a length <=> ","b length ","a length ","items max ","(send\n  (lvar :limit) :+\n  (int 2)) / ","max_length + ","limit + ","option nil? ","items [] join + ","items last ","items [] join ","items [] ","items first ","items to_ary ","item length - "," actual_length ","item length "," actual_length <=> ","ERB  new result "," binding ","ERB  new ","items to_ary map ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :widths)) :map) compact join strip + ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :widths)) :map) compact join strip ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :widths)) :map) compact join ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :widths)) :map) compact ","width + ","field to_s length - ","field to_s length ","field to_s ","columns zip map ","columns zip ","widths []= ","size > ","widths [] ","column each ","columns each_with_index ","(send\n  (lvar :widths) :inject\n  (int 0)) <= ","sum + + ","sum + ","widths inject ","column_count == ","(send\n  (send\n    (lvar :items) :size) :/\n  (send\n    (lvar :column_count) :to_f)) ceil ","column_count to_f ","items size downto ","(send\n  (send\n    (lvar :row) :zip\n    (lvar :widths)) :map) join + ","(send\n  (send\n    (lvar :row) :zip\n    (lvar :widths)) :map) join ","i + ","row zip map ","row zip ","row each_with_index ","rows each ","item to_s length - ","item to_s length ","item to_s ","items size == ","items empty? ","item nil? ","field size ","ListRenderer  new render ","ListRenderer  new ","(send\n  (lvar :items to_ary ) :map) join ","items to_ary  map ","columns first  actual_length  times ","columns first field size  times ","columns first  actual_length  ","columns first field size  ","items to_ary  each_with_index ","(send\n  (send\n    (lvar :items) :size) :/\n  (send\n    (lvar :(send\n  (lvar :limit) :+\n  (int 2)) / ) :to_f)) ceil ","(send\n  (send\n    (lvar :items to_ary ) :size) :/\n  (send\n    (lvar :option) :to_f)) ceil ","(send\n  (send\n    (lvar :items) : actual_length ) :/\n  (send\n    (lvar :option) :to_f)) ceil ","(send\n  (send\n    (lvar :items) :field size ) :/\n  (send\n    (lvar :option) :to_f)) ceil ","items to_ary  size / ","items  actual_length  / ","items field size  / ","(send\n  (lvar :limit) :+\n  (int 2)) /  to_f ","items to_ary  size ","items  actual_length  ","items field size  ","(send\n  (lvar :items to_ary ) :max) length ","items to_ary  max ","(send\n  (lvar :items) :max) length  + "," actual_length  + ","(send\n  (lvar :limit) :+\n  (int 2)) /  nil? ","items to_ary  [] join + ","items to_ary  last ","items to_ary  [] join ","items to_ary  [] ","items to_ary  first ","items to_ary  to_ary ","items to_ary  to_ary map ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :Array  new )) :map) compact join strip + ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :Array  new )) :map) compact join strip ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :Array  new )) :map) compact join ","(send\n  (send\n    (lvar :columns) :zip\n    (lvar :Array  new )) :map) compact ","column []  to_s length - ","column []  to_s length ","column []  to_s ","Array  new  []= "," actual_length  > ","field size  > ","Array  new  [] ","(send\n  (lvar :Array  new ) :inject\n  (int 0)) <= ","Array  new  inject ","(send\n  (send\n    (lvar :items to_ary ) :size) :/\n  (send\n    (lvar :column_count) :to_f)) ceil ","(send\n  (send\n    (lvar :items) : actual_length ) :/\n  (send\n    (lvar :column_count) :to_f)) ceil ","(send\n  (send\n    (lvar :items) :field size ) :/\n  (send\n    (lvar :column_count) :to_f)) ceil ","items to_ary  size downto ","items  actual_length  downto ","items field size  downto ","(send\n  (send\n    (lvar :row) :zip\n    (lvar :Array  new )) :map) join + ","(send\n  (send\n    (lvar :row) :zip\n    (lvar :Array  new )) :map) join ","items to_ary  size == ","items  actual_length  == ","items field size  == ","items to_ary  empty? ","column []  size ","field  actual_length  ","field field size  "]}," HighLine choose":{"type":"method","name":"choose","children":[],"call":["@menu select "," ask ","@menu answer_type ","@menu shell ","@menu prompt ","@menu header ","@menu answer_type= ","@menu options ","command sub ","answer last "," raise ","answer nil? ","options complete ","options extend ","command split first ","command split "," lambda ","@menu choices ","items empty? ","Menu  new ","command to_s split first ","command to_s split ","command to_s ","@menu completion= ","menu select ","menu gather_selected ","menu gather ","details << ","value [] ","selection << ","selected each ","menu shell ","menu answer_type= ","menu options "," shell_style_lambda ","menu completion= ","menu choices ","@Menu  new  select ","@menu options complete _type ","@Menu  new  answer_type ","@Menu  new  shell ","@Menu  new  prompt ","@Menu  new  header ","@menu options complete _type= ","@Menu  new  answer_type= ","@menu @menu options  ","@menu menu options  ","@Menu  new  options ","options complete  last ","options complete  nil? ","@menu options  complete ","menu options  complete ","@menu options  extend ","menu options  extend ","@Menu  new  choices ","@Menu  new  completion= ","Menu  new  select ","menu gather_ ask  ","Menu  new  gather_selected ","Menu  new  gather "," ask  each ","Menu  new  shell ","menu options complete _type= ","Menu  new  answer_type= ","menu @menu options  ","menu menu options  ","Menu  new  options ","Menu  new  completion= ","Menu  new  choices "]}," HighLine Question to_str":{"type":"method","name":"to_str","children":[],"call":[]}," HighLine Question build_responses":{"type":"method","name":"build_responses","children":[],"call":["(pair\n  (sym :ambiguous_completion)\n  (send\n    (str \"Ambiguous choice.  \") :+\n    (dstr\n      (str \"Please choose one of \")\n      (begin\n        (send\n          (ivar :@answer_type) :inspect))\n      (str \".\")))) merge ","Your answer isn't valid (must match  + ","@validate inspect ","Your answer isn't within the expected range  + "," expected_range ","You must choose one of  + ","@answer_type inspect ","Ambiguous choice.   + "," append_default "," default nil? "," default ","new_hash merge ","old_hash merge ","You must choose one of  + + ","choice_error_str_func call ","Ambiguous choice.  Please choose one of  + + ","Ambiguous choice.  Please choose one of  + ","message_source inspect ","[ + + ","[ + ","(send\n  (lvar :message_source) :map) join ","message_source map ","message_source is_a? "," lambda ","(const\n  (cbase) :String) include? "," default class ","@internal_responses merge "," build_responses_new_hash "," responses "," append_default_to_template "," default_hint_show "," build_responses_new_hash  merge "," responses  merge ","@internal_responses merge  merge "," build_responses_ build_responses_new_hash  "]}," HighLine Menu update_responses":{"type":"method","name":"update_responses","children":[],"call":["(pair\n  (sym :ambiguous_completion)\n  (send\n    (str \"Ambiguous choice.  \") :+\n    (dstr\n      (str \"Please choose one of \")\n      (begin\n        (send\n          (send nil :options) :inspect))\n      (str \".\")))) merge ","Your answer isn't valid (must match  + ","@validate inspect ","Your answer isn't within the expected range  + "," expected_range ","You must choose one of  + "," options inspect "," options ","Ambiguous choice.   + "," append_default "," default nil? "," default ","@responses merge "," build_responses ","(pair\n  (sym :ambiguous_completion)\n  (send\n    (str \"Ambiguous choice.  \") :+\n    (dstr\n      (str \"Please choose one of \")\n      (begin\n        (send\n          (send nil :options) :inspect))\n      (str \".\")))) merge  merge ","@responses merge  merge "]}," HighLine Menu to_str":{"type":"method","name":"to_str","children":[],"call":["@list_option inspect ","@flow inspect ","(str \"<%= if @header.nil? then \") + + + ","(str \"<%= if @header.nil? then \") + + ","(str \"<%= if @header.nil? then \") + "]}," HighLine Menu to_ary":{"type":"method","name":"to_ary","children":[],"call":["c first "," index ","@items map ","l_index succ! ","@items index + ","@items index "," decorate_item ","item text to_s ","item text ","@items map with_index ","i text "]}," HighLine Menu select":{"type":"method","name":"select","children":[],"call":["action nil? ","action call ","action nil? ! ","@nil_on_handled ! ","@items [] ","c first == ","c first ","@items find ","(send\n  (ivar :@items) :map) index ","l_index succ! ","@items map ","selection to_i - ","selection to_i ","selection =~ ","@items slice! ","@hidden_items size ","@items size - ","@items size ","@items concat "," value_for_selected_item "," find_item_from_selection "," all_items "," get_item_by_letter "," get_item_by_number ","@ all_items  [] ","@ all_items  find ","(send\n  (ivar :@items) :map) (send\n  (ivar :@items) :map) index  ","(send\n  (ivar :@ all_items ) :map) index ","l_(send\n  (ivar :@items) :map) index  succ! ","@ all_items  map ","@ all_items  slice! ","@hidden_ all_items  size ","@ all_items  size - ","@ all_items  size ","@ all_items  concat "," value_for_ find_item_from_selection  "," all_ all_items  "]}," HighLine Menu options":{"type":"method","name":"options","children":[],"call":["by_index + ","c first ","@items collect "," String ","(irange\n  (int 1)\n  (send\n    (ivar :@items) :size)) collect ","@items size ","l_index succ! ","@items map ","@index == ","@items slice! ","@hidden_items size ","@items size - ","@items concat "," map_items_by_index + "," map_items_by_name "," map_items_by_index ","items map "," all_items ","@ all_items  collect ","(irange\n  (int 1)\n  (send\n    (ivar :@ all_items ) :size)) collect ","@ all_items  size ","@ all_items  map ","@ all_items  slice! ","@hidden_ all_items  size ","@ all_items  size - ","@ all_items  concat "," map_ all_items _by_index + "," map_ all_items _by_name "," map_ all_items _by_index "," all_items  map "," all_ all_items  "]}," HighLine Menu layout=":{"type":"method","name":"layout=","children":[],"call":[" index= "]}," HighLine Menu index=":{"type":"method","name":"index=","children":[],"call":["@index is_a? ","@index == "]}," HighLine Menu choices":{"type":"method","name":"choices","children":[],"call":[" choice ","names each "]}," HighLine Menu choice":{"type":"method","name":"choice","children":[],"call":["@items << ","@help []= ","name to_s downcase ","name to_s ","help nil? "," update_responses ","@help merge! ","item item_help ","Menu Item  new ","MenuItem  new ","@Menu Item  new s << ","@MenuItem  new s << ","Menu Item  new  Menu Item  new _help ","MenuItem  new  MenuItem  new _help "]}," HighLine Menu initialize":{"type":"method","name":"initialize","children":[],"call":[" update_responses "," block_given? "," init_help ","@help empty? ! ","@help empty? ","Hash  new "," class index_color "," class ","Hash  new  empty? ! ","Hash  new  empty? "]}," HighLine gather":{"type":"method","name":"gather","children":[],"call":["@answers []= "," ask ","@gather keys sort each ","@gather keys sort ","@gather keys ","@answers pop ","@answers << ","@answers last to_s =~ ","@answers last to_s ","@answers last ","@gather is_a? ","@answers last to_s == ","original_question question= ","@gather zero? ","@question gather= ","@question gather ","original_question verify_match "," explain_error "," unique_answers size > "," unique_answers size "," unique_answers ","@question verify_match ","@question question ","@question gather  keys sort each ","@question gather  keys sort ","@question gather  keys ","@question gather  is_a? ","@question gather  zero? ","original_question @question verify_match  ","@question @question verify_match  "]}," HighLine Question selection":{"type":"method","name":"selection","children":[],"call":["File  basename ","Dir  [] map ","Dir  [] ","File  join ","@directory to_s ","(const nil :File) include? ","@answer_type is_a? ","@completion is_a? "," glob "," directory to_s "," directory "," completion "," completion is_a? "]}," HighLine Menu help":{"type":"method","name":"help","children":[],"call":["@help []= "]}," HighLine Menu init_help":{"type":"method","name":"init_help","children":[],"call":["@highline say ","@help [] ","topic empty? ","topic downcase! ","topic strip! "," choice ","This command will display helpful messages about  + + + + ","topics inspect ","This command will display helpful messages about  + + + ","This command will display helpful messages about  + + ","This command will display helpful messages about  + ","@help include? ","@help keys sort ","@help keys ","@items include? ","@help keys sort  inspect "]}," HighLine actual_length":{"type":"method","name":"actual_length","children":[],"call":["string_with_escapes gsub length ","string_with_escapes gsub ","string_with_escapes to_s gsub length ","string_with_escapes to_s gsub ","string_with_escapes to_s ","Wrapper  actual_length "]}," HighLine use_color?":{"type":"method","name":"use_color?","children":[],"call":[" use_color "]}," HighLine use_color=":{"type":"method","name":"use_color=","children":[],"call":[]}," HighLine Question first_answer?":{"type":"method","name":"first_answer?","children":[],"call":["@first_answer nil? ! ","@first_answer nil? ","@first_answer ! ! ","@first_answer ! "]}," HighLine Question first_answer":{"type":"method","name":"first_answer","children":[],"call":[]}," HighLine Menu hidden":{"type":"method","name":"hidden","children":[],"call":["@help []= ","name to_s downcase ","name to_s ","help nil? ","@hidden_items << ","@help merge! ","item item_help ","Menu Item  new ","MenuItem  new ","@hidden_Menu Item  new s << ","@hidden_MenuItem  new s << ","Menu Item  new  Menu Item  new _help ","MenuItem  new  MenuItem  new _help "]}," Object or_ask":{"type":"method","name":"or_ask","children":[],"call":["details call ","details nil? ","question first_answer= "," String "," nil? "," ask "]}," HighLine output_rows":{"type":"method","name":"output_rows","children":[],"call":[" terminal_size last "," terminal_size ","@output tty? "," terminal terminal_size last "," terminal terminal_size "," terminal "]}," HighLine output_cols":{"type":"method","name":"output_cols","children":[],"call":[" terminal_size first "," terminal_size ","@output tty? "," terminal terminal_size first "," terminal terminal_size "," terminal "]}," HighLine page_at=":{"type":"method","name":"page_at=","children":[],"call":[" output_rows ","setting == "," output_rows - "]}," HighLine wrap_at=":{"type":"method","name":"wrap_at=","children":[],"call":[" output_cols ","setting == "]}," HighLine SystemExtensions terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["(send\n  (send\n    (xstr\n      (str \"stty size\")) :split) :map) reverse ","x to_i ","(str \"stty size\") split map ","(str \"stty size\") split ","bottom - + ","bottom - ","right - + ","right - ","buf unpack ","m_GetConsoleScreenBufferInfo call ","m_GetStdHandle call ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack ","(int 0) * ","format size ","Win32API  new "," x to_i "," x ","(nth-ref 2) map ","(str \"stty\") =~ "," GetConsoleScreenBufferInfo "," GetStdHandle ","FFI NCurses  endwin ","FFI NCurses  getmaxyx reverse ","FFI NCurses  getmaxyx "," stdscr ","FFI NCurses  initscr ","java_terminal getTerminalHeight ","java_terminal getTerminalWidth ","Terminal  getTerminal ","@java_terminal getTerminalHeight ","@java_terminal getTerminalWidth ","WinAPI  GetConsoleScreenBufferInfo ","WinAPI  GetStdHandle ","@java_terminal get_height ","@java_terminal get_width ","JRUBY_VERSION  =~ ","FFI NCurses  stdscr ","1 to_i ","2 to_i ","(str \"stty size\") =~ ","IO  console winsize ","IO  console "," require ","IO  console winsize reverse ","(send\n  (send\n    (xstr\n      (str \"stty FFI NCurses  getmaxyx reverse \")) :split) :map) reverse ","(str \"stty FFI NCurses  getmaxyx reverse \") split map ","(str \"stty FFI NCurses  getmaxyx reverse \") split ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack ","Win32API  new  call ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :FFI NCurses  getmaxyx reverse )) pack ","format FFI NCurses  getmaxyx reverse  ","(str \"stty FFI NCurses  getmaxyx reverse \") =~ ","IO  console winFFI NCurses  getmaxyx reverse  ","IO  console winFFI NCurses  getmaxyx reverse  reverse "]}," HighLine SystemExtensions get_character":{"type":"method","name":"get_character","children":[],"call":[" system ","input getc ","Termios  setattr ","(send\n  (const\n    (const nil :Termios) :ECHO) :|\n  (const\n    (const nil :Termios) :ICANON)) ~ ","Termios ECHO  | ","new_settings c_lflag ","old_settings dup ","Termios  getattr ","Win32API  new Call ","Win32API  new "," restore_mode "," raw_no_echo_mode ","new_settings c_cc []= ","new_settings c_cc ","input getbyte "," SetConsoleEcho "," GetStdHandle ","FFI NCurses  endwin ","FFI NCurses  curs_set ","FFI NCurses  cbreak ","FFI NCurses  initscr ","input is_a? ","WinAPI  _getch ","old_settings dup  c_lflag ","Termios  getattr  dup ","old_settings dup  c_cc []= ","old_settings dup  c_cc "]}," HighLine continue_paging?":{"type":"method","name":"continue_paging?","children":[],"call":["command !~ ","q character= ","HighLine  new ask ","HighLine  new "]}," HighLine SystemExtensions restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[" system ","FFI NCurses  endwin ","@java_console setEchoCharacter ","Termios  setattr "," input "," print "]}," HighLine SystemExtensions raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[" system ","FFI NCurses  cbreak ","FFI NCurses  initscr ","@java_console setEchoCharacter ","@java_console getEchoCharacter ","Termios  setattr "," input ","new_settings c_cc []= ","new_settings c_cc ","(send\n  (const\n    (const nil :Termios) :ECHO) :|\n  (const\n    (const nil :Termios) :ICANON)) ~ ","Termios ECHO  | ","new_settings c_lflag ","@state dup ","Termios  getattr ","@state dup  c_cc []= ","@state dup  c_cc ","@state dup  c_lflag ","@java_console getEchoCharacter  dup ","Termios  getattr  dup "]}," HighLine using_color_scheme?":{"type":"method","name":"using_color_scheme?","children":[],"call":[]}," HighLine color_scheme":{"type":"method","name":"color_scheme","children":[],"call":[]}," HighLine color_scheme=":{"type":"method","name":"color_scheme=","children":[],"call":[]}," HighLine SampleColorScheme initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine ColorScheme to_constant":{"type":"method","name":"to_constant","children":[],"call":["HighLine  const_get ","v upcase ","v is_a? ","v to_s ","v to_s  upcase ","v to_s  is_a? ","v to_s  to_s "]}," HighLine ColorScheme to_symbol":{"type":"method","name":"to_symbol","children":[],"call":["t to_s downcase ","t to_s "]}," HighLine ColorScheme []=":{"type":"method","name":"[]=","children":[],"call":["@scheme []= "," to_constant ","constants map "," to_symbol ","HighLine Style  new ","color_tag to_s downcase to_sym ","color_tag to_s downcase ","color_tag to_s "]}," HighLine ColorScheme []":{"type":"method","name":"[]","children":[],"call":["@scheme [] "," to_symbol "]}," HighLine ColorScheme include?":{"type":"method","name":"include?","children":[],"call":["@scheme keys include? "," to_symbol ","@scheme keys "]}," HighLine ColorScheme load_from_hash":{"type":"method","name":"load_from_hash","children":[],"call":[" []= ","h each_pair "]}," HighLine ColorScheme initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," load_from_hash ","h nil? ","Hash  new "]}," HighLine track_eof?":{"type":"method","name":"track_eof?","children":[],"call":[" track_eof "," class track_eof? "," class "]}," HighLine track_eof=":{"type":"method","name":"track_eof=","children":[],"call":[]}," HighLine SystemExtensions GetConsoleScreenBufferInfo":{"type":"method","name":"GetConsoleScreenBufferInfo","children":[],"call":["buf unpack ","@@apiGetConsoleScreenBufferInfo call ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack ","(int 0) * ","format size ","Win32API  new ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack "]}," HighLine SystemExtensions SetConsoleMode":{"type":"method","name":"SetConsoleMode","children":[],"call":["@@apiSetConsoleMode call != ","@@apiSetConsoleMode call ","Win32API  new "]}," HighLine SystemExtensions GetConsoleMode":{"type":"method","name":"GetConsoleMode","children":[],"call":["mode unpack [] ","mode unpack ","@@apiGetConsoleMode call ","  * ","Win32API  new ","  *  unpack [] ","  *  unpack "]}," HighLine SystemExtensions GetStdHandle":{"type":"method","name":"GetStdHandle","children":[],"call":["@@apiGetStdHandle call ","Win32API  new "]}," HighLine SystemExtensions SetConsoleEcho":{"type":"method","name":"SetConsoleEcho","children":[],"call":[" SetConsoleMode ","ENABLE_ECHO_INPUT  ~ "," GetConsoleMode "]}," HighLine get_single_character":{"type":"method","name":"get_single_character","children":[],"call":[" get_character ","@input getbyte ","@java_console readVirtualKey "]}," HighLine uncolor":{"type":"method","name":"uncolor","children":[],"call":[" class uncolor "," class ","Style  uncolor "]}," HighLine color_code":{"type":"method","name":"color_code","children":[],"call":[" class color_code "," class ","HighLine  Style code ","HighLine  Style "]}," HighLine const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," HighLine supports_rgb_color?":{"type":"method","name":"supports_rgb_color?","children":[],"call":[]}," HighLine Style bright":{"type":"method","name":"bright","children":[],"call":[" variant ","(send\n  (lvar :color) :+\n  (int 128)) min ","color + ","color == ","@rgb map ","@rgb == "," class list [] "," class list "," class ","(send\n  (str \"bright_\") :+\n  (send\n    (ivar :@name) :to_s)) to_sym ","bright_ + ","@name to_s "," raise "," inspect "," create_bright_variant "]}," HighLine Style on":{"type":"method","name":"on","children":[],"call":[" variant "," class list [] "," class list "," class ","(send\n  (str \"on_\") :+\n  (send\n    (ivar :@name) :to_s)) to_sym ","on_ + ","@name to_s "]}," HighLine Style variant":{"type":"method","name":"variant","children":[],"call":[" class new "," to_hash merge "," to_hash "," class ","options [] ","1 + + ","1 + ","(send\n  (send\n    (nth-ref 2) :to_i) :+\n  (send\n    (lvar :options) :[]\n    (sym :increment))) to_s ","2 to_i + ","2 to_i "," raise "," inspect ","new_code =~ "," code ","Regexp  last_match + + ","Regexp  last_match ","Regexp  last_match + ","(send\n  (send\n    (send\n      (const nil :Regexp) :last_match\n      (int 2)) :to_i) :+\n  (send\n    (lvar :options) :[]\n    (sym :increment))) to_s ","Regexp  last_match to_i + ","Regexp  last_match to_i ","1 + +  =~ ","Regexp  last_match + +  =~ "]}," HighLine Style blue":{"type":"method","name":"blue","children":[],"call":["@rgb [] "]}," HighLine Style green":{"type":"method","name":"green","children":[],"call":["@rgb [] "]}," HighLine Style red":{"type":"method","name":"red","children":[],"call":["@rgb [] "]}," HighLine Style code":{"type":"method","name":"code","children":[],"call":["(send\n  (ivar :@list) :map) join ","HighLine  Style code ","HighLine  Style ","@list map "]}," HighLine Style color":{"type":"method","name":"color","children":[],"call":[" code + + "," code + "," code "]}," HighLine Style to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," HighLine Style dup":{"type":"method","name":"dup","children":[],"call":[" class new "," class "]}," HighLine Style initialize":{"type":"method","name":"initialize","children":[],"call":[" class index "," class ","defn [] ","rgb_ + "," class rgb_parts "," class rgb_hex "," class rgb_parts _ + "," class  class rgb_parts _parts "," class  class rgb_parts _hex "," class rgb_ class rgb_hex  "]}," HighLine Style uncolor":{"type":"method","name":"uncolor","children":[],"call":[]}," HighLine Style code_index":{"type":"method","name":"code_index","children":[],"call":[]}," HighLine Style list":{"type":"method","name":"list","children":[],"call":[]}," HighLine Style ansi_rgb_to_hex":{"type":"method","name":"ansi_rgb_to_hex","children":[],"call":[]}," HighLine Style rgb_number":{"type":"method","name":"rgb_number","children":[],"call":[]}," HighLine Style rgb":{"type":"method","name":"rgb","children":[],"call":[]}," HighLine Style rgb_parts":{"type":"method","name":"rgb_parts","children":[],"call":[]}," HighLine Style rgb_hex":{"type":"method","name":"rgb_hex","children":[],"call":[]}," HighLine Style index":{"type":"method","name":"index","children":[],"call":[]}," HighLine Style":{"type":"method","name":"Style","children":[],"call":[]}," HighLine colorize_strings":{"type":"method","name":"colorize_strings","children":[],"call":[]}," HighLine StringExtensions included":{"type":"method","name":"included","children":[{"type":"method","name":"color","children":[],"asgn":[],"call":[" class new ","HighLine  color "," class "]},{"type":"method","name":"on","children":[],"asgn":[],"call":[" color ","(send\n  (str \"on_\") :+\n  (send\n    (lvar :arg) :to_s)) to_sym ","on_ + ","arg to_s "]},{"type":"method","name":"uncolor","children":[],"asgn":[],"call":[" class new ","HighLine  uncolor "," class "]},{"type":"method","name":"rgb","children":[],"asgn":[{"type":"local","name":"color_code","value":"(send\n  (lvar :colors) :map) join "},["(send\n  (lvar :colors) :map) join "]],"call":[" color ","(str \"rgb_\") to_sym "," raise ","colors inspect ","color_code =~ ","(send\n  (lvar :colors) :map) join ","color to_s ","%02x % ","color is_a? ","colors map "]},{"type":"method","name":"on_rgb","children":[],"asgn":[{"type":"local","name":"color_code","value":"(send\n  (lvar :colors) :map) join "},["(send\n  (lvar :colors) :map) join "]],"call":[" color ","(str \"on_rgb_\") to_sym "," raise ","colors inspect ","color_code =~ ","(send\n  (lvar :colors) :map) join ","color to_s ","%02x % ","color is_a? ","colors map "]},{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" raise ","%#x % "," object_id "," class "," color ","method to_s =~ ","method to_s "]}],"call":[]}," HighLine String":{"type":"method","name":"String","children":[],"call":[]}," HighLine ColorScheme to_hash":{"type":"method","name":"to_hash","children":[],"call":["hsh []= ","value list ","@scheme inject ","@scheme each_with_object "]}," HighLine ColorScheme keys":{"type":"method","name":"keys","children":[],"call":["@scheme keys "]}," HighLine ColorScheme definition":{"type":"method","name":"definition","children":[],"call":["style list ","@scheme [] "," to_symbol ","@scheme []  list "]}," HighLine Simulate with":{"type":"method","name":"with","children":[],"call":[]}," HighLine Simulate eof?":{"type":"method","name":"eof?","children":[],"call":[]}," HighLine Simulate getbyte":{"type":"method","name":"getbyte","children":[],"call":["@strings unshift ","line slice! ","line length > ","line length "," gets "," gets dup ","line empty? "," gets  slice! "," gets dup  slice! "," gets  length > "," gets dup  length > "," gets  length "," gets dup  length "," gets  empty? "," gets dup  empty? "]}," HighLine Simulate gets":{"type":"method","name":"gets","children":[],"call":["@strings shift "]}," HighLine Simulate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine unique_answers":{"type":"method","name":"unique_answers","children":[],"call":["(if\n  (send\n    (lvar :list) :respond_to?\n    (sym :values))\n  (send\n    (lvar :list) :values)\n  (lvar :list)) uniq ","list values ","list respond_to? "]}," HighLine SystemExtensions initialize":{"type":"method","name":"initialize","children":[],"call":["@java_console setUsePagination ","@java_console setBellEnabled ","@java_console setUseHistory ","ConsoleReader  new ","Terminal  getTerminal ","OutputStreamWriter  new ","Channels  newOutputStream ","$stdout to_channel ","Channels  newInputStream ","$stdin to_channel "," java_import ","JRUBY_VERSION  =~ ","@java_console getTerminal ","@java_console set_pagination_enabled ","@java_console set_bell_enabled ","@java_console set_history_enabled ","$stdout to_outputstream ","$stdin to_inputstream "," require ","ConsoleReader  new  setUsePagination ","ConsoleReader  new  setBellEnabled ","ConsoleReader  new  setUseHistory ","ConsoleReader  new  getTerminal ","ConsoleReader  new  set_pagination_enabled ","ConsoleReader  new  set_bell_enabled ","ConsoleReader  new  set_history_enabled "]}," HighLine newline":{"type":"method","name":"newline","children":[],"call":["@output puts "]}," HighLine indent":{"type":"method","name":"indent","children":[],"call":[" say "," block_given? ","multiline nil? "," raise "]}," HighLine indentation":{"type":"method","name":"indentation","children":[],"call":["  * * ","  * "]}," HighLine SystemExtensions initialize_system_extensions":{"type":"method","name":"initialize_system_extensions","children":[],"call":["@java_console setUsePagination ","@java_console setBellEnabled ","@java_console setUseHistory ","ConsoleReader  new ","Terminal  getTerminal ","OutputStreamWriter  new ","Channels  newOutputStream ","@output to_channel ","Channels  newInputStream ","@input to_channel "," java_import ","JRUBY_VERSION  =~ ","@java_console getTerminal ","@java_console set_pagination_enabled ","@java_console set_bell_enabled ","@java_console set_history_enabled ","@output to_outputstream ","@input to_inputstream "," require ","ConsoleReader  new  setUsePagination ","ConsoleReader  new  setBellEnabled ","ConsoleReader  new  setUseHistory ","ConsoleReader  new  getTerminal ","ConsoleReader  new  set_pagination_enabled ","ConsoleReader  new  set_bell_enabled ","ConsoleReader  new  set_history_enabled "]}," HighLine SystemExtensions WinAPI GetConsoleScreenBufferInfo":{"type":"method","name":"GetConsoleScreenBufferInfo","children":[],"call":[]}," HighLine SystemExtensions WinAPI GetStdHandle":{"type":"method","name":"GetStdHandle","children":[],"call":[]}," HighLine SystemExtensions WinAPI _getch":{"type":"method","name":"_getch","children":[],"call":[]}," HighLine format_statement":{"type":"method","name":"format_statement","children":[],"call":["statement gsub "," indentation "," page_print ","@page_at nil? "," wrap ","@wrap_at nil? ","template result "," binding ","ERB  new ","statement force_encoding ","Encoding  default_external ","statement length > ","statement length ","statement dup to_str ","statement dup "," String dup "," String ","statement gsub  gsub "," page_print  gsub "," wrap  gsub ","template result  gsub ","statement dup to_str  gsub ","statement force_encoding  gsub "," String dup  gsub ","ERB  new  result ","statement gsub  force_encoding "," page_print  force_encoding "," wrap  force_encoding ","template result  force_encoding ","statement dup to_str  force_encoding ","statement force_encoding  force_encoding "," String dup  force_encoding ","statement gsub  length > "," page_print  length > "," wrap  length > ","template result  length > ","statement dup to_str  length > ","statement force_encoding  length > "," String dup  length > ","statement gsub  length "," page_print  length "," wrap  length ","template result  length ","statement dup to_str  length ","statement force_encoding  length "," String dup  length ","statement gsub  dup to_str "," page_print  dup to_str "," wrap  dup to_str ","template result  dup to_str ","statement dup to_str  dup to_str ","statement force_encoding  dup to_str "," String dup  dup to_str ","statement gsub  dup "," page_print  dup "," wrap  dup ","template result  dup ","statement dup to_str  dup ","statement force_encoding  dup "," String dup  dup "]}," HighLine Style find_style":{"type":"method","name":"find_style","children":[],"call":[" class list [] "," class list "," class "]}," HighLine Style create_bright_variant":{"type":"method","name":"create_bright_variant","children":[],"call":[" variant "," find_style ","(send\n  (lvar :color) :+\n  (int 128)) min ","color + ","color == ","@rgb map ","@rgb == ","(send\n  (dstr\n    (begin\n      (lvar :variant_name))\n    (str \"_\")) :+\n  (send\n    (ivar :@name) :to_s)) to_sym ","(begin\n  (lvar :variant_name)) + ","@name to_s "," raise "," inspect "," name ","color zero? "]}," HighLine Style light":{"type":"method","name":"light","children":[],"call":[" create_bright_variant "]}," HighLine Menu to_s":{"type":"method","name":"to_s","children":[],"call":["@list_option inspect ","@flow inspect ","(str \"<%= if @header.nil? then \") + + + ","(str \"<%= if @header.nil? then \") + + ","(str \"<%= if @header.nil? then \") + "," parse_list + + "," parse_list + "," show_default_if_any "," parse_list ","(str \"<%= header ? \\\"\") + + + + + ","(str \"<%= header ? \\\"\") + + + + ","(str \"<%= header ? \\\"\") + + + ","(str \"<%= header ? \\\"\") + + ","(str \"<%= header ? \\\"\") + "," header ","(str \"<%= header ? \\\"\") + + + + + + "]}," HighLine default_use_color":{"type":"method","name":"default_use_color","children":[],"call":["HighLine  default_instance use_color ","HighLine  default_instance "]}," HighLine erase_current_line":{"type":"method","name":"erase_current_line","children":[],"call":["@output flush ","@output print ","HighLine  Style code ","HighLine  Style "]}," HighLine get_response_character_mode":{"type":"method","name":"get_response_character_mode","children":[],"call":["question format_answer "," say ","question get_echo_for_response "," erase_current_line ","question overwrite "," terminal get_character "," terminal "," terminal raw_no_echo_mode_exec "," get_echo ","question get_question get_echo_for_response _for_response ","question get_ get_echo _for_response ","question get_echo_for_ terminal get_character  "," terminal raw_no_question get_echo_for_response _mode_exec "," terminal raw_no_ get_echo _mode_exec "," get_question get_echo_for_response  "," get_ get_echo  "]}," HighLine get_response_getc_mode":{"type":"method","name":"get_response_getc_mode","children":[],"call":["question format_answer ","@input getc "," terminal raw_no_echo_mode_exec "," terminal "]}," HighLine output_erase_char":{"type":"method","name":"output_erase_char","children":[],"call":["@output print ","HighLine  Style code ","HighLine  Style "]}," HighLine line_overflow_for_question?":{"type":"method","name":"line_overflow_for_question?","children":[],"call":["line size == ","question limit ","line size "]}," HighLine say_last_char_or_echo_char":{"type":"method","name":"say_last_char_or_echo_char","children":[],"call":["@output print ","question echo ","question echo != ","line [] ","question echo == "]}," HighLine ignore_arrow_key":{"type":"method","name":"ignore_arrow_key","children":[],"call":[" terminal get_character "," terminal ","2 times "]}," HighLine say_new_line_or_overwrite":{"type":"method","name":"say_new_line_or_overwrite","children":[],"call":[" say ","@output flush ","@output print ","HighLine  Style code ","HighLine  Style ","question overwrite "]}," HighLine get_line_raw_no_echo_mode":{"type":"method","name":"get_line_raw_no_echo_mode","children":[],"call":["question format_answer "," say_new_line_or_overwrite "," line_overflow_for_question? ","@output flush "," say_last_char_or_echo_char ","line << "," ignore_arrow_key ","character == "," output_erase_char ","question echo ","line chop! ","(str \"\\n\") include? "," terminal get_character "," terminal "," loop "," terminal raw_no_echo_mode_exec ","line size times ","line size "," raise "," terminal get_character  == "," terminal get_ terminal get_character  "]}," HighLine get_response_line_mode":{"type":"method","name":"get_response_line_mode","children":[],"call":[" get_line_raw_no_echo_mode "," get_line ","question limit ! ","question limit ","question echo == ","question echo ","question format_answer "," say ","@output flush ","@output print ","HighLine  Style code ","HighLine  Style ","question overwrite ","line size == ","line size ","question echo != ","line [] ","line << "," output_erase_char ","line chop! ","character == "," terminal get_character "," terminal "," terminal raw_no_echo_mode_exec "," terminal get_character  == "," terminal get_ terminal get_character  "]}," HighLine last_answer":{"type":"method","name":"last_answer","children":[],"call":["answers last ","answers values last ","answers values ","answers respond_to? "]}," HighLine confirm":{"type":"method","name":"confirm","children":[],"call":[" new_scope agree ","question confirm_question "," new_scope "]}," HighLine new_scope":{"type":"method","name":"new_scope","children":[],"call":[" class new "," class "]}," HighLine puts":{"type":"method","name":"puts","children":[],"call":["@output puts "]}," HighLine render_statement":{"type":"method","name":"render_statement","children":[],"call":["Statement  new to_s ","Statement  new "]}," HighLine shell_style_lambda":{"type":"method","name":"shell_style_lambda","children":[],"call":["command sub ","answer last "," raise ","options complete ","options extend ","menu options ","command to_s split first ","command to_s split ","command to_s "," lambda ","options complete  last ","menu options  complete ","menu options  extend ","menu menu options  "]}," HighLine reset_use_color":{"type":"method","name":"reset_use_color","children":[],"call":[]}," HighLine reset":{"type":"method","name":"reset","children":[],"call":[" reset_use_color "," reset_color_scheme ","Style  clear_index "]}," HighLine reset_color_scheme":{"type":"method","name":"reset_color_scheme","children":[],"call":[" color_scheme= "]}," HighLine Wrapper actual_length":{"type":"method","name":"actual_length","children":[],"call":[]}," HighLine Wrapper wrap":{"type":"method","name":"wrap","children":[],"call":[]}," HighLine Terminal restore_stty":{"type":"method","name":"restore_stty","children":[],"call":[" system "]}," HighLine Terminal save_stty":{"type":"method","name":"save_stty","children":[],"call":["(str \"stty -g\") chomp "," input tty? "," input "]}," HighLine Terminal run_preserving_stty":{"type":"method","name":"run_preserving_stty","children":[],"call":[" restore_stty "," save_stty "]}," HighLine Terminal character_mode":{"type":"method","name":"character_mode","children":[],"call":[" class name "," class "]}," HighLine Terminal windows?":{"type":"method","name":"windows?","children":[],"call":["RUBY_PLATFORM  =~ "]}," HighLine Terminal rubinius?":{"type":"method","name":"rubinius?","children":[],"call":["RUBY_ENGINE  == "]}," HighLine Terminal jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_ENGINE  == "]}," HighLine Terminal get_line_default":{"type":"method","name":"get_line_default","children":[],"call":["highline input gets ","highline input "," raise ","highline input eof? ","highline track_eof? "]}," HighLine Terminal readline_read":{"type":"method","name":"readline_read","children":[],"call":["Readline  readline "," run_preserving_stty ","Readline  completion_proc= ","question selection grep ","Regexp  escape ","question selection "," lambda ","question selection empty? "]}," HighLine Terminal get_line_with_readline":{"type":"method","name":"get_line_with_readline","children":[],"call":[" raise ","highline track_eof? ","raw_answer ! "," readline_read "," require ","highline render_statement "," readline_read  ! "]}," HighLine Terminal get_line":{"type":"method","name":"get_line","children":[],"call":["question format_answer "," get_line_default "," get_line_with_readline ","question readline "]}," HighLine Terminal get_character":{"type":"method","name":"get_character","children":[],"call":[]}," HighLine Terminal restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[]}," HighLine Terminal raw_no_echo_mode_exec":{"type":"method","name":"raw_no_echo_mode_exec","children":[],"call":[" restore_mode "," raw_no_echo_mode "]}," HighLine Terminal raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[]}," HighLine Terminal terminal_size":{"type":"method","name":"terminal_size","children":[],"call":[]}," HighLine Terminal initialize_system_extensions":{"type":"method","name":"initialize_system_extensions","children":[],"call":[]}," HighLine Terminal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine Terminal get_terminal":{"type":"method","name":"get_terminal","children":[],"call":[]}," HighLine Terminal UnixStty get_character":{"type":"method","name":"get_character","children":[],"call":["input getc "]}," HighLine Terminal UnixStty restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[" print "," system "," restore_stty "]}," HighLine Terminal UnixStty raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[" system "," input tty? "," input "," save_stty "]}," HighLine Terminal UnixStty terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["Regexp  last_match to_i ","Regexp  last_match ","(str \"stty size\") =~ ","(send\n  (const nil :Regexp) :last_match\n  (int 2)) map ","(str \"stty\") =~ ","IO  console winsize reverse ","IO  console winsize ","IO  console "," require ","1 to_i ","2 to_i ","x to_i ","(nth-ref 2) map ","@output tty? ! ","@output tty? "]}," HighLine Terminal NCurses terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["FFI NCurses  endwin ","FFI NCurses  getmaxyx reverse ","FFI NCurses  getmaxyx ","FFI NCurses  stdscr ","FFI NCurses  initscr "]}," HighLine Terminal NCurses restore_mode":{"type":"method","name":"restore_mode","children":[],"call":["FFI NCurses  endwin "]}," HighLine Terminal NCurses raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":["FFI NCurses  cbreak ","FFI NCurses  initscr "]}," HighLine Terminal IOConsole get_character":{"type":"method","name":"get_character","children":[],"call":[" input getch "," input "," input getc "]}," HighLine Terminal IOConsole restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[" input echo= "," input "]}," HighLine Terminal IOConsole raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[" input echo= "," input "]}," HighLine Terminal IOConsole terminal_size":{"type":"method","name":"terminal_size","children":[],"call":[" output winsize reverse "," output winsize "," output "]}," HighLine TemplateRenderer const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," HighLine TemplateRenderer menu":{"type":"method","name":"menu","children":[],"call":[" source "]}," HighLine TemplateRenderer method_missing":{"type":"method","name":"method_missing","children":[],"call":[" methods sort inspect "," methods sort "," methods "," inspect ","args inspect ","(str \"Method \") + + ","(str \"Method \") + "]}," HighLine TemplateRenderer render":{"type":"method","name":"render","children":[],"call":[" template result "," binding "," template "]}," HighLine TemplateRenderer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine Style clear_index":{"type":"method","name":"clear_index","children":[],"call":[]}," HighLine find_or_create_style_list":{"type":"method","name":"find_or_create_style_list","children":[],"call":[]}," HighLine find_or_create_style":{"type":"method","name":"find_or_create_style","children":[],"call":[]}," HighLine StringExtensions define_builtin_style_methods":{"type":"method","name":"define_builtin_style_methods","children":[],"call":[]}," HighLine StringExtensions define_style_support_methods":{"type":"method","name":"define_style_support_methods","children":[{"type":"method","name":"color","children":[],"asgn":[],"call":[" class new ","HighLine  color "," class "]},{"type":"method","name":"on","children":[],"asgn":[],"call":[" color ","(send\n  (str \"on_\") :+\n  (send\n    (lvar :arg) :to_s)) to_sym ","on_ + ","arg to_s "]},{"type":"method","name":"uncolor","children":[],"asgn":[],"call":[" class new ","HighLine  uncolor "," class "]},{"type":"method","name":"rgb","children":[],"asgn":[{"type":"local","name":"color_code","value":" setup_color_code "},[" setup_color_code "]],"call":[" color ","(str \"rgb_\") to_sym "," setup_color_code "]},{"type":"method","name":"on_rgb","children":[],"asgn":[{"type":"local","name":"color_code","value":" setup_color_code "},[" setup_color_code "]],"call":[" color ","(str \"on_rgb_\") to_sym "," setup_color_code "]},{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[" color ","method to_s =~ ","method to_s "]},{"type":"method","name":"respond_to_missing?","children":[],"asgn":[],"call":["method_name to_s =~ ","method_name to_s "]},{"type":"method","name":"setup_color_code","children":[],"asgn":[{"type":"local","name":"color_code","value":"(send\n  (lvar :colors) :map) join "},["(send\n  (lvar :colors) :map) join "]],"call":[" raise ","colors inspect ","color_code =~ ","(send\n  (lvar :colors) :map) join ","color to_s "," format ","color is_a? ","colors map "]}],"call":[]}," HighLine Statement template":{"type":"method","name":"template","children":[],"call":["ERB  new "," template_string ","ERB  instance_method parameters assoc ","ERB  instance_method parameters ","ERB  instance_method "]}," HighLine Statement render_template":{"type":"method","name":"render_template","children":[],"call":["template_renderer render ","TemplateRenderer  new "," highline "," source "," template ","TemplateRenderer  new  render "]}," HighLine Statement format_statement":{"type":"method","name":"format_statement","children":[],"call":["statement gsub "," highline indentation "," highline "," highline multi_indent ","HighLine Paginator  new page_print ","HighLine Paginator  new ","HighLine Wrapper  wrap "," highline wrap_at "," render_template "," template_string "," template_string empty? "," template_string length > "," template_string length ","statement gsub  gsub ","HighLine Paginator  new page_print  gsub ","HighLine Wrapper  wrap  gsub "," render_template  gsub "]}," HighLine Statement stringfy":{"type":"method","name":"stringfy","children":[],"call":[" String dup "," String "]}," HighLine Statement const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," HighLine Statement to_s":{"type":"method","name":"to_s","children":[],"call":[" statement "]}," HighLine Statement statement":{"type":"method","name":"statement","children":[],"call":[" format_statement "]}," HighLine Statement initialize":{"type":"method","name":"initialize","children":[],"call":[" stringfy "]}," HighLine QuestionAsker gather_answers_based_on_type":{"type":"method","name":"gather_answers_based_on_type","children":[],"call":[" gather_hash "," gather_regexp "," gather_integer "," question gather "," question "]}," HighLine QuestionAsker answer_matches_regex":{"type":"method","name":"answer_matches_regex","children":[],"call":["answer to_s =~ "," question gather "," question ","answer to_s "," question gather is_a? ","answer to_s == "," question gather to_s "]}," HighLine QuestionAsker gather_with_array":{"type":"method","name":"gather_with_array","children":[],"call":[" question template= "," question ","answers << "," ask_once "," tap "]}," HighLine QuestionAsker explain_error":{"type":"method","name":"explain_error","children":[],"call":["@highline say "," question ask_on_error_msg "," question "," question final_response "," question final_responses [] "," question final_responses "," question responses [] "," question responses "]}," HighLine QuestionAsker gather_hash":{"type":"method","name":"gather_hash","children":[],"call":["answers []= "," ask_once ","@highline key= ","sorted_keys each_with_object "," question gather keys sort_by "," question gather keys "," question gather "," question "," question gather keys sort each "," question gather keys sort "," question gather keys sort_by  each_with_object "]}," HighLine QuestionAsker gather_regexp":{"type":"method","name":"gather_regexp","children":[],"call":["answers pop ","answers << "," ask_once "," answer_matches_regex ","answers last "," gather_with_array "]}," HighLine QuestionAsker gather_integer":{"type":"method","name":"gather_integer","children":[],"call":["answers << "," ask_once ","(send\n  (send\n    (send nil :question) :gather) :-\n  (int 1)) times "," question gather - "," question gather "," question "," gather_with_array "]}," HighLine QuestionAsker gather_answers":{"type":"method","name":"gather_answers","children":[],"call":["@highline send "," explain_error ","@highline send size > ","@highline send size "," gather_answers_based_on_type "," loop "," question verify_match "," question "," question template= "," question template "," gather_ gather_answers_based_on_type _based_on_type "," question  question verify_match  "]}," HighLine QuestionAsker ask_once":{"type":"method","name":"ask_once","children":[],"call":[" question answer "," question "," raise "," explain_error ","error message ","e explanation_key ","@highline send "," question confirm "," question convert "," question valid_answer? "," question get_response_or_default "," question show_question "," question check_range "]}," HighLine QuestionAsker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine Question choice_error_str":{"type":"method","name":"choice_error_str","children":[],"call":["message_source inspect ","[ + + ","[ + ","message_source join ","message_source is_a? "]}," HighLine Question get_echo_for_response":{"type":"method","name":"get_echo_for_response","children":[],"call":[" echo "," echo == "," echo ! ! "," echo ! "]}," HighLine Question show_question":{"type":"method","name":"show_question","children":[],"call":["highline say "," limit ! "," limit "," echo == "," echo "," readline ","@limit ! ","@echo == "]}," HighLine Question ask_on_error_msg":{"type":"method","name":"ask_on_error_msg","children":[],"call":[" final_responses [] "," final_responses "," final_responses [] == "," responses [] "," responses "," responses [] == "]}," HighLine Question confirm_question":{"type":"method","name":"confirm_question","children":[],"call":["template_renderer render ","TemplateRenderer  new ","ERB  new "," confirm ","ERB  instance_method parameters assoc ","ERB  instance_method parameters ","ERB  instance_method "," confirm call "," answer "," confirm is_a? "," confirm == ","TemplateRenderer  new  render ","ERB  new _renderer render "]}," HighLine Question get_response_or_default":{"type":"method","name":"get_response_or_default","children":[],"call":[" answer= "," answer_or_default "," get_response "]}," HighLine Question get_response":{"type":"method","name":"get_response","children":[],"call":["highline get_response_line_mode ","highline get_response_character_mode ","highline get_response_getc_mode "," character "," first_answer "," first_answer? "]}," HighLine Question format_answer":{"type":"method","name":"format_answer","children":[],"call":[" change_case "," remove_whitespace "," String "]}," HighLine Question choices_complete":{"type":"method","name":"choices_complete","children":[],"call":[" raise ","choices complete ","choices extend "," selection "," selection  complete "," selection  extend "]}," HighLine Question check_range":{"type":"method","name":"check_range","children":[],"call":[" raise "," in_range? "]}," HighLine Question final_response":{"type":"method","name":"final_response","children":[],"call":["response call "," answer ","response respond_to? "," final_responses [] "," final_responses "," final_responses []  call "," final_responses []  respond_to? "," final_ final_responses [] s [] "," final_ final_responses [] s "]}," HighLine Question final_responses":{"type":"method","name":"final_responses","children":[],"call":["@internal_responses merge "]}," HighLine Question build_responses_new_hash":{"type":"method","name":"build_responses_new_hash","children":[],"call":[" validate inspect "," validate "," expected_range ","You must choose one of  + + ","You must choose one of  + "," choice_error_str ","Ambiguous choice.  Please choose one of  + + ","Ambiguous choice.  Please choose one of  + ","Your answer isn't valid (must match  + ","@validate inspect ","Your answer isn't within the expected range  + "]}," HighLine Question default_responses_hash":{"type":"method","name":"default_responses_hash","children":[],"call":[]}," HighLine Question responses":{"type":"method","name":"responses","children":[],"call":[]}," HighLine Question build":{"type":"method","name":"build","children":[],"call":[]}," HighLine Question AnswerConverter convert_by_answer_type":{"type":"method","name":"convert_by_answer_type","children":[],"call":[" send "," answer_type class name downcase "," answer_type class name "," answer_type class "," answer_type "," answer_type name downcase "," answer_type name "," answer_type is_a? "," answer_type parse "," answer "," answer_type respond_to? "]}," HighLine Question AnswerConverter to_proc":{"type":"method","name":"to_proc","children":[],"call":[" answer_type call "," answer "," answer_type "]}," HighLine Question AnswerConverter to_array":{"type":"method","name":"to_array","children":[],"call":[" answer last "," answer "," answer= "," choices_complete "]}," HighLine Question AnswerConverter to_pathname":{"type":"method","name":"to_pathname","children":[],"call":["Pathname  new ","File  join "," answer last "," answer "," directory to_s "," directory "," answer= "," choices_complete "]}," HighLine Question AnswerConverter to_file":{"type":"method","name":"to_file","children":[],"call":["File  open ","File  join "," answer last "," answer "," directory to_s "," directory "," answer= "," choices_complete "]}," HighLine Question AnswerConverter to_regexp":{"type":"method","name":"to_regexp","children":[],"call":["Regexp  new "," answer "]}," HighLine Question AnswerConverter to_symbol":{"type":"method","name":"to_symbol","children":[],"call":[" answer to_sym "," answer "]}," HighLine Question AnswerConverter to_float":{"type":"method","name":"to_float","children":[],"call":["Kernel  send "," answer "]}," HighLine Question AnswerConverter to_integer":{"type":"method","name":"to_integer","children":[],"call":["Kernel  send "," answer "]}," HighLine Question AnswerConverter to_string":{"type":"method","name":"to_string","children":[],"call":["HighLine  String "," answer "]}," HighLine Question AnswerConverter convert":{"type":"method","name":"convert","children":[],"call":[" answer "," check_range "," answer= "," convert_by_answer_type "," answer_type "]}," HighLine Question AnswerConverter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine Paginator continue_paging?":{"type":"method","name":"continue_paging?","children":[],"call":["command !~ ","q character= "," highline new_scope ask "," highline new_scope "," highline "]}," HighLine Paginator page_print":{"type":"method","name":"page_print","children":[],"call":["lines join ","lines last "," continue_paging? "," highline puts "," highline ","lines slice! join ","lines slice! "," highline page_at ","lines size > ","lines size ","text lines to_a ","text lines ","text lines to_a  join ","text lines to_a  last ","text lines to_a  slice! join ","text lines to_a  slice! ","text lines to_a  size > ","text lines to_a  size ","text text lines to_a  to_a ","text text lines to_a  "]}," HighLine Paginator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HighLine Menu show_default_if_any":{"type":"method","name":"show_default_if_any","children":[],"call":[" default "," default to_s empty? "," default to_s "]}," HighLine Menu parse_list":{"type":"method","name":"parse_list","children":[],"call":["@list_option inspect ","@flow inspect "]}," HighLine Menu mark_for_decoration":{"type":"method","name":"mark_for_decoration","children":[],"call":[" index ","(send\n  (send\n    (str \"a\") :ord) :+\n  (lvar :ix)) chr ","a ord + ","a ord ","ix + ","(send\n  (send\n    (lvar :first_letter) :ord) :+\n  (lvar :ix)) chr ","first_letter ord + ","first_letter ord ","@index == "]}," HighLine Menu decorate_item":{"type":"method","name":"decorate_item","children":[],"call":[" decorate_index + "," decorate_index "," mark_for_decoration "]}," HighLine Menu decorate_index":{"type":"method","name":"decorate_index","children":[],"call":["HighLine  color "," index_color "]}," HighLine Menu value_for_hash_selections":{"type":"method","name":"value_for_hash_selections","children":[],"call":["memo []= "," value_for_selected_item ","details [] "," shell "," find_item_from_selection ","selections each_with_object ","  value_for_selected_item _for_selected_item "," value_for_ find_item_from_selection  "]}," HighLine Menu value_for_array_selections":{"type":"method","name":"value_for_array_selections","children":[],"call":[" value_for_selected_item ","details [] "," shell ","selected_items map "," find_item_from_selection ","selections map ","  value_for_selected_item _for_selected_item "]}," HighLine Menu gather_selected":{"type":"method","name":"gather_selected","children":[],"call":[" raise "," value_for_hash_selections ","selections is_a? "," value_for_array_selections "," all_items "," fail "," all_ all_items  "]}," HighLine Menu value_for_selected_item":{"type":"method","name":"value_for_selected_item","children":[],"call":["item name ","item action call ","item action "]}," HighLine Menu get_item_by_letter":{"type":"method","name":"get_item_by_letter","children":[],"call":["items [] ","selection ord - ","selection ord ","i name == ","i name ","items find ","@items [] ","c first == ","c first ","@items find ","(send\n  (ivar :@items) :map) index ","l_index succ! ","@items map ","(send\n  (lvar :items) :map) index ","items map ","selection downcase ord - ","selection downcase ord ","selection downcase ","(send\n  (ivar :@items) :map) selection ord -  ","(send\n  (ivar :@items) :map) (send\n  (ivar :@items) :map) index  ","(send\n  (ivar :@items) :map) (send\n  (lvar :items) :map) index  ","(send\n  (ivar :@items) :map) selection downcase ord -  ","l_selection ord -  succ! ","l_(send\n  (ivar :@items) :map) index  succ! ","l_(send\n  (lvar :items) :map) index  succ! ","l_selection downcase ord -  succ! ","(send\n  (lvar :items) :map) selection ord -  ","(send\n  (lvar :items) :map) (send\n  (ivar :@items) :map) index  ","(send\n  (lvar :items) :map) (send\n  (lvar :items) :map) index  ","(send\n  (lvar :items) :map) selection downcase ord -  "]}," HighLine Menu get_item_by_number":{"type":"method","name":"get_item_by_number","children":[],"call":["items [] ","selection to_i - ","selection to_i ","@items [] "]}," HighLine Menu find_item_from_selection":{"type":"method","name":"find_item_from_selection","children":[],"call":[" get_item_by_letter "," get_item_by_number ","selection =~ "]}," HighLine Menu all_items":{"type":"method","name":"all_items","children":[],"call":["@items + "]}," HighLine Menu map_items_by_name":{"type":"method","name":"map_items_by_name","children":[],"call":[" all_items map "," all_items "]}," HighLine Menu map_items_by_index":{"type":"method","name":"map_items_by_index","children":[],"call":["(irange\n  (int 1)\n  (send\n    (send nil :all_items) :size)) map "," all_items size "," all_items ","l_index succ! dup ","l_index succ! "," all_items map ","@index == ","(irange\n  (int 1)\n  (send\n    (lvar :items) :size)) map ","items size ","items map ","index == ","prev_char succ! dup ","prev_char succ! ","(sym :letter) include? "]}," HighLine Menu add_item":{"type":"method","name":"add_item","children":[],"call":[" update_responses ","@help merge! ","item item_help ","@items << "]}," HighLine Menu build_item":{"type":"method","name":"build_item","children":[],"call":["Menu Item  new ","MenuItem  new "]}," HighLine Menu Item item_help":{"type":"method","name":"item_help","children":[],"call":[" help "," name to_s downcase "," name to_s "," name "]}," HighLine Menu Item initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," HighLine ListRenderer row_count":{"type":"method","name":"row_count","children":[],"call":["(send\n  (send\n    (send nil :items) :count) :/\n  (send\n    (send nil :col_count) :to_f)) ceil "," items count / "," col_count to_f "," col_count "," items count "," items "]}," HighLine ListRenderer pad_char":{"type":"method","name":"pad_char","children":[],"call":[]}," HighLine ListRenderer right_padded_items":{"type":"method","name":"right_padded_items","children":[],"call":[" right_pad_field "," items_max_length "," items map "," items "]}," HighLine ListRenderer col_count":{"type":"method","name":"col_count","children":[],"call":[" col_count_calculate "," option "]}," HighLine ListRenderer col_count_calculate":{"type":"method","name":"col_count_calculate","children":[],"call":["(send\n  (send nil :line_size_limit) :+\n  (send nil :row_join_str_size)) / "," items_max_length + "," row_join_str_size "," items_max_length "," line_size_limit + "," line_size_limit "]}," HighLine ListRenderer row_join_str_size":{"type":"method","name":"row_join_str_size","children":[],"call":[" row_join_string size "," row_join_string "]}," HighLine ListRenderer row_join_string":{"type":"method","name":"row_join_string","children":[],"call":[]}," HighLine ListRenderer line_size_limit":{"type":"method","name":"line_size_limit","children":[],"call":[" highline wrap_at "," highline "]}," HighLine ListRenderer max_length":{"type":"method","name":"max_length","children":[],"call":["(send\n  (lvar :items) :map) max "," actual_length ","items map "]}," HighLine ListRenderer items_max_length":{"type":"method","name":"items_max_length","children":[],"call":[" max_length "," items "]}," HighLine ListRenderer actual_length":{"type":"method","name":"actual_length","children":[],"call":["HighLine Wrapper  actual_length "]}," HighLine ListRenderer inside_line_size_limit?":{"type":"method","name":"inside_line_size_limit?","children":[],"call":["line_size <= "," line_size_limit + "," row_join_str_size "," line_size_limit ","sum + + ","sum + ","widths reduce "]}," HighLine ListRenderer transpose":{"type":"method","name":"transpose","children":[],"call":["first_line zip ","lines shift "," Array ","lines shift  zip "," Array  shift "]}," HighLine ListRenderer actual_lengths_for":{"type":"method","name":"actual_lengths_for","children":[],"call":[" actual_length ","line map "]}," HighLine ListRenderer get_segment_widths":{"type":"method","name":"get_segment_widths","children":[],"call":[" actual_lengths_for max "," actual_lengths_for ","lines map "]}," HighLine ListRenderer get_row_widths":{"type":"method","name":"get_row_widths","children":[],"call":[" get_segment_widths "]}," HighLine ListRenderer get_col_widths":{"type":"method","name":"get_col_widths","children":[],"call":[" get_segment_widths "," transpose "]}," HighLine ListRenderer right_pad_field":{"type":"method","name":"right_pad_field","children":[],"call":["field + "," pad_char * "," pad_char ","width - "," actual_length "," String "," String  + "]}," HighLine ListRenderer right_pad_row":{"type":"method","name":"right_pad_row","children":[],"call":[" right_pad_field ","row zip map ","row zip "]}," HighLine ListRenderer row_to_s":{"type":"method","name":"row_to_s","children":[],"call":["row compact join + ","row compact join "," row_join_string ","row compact "]}," HighLine ListRenderer stringfy_list":{"type":"method","name":"stringfy_list","children":[],"call":["(send\n  (lvar :list) :map) join "," row_to_s ","list map "]}," HighLine ListRenderer pad_uneven_rows":{"type":"method","name":"pad_uneven_rows","children":[],"call":[" stringfy_list "," right_pad_row ","row compact "," Array map "," Array "]}," HighLine ListRenderer list_uneven_columns_down_mode":{"type":"method","name":"list_uneven_columns_down_mode","children":[],"call":[" list_uneven_columns_mode ","HighLine List  new "," items "," HighLine List  new _uneven_columns_mode "]}," HighLine ListRenderer list_uneven_columns_mode":{"type":"method","name":"list_uneven_columns_mode","children":[],"call":[" pad_uneven_rows "," option "," inside_line_size_limit? ","column_count == "," get_col_widths ","list cols= ","col_max downto "," items size "," items ","HighLine List  new "," get_col_ get_col_widths  "]}," HighLine ListRenderer list_columns_down_mode":{"type":"method","name":"list_columns_down_mode","children":[],"call":["HighLine List  new to_s ","HighLine List  new "," col_count "," right_padded_items "]}," HighLine ListRenderer list_columns_across_mode":{"type":"method","name":"list_columns_across_mode","children":[],"call":["HighLine List  new to_s ","HighLine List  new "," col_count "," right_padded_items "]}," HighLine ListRenderer list_inline_mode":{"type":"method","name":"list_inline_mode","children":[],"call":[" items [] join + "," items last "," items "," items [] join "," items [] "," items first "," items size == "," items size "," option "]}," HighLine ListRenderer list_default_mode":{"type":"method","name":"list_default_mode","children":[],"call":["(send\n  (send nil :items) :map) join "," items map "," items "]}," HighLine ListRenderer render_list_items":{"type":"method","name":"render_list_items","children":[],"call":["template_renderer render ","HighLine TemplateRenderer  new "," highline ","ERB  new ","ERB  instance_method parameters assoc ","ERB  instance_method parameters ","ERB  instance_method "," String ","items to_ary map ","items to_ary ","HighLine TemplateRenderer  new  render ","ERB  new _renderer render "," String s to_ary map "," String s to_ary "]}," HighLine ListRenderer render":{"type":"method","name":"render","children":[],"call":[" list_default_mode "," list_uneven_columns_down_mode "," list_uneven_columns_mode "," list_columns_down_mode "," list_columns_across_mode "," list_inline_mode "," mode "," items empty? "," items "]}," HighLine ListRenderer initialize":{"type":"method","name":"initialize","children":[],"call":[" render_list_items "]}," HighLine List stringfy":{"type":"method","name":"stringfy","children":[],"call":["row compact join + ","row compact join "," row_join_string ","row compact "]}," HighLine List row_count":{"type":"method","name":"row_count","children":[],"call":["(send\n  (send\n    (send nil :items) :count) :/\n  (send\n    (send nil :cols) :to_f)) ceil "," items count / "," cols to_f "," cols "," items count "," items "]}," HighLine List items_sliced_by_rows":{"type":"method","name":"items_sliced_by_rows","children":[],"call":[" items each_slice to_a "," items each_slice "," row_count "," items "]}," HighLine List items_sliced_by_cols":{"type":"method","name":"items_sliced_by_cols","children":[],"call":[" items each_slice to_a "," items each_slice "," cols "," items "]}," HighLine List build":{"type":"method","name":"build","children":[],"call":[" col_down "," col_down_mode "," transpose "," transpose_mode "," slice_by_cols "]}," HighLine List row_join_str_size":{"type":"method","name":"row_join_str_size","children":[],"call":[" row_join_string size "," row_join_string "]}," HighLine List row_join_string":{"type":"method","name":"row_join_string","children":[],"call":[]}," HighLine List to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :list) :map) join "," stringfy "," list map "," list "]}," HighLine List to_a":{"type":"method","name":"to_a","children":[],"call":[" list "]}," HighLine List list":{"type":"method","name":"list","children":[],"call":["@list dup "]}," HighLine List cols=":{"type":"method","name":"cols=","children":[],"call":[" build "]}," HighLine List slice_by_cols":{"type":"method","name":"slice_by_cols","children":[],"call":[" items_sliced_by_cols "]}," HighLine List slice_by_rows":{"type":"method","name":"slice_by_rows","children":[],"call":[" items_sliced_by_rows "]}," HighLine List col_down":{"type":"method","name":"col_down","children":[],"call":[" transpose "," slice_by_rows "]}," HighLine List transpose":{"type":"method","name":"transpose","children":[],"call":["first_row zip ","@list [] ","@list []  zip ","first_row zip  [] "]}," HighLine List initialize":{"type":"method","name":"initialize","children":[],"call":[" build ","options fetch ","items to_a dup freeze ","items to_a dup ","items to_a "]}," IOConsoleCompatible winsize":{"type":"method","name":"winsize","children":[],"call":[]}," IOConsoleCompatible getch":{"type":"method","name":"getch","children":[],"call":[" getc "]}," HighLine CustomErrors NoAutoCompleteMatch explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine CustomErrors NoConfirmationQuestionError explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine CustomErrors NotInRangeQuestionError explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine CustomErrors NotValidQuestionError explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine CustomErrors QuestionError explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine CustomErrors ExplainableError explanation_key":{"type":"method","name":"explanation_key","children":[],"call":[]}," HighLine BuiltinStyles ClassMethods const_missing":{"type":"method","name":"const_missing","children":[],"call":["style code "," const_set ","style on ","Style  rgb ","Regexp  last_match ","code_name + ","name to_s ","Regexp  last_match to_s + + ","Regexp  last_match to_s + ","Regexp  last_match to_s "," raise ","name to_s =~ ","1 to_s + + ","1 to_s + ","1 to_s ","style on  code ","Style  rgb  code "," cRegexp  last_match st_set ","style on  on ","Style  rgb  on ","style Regexp  last_match  ","name to_s  + ","Regexp  last_match to_s + +  + ","1 to_s + +  + "]}," HighLine BuiltinStyles included":{"type":"method","name":"included","children":[],"call":[]}," HighLine get_echo":{"type":"method","name":"get_echo","children":[],"call":["question echo ","question echo != ","question echo == "]}," HighLine UnixStty get_line_default":{"type":"method","name":"get_line_default","children":[],"call":["highline input gets ","highline input "," raise ","highline input eof? ","highline track_eof? "]}," HighLine UnixStty readline_read":{"type":"method","name":"readline_read","children":[],"call":["Readline  readline ","Readline  completion_proc= ","question selection grep ","Regexp  escape ","question selection "," lambda "]}," HighLine UnixStty get_line_with_readline":{"type":"method","name":"get_line_with_readline","children":[],"call":[" raise ","highline track_eof? ","raw_answer ! "," readline_read ","highline render_statement "," require "," readline_read  ! "]}," HighLine UnixStty get_line":{"type":"method","name":"get_line","children":[],"call":["question format_answer "," get_line_default "," get_line_with_readline ","question readline "]}," HighLine UnixStty character_mode":{"type":"method","name":"character_mode","children":[],"call":[]}," HighLine UnixStty get_character":{"type":"method","name":"get_character","children":[],"call":["input getc "]}," HighLine UnixStty restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[" print "," system "]}," HighLine UnixStty raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[" system "]}," HighLine UnixStty terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["1 to_i ","2 to_i ","(str \"stty size\") =~ "," x to_i "," x ","(nth-ref 2) map ","(str \"stty\") =~ ","IO  console winsize reverse ","IO  console winsize ","IO  console "," require "]}," HighLine SystemExtensions NCurses terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["FFI NCurses  endwin ","FFI NCurses  getmaxyx reverse ","FFI NCurses  getmaxyx ","FFI NCurses  stdscr ","FFI NCurses  initscr "]}," HighLine SystemExtensions NCurses restore_mode":{"type":"method","name":"restore_mode","children":[],"call":["FFI NCurses  endwin "]}," HighLine SystemExtensions NCurses raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":["FFI NCurses  cbreak ","FFI NCurses  initscr "]}," HighLine Terminal IOConsole restore_stty":{"type":"method","name":"restore_stty","children":[],"call":[" system "]}," HighLine Terminal IOConsole save_stty":{"type":"method","name":"save_stty","children":[],"call":["(str \"stty -g\") chomp "]}," HighLine Terminal IOConsole run_preserving_stty":{"type":"method","name":"run_preserving_stty","children":[],"call":[" restore_stty "," save_stty "]}," HighLine Terminal IOConsole get_line_default":{"type":"method","name":"get_line_default","children":[],"call":["highline input gets ","highline input "," raise ","highline input eof? ","highline track_eof? "]}," HighLine Terminal IOConsole readline_read":{"type":"method","name":"readline_read","children":[],"call":["Readline  readline "," run_preserving_stty ","Readline  completion_proc= ","question selection grep ","Regexp  escape ","question selection "," lambda ","question selection empty? "]}," HighLine Terminal IOConsole get_line_with_readline":{"type":"method","name":"get_line_with_readline","children":[],"call":[" raise ","highline track_eof? ","raw_answer ! "," readline_read ","highline render_statement "," require "," readline_read  ! "]}," HighLine Terminal IOConsole get_line":{"type":"method","name":"get_line","children":[],"call":["question format_answer "," get_line_default "," get_line_with_readline ","question readline "]}," HighLine Terminal IOConsole character_mode":{"type":"method","name":"character_mode","children":[],"call":[]}," Statement const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Statement template":{"type":"method","name":"template","children":[],"call":["ERB  new "," template_string "]}," Statement render_template":{"type":"method","name":"render_template","children":[],"call":["template_renderer render ","TemplateRenderer  new "," highline "," source "," template ","TemplateRenderer  new  render "]}," Statement format_statement":{"type":"method","name":"format_statement","children":[],"call":["statement gsub "," highline indentation "," highline "," highline multi_indent ","HighLine Paginator  new page_print ","HighLine Paginator  new ","HighLine Wrapper  wrap "," highline wrap_at "," render_template "," template_string "," template_string length > "," template_string length ","statement gsub  gsub ","HighLine Paginator  new page_print  gsub ","HighLine Wrapper  wrap  gsub "," render_template  gsub "]}," Statement stringfy":{"type":"method","name":"stringfy","children":[],"call":[" String dup "," String "]}," Statement to_s":{"type":"method","name":"to_s","children":[],"call":[" statement "]}," Statement statement":{"type":"method","name":"statement","children":[],"call":[" format_statement "]}," Statement initialize":{"type":"method","name":"initialize","children":[],"call":[" stringfy "]}," ListRenderer row_count":{"type":"method","name":"row_count","children":[],"call":["(send\n  (send\n    (send nil :items) :count) :/\n  (send\n    (send nil :col_count) :to_f)) ceil "," items count / "," col_count to_f "," col_count "," items count "," items "]}," ListRenderer pad_char":{"type":"method","name":"pad_char","children":[],"call":[]}," ListRenderer right_padded_items":{"type":"method","name":"right_padded_items","children":[],"call":[" right_pad_field "," items_max_length "," items map "," items "]}," ListRenderer col_count":{"type":"method","name":"col_count","children":[],"call":[" get_col_count "," option "]}," ListRenderer get_col_count":{"type":"method","name":"get_col_count","children":[],"call":["(send\n  (send nil :line_size_limit) :+\n  (send nil :row_join_str_size)) / "," items_max_length + "," row_join_str_size "," items_max_length "," line_size_limit + "," line_size_limit "]}," ListRenderer row_join_str_size":{"type":"method","name":"row_join_str_size","children":[],"call":[" row_join_string size "," row_join_string "]}," ListRenderer row_join_string=":{"type":"method","name":"row_join_string=","children":[],"call":[]}," ListRenderer row_join_string":{"type":"method","name":"row_join_string","children":[],"call":[]}," ListRenderer line_size_limit":{"type":"method","name":"line_size_limit","children":[],"call":[" highline wrap_at "," highline "]}," ListRenderer max_length":{"type":"method","name":"max_length","children":[],"call":["(send\n  (lvar :items) :map) max "," actual_length ","items map "]}," ListRenderer items_max_length":{"type":"method","name":"items_max_length","children":[],"call":[" max_length "," items "]}," ListRenderer actual_length":{"type":"method","name":"actual_length","children":[],"call":["HighLine Wrapper  actual_length "]}," ListRenderer inside_line_size_limit?":{"type":"method","name":"inside_line_size_limit?","children":[],"call":["line_size <= "," line_size_limit + "," row_join_str_size "," line_size_limit ","sum + + ","sum + ","widths inject "]}," ListRenderer transpose":{"type":"method","name":"transpose","children":[],"call":["first_line zip ","lines shift "," Array ","lines shift  zip "," Array  shift "]}," ListRenderer actual_lengths_for":{"type":"method","name":"actual_lengths_for","children":[],"call":[" actual_length ","line map "]}," ListRenderer get_segment_widths":{"type":"method","name":"get_segment_widths","children":[],"call":[" actual_lengths_for max "," actual_lengths_for ","lines map "]}," ListRenderer get_row_widths":{"type":"method","name":"get_row_widths","children":[],"call":[" get_segment_widths "]}," ListRenderer get_col_widths":{"type":"method","name":"get_col_widths","children":[],"call":[" get_segment_widths "," transpose "]}," ListRenderer right_pad_field":{"type":"method","name":"right_pad_field","children":[],"call":["field + "," pad_char * "," pad_char ","width - "," actual_length "," String "," String  + "]}," ListRenderer right_pad_row":{"type":"method","name":"right_pad_row","children":[],"call":[" right_pad_field ","row zip map ","row zip "]}," ListRenderer row_to_s":{"type":"method","name":"row_to_s","children":[],"call":["row compact join + ","row compact join "," row_join_string ","row compact "]}," ListRenderer stringfy_list":{"type":"method","name":"stringfy_list","children":[],"call":["(send\n  (lvar :list) :map) join "," row_to_s ","list map "]}," ListRenderer pad_uneven_rows":{"type":"method","name":"pad_uneven_rows","children":[],"call":[" stringfy_list "," right_pad_row ","row compact "," Array map "," Array "]}," ListRenderer list_uneven_columns_down_mode":{"type":"method","name":"list_uneven_columns_down_mode","children":[],"call":[" list_uneven_columns_mode ","HighLine List  new "," items "," HighLine List  new _uneven_columns_mode "]}," ListRenderer list_uneven_columns_mode":{"type":"method","name":"list_uneven_columns_mode","children":[],"call":[" pad_uneven_rows "," option "," inside_line_size_limit? ","column_count == "," get_col_widths ","list cols= ","col_max downto "," items size "," items ","HighLine List  new "," get_col_ get_col_widths  "]}," ListRenderer list_columns_down_mode":{"type":"method","name":"list_columns_down_mode","children":[],"call":["HighLine List  new to_s ","HighLine List  new "," col_count "," right_padded_items "]}," ListRenderer list_columns_across_mode":{"type":"method","name":"list_columns_across_mode","children":[],"call":["HighLine List  new to_s ","HighLine List  new "," col_count "," right_padded_items "]}," ListRenderer list_inline_mode":{"type":"method","name":"list_inline_mode","children":[],"call":[" items [] join + "," items last "," items "," items [] join "," items [] "," items first "," items size == "," items size "," option "]}," ListRenderer list_default_mode":{"type":"method","name":"list_default_mode","children":[],"call":["(send\n  (send nil :items) :map) join "," items map "," items "]}," ListRenderer render_list_items":{"type":"method","name":"render_list_items","children":[],"call":["template_renderer render ","HighLine TemplateRenderer  new "," highline ","ERB  new "," String ","items to_ary map ","items to_ary ","HighLine TemplateRenderer  new  render ","ERB  new _renderer render "," String s to_ary map "," String s to_ary "]}," ListRenderer render":{"type":"method","name":"render","children":[],"call":[" list_default_mode "," list_uneven_columns_down_mode "," list_uneven_columns_mode "," list_columns_down_mode "," list_columns_across_mode "," list_inline_mode "," mode "," items empty? "," items "]}," ListRenderer initialize":{"type":"method","name":"initialize","children":[],"call":[" render_list_items "]}," HighLine List row_join_string=":{"type":"method","name":"row_join_string=","children":[],"call":[]}," HighLine Menu MenuItem item_help":{"type":"method","name":"item_help","children":[],"call":[" help "," name to_s downcase "," name to_s "," name "]}," HighLine Menu MenuItem initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," HighLine Menu index_color":{"type":"method","name":"index_color","children":[],"call":[]}," HighLine Menu index_color=":{"type":"method","name":"index_color=","children":[],"call":[]}," HighLine Question append_default_to_template":{"type":"method","name":"append_default_to_template","children":[],"call":[" template << "," template "," template []= "," template [] == "," template [] "," template == ","Regexp  last_match "," template =~ ","default_str empty? "," default to_s "," default "," default respond_to? "," default to_s  empty? "]}}