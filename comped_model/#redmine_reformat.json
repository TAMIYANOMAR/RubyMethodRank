{" RedmineReformat SettingPatch with_text_formatting":{"type":"method","name":"with_text_formatting","children":[],"call":[" current_text_formatting= ","block call "," current_text_formatting ","  current_text_formatting _text_formatting= ","  current_text_formatting _text_formatting "]}," RedmineReformat SettingPatch current_text_formatting=":{"type":"method","name":"current_text_formatting=","children":[],"call":["Thread  current []= ","Thread  current "]}," RedmineReformat SettingPatch current_text_formatting":{"type":"method","name":"current_text_formatting","children":[],"call":["Thread  current [] ","Thread  current "]}," RedmineReformat SettingPatch text_formatting":{"type":"method","name":"text_formatting","children":[],"call":[" current_text_formatting "]}," RedmineReformat ReformatWorkerProgress reporting?":{"type":"method","name":"reporting?","children":[],"call":[]}," RedmineReformat ReformatWorkerProgress item_jobs_started?":{"type":"method","name":"item_jobs_started?","children":[],"call":[]}," RedmineReformat ReformatWorkerProgress complete?":{"type":"method","name":"complete?","children":[],"call":["c == ","@ipc recv ","@ipc send "]}," RedmineReformat ReformatWorkerProgress finish":{"type":"method","name":"finish","children":[],"call":["@ipc send "]}," RedmineReformat ReformatWorkerProgress progress":{"type":"method","name":"progress","children":[],"call":["@ipc send "]}," RedmineReformat ReformatWorkerProgress start":{"type":"method","name":"start","children":[],"call":["@ipc send "]}," RedmineReformat ReformatWorkerProgress initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineReformat ReformatProgress server":{"type":"method","name":"server","children":[],"call":[" raise ","ipc send "," items_completion "," progress "," start ","ipc recv "]}," RedmineReformat ReformatProgress item_jobs_complete?":{"type":"method","name":"item_jobs_complete?","children":[],"call":["c == "," items_completion "]}," RedmineReformat ReformatProgress items_completion":{"type":"method","name":"items_completion","children":[],"call":["@progress [] == ","@subtotals [] ","@progress [] ","@subtotals each "]}," RedmineReformat ReformatProgress item_jobs_started?":{"type":"method","name":"item_jobs_started?","children":[],"call":["@subtotals == "]}," RedmineReformat ReformatProgress complete?":{"type":"method","name":"complete?","children":[],"call":[" item_jobs_complete? "," item_jobs_started? "]}," RedmineReformat ReformatProgress report":{"type":"method","name":"report","children":[],"call":["STDERR  puts ","@totals [] ","@progress [] "]}," RedmineReformat ReformatProgress reporting?":{"type":"method","name":"reporting?","children":[],"call":[]}," RedmineReformat ReformatProgress finish":{"type":"method","name":"finish","children":[],"call":["STDERR  puts "]}," RedmineReformat ReformatProgress progress":{"type":"method","name":"progress","children":[],"call":[" report ","(send\n  (lvar :newn) :/\n  (const nil :PERIOD)) > ","oldn / ","newn / ","newn == ","@totals [] ","increment > "," reporting? "," raise ","newn > ","@subtotals [] ","@progress []= ","oldn + ","@progress [] ","(send\n  (lvar :@progress []= ) :/\n  (const nil :PERIOD)) > ","@progress []  / ","@progress []=  / ","@progress []=  == ","@progress []=  > ","@progress []  + "]}," RedmineReformat ReformatProgress start":{"type":"method","name":"start","children":[],"call":[" raise ","@subtotals [] > ","@subtotals [] ","@totals []= ","@totals [] nil? ","@totals [] ","@totals [] != "]}," RedmineReformat ReformatProgress total":{"type":"method","name":"total","children":[],"call":["@totals [] "]}," RedmineReformat ReformatProgress subtotal":{"type":"method","name":"subtotal","children":[],"call":["@subtotals [] "]}," RedmineReformat ReformatProgress initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," RedmineReformat MicroserviceServlet convert":{"type":"method","name":"convert","children":[],"call":[" raise ","@converter convert ","Setting  with_text_formatting ","ctx from_formatting ","Mailer  with_deliveries ","Project  transaction "]}," RedmineReformat MicroserviceServlet params_override":{"type":"method","name":"params_override","children":[],"call":["params []= ","params [] to_i ","params [] ","params merge! ","params keys include? ","params keys ","override select "]}," RedmineReformat MicroserviceServlet do_POST":{"type":"method","name":"do_POST","children":[],"call":["resp body= ","resp keep_alive= ","resp []= "," raise "," convert ","ctx id= ","Microservice  counter ","ctx id zero? ","ctx id ","Context  new ","p symbolize_keys ","p [] ","req body ","req query [] ","req query "," params_override ","req content_type =~ ","req content_type ","WEBrick HTTPUtils  parse_query ","req query_string ","ActiveSupport HashWithIndifferentAccess  new ","resActiveSupport HashWithIndifferentAccess  new  body= ","resActiveSupport HashWithIndifferentAccess  new  keeActiveSupport HashWithIndifferentAccess  new _alive= ","resActiveSupport HashWithIndifferentAccess  new  []= ","Context  new  id= ","Context  new  id zero? ","Context  new  id ","ActiveSupport HashWithIndifferentAccess  new  symbolize_keys ","ActiveSupport HashWithIndifferentAccess  new  [] "," ActiveSupport HashWithIndifferentAccess  new arams_override ","req content_tyActiveSupport HashWithIndifferentAccess  new e =~ ","req content_tyActiveSupport HashWithIndifferentAccess  new e ","WEBrick HTTPUtils  ActiveSupport HashWithIndifferentAccess  new arse_query ","ActiveSuActiveSupport HashWithIndifferentAccess  new ActiveSupport HashWithIndifferentAccess  new ort HashWithIndifferentAccess  new "]}," RedmineReformat MicroserviceServlet initialize":{"type":"method","name":"initialize","children":[],"call":["convopts merge ","File  join ","File  dirname "]}," RedmineReformat Microservice start_webrick":{"type":"method","name":"start_webrick","children":[],"call":["server start ","server shutdown "," trap ","(str \"INT\") each "," block_given? ","WEBrick HTTPServer  new ","WEBrick HTTPServer  new  start ","WEBrick HTTPServer  new  shutdown "]}," RedmineReformat Microservice apply_setting_patch":{"type":"method","name":"apply_setting_patch","children":[],"call":[]}," RedmineReformat Microservice run":{"type":"method","name":"run","children":[],"call":["server mount "," start_webrick "," class apply_setting_patch "," class ","STDERR  sync= ","STDOUT  sync= "]}," RedmineReformat Microservice initialize":{"type":"method","name":"initialize","children":[],"call":["ConfiguredConverters  new ","Converters  from_json "]}," RedmineReformat Invoker multi_run":{"type":"method","name":"multi_run","children":[],"call":["Process  waitall ","progress server ","ReformatProgress  new ","Ipc  new ","fd close ","wpipes flatten each ","wpipes flatten "," exit "," convert_redmine ","RedmineReformat ReformatWorkerProgress  new ","Process  fork ","@workers times collect ","@workers times ","IO  pipe ","2 times collect ","2 times ","Progress  new ","RedmineReformat Execution Progress  new ","RedmineReformat Execution ReformatWorkerProgress  new ","ReformatProgress  new  server ","RedmineReformat ReformatWorkerProgress  new  server ","Progress  new  server ","RedmineReformat Execution Progress  new  server ","RedmineReformat Execution ReformatWorkerProgress  new  server "]}," RedmineReformat Invoker convert_redmine":{"type":"method","name":"convert_redmine","children":[],"call":["ConvertRedmine  call ","exn to_formatting= ","exn converter= ","exn dryrun= ","RedmineReformat Execution  new ","RedmineReformat Execution  new  to_formatting= ","RedmineReformat Execution  new  converter= ","RedmineReformat Execution  new  dryrun= "]}," RedmineReformat Invoker run":{"type":"method","name":"run","children":[],"call":[" multi_run "," convert_redmine ","ReformatProgress  new ","@workers == ","STDERR  sync= ","STDOUT  sync= ","Progress  new ","RedmineReformat Execution Progress  new "]}," RedmineReformat Invoker initialize":{"type":"method","name":"initialize","children":[],"call":["(lvar :workers) max ","RedmineReformat Converters  from_json ","dryrun ! ! ","dryrun ! "]}," RedmineReformat Helpers with_application_helper":{"type":"method","name":"with_application_helper","children":[],"call":["helper reformat_metadata= ","helper reformat_ctx= ","helper reformat_opts= ","helper reformat_metadata ","helper reformat_ctx ","helper reformat_opts ","ReformatApplicationHelper  instance ","ReformatApplicationHelper  instance  reformat_metadata= ","ReformatApplicationHelper  instance  reformat_ctx= ","ReformatApplicationHelper  instance  reformat_opts= ","ReformatApplicationHelper  instance  reformat_metadata ","ReformatApplicationHelper  instance  reformat_ctx ","ReformatApplicationHelper  instance  reformat_opts "]}," Helpers ApplicationHelperPatch InstanceMethods dummy_replace_toc":{"type":"method","name":"dummy_replace_toc","children":[],"call":[]}," Helpers ApplicationHelperPatch InstanceMethods reformat_inject_macros":{"type":"method","name":"reformat_inject_macros","children":[],"call":[" h "," raise "," reformat_opts [] "," reformat_opts "," reformat_enc_macro "," exec_macro ","exec_macro_args << ","options empty? ","options nil? ","macro == ","esc nil? ","7 try ","6 to_s ","4 downcase ","orig =~ ","macros delete ","2 to_i ","text gsub! ","macros delete  =~ "]}," Helpers ApplicationHelperPatch InstanceMethods reformat_parse_wiki_links":{"type":"method","name":"reformat_parse_wiki_links","children":[],"call":["wiki_link []= ","link_project wiki find_page ","link_project wiki ","link_project identifier ","link_project id ","page =~ ","Project  find_by_name ","Project  find_by_identifier ","wiki_links []= ","project identifier ","project id ","wiki_links [] ","m [] ","m pre_match + ","m post_match ","m pre_match ","page match ","CGI  unescapeHTML ","text scan "," reformat_metadata [] "," reformat_metadata ","h []= ","Hash  new ","mark_re nil? "," reformat_opts [] "," reformat_opts ","wiki_links []  []= ","link_project wiki find_m pre_match +  ","link_project wiki find_CGI  unescapeHTML  ","m pre_match +  =~ ","CGI  unescapeHTML  =~ ","wiki_links [] s []= "," reformat_metadata []  []= ","wiki_links [] s [] "," reformat_metadata []  [] ","m pre_match +  match ","CGI  unescapeHTML  match "," reformat_opts []  nil? "]}," Helpers ApplicationHelperPatch InstanceMethods reformat_parse_redmine_links":{"type":"method","name":"reformat_parse_redmine_links","children":[],"call":["sep == ","identifier == ","oid to_s == ","oid to_s ","identifier to_i ","prefix nil? ","esc nil? ","$~ [] ","text gsub! ","identifier to_i  to_s == ","identifier to_i  to_s ","$~ []  nil? "]}," Helpers ApplicationHelperPatch included":{"type":"method","name":"included","children":[{"type":"method","name":"reformat_ctx=","children":[],"asgn":[null,null],"call":["ctx project "]},{"type":"method","name":"reformat_enc_macro","children":[],"asgn":[{"type":"local","name":"wcl","value":" reformat_code_wrap "},[" reformat_code_wrap "],{"type":"local","name":"wbody","value":" reformat_code_wrap "},[" reformat_code_wrap "],{"type":"local","name":"wop","value":" reformat_code_wrap "},[" reformat_code_wrap "],null,null,null],"call":[" reformat_code_wrap "," reformat_code_wrap "," reformat_enc_macro_body "," reformat_code_wrap ","$~ [] ","full_macro sub "]},{"type":"method","name":"reformat_enc_macro_body","children":[],"asgn":[],"call":["(send\n  (send\n    (lvar :c) :codepoints) :map) join "," sprintf ","c codepoints map ","c codepoints ","text to_json gsub ","text to_json "]},{"type":"method","name":"reformat_code_wrap","children":[],"asgn":[],"call":[" h "]}],"call":[]}," Helpers ReformatApplicationHelper initialize":{"type":"method","name":"initialize","children":[],"call":["ApplicationHelper  send ","ApplicationHelper  included_modules include? ","ApplicationHelper  included_modules ","User  current= "]}," RedmineReformat Execution fail":{"type":"method","name":"fail","children":[],"call":[" exit ","@ipc close ","STDERR  puts "]}," RedmineReformat Execution reduce_rendezvous":{"type":"method","name":"reduce_rendezvous","children":[],"call":["@ipc send "," collector? "," fail ","c == ","@ipc recv "," master? "]}," RedmineReformat Execution tx_done":{"type":"method","name":"tx_done","children":[],"call":["@ipc send "," collector? "]}," RedmineReformat Execution tx_wait":{"type":"method","name":"tx_wait","children":[],"call":["@progress finish "," master? ","@ipc recv "]}," RedmineReformat Execution finish":{"type":"method","name":"finish","children":[],"call":["v == ","STDERR  puts "," master? ","@progress complete? "," reduce_rendezvous ","v + "]}," RedmineReformat Execution progress":{"type":"method","name":"progress","children":[],"call":["@progress progress "]}," RedmineReformat Execution total":{"type":"method","name":"total","children":[],"call":["@progress total "]}," RedmineReformat Execution mytotal":{"type":"method","name":"mytotal","children":[],"call":["@progress subtotal "]}," RedmineReformat Execution scope":{"type":"method","name":"scope","children":[],"call":["scope where ","mymeta max_id ","mymeta min_id ","@progress start ","mymeta count_id ","model select from reorder first ","model select from reorder ","model select from ","scope offset limit select ","scope offset limit ","scope offset ","model select ","scope reorder ","scope model ","scope is_a? ","@index * ","(send\n  (send\n    (lvar :total) :+\n    (ivar :@wcount)) :-\n  (int 1)) / ","total + - ","total + ","scope count ","model select from reorder take ","mymeta count_id > ","scope reorder  where ","model select from reorder first  max_id ","model select from reorder take  max_id ","model select from reorder first  min_id ","model select from reorder take  min_id ","model select from reorder first  count_id ","model select from reorder take  count_id ","scope model  select from reorder first ","scope model  select from reorder ","scope model  select from ","scope reorder  offset limit select ","scope @index *  limit select ","scope offset (send\n  (send\n    (lvar :total) :+\n    (ivar :@wcount)) :-\n  (int 1)) /  select ","scope reorder  offset limit ","scope @index *  limit ","scope offset (send\n  (send\n    (lvar :total) :+\n    (ivar :@wcount)) :-\n  (int 1)) /  ","scope reorder  offset ","scope @index *  ","scope model  select ","scope reorder  reorder ","scope reorder  model ","scope scope model  ","scope reorder  is_a? ","(send\n  (send\n    (lvar :scope count ) :+\n    (ivar :@wcount)) :-\n  (int 1)) / ","scope count  + - ","scope count  + ","scope reorder  count ","scope model  select from reorder take ","model select from reorder first  count_id > ","model select from reorder take  count_id > "]}," RedmineReformat Execution start":{"type":"method","name":"start","children":[],"call":[" fail "," t ","STDERR  puts "," master? ","ConfiguredConverters  new ","v == ","v + "," reduce_rendezvous "]}," RedmineReformat Execution collector?":{"type":"method","name":"collector?","children":[],"call":["@index == ","@wcount - "]}," RedmineReformat Execution master?":{"type":"method","name":"master?","children":[],"call":["@index == "]}," RedmineReformat Execution initialize":{"type":"method","name":"initialize","children":[],"call":["@ipc count ","@ipc index ","DummyIpc  new "]}," RedmineReformat Execution Ipc fail":{"type":"method","name":"fail","children":[],"call":[" exit "," close ","STDERR  puts "]}," RedmineReformat Execution Ipc close":{"type":"method","name":"close","children":[],"call":["@wfd close ","@rfd close "]}," RedmineReformat Execution Ipc use_fd?":{"type":"method","name":"use_fd?","children":[],"call":["(ivar :@rfd) include? "]}," RedmineReformat Execution Ipc recv":{"type":"method","name":"recv","children":[],"call":[" fail ","type != ","res shift ","3 to_i ","2 to_i ","1 to_sym ","msg match ","@rfd gets ","res shift  != ","@rfd gets  match "]}," RedmineReformat Execution Ipc send":{"type":"method","name":"send","children":[],"call":["@wfd write "]}," RedmineReformat Execution Ipc initialize":{"type":"method","name":"initialize","children":[],"call":["fd close "," use_fd? ","pipes flatten each ","pipes flatten ","pipes length ","@wfd sync= ","pipes [] [] ","pipes [] ","(send\n  (lvar :index) :+\n  (int 1)) % ","index + ","@rfd sync= ","pipes [] []  sync= "]}," RedmineReformat Execution DummyIpc fail":{"type":"method","name":"fail","children":[],"call":[" exit "," close ","STDERR  puts "]}," RedmineReformat Execution DummyIpc close":{"type":"method","name":"close","children":[],"call":[]}," RedmineReformat Execution DummyIpc recv":{"type":"method","name":"recv","children":[],"call":[" fail ","type != ","res shift ","@queue shift ","res shift  != ","@queue shift  shift "]}," RedmineReformat Execution DummyIpc send":{"type":"method","name":"send","children":[],"call":["@queue push ","count2 to_i ","count1 to_i ","item to_s ","type to_sym "]}," RedmineReformat Execution DummyIpc count":{"type":"method","name":"count","children":[],"call":[]}," RedmineReformat Execution DummyIpc index":{"type":"method","name":"index","children":[],"call":[]}," RedmineReformat Execution DummyIpc initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineReformat Converters from_json":{"type":"method","name":"from_json","children":[],"call":["ConfiguredConverters  new ","JSON  parse ","RedmineReformat Converters ConfiguredConverters  new "]}," Ws Converter convert":{"type":"method","name":"convert","children":[],"call":["res body "," raise ","res msg ","res code ","res code == ","@http request ","req body= ","req []= ","@request_class new ","ctx ref ","@http request  body ","@http request  msg ","@http request  code ","@http request  code == ","@http @request_class new uest ","@request_class new  body= ","@request_class new  []= ","@@request_class new uest_class new "]}," Ws Converter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","opts fetch to_sym ","opts fetch ","Net HTTP Persistent  new ","url to_s "," URI "]}," RedmineReformat Converters Utils to_i_or_s":{"type":"method","name":"to_i_or_s","children":[],"call":["str to_i ","str =~ ","v to_s ","v is_a? ","v nil? ","v to_s  to_i ","v to_s  =~ "]}," RedmineReformat Converters Utils char2dec":{"type":"method","name":"char2dec","children":[],"call":["c codepoints [] ","c codepoints "]}," RedmineReformat Converters Utils char2hex":{"type":"method","name":"char2hex","children":[],"call":[" sprintf ","c codepoints [] ","c codepoints "]}," RedmineReformat Converters Utils markdown_ish":{"type":"method","name":"markdown_ish","children":[],"call":["formatting =~ "]}," RedmineReformat Converters Utils markup_char_re":{"type":"method","name":"markup_char_re","children":[],"call":["cache []= ","Regexp  new ","alts join ","alts << "," char2hex "," char2dec ","Regexp  escape ","entnames map "," markdown_ish "," raise ","ArgumentError  new ","ENTITY_NAME_REFS  [] ","cache [] ","cache key? ","@@markup_char_res [] ","@@markup_char_res []  []= ","ENTITY_NAME_REFS  []  map ","@@markup_char_res []  [] ","@@markup_char_res []  key? "]}," TextileToMarkdown PandocPreprocessing restore_after_table_reformat_placeholders":{"type":"method","name":"restore_after_table_reformat_placeholders","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing md_reformat_tables":{"type":"method","name":"md_reformat_tables","children":[],"call":["STDERR  puts ","MarkdownTableFormatter  new to_md ","MarkdownTableFormatter  new ","text gsub! ","MarkdownTableFormatter TableFormatter  new to_md ","MarkdownTableFormatter TableFormatter  new "]}," TextileToMarkdown PandocPreprocessing remove_init_breakers":{"type":"method","name":"remove_init_breakers","children":[],"call":["@ph remove_breakers "]}," TextileToMarkdown PandocPreprocessing md_replace_underline":{"type":"method","name":"md_replace_underline","children":[],"call":["text gsub! ","@format_opts [] "]}," TextileToMarkdown PandocPreprocessing smooth_fenced_code_blocks":{"type":"method","name":"smooth_fenced_code_blocks","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing normalize_and_rip_fenced_code_blocks":{"type":"method","name":"normalize_and_rip_fenced_code_blocks","children":[],"call":["indent1 empty? ","@ph ph_for ","$~ [] ","text gsub! "]}," TextileToMarkdown PandocPreprocessing smooth_macros":{"type":"method","name":"smooth_macros","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing restore_aftercode_placeholders":{"type":"method","name":"restore_aftercode_placeholders","children":[],"call":["@ph restore ","text gsub! "]}," TextileToMarkdown PandocPreprocessing md_polish_before_code_restore":{"type":"method","name":"md_polish_before_code_restore","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing md_separate_lists":{"type":"method","name":"md_separate_lists","children":[],"call":["text gsub! ","@format_opts [] "]}," TextileToMarkdown PandocPreprocessing md_footnotes":{"type":"method","name":"md_footnotes","children":[],"call":["@referenced_footnotes include? ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing restore_qtag_chars_to_md":{"type":"method","name":"restore_qtag_chars_to_md","children":[],"call":["@ph restore ","$~ [] ","text gsub! ","@$~ []  restore "]}," TextileToMarkdown PandocPreprocessing restore_context_free_placeholders":{"type":"method","name":"restore_context_free_placeholders","children":[],"call":["@ph restore ","text gsub! "]}," TextileToMarkdown PandocPreprocessing md_remove_auxiliary_code_block_lang":{"type":"method","name":"md_remove_auxiliary_code_block_lang","children":[],"call":["text gsub! ","  + "]}," TextileToMarkdown PandocPreprocessing restore_protected_line_breaks":{"type":"method","name":"restore_protected_line_breaks","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing expand_blockqutes":{"type":"method","name":"expand_blockqutes","children":[],"call":["qlevel zero? ","tagend nil? ","> * ","empty_line ! ","qlevel > ","regline == ","tag nil? ","text gsub! ","regline ==  ! "]}," TextileToMarkdown PandocPreprocessing protect_eq_sequences":{"type":"method","name":"protect_eq_sequences","children":[],"call":["@ph ph_for_each ","text gsub! "]}," TextileToMarkdown PandocPreprocessing prefer_inline_code_over_html":{"type":"method","name":"prefer_inline_code_over_html","children":[],"call":["@ph ph_for ","code gsub! ","@pre_list [] gsub! ","@pre_list [] "," protect_qtag_chars "," restore_aftercode_placeholders ","code include? ","code match? ","code empty? ","@ph match_context_match ","htmlcoder decode ","code strip ","@pre_list []= ","codeparam == ","@pre_list [] sub ","1 to_i ","text gsub! ","HTMLEntities  new ","htmlcoder decode  gsub! ","@pre_list [] sub  gsub! "," restore_afterhtmlcoder decode _placeholders "," restore_after@pre_list [] sub _placeholders ","htmlcoder decode  include? ","@pre_list [] sub  include? ","htmlcoder decode  match? ","@pre_list [] sub  match? ","htmlcoder decode  empty? ","@pre_list [] sub  empty? ","htmlhtmlcoder decode r dehtmlcoder decode  ","html@pre_list [] sub r de@pre_list [] sub  ","HTMLEntities  new  decode ","htmlcoder decode  strip ","@pre_list [] sub  strip ","htmlcoder decode param == ","@pre_list [] sub param == "]}," TextileToMarkdown PandocPreprocessing protect_symbols":{"type":"method","name":"protect_symbols","children":[],"call":["@ph ph_for ","text gsub! "]}," TextileToMarkdown PandocPreprocessing put_blank_line_before_pre_in_list":{"type":"method","name":"put_blank_line_before_pre_in_list","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing protect_hashes":{"type":"method","name":"protect_hashes","children":[],"call":["@ph ph_for ","textile gsub! "]}," TextileToMarkdown PandocPreprocessing put_breaks_before_html_entities":{"type":"method","name":"put_breaks_before_html_entities","children":[],"call":["@ph ph_for ","text gsub! "]}," TextileToMarkdown PandocPreprocessing protect_autolinks":{"type":"method","name":"protect_autolinks","children":[],"call":["@ph ph_for ","htmlcoder encode ","postesc sub! ","url gsub ","leading =~ ","text gsub! ","HTMLEntities  new ","HTMLEntities  new  encode "]}," TextileToMarkdown PandocPreprocessing restore_textile_hrs":{"type":"method","name":"restore_textile_hrs","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing restore_textile_lists":{"type":"method","name":"restore_textile_lists","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing textile_footnote_refs":{"type":"method","name":"textile_footnote_refs","children":[],"call":["@ph ph_for ","@ph ph_for_each ","@defined_footnotes include? ","@referenced_footnotes << ","$~ [] ","text gsub! "]}," TextileToMarkdown PandocPreprocessing restore_real_qtags":{"type":"method","name":"restore_real_qtags","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," TextileToMarkdown PandocPreprocessing protect_qtag_chars":{"type":"method","name":"protect_qtag_chars","children":[],"call":["@ph ph_for ","qms gsub ","text gsub! "]}," TextileToMarkdown PandocPreprocessing inline_textile_span_to_phs":{"type":"method","name":"inline_textile_span_to_phs","children":[],"call":["@ph ph_for ","1 empty? ","content match ","ht nil? ","content gsub! ","content =~ ","content sub! ","oqs << ","$~ [] ","text gsub! ","QTAGS  each "]}," TextileToMarkdown PandocPreprocessing process_textile_prefix_blocks":{"type":"method","name":"process_textile_prefix_blocks","children":[],"call":["text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join ","blk replace ","@defined_footnotes << ","@ph add_match_context ","tagpre == ","(str \"h\") include? ","@ph ph_for ","(str \"bc\") include? ","$~ [] ","blk =~ ","blk strip! ","text split collect ","text split "]}," TextileToMarkdown PandocPreprocessing guess_table_headers":{"type":"method","name":"guess_table_headers","children":[],"call":["heading gsub! ","text gsub! "]}," TextileToMarkdown PandocPreprocessing protect_pipes_in_tables":{"type":"method","name":"protect_pipes_in_tables","children":[],"call":["@ph ph_for ","@pre_list [] gsub! ","@pre_list [] ","1 to_i ","offtext scan ","@pre_list empty? ","content gsub! ","$~ [] ","row gsub! ","text gsub! "]}," TextileToMarkdown PandocPreprocessing block_textile_table":{"type":"method","name":"block_textile_table","children":[],"call":["text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join ","rows join ","rows << ","cells join ","cells << ","cell gsub! ","modifiers =~ ","row scan ","row =~ ","fullrow each_line ","fullrow gsub! ","$~ [] ","blk gsub ","blk strip! ","text split collect ","text split "]}," TextileToMarkdown PandocPreprocessing normalize_lists_to_phs":{"type":"method","name":"normalize_lists_to_phs","children":[],"call":["@ph ph_for_each ","2 * ","1 length ","text gsub! "]}," TextileToMarkdown PandocPreprocessing protect_wiki_links":{"type":"method","name":"protect_wiki_links","children":[],"call":["res << ","(send\n  (send\n    (lvar :parenth_after) :each_char) :map) join ","@ph ph_for ","parenth_after each_char map ","parenth_after each_char ","(send\n  (send\n    (str \"]]\") :each_char) :map) join ","]] each_char map ","]] each_char ","(send\n  (send\n    (str \"[[\") :each_char) :map) join ","[[ each_char map ","[[ each_char ","String  new ","(send\n  (send\n    (str \"\\\\|\") :each_char) :map) join ","\\| each_char map ","\\| each_char ","link_body gsub! "," protect_qtag_chars ","@format_opts [] ! ","@format_opts [] ","(begin\n  (lvar :wiki_link)) gsub ","$~ [] ","text gsub! ","text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join "," protect_wiki_links ","blk gsub ","blk strip! ","text split collect ","text split ","in_table nil? ","String  new  << "]}," TextileToMarkdown PandocPreprocessing inline_textile_code":{"type":"method","name":"inline_textile_code","children":[],"call":["@ph ph_for ","text gsub! ","@pre_list length - ","@pre_list length ","@pre_list << ","code empty? ","code strip! ","code match "," revert_hard_break ","m =~ ","HTMLEntities  new "]}," TextileToMarkdown PandocPreprocessing inline_textile_link":{"type":"method","name":"inline_textile_link","children":[],"call":["m gsub "," protect_qtag_chars "," inline_textile_span_to_phs ","@ph ph_for ","url gsub! ","pre sub! ",") + ","url [] ","(send\n  (send\n    (lvar :url) :count\n    (str \"(\")) :-\n  (send\n    (lvar :url) :count\n    (str \")\"))) < ","url count - ","url count ","url [] == ","$~ [] ","m =~ ","purl include? ! ","purl include? ","ptext include? ! ","ptext include? ","text gsub! ","url []  gsub! ","url []  [] ","(send\n  (send\n    (lvar :url [] ) :count\n    (str \"(\")) :-\n  (send\n    (lvar :url [] ) :count\n    (str \")\"))) < ","url []  count - ","url []  count ","url []  [] == ","purl []  include? ! ","purl []  include? "]}," TextileToMarkdown PandocPreprocessing revert_hard_break":{"type":"method","name":"revert_hard_break","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing hard_break":{"type":"method","name":"hard_break","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing process_indented_blocks":{"type":"method","name":"process_indented_blocks","children":[],"call":["@pre_list length - ","@pre_list length ","@pre_list << ","prefix == ","code_block match? ","(send\n  (send\n    (nth-ref 3) :split\n    (str \"\\n\")) :map) join ","line =~ ","line sub! ","3 split map ","3 split ","2 length ","text gsub! ","(send\n  (send\n    (nth-ref 3) :split\n    (str \"\\n\")) :map) join  match? "]}," TextileToMarkdown PandocPreprocessing glue_indented_continuations":{"type":"method","name":"glue_indented_continuations","children":[],"call":["textile << ","last_blank_line empty? ","rest empty? ","line sub! ","line =~ ","last_blank_line empty? ! ","rest =~ ","5 nil? ! ","5 nil? ","2 nil? ! ","2 nil? ","textile gsub! "]}," TextileToMarkdown PandocPreprocessing normalize_hr_to_phs":{"type":"method","name":"normalize_hr_to_phs","children":[],"call":["@ph ph_for_each ","$~ [] ","text gsub! "]}," TextileToMarkdown PandocPreprocessing block_textile_quotes":{"type":"method","name":"block_textile_quotes","children":[],"call":["quotes << ","\n + + ","\n + ","</blockquote> * ","content + ","\n\n + + ","\n\n + ","indent - ","<blockquote> * ","l - ","l > ","l != ","bq count ","line =~ ","lines each ","String  new ","match split ","text gsub! ","String  new  << ","</bbq count ockquote> * ","<bbq count ockquote> * ","bq count  - ","bq count  > ","bq count  != ","bq count ine =~ ","bq count ines each ","match split  each ","match spbq count it "]}," TextileToMarkdown PandocPreprocessing escape_html_tags":{"type":"method","name":"escape_html_tags","children":[],"call":["3 nil? ","ALLOWED_TAGS  include? ","text gsub! "]}," TextileToMarkdown PandocPreprocessing no_textile":{"type":"method","name":"no_textile","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing smooth_offtags":{"type":"method","name":"smooth_offtags","children":[],"call":["@pre_list []= ","@pre_list [] ","1 to_i ","text gsub! ","@pre_list empty? ","@pre_l1 to_i st []= ","@pre_l1 to_i st [] ","1 to_1 to_i  ","@pre_l1 to_i st empty? "]}," TextileToMarkdown PandocPreprocessing protect_offtag_contents":{"type":"method","name":"protect_offtag_contents","children":[],"call":["@ph ph_for ","code gsub ","@pre_list map! "]}," TextileToMarkdown PandocPreprocessing merge_pre_code_offtags":{"type":"method","name":"merge_pre_code_offtags","children":[],"call":["md [] ","out sub! ","@pre_list [] "," smooth_offtags ","String  new ","(begin\n  (send\n    (lvar :md) :[]\n    (sym :codeopen))) dup ","@pre_list []= ","md [] to_i ","@pre_list [] sub ","raw_code ! ","@pre_list [] =~ ","md [] nil? ","text gsub! ","String  new  sub! ","md []  sub! ","@pre_list [] =~  ! "]}," TextileToMarkdown PandocPreprocessing unindent_pre_offtag":{"type":"method","name":"unindent_pre_offtag","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing rip_offtags":{"type":"method","name":"rip_offtags","children":[],"call":["codepre zero? ","@pre_list []= ","@pre_list last + ","@pre_list last "," htmlesc ","codepre - > ","codepre - ","used_offtags length ","codepre > ","@pre_list << ","tag << ","tag == ","2 to_s match ","2 to_s ","first match ","@pre_list length ","first match ! ","used_offtags []= ","text gsub! ","text =~ "]}," TextileToMarkdown PandocPreprocessing htmlesc":{"type":"method","name":"htmlesc","children":[],"call":["str gsub! ","mode == ","mode != "]}," TextileToMarkdown PandocPreprocessing rip_macros":{"type":"method","name":"rip_macros","children":[],"call":["@ph ph_for "," smooth_offtags ","textile gsub! ","macro =~ "]}," TextileToMarkdown PandocPreprocessing clean_white_space":{"type":"method","name":"clean_white_space","children":[],"call":["text gsub! "]}," TextileToMarkdown PandocPreprocessing finalize_reformatter":{"type":"method","name":"finalize_reformatter","children":[],"call":["@ph finalize_text "]}," TextileToMarkdown PandocPreprocessing initialize_reformatter":{"type":"method","name":"initialize_reformatter","children":[],"call":["@ph prepare_text ","Placeholders  new ","Placeholders  new  prepare_text "]}," MarkdownTableFormatter to_md":{"type":"method","name":"to_md","children":[],"call":["row join lstrip ","row join "," pad "," column_width ","row map! with_index ","row map! ","t each_with_index ","t insert "," header_separator_row "," table clone "," table ","row join ls table clone rip "," column_wid table clone h ","row map! wi table clone h_index "," table clone  each_wi table clone h_index "," table clone  inser table clone  "," header_separa table clone or_row ","  table clone able clone ","  table clone able "]}," MarkdownTableFormatter header_separator_row":{"type":"method","name":"header_separator_row","children":[],"call":["output push "," separator "," column_width ","(splat\n  (erange\n    (int 0)\n    (send\n      (send\n        (send nil :table) :first) :length))) each "," table first length "," table first "," table "]}," MarkdownTableFormatter separator":{"type":"method","name":"separator","children":[],"call":[" ljust "]}," MarkdownTableFormatter pad":{"type":"method","name":"pad","children":[],"call":["string strip ljust ","string strip "]}," MarkdownTableFormatter column_width":{"type":"method","name":"column_width","children":[],"call":["length > ","row [] strip length ","row [] strip ","row [] "," table each "," table ","row [] strip length  > ","row [] strip row [] strip length  "]}," MarkdownTableFormatter table":{"type":"method","name":"table","children":[],"call":[" parse "]}," MarkdownTableFormatter parse":{"type":"method","name":"parse","children":[],"call":["@table delete_at ","@table push ","cell strip! ","row_array each ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\\\\\|]|\\\\\\\\.)*)([|]|\\\\z)\")\n      (regopt :m))) :collect) compact ","sep empty? ","cell empty? ","row scan collect ","row scan ","rows each ","@doc split ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\|]|\\\\.)*)([|]|\\z)\")\n      (regopt :m))) :collect) compact  each ","@doc split  each "]}," MarkdownTableFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TextileToMarkdown Conversion exec_pandoc_with_timeout":{"type":"method","name":"exec_pandoc_with_timeout","children":[],"call":[" raise ","STDERR  puts ","PANDOC_RECOVERABLE_EXIT_CODES  include? ","status exitstatus ","status success? ","status exited? ","Process  detach ","Process  kill ","t value ","o read ","(send\n  (lvar :i) :<<\n  (lvar :stdin)) close ","i << ","t pid ","Open3  popen2 ","PANDOC_COMMAND  join ","Timeout  timeout ","t value  exitt value  ","t value  success? ","t value  exited? ","t t pid  "]}," TextileToMarkdown Conversion post_process_markdown":{"type":"method","name":"post_process_markdown","children":[],"call":[" finalize_reformatter "," expand_blockqutes "," restore_after_table_reformat_placeholders "," smooth_fenced_code_blocks "," md_reformat_tables "," remove_init_breakers "," md_replace_underline "," normalize_and_rip_fenced_code_blocks "," smooth_macros "," restore_aftercode_placeholders "," md_polish_before_code_restore "," md_separate_lists "," md_remove_auxiliary_code_block_lang "," md_footnotes "," restore_qtag_chars_to_md "," restore_context_free_placeholders "," restore_protected_line_breaks "]}," TextileToMarkdown Conversion pre_process_textile":{"type":"method","name":"pre_process_textile","children":[],"call":[" smooth_offtags "," protect_eq_sequences "," prefer_inline_code_over_html "," protect_symbols "," textile_footnote_refs "," put_blank_line_before_pre_in_list "," protect_hashes "," put_breaks_before_html_entities "," restore_textile_hrs "," restore_textile_lists "," restore_real_qtags "," protect_qtag_chars "," protect_autolinks "," revert_hard_break "," inline_textile_span_to_phs "," hard_break "," process_textile_prefix_blocks "," guess_table_headers "," protect_pipes_in_tables "," normalize_lists_to_phs "," protect_wiki_links "," protect_offtag_contents "," block_textile_table "," inline_textile_code "," inline_textile_link "," process_indented_blocks "," glue_indented_continuations "," normalize_hr_to_phs "," block_textile_quotes "," escape_html_tags "," no_textile "," merge_pre_code_offtags "," unindent_pre_offtag "," rip_macros "," rip_offtags "," initialize_reformatter "," clean_white_space ","is_redcarpet ! ","@ctx to_formatting == ","@ctx to_formatting ","@ctx to_formatting ==  ! "]}," TextileToMarkdown Conversion call":{"type":"method","name":"call","children":[],"call":[" post_process_markdown "," exec_pandoc_with_timeout "," pre_process_textile ","String  new ","@textile empty? "]}," TextileToMarkdown Conversion initialize":{"type":"method","name":"initialize","children":[],"call":["ctx ref ","textile dup "]}," TextileToMarkdown Converter convert":{"type":"method","name":"convert","children":[],"call":["Conversion  new call ","Conversion  new "]}," RedmineReformat Converters SourcePos inspect":{"type":"method","name":"inspect","children":[],"call":["@boundaries inspect "," class name "," class "]}," RedmineReformat Converters SourcePos to_s":{"type":"method","name":"to_s","children":[],"call":["@boundaries to_s "]}," RedmineReformat Converters SourcePos hash":{"type":"method","name":"hash","children":[],"call":[" boundaries hash "," boundaries "]}," RedmineReformat Converters SourcePos eql?":{"type":"method","name":"eql?","children":[],"call":["o == "]}," RedmineReformat Converters SourcePos ==":{"type":"method","name":"==","children":[],"call":["o boundaries == "," boundaries ","o boundaries ","o class == "," class ","o class "]}," RedmineReformat Converters SourcePos end_column=":{"type":"method","name":"end_column=","children":[],"call":["@boundaries [] []= ","@boundaries [] "]}," RedmineReformat Converters SourcePos end_column":{"type":"method","name":"end_column","children":[],"call":["@boundaries [] [] ","@boundaries [] "]}," RedmineReformat Converters SourcePos end_line=":{"type":"method","name":"end_line=","children":[],"call":["@boundaries [] []= ","@boundaries [] "]}," RedmineReformat Converters SourcePos end_line":{"type":"method","name":"end_line","children":[],"call":["@boundaries [] [] ","@boundaries [] "]}," RedmineReformat Converters SourcePos start_column=":{"type":"method","name":"start_column=","children":[],"call":["@boundaries [] []= ","@boundaries [] "]}," RedmineReformat Converters SourcePos start_column":{"type":"method","name":"start_column","children":[],"call":["@boundaries [] [] ","@boundaries [] "]}," RedmineReformat Converters SourcePos start_line=":{"type":"method","name":"start_line=","children":[],"call":["@boundaries [] []= ","@boundaries [] "]}," RedmineReformat Converters SourcePos start_line":{"type":"method","name":"start_line","children":[],"call":["@boundaries [] [] ","@boundaries [] "]}," RedmineReformat Converters SourcePos endpos=":{"type":"method","name":"endpos=","children":[],"call":["@boundaries []= ","charpos [] "]}," RedmineReformat Converters SourcePos endpos":{"type":"method","name":"endpos","children":[],"call":["@boundaries [] "]}," RedmineReformat Converters SourcePos startpos=":{"type":"method","name":"startpos=","children":[],"call":["@boundaries []= ","charpos [] "]}," RedmineReformat Converters SourcePos startpos":{"type":"method","name":"startpos","children":[],"call":["@boundaries [] "]}," RedmineReformat Converters SourcePos each":{"type":"method","name":"each","children":[],"call":["@boundaries each "]}," RedmineReformat Converters SourcePos []":{"type":"method","name":"[]","children":[],"call":["@boundaries [] "]}," RedmineReformat Converters SourcePos initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" initialize ","orig boundaries "]}," RedmineReformat Converters SourcePos initialize":{"type":"method","name":"initialize","children":[],"call":[" endpos= "," startpos= "]}," RedmineFormatter Converter convert":{"type":"method","name":"convert","children":[],"call":[" raise ","STDERR  puts ","e class ","e message ","helper textilizable ","ctx project "," with_application_helper ","ctx ref "]}," RedmineFormatter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["@opts []= ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :macros))\n  (str \"keep\")) to_sym ","opts [] "]}," RedmineReformat Converters Placeholders warn":{"type":"method","name":"warn","children":[],"call":["STDERR  puts "]}," RedmineReformat Converters Placeholders restore1":{"type":"method","name":"restore1","children":[],"call":[" warn ","@ph_chars [] ","@ph_usage [] < ","@ph_usage [] ","context to_s != ","context to_s ","context nil? ","@ph_chars [] sub ","i nil? ","@char_phs index ","ph ord ","context n@char_phs index l? ","@char_phs index  n@char_phs index l? ","@char_phs @char_phs index ndex "]}," RedmineReformat Converters Placeholders build_match_context_match":{"type":"method","name":"build_match_context_match","children":[],"call":[]}," RedmineReformat Converters Placeholders with_breakers":{"type":"method","name":"with_breakers","children":[],"call":[" raise "]}," RedmineReformat Converters Placeholders to_capturestr":{"type":"method","name":"to_capturestr","children":[],"call":[]}," RedmineReformat Converters Placeholders remove_breakers":{"type":"method","name":"remove_breakers","children":[],"call":[" ph_for "," restore1 ","$~ [] ","text gsub! "]}," RedmineReformat Converters Placeholders restore":{"type":"method","name":"restore","children":[],"call":[" block_given? "," restore1 "," warn ","phatend ! ","phatstart ! ","pre empty? ","$~ [] ","ph gsub "]}," RedmineReformat Converters Placeholders match_context_static_match":{"type":"method","name":"match_context_static_match","children":[],"call":[]}," RedmineReformat Converters Placeholders match_context_match":{"type":"method","name":"match_context_match","children":[],"call":[" class build_match_context_match "," class ","(send\n  (send\n    (send\n      (send\n        (lvar :phs) :uniq) :sort_by\n      (block-pass\n        (sym :length))) :reverse) :map) join ","Regexp  quote ","phs uniq sort_by reverse map ","phs uniq sort_by reverse ","phs uniq sort_by ","phs uniq ","phs empty? ","phs length ","@match_context_phs [] ","(send\n  (send\n    (send\n      (send\n        (lvar :@match_context_phs [] ) :uniq) :sort_by\n      (block-pass\n        (sym :length))) :reverse) :map) join ","@match_context_phs []  uniq sort_by reverse map ","@match_context_phs []  uniq sort_by reverse ","@match_context_phs []  uniq sort_by ","@match_context_phs []  uniq ","@match_context_phs []  empty? ","@match_context_phs []  length ","@match_context_@match_context_phs []  [] "]}," RedmineReformat Converters Placeholders add_match_context":{"type":"method","name":"add_match_context","children":[],"call":["(send\n  (lvar :contextstr) :sub\n  (regexp\n    (str \"<random>\")\n    (regopt))) sub ","@@match_context_randoms [] ","contextstr sub ","@match_context_phs [] << ","@match_context_phs [] "]}," RedmineReformat Converters Placeholders ph_for_each":{"type":"method","name":"ph_for_each","children":[],"call":[" add_match_context ","match_context == "," with_breakers ","(send\n  (lvar :chars) :map) join "," ph_for ","chars map ","str to_s each_char ","str to_s ","str empty? ","str nil? ","(send\n  (lvar :str to_s each_char ) :map) join ","str to_s each_char  map "]}," RedmineReformat Converters Placeholders ph_for":{"type":"method","name":"ph_for","children":[],"call":[" add_match_context ","match_context == "," with_breakers ","@char_phs [] chr ","@char_phs [] ","@ph_usage [] ","@ph_usage << ","@char_phs << ","@ph_chars << "," raise ","@char_ph_unused > ","UNICODE_1CHAR_PRIV_END  ord ","@occupied_char_placeholders include? ","@ph_chars length ","i nil? ","@ph_chars index ","char to_s "," w@ph_chars length th_breakers "," w@ph_chars index th_breakers ","@char to_s _phs [] chr ","@char to_s _phs [] ","@char to_s _phs << ","@ph_char to_s s << "," ra@ph_chars length se "," ra@ph_chars index se ","@char to_s _ph_unused > ","@occup@ph_chars length ed_char_placeholders @ph_chars length nclude? ","@occup@ph_chars index ed_char_placeholders @ph_chars index nclude? ","@occupied_char to_s _placeholders include? ","@ph_char to_s s length ","@ph_chars length  n@ph_chars length l? ","@ph_chars index  n@ph_chars index l? ","@ph_chars @ph_chars length ndex ","@ph_chars @ph_chars index ndex ","@ph_char to_s s index ","char to_s  to_s "]}," RedmineReformat Converters Placeholders finalize_text":{"type":"method","name":"finalize_text","children":[],"call":[" warn ","text match? ","(send\n  (send\n    (cvar :@@match_context_randoms) :each_value) :map) join ","Regexp  quote ","@@match_context_randoms each_value map ","@@match_context_randoms each_value ","@ph_chars [] ","val zero? ","@ph_usage each_with_index ","m ord ","@occupied_char_placeholders include? ! ","@occupied_char_placeholders include? ","text scan "," restore ","text gsub! "," remove_breakers "]}," RedmineReformat Converters Placeholders prepare_text":{"type":"method","name":"prepare_text","children":[],"call":[" ph_for ","text gsub! "]}," RedmineReformat Converters Placeholders initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new ","UNICODE_1CHAR_PRIV_START  ord ","Set  new ","c ord ","text scan collect ","text scan "]}," MarkdownToCommonmark Converter superscript_esc_trailer":{"type":"method","name":"superscript_esc_trailer","children":[],"call":[]}," MarkdownToCommonmark Converter superscript_process_body":{"type":"method","name":"superscript_process_body","children":[],"call":["e editcount positive? ","e editcount ","e apply ","e insert ","m begin ","Regexp  last_match ","textsrc scan ","e source ","node type == ","node type ","e document walk ","e document ","GfmEditor  new "," outplace_superscript ","text include? ","GfmEditor  new  GfmEditor  new ditcount positivGfmEditor  new ? ","GfmEditor  new  GfmEditor  new ditcount ","GfmEditor  new  apply ","GfmEditor  new  insGfmEditor  new rt ","Regexp  last_match  begin ","m bGfmEditor  new gin ","Regexp  last_Regexp  last_match atch ","RGfmEditor  new gGfmEditor  new xp  last_match ","tGfmEditor  new xtsrc scan "," outplace_superscript src scan ","GfmEditor  new  sourcGfmEditor  new  ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","e docuRegexp  last_match ent walk ","GfmEditor  new  documGfmEditor  new nt walk ","e docuRegexp  last_match ent ","GfmEditor  new  documGfmEditor  new nt ","GfRegexp  last_match Editor  new ","GfmEditor  nGfmEditor  new w "," outplacGfmEditor  new _supGfmEditor  new rscript ","tGfmEditor  new xt includGfmEditor  new ? "," outplace_superscript  include? "]}," MarkdownToCommonmark Converter outplace_superscript":{"type":"method","name":"outplace_superscript","children":[],"call":["e apply "," outplace_superscript ","e replace "," superscript_process_body ","bm end ","bm begin "," superscript_esc_trailer ","bm [] ","sup_evalctx min + ","sup_evalctx min ","text [] match ","text [] ","sup_evalctx min < ","parentctx max ","textctx min + ","m begin ","textctx min ","Regexp  last_match ","textsrc scan ","e source ","e source_range ","e inner_sourcepos ","node parent ","node type == ","node type ","e document walk ","e document ","GfmEditor  new ","GfmEditor  new  apply "," outplacGfmEditor  new _supGfmEditor  new rscript ","GfmEditor  new  rGfmEditor  new placGfmEditor  new  "," supGfmEditor  new rscript_procGfmEditor  new ss_body ","bRegexp  last_match  end ","bm GfmEditor  new nd ","bRegexp  last_match  begin ","bm bGfmEditor  new gin "," superscript_esc_ superscript_esc_trailer  "," supGfmEditor  new rscript_GfmEditor  new sc_trailGfmEditor  new r ","bRegexp  last_match  [] ","sup_evalctx Regexp  last_match in + ","sup_GfmEditor  new valctx min + ","sup_evalctx Regexp  last_match in ","sup_GfmEditor  new valctx min ","text [] Regexp  last_match atch ","tGfmEditor  new xt [] match ","tGfmEditor  new xt [] ","sup_evalctx Regexp  last_match in < ","sup_GfmEditor  new valctx min < ","parentctx Regexp  last_match ax ","e source_range  max ","parGfmEditor  new ntctx max ","textctx Regexp  last_match in + ","tGfmEditor  new xtctx min + ","Regexp  last_match  begin ","m bGfmEditor  new gin ","textctx Regexp  last_match in ","tGfmEditor  new xtctx min ","Regexp  last_Regexp  last_match atch ","RGfmEditor  new gGfmEditor  new xp  last_match ","tGfmEditor  new xtsrc scan ","GfmEditor  new  sourcGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new _rangGfmEditor  new  ","GfmEditor  new  innGfmEditor  new r_sourcGfmEditor  new pos ","nodGfmEditor  new  parGfmEditor  new nt ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","e docuRegexp  last_match ent walk ","GfmEditor  new  documGfmEditor  new nt walk ","e docuRegexp  last_match ent ","GfmEditor  new  documGfmEditor  new nt ","GfRegexp  last_match Editor  new ","GfmEditor  nGfmEditor  new w "]}," MarkdownToCommonmark Converter replace":{"type":"method","name":"replace","children":[],"call":["e apply ","e replace ","m end ","m begin ","m [] == ","m [] ","e source ","node type == ","node type ","opts [] ","e insert ","m [] include? ","e line ","lineno + ","e line? ","spos start_line ","e sourcepos ","e document walk ","e document ","GfmEditor  new ","GfmEditor  new  apply ","GfmEditor  new  rGfmEditor  new placGfmEditor  new  ","m GfmEditor  new nd ","m bGfmEditor  new gin ","GfmEditor  new  sourcGfmEditor  new  ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","GfmEditor  new  insGfmEditor  new rt ","m [] includGfmEditor  new ? ","GfmEditor  new  linGfmEditor  new  ","linGfmEditor  new no + ","GfmEditor  new  linGfmEditor  new ? ","e sourcepos  start_line ","spos start_linGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new pos ","GfmEditor  new  documGfmEditor  new nt walk ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," MarkdownToCommonmark Converter convert":{"type":"method","name":"convert","children":[],"call":[" restore_macros "," raise ","STDERR  print ","msg << ","- * ","e class ","e message ","String  new "," replace ","@replaces values any? ","@replaces values "," outplace_superscript "," nodelog "," extract_macros ","text dup ","ctx ref ","text empty? "," restore_ extract_macros  ","String  new  << "," extract_ extract_macros  "]}," MarkdownToCommonmark Converter nodelog":{"type":"method","name":"nodelog","children":[],"call":[" nodelog_f syswrite "," nodelog_f ","(begin\n  (send\n    (lvar :node) :type)) gsub gsub ","(begin\n  (send\n    (lvar :node) :type)) gsub ","node type ","m [] ","e source ","e document walk ","e document ","GfmEditor  new "," nodGfmEditor  new log_f syswritGfmEditor  new  "," nodGfmEditor  new log_f ","(bGfmEditor  new gin\n  (sGfmEditor  new nd\n    (lvar :nodGfmEditor  new ) :typGfmEditor  new )) gsub gsub ","(bGfmEditor  new gin\n  (sGfmEditor  new nd\n    (lvar :nodGfmEditor  new ) :typGfmEditor  new )) gsub ","nodGfmEditor  new  typGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new  ","GfmEditor  new  documGfmEditor  new nt walk ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," MarkdownToCommonmark Converter initialize":{"type":"method","name":"initialize","children":[],"call":["@nodelog_f sync= ","File  open ","opts fetch ","File  open  sync= "]}," RedmineReformat Converters Macros restore_macros":{"type":"method","name":"restore_macros","children":[],"call":["macros delete ","2 to_i ","text gsub! "]}," RedmineReformat Converters Macros extract_macros":{"type":"method","name":"extract_macros","children":[],"call":["macros []= ","(str \"collapse\") include? ","macros size ","4 downcase ","text gsub! "]}," Log Converter convert":{"type":"method","name":"convert","children":[],"call":["STDOUT  puts ","text scan join ","text scan ","text [] ","text =~ ","reference =~ ","ctx ref "]}," Log Converter initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (send\n    (lvar :opts) :[]\n    (sym :print))\n  (str \"none\")) to_sym ","opts [] ","Regexp  new "]}," LinkRewriter Converter convert":{"type":"method","name":"convert","children":[],"call":["text gsub! ","rewrite fetch ","prj wiki start_page ","prj wiki ","Project  find ","meta [] ","rewrite key? ","link_project nil? ","meta [] blank? ","rewrite [] ","link sub! ","@wiki_link_rewrites fetch ","meta [] == ","wiki_links [] ","$~ [] ","metadata [] ","helper textilizable "," with_application_helper ","text gsub ","Utils  markup_char_re ","Setting  text_formatting ","@wiki_link_rewrites fetch  fetch ","wiki_links []  [] ","@wiki_link_rewrites fetch  key? ","rewrite []  nil? ","meta []  nil? ","wiki_links []  [] blank? ","@wiki_link_rewrites fetch  [] ","@wiki_link_@wiki_link_rewrites fetch s fetch ","wiki_links []  [] == ","metadata []  [] ","wiki_links [] data [] ","Setting  text_Setting  text_formatting  "]}," LinkRewriter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["SecureRandom  hex ","Hash  [] ","Utils  to_i_or_s ","wiki_link_rewrites map "]}," Converters GfmEditor parse_lines":{"type":"method","name":"parse_lines","children":[],"call":["line length ","@offsets []= ","@lines []= ","text each_line with_index ","text each_line "]}," Converters GfmEditor sourcepos_softbreak":{"type":"method","name":"sourcepos_softbreak","children":[],"call":[" to_sourcepos ","nodepos []= "," line bytesize "," line ","nodepos [] ","node sourcepos dup ","node sourcepos ","node sourcepos dup  []= ","node sourcepos dup  [] "]}," Converters GfmEditor sourcepos_code":{"type":"method","name":"sourcepos_code","children":[],"call":[" raise ","delim1 == ","m [] ","m [] length - ","m [] length ","spos end_column "," source ","delimpos2 start_column= ","delimpos2 start_column ","spos end_line > ","spos start_line ","spos end_line ","delimpos2 end_column= "," line_length ","delimpos2 end_line ","delimpos2 startpos= ","delimpos2 endpos ","spos start_column ","delimpos1 start_column= ","delimpos1 endpos= ","delimpos1 startpos ","spos dup "," to_sourcepos ","p > ","nodepos values all? ","nodepos values ","nodepos [] ","node sourcepos dup ","node sourcepos ","m []  == "," to_sourcepos  end_column ","delimpos2 delimpos2 start_column = ","delimpos2 delimpos2 start_column  "," to_sourcepos  end_line > "," to_sourcepos  start_line "," to_sourcepos  end_line ","spos delimpos2 start_column  "," to_sourcepos  start_column ","delimpos1 delimpos2 start_column = "," to_sourcepos  dup ","node sourcepos dup  values all? ","node sourcepos dup  values ","node sourcepos dup  [] "]}," Converters GfmEditor to_sourcepos":{"type":"method","name":"to_sourcepos","children":[],"call":["SourcePos  new "," charpos ","byteposes each with_index map ","byteposes each with_index ","byteposes each ","p > ","byteposes flatten all? ","byteposes flatten ","nodepos [] ","node sourcepos ","node is_a? ","node sourcepos  [] "]}," Converters GfmEditor charpos":{"type":"method","name":"charpos","children":[],"call":["@lines [] byteslice length - ","@lines [] byteslice length ","@lines [] byteslice ","bcolumnno + ","@lines [] "," raise "," line_columnb? "]}," Converters GfmEditor rangecmp":{"type":"method","name":"rangecmp","children":[],"call":[]}," Converters GfmEditor edit":{"type":"method","name":"edit","children":[],"call":["@replacements []= ","replacement dup ","@ranges << "," raise ","RangeError  new ","@ranges insert "," class rangecmp > "," class rangecmp ","@ranges [] "," class "," class rangecmp >= ","@ranges bsearch_index ","range last > ","@text length ","range last ","range first < ","range first ","range last < ","range last + ","range exclude_end? "]}," Converters GfmEditor line_columnb?":{"type":"method","name":"line_columnb?","children":[],"call":["bcolumnno <= ","@lines [] bytesize ","@lines [] ","bcolumnno >= "," line? "]}," Converters GfmEditor inner_sourcepos":{"type":"method","name":"inner_sourcepos","children":[],"call":["SourcePos  new ","sposes [] endpos ","sposes [] ","sposes [] startpos ","sposes all? "," sourcepos ","edgenodes map ","edgenodes all? ","node last_child ","node first_child "]}," Converters GfmEditor sourcepos":{"type":"method","name":"sourcepos","children":[],"call":[" to_sourcepos "," method call "," method ","node type "," respond_to? "]}," Converters GfmEditor editcount":{"type":"method","name":"editcount","children":[],"call":["@ranges length "]}," Converters GfmEditor apply":{"type":"method","name":"apply","children":[],"call":["out << ","@text slice ","@text length ","range last ","@replacements [] ","range first ","@ranges each ","String  new ","@text bytesize + + ","@text bytesize + ","@text bytesize >> ","@text bytesize ","String  new  << "]}," Converters GfmEditor insert":{"type":"method","name":"insert","children":[],"call":[" edit ","@replacements [] << ","@replacements [] ","@replacements key? ","ctxrange first "]}," Converters GfmEditor replace":{"type":"method","name":"replace","children":[],"call":[" edit ","range max + ","ctxrange first ","range max ","range min + ","range min "," raise ","RangeError  new ","range size zero? ","range size ","range instance_of? "]}," Converters GfmEditor line":{"type":"method","name":"line","children":[],"call":[" source "," line_range "]}," Converters GfmEditor line_range":{"type":"method","name":"line_range","children":[],"call":[" index ","@lines [] length ","@lines [] "," raise "," line? "]}," Converters GfmEditor source":{"type":"method","name":"source","children":[],"call":[" block_given? "," raise ","match ! ","range_text match ","@text [] "," source_range "," sourcepos ","@text []  match "]}," Converters GfmEditor source_range":{"type":"method","name":"source_range","children":[],"call":[" raise ","r size zero? ","r size "," index ","sourcepos endpos ","sourcepos startpos "]}," Converters GfmEditor line_column?":{"type":"method","name":"line_column?","children":[],"call":["columnno <= ","@lines [] length ","@lines [] ","columnno >= "," line? "]}," Converters GfmEditor line_length":{"type":"method","name":"line_length","children":[],"call":["@lines [] length ","@lines [] "," raise "," line? "]}," Converters GfmEditor line?":{"type":"method","name":"line?","children":[],"call":["@lines key? "]}," Converters GfmEditor index":{"type":"method","name":"index","children":[],"call":["@offsets [] + - ","@offsets [] + ","@offsets [] "," raise "," line_column? "]}," Converters GfmEditor document":{"type":"method","name":"document","children":[],"call":["CommonMarker Node  parse_document ","@text bytesize ","CommonMarker Config  process_options "]}," Converters GfmEditor initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_lines ","text encode "]}," RedmineReformat Converters ConverterChain create_converter":{"type":"method","name":"create_converter","children":[],"call":[]}," RedmineReformat Converters ConverterChain restore_trailing_nl":{"type":"method","name":"restore_trailing_nl","children":[],"call":["otrail [] ","\r\n * ","converted sub ","otrail [] == ","ctrail [] ","trail count ","text match [] ","text match ","(lvar :original) collect ","ootrail []  [] ","o\r\n *  [] ","otext match []  [] ","ootrail []  [] == ","o\r\n *  [] == ","otext match []  [] == ","cotrail []  [] ","c\r\n *  [] ","ctext match []  [] ","otrail []  count ","\r\n *  count ","text match []  count "]}," RedmineReformat Converters ConverterChain convert_to_crlf":{"type":"method","name":"convert_to_crlf","children":[],"call":["text gsub "]}," RedmineReformat Converters ConverterChain convert":{"type":"method","name":"convert","children":[],"call":[" restore_trailing_nl "," convert_to_crlf ","c convert ","@converters each "]}," RedmineReformat Converters ConverterChain initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "," class create_converter "," class ","normdefs collect ","defs first is_a? ! ","defs first is_a? ","defs first ","normdefs any? "," Array "," Array  collect "," Array  any? "]}," RedmineReformat Converters ConfiguredConverters convert":{"type":"method","name":"convert","children":[],"call":[" raise ","cc convert ","cc matches? ","@configured_converters each "]}," RedmineReformat Converters ConfiguredConverters initialize":{"type":"method","name":"initialize","children":[],"call":["ConfiguredConverter  new ","cfgs collect "]}," RedmineReformat Converters ConfiguredConverter find_project_id":{"type":"method","name":"find_project_id","children":[],"call":["p id "," raise ","p nil? ","Project  find ","Project  find  id ","Project  find  nil? "]}," RedmineReformat Converters ConfiguredConverter convert":{"type":"method","name":"convert","children":[],"call":["@converter_chain convert "," converting? "]}," RedmineReformat Converters ConfiguredConverter converting?":{"type":"method","name":"converting?","children":[],"call":["@converter_chain ! ! ","@converter_chain ! "]}," RedmineReformat Converters ConfiguredConverter matches?":{"type":"method","name":"matches?","children":[],"call":["@to_formatting include? ","ctx to_formatting ","@from_formatting include? ","ctx from_formatting ","@items include? ","ctx item ","@project_ids include? ","ctx project_id "]}," RedmineReformat Converters ConfiguredConverter initialize":{"type":"method","name":"initialize","children":[],"call":["ConverterChain  new ","cfg [] "," Array "," find_project_id "," Array collect "]}," CommonmarkListFormatter Converter normalize_lists":{"type":"method","name":"normalize_lists","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :e) :apply) :each_line) :with_index\n    (int 1)) :map) join ","  * "," raise ","new_spaces negative? ","sp length + ","sp length ","line sub ","indent_diffs [] ","indent_diffs key? ","e apply each_line with_index map ","e apply each_line with_index ","e apply each_line ","e apply "," walk_lists ","e document ","GfmEditor  new ","(sGfmEditor  new nd\n  (sGfmEditor  new nd\n    (sGfmEditor  new nd\n      (sGfmEditor  new nd\n        (lvar :GfmEditor  new ) :apply) :GfmEditor  new ach_linGfmEditor  new ) :with_indGfmEditor  new x\n    (int 1)) :map) join "," raisGfmEditor  new  ","sp length +  negative? ","nGfmEditor  new w_spacGfmEditor  new s nGfmEditor  new gativGfmEditor  new ? ","sp lGfmEditor  new ngth + ","sp lGfmEditor  new ngth ","linGfmEditor  new  sub ","indent_diffs [] s [] ","indGfmEditor  new nt_diffs [] ","indent_diffs [] s key? ","indGfmEditor  new nt_diffs kGfmEditor  new y? ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  with_indGfmEditor  new x map ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  with_indGfmEditor  new x ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  ","GfmEditor  new  apply ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," CommonmarkListFormatter Converter walk_lists":{"type":"method","name":"walk_lists","children":[],"call":[" walk_lists "," process_node ","root each "]}," CommonmarkListFormatter Converter process_node":{"type":"method","name":"process_node","children":[],"call":["new_sp_marker length - ","sp_marker length ","new_sp_marker length ","indent_diffs [] ","mn [] length < ","mn [] length ","mn [] ","indent_diff negative? ","e line ","(send\n  (send\n    (lvar :pos) :start_line) :+\n  (int 1)) upto ","pos end_line ","pos start_line + ","pos start_line ","indent_diff zero? ","indent + + ","indent + ","e replace ","m1 end ","m1 begin ","m1 [] ","m [] length ","m [] ","e source ","Regexp  quote ","SourcePos  new ","pos start_column + - ","pos start_column + ","pos start_column "," line_start_col ","  * "," min ","newmarker length - ","newmarker length ","sp_marker length - ","marker length ","m [] ! ! ","m [] ! ","e sourcepos ","node type == ","node type ","new_sp_m []  length - ","new_m []  length - ","sp_m []  length ","m []  length ","new_sp_m []  length ","new_m []  length ","new_sp_marker length - s [] ","new_sp_marker length -  negative? ","(send\n  (send\n    (lvar :e sourcepos ) :start_line) :+\n  (int 1)) upto ","e sourcepos  end_line ","e sourcepos  start_line + ","e sourcepos  start_line ","new_sp_marker length -  zero? ","e sourcepos  start_column + - ","e sourcepos  start_column + ","e sourcepos  start_column ","m []  length - ","newm []  length - ","newm []  length ","sp_m []  length - ","e sourcee sourcepos  "]}," CommonmarkListFormatter Converter line_start_col":{"type":"method","name":"line_start_col","children":[],"call":["1 + ","m [] length ","m [] ","e line "]}," CommonmarkListFormatter Converter convert":{"type":"method","name":"convert","children":[],"call":[" restore_macros "," raise ","STDERR  print ","msg << ","- * ","e class ","e message ","String  new "," normalize_lists "," extract_macros ","text dup ","ctx ref ","text empty? "," restore_ extract_macros  ","String  new  << "," extract_ extract_macros  "]}," CommonmarkListFormatter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :pad))\n  (str \"none\")) to_sym ","opts [] "]}," RedmineReformat ConvertRedmine convert":{"type":"method","name":"convert","children":[],"call":["@exn converter convert ","@exn converter "]}," RedmineReformat ConvertRedmine migrate_spec":{"type":"method","name":"migrate_spec","children":[],"call":["ctx klass where update_all ","Hash  [] ","ctx klass where ","ctx id ","ctx klass ","updates empty? ! ","updates empty? ","@exn dryrun ! ","@exn dryrun ","(send\n  (lvar :vals) :map) compact ","converted nil? "," convert ","vals map ","ctx to_formatting= ","ctx from_formatting= ","spec pluck_each ","(send\n  (lvar :vals) :map) compact  empty? ! ","(send\n  (lvar :vals) :map) compact  empty? "," convert  nil? "]}," RedmineReformat ConvertRedmine migrate_custom_values":{"type":"method","name":"migrate_custom_values","children":[],"call":[" migrate_spec ","Spec  new ","ctx vals [] ","ctx vals "," lambda ","cf id ","cf name ","(send\n  (send\n    (send\n      (const nil :IssueCustomField) :all) :to_a) :select) each ","cf text_formatting == ","cf text_formatting ","IssueCustomField  all to_a select ","IssueCustomField  all to_a ","IssueCustomField  all ","(send\n  (send\n    (send\n      (const nil :CustomField) :all) :to_a) :select) each ","CustomField  all to_a select ","CustomField  all to_a ","CustomField  all "," migrate_Spec  new  "]}," RedmineReformat ConvertRedmine migrate_wiki_versions":{"type":"method","name":"migrate_wiki_versions","children":[],"call":["@exn progress ","inc == ","finished % ","finished == ","(send\n  (lvar :finished) :%\n  (const nil :BATCHSIZE)) == ","version update_column ","@exn dryrun ","Zlib Deflate  deflate ","version compression == ","version compression "," convert ","version text ","ctx project_id= ","version project id ","version project ","ctx ref= ","version version ","version page title ","version page ","version project identifier ","version id ","scope includes find_each ","scope includes ","STDERR  puts ","@exn mytotal ","@exn total ","@exn scope ","Context  new ","Context  new  project_id= ","Context  new  ref= ","@exn scope  includes find_each ","@exn scope  includes ","@exn @exn mytotal al ","@exn my@exn total al ","@exn @exn total al ","@exn @exn scope  "]}," RedmineReformat ConvertRedmine migrate_objects":{"type":"method","name":"migrate_objects","children":[],"call":[" migrate_spec ","ITEMS_TO_MIGRATE  each "]}," RedmineReformat ConvertRedmine migrate_setting":{"type":"method","name":"migrate_setting","children":[],"call":["Setting  send ","@exn dryrun ! ","@exn dryrun "," convert ","Context  new "]}," RedmineReformat ConvertRedmine migrate_settings":{"type":"method","name":"migrate_settings","children":[],"call":[" migrate_setting ","SETTINGS_TO_MIGRATE  each ","STDERR  puts "]}," RedmineReformat ConvertRedmine do_migrate":{"type":"method","name":"do_migrate","children":[],"call":["@exn tx_wait "," raise ","@exn finish ","Setting  text_formatting= ","@exn dryrun ! ","@exn dryrun ","@exn master? "," migrate_custom_values "," migrate_wiki_versions "," migrate_objects "," migrate_settings ","@exn start ","@exn to_formatting ","Setting  text_formatting "]}," RedmineReformat ConvertRedmine call":{"type":"method","name":"call","children":[],"call":["@exn tx_done "," do_migrate ","Context  with_cached_projects ","Mailer  with_deliveries ","Project  transaction "]}," RedmineReformat Spec pluck_each":{"type":"method","name":"pluck_each","children":[],"call":["scope where pluck ","scope where ","row_count < ","exn progress ","Hash  [] ","@cols zip ","ctx ref << ","ctx ref ","@mkurl call ","Context  new ","(begin\n  (ivar :@item)) +@ ","@ctxcols zip ","r shift ","@ctxcols length ","rows each ","rows last [] ","rows last ","rows size ","rows any? ","scope pluck ","(sym :id) concat concat ","(sym :id) concat ","scope limit ","STDERR  puts ","exn mytotal ","exn total ","exn scope ","(send\n  (ivar :@cols) :map) join ","@cols map ","scope count ","@where each ","scope joins ","scope table_name ","scope limit  where pluck ","exn scope  where pluck ","scope where  where pluck ","scope joins  where pluck ","scope limit  where ","exn scope  where ","scope where  where ","scope joins  where ","rows size  < ","Context  new  ref << ","Context  new  ref ","@mk@mkurl call  call ","@mkurl cscope count  ","@Context  new cols zip ","@Context  new cols length ","scope where pluck  each ","scope pluck  each ","scope where pluck  last [] ","scope pluck  last [] ","scope where pluck  last ","scope pluck  last ","scope where pluck  size ","scope pluck  size ","scope where pluck  any? ","scope pluck  any? ","scope limit  pluck ","exn scope  pluck ","scope where  pluck ","scope joins  pluck ","(sym :r shift ) concat concat ","(sym :r shift ) concat ","scope limit  limit ","exn scope  limit ","scope where  limit ","scope joins  limit ","exn exn mytotal al ","exn myexn total al ","exn exn total al ","exn scope limit  ","exn exn scope  ","exn scope where  ","exn scope joins  ","scope limit  count ","exn scope  count ","scope where  count ","scope joins  count ","scope limit  joins ","exn scope  joins ","scope where  joins ","scope joins  joins ","scope limit  table_name ","exn scope  table_name ","scope where  table_name ","scope joins  table_name "]}," RedmineReformat Spec initialize":{"type":"method","name":"initialize","children":[],"call":[" lambda ","args [] "," Array ","[ + + ","[ + ","klass name "]}," RedmineReformat Context with_cached_projects":{"type":"method","name":"with_cached_projects","children":[],"call":[]}," RedmineReformat Context to_s":{"type":"method","name":"to_s","children":[],"call":[" ref "]}," RedmineReformat Context ref":{"type":"method","name":"ref","children":[],"call":[" id "]}," RedmineReformat Context project":{"type":"method","name":"project","children":[],"call":["Project  find ","@@project_cache [] ","@project_id zero? ","@project_id nil? "]}," RedmineReformat Context initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","kwargs each "]}," RedmineReformat Progress server":{"type":"method","name":"server","children":[],"call":[" raise ","ipc send "," items_completion "," progress "," start ","ipc recv "]}," RedmineReformat Progress item_jobs_complete?":{"type":"method","name":"item_jobs_complete?","children":[],"call":["c == "," items_completion "]}," RedmineReformat Progress items_completion":{"type":"method","name":"items_completion","children":[],"call":["@progress [] == ","@subtotals [] ","@progress [] ","@subtotals each "]}," RedmineReformat Progress item_jobs_started?":{"type":"method","name":"item_jobs_started?","children":[],"call":["@subtotals == "]}," RedmineReformat Progress complete?":{"type":"method","name":"complete?","children":[],"call":[" item_jobs_complete? "," item_jobs_started? "]}," RedmineReformat Progress report":{"type":"method","name":"report","children":[],"call":["STDERR  puts ","@totals [] ","@progress [] "]}," RedmineReformat Progress reporting?":{"type":"method","name":"reporting?","children":[],"call":[]}," RedmineReformat Progress finish":{"type":"method","name":"finish","children":[],"call":["STDERR  puts "]}," RedmineReformat Progress progress":{"type":"method","name":"progress","children":[],"call":[" report ","(send\n  (lvar :newn) :/\n  (const nil :PERIOD)) > ","oldn / ","newn / ","newn == ","@totals [] ","increment > "," reporting? "," raise ","newn > ","@subtotals [] ","@progress []= ","oldn + ","@progress [] ","(send\n  (lvar :@progress []= ) :/\n  (const nil :PERIOD)) > ","@progress []  / ","@progress []=  / ","@progress []=  == ","@progress []=  > ","@progress []  + "]}," RedmineReformat Progress start":{"type":"method","name":"start","children":[],"call":[" raise ","@subtotals [] > ","@subtotals [] ","@totals []= ","@totals [] nil? ","@totals [] ","@totals [] != "]}," RedmineReformat Progress total":{"type":"method","name":"total","children":[],"call":["@totals [] "]}," RedmineReformat Progress subtotal":{"type":"method","name":"subtotal","children":[],"call":["@subtotals [] "]}," RedmineReformat Progress initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," MarkdownTableFormatter TableFormatter to_md":{"type":"method","name":"to_md","children":[],"call":["row join lstrip ","row join "," pad "," column_width ","row map! with_index ","row map! ","t each_with_index ","t insert "," header_separator_row "," table clone "," table ","row join ls table clone rip "," column_wid table clone h ","row map! wi table clone h_index "," table clone  each_wi table clone h_index "," table clone  inser table clone  "," header_separa table clone or_row ","  table clone able clone ","  table clone able "]}," MarkdownTableFormatter TableFormatter header_separator_row":{"type":"method","name":"header_separator_row","children":[],"call":["output push "," separator "," column_width ","(splat\n  (erange\n    (int 0)\n    (send\n      (send\n        (send nil :table) :first) :length))) each "," table first length "," table first "," table "]}," MarkdownTableFormatter TableFormatter separator":{"type":"method","name":"separator","children":[],"call":[" ljust "]}," MarkdownTableFormatter TableFormatter pad":{"type":"method","name":"pad","children":[],"call":["string strip ljust ","string strip "]}," MarkdownTableFormatter TableFormatter column_width":{"type":"method","name":"column_width","children":[],"call":["length > ","row [] strip length ","row [] strip ","row [] "," table each "," table ","row [] strip length  > ","row [] strip row [] strip length  "]}," MarkdownTableFormatter TableFormatter table":{"type":"method","name":"table","children":[],"call":[" parse "]}," MarkdownTableFormatter TableFormatter parse":{"type":"method","name":"parse","children":[],"call":["@table delete_at ","@table push ","cell strip! ","row_array each ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\\\\\|]|\\\\\\\\.)*)([|]|\\\\z)\")\n      (regopt :m))) :collect) compact ","sep empty? ","cell empty? ","row scan collect ","row scan ","rows each ","@doc split ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\|]|\\\\.)*)([|]|\\z)\")\n      (regopt :m))) :collect) compact  each ","@doc split  each "]}," MarkdownTableFormatter TableFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineReformat Helpers ApplicationHelperPatch InstanceMethods dummy_replace_toc":{"type":"method","name":"dummy_replace_toc","children":[],"call":[]}," RedmineReformat Helpers ApplicationHelperPatch InstanceMethods reformat_inject_macros":{"type":"method","name":"reformat_inject_macros","children":[],"call":[" h "," raise "," reformat_opts [] "," reformat_opts "," reformat_enc_macro "," exec_macro ","exec_macro_args << ","options empty? ","options nil? ","macro == ","esc nil? ","7 try ","6 to_s ","4 downcase ","orig =~ ","macros delete ","2 to_i ","text gsub! ","macros delete  =~ "]}," RedmineReformat Helpers ApplicationHelperPatch InstanceMethods reformat_parse_wiki_links":{"type":"method","name":"reformat_parse_wiki_links","children":[],"call":["wiki_link []= ","link_project wiki find_page ","link_project wiki ","link_project identifier ","link_project id ","page =~ ","Project  find_by_name ","Project  find_by_identifier ","wiki_links []= ","project identifier ","project id ","wiki_links [] ","m [] ","m pre_match + ","m post_match ","m pre_match ","page match ","CGI  unescapeHTML ","text scan "," reformat_metadata [] "," reformat_metadata ","h []= ","Hash  new ","mark_re nil? "," reformat_opts [] "," reformat_opts ","wiki_links []  []= ","link_project wiki find_m pre_match +  ","link_project wiki find_CGI  unescapeHTML  ","m pre_match +  =~ ","CGI  unescapeHTML  =~ ","wiki_links [] s []= "," reformat_metadata []  []= ","wiki_links [] s [] "," reformat_metadata []  [] ","m pre_match +  match ","CGI  unescapeHTML  match "," reformat_opts []  nil? "]}," RedmineReformat Helpers ApplicationHelperPatch InstanceMethods reformat_parse_redmine_links":{"type":"method","name":"reformat_parse_redmine_links","children":[],"call":["sep == ","identifier == ","oid to_s == ","oid to_s ","identifier to_i ","prefix nil? ","esc nil? ","$~ [] ","text gsub! ","identifier to_i  to_s == ","identifier to_i  to_s ","$~ []  nil? "]}," RedmineReformat Helpers ApplicationHelperPatch included":{"type":"method","name":"included","children":[{"type":"method","name":"reformat_ctx=","children":[],"asgn":[null,null],"call":["ctx project "]},{"type":"method","name":"reformat_enc_macro","children":[],"asgn":[{"type":"local","name":"wcl","value":" reformat_code_wrap "},[" reformat_code_wrap "],{"type":"local","name":"wbody","value":" reformat_code_wrap "},[" reformat_code_wrap "],{"type":"local","name":"wop","value":" reformat_code_wrap "},[" reformat_code_wrap "],null,null,null],"call":[" reformat_code_wrap "," reformat_code_wrap "," reformat_enc_macro_body "," reformat_code_wrap ","$~ [] ","full_macro sub "]},{"type":"method","name":"reformat_enc_macro_body","children":[],"asgn":[],"call":["(send\n  (send\n    (lvar :c) :codepoints) :map) join "," sprintf ","c codepoints map ","c codepoints ","text to_json gsub ","text to_json "]},{"type":"method","name":"reformat_code_wrap","children":[],"asgn":[],"call":[" h "]}],"call":[]}," RedmineReformat Helpers ReformatApplicationHelper initialize":{"type":"method","name":"initialize","children":[],"call":["ApplicationHelper  send ","ApplicationHelper  included_modules include? ","ApplicationHelper  included_modules ","User  current= "]}," RedmineReformat Converters Ws Converter convert":{"type":"method","name":"convert","children":[],"call":["res body "," raise ","res msg ","res code ","res code == ","@http request ","req body= ","req []= ","@request_class new ","ctx ref ","@http request  body ","@http request  msg ","@http request  code ","@http request  code == ","@http @request_class new uest ","@request_class new  body= ","@request_class new  []= ","@@request_class new uest_class new "]}," RedmineReformat Converters Ws Converter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","opts fetch to_sym ","opts fetch ","Net HTTP Persistent  new ","url to_s "," URI "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_after_table_reformat_placeholders":{"type":"method","name":"restore_after_table_reformat_placeholders","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_reformat_tables":{"type":"method","name":"md_reformat_tables","children":[],"call":["STDERR  puts ","MarkdownTableFormatter TableFormatter  new to_md ","MarkdownTableFormatter TableFormatter  new ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing remove_init_breakers":{"type":"method","name":"remove_init_breakers","children":[],"call":["@ph remove_breakers "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_replace_underline":{"type":"method","name":"md_replace_underline","children":[],"call":["text gsub! ","@format_opts [] "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing smooth_fenced_code_blocks":{"type":"method","name":"smooth_fenced_code_blocks","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing normalize_and_rip_fenced_code_blocks":{"type":"method","name":"normalize_and_rip_fenced_code_blocks","children":[],"call":["indent1 empty? ","@ph ph_for ","$~ [] ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing smooth_macros":{"type":"method","name":"smooth_macros","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_aftercode_placeholders":{"type":"method","name":"restore_aftercode_placeholders","children":[],"call":["@ph restore ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_polish_before_code_restore":{"type":"method","name":"md_polish_before_code_restore","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_separate_lists":{"type":"method","name":"md_separate_lists","children":[],"call":["text gsub! ","@format_opts [] "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_footnotes":{"type":"method","name":"md_footnotes","children":[],"call":["@referenced_footnotes include? ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_qtag_chars_to_md":{"type":"method","name":"restore_qtag_chars_to_md","children":[],"call":["@ph restore ","$~ [] ","text gsub! ","@$~ []  restore "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_context_free_placeholders":{"type":"method","name":"restore_context_free_placeholders","children":[],"call":["@ph restore ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing md_remove_auxiliary_code_block_lang":{"type":"method","name":"md_remove_auxiliary_code_block_lang","children":[],"call":["text gsub! ","  + "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_protected_line_breaks":{"type":"method","name":"restore_protected_line_breaks","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing expand_blockqutes":{"type":"method","name":"expand_blockqutes","children":[],"call":["qlevel zero? ","tagend nil? ","> * ","empty_line ! ","qlevel > ","regline == ","tag nil? ","text gsub! ","regline ==  ! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_eq_sequences":{"type":"method","name":"protect_eq_sequences","children":[],"call":["@ph ph_for_each ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing prefer_inline_code_over_html":{"type":"method","name":"prefer_inline_code_over_html","children":[],"call":["@ph ph_for ","code gsub! ","@pre_list [] gsub! ","@pre_list [] "," protect_qtag_chars "," restore_aftercode_placeholders ","code include? ","code match? ","code empty? ","@ph match_context_match ","htmlcoder decode ","code strip ","@pre_list []= ","codeparam == ","@pre_list [] sub ","1 to_i ","text gsub! ","HTMLEntities  new ","htmlcoder decode  gsub! ","@pre_list [] sub  gsub! "," restore_afterhtmlcoder decode _placeholders "," restore_after@pre_list [] sub _placeholders ","htmlcoder decode  include? ","@pre_list [] sub  include? ","htmlcoder decode  match? ","@pre_list [] sub  match? ","htmlcoder decode  empty? ","@pre_list [] sub  empty? ","htmlhtmlcoder decode r dehtmlcoder decode  ","html@pre_list [] sub r de@pre_list [] sub  ","HTMLEntities  new  decode ","htmlcoder decode  strip ","@pre_list [] sub  strip ","htmlcoder decode param == ","@pre_list [] sub param == "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_symbols":{"type":"method","name":"protect_symbols","children":[],"call":["@ph ph_for ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing put_blank_line_before_pre_in_list":{"type":"method","name":"put_blank_line_before_pre_in_list","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_hashes":{"type":"method","name":"protect_hashes","children":[],"call":["@ph ph_for ","textile gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing put_breaks_before_html_entities":{"type":"method","name":"put_breaks_before_html_entities","children":[],"call":["@ph ph_for ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_autolinks":{"type":"method","name":"protect_autolinks","children":[],"call":["@ph ph_for ","htmlcoder encode ","postesc sub! ","url gsub ","leading =~ ","text gsub! ","HTMLEntities  new ","HTMLEntities  new  encode "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_textile_hrs":{"type":"method","name":"restore_textile_hrs","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_textile_lists":{"type":"method","name":"restore_textile_lists","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing textile_footnote_refs":{"type":"method","name":"textile_footnote_refs","children":[],"call":["@ph ph_for ","@ph ph_for_each ","@defined_footnotes include? ","@referenced_footnotes << ","$~ [] ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing restore_real_qtags":{"type":"method","name":"restore_real_qtags","children":[],"call":["@ph restore ","text gsub! ","@ph match_context_match "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_qtag_chars":{"type":"method","name":"protect_qtag_chars","children":[],"call":["@ph ph_for ","qms gsub ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing inline_textile_span_to_phs":{"type":"method","name":"inline_textile_span_to_phs","children":[],"call":["@ph ph_for ","1 empty? ","content match ","ht nil? ","content gsub! ","content =~ ","content sub! ","oqs << ","$~ [] ","text gsub! ","QTAGS  each "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing process_textile_prefix_blocks":{"type":"method","name":"process_textile_prefix_blocks","children":[],"call":["text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join ","blk replace ","@defined_footnotes << ","@ph add_match_context ","tagpre == ","(str \"h\") include? ","@ph ph_for ","(str \"bc\") include? ","$~ [] ","blk =~ ","blk strip! ","text split collect ","text split "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing guess_table_headers":{"type":"method","name":"guess_table_headers","children":[],"call":["heading gsub! ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_pipes_in_tables":{"type":"method","name":"protect_pipes_in_tables","children":[],"call":["@ph ph_for ","@pre_list [] gsub! ","@pre_list [] ","1 to_i ","offtext scan ","@pre_list empty? ","content gsub! ","$~ [] ","row gsub! ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing block_textile_table":{"type":"method","name":"block_textile_table","children":[],"call":["text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join ","rows join ","rows << ","cells join ","cells << ","cell gsub! ","modifiers =~ ","row scan ","row =~ ","fullrow each_line ","fullrow gsub! ","$~ [] ","blk gsub ","blk strip! ","text split collect ","text split "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing normalize_lists_to_phs":{"type":"method","name":"normalize_lists_to_phs","children":[],"call":["@ph ph_for_each ","2 * ","1 length ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_wiki_links":{"type":"method","name":"protect_wiki_links","children":[],"call":["res << ","(send\n  (send\n    (lvar :parenth_after) :each_char) :map) join ","@ph ph_for ","parenth_after each_char map ","parenth_after each_char ","(send\n  (send\n    (str \"]]\") :each_char) :map) join ","]] each_char map ","]] each_char ","(send\n  (send\n    (str \"[[\") :each_char) :map) join ","[[ each_char map ","[[ each_char ","String  new ","(send\n  (send\n    (str \"\\\\|\") :each_char) :map) join ","\\| each_char map ","\\| each_char ","link_body gsub! "," protect_qtag_chars ","@format_opts [] ! ","@format_opts [] ","(begin\n  (lvar :wiki_link)) gsub ","$~ [] ","text gsub! ","text replace ","(send\n  (send\n    (lvar :text) :split\n    (const nil :BLOCKS_GROUP_RE)) :collect) join "," protect_wiki_links ","blk gsub ","blk strip! ","text split collect ","text split ","in_table nil? ","String  new  << "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing inline_textile_code":{"type":"method","name":"inline_textile_code","children":[],"call":["@ph ph_for ","text gsub! ","@pre_list length - ","@pre_list length ","@pre_list << ","code empty? ","code strip! ","code match "," revert_hard_break ","m =~ ","HTMLEntities  new "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing inline_textile_link":{"type":"method","name":"inline_textile_link","children":[],"call":["m gsub "," protect_qtag_chars "," inline_textile_span_to_phs ","@ph ph_for ","url gsub! ","pre sub! ",") + ","url [] ","(send\n  (send\n    (lvar :url) :count\n    (str \"(\")) :-\n  (send\n    (lvar :url) :count\n    (str \")\"))) < ","url count - ","url count ","url [] == ","$~ [] ","m =~ ","purl include? ! ","purl include? ","ptext include? ! ","ptext include? ","text gsub! ","url []  gsub! ","url []  [] ","(send\n  (send\n    (lvar :url [] ) :count\n    (str \"(\")) :-\n  (send\n    (lvar :url [] ) :count\n    (str \")\"))) < ","url []  count - ","url []  count ","url []  [] == ","purl []  include? ! ","purl []  include? "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing revert_hard_break":{"type":"method","name":"revert_hard_break","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing hard_break":{"type":"method","name":"hard_break","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing process_indented_blocks":{"type":"method","name":"process_indented_blocks","children":[],"call":["@pre_list length - ","@pre_list length ","@pre_list << ","prefix == ","code_block match? ","(send\n  (send\n    (nth-ref 3) :split\n    (str \"\\n\")) :map) join ","line =~ ","line sub! ","3 split map ","3 split ","2 length ","text gsub! ","(send\n  (send\n    (nth-ref 3) :split\n    (str \"\\n\")) :map) join  match? "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing glue_indented_continuations":{"type":"method","name":"glue_indented_continuations","children":[],"call":["textile << ","last_blank_line empty? ","rest empty? ","line sub! ","line =~ ","last_blank_line empty? ! ","rest =~ ","5 nil? ! ","5 nil? ","2 nil? ! ","2 nil? ","textile gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing normalize_hr_to_phs":{"type":"method","name":"normalize_hr_to_phs","children":[],"call":["@ph ph_for_each ","$~ [] ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing block_textile_quotes":{"type":"method","name":"block_textile_quotes","children":[],"call":["quotes << ","\n + + ","\n + ","</blockquote> * ","content + ","\n\n + + ","\n\n + ","indent - ","<blockquote> * ","l - ","l > ","l != ","bq count ","line =~ ","lines each ","String  new ","match split ","text gsub! ","String  new  << ","</bbq count ockquote> * ","<bbq count ockquote> * ","bq count  - ","bq count  > ","bq count  != ","bq count ine =~ ","bq count ines each ","match split  each ","match spbq count it "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing escape_html_tags":{"type":"method","name":"escape_html_tags","children":[],"call":["3 nil? ","ALLOWED_TAGS  include? ","text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing no_textile":{"type":"method","name":"no_textile","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing smooth_offtags":{"type":"method","name":"smooth_offtags","children":[],"call":["@pre_list []= ","@pre_list [] ","1 to_i ","text gsub! ","@pre_list empty? ","@pre_l1 to_i st []= ","@pre_l1 to_i st [] ","1 to_1 to_i  ","@pre_l1 to_i st empty? "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing protect_offtag_contents":{"type":"method","name":"protect_offtag_contents","children":[],"call":["@ph ph_for ","code gsub ","@pre_list map! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing merge_pre_code_offtags":{"type":"method","name":"merge_pre_code_offtags","children":[],"call":["md [] ","out sub! ","@pre_list [] "," smooth_offtags ","String  new ","(begin\n  (send\n    (lvar :md) :[]\n    (sym :codeopen))) dup ","@pre_list []= ","md [] to_i ","@pre_list [] sub ","raw_code ! ","@pre_list [] =~ ","md [] nil? ","text gsub! ","String  new  sub! ","md []  sub! ","@pre_list [] =~  ! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing unindent_pre_offtag":{"type":"method","name":"unindent_pre_offtag","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing rip_offtags":{"type":"method","name":"rip_offtags","children":[],"call":["codepre zero? ","@pre_list []= ","@pre_list last + ","@pre_list last "," htmlesc ","codepre - > ","codepre - ","used_offtags length ","codepre > ","@pre_list << ","tag << ","tag == ","2 to_s match ","2 to_s ","first match ","@pre_list length ","first match ! ","used_offtags []= ","text gsub! ","text =~ "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing htmlesc":{"type":"method","name":"htmlesc","children":[],"call":["str gsub! ","mode == ","mode != "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing rip_macros":{"type":"method","name":"rip_macros","children":[],"call":["@ph ph_for "," smooth_offtags ","textile gsub! ","macro =~ "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing clean_white_space":{"type":"method","name":"clean_white_space","children":[],"call":["text gsub! "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing finalize_reformatter":{"type":"method","name":"finalize_reformatter","children":[],"call":["@ph finalize_text "]}," RedmineReformat Converters TextileToMarkdown PandocPreprocessing initialize_reformatter":{"type":"method","name":"initialize_reformatter","children":[],"call":["@ph prepare_text ","Placeholders  new ","Placeholders  new  prepare_text "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter to_md":{"type":"method","name":"to_md","children":[],"call":["row join lstrip ","row join "," pad "," column_width ","row map! with_index ","row map! ","t each_with_index ","t insert "," header_separator_row "," table clone "," table ","row join ls table clone rip "," column_wid table clone h ","row map! wi table clone h_index "," table clone  each_wi table clone h_index "," table clone  inser table clone  "," header_separa table clone or_row ","  table clone able clone ","  table clone able "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter header_separator_row":{"type":"method","name":"header_separator_row","children":[],"call":["output push "," separator "," column_width ","(splat\n  (erange\n    (int 0)\n    (send\n      (send\n        (send nil :table) :first) :length))) each "," table first length "," table first "," table "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter separator":{"type":"method","name":"separator","children":[],"call":[" ljust "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter pad":{"type":"method","name":"pad","children":[],"call":["string strip ljust ","string strip "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter column_width":{"type":"method","name":"column_width","children":[],"call":["length > ","row [] strip length ","row [] strip ","row [] "," table each "," table ","row [] strip length  > ","row [] strip row [] strip length  "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter table":{"type":"method","name":"table","children":[],"call":[" parse "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter parse":{"type":"method","name":"parse","children":[],"call":["@table delete_at ","@table push ","cell strip! ","row_array each ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\\\\\|]|\\\\\\\\.)*)([|]|\\\\z)\")\n      (regopt :m))) :collect) compact ","sep empty? ","cell empty? ","row scan collect ","row scan ","rows each ","@doc split ","(send\n  (send\n    (lvar :row) :scan\n    (regexp\n      (str \"((?:[^\\\\|]|\\\\.)*)([|]|\\z)\")\n      (regopt :m))) :collect) compact  each ","@doc split  each "]}," RedmineReformat Converters TextileToMarkdown MarkdownTableFormatter TableFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineReformat Converters TextileToMarkdown Conversion exec_pandoc_with_timeout":{"type":"method","name":"exec_pandoc_with_timeout","children":[],"call":[" raise ","STDERR  puts ","PANDOC_RECOVERABLE_EXIT_CODES  include? ","status exitstatus ","status success? ","status exited? ","Process  detach ","Process  kill ","t value ","o read ","(send\n  (lvar :i) :<<\n  (lvar :stdin)) close ","i << ","t pid ","Open3  popen2 ","PANDOC_COMMAND  join ","Timeout  timeout ","t value  exitt value  ","t value  success? ","t value  exited? ","t t pid  "]}," RedmineReformat Converters TextileToMarkdown Conversion post_process_markdown":{"type":"method","name":"post_process_markdown","children":[],"call":[" finalize_reformatter "," expand_blockqutes "," restore_after_table_reformat_placeholders "," smooth_fenced_code_blocks "," md_reformat_tables "," remove_init_breakers "," md_replace_underline "," normalize_and_rip_fenced_code_blocks "," smooth_macros "," restore_aftercode_placeholders "," md_polish_before_code_restore "," md_separate_lists "," md_remove_auxiliary_code_block_lang "," md_footnotes "," restore_qtag_chars_to_md "," restore_context_free_placeholders "," restore_protected_line_breaks "]}," RedmineReformat Converters TextileToMarkdown Conversion pre_process_textile":{"type":"method","name":"pre_process_textile","children":[],"call":[" smooth_offtags "," protect_eq_sequences "," prefer_inline_code_over_html "," protect_symbols "," textile_footnote_refs "," put_blank_line_before_pre_in_list "," protect_hashes "," put_breaks_before_html_entities "," restore_textile_hrs "," restore_textile_lists "," restore_real_qtags "," protect_qtag_chars "," protect_autolinks "," revert_hard_break "," inline_textile_span_to_phs "," hard_break "," process_textile_prefix_blocks "," guess_table_headers "," protect_pipes_in_tables "," normalize_lists_to_phs "," protect_wiki_links "," protect_offtag_contents "," block_textile_table "," inline_textile_code "," inline_textile_link "," process_indented_blocks "," glue_indented_continuations "," normalize_hr_to_phs "," block_textile_quotes "," escape_html_tags "," no_textile "," merge_pre_code_offtags "," unindent_pre_offtag "," rip_macros "," rip_offtags "," initialize_reformatter "," clean_white_space ","is_redcarpet ! ","@ctx to_formatting == ","@ctx to_formatting ","@ctx to_formatting ==  ! "]}," RedmineReformat Converters TextileToMarkdown Conversion call":{"type":"method","name":"call","children":[],"call":[" post_process_markdown "," exec_pandoc_with_timeout "," pre_process_textile ","String  new ","@textile empty? "]}," RedmineReformat Converters TextileToMarkdown Conversion initialize":{"type":"method","name":"initialize","children":[],"call":["ctx ref ","textile dup "]}," RedmineReformat Converters TextileToMarkdown Converter convert":{"type":"method","name":"convert","children":[],"call":["Conversion  new call ","Conversion  new "]}," RedmineReformat Converters RedmineFormatter Converter convert":{"type":"method","name":"convert","children":[],"call":[" raise ","STDERR  puts ","e class ","e message ","helper textilizable ","ctx project "," with_application_helper ","ctx ref "]}," RedmineReformat Converters RedmineFormatter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["@opts []= ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :macros))\n  (str \"keep\")) to_sym ","opts [] "]}," RedmineReformat Converters MarkdownToCommonmark Converter superscript_esc_trailer":{"type":"method","name":"superscript_esc_trailer","children":[],"call":[]}," RedmineReformat Converters MarkdownToCommonmark Converter superscript_process_body":{"type":"method","name":"superscript_process_body","children":[],"call":["e editcount positive? ","e editcount ","e apply ","e insert ","m begin ","Regexp  last_match ","textsrc scan ","e source ","node type == ","node type ","e document walk ","e document ","GfmEditor  new "," outplace_superscript ","text include? ","GfmEditor  new  GfmEditor  new ditcount positivGfmEditor  new ? ","GfmEditor  new  GfmEditor  new ditcount ","GfmEditor  new  apply ","GfmEditor  new  insGfmEditor  new rt ","Regexp  last_match  begin ","m bGfmEditor  new gin ","Regexp  last_Regexp  last_match atch ","RGfmEditor  new gGfmEditor  new xp  last_match ","tGfmEditor  new xtsrc scan "," outplace_superscript src scan ","GfmEditor  new  sourcGfmEditor  new  ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","e docuRegexp  last_match ent walk ","GfmEditor  new  documGfmEditor  new nt walk ","e docuRegexp  last_match ent ","GfmEditor  new  documGfmEditor  new nt ","GfRegexp  last_match Editor  new ","GfmEditor  nGfmEditor  new w "," outplacGfmEditor  new _supGfmEditor  new rscript ","tGfmEditor  new xt includGfmEditor  new ? "," outplace_superscript  include? "]}," RedmineReformat Converters MarkdownToCommonmark Converter outplace_superscript":{"type":"method","name":"outplace_superscript","children":[],"call":["e apply "," outplace_superscript ","e replace "," superscript_process_body ","bm end ","bm begin "," superscript_esc_trailer ","bm [] ","sup_evalctx min + ","sup_evalctx min ","text [] match ","text [] ","sup_evalctx min < ","parentctx max ","textctx min + ","m begin ","textctx min ","Regexp  last_match ","textsrc scan ","e source ","e source_range ","e inner_sourcepos ","node parent ","node type == ","node type ","e document walk ","e document ","GfmEditor  new ","GfmEditor  new  apply "," outplacGfmEditor  new _supGfmEditor  new rscript ","GfmEditor  new  rGfmEditor  new placGfmEditor  new  "," supGfmEditor  new rscript_procGfmEditor  new ss_body ","bRegexp  last_match  end ","bm GfmEditor  new nd ","bRegexp  last_match  begin ","bm bGfmEditor  new gin "," superscript_esc_ superscript_esc_trailer  "," supGfmEditor  new rscript_GfmEditor  new sc_trailGfmEditor  new r ","bRegexp  last_match  [] ","sup_evalctx Regexp  last_match in + ","sup_GfmEditor  new valctx min + ","sup_evalctx Regexp  last_match in ","sup_GfmEditor  new valctx min ","text [] Regexp  last_match atch ","tGfmEditor  new xt [] match ","tGfmEditor  new xt [] ","sup_evalctx Regexp  last_match in < ","sup_GfmEditor  new valctx min < ","parentctx Regexp  last_match ax ","e source_range  max ","parGfmEditor  new ntctx max ","textctx Regexp  last_match in + ","tGfmEditor  new xtctx min + ","Regexp  last_match  begin ","m bGfmEditor  new gin ","textctx Regexp  last_match in ","tGfmEditor  new xtctx min ","Regexp  last_Regexp  last_match atch ","RGfmEditor  new gGfmEditor  new xp  last_match ","tGfmEditor  new xtsrc scan ","GfmEditor  new  sourcGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new _rangGfmEditor  new  ","GfmEditor  new  innGfmEditor  new r_sourcGfmEditor  new pos ","nodGfmEditor  new  parGfmEditor  new nt ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","e docuRegexp  last_match ent walk ","GfmEditor  new  documGfmEditor  new nt walk ","e docuRegexp  last_match ent ","GfmEditor  new  documGfmEditor  new nt ","GfRegexp  last_match Editor  new ","GfmEditor  nGfmEditor  new w "]}," RedmineReformat Converters MarkdownToCommonmark Converter replace":{"type":"method","name":"replace","children":[],"call":["e apply ","e replace ","m end ","m begin ","m [] == ","m [] ","e source ","node type == ","node type ","opts [] ","e insert ","m [] include? ","e line ","lineno + ","e line? ","spos start_line ","e sourcepos ","e document walk ","e document ","GfmEditor  new ","GfmEditor  new  apply ","GfmEditor  new  rGfmEditor  new placGfmEditor  new  ","m GfmEditor  new nd ","m bGfmEditor  new gin ","GfmEditor  new  sourcGfmEditor  new  ","nodGfmEditor  new  typGfmEditor  new  == ","nodGfmEditor  new  typGfmEditor  new  ","GfmEditor  new  insGfmEditor  new rt ","m [] includGfmEditor  new ? ","GfmEditor  new  linGfmEditor  new  ","linGfmEditor  new no + ","GfmEditor  new  linGfmEditor  new ? ","e sourcepos  start_line ","spos start_linGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new pos ","GfmEditor  new  documGfmEditor  new nt walk ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," RedmineReformat Converters MarkdownToCommonmark Converter convert":{"type":"method","name":"convert","children":[],"call":[" restore_macros "," raise ","STDERR  print ","msg << ","- * ","e class ","e message ","String  new "," replace ","@replaces values any? ","@replaces values "," outplace_superscript "," nodelog "," extract_macros ","text dup ","ctx ref ","text empty? "," restore_ extract_macros  ","String  new  << "," extract_ extract_macros  "]}," RedmineReformat Converters MarkdownToCommonmark Converter nodelog":{"type":"method","name":"nodelog","children":[],"call":[" nodelog_f syswrite "," nodelog_f ","(begin\n  (send\n    (lvar :node) :type)) gsub gsub ","(begin\n  (send\n    (lvar :node) :type)) gsub ","node type ","m [] ","e source ","e document walk ","e document ","GfmEditor  new "," nodGfmEditor  new log_f syswritGfmEditor  new  "," nodGfmEditor  new log_f ","(bGfmEditor  new gin\n  (sGfmEditor  new nd\n    (lvar :nodGfmEditor  new ) :typGfmEditor  new )) gsub gsub ","(bGfmEditor  new gin\n  (sGfmEditor  new nd\n    (lvar :nodGfmEditor  new ) :typGfmEditor  new )) gsub ","nodGfmEditor  new  typGfmEditor  new  ","GfmEditor  new  sourcGfmEditor  new  ","GfmEditor  new  documGfmEditor  new nt walk ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," RedmineReformat Converters MarkdownToCommonmark Converter initialize":{"type":"method","name":"initialize","children":[],"call":["@nodelog_f sync= ","File  open ","opts fetch ","File  open  sync= "]}," RedmineReformat Converters Log Converter convert":{"type":"method","name":"convert","children":[],"call":["STDOUT  puts ","text scan join ","text scan ","text [] ","text =~ ","reference =~ ","ctx ref "]}," RedmineReformat Converters Log Converter initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (send\n    (lvar :opts) :[]\n    (sym :print))\n  (str \"none\")) to_sym ","opts [] ","Regexp  new "]}," RedmineReformat Converters LinkRewriter Converter convert":{"type":"method","name":"convert","children":[],"call":["text gsub! ","rewrite fetch ","prj wiki start_page ","prj wiki ","Project  find ","meta [] ","rewrite key? ","link_project nil? ","meta [] blank? ","rewrite [] ","link sub! ","@wiki_link_rewrites fetch ","meta [] == ","wiki_links [] ","$~ [] ","metadata [] ","helper textilizable "," with_application_helper ","text gsub ","Utils  markup_char_re ","Setting  text_formatting ","@wiki_link_rewrites fetch  fetch ","wiki_links []  [] ","@wiki_link_rewrites fetch  key? ","rewrite []  nil? ","meta []  nil? ","wiki_links []  [] blank? ","@wiki_link_rewrites fetch  [] ","@wiki_link_@wiki_link_rewrites fetch s fetch ","wiki_links []  [] == ","metadata []  [] ","wiki_links [] data [] ","Setting  text_Setting  text_formatting  "]}," RedmineReformat Converters LinkRewriter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["SecureRandom  hex ","Hash  [] ","Utils  to_i_or_s ","wiki_link_rewrites map "]}," RedmineReformat Converters GfmEditor parse_lines":{"type":"method","name":"parse_lines","children":[],"call":["line length ","@offsets []= ","@lines []= ","text each_line with_index ","text each_line "]}," RedmineReformat Converters GfmEditor sourcepos_softbreak":{"type":"method","name":"sourcepos_softbreak","children":[],"call":[" to_sourcepos ","nodepos []= "," line bytesize "," line ","nodepos [] ","node sourcepos dup ","node sourcepos ","node sourcepos dup  []= ","node sourcepos dup  [] "]}," RedmineReformat Converters GfmEditor sourcepos_code":{"type":"method","name":"sourcepos_code","children":[],"call":[" raise ","delim1 == ","m [] ","m [] length - ","m [] length ","spos end_column "," source ","delimpos2 start_column= ","delimpos2 start_column ","spos end_line > ","spos start_line ","spos end_line ","delimpos2 end_column= "," line_length ","delimpos2 end_line ","delimpos2 startpos= ","delimpos2 endpos ","spos start_column ","delimpos1 start_column= ","delimpos1 endpos= ","delimpos1 startpos ","spos dup "," to_sourcepos ","p > ","nodepos values all? ","nodepos values ","nodepos [] ","node sourcepos dup ","node sourcepos ","m []  == "," to_sourcepos  end_column ","delimpos2 delimpos2 start_column = ","delimpos2 delimpos2 start_column  "," to_sourcepos  end_line > "," to_sourcepos  start_line "," to_sourcepos  end_line ","spos delimpos2 start_column  "," to_sourcepos  start_column ","delimpos1 delimpos2 start_column = "," to_sourcepos  dup ","node sourcepos dup  values all? ","node sourcepos dup  values ","node sourcepos dup  [] "]}," RedmineReformat Converters GfmEditor to_sourcepos":{"type":"method","name":"to_sourcepos","children":[],"call":["SourcePos  new "," charpos ","byteposes each with_index map ","byteposes each with_index ","byteposes each ","p > ","byteposes flatten all? ","byteposes flatten ","nodepos [] ","node sourcepos ","node is_a? ","node sourcepos  [] "]}," RedmineReformat Converters GfmEditor charpos":{"type":"method","name":"charpos","children":[],"call":["@lines [] byteslice length - ","@lines [] byteslice length ","@lines [] byteslice ","bcolumnno + ","@lines [] "," raise "," line_columnb? "]}," RedmineReformat Converters GfmEditor rangecmp":{"type":"method","name":"rangecmp","children":[],"call":[]}," RedmineReformat Converters GfmEditor edit":{"type":"method","name":"edit","children":[],"call":["@replacements []= ","replacement dup ","@ranges << "," raise ","RangeError  new ","@ranges insert "," class rangecmp > "," class rangecmp ","@ranges [] "," class "," class rangecmp >= ","@ranges bsearch_index ","range last > ","@text length ","range last ","range first < ","range first ","range last < ","range last + ","range exclude_end? "]}," RedmineReformat Converters GfmEditor line_columnb?":{"type":"method","name":"line_columnb?","children":[],"call":["bcolumnno <= ","@lines [] bytesize ","@lines [] ","bcolumnno >= "," line? "]}," RedmineReformat Converters GfmEditor inner_sourcepos":{"type":"method","name":"inner_sourcepos","children":[],"call":["SourcePos  new ","sposes [] endpos ","sposes [] ","sposes [] startpos ","sposes all? "," sourcepos ","edgenodes map ","edgenodes all? ","node last_child ","node first_child "]}," RedmineReformat Converters GfmEditor sourcepos":{"type":"method","name":"sourcepos","children":[],"call":[" to_sourcepos "," method call "," method ","node type "," respond_to? "]}," RedmineReformat Converters GfmEditor editcount":{"type":"method","name":"editcount","children":[],"call":["@ranges length "]}," RedmineReformat Converters GfmEditor apply":{"type":"method","name":"apply","children":[],"call":["out << ","@text slice ","@text length ","range last ","@replacements [] ","range first ","@ranges each ","String  new ","@text bytesize + + ","@text bytesize + ","@text bytesize >> ","@text bytesize ","String  new  << "]}," RedmineReformat Converters GfmEditor insert":{"type":"method","name":"insert","children":[],"call":[" edit ","@replacements [] << ","@replacements [] ","@replacements key? ","ctxrange first "]}," RedmineReformat Converters GfmEditor replace":{"type":"method","name":"replace","children":[],"call":[" edit ","range max + ","ctxrange first ","range max ","range min + ","range min "," raise ","RangeError  new ","range size zero? ","range size ","range instance_of? "]}," RedmineReformat Converters GfmEditor line":{"type":"method","name":"line","children":[],"call":[" source "," line_range "]}," RedmineReformat Converters GfmEditor line_range":{"type":"method","name":"line_range","children":[],"call":[" index ","@lines [] length ","@lines [] "," raise "," line? "]}," RedmineReformat Converters GfmEditor source":{"type":"method","name":"source","children":[],"call":[" block_given? "," raise ","match ! ","range_text match ","@text [] "," source_range "," sourcepos ","@text []  match "]}," RedmineReformat Converters GfmEditor source_range":{"type":"method","name":"source_range","children":[],"call":[" raise ","r size zero? ","r size "," index ","sourcepos endpos ","sourcepos startpos "]}," RedmineReformat Converters GfmEditor line_column?":{"type":"method","name":"line_column?","children":[],"call":["columnno <= ","@lines [] length ","@lines [] ","columnno >= "," line? "]}," RedmineReformat Converters GfmEditor line_length":{"type":"method","name":"line_length","children":[],"call":["@lines [] length ","@lines [] "," raise "," line? "]}," RedmineReformat Converters GfmEditor line?":{"type":"method","name":"line?","children":[],"call":["@lines key? "]}," RedmineReformat Converters GfmEditor index":{"type":"method","name":"index","children":[],"call":["@offsets [] + - ","@offsets [] + ","@offsets [] "," raise "," line_column? "]}," RedmineReformat Converters GfmEditor document":{"type":"method","name":"document","children":[],"call":["CommonMarker Node  parse_document ","@text bytesize ","CommonMarker Config  process_options "]}," RedmineReformat Converters GfmEditor initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_lines ","text encode "]}," RedmineReformat Converters CommonmarkListFormatter Converter normalize_lists":{"type":"method","name":"normalize_lists","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :e) :apply) :each_line) :with_index\n    (int 1)) :map) join ","  * "," raise ","new_spaces negative? ","sp length + ","sp length ","line sub ","indent_diffs [] ","indent_diffs key? ","e apply each_line with_index map ","e apply each_line with_index ","e apply each_line ","e apply "," walk_lists ","e document ","GfmEditor  new ","(sGfmEditor  new nd\n  (sGfmEditor  new nd\n    (sGfmEditor  new nd\n      (sGfmEditor  new nd\n        (lvar :GfmEditor  new ) :apply) :GfmEditor  new ach_linGfmEditor  new ) :with_indGfmEditor  new x\n    (int 1)) :map) join "," raisGfmEditor  new  ","sp length +  negative? ","nGfmEditor  new w_spacGfmEditor  new s nGfmEditor  new gativGfmEditor  new ? ","sp lGfmEditor  new ngth + ","sp lGfmEditor  new ngth ","linGfmEditor  new  sub ","indent_diffs [] s [] ","indGfmEditor  new nt_diffs [] ","indent_diffs [] s key? ","indGfmEditor  new nt_diffs kGfmEditor  new y? ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  with_indGfmEditor  new x map ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  with_indGfmEditor  new x ","GfmEditor  new  apply GfmEditor  new ach_linGfmEditor  new  ","GfmEditor  new  apply ","GfmEditor  new  documGfmEditor  new nt ","GfmEditor  nGfmEditor  new w "]}," RedmineReformat Converters CommonmarkListFormatter Converter walk_lists":{"type":"method","name":"walk_lists","children":[],"call":[" walk_lists "," process_node ","root each "]}," RedmineReformat Converters CommonmarkListFormatter Converter process_node":{"type":"method","name":"process_node","children":[],"call":["new_sp_marker length - ","sp_marker length ","new_sp_marker length ","indent_diffs [] ","mn [] length < ","mn [] length ","mn [] ","indent_diff negative? ","e line ","(send\n  (send\n    (lvar :pos) :start_line) :+\n  (int 1)) upto ","pos end_line ","pos start_line + ","pos start_line ","indent_diff zero? ","indent + + ","indent + ","e replace ","m1 end ","m1 begin ","m1 [] ","m [] length ","m [] ","e source ","Regexp  quote ","SourcePos  new ","pos start_column + - ","pos start_column + ","pos start_column "," line_start_col ","  * "," min ","newmarker length - ","newmarker length ","sp_marker length - ","marker length ","m [] ! ! ","m [] ! ","e sourcepos ","node type == ","node type ","new_sp_m []  length - ","new_m []  length - ","sp_m []  length ","m []  length ","new_sp_m []  length ","new_m []  length ","new_sp_marker length - s [] ","new_sp_marker length -  negative? ","(send\n  (send\n    (lvar :e sourcepos ) :start_line) :+\n  (int 1)) upto ","e sourcepos  end_line ","e sourcepos  start_line + ","e sourcepos  start_line ","new_sp_marker length -  zero? ","e sourcepos  start_column + - ","e sourcepos  start_column + ","e sourcepos  start_column ","m []  length - ","newm []  length - ","newm []  length ","sp_m []  length - ","e sourcee sourcepos  "]}," RedmineReformat Converters CommonmarkListFormatter Converter line_start_col":{"type":"method","name":"line_start_col","children":[],"call":["1 + ","m [] length ","m [] ","e line "]}," RedmineReformat Converters CommonmarkListFormatter Converter convert":{"type":"method","name":"convert","children":[],"call":[" restore_macros "," raise ","STDERR  print ","msg << ","- * ","e class ","e message ","String  new "," normalize_lists "," extract_macros ","text dup ","ctx ref ","text empty? "," restore_ extract_macros  ","String  new  << "," extract_ extract_macros  "]}," RedmineReformat Converters CommonmarkListFormatter Converter initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :pad))\n  (str \"none\")) to_sym ","opts [] "]}," RedmineReformat Execution ReformatWorkerProgress reporting?":{"type":"method","name":"reporting?","children":[],"call":[]}," RedmineReformat Execution ReformatWorkerProgress item_jobs_started?":{"type":"method","name":"item_jobs_started?","children":[],"call":[]}," RedmineReformat Execution ReformatWorkerProgress complete?":{"type":"method","name":"complete?","children":[],"call":["c == ","@ipc recv ","@ipc send "]}," RedmineReformat Execution ReformatWorkerProgress finish":{"type":"method","name":"finish","children":[],"call":["@ipc send "]}," RedmineReformat Execution ReformatWorkerProgress progress":{"type":"method","name":"progress","children":[],"call":["@ipc send "]}," RedmineReformat Execution ReformatWorkerProgress start":{"type":"method","name":"start","children":[],"call":["@ipc send "]}," RedmineReformat Execution ReformatWorkerProgress initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedmineReformat Execution Progress server":{"type":"method","name":"server","children":[],"call":[" raise ","ipc send "," items_completion "," progress "," start ","ipc recv "]}," RedmineReformat Execution Progress item_jobs_complete?":{"type":"method","name":"item_jobs_complete?","children":[],"call":["c == "," items_completion "]}," RedmineReformat Execution Progress items_completion":{"type":"method","name":"items_completion","children":[],"call":["@progress [] == ","@subtotals [] ","@progress [] ","@subtotals each "]}," RedmineReformat Execution Progress item_jobs_started?":{"type":"method","name":"item_jobs_started?","children":[],"call":["@subtotals == "]}," RedmineReformat Execution Progress complete?":{"type":"method","name":"complete?","children":[],"call":[" item_jobs_complete? "," item_jobs_started? "]}," RedmineReformat Execution Progress report":{"type":"method","name":"report","children":[],"call":["STDERR  puts ","@totals [] ","@progress [] "]}," RedmineReformat Execution Progress reporting?":{"type":"method","name":"reporting?","children":[],"call":[]}," RedmineReformat Execution Progress finish":{"type":"method","name":"finish","children":[],"call":["STDERR  puts "]}," RedmineReformat Execution Progress progress":{"type":"method","name":"progress","children":[],"call":[" report ","(send\n  (lvar :newn) :/\n  (const nil :PERIOD)) > ","oldn / ","newn / ","newn == ","@totals [] ","increment > "," reporting? "," raise ","newn > ","@subtotals [] ","@progress []= ","oldn + ","@progress [] ","(send\n  (lvar :@progress []= ) :/\n  (const nil :PERIOD)) > ","@progress []  / ","@progress []=  / ","@progress []=  == ","@progress []=  > ","@progress []  + "]}," RedmineReformat Execution Progress start":{"type":"method","name":"start","children":[],"call":[" raise ","@subtotals [] > ","@subtotals [] ","@totals []= ","@totals [] nil? ","@totals [] ","@totals [] != "]}," RedmineReformat Execution Progress total":{"type":"method","name":"total","children":[],"call":["@totals [] "]}," RedmineReformat Execution Progress subtotal":{"type":"method","name":"subtotal","children":[],"call":["@subtotals [] "]}," RedmineReformat Execution Progress initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}}