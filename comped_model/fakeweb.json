{" FakeWeb registered_uri?":{"type":"method","name":"registered_uri?","children":[],"call":[]}," FakeWeb response_for":{"type":"method","name":"response_for","children":[],"call":[]}," FakeWeb register_uri":{"type":"method","name":"register_uri","children":[],"call":[]}," FakeWeb allow_net_connect?":{"type":"method","name":"allow_net_connect?","children":[],"call":[]}," FakeWeb allow_net_connect=":{"type":"method","name":"allow_net_connect=","children":[],"call":[]}," FakeWeb clean_registry":{"type":"method","name":"clean_registry","children":[],"call":[]}," FakeWeb StubSocket readuntil":{"type":"method","name":"readuntil","children":[],"call":[]}," FakeWeb StubSocket closed?":{"type":"method","name":"closed?","children":[],"call":[]}," FakeWeb StubSocket initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FakeWeb Response read_body":{"type":"method","name":"read_body","children":[],"call":[" block_given? "]}," FakeWeb Responder meta_information":{"type":"method","name":"meta_information","children":[],"call":[" options [] "," options "," options has_key? "]}," FakeWeb Responder optionally_raise":{"type":"method","name":"optionally_raise","children":[],"call":[" raise "," options [] new "," options [] "," options "," options [] allocate "," options has_key? "," options [] to_s "]}," FakeWeb Responder has_baked_response?":{"type":"method","name":"has_baked_response?","children":[],"call":[" options has_key? "," options "]}," FakeWeb Responder baked_response":{"type":"method","name":"baked_response","children":[],"call":[" raise "," options [] "," options ","@header []= ","r instance_eval ","@header delete ","saved_transfer_encoding nil? ","r reading_body ","@header [] ","@header key? ","Net HTTPResponse  read_new ","Net BufferedIO  new "," options [] to_s "," options [] is_a? "," Net HTTPResponse  read_new aise ","@headeNet HTTPResponse  read_new  []= ","Net HTTPResponse  read_new  instance_eval ","@headeNet HTTPResponse  read_new  delete ","saved_tNet HTTPResponse  read_new ansfeNet HTTPResponse  read_new _encoding nil? ","Net HTTPResponse  read_new  Net HTTPResponse  read_new eading_body ","@headeNet HTTPResponse  read_new  [] ","@headeNet HTTPResponse  read_new  key? ","Net HTTPResponse  Net HTTPResponse  read_new ead_new ","Net BuffeNet HTTPResponse  read_new edIO  new "]}," FakeWeb Responder string_response":{"type":"method","name":"string_response","children":[],"call":[]}," FakeWeb Responder file_response":{"type":"method","name":"file_response","children":[],"call":["IO  read "]}," FakeWeb Responder content":{"type":"method","name":"content","children":[],"call":[" send "," options [] "," options "," options has_key? ","(sym :file) each "]}," FakeWeb Responder response":{"type":"method","name":"response","children":[],"call":[" block_given? "," optionally_raise ","response extend ","response instance_variable_set "," content ","Net HTTPResponse  send new ","code to_s "," uri ","Net HTTPResponse  send "," meta_information "," baked_response "," has_baked_response? ","response []= "," headers_extracted_from_options each "," headers_extracted_from_options "," body ","response add_field ","value each ","value respond_to? ","Net HTTPResponse  send new  extend "," baked_response  extend ","Net HTTPResponse  send new  instance_variable_set "," baked_response  instance_variable_set "," baked_Net HTTPResponse  send new  "," baked_ baked_response  "," has_baked_Net HTTPResponse  send new ? "," has_baked_ baked_response ? ","Net HTTPResponse  send new  []= "," baked_response  []= ","Net HTTPResponse  send new  add_field "," baked_response  add_field "]}," FakeWeb Responder initialize":{"type":"method","name":"initialize","children":[],"call":[" times= "," options= "," uri= "," method= ","options []= ","options delete "," print_file_string_options_deprecation_warning ","options has_key? "]}," FakeWeb Registry sort_query_params":{"type":"method","name":"sort_query_params","children":[],"call":["query split sort join ","query split sort ","query split ","query empty? ","query nil? "]}," FakeWeb Registry normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["parsed_uri query= "," sort_query_params ","parsed_uri query ","URI  parse ","http:// + ","uri match ","normalized_uri normalize ","normalized_uri query= ","normalized_uri query ","uri is_a? ","URI  parse  query= ","parsed_http:// +  query= ","URI  parse  query ","parsed_http:// +  query ","http:// +  match ","normalized_http:// +  normalize ","normalized_http:// +  query= ","normalized_http:// +  query ","http:// +  is_a? "]}," FakeWeb Registry response_for":{"type":"method","name":"response_for","children":[],"call":["next_response response ","response times ","response times > ","responses each ","responses last ","responses nil? "," registered_uri ","responses empty? "," responses_for ","next_responder response ","responder times ","responder times > ","responders each ","responders last ","responders empty? "," responders_for ","responses last  response "," registered_uri  each "," responses_for  each "," registered_uri  last "," responses_for  last "," registered_uri  nil? "," responses_for  nil? "," registered_uri  empty? "," responses_for  empty? ","  registered_uri _for ","  responses_for _for ","responders last  response "," responders_for  each "," responders_for  last "," responders_for  empty? ","  responders_for _for "]}," FakeWeb Registry registered_uri":{"type":"method","name":"registered_uri","children":[],"call":[" uri_map [] [] "," uri_map [] "," uri_map "," uri_map [] has_key? "," registered_uri? "," normalize_uri ","(send\n  (send nil :pattern_map_matches\n    (sym :any)\n    (lvar :uri)) :map) flatten ","m [] "," pattern_map_matches map "," pattern_map_matches ","(send\n  (send nil :pattern_map_matches\n    (lvar :method)\n    (lvar :uri)) :map) flatten "," pattern_map_matches? ","  normalize_uri _map [] [] ","  normalize_uri _map [] ","  normalize_uri _map ","  normalize_uri _map [] has_key? ","  registered_uri? _uri? "," registered_ normalize_uri ? "," normalize_ normalize_uri  ","(send\n  (send nil :pattern_map_matches\n    (sym :any)\n    (lvar : normalize_uri )) :map) flatten ","(send\n  (send nil :pattern_map_matches\n    (lvar :method)\n    (lvar : normalize_uri )) :map) flatten "]}," FakeWeb Registry registered_uri?":{"type":"method","name":"registered_uri?","children":[],"call":[" uri_map [] has_key? "," uri_map [] "," uri_map "," normalize_uri "," pattern_map_matches? "," responses_for empty? ! "," responses_for empty? "," responses_for "," responders_for empty? ! "," responders_for empty? "," responders_for "]}," FakeWeb Registry register_uri":{"type":"method","name":"register_uri","children":[],"call":[" uri_map [] []= ","FakeWeb Responder  new ","option [] ","(splat\n  (array\n    (lvar :options))) flatten collect ","(splat\n  (array\n    (lvar :options))) flatten "," uri_map [] "," normalize_uri "," uri_map "," pattern_map << "," pattern_map "]}," FakeWeb Registry clean_registry":{"type":"method","name":"clean_registry","children":[],"call":[" uri_map= ","hash []= ","Hash  new ","hash default_proc "," pattern_map= "]}," FakeWeb Registry initialize":{"type":"method","name":"initialize","children":[],"call":[" clean_registry "]}," Net HTTP connect":{"type":"method","name":"connect","children":[],"call":[]}," Net HTTP request":{"type":"method","name":"request","children":[],"call":[" raise ","request method "," original_net_http_request "," original_net_http_connect ","FakeWeb  allow_net_connect? ","FakeWeb  response_for ","Net HTTP  socket_type new ","Net HTTP  socket_type ","FakeWeb  registered_uri? ","request method downcase to_sym ","request method downcase "," port "," address ","URI  parse request_uri ","URI  parse ","request path ","request path =~ "," use_ssl? ","request [] sub unpack first + ","request [] sub unpack first ","request [] sub unpack ","request [] sub ","request [] ","request [] nil? ","request [] =~ "," request_without_fakeweb "," connect_without_fakeweb ","uri sub! ","uri =~ ","FakeWeb Utility  strip_default_port_from_uri ","FakeWeb Utility  encode_unsafe_chars_in_userinfo + ","FakeWeb Utility  encode_unsafe_chars_in_userinfo ","FakeWeb Utility  decode_userinfo_from_header ","request request method downcase to_sym  ","FakeWeb  registered_FakeWeb Utility  strip_default_port_from_uri ? ","request request method downcase to_sym  downcase to_sym ","request request method downcase to_sym  downcase ","URI  parse request_FakeWeb Utility  strip_default_port_from_uri  ","request URI  parse request_uri  ","request request path  ","request URI  parse request_uri  =~ ","request request path  =~ ","FakeWeb Utility  strip_default_port_from_uri  sub! ","FakeWeb Utility  strip_default_port_from_uri  =~ ","FakeWeb Utility  strip_default_port_from_FakeWeb Utility  strip_default_port_from_uri  ","FakeWeb Utility  encode_unsafe_chars_in_request [] sub unpack first +  + ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  encode_unsafe_chars_in_userinfo +  + ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  decode_userinfo_from_header  + ","FakeWeb Utility  encode_unsafe_chars_in_request [] sub unpack first +  ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  encode_unsafe_chars_in_userinfo +  ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  decode_userinfo_from_header  ","FakeWeb Utility  decode_request [] sub unpack first + _from_header ","FakeWeb Utility  decode_FakeWeb Utility  encode_unsafe_chars_in_userinfo + _from_header ","FakeWeb Utility  decode_FakeWeb Utility  decode_userinfo_from_header _from_header "]}," Net HTTP socket_type":{"type":"method","name":"socket_type","children":[],"call":[]}," Net BufferedIO initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","StringIO  new ","File  open ","File  exists? ","io include? ! ","io include? ","File  directory? ! ","File  directory? "]}," FakeWeb print_missing_http_method_deprecation_warning":{"type":"method","name":"print_missing_http_method_deprecation_warning","children":[],"call":[]}," FakeWeb Responder print_file_string_options_deprecation_warning":{"type":"method","name":"print_file_string_options_deprecation_warning","children":[],"call":["$stderr puts "," caller [] "," caller "," options has_key? "," options "]}," FakeWeb Responder body":{"type":"method","name":"body","children":[],"call":[" options [] "," options ","File  read ","File  directory? ! ","File  directory? ","File  exists? "," options [] include? ! "," options [] include? "," options has_key? "," options []= "," options [] to_s "," options [] is_a? "," options [] nil? "]}," FakeWeb Responder headers_extracted_from_options":{"type":"method","name":"headers_extracted_from_options","children":[],"call":["(send\n  (send\n    (send\n      (lvar :name) :to_s) :split\n    (str \"_\")) :map) join ","segment capitalize ","name to_s split map ","name to_s split ","name to_s ","(send\n  (send nil :options) :reject) map ","KNOWN_OPTIONS  include? "," options reject "," options "]}," FakeWeb Registry pattern_map_match":{"type":"method","name":"pattern_map_match","children":[],"call":[" pattern_map_matches first "," pattern_map_matches "]}," FakeWeb Registry pattern_map_matches":{"type":"method","name":"pattern_map_matches","children":[],"call":["p [] == ","p [] ","uri match "," pattern_map select "," pattern_map ","uri sub! ","uri =~ ","uri to_s ","uri to_s  match ","uri to_s  sub! ","uri to_s  =~ ","uri to_s  to_s "]}," FakeWeb Registry pattern_map_matches?":{"type":"method","name":"pattern_map_matches?","children":[],"call":[" pattern_map_matches empty? ! "," pattern_map_matches empty? "," pattern_map_matches "]}," FakeWeb Utility strip_default_port_from_uri":{"type":"method","name":"strip_default_port_from_uri","children":[],"call":[]}," FakeWeb Utility encode_unsafe_chars_in_userinfo":{"type":"method","name":"encode_unsafe_chars_in_userinfo","children":[],"call":[]}," FakeWeb Utility decode_userinfo_from_header":{"type":"method","name":"decode_userinfo_from_header","children":[],"call":[]}," FakeWeb Registry uri_map_matches":{"type":"method","name":"uri_map_matches","children":[],"call":["(send\n  (lvar :matches) :map) first ","method_hash [] ","matches map "," raise ","method to_s upcase ","method to_s ","matches size > ","matches size ","method_hash has_key? ","uri match ","registered_uri is_a? "," uri_map select "," uri_map ","Utility  strip_default_port_from_uri "," normalize_uri to_s "," normalize_uri ","uri to_s ","u match ","uris_to_check any? ","type_to_check == ","uris_to_check include? ","registered_uri to_s ","(send\n  (send nil :uri_map) :select) select "," variations_of_uri_as_strings ","(send\n  (lvar :map) :select) select ","map select ","Utility  strip_default_port_from_uri  match "," normalize_uri to_s  match ","registered_Utility  strip_default_port_from_uri  is_a? ","registered_ normalize_uri to_s  is_a? "," Utility  strip_default_port_from_uri _map select ","  normalize_uri to_s _map select "," Utility  strip_default_port_from_uri _map ","  normalize_uri to_s _map ","Utility  strip_default_port_from_Utility  strip_default_port_from_uri  ","Utility  strip_default_port_from_ normalize_uri to_s  "," normalize_Utility  strip_default_port_from_uri  to_s "," normalize_ normalize_uri to_s  to_s "," normalize_Utility  strip_default_port_from_uri  "," normalize_ normalize_uri to_s  ","Utility  strip_default_port_from_uri  to_s "," normalize_uri to_s  to_s ","Utility  strip_default_port_from_uri s_to_check any? "," normalize_uri to_s s_to_check any? "," variations_of_uri_as_strings  any? ","Utility  strip_default_port_from_uri s_to_check include? "," normalize_uri to_s s_to_check include? "," variations_of_uri_as_strings  include? ","registered_Utility  strip_default_port_from_uri  to_s ","registered_ normalize_uri to_s  to_s ","(send\n  (send nil :Utility  strip_default_port_from_uri _map) :select) select ","(send\n  (send nil : normalize_uri to_s _map) :select) select "," variations_of_Utility  strip_default_port_from_uri _as_strings "," variations_of_ normalize_uri to_s _as_strings "]}," FakeWeb Registry uri_map_matches?":{"type":"method","name":"uri_map_matches?","children":[],"call":[" uri_map_matches nil? ! "," uri_map_matches nil? "," uri_map_matches "]}," FakeWeb Registry responses_for":{"type":"method","name":"responses_for","children":[],"call":[" uri_map_matches "," uri_map_matches? "," uri_map [] [] "," uri_map [] "," uri_map "," uri_map [] has_key? "," normalize_uri ","  normalize_uri _map_matches ","  normalize_uri _map_matches? ","  normalize_uri _map [] [] ","  normalize_uri _map [] ","  normalize_uri _map ","  normalize_uri _map [] has_key? "," normalize_ normalize_uri  "]}," FakeWeb Utility simple_array_permutation":{"type":"method","name":"simple_array_permutation","children":[],"call":[]}," FakeWeb Registry variations_of_uri_as_strings":{"type":"method","name":"variations_of_uri_as_strings","children":[],"call":["uri to_s sub ","normalized_uri request_uri ","normalized_uri port ","Regexp  escape ","uri to_s ","uris map ","normalized_uri default_port == ","normalized_uri default_port ","uris << ","current_permutation query= ","p join ","normalized_uri dup ","FakeWeb Utility  simple_array_permutation ","query split ","query empty? ","query nil? ","normalized_uri query "," normalize_uri ","variations << ","normalized_uri_string sub ","normalized_uri to_s ","uri_object dup "," normalize_uri  request_uri "," normalize_uri  port "," normalize_uri  default_port == "," normalize_uri  default_port ","normalized_uri dup  query= ","current_permutation normalized_uri query = "," normalize_uri  dup ","normalized_uri query  split ","normalized_uri query  empty? ","normalized_uri query  nil? ","normalized_uri normalized_uri query  "," normalize_uri  query "," normalize_uri _string sub ","normalized_uri to_s  sub "," normalize_uri  to_s "]}," FakeWeb Utility puts_warning_for_net_http_replacement_libs_if_needed":{"type":"method","name":"puts_warning_for_net_http_replacement_libs_if_needed","children":[],"call":[]}," FakeWeb Utility record_loaded_net_http_replacement_libs":{"type":"method","name":"record_loaded_net_http_replacement_libs","children":[],"call":[]}," FakeWeb Utility puts_warning_for_net_http_around_advice_libs_if_needed":{"type":"method","name":"puts_warning_for_net_http_around_advice_libs_if_needed","children":[],"call":[]}," Net HTTP connect_with_fakeweb":{"type":"method","name":"connect_with_fakeweb","children":[],"call":["FakeWeb Utility  puts_warning_for_net_http_replacement_libs_if_needed "]}," Net HTTP request_with_fakeweb":{"type":"method","name":"request_with_fakeweb","children":[],"call":[" raise ","request method ","FakeWeb Utility  strip_default_port_from_uri "," request_without_fakeweb "," connect_without_fakeweb ","FakeWeb  allow_net_connect? ","FakeWeb  response_for ","Net HTTP  socket_type new ","Net HTTP  socket_type ","FakeWeb  registered_uri? ","request method downcase to_sym ","request method downcase "," port "," address ","FakeWeb Utility  encode_unsafe_chars_in_userinfo + ","FakeWeb Utility  encode_unsafe_chars_in_userinfo ","FakeWeb Utility  decode_userinfo_from_header ","request [] ","request [] =~ ","URI  parse request_uri ","URI  parse ","request path ","request path =~ "," use_ssl? ","FakeWeb Utility  produce_side_effects_of_net_http_request ","FakeWeb Utility  request_uri_as_string ","FakeWeb  last_request= ","request request method downcase to_sym  ","FakeWeb Utility  strip_default_port_from_FakeWeb Utility  strip_default_port_from_uri  ","FakeWeb Utility  strip_default_port_from_FakeWeb Utility  request_uri_as_string  ","FakeWeb  registered_FakeWeb Utility  strip_default_port_from_uri ? ","FakeWeb  registered_FakeWeb Utility  request_uri_as_string ? ","request request method downcase to_sym  downcase to_sym ","request request method downcase to_sym  downcase ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  encode_unsafe_chars_in_userinfo +  + ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  decode_userinfo_from_header  + ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  encode_unsafe_chars_in_userinfo +  ","FakeWeb Utility  encode_unsafe_chars_in_FakeWeb Utility  decode_userinfo_from_header  ","FakeWeb Utility  decode_FakeWeb Utility  encode_unsafe_chars_in_userinfo + _from_header ","FakeWeb Utility  decode_FakeWeb Utility  decode_userinfo_from_header _from_header ","URI  parse request_FakeWeb Utility  strip_default_port_from_uri  ","URI  parse request_FakeWeb Utility  request_uri_as_string  ","request URI  parse request_uri  ","request request path  ","request URI  parse request_uri  =~ ","request request path  =~ ","FakeWeb Utility  request_FakeWeb Utility  strip_default_port_from_uri _as_string ","FakeWeb Utility  request_FakeWeb Utility  request_uri_as_string _as_string "]}," Net HTTP socket_type_with_fakeweb":{"type":"method","name":"socket_type_with_fakeweb","children":[],"call":[]}," Net BufferedIO initialize_with_fakeweb":{"type":"method","name":"initialize_with_fakeweb","children":[],"call":[" raise ","StringIO  new ","File  open ","File  directory? ! ","File  directory? ","File  exists? ","io include? ! ","io include? "]}," FakeWeb Utility uri_escape":{"type":"method","name":"uri_escape","children":[],"call":[]}," FakeWeb Registry responders_for":{"type":"method","name":"responders_for","children":[],"call":[" uri_map_matches "," normalize_uri "," uri_map ","  normalize_uri _map_matches "," normalize_ normalize_uri  ","  normalize_uri _map "]}," FakeWeb last_request=":{"type":"method","name":"last_request=","children":[],"call":[]}," FakeWeb last_request":{"type":"method","name":"last_request","children":[],"call":[]}," FakeWeb Utility produce_side_effects_of_net_http_request":{"type":"method","name":"produce_side_effects_of_net_http_request","children":[],"call":[]}," FakeWeb Utility request_uri_as_string":{"type":"method","name":"request_uri_as_string","children":[],"call":[]}," FakeWeb Registry passthrough_uri_matches?":{"type":"method","name":"passthrough_uri_matches?","children":[],"call":[" uri_map_matches "," passthrough_uri_map "," normalize_uri ","  normalize_uri _map_matches "," passthrough_ normalize_uri _map "," normalize_ normalize_uri  "]}," FakeWeb Registry remove_passthrough_uri":{"type":"method","name":"remove_passthrough_uri","children":[],"call":[" passthrough_uri_map= "]}," FakeWeb Registry register_passthrough_uri":{"type":"method","name":"register_passthrough_uri","children":[],"call":[" passthrough_uri_map= "," normalize_uri "]}}