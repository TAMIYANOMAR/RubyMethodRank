{" CollectiveIdea Acts NestedSet InstanceMethods move_to":{"type":"method","name":"move_to","children":[],"call":[" callback "," reload_nested_set ","target reload_nested_set "," class base_class update_all "," nested_set_scope proxy_options [] "," nested_set_scope proxy_options "," nested_set_scope "," id ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + "," class base_class primary_key "," class base_class "," class ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + "," quoted_right_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + "," quoted_left_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + ","(begin\n  (send nil :quoted_left_column_name)) + + ","(begin\n  (send nil :quoted_left_column_name)) + ","target [] "," parent_column_name ","target id ","(send\n  (self) :[]\n  (send nil :left_column_name)) sort "," [] "," right_column_name "," left_column_name ","bound == "," [] - "," [] + ","bound - ","bound > "," raise ","target [] + "," move_possible? ","position == "," nested_set_scope find ","position != ","target is_a? "," transaction "," callback == "," new_record? "," run_callbacks "," run_callbacks == "," nested_set_scope find  reload_nested_set "," nested_set_scope find  [] "," nested_set_scope find  id ","bound -  == ","bound -  - ","bound -  > "," nested_set_scope find  [] + "," nested_set_scope find  is_a? "]}," CollectiveIdea Acts NestedSet InstanceMethods reload_nested_set":{"type":"method","name":"reload_nested_set","children":[],"call":[" reload ","(begin\n  (send nil :quoted_left_column_name)) + "," quoted_parent_column_name "," quoted_right_column_name "," quoted_left_column_name "]}," CollectiveIdea Acts NestedSet InstanceMethods destroy_descendants":{"type":"method","name":"destroy_descendants","children":[],"call":[" skip_before_destroy= "," nested_set_scope update_all "," right "," quoted_right_column_name "," nested_set_scope "," quoted_left_column_name "," right - + "," right - "," left "," nested_set_scope delete_all ","model destroy ","model skip_before_destroy= "," descendants each "," descendants "," acts_as_nested_set_options [] == "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," class base_class transaction "," class base_class "," class "," skip_before_destroy "," left nil? "," right nil? "]}," CollectiveIdea Acts NestedSet InstanceMethods set_default_left_and_right":{"type":"method","name":"set_default_left_and_right","children":[],"call":[" []= ","maxright + "," right_column_name "," left_column_name "," nested_set_scope maximum "," nested_set_scope "]}," CollectiveIdea Acts NestedSet InstanceMethods move_to_new_parent":{"type":"method","name":"move_to_new_parent","children":[],"call":[" move_to_child_of "," move_to_root ","@move_to_new_parent_id nil? "]}," CollectiveIdea Acts NestedSet InstanceMethods store_new_parent":{"type":"method","name":"store_new_parent","children":[],"call":[" parent_id "," parent_id_changed? "," send "," parent_column_name "]}," CollectiveIdea Acts NestedSet InstanceMethods nested_set_scope":{"type":"method","name":"nested_set_scope","children":[],"call":[" class base_class scoped "," class base_class "," class ","options []= ","conditions merge "," [] ","scopes inject ","scopes empty? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," quoted_left_column_name "," Array  inject "," Array  empty? "]}," CollectiveIdea Acts NestedSet InstanceMethods without_self":{"type":"method","name":"without_self","children":[],"call":["scope scoped "," class primary_key "," class "," class quoted_table_name "]}," CollectiveIdea Acts NestedSet InstanceMethods to_text":{"type":"method","name":"to_text","children":[],"call":["(send\n  (send nil :self_and_descendants) :map) join ","node right ","node left ","node parent_id ","node to_s ","node id ","* * ","node level + ","node level "," self_and_descendants map "," self_and_descendants "]}," CollectiveIdea Acts NestedSet InstanceMethods move_possible?":{"type":"method","name":"move_possible?","children":[],"call":["(or\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :left))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :left))))\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :right))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :right))))) ! "," right >= ","target right "," right "," left <= "," left ","target left "," same_scope? "," != "]}," CollectiveIdea Acts NestedSet InstanceMethods move_to_root":{"type":"method","name":"move_to_root","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet InstanceMethods move_to_child_of":{"type":"method","name":"move_to_child_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet InstanceMethods move_to_right_of":{"type":"method","name":"move_to_right_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet InstanceMethods move_to_left_of":{"type":"method","name":"move_to_left_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet InstanceMethods move_right":{"type":"method","name":"move_right","children":[],"call":[" move_to_right_of "," right_sibling "]}," CollectiveIdea Acts NestedSet InstanceMethods move_left":{"type":"method","name":"move_left","children":[],"call":[" move_to_left_of "," left_sibling "]}," CollectiveIdea Acts NestedSet InstanceMethods right_sibling":{"type":"method","name":"right_sibling","children":[],"call":[" siblings find "," left "," quoted_left_column_name "," class quoted_table_name "," class "," siblings "]}," CollectiveIdea Acts NestedSet InstanceMethods left_sibling":{"type":"method","name":"left_sibling","children":[],"call":[" siblings find "," quoted_left_column_name "," class quoted_table_name "," class "," left "," siblings "]}," CollectiveIdea Acts NestedSet InstanceMethods same_scope?":{"type":"method","name":"same_scope?","children":[],"call":[" send == ","other send "," send "," Array all? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet InstanceMethods is_or_is_ancestor_of?":{"type":"method","name":"is_or_is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left <= "," left "]}," CollectiveIdea Acts NestedSet InstanceMethods is_ancestor_of?":{"type":"method","name":"is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left < "," left "]}," CollectiveIdea Acts NestedSet InstanceMethods is_or_is_descendant_of?":{"type":"method","name":"is_or_is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left <= ","other left "]}," CollectiveIdea Acts NestedSet InstanceMethods is_descendant_of?":{"type":"method","name":"is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left < ","other left "]}," CollectiveIdea Acts NestedSet InstanceMethods descendants":{"type":"method","name":"descendants","children":[],"call":[" without_self "," self_and_descendants "]}," CollectiveIdea Acts NestedSet InstanceMethods self_and_descendants":{"type":"method","name":"self_and_descendants","children":[],"call":[" nested_set_scope scoped "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet InstanceMethods level":{"type":"method","name":"level","children":[],"call":[" ancestors count "," ancestors "," parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet InstanceMethods leaves":{"type":"method","name":"leaves","children":[],"call":[" descendants scoped "," quoted_left_column_name "," class quoted_table_name "," class "," quoted_right_column_name "," descendants "]}," CollectiveIdea Acts NestedSet InstanceMethods siblings":{"type":"method","name":"siblings","children":[],"call":[" without_self "," self_and_siblings "]}," CollectiveIdea Acts NestedSet InstanceMethods self_and_siblings":{"type":"method","name":"self_and_siblings","children":[],"call":[" nested_set_scope scoped "," parent_id "," parent_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet InstanceMethods ancestors":{"type":"method","name":"ancestors","children":[],"call":[" without_self "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet InstanceMethods self_and_ancestors":{"type":"method","name":"self_and_ancestors","children":[],"call":[" nested_set_scope scoped "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet InstanceMethods root":{"type":"method","name":"root","children":[],"call":[" self_and_ancestors find "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet InstanceMethods ==":{"type":"method","name":"==","children":[],"call":["comparison_object new_record? ! ","comparison_object new_record? ","comparison_object id == "," id ","comparison_object id ","comparison_object instance_of? "," class ","comparison_object equal? "]}," CollectiveIdea Acts NestedSet InstanceMethods <=>":{"type":"method","name":"<=>","children":[],"call":[" left <=> ","x left "," left "]}," CollectiveIdea Acts NestedSet InstanceMethods child?":{"type":"method","name":"child?","children":[],"call":[" parent_id nil? ! "," parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet InstanceMethods leaf?":{"type":"method","name":"leaf?","children":[],"call":[" right - == "," right - "," left "," right "," new_record? ! "," new_record? "]}," CollectiveIdea Acts NestedSet InstanceMethods root?":{"type":"method","name":"root?","children":[],"call":[" parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet InstanceMethods right":{"type":"method","name":"right","children":[],"call":[" [] "," right_column_name "]}," CollectiveIdea Acts NestedSet InstanceMethods left":{"type":"method","name":"left","children":[],"call":[" [] "," left_column_name "]}," CollectiveIdea Acts NestedSet InstanceMethods parent_id":{"type":"method","name":"parent_id","children":[],"call":[" [] "," parent_column_name "]}," CollectiveIdea Acts NestedSet Columns quoted_scope_column_names":{"type":"method","name":"quoted_scope_column_names","children":[],"call":[" connection quote_column_name "," connection "," scope_column_names collect "," scope_column_names "]}," CollectiveIdea Acts NestedSet Columns quoted_parent_column_name":{"type":"method","name":"quoted_parent_column_name","children":[],"call":[" connection quote_column_name "," parent_column_name "," connection ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "]}," CollectiveIdea Acts NestedSet Columns quoted_right_column_name":{"type":"method","name":"quoted_right_column_name","children":[],"call":[" connection quote_column_name "," right_column_name "," connection ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "]}," CollectiveIdea Acts NestedSet Columns quoted_left_column_name":{"type":"method","name":"quoted_left_column_name","children":[],"call":[" connection quote_column_name "," left_column_name "," connection ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "]}," CollectiveIdea Acts NestedSet Columns scope_column_names":{"type":"method","name":"scope_column_names","children":[],"call":[" Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Columns parent_column_name":{"type":"method","name":"parent_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Columns right_column_name":{"type":"method","name":"right_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Columns left_column_name":{"type":"method","name":"left_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet ClassMethods each_with_level":{"type":"method","name":"each_with_level","children":[],"call":["path length - ","path length ","path << ","o parent_id ","path pop ","path last != ","path last ","path include? ","o parent_id != ","objects each "]}," CollectiveIdea Acts NestedSet ClassMethods rebuild!":{"type":"method","name":"rebuild!","children":[],"call":["set_left_and_rights call ","indices [] ","scope call "," find each "," find "," quoted_right_column_name "," quoted_left_column_name "," quoted_parent_column_name ","node save! ","node []= "," right_column_name "," left_column_name "," lambda ","str << "," connection quote ","node send ","column_name to_sym "," connection "," connection quote_column_name "," scope_column_names inject "," scope_column_names "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," valid? "]}," CollectiveIdea Acts NestedSet ClassMethods each_root_valid?":{"type":"method","name":"each_root_valid?","children":[],"call":["root right ","root left "," returning ","root right > ","root left > ","roots_to_validate all? ","root root right  ","root root left  ","root root right  > ","root root left  > "]}," CollectiveIdea Acts NestedSet ClassMethods all_roots_valid?":{"type":"method","name":"all_roots_valid?","children":[],"call":[" each_root_valid? "," roots ","(send\n  (send nil :roots\n    (hash\n      (pair\n        (sym :group)\n        (send nil :scope_column_names)))) :group_by) all? ","record send ","col to_sym "," scope_column_names collect "," scope_column_names "," roots group_by "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet ClassMethods no_duplicates_for_columns?":{"type":"method","name":"no_duplicates_for_columns?","children":[],"call":[" find nil? "," find ","(send nil :quoted_left_column_name) all? "," quoted_right_column_name "," quoted_left_column_name ","(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push join ","(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push "," connection quote_column_name "," connection "," Array map "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet ClassMethods left_and_rights_valid?":{"type":"method","name":"left_and_rights_valid?","children":[],"call":[" count == "," count ","(begin\n  (send nil :quoted_table_name)) + + + + + + "," quoted_right_column_name "," quoted_table_name ","(begin\n  (send nil :quoted_table_name)) + + + + + "," quoted_left_column_name ","(begin\n  (send nil :quoted_table_name)) + + + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_table_name)) + + + ","(begin\n  (send nil :quoted_table_name)) + + ","(begin\n  (send nil :quoted_table_name)) + ","(str \"LEFT OUTER JOIN \") + "," primary_key "]}," CollectiveIdea Acts NestedSet ClassMethods valid?":{"type":"method","name":"valid?","children":[],"call":[" all_roots_valid? "," no_duplicates_for_columns? "," left_and_rights_valid? "]}," CollectiveIdea Acts NestedSet ClassMethods root":{"type":"method","name":"root","children":[],"call":[" roots find "," roots "]}," CollectiveIdea Acts NestedSet SingletonMethods acts_as_nested_set":{"type":"method","name":"acts_as_nested_set","children":[],"call":[" define_callbacks "," respond_to? "," named_scope "," quoted_left_column_name "," quoted_right_column_name "," parent_column_name "," module_eval ","(send nil :left_column_name) each "," right_column_name "," left_column_name "," before_destroy "," after_save "," before_save "," before_create "," attr_protected "," right_column_name intern "," left_column_name intern "," attr_accessor "," has_many "," base_class class_name "," base_class "," belongs_to "," extend "," include "," is_a? "," class_inheritable_reader "," write_inheritable_attribute ","options []= ","(begin\n  (send\n    (lvar :options) :[]\n    (sym :scope))) intern ","options [] ","options [] to_s !~ ","options [] to_s ","options [] is_a? ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge "," accessible_attributes blank? "," accessible_attributes "," base_class to_s ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  []= ","(begin\n  (send\n    (lvar :(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge ) :[]\n    (sym :scope))) intern ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] to_s !~ ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] to_s ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] is_a? "]}," CollectiveIdea Acts NestedSet included":{"type":"method","name":"included","children":[],"call":[]}," CollectiveIdea Acts NestedSet Helper nested_set_options":{"type":"method","name":"nested_set_options","children":[],"call":["(send\n  (send\n    (lvar :root) :self_and_descendants) :map) compact ","i id ","mover move_possible? ","mover new_record? ","mover nil? ","root self_and_descendants map ","root self_and_descendants ","items each "," Array ","class_or_item roots ","class_or_item is_a? ","e root? ! ","e root? ","class_or_item reject ","(send\n  (send\n    (send\n      (lvar :root) :class) :associate_parents\n    (send\n      (lvar :root) :self_and_descendants)) :map) compact ","root class associate_parents map ","root class associate_parents ","root class ","class_or_item respond_to? ","i primary_id "," Array  each ","class_or_item roots  roots ","class_or_item roots  is_a? ","class_or_item roots  reject ","class_or_item roots  respond_to? "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to":{"type":"method","name":"move_to","children":[],"call":[" reload_nested_set ","target reload_nested_set "," class base_class update_all "," id ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + "," class base_class primary_key "," class base_class "," class ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + "," quoted_right_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + "," quoted_left_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + ","(begin\n  (send nil :quoted_left_column_name)) + + ","(begin\n  (send nil :quoted_left_column_name)) + ","target [] "," parent_column_name ","target id ","(send\n  (self) :[]\n  (send nil :left_column_name)) sort "," [] "," right_column_name "," left_column_name ","bound == "," [] - "," [] + ","bound - ","bound > "," raise ","target [] + "," move_possible? ","position == "," nested_set_scope find "," nested_set_scope ","position != ","target is_a? "," transaction "," run_callbacks "," new_record? "," nested_set_scope update_all "," class base_class select lock where "," class base_class select lock "," class base_class select "," nested_set_scope find  reload_nested_set "," nested_set_scope find  [] "," nested_set_scope find  id ","bound -  == ","bound -  - ","bound -  > "," nested_set_scope find  [] + "," nested_set_scope find  is_a? "]}," CollectiveIdea Acts NestedSet Model InstanceMethods reload_nested_set":{"type":"method","name":"reload_nested_set","children":[],"call":[" reload ","(begin\n  (send nil :quoted_left_column_name)) + "," quoted_parent_column_name "," quoted_right_column_name "," quoted_left_column_name "]}," CollectiveIdea Acts NestedSet Model InstanceMethods destroy_descendants":{"type":"method","name":"destroy_descendants","children":[],"call":[" skip_before_destroy= "," nested_set_scope update_all "," right "," quoted_right_column_name "," nested_set_scope "," quoted_left_column_name "," right - + "," right - "," left "," nested_set_scope delete_all ","model destroy ","model skip_before_destroy= "," descendants each "," descendants "," acts_as_nested_set_options [] == "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," class base_class transaction "," class base_class "," class "," skip_before_destroy "," left nil? "," right nil? "]}," CollectiveIdea Acts NestedSet Model InstanceMethods set_default_left_and_right":{"type":"method","name":"set_default_left_and_right","children":[],"call":[" []= ","maxright + "," right_column_name "," left_column_name "," nested_set_scope maximum "," nested_set_scope ","highest_right_row [] "," nested_set_scope find "," quoted_right_column_name ","highest_right_row []  + "," nested_set_scope find  [] "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to_new_parent":{"type":"method","name":"move_to_new_parent","children":[],"call":[" move_to_child_of "," move_to_root ","@move_to_new_parent_id nil? "]}," CollectiveIdea Acts NestedSet Model InstanceMethods store_new_parent":{"type":"method","name":"store_new_parent","children":[],"call":[" parent_id "," send "," parent_column_name "]}," CollectiveIdea Acts NestedSet Model InstanceMethods nested_set_scope":{"type":"method","name":"nested_set_scope","children":[],"call":[" class base_class scoped "," class base_class "," class ","options []= ","conditions merge "," [] ","scopes inject ","scopes empty? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," quoted_left_column_name ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  []= "," Array  inject "," Array  empty? "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  [] "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  "]}," CollectiveIdea Acts NestedSet Model InstanceMethods without_self":{"type":"method","name":"without_self","children":[],"call":["scope where "," class primary_key "," class "," class quoted_table_name "]}," CollectiveIdea Acts NestedSet Model InstanceMethods to_text":{"type":"method","name":"to_text","children":[],"call":["(send\n  (send nil :self_and_descendants) :map) join ","node right ","node left ","node parent_id ","node to_s ","node id ","* * ","node level + ","node level "," self_and_descendants map "," self_and_descendants "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_possible?":{"type":"method","name":"move_possible?","children":[],"call":["(or\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :left))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :left))))\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :right))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :right))))) ! "," right >= ","target right "," right "," left <= "," left ","target left "," same_scope? "," != "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to_root":{"type":"method","name":"move_to_root","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to_child_of":{"type":"method","name":"move_to_child_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to_right_of":{"type":"method","name":"move_to_right_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_to_left_of":{"type":"method","name":"move_to_left_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_right":{"type":"method","name":"move_right","children":[],"call":[" move_to_right_of "," right_sibling "]}," CollectiveIdea Acts NestedSet Model InstanceMethods move_left":{"type":"method","name":"move_left","children":[],"call":[" move_to_left_of "," left_sibling "]}," CollectiveIdea Acts NestedSet Model InstanceMethods right_sibling":{"type":"method","name":"right_sibling","children":[],"call":[" siblings where first "," siblings where "," left "," quoted_left_column_name "," class quoted_table_name "," class "," siblings "]}," CollectiveIdea Acts NestedSet Model InstanceMethods left_sibling":{"type":"method","name":"left_sibling","children":[],"call":[" siblings where order last "," siblings where order "," quoted_left_column_name "," class quoted_table_name "," class "," siblings where "," left "," siblings "]}," CollectiveIdea Acts NestedSet Model InstanceMethods same_scope?":{"type":"method","name":"same_scope?","children":[],"call":[" send == ","other send "," send "," Array all? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model InstanceMethods is_or_is_ancestor_of?":{"type":"method","name":"is_or_is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left <= "," left "]}," CollectiveIdea Acts NestedSet Model InstanceMethods is_ancestor_of?":{"type":"method","name":"is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left < "," left "]}," CollectiveIdea Acts NestedSet Model InstanceMethods is_or_is_descendant_of?":{"type":"method","name":"is_or_is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left <= ","other left "]}," CollectiveIdea Acts NestedSet Model InstanceMethods is_descendant_of?":{"type":"method","name":"is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left < ","other left "]}," CollectiveIdea Acts NestedSet Model InstanceMethods descendants":{"type":"method","name":"descendants","children":[],"call":[" without_self "," self_and_descendants "]}," CollectiveIdea Acts NestedSet Model InstanceMethods self_and_descendants":{"type":"method","name":"self_and_descendants","children":[],"call":[" nested_set_scope where "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model InstanceMethods level":{"type":"method","name":"level","children":[],"call":[" ancestors count "," ancestors "," parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet Model InstanceMethods leaves":{"type":"method","name":"leaves","children":[],"call":[" descendants where "," quoted_left_column_name "," class quoted_table_name "," class "," quoted_right_column_name "," descendants "]}," CollectiveIdea Acts NestedSet Model InstanceMethods siblings":{"type":"method","name":"siblings","children":[],"call":[" without_self "," self_and_siblings "]}," CollectiveIdea Acts NestedSet Model InstanceMethods self_and_siblings":{"type":"method","name":"self_and_siblings","children":[],"call":[" nested_set_scope where "," parent_id "," parent_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model InstanceMethods ancestors":{"type":"method","name":"ancestors","children":[],"call":[" without_self "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet Model InstanceMethods self_and_ancestors":{"type":"method","name":"self_and_ancestors","children":[],"call":[" nested_set_scope where "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model InstanceMethods root":{"type":"method","name":"root","children":[],"call":[" self_and_ancestors where first "," self_and_ancestors where "," parent_column_name "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet Model InstanceMethods child?":{"type":"method","name":"child?","children":[],"call":[" parent_id nil? ! "," parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet Model InstanceMethods leaf?":{"type":"method","name":"leaf?","children":[],"call":[" right - == "," right - "," left "," right "," new_record? ! "," new_record? "]}," CollectiveIdea Acts NestedSet Model InstanceMethods root?":{"type":"method","name":"root?","children":[],"call":[" parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet Model InstanceMethods right":{"type":"method","name":"right","children":[],"call":[" [] "," right_column_name "]}," CollectiveIdea Acts NestedSet Model InstanceMethods left":{"type":"method","name":"left","children":[],"call":[" [] "," left_column_name "]}," CollectiveIdea Acts NestedSet Model InstanceMethods parent_id":{"type":"method","name":"parent_id","children":[],"call":[" [] "," parent_column_name "]}," CollectiveIdea Acts NestedSet Model ClassMethods each_with_level":{"type":"method","name":"each_with_level","children":[],"call":["path length - ","path length ","path << ","o parent_id ","path pop ","path last != ","path last ","path include? ","o parent_id != ","objects each ","Iterator  new each_with_level ","Iterator  new "]}," CollectiveIdea Acts NestedSet Model ClassMethods rebuild!":{"type":"method","name":"rebuild!","children":[],"call":["set_left_and_rights call ","indices [] ","scope call "," where order each "," where order "," quoted_right_column_name "," quoted_left_column_name "," where "," quoted_parent_column_name ","node save! ","node []= "," right_column_name "," left_column_name "," lambda ","str << "," connection quote ","node send ","column_name to_sym "," connection "," connection quote_column_name "," scope_column_names inject "," scope_column_names "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," valid? "," quoted_right_column_full_name "," quoted_left_column_full_name "," quoted_parent_column_full_name "," unscoped "]}," CollectiveIdea Acts NestedSet Model ClassMethods each_root_valid?":{"type":"method","name":"each_root_valid?","children":[],"call":["root right ","root left ","(and\n  (send\n    (send\n      (lvar :root) :left) :>\n    (lvar :left))\n  (send\n    (send\n      (lvar :root) :right) :>\n    (lvar :right))) tap ","root right > ","root left > ","roots_to_validate all? ","root root right  ","root root left  ","(and\n  (send\n    (send\n      (lvar :root) :left) :>\n    (lvar :left))\n  (send\n    (send\n      (lvar :root) :root right ) :>\n    (lvar :root right ))) tap ","(and\n  (send\n    (send\n      (lvar :root) :root left ) :>\n    (lvar :root left ))\n  (send\n    (send\n      (lvar :root) :right) :>\n    (lvar :right))) tap ","root root right  > ","root root left  > "]}," CollectiveIdea Acts NestedSet Model ClassMethods all_roots_valid?":{"type":"method","name":"all_roots_valid?","children":[],"call":[" each_root_valid? "," roots ","(send\n  (send\n    (send nil :roots) :group\n    (send nil :scope_column_names)) :group_by) all? ","record send ","col to_sym "," scope_column_names collect "," scope_column_names "," roots group group_by "," roots group "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","(send\n  (send nil :roots) :group_by) all? "," roots group_by "]}," CollectiveIdea Acts NestedSet Model ClassMethods no_duplicates_for_columns?":{"type":"method","name":"no_duplicates_for_columns?","children":[],"call":[" select group having first nil? "," select group having first "," select group having "," select group "," select ","(send nil :quoted_left_column_name) all? "," quoted_right_column_name "," quoted_left_column_name ","(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push join ","(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push "," connection quote_column_name "," connection "," Array map "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","(send nil :quoted_left_column_full_name) all? "," quoted_right_column_full_name "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model ClassMethods left_and_rights_valid?":{"type":"method","name":"left_and_rights_valid?","children":[],"call":[" joins where count == "," joins where count "," joins where ","(begin\n  (send nil :quoted_table_name)) + + + + + + "," quoted_right_column_name "," quoted_table_name ","(begin\n  (send nil :quoted_table_name)) + + + + + "," quoted_left_column_name ","(begin\n  (send nil :quoted_table_name)) + + + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_table_name)) + + + ","(begin\n  (send nil :quoted_table_name)) + + ","(begin\n  (send nil :quoted_table_name)) + "," joins ","(str \"LEFT OUTER JOIN \") + "," primary_key ","(str \"LEFT OUTER JOIN \") + + + ","(str \"LEFT OUTER JOIN \") + + "," connection adapter_name match nil? "," connection adapter_name match "," connection adapter_name "," connection ","(begin\n  (send nil :quoted_left_column_full_name)) + + + + + + "," quoted_right_column_full_name ","(begin\n  (send nil :quoted_left_column_full_name)) + + + + + "," quoted_left_column_full_name ","(begin\n  (send nil :quoted_left_column_full_name)) + + + + "," quoted_parent_column_full_name ","(begin\n  (send nil :quoted_left_column_full_name)) + + + ","(begin\n  (send nil :quoted_left_column_full_name)) + + ","(begin\n  (send nil :quoted_left_column_full_name)) + "]}," CollectiveIdea Acts NestedSet Model ClassMethods valid?":{"type":"method","name":"valid?","children":[],"call":[" all_roots_valid? "," no_duplicates_for_columns? "," left_and_rights_valid? "]}," CollectiveIdea Acts NestedSet Model ClassMethods root":{"type":"method","name":"root","children":[],"call":[" roots first "," roots "]}," CollectiveIdea Acts NestedSet acts_as_nested_set":{"type":"method","name":"acts_as_nested_set","children":[],"call":[" define_callbacks "," scope "," where order "," quoted_left_column_name "," where "," quoted_right_column_name "," parent_column_name "," module_eval ","(send nil :left_column_name) each "," right_column_name "," left_column_name "," before_destroy "," after_save "," before_save "," before_create "," attr_protected "," right_column_name intern "," left_column_name intern "," accessible_attributes blank? "," accessible_attributes "," attr_accessor "," has_many "," base_class to_s "," base_class "," belongs_to ","options [] "," extend "," include "," class_inheritable_reader "," write_inheritable_attribute ","options []= ","(begin\n  (send\n    (lvar :options) :[]\n    (sym :scope))) intern ","options [] to_s !~ ","options [] to_s ","options [] is_a? ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge "," define_model_callbacks "," acts_as_nested_set_options= "," class_attribute "," depth_column_name ","has_many_children_options update ","(sym :before_add) each "," order_column "," acts_as_nested_set_define_callbacks! "," acts_as_nested_set_prevent_assignment_to_reserved_columns! "," acts_as_nested_set_relate_children! "," acts_as_nested_set_relate_parent! "," acts_as_nested_set_parse_options! ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  []= ","(begin\n  (send\n    (lvar :(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge ) :[]\n    (sym :scope))) intern ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] to_s !~ ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] to_s ","(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  [] is_a? "," acts_as_nested_set_(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge = ","has_many_children_(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge  update "," acts_as_nested_set_parse_(pair\n  (sym :parent_column)\n  (str \"parent_id\")) merge ! "]}," CollectiveIdea Acts NestedSet Helper sorted_nested_set_options":{"type":"method","name":"sorted_nested_set_options","children":[],"call":["result << ","c id ","children each ","children sort_by! ","(send\n  (send\n    (lvar :root) :self_and_descendants) :map) compact ","children << ","i id ","i leaf? ! ","i leaf? ","mover move_possible? ","mover new_record? ","mover nil? ","root self_and_descendants map ","root self_and_descendants ","items each "," Array ","class_or_item roots ","class_or_item is_a? ","e root? ! ","e root? ","class_or_item reject ","(send\n  (send\n    (send\n      (lvar :root) :class) :associate_parents\n    (send\n      (lvar :root) :self_and_descendants)) :map) compact ","root class associate_parents map ","root class associate_parents ","root class "," Array  each ","class_or_item roots  roots ","class_or_item roots  is_a? ","class_or_item roots  reject "]}," CollectiveIdea Acts NestedSet Columns quoted_depth_column_name":{"type":"method","name":"quoted_depth_column_name","children":[],"call":[" connection quote_column_name "," depth_column_name "," connection ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "]}," CollectiveIdea Acts NestedSet Columns depth_column_name":{"type":"method","name":"depth_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model move_to":{"type":"method","name":"move_to","children":[],"call":[" reload_nested_set "," set_depth! ","target reload_nested_set "," nested_set_scope update_all "," id ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + + "," class base_class primary_key "," class base_class "," class ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + + "," quoted_right_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + + + "," quoted_left_column_name ","(begin\n  (send nil :quoted_left_column_name)) + + + + ","(begin\n  (send nil :quoted_left_column_name)) + + + ","(begin\n  (send nil :quoted_left_column_name)) + + ","(begin\n  (send nil :quoted_left_column_name)) + "," nested_set_scope ","target [] "," parent_column_name ","target id "," class base_class select lock where "," class base_class select lock "," class base_class select ","(send\n  (self) :[]\n  (send nil :left_column_name)) sort "," [] "," right_column_name "," left_column_name ","bound == "," [] - "," [] + ","bound - ","bound > "," raise ","target [] + "," move_possible? ","position == "," nested_set_scope find ","position != ","target is_a? "," in_tenacious_transaction "," run_callbacks "," new_record? "," children each "," children "," descendants each "," descendants "," quoted_right_column_full_name "," quoted_left_column_full_name "," nested_set_scope where update_all "," nested_set_scope where ","(str \"not (\") + + + + + + + + + + + + + + ","(str \"not (\") + + + + + + + + + + + + + ","(str \"not (\") + + + + + + + + + + + + ","(str \"not (\") + + + + + + + + + + + ","(str \"not (\") + + + + + + + + + + ","(str \"not (\") + + + + + + + + + ","(str \"not (\") + + + + + + + + ","(str \"not (\") + + + + + + + ","(str \"not (\") + + + + + + ","(str \"not (\") + + + + + ","(str \"not (\") + + + + ","(str \"not (\") + + + ","(str \"not (\") + + ","(str \"not (\") + "," nested_set_scope find  reload_nested_set "," nested_set_scope find  [] "," nested_set_scope find  id ","bound -  == ","bound -  - ","bound -  > "," nested_set_scope find  [] + "," nested_set_scope find  is_a? "]}," CollectiveIdea Acts NestedSet Model reload_nested_set":{"type":"method","name":"reload_nested_set","children":[],"call":[" reload "," quoted_parent_column_name "," quoted_right_column_name "," quoted_left_column_name "," quoted_parent_column_full_name "," quoted_right_column_full_name "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model destroy_descendants":{"type":"method","name":"destroy_descendants","children":[],"call":[" skip_before_destroy= "," nested_set_scope update_all "," right "," quoted_right_column_name "," nested_set_scope "," quoted_left_column_name "," right - + "," right - "," left "," nested_set_scope delete_all ","model destroy ","model skip_before_destroy= "," descendants each "," descendants "," acts_as_nested_set_options [] == "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," class base_class find "," class base_class "," class "," reload_nested_set "," in_tenacious_transaction "," skip_before_destroy "," left nil? "," right nil? "," nested_set_scope where update_all "," nested_set_scope where "," nested_set_scope where delete_all "," nested_set_scope where select lock "," nested_set_scope where select "," id "," quoted_right_column_full_name "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model in_tenacious_transaction":{"type":"method","name":"in_tenacious_transaction","children":[],"call":[" sleep "," rand * "," rand "," logger info "," logger "," raise ","retry_count < ","error message =~ ","error message "," connection open_transactions zero? "," connection open_transactions "," connection "," transaction "]}," CollectiveIdea Acts NestedSet Model set_default_left_and_right":{"type":"method","name":"set_default_left_and_right","children":[],"call":[" []= ","maxright + "," right_column_name "," left_column_name ","highest_right_row [] "," nested_set_scope find "," nested_set_scope "," quoted_right_column_name "," nested_set_scope limit lock first "," nested_set_scope limit lock "," nested_set_scope limit "," quoted_right_column_full_name "," right_most_bound + "," right_most_bound "," nested_set_scope find  [] "," nested_set_scope limit lock first  [] "]}," CollectiveIdea Acts NestedSet Model set_depth!":{"type":"method","name":"set_depth!","children":[],"call":[" []= "," level "," nested_set_scope where update_all "," quoted_depth_column_name "," nested_set_scope where "," id "," nested_set_scope "," reload "," in_tenacious_transaction "," nested_set_scope column_names map include? "," depth_column_name to_s "," depth_column_name "," nested_set_scope column_names map "," nested_set_scope column_names "," depth_column_name to_sym "," update_depth "," has_depth_column? "," nested_set_scope primary_key_scope update_all "," nested_set_scope primary_key_scope "," primary_id "]}," CollectiveIdea Acts NestedSet Model move_to_new_parent":{"type":"method","name":"move_to_new_parent","children":[],"call":[" move_to_child_of "," move_to_root ","@move_to_new_parent_id nil? "]}," CollectiveIdea Acts NestedSet Model store_new_parent":{"type":"method","name":"store_new_parent","children":[],"call":[" parent_id "," send "," parent_column_name "]}," CollectiveIdea Acts NestedSet Model nested_set_scope":{"type":"method","name":"nested_set_scope","children":[],"call":[" class base_class unscoped scoped "," class base_class unscoped "," class base_class "," class ","options []= ","conditions merge "," [] ","scopes inject ","scopes empty? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge "," quoted_left_column_name ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge "," quoted_left_column_full_name "," class base_class nested_set_scope ","(lvasgn :scopes\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope)))) any? "," class nested_set_scope "," class base_class unscoped nested_set_scope "," add_scope_conditions_to_options "," class base_class default_scoped nested_set_scope "," class base_class default_scoped ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  []= ","(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge  []= "," Array  inject "," Array  empty? "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  [] "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge  [] "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  "," acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge  ","(lvasgn : Array \n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope)))) any? ","(lvasgn :scopes\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge ) :[]\n      (sym :scope)))) any? ","(lvasgn :scopes\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge ) :[]\n      (sym :scope)))) any? "," add_scope_conditions_to_(pair\n  (sym :order)\n  (send nil :quoted_left_column_name)) merge  "," add_scope_conditions_to_(pair\n  (sym :order)\n  (send nil :quoted_left_column_full_name)) merge  "]}," CollectiveIdea Acts NestedSet Model without_self":{"type":"method","name":"without_self","children":[],"call":["scope where "," class primary_key "," class "," class quoted_table_name "," primary_id "," class quoted_primary_column_name "," new_record? "]}," CollectiveIdea Acts NestedSet Model to_text":{"type":"method","name":"to_text","children":[],"call":["(send\n  (send nil :self_and_descendants) :map) join ","node right ","node left ","node parent_id ","node to_s ","node id ","* * ","node level + ","node level "," self_and_descendants map "," self_and_descendants ","node primary_id "]}," CollectiveIdea Acts NestedSet Model move_possible?":{"type":"method","name":"move_possible?","children":[],"call":["(or\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :left))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :left))))\n  (begin\n    (and\n      (send\n        (send nil :left) :<=\n        (send\n          (lvar :target) :right))\n      (send\n        (send nil :right) :>=\n        (send\n          (lvar :target) :right))))) ! "," right >= ","target right "," right "," left <= "," left ","target left "," same_scope? "," != "]}," CollectiveIdea Acts NestedSet Model move_to_root":{"type":"method","name":"move_to_root","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model move_to_child_of":{"type":"method","name":"move_to_child_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model move_to_right_of":{"type":"method","name":"move_to_right_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model move_to_left_of":{"type":"method","name":"move_to_left_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model move_right":{"type":"method","name":"move_right","children":[],"call":[" move_to_right_of "," right_sibling "]}," CollectiveIdea Acts NestedSet Model move_left":{"type":"method","name":"move_left","children":[],"call":[" move_to_left_of "," left_sibling "]}," CollectiveIdea Acts NestedSet Model right_sibling":{"type":"method","name":"right_sibling","children":[],"call":[" siblings where first "," siblings where "," left "," quoted_left_column_name "," class quoted_table_name "," class "," siblings "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model left_sibling":{"type":"method","name":"left_sibling","children":[],"call":[" siblings where order last "," siblings where order "," quoted_left_column_name "," class quoted_table_name "," class "," siblings where "," left "," siblings "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model same_scope?":{"type":"method","name":"same_scope?","children":[],"call":[" send == ","other send "," send "," Array all? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model is_or_is_ancestor_of?":{"type":"method","name":"is_or_is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left <= "," left "]}," CollectiveIdea Acts NestedSet Model is_ancestor_of?":{"type":"method","name":"is_ancestor_of?","children":[],"call":[" same_scope? ","other left < "," right ","other left "," left < "," left "]}," CollectiveIdea Acts NestedSet Model is_or_is_descendant_of?":{"type":"method","name":"is_or_is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left <= ","other left "]}," CollectiveIdea Acts NestedSet Model is_descendant_of?":{"type":"method","name":"is_descendant_of?","children":[],"call":[" same_scope? "," left < ","other right "," left ","other left < ","other left "]}," CollectiveIdea Acts NestedSet Model descendants":{"type":"method","name":"descendants","children":[],"call":[" without_self "," self_and_descendants "]}," CollectiveIdea Acts NestedSet Model self_and_descendants":{"type":"method","name":"self_and_descendants","children":[],"call":[" nested_set_scope where "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model level":{"type":"method","name":"level","children":[],"call":[" ancestors count "," ancestors "," parent_id nil? "," parent_id "," compute_level "]}," CollectiveIdea Acts NestedSet Model leaves":{"type":"method","name":"leaves","children":[],"call":[" descendants where "," quoted_left_column_name "," class quoted_table_name "," class "," quoted_right_column_name "," descendants "," quoted_left_column_full_name "," quoted_right_column_full_name "]}," CollectiveIdea Acts NestedSet Model siblings":{"type":"method","name":"siblings","children":[],"call":[" without_self "," self_and_siblings "]}," CollectiveIdea Acts NestedSet Model self_and_siblings":{"type":"method","name":"self_and_siblings","children":[],"call":[" nested_set_scope where "," parent_id "," parent_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model ancestors":{"type":"method","name":"ancestors","children":[],"call":[" without_self "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet Model self_and_ancestors":{"type":"method","name":"self_and_ancestors","children":[],"call":[" nested_set_scope where "," right "," left "," quoted_right_column_name "," class quoted_table_name "," class "," quoted_left_column_name "," nested_set_scope "," quoted_right_column_full_name "," quoted_left_column_full_name "]}," CollectiveIdea Acts NestedSet Model root":{"type":"method","name":"root","children":[],"call":[" self_and_ancestors where first "," self_and_ancestors where "," parent_column_name "," self_and_ancestors ","current_parent root "," nested_set_scope find "," parent_id "," nested_set_scope "," persisted? "," nested_set_scope find  root "]}," CollectiveIdea Acts NestedSet Model child?":{"type":"method","name":"child?","children":[],"call":[" parent_id nil? ! "," parent_id nil? "," parent_id "," root? ! "," root? "]}," CollectiveIdea Acts NestedSet Model leaf?":{"type":"method","name":"leaf?","children":[],"call":[" right to_i - == "," right to_i - "," left to_i "," left "," right to_i "," right "," persisted? "]}," CollectiveIdea Acts NestedSet Model root?":{"type":"method","name":"root?","children":[],"call":[" parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet Model right":{"type":"method","name":"right","children":[],"call":[" [] "," right_column_name ","target [] "]}," CollectiveIdea Acts NestedSet Model left":{"type":"method","name":"left","children":[],"call":[" [] "," left_column_name ","target [] "]}," CollectiveIdea Acts NestedSet Model parent_id":{"type":"method","name":"parent_id","children":[],"call":[" [] "," parent_column_name ","target [] "]}," CollectiveIdea Acts NestedSet Model ClassMethods sorted_each_with_level":{"type":"method","name":"sorted_each_with_level","children":[],"call":["path length - ","path length ","children each ","children sort_by! ","children empty? ! ","children empty? ","o leaf? ! ","o leaf? ","path << ","o parent_id ","path pop ","path last != ","path last ","path include? ","o parent_id != ","children << ","objects each "]}," CollectiveIdea Acts NestedSet Model ClassMethods leaves":{"type":"method","name":"leaves","children":[],"call":[" where order "," quoted_left_column_name "," where "," quoted_right_column_name "," quoted_left_column_full_name "," quoted_right_column_full_name "," nested_set_scope where "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model ClassMethods roots":{"type":"method","name":"roots","children":[],"call":[" where order "," quoted_left_column_name "," where "," parent_column_name "," quoted_left_column_full_name "," nested_set_scope children_of "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model move_to_child_with_index":{"type":"method","name":"move_to_child_with_index","children":[],"call":[" move_to_left_of ","node children [] ","node children "," move_to_right_of ","node children last ","node children count == ","node children count "," move_to_child_of ","node children empty? "]}," CollectiveIdea Acts NestedSet Model compute_level":{"type":"method","name":"compute_level","children":[],"call":["node level + ","node level "," ancestors count "," ancestors ","node == ","node parent ","association target ","(lvasgn :association\n  (send\n    (lvar :node) :association\n    (sym :parent))) loaded? ","node association ","node respond_to? ","node parent  level + ","node parent  level ","node parent  == ","node parent  parent ","node association  target ","(lvasgn :association\n  (send\n    (lvar :node parent ) :association\n    (sym :parent))) loaded? ","(lvasgn :node association \n  (send\n    (lvar :node) :node association \n    (sym :parent))) loaded? ","node parent  association ","node node association  ","node parent  respond_to? "]}," CollectiveIdea Acts NestedSet Model ClassMethods associate_parents":{"type":"method","name":"associate_parents","children":[],"call":["association set_inverse_instance ","association target= ","id_indexed [] ","object parent_id ","(lvasgn :association\n  (send\n    (lvar :object) :association\n    (sym :parent))) loaded? ! ","(lvasgn :association\n  (send\n    (lvar :object) :association\n    (sym :parent))) loaded? ","object association ","objects each ","objects index_by ","o respond_to? ","objects all? "," add_to_inverse_association ","association loaded? ! ","association loaded? "," primary_column_name to_sym "," primary_column_name ","object association  set_inverse_instance ","object association  target= ","objects index_by  [] ","object id_indexed [] _id ","(lvasgn :association\n  (send\n    (lvar :object) :association\n    (sym :id_indexed [] ))) loaded? ! ","(lvasgn :object association \n  (send\n    (lvar :object) :object association \n    (sym :parent))) loaded? ! ","(lvasgn :association\n  (send\n    (lvar :object) :association\n    (sym :id_indexed [] ))) loaded? ","(lvasgn :object association \n  (send\n    (lvar :object) :object association \n    (sym :parent))) loaded? ","object object association  "," add_to_inverse_object association  ","object association  loaded? ! ","object association  loaded? "]}," CollectiveIdea Acts NestedSet Columns quoted_parent_column_full_name":{"type":"method","name":"quoted_parent_column_full_name","children":[],"call":[" quoted_parent_column_name "," quoted_table_name "]}," CollectiveIdea Acts NestedSet Columns quoted_right_column_full_name":{"type":"method","name":"quoted_right_column_full_name","children":[],"call":[" quoted_right_column_name "," quoted_table_name "]}," CollectiveIdea Acts NestedSet Columns quoted_left_column_full_name":{"type":"method","name":"quoted_left_column_full_name","children":[],"call":[" quoted_left_column_name "," quoted_table_name "]}," CollectiveIdea Acts NestedSet Columns order_column":{"type":"method","name":"order_column","children":[],"call":[" left_column_name "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model move_to_ordered_child_of":{"type":"method","name":"move_to_ordered_child_of","children":[],"call":[" move_to_left_of ","parent children [] ","parent children "," move_to_right_of ","parent children count > ","parent children count "," move_to_child_of ","n send > "," send ","n send ","n send < ","parent children each "," move_to_root "]}," CollectiveIdea Acts NestedSet Tree set_right!":{"type":"method","name":"set_right!","children":[],"call":["node []= "," increment_indice! "," right_column_name "]}," CollectiveIdea Acts NestedSet Tree set_left!":{"type":"method","name":"set_left!","children":[],"call":["node []= "," increment_indice! "," left_column_name "]}," CollectiveIdea Acts NestedSet Tree root_nodes":{"type":"method","name":"root_nodes","children":[],"call":[" model where order "," order_for_rebuild "," model where "," quoted_parent_column_full_name "," model "]}," CollectiveIdea Acts NestedSet Tree node_children":{"type":"method","name":"node_children","children":[],"call":[" model where order "," order_for_rebuild "," model where ","node primary_id "," scope_for_rebuild call "," scope_for_rebuild "," quoted_parent_column_full_name "," model "]}," CollectiveIdea Acts NestedSet Tree set_left_and_rights":{"type":"method","name":"set_left_and_rights","children":[],"call":["node save! "," validate_nodes "," set_right! "," set_left_and_rights "," node_children each "," node_children "," set_left! "]}," CollectiveIdea Acts NestedSet Tree increment_indice!":{"type":"method","name":"increment_indice!","children":[],"call":[" indices [] "," scope_for_rebuild call "," scope_for_rebuild "," indices "]}," CollectiveIdea Acts NestedSet Tree rebuild!":{"type":"method","name":"rebuild!","children":[],"call":[" set_left_and_rights "," indices [] "," scope_for_rebuild call "," scope_for_rebuild "," indices "," root_nodes each "," root_nodes "," model valid? "," model "," reset_counter_cache "]}," CollectiveIdea Acts NestedSet Tree initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CollectiveIdea Acts NestedSet SetValidator bounds_outside_parent":{"type":"method","name":"bounds_outside_parent","children":[],"call":[" arel_table [] lteq or "," arel_table [] gteq "," parent [] "," right_column_name "," parent "," arel_table [] "," arel_table "," arel_table [] lteq "," left_column_name "]}," CollectiveIdea Acts NestedSet SetValidator parent_not_null":{"type":"method","name":"parent_not_null","children":[],"call":[" arel_table [] not_eq "," arel_table [] "," parent_column_name "," arel_table "]}," CollectiveIdea Acts NestedSet SetValidator left_bound_greater_than_right":{"type":"method","name":"left_bound_greater_than_right","children":[],"call":[" arel_table [] gteq "," arel_table [] "," right_column_name "," arel_table "," left_column_name "]}," CollectiveIdea Acts NestedSet SetValidator bound_is_null":{"type":"method","name":"bound_is_null","children":[],"call":[" arel_table [] eq "," arel_table [] "," arel_table "]}," CollectiveIdea Acts NestedSet SetValidator filter_scope":{"type":"method","name":"filter_scope","children":[],"call":[" scope= "," scope where "," bound_is_null or or or "," parent_not_null and "," bounds_outside_parent "," parent_not_null "," bound_is_null or or "," left_bound_greater_than_right "," bound_is_null or "," bound_is_null "," right_column_name "," left_column_name "," scope "]}," CollectiveIdea Acts NestedSet SetValidator join_scope":{"type":"method","name":"join_scope","children":[],"call":[" scope= "," scope joins ","join_arel join_sql "," scope "," arel_table join on "," parent [] eq "," arel_table [] "," parent_column_name "," arel_table "," parent [] "," primary_column_name "," parent "," arel_table join "," primary_key ","join_arel join_sources "," arel_table join on  join_sql "," arel_table join on  join_sources "]}," CollectiveIdea Acts NestedSet SetValidator query":{"type":"method","name":"query","children":[],"call":[" filter_scope "," join_scope "]}," CollectiveIdea Acts NestedSet SetValidator valid?":{"type":"method","name":"valid?","children":[],"call":[" query count == "," query count "," query "]}," CollectiveIdea Acts NestedSet SetValidator initialize":{"type":"method","name":"initialize","children":[],"call":[" arel_table alias "," arel_table ","model all "]}," CollectiveIdea Acts NestedSet Move target_bound":{"type":"method","name":"target_bound","children":[],"call":[" raise "," position "," nested_set_scope pluck max + "," nested_set_scope pluck max "," nested_set_scope pluck "," right_column_name "," nested_set_scope "," right + "," right "," target "," left "," nested_set_scope_without_default_scope pluck max + "," nested_set_scope_without_default_scope pluck max "," nested_set_scope_without_default_scope pluck "," nested_set_scope_without_default_scope "]}," CollectiveIdea Acts NestedSet Move prevent_impossible_move":{"type":"method","name":"prevent_impossible_move","children":[],"call":[" raise "," instance move_possible? ! "," instance move_possible? "," target "," instance "," root ! "," root "," instance id "," instance class name "," instance class "," target id "," target class name "," target class "]}," CollectiveIdea Acts NestedSet Move get_boundaries":{"type":"method","name":"get_boundaries","children":[],"call":[" left - "," left "," right + "," right ","(lvasgn :bound\n  (send nil :target_bound)) > "," target_bound ","(lvasgn : target_bound \n  (send nil :target_ target_bound )) > "," target_ target_bound  "]}," CollectiveIdea Acts NestedSet Move new_parent_id":{"type":"method","name":"new_parent_id","children":[],"call":[" target [] "," parent_column_name "," target "," target primary_id "," position "]}," CollectiveIdea Acts NestedSet Move root":{"type":"method","name":"root","children":[],"call":[" position == "," position "]}," CollectiveIdea Acts NestedSet Move lock_nodes_between!":{"type":"method","name":"lock_nodes_between!","children":[],"call":[" instance_base_class right_of left_of_right_side select lock "," instance_base_class right_of left_of_right_side select "," primary_column_name "," instance_base_class right_of left_of_right_side "," instance_base_class right_of "," instance_base_class "," instance_base_class nested_set_scope right_of left_of_right_side select lock "," instance_base_class nested_set_scope right_of left_of_right_side select "," instance_base_class nested_set_scope right_of left_of_right_side "," instance_base_class nested_set_scope right_of "," instance_base_class nested_set_scope "," instance_base_class default_scoped nested_set_scope right_of left_of_right_side select lock "," instance_base_class default_scoped nested_set_scope right_of left_of_right_side select "," instance_base_class default_scoped nested_set_scope right_of left_of_right_side "," instance_base_class default_scoped nested_set_scope right_of "," instance_base_class default_scoped nested_set_scope "," instance_base_class default_scoped "]}," CollectiveIdea Acts NestedSet Move case_condition_for_parent":{"type":"method","name":"case_condition_for_parent","children":[],"call":["(begin\n  (send nil :quoted_parent_column_name)) + + "," quoted_parent_column_name ","(begin\n  (send nil :quoted_parent_column_name)) + "," quoted_primary_column_name "," instance_base_class primary_key "," instance_base_class "]}," CollectiveIdea Acts NestedSet Move case_condition_for_direction":{"type":"method","name":"case_condition_for_direction","children":[],"call":["(begin\n  (lvar :column)) + + + + + ","(begin\n  (lvar :column)) + + + + ","(begin\n  (lvar :column)) + + + ","(begin\n  (lvar :column)) + + ","(begin\n  (lvar :column)) + "," send ","(begin\n  (lvar : send )) + + + + + ","(begin\n  (lvar : send )) + + + + ","(begin\n  (lvar : send )) + + + ","(begin\n  (lvar : send )) + + ","(begin\n  (lvar : send )) + "]}," CollectiveIdea Acts NestedSet Move conditions":{"type":"method","name":"conditions","children":[],"call":["Time  now utc ","Time  now "," new_parent_id "," instance primary_id "," instance ","_conditions << ","@instance respond_to? "," case_condition_for_direction + + "," case_condition_for_parent "," case_condition_for_direction + "," case_condition_for_direction "," new_parent "," instance id "," case_condition_for_direction + +  << "]}," CollectiveIdea Acts NestedSet Move where_statement":{"type":"method","name":"where_statement","children":[],"call":[" instance_arel_table [] in or "," instance_arel_table [] in "," instance_arel_table [] "," right_column_name "," instance_arel_table "," left_column_name "," instance_arel_table [] between or "," instance_arel_table [] between "]}," CollectiveIdea Acts NestedSet Move move":{"type":"method","name":"move","children":[],"call":[" nested_set_scope where update_all "," conditions "," nested_set_scope where "," where_statement "," nested_set_scope "," lock_nodes_between! ","(send nil :left) sort "," right "," left ","bound == "," get_boundaries "," prevent_impossible_move "," nested_set_scope_without_default_scope where update_all "," nested_set_scope_without_default_scope where "," nested_set_scope_without_default_scope "]}," CollectiveIdea Acts NestedSet Move initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CollectiveIdea Acts NestedSet Model reload_target":{"type":"method","name":"reload_target","children":[],"call":[" nested_set_scope where first! "," nested_set_scope where "," primary_column_name "," nested_set_scope ","position != ","target reload ","target is_a? "," class base_class "," class "," nested_set_scope find "," nested_set_scope_without_default_scope where first! "," nested_set_scope_without_default_scope where "," nested_set_scope_without_default_scope "]}," CollectiveIdea Acts NestedSet Model change_descendants_depth!":{"type":"method","name":"change_descendants_depth!","children":[],"call":[" descendants update_all ","diff abs "," quoted_depth_column_name "," descendants ","++- [] ","diff <=> ","diff != "," leaf? ! "," leaf? "]}," CollectiveIdea Acts NestedSet Model update_depth":{"type":"method","name":"update_depth","children":[],"call":[" []= "," depth_column_name "," nested_set_scope primary_key_scope update_all "," quoted_depth_column_name "," nested_set_scope primary_key_scope "," primary_id "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model set_depth_for_self_and_descendants!":{"type":"method","name":"set_depth_for_self_and_descendants!","children":[],"call":[" change_descendants_depth! ","new_depth - "," update_depth "," level "," [] "," depth_column_name "," self_and_descendants select lock "," self_and_descendants select "," primary_column_name "," self_and_descendants "," reload "," in_tenacious_transaction "," has_depth_column? "," level  - "]}," CollectiveIdea Acts NestedSet Model right_most_bound":{"type":"method","name":"right_most_bound","children":[],"call":[" right_most_node [] "," right_column_name "," right_most_node "," right_most_node lock! "," right_most_node nil? "]}," CollectiveIdea Acts NestedSet Model right_most_node":{"type":"method","name":"right_most_node","children":[],"call":[" class base_class unscoped nested_set_scope first "," class base_class unscoped nested_set_scope "," quoted_right_column_full_name "," class base_class unscoped "," class base_class "," class "," nested_set_scope first "," nested_set_scope "," nested_set_scope_without_default_scope first "," nested_set_scope_without_default_scope "," right_column_name "]}," CollectiveIdea Acts NestedSet Model has_depth_column?":{"type":"method","name":"has_depth_column?","children":[],"call":[" nested_set_scope column_names map include? "," depth_column_name to_s "," depth_column_name "," nested_set_scope column_names map "," nested_set_scope column_names "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model primary_id":{"type":"method","name":"primary_id","children":[],"call":["target [] "," primary_column_name "]}," CollectiveIdea Acts NestedSet Model ClassMethods primary_key_scope":{"type":"method","name":"primary_key_scope","children":[],"call":[" where "," arel_table [] eq "," arel_table [] "," primary_column_name "," arel_table "," primary_key "]}," CollectiveIdea Acts NestedSet Model ClassMethods nested_set_scope":{"type":"method","name":"nested_set_scope","children":[],"call":[" where order ","options delete "," where ","options [] ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_full_name)) merge "," quoted_order_column_full_name ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_name)) merge "," quoted_order_column_name ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column)\n      (sym :asc)))) merge "," order_column ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column_name)\n      (sym :asc)))) merge "," order_column_name "," default_scoped where order "," default_scoped where "," default_scoped "," scope_order_from_options "," where  scope_order_from_options  ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_full_name)) merge  delete ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_name)) merge  delete ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column)\n      (sym :asc)))) merge  delete ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column_name)\n      (sym :asc)))) merge  delete ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_full_name)) merge  [] ","(pair\n  (sym :order)\n  (send nil :quoted_order_column_name)) merge  [] ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column)\n      (sym :asc)))) merge  [] ","(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column_name)\n      (sym :asc)))) merge  [] ","(pair\n  (sym : scope_order_from_options )\n  (send nil :quoted_ scope_order_from_options _column_full_name)) merge "," quoted_ scope_order_from_options _column_full_name ","(pair\n  (sym : scope_order_from_options )\n  (send nil :quoted_ scope_order_from_options _column_name)) merge "," quoted_ scope_order_from_options _column_name ","(pair\n  (sym : scope_order_from_options )\n  (hash\n    (pair\n      (send nil : scope_order_from_options _column)\n      (sym :asc)))) merge ","  scope_order_from_options _column ","(pair\n  (sym : scope_order_from_options )\n  (hash\n    (pair\n      (send nil : scope_order_from_options _column_name)\n      (sym :asc)))) merge ","  scope_order_from_options _column_name "," default_scoped where  scope_order_from_options  "," scope_order_from_(pair\n  (sym :order)\n  (send nil :quoted_order_column_full_name)) merge  "," scope_order_from_(pair\n  (sym :order)\n  (send nil :quoted_order_column_name)) merge  "," scope_order_from_(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column)\n      (sym :asc)))) merge  "," scope_order_from_(pair\n  (sym :order)\n  (hash\n    (pair\n      (send nil :order_column_name)\n      (sym :asc)))) merge  "," scope_ scope_order_from_options _from_options "]}," CollectiveIdea Acts NestedSet Model ClassMethods right_of":{"type":"method","name":"right_of","children":[],"call":[" where "," arel_table [] gteq "," arel_table [] "," left_column_name "," arel_table "]}," CollectiveIdea Acts NestedSet Model ClassMethods left_of_right_side":{"type":"method","name":"left_of_right_side","children":[],"call":[" where "," arel_table [] lteq "," arel_table [] "," right_column_name "," arel_table "]}," CollectiveIdea Acts NestedSet Model ClassMethods left_of":{"type":"method","name":"left_of","children":[],"call":[" where "," arel_table [] lt "," arel_table [] "," left_column_name "," arel_table "]}," CollectiveIdea Acts NestedSet Model ClassMethods children_of":{"type":"method","name":"children_of","children":[],"call":[" where "," arel_table [] eq "," arel_table [] "," parent_column_name "," arel_table "]}," CollectiveIdea Acts NestedSet Model ClassMethods add_to_inverse_association":{"type":"method","name":"add_to_inverse_association","children":[],"call":["inverse loaded! ","inverse target << ","association owner ","inverse target ","record association ","inverse_reflection name ","association send ","record association  loaded! ","record association  target << ","record association  target ","record association _reflection name ","association send  name "]}," CollectiveIdea Acts NestedSet Model Validatable scope_string":{"type":"method","name":"scope_string","children":[],"call":["(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push join ","(send\n  (send nil :Array\n    (send\n      (send nil :acts_as_nested_set_options) :[]\n      (sym :scope))) :map) push "," connection quote_column_name "," connection "," Array map "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model Validatable roots_grouped_by_scope":{"type":"method","name":"roots_grouped_by_scope","children":[],"call":["record send "," scope_column_names collect "," scope_column_names ","roots_to_group group_by "]}," CollectiveIdea Acts NestedSet Model Validatable each_root_valid?":{"type":"method","name":"each_root_valid?","children":[],"call":["root right ","root left ","(and\n  (send\n    (send\n      (lvar :root) :left) :>\n    (lvar :left))\n  (send\n    (send\n      (lvar :root) :right) :>\n    (lvar :right))) tap ","root right > ","root left > ","roots_to_validate all? ","reordered_roots all? "," roots_reordered_by_column "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","root root right  ","root root left  ","(and\n  (send\n    (send\n      (lvar :root) :left) :>\n    (lvar :left))\n  (send\n    (send\n      (lvar :root) :root right ) :>\n    (lvar :root right ))) tap ","(and\n  (send\n    (send\n      (lvar :root) :root left ) :>\n    (lvar :root left ))\n  (send\n    (send\n      (lvar :root) :right) :>\n    (lvar :right))) tap ","root root right  > ","root root left  > "," roots_reordered_by_column  all? "]}," CollectiveIdea Acts NestedSet Model Validatable all_roots_valid_by_scope?":{"type":"method","name":"all_roots_valid_by_scope?","children":[],"call":[" each_root_valid? "," roots_grouped_by_scope all? "," roots_grouped_by_scope "]}," CollectiveIdea Acts NestedSet Model Validatable all_roots_valid?":{"type":"method","name":"all_roots_valid?","children":[],"call":[" each_root_valid? "," roots "," all_roots_valid_by_scope? "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model Validatable no_duplicates_for_columns?":{"type":"method","name":"no_duplicates_for_columns?","children":[],"call":[" select group having order first nil? "," select group having order first "," select group having order "," quoted_primary_key_column_full_name "," select group having "," select group "," scope_string "," select ","(send nil :quoted_left_column_full_name) all? "," quoted_right_column_full_name "," quoted_left_column_full_name "," select group having first nil? "," select group having first "," primary_column_name "]}," CollectiveIdea Acts NestedSet Model Validatable left_and_rights_valid?":{"type":"method","name":"left_and_rights_valid?","children":[],"call":["SetValidator  new valid? ","SetValidator  new "]}," CollectiveIdea Acts NestedSet Model Validatable valid?":{"type":"method","name":"valid?","children":[],"call":[" all_roots_valid? "," no_duplicates_for_columns? "," left_and_rights_valid? "]}," CollectiveIdea Acts NestedSet Model Transactable in_tenacious_transaction":{"type":"method","name":"in_tenacious_transaction","children":[],"call":[" sleep "," rand * "," rand "," logger info "," logger "," raise ","retry_count < ","error message =~ ","error message "," class connection open_transactions zero? "," class connection open_transactions "," class connection "," class "," transaction "," connection open_transactions zero? "," connection open_transactions "," connection ","DeadlockDetected  new ","OpenTransactionsIsNotZero  new "]}," CollectiveIdea Acts NestedSet Model Relatable within_node?":{"type":"method","name":"within_node?","children":[],"call":["within left < ","node right ","within left ","node left < ","node left "]}," CollectiveIdea Acts NestedSet Model Relatable determine_depth":{"type":"method","name":"determine_depth","children":[],"call":["node parent ","association target ","(lvasgn :association\n  (send\n    (lvar :node) :association\n    (sym :parent))) loaded? ","node association ","node respond_to? ","node parent  parent ","node association  target ","(lvasgn :association\n  (send\n    (lvar :node parent ) :association\n    (sym :parent))) loaded? ","(lvasgn :node association \n  (send\n    (lvar :node) :node association \n    (sym :parent))) loaded? ","node parent  association ","node node association  ","node parent  respond_to? "]}," CollectiveIdea Acts NestedSet Model Relatable compute_level":{"type":"method","name":"compute_level","children":[],"call":["node level + ","node level "," ancestors count "," ancestors ","node == "," determine_depth "]}," CollectiveIdea Acts NestedSet Model Relatable root":{"type":"method","name":"root","children":[],"call":["current_parent root "," nested_set_scope where first! "," nested_set_scope where "," parent_id "," primary_column_name "," nested_set_scope "," self_and_ancestors children_of first "," self_and_ancestors children_of "," self_and_ancestors "," persisted? "," nested_set_scope find "," nested_set_scope where first!  root "," nested_set_scope find  root "]}," CollectiveIdea Acts NestedSet Model Relatable right_sibling":{"type":"method","name":"right_sibling","children":[],"call":[" siblings right_of first "," siblings right_of "," left "," siblings "]}," CollectiveIdea Acts NestedSet Model Relatable left_sibling":{"type":"method","name":"left_sibling","children":[],"call":[" siblings left_of last "," siblings left_of "," left "," siblings "]}," CollectiveIdea Acts NestedSet Model Relatable same_scope?":{"type":"method","name":"same_scope?","children":[],"call":[" send == ","other send "," send "," Array all? "," Array "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Model Relatable is_or_is_ancestor_of?":{"type":"method","name":"is_or_is_ancestor_of?","children":[],"call":[" same_scope? "," within_node? "," == "]}," CollectiveIdea Acts NestedSet Model Relatable is_ancestor_of?":{"type":"method","name":"is_ancestor_of?","children":[],"call":[" same_scope? "," within_node? "]}," CollectiveIdea Acts NestedSet Model Relatable is_or_is_descendant_of?":{"type":"method","name":"is_or_is_descendant_of?","children":[],"call":[" same_scope? "," within_node? ","other == "]}," CollectiveIdea Acts NestedSet Model Relatable is_descendant_of?":{"type":"method","name":"is_descendant_of?","children":[],"call":[" same_scope? "," within_node? "]}," CollectiveIdea Acts NestedSet Model Relatable self_and_descendants":{"type":"method","name":"self_and_descendants","children":[],"call":[" nested_set_scope right_of left_of "," right "," nested_set_scope right_of "," left "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model Relatable descendants":{"type":"method","name":"descendants","children":[],"call":[" without_self "," self_and_descendants "]}," CollectiveIdea Acts NestedSet Model Relatable level":{"type":"method","name":"level","children":[],"call":[" compute_level "," parent_id nil? "," parent_id "]}," CollectiveIdea Acts NestedSet Model Relatable leaves":{"type":"method","name":"leaves","children":[],"call":[" descendants where "," quoted_left_column_full_name "," quoted_right_column_full_name "," descendants "]}," CollectiveIdea Acts NestedSet Model Relatable self_and_siblings":{"type":"method","name":"self_and_siblings","children":[],"call":[" nested_set_scope children_of "," parent_id "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model Relatable siblings":{"type":"method","name":"siblings","children":[],"call":[" without_self "," self_and_siblings "]}," CollectiveIdea Acts NestedSet Model Relatable self_and_ancestors":{"type":"method","name":"self_and_ancestors","children":[],"call":[" nested_set_scope where where "," arel_table [] gteq "," right "," arel_table [] "," right_column_name "," arel_table "," nested_set_scope where "," arel_table [] lteq "," left "," left_column_name "," nested_set_scope "]}," CollectiveIdea Acts NestedSet Model Relatable ancestors":{"type":"method","name":"ancestors","children":[],"call":[" without_self "," self_and_ancestors "]}," CollectiveIdea Acts NestedSet Model Rebuildable order_for_rebuild":{"type":"method","name":"order_for_rebuild","children":[],"call":[" primary_key "," quoted_right_column_full_name "," quoted_left_column_full_name "," right_column_name "," left_column_name "]}," CollectiveIdea Acts NestedSet Model Rebuildable scope_for_rebuild":{"type":"method","name":"scope_for_rebuild","children":[],"call":["str << "," connection quote_column_name "," connection "," connection quote ","column_value nil? ","node send "," scope_column_names inject "," scope_column_names "," proc "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","node send  nil? "]}," CollectiveIdea Acts NestedSet Model Rebuildable rebuild!":{"type":"method","name":"rebuild!","children":[],"call":["Tree  new rebuild! ","Tree  new "," unscoped "]}," CollectiveIdea Acts NestedSet Model Prunable diff":{"type":"method","name":"diff","children":[],"call":[" right - + "," right - "," left "," right "]}," CollectiveIdea Acts NestedSet Model Prunable update_siblings":{"type":"method","name":"update_siblings","children":[],"call":[" nested_set_scope where update_all "," diff "," nested_set_scope where "," right "," nested_set_scope "," send "]}," CollectiveIdea Acts NestedSet Model Prunable update_siblings_for_remaining_nodes":{"type":"method","name":"update_siblings_for_remaining_nodes","children":[],"call":[" update_siblings "]}," CollectiveIdea Acts NestedSet Model Prunable destroy_or_delete_descendants":{"type":"method","name":"destroy_or_delete_descendants","children":[],"call":[" descendants delete_all "," descendants "," errors add "," errors "," class human_attribute_name downcase "," class human_attribute_name "," class "," leaf? "," acts_as_nested_set_options [] == "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," raise ","ActiveRecord DeleteRestrictionError  new ","model destroy ","model skip_before_destroy= "," descendants each "," descendants update_all ","Rails VERSION MAJOR  < "," parent_column_name "," throw "]}," CollectiveIdea Acts NestedSet Model Prunable destroy_descendants":{"type":"method","name":"destroy_descendants","children":[],"call":[" skip_before_destroy= "," reload "," update_siblings_for_remaining_nodes "," destroy_or_delete_descendants "," nested_set_scope right_of select lock "," nested_set_scope right_of select "," primary_id "," nested_set_scope right_of "," left "," nested_set_scope "," reload_nested_set "," in_tenacious_transaction "," skip_before_destroy "," left nil? "," right nil? "," right "," id "]}," CollectiveIdea Acts NestedSet Model Movable within_bounds?":{"type":"method","name":"within_bounds?","children":[],"call":[" out_of_bounds? ! "," out_of_bounds? "]}," CollectiveIdea Acts NestedSet Model Movable prevent_unpersisted_move":{"type":"method","name":"prevent_unpersisted_move","children":[],"call":[" raise "," new_record? "]}," CollectiveIdea Acts NestedSet Model Movable out_of_bounds?":{"type":"method","name":"out_of_bounds?","children":[],"call":[" right >= "," right "," left <= "," left "]}," CollectiveIdea Acts NestedSet Model Movable move_to_new_parent":{"type":"method","name":"move_to_new_parent","children":[],"call":[" move_to_child_of "," move_to_root ","@move_to_new_parent_id nil? "]}," CollectiveIdea Acts NestedSet Model Movable after_move_to":{"type":"method","name":"after_move_to","children":[],"call":[" reload_nested_set "," set_depth_for_self_and_descendants! ","target reload_nested_set "," descendants each "," descendants "," set_depth! "]}," CollectiveIdea Acts NestedSet Model Movable move_to":{"type":"method","name":"move_to","children":[],"call":[" after_move_to ","Move  new move ","Move  new "," reload_nested_set "," reload_target "," in_tenacious_transaction "," run_callbacks "," prevent_unpersisted_move "," update_counter_cache "," reload_ reload_target  "]}," CollectiveIdea Acts NestedSet Model Movable find_left_neighbor":{"type":"method","name":"find_left_neighbor","children":[],"call":["n send > "," send ","n send ","n send < ","parent children each ","parent children "]}," CollectiveIdea Acts NestedSet Model Movable move_to_ordered_child_of":{"type":"method","name":"move_to_ordered_child_of","children":[],"call":[" move_to_left_of ","parent children [] ","parent children "," move_to_right_of ","parent children many? "," move_to_child_of "," find_left_neighbor "," move_to_root "," find_ find_left_neighbor  "]}," CollectiveIdea Acts NestedSet Model Movable move_to_root":{"type":"method","name":"move_to_root","children":[],"call":[" move_to "," move_to_right_of "," root "]}," CollectiveIdea Acts NestedSet Model Movable move_to_child_with_index":{"type":"method","name":"move_to_child_with_index","children":[],"call":[" move_to_left_of ","node children [] ","node children ","my_position == "," move_to_right_of ","my_position < ","node children index ","node children last ","node children count == ","node children count "," move_to_child_of ","node children empty? ","node children to_a index ","node children to_a ","node children index  == ","node children to_a index  == ","node children index  < ","node children to_a index  < "]}," CollectiveIdea Acts NestedSet Model Movable move_to_child_of":{"type":"method","name":"move_to_child_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model Movable move_to_right_of":{"type":"method","name":"move_to_right_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model Movable move_to_left_of":{"type":"method","name":"move_to_left_of","children":[],"call":[" move_to "]}," CollectiveIdea Acts NestedSet Model Movable move_right":{"type":"method","name":"move_right","children":[],"call":[" move_to_right_of "," right_sibling "]}," CollectiveIdea Acts NestedSet Model Movable move_left":{"type":"method","name":"move_left","children":[],"call":[" move_to_left_of "," left_sibling "]}," CollectiveIdea Acts NestedSet Model Movable move_possible?":{"type":"method","name":"move_possible?","children":[],"call":[" within_bounds? ","target right ","target left "," same_scope? "," != "]}," CollectiveIdea Acts NestedSet Iterator each_with_level":{"type":"method","name":"each_with_level","children":[],"call":["path length - ","path length ","path << ","o parent_id ","path pop ","path last != ","path last ","path include? ","o parent_id != "," objects each "," objects "]}," CollectiveIdea Acts NestedSet Iterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CollectiveIdea Acts NestedSet Columns quoted_order_column_full_name":{"type":"method","name":"quoted_order_column_full_name","children":[],"call":[" quoted_order_column_name "," quoted_table_name "]}," CollectiveIdea Acts NestedSet Columns quoted_primary_key_column_full_name":{"type":"method","name":"quoted_primary_key_column_full_name","children":[],"call":[" quoted_primary_column_name "," quoted_table_name ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection "]}," CollectiveIdea Acts NestedSet Columns quoted_order_column_name":{"type":"method","name":"quoted_order_column_name","children":[],"call":["ActiveRecord Base  connection quote_column_name "," order_column ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "," order_column_name "]}," CollectiveIdea Acts NestedSet Columns quoted_primary_column_name":{"type":"method","name":"quoted_primary_column_name","children":[],"call":["ActiveRecord Base  connection quote_column_name "," primary_column_name ","ActiveRecord Base  connection "," model_connection quote_column_name "," model_connection "]}," CollectiveIdea Acts NestedSet Columns primary_column_name":{"type":"method","name":"primary_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_prevent_assignment_to_reserved_columns!":{"type":"method","name":"acts_as_nested_set_prevent_assignment_to_reserved_columns!","children":[],"call":[" module_eval ","(send nil :left_column_name) each "," depth_column_name "," right_column_name "," left_column_name "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_parse_options!":{"type":"method","name":"acts_as_nested_set_parse_options!","children":[],"call":[" acts_as_nested_set_options= "," class_attribute ","options []= ","(begin\n  (send\n    (lvar :options) :[]\n    (sym :scope))) intern ","options [] ","options [] to_s !~ ","options [] to_s ","options [] is_a? "," acts_as_nested_set_default_options merge "," acts_as_nested_set_default_options "," acts_as_nested_set_ acts_as_nested_set_default_options merge = "," acts_as_nested_set_default_options merge  []= ","(begin\n  (send\n    (lvar : acts_as_nested_set_default_options merge ) :[]\n    (sym :scope))) intern "," acts_as_nested_set_default_options merge  [] "," acts_as_nested_set_default_options merge  [] to_s !~ "," acts_as_nested_set_default_options merge  [] to_s "," acts_as_nested_set_default_options merge  [] is_a? "," acts_as_nested_set_default_ acts_as_nested_set_default_options merge  merge "," acts_as_nested_set_default_ acts_as_nested_set_default_options merge  "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_default_options":{"type":"method","name":"acts_as_nested_set_default_options","children":[],"call":["(pair\n  (sym :parent_column)\n  (str \"parent_id\")) freeze "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_relate_parent!":{"type":"method","name":"acts_as_nested_set_relate_parent!","children":[],"call":[" belongs_to "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," primary_column_name "," parent_column_name "," base_class to_s "," base_class ","options []= ","ActiveRecord VERSION MAJOR  >= "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_relate_children!":{"type":"method","name":"acts_as_nested_set_relate_children!","children":[],"call":[" has_many "," order "," quoted_order_column_name "," lambda ","has_many_children_options update "," acts_as_nested_set_options [] "," acts_as_nested_set_options ","(sym :before_add) each "," primary_column_name "," parent_column_name "," base_class to_s "," base_class ","has_many_children_options delete "," quoted_order_column_full_name "," order_column "," order_column_name "]}," CollectiveIdea Acts NestedSet acts_as_nested_set_define_callbacks!":{"type":"method","name":"acts_as_nested_set_define_callbacks!","children":[],"call":[" define_model_callbacks "," before_destroy "," after_save "," before_save "," before_create "]}," CollectiveIdea Acts NestedSet Move new_parent":{"type":"method","name":"new_parent","children":[],"call":[" target [] "," parent_column_name "," target "," target id "," position "]}," CollectiveIdea Acts NestedSet Model nested_set_scope_without_default_scope":{"type":"method","name":"nested_set_scope_without_default_scope","children":[],"call":[" nested_set_scope "," class unscoped "," class "," class base_class unscoped "," class base_class "," class base_class nested_set_scope_without_default_scope "," add_scope_conditions_to_options "," class base_class unscoped nested_set_scope "]}," CollectiveIdea Acts NestedSet Columns model_connection":{"type":"method","name":"model_connection","children":[],"call":[" class connection "," class "," connection "," is_a? "]}," CollectiveIdea Acts NestedSet Tree reset_counter_cache":{"type":"method","name":"reset_counter_cache","children":[],"call":[" reset_counter_cache ","node children each ","node children ","node class reset_counters ","node id ","node class "," counter_cache_column_name "]}," CollectiveIdea Acts NestedSet Model update_counter_cache":{"type":"method","name":"update_counter_cache","children":[],"call":[" class increment_counter "," acts_as_nested_set_options [] "," acts_as_nested_set_options "," class "," reload parent "," reload "," class decrement_counter "," parent ","new_parent class increment_counter ","new_parent class ","old_parent class decrement_counter ","old_parent class "," reload parent  class increment_counter "," reload parent  class "," parent  class decrement_counter "," parent  class "]}," CollectiveIdea Acts NestedSet Model Validatable roots_reordered_by_column":{"type":"method","name":"roots_reordered_by_column","children":[],"call":["a send <=> ","b send ","a send ","roots_to_reorder sort ","roots_to_reorder respond_to? ","roots_to_reorder reorder "]}," CollectiveIdea Acts NestedSet Columns counter_cache_column_name":{"type":"method","name":"counter_cache_column_name","children":[],"call":[" acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Columns order_column_name":{"type":"method","name":"order_column_name","children":[],"call":[" left_column_name "," acts_as_nested_set_options [] "," acts_as_nested_set_options "]}," CollectiveIdea Acts NestedSet Move LegacyWhereStatementExt where_statement":{"type":"method","name":"where_statement","children":[],"call":[" instance_arel_table [] in or "," instance_arel_table [] in "," instance_arel_table [] "," right_column_name "," instance_arel_table "," left_column_name "]}," CollectiveIdea Acts NestedSet Model add_scope_conditions_to_options":{"type":"method","name":"add_scope_conditions_to_options","children":[],"call":["options []= ","(send\n  (lvar :scopes) :map) to_h "," [] ","scopes map ","scopes empty? "," scope_column_names ","(send\n  (lvar : scope_column_names ) :map) to_h "," scope_column_names  map "," scope_column_names  empty? "]}," CollectiveIdea Acts NestedSet Model ClassMethods scope_order_from_options":{"type":"method","name":"scope_order_from_options","children":[],"call":["options fetch "," order_column_name "]}," CollectiveIdea Acts NestedSet Model ClassMethods nested_set_scope_without_default_scope":{"type":"method","name":"nested_set_scope_without_default_scope","children":[],"call":[" unscoped where order "," unscoped where ","options [] "," unscoped "," scope_order_from_options "," unscoped where  scope_order_from_options  "," scope_ scope_order_from_options _from_options "]}}