{" Spring stdin_slave":{"type":"method","name":"stdin_slave","children":[],"call":["master write ","STDIN  read ","STDIN  closed? ","Thread  new ","master raw! ","PTY  open "," system "," at_exit "]}," Spring rails_env_for":{"type":"method","name":"rails_env_for","children":[],"call":["ENV  [] ","command env ","command respond_to? ","Spring  command ","Spring  command  env ","Spring  command  respond_to? ","Spring  Spring  command  "]}," Spring run":{"type":"method","name":"run","children":[],"call":["socket close ","socket read ","socket write ","socket puts ","arg length ","args each ","args length ","socket send_io "," stdin_slave ","UNIXSocket  open "," env socket_name "," env "," rails_env_for ","args first "," boot_server "," server_running? ","application close ","application read ","application write ","application puts ","application send_io ","status == ","client close ","server close ","server read ","server puts ","server send_io ","UNIXSocket  pair "," forward_signals ","pid to_i ","pid empty? ","server gets chomp ","server gets "," print_help "," run_command "," class command_registered? "," class ","UNIXSocket  open  close ","UNIXSocket  open  read ","UNIXSocket  open  write ","UNIXSocket  open  puts ","UNIXSocket  open  send_io "," env UNIXSocket  open _name "," boot_UNIXSocket  open  "," UNIXSocket  open _running? ","server read  == ","server gets chomp  to_i ","server gets chomp  empty? ","UNIXSocket  open  gets chomp ","UNIXSocket  open  gets "]}," Spring boot_server":{"type":"method","name":"boot_server","children":[],"call":[" sleep "," server_running? ","Process  spawn ","SID  pgid "," env socket_path exist? "," env socket_path "," env "," env socket_path unlink "]}," Spring server_running?":{"type":"method","name":"server_running?","children":[],"call":[" env socket_path exist? "," env socket_path "," env ","pidfile close ","pidfile flock ","pidfile flock ! ","File LOCK_EX  | "," env pidfile_path open "," env pidfile_path "," env pidfile_path exist? "," env pidfile_path open  close "," env pidfile_path open  flock "," env pidfile_path open  flock ! "," env  env pidfile_path open _path open "," env  env pidfile_path open _path "," env  env pidfile_path open _path exist? "]}," Spring initialize":{"type":"method","name":"initialize","children":[],"call":["Env  new "]}," Spring SID pgid":{"type":"method","name":"pgid","children":[],"call":[]}," Spring SID sid":{"type":"method","name":"sid","children":[],"call":[]}," Spring Server write_pidfile":{"type":"method","name":"write_pidfile","children":[],"call":[" exit ","STDERR  puts ","file path ","file fsync ","file write ","Process  pid ","file truncate ","file flock ","File LOCK_EX  | "," env pidfile_path open "," env pidfile_path "," env ","@pidfile fsync ","@pidfile write ","@pidfile truncate ","@pidfile flock "," file path "," file ","$stderr puts ","@pidfile path "," env pidfile_path open  path "," env pidfile_path open  fsync "," env pidfile_path open  write "," env pidfile_path open  truncate "," env pidfile_path open  flock "," env pid env pidfile_path open _path open "," env pid env pidfile_path open _path ","@pid env pidfile_path open  fsync ","@pid env pidfile_path open  write ","@pid env pidfile_path open  truncate ","@pid env pidfile_path open  flock ","  env pidfile_path open  path ","  env pidfile_path open  ","@pid env pidfile_path open  path "]}," Spring Server set_exit_hook":{"type":"method","name":"set_exit_hook","children":[],"call":["path unlink ","path exist? ","(send\n  (send nil :env) :socket_path) each "," env pidfile_path "," env "," env socket_path ","Process  pid == ","Process  pid "," at_exit "," shutdown ","@applications values each ","@applications values "]}," Spring Server boot":{"type":"method","name":"boot","children":[],"call":["@applications [] run ","server accept ","@applications [] ","server accept read "," loop ","UNIXServer  open "," env socket_name "," env "," write_pidfile "," set_exit_hook "," trap "," serve "," watch_bundle "," set_process_title "," redirect_output "," ignore_signals "," set_pgid "," start_server ","Spring  verify_environment ","IGNORE_SIGNALS  each ","Time  now "," env app_name ","Process  setpgid ","SID  pgid "," foreground? ","UNIXServer  open  accept ","UNIXServer  open  accept read "," start_UNIXServer  open  "]}," Spring Server initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","ApplicationManager  new ","Hash  new ","Mutex  new ","env pidfile_path open ","env pidfile_path "," env pidfile_path open "," env pidfile_path "," env "," default_env ","options [] ","options fetch "]}," Spring Env pidfile_path":{"type":"method","name":"pidfile_path","children":[],"call":[" tmp_path join ","SID  sid "," tmp_path "," application_id ","Pathname  new "," socket_path dirname join "," socket_path basename "," socket_path "," socket_path dirname ","ENV  [] "]}," Spring Env socket_name":{"type":"method","name":"socket_name","children":[],"call":[" socket_path to_s "," socket_path "]}," Spring Env socket_path":{"type":"method","name":"socket_path","children":[],"call":[" tmp_path join ","SID  sid to_s ","SID  sid "," tmp_path "," application_id ","Pathname  new ","ENV  [] "]}," Spring Env tmp_path":{"type":"method","name":"tmp_path","children":[],"call":["path mkdir ","path exist? "," root join "," root ","FileUtils  mkdir_p "," default_tmp_path ","Pathname  new ","Dir  tmpdir + ","Dir  tmpdir ","File  join ","ENV  [] ","Process  uid "," require "," root join  mkdir "," default_tmp_path  mkdir ","Pathname  new  mkdir "," root join  exist? "," default_tmp_path  exist? ","Pathname  new  exist? "," default_tmp_ root join  "," default_tmp_ default_tmp_path  "," default_tmp_Pathname  new  "]}," Spring Env initialize":{"type":"method","name":"initialize","children":[],"call":["Pathname  new ","File  expand_path ","File  open ","ENV  [] ","options [] "]}," Spring Commands Runner call":{"type":"method","name":"call","children":[],"call":[" require ","ARGV  replace ","Object  const_set ","Rails  root join ","Rails  root "]}," Spring Commands Generate call":{"type":"method","name":"call","children":[],"call":[" require ","ARGV  replace "]}," Spring Commands Generate setup":{"type":"method","name":"setup","children":[],"call":["Rails  application load_generators ","Rails  application "]}," Spring Commands Console call":{"type":"method","name":"call","children":[],"call":[" Rails Console  start "," Rails  application ","ARGV  replace "," require "]}," Spring Commands Console setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Spring Commands Rake call":{"type":"method","name":"call","children":[],"call":[" Rake  application run "," Rake  application ","ARGV  replace "]}," Spring Commands Rake setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Spring Commands RSpec call":{"type":"method","name":"call","children":[],"call":[" RSpec Core Runner  run ","Kernel  exit "]}," Spring Commands RSpec setup":{"type":"method","name":"setup","children":[],"call":[" require ","$LOAD_PATH unshift "," RSpec Core Runner  disable_autorun! "]}," Spring Commands RSpec env":{"type":"method","name":"env","children":[],"call":[]}," Spring Commands Test call":{"type":"method","name":"call","children":[],"call":[" require ","File  expand_path ","args first ","ARGV  replace ","$stderr puts ","Dir  [] each ","Dir  [] ","File  join ","File  directory? ","args size > ","args size ","File  expand_File  expand_path  "]}," Spring Commands Test setup":{"type":"method","name":"setup","children":[],"call":[" require ","$LOAD_PATH unshift "]}," Spring Commands Test env":{"type":"method","name":"env","children":[],"call":[]}," Spring command":{"type":"method","name":"command","children":[],"call":[]}," Spring register_command":{"type":"method","name":"register_command","children":[],"call":[]}," Spring ApplicationWatcher expanded_files":{"type":"method","name":"expanded_files","children":[],"call":[" files + ","Dir  [] "," globs join "," globs "," files "]}," Spring ApplicationWatcher compute_mtime":{"type":"method","name":"compute_mtime","children":[],"call":["(send\n  (send nil :expanded_files) :map) max ","File  mtime to_f ","File  mtime "," expanded_files map "," expanded_files "]}," Spring ApplicationWatcher stale?":{"type":"method","name":"stale?","children":[],"call":[" mtime < "," compute_mtime "," mtime "]}," Spring ApplicationWatcher reset":{"type":"method","name":"reset","children":[],"call":[" compute_mtime "]}," Spring ApplicationWatcher add_globs":{"type":"method","name":"add_globs","children":[],"call":[" reset "," globs concat "," globs "]}," Spring ApplicationWatcher add_files":{"type":"method","name":"add_files","children":[],"call":[" reset "," files uniq! "," files "," files concat ","File  exist? ","new_files select "]}," Spring ApplicationWatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring ApplicationManager start_wait_thread":{"type":"method","name":"start_wait_thread","children":[],"call":[" restart ","status success? "," alive? ! "," alive? "," synchronize ","Process  wait2 "," pid ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","@pid == "," log "," sleep ","child recv empty? ","child recv ","IO  select "," loop ","Process  detach ","Spring  failsafe_thread "]}," Spring ApplicationManager start_child":{"type":"method","name":"start_child","children":[],"call":["child_socket close ","Application  new start ","Application  new ","ENV  []= "," env ","@client close ","s reopen ","(const nil :STDOUT) each "," fork ","UNIXSocket  pair "," app_env "," spring_env app_name "," spring_env ","ProcessTitleUpdater  run ","(send\n  (send\n    (send\n      (const nil :ObjectSpace) :each_object\n      (const nil :IO)) :to_a) :-\n  (array\n    (const nil :STDOUT)\n    (const nil :STDERR)\n    (const nil :STDIN)\n    (lvar :child_socket))) reject each ","(send\n  (send\n    (send\n      (const nil :ObjectSpace) :each_object\n      (const nil :IO)) :to_a) :-\n  (array\n    (const nil :STDOUT)\n    (const nil :STDERR)\n    (const nil :STDIN)\n    (lvar :child_socket))) reject ","ObjectSpace  each_object to_a - ","ObjectSpace  each_object to_a ","ObjectSpace  each_object "," server application_starting "," server ","app run ","app preload ","Time  now "," start_wait_thread "," child "," pid "," child gets ","Process  spawn ","File  expand_path ","JSON  dump ","Bundler  with_clean_env ","$LOADED_FEATURES grep first ","$LOADED_FEATURES grep "," spring_env log_file ","Bundler  with_original_env ","bundler_dir != ","RbConfig CONFIG  [] ","Bundler  with_unbundled_env "," Application  new _env "," spring_env Application  new _name "," server Application  new lication_starting ","Application  new  run ","Application  new  preload ","File  expand_path  != "]}," Spring ApplicationManager run":{"type":"method","name":"run","children":[],"call":["@client close "," child send_io "," child "," start "," alive? "," synchronize ","client close "," child gets chomp to_i "," child gets chomp "," child gets "," with_child "," log ","pid chomp to_i ","pid chomp ","pid zero? "," child gets to_i "," raise ","pid chomp to_i  chomp to_i "," child gets  chomp to_i "," child gets to_i  chomp to_i ","pid chomp to_i  chomp "," child gets  chomp "," child gets to_i  chomp ","pid chomp to_i  zero? "," child gets  zero? "," child gets to_i  zero? "]}," Spring ApplicationManager alive?":{"type":"method","name":"alive?","children":[],"call":[]}," Spring ApplicationManager restart":{"type":"method","name":"restart","children":[],"call":[" start_child ","@state == "]}," Spring ApplicationManager start":{"type":"method","name":"start","children":[],"call":[" start_wait_thread "," start_child "]}," Spring ApplicationManager initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","Env  new "]}," Spring Application redirect_output":{"type":"method","name":"redirect_output","children":[],"call":["STDIN  reopen ","STDERR  reopen ","STDOUT  reopen ","socket recv_io "]}," Spring Application setup":{"type":"method","name":"setup","children":[],"call":[" watcher add_files "," watcher ","command setup ","command respond_to? ","@setup << ","command class ","@setup include? "," watcher add "," loaded_application_features "]}," Spring Application serve":{"type":"method","name":"serve","children":[],"call":["client close ","client puts ","Process  wait ","command call "," fork ","ActionDispatch Reloader  prepare! ","ActionDispatch Reloader  cleanup! "," setup ","Spring  command ","args shift ","client read ","client gets to_i ","client gets ","args_length times map ","args_length times "," redirect_output "," raise ","streams each ","status exitstatus ","Process  wait2 ","Thread  new "," manager puts "," manager "," load ","Gem  bin_path ","command gem_name ","command respond_to? ","command exec_name "," invoke_after_fork_callbacks "," srand ","ARGV  replace ","ActiveRecord Base  establish_connection "," trap ","IGNORE_SIGNALS  each ","a reopen ","(const nil :STDOUT) zip each ","(const nil :STDOUT) zip ","Process  setsid ","JSON  load ","client recv_io ","3 times map ","3 times "," log "," try_exit ","@mutex synchronize ","stream reopen "," spring_env log_file "," spring_env ","(const nil :STDOUT) each "," disconnect_database "," shush_backtraces "," connect_database ","STDIN  reopen ","streams last "," preload "," preloaded? ","JSON  parse ","ENV  replace ","JSON  load values_at ","ENV  update ","ENV  delete ","@env_keys each ","ENV  [] ","env each ","ENV  [] == ","Spring  original_env each ","Spring  original_env ","Rails  application reloaders any? ","Rails  application reloaders ","Rails  application "," print_exception ","e is_a? ! ","e is_a? "," exit_if_finished ","Rails  application config cache_classes= ","Rails  application config ","ActiveSupport Dependencies  mechanism= "," original_env each "," original_env ","command process_title "," reset_streams "," wait ","STDERR  puts ","Process  pid ","Spring  quiet ","Rails  application reloader reload! ","Rails  application reloader ","Rails  env production? ","Rails  env ","Dir  chdir ","env [] ","Dir  pwd ","(send\n  (ivar :@clients) :select) each ","c != ","@clients select ","@clients << ","c close ","@clients each_key ","@clients []= ","Spring  command  call ","Spring  Spring  command  ","JSON  load  shift ","JSON  parse  shift ","client gets to_i  times map ","JSON  load _length times map ","JSON  parse _length times map ","client gets to_i  times ","JSON  load _length times ","JSON  parse _length times ","Spring  command  gem_name ","command command gem_name  ","Spring  command  respond_to? ","Spring  command  exec_name ","command Gem  bin_path _name ","command command exec_name  ","Spring  command  process_title "]}," Spring Application watch_application":{"type":"method","name":"watch_application","children":[],"call":[" exit "," watcher stale? "," watcher ","IO  select "," manager "]}," Spring Application run":{"type":"method","name":"run","children":[],"call":[" serve ","UNIXSocket  for_fd ","client fileno ","client autoclose= "," manager recv_io "," manager "," watch_application "," loop "," exit "," watcher stale? "," watcher ","IO  select "," watcher start "," sleep "," try_exit "," manager close "," log "," manager puts "," preload_failed? "," watcher_stale? "," terminating? ","@interrupt first "," state "," update_process_title "," manager recv_io  fileno "," manager recv_io  autoclose= "]}," Spring Application start":{"type":"method","name":"start","children":[],"call":[" run "," watcher add_globs ","Rails  root ","Rails  application paths [] map ","Rails  application paths [] ","Rails  application paths ","Rails  application "," watcher "," watcher add_files ","(str \"Gemfile\") map "," require ","ActiveSupport Dependencies  mechanism= ","Rails Application  initializer "," watcher add ","Spring  gemfile "," loaded_application_features ","ActiveRecord Base  remove_connection ","Spring  application_root_path join ","Spring  application_root_path ","i name == ","i name ","ActiveRecord Railtie  initializers delete_if ","ActiveRecord Railtie  initializers "," Rails Application  initializer "]}," Spring Application initialize":{"type":"method","name":"initialize","children":[],"call":["IO  new ","STDIN  fileno ","STDERR  fileno ","STDOUT  fileno ","Set  new ","watcher to_io ","Mutex  new ","Env  new ","STDIN  reopen ","File  open ","ENV  keys ","IO  pipe "]}," Spring watch":{"type":"method","name":"watch","children":[],"call":[]}," Spring watcher":{"type":"method","name":"watcher","children":[],"call":[]}," Spring watch_method=":{"type":"method","name":"watch_method=","children":[],"call":[]}," Spring Watcher Polling expanded_files":{"type":"method","name":"expanded_files","children":[],"call":[" files + ","Dir  [] ","(send\n  (send nil :directories) :map) join "," directories map "," directories "," files ","(send\n  (send\n    (send nil :files) :keys) :+\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (str \"{\")\n      (begin\n        (send\n          (block\n            (send\n              (send\n                (send nil :directories) :keys) :map)\n            (args\n              (arg :d))\n            (dstr\n              (begin\n                (lvar :d))\n              (str \"/**/*\"))) :join\n          (str \",\")))\n      (str \"}\")))) uniq "," files keys + ","(send\n  (send\n    (send nil :directories) :keys) :map) join "," directories keys map "," directories keys "," files keys "]}," Spring Watcher Polling compute_mtime":{"type":"method","name":"compute_mtime","children":[],"call":["(send\n  (send nil :expanded_files) :map) max ","File  mtime to_f ","File  mtime "," expanded_files map "," expanded_files ","(send\n  (const nil :File) :symlink?\n  (lvar :f)) to_f "," debug ","File  symlink? "]}," Spring Watcher Polling subjects_changed":{"type":"method","name":"subjects_changed","children":[],"call":[" compute_mtime "," debug "]}," Spring Watcher Polling stop":{"type":"method","name":"stop","children":[],"call":["@poller kill ","@poller inspect "," debug "]}," Spring Watcher Polling start":{"type":"method","name":"start","children":[],"call":[" check_stale ","Kernel  sleep "," latency "," loop ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "," raise ","e backtrace join ","e backtrace ","e class "," debug "," stale? ","@poller inspect "]}," Spring Watcher Polling add":{"type":"method","name":"add","children":[],"call":[" check_stale "]}," Spring Watcher Polling check_stale":{"type":"method","name":"check_stale","children":[],"call":[" mark_stale "," mtime < "," compute_mtime "," mtime "," synchronize ","computed inspect "," mtime inspect "," debug ","@mutex synchronize "," compute_mtime  inspect "]}," Spring Watcher Polling initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring Watcher Listen base_directories":{"type":"method","name":"base_directories","children":[],"call":["(send\n  (send\n    (array\n      (send nil :root)) :+\n    (block\n      (send\n        (block\n          (send\n            (send nil :files) :reject)\n          (args\n            (arg :f))\n          (send\n            (lvar :f) :start_with?\n            (send nil :root))) :map)\n      (args\n        (arg :f))\n      (send\n        (const nil :File) :expand_path\n        (dstr\n          (begin\n            (lvar :f))\n          (str \"/..\"))))) :+\n  (block\n    (send\n      (send nil :directories) :reject)\n    (args\n      (arg :d))\n    (send\n      (lvar :d) :start_with?\n      (send nil :root)))) uniq ","(send nil :root) + + ","d start_with? "," root "," directories reject "," directories ","(send nil :root) + ","File  expand_path ","(send\n  (send nil :files) :reject) map ","f start_with? "," files reject "," files "]}," Spring Watcher Listen changed":{"type":"method","name":"changed","children":[],"call":[" mark_stale "," watching? ","(send\n  (send\n    (lvar :modified) :+\n    (lvar :added)) :+\n  (lvar :removed)) any? ","modified + + ","modified + "," synchronize "]}," Spring Watcher Listen watching?":{"type":"method","name":"watching?","children":[],"call":["file start_with? "," directories "," files include? "," files "]}," Spring Watcher Listen subjects_changed":{"type":"method","name":"subjects_changed","children":[],"call":[" restart ","@listener directories sort != "," base_directories sort "," base_directories ","@listener directories sort ","@listener directories "]}," Spring Watcher Listen stop":{"type":"method","name":"stop","children":[],"call":["@listener stop "]}," Spring Watcher Listen start":{"type":"method","name":"start","children":[],"call":["@listener start ","@listener change "," method ","@listener latency "," latency "," Listen  to "," base_directories "," Listen MultiListener  new "," Listen VERSION  >= "," Listen  to  start "," Listen MultiListener  new  start "," Listen  to  change "," Listen MultiListener  new  change "," Listen  to  latency "," Listen MultiListener  new  latency "]}," Spring Watcher Abstract subjects_changed":{"type":"method","name":"subjects_changed","children":[],"call":[" raise "]}," Spring Watcher Abstract stop":{"type":"method","name":"stop","children":[],"call":[" raise "]}," Spring Watcher Abstract start":{"type":"method","name":"start","children":[],"call":[" raise "]}," Spring Watcher Abstract restart":{"type":"method","name":"restart","children":[],"call":[" start "," stop "," debug "]}," Spring Watcher Abstract to_io":{"type":"method","name":"to_io","children":[],"call":["IO  pipe "]}," Spring Watcher Abstract mark_stale":{"type":"method","name":"mark_stale","children":[],"call":["@io_listener write ","@listeners each "," stale? ","@listeners inspect "," debug "]}," Spring Watcher Abstract stale?":{"type":"method","name":"stale?","children":[],"call":[]}," Spring Watcher Abstract add":{"type":"method","name":"add","children":[],"call":[" subjects_changed "," files << ","item realpath to_s ","item realpath "," files "," directories << "," directories ","item directory? ","items each ","items select ","Pathname  new "," root ","item relative? ","items flatten map ","items flatten "," synchronize ","item readlink inspect ","item readlink ","item inspect "," debug ","item exist? ","exists ! ","item readlink exist? tap ","item readlink exist? ","item symlink? ","items inspect "," files []= "," directories []= ","@mutex synchronize ","Pathname  new  realpath to_s ","Pathname  new  realpath ","Pathname  new  directory? ","items select  each ","Pathname  new s each ","items select  select ","Pathname  new s select ","Pathname  new  relative? ","items select  flatten map ","Pathname  new s flatten map ","items select  flatten ","Pathname  new s flatten ","Pathname  new  readlink inspect ","Pathname  new  readlink ","Pathname  new  inspect ","Pathname  new  exist? ","Pathname  new  readlink exist? tap ","Pathname  new  readlink exist? ","Pathname  new  symlink? ","items select  inspect ","Pathname  new s inspect "]}," Spring Watcher Abstract initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","File  realpath ","Mutex  new "]}," Spring SID fiddle_func":{"type":"method","name":"fiddle_func","children":[],"call":[]}," Spring Server application_starting":{"type":"method","name":"application_starting","children":[],"call":[" exit "," env bundle_mtime != "," env bundle_mtime "," env ","@mutex synchronize "]}," Spring Server watch_bundle":{"type":"method","name":"watch_bundle","children":[],"call":[" env bundle_mtime "," env "]}," Spring Server set_process_title":{"type":"method","name":"set_process_title","children":[],"call":[" env app_name "," env ","ProcessTitleUpdater  run "]}," Spring Server redirect_output":{"type":"method","name":"redirect_output","children":[],"call":["STDERR  reopen ","STDOUT  reopen "," open ","(str \"tty\") chomp ","STDIN  tty? ","stream reopen "," env log_file "," env ","(const nil :STDOUT) each "," env log_ open  "]}," Spring Server shutdown":{"type":"method","name":"shutdown","children":[],"call":["path unlink ","path exist? ","(send\n  (send nil :env) :socket_path) each "," env pidfile_path "," env "," env socket_path ","@applications values each ","@applications values ","(send\n  (send\n    (ivar :@applications) :values) :map) map ","a stop ","Thread  new ","@applications values map "," log ","Spring  failsafe_thread "]}," Spring Server ignore_signals":{"type":"method","name":"ignore_signals","children":[],"call":[" trap ","IGNORE_SIGNALS  each "]}," Spring Server set_pgid":{"type":"method","name":"set_pgid","children":[],"call":["Process  setpgid ","SID  pgid ","Process  getpgid ","Process  getsid ","Process  setProcess  getpgid  ","SID  Process  getpgid  ","Process  getProcess  getpgid  "]}," Spring Server rails_env_for":{"type":"method","name":"rails_env_for","children":[],"call":["command env ","args drop ","command respond_to? ","Spring  command ","args first ","client_env [] ","Spring  command env ","command command env  ","Spring  command  env ","Spring  command  respond_to? ","Spring  Spring  command  ","client_command env  [] ","Spring  command command env  ","Spring  Spring  command  env "]}," Spring Server serve":{"type":"method","name":"serve","children":[],"call":[" raise ","client eof? ","client close ","client puts ","@applications [] run ","@applications [] "," rails_env_for ","Spring  command? ","args first ","command values_at ","JSON  load ","client read ","client gets to_i ","client gets ","client recv_io "," env version "," env "," redirect_output "," log ","client write ","client gets chomp ","JSON  parse "," client gets chomp _for ","Spring  JSON  load ? ","Spring  JSON  parse ? ","JSON  load  values_at ","JSON  parse  values_at "]}," Spring ProcessTitleUpdater pluralize":{"type":"method","name":"pluralize","children":[],"call":["amount to_i == ","amount to_i "]}," Spring ProcessTitleUpdater distance_in_words":{"type":"method","name":"distance_in_words","children":[],"call":[" pluralize ","distance / ","distance < ","now - ","now -  / ","now -  < "]}," Spring ProcessTitleUpdater value":{"type":"method","name":"value","children":[],"call":[" block call "," distance_in_words "," block "]}," Spring ProcessTitleUpdater next":{"type":"method","name":"next","children":[],"call":[" value "," sleep "," interval "]}," Spring ProcessTitleUpdater interval":{"type":"method","name":"interval","children":[],"call":["distance < ","Time  now - ","Time  now ","Time  now -  < "]}," Spring ProcessTitleUpdater initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring ProcessTitleUpdater run":{"type":"method","name":"run","children":[],"call":[]}," Spring OkJson rubydoesenc?":{"type":"method","name":"rubydoesenc?","children":[],"call":[" String  method_defined? "]}," Spring OkJson ucharcopy":{"type":"method","name":"ucharcopy","children":[],"call":["t write "," raise ","t putc ","u <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | | ","c3 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | ","(send\n  (lvar :c2) :&\n  (const nil :Umaskx)) << ","c2 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | ","(send\n  (lvar :c1) :&\n  (const nil :Umaskx)) << ","c1 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << ","c0 & ","c0 < ","Utag2  <= ","c3 < ","s [] ord ","s [] ","i + ","n < ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | | ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << ","c2 < ","(send\n  (send\n    (begin\n      (send\n        (lvar :c0) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :c1) :&\n      (const nil :Umaskx)))) <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask2)) << | ","(send\n  (lvar :c0) :&\n  (const nil :Umask2)) << ","c1 < ","s length - ","s length ","t << ","t p(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | | tc ","t p(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | | tc ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | |  <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | |  <= ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | | | ","s [] ord  & ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umaskx)) << ","(ses length - d\n  (lvar :c2) :&\n  (cos length - st s length - il :Umaskx)) << ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | ","(ses length - d\n  (lvar :c1) :&\n  (cos length - st s length - il :Umaskx)) << ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << ","s [] ord  < ","s length -  < ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << | | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << ","(send\n  (send\n    (begin\n      (send\n        (lvar :c0) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :s [] ord ) :&\n      (const nil :Umaskx)))) <= ","(send\n  (send\n    (begin\n      (send\n        (lvar :s [] ord ) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :c1) :&\n      (const nil :Umaskx)))) <= ","(ses length - d\n  (ses length - d\n    (begis length - \n      (ses length - d\n        (lvar :c0) :&\n        (cos length - st s length - il :Umask2))) :<<\n    (is length - t 6)) :|\n  (begis length - \n    (ses length - d\n      (lvar :c1) :&\n      (cos length - st s length - il :Umaskx)))) <= ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask2)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask2)) << | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask2)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask2)) << ","s les length - gth - ","s les length - gth "]}," Spring OkJson numenc":{"type":"method","name":"numenc","children":[],"call":[" raise ","x infinite? ","x nan? "]}," Spring OkJson strenc":{"type":"method","name":"strenc","children":[],"call":["t string ","t putc ","n - "," ucharcopy ","c <= ","Spc  <= ","t write ","c ord "," rubydoesenc? ","s [] ","t print ","r < ","s length ","StringIO  new ","\\u%04x % ","c < ","c ord < ","Spc  ord ","t << ","\" b ","t stri ucharcopy g ","StringIO  new  sStringIO  new ring ","\" b  s\" b ring ","t puts []  ","t put\\u%04x %  ","StringIO  new  puStringIO  new c ","\" b  pu\" b c "," ucharcopy  - "," us [] hars [] opy "," u\\u%04x % har\\u%04x % opy ","s []  <= ","\\u%04x %  <= ","Sps []   <= ","Sp\\u%04x %   <= ","StringIO  new  wriStringIO  new e ","\" b  wri\" b e ","s []  ord ","\\u%04x %  ord "," rubydoese ucharcopy c? "," rubydoesens [] ? "," rubydoesen\\u%04x % ? ","t pri ucharcopy t ","StringIO  new  prinStringIO  new  ","\" b  prin\" b  ","s le ucharcopy gth ","s lengStringIO  new h ","s leng\" b h ","Stri ucharcopy gIO   ucharcopy ew ","SStringIO  new ringIO  new ","S\" b ringIO  new ","s []  < ","\\u%04x %  < ","s []  ord < ","\\u%04x %  ord < ","Sps []   ord ","Sp\\u%04x %   ord ","StringIO  new  << ","\" b  << "]}," Spring OkJson keyenc":{"type":"method","name":"keyenc","children":[],"call":[" raise ","k inspect "," strenc "]}," Spring OkJson arrenc":{"type":"method","name":"arrenc","children":[],"call":["[ + + ","[ + ","(send\n  (lvar :a) :map) join "," valenc ","a map "]}," Spring OkJson objenc":{"type":"method","name":"objenc","children":[],"call":["{ + + ","{ + ","(send\n  (lvar :x) :map) join "," keyenc + + "," valenc "," keyenc + "," keyenc ","x map "]}," Spring OkJson nibble":{"type":"method","name":"nibble","children":[],"call":[" raise ","c ord - + ","c ord - ","A ord ","c ord ","c <= ","A <= ","a ord ","a <= ","0 ord ","0 <= "]}," Spring OkJson surrogate?":{"type":"method","name":"surrogate?","children":[],"call":["u < ","Usurr1  <= "]}," Spring OkJson subst":{"type":"method","name":"subst","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :u1) :-\n      (const nil :Usurr1))) :<<\n  (int 10)) | ","(send\n  (lvar :u2) :-\n  (const nil :Usurr2)) + ","u2 - ","(send\n  (lvar :u1) :-\n  (const nil :Usurr1)) << ","u1 - ","u2 < ","Usurr2  <= ","u1 < ","Usurr1  <= "]}," Spring OkJson hexdec4":{"type":"method","name":"hexdec4","children":[],"call":["(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | | | "," nibble ","s [] ","(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | | "," nibble << ","(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | "," raise ","s length != ","s length "]}," Spring OkJson ucharenc":{"type":"method","name":"ucharenc","children":[],"call":["a []= ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (lvar :u) :&\n      (const nil :Umaskx)))) chr ","Utagx  | ","u & ","i + ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 6))) :&\n      (const nil :Umaskx)))) chr ","(send\n  (lvar :u) :>>\n  (int 6)) & ","u >> ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 12))) :&\n      (const nil :Umaskx)))) chr ","(send\n  (lvar :u) :>>\n  (int 12)) & ","(send\n  (const nil :Utag4) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 18))) :&\n      (int 255)))) chr ","Utag4  | ","(send\n  (lvar :u) :>>\n  (int 18)) & ","(send\n  (const nil :Utag3) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 12))) :&\n      (int 255)))) chr ","Utag3  | ","u <= ","(send\n  (const nil :Utag2) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 6))) :&\n      (int 255)))) chr ","Utag2  | ","(send\n  (lvar :u) :&\n  (int 255)) chr "]}," Spring OkJson unquote":{"type":"method","name":"unquote","children":[],"call":["a [] ","a []= "," raise ","c < ","c == ","q [] "," ucharenc "," << "," rubydoesenc? ","uchar != "," subst "," hexdec4 ","r + ","q length >= ","q length "," surrogate? ","Unesc  [] ","r >= ","r < ","a force_encoding ","q dup ","q dup  [] ","q dup  []= "," rq dup ise ","q []  < ","q []  == ","q []  [] ","  subst enc "," uq [] harenq []  "," uchq dup renc "," rubydoesenq [] ? "," subst  != ","uq [] har != ","uchq dup r != "," hexdeq [] 4 ","q []  length >= ","q []  length "," surrogq dup te? ","Unesq []   [] ","a forq [] e_enq [] oding ","q dup  force_encoding ","q []  dup "]}," Spring OkJson abbrev":{"type":"method","name":"abbrev","children":[],"call":["` + + ","` + ","t + ","t length < ","s length ","t length ","t [] ","s [] ","t +  + ","t []  + ","s []  + ","t +  lengt + h < ","t []  lengt [] h < ","s []  lengs [] h < ","s lengt + h ","s lengt [] h ","s lengs [] h ","t +  lengt + h ","t []  lengt [] h ","s []  lengs [] h ","t +  [] ","t []  [] ","s []  [] "]}," Spring OkJson strtok":{"type":"method","name":"strtok","children":[],"call":[" unquote ","m [] "," raise "," abbrev ","m ! ","(str \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\[\\\"/\\\\\\\\bfnrt]|\\\\\\\\u[0-9a-fA-F]{4})*\\\"\") match ","(str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match  [] ","(str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match  ! ","(str \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\[\\\"/\\\\\\\\bfnrt]|\\\\\\\\u[0-9a-fA-F]{4})*\\\"\") (str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match atch "]}," Spring OkJson numtok":{"type":"method","name":"numtok","children":[],"call":[" Integer * ","10 ** "," Integer ","m [] [] ","m [] "," Float ","m [] ! ","m begin == ","m begin ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] [] ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] ! ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  begin == ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  begin ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") (str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match atch "]}," Spring OkJson falsetok":{"type":"method","name":"falsetok","children":[],"call":["s [] == ","s [] "]}," Spring OkJson truetok":{"type":"method","name":"truetok","children":[],"call":["s [] == ","s [] "]}," Spring OkJson nulltok":{"type":"method","name":"nulltok","children":[],"call":["s [] == ","s [] "]}," Spring OkJson tok":{"type":"method","name":"tok","children":[],"call":[" numtok ","s [] "," strtok "," falsetok "," truetok "," nulltok "]}," Spring OkJson lex":{"type":"method","name":"lex","children":[],"call":["s [] ","lexeme length ","ts << ","typ != "," raise ","s [] inspect ","typ == "," tok ","s length > ","s length ","s []  [] ","ts []  << "," rais [] e ","s []  [] ins [] pect ","s []  length > ","s []  length "]}," Spring OkJson eat":{"type":"method","name":"eat","children":[],"call":["ts [] "," raise ","ts [] inspect ","ts [] [] != ","ts [] [] "]}," Spring OkJson arrparse":{"type":"method","name":"arrparse","children":[],"call":["ts [] ","ts [] [] == ","ts [] [] ","arr << "," valparse "," eat "," loop "," eat  [] "," eat  [] [] == "," eat  [] [] "]}," Spring OkJson pairparse":{"type":"method","name":"pairparse","children":[],"call":[" valparse "," eat "," raise ","k inspect ","typ != ","ts [] "," eat  [] "]}," Spring OkJson objparse":{"type":"method","name":"objparse","children":[],"call":["ts [] ","ts [] [] == ","ts [] [] ","obj []= "," pairparse "," eat "," loop "," eat  [] "," eat  [] [] == "," eat  [] [] "]}," Spring OkJson valparse":{"type":"method","name":"valparse","children":[],"call":[" raise ","val inspect ","ts [] "," arrparse "," objparse ","ts length <= ","ts length "]}," Spring OkJson textparse":{"type":"method","name":"textparse","children":[],"call":[" raise ","val inspect "," arrparse "," objparse ","ts [] ","ts length <= ","ts length "]}," Spring OkJson valenc":{"type":"method","name":"valenc","children":[],"call":[" raise ","x inspect ","x class "," numenc "," strenc "," arrenc "," objenc "]}," Spring OkJson encode":{"type":"method","name":"encode","children":[],"call":[" raise "," arrenc "," objenc "]}," Spring OkJson decode":{"type":"method","name":"decode","children":[],"call":[" raise ","ts length > ","ts length "," textparse "," lex "," lex  length > "," lex  length "]}," Spring JSON dump":{"type":"method","name":"dump","children":[],"call":[]}," Spring JSON load":{"type":"method","name":"load","children":[],"call":[]}," Spring MissingApplication message":{"type":"method","name":"message","children":[],"call":[" project_root "]}," Spring MissingApplication initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring UnknownProject message":{"type":"method","name":"message","children":[],"call":[" current_dir "]}," Spring UnknownProject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring Env default_tmp_path":{"type":"method","name":"default_tmp_path","children":[],"call":[" root join "," root ","Pathname  new ","ENV  [] "]}," Spring Env bundle_mtime":{"type":"method","name":"bundle_mtime","children":[],"call":["(send\n  (const nil :Bundler) :default_lockfile) select map max ","(send\n  (const nil :Bundler) :default_lockfile) select map ","(send\n  (const nil :Bundler) :default_lockfile) select ","Bundler  default_gemfile ","Bundler  default_lockfile "]}," Spring Env server_running?":{"type":"method","name":"server_running?","children":[],"call":["pidfile close ","pidfile flock ","pidfile flock ! ","File LOCK_EX  | "," pidfile_path open "," pidfile_path "," pidfile_path exist? "," pidfile_path open  close "," pidfile_path open  flock "," pidfile_path open  flock ! ","  pidfile_path open _path open ","  pidfile_path open _path ","  pidfile_path open _path exist? "]}," Spring Env app_name":{"type":"method","name":"app_name","children":[],"call":[" root basename "," root "]}," Spring Env pid":{"type":"method","name":"pid","children":[],"call":[" pidfile_path read to_i "," pidfile_path read "," pidfile_path "," pidfile_path exist? "]}," Spring Env version":{"type":"method","name":"version","children":[],"call":[]}," Spring find_project_root":{"type":"method","name":"find_project_root","children":[],"call":[" find_project_root ","current_dir parent "," raise ","UnknownProject  new ","Dir  pwd ","current_dir root? ","current_dir join exist? ","current_dir join "," gemfile "]}," Spring application_root_path":{"type":"method","name":"application_root_path","children":[],"call":[" raise ","MissingApplication  new ","path join exist? ","path join ","Pathname  new ","File  expand_path "," find_project_root "," application_root "," project_root_path ","Pathname  new  join exist? "," project_root_path  join exist? ","Pathname  new  join "," project_root_path  join ","File  expand_Pathname  new  ","File  expand_ project_root_path  "," project_root_Pathname  new  "," project_root_ project_root_path  "]}," Spring verify_environment!":{"type":"method","name":"verify_environment!","children":[],"call":[" application_root_path "]}," Spring after_fork":{"type":"method","name":"after_fork","children":[],"call":[" after_fork_callbacks << "," after_fork_callbacks "]}," Spring after_fork_callbacks":{"type":"method","name":"after_fork_callbacks","children":[],"call":[]}," Spring gemfile":{"type":"method","name":"gemfile","children":[],"call":["ENV  [] ","Bundler  default_gemfile ","(str \"\\\\s1.9.[0-9]\") === ","Bundler  ruby_scope gsub ","Bundler  ruby_scope ","Pathname  new expand_path ","Pathname  new "," require "]}," Spring command?":{"type":"method","name":"command?","children":[],"call":[]}," Spring Commands TestUnit description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands TestUnit require_test":{"type":"method","name":"require_test","children":[],"call":[" require ","Dir  [] each ","Dir  [] ","File  join ","File  directory? "]}," Spring Commands TestUnit call":{"type":"method","name":"call","children":[],"call":[" require_test ","File  expand_path ","arg start_with? ","ARGV  each ","ARGV  << ","ARGV  empty? ","$LOAD_PATH unshift ","$stderr puts "," require ","Dir  [] each ","Dir  [] ","File  join ","File  directory? ","args first ","ARGV  replace ","args size > ","args size ","args each ","args empty? ","File  expand_File  expand_path  "]}," Spring Commands TestUnit env":{"type":"method","name":"env","children":[],"call":[]}," Spring Commands RSpec exec_name":{"type":"method","name":"exec_name","children":[],"call":[]}," Spring Commands Rake exec_name":{"type":"method","name":"exec_name","children":[],"call":[]}," Spring Commands Rake env":{"type":"method","name":"env","children":[],"call":["matcher === ","args first "," class environment_matchers each "," class environment_matchers "," class ","env split last ","env split ","args grep last ","args grep "," class args grep last ironment_matchers each "," class args grep last ironment_matchers ","args grep last  split last ","args grep last  split "]}," Spring Commands RailsRunner command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Spring Commands RailsRunner env":{"type":"method","name":"env","children":[],"call":["tail reverse each ","tail reverse "," extract_environment last "," extract_environment "]}," Spring Commands RailsGenerate command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Spring Commands RailsConsole command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Spring Commands RailsConsole env":{"type":"method","name":"env","children":[],"call":["args first ","args first index ! ","args first index ","tail first ","tail first index ! ","tail first index ","args [] == ","args [] ","i - ","i > ","arg =~ ","args each with_index ","args each "]}," Spring Commands Rails description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Rails call":{"type":"method","name":"call","children":[],"call":[" require ","Object  const_set "," Rails  root join "," Rails  root ","ARGV  unshift "," command_name "," load ","Dir  glob first ","Dir  glob "]}," Spring Commands Cucumber exec_name":{"type":"method","name":"exec_name","children":[],"call":[]}," Spring Commands Cucumber env":{"type":"method","name":"env","children":[],"call":[]}," Spring Client command_for":{"type":"method","name":"command_for","children":[],"call":[]}," Spring Client run":{"type":"method","name":"run","children":[],"call":[]}," Spring Client Stop kill":{"type":"method","name":"kill","children":[],"call":["Process  kill "," env pid "," env "," env  env pid  "]}," Spring Client Stop call":{"type":"method","name":"call","children":[],"call":[" puts "," kill ","$stderr puts "," env server_running? "," env "," sleep ","Time  now >= ","Time  now "," env server_running? ! ","Time  now + ","Process  kill "," env pid ","STDERR  puts "," env stop "]}," Spring Client Stop description":{"type":"method","name":"description","children":[],"call":[]}," Spring Client Status application_pids":{"type":"method","name":"application_pids","children":[],"call":["l split last ","l split ","(send\n  (lvar :candidates) :select) map ","l =~ "," env pid "," env ","candidates select ","(str \"ps -a -o ppid= -o pid=\") lines ","(str \"ps -A -o ppid= -o pid=\") lines ","(str \"ps -o ppid= -o pid=\") lines ","(str \"ps -ax -o ppid= -o pid=\") lines ","(send\n  (lvar :(str \"ps -a -o ppid= -o pid=\") lines ) :select) map ","(send\n  (lvar :(str \"ps -A -o ppid= -o pid=\") lines ) :select) map ","(send\n  (lvar :(str \"ps -o ppid= -o pid=\") lines ) :select) map ","(send\n  (lvar :(str \"ps -ax -o ppid= -o pid=\") lines ) :select) map ","(str \"ps -a -o ppid= -o pid=\") lines  select ","(str \"ps -A -o ppid= -o pid=\") lines  select ","(str \"ps -o ppid= -o pid=\") lines  select ","(str \"ps -ax -o ppid= -o pid=\") lines  select "]}," Spring Client Status print_process":{"type":"method","name":"print_process","children":[],"call":[" puts "]}," Spring Client Status call":{"type":"method","name":"call","children":[],"call":[" puts "," print_process "," application_pids each "," application_pids "," env pid "," env "," env server_running? "]}," Spring Client Status description":{"type":"method","name":"description","children":[],"call":[]}," Spring Client Run default_rails_env":{"type":"method","name":"default_rails_env","children":[],"call":["ENV  [] "]}," Spring Client Run send_json":{"type":"method","name":"send_json","children":[],"call":["socket write ","socket puts ","data bytesize ","JSON  dump ","data length ","JSON  dump  bytesize ","JSON  dump  length "]}," Spring Client Run forward_signal":{"type":"method","name":"forward_signal","children":[],"call":["Process  kill ","Process  pid "," trap ","Process  getpgid -@ ","Process  getpgid "," kill "," kill != "]}," Spring Client Run forward_signals":{"type":"method","name":"forward_signals","children":[],"call":[" forward_signal "," trap ","FORWARDED_SIGNALS  each ","Process  kill ","Process  getpgid -@ ","Process  getpgid ","(send\n  (const nil :FORWARDED_SIGNALS) :&\n  (send\n    (send\n      (const nil :Signal) :list) :keys)) each ","FORWARDED_SIGNALS  & ","Signal  list keys ","Signal  list "," kill ","@signal_queue each "]}," Spring Client Run run_command":{"type":"method","name":"run_command","children":[],"call":["application close "," exit ","application read to_i ","application read "," forward_signals ","pid to_i ","pid empty? ! ","pid empty? ","client close ","pid chomp "," server gets "," server "," send_json "," args ","application send_io "," log ","ENV  to_hash "," puts ","Spring  quiet "," suspend_resume_on_tstp_cont ","preload_status == ","preload_status chomp ","application gets ","pid chomp  to_i "," server gets  to_i ","pid chomp  empty? ! "," server gets  empty? ! ","pid chomp  empty? "," server gets  empty? ","pid chomp  chomp "," server gets  chomp ","preload_application read to_i  == ","preload_status chomp  == ","application gets  == ","preload_application read to_i  chomp ","preload_status chomp  chomp ","application gets  chomp "]}," Spring Client Run connect_to_application":{"type":"method","name":"connect_to_application","children":[],"call":[" raise "," server gets "," server "," send_json "," default_rails_env "," args "," server send_io ","ENV  to_hash ","IO  select "]}," Spring Client Run verify_server_version":{"type":"method","name":"verify_server_version","children":[],"call":[" exit ","$stderr puts "," env version "," env ","server_version != "," server gets chomp "," server gets "," server ","STDERR  puts ","server gets chomp ","server gets "," cold_run "," stop_server "," server_booted? "," server gets chomp  != ","server gets chomp  != "]}," Spring Client Run boot_server":{"type":"method","name":"boot_server","children":[],"call":[" sleep "," env socket_path exist? "," env socket_path "," env ","Spring Server  boot "," require "," fork "," env socket_path unlink "," exit ","status exitstatus ","Process  waitpid2 ","Process  spawn ","SID  pgid ","ENV  [] == ","ENV  [] "," gem_env "," env server_command ","$stderr puts ","Time  now > ","Time  now ","Time  now + ","Process  waitProcess  spawn 2 "]}," Spring Client Run call":{"type":"method","name":"call","children":[],"call":[" server close "," server "," exit "," run_command "," connect_to_application ","UNIXSocket  pair "," verify_server_version "," boot_server "," env server_running? "," env ","Spring  verify_environment! ","server close ","application close ","application read "," forward_signals ","pid to_i ","pid empty? ","client close ","server gets chomp ","server gets ","application write ","application puts ","arg length "," args each "," args "," args length ","application send_io ","server puts "," rails_env_for "," args first ","server send_io ","UNIXSocket  open "," env socket_name ","application read to_i ","pid empty? ! ","pid chomp "," queue_signals "," cold_run "," warm_run "," connect "," UNIXSocket  open  close "," UNIXSocket  open  "," verify_UNIXSocket  open _version "," boot_UNIXSocket  open  "," env UNIXSocket  open _running? ","UNIXSocket  open  close ","server gets chomp  to_i ","pid chomp  to_i ","server gets  to_i ","server gets chomp  empty? ","pid chomp  empty? ","server gets  empty? ","UNIXSocket  open  gets chomp ","UNIXSocket  open  gets ","UNIXSocket  open  puts ","UNIXSocket  open  send_io ","server gets chomp  empty? ! ","pid chomp  empty? ! ","server gets  empty? ! ","server gets chomp  chomp ","pid chomp  chomp ","server gets  chomp "]}," Spring Client Run server":{"type":"method","name":"server","children":[],"call":["UNIXSocket  open "," env socket_name "," env "]}," Spring Client Rails call":{"type":"method","name":"call","children":[],"call":[" exec "," args ","Run  call "," args drop ","COMMANDS  include? "," args [] ","ALIASES  [] "," require ","Spring  application_root_path join ","Spring  application_root_path ","Object  const_set ","Spring  application_root_path join to_s ","ARGV  shift "," load ","Dir  glob first ","Dir  glob "," exit ","command_name start_with? ","command_name start_with? ! "]}," Spring Client Rails description":{"type":"method","name":"description","children":[],"call":[]}," Spring Client Help max_name_width":{"type":"method","name":"max_name_width","children":[],"call":[" all_commands keys map max "," all_commands keys map "," all_commands keys "," all_commands ","(send\n  (send nil :all_commands) :collect) max "," Array join length "," Array join "," Array "," all_commands collect "]}," Spring Client Help display":{"type":"method","name":"display","children":[],"call":["name ljust "," max_name_width "," description_for_command ","command description ","  description_for_command _for_command ","command  description_for_command  "]}," Spring Client Help description_for_command":{"type":"method","name":"description_for_command","children":[],"call":["command exec_name ","command respond_to? ","command description "]}," Spring Client Help all_commands":{"type":"method","name":"all_commands","children":[],"call":[" spring_commands merge "," application_commands "," spring_commands "," client_commands merge "," registered_commands "," client_commands "]}," Spring Client Help command_help":{"type":"method","name":"command_help","children":[],"call":["(send\n  (send\n    (lvar :commands) :sort_by\n    (block-pass\n      (sym :first))) :map) compact "," display ","commands sort_by map ","commands sort_by "]}," Spring Client Help formatted_help":{"type":"method","name":"formatted_help","children":[],"call":["(str \"Usage: spring COMMAND [ARGS]\\n\") join "," command_help "," application_commands "," spring_commands "," application_command_help "," spring_command_help ","(dstr\n  (str \"Version: \")\n  (begin\n    (send\n      (send nil :env) :version))\n  (str \"\\n\")) join "," env version "," env "]}," Spring Client Help call":{"type":"method","name":"call","children":[],"call":[" puts "," formatted_help "]}," Spring Client Help initialize":{"type":"method","name":"initialize","children":[],"call":["@application_commands []= ","@spring_commands delete ","Spring  commands dup ","Spring  commands ","Spring Client COMMANDS  dup ","k start_with? ","@spring_commands delete_if "]}," Spring Client Help description":{"type":"method","name":"description","children":[],"call":[]}," Spring Client Command initialize":{"type":"method","name":"initialize","children":[],"call":["Env  new "]}," Spring Client Command call":{"type":"method","name":"call","children":[],"call":[]}," Spring Client Binstub generate_command_binstub":{"type":"method","name":"generate_command_binstub","children":[],"call":[" command_binstub chmod "," command_binstub ","File  write "," name "]}," Spring Client Binstub generate_spring_binstub":{"type":"method","name":"generate_spring_binstub","children":[],"call":[" spring_binstub chmod "," spring_binstub ","File  write "]}," Spring Client Binstub command_binstub":{"type":"method","name":"command_binstub","children":[],"call":[" bindir join "," name "," bindir "]}," Spring Client Binstub spring_binstub":{"type":"method","name":"spring_binstub","children":[],"call":[" bindir join "," bindir "]}," Spring Client Binstub call":{"type":"method","name":"call","children":[],"call":[" exit ","$stderr puts "," name "," generate_command_binstub "," generate_spring_binstub "," bindir mkdir "," bindir "," bindir exist? "," name == ","Spring  command? ","STDERR  puts "," generate_binstub "," command "," commands each "," commands "," raise "," items each "," items "," spring_binstub delete "," spring_binstub "," spring_binstub chmod ","File  write "," spring_binstub exist? "]}," Spring Client Binstub initialize":{"type":"method","name":"initialize","children":[],"call":["args [] "," env root join "," env root "," env ","Spring  commands [] "," name ","Spring  commands ","mem merge "," find_commands ","args drop inject ","args drop ","Item  new ","(send\n  (send\n    (lvar :args) :drop\n    (int 1)) :map) inject map ","(send\n  (send\n    (lvar :args) :drop\n    (int 1)) :map) inject ","Set  new ","args drop map ","(send\n  (send\n    (lvar :args) :drop\n    (int 1)) :map) flatten uniq map ","(send\n  (send\n    (lvar :args) :drop\n    (int 1)) :map) flatten uniq ","(send\n  (send\n    (lvar :args) :drop\n    (int 1)) :map) flatten "]}," Spring Client Binstub description":{"type":"method","name":"description","children":[],"call":[]}," Spring ApplicationManager stop":{"type":"method","name":"stop","children":[],"call":["Process  kill "," pid ","Process  wait "," log "]}," Spring ApplicationManager with_child":{"type":"method","name":"with_child","children":[],"call":[" start "," alive? "," synchronize "," log "]}," Spring ApplicationManager synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex unlock ","@mutex lock "]}," Spring Application loaded_application_features":{"type":"method","name":"loaded_application_features","children":[],"call":["f start_with? ","File  realpath ","Rails  root ","$LOADED_FEATURES select ","Spring  application_root_path to_s ","Spring  application_root_path ","Rails  Spring  application_root_path to_s  ","Spring  application_Spring  application_root_path to_s _path to_s ","Spring  application_Spring  application_root_path to_s _path "]}," Spring Application invoke_after_fork_callbacks":{"type":"method","name":"invoke_after_fork_callbacks","children":[],"call":["callback call ","Spring  after_fork_callbacks each ","Spring  after_fork_callbacks "]}," Spring Server start_server":{"type":"method","name":"start_server","children":[],"call":[" serve ","server accept "," loop "," raise ","TmpUnwritable  new "," env tmp_path "," env "," log "," env socket_name ","UNIXServer  open ","UNIXServer  open  accept "]}," Spring Server log":{"type":"method","name":"log","children":[],"call":[" env log "," env "]}," Spring TmpUnwritable message":{"type":"method","name":"message","children":[],"call":[" tmp_path "]}," Spring TmpUnwritable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring Env log":{"type":"method","name":"log","children":[],"call":[" log_file flush "," log_file "," log_file puts ","Time  now ","Process  pid "]}," Spring verify_environment":{"type":"method","name":"verify_environment","children":[],"call":[" application_root_path "]}," Spring Commands RailsDestroy command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Spring Client Run log":{"type":"method","name":"log","children":[],"call":[" env log "," env "]}," Spring ApplicationManager log":{"type":"method","name":"log","children":[],"call":[" server log "," server "," spring_env log "," app_env "," spring_env "]}," Spring Application shush_backtraces":{"type":"method","name":"shush_backtraces","children":[],"call":["line start_with? ","$! backtrace reject! ","$! backtrace ","File  expand_path ","old_raise call "," define_method "," remove_method ","Kernel  method ","Kernel  module_eval "," private ","$! backtrace frozen? ","Gem Version  new >= ","Gem Version  new ","Kernel  method  call "]}," Spring Application connect_database":{"type":"method","name":"connect_database","children":[],"call":["ActiveRecord Base  establish_connection "," active_record_configured? "]}," Spring Application disconnect_database":{"type":"method","name":"disconnect_database","children":[],"call":["ActiveRecord Base  remove_connection "," active_record_configured? "]}," Spring Application try_exit":{"type":"method","name":"try_exit","children":[],"call":[" exit ","@waiting == "," exiting? ","@mutex synchronize "]}," Spring Application preload":{"type":"method","name":"preload","children":[],"call":[" watcher add ","Rails  application paths [] ","Rails  application paths ","Rails  application "," watcher ","Spring  gemfile "," loaded_application_features "," disconnect_database ","Rails  application config cache_classes= ","Rails  application config "," require ","Spring  application_root_path join ","Spring  application_root_path ","i name == ","i name ","Rails Application Finisher  initializers delete_if ","Rails Application Finisher  initializers ","ActiveSupport Dependencies  mechanism= ","Rails Application  initializer "," log "," raise "," initialized? ","line match [] ","line match ","e backtrace map ","e backtrace "," start_watcher ","Rails  application config cache_classes ","line [] ","Rails  gem_version >= ","Gem Version  new ","Rails  gem_version ","Rails  respond_to? ","(str \"            Spring reloads, and therefore needs the application to have reloading enabled.\\n\") strip_heredoc ","Rails  env ","Spring  gemfile_lock "]}," Spring Application exiting?":{"type":"method","name":"exiting?","children":[],"call":["@state == "]}," Spring Application preloaded?":{"type":"method","name":"preloaded?","children":[],"call":[]}," Spring Application log":{"type":"method","name":"log","children":[],"call":[" spring_env log ","ENV  [] "," spring_env "," app_env "]}," Spring forward_signals":{"type":"method","name":"forward_signals","children":[],"call":["Process  kill "," trap ","(send\n  (const nil :FORWARDED_SIGNALS) :&\n  (send\n    (send\n      (const nil :Signal) :list) :keys)) each ","FORWARDED_SIGNALS  & ","Signal  list keys ","Signal  list "]}," Spring run_command":{"type":"method","name":"run_command","children":[],"call":["server close ","application close ","application read "," forward_signals ","pid to_i ","pid empty? ","client close ","server gets chomp ","server gets ","application write ","application puts ","arg length ","args each ","args length ","application send_io "," stdin_slave ","server puts "," rails_env_for ","args first ","server send_io ","UNIXSocket  open "," env socket_name "," env ","UNIXSocket  pair "," boot_server "," server_running? ","UNIXSocket  open  close ","server gets chomp  to_i ","server gets chomp  empty? ","UNIXSocket  open  gets chomp ","UNIXSocket  open  gets ","UNIXSocket  open  puts ","UNIXSocket  open  send_io "," boot_UNIXSocket  open  "," UNIXSocket  open _running? "]}," Spring print_help":{"type":"method","name":"print_help","children":[],"call":[" puts "]}," Spring command_registered?":{"type":"method","name":"command_registered?","children":[],"call":[]}," Spring Commands Cucumber call":{"type":"method","name":"call","children":[],"call":[" Cucumber Cli Main  execute ","Kernel  exit "]}," Spring Commands Cucumber setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Spring Commands Command preload_files":{"type":"method","name":"preload_files","children":[],"call":["$stderr puts "," class "," require "," preloads each "," preloads "]}," Spring Commands Command setup":{"type":"method","name":"setup","children":[],"call":[" preload_files "]}," Spring Client Run rails_env_for":{"type":"method","name":"rails_env_for","children":[],"call":["ENV  [] ","command env ","command respond_to? ","Spring  command ","Spring  command  env ","Spring  command  respond_to? ","Spring  Spring  command  "]}," Spring Commands Runner description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Generate description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Console description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Rake description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Cucumber description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands RSpec description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Test description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands Command preloads":{"type":"method","name":"preloads","children":[],"call":[" class preloads "," class "]}," Spring Commands Command preloads=":{"type":"method","name":"preloads=","children":[],"call":[]}," Spring Client Help display_value":{"type":"method","name":"display_value","children":[],"call":[" description_for_command "," Array join ljust "," max_name_width "," Array join "," Array "]}," Spring Client Help command_aliases":{"type":"method","name":"command_aliases","children":[],"call":["(send\n  (send\n    (send nil :spring_commands) :merge\n    (send nil :application_commands)) :select) keys ","v == "," spring_commands merge select "," spring_commands merge "," application_commands "," spring_commands "]}," Spring Client Help unique_commands":{"type":"method","name":"unique_commands","children":[],"call":["(send\n  (send nil :application_commands) :collect) uniq "," application_commands collect "," application_commands "]}," Spring Client Help registered_commands":{"type":"method","name":"registered_commands","children":[],"call":["Hash  [] "," command_aliases "," unique_commands collect "," unique_commands "]}," Spring Client Help client_commands":{"type":"method","name":"client_commands","children":[],"call":[" spring_commands invert "," spring_commands "]}," Spring Client Help application_command_help":{"type":"method","name":"application_command_help","children":[],"call":[" display_value "," registered_commands map "," registered_commands "]}," Spring Client Help spring_command_help":{"type":"method","name":"spring_command_help","children":[],"call":[" display_value "," client_commands map "," client_commands "]}," Spring watcher_class":{"type":"method","name":"watcher_class","children":[],"call":[]}," Spring Watcher Listen available?":{"type":"method","name":"available?","children":[],"call":[]}," Spring Commands RailsRunner description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands RailsRunner call":{"type":"method","name":"call","children":[],"call":[" require ","ARGV  replace ","Object  const_set ","Rails  root join ","Rails  root "," extract_environment first "," extract_environment "]}," Spring Commands RailsGenerate description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands RailsGenerate call":{"type":"method","name":"call","children":[],"call":[" require ","ARGV  replace "]}," Spring Commands RailsGenerate setup":{"type":"method","name":"setup","children":[],"call":["Rails  application load_generators ","Rails  application "]}," Spring Commands RailsConsole description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands RailsConsole call":{"type":"method","name":"call","children":[],"call":[" Rails Console  start "," Rails  application ","ARGV  replace "]}," Spring Commands RailsConsole setup":{"type":"method","name":"setup","children":[],"call":[" require "]}," Spring Commands TestUnit setup":{"type":"method","name":"setup","children":[],"call":["$LOAD_PATH unshift "]}," Spring Client Start call":{"type":"method","name":"call","children":[],"call":["Spring Server  boot "," require "]}," Spring Client Start description":{"type":"method","name":"description","children":[],"call":[]}," Spring Commands TestUnit fallback":{"type":"method","name":"fallback","children":[],"call":[]}," Spring Client Binstub fallback":{"type":"method","name":"fallback","children":[],"call":[" name "," name == "," command fallback "," command "," command respond_to? ","command fallback ","command respond_to? "]}," Spring Client Binstub generate_binstub":{"type":"method","name":"generate_binstub","children":[],"call":[" binstub chmod "," binstub ","File  write "," name "," fallback strip gsub "," fallback strip "," fallback "," bindir join chmod "," bindir join "," bindir "]}," Spring Client Binstub binstub":{"type":"method","name":"binstub","children":[],"call":[" bindir join "," name "," bindir "]}," Spring Client Binstub find_commands":{"type":"method","name":"find_commands","children":[],"call":[" exit ","$stderr puts ","Spring  commands [] ","Spring  commands ","RailsCommand  new ","commands []= ","name start_with? ","commands delete_if "," class rails_command "," class ","commands values + ","commands values ","Spring  commands dup ","command_name start_with? ","Spring  Spring  commands [] s [] ","Spring  Spring  commands  [] ","Spring  Spring  commands dup  [] ","Spring  Spring  commands [] s ","Spring  Spring  commands  ","Spring  Spring  commands dup  ","Spring  commands [] s []= ","Spring  commands  []= ","Spring  commands dup  []= ","Spring  commands [] s delete_if ","Spring  commands  delete_if ","Spring  commands dup  delete_if "," class rails_Spring  commands []  ","Spring  commands [] s values + ","Spring  commands  values + ","Spring  commands dup  values + ","Spring  commands [] s values ","Spring  commands  values ","Spring  commands dup  values ","Spring  Spring  commands [] s dup ","Spring  Spring  commands  dup ","Spring  Spring  commands dup  dup ","Spring  commands [] _name start_with? "]}," Spring Client Binstub RailsCommand fallback":{"type":"method","name":"fallback","children":[],"call":[]}," Spring Env application_id":{"type":"method","name":"application_id","children":[],"call":["Digest MD5  hexdigest "," root to_s "," root "," project_root to_s "," project_root ","RUBY_VERSION  + ","ENV  [] "," require "]}," Spring Env root":{"type":"method","name":"root","children":[],"call":["Spring  application_root_path "]}," Spring Watcher Abstract on_stale":{"type":"method","name":"on_stale","children":[],"call":["@listeners << ","block inspect "," debug "]}," Spring Env project_root":{"type":"method","name":"project_root","children":[],"call":["Spring  project_root_path "]}," Spring project_root_path":{"type":"method","name":"project_root_path","children":[],"call":[" find_project_root ","Pathname  new ","File  expand_path ","Dir  pwd "]}," Spring CommandWrapper env":{"type":"method","name":"env","children":[],"call":[" command env "," command "," command respond_to? "]}," Spring CommandWrapper exec":{"type":"method","name":"exec","children":[],"call":["Gem  bin_path "," exec_name "," gem_name "," binstub to_s "," binstub "," binstub exist? "]}," Spring CommandWrapper binstub_name":{"type":"method","name":"binstub_name","children":[],"call":[" name "]}," Spring CommandWrapper binstub":{"type":"method","name":"binstub","children":[],"call":["Spring  application_root_path join "," binstub_name ","Spring  application_root_path "]}," Spring CommandWrapper exec_name":{"type":"method","name":"exec_name","children":[],"call":[" name "," command exec_name "," command "," command respond_to? "]}," Spring CommandWrapper gem_name":{"type":"method","name":"gem_name","children":[],"call":[" exec_name "," command gem_name "," command "," command respond_to? "]}," Spring CommandWrapper process_title":{"type":"method","name":"process_title","children":[],"call":["(str \"spring\") join "," name ","(send nil :name) join "]}," Spring CommandWrapper call":{"type":"method","name":"call","children":[],"call":[" load "," exec "," command call "," command "," command respond_to? "]}," Spring CommandWrapper setup":{"type":"method","name":"setup","children":[],"call":[" command setup "," command "," command respond_to? "," setup? ! "," setup? "]}," Spring CommandWrapper setup?":{"type":"method","name":"setup?","children":[],"call":[]}," Spring CommandWrapper description":{"type":"method","name":"description","children":[],"call":[" name "," command description "," command "," command respond_to? "]}," Spring CommandWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring Client Version call":{"type":"method","name":"call","children":[],"call":[" puts "]}," Spring Client Binstub rails_command":{"type":"method","name":"rails_command","children":[],"call":[]}," Spring Client Binstub Item remove":{"type":"method","name":"remove","children":[],"call":[" status ","File  write "," existing sub "," existing "," command binstub "," command "]}," Spring Client Binstub Item generate":{"type":"method","name":"generate","children":[],"call":[" command binstub chmod "," command binstub "," command ","File  write "," command exec_name "," command gem_name "]}," Spring Client Binstub Item add":{"type":"method","name":"add","children":[],"call":[" status "," generate "," exit ","File  write "," command binstub "," command "," command binstub chmod ","FileUtils  touch "," command binstub exist? ","shebang include? "," existing partition "," existing "," existing =~ ","fallback include? ","fallback gsub! "," existing match [] "," existing match ","Regexp  escape "," existing include? "," existing sub "," existing match []  include? "," existing match []  gsub! "]}," Spring Client Binstub Item status":{"type":"method","name":"status","children":[],"call":["stream puts "," command binstub_name "," command "]}," Spring Client Binstub Item initialize":{"type":"method","name":"initialize","children":[],"call":["scriptfile read ","scriptfile exist? ","Spring  application_root_path join ","Spring  application_root_path ","command name == ","command name ","command binstub read ","command binstub ","command binstub exist? ","Spring  application_root_path join  read ","Spring  application_root_path join  exist? "]}," Spring Application print_exception":{"type":"method","name":"print_exception","children":[],"call":["stream puts ","rest each ","error class ","error backtrace drop ","error backtrace ","error backtrace first "]}," Spring Application exit_if_finished":{"type":"method","name":"exit_if_finished","children":[],"call":["Kernel  exit ","@waiting == "," exiting? ","@mutex synchronize ","@waiting empty? "]}," Spring Application exit":{"type":"method","name":"exit","children":[],"call":[" sleep "," exit_if_finished "," manager shutdown "," manager "," state "]}," Spring Application terminate":{"type":"method","name":"terminate","children":[],"call":[" state! ","Kernel  exit ","Process  kill ","@waiting each "," log "," exiting? ","@waiting each_key "]}," Spring Application start_watcher":{"type":"method","name":"start_watcher","children":[],"call":["@watcher start "," state! ","@watcher on_stale ","Spring  watcher "," spring_env log "," app_env "," spring_env ","@watcher on_debug ","@watcher respond_to? ","Spring  watcher  start ","Spring  watcher  on_stale ","Spring  watcher  on_debug ","Spring  watcher  respond_to? "]}," Spring Application initialized?":{"type":"method","name":"initialized?","children":[],"call":["@state == "]}," Spring Application watcher_stale?":{"type":"method","name":"watcher_stale?","children":[],"call":["@state == "]}," Spring Application terminating?":{"type":"method","name":"terminating?","children":[],"call":["@state == "]}," Spring Application preload_failed?":{"type":"method","name":"preload_failed?","children":[],"call":["@preloaded == "]}," Spring Application app_name":{"type":"method","name":"app_name","children":[],"call":[" spring_env app_name "," spring_env "]}," Spring Application app_env":{"type":"method","name":"app_env","children":[],"call":["ENV  [] "]}," Spring Application state!":{"type":"method","name":"state!","children":[],"call":["@interrupt last write ","@interrupt last "," state "]}," Spring Application state":{"type":"method","name":"state","children":[],"call":[" log "," exiting? "]}," Spring Application update_process_title":{"type":"method","name":"update_process_title","children":[],"call":[" app_env "," spring_env app_name "," spring_env ","ProcessTitleUpdater  run "]}," Spring Application reset_streams":{"type":"method","name":"reset_streams","children":[],"call":["STDIN  reopen ","stream reopen "," spring_env log_file "," spring_env ","(const nil :STDOUT) each "]}," Spring Application with_pty":{"type":"method","name":"with_pty","children":[],"call":[" reset_streams ","s reopen ","(const nil :STDOUT) each ","PTY  open ","master read ","Thread  new ","reader_thread kill ","Spring  failsafe_thread "]}," Spring Application eager_preload":{"type":"method","name":"eager_preload","children":[],"call":[" preload "," with_pty ","STDERR  reopen "]}," Spring Application active_record_configured?":{"type":"method","name":"active_record_configured?","children":[],"call":["ActiveRecord Base  configurations any? ","ActiveRecord Base  configurations "]}," Spring Commands RailsRunner extract_environment":{"type":"method","name":"extract_environment","children":[],"call":["args [] == ","args [] ","i - ","i > ","args select with_index ","args select "]}," Spring Client Run kill":{"type":"method","name":"kill","children":[],"call":["Process  kill ","Process  getpgid -@ ","Process  getpgid ","application gets to_i ","application gets ","application puts "]}," Spring Client Run queue_signals":{"type":"method","name":"queue_signals","children":[],"call":["@signal_queue << "," trap ","FORWARDED_SIGNALS  each "]}," Spring Client Run initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Spring Application wait":{"type":"method","name":"wait","children":[],"call":[" exit_if_finished ","@waiting delete ","@mutex synchronize ","client close ","client puts ","status exitstatus ","streams each "," log ","Process  wait2 ","Thread  new ","@waiting << ","Process  kill ","Process  getpgid -@ ","Process  getpgid ","client gets chomp ","client gets ","Spring  failsafe_thread ","@waiting []= "]}," Spring Test WatcherTest assert_not_stale":{"type":"method","name":"assert_not_stale","children":[],"call":[" assert "," watcher stale? ! "," watcher stale? "," watcher "," sleep ","LATENCY  * "]}," Spring Test WatcherTest assert_stale":{"type":"method","name":"assert_stale","children":[],"call":[" assert "," watcher stale? "," watcher "," sleep ","Time  now > ","Time  now ","Time  now + "]}," Spring Test WatcherTest touch":{"type":"method","name":"touch","children":[],"call":["FileUtils  touch ","options []= "]}," Spring Test WatcherTest teardown":{"type":"method","name":"teardown","children":[],"call":[" watcher stop "," watcher ","FileUtils  remove_entry_secure "]}," Spring Test WatcherTest setup":{"type":"method","name":"setup","children":[],"call":["File  realpath ","Dir  mktmpdir "]}," Spring Test WatcherTest watcher":{"type":"method","name":"watcher","children":[],"call":[" watcher_class new "," dir "," watcher_class "]}," Spring Test WatcherTest watcher_class":{"type":"method","name":"watcher_class","children":[],"call":[" raise "]}," Spring Test RailsVersion to_s":{"type":"method","name":"to_s","children":[],"call":[" version to_s "," version "]}," Spring Test RailsVersion minor":{"type":"method","name":"minor","children":[],"call":[" version segments [] "," version segments "," version "]}," Spring Test RailsVersion major":{"type":"method","name":"major","children":[],"call":[" version segments [] "," version segments "," version "]}," Spring Test RailsVersion bundles_spring?":{"type":"method","name":"bundles_spring?","children":[],"call":[" version > ","Gem Version  new "," version "," version segments take == "," version segments take "," version segments "]}," Spring Test RailsVersion controller_tests_dir":{"type":"method","name":"controller_tests_dir","children":[],"call":[" rails_3? "]}," Spring Test RailsVersion test_command":{"type":"method","name":"test_command","children":[],"call":[" needs_testunit? "]}," Spring Test RailsVersion rails_3?":{"type":"method","name":"rails_3?","children":[],"call":[" version < ","Gem Version  new "," version "]}," Spring Test RailsVersion initialize":{"type":"method","name":"initialize","children":[],"call":["Gem Version  new "]}," Spring Test ApplicationGenerator gemspec":{"type":"method","name":"gemspec","children":[],"call":["Gem Specification  find_by_name gem_dir ","Gem Specification  find_by_name "]}," Spring Test ApplicationGenerator generate_scaffold":{"type":"method","name":"generate_scaffold","children":[],"call":[" application run! "," application "]}," Spring Test ApplicationGenerator copy_to":{"type":"method","name":"copy_to","children":[],"call":[" system "," application root "," application "]}," Spring Test ApplicationGenerator build_and_install_gems":{"type":"method","name":"build_and_install_gems","children":[],"call":[" application run! ","spec gem_dir "," application "," system ","FileUtils  rm ","Dir  glob ","FileUtils  cd ","Gem Specification  find_by_name "," manually_built_gems each "," manually_built_gems ","Gem Specification  find_by_name  gem_dir "]}," Spring Test ApplicationGenerator manually_built_gems":{"type":"method","name":"manually_built_gems","children":[],"call":[]}," Spring Test ApplicationGenerator install_spring":{"type":"method","name":"install_spring","children":[],"call":[" application run! "," application spring "," application ","FileUtils  cp_r "," application path "," application path exist? ","FileUtils  rm_rf "," application bundle "," build_and_install_gems "," version ","RUBY_VERSION  < "," append_to_file "," application gemfile "]}," Spring Test ApplicationGenerator generate_if_missing":{"type":"method","name":"generate_if_missing","children":[],"call":[" generate "," application exists? "," application "]}," Spring Test ApplicationGenerator generate_files":{"type":"method","name":"generate_files","children":[],"call":["FileUtils  cp_r "," application path "," application "," application path exist? ","File  write "," application gemfile read sub "," application gemfile read "," application gemfile "," version needs_testunit? "," version ","FileUtils  rm_rf ","FileUtils  mkdir_p "," application user_home "," application gem_home "," raise "," application exists? "," system ","skips join "," application root ","skips << "," version bundles_spring? ","RailsVersion  new ","(str \"ruby -e 'puts Gem::Specification.find_by_name(\\\"rails\\\", \\\"\") chomp "," version_constraint ","c gsub! ","c sub! "," rewrite_file "," append_to_file ","RUBY_VERSION  == "]}," Spring Test ApplicationGenerator generate":{"type":"method","name":"generate","children":[],"call":[" generate_scaffold "," install_spring "," generate_files ","Bundler  with_clean_env "]}," Spring Test ApplicationGenerator system":{"type":"method","name":"system","children":[],"call":[" puts ","ENV  [] "," raise ","Kernel  system "]}," Spring Test ApplicationGenerator root":{"type":"method","name":"root","children":[],"call":[" test_root join "," version minor "," version "," version major "," test_root "]}," Spring Test ApplicationGenerator test_root":{"type":"method","name":"test_root","children":[],"call":["Pathname  new ","Spring Test  root "]}," Spring Test ApplicationGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["Application  new "," root ","RailsVersion  new ","version_constraint split last ","version_constraint split "]}," Spring Test Application process_alive?":{"type":"method","name":"process_alive?","children":[],"call":["Process  kill "]}," Spring Test Application bundle":{"type":"method","name":"bundle","children":[],"call":[" run! "]}," Spring Test Application run!":{"type":"method","name":"run!","children":[],"call":[" raise "," debug ","artifacts [] success? ","artifacts [] "," run ","attempts == ","(or\n  (send\n    (lvar :options) :delete\n    (sym :retry))\n  (int 0)) + ","options delete "," run  [] success? "," run  [] ","(or\n  (send\n    (lvar :options) :delete\n    (sym :retry))\n  (int 0)) +  == "]}," Spring Test Application await_reload":{"type":"method","name":"await_reload","children":[],"call":[" sleep "," process_alive? ","@application_pids any? ","Timeout  timeout "," raise ","@application_pids empty? ","@application_pids nil? "]}," Spring Test Application debug":{"type":"method","name":"debug","children":[],"call":[" dump_streams ","artifacts delete ","artifacts dup ","artifacts dup  delete ","artifacts dup  dup "]}," Spring Test Application dump_streams":{"type":"method","name":"dump_streams","children":[],"call":["output << ","stream chomp ","stream chomp empty? ","streams each "]}," Spring Test Application read_stream":{"type":"method","name":"read_stream","children":[],"call":["output << ","stream readpartial ","stream eof? ! ","stream eof? ","IO  select "]}," Spring Test Application read_streams":{"type":"method","name":"read_streams","children":[],"call":[" read_stream "," log_file "," stderr first "," stderr "," stdout first "," stdout "]}," Spring Test Application timing_ratio":{"type":"method","name":"timing_ratio","children":[],"call":[" last_time / "," first_time "," last_time "]}," Spring Test Application first_time":{"type":"method","name":"first_time","children":[],"call":["@times first "]}," Spring Test Application last_time":{"type":"method","name":"last_time","children":[],"call":["@times last "]}," Spring Test Application with_timing":{"type":"method","name":"with_timing","children":[],"call":[]}," Spring Test Application run":{"type":"method","name":"run","children":[],"call":[" raise "," dump_streams "," read_streams ","output merge ","@times << ","Time  now - ","Time  now "," puts ","ENV  [] ","l split last to_i ","l split last ","l split ","lines map ","(str \"ps -A -o ppid= -o pid= | egrep '^\\\\s*\") lines "," spring_env pid "," spring_env ","Process  wait2 ","Timeout  timeout ","opts fetch ","Process  spawn "," root to_s "," root "," stderr last "," stderr "," stdout last "," stdout ","command to_s "," env ","Bundler  with_clean_env "," read_streams  merge ","(str \"ps -A -o ppid= -o pid= | egrep '^\\s*\") lines  map ","(str \"ps -A -o ppid= -o pid= | egrep '^\\\\s*\") (str \"ps -A -o ppid= -o pid= | egrep '^\\s*\") lines  ","(str \"ps -A -o p spring_env pid = -o  spring_env pid = | egrep '^\\\\s*\") lines "," spring_env  spring_env pid  "]}," Spring Test Application spring_config":{"type":"method","name":"spring_config","children":[],"call":[" path "]}," Spring Test Application application_config":{"type":"method","name":"application_config","children":[],"call":[" path "]}," Spring Test Application controller":{"type":"method","name":"controller","children":[],"call":[" path "]}," Spring Test Application test":{"type":"method","name":"test","children":[],"call":[" path "," rails_version controller_tests_dir "," rails_version "]}," Spring Test Application stop_spring":{"type":"method","name":"stop_spring","children":[],"call":[" run "," spring "]}," Spring Test Application spring_test_command":{"type":"method","name":"spring_test_command","children":[],"call":[" test "," rails_version test_command "," rails_version "]}," Spring Test Application rails_version":{"type":"method","name":"rails_version","children":[],"call":["RailsVersion  new "," gemfile read match [] "," gemfile read match "," gemfile read "," gemfile "]}," Spring Test Application spring":{"type":"method","name":"spring","children":[],"call":[" gem_home join "," gem_home "]}," Spring Test Application user_home":{"type":"method","name":"user_home","children":[],"call":[" path "]}," Spring Test Application gem_home":{"type":"method","name":"gem_home","children":[],"call":[" path "]}," Spring Test Application gemfile":{"type":"method","name":"gemfile","children":[],"call":[" path "]}," Spring Test Application path":{"type":"method","name":"path","children":[],"call":[" root join "," root "]}," Spring Test Application env":{"type":"method","name":"env","children":[],"call":[" log_file path "," log_file "," user_home to_s "," user_home "," gem_home to_s "," gem_home "]}," Spring Test Application log_file":{"type":"method","name":"log_file","children":[],"call":[" path open "," path "]}," Spring Test Application stderr":{"type":"method","name":"stderr","children":[],"call":["IO  pipe "]}," Spring Test Application stdout":{"type":"method","name":"stdout","children":[],"call":["IO  pipe "]}," Spring Test Application exists?":{"type":"method","name":"exists?","children":[],"call":[" root exist? "," root "]}," Spring Test Application initialize":{"type":"method","name":"initialize","children":[],"call":["Spring Env  new ","Pathname  new "]}," Spring Test AcceptanceTest assert_speedup":{"type":"method","name":"assert_speedup","children":[],"call":[" assert "," app first_time "," app "," app last_time "," app timing_ratio < "," app timing_ratio "," app with_timing ","ENV  [] "]}," Spring Test AcceptanceTest assert_failure":{"type":"method","name":"assert_failure","children":[],"call":[" assert_output "," assert "," app debug "," app ","artifacts [] success? ! ","artifacts [] success? ","artifacts [] "," app run "," Array "," app run  [] success? ! "," app run  [] success? "," app run  [] "]}," Spring Test AcceptanceTest assert_success":{"type":"method","name":"assert_success","children":[],"call":[" assert_output "," assert "," app debug "," app ","artifacts [] success? ","artifacts [] "," app run "," Array "," app run  [] success? "," app run  [] "]}," Spring Test AcceptanceTest assert_output":{"type":"method","name":"assert_output","children":[],"call":[" assert "," app debug "," app ","artifacts [] include? ","artifacts [] ","expected each "]}," Spring Test AcceptanceTest app":{"type":"method","name":"app","children":[],"call":["Spring Test Application  new ","Spring Test  root "]}," Spring Test AcceptanceTest generator":{"type":"method","name":"generator","children":[],"call":[" generator_klass new "," rails_version "," generator_klass "]}," Spring Test AcceptanceTest generator_klass":{"type":"method","name":"generator_klass","children":[],"call":[]}," Spring Test AcceptanceTest rails_version":{"type":"method","name":"rails_version","children":[],"call":["ENV  [] "]}," Spring Env kill":{"type":"method","name":"kill","children":[],"call":["Process  kill "," pid ","  pid  "]}," Spring Env stop":{"type":"method","name":"stop","children":[],"call":[" kill "," server_running? "," sleep ","Time  now >= ","Time  now "," server_running? ! ","Time  now + "]}," Spring Client Run stop_server":{"type":"method","name":"stop_server","children":[],"call":[" env stop "," env "," server close "," server "]}," Spring Client Run run":{"type":"method","name":"run","children":[],"call":[" run_command "," connect_to_application "," queue_signals ","UNIXSocket  pair "," verify_server_version "," exit "]}," Spring Client Run cold_run":{"type":"method","name":"cold_run","children":[],"call":[" run "," boot_server "," connect "]}," Spring Client Run warm_run":{"type":"method","name":"warm_run","children":[],"call":[" raise "," cold_run "," stop_server ","Spring  command? "," args first "," args "," require "," run "]}," Spring Client Run gem_env":{"type":"method","name":"gem_env","children":[],"call":["(lvar :bundle) join ","ENV  [] to_s split ","ENV  [] to_s ","ENV  [] ","Bundler  bundle_path to_s ","Bundler  bundle_path ","(lvar :bundle) uniq join ","(lvar :bundle) uniq ","Gem  path + ","Gem  path ","(lvar :Bundler  bundle_path to_s ) join ","Bundler  Bundler  bundle_path to_s _path to_s ","Bundler  Bundler  bundle_path to_s _path ","(lvar :Bundler  bundle_path to_s ) uniq join ","(lvar :Bundler  bundle_path to_s ) uniq "]}," Spring Commands RailsTest command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Spring Commands RailsTest env":{"type":"method","name":"env","children":[],"call":["args [] == ","args [] ","i - ","i > ","arg =~ ","args each with_index ","args each "]}," Spring Test ApplicationGenerator append_to_file":{"type":"method","name":"append_to_file","children":[],"call":["c << "," rewrite_file "]}," Spring Test ApplicationGenerator rewrite_file":{"type":"method","name":"rewrite_file","children":[],"call":["File  write ","file read "]}," Spring Test AcceptanceTest without_gem":{"type":"method","name":"without_gem","children":[],"call":["FileUtils  mv "," app root join "," app root "," app ","gem_home join "," app gem_home join "," app gem_home "," app gem_home join  join "," app  app gem_home join  join "," app  app gem_home join  "]}," Spring Test AcceptanceTest refute_output_includes":{"type":"method","name":"refute_output_includes","children":[],"call":[" assert "," app debug "," app ","artifacts [] include? ! ","artifacts [] include? ","artifacts [] ","not_expected each "," app run "," Array "," app run  [] include? ! "," app run  [] include? "," app run  [] "]}," Spring Test AcceptanceTest spring_env":{"type":"method","name":"spring_env","children":[],"call":[" app spring_env "," app "]}," Spring Server default_log_file":{"type":"method","name":"default_log_file","children":[],"call":["ENV  [] ! ","ENV  [] "," foreground? "]}," Spring Server default_env":{"type":"method","name":"default_env","children":[],"call":["Env  new "," default_log_file "]}," Spring Server foreground?":{"type":"method","name":"foreground?","children":[],"call":[]}," Spring Env server_command":{"type":"method","name":"server_command","children":[],"call":["ENV  [] ","File  expand_path "]}," Spring Client Server foreground?":{"type":"method","name":"foreground?","children":[],"call":[" args include? ! "," args include? "," args "]}," Spring Client Server call":{"type":"method","name":"call","children":[],"call":["Spring Server  boot "," foreground? "," require "]}," Spring Client Server description":{"type":"method","name":"description","children":[],"call":[]}," Spring Client Run connect":{"type":"method","name":"connect","children":[],"call":["UNIXSocket  open "," env socket_name "," env "]}," Spring Test Application spring_client_config":{"type":"method","name":"spring_client_config","children":[],"call":[" path "]}," Spring Client Run server_booted?":{"type":"method","name":"server_booted?","children":[],"call":[]}," Spring failsafe_thread":{"type":"method","name":"failsafe_thread","children":[],"call":["Thread  new "]}," Spring Test Application insert_into_test":{"type":"method","name":"insert_into_test","children":[],"call":["File  write "," test read sub "," test read "," test "]}," Spring Watcher Polling running?":{"type":"method","name":"running?","children":[],"call":["@poller alive? "]}," Spring Watcher Abstract debug":{"type":"method","name":"debug","children":[],"call":["@on_debug call "]}," Spring Watcher Abstract on_debug":{"type":"method","name":"on_debug","children":[],"call":[]}," Spring Client Run suspend_resume_on_tstp_cont":{"type":"method","name":"suspend_resume_on_tstp_cont","children":[],"call":["Process  kill ","pid to_i "," log "," trap ","Process  pid "]}," Spring gemfile_lock":{"type":"method","name":"gemfile_lock","children":[],"call":[" gemfile sub_ext "," gemfile "," gemfile to_s "]}," Spring quiet":{"type":"method","name":"quiet","children":[],"call":["ENV  key? "]}," Spring Watcher Abstract synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize "]}}