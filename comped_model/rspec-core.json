{" RSpec run_tests":{"type":"method","name":"run_tests","children":[],"call":[" RSpec Core CommandLine  new run "," RSpec Core CommandLine  new "]}," RSpec clear_remaining_example_groups":{"type":"method","name":"clear_remaining_example_groups","children":[],"call":[]}," RSpec configure":{"type":"method","name":"configure","children":[],"call":[]}," RSpec configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec world":{"type":"method","name":"world","children":[],"call":[]}," RSpec wants_to_quit=":{"type":"method","name":"wants_to_quit=","children":[],"call":[]}," RSpec wants_to_quit":{"type":"method","name":"wants_to_quit","children":[],"call":[]}," RSpec Core world":{"type":"method","name":"world","children":[],"call":[]}," RSpec Core configure":{"type":"method","name":"configure","children":[],"call":[]}," RSpec Core configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec Core install_directory":{"type":"method","name":"install_directory","children":[],"call":[]}," RSpec Core World declaration_line_numbers":{"type":"method","name":"declaration_line_numbers","children":[],"call":["lines + ","g declaration_line_numbers "," example_groups inject "," example_groups ","FlatMap  flat_map "]}," RSpec Core World all_apply?":{"type":"method","name":"all_apply?","children":[],"call":["example metadata all_apply? ","example metadata "," lambda "]}," RSpec Core World find_hook":{"type":"method","name":"find_hook","children":[],"call":["@configuration find_hook ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :RSpec) :configuration) :hooks) :[]\n      (lvar :hook)) :[]\n    (lvar :scope)) :select) map ","group all_apply? ","RSpec  configuration hooks [] [] select ","RSpec  configuration hooks [] [] ","RSpec  configuration hooks [] ","RSpec  configuration hooks ","RSpec  configuration ","RSpec  configuration find_hook "]}," RSpec Core World announce_exclusion_filter":{"type":"method","name":"announce_exclusion_filter","children":[],"call":[" example_groups clear "," example_groups ","@configuration reporter message "," exclusion_filter inspect "," exclusion_filter ","@configuration reporter ","RSpec  world example_count zero? ","RSpec  world example_count ","RSpec  world ","announcements << "," exclusion_filter description "," exclusion_filter empty_without_conditional_filters? "," exclusion_filter rules_empty? "," exclusion_filter empty? "]}," RSpec Core World announce_inclusion_filter":{"type":"method","name":"announce_inclusion_filter","children":[],"call":["@configuration reporter message "," inclusion_filter inspect "," inclusion_filter ","@configuration reporter "," filtered_examples clear "," filtered_examples ","@configuration clear_inclusion_filter ","RSpec  world example_count zero? ","RSpec  world example_count ","RSpec  world ","@configuration run_all_when_everything_filtered? ","RSpec  configuration output_stream puts ","RSpec  configuration output_stream ","RSpec  configuration ","RSpec  configuration clear_inclusion_filter ","RSpec  world example_count == ","RSpec  configuration run_all_when_everything_filtered? ","RSpec  configuration puts ","announcements << "," inclusion_filter description "," inclusion_filter empty? "]}," RSpec Core World preceding_declaration_line":{"type":"method","name":"preceding_declaration_line","children":[],"call":["line <= "," declaration_line_numbers inject "," declaration_line_numbers "," declaration_line_numbers sort inject "," declaration_line_numbers sort ","num <= ","line_numbers find "," descending_declaration_line_numbers_by_file fetch "," descending_declaration_line_numbers_by_file "]}," RSpec Core World apply_exclusion_filters":{"type":"method","name":"apply_exclusion_filters","children":[],"call":["examples reject "," all_apply? "," apply? ","e metadata any_apply? ","e metadata ","filters empty? "]}," RSpec Core World apply_inclusion_filters":{"type":"method","name":"apply_inclusion_filters","children":[],"call":["examples select "," all_apply? "," apply? ","e metadata any_apply? ","e metadata ","filters empty? "]}," RSpec Core World example_count":{"type":"method","name":"example_count","children":[],"call":["g filtered_examples size ","g filtered_examples ","(send\n  (send nil :example_groups) :collect) flatten inject ","(send\n  (send nil :example_groups) :collect) flatten ","g descendants "," example_groups collect "," example_groups ","g descendents ","sum + ","(send\n  (const nil :FlatMap) :flat_map\n  (lvar :groups)) inject ","FlatMap  flat_map ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :example_groups)) inject ","a + ","e filtered_examples size ","e filtered_examples "]}," RSpec Core World shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":[]}," RSpec Core World configure_group":{"type":"method","name":"configure_group","children":[],"call":["@configuration configure_group "]}," RSpec Core World exclusion_filter":{"type":"method","name":"exclusion_filter","children":[],"call":["@configuration exclusion_filter "," configuration exclusion_filter "," configuration ","@configuration exclusion_filter extend "]}," RSpec Core World inclusion_filter":{"type":"method","name":"inclusion_filter","children":[],"call":["@configuration filter "," configuration filter "," configuration ","@configuration inclusion_filter ","@configuration inclusion_filter extend "]}," RSpec Core World initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","examples uniq "," apply_inclusion_filters "," inclusion_filter "," apply_exclusion_filters "," exclusion_filter ","group examples dup ","group examples ","Hash  new ","examples extend "," filter_manager prune "," filter_manager "," extend ","examples uniq! "," prepare_example_filtering ","configuration world= "," apply_inclusion_filters  uniq "," apply_exclusion_filters  uniq ","group examples dup  uniq "," filter_manager prune  uniq ","group  apply_inclusion_filters  dup ","group  apply_exclusion_filters  dup ","group group examples dup  dup ","group  filter_manager prune  dup ","group  apply_inclusion_filters  ","group  apply_exclusion_filters  ","group group examples dup  ","group  filter_manager prune  "," apply_inclusion_filters  extend "," apply_exclusion_filters  extend ","group examples dup  extend "," filter_manager prune  extend "," apply_inclusion_filters  uniq! "," apply_exclusion_filters  uniq! ","group examples dup  uniq! "," filter_manager prune  uniq! "]}," RSpec Core Subject ClassMethods implicit_subject":{"type":"method","name":"implicit_subject","children":[],"call":[" proc ","described new ","Class  === "," description "," describes "]}," RSpec Core Subject ClassMethods explicit_subject":{"type":"method","name":"explicit_subject","children":[],"call":["group superclass ","group explicit_subject_block ","group respond_to? ","group superclass  superclass ","group superclass  explicit_subject_block ","group superclass  respond_to? "]}," RSpec Core Subject ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[" implicit_subject "," explicit_subject "]}," RSpec Core Subject ClassMethods its":{"type":"method","name":"its","children":[],"call":[" instance_eval ","target send ","attribute to_s split inject ","attribute to_s split ","attribute to_s ","OpenStruct  new send ","attribute first ","OpenStruct  new ","attribute is_a? "," is_a? "," define_method "," class class_eval "," class "," example "," describe "," [] "]}," RSpec Core Subject should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "," __should_not_for_example_group__ "," == "]}," RSpec Core Subject should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "," __should_for_example_group__ "," == "]}," RSpec Core Subject subject":{"type":"method","name":"subject","children":[],"call":[" instance_eval "," class subject "," class "," original_subject "," attribute_of_subject "," using_attribute? "]}," RSpec Core Subject included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Core SharedExampleGroup ensure_shared_example_group_name_not_taken":{"type":"method","name":"ensure_shared_example_group_name_not_taken","children":[],"call":[" raise ","ArgumentError  new ","RSpec  world shared_example_groups has_key? ","RSpec  world shared_example_groups ","RSpec  world "]}," RSpec Core SharedExampleGroup raise_name_error":{"type":"method","name":"raise_name_error","children":[],"call":[" raise "," name "]}," RSpec Core SharedExampleGroup share_as":{"type":"method","name":"share_as","children":[{"type":"method","name":"created_from_caller","children":[],"asgn":[],"call":[]},{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world ","Object  const_set ","kls children first metadata []= "," name ","kls children first metadata ","kls children first ","kls children ","kls describe ","@caller_line == ","other_caller last "," caller last "," caller ","Module  new "," raise_name_error ","mod created_from_caller ","Object  const_get ","Object  const_defined? ","kls module_eval ","Registry  add_const ","RSpec  deprecate ","SharedExampleGroup  registry add_const ","SharedExampleGroup  registry "," caller last  == ","Object  const_get  created_from_caller ","kls Object  const_get ule_eval "]}," RSpec Core SharedExampleGroup share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world "," ensure_shared_example_group_name_not_taken "," shared_examples ","RSpec  deprecate "]}," RSpec Core Runner run_in_process":{"type":"method","name":"run_in_process","children":[],"call":[]}," RSpec Core Runner run_over_drb":{"type":"method","name":"run_over_drb","children":[],"call":[]}," RSpec Core Runner run":{"type":"method","name":"run","children":[],"call":[" example_groups success? "," example_groups "," example_groups run_examples "," reporter report "," example_count "," reporter ","RSpec  world announce_inclusion_filter ","RSpec  world "," configure ","@configuration run_hook ","@configuration failure_exit_code ","(send\n  (send\n    (send\n      (ivar :@world) :example_groups) :ordered) :map) all? ","g run ","@world example_groups ordered map ","@world example_groups ordered ","@world example_groups ","@configuration reporter report ","@configuration seed ","@configuration send ","@world example_count ","@configuration reporter ","@world announce_filters ","@configuration load_spec_files ","@options configure ","@configuration output_stream= ","@configuration output_stream == ","@configuration output_stream ","@configuration error_stream= "," run_specs ","@world ordered_example_groups "," setup "," persist_example_statuses "," run_specs tap ","@configuration reporter exit_early "," exit_code ","RSpec  world wants_to_quit "]}," RSpec Core Runner trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":[]}," RSpec Core Runner running_in_drb?":{"type":"method","name":"running_in_drb?","children":[],"call":[]}," RSpec Core Runner installed_at_exit?":{"type":"method","name":"installed_at_exit?","children":[],"call":[]}," RSpec Core Runner disable_autorun!":{"type":"method","name":"disable_autorun!","children":[],"call":[]}," RSpec Core Runner autorun_disabled?":{"type":"method","name":"autorun_disabled?","children":[],"call":[]}," RSpec Core Runner autorun":{"type":"method","name":"autorun","children":[],"call":[]}," RSpec Core RubyProject ascend_until":{"type":"method","name":"ascend_until","children":[],"call":["block call "," Pathname ascend "," Pathname ","File  expand_path ","parts pop ","path == ","parts join ","parts empty? ","x gsub ","project_path gsub squeeze split map ","project_path gsub squeeze split ","project_path gsub squeeze ","project_path gsub ","File  expand_parts join  ","parts join  == ","project_parts join  gsub squeeze split map ","File  expand_path  gsub squeeze split map ","project_parts join  gsub squeeze split ","File  expand_path  gsub squeeze split ","project_parts join  gsub squeeze ","File  expand_path  gsub squeeze ","project_parts join  gsub ","File  expand_path  gsub "]}," RSpec Core RubyProject find_first_parent_containing":{"type":"method","name":"find_first_parent_containing","children":[],"call":["File  exists? ","File  join "," ascend_until ","File  exist? "]}," RSpec Core RubyProject determine_root":{"type":"method","name":"determine_root","children":[],"call":[" find_first_parent_containing "]}," RSpec Core RubyProject root":{"type":"method","name":"root","children":[],"call":[" determine_root "]}," RSpec Core RubyProject add_dir_to_load_path":{"type":"method","name":"add_dir_to_load_path","children":[],"call":["$LOAD_PATH unshift ","$LOAD_PATH include? "]}," RSpec Core RubyProject add_to_load_path":{"type":"method","name":"add_to_load_path","children":[],"call":[" add_dir_to_load_path ","File  join "," root ","dirs map ","dirs each "]}," Core Reporter notify":{"type":"method","name":"notify","children":[],"call":["formatter send ","@formatters each "," registered_listeners each "," registered_listeners ","formatter __send__ "," ensure_listeners_ready "]}," Core Reporter stop":{"type":"method","name":"stop","children":[],"call":[" notify ","Time  now - ","Time  now ","(send\n  (send\n    (const\n      (const\n        (const nil :RSpec) :Core) :Time) :now) :-\n  (ivar :@start)) to_f ","RSpec Core Time  now - ","RSpec Core Time  now ","Notifications ExamplesNotification  new "]}," Core Reporter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" notify ","Notifications ExampleNotification  for ","@pending_examples << ","Notifications ExampleNotification  new "]}," Core Reporter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" notify ","Notifications ExampleNotification  for ","@failed_examples << ","Notifications ExampleNotification  new "]}," Core Reporter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" notify ","Notifications ExampleNotification  for ","Notifications ExampleNotification  new "]}," Core Reporter example_started":{"type":"method","name":"example_started","children":[],"call":[" notify ","Notifications ExampleNotification  for ","@examples << ","Notifications ExampleNotification  new "]}," Core Reporter example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":[" notify ","group descendant_filtered_examples empty? ","group descendant_filtered_examples ","Notifications GroupNotification  new "]}," Core Reporter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":[" notify ","group descendant_filtered_examples empty? ","group descendant_filtered_examples ","Notifications GroupNotification  new "]}," Core Reporter message":{"type":"method","name":"message","children":[],"call":[" notify ","Notifications MessageNotification  new "]}," Core Reporter start":{"type":"method","name":"start","children":[],"call":[" notify ","Time  now ","RSpec Core Time  now ","Notifications StartNotification  new ","(send\n  (ivar :@start) :-\n  (send\n    (ivar :@configuration) :start_time)) to_f ","@start - ","@configuration start_time ","Notifications CountNotification  new ","Notifications SeedNotification  new "," seed_used? ","@configuration seed ","(send\n  (ivar :Time  now ) :-\n  (send\n    (ivar :@configuration) :start_time)) to_f ","(send\n  (ivar :RSpec Core Time  now ) :-\n  (send\n    (ivar :@configuration) :start_time)) to_f ","Time  now  - ","RSpec Core Time  now  - "]}," Core Reporter conclude":{"type":"method","name":"conclude","children":[],"call":[" notify "," stop "]}," Core Reporter report":{"type":"method","name":"report","children":[],"call":[" conclude "," start "," notify "," stop "," finish "]}," Core Reporter initialize":{"type":"method","name":"initialize","children":[],"call":[" register_listener ","formatters each ","h []= ","Hash  new ","Set  new "," lambda "]}," RSpec Core RakeTask blank":{"type":"method","name":"blank","children":[],"call":["s == "," lambda ","s nil? "]}," RSpec Core RakeTask warning?":{"type":"method","name":"warning?","children":[],"call":[" warning "]}," RSpec Core RakeTask bundler?":{"type":"method","name":"bundler?","children":[],"call":["File  exist? ","ENV  [] ","ENV  [] == "]}," RSpec Core RakeTask runner":{"type":"method","name":"runner","children":[],"call":[" rspec_path "," rcov_path "," rcov "]}," RSpec Core RakeTask spec_command":{"type":"method","name":"spec_command","children":[],"call":["cmd_parts flatten compact reject join ","cmd_parts flatten compact reject "," blank ","cmd_parts flatten compact ","cmd_parts flatten ","cmd_parts << "," rspec_opts "," rcov "," files_to_run "," rcov_opts "," runner "," bundler? "," warning? "," ruby_opts ","cmd_parts join "," files_to_run map ","cmd_parts unshift "," bundler "," runner_options "," warning "," spec_opts join "," spec_opts "," gemfile? "," skip_bundler ","cmd_parts flatten reject join ","cmd_parts flatten reject ","cmd_parts << << "," rspec_path "," rspec_load_path "," file_exclusion_specification "," file_inclusion_specification "," escape "]}," RSpec Core RakeTask files_to_run":{"type":"method","name":"files_to_run","children":[],"call":["FileList  [] map ","FileList  [] "," pattern ","ENV  [] ","FileList  [] to_a ","f gsub gsub ","f gsub ","f shellescape ","FileList  [] sort map ","FileList  [] sort "," shellescape "]}," RSpec Core RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," spec_command "," fail_on_error "," puts "," failure_message "," ruby "," pattern "," files_to_run empty? "," files_to_run ","RakeFileUtils  send "," verbose "," task "," name "," desc "," Rake  application last_comment "," Rake  application "," block_given? ","args shift "," define ","STDERR  puts "," spec_command inspect "," system "," run_task ","task_block call ","(self) slice ","task_block arity "," setup_ivars ","RakeFileUtils  __send__ "]}," RSpec Core RakeTask spec_opts=":{"type":"method","name":"spec_opts=","children":[],"call":["RSpec  deprecate "," deprecate "]}," RSpec Core RakeTask warning=":{"type":"method","name":"warning=","children":[],"call":["RSpec  deprecate "," deprecate "]}," RSpec Core Pending pending":{"type":"method","name":"pending","children":[],"call":[" throw "," raise ","RSpec Core PendingExampleFixedError  new "," example metadata []= "," example metadata "," example "," block_given? "," example metadata [] []= "," example metadata [] "," running_example metadata []= "," running_example metadata "," running_example "," running_example metadata [] []= "," running_example metadata [] ","options [] ! ","options [] ","options has_key? ","args first ","args pop ","args last is_a? ","args last ","PendingDeclaredInExample  new ","PendingExampleFixedError  new "," teardown_mocks_for_rspec "," example execution_result []= "," example execution_result "," verify_mocks_for_rspec "," example example_group_instance instance_eval "," example example_group_instance "," pending "," class before "," class "," pending_no_warning ","RSpec  warn_deprecation ","(str \"          |The semantics of `RSpec::Core::Pending#pending` are changing in\\n\") gsub ","CallerFilter  first_non_rspec_line ","RSpec  current_example execution_result []= ","RSpec  current_example execution_result ","RSpec  current_example ","RSpec  current_example metadata []= ","RSpec  current_example metadata ","RSpec  current_example example_group_instance instance_eval ","RSpec  current_example example_group_instance ","RSpec  current_example metadata [] []= ","RSpec  current_example metadata [] ","`pending` may not be used outside of examples, such as in  + ","Pending  mark_pending! ","(str \"            |The semantics of `RSpec::Core::Pending#pending` have changed in\\n\") gsub ","current_example execution_result []= ","current_example execution_result ","current_example metadata []= ","current_example metadata ","current_example example_group_instance instance_eval ","current_example example_group_instance ","current_example metadata [] []= ","current_example metadata [] ","args pop  [] ! ","args pop  [] ","args pop  has_key? ","RSpec  RSpec  current_example  execution_result []= ","RSpec  RSpec  current_example  execution_result ","RSpec  RSpec  current_example  ","RSpec  RSpec  current_example  metadata []= ","RSpec  RSpec  current_example  metadata ","RSpec  RSpec  current_example  example_group_instance instance_eval ","RSpec  RSpec  current_example  example_group_instance ","RSpec  RSpec  current_example  metadata [] []= ","RSpec  RSpec  current_example  metadata [] ","RSpec  current_example  execution_result []= ","RSpec  current_example  execution_result ","RSpec  current_example  metadata []= ","RSpec  current_example  metadata ","RSpec  current_example  example_group_instance instance_eval ","RSpec  current_example  example_group_instance ","RSpec  current_example  metadata [] []= ","RSpec  current_example  metadata [] "]}," Core Parser parser":{"type":"method","name":"parser","children":[],"call":["options []= ","parser on ","o to_i "," exit ","CommandLineConfiguration  new run ","CommandLineConfiguration  new "," puts ","options [] << ","options [] ","parser on_tail ","File  open ","parser banner= ","OptionParser  new "," local_options_file ","options [] []= ","value nil? ","name to_sym ","tag gsub split ","tag gsub ","tag =~ ","parser separator "," eval ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :line_numbers))\n  (array)) << ","Regexp  compile ","Regexp  escape ","options [] last << ","options [] last "," warn ","ProjectInitializer  new run ","ProjectInitializer  new ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :full_description))\n  (array)) << ","argument to_i ","argument == ","argument nil? ","Kernel  warn ","Non integer specified as profile count, seperate  + + ","Non integer specified as profile count, seperate  + "," Integer ","RSpec  deprecate ","Metadata  line_number_filter_deprecation_issued= ","o == "," raise ","OptionParser InvalidOption  new ","invalid_options each ","parser to_s gsub ","invalid_options join ","parser to_s "," Float ","value [] to_sym ","value [] ","RSpec  warning ","RSpec Support  require_rspec_core "," require ","(str \"-d\") each ","RSpec Core Invocations PrintHelp  new ","invalid_options + ","RSpec Core Invocations PrintVersion  new ","RSpec Core Invocations InitializeProject  new "," add_tag_filter ",", + "," set_fail_fast "," configure_only_failures "," abort ","options [] == ","RSpec Core Invocations DRbWithFallback  new ","argument inspect ","RSpec Core Invocations Bisect  new ","options [] concat ","dirs split ","parser summary_width= ","Warning  []= ","Warning  respond_to? ","Object  const_defined? "," print_help_and_exit "," print_version_and_exit "," initialize_project_and_exit "," bisect_and_exit "," Integer  nil? ","name to_sym  to_sym "," Integer  [] to_sym "," Integer  [] "]}," Core Parser parse!":{"type":"method","name":"parse!","children":[],"call":[" parser parse! "," parser ","args []= ","args index ","RSpec  deprecate ","args include? ","args empty? ","args delete "," abort ","e message "," convert_deprecated_args "," pre_parse "]}," RSpec Core MockFrameworkAdapter teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":["RSpec Mocks  teardown ","RR Space  instance reset ","RR Space  instance "," flexmock_close "," mocha_teardown "]}," RSpec Core MockFrameworkAdapter verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":["RSpec Mocks  verify ","RR Space  instance verify_doubles ","RR Space  instance "," flexmock_verify "," mocha_verify "]}," RSpec Core MockFrameworkAdapter setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":["RSpec Mocks  setup ","RR Space  instance reset ","RR Space  instance "," mocha_setup "]}," RSpec Core Metadata candidate_entries_from_caller":{"type":"method","name":"candidate_entries_from_caller","children":[],"call":["metadata [] grep ","metadata [] "]}," RSpec Core Metadata file_and_line_number":{"type":"method","name":"file_and_line_number","children":[],"call":["entry match [] ","entry match "," candidate_entries_from_caller first "," candidate_entries_from_caller ","entry split "," candidate_entries_from_caller first  match [] "," candidate_entries_from_caller first  match "," candidate_entries_from_caller first  split "]}," RSpec Core Metadata location_from":{"type":"method","name":"location_from","children":[],"call":["metadata [] "]}," RSpec Core Metadata line_number_from":{"type":"method","name":"line_number_from","children":[],"call":["line_number to_i "," file_and_line_number [] "," file_and_line_number "," file_and_line_number []  to_i "," file_and_ file_and_line_number []  [] "," file_and_ file_and_line_number []  "]}," RSpec Core Metadata file_path_from":{"type":"method","name":"file_path_from","children":[],"call":["file strip "," file_and_line_number [] "," file_and_line_number "," file_and_line_number []  strip ","  file_and_line_number [] _and_line_number [] ","  file_and_line_number [] _and_line_number "]}," RSpec Core Metadata described_class_from":{"type":"method","name":"described_class_from","children":[],"call":["args first "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata ","args first is_a? "]}," RSpec Core Metadata full_description_from":{"type":"method","name":"full_description_from","children":[],"call":[" description_from "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata "]}," RSpec Core Metadata description_from":{"type":"method","name":"description_from","children":[],"call":["a =~ ","result == ","a to_s strip ","a to_s ","args inject ","(send\n  (lvar :args) :map) join ","args map ","a to_s strip  =~ ","a to_s strip  to_s strip ","a to_s strip  to_s ","a to_s strip rgs inject ","(send\n  (lva to_s strip r :a to_s strip rgs) :ma to_s strip p) join ","a to_s strip rgs ma to_s strip p "]}," RSpec Core Metadata superclass_metadata":{"type":"method","name":"superclass_metadata","children":[],"call":[]}," RSpec Core Metadata world":{"type":"method","name":"world","children":[],"call":["RSpec  world "]}," RSpec Core Metadata apply_condition":{"type":"method","name":"apply_condition","children":[],"call":["metadata [] == ","metadata [] "," relevant_line_numbers include? "," world preceding_declaration_line "," world "," relevant_line_numbers ","key == ","value call ","metadata [] =~ "," apply_condition ","value all? ","filter_on == ","filter call ","filter all? ","value arity == ","value arity ","metadata [] to_s == ","value to_s ","metadata [] to_s "]}," RSpec Core Metadata relevant_line_numbers":{"type":"method","name":"relevant_line_numbers","children":[],"call":["line_numbers + "," relevant_line_numbers ","metadata [] ","(send\n  (lvar :metadata) :[]\n  (sym :line_number)) + "]}," RSpec Core Metadata all_apply?":{"type":"method","name":"all_apply?","children":[],"call":[" apply_condition ","filters all? "," filter_applies? "]}," RSpec Core Metadata configure_for_example":{"type":"method","name":"configure_for_example","children":[],"call":[" update "," []= "," location_from "," store "," line_number_from "," file_path_from "," [] ","options delete "," [] [] ","description to_s "," file_and_line_number_from "," caller ","user_metadata delete "]}," RSpec Core Metadata for_example":{"type":"method","name":"for_example","children":[],"call":[" dup configure_for_example "," dup "," dup extend configure_for_example "," dup extend "]}," RSpec Core Metadata ensure_valid_keys":{"type":"method","name":"ensure_valid_keys","children":[],"call":[" raise ","* * ","RESERVED_KEYS  join "," caller [] "," caller ","user_metadata keys include? ","user_metadata keys ","RESERVED_KEYS  each ","user_metadata has_key? ","CallerFilter  first_non_rspec_line "]}," RSpec Core Metadata process":{"type":"method","name":"process","children":[],"call":[" update "," [] []= "," location_from "," [] "," line_number_from ","user_metadata delete "," file_path_from "," caller "," full_description_from "," description_from "," described_class_from "," ensure_valid_keys ","args pop ","args last is_a? ","args last "," file_and_line_number_from "," [] store ","args pop  delete "]}," RSpec Core Metadata initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," store ","@superclass_metadata [] "," update "," [] "," extend ","(pair\n  (sym :example_group)\n  (send\n    (send\n      (lvar :parent_group_metadata) :[]\n      (sym :example_group)) :extend\n    (const nil :GroupMetadataHash))) extend ","parent_group_metadata [] extend ","parent_group_metadata [] ","example_group extend ","(pair\n  (sym :example_group)\n  (send\n    (lvar :parent_group_metadata) :[]\n    (sym :example_group))) extend "]}," RSpec Core Let included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Core Let InstanceMethods __memoized":{"type":"method","name":"__memoized","children":[],"call":[]}," RSpec Core Let ClassMethods let!":{"type":"method","name":"let!","children":[],"call":[" __send__ "," before "," let "]}," RSpec Core Let ClassMethods let":{"type":"method","name":"let","children":[],"call":[" instance_eval "," __memoized [] "," __memoized "," define_method "," __memoized []= "," __memoized fetch "]}," RSpec Core Hooks scope_and_options_from":{"type":"method","name":"scope_and_options_from","children":[],"call":["Hash  === "," build_metadata_hash_from "," extract_scope_from "," raise ","ArgumentError  new ","a is_a? ","args any? ","args shift ","(sym :each) include? ","args first ","SCOPES  include? ","Metadata  build_hash_from "," extract_args shift _from "]}," RSpec Core Hooks find_hook":{"type":"method","name":"find_hook","children":[],"call":[" hooks [] [] find_hooks_for "," hooks [] [] "," hooks [] "," hooks ","hook options_apply? "," hooks [] [] select "," hooks [] [] with "," after_each_hooks_for "," before_each_hooks_for "," around_each_hooks_for "," after_all_hooks_for "," before_all_hooks_for ","super_klass superclass ","found_hooks without_hooks_for ","super_klass != ","example_group_class superclass ","scope == ","super_klass superclass  superclass ","example_group_class superclass  superclass ","found_hooks without_hooks_for  without_hooks_for "," hooks [] [] find_hooks_for  without_hooks_for ","super_klass superclass  != ","example_group_class superclass  != "]}," RSpec Core Hooks run_hook_filtered":{"type":"method","name":"run_hook_filtered","children":[],"call":[" find_hook run_all "," find_hook "," find_hook each "," run_hook_in "]}," RSpec Core Hooks run_hook!":{"type":"method","name":"run_hook!","children":[],"call":[" hooks [] [] run_all! "," hooks [] [] "," hooks [] "," hooks ","example instance_eval "," hooks [] [] pop "," hooks [] [] shift ","options [] "," hooks [] [] empty? "]}," RSpec Core Hooks run_hook":{"type":"method","name":"run_hook","children":[],"call":[" hooks [] [] run_all "," hooks [] [] "," hooks [] "," hooks "," hooks [] [] each "," run_hook_in "," hooks [] [] reverse each "," hooks [] [] reverse ","options [] "," find_hook run "," find_hook ","RSpec  configuration dry_run? ","RSpec  configuration "]}," RSpec Core Hooks around":{"type":"method","name":"around","children":[],"call":[" hooks [] [] << ","AroundHook  new "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from "," around_blocks [] << "," around_blocks [] "," around_blocks ","RSpec  deprecate "," hooks [] [] unshift ","block extend with ","block extend "," register_hook "," hooks register "]}," RSpec Core Hooks after":{"type":"method","name":"after","children":[],"call":[" hooks [] [] << ","AfterHook  new "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from "," after_blocks [] << "," after_blocks [] "," after_blocks ","Hook  new "," hooks [] [] unshift ","block extend with ","block extend "," register_hook "," hooks register "]}," RSpec Core Hooks before":{"type":"method","name":"before","children":[],"call":[" hooks [] [] << ","BeforeHook  new "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from "," before_blocks [] << "," before_blocks [] "," before_blocks ","Hook  new ","block extend with ","block extend "," register_hook "," hooks register "]}," RSpec Core Hooks hooks":{"type":"method","name":"hooks","children":[],"call":["AfterHooks  new ","BeforeHooks  new ","AroundHooks  new ","HookCollection  new ","AroundHookCollection  new ","(pair\n  (sym :around)\n  (hash\n    (pair\n      (sym :each)\n      (send\n        (const nil :AroundHookCollection) :new)))) extend ","HookCollections  new "]}," RSpec Core Hooks AfterHooks run_all!":{"type":"method","name":"run_all!","children":[],"call":[" pop run_in "," pop "," empty? "]}," RSpec Core Hooks AfterHooks run_all":{"type":"method","name":"run_all","children":[],"call":["h run_in "," reverse each "," reverse "," empty? "]}," RSpec Core Hooks BeforeHooks run_all!":{"type":"method","name":"run_all!","children":[],"call":[" shift run_in "," shift "," empty? "]}," RSpec Core Hooks BeforeHooks run_all":{"type":"method","name":"run_all","children":[],"call":["h run_in "," each "," empty? "]}," RSpec Core Hooks HookCollection find_hooks_for":{"type":"method","name":"find_hooks_for","children":[],"call":["hook options_apply? ! ","hook options_apply? "," dup reject "," dup "," class new "," select "," class "]}," RSpec Core Hooks AroundHook call":{"type":"method","name":"call","children":[],"call":["@block call "]}," RSpec Core Hooks AfterHook run_in":{"type":"method","name":"run_in","children":[],"call":[" call ","example_group_instance instance_eval_with_rescue ","example example set_exception ","example example ","example respond_to? ","example instance_eval "]}," RSpec Core Hooks BeforeHook run_in":{"type":"method","name":"run_in","children":[],"call":[" call ","example_group_instance instance_eval ","example instance_eval "]}," RSpec Core Hooks Hook call":{"type":"method","name":"call","children":[],"call":["@block call "]}," RSpec Core Hooks Hook to_proc":{"type":"method","name":"to_proc","children":[],"call":[]}," RSpec Core Hooks Hook options_apply?":{"type":"method","name":"options_apply?","children":[],"call":["group all_apply? "," options ","group ! ","group apply? ","example_or_group all_apply? ","example_or_group apply? ","example_or_group ! "]}," RSpec Core Hooks Hook initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," class "," display_name "]}," RSpec Core Formatters TextMateFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["File  expand_path ","line sub! "," format_backtrace_line_for_textmate "]}," RSpec Core Formatters SnippetExtractor post_process":{"type":"method","name":"post_process","children":[],"call":["new_lines join ","new_lines << ","i == ","offending_line + - ","offending_line + ","highlighted split each_with_index ","highlighted split "]}," RSpec Core Formatters SnippetExtractor lines_around":{"type":"method","name":"lines_around","children":[],"call":["lines [] join ","lines [] ","selected_lines join ","(send\n  (lvar :line) :+\n  (int 1)) min ","lines length - ","lines length ","line + ","(int 0) max ","line - ","File  open read split ","File  open read ","File  open ","File  file? ","File  read split ","File  read ","File  open read split  [] join ","File  read split  [] join ","File  open read split  [] ","File  read split  [] ","selected_File  open read split  join ","selected_File  read split  join ","(send\n  (lvar :line) :+\n  (int 1)) (int 0) max  ","File  open read split  length - ","File  read split  length - ","File  open read split  length ","File  read split  length ","(int 0) (send\n  (lvar :line) :+\n  (int 1)) min  "]}," RSpec Core Formatters SnippetExtractor snippet_for":{"type":"method","name":"snippet_for","children":[],"call":[" lines_around ","2 to_i ","error_line =~ ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match "," 2 to_i s_around "," Regexp  last_match [] to_i s_around ","error_2 to_i  =~ ","error_Regexp  last_match [] to_i  =~ "]}," RSpec Core Formatters SnippetExtractor snippet":{"type":"method","name":"snippet","children":[],"call":[" post_process ","highlighted << ","@@converter is_a? ","@@converter convert "," snippet_for ","error backtrace [] ","error backtrace ","backtrace [] ","@@converter convert  << "]}," RSpec Core Formatters SnippetExtractor NullConverter convert":{"type":"method","name":"convert","children":[],"call":[]}," RSpec Core Formatters ProgressFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[" output puts "," output "," output flush "]}," RSpec Core Formatters ProgressFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output print "," red "," output "," failure_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters ProgressFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" output print "," yellow "," output "," pending_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters ProgressFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" output print "," green "," output "," success_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters HtmlFormatter global_styles":{"type":"method","name":"global_styles","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter global_scripts":{"type":"method","name":"global_scripts","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter report_header":{"type":"method","name":"report_header","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter html_header":{"type":"method","name":"html_header","children":[],"call":[" global_styles "," global_scripts "]}," RSpec Core Formatters HtmlFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@output flush ","@output puts ","totals << ","pending_count > ","failure_count == ","example_count == "," dry_run? "," duration "," pending_count "," pending_count > "," failure_count == "," failure_count "," example_count == "," example_count "," sprintf ","@printer flush ","@printer print_summary ","summary pending_count ","summary failure_count ","summary example_count ","summary duration "]}," RSpec Core Formatters HtmlFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter percent_done":{"type":"method","name":"percent_done","children":[],"call":["(send\n  (send\n    (send\n      (begin\n        (send nil :example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i / ","(send\n  (send\n    (send\n      (begin\n        (send nil :example_number)) :to_f) :/\n    (send\n      (ivar :@example_count) :to_f)) :*\n  (int 1000)) to_i ","(send nil :example_number) to_f / * ","(send nil :example_number) to_f / ","@example_count to_f ","(send nil :example_number) to_f "," example_number ","@example_count > ","(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (begin\n              (send nil :example_number)) :to_f) :/\n          (send\n            (ivar :@example_count) :to_f)) :*\n        (int 1000))) :to_i) :/\n  (float 10.0)) to_f "]}," RSpec Core Formatters HtmlFormatter move_progress":{"type":"method","name":"move_progress","children":[],"call":["@output flush ","@output puts "," percent_done "]}," RSpec Core Formatters HtmlFormatter extra_failure_content":{"type":"method","name":"extra_failure_content","children":[],"call":["@snippet_extractor snippet ","SnippetExtractor  new "," require ","backtrace compact! "," backtrace_line ","exception backtrace map ","exception backtrace ","RSpec  configuration backtrace_formatter backtrace_line ","RSpec  configuration backtrace_formatter ","RSpec  configuration ","failure exception backtrace map ","failure exception backtrace ","failure exception ","RSpec Support  require_rspec_core "," configuration backtrace_formatter backtrace_line "," configuration backtrace_formatter "," configuration ","HtmlSnippetExtractor  new ","(or\n  (send\n    (send\n      (lvar :failure) :exception) :backtrace)\n  (array)) map "]}," RSpec Core Formatters HtmlFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@output flush ","@output puts "," h ","example description "," move_progress "," example_group_number ","example metadata [] [] ","example metadata [] ","example metadata ","@printer flush ","@printer print_example_pending ","@printer move_progress "," percent_done ","@printer make_example_group_header_yellow ","@printer make_header_yellow ","example execution_result pending_message ","example execution_result ","pending example ","pending example  description "," pending example _group_number ","pending example  metadata [] [] ","pending example  metadata [] ","pending example  metadata ","@printer print_pending example _pending ","@printer make_pending example _group_header_yellow ","example execution_result pending_example metadata [] []  ","pending example  execution_result pending_message ","pending example  execution_result ","pending pending example  "]}," RSpec Core Formatters HtmlFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@output flush ","@output puts ","extra == "," format_backtrace join "," format_backtrace ","exception backtrace "," h ","exception message ","exception nil? ","example description "," move_progress "," example_group_number ","RSpec Core PendingExampleFixedError  === "," extra_failure_content ","example metadata [] [] ","example metadata [] ","example metadata ","@failed_examples size "," sprintf ","example execution_result [] ","example execution_result ","exception pending_fixed? ","@printer flush ","@printer print_example_failed ","@printer move_progress "," percent_done ","@printer make_example_group_header_red ","@printer make_header_red ","example execution_result run_time ","example execution_result pending_fixed ","failure formatted_backtrace join ","failure formatted_backtrace ","failure exception ","failure example ","@failed_examples << ","failed example ","message_lines drop join ","message_lines drop ","failure fully_formatted_lines ","failure message_lines join ","failure message_lines "," extra_failure_content  == ","example metadata [] []  backtrace ","failure exception  backtrace ","example metadata [] []  message ","failure exception  message ","example metadata [] []  nil? ","failure exception  nil? ","failure example  description ","failed example  description "," failure example _group_number "," failed example _group_number ","  extra_failure_content _failure_content ","failure example  metadata [] [] ","failed example  metadata [] [] ","failure example  metadata [] ","failed example  metadata [] ","failure example  metadata ","failed example  metadata ","@failed_failure example s size ","@failed_failed example s size ","failure example  execution_result [] ","failed example  execution_result [] ","failure example  execution_result ","failed example  execution_result ","example metadata [] []  pending_fixed? ","failure exception  pending_fixed? ","@printer print_failure example _failed ","@printer print_failed example _failed ","@printer make_failure example _group_header_red ","@printer make_failed example _group_header_red ","failure example  execution_result run_time ","failed example  execution_result run_time ","failure example  execution_result pending_fixed ","failed example  execution_result pending_fixed ","failure example metadata [] []  ","failure failure exception  ","failure failure example  ","failure failed example  ","@failed_failure example s << ","@failed_failed example s << ","failed failure example  ","failed failed example  ","failure fully_formatted_lines  drop join ","failure fully_formatted_lines  drop ","failure failure fully_formatted_lines  join ","failure failure fully_formatted_lines  "]}," RSpec Core Formatters HtmlFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@output flush ","@output puts "," h ","example description "," move_progress "," sprintf ","example execution_result [] ","example execution_result ","@printer flush ","@printer print_example_passed ","@printer move_progress "," percent_done ","passed example execution_result run_time ","passed example execution_result ","passed example ","passed example description ","passed example execution_result [] "]}," RSpec Core Formatters HtmlFormatter example_started":{"type":"method","name":"example_started","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@output flush ","@output puts ","@printer flush ","@printer print_example_group_end "]}," RSpec Core Formatters HtmlFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["@output flush ","@output puts "," h ","example_group description "," example_group_number "," example_group_number == "," current_indentation ","@printer flush ","@printer print_example_group_start ","example_group parent_groups size ","example_group parent_groups ","@printer print_example_group_end ","notification group parent_groups size ","notification group parent_groups ","notification group ","notification group description "]}," RSpec Core Formatters HtmlFormatter start":{"type":"method","name":"start","children":[],"call":["@output flush ","@output puts "," report_header "," html_header ","@printer flush ","@printer print_html_start "]}," RSpec Core Formatters HtmlFormatter example_number":{"type":"method","name":"example_number","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter example_group_number":{"type":"method","name":"example_group_number","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["HtmlPrinter  new "]}," RSpec Core Formatters HtmlFormatter message":{"type":"method","name":"message","children":[],"call":[]}," RSpec Core Formatters HtmlFormatter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," RSpec Core Formatters Helpers strip_trailing_zeroes":{"type":"method","name":"strip_trailing_zeroes","children":[],"call":["stripped empty? ","string sub ","string sub  empty? "]}," RSpec Core Formatters Helpers format_seconds":{"type":"method","name":"format_seconds","children":[],"call":[" strip_trailing_zeroes "," sprintf ","float < "]}," RSpec Core Formatters DocumentationFormatter example_group_chain":{"type":"method","name":"example_group_chain","children":[],"call":[" example_group ancestors reverse "," example_group ancestors "," example_group "," example_group parent_groups reverse "," example_group parent_groups "]}," RSpec Core Formatters DocumentationFormatter current_indentation":{"type":"method","name":"current_indentation","children":[],"call":["   * ","@previous_nested_example_groups size ","@group_level + "]}," RSpec Core Formatters DocumentationFormatter pending_output":{"type":"method","name":"pending_output","children":[],"call":[" yellow ","example description "," current_indentation ","example description strip "," pending_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters DocumentationFormatter passed_output":{"type":"method","name":"passed_output","children":[],"call":[" green ","example description "," current_indentation ","example description strip "," success_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters DocumentationFormatter next_failure_index":{"type":"method","name":"next_failure_index","children":[],"call":[]}," RSpec Core Formatters DocumentationFormatter failure_output":{"type":"method","name":"failure_output","children":[],"call":[" red "," next_failure_index ","example description "," current_indentation ","example description strip "," failure_color ","ConsoleCodes  wrap "]}," RSpec Core Formatters DocumentationFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output puts "," failure_output ","example execution_result [] ","example execution_result "," output ","failure example execution_result exception ","failure example execution_result ","failure example ","failure example execution_result [] "," flush_messages "]}," RSpec Core Formatters DocumentationFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" output puts "," pending_output ","example execution_result [] ","example execution_result "," output ","pending example execution_result pending_message ","pending example execution_result ","pending example ","pending example execution_result [] "," flush_messages "]}," RSpec Core Formatters DocumentationFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" output puts "," passed_output "," output ","passed example "," flush_messages "]}," RSpec Core Formatters DocumentationFormatter example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":["@group_level > "]}," RSpec Core Formatters DocumentationFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":[" output puts ","example_group description ","   * "," output ","@group_level == "," example_group_chain ","nested_example_group description ","i == ","nested_example_group == ","@previous_nested_example_groups [] "," example_group_chain each_with_index ","example_group description strip "," current_indentation ","notification group description strip ","notification group description ","notification group "," example_group_chain  [] "]}," RSpec Core Formatters DocumentationFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters BaseTextFormatter format_caller":{"type":"method","name":"format_caller","children":[],"call":[" backtrace_line ","caller_info to_s split first ","caller_info to_s split ","caller_info to_s "," configuration backtrace_formatter backtrace_line "," configuration backtrace_formatter "," configuration "]}," RSpec Core Formatters BaseTextFormatter pluralize":{"type":"method","name":"pluralize","children":[],"call":["count == "]}," RSpec Core Formatters BaseTextFormatter grey":{"type":"method","name":"grey","children":[],"call":[" color "]}," RSpec Core Formatters BaseTextFormatter blue":{"type":"method","name":"blue","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter yellow":{"type":"method","name":"yellow","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter magenta":{"type":"method","name":"magenta","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter red":{"type":"method","name":"red","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter green":{"type":"method","name":"green","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter white":{"type":"method","name":"white","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter bold":{"type":"method","name":"bold","children":[],"call":[" color "," color_enabled? ","ConsoleCodes  wrap "]}," RSpec Core Formatters BaseTextFormatter color":{"type":"method","name":"color","children":[],"call":[" color_enabled? "," colorize ","ConsoleCodes  wrap "]}," RSpec Core Formatters BaseTextFormatter close":{"type":"method","name":"close","children":[],"call":[" output close "," output "," output != ","IO  === "," output == "," output closed? "," output flush "," output puts "]}," RSpec Core Formatters BaseTextFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[" output puts "," grey "," format_caller ","pending_example metadata [] ","pending_example metadata "," output ","pending_example metadata [] [] "," yellow ","pending_example full_description "," pending_examples each "," pending_examples "," pending_examples empty? "," output flush "," dump_backtrace "," dump_failure_info ","RSpec  configuration show_failures_in_pending_blocks? ","RSpec  configuration ","pending_example execution_result [] ","pending_example execution_result "," cyan ","pending_example location "," detail_color "," pending_color ","RSpec  configuration instance_variable_get ","notification fully_formatted_pending_examples ","notification pending_examples empty? ","notification pending_examples "]}," RSpec Core Formatters BaseTextFormatter summary_line":{"type":"method","name":"summary_line","children":[],"call":["summary << ","pending_count > ","summary << << "," pluralize "," pluralize  << "," pluralize  << << "]}," RSpec Core Formatters BaseTextFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[" output puts "," grey "," format_caller ","example metadata [] ","example metadata "," red "," format_seconds ","example execution_result [] ","example execution_result "," output ","example full_description ","sorted_examples each ","sorted_examples size ","(send\n  (send nil :examples) :sort_by) reverse first ","(send\n  (send nil :examples) :sort_by) reverse "," examples sort_by "," examples "," cyan ","example location ","%.1f % ","(if\n  (send\n    (lvar :time_taken) :nan?)\n  (float 0.0)\n  (lvar :time_taken)) * ","time_taken nan? ","slows / ","i + ","e execution_result [] ","e execution_result ","exs inject ","(send nil :examples) map "," detail_color "," failure_color ","RSpec  configuration profile_examples ","RSpec  configuration "," dump_profile_slowest_example_groups "," dump_profile_slowest_examples ","(send\n  (send nil :examples) :sort_by) reverse first  each ","(send\n  (send nil :examples) :sort_by) reverse first  size ","(if\n  (send\n    (lvar :slows / ) :nan?)\n  (float 0.0)\n  (lvar :slows / )) * ","slows /  nan? "]}," RSpec Core Formatters BaseTextFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" output puts "," colorise_summary "," summary_line "," output "," format_seconds "," dump_profile ","failure_count == "," profile_examples? "," output flush "," grey "," format_caller ","example metadata [] ","example metadata ","example execution_result [] ","example execution_result ","sorted_examples each ","sorted_examples size ","(send\n  (send nil :examples) :sort_by) reverse first ","(send\n  (send nil :examples) :sort_by) reverse "," examples sort_by "," examples "," red "," green "," yellow ","pending_count > ","summary << "," example_count == "," example_count "," duration "," pending_examples size "," pending_examples "," failed_examples size "," failed_examples "," failure_count == "," failure_count "," pending_count "," dump_commands_to_rerun_failed_examples "," format_duration "," mute_profile_output? ","summary fully_formatted ","summary duration ","summary failure_count "," colorise_ summary_line  ","  summary_line _line "," failed_examples size  == ","(send\n  (send nil :examples) :sort_by) reverse first  each ","(send\n  (send nil :examples) :sort_by) reverse first  size "," pending_examples size  > "," summary_line  << ","  failed_examples size  == ","  failed_examples size  ","  pending_examples size  "," summary_line  fully_formatted "," summary_line  duration ","summary  failed_examples size  "," summary_line  failure_count "]}," RSpec Core Formatters BaseTextFormatter colorise_summary":{"type":"method","name":"colorise_summary","children":[],"call":[" red "," green "," yellow "," pending_count > "," pending_count "," failure_count == "," failure_count "," failure_count > "," color ","RSpec  configuration success_color ","RSpec  configuration ","RSpec  configuration pending_color ","RSpec  configuration failure_color ","summary summary_line ","summary pending_count > ","summary pending_count ","summary failure_count > ","summary failure_count "]}," RSpec Core Formatters BaseTextFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[" output puts "," grey "," output "," format_backtrace each "," format_backtrace ","exception backtrace ","(begin\n  (lvar :padding)) + "," backtrace_line ","group metadata [] [] ","group metadata [] ","group metadata ","example example_group ancestors push each ","example example_group ancestors push ","example example_group ","example example_group ancestors "," red ","exception message split each ","exception message split ","exception message "," read_failed_line strip "," read_failed_line ","example full_description ","index next ","example metadata [] [] ","example metadata [] ","example metadata ","exception is_a? ","example execution_result [] ","example execution_result ","index > "," failed_examples each_with_index "," failed_examples "," failed_examples empty? "," output flush "," colorise ","failed_example metadata [] [] ","failed_example metadata [] ","failed_example metadata ","failed_example execution_result [] ","failed_example execution_result ","failed_example full_description "," dump_backtrace "," dump_failure "," dump_pending_fixed "," pending_fixed? "," dump_pending_example_fixed ","notification fully_formatted_failed_examples ","notification failure_notifications empty? ","notification failure_notifications ","example execution_result []  backtrace ","failed_example execution_result []  backtrace ","example execution_result []  message split each ","failed_example execution_result []  message split each ","example execution_result []  message split ","failed_example execution_result []  message split ","example execution_result []  message ","failed_example execution_result []  message ","example execution_result []  is_a? ","failed_example execution_result []  is_a? "]}," RSpec Core Formatters BaseTextFormatter message":{"type":"method","name":"message","children":[],"call":[" output puts "," output ","notification message "]}," RSpec Core Formatters BaseFormatter color_enabled?":{"type":"method","name":"color_enabled?","children":[],"call":[" configuration color_enabled? "," configuration "," output "]}," RSpec Core Formatters BaseFormatter profile_examples?":{"type":"method","name":"profile_examples?","children":[],"call":[" configuration profile_examples "," configuration "]}," RSpec Core Formatters BaseFormatter output_supports_sync":{"type":"method","name":"output_supports_sync","children":[],"call":[" output respond_to? "," output "]}," RSpec Core Formatters BaseFormatter restore_sync_output":{"type":"method","name":"restore_sync_output","children":[],"call":[" output sync= "," output "," output closed? ! "," output closed? "," output_supports_sync "]}," RSpec Core Formatters BaseFormatter start_sync_output":{"type":"method","name":"start_sync_output","children":[],"call":[" output sync "," output "," output sync= "," output_supports_sync "]}," RSpec Core Formatters BaseFormatter find_failed_line":{"type":"method","name":"find_failed_line","children":[],"call":["match [] downcase == ","path downcase ","match [] downcase ","match [] ","line match ","backtrace detect ","File  expand_path ","line match  [] downcase == ","File  expand_path  downcase ","line match  [] downcase ","line match  [] ","line line match  ","File  expand_File  expand_path  "]}," RSpec Core Formatters BaseFormatter read_failed_line":{"type":"method","name":"read_failed_line","children":[],"call":["f readlines [] ","line_number to_i - ","line_number to_i ","f readlines "," open ","File  exist? ","matching_line match [] ","matching_line match "," find_failed_line ","example file_path ","exception backtrace ","matching_line split ","matching_line nil? ","line split first downcase == ","original_file downcase ","line split first downcase ","line split first ","line split ","exception backtrace detect ","example file_path to_s downcase ","example file_path to_s ","line match [] downcase == ","line match [] downcase ","line match [] ","line match ","File  readlines [] ","File  readlines "," find_failed_line  match [] "," find_failed_line  match "," find_failed_line  split "," find_failed_line  nil? ","example file_path to_s downcase  downcase "]}," RSpec Core Formatters BaseFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["line == ","line sub ","File  expand_path "," configuration cleaned_from_backtrace? "," configuration ","line sub! ","RSpec Core Metadata  relative_path "," class relative_path "," class ","line sub  == ","line sub  sub ","line sub  sub! "]}," RSpec Core Formatters BaseFormatter configuration":{"type":"method","name":"configuration","children":[],"call":["RSpec  configuration "]}," RSpec Core Formatters BaseFormatter format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["cleansed empty? ","(send\n  (lvar :backtrace) :map) compact "," backtrace_line ","backtrace map ","example metadata [] == ","example metadata [] ","example metadata ","backtrace select ","backtrace [] ","backtrace index "," configuration backtrace_formatter format_backtrace "," configuration backtrace_formatter "," configuration ","(send\n  (lvar :backtrace) :map) compact  empty? ","(send\n  (lvar :backtrace [] ) :map) compact "," backtrace [] _line ","backtrace []  map ","backtrace []  select ","backtrace []  [] ","backtrace []  index "," configuration backtrace [] _formatter format_backtrace []  "," configuration backtrace [] _formatter "]}," RSpec Core Formatters BaseFormatter close":{"type":"method","name":"close","children":[],"call":[" restore_sync_output "]}," RSpec Core Formatters BaseFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," RSpec Core Formatters BaseFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," RSpec Core Formatters BaseFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[]}," RSpec Core Formatters BaseFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," RSpec Core Formatters BaseFormatter stop":{"type":"method","name":"stop","children":[],"call":["Time  now - ","Time  now "]}," RSpec Core Formatters BaseFormatter message":{"type":"method","name":"message","children":[],"call":[]}," RSpec Core Formatters BaseFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@failed_examples << "," examples << "," examples ","notification example "]}," RSpec Core Formatters BaseFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@pending_examples << "," examples << "," examples ","notification example "]}," RSpec Core Formatters BaseFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" examples << "," examples "]}," RSpec Core Formatters BaseFormatter example_started":{"type":"method","name":"example_started","children":[],"call":[" examples << "," examples ","notification example "]}," RSpec Core Formatters BaseFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" example_group_started ","RSpec  deprecate "]}," RSpec Core Formatters BaseFormatter example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":[]}," RSpec Core Formatters BaseFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["notification group "]}," RSpec Core Formatters BaseFormatter start":{"type":"method","name":"start","children":[],"call":[" start_sync_output ","Time  now ","notification count "]}," RSpec Core Formatters BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new "]}," RSpec Core ObjectExtensions describe":{"type":"method","name":"describe","children":[],"call":["RSpec Core ExampleGroup  describe ","args last update "," caller ","args last ","args << ","args last is_a? ","RSpec Core ExampleGroup  describe register "]}," RSpec Core Extensions ModuleEvalWithArgs module_eval_with_args":{"type":"method","name":"module_eval_with_args","children":[],"call":[" define_method "," method ","(send\n  (send nil :singleton_methods) :-\n  (lvar :orig_singleton_methods)) each "," singleton_methods - "," singleton_methods "," instance_eval_with_args "," module_eval ","args size zero? ","args size ","block arity < ","block arity "," module_exec "," respond_to? ","singleton_class send "," extract_static_instance_method_defs_from each "," extract_static_instance_method_defs_from ","(send\n  (send nil :singleton_methods) :-\n  (lvar : singleton_methods )) each "]}," Kernel debugger":{"type":"method","name":"debugger","children":[],"call":["RSpec  configuration error_stream puts "," caller [] "," caller ","RSpec  configuration error_stream ","RSpec  configuration ","$stderr puts ","(or\n  (send\n    (send\n      (const nil :RSpec) :configuration) :error_stream)\n  (gvar :$stderr)) puts "]}," RSpec Core Extensions InstanceEvalWithArgs instance_eval_with_args":{"type":"method","name":"instance_eval_with_args","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "," instance_eval ","args size zero? ","args size ","block arity < ","block arity "," instance_exec "]}," RSpec Core ExampleGroup instance_eval_with_rescue":{"type":"method","name":"instance_eval_with_rescue","children":[],"call":[" example set_exception "," example "," raise "," instance_eval ","RSpec  current_example set_exception ","RSpec  current_example "," instance_eval_with_args "]}," RSpec Core ExampleGroup described_class":{"type":"method","name":"described_class","children":[],"call":[" class described_class "," class "," class describes "]}," RSpec Core ExampleGroup clear_memoized":{"type":"method","name":"clear_memoized","children":[],"call":[]}," RSpec Core ExampleGroup clear_ivars":{"type":"method","name":"clear_ivars","children":[],"call":[]}," RSpec Core ExampleGroup set_ivars":{"type":"method","name":"set_ivars","children":[],"call":[]}," RSpec Core ExampleGroup top_level_description":{"type":"method","name":"top_level_description","children":[],"call":[]}," RSpec Core ExampleGroup declaration_line_numbers":{"type":"method","name":"declaration_line_numbers","children":[],"call":[]}," RSpec Core ExampleGroup all_apply?":{"type":"method","name":"all_apply?","children":[],"call":[]}," RSpec Core ExampleGroup run_examples":{"type":"method","name":"run_examples","children":[],"call":[]}," RSpec Core ExampleGroup fail_fast?":{"type":"method","name":"fail_fast?","children":[],"call":[]}," RSpec Core ExampleGroup fail_filtered_examples":{"type":"method","name":"fail_filtered_examples","children":[],"call":[]}," RSpec Core ExampleGroup run":{"type":"method","name":"run","children":[],"call":["RSpec Core NullReporter  new "]}," RSpec Core ExampleGroup around_hooks":{"type":"method","name":"around_hooks","children":[],"call":[]}," RSpec Core ExampleGroup eval_after_alls":{"type":"method","name":"eval_after_alls","children":[],"call":[]}," RSpec Core ExampleGroup eval_after_eachs":{"type":"method","name":"eval_after_eachs","children":[],"call":[]}," RSpec Core ExampleGroup eval_before_eachs":{"type":"method","name":"eval_before_eachs","children":[],"call":[]}," RSpec Core ExampleGroup eval_around_eachs":{"type":"method","name":"eval_around_eachs","children":[{"type":"method","name":"run","children":[],"asgn":[],"call":[]}],"call":[]}," RSpec Core ExampleGroup eval_before_alls":{"type":"method","name":"eval_before_alls","children":[],"call":[]}," RSpec Core ExampleGroup assign_before_all_ivars":{"type":"method","name":"assign_before_all_ivars","children":[],"call":[]}," RSpec Core ExampleGroup store_before_all_ivars":{"type":"method","name":"store_before_all_ivars","children":[],"call":[]}," RSpec Core ExampleGroup before_all_ivars":{"type":"method","name":"before_all_ivars","children":[],"call":[]}," RSpec Core ExampleGroup set_it_up":{"type":"method","name":"set_it_up","children":[],"call":[]}," RSpec Core ExampleGroup top_level?":{"type":"method","name":"top_level?","children":[],"call":[]}," RSpec Core ExampleGroup ancestors":{"type":"method","name":"ancestors","children":[],"call":[]}," RSpec Core ExampleGroup descendants":{"type":"method","name":"descendants","children":[],"call":[]}," RSpec Core ExampleGroup children":{"type":"method","name":"children","children":[],"call":[]}," RSpec Core ExampleGroup subclass":{"type":"method","name":"subclass","children":[],"call":[]}," RSpec Core ExampleGroup describe":{"type":"method","name":"describe","children":[],"call":[]}," RSpec Core ExampleGroup superclass_metadata":{"type":"method","name":"superclass_metadata","children":[],"call":[]}," RSpec Core ExampleGroup metadata":{"type":"method","name":"metadata","children":[],"call":[]}," RSpec Core ExampleGroup descendant_filtered_examples":{"type":"method","name":"descendant_filtered_examples","children":[],"call":[]}," RSpec Core ExampleGroup filtered_examples":{"type":"method","name":"filtered_examples","children":[],"call":[]}," RSpec Core ExampleGroup examples":{"type":"method","name":"examples","children":[],"call":[]}," RSpec Core ExampleGroup define_shared_group_method":{"type":"method","name":"define_shared_group_method","children":[],"call":[]}," RSpec Core ExampleGroup define_example_method":{"type":"method","name":"define_example_method","children":[],"call":[]}," RSpec Core ExampleGroup delegate_to_metadata":{"type":"method","name":"delegate_to_metadata","children":[],"call":[]}," RSpec Core ExampleGroup inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RSpec Core ExampleGroup world":{"type":"method","name":"world","children":[],"call":[]}," RSpec Core ExampleGroup running_example":{"type":"method","name":"running_example","children":[],"call":[" example ","RSpec  deprecate ","RSpec  current_example "," warn_deprecation_of_example_accessor "]}," RSpec Core Example record":{"type":"method","name":"record","children":[],"call":[" execution_result update "," execution_result "]}," RSpec Core Example assign_auto_description":{"type":"method","name":"assign_auto_description","children":[],"call":["RSpec Matchers  clear_generated_description "," metadata []= ","RSpec Matchers  generated_description "," metadata "," description empty? "," description "," pending? ! "," pending? "," metadata [] empty? "," metadata [] ","RSpec  configuration expecting_with_rspec? ","RSpec  configuration "," raise ","NotImplementedError  new ","Generated descriptions are only supported when you use rspec-expectations.   + "]}," RSpec Core Example run_after_each":{"type":"method","name":"run_after_each","children":[],"call":["@example_group_instance teardown_mocks_for_rspec ","@example_group_instance respond_to? ","@example_group_instance verify_mocks_for_rspec ","@example_group_class eval_after_eachs ","@example_group_instance _teardown_mocks ","@example_group_instance _verify_mocks ","@example_group_class run_after_each_hooks "," set_exception "," verify_mocks ","@example_group_class hooks run ","@example_group_class hooks "]}," RSpec Core Example run_before_each":{"type":"method","name":"run_before_each","children":[],"call":["@example_group_class eval_before_eachs ","@example_group_instance setup_mocks_for_rspec ","@example_group_instance respond_to? ","@example_group_instance _setup_mocks ","@example_group_class run_before_each_hooks ","@example_group_class hooks run ","@example_group_class hooks "]}," RSpec Core Example record_finished":{"type":"method","name":"record_finished","children":[],"call":[" record ","results merge ","finished_at - "," execution_result [] "," execution_result ","Time  now ","(send\n  (lvar :finished_at) :-\n  (send\n    (send nil :execution_result) :[]\n    (sym :started_at))) to_f ","RSpec Core Time  now "," execution_result record_finished "," clock now "," clock ","reporter example_finished "," reporter example_finished "," reporter ","Time  now  - ","RSpec Core Time  now  - "," clock now  - ","(send\n  (lvar :Time  now ) :-\n  (send\n    (send nil :execution_result) :[]\n    (sym :started_at))) to_f ","(send\n  (lvar :RSpec Core Time  now ) :-\n  (send\n    (send nil :execution_result) :[]\n    (sym :started_at))) to_f ","(send\n  (lvar : clock now ) :-\n  (send\n    (send nil :execution_result) :[]\n    (sym :started_at))) to_f "]}," RSpec Core Example finish":{"type":"method","name":"finish","children":[],"call":["reporter example_passed "," record_finished ","reporter example_pending "," pending ","reporter example_failed ","String  === ","@exception extend ","@exception respond_to? "," execution_result pending_message= "," execution_result "," execution_result exception= "," execution_result pending_message "," metadata [] [] "," metadata [] "," metadata ","reporter example_finished "," execution_result  execution_result pending_message = "," execution_result  metadata [] [] = "," execution_result  execution_result pending_message  "," execution_result  metadata [] []  "]}," RSpec Core Example start":{"type":"method","name":"start","children":[],"call":[" record ","Time  now ","reporter example_started "," record_results ","RSpec Core Time  now "," execution_result started_at= "," clock now "," clock "," execution_result "]}," RSpec Core Example with_around_hooks":{"type":"method","name":"with_around_hooks","children":[],"call":["@example_group_class eval_around_eachs call ","@example_group_class eval_around_eachs ","@example_group_instance instance_exec "," lambda "," call "," around_hooks_for reverse inject "," around_hooks_for reverse "," around_hooks_for ","Procsy  new "," metadata ","@example_group_class around_hooks empty? ","@example_group_class around_hooks "," around_hooks empty? "," around_hooks ","Example  procsy ","@example_group_class run_around_each_hooks call ","@example_group_class run_around_each_hooks "]}," RSpec Core Example with_pending_capture":{"type":"method","name":"with_pending_capture","children":[],"call":[" throw ","block call "," catch ","@example_group_instance instance_eval "]}," RSpec Core Example fail_fast":{"type":"method","name":"fail_fast","children":[],"call":[" finish "," set_exception "," start "]}," RSpec Core Example set_exception":{"type":"method","name":"set_exception","children":[],"call":["RSpec  configuration reporter message ","RSpec  configuration reporter ","RSpec  configuration ","exception backtrace first ","exception backtrace ","exception message ","exception class ","context != "," execution_result pending_exception= "," execution_result ","(send\n  (const\n    (const nil :Pending) :PendingExampleFixedError) :===\n  (lvar :exception)) ! ","Pending PendingExampleFixedError  === "," pending? "," metadata [] []= "," metadata [] "," metadata "," display_exception add "," display_exception "," display_exception= ","RSpec Core MultipleExceptionError  new ","RSpec Core MultipleExceptionError  === "]}," RSpec Core Example run":{"type":"method","name":"run","children":[],"call":[" finish "," assign_auto_description ","@example_group_instance example= "," set_exception "," run_after_each ","@example_group_instance instance_eval "," run_before_each "," with_around_hooks "," with_pending_capture "," pending "," start "," run_passed "," run_pending "," run_failed ","@example_group_instance running_example= "," throw ","@example_group_class around_eachs first call ","AroundProxy  new "," example_block ","@example_group_class around_eachs first ","@example_group_class around_eachs ","@example_group_class around_eachs empty? "," catch "," run_started ","@example_group_class hooks [] [] first call ","@example_group_class hooks [] [] first ","@example_group_class hooks [] [] ","@example_group_class hooks [] ","@example_group_class hooks ","@example_group_class hooks [] [] empty? "," around_hooks call "," around_hooks "," lambda ","(send nil :with_around_hooks) call ","RSpec  wants_to_quit ","@example_group_instance instance_variable_set ","@example_group_instance instance_variables each ","@example_group_instance instance_variables ","e message "," with_around_each_hooks "," assign_generated_description ","RSpec  current_example= ","@example_group_instance instance_eval_with_args "," run_after_example "," raise "," location ","Pending  mark_fixed! "," pending? ","@example_group_instance instance_exec "," run_before_example "," with_around_example_hooks ","RSpec  configuration dry_run? ! ","RSpec  configuration dry_run? ","RSpec  configuration ","Pending  mark_pending! "," skip "," skipped? "," metadata [] "," metadata "," execution_result ensure_timing_set "," clock "," execution_result "," with_around_and_singleton_context_hooks ","RSpec  configuration configure_example "," hooks ","RSpec  current_scope= ","ExampleGroup  each_instance_variable_for_example "," hooks register_global_singleton_context_hooks ","RSpec  configuration hooks "]}," RSpec Core Example pending?":{"type":"method","name":"pending?","children":[],"call":[" pending ! ! "," pending ! "," pending "]}," RSpec Core Example behaviour":{"type":"method","name":"behaviour","children":[],"call":[" example_group ","RSpec  deprecate "]}," RSpec Core Example example_group":{"type":"method","name":"example_group","children":[],"call":[]}," RSpec Core Example initialize":{"type":"method","name":"initialize","children":[],"call":["@example_group_class metadata for_example ","@example_group_class metadata ","Metadata ExampleHash  create ","@metadata []= ","config last_run_statuses [] "," id ","config last_run_statuses ","config apply_derived_metadata_to ","RSpec  configuration ","example_group_class method ","example_group_class examples << ","example_group_class examples ","RSpec  configuration last_run_statuses [] ","RSpec  configuration last_run_statuses ","@example_group_class metadata for_example  []= ","Metadata ExampleHash  create  []= ","RSpec  configuration  last_run_statuses [] ","RSpec  configuration  last_run_statuses ","RSpec  configuration  apply_derived_metadata_to ","RSpec  RSpec  configuration uration ","RSpec  RSpec  configuration uration last_run_statuses [] ","RSpec  RSpec  configuration uration last_run_statuses "]}," RSpec Core Example delegate_to_metadata":{"type":"method","name":"delegate_to_metadata","children":[],"call":[]}," RSpec Core DRbCommandLine run":{"type":"method","name":"run","children":[],"call":["err puts ","spec_server run ","@options drb_argv ","DRbObject  new_with_uri "," drb_port ","DRb  start_service ","DRbObject  new_with_uri  run "]}," RSpec Core DRbCommandLine drb_port":{"type":"method","name":"drb_port","children":[],"call":["ENV  [] ","@options options [] ","@options options "]}," RSpec Core DRbCommandLine initialize":{"type":"method","name":"initialize","children":[],"call":["RSpec Core ConfigurationOptions  new ","@options parse_options ","RSpec Core ConfigurationOptions  new  parse_options "]}," RSpec HashWithDeprecationNotice []=":{"type":"method","name":"[]=","children":[],"call":["RSpec  deprecate "]}," RSpec HashWithDeprecationNotice initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" send "," warn "]}," RSpec deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn_deprecation ","message << "," caller [] "," caller "," warn "]}," RSpec Core ConfigurationOptions local_options_file":{"type":"method","name":"local_options_file","children":[],"call":["RSpec  deprecate ","File  exist? ","options [] ","@options delete ","@options [] "]}," RSpec Core ConfigurationOptions options_file_as_erb_string":{"type":"method","name":"options_file_as_erb_string","children":[],"call":["ERB  new result "," binding ","ERB  new ","IO  read "," require ","File  read ","RUBY_VERSION  >= "]}," RSpec Core ConfigurationOptions args_from_options_file":{"type":"method","name":"args_from_options_file","children":[],"call":["(send\n  (send\n    (lvar :config_string) :split\n    (regexp\n      (str \"\\\\n+\")\n      (regopt))) :map) flatten ","l split ","config_string split map ","config_string split "," options_file_as_erb_string ","File  exist? ","(send\n  (send\n    (const nil :File) :readlines\n    (lvar :path)) :map) flatten ","File  readlines map ","File  readlines ","l shellsplit ","Shellwords  shellwords ","FlatMap  flat_map ","(send\n  (send\n    (lvar : options_file_as_erb_string ) :split\n    (regexp\n      (str \"\\\\n+\")\n      (regopt))) :map) flatten "," options_file_as_erb_string  split map "," options_file_as_erb_string  split "]}," RSpec Core ConfigurationOptions parse_options_file":{"type":"method","name":"parse_options_file","children":[],"call":["Parser  parse "," args_from_options_file "]}," RSpec Core ConfigurationOptions parse_global_options":{"type":"method","name":"parse_global_options","children":[],"call":[" parse_options_file "]}," RSpec Core ConfigurationOptions parse_local_options":{"type":"method","name":"parse_local_options","children":[],"call":[" parse_options_file "," local_options_file "]}," RSpec Core ConfigurationOptions parse_command_line_options":{"type":"method","name":"parse_command_line_options","children":[],"call":["options []= ","Parser  parse! ","@options []= ","Parser  parse!  []= ","@Parser  parse!  []= "]}," RSpec Core ConfigurationOptions parse_env_options":{"type":"method","name":"parse_env_options","children":[],"call":["Parser  parse! ","ENV  [] split ","ENV  [] "]}," RSpec Core ConfigurationOptions parse_options":{"type":"method","name":"parse_options","children":[],"call":["merged merge ","(lvar :global_options) inject "," parse_env_options "," parse_global_options "," parse_local_options "," parse_command_line_options "," extract_filters_from inject "," extract_filters_from "," all_configs ","oldval + ","MERGED_OPTIONS  include? ","options_to_merge inject ","options_to_merge << "," command_line_options "," env_options "," local_options "," global_options "," custom_options "," custom_options_file ","(send nil :file_options) inject "," file_options ","(sym :libs) include? ","h merge ","(send\n  (begin\n    (send\n      (send\n        (send nil :file_options) :<<\n        (send nil :command_line_options)) :<<\n      (send nil :env_options))) :each) inject "," filter_manager exclude ","opts delete "," filter_manager ","opts has_key? "," filter_manager include ","(send\n  (send\n    (send nil :file_options) :<<\n    (send nil :command_line_options)) :<<\n  (send nil :env_options)) each "," file_options << << "," file_options << ","(lvar : parse_global_options ) inject "," parse_ parse_env_options  "," parse_ parse_global_options  "," parse_ parse_local_options  "," parse_ parse_command_line_options  ","  parse_command_line_options  ","  parse_env_options  ","  parse_local_options  ","  parse_global_options  ","(send\n  (begin\n    (send\n      (send\n        (send nil :file_options) :<<\n        (send nil :command_line_options)) :<<\n      (send nil : parse_env_options ))) :each) inject ","(send\n  (begin\n    (send\n      (send\n        (send nil :file_options) :<<\n        (send nil : parse_command_line_options )) :<<\n      (send nil :env_options))) :each) inject ","(send\n  (send\n    (send nil :file_options) :<<\n    (send nil :command_line_options)) :<<\n  (send nil : parse_env_options )) each ","(send\n  (send\n    (send nil :file_options) :<<\n    (send nil : parse_command_line_options )) :<<\n  (send nil :env_options)) each "]}," RSpec Core ConfigurationOptions drb_argv":{"type":"method","name":"drb_argv","children":[],"call":["argv + "," options [] "," options ","argv << << ","argv << ","(or\n  (send\n    (send nil :options) :[]\n    (sym :requires))\n  (array)) each ","(or\n  (send\n    (send nil :options) :[]\n    (sym :libs))\n  (array)) each "," options [] source ","DrbOptions  new options ","DrbOptions  new "," filter_manager ","pair shift ","pair empty? "," options [] each ","pair [] ","k to_s "," options [] each_pair "," options [] source delete ","a << << ","a << "," options [] inject "]}," RSpec Core ConfigurationOptions configure":{"type":"method","name":"configure","children":[],"call":["config send "," options [] "," options ","keys each ","keys unshift ","keys delete "," options keys "," options each "," sorted_keys each "," sorted_keys ","config add_formatter ","formatters each ","config force "," force? "," order each "," order ","config filter_manager= "," filter_manager "," options delete "," load_formatters_into ","config setup_load_path_and_require "," process_options_into ","config libs= ","config respond_to? ","config exclusion_filter merge! ","config exclusion_filter "," configure_filter_manager ","config filter_manager "," options keys  each "," order  each "," options keys  unshift "," order  unshift "," options keys  delete "," order  delete "," options  options keys  "," options  order  "," sorted_ options keys  each "," sorted_ order  each "," sorted_ options keys  "," sorted_ order  "," options delete  each "," options []  each "," load_ options delete _into "," load_ options [] _into "]}," RSpec Core ConfigurationOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","args []= ","args index ","args include? ","@args []= ","@args index ","@args include? ","args dup "," organize_options ","a sub sub ","a sub ","args map ","args dup  []= ","args dup  index ","args dup  include? "]}," RSpec Core Configuration underscore":{"type":"method","name":"underscore","children":[],"call":["word downcase! ","word tr! ","word gsub! ","camel_cased_word to_s dup ","camel_cased_word to_s ","camel_cased_word to_s dup  downcase! ","camel_cased_word to_s dup  tr! ","camel_cased_word to_s dup  gsub! ","camel_cased_camel_cased_word to_s dup  to_s dup ","camel_cased_camel_cased_word to_s dup  to_s "]}," RSpec Core Configuration underscore_with_fix_for_non_standard_rspec_naming":{"type":"method","name":"underscore_with_fix_for_non_standard_rspec_naming","children":[],"call":[" underscore sub "," underscore "]}," RSpec Core Configuration path_for":{"type":"method","name":"path_for","children":[],"call":[" underscore_with_fix_for_non_standard_rspec_naming "]}," RSpec Core Configuration string_const?":{"type":"method","name":"string_const?","children":[],"call":["str is_a? "]}," RSpec Core Configuration custom_formatter":{"type":"method","name":"custom_formatter","children":[],"call":[" eval "," require "," path_for "," string_const? ","Class  === "," raise ","const const_get ","formatter_ref gsub split inject ","formatter_ref gsub split ","formatter_ref gsub "]}," RSpec Core Configuration built_in_formatter":{"type":"method","name":"built_in_formatter","children":[],"call":[" require ","key to_s ","RSpec  deprecate "]}," RSpec Core Configuration output_to_tty?":{"type":"method","name":"output_to_tty?","children":[],"call":[" settings [] tty? "," settings [] "," settings "," tty? "," output_stream tty? "," output_stream ","output tty? ","output respond_to? "]}," RSpec Core Configuration load_spec_files":{"type":"method","name":"load_spec_files","children":[],"call":[" load ","File  expand_path "," files_to_run map "," files_to_run "," raise_if_rspec_1_is_loaded "," files_to_run uniq map "," files_to_run uniq "," files_to_run uniq each "," loaded_spec_files << "," loaded_spec_files "," load_file_handling_errors "," world registered_example_group_files each "," world registered_example_group_files "," world ","RSpec  world registered_example_group_files each ","RSpec  world registered_example_group_files ","RSpec  world "," load_spec_file_handling_errors "," File  expand_path s_to_run map "," File  expand_path s_to_run "," File  expand_path s_to_run uniq map "," File  expand_path s_to_run uniq "," File  expand_path s_to_run uniq each "," loaded_spec_File  expand_path s << "," loaded_spec_File  expand_path s "," load_File  expand_path _handling_errors "," world registered_example_group_File  expand_path s each "," world registered_example_group_File  expand_path s ","RSpec  world registered_example_group_File  expand_path s each ","RSpec  world registered_example_group_File  expand_path s "," load_spec_File  expand_path _handling_errors "]}," RSpec Core Configuration configure_mock_framework":{"type":"method","name":"configure_mock_framework","children":[],"call":["RSpec Core ExampleGroup  send "," require_mock_framework_adapter "," mock_framework "," conditionally_disable_mocks_monkey_patching ","RSpec Core ExampleGroup  __send__ "]}," RSpec Core Configuration configure_group":{"type":"method","name":"configure_group","children":[],"call":["group send ","modules [] << ","modules [] ","modules [] include? ","group all_apply? "," include_or_extend_modules each "," include_or_extend_modules "," + ","group ancestors ","group included_modules ","group apply? "," send ","group any_apply? ","filters empty? "," class < "," class ","group ancestors dup ","group included_modules dup "," __send__ "," configure_group_with ","group hooks register_globals "," hooks ","group hooks "]}," RSpec Core Configuration extend":{"type":"method","name":"extend","children":[],"call":[" include_or_extend_modules << "," include_or_extend_modules ","@include_or_extend_modules << "," build_metadata_hash_from ","Metadata  build_hash_from "," safe_extend "," define_mixed_in_module ","@extend_modules append "," configure_existing_groups "," on_existing_matching_groups "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration include":{"type":"method","name":"include","children":[],"call":[" include_or_extend_modules << "," include_or_extend_modules ","@include_or_extend_modules << "," build_metadata_hash_from ","Metadata  build_hash_from "," safe_include "," define_mixed_in_module ","@include_modules append "," configure_existing_groups "," on_existing_matching_groups "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration filter_run_excluding":{"type":"method","name":"filter_run_excluding","children":[],"call":[" exclusion_filter= ","(or\n  (send nil :exclusion_filter)\n  (hash)) merge "," exclusion_filter "," filter_manager exclude_with_low_priority "," build_metadata_hash_from "," filter_manager "," filter_manager exclude ","Metadata  build_hash_from "," static_config_filter_manager exclude_with_low_priority ","Metadata  deep_hash_dup "," static_config_filter_manager "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration filter_run_including":{"type":"method","name":"filter_run_including","children":[],"call":[" filter= "," warn "," filter inspect "," filter ","options inspect "," filter [] ","(or\n  (send nil :filter)\n  (hash)) merge "," filter_manager include_with_low_priority "," build_metadata_hash_from "," filter_manager "," inclusion_filter= ","(or\n  (send nil :inclusion_filter)\n  (hash)) merge "," inclusion_filter "," inclusion_filter inspect "," inclusion_filter [] ","args pop ","args last is_a? ","args last "," filter_manager include "," __filter_run "," __method__ ","Metadata  build_hash_from "," static_config_filter_manager include_with_low_priority ","Metadata  deep_hash_dup "," static_config_filter_manager "," build_metadata_hash_from  inspect "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration alias_it_should_behave_like_to":{"type":"method","name":"alias_it_should_behave_like_to","children":[],"call":["RSpec Core ExampleGroup  alias_it_should_behave_like_to "]}," RSpec Core Configuration alias_example_to":{"type":"method","name":"alias_example_to","children":[],"call":["RSpec Core ExampleGroup  alias_example_to "," build_metadata_hash_from ","RSpec Core ExampleGroup  define_example_method ","Metadata  build_hash_from "]}," RSpec Core Configuration files_or_directories_to_run=":{"type":"method","name":"files_or_directories_to_run=","children":[],"call":[" files_to_run= ","(send\n  (send\n    (lvar :files) :flatten) :collect) flatten ","file sub "," line_number= ","file =~ ","Dir  [] ","pattern strip "," filename_pattern split collect "," filename_pattern split "," filename_pattern ","File  directory? ","files flatten collect ","files flatten ","result << ","file split "," filename_pattern split each ","files flatten inject ","@options []= "," get_files_to_run ","files << "," default_path ","files empty? "," command == "," command ","Runner  running_in_drb? "," pattern split collect "," pattern split "," pattern "," files flatten _to_run= ","(send\n  (send\n    (lvar :files flatten ) :flatten) :collect) flatten ","files flatten  flatten collect ","files flatten  flatten ","files flatten  flatten inject "," get_files flatten _to_run ","files flatten  << ","files flatten  empty? "]}," RSpec Core Configuration reporter":{"type":"method","name":"reporter","children":[],"call":["Reporter  new "," formatter "," formatters "," add_formatter "," formatters empty? "," output_stream "," deprecation_stream "," formatter_loader reporter "," formatter_loader "," formatter_loader setup_default ","@reporter_buffer play_onto ","DeprecationReporterBuffer  new "," formatter_loader prepare_default "," output_wrapper ","DeprecationReporterBuffer  new  play_onto "]}," RSpec Core Configuration formatter":{"type":"method","name":"formatter","children":[],"call":[" formatter_class new "," output "," formatter_class "]}," RSpec Core Configuration formatter=":{"type":"method","name":"formatter=","children":[],"call":[" formatter_class= "," raise "," custom_formatter "," built_in_formatter ","formatter_to_use to_s ","formatter_to_use is_a? ","Object  const_get ","Object  const_defined? "," string_const? ","(lvasgn :class_name\n  (send nil :eval\n    (lvar :formatter_to_use))) is_a? "," eval ","@options []= "," Object  const_get = ","(lvasgn : eval \n  (send nil :eval\n    (lvar :formatter_to_use))) is_a? "]}," RSpec Core Configuration formatter_class":{"type":"method","name":"formatter_class","children":[],"call":[" require ","@options [] "]}," RSpec Core Configuration full_description=":{"type":"method","name":"full_description=","children":[],"call":[" filter_run ","Regexp  union ","Regexp  new "," Array map "," Array "]}," RSpec Core Configuration line_number=":{"type":"method","name":"line_number=","children":[],"call":[" filter_run ","line_number to_i "]}," RSpec Core Configuration debug=":{"type":"method","name":"debug=","children":[],"call":[" raise ","* * "," require ","e backtrace join ","e backtrace ","e message ","Debugger  start ","RSpec  warn_deprecation ","RSpec  deprecate ","bool == "]}," RSpec Core Configuration requires=":{"type":"method","name":"requires=","children":[],"call":[" require ","paths map ","RSpec  deprecate ","paths each ","RSpec Core RubyProject  add_to_load_path ","File  directory? ","(str \"lib\") select "," default_path "," load_file_handling_errors "]}," RSpec Core Configuration libs=":{"type":"method","name":"libs=","children":[],"call":["$LOAD_PATH unshift ","libs map ","@libs unshift "]}," RSpec Core Configuration color_enabled=":{"type":"method","name":"color_enabled=","children":[],"call":[" warn "," settings []= "," settings "," require "," settings [] == "," settings [] "," RbConfig CONFIG  [] =~ "," RbConfig CONFIG  [] ","Config CONFIG  [] =~ ","Config CONFIG  [] "," Config CONFIG  [] =~ "," Config CONFIG  [] ","@options []= ","ENV  [] "," color= ","RSpec  deprecate "]}," RSpec Core Configuration color_enabled?":{"type":"method","name":"color_enabled?","children":[],"call":[" color_enabled ! ! "," color_enabled ! "," color_enabled ","@options [] "," value_for "," output_to_tty? "," color "," tty? "," color_mode "]}," RSpec Core Configuration color_enabled":{"type":"method","name":"color_enabled","children":[],"call":[" autotest? "," output_to_tty? "," color_enabled? ","RSpec  deprecate ","`RSpec::Core::Configuration#color` if you want the configuration  + + ","`RSpec::Core::Configuration#color` if you want the configuration  + "]}," RSpec Core Configuration full_backtrace=":{"type":"method","name":"full_backtrace=","children":[],"call":[" settings []= "," settings "," backtrace_clean_patterns clear "," backtrace_clean_patterns ","@options [] clear ","@options [] ","@backtrace_cleaner full_backtrace= ","@backtrace_formatter full_backtrace= "]}," RSpec Core Configuration require_mock_framework_adapter":{"type":"method","name":"require_mock_framework_adapter","children":[],"call":[" require "," mock_framework to_s "," mock_framework ","@options [] to_s ","@options [] "]}," RSpec Core Configuration mock_with":{"type":"method","name":"mock_with","children":[],"call":[" settings []= "," settings "," mock_framework= "," assert_no_example_groups_defined ","new_name == ","mod framework_name ","mod respond_to? ","(lvar :framework_module) map "," require ","framework to_s ","framework_module configuration "," raise ","framework_module respond_to? "," block_given? "," deprecate_unless_mock_adapter_name_is_exact ","RSpec Core MockingAdapters  const_get ","RSpec Support  require_rspec_core ","const_name to_s downcase ","const_name to_s ","(str \"Unknown mocking framework: \") + ","MOCKING_ADAPTERS  keys inspect ","MOCKING_ADAPTERS  keys ","framework inspect ","MOCKING_ADAPTERS  fetch ","framework is_a? "]}," RSpec Core Configuration cleaned_from_backtrace?":{"type":"method","name":"cleaned_from_backtrace?","children":[],"call":["line =~ "," backtrace_clean_patterns any? "," backtrace_clean_patterns ","@options [] any? ","@options [] "]}," RSpec Core Configuration clear_inclusion_filter":{"type":"method","name":"clear_inclusion_filter","children":[],"call":[" filter= "," inclusion_filter= "]}," RSpec Core Configuration settings":{"type":"method","name":"settings","children":[],"call":[]}," RSpec Core Configuration puts":{"type":"method","name":"puts","children":[],"call":[" output_stream puts "," output_stream "," output puts "," output "]}," RSpec Core Configuration add_setting":{"type":"method","name":"add_setting","children":[],"call":[" class add_setting "," class "," send "," add_setting ","(sclass\n  (self)\n  (self)) class_eval ","opts delete "," __send__ ","(sclass\n  (self)\n  (self)) class_exec "]}," RSpec Core Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" backtrace_clean_patterns= "," files_to_run= "," include_or_extend_modules= "," default_options "," filter_run_excluding "," lambda ","value ! ","metadata has_key? "," srand % "," srand ","FilterManager  new ","DEFAULT_BACKTRACE_PATTERNS  dup ","BacktraceCleaner  new "," exclusion_filter= ","CONDITIONAL_FILTERS  dup ","Ordering ConfigurationManager  new ","BacktraceFormatter  new "," RSpec Core Time  now "," define_built_in_hooks ","FilterableItemRepository QueryOptimized  new ","Set  new ","RSpec Support RubyFeatures  fork_supported? "]}," RSpec Core CommandLineConfiguration Autotest discover_file_path":{"type":"method","name":"discover_file_path","children":[],"call":["File  join "]}," RSpec Core CommandLineConfiguration Autotest discover_file_exists?":{"type":"method","name":"discover_file_exists?","children":[],"call":["File  exist? "," discover_file_path "]}," RSpec Core CommandLineConfiguration Autotest optionally_remove_discover_file":{"type":"method","name":"optionally_remove_discover_file","children":[],"call":["FileUtils  rm_rf "," discover_file_path "," exit "," gets !~ "," gets "," print "]}," RSpec Core CommandLineConfiguration Autotest create_discover_file":{"type":"method","name":"create_discover_file","children":[],"call":["file << ","File  open "," discover_file_path "," optionally_remove_discover_file "," discover_file_exists? "]}," RSpec Core CommandLineConfiguration Autotest create_autotest_directory":{"type":"method","name":"create_autotest_directory","children":[],"call":["Dir  mkdir ","File  exist? "]}," RSpec Core CommandLineConfiguration Autotest generate":{"type":"method","name":"generate","children":[],"call":[" puts "," create_discover_file "," create_autotest_directory "," remove_autotest_dir_if_present "," create_dot_rspec_file "]}," RSpec Core CommandLineConfiguration run":{"type":"method","name":"run","children":[],"call":[" raise ","* * ","Autotest  generate "]}," RSpec Core CommandLineConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core CommandLine run":{"type":"method","name":"run","children":[],"call":["@configuration run_hook ","(send\n  (send\n    (ivar :@world) :example_groups) :map) all? ","g run ","@world example_groups map ","@world example_groups ","@configuration reporter report ","@world example_count ","@configuration reporter ","@world announce_exclusion_filter ","@world announce_inclusion_filter ","@configuration configure_mock_framework ","@configuration load_spec_files ","@options configure ","@configuration output_stream ","@configuration error_stream= "," example_groups success? "," example_groups "," example_groups run_examples "," configuration reporter report "," example_count "," configuration reporter "," configuration "," world announce_inclusion_filter "," world "," configuration output_stream= "," configuration error_stream= "," configuration run_hook ","@configuration require_files_to_run ","@configuration output_stream= ","@configuration configure_expectation_framework ","@configuration failure_exit_code ","(send\n  (send\n    (send\n      (ivar :@world) :example_groups) :ordered) :map) all? ","@world example_groups ordered map ","@world example_groups ordered ","@configuration seed ","@configuration randomize? ","@world announce_filters ","@configuration send ","@configuration output_stream == ","(send\n  (send\n    (ivar :@world) :ordered_example_groups) :map) all? ","@world ordered_example_groups map ","@world ordered_example_groups ","@configuration hooks run ","@configuration hooks "]}," RSpec Core CommandLine initialize":{"type":"method","name":"initialize","children":[],"call":["options parse_options ","ConfigurationOptions  new ","Array  === "," configuration configure_mock_framework "," configuration "," configuration require_files_to_run ","@options configure ","RSpec Core ConfigurationOptions  new ","@options parse_options ","RSpec Core ConfigurationOptions  === ","RSpec  deprecate ","ConfigurationOptions  new  parse_ConfigurationOptions  new  ","@ConfigurationOptions  new  configure ","RSpec Core ConfigurationOptions  new  configure ","@ConfigurationOptions  new  parse_ConfigurationOptions  new  ","RSpec Core ConfigurationOptions  new  parse_options "]}," RSpec Core ConstMissing const_missing":{"type":"method","name":"const_missing","children":[],"call":["RSpec  warn_deprecation "," caller [] "," caller ","RSpec  warn "," raise ","l =~ ","Regexp  compile ","e backtrace reject! ","e backtrace ","RSpec  deprecate ","name to_s "]}," Rspec2 using_bundler?":{"type":"method","name":"using_bundler?","children":[],"call":["File  exists? "," prefix =~ "," prefix "," autotest_wants_bundler? "," rspec_wants_bundler? "]}," Rspec2 normalize":{"type":"method","name":"normalize","children":[],"call":["result []= ","File  expand_path ","files_to_test keys inject ","files_to_test keys ","result merge! "]}," Rspec2 require_rubygems":{"type":"method","name":"require_rubygems","children":[],"call":[" using_bundler? "]}," Rspec2 bundle_exec":{"type":"method","name":"bundle_exec","children":[],"call":[" using_bundler? "]}," Rspec2 make_test_cmd":{"type":"method","name":"make_test_cmd","children":[],"call":["(send\n  (send\n    (send\n      (send nil :normalize\n        (lvar :files_to_test)) :keys) :flatten) :map) join "," normalize keys flatten map "," normalize keys flatten "," normalize keys "," normalize "," require_rubygems "," ruby "," bundle_exec ","files_to_test empty? "," normalize keys flatten join "," add_options_if_present "," suffix "," prefix "," cl_args join "," cl_args "," warn_about_bundler "," autotest_wants_bundler? ! "," autotest_wants_bundler? "," rspec_wants_bundler? "]}," Rspec2 consolidate_failures":{"type":"method","name":"consolidate_failures","children":[],"call":["filters [] << ","filters [] ","trace =~ ","failed each "," new_hash_of_arrays "," new_hash_of_arrays  [] << "," new_hash_of_arrays  [] "]}," Rspec2 setup_rspec_project_mappings":{"type":"method","name":"setup_rspec_project_mappings","children":[],"call":[" files_matching "," add_mapping ","m [] "]}," Rspec2 initialize":{"type":"method","name":"initialize","children":[],"call":[" completed_re= "," failed_results_re= "," setup_rspec_project_mappings "," clear_mappings ","@cl_args delete ","ARGV  dup << ","ARGV  dup ","ARGV  dup <<  delete "]}," Rspec Core world":{"type":"method","name":"world","children":[],"call":[]}," Rspec Core configure":{"type":"method","name":"configure","children":[],"call":[]}," Rspec Core configuration":{"type":"method","name":"configuration","children":[],"call":[]}," Rspec Core install_directory":{"type":"method","name":"install_directory","children":[],"call":[]}," Rspec Core World apply_condition":{"type":"method","name":"apply_condition","children":[],"call":["metadata [] == ","metadata [] ","filter call ","metadata [] =~ "," apply_condition ","filter all? ","metadata nil? "]}," Rspec Core World apply_exclusion_filters":{"type":"method","name":"apply_exclusion_filters","children":[],"call":[" find ","examples reject "," all_apply? "]}," Rspec Core World apply_inclusion_filters":{"type":"method","name":"apply_inclusion_filters","children":[],"call":[" find ","examples select "," all_apply? "]}," Rspec Core World find":{"type":"method","name":"find","children":[],"call":["result ! "," apply_condition ","item metadata ","conditions all? ","collection select ","type_of_filter != ","item metadata apply_condition "]}," Rspec Core World filter_behaviours":{"type":"method","name":"filter_behaviours","children":[],"call":["(send\n  (send nil :behaviours) :inject\n  (array)) compact ","list_of_behaviors << ","examples empty? ","_behavior examples_to_run replace ","_behavior examples_to_run ","examples uniq! "," apply_inclusion_filters "," filter "," apply_exclusion_filters "," exclusion_filter ","_behavior examples "," behaviours inject "," behaviours "," apply_inclusion_filters  empty? "," apply_exclusion_filters  empty? ","_behavior examples  empty? ","_behavior  apply_inclusion_filters _to_run replace ","_behavior  apply_exclusion_filters _to_run replace ","_behavior _behavior examples _to_run replace ","_behavior  apply_inclusion_filters _to_run ","_behavior  apply_exclusion_filters _to_run ","_behavior _behavior examples _to_run "," apply_inclusion_filters  uniq! "," apply_exclusion_filters  uniq! ","_behavior examples  uniq! ","_behavior  apply_inclusion_filters  ","_behavior  apply_exclusion_filters  ","_behavior _behavior examples  "]}," Rspec Core World total_examples_to_run":{"type":"method","name":"total_examples_to_run","children":[],"call":["b examples_to_run size ","b examples_to_run "," behaviours_to_run inject "," behaviours_to_run "," example_groups_to_run inject "," example_groups_to_run ","g examples_to_run size ","g examples_to_run "]}," Rspec Core World behaviours_to_run":{"type":"method","name":"behaviours_to_run","children":[],"call":["b examples_to_run replace ","b examples ","b examples_to_run ","@behaviours each ","Rspec Core  configuration puts "," filter inspect "," filter ","Rspec Core  configuration ","Rspec Core  configuration run_all_when_everything_filtered? ","@behaviours_to_run size == ","@behaviours_to_run size "," filter_behaviours "," exclusion_filter "," filter_behaviours  size == "," filter_behaviours  size "]}," Rspec Core World shared_behaviours":{"type":"method","name":"shared_behaviours","children":[],"call":[]}," Rspec Core World exclusion_filter":{"type":"method","name":"exclusion_filter","children":[],"call":["Rspec Core  configuration exclusion_filter ","Rspec Core  configuration ","Rspec  configuration exclusion_filter ","Rspec  configuration "]}," Rspec Core World filter":{"type":"method","name":"filter","children":[],"call":["Rspec Core  configuration filter ","Rspec Core  configuration ","Rspec  configuration filter ","Rspec  configuration "]}," Rspec Core World initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core SharedBehaviourKernelExtensions share_as":{"type":"method","name":"share_as","children":[{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["Rspec Core  world shared_behaviours []= ","Rspec Core  world shared_behaviours ","Rspec Core  world ","Object  const_set ","kls module_eval ","Module  new "," raise "," puts ","name inspect ","Object  const_defined? "]}," Rspec Core SharedBehaviourKernelExtensions share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["Rspec Core  world shared_behaviours []= ","Rspec Core  world shared_behaviours ","Rspec Core  world "]}," Rspec Core SharedBehaviour ensure_shared_example_group_name_not_taken":{"type":"method","name":"ensure_shared_example_group_name_not_taken","children":[],"call":[" raise ","ArgumentError  new ","Rspec Core  world shared_behaviours has_key? ","Rspec Core  world shared_behaviours ","Rspec Core  world "]}," Rspec Core SharedBehaviour share_as":{"type":"method","name":"share_as","children":[{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["Rspec Core  world shared_behaviours []= ","Rspec Core  world shared_behaviours ","Rspec Core  world ","Object  const_set ","kls module_eval ","Module  new "," raise ","Object  const_defined? "]}," Rspec Core SharedBehaviour share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["Rspec Core  world shared_behaviours []= ","Rspec Core  world shared_behaviours ","Rspec Core  world "," ensure_shared_example_group_name_not_taken "]}," Rspec Core Runner run":{"type":"method","name":"run","children":[],"call":[" formatter output sync= "," formatter output "," formatter "," formatter close "," formatter dump_pending "," formatter dump_summary "," formatter dump_failures "," formatter start_dump ","Time  now - ","Time  now ","behaviour run ","Rspec Core  world behaviours_to_run each ","Rspec Core  world behaviours_to_run ","Rspec Core  world "," formatter start "," formatter output sync "," formatter output respond_to? ","Rspec Core  world total_examples_to_run ","cli_config apply "," configuration "," require_all_files ","cli_config files_to_run ","Rspec Core CommandLineOptions  parse "," reporter output sync= "," reporter output "," reporter "," reporter close "," reporter dump_pending "," reporter dump_summary "," reporter dump_failures "," reporter start_dump ","example_group run ","Rspec Core  world example_groups_to_run each ","Rspec Core  world example_groups_to_run "," reporter start "," reporter output sync "," reporter output respond_to? ","Rspec Core CommandLineOptions  parse apply "," configuration configure_mock_framework "," example_groups success? "," example_groups "," example_groups run_all "," reporter report "," example_count "," configure "," formatter Time  now _dump "," formatter Time  now  ","Rspec Core  world Rspec Core  world total_examples_to_run  ","Rspec Core CommandLineOptions  parse  apply ","Rspec Core CommandLineOptions  parse  files_to_run "," reporter Time  now _dump "," reporter Time  now  "]}," Rspec Core Runner require_all_files":{"type":"method","name":"require_all_files","children":[],"call":[" require ","files each ","configuration files_to_run map ","configuration files_to_run ","f sub "]}," Rspec Core Runner formatter":{"type":"method","name":"formatter","children":[],"call":[" configuration formatter "," configuration "]}," Rspec Core Runner configuration":{"type":"method","name":"configuration","children":[],"call":["Rspec Core  configuration ","Rspec  configuration "]}," Rspec Core Runner autorun":{"type":"method","name":"autorun","children":[],"call":[]}," Rspec Core Runner installed_at_exit?":{"type":"method","name":"installed_at_exit?","children":[],"call":[]}," Rspec Core RakeTask files_to_run":{"type":"method","name":"files_to_run","children":[],"call":["FileList  [] to_a ","FileList  [] "," pattern "]}," Rspec Core RakeTask define":{"type":"method","name":"define","children":[],"call":[" raise "," fail_on_error ","STDERR  puts "," failure_message "," system "," puts "," verbose ","cmd_parts join "," files_to_run collect "," files_to_run ","cmd_parts << "," warning "," ruby_opts "," rcov_opts "," rcov "," pattern "," files_to_run empty? ","RakeFileUtils  send "," task "," name "," desc "," Rake  application last_comment "," Rake  application "," name keys first "," name keys ","Hash  === ","cmd_parts join _parts join ","cmd_parts join _parts << "]}," Rspec Core RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," block_given? ","args shift "]}," Rspec Core Mocking WithRspec _teardown_mocks":{"type":"method","name":"_teardown_mocks","children":[],"call":["$rspec_mocks reset_all "]}," Rspec Core Mocking WithRspec _verify_mocks":{"type":"method","name":"_verify_mocks","children":[],"call":["$rspec_mocks verify_all "]}," Rspec Core Mocking WithRspec _setup_mocks":{"type":"method","name":"_setup_mocks","children":[],"call":["Rspec Mocks Space  new "]}," Rspec Core Mocking WithRR _teardown_mocks":{"type":"method","name":"_teardown_mocks","children":[],"call":["RR Space  instance reset ","RR Space  instance "]}," Rspec Core Mocking WithRR _verify_mocks":{"type":"method","name":"_verify_mocks","children":[],"call":["RR Space  instance verify_doubles ","RR Space  instance "]}," Rspec Core Mocking WithRR _setup_mocks":{"type":"method","name":"_setup_mocks","children":[],"call":["RR Space  instance reset ","RR Space  instance "]}," Rspec Core Mocking WithFlexmock teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" flexmock_close "]}," Rspec Core Mocking WithFlexmock verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" flexmock_verify "]}," Rspec Core Mocking WithFlexmock setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[]}," Rspec Core Mocking WithAbsolutelyNothing _teardown_mocks":{"type":"method","name":"_teardown_mocks","children":[],"call":[]}," Rspec Core Mocking WithAbsolutelyNothing _verify_mocks":{"type":"method","name":"_verify_mocks","children":[],"call":[]}," Rspec Core Mocking WithAbsolutelyNothing _setup_mocks":{"type":"method","name":"_setup_mocks","children":[],"call":[]}," Rspec Core KernelExtensions describe":{"type":"method","name":"describe","children":[],"call":["Rspec Core ExampleGroup  describe ","args last update "," caller ","args last ","args << ","args last is_a? "]}," Rspec Core Formatters ProgressFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[" output flush "," output "," output puts "]}," Rspec Core Formatters ProgressFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" output print "," output_for "," output "]}," Rspec Core Formatters ProgressFormatter output_for":{"type":"method","name":"output_for","children":[],"call":[" red ","example execution_result [] ","example execution_result "," green "," yellow "," colorise "]}," Rspec Core Formatters DocumentationFormatter described_behaviour_chain":{"type":"method","name":"described_behaviour_chain","children":[],"call":[" behaviour ancestors "," behaviour "]}," Rspec Core Formatters DocumentationFormatter current_indentation":{"type":"method","name":"current_indentation","children":[],"call":["   * "," previous_nested_behaviours size "," previous_nested_behaviours ","@previous_nested_example_groups size "]}," Rspec Core Formatters DocumentationFormatter pending_output":{"type":"method","name":"pending_output","children":[],"call":[" yellow ","example description "," current_indentation "]}," Rspec Core Formatters DocumentationFormatter passed_output":{"type":"method","name":"passed_output","children":[],"call":[" green ","example description "," current_indentation "]}," Rspec Core Formatters DocumentationFormatter failure_output":{"type":"method","name":"failure_output","children":[],"call":[" magenta "," red ","example description "," current_indentation ","exception is_a? "]}," Rspec Core Formatters DocumentationFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" output flush "," output "," output puts "," output_for "]}," Rspec Core Formatters DocumentationFormatter output_for":{"type":"method","name":"output_for","children":[],"call":[" red ","example execution_result [] ","example execution_result "," passed_output "," pending_output "," failure_output "]}," Rspec Core Formatters DocumentationFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":[" described_behaviour_chain "," output puts ","   * "," output ","nested_behaviour description ","nested_behaviour name ","i == ","nested_behaviour == "," previous_nested_behaviours [] "," previous_nested_behaviours "," described_behaviour_chain each_with_index "]}," Rspec Core Formatters DocumentationFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core Formatters BaseTextFormatter grey":{"type":"method","name":"grey","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter blue":{"type":"method","name":"blue","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter yellow":{"type":"method","name":"yellow","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter magenta":{"type":"method","name":"magenta","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter red":{"type":"method","name":"red","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter green":{"type":"method","name":"green","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter white":{"type":"method","name":"white","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter bold":{"type":"method","name":"bold","children":[],"call":[" color "]}," Rspec Core Formatters BaseTextFormatter color":{"type":"method","name":"color","children":[],"call":[" color_enabled? "]}," Rspec Core Formatters BaseTextFormatter close":{"type":"method","name":"close","children":[],"call":[" output close "," output "," output != ","IO  === "]}," Rspec Core Formatters BaseTextFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[" output flush "," output "," output puts "," grey "," format_caller ","pending_example metadata [] ","pending_example metadata "," pending_examples each "," pending_examples "," pending_examples empty? ","pending_example metadata [] [] "]}," Rspec Core Formatters BaseTextFormatter format_caller":{"type":"method","name":"format_caller","children":[],"call":["caller_info to_s split first ","caller_info to_s split ","caller_info to_s "]}," Rspec Core Formatters BaseTextFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" output flush "," output "," output puts "," grey "," format_caller ","example metadata [] ","example metadata "," sprintf ","example execution_result [] ","example execution_result ","sorted_examples each ","sorted_examples size ","(send\n  (send nil :examples) :sort_by) reverse first ","(send\n  (send nil :examples) :sort_by) reverse "," examples sort_by "," examples ","failure_count == "," profile_examples? "," red "," green "," yellow ","pending_count > ","summary << "," example_count == "," example_count "," duration "," pending_examples size "," pending_examples "," failed_examples size "," failed_examples "," format_seconds ","(send\n  (send nil :examples) :sort_by) reverse first  each ","(send\n  (send nil :examples) :sort_by) reverse first  size "," failed_examples size  == "," pending_examples size  > "]}," Rspec Core Formatters BaseTextFormatter colorise":{"type":"method","name":"colorise","children":[],"call":[" red "]}," Rspec Core Formatters BaseTextFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[" output flush "," output "," output puts "," grey "," format_backtrace each "," format_backtrace ","exception backtrace "," colorise strip "," colorise ","exception message split each ","exception message split ","exception message "," read_failed_line strip "," read_failed_line ","index next ","failed_example execution_result [] ","failed_example execution_result "," failed_examples each_with_index "," failed_examples ","failed_example metadata [] [] ","failed_example metadata [] ","failed_example metadata ","exception is_a? ","failed_example execution_result []  backtrace ","failed_example execution_result []  message split each ","failed_example execution_result []  message split ","failed_example execution_result []  message ","failed_example execution_result []  is_a? "]}," Rspec Core Formatters BaseFormatter read_failed_line":{"type":"method","name":"read_failed_line","children":[],"call":["f readlines [] ","line_number to_i - ","line_number to_i ","f readlines "," open ","File  exist? ","matching_line split ","matching_line nil? ","line split first downcase == ","original_file downcase ","line split first downcase ","line split first ","line split ","exception backtrace detect ","exception backtrace ","example file_path to_s downcase ","example file_path to_s ","example file_path ","example file_path to_s downcase  downcase "]}," Rspec Core Formatters BaseFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["line == ","line sub! "," configuration cleaned_from_backtrace? "," configuration ","File  expand_path "]}," Rspec Core Formatters BaseFormatter format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["cleansed empty? "," backtrace_line ","backtrace select ","example metadata [] == ","example metadata [] ","example metadata "]}," Rspec Core Formatters BaseFormatter close":{"type":"method","name":"close","children":[],"call":[]}," Rspec Core Formatters BaseFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," Rspec Core Formatters BaseFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[]}," Rspec Core Formatters BaseFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[]}," Rspec Core Formatters BaseFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," Rspec Core Formatters BaseFormatter add_behaviour":{"type":"method","name":"add_behaviour","children":[],"call":[]}," Rspec Core Formatters BaseFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" examples << "," examples "]}," Rspec Core Formatters BaseFormatter start":{"type":"method","name":"start","children":[],"call":["Time  now "]}," Rspec Core Formatters BaseFormatter failed_examples":{"type":"method","name":"failed_examples","children":[],"call":[" Rspec Core  world find "," examples "," Rspec Core  world "]}," Rspec Core Formatters BaseFormatter pending_examples":{"type":"method","name":"pending_examples","children":[],"call":[" Rspec Core  world find "," examples "," Rspec Core  world "]}," Rspec Core Formatters BaseFormatter color_enabled?":{"type":"method","name":"color_enabled?","children":[],"call":[" configuration color_enabled? "," configuration "]}," Rspec Core Formatters BaseFormatter profile_examples?":{"type":"method","name":"profile_examples?","children":[],"call":["Rspec Core  configuration profile_examples ","Rspec Core  configuration ","Rspec  configuration profile_examples ","Rspec  configuration "," configuration profile_examples "," configuration "]}," Rspec Core Formatters BaseFormatter output":{"type":"method","name":"output","children":[],"call":["Rspec Core  configuration output ","Rspec Core  configuration ","Rspec  configuration output ","Rspec  configuration "," configuration output "," configuration "]}," Rspec Core Formatters BaseFormatter configuration":{"type":"method","name":"configuration","children":[],"call":["Rspec Core  configuration ","Rspec  configuration "]}," Rspec Core Formatters BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core ExampleGroupSubject ClassMethods implicit_subject":{"type":"method","name":"implicit_subject","children":[],"call":[" described_class "," lambda "," described_class new "," described_class is_a? "," described "," described new ","Class  === ","described new "," description "," describes "]}," Rspec Core ExampleGroupSubject ClassMethods explicit_subject":{"type":"method","name":"explicit_subject","children":[],"call":["group superclass ","group explicit_subject_block ","group respond_to? ","group superclass  superclass ","group superclass  explicit_subject_block ","group superclass  respond_to? "]}," Rspec Core ExampleGroupSubject ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[" implicit_subject "," explicit_subject ","block nil? "]}," Rspec Core ExampleGroupSubject should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "," __should_not_for_example_group__ "," == "]}," Rspec Core ExampleGroupSubject should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "," __should_for_example_group__ "," == "]}," Rspec Core ExampleGroupSubject subject":{"type":"method","name":"subject","children":[],"call":[" class subject call "," class subject "," class "," instance_eval "]}," Rspec Core ExampleGroupSubject included":{"type":"method","name":"included","children":[],"call":[]}," Rspec Core ExampleGroup to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Rspec Core ExampleGroup subclass":{"type":"method","name":"subclass","children":[],"call":[]}," Rspec Core ExampleGroup run_examples":{"type":"method","name":"run_examples","children":[],"call":[]}," Rspec Core ExampleGroup run":{"type":"method","name":"run","children":[],"call":[]}," Rspec Core ExampleGroup eval_after_eachs":{"type":"method","name":"eval_after_eachs","children":[],"call":[]}," Rspec Core ExampleGroup eval_after_alls":{"type":"method","name":"eval_after_alls","children":[],"call":[]}," Rspec Core ExampleGroup eval_before_eachs":{"type":"method","name":"eval_before_eachs","children":[],"call":[]}," Rspec Core ExampleGroup eval_before_alls":{"type":"method","name":"eval_before_alls","children":[],"call":[]}," Rspec Core ExampleGroup before_all_ivars":{"type":"method","name":"before_all_ivars","children":[],"call":[]}," Rspec Core ExampleGroup after_ancestors":{"type":"method","name":"after_ancestors","children":[],"call":[]}," Rspec Core ExampleGroup before_ancestors":{"type":"method","name":"before_ancestors","children":[],"call":[]}," Rspec Core ExampleGroup ancestors":{"type":"method","name":"ancestors","children":[],"call":[]}," Rspec Core ExampleGroup describe":{"type":"method","name":"describe","children":[],"call":[]}," Rspec Core ExampleGroup file_path":{"type":"method","name":"file_path","children":[],"call":[]}," Rspec Core ExampleGroup description":{"type":"method","name":"description","children":[],"call":[]}," Rspec Core ExampleGroup described_class":{"type":"method","name":"described_class","children":[],"call":[" running_example metadata [] [] "," running_example metadata [] "," running_example metadata "," running_example "," class describes "," class "]}," Rspec Core ExampleGroup describes":{"type":"method","name":"describes","children":[],"call":[]}," Rspec Core ExampleGroup name":{"type":"method","name":"name","children":[],"call":[]}," Rspec Core ExampleGroup metadata":{"type":"method","name":"metadata","children":[],"call":[]}," Rspec Core ExampleGroup set_it_up":{"type":"method","name":"set_it_up","children":[],"call":[]}," Rspec Core ExampleGroup generate_name":{"type":"method","name":"generate_name","children":[],"call":[]}," Rspec Core ExampleGroup examples_to_run":{"type":"method","name":"examples_to_run","children":[],"call":[]}," Rspec Core ExampleGroup examples":{"type":"method","name":"examples","children":[],"call":[]}," Rspec Core ExampleGroup it_should_behave_like":{"type":"method","name":"it_should_behave_like","children":[],"call":[]}," Rspec Core ExampleGroup alias_example_to":{"type":"method","name":"alias_example_to","children":[],"call":[]}," Rspec Core ExampleGroup example":{"type":"method","name":"example","children":[],"call":[]}," Rspec Core ExampleGroup after":{"type":"method","name":"after","children":[],"call":[]}," Rspec Core ExampleGroup after_alls":{"type":"method","name":"after_alls","children":[],"call":[]}," Rspec Core ExampleGroup after_eachs":{"type":"method","name":"after_eachs","children":[],"call":[]}," Rspec Core ExampleGroup afters":{"type":"method","name":"afters","children":[],"call":[]}," Rspec Core ExampleGroup before":{"type":"method","name":"before","children":[],"call":[]}," Rspec Core ExampleGroup before_alls":{"type":"method","name":"before_alls","children":[],"call":[]}," Rspec Core ExampleGroup before_eachs":{"type":"method","name":"before_eachs","children":[],"call":[]}," Rspec Core ExampleGroup befores":{"type":"method","name":"befores","children":[],"call":[]}," Rspec Core ExampleGroup extended_modules":{"type":"method","name":"extended_modules","children":[],"call":[]}," Rspec Core ExampleGroup inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Rspec Core Example to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect "]}," Rspec Core Example inspect":{"type":"method","name":"inspect","children":[],"call":["@metadata [] ","@metadata [] [] "]}," Rspec Core Example run":{"type":"method","name":"run","children":[],"call":[" run_pending "," run_passed "," example_block "," run_failed ","@behaviour_instance running_example= "," run_after_each ","@behaviour_instance instance_eval "," run_before_each "," run_started "," runnable? ","@example_group_instance running_example= "," assign_auto_description ","@example_group_class around_eachs first call ","AroundProxy  new ","@example_group_class around_eachs first ","@example_group_class around_eachs ","@example_group_instance instance_eval ","@example_group_class around_eachs empty? ","@behaviour around_eachs first call ","@behaviour around_eachs first ","@behaviour around_eachs ","@behaviour around_eachs empty? ","@example_group around_eachs first call ","@example_group around_eachs first ","@example_group around_eachs ","@example_group around_eachs empty? "," pending "," throw "," catch "]}," Rspec Core Example run_after_each":{"type":"method","name":"run_after_each","children":[],"call":["@behaviour_instance _teardown_mocks ","@behaviour_instance respond_to? ","@behaviour_instance _verify_mocks ","@behaviour eval_after_eachs ","@example_group_instance _teardown_mocks ","@example_group_instance respond_to? ","@example_group_instance _verify_mocks ","@example_group_class eval_after_eachs ","@example_group eval_after_eachs "]}," Rspec Core Example run_before_each":{"type":"method","name":"run_before_each","children":[],"call":["@behaviour eval_before_eachs ","@behaviour_instance _setup_mocks ","@behaviour_instance respond_to? ","@example_group_class eval_before_eachs ","@example_group_instance _setup_mocks ","@example_group_instance respond_to? ","@example_group eval_before_eachs "]}," Rspec Core Example run_finished":{"type":"method","name":"run_finished","children":[],"call":["Rspec Core  configuration formatter example_finished ","Rspec Core  configuration formatter ","Rspec Core  configuration "," record_results ","finish_time - "," execution_result [] "," execution_result ","Time  now ","results update ","reporter example_finished ","Time  now  - "]}," Rspec Core Example run_failed":{"type":"method","name":"run_failed","children":[],"call":[" run_finished "]}," Rspec Core Example run_pending":{"type":"method","name":"run_pending","children":[],"call":[" run_finished "]}," Rspec Core Example run_passed":{"type":"method","name":"run_passed","children":[],"call":[" run_finished "]}," Rspec Core Example run_started":{"type":"method","name":"run_started","children":[],"call":[" record_results ","Time  now "]}," Rspec Core Example file_path":{"type":"method","name":"file_path","children":[],"call":[" behaviour file_path "," behaviour ","@metadata [] "," example_group file_path "," example_group "]}," Rspec Core Example execution_result":{"type":"method","name":"execution_result","children":[],"call":["@metadata [] "]}," Rspec Core Example record_results":{"type":"method","name":"record_results","children":[],"call":["@metadata [] update ","@metadata [] "," execution_result update "," execution_result "]}," Rspec Core Example initialize":{"type":"method","name":"initialize","children":[],"call":["@metadata update ","@metadata []= ","@metadata [] split [] to_i ","@metadata [] split [] ","@metadata [] split ","@metadata [] ","@metadata [] split [] strip ","options delete "," description ","@behaviour metadata dup ","@behaviour metadata ","@example_group_class metadata for_example ","@example_group_class metadata ","desc to_s ","@example_group metadata for_example ","@example_group metadata ","@behaviour metadata dup  update ","@example_group_class metadata for_example  update ","@example_group metadata for_example  update ","@behaviour metadata dup  []= ","@example_group_class metadata for_example  []= ","@example_group metadata for_example  []= ","@behaviour metadata dup  [] split [] to_i ","@example_group_class metadata for_example  [] split [] to_i ","@example_group metadata for_example  [] split [] to_i ","@behaviour metadata dup  [] split [] ","@example_group_class metadata for_example  [] split [] ","@example_group metadata for_example  [] split [] ","@behaviour metadata dup  [] split ","@example_group_class metadata for_example  [] split ","@example_group metadata for_example  [] split ","@behaviour metadata dup  [] ","@example_group_class metadata for_example  [] ","@example_group metadata for_example  [] ","@behaviour metadata dup  [] split [] strip ","@example_group_class metadata for_example  [] split [] strip ","@example_group metadata for_example  [] split [] strip "]}," Rspec Core HashWithDeprecationNotice []=":{"type":"method","name":"[]=","children":[],"call":["Rspec  deprecate "]}," Rspec Core HashWithDeprecationNotice initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core warn":{"type":"method","name":"warn","children":[],"call":["Kernel  warn "]}," Rspec Core deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "," caller [] "," caller "]}," Rspec Core Configuration find_before_or_after":{"type":"method","name":"find_before_or_after","children":[],"call":["(send\n  (send\n    (send\n      (send nil :before_and_afters) :[]\n      (lvar :desired_before_or_after)) :[]\n    (lvar :desired_each_or_all)) :select) map ","Rspec Core  world apply_condition ","group metadata ","Rspec Core  world ","options all? "," before_and_afters [] [] select "," before_and_afters [] [] "," before_and_afters [] "," before_and_afters "]}," Rspec Core Configuration after":{"type":"method","name":"after","children":[],"call":[" before_and_afters [] [] << "," before_and_afters [] [] "," before_and_afters [] "," before_and_afters "," advice [] [] << "," advice [] [] "," advice [] "," advice ","@hooks [] [] << ","@hooks [] [] ","@hooks [] "]}," Rspec Core Configuration before":{"type":"method","name":"before","children":[],"call":[" before_and_afters [] [] << "," before_and_afters [] [] "," before_and_afters [] "," before_and_afters "," advice [] [] << "," advice [] [] "," advice [] "," advice ","@hooks [] [] << ","@hooks [] [] ","@hooks [] "]}," Rspec Core Configuration find_modules":{"type":"method","name":"find_modules","children":[],"call":["Rspec Core  world apply_condition ","group metadata ","Rspec Core  world ","options all? "," include_or_extend_modules select "," include_or_extend_modules ","group all_apply? ","Rspec Core  world all_apply? ","@include_or_extend_modules select "]}," Rspec Core Configuration extend":{"type":"method","name":"extend","children":[],"call":[" include_or_extend_modules << "," include_or_extend_modules ","@include_or_extend_modules << "]}," Rspec Core Configuration include":{"type":"method","name":"include","children":[],"call":[" include_or_extend_modules << "," include_or_extend_modules ","@include_or_extend_modules << "]}," Rspec Core Configuration parse_command_line_args":{"type":"method","name":"parse_command_line_args","children":[],"call":["Rspec Core CommandLineOptions  parse "]}," Rspec Core Configuration puts":{"type":"method","name":"puts","children":[],"call":[" output puts "," output "]}," Rspec Core Configuration output":{"type":"method","name":"output","children":[],"call":[]}," Rspec Core Configuration run_all_when_everything_filtered?":{"type":"method","name":"run_all_when_everything_filtered?","children":[],"call":[]}," Rspec Core Configuration filter_run":{"type":"method","name":"filter_run","children":[],"call":["@filter [] "]}," Rspec Core Configuration autorun!":{"type":"method","name":"autorun!","children":[],"call":["Rspec Core Runner  autorun "]}," Rspec Core Configuration alias_example_to":{"type":"method","name":"alias_example_to","children":[],"call":["Rspec Core ExampleGroup  alias_example_to "]}," Rspec Core Configuration files_to_run=":{"type":"method","name":"files_to_run=","children":[],"call":[" options []= "," options "," raise ","result << ","File  file? ","Dir  [] ","File  expand_path ","pattern strip "," filename_pattern split each "," filename_pattern split "," filename_pattern ","File  directory? ","files each ","files flatten! "]}," Rspec Core Configuration files_to_run":{"type":"method","name":"files_to_run","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration formatter":{"type":"method","name":"formatter","children":[],"call":[" formatter_class new "," formatter_class "]}," Rspec Core Configuration formatter=":{"type":"method","name":"formatter=","children":[],"call":[" options []= "," options "," raise ","formatter_to_use to_s ","@options []= "]}," Rspec Core Configuration formatter_class":{"type":"method","name":"formatter_class","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration profile_examples=":{"type":"method","name":"profile_examples=","children":[],"call":[" options []= "," on_or_off "," options ","@options []= "]}," Rspec Core Configuration profile_examples":{"type":"method","name":"profile_examples","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration color_enabled?":{"type":"method","name":"color_enabled?","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration color_enabled=":{"type":"method","name":"color_enabled=","children":[],"call":[" options []= "," options ","@options []= "]}," Rspec Core Configuration filename_pattern=":{"type":"method","name":"filename_pattern=","children":[],"call":[" options []= "," options ","@options []= "]}," Rspec Core Configuration filename_pattern":{"type":"method","name":"filename_pattern","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration mock_framework":{"type":"method","name":"mock_framework","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core Configuration mock_framework=":{"type":"method","name":"mock_framework=","children":[],"call":["Rspec Core ExampleGroup  send "," options []= "," options "," require ","use_me_to_mock to_s ","@options []= "]}," Rspec Core Configuration cleaned_from_backtrace?":{"type":"method","name":"cleaned_from_backtrace?","children":[],"call":["line =~ "," options [] any? "," options [] "," options ","@options [] any? ","@options [] "]}," Rspec Core Configuration default_options":{"type":"method","name":"default_options","children":[],"call":[]}," Rspec Core Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" default_options "]}," Rspec Core CommandLineOptions apply":{"type":"method","name":"apply","children":[],"call":["config send "," options each "," options "," options replace "," parse_spec_file_contents merge! "," parse_spec_file_contents "," options delete "]}," Rspec Core CommandLineOptions parse":{"type":"method","name":"parse","children":[],"call":[" options "," options []= ","(send\n  (const nil :OptionParser) :new) parse! "," puts ","opts on_tail ","opts on ","opts banner= ","OptionParser  new "," exit "]}," Rspec Core CommandLineOptions files_to_run":{"type":"method","name":"files_to_run","children":[],"call":[" options [] "," options "]}," Rspec Core CommandLineOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core Configuration mock_with":{"type":"method","name":"mock_with","children":[],"call":[" mock_framework= "]}," Rspec configure":{"type":"method","name":"configure","children":[],"call":[]}," Rspec Core World filter_example_groups":{"type":"method","name":"filter_example_groups","children":[],"call":["(send\n  (send nil :example_groups) :inject\n  (array)) compact ","list_of_example_groups << ","examples empty? ","example_group examples_to_run replace ","example_group examples_to_run ","examples uniq! "," apply_inclusion_filters "," filter "," apply_exclusion_filters "," exclusion_filter ","example_group examples "," example_groups inject "," example_groups "," apply_inclusion_filters  empty? "," apply_exclusion_filters  empty? ","example_group examples  empty? ","example_group  apply_inclusion_filters _to_run replace ","example_group  apply_exclusion_filters _to_run replace ","example_group example_group examples _to_run replace ","example_group  apply_inclusion_filters _to_run ","example_group  apply_exclusion_filters _to_run ","example_group example_group examples _to_run "," apply_inclusion_filters  uniq! "," apply_exclusion_filters  uniq! ","example_group examples  uniq! ","example_group  apply_inclusion_filters  ","example_group  apply_exclusion_filters  ","example_group example_group examples  "]}," Rspec Core World example_groups_to_run":{"type":"method","name":"example_groups_to_run","children":[],"call":["b examples_to_run replace ","b examples ","b examples_to_run ","@example_groups each ","Rspec Core  configuration puts "," filter inspect "," filter ","Rspec Core  configuration ","Rspec Core  configuration run_all_when_everything_filtered? ","@example_groups_to_run size == ","@example_groups_to_run size "," filter_example_groups "," exclusion_filter ","Rspec  configuration puts ","Rspec  configuration ","Rspec  configuration run_all_when_everything_filtered? "," all_example_groups "," filtered_example_groups "," inclusion_filter inspect "," inclusion_filter "," filtered_example_groups empty? "," filter_example_groups  size == "," filter_example_groups  size "]}," Rspec Core World shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":[]}," Rspec Core SharedExampleGroupKernelExtensions share_as":{"type":"method","name":"share_as","children":[{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["Rspec Core  world shared_example_groups []= ","Rspec Core  world shared_example_groups ","Rspec Core  world ","Object  const_set ","kls module_eval ","Module  new "," raise "," puts ","name inspect ","Object  const_defined? "]}," Rspec Core SharedExampleGroupKernelExtensions share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["Rspec Core  world shared_example_groups []= ","Rspec Core  world shared_example_groups ","Rspec Core  world "]}," Rspec Core SharedExampleGroup ensure_shared_example_group_name_not_taken":{"type":"method","name":"ensure_shared_example_group_name_not_taken","children":[],"call":[" raise ","ArgumentError  new ","Rspec Core  world shared_example_groups has_key? ","Rspec Core  world shared_example_groups ","Rspec Core  world "]}," Rspec Core SharedExampleGroup share_as":{"type":"method","name":"share_as","children":[{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["Rspec Core  world shared_example_groups []= ","Rspec Core  world shared_example_groups ","Rspec Core  world ","Object  const_set ","kls module_eval ","Module  new "," raise ","Object  const_defined? "]}," Rspec Core SharedExampleGroup share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":["Rspec Core  world shared_example_groups []= ","Rspec Core  world shared_example_groups ","Rspec Core  world "," ensure_shared_example_group_name_not_taken "]}," Rspec Core Runner reporter":{"type":"method","name":"reporter","children":[],"call":[" configuration formatter "," configuration "]}," Rspec Core RubyProject ascend_until":{"type":"method","name":"ascend_until","children":[],"call":["block call "," Pathname ascend "," Pathname ","File  expand_path "]}," Rspec Core RubyProject find_first_parent_containing":{"type":"method","name":"find_first_parent_containing","children":[],"call":["File  exists? ","File  join "," ascend_until "]}," Rspec Core RubyProject determine_root":{"type":"method","name":"determine_root","children":[],"call":[" find_first_parent_containing ","File  exists? ","File  join "," Pathname ascend "," Pathname ","File  expand_path "]}," Rspec Core RubyProject root":{"type":"method","name":"root","children":[],"call":[" determine_root "," require "]}," Rspec Core RubyProject add_dir_to_load_path":{"type":"method","name":"add_dir_to_load_path","children":[],"call":["$LOAD_PATH unshift ","$LOAD_PATH include? "]}," Rspec Core RubyProject add_to_load_path":{"type":"method","name":"add_to_load_path","children":[],"call":[" add_dir_to_load_path ","File  join "," root ","dirs map ","$LOAD_PATH unshift ","$LOAD_PATH include? "," add_File  join _to_load_path ","File  join s map "]}," Rspec Core Metadata determine_name":{"type":"method","name":"determine_name","children":[],"call":[" [] []= ","(begin\n  (send\n    (send\n      (self) :[]\n      (sym :example_group)) :[]\n    (sym :describes))) strip "," [] [] "," [] ","(begin\n  (send\n    (send\n      (send nil :superclass_metadata) :[]\n      (sym :example_group)) :[]\n    (sym :name))) strip "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata ","(begin\n  (send\n    (send\n      (self) :[]\n      (sym :behaviour)) :[]\n    (sym :describes))) strip ","(begin\n  (send\n    (send\n      (send nil :superclass_metadata) :[]\n      (sym :behaviour)) :[]\n    (sym :name))) strip "]}," Rspec Core Metadata candidate_entries_from_caller":{"type":"method","name":"candidate_entries_from_caller","children":[],"call":["metadata [] grep ","metadata [] "]}," Rspec Core Metadata file_and_line_number":{"type":"method","name":"file_and_line_number","children":[],"call":[" candidate_entries_from_caller first split "," candidate_entries_from_caller first "," candidate_entries_from_caller ","entry split "," candidate_entries_from_caller first  split "]}," Rspec Core Metadata location_from":{"type":"method","name":"location_from","children":[],"call":["metadata [] "]}," Rspec Core Metadata line_number_from":{"type":"method","name":"line_number_from","children":[],"call":[" file_and_line_number [] to_i "," file_and_line_number [] "," file_and_line_number ","line_number to_i "," file_and_ file_and_line_number []  [] to_i "," file_and_ file_and_line_number []  [] "," file_and_ file_and_line_number []  "," file_and_line_number []  to_i "]}," Rspec Core Metadata file_path_from":{"type":"method","name":"file_path_from","children":[],"call":[" file_and_line_number [] strip "," file_and_line_number [] "," file_and_line_number ","file strip ","  file_and_line_number [] _and_line_number [] strip ","  file_and_line_number [] _and_line_number [] ","  file_and_line_number [] _and_line_number "," file_and_line_number []  strip "]}," Rspec Core Metadata all_apply?":{"type":"method","name":"all_apply?","children":[],"call":[" apply_condition ","filters all? "]}," Rspec Core Metadata apply_condition":{"type":"method","name":"apply_condition","children":[],"call":["metadata [] == ","metadata [] ","(send\n  (lvar :metadata) :[]\n  (sym :line_number)) include? ","metadata [] [] ","filter_on == ","filter call ","metadata [] =~ "," apply_condition ","filter all? "," world preceding_example_or_group_line "," world "]}," Rspec Core Metadata configure_for_example":{"type":"method","name":"configure_for_example","children":[],"call":[" update "," []= "," location_from "," store "," line_number_from "," file_path_from "," [] ","options delete "," [] [] ","description to_s "," determine_line_number "," determine_file_path ","desc to_s "]}," Rspec Core Metadata for_example":{"type":"method","name":"for_example","children":[],"call":[" dup configure_for_example "," dup "]}," Rspec Core Metadata process":{"type":"method","name":"process","children":[],"call":[" update "," [] []= "," location_from "," [] "," line_number_from ","extra_metadata delete "," file_path_from "," determine_name ","args shift "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata "," [] [] ","args first is_a? ","args first ","args pop ","args last is_a? ","args last "," determine_line_number "," determine_file_path ","user_metadata delete "," caller "," full_description_from "," description_from "," described_class_from "," ensure_valid_keys ","args pop  delete "]}," Rspec Core Metadata initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," store "," [] "," update "]}," Rspec Core KernelExtensions debugger":{"type":"method","name":"debugger","children":[],"call":["$stderr puts "]}," Rspec Core Formatters DocumentationFormatter described_example_group_chain":{"type":"method","name":"described_example_group_chain","children":[],"call":[" example_group ancestors "," example_group "]}," Rspec Core Formatters DocumentationFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" described_example_group_chain "," output puts ","   * "," output ","nested_example_group description ","nested_example_group name ","i == ","nested_example_group == ","@previous_nested_example_groups [] "," described_example_group_chain each_with_index ","nested_example_group display_name "," example_group_chain "," example_group_chain each_with_index "," described_example_group_chain  [] "," example_group_chain  [] "]}," Rspec Core Formatters BaseFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[]}," Rspec Core ExampleGroup __reset__":{"type":"method","name":"__reset__","children":[],"call":[" assignments clear "," assignments "," remove_instance_variable "," instance_variables each "," instance_variables "," __memoized clear "," __memoized "]}," Rspec Core ExampleGroup assignments":{"type":"method","name":"assignments","children":[],"call":[]}," Rspec Core ExampleGroup all_apply?":{"type":"method","name":"all_apply?","children":[],"call":[]}," Rspec Core ExampleGroup let":{"type":"method","name":"let","children":[],"call":[]}," Rspec Core ExampleGroup _build":{"type":"method","name":"_build","children":[],"call":[]}," Rspec Core ExampleGroup create":{"type":"method","name":"create","children":[],"call":[]}," Rspec Core ExampleGroup configuration":{"type":"method","name":"configuration","children":[],"call":[]}," Rspec Core ExampleGroup superclass_metadata":{"type":"method","name":"superclass_metadata","children":[],"call":[]}," Rspec Core Example runnable?":{"type":"method","name":"runnable?","children":[],"call":[" metadata [] ! "," metadata [] "," metadata ","(send\n  (send nil :example_block) :nil?) any? ! ","(send\n  (send nil :example_block) :nil?) any? "," metadata [] == "," example_block nil? "," example_block "]}," Rspec Core Example assign_auto_description":{"type":"method","name":"assign_auto_description","children":[],"call":["Rspec Matchers  clear_generated_description "," metadata []= ","Rspec Matchers  generated_description "," metadata "," description empty? "," description "]}," Rspec Core Example description":{"type":"method","name":"description","children":[],"call":["@metadata [] "]}," Rspec Core Example example_group":{"type":"method","name":"example_group","children":[],"call":[]}," Rspec HashWithDeprecationNotice []=":{"type":"method","name":"[]=","children":[],"call":["Rspec  deprecate "]}," Rspec HashWithDeprecationNotice initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec warn":{"type":"method","name":"warn","children":[],"call":["Kernel  warn "]}," Rspec deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "," caller [] "," caller "]}," Rspec Core Configuration find_advice":{"type":"method","name":"find_advice","children":[],"call":["(send\n  (send\n    (send\n      (send nil :advice) :[]\n      (lvar :desired_advice_type)) :[]\n    (lvar :desired_each_or_all)) :select) map ","group all_apply? "," advice [] [] select "," advice [] [] "," advice [] "," advice ","Rspec Core  world all_apply? ","Rspec Core  world "]}," Rspec Core Configuration files_or_directories_to_run=":{"type":"method","name":"files_or_directories_to_run=","children":[],"call":[" options []= ","result << "," line_number= ","file split ","Dir  [] ","pattern strip "," filename_pattern split each "," filename_pattern split "," filename_pattern ","File  directory? ","files flatten inject ","files flatten "," options ","File  expand_path ","@options []= "]}," Rspec Core Configuration full_description=":{"type":"method","name":"full_description=","children":[],"call":[" filter_run "]}," Rspec Core Configuration line_number=":{"type":"method","name":"line_number=","children":[],"call":[" filter_run ","line_number to_i "]}," Rspec Core Configuration debug=":{"type":"method","name":"debug=","children":[],"call":[" raise ","* * "," require "]}," Rspec Core Configuration full_backtrace=":{"type":"method","name":"full_backtrace=","children":[],"call":["@options [] clear ","@options [] "]}," Rspec Core Configuration backtrace_clean_patterns":{"type":"method","name":"backtrace_clean_patterns","children":[],"call":[" options [] "," options ","@options [] "]}," Rspec Core CommandLineOptions parse_spec_file_contents":{"type":"method","name":"parse_spec_file_contents","children":[],"call":[" class new parse options "," class new parse "," class new "," class ","(send\n  (send\n    (const nil :File) :readlines\n    (lvar :options_file)) :map) flatten ","l split ","File  readlines map ","File  readlines ","File  exist? "]}," Rspec Core AroundProxy run":{"type":"method","name":"run","children":[],"call":["@example_group_instance instance_eval "]}," Rspec Core AroundProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core Advice around":{"type":"method","name":"around","children":[],"call":[" around_blocks [] << "," around_blocks [] "," around_blocks "]}," Rspec Core Advice around_eachs":{"type":"method","name":"around_eachs","children":[],"call":[" around_blocks [] "," around_blocks "]}," Rspec Core Advice after":{"type":"method","name":"after","children":[],"call":[" after_blocks [] << "," after_blocks [] "," after_blocks "]}," Rspec Core Advice after_alls":{"type":"method","name":"after_alls","children":[],"call":[" after_blocks [] "," after_blocks "]}," Rspec Core Advice after_eachs":{"type":"method","name":"after_eachs","children":[],"call":[" after_blocks [] "," after_blocks "]}," Rspec Core Advice before":{"type":"method","name":"before","children":[],"call":[" before_blocks [] << "," before_blocks [] "," before_blocks "]}," Rspec Core Advice before_alls":{"type":"method","name":"before_alls","children":[],"call":[" before_blocks [] "," before_blocks "]}," Rspec Core Advice before_eachs":{"type":"method","name":"before_eachs","children":[],"call":[" before_blocks [] "," before_blocks "]}," Rspec Core Advice around_blocks":{"type":"method","name":"around_blocks","children":[],"call":[]}," Rspec Core Advice after_blocks":{"type":"method","name":"after_blocks","children":[],"call":[]}," Rspec Core Advice before_blocks":{"type":"method","name":"before_blocks","children":[],"call":[]}," Rspec Core World all_apply?":{"type":"method","name":"all_apply?","children":[],"call":["Rspec Core  world apply_condition ","group metadata ","Rspec Core  world ","filters all? ","example metadata all_apply? ","example metadata "," lambda "]}," Rspec Core Metadata determine_line_number":{"type":"method","name":"determine_line_number","children":[],"call":[" possible_files first split [] to_i "," possible_files first split [] "," possible_files first split "," possible_files first "," possible_files "]}," Rspec Core Metadata determine_file_path":{"type":"method","name":"determine_file_path","children":[],"call":[" possible_files first split first strip "," possible_files first split first "," possible_files first split "," possible_files first "," possible_files "]}," Rspec Core Metadata possible_files":{"type":"method","name":"possible_files","children":[],"call":[" [] [] grep "," [] [] "," [] "]}," Rspec Core InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," Rspec Core Example AroundProxy run":{"type":"method","name":"run","children":[],"call":["@example_group_instance instance_eval "]}," Rspec Core Example AroundProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core ExampleGroupSubject ClassMethods described":{"type":"method","name":"described","children":[],"call":[" description "," describes "]}," Rspec Core ExampleGroup __memoized":{"type":"method","name":"__memoized","children":[],"call":[]}," RSpec Core World run_hook":{"type":"method","name":"run_hook","children":[],"call":["example instance_eval "," find_hook each "," find_hook "]}," RSpec Core World find_modules":{"type":"method","name":"find_modules","children":[],"call":[" configuration find_modules "," configuration ","@configuration find_modules "]}," RSpec Core World configuration":{"type":"method","name":"configuration","children":[],"call":["RSpec  configuration "]}," RSpec Core Subject using_attribute?":{"type":"method","name":"using_attribute?","children":[],"call":[" running_example metadata [] "," running_example metadata "," running_example "," running_example in_block? "," example metadata [] "," example metadata "," example "," example in_block? "]}," RSpec Core Subject attribute_of_subject":{"type":"method","name":"attribute_of_subject","children":[],"call":[" original_subject send "," running_example description "," running_example "," original_subject "," using_attribute? "," example description "," example ","target send "," example description split inject "," example description split "]}," RSpec Core Subject original_subject":{"type":"method","name":"original_subject","children":[],"call":[" instance_eval "," class subject "," class "]}," RSpec Core RakeTask define":{"type":"method","name":"define","children":[],"call":[" raise "," fail_on_error ","STDERR  puts "," failure_message "," system "," puts "," verbose ","cmd_parts join "," files_to_run collect "," files_to_run ","cmd_parts << "," warning "," ruby_opts "," rcov_opts "," rcov "," pattern "," files_to_run empty? ","RakeFileUtils  send "," task "," name "," desc "," Rake  application last_comment "," Rake  application "," name keys first "," name keys ","Hash  === ","cmd_parts inspect ","RSpec Core Runner  run ","RSpec Core Runner  disable_at_exit_hook! "," require "," cmd inspect "," cmd ","cmd_parts concat ","command_to_run inspect "," rcov_command "," spec_command "," spec_command inspect "," ruby "," run_task ","task_block call ","(self) slice ","task_block arity ","RakeFileUtils  __send__ "," Rake  application last_description ","cmd_parts join _parts join ","cmd_parts join _parts << ","cmd_parts join _parts inspect "," cmd_parts join  inspect "," cmd_parts join  ","cmd_parts join _parts concat "," rcov_command  inspect "]}," RSpec Core MockFrameworkAdapter _teardown_mocks":{"type":"method","name":"_teardown_mocks","children":[],"call":["$rspec_mocks reset_all ","RR Space  instance reset ","RR Space  instance ","RSpec Mocks  teardown "]}," RSpec Core MockFrameworkAdapter _verify_mocks":{"type":"method","name":"_verify_mocks","children":[],"call":["$rspec_mocks verify_all ","RR Space  instance verify_doubles ","RR Space  instance ","RSpec Mocks  verify "]}," RSpec Core MockFrameworkAdapter _setup_mocks":{"type":"method","name":"_setup_mocks","children":[],"call":["RSpec Mocks Space  new ","RR Space  instance reset ","RR Space  instance ","RSpec Mocks  setup "]}," RSpec Core Hooks around_eachs":{"type":"method","name":"around_eachs","children":[],"call":[" around_blocks [] "," around_blocks "]}," RSpec Core Hooks after_alls":{"type":"method","name":"after_alls","children":[],"call":[" after_blocks [] "," after_blocks "]}," RSpec Core Hooks after_eachs":{"type":"method","name":"after_eachs","children":[],"call":[" after_blocks [] "," after_blocks "]}," RSpec Core Hooks before_alls":{"type":"method","name":"before_alls","children":[],"call":[" before_blocks [] "," before_blocks "]}," RSpec Core Hooks before_eachs":{"type":"method","name":"before_eachs","children":[],"call":[" before_blocks [] "," before_blocks "]}," RSpec Core Hooks around_blocks":{"type":"method","name":"around_blocks","children":[],"call":[]}," RSpec Core Hooks after_blocks":{"type":"method","name":"after_blocks","children":[],"call":[]}," RSpec Core Hooks before_blocks":{"type":"method","name":"before_blocks","children":[],"call":[]}," RSpec Core Formatters ProgressFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" output print "," output_for "," output "]}," RSpec Core Formatters ProgressFormatter output_for":{"type":"method","name":"output_for","children":[],"call":[" red ","example execution_result [] ","example execution_result "," green "," yellow "," colorise "]}," RSpec Core Formatters DocumentationFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" output flush "," output "," output puts "," output_for "]}," RSpec Core Formatters DocumentationFormatter output_for":{"type":"method","name":"output_for","children":[],"call":[" red ","example execution_result [] ","example execution_result "," passed_output "," pending_output "," failure_output "]}," RSpec Core Formatters DocumentationFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":[" example_group_chain "," output puts ","nested_example_group description ","   * "," output ","i == ","nested_example_group == ","@previous_nested_example_groups [] "," example_group_chain each_with_index "," example_group_chain  [] "]}," RSpec Core Formatters BaseTextFormatter colorise":{"type":"method","name":"colorise","children":[],"call":[" red "]}," RSpec Core Formatters BaseFormatter sync_output":{"type":"method","name":"sync_output","children":[],"call":[" output sync= "," output "," output_supports_sync "," output sync "," output closed? ! "," output closed? "]}," RSpec Core Formatters BaseFormatter dump":{"type":"method","name":"dump","children":[],"call":[" dump_pending "," dump_summary "," dump_failures "," start_dump "]}," RSpec Core Formatters BaseFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" examples << "," examples "]}," RSpec Core Formatters BaseFormatter report":{"type":"method","name":"report","children":[],"call":[" close "," dump "," stop "," start "," sync_output "," dump_failures "," dump_pending "," dump_summary "," pending_count "," failure_count "," example_count "," duration "," start_dump "]}," RSpec Core Formatters BaseFormatter failed_examples":{"type":"method","name":"failed_examples","children":[],"call":[" RSpec  world find "," examples "," RSpec  world "]}," RSpec Core Formatters BaseFormatter pending_examples":{"type":"method","name":"pending_examples","children":[],"call":[" RSpec  world find "," examples "," RSpec  world "]}," RSpec Core ExampleGroup mixins":{"type":"method","name":"mixins","children":[],"call":[]}," RSpec Core ExampleGroup extended_modules":{"type":"method","name":"extended_modules","children":[],"call":[]}," RSpec Core ExampleGroup to_s":{"type":"method","name":"to_s","children":[],"call":[]}," RSpec Core ExampleGroup descendents":{"type":"method","name":"descendents","children":[],"call":[]}," RSpec Core ExampleGroup it_should_behave_like":{"type":"method","name":"it_should_behave_like","children":[],"call":[]}," RSpec Core Example record_results":{"type":"method","name":"record_results","children":[],"call":[" execution_result update "," execution_result "]}," RSpec Core Example run_finished":{"type":"method","name":"run_finished","children":[],"call":["reporter example_finished "," record_results ","finish_time - "," execution_result [] "," execution_result ","Time  now ","results update ","Time  now  - "]}," RSpec Core Example run_failed":{"type":"method","name":"run_failed","children":[],"call":[" run_finished "]}," RSpec Core Example run_pending":{"type":"method","name":"run_pending","children":[],"call":[" run_finished "]}," RSpec Core Example run_passed":{"type":"method","name":"run_passed","children":[],"call":[" run_finished "]}," RSpec Core Example run_started":{"type":"method","name":"run_started","children":[],"call":[" record_results ","Time  now "]}," RSpec Core Example in_block?":{"type":"method","name":"in_block?","children":[],"call":[]}," RSpec Core Configuration require_files_to_run":{"type":"method","name":"require_files_to_run","children":[],"call":[" require ","File  expand_path "," files_to_run map "," files_to_run "]}," RSpec Core Configuration find_hook":{"type":"method","name":"find_hook","children":[],"call":["(send\n  (send\n    (send\n      (send nil :hooks) :[]\n      (lvar :hook)) :[]\n    (lvar :each_or_all)) :select) map ","group all_apply? "," hooks [] [] select "," hooks [] [] "," hooks [] "," hooks ","(send\n  (send\n    (send\n      (ivar :@hooks) :[]\n      (lvar :hook)) :[]\n    (lvar :each_or_all)) :select) map ","@hooks [] [] select ","@hooks [] [] ","@hooks [] "]}," RSpec Core Configuration after":{"type":"method","name":"after","children":[],"call":[" hooks [] [] << "," hooks [] [] "," hooks [] "," hooks ","@hooks [] [] << ","@hooks [] [] ","@hooks [] ","g after "," add_hook_to_existing_matching_groups ","block __id__ ","@after_suite_hooks unshift ","Hooks AfterHook  new "," handle_suite_hook "," on_existing_matching_groups "]}," RSpec Core Configuration before":{"type":"method","name":"before","children":[],"call":[" hooks [] [] << "," hooks [] [] "," hooks [] "," hooks ","@hooks [] [] << ","@hooks [] [] ","@hooks [] ","g before "," add_hook_to_existing_matching_groups ","block __id__ ","@before_suite_hooks << ","Hooks BeforeHook  new "," handle_suite_hook "," on_existing_matching_groups "]}," RSpec Core Configuration find_modules":{"type":"method","name":"find_modules","children":[],"call":["group all_apply? "," include_or_extend_modules select "," include_or_extend_modules ","@include_or_extend_modules select "]}," RSpec Core Configuration filter_run":{"type":"method","name":"filter_run","children":[],"call":[" filter= "," filter [] "," filter ","@filter [] "," __filter_run "," __method__ "]}," RSpec Core Configuration hooks":{"type":"method","name":"hooks","children":[],"call":["HookCollections  new "]}," RSpec Core CommandLine world":{"type":"method","name":"world","children":[],"call":["RSpec  world "]}," RSpec Core CommandLine configuration":{"type":"method","name":"configuration","children":[],"call":["RSpec  configuration "]}," RSpec Core CommandLine example_groups":{"type":"method","name":"example_groups","children":[],"call":[" world example_groups extend "," world example_groups "," world ","@world example_groups extend ","@world example_groups "]}," RSpec Core CommandLine ExampleGroups success?":{"type":"method","name":"success?","children":[],"call":[]}," RSpec Core CommandLine ExampleGroups run_examples":{"type":"method","name":"run_examples","children":[],"call":["group run "," inject "]}," RSpec Core CommandLine example_count":{"type":"method","name":"example_count","children":[],"call":[" world example_count "," world ","@world example_count "]}," RSpec Core AroundProxy run":{"type":"method","name":"run","children":[],"call":["@example_group_instance instance_eval "]}," RSpec Core AroundProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ConfigurationOptions sorted_keys":{"type":"method","name":"sorted_keys","children":[],"call":["a to_s <=> ","b to_s ","a to_s "," options keys sort "," options keys "," options "]}," RSpec Core Runner disable_at_exit_hook!":{"type":"method","name":"disable_at_exit_hook!","children":[],"call":[]}," RSpec Core Runner at_exit_hook_disabled?":{"type":"method","name":"at_exit_hook_disabled?","children":[],"call":[]}," RSpec Core RakeTask bundler":{"type":"method","name":"bundler","children":[],"call":["File  exist? "]}," RSpec Core RakeTask runner_options":{"type":"method","name":"runner_options","children":[],"call":[" ruby_opts "," rcov_opts "," rcov "," rspec_opts "]}," RSpec Core RakeTask rcov_command":{"type":"method","name":"rcov_command","children":[],"call":["cmd_parts join "," files_to_run map "," files_to_run ","cmd_parts unshift "," bundler "," runner "," runner_options "]}," RSpec Core Hooks run_hook_in":{"type":"method","name":"run_hook_in","children":[],"call":["hook call ","example instance_eval "," lambda "]}," RSpec Core Example around_hooks":{"type":"method","name":"around_hooks","children":[{"type":"method","name":"run","children":[],"asgn":[],"call":[]}],"call":["example_group_instance instance_exec "," lambda "," call ","hooks flatten reverse inject ","hooks flatten reverse ","hooks flatten ","hooks push ","a hooks [] [] ","a hooks [] ","a hooks ","example_group_class ancestors reverse map ","example_group_class ancestors reverse ","example_group_class ancestors ","RSpec  configuration hooks [] [] ","RSpec  configuration hooks [] ","RSpec  configuration hooks ","RSpec  configuration "," example_group around_hooks_for "," example_group ","RSpec  configuration hooks [] []  flatten reverse inject ","RSpec  configuration hooks [] []  flatten reverse ","RSpec  configuration hooks [] []  flatten ","RSpec  configuration hooks [] []  push ","a RSpec  configuration hooks [] []  [] [] ","a RSpec  configuration hooks [] []  [] ","a RSpec  configuration hooks [] []  ","RSpec  configuration RSpec  configuration hooks [] []  [] [] ","RSpec  configuration RSpec  configuration hooks [] []  [] ","RSpec  configuration RSpec  configuration hooks [] []  "," example_group around_RSpec  configuration hooks [] [] _for "]}," RSpec Core Formatters BaseFormatter failure_count":{"type":"method","name":"failure_count","children":[],"call":[" failed_examples size "," failed_examples "]}," RSpec Core Formatters BaseFormatter pending_count":{"type":"method","name":"pending_count","children":[],"call":[" pending_examples size "," pending_examples "]}," RSpec Core Example around_hooks_for":{"type":"method","name":"around_hooks_for","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :RSpec) :configuration) :hooks) :[]\n      (sym :around)) :[]\n    (sym :each)) :+\n  (block\n    (send\n      (send\n        (send\n          (ivar :@example_group_class) :ancestors) :reverse) :map)\n    (args\n      (arg :a))\n    (send\n      (send\n        (send\n          (lvar :a) :hooks) :[]\n        (sym :around)) :[]\n      (sym :each)))) flatten ","RSpec  configuration hooks [] [] + ","a hooks [] [] ","a hooks [] ","a hooks ","@example_group_class ancestors reverse map ","@example_group_class ancestors reverse ","@example_group_class ancestors ","RSpec  configuration hooks [] [] ","RSpec  configuration hooks [] ","RSpec  configuration hooks ","RSpec  configuration "]}," RSpec Core Formatters HtmlFormatter add_example_group":{"type":"method","name":"add_example_group","children":[],"call":["@output flush ","@output puts "," h ","example_group description "," example_group_number "," example_group_number == "]}," Rspec Core Let included":{"type":"method","name":"included","children":[],"call":[]}," Rspec Core Let InstanceMethods __memoized":{"type":"method","name":"__memoized","children":[],"call":[]}," Rspec Core Let ClassMethods let":{"type":"method","name":"let","children":[],"call":[" instance_eval "," __memoized [] "," __memoized "," define_method "]}," Rspec Core Hooks around":{"type":"method","name":"around","children":[],"call":[" around_blocks [] << "," around_blocks [] "," around_blocks "]}," Rspec Core Hooks around_eachs":{"type":"method","name":"around_eachs","children":[],"call":[" around_blocks [] "," around_blocks "]}," Rspec Core Hooks after":{"type":"method","name":"after","children":[],"call":[" after_blocks [] << "," after_blocks [] "," after_blocks "]}," Rspec Core Hooks after_alls":{"type":"method","name":"after_alls","children":[],"call":[" after_blocks [] "," after_blocks "]}," Rspec Core Hooks after_eachs":{"type":"method","name":"after_eachs","children":[],"call":[" after_blocks [] "," after_blocks "]}," Rspec Core Hooks before":{"type":"method","name":"before","children":[],"call":[" before_blocks [] << "," before_blocks [] "," before_blocks "]}," Rspec Core Hooks before_alls":{"type":"method","name":"before_alls","children":[],"call":[" before_blocks [] "," before_blocks "]}," Rspec Core Hooks before_eachs":{"type":"method","name":"before_eachs","children":[],"call":[" before_blocks [] "," before_blocks "]}," Rspec Core Hooks around_blocks":{"type":"method","name":"around_blocks","children":[],"call":[]}," Rspec Core Hooks after_blocks":{"type":"method","name":"after_blocks","children":[],"call":[]}," Rspec Core Hooks before_blocks":{"type":"method","name":"before_blocks","children":[],"call":[]}," Rspec Core ExampleGroup display_name":{"type":"method","name":"display_name","children":[],"call":[]}," Rspec Core Configuration find_hook":{"type":"method","name":"find_hook","children":[],"call":["(send\n  (send\n    (send\n      (ivar :@hooks) :[]\n      (lvar :hook)) :[]\n    (lvar :each_or_all)) :select) map ","group all_apply? ","@hooks [] [] select ","@hooks [] [] ","@hooks [] "]}," RSpec Core Extensions ModuleEvalWithArgs extract_static_instance_method_defs_from":{"type":"method","name":"extract_static_instance_method_defs_from","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[]},{"type":"method","name":"define_method","children":[],"asgn":[],"call":[]}],"call":["h []= ","instance method ","klass instance_methods inject ","klass instance_methods ","klass new "," class_eval ","Class  new ","klass new  method ","klass klass new _methods inject ","klass klass new _methods "]}," Rspec2 ruby":{"type":"method","name":"ruby","children":[],"call":[" using_bundler? "]}," Rspec Core Metadata described_class_from":{"type":"method","name":"described_class_from","children":[],"call":["args first "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata ","args first is_a? "]}," Rspec Core Metadata full_description_from":{"type":"method","name":"full_description_from","children":[],"call":[" description_from "," superclass_metadata [] [] "," superclass_metadata [] "," superclass_metadata "]}," Rspec Core Metadata description_from":{"type":"method","name":"description_from","children":[],"call":["(send\n  (lvar :args) :map) join ","a to_s strip ","a to_s ","args map "]}," Rspec Core Metadata superclass_metadata":{"type":"method","name":"superclass_metadata","children":[],"call":[]}," Rspec Core Metadata ensure_valid_keys":{"type":"method","name":"ensure_valid_keys","children":[],"call":[" raise ","* * ","RESERVED_KEYS  join "," caller [] "," caller ","user_metadata keys include? ","user_metadata keys ","RESERVED_KEYS  each "]}," Rspec configuration":{"type":"method","name":"configuration","children":[],"call":[]}," Rspec2 add_options_if_present":{"type":"method","name":"add_options_if_present","children":[],"call":["File  join ","File  exist? "]}," Rspec Core MockFrameworkAdapter _teardown_mocks":{"type":"method","name":"_teardown_mocks","children":[],"call":["$rspec_mocks reset_all ","RR Space  instance reset ","RR Space  instance "]}," Rspec Core MockFrameworkAdapter _verify_mocks":{"type":"method","name":"_verify_mocks","children":[],"call":["$rspec_mocks verify_all ","RR Space  instance verify_doubles ","RR Space  instance "]}," Rspec Core MockFrameworkAdapter _setup_mocks":{"type":"method","name":"_setup_mocks","children":[],"call":["Rspec Mocks Space  new ","RR Space  instance reset ","RR Space  instance "]}," Rspec Core MockFrameworkAdapter teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" flexmock_close "]}," Rspec Core MockFrameworkAdapter verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" flexmock_verify "]}," Rspec Core MockFrameworkAdapter setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[]}," Rspec Core Formatters Helpers strip_trailing_zeroes":{"type":"method","name":"strip_trailing_zeroes","children":[],"call":["string sub "]}," Rspec Core Formatters Helpers format_seconds":{"type":"method","name":"format_seconds","children":[],"call":[" strip_trailing_zeroes "," sprintf ","float < "]}," Rspec Core Configuration configure_mock_framework":{"type":"method","name":"configure_mock_framework","children":[],"call":["Rspec Core ExampleGroup  send "," require_mock_framework_adapter "]}," Rspec Core Configuration require_mock_framework_adapter":{"type":"method","name":"require_mock_framework_adapter","children":[],"call":[" require ","@options [] to_s ","@options [] "]}," Rspec Core Configuration use_transactional_examples?":{"type":"method","name":"use_transactional_examples?","children":[],"call":["@options [] "]}," Rspec Core Configuration use_transactional_examples=":{"type":"method","name":"use_transactional_examples=","children":[],"call":["@options []= "]}," Rspec Core Subject ClassMethods implicit_subject":{"type":"method","name":"implicit_subject","children":[],"call":[" lambda ","described new ","Class  === "," description "," describes "," proc "]}," Rspec Core Subject ClassMethods explicit_subject":{"type":"method","name":"explicit_subject","children":[],"call":["group superclass ","group explicit_subject_block ","group respond_to? ","group superclass  superclass ","group superclass  explicit_subject_block ","group superclass  respond_to? "]}," Rspec Core Subject ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[" implicit_subject "," explicit_subject "]}," Rspec Core Subject should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "," __should_not_for_example_group__ "," == "]}," Rspec Core Subject should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "," __should_for_example_group__ "," == "]}," Rspec Core Subject subject":{"type":"method","name":"subject","children":[],"call":[" instance_eval "," class subject "," class "]}," Rspec Core Subject included":{"type":"method","name":"included","children":[],"call":[]}," Rspec Core Runner ExampleGroups success?":{"type":"method","name":"success?","children":[],"call":[]}," Rspec Core Runner ExampleGroups run_all":{"type":"method","name":"run_all","children":[],"call":["group run "," inject "]}," Rspec Core Runner example_groups":{"type":"method","name":"example_groups","children":[],"call":["Rspec Core  world example_groups_to_run extend ","Rspec Core  world example_groups_to_run ","Rspec Core  world "]}," Rspec Core Runner example_count":{"type":"method","name":"example_count","children":[],"call":["Rspec Core  world total_examples_to_run ","Rspec Core  world "]}," Rspec Core Runner configure":{"type":"method","name":"configure","children":[],"call":[" configuration configure_mock_framework "," configuration "," configuration require_files_to_run ","Rspec Core ConfigurationOptions  new apply_to ","Rspec Core ConfigurationOptions  new "]}," Rspec Core Formatters BaseFormatter output_supports_sync":{"type":"method","name":"output_supports_sync","children":[],"call":[" output respond_to? "," output "]}," Rspec Core Formatters BaseFormatter sync_output":{"type":"method","name":"sync_output","children":[],"call":[" output sync= "," output "," output_supports_sync "," output sync "]}," Rspec Core Formatters BaseFormatter dump":{"type":"method","name":"dump","children":[],"call":[" dump_pending "," dump_summary "," dump_failures "," start_dump "]}," Rspec Core Formatters BaseFormatter stop":{"type":"method","name":"stop","children":[],"call":["Time  now - ","Time  now "]}," Rspec Core Formatters BaseFormatter report":{"type":"method","name":"report","children":[],"call":[" close "," dump "," stop "," start "," sync_output "]}," Rspec Core ConfigurationOptions local_options_file":{"type":"method","name":"local_options_file","children":[],"call":["Rspec  deprecate ","File  exist? ","@options delete ","@options [] "]}," Rspec Core ConfigurationOptions args_from_options_file":{"type":"method","name":"args_from_options_file","children":[],"call":["(send\n  (send\n    (const nil :File) :readlines\n    (lvar :path)) :map) flatten ","l split ","File  readlines map ","File  readlines ","File  exist? "]}," Rspec Core ConfigurationOptions parse_options_file":{"type":"method","name":"parse_options_file","children":[],"call":["Parser  parse "," args_from_options_file "]}," Rspec Core ConfigurationOptions local_options":{"type":"method","name":"local_options","children":[],"call":[" parse_options_file "," local_options_file "]}," Rspec Core ConfigurationOptions global_options":{"type":"method","name":"global_options","children":[],"call":[" parse_options_file "]}," Rspec Core ConfigurationOptions Parser parser":{"type":"method","name":"parser","children":[],"call":["options []= ","parser on "," local_options_file ","options [] << ","options [] "," exit "," puts ","parser on_tail ","parser banner= ","OptionParser  new "]}," Rspec Core ConfigurationOptions Parser parse!":{"type":"method","name":"parse!","children":[],"call":[" parser parse! "," parser "]}," Rspec Core ConfigurationOptions command_line_options":{"type":"method","name":"command_line_options","children":[],"call":[" parse_command_line_options "]}," Rspec Core ConfigurationOptions merged_options":{"type":"method","name":"merged_options","children":[],"call":["merged merge ","(send nil :global_options) inject "," command_line_options "," local_options "," global_options "]}," Rspec Core ConfigurationOptions parse_command_line_options":{"type":"method","name":"parse_command_line_options","children":[],"call":["@options []= ","Parser  parse! ","Parser  parse!  []= "]}," Rspec Core ConfigurationOptions apply_to":{"type":"method","name":"apply_to","children":[],"call":["config send "," merged_options each "," merged_options "]}," Rspec Core ConfigurationOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core Configuration require_files_to_run":{"type":"method","name":"require_files_to_run","children":[],"call":[" require "," files_to_run map "," files_to_run "]}," Rspec Core Configuration libs=":{"type":"method","name":"libs=","children":[],"call":["$LOAD_PATH unshift ","libs map "]}," Rspec Core World declaration_line_numbers":{"type":"method","name":"declaration_line_numbers","children":[],"call":["lines + ","g declaration_line_numbers "," example_groups inject "," example_groups "]}," Rspec Core World preceding_example_or_group_line":{"type":"method","name":"preceding_example_or_group_line","children":[],"call":["line <= "," declaration_line_numbers inject "," declaration_line_numbers "]}," Rspec Core World filtered_example_groups":{"type":"method","name":"filtered_example_groups","children":[],"call":["examples empty? ! ","examples empty? ","example_group examples_to_run replace ","example_group examples_to_run ","examples uniq! "," apply_inclusion_filters "," inclusion_filter "," apply_exclusion_filters "," exclusion_filter ","example_group examples "," example_groups select "," example_groups "," apply_inclusion_filters  empty? ! "," apply_exclusion_filters  empty? ! ","example_group examples  empty? ! "," apply_inclusion_filters  empty? "," apply_exclusion_filters  empty? ","example_group examples  empty? ","example_group  apply_inclusion_filters _to_run replace ","example_group  apply_exclusion_filters _to_run replace ","example_group example_group examples _to_run replace ","example_group  apply_inclusion_filters _to_run ","example_group  apply_exclusion_filters _to_run ","example_group example_group examples _to_run "," apply_inclusion_filters  uniq! "," apply_exclusion_filters  uniq! ","example_group examples  uniq! ","example_group  apply_inclusion_filters  ","example_group  apply_exclusion_filters  ","example_group example_group examples  "]}," Rspec Core World all_example_groups":{"type":"method","name":"all_example_groups","children":[],"call":["g examples_to_run replace ","g examples ","g examples_to_run ","@example_groups each "]}," Rspec Core World inclusion_filter":{"type":"method","name":"inclusion_filter","children":[],"call":["Rspec  configuration filter ","Rspec  configuration "]}," Rspec Core Metadata world":{"type":"method","name":"world","children":[],"call":["Rspec Core  world "]}," Rspec Core Let ClassMethods let!":{"type":"method","name":"let!","children":[],"call":[" __send__ "," before "," let "]}," Rspec Core ExampleGroup declaration_line_numbers":{"type":"method","name":"declaration_line_numbers","children":[],"call":[]}," Rspec Core ExampleGroup define_example_method":{"type":"method","name":"define_example_method","children":[],"call":[]}," Rspec Core Pending pending":{"type":"method","name":"pending","children":[],"call":[" throw "," raise ","Rspec Core PendingExampleFixedError  new "," running_example metadata []= "," running_example metadata "," running_example "," block_given? "," running_example metadata [] []= "," running_example metadata [] "]}," Rspec Core Formatters DocumentationFormatter example_group_chain":{"type":"method","name":"example_group_chain","children":[],"call":[" example_group ancestors reverse "," example_group ancestors "," example_group "]}," Rspec Core ExampleGroup top_level_description":{"type":"method","name":"top_level_description","children":[],"call":[]}," Rspec Core ExampleGroup delegate_to_metadata":{"type":"method","name":"delegate_to_metadata","children":[],"call":[]}," Rspec Core Example delegate_to_metadata":{"type":"method","name":"delegate_to_metadata","children":[],"call":[]}," RSpec Core Runner ExampleGroups success?":{"type":"method","name":"success?","children":[],"call":[]}," RSpec Core Runner ExampleGroups run_examples":{"type":"method","name":"run_examples","children":[],"call":["group run "," inject "]}," RSpec Core Runner example_groups":{"type":"method","name":"example_groups","children":[],"call":["RSpec  world example_groups extend ","RSpec  world example_groups ","RSpec  world "]}," RSpec Core Runner example_count":{"type":"method","name":"example_count","children":[],"call":["RSpec  world example_count ","RSpec  world "]}," RSpec Core Runner configure":{"type":"method","name":"configure","children":[],"call":[" configuration configure_mock_framework "," configuration "," configuration require_files_to_run ","RSpec Core ConfigurationOptions  new apply_to ","RSpec Core ConfigurationOptions  new ","@options configure ","@configuration output_stream= ","@configuration output_stream == ","@configuration output_stream ","@configuration error_stream= "]}," RSpec Core Runner inclusion_filter":{"type":"method","name":"inclusion_filter","children":[],"call":["RSpec  configuration filter ","RSpec  configuration "]}," RSpec Core Runner reporter":{"type":"method","name":"reporter","children":[],"call":[" configuration formatter "," configuration "]}," RSpec Core Runner configuration":{"type":"method","name":"configuration","children":[],"call":["RSpec  configuration "]}," RSpec Core Formatters BaseFormatter output":{"type":"method","name":"output","children":[],"call":[" configuration output "," configuration "]}," RSpec warn":{"type":"method","name":"warn","children":[],"call":["Kernel  warn "]}," RSpec Core ConfigurationOptions local_options":{"type":"method","name":"local_options","children":[],"call":[" parse_options_file "," local_options_file "," options_from "]}," RSpec Core ConfigurationOptions global_options":{"type":"method","name":"global_options","children":[],"call":[" parse_options_file "," options_from "," global_options_file "]}," RSpec Core ConfigurationOptions Parser parser":{"type":"method","name":"parser","children":[],"call":["options []= ","parser on "," local_options_file ","options [] << ","options [] "," exit "," puts ","parser on_tail ","parser banner= ","OptionParser  new "]}," RSpec Core ConfigurationOptions Parser parse!":{"type":"method","name":"parse!","children":[],"call":[" parser parse! "," parser "]}," RSpec Core ConfigurationOptions command_line_options":{"type":"method","name":"command_line_options","children":[],"call":[" parse_command_line_options ","Parser  parse! merge ","Parser  parse! ","options []= ","Parser  parse merge ","Parser  parse "," parse_command_line_Parser  parse!  ","Parser  parse!  []= "]}," RSpec Core ConfigurationOptions merged_options":{"type":"method","name":"merged_options","children":[],"call":["merged merge ","(send nil :global_options) inject "," command_line_options "," local_options "," global_options "]}," RSpec Core ConfigurationOptions apply_to":{"type":"method","name":"apply_to","children":[],"call":["config send "," merged_options each "," merged_options "]}," RSpec Core Configuration add_option":{"type":"method","name":"add_option","children":[],"call":[" instance_variable_set ","options [] ","(send nil :send\n  (lvar :mname)) ! ! ","(send nil :send\n  (lvar :mname)) ! "," send "," define_method "," attr_accessor ","(sclass\n  (self)\n  (self)) class_eval "]}," RSpec Core Configuration output":{"type":"method","name":"output","children":[],"call":[" output_stream ","RSpec  deprecate "]}," RSpec Core Configuration run_all_when_everything_filtered?":{"type":"method","name":"run_all_when_everything_filtered?","children":[],"call":[]}," RSpec Core Configuration files_to_run":{"type":"method","name":"files_to_run","children":[],"call":["@options [] "," get_files_to_run "]}," RSpec Core Configuration profile_examples=":{"type":"method","name":"profile_examples=","children":[],"call":["@options []= "]}," RSpec Core Configuration profile_examples":{"type":"method","name":"profile_examples","children":[],"call":["@options [] ","profile is_a? ! ","profile is_a? "," value_for "," value_for  is_a? ! "," value_for  is_a? "]}," RSpec Core Configuration filename_pattern=":{"type":"method","name":"filename_pattern=","children":[],"call":["@options []= "," pattern= ","RSpec  deprecate "]}," RSpec Core Configuration filename_pattern":{"type":"method","name":"filename_pattern","children":[],"call":["@options [] "," pattern ","RSpec  deprecate "]}," RSpec Core Configuration mock_framework=":{"type":"method","name":"mock_framework=","children":[],"call":["@options []= "," mock_with "," settings []= "," settings "," require ","framework to_s "," assert_no_example_groups_defined "]}," RSpec Core Configuration backtrace_clean_patterns":{"type":"method","name":"backtrace_clean_patterns","children":[],"call":["@options [] ","@backtrace_cleaner exclusion_patterns ","RSpec  deprecate ","@backtrace_formatter exclusion_patterns "]}," RSpec Core Configuration default_options":{"type":"method","name":"default_options","children":[],"call":[]}," RSpec Core Metadata first_caller_from_outside_rspec_from_caller":{"type":"method","name":"first_caller_from_outside_rspec_from_caller","children":[],"call":["l !~ ","list detect "]}," RSpec Core Metadata file_and_line_number_from":{"type":"method","name":"file_and_line_number_from","children":[],"call":["2 to_i ","entry =~ "," first_caller_from_outside_rspec_from_caller "," first_caller_from_outside_rspec_from_caller  =~ "]}," RSpec Core World apply?":{"type":"method","name":"apply?","children":[],"call":["example metadata apply? ","example metadata "," lambda ","filter empty? "]}," RSpec Core World register":{"type":"method","name":"register","children":[],"call":[" example_groups << "," example_groups ","@example_group_counts_by_spec_file [] ","example_group metadata [] ","example_group metadata ","block call ","@configuration on_example_group_definition_callbacks each ","@configuration on_example_group_definition_callbacks "]}," RSpec Core Subject InstanceMethods should_not":{"type":"method","name":"should_not","children":[],"call":[" subject should_not "," subject "," __should_not_for_example_group__ "," == "]}," RSpec Core Subject InstanceMethods should":{"type":"method","name":"should","children":[],"call":[" subject should "," subject "," __should_for_example_group__ "," == "]}," RSpec Core Subject InstanceMethods subject":{"type":"method","name":"subject","children":[],"call":[" instance_eval "," class subject "," class "]}," RSpec Core RakeTask gemfile?":{"type":"method","name":"gemfile?","children":[],"call":["File  exist? "," gemfile "]}," RSpec Core Metadata apply?":{"type":"method","name":"apply?","children":[],"call":[" apply_condition ","filters send "]}," RSpec Core ExampleGroup apply?":{"type":"method","name":"apply?","children":[],"call":[]}," RSpec Core ExampleGroup register":{"type":"method","name":"register","children":[],"call":[]}," RSpec Core Configuration configure_expectation_framework":{"type":"method","name":"configure_expectation_framework","children":[],"call":["RSpec Core ExampleGroup  send "," require_expectation_framework_adapter "," expectation_frameworks each "," expectation_frameworks "," conditionally_disable_expectations_monkey_patching ","RSpec Core ExampleGroup  __send__ "]}," RSpec Core Configuration require_expectation_framework_adapter":{"type":"method","name":"require_expectation_framework_adapter","children":[],"call":[" require "," raise "," expectation_framework inspect "," expectation_framework "," expectation_framework to_s "]}," RSpec Core Configuration expect_with":{"type":"method","name":"expect_with","children":[],"call":[" settings []= "," settings ","@expectation_frameworks push ","@expectation_frameworks clear "," assert_no_example_groups_defined ","(send\n  (lvar :modules) :-\n  (ivar :@expectation_frameworks)) any? ","modules - "," raise ","framework inspect "," require "," expecting_with_rspec= ","frameworks map ","modules first configuration ","modules first ","modules first respond_to? ","modules length ","modules length > "," block_given? "," settings [] << "," settings [] ","frameworks each ","RSpec  deprecate "," RSpec Expectations MultipleExpectationsNotMetError  __send__ "]}," RSpec Rake const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Runner configure":{"type":"method","name":"configure","children":[],"call":[]}," RSpec reset":{"type":"method","name":"reset","children":[],"call":[]}," require_rspec":{"type":"method","name":"require_rspec","children":[],"call":[" require "," require_relative "]}," RSpec Core World everything_filtered_message":{"type":"method","name":"everything_filtered_message","children":[],"call":[]}," RSpec Core World announce_filters":{"type":"method","name":"announce_filters","children":[],"call":[" reporter message "," everything_filtered_message "," reporter "," inclusion_filter empty? "," inclusion_filter ","message << "," inclusion_filter description ","@configuration run_all_when_everything_filtered? "," exclusion_filter empty_without_conditional_filters? "," exclusion_filter "," filter_manager empty? "," filter_manager "," example_groups clear "," example_groups "," example_count zero? "," example_count "," inclusion_filter clear "," filtered_examples clear "," filtered_examples ","filter_announcements join ","filter_announcements [] ","filter_announcements length == ","filter_announcements length "," announce_exclusion_filter "," announce_inclusion_filter ","filter_announcements empty? ! ","filter_announcements empty? "," exclusion_filter description ","@configuration clear_inclusion_filter ","@configuration reporter message ","@configuration reporter "," exclusion_filter empty? ! "," exclusion_filter empty? "," inclusion_filter empty? ! "," exclusion_filter rules_empty? "," report_filter_message ","@configuration only_failures? ! ","@configuration only_failures? "," fail_if_config_and_cli_options_invalid "," rspec_is_quitting "," reporter  everything_filtered_message  "," everything_filtered_ everything_filtered_message  "," everything_filtered_message  << ","@configuration reporter  everything_filtered_message  "," report_filter_ everything_filtered_message  "]}," RSpec Core World reporter":{"type":"method","name":"reporter","children":[],"call":["@configuration reporter "]}," RSpec Core World filter_manager":{"type":"method","name":"filter_manager","children":[],"call":["@configuration filter_manager "]}," RSpec Core World reset":{"type":"method","name":"reset","children":[],"call":[" shared_example_groups clear "," shared_example_groups "," example_groups clear "," example_groups ","SharedExampleGroup Registry  clear ","SharedExampleGroup  registry clear ","SharedExampleGroup  registry ","Hash  new ","@sources_by_path clear ","RSpec ExampleGroups  remove_all_constants "]}," RSpec Core Subject ExampleGroupMethods implicit_subject":{"type":"method","name":"implicit_subject","children":[],"call":[" proc ","described new ","Class  === "," description "," described_class "]}," RSpec Core Subject ExampleGroupMethods explicit_subject":{"type":"method","name":"explicit_subject","children":[],"call":["group superclass ","group explicit_subject_block ","group respond_to? ","group superclass  superclass ","group superclass  explicit_subject_block ","group superclass  respond_to? "]}," RSpec Core Subject ExampleGroupMethods subject":{"type":"method","name":"subject","children":[],"call":[" implicit_subject "," explicit_subject "," subject "," define_method "," send "," let "]}," RSpec Core Subject ExampleGroupMethods its":{"type":"method","name":"its","children":[],"call":[" instance_eval "," _nested_attribute "," [] ","Array  === "," define_method "," class class_eval "," class "," example "," describe ","target send ","attribute to_s split inject ","attribute to_s split ","attribute to_s ","attribute is_a? "]}," RSpec Core Subject ExampleMethods _nested_attribute":{"type":"method","name":"_nested_attribute","children":[],"call":["inner_subject send "," _attribute_chain inject "," _attribute_chain ","subject send "]}," RSpec Core Subject ExampleMethods _attribute_chain":{"type":"method","name":"_attribute_chain","children":[],"call":["attribute to_s split ","attribute to_s "]}," RSpec Core Subject ExampleMethods should_not":{"type":"method","name":"should_not","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," subject "," subject should_not "," __should_not_for_example_group__ "," == "]}," RSpec Core Subject ExampleMethods should":{"type":"method","name":"should","children":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher "," subject "," subject should "," __should_for_example_group__ "," == "]}," RSpec Core Subject ExampleMethods subject":{"type":"method","name":"subject","children":[],"call":[" instance_eval "," class subject "," class "]}," RSpec Core SharedExampleGroup shared_examples":{"type":"method","name":"shared_examples","children":[],"call":["RSpec  configuration extend ","RSpec  configuration ","host class_eval ","(sclass\n  (lvar :mod)\n  (self)) send ","Module  new ","args empty? ","RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world "," ensure_shared_example_group_name_not_taken ","args shift ","cls === ","args first ","(const nil :String) any? "," raise_key_taken "," key_taken? "," key? ","Registry  add_group ","SharedExampleGroup  registry add_group ","SharedExampleGroup  registry ","RSpec  world shared_example_group_registry add ","RSpec  world shared_example_group_registry "," raise ","Creating isolated shared examples from within a context is  + + ","Creating isolated shared examples from within a context is  + ","RSpec  thread_local_metadata [] ","RSpec  thread_local_metadata "," == ","RSpec Support  thread_local_data [] ","RSpec Support  thread_local_data ","(sclass\n  (lvar :Module  new )\n  (self)) send "," raise_args shift _taken "," args shift _taken? "," args shift ? "]}," RSpec Core SharedContext _nested_group_declarations":{"type":"method","name":"_nested_group_declarations","children":[],"call":[]}," RSpec Core SharedContext describe":{"type":"method","name":"describe","children":[],"call":[" _nested_group_declarations << "," _nested_group_declarations "]}," RSpec Core SharedContext included":{"type":"method","name":"included","children":[],"call":["group describe "," _nested_group_declarations each "," _nested_group_declarations ","group hooks [] [] concat "," hooks [] [] "," hooks [] "," hooks ","group hooks [] [] ","group hooks [] ","group hooks ","(sym :all) each ","(sym :before) each ","recording playback_onto "," __shared_context_recordings each "," __shared_context_recordings "]}," Core Reporter finish":{"type":"method","name":"finish","children":[],"call":[" notify "," stop ","Notifications SeedNotification  new "," seed_used? ","@configuration seed ","Notifications ProfileNotification  new ","@configuration profile_examples "," mute_profile_output? ","Notifications SummaryNotification  new ","Notifications ExamplesNotification  new ","@profiler example_groups "," close_after "]}," RSpec Core RakeTask gemfile=":{"type":"method","name":"gemfile=","children":[],"call":["RSpec  deprecate "," deprecate "]}," RSpec Core RakeTask skip_bundler=":{"type":"method","name":"skip_bundler=","children":[],"call":["RSpec  deprecate "," deprecate "]}," RSpec Core ProjectInitializer report_creating":{"type":"method","name":"report_creating","children":[],"call":[" puts "," stream puts "," stream "]}," RSpec Core ProjectInitializer report_exists":{"type":"method","name":"report_exists","children":[],"call":[" puts "," stream puts "," stream "]}," RSpec Core ProjectInitializer delete_if_confirmed":{"type":"method","name":"delete_if_confirmed","children":[],"call":["FileUtils  rm_rf "," gets =~ "," gets "," puts ","File  exist? "]}," RSpec Core ProjectInitializer create_spec_helper_file":{"type":"method","name":"create_spec_helper_file","children":[],"call":["f write ","File  open ","FileUtils  mkdir_p "," report_creating "," report_exists ","File  exist? ","FileUtils  touch ","FileUtils  mkdir ","File  directory? ","File  read ","File  expand_path "]}," RSpec Core ProjectInitializer create_dot_rspec_file":{"type":"method","name":"create_dot_rspec_file","children":[],"call":["f write ","File  open "," report_creating "," report_exists ","File  exist? ","FileUtils  touch ","File  read ","File  expand_path "]}," RSpec Core ProjectInitializer run":{"type":"method","name":"run","children":[],"call":[" delete_if_confirmed "," create_dot_rspec_file "," create_spec_helper_file "," warn "," copy_template "]}," RSpec Core ProjectInitializer initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","opts fetch ","Dir  getwd "]}," RSpec Core Pending PendingExampleFixedError pending_fixed?":{"type":"method","name":"pending_fixed?","children":[],"call":[]}," RSpec Core MockFrameworkAdapter framework_name":{"type":"method","name":"framework_name","children":[],"call":[]}," RSpec Core MetadataHashBuilder WithDeprecationWarning symbol_metadata_warning":{"type":"method","name":"symbol_metadata_warning","children":[],"call":["symbols inspect "]}," RSpec Core MetadataHashBuilder WithConfigWarning symbol_metadata_warning":{"type":"method","name":"symbol_metadata_warning","children":[],"call":["symbols inspect "]}," RSpec Core MetadataHashBuilder Common warn_about_symbol_usage":{"type":"method","name":"warn_about_symbol_usage","children":[],"call":["Kernel  warn "," symbol_metadata_warning ","symbols empty? ","a is_a? ","args select "]}," RSpec Core MetadataHashBuilder Common add_symbols_to_hash":{"type":"method","name":"add_symbols_to_hash","children":[],"call":["hash []= ","args pop ","args last is_a? ","args last "]}," RSpec Core MetadataHashBuilder Common build_metadata_hash_from":{"type":"method","name":"build_metadata_hash_from","children":[],"call":[" warn_about_symbol_usage "," add_symbols_to_hash ","RSpec  configuration treat_symbols_as_metadata_keys_with_true_values? ","RSpec  configuration ","args pop ","args last is_a? ","args last ","RSpec  configuration treat_symbols_as_args pop _keys_with_true_values? "]}," RSpec Core Metadata example_group_declaration_line":{"type":"method","name":"example_group_declaration_line","children":[],"call":["locations [] ","File  expand_path "," [] [] "," [] "]}," RSpec Core Metadata line_number_filter_applies?":{"type":"method","name":"line_number_filter_applies?","children":[],"call":["(send\n  (send nil :relevant_line_numbers) :&\n  (lvar :preceding_declaration_lines)) empty? ! ","(send\n  (send nil :relevant_line_numbers) :&\n  (lvar :preceding_declaration_lines)) empty? "," relevant_line_numbers & "," relevant_line_numbers ","RSpec  world preceding_declaration_line ","RSpec  world ","line_numbers map "]}," RSpec Core Metadata location_filter_applies?":{"type":"method","name":"location_filter_applies?","children":[],"call":[" line_number_filter_applies? "," example_group_declaration_line ","  example_group_declaration_line _filter_applies? "]}," RSpec Core Metadata filter_applies_to_any_value?":{"type":"method","name":"filter_applies_to_any_value?","children":[],"call":[" filter_applies? "," [] any? "," [] "]}," RSpec Core Metadata filters_apply?":{"type":"method","name":"filters_apply?","children":[],"call":[" filter_applies? "," [] ","value all? "]}," RSpec Core Metadata filter_applies?":{"type":"method","name":"filter_applies?","children":[],"call":["metadata [] to_s == ","value to_s ","metadata [] to_s ","metadata [] ","value call ","value arity ","metadata [] =~ ","metadata has_key? ","metadata filters_apply? ","Hash  === ","metadata location_filter_applies? ","key == ","metadata line_number_filter_applies? ","metadata filter_applies_to_any_value? ","(send\n  (const nil :Proc) :===\n  (lvar :value)) ! ","Proc  === ","Array  === ","metadata [] == ","(send\n  (send nil :relevant_line_numbers\n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? ! ","(send\n  (send nil :relevant_line_numbers\n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? "," relevant_line_numbers & "," relevant_line_numbers "," world preceding_declaration_line "," world ","value map ","value arity == "," filter_applies? ","value all? ","value [] ","File  expand_path ","(or\n  (send\n    (self) :[]\n    (sym :example_group))\n  (hash)) [] "," [] ","RSpec  deprecate ","Metadata  line_number_filter_deprecation_issued ","(send\n  (send nil :relevant_value [] \n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? ! ","(send\n  (send nil :relevant_value [] \n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? "," relevant_value []  & "," relevant_value []  "]}," RSpec Core Metadata any_apply?":{"type":"method","name":"any_apply?","children":[],"call":[" filter_applies? ","filters any? "]}," RSpec Core Metadata GroupMetadataHash container_stack":{"type":"method","name":"container_stack","children":[],"call":["group [] ","groups << ","group has_key? ","group []  [] ","group [] s << ","group []  has_key? "]}," RSpec Core Metadata GroupMetadataHash full_description":{"type":"method","name":"full_description","children":[],"call":[" build_description_from ","(send\n  (send\n    (send nil :container_stack) :reverse) :map) flatten ","a [] "," container_stack reverse map "," container_stack reverse "," container_stack ","FlatMap  flat_map "]}," RSpec Core Metadata GroupMetadataHash described_class":{"type":"method","name":"described_class","children":[],"call":["Symbol  === ","String  === ","g [] first ","g [] "," container_stack reverse each "," container_stack reverse "," container_stack ","g has_key? "," container_stack each ","value nil? ","(sym :described_class) each ","RSpec  warn_deprecation ","(str \"              |The semantics of `described_class` in a nested `describe <SomeClass>`\\n\") gsub ","CallerFilter  first_non_rspec_line ","value_for_rspec_3 inspect ","value_for_rspec_2 inspect ","value_for_rspec_2 != "," described_class_for_rspec_3 "," described_class_for_rspec_2 "," warn_about_first_description_arg_behavioral_change_in_rspec_3 ","g []  nil? ","g [] _for_rspec_3 inspect "," described_class_for_rspec_3  inspect ","g [] _for_rspec_2 inspect "," described_class_for_rspec_2  inspect ","g [] _for_rspec_2 != "," described_class_for_rspec_2  != "]}," RSpec Core Metadata ExampleMetadataHash full_description":{"type":"method","name":"full_description","children":[],"call":[" build_description_from "," [] "," [] [] "]}," RSpec Core Metadata ExampleMetadataHash described_class":{"type":"method","name":"described_class","children":[],"call":[" [] described_class "," [] "]}," RSpec Core Metadata MetadataHash build_description_from":{"type":"method","name":"build_description_from","children":[],"call":["p =~ ","(send\n  (lvar :parts) :map) inject ","p to_s ","parts map ","desc + ","  + "," method_description_after_module? ","this_part to_s ","parts inject ","first_part to_s ","(send\n  (lvar :parts) :map) reduce ","this_part to_s  to_s "]}," RSpec Core Metadata MetadataHash first_caller_from_outside_rspec":{"type":"method","name":"first_caller_from_outside_rspec","children":[],"call":["l !~ "," [] detect "," [] "]}," RSpec Core Metadata MetadataHash file_and_line_number":{"type":"method","name":"file_and_line_number","children":[],"call":["2 to_i ","Metadata  relative_path "," first_caller_from_outside_rspec =~ "," first_caller_from_outside_rspec "]}," RSpec Core Metadata MetadataHash location":{"type":"method","name":"location","children":[],"call":[" [] "]}," RSpec Core Metadata MetadataHash []":{"type":"method","name":"[]","children":[],"call":[" store "," build_description_from "," [] "," full_description "," described_class "," file_and_line_number "," location "," has_key? "," store_computed "," full_description_for "," described_class_for "]}," RSpec Core Metadata relative_path":{"type":"method","name":"relative_path","children":[],"call":[]}," RSpec Core Let ExampleMethods __memoized":{"type":"method","name":"__memoized","children":[],"call":[]}," RSpec Core Let ExampleGroupMethods let!":{"type":"method","name":"let!","children":[],"call":[" __send__ "," before "," let "]}," RSpec Core Let ExampleGroupMethods let":{"type":"method","name":"let","children":[],"call":[" __memoized []= "," instance_eval "," __memoized "," __memoized fetch "," define_method "]}," RSpec Core Hooks extract_scope_from":{"type":"method","name":"extract_scope_from","children":[],"call":[" raise ","ArgumentError  new ","a is_a? ","args any? ","args shift ","SCOPES  include? ","args first "]}," RSpec Core Hooks after_each_hooks_for":{"type":"method","name":"after_each_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","(send\n  (send nil :ancestors) :map) flatten ","a hooks [] [] ","a hooks [] ","a hooks "," ancestors map "," ancestors ","(send\n  (send nil :parent_groups) :map) flatten "," parent_groups map "," parent_groups ","FlatMap  flat_map "]}," RSpec Core Hooks before_each_hooks_for":{"type":"method","name":"before_each_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","(send\n  (send\n    (send nil :ancestors) :reverse) :map) flatten ","a hooks [] [] ","a hooks [] ","a hooks "," ancestors reverse map "," ancestors reverse "," ancestors ","(send\n  (send\n    (send nil :parent_groups) :reverse) :map) flatten "," parent_groups reverse map "," parent_groups reverse "," parent_groups ","FlatMap  flat_map "]}," RSpec Core Hooks after_all_hooks_for":{"type":"method","name":"after_all_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," hooks [] [] "," hooks [] "," hooks "]}," RSpec Core Hooks before_all_hooks_for":{"type":"method","name":"before_all_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," hooks [] [] "," hooks [] "," hooks "]}," RSpec Core Hooks around_each_hooks_for":{"type":"method","name":"around_each_hooks_for","children":[],"call":["AroundHookCollection  new for ","AroundHookCollection  new ","(send\n  (send nil :ancestors) :map) flatten ","a hooks [] [] ","a hooks [] ","a hooks "," ancestors map "," ancestors ","(send\n  (send nil :parent_groups) :map) flatten "," parent_groups map "," parent_groups ","FlatMap  flat_map "]}," RSpec Core Hooks append_after":{"type":"method","name":"append_after","children":[],"call":[" hooks [] [] << ","block extend with ","block extend "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from "," register_hook "," hooks register "]}," RSpec Core Hooks prepend_before":{"type":"method","name":"prepend_before","children":[],"call":[" hooks [] [] unshift ","block extend with ","block extend "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from "," register_hook "," hooks register "]}," RSpec Core Hooks AroundHookCollection run":{"type":"method","name":"run","children":[],"call":["(send nil :inject\n  (ivar :@initial_procsy)) call ","@example instance_eval_with_args ","Example  procsy ","procsy metadata "," inject ","around_hook block ","(send\n  (send nil :hooks) :inject\n  (ivar :@initial_procsy)) call ","@example instance_exec ","procsy wrap "," hooks inject "," hooks ","(send\n  (send nil :hooks) :reduce\n  (ivar :@initial_procsy)) call "," hooks reduce ","around_hook execute_with "]}," RSpec Core Hooks AroundHookCollection with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Core Hooks AroundHookCollection for":{"type":"method","name":"for","children":[],"call":[" class new with "," class new ","hook options_apply? "," select "," class "," hooks select "," hooks "]}," RSpec Core Hooks GroupHookCollection run":{"type":"method","name":"run","children":[],"call":[" shift run "," shift "," empty? "," hooks shift run "," hooks shift "," hooks "," hooks empty? "]}," RSpec Core Hooks GroupHookCollection for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Core Hooks HookCollection run":{"type":"method","name":"run","children":[],"call":["h run "," each "," empty? "," hooks each "," hooks "]}," RSpec Core Hooks HookCollection with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Core Hooks HookCollection for":{"type":"method","name":"for","children":[],"call":[" class new with "," class new ","hook options_apply? "," select "," class "," hooks select "," hooks "]}," RSpec Core Hooks AroundHookExtension display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks AfterHookExtension display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks AfterHookExtension run":{"type":"method","name":"run","children":[],"call":["example instance_eval_with_rescue "]}," RSpec Core Hooks BeforeHookExtension display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks BeforeHookExtension run":{"type":"method","name":"run","children":[],"call":["example instance_eval "]}," RSpec Core Hooks HookExtension options_apply?":{"type":"method","name":"options_apply?","children":[],"call":["example_or_group all_apply? "," options "]}," RSpec Core Hooks HookExtension with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Core Formatters TextMateFormatter extra_failure_content":{"type":"method","name":"extra_failure_content","children":[],"call":["@snippet_extractor snippet ","SnippetExtractor  new ","backtrace compact! "," backtrace_line ","exception backtrace map ","exception backtrace "," require "]}," RSpec Core Formatters TextMateFormatter format_backtrace_line_for_textmate":{"type":"method","name":"format_backtrace_line_for_textmate","children":[],"call":["File  expand_path ","CGI  escapeHTML sub ","CGI  escapeHTML "]}," RSpec Core Formatters HtmlFormatter current_indentation":{"type":"method","name":"current_indentation","children":[],"call":["(send\n  (send\n    (send\n      (send nil :example_group) :ancestors) :size) :-\n  (int 1)) * "," example_group ancestors size - "," example_group ancestors size "," example_group ancestors "," example_group "]}," RSpec Core Formatters Helpers pluralize":{"type":"method","name":"pluralize","children":[],"call":["count == ","count to_f == ","count to_f "]}," RSpec Core Formatters Helpers format_duration":{"type":"method","name":"format_duration","children":[],"call":[" format_seconds "," pluralize ","duration - ","minutes * ","duration to_i / ","duration to_i ","duration > ","duration < ","(send\n  (send\n    (lvar :duration) :to_i) :/\n  (int 60)) to_i "," format_duration -  ","duration to_i /  * ","(send\n  (send\n    (lvar :duration) :to_i) :/\n  (int 60)) to_i  * "]}," RSpec Core Formatters BaseTextFormatter group_and_ancestors":{"type":"method","name":"group_and_ancestors","children":[],"call":["example example_group ancestors + ","example example_group ","example example_group ancestors ","example example_group ancestors push "]}," RSpec Core Formatters BaseTextFormatter find_shared_group":{"type":"method","name":"find_shared_group","children":[],"call":["group metadata [] ","group metadata "," group_and_ancestors find "," group_and_ancestors "," group_and_parent_groups find "," group_and_parent_groups "]}," RSpec Core Formatters BaseTextFormatter dump_shared_failure_info":{"type":"method","name":"dump_shared_failure_info","children":[],"call":[" output puts ","(begin\n  (send nil :long_padding)) + "," backtrace_line ","group metadata [] [] ","group metadata [] ","group metadata "," long_padding "," output "," configuration backtrace_formatter backtrace_line "," configuration backtrace_formatter "," configuration "]}," RSpec Core Formatters BaseTextFormatter dump_failure_info":{"type":"method","name":"dump_failure_info","children":[],"call":[" dump_shared_failure_info "," find_shared_group "," output puts "," red "," long_padding "," output ","exception message split each ","exception message split ","exception message ","exception class name << ","exception class name ","exception class ","exception class name =~ "," read_failed_line strip "," read_failed_line ","example execution_result [] ","example execution_result ","exception message to_s split each ","exception message to_s split ","exception message to_s "," failure_color ","exception_class_name =~ "," exception_class_name_for ","(begin\n  (send nil :long_padding)) + "," backtrace_line ","group metadata [] [] ","group metadata [] ","group metadata ","example example_group ancestors push each ","example example_group ancestors push ","example example_group ","example example_group ancestors "," find_ find_shared_group  ","example execution_result []  message split each ","example execution_result []  message split ","example execution_result []  message ","example execution_result []  class name << ","example execution_result []  class name ","example execution_result []  class ","example execution_result []  class name =~ ","example execution_result []  message to_s split each ","example execution_result []  message to_s split ","example execution_result []  message to_s ","example execution_result [] _class_name =~ "," exception_class_name_for  =~ "," example execution_result [] _class_name_for ","  exception_class_name_for _for "]}," RSpec Core Formatters BaseTextFormatter dump_failure":{"type":"method","name":"dump_failure","children":[],"call":[" dump_failure_info "," output puts ","example full_description ","index next "," short_padding "," output ","(begin\n  (send nil :long_padding)) + "," backtrace_line ","group metadata [] [] ","group metadata [] ","group metadata "," long_padding ","example example_group ancestors push each ","example example_group ancestors push ","example example_group ","example example_group ancestors "," red ","exception message split each ","exception message split ","exception message "," read_failed_line strip "," read_failed_line ","example execution_result [] ","example execution_result ","exception class name << ","exception class name ","exception class ","exception class name =~ ","example execution_result []  message split each ","example execution_result []  message split ","example execution_result []  message ","example execution_result []  class name << ","example execution_result []  class name ","example execution_result []  class ","example execution_result []  class name =~ "]}," RSpec Core Formatters BaseTextFormatter pending_fixed?":{"type":"method","name":"pending_fixed?","children":[],"call":["example execution_result [] pending_fixed? ","example execution_result [] ","example execution_result "]}," RSpec Core Formatters BaseTextFormatter dump_pending_fixed":{"type":"method","name":"dump_pending_fixed","children":[],"call":[" output puts "," blue ","example metadata [] [] ","example metadata [] ","example metadata "," long_padding "," output ","example full_description ","index next "," short_padding "," fixed_color "]}," RSpec Core Formatters BaseTextFormatter dump_backtrace":{"type":"method","name":"dump_backtrace","children":[],"call":[" output puts "," cyan "," long_padding "," output "," format_backtrace each "," format_backtrace ","example execution_result [] backtrace ","example execution_result [] ","example execution_result ","example metadata "," detail_color "," grey "]}," RSpec Core Formatters BaseTextFormatter long_padding":{"type":"method","name":"long_padding","children":[],"call":[]}," RSpec Core Formatters BaseTextFormatter short_padding":{"type":"method","name":"short_padding","children":[],"call":[]}," RSpec Core Formatters BaseTextFormatter cyan":{"type":"method","name":"cyan","children":[],"call":[" color ","RSpec  deprecate "]}," RSpec Core Formatters BaseTextFormatter seed":{"type":"method","name":"seed","children":[],"call":[" output puts "," output ","notification fully_formatted ","notification seed_used? ","notification seed "]}," RSpec Core Formatters BaseTextFormatter dump_commands_to_rerun_failed_examples":{"type":"method","name":"dump_commands_to_rerun_failed_examples","children":[],"call":[" output puts "," red + + "," cyan ","example full_description "," red + "," red ","RSpec Core Metadata  relative_path ","example location "," output "," failed_examples each "," failed_examples "," failed_examples empty? "," failure_color + + "," detail_color "," failure_color + "," failure_color "," grey ","BaseFormatter  relative_path "]}," RSpec Core Formatters BaseFormatter seed":{"type":"method","name":"seed","children":[],"call":[]}," RSpec Core FilterManager is_standalone_filter?":{"type":"method","name":"is_standalone_filter?","children":[],"call":["filter has_key? ","STANDALONE_FILTERS  any? "," class standalone_filters any? "," class standalone_filters "," class "]}," RSpec Core FilterManager already_set_standalone_filter?":{"type":"method","name":"already_set_standalone_filter?","children":[],"call":[" is_standalone_filter? "," inclusions "]}," RSpec Core FilterManager reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":["orig replace ","updated delete ","updated [] == ","updated [] ","opposite each_pair ","updates last merge ","updates last ","updates last merge  delete ","updates last merge  [] == ","updates last merge  [] "]}," RSpec Core FilterManager replace":{"type":"method","name":"replace","children":[],"call":["orig replace ","updates last ","opposite delete ","updates last each_key "]}," RSpec Core FilterManager merge":{"type":"method","name":"merge","children":[],"call":["opposite delete ","orig merge! each_key ","orig merge! ","updates last "]}," RSpec Core FilterManager unless_standalone":{"type":"method","name":"unless_standalone","children":[],"call":["@inclusions replace ","args last "," is_standalone_filter? "," already_set_standalone_filter? "]}," RSpec Core FilterManager include?":{"type":"method","name":"include?","children":[],"call":["example any_apply? ","@inclusions empty? "," inclusions include_example? "," inclusions "]}," RSpec Core FilterManager include_with_low_priority":{"type":"method","name":"include_with_low_priority","children":[],"call":[" reverse_merge "," unless_standalone "," inclusions add_with_low_priority ","args last "," inclusions "," set_standalone_filter "]}," RSpec Core FilterManager include!":{"type":"method","name":"include!","children":[],"call":[" replace "," unless_standalone "," include_only ","RSpec  deprecate "," set_standalone_filter "]}," RSpec Core FilterManager include":{"type":"method","name":"include","children":[],"call":[" merge "," unless_standalone "," update ","@inclusions replace ","args last "," is_standalone_filter? "," already_set_standalone_filter? "," inclusions add "," inclusions "," set_standalone_filter "]}," RSpec Core FilterManager exclude?":{"type":"method","name":"exclude?","children":[],"call":["example any_apply? ","@exclusions empty? "," exclusions include_example? "," exclusions "]}," RSpec Core FilterManager exclude_with_low_priority":{"type":"method","name":"exclude_with_low_priority","children":[],"call":[" reverse_merge "," exclusions add_with_low_priority ","args last "," exclusions "]}," RSpec Core FilterManager exclude!":{"type":"method","name":"exclude!","children":[],"call":[" replace "," exclude_only ","RSpec  deprecate "]}," RSpec Core FilterManager exclude":{"type":"method","name":"exclude","children":[],"call":[" merge "," update "," exclusions add ","args last "," exclusions "]}," RSpec Core FilterManager prune":{"type":"method","name":"prune","children":[],"call":[" include? "," exclude? ! "," exclude? ","examples select ","base_exclusions include_example? ! ","base_exclusions include_example? ","ExclusionRules  new "," inclusions standalone? "," inclusions ","non_scoped_inclusions include_example? "," exclusions include_example? ! "," exclusions include_example? "," exclusions "," file_scoped_include? ","ex metadata "," inclusions split_file_scoped_rules "," inclusions include_example? "," prune_conditionally_filtered_examples ","examples empty? "," priority_include? ","Hash  new "," inclusions fetch ","other_inclusions include_example? "," inclusions partition_locations "," prune_conditionally_filtered_examples  select ","ExclusionRules  new  include_example? ! ","ExclusionRules  new  include_example? "," prune_conditionally_filtered_ prune_conditionally_filtered_examples  "," prune_conditionally_filtered_examples  empty? "]}," RSpec Core FilterManager empty?":{"type":"method","name":"empty?","children":[],"call":[" exclusions empty_without_conditional_filters? "," exclusions "," inclusions empty? "," inclusions "," exclusions rules_empty? "," exclusions empty? "]}," RSpec Core FilterManager add_location":{"type":"method","name":"add_location","children":[],"call":["@exclusions clear ","@inclusions replace ","locations [] push ","locations [] ","File  expand_path ","h []= ","Hash  new ","@inclusions delete "," include ","filter_locations [] push ","filter_locations [] ","@inclusions clear ","@inclusions [] "," inclusions add_location "," inclusions "," inclusions delete "," replace_filters "," add_path_to_arrays_filter "," inclusions add "]}," RSpec Core FilterManager initialize":{"type":"method","name":"initialize","children":[],"call":[" extend ","DEFAULT_EXCLUSIONS  dup extend ","DEFAULT_EXCLUSIONS  dup "," class default_exclusions dup extend "," class default_exclusions dup "," class default_exclusions "," class ","FilterRules  build ","InclusionFilterHash  new ","ExclusionFilterHash  new "]}," RSpec Core FilterManager BackwardCompatibility _warn_deprecated_key":{"type":"method","name":"_warn_deprecated_key","children":[],"call":["@exclusions []= ","updates delete ","RSpec  warn_deprecation ","updates [] inspect ","updates [] ","key inspect ","RSpec  deprecate "]}," RSpec Core FilterManager BackwardCompatibility _warn_deprecated_keys":{"type":"method","name":"_warn_deprecated_keys","children":[],"call":[" _warn_deprecated_key ","updates has_key? "]}," RSpec Core FilterManager BackwardCompatibility reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":[" _warn_deprecated_keys ","updates last "]}," RSpec Core FilterManager BackwardCompatibility merge":{"type":"method","name":"merge","children":[],"call":[" _warn_deprecated_keys ","updates last "]}," RSpec Core FilterManager Describable empty_without_conditional_filters?":{"type":"method","name":"empty_without_conditional_filters?","children":[],"call":["(send nil :reject) empty? ","RSpec Core FilterManager DEFAULT_EXCLUSIONS  [] == ","RSpec Core FilterManager DEFAULT_EXCLUSIONS  [] "," reject "," rules_empty? ","RSpec  deprecate "]}," RSpec Core FilterManager Describable description":{"type":"method","name":"description","children":[],"call":["(send nil :reject) inspect gsub gsub gsub ","(send nil :reject) inspect gsub gsub ","(send nil :reject) inspect gsub ","(send nil :reject) inspect ","RSpec Core FilterManager DEFAULT_EXCLUSIONS  [] == ","RSpec Core FilterManager DEFAULT_EXCLUSIONS  [] "," reject ","(send nil :reject) inspect gsub gsub gsub gsub ","RSpec Core FilterManager  default_exclusions [] == ","RSpec Core FilterManager  default_exclusions [] ","RSpec Core FilterManager  default_exclusions "]}," RSpec Core Extensions Ordered ordered":{"type":"method","name":"ordered","children":[],"call":["Kernel  rand "," size "," sort_by ","Kernel  srand ","RSpec  configuration seed ","RSpec  configuration ","RSpec  configuration randomize? "," rand "," srand "]}," RSpec Core ExampleGroup any_apply?":{"type":"method","name":"any_apply?","children":[],"call":[]}," RSpec Core ExampleGroup run_after_all_hooks":{"type":"method","name":"run_after_all_hooks","children":[],"call":[]}," RSpec Core ExampleGroup run_after_each_hooks":{"type":"method","name":"run_after_each_hooks","children":[],"call":[]}," RSpec Core ExampleGroup run_before_each_hooks":{"type":"method","name":"run_before_each_hooks","children":[],"call":[]}," RSpec Core ExampleGroup run_around_each_hooks":{"type":"method","name":"run_around_each_hooks","children":[],"call":[]}," RSpec Core ExampleGroup run_before_all_hooks":{"type":"method","name":"run_before_all_hooks","children":[],"call":[]}," RSpec Core ExampleGroup ensure_example_groups_are_configured":{"type":"method","name":"ensure_example_groups_are_configured","children":[],"call":[]}," RSpec Core ExampleGroup find_and_eval_shared":{"type":"method","name":"find_and_eval_shared","children":[],"call":[]}," RSpec Core ExampleGroup block_not_supported":{"type":"method","name":"block_not_supported","children":[],"call":[]}," RSpec Core ExampleGroup include_examples":{"type":"method","name":"include_examples","children":[],"call":[]}," RSpec Core ExampleGroup include_context":{"type":"method","name":"include_context","children":[],"call":[]}," RSpec Core ExampleGroup define_nested_shared_group_method":{"type":"method","name":"define_nested_shared_group_method","children":[],"call":[]}," RSpec Core Example NotPendingExampleFixed pending_fixed?":{"type":"method","name":"pending_fixed?","children":[],"call":[]}," RSpec Core Example with_around_each_hooks":{"type":"method","name":"with_around_each_hooks","children":[],"call":["@example_group_class run_around_each_hooks ","Example  procsy "," metadata "," around_each_hooks empty? "," around_each_hooks "," set_exception ","Procsy  new ","@example_group_class hooks run ","@example_group_class hooks "]}," RSpec Core Example instance_eval_with_args":{"type":"method","name":"instance_eval_with_args","children":[],"call":["@example_group_instance instance_eval_with_args "]}," RSpec Core Example instance_eval_with_rescue":{"type":"method","name":"instance_eval_with_rescue","children":[],"call":["@example_group_instance instance_eval_with_rescue "]}," RSpec Core Example instance_eval":{"type":"method","name":"instance_eval","children":[],"call":["@example_group_instance instance_eval "]}," RSpec Core Example fail_with_exception":{"type":"method","name":"fail_with_exception","children":[],"call":[" finish "," set_exception "," start "]}," RSpec Core Example around_each_hooks":{"type":"method","name":"around_each_hooks","children":[],"call":[" example_group around_each_hooks_for "," example_group "," example_group hooks around_each_hooks_for "," example_group hooks "]}," RSpec Core Example all_apply?":{"type":"method","name":"all_apply?","children":[],"call":["@example_group_class all_apply? ","@metadata all_apply? ","MetadataFilter  all_apply? "," metadata "]}," RSpec Core Example any_apply?":{"type":"method","name":"any_apply?","children":[],"call":[" metadata any_apply? "," metadata ","MetadataFilter  any_apply? "]}," RSpec Core Example Procsy with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Core Example Procsy extended":{"type":"method","name":"extended","children":[{"type":"method","name":"run","children":[],"asgn":[],"call":[]}],"call":[]}," RSpec Core Example procsy":{"type":"method","name":"procsy","children":[],"call":[]}," RSpec Core Example options":{"type":"method","name":"options","children":[],"call":["RSpec  deprecate "]}," RSpec Core Example description":{"type":"method","name":"description","children":[],"call":[" metadata [] "," metadata "," location "," metadata [] to_s empty? "," metadata [] to_s ","RSpec  configuration format_docstrings_block call ","RSpec  configuration format_docstrings_block ","RSpec  configuration "," location_description "," location_ metadata []  "," location_ location_description  "]}," RSpec Core DSL describe":{"type":"method","name":"describe","children":[],"call":["RSpec Core ExampleGroup  describe register ","RSpec Core ExampleGroup  describe "]}," Core DrbOptions add_requires":{"type":"method","name":"add_requires","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," Core DrbOptions add_libs":{"type":"method","name":"add_libs","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," Core DrbOptions add_formatters":{"type":"method","name":"add_formatters","children":[],"call":["argv << << ","pair [] ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," Core DrbOptions add_filter":{"type":"method","name":"add_filter","children":[],"call":["argv << << ","argv << ","tag << ","v is_a? ","k to_s ","name == ","CONDITIONAL_FILTERS  include? ","hash each_pair ","hash empty? ","(sym :if) include? ","k to_s  << "]}," Core DrbOptions add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["argv push ","a << << ","a << ","@submitted_options [] inject ","@submitted_options [] "]}," Core DrbOptions add_full_description":{"type":"method","name":"add_full_description","children":[],"call":["argv << << ","@submitted_options [] source delete ","@submitted_options [] source ","@submitted_options [] ","argv << ","description source delete ","description source ","@submitted_options [] each "]}," Core DrbOptions add_failure_exit_code":{"type":"method","name":"add_failure_exit_code","children":[],"call":["argv << << ","@submitted_options [] to_s ","@submitted_options [] ","argv << "]}," Core DrbOptions options":{"type":"method","name":"options","children":[],"call":["argv + ","@submitted_options [] "," add_requires "," add_libs "," add_formatters "," add_filter ","@filter_manager exclusions ","@filter_manager inclusions "," add_line_numbers "," add_full_description "," add_failure_exit_code ","argv << << ","argv << "]}," Core DrbOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ConfigurationOptions global_options_file":{"type":"method","name":"global_options_file","children":[],"call":[" warn ","File  join ","File  expand_path ","RSpec  warning "," home_options_file_path "," xdg_options_file_if_exists "]}," RSpec Core ConfigurationOptions custom_options_file":{"type":"method","name":"custom_options_file","children":[],"call":[" command_line_options [] "," command_line_options "]}," RSpec Core ConfigurationOptions options_from":{"type":"method","name":"options_from","children":[],"call":["Parser  parse "," args_from_options_file "," parse_args_ignoring_files_or_dirs_to_run ","  args_from_options_file _from_options_file "," parse_ args_from_options_file _ignoring_files_or_dirs_to_run "]}," RSpec Core ConfigurationOptions custom_options":{"type":"method","name":"custom_options","children":[],"call":[" options_from "," custom_options_file "]}," RSpec Core ConfigurationOptions env_options":{"type":"method","name":"env_options","children":[],"call":["Parser  parse! ","Shellwords  split ","ENV  [] ","ENV  [] split ","Parser  parse "," parse_args_ignoring_files_or_dirs_to_run "]}," RSpec Core ConfigurationOptions file_options":{"type":"method","name":"file_options","children":[],"call":[" local_options "," global_options "," custom_options "," custom_options_file "," project_options "," global_options merge "]}," RSpec Core ConfigurationOptions all_configs":{"type":"method","name":"all_configs","children":[],"call":[" file_options << << "," env_options "," file_options << "," command_line_options "," file_options "]}," RSpec Core ConfigurationOptions extract_filters_from":{"type":"method","name":"extract_filters_from","children":[],"call":[" filter_manager exclude ","config delete "," filter_manager ","config has_key? "," filter_manager include ","configs compact each ","configs compact "]}," RSpec Core ConfigurationOptions order":{"type":"method","name":"order","children":[],"call":["keys unshift ","keys delete ","ordered reverse each ","ordered reverse ","OPTIONS_ORDER  reverse each ","OPTIONS_ORDER  reverse ","OPTIONS_ORDER  reverse_each "]}," RSpec Core ConfigurationOptions force?":{"type":"method","name":"force?","children":[],"call":["NON_FORCED_OPTIONS  include? ! ","NON_FORCED_OPTIONS  include? ","UNFORCED_OPTIONS  include? ! ","UNFORCED_OPTIONS  include? "]}," RSpec Core ConfigurationOptions filter_manager":{"type":"method","name":"filter_manager","children":[],"call":["RSpec  configuration filter_manager ","RSpec  configuration ","FilterManager  new "]}," RSpec Core Configuration order_and_seed_from_order":{"type":"method","name":"order_and_seed_from_order","children":[],"call":["order == ","seed to_i ","type to_s split ","type to_s "," order_groups_and_examples "," randomize? ","RSpec  deprecate ","(str \"default\") include? ","order to_s match ","order to_s ","seed to_i  to_i "]}," RSpec Core Configuration set_order_and_seed":{"type":"method","name":"set_order_and_seed","children":[],"call":["hash []= "," order_and_seed_from_order ","hash [] "]}," RSpec Core Configuration order_and_seed_from_seed":{"type":"method","name":"order_and_seed_from_seed","children":[],"call":["value to_i "," order_groups_and_examples "," order_and_seed_from_order "]}," RSpec Core Configuration file_at":{"type":"method","name":"file_at","children":[],"call":["File  new ","FileUtils  mkdir_p ","File  dirname "]}," RSpec Core Configuration raise_if_rspec_1_is_loaded":{"type":"method","name":"raise_if_rspec_1_is_loaded","children":[],"call":[" raise ","* * ","Spec VERSION MAJOR  == "]}," RSpec Core Configuration assert_no_example_groups_defined":{"type":"method","name":"assert_no_example_groups_defined","children":[],"call":[" raise ","MustBeConfiguredBeforeExampleGroupsError  new ","(str \"RSpec's \") + ","RSpec  world example_groups any? ","RSpec  world example_groups ","RSpec  world "," world example_groups any? "," world example_groups "," world "]}," RSpec Core Configuration value_for":{"type":"method","name":"value_for","children":[],"call":["@preferred_options [] ","@preferred_options has_key? ","@preferred_options key? ","@preferred_options fetch "]}," RSpec Core Configuration command":{"type":"method","name":"command","children":[],"call":["$0 split last ","$0 split "]}," RSpec Core Configuration extract_location":{"type":"method","name":"extract_location","children":[],"call":[" filter_manager add_location "," filter_manager ","n to_i ","2 [] split map ","2 [] split ","2 [] ","path =~ ","captures [] [] split map ","captures [] [] split ","captures [] [] ","captures [] ","match captures ","(str \"^(.*?)((?:\\\\:\\\\d+)+)$\") match ","path == "," default_path ","File  expand_path "," filter_manager add_ids ","scoped_ids split ","Example  parse_id ","path split ","captures []  =~ ","match captures  [] [] split map ","match captures  [] [] split ","match captures  [] [] ","match captures  [] ","match match captures  ","(str \"^(.*?)((?:\\:\\d+)+)$\") match  captures ","(str \"^(.*?)((?:\\\\:\\\\d+)+)$\") (str \"^(.*?)((?:\\:\\d+)+)$\") match  ","captures []  == "," default_captures []  ","File  expand_captures []  ","captures []  split "]}," RSpec Core Configuration gather_directories":{"type":"method","name":"gather_directories","children":[],"call":["Dir  [] ","pattern strip ","pattern =~ ","patterns map ","Dir  [] sort ","files sort "," pattern =~ ","Regexp  escape "," pattern "," pattern gsub ","(send\n  (lvar :include_files) :-\n  (lvar :exclude_files)) sort uniq ","(send\n  (lvar :include_files) :-\n  (lvar :exclude_files)) sort ","include_files - "," get_matching_files "," exclude_pattern ","(send\n  (lvar :include_files) :-\n  (lvar :exclude_files)) uniq ","Dir  []  sort ","(send\n  (lvar :include_Dir  [] ) :-\n  (lvar :exclude_Dir  [] )) sort uniq ","(send\n  (lvar :include_files) :-\n  (lvar : get_matching_files )) sort uniq ","(send\n  (lvar : get_matching_files ) :-\n  (lvar :exclude_files)) sort uniq ","(send\n  (lvar :include_Dir  [] ) :-\n  (lvar :exclude_Dir  [] )) sort ","(send\n  (lvar :include_files) :-\n  (lvar : get_matching_files )) sort ","(send\n  (lvar : get_matching_files ) :-\n  (lvar :exclude_files)) sort ","include_Dir  []  - "," get_matching_files  - "," get_matching_Dir  []  ","(send\n  (lvar :include_Dir  [] ) :-\n  (lvar :exclude_Dir  [] )) uniq ","(send\n  (lvar :include_files) :-\n  (lvar : get_matching_files )) uniq ","(send\n  (lvar : get_matching_files ) :-\n  (lvar :exclude_files)) uniq "]}," RSpec Core Configuration get_files_to_run":{"type":"method","name":"get_files_to_run","children":[],"call":["(send\n  (lvar :paths) :map) flatten "," extract_location "," gather_directories ","File  directory? ","paths map "," pattern split "," pattern ","path gsub ","(send\n  (lvar :paths) :map) flatten sort ","(send\n  (lvar :files) :map) flatten "," add_location ","n to_i ","2 [] split map ","2 [] split ","2 [] ","file =~ ","Dir  [] ","pattern strip ","pattern =~ ","patterns map ","files map "," filter_manager add_location "," filter_manager ","(send\n  (const nil :FlatMap) :flat_map\n  (lvar :paths)) sort ","FlatMap  flat_map ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort "," paths_to_check ","intersection empty? ","relative_files & "," spec_files_with_failures to_a "," spec_files_with_failures ","Metadata  relative_path ","File  expand_path "," only_failures? ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq ","(send\n  (lvar :path gsub s) :map) flatten ","path gsub s map ","path gsub  gsub ","(send\n  (lvar :path gsub s) :map) flatten sort ","(send\n  (lvar :(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq ) :map) flatten ","(send\n  (lvar :(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq ) :map) flatten "," pattern split  map ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq  map ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq  map ","(send\n  (const nil :FlatMap) :flat_map\n  (lvar :path gsub s)) sort ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :path gsub s_to_check\n    (lvar :path gsub s))) sort uniq ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :path gsub s_to_check\n    (lvar :path gsub s))) sort "," path gsub s_to_check ","relative_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq  & ","relative_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq  & "," spec_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq _with_failures to_a "," spec_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq _with_failures to_a "," spec_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) uniq _with_failures "," spec_(send\n  (const nil :FlatMap) :flat_map\n  (send nil :paths_to_check\n    (lvar :paths))) sort uniq _with_failures ","Metadata  relative_path gsub  ","File  expand_path gsub  ","(send\n  (const nil :FlatMap) :flat_map\n  (send nil :path gsub s_to_check\n    (lvar :path gsub s))) uniq "]}," RSpec Core Configuration randomize?":{"type":"method","name":"randomize?","children":[],"call":[" order to_s match "," order to_s "," order "," value_for to_s match "," value_for to_s "," value_for ","RSpec  warn_deprecation ","RSpec::Core::Configuration#randomize? is deprecated with no replacement.  + + + ","CallerFilter  first_non_rspec_line ","RSpec::Core::Configuration#randomize? is deprecated with no replacement.  + + ","RSpec::Core::Configuration#randomize? is deprecated with no replacement.  + "]}," RSpec Core Configuration order=":{"type":"method","name":"order=","children":[],"call":[" order_and_seed_from_order ","seed to_i ","order == ","type to_s split ","type to_s "]}," RSpec Core Configuration seed=":{"type":"method","name":"seed=","children":[],"call":[" order_and_seed_from_seed ","seed to_i "]}," RSpec Core Configuration safe_extend":{"type":"method","name":"safe_extend","children":[],"call":["host extend ","(sclass\n  (lvar :host)\n  (self)) included_modules include? ","(sclass\n  (lvar :host)\n  (self)) included_modules ","(sclass\n  (lvar :host)\n  (self)) < ","host singleton_class < ","host singleton_class "]}," RSpec Core Configuration safe_include":{"type":"method","name":"safe_include","children":[],"call":["host send ","host < ","host __send__ ","host included_modules include? ","host included_modules "]}," RSpec Core Configuration exclusion_filter":{"type":"method","name":"exclusion_filter","children":[],"call":[" filter_manager exclusions "," filter_manager "," settings [] "," settings "]}," RSpec Core Configuration exclusion_filter=":{"type":"method","name":"exclusion_filter=","children":[],"call":[" filter_manager exclude! "," build_metadata_hash_from "," filter_manager "," settings []= "," settings "," filter_manager exclude "," filter_manager exclude_only ","Metadata  build_hash_from "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration inclusion_filter":{"type":"method","name":"inclusion_filter","children":[],"call":[" filter_manager inclusions "," filter_manager "," settings [] "," settings "]}," RSpec Core Configuration inclusion_filter=":{"type":"method","name":"inclusion_filter=","children":[],"call":[" filter_manager include! "," build_metadata_hash_from "," filter_manager "," settings []= "," settings "," filter_manager include "," filter_manager include_only ","Metadata  build_hash_from "," build_Metadata  build_hash_from data_hash_from "]}," RSpec Core Configuration formatters":{"type":"method","name":"formatters","children":[],"call":["DeprecatedMutableArrayProxy  new "," formatter_loader formatters "," formatter_loader "," formatter_loader formatters dup "]}," RSpec Core Configuration add_formatter":{"type":"method","name":"add_formatter","children":[],"call":[" formatters << ","formatter_class new "," output "," file_at "," formatters "," raise "," custom_formatter "," built_in_formatter ","String  === ","paths map ","paths << ","paths empty? ","File  new "," formatter_loader add "," formatter_loader "," output_stream "]}," RSpec Core Configuration line_numbers=":{"type":"method","name":"line_numbers=","children":[],"call":[" filter_run ","l to_i ","line_numbers map "]}," RSpec Core Configuration color=":{"type":"method","name":"color=","children":[],"call":[" warn ","ENV  [] "," RbConfig CONFIG  [] =~ "," RbConfig CONFIG  [] ","ENV  [] ! ","RSpec  windows_os? ","RSpec  warning ","RSpec  world windows_os? ","RSpec  world ","RSpec Support OS  windows? "]}," RSpec Core Configuration color":{"type":"method","name":"color","children":[],"call":[" value_for "," output_to_tty? "," color_enabled? ","RSpec  deprecate ","RSpec  warn_deprecation ","(str \"              | Calling `RSpec::Core::Configuration#color` in RSpec 3 will\\n\") gsub ","CallerFilter  first_non_rspec_line "," output_to_tty? ! "," output_stream ","output == ","  output_stream _to_tty? ","  output_stream _to_tty? ! ","  output_stream _stream "," output_stream  == "]}," RSpec Core Configuration expectation_framework=":{"type":"method","name":"expectation_framework=","children":[],"call":[" expect_with "]}," RSpec Core Configuration expectation_frameworks":{"type":"method","name":"expectation_frameworks","children":[],"call":[" expect_with ","@expectation_frameworks empty? "," require "," settings [] "," settings ","Module  new "]}," RSpec Core Configuration mock_framework":{"type":"method","name":"mock_framework","children":[],"call":[" mock_with "," require "," settings [] "," settings ","@mock_framework nil? "]}," RSpec Core Configuration reset":{"type":"method","name":"reset","children":[],"call":["@formatters clear "," reset_reporter "]}," RSpec Core Configuration force":{"type":"method","name":"force","children":[],"call":["@preferred_options merge! "," set_order_and_seed ","hash has_key? "," order_and_seed_from_seed ","hash [] ","hash []= "," warnings= "," value_for "," ordering_manager force "," ordering_manager "," clear_values_derived_from_example_status_persistence_file_path ","hash key? "]}," RSpec Core Configuration define_predicate_for":{"type":"method","name":"define_predicate_for","children":[],"call":[]}," RSpec Core Configuration define_aliases":{"type":"method","name":"define_aliases","children":[],"call":[]}," RSpec Core Configuration deprecate_alias_key":{"type":"method","name":"deprecate_alias_key","children":[],"call":[]}," RSpec Core Configuration define_reader":{"type":"method","name":"define_reader","children":[],"call":[]}," Rspec2 gemfile?":{"type":"method","name":"gemfile?","children":[],"call":["File  exist? "]}," Rspec2 suffix":{"type":"method","name":"suffix","children":[],"call":[" using_bundler? "]}," RSpec windows_os?":{"type":"method","name":"windows_os?","children":[],"call":[]}," RSpec Core SharedExampleGroup key_taken?":{"type":"method","name":"key_taken?","children":[],"call":["RSpec  world shared_example_groups has_key? ","RSpec  world shared_example_groups ","RSpec  world "]}," RSpec Core SharedExampleGroup raise_key_taken":{"type":"method","name":"raise_key_taken","children":[],"call":[" raise "]}," RSpec Core SharedExampleGroup key?":{"type":"method","name":"key?","children":[],"call":["cls === ","(const nil :String) any? "]}," RSpec Core Hooks register_hook":{"type":"method","name":"register_hook","children":[],"call":[" hooks [] [] send ","block extend with ","block extend ","EXTENSIONS  [] "," hooks [] [] "," hooks [] "," hooks "," scope_and_options_from ","HOOK_TYPES  [] new ","HOOK_TYPES  [] ","HOOK_TYPES  [] [] new ","HOOK_TYPES  [] [] "]}," RSpec Core Hooks RegistersGlobals process":{"type":"method","name":"process","children":[],"call":[" [] [] << "," [] [] "," [] ","hook options_apply? ","scope == ","a hooks [] [] include? ","a hooks [] [] ","a hooks [] ","a hooks ","host ancestors any? ","host ancestors ","globals [] [] each ","globals [] [] ","globals [] ","host parent_groups any? ","host parent_groups "]}," RSpec Core Hooks RegistersGlobals register_globals":{"type":"method","name":"register_globals","children":[],"call":[" process ","position == ","(sym :before) each "]}," RSpec Core Hooks HookCollectionAliases included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Core ExampleGroup alias_it_behaves_like_to":{"type":"method","name":"alias_it_behaves_like_to","children":[],"call":["(sclass\n  (self)\n  (self)) define_nested_shared_group_method "]}," RSpec Core ExampleGroup alias_example_to":{"type":"method","name":"alias_example_to","children":[],"call":["(sclass\n  (self)\n  (self)) define_example_method "]}," RSpec Core Example assign_generated_description":{"type":"method","name":"assign_generated_description","children":[],"call":["RSpec Matchers  clear_generated_description "," metadata []= ","RSpec Matchers  generated_description "," metadata "," pending? ! "," pending? "," metadata [] empty? "," metadata [] ","RSpec  configuration expecting_with_rspec? ","RSpec  configuration "," metadata [] << "," set_exception "," generate_description ","RSpec Matchers  clear_generated_RSpec Matchers  generated_description  ","RSpec Matchers  clear_generated_ generate_description  ","RSpec Matchers  generated_RSpec Matchers  generated_description  ","RSpec Matchers  generated_ generate_description  "," generate_RSpec Matchers  generated_description  "," generate_ generate_description  "]}," RSpec Core Configuration alias_it_behaves_like_to":{"type":"method","name":"alias_it_behaves_like_to","children":[],"call":["RSpec Core ExampleGroup  alias_it_behaves_like_to ","RSpec Core ExampleGroup  define_nested_shared_group_method "]}," RSpec const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Core Example verify_mocks":{"type":"method","name":"verify_mocks","children":[],"call":[" set_exception ","@example_group_instance verify_mocks_for_rspec "," execution_result pending_fixed= "," execution_result "," pending? "," mocks_need_verification? "," metadata []= "," metadata "," metadata [] []= "," metadata [] "," metadata [] [] "," execution_result pending_exception= "]}," RSpec Core SharedExampleGroup Registry ensure_block_has_source_location":{"type":"method","name":"ensure_block_has_source_location","children":[],"call":["block extend ","caller_line split "," define_method ","Module  new ","block respond_to? "," split "]}," RSpec Core SharedExampleGroup Registry example_block_for":{"type":"method","name":"example_block_for","children":[],"call":["RSpec  world shared_example_groups [] ","RSpec  world shared_example_groups ","RSpec  world "," shared_example_groups [] [] "," shared_example_groups [] "," shared_example_groups "]}," RSpec Core SharedExampleGroup Registry formatted_location":{"type":"method","name":"formatted_location","children":[],"call":["block source_location join ","block source_location ","block source_location join gsub "]}," RSpec Core SharedExampleGroup Registry warn_if_key_taken":{"type":"method","name":"warn_if_key_taken","children":[],"call":["Kernel  warn ","(str \"            |WARNING: Shared example group '\") gsub "," formatted_location "," example_block_for ","RSpec  warn_with "," shared_example_groups [] [] "," shared_example_groups [] "," shared_example_groups ","(str \"              |WARNING: Shared example group '\") gsub ","(str \"              |WARNING: Your shared example group, '\") gsub ","RSpec  configuration pattern ","RSpec  configuration ","old_definition_location == ","loaded_spec_files include? ","RSpec  configuration loaded_spec_files ","existing_module definition "," formatted_location  == ","RSpec  configuration loaded_spec_files  include? ","RSpec  configuration RSpec  configuration loaded_spec_files  "," shared_example_groups [] []  definition "]}," RSpec Core SharedExampleGroup Registry raise_name_error":{"type":"method","name":"raise_name_error","children":[],"call":[" raise "," name "]}," RSpec Core SharedExampleGroup Registry key?":{"type":"method","name":"key?","children":[],"call":["cls === ","(const nil :String) any? "]}," RSpec Core SharedExampleGroup Registry add_const":{"type":"method","name":"add_const","children":[{"type":"method","name":"created_from_caller","children":[],"asgn":[],"call":[]},{"type":"method","name":"included","children":[],"asgn":[],"call":[]}],"call":["RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world ","Object  const_set ","kls children first metadata []= "," name ","kls children first metadata ","kls children first ","kls children ","kls describe ","@caller_line == ","other_caller last "," caller last "," caller ","Module  new "," raise_name_error ","mod created_from_caller ","Object  const_get ","Object  const_defined? "," add_shared_example_group "," caller last  == ","Object  const_get  created_from_caller "]}," RSpec Core SharedExampleGroup Registry add_group":{"type":"method","name":"add_group","children":[],"call":["RSpec  configuration extend ","RSpec  configuration ","host class_eval ","(sclass\n  (lvar :mod)\n  (self)) send ","Module  new ","args empty? ","RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world "," warn_if_key_taken ","args shift "," key? ","args first "," ensure_block_has_source_location "," caller [] "," caller "," add_shared_example_group ","CallerFilter  first_non_rspec_line ","RSpec  configuration include ","(sclass\n  (lvar :mod)\n  (self)) __send__ ","(sclass\n  (lvar :Module  new )\n  (self)) send "," warn_if_args shift _taken "," args shift ? ","(sclass\n  (lvar :Module  new )\n  (self)) __send__ "]}," RSpec Core RakeTask run_task":{"type":"method","name":"run_task","children":[],"call":[" raise "," fail_on_error "," puts "," failure_message "," system "," spec_command "," has_files? "," abort "," exit ","$? exitstatus ","$stderr puts ","success ! "," with_clean_environment "," spec_ spec_command  "," has_ has_files? ? "," system  ! "]}," RSpec Core RakeTask has_files?":{"type":"method","name":"has_files?","children":[],"call":["empty ! "," puts "," pattern "," files_to_run empty? "," files_to_run "," files_to_run empty?  ! "," files_to_run  files_to_run empty? ? "]}," RSpec Core RakeTask setup_ivars":{"type":"method","name":"setup_ivars","children":[],"call":["args shift "]}," Core Parser convert_deprecated_args":{"type":"method","name":"convert_deprecated_args","children":[],"call":["RSpec  deprecate ","args map! "]}," RSpec Core MockFrameworkAdapter configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec Core Metadata MetadataHash store_computed":{"type":"method","name":"store_computed","children":[],"call":[" store "," build_description_from "," [] "," full_description "," described_class "," file_and_line_number "," location "]}," RSpec Core Metadata MetadataHash fetch":{"type":"method","name":"fetch","children":[],"call":[" store_computed "," has_key? "]}," RSpec Core Formatters JsonFormatter close":{"type":"method","name":"close","children":[],"call":[" output close "," output "," output != ","IO  === "," output write ","@output_hash to_json "]}," RSpec Core Formatters JsonFormatter stop":{"type":"method","name":"stop","children":[],"call":["@output_hash []= ","hash []= ","e backtrace ","e message ","e class name ","e class ","example exception ","(pair\n  (sym :description)\n  (send\n    (lvar :example) :description)) tap ","example metadata [] ","example metadata ","example execution_result [] ","example execution_result ","example full_description ","example description "," examples map "," examples "," format_example tap "," format_example ","notification examples map ","notification examples ","example exception  backtracexample exception  ","example exception  mexample exception ssagexample exception  ","example exception  class namexample exception  ","example exception  class ","example exception xamplexample exception  example exception xcexample exception ption ","(pair\n  (sym :dexample exception scription)\n  (sexample exception nd\n    (lvar :example exception xamplexample exception ) :dexample exception scription)) tap ","example exception xamplexample exception  mexample exception tadata [] ","example exception xamplexample exception  mexample exception tadata ","example exception xamplexample exception  example exception xexample exception cution_rexample exception sult [] ","example exception xamplexample exception  example exception xexample exception cution_rexample exception sult ","example exception xamplexample exception  full_dexample exception scription ","example exception xamplexample exception  dexample exception scription "," example exception xamplexample exception s map "," example exception xamplexample exception s "," format_example exception xamplexample exception  tap "," format_example exception xamplexample exception  ","notification example exception xamplexample exception s map ","notification example exception xamplexample exception s "]}," RSpec Core Formatters JsonFormatter summary_line":{"type":"method","name":"summary_line","children":[],"call":["summary << ","pending_count > ","summary << << "," pluralize "," pluralize  << "," pluralize  << << "]}," RSpec Core Formatters JsonFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" dump_profile ","failure_count == "," profile_examples? ","@output_hash []= "," summary_line "," mute_profile_output? ","summary totals_line ","summary pending_count ","summary failure_count ","summary example_count ","summary duration ","summary summary_line ","summary errors_outside_of_examples_count "]}," RSpec Core Formatters JsonFormatter message":{"type":"method","name":"message","children":[],"call":["(or-asgn\n  (send\n    (ivar :@output_hash) :[]\n    (sym :messages))\n  (array)) << ","@output_hash [] ","notification message "]}," RSpec Core Formatters JsonFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters HtmlPrinter indentation_style":{"type":"method","name":"indentation_style","children":[],"call":["(send\n  (lvar :number_of_parents) :-\n  (int 1)) * ","number_of_parents - "]}," RSpec Core Formatters HtmlPrinter make_example_group_header_yellow":{"type":"method","name":"make_example_group_header_yellow","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter make_example_group_header_red":{"type":"method","name":"make_example_group_header_red","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter make_header_yellow":{"type":"method","name":"make_header_yellow","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter make_header_red":{"type":"method","name":"make_header_red","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter move_progress":{"type":"method","name":"move_progress","children":[],"call":["@output flush ","@output puts "]}," RSpec Core Formatters HtmlPrinter flush":{"type":"method","name":"flush","children":[],"call":["@output flush "]}," RSpec Core Formatters HtmlPrinter print_summary":{"type":"method","name":"print_summary","children":[],"call":["@output puts "," sprintf ","totals << ","pending_count > ","failure_count == ","example_count == ","%.5f % ","String  new ","String  new  << "]}," RSpec Core Formatters HtmlPrinter print_example_pending":{"type":"method","name":"print_example_pending","children":[],"call":["@output puts "," h "]}," RSpec Core Formatters HtmlPrinter print_example_failed":{"type":"method","name":"print_example_failed","children":[],"call":["@output puts ","exception [] "," h "," sprintf ","%.5f % "]}," RSpec Core Formatters HtmlPrinter print_example_passed":{"type":"method","name":"print_example_passed","children":[],"call":["@output puts "," h "," sprintf ","%.5f % "]}," RSpec Core Formatters HtmlPrinter print_example_group_start":{"type":"method","name":"print_example_group_start","children":[],"call":["@output puts "," h "," indentation_style "]}," RSpec Core Formatters HtmlPrinter print_example_group_end":{"type":"method","name":"print_example_group_end","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter print_html_start":{"type":"method","name":"print_html_start","children":[],"call":["@output puts "]}," RSpec Core Formatters HtmlPrinter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core BacktraceFormatter backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["RSpec Core Metadata  relative_path ","RSpec  configuration cleaned_from_backtrace? ","RSpec  configuration ","RSpec  configuration backtrace_cleaner exclude? ","RSpec  configuration backtrace_cleaner ","RSpec  configuration backtrace_formatter exclude? ","RSpec  configuration backtrace_formatter "," exclude? ","Metadata  relative_path "]}," RSpec Core BacktraceFormatter format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["cleansed empty? ","(send\n  (lvar :backtrace) :map) compact "," backtrace_line ","backtrace map ","backtrace [] ","backtrace index ","options [] == ","options [] ","filtered << ","filtered concat ","filtered empty? ","(send\n  (lvar :backtrace) :map) compact tap ","(send\n  (block\n    (send\n      (lvar :backtrace) :take_while)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :!=\n      (const\n        (const\n          (const\n            (const nil :RSpec) :Core) :Runner) :AT_EXIT_HOOK_BACKTRACE_LINE))) :map) compact tap ","(send\n  (block\n    (send\n      (lvar :backtrace) :take_while)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :!=\n      (const\n        (const\n          (const\n            (const nil :RSpec) :Core) :Runner) :AT_EXIT_HOOK_BACKTRACE_LINE))) :map) compact ","(send\n  (lvar :backtrace) :take_while) map ","l != ","backtrace take_while ","backtrace empty? ","(send\n  (lvar :backtrace) :map) compact  empty? ","(send\n  (lvar :backtrace [] ) :map) compact "," backtrace [] _line ","backtrace []  map ","backtrace []  [] ","backtrace []  index ","(send\n  (lvar :backtrace [] ) :map) compact tap ","(send\n  (block\n    (send\n      (lvar :backtrace [] ) :take_while)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :!=\n      (const\n        (const\n          (const\n            (const nil :RSpec) :Core) :Runner) :AT_EXIT_HOOK_BACKTRACE_LINE))) :map) compact tap ","(send\n  (block\n    (send\n      (lvar :backtrace [] ) :take_while)\n    (args\n      (arg :l))\n    (send\n      (lvar :l) :!=\n      (const\n        (const\n          (const\n            (const nil :RSpec) :Core) :Runner) :AT_EXIT_HOOK_BACKTRACE_LINE))) :map) compact ","(send\n  (lvar :backtrace [] ) :take_while) map ","backtrace []  take_while ","backtrace []  empty? "]}," RSpec Core Formatters BaseTextFormatter group_and_parent_groups":{"type":"method","name":"group_and_parent_groups","children":[],"call":["example example_group parent_groups + ","example example_group ","example example_group parent_groups "]}," RSpec Core Extensions Ordered Examples ordered":{"type":"method","name":"ordered","children":[],"call":["RSpec  configuration example_ordering_block call ","RSpec  configuration example_ordering_block ","RSpec  configuration "]}," RSpec Core Extensions Ordered ExampleGroups ordered":{"type":"method","name":"ordered","children":[],"call":["RSpec  configuration group_ordering_block call ","RSpec  configuration group_ordering_block ","RSpec  configuration "]}," RSpec Core ExampleGroup parent_groups":{"type":"method","name":"parent_groups","children":[],"call":[]}," RSpec Core ExampleGroup description":{"type":"method","name":"description","children":[],"call":["RSpec  configuration format_docstrings_block call ","RSpec  configuration format_docstrings_block ","RSpec  configuration "," metadata [] [] "," metadata [] "," metadata "]}," RSpec Core ConfigurationOptions project_options_file":{"type":"method","name":"project_options_file","children":[],"call":[]}," RSpec Core ConfigurationOptions project_options":{"type":"method","name":"project_options","children":[],"call":[" options_from "," project_options_file "]}," RSpec Core Configuration built_in_orderer?":{"type":"method","name":"built_in_orderer?","children":[],"call":["(const nil :DEFAULT_ORDERING) include? "]}," RSpec Core Configuration order_groups_and_examples":{"type":"method","name":"order_groups_and_examples","children":[],"call":[" order_examples "," order_groups "]}," RSpec Core Configuration group_ordering_block":{"type":"method","name":"group_ordering_block","children":[],"call":[]}," RSpec Core Configuration order_groups":{"type":"method","name":"order_groups","children":[],"call":[" built_in_orderer? ","RSpec  deprecate "]}," RSpec Core Configuration example_ordering_block":{"type":"method","name":"example_ordering_block","children":[],"call":[]}," RSpec Core Configuration order_examples":{"type":"method","name":"order_examples","children":[],"call":[" built_in_orderer? ","RSpec  deprecate "]}," RSpec Core Configuration format_docstrings_block":{"type":"method","name":"format_docstrings_block","children":[],"call":[]}," RSpec Core Configuration format_docstrings":{"type":"method","name":"format_docstrings","children":[],"call":[" block_given? "]}," RSpec Core RakeTask shellescape":{"type":"method","name":"shellescape","children":[],"call":["string shellescape ","string gsub gsub ","string gsub "]}," RSpec Core Metadata MetadataHash method_description_after_module?":{"type":"method","name":"method_description_after_module?","children":[],"call":["child_part =~ ","parent_part is_a? "]}," RSpec Core MemoizedHelpers get_constant_or_yield":{"type":"method","name":"get_constant_or_yield","children":[],"call":[]}," RSpec Core MemoizedHelpers module_for":{"type":"method","name":"module_for","children":[],"call":[]}," RSpec Core MemoizedHelpers ClassMethods its":{"type":"method","name":"its","children":[{"type":"method","name":"should","children":[],"asgn":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher "," __its_subject "]},{"type":"method","name":"should_not","children":[],"asgn":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," __its_subject "]}],"call":[" example ","RSpec Expectations NegativeExpectationHandler  handle_matcher "," __its_subject ","RSpec Expectations PositiveExpectationHandler  handle_matcher ","inner_subject send ","attribute_chain inject "," subject ","attribute to_s split ","attribute to_s "," let "," subject [] ","Array  === "," describe ","RSpec  deprecate ","attribute to_s split  inject "]}," RSpec Core MemoizedHelpers ClassMethods subject!":{"type":"method","name":"subject!","children":[],"call":[" subject "," before "]}," RSpec Core MemoizedHelpers ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[" alias_method "," let "," raise "," NamedSubjectPreventSuper  define_method "," __send__ "," subject "," NamedSubjectPreventSuper  send "," NamedSubjectPreventSuper  __send__ "]}," RSpec Core MemoizedHelpers ClassMethods let!":{"type":"method","name":"let!","children":[],"call":[" __send__ "," before "," let "]}," RSpec Core MemoizedHelpers ClassMethods let":{"type":"method","name":"let","children":[],"call":[" __memoized []= "," __memoized "," __memoized fetch "," define_method "," RSpec Core MemoizedHelpers  module_for define_method "," RSpec Core MemoizedHelpers  module_for ","MemoizedHelpers  module_for define_method ","MemoizedHelpers  module_for ","MemoizedHelpers  module_for send "," raise ","block nil? ","RSpec  current_example ","block arity == ","block arity ","MemoizedHelpers  module_for __send__ "," __memoized fetch_or_store "," remove_method "," instance_methods include? "," instance_methods ","our_module __send__ ","our_module instance_methods include? ","our_module instance_methods ","initialize == ","(sym :initialize) include? ","name to_sym ","MemoizedHelpers  module_for  __send__ ","MemoizedHelpers  module_for  instance_methods include? ","MemoizedHelpers  module_for  instance_methods "]}," RSpec Core MemoizedHelpers included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Core MemoizedHelpers __memoized":{"type":"method","name":"__memoized","children":[],"call":[]}," RSpec Core MemoizedHelpers should_not":{"type":"method","name":"should_not","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," subject "," enforce_value_expectation "]}," RSpec Core MemoizedHelpers should":{"type":"method","name":"should","children":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher "," subject "," enforce_value_expectation "]}," RSpec Core MemoizedHelpers subject":{"type":"method","name":"subject","children":[],"call":[" raise "," __memoized []= ","described new ","Class  === "," class description "," class "," described_class "," __memoized "," __memoized fetch "," class metadata fetch first "," class metadata fetch "," class metadata "," __memoized fetch_or_store "]}," RSpec Core Formatters BaseTextFormatter exception_class_name_for":{"type":"method","name":"exception_class_name_for","children":[],"call":["name == ","exception class name to_s ","exception class name ","exception class ","exception class name to_s  == ","exception class exception class name to_s  to_s ","exception class exception class name to_s  "]}," RSpec Core Formatters BaseTextFormatter default_color":{"type":"method","name":"default_color","children":[],"call":[" color ","RSpec  configuration default_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter detail_color":{"type":"method","name":"detail_color","children":[],"call":[" color ","RSpec  configuration detail_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter fixed_color":{"type":"method","name":"fixed_color","children":[],"call":[" color ","RSpec  configuration fixed_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter pending_color":{"type":"method","name":"pending_color","children":[],"call":[" color ","RSpec  configuration pending_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter success_color":{"type":"method","name":"success_color","children":[],"call":[" color ","RSpec  configuration success_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter failure_color":{"type":"method","name":"failure_color","children":[],"call":[" color ","RSpec  configuration failure_color ","RSpec  configuration "]}," RSpec Core Formatters BaseTextFormatter colorize":{"type":"method","name":"colorize","children":[],"call":[" color_code_for ","ConsoleCodes  wrap "]}," RSpec Core Formatters BaseTextFormatter color_code_for":{"type":"method","name":"color_code_for","children":[],"call":[" color_code_for ","VT100_COLORS  fetch ","VT100_COLOR_CODES  include? ","ConsoleCodes  console_code_for "]}," RSpec Core MemoizedHelpers BeforeAllMemoizedHash preserve_accessed_lets":{"type":"method","name":"preserve_accessed_lets","children":[],"call":[" define_method ","hash each ","@example_group_instance class class_eval ","@example_group_instance class "," undef_method "," method_defined? "]}," RSpec Core MemoizedHelpers BeforeAllMemoizedHash []=":{"type":"method","name":"[]=","children":[],"call":["@hash []= "]}," RSpec Core MemoizedHelpers BeforeAllMemoizedHash fetch":{"type":"method","name":"fetch","children":[],"call":["@hash fetch "," RSpec  warn_deprecation "," caller [] "," caller ","key == "]}," RSpec Core MemoizedHelpers BeforeAllMemoizedHash isolate_for_before_all":{"type":"method","name":"isolate_for_before_all","children":[],"call":[]}," RSpec Core MemoizedHelpers BeforeAllMemoizedHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Hooks AroundHook display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks AfterHook display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks AfterHook run":{"type":"method","name":"run","children":[],"call":["example instance_eval_with_rescue "," block ","example instance_exec_with_rescue ","example set_exception ","example instance_exec "]}," RSpec Core Hooks BeforeHook display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks BeforeHook run":{"type":"method","name":"run","children":[],"call":["example instance_eval "," block ","example instance_eval_with_args ","example instance_exec "]}," RSpec configuration=":{"type":"method","name":"configuration=","children":[],"call":[]}," RSpec world=":{"type":"method","name":"world=","children":[],"call":[]}," RSpec Core SharedExampleGroup Registry add_shared_example_group":{"type":"method","name":"add_shared_example_group","children":[],"call":[" shared_example_groups [] []= "," shared_example_groups [] "," shared_example_groups "]}," RSpec Core SharedExampleGroup Registry clear":{"type":"method","name":"clear","children":[],"call":["@shared_example_groups clear "," shared_example_groups clear "," shared_example_groups "]}," RSpec Core SharedExampleGroup Registry shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":["hash []= ","Hash  new "]}," RSpec Core SharedExampleGroup Registry shared_example_groups_for":{"type":"method","name":"shared_example_groups_for","children":[],"call":["Collection  new "," shared_example_groups "]}," RSpec Core SharedExampleGroup TopLevelDSL shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":["Registry  shared_example_groups_for ","SharedExampleGroup  registry shared_example_groups_for ","SharedExampleGroup  registry "]}," RSpec Core SharedExampleGroup TopLevelDSL share_as":{"type":"method","name":"share_as","children":[],"call":["Registry  add_const ","RSpec  deprecate ","SharedExampleGroup  registry add_const ","SharedExampleGroup  registry "]}," RSpec Core SharedExampleGroup TopLevelDSL shared_examples":{"type":"method","name":"shared_examples","children":[],"call":["Registry  add_group ","SharedExampleGroup  registry add_group ","SharedExampleGroup  registry "]}," RSpec Core SharedExampleGroup shared_example_groups":{"type":"method","name":"shared_example_groups","children":[],"call":["Registry  shared_example_groups_for "," ancestors [] "," ancestors ","SharedExampleGroup  registry shared_example_groups_for ","SharedExampleGroup  registry "]}," RSpec Core SharedExampleGroup Collection warn_deprecation_and_fetch_anyway":{"type":"method","name":"warn_deprecation_and_fetch_anyway","children":[],"call":["RSpec  warn_deprecation ","(str \"                Accessing shared_examples defined across contexts is deprecated.\\n\") gsub "," caller [] "," caller "," fetch_anyway ","line include? ! ","line include? "," caller find ","CallerFilter  first_non_rspec_line ","(str \"                Accessing shared_ fetch_anyway s defined across contexts is deprecated.\\n\") gsub "]}," RSpec Core SharedExampleGroup Collection fetch_anyway":{"type":"method","name":"fetch_anyway","children":[],"call":["@examples values inject [] ","@examples values inject ","@examples values "]}," RSpec Core SharedExampleGroup Collection source_for":{"type":"method","name":"source_for","children":[],"call":["@examples [] has_key? ","@examples [] ","@sources reverse find ","@sources reverse "]}," RSpec Core SharedExampleGroup Collection fetch_examples":{"type":"method","name":"fetch_examples","children":[],"call":["@examples [] [] ","@examples [] "," source_for "]}," RSpec Core SharedExampleGroup Collection []":{"type":"method","name":"[]","children":[],"call":[" warn_deprecation_and_fetch_anyway "," fetch_examples "]}," RSpec Core SharedExampleGroup Collection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core SharedContext record":{"type":"method","name":"record","children":[],"call":[]}," RSpec Core SharedContext playback_onto":{"type":"method","name":"playback_onto","children":[],"call":["group __send__ "," block "," args "," method_name "]}," RSpec Core SharedContext __shared_context_recordings":{"type":"method","name":"__shared_context_recordings","children":[],"call":[]}," Core Reporter deprecation":{"type":"method","name":"deprecation","children":[],"call":[" notify ","Notifications DeprecationNotification  from_hash "]}," Core Reporter registered_listeners":{"type":"method","name":"registered_listeners","children":[],"call":["@listeners [] ","@listeners [] to_a "]}," Core Reporter register_listener":{"type":"method","name":"register_listener","children":[],"call":["@listeners [] << ","@listeners [] ","notification to_sym ","listener respond_to? ","notifications each "," understands "]}," RSpec Core MemoizedHelpers define_helpers_on":{"type":"method","name":"define_helpers_on","children":[],"call":[]}," RSpec Core Formatters DeprecationFormatter deprecation_summary":{"type":"method","name":"deprecation_summary","children":[],"call":["@summary_stream puts ","@deprecation_stream path ","@summary_stream print ","@count > ","File  === "," printer deprecation_summary "," printer "]}," RSpec Core Formatters DeprecationFormatter deprecation":{"type":"method","name":"deprecation","children":[],"call":["@deprecation_stream puts ","@deprecation_stream print ","data [] ","File  === ","@seen_deprecations << "," printer print_deprecation_message "," printer ","@seen_deprecations include? "]}," RSpec Core Formatters DeprecationFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["data fetch ","data [] "," deprecation_type_for ","Set  new ","data deprecated ","data message "]}," RSpec Core Formatters BaseTextFormatter dump_profile_slowest_example_groups":{"type":"method","name":"dump_profile_slowest_example_groups","children":[],"call":[" output puts "," detail_color "," output ","hash [] "," pluralize "," format_seconds "," failure_color ","sorted_groups each ","sorted_groups size ","(send\n  (lvar :example_groups) :sort_by) first ","hash [] -@ ","example_groups sort_by ","hash []= ","hash [] to_f / ","hash [] to_f ","example_groups each ","example_groups keys length <= ","example_groups keys length ","example_groups keys ","example_groups [] []= ","example example_group top_level_description ","example example_group ","example_groups [] ","example_groups [] has_key? ","example_groups [] [] ","example execution_result [] ","example execution_result ","Hash  new ","example example_group parent_groups last metadata [] [] ","example example_group parent_groups last metadata [] ","example example_group parent_groups last metadata ","example example_group parent_groups last ","example example_group parent_groups "," examples each "," examples ","RSpec  configuration profile_examples ","RSpec  configuration "," bold "," slowest_groups each "," slowest_groups ","sorted_groups empty? ","(send\n  (lvar :example_groups) :sort_by) first  each "," slowest_groups  each ","(send\n  (lvar :example_groups) :sort_by) first  size "," slowest_groups  size ","(send\n  (lvar :example_groups) :sort_by) first  empty? "," slowest_groups  empty? "]}," RSpec Core Formatters BaseTextFormatter dump_profile_slowest_examples":{"type":"method","name":"dump_profile_slowest_examples","children":[],"call":[" output puts "," detail_color "," format_caller ","example location "," failure_color "," format_seconds ","example execution_result [] ","example execution_result "," output ","example full_description ","sorted_examples each ","sorted_examples size ","%.1f % ","(if\n  (send\n    (lvar :time_taken) :nan?)\n  (float 0.0)\n  (lvar :time_taken)) * ","time_taken nan? ","slows / ","i + ","e execution_result [] ","e execution_result ","exs inject ","(send nil :examples) map "," examples ","(send\n  (send nil :examples) :sort_by) reverse first ","(send\n  (send nil :examples) :sort_by) reverse "," examples sort_by ","RSpec  configuration profile_examples ","RSpec  configuration "," bold ","sorted_examples [] each ","sorted_examples [] ","sorted_examples [] size ","sorted_examples [] / "," slowest_examples ","(send\n  (send nil :examples) :sort_by) reverse first  each "," slowest_examples  each ","(send\n  (send nil :examples) :sort_by) reverse first  size "," slowest_examples  size ","(if\n  (send\n    (lvar :slows / ) :nan?)\n  (float 0.0)\n  (lvar :slows / )) * ","(if\n  (send\n    (lvar :sorted_examples [] / ) :nan?)\n  (float 0.0)\n  (lvar :sorted_examples [] / )) * ","slows /  nan? ","sorted_examples [] /  nan? ","(send\n  (send nil :examples) :sort_by) reverse first  [] each "," slowest_examples  [] each ","(send\n  (send nil :examples) :sort_by) reverse first  [] "," slowest_examples  [] ","(send\n  (send nil :examples) :sort_by) reverse first  [] size "," slowest_examples  [] size ","(send\n  (send nil :examples) :sort_by) reverse first  [] / "," slowest_examples  [] / "]}," RSpec Core Formatters BaseFormatter mute_profile_output?":{"type":"method","name":"mute_profile_output?","children":[],"call":["failure_count != "," fail_fast? "," profile_examples? ! "," profile_examples? "]}," RSpec Core Formatters BaseFormatter fail_fast?":{"type":"method","name":"fail_fast?","children":[],"call":[" configuration fail_fast "," configuration "]}," RSpec Core Deprecation warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":["RSpec  configuration reporter deprecation ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpec Core Deprecation deprecate":{"type":"method","name":"deprecate","children":[],"call":["RSpec  configuration reporter deprecation ","(pair\n  (sym :deprecated)\n  (lvar :deprecated)) merge "," caller [] "," caller ","RSpec  configuration reporter ","RSpec  configuration ","Hash  === ","data merge ","line !~ "," caller find ","CallerFilter  first_non_rspec_line "]}," RSpec Core ConfigurationOptions load_formatters_into":{"type":"method","name":"load_formatters_into","children":[],"call":["config add_formatter "," options [] each "," options [] "," options "]}," RSpec Core ConfigurationOptions process_options_into":{"type":"method","name":"process_options_into","children":[],"call":["config send ","opts [] ","config force "," force? "," order each "," order ","opts keys ","UNPROCESSABLE_OPTIONS  include? "," options reject "," options ","config __send__ "]}," RSpec Core Configuration warnings":{"type":"method","name":"warnings","children":[],"call":[" warnings? ","RSpec  deprecate "]}," RSpec Core Configuration warnings=":{"type":"method","name":"warnings=","children":[],"call":["value ! ! ","value ! "]}," RSpec Core Configuration setup_load_path_and_require":{"type":"method","name":"setup_load_path_and_require","children":[],"call":[" require ","paths each ","RSpec Core RubyProject  add_to_load_path ","File  directory? ","(str \"lib\") select "," default_path "]}," RSpec Core Configuration full_description":{"type":"method","name":"full_description","children":[],"call":[" filter fetch "," filter "]}," RSpec Core Configuration line_numbers":{"type":"method","name":"line_numbers","children":[],"call":[" filter fetch "," filter "]}," RSpec Core Configuration debug?":{"type":"method","name":"debug?","children":[],"call":["(const nil :Debugger) ! ! ","(const nil :Debugger) ! ","RSpec  deprecate "]}," RSpec Core Configuration full_backtrace?":{"type":"method","name":"full_backtrace?","children":[],"call":["@backtrace_cleaner full_backtrace? ","@backtrace_formatter full_backtrace? "]}," RSpec Core Configuration backtrace_exclusion_patterns=":{"type":"method","name":"backtrace_exclusion_patterns=","children":[],"call":["@backtrace_cleaner exclusion_patterns= ","@backtrace_formatter exclusion_patterns= "]}," RSpec Core Configuration backtrace_exclusion_patterns":{"type":"method","name":"backtrace_exclusion_patterns","children":[],"call":["@backtrace_cleaner exclusion_patterns ","@backtrace_formatter exclusion_patterns "]}," RSpec Core Configuration backtrace_inclusion_patterns=":{"type":"method","name":"backtrace_inclusion_patterns=","children":[],"call":["@backtrace_cleaner inclusion_patterns= ","@backtrace_formatter inclusion_patterns= "]}," RSpec Core Configuration backtrace_inclusion_patterns":{"type":"method","name":"backtrace_inclusion_patterns","children":[],"call":["@backtrace_cleaner inclusion_patterns ","@backtrace_formatter inclusion_patterns "]}," RSpec Core Configuration backtrace_clean_patterns=":{"type":"method","name":"backtrace_clean_patterns=","children":[],"call":["@backtrace_cleaner exclusion_patterns= ","RSpec  deprecate ","@backtrace_formatter exclusion_patterns= "]}," RSpec Core BacktraceCleaner matches_an_exclusion_pattern?":{"type":"method","name":"matches_an_exclusion_pattern?","children":[],"call":["line =~ ","@exclusion_patterns any? "]}," RSpec Core BacktraceCleaner full_backtrace?":{"type":"method","name":"full_backtrace?","children":[],"call":["@exclusion_patterns empty? "]}," RSpec Core BacktraceCleaner full_backtrace=":{"type":"method","name":"full_backtrace=","children":[],"call":["DEFAULT_EXCLUSION_PATTERNS  dup "]}," RSpec Core BacktraceCleaner exclude?":{"type":"method","name":"exclude?","children":[],"call":[" matches_an_exclusion_pattern? ","line =~ ","@inclusion_patterns none? "]}," RSpec Core BacktraceCleaner initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  new ","Dir  getwd "," matches_an_exclusion_pattern? ","inclusion_patterns nil? "]}," Core Reporter understands":{"type":"method","name":"understands","children":[],"call":["listener method to_s include ! ","listener method to_s include ","listener method to_s ","listener method ","listener respond_to? ","listener method owner != ","listener method owner "]}," RSpec Core Formatters DeprecationFormatter start":{"type":"method","name":"start","children":[],"call":[]}," RSpec Core RakeTask deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","RSpec  deprecate ","RSpec  respond_to? "]}," RSpec Core SharedExampleGroup registry":{"type":"method","name":"registry","children":[],"call":[]}," RSpec Core Hooks AfterAllHook display_name":{"type":"method","name":"display_name","children":[],"call":[]}," RSpec Core Hooks AfterAllHook run":{"type":"method","name":"run","children":[],"call":["RSpec  configuration reporter message ","e backtrace first ","e backtrace ","e message ","e class ","RSpec  configuration reporter ","RSpec  configuration ","example instance_exec "," block "]}," RSpec Core Formatters TextMateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["NonEscapingHtmlPrinter  new "]}," RSpec Core Formatters TextMateFormatter NonEscapingHtmlPrinter print_example_failed":{"type":"method","name":"print_example_failed","children":[],"call":[]}," RSpec Core Metadata LocationKeys first_caller_from_outside_rspec":{"type":"method","name":"first_caller_from_outside_rspec","children":[],"call":["l !~ "," [] detect "," [] "]}," RSpec Core Metadata LocationKeys file_and_line_number":{"type":"method","name":"file_and_line_number","children":[],"call":["2 to_i "," first_caller_from_outside_rspec =~ "," first_caller_from_outside_rspec "]}," RSpec Core Metadata LocationKeys location":{"type":"method","name":"location","children":[],"call":[" [] "]}," RSpec Core Metadata LocationKeys []":{"type":"method","name":"[]","children":[],"call":[" [] "," store "," file_and_line_number "," location "," has_key? "]}," RSpec Core Formatters BaseTextFormatter dump_pending_example_fixed":{"type":"method","name":"dump_pending_example_fixed","children":[],"call":[" output puts "," blue ","example metadata [] [] ","example metadata [] ","example metadata "," long_padding "," output ","example full_description ","index next "," short_padding ","RSpec Core PendingExampleFixedError  === ","example execution_result [] ","example execution_result ","example execution_result [] pending_fixed? "]}," Kernel method_missing":{"type":"method","name":"method_missing","children":[],"call":[" warn ","* * ","l !~ "," caller detect "," caller "," debugger "," require ","m to_s == ","m to_s "]}," RSpec Core Example Procsy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ExampleGroup around_hooks_for":{"type":"method","name":"around_hooks_for","children":[],"call":[]}," RSpec Core Example apply?":{"type":"method","name":"apply?","children":[],"call":["@example_group_class apply? ","@metadata apply? "]}," RSpec Core CommandLineConfiguration Autotest remove_autotest_dir_if_present":{"type":"method","name":"remove_autotest_dir_if_present","children":[],"call":["FileUtils  rm_rf "," discover_file_path "," exit "," gets !~ "," gets "," print "," discover_file_exists? "]}," RSpec Core CommandLineConfiguration Autotest create_dot_rspec_file":{"type":"method","name":"create_dot_rspec_file","children":[],"call":[" puts ","FileUtils  touch ","File  exist? "]}," RSpec Core Hooks HookCollection without_hooks_for":{"type":"method","name":"without_hooks_for","children":[],"call":[" class new ","hook options_apply? "," reject "," class "]}," Rspec2 rspec_wants_bundler?":{"type":"method","name":"rspec_wants_bundler?","children":[],"call":[" skip_bundler? ! "," skip_bundler? "," gemfile? "]}," Rspec2 autotest_wants_bundler?":{"type":"method","name":"autotest_wants_bundler?","children":[],"call":[" autotest_prefix =~ "," autotest_prefix "]}," Rspec2 prefix":{"type":"method","name":"prefix","children":[],"call":[" autotest_prefix "," rspec_prefix ","(begin\n  (send nil :rspec_prefix)) gsub "," skip_bundler? "]}," Rspec2 rspec_prefix":{"type":"method","name":"rspec_prefix","children":[],"call":[" autotest_wants_bundler? ! "," autotest_wants_bundler? "," rspec_wants_bundler? "]}," Rspec2 warn_about_bundler":{"type":"method","name":"warn_about_bundler","children":[],"call":["RSpec  warn_deprecation "]}," RSpec warn_about_deprecated_configure":{"type":"method","name":"warn_about_deprecated_configure","children":[],"call":[]}," RSpec Core World Describable empty?":{"type":"method","name":"empty?","children":[],"call":[]}," RSpec Core World Describable reject":{"type":"method","name":"reject","children":[],"call":[]}," RSpec Core World Describable empty_without_conditional_filters?":{"type":"method","name":"empty_without_conditional_filters?","children":[],"call":["(send nil :reject) empty? ","RSpec Core Configuration CONDITIONAL_FILTERS  [] == ","RSpec Core Configuration CONDITIONAL_FILTERS  [] "," reject "]}," RSpec Core World Describable description":{"type":"method","name":"description","children":[],"call":["(send nil :reject) inspect gsub gsub gsub ","(send nil :reject) inspect gsub gsub ","(send nil :reject) inspect gsub ","(send nil :reject) inspect ","RSpec Core Configuration CONDITIONAL_FILTERS  [] == ","RSpec Core Configuration CONDITIONAL_FILTERS  [] "," reject "]}," RSpec Core SharedExampleGroup shared_context":{"type":"method","name":"shared_context","children":[],"call":["RSpec  configuration extend ","RSpec  configuration ","host class_eval ","(sclass\n  (lvar :mod)\n  (self)) send ","Module  new ","args empty? ","RSpec  world shared_example_groups []= ","RSpec  world shared_example_groups ","RSpec  world "," ensure_shared_example_group_name_not_taken ","args shift ","Symbol  === ","args first ","String  === ","cls === ","(const nil :String) any? ","(sclass\n  (lvar :Module  new )\n  (self)) send "," ensure_shared_example_group_args shift _not_taken "]}," RSpec Core Formatters BaseFormatter relative_path":{"type":"method","name":"relative_path","children":[],"call":[]}," RSpec Core Hooks Hook display_name":{"type":"method","name":"display_name","children":[],"call":[" class name split last gsub downcase << "," class name split last gsub downcase "," class name split last gsub "," class name split last "," class name split "," class name "," class "]}," RSpec Core Metadata GroupMetadataHash ancestors":{"type":"method","name":"ancestors","children":[],"call":["group [] ","groups << ","group has_key? ","group []  [] ","group [] s << ","group []  has_key? "]}," RSpec Core Metadata GroupMetadataHash full_description_for":{"type":"method","name":"full_description_for","children":[],"call":[" build_description_from ","(send\n  (send\n    (send nil :ancestors) :reverse) :map) flatten ","a [] ","a has_key? "," ancestors reverse map "," ancestors reverse "," ancestors "]}," RSpec Core Metadata GroupMetadataHash described_class_for":{"type":"method","name":"described_class_for","children":[],"call":["Symbol  === ","String  === ","g [] first ","g [] "," ancestors reverse each "," ancestors reverse "," ancestors ","g has_key? "," ancestors each "]}," RSpec Core Metadata MetadataHash full_description_for":{"type":"method","name":"full_description_for","children":[],"call":[" build_description_from ","m [] ","m [] [] "]}," RSpec Core Metadata MetadataHash described_class_for":{"type":"method","name":"described_class_for","children":[],"call":["m [] [] ","m [] "]}," RSpec Core ExampleGroup find_shared":{"type":"method","name":"find_shared","children":[],"call":[]}," RSpec Core Configuration add_location":{"type":"method","name":"add_location","children":[],"call":[" filter_run ","(or-asgn\n  (send\n    (lvar :filter_locations) :[]\n    (send\n      (const nil :File) :expand_path\n      (lvar :file_path)))\n  (array)) push ","filter_locations [] ","File  expand_path ","(or\n  (send\n    (self) :filter)\n  (hash)) [] "," filter "]}," RSpec Core FilterManager update":{"type":"method","name":"update","children":[],"call":["opposite delete ","orig merge! each_key ","orig merge! ","updates last ","orig replace ","updated delete ","opposite each_key ","updates last merge ","updates [] == ","updates [] ","updates length == ","updates length ","updates last merge  delete ","updates last  delete "]}," RSpec Core FilterManager BackwardCompatibility update":{"type":"method","name":"update","children":[],"call":["@exclusions []= ","updates last delete ","updates last ","RSpec  warn_deprecation ","updates last [] inspect ","updates last [] ","updates last has_key? "]}," DrbOptions add_requires":{"type":"method","name":"add_requires","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," DrbOptions add_libs":{"type":"method","name":"add_libs","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," DrbOptions add_formatters":{"type":"method","name":"add_formatters","children":[],"call":["argv << << ","pair [] ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," DrbOptions add_filter":{"type":"method","name":"add_filter","children":[],"call":["argv << << ","argv << ","tag << ","v to_s ","v is_a? ","k to_s ","name == ","(sym :if) include? ","hash each_pair ","hash empty? ","k to_s  << "]}," DrbOptions add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["argv push ","a << << ","a << ","@submitted_options [] inject ","@submitted_options [] "]}," DrbOptions add_full_description":{"type":"method","name":"add_full_description","children":[],"call":["argv << << ","@submitted_options [] source delete ","@submitted_options [] source ","@submitted_options [] ","argv << "]}," DrbOptions options":{"type":"method","name":"options","children":[],"call":["argv + ","@submitted_options [] "," add_requires "," add_libs "," add_formatters "," add_filter ","@filter_manager exclusions ","@filter_manager inclusions "," add_line_numbers "," add_full_description ","argv << << ","argv << "]}," DrbOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Configuration force_exclude":{"type":"method","name":"force_exclude","children":[],"call":[" filter_manager exclude "," filter_manager "]}," RSpec Core Configuration force_include":{"type":"method","name":"force_include","children":[],"call":[" filter_manager include "," filter_manager "]}," RSpec Core path_to_executable":{"type":"method","name":"path_to_executable","children":[],"call":[]}," RSpec current_example=":{"type":"method","name":"current_example=","children":[],"call":[]}," RSpec current_example":{"type":"method","name":"current_example","children":[],"call":[]}," RSpec Core SharedExampleGroup TopLevelDSL share_examples_for":{"type":"method","name":"share_examples_for","children":[],"call":[" shared_examples ","RSpec  deprecate "]}," Core Reporter abort":{"type":"method","name":"abort","children":[],"call":[" finish ","RSpec  deprecate "]}," RSpec Core RakeTask rcov_opts=":{"type":"method","name":"rcov_opts=","children":[],"call":[" deprecate "]}," RSpec Core RakeTask rcov_opts":{"type":"method","name":"rcov_opts","children":[],"call":[" deprecate "]}," RSpec Core RakeTask rcov_path=":{"type":"method","name":"rcov_path=","children":[],"call":[" deprecate "]}," RSpec Core RakeTask rcov_path":{"type":"method","name":"rcov_path","children":[],"call":[" deprecate "]}," RSpec Core RakeTask rcov=":{"type":"method","name":"rcov=","children":[],"call":[" deprecate "]}," RSpec Core RakeTask rcov":{"type":"method","name":"rcov","children":[],"call":[" deprecate "]}," RSpec Core const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Core Pending const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Core Pending skip":{"type":"method","name":"skip","children":[],"call":[" pending_no_warning "," raise ","SkipDeclaredInExample  new ","Pending  mark_skipped! ","RSpec  current_example ","args first ","RSpec  RSpec  current_example  "]}," RSpec Core Pending pending_no_warning":{"type":"method","name":"pending_no_warning","children":[],"call":[" raise ","SkipDeclaredInExample  new ","PendingExampleFixedError  new ","RSpec  current_example execution_result []= ","RSpec  current_example execution_result ","RSpec  current_example "," teardown_mocks_for_rspec ","RSpec  current_example metadata []= ","RSpec  current_example metadata "," verify_mocks_for_rspec ","RSpec  current_example example_group_instance instance_eval ","RSpec  current_example example_group_instance "," block_given? ","RSpec  current_example metadata [] []= ","RSpec  current_example metadata [] ","options [] ! ","options [] ","options has_key? ","args first ","args pop ","args last is_a? ","args last "," pending "," class before "," class ","PendingDeclaredInExample  new ","args pop  [] ! ","args pop  [] ","args pop  has_key? "]}," RSpec Core Pending SkipDeclaredInExample initialize":{"type":"method","name":"initialize","children":[],"call":["argument to_s "]}," Core Parser pre_parse":{"type":"method","name":"pre_parse","children":[],"call":["RSpec  configuration deprecation_stream= ","RSpec  configuration ","arg == ","args each_cons "]}," RSpec Core MinitestAssertionsAdapter assertions":{"type":"method","name":"assertions","children":[],"call":[]}," RSpec Core Metadata GroupMetadataHash first_description_arg":{"type":"method","name":"first_description_arg","children":[],"call":[" [] first "," [] "]}," RSpec Core Metadata GroupMetadataHash warn_about_first_description_arg_behavioral_change_in_rspec_3":{"type":"method","name":"warn_about_first_description_arg_behavioral_change_in_rspec_3","children":[],"call":["RSpec  warn_deprecation ","behavior_change warning "," [] "," []  warning "]}," RSpec Core Metadata GroupMetadataHash described_class_for_rspec_3":{"type":"method","name":"described_class_for_rspec_3","children":[],"call":["Symbol  === ","String  === ","NilClass  === ","g [] first ","g [] ","value nil? ","g has_key? ","(sym :described_class) each "," container_stack each "," container_stack ","g []  nil? "]}," RSpec Core Metadata GroupMetadataHash described_class_for_rspec_2":{"type":"method","name":"described_class_for_rspec_2","children":[],"call":["Symbol  === ","String  === ","g [] first ","g [] "," container_stack reverse each "," container_stack reverse "," container_stack ","value nil? ","g has_key? ","(sym :described_class) each "," container_stack each ","g []  nil? "]}," RSpec Core MemoizedHelpers AllHookMemoizedHash After hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash After article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash After hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash Before hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash Before article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash Before hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash preserve_accessed_lets":{"type":"method","name":"preserve_accessed_lets","children":[],"call":[" define_method "," undef_method "," method_defined? ","hash each ","@example_group_instance class class_eval ","@example_group_instance class "]}," RSpec Core MemoizedHelpers AllHookMemoizedHash []=":{"type":"method","name":"[]=","children":[],"call":["@hash []= "]}," RSpec Core MemoizedHelpers AllHookMemoizedHash fetch":{"type":"method","name":"fetch","children":[],"call":["@hash fetch "," RSpec  warn_deprecation "," hook_intention "," hook_expression "," article ","CallerFilter  first_non_rspec_line ","key == "]}," RSpec Core MemoizedHelpers AllHookMemoizedHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core MemoizedHelpers AllHookMemoizedHash isolate_for_all_hook":{"type":"method","name":"isolate_for_all_hook","children":[],"call":[]}," RSpec Core MemoizedHelpers is_expected":{"type":"method","name":"is_expected","children":[],"call":[" expect "," subject "]}," Formatters Loader file_at":{"type":"method","name":"file_at","children":[],"call":["File  new ","FileUtils  mkdir_p ","File  dirname ","RSpec Support DirectoryMaker  mkdir_p "]}," Formatters Loader underscore":{"type":"method","name":"underscore","children":[],"call":["word downcase! ","word tr! ","word gsub! ","camel_cased_word to_s dup ","camel_cased_word to_s ","camel_cased_word to_s dup  downcase! ","camel_cased_word to_s dup  tr! ","camel_cased_word to_s dup  gsub! ","camel_cased_camel_cased_word to_s dup  to_s dup ","camel_cased_camel_cased_word to_s dup  to_s "]}," Formatters Loader underscore_with_fix_for_non_standard_rspec_naming":{"type":"method","name":"underscore_with_fix_for_non_standard_rspec_naming","children":[],"call":[" underscore sub "," underscore "]}," Formatters Loader path_for":{"type":"method","name":"path_for","children":[],"call":[" underscore_with_fix_for_non_standard_rspec_naming "]}," Formatters Loader string_const?":{"type":"method","name":"string_const?","children":[],"call":["str is_a? "]}," Formatters Loader custom_formatter":{"type":"method","name":"custom_formatter","children":[],"call":[" raise "," require "," path_for ","const const_get ","formatter_ref gsub split inject ","formatter_ref gsub split ","formatter_ref gsub "," string_const? ","Class  === ","a const_get "]}," Formatters Loader built_in_formatter":{"type":"method","name":"built_in_formatter","children":[],"call":["RSpec  deprecate ","key to_s "]}," Formatters Loader duplicate_formatter_exists?":{"type":"method","name":"duplicate_formatter_exists?","children":[],"call":["formatter output == ","new_formatter output ","formatter output ","formatter class === ","formatter class ","@formatters any? ","formatter class == ","new_formatter class "," has_matching_output? "]}," Formatters Loader find_formatter":{"type":"method","name":"find_formatter","children":[],"call":[" raise "," custom_formatter "," built_in_formatter "]}," Formatters Loader add":{"type":"method","name":"add","children":[],"call":["@formatters << "," duplicate_formatter_exists? ","@reporter register_listener ","formatter_class new "," file_at ","p respond_to? ","paths map "," find_formatter ","RSpec  warn_deprecation ","(str \"          |The \") gsub ","The formatter was added via command line flag or your  + "," RSpec CallerFilter  first_non_rspec_line ","formatter notifications ","RSpec LegacyFormatters  load_formatter "," notifications_for ","Loader  formatters [] nil? ! ","Loader  formatters [] nil? ","Loader  formatters [] ","Loader  formatters ","formatter is_a? ","LegacyFormatter  new ","String  === "," register "," open_stream ","formatter_to_use class ","Loader  formatters key? ","@formatter_class new s << ","@RSpec LegacyFormatters  load_formatter s << ","@LegacyFormatter  new s << "," duplicate_formatter_class new _exists? "," duplicate_RSpec LegacyFormatters  load_formatter _exists? "," duplicate_LegacyFormatter  new _exists? ","formatter_class new _class new ","RSpec LegacyFormatters  load_formatter _class new ","LegacyFormatter  new _class new "," find_formatter  new "," find_formatter_class new  "," find_RSpec LegacyFormatters  load_formatter  "," find_LegacyFormatter  new  ","The formatter_class new  was added via command line flag or your  + ","The RSpec LegacyFormatters  load_formatter  was added via command line flag or your  + ","The LegacyFormatter  new  was added via command line flag or your  + ","The formatter was added via command  RSpec CallerFilter  first_non_rspec_line  flag or your  + "," RSpec CallerFilter  first_non_rspec_ RSpec CallerFilter  first_non_rspec_line  ","formatter_class new  notifications ","RSpec LegacyFormatters  load_formatter  notifications ","LegacyFormatter  new  notifications ","RSpec LegacyFormatters  load_formatter_class new  ","RSpec LegacyFormatters  load_RSpec LegacyFormatters  load_formatter  ","RSpec LegacyFormatters  load_LegacyFormatter  new  ","Loader  formatter_class new s [] nil? ! ","Loader  RSpec LegacyFormatters  load_formatter s [] nil? ! ","Loader  LegacyFormatter  new s [] nil? ! ","Loader  formatter_class new s [] nil? ","Loader  RSpec LegacyFormatters  load_formatter s [] nil? ","Loader  LegacyFormatter  new s [] nil? ","Loader  formatter_class new s [] ","Loader  RSpec LegacyFormatters  load_formatter s [] ","Loader  LegacyFormatter  new s [] ","Loader  formatter_class new s ","Loader  RSpec LegacyFormatters  load_formatter s ","Loader  LegacyFormatter  new s ","formatter_class new  is_a? ","RSpec LegacyFormatters  load_formatter  is_a? ","LegacyFormatter  new  is_a? ","formatter_class new _to_use class ","RSpec LegacyFormatters  load_formatter _to_use class ","LegacyFormatter  new _to_use class ","Loader  formatter_class new s key? ","Loader  RSpec LegacyFormatters  load_formatter s key? ","Loader  LegacyFormatter  new s key? "]}," Formatters Loader setup_default":{"type":"method","name":"setup_default","children":[],"call":["@reporter register_listener ","@formatters each "," add ","DeprecationFormatter  === ","@formatters any? ","@formatters empty? "," existing_formatter_implements? ! "," existing_formatter_implements? ","RSpec  configuration profile_examples? ","RSpec  configuration "," default_formatter ","@reporter setup_profiler "]}," Formatters Loader initialize":{"type":"method","name":"initialize","children":[],"call":[" default_formatter= "]}," RSpec Core Formatters DeprecationFormatter FileStream summarize":{"type":"method","name":"summarize","children":[],"call":[" puts ","summary_stream puts ","@file path "," pluralize ","Helpers  pluralize ","@file inspect ","@file respond_to? ","@file @file inspect  ","@file @file path  "]}," RSpec Core Formatters DeprecationFormatter FileStream puts":{"type":"method","name":"puts","children":[],"call":["@file puts "]}," RSpec Core Formatters DeprecationFormatter FileStream initialize":{"type":"method","name":"initialize","children":[],"call":["@file sync= "]}," RSpec Core Formatters DeprecationFormatter RaiseErrorStream summarize":{"type":"method","name":"summarize","children":[],"call":["summary_stream puts "," pluralize ","Helpers  pluralize "]}," RSpec Core Formatters DeprecationFormatter RaiseErrorStream puts":{"type":"method","name":"puts","children":[],"call":[" raise "]}," RSpec Core Formatters DeprecationFormatter DelayedPrinter print_deferred_deprecation_warnings":{"type":"method","name":"print_deferred_deprecation_warnings","children":[],"call":[" deprecation_stream puts "," deprecation_stream ","messages each ","@deprecation_messages [] ","@deprecation_messages keys sort_by each ","@deprecation_messages keys sort_by ","@deprecation_messages keys ","@deprecation_messages []  each ","@deprecation_@deprecation_messages []  [] ","@deprecation_@deprecation_messages []  keys sort_by each ","@deprecation_@deprecation_messages []  keys sort_by ","@deprecation_@deprecation_messages []  keys "]}," RSpec Core Formatters DeprecationFormatter DelayedPrinter deprecation_summary":{"type":"method","name":"deprecation_summary","children":[],"call":[" summary_stream puts "," pluralize "," deprecation_formatter count "," deprecation_formatter "," summary_stream "," deprecation_stream puts "," deprecation_stream "," print_deferred_deprecation_warnings ","@deprecation_messages any? ","Helpers  pluralize "]}," RSpec Core Formatters DeprecationFormatter DelayedPrinter stash_deprecation_message":{"type":"method","name":"stash_deprecation_message","children":[],"call":["@deprecation_messages [] << ","deprecation_message too_many_warnings_message ","@deprecation_messages [] ","@seen_deprecations [] == ","@seen_deprecations [] ","deprecation_message to_s ","@seen_deprecations [] < "]}," RSpec Core Formatters DeprecationFormatter DelayedPrinter print_deprecation_message":{"type":"method","name":"print_deprecation_message","children":[],"call":[" stash_deprecation_message ","@seen_deprecations [] "," deprecation_formatter deprecation_message_for "," deprecation_formatter "," stash_ deprecation_formatter deprecation_message_for  "," deprecation_formatter  deprecation_formatter deprecation_message_for _for "]}," RSpec Core Formatters DeprecationFormatter DelayedPrinter initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," RSpec Core Formatters DeprecationFormatter ImmediatePrinter deprecation_summary":{"type":"method","name":"deprecation_summary","children":[],"call":[" deprecation_stream summarize "," deprecation_formatter count "," deprecation_formatter "," summary_stream "," deprecation_stream "," deprecation_formatter count zero? "," deprecation_stream puts "," summary_stream puts "," deprecation_stream path "," pluralize "," deprecation_formatter count > "]}," RSpec Core Formatters DeprecationFormatter ImmediatePrinter print_deprecation_message":{"type":"method","name":"print_deprecation_message","children":[],"call":[" deprecation_stream puts ","deprecation_message to_s "," deprecation_stream "," deprecation_formatter deprecation_message_for "," deprecation_formatter "," deprecation_formatter deprecation_message_for  to_s "," deprecation_formatter  deprecation_formatter deprecation_message_for _for "]}," RSpec Core Formatters DeprecationFormatter ImmediatePrinter initialize":{"type":"method","name":"initialize","children":[],"call":["@deprecation_stream sync= "]}," RSpec Core Formatters DeprecationFormatter too_many_warnings_message":{"type":"method","name":"too_many_warnings_message","children":[],"call":["msg << "," type "]}," RSpec Core Formatters DeprecationFormatter to_s":{"type":"method","name":"to_s","children":[],"call":["msg << ","@data [] "," output_formatted ","@data call_site ","@data replacement ","@data deprecated ","String  new ","String  new  << "]}," RSpec Core Formatters DeprecationFormatter deprecation_type_for":{"type":"method","name":"deprecation_type_for","children":[],"call":["data [] gsub ","data [] ","data message gsub ","data message "]}," RSpec Core Formatters DeprecationFormatter output_formatted":{"type":"method","name":"output_formatted","children":[],"call":["str chomp ","- * ","str lines count > ","str lines count ","str lines "]}," RSpec Core Formatters DeprecationFormatter deprecation_message_for":{"type":"method","name":"deprecation_message_for","children":[],"call":["GeneratedDeprecationMessage  new ","SpecifiedDeprecationMessage  new ","data [] ","data message "]}," RSpec Core Formatters DeprecationFormatter printer":{"type":"method","name":"printer","children":[],"call":["DelayedPrinter  new "," summary_stream "," deprecation_stream ","ImmediatePrinter  new ","FileStream  new "]}," RSpec Core Formatters ConsoleCodes wrap":{"type":"method","name":"wrap","children":[],"call":[" console_code_for ","RSpec  configuration color_enabled? ","RSpec  configuration "]}," RSpec Core Formatters ConsoleCodes console_code_for":{"type":"method","name":"console_code_for","children":[],"call":[" console_code_for ","VT100_CODES  fetch ","VT100_CODE_VALUES  has_key? "," configuration_color ","RSpec  configuration respond_to? ","RSpec  configuration ","VT100_CODE_VALUES  key? ","RSpec  configuration __send__ "," config_colors_to_methods [] "," config_colors_to_methods ","CONFIG_COLORS_TO_METHODS  [] "]}," RSpec Core Formatters BaseTextFormatter const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Core FilterManager include_only":{"type":"method","name":"include_only","children":[],"call":[" replace "," unless_standalone "," inclusions use_only ","args last "," inclusions "]}," RSpec Core FilterManager exclude_only":{"type":"method","name":"exclude_only","children":[],"call":[" replace "," exclusions use_only ","args last "," exclusions "]}," RSpec Core FilterManager Describable rules_empty?":{"type":"method","name":"rules_empty?","children":[],"call":["(send nil :reject) empty? ","RSpec Core FilterManager  default_exclusions [] == ","RSpec Core FilterManager  default_exclusions [] ","RSpec Core FilterManager  default_exclusions "," reject "]}," RSpec Core FilterManager standalone_filters":{"type":"method","name":"standalone_filters","children":[],"call":[]}," RSpec Core FilterManager default_exclusions":{"type":"method","name":"default_exclusions","children":[],"call":[" lambda ","value ! "]}," RSpec Core FilterManager const_missing":{"type":"method","name":"const_missing","children":[],"call":[" standalone_filters ","RSpec  deprecate "," default_exclusions "]}," RSpec Core ExampleGroup warn_deprecation_of_example_accessor":{"type":"method","name":"warn_deprecation_of_example_accessor","children":[],"call":["RSpec  warn_deprecation ","(str \"          |RSpec::Core::ExampleGroup#\") gsub ","CallerFilter  first_non_rspec_line "]}," RSpec Core ExampleGroup example":{"type":"method","name":"example","children":[],"call":["RSpec  current_example "," warn_deprecation_of_example_accessor "]}," RSpec Core ExampleGroup example=":{"type":"method","name":"example=","children":[],"call":["RSpec  current_example= "]}," RSpec Core ExampleGroup warning":{"type":"method","name":"warning","children":[],"call":["(str \"            |The semantics of `describe <a \") gsub "," call_site "," arg class name "," arg class "," arg "]}," RSpec Core ExampleGroup warn_unexpected_args":{"type":"method","name":"warn_unexpected_args","children":[],"call":[]}," RSpec Core ExampleGroup focused":{"type":"method","name":"focused","children":[],"call":[]}," RSpec Core ExampleGroup describes":{"type":"method","name":"describes","children":[],"call":[" described_class ","RSpec  deprecate "]}," RSpec Core ExampleGroup display_name":{"type":"method","name":"display_name","children":[],"call":[" description ","RSpec  deprecate "]}," RSpec Core DeprecatedMutableArrayProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Configuration __filter_run":{"type":"method","name":"__filter_run","children":[],"call":[" filter_manager include_with_low_priority "," filter_manager ","RSpec  warn_deprecation ","(str \"            |In RSpec 2.x, `config.\") gsub ","CallerFilter  first_non_rspec_line ","metadata_hash [] "," build_metadata_hash_from "," build_metadata_hash_from  [] "," build_ build_metadata_hash_from _from "]}," RSpec Core Configuration deprecate_unless_mock_adapter_name_is_exact":{"type":"method","name":"deprecate_unless_mock_adapter_name_is_exact","children":[],"call":["RSpec  deprecate ","name inspect ","name == "]}," RSpec Core Configuration _randomize?":{"type":"method","name":"_randomize?","children":[],"call":[" value_for to_s match "," value_for to_s "," value_for "]}," RSpec Core Configuration raise_errors_for_deprecations!":{"type":"method","name":"raise_errors_for_deprecations!","children":[],"call":[" deprecation_stream= ","Formatters DeprecationFormatter RaiseErrorStream  new "]}," RSpec Core Configuration expose_current_running_example_as":{"type":"method","name":"expose_current_running_example_as","children":[],"call":[" include "," let "," extend ","ExposeCurrentExample  module_eval ","ExposeCurrentExample  module_exec "]}," RSpec Core Configuration warnings?":{"type":"method","name":"warnings?","children":[],"call":[]}," RSpec Core Configuration register_ordering":{"type":"method","name":"register_ordering","children":[],"call":[" raise ","(str \"Ordering name `\") + + + ","(str \"Ordering name `\") + + ","(str \"Ordering name `\") + ","name inspect ","name == "]}," RSpec Core Configuration order":{"type":"method","name":"order","children":[],"call":[" value_for ","RSpec  warn_deprecation ","RSpec::Core::Configuration#order is deprecated with no replacement.  + + + ","CallerFilter  first_non_rspec_line ","RSpec::Core::Configuration#order is deprecated with no replacement.  + + ","RSpec::Core::Configuration#order is deprecated with no replacement.  + "]}," RSpec Core Configuration formatter_loader":{"type":"method","name":"formatter_loader","children":[],"call":["Formatters Loader  new ","Reporter  new "]}," RSpec Core Configuration color?":{"type":"method","name":"color?","children":[],"call":[" color_enabled? "," output_stream ","RSpec  deprecate "]}," RSpec Core Configuration backtrace_cleaner":{"type":"method","name":"backtrace_cleaner","children":[],"call":["RSpec  deprecate "]}," RSpec Core Configuration treat_symbols_as_metadata_keys_with_true_values=":{"type":"method","name":"treat_symbols_as_metadata_keys_with_true_values=","children":[],"call":["RSpec  deprecate ","RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=  + ","RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= + "]}," RSpec Core Configuration show_failures_in_pending_blocks?":{"type":"method","name":"show_failures_in_pending_blocks?","children":[],"call":[" show_failures_in_pending_blocks ! ! "," show_failures_in_pending_blocks ! "," show_failures_in_pending_blocks "]}," RSpec Core Configuration show_failures_in_pending_blocks":{"type":"method","name":"show_failures_in_pending_blocks","children":[],"call":["RSpec  warn_deprecation ","(str \"          |RSpec.configuration.show_failures_in_pending_blocks is being removed\\n\") gsub ","CallerFilter  first_non_rspec_line "]}," RSpec Core Configuration show_failures_in_pending_blocks=":{"type":"method","name":"show_failures_in_pending_blocks=","children":[],"call":["RSpec  warn_deprecation ","(str \"          |RSpec.configuration.show_failures_in_pending_blocks is being removed\\n\") gsub ","CallerFilter  first_non_rspec_line "]}," RSpec Core Configuration pattern=":{"type":"method","name":"pattern=","children":[],"call":["Kernel  warn ","CallerFilter  first_non_rspec_line ","RSpec  warning "," update_pattern_attr "]}," RSpec Core Configuration out=":{"type":"method","name":"out=","children":[],"call":[" output_stream= ","RSpec  deprecate "]}," RSpec Core Configuration out":{"type":"method","name":"out","children":[],"call":[" output_stream ","RSpec  deprecate "]}," RSpec Core Configuration output=":{"type":"method","name":"output=","children":[],"call":[" output_stream= ","RSpec  deprecate "]}," RSpec Core Configuration output_stream=":{"type":"method","name":"output_stream=","children":[],"call":[" warn ","RSpec's reporter has already been initialized with  + + + ","CallerFilter  first_non_rspec_line ","RSpec's reporter has already been initialized with  + + ","RSpec's reporter has already been initialized with  + "," output_stream inspect "," output_stream ","value equal? ! ","value equal? "," output_wrapper output= "," output_wrapper "]}," RSpec Core Configuration deprecation_stream=":{"type":"method","name":"deprecation_stream=","children":[],"call":[" warn ","RSpec's reporter has already been initialized with  + + + + ","CallerFilter  first_non_rspec_line ","RSpec's reporter has already been initialized with  + + + ","RSpec's reporter has already been initialized with  + + ","RSpec's reporter has already been initialized with  + "," deprecation_stream inspect "," deprecation_stream ","value equal? ! ","value equal? "]}," RSpec Core Runner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec CallerFilter first_non_rspec_line":{"type":"method","name":"first_non_rspec_line","children":[],"call":[]}," RSpec Core Formatters DeprecationFormatter RaiseErrorStream sync=":{"type":"method","name":"sync=","children":[],"call":[]}," RSpec internal_reset":{"type":"method","name":"internal_reset","children":[],"call":[]}," RSpec warn_about_calling_reset":{"type":"method","name":"warn_about_calling_reset","children":[],"call":[]}," RSpec user_has_called_reset?":{"type":"method","name":"user_has_called_reset?","children":[],"call":[]}," RSpec Core Runner warn_about_calling_reset":{"type":"method","name":"warn_about_calling_reset","children":[],"call":[]}," RSpec thread_local_metadata":{"type":"method","name":"thread_local_metadata","children":[],"call":[]}," RSpec Core World shared_example_group_registry":{"type":"method","name":"shared_example_group_registry","children":[],"call":["SharedExampleGroup Registry  new "]}," RSpec Core World ordered_example_groups":{"type":"method","name":"ordered_example_groups","children":[],"call":["ordering_strategy order ","@configuration ordering_registry fetch ","@configuration ordering_registry ","@configuration ordering_registry fetch  order "]}," RSpec Core World windows_os?":{"type":"method","name":"windows_os?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," RSpec Core World clear_remaining_example_groups":{"type":"method","name":"clear_remaining_example_groups","children":[],"call":[" example_groups clear "," example_groups "]}," RSpec Core Warnings warn_with":{"type":"method","name":"warn_with","children":[],"call":["RSpec  current_example location ","RSpec  current_example ","message end_with? ","options [] "]}," RSpec Core Warnings warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":["RSpec  configuration reporter deprecation ","opts merge ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpec Core Warnings deprecate":{"type":"method","name":"deprecate","children":[],"call":["RSpec  configuration reporter deprecation ","(pair\n  (sym :deprecated)\n  (lvar :deprecated)) merge ","CallerFilter  first_non_rspec_line ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpec Core SharedExampleGroup Registry valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[]}," RSpec Core SharedExampleGroup Registry find":{"type":"method","name":"find","children":[],"call":[" shared_example_groups [] [] "," shared_example_groups [] "," shared_example_groups ","lookup_contexts each "]}," RSpec Core SharedExampleGroup Registry add":{"type":"method","name":"add","children":[],"call":["RSpec  configuration include ","RSpec  configuration ","host class_exec ","(sclass\n  (lvar :mod)\n  (self)) __send__ ","Module  new ","metadata_args empty? ","metadata_args unshift "," shared_example_groups [] []= "," shared_example_groups [] "," shared_example_groups "," warn_if_key_taken "," valid_name? ","CallerFilter  first_non_rspec_line "," ensure_block_has_source_location ","SharedExampleGroupModule  new ","Metadata  build_hash_from "," raise ","name inspect "," legacy_add ","RSpec  configuration shared_context_metadata_behavior == ","RSpec  configuration shared_context_metadata_behavior ","RSpec  warning ","(sclass\n  (lvar :Module  new )\n  (self)) __send__ ","Metadata  build_hash_from _args empty? ","Metadata  build_hash_from _args unshift ","RSpec  configuration shared_context_Metadata  build_hash_from _behavior == ","RSpec  configuration shared_context_Metadata  build_hash_from _behavior "]}," RSpec Core SharedExampleGroup TopLevelDSL remove_globally!":{"type":"method","name":"remove_globally!","children":[],"call":[]}," RSpec Core SharedExampleGroup TopLevelDSL expose_globally!":{"type":"method","name":"expose_globally!","children":[],"call":[]}," RSpec Core SharedExampleGroup TopLevelDSL exposed_globally?":{"type":"method","name":"exposed_globally?","children":[],"call":[]}," RSpec Core SharedExampleGroup TopLevelDSL definitions":{"type":"method","name":"definitions","children":[{"type":"method","name":"shared_examples","children":[],"asgn":[],"call":["RSpec  world shared_example_group_registry add ","RSpec  world shared_example_group_registry ","RSpec  world "]}],"call":[]}," RSpec Core Runner run_specs":{"type":"method","name":"run_specs","children":[],"call":["@configuration hooks run ","@configuration hooks ","@configuration failure_exit_code ","(send\n  (lvar :example_groups) :map) all? ","g run ","example_groups map ","SuiteHookContext  new ","@configuration reporter report ","@world example_count ","@configuration reporter "," exit_code ","@configuration fail_if_no_examples ","examples_count == ","@configuration with_suite_hooks ","@world non_example_failure ! ","@world non_example_failure ","@world example_count  == "]}," RSpec Core Runner setup":{"type":"method","name":"setup","children":[],"call":["@world announce_filters ","@configuration load_spec_files ","@options configure ","@configuration output_stream= ","@configuration output_stream == ","@configuration output_stream ","@configuration error_stream= ","RSpec  world wants_to_quit ","RSpec  world "," configure "]}," RSpec Core Runner invoke":{"type":"method","name":"invoke","children":[],"call":[]}," Core Reporter seed_used?":{"type":"method","name":"seed_used?","children":[],"call":["@configuration seed_used? ","@configuration seed "]}," Core Reporter mute_profile_output?":{"type":"method","name":"mute_profile_output?","children":[],"call":["@failed_examples size > ","@failed_examples size ","@configuration fail_fast? ","@configuration profile_examples? ! ","@configuration profile_examples? "," fail_fast_limit_met? "]}," RSpec Core RakeTask rspec_load_path":{"type":"method","name":"rspec_load_path","children":[],"call":["core_and_support map join ","core_and_support map ","$LOAD_PATH grep ","(send\n  (lvar :core_and_support) :map) join "," escape ","$LOAD_PATH grep uniq ","$LOAD_PATH grep  map join ","$LOAD_PATH grep uniq  map join ","$LOAD_PATH grep  map ","$LOAD_PATH grep uniq  map ","(send\n  (lvar :$LOAD_PATH grep ) :map) join ","(send\n  (lvar :$LOAD_PATH grep uniq ) :map) join "]}," RSpec Core ProjectInitializer copy_template":{"type":"method","name":"copy_template","children":[],"call":["f write ","File  read ","File  join "," template_path ","File  open ","FileUtils  mkdir_p ","File  dirname "," report_creating "," report_exists ","File  exist? "," destination ","RSpec Support DirectoryMaker  mkdir_p "]}," RSpec Core Pending mark_fixed!":{"type":"method","name":"mark_fixed!","children":[],"call":[]}," RSpec Core Pending mark_pending!":{"type":"method","name":"mark_pending!","children":[],"call":[]}," RSpec Core Pending mark_skipped!":{"type":"method","name":"mark_skipped!","children":[],"call":[]}," RSpec Core Ordering ConfigurationManager register_ordering":{"type":"method","name":"register_ordering","children":[],"call":[" ordering_registry register "," ordering_registry ","name == "]}," RSpec Core Ordering ConfigurationManager force":{"type":"method","name":"force","children":[],"call":[" order= ","hash [] ","hash has_key? "," seed= ","hash key? "]}," RSpec Core Ordering ConfigurationManager order=":{"type":"method","name":"order=","children":[],"call":[" register_ordering "," ordering_registry fetch "," ordering_registry ","order == ","order include? ","seed to_i ","type to_s split ","type to_s ","seed to_i  to_i "]}," RSpec Core Ordering ConfigurationManager seed=":{"type":"method","name":"seed=","children":[],"call":["seed to_i "," register_ordering "," ordering_registry fetch "," ordering_registry "]}," RSpec Core Ordering ConfigurationManager seed_used?":{"type":"method","name":"seed_used?","children":[],"call":[" ordering_registry used_random_seed? "," ordering_registry "]}," RSpec Core Ordering ConfigurationManager initialize":{"type":"method","name":"initialize","children":[],"call":[" rand ","Registry  new "]}," RSpec Core Ordering Registry used_random_seed?":{"type":"method","name":"used_random_seed?","children":[],"call":["@strategies [] used? ","@strategies [] "]}," RSpec Core Ordering Registry register":{"type":"method","name":"register","children":[],"call":["@strategies []= "]}," RSpec Core Ordering Registry fetch":{"type":"method","name":"fetch","children":[],"call":["@strategies fetch "]}," RSpec Core Ordering Registry initialize":{"type":"method","name":"initialize","children":[],"call":[" register ","Identity  new ","Random  new ","RecentlyModified  new "]}," RSpec Core Ordering Custom order":{"type":"method","name":"order","children":[],"call":["@callable call "]}," RSpec Core Ordering Custom initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Ordering Random shuffle":{"type":"method","name":"shuffle","children":[],"call":["shuffled [] ","shuffled []= ","i == ","i + ","rng rand ","shuffled size - ","shuffled size ","shuffled size times ","list dup ","list shuffle ","list dup  [] ","list dup  []= ","list dup  size - ","list dup  size ","list dup  size times "]}," RSpec Core Ordering Random order":{"type":"method","name":"order","children":[],"call":[" shuffle ","RandomNumberGenerator  new ","@configuration seed "," jenkins_hash_digest ","seed + ","item id ","items sort_by ","@configuration seed to_s ","@configuration @configuration seed to_s  ","@configuration seed to_s  + ","@configuration @configuration seed to_s  to_s "]}," RSpec Core Ordering Random used?":{"type":"method","name":"used?","children":[],"call":[]}," RSpec Core Ordering Random initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Ordering Identity order":{"type":"method","name":"order","children":[],"call":[]}," Core Parser parse":{"type":"method","name":"parse","children":[],"call":[" abort ","e message "," parser parse! "," parser ","args delete ","args empty? "," convert_deprecated_args ","options []= "," original_args dup "," original_args "," original_args empty? ","failure << "," original_args dup  delete "," original_args dup  empty? "," convert_deprecated_ original_args dup  "," original_ original_args dup  dup "," original_ original_args dup  "," original_ original_args dup  empty? ","e message  << "]}," Core Notifications from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Core Notifications calculate_slowest_groups":{"type":"method","name":"calculate_slowest_groups","children":[],"call":["(send\n  (lvar :example_groups) :sort_by) first "," number_of_examples ","hash [] -@ ","hash [] ","example_groups sort_by ","hash []= ","hash [] to_f / ","hash [] to_f ","example_groups each_value ","example_groups keys length <= ","example_groups keys length ","example_groups keys ","location_hash []= ","example example_group top_level_description ","example example_group ","location_hash has_key? ","location_hash [] ","example execution_result run_time ","example execution_result ","Hash  new ","example_groups [] ","example example_group parent_groups last metadata [] ","example example_group parent_groups last metadata ","example example_group parent_groups last ","example example_group parent_groups "," examples each "," examples ","location_hash key? ","example example_group parent_groups last metadata [] _hash []= ","example example_group parent_groups last metadata [] _hash has_key? ","example example_group parent_groups last metadata [] _hash [] ","example example_group parent_groups last metadata [] _hash key? "]}," Core Notifications slowest_groups":{"type":"method","name":"slowest_groups","children":[],"call":[" calculate_slowest_groups "]}," Core Notifications percentage":{"type":"method","name":"percentage","children":[],"call":["%.1f % ","(if\n  (send\n    (lvar :time_taken) :nan?)\n  (float 0.0)\n  (lvar :time_taken)) * ","time_taken nan? "," slow_duration / "," duration "," slow_duration ","(if\n  (send\n    (lvar : slow_duration / ) :nan?)\n  (float 0.0)\n  (lvar : slow_duration / )) * "," slow_duration /  nan? "]}," Core Notifications slow_duration":{"type":"method","name":"slow_duration","children":[],"call":["i + ","e execution_result run_time ","e execution_result "," slowest_examples inject "," slowest_examples "]}," Core Notifications slowest_examples":{"type":"method","name":"slowest_examples","children":[],"call":["(send\n  (send nil :examples) :sort_by) first "," number_of_examples ","example execution_result run_time -@ ","example execution_result run_time ","example execution_result "," examples sort_by "," examples "]}," Core Notifications fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":["formatted << << ","formatted << "," colorized_rerun_commands "," failed_examples empty? "," failed_examples "," colorized_totals_line "," formatted_load_time "," formatted_duration "," seed "]}," Core Notifications formatted_load_time":{"type":"method","name":"formatted_load_time","children":[],"call":["Formatters Helpers  format_duration "," load_time "]}," Core Notifications formatted_duration":{"type":"method","name":"formatted_duration","children":[],"call":["Formatters Helpers  format_duration "," duration "]}," Core Notifications colorized_rerun_commands":{"type":"method","name":"colorized_rerun_commands","children":[],"call":["\nFailed examples:\n\n + ","(send\n  (send nil :failed_examples) :map) join ","colorizer wrap + + ","colorizer wrap ","RSpec  configuration detail_color ","RSpec  configuration ","example full_description ","colorizer wrap + ","RSpec  configuration failure_color ","example location "," failed_examples map "," failed_examples "]}," Core Notifications colorized_totals_line":{"type":"method","name":"colorized_totals_line","children":[],"call":["colorizer wrap ","RSpec  configuration success_color ","RSpec  configuration "," totals_line ","RSpec  configuration pending_color "," pending_count > "," pending_count ","RSpec  configuration failure_color "," failure_count > "," failure_count "]}," Core Notifications totals_line":{"type":"method","name":"totals_line","children":[],"call":["summary << "," pending_count "," pending_count > ","summary << << ","Formatters Helpers  pluralize "," failure_count "," example_count ","Formatters Helpers  pluralize  << ","Formatters Helpers  pluralize  << << "]}," Core Notifications pending_count":{"type":"method","name":"pending_count","children":[],"call":[" pending_examples size "," pending_examples "]}," Core Notifications failure_count":{"type":"method","name":"failure_count","children":[],"call":[" failed_examples size "," failed_examples "]}," Core Notifications example_count":{"type":"method","name":"example_count","children":[],"call":[" examples size "," examples "]}," Core Notifications seed_used?":{"type":"method","name":"seed_used?","children":[],"call":[" used ! ! "," used ! "," used "]}," Core Notifications PendingExampleFixedNotification colorized_message_lines":{"type":"method","name":"colorized_message_lines","children":[],"call":["colorizer wrap ","RSpec  configuration fixed_color ","RSpec  configuration "," message_lines map "," message_lines "]}," Core Notifications PendingExampleFixedNotification message_lines":{"type":"method","name":"message_lines","children":[],"call":[" example execution_result pending_message "," example execution_result "," example "]}," Core Notifications PendingExampleFixedNotification description":{"type":"method","name":"description","children":[],"call":[" example full_description "," example "]}," Core Notifications FailedExampleNotification find_failed_line":{"type":"method","name":"find_failed_line","children":[],"call":["match [] downcase == ","path downcase ","match [] downcase ","match [] ","line match "," exception backtrace detect "," exception backtrace "," exception ","File  expand_path "," example file_path "," example "," exception backtrace find ","File  expand_path downcase == ","File  expand_path downcase ","line [] "," example metadata [] downcase "," example metadata [] "," example metadata ","line match  [] downcase == ","File  expand_path  downcase ","line match  [] downcase ","line match  [] ","line line match  ","File  expand_File  expand_path  "," example file_File  expand_path  ","File  expand_File  expand_path  downcase == ","File  expand_File  expand_path  downcase "]}," Core Notifications FailedExampleNotification read_failed_line":{"type":"method","name":"read_failed_line","children":[],"call":["File  readlines [] ","line_number to_i - ","line_number to_i ","File  readlines ","File  exist? ","matching_line match [] ","matching_line match "," find_failed_line "," find_failed_line  match [] "," find_failed_line  match "]}," Core Notifications FailedExampleNotification group_and_parent_groups":{"type":"method","name":"group_and_parent_groups","children":[],"call":[" example example_group parent_groups + "," example example_group "," example "," example example_group parent_groups "]}," Core Notifications FailedExampleNotification shared_group":{"type":"method","name":"shared_group","children":[],"call":["group metadata [] ","group metadata "," group_and_parent_groups find "," group_and_parent_groups "]}," Core Notifications FailedExampleNotification exception_class_name":{"type":"method","name":"exception_class_name","children":[],"call":["name == "," exception class name to_s "," exception class name "," exception class "," exception "," exception class name to_s  == "," exception class  exception class name to_s  to_s "," exception class  exception class name to_s  "]}," Core Notifications FailedExampleNotification backtrace_formatter":{"type":"method","name":"backtrace_formatter","children":[],"call":["RSpec  configuration backtrace_formatter ","RSpec  configuration "]}," Core Notifications FailedExampleNotification fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":["formatted << "," colorized_formatted_backtrace each "," colorized_formatted_backtrace "," colorized_message_lines each "," colorized_message_lines "," description ","RSpec Support EncodedString  new "," encoding_of ","@exception_presenter fully_formatted "," formatted_message_and_backtrace "]}," Core Notifications FailedExampleNotification colorized_formatted_backtrace":{"type":"method","name":"colorized_formatted_backtrace","children":[],"call":["colorizer wrap ","RSpec  configuration detail_color ","RSpec  configuration "," formatted_backtrace map "," formatted_backtrace ","@exception_presenter colorized_formatted_backtrace "]}," Core Notifications FailedExampleNotification formatted_backtrace":{"type":"method","name":"formatted_backtrace","children":[],"call":[" backtrace_formatter format_backtrace "," example metadata "," example "," exception backtrace "," exception "," backtrace_formatter ","@exception_presenter formatted_backtrace "]}," Core Notifications FailedExampleNotification colorized_message_lines":{"type":"method","name":"colorized_message_lines","children":[],"call":["colorizer wrap ","RSpec  configuration failure_color ","RSpec  configuration "," message_lines map "," message_lines "," add_shared_group_line map "," add_shared_group_line "," failure_lines ","@exception_presenter colorized_message_lines "," message_color "," add_shared_group_lines map "," add_shared_group_lines "]}," Core Notifications FailedExampleNotification message_lines":{"type":"method","name":"message_lines","children":[],"call":["lines << ","(str \"Shared Example Group: \\\"\") + "," backtrace_formatter backtrace_line "," shared_group location "," shared_group "," backtrace_formatter "," shared_group metadata [] "," shared_group metadata "," exception message "," exception "," exception message to_s split each "," exception message to_s split "," exception message to_s "," exception_class_name "," exception_class_name =~ "," read_failed_line strip "," read_failed_line "," add_shared_group_line "," failure_lines ","@exception_presenter message_lines "," add_shared_group_lines "]}," Core Notifications FailedExampleNotification description":{"type":"method","name":"description","children":[],"call":[" example full_description "," example ","@exception_presenter description "]}," Core Notifications FailedExampleNotification exception":{"type":"method","name":"exception","children":[],"call":[" example execution_result exception "," example execution_result "," example ","@exception_presenter exception "]}," Core Notifications ExamplesNotification format":{"type":"method","name":"format","children":[],"call":["ExampleNotification  for ","examples map "]}," Core Notifications ExamplesNotification fully_formatted_pending_examples":{"type":"method","name":"fully_formatted_pending_examples","children":[],"call":["formatted << << << ","colorizer wrap ","formatted << << ","example execution_result pending_message ","example execution_result ","formatted << ","example full_description ","RSpec  configuration backtrace_formatter backtrace_line ","example location ","RSpec  configuration backtrace_formatter ","RSpec  configuration "," pending_examples each "," pending_examples ","notification fully_formatted ","index next "," pending_notifications each_with_index "," pending_notifications ","\nPending: (Failures listed here are expected and do not affect your suite's status)\n dup ","\nPending: (Failures listed here are expected and do not affect your suite's status)\n dup  << << << ","\nPending: (Failures listed here are expected and do not affect your suite's status)\n dup  << << ","\nPending: (Failures listed here are expected and do not affect your suite's status)\n dup  << ","notification fully_\nPending: (Failures listed here are expected and do not affect your suite's status)\n dup  "]}," Core Notifications ExamplesNotification fully_formatted_failed_examples":{"type":"method","name":"fully_formatted_failed_examples","children":[],"call":["formatted << ","failure fully_formatted ","index next "," failure_notifications each_with_index "," failure_notifications "]}," Core Notifications ExamplesNotification failure_notifications":{"type":"method","name":"failure_notifications","children":[],"call":[" format "," failed_examples "," format_examples "]}," Core Notifications ExamplesNotification notifications":{"type":"method","name":"notifications","children":[],"call":[" format "," examples "," format_examples "]}," Core Notifications ExamplesNotification pending_examples":{"type":"method","name":"pending_examples","children":[],"call":["@reporter pending_examples "]}," Core Notifications ExamplesNotification failed_examples":{"type":"method","name":"failed_examples","children":[],"call":["@reporter failed_examples "]}," Core Notifications ExamplesNotification examples":{"type":"method","name":"examples","children":[],"call":["@reporter examples "]}," Core Notifications ExamplesNotification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Core Notifications for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Core MockingAdapters RSpec teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" RSpec Mocks  teardown "]}," RSpec Core MockingAdapters RSpec verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" RSpec Mocks  verify "]}," RSpec Core MockingAdapters RSpec setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[" RSpec Mocks  setup "]}," RSpec Core MockingAdapters RSpec configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec Core MockingAdapters RSpec framework_name":{"type":"method","name":"framework_name","children":[],"call":[]}," RSpec Core MockingAdapters RR teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" RR Space  instance reset "," RR Space  instance "]}," RSpec Core MockingAdapters RR verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" RR Space  instance verify_doubles "," RR Space  instance "]}," RSpec Core MockingAdapters RR setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[" RR Space  instance reset "," RR Space  instance "]}," RSpec Core MockingAdapters RR framework_name":{"type":"method","name":"framework_name","children":[],"call":[]}," RSpec Core MockingAdapters Null teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[]}," RSpec Core MockingAdapters Null verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[]}," RSpec Core MockingAdapters Null setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[]}," RSpec Core MockingAdapters Mocha teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" mocha_teardown "]}," RSpec Core MockingAdapters Mocha verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" mocha_verify "]}," RSpec Core MockingAdapters Mocha setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[" mocha_setup "]}," RSpec Core MockingAdapters Mocha framework_name":{"type":"method","name":"framework_name","children":[],"call":[]}," RSpec Core MockingAdapters Flexmock teardown_mocks_for_rspec":{"type":"method","name":"teardown_mocks_for_rspec","children":[],"call":[" flexmock_close "]}," RSpec Core MockingAdapters Flexmock verify_mocks_for_rspec":{"type":"method","name":"verify_mocks_for_rspec","children":[],"call":[" flexmock_verify "]}," RSpec Core MockingAdapters Flexmock setup_mocks_for_rspec":{"type":"method","name":"setup_mocks_for_rspec","children":[],"call":[]}," RSpec Core MockingAdapters Flexmock framework_name":{"type":"method","name":"framework_name","children":[],"call":[]}," RSpec Core MetadataFilter parent_of":{"type":"method","name":"parent_of","children":[],"call":["metadata [] ","metadata key? ","metadata has_key? "]}," RSpec Core MetadataFilter filters_apply?":{"type":"method","name":"filters_apply?","children":[],"call":[" filter_applies? ","value all? ","HashImitatable  === ","Hash  === ","metadata [] "]}," RSpec Core MetadataFilter example_group_declaration_line":{"type":"method","name":"example_group_declaration_line","children":[],"call":["locations [] ","File  expand_path ","parent [] "," parent_of "," parent_of  [] ","  parent_of _of "]}," RSpec Core MetadataFilter relevant_line_numbers":{"type":"method","name":"relevant_line_numbers","children":[],"call":["(send\n  (lvar :metadata) :[]\n  (sym :line_number)) compact + "," relevant_line_numbers "," parent_of ","(send\n  (lvar :metadata) :[]\n  (sym :line_number)) compact ","metadata [] ","meta [] ","Metadata  ascend map ","Metadata  ascend "]}," RSpec Core MetadataFilter line_number_filter_applies?":{"type":"method","name":"line_number_filter_applies?","children":[],"call":["(send\n  (send nil :relevant_line_numbers\n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? ! ","(send\n  (send nil :relevant_line_numbers\n    (lvar :metadata)) :&\n  (lvar :preceding_declaration_lines)) empty? "," relevant_line_numbers & "," relevant_line_numbers ","RSpec  world preceding_declaration_line ","RSpec  world ","line_numbers map "]}," RSpec Core MetadataFilter location_filter_applies?":{"type":"method","name":"location_filter_applies?","children":[],"call":[" line_number_filter_applies? "," example_group_declaration_line ","line_num == ","RSpec  world preceding_declaration_line ","RSpec  world ","locations [] any? ","locations [] ","meta [] ","Metadata  ascend any? ","Metadata  ascend ","line_numbers empty? "," example_group_declaration_lines ","  example_group_declaration_line _filter_applies? "," meta [] ber_filter_applies? ","meta []  == "," example_group_declaration_line s empty? ","meta [] bers empty? "," example_group_declaration_lines  empty? "]}," RSpec Core MetadataFilter filter_applies_to_any_value?":{"type":"method","name":"filter_applies_to_any_value?","children":[],"call":[" filter_applies? ","metadata [] any? ","metadata [] "]}," RSpec Core MetadataFilter filter_applies?":{"type":"method","name":"filter_applies?","children":[],"call":["metadata [] to_s == ","value to_s ","metadata [] to_s ","metadata [] ","value call ","value arity ","metadata [] =~ ","metadata has_key? "," filters_apply? ","Hash  === "," location_filter_applies? ","key == "," filter_applies_to_any_value? ","(send\n  (const nil :Proc) :===\n  (lvar :value)) ! ","Proc  === ","Array  === "," silence_metadata_example_group_deprecations ","metadata key? ","filter_value to_s == ","meta_value to_s ","filter_value to_s ","filter_value === "," proc_filter_applies? ","TrueClass  === ","metadata fetch "," id_filter_applies? ","metadata [] ! ! ","metadata [] ! "]}," RSpec Core MetadataFilter all_apply?":{"type":"method","name":"all_apply?","children":[],"call":[" filter_applies? ","filters all? "]}," RSpec Core MetadataFilter any_apply?":{"type":"method","name":"any_apply?","children":[],"call":[" filter_applies? ","filters any? "]}," RSpec Core LegacyExampleGroupHash set_value":{"type":"method","name":"set_value","children":[],"call":["@metadata []= "]}," RSpec Core LegacyExampleGroupHash get_value":{"type":"method","name":"get_value","children":[],"call":["@metadata [] "]}," RSpec Core LegacyExampleGroupHash directly_supports_attribute?":{"type":"method","name":"directly_supports_attribute?","children":[],"call":["name != "]}," RSpec Core LegacyExampleGroupHash to_h":{"type":"method","name":"to_h","children":[],"call":[" merge "]}," RSpec Core LegacyExampleGroupHash initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","(send\n  (lvar :metadata) :fetch\n  (sym :parent_example_group)) [] ","metadata fetch "]}," RSpec Core HashImitatable ClassMethods attr_accessor":{"type":"method","name":"attr_accessor","children":[],"call":[" hash_attribute_names concat "," hash_attribute_names "]}," RSpec Core HashImitatable ClassMethods hash_attribute_names":{"type":"method","name":"hash_attribute_names","children":[],"call":[]}," RSpec Core HashImitatable issue_deprecation":{"type":"method","name":"issue_deprecation","children":[],"call":[]}," RSpec Core HashImitatable hash_for_delegation":{"type":"method","name":"hash_for_delegation","children":[],"call":[" to_h "]}," RSpec Core HashImitatable set_value":{"type":"method","name":"set_value","children":[],"call":[" __send__ "]}," RSpec Core HashImitatable get_value":{"type":"method","name":"get_value","children":[],"call":[" __send__ "]}," RSpec Core HashImitatable directly_supports_attribute?":{"type":"method","name":"directly_supports_attribute?","children":[],"call":[" class hash_attribute_names include? "," class hash_attribute_names "," class "]}," RSpec Core HashImitatable extra_hash_attributes":{"type":"method","name":"extra_hash_attributes","children":[],"call":[]}," RSpec Core HashImitatable []=":{"type":"method","name":"[]=","children":[],"call":[" extra_hash_attributes []= "," extra_hash_attributes "," set_value "," directly_supports_attribute? "," issue_deprecation "]}," RSpec Core HashImitatable []":{"type":"method","name":"[]","children":[],"call":[" extra_hash_attributes [] "," extra_hash_attributes "," get_value "," directly_supports_attribute? "," issue_deprecation "]}," RSpec Core HashImitatable to_h":{"type":"method","name":"to_h","children":[],"call":["hash []= "," __send__ "," class hash_attribute_names each "," class hash_attribute_names "," class "," extra_hash_attributes dup "," extra_hash_attributes "," extra_hash_attributes dup  []= "," class  extra_hash_attributes dup _attribute_names each "," class  extra_hash_attributes dup _attribute_names "," extra_ extra_hash_attributes dup _attributes dup "," extra_ extra_hash_attributes dup _attributes "]}," RSpec Core HashImitatable included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Core Metadata ExampleGroupHash full_description":{"type":"method","name":"full_description","children":[],"call":["parent_description + + ","parent_description + "," description_separator "," metadata [] first "," metadata [] "," metadata ","parent_example_group [] last ","parent_example_group [] ","parent_example_group []  + + ","parent_ metadata []  + + ","parent_example_group []  + ","parent_ metadata []  + "," description_ description_separator  ","  metadata [] _separator "," metadata []  [] last "," metadata []  [] "]}," RSpec Core Metadata ExampleGroupHash described_class":{"type":"method","name":"described_class","children":[],"call":["parent_group [] "," metadata [] "," metadata ","String  === ","NilClass  === "," metadata [] first "," metadata []  [] "]}," RSpec Core Metadata ExampleGroupHash backwards_compatibility_default_proc":{"type":"method","name":"backwards_compatibility_default_proc","children":[],"call":[]}," RSpec Core Metadata ExampleGroupHash hash_with_backwards_compatibility_default_proc":{"type":"method","name":"hash_with_backwards_compatibility_default_proc","children":[],"call":[]}," RSpec Core Metadata ExampleGroupHash create":{"type":"method","name":"create","children":[],"call":[]}," RSpec Core Metadata ExampleHash full_description":{"type":"method","name":"full_description","children":[],"call":[" build_description_from "," metadata [] "," metadata "," metadata [] [] "]}," RSpec Core Metadata ExampleHash described_class":{"type":"method","name":"described_class","children":[],"call":[" metadata [] [] "," metadata [] "," metadata "]}," RSpec Core Metadata ExampleHash create":{"type":"method","name":"create","children":[],"call":[]}," RSpec Core Metadata HashPopulator ensure_valid_user_keys":{"type":"method","name":"ensure_valid_user_keys","children":[],"call":[" raise ","(str \"                |\") gsub ","* * ","RESERVED_KEYS  join ","CallerFilter  first_non_rspec_line "," user_metadata has_key? "," user_metadata ","RESERVED_KEYS  each ","(str \"              |\") gsub "," user_metadata key? "]}," RSpec Core Metadata HashPopulator build_description_from":{"type":"method","name":"build_description_from","children":[],"call":["parent_description to_s + + ","parent_description to_s + ","parent_description to_s "," description_separator ","my_description to_s ","(send\n  (send\n    (lvar :parent_description) :to_s) :+\n  (lvar :separator)) << ","parent_description to_s == "," description_ description_separator  ","(send\n  (send\n    (lvar :parent_description) :to_s) :+\n  (lvar : description_separator )) << "]}," RSpec Core Metadata HashPopulator description_separator":{"type":"method","name":"description_separator","children":[],"call":["child_part =~ ","parent_part is_a? ","  freeze "," freeze ","(str \"^(?:#|::|\\\\.)\") match ","child_part to_s "]}," RSpec Core Metadata HashPopulator file_path_and_line_number_from":{"type":"method","name":"file_path_and_line_number_from","children":[],"call":["(str \"(.+?):(\\\\d+)(?:|:\\\\d+)\") match captures ","(str \"(.+?):(\\\\d+)(?:|:\\\\d+)\") match ","backtrace first ","l !~ ","backtrace detect ","backtrace find "]}," RSpec Core Metadata HashPopulator populate_location_attributes":{"type":"method","name":"populate_location_attributes","children":[],"call":[" metadata []= "," metadata ","line_number to_i ","Metadata  relative_path "," file_path_and_line_number_from "," caller "," block source_location "," block "," block respond_to? "," user_metadata delete "," user_metadata "," build_scoped_id_for "," metadata [] ","File  expand_path "," Metadata  relative_path _and_line_number_from "]}," RSpec Core Metadata HashPopulator populate":{"type":"method","name":"populate","children":[],"call":["RSpec  configuration apply_derived_metadata_to "," metadata ","RSpec  configuration "," metadata update "," user_metadata "," populate_location_attributes "," metadata []= "," described_class "," full_description "," build_description_from "," metadata [] "," description_args "," block ","Example ExecutionResult  new "," ensure_valid_user_keys "]}," RSpec Core Metadata HashPopulator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Metadata backtrace_from":{"type":"method","name":"backtrace_from","children":[],"call":[]}," RSpec Core Metadata build_hash_from":{"type":"method","name":"build_hash_from","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash After hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash After article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash After hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash Before hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash Before article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash Before hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash fetch":{"type":"method","name":"fetch","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoizedHash isolate_for_context_hook":{"type":"method","name":"isolate_for_context_hook","children":[],"call":[]}," RSpec Core Hooks HookCollections after_example_hooks_for":{"type":"method","name":"after_example_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups "]}," RSpec Core Hooks HookCollections before_example_hooks_for":{"type":"method","name":"before_example_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups reverse ","@owner parent_groups "]}," RSpec Core Hooks HookCollections after_context_hooks_for":{"type":"method","name":"after_context_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," [] [] "," [] "]}," RSpec Core Hooks HookCollections before_context_hooks_for":{"type":"method","name":"before_context_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," [] [] "," [] "]}," RSpec Core Hooks HookCollections find_hook":{"type":"method","name":"find_hook","children":[],"call":[" [] [] with "," [] [] "," [] "," after_example_hooks_for "," before_example_hooks_for "," around_example_hooks_for "," after_context_hooks_for "," before_context_hooks_for "," after_each_hooks_for "," before_each_hooks_for "," around_each_hooks_for "," after_all_hooks_for "," before_all_hooks_for "]}," RSpec Core Hooks HookCollections normalized_scope_for":{"type":"method","name":"normalized_scope_for","children":[],"call":["SCOPE_ALIASES  [] "]}," RSpec Core Hooks HookCollections known_scope?":{"type":"method","name":"known_scope?","children":[],"call":["SCOPE_ALIASES  keys include? ","SCOPE_ALIASES  keys ","SCOPES  include? "]}," RSpec Core Hooks HookCollections extract_scope_from":{"type":"method","name":"extract_scope_from","children":[],"call":[" raise ","ArgumentError  new ","SCOPE_ALIASES  keys join ","SCOPE_ALIASES  keys ","SCOPES  join ","a is_a? ","args any? "," normalized_scope_for ","args shift "," known_scope? ","args first "]}," RSpec Core Hooks HookCollections scope_and_options_from":{"type":"method","name":"scope_and_options_from","children":[],"call":["Metadata  build_hash_from "," extract_scope_from ","args first == ","args first "," extract_ extract_scope_from _from "]}," RSpec Core Hooks HookCollections process":{"type":"method","name":"process","children":[],"call":[" [] [] << "," [] [] "," [] ","a hooks [] [] include? ","a hooks [] [] ","a hooks [] ","a hooks ","host parent_groups any? ","host parent_groups ","hook options_apply? ","scope == ","globals [] [] each ","globals [] [] ","globals [] ","repository append ","hooks_to_process each "," ensure_hooks_initialized_for ","hooks_to_process empty? ","group hooks all_hooks_for ","group hooks ","FlatMap  flat_map ","globals processable_hooks_for "," ensure_hooks_initialized_for  append ","globals processable_hooks_for  each ","globals processable_hooks_for  empty? "]}," RSpec Core Hooks HookCollections run":{"type":"method","name":"run","children":[],"call":[" find_hook run "," find_hook ","RSpec  configuration dry_run? ","RSpec  configuration "," run_around_example_hooks_for "," run_example_hooks_for "," run_owned_hooks_for ","example_or_group class metadata [] ","example_or_group class metadata ","example_or_group class ","scope == "]}," RSpec Core Hooks HookCollections register":{"type":"method","name":"register","children":[],"call":[" [] [] __send__ ","HOOK_TYPES  [] [] new ","HOOK_TYPES  [] [] ","HOOK_TYPES  [] "," [] [] "," [] "," scope_and_options_from "," ensure_hooks_initialized_for __send__ "," ensure_hooks_initialized_for ","RSpec  warn_with ","position == ","scope == "," ensure_HOOK_TYPES  [] [] new s_initialized_for __send__ "," ensure_HOOK_TYPES  [] [] new s_initialized_for "]}," RSpec Core Hooks HookCollections around_example_hooks_for":{"type":"method","name":"around_example_hooks_for","children":[],"call":["AroundHookCollection  new for ","AroundHookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups "]}," RSpec Core Hooks HookCollections register_globals":{"type":"method","name":"register_globals","children":[],"call":[" process ","host parent_groups ","host host parent_groups  "]}," RSpec Core Hooks HookCollections []":{"type":"method","name":"[]","children":[],"call":["@data [] "]}," RSpec Core Hooks HookCollections initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Hooks BaseHookCollection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Hooks AfterContextHook run":{"type":"method","name":"run","children":[],"call":["RSpec  configuration reporter message ","e backtrace first ","e backtrace ","e message ","e class ","RSpec  configuration reporter ","RSpec  configuration ","example instance_exec "," block ","RSpec  configuration reporter notify_non_example_exception "]}," Formatters Loader notifications_for":{"type":"method","name":"notifications_for","children":[],"call":["notifications + ","Set  new ","Loader  formatters fetch ","Loader  formatters ","formatter_class ancestors inject ","formatter_class ancestors ","notifications merge "," RSpec Core Set  new "]}," Formatters Loader existing_formatter_implements?":{"type":"method","name":"existing_formatter_implements?","children":[],"call":["@reporter registered_listeners any? ","@reporter registered_listeners "]}," Formatters Loader formatters":{"type":"method","name":"formatters","children":[],"call":[]}," Formatters register":{"type":"method","name":"register","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor CoderayConverter convert":{"type":"method","name":"convert","children":[],"call":["CodeRay  scan html ","CodeRay  scan "]}," RSpec Core Formatters ProfileFormatter bold":{"type":"method","name":"bold","children":[],"call":["ConsoleCodes  wrap "]}," RSpec Core Formatters ProfileFormatter format_caller":{"type":"method","name":"format_caller","children":[],"call":["RSpec  configuration backtrace_formatter backtrace_line ","caller_info to_s split first ","caller_info to_s split ","caller_info to_s ","RSpec  configuration backtrace_formatter ","RSpec  configuration "]}," RSpec Core Formatters ProfileFormatter dump_profile_slowest_example_groups":{"type":"method","name":"dump_profile_slowest_example_groups","children":[],"call":["@output puts ","hash [] ","Helpers  pluralize ","Helpers  format_seconds "," bold ","profile slowest_groups each ","profile slowest_groups ","profile slowest_groups size ","profile slowest_groups empty? "]}," RSpec Core Formatters ProfileFormatter dump_profile_slowest_examples":{"type":"method","name":"dump_profile_slowest_examples","children":[],"call":["@output puts "," format_caller ","example location "," bold ","Helpers  format_seconds ","example execution_result run_time ","example execution_result ","example full_description ","profile slowest_examples each ","profile slowest_examples ","profile percentage ","profile slow_duration ","profile slowest_examples size "]}," RSpec Core Formatters ProfileFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[" dump_profile_slowest_example_groups "," dump_profile_slowest_examples "]}," RSpec Core Formatters ProfileFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters JsonFormatter format_example":{"type":"method","name":"format_example","children":[],"call":["example execution_result run_time ","example execution_result ","example metadata [] ","example metadata ","example execution_result status to_s ","example execution_result status ","example full_description ","example description ","example execution_result [] ","example execution_result pending_message ","example id "]}," RSpec Core Formatters JsonFormatter dump_profile_slowest_example_groups":{"type":"method","name":"dump_profile_slowest_example_groups","children":[],"call":["@output_hash [] []= ","hash update ","profile slowest_groups map ","profile slowest_groups ","@output_hash [] "," slowest_groups map "," slowest_groups "]}," RSpec Core Formatters JsonFormatter dump_profile_slowest_examples":{"type":"method","name":"dump_profile_slowest_examples","children":[],"call":["@output_hash [] []= ","profile duration ","@output_hash [] ","profile slow_duration ","hash []= ","example execution_result run_time ","example execution_result "," format_example tap "," format_example ","sorted_examples map ","profile slowest_examples ","@output_hash []= ","sorted_examples [] ","example execution_result [] ","sorted_examples [] map "," slowest_examples ","profile slowest_examples map ","profile slowest_examples  map "," slowest_examples  map ","profile slowest_examples  [] "," slowest_examples  [] ","profile slowest_examples  [] map "," slowest_examples  [] map "]}," RSpec Core Formatters JsonFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[" dump_profile_slowest_example_groups "," dump_profile_slowest_examples ","@output_hash []= "]}," RSpec Core Formatters ConsoleCodes configuration_color":{"type":"method","name":"configuration_color","children":[],"call":["RSpec  configuration __send__ ","RSpec  configuration "]}," RSpec Core FlatMap flat_map":{"type":"method","name":"flat_map","children":[],"call":["(send\n  (lvar :array) :map) flatten ","array map ","array flat_map ","array map flatten "]}," RSpec Core ExclusionRules include_example?":{"type":"method","name":"include_example?","children":[],"call":["example any_apply? "]}," RSpec Core InclusionRules is_standalone_filter?":{"type":"method","name":"is_standalone_filter?","children":[],"call":["rules has_key? ","STANDALONE_FILTERS  any? ","rules key? "]}," RSpec Core InclusionRules replace_filters":{"type":"method","name":"replace_filters","children":[],"call":[" opposite clear "," opposite ","@rules replace "]}," RSpec Core InclusionRules set_standalone_filter":{"type":"method","name":"set_standalone_filter","children":[],"call":[" replace_filters "," is_standalone_filter? "," standalone? "]}," RSpec Core InclusionRules standalone?":{"type":"method","name":"standalone?","children":[],"call":[" is_standalone_filter? "]}," RSpec Core InclusionRules include_example?":{"type":"method","name":"include_example?","children":[],"call":["example any_apply? ","@rules empty? "]}," RSpec Core InclusionRules use":{"type":"method","name":"use","children":[],"call":[" set_standalone_filter "," apply_standalone_filter "]}," RSpec Core InclusionRules add_with_low_priority":{"type":"method","name":"add_with_low_priority","children":[],"call":[" set_standalone_filter "," apply_standalone_filter "]}," RSpec Core InclusionRules add":{"type":"method","name":"add","children":[],"call":[" set_standalone_filter "," apply_standalone_filter "]}," RSpec Core InclusionRules add_location":{"type":"method","name":"add_location","children":[],"call":[" replace_filters "]}," RSpec Core FilterRules description":{"type":"method","name":"description","children":[],"call":[" rules inspect gsub gsub gsub "," rules inspect gsub gsub "," rules inspect gsub "," rules inspect "," rules "]}," RSpec Core FilterRules each_pair":{"type":"method","name":"each_pair","children":[],"call":["@rules each_pair "]}," RSpec Core FilterRules empty?":{"type":"method","name":"empty?","children":[],"call":[" rules empty? "," rules "]}," RSpec Core FilterRules []":{"type":"method","name":"[]","children":[],"call":["@rules [] "]}," RSpec Core FilterRules fetch":{"type":"method","name":"fetch","children":[],"call":["@rules fetch "]}," RSpec Core FilterRules delete":{"type":"method","name":"delete","children":[],"call":["@rules delete "]}," RSpec Core FilterRules clear":{"type":"method","name":"clear","children":[],"call":["@rules clear "]}," RSpec Core FilterRules use_only":{"type":"method","name":"use_only","children":[],"call":["@rules replace "," opposite delete "," opposite ","updated each_key "]}," RSpec Core FilterRules add_with_low_priority":{"type":"method","name":"add_with_low_priority","children":[],"call":["@rules replace ","updated delete ","updated [] == ","updated [] "," opposite each_pair "," opposite ","_updated merge ","updated merge ","_updated merge  delete ","updated merge  delete ","_updated merge  [] == ","updated merge  [] == ","_updated merge  [] ","updated merge  [] ","__updated merge  merge ","_updated merge  merge ","updated merge  merge "]}," RSpec Core FilterRules add":{"type":"method","name":"add","children":[],"call":[" opposite delete "," opposite ","@rules merge! each_key ","@rules merge! "]}," RSpec Core FilterRules initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," RSpec Core FilterRules build":{"type":"method","name":"build","children":[],"call":[]}," RSpec ExampleGroups disambiguate":{"type":"method","name":"disambiguate","children":[],"call":[]}," RSpec ExampleGroups base_name_for":{"type":"method","name":"base_name_for","children":[],"call":[" _base_name_for + "," _base_name_for "]}," RSpec ExampleGroups constant_scope_for":{"type":"method","name":"constant_scope_for","children":[],"call":[]}," RSpec ExampleGroups assign_const":{"type":"method","name":"assign_const","children":[],"call":[]}," RSpec Core AnonymousExampleGroup metadata":{"type":"method","name":"metadata","children":[],"call":[]}," RSpec Core ExampleGroup pending_metadata_and_block_for":{"type":"method","name":"pending_metadata_and_block_for","children":[],"call":[" instance_exec "," pending ","Proc  new ","options []= ","options [] ","String  === "]}," RSpec Core ExampleGroup for_filtered_examples":{"type":"method","name":"for_filtered_examples","children":[],"call":[]}," RSpec Core ExampleGroup ordering_strategy":{"type":"method","name":"ordering_strategy","children":[],"call":[]}," RSpec Core ExampleGroup run_after_context_hooks":{"type":"method","name":"run_after_context_hooks","children":[],"call":[]}," RSpec Core ExampleGroup run_before_context_hooks":{"type":"method","name":"run_before_context_hooks","children":[],"call":[]}," RSpec Core ExampleGroup store_before_context_ivars":{"type":"method","name":"store_before_context_ivars","children":[],"call":[]}," RSpec Core ExampleGroup before_context_ivars":{"type":"method","name":"before_context_ivars","children":[],"call":[]}," RSpec Core ExampleGroup define_example_group_method":{"type":"method","name":"define_example_group_method","children":[],"call":[]}," RSpec Core ExampleGroup define_singleton_method":{"type":"method","name":"define_singleton_method","children":[],"call":[]}," RSpec Core SuiteHookContext set_exception":{"type":"method","name":"set_exception","children":[],"call":[" raise ","RSpec  world wants_to_quit= ","RSpec  world "," reporter notify_non_example_exception "," description "," reporter "]}," RSpec Core SuiteHookContext initialize":{"type":"method","name":"initialize","children":[],"call":["AnonymousExampleGroup  new "]}," RSpec Core Example ExecutionResult issue_deprecation":{"type":"method","name":"issue_deprecation","children":[],"call":["RSpec  deprecate "]}," RSpec Core Example ExecutionResult get_value":{"type":"method","name":"get_value","children":[],"call":[" status to_s "," status ","name == "]}," RSpec Core Example ExecutionResult set_value":{"type":"method","name":"set_value","children":[],"call":["value to_sym ","name == "]}," RSpec Core Example ExecutionResult hash_for_delegation":{"type":"method","name":"hash_for_delegation","children":[],"call":[" status to_s "," status ","hash [] "," tap "]}," RSpec Core Example ExecutionResult record_finished":{"type":"method","name":"record_finished","children":[],"call":[" run_time= ","(send\n  (lvar :finished_at) :-\n  (send nil :started_at)) to_f ","finished_at - "," started_at "," finished_at= "," status= "," calculate_run_time "]}," RSpec Core Example skip_message":{"type":"method","name":"skip_message","children":[],"call":[" skip ","String  === "]}," RSpec Core Example mocks_need_verification?":{"type":"method","name":"mocks_need_verification?","children":[],"call":[" execution_result pending_fixed? "," execution_result "," exception nil? "," exception "]}," RSpec Core Example run_after_example":{"type":"method","name":"run_after_example","children":[],"call":["@example_group_instance teardown_mocks_for_rspec "," set_exception "," assign_generated_description ","RSpec  configuration expecting_with_rspec? ","RSpec  configuration "," verify_mocks ","@example_group_class hooks run ","@example_group_class hooks "," hooks run "," hooks "]}," RSpec Core Example run_before_example":{"type":"method","name":"run_before_example","children":[],"call":["@example_group_class hooks run ","@example_group_class hooks ","@example_group_instance setup_mocks_for_rspec "," hooks run "," hooks "]}," RSpec Core Example with_around_example_hooks":{"type":"method","name":"with_around_example_hooks","children":[],"call":[" set_exception ","@example_group_class hooks run ","Procsy  new ","@example_group_class hooks "," around_example_hooks empty? "," around_example_hooks "," hooks run "," hooks ","RSpec  current_scope= "]}," RSpec Core Example instance_exec":{"type":"method","name":"instance_exec","children":[],"call":["@example_group_instance instance_exec "]}," RSpec Core Example instance_exec_with_rescue":{"type":"method","name":"instance_exec_with_rescue","children":[],"call":[" set_exception ","@example_group_instance instance_exec ","@example_group_instance instance_exec_with_rescue "]}," RSpec Core Example skip_with_exception":{"type":"method","name":"skip_with_exception","children":[],"call":[" finish ","Pending  mark_skipped! ","exception argument "," start "]}," RSpec Core Example around_example_hooks":{"type":"method","name":"around_example_hooks","children":[],"call":[" example_group hooks around_example_hooks_for "," example_group hooks "," example_group "]}," RSpec Core Example Procsy wrap":{"type":"method","name":"wrap","children":[],"call":[" class new "," example "," class "," metadata "]}," RSpec Core DSL change_global_dsl":{"type":"method","name":"change_global_dsl","children":[],"call":[]}," RSpec Core DSL expose_example_group_alias_globally":{"type":"method","name":"expose_example_group_alias_globally","children":[],"call":[]}," RSpec Core DSL remove_globally!":{"type":"method","name":"remove_globally!","children":[],"call":[]}," RSpec Core DSL expose_globally!":{"type":"method","name":"expose_globally!","children":[],"call":[]}," RSpec Core DSL expose_example_group_alias":{"type":"method","name":"expose_example_group_alias","children":[],"call":[]}," RSpec Core DSL exposed_globally?":{"type":"method","name":"exposed_globally?","children":[],"call":[]}," RSpec Core DSL example_group_aliases":{"type":"method","name":"example_group_aliases","children":[],"call":[]}," RSpec Core DRbOptions add_requires":{"type":"method","name":"add_requires","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," RSpec Core DRbOptions add_libs":{"type":"method","name":"add_libs","children":[],"call":["argv << << ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," RSpec Core DRbOptions add_formatters":{"type":"method","name":"add_formatters","children":[],"call":["argv << << ","pair [] ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," RSpec Core DRbOptions add_filter":{"type":"method","name":"add_filter","children":[],"call":["argv << << ","argv << ","tag << ","v is_a? ","k to_s ","name == ","CONDITIONAL_FILTERS  include? ","hash each_pair ","hash empty? ","(str \"~\") dup ","k to_s  << ","(str \"~\") dup  << "]}," RSpec Core DRbOptions add_full_description":{"type":"method","name":"add_full_description","children":[],"call":["argv << << ","description source delete ","description source ","argv << ","@submitted_options [] each ","@submitted_options [] "]}," RSpec Core DRbOptions add_failure_exit_code":{"type":"method","name":"add_failure_exit_code","children":[],"call":["argv << << ","@submitted_options [] to_s ","@submitted_options [] ","argv << "]}," RSpec Core DRbOptions options":{"type":"method","name":"options","children":[],"call":["argv + ","@submitted_options [] "," add_requires "," add_libs "," add_formatters "," add_filter ","@filter_manager exclusions ","@filter_manager inclusions "," add_full_description "," add_failure_exit_code ","argv << << ","argv << "," add_error_exit_code ","@submitted_options [] == "]}," RSpec Core DRbOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core DRbRunner drb_argv":{"type":"method","name":"drb_argv","children":[],"call":["DRbOptions  new options ","DRbOptions  new ","@configuration filter_manager ","@options options ","@options configure_filter_manager "]}," RSpec Core DRbRunner run":{"type":"method","name":"run","children":[],"call":["spec_server run "," drb_argv ","DRbObject  new_with_uri "," drb_port ","DRb  start_service ","DRbObject  new_with_uri  run "]}," RSpec Core DRbRunner drb_port":{"type":"method","name":"drb_port","children":[],"call":["ENV  [] ","@options options [] ","@options options "]}," RSpec Core DRbRunner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ConfigurationOptions organize_options":{"type":"method","name":"organize_options","children":[],"call":["oldval + ","(sym :libs) include? ","hash merge ","(send\n  (begin\n    (send\n      (send\n        (send nil :file_options) :<<\n        (send nil :command_line_options)) :<<\n      (send nil :env_options))) :each) inject ","@filter_manager_exclusions << ","opts delete ","opts key? ","@filter_manager_inclusions << ","(send\n  (send\n    (send nil :file_options) :<<\n    (send nil :command_line_options)) :<<\n  (send nil :env_options)) each "," file_options << << "," env_options "," file_options << "," command_line_options "," file_options ","@filter_manager_options << ","@options inject "]}," RSpec Core ConfigurationOptions configure_filter_manager":{"type":"method","name":"configure_filter_manager","children":[],"call":["filter_manager exclude ","@filter_manager_exclusions each ","filter_manager include ","@filter_manager_inclusions each ","filter_manager __send__ ","@filter_manager_options each "]}," RSpec Core Configuration rspec_expectations_loaded?":{"type":"method","name":"rspec_expectations_loaded?","children":[],"call":["RSpec Expectations  configuration "]}," RSpec Core Configuration rspec_mocks_loaded?":{"type":"method","name":"rspec_mocks_loaded?","children":[],"call":["RSpec Mocks  configuration "]}," RSpec Core Configuration conditionally_disable_expectations_monkey_patching":{"type":"method","name":"conditionally_disable_expectations_monkey_patching","children":[],"call":["RSpec Expectations  configuration syntax= ","RSpec Expectations  configuration "," rspec_expectations_loaded? "," disable_monkey_patching "]}," RSpec Core Configuration conditionally_disable_mocks_monkey_patching":{"type":"method","name":"conditionally_disable_mocks_monkey_patching","children":[],"call":["config patch_marshal_to_support_partial_doubles= ","config syntax= ","RSpec Mocks  configuration tap ","RSpec Mocks  configuration "," rspec_mocks_loaded? "," disable_monkey_patching "]}," RSpec Core Configuration apply_derived_metadata_to":{"type":"method","name":"apply_derived_metadata_to","children":[],"call":["block call ","MetadataFilter  any_apply? ","filter empty? ","@derived_metadata_blocks each "," raise ","already_run_blocks << ","already_run_blocks include? tap ","already_run_blocks include? ","@derived_metadata_blocks items_for all? ","@derived_metadata_blocks items_for ","200 times ","Set  new ","@derived_metadata_blocks items_for each ","Set  new  << ","Set  new  include? tap ","Set  new  include? "]}," RSpec Core Configuration define_derived_metadata":{"type":"method","name":"define_derived_metadata","children":[],"call":["@derived_metadata_blocks << ","Metadata  build_hash_from ","@derived_metadata_blocks append ","@derived_Metadata  build_hash_from data_blocks << ","@derived_Metadata  build_hash_from data_blocks append "]}," RSpec Core Configuration disable_monkey_patching!":{"type":"method","name":"disable_monkey_patching!","children":[],"call":[" conditionally_disable_expectations_monkey_patching "," conditionally_disable_mocks_monkey_patching "," disable_monkey_patching= "," expose_dsl_globally= "]}," RSpec Core Configuration delegate_to_ordering_manager":{"type":"method","name":"delegate_to_ordering_manager","children":[],"call":[]}," RSpec Core Configuration alias_example_group_to":{"type":"method","name":"alias_example_group_to","children":[],"call":["RSpec Core ExampleGroup  define_example_group_method ","Metadata  build_hash_from ","RSpec Core ExampleGroup  alias_example_group_to "]}," RSpec Core Configuration DeprecationReporterBuffer play_onto":{"type":"method","name":"play_onto","children":[],"call":["reporter deprecation ","@calls each "]}," RSpec Core Configuration DeprecationReporterBuffer deprecation":{"type":"method","name":"deprecation","children":[],"call":["@calls << "]}," RSpec Core Configuration DeprecationReporterBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Configuration default_formatter=":{"type":"method","name":"default_formatter=","children":[],"call":[" formatter_loader default_formatter= "," formatter_loader "]}," RSpec Core Configuration default_formatter":{"type":"method","name":"default_formatter","children":[],"call":[" formatter_loader default_formatter "," formatter_loader "]}," RSpec Core Configuration expose_dsl_globally=":{"type":"method","name":"expose_dsl_globally=","children":[],"call":["Core SharedExampleGroup TopLevelDSL  remove_globally! ","Core DSL  remove_globally! ","Core SharedExampleGroup TopLevelDSL  expose_globally! ","Core DSL  expose_globally! "]}," RSpec Core Configuration expose_dsl_globally?":{"type":"method","name":"expose_dsl_globally?","children":[],"call":["Core DSL  exposed_globally? "]}," RSpec Core Configuration add_read_only_setting":{"type":"method","name":"add_read_only_setting","children":[],"call":[]}," RSpec Core BacktraceFormatter doesnt_match_inclusion_pattern_unless_system_exclusion?":{"type":"method","name":"doesnt_match_inclusion_pattern_unless_system_exclusion?","children":[],"call":["p =~ ","@inclusion_patterns none? ","line =~ ","@system_exclusion_patterns any? "]}," RSpec Core BacktraceFormatter matches_an_exclusion_pattern?":{"type":"method","name":"matches_an_exclusion_pattern?","children":[],"call":["line =~ ","@exclusion_patterns any? "]}," RSpec Core BacktraceFormatter exclude?":{"type":"method","name":"exclude?","children":[],"call":[" doesnt_match_inclusion_pattern_unless_system_exclusion? "," matches_an_exclusion_pattern? ","p =~ ","@inclusion_patterns none? ","@exclusion_patterns any? "," matches? ! "," matches? ","Metadata  relative_path "," inclusion_patterns "," exclusion_patterns "]}," RSpec Core BacktraceFormatter full_backtrace?":{"type":"method","name":"full_backtrace?","children":[],"call":["@exclusion_patterns empty? "," exclusion_patterns empty? "," exclusion_patterns "]}," RSpec Core BacktraceFormatter full_backtrace=":{"type":"method","name":"full_backtrace=","children":[],"call":[]}," RSpec Core BacktraceFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  new ","Dir  getwd "," + ","Regexp  union ","s gsub ","(str \"/libd*/ruby/\") map "," << ","patterns map! ","patterns << ","RUBY_PLATFORM  == "," inclusion_patterns << "," inclusion_patterns "," matches? ","File  join "]}," RSpec Core Backports Random new_seed":{"type":"method","name":"new_seed","children":[],"call":[]}," RSpec Core Backports Random Implementation _rand_range":{"type":"method","name":"_rand_range","children":[],"call":["limit begin + ","limit begin ","r > ","@mt random_float * * ","@mt random_float * ","@mt random_float "," loop ","range <= ","limit exclude_end? ","range < ","Backports  coerce_to ","@mt random_integer ","Backports  coerce_to_int ","range respond_to? ","range is_a? ! ","range is_a? ","limit end - ","limit end ","@mt random_float * *  > ","@mt @mt random_float * * andom_float * * ","@mt @mt random_float * * andom_float * ","@mt @mt random_float * * andom_float ","@mt random_float * * ange <= ","Backports  coerce_to  <= ","Backports  coerce_to_int  <= ","limit end -  <= ","@mt random_float * * ange < ","Backports  coerce_to  < ","Backports  coerce_to_int  < ","limit end -  < ","Backpo@mt random_float * * ts  coe@mt random_float * * ce_to ","@mt @mt random_float * * andom_intege@mt random_float * *  ","Backpo@mt random_float * * ts  coe@mt random_float * * ce_to_int ","@mt random_float * * ange @mt random_float * * espond_to? ","Backports  coerce_to  respond_to? ","Backports  coerce_to_int  respond_to? ","limit end -  respond_to? ","@mt random_float * * ange is_a? ! ","Backports  coerce_to  is_a? ! ","Backports  coerce_to_int  is_a? ! ","limit end -  is_a? ! ","@mt random_float * * ange is_a? ","Backports  coerce_to  is_a? ","Backports  coerce_to_int  is_a? ","limit end -  is_a? "]}," RSpec Core Backports Random Implementation left":{"type":"method","name":"left","children":[],"call":["@mt left "]}," RSpec Core Backports Random Implementation state":{"type":"method","name":"state","children":[],"call":["@mt state_as_bignum "]}," RSpec Core Backports Random Implementation marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["@mt marshal_load ","MT19937  allocate ","ary pop ","MT19937  allocate  marshal_load "]}," RSpec Core Backports Random Implementation marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":["@mt marshal_dump << ","@mt marshal_dump "]}," RSpec Core Backports Random Implementation ==":{"type":"method","name":"==","children":[],"call":[" state == ","other send "," state "," left == "," left "," seed == ","other seed "," seed ","other is_a? "]}," RSpec Core Backports Random Implementation bytes":{"type":"method","name":"bytes","children":[],"call":["@mt random_bytes "," raise ","nb < ","Backports  coerce_to_int ","Backports  coerce_to_int  < "]}," RSpec Core Backports Random Implementation rand":{"type":"method","name":"rand","children":[],"call":[" raise ","@mt random_integer ","limit <= ","Backports  coerce_to_int "," _rand_range ","limit * ","@mt random_float ","Backports  coerce_to_int  <= ","Backports  coerce_to_int  * "]}," RSpec Core Backports Random Implementation seed_rand":{"type":"method","name":"seed_rand","children":[],"call":["MT19937  [] ","Random  new_seed ","new_seed nonzero? ","Backports  coerce_to_int ","Random  Backports  coerce_to_int  ","Backports  coerce_to_int  nonzero? "]}," RSpec Core Backports Random Implementation initialize":{"type":"method","name":"initialize","children":[],"call":[" seed_rand "]}," RSpec Core Backports Random MT19937 mask_32_bits":{"type":"method","name":"mask_32_bits","children":[],"call":["n >> ","MASK_BY  each "]}," RSpec Core Backports Random MT19937 []":{"type":"method","name":"[]","children":[],"call":[]}," RSpec Core Backports Random MT19937 convert_seed":{"type":"method","name":"convert_seed","children":[],"call":[]}," RSpec Core Backports Random MT19937 marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["@state []= ","b & ","STATE_SIZE  times ","Array  new ","MT19937 STATE_SIZE  - ","Array  new  []= "]}," RSpec Core Backports Random MT19937 marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" left "," state_as_bignum "]}," RSpec Core Backports Random MT19937 left":{"type":"method","name":"left","children":[],"call":["MT19937 STATE_SIZE  - "]}," RSpec Core Backports Random MT19937 state_as_bignum":{"type":"method","name":"state_as_bignum","children":[],"call":["val << ","32 * ","@state each_with_index "]}," RSpec Core Backports Random MT19937 random_bytes":{"type":"method","name":"random_bytes","children":[],"call":["random pack [] ","random pack ","L * "," random_32_bits ","nb_32_bits times map ","nb_32_bits times ","(send\n  (lvar :nb) :+\n  (int 3)) / ","nb + ","(send\n  (lvar :nb) :+\n  (int 3)) /  times map ","(send\n  (lvar :nb) :+\n  (int 3)) /  times "]}," RSpec Core Backports Random MT19937 random_integer":{"type":"method","name":"random_integer","children":[],"call":[" random_32_bits ","nb_full_32 times "," random_32_bits & ","rand < "," mask_32_bits ","n > ","upto - ","  random_32_bits & om_32_bits "," raupto - dom_32_bits ","upto - b_full_32 times ","  random_32_bits & om_32_bits & "," raupto - dom_32_bits & "," random_32_bits &  < ","raupto - d < ","  mask_32_bits _32_bits ","upto -  > "]}," RSpec Core Backports Random MT19937 random_float":{"type":"method","name":"random_float","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (send nil :random_32_bits) :>>\n        (int 5))) :*\n    (float 67108864.0)) :+\n  (begin\n    (send\n      (send nil :random_32_bits) :>>\n      (int 6)))) * ","(send\n  (send nil :random_32_bits) :>>\n  (int 5)) * + "," random_32_bits >> "," random_32_bits ","(send\n  (send nil :random_32_bits) :>>\n  (int 5)) * "]}," RSpec Core Backports Random MT19937 random_32_bits":{"type":"method","name":"random_32_bits","children":[],"call":["y >> ","(send\n  (lvar :y) :<<\n  (int 15)) & ","y << ","(send\n  (lvar :y) :<<\n  (int 7)) & ","@state [] "," next_state ","@last_read >= ","@state []  >> ","(send\n  (lvar :@state [] ) :<<\n  (int 15)) & ","@state []  << ","(send\n  (lvar :@state [] ) :<<\n  (int 7)) & "]}," RSpec Core Backports Random MT19937 seed=":{"type":"method","name":"seed=","children":[],"call":[" raise ","@state []= ","@state [] ","(op-asgn\n  (lvasgn :i) :+\n  (int 1)) >= ","(send\n  (send\n    (ivar :@state) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1566083941))) - & ","(send\n  (send\n    (ivar :@state) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1566083941))) - ","@state [] ^ ","(send\n  (send\n    (ivar :@state) :[]\n    (send\n      (lvar :i) :-\n      (int 1))) :^\n  (send\n    (send\n      (ivar :@state) :[]\n      (send\n        (lvar :i) :-\n        (int 1))) :>>\n    (int 30))) * ","@state [] >> ","i - ","(send\n  (const nil :STATE_SIZE) :-\n  (int 1)) times ","STATE_SIZE  - ","(op-asgn\n  (lvasgn :j) :+\n  (int 1)) >= ","seed size ","(send\n  (send\n    (ivar :@state) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + + & ","(send\n  (send\n    (ivar :@state) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + + ","seed [] ","(send\n  (send\n    (ivar :@state) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + ","(const nil :STATE_SIZE) max times ","(const nil :STATE_SIZE) max "," seed= ","(send\n  (send\n    (int 1812433253) :*\n    (begin\n      (send\n        (send\n          (ivar :@state) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :@state) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30))))) :+\n  (lvar :i)) & ","1812433253 * + ","1812433253 * ","(irange\n  (int 1)\n  (const nil :LAST_STATE)) each ","seed & ","Array  new ","Array  new  []= ","Array  new  [] ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1566083941))) - & ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1566083941))) - ","Array  new  [] ^ ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (send\n      (lvar :i) :-\n      (int 1))) :^\n  (send\n    (send\n      (ivar :Array  new ) :[]\n      (send\n        (lvar :i) :-\n        (int 1))) :>>\n    (int 30))) * ","Array  new  [] >> ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + + & ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + + ","(send\n  (send\n    (ivar :Array  new ) :[]\n    (lvar :i)) :^\n  (send\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30)))) :*\n    (int 1664525))) + ","(send\n  (send\n    (int 1812433253) :*\n    (begin\n      (send\n        (send\n          (ivar :Array  new ) :[]\n          (send\n            (lvar :i) :-\n            (int 1))) :^\n        (send\n          (send\n            (ivar :Array  new ) :[]\n            (send\n              (lvar :i) :-\n              (int 1))) :>>\n          (int 30))))) :+\n  (lvar :i)) & "]}," RSpec Core Backports Random MT19937 next_state":{"type":"method","name":"next_state","children":[],"call":["@state [] ","mix odd? ","@state []= ","@state [] ^ ","mix >> ","i + - ","i + ","@state [] & | ","@state [] & ","STATE_SIZE  times ","@state [] & |  odd? ","@state [] & |  >> "]}," RSpec Core Backports Random MT19937 initialize":{"type":"method","name":"initialize","children":[],"call":[" seed= "]}," RSpec Core Backports coerce_to_int":{"type":"method","name":"coerce_to_int","children":[],"call":[]}," RSpec Core Backports coerce_to":{"type":"method","name":"coerce_to","children":[],"call":[]}," RSpec Core Formatters BaseFormatter slowest_groups":{"type":"method","name":"slowest_groups","children":[],"call":["(send\n  (lvar :example_groups) :sort_by) first ","hash [] -@ ","hash [] ","example_groups sort_by ","hash []= ","hash [] to_f / ","hash [] to_f ","example_groups each_value ","example_groups keys length <= ","example_groups keys length ","example_groups keys ","example_groups [] []= ","example example_group top_level_description ","example example_group ","example_groups [] ","example_groups [] has_key? ","example_groups [] [] ","example execution_result [] ","example execution_result ","Hash  new ","example example_group parent_groups last metadata [] [] ","example example_group parent_groups last metadata [] ","example example_group parent_groups last metadata ","example example_group parent_groups last ","example example_group parent_groups "," examples each "," examples ","RSpec  configuration profile_examples ","RSpec  configuration "]}," RSpec Core Formatters BaseFormatter slowest_examples":{"type":"method","name":"slowest_examples","children":[],"call":["i + ","e execution_result [] ","e execution_result ","exs inject ","(send nil :examples) map "," examples ","(send\n  (send nil :examples) :sort_by) reverse first ","(send\n  (send nil :examples) :sort_by) reverse ","example execution_result [] ","example execution_result "," examples sort_by ","RSpec  configuration profile_examples ","RSpec  configuration "]}," RSpec Core Formatters BaseFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[]}," RSpec Core FilterManager ExclusionFilterHash without_conditional_filters":{"type":"method","name":"without_conditional_filters","children":[],"call":["CONDITIONAL_FILTERS  [] == ","CONDITIONAL_FILTERS  [] "," reject ","CONDITIONAL_FILTERS  [] != "," select "]}," RSpec Core FilterManager ExclusionFilterHash empty_without_conditional_filters?":{"type":"method","name":"empty_without_conditional_filters?","children":[],"call":[" without_conditional_filters empty? "," without_conditional_filters "]}," RSpec Core FilterManager ExclusionFilterHash description":{"type":"method","name":"description","children":[],"call":["FilterManager  inspect_filter_hash "," without_conditional_filters "]}," RSpec Core FilterManager ExclusionFilterHash initialize":{"type":"method","name":"initialize","children":[],"call":[" store ","CONDITIONAL_FILTERS  each "]}," RSpec Core FilterManager InclusionFilterHash description":{"type":"method","name":"description","children":[],"call":["FilterManager  inspect_filter_hash "]}," RSpec Core FilterManager inspect_filter_hash":{"type":"method","name":"inspect_filter_hash","children":[],"call":[]}," RSpec Core ExampleGroup instance_exec_with_rescue":{"type":"method","name":"instance_exec_with_rescue","children":[],"call":[" raise ","RSpec  current_example set_exception ","RSpec  current_example "," instance_exec "]}," Core Notifications SummaryNotification summary_line":{"type":"method","name":"summary_line","children":[],"call":["summary << "," pending_count "," pending_count > ","summary << << "," pluralize "," failure_count "," example_count "," pluralize  << "," pluralize  << << "]}," RSpec Core Hooks HookCollections after_each_hooks_for":{"type":"method","name":"after_each_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups "]}," RSpec Core Hooks HookCollections before_each_hooks_for":{"type":"method","name":"before_each_hooks_for","children":[],"call":["HookCollection  new for ","HookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups reverse ","@owner parent_groups "]}," RSpec Core Hooks HookCollections after_all_hooks_for":{"type":"method","name":"after_all_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," [] [] "," [] "]}," RSpec Core Hooks HookCollections before_all_hooks_for":{"type":"method","name":"before_all_hooks_for","children":[],"call":["GroupHookCollection  new for ","GroupHookCollection  new "," [] [] "," [] "]}," RSpec Core Hooks HookCollections around_each_hooks_for":{"type":"method","name":"around_each_hooks_for","children":[],"call":["AroundHookCollection  new for ","AroundHookCollection  new ","a hooks [] [] ","a hooks [] ","a hooks ","FlatMap  flat_map ","@owner parent_groups "]}," RSpec Core Formatters LegacyFormatter close":{"type":"method","name":"close","children":[],"call":["@formatter close "]}," RSpec Core Formatters LegacyFormatter seed":{"type":"method","name":"seed","children":[],"call":["@formatter seed ","notification seed "]}," RSpec Core Formatters LegacyFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":["@formatter dump_profile "]}," RSpec Core Formatters LegacyFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":["@formatter dump_pending "]}," RSpec Core Formatters LegacyFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["@formatter dump_summary ","summary pending_count ","summary failure_count ","summary example_count ","summary duration "]}," RSpec Core Formatters LegacyFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":["@formatter dump_failures "]}," RSpec Core Formatters LegacyFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@formatter start_dump "]}," RSpec Core Formatters LegacyFormatter stop":{"type":"method","name":"stop","children":[],"call":["@formatter stop "]}," RSpec Core Formatters LegacyFormatter message":{"type":"method","name":"message","children":[],"call":["@formatter message ","notification message "]}," RSpec Core Formatters LegacyFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@formatter example_failed ","notification example "]}," RSpec Core Formatters LegacyFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":["@formatter example_pending ","notification example "]}," RSpec Core Formatters LegacyFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":["@formatter example_passed ","notification example "]}," RSpec Core Formatters LegacyFormatter example_started":{"type":"method","name":"example_started","children":[],"call":["@formatter example_started ","notification example "]}," RSpec Core Formatters LegacyFormatter example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":["@formatter example_group_finished ","notification group "]}," RSpec Core Formatters LegacyFormatter example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["@formatter example_group_started ","notification group "]}," RSpec Core Formatters LegacyFormatter start":{"type":"method","name":"start","children":[],"call":["@formatter start ","notification count "]}," RSpec Core Formatters LegacyFormatter notifications":{"type":"method","name":"notifications","children":[],"call":["@formatter respond_to? ","NOTIFICATIONS  select "]}," RSpec Core Formatters LegacyFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["formatter_class new "," include ","formatter_class class_eval ","formatter_class ancestors include? ","formatter_class ancestors "]}," RSpec Core Formatters LegacyFormatter LegacyInterface stop":{"type":"method","name":"stop","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface close":{"type":"method","name":"close","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface start_dump":{"type":"method","name":"start_dump","children":[],"call":[]}," RSpec Core Formatters LegacyFormatter LegacyInterface seed":{"type":"method","name":"seed","children":[],"call":["Notifications SeedNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["Notifications SummaryNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface message":{"type":"method","name":"message","children":[],"call":["Notifications MessageNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_failed":{"type":"method","name":"example_failed","children":[],"call":["Notifications ExampleNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_pending":{"type":"method","name":"example_pending","children":[],"call":["Notifications ExampleNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_passed":{"type":"method","name":"example_passed","children":[],"call":["Notifications ExampleNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_started":{"type":"method","name":"example_started","children":[],"call":["Notifications ExampleNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":["Notifications GroupNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["Notifications GroupNotification  new "]}," RSpec Core Formatters LegacyFormatter LegacyInterface start":{"type":"method","name":"start","children":[],"call":["Notifications CountNotification  new "]}," RSpec Core FilterManager replace_filters":{"type":"method","name":"replace_filters","children":[],"call":["@exclusions clear ","@inclusions replace "]}," RSpec Core FilterManager set_standalone_filter":{"type":"method","name":"set_standalone_filter","children":[],"call":[" replace_filters ","args last "," is_standalone_filter? "," already_set_standalone_filter? "]}," RSpec Core ExampleGroup example_group":{"type":"method","name":"example_group","children":[],"call":[]}," RSpec Core ExampleGroup alias_example_group_to":{"type":"method","name":"alias_example_group_to","children":[],"call":["RSpec Core DSL  expose_example_group_alias "," example_group ","args << ","combined_metadata merge! ","args pop ","args last is_a? ","args last ","metadata dup ","(sclass\n  (self)\n  (self)) __send__ ","metadata dup  merge! "]}," RSpec Core ConfigurationOptions options":{"type":"method","name":"options","children":[],"call":["oldval + ","(sym :libs) include? ","h merge ","(send\n  (begin\n    (send\n      (send\n        (send nil :file_options) :<<\n        (send nil :command_line_options)) :<<\n      (send nil :env_options))) :each) inject "," filter_manager exclude ","opts delete "," filter_manager ","opts has_key? "," filter_manager include ","(send\n  (send\n    (send nil :file_options) :<<\n    (send nil :command_line_options)) :<<\n  (send nil :env_options)) each "," file_options << << "," env_options "," file_options << "," command_line_options "," file_options "]}," RSpec RecursiveConstMethods normalize_const_name":{"type":"method","name":"normalize_const_name","children":[],"call":["const_name sub "]}," RSpec RecursiveConstMethods recursive_const_defined?":{"type":"method","name":"recursive_const_defined?","children":[],"call":["(lvar :mod) join "," get_const_defined_on "," const_defined_on? ","(send\n  (const nil :Module) :===\n  (lvar :mod)) ! ","Module  === "," block_given? "," normalize_const_name split inject "," normalize_const_name split "," normalize_const_name "]}," RSpec RecursiveConstMethods recursive_const_get":{"type":"method","name":"recursive_const_get","children":[],"call":[" get_const_defined_on "," normalize_const_name split inject "," normalize_const_name split "," normalize_const_name "]}," RSpec RecursiveConstMethods constants_defined_on":{"type":"method","name":"constants_defined_on","children":[],"call":["mod constants "," const_defined_on? ","mod constants select "]}," RSpec RecursiveConstMethods get_const_defined_on":{"type":"method","name":"get_const_defined_on","children":[],"call":["mod const_get "," raise ","mod name "," const_defined_on? "]}," RSpec RecursiveConstMethods const_defined_on?":{"type":"method","name":"const_defined_on?","children":[],"call":["mod const_defined? "]}," Core Notifications FailedExampleNotification shared_group_line":{"type":"method","name":"shared_group_line","children":[],"call":["(str \"Shared Example Group: \\\"\") + "," backtrace_formatter backtrace_line "," shared_group location "," shared_group "," backtrace_formatter "," shared_group metadata [] "," shared_group metadata "]}," Core Notifications FailedExampleNotification add_shared_group_line":{"type":"method","name":"add_shared_group_line","children":[],"call":["lines << ","colorizer wrap ","RSpec  configuration default_color ","RSpec  configuration "," shared_group_line "," shared_group_line == "]}," Core Notifications FailedExampleNotification failure_lines":{"type":"method","name":"failure_lines","children":[],"call":["lines << "," exception message "," exception "," exception message to_s split each "," exception message to_s split "," exception message to_s "," exception_class_name "," exception_class_name =~ "," read_failed_line strip "," read_failed_line "]}," Core Notifications NullColorizer wrap":{"type":"method","name":"wrap","children":[],"call":[]}," RSpec Core MetadataFilter silence_metadata_example_group_deprecations":{"type":"method","name":"silence_metadata_example_group_deprecations","children":[],"call":["RSpec  thread_local_metadata delete ","RSpec  thread_local_metadata ","RSpec  thread_local_metadata []= ","RSpec Support  thread_local_data delete ","RSpec Support  thread_local_data ","RSpec Support  thread_local_data []= "]}," RSpec Core BacktraceFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["line =~ ","patterns any? "]}," RSpec Core RakeTask file_exclusion_specification":{"type":"method","name":"file_exclusion_specification","children":[],"call":[" exclude_pattern shellescape "," exclude_pattern "," escape "]}," RSpec Core RakeTask file_inclusion_specification":{"type":"method","name":"file_inclusion_specification","children":[],"call":[" pattern shellescape "," pattern ","File  exist? ","FileList  [] sort ","FileList  [] ","ENV  [] ","FileList  [] sort map ","Array  === ","File  exist? ! ","String  === "," escape ","opt =~ ","(splat\n  (send nil :rspec_opts)) any? "," rspec_opts "," rspec_opts =~ "]}," Core Notifications FailedExampleNotification encoding_of":{"type":"method","name":"encoding_of","children":[],"call":["string encoding "]}," Core Notifications ExamplesNotification format_examples":{"type":"method","name":"format_examples","children":[],"call":["ExampleNotification  for ","examples map "]}," RSpec Core Hooks AroundHook hook_description":{"type":"method","name":"hook_description","children":[],"call":["Metadata  relative_path "," block source_location join "," block source_location "," block "]}," RSpec Core Hooks AroundHook execute_with":{"type":"method","name":"execute_with","children":[],"call":["Pending  mark_skipped! "," hook_description ","procsy executed? ","example instance_exec "," block "]}," RSpec Core InclusionRules apply_standalone_filter":{"type":"method","name":"apply_standalone_filter","children":[],"call":[" replace_filters "," is_standalone_filter? "," standalone? "]}," RSpec Core Example Procsy inspect":{"type":"method","name":"inspect","children":[],"call":["@example inspect gsub ","@example inspect "]}," RSpec Core Example Procsy executed?":{"type":"method","name":"executed?","children":[],"call":[]}," RSpec Core Example Procsy to_proc":{"type":"method","name":"to_proc","children":[],"call":[" method to_proc "," method "]}," RSpec Core Example Procsy call":{"type":"method","name":"call","children":[],"call":["@proc call "]}," RSpec Core Configuration update_pattern_attr":{"type":"method","name":"update_pattern_attr","children":[],"call":[" instance_variable_set ","RSpec  warning "]}," RSpec Core Configuration get_matching_files":{"type":"method","name":"get_matching_files","children":[],"call":["Dir  [] ","pattern =~ ","Regexp  escape ","pattern gsub ","File  expand_path ","files map ","Dir  [] map "," file_glob_from ","(send\n  (lvar :raw_files) :map) sort ","raw_files map ","Dir  []  map ","(send\n  (lvar :raw_Dir  [] ) :map) sort ","(send\n  (lvar :Dir  [] ) :map) sort ","raw_Dir  []  map "]}," RSpec Core Configuration filter_gems_from_backtrace":{"type":"method","name":"filter_gems_from_backtrace","children":[],"call":["@backtrace_formatter filter_gem ","gem_names each "]}," RSpec Core Configuration exclude_pattern=":{"type":"method","name":"exclude_pattern=","children":[],"call":[" update_pattern_attr "]}," RSpec Core BacktraceFormatter filter_gem":{"type":"method","name":"filter_gem","children":[],"call":["@system_exclusion_patterns << ","@exclusion_patterns << "," exclusion_patterns << "," exclusion_patterns "]}," RSpec Core RakeTask escape":{"type":"method","name":"escape","children":[],"call":["shell_command shellescape ","shell_command gsub "]}," RSpec Core Configuration absolute_pattern?":{"type":"method","name":"absolute_pattern?","children":[],"call":["pattern start_with? "," windows_absolute_network_path? ","pattern =~ "]}," RSpec Core Configuration windows_absolute_network_path?":{"type":"method","name":"windows_absolute_network_path?","children":[],"call":["pattern start_with? "," File ALT_SEPARATOR  + "]}," RSpec Core Configuration file_glob_from":{"type":"method","name":"file_glob_from","children":[],"call":["File  join "," absolute_pattern? ","pattern =~ ","Regexp  escape ","pattern gsub "]}," RSpec Core Configuration pattern_might_load_specs_from_vendored_dirs?":{"type":"method","name":"pattern_might_load_specs_from_vendored_dirs?","children":[],"call":[" pattern split first include? "," pattern split first "," pattern split "," pattern "]}," RSpec Core Configuration paths_to_check":{"type":"method","name":"paths_to_check","children":[],"call":["paths + "," pattern_might_load_specs_from_vendored_dirs? ","Dir  getwd "]}," RSpec clear_examples":{"type":"method","name":"clear_examples","children":[],"call":[]}," RSpec Core World Null all_example_groups":{"type":"method","name":"all_example_groups","children":[],"call":[]}," RSpec Core World Null example_groups":{"type":"method","name":"example_groups","children":[],"call":[]}," RSpec Core World Null traverse_example_group_trees_until":{"type":"method","name":"traverse_example_group_trees_until","children":[],"call":[]}," RSpec Core World Null registered_example_group_files":{"type":"method","name":"registered_example_group_files","children":[],"call":[]}," RSpec Core World Null non_example_failure=":{"type":"method","name":"non_example_failure=","children":[],"call":[]}," RSpec Core World Null non_example_failure":{"type":"method","name":"non_example_failure","children":[],"call":[]}," RSpec Core World fail_if_config_and_cli_options_invalid":{"type":"method","name":"fail_if_config_and_cli_options_invalid","children":[],"call":[" reporter abort_with "," reporter ","@configuration only_failures_but_not_configured? "]}," RSpec Core World descending_declaration_line_numbers_by_file":{"type":"method","name":"descending_declaration_line_numbers_by_file","children":[],"call":["list reverse! ","list sort! ","line_nums_by_file each_value ","hash [] << ","hash [] ","declaration_locations inject ","h []= ","Hash  new ","FlatMap  flat_map "," example_groups ","FlatMap  flat_map  inject "]}," RSpec Core World report_filter_message":{"type":"method","name":"report_filter_message","children":[],"call":[" reporter message "," reporter ","@configuration silence_filter_announcements? "]}," RSpec Core World syntax_highlighter":{"type":"method","name":"syntax_highlighter","children":[],"call":["Formatters SyntaxHighlighter  new "]}," RSpec Core World source_from_file":{"type":"method","name":"source_from_file","children":[],"call":["Support Source  from_file ","@sources_by_path [] ","RSpec Support  require_rspec_support "]}," RSpec Core World traverse_example_group_trees_until":{"type":"method","name":"traverse_example_group_trees_until","children":[],"call":["group traverse_tree_until "," example_groups each "," example_groups "]}," RSpec Core World all_examples":{"type":"method","name":"all_examples","children":[],"call":["g examples ","FlatMap  flat_map "," all_example_groups "]}," RSpec Core World all_example_groups":{"type":"method","name":"all_example_groups","children":[],"call":["g descendants ","FlatMap  flat_map "," example_groups "]}," RSpec Core World num_example_groups_defined_in":{"type":"method","name":"num_example_groups_defined_in","children":[],"call":["@example_group_counts_by_spec_file [] "]}," RSpec Core World record":{"type":"method","name":"record","children":[],"call":["@example_group_counts_by_spec_file [] ","example_group metadata [] ","example_group metadata ","block call ","@configuration on_example_group_definition_callbacks each ","@configuration on_example_group_definition_callbacks "]}," RSpec Core World registered_example_group_files":{"type":"method","name":"registered_example_group_files","children":[],"call":["@example_group_counts_by_spec_file keys "]}," RSpec Core World prepare_example_filtering":{"type":"method","name":"prepare_example_filtering","children":[],"call":["hash []= "," filter_manager prune ","group examples "," filter_manager ","Hash  new "]}," RSpec Core ShellEscape shell_allows_unquoted_ids?":{"type":"method","name":"shell_allows_unquoted_ids?","children":[],"call":["SHELLS_ALLOWING_UNQUOTED_IDS  include? ","ENV  [] to_s split last ","ENV  [] to_s split ","ENV  [] to_s ","ENV  [] "]}," RSpec Core ShellEscape conditionally_quote":{"type":"method","name":"conditionally_quote","children":[],"call":[" quote "," shell_allows_unquoted_ids? "]}," RSpec Core ShellEscape escape":{"type":"method","name":"escape","children":[],"call":["Shellwords  escape ","shell_command to_s ","shell_command shellescape "]}," RSpec Core ShellEscape quote":{"type":"method","name":"quote","children":[],"call":["argument to_s gsub ","argument to_s ","argument gsub "]}," RSpec Core SharedExampleGroup Registry legacy_add":{"type":"method","name":"legacy_add","children":[],"call":["RSpec  configuration include ","RSpec  configuration ","metadata_args empty? ","metadata_args unshift "," shared_example_groups [] []= "," shared_example_groups [] "," shared_example_groups "," warn_if_key_taken "," valid_name? ","SharedExampleGroupModule  new ","CallerFilter  first_non_rspec_line "," ensure_block_has_source_location "]}," RSpec Core SharedExampleGroupModule include_in":{"type":"method","name":"include_in","children":[],"call":["klass class_exec ","RSpec Support WithKeywordsWhenNeeded  class_exec ","SharedExampleGroupInclusionStackFrame  with_frame ","klass update_inherited_metadata ","@metadata empty? "]}," RSpec Core SharedExampleGroupModule included":{"type":"method","name":"included","children":[],"call":[" include_in ","klass metadata [] ","klass metadata ","klass class_exec ","SharedExampleGroupInclusionStackFrame  with_frame "]}," RSpec Core SharedExampleGroupModule inspect":{"type":"method","name":"inspect","children":[],"call":["@description inspect "," class name "," class "]}," RSpec Core SharedExampleGroupModule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Set clear":{"type":"method","name":"clear","children":[],"call":["@values clear "]}," RSpec Core Set merge":{"type":"method","name":"merge","children":[],"call":["@values []= ","values each "]}," RSpec Core Set include?":{"type":"method","name":"include?","children":[],"call":["@values key? "]}," RSpec Core Set each":{"type":"method","name":"each","children":[],"call":["@values keys each ","@values keys "]}," RSpec Core Set delete":{"type":"method","name":"delete","children":[],"call":["@values delete "]}," RSpec Core Set <<":{"type":"method","name":"<<","children":[],"call":["@values []= "]}," RSpec Core Set empty?":{"type":"method","name":"empty?","children":[],"call":["@values empty? "]}," RSpec Core Set initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," RSpec Core Sandbox sandboxed":{"type":"method","name":"sandboxed","children":[],"call":[]}," RSpec Core Runner persist_example_statuses":{"type":"method","name":"persist_example_statuses","children":[],"call":["RSpec  warning ","e inspect ","ExampleStatusPersister  persist ","@world all_examples ","@configuration example_status_persistence_file_path ","@configuration dry_run ","@configuration example_status_persistence_file_@configuration example_status_persistence_file_path  "]}," RSpec Core Runner exit_code":{"type":"method","name":"exit_code","children":[],"call":["@configuration failure_exit_code ","@configuration error_exit_code ","@world non_example_failure "]}," RSpec Core Runner handle_interrupt":{"type":"method","name":"handle_interrupt","children":[],"call":[]}," RSpec Core Runner perform_at_exit":{"type":"method","name":"perform_at_exit","children":[],"call":[]}," Core NullReporter method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Core Reporter close":{"type":"method","name":"close","children":[],"call":[" notify "]}," Core Reporter ensure_listeners_ready":{"type":"method","name":"ensure_listeners_ready","children":[],"call":[" register_listener ","Profiler  new ","@setup_default call "]}," Core Reporter fail_fast_limit_met?":{"type":"method","name":"fail_fast_limit_met?","children":[],"call":["fail_fast <= ","@failed_examples size ","@failed_examples any? ","fail_fast == ","@configuration fail_fast ","@configuration fail_fast  <= ","@configuration fail_fast  == ","@configuration @configuration fail_fast  "]}," Core Reporter abort_with":{"type":"method","name":"abort_with","children":[],"call":[" exit! "," close "," message "]}," Core Reporter close_after":{"type":"method","name":"close_after","children":[],"call":[" close "]}," Core Reporter notify_non_example_exception":{"type":"method","name":"notify_non_example_exception","children":[],"call":[" message ","presenter fully_formatted ","Formatters ExceptionPresenter  new ","Example  new ","@configuration world non_example_failure= ","@configuration world ","Formatters ExceptionPresenter  new  fully_formatted ","@configuration world non_Example  new _failure= "]}," Core Reporter example_finished":{"type":"method","name":"example_finished","children":[],"call":[" notify ","Notifications ExampleNotification  for "]}," Core Reporter publish":{"type":"method","name":"publish","children":[],"call":[" notify ","Notifications CustomNotification  for "," raise ","RSPEC_NOTIFICATIONS  include? "]}," Core Reporter exit_early":{"type":"method","name":"exit_early","children":[],"call":[" report "]}," Core Reporter prepare_default":{"type":"method","name":"prepare_default","children":[],"call":["loader setup_default "," lambda "]}," RSpec Core RakeTask with_clean_environment":{"type":"method","name":"with_clean_environment","children":[],"call":[]}," RSpec Core RakeTask with_clean_environment=":{"type":"method","name":"with_clean_environment=","children":[],"call":[" raise "]}," RSpec Core Profiler example_started":{"type":"method","name":"example_started","children":[],"call":["@example_groups [] [] ","@example_groups [] ","notification example example_group parent_groups last ","notification example example_group parent_groups ","notification example example_group ","notification example ","@example_notification example example_group parent_groups last s [] [] ","@example_notification example example_group parent_groups last s [] ","notification example example_notification example example_group parent_groups last  parent_notification example example_group parent_groups last s last ","notification example example_notification example example_group parent_groups last  parent_notification example example_group parent_groups last s ","notification example example_notification example example_group parent_groups last  "]}," RSpec Core Profiler example_group_finished":{"type":"method","name":"example_group_finished","children":[],"call":["group []= ","Time  now - ","group [] ","Time  now ","group key? ","@example_groups [] ","notification group ","notification group top_level? ","@example_groups [] []= ","@example_groups [] [] ","@example_groups []  []= ","@example_groups []  [] ","@example_groups []  key? ","@example_@example_groups [] s [] ","notification @example_groups []  ","notification @example_groups []  top_level? ","@example_@example_groups [] s [] []= ","@example_@example_groups [] s [] [] "]}," RSpec Core Profiler example_group_started":{"type":"method","name":"example_group_started","children":[],"call":["@example_groups [] []= ","notification group top_level_description ","notification group ","@example_groups [] ","Time  now ","notification group top_level? "]}," RSpec Core Profiler initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," RSpec Core OutputWrapper method_missing":{"type":"method","name":"method_missing","children":[],"call":[" output send "," output "]}," RSpec Core OutputWrapper respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" output respond_to? "," output "]}," RSpec Core OutputWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Ordering Random jenkins_hash_digest":{"type":"method","name":"jenkins_hash_digest","children":[],"call":["(send\n  (lvar :hash) :<<\n  (int 15)) & ","hash << ","hash >> ","(send\n  (lvar :hash) :<<\n  (int 3)) & ","(send\n  (lvar :hash) :<<\n  (int 10)) & ","string each_byte "]}," Core Parser configure_only_failures":{"type":"method","name":"configure_only_failures","children":[],"call":[" add_tag_filter ","options []= "]}," Core Parser set_fail_fast":{"type":"method","name":"set_fail_fast","children":[],"call":["options []= "]}," Core Parser add_tag_filter":{"type":"method","name":"add_tag_filter","children":[],"call":["(or-asgn\n  (send\n    (lvar :options) :[]\n    (lvar :filter_type))\n  (hash)) []= ","options [] "]}," Core Parser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Core Notifications CustomNotification for":{"type":"method","name":"for","children":[],"call":[]}," Core Notifications DeprecationNotification from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Core Notifications ProfileNotification calculate_slowest_groups":{"type":"method","name":"calculate_slowest_groups","children":[],"call":["group location ","groups map ","(send\n  (ivar :@example_groups) :sort_by) first "," number_of_examples ","hash [] -@ ","hash [] ","@example_groups sort_by ","hash []= ","hash [] to_f / ","hash [] to_f ","@example_groups each_value ","@example_groups keys length <= ","@example_groups keys length ","@example_groups keys ","(send\n  (lvar :example_groups) :sort_by) first ","example_groups sort_by ","example_groups each_value ","example_groups keys length <= ","example_groups keys length ","example_groups keys ","location_hash []= ","example example_group top_level_description ","example example_group ","location_hash key? ","location_hash [] ","example execution_result run_time ","example execution_result ","Hash  new ","example_groups [] ","example example_group parent_groups last metadata [] ","example example_group parent_groups last metadata ","example example_group parent_groups last ","example example_group parent_groups "," examples each "," examples ","group example example_group parent_groups last metadata []  ","(send\n  (ivar :@example_groups) :sort_by) first  map ","(send\n  (ivar :@example_(send\n  (ivar :@example_groups) :sort_by) first ) :sort_by) first ","@example_(send\n  (ivar :@example_groups) :sort_by) first  sort_by ","@example_(send\n  (ivar :@example_groups) :sort_by) first  each_value ","@example_(send\n  (ivar :@example_groups) :sort_by) first  keys length <= ","@example_(send\n  (ivar :@example_groups) :sort_by) first  keys length ","@example_(send\n  (ivar :@example_groups) :sort_by) first  keys ","(send\n  (lvar :example_(send\n  (ivar :@example_groups) :sort_by) first ) :sort_by) first ","example_(send\n  (ivar :@example_groups) :sort_by) first  sort_by ","example_(send\n  (ivar :@example_groups) :sort_by) first  each_value ","example_(send\n  (ivar :@example_groups) :sort_by) first  keys length <= ","example_(send\n  (ivar :@example_groups) :sort_by) first  keys length ","example_(send\n  (ivar :@example_groups) :sort_by) first  keys ","example example_group parent_groups last metadata [] _hash []= ","example example_group parent_groups last metadata [] _hash key? ","example example_group parent_groups last metadata [] _hash [] ","example_(send\n  (ivar :@example_groups) :sort_by) first  [] ","example example_group parent_(send\n  (ivar :@example_groups) :sort_by) first  last metadata [] ","example example_group parent_(send\n  (ivar :@example_groups) :sort_by) first  last metadata ","example example_group parent_(send\n  (ivar :@example_groups) :sort_by) first  last ","example example_group parent_(send\n  (ivar :@example_groups) :sort_by) first  "]}," Core Notifications ProfileNotification slowest_groups":{"type":"method","name":"slowest_groups","children":[],"call":[" calculate_slowest_groups "]}," Core Notifications ProfileNotification percentage":{"type":"method","name":"percentage","children":[],"call":["%.1f % ","(if\n  (send\n    (lvar :time_taken) :nan?)\n  (float 0.0)\n  (lvar :time_taken)) * ","time_taken nan? "," slow_duration / "," duration "," slow_duration ","(if\n  (send\n    (lvar : slow_duration / ) :nan?)\n  (float 0.0)\n  (lvar : slow_duration / )) * "," slow_duration /  nan? "]}," Core Notifications ProfileNotification slow_duration":{"type":"method","name":"slow_duration","children":[],"call":["i + ","e execution_result run_time ","e execution_result "," slowest_examples inject "," slowest_examples "]}," Core Notifications ProfileNotification slowest_examples":{"type":"method","name":"slowest_examples","children":[],"call":["(send\n  (send nil :examples) :sort_by) first "," number_of_examples ","example execution_result run_time -@ ","example execution_result run_time ","example execution_result "," examples sort_by "," examples "]}," Core Notifications ProfileNotification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Core Notifications SummaryNotification duplicate_rerun_locations":{"type":"method","name":"duplicate_rerun_locations","children":[],"call":["s << ","ls count > ","ls count ","(send\n  (lvar :locations) :group_by) each ","locations group_by ","Set  new tap ","Set  new ","RSpec  world all_examples map ","RSpec  world all_examples ","RSpec  world ","(send\n  (lvar :RSpec  world all_examples map ) :group_by) each ","RSpec  world all_examples map  group_by "]}," Core Notifications SummaryNotification rerun_argument_for":{"type":"method","name":"rerun_argument_for","children":[],"call":[" conditionally_quote ","example id "," duplicate_rerun_locations include? "," duplicate_rerun_locations ","example location_rerun_argument "," duplicate_rerun_example location_rerun_argument s include? "," duplicate_rerun_example location_rerun_argument s ","example example location_rerun_argument _rerun_argument "]}," Core Notifications SummaryNotification fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":[" colorized_rerun_commands + "," colorized_rerun_commands "," failed_examples empty? "," failed_examples "," colorized_totals_line "," formatted_load_time "," formatted_duration ","formatted << << ","formatted << "]}," Core Notifications SummaryNotification formatted_load_time":{"type":"method","name":"formatted_load_time","children":[],"call":["Formatters Helpers  format_duration "," load_time "]}," Core Notifications SummaryNotification formatted_duration":{"type":"method","name":"formatted_duration","children":[],"call":["Formatters Helpers  format_duration "," duration "]}," Core Notifications SummaryNotification colorized_rerun_commands":{"type":"method","name":"colorized_rerun_commands","children":[],"call":["\nFailed examples:\n\n + ","(send\n  (send nil :failed_examples) :map) join ","colorizer wrap + + ","colorizer wrap ","RSpec  configuration detail_color ","RSpec  configuration ","example full_description ","colorizer wrap + ","RSpec  configuration failure_color "," rerun_argument_for "," failed_examples map "," failed_examples ","example rerun_argument "]}," Core Notifications SummaryNotification colorized_totals_line":{"type":"method","name":"colorized_totals_line","children":[],"call":["colorizer wrap ","RSpec  configuration success_color ","RSpec  configuration "," totals_line ","RSpec  configuration pending_color "," pending_count > "," pending_count ","RSpec  configuration failure_color "," errors_outside_of_examples_count > "," errors_outside_of_examples_count "," failure_count > "," failure_count "]}," Core Notifications SummaryNotification totals_line":{"type":"method","name":"totals_line","children":[],"call":[",  + + ",",  + ","Formatters Helpers  pluralize "," errors_outside_of_examples_count "," errors_outside_of_examples_count > "," pending_count "," pending_count > ","Formatters Helpers  pluralize + + "," failure_count ","Formatters Helpers  pluralize + "," example_count ","summary << ","summary << << ","Formatters Helpers  pluralize + +  << ","Formatters Helpers  pluralize  << ","Formatters Helpers  pluralize + +  << << ","Formatters Helpers  pluralize  << << "]}," Core Notifications SummaryNotification pending_count":{"type":"method","name":"pending_count","children":[],"call":[" pending_examples size "," pending_examples "]}," Core Notifications SummaryNotification failure_count":{"type":"method","name":"failure_count","children":[],"call":[" failed_examples size "," failed_examples "]}," Core Notifications SummaryNotification example_count":{"type":"method","name":"example_count","children":[],"call":[" examples size "," examples "]}," Core Notifications SeedNotification fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":[" seed "]}," Core Notifications SeedNotification seed_used?":{"type":"method","name":"seed_used?","children":[],"call":[" used ! ! "," used ! "," used "]}," Core Notifications SkippedExampleNotification fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":["(send\n  (lvar :colorizer) :wrap\n  (dstr\n    (str \"\\n  \")\n    (begin\n      (lvar :pending_number))\n    (str \") \")\n    (begin\n      (send\n        (send nil :example) :full_description)))\n  (sym :pending)) join ","colorizer wrap ","Formatters ExceptionPresenter PENDING_DETAIL_FORMATTER  call "," example "," example full_description ","RSpec  configuration backtrace_formatter backtrace_line "," example location ","RSpec  configuration backtrace_formatter ","RSpec  configuration "," fully_formatted_header << "," fully_formatted_header ","colorizer wrap << << << << ","colorizer wrap << << << ","colorizer wrap << << ","colorizer wrap << "]}," Core Notifications FailedExampleNotification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Core Notifications FailedExampleNotification fully_formatted_lines":{"type":"method","name":"fully_formatted_lines","children":[],"call":["@exception_presenter fully_formatted_lines "]}," Core Notifications ExamplesNotification pending_notifications":{"type":"method","name":"pending_notifications","children":[],"call":[" format_examples "," pending_examples "]}," Core Notifications ExampleNotification for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Core FilterableItemRepository QueryOptimized proc_keys_from":{"type":"method","name":"proc_keys_from","children":[],"call":["to_return << ","Proc  === ","metadata inject ","metadata each_with_object "]}," RSpec Core FilterableItemRepository QueryOptimized applicable_metadata_from":{"type":"method","name":"applicable_metadata_from","children":[],"call":["hash []= ","metadata [] ","key == ","metadata key? ","@applicable_keys inject ","MetadataFilter  silence_metadata_example_group_deprecations "]}," RSpec Core FilterableItemRepository QueryOptimized handle_mutation":{"type":"method","name":"handle_mutation","children":[],"call":["@memoized_lookups clear ","@proc_keys merge "," proc_keys_from ","@applicable_keys merge ","metadata keys "]}," RSpec Core FilterableItemRepository QueryOptimized reconstruct_caches":{"type":"method","name":"reconstruct_caches","children":[],"call":[" handle_mutation ","@items_and_filters each ","@proc_keys clear ","@applicable_keys clear "]}," RSpec Core FilterableItemRepository QueryOptimized items_for":{"type":"method","name":"items_for","children":[],"call":["@memoized_lookups [] "," find_items_for ","@proc_keys include? ","applicable_metadata any? "," applicable_metadata_from "," applicable_metadata_from  any? ","  applicable_metadata_from _from "]}," RSpec Core FilterableItemRepository QueryOptimized delete":{"type":"method","name":"delete","children":[],"call":[" reconstruct_caches "]}," RSpec Core FilterableItemRepository QueryOptimized prepend":{"type":"method","name":"prepend","children":[],"call":[" handle_mutation "]}," RSpec Core FilterableItemRepository QueryOptimized append":{"type":"method","name":"append","children":[],"call":[" handle_mutation "]}," RSpec Core FilterableItemRepository QueryOptimized initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= "," find_items_for ","Hash  new ","Set  new "]}," RSpec Core FilterableItemRepository UpdateOptimized items_for":{"type":"method","name":"items_for","children":[],"call":["to_return << ","MetadataFilter  apply? ","item_meta empty? ","@items_and_filters inject ","@items_and_filters each_with_object "]}," RSpec Core FilterableItemRepository UpdateOptimized delete":{"type":"method","name":"delete","children":[],"call":["@items_and_filters delete "]}," RSpec Core FilterableItemRepository UpdateOptimized prepend":{"type":"method","name":"prepend","children":[],"call":["@items_and_filters unshift "]}," RSpec Core FilterableItemRepository UpdateOptimized append":{"type":"method","name":"append","children":[],"call":["@items_and_filters << "]}," RSpec Core FilterableItemRepository UpdateOptimized initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core MetadataFilter proc_filter_applies?":{"type":"method","name":"proc_filter_applies?","children":[],"call":["proc call ","metadata [] ","proc arity "]}," RSpec Core MetadataFilter id_filter_applies?":{"type":"method","name":"id_filter_applies?","children":[],"call":["scoped_ids include? ","meta [] ","Metadata  ascend any? ","Metadata  ascend ","rerun_paths_to_scoped_ids fetch ","metadata [] "]}," RSpec Core MetadataFilter apply?":{"type":"method","name":"apply?","children":[],"call":[" filter_applies? ","filters __send__ "]}," RSpec Core Metadata HashPopulator build_scoped_id_for":{"type":"method","name":"build_scoped_id_for","children":[],"call":[" metadata fetch "," metadata ","@index_provider call to_s ","@index_provider call ","@@index_provider call to_s _provider call to_s ","@@index_provider call to_s _provider call "]}," RSpec Core Metadata location_tuple_from":{"type":"method","name":"location_tuple_from","children":[],"call":[]}," RSpec Core Metadata id_from":{"type":"method","name":"id_from","children":[],"call":[]}," RSpec Core Metadata deep_hash_dup":{"type":"method","name":"deep_hash_dup","children":[],"call":[]}," RSpec Core Metadata ascend":{"type":"method","name":"ascend","children":[],"call":[]}," RSpec Core Metadata ascending":{"type":"method","name":"ascending","children":[],"call":[]}," RSpec Core Metadata relative_path_regex":{"type":"method","name":"relative_path_regex","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized After hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized After article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized After hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized Before hook_intention":{"type":"method","name":"hook_intention","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized Before article":{"type":"method","name":"article","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized Before hook_expression":{"type":"method","name":"hook_expression","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized fetch_or_store":{"type":"method","name":"fetch_or_store","children":[],"call":[]}," RSpec Core MemoizedHelpers ContextHookMemoized isolate_for_context_hook":{"type":"method","name":"isolate_for_context_hook","children":[],"call":[]}," RSpec Core MemoizedHelpers NonThreadSafeMemoized fetch_or_store":{"type":"method","name":"fetch_or_store","children":[],"call":["@memoized []= ","@memoized fetch "]}," RSpec Core MemoizedHelpers NonThreadSafeMemoized initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core MemoizedHelpers ThreadsafeMemoized fetch_or_store":{"type":"method","name":"fetch_or_store","children":[],"call":["@memoized []= ","@memoized fetch ","@mutex synchronize "]}," RSpec Core MemoizedHelpers ThreadsafeMemoized initialize":{"type":"method","name":"initialize","children":[],"call":["Support ReentrantMutex  new ","ReentrantMutex  new "]}," RSpec Core MemoizedHelpers __init_memoized":{"type":"method","name":"__init_memoized","children":[],"call":["NonThreadSafeMemoized  new ","ThreadsafeMemoized  new ","RSpec  configuration threadsafe? ","RSpec  configuration "]}," RSpec Core MemoizedHelpers initialize":{"type":"method","name":"initialize","children":[],"call":[" __init_memoized "]}," RSpec Core Invocations call":{"type":"method","name":"call","children":[],"call":["out puts "," parser to_s gsub "," hidden_options join "," hidden_options "," parser to_s "," parser "," invalid_options join "," invalid_options "]}," RSpec Core Invocations PrintVersion call":{"type":"method","name":"call","children":[],"call":["out puts ","RSpec  const_get "," require ","const_name to_s downcase ","const_name to_s ","(sym :Core) each ","overall_version split first join ","overall_version split first ","overall_version split ","overall_version =~ ","overall_version split first join  split first join ","overall_version split first join  split first ","overall_version split first join  split ","overall_version split first join  =~ "]}," RSpec Core Invocations Bisect bisect_formatter_klass_for":{"type":"method","name":"bisect_formatter_klass_for","children":[],"call":["argument == "]}," RSpec Core Invocations Bisect call":{"type":"method","name":"call","children":[],"call":["runner exit_code ","RSpec Core Bisect Coordinator  bisect_with ","options args "," bisect_formatter_klass_for new ","runner configuration bisect_runner ","runner configuration "," bisect_formatter_klass_for ","options options [] ","options options ","r configure ","Runner  new tap ","Runner  new ","RSpec Support  require_rspec_core "," bisect_formatter_for ","RSpec  configuration ","runner configuration failure_exit_code "," bisect_ bisect_formatter_klass_for new _klass_for new "," bisect_ bisect_formatter_klass_for new _klass_for "," bisect_ bisect_formatter_klass_for new _for "]}," RSpec Core Invocations DRbWithFallback call":{"type":"method","name":"call","children":[],"call":["RSpec Core Runner  new run ","RSpec Core Runner  new ","err puts ","DRbRunner  new run ","DRbRunner  new "," require "]}," RSpec Core Invocations InitializeProject call":{"type":"method","name":"call","children":[],"call":["ProjectInitializer  new run ","ProjectInitializer  new ","RSpec Support  require_rspec_core "]}," RSpec Core Hooks HookCollections owner_parent_groups":{"type":"method","name":"owner_parent_groups","children":[],"call":["(ivar :@owner) + ","@owner parent_groups "]}," RSpec Core Hooks HookCollections run_around_example_hooks_for":{"type":"method","name":"run_around_example_hooks_for","children":[],"call":["(send\n  (lvar :hooks) :inject\n  (lvar :initial_procsy)) call ","around_hook execute_with ","procsy wrap ","hooks inject ","Example Procsy  new ","hooks empty? ","group hooks matching_hooks_for ","group hooks ","FlatMap  flat_map "," owner_parent_groups "]}," RSpec Core Hooks HookCollections run_example_hooks_for":{"type":"method","name":"run_example_hooks_for","children":[],"call":["group hooks run_owned_hooks_for ","group hooks "," owner_parent_groups __send__ "," owner_parent_groups "]}," RSpec Core Hooks HookCollections ensure_hooks_initialized_for":{"type":"method","name":"ensure_hooks_initialized_for","children":[],"call":["@filterable_item_repo_class new ","scope == ","position == "]}," RSpec Core Hooks HookCollections hooks_for":{"type":"method","name":"hooks_for","children":[],"call":["scope == ","position == "]}," RSpec Core Hooks HookCollections processable_hooks_for":{"type":"method","name":"processable_hooks_for","children":[],"call":[" matching_hooks_for "," all_hooks_for ","scope == "]}," RSpec Core Hooks HookCollections run_owned_hooks_for":{"type":"method","name":"run_owned_hooks_for","children":[],"call":["hook run "," matching_hooks_for each "," matching_hooks_for "]}," RSpec Core Hooks HookCollections all_hooks_for":{"type":"method","name":"all_hooks_for","children":[],"call":["(send nil :hooks_for\n  (lvar :position)\n  (lvar :scope)) items_and_filters map ","(send nil :hooks_for\n  (lvar :position)\n  (lvar :scope)) items_and_filters "," hooks_for "]}," RSpec Core Hooks HookCollections matching_hooks_for":{"type":"method","name":"matching_hooks_for","children":[],"call":["repository items_for ","example_or_group metadata ","example_or_group class metadata ","example_or_group class "," hooks_for "]}," RSpec Core Hooks HookCollections register_global_singleton_context_hooks":{"type":"method","name":"register_global_singleton_context_hooks","children":[],"call":[" process ","example example_group parent_groups ","example example_group ","example example_group example example_group parent_groups  "]}," Formatters Loader open_stream":{"type":"method","name":"open_stream","children":[],"call":["File  new ","RSpec Support DirectoryMaker  mkdir_p ","File  dirname ","path_or_wrapper output= "," open_stream ","path_or_wrapper output ","RSpec Core OutputWrapper  === "]}," Formatters Loader register":{"type":"method","name":"register","children":[],"call":["@formatters << ","@reporter register_listener "," duplicate_formatter_exists? "]}," Formatters Loader prepare_default":{"type":"method","name":"prepare_default","children":[],"call":[" reporter prepare_default "," reporter "]}," RSpec Core Formatters SyntaxHighlighter NoSyntaxHighlightingImplementation highlight_syntax":{"type":"method","name":"highlight_syntax","children":[],"call":[]}," RSpec Core Formatters SyntaxHighlighter CodeRayImplementation highlight_syntax":{"type":"method","name":"highlight_syntax","children":[],"call":[]}," RSpec Core Formatters SyntaxHighlighter color_enabled_implementation":{"type":"method","name":"color_enabled_implementation","children":[],"call":[" class attempt_to_add_rspec_terms_to_coderay_keywords "," class "," require "]}," RSpec Core Formatters SyntaxHighlighter implementation":{"type":"method","name":"implementation","children":[],"call":[" color_enabled_implementation ","@configuration color_enabled? "]}," RSpec Core Formatters SyntaxHighlighter attempt_to_add_rspec_terms_to_coderay_keywords":{"type":"method","name":"attempt_to_add_rspec_terms_to_coderay_keywords","children":[],"call":[]}," RSpec Core Formatters SyntaxHighlighter highlight":{"type":"method","name":"highlight","children":[],"call":[" implementation highlight_syntax "," implementation "]}," RSpec Core Formatters SyntaxHighlighter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor least_indentation_from":{"type":"method","name":"least_indentation_from","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor extract_expression_lines_at":{"type":"method","name":"extract_expression_lines_at","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor location_nodes_at_beginning_line":{"type":"method","name":"location_nodes_at_beginning_line","children":[],"call":[" source nodes_by_line_number [] "," beginning_line_number "," source nodes_by_line_number "," source "]}," RSpec Core Formatters SnippetExtractor expression_outmost_node?":{"type":"method","name":"expression_outmost_node?","children":[],"call":["(send\n  (array\n    (lvar :node)\n    (send\n      (lvar :node) :parent)) :all?) ! ","type start_with? ","type end_with? ","n type to_s ","n type ","(lvar :node) all? ","node parent ","node type to_s start_with? ","node type to_s ","node type ","n type to_s  start_with? ","n type to_s  end_with? ","n n type to_s  to_s ","n n type to_s  ","node n type to_s  to_s start_with? ","node n type to_s  to_s ","node n type to_s  "]}," RSpec Core Formatters SnippetExtractor expression_node":{"type":"method","name":"expression_node","children":[],"call":[" expression_outmost_node? ","common_ancestor_nodes find ","(send\n  (send nil :location_nodes_at_beginning_line) :map) reduce ","node each_ancestor to_a ","node each_ancestor "," location_nodes_at_beginning_line map "," location_nodes_at_beginning_line "," raise "," location_nodes_at_beginning_line empty? ","(send\n  (send nil :location_nodes_at_beginning_line) :map) reduce  find "]}," RSpec Core Formatters SnippetExtractor line_range_of_location_nodes_in_expression":{"type":"method","name":"line_range_of_location_nodes_in_expression","children":[],"call":["line_numbers max ","line_numbers min ","set << ","node location line ","node location "," expression_node each_with_object ","Set  new "," expression_node "]}," RSpec Core Formatters SnippetExtractor unclosed_tokens_in_line_range":{"type":"method","name":"unclosed_tokens_in_line_range","children":[],"call":["unclosed_tokens delete_at ","unclosed_token closed_by? ","unclosed_tokens rindex ","unclosed_tokens << ","token opening? ","tokens each_with_object "," source tokens_by_line_number [] "," source tokens_by_line_number "," source ","FlatMap  flat_map "]}," RSpec Core Formatters SnippetExtractor line_range_of_expression":{"type":"method","name":"line_range_of_expression","children":[],"call":[" unclosed_tokens_in_line_range ","line_range end + ","line_range end ","line_range begin ","(send\n  (lvar :initial_unclosed_tokens) :&\n  (lvar :unclosed_tokens)) empty? ","initial_unclosed_tokens & "," line_range_of_location_nodes_in_expression "," unclosed_paren_tokens_in_line_range ","(send\n  (lvar :initial_unclosed_parens) :&\n  (lvar :unclosed_parens)) empty? ","initial_unclosed_parens & ","  unclosed_tokens_in_line_range _in_line_range "," unclosed_tokens_in_ line_range_of_location_nodes_in_expression  "," line_range_of_location_nodes_in_expression  end + "," line_range_of_location_nodes_in_expression  end "," line_range_of_location_nodes_in_expression  begin ","(send\n  (lvar :initial_ unclosed_tokens_in_line_range ) :&\n  (lvar : unclosed_tokens_in_line_range )) empty? ","(send\n  (lvar : unclosed_tokens_in_line_range ) :&\n  (lvar :unclosed_tokens)) empty? ","initial_ unclosed_tokens_in_line_range  & "," unclosed_tokens_in_line_range  & ","  line_range_of_location_nodes_in_expression _of_location_nodes_in_expression "," unclosed_paren_tokens_in_ line_range_of_location_nodes_in_expression  ","(send\n  (lvar :initial_ unclosed_paren_tokens_in_line_range ) :&\n  (lvar : unclosed_paren_tokens_in_line_range )) empty? ","(send\n  (lvar : unclosed_paren_tokens_in_line_range ) :&\n  (lvar :unclosed_parens)) empty? ","initial_ unclosed_paren_tokens_in_line_range  & "," unclosed_paren_tokens_in_line_range  & "]}," RSpec Core Formatters SnippetExtractor expression_lines":{"type":"method","name":"expression_lines","children":[],"call":[" class extract_line_at "," beginning_line_number "," source path "," source "," class "," source lines [] ","line_range end - ","line_range end ","line_range begin - ","line_range begin "," source lines ","line_range begin + - ","line_range begin + "," max_line_count ","line_range count > ","line_range count "," line_range_of_expression "," line_range_of_expression  end - "," line_range_of_expression  end "," line_range_of_expression  begin - "," line_range_of_expression  begin "," line_range_of_expression  begin + - "," line_range_of_expression  begin + "," line_range_of_expression  count > "," line_range_of_expression  count ","  line_range_of_expression _of_expression "]}," RSpec Core Formatters SnippetExtractor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor source_from_file":{"type":"method","name":"source_from_file","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor extract_line_at":{"type":"method","name":"extract_line_at","children":[],"call":[]}," RSpec Core Formatters JsonFormatter seed":{"type":"method","name":"seed","children":[],"call":["@output_hash []= ","notification seed ","notification seed_used? "]}," RSpec Core Formatters HtmlSnippetExtractor post_process":{"type":"method","name":"post_process","children":[],"call":["new_lines join ","new_lines << ","i == ","offending_line + - ","offending_line + ","highlighted split each_with_index ","highlighted split "]}," RSpec Core Formatters HtmlSnippetExtractor lines_around":{"type":"method","name":"lines_around","children":[],"call":["lines [] join ","lines [] ","selected_lines join ","(send\n  (lvar :line) :+\n  (int 1)) min ","lines length - ","lines length ","line + ","(int 0) max ","line - ","File  read split ","File  read ","File  file? ","File  read split  [] join ","File  read split  [] ","selected_File  read split  join ","(send\n  (lvar :line) :+\n  (int 1)) (int 0) max  ","File  read split  length - ","File  read split  length ","(int 0) (send\n  (lvar :line) :+\n  (int 1)) min  "]}," RSpec Core Formatters HtmlSnippetExtractor snippet_for":{"type":"method","name":"snippet_for","children":[],"call":[" lines_around ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match ","error_line =~ "," Regexp  last_match [] to_i s_around ","error_Regexp  last_match [] to_i  =~ "]}," RSpec Core Formatters HtmlSnippetExtractor snippet":{"type":"method","name":"snippet","children":[],"call":[" post_process ","@@converter convert "," snippet_for ","backtrace [] "]}," RSpec Core Formatters HtmlSnippetExtractor CoderayConverter convert":{"type":"method","name":"convert","children":[],"call":[]}," RSpec Core Formatters HtmlSnippetExtractor NullConverter convert":{"type":"method","name":"convert","children":[],"call":[]}," RSpec Core Formatters Helpers organize_ids":{"type":"method","name":"organize_ids","children":[],"call":[]}," RSpec Core Formatters FallbackMessageFormatter message":{"type":"method","name":"message","children":[],"call":[" output puts ","notification message "," output "]}," RSpec Core Formatters FallbackMessageFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters FailureListFormatter message":{"type":"method","name":"message","children":[],"call":[]}," RSpec Core Formatters FailureListFormatter dump_profile":{"type":"method","name":"dump_profile","children":[],"call":[]}," RSpec Core Formatters FailureListFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output puts ","failure example description ","failure example ","failure example location "," output "]}," RSpec Core MultipleExceptionError exception_count_description":{"type":"method","name":"exception_count_description","children":[],"call":["Formatters Helpers  pluralize "," other_errors size "," other_errors "," other_errors empty? "," failures size "," failures "]}," RSpec Core MultipleExceptionError summary":{"type":"method","name":"summary","children":[],"call":[" exception_count_description "]}," RSpec Core MultipleExceptionError message":{"type":"method","name":"message","children":[],"call":[" all_exceptions map join "," all_exceptions map "," all_exceptions "]}," RSpec Core MultipleExceptionError initialize":{"type":"method","name":"initialize","children":[],"call":[" add ","exceptions each "]}," RSpec Core MultipleExceptionError InterfaceTag for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Core MultipleExceptionError InterfaceTag add":{"type":"method","name":"add","children":[],"call":[" other_errors << "," other_errors "," failures << "," failures ","exception class name =~ ","exception class name ","exception class "," all_exceptions << "," all_exceptions ","exception == ","Pending PendingExampleFixedError  === "]}," RSpec Core Formatters ExceptionPresenter Factory CommonBacktraceTruncater with_truncated_backtrace":{"type":"method","name":"with_truncated_backtrace","children":[],"call":["child set_backtrace ","child_bt [] ","child dup ","index_before_first_common_frame == ","index_before_first_common_frame nil? ","parent_bt [] != ","parent_bt [] ","-1 downto find ","-1 downto ","child_bt size -@ ","child_bt size ","parent_bt nil? ","child_bt empty? ","child_bt nil? ","@parent backtrace ","child backtrace ","child dup  set_backtrace ","child dup _bt [] ","child backtrace  [] ","child dup  dup ","@parent backtrace  [] != ","@parent backtrace  [] ","child dup _bt size -@ ","child backtrace  size -@ ","child dup _bt size ","child backtrace  size ","@parent backtrace  nil? ","child dup _bt empty? ","child backtrace  empty? ","child dup _bt nil? ","child backtrace  nil? ","child dup  backtrace "]}," RSpec Core Formatters ExceptionPresenter Factory CommonBacktraceTruncater initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters ExceptionPresenter Factory EmptyBacktraceFormatter format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":[]}," RSpec Core Formatters ExceptionPresenter Factory sub_failure_list_formatter":{"type":"method","name":"sub_failure_list_formatter","children":[],"call":["presenter fully_formatted_lines ","index + ","ExceptionPresenter  new ","common_backtrace_truncater with_truncated_backtrace "," with_multiple_error_options_as_needed ","RSpec  configuration failure_color ","RSpec  configuration ","FlatMap  flat_map ","exception all_exceptions each_with_index ","exception all_exceptions "," lambda ","CommonBacktraceTruncater  new ","(send\n  (send\n    (send\n      (lvar :exception) :all_exceptions) :each_with_index) :map) join ","presenter fully_formatted ","indentation length ","failure_slash_error_line to_proc ","exception all_exceptions each_with_index map ","ExceptionPresenter  new  fully_formatted_lines ","CommonBacktraceTruncater  new  with_truncated_backtrace "," with_multiple_error_ with_multiple_error_options_as_needed _as_needed ","RSpec  configuration common_backtrace_truncater with_truncated_backtrace _color ","ExceptionPresenter  new  fully_formatted ","common_backtrace_truncater with_truncated_backtrace _slash_error_line to_proc "]}," RSpec Core Formatters ExceptionPresenter Factory multiple_exception_summarizer":{"type":"method","name":"multiple_exception_summarizer","children":[],"call":["prior_detail_formatter call ","colorizer wrap ","RSpec  configuration failure_color ","RSpec  configuration ","exception summary ","exception exception_count_description ","exception aggregation_metadata [] ","exception aggregation_metadata "," lambda ","exception colorizer wrap  "]}," RSpec Core Formatters ExceptionPresenter Factory multiple_exceptions_error?":{"type":"method","name":"multiple_exceptions_error?","children":[],"call":["MultipleExceptionError InterfaceTag  === "]}," RSpec Core Formatters ExceptionPresenter Factory with_multiple_error_options_as_needed":{"type":"method","name":"with_multiple_error_options_as_needed","children":[],"call":["options []= ","exception aggregation_metadata [] ","exception aggregation_metadata ","options merge "," multiple_exception_summarizer ","options [] "," sub_failure_list_formatter "," multiple_exceptions_error? ","Proc  new ","options merge  []= ","options merge  merge ","options merge  [] "]}," RSpec Core Formatters ExceptionPresenter Factory pending_options":{"type":"method","name":"pending_options","children":[],"call":["RSpec  configuration pending_color ","RSpec  configuration ","@execution_result status == ","@execution_result status ","@execution_result pending_message ","RSpec  configuration fixed_color ","@example full_description ","@execution_result pending_fixed? ","Proc  new "]}," RSpec Core Formatters ExceptionPresenter Factory options":{"type":"method","name":"options","children":[],"call":[" with_multiple_error_options_as_needed "," pending_options "]}," RSpec Core Formatters ExceptionPresenter Factory initialize":{"type":"method","name":"initialize","children":[],"call":["@execution_result exception ","@execution_result pending_exception ","@execution_result status == ","@execution_result status ","example execution_result ","example execution_result  exception ","example execution_result  pending_exception ","example execution_result  status == ","example execution_result  status "]}," RSpec Core Formatters ExceptionPresenter Factory build":{"type":"method","name":"build","children":[],"call":["ExceptionPresenter  new "," options "]}," RSpec Core Formatters ExceptionPresenter exception_backtrace":{"type":"method","name":"exception_backtrace","children":[],"call":[" exception backtrace "," exception "]}," RSpec Core Formatters ExceptionPresenter encoded_description":{"type":"method","name":"encoded_description","children":[],"call":[" encoded_string ","description nil? "]}," RSpec Core Formatters ExceptionPresenter formatted_message_and_backtrace":{"type":"method","name":"formatted_message_and_backtrace","children":[],"call":["RSpec Support EncodedString  new ","lines map "," encoding_of "," colorized_message_lines + "," colorized_formatted_backtrace "," colorized_message_lines ","formatted << ","lines each "," colorized_message_lines +  map ","  encoding_of _of "," colorized_message_ colorized_message_lines +  + "," colorized_message_ colorized_message_lines +  "," colorized_message_lines +  each "]}," RSpec Core Formatters ExceptionPresenter find_failed_line":{"type":"method","name":"find_failed_line","children":[],"call":[" exception_backtrace first "," exception_backtrace ","path =~ ","loaded_spec_files include? ","File  expand_path ","line [] "," exception_backtrace find ","RSpec  configuration loaded_spec_files ","RSpec  configuration ","RSpec  configuration in_project_source_dir_regex ","line start_with? "," exception_backtrace reject! ","File  expand_path downcase == ","File  expand_path downcase "," exception backtrace find "," exception backtrace "," exception "," example metadata [] downcase "," example metadata [] "," example metadata "," example ","File  expand_path  =~ ","RSpec  configuration loaded_spec_files  include? ","File  expand_File  expand_path  ","RSpec  configuration RSpec  configuration loaded_spec_files  ","File  expand_File  expand_path  downcase == ","File  expand_File  expand_path  downcase "]}," RSpec Core Formatters ExceptionPresenter read_failed_lines":{"type":"method","name":"read_failed_lines","children":[],"call":["RSpec  world syntax_highlighter highlight ","RSpec  world syntax_highlighter ","RSpec  world ","SnippetExtractor  extract_expression_lines_at ","line_number to_i ","RSpec  configuration max_displayed_failure_line_count ","RSpec  configuration ","file_and_line_number [] ","matching_line match "," find_failed_line ","RSpec  world source_cache syntax_highlighter highlight ","RSpec  world source_cache syntax_highlighter ","RSpec  world source_cache ","matching_line match [] ","SnippetExtractor  extract_expression_SnippetExtractor  extract_expression_lines_at _at ","matching_line match  [] "," find_failed_line  match "," find_failed_line  match [] "]}," RSpec Core Formatters ExceptionPresenter add_shared_group_lines":{"type":"method","name":"add_shared_group_lines","children":[],"call":["lines << ","colorizer wrap ","RSpec  configuration default_color ","RSpec  configuration ","frame description "," example metadata [] each "," example metadata [] "," example metadata "," example "]}," RSpec Core Formatters ExceptionPresenter extra_failure_lines":{"type":"method","name":"extra_failure_lines","children":[],"call":["lines push ","lines unshift ","lines empty? "," Array "," example metadata [] "," example metadata "," example ","lines last == ","lines last ","lines first == ","lines first "," Array  push "," Array  unshift "," Array  empty? "," Array  last == "," Array  last "," Array  first == "," Array  first "]}," RSpec Core Formatters ExceptionPresenter exception_lines":{"type":"method","name":"exception_lines","children":[],"call":["lines << ","line empty? "," encoded_string split each "," encoded_string split "," encoded_string "," exception_message_string "," exception "," exception_class_name "," exception_class_name =~ "," exception message to_s "," exception message "]}," RSpec Core Formatters ExceptionPresenter exception_message_string":{"type":"method","name":"exception_message_string","children":[],"call":["other class ","exception class ","exception message to_s ","exception message "]}," RSpec Core Formatters ExceptionPresenter failure_slash_error_lines":{"type":"method","name":"failure_slash_error_lines","children":[],"call":["lines unshift ","line sub ","lines map ","SnippetExtractor  least_indentation_from ","lines []= ","lines [] strip ","lines [] ","lines count == ","lines count "," read_failed_lines "," read_failed_lines  unshift "," read_failed_lines  map ","SnippetExtractor  SnippetExtractor  least_indentation_from _from "," read_failed_lines  []= "," read_failed_lines  [] strip "," read_failed_lines  [] "," read_failed_lines  count == "," read_failed_lines  count "," read_failed_ read_failed_lines  "]}," RSpec Core Formatters ExceptionPresenter failure_lines":{"type":"method","name":"failure_lines","children":[],"call":["lines concat "," extra_failure_lines "," exception_lines ","lines << "," exception_lines first empty? ! "," exception_lines first empty? "," exception_lines first ","section size > ","section size ","sections any? "," failure_slash_error_lines "," tap "," encoded_string split each "," encoded_string split "," encoded_string "," exception message to_s "," exception message "," exception "," exception_class_name "," exception_class_name =~ "," failure_slash_error_line "," description == "," description "]}," RSpec Core Formatters ExceptionPresenter exception_class_name":{"type":"method","name":"exception_class_name","children":[],"call":["name == ","exception class name to_s ","exception class name ","exception class "," exception class name to_s "," exception class name "," exception class "," exception ","exception class name to_s  == "," exception class name to_s  == ","exception class exception class name to_s  to_s ","exception class  exception class name to_s  to_s ","exception class exception class name to_s  ","exception class  exception class name to_s  "," exception class exception class name to_s  to_s "," exception class  exception class name to_s  to_s "," exception class exception class name to_s  "," exception class  exception class name to_s  "]}," RSpec Core Formatters ExceptionPresenter indent_lines":{"type":"method","name":"indent_lines","children":[],"call":["line empty? ","index == ","lines each_with_index map ","lines each_with_index ","  * ","alignment_basis length ","alignment_basis << ","  *  length ","  *  << "]}," RSpec Core Formatters ExceptionPresenter encoded_string":{"type":"method","name":"encoded_string","children":[],"call":["RSpec Support EncodedString  new ","Encoding  default_external "]}," RSpec Core Formatters ExceptionPresenter encoding_of":{"type":"method","name":"encoding_of","children":[],"call":["string encoding "]}," RSpec Core Formatters ExceptionPresenter final_exception":{"type":"method","name":"final_exception","children":[],"call":[" final_exception ","previous << ","previous include? ! ","previous include? ","Exception  === ","exception cause ","exception exception cause  "]}," RSpec Core Formatters ExceptionPresenter fully_formatted_lines":{"type":"method","name":"fully_formatted_lines","children":[],"call":["lines unshift "," indent_lines ","(send nil :encoded_description\n  (send nil :description)) compact flatten ","(send nil :encoded_description\n  (send nil :description)) compact "," extra_detail_formatter call "," extra_detail_formatter "," formatted_message_and_backtrace "," detail_formatter call "," example "," detail_formatter "," encoded_description "," description ","(send nil :description) compact flatten ","(send nil :description) compact "," indent_lines  unshift ","(send nil :encoded_description\n  (send nil :description)) compact flatten  unshift ","(send nil :description) compact flatten  unshift "," indent_ indent_lines  "," indent_(send nil :encoded_description\n  (send nil :description)) compact flatten  "," indent_(send nil :description) compact flatten  "]}," RSpec Core Formatters ExceptionPresenter fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":["lines join << ","lines join "," fully_formatted_lines "," extra_detail_formatter call "," extra_detail_formatter "," formatted_message_and_backtrace "," description_and_detail ","  * ","alignment_basis length "," fully_formatted_lines  join << "," fully_formatted_lines  join "," fully_formatted_ fully_formatted_lines  "]}," RSpec Core Formatters ExceptionPresenter colorized_formatted_backtrace":{"type":"method","name":"colorized_formatted_backtrace","children":[],"call":["colorizer wrap ","RSpec  configuration detail_color ","RSpec  configuration "," formatted_backtrace map "," formatted_backtrace "]}," RSpec Core Formatters ExceptionPresenter formatted_cause":{"type":"method","name":"formatted_cause","children":[],"call":["cause << "," backtrace_formatter format_backtrace first "," backtrace_formatter format_backtrace "," example metadata "," example ","last_cause backtrace "," backtrace_formatter ","last_cause backtrace empty? "," encoded_string split each "," encoded_string split "," encoded_string "," exception_message_string "," exception_class_name "," exception_class_name =~ ","exception cause "," final_exception ","last_cause backtrace nil? ","last_cause message to_s ","last_cause message "," final_exception  backtrace "," final_exception  backtrace empty? "," final_exception  backtrace nil? "," final_exception  message to_s "," final_exception  message "]}," RSpec Core Formatters ExceptionPresenter formatted_backtrace":{"type":"method","name":"formatted_backtrace","children":[],"call":[" backtrace_formatter format_backtrace + "," formatted_cause "," backtrace_formatter format_backtrace "," example metadata "," example ","exception backtrace "," backtrace_formatter "," exception backtrace "," exception "," exception_backtrace "]}," RSpec Core Formatters ExceptionPresenter colorized_message_lines":{"type":"method","name":"colorized_message_lines","children":[],"call":["colorizer wrap "," message_color "," add_shared_group_lines map "," add_shared_group_lines "," failure_lines "]}," RSpec Core Formatters ExceptionPresenter message_lines":{"type":"method","name":"message_lines","children":[],"call":[" add_shared_group_lines "," failure_lines "]}," RSpec Core Formatters ExceptionPresenter initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options fetch ","RSpec  configuration backtrace_formatter ","RSpec  configuration ","Proc  new ","example full_description ","RSpec  configuration failure_color ","(send\n  (lvar :options) :fetch\n  (sym :description_formatter)) call "]}," RSpec Core Formatters DocumentationFormatter flush_messages":{"type":"method","name":"flush_messages","children":[],"call":["@messages clear "," output puts "," current_indentation "," output ","@messages each "]}," RSpec Core Formatters DocumentationFormatter message":{"type":"method","name":"message","children":[],"call":[" output puts ","notification message "," current_indentation "," output ","@messages << "]}," RSpec Core Formatters DocumentationFormatter example_started":{"type":"method","name":"example_started","children":[],"call":[]}," RSpec Core Formatters ConsoleCodes config_colors_to_methods":{"type":"method","name":"config_colors_to_methods","children":[],"call":["hash []= ","method to_s sub to_sym ","method to_s sub ","method to_s ","Configuration  instance_methods grep inject ","Configuration  instance_methods grep ","Configuration  instance_methods "]}," RSpec Core Formatters BisectDebugFormatter bisect_started_message":{"type":"method","name":"bisect_started_message","children":[],"call":["notification bisect_runner inspect ","notification bisect_runner "]}," RSpec Core Formatters BisectDebugFormatter describe_ids":{"type":"method","name":"describe_ids","children":[],"call":["ids size ","(send\n  (lvar :organized_ids) :map) join ","organized_ids map ","Formatters Helpers  organize_ids ","(send\n  (lvar :Formatters Helpers  organize_ids ) :map) join ","Formatters Helpers  organize_ids  map "]}," RSpec Core Formatters BisectDebugFormatter bisect_round_detected_multiple_culprits":{"type":"method","name":"bisect_round_detected_multiple_culprits","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectDebugFormatter bisect_round_ignoring_ids":{"type":"method","name":"bisect_round_ignoring_ids","children":[],"call":[" output print "," describe_ids ","notification remaining_ids "," output ","notification ids_to_ignore "]}," RSpec Core Formatters BisectDebugFormatter bisect_round_started":{"type":"method","name":"bisect_round_started","children":[],"call":[]}," RSpec Core Formatters BisectDebugFormatter bisect_dependency_check_failed":{"type":"method","name":"bisect_dependency_check_failed","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectDebugFormatter bisect_dependency_check_passed":{"type":"method","name":"bisect_dependency_check_passed","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectDebugFormatter bisect_individual_run_complete":{"type":"method","name":"bisect_individual_run_complete","children":[],"call":[" output print ","Helpers  format_duration ","notification duration "," output "]}," RSpec Core Formatters BisectDebugFormatter bisect_individual_run_start":{"type":"method","name":"bisect_individual_run_start","children":[],"call":[" output print ","notification command "," output "]}," RSpec Core Formatters BisectDebugFormatter bisect_original_run_complete":{"type":"method","name":"bisect_original_run_complete","children":[],"call":[" output puts "," describe_ids ","notification non_failing_example_ids "," output ","notification failed_example_ids ","Helpers  format_duration ","notification duration "]}," RSpec Core Formatters BisectProgressFormatter bisect_started_message":{"type":"method","name":"bisect_started_message","children":[],"call":["options inspect ","notification original_cli_args join ","notification original_cli_args ","notification original_cli_args join  inspect "]}," RSpec Core Formatters BisectProgressFormatter bisect_aborted":{"type":"method","name":"bisect_aborted","children":[],"call":[" output puts ","notification repro "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_failed":{"type":"method","name":"bisect_failed","children":[],"call":[" output puts ","notification failure_explanation "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_repro_command":{"type":"method","name":"bisect_repro_command","children":[],"call":[" output puts ","notification repro "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_complete":{"type":"method","name":"bisect_complete","children":[],"call":[" output puts ","Helpers  format_duration ","notification duration ","notification remaining_count ","notification original_non_failing_count "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_individual_run_complete":{"type":"method","name":"bisect_individual_run_complete","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_round_detected_multiple_culprits":{"type":"method","name":"bisect_round_detected_multiple_culprits","children":[],"call":[" output print ","Helpers  format_duration ","notification duration "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_round_ignoring_ids":{"type":"method","name":"bisect_round_ignoring_ids","children":[],"call":[" output print ","Helpers  format_duration ","notification duration "," output ","notification ignore_range description ","notification ignore_range "]}," RSpec Core Formatters BisectProgressFormatter bisect_round_started":{"type":"method","name":"bisect_round_started","children":[],"call":[" output print "," output ","notification candidate_range description ","notification candidate_range ","notification remaining_count ","notification round ","Helpers  pluralize ","notification subset_size "]}," RSpec Core Formatters BisectProgressFormatter bisect_dependency_check_failed":{"type":"method","name":"bisect_dependency_check_failed","children":[],"call":[" output puts ","= * "," output ","@bisect_runner == "]}," RSpec Core Formatters BisectProgressFormatter bisect_dependency_check_passed":{"type":"method","name":"bisect_dependency_check_passed","children":[],"call":[" output puts "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_dependency_check_started":{"type":"method","name":"bisect_dependency_check_started","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_original_run_complete":{"type":"method","name":"bisect_original_run_complete","children":[],"call":[" output puts "," output ","Helpers  format_duration ","notification duration ","Helpers  pluralize ","notification non_failing_example_ids size ","notification non_failing_example_ids ","notification failed_example_ids size ","notification failed_example_ids "]}," RSpec Core Formatters BisectProgressFormatter bisect_starting":{"type":"method","name":"bisect_starting","children":[],"call":[" output print "," output "," output puts "," bisect_started_message ","options inspect ","notification original_cli_args join ","notification original_cli_args ","notification original_cli_args join  inspect "]}," RSpec Core Formatters BisectProgressFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters BisectDRbFormatter notify_results":{"type":"method","name":"notify_results","children":[],"call":["@bisect_server latest_run_results= "]}," RSpec Core Formatters BisectDRbFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","@bisect_server expected_failures ","RSpec  configuration files_or_directories_to_run= ","@bisect_server files_or_directories_to_run ","RSpec  configuration ","DRbObject  new_with_uri ","RSpec  configuration drb_port ","DRbObject  new_with_uri  expected_failures ","DRbObject  new_with_uri  files_or_directories_to_run "]}," RSpec Core Formatters BaseBisectFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":[" notify_results ","Bisect ExampleSetDescriptor  new "]}," RSpec Core Formatters BaseBisectFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":["RSpec  world wants_to_quit= ","RSpec  world ","@remaining_failures empty? ! ","@remaining_failures empty? ","status == ","notification example execution_result status ","notification example execution_result ","notification example ","@remaining_failures delete ","notification example id ","@remaining_failures include? ","@all_example_ids << ","notification example execution_result status  == ","notification example execution_result notification example execution_result status  "]}," RSpec Core Formatters BaseBisectFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":["@failed_example_ids << ","notification example id ","notification example "]}," RSpec Core Formatters BaseBisectFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Formatters BaseBisectFormatter inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RSpec Core InclusionRules split_file_scoped_rules":{"type":"method","name":"split_file_scoped_rules","children":[],"call":[" class new "," class ","Hash  new ","rules_dup delete ","@rules dup ","@rules dup  delete "]}," RSpec Core FilterRules include_example?":{"type":"method","name":"include_example?","children":[],"call":["MetadataFilter  apply? ","example metadata "]}," RSpec Core FilterManager file_scoped_include?":{"type":"method","name":"file_scoped_include?","children":[],"call":["MetadataFilter  filter_applies? ","locations [] empty? ","locations [] ","File  expand_path ","ex_metadata [] ","ids [] empty? ","ids [] "]}," RSpec Core FilterManager prune_conditionally_filtered_examples":{"type":"method","name":"prune_conditionally_filtered_examples","children":[],"call":["meta [] ","meta fetch ! ","meta fetch ","ex metadata ","examples reject ","ex metadata  [] ","ex metadata  fetch ! ","ex metadata  fetch ","ex ex metadata data "]}," RSpec Core FilterManager add_path_to_arrays_filter":{"type":"method","name":"add_path_to_arrays_filter","children":[],"call":[" inclusions add "," inclusions ","filter [] concat ","filter [] ","h []= ","Hash  new "," inclusions delete "]}," RSpec Core FilterManager add_ids":{"type":"method","name":"add_ids","children":[],"call":[" add_path_to_arrays_filter ","Metadata  relative_path ","File  expand_path "]}," RSpec Core ExampleStatusParser split_line":{"type":"method","name":"split_line","children":[],"call":["line split "]}," RSpec Core ExampleStatusParser headers":{"type":"method","name":"headers","children":[],"call":[" split_line grep map "," split_line grep "," split_line "]}," RSpec Core ExampleStatusParser parse_row":{"type":"method","name":"parse_row","children":[],"call":["Hash  [] "," headers zip "," split_line "," headers "]}," RSpec Core ExampleStatusParser parse":{"type":"method","name":"parse","children":[],"call":[" parse_row ","@row_lines map "]}," RSpec Core ExampleStatusParser initialize":{"type":"method","name":"initialize","children":[],"call":["string lines to_a ","string lines "]}," RSpec Core ExampleStatusDumper column_widths":{"type":"method","name":"column_widths","children":[],"call":["values map max ","values map ","value_sets [] << ","header to_s ","value_sets [] "," headers each_with_index map "," headers each_with_index "," headers "," rows transpose "," rows ","value_sets [] <<  map max ","value_sets [] <<  map "," rows transpose  [] << "," rows transpose  [] "]}," RSpec Core ExampleStatusDumper headers":{"type":"method","name":"headers","children":[],"call":["@examples first keys ","@examples first "]}," RSpec Core ExampleStatusDumper formatted_row_from":{"type":"method","name":"formatted_row_from","children":[],"call":["padded_values join << ","padded_values join ","value ljust "," column_widths [] "," column_widths ","row_values each_with_index map ","row_values each_with_index "]}," RSpec Core ExampleStatusDumper rows":{"type":"method","name":"rows","children":[],"call":["ex values_at "," headers ","@examples map "]}," RSpec Core ExampleStatusDumper formatted_value_rows":{"type":"method","name":"formatted_value_rows","children":[],"call":[" formatted_row_from "," rows map "," rows "]}," RSpec Core ExampleStatusDumper formatted_header_rows":{"type":"method","name":"formatted_header_rows","children":[],"call":[" formatted_row_from "," headers map "," headers ","- * "," column_widths map "," column_widths "]}," RSpec Core ExampleStatusDumper dump":{"type":"method","name":"dump","children":[],"call":["(send\n  (send nil :formatted_header_rows) :+\n  (send nil :formatted_value_rows)) join << ","(send\n  (send nil :formatted_header_rows) :+\n  (send nil :formatted_value_rows)) join "," formatted_header_rows + "," formatted_value_rows "," formatted_header_rows ","@examples empty? "]}," RSpec Core ExampleStatusDumper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ExampleStatusMerger sort_value_from":{"type":"method","name":"sort_value_from","children":[],"call":["scoped_id split map "," method ","scoped_id split ","Example  parse_id ","example fetch ","example fetch split "]}," RSpec Core ExampleStatusMerger spec_file_from":{"type":"method","name":"spec_file_from","children":[],"call":["ex_id split first ","ex_id split "]}," RSpec Core ExampleStatusMerger loaded_spec_files":{"type":"method","name":"loaded_spec_files","children":[],"call":["Set  new ","@this_run keys map "," method ","@this_run keys "]}," RSpec Core ExampleStatusMerger example_must_no_longer_exist?":{"type":"method","name":"example_must_no_longer_exist?","children":[],"call":["@file_exists_cache [] ! ","@file_exists_cache [] "," loaded_spec_files include? "," loaded_spec_files "," spec_file_from ","@this_run key? "," loaded_ spec_file_from s include? "," loaded_ spec_file_from s ","  spec_file_from _from "]}," RSpec Core ExampleStatusMerger delete_previous_examples_that_no_longer_exist":{"type":"method","name":"delete_previous_examples_that_no_longer_exist","children":[],"call":[" example_must_no_longer_exist? ","@from_previous_runs delete_if "]}," RSpec Core ExampleStatusMerger hash_from":{"type":"method","name":"hash_from","children":[],"call":["hash []= ","example fetch ","example_list inject "]}," RSpec Core ExampleStatusMerger merge":{"type":"method","name":"merge","children":[],"call":["(send\n  (ivar :@this_run) :merge\n  (ivar :@from_previous_runs)) values sort_by "," method ","(send\n  (ivar :@this_run) :merge\n  (ivar :@from_previous_runs)) values ","new fetch == ","new fetch ","@this_run merge "," delete_previous_examples_that_no_longer_exist "]}," RSpec Core ExampleStatusMerger initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","File  exist? ","Hash  new "," hash_from "]}," RSpec Core ExampleStatusPersister statuses_from_this_run":{"type":"method","name":"statuses_from_this_run","children":[],"call":["Formatters Helpers  format_duration ","result run_time ","result status to_s ","result status ","ex id ","ex execution_result ","@examples map ","ex execution_result  run_time ","ex execution_result  status to_s ","ex execution_result  status ","ex execution_ex execution_result  "]}," RSpec Core ExampleStatusPersister dump_statuses":{"type":"method","name":"dump_statuses","children":[],"call":["ExampleStatusDumper  dump ","ExampleStatusMerger  merge "," statuses_from_this_run ","ExampleStatusParser  parse "]}," RSpec Core ExampleStatusPersister persist":{"type":"method","name":"persist","children":[],"call":["f truncate ","f pos ","f flush ","f write "," dump_statuses ","f rewind ","f read ","f flock ","File  open ","File RDWR  | ","RSpec Support DirectoryMaker  mkdir_p ","File  dirname "," write "," dumped_statuses "]}," RSpec Core ExampleStatusPersister initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ExampleStatusPersister load_from":{"type":"method","name":"load_from","children":[],"call":[]}," RSpec ExampleGroups remove_all_constants":{"type":"method","name":"remove_all_constants","children":[],"call":[]}," RSpec Core SharedExampleGroupInclusionStackFrame shared_example_group_inclusions":{"type":"method","name":"shared_example_group_inclusions","children":[],"call":[]}," RSpec Core SharedExampleGroupInclusionStackFrame with_frame":{"type":"method","name":"with_frame","children":[],"call":[]}," RSpec Core SharedExampleGroupInclusionStackFrame current_backtrace":{"type":"method","name":"current_backtrace","children":[],"call":[]}," RSpec Core SharedExampleGroupInclusionStackFrame description":{"type":"method","name":"description","children":[],"call":[" formatted_inclusion_location "," shared_group_name inspect "," shared_group_name "]}," RSpec Core SharedExampleGroupInclusionStackFrame formatted_inclusion_location":{"type":"method","name":"formatted_inclusion_location","children":[],"call":["RSpec  configuration backtrace_formatter backtrace_line "," inclusion_location sub "," inclusion_location ","RSpec  configuration backtrace_formatter ","RSpec  configuration "]}," RSpec Core SharedExampleGroupInclusionStackFrame initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ExampleGroup method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise "," class respond_to? "," class "]}," RSpec Core ExampleGroup update_inherited_metadata":{"type":"method","name":"update_inherited_metadata","children":[],"call":[]}," RSpec Core ExampleGroup singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," RSpec Core ExampleGroup inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," RSpec Core ExampleGroup initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ExampleGroup each_instance_variable_for_example":{"type":"method","name":"each_instance_variable_for_example","children":[],"call":[]}," RSpec Core ExampleGroup id":{"type":"method","name":"id","children":[],"call":[]}," RSpec Core ExampleGroup declaration_locations":{"type":"method","name":"declaration_locations","children":[],"call":[]}," RSpec Core ExampleGroup superclass_before_context_ivars":{"type":"method","name":"superclass_before_context_ivars","children":[],"call":[]}," RSpec Core ExampleGroup currently_executing_a_context_hook?":{"type":"method","name":"currently_executing_a_context_hook?","children":[],"call":[]}," RSpec Core ExampleGroup next_runnable_index_for":{"type":"method","name":"next_runnable_index_for","children":[],"call":[]}," RSpec Core ExampleGroup traverse_tree_until":{"type":"method","name":"traverse_tree_until","children":[],"call":[]}," RSpec Core ExampleGroup remove_example":{"type":"method","name":"remove_example","children":[],"call":[]}," RSpec Core ExampleGroup add_example":{"type":"method","name":"add_example","children":[],"call":[]}," RSpec Core ExampleGroup reset_memoized":{"type":"method","name":"reset_memoized","children":[],"call":[]}," RSpec Core ExampleGroup with_replaced_metadata":{"type":"method","name":"with_replaced_metadata","children":[],"call":[]}," RSpec Core ExampleGroup idempotently_define_singleton_method":{"type":"method","name":"idempotently_define_singleton_method","children":[],"call":[]}," RSpec Core Example ExecutionResult calculate_run_time":{"type":"method","name":"calculate_run_time","children":[],"call":[" run_time= ","(send\n  (lvar :finished_at) :-\n  (send nil :started_at)) to_f ","finished_at - "," started_at "," finished_at= "]}," RSpec Core Example ExecutionResult ensure_timing_set":{"type":"method","name":"ensure_timing_set","children":[],"call":[" calculate_run_time ","clock now "," finished_at "]}," RSpec Core Example ExecutionResult example_skipped?":{"type":"method","name":"example_skipped?","children":[],"call":[" pending_exception ! "," pending_exception "," status == "," status "]}," RSpec Core Example ExecutionResult pending_fixed?":{"type":"method","name":"pending_fixed?","children":[],"call":[" pending_fixed ! ! "," pending_fixed ! "," pending_fixed "]}," RSpec Core Example location_description":{"type":"method","name":"location_description","children":[],"call":[" location "]}," RSpec Core Example generate_description":{"type":"method","name":"generate_description","children":[],"call":[" location_description + ","e backtrace first ","e backtrace ","e message ","e class "," location_description ","RSpec Matchers  generated_description "]}," RSpec Core Example with_around_and_singleton_context_hooks":{"type":"method","name":"with_around_and_singleton_context_hooks","children":[],"call":["singleton_context_hooks_host run_after_context_hooks "," example_group_instance "," with_around_example_hooks ","singleton_context_hooks_host run_before_context_hooks "," example_group_instance singleton_class "," example_group_instance singleton_class  run_after_context_hooks "," example_group_instance singleton_class  run_before_context_hooks "]}," RSpec Core Example hooks":{"type":"method","name":"hooks","children":[],"call":[" example_group_instance singleton_class hooks "," example_group_instance singleton_class "," example_group_instance "]}," RSpec Core Example set_aggregate_failures_exception":{"type":"method","name":"set_aggregate_failures_exception","children":[],"call":[" display_exception= ","exception add "," display_exception ","RSpec Core MultipleExceptionError InterfaceTag  for "," set_exception "," display_RSpec Core MultipleExceptionError InterfaceTag  for = ","RSpec Core MultipleExceptionError InterfaceTag  for  add "," display_RSpec Core MultipleExceptionError InterfaceTag  for  "," set_RSpec Core MultipleExceptionError InterfaceTag  for  "]}," RSpec Core Example display_exception=":{"type":"method","name":"display_exception=","children":[],"call":[" execution_result pending_exception= "," execution_result "," execution_result pending_fixed= ","(send\n  (const\n    (const nil :Pending) :PendingExampleFixedError) :===\n  (lvar :ex)) ! ","Pending PendingExampleFixedError  === "," pending? "]}," RSpec Core Example display_exception":{"type":"method","name":"display_exception","children":[],"call":[" execution_result pending_exception "," execution_result "]}," RSpec Core Example skipped?":{"type":"method","name":"skipped?","children":[],"call":[" skip ! ! "," skip ! "," skip "]}," RSpec Core Example inspect":{"type":"method","name":"inspect","children":[],"call":[" description inspect "," description "," class name "," class "]}," RSpec Core Example update_inherited_metadata":{"type":"method","name":"update_inherited_metadata","children":[],"call":[" metadata update "," metadata "]}," RSpec Core Example duplicate_with":{"type":"method","name":"duplicate_with","children":[],"call":["Example  new "," metadata [] "," metadata "," description clone "," description "," example_group ","new_metadata delete ","RSpec Core Metadata RESERVED_KEYS  each "," metadata clone merge "," metadata clone ","new_metadata [] "," metadata clone merge  delete "," metadata clone merge  [] "]}," RSpec Core Example parse_id":{"type":"method","name":"parse_id","children":[],"call":[]}," RSpec Core Example id":{"type":"method","name":"id","children":[],"call":["Metadata  id_from "," metadata "]}," RSpec Core Example rerun_argument":{"type":"method","name":"rerun_argument","children":[],"call":[" location_rerun_argument ","meta [] ","loaded_spec_files include? ","Metadata  ascending "," metadata ","RSpec  configuration loaded_spec_files ","RSpec  configuration ","RSpec  configuration loaded_spec_files  include? ","RSpec  configuration RSpec  configuration loaded_spec_files  "]}," RSpec Core Example location_rerun_argument":{"type":"method","name":"location_rerun_argument","children":[],"call":["meta [] ","loaded_spec_files include? ","Metadata  ascending "," metadata ","RSpec  configuration loaded_spec_files ","RSpec  configuration ","RSpec  configuration loaded_spec_files  include? ","RSpec  configuration RSpec  configuration loaded_spec_files  "]}," RSpec Core Example inspect_output":{"type":"method","name":"inspect_output","children":[],"call":[" location "," metadata [] to_s empty? "," metadata [] to_s "," metadata [] "," metadata "," description ","inspect_output << "]}," RSpec Core DRbOptions add_error_exit_code":{"type":"method","name":"add_error_exit_code","children":[],"call":["argv << << ","@submitted_options [] to_s ","@submitted_options [] ","argv << "]}," RSpec Core DidYouMean red_font":{"type":"method","name":"red_font","children":[],"call":["colorizer wrap "]}," RSpec Core DidYouMean top_and_tail":{"type":"method","name":"top_and_tail","children":[],"call":["rspec_format insert join + ","rspec_format insert join ","rspec_format insert ","  * "]}," RSpec Core DidYouMean formats":{"type":"method","name":"formats","children":[],"call":[" red_font "," top_and_tail ","probables map "]}," RSpec Core DidYouMean call":{"type":"method","name":"call","children":[],"call":[" formats ","probables any? ","checker correct [] ","checker correct "," relative_file_name sub "," relative_file_name "," DidYouMean SpellChecker  new ","Dir  [] ","checker correct []  any? "," DidYouMean SpellChecker  new  correct [] "," DidYouMean SpellChecker  new  correct "]}," RSpec Core DidYouMean initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core ConfigurationOptions resolve_xdg_config_home":{"type":"method","name":"resolve_xdg_config_home","children":[],"call":["File  expand_path ","ENV  fetch "]}," RSpec Core ConfigurationOptions xdg_options_file_path":{"type":"method","name":"xdg_options_file_path","children":[],"call":["File  join "," resolve_xdg_config_home "," resolve_ resolve_xdg_config_home  "]}," RSpec Core ConfigurationOptions home_options_file_path":{"type":"method","name":"home_options_file_path","children":[],"call":["RSpec  warning ","File  join ","File  expand_path "]}," RSpec Core ConfigurationOptions xdg_options_file_if_exists":{"type":"method","name":"xdg_options_file_if_exists","children":[],"call":["File  exist? "," xdg_options_file_path "," xdg_options_file_ xdg_options_file_path  "]}," RSpec Core ConfigurationOptions parse_args_ignoring_files_or_dirs_to_run":{"type":"method","name":"parse_args_ignoring_files_or_dirs_to_run","children":[],"call":["options delete ","Parser  parse ","Parser  parse  delete "]}," RSpec Core Configuration define_mixed_in_module":{"type":"method","name":"define_mixed_in_module","children":[],"call":[" on_existing_matching_groups ","mod_list append ","Metadata  build_hash_from "," raise ","mod inspect ","Module  === "]}," RSpec Core Configuration safe_prepend":{"type":"method","name":"safe_prepend","children":[],"call":["host __send__ ","host < "]}," RSpec Core Configuration metadata_applies_to_group?":{"type":"method","name":"metadata_applies_to_group?","children":[],"call":["MetadataFilter  apply? ","group metadata ","meta empty? "]}," RSpec Core Configuration on_existing_matching_groups":{"type":"method","name":"on_existing_matching_groups","children":[],"call":[" metadata_applies_to_group? tap "," metadata_applies_to_group? "," world traverse_example_group_trees_until "," world ","MetadataFilter  apply? ","group metadata ","meta empty? "," world all_example_groups each "," world all_example_groups "]}," RSpec Core Configuration add_hook_to_existing_matching_groups":{"type":"method","name":"add_hook_to_existing_matching_groups","children":[],"call":[" on_existing_matching_groups ","Metadata  build_hash_from ","meta dup "," world example_groups each "," world example_groups "," world ","scope nil? ","scope == ","Metadata  build_hash_from  dup "]}," RSpec Core Configuration configure_group_with":{"type":"method","name":"configure_group_with","children":[],"call":[" __send__ ","module_list items_for each ","module_list items_for ","group metadata "]}," RSpec Core Configuration clear_values_derived_from_example_status_persistence_file_path":{"type":"method","name":"clear_values_derived_from_example_status_persistence_file_path","children":[],"call":[]}," RSpec Core Configuration output_wrapper":{"type":"method","name":"output_wrapper","children":[],"call":["OutputWrapper  new "," output_stream "]}," RSpec Core Configuration define_built_in_hooks":{"type":"method","name":"define_built_in_hooks","children":[],"call":["procsy example set_aggregate_failures_exception ","procsy example "," aggregate_failures "," around "]}," RSpec Core Configuration run_suite_hooks":{"type":"method","name":"run_suite_hooks","children":[],"call":["hooks equal? ","context set_exception ","hook run ","hooks each ","SuiteHookContext  new "," reporter ","SuiteHookContext  new  set_exception "]}," RSpec Core Configuration handle_suite_hook":{"type":"method","name":"handle_suite_hook","children":[],"call":["RSpec  warn_with ","meta inspect ","meta empty? ","scope == ","collection __send__ ","hook_type new "]}," RSpec Core Configuration load_file_handling_errors":{"type":"method","name":"load_file_handling_errors","children":[],"call":["RSpec  world wants_to_quit= ","RSpec  world "," reporter notify_non_example_exception "," reporter ","Metadata  relative_path ","DidYouMean  new call ","DidYouMean  new "," __send__ "," raise ","RSpec  world rspec_is_quitting= "]}," RSpec Core Configuration bisect_runner_class":{"type":"method","name":"bisect_runner_class","children":[],"call":[" raise "," bisect_runner inspect "," bisect_runner ","RSpec Support  require_rspec_core "]}," RSpec Core Configuration on_example_group_definition_callbacks":{"type":"method","name":"on_example_group_definition_callbacks","children":[],"call":[]}," RSpec Core Configuration on_example_group_definition":{"type":"method","name":"on_example_group_definition","children":[],"call":[" on_example_group_definition_callbacks << "," on_example_group_definition_callbacks "]}," RSpec Core Configuration with_suite_hooks":{"type":"method","name":"with_suite_hooks","children":[],"call":[" run_suite_hooks "," dry_run? ","RSpec  current_scope= "," run_hooks_with ","SuiteHookContext  new "]}," RSpec Core Configuration around":{"type":"method","name":"around","children":[],"call":["g around "," add_hook_to_existing_matching_groups ","block __id__ "," on_existing_matching_groups "]}," RSpec Core Configuration append_after":{"type":"method","name":"append_after","children":[],"call":["g append_after "," add_hook_to_existing_matching_groups ","block __id__ ","@after_suite_hooks << ","Hooks AfterHook  new "," handle_suite_hook "," on_existing_matching_groups "]}," RSpec Core Configuration prepend_before":{"type":"method","name":"prepend_before","children":[],"call":["g prepend_before "," add_hook_to_existing_matching_groups ","block __id__ ","@before_suite_hooks unshift ","Hooks BeforeHook  new "," handle_suite_hook "," on_existing_matching_groups "]}," RSpec Core Configuration when_first_matching_example_defined":{"type":"method","name":"when_first_matching_example_defined","children":[],"call":["@derived_metadata_blocks append ","@derived_metadata_blocks delete ","example_or_group_meta key? "," lambda ","Metadata  build_hash_from ","block call ","@derived_metadata_blocks items_for delete ","@derived_metadata_blocks items_for "]}," RSpec Core Configuration raise_on_warning=":{"type":"method","name":"raise_on_warning=","children":[],"call":["RSpec Support  warning_notifier= "]}," RSpec Core Configuration in_project_source_dir_regex":{"type":"method","name":"in_project_source_dir_regex","children":[],"call":["Regexp  union ","Regexp  escape ","File  expand_path "," project_source_dirs map "," project_source_dirs "]}," RSpec Core Configuration configure_example":{"type":"method","name":"configure_example","children":[],"call":["MemoizedHelpers  define_helpers_on ","modules empty? "," safe_include ","example example_group_instance singleton_class ","example example_group_instance ","modules each ","@include_modules items_for ","example metadata ","singleton_group with_replaced_metadata ","example_hooks register_global_singleton_context_hooks "," hooks ","@include_modules items_for each ","example example_group_instance singleton_class with_replaced_metadata ","@include_modules items_for  empty? ","@include_modules items_for  each ","@include_@include_modules items_for  items_for ","example example_group_instance singleton_class  with_replaced_metadata ","@include_@include_modules items_for  items_for each "]}," RSpec Core Configuration prepend":{"type":"method","name":"prepend","children":[],"call":[" safe_prepend "," define_mixed_in_module ","@prepend_modules append ","Metadata  build_hash_from "," configure_existing_groups "," on_existing_matching_groups "]}," RSpec Core Configuration include_context":{"type":"method","name":"include_context","children":[],"call":[" include "," world shared_example_group_registry find "," world shared_example_group_registry "," world "]}," RSpec Core Configuration filter_run_when_matching":{"type":"method","name":"filter_run_when_matching","children":[],"call":[" filter_run "," when_first_matching_example_defined "]}," RSpec Core Configuration spec_files_with_failures":{"type":"method","name":"spec_files_with_failures","children":[],"call":["(send\n  (send nil :last_run_statuses) :inject\n  (send\n    (const nil :Set) :new)) to_a ","files << ","Example  parse_id first ","Example  parse_id ","status == "," last_run_statuses inject ","Set  new "," last_run_statuses ","id split first ","id split "]}," RSpec Core Configuration last_run_statuses":{"type":"method","name":"last_run_statuses","children":[],"call":["RSpec  warning ","e inspect ","path inspect ","hash []= ","example fetch ","VALID_STATUSES  include? ","example [] ","ExampleStatusPersister  load_from inject ","ExampleStatusPersister  load_from "," example_status_persistence_file_path ","Hash  new tap ","Hash  new "," example_status_persistence_file_path  inspect "," example_example [] _persistence_file_path "," example_status_persistence_file_ example_status_persistence_file_path  "]}," RSpec Core Configuration color_mode":{"type":"method","name":"color_mode","children":[],"call":[" value_for "]}," RSpec Core Configuration reset_filters":{"type":"method","name":"reset_filters","children":[],"call":[" filter_manager exclude_only ","Metadata  deep_hash_dup "," static_config_filter_manager exclusions rules "," static_config_filter_manager exclusions "," static_config_filter_manager "," filter_manager "," filter_manager include_only "," static_config_filter_manager inclusions rules "," static_config_filter_manager inclusions "," filter_manager= ","FilterManager  new "]}," RSpec Core Configuration reset_reporter":{"type":"method","name":"reset_reporter","children":[],"call":[]}," RSpec Core Configuration bisect_runner=":{"type":"method","name":"bisect_runner=","children":[],"call":[" raise ","@bisect_runner inspect ","value inspect ","value != "]}," RSpec Core Configuration shared_context_metadata_behavior=":{"type":"method","name":"shared_context_metadata_behavior=","children":[],"call":[" raise ","value inspect "]}," RSpec Core Configuration fail_fast=":{"type":"method","name":"fail_fast=","children":[],"call":["RSpec  warning ","value inspect ","value to_i == ","value to_i "]}," RSpec Core Configuration only_failures_but_not_configured?":{"type":"method","name":"only_failures_but_not_configured?","children":[],"call":[" example_status_persistence_file_path ! "," example_status_persistence_file_path "," only_failures? "]}," RSpec Core Configuration example_status_persistence_file_path=":{"type":"method","name":"example_status_persistence_file_path=","children":[],"call":[" clear_values_derived_from_example_status_persistence_file_path "]}," RSpec Core Configuration default_path=":{"type":"method","name":"default_path=","children":[],"call":[" project_source_dirs << "," project_source_dirs "]}," RSpec Core Configuration define_predicate":{"type":"method","name":"define_predicate","children":[],"call":[]}," RSpec Core Configuration define_alias":{"type":"method","name":"define_alias","children":[],"call":[]}," RSpec Core Bisect Channel close":{"type":"method","name":"close","children":[],"call":["@write_io close ","@read_io close "]}," RSpec Core Bisect Channel receive":{"type":"method","name":"receive","children":[],"call":["Marshal  load ","@read_io read "," Integer ","@read_io gets "]}," RSpec Core Bisect Channel send":{"type":"method","name":"send","children":[],"call":["@write_io write ","packet bytesize ","Marshal  dump ","Marshal  dump  bytesize "]}," RSpec Core Bisect Channel initialize":{"type":"method","name":"initialize","children":[],"call":["IO  pipe ","@write_io set_encoding ","IO  method_defined? "]}," RSpec Core Bisect Notifier publish":{"type":"method","name":"publish","children":[],"call":["@formatter __send__ ","Notifications CustomNotification  for ","@formatter respond_to? "]}," RSpec Core Bisect Notifier initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Bisect BisectFailedError for_failed_spec_run":{"type":"method","name":"for_failed_spec_run","children":[],"call":[]}," RSpec Core Bisect ShellRunner run_command":{"type":"method","name":"run_command","children":[],"call":["ENV  []= ","stderr read ","stdout read ","Open3  popen3 ","@shell_command spec_opts_without_bisect ","ENV  [] ","Open3  capture2e first ","Open3  capture2e ","@shell_command bisect_environment_hash ","stdstderr read  read ","stdstdout read  read ","@shell_command spec_opts_withstdout read _bisect "]}," RSpec Core Bisect ShellRunner run_locations":{"type":"method","name":"run_locations","children":[],"call":[" run_command ","@shell_command command_for ","@server capture_run_results "]}," RSpec Core Bisect ShellRunner original_results":{"type":"method","name":"original_results","children":[],"call":[" run_locations ","@shell_command original_locations "]}," RSpec Core Bisect ShellRunner run":{"type":"method","name":"run","children":[],"call":[" run_locations "," original_results failed_example_ids "," original_results "]}," RSpec Core Bisect ShellRunner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Bisect ShellRunner name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Core Bisect ShellRunner start":{"type":"method","name":"start","children":[],"call":[]}," RSpec Core Bisect ShellCommand load_path":{"type":"method","name":"load_path","children":[],"call":["(send\n  (gvar :$LOAD_PATH) :map) join "," open3_safe_escape ","$LOAD_PATH map "]}," RSpec Core Bisect ShellCommand parsed_original_cli_options":{"type":"method","name":"parsed_original_cli_options","children":[],"call":["Parser  parse "]}," RSpec Core Bisect ShellCommand original_cli_args_without_locations":{"type":"method","name":"original_cli_args_without_locations","children":[],"call":["@original_cli_args - "," parsed_original_cli_options fetch "," parsed_original_cli_options "]}," RSpec Core Bisect ShellCommand reusable_cli_options":{"type":"method","name":"reusable_cli_options","children":[],"call":["(send\n  (send nil :parsed_original_cli_options) :fetch\n  (sym :formatters)) each "," parsed_original_cli_options fetch "," parsed_original_cli_options "," parsed_original_cli_options [] "," original_cli_args_without_locations "]}," RSpec Core Bisect ShellCommand environment_repro_parts":{"type":"method","name":"environment_repro_parts","children":[],"call":[" bisect_environment_hash map "," bisect_environment_hash "]}," RSpec Core Bisect ShellCommand spec_opts_without_bisect":{"type":"method","name":"spec_opts_without_bisect","children":[],"call":["Shellwords  join ","arg =~ ","Shellwords  split reject ","Shellwords  split ","ENV  fetch "]}," RSpec Core Bisect ShellCommand bisect_environment_hash":{"type":"method","name":"bisect_environment_hash","children":[],"call":[" spec_opts_without_bisect ","ENV  key? "]}," RSpec Core Bisect ShellCommand original_locations":{"type":"method","name":"original_locations","children":[],"call":[" parsed_original_cli_options fetch "," parsed_original_cli_options "]}," RSpec Core Bisect ShellCommand repro_command_from":{"type":"method","name":"repro_command_from","children":[],"call":["parts join ","parts concat "," original_cli_args_without_locations ","Formatters Helpers  organize_ids ","parts << "," environment_repro_parts "]}," RSpec Core Bisect ShellCommand command_for":{"type":"method","name":"command_for","children":[],"call":["parts join ","parts concat "," open3_safe_escape ","locations map "," reusable_cli_options ","parts << << ","server drb_port ","parts << ","RSpec Core  path_to_executable "," load_path "]}," RSpec Core Bisect ShellCommand initialize":{"type":"method","name":"initialize","children":[],"call":["arg start_with? ","original_cli_args reject "]}," RSpec Core Bisect Server drb_port":{"type":"method","name":"drb_port","children":[],"call":[" Integer ","@drb uri [] ","@drb uri "]}," RSpec Core Bisect Server stop":{"type":"method","name":"stop","children":[],"call":["@drb stop_service "]}," RSpec Core Bisect Server start":{"type":"method","name":"start","children":[],"call":["DRb  start_service ","DRb  install_acl ","ACL  new "]}," RSpec Core Bisect Server capture_run_results":{"type":"method","name":"capture_run_results","children":[],"call":[" latest_run_results "," raise ","BisectFailedError  for_failed_spec_run "," latest_run_results all_example_ids empty? "," latest_run_results all_example_ids "," latest_run_results nil? "," latest_run_results= "," files_or_directories_to_run= "," expected_failures= "," raise_bisect_failed "]}," RSpec Core Bisect Server run":{"type":"method","name":"run","children":[],"call":[]}," RSpec Core Bisect ForkRunner RunDispatcher run_specs":{"type":"method","name":"run_specs","children":[],"call":["@channel send ","@spec_output string ","latest_run_results all_example_ids empty? ","latest_run_results all_example_ids ","latest_run_results nil? ","formatter results ","@runner run_specs ","@runner world ordered_example_groups ","@runner world ","@runner world announce_filters ","c load_spec_files ","c formatter= ","c files_or_directories_to_run= ","run_descriptor all_example_ids ","@runner configuration tap ","@runner configuration ","CaptureFormatter  new ","run_descriptor failed_example_ids ","formatter results  all_example_ids empty? ","formatter results  all_example_ids ","formatter results  nil? ","CaptureFormatter  new  results ","c CaptureFormatter  new = "]}," RSpec Core Bisect ForkRunner RunDispatcher dispatch_specs":{"type":"method","name":"dispatch_specs","children":[],"call":["Process  detach "," run_specs "," fork ","Process  waitpid "]}," RSpec Core Bisect ForkRunner RunDispatcher initialize":{"type":"method","name":"initialize","children":[],"call":["c error_stream= ","c output_stream= ","c reset_reporter ","runner configuration tap ","runner configuration ","StringIO  new "]}," RSpec Core Bisect ForkRunner dispatch_run":{"type":"method","name":"dispatch_run","children":[],"call":[" raise ","BisectFailedError  for_failed_spec_run ","result is_a? ","@channel receive tap ","@channel receive ","@run_dispatcher dispatch_specs "]}," RSpec Core Bisect ForkRunner shutdown":{"type":"method","name":"shutdown","children":[],"call":["@channel close "]}," RSpec Core Bisect ForkRunner original_results":{"type":"method","name":"original_results","children":[],"call":[" dispatch_run ","ExampleSetDescriptor  new ","@shell_command original_locations "]}," RSpec Core Bisect ForkRunner run":{"type":"method","name":"run","children":[],"call":[" dispatch_run ","ExampleSetDescriptor  new "," original_results failed_example_ids "," original_results "]}," RSpec Core Bisect ForkRunner initialize":{"type":"method","name":"initialize","children":[],"call":["RunDispatcher  new ","Channel  new "]}," RSpec Core Bisect ForkRunner name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Core Bisect ForkRunner start":{"type":"method","name":"start","children":[],"call":[]}," RSpec Core Bisect ExampleMinimizer notify":{"type":"method","name":"notify","children":[],"call":["@notifier publish "," reporter publish "," reporter "]}," RSpec Core Bisect ExampleMinimizer abort_if_ordering_inconsistent":{"type":"method","name":"abort_if_ordering_inconsistent","children":[],"call":[" raise ","expected_order == ","results all_example_ids "," all_example_ids & "," all_example_ids "," all_example_ids &  == "]}," RSpec Core Bisect ExampleMinimizer track_duration":{"type":"method","name":"track_duration","children":[],"call":[" RSpec Core Time  now - "," RSpec Core Time  now "]}," RSpec Core Bisect ExampleMinimizer get_expected_failures_for?":{"type":"method","name":"get_expected_failures_for?","children":[],"call":["(send\n  (send nil :failed_example_ids) :&\n  (send\n    (lvar :results) :failed_example_ids)) == "," failed_example_ids "," failed_example_ids & ","results failed_example_ids "," abort_if_ordering_inconsistent "," notify "," runner run "," runner "," track_duration "," shell_command repro_command_from "," shell_command ","ids + "," runner repro_command_from "]}," RSpec Core Bisect ExampleMinimizer non_failing_example_ids":{"type":"method","name":"non_failing_example_ids","children":[],"call":[" all_example_ids - "," failed_example_ids "," all_example_ids "]}," RSpec Core Bisect ExampleMinimizer prep":{"type":"method","name":"prep","children":[],"call":[" notify "," non_failing_example_ids "," failed_example_ids "," raise ","@failed_example_ids empty? ","original_results failed_example_ids ","original_results all_example_ids "," runner original_results "," runner "," track_duration "," runner class name "," runner class "," shell_command original_cli_args "," shell_command "," runner original_cli_args ","original_results failed_example_ids  empty? "," runner original_results  failed_example_ids "," runner original_results  all_example_ids "," runner  runner original_results  "]}," RSpec Core Bisect ExampleMinimizer example_range":{"type":"method","name":"example_range","children":[],"call":["ExampleRange  new "," non_failing_example_ids find_index + "," non_failing_example_ids find_index ","ids last "," non_failing_example_ids ","ids first "]}," RSpec Core Bisect ExampleMinimizer description":{"type":"method","name":"description","children":[],"call":[" finish "," start "," start == "]}," RSpec Core Bisect ExampleMinimizer repro_command_for_currently_needed_ids":{"type":"method","name":"repro_command_for_currently_needed_ids","children":[],"call":[" shell_command repro_command_from "," currently_needed_ids "," shell_command "," remaining_ids "," runner repro_command_from "," runner "]}," RSpec Core Bisect ExampleMinimizer currently_needed_ids":{"type":"method","name":"currently_needed_ids","children":[],"call":[" remaining_ids + "," failed_example_ids "," remaining_ids "]}," RSpec Core Bisect ExampleMinimizer bisect_over":{"type":"method","name":"bisect_over","children":[],"call":[" bisect_over "," notify ","candidate_ids - "," remaining_ids "," example_range "," get_expected_failures_for? "," remaining_ids - ","(lvar :lhs) find "," track_duration ","candidate_ids each_slice to_a ","candidate_ids each_slice ","(send\n  (send\n    (lvar :candidate_ids) :length) :/\n  (float 2.0)) ceil ","candidate_ids length / ","candidate_ids length ","candidate_ids size ","candidate_ids one? "]}," RSpec Core Bisect ExampleMinimizer bisect":{"type":"method","name":"bisect","children":[],"call":[" bisect_over "," notify "," remaining_ids= "," get_expected_failures_for? "]}," RSpec Core Bisect ExampleMinimizer find_minimal_repro":{"type":"method","name":"find_minimal_repro","children":[],"call":[" remaining_ids + "," failed_example_ids "," remaining_ids "," notify "," remaining_ids size "," non_failing_example_ids size "," non_failing_example_ids "," bisect "," track_duration "," prep "," currently_needed_ids "," get_expected_failures_for? "," remaining_ids - ","subsets find "," each_bisect_round "," remaining_ids= "]}," RSpec Core Bisect ExampleMinimizer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Bisect Coordinator gracefully_abort_on_sigint":{"type":"method","name":"gracefully_abort_on_sigint","children":[],"call":[" exit ","@notifier publish ","minimizer repro_command_for_currently_needed_ids "," trap "," reporter publish "," reporter ","minimizer minimizer repro_command_for_currently_needed_ids _command_for_currently_needed_ids "]}," RSpec Core Bisect Coordinator start_bisect_runner":{"type":"method","name":"start_bisect_runner","children":[],"call":["klass start ","@spec_runner configuration bisect_runner_class ","@spec_runner configuration ","@spec_runner configuration bisect_runner_class  start "]}," RSpec Core Bisect Coordinator bisect":{"type":"method","name":"bisect","children":[],"call":["@notifier publish ","e message ","minimizer repro_command_for_currently_needed_ids ","minimizer find_minimal_repro "," gracefully_abort_on_sigint ","ExampleMinimizer  new "," start_bisect_runner "," reporter publish "," reporter ","Runner  new ","Server  run "," reporter close_after ","@configuration add_formatter ","ExampleMinimizer  new  repro_command_for_currently_needed_ids ","ExampleMinimizer  new  find_minimal_repro "," start_bisect_Runner  new  "]}," RSpec Core Bisect Coordinator initialize":{"type":"method","name":"initialize","children":[],"call":["Bisect Notifier  new ","ShellCommand  new "]}," RSpec Core Bisect Coordinator bisect_with":{"type":"method","name":"bisect_with","children":[],"call":[]}," Formatters Loader has_matching_output?":{"type":"method","name":"has_matching_output?","children":[],"call":["formatter output == ","new_formatter output ","formatter output ","new_formatter respond_to? ","formatter respond_to? "]}," RSpec current_scope":{"type":"method","name":"current_scope","children":[],"call":[]}," RSpec current_scope=":{"type":"method","name":"current_scope=","children":[],"call":[]}," RSpec Core Ordering RecentlyModified order":{"type":"method","name":"order","children":[],"call":["File  mtime to_i -@ ","File  mtime to_i ","File  mtime ","item metadata [] ","item metadata ","list sort_by "]}," RSpec Core MemoizedHelpers matcher_supports_value_expectations?":{"type":"method","name":"matcher_supports_value_expectations?","children":[],"call":["matcher supports_value_expectations? "]}," RSpec Core MemoizedHelpers enforce_value_expectation":{"type":"method","name":"enforce_value_expectation","children":[],"call":["RSpec  deprecate ","RSpec Support ObjectFormatter  format "," matcher_supports_value_expectations? "]}," Core Reporter reset":{"type":"method","name":"reset","children":[],"call":["Profiler  new "]}," Core Notifications PendingExampleFailedAsExpectedNotification message_color":{"type":"method","name":"message_color","children":[],"call":["RSpec  configuration pending_color ","RSpec  configuration "]}," Core Notifications PendingExampleFailedAsExpectedNotification fully_formatted":{"type":"method","name":"fully_formatted","children":[],"call":[" fully_formatted_header << "," formatted_message_and_backtrace "," fully_formatted_header "]}," Core Notifications PendingExampleFailedAsExpectedNotification exception":{"type":"method","name":"exception","children":[],"call":[" example execution_result pending_exception "," example execution_result "," example "]}," Core Notifications PendingExampleNotificationMethods fully_formatted_header":{"type":"method","name":"fully_formatted_header","children":[],"call":["colorizer wrap << ","colorizer wrap "," example execution_result pending_message "," example execution_result "," example "," example full_description "]}," Core Notifications FailedExampleNotification message_color":{"type":"method","name":"message_color","children":[],"call":["RSpec  configuration failure_color ","RSpec  configuration "]}," Core Notifications FailedExampleNotification formatted_message_and_backtrace":{"type":"method","name":"formatted_message_and_backtrace","children":[],"call":["formatted << ","RSpec Support EncodedString  new "," encoding_of "," colorized_formatted_backtrace each "," colorized_formatted_backtrace "," colorized_message_lines each "," colorized_message_lines "]}," Core Notifications FailedExampleNotification add_shared_group_lines":{"type":"method","name":"add_shared_group_lines","children":[],"call":["lines << ","colorizer wrap ","RSpec  configuration default_color ","RSpec  configuration ","frame description "," example metadata [] each "," example metadata [] "," example metadata "," example "]}," RSpec Core MetadataFilter example_group_declaration_lines":{"type":"method","name":"example_group_declaration_lines","children":[],"call":["(send\n  (const nil :FlatMap) :flat_map\n  (send\n    (const nil :Metadata) :ascend\n    (lvar :metadata))) uniq ","locations [] ","meta [] ","FlatMap  flat_map ","Metadata  ascend "]}," RSpec Core FilterManager priority_include?":{"type":"method","name":"priority_include?","children":[],"call":["MetadataFilter  filter_applies? ","example metadata ","locations [] empty? ","locations [] ","example metadata [] "]}," RSpec Core Configuration run_hooks_with":{"type":"method","name":"run_hooks_with","children":[],"call":["h run ","hooks each "]}," RSpec Core InclusionRules partition_locations":{"type":"method","name":"partition_locations","children":[],"call":[" class new ","r delete ","@rules dup tap ","@rules dup "," class ","Hash  new ","@rules fetch "]}," Core Reporter setup_profiler":{"type":"method","name":"setup_profiler","children":[],"call":[" register_listener ","Profiler  new "]}," RSpec Core ReentrantMutex exit":{"type":"method","name":"exit","children":[],"call":["@mutex unlock ","@count == "]}," RSpec Core ReentrantMutex enter":{"type":"method","name":"enter","children":[],"call":["Thread  current ","@mutex lock ","@owner != ","Thread  current  != "]}," RSpec Core ReentrantMutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" exit "," enter "]}," RSpec Core ReentrantMutex initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Core Parser print_help_and_exit":{"type":"method","name":"print_help_and_exit","children":[],"call":[" exit "," puts ","parser to_s gsub ","invalid_options join ","parser to_s "]}," Core Parser print_version_and_exit":{"type":"method","name":"print_version_and_exit","children":[],"call":[" exit "," puts "]}," Core Parser bisect_formatter_for":{"type":"method","name":"bisect_formatter_for","children":[],"call":["argument == "]}," Core Parser bisect_and_exit":{"type":"method","name":"bisect_and_exit","children":[],"call":[" exit ","Bisect Coordinator  bisect_with "," bisect_formatter_for ","RSpec  configuration "," original_args ","RSpec Support  require_rspec_core "]}," Core Parser initialize_project_and_exit":{"type":"method","name":"initialize_project_and_exit","children":[],"call":[" exit ","ProjectInitializer  new run ","ProjectInitializer  new ","RSpec Support  require_rspec_core "]}," RSpec Core Mutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" unlock "," lock "]}," RSpec Core Mutex unlock":{"type":"method","name":"unlock","children":[],"call":["t run ","Thread  critical= ","t wakeup ","@waiting shift ","@waiting shift  run ","Thread  cri@waiting shift ical= ","@waiting shift  wakeup ","@wai@waiting shift ing shif@waiting shift  "]}," RSpec Core Mutex lock":{"type":"method","name":"lock","children":[],"call":["Thread  critical= ","Thread  stop ","@waiting push ","Thread  current "]}," RSpec Core Mutex initialize":{"type":"method","name":"initialize","children":[],"call":[" taint ","@waiting taint "]}," RSpec Core Formatters ExceptionPresenter read_failed_line":{"type":"method","name":"read_failed_line","children":[],"call":["File  readlines [] ","line_number to_i - ","line_number to_i ","File  readlines ","File  exist? ","matching_line match [] ","matching_line match "," find_failed_line "," find_failed_line  match [] "," find_failed_line  match "]}," RSpec Core Formatters ExceptionPresenter description_and_detail":{"type":"method","name":"description_and_detail","children":[],"call":[" description "," detail_formatter call "," example "," detail_formatter ","  detail_formatter call _formatter call ","  detail_formatter call _formatter "]}," RSpec Core Formatters ExceptionPresenter failure_slash_error_line":{"type":"method","name":"failure_slash_error_line","children":[],"call":[" read_failed_line strip "," read_failed_line "]}," RSpec Core Formatters BisectDebugFormatter bisect_ignoring_ids":{"type":"method","name":"bisect_ignoring_ids","children":[],"call":[" output print "," describe_ids ","notification remaining_ids "," output ","notification ids_to_ignore "]}," RSpec Core Formatters BisectDebugFormatter bisect_round_finished":{"type":"method","name":"bisect_round_finished","children":[],"call":[" output print "," output "]}," RSpec Core Formatters BisectProgressFormatter bisect_round_finished":{"type":"method","name":"bisect_round_finished","children":[],"call":[" output print ","Helpers  format_duration ","notification duration "," output "]}," RSpec Core Formatters BisectFormatter example_finished":{"type":"method","name":"example_finished","children":[],"call":["RSpec  world wants_to_quit= ","RSpec  world ","@remaining_failures empty? ! ","@remaining_failures empty? ","status == ","@remaining_failures delete ","notification example id ","notification example ","@remaining_failures include? "]}," RSpec Core Formatters BisectFormatter start_dump":{"type":"method","name":"start_dump","children":[],"call":["@bisect_server latest_run_results= ","RunResults  new "]}," RSpec Core Formatters BisectFormatter example_pending":{"type":"method","name":"example_pending","children":[],"call":[" example_finished "]}," RSpec Core Formatters BisectFormatter example_passed":{"type":"method","name":"example_passed","children":[],"call":[" example_finished "]}," RSpec Core Formatters BisectFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" example_finished ","@failed_example_ids << ","notification example id ","notification example "]}," RSpec Core Formatters BisectFormatter example_started":{"type":"method","name":"example_started","children":[],"call":["@all_example_ids << ","notification example id ","notification example "]}," RSpec Core Formatters BisectFormatter start":{"type":"method","name":"start","children":[],"call":["Set  new ","@bisect_server expected_failures "]}," RSpec Core Formatters BisectFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["DRbObject  new_with_uri ","RSpec  configuration drb_port ","RSpec  configuration ","RSpec  configuration files_or_directories_to_run= ","@bisect_server files_or_directories_to_run ","RSpec  configuration drb_RSpec  configuration drb_port  ","DRbObject  new_with_uri  files_or_directories_to_run "]}," RSpec Core ExampleStatusPersister statuses_from_previous_runs":{"type":"method","name":"statuses_from_previous_runs","children":[],"call":[" class load_from "," class "]}," RSpec Core ExampleStatusPersister merged_statuses":{"type":"method","name":"merged_statuses","children":[],"call":["ExampleStatusMerger  merge "," statuses_from_previous_runs "," statuses_from_this_run "]}," RSpec Core ExampleStatusPersister dumped_statuses":{"type":"method","name":"dumped_statuses","children":[],"call":["ExampleStatusDumper  dump "," merged_statuses "]}," RSpec Core ExampleStatusPersister write":{"type":"method","name":"write","children":[],"call":["f write ","File  open ","RSpec Support DirectoryMaker  mkdir_p ","File  dirname "]}," RSpec Core Configuration configure_existing_groups":{"type":"method","name":"configure_existing_groups","children":[],"call":[" __send__ ","MetadataFilter  apply? ","group metadata ","meta empty? ","RSpec  world all_example_groups each ","RSpec  world all_example_groups ","RSpec  world "]}," RSpec Core Bisect SubsetEnumerator each":{"type":"method","name":"each","children":[],"call":["yielded << ","yielded include? ","combos flatten ","@ids each_slice to_a combination ","@ids each_slice to_a ","@ids each_slice ","slice_size > "," subset_size ","Set  new ","Set  new  << ","Set  new  include? "," subset_size  > "," combos flatten _size "]}," RSpec Core Bisect SubsetEnumerator subset_size":{"type":"method","name":"subset_size","children":[],"call":["(send\n  (send\n    (ivar :@ids) :size) :/\n  (float 2.0)) ceil ","@ids size / ","@ids size "]}," RSpec Core Bisect SubsetEnumerator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Bisect Server raise_bisect_failed":{"type":"method","name":"raise_bisect_failed","children":[],"call":[" raise "]}," RSpec Core Bisect Runner load_path":{"type":"method","name":"load_path","children":[],"call":["(send\n  (gvar :$LOAD_PATH) :map) join "," open3_safe_escape ","$LOAD_PATH map "]}," RSpec Core Bisect Runner original_locations":{"type":"method","name":"original_locations","children":[],"call":[" parsed_original_cli_options fetch "," parsed_original_cli_options "]}," RSpec Core Bisect Runner parsed_original_cli_options":{"type":"method","name":"parsed_original_cli_options","children":[],"call":["Parser  parse "]}," RSpec Core Bisect Runner original_cli_args_without_locations":{"type":"method","name":"original_cli_args_without_locations","children":[],"call":["@original_cli_args - "," parsed_original_cli_options fetch "," parsed_original_cli_options "]}," RSpec Core Bisect Runner reusable_cli_options":{"type":"method","name":"reusable_cli_options","children":[],"call":["(send\n  (send nil :parsed_original_cli_options) :fetch\n  (sym :formatters)) each "," parsed_original_cli_options fetch "," parsed_original_cli_options "," parsed_original_cli_options [] "," original_cli_args_without_locations "]}," RSpec Core Bisect Runner run_command":{"type":"method","name":"run_command","children":[],"call":["stderr read ","stdout read ","Open3  popen3 ","Open3  capture2e first ","Open3  capture2e ","ENV  []= "," spec_opts_without_bisect ","ENV  [] "," bisect_environment_hash ","stdstderr read  read ","stdstdout read  read "," spec_opts_withstdout read _bisect "]}," RSpec Core Bisect Runner run_locations":{"type":"method","name":"run_locations","children":[],"call":[" run_command "," command_for ","@server capture_run_results "]}," RSpec Core Bisect Runner original_results":{"type":"method","name":"original_results","children":[],"call":[" run_locations "," original_locations "]}," RSpec Core Bisect Runner repro_command_from":{"type":"method","name":"repro_command_from","children":[],"call":["parts join ","parts concat "," original_cli_args_without_locations ","Formatters Helpers  organize_ids ","parts << "," environment_repro_parts "]}," RSpec Core Bisect Runner command_for":{"type":"method","name":"command_for","children":[],"call":["parts join ","parts concat "," open3_safe_escape ","locations map "," reusable_cli_options ","parts << << ","@server drb_port ","parts << ","RSpec Core  path_to_executable "," load_path "]}," RSpec Core Bisect Runner run":{"type":"method","name":"run","children":[],"call":[" run_locations "," original_results failed_example_ids "," original_results "]}," RSpec Core Bisect Runner initialize":{"type":"method","name":"initialize","children":[],"call":["arg start_with? ","original_cli_args reject "]}," RSpec Core Bisect ExampleMinimizer bisect_round":{"type":"method","name":"bisect_round","children":[],"call":[" notify "," remaining_ids size "," remaining_ids ","subsets subset_size ","SubsetEnumerator  new "," track_duration ","SubsetEnumerator  new  subset_size "]}," RSpec Core Bisect ExampleMinimizer each_bisect_round":{"type":"method","name":"each_bisect_round","children":[],"call":[" notify "," remaining_ids size "," remaining_ids "," non_failing_example_ids size "," non_failing_example_ids ","done == "," bisect_round ","1 upto "," track_duration "]}," RSpec Core Bisect Coordinator reporter":{"type":"method","name":"reporter","children":[],"call":["@configuration reporter "]}," RSpec Core World source_cache":{"type":"method","name":"source_cache","children":[],"call":["Source Cache  new ","RSpec Support  require_rspec_core "]}," RSpec Core Source Cache source_from_file":{"type":"method","name":"source_from_file","children":[],"call":["Source  from_file ","@sources_by_path [] "]}," RSpec Core Source Cache initialize":{"type":"method","name":"initialize","children":[],"call":["SyntaxHighlighter  new "]}," RSpec Core Source inspect":{"type":"method","name":"inspect","children":[],"call":[" path "," class "]}," RSpec Core Source tokens_by_line_number":{"type":"method","name":"tokens_by_line_number","children":[],"call":["(send\n  (const nil :Hash) :new) merge ","hash []= ","Hash  new ","token location line ","token location "," tokens group_by "," tokens "]}," RSpec Core Source nodes_by_line_number":{"type":"method","name":"nodes_by_line_number","children":[],"call":["(send\n  (const nil :Hash) :new) merge ","hash []= ","Hash  new ","node location line ","node location "," ast select group_by "," ast select "," ast "]}," RSpec Core Source tokens":{"type":"method","name":"tokens","children":[],"call":["Token  tokens_from_ripper_tokens ","Ripper  lex "," source "," require ","Token  Ripper  lex _from_ripper_Ripper  lex  "]}," RSpec Core Source ast":{"type":"method","name":"ast","children":[],"call":["Node  new "," raise ","Ripper  sexp "," source "," require ","Ripper  Ripper  sexp  "]}," RSpec Core Source lines":{"type":"method","name":"lines","children":[],"call":[" source split "," source "]}," RSpec Core Source initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","RSpec Support EncodedString  new ","Encoding  default_external "]}," RSpec Core Source from_file":{"type":"method","name":"from_file","children":[],"call":[]}," RSpec Core Source Token inspect":{"type":"method","name":"inspect","children":[],"call":[" string inspect "," string "," type "," class "]}," RSpec Core Source Token ==":{"type":"method","name":"==","children":[],"call":[" token == ","other token "," token "]}," RSpec Core Source Token string":{"type":"method","name":"string","children":[],"call":[" token [] "," token "]}," RSpec Core Source Token type":{"type":"method","name":"type","children":[],"call":[" token [] "," token "]}," RSpec Core Source Token location":{"type":"method","name":"location","children":[],"call":["Location  new "," token [] "," token "]}," RSpec Core Source Token initialize":{"type":"method","name":"initialize","children":[],"call":["ripper_token freeze "]}," RSpec Core Source Token tokens_from_ripper_tokens":{"type":"method","name":"tokens_from_ripper_tokens","children":[],"call":[]}," RSpec Core Source SyntaxHighlighter NoSyntaxHighlightingImplementation highlight_syntax":{"type":"method","name":"highlight_syntax","children":[],"call":[]}," RSpec Core Source SyntaxHighlighter CodeRayImplementation highlight_syntax":{"type":"method","name":"highlight_syntax","children":[],"call":[]}," RSpec Core Source SyntaxHighlighter color_enabled_implementation":{"type":"method","name":"color_enabled_implementation","children":[],"call":[" Kernel  require "," require "," class attempt_to_add_rspec_terms_to_coderay_keywords "," class "]}," RSpec Core Source SyntaxHighlighter implementation":{"type":"method","name":"implementation","children":[],"call":[" color_enabled_implementation ","@configuration color_enabled? "]}," RSpec Core Source SyntaxHighlighter highlight":{"type":"method","name":"highlight","children":[],"call":[" implementation highlight_syntax "," implementation "]}," RSpec Core Source SyntaxHighlighter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Core Source GroupNode raw_args":{"type":"method","name":"raw_args","children":[],"call":[" sexp "]}," RSpec Core Source GroupNode type":{"type":"method","name":"type","children":[],"call":[]}," RSpec Core Source Node raw_args":{"type":"method","name":"raw_args","children":[],"call":[" sexp [] "," sexp "]}," RSpec Core Source Node inspect":{"type":"method","name":"inspect","children":[],"call":[" type "," class "]}," RSpec Core Source Node each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":["current_node parent "," to_enum "," __method__ "," block_given? ","current_node parent  parent "]}," RSpec Core Source Node each":{"type":"method","name":"each","children":[],"call":["child each "," children each "," children "," to_enum "," __method__ "," block_given? "]}," RSpec Core Source Node location":{"type":"method","name":"location","children":[],"call":["arg is_a? "," args find "," args "]}," RSpec Core Source Node children":{"type":"method","name":"children","children":[],"call":["(send\n  (send nil :args) :select) freeze ","arg is_a? "," args select "," args "]}," RSpec Core Source Node args":{"type":"method","name":"args","children":[],"call":["(send\n  (send nil :raw_args) :map) freeze ","GroupNode  new ","raw_arg is_a? ","Location  new ","Location  location? ","Node  new ","Node  sexp? "," raw_args map "," raw_args "]}," RSpec Core Source Node type":{"type":"method","name":"type","children":[],"call":[" sexp [] "," sexp "]}," RSpec Core Source Node initialize":{"type":"method","name":"initialize","children":[],"call":["ripper_sexp freeze "]}," RSpec Core Source Node sexp?":{"type":"method","name":"sexp?","children":[],"call":[]}," RSpec Core Source location?":{"type":"method","name":"location?","children":[],"call":[]}," RSpec Core Formatters SnippetExtractor unclosed_paren_tokens_in_line_range":{"type":"method","name":"unclosed_paren_tokens_in_line_range","children":[],"call":["unclosed_tokens delete_at ","PAREN_TOKEN_TYPE_PAIRS  [] == ","token type ","PAREN_TOKEN_TYPE_PAIRS  [] ","unclosed_token type ","unclosed_tokens rindex ","unclosed_tokens << ","PAREN_TOKEN_TYPE_PAIRS  keys include? ","PAREN_TOKEN_TYPE_PAIRS  keys ","tokens each_with_object "," source tokens_by_line_number [] "," source tokens_by_line_number "," source ","FlatMap  flat_map "]}," RSpec Core Source Token closed_by_keyword?":{"type":"method","name":"closed_by_keyword?","children":[],"call":["other string == ","CLOSING_KEYWORDS_BY_OPENING_KEYWORD  [] "," string ","other string ","other keyword? "]}," RSpec Core Source Token closed_by_delimiter?":{"type":"method","name":"closed_by_delimiter?","children":[],"call":["other type == ","CLOSING_TYPES_BY_OPENING_TYPE  [] "," type ","other type "]}," RSpec Core Source Token opening_keyword?":{"type":"method","name":"opening_keyword?","children":[],"call":["CLOSING_KEYWORDS_BY_OPENING_KEYWORD  key? "," string "," keyword? "]}," RSpec Core Source Token opening_delimiter?":{"type":"method","name":"opening_delimiter?","children":[],"call":["CLOSING_TYPES_BY_OPENING_TYPE  key? "," type "]}," RSpec Core Source Token closed_by?":{"type":"method","name":"closed_by?","children":[],"call":[" closed_by_keyword? "," closed_by_delimiter? "]}," RSpec Core Source Token opening?":{"type":"method","name":"opening?","children":[],"call":[" opening_keyword? "," opening_delimiter? "]}," RSpec Core Source Token keyword?":{"type":"method","name":"keyword?","children":[],"call":[" type == "," type "]}," RSpec Core Invocations Bisect bisect_formatter_for":{"type":"method","name":"bisect_formatter_for","children":[],"call":["argument == "]}," RSpec Core Bisect Runner spec_opts_without_bisect":{"type":"method","name":"spec_opts_without_bisect","children":[],"call":["Shellwords  join ","arg =~ ","Shellwords  split reject ","Shellwords  split ","ENV  fetch "]}," RSpec Core Bisect Runner environment_repro_parts":{"type":"method","name":"environment_repro_parts","children":[],"call":[" bisect_environment_hash map "," bisect_environment_hash "]}," RSpec Core Bisect Runner bisect_environment_hash":{"type":"method","name":"bisect_environment_hash","children":[],"call":[" spec_opts_without_bisect ","ENV  key? "]}," RSpec Core Configuration load_spec_file_handling_errors":{"type":"method","name":"load_spec_file_handling_errors","children":[],"call":["RSpec  world wants_to_quit= ","RSpec  world "," reporter notify_non_example_exception "," reporter ","Metadata  relative_path "," load "]}," RSpec Core Source SyntaxHighlighter attempt_to_add_rspec_terms_to_coderay_keywords":{"type":"method","name":"attempt_to_add_rspec_terms_to_coderay_keywords","children":[],"call":[]}}