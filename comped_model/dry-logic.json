{" Dry Logic RuleCompiler visit_group":{"type":"method","name":"visit_group","children":[],"call":["Rule Group  new "," visit "]}," Dry Logic RuleCompiler visit_implication":{"type":"method","name":"visit_implication","children":[],"call":[" visit > "," visit "," visit then "]}," Dry Logic RuleCompiler visit_xor":{"type":"method","name":"visit_xor","children":[],"call":[" visit ^ "," visit "," visit xor "]}," Dry Logic RuleCompiler visit_or":{"type":"method","name":"visit_or","children":[],"call":[" visit | "," visit "," visit or "]}," Dry Logic RuleCompiler visit_and":{"type":"method","name":"visit_and","children":[],"call":[" visit & "," visit "," visit and "]}," Dry Logic RuleCompiler visit_predicate":{"type":"method","name":"visit_predicate","children":[],"call":[" predicates [] curry "," predicates [] "," predicates "," visit ","args [] == ","args [] ","predicate curry ","val == ","params map reject ","params map ","params size > ","params size ","Rule Predicate  new ","Rule Predicate  build ","  predicates [] s [] curry "," Rule Predicate  new s [] curry "," Rule Predicate  build s [] curry ","  predicates [] s [] "," Rule Predicate  new s [] "," Rule Predicate  build s [] ","  predicates [] s "," Rule Predicate  new s "," Rule Predicate  build s "," predicates []  curry ","Rule Predicate  new  curry ","Rule Predicate  build  curry "]}," Dry Logic RuleCompiler visit_each":{"type":"method","name":"visit_each","children":[],"call":["Rule Each  new "," visit ","Operations Each  new "]}," Dry Logic RuleCompiler visit_set":{"type":"method","name":"visit_set","children":[],"call":["Rule Set  new "," call ","Operations Set  new "]}," Dry Logic RuleCompiler visit_val":{"type":"method","name":"visit_val","children":[],"call":["Rule Value  new "," visit "]}," Dry Logic RuleCompiler visit_key":{"type":"method","name":"visit_key","children":[],"call":["Rule Key  new "," visit ","Operations Key  new "]}," Dry Logic RuleCompiler visit_not":{"type":"method","name":"visit_not","children":[],"call":[" visit negation "," visit ","Operations Negation  new "]}," Dry Logic RuleCompiler visit_check":{"type":"method","name":"visit_check","children":[],"call":["Rule Check  new "," visit ","klass new ","check_keys size == ","check_keys size ","Operations Check  new "]}," Dry Logic RuleCompiler visit":{"type":"method","name":"visit","children":[],"call":[" send "]}," Dry Logic RuleCompiler call":{"type":"method","name":"call","children":[],"call":[" visit ","ast map ","ast to_ary map ","ast to_ary "]}," Dry Logic RuleCompiler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Rule curry":{"type":"method","name":"curry","children":[],"call":[" class new "," predicate curry "," predicate "," name "," class "," options "," new "," arity > "," arity "," with "," raise ","all_args size ","all_args size > "," args + "," args "," args +  size "," args +  size > "]}," Dry Logic Rule new":{"type":"method","name":"new","children":[],"call":[" class new "," name "," class "," options "]}," Dry Logic Rule negation":{"type":"method","name":"negation","children":[],"call":["Negation  new "]}," Dry Logic Rule then":{"type":"method","name":"then","children":[],"call":["Implication  new "]}," Dry Logic Rule xor":{"type":"method","name":"xor","children":[],"call":["ExclusiveDisjunction  new "]}," Dry Logic Rule or":{"type":"method","name":"or","children":[],"call":["Disjunction  new "]}," Dry Logic Rule and":{"type":"method","name":"and","children":[],"call":["Conjunction  new "]}," Dry Logic Rule to_ary":{"type":"method","name":"to_ary","children":[],"call":[" predicate to_ary "," predicate "," name "," type "]}," Dry Logic Rule call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," predicate call "," predicate "," ast ","Result  new "," id "," [] "]}," Dry Logic Rule type":{"type":"method","name":"type","children":[],"call":[" raise "]}," Dry Logic Rule predicate_id":{"type":"method","name":"predicate_id","children":[],"call":[" predicate id "," predicate "]}," Dry Logic Rule initialize":{"type":"method","name":"initialize","children":[],"call":["predicate arity ","options [] "]}," Dry Logic Rule Negation to_ary":{"type":"method","name":"to_ary","children":[],"call":[" rule to_ary "," rule "]}," Dry Logic Rule Negation call":{"type":"method","name":"call","children":[],"call":[" rule call negated "," rule call "," rule "," predicate call negated "," predicate call "," predicate "]}," Dry Logic Rule Negation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Value type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Value call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," predicate call "," predicate "," apply "," curry ","result == "," evaluate "," nulary? "," apply  == "]}," Dry Logic Set to_ary":{"type":"method","name":"to_ary","children":[],"call":[" predicate map "," predicate "," name "," type "]}," Dry Logic Set at":{"type":"method","name":"at","children":[],"call":[" class new "," predicate values_at "," predicate "," name "," class "," new "," rules values_at "," rules "]}," Dry Logic Set type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Set call":{"type":"method","name":"call","children":[],"call":["Logic  Result ","rule call "," predicate map "," predicate "]}," Dry Logic Key call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," predicate call "," predicate ","input [] "," name "]}," Dry Logic Key type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Key new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Group type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Group call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," predicate call "," predicate "]}," Dry Logic Group initialize":{"type":"method","name":"initialize","children":[],"call":["identifier to_a first ","identifier to_a "]}," Dry Logic Each type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Each call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," predicate call "," predicate ","input map "]}," Dry Logic ExclusiveDisjunction type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic ExclusiveDisjunction call":{"type":"method","name":"call","children":[],"call":[" left call xor "," right "," left call "," left ","Logic  Result "," left call success? ^ "," right call success? "," right call "," left call success? "]}," Dry Logic Disjunction type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Disjunction call":{"type":"method","name":"call","children":[],"call":[" left call or "," right "," left call "," left "," right call ","result success? "," left call  success? "]}," Dry Logic Conjunction type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Conjunction call":{"type":"method","name":"call","children":[],"call":[" left call and "," right "," left call "," left "," right call ","result success? "," left call  success? "]}," Dry Logic Implication type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Implication call":{"type":"method","name":"call","children":[],"call":[" left call > "," right "," left call "," left "," left call then ","Logic  Result "," right call "," left call success? "]}," Dry Logic Composite to_ary":{"type":"method","name":"to_ary","children":[],"call":[" right to_ary "," right "," left to_ary "," left "," type "]}," Dry Logic Composite name":{"type":"method","name":"name","children":[],"call":[" right name "," right "," type "," left name "," left "]}," Dry Logic Composite initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Check type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Check call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," result call "," result "," predicate call "," predicate "," evaluate_input "," curry ","head size > ","head size "," predicate curry call "," predicate curry "," evaluator [] reverse "," evaluator [] "," evaluator "]}," Dry Logic Result failure?":{"type":"method","name":"failure?","children":[],"call":[" success? ! "," success? "]}," Dry Logic Result success?":{"type":"method","name":"success?","children":[],"call":[" success "]}," Dry Logic Result xor":{"type":"method","name":"xor","children":[],"call":["Logic  Result "," rule "," success? ^ ","other call success? ","other call "," input "," success? ","other_result input ","Result Wrapped  new ","other_result wrapped? ","other_result success? ","other call  input ","other call  wrapped? ","other call  success? "]}," Dry Logic Result or":{"type":"method","name":"or","children":[],"call":["other call "," input "," success? "]}," Dry Logic Result and":{"type":"method","name":"and","children":[],"call":["other call "," input "," success? "]}," Dry Logic Result >":{"type":"method","name":">","children":[],"call":["Logic  Result "," rule "," input ","other call "," success? "]}," Dry Logic Result negated":{"type":"method","name":"negated","children":[],"call":[" class new "," rule "," value ! "," value "," input "," class "," success ! "," success "]}," Dry Logic Result curry":{"type":"method","name":"curry","children":[],"call":["Result Verified  new "]}," Dry Logic Result call":{"type":"method","name":"call","children":[],"call":["Result Wrapped  new "," predicate call "," predicate ","result input ","result success? ","input [] "," name "," evaluate_input "," name to_a flatten "," name to_a "," name is_a? ","input []  input ","input []  success? "]}," Dry Logic Result initialize":{"type":"method","name":"initialize","children":[],"call":["rule name ","response success? ","response respond_to? "]}," Dry Logic Result Verified success?":{"type":"method","name":"success?","children":[],"call":[" rule predicate_id == "," predicate_id "," rule predicate_id "," rule "]}," Dry Logic Result Verified to_ary":{"type":"method","name":"to_ary","children":[],"call":[" rule to_ary "," rule "," input "," name "]}," Dry Logic Result Verified call":{"type":"method","name":"call","children":[],"call":["Logic  Result "," rule "," success? "," input "]}," Dry Logic Result Verified initialize":{"type":"method","name":"initialize","children":[],"call":["result name ","result rule ","result value ","result input "]}," Dry Logic Result Value to_ary":{"type":"method","name":"to_ary","children":[],"call":[" rule to_ary "," rule "," input "," rule name "," name "]}," Dry Logic Result Set to_ary":{"type":"method","name":"to_ary","children":[],"call":[" value values_at map "," value values_at "," value "," input "," rule name "," rule ","(send\n  (send nil :value) :map) compact "," value index ","v failure? "," value map "," name "]}," Dry Logic Result Set success?":{"type":"method","name":"success?","children":[],"call":[" value all? "," value "]}," Dry Logic Result":{"type":"method","name":"Result","children":[],"call":[]}," Dry Logic Predicates included":{"type":"method","name":"included","children":[],"call":[]}," Dry Logic PredicateSet extended":{"type":"method","name":"extended","children":[],"call":[]}," Dry Logic PredicateSet Methods import":{"type":"method","name":"import","children":[],"call":[" merge "]}," Dry Logic PredicateSet Methods predicate":{"type":"method","name":"predicate","children":[],"call":["Predicate  new "," register "]}," Dry Logic Predicate to_ary":{"type":"method","name":"to_ary","children":[],"call":[" args "," id "]}," Dry Logic Predicate curry":{"type":"method","name":"curry","children":[],"call":[" class new "," fn curry call "," fn curry "," fn "," id "," class "," raise_arity_error ","all_args size ","Curried  new "," arity ","size <= ","@args + ","args size > ","args size ","all_args all_args size  ","@args +  size ","all_args size  <= ","args all_args size  > ","args all_args size  "]}," Dry Logic Predicate call":{"type":"method","name":"call","children":[],"call":[" fn call "," fn "," raise_arity_error ","size == "," arity ","all_args size ","@args + ","all_args size  == ","all_args all_args size  ","@args +  size "]}," Dry Logic Predicate initialize":{"type":"method","name":"initialize","children":[],"call":["@fn arity "]}," Dry Logic Predicate":{"type":"method","name":"Predicate","children":[],"call":[]}," Dry Logic RuleCompiler visit_attr":{"type":"method","name":"visit_attr","children":[],"call":["Rule Attr  new "," visit ","Operations Attr  new "]}," Dry Logic RuleCompiler visit_res":{"type":"method","name":"visit_res","children":[],"call":["Rule Result  new "," visit "]}," Dry Logic Result type":{"type":"method","name":"type","children":[],"call":[" success? "]}," Dry Logic Attr call":{"type":"method","name":"call","children":[],"call":["Logic Result LazyValue  new "," predicate call "," predicate "]}," Dry Logic Attr evaluate_input":{"type":"method","name":"evaluate_input","children":[],"call":["input public_send "," name "]}," Dry Logic Attr type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Attr new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Result Wrapped to_ary":{"type":"method","name":"to_ary","children":[],"call":[" rule to_ary "," rule "," name "," rule evaluate_input "," input "," rule name "]}," Dry Logic Result LazyValue input":{"type":"method","name":"input","children":[],"call":[" rule evaluate_input "," rule "," success? "]}," Dry Logic Result LazyValue to_ary":{"type":"method","name":"to_ary","children":[],"call":[" rule to_ary "," rule "," input "," rule name "]}," Dry Logic Result wrapped?":{"type":"method","name":"wrapped?","children":[],"call":[]}," Dry Logic Result Wrapped wrapped?":{"type":"method","name":"wrapped?","children":[],"call":[]}," Dry Logic RuleCompiler visit_arg":{"type":"method","name":"visit_arg","children":[],"call":[]}," Dry Logic RuleCompiler visit_res_arg":{"type":"method","name":"visit_res_arg","children":[],"call":[" predicates [] input "," predicates [] "," predicates "]}," Dry Logic RuleCompiler visit_args":{"type":"method","name":"visit_args","children":[],"call":[" visit ","nodes map "]}," Dry Logic Result evaluate_input":{"type":"method","name":"evaluate_input","children":[],"call":["result [] input ","result [] "," name ","result [] input [] "," name to_a flatten "," name to_a "," name is_a? "]}," Dry Logic Check initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options fetch "]}," Dry Logic Check Binary evaluate_input":{"type":"method","name":"evaluate_input","children":[],"call":["result [] input ","result [] "," keys map "," keys ","result [] input [] ","key to_a flatten ","key to_a ","key is_a? "]}," Dry Logic Check Unary evaluate_input":{"type":"method","name":"evaluate_input","children":[],"call":[" predicate input "," predicate "]}," Dry Logic Result then":{"type":"method","name":"then","children":[],"call":["Logic  Result "," rule "," input ","other call "," success? "]}," Dry Logic Rule each?":{"type":"method","name":"each?","children":[],"call":[" predicate is_a? "," predicate "]}," Dry Logic Value to_ast":{"type":"method","name":"to_ast","children":[],"call":[" predicate to_ast "," predicate "," type "," rule to_ast "," rule "," rule evaluate "," input "," response to_ast "," response "," response respond_to? "]}," Dry Logic Value evaluate":{"type":"method","name":"evaluate","children":[],"call":[]}," Dry Logic Value apply":{"type":"method","name":"apply","children":[],"call":[" predicate call "," evaluate "," predicate "]}," Dry Logic Set to_ast":{"type":"method","name":"to_ast","children":[],"call":["rule to_ast "," rules map "," rules "," type "," rule evaluate "," input "," rule ","el to_ast "," failures map "," failures "]}," Dry Logic Set apply":{"type":"method","name":"apply","children":[],"call":["rule call "," rules map "," rules "]}," Dry Logic Rule Negation type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Key to_ast":{"type":"method","name":"to_ast","children":[],"call":[" predicate to_ast "," predicate "," name "," type "]}," Dry Logic Key evaluate":{"type":"method","name":"evaluate","children":[],"call":[" evaluator [] "," evaluator "]}," Dry Logic Key initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Dry Logic Key evaluator":{"type":"method","name":"evaluator","children":[],"call":[]}," Dry Logic Each apply":{"type":"method","name":"apply","children":[],"call":[" predicate call "," predicate ","input map ","Hash  [] ","input map with_index "]}," Dry Logic ExclusiveDisjunction evaluate":{"type":"method","name":"evaluate","children":[],"call":[" right evaluate "," right "," left evaluate "," left "]}," Dry Logic Composite to_ast":{"type":"method","name":"to_ast","children":[],"call":[" right to_ast "," right "," left to_ast "," left "," type "]}," Dry Logic Check to_ast":{"type":"method","name":"to_ast","children":[],"call":[" predicate to_ast "," predicate "," name "," type "]}," Dry Logic Check evaluate":{"type":"method","name":"evaluate","children":[],"call":[" evaluator [] first "," evaluator [] "," evaluator "]}," Dry Logic Check new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Attr evaluator":{"type":"method","name":"evaluator","children":[],"call":[]}," Dry Logic Result name":{"type":"method","name":"name","children":[],"call":[]}," Dry Logic Result []":{"type":"method","name":"[]","children":[],"call":[" response [] "," response "," response respond_to? "]}," Dry Logic Named to_ast":{"type":"method","name":"to_ast","children":[],"call":[" rule name "," rule "," response to_ast "," response "," response is_a? ! "," response is_a? "," response respond_to? "]}," Dry Logic Named name":{"type":"method","name":"name","children":[],"call":[" rule name "," rule "]}," Dry Logic Multi failures":{"type":"method","name":"failures","children":[],"call":[" success values_at "," success ","(send\n  (send nil :success) :map) compact "," success index ","v failure? "," success map "]}," Dry Logic Multi success?":{"type":"method","name":"success?","children":[],"call":[" success all? "," success "]}," Dry Logic Each to_ast":{"type":"method","name":"to_ast","children":[],"call":[" rule evaluate "," input "," rule ","el to_ast "," success index "," success "," failures map "," failures "]}," Dry Logic Predicate to_ast":{"type":"method","name":"to_ast","children":[],"call":[" args "," id "," args_with_names "]}," Dry Logic Evaluator initialize":{"type":"method","name":"initialize","children":[],"call":[" Array "]}," Dry Logic Evaluator Attr call":{"type":"method","name":"call","children":[],"call":["a public_send "," path reduce "," path "]}," Dry Logic Evaluator Key call":{"type":"method","name":"call","children":[],"call":["a [] "," path reduce "," path "]}," Dry Logic Evaluator Set call":{"type":"method","name":"call","children":[],"call":["evaluator [] "," evaluators map "," evaluators "]}," Dry Logic Evaluator Set initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Evaluator Set new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Each failures":{"type":"method","name":"failures","children":[],"call":["hash []= ","res failure? "," response each_with_object "," response "]}," Dry Logic Each success?":{"type":"method","name":"success?","children":[],"call":[" response values all? "," response values "," response "]}," Dry Logic Rule method_added":{"type":"method","name":"method_added","children":[],"call":[]}," Dry Logic Value input":{"type":"method","name":"input","children":[],"call":[" predicate args last "," predicate args "," predicate "," rule input "," rule "," rule input != "]}," Dry Logic Value args":{"type":"method","name":"args","children":[],"call":[" predicate args "," predicate "]}," Dry Logic Value arity":{"type":"method","name":"arity","children":[],"call":[" predicate arity "," predicate "]}," Dry Logic Value nulary?":{"type":"method","name":"nulary?","children":[],"call":[" arity == "," arity "]}," Dry Logic Set curry":{"type":"method","name":"curry","children":[],"call":[" new ","r curry "," rules map "," rules "]}," Dry Logic Set arity":{"type":"method","name":"arity","children":[],"call":[]}," Dry Logic Composite curry":{"type":"method","name":"curry","children":[],"call":[" class new "," right curry "," right "," left curry "," left "," class "]}," Dry Logic Composite input":{"type":"method","name":"input","children":[],"call":[]}," Dry Logic Composite arity":{"type":"method","name":"arity","children":[],"call":[]}," Dry Logic Predicate raise_arity_error":{"type":"method","name":"raise_arity_error","children":[],"call":[" raise "," arity "]}," Dry Logic Predicate args_with_names":{"type":"method","name":"args_with_names","children":[],"call":[" parameters map zip "," args + ","Array  new "," arity - "," args size "," args "," arity "," parameters map "," parameters "]}," Dry Logic Predicate parameters":{"type":"method","name":"parameters","children":[],"call":[" fn parameters "," fn "]}," Dry Logic Predicate bind":{"type":"method","name":"bind","children":[],"call":[" class new "," fn bind "," fn "," args "," id "," class "]}," Dry Logic Predicate Curried call":{"type":"method","name":"call","children":[],"call":[" curry ","all_args size == "," arity ","all_args size ","@args + ","@args +  size == ","@args +  size "]}," Dry Logic Predicate inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Dry Logic Rule args_with_names":{"type":"method","name":"args_with_names","children":[],"call":[" parameters map zip "," args + "," args "," parameters map "," parameters "]}," Dry Logic Rule ast":{"type":"method","name":"ast","children":[],"call":[" args_with_names "," id "]}," Dry Logic Rule parameters":{"type":"method","name":"parameters","children":[],"call":[" predicate parameters "," predicate "," options [] "," options "]}," Dry Logic Rule with":{"type":"method","name":"with","children":[],"call":[" class new "," options merge "," options "," predicate "," class "," class build "]}," Dry Logic Rule eval_args":{"type":"method","name":"eval_args","children":[],"call":[" with ","arg bind call ","arg bind ","arg instance_of? "," args map "," args ","UnboundMethod  === ","arg is_a? "]}," Dry Logic Rule bind":{"type":"method","name":"bind","children":[],"call":[" class new "," options merge "," parameters "," arity "," options ","object instance_exec "," predicate "," lambda "," class "," predicate bind "," predicate instance_of? ","UnboundMethod  === "," class build "," predicate respond_to? "]}," Dry Logic Rule []":{"type":"method","name":"[]","children":[],"call":[" predicate [] "," args "," predicate "," predicate call "," arity == "," arity "]}," Dry Logic Rule id":{"type":"method","name":"id","children":[],"call":[" options [] "," options "]}," Dry Logic Rule":{"type":"method","name":"Rule","children":[],"call":[]}," Dry Logic Predicate ast":{"type":"method","name":"ast","children":[],"call":[" args_with_names "," name "," type "]}," Dry Logic Predicate to_s":{"type":"method","name":"to_s","children":[],"call":[" name "," args map join "," args map "," args "," args size > "," args size "," name to_s "]}," Dry Logic Predicate name":{"type":"method","name":"name","children":[],"call":[" predicate name "," predicate "]}," Dry Logic Predicate type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Result visit_hint":{"type":"method","name":"visit_hint","children":[],"call":[" visit "]}," Dry Logic Result visit_not":{"type":"method","name":"visit_not","children":[],"call":[" visit "]}," Dry Logic Result visit_xor":{"type":"method","name":"visit_xor","children":[],"call":[" visit "]}," Dry Logic Result visit_or":{"type":"method","name":"visit_or","children":[],"call":[" visit "]}," Dry Logic Result visit_and":{"type":"method","name":"visit_and","children":[],"call":[" visit "]}," Dry Logic Result visit_predicate":{"type":"method","name":"visit_predicate","children":[],"call":["args map map join ","args map map ","args map ","name to_s ","args empty? "]}," Dry Logic Result visit":{"type":"method","name":"visit","children":[],"call":[" __send__ ","ast [] "]}," Dry Logic Result to_s":{"type":"method","name":"to_s","children":[],"call":[" visit "," to_ast "]}," Dry Logic Result to_ast":{"type":"method","name":"to_ast","children":[],"call":[" ast "," id "," type "]}," Dry Logic Result ast":{"type":"method","name":"ast","children":[],"call":[" serializer call "," serializer "]}," Dry Logic Predicates Methods predicate":{"type":"method","name":"predicate","children":[],"call":[" define_singleton_method "]}," Dry Logic Predicates Methods format?":{"type":"method","name":"format?","children":[],"call":["regex match nil? ! ","regex match nil? ","regex match ","regex match? ","input nil? ! ","input nil? "]}," Dry Logic Predicates Methods false?":{"type":"method","name":"false?","children":[],"call":["value equal? "]}," Dry Logic Predicates Methods true?":{"type":"method","name":"true?","children":[],"call":["value equal? "]}," Dry Logic Predicates Methods not_eql?":{"type":"method","name":"not_eql?","children":[],"call":["left eql? ! ","left eql? "]}," Dry Logic Predicates Methods eql?":{"type":"method","name":"eql?","children":[],"call":["left eql? ","right equal? "]}," Dry Logic Predicates Methods excludes?":{"type":"method","name":"excludes?","children":[],"call":[" [] call ! "," [] call "," [] "," includes? ! "," includes? "]}," Dry Logic Predicates Methods includes?":{"type":"method","name":"includes?","children":[],"call":["input include? ","input respond_to? "]}," Dry Logic Predicates Methods excluded_from?":{"type":"method","name":"excluded_from?","children":[],"call":["list include? ! ","list include? "]}," Dry Logic Predicates Methods included_in?":{"type":"method","name":"included_in?","children":[],"call":["list include? "]}," Dry Logic Predicates Methods exclusion?":{"type":"method","name":"exclusion?","children":[],"call":[" [] call "," [] "," Kernel  warn "," excluded_from? "," deprecated "]}," Dry Logic Predicates Methods inclusion?":{"type":"method","name":"inclusion?","children":[],"call":[" [] call "," [] "," Kernel  warn "," included_in? "," deprecated "]}," Dry Logic Predicates Methods max_size?":{"type":"method","name":"max_size?","children":[],"call":["input size <= ","input size "]}," Dry Logic Predicates Methods min_size?":{"type":"method","name":"min_size?","children":[],"call":["input size >= ","input size "]}," Dry Logic Predicates Methods size?":{"type":"method","name":"size?","children":[],"call":[" raise ","size include? ","input size ","size == ","size equal? "]}," Dry Logic Predicates Methods gteq?":{"type":"method","name":"gteq?","children":[],"call":[" [] call ! "," [] call "," [] "," lt? ! "," lt? "]}," Dry Logic Predicates Methods lteq?":{"type":"method","name":"lteq?","children":[],"call":[" [] call ! "," [] call "," [] "," gt? ! "," gt? "]}," Dry Logic Predicates Methods gt?":{"type":"method","name":"gt?","children":[],"call":["input > "]}," Dry Logic Predicates Methods lt?":{"type":"method","name":"lt?","children":[],"call":["input < "]}," Dry Logic Predicates Methods even?":{"type":"method","name":"even?","children":[],"call":["input even? "]}," Dry Logic Predicates Methods odd?":{"type":"method","name":"odd?","children":[],"call":["input odd? "]}," Dry Logic Predicates Methods array?":{"type":"method","name":"array?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods hash?":{"type":"method","name":"hash?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods str?":{"type":"method","name":"str?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods decimal?":{"type":"method","name":"decimal?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods float?":{"type":"method","name":"float?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods int?":{"type":"method","name":"int?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods number?":{"type":"method","name":"number?","children":[],"call":[" Float "]}," Dry Logic Predicates Methods time?":{"type":"method","name":"time?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods date_time?":{"type":"method","name":"date_time?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods date?":{"type":"method","name":"date?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods bool?":{"type":"method","name":"bool?","children":[],"call":["input is_a? "]}," Dry Logic Predicates Methods filled?":{"type":"method","name":"filled?","children":[],"call":[" [] call ! "," [] call "," [] "," empty? ! "," empty? "]}," Dry Logic Predicates Methods empty?":{"type":"method","name":"empty?","children":[],"call":["input empty? "]}," Dry Logic Predicates Methods attr?":{"type":"method","name":"attr?","children":[],"call":["input respond_to? "]}," Dry Logic Predicates Methods key?":{"type":"method","name":"key?","children":[],"call":["input key? "]}," Dry Logic Predicates Methods none?":{"type":"method","name":"none?","children":[],"call":["input nil? "]}," Dry Logic Predicates Methods type?":{"type":"method","name":"type?","children":[],"call":["input kind_of? ","input is_a? "]}," Dry Logic Predicates Methods []":{"type":"method","name":"[]","children":[],"call":[" method "]}," Dry Logic Operators then":{"type":"method","name":"then","children":[],"call":["Operations Implication  new "]}," Dry Logic Operators xor":{"type":"method","name":"xor","children":[],"call":["Operations Xor  new "]}," Dry Logic Operators or":{"type":"method","name":"or","children":[],"call":["Operations Or  new "]}," Dry Logic Operators and":{"type":"method","name":"and","children":[],"call":["Operations And  new "]}," Dry Logic Operations Xor ast":{"type":"method","name":"ast","children":[],"call":["rule ast "," rules map "," rules "," type "]}," Dry Logic Operations Xor []":{"type":"method","name":"[]","children":[],"call":[" left [] ^ "," right [] "," right "," left [] "," left "]}," Dry Logic Operations Xor call":{"type":"method","name":"call","children":[],"call":[" ast ","Result  new "," id "," [] "]}," Dry Logic Operations Xor type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Unary to_s":{"type":"method","name":"to_s","children":[],"call":[" rule "," type "]}," Dry Logic Operations Unary ast":{"type":"method","name":"ast","children":[],"call":[" rule ast "," rule "," type "]}," Dry Logic Operations Unary initialize":{"type":"method","name":"initialize","children":[],"call":["rules first "]}," Dry Logic Operations Set to_s":{"type":"method","name":"to_s","children":[],"call":[" rules map join "," rules map "," rules "," type "]}," Dry Logic Operations Set ast":{"type":"method","name":"ast","children":[],"call":["rule ast "," rules map "," rules "," type "]}," Dry Logic Operations Set []":{"type":"method","name":"[]","children":[],"call":["(send\n  (send nil :rules) :map) all? ","rule [] "," rules map "," rules "]}," Dry Logic Operations Set call":{"type":"method","name":"call","children":[],"call":["failure to_ast ","results select map ","results select "," type ","Result  new "," id ","results all? ","rule call "," rules map "," rules "]}," Dry Logic Operations Set type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Or []":{"type":"method","name":"[]","children":[],"call":[" right [] "," right "," left [] "," left "]}," Dry Logic Operations Or call":{"type":"method","name":"call","children":[],"call":["right_result to_ast ","left_result to_ast ","Result  new "," id ","right_result success? "," right call "," right ","left_result success? "," left call "," left "," right call  to_ast "," left call  to_ast "," right call  success? "," left call  success? "]}," Dry Logic Operations Or type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Negation call":{"type":"method","name":"call","children":[],"call":[" ast ","Result  new "," id "," rule [] ! "," rule [] "," rule "," rule call failure? "," rule call "]}," Dry Logic Operations Negation type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Key to_s":{"type":"method","name":"to_s","children":[],"call":[" rule "," path "," type "]}," Dry Logic Operations Key ast":{"type":"method","name":"ast","children":[],"call":[" rule ast "," rule "," path "," type "," evaluator [] "," evaluator ","input is_a? ! ","input is_a? ","input equal? "]}," Dry Logic Operations Key []":{"type":"method","name":"[]","children":[],"call":[" rule [] "," evaluator [] "," evaluator "," rule "]}," Dry Logic Operations Key call":{"type":"method","name":"call","children":[],"call":["result to_ast "," path "," type ","Result  new ","result success? "," rule call "," rule "," evaluator [] "," evaluator "," rule call  to_ast "," rule call  success? "]}," Dry Logic Operations Key type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Key initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Dry Logic Operations Key evaluator":{"type":"method","name":"evaluator","children":[],"call":[]}," Dry Logic Operations Key new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Operations Implication []":{"type":"method","name":"[]","children":[],"call":[" right [] "," right "," left [] "," left "]}," Dry Logic Operations Implication call":{"type":"method","name":"call","children":[],"call":["right_result to_ast ","Result  new "," id ","right_result success? "," right call "," right ","left_result success? "," left call "," left "," right call  to_ast "," right call  success? "," left call  success? "]}," Dry Logic Operations Implication operator":{"type":"method","name":"operator","children":[],"call":[]}," Dry Logic Operations Implication type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Each []":{"type":"method","name":"[]","children":[],"call":["(send\n  (lvar :arr) :map) all? "," rule [] "," rule ","arr map "]}," Dry Logic Operations Each call":{"type":"method","name":"call","children":[],"call":["(send\n  (send\n    (lvar :results) :map) :with_index) compact ","result ast ","input [] ","result failure? ","results map with_index ","results map ","Result  new "," id ","results all? "," rule call "," rule ","input map "]}," Dry Logic Operations Each type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Check ast":{"type":"method","name":"ast","children":[],"call":[" rule ast "," rule "," options [] "," options "," type "]}," Dry Logic Operations Check []":{"type":"method","name":"[]","children":[],"call":[" rule [] "," evaluator [] reverse "," evaluator [] "," evaluator "," rule "]}," Dry Logic Operations Check call":{"type":"method","name":"call","children":[],"call":["result to_ast "," options [] "," options "," type ","Result  new "," id ","result success? "," rule curry call "," rule curry "," rule "," evaluator [] "," evaluator "," rule curry call  to_ast "," rule curry call  success? "]}," Dry Logic Operations Check type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Check initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Dry Logic Operations Check new":{"type":"method","name":"new","children":[],"call":[]}," Dry Logic Operations Binary to_s":{"type":"method","name":"to_s","children":[],"call":[" right "," operator to_s upcase "," operator to_s "," operator "," left "]}," Dry Logic Operations Binary ast":{"type":"method","name":"ast","children":[],"call":[" right ast "," right "," left ast "," left "," type "]}," Dry Logic Operations Binary initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Operations Attr type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Attr evaluator":{"type":"method","name":"evaluator","children":[],"call":[]}," Dry Logic Operations And []":{"type":"method","name":"[]","children":[],"call":[" right [] "," right "," left [] "," left "]}," Dry Logic Operations And call":{"type":"method","name":"call","children":[],"call":[" right ast "," right ","left_result to_ast "," type ","Result  new "," id ","right_result ast ","right_result success? "," right call ","left_result success? "," left call "," left "," hints "," left call  to_ast "," right call  ast "," right call  success? "," left call  success? "]}," Dry Logic Operations And type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Operations Abstract to_ast":{"type":"method","name":"to_ast","children":[],"call":[" ast "]}," Dry Logic Operations Abstract with":{"type":"method","name":"with","children":[],"call":[" new "," options merge "," options "," rules "]}," Dry Logic Operations Abstract new":{"type":"method","name":"new","children":[],"call":[" class new "," options merge "," options "," class "]}," Dry Logic Operations Abstract curry":{"type":"method","name":"curry","children":[],"call":[" new "," options ","rule curry "," rules map "," rules "]}," Dry Logic Operations Abstract id":{"type":"method","name":"id","children":[],"call":[" options [] "," options "]}," Dry Logic Operations Abstract initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Logic Appliable to_ast":{"type":"method","name":"to_ast","children":[],"call":[" ast "," id "," success? "," applied? "]}," Dry Logic Appliable failure?":{"type":"method","name":"failure?","children":[],"call":[" success? ! "," success? "]}," Dry Logic Appliable success?":{"type":"method","name":"success?","children":[],"call":[" result equal? "," result "]}," Dry Logic Appliable applied?":{"type":"method","name":"applied?","children":[],"call":[" result nil? ! "," result nil? "," result "]}," Dry Logic Appliable result":{"type":"method","name":"result","children":[],"call":[" options [] "," options "]}," Dry Logic Appliable id":{"type":"method","name":"id","children":[],"call":[" options [] "," options "]}," Dry Logic Predicates Methods case?":{"type":"method","name":"case?","children":[],"call":["pattern === "]}," Dry Logic Predicates Methods is?":{"type":"method","name":"is?","children":[],"call":["left equal? "]}," Dry Logic Predicates Methods nil?":{"type":"method","name":"nil?","children":[],"call":["input nil? "]}," Dry Logic Operations Negation []":{"type":"method","name":"[]","children":[],"call":[" rule [] ! "," rule [] "," rule "]}," Dry Logic Rule build":{"type":"method","name":"build","children":[],"call":["predicate arity "]}," Dry Logic Rule specialize":{"type":"method","name":"specialize","children":[],"call":[]}," Dry Logic Rule interfaces":{"type":"method","name":"interfaces","children":[],"call":[]}," Dry Logic Predicate specialize":{"type":"method","name":"specialize","children":[],"call":[]}," Dry Logic Rule Interface unapplied_args":{"type":"method","name":"unapplied_args","children":[],"call":[" Array  new "," unapplied "]}," Dry Logic Rule Interface curried_args":{"type":"method","name":"curried_args","children":[],"call":[" Array  new "," curried "]}," Dry Logic Rule Interface define_fixed_application":{"type":"method","name":"define_fixed_application","children":[],"call":[" module_eval ","101 + ","(send\n  (send nil :curried_args) :+\n  (send nil :unapplied_args)) join "," curried_args + "," unapplied_args "," curried_args "," unapplied_args join ","119 + ","121 + "]}," Dry Logic Rule Interface define_splat_application":{"type":"method","name":"define_splat_application","children":[],"call":[" module_eval ","82 + "," curried_args join "," curried_args "," curried? ","100 + ","102 + "]}," Dry Logic Rule Interface define_constructor":{"type":"method","name":"define_constructor","children":[],"call":[" module_eval ","65 + "," curried_args join "," curried_args "," curried equal? "," curried ","67 + ","69 + ","86 + ","88 + "]}," Dry Logic Rule Interface name":{"type":"method","name":"name","children":[],"call":[" curried "," curried? "," arity "," variable_arity? "," constant? "," arity abs - "," arity abs "]}," Dry Logic Rule Interface unapplied":{"type":"method","name":"unapplied","children":[],"call":[" arity - "," curried "," arity "," variable_arity? ","unapplied negative? "," arity abs - - "," arity abs - "," arity abs "," arity abs - -  negative? "]}," Dry Logic Rule Interface curried?":{"type":"method","name":"curried?","children":[],"call":[" curried zero? ! "," curried zero? "," curried "]}," Dry Logic Rule Interface variable_arity?":{"type":"method","name":"variable_arity?","children":[],"call":[" arity equal? "," arity "," arity negative? "]}," Dry Logic Rule Interface constant?":{"type":"method","name":"constant?","children":[],"call":[" arity zero? "," arity "]}," Dry Logic Rule Interface initialize":{"type":"method","name":"initialize","children":[],"call":[" define_fixed_application "," define_splat_application "," variable_arity? "," define_constructor "," curried? "," raise ","curried > "," variable_arity? ! "," define_constant_application "," constant? "," define_application "]}," Dry Logic Operations And initialize":{"type":"method","name":"initialize","children":[],"call":[" options fetch "," options "]}," Dry Logic Rule Interface define_constant_application":{"type":"method","name":"define_constant_application","children":[{"type":"method","name":"call","children":[],"asgn":[],"call":[" ast ","Result  new "," id ","@predicate [] "]},{"type":"method","name":"[]","children":[],"asgn":[],"call":["@predicate [] "]}],"call":["@predicate [] "," ast ","Result  new "," id "," module_exec "]}," Dry Logic Predicates Methods respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["input respond_to? ","input equal? "]}," Dry Logic Predicates Methods uuid_v4?":{"type":"method","name":"uuid_v4?","children":[],"call":[" format? "]}," Dry Logic Predicates Methods max_bytesize?":{"type":"method","name":"max_bytesize?","children":[],"call":["input bytesize <= ","input bytesize "]}," Dry Logic Predicates Methods min_bytesize?":{"type":"method","name":"min_bytesize?","children":[],"call":["input bytesize >= ","input bytesize "]}," Dry Logic Predicates Methods bytesize?":{"type":"method","name":"bytesize?","children":[],"call":[" raise ","size include? ","input bytesize ","size equal? "]}," Dry Logic Predicates Methods uri?":{"type":"method","name":"uri?","children":[],"call":[" format? ","URI DEFAULT_PARSER  make_regexp "]}," Dry Logic Predicates Methods uuid_v5?":{"type":"method","name":"uuid_v5?","children":[],"call":[" format? "]}," Dry Logic Predicates Methods uuid_v3?":{"type":"method","name":"uuid_v3?","children":[],"call":[" format? "]}," Dry Logic Predicates Methods uuid_v2?":{"type":"method","name":"uuid_v2?","children":[],"call":[" format? "]}," Dry Logic Predicates Methods uuid_v1?":{"type":"method","name":"uuid_v1?","children":[],"call":[" format? "]}," Dry Logic Rule Interface define_application":{"type":"method","name":"define_application","children":[],"call":[" module_eval ","116 + ","(send\n  (send\n    (send nil :curried_args) :+\n    (send nil :unapplied_args)) :+\n  (lvar :splat)) join "," curried_args + + "," curried_args + "," unapplied_args "," curried_args ","(send\n  (send nil :unapplied_args) :+\n  (lvar :splat)) join "," unapplied_args + "," variable_arity? ","118 + "]}," Dry Logic Builder Context initialize":{"type":"method","name":"initialize","children":[],"call":[" predicate ","Predicates  [] ","IGNORED_PREDICATES  include? ","Predicates Methods  instance_methods each ","Predicates Methods  instance_methods ","operation new "," call "," define_singleton_method ","name downcase ","Operations  const_get ","IGNORED_OPERATIONS  include? ","Operations  constants each ","Operations  constants ","Operations  const_get  new "]}," Dry Logic Builder Context predicate":{"type":"method","name":"predicate","children":[],"call":["prerdicate curry "," define_singleton_method ","Rule Predicate  new "," singleton_class undef_method "," singleton_class "," singleton_class method_defined? ","Rule Predicate  new  curry "]}," Dry Logic Builder Context call":{"type":"method","name":"call","children":[],"call":[" instance_eval "]}," Dry Logic Builder call":{"type":"method","name":"call","children":[],"call":["Context  instance call ","Context  instance "]}," Dry Logic loader":{"type":"method","name":"loader","children":[],"call":[]}," Dry Logic Rule Predicate ast":{"type":"method","name":"ast","children":[],"call":[" args_with_names "," name "," type "]}," Dry Logic Rule Predicate to_s":{"type":"method","name":"to_s","children":[],"call":[" args map join "," args map "," args "," name "," name to_s "," args empty? "]}," Dry Logic Rule Predicate name":{"type":"method","name":"name","children":[],"call":[" predicate name "," predicate "]}," Dry Logic Rule Predicate type":{"type":"method","name":"type","children":[],"call":[]}," Dry Logic Rule Predicate specialize":{"type":"method","name":"specialize","children":[],"call":[]}," Dry Logic Predicates Methods uri_rfc3986?":{"type":"method","name":"uri_rfc3986?","children":[],"call":[" format? "]}," Dry Logic Predicates Methods uuid_format":{"type":"method","name":"uuid_format","children":[],"call":[]}," Dry Logic Predicates Methods deprecated":{"type":"method","name":"deprecated","children":[],"call":["Core Deprecations  warn "]}}