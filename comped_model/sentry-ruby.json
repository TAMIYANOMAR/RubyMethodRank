{" Sentry sys_command":{"type":"method","name":"sys_command","children":[],"call":["result strip ","$CHILD_STATUS exitstatus != ","$CHILD_STATUS exitstatus ","result empty? ","result nil? "]}," Sentry last_event_id":{"type":"method","name":"last_event_id","children":[],"call":[" get_current_hub last_event_id "," get_current_hub "," initialized? "]}," Sentry capture_message":{"type":"method","name":"capture_message","children":[],"call":[" get_current_hub capture_message "," get_current_hub "," initialized? "]}," Sentry capture_exception":{"type":"method","name":"capture_exception","children":[],"call":[" get_current_hub capture_exception "," get_current_hub "," initialized? "]}," Sentry capture_event":{"type":"method","name":"capture_event","children":[],"call":[" get_current_hub capture_event "," get_current_hub "," initialized? "]}," Sentry configure_scope":{"type":"method","name":"configure_scope","children":[],"call":[" get_current_hub configure_scope "," get_current_hub "," initialized? "]}," Sentry with_scope":{"type":"method","name":"with_scope","children":[],"call":[" get_current_hub with_scope "," get_current_hub "," initialized? "]}," Sentry get_current_scope":{"type":"method","name":"get_current_scope","children":[],"call":[" get_current_hub current_scope "," get_current_hub "," initialized? "]}," Sentry clone_hub_to_current_thread":{"type":"method","name":"clone_hub_to_current_thread","children":[],"call":["Thread  current []= "," get_main_hub clone "," get_main_hub ","Thread  current ","Thread  current thread_variable_set "," initialized? "]}," Sentry get_current_hub":{"type":"method","name":"get_current_hub","children":[],"call":["Thread  current [] ","Thread  current "," clone_hub_to_current_thread ","Thread  current thread_variable_get "]}," Sentry get_current_client":{"type":"method","name":"get_current_client","children":[],"call":[" get_current_hub current_client "," get_current_hub "," initialized? "]}," Sentry configuration":{"type":"method","name":"configuration","children":[],"call":[" get_current_client configuration "," get_current_client "," initialized? "]}," Sentry breadcrumbs":{"type":"method","name":"breadcrumbs","children":[],"call":[" get_current_scope breadcrumbs "," get_current_scope "]}," Sentry logger":{"type":"method","name":"logger","children":[],"call":[" configuration logger "," configuration "]}," Sentry get_main_hub":{"type":"method","name":"get_main_hub","children":[],"call":[]}," Sentry init":{"type":"method","name":"init","children":[],"call":["Thread  current []= ","Thread  current ","Hub  new ","Scope  new ","Client  new ","Configuration  new ","Sentry BackgroundWorker  new "," close "," at_exit "," exception_locals_tp enable "," exception_locals_tp ","config include_local_variables ","Sentry SessionFlusher  new ","config auto_session_tracking ","Thread  current thread_variable_set ","config max_breadcrumbs "," apply_patches ","config detect_release "," block_given? ","config capture_exception_frame_locals ","Configuration  new  include_local_variables ","Configuration  new  auto_session_tracking ","Configuration  new  max_breadcrumbs ","Configuration  new  detect_release ","Configuration  new  capture_exception_frame_locals "]}," Sentry sdk_meta":{"type":"method","name":"sdk_meta","children":[],"call":[]}," Sentry Utils RealIp filter_local_addresses":{"type":"method","name":"filter_local_addresses","children":[],"call":["proxy === ","LOCAL_ADDRESSES  any? ","ips reject "]}," Sentry Utils RealIp ips_from":{"type":"method","name":"ips_from","children":[],"call":["range begin == ","range end ","range begin ","IPAddr  new to_range ","IPAddr  new ","ips select ","header strip split ","header strip ","IPAddr  new to_range  begin == ","IPAddr  new to_range  end ","IPAddr  new to_range  begin ","IPAddr  new to_IPAddr  new to_range  ","header strip split  select "]}," Sentry Utils RealIp calculate_ip":{"type":"method","name":"calculate_ip","children":[],"call":[" filter_local_addresses first "," filter_local_addresses ","(lvar :client_ips) flatten compact ","(lvar :client_ips) flatten "," ips_from "," ips_from last "," filter_trusted_proxy_addresses first "," filter_trusted_proxy_addresses "," ips_from reverse ","(lvar :client_(lvar :client_ips) flatten compact ) flatten compact ","(lvar : ips_from ) flatten compact ","(lvar :client_(lvar :client_ips) flatten compact ) flatten ","(lvar : ips_from ) flatten "," (lvar :client_ips) flatten compact _from "," (lvar :client_ips) flatten compact _from last "," (lvar :client_ips) flatten compact _from reverse "]}," Sentry Utils RealIp initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (begin\n    (send\n      (const nil :LOCAL_ADDRESSES) :+\n      (send nil :Array\n        (lvar :trusted_proxies)))) :map) uniq ","IPAddr  new ","proxy to_s ","proxy is_a? ","(send\n  (const nil :LOCAL_ADDRESSES) :+\n  (send nil :Array\n    (lvar :trusted_proxies))) map ","LOCAL_ADDRESSES  + "," Array "]}," Sentry Utils ExceptionCauseChain exception_to_array":{"type":"method","name":"exception_to_array","children":[],"call":[]}," Sentry Utils DeepMergeHash deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[]}," Sentry Utils DeepMergeHash deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[]}," Sentry Transport log_not_sending":{"type":"method","name":"log_not_sending","children":[],"call":["Event  get_log_message ","event to_hash "," configuration logger warn "," configuration logger "," configuration "]}," Sentry Transport failed_for_previous_failure":{"type":"method","name":"failed_for_previous_failure","children":[],"call":[" log_not_sending "," configuration logger warn "," configuration logger "," configuration "]}," Sentry Transport failed_for_exception":{"type":"method","name":"failed_for_exception","children":[],"call":[" log_not_sending ","e backtrace [] join ","e backtrace [] ","e backtrace ","e message ","e class "," configuration logger warn "," configuration logger "," configuration ","@state failure "]}," Sentry Transport prepare_encoded_event":{"type":"method","name":"prepare_encoded_event","children":[],"call":[" encode "," configuration logger info "," configuration logger "," configuration ","event_hash [] "," failed_for_previous_failure ","@state should_try? ","event to_hash ","event to_hash  [] "]}," Sentry Transport encode":{"type":"method","name":"encode","children":[],"call":["event_hash to_json ","DateTime  now rfc3339 ","DateTime  now ","Sentry  sdk_meta to_json ","Sentry  sdk_meta "," configuration dsn to_s "," configuration dsn "," configuration ","event_hash [] ","JSON  generate ","Sentry  utc_now iso8601 ","Sentry  utc_now "]}," Sentry Transport generate_auth_header":{"type":"method","name":"generate_auth_header","children":[],"call":["Sentry  + ","(send\n  (lvar :fields) :map) join ","fields map ","fields []= ","@dsn secret_key ","@dsn public_key ","Time  now to_i to_s ","Time  now to_i ","Time  now ","Sentry  utc_now to_i ","Sentry  utc_now ","Time  Time  now to_i to_s  to_i to_s ","Time  Sentry  utc_now to_i  to_i to_s ","Time  Time  now to_i to_s  to_i ","Time  Sentry  utc_now to_i  to_i ","Time  Time  now to_i to_s  ","Time  Sentry  utc_now to_i  ","Sentry  utc_Time  now to_i to_s  to_i ","Sentry  utc_Sentry  utc_now to_i  to_i ","Sentry  utc_Time  now to_i to_s  ","Sentry  utc_Sentry  utc_now to_i  "]}," Sentry Transport send_event":{"type":"method","name":"send_event","children":[],"call":[" failed_for_exception "," state success "," state "," send_data ","e message "," configuration logger error "," configuration logger "," configuration "," configuration async call ","event to_json_compatible "," configuration async "," configuration async? "," prepare_encoded_event "," configuration error_messages "," configuration logger debug "," configuration sending_allowed? "," send_envelope "," envelope_from_event "," send_ envelope_from_event  ","  envelope_from_event _from_event "]}," Sentry Transport send_data":{"type":"method","name":"send_data","children":[],"call":[" raise "]}," Sentry Transport initialize":{"type":"method","name":"initialize","children":[],"call":["State  new ","configuration dsn ","configuration transport ","Time  now ","Hash  new ","configuration send_client_reports ","configuration logger "]}," Sentry Transport State failed?":{"type":"method","name":"failed?","children":[],"call":["@status == "]}," Sentry Transport State reset":{"type":"method","name":"reset","children":[],"call":[]}," Sentry Transport State success":{"type":"method","name":"success","children":[],"call":[" reset "]}," Sentry Transport State failure":{"type":"method","name":"failure","children":[],"call":["Time  now ","Sentry  utc_now "]}," Sentry Transport State should_try?":{"type":"method","name":"should_try?","children":[],"call":["Time  now - >= ","Time  now - ","Time  now ","(ivar :@retry_number) min ** ","(ivar :@retry_number) min ","@status == ","Sentry  utc_now - >= ","Sentry  utc_now - ","Sentry  utc_now "]}," Sentry Transport State initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Sentry HTTPTransport ssl_configuration":{"type":"method","name":"ssl_configuration","children":[],"call":["(or\n  (send\n    (ivar :@transport_configuration) :ssl)\n  (hash)) merge ","@transport_configuration ssl_ca_file ","@transport_configuration ssl_verification ","@transport_configuration ssl ","configuration []= ","configuration delete ","(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge ","(or\n  (send\n    (ivar :@transport_(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge ) :ssl)\n  (hash)) merge ","@transport_(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge  ssl_ca_file ","@transport_(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge  ssl_verification ","@transport_(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge  ssl ","(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge  []= ","(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge  delete ","(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_(pair\n  (sym :verify)\n  (send\n    (ivar :@transport_configuration) :ssl_verification)) merge ) :ssl_verification)) merge "]}," Sentry HTTPTransport faraday_opts":{"type":"method","name":"faraday_opts","children":[],"call":["memo []= ","@transport_configuration public_send ","(sym :timeout) each_with_object "]}," Sentry HTTPTransport set_conn":{"type":"method","name":"set_conn","children":[],"call":["builder adapter "," adapter ","builder headers []= ","builder headers ","builder options merge! "," faraday_opts ","builder options ","builder response ","@transport_configuration faraday_builder ","Faraday  new ","@transport_configuration proxy "," ssl_configuration "," configuration logger debug "," configuration logger "," configuration ","@dsn server ","@dsn @dsn server  "]}," Sentry HTTPTransport send_data":{"type":"method","name":"send_data","children":[],"call":[" raise ","e response [] [] ","e response [] ","e response ","e message ","req body= ","req headers []= "," generate_auth_header ","req headers ","options [] "," conn post "," conn "," configuration error_messages "," configuration "," logger debug "," logger "," configuration sending_allowed? ","Sentry ExternalError  new ","response [] ","response body "," handle_rate_limited_response ","response code == ","response code "," has_rate_limited_header? ","response code match? ","http request ","request body= "," Net HTTP Post  new "," conn start ","Zlib  gzip "," should_compress? "," on_error "," respond_to? "," endpoint ","headers []= "," generate_ generate_auth_header  ","http  Net HTTP Post  new  "," Net HTTP Post  new  body= "]}," Sentry HTTPTransport initialize":{"type":"method","name":"initialize","children":[],"call":["@dsn envelope_endpoint "," set_conn ","Faraday  default_adapter ","@transport_configuration http_adapter "," log_debug ","@dsn server "]}," Sentry DummyTransport send_event":{"type":"method","name":"send_event","children":[],"call":["@events << "]}," Sentry DummyTransport initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Transport Configuration transport_class=":{"type":"method","name":"transport_class=","children":[],"call":[" raise ","Sentry Error  new ","klass class ","klass is_a? "]}," Sentry Transport Configuration encoding=":{"type":"method","name":"encoding=","children":[],"call":[" raise ","(str \"gzip\") include? "]}," Sentry Transport Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Scope runtime_context":{"type":"method","name":"runtime_context","children":[],"call":["Sentry  sys_command ","RbConfig CONFIG  [] "]}," Sentry Scope os_context":{"type":"method","name":"os_context","children":[],"call":["uname [] ","RbConfig CONFIG  [] ","Etc  uname ","Etc  uname  [] ","Etc  Etc  uname  "]}," Sentry Scope set_default_value":{"type":"method","name":"set_default_value","children":[],"call":[" class runtime_context "," class "," class os_context ","BreadcrumbBuffer  new "," set_new_breadcrumb_buffer "," generate_propagation_context "]}," Sentry Scope check_argument_type!":{"type":"method","name":"check_argument_type!","children":[],"call":[" raise ","argument class ","argument is_a? "]}," Sentry Scope add_event_processor":{"type":"method","name":"add_event_processor","children":[],"call":["@event_processors << "]}," Sentry Scope set_fingerprint":{"type":"method","name":"set_fingerprint","children":[],"call":[" check_argument_type! "]}," Sentry Scope transaction_name":{"type":"method","name":"transaction_name","children":[],"call":["@transaction_names last "]}," Sentry Scope set_transaction_name":{"type":"method","name":"set_transaction_name","children":[],"call":["@transaction_names << ","@transaction_sources << "]}," Sentry Scope set_level":{"type":"method","name":"set_level","children":[],"call":[]}," Sentry Scope set_context":{"type":"method","name":"set_context","children":[],"call":["@contexts merge! "," set_contexts "," check_argument_type! "]}," Sentry Scope set_contexts":{"type":"method","name":"set_contexts","children":[],"call":[" check_argument_type! ","old merge ","@contexts merge! ","contexts_hash values each ","contexts_hash values "]}," Sentry Scope set_tag":{"type":"method","name":"set_tag","children":[],"call":["@tags merge! "," set_tags "]}," Sentry Scope set_tags":{"type":"method","name":"set_tags","children":[],"call":["@tags merge! "," check_argument_type! "]}," Sentry Scope set_extra":{"type":"method","name":"set_extra","children":[],"call":["@extra merge! "," set_extras "]}," Sentry Scope set_extras":{"type":"method","name":"set_extras","children":[],"call":["@extra merge! "," check_argument_type! "]}," Sentry Scope set_user":{"type":"method","name":"set_user","children":[],"call":[" check_argument_type! "]}," Sentry Scope set_rack_env":{"type":"method","name":"set_rack_env","children":[],"call":[]}," Sentry Scope update_from_options":{"type":"method","name":"update_from_options","children":[],"call":[" fingerprint= "," level= "," user= "," tags merge! "," tags "," extra merge! "," extra "," contexts merge! "," contexts "]}," Sentry Scope update_from_scope":{"type":"method","name":"update_from_scope","children":[],"call":[" fingerprint= ","scope fingerprint "," transaction_names= ","scope transaction_names "," user= ","scope user "," tags= ","scope tags "," extra= ","scope extra "," contexts= ","scope contexts "," breadcrumbs= ","scope breadcrumbs "," span= ","scope span "," transaction_sources= ","scope transaction_sources "," propagation_context= ","scope propagation_context "]}," Sentry Scope dup":{"type":"method","name":"dup","children":[],"call":["copy fingerprint= "," fingerprint deep_dup "," fingerprint ","copy transaction_names= "," transaction_names deep_dup "," transaction_names ","copy user= "," user deep_dup "," user ","copy tags= "," tags deep_dup "," tags ","copy extra= "," extra deep_dup "," extra ","copy contexts= "," contexts deep_dup "," contexts ","copy breadcrumbs= "," breadcrumbs dup "," breadcrumbs ","copy span= "," span "," span deep_dup ","copy session= "," session deep_dup "," session ","copy transaction_sources= "," transaction_sources dup "," transaction_sources "," transaction_names dup ","copy propagation_context= "," propagation_context deep_dup "," propagation_context "]}," Sentry Scope clear_breadcrumbs":{"type":"method","name":"clear_breadcrumbs","children":[],"call":["BreadcrumbBuffer  new "," set_new_breadcrumb_buffer "]}," Sentry Scope add_breadcrumb":{"type":"method","name":"add_breadcrumb","children":[],"call":[" breadcrumbs record "," breadcrumbs "]}," Sentry Scope apply_to_event":{"type":"method","name":"apply_to_event","children":[],"call":["processor_block call ","@event_processors each ","@event_processors empty? ","event rack_env= "," rack_env ","event breadcrumbs= "," breadcrumbs ","event transaction= "," transaction_names last "," transaction_names "," level ","event level ","event fingerprint= "," fingerprint ","event contexts= "," contexts merge ","event contexts "," contexts ","event extra= "," extra merge ","event extra "," extra ","event user= "," user merge ","event user "," user ","event tags= "," tags merge ","event tags "," tags ","event contexts []= "," span get_trace_context "," span ","event level= ","all_event_processors each ","all_event_processors empty? "," class global_event_processors + "," class global_event_processors "," class ","event transaction_info= "," transaction_source "," transaction_name "," propagation_context get_dynamic_sampling_context "," propagation_context ","event dynamic_sampling_context "," propagation_context get_trace_context ","event contexts [] ","@processor_block call _processors each ","@processor_block call _processors empty? ","processor_block call  rack_env= ","processor_block call  breadcrumbs= ","processor_block call  transaction= ","processor_block call  level ","processor_block call  fingerprint= ","processor_block call  contexts= ","processor_block call  contexts ","processor_block call  extra= ","processor_block call  extra ","processor_block call  user= ","processor_block call  user ","processor_block call  tags= ","processor_block call  tags ","processor_block call  contexts []= ","processor_block call  level= ","all_processor_block call _processors each "," class global_event_processors +  each ","all_processor_block call _processors empty? "," class global_event_processors +  empty? "," class global_processor_block call _processors + "," class global_processor_block call _processors ","processor_block call  transaction_info= ","processor_block call  dynamic_sampling_context ","processor_block call  contexts [] "]}," Sentry Scope clear":{"type":"method","name":"clear","children":[],"call":[" set_default_value "]}," Sentry Scope initialize":{"type":"method","name":"initialize","children":[],"call":[" set_default_value "]}," Sentry Rack CaptureException collect_exception":{"type":"method","name":"collect_exception","children":[],"call":["env [] "]}," Sentry Rack CaptureException call":{"type":"method","name":"call","children":[],"call":["Sentry  capture_exception "," collect_exception "," raise ","@app call ","scope set_rack_env ","scope set_transaction_name ","env [] ","env []= ","Sentry  get_current_client ","scope clear_breadcrumbs ","Sentry  with_scope ","Sentry  clone_hub_to_current_thread ","Sentry  get_current_hub ","Sentry  capture_ collect_exception  "," collect_ collect_exception  "]}," Sentry Rack CaptureException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Logger initialize":{"type":"method","name":"initialize","children":[],"call":["original_formatter call "," proc "," Logger Formatter  new "," Logger Formatter  new  call "]}," Sentry LineCache getline":{"type":"method","name":"getline","children":[],"call":["lines [] ","n - ","lines nil? "," getlines ","n < "," getlines  [] "," getlines  nil? "," get getlines  "]}," Sentry LineCache getlines":{"type":"method","name":"getlines","children":[],"call":["IO  readlines ","@cache [] "]}," Sentry LineCache valid_path?":{"type":"method","name":"valid_path?","children":[],"call":["lines nil? ! ","lines nil? "," getlines "," getlines  nil? ! "," getlines  nil? "," get getlines  "]}," Sentry LineCache get_file_context":{"type":"method","name":"get_file_context","children":[],"call":["lines [] ","context + ","context - "," getline ","lineno - + ","lineno - ","Array  new ","2 * + ","2 * "," valid_path? "]}," Sentry LineCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry StacktraceInterface Frame longest_load_path":{"type":"method","name":"longest_load_path","children":[],"call":["(send\n  (gvar :$LOAD_PATH) :select) max_by "," abs_path start_with? ","path to_s "," abs_path ","$LOAD_PATH select "]}," Sentry StacktraceInterface Frame under_project_root?":{"type":"method","name":"under_project_root?","children":[],"call":[" abs_path start_with? "," abs_path "]}," Sentry StacktraceInterface Frame to_hash":{"type":"method","name":"to_hash","children":[],"call":["data delete "," context_line empty? ! "," context_line empty? "," context_line "," post_context empty? ! "," post_context empty? "," post_context "," pre_context empty? ! "," pre_context empty? "," pre_context "," vars empty? ! "," vars empty? "," vars ","data []= "," filename "]}," Sentry StacktraceInterface Frame filename":{"type":"method","name":"filename","children":[],"call":[" abs_path "," abs_path [] ","prefix to_s chomp length + ","prefix to_s chomp length ","prefix to_s chomp ","prefix to_s "," longest_load_path "," under_project_root? "," in_app "," instance_variable_defined? "," abs_path nil? "]}," Sentry StacktraceInterface Frame initialize":{"type":"method","name":"initialize","children":[],"call":["line module_name ","line in_app ","line number ","line method ","line file "," compute_filename "]}," Sentry StacktraceInterface to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= ","data [] map ","data [] ","@frames map "]}," Sentry SingleExceptionInterface to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= ","data [] to_hash ","data [] "]}," Sentry RequestInterface format_env_for_sentry":{"type":"method","name":"format_env_for_sentry","children":[],"call":["Sentry  configuration rack_env_whitelist include? ","k to_s ","Sentry  configuration rack_env_whitelist ","Sentry  configuration ","env_hash select ","Sentry  configuration rack_env_whitelist empty? "]}," Sentry RequestInterface format_headers_for_sentry":{"type":"method","name":"format_headers_for_sentry","children":[],"call":["e message ","Sentry  logger warn ","Sentry  logger ","memo []= ","key split map join ","key split map ","key split ","key sub ","(str \"CONTENT_TYPE\") include? ","key start_with? ","key == ","value == ","env_hash [] ","key upcase == ","key upcase "," read_request_id_from ","memo [] ","REQUEST_ID_HEADERS  include? ","value to_s ","key to_s ","env_hash each_with_object ","Utils RequestId  read_from ","Utils RequestId REQUEST_ID_HEADERS  include? ","key split map join  split map join ","key sub  split map join ","key to_s  split map join ","key split map join  split map ","key sub  split map ","key to_s  split map ","key split map join  split ","key sub  split ","key to_s  split ","key split map join  sub ","key sub  sub ","key to_s  sub ","key split map join  start_with? ","key sub  start_with? ","key to_s  start_with? ","key split map join  == ","key sub  == ","key to_s  == ","value to_s  == ","key split map join  upcase == ","key sub  upcase == ","key to_s  upcase == ","key split map join  upcase ","key sub  upcase ","key to_s  upcase ","value to_s  to_s ","key split map join  to_s ","key sub  to_s ","key to_s  to_s "]}," Sentry RequestInterface read_data_from":{"type":"method","name":"read_data_from","children":[],"call":["e message ","request body rewind ","request body ","request body read ","4096 * ","request POST ","request form_data? ","Utils EncodingHelper  encode_to_utf_8 ","data to_s "," encode_to_utf_8 ","request form_request body read ? ","request form_Utils EncodingHelper  encode_to_utf_8 ? ","request form_ encode_to_utf_8 ? ","request body read  to_s ","Utils EncodingHelper  encode_to_utf_8  to_s "," encode_to_utf_8  to_s "]}," Sentry RequestInterface read_request_id_from":{"type":"method","name":"read_request_id_from","children":[],"call":["env_hash [] ","REQUEST_ID_HEADERS  each "]}," Sentry RequestInterface from_rack":{"type":"method","name":"from_rack","children":[],"call":[" env= "," format_env_for_sentry "," headers= "," format_headers_for_sentry "," query_string= ","req query_string "," method= ","req request_method "," url= ","req url split first ","req url split ","req url ","req scheme ","env_hash delete ","IP_HEADERS  each "," cookies= ","req cookies "," data= "," read_data_from ","Sentry  configuration send_default_pii ","Sentry  configuration "," Rack Request  new "," Rack Request  new  query_string "," Rack Request  new   Rack Request  new uest_method "," Rack Request  new  url split first "," Rack Request  new  url split "," Rack Request  new  url "," Rack Request  new  scheme "," Rack Request  new  cookies "]}," Sentry RequestInterface initialize":{"type":"method","name":"initialize","children":[],"call":[" cookies= "," env= "," headers= "," filter_and_format_env "," filter_and_format_headers "," query_string= ","req query_string "," method= ","req request_method "," url= ","req url split first ","req url split ","req url ","req scheme ","req cookies "," data= "," read_data_from ","Sentry  configuration send_default_pii ","Sentry  configuration ","req env ","request request_method ","request url split first ","request url split ","request url ","request scheme ","request query_string ","request cookies "," Rack Request  new ","env delete ","RequestInterface IP_HEADERS  each ","env dup "," req env = "," env dup = "," filter_and_format_req env  "," filter_and_format_env dup  ","req  Rack Request  new _method ","req req env  ","req env dup  "," Rack Request  new   Rack Request  new _method "," Rack Request  new  url split first "," Rack Request  new  url split "," Rack Request  new  url "," Rack Request  new  scheme "," Rack Request  new  query_string "," Rack Request  new  cookies ","req env  delete ","env dup  delete ","req env  dup ","env dup  dup "]}," Sentry ExceptionInterface to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= ","data [] map ","data [] "]}," Sentry Interface to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  [] "," instance_variable_get ","name [] to_sym ","name [] "," instance_variables map "," instance_variables "]}," Sentry Interface registered":{"type":"method","name":"registered","children":[],"call":[]}," Sentry Interface inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Sentry Hub Layer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Hub current_layer":{"type":"method","name":"current_layer","children":[],"call":["@stack last "]}," Sentry Hub add_breadcrumb":{"type":"method","name":"add_breadcrumb","children":[],"call":[" current_scope add_breadcrumb "," current_scope ","before_breadcrumb call "," current_client configuration before_breadcrumb "," current_client configuration "," current_client "," configuration enabled_in_current_env? "," configuration "," current_scope add_before_breadcrumb call  ","before_before_breadcrumb call  call "," current_client configuration before_breadcrumb  call "," current_client configuration before_before_breadcrumb call  "," current_client configuration  current_client configuration before_breadcrumb  "]}," Sentry Hub capture_event":{"type":"method","name":"capture_event","children":[],"call":["event id "," current_client capture_event "," current_client ","scope update_from_options ","options empty? ! ","options empty? ","scope update_from_scope ","options [] ","block call "," current_scope dup "," current_scope ","event event_id ","options delete "," check_argument_type! ","event is_a? "," configuration log_debug ","event to_json_compatible "," configuration "," configuration debug "," current_client capture_event  id "," current_client capture_ current_client capture_event  "," current_scope dup  update_from_options "," current_scope dup  update_from_ current_scope dup  "," current_ current_scope dup  dup "," current_ current_scope dup  "," current_client capture_event   current_client capture_event _id "," current_client capture_event  is_a? "," current_client capture_event  to_json_compatible "]}," Sentry Hub capture_message":{"type":"method","name":"capture_message","children":[],"call":[" capture_event "," current_client event_from_message "," current_client ","options []= ","options [] merge ","options [] ","options [] []= ","options delete "," check_argument_type! "," capture_ current_client event_from_message  "," current_client  current_client event_from_message _from_message "]}," Sentry Hub capture_exception":{"type":"method","name":"capture_exception","children":[],"call":[" capture_event "," current_client event_from_exception "," current_client ","options []= ","options [] merge ","options [] ","options [] []= "," check_argument_type! ","exception instance_variable_set "," capture_event tap ","event exception "," current_scope session "," current_scope ","Sentry  exception_captured? ","RUBY_PLATFORM  == "," capture_ current_client event_from_exception  "," current_client  current_client event_from_exception _from_exception "," capture_ current_client event_from_exception  tap "," current_client event_from_exception  exception "]}," Sentry Hub pop_scope":{"type":"method","name":"pop_scope","children":[],"call":["@stack pop "]}," Sentry Hub push_scope":{"type":"method","name":"push_scope","children":[],"call":["@stack << ","Layer  new "," current_client ","Scope  new "," current_scope dup "," current_scope "]}," Sentry Hub with_scope":{"type":"method","name":"with_scope","children":[],"call":[" pop_scope "," current_scope "," push_scope "]}," Sentry Hub configure_scope":{"type":"method","name":"configure_scope","children":[],"call":["block call "," current_scope "]}," Sentry Hub bind_client":{"type":"method","name":"bind_client","children":[],"call":["layer client= "," current_layer "," current_layer  client= "," current_ current_layer  "]}," Sentry Hub clone":{"type":"method","name":"clone","children":[],"call":["Hub  new ","layer client ","layer scope "," current_layer "," current_layer  client "," current_layer  scope "," current_ current_layer  "]}," Sentry Hub current_scope":{"type":"method","name":"current_scope","children":[],"call":[" current_layer "]}," Sentry Hub current_client":{"type":"method","name":"current_client","children":[],"call":[" current_layer "]}," Sentry Hub new_from_top":{"type":"method","name":"new_from_top","children":[],"call":["Hub  new "," current_scope "," current_client "]}," Sentry Hub initialize":{"type":"method","name":"initialize","children":[],"call":["Layer  new "]}," Sentry Event list_gem_specs":{"type":"method","name":"list_gem_specs","children":[],"call":["Hash  [] ","spec version to_s ","spec version ","spec name ","Gem Specification  map ","Gem Specification  respond_to? "]}," Sentry Event calculate_real_ip_from_rack":{"type":"method","name":"calculate_real_ip_from_rack","children":[],"call":["Utils RealIp  new calculate_ip ","Utils RealIp  new ","env [] "]}," Sentry Event stacktrace_interface_from":{"type":"method","name":"stacktrace_interface_from","children":[],"call":["memo << ","frame filename "," configuration linecache get_file_context "," configuration [] "," configuration ","frame lineno ","frame abs_path "," configuration linecache ","frame post_context= ","frame context_line= ","frame pre_context= ","frame module= ","line module_name ","frame in_app= ","line in_app ","frame lineno= ","line number ","frame function= ","line method ","frame abs_path= ","line file ","StacktraceInterface Frame  new ","Backtrace  parse lines reverse each_with_object ","Backtrace  parse lines reverse ","Backtrace  parse lines ","Backtrace  parse "," configuration project_root to_s "," configuration project_root "," configuration context_lines ","StacktraceInterface Frame  new  filename ","StacktraceInterface Frame  new  lineno ","StacktraceInterface Frame  new  abs_path ","StacktraceInterface Frame  new  post_context= ","StacktraceInterface Frame  new  context_line= ","StacktraceInterface Frame  new  pre_context= ","StacktraceInterface Frame  new  module= ","StacktraceInterface Frame  new  in_app= ","StacktraceInterface Frame  new  lineno= ","StacktraceInterface Frame  new  function= ","StacktraceInterface Frame  new  abs_path= "," configuration  configuration project_root to_s  to_s "," configuration  configuration project_root to_s  "]}," Sentry Event add_exception_interface":{"type":"method","name":"add_exception_interface","children":[],"call":["exc_int values= ","int stacktrace= ","stacktrace frames= "," stacktrace_interface_from ","e backtrace ","StacktraceInterface  new tap ","StacktraceInterface  new ","backtraces << ","e backtrace object_id ","backtraces include? ! ","backtraces include? ","int module= ","e class to_s split [] join ","e class to_s split [] ","e class to_s split ","e class to_s ","e class ","int value= ","e to_s ","int type= ","SingleExceptionInterface  new tap ","SingleExceptionInterface  new ","exceptions map ","Set  new ","Sentry Utils ExceptionCauseChain  exception_to_array reverse ","Sentry Utils ExceptionCauseChain  exception_to_array ","Sentry ExceptionInterface  new tap ","Sentry ExceptionInterface  new ","@extra merge! ","exc sentry_context ","exc respond_to? "," initialize_stacktrace_interface ","Set  new  << ","Set  new  include? ! ","Set  new  include? ","Sentry Utils ExceptionCauseChain  exception_to_array reverse  map "]}," Sentry Event to_json_compatible":{"type":"method","name":"to_json_compatible","children":[],"call":["JSON  parse ","JSON  generate "," to_hash "]}," Sentry Event to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= ","@exception to_hash ","@request to_hash ","@stacktrace to_hash "," breadcrumbs to_hash "," breadcrumbs ","memo []= "," public_send ","ATTRIBUTES  each_with_object "," serialize_attributes "," exception to_hash "," exception "," request to_hash "," request "," stacktrace to_hash "," stacktrace "," serialize_attributes  []= "]}," Sentry Event rack_env=":{"type":"method","name":"rack_env=","children":[],"call":[" user []= "," user "," calculate_real_ip_from_rack ","env dup "," configuration send_default_pii "," configuration ","int from_rack ","Sentry RequestInterface  new tap ","Sentry RequestInterface  new ","env empty? "," tags []= "," tags ","Utils RequestId  read_from "," request "," add_request_interface "," calculate_real_ calculate_real_ip_from_rack _from_rack ","env dup  dup ","env dup  empty? "]}," Sentry Event level=":{"type":"method","name":"level=","children":[],"call":["new_level to_s == ","new_level to_s ","level to_s == ","level to_s "]}," Sentry Event timestamp=":{"type":"method","name":"timestamp=","children":[],"call":["time strftime ","time is_a? ","time to_f "]}," Sentry Event get_message_from_exception":{"type":"method","name":"get_message_from_exception","children":[],"call":["event_hash [] [] [] [] ","event_hash [] [] [] ","event_hash [] [] ","event_hash [] ","exception [] ","event_hash dig ","event_hash dig  [] "]}," Sentry Event get_log_message":{"type":"method","name":"get_log_message","children":[],"call":["message empty? "," get_message_from_exception ","event_hash [] ","message nil? "," get_message_from_exception  empty? "," get_ get_message_from_exception _from_exception "," get_message_from_exception  nil? "]}," Sentry Event initialize":{"type":"method","name":"initialize","children":[],"call":["int frames= "," stacktrace_interface_from ","options backtrace ","Sentry StacktraceInterface  new tap ","Sentry StacktraceInterface  new ","options backtrace empty? ! ","options backtrace empty? "," level= ","options level ","options message "," list_gem_specs ","configuration send_modules ","configuration release ","options release ","configuration current_environment ","options environment ","configuration server_name ","options server_name ","options fingerprint ","configuration tags merge ","options tags ","configuration tags ","options contexts ","options extra ","options user ","Sentry  sdk_meta ","Time  now utc ","Time  now ","SecureRandom  uuid delete ","SecureRandom  uuid ","configuration gem_specs ","Sentry  utc_now iso8601 ","Sentry  utc_now ","configuration environment ","(or\n  (lvar :message)\n  (str \"\")) byteslice ","configuration rack_env_whitelist ","configuration stacktrace_builder ","configuration trusted_proxies ","configuration send_default_pii "," class "]}," Sentry Event Options initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry DSN envelope_endpoint":{"type":"method","name":"envelope_endpoint","children":[],"call":[" project_id "," path "]}," Sentry DSN server":{"type":"method","name":"server","children":[],"call":[" path "," port "," port == ","(pair\n  (str \"http\")\n  (int 80)) [] "," scheme "," host ","PORT_MAP  [] "]}," Sentry DSN to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Sentry DSN valid?":{"type":"method","name":"valid?","children":[],"call":[" public_send ","(str \"host\") all? ","REQUIRED_ATTRIBUTES  all? "]}," Sentry DSN initialize":{"type":"method","name":"initialize","children":[],"call":["uri_path join ","uri port ","uri host ","uri scheme ","uri password ","(or\n  (send\n    (send\n      (lvar :uri) :password) :nil?)\n  (send\n    (send\n      (lvar :uri) :password) :empty?)) ! ","uri password empty? ","uri password nil? ","uri user ","uri_path pop ","uri path split ","uri path ","URI  parse ","uri path split  join ","URI  parse _path join ","URI  parse  port ","URI  parse  host ","URI  parse  scheme ","URI  parse  password ","(or\n  (send\n    (send\n      (lvar :URI  parse ) :password) :nil?)\n  (send\n    (send\n      (lvar :URI  parse ) :password) :empty?)) ! ","URI  parse  password empty? ","URI  parse  password nil? ","URI  parse  user ","uri path split  pop ","URI  parse _path pop ","URI  parse  path split ","URI  parse  path "]}," Rational duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Complex duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Method duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," BigDecimal duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Numeric duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Symbol duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," TrueClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," FalseClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," NilClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Object duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Hash deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["hash []= ","value deep_dup ","key deep_dup ","hash delete "," String  === ","key frozen? "," each_pair "," dup "," dup  []= "," dup  delete "]}," Array deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" map "]}," Object deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" dup "," duplicable? "]}," Sentry Configuration post_initialization_callback":{"type":"method","name":"post_initialization_callback","children":[],"call":[]}," Sentry Configuration server_name_from_env":{"type":"method","name":"server_name_from_env","children":[],"call":[" resolve_hostname ","ENV  [] "," running_on_heroku? "," server_name ","Socket  gethostbyname first ","Socket  gethostbyname "," hostname ","Socket  gethostname "]}," Sentry Configuration current_environment_from_env":{"type":"method","name":"current_environment_from_env","children":[],"call":["ENV  [] "]}," Sentry Configuration resolve_hostname":{"type":"method","name":"resolve_hostname","children":[],"call":[" server_name ","Socket  gethostbyname first ","Socket  gethostbyname "," hostname ","Socket  gethostname "]}," Sentry Configuration sample_allowed?":{"type":"method","name":"sample_allowed?","children":[],"call":["@errors << ","Random DEFAULT  rand >= "," sample_rate ","Random DEFAULT  rand "," sample_rate == ","Random  rand < ","Random  rand "]}," Sentry Configuration valid?":{"type":"method","name":"valid?","children":[],"call":["@errors << "]}," Sentry Configuration capture_allowed_by_callback?":{"type":"method","name":"capture_allowed_by_callback?","children":[],"call":["@errors << "," should_capture call "," should_capture ","message_or_exc nil? "," should_capture ! "]}," Sentry Configuration capture_in_current_environment?":{"type":"method","name":"capture_in_current_environment?","children":[],"call":["@errors << "," current_environment "," enabled_in_current_env? "]}," Sentry Configuration detect_release_from_env":{"type":"method","name":"detect_release_from_env","children":[],"call":["ENV  [] "]}," Sentry Configuration detect_release_from_git":{"type":"method","name":"detect_release_from_git","children":[],"call":["Sentry  sys_command ","File  directory? "]}," Sentry Configuration detect_release_from_capistrano":{"type":"method","name":"detect_release_from_capistrano","children":[],"call":["File  open to_a last strip sub ","File  open to_a last strip ","File  open to_a last ","File  open to_a ","File  open ","File  exist? ","File  read strip ","File  read ","File  join "," project_root "]}," Sentry Configuration running_on_heroku?":{"type":"method","name":"running_on_heroku?","children":[],"call":["File  directory? ","ENV  [] ! ","ENV  [] "]}," Sentry Configuration detect_release_from_heroku":{"type":"method","name":"detect_release_from_heroku","children":[],"call":["ENV  [] "," logger warn "," logger "," running_on_heroku? "]}," Sentry Configuration qualified_const_get":{"type":"method","name":"qualified_const_get","children":[],"call":["a const_get ","x split reject inject ","x split reject ","x split ","Object  const_get ","x match ! ","x match ","x to_s ","x to_s  split reject inject ","x to_s  split reject ","x to_s  split ","x to_s  match ! ","x to_s  match ","x to_s  to_s "]}," Sentry Configuration matches_exception?":{"type":"method","name":"matches_exception?","children":[],"call":["excluded_exception_class === ","Sentry Utils ExceptionCauseChain  exception_to_array any? ","Sentry Utils ExceptionCauseChain  exception_to_array "," inspect_exception_causes_for_exclusion? "]}," Sentry Configuration get_exception_class":{"type":"method","name":"get_exception_class","children":[],"call":[" qualified_const_get ","x is_a? "," safe_const_get "]}," Sentry Configuration excluded_exception?":{"type":"method","name":"excluded_exception?","children":[],"call":[" matches_exception? "," get_exception_class "," excluded_exceptions any? "," excluded_exceptions "," excluded_exception_classes any? "," excluded_exception_classes "]}," Sentry Configuration detect_release":{"type":"method","name":"detect_release","children":[],"call":["e message "," logger error "," logger "," detect_release_from_heroku "," detect_release_from_capistrano "," detect_release_from_git "," detect_release_from_env "," log_error "," debug "," log_warn "," release nil? "," release "," running_on_heroku? ","ReleaseDetector  detect_release "," project_root "," sending_allowed? "]}," Sentry Configuration detect_project_root":{"type":"method","name":"detect_project_root","children":[],"call":["Dir  pwd ","Rails  root to_s ","Rails  root "]}," Sentry Configuration enabled_in_current_env?":{"type":"method","name":"enabled_in_current_env?","children":[],"call":[" environments include? "," current_environment "," environments "," environments empty? "," enabled_environments include? "," environment "," enabled_environments "," enabled_environments empty? "]}," Sentry Configuration exception_class_allowed?":{"type":"method","name":"exception_class_allowed?","children":[],"call":["exc inspect "," logger debug "," logger "," excluded_exception? ","exc is_a? "," log_debug "]}," Sentry Configuration project_root=":{"type":"method","name":"project_root=","children":[],"call":[]}," Sentry Configuration error_messages":{"type":"method","name":"error_messages","children":[],"call":[" errors join "," errors ","(send\n  (send nil :errors) :[]\n  (int 0)) + "," errors [] map "," errors [] ","@errors join ","(send\n  (ivar :@errors) :[]\n  (int 0)) + ","@errors [] map ","@errors [] ","(send\n  (send nil :errors) :[]\n  (int 0)) +  join ","(send\n  (ivar :@errors) :[]\n  (int 0)) +  join ","(send\n  (ivar :(send\n  (send nil :errors) :[]\n  (int 0)) + ) :[]\n  (int 0)) + ","(send\n  (ivar :(send\n  (ivar :@errors) :[]\n  (int 0)) + ) :[]\n  (int 0)) + ","(send\n  (send nil :errors) :[]\n  (int 0)) +  [] map ","(send\n  (ivar :@errors) :[]\n  (int 0)) +  [] map ","(send\n  (send nil :errors) :[]\n  (int 0)) +  [] ","(send\n  (ivar :@errors) :[]\n  (int 0)) +  [] "]}," Sentry Configuration capture_allowed?":{"type":"method","name":"capture_allowed?","children":[],"call":[" sample_allowed? "," capture_allowed_by_callback? "," capture_in_current_environment? "," valid? "]}," Sentry Configuration current_environment=":{"type":"method","name":"current_environment=","children":[],"call":["environment to_s "]}," Sentry Configuration []":{"type":"method","name":"[]","children":[],"call":[" public_send "]}," Sentry Configuration before_send=":{"type":"method","name":"before_send=","children":[],"call":[" raise ","value respond_to? ","value == "," check_callable! "]}," Sentry Configuration should_capture=":{"type":"method","name":"should_capture=","children":[],"call":[" raise ","value respond_to? ","value == "]}," Sentry Configuration breadcrumbs_logger=":{"type":"method","name":"breadcrumbs_logger=","children":[],"call":[" require ","loggers include? "," Array "," raise ","AVAILABLE_BREADCRUMBS_LOGGERS  include? ","logger is_a? "," Array  include? "]}," Sentry Configuration async=":{"type":"method","name":"async=","children":[],"call":[" raise ","value respond_to? ","value == ","value respond_to? ! "," log_warn "," check_callable! "]}," Sentry Configuration dsn=":{"type":"method","name":"dsn=","children":[],"call":["DSN  new ","value empty? ","value nil? "," init_dsn "]}," Sentry Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" post_initialization_callback "," rack_env_whitelist= "," before_send= ","Transport Configuration  new "," tags= "," should_capture= "," server_name= "," server_name_from_env "," dsn= ","ENV  [] "," send_default_pii= "," send_modules= "," sample_rate= "," release= "," detect_release "," project_root= "," detect_project_root "," logger= "," Sentry Logger  new "," linecache= "," Sentry LineCache  new "," inspect_exception_causes_for_exclusion= "," excluded_exceptions= ","IGNORE_DEFAULT  dup "," exclude_loggers= "," environments= "," current_environment= "," current_environment_from_env "," context_lines= "," breadcrumbs_logger= "," async= ","Hash  [] ","spec version to_s ","spec version ","spec name ","Gem Specification  map ","Gem Specification  respond_to? "," enabled_environments= "," environment= "," environment_from_env "," background_worker_threads= ","Concurrent  processor_count "," run_post_initialization_callbacks "," enable_tracing= "," traces_sampler= "," before_send_transaction= "," instrumenter= "," trusted_proxies= "," auto_session_tracking= "," send_client_reports= "," skip_rake_integration= "," propagate_traces= ","Dir  pwd ","IGNORE_DEFAULT  + "," include_local_variables= "," max_breadcrumbs= "," backtrace_cleanup_callback= "," debug= "," app_dirs_pattern= "," trace_propagation_targets= "," enabled_patches= ","DEFAULT_PATCHES  dup "," spotlight= "," traces_sample_rate= "," capture_exception_frame_locals= "]}," Sentry Client send_event":{"type":"method","name":"send_event","children":[],"call":[" transport send_event "," transport "," configuration logger info "," configuration logger "," configuration ","event nil? "," configuration before_send call "," configuration before_send "," configuration sending_allowed? ","event_type == ","event [] ","event type ","event is_a? "," raise "," transport record_lost_event "," log_info ","Event  get_log_message ","event to_hash "," log_error "," configuration debug ","event_type capitalize "," configuration before_send_transaction call "," configuration before_send_transaction ","event_type != "," spotlight_transport "," transport send_ configuration before_send call  "," transport send_ configuration before_send_transaction call  "," configuration before_send call  nil? "," configuration before_send_transaction call  nil? "," configuration before_send call _type == "," configuration before_send_transaction call _type == ","event []  == ","event type  == "," configuration before_send call  [] "," configuration before_send_transaction call  [] "," configuration before_send call  type "," configuration before_send_transaction call  type "," configuration before_send call  is_a? "," configuration before_send_transaction call  is_a? "," transport record_lost_ configuration before_send call  "," transport record_lost_ configuration before_send_transaction call  "," configuration before_send call  to_hash "," configuration before_send_transaction call  to_hash "," configuration before_send call _type capitalize "," configuration before_send_transaction call _type capitalize ","event []  capitalize ","event type  capitalize "," configuration before_send call _type != "," configuration before_send_transaction call _type != ","event []  != ","event type  != "]}," Sentry Client event_from_message":{"type":"method","name":"event_from_message","children":[],"call":["Event  new "," configuration ","Event Options  new ","options merge! ","Sentry  integrations [] ","hint [] ","Sentry  integrations ","event level= ","event add_threads_interface "," caller ","ErrorEvent  new ","@configuration sending_allowed? ","Event Options  new  merge! ","ErrorEvent  new  level= ","ErrorEvent  new  add_threads_interface "]}," Sentry Client event_from_exception":{"type":"method","name":"event_from_exception","children":[],"call":["event add_exception_interface ","Event  new tap ","Event  new "," configuration ","Event Options  new ","@configuration exception_class_allowed? ","Utils DeepMergeHash  deep_merge ","exception sentry_context ","exception respond_to? ","exception instance_variable_get ","exception instance_variable_defined? ","Sentry  integrations [] ","hint [] ","Sentry  integrations ","event level= ","event add_threads_interface ","ErrorEvent  new tap ","ErrorEvent  new ","@configuration exception_class_allowed? ! ","ignore_exclusions ! ","hint delete ","@configuration sending_allowed? "]}," Sentry Client capture_event":{"type":"method","name":"capture_event","children":[],"call":[" send_event ","scope apply_to_event ","e message "," configuration logger error "," configuration logger "," configuration "," configuration async call ","event to_json_compatible "," configuration async "," configuration async? ","Sentry  background_worker perform ","Sentry  background_worker ","hint fetch "," configuration sending_allowed? ","async_block call ","async_block arity == ","async_block arity "," log_error "," configuration debug "," transport record_lost_event "," transport "," dispatch_background_event "," configuration background_worker_threads != "," configuration background_worker_threads "," dispatch_async_event "," log_info ","event nil? ","event [] ","event type ","event is_a? "," configuration sample_allowed? "," send_scope apply_to_event  ","scope apply_to_scope apply_to_event  ","scope apply_to_event  to_json_compatible "," configuration async  call "," configuration async  arity == "," configuration async  arity "," transport record_lost_scope apply_to_event  "," dispatch_background_scope apply_to_event  "," dispatch_async_scope apply_to_event  ","scope apply_to_event  nil? ","scope apply_to_event  [] ","scope apply_to_event  type ","scope apply_to_event  is_a? "]}," Sentry Client capture_message":{"type":"method","name":"capture_message","children":[],"call":[" capture_event ","block call "," event_from_message "," capture_ event_from_message  ","  event_from_message _from_message "]}," Sentry Client capture_exception":{"type":"method","name":"capture_exception","children":[],"call":[" capture_event ","block call "," event_from_exception "," capture_ event_from_exception  ","  event_from_exception _from_exception "]}," Sentry Client initialize":{"type":"method","name":"initialize","children":[],"call":["DummyTransport  new ","HTTPTransport  new ","configuration dsn ","transport_class new ","configuration transport transport_class ","configuration transport ","configuration logger ","SpotlightTransport  new ","configuration spotlight ","configuration transport transport_class  new ","configuration transport configuration transport transport_class  "]}," Sentry BreadcrumbBuffer dup":{"type":"method","name":"dup","children":[],"call":["copy buffer= "," buffer deep_dup "," buffer "]}," Sentry BreadcrumbBuffer to_hash":{"type":"method","name":"to_hash","children":[],"call":[" members map "," members "]}," Sentry BreadcrumbBuffer empty?":{"type":"method","name":"empty?","children":[],"call":[" members none? "," members "]}," Sentry BreadcrumbBuffer each":{"type":"method","name":"each","children":[],"call":[" members each "," members "]}," Sentry BreadcrumbBuffer peek":{"type":"method","name":"peek","children":[],"call":[" members last "," members "]}," Sentry BreadcrumbBuffer members":{"type":"method","name":"members","children":[],"call":["@buffer compact "]}," Sentry BreadcrumbBuffer record":{"type":"method","name":"record","children":[],"call":["@buffer << ","@buffer slice! ","Breadcrumb  new ","crumb nil? "," block_given? ","BreadBreadcrumb  new   new ","Breadcrumb  new  nil? "]}," Sentry BreadcrumbBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Sentry Breadcrumb to_hash":{"type":"method","name":"to_hash","children":[],"call":[" serialized_data "]}," Sentry Breadcrumb initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now to_i ","Time  now ","Sentry  utc_now to_i ","Sentry  utc_now "," message= "," level= "]}," Sentry Breadcrumb OldBreadcrumbsSentryLogger add_with_sentry":{"type":"method","name":"add_with_sentry","children":[],"call":[" add_without_sentry "," add_breadcrumb "]}," Sentry Breadcrumb OldBreadcrumbsSentryLogger included":{"type":"method","name":"included","children":[],"call":[]}," Sentry Breadcrumb SentryLogger current_breadcrumbs":{"type":"method","name":"current_breadcrumbs","children":[],"call":["Sentry  breadcrumbs ","Sentry  get_current_scope breadcrumbs ","Sentry  get_current_scope "]}," Sentry Breadcrumb SentryLogger ignored_logger?":{"type":"method","name":"ignored_logger?","children":[],"call":["Sentry  configuration exclude_loggers include? ","Sentry  configuration exclude_loggers ","Sentry  configuration ","progname == "]}," Sentry Breadcrumb SentryLogger add_breadcrumb":{"type":"method","name":"add_breadcrumb","children":[],"call":["crumb type= ","crumb level ","severity >= ","crumb message= ","crumb category= ","crumb level= ","Sentry Breadcrumb SentryLogger LEVELS  fetch "," current_breadcrumbs record "," current_breadcrumbs ","last_crumb message != ","last_crumb message ","last_crumb nil? "," current_breadcrumbs peek ","message to_s strip ","message to_s ","message empty? "," ignored_logger? "," block_given? ","message nil? ","Sentry  get_current_hub ","Sentry  add_breadcrumb ","Sentry Breadcrumb  new ","message == ","Sentry  initialized? ","Sentry Breadcrumb  new  type= ","Sentry Breadcrumb  new  level ","crumb Sentry Breadcrumb SentryLogger LEVELS  fetch  ","crumb message to_s strip = ","Sentry Breadcrumb  new  message= ","Sentry Breadcrumb  new  category= ","Sentry Breadcrumb  new  level= ","crumb Sentry Breadcrumb SentryLogger LEVELS  fetch = ","Sentry BreadSentry Breadcrumb  new  SentryLogger LEVELS  fetch "," current_breadSentry Breadcrumb  new s record "," current_breadSentry Breadcrumb  new s "," current_breadcrumbs peek  message != ","last_crumb message to_s strip  != ","last_Sentry Breadcrumb  new  message != "," current_breadcrumbs peek  message ","last_crumb message to_s strip  ","last_Sentry Breadcrumb  new  message "," current_breadcrumbs peek  nil? ","last_Sentry Breadcrumb  new  nil? "," current_breadSentry Breadcrumb  new s peek ","message to_s strip  to_s strip ","message to_s strip  to_s ","message to_s strip  empty? ","message to_s strip  nil? ","Sentry  add_breadSentry Breadcrumb  new  ","Sentry BreadSentry Breadcrumb  new   new ","message to_s strip  == "]}," Sentry Breadcrumb SentryLogger add":{"type":"method","name":"add","children":[],"call":[" add_breadcrumb "]}," Sentry Backtrace ==":{"type":"method","name":"==","children":[],"call":[" lines == ","other lines "," lines ","other respond_to? "]}," Sentry Backtrace to_s":{"type":"method","name":"to_s","children":[],"call":["content join ","content << "," lines each "," lines "]}," Sentry Backtrace inspect":{"type":"method","name":"inspect","children":[],"call":["<Backtrace:  + + ","<Backtrace:  + "," lines map join "," lines map "," lines "]}," Sentry Backtrace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Backtrace parse":{"type":"method","name":"parse","children":[],"call":[]}," Sentry Backtrace Line inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Sentry Backtrace Line ==":{"type":"method","name":"==","children":[],"call":[" to_s == ","other to_s "," to_s "]}," Sentry Backtrace Line to_s":{"type":"method","name":"to_s","children":[],"call":[" method "," number "," file "]}," Sentry Backtrace Line in_app":{"type":"method","name":"in_app","children":[],"call":[" file =~ "," in_app_pattern "," file "]}," Sentry Backtrace Line initialize":{"type":"method","name":"initialize","children":[],"call":["number to_i "]}," Sentry Backtrace Line parse":{"type":"method","name":"parse","children":[],"call":[]}," Sentry send_event":{"type":"method","name":"send_event","children":[],"call":[" get_current_client send_event "," get_current_client "," initialized? "]}," Sentry start_transaction":{"type":"method","name":"start_transaction","children":[],"call":[" get_current_hub start_transaction "," get_current_hub "," initialized? "]}," Sentry utc_now":{"type":"method","name":"utc_now","children":[],"call":["Time  now utc ","Time  now "]}," Sentry TransactionEvent to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= ","@spans map "]}," Sentry TransactionEvent type":{"type":"method","name":"type","children":[],"call":[]}," Sentry TransactionEvent start_timestamp=":{"type":"method","name":"start_timestamp=","children":[],"call":["time to_f ","time is_a? "]}," Sentry Transaction generate_transaction_description":{"type":"method","name":"generate_transaction_description","children":[],"call":[" op nil? "," op "]}," Sentry Transaction finish":{"type":"method","name":"finish","children":[],"call":["hub capture_event ","hub current_client event_from_transaction ","hub current_client ","Sentry  get_current_hub ","@name nil? ","hub current_client transport record_lost_event ","hub current_client transport ","@profiler stop "," log_warn ","hub capture_hub current_client event_from_transaction  ","hub current_client hub current_client event_from_transaction _from_transaction ","hub current_client transport record_lost_hub current_client event_from_transaction  "]}," Sentry Transaction set_initial_sample_desicion":{"type":"method","name":"set_initial_sample_desicion","children":[],"call":["logger debug ","Random  rand < ","Random  rand ","sample_rate == ","logger warn ","sample_rate <= ","sample_rate >= ","sample_rate is_a? ","(true) include? ","traces_sampler call ","sampling_context merge "," to_hash ","traces_sampler is_a? ","Sentry  configuration traces_sampler ","Sentry  configuration ","Sentry  configuration traces_sample_rate ","Sentry  configuration logger "," generate_transaction_description ","@sampled nil? ","Sentry  configuration tracing_enabled? ","Sentry  configuration logger  debug ","traces_sampler call  == ","Sentry  configuration traces_sample_rate  == ","Sentry  configuration logger  warn ","traces_sampler call  <= ","Sentry  configuration traces_sample_rate  <= ","traces_sampler call  >= ","Sentry  configuration traces_sample_rate  >= ","traces_sampler call  is_a? ","Sentry  configuration traces_sample_rate  is_a? ","Sentry  configuration traces_sampler  call ","sampling_context merge  merge ","Sentry  configuration traces_sampler  is_a? ","Sentry  configuration Sentry  configuration traces_sampler  ","Sentry  configuration traces_traces_sampler call  ","Sentry  configuration traces_Sentry  configuration traces_sample_rate  ","Sentry  configuration Sentry  configuration logger  "," generate_ generate_transaction_description  ","Random  rand <  nil? "]}," Sentry Transaction to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash merge! "]}," Sentry Transaction from_sentry_trace":{"type":"method","name":"from_sentry_trace","children":[],"call":["Sentry  get_current_hub "]}," Sentry Transaction initialize":{"type":"method","name":"initialize","children":[],"call":[" set_span_recorder "," init_span_recorder ","Profiler  new ","hub configuration dsn ","hub configuration ","hub configuration environment ","hub configuration release ","hub configuration logger ","hub configuration traces_sample_rate ","hub configuration traces_sampler ","hub configuration tracing_enabled? "," set_name ","source to_sym ","SOURCES  include? "]}," Sentry Span SpanRecorder add":{"type":"method","name":"add","children":[],"call":["@spans << ","@spans count < ","@spans count "]}," Sentry Span SpanRecorder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Span set_tag":{"type":"method","name":"set_tag","children":[],"call":["@tags []= "]}," Sentry Span set_data":{"type":"method","name":"set_data","children":[],"call":["@data []= "]}," Sentry Span set_http_status":{"type":"method","name":"set_http_status","children":[],"call":[" set_status ","STATUS_MAP  [] ","status_code < ","status_code >= "," set_data ","status_code to_i "," set_STATUS_MAP  []  ","STATUS_MAP  [] _code < ","status_code to_i  < ","STATUS_MAP  [] _code >= ","status_code to_i  >= ","STATUS_MAP  [] _code to_i ","status_code to_i  to_i "]}," Sentry Span set_timestamp":{"type":"method","name":"set_timestamp","children":[],"call":[]}," Sentry Span set_status":{"type":"method","name":"set_status","children":[],"call":[]}," Sentry Span set_description":{"type":"method","name":"set_description","children":[],"call":[]}," Sentry Span set_op":{"type":"method","name":"set_op","children":[],"call":[]}," Sentry Span start_child":{"type":"method","name":"start_child","children":[],"call":["@span_recorder add ","child_span span_recorder= ","Span  new ","options dup merge ","options dup "," span_recorder add "," span_recorder ","new_span span_recorder= ","attributes dup merge ","attributes dup ","new_span transaction= "," transaction ","Span  new  span_recorder= ","options dup merge  dup merge ","options dup merge  dup ","attributes dup merge  dup merge ","attributes dup merge  dup ","Span  new  transaction= "]}," Sentry Span get_trace_context":{"type":"method","name":"get_trace_context","children":[],"call":[]}," Sentry Span to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," Sentry Span to_sentry_trace":{"type":"method","name":"to_sentry_trace","children":[],"call":["@sampled nil? "]}," Sentry Span finish":{"type":"method","name":"finish","children":[],"call":["Sentry  utc_now to_f ","Sentry  utc_now "]}," Sentry Span set_span_recorder":{"type":"method","name":"set_span_recorder","children":[],"call":["@span_recorder add ","SpanRecorder  new ","SpanRecorder  new  add "]}," Sentry Span initialize":{"type":"method","name":"initialize","children":[],"call":["Sentry  utc_now to_f ","Sentry  utc_now ","SecureRandom  hex ","SecureRandom  uuid delete ","SecureRandom  uuid ","SecureRandom  uuid delete slice "]}," Sentry Scope get_span":{"type":"method","name":"get_span","children":[],"call":[" span "]}," Sentry Scope get_transaction":{"type":"method","name":"get_transaction","children":[],"call":[" span span_recorder spans first "," span span_recorder spans "," span span_recorder "," span "," span transaction "]}," Sentry Scope set_span":{"type":"method","name":"set_span","children":[],"call":[" check_argument_type! "]}," Sentry Rack Tracing finish_span":{"type":"method","name":"finish_span","children":[],"call":["span finish ","span set_http_status "]}," Sentry Rack Tracing call":{"type":"method","name":"call","children":[],"call":[" finish_span ","response [] "," raise ","@app call ","scope set_span ","Sentry  start_transaction ","scope transaction_name ","scope set_transaction_name ","env [] ","scope clear_breadcrumbs ","Sentry  with_scope ","Sentry  configuration traces_sample_rate to_f == ","Sentry  configuration traces_sample_rate to_f ","Sentry  configuration traces_sample_rate ","Sentry  configuration ","Sentry  clone_hub_to_current_thread ","Sentry  get_current_hub "," finish_Sentry  start_transaction  ","@app call  [] ","scope set_Sentry  start_transaction  "]}," Sentry Rack Tracing initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Hub start_transaction":{"type":"method","name":"start_transaction","children":[],"call":["transaction set_initial_sample_desicion ","Transaction  new ","transaction start_profiler! ","transaction set_initial_sample_decision ","sampling_context merge! ","transaction parent_sampled ","transaction to_hash ","options merge ","instrumenter == "," configuration instrumenter "," configuration "," configuration tracing_enabled? "]}," Sentry Event serialize_attributes":{"type":"method","name":"serialize_attributes","children":[],"call":["memo []= "," public_send "," class ATTRIBUTES  each_with_object "," class "," class SERIALIZEABLE_ATTRIBUTES  each_with_object "]}," Sentry Event type":{"type":"method","name":"type","children":[],"call":[]}," Sentry Configuration safe_const_get":{"type":"method","name":"safe_const_get","children":[],"call":["Object  const_get ","x to_s ","x is_a? ","x to_s  to_s ","x to_s  is_a? "]}," Sentry Configuration excluded_exception_classes":{"type":"method","name":"excluded_exception_classes","children":[],"call":[" get_exception_class "," excluded_exceptions map "," excluded_exceptions "]}," Sentry Configuration tracing_enabled?":{"type":"method","name":"tracing_enabled?","children":[],"call":["(or\n  (begin\n    (and\n      (ivar :@traces_sample_rate)\n      (send\n        (ivar :@traces_sample_rate) :>\n        (float 0.0))))\n  (ivar :@traces_sampler)) ! ! ","(or\n  (begin\n    (and\n      (ivar :@traces_sample_rate)\n      (send\n        (ivar :@traces_sample_rate) :>\n        (float 0.0))))\n  (ivar :@traces_sampler)) ! ","@traces_sample_rate > "," sending_allowed? ","@enable_tracing != ","(or\n  (begin\n    (send nil :valid_sample_rate?\n      (ivar :@traces_sample_rate)))\n  (ivar :@traces_sampler)) ! ! ","(or\n  (begin\n    (send nil :valid_sample_rate?\n      (ivar :@traces_sample_rate)))\n  (ivar :@traces_sampler)) ! "," valid_sample_rate? ","(or\n  (begin\n    (and\n      (and\n        (ivar :@traces_sample_rate)\n        (send\n          (ivar :@traces_sample_rate) :>=\n          (float 0.0)))\n      (send\n        (ivar :@traces_sample_rate) :<=\n        (float 1.0))))\n  (ivar :@traces_sampler)) ! ! ","(or\n  (begin\n    (and\n      (and\n        (ivar :@traces_sample_rate)\n        (send\n          (ivar :@traces_sample_rate) :>=\n          (float 0.0)))\n      (send\n        (ivar :@traces_sample_rate) :<=\n        (float 1.0))))\n  (ivar :@traces_sampler)) ! ","@traces_sample_rate <= ","@traces_sample_rate >= "]}," Sentry Client event_from_transaction":{"type":"method","name":"event_from_transaction","children":[],"call":["event spans= ","finished_spans map ","span != ","span timestamp ","transaction span_recorder spans select ","transaction span_recorder spans ","transaction span_recorder ","event start_timestamp= ","transaction start_timestamp ","event timestamp= ","transaction timestamp ","event contexts merge! ","transaction get_trace_context ","event contexts ","event transaction= ","transaction name ","TransactionEvent  new tap ","TransactionEvent  new "," configuration ","event tags= ","transaction tags "]}," Sentry BenchmarkTransport send_event":{"type":"method","name":"send_event","children":[],"call":["@events << "," encode ","event to_hash "]}," Sentry BenchmarkTransport initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry add_breadcrumb":{"type":"method","name":"add_breadcrumb","children":[],"call":[" get_current_scope breadcrumbs record "," get_current_scope breadcrumbs "," get_current_scope "," get_current_hub add_breadcrumb "," get_current_hub "," initialized? "]}," Sentry Utils RequestId read_from":{"type":"method","name":"read_from","children":[],"call":[]}," Sentry Span with_child_span":{"type":"method","name":"with_child_span","children":[],"call":["child_span finish "," start_child "," raise ","child_span set_http_status "," start_child  finish "," start_child  set_http_status "]}," Sentry Configuration environment_from_env":{"type":"method","name":"environment_from_env","children":[],"call":["ENV  [] "]}," Sentry Configuration capture_in_environment?":{"type":"method","name":"capture_in_environment?","children":[],"call":["@errors << "," environment "," enabled_in_current_env? "]}," Sentry Configuration sending_allowed?":{"type":"method","name":"sending_allowed?","children":[],"call":[" sample_allowed? "," capture_in_environment? "," valid? "," spotlight "]}," Sentry Configuration environment=":{"type":"method","name":"environment=","children":[],"call":["environment to_s "]}," safely_require":{"type":"method","name":"safely_require","children":[],"call":[" require "]}," Rake Application display_error_message":{"type":"method","name":"display_error_message","children":[],"call":[" orig_display_error_messsage ","scope set_tag ","scope set_transaction_name "," top_level_tasks join "," top_level_tasks ","Sentry  capture_exception ","Sentry  initialized? "]}," Sentry initialized?":{"type":"method","name":"initialized?","children":[],"call":["@main_hub ! ! ","@main_hub ! "," get_main_hub ! ! "," get_main_hub ! "," get_main_hub "]}," Sentry Transaction SpanRecorder add":{"type":"method","name":"add","children":[],"call":["@spans << ","@spans count < ","@spans count "]}," Sentry Transaction SpanRecorder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Transaction deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["copy span_recorder add ","span dup ","copy span_recorder ","span == ","@span_recorder spans each ","@span_recorder spans ","copy set_span_recorder ","copy init_span_recorder ","@span_recorder max_length "]}," Sentry Transaction start_child":{"type":"method","name":"start_child","children":[],"call":["@span_recorder add ","child_span span_recorder= "]}," Sentry Transaction set_span_recorder":{"type":"method","name":"set_span_recorder","children":[],"call":["@span_recorder add ","SpanRecorder  new ","SpanRecorder  new  add "]}," Sentry Span deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" dup "]}," Sentry Rack CaptureExceptions finish_span":{"type":"method","name":"finish_span","children":[],"call":["span finish ","span set_http_status "]}," Sentry Rack CaptureExceptions collect_exception":{"type":"method","name":"collect_exception","children":[],"call":["env [] "]}," Sentry Rack CaptureExceptions call":{"type":"method","name":"call","children":[],"call":[" finish_span ","response [] ","Sentry  capture_exception "," collect_exception "," raise ","@app call ","scope set_span ","Sentry  start_transaction ","scope transaction_name ","scope set_rack_env ","scope set_transaction_name ","env [] ","scope clear_breadcrumbs ","Sentry  with_scope ","Sentry  clone_hub_to_current_thread ","Sentry  initialized? "," capture_exception "," transaction_op ","Sentry Transaction  from_sentry_trace "," finish_transaction "," start_transaction ","Sentry  with_session_tracking "," finish_Sentry  start_transaction  "," finish_Sentry Transaction  from_sentry_trace  ","@app call  [] ","Sentry  capture_ collect_exception  "," collect_ collect_exception  ","scope set_Sentry  start_transaction  ","scope set_Sentry Transaction  from_sentry_trace  ","Sentry  start_ start_transaction  ","scope  start_transaction _name ","scope set_ start_transaction _name "," capture_ collect_exception  ","  start_transaction _op ","Sentry Transaction  from_env []  "," finish_ start_transaction  "," start_ start_transaction  "]}," Sentry Rack CaptureExceptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry BackgroundWorker perform":{"type":"method","name":"perform","children":[],"call":["block call ","@executor post "," log_error "," _perform "]}," Sentry BackgroundWorker initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent ThreadPoolExecutor  new ","configuration logger debug ","configuration logger ","Concurrent ImmediateExecutor  new ","@number_of_threads == ","configuration async? ","configuration background_worker_threads ","configuration async ","executor wait_for_termination ","executor shutdown "," proc "," log_debug ","configuration debug ","configuration background_worker_threads  == ","Concurrent ThreadPoolExecutor  new  wait_for_termination ","Concurrent ThreadPoolExecutor  new  shutdown "]}," Sentry Rack DeprecatedMiddleware initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Sentry Error  new "," class "]}," Sentry register_integration":{"type":"method","name":"register_integration","children":[],"call":[" integrations []= ","name to_s "," integrations ","(pair\n  (sym :name)\n  (dstr\n    (str \"sentry.ruby.\")\n    (begin\n      (lvar :name)))) freeze "," logger warn "," logger "," initialized? "]}," Sentry integrations":{"type":"method","name":"integrations","children":[],"call":[]}," Sentry Rack CaptureExceptions capture_exception":{"type":"method","name":"capture_exception","children":[],"call":["Sentry  capture_exception ","env []= ","event event_id ","Sentry  capture_exception tap "]}," Sentry Rack CaptureExceptions transaction_op":{"type":"method","name":"transaction_op","children":[],"call":["rack.request freeze ","http.server freeze "]}," Sentry Integrable capture_message":{"type":"method","name":"capture_message","children":[],"call":["Sentry  capture_message ","options [] []= "," integration_name ","options [] "]}," Sentry Integrable capture_exception":{"type":"method","name":"capture_exception","children":[],"call":["Sentry  capture_exception ","options [] []= "," integration_name ","options [] "]}," Sentry Integrable integration_name":{"type":"method","name":"integration_name","children":[],"call":[]}," Sentry Integrable register_integration":{"type":"method","name":"register_integration","children":[],"call":["Sentry  register_integration "]}," Sentry StacktraceInterface Frame set_context":{"type":"method","name":"set_context","children":[],"call":["linecache get_file_context "," lineno "," abs_path "," post_context= "," context_line= "," pre_context= "]}," Sentry StacktraceInterface convert_parsed_line_into_frame":{"type":"method","name":"convert_parsed_line_into_frame","children":[],"call":["frame set_context ","StacktraceInterface Frame  new ","StacktraceInterface Frame  new  set_context "]}," Sentry StacktraceInterface initialize":{"type":"method","name":"initialize","children":[],"call":["frames << ","frame filename "," convert_parsed_line_into_frame ","parsed_backtrace_lines reverse each_with_object ","parsed_backtrace_lines reverse ","Backtrace  parse lines ","Backtrace  parse "," convert_parsed_line_into_frame s << "," convert_parsed_line_into_frame  filename "," convert_parsed_line_into_ convert_parsed_line_into_frame  ","Backtrace  parse lines  reverse each_with_object ","Backtrace  parse lines  reverse "]}," Sentry RequestInterface filter_and_format_env":{"type":"method","name":"filter_and_format_env","children":[],"call":["Sentry  configuration rack_env_whitelist include? ","k to_s ","Sentry  configuration rack_env_whitelist ","Sentry  configuration ","env select ","Sentry  configuration rack_env_whitelist empty? ","rack_env_whitelist include? ","rack_env_whitelist empty? "]}," Sentry RequestInterface is_server_protocol?":{"type":"method","name":"is_server_protocol?","children":[],"call":["value == ","key == ","rack_version >= ","Gem Version  new "," Rack  release ","Gem Version  new  >= "]}," Sentry RequestInterface is_skippable_header?":{"type":"method","name":"is_skippable_header?","children":[],"call":["(or\n  (send\n    (lvar :key) :start_with?\n    (str \"HTTP_\"))\n  (send\n    (const nil :CONTENT_HEADERS) :include?\n    (lvar :key))) ! ","CONTENT_HEADERS  include? ","key start_with? ","key == ","key upcase != ","key upcase "]}," Sentry RequestInterface filter_and_format_headers":{"type":"method","name":"filter_and_format_headers","children":[],"call":["e message ","Sentry  logger warn ","Sentry  logger ","memo []= ","key split map join ","key split map ","key split ","key sub "," is_skippable_header? "," is_server_protocol? ","env [] ","Utils RequestId  read_from ","memo [] ","Utils RequestId REQUEST_ID_HEADERS  include? ","value to_s ","key to_s ","env each_with_object ","Utils EncodingHelper  encode_to_utf_8 ","send_default_pii ! ","key == "," encode_to_utf_8 ","key split map join  split map join ","key sub  split map join ","key to_s  split map join ","key split map join  split map ","key sub  split map ","key to_s  split map ","key split map join  split ","key sub  split ","key to_s  split ","key split map join  sub ","key sub  sub ","key to_s  sub ","value to_s  to_s ","key split map join  to_s ","key sub  to_s ","key to_s  to_s ","key split map join  == ","key sub  == ","key to_s  == "]}," Sentry RequestInterface clean_env":{"type":"method","name":"clean_env","children":[],"call":[]}," Sentry Event initialize_stacktrace_interface":{"type":"method","name":"initialize_stacktrace_interface","children":[],"call":["StacktraceInterface  new "," configuration backtrace_cleanup_callback "," configuration "," configuration context_lines "," configuration linecache "," configuration app_dirs_pattern "," configuration project_root to_s "," configuration project_root "]}," Sentry Event add_request_interface":{"type":"method","name":"add_request_interface","children":[],"call":["Sentry RequestInterface  from_rack ","Sentry RequestInterface  new "]}," Sentry ArgumentCheckingHelper check_argument_type!":{"type":"method","name":"check_argument_type!","children":[],"call":[" raise ","argument inspect ","argument class ","argument is_a? ","expected_types join ","expected_types any? "]}," Sentry add_global_event_processor":{"type":"method","name":"add_global_event_processor","children":[],"call":["Scope  add_global_event_processor "]}," Sentry exception_captured?":{"type":"method","name":"exception_captured?","children":[],"call":["exc instance_variable_get ! ! ","exc instance_variable_get ! ","exc instance_variable_get "," initialized? "]}," Sentry with_child_span":{"type":"method","name":"with_child_span","children":[],"call":[" get_current_hub with_child_span "," get_current_hub ","Sentry  initialized? "," get_current_scope set_span "," get_current_scope ","current_span with_child_span "," get_current_scope get_span "," get_current_scope get_span  with_child_span "]}," Sentry with_exception_captured":{"type":"method","name":"with_exception_captured","children":[],"call":[" raise "," capture_exception "]}," Sentry with_session_tracking":{"type":"method","name":"with_session_tracking","children":[],"call":[" get_current_hub with_session_tracking "," get_current_hub "," initialized? "]}," Sentry csp_report_uri":{"type":"method","name":"csp_report_uri","children":[],"call":[" configuration csp_report_uri "," configuration "," initialized? "]}," Sentry close":{"type":"method","name":"close","children":[],"call":["Thread  current thread_variable_set ","Thread  current "," exception_locals_tp disable "," exception_locals_tp "," configuration ","@session_flusher kill ","@background_worker shutdown "]}," Sentry set_context":{"type":"method","name":"set_context","children":[],"call":[" get_current_scope set_context "," get_current_scope "," initialized? "]}," Sentry set_user":{"type":"method","name":"set_user","children":[],"call":[" get_current_scope set_user "," get_current_scope "," initialized? "]}," Sentry set_extras":{"type":"method","name":"set_extras","children":[],"call":[" get_current_scope set_extras "," get_current_scope "," initialized? "]}," Sentry set_tags":{"type":"method","name":"set_tags","children":[],"call":[" get_current_scope set_tags "," get_current_scope "," initialized? "]}," Sentry registered_patches":{"type":"method","name":"registered_patches","children":[],"call":[]}," Sentry apply_patches":{"type":"method","name":"apply_patches","children":[],"call":["patch call "," registered_patches each "," registered_patches ","config enabled_patches include? ","config enabled_patches "]}," Sentry register_patch":{"type":"method","name":"register_patch","children":[],"call":[" registered_patches << ","target send ","target ancestors include? ","target ancestors "," proc "," registered_patches "," raise ","ArgumentError  new "," registered_patches []= "]}," Sentry exception_locals_tp":{"type":"method","name":"exception_locals_tp","children":[],"call":["exception instance_variable_set ","result []= ","tp binding local_variable_get ","tp binding ","tp binding local_variables each_with_object ","tp binding local_variables ","exception instance_variable_get ","tp raised_exception ","TracePoint  new ","tp raised_exception  instance_variable_set ","tp raised_exception  instance_variable_get ","tp raised_tp raised_exception  "]}," Sentry Utils RealIp filter_trusted_proxy_addresses":{"type":"method","name":"filter_trusted_proxy_addresses","children":[],"call":["proxy === ","@trusted_proxies any? ","ips reject "]}," Sentry LoggingHelper log_warn":{"type":"method","name":"log_warn","children":[],"call":["@logger warn "]}," Sentry LoggingHelper log_debug":{"type":"method","name":"log_debug","children":[],"call":["@logger debug "]}," Sentry LoggingHelper log_info":{"type":"method","name":"log_info","children":[],"call":["@logger info "]}," Sentry LoggingHelper log_error":{"type":"method","name":"log_error","children":[],"call":["@logger error ","exception backtrace join ","exception backtrace ","exception message "]}," Sentry Utils EncodingHelper valid_utf_8?":{"type":"method","name":"valid_utf_8?","children":[],"call":[]}," Sentry Utils EncodingHelper encode_to_utf_8":{"type":"method","name":"encode_to_utf_8","children":[],"call":[]}," Sentry CustomInspection inspect":{"type":"method","name":"inspect","children":[],"call":["attr_strings join "," class name "," class ","result << ","value inspect "," instance_variable_get ","(send\n  (send nil :instance_variables) :-\n  (const\n    (send\n      (self) :class) :SKIP_INSPECTION_ATTRIBUTES)) each_with_object "," instance_variables - "," instance_variables "," instance_variable_get  inspect "]}," Sentry Transport reject_rate_limited_items":{"type":"method","name":"reject_rate_limited_items","children":[],"call":[" record_lost_event ","item type "," log_info "," is_rate_limited? ","envelope items reject! ","envelope items "]}," Sentry Transport fetch_pending_client_report":{"type":"method","name":"fetch_pending_client_report","children":[],"call":["Time  now ","Hash  new ","Sentry  utc_now iso8601 ","Sentry  utc_now ","type == ","@discarded_events map ","@discarded_events empty? ","@last_client_report_sent > ","Time  now - ","Hash  new  map ","Hash  new  empty? ","Time  now  > "]}," Sentry Transport record_lost_event":{"type":"method","name":"record_lost_event","children":[],"call":["@discarded_events [] ","CLIENT_REPORT_REASONS  include? "]}," Sentry Transport envelope_from_event":{"type":"method","name":"envelope_from_event","children":[],"call":["envelope add_item "," fetch_pending_client_report ","event profile ","event is_a? ","Envelope  new ","envelope_headers []= ","event dynamic_sampling_context ","Sentry  utc_now iso8601 ","Sentry  utc_now ","Sentry  sdk_meta ","@dsn to_s ","event_payload [] ","event to_hash ","Envelope  new  add_item ","Envelope  new _headers []= ","event to_hash  [] "]}," Sentry Transport is_rate_limited?":{"type":"method","name":"is_rate_limited?","children":[],"call":["delay > ","Time  now ","delay ! ! ","delay ! ","category_delay > ","@rate_limits [] "]}," Sentry Transport serialize_envelope":{"type":"method","name":"serialize_envelope","children":[],"call":["(send\n  (const nil :JSON) :generate\n  (send\n    (lvar :envelope) :headers)) join ","JSON  generate ","envelope headers ","serialized_results empty? ","serialized_items << ","serialized_results << "," log_info ","item size_breakdown ","item type ","item serialize ","envelope items each ","envelope items "]}," Sentry Transport send_envelope":{"type":"method","name":"send_envelope","children":[],"call":[" send_data "," log_info ","envelope event_id ","serialized_items map join ","serialized_items map "," serialize_envelope ","envelope items empty? ","envelope items "," reject_rate_limited_items "]}," Sentry HTTPTransport normalize_proxy":{"type":"method","name":"normalize_proxy","children":[],"call":["proxy password ","proxy user ","uri password ","uri user "," URI "," URI  password "," URI  user "]}," Sentry HTTPTransport conn":{"type":"method","name":"conn","children":[],"call":["connection send "," ssl_configuration each "," ssl_configuration ","connection open_timeout= ","@transport_configuration open_timeout ","connection write_timeout= ","@transport_configuration timeout ","connection respond_to? ","connection read_timeout= ","connection use_ssl= ","server scheme == ","server scheme "," Net HTTP  new ","server port ","server hostname ","proxy [] ","proxy [] port ","proxy [] hostname "," normalize_proxy ","@transport_configuration proxy "," URI ","@dsn server "," Net HTTP  new  send "," Net HTTP  new  open_timeout= "," Net HTTP  new  write_timeout= "," Net HTTP  new  respond_to? "," Net HTTP  new  read_timeout= "," Net HTTP  new  use_ssl= "," URI  scheme == "," URI  scheme "," URI  port "," URI  hostname "," normalize_proxy  [] "," normalize_proxy  [] port "," normalize_proxy  [] hostname "," normalize_ normalize_proxy  ","@transport_configuration  normalize_proxy  ","@dsn  URI  "]}," Sentry HTTPTransport should_compress?":{"type":"method","name":"should_compress?","children":[],"call":["data bytesize >= ","data bytesize ","@transport_configuration encoding == ","@transport_configuration encoding "]}," Sentry HTTPTransport parse_rate_limit_header":{"type":"method","name":"parse_rate_limit_header","children":[],"call":["result []= ","categories each ","categories empty? ","categories split ","time + ","retry_after to_i ","limit strip split first ","limit strip split ","limit strip ","limit empty? ","limit nil? ","limits each ","rate_limit_header split ","Time  now ","categories split  each ","categories split  empty? ","categories split  split ","Time  now  + ","time +  to_i ","rate_limit_header split  each "]}," Sentry HTTPTransport handle_rate_limited_response":{"type":"method","name":"handle_rate_limited_response","children":[],"call":["@rate_limits []= ","current_limit < ","@rate_limits [] ","rate_limits each ","Time  now + ","Time  now ","retry_after == ","retry_after to_i ","headers [] "," parse_rate_limit_header ","@ parse_rate_limit_header  []= ","@headers []  []= ","@rate_limits []  < ","@ parse_rate_limit_header  [] ","@headers []  [] "," parse_rate_limit_header  each ","headers []  each ","retry_after to_i  == ","headers []  == ","retry_after to_i  to_i ","headers []  to_i "]}," Sentry HTTPTransport has_rate_limited_header?":{"type":"method","name":"has_rate_limited_header?","children":[],"call":["headers [] "]}," Sentry DummyTransport send_envelope":{"type":"method","name":"send_envelope","children":[],"call":["@envelopes << "]}," Sentry TransactionEvent populate_profile":{"type":"method","name":"populate_profile","children":[],"call":[" profile= ","profile_hash merge! ","transaction trace_id ","transaction name "," event_id ","Scope  runtime_context ","Scope  os_context [] ","Scope  os_context ","Time  at iso8601 ","Time  at "," start_timestamp "," release "," environment ","profile_hash empty? ","transaction profiler to_hash ","transaction profiler ","transaction profiler to_hash  merge! ","transaction profiler to_hash  empty? "]}," Sentry TransactionEvent initialize":{"type":"method","name":"initialize","children":[],"call":[" populate_profile "," spans= ","finished_spans map ","span != ","span timestamp ","transaction span_recorder spans select ","transaction span_recorder spans ","transaction span_recorder "," measurements= ","transaction measurements "," dynamic_sampling_context= ","transaction get_baggage dynamic_sampling_context ","transaction get_baggage "," tags= ","transaction tags "," start_timestamp= ","transaction start_timestamp "," timestamp= ","transaction timestamp "," contexts merge! ","transaction get_trace_context "," contexts ","transaction contexts "," transaction_info= ","transaction source "," transaction= ","transaction name "]}," Sentry Transaction source_low_quality?":{"type":"method","name":"source_low_quality?","children":[],"call":[" source == "," source "]}," Sentry Transaction populate_head_baggage":{"type":"method","name":"populate_head_baggage","children":[],"call":["Baggage  new ","items compact! ","items []= ","user [] ","@hub current_scope "," name "," source_low_quality? "," effective_sample_rate "," trace_id "," sampled "]}," Sentry Transaction init_span_recorder":{"type":"method","name":"init_span_recorder","children":[],"call":["@span_recorder add ","SpanRecorder  new ","SpanRecorder  new  add "]}," Sentry Transaction start_profiler!":{"type":"method","name":"start_profiler!","children":[],"call":[" profiler start "," profiler "," profiler set_initial_sample_decision "," sampled "]}," Sentry Transaction set_context":{"type":"method","name":"set_context","children":[],"call":["@contexts []= "]}," Sentry Transaction set_name":{"type":"method","name":"set_name","children":[],"call":["source to_sym ","SOURCES  include? "]}," Sentry Transaction get_baggage":{"type":"method","name":"get_baggage","children":[],"call":[" populate_head_baggage ","@baggage mutable ","@baggage nil? "]}," Sentry Transaction set_initial_sample_decision":{"type":"method","name":"set_initial_sample_decision","children":[],"call":[" log_debug ","Random  rand < ","Random  rand ","sample_rate == "," log_warn ","sample_rate to_f ","sample_rate <= ","sample_rate >= ","sample_rate is_a? ","(true) include? "," generate_transaction_description ","sampling_context [] ","sampling_context [] nil? ! ","sampling_context [] nil? ","@traces_sampler call ","@traces_sampler is_a? ","@sampled nil? ","@traces_sampler call  == ","@traces_sampler call  to_f ","@traces_sampler call  <= ","@traces_sampler call  >= ","@traces_sampler call  is_a? "," generate_ generate_transaction_description  ","Random  rand <  nil? "]}," Sentry Transaction set_measurement":{"type":"method","name":"set_measurement","children":[],"call":["@measurements []= "]}," Sentry Transaction extract_sentry_trace":{"type":"method","name":"extract_sentry_trace","children":[],"call":[]}," Sentry TestHelper extract_sentry_exceptions":{"type":"method","name":"extract_sentry_exceptions","children":[],"call":[]}," Sentry TestHelper last_sentry_event":{"type":"method","name":"last_sentry_event","children":[],"call":[" sentry_events last "," sentry_events "]}," Sentry TestHelper sentry_envelopes":{"type":"method","name":"sentry_envelopes","children":[],"call":[" sentry_transport envelopes "," sentry_transport "]}," Sentry TestHelper sentry_events":{"type":"method","name":"sentry_events","children":[],"call":[" sentry_transport events "," sentry_transport "]}," Sentry TestHelper sentry_transport":{"type":"method","name":"sentry_transport","children":[],"call":["Sentry  get_current_client transport ","Sentry  get_current_client "]}," Sentry TestHelper teardown_sentry_test":{"type":"method","name":"teardown_sentry_test","children":[],"call":["Sentry  get_current_scope clear ","Sentry  get_current_scope "," sentry_transport envelopes= "," sentry_transport "," sentry_transport events= ","Sentry  initialized? ","Sentry  get_current_hub pop_scope ","Sentry  get_current_hub ","Sentry  get_current_hub instance_variable_get size > ","Sentry  get_current_hub instance_variable_get size ","Sentry  get_current_hub instance_variable_get "]}," Sentry TestHelper setup_sentry_test":{"type":"method","name":"setup_sentry_test","children":[],"call":["Sentry  get_current_scope clear ","Sentry  get_current_scope ","Sentry  get_current_hub bind_client ","Sentry  get_current_hub ","Sentry Client  new ","copied_config background_worker_threads= ","copied_config enabled_environments << ","copied_config environment ","copied_config enabled_environments ","copied_config enabled_environments include? ","copied_config transport transport_class= ","copied_config transport ","copied_config dsn= ","Sentry  configuration dup ","Sentry  configuration "," raise ","Sentry  initialized? ","dummy_config dup ","Sentry  get_current_hub push_scope ","dummy_config background_worker_threads= ","dummy_config enabled_environments << ","dummy_config environment ","dummy_config enabled_environments ","dummy_config enabled_environments include? ","dummy_config transport transport_class= ","dummy_config transport ","dummy_config dsn= ","Sentry  configuration dup  background_worker_threads= ","Sentry  configuration dup  enabled_environments << ","Sentry  configuration dup  environment ","Sentry  configuration dup  enabled_environments ","Sentry  configuration dup  enabled_environments include? ","Sentry  configuration dup  transport transport_class= ","Sentry  configuration dup  transport ","Sentry  configuration dup  dsn= ","Sentry  configuration dup  dup "]}," Sentry Span to_baggage":{"type":"method","name":"to_baggage","children":[],"call":[" transaction get_baggage "," transaction "]}," Sentry SessionFlusher ensure_thread":{"type":"method","name":"ensure_thread","children":[],"call":[" flush "," sleep "," loop ","Thread  new "]}," Sentry SessionFlusher attrs":{"type":"method","name":"attrs","children":[],"call":[]}," Sentry SessionFlusher pending_envelope":{"type":"method","name":"pending_envelope","children":[],"call":["envelope add_item ","@pending_aggregates values "," attrs ","Envelope  new ","Envelope  new  add_item "]}," Sentry SessionFlusher init_aggregates":{"type":"method","name":"init_aggregates","children":[],"call":["aggregates []= ","Session AGGREGATE_STATUSES  each ","aggregation_key iso8601 "]}," Sentry SessionFlusher kill":{"type":"method","name":"kill","children":[],"call":[" log_debug "]}," Sentry SessionFlusher add_session":{"type":"method","name":"add_session","children":[],"call":["@pending_aggregates [] [] ","session status ","@pending_aggregates [] ","session aggregation_key "," init_aggregates ","Session AGGREGATE_STATUSES  include? "," log_debug "," ensure_thread "]}," Sentry SessionFlusher flush":{"type":"method","name":"flush","children":[],"call":["@client transport send_envelope ","@client transport ","Sentry  background_worker perform ","Sentry  background_worker "," pending_envelope ","@pending_aggregates empty? ","@client transport send_ pending_envelope  "," pending_ pending_envelope  "]}," Sentry SessionFlusher initialize":{"type":"method","name":"initialize","children":[],"call":[" log_debug ","configuration logger ","configuration environment ","configuration release "]}," Sentry Session deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" dup "]}," Sentry Session close":{"type":"method","name":"close","children":[],"call":["@status == "]}," Sentry Session update_from_exception":{"type":"method","name":"update_from_exception","children":[],"call":[]}," Sentry Session initialize":{"type":"method","name":"initialize","children":[],"call":["Time  utc ","@started min ","@started hour ","@started day ","@started month ","@started year ","Sentry  utc_now ","Sentry  utc_now  min ","Sentry  utc_now  hour ","Sentry  utc_now  day ","Sentry  utc_now  month ","Sentry  utc_now  year "]}," Sentry Scope add_global_event_processor":{"type":"method","name":"add_global_event_processor","children":[],"call":[" global_event_processors << "," global_event_processors "]}," Sentry Scope global_event_processors":{"type":"method","name":"global_event_processors","children":[],"call":[]}," Sentry Scope set_new_breadcrumb_buffer":{"type":"method","name":"set_new_breadcrumb_buffer","children":[],"call":["BreadcrumbBuffer  new "]}," Sentry Scope transaction_source":{"type":"method","name":"transaction_source","children":[],"call":["@transaction_sources last "]}," Sentry Scope set_session":{"type":"method","name":"set_session","children":[],"call":[]}," Sentry ReleaseDetector detect_release_from_env":{"type":"method","name":"detect_release_from_env","children":[],"call":["ENV  [] "]}," Sentry ReleaseDetector detect_release_from_git":{"type":"method","name":"detect_release_from_git","children":[],"call":["Sentry  sys_command ","File  directory? "]}," Sentry ReleaseDetector detect_release_from_capistrano":{"type":"method","name":"detect_release_from_capistrano","children":[],"call":["File  open to_a last strip sub ","File  open to_a last strip ","File  open to_a last ","File  open to_a ","File  open ","File  exist? ","File  read strip ","File  read ","File  join "]}," Sentry ReleaseDetector detect_release_from_heroku":{"type":"method","name":"detect_release_from_heroku","children":[],"call":["ENV  [] "]}," Sentry ReleaseDetector detect_release":{"type":"method","name":"detect_release","children":[],"call":[" detect_release_from_heroku "," detect_release_from_capistrano "," detect_release_from_git "," detect_release_from_env "]}," Sentry Redis GlobalRedisInstrumentation call_pipelined":{"type":"method","name":"call_pipelined","children":[],"call":["Sentry Redis  new instrument ","Sentry Redis  new ","redis_config db ","redis_config port ","redis_config host "]}," Sentry Redis GlobalRedisInstrumentation call":{"type":"method","name":"call","children":[],"call":["Sentry Redis  new instrument ","Sentry Redis  new ","redis_config db ","redis_config port ","redis_config host "]}," Sentry Redis OldClientPatch logging":{"type":"method","name":"logging","children":[],"call":["Sentry Redis  new instrument ","Sentry Redis  new "," db "," port "," host "]}," Sentry Redis server_description":{"type":"method","name":"server_description","children":[],"call":[" db "," port "," host "]}," Sentry Redis parsed_commands":{"type":"method","name":"parsed_commands","children":[],"call":["command_set []= ","(send\n  (lvar :arguments) :select) join ","Utils EncodingHelper  valid_utf_8? ","arguments select ","Sentry  configuration send_default_pii ","Sentry  configuration ","command to_s upcase ","command to_s "," commands map "," commands ","arguments join ","(pair\n  (sym :command)\n  (send\n    (send\n      (lvar :command) :to_s) :upcase)) tap "]}," Sentry Redis commands_description":{"type":"method","name":"commands_description","children":[],"call":["(send\n  (send nil :parsed_commands) :map) join ","statement values join strip ","statement values join ","statement values "," parsed_commands map "," parsed_commands "]}," Sentry Redis record_breadcrumb":{"type":"method","name":"record_breadcrumb","children":[],"call":["Sentry  add_breadcrumb ","Sentry Breadcrumb  new "," server_description "," parsed_commands ","Sentry  configuration breadcrumbs_logger include? ","Sentry  configuration breadcrumbs_logger ","Sentry  configuration ","Sentry  initialized? "]}," Sentry Redis instrument":{"type":"method","name":"instrument","children":[],"call":["span set_data "," server_description ","span set_description "," commands_description "," record_breadcrumb "," tap ","Sentry  with_child_span ","Sentry  utc_now to_f ","Sentry  utc_now ","Sentry  initialized? "," port "," host "," db "," record_span "]}," Sentry Redis initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Rake Task execute":{"type":"method","name":"execute","children":[],"call":["Sentry  get_current_hub ","Sentry  initialized? "]}," Sentry Rake Application display_error_message":{"type":"method","name":"display_error_message","children":[],"call":["scope set_tag ","scope set_transaction_name "," top_level_tasks join "," top_level_tasks ","Sentry  capture_exception ","Sentry  configuration skip_rake_integration ! ","Sentry  configuration skip_rake_integration ","Sentry  configuration ","Sentry  initialized? "]}," Sentry Rack CaptureExceptions finish_transaction":{"type":"method","name":"finish_transaction","children":[],"call":["transaction finish ","transaction set_http_status "]}," Sentry Rack CaptureExceptions start_transaction":{"type":"method","name":"start_transaction","children":[],"call":["Sentry  start_transaction ","Sentry Transaction  from_sentry_trace "," transaction_op ","scope transaction_source ","scope transaction_name ","env [] ","Sentry  continue_trace ","Sentry  start_Sentry Transaction  from_sentry_trace  ","Sentry  start_Sentry  continue_trace  ","Sentry Transaction  from_env []  "," Sentry Transaction  from_sentry_trace _op "," Sentry  continue_trace _op ","scope Sentry Transaction  from_sentry_trace _source ","scope Sentry  continue_trace _source ","scope Sentry Transaction  from_sentry_trace _name ","scope Sentry  continue_trace _name "]}," Sentry Puma Server lowlevel_error":{"type":"method","name":"lowlevel_error","children":[],"call":["scope set_rack_env ","Sentry  capture_exception "]}," Sentry Profiler split_module":{"type":"method","name":"split_module","children":[],"call":["name [] ","i + ","name rindex ","name rindex  + ","name rname rindex ndex "]}," Sentry Profiler compute_filename":{"type":"method","name":"compute_filename","children":[],"call":["abs_path [] ","prefix to_s chomp length + ","prefix to_s chomp length ","prefix to_s chomp ","prefix to_s ","(send\n  (gvar :$LOAD_PATH) :select) max_by ","abs_path start_with? ","path to_s ","$LOAD_PATH select ","abs_path nil? "]}," Sentry Profiler in_app?":{"type":"method","name":"in_app?","children":[],"call":["abs_path match? "]}," Sentry Profiler log":{"type":"method","name":"log","children":[],"call":["Sentry  logger debug ","Sentry  logger "]}," Sentry Profiler to_hash":{"type":"method","name":"to_hash","children":[],"call":[" log ","samples size <= ","samples size ","samples size != ","results [] ","samples << ","elapsed_since_start_ns to_s ","delta < ","(send\n  (lvar :delta) :*\n  (const nil :MICRO_TO_NANO_SECONDS)) to_i ","delta * ","results [] [] ","n times ","num_seen each_with_index ","stack size != ","stack size ","len + ","num_seen << ","idx + ","stacks << ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact reverse ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact ","frame_map [] ","results [] slice map ","results [] slice ","frame_hash []= ","frame_data [] "," split_module "," compute_filename "," in_app? ","frame_map []= ","results [] to_enum with_index map ","results [] to_enum with_index ","results [] to_enum ","results [] == ","results empty? ","StackProf  results "," record_lost_event ","results [] ! ","results ! ","frame_data [] >= ","StackProf  results  [] ","results [] []  < ","(send\n  (lvar :results [] [] ) :*\n  (const nil :MICRO_TO_NANO_SECONDS)) to_i ","results [] []  * ","StackProf  results  [] [] ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact reverse  size != ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact reverse  size ","results [] []  + ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact reverse s << ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :results [] [] )) :map) compact reverse ","(send\n  (send\n    (send\n      (lvar :StackProf  results ) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact reverse ","(send\n  (send\n    (send\n      (lvar :results) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :results [] [] )) :map) compact ","(send\n  (send\n    (send\n      (lvar :StackProf  results ) :[]\n      (sym :raw)) :slice\n    (lvar :idx)\n    (lvar :len)) :map) compact ","StackProf  results  [] slice map ","StackProf  results  [] slice "," compute_firesults [] [] ame "," compute_ compute_filename  ","  in_app? ? ","StackProf  results  [] to_enum with_index map ","StackProf  results  [] to_enum with_index ","StackProf  results  [] to_enum ","StackProf  results  [] == ","StackProf  results  empty? ","StackProf  StackProf  results  ","StackProf  results  [] ! ","StackProf  results  ! "]}," Sentry Profiler set_initial_sample_decision":{"type":"method","name":"set_initial_sample_decision","children":[],"call":[" log ","Random  rand < ","Random  rand "]}," Sentry Profiler stop":{"type":"method","name":"stop","children":[],"call":[" log ","StackProf  stop "]}," Sentry Profiler start":{"type":"method","name":"start","children":[],"call":[" log ","StackProf  start "]}," Sentry Profiler initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  new ","configuration app_dirs_pattern ","configuration project_root ","configuration profiles_sample_rate ","configuration profiling_enabled? ","SecureRandom  uuid delete ","SecureRandom  uuid "]}," Sentry Net HTTP extract_request_info":{"type":"method","name":"extract_request_info","children":[],"call":["result []= ","req body ","uri query ","Sentry  configuration send_default_pii ","Sentry  configuration ","req method ","uri to_s ","uri path ","uri host ","uri scheme ","URI  parse ","req path "," address "," use_ssl? ","req uri "," address =~ ","result [] + ","result [] "]}," Sentry Net HTTP from_sentry_sdk?":{"type":"method","name":"from_sentry_sdk?","children":[],"call":["dsn host == "," address ","dsn host ","Sentry  configuration dsn ","Sentry  configuration ","Sentry  configuration dsn  host == ","Sentry  configuration dsn  host ","Sentry  configuration Sentry  configuration dsn  "]}," Sentry Net HTTP record_sentry_breadcrumb":{"type":"method","name":"record_sentry_breadcrumb","children":[],"call":["Sentry  add_breadcrumb ","Sentry Breadcrumb  new ","res code to_i ","res code "," extract_request_info ","Sentry  configuration breadcrumbs_logger include? ","Sentry  configuration breadcrumbs_logger ","Sentry  configuration ","Sentry  initialized? "," from_sentry_sdk? ","Sentry  add_breadSentry Breadcrumb  new  ","Sentry BreadSentry Breadcrumb  new   new "," extract_ extract_request_info  ","Sentry  configuration breadSentry Breadcrumb  new s_logger include? ","Sentry  configuration breadSentry Breadcrumb  new s_logger "]}," Sentry Net HTTP set_sentry_trace_header":{"type":"method","name":"set_sentry_trace_header","children":[],"call":["req []= ","baggage empty? ! ","baggage empty? ","client generate_baggage ","client generate_sentry_trace ","Sentry  get_current_client ","Sentry  get_current_client generate_sentry_trace ","client generate_baggage  empty? ! ","client generate_baggage  empty? ","client generate_client generate_baggage  ","Sentry  get_current_client  generate_baggage ","client generate_sentry_client generate_sentry_trace  ","client generate_sentry_Sentry  get_current_client generate_sentry_trace  ","Sentry  get_current_client  generate_sentry_trace ","Sentry  get_current_Sentry  get_current_client  ","Sentry  get_current_client generate_sentry_client generate_sentry_trace  ","Sentry  get_current_client generate_sentry_Sentry  get_current_client generate_sentry_trace  ","Sentry  get_current_Sentry  get_current_client  generate_sentry_trace "]}," Sentry Net HTTP request":{"type":"method","name":"request","children":[],"call":["sentry_span set_data ","res code to_i ","res code ","request_info [] ","sentry_span set_description "," extract_request_info "," record_sentry_breadcrumb "," tap "," set_sentry_trace_header ","Sentry  with_child_span ","Sentry  utc_now to_f ","Sentry  utc_now "," from_sentry_sdk? ","Sentry  initialized? "," started? "," set_propagation_headers "," propagate_trace? ","Sentry  configuration "," record_sentry_span "," start_sentry_span "," start_sentry_span  set_data "," extract_request_info  [] "," start_sentry_span  set_description "," extract_ extract_request_info  "," record_ start_sentry_span  "," start_ start_sentry_span  "]}," Sentry ThreadsInterface build":{"type":"method","name":"build","children":[],"call":[]}," Sentry ThreadsInterface to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," Sentry ThreadsInterface initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current name ","Thread  current ","Thread  current object_id "]}," Sentry StacktraceBuilder parse_backtrace_lines":{"type":"method","name":"parse_backtrace_lines","children":[],"call":["Backtrace  parse lines ","Backtrace  parse "," backtrace_cleanup_callback "," app_dirs_pattern "," project_root "]}," Sentry StacktraceBuilder convert_parsed_line_into_frame":{"type":"method","name":"convert_parsed_line_into_frame","children":[],"call":["frame set_context "," context_lines "," linecache ","StacktraceInterface Frame  new "," project_root ","StacktraceInterface Frame  new  set_context "]}," Sentry StacktraceBuilder build":{"type":"method","name":"build","children":[],"call":["StacktraceInterface  new ","(send\n  (send\n    (lvar :parsed_lines) :reverse) :map) compact ","frame_callback call "," convert_parsed_line_into_frame ","parsed_lines reverse map ","parsed_lines reverse "," parse_backtrace_lines select "," parse_backtrace_lines ","(send\n  (send\n    (lvar : parse_backtrace_lines select ) :reverse) :map) compact ","frame_callback call _callback call "," convert_parsed_line_into_frame _callback call "," convert_parsed_line_into_frame_callback call  "," convert_parsed_line_into_ convert_parsed_line_into_frame  "," parse_backtrace_lines select  reverse map "," parse_backtrace_lines select  reverse "]}," Sentry StacktraceBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry StacktraceInterface Frame compute_filename":{"type":"method","name":"compute_filename","children":[],"call":[" abs_path "," abs_path [] ","prefix to_s chomp length + ","prefix to_s chomp length ","prefix to_s chomp ","prefix to_s "," longest_load_path "," under_project_root? "," in_app "," abs_path nil? "]}," Sentry StacktraceInterface Frame to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Sentry StacktraceInterface inspect":{"type":"method","name":"inspect","children":[],"call":["@frames map "]}," Sentry SingleExceptionInterface build_with_stacktrace":{"type":"method","name":"build_with_stacktrace","children":[],"call":[]}," Sentry SingleExceptionInterface initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current object_id ","Thread  current ","exception class to_s split [] join ","exception class to_s split [] ","exception class to_s split ","exception class to_s ","exception class ","exception_message byteslice ","exception message ","exception detailed_message ","exception respond_to? ","Utils EncodingHelper  encode_to_utf_8 ","exception_message inspect ","exception_message is_a? ","(or\n  (send\n    (lvar :exception) :message)\n  (str \"\")) byteslice ","exception detailed_message  byteslice ","exception_message inspect  byteslice ","exception detailed_message  inspect ","exception_message inspect  inspect ","exception detailed_message  is_a? ","exception_message inspect  is_a? "]}," Sentry ExceptionInterface build":{"type":"method","name":"build","children":[],"call":[]}," Sentry ExceptionInterface initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Hub with_session_tracking":{"type":"method","name":"with_session_tracking","children":[],"call":[" end_session "," start_session "," configuration auto_session_tracking "," configuration "]}," Sentry Hub end_session":{"type":"method","name":"end_session","children":[],"call":["Sentry  session_flusher add_session ","Sentry  session_flusher ","session close "," current_scope set_session "," current_scope "," current_scope session ","Sentry   current_scope session _flusher add_ current_scope session  ","Sentry   current_scope session _flusher "," current_scope session  close "," current_scope set_ current_scope session  "," current_scope  current_scope session  "]}," Sentry Hub start_session":{"type":"method","name":"start_session","children":[],"call":[" current_scope set_session ","Session  new "," current_scope "]}," Sentry Hub with_background_worker_disabled":{"type":"method","name":"with_background_worker_disabled","children":[],"call":[" configuration background_worker_threads= "," configuration ","block call "," configuration background_worker_threads "]}," Sentry Hub with_child_span":{"type":"method","name":"with_child_span","children":[],"call":[" current_scope set_span "," current_scope ","current_span with_child_span "," current_scope get_span ","instrumenter == "," configuration instrumenter "," configuration "," current_scope get_span  with_child_span "]}," Sentry Hub configuration":{"type":"method","name":"configuration","children":[],"call":[" current_client configuration "," current_client "]}," Sentry Event configuration":{"type":"method","name":"configuration","children":[],"call":["Sentry  configuration "]}," Sentry ErrorEvent add_exception_interface":{"type":"method","name":"add_exception_interface","children":[],"call":["Sentry ExceptionInterface  build ","@extra merge! ","exception sentry_context ","exception respond_to? "]}," Sentry ErrorEvent add_threads_interface":{"type":"method","name":"add_threads_interface","children":[],"call":["ThreadsInterface  build "]}," Sentry ErrorEvent to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= "," exception to_hash "," exception "," threads to_hash "," threads "]}," Sentry Envelope event_id":{"type":"method","name":"event_id","children":[],"call":["@headers [] "]}," Sentry Envelope item_types":{"type":"method","name":"item_types","children":[],"call":["@items map "]}," Sentry Envelope add_item":{"type":"method","name":"add_item","children":[],"call":["@items << ","Item  new "]}," Sentry Envelope initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Envelope Item reduce_stacktrace!":{"type":"method","name":"reduce_stacktrace!","children":[],"call":["traces replace ","traces [] + ","traces [] ","size_on_both_ends -@ ","size_on_both_ends - ","STACKTRACE_FRAME_LIMIT_ON_OVERSIZED_PAYLOAD  / ","traces size > ","traces size ","exception dig ","exceptions each "," payload dig "," payload ","STACKTRACE_FRAME_LIMIT_ON_OVERSIZED_PAYLOAD  /  -@ ","STACKTRACE_FRAME_LIMIT_ON_OVERSIZED_PAYLOAD  /  - "]}," Sentry Envelope Item remove_breadcrumbs!":{"type":"method","name":"remove_breadcrumbs!","children":[],"call":[" payload delete "," payload "," payload key? "]}," Sentry Envelope Item size_breakdown":{"type":"method","name":"size_breakdown","children":[],"call":["(send\n  (send nil :payload) :map) join ","JSON  generate bytesize ","JSON  generate "," payload map "," payload "]}," Sentry Envelope Item serialize":{"type":"method","name":"serialize","children":[],"call":["result bytesize > ","result bytesize "," to_s "," reduce_stacktrace! "," remove_breadcrumbs! "," to_s  bytesize > "," to_s  bytesize "]}," Sentry Envelope Item to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (const nil :JSON) :generate\n  (ivar :@headers)) join ","JSON  generate "]}," Sentry Envelope Item type":{"type":"method","name":"type","children":[],"call":["@headers [] "]}," Sentry Envelope Item initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry DSN csp_report_uri":{"type":"method","name":"csp_report_uri","children":[],"call":[" public_key "," project_id "," server "]}," Sentry Configuration run_post_initialization_callbacks":{"type":"method","name":"run_post_initialization_callbacks","children":[],"call":[" instance_eval "," class post_initialization_callbacks each "," class post_initialization_callbacks "," class "]}," Sentry Configuration init_dsn":{"type":"method","name":"init_dsn","children":[],"call":["DSN  new ","dsn_string empty? ","dsn_string nil? "]}," Sentry Configuration check_callable!":{"type":"method","name":"check_callable!","children":[],"call":[" raise ","value respond_to? ","value == "]}," Sentry Configuration stacktrace_builder":{"type":"method","name":"stacktrace_builder","children":[],"call":["StacktraceBuilder  new ","@project_root to_s "]}," Sentry Configuration csp_report_uri":{"type":"method","name":"csp_report_uri","children":[],"call":["CGI  escape "," environment "," environment empty? ! "," environment empty? "," release "," release empty? ! "," release empty? "," dsn csp_report_uri "," dsn "," dsn valid? "," dsn csp_report_ dsn csp_report_uri  "]}," Sentry Configuration profiling_enabled?":{"type":"method","name":"profiling_enabled?","children":[],"call":[" sending_allowed? "," tracing_enabled? ","(send nil :valid_sample_rate?\n  (ivar :@profiles_sample_rate)) ! ! ","(send nil :valid_sample_rate?\n  (ivar :@profiles_sample_rate)) ! "," valid_sample_rate? ","(and\n  (and\n    (ivar :@profiles_sample_rate)\n    (send\n      (ivar :@profiles_sample_rate) :>=\n      (float 0.0)))\n  (send\n    (ivar :@profiles_sample_rate) :<=\n    (float 1.0))) ! ! ","(and\n  (and\n    (ivar :@profiles_sample_rate)\n    (send\n      (ivar :@profiles_sample_rate) :>=\n      (float 0.0)))\n  (send\n    (ivar :@profiles_sample_rate) :<=\n    (float 1.0))) ! ","@profiles_sample_rate <= ","@profiles_sample_rate >= "]}," Sentry Configuration valid_sample_rate?":{"type":"method","name":"valid_sample_rate?","children":[],"call":["sample_rate <= ","sample_rate >= ","sample_rate is_a? "]}," Sentry Configuration profiles_sample_rate=":{"type":"method","name":"profiles_sample_rate=","children":[],"call":[" log_info "," raise "," is_numeric_or_nil? "]}," Sentry Configuration traces_sample_rate=":{"type":"method","name":"traces_sample_rate=","children":[],"call":[" raise "," is_numeric_or_nil? "]}," Sentry Configuration is_numeric_or_nil?":{"type":"method","name":"is_numeric_or_nil?","children":[],"call":["value nil? ","value is_a? "]}," Sentry Configuration enable_tracing=":{"type":"method","name":"enable_tracing=","children":[],"call":[]}," Sentry Configuration instrumenter=":{"type":"method","name":"instrumenter=","children":[],"call":["INSTRUMENTERS  include? "]}," Sentry Configuration before_breadcrumb=":{"type":"method","name":"before_breadcrumb=","children":[],"call":[" check_callable! "]}," Sentry Configuration before_send_transaction=":{"type":"method","name":"before_send_transaction=","children":[],"call":[" check_callable! "]}," Sentry Configuration release=":{"type":"method","name":"release=","children":[],"call":[" check_argument_type! "]}," Sentry Configuration add_post_initialization_callback":{"type":"method","name":"add_post_initialization_callback","children":[],"call":[" post_initialization_callbacks << "," post_initialization_callbacks "]}," Sentry Configuration post_initialization_callbacks":{"type":"method","name":"post_initialization_callbacks","children":[],"call":[]}," Sentry Configuration capture_exception_frame_locals=":{"type":"method","name":"capture_exception_frame_locals=","children":[],"call":[" include_local_variables= "," log_warn "]}," Sentry Client dispatch_async_event":{"type":"method","name":"dispatch_async_event","children":[],"call":[" send_event "," log_error "," configuration debug "," configuration ","event_hash [] ","async_block call ","JSON  parse ","JSON  generate ","async_block arity == ","async_block arity ","event event_id ","event type ","event to_json_compatible "]}," Sentry Client dispatch_background_event":{"type":"method","name":"dispatch_background_event","children":[],"call":[" send_event ","Sentry  background_worker perform ","Sentry  background_worker "]}," Sentry Client generate_baggage":{"type":"method","name":"generate_baggage","children":[],"call":[" log_debug ","baggage empty? ! ","baggage empty? ","span to_baggage "," configuration propagate_traces "," configuration ","span to_baggage  empty? ! ","span to_baggage  empty? ","span to_span to_baggage  "]}," Sentry Client generate_sentry_trace":{"type":"method","name":"generate_sentry_trace","children":[],"call":[" log_debug ","span to_sentry_trace "," configuration propagate_traces "," configuration ","span to_sentry_span to_sentry_trace  "," configuration propagate_span to_sentry_trace s "]}," Sentry Breadcrumb serialized_data":{"type":"method","name":"serialized_data","children":[],"call":["Sentry  logger debug ","Sentry  logger "," JSON  parse "," JSON  generate "]}," Sentry Breadcrumb message=":{"type":"method","name":"message=","children":[],"call":["(or\n  (lvar :message)\n  (str \"\")) byteslice "]}," Sentry Baggage serialize":{"type":"method","name":"serialize","children":[],"call":["items join ","CGI  escape ","@items map "]}," Sentry Baggage dynamic_sampling_context":{"type":"method","name":"dynamic_sampling_context","children":[],"call":["DSC_KEYS  include? ","@items select "]}," Sentry Baggage freeze!":{"type":"method","name":"freeze!","children":[],"call":[]}," Sentry Baggage from_incoming_header":{"type":"method","name":"from_incoming_header","children":[],"call":[]}," Sentry Baggage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry BackgroundWorker _perform":{"type":"method","name":"_perform","children":[],"call":["block call "]}," Sentry BackgroundWorker shutdown":{"type":"method","name":"shutdown","children":[],"call":[" log_debug "]}," Sentry continue_trace":{"type":"method","name":"continue_trace","children":[],"call":[" get_current_hub continue_trace "," get_current_hub "," initialized? "]}," Sentry get_trace_propagation_headers":{"type":"method","name":"get_trace_propagation_headers","children":[],"call":[" get_current_hub get_trace_propagation_headers "," get_current_hub "," initialized? "]}," Sentry get_baggage":{"type":"method","name":"get_baggage","children":[],"call":[" get_current_hub get_baggage "," get_current_hub "," initialized? "]}," Sentry get_traceparent":{"type":"method","name":"get_traceparent","children":[],"call":[" get_current_hub get_traceparent "," get_current_hub "," initialized? "]}," Sentry Scope generate_propagation_context":{"type":"method","name":"generate_propagation_context","children":[],"call":["PropagationContext  new "]}," Sentry PropagationContext populate_head_baggage":{"type":"method","name":"populate_head_baggage","children":[],"call":["Baggage  new ","items compact! ","@scope user [] ","@scope user ","configuration dsn ","configuration release ","configuration environment "," trace_id ","Sentry  configuration ","Sentry  initialized? ","Sentry  configuration  dsn ","Sentry  configuration  release ","Sentry  configuration  environment ","Sentry  Sentry  configuration  "]}," Sentry PropagationContext get_dynamic_sampling_context":{"type":"method","name":"get_dynamic_sampling_context","children":[],"call":[" get_baggage "]}," Sentry PropagationContext get_baggage":{"type":"method","name":"get_baggage","children":[],"call":[" populate_head_baggage ","@baggage mutable ","@baggage nil? "]}," Sentry PropagationContext get_traceparent":{"type":"method","name":"get_traceparent","children":[],"call":[" span_id "," trace_id "]}," Sentry PropagationContext get_trace_context":{"type":"method","name":"get_trace_context","children":[],"call":[" parent_span_id "," span_id "," trace_id "]}," Sentry PropagationContext extract_sentry_trace":{"type":"method","name":"extract_sentry_trace","children":[],"call":[]}," Sentry PropagationContext initialize":{"type":"method","name":"initialize","children":[],"call":["SecureRandom  uuid delete slice ","SecureRandom  uuid delete ","SecureRandom  uuid ","@baggage freeze! ","Baggage  new ","Baggage  from_incoming_header ","baggage_header empty? ! ","baggage_header empty? "," class extract_sentry_trace "," class ","env [] ","Baggage  new  freeze! ","Baggage  from_incoming_header  freeze! "]}," Sentry Net HTTP propagate_trace?":{"type":"method","name":"propagate_trace?","children":[],"call":["url match? ","configuration trace_propagation_targets any? ","configuration trace_propagation_targets ","configuration propagate_traces "]}," Sentry Net HTTP set_propagation_headers":{"type":"method","name":"set_propagation_headers","children":[],"call":["req []= ","Sentry  get_trace_propagation_headers "]}," Sentry Hub continue_trace":{"type":"method","name":"continue_trace","children":[],"call":["Transaction  new ","propagation_context baggage ","propagation_context parent_sampled ","propagation_context parent_span_id ","propagation_context trace_id ","propagation_context incoming_trace "," current_scope propagation_context "," current_scope "," configuration tracing_enabled? "," configuration ","s generate_propagation_context "," configure_scope "," current_scope propagation_context  baggage "," current_scope propagation_context  parent_sampled "," current_scope propagation_context  parent_span_id "," current_scope propagation_context  trace_id "," current_scope propagation_context  incoming_trace "," current_scope  current_scope propagation_context  ","s generate_ current_scope propagation_context  "]}," Sentry Hub get_trace_propagation_headers":{"type":"method","name":"get_trace_propagation_headers","children":[],"call":["headers []= ","baggage empty? ! ","baggage empty? "," get_baggage "," get_traceparent "," get_baggage  empty? ! "," get_baggage  empty? "," get_ get_baggage  "," get_ get_traceparent  "]}," Sentry Hub get_baggage":{"type":"method","name":"get_baggage","children":[],"call":[" current_scope propagation_context get_baggage "," current_scope propagation_context "," current_scope "," current_scope get_span "]}," Sentry Hub get_traceparent":{"type":"method","name":"get_traceparent","children":[],"call":[" current_scope propagation_context get_traceparent "," current_scope propagation_context "," current_scope "," current_scope get_span "]}," Sentry capture_check_in":{"type":"method","name":"capture_check_in","children":[],"call":[" get_current_hub capture_check_in "," get_current_hub "," initialized? "]}," Sentry ArgumentCheckingHelper check_argument_includes!":{"type":"method","name":"check_argument_includes!","children":[],"call":[" raise ","argument inspect ","values map join ","values map ","values include? "]}," Sentry Profiler record_lost_event":{"type":"method","name":"record_lost_event","children":[],"call":["Sentry  get_current_client "]}," Sentry Integrable capture_check_in":{"type":"method","name":"capture_check_in","children":[],"call":["Sentry  capture_check_in ","options [] []= "," integration_name ","options [] "]}," Sentry Hub capture_check_in":{"type":"method","name":"capture_check_in","children":[],"call":["event check_in_id "," capture_event "," current_client event_from_check_in ","options delete ","options [] "," current_client ","options [] []= "," check_argument_includes! "," check_argument_type! "," current_client event_from_check_in  check_in_id "," capture_ current_client event_from_check_in  "," current_client  current_client event_from_check_in _from_check_in "]}," Sentry Cron MonitorSchedule Interval to_hash":{"type":"method","name":"to_hash","children":[],"call":[" unit "," value "]}," Sentry Cron MonitorSchedule Interval initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Cron MonitorSchedule Crontab to_hash":{"type":"method","name":"to_hash","children":[],"call":[" value "]}," Sentry Cron MonitorSchedule Crontab initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Cron MonitorConfig to_hash":{"type":"method","name":"to_hash","children":[],"call":["(pair\n  (sym :schedule)\n  (send\n    (send nil :schedule) :to_hash)) compact "," timezone "," max_runtime "," checkin_margin "," schedule to_hash "," schedule "]}," Sentry Cron MonitorConfig from_interval":{"type":"method","name":"from_interval","children":[],"call":[]}," Sentry Cron MonitorConfig from_crontab":{"type":"method","name":"from_crontab","children":[],"call":[]}," Sentry Cron MonitorConfig initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sentry Cron MonitorCheckIns included":{"type":"method","name":"included","children":[],"call":[]}," Sentry Cron MonitorCheckIns ClassMethods sentry_monitor_config":{"type":"method","name":"sentry_monitor_config","children":[],"call":[]}," Sentry Cron MonitorCheckIns ClassMethods sentry_monitor_slug":{"type":"method","name":"sentry_monitor_slug","children":[],"call":["slug [] ","MAX_SLUG_LENGTH  -@ "," name gsub downcase "," name gsub "," name ","name gsub downcase ","name gsub "," name gsub downcase  [] ","name gsub downcase  [] "]}," Sentry Cron MonitorCheckIns ClassMethods sentry_monitor_check_ins":{"type":"method","name":"sentry_monitor_check_ins","children":[],"call":[" prepend "]}," Sentry Cron MonitorCheckIns Patch perform":{"type":"method","name":"perform","children":[],"call":[" raise ","Sentry  capture_check_in ","Sentry  utc_now to_i - ","Sentry  utc_now to_i ","Sentry  utc_now "," class sentry_monitor_config "," class "," class name "," class sentry_monitor_slug "," class sentry_ class sentry_monitor_config  "," class sentry_monitor_ class sentry_monitor_slug  "]}," Sentry Client event_from_check_in":{"type":"method","name":"event_from_check_in","children":[],"call":["CheckInEvent  new ","Sentry  integrations [] ","hint [] ","Sentry  integrations "," configuration "," configuration sending_allowed? "]}," Sentry CheckInEvent to_hash":{"type":"method","name":"to_hash","children":[],"call":["data []= "," monitor_config to_hash "," monitor_config "," duration "," status "," monitor_slug "," check_in_id "]}," Sentry CheckInEvent initialize":{"type":"method","name":"initialize","children":[],"call":[" check_in_id= ","SecureRandom  uuid delete ","SecureRandom  uuid "," monitor_config= "," duration= "," status= "," monitor_slug= "]}," Sentry Breadcrumb level=":{"type":"method","name":"level=","children":[],"call":["level == "]}," Sentry SpotlightTransport conn":{"type":"method","name":"conn","children":[],"call":["connection use_ssl= "," Net HTTP  new ","sidecar port ","sidecar hostname "," URI "," Net HTTP  new  use_ssl= "," URI  port "," URI  hostname "]}," Sentry SpotlightTransport on_error":{"type":"method","name":"on_error","children":[],"call":[]}," Sentry SpotlightTransport send_data":{"type":"method","name":"send_data","children":[],"call":[" log_debug ","@failed >= "]}," Sentry SpotlightTransport endpoint":{"type":"method","name":"endpoint","children":[],"call":[]}," Sentry SpotlightTransport initialize":{"type":"method","name":"initialize","children":[],"call":[" log_debug ","configuration spotlight ","configuration spotlight is_a? "]}," Sentry HTTPTransport generate_auth_header":{"type":"method","name":"generate_auth_header","children":[],"call":["Sentry  + ","(send\n  (lvar :fields) :map) join ","fields map ","fields []= ","@dsn secret_key ","@dsn public_key ","Sentry  utc_now to_i ","Sentry  utc_now ","Sentry  utc_Sentry  utc_now to_i  to_i ","Sentry  utc_Sentry  utc_now to_i  "]}," Sentry HTTPTransport endpoint":{"type":"method","name":"endpoint","children":[],"call":["@dsn envelope_endpoint "]}," Sentry Session aggregation_key":{"type":"method","name":"aggregation_key","children":[],"call":["Time  utc "," started min "," started "," started hour "," started day "," started month "," started year "]}," Sentry Redis Client logging":{"type":"method","name":"logging","children":[],"call":["Sentry Redis  new instrument ","Sentry Redis  new "," db "," port "," host "]}," Sentry Redis record_span":{"type":"method","name":"record_span","children":[],"call":["sentry_span set_timestamp ","Sentry  utc_now to_f ","Sentry  utc_now ","sentry_span set_data "," server_description ","sentry_span set_description "," commands_description "," tap ","transaction start_child ","transaction sampled ","Sentry  get_current_scope get_transaction ","Sentry  get_current_scope ","transaction start_child  set_timestamp ","transaction start_child  set_data ","transaction start_child  set_description ","Sentry  get_current_scope get_transaction  start_child ","Sentry  get_current_scope get_transaction  sampled ","Sentry  get_current_scope get_Sentry  get_current_scope get_transaction  "]}," Sentry Net HTTP finish_sentry_span":{"type":"method","name":"finish_sentry_span","children":[],"call":["sentry_span set_timestamp ","Sentry  utc_now to_f ","Sentry  utc_now ","Sentry  initialized? "]}," Sentry Net HTTP start_sentry_span":{"type":"method","name":"start_sentry_span","children":[],"call":["span start_child ","Sentry  utc_now to_f ","Sentry  utc_now ","span sampled == ","span sampled "," from_sentry_sdk? ","Sentry  get_current_scope get_span ","Sentry  get_current_scope ","Sentry  initialized? ","Sentry  get_current_scope get_span  start_child ","Sentry  get_current_scope get_span  sampled == ","Sentry  get_current_scope get_span  sampled ","Sentry  get_current_scope get_Sentry  get_current_scope get_span  "]}," Sentry Net HTTP record_sentry_span":{"type":"method","name":"record_sentry_span","children":[],"call":[" finish_sentry_span ","sentry_span set_data ","res code to_i ","res code ","sentry_span set_description ","request_info [] "," extract_request_info ","Sentry  initialized? "," extract_request_info  [] "," extract_ extract_request_info  "]}," Sentry RequestInterface encode_to_utf_8":{"type":"method","name":"encode_to_utf_8","children":[],"call":["value scrub ","value valid_encoding? ! ","value valid_encoding? ","value dup force_encoding ","value dup ","value respond_to? ","value encoding != ","value encoding ","value scrub  scrub ","value dup force_encoding  scrub ","value scrub  valid_encoding? ! ","value dup force_encoding  valid_encoding? ! ","value scrub  valid_encoding? ","value dup force_encoding  valid_encoding? ","value scrub  dup force_encoding ","value dup force_encoding  dup force_encoding ","value scrub  dup ","value dup force_encoding  dup ","value scrub  respond_to? ","value dup force_encoding  respond_to? ","value scrub  encoding != ","value dup force_encoding  encoding != ","value scrub  encoding ","value dup force_encoding  encoding "]}}