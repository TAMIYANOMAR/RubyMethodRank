{" Grit version":{"type":"method","name":"version","children":[],"call":[]}," Grit log":{"type":"method","name":"log","children":[],"call":[" logger debug "," logger "]}," Grit Tree <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," Grit Tree blobs":{"type":"method","name":"blobs","children":[],"call":["v kind_of? "," contents select "," contents "]}," Grit Tree trees":{"type":"method","name":"trees","children":[],"call":["v kind_of? "," contents select "," contents "]}," Grit Tree inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Tree basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," name "]}," Grit Tree /":{"type":"method","name":"/","children":[],"call":["c name == ","c name "," contents find "," contents ","acc / ","file split inject ","file split ","file =~ "]}," Grit Tree content_from_string":{"type":"method","name":"content_from_string","children":[],"call":[" raise ","Submodule  create ","Blob  create ","Tree  create ","text split "]}," Grit Tree create_initialize":{"type":"method","name":"create_initialize","children":[],"call":[" instance_variable_set ","atts each "]}," Grit Tree create":{"type":"method","name":"create","children":[],"call":[]}," Grit Tree lazy_source":{"type":"method","name":"lazy_source","children":[],"call":["Tree  construct "]}," Grit Tree construct_initialize":{"type":"method","name":"construct_initialize","children":[],"call":["@contents compact! ","@contents << "," content_from_string ","text split each ","text split "]}," Grit Tree construct":{"type":"method","name":"construct","children":[],"call":[]}," Grit Tag get_commit":{"type":"method","name":"get_commit","children":[],"call":["Commit  create "," raise ","sha == ","@repo_ref git commit_from_sha ","@repo_ref git ","@repo_ref git commit_from_sha  == ","@repo_ref git commit_from_@repo_ref git commit_from_sha  "]}," Grit Tag lazy_source":{"type":"method","name":"lazy_source","children":[],"call":["parsed [] "," class parse_tag_data "," class ","data empty? "," commit authored_date "," commit "," commit author "," commit short_message "," commit repo git cat_ref "," name "," commit repo git "," commit repo "," class parse_tag_data  [] "," class parse_tag_ commit repo git cat_ref  "," commit repo git cat_ref  empty? "]}," Grit Tag parse_tag_data":{"type":"method","name":"parse_tag_data","children":[],"call":[]}," Grit Tag create_tag_object":{"type":"method","name":"create_tag_object","children":[],"call":[]}," Grit Submodule inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Submodule basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," name "]}," Grit Submodule config":{"type":"method","name":"config","children":[],"call":[]}," Grit Submodule url":{"type":"method","name":"url","children":[],"call":["lookup [] ","acc []= ","config [] [] ","config [] ","config keys inject ","config keys "," class config "," class "," class config  [] [] "," class config  [] "," class config  keys inject "," class config  keys "," class  class config  "]}," Grit Submodule create_initialize":{"type":"method","name":"create_initialize","children":[],"call":[" instance_variable_set ","(str \"@\") to_sym ","atts each "]}," Grit Submodule create":{"type":"method","name":"create","children":[],"call":[]}," Grit Status ls_files":{"type":"method","name":"ls_files","children":[],"call":["hsh []= ","info split ","line split ","lines split each ","lines split ","@base git ls_files ","@base git ","@base working_dir ","@base git ls_files  split each ","@base git ls_files  split "]}," Grit Status diff_index":{"type":"method","name":"diff_index","children":[],"call":["hsh []= ","mode_src to_s [] ","mode_src to_s ","info split ","line split ","@base git diff_index split each ","@base git diff_index split ","@base git diff_index ","@base git ","@base working_dir "]}," Grit Status diff_files":{"type":"method","name":"diff_files","children":[],"call":["hsh []= ","mode_src to_s [] ","mode_src to_s ","info split ","line split ","@base git diff_files split each ","@base git diff_files split ","@base git diff_files ","@base git ","@base working_dir "]}," Grit Status construct_status":{"type":"method","name":"construct_status","children":[],"call":["@files []= ","StatusFile  new ","@files each ","@files [] merge! ","@files [] "," diff_index each "," diff_index "," diff_files each "," diff_files ","File  directory? ! ","File  directory? ","@files [] ! ","Dir  glob ","Dir  chdir ","@base working_dir "," ls_files ","full_file gsub ","File  join "," ls_files  []= ","@full_file gsub s []= "," ls_files  each ","@full_file gsub s each "," ls_files  [] merge! ","@full_file gsub s [] merge! "," ls_files  [] ","@full_file gsub s [] "," diff_full_file gsub s each "," diff_full_file gsub s "," ls_files  [] ! ","@full_file gsub s [] ! "," ls_full_file gsub s ","full_full_file gsub  gsub "]}," Grit Status StatusFile blob":{"type":"method","name":"blob","children":[],"call":["@base object ","type == "]}," Grit Status StatusFile initialize":{"type":"method","name":"initialize","children":[],"call":["hash [] "]}," Grit Status each":{"type":"method","name":"each","children":[],"call":["@files each "]}," Grit Status []":{"type":"method","name":"[]","children":[],"call":["@files [] "]}," Grit Status pretty":{"type":"method","name":"pretty","children":[],"call":["out << ","\n\tuntrac  + ","file untracked to_s ","file untracked ","\n\tstage   + ","file stage to_s ","file stage ","\n\ttype    + ","file type to_s ","file type ","\n\tsha(i)  + + + ","file mode_index to_s ","file mode_index ","\n\tsha(i)  + + ","\n\tsha(i)  + ","file sha_index to_s ","file sha_index ","\n\tsha(r)  + + + ","file mode_repo to_s ","file mode_repo ","\n\tsha(r)  + + ","\n\tsha(r)  + ","file sha_repo to_s ","file sha_repo ","file path "," each "]}," Grit Status untracked":{"type":"method","name":"untracked","children":[],"call":["f untracked ","@files select "]}," Grit Status deleted":{"type":"method","name":"deleted","children":[],"call":["f type == ","f type ","@files select "]}," Grit Status added":{"type":"method","name":"added","children":[],"call":["f type == ","f type ","@files select "]}," Grit Status changed":{"type":"method","name":"changed","children":[],"call":["f type == ","f type ","@files select "]}," Grit Status initialize":{"type":"method","name":"initialize","children":[],"call":[" construct_status "]}," String b":{"type":"method","name":"b","children":[],"call":[" dup "," dup force_encoding "]}," String getord":{"type":"method","name":"getord","children":[],"call":[" [] ord "," [] "]}," Grit Repo inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Repo rename":{"type":"method","name":"rename","children":[],"call":[" git fs_move "," git "]}," Grit Repo update_ref":{"type":"method","name":"update_ref","children":[],"call":[" git fs_write "," git ","commit_sha size != ","commit_sha size ","commit_sha ! "]}," Grit Repo index":{"type":"method","name":"index","children":[],"call":["Index  new "]}," Grit Repo config":{"type":"method","name":"config","children":[],"call":["Config  new "]}," Grit Repo alternates=":{"type":"method","name":"alternates=","children":[],"call":[" git fs_write ","alts join "," git ","alts empty? "," raise ","File  exist? ","alts each "]}," Grit Repo alternates":{"type":"method","name":"alternates","children":[],"call":[" git fs_read strip split "," git fs_read strip "," git fs_read "," git "]}," Grit Repo gc_auto":{"type":"method","name":"gc_auto","children":[],"call":[" git gc "," git "]}," Grit Repo disable_daemon_serve":{"type":"method","name":"disable_daemon_serve","children":[],"call":[" git fs_delete "," git "]}," Grit Repo enable_daemon_serve":{"type":"method","name":"enable_daemon_serve","children":[],"call":[" git fs_write "," git "]}," Grit Repo archive_to_file":{"type":"method","name":"archive_to_file","children":[],"call":[" git archive "," git ","options []= ","Process  waitpid ","pipe_rd close "," spawn ","pipe_wr close ","IO  pipe "," open ","git_archive_cmd << "," git git_dir ","Git  git_binary "]}," Grit Repo archive_tar_gz":{"type":"method","name":"archive_tar_gz","children":[],"call":[" git archive "," git ","options []= "]}," Grit Repo archive_tar":{"type":"method","name":"archive_tar","children":[],"call":[" git archive "," git ","options []= "]}," Grit Repo commit_diff":{"type":"method","name":"commit_diff","children":[],"call":["Commit  diff "]}," Grit Repo diff":{"type":"method","name":"diff","children":[],"call":["Diff  list_from_string ","diff sub ","diff =~ "," git native "," git ","diff sub  sub "," git native  sub ","diff sub  =~ "," git native  =~ "]}," Grit Repo log":{"type":"method","name":"log","children":[],"call":["Commit  list_from_string "," git log "," git ","default_options merge "]}," Grit Repo blob":{"type":"method","name":"blob","children":[],"call":["Blob  create "]}," Grit Repo object":{"type":"method","name":"object","children":[],"call":["object sha= ","Grit GitRuby GitObject  from_raw ","Grit GitRuby Internal RawObject  new ","obj [] "," git get_git_object "," git ","Grit GitRuby GitObject  from_raw  sha= "," git get_git_object ect sha= ","Grit GitRuby GitObject  from_Grit GitRuby Internal RawObject  new  "," git get_git_object  [] "," git get_git_Grit GitRuby GitObject  from_raw  "," git get_git_ git get_git_object ect "]}," Grit Repo lstree":{"type":"method","name":"lstree","children":[],"call":["entry []= ","size strip to_i ","size strip ","size strip != ","stuff split ","a split ","lines map ","revs split "," git native "," git ","opts []= ","options [] ","revs split  map "," git native  split "]}," Grit Repo tree":{"type":"method","name":"tree","children":[],"call":["Tree  construct "]}," Grit Repo diff_objects":{"type":"method","name":"diff_objects","children":[],"call":["revs uniq compact ","revs uniq ","Grit  no_quote= ","revs << "," commit tree id "," commit tree "," commit ","a split first split [] ","a split first split ","a split first ","a split "," git native split map "," git native split "," git native "," git ","r [] ","r [] != "," git diff_tree strip split map "," git diff_tree strip split "," git diff_tree strip "," git diff_tree ","a split evs uniq compact ","a split evs uniq ","Ga split it  no_quote= ","a split evs << "," commit ta split ee id "," commit ta split ee ","a split fia split st split [] ","a split fia split st split ","a split fia split st ","a split  [] ","a split  [] != "," git diff_ta split ee sta split ip split map "," git diff_ta split ee sta split ip split "," git diff_ta split ee sta split ip "," git diff_ta split ee "]}," Grit Repo objects_between":{"type":"method","name":"objects_between","children":[],"call":[" objects "]}," Grit Repo commit_objects":{"type":"method","name":"commit_objects","children":[],"call":["a [] "," git rev_list split map "," git rev_list split "," git rev_list "," git ","refs split ","refs respond_to? ","refs split  split ","refs split  respond_to? "]}," Grit Repo objects":{"type":"method","name":"objects","children":[],"call":["a [] "," git rev_list split map "," git rev_list split "," git rev_list "," git ","refs split ","refs respond_to? ","refs split  split ","refs split  respond_to? "]}," Grit Repo commit_deltas_from":{"type":"method","name":"commit_deltas_from","children":[],"call":["Commit  find_all first ","Commit  find_all ","(send\n  (lvar :other_repo_refs) :-\n  (lvar :repo_refs)) map ","other_repo_refs - ","other_repo git rev_list strip split ","other_repo git rev_list strip ","other_repo git rev_list ","other_repo git "," git rev_list strip split "," git rev_list strip "," git rev_list "," git ","(send\n  (lvar :other_repo git rev_list strip split ) :-\n  (lvar :repo_refs)) map ","(send\n  (lvar :other_ git rev_list strip split ) :-\n  (lvar : git rev_list strip split )) map ","other_repo git rev_list strip split  - ","other_ git rev_list strip split  - "]}," Grit Repo commit":{"type":"method","name":"commit","children":[],"call":["Commit  find_all first ","Commit  find_all "]}," Grit Repo commit_count":{"type":"method","name":"commit_count","children":[],"call":["Commit  count "]}," Grit Repo commits_since":{"type":"method","name":"commits_since","children":[],"call":["Commit  find_all ","(pair\n  (sym :since)\n  (lvar :since)) merge "]}," Grit Repo fast_forwardable?":{"type":"method","name":"fast_forwardable?","children":[],"call":["mb == "," git native strip "," git native "," git "," git native strip  == "]}," Grit Repo commits_between":{"type":"method","name":"commits_between","children":[],"call":["Commit  find_all reverse ","Commit  find_all "]}," Grit Repo commits":{"type":"method","name":"commits","children":[],"call":["Commit  find_all "]}," Grit Repo commit_stats":{"type":"method","name":"commit_stats","children":[],"call":["CommitStats  find_all "]}," Grit Repo delete_ref":{"type":"method","name":"delete_ref","children":[],"call":[" git native "," git "]}," Grit Repo refs_list":{"type":"method","name":"refs_list","children":[],"call":["shatype split ","line split ","refs split map ","refs split "," git for_each_ref "," git "," git for_each_ref  split map "," git for_each_ref  split "]}," Grit Repo refs":{"type":"method","name":"refs","children":[],"call":["(send\n  (const nil :Head) :find_all\n  (self)) flatten ","Remote  find_all ","Tag  find_all ","Head  find_all "]}," Grit Repo remotes_fetch_needed":{"type":"method","name":"remotes_fetch_needed","children":[],"call":[" remote_fetch ","remotes each "]}," Grit Repo remote_fetch":{"type":"method","name":"remote_fetch","children":[],"call":[" git fetch "," git "]}," Grit Repo remote_add":{"type":"method","name":"remote_add","children":[],"call":[" git remote "," git "]}," Grit Repo remote_list":{"type":"method","name":"remote_list","children":[],"call":[" git list_remotes "," git "]}," Grit Repo remote_count":{"type":"method","name":"remote_count","children":[],"call":["Remote  count_all "]}," Grit Repo remotes":{"type":"method","name":"remotes","children":[],"call":["Remote  find_all "]}," Grit Repo recent_tag_name":{"type":"method","name":"recent_tag_name","children":[],"call":["value size zero? ","value size "," git describe to_s strip "," git describe to_s "," git describe ","committish to_s ","(pair\n  (sym :always)\n  (true)) update "," git "," git describe to_s strip  size zero? "," git describe to_s strip  size "]}," Grit Repo tag_count":{"type":"method","name":"tag_count","children":[],"call":["Tag  count_all "]}," Grit Repo tags":{"type":"method","name":"tags","children":[],"call":["Tag  find_all "]}," Grit Repo status":{"type":"method","name":"status","children":[],"call":["Status  new "]}," Grit Repo blame_tree":{"type":"method","name":"blame_tree","children":[],"call":["final_array []= "," commit ","commit_array each "," git blame_tree "," git "," git blame_tree  each "]}," Grit Repo remove":{"type":"method","name":"remove","children":[],"call":[" git rm ","files flatten "," git "]}," Grit Repo add":{"type":"method","name":"add","children":[],"call":[" git add ","files flatten "," git "]}," Grit Repo commit_all":{"type":"method","name":"commit_all","children":[],"call":[" git commit "," git "]}," Grit Repo commit_index":{"type":"method","name":"commit_index","children":[],"call":[" git commit "," git "]}," Grit Repo head":{"type":"method","name":"head","children":[],"call":["Head  current "]}," Grit Repo is_head?":{"type":"method","name":"is_head?","children":[],"call":[" get_head "]}," Grit Repo get_head":{"type":"method","name":"get_head","children":[],"call":["h name == ","h name "," heads find "," heads "]}," Grit Repo head_count":{"type":"method","name":"head_count","children":[],"call":["Head  count_all "]}," Grit Repo heads":{"type":"method","name":"heads","children":[],"call":["Head  find_all "]}," Grit Repo blame":{"type":"method","name":"blame","children":[],"call":["Blame  new "]}," Grit Repo description":{"type":"method","name":"description","children":[],"call":[" git fs_read chomp "," git fs_read "," git "]}," Grit Repo parse_batch":{"type":"method","name":"parse_batch","children":[],"call":["objects << ","parser parse_batch ","io read ","size to_i + ","size to_i ","io seek ","parser ! ","type == ","BATCH_PARSERS  [] ","line split ","io gets ","StringIO  new ","io read s << ","BATCH_PARSERS  []  parse_batch ","StringIO  new  read ","StringIO  new  seek ","BATCH_PARSERS  []  ! ","io gets  split ","StringIO  new  gets "]}," Grit Repo batch":{"type":"method","name":"batch","children":[],"call":[" parse_batch "," git native ","shas * "," git ","shas flatten! "]}," Grit Repo fork_bare_from":{"type":"method","name":"fork_bare_from","children":[],"call":["Repo  new "," path "," git clone "," git ","Git  new fs_mkdir ","Git  new ","default_options merge "]}," Grit Repo fork_bare":{"type":"method","name":"fork_bare","children":[],"call":["Repo  new "," git clone "," path "," git ","Git  new fs_mkdir ","Git  new ","default_options merge "]}," Grit Repo init_bare_or_open":{"type":"method","name":"init_bare_or_open","children":[],"call":[]}," Grit Repo init_bare":{"type":"method","name":"init_bare","children":[],"call":[]}," Grit Repo init":{"type":"method","name":"init","children":[],"call":[]}," Grit Repo initialize":{"type":"method","name":"initialize","children":[],"call":[" git= ","Git  new "," path "," raise ","NoSuchPathError  new ","InvalidGitRepositoryError  new ","File  exist? "," path= ","options [] ","epath =~ ","File  join "," working_dir= ","File  expand_path "," working_dir ","File  expand_path  =~ "]}," Grit Head current":{"type":"method","name":"current","children":[],"call":[]}," Grit Ref get_commit":{"type":"method","name":"get_commit","children":[],"call":["Commit  create "]}," Grit Ref inspect":{"type":"method","name":"inspect","children":[],"call":[" class name "," class "]}," Grit Ref commit":{"type":"method","name":"commit","children":[],"call":[" get_commit "]}," Grit Ref initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit Ref prefix":{"type":"method","name":"prefix","children":[],"call":[" name to_s gsub downcase "," name to_s gsub "," name to_s "," name "]}," Grit Ref find_all":{"type":"method","name":"find_all","children":[],"call":[" new ","ref split ","refs split map ","refs split ","repo git refs "," prefix ","repo git ","repo git refs  split map ","repo git refs  split ","repo git repo git refs  "]}," Grit Ref count_all":{"type":"method","name":"count_all","children":[],"call":["refs split size ","refs split ","repo git refs "," prefix ","repo git ","repo git refs  split size ","repo git refs  split ","repo git repo git refs  "]}," Grit Merge inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Merge initialize":{"type":"method","name":"initialize","children":[],"call":["@text size ","@text values ","@text [] [] << ","@text [] [] ","@text [] ","(str \"^>>>>>>> (.*?)\") match ","line == ","(str \"^<<<<<<< (.*?)\") match ","lines each ","str split ","@text values  size ","@text values  values ","@text values  [] [] << ","@text values  [] [] ","@text values  [] ","str split  each "]}," Lazy lazy_reader":{"type":"method","name":"lazy_reader","children":[],"call":[" instance_variable_set ","(or-asgn\n  (ivasgn :@lazy_source)\n  (send nil :lazy_source)) send "," lazy_source "," instance_variable_get "," instance_variable_defined? "," define_method ","args each "]}," Lazy extended":{"type":"method","name":"extended","children":[],"call":[]}," Grit Index write_blob":{"type":"method","name":"write_blob","children":[],"call":[" repo git put_raw_object "," repo git "," repo "]}," Grit Index write_tree":{"type":"method","name":"write_tree","children":[],"call":[" repo git put_raw_object "," repo git "," repo ","tr size ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ","tree_contents sort map ","tree_contents sort ","tree_contents delete ","tree_contents []= ","k + ","%s %s\u0000%s % ","(lvar :sha) pack "," write_tree ","now_tree / "," write_blob ","k split last ","k split ","mode to_i to_s ","mode to_i ","sha size == ","sha size ","tree each ","obj name ","obj mode to_i to_s ","obj mode to_i ","obj mode ","obj class == ","obj class ","(send\n  (lvar :obj) :id) pack ","obj id ","now_tree contents each ","now_tree contents "," read_tree ","now_tree is_a? "," tree ","tree ! ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join  size ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee_contents) :sort) :map) join ","(send\n  (send\n    (lvar : tree _contents) :sort) :map) join ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee_contents sort map "," tree _contents sort map ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee_contents sort "," tree _contents sort ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee_contents delete "," tree _contents delete ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee_contents []= "," tree _contents []= ","k split last  + ","obj name  + ","(lvar :(lvar :sha) pack ) pack ","(lvar : write_tree ) pack ","(lvar : write_blob ) pack ","(lvar :(send\n  (lvar :obj) :id) pack ) pack ","(lvar :sha) pack split last  ","(lvar :sha) pacobj name  "," write_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee "," write_ tree  ","now_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee / "," read_tree  / ","now_ tree  / ","k split last  split last ","obj name  split last ","k split last  split ","obj name  split ","mode to_i to_s  to_i to_s ","mode to_i to_s  to_i ","(lvar :sha) pack  size == "," write_tree  size == "," write_blob  size == ","(send\n  (lvar :obj) :id) pack  size == ","(lvar :sha) pack  size "," write_tree  size "," write_blob  size ","(send\n  (lvar :obj) :id) pack  size ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee each "," tree  each ","obj mode to_i to_s  to_i to_s ","obj mode to_i to_s  to_i ","obj mode to_i to_s  ","(send\n  (lvar :obj) :id) pack split last  ","(send\n  (lvar :obj) :id) pacobj name  ","now_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee contents each "," read_tree  contents each ","now_ tree  contents each ","now_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee contents "," read_tree  contents ","now_ tree  contents "," read_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee "," read_ tree  ","now_(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee is_a? "," read_tree  is_a? ","now_ tree  is_a? "," (send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee ","  tree  ","(send\n  (send\n    (lvar :tree_contents) :sort) :map) join ee ! "," tree  ! "]}," Grit Index commit":{"type":"method","name":"commit","children":[],"call":[" repo update_ref "," repo "," repo git put_raw_object "," repo git ","contents size ","contents join ","contents << ","(str \"committer\") join ","committer output ","(str \"author\") join ","author output ","Time  now ","Actor  new ","config [] ","Config  new ","(str \"parent\") join ","parents each ","(str \"tree\") join ","tree_sha1 == "," write_tree "," current_tree "," tree ","parents [] ","parents is_a? ","contents join  size ","contents join  join ","contents join  << ","(str \"parents [] \") join ","parents []  output ","Config  new  [] ","parents []  each "," write_tree  == ","parents []  [] ","parents []  is_a? "]}," Grit Index read_tree":{"type":"method","name":"read_tree","children":[],"call":[" current_tree= "," repo tree "," repo "]}," Grit Index delete":{"type":"method","name":"delete","children":[],"call":[" add "]}," Grit Index add":{"type":"method","name":"add","children":[],"call":["current []= ","current [] ","path each "," tree ","path pop ","path split "," tree  []= "," tree  [] ","path split  each ","path split  pop ","path split  split "]}," Grit Index initialize":{"type":"method","name":"initialize","children":[],"call":[" current_tree= "," tree= "," repo= "]}," Grit Git transform_options":{"type":"method","name":"transform_options","children":[],"call":["args << "," e ","opt to_s gsub ","opt to_s ","options delete ","options [] == ","options [] ","opt to_s size == ","opt to_s size ","options keys each ","options keys "]}," Grit Git wild_sh":{"type":"method","name":"wild_sh","children":[],"call":["process err ","process out ","Child  new ","Child  new  err ","Child  new  out "]}," Grit Git sh":{"type":"method","name":"sh","children":[],"call":[" raise ","process err ","process out ","Child  new ","Git  git_max_size ","Git  git_timeout ","Child  new  err ","Child  new  out "]}," Grit Git run":{"type":"method","name":"run","children":[],"call":["Grit  log ","Grit  debug "," wild_sh "," sh "," e ","(send\n  (lvar :opt_args) :+\n  (lvar :ext_args)) join ","opt_args + ","cmd to_s gsub ","cmd to_s ","Git  git_binary "," git_dir ","Grit  no_quote ","a [] chr == ","a [] chr ","a [] ","a == ","(send\n  (lvar :args) :reject) map ","a empty? ","args reject ","RUBY_PLATFORM  downcase =~ ","RUBY_PLATFORM  downcase "," transform_options ","stdin write "," lambda ","options delete ","base nil? ","timeout nil? ","(send\n  (lvar : transform_options ) :+\n  (lvar :ext_args)) join "," transform_options  + "]}," Grit Git timeout_after":{"type":"method","name":"timeout_after","children":[],"call":["Timeout  timeout ","seconds > "," class git_timeout "," class ","seconds == "," class git_timeout  > "," class git_timeout  == "]}," Grit Git options_to_argv":{"type":"method","name":"options_to_argv","children":[],"call":["argv << ","key to_s tr ","key to_s ","val == ","val to_s ","key to_s size == ","key to_s size ","options each "]}," Grit Git method_missing":{"type":"method","name":"method_missing","children":[],"call":[" native "]}," Grit Git native":{"type":"method","name":"native","children":[],"call":[" raise ","argv join ","process out ","process err ","status exitstatus ","CommandFailed  new ","status success? ! ","status success? ","process status ","Grit  log ","Grit  debug ","Child  new ","argv + ","Grit Git  git_max_size ","timeout == ","Grit Git  git_timeout ","argv concat "," options_to_argv ","argv << ","cmd to_s tr ","cmd to_s "," git_dir ","Git  git_binary ","options delete ","base nil? ","timeout nil? "," run "," prefix ","args [] to_s [] == ","args [] to_s [] ","args [] to_s ","args [] ","a empty? ","args reject! ","a to_s ","args map! ","args first ","args [] is_a? ","args size == ","args size "," work_tree ","Child  new  out ","Child  new  err ","process status  exitprocess status  ","process status  success? ! ","process status  success? ","process process status  ","Child  new  status ","options delete  == ","Grit Git  git_options delete  ","options delete  nil? ","args first  [] to_s [] == ","args first  [] to_s [] ","args first  [] to_s ","args first  [] ","args first  reject! ","args first  map! ","args first  first ","args first  [] is_a? ","args first  size == ","args first  size "]}," Grit Git apply_patch":{"type":"method","name":"apply_patch","children":[],"call":[" native to_s chomp! "," native to_s "," native ","options [] ","options merge ","options dup ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :env))\n  (hash)) merge! "," create_tempfile ","options []= ","options [] dup ","options is_a? ! ","options is_a? ","options dup  [] ","options dup  merge ","options dup  dup ","(or-asgn\n  (send\n    (lvar :options dup ) :[]\n    (sym :env))\n  (hash)) merge! ","options dup  []= ","options dup  [] dup ","options dup  is_a? ! ","options dup  is_a? "]}," Grit Git get_patch":{"type":"method","name":"get_patch","children":[],"call":[" native ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :env))\n  (hash)) merge! ","options [] "," create_tempfile ","options [] dup ","options dup ","options is_a? ! ","options is_a? ","(or-asgn\n  (send\n    (lvar :options dup ) :[]\n    (sym :env))\n  (hash)) merge! ","options dup  [] ","options dup  [] dup ","options dup  dup ","options dup  is_a? ! ","options dup  is_a? "]}," Grit Git check_applies":{"type":"method","name":"check_applies","children":[],"call":["fail exitstatus "," native ","options merge ","options dup ","options []= ","(or-asgn\n  (send\n    (lvar :options) :[]\n    (sym :env))\n  (hash)) merge! ","options [] "," create_tempfile ","options [] dup ","options is_a? ! ","options is_a? ","options dup  merge ","options dup  dup ","options dup  []= ","(or-asgn\n  (send\n    (lvar :options dup ) :[]\n    (sym :env))\n  (hash)) merge! ","options dup  [] ","options dup  [] dup ","options dup  is_a? ! ","options dup  is_a? "]}," Grit Git commit_from_sha":{"type":"method","name":"commit_from_sha","children":[],"call":["object object ","object type == ","object type ","git_ruby_repo get_object_by_sha1 ","GitRuby Repository  new "," git_dir ","git_ruby_repo get_object_by_sha1  git_ruby_repo get_object_by_sha1  ","git_ruby_repo get_object_by_sha1  type == ","git_ruby_repo get_object_by_sha1  type ","git_ruby_repo get_git_ruby_repo get_object_by_sha1 _by_sha1 ","GitRuby Repository  new  get_object_by_sha1 "]}," Grit Git create_tempfile":{"type":"method","name":"create_tempfile","children":[],"call":["File  unlink ","Tempfile  new path ","Tempfile  new ","Tempfile  new Tempfile  new path  "]}," Grit Git list_remotes":{"type":"method","name":"list_remotes","children":[],"call":["Dir  glob ","Dir  chdir ","File  join "," git_dir "]}," Grit Git fs_chmod":{"type":"method","name":"fs_chmod","children":[],"call":["FileUtils  chmod_R ","File  join "," git_dir "]}," Grit Git fs_mkdir":{"type":"method","name":"fs_mkdir","children":[],"call":["FileUtils  mkdir_p ","File  join "," git_dir "]}," Grit Git fs_move":{"type":"method","name":"fs_move","children":[],"call":["FileUtils  mv ","File  join "," git_dir "]}," Grit Git fs_delete":{"type":"method","name":"fs_delete","children":[],"call":["FileUtils  rm_rf ","File  join "," git_dir "]}," Grit Git fs_write":{"type":"method","name":"fs_write","children":[],"call":["f write ","File  open ","FileUtils  mkdir_p ","File  dirname ","File  join "," git_dir "," raise ","File  absolute_path == ","File  absolute_path ","File  absolute_File  join  == ","File  absolute_File  join  "]}," Grit Git fs_read":{"type":"method","name":"fs_read","children":[],"call":["File  read ","File  join "," git_dir "," raise ","File  absolute_path == ","File  absolute_path ","File  absolute_File  join  == ","File  absolute_File  join  "]}," Grit Git fs_exist?":{"type":"method","name":"fs_exist?","children":[],"call":["File  exist? ","File  join "," git_dir "," raise ","File  absolute_path == ","File  absolute_path ","File  absolute_File  join  == ","File  absolute_File  join  "]}," Grit Git shell_escape":{"type":"method","name":"shell_escape","children":[],"call":["str to_s gsub gsub ","str to_s gsub ","str to_s "]}," Grit Git initialize":{"type":"method","name":"initialize","children":[],"call":[" bytes_read= "," work_tree= ","git_dir gsub "," git_dir= ","options [] "]}," Grit Git with_timeout":{"type":"method","name":"with_timeout","children":[],"call":[]}," Grit Git git_binary":{"type":"method","name":"git_binary","children":[],"call":["File  exist? ","(send\n  (send\n    (send\n      (const nil :ENV) :[]\n      (str \"PATH\")) :split\n    (str \":\")) :map) find ","File  join ","ENV  [] split map ","ENV  [] split ","ENV  [] "]}," Grit Git select_existing_objects":{"type":"method","name":"select_existing_objects","children":[],"call":[" object_exists? ","object_ids select "]}," Grit Git object_exists?":{"type":"method","name":"object_exists?","children":[],"call":[" ruby_git object_exists? "," ruby_git "]}," Grit Git get_git_object":{"type":"method","name":"get_git_object","children":[],"call":[" ruby_git get_raw_object_by_sha1 to_hash "," ruby_git get_raw_object_by_sha1 "," ruby_git "]}," Grit Git get_raw_object":{"type":"method","name":"get_raw_object","children":[],"call":[" ruby_git get_raw_object_by_sha1 content "," ruby_git get_raw_object_by_sha1 "," ruby_git "]}," Grit Git put_raw_object":{"type":"method","name":"put_raw_object","children":[],"call":[" ruby_git put_raw_object "," ruby_git "]}," Grit Git exist?":{"type":"method","name":"exist?","children":[],"call":["File  exist? "," git_dir "]}," Grit Git CommandFailed initialize":{"type":"method","name":"initialize","children":[],"call":["message << << ","message << ","err empty? ","err nil? "]}," Grit Git GitTimeout initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby clean_paths":{"type":"method","name":"clean_paths","children":[],"call":["new_commits []= ","file chop ","file [] == ","file [] ","file size - ","file size ","commit_array each ","file chop  chop ","file chop  [] == ","file chop  [] ","file chop  size - ","file chop  size "]}," Grit GitRuby looking_for":{"type":"method","name":"looking_for","children":[],"call":["looking_for << ","e type == ","e type ","e name ","File  join ","(or\n  (or\n    (send\n      (lvar :path) :==\n      (str \"\"))\n    (send\n      (lvar :path) :==\n      (str \".\")))\n  (send\n    (lvar :path) :==\n    (str \"./\"))) ! ","path == "," ruby_git get_object_by_sha1 entry each "," ruby_git get_object_by_sha1 entry "," ruby_git get_object_by_sha1 "," ruby_git "," ruby_git get_subtree "," rev_parse "]}," Grit GitRuby try_run":{"type":"method","name":"try_run","children":[],"call":[" raise ","Grit Git GitTimeout  new "," command ","ret size ","Timeout  timeout "," class git_timeout "," class "]}," Grit GitRuby ruby_git":{"type":"method","name":"ruby_git","children":[],"call":["Repository  new "]}," Grit GitRuby file_type":{"type":"method","name":"file_type","children":[],"call":[" ruby_git cat_file_type to_s "," ruby_git cat_file_type "," ruby_git "," try_run "]}," Grit GitRuby file_size":{"type":"method","name":"file_size","children":[],"call":[" ruby_git cat_file_size to_s "," ruby_git cat_file_size "," ruby_git "," try_run "]}," Grit GitRuby tags":{"type":"method","name":"tags","children":[],"call":["refs join ","already []= ","refs << ","already [] ! ","already [] ","m [] ","next_line [] chomp ","next_line [] ","next_line [] == ","lines [] ","i + ","m [] sub ","Regexp  new match ! ","Regexp  new match ","Regexp  new ","^ + ","(str \"^(\\\\w{40}) (.*?)$\") match ","lines each_with_index ","File  readlines ","File  file? ","ref sub ","File  read chomp ","File  read ","File  file? ! ","files each ","Dir  glob ","prefix + ","Dir  chdir "," repo path "," repo ","File  join ","(str \"^(\\w{40}) (.*?)$\") match  [] ","lines []  [] chomp ","next_line [] cho(str \"^(\\w{40}) (.*?)$\") match p ","lines []  [] ","lines []  [] == ","File  readlines  [] ","(str \"^(\\w{40}) (.*?)$\") match  [] sub ","Regexp  new (str \"^(\\w{40}) (.*?)$\") match atch ! ","Regexp  new (str \"^(\\w{40}) (.*?)$\") match atch ","(str \"^(\\\\w{40}) (.*?)$\") (str \"^(\\w{40}) (.*?)$\") match atch ","File  readlines  each_with_index ","File  readFile  readlines  ","File  read cho(str \"^(\\w{40}) (.*?)$\") match p ","Dir  glob  each ","File  join  + "]}," Grit GitRuby refs":{"type":"method","name":"refs","children":[],"call":["refs join ","already []= ","refs << ","m [] ","already [] ! ","already [] ","m [] sub ","Regexp  new match ! ","Regexp  new match ","Regexp  new ","^ + ","(str \"^(\\\\w{40}) (.*?)$\") match ","File  readlines each ","File  readlines ","File  file? ","ref sub ","File  read chomp ","File  read ","File  file? ! ","files each ","Dir  glob ","prefix + ","Dir  chdir ","File  join ","(str \"^(\\w{40}) (.*?)$\") match  [] ","(str \"^(\\w{40}) (.*?)$\") match  [] sub ","Regexp  new (str \"^(\\w{40}) (.*?)$\") match atch ! ","Regexp  new (str \"^(\\w{40}) (.*?)$\") match atch ","(str \"^(\\\\w{40}) (.*?)$\") (str \"^(\\w{40}) (.*?)$\") match atch ","File  read cho(str \"^(\\w{40}) (.*?)$\") match p ","Dir  glob  each ","File  join  + "]}," Grit GitRuby rev_parse":{"type":"method","name":"rev_parse","children":[],"call":[" method_missing chomp "," method_missing ","m [] chomp ","m [] ","Regexp  new match ! ","Regexp  new match ","Regexp  new ","Regexp  escape + ","Regexp  escape ","(str \"^(\\\\w{40}) refs/.+?/(.*?)$\") match ","File  readlines each ","File  readlines ","File  file? ","File  join ","File  read chomp ","File  read ","string chomp ","(str \"^[0-9a-f]{40}$\") match "," rev_parse ","string split ","string =~ "," raise ","string inspect ","string is_a? ","string !~ "," (str \"^(\\w{40}) refs/.+?/(.*?)$\") match ethod_(str \"^(\\w{40}) refs/.+?/(.*?)$\") match issing cho(str \"^(\\w{40}) refs/.+?/(.*?)$\") match p "," (str \"^(\\w{40}) refs/.+?/(.*?)$\") match ethod_(str \"^(\\w{40}) refs/.+?/(.*?)$\") match issing ","(str \"^(\\w{40}) refs/.+?/(.*?)$\") match  [] cho(str \"^(\\w{40}) refs/.+?/(.*?)$\") match p ","(str \"^(\\w{40}) refs/.+?/(.*?)$\") match  [] ","Regexp  new (str \"^(\\w{40}) refs/.+?/(.*?)$\") match atch ! ","Regexp  new (str \"^(\\w{40}) refs/.+?/(.*?)$\") match atch ","(str \"^(\\\\w{40}) refs/.+?/(.*?)$\") (str \"^(\\w{40}) refs/.+?/(.*?)$\") match atch ","File  read cho(str \"^(\\w{40}) refs/.+?/(.*?)$\") match p ","string cho(str \"^(\\w{40}) refs/.+?/(.*?)$\") match p ","(str \"^[0-9a-f]{40}$\") (str \"^(\\w{40}) refs/.+?/(.*?)$\") match atch "]}," Grit GitRuby rev_list":{"type":"method","name":"rev_list","children":[],"call":[" ruby_git rev_list "," ruby_git "," try_run "," method_missing ","aref is_a? "," rev_parse ","refs first "," file_index commits_from join + "," file_index commits_from join "," file_index commits_from "," file_index ","options size == ","options size ","refs size > ","refs size ","(send\n  (send\n    (lvar :options) :keys) :-\n  (lvar :allowed_options)) size > ","(send\n  (send\n    (lvar :options) :keys) :-\n  (lvar :allowed_options)) size ","options keys - ","options keys ","options delete ","options [] to_i == ","options [] to_i ","options [] ","refs empty? "," rev_parse  is_a? ","arefs first  is_a? ","refs first s first ","refs first s size > ","refs first s size ","refs first s empty? "]}," Grit GitRuby diff":{"type":"method","name":"diff","children":[],"call":[" ruby_git diff "," ruby_git "," try_run "]}," Grit GitRuby ls_tree":{"type":"method","name":"ls_tree","children":[],"call":[" ruby_git ls_tree ","options delete ","paths flatten "," ruby_git "," rev_parse "]}," Grit GitRuby cat_ref":{"type":"method","name":"cat_ref","children":[],"call":[" cat_file "," rev_parse "]}," Grit GitRuby cat_file":{"type":"method","name":"cat_file","children":[],"call":[" ruby_git cat_file "," ruby_git "," try_run ","options [] "," file_size "," file_type "]}," Grit GitRuby init":{"type":"method","name":"init","children":[],"call":[" method_missing ","Grit GitRuby Repository  init ","options size == ","options size "]}," Grit GitRuby Repository load_packs":{"type":"method","name":"load_packs","children":[],"call":["@packs << ","pack cache_objects ","@options [] ","Grit GitRuby Internal PackStorage  new ","File  join ","(send\n  (lvar :entry) :=~\n  (regexp\n    (str \"\\\\.pack$\")\n    (regopt :i))) ! ","entry =~ ","dir each ","Dir  open ","File  exists? ! ","File  exists? ","@loaded_packs << ","@Grit GitRuby Internal PackStorage  new s << ","Grit GitRuby Internal PackStorage  new  cache_objects ","(send\n  (lvar :entry) :=~\n  (regexp\n    (str \"\\\\.Grit GitRuby Internal PackStorage  new $\")\n    (regopt :i))) ! ","@loaded_Grit GitRuby Internal PackStorage  new s << "]}," Grit GitRuby Repository load_alternate_packs":{"type":"method","name":"load_alternate_packs","children":[],"call":[" load_alternate_packs "," load_packs ","@loaded_packs include? ","File  join "," each_alternate_path "]}," Grit GitRuby Repository initpacks":{"type":"method","name":"initpacks","children":[],"call":[" load_alternate_packs "," git_path "," load_packs "," close "]}," Grit GitRuby Repository load_loose":{"type":"method","name":"load_loose","children":[],"call":["@loose << ","Grit GitRuby Internal LooseStorage  new ","File  exists? ! ","File  exists? ","@loaded << "]}," Grit GitRuby Repository load_alternate_loose":{"type":"method","name":"load_alternate_loose","children":[],"call":[" load_alternate_loose "," load_loose ","File  exist? ! ","File  exist? ","@loaded include? "," each_alternate_path "]}," Grit GitRuby Repository each_alternate_path":{"type":"method","name":"each_alternate_path","children":[],"call":["File  expand_path ","File  join ","path [] == ","path [] ","line chomp ","File  readlines each ","File  readlines ","File  exists? ! ","File  exists? ","File  expand_line chomp  ","line chomp  [] == ","line chomp  [] "]}," Grit GitRuby Repository initloose":{"type":"method","name":"initloose","children":[],"call":[" load_alternate_loose "," git_path "," load_loose "]}," Grit GitRuby Repository git_path":{"type":"method","name":"git_path","children":[],"call":[]}," Grit GitRuby Repository close":{"type":"method","name":"close","children":[],"call":["pack close ","@packs each "]}," Grit GitRuby Repository add_file":{"type":"method","name":"add_file","children":[],"call":[]}," Grit GitRuby Repository create_initial_config":{"type":"method","name":"create_initial_config","children":[],"call":[]}," Grit GitRuby Repository init":{"type":"method","name":"init","children":[],"call":[]}," Grit GitRuby Repository look_for_commits":{"type":"method","name":"look_for_commits","children":[],"call":["options [] "," look_for_commits ","looking_for size <= ","looking_for size ","looking_for delete ","found_data << ","diff assoc ","looking_for each "," quick_diff "," get_subtree ","commit parent each ","commit parent ","found_data assoc ","commit parent size == ","commit parent size "," get_object_by_sha1 ","@already_searched []= ","@already_searched [] "," look_for_ get_object_by_sha1 s "," quick_diff  assoc "," quick_ quick_diff  "," get_object_by_sha1  parent each "," get_object_by_sha1  parent "," get_object_by_sha1  parent size == "," get_object_by_sha1  parent size "]}," Grit GitRuby Repository blame_tree":{"type":"method","name":"blame_tree","children":[],"call":["arr []= ","commit_array [] ","commit_array [] gsub ","commits each "," look_for_commits ","looking_for << ","File  join ","e name "," get_object_by_sha1 entry each "," get_object_by_sha1 entry "," get_object_by_sha1 ","tree_sha ! "," get_subtree "," look_for_commits  each "," look_for_ look_for_commits  "," get_subtree  ! "]}," Grit GitRuby Repository get_subtree":{"type":"method","name":"get_subtree","children":[],"call":["entry sha1 ","(send\n  (send\n    (lvar :tree) :entry) :select) first ","e name == ","e name ","tree entry select ","tree entry "," get_object_by_sha1 ","paths each ","path split ","(or\n  (or\n    (send\n      (lvar :path) :==\n      (str \"\"))\n    (send\n      (lvar :path) :==\n      (str \".\")))\n  (send\n    (lvar :path) :==\n    (str \"./\"))) ! ","path == "," get_object_by_sha1 tree ","(send\n  (send\n    (lvar :tree) :entry) :select) first  sha1 ","(send\n  (send\n    (lvar :tree) :(send\n  (send\n    (lvar :tree) :entry) :select) first ) :select) first ","(send\n  (send\n    (lvar : get_object_by_sha1 ) :entry) :select) first ","tree (send\n  (send\n    (lvar :tree) :entry) :select) first  select "," get_object_by_sha1  entry select ","tree (send\n  (send\n    (lvar :tree) :entry) :select) first  "," get_object_by_sha1  entry ","path split  each "," get_object_by_sha1  get_object_by_sha1  "]}," Grit GitRuby Repository files_changed?":{"type":"method","name":"files_changed?","children":[],"call":["files include? ","path_limiter to_a each ","path_limiter to_a ","c first ","mod map "," quick_diff "," quick_diff  map "]}," Grit GitRuby Repository quick_diff":{"type":"method","name":"quick_diff","children":[],"call":["changed << ","hsh [] "," quick_diff ","t1_tree ! ","File  join ","t1 [] [] ","t1 [] ","t2 [] each ","t2 [] ","t2_tree [] ","hsh [] != ","t2_tree ! ","t2 [] [] ","t1 [] each "," quick_what_changed + "," quick_what_changed "," list_tree "," changed ","tree1 == "," quick_what_changed +  << "," list_tree _tree ! "," list_tree  [] [] "," list_tree  [] "," list_tree  [] each "," list_tree _tree [] "," quick_what_ quick_what_changed +  + "," quick_what_ quick_what_changed +  ","  quick_what_changed +  "]}," Grit GitRuby Repository quick_what_changed":{"type":"method","name":"quick_what_changed","children":[],"call":["changed << ","hsh [] ","File  join ","t1 [] [] ! ","t1 [] [] ","t1 [] ","t1 ! ","t2 [] each ","t2 [] ","t2_file [] ","hsh [] != ","t2_file ! ","t2 [] [] ","t1 [] each "]}," Grit GitRuby Repository diff":{"type":"method","name":"diff","children":[],"call":["patch << ","header + ","output lstrip ","output << ","oldhunk diff ","hunk unshift ","hunk overlaps? ","lines > ","hunk file_length_difference ","Difference LCS Hunk  new ","diffs each ","header << ","\n+++  + ","\n---  + ","\n + + + + ","sha2 [] ","\n + + + ","\n + + ","sha1 [] ","\n + ","options [] ","path gsub ","diffs empty? ","Difference LCS  diff ","e chomp ","fileB split map! ","fileB split ","fileA split map! ","fileA split "," cat_file ","qdiff sort each ","qdiff sort "," quick_diff "," get_object_by_sha1 tree "," get_object_by_sha1 ","commit_obj1 parent first ","commit_obj1 parent ","commit_obj1 tree ","oldDifference LCS Hunk  new  diff ","Difference LCS Hunk  new  unshift ","Difference LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Difference LCS Hunk  new  file_length_difference ","Difference LCS  diff  each ","Difference LCS  diff  empty? "," cat_file  split map! "," cat_file  split "," quick_diff  sort each "," quick_diff  sort "," get_object_by_sha1  parent first "," get_object_by_sha1  parent "," get_object_by_sha1  tree "]}," Grit GitRuby Repository walk_log":{"type":"method","name":"walk_log","children":[],"call":["array << ","c committer date ","c committer ","c raw_log ","opts [] "," walk_log ","array size + ","array size "," files_changed? ! "," files_changed? "," get_object_by_sha1 tree "," get_object_by_sha1 ","c tree ","c parent each ","c parent ","(send\n  (send\n    (lvar :array) :size) :+\n  (lvar :total_size)) >= ","opts [] ! ","(send\n  (send\n    (lvar :array) :size) :+\n  (lvar :total_size)) < ","c parent first ! ","c parent first ","opts [] < ","opts [] is_a? ","opts [] > ","c type != ","c type ","GitObject  from_raw "," get_object_by_sha1 object ","o type == ","o type "," get_raw_object_by_sha1 ","@already_searched []= ","@already_searched [] ","GitObject  from_raw  GitObject  from_raw ommitter date "," get_object_by_sha1   get_object_by_sha1 ommitter date ","c c get_raw_object_by_sha1 mmitter date ","GitObject  from_raw  GitObject  from_raw ommitter "," get_object_by_sha1   get_object_by_sha1 ommitter ","c c get_raw_object_by_sha1 mmitter ","GitObject  from_raw  raw_log "," get_object_by_sha1  raw_log ","c raw_l get_raw_object_by_sha1 g "," get_raw_object_by_sha1 pts [] "," walk_l get_raw_object_by_sha1 g "," files_GitObject  from_raw hanged? ! "," files_ get_object_by_sha1 hanged? ! "," files_GitObject  from_raw hanged? "," files_ get_object_by_sha1 hanged? "," get_objeGitObject  from_raw t_by_sha1 tree "," get_obje get_object_by_sha1 t_by_sha1 tree "," get_ get_raw_object_by_sha1 bject_by_sha1 tree "," get_objeGitObject  from_raw t_by_sha1 "," get_obje get_object_by_sha1 t_by_sha1 "," get_ get_raw_object_by_sha1 bject_by_sha1 ","GitObject  from_raw  tree "," get_object_by_sha1  tree ","GitObject  from_raw  parent eaGitObject  from_raw h "," get_object_by_sha1  parent ea get_object_by_sha1 h ","GitObject  from_raw  parent "," get_object_by_sha1  parent ","(send\n  (send\n    (lvar :array) :size) :+\n  (lvar :t get_raw_object_by_sha1 tal_size)) >= "," get_raw_object_by_sha1 pts [] ! ","(send\n  (send\n    (lvar :array) :size) :+\n  (lvar :t get_raw_object_by_sha1 tal_size)) < ","GitObject  from_raw  parent first ! "," get_object_by_sha1  parent first ! ","GitObject  from_raw  parent first "," get_object_by_sha1  parent first "," get_raw_object_by_sha1 pts [] < "," get_raw_object_by_sha1 pts [] is_a? "," get_raw_object_by_sha1 pts [] > ","GitObject  from_raw  type != "," get_object_by_sha1  type != ","GitObject  from_raw  type "," get_object_by_sha1  type ","GitObjeGitObject  from_raw t  from_raw ","GitObje get_object_by_sha1 t  from_raw ","GitObject  fr get_raw_object_by_sha1 m_raw "," get_objeGitObject  from_raw t_by_sha1 objeGitObject  from_raw t "," get_obje get_object_by_sha1 t_by_sha1 obje get_object_by_sha1 t "," get_ get_raw_object_by_sha1 bject_by_sha1  get_raw_object_by_sha1 bject "," get_raw_object_by_sha1  type == "," get_raw_object_by_sha1  type "," get_raw_objeGitObject  from_raw t_by_sha1 "," get_raw_obje get_object_by_sha1 t_by_sha1 "," get_raw_ get_raw_object_by_sha1 bject_by_sha1 ","@already_searGitObject  from_raw hed []= ","@already_sear get_object_by_sha1 hed []= ","@already_searGitObject  from_raw hed [] ","@already_sear get_object_by_sha1 hed [] "]}," Grit GitRuby Repository rev_list":{"type":"method","name":"rev_list","children":[],"call":["(send\n  (lvar :log) :map) join ","log map ","options [] == ","options [] ","log [] ","(lvasgn :opt_len\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :max_count)) :to_i)) < ","log size ","options [] to_i "," truncate_arr ","(send\n  (lvar :log) :sort) reverse ","a [] <=> ","b [] ","a [] ","log sort "," log ","sha is_a? ","(send\n  (lvar :log [] ) :map) join ","(send\n  (lvar : truncate_arr ) :map) join ","(send\n  (lvar :(send\n  (lvar :log) :sort) reverse ) :map) join ","(send\n  (lvar : log ) :map) join ","log []  map "," truncate_arr  map ","(send\n  (lvar :log) :sort) reverse  map "," log  map ","log []  [] "," truncate_arr  [] ","(send\n  (lvar :log) :sort) reverse  [] "," log  [] ","(lvasgn :options [] to_i \n  (send\n    (send\n      (lvar :options) :[]\n      (sym :max_count)) :to_i)) < ","log []  size "," truncate_arr  size ","(send\n  (lvar :log) :sort) reverse  size "," log  size ","(send\n  (lvar :log [] ) :sort) reverse ","(send\n  (lvar : truncate_arr ) :sort) reverse ","(send\n  (lvar :(send\n  (lvar :log) :sort) reverse ) :sort) reverse ","(send\n  (lvar : log ) :sort) reverse ","log []  sort "," truncate_arr  sort ","(send\n  (lvar :log) :sort) reverse  sort "," log  sort "," log []  ","  truncate_arr  "," (send\n  (lvar :log) :sort) reverse  ","  log  "]}," Grit GitRuby Repository truncate_arr":{"type":"method","name":"truncate_arr","children":[],"call":["new_arr << ","a [] == ","a [] ","arr each "]}," Grit GitRuby Repository log":{"type":"method","name":"log","children":[],"call":[" walk_log "]}," Grit GitRuby Repository ls_tree_path":{"type":"method","name":"ls_tree_path","children":[],"call":["mod_tree << ","(lvar :info) join ","File  join ","ent split ","tree each ","p split [] == ","p split [] ","p split ","tree select ","tree split "," raise ","tree nil? "," ls_tree_path ","paths join ","paths join + ","last == ","dir_name split [] ","dir_name split ","dir_name ! ","(send\n  (send\n    (lvar :tree) :split\n    (str \"\\n\")) :select) first ","tree split select ","paths shift "," get_raw_tree ","paths first ","paths size == ","paths size ","path [] ","path size - ","path size ","path split ","path =~ ","mod_tree split  << ","mod_ get_raw_tree  << ","tree split  each "," get_raw_tree  each ","tree split  select "," get_raw_tree  select ","tree split  split "," get_raw_tree  split ","tree split  nil? "," get_raw_tree  nil? "," ls_tree split _path "," ls_ get_raw_tree _path ","path split  join ","path split  join + ","path []  == ","(send\n  (send\n    (lvar :tree) :split\n    (str \"\\n\")) :select) first  split [] ","(send\n  (send\n    (lvar :tree) :split\n    (str \"\\n\")) :select) first  split ","(send\n  (send\n    (lvar :tree) :split\n    (str \"\\n\")) :select) first  ! ","(send\n  (send\n    (lvar :tree split ) :split\n    (str \"\\n\")) :select) first ","(send\n  (send\n    (lvar : get_raw_tree ) :split\n    (str \"\\n\")) :select) first ","tree split  split select "," get_raw_tree  split select ","path split  shift "," get_raw_tree split  "," get_raw_ get_raw_tree  ","path split  first ","path split  size == ","path split  size "]}," Grit GitRuby Repository get_raw_trees":{"type":"method","name":"get_raw_trees","children":[],"call":["out << ","line gsub + ","line gsub ","line + ","path empty? "," get_raw_trees ","type == ","line split "," cat_file split each "," cat_file split "," cat_file "]}," Grit GitRuby Repository get_raw_tree":{"type":"method","name":"get_raw_tree","children":[],"call":[" cat_file "," get_raw_trees ","o type == ","o type "," get_object_by_sha1 tree "," get_object_by_sha1 "," get_object_by_sha1 object "," get_raw_object_by_sha1 "," get_raw_ get_object_by_sha1 tree s "," get_raw_object_by_sha1  type == "," get_raw_object_by_sha1  type "," get_object_by_sha1  get_object_by_sha1 tree  "," get_ get_raw_object_by_sha1 bject_by_sha1 tree "," get_ get_raw_object_by_sha1 bject_by_sha1 "," get_ get_raw_object_by_sha1 bject_by_sha1  get_raw_object_by_sha1 bject "," get_raw_ get_raw_object_by_sha1 bject_by_sha1 "]}," Grit GitRuby Repository ls_tree":{"type":"method","name":"ls_tree","children":[],"call":[" get_raw_tree ","part join "," ls_tree_path ","paths each ","paths size > ","paths size "]}," Grit GitRuby Repository list_tree":{"type":"method","name":"list_tree","children":[],"call":["data [] []= ","e sha1 ","e format_mode ","e name ","data [] ","e format_type "," get_object_by_sha1 entry each "," get_object_by_sha1 entry "," get_object_by_sha1 "]}," Grit GitRuby Repository cat_file":{"type":"method","name":"cat_file","children":[],"call":[" get_object_by_sha1 raw_content "," get_object_by_sha1 "]}," Grit GitRuby Repository cat_file_size":{"type":"method","name":"cat_file_size","children":[],"call":[" get_raw_object_by_sha1 content size "," get_raw_object_by_sha1 content "," get_raw_object_by_sha1 "]}," Grit GitRuby Repository cat_file_type":{"type":"method","name":"cat_file_type","children":[],"call":[" get_raw_object_by_sha1 type "," get_raw_object_by_sha1 "]}," Grit GitRuby Repository in_loose?":{"type":"method","name":"in_loose?","children":[],"call":["lsobj [] "," loose each "," loose "]}," Grit GitRuby Repository in_packs?":{"type":"method","name":"in_packs?","children":[],"call":["pack [] "," packs each "," packs "]}," Grit GitRuby Repository object_exists?":{"type":"method","name":"object_exists?","children":[],"call":[" in_packs? "," initpacks "," in_loose? ","(lvar :sha1) pack "]}," Grit GitRuby Repository put_raw_object":{"type":"method","name":"put_raw_object","children":[],"call":[" loose first put_raw_object "," loose first "," loose "]}," Grit GitRuby Repository get_object_by_sha1":{"type":"method","name":"get_object_by_sha1","children":[],"call":["GitObject  from_raw ","r ! "," get_raw_object_by_sha1 ","GitObject  f get_raw_object_by_sha1 om_ get_raw_object_by_sha1 aw "," get_raw_object_by_sha1  ! "," get_ get_raw_object_by_sha1 aw_object_by_sha1 "]}," Grit GitRuby Repository cached":{"type":"method","name":"cached","children":[],"call":[]}," Grit GitRuby Repository get_raw_object_by_sha1":{"type":"method","name":"get_raw_object_by_sha1","children":[],"call":[" raise ","pack [] "," packs each "," packs "," initpacks ","lsobj [] "," loose each "," loose ","(send\n  (lvar :sha1o) :chomp) pack ","sha1o chomp ","sha1o is_a? ! ","sha1o is_a? ","sha1o empty? ","sha1o nil? ","lspack [] bj [] ","lslsobj [] bj [] "," lpack [] pack [] se each "," llsobj [] lsobj [] se each "," lpack [] pack [] se "," llsobj [] lsobj [] se ","(send\n  (lvar :sha1pack [] ) :chpack [] mp) pack ","(send\n  (lvar :sha1lsobj [] ) :chlsobj [] mp) pack ","(send\n  (lvar :(send\n  (lvar :sha1o) :chomp) pack o) :chomp) pack ","sha1pack []  chpack [] mp ","sha1lsobj []  chlsobj [] mp ","(send\n  (lvar :sha1o) :chomp) pack o chomp ","sha1pack []  is_a? ! ","sha1lsobj []  is_a? ! ","(send\n  (lvar :sha1o) :chomp) pack o is_a? ! ","sha1pack []  is_a? ","sha1lsobj []  is_a? ","(send\n  (lvar :sha1o) :chomp) pack o is_a? ","sha1pack []  empty? ","sha1lsobj []  empty? ","(send\n  (lvar :sha1o) :chomp) pack o empty? ","sha1pack []  nil? ","sha1lsobj []  nil? ","(send\n  (lvar :sha1o) :chomp) pack o nil? "]}," Grit GitRuby Repository show":{"type":"method","name":"show","children":[],"call":[" puts ","p [] content ","p [] ","s unpack ","p [] type to_s == ","p [] type to_s ","p [] type ","p each_sha1 ","p name "," packs each "," packs "]}," Grit GitRuby Repository packs":{"type":"method","name":"packs","children":[],"call":[" initpacks "]}," Grit GitRuby Repository loose":{"type":"method","name":"loose","children":[],"call":[" initloose "]}," Grit GitRuby Repository initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Internal RawObject to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," Grit GitRuby Internal RawObject sha1":{"type":"method","name":"sha1","children":[],"call":["Digest SHA1  digest ","%s %d\u0000 % + ","%s %d\u0000 % ","@content length "]}," Grit GitRuby Internal RawObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Internal LooseStorage legacy_loose_object?":{"type":"method","name":"legacy_loose_object?","children":[],"call":["word % == ","word % ","buf getord == ","buf getord ","(send\n  (send\n    (lvar :buf) :getord\n    (int 0)) :<<\n  (int 8)) + ","buf getord << ","(send\n  (send\n    (lvar :buf) :getord\n    (int 0)) :<<\n  (int 8)) +  % == ","(send\n  (send\n    (lvar :buf) :getord\n    (int 0)) :<<\n  (int 8)) +  % "]}," Grit GitRuby Internal LooseStorage unpack_object_header_gently":{"type":"method","name":"unpack_object_header_gently","children":[],"call":[" raise ","(sym :blob) include? ! ","(sym :blob) include? ","OBJ_TYPES  [] ","(send\n  (lvar :c) :&\n  (int 127)) << ","c & ","buf getord ","buf bytesize <= ","buf bytesize ","c & != ","(send\n  (lvar :c) :>>\n  (int 4)) & ","c >> ","(sym :blob) inbuf getord lude? ! ","(sym :blob) inbuf getord lude? ","(send\n  (lvar :buf getord ) :&\n  (int 127)) << ","buf getord  & ","buf bytec &  <= ","buf bytec &  ","buf getord  & != ","(send\n  (lvar :buf getord ) :>>\n  (int 4)) & ","buf getord  >> "]}," Grit GitRuby Internal LooseStorage verify_header":{"type":"method","name":"verify_header","children":[],"call":[]}," Grit GitRuby Internal LooseStorage calculate_sha":{"type":"method","name":"calculate_sha","children":[],"call":[]}," Grit GitRuby Internal LooseStorage put_raw_object":{"type":"method","name":"put_raw_object","children":[],"call":["f write ","File  open ","FileUtils  mkdir_p ","@directory + + ","sha1 [] ","@directory + ","Zlib Deflate  deflate ","File  exists? ! ","File  exists? ","@directory + + + + ","@directory + + + ","Digest SHA1  hexdigest ","header + ","LooseStorage  verify_header ","content bytesize to_s ","content bytesize ","Digest SHA1  hexdigest  [] ","Zlib Deflate  deflate  bytesize to_s ","content bytecontent bytesize to_s  to_s ","Zlib Deflate  deflate  bytesize ","content bytecontent bytesize to_s  "]}," Grit GitRuby Internal LooseStorage get_raw_object":{"type":"method","name":"get_raw_object","children":[],"call":["RawObject  new "," raise ","content bytesize != ","content bytesize ","Zlib Inflate  inflate ","buf [] "," unpack_object_header_gently ","size to_i ","type to_sym ","size !~ ","(str \"blob\") include? ! ","(str \"blob\") include? ","header split ","content ! ","header ! ","content split "," legacy_loose_object? ","buf bytesize < ","buf bytesize ","Zlib Inflate  inflate  bytesize != ","content bytesize to_i  != ","Zlib Inflate  inflate  bytesize ","content bytesize to_i  ","size to_i  to_i ","type to_sym  to_sym ","size to_i  !~ ","Zlib Inflate  inflate  ! ","Zlib Inflate  inflate  split ","buf bytesize to_i  < ","buf bytesize to_i  "]}," Grit GitRuby Internal LooseStorage []":{"type":"method","name":"[]","children":[],"call":[" get_raw_object ","f read "," open ","@directory + + + + ","sha1 [] ","@directory + + + ","@directory + + ","@directory + ","sha1 unpack [] ","sha1 unpack ","sha1 unpack []  [] ","sha1 unpack []  unpack [] ","sha1 unpack []  unpack "]}," Grit GitRuby Internal LooseStorage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Internal FileWindow []":{"type":"method","name":"[]","children":[],"call":["@file read ","@file read getord ","len ! ","offset + ","@file seek ","@offset != "," raise ","idx class ","idx last - + ","idx exclude_end? ","idx last - ","idx first ","idx last ","idx [] ","idx length == ","idx length ","idx first  + ","@idx first  != ","idx []  class ","idx []  last - + ","idx []  exclude_end? ","idx []  last - ","idx []  first ","idx []  last ","idx []  [] ","idx []  length == ","idx []  length "]}," Grit GitRuby Internal FileWindow unmap":{"type":"method","name":"unmap","children":[],"call":[]}," Grit GitRuby Internal FileWindow initialize":{"type":"method","name":"initialize","children":[],"call":["version == "]}," Grit GitRuby Tag type":{"type":"method","name":"type","children":[],"call":[]}," Grit GitRuby Tag raw_content":{"type":"method","name":"raw_content","children":[],"call":["(send\n  (str \"object %s\\ntype %s\\ntag %s\\ntagger %s\\n\\n\") :%\n  (array\n    (ivar :@object)\n    (ivar :@type)\n    (ivar :@tag)\n    (ivar :@tagger))) + ","@message to_s ","object %s\ntype %s\ntag %s\ntagger %s\n\n % "]}," Grit GitRuby Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Tag from_raw":{"type":"method","name":"from_raw","children":[],"call":[]}," Grit GitRuby Commit raw_log":{"type":"method","name":"raw_log","children":[],"call":["(send\n  (send\n    (ivar :@message) :split\n    (str \"\\n\")) :map) join + ","(send\n  (send\n    (ivar :@message) :split\n    (str \"\\n\")) :map) join ","     + ","@message split map ","@message split ","@headers + "]}," Grit GitRuby Commit raw_content":{"type":"method","name":"raw_content","children":[],"call":["tree %s\n%sauthor %s\ncommitter %s\n\n % + ","tree %s\n%sauthor %s\ncommitter %s\n\n % ","(send\n  (ivar :@parent) :collect) join ","parent %s\n % ","@parent collect "]}," Grit GitRuby Commit type":{"type":"method","name":"type","children":[],"call":[]}," Grit GitRuby Commit initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Commit from_raw":{"type":"method","name":"from_raw","children":[],"call":[]}," Grit GitRuby Tree actual_raw":{"type":"method","name":"actual_raw","children":[],"call":[]}," Grit GitRuby Tree raw_content":{"type":"method","name":"raw_content","children":[],"call":["(send\n  (ivar :@entry) :collect) join ","(send\n  (array\n    (send\n      (lvar :e) :format_mode)\n    (send\n      (lvar :e) :format_type)\n    (send\n      (lvar :e) :sha1)) :join\n  (str \" \")) join ","e name ","(send\n  (lvar :e) :format_mode) join ","e sha1 ","e format_type ","e format_mode ","@entry collect ","e safe_name "]}," Grit GitRuby Tree type":{"type":"method","name":"type","children":[],"call":[]}," Grit GitRuby Tree initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Tree from_raw":{"type":"method","name":"from_raw","children":[],"call":[]}," Grit GitRuby read_bytes_until":{"type":"method","name":"read_bytes_until","children":[],"call":[]}," Grit GitRuby DirectoryEntry raw":{"type":"method","name":"raw","children":[],"call":["%o %s\u0000%s % ","(ivar :@sha1) pack "]}," Grit GitRuby DirectoryEntry format_mode":{"type":"method","name":"format_mode","children":[],"call":["%06o % "]}," Grit GitRuby DirectoryEntry format_type":{"type":"method","name":"format_type","children":[],"call":[" type "]}," Grit GitRuby DirectoryEntry type=":{"type":"method","name":"type=","children":[],"call":[" raise ","(send\n  (ivar :@mode) :&\n  (send\n    (const nil :S_IFMT) :~)) | ","@mode & ","S_IFMT  ~ ","(send\n  (ivar :(send\n  (ivar :@mode) :&\n  (send\n    (const nil :S_IFMT) :~)) | ) :&\n  (send\n    (const nil :S_IFMT) :~)) | ","(send\n  (ivar :@mode) :&\n  (send\n    (const nil :S_IFMT) :~)) |  & "]}," Grit GitRuby DirectoryEntry type":{"type":"method","name":"type","children":[],"call":[" raise ","@mode & "]}," Grit GitRuby DirectoryEntry initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(const nil :S_IFLNK) include? ! ","(const nil :S_IFLNK) include? ","@mode & ","(send\n  (ivar :@mode) :<<\n  (int 3)) | ","i - ","0 getord ","@mode << ","mode each_byte ","(send\n  (ivar :@mode) :<<\n  (int 3)) |  & ","(send\n  (ivar :(send\n  (ivar :@mode) :<<\n  (int 3)) | ) :<<\n  (int 3)) | ","(send\n  (ivar :@mode) :<<\n  (int 3)) |  << "]}," Grit GitRuby Blob raw_content":{"type":"method","name":"raw_content","children":[],"call":[]}," Grit GitRuby Blob type":{"type":"method","name":"type","children":[],"call":[]}," Grit GitRuby Blob initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit GitRuby Blob from_raw":{"type":"method","name":"from_raw","children":[],"call":[]}," Grit GitRuby GitObject sha1":{"type":"method","name":"sha1","children":[],"call":["Digest SHA1  hexdigest ","%s %d\u0000 % + "," raw_content ","%s %d\u0000 % "," raw_content length "," type "]}," Grit GitRuby GitObject raw_content":{"type":"method","name":"raw_content","children":[],"call":[" raise "]}," Grit GitRuby GitObject type":{"type":"method","name":"type","children":[],"call":[" raise "]}," Grit GitRuby GitObject initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," Grit GitRuby GitObject from_raw":{"type":"method","name":"from_raw","children":[],"call":[]}," Grit GitRuby UserInfo to_s":{"type":"method","name":"to_s","children":[],"call":["%s <%s> %s %+05d % ","@date to_i "]}," Grit GitRuby UserInfo initialize":{"type":"method","name":"initialize","children":[],"call":["(if\n  (send\n    (send\n      (lvar :m) :[]\n      (int 4)) :==\n    (str \"-\"))\n  (int -1)\n  (int 1)) * "," Integer ","m [] ","m [] == ","Time  at ","str match ","m ! ","(str \"^(.*?) <(.*)> (\\\\d+) ([+-])0*(\\\\d+?)$\") match ","Time  now ","(if\n  (send\n    (send\n      (lvar :(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match ) :[]\n      (int 4)) :==\n    (str \"-\"))\n  (int -1)\n  (int 1)) * ","(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match  [] ","(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match  [] == ","Ti(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match e  at ","str (str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match atch ","(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match  ! ","(str \"^(.*?) <(.*)> (\\\\d+) ([+-])0*(\\\\d+?)$\") (str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match atch ","Ti(str \"^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$\") match e  now "]}," Grit CommitDb setup_tables":{"type":"method","name":"setup_tables","children":[],"call":["@db << ","@db [] << ","@db [] "]}," Grit CommitDb update_db":{"type":"method","name":"update_db","children":[],"call":[]}," Grit CommitDb rev_list":{"type":"method","name":"rev_list","children":[],"call":[]}," Grit CommitDb initialize":{"type":"method","name":"initialize","children":[],"call":["Sequel  open "," setup_tables ","File  exists? ! ","File  exists? ","File  join ","@git git_dir "]}," Grit Diff list_from_string":{"type":"method","name":"list_from_string","children":[],"call":[]}," Grit Diff initialize":{"type":"method","name":"initialize","children":[],"call":["similarity_index to_i ","@b_blob nil? ","@a_blob nil? ","Blob  create ","b_blob =~ ","a_blob =~ ","Blob  create  nil? "]}," Grit Config config_lines":{"type":"method","name":"config_lines","children":[],"call":["@repo git config split ","@repo git config ","@repo git "]}," Grit Config load_config":{"type":"method","name":"load_config","children":[],"call":["hash []= ","line split "," config_lines map "," config_lines "]}," Grit Config data":{"type":"method","name":"data","children":[],"call":[" load_config "]}," Grit Config keys":{"type":"method","name":"keys","children":[],"call":[" data keys "," data "]}," Grit Config fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","IndexError  new "," data [] "," data "]}," Grit Config []":{"type":"method","name":"[]","children":[],"call":[" data [] "," data "]}," Grit Config []=":{"type":"method","name":"[]=","children":[],"call":["@repo git config ","@repo git "]}," Grit Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit DiffStat inspect":{"type":"method","name":"inspect","children":[],"call":[" deletions "," additions "," filename "]}," Grit DiffStat net":{"type":"method","name":"net","children":[],"call":[" additions - "," deletions "," additions "]}," Grit DiffStat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit CommitStats to_hash":{"type":"method","name":"to_hash","children":[],"call":[" total "," deletions "," additions "," files "," id "]}," Grit CommitStats to_diffstat":{"type":"method","name":"to_diffstat","children":[],"call":["DiffStat  new "," files map "," files "]}," Grit CommitStats inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit CommitStats list_from_string":{"type":"method","name":"list_from_string","children":[],"call":[]}," Grit CommitStats find_all":{"type":"method","name":"find_all","children":[],"call":[]}," Grit CommitStats initialize":{"type":"method","name":"initialize","children":[],"call":["a [] ","files inject "]}," Grit Commit to_hash":{"type":"method","name":"to_hash","children":[],"call":[" committed_date xmlschema "," committed_date "," authored_date xmlschema "," authored_date "," committer email "," committer "," committer name "," author email "," author "," author name "," message "," tree id "," tree ","p id "," parents map "," parents "," id "]}," Grit Commit author_string":{"type":"method","name":"author_string","children":[],"call":["%s <%s> %s %+05d % "," authored_date to_i "," authored_date "," author email "," author "," author name "]}," Grit Commit actor":{"type":"method","name":"actor","children":[],"call":[]}," Grit Commit inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Commit patch_id":{"type":"method","name":"patch_id","children":[],"call":["patch_line =~ ","@repo git native ","@repo git ","@repo git show ","@repo git native  =~ ","@repo git @repo git show  "]}," Grit Commit notes":{"type":"method","name":"notes","children":[],"call":["ret []= ","n data ","note name ","note commit tree / "," id ","note commit tree ","note commit ","notes each ","Note  find_all ","note commit tree /  data ","note commit tree / ote note commit tree / ame ","note commit tree / ote commit tree / ","note commit tree / ote commit tree ","note commit tree / ote commit ","note commit tree / otes each ","Note  find_all  each ","Note  finote commit tree / d_all "]}," Grit Commit to_patch":{"type":"method","name":"to_patch","children":[],"call":["@repo git format_patch "," to_s ","@repo git "]}," Grit Commit date":{"type":"method","name":"date","children":[],"call":[]}," Grit Commit sha":{"type":"method","name":"sha","children":[],"call":[]}," Grit Commit to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Grit Commit stats":{"type":"method","name":"stats","children":[],"call":["@repo commit_stats [] [] ","@repo commit_stats [] ","@repo commit_stats "," sha ","@repo commit_@repo commit_stats [] []  [] [] ","@repo commit_@repo commit_stats [] []  [] ","@repo commit_@repo commit_stats [] []  "]}," Grit Commit diffs":{"type":"method","name":"diffs","children":[],"call":[" class diff "," parents first id "," parents first "," parents "," class "," show "," parents empty? "]}," Grit Commit show":{"type":"method","name":"show","children":[],"call":["Diff  list_from_string ","diff sub ","diff =~ ","@repo git show ","@repo git ","@repo git native "," parents [] id "," parents [] "," parents "," parents size > "," parents size ","diff sub  sub ","@repo git show  sub ","@repo git native  sub ","diff sub  =~ ","@repo git show  =~ ","@repo git native  =~ "]}," Grit Commit diff":{"type":"method","name":"diff","children":[],"call":[]}," Grit Commit list_from_string":{"type":"method","name":"list_from_string","children":[],"call":[]}," Grit Commit find_all":{"type":"method","name":"find_all","children":[],"call":[]}," Grit Commit count":{"type":"method","name":"count","children":[],"call":[]}," Grit Commit lazy_source":{"type":"method","name":"lazy_source","children":[],"call":[" class find_all first "," class find_all "," class "]}," Grit Commit create_initialize":{"type":"method","name":"create_initialize","children":[],"call":[" instance_variable_set ","atts each "]}," Grit Commit create":{"type":"method","name":"create","children":[],"call":[]}," Grit Commit id_abbrev":{"type":"method","name":"id_abbrev","children":[],"call":["@repo git rev_parse chomp [] ","@repo git rev_parse chomp ","@repo git rev_parse "," id ","@repo git "]}," Grit Commit initialize":{"type":"method","name":"initialize","children":[],"call":["x strip empty? ! ","x strip empty? ","x strip ","message find ","message join ","Tree  create ","Commit  create ","parents map "]}," Grit Commit parse_batch":{"type":"method","name":"parse_batch","children":[],"call":[]}," Grit Blob <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," Grit Blob inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Blob basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," name "]}," Grit Blob blame":{"type":"method","name":"blame","children":[],"call":["GritExt  encode! split ","GritExt  encode! ","lines join "," old_blame map "," old_blame "]}," Grit Blob mime_type":{"type":"method","name":"mime_type","children":[],"call":["guesses first simplified ","guesses first ","MIME Types  type_for "," name "]}," Grit Blob data":{"type":"method","name":"data","children":[],"call":["@repo git cat_file "," id ","@repo git ","GritExt  encode! "," old_data "]}," Grit Blob size":{"type":"method","name":"size","children":[],"call":["@repo git cat_file chomp to_i ","@repo git cat_file chomp ","@repo git cat_file "," id ","@repo git "]}," Grit Blob create_initialize":{"type":"method","name":"create_initialize","children":[],"call":[" instance_variable_set ","(str \"@\") to_sym ","atts each "]}," Grit Blob create":{"type":"method","name":"create","children":[],"call":[]}," Grit Blame BlameLine initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit Blame inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Blame process_raw_blame":{"type":"method","name":"process_raw_blame","children":[],"call":["final << ","BlameLine  new ","lines [] ","lineno - ","commits [] ","info sort each ","info sort ","commits []= ","commit id ","@repo batch each ","@repo batch ","commits keys ","info []= ","commits key? ! ","commits key? ","m [] to_i ","m [] ","(str \"^(\\\\w{40}) (\\\\d+) (\\\\d+)\") match ","lines << ","line [] ","line size ","line [] == ","output split each ","output split ","Bla(str \"^(\\w{40}) (\\d+) (\\d+)\") match eLine  new ","commits [] s [] ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match its [] ","commits [] s []= ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match its []= ","commits []  id ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match it id ","commits [] s keys ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match its keys ","commits [] s key? ! ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match its key? ! ","commits [] s key? ","co(str \"^(\\w{40}) (\\d+) (\\d+)\") match (str \"^(\\w{40}) (\\d+) (\\d+)\") match its key? ","(str \"^(\\w{40}) (\\d+) (\\d+)\") match  [] to_i ","(str \"^(\\w{40}) (\\d+) (\\d+)\") match  [] ","(str \"^(\\\\w{40}) (\\\\d+) (\\\\d+)\") (str \"^(\\w{40}) (\\d+) (\\d+)\") match atch "]}," Grit Blame load_blame":{"type":"method","name":"load_blame","children":[],"call":[" process_raw_blame ","@repo git blame ","@repo git "]}," Grit Blame initialize":{"type":"method","name":"initialize","children":[],"call":[" load_blame ","lines nil? "]}," Grit Actor inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Grit Actor output":{"type":"method","name":"output","children":[],"call":["%s <%s> %d %+.2d%.2d % ","offset abs % ","offset abs ","offset / ","time to_i ","time utc_offset / ","time utc_offset ","time utc_offset /  abs % ","time utc_offset /  abs ","time utc_offset /  / ","time utc_time utc_offset /  / ","time utc_time utc_offset /  "]}," Grit Actor from_string":{"type":"method","name":"from_string","children":[],"call":[]}," Grit Actor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Grit Repo grep":{"type":"method","name":"grep","children":[],"call":["greps << ","Grit Grep  new ","content << ","number to_i ","j == ","line split ","line chomp! ","lines each_with_index ","text slice! ","text [] ","lines slice! ","lines first ","i == ","match split ","matches each_with_index ","filematch split ","filematches each ","result split "," git native force_encoding "," git native "," git ","-C  + ","contextlines to_s "," git native encode ","match split  each_with_index ","lines first  slice! ","lines first  [] ","match split  slice! ","match split  first ","filematch split  each_with_index ","text [] match split ","text [] matches each ","filefilematch split  each ","result split  each "," git native force_encoding  split "," git native encode  split ","conlines first lines to_s ","contextmatch split  to_s "]}," GritExt clean":{"type":"method","name":"clean","children":[],"call":["message encode encode gsub ","\u0000 encode ","message encode encode ","message encode "]}," GritExt encode!":{"type":"method","name":"encode!","children":[],"call":["detect [] ","message replace "," clean ","message force_encoding ","detect [] == ","CharlockHolmes EncodingDetector  detect ","message valid_encoding? ","message respond_to? "," ensure_encoding ","CharlockHolmes EncodingDetector  detect  [] ","message replace  replace ","message force_detect []  ","message replace  force_encoding ","CharlockHolmes EncodingDetector  detect  [] == ","CharlockHolmes EncodingDetector  CharlockHolmes EncodingDetector  detect  ","message valid_detect [] ? ","message replace  valid_encoding? ","message replace  respond_to? "," ensure_detect []  "]}," GritExt version":{"type":"method","name":"version","children":[],"call":[]}," Grit Tree name":{"type":"method","name":"name","children":[],"call":["GritExt  encode! "," old_name "]}," Grit Tag message":{"type":"method","name":"message","children":[],"call":["GritExt  encode! "," old_message "]}," Grit Diff diff":{"type":"method","name":"diff","children":[],"call":["path + ","GritExt  encode! ","lines join ","lines shift join ","lines shift ","@diff lines to_a ","@diff lines ","@diff nil? ","GritExt  clean + ","GritExt  clean ","GritExt  encode!  + ","@diff lines to_a  join ","@diff lines to_a  shift join ","@diff lines to_a  shift ","path +  lines to_a ","GritExt  clean +  lines to_a ","@diff @diff lines to_a  to_a ","path +  lines ","GritExt  clean +  lines ","@diff @diff lines to_a  ","path +  nil? ","GritExt  clean +  nil? "]}," Grit Diff new_path":{"type":"method","name":"new_path","children":[],"call":["GritExt  encode! "]}," Grit Diff old_path":{"type":"method","name":"old_path","children":[],"call":["GritExt  encode! "]}," Grit Commit short_message":{"type":"method","name":"short_message","children":[],"call":["GritExt  encode! "," old_short_message "]}," Grit Commit message":{"type":"method","name":"message","children":[],"call":["GritExt  encode! "," old_message "]}," Grit Blob name":{"type":"method","name":"name","children":[],"call":["GritExt  encode! "," old_name "]}," Grit Actor email":{"type":"method","name":"email","children":[],"call":["GritExt  encode! "," old_email "]}," Grit Actor name":{"type":"method","name":"name","children":[],"call":["GritExt  encode! "," old_name "]}," Grit Grep initialize":{"type":"method","name":"initialize","children":[],"call":["startline to_i "]}," Grit Repo advanced_grep":{"type":"method","name":"advanced_grep","children":[],"call":["greps << ","Grit Grep  new ","content << ","number to_i ","j == ","line split ","line chomp! ","lines each_with_index ","excluded_files include? ","text [] partition [] ","text [] partition ","text [] ","text slice! "," puts ","lines slice! ","lines first ","i == ","match split ","matches each_with_index ","filematch split ","filematches each ","result split ","text partition [] ","text partition ","negative split map ","negative split "," git native encode "," git native "," git ","negative_args empty? ","Array  new ","-C  + ","contextlines to_s ","arg_array push "," final_escape ","term [] ","term [] == ","terms each ","Shellwords  split ","Shellwords  shellescape gsub gsub ","Shellwords  shellescape gsub ","Shellwords  shellescape ","searchtext gsub ","searchtext count % == ","searchtext count % ","searchtext count ","match split  each_with_index ","excluded_text [] s include? ","Array  new  include? ","lines first  [] partition [] ","lines first  [] partition ","lines first  [] ","lines first  slice! ","match split  slice! ","match split  first ","filematch split  each_with_index ","text [] match split ","text [] matches each ","filefilematch split  each ","result split  each "," git native encode  split ","lines first  partition [] ","lines first  partition "," git native encode  split map "," git native encode _args empty? ","conlines first lines to_s ","contextmatch split  to_s ","term []  [] ","term []  [] == ","term [] s each ","Shellwords  split  each ","searchlines first  gsub ","Shellwords  shellescape gsub gsub  gsub ","searchtext gsub  gsub ","searchlines first  count % == ","Shellwords  shellescape gsub gsub  count % == ","searchtext gsub  count % == ","searchlines first  count % ","Shellwords  shellescape gsub gsub  count % ","searchtext gsub  count % ","searchlines first  count ","Shellwords  shellescape gsub gsub  count ","searchtext gsub  count "]}," Grit Repo final_escape":{"type":"method","name":"final_escape","children":[],"call":["str gsub "]}," Grit GitRuby DirectoryEntry safe_name":{"type":"method","name":"safe_name","children":[],"call":[" name gsub "," name "]}," GritExt ensure_encoding":{"type":"method","name":"ensure_encoding","children":[],"call":["message encode "]}}