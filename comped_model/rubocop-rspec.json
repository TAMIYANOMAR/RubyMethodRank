{" Rubocop RSpec Inject defaults!":{"type":"method","name":"defaults!","children":[],"call":[]}," Rubocop Cop RSpec UnitSpecNaming node_children":{"type":"method","name":"node_children","children":[],"call":["e is_a? ","node children select ","node children "]}," Rubocop Cop RSpec UnitSpecNaming regexp_from_glob":{"type":"method","name":"regexp_from_glob","children":[],"call":["Regexp  new ","glob gsub gsub + ","glob gsub gsub ","glob gsub "]}," Rubocop Cop RSpec UnitSpecNaming camel_to_underscore":{"type":"method","name":"camel_to_underscore","children":[],"call":["result downcase! ","result gsub! ","string dup tap ","string dup "]}," Rubocop Cop RSpec UnitSpecNaming source_filename":{"type":"method","name":"source_filename","children":[],"call":[" processed_source buffer name "," processed_source buffer "," processed_source "]}," Rubocop Cop RSpec UnitSpecNaming describe_statement_children":{"type":"method","name":"describe_statement_children","children":[],"call":["element children [] == ","element children [] ","element children ","element type == ","element type "," node_children select "," node_children "]}," Rubocop Cop RSpec UnitSpecNaming top_level_describe?":{"type":"method","name":"top_level_describe?","children":[],"call":["top_level_nodes include? ","(send\n  (send nil :node_children\n    (lvar :root_node)) :map) flatten compact ","(send\n  (send nil :node_children\n    (lvar :root_node)) :map) flatten "," describe_statement_children ","child type == ","child type "," node_children map "," node_children ","top_level_nodes size == ","top_level_nodes size "," processed_source ast "," processed_source ","method_name == ","(send\n  (send nil :node_children\n    (lvar :root_node)) :map) flatten compact  include? "," describe_statement_children  include? ","(send\n  (send nil :node_children\n    (lvar : processed_source ast )) :map) flatten compact ","(send\n  (send nil :node_children\n    (lvar : processed_source ast )) :map) flatten ","(send\n  (send nil :node_children\n    (lvar :root_node)) :map) flatten compact  size == "," describe_statement_children  size == ","(send\n  (send nil :node_children\n    (lvar :root_node)) :map) flatten compact  size "," describe_statement_children  size "]}," Rubocop Cop RSpec UnitSpecNaming check_method_spec":{"type":"method","name":"check_method_spec","children":[],"call":[" add_offence "," format "," source_filename =~ "," regexp_from_glob "," source_filename ","File  join ","matcher_parts << ","method_str [] gsub + ","method_str [] gsub ","method_str [] ","path_parts dup ","path_parts dup  << "]}," Rubocop Cop RSpec UnitSpecNaming check_class_spec":{"type":"method","name":"check_class_spec","children":[],"call":[" add_offence "," format "," source_filename end_with? "," source_filename ","File  join + ","File  join "]}," Rubocop Cop RSpec UnitSpecNaming check_described_method":{"type":"method","name":"check_described_method","children":[],"call":[" add_offence ","METHOD_STRING_MATCHER  =~ ","second_arg children first ","second_arg children "]}," Rubocop Cop RSpec UnitSpecNaming check_described_class":{"type":"method","name":"check_described_class","children":[],"call":[" add_offence ","first_arg type != ","first_arg type ","first_arg ! "]}," Rubocop Cop RSpec UnitSpecNaming enforce_filename":{"type":"method","name":"enforce_filename","children":[],"call":[" check_method_spec ","path_parts << ","method_str start_with? ","args [] children first ","args [] children ","args [] "," check_class_spec ","args [] ! "," camel_to_underscore "," const_name split map "," const_name split "," const_name ","args first ","args [] children first  start_with? "]}," Rubocop Cop RSpec UnitSpecNaming enforce_describe_statement":{"type":"method","name":"enforce_describe_statement","children":[],"call":[" check_described_method ","args [] "," check_described_class ","args first "]}," Rubocop Cop RSpec UnitSpecNaming on_send":{"type":"method","name":"on_send","children":[],"call":[" enforce_filename "," cop_config [] "," cop_config "," offences size == "," offences size "," offences "," enforce_describe_statement ","(send\n  (lvar :args) :first) + ","a type == ","a type ","args [] select ","args [] ","args first "," top_level_describe? ","(send\n  (lvar :(send\n  (lvar :args) :first) + ) :first) + ","(send\n  (lvar :args) :first) +  [] select ","(send\n  (lvar :args) :first) +  [] ","(send\n  (lvar :args) :first) +  first "]}," RuboCop RSpec TopLevelDescribe node_children":{"type":"method","name":"node_children","children":[],"call":["e is_a? ","node children select ","node children "]}," RuboCop RSpec TopLevelDescribe describe_statement_children":{"type":"method","name":"describe_statement_children","children":[],"call":["element children [] == ","element children [] ","element children ","element type == ","element type "," node_children select "," node_children ","node each_child_node select ","node each_child_node ","element method_name == ","element method_name ","element method? "]}," RuboCop RSpec TopLevelDescribe single_top_level_describe?":{"type":"method","name":"single_top_level_describe?","children":[],"call":[" top_level_nodes count == "," top_level_nodes count "," top_level_nodes "," top_level_nodes one? "]}," RuboCop RSpec TopLevelDescribe root_node":{"type":"method","name":"root_node","children":[],"call":[" processed_source ast "," processed_source "]}," RuboCop RSpec TopLevelDescribe top_level_nodes":{"type":"method","name":"top_level_nodes","children":[],"call":["(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten "," describe_statement_children ","child type == ","child type "," node_children map "," node_children "," root_node ","nodes size == ","nodes size "," root_node each_child_node flat_map "," root_node each_child_node ","nodes empty? ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact  size == "," describe_statement_children  size == ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact  size "," describe_statement_children  size ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact  empty? "," describe_statement_children  empty? "]}," RuboCop RSpec TopLevelDescribe top_level_describe?":{"type":"method","name":"top_level_describe?","children":[],"call":[" top_level_nodes include? "," top_level_nodes ","method_name == ","node method_name == ","node method_name ","node method? "]}," RuboCop RSpec TopLevelDescribe on_send":{"type":"method","name":"on_send","children":[],"call":[" on_top_level_describe ","(send\n  (lvar :args) :first) + ","a type == ","a type ","args [] select ","args [] ","args first "," top_level_describe? "," respond_to? ","node arguments ","(send\n  (lvar :(send\n  (lvar :args) :first) + ) :first) + ","(send\n  (lvar :args) :first) +  [] select ","(send\n  (lvar :args) :first) +  [] ","(send\n  (lvar :args) :first) +  first "]}," RuboCop RSpec Inject defaults!":{"type":"method","name":"defaults!","children":[],"call":[]}," RuboCop Cop RSpec MultipleDescribes on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense "," top_level_nodes first == "," top_level_nodes first "," top_level_nodes "," single_top_level_describe? "," top_level_nodes first equal? "]}," RuboCop Cop RSpec InstanceVariable on_ivar":{"type":"method","name":"on_ivar","children":[],"call":[" add_offense "]}," RuboCop Cop RSpec InstanceVariable on_block":{"type":"method","name":"on_block","children":[],"call":["EXAMPLE_GROUP_METHODS  include? "," add_offense "," ivar_assigned? ! "," ivar_assigned? "," assignment_only? "," ivar_usage "," spec_group? "," inside_dynamic_class? "," valid_usage? "]}," RuboCop Cop RSpec FileName custom_transform":{"type":"method","name":"custom_transform","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec FileName regexp_from_glob":{"type":"method","name":"regexp_from_glob","children":[],"call":["Regexp  new ","glob gsub gsub + ","glob gsub gsub ","glob gsub "]}," RuboCop Cop RSpec FileName camel_to_underscore":{"type":"method","name":"camel_to_underscore","children":[],"call":["result downcase! ","result gsub! ","string dup tap ","string dup "]}," RuboCop Cop RSpec FileName source_filename":{"type":"method","name":"source_filename","children":[],"call":[" processed_source buffer name "," processed_source buffer "," processed_source "]}," RuboCop Cop RSpec FileName parts":{"type":"method","name":"parts","children":[],"call":[" camel_to_underscore "," custom_transform [] "," custom_transform ","object split map ","object split "]}," RuboCop Cop RSpec FileName matcher":{"type":"method","name":"matcher","children":[],"call":["* + ","method children first gsub ","method children first ","method children ","File  join "," parts "]}," RuboCop Cop RSpec FileName on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense "," format "," source_filename =~ "," regexp_from_glob "," source_filename "," matcher ","args [] "," const_name ","args first "," single_top_level_describe? "]}," RuboCop Cop RSpec ExampleWording on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","message start_with? ","arguments first to_s ","arguments first ","args first ","method_name == ","Parser Source Range  new ","arg1 end_pos - ","arg1 end_pos ","arg1 begin_pos + ","arg1 begin_pos ","arg1 source_buffer ","args first loc expression ","args first loc ","message downcase start_with? ","message downcase ","args first to_a ","method_name equal? "," add_wording_offense ","text start_with? "," it_description ","message =~ ","message match? "," check_and_handle_insufficient_examples "," docstring "," insufficient_docstring? ","arguments first to_s  start_with? ","Parser Source Range  new  start_with? ","args first to_a  first to_s ","args first to_a  first ","args first loc expression  end_pos - ","args first loc expression  end_pos ","args first loc expression  begin_pos + ","args first loc expression  begin_pos ","args first loc expression  source_buffer ","arguments first to_s  downcase start_with? ","Parser Source Range  new  downcase start_with? ","arguments first to_s  downcase ","Parser Source Range  new  downcase ","message downcase  start_with? ","arguments first to_s  =~ ","Parser Source Range  new  =~ ","arguments first to_s  match? ","Parser Source Range  new  match? "]}," RuboCop Cop RSpec DescribedClass scope_change?":{"type":"method","name":"scope_change?","children":[],"call":["(sym :def) include? ","node type "," skippable_block? "," common_instance_exec_closure? "," scope_changing_syntax? "]}," RuboCop Cop RSpec DescribedClass inspect_children":{"type":"method","name":"inspect_children","children":[],"call":[" inspect_children "," add_offense "," format ","object loc expression source ","object loc expression ","object loc ","child == ","node children each ","node children ","node type == ","node type "," scope_change? ","node is_a? ","child eql? ","node type equal? ","node instance_of? "]}," RuboCop Cop RSpec DescribedClass on_block":{"type":"method","name":"on_block","children":[],"call":[" inspect_children ","object type == ","object type ","method_name == "," top_level_describe? "," add_offense "," format ","match const_name "," find_constant_usage "," described_constant "," message "," find_usage ","body nil? "," autocorrect ","object type equal? "]}," RuboCop Cop RSpec DescribeMethod on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense ","METHOD_STRING_MATCHER  =~ ","second_arg children first ","second_arg children ","args [] "," one ","second_arg type equal? ","second_arg type ","second_arg str_type? ","second_arg str_content ","second_arg type == ","second_arg str_content start_with? ","args []  children first ","args []  children ","args []  type equal? ","args []  type ","args []  str_type? ","args []  str_content ","args []  type == ","args []  str_content start_with? "]}," RuboCop Cop RSpec DescribeClass on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense ","args first ","args first type == ","args first type ","pairs any? "," method "," describe_with_metadata "," valid_describe? "," shared_group? "," root_node ","args [] ","(const nil :REQUEST_PAIR) include? ","arg children any? ","arg children ","arg hash_type? ","args [] any? ","args [] type == ","args [] type "," describe_with_rails_metadata? "," string_constant_describe? "]}," Rubocop RSpec TopLevelDescribe node_children":{"type":"method","name":"node_children","children":[],"call":["e is_a? ","node children select ","node children "]}," Rubocop RSpec TopLevelDescribe describe_statement_children":{"type":"method","name":"describe_statement_children","children":[],"call":["element children [] == ","element children [] ","element children ","element type == ","element type "," node_children select "," node_children "]}," Rubocop RSpec TopLevelDescribe single_top_level_describe?":{"type":"method","name":"single_top_level_describe?","children":[],"call":[" top_level_nodes count == "," top_level_nodes count "," top_level_nodes "]}," Rubocop RSpec TopLevelDescribe root_node":{"type":"method","name":"root_node","children":[],"call":[" processed_source ast "," processed_source "]}," Rubocop RSpec TopLevelDescribe top_level_nodes":{"type":"method","name":"top_level_nodes","children":[],"call":["(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten "," describe_statement_children ","child type == ","child type "," node_children map "," node_children "," root_node ","nodes size == ","nodes size ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact  size == "," describe_statement_children  size == ","(send\n  (send nil :node_children\n    (send nil :root_node)) :map) flatten compact  size "," describe_statement_children  size "]}," Rubocop RSpec TopLevelDescribe top_level_describe?":{"type":"method","name":"top_level_describe?","children":[],"call":[" top_level_nodes include? "," top_level_nodes ","method_name == "]}," Rubocop RSpec TopLevelDescribe on_send":{"type":"method","name":"on_send","children":[],"call":[" on_top_level_describe ","(send\n  (lvar :args) :first) + ","a type == ","a type ","args [] select ","args [] ","args first "," top_level_describe? "," respond_to? ","(send\n  (lvar :(send\n  (lvar :args) :first) + ) :first) + ","(send\n  (lvar :args) :first) +  [] select ","(send\n  (lvar :args) :first) +  [] ","(send\n  (lvar :args) :first) +  first "]}," Rubocop Cop RSpecMultipleDescribes on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense "," top_level_nodes first == "," top_level_nodes first "," top_level_nodes "," single_top_level_describe? "]}," Rubocop Cop RSpecInstanceVariable on_ivar":{"type":"method","name":"on_ivar","children":[],"call":[" add_offense "]}," Rubocop Cop RSpecInstanceVariable on_block":{"type":"method","name":"on_block","children":[],"call":["EXAMPLE_GROUP_METHODS  include? "]}," Rubocop Cop RSpecFileName regexp_from_glob":{"type":"method","name":"regexp_from_glob","children":[],"call":["Regexp  new ","glob gsub gsub + ","glob gsub gsub ","glob gsub "]}," Rubocop Cop RSpecFileName camel_to_underscore":{"type":"method","name":"camel_to_underscore","children":[],"call":["result downcase! ","result gsub! ","string dup tap ","string dup "]}," Rubocop Cop RSpecFileName source_filename":{"type":"method","name":"source_filename","children":[],"call":[" processed_source buffer name "," processed_source buffer "," processed_source "]}," Rubocop Cop RSpecFileName path_parts":{"type":"method","name":"path_parts","children":[],"call":[" camel_to_underscore ","object split map ","object split "]}," Rubocop Cop RSpecFileName matcher":{"type":"method","name":"matcher","children":[],"call":["(send\n  (const nil :File) :join\n  (send nil :path_parts\n    (lvar :object))) compact join ","(send\n  (const nil :File) :join\n  (send nil :path_parts\n    (lvar :object))) compact ","File  join "," path_parts ","method children first gsub ","method children first ","method children ","* + "," camel_to_underscore ","object split map ","object split ","(send\n  (const nil :File) :join\n  (send nil :(send\n  (const nil :File) :join\n  (send nil :path_parts\n    (lvar :object))) compact join _parts\n    (lvar :object))) compact join ","(send\n  (const nil :File) :join\n  (send nil :File  join _parts\n    (lvar :object))) compact join ","(send\n  (const nil :File) :join\n  (send nil :(send\n  (const nil :File) :join\n  (send nil :path_parts\n    (lvar :object))) compact join _parts\n    (lvar :object))) compact ","(send\n  (const nil :File) :join\n  (send nil :File  join _parts\n    (lvar :object))) compact "," (send\n  (const nil :File) :join\n  (send nil :path_parts\n    (lvar :object))) compact join _parts "," File  join _parts "]}," Rubocop Cop RSpecFileName on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense "," format "," source_filename =~ "," regexp_from_glob "," source_filename "," matcher ","args [] "," const_name ","args first "," single_top_level_describe? "]}," Rubocop Cop RSpecExampleWording on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","message start_with? ","arguments first to_s ","arguments first ","args first ","method_name == ","arguments first to_s  start_with? "]}," Rubocop Cop RSpecDescribedClass scope_change?":{"type":"method","name":"scope_change?","children":[],"call":["(sym :def) include? ","node type "]}," Rubocop Cop RSpecDescribedClass inspect_children":{"type":"method","name":"inspect_children","children":[],"call":[" inspect_children "," add_offense "," format ","object loc expression source ","object loc expression ","object loc ","child == ","node children each ","node children ","node type == ","node type "," scope_change? ","node is_a? "]}," Rubocop Cop RSpecDescribedClass on_block":{"type":"method","name":"on_block","children":[],"call":[" inspect_children ","object type == ","object type ","method_name == "," top_level_describe? "]}," Rubocop Cop RSpecDescribeMethod on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense ","METHOD_STRING_MATCHER  =~ ","second_arg children first ","second_arg children ","args [] ","args []  children first ","args []  children "]}," Rubocop Cop RSpecDescribeClass on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense ","args first ","args first type == ","args first type "]}," RuboCop Cop RSpec DescribedClass autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","@described_class const_name "," style == "," style "]}," RuboCop RSpec Wording simple_present":{"type":"method","name":"simple_present","children":[],"call":["word [] ","(str \"a\") include? ! ","(str \"a\") include? ","word end_with? ","(str \"o\") any? ","word public_method "," replacements fetch "," replacements "," replacements key? "]}," RuboCop RSpec Wording rewrite":{"type":"method","name":"rewrite","children":[],"call":["(send\n  (send\n    (send nil :text) :split) :tap) join ","words []= "," simple_present ","words fetch "," ignores include? "," ignores ","words each_with_index ","words unshift ","first_word eql? ","words shift "," text split tap "," text split "," text "," remove_should_and_pluralize "," replace_prefix ","words shift  eql? "]}," RuboCop RSpec Wording initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop RSpec Util one":{"type":"method","name":"one","children":[],"call":[" raise ","array size ","array first ","array one? "]}," RuboCop RSpec Language SelectorSet node_pattern":{"type":"method","name":"node_pattern","children":[],"call":[" selectors map join "," selectors map "," selectors "]}," RuboCop RSpec Language SelectorSet node_pattern_union":{"type":"method","name":"node_pattern_union","children":[],"call":[" node_pattern "]}," RuboCop RSpec Language SelectorSet send_pattern":{"type":"method","name":"send_pattern","children":[],"call":[" node_pattern_union "]}," RuboCop RSpec Language SelectorSet block_pattern":{"type":"method","name":"block_pattern","children":[],"call":[" send_pattern "]}," RuboCop RSpec Language SelectorSet include?":{"type":"method","name":"include?","children":[],"call":[" selectors include? "," selectors "]}," RuboCop RSpec Language SelectorSet +":{"type":"method","name":"+","children":[],"call":[" class new "," selectors + ","other selectors "," selectors "," class "]}," RuboCop RSpec Language SelectorSet ==":{"type":"method","name":"==","children":[],"call":[" selectors eql? ","other selectors "," selectors "]}," RuboCop RSpec Language SelectorSet initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","selectors freeze "]}," RuboCop RSpec Hook scope_argument":{"type":"method","name":"scope_argument","children":[],"call":[" node method_args first "," node method_args "," node "," node send_node first_argument "," node send_node "]}," RuboCop RSpec Hook scope_name":{"type":"method","name":"scope_name","children":[],"call":[" scope_argument to_a first "," scope_argument to_a "," scope_argument "]}," RuboCop RSpec Hook scope":{"type":"method","name":"scope","children":[],"call":[" scope_name "," scope_argument "]}," RuboCop RSpec Hook example?":{"type":"method","name":"example?","children":[],"call":[" scope equal? "," scope "]}," RuboCop RSpec Hook valid_scope?":{"type":"method","name":"valid_scope?","children":[],"call":["STANDARDIZED_SCOPES  include? "," scope ","Hooks Scopes ALL  include? ","node value ","Language HookScopes  all "]}," RuboCop RSpec Hook knowable_scope?":{"type":"method","name":"knowable_scope?","children":[],"call":[" scope_argument sym_type? "," scope_argument "," scope_argument hash_type? "," scope_argument nil? "]}," RuboCop RSpec Hook name":{"type":"method","name":"name","children":[],"call":[" node method_name "," node "]}," RuboCop RSpec ExampleGroup find_examples":{"type":"method","name":"find_examples","children":[],"call":[" examples_in_scope "," example? "," scope_change? "]}," RuboCop RSpec ExampleGroup examples_in_scope":{"type":"method","name":"examples_in_scope","children":[],"call":[" find_examples ","node each_child_node flat_map ","node each_child_node "]}," RuboCop RSpec ExampleGroup find_hooks":{"type":"method","name":"find_hooks","children":[],"call":[" hooks_in_scope "," hook "," example? "," scope_change? "," hook? "]}," RuboCop RSpec ExampleGroup hooks_in_scope":{"type":"method","name":"hooks_in_scope","children":[],"call":[" find_hooks ","node each_child_node flat_map ","node each_child_node "]}," RuboCop RSpec ExampleGroup hooks":{"type":"method","name":"hooks","children":[],"call":[" hooks_in_scope map ","Hook  public_method "," hooks_in_scope "," node "," find_all_in_scope map "," find_all_in_scope ","Hook  new "]}," RuboCop RSpec ExampleGroup examples":{"type":"method","name":"examples","children":[],"call":[" examples_in_scope map ","Example  public_method "," examples_in_scope "," node "," find_all_in_scope map "," find_all_in_scope ","Example  new "]}," RuboCop RSpec Example definition":{"type":"method","name":"definition","children":[],"call":[" node children first "," node children "," node "," node send_type? "," node send_node "]}," RuboCop RSpec Example implementation":{"type":"method","name":"implementation","children":[],"call":[" extract_implementation "," node "]}," RuboCop RSpec Example metadata":{"type":"method","name":"metadata","children":[],"call":[" extract_metadata "," definition "]}," RuboCop RSpec Example doc_string":{"type":"method","name":"doc_string","children":[],"call":[" extract_doc_string "," definition "]}," RuboCop RSpec DescriptionExtractor CodeObject abstract?":{"type":"method","name":"abstract?","children":[],"call":["tag tag_name eql? ","tag tag_name "," yardoc tags any? "," yardoc tags "," yardoc "]}," RuboCop RSpec DescriptionExtractor CodeObject documented_constant":{"type":"method","name":"documented_constant","children":[],"call":[" yardoc to_s "," yardoc "]}," RuboCop RSpec DescriptionExtractor CodeObject rspec_cop_namespace?":{"type":"method","name":"rspec_cop_namespace?","children":[],"call":[" documented_constant start_with? "," documented_constant "]}," RuboCop RSpec DescriptionExtractor CodeObject class_documentation?":{"type":"method","name":"class_documentation?","children":[],"call":[" yardoc type equal? "," yardoc type "," yardoc "]}," RuboCop RSpec DescriptionExtractor CodeObject description":{"type":"method","name":"description","children":[],"call":[" yardoc docstring split first to_s "," yardoc docstring split first "," yardoc docstring split "," yardoc docstring "," yardoc "]}," RuboCop RSpec DescriptionExtractor CodeObject cop_name":{"type":"method","name":"cop_name","children":[],"call":["Object  const_get cop_name ","Object  const_get "," documented_constant "]}," RuboCop RSpec DescriptionExtractor CodeObject configuration":{"type":"method","name":"configuration","children":[],"call":[" description "," cop_name "]}," RuboCop RSpec DescriptionExtractor CodeObject rspec_cop?":{"type":"method","name":"rspec_cop?","children":[],"call":[" abstract? ! "," abstract? "," rspec_cop_namespace? "," class_documentation? "," cop_subclass? "]}," RuboCop RSpec DescriptionExtractor CodeObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop RSpec DescriptionExtractor to_h":{"type":"method","name":"to_h","children":[],"call":[" code_objects select map reduce "," code_objects select map "," code_objects select "," code_objects ","config []= ","docstring split first to_s ","docstring split first ","docstring split "," format "," cop_documentation each_with_object "," cop_documentation "]}," RuboCop RSpec DescriptionExtractor initialize":{"type":"method","name":"initialize","children":[],"call":["yardocs map ","CodeObject  public_method "]}," RuboCop RSpec ConfigFormatter cops":{"type":"method","name":"cops","children":[],"call":["(send\n  (send\n    (send nil :descriptions) :keys) :+\n  (send\n    (send nil :config) :keys)) uniq grep ","(send\n  (send\n    (send nil :descriptions) :keys) :+\n  (send\n    (send nil :config) :keys)) uniq "," descriptions keys + "," config keys "," config "," descriptions keys "," descriptions ","(send\n  (send\n    (send nil :descriptions) :keys) :|\n  (send\n    (send nil :config) :keys)) grep "," descriptions keys | "]}," RuboCop RSpec ConfigFormatter unified_config":{"type":"method","name":"unified_config","children":[],"call":["unified []= "," config fetch merge "," descriptions fetch "," descriptions "," config fetch "," config "," cops each_with_object "," config dup "," cops "," config fetch merge merge ","STYLE_GUIDE_BASE_URL  + ","cop sub ","unified [] []= ","COP_DOC_BASE_URL  + ","unified [] ","unified [] merge! ","SUBDEPARTMENTS  include? ","AMENDMENTS  include? "," reference "," replace_nil ","EXTRACTED_COPS  include? "]}," RuboCop RSpec ConfigFormatter dump":{"type":"method","name":"dump","children":[],"call":["YAML  dump gsub ","YAML  dump "," unified_config ","YAML  dump gsub gsub ","YAML  dump gsub gsub gsub ","YAML  dump gsub gsub gsub gsub "]}," RuboCop RSpec ConfigFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop RSpec Concept to_node":{"type":"method","name":"to_node","children":[],"call":[" node "]}," RuboCop RSpec Concept hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," node "," class "]}," RuboCop RSpec Concept eql?":{"type":"method","name":"eql?","children":[],"call":[" node eql? ","other node "," node "," node == "]}," RuboCop RSpec Concept initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec VerifiedDoubles on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," cop_config [] "," cop_config ","name type equal? ","name type "," unverified_double ","name sym_type? "," format ","node loc expression source ","node loc expression ","node loc ","method_name == "," symbol? ","name nil? "," name_is_symbol? ","DOUBLE_TYPES  include? "," unverified_double  type equal? "," unverified_double  type "," unverified_double  sym_type? ","method_ unverified_double  == "," unverified_double  nil? ","  unverified_double _is_symbol? "]}," RuboCop Cop RSpec SubjectStub find_subject":{"type":"method","name":"find_subject","children":[],"call":[" find_subject ","node each_child_node "," subject "]}," RuboCop Cop RSpec SubjectStub redefines_subject?":{"type":"method","name":"redefines_subject?","children":[],"call":[" redefines_subject? "," subject ","node each_child_node any? ","node each_child_node "]}," RuboCop Cop RSpec SubjectStub find_subject_expectation":{"type":"method","name":"find_subject_expectation","children":[],"call":[" find_subject_expectation ","node each_child_node "," message_expectation? "," redefines_subject? "," example_group? "]}," RuboCop Cop RSpec SubjectStub find_subject_stub":{"type":"method","name":"find_subject_stub","children":[],"call":[" find_subject_expectation "," find_subject "]}," RuboCop Cop RSpec SubjectStub on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," find_subject_stub "," example_group? "," find_subject_expectations "," find_all_explicit_subjects "," processed_example_groups << "," processed_example_groups ","(send\n  (send nil :processed_example_groups) :&\n  (send\n    (lvar :node) :ancestors)) any? "," processed_example_groups & ","node ancestors "]}," RuboCop Cop RSpec SingleArgumentMessageChain message":{"type":"method","name":"message","children":[],"call":[" format ","method == "," replacement ","node method_name ","MESSAGE  % ","node method_name  == ","node node method_name _name "]}," RuboCop Cop RSpec SingleArgumentMessageChain multi_argument_string?":{"type":"method","name":"multi_argument_string?","children":[],"call":["args first children first include? ","args first children first ","args first children ","args first ","args first type == ","args first type ","args size == ","args size "]}," RuboCop Cop RSpec SingleArgumentMessageChain autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","method_name equal? ","node loc selector ","node loc "," lambda "," replacement ","node method_name "," autocorrect_hash_arg "," single_key_hash? "," message_chain "," autocorrect_array_arg ","arg array_type? "]}," RuboCop Cop RSpec SingleArgumentMessageChain on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," multi_argument_string? ","args size > ","args size ","Matchers MESSAGE_CHAIN  include? ","remaining any? ","first to_s include? ","first to_s "," message_chain "," single_key_hash? ! "," single_key_hash? ","arg hash_type? ","arg to_s include? ","arg to_s "," valid_usage? "," autocorrect ","node loc selector ","node loc "," format "," replacement ","node method_name ","node node method_name _name "]}," RuboCop Cop RSpec ScatteredSetup analyzable_hooks":{"type":"method","name":"analyzable_hooks","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n          (lvar :node)) :hooks) :select)\n    (args\n      (arg :hook))\n    (and\n      (send\n        (lvar :hook) :knowable_scope?)\n      (send\n        (lvar :hook) :valid_scope?))) :group_by) values reject flatten map ","(send\n  (block\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n          (lvar :node)) :hooks) :select)\n    (args\n      (arg :hook))\n    (and\n      (send\n        (lvar :hook) :knowable_scope?)\n      (send\n        (lvar :hook) :valid_scope?))) :group_by) values reject flatten ","(send\n  (block\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n          (lvar :node)) :hooks) :select)\n    (args\n      (arg :hook))\n    (and\n      (send\n        (lvar :hook) :knowable_scope?)\n      (send\n        (lvar :hook) :valid_scope?))) :group_by) values reject ","(send\n  (block\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n          (lvar :node)) :hooks) :select)\n    (args\n      (arg :hook))\n    (and\n      (send\n        (lvar :hook) :knowable_scope?)\n      (send\n        (lvar :hook) :valid_scope?))) :group_by) values ","hook scope ","hook name ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :hooks) :select) group_by ","hook valid_scope? ","hook knowable_scope? ","RuboCop RSpec ExampleGroup  new hooks select ","RuboCop RSpec ExampleGroup  new hooks ","RuboCop RSpec ExampleGroup  new "]}," RuboCop Cop RSpec ScatteredSetup on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," analyzable_hooks each "," analyzable_hooks "," example_group? "," format "," lines_msg ","occurrences first method_name ","occurrences first ","lines - ","occurrence first_line ","occurrences each ","occurrences map "," repeated_hooks each "," repeated_hooks "," autocorrect "," message "," occurrences map _msg ","occurrences map  - ","  format  ","  message  "]}," RuboCop Cop RSpec RepeatedExample repeated_examples":{"type":"method","name":"repeated_examples","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :group_by) values reject flatten map ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :group_by) values reject flatten ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :group_by) values reject ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :group_by) values ","example implementation ","example metadata ","RuboCop RSpec ExampleGroup  new examples group_by ","RuboCop RSpec ExampleGroup  new examples ","RuboCop RSpec ExampleGroup  new "," example_signature "]}," RuboCop Cop RSpec RepeatedExample on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," repeated_examples each "," repeated_examples "," example_group? "]}," RuboCop Cop RSpec RepeatedDescription repeated_descriptions":{"type":"method","name":"repeated_descriptions","children":[],"call":["(send\n  (lvar :grouped_examples) :select) values flatten map ","(send\n  (lvar :grouped_examples) :select) values flatten ","(send\n  (lvar :grouped_examples) :select) values ","group size > ","group size ","grouped_examples select ","RuboCop RSpec ExampleGroup  new examples group_by ","RuboCop RSpec ExampleGroup  new examples ","RuboCop RSpec ExampleGroup  new ","signatures any? "," example_signature ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :reject) group_by ","n definition method? ","n definition ","RuboCop RSpec ExampleGroup  new examples reject ","(send\n  (lvar :RuboCop RSpec ExampleGroup  new examples group_by ) :select) values flatten map ","(send\n  (lvar :RuboCop RSpec ExampleGroup  new examples group_by ) :select) values flatten ","(send\n  (lvar :RuboCop RSpec ExampleGroup  new examples group_by ) :select) values ","RuboCop RSpec ExampleGroup  new examples group_by  select "]}," RuboCop Cop RSpec RepeatedDescription on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," repeated_descriptions each "," repeated_descriptions "," example_group? "," repeated_its each "," repeated_its "]}," RuboCop Cop RSpec NotToNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","method_name equal? ","node loc selector ","node loc "," lambda "," style to_s "," style ","method_name == "]}," RuboCop Cop RSpec NotToNot message":{"type":"method","name":"message","children":[],"call":[" format ","method_name equal? "," alternative_style "," style ","method_name == "]}," RuboCop Cop RSpec NotToNot on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," style equal? "," style ","METHOD_NAMES  include? "," not_to_not_offense "," alternative_style "," offense_message ","method_name == "," rejected_method ","corrector replace "," style to_s ","node loc selector ","node loc "," style == "]}," RuboCop Cop RSpec NestedGroups max_nesting_config":{"type":"method","name":"max_nesting_config","children":[],"call":[" cop_config fetch "," cop_config "," warn "," cop_config key? "]}," RuboCop Cop RSpec NestedGroups max_nesting":{"type":"method","name":"max_nesting","children":[],"call":[" Integer "," max_nesting_config "," cop_config fetch "," cop_config "]}," RuboCop Cop RSpec NestedGroups find_nested_contexts":{"type":"method","name":"find_nested_contexts","children":[],"call":[" find_nested_contexts ","nesting + ","nested_context each_child_node ","nesting > "," max_nesting "," find_contexts "]}," RuboCop Cop RSpec NestedGroups on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense ","context children first ","context children "," find_nested_contexts ","node parent "," message "," max= ","context send_node ","example_group send_node "," find_nested_example_groups "]}," RuboCop Cop RSpec NamedSubject subject_usage":{"type":"method","name":"subject_usage","children":[],"call":[" subject_usage ","node children each ","node children "," unnamed_subject ","node is_a? ","node each_child_node ","node instance_of? "]}," RuboCop Cop RSpec NamedSubject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," subject_usage "," rspec_block? "," ignored_shared_example? "," rspec_block? ! ","subject_node loc selector ","subject_node loc "," example_or_hook_block? ! "," example_or_hook_block? "," check_explicit_subject "]}," RuboCop Cop RSpec MultipleExpectations max_expectations":{"type":"method","name":"max_expectations","children":[],"call":[" Integer "," cop_config fetch "," cop_config "," parameter_name "]}," RuboCop Cop RSpec MultipleExpectations flag_example":{"type":"method","name":"flag_example","children":[],"call":[" add_offense "," format "," max_expectations ","node send_node ","MSG  % "]}," RuboCop Cop RSpec MultipleExpectations on_block":{"type":"method","name":"on_block","children":[],"call":[" flag_example ","expectations count "," max= ","expectations count <= "," max_expectations "," expect "," example? ","expectations_count <= "," to_enum count "," to_enum "," example_with_aggregated_failures? "," example_with_aggregate_failures? "," expect  count "," expect  count <= "," max_ expect  "," expect _count <= "," to_enum count  <= "]}," RuboCop Cop RSpec MessageSpies error_message":{"type":"method","name":"error_message","children":[],"call":["MSG_HAVE_RECEIVED  % ","receiver source "," style "," format "]}," RuboCop Cop RSpec MessageSpies preferred_style?":{"type":"method","name":"preferred_style?","children":[],"call":["expectation method_name equal? "," style ","expectation method_name "]}," RuboCop Cop RSpec MessageSpies receive_message_matcher":{"type":"method","name":"receive_message_matcher","children":[],"call":[" receive_message "," message_expectation "]}," RuboCop Cop RSpec MessageSpies on_send":{"type":"method","name":"on_send","children":[],"call":[" opposite_style_detected "," add_offense "," error_message "," correct_style_detected "," preferred_style? "," receive_message_matcher ","message_matcher loc selector ","message_matcher loc "]}," RuboCop Cop RSpec MessageExpectation preferred_style?":{"type":"method","name":"preferred_style?","children":[],"call":["expectation method_name equal? "," style ","expectation method_name "]}," RuboCop Cop RSpec MessageExpectation on_send":{"type":"method","name":"on_send","children":[],"call":[" opposite_style_detected "," add_offense ","MSG  % "," style "," correct_style_detected "," preferred_style? "," message_expectation "," format ","match loc selector ","match loc ","  format _expectation "]}," RuboCop Cop RSpec MessageChain on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Matchers MESSAGE_CHAIN  include? "," message_chain ","node method_name ","node loc selector ","node loc ","MESSAGE  % ","MESSAGE_CHAIN_METHODS  include? "]}," RuboCop Cop RSpec LetSetup unused_let_bang":{"type":"method","name":"unused_let_bang","children":[],"call":[" method_called? "," let_bang "," child_let_bang ","method_name to_sym "]}," RuboCop Cop RSpec LetSetup on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," unused_let_bang "," example_group? "," example_or_shared_group_or_including? "]}," RuboCop Cop RSpec LeadingSubject in_spec_block?":{"type":"method","name":"in_spec_block?","children":[],"call":["Examples ALL  include? ","ancestor method_name ","node each_ancestor any? ","node each_ancestor "," example? "]}," RuboCop Cop RSpec LeadingSubject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","sibling method_name equal? ","sibling method_name ","sibling equal? ","node parent each_child_node ","node parent "," in_spec_block? ! "," in_spec_block? "," subject? "," let? "," check_previous_nodes "," inside_example_group? "]}," RuboCop Cop RSpec InstanceVariable assignment_only?":{"type":"method","name":"assignment_only?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec ImplicitExpect replacement_source":{"type":"method","name":"replacement_source","children":[],"call":["ENFORCED_REPLACEMENTS  fetch "]}," RuboCop Cop RSpec ImplicitExpect offense_message":{"type":"method","name":"offense_message","children":[],"call":[" format "," replacement_source ","MSG  % "]}," RuboCop Cop RSpec ImplicitExpect is_expected_range":{"type":"method","name":"is_expected_range","children":[],"call":["Parser Source Range  new ","source_map selector end_pos ","source_map selector ","source_map expression begin_pos ","source_map expression ","source_map expression source_buffer "]}," RuboCop Cop RSpec ImplicitExpect offending_expect":{"type":"method","name":"offending_expect","children":[],"call":["node loc selector ","node loc "," is_expected_range "," implicit_expect "]}," RuboCop Cop RSpec ImplicitExpect autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement_source ","offense source "," offending_expect "," lambda ","  replacement_source _source "," offending_expect  source "]}," RuboCop Cop RSpec ImplicitExpect on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense_message "," opposite_style_detected "," correct_style_detected ","expectation_source start_with? "," style to_s "," style ","source_range source "," offending_expect ","corrector replace "," replacement_source ","source_range source  start_with? "," offending_expect  source ","  replacement_source _source "]}," RuboCop Cop RSpec HookArgument hook":{"type":"method","name":"hook","children":[],"call":[" unscoped_hook "," scoped_hook "]}," RuboCop Cop RSpec HookArgument implicit_style?":{"type":"method","name":"implicit_style?","children":[],"call":[" style equal? "," style "]}," RuboCop Cop RSpec HookArgument explicit_message":{"type":"method","name":"explicit_message","children":[],"call":[" format "," style "," implicit_style? "]}," RuboCop Cop RSpec HookArgument check_implicit":{"type":"method","name":"check_implicit","children":[],"call":[" add_offense "," format "," style "," implicit_style? "," style_detected ","corrector replace "," argument_range "," style inspect ","method_send loc selector ","method_send loc "," explicit_message ","LocationHelp  arguments_with_whitespace "]}," RuboCop Cop RSpec HookArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda ","node method_name "," style inspect "," style "," implicit_style? "," argument_range ","LocationHelp  arguments_with_whitespace "]}," RuboCop Cop RSpec HookArgument on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," explicit_message "," style_detected "," check_implicit "," correct_style_detected ","scope_name equal? "," style "," hook ","corrector replace "," argument_range "," style inspect "," implicit_style? "," autocorrect "]}," RuboCop Cop RSpec Focus focus_metadata":{"type":"method","name":"focus_metadata","children":[],"call":["matches grep "," metadata "," focused_block? "]}," RuboCop Cop RSpec Focus on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," focus_metadata ","n == ","node children any? ","node children ","FOCUSED_BLOCKS  include? ","FOCUSABLE_BLOCKS  include? "," correct_send ","focus send_type? ","corrector remove "," with_surrounding ","focus sym_type? ","focus str_type? ","focus pair_type? ","node each_ancestor any? ","node each_ancestor ","node chained? "]}," RuboCop Cop RSpec FilePath custom_transform":{"type":"method","name":"custom_transform","children":[],"call":[" cop_config [] "," cop_config "," cop_config fetch "]}," RuboCop Cop RSpec FilePath ignore_methods?":{"type":"method","name":"ignore_methods?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec FilePath regexp_from_glob":{"type":"method","name":"regexp_from_glob","children":[],"call":["Regexp  new ","glob sub gsub + ","glob sub gsub ","glob sub ","glob gsub gsub + ","glob gsub gsub ","glob gsub "]}," RuboCop Cop RSpec FilePath camel_to_underscore":{"type":"method","name":"camel_to_underscore","children":[],"call":["string gsub gsub downcase ","string gsub gsub ","string gsub ","result downcase! ","result gsub! ","string dup tap ","string dup "]}," RuboCop Cop RSpec FilePath source_filename":{"type":"method","name":"source_filename","children":[],"call":[" processed_source buffer name "," processed_source buffer "," processed_source "]}," RuboCop Cop RSpec FilePath parts":{"type":"method","name":"parts","children":[],"call":[" camel_to_underscore "," custom_transform [] "," custom_transform ","object split map ","object split "]}," RuboCop Cop RSpec FilePath matcher":{"type":"method","name":"matcher","children":[],"call":["* + ","method str_content gsub ","method str_content "," ignore_methods? ! "," ignore_methods? ","method type equal? ","method type ","File  join "," parts ","method children first gsub ","method children first ","method children ","method type == "]}," RuboCop Cop RSpec FilePath routing_spec?":{"type":"method","name":"routing_spec?","children":[],"call":["arg children include? ","arg children ","args any? "," method ","arg hash_type? ","args [] any? ","args [] "," routing_spec_path? "]}," RuboCop Cop RSpec FilePath on_top_level_describe":{"type":"method","name":"on_top_level_describe","children":[],"call":[" add_offense "," format "," source_filename =~ "," regexp_from_glob "," source_filename "," matcher ","args at ","args first const_name ","args first "," single_top_level_describe? "," routing_spec? "," filename_ends_with? "," glob_for "," const_described? ","args [] "," const_name "," regexp_from_ glob_for  ","  glob_for _for "]}," RuboCop Cop RSpec ExpectOutput inside_example_scope?":{"type":"method","name":"inside_example_scope?","children":[],"call":[" inside_example_scope? ","node parent ","RuboCop RSpec Hook  new example? ","RuboCop RSpec Hook  new "," hook? "," example? "," example_group? ","node nil? "]}," RuboCop Cop RSpec ExpectOutput on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" add_offense "," format ","name eql? ","variable_name [] "," inside_example_scope? ","node loc name ","node loc ","variable_name []  eql? ","variable_variable_name []  [] ","node loc variable_name []  "]}," RuboCop Cop RSpec ExpectActual complex_literal?":{"type":"method","name":"complex_literal?","children":[],"call":["node each_child_node all? "," method ","node each_child_node ","COMPLEX_LITERALS  include? ","node type "]}," RuboCop Cop RSpec ExpectActual simple_literal?":{"type":"method","name":"simple_literal?","children":[],"call":["SIMPLE_LITERALS  include? ","node type "]}," RuboCop Cop RSpec ExpectActual literal?":{"type":"method","name":"literal?","children":[],"call":[" complex_literal? "," simple_literal? "]}," RuboCop Cop RSpec ExpectActual expect_literal":{"type":"method","name":"expect_literal","children":[],"call":[" literal? "," expect "]}," RuboCop Cop RSpec ExpectActual on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," expect_literal ","argument source_range "," swap ","SUPPORTED_MATCHERS  include? ","actual source_range "," literal? "]}," RuboCop Cop RSpec ExampleWording ignored_words":{"type":"method","name":"ignored_words","children":[],"call":[" cop_config fetch "," cop_config "," cop_config [] "]}," RuboCop Cop RSpec ExampleWording custom_transform":{"type":"method","name":"custom_transform","children":[],"call":[" cop_config fetch "," cop_config "," cop_config [] "]}," RuboCop Cop RSpec ExampleWording autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","RuboCop RSpec Wording  new rewrite ","RuboCop RSpec Wording  new "," custom_transform "," ignored_words ","range source "," lambda "," replacement_text ","@corrections << "," corrected_message "," docstring "]}," RuboCop Cop RSpec ExampleLength message":{"type":"method","name":"message","children":[],"call":[" format "," max_length "]}," RuboCop Cop RSpec ExampleLength code_length":{"type":"method","name":"code_length","children":[],"call":[" irrelevant_line ! "," irrelevant_line ","lines count ","node source lines [] ","node source lines ","node source ","node source lines [] count ","node source lines to_a [] ","node source lines to_a ","node source lines []  count ","node source node source lines []  [] ","node source node source lines []  ","node source node source lines []  [] count ","node source node source lines []  to_a [] ","node source node source lines []  to_a "]}," RuboCop Cop RSpec ExampleLength on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," message ","length > "," max_length "," code_length ","EXAMPLE_BLOCKS  include? "," example? "," max "," check_code_length "," code_length  > "," max_ code_length  "," code_ code_length  "," check_code_ code_length  "]}," RuboCop Cop RSpec EmptyExampleGroup custom_include_methods":{"type":"method","name":"custom_include_methods","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop RSpec EmptyExampleGroup custom_include?":{"type":"method","name":"custom_include?","children":[],"call":[" custom_include_methods include? "," custom_include_methods "]}," RuboCop Cop RSpec EmptyExampleGroup on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","node children first ","node children "," contains_example? ! "," contains_example? "," example_group? ","node send_node "," examples? "," example_group_body "," offensive? "," example? ","node each_ancestor any? ","node each_ancestor ","corrector remove "," removed_range "]}," RuboCop Cop RSpec DescribedClass skip_blocks?":{"type":"method","name":"skip_blocks?","children":[],"call":[" cop_config [] equal? "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec DescribedClass skippable_block?":{"type":"method","name":"skippable_block?","children":[],"call":[" skip_blocks? "," rspec_block? ! "," rspec_block? ","node block_type? "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec DescribedClass find_constant_usage":{"type":"method","name":"find_constant_usage","children":[],"call":[" find_constant_usage ","node children each ","node children ","node const_type? "," scope_change? ","node is_a? ","node eql? ","node instance_of? "]}," RuboCop Cop RSpec Cop rspec_pattern_config":{"type":"method","name":"rspec_pattern_config","children":[],"call":[" config for_all_cops fetch fetch "," config for_all_cops fetch "," config for_all_cops "," config "," all_cops_config fetch fetch "," all_cops_config fetch "," all_cops_config "]}," RuboCop Cop RSpec Cop rspec_pattern":{"type":"method","name":"rspec_pattern","children":[],"call":["Regexp  union "," rspec_pattern_config map ","Regexp  public_method "," rspec_pattern_config "," rspec_pattern_config? "]}," RuboCop Cop RSpec Cop relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" rspec_pattern =~ "," rspec_pattern "," relevant_rubocop_rspec_file? "]}," RuboCop Cop RSpec Cop inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop WorkaroundCop <":{"type":"method","name":"<","children":[],"call":[]}," RuboCop Cop WorkaroundCop inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop RSpec BeEql autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop RSpec BeEql on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," eql_type_with_identity ","corrector replace ","eql loc selector ","eql loc "]}," RuboCop Cop RSpec AnyInstance on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","ANY_INSTANCE_METHODS  include? "," disallowed_stub ","node loc expression source ","node loc expression ","node loc ","MESSAGE  % ","node method_name "]}," RuboCop Cop RSpec RepeatedExample example_signature":{"type":"method","name":"example_signature","children":[],"call":["key_parts << ","example definition method_args ","example definition ","example definition method_name == ","example definition method_name ","example implementation ","example metadata ","example definition arguments ","example definition method? "]}," RuboCop Cop RSpec DescribedClass offensive?":{"type":"method","name":"offensive?","children":[],"call":["method_name == ","node eql? "," style == "," style ","node method_name == ","node method_name ","node send_type? "," offensive_described_class? ","node method? "]}," RuboCop Cop RSpec DescribedClass message":{"type":"method","name":"message","children":[],"call":[" format ","@described_class const_name "," style == "," style "]}," RuboCop Cop RSpec DescribedClass find_usage":{"type":"method","name":"find_usage","children":[],"call":[" find_usage ","node children each ","node children ","node const_type? "," scope_change? ","node is_a? "," offensive? ","node each_child_node "]}," RuboCop Cop RSpec AroundBlock hook":{"type":"method","name":"hook","children":[],"call":[" unscoped_hook "," scoped_hook "]}," RuboCop Cop RSpec AroundBlock unused_parameters":{"type":"method","name":"unused_parameters","children":[],"call":["param == "," find_arg_usage ","node parent ","node children [] ","node children "]}," RuboCop Cop RSpec AroundBlock missing_parameters":{"type":"method","name":"missing_parameters","children":[],"call":["node children [] nil? ","node children [] ","node children "]}," RuboCop Cop RSpec AroundBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," unused_parameters "," missing_parameters "," hook "," check_for_unused_proxy "," add_no_arg_offense ","example_proxy nil? "," hook_block "]}," RuboCop Cop RSpec InstanceSpy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","double_source_map dot join ","double_source_map selector ","double_source_map dot ","node parent loc ","node parent ","corrector replace ","node loc selector ","node loc "," lambda ","node parent loc  dot join ","node parent loc  selector ","node parent loc  dot "]}," RuboCop Cop RSpec InstanceSpy on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","expected == "," have_received_usage "," null_double "," example? "," autocorrect ","expected != "]}," RuboCop Cop RSpec BeforeAfterAll on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","args include? ","BEFORE_AFTER_METHODS  include? "," format ","hook source "," before_or_after_all "]}," RuboCop Cop RSpec SingleArgumentMessageChain replacement":{"type":"method","name":"replacement","children":[],"call":["method equal? "]}," RuboCop Cop RSpec SharedContext add_shared_item_offense":{"type":"method","name":"add_shared_item_offense","children":[],"call":[" add_offense ","node children first ","node children "]}," RuboCop Cop RSpec SharedContext examples_with_only_context":{"type":"method","name":"examples_with_only_context","children":[],"call":[" examples? ! "," examples? "," context? "," shared_example "]}," RuboCop Cop RSpec SharedContext context_with_only_examples":{"type":"method","name":"context_with_only_examples","children":[],"call":[" context? ! "," context? "," examples? "," shared_context "]}," RuboCop Cop RSpec SharedContext autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," examples_with_only_context ","node parent "," context_with_only_examples "," lambda "]}," RuboCop Cop RSpec SharedContext on_block":{"type":"method","name":"on_block","children":[],"call":[" add_shared_item_offense "," examples_with_only_context "," context_with_only_examples ","node send_node ","corrector replace ","node send_node loc selector ","node send_node loc "," add_offense "]}," RuboCop Cop RSpec NestedGroups message":{"type":"method","name":"message","children":[],"call":[" format "," max_nesting "]}," RuboCop Cop RSpec MultipleExpectations find_expectation":{"type":"method","name":"find_expectation","children":[],"call":[" find_expectation ","node children each ","node children "," aggregate_failures? "," expect? ","node is_a? ","node each_child_node "," aggregate_failures_block? "]}," RuboCop Cop RSpec MultipleExpectations example_with_aggregated_failures?":{"type":"method","name":"example_with_aggregated_failures?","children":[],"call":[" disabled_aggregated_failures? ! "," disabled_aggregated_failures? "," with_aggregated_failures? ","node children first ","node children "," aggregated_failures_by_default? ","node send_node "]}," RuboCop Cop RSpec MessageChain message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "]}," RuboCop Cop RSpec ItBehavesLike message":{"type":"method","name":"message","children":[],"call":[" format "," alternative_style "," style "]}," RuboCop Cop RSpec ItBehavesLike autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style to_s "," style ","node loc selector ","node loc "," lambda "]}," RuboCop Cop RSpec ItBehavesLike on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," example_inclusion_offense "," alternative_style ","corrector replace "," style to_s "," style ","node loc selector ","node loc "]}," RuboCop Cop RSpec FilePath relevant_rubocop_rspec_file?":{"type":"method","name":"relevant_rubocop_rspec_file?","children":[],"call":[]}," RuboCop Cop RSpec FilePath filename_ends_with?":{"type":"method","name":"filename_ends_with?","children":[],"call":["File  fnmatch? "," processed_source buffer name "," processed_source buffer "," processed_source ","RuboCop PathUtil  relative_path ","RuboCop PathUtil  relative_path gsub ","filename match? ","File  expand_path "," expanded_file_path match? "," expanded_file_path ","RuboCop PathUtil  relative_path  match? ","RuboCop PathUtil  relative_path gsub  match? ","File  expand_path  match? "]}," RuboCop Cop RSpec FilePath camel_to_snake_case":{"type":"method","name":"camel_to_snake_case","children":[],"call":["string gsub gsub downcase ","string gsub gsub ","string gsub "]}," RuboCop Cop RSpec FilePath expected_path":{"type":"method","name":"expected_path","children":[],"call":["File  join "," camel_to_snake_case "," custom_transform fetch "," custom_transform ","constant const_name split map ","constant const_name split ","constant const_name ","constants map "," namespace + "," namespace "," namespace +  map "]}," RuboCop Cop RSpec FilePath name_glob":{"type":"method","name":"name_glob","children":[],"call":["name str_content gsub ","name str_content "," ignore_methods? ","name str_type? ","method_name str_content gsub ","method_name str_content "]}," RuboCop Cop RSpec FilePath glob_for":{"type":"method","name":"glob_for","children":[],"call":[" name_glob "," expected_path "," glob_for_spec_suffix_only? "," spec_suffix_only? "]}," RuboCop Cop RSpec ExampleWording replacement_text":{"type":"method","name":"replacement_text","children":[],"call":["text sub ","text start_with? ","RuboCop RSpec Wording  new rewrite ","RuboCop RSpec Wording  new "," custom_transform "," ignored_words ","range source ","text =~ "," text ","text match? ","range source  sub "," text  sub ","range source  start_with? "," text  start_with? ","range source  =~ "," text  =~ "," range source  ","  text  ","range source  match? "," text  match? "]}," RuboCop Cop RSpec ExampleWording add_wording_offense":{"type":"method","name":"add_wording_offense","children":[],"call":[" add_offense ","Parser Source Range  new ","expr end_pos - ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc "," docstring ","corrector replace "," replacement_text ","node heredoc? ","node loc expression  end_pos - ","node loc expression  end_pos ","node loc expression  begin_pos + ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "," Parser Source Range  new  ","  docstring  "]}," RuboCop Cop RSpec Cop relevant_rubocop_rspec_file?":{"type":"method","name":"relevant_rubocop_rspec_file?","children":[],"call":[" rspec_pattern =~ "," rspec_pattern "]}," RuboCop Cop RSpec AroundBlock check_for_unused_proxy":{"type":"method","name":"check_for_unused_proxy","children":[],"call":[" add_offense "," format ","usage include? "," s "," find_arg_usage "]}," RuboCop Cop RSpec AroundBlock add_no_arg_offense":{"type":"method","name":"add_no_arg_offense","children":[],"call":[" add_offense "]}," RuboCop Cop RSpec ScatteredLet check_let_declarations":{"type":"method","name":"check_let_declarations","children":[],"call":[" add_offense "," let? ","node each_child_node ","node sibling_index == ","first_let sibling_index + ","first_let sibling_index ","node sibling_index ","lets each_with_index ","lets first ","body each_child_node select ","body each_child_node ","RuboCop RSpec Corrector MoveNode  new move_after ","RuboCop RSpec Corrector MoveNode  new "," processed_source ","lets first  sibling_index + ","lets first  sibling_index "]}," RuboCop Cop RSpec ScatteredLet on_block":{"type":"method","name":"on_block","children":[],"call":[" check_let_declarations "," example_group? "," example_group_with_body? ","node body "]}," RuboCop Cop RSpec OverwritingSetup find_duplicates":{"type":"method","name":"find_duplicates","children":[],"call":["setup_expressions add? "," setup? ","node each_child_node ","Set  new ","child send_node first_argument value ","child send_node first_argument ","child send_node ","child send_node arguments? "," first_argument_name to_sym "," first_argument_name "," common_setup? ","Set  new  add? "," first_argument_child send_node first_argument value  to_sym "," first_argument_ first_argument_name to_sym  to_sym "," first_argument_child send_node first_argument value  "," first_argument_ first_argument_name to_sym  "]}," RuboCop Cop RSpec OverwritingSetup on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," find_duplicates "," example_group? "," example_group_with_body? ","node body "]}," RuboCop Cop RSpec LeadingSubject node_range":{"type":"method","name":"node_range","children":[],"call":[" range_with_surrounding_space ","node source_range "," range_by_whole_lines ","  range_with_surrounding_space _with_surrounding_space "," node source_range _with_surrounding_space ","node source_ range_with_surrounding_space  ","node source_node source_range  ","  range_with_surrounding_space _by_whole_lines "," node source_range _by_whole_lines "]}," RuboCop Cop RSpec LeadingSubject find_first_let":{"type":"method","name":"find_first_let","children":[],"call":[" let? ","node parent children find ","node parent children ","node parent "]}," RuboCop Cop RSpec LeadingSubject let?":{"type":"method","name":"let?","children":[],"call":["(sym :let) include? ","node method_name "]}," RuboCop Cop RSpec LeadingSubject autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," node_range ","corrector insert_before ","node source + ","node source ","\n + ","  * ","first_let loc column ","first_let loc ","first_let loc expression "," find_first_let "," lambda ","first_node loc column ","first_node loc ","first_node loc expression "," find_first_offending_node ","RuboCop RSpec Corrector MoveNode  new move_before ","RuboCop RSpec Corrector MoveNode  new "," processed_source "," find_first_let  loc column "," find_first_let  loc "," find_first_let  loc expression "," find_ find_first_let  "," find_first_offending_node  loc column "," find_first_offending_node  loc "," find_first_offending_node  loc expression "]}," RuboCop Cop RSpec IteratedExpectation only_expectations?":{"type":"method","name":"only_expectations?","children":[],"call":[" expectation? ","body children all? ","body children ","body each_child_node all? ","body each_child_node ","body each_child_node any? "]}," RuboCop Cop RSpec IteratedExpectation single_expectation?":{"type":"method","name":"single_expectation?","children":[],"call":[" expectation? "]}," RuboCop Cop RSpec IteratedExpectation on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","node children first ","node children "," only_expectations? "," single_expectation? "," each? ","node send_node "]}," RuboCop Cop RSpec EmptyLineAfterSubject in_spec_block?":{"type":"method","name":"in_spec_block?","children":[],"call":["Examples ALL  include? ","ancestor method_name ","node each_ancestor any? ","node each_ancestor ","Examples  all "]}," RuboCop Cop RSpec EmptyLineAfterSubject autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node loc end ","node loc "," lambda "]}," RuboCop Cop RSpec EmptyLineAfterSubject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","next_line blank? "," processed_source [] "," processed_source ","node loc end line ","node loc end ","node loc ","node equal? ","node parent children last ","node parent children ","node parent "," in_spec_block? ! "," in_spec_block? "," subject? "," missing_separating_line "," last_child? ","corrector insert_after ","location end "," format "," missing_separating_line_offense "," inside_example_group? "," processed_source []  blank? "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet in_spec_block?":{"type":"method","name":"in_spec_block?","children":[],"call":["Examples ALL  include? ","ancestor method_name ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet heredoc_line":{"type":"method","name":"heredoc_line","children":[],"call":[" heredoc_line ","node each_child_node ","node loc heredoc_end ","node loc ","node loc respond_to? "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet last_node_loc":{"type":"method","name":"last_node_loc","children":[],"call":["node loc end ","node loc ","loc line > ","loc line "," heredoc_line ","node loc end line "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet no_new_line_after":{"type":"method","name":"no_new_line_after","children":[],"call":["next_line blank? "," processed_source [] ","loc line "," processed_source "," last_node_loc "," offending_loc "," processed_source [] blank? "," comment_line? "," processed_source []  blank? ","next_loc line  blank? "," last_node_loc  line ","loc loc line  "," last_node_ last_node_loc  "," offending_ last_node_loc  "," comment_loc line ? "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","loc end "," lambda "," last_node_loc ","location end "," no_new_line_after "," last_node_loc  end "," last_node_ last_node_loc  "," last_node_loc ation end "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," no_new_line_after ","latest_let equal? ","node parent children last ","node parent children ","node parent "," let? ","node parent each_child_node "," in_spec_block? ! "," in_spec_block? ","node body children last ","node body children ","node body ","latest_let nil? ","(send\n  (send\n    (send\n      (lvar :node) :body) :child_nodes) :select) last ","node body child_nodes select ","node body child_nodes "," example_group_with_body? "," missing_separating_line "," last_child? ","corrector insert_after ","location end "," format "," missing_separating_line_offense ","final_let nil? ","node body child_nodes reverse find ","node body child_nodes reverse ","(send\n  (send\n    (send\n      (lvar :node) :body) :child_nodes) :select) last  equal? ","(send\n  (send\n    (send\n      (lvar :node) :body) :child_nodes) :select) last  nil? "]}," RuboCop Cop RSpec DescribeSymbol on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," describe_symbol? "]}," RuboCop RSpec Wording append_suffix":{"type":"method","name":"append_suffix","children":[],"call":["suffix upcase "," uppercase? ","suffix upcase  upcase "]}," RuboCop RSpec Wording substitute":{"type":"method","name":"substitute","children":[],"call":[" append_suffix ","word [] "," replacements fetch "," replacements "," replacements key? "]}," RuboCop RSpec Wording ignored_word?":{"type":"method","name":"ignored_word?","children":[],"call":["ignore casecmp zero? ","ignore casecmp "," ignores any? "," ignores "]}," RuboCop RSpec Wording remove_should_and_pluralize":{"type":"method","name":"remove_should_and_pluralize","children":[],"call":["words join ","words []= "," substitute "," ignored_word? ","words each_with_index "," text split "," text "]}," RuboCop RSpec Wording uppercase?":{"type":"method","name":"uppercase?","children":[],"call":["word upcase eql? ","word upcase "]}," RuboCop RSpec Wording replace_prefix":{"type":"method","name":"replace_prefix","children":[],"call":["replacement upcase "," uppercase? "," text sub "," text "]}," RuboCop Cop RSpec SingleArgumentMessageChain key_to_arg":{"type":"method","name":"key_to_arg","children":[],"call":["node source ","node sym_type? "]}," RuboCop Cop RSpec SingleArgumentMessageChain autocorrect_hash_arg":{"type":"method","name":"autocorrect_hash_arg","children":[],"call":["corrector insert_after ","value source ","arg parent loc end ","arg parent loc ","arg parent ","corrector replace "," key_to_arg ","arg loc expression ","arg loc ","arg children first ","arg children "]}," RuboCop Cop Layout ExtraSpacing autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop RSpec ExampleGroup find_subjects":{"type":"method","name":"find_subjects","children":[],"call":[" subjects_in_scope "," subject "," scope_change? "," subject? "]}," RuboCop RSpec ExampleGroup subjects_in_scope":{"type":"method","name":"subjects_in_scope","children":[],"call":[" find_subjects ","node each_child_node flat_map ","node each_child_node "]}," RuboCop RSpec ExampleGroup subjects":{"type":"method","name":"subjects","children":[],"call":[" subjects_in_scope "," node "," find_all_in_scope "]}," RuboCop RSpec AlignLetBrace single_line_lets":{"type":"method","name":"single_line_lets","children":[],"call":["node single_line? "," let? "," root each_node select "," root each_node "," root "]}," RuboCop RSpec AlignLetBrace adjacent_let_chunks":{"type":"method","name":"adjacent_let_chunks","children":[],"call":["(send\n  (send nil :single_line_lets) :chunk) map ","last_line nil? ","last_line + == ","last_line + ","node loc line ","node loc "," single_line_lets chunk "," single_line_lets ","(send\n  (send nil :single_node loc line _lets) :chunk) map ","last_node loc line  nil? ","last_node loc line  + == ","last_node loc line  + ","node loc node loc line  "," single_node loc line _lets chunk "," single_node loc line _lets "]}," RuboCop RSpec AlignLetBrace let_group_for":{"type":"method","name":"let_group_for","children":[],"call":["member loc line == ","let loc line ","let loc ","member loc line ","member loc ","member == ","chunk any? "," adjacent_let_chunks detect "," adjacent_let_chunks "," same_line? "]}," RuboCop RSpec AlignLetBrace target_column_for":{"type":"method","name":"target_column_for","children":[],"call":["(send\n  (send nil :let_group_for\n    (lvar :let)) :map) max "," let_token column "," let_token "," let_group_for map "," let_group_for "]}," RuboCop RSpec AlignLetBrace let_token":{"type":"method","name":"let_token","children":[],"call":["node loc public_send "," token ","node loc "]}," RuboCop RSpec AlignLetBrace indent_for":{"type":"method","name":"indent_for","children":[],"call":["  * "," target_column_for - "," let_token column "," let_token "," target_column_for "]}," RuboCop RSpec AlignLetBrace offending_tokens":{"type":"method","name":"offending_tokens","children":[],"call":[" target_column_for == "," let_token column "," let_token "," target_column_for "," single_line_lets reject "," single_line_lets "]}," RuboCop RSpec AlignLetBrace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec VoidExpect void?":{"type":"method","name":"void?","children":[],"call":["parent children [] == ","parent children [] ","parent children ","parent block_type? ","parent begin_type? ","expect parent ","parent body == ","parent body ","expect parent  children [] == ","expect parent  children [] ","expect parent  children ","expect parent  block_type? ","expect parent  begin_type? ","expect expect parent  ","expect parent  body == ","expect parent  body "]}," RuboCop Cop RSpec VoidExpect check_expect":{"type":"method","name":"check_expect","children":[],"call":[" add_offense "," void? "]}," RuboCop Cop RSpec VoidExpect on_block":{"type":"method","name":"on_block","children":[],"call":[" check_expect "," expect_block? "]}," RuboCop Cop RSpec VoidExpect on_send":{"type":"method","name":"on_send","children":[],"call":[" check_expect "," expect? "]}," RuboCop Cop RSpec ReturnFromStub dynamic?":{"type":"method","name":"dynamic?","children":[],"call":["node literal? ! ","node literal? "," dynamic? ","node each_child_node any? ","node each_child_node ","node array_type? ","node recursive_literal? ! ","node recursive_literal? ","node const_type? ! ","node const_type? ","node recursive_literal_or_const? ! ","node recursive_literal_or_const? "]}," RuboCop Cop RSpec ReturnFromStub on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," dynamic? "," and_return_value "," style == "," style "," check_block_body ","node method_name == ","node method_name "," check_and_return_call "," contains_stub? "]}," RuboCop Cop RSpec ReturnFromStub on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," dynamic? "," receive_with_block "," style == "," style "," check_block_body "," contains_stub? "," stub_with_block? "]}," RuboCop Cop RSpec PredicateMatcher block_loc":{"type":"method","name":"block_loc","children":[],"call":[" range_between ","parent loc expression end_pos ","parent loc expression ","parent loc ","send_node loc expression end_pos ","send_node loc expression ","send_node loc ","parent block_type? ","send_node parent ","send_node loc expression end with ","send_node loc expression end ","send_node parent  loc expression end_pos ","send_node parent  loc expression ","send_node parent  loc ","send_node parent  block_type? ","send_node send_node parent  "]}," RuboCop Cop RSpec PredicateMatcher args_loc":{"type":"method","name":"args_loc","children":[],"call":[" range_between ","send_node loc expression end_pos ","send_node loc expression ","send_node loc ","send_node loc selector end_pos ","send_node loc selector ","send_node loc selector end with ","send_node loc selector end "]}," RuboCop Cop RSpec PredicateMatcher autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_explicit "," autocorrect_inflected "," style "]}," RuboCop Cop RSpec PredicateMatcher on_block":{"type":"method","name":"on_block","children":[],"call":[" check_explicit "," style == "," style "]}," RuboCop Cop RSpec PredicateMatcher on_send":{"type":"method","name":"on_send","children":[],"call":[" check_explicit "," check_inflected "," style "]}," RuboCop Cop RSpec ExplicitHelper replacement_matcher":{"type":"method","name":"replacement_matcher","children":[],"call":["node method_name == ","node method_name "," cop_config [] "," cop_config ","node method? "]}," RuboCop Cop RSpec ExplicitHelper to_predicate_method":{"type":"method","name":"to_predicate_method","children":[],"call":["matcher [] + ","matcher [] ","Regexp  last_match ","matcher + ","matcher to_s ","matcher to_s  [] + ","matcher to_s  [] ","matcher to_s  + ","matcher to_s  to_s "]}," RuboCop Cop RSpec ExplicitHelper move_predicate":{"type":"method","name":"move_predicate","children":[],"call":["corrector insert_after ","(str \".\") + + ","(str \".\") + ","actual loc expression ","actual loc ","corrector remove ","block_loc source "," block_loc "," args_loc source "," args_loc "," to_predicate_method ","matcher method_name ","actual source_range ","LocationHelp  block_with_whitespace ","LocationHelp  arguments_with_whitespace source ","LocationHelp  arguments_with_whitespace ","block_loc source _loc source "," block_loc  source ","LocationHelp  block_with_whitespace  source "," block_loc source _loc ","  block_loc  "," LocationHelp  block_with_whitespace  ","  args_loc source _loc source "," LocationHelp  arguments_with_whitespace source _loc source ","  args_loc source _loc "," LocationHelp  arguments_with_whitespace source _loc "," to_ to_predicate_method _method ","LocationHelp  block_loc source _with_whitespace "]}," RuboCop Cop RSpec ExplicitHelper corrector_explicit":{"type":"method","name":"corrector_explicit","children":[],"call":["corrector replace ","to loc selector ","to loc "," move_predicate ","matcher loc expression ","matcher loc "," replacement_matcher "," lambda ","to_node loc selector ","to_node loc ","matcher source_range ","  replacement_matcher  "]}," RuboCop Cop RSpec ExplicitHelper autocorrect_explicit_block":{"type":"method","name":"autocorrect_explicit_block","children":[],"call":[" corrector_explicit "," predicate_matcher_block? ","node send_node "]}," RuboCop Cop RSpec ExplicitHelper autocorrect_explicit_send":{"type":"method","name":"autocorrect_explicit_send","children":[],"call":[" corrector_explicit "," predicate_matcher? "]}," RuboCop Cop RSpec ExplicitHelper autocorrect_explicit":{"type":"method","name":"autocorrect_explicit","children":[],"call":[" autocorrect_explicit_block "," autocorrect_explicit_send "]}," RuboCop Cop RSpec ExplicitHelper message_explicit":{"type":"method","name":"message_explicit","children":[],"call":[" format "," to_predicate_method ","matcher method_name "]}," RuboCop Cop RSpec ExplicitHelper predicate_matcher_name?":{"type":"method","name":"predicate_matcher_name?","children":[],"call":["name end_with? ! ","name end_with? ","BUILT_IN_MATCHERS  include? ! ","BUILT_IN_MATCHERS  include? ","name start_with? ","name to_s "," allowed_explicit_matchers include? "," allowed_explicit_matchers ","(str \"include\") include? ","name to_s  end_with? ! ","name to_s  end_with? ","name to_s  start_with? ","name to_s  to_s "]}," RuboCop Cop RSpec ExplicitHelper check_explicit":{"type":"method","name":"check_explicit","children":[],"call":[" add_offense "," message_explicit "," predicate_matcher? "," part_of_ignored_node? "," ignore_node ","node children first ","node children "," predicate_matcher_block? "," corrector_explicit ","node send_node "," uncorrectable_matcher? "," replaceable_matcher? "]}," RuboCop Cop RSpec InflectedHelper true?":{"type":"method","name":"true?","children":[],"call":["result ! ","to == ","arg true_type? ","to_symbol == ","matcher first_argument true_type? ","matcher first_argument ","matcher method_name "]}," RuboCop Cop RSpec InflectedHelper rewrite_matcher":{"type":"method","name":"rewrite_matcher","children":[],"call":["corrector replace "," to_predicate_matcher + + "," to_predicate_matcher + "," to_predicate_matcher ","matcher loc expression ","matcher loc ","block_loc source "," block_loc "," args_loc source "," args_loc ","predicate method_name ","matcher source_range ","LocationHelp  block_with_whitespace ","LocationHelp  arguments_with_whitespace source ","LocationHelp  arguments_with_whitespace ","block_loc source _loc source "," block_loc  source ","LocationHelp  block_with_whitespace  source "," block_loc source _loc ","  block_loc  "," LocationHelp  block_with_whitespace  ","  args_loc source _loc source "," LocationHelp  arguments_with_whitespace source _loc source ","  args_loc source _loc "," LocationHelp  arguments_with_whitespace source _loc ","LocationHelp  block_loc source _with_whitespace "]}," RuboCop Cop RSpec InflectedHelper remove_predicate":{"type":"method","name":"remove_predicate","children":[],"call":["corrector remove "," block_loc "," range_between ","predicate loc expression end_pos ","predicate loc expression ","predicate loc ","predicate loc dot begin_pos ","predicate loc dot ","predicate loc dot with ","LocationHelp  block_with_whitespace ","predicate source_range end_pos ","predicate source_range ","  range_between _between "," predicate loc dot with _between ","predicate source_ range_between  end_pos ","predicate source_predicate loc dot with  end_pos ","predicate source_ range_between  ","predicate source_predicate loc dot with  "]}," RuboCop Cop RSpec InflectedHelper autocorrect_inflected":{"type":"method","name":"autocorrect_inflected","children":[],"call":[" rewrite_matcher ","corrector replace "," true? ","node loc selector ","node loc "," remove_predicate "," lambda "," predicate_in_actual? "]}," RuboCop Cop RSpec InflectedHelper to_predicate_matcher":{"type":"method","name":"to_predicate_matcher","children":[],"call":["name [] ","name sub [] ","name sub ","name to_s ","name to_s  [] ","name to_s  sub [] ","name to_s  sub ","name to_s  to_s "]}," RuboCop Cop RSpec InflectedHelper message_inflected":{"type":"method","name":"message_inflected","children":[],"call":[" format "," to_predicate_matcher ","predicate method_name "]}," RuboCop Cop RSpec InflectedHelper predicate?":{"type":"method","name":"predicate?","children":[],"call":["sym to_s end_with? ","sym to_s "]}," RuboCop Cop RSpec InflectedHelper boolean_matcher?":{"type":"method","name":"boolean_matcher?","children":[],"call":[" be_boolthy? "," be_bool? "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec InflectedHelper check_inflected":{"type":"method","name":"check_inflected","children":[],"call":[" add_offense "," message_inflected ","node loc expression ","node loc "," predicate_in_actual? "," rewrite_matcher ","corrector replace "," true? ","node loc selector "," remove_predicate "]}," RuboCop Cop RSpec MultipleSubjects remove_autocorrect":{"type":"method","name":"remove_autocorrect","children":[],"call":["corrector remove ","node loc expression ","node loc "," lambda "," range_by_whole_lines ","node source_range ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "]}," RuboCop Cop RSpec MultipleSubjects rename_autocorrect":{"type":"method","name":"rename_autocorrect","children":[],"call":["corrector replace ","send_node loc selector ","send_node loc "," lambda ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop RSpec MultipleSubjects autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_autocorrect "," rename_autocorrect "," named_subject? ","node method_name equal? ","node method_name ","subject method_name equal? ","subject method_name "]}," RuboCop Cop RSpec MultipleSubjects on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","subjects [] each ","subjects [] ","RuboCop RSpec ExampleGroup  new subjects ","RuboCop RSpec ExampleGroup  new "," example_group? "," autocorrect ","RuboCop RSpec ExampleGroup  new subjects  [] each ","RuboCop RSpec ExampleGroup  new subjects  [] ","RuboCop RSpec ExampleGroup  new RuboCop RSpec ExampleGroup  new subjects  "]}," RuboCop Cop RSpec LetBeforeExamples check_let_declarations":{"type":"method","name":"check_let_declarations","children":[],"call":[" example_or_group? "," add_offense "," let? ","node each_child_node ","child sibling_index < ","first_example sibling_index ","child sibling_index "," find_first_example "," autocorrect ","first_example right_siblings each ","first_example right_siblings "," example_group_with_include_examples? ! "," example_group_with_include_examples? "," find_first_example  sibling_index "," find_ find_first_example  "," auto example_group_with_include_examples? !  "," find_first_example  right_siblings each "," find_first_example  right_siblings "]}," RuboCop Cop RSpec LetBeforeExamples on_block":{"type":"method","name":"on_block","children":[],"call":[" check_let_declarations "," example_group_with_body? ","node body "," multiline_block? "]}," RuboCop Cop RSpec InvalidPredicateMatcher message":{"type":"method","name":"message","children":[],"call":[" format ","predicate method_name "]}," RuboCop Cop RSpec InvalidPredicateMatcher predicate?":{"type":"method","name":"predicate?","children":[],"call":["name end_with? ","name start_with? ","name to_s ","name to_s  end_with? ","name to_s  start_with? ","name to_s  to_s "]}," RuboCop Cop RSpec InvalidPredicateMatcher on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," invalid_predicate_matcher? "," format ","predicate method_name "]}," RuboCop Cop RSpec HookArgument argument_range":{"type":"method","name":"argument_range","children":[],"call":[" range_between ","send_node loc expression end_pos ","send_node loc expression ","send_node loc ","send_node loc selector end_pos ","send_node loc selector ","send_node loc selector end with ","send_node loc selector end "]}," RuboCop Cop RSpec FactoryGirl DynamicAttributeDefinedStatically autocorrect_without_parens":{"type":"method","name":"autocorrect_without_parens","children":[],"call":["corrector insert_after ","corrector insert_before ","arguments location expression ","arguments location ","node descendants first ","node descendants "," lambda ","arguments location arguments location expression  ","node descendants first  location expression ","node descendants first  location "]}," RuboCop Cop RSpec FactoryGirl DynamicAttributeDefinedStatically autocorrect_replacing_parens":{"type":"method","name":"autocorrect_replacing_parens","children":[],"call":["corrector replace ","node location end ","node location ","node location begin "," lambda "]}," RuboCop Cop RSpec FactoryGirl DynamicAttributeDefinedStatically method_uses_parens?":{"type":"method","name":"method_uses_parens?","children":[],"call":["location end source == ","location end source ","location end ","location begin source == ","location begin source ","location begin "]}," RuboCop Cop RSpec FactoryGirl DynamicAttributeDefinedStatically autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_without_parens "," autocorrect_replacing_parens "," method_uses_parens? ","node location "]}," RuboCop Cop RSpec FactoryGirl DynamicAttributeDefinedStatically on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," dynamic_defined_statically? "," factory_attributes to_a flatten each "," factory_attributes to_a flatten "," factory_attributes to_a "," factory_attributes ","node method_name == ","node method_name "]}," RuboCop Cop RSpec ExpectInHook send_node":{"type":"method","name":"send_node","children":[],"call":["node children first ","node children ","node send_type? "]}," RuboCop Cop RSpec ExpectInHook message":{"type":"method","name":"message","children":[],"call":[" format ","expect method_name ","hook method_name "]}," RuboCop Cop RSpec ExpectInHook on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," message "," send_node "," expect "," hook "," expectation ","node body ","node body nil? "," hook? ","expect loc selector ","expect loc "]}," RuboCop Cop RSpec AlignRightLetBrace token_aligner":{"type":"method","name":"token_aligner","children":[],"call":["RuboCop RSpec AlignLetBrace  new "," processed_source ast "," processed_source "]}," RuboCop Cop RSpec AlignRightLetBrace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," token_aligner indent_for "," token_aligner ","let loc end ","let loc "," lambda "]}," RuboCop Cop RSpec AlignRightLetBrace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," token_aligner offending_tokens each "," token_aligner offending_tokens "," token_aligner "," processed_source blank? "," processed_source "]}," RuboCop Cop RSpec AlignRightLetBrace autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop RSpec AlignLeftLetBrace token_aligner":{"type":"method","name":"token_aligner","children":[],"call":["RuboCop RSpec AlignLetBrace  new "," processed_source ast "," processed_source "]}," RuboCop Cop RSpec AlignLeftLetBrace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," token_aligner indent_for "," token_aligner ","let loc begin ","let loc "," lambda "]}," RuboCop Cop RSpec AlignLeftLetBrace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," token_aligner offending_tokens each "," token_aligner offending_tokens "," token_aligner "," processed_source blank? "," processed_source "]}," RuboCop Cop RSpec AlignLeftLetBrace autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop RSpec Capybara FeatureMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","MAP  [] to_s ","MAP  [] ","node method_name ","node loc selector ","node loc "," lambda "]}," RuboCop Cop RSpec Capybara FeatureMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","MAP  [] "," feature_method? "]}," RuboCop Cop RSpec ReturnFromStub check_block_body":{"type":"method","name":"check_block_body","children":[],"call":[" add_offense "," dynamic? ","node each_ancestor first ","node each_ancestor ","block body ","BlockBodyCorrector  new call ","BlockBodyCorrector  new ","block loc begin ","block loc ","node each_ancestor first  body ","block block body  ","node each_ancestor first  loc begin ","node each_ancestor first  loc "]}," RuboCop Cop RSpec ReturnFromStub check_and_return_call":{"type":"method","name":"check_and_return_call","children":[],"call":[" add_offense "," dynamic? "," and_return_value ","AndReturnCallCorrector  new call ","AndReturnCallCorrector  new ","and_return loc selector ","and_return loc "]}," RuboCop Cop RSpec LetBeforeExamples multiline_block?":{"type":"method","name":"multiline_block?","children":[],"call":["block begin_type? "]}," RuboCop Cop RSpec Capybara FeatureMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","MAP  [] "," feature_method "," enabled? "," spec? "," root_node "," inside_spec? ","corrector replace ","MAP  [] to_s ","send_node loc selector ","send_node loc "," inside_example_group? "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," expectation_set_on_current_path "," autocorrect ","node chained? ","node loc selector ","node loc "]}," RuboCop Cop RSpec ExampleWording simple_present":{"type":"method","name":"simple_present","children":[],"call":["word [] ","(str \"a\") include? ! ","(str \"a\") include? ","word [] == ","(str \"ch\") include? ","(str \"o\") include? "," custom_transform [] "," custom_transform "]}," RuboCop Cop RSpec ExampleWording corrected_message":{"type":"method","name":"corrected_message","children":[],"call":["(send\n  (send\n    (send\n      (lvar :range) :source) :split\n    (str \" \")) :tap) join ","words []= "," simple_present ","words [] "," ignored_words include? "," ignored_words ","words each_with_index ","words unshift ","first_word == ","words shift ","range source split tap ","range source split ","range source ","words shift  == "]}," RuboCop Cop RSpec SubjectStub expectation?":{"type":"method","name":"expectation?","children":[],"call":[" receive_message? "," all_matcher? "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically autocorrect_without_parens":{"type":"method","name":"autocorrect_without_parens","children":[],"call":["corrector insert_after ","corrector insert_before ","arguments location expression ","arguments location ","node descendants first ","node descendants "," lambda ","arguments location arguments location expression  ","node descendants first  location expression ","node descendants first  location "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically autocorrect_replacing_parens":{"type":"method","name":"autocorrect_replacing_parens","children":[],"call":["corrector replace ","node location end ","node location ","node location begin "," lambda "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically method_uses_parens?":{"type":"method","name":"method_uses_parens?","children":[],"call":["location end source == ","location end source ","location end ","location begin source == ","location begin source ","location begin "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_without_parens "," autocorrect_replacing_parens "," method_uses_parens? ","node location "," autocorrect_hash_without_braces "," value_hash_without_braces? ","node descendants first ","node descendants "," method_uses_parens? ! "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," dynamic_defined_statically? "," factory_attributes to_a flatten each "," factory_attributes to_a flatten "," factory_attributes to_a "," factory_attributes ","node method_name == ","node method_name "," static? "," value_matcher to_a all? "," value_matcher to_a "," value_matcher "," callback_with_symbol_proc? "," static_or_proc? "]}," RuboCop Cop RSpec ContextWording joined_prefixes":{"type":"method","name":"joined_prefixes","children":[],"call":["quoted join ","quoted << ","quoted pop ","quoted first ","quoted size == ","quoted size "," prefixes map "," prefixes "]}," RuboCop Cop RSpec ContextWording message":{"type":"method","name":"message","children":[],"call":[" format "," joined_prefixes "]}," RuboCop Cop RSpec ContextWording prefixes":{"type":"method","name":"prefixes","children":[],"call":[" cop_config [] "," cop_config "," Array "," cop_config fetch "]}," RuboCop Cop RSpec ContextWording bad_prefix?":{"type":"method","name":"bad_prefix?","children":[],"call":[" prefixes include? ! "," prefixes include? ","description split first ","description split "," prefixes "," prefix_regex match? ! "," prefix_regex match? "," prefix_regex "]}," RuboCop Cop RSpec ContextWording on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," message "," context_wording "," format "," joined_prefixes "," expect_patterns "," bad_pattern? ","  format  "]}," RuboCop Cop RSpec MultipleExpectations aggregated_failures_by_default?":{"type":"method","name":"aggregated_failures_by_default?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop RSpec Cop rspec_pattern_config?":{"type":"method","name":"rspec_pattern_config?","children":[],"call":[" all_cops_config fetch key? "," all_cops_config fetch "," all_cops_config "," all_cops_config key? "]}," RuboCop Cop RSpec Cop all_cops_config":{"type":"method","name":"all_cops_config","children":[],"call":[" config for_all_cops "," config "]}," RuboCop RSpec DescriptionExtractor CodeObject cop_subclass?":{"type":"method","name":"cop_subclass?","children":[],"call":["COP_CLASS_NAMES  include? "," yardoc superclass path "," yardoc superclass "," yardoc "," yardoc superclass path == "]}," RuboCop Cop RSpec ReturnFromStub BlockBodyCorrector heredoc?":{"type":"method","name":"heredoc?","children":[],"call":[" body loc is_a? "," body loc "," body "]}," RuboCop Cop RSpec ReturnFromStub BlockBodyCorrector range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new "," block source_range end_pos "," block source_range "," block "," node source_range end_pos "," node source_range "," node "," block source_range source_buffer "]}," RuboCop Cop RSpec ReturnFromStub BlockBodyCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," body source "," body "," range "," heredoc? "," block send_node source "," block send_node "," block "," block loc expression "," block loc "]}," RuboCop Cop RSpec ReturnFromStub BlockBodyCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[" block body "," block ","node each_ancestor first ","node each_ancestor ","block body ","block parent "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector hash_without_braces?":{"type":"method","name":"hash_without_braces?","children":[],"call":[" args braces? ! "," args braces? "," args "," args hash_type? "," arg braces? ! "," arg braces? "," arg "," arg hash_type? "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector replacement":{"type":"method","name":"replacement","children":[],"call":[" args source "," args "," hash_without_braces? "," arg source "," arg "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new "," node source_range end_pos "," node source_range "," node "," receiver source_range end_pos "," receiver source_range "," receiver "," node source_range source_buffer "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector heredoc?":{"type":"method","name":"heredoc?","children":[],"call":[" args loc is_a? "," args loc "," args "," arg loc is_a? "," arg loc "," arg "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," replacement "," range "," heredoc? "]}," RuboCop Cop RSpec ReturnFromStub AndReturnCallCorrector initialize":{"type":"method","name":"initialize","children":[],"call":["node first_argument ","node receiver "]}," RuboCop Cop RSpec ReturnFromStub autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["BlockBodyCorrector  new ","AndReturnCallCorrector  new "," style == "," style "]}," RuboCop Cop RSpec LetBeforeExamples heredoc_lines":{"type":"method","name":"heredoc_lines","children":[],"call":["n loc respond_to? ","n loc ","node body child_nodes select ","node body child_nodes ","node body "]}," RuboCop Cop RSpec LetBeforeExamples last_node_loc":{"type":"method","name":"last_node_loc","children":[],"call":["node loc end end_pos ","node loc end ","node loc ","heredoc loc heredoc_end end_pos ","heredoc loc heredoc_end ","heredoc loc "," heredoc_lines last "," heredoc_lines "," heredoc_lines last  loc  heredoc_lines last _end end_pos "," heredoc_lines last  loc  heredoc_lines last _end "," heredoc_lines last  loc ","  heredoc_lines last _lines last ","  heredoc_lines last _lines "]}," RuboCop Cop RSpec LetBeforeExamples node_range":{"type":"method","name":"node_range","children":[],"call":[" range_between "," last_node_loc ","node loc expression begin_pos ","node loc expression ","node loc "," final_end_location end_pos "," final_end_location ","node loc expression with "]}," RuboCop Cop RSpec LetBeforeExamples source":{"type":"method","name":"source","children":[],"call":[" node_range source "," node_range "]}," RuboCop Cop RSpec LetBeforeExamples node_range_with_surrounding_space":{"type":"method","name":"node_range_with_surrounding_space","children":[],"call":[" range_by_whole_lines "," node_range ","  node_range _by_whole_lines "," node_ node_range  "]}," RuboCop Cop RSpec LetBeforeExamples find_first_example":{"type":"method","name":"find_first_example","children":[],"call":[" example_or_group? ","node children find ","node children "]}," RuboCop Cop RSpec LetBeforeExamples autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," node_range_with_surrounding_space ","corrector insert_before "," source + "," source ","\n + ","  * ","first_example loc column ","first_example loc ","first_example loc expression "," find_first_example ","node parent "," lambda ","RuboCop RSpec Corrector MoveNode  new move_before ","RuboCop RSpec Corrector MoveNode  new "," processed_source "," find_first_example  loc column "," find_first_example  loc "," find_first_example  loc expression "," find_ find_first_example  "]}," RuboCop Cop RSpec InstanceVariable inside_dynamic_class?":{"type":"method","name":"inside_dynamic_class?","children":[],"call":[" dynamic_class? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop RSpec ExpectChange autocorrect_block_to_method_call":{"type":"method","name":"autocorrect_block_to_method_call","children":[],"call":["corrector replace ","node loc expression ","node loc "," expect_change_with_block "," lambda "]}," RuboCop Cop RSpec ExpectChange autocorrect_method_call_to_block":{"type":"method","name":"autocorrect_method_call_to_block","children":[],"call":["corrector replace ","node loc expression ","node loc "," expect_change_with_arguments "," lambda "]}," RuboCop Cop RSpec ExpectChange autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_block_to_method_call "," autocorrect_method_call_to_block "," style == "," style "]}," RuboCop Cop RSpec ExpectChange on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," expect_change_with_block "," style == "," style ","corrector replace ","receiver source "]}," RuboCop Cop RSpec ExpectChange on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," expect_change_with_arguments "," style == "," style ","corrector replace ","receiver source "]}," RuboCop Cop RSpec ExampleWithoutDescription disallow_empty_description?":{"type":"method","name":"disallow_empty_description?","children":[],"call":["node parent multiline? ","node parent "," style == "," style "]}," RuboCop Cop RSpec ExampleWithoutDescription check_example_without_description":{"type":"method","name":"check_example_without_description","children":[],"call":[" add_offense "," disallow_empty_description? ","arg nil? ","node arguments? "]}," RuboCop Cop RSpec ExampleWithoutDescription on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","message to_s empty? ","message to_s "," example_description "," check_example_without_description "," example? "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker whitelisted_symbol?":{"type":"method","name":"whitelisted_symbol?","children":[],"call":["WHITELIST_STATUS  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" node value "," node "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker number":{"type":"method","name":"number","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  [] "," symbol "," symbol to_sym "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" number to_s "," number "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," symbol inspect "," symbol "," preferred_style "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" whitelisted_symbol? ! "," whitelisted_symbol? "," node int_type? ! "," node int_type? "," node "," allowed_symbol? ! "," allowed_symbol? "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker number":{"type":"method","name":"number","children":[],"call":[" node source to_i "," node source "," node "," node source delete to_i "," node source delete "," node value to_i "," node value "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  key "," number "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" symbol inspect "," symbol "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," number to_s "," number "," preferred_style "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" node sym_type? ! "," node sym_type? "," node "," custom_http_status_code? ! "," custom_http_status_code? "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec Rails HttpStatus checker_class":{"type":"method","name":"checker_class","children":[],"call":[" style "]}," RuboCop Cop RSpec Rails HttpStatus autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","checker preferred_style ","node loc expression ","node loc "," checker_class new "," checker_class "," lambda "," checker_class new  preferred_style ","  checker_class new _class new ","  checker_class new _class "]}," RuboCop Cop RSpec Rails HttpStatus support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[]}," RuboCop Cop RSpec Rails HttpStatus on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","checker message ","checker node ","checker offensive? "," checker_class new "," checker_class "," http_status ","corrector replace ","checker preferred_style ","checker prefer ","checker offense_range ","arg heredoc? ","arg str_type? "," checker_class new  message "," checker_class new  node "," checker_class new  offensive? ","  checker_class new _class new ","  checker_class new _class "," checker_class new  preferred_style "," checker_class new  prefer "," checker_class new  offense_range "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically autocorrected_source":{"type":"method","name":"autocorrected_source","children":[],"call":["node body source ","node body ","node send_node source ","node send_node ","node body hash_type? "," autocorrected_attribute "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically static?":{"type":"method","name":"static?","children":[],"call":["node const_type? ","node recursive_literal? ","node nil? "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," autocorrected_source ","node loc expression ","node loc "," lambda "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," static? ","values to_a none? ","values to_a "," block_value_matcher "," factory_attributes to_a flatten each "," factory_attributes to_a flatten "," factory_attributes to_a "," factory_attributes "," dynamic? ","values to_a all? "," block_value_matcher  to_a none? "," block_value_matcher  to_a "," block_value_matcher  to_a all? "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically autocorrect_hash_without_braces":{"type":"method","name":"autocorrect_hash_without_braces","children":[],"call":[" autocorrect_replacing_parens "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically value_hash_without_braces?":{"type":"method","name":"value_hash_without_braces?","children":[],"call":["node braces? ! ","node braces? ","node hash_type? "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically static?":{"type":"method","name":"static?","children":[],"call":["node const_type? ","node recursive_literal? "," value_matcher to_a all? "," value_matcher to_a "," value_matcher "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker custom_http_status_code?":{"type":"method","name":"custom_http_status_code?","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  value? ! "," Rack Utils SYMBOL_TO_STATUS_CODE  value? "," node source to_i "," node source "," node "," node int_type? "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically autocorrected_attribute":{"type":"method","name":"autocorrected_attribute","children":[],"call":["  + ","body source ","body hash_type? ","body nil? "]}," RuboCop RSpec Node recursive_literal_or_const?":{"type":"method","name":"recursive_literal_or_const?","children":[],"call":[" const_type? "," literal? "," children all? "," children "," type "]}," RuboCop Cop RSpec SharedExamples Checker wrap_with_single_quotes":{"type":"method","name":"wrap_with_single_quotes","children":[],"call":[]}," RuboCop Cop RSpec SharedExamples Checker symbol":{"type":"method","name":"symbol","children":[],"call":[" node value "," node "]}," RuboCop Cop RSpec SharedExamples Checker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" wrap_with_single_quotes "," symbol to_s tr "," symbol to_s "," symbol "]}," RuboCop Cop RSpec SharedExamples Checker message":{"type":"method","name":"message","children":[],"call":[" format "," symbol inspect "," symbol "," preferred_style "]}," RuboCop Cop RSpec SharedExamples Checker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec SharedExamples autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","checker preferred_style ","node loc expression ","node loc ","Checker  new "," lambda ","Checker  new  preferred_style "]}," RuboCop Cop RSpec SharedExamples on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","checker message ","checker node ","Checker  new "," shared_examples ","node first_argument ","corrector replace ","checker preferred_style ","Checker  new  message ","Checker  new  node ","Checker  new  preferred_style "]}," RuboCop Cop RSpec Pending skip_symbol?":{"type":"method","name":"skip_symbol?","children":[],"call":["symbol_node == ","(const nil :SKIP_SYMBOL) include? "]}," RuboCop Cop RSpec Pending skip_node?":{"type":"method","name":"skip_node?","children":[],"call":[" skip_symbol? ","node value truthy_literal? ","node value ","node key ","node respond_to? "]}," RuboCop Cop RSpec Pending skipped_from_metadata?":{"type":"method","name":"skipped_from_metadata?","children":[],"call":[" skip_node? ","(or\n  (send nil :metadata\n    (lvar :node))\n  (array)) any? "," metadata "]}," RuboCop Cop RSpec Pending on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," skipped_from_metadata? "," pending_block? "," rspec? "," skipped? "]}," RuboCop Cop RSpec FactoryBot StaticAttributeDefinedDynamically dynamic?":{"type":"method","name":"dynamic?","children":[],"call":["node recursive_literal_or_const? ! ","node recursive_literal_or_const? "]}," RuboCop Cop RSpec FactoryBot CreateList format_receiver":{"type":"method","name":"format_receiver","children":[],"call":["receiver source "]}," RuboCop Cop RSpec FactoryBot CreateList format_method_call":{"type":"method","name":"format_method_call","children":[],"call":["node parenthesized? "]}," RuboCop Cop RSpec FactoryBot CreateList build_options_string":{"type":"method","name":"build_options_string","children":[],"call":["options map join ","options map "]}," RuboCop Cop RSpec FactoryBot CreateList factory_call_replacement":{"type":"method","name":"factory_call_replacement","children":[],"call":[" format_method_call "," format_receiver ","options empty? "," build_options_string "," factory_call "," build_options_string  empty? "," build_ build_options_string _string "]}," RuboCop Cop RSpec FactoryBot CreateList generate_n_times_block":{"type":"method","name":"generate_n_times_block","children":[],"call":[" format_method_call "," format_receiver ","options empty? "," build_options_string "," factory_list_call "," build_options_string  empty? "," build_ build_options_string _string "]}," RuboCop Cop RSpec FactoryBot CreateList autocorrect_create_list_to_n_times":{"type":"method","name":"autocorrect_create_list_to_n_times","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda "," generate_n_times_block "]}," RuboCop Cop RSpec FactoryBot CreateList autocorrect_n_times_to_create_list":{"type":"method","name":"autocorrect_n_times_to_create_list","children":[],"call":["corrector replace ","block loc expression ","block loc "," lambda "," factory_call_replacement ","block body ","block receiver source ","block receiver ","node parent ","node parent  loc expression ","node parent  loc "," factory_call_ factory_call_replacement  ","node parent  body ","node parent  receiver source ","node parent  receiver "]}," RuboCop Cop RSpec FactoryBot CreateList contains_only_factory?":{"type":"method","name":"contains_only_factory?","children":[],"call":[" factory_call ","node send_node ","node block_type? "]}," RuboCop Cop RSpec FactoryBot CreateList autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_create_list_to_n_times "," autocorrect_n_times_to_create_list "," style == "," style ","TimesCorrector  new ","CreateListCorrector  new "]}," RuboCop Cop RSpec FactoryBot CreateList on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," factory_list_call "," style == "," style ","TimesCorrector  new call ","TimesCorrector  new ","node loc selector ","node loc "]}," RuboCop Cop RSpec FactoryBot CreateList on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","node send_node "," contains_only_factory? ","node body "," n_times_block? "," style == "," style "," n_times_block_without_arg? ","CreateListCorrector  new call ","CreateListCorrector  new "," arguments_include_method_call? "," n_times_block_with_arg_and_used? "," block_with_arg_and_used? "," array_new_or_n_times_block? "]}," RuboCop Cop RSpec Capybara FeatureMethods enabled_methods":{"type":"method","name":"enabled_methods","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop RSpec Capybara FeatureMethods enabled?":{"type":"method","name":"enabled?","children":[],"call":[" enabled_methods include? "," enabled_methods "]}," RuboCop Cop RSpec Capybara FeatureMethods root_node":{"type":"method","name":"root_node","children":[],"call":[" processed_source ast "," processed_source "]}," RuboCop Cop RSpec Be on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," be_without_args ","matcher loc selector ","matcher loc "]}," RuboCop Cop RSpec FactoryBot DynamicAttributeDefinedStatically static_or_proc?":{"type":"method","name":"static_or_proc?","children":[],"call":["value recursive_literal_or_const? ","value block_pass_type? "," value_matcher to_a all? "," value_matcher to_a "," value_matcher "]}," RuboCop Cop RSpec ReceiveCounts range":{"type":"method","name":"range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","offending_node loc selector begin_pos - ","offending_node loc selector begin_pos ","offending_node loc selector ","offending_node loc ","offending_node loc dot begin_pos ","offending_node loc dot ","offending_node loc dot with ","node source_range end_pos ","node source_range "]}," RuboCop Cop RSpec ReceiveCounts matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["method == ","count == "]}," RuboCop Cop RSpec ReceiveCounts message_for":{"type":"method","name":"message_for","children":[],"call":[" format "," matcher_for ","node first_argument source to_i ","node first_argument source ","node first_argument ","node method_name "]}," RuboCop Cop RSpec ReceiveCounts autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," range ","node parent "," matcher_for ","node first_argument source to_i ","node first_argument source ","node first_argument ","node method_name "," lambda "]}," RuboCop Cop RSpec ReceiveCounts on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message_for ","offending_range source "," range "," receive_counts "," stub? ","offending_node receiver "," autocorrect "," range  source "]}," RuboCop Cop RSpec EmptyLineAfterFinalLet offending_loc":{"type":"method","name":"offending_loc","children":[],"call":["node loc expression ","node loc "," source_range "," processed_source buffer "," processed_source ","offending_line length - ","offending_line length ","offending_line index "," comment_line? "," processed_source [] ","last_line - ","offending_line offending_line length -  - "," processed_source []  length - ","offending_line offending_line length -  "," processed_source []  length "," processed_source []  index "]}," RuboCop Cop RSpec Capybara FeatureMethods root_with_siblings?":{"type":"method","name":"root_with_siblings?","children":[],"call":["node parent nil? ","node parent ","node begin_type? "]}," RuboCop Cop RSpec Capybara FeatureMethods root_node?":{"type":"method","name":"root_node?","children":[],"call":[" root_with_siblings? ","node parent ","node parent nil? "]}," RuboCop Cop RSpec Capybara FeatureMethods inside_spec?":{"type":"method","name":"inside_spec?","children":[],"call":[" spec? "," root_node? ","node ancestors find ","node ancestors "]}," RuboCop RSpec FinalEndLocation final_end_location":{"type":"method","name":"final_end_location","children":[],"call":["(send\n  (send\n    (lvar :start_node) :loc) :end) max_by ","start_node loc end ","start_node loc ","node loc heredoc_end ","node loc ","start_node each_node select map ","start_node each_node select ","start_node each_node "]}," RuboCop RSpec BlankLineSeparation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","location end "," missing_separating_line "," lambda "]}," RuboCop RSpec BlankLineSeparation offending_loc":{"type":"method","name":"offending_loc","children":[],"call":[" source_range "," processed_source buffer "," processed_source ","offending_line length - ","offending_line length ","offending_line lstrip length ","offending_line lstrip "," processed_source [] ","last_line - "," processed_source []  length - "," processed_source []  length "," processed_source []  lstrip length "," processed_source []  lstrip "]}," RuboCop RSpec BlankLineSeparation missing_separating_line":{"type":"method","name":"missing_separating_line","children":[],"call":[" offending_loc "," processed_source [] blank? "," processed_source [] "," processed_source "," comment_line? "," final_end_location line "," final_end_location "," comment_ final_end_location line ? "," final_end_location  final_end_location line  "]}," RuboCop Cop RSpec OverwritingSetup common_setup?":{"type":"method","name":"common_setup?","children":[],"call":["node send_node arguments all? ","node send_node arguments ","node send_node "," setup? "]}," RuboCop Cop RSpec LeadingSubject find_first_offending_node":{"type":"method","name":"find_first_offending_node","children":[],"call":[" offending? ","node parent children find ","node parent children ","node parent "]}," RuboCop Cop RSpec LeadingSubject offending?":{"type":"method","name":"offending?","children":[],"call":[" example? "," hook? "," let? "," include? "," spec_group? "]}," RuboCop Cop RSpec LeadingSubject check_previous_nodes":{"type":"method","name":"check_previous_nodes","children":[],"call":["sibling equal? "," offending? "," add_offense "," format ","sibling method_name ","node parent each_child_node ","node parent "," autocorrect ","offender method_name "," offending_node "]}," RuboCop Cop RSpec EmptyLineAfterHook on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","node method_name "," missing_separating_line ","node equal? ","node parent children last ","node parent children ","node parent "," hook? "," last_child? ","corrector insert_after ","location end "," missing_separating_line_offense "," chained_single_line_hooks? "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec EmptyLineAfterExampleGroup on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","node method_name "," missing_separating_line ","node equal? ","node parent children last ","node parent children ","node parent "," example_group "," last_child? "," example_group? ","corrector insert_after ","location end "," missing_separating_line_offense "," spec_group? "]}," RuboCop RSpec BlankLineSeparation last_child?":{"type":"method","name":"last_child?","children":[],"call":["node equal? ","node parent children last ","node parent children ","node parent ","node parent begin_type? "]}," RuboCop Cop RSpec ReceiveNever autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","node loc selector end_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot ","corrector replace ","node parent loc selector ","node parent loc ","node parent "," lambda ","node loc dot with ","  range_between _between "," node loc dot with _between "]}," RuboCop Cop RSpec ReceiveNever on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," method_on_stub? ","node method_name == ","node method_name "," autocorrect ","node loc selector ","node loc ","node method? "]}," RuboCop Cop RSpec MultipleSubjects named_subject?":{"type":"method","name":"named_subject?","children":[],"call":["node send_node arguments? ","node send_node "]}," RuboCop Cop RSpec MissingExampleGroupArgument on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","node method_name ","node send_node arguments? ","node send_node "," example_group? "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically attribute_defining_method?":{"type":"method","name":"attribute_defining_method?","children":[],"call":["ATTRIBUTE_DEFINING_METHODS  include? ","RuboCop RSpec FactoryBot  attribute_defining_methods include? ","RuboCop RSpec FactoryBot  attribute_defining_methods "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically reserved_method?":{"type":"method","name":"reserved_method?","children":[],"call":["RESERVED_METHODS  include? ","RuboCop RSpec FactoryBot  reserved_methods include? ","RuboCop RSpec FactoryBot  reserved_methods "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically value_hash_without_braces?":{"type":"method","name":"value_hash_without_braces?","children":[],"call":["node braces? ! ","node braces? ","node hash_type? "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically braces":{"type":"method","name":"braces","children":[],"call":[" value_hash_without_braces? ","node first_argument "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically autocorrect_without_parens":{"type":"method","name":"autocorrect_without_parens","children":[],"call":["corrector insert_after ","corrector insert_before ","argument location expression ","argument location ","node first_argument "," lambda "," braces ","argument source_range ","argument location argument location expression  ","argument location argument source_range  ","node first_argument  location expression ","node first_argument  location ","node first_node first_argument  ","node first_argument  source_range "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically autocorrect_replacing_parens":{"type":"method","name":"autocorrect_replacing_parens","children":[],"call":["corrector replace ","node location end ","node location ","  + ","node location begin "," lambda "," braces "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically factory_key?":{"type":"method","name":"factory_key?","children":[],"call":["key value == ","key value ","hash_node keys any? ","hash_node keys ","key sym_type? "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically association?":{"type":"method","name":"association?","children":[],"call":[" factory_key? ","argument hash_type? ","attribute first_argument ","attribute first_argument  hash_type? ","attribute first_attribute first_argument  "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically proc?":{"type":"method","name":"proc?","children":[],"call":[" value_matcher to_a all? "," value_matcher to_a "," value_matcher "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_without_parens "," autocorrect_replacing_parens ","node parenthesized? "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," association? "," proc? "," factory_attributes to_a flatten each "," factory_attributes to_a flatten "," factory_attributes to_a "," factory_attributes "," offensive_receiver? ","attribute receiver ","attribute first_argument ","attributes each ","attributes is_a? "," autocorrect "]}," RuboCop Cop RSpec ExampleWithoutDescription on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","message to_s empty? ","message to_s "," example_description ","node send_node "," check_example_without_description "," example? "]}," RuboCop Cop RSpec ImplicitSubject valid_usage?":{"type":"method","name":"valid_usage?","children":[],"call":["example single_line? "," example? ","node ancestors find ","node ancestors "," style == "," style "," allowed_by_style? ","example method_name == ","example method_name ","example nil? ","example method? "]}," RuboCop Cop RSpec ImplicitSubject autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda ","node method_name == ","node method_name ","node location selector ","node location "]}," RuboCop Cop RSpec ImplicitSubject on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," valid_usage? "," implicit_subject? "," autocorrect "," invalid? "]}," RuboCop Cop RSpec HooksBeforeExamples node_range":{"type":"method","name":"node_range","children":[],"call":[" range_between "," final_end_location end_pos "," final_end_location ","node loc expression begin_pos ","node loc expression ","node loc ","node loc expression with "]}," RuboCop Cop RSpec HooksBeforeExamples source":{"type":"method","name":"source","children":[],"call":[" node_range source "," node_range "]}," RuboCop Cop RSpec HooksBeforeExamples node_range_with_surrounding_space":{"type":"method","name":"node_range_with_surrounding_space","children":[],"call":[" range_by_whole_lines "," node_range ","  node_range _by_whole_lines "," node_ node_range  "]}," RuboCop Cop RSpec HooksBeforeExamples find_first_example":{"type":"method","name":"find_first_example","children":[],"call":[" example_or_group? ","node children find ","node children "]}," RuboCop Cop RSpec HooksBeforeExamples check_hooks":{"type":"method","name":"check_hooks","children":[],"call":[" add_offense "," format ","child method_name "," hook? ","child sibling_index < ","first_example sibling_index ","child sibling_index ","node each_child_node "," find_first_example "," autocorrect ","sibling method_name ","first_example right_siblings each ","first_example right_siblings "," find_first_example  sibling_index "," find_ find_first_example  "," find_first_example  right_siblings each "," find_first_example  right_siblings "]}," RuboCop Cop RSpec HooksBeforeExamples multiline_block?":{"type":"method","name":"multiline_block?","children":[],"call":["block begin_type? "]}," RuboCop Cop RSpec HooksBeforeExamples autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," node_range_with_surrounding_space ","corrector insert_before "," source + "," source ","\n + ","  * ","first_example loc column ","first_example loc ","first_example loc expression "," find_first_example ","node parent "," lambda ","RuboCop RSpec Corrector MoveNode  new move_before ","RuboCop RSpec Corrector MoveNode  new "," processed_source "," find_first_example  loc column "," find_first_example  loc "," find_first_example  loc expression "," find_ find_first_example  "]}," RuboCop Cop RSpec HooksBeforeExamples on_block":{"type":"method","name":"on_block","children":[],"call":[" check_hooks ","node body "," multiline_block? "," example_group_with_body? "]}," RuboCop Cop RSpec VerifiedDoubles symbol?":{"type":"method","name":"symbol?","children":[],"call":["name sym_type? "]}," RuboCop Cop RSpec UnspecifiedException block_with_args?":{"type":"method","name":"block_with_args?","children":[],"call":["node arguments? ","node block_type? "]}," RuboCop Cop RSpec UnspecifiedException empty_exception_matcher?":{"type":"method","name":"empty_exception_matcher?","children":[],"call":[" block_with_args? ! "," block_with_args? ","node parent "," empty_raise_error_or_exception "]}," RuboCop Cop RSpec UnspecifiedException on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node children last ","node children "," empty_exception_matcher? "]}," RuboCop Cop RSpec ImplicitSubject allowed_by_style?":{"type":"method","name":"allowed_by_style?","children":[],"call":["example body begin_type? ! ","example body begin_type? ","example body "," style == "," style ","example single_line? "]}," RuboCop Cop RSpec SingleArgumentMessageChain autocorrect_array_arg":{"type":"method","name":"autocorrect_array_arg","children":[],"call":["corrector replace ","value source ","arg loc expression ","arg loc ","arg children first ","arg children ","arg children first  source "]}," RuboCop Cop RSpec SingleArgumentMessageChain single_element_array?":{"type":"method","name":"single_element_array?","children":[],"call":["node child_nodes one? ","node child_nodes "]}," RuboCop Cop RSpec SingleArgumentMessageChain valid_usage?":{"type":"method","name":"valid_usage?","children":[],"call":["node to_s include? ","node to_s "," single_element_array? ! "," single_element_array? "," single_key_hash? ! "," single_key_hash? ","node type ","node array_type? ","node literal? "]}," RuboCop Cop RSpec NamedSubject ignored_shared_example?":{"type":"method","name":"ignored_shared_example?","children":[],"call":["node each_ancestor any? "," method ","node each_ancestor "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation convert_regexp_str_to_literal":{"type":"method","name":"convert_regexp_str_to_literal","children":[],"call":["corrector replace ","str_node loc expression ","str_node loc ","Regexp  new inspect ","Regexp  new ","matcher_node first_argument ","matcher_node first_argument  loc expression ","matcher_node first_argument  loc "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation rewrite_expectation":{"type":"method","name":"rewrite_expectation","children":[],"call":["corrector replace ","matcher_node loc selector ","matcher_node loc ","to_symbol == ","node parent loc selector ","node parent loc ","node parent ","current_path_node loc expression ","current_path_node loc ","node first_argument "," add_ignore_query_options ","node first_argument  loc expression ","node first_argument  loc "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" convert_regexp_str_to_literal "," rewrite_expectation "," regexp_str_matcher ","node parent "," as_is_matcher ","node chained? "," lambda "]}," RuboCop Cop RSpec Yield convert_block_to_yield":{"type":"method","name":"convert_block_to_yield","children":[],"call":["args map join ","args map ","args any? ","node arguments ","node arguments  map join ","node arguments  map ","node arguments  any? "]}," RuboCop Cop RSpec Yield generate_replacement":{"type":"method","name":"generate_replacement","children":[],"call":[" convert_block_to_yield ","(send\n  (send\n    (lvar :node) :children) :map) join ","node children map ","node children ","node begin_type? "]}," RuboCop Cop RSpec Yield block_range":{"type":"method","name":"block_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","node loc begin begin_pos ","node loc begin ","node loc begin with "]}," RuboCop Cop RSpec Yield calling_block?":{"type":"method","name":"calling_block?","children":[],"call":[" block_call? ","node each_child_node all? ","node each_child_node ","node begin_type? "]}," RuboCop Cop RSpec Yield autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," generate_replacement ","node body "," range_with_surrounding_space "," block_range "," lambda "]}," RuboCop Cop RSpec Yield on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," block_range "," calling_block? ","node body "," block_arg ","node arguments "," method_on_stub? ","node send_node "," autocorrect "," block_ block_range  "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector format_singeline_block":{"type":"method","name":"format_singeline_block","children":[],"call":["node body source ","node body ","node arguments source ","node arguments "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector format_multiline_block":{"type":"method","name":"format_multiline_block","children":[],"call":["node body source ","node body ","node arguments source ","node arguments ","  * ","node parent loc column ","node parent loc ","node parent ","node body loc column ","node body loc "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector format_block":{"type":"method","name":"format_block","children":[],"call":[" format_singeline_block "," format_multiline_block ","node body begin_type? ","node body "," format_singleline_block "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector call_replacement":{"type":"method","name":"call_replacement","children":[],"call":[" format_method_call "," format_receiver ","block receiver ","options empty? "," build_options_string ","node receiver source ","node receiver ","factory source ","block arguments ","node body "," count_from ","node body  receiver "," build_options_string  empty? "," build_ build_options_string _string ","node body  arguments "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector build_arguments":{"type":"method","name":"build_arguments","children":[],"call":["options empty? "," build_options_string ","factory value ","node send_node arguments ","node send_node "," build_options_string  empty? "," build_ build_options_string _string "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector call_with_block_replacement":{"type":"method","name":"call_with_block_replacement","children":[],"call":[" format_block "," format_method_call "," format_receiver ","block send_node receiver ","block send_node "," build_arguments ","node receiver source ","node receiver ","node body ","block receiver "," count_from "," format_node body  ","node body  send_node receiver ","node body  send_node "," build_ build_arguments  ","node body  receiver "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," node loc expression "," node loc "," node "," call_replacement "," call_with_block_replacement "," node body block_type? "," node body "," call_ call_replacement  "," call_ call_with_block_replacement  "," call_with_block_ call_replacement  "," call_with_block_ call_with_block_replacement  "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector initialize":{"type":"method","name":"initialize","children":[],"call":["node parent "]}," RuboCop Cop RSpec FactoryBot CreateList TimesCorrector generate_n_times_block":{"type":"method","name":"generate_n_times_block","children":[],"call":["count source "," format_method_call "," format_receiver ","node receiver ","options empty? "," build_options_string ","factory source ","node arguments "," factory_call_block_source ","node block_node "," build_options_string  empty? "," build_ build_options_string _string ","node factory source  "]}," RuboCop Cop RSpec FactoryBot CreateList TimesCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," node loc expression "," node loc "," node "," generate_n_times_block "," node block_node "]}," RuboCop Cop RSpec FactoryBot CreateList TimesCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec FactoryBot CreateList Corrector format_receiver":{"type":"method","name":"format_receiver","children":[],"call":["receiver source "]}," RuboCop Cop RSpec FactoryBot CreateList Corrector format_method_call":{"type":"method","name":"format_method_call","children":[],"call":["node parenthesized? ","node block_type? "]}," RuboCop Cop RSpec FactoryBot CreateList Corrector build_options_string":{"type":"method","name":"build_options_string","children":[],"call":["options map join ","options map "]}," RuboCop RSpec FactoryBot reserved_methods":{"type":"method","name":"reserved_methods","children":[],"call":[]}," RuboCop RSpec FactoryBot attribute_defining_methods":{"type":"method","name":"attribute_defining_methods","children":[],"call":[]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically receiver_matches_first_block_argument?":{"type":"method","name":"receiver_matches_first_block_argument?","children":[],"call":["receiver node_parts == ","first_block_argument node_parts ","receiver node_parts ","receiver lvar_type? ","first_block_argument nil? ! ","first_block_argument nil? ","node arguments first ","node arguments ","node arguments first  node_parts ","node arguments first  nil? ! ","node arguments first  nil? "]}," RuboCop Cop RSpec FactoryBot AttributeDefinedStatically offensive_receiver?":{"type":"method","name":"offensive_receiver?","children":[],"call":[" receiver_matches_first_block_argument? ","receiver self_type? ","receiver nil? "]}," RuboCop Cop RSpec Dialect message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop RSpec Dialect autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_method ","current source ","node loc selector ","node loc "," lambda ","  preferred_method _method ","node loc selector  source "]}," RuboCop Cop RSpec Dialect on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," preferred_methods [] ","node method_name "," preferred_methods "," rspec_method? ","corrector replace "," preferred_method ","current source ","node loc selector ","node loc "," format ","  preferred_method _methods [] ","  preferred_method _methods ","  preferred_method _method ","node loc selector  source "]}," RuboCop Cop RSpec MultipleExpectations metadata":{"type":"method","name":"metadata","children":[],"call":["RuboCop RSpec Example  new metadata ","RuboCop RSpec Example  new "]}," RuboCop Cop RSpec MultipleExpectations aggregate_failures?":{"type":"method","name":"aggregate_failures?","children":[],"call":[" disabled_aggregate_failures? ! "," disabled_aggregate_failures? "," with_aggregate_failures? "," metadata "]}," RuboCop Cop RSpec MultipleExpectations aggregate_failures_present?":{"type":"method","name":"aggregate_failures_present?","children":[],"call":[" method "," metadata "]}," RuboCop Cop RSpec MultipleExpectations find_aggregate_failures":{"type":"method","name":"find_aggregate_failures","children":[],"call":[" aggregate_failures_present? ","example_node send_node each_ancestor find ","example_node send_node each_ancestor ","example_node send_node "," aggregate_failures? "]}," RuboCop Cop RSpec MultipleExpectations example_with_aggregate_failures?":{"type":"method","name":"example_with_aggregate_failures?","children":[],"call":[" aggregate_failures? "," find_aggregate_failures "]}," RuboCop Cop RSpec LeakyConstantDeclaration inside_describe_block?":{"type":"method","name":"inside_describe_block?","children":[],"call":["node each_ancestor any? "," method ","node each_ancestor "]}," RuboCop Cop RSpec LeakyConstantDeclaration on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offense "," inside_describe_block? "]}," RuboCop Cop RSpec LeakyConstantDeclaration on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," inside_describe_block? "]}," RuboCop Cop RSpec LeakyConstantDeclaration on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense "," inside_describe_block? "]}," RuboCop Cop RSpec DescribedClass namespace":{"type":"method","name":"namespace","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :each_ancestor\n      (sym :class)\n      (sym :module)) :reverse_each) :flat_map) map ","ancestor defined_module_name split ","ancestor defined_module_name ","node each_ancestor reverse_each flat_map ","node each_ancestor reverse_each ","node each_ancestor "]}," RuboCop Cop RSpec DescribedClass const_name":{"type":"method","name":"const_name","children":[],"call":[" const_name ","namespace cbase_type? ","namespace ! ","namespace lvar_type? ","namespace const_type? ","(sym :lvar) include? ","namespace type "]}," RuboCop Cop RSpec DescribedClass collapse_namespace":{"type":"method","name":"collapse_namespace","children":[],"call":["namespace [] ","namespace [] == ","const [] ","max - ","(irange\n  (lvar :start)\n  (lvar :max)) find ","namespace length ","(int 0) max ","namespace length - ","const length ","const first nil? ","const first ","namespace empty? ","namespace length  - ","(irange\n  (lvar :start)\n  (lvar :namespace length )) find ","(irange\n  (lvar :(int 0) max )\n  (lvar :max)) find ","(int 0) namespace length  "]}," RuboCop Cop RSpec DescribedClass full_const_name":{"type":"method","name":"full_const_name","children":[],"call":[" collapse_namespace "," const_name "," namespace "," namespace map "]}," RuboCop Cop RSpec DescribedClass offensive_described_class?":{"type":"method","name":"offensive_described_class?","children":[],"call":[" full_const_name == "," full_const_name ","nearest_described_class equal? ","(send\n  (send\n    (lvar :node) :each_ancestor\n    (sym :block)) :map) find "," described_constant ","node each_ancestor map ","node each_ancestor ","node const_type? "," contains_described_class? "]}," RuboCop Cop RSpec ImplicitBlockExpectation find_subject":{"type":"method","name":"find_subject","children":[],"call":[" subject? ","block_node body child_nodes find ","block_node body child_nodes ","block_node body "]}," RuboCop Cop RSpec ImplicitBlockExpectation multi_statement_example_group?":{"type":"method","name":"multi_statement_example_group?","children":[],"call":["node body begin_type? ","node body "," example_group_with_body? "]}," RuboCop Cop RSpec ImplicitBlockExpectation nearest_subject":{"type":"method","name":"nearest_subject","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :node) :each_ancestor\n          (sym :block)) :lazy) :select)\n    (args\n      (arg :block_node))\n    (send nil :multi_statement_example_group?\n      (lvar :block_node))) :map) find "," find_subject ","(send\n  (send\n    (send\n      (lvar :node) :each_ancestor\n      (sym :block)) :lazy) :select) map "," multi_statement_example_group? ","node each_ancestor lazy select ","node each_ancestor lazy ","node each_ancestor "]}," RuboCop Cop RSpec ImplicitBlockExpectation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," lambda_subject? "," nearest_subject "," implicit_expect "," lambda_ nearest_subject ? "," nearest_ nearest_subject  "]}," RuboCop Cop RSpec Pending skipped?":{"type":"method","name":"skipped?","children":[],"call":[" skipped_in_metadata? "," skippable? "," skipped_regular_example_without_body? "]}," RuboCop Cop RSpec ExampleWording text":{"type":"method","name":"text","children":[],"call":["node source ","node value ","(send\n  (send\n    (lvar :node) :node_parts) :map) join "," text ","node node_parts map ","node node_parts ","node type "]}," RuboCop Cop RSpec ExampleWording docstring":{"type":"method","name":"docstring","children":[],"call":["Parser Source Range  new ","expr end_pos - ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc ","node source_range ","node loc expression  end_pos - ","node source_range  end_pos - ","node loc expression  end_pos ","node source_range  end_pos ","node loc expression  begin_pos + ","node source_range  begin_pos + ","node loc expression  begin_pos ","node source_range  begin_pos ","node loc expression  source_buffer ","node source_range  source_buffer ","node loc node loc expression ession ","node loc node source_range ession "]}," RuboCop Cop RSpec EmptyLineAfterExample next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop RSpec EmptyLineAfterExample next_one_line_example?":{"type":"method","name":"next_one_line_example?","children":[],"call":["next_sibling line_count == ","next_sibling line_count "," example? "," next_sibling ","next_sibling single_line? ","node right_sibling "," next_sibling  line_count == ","node right_sibling  line_count == "," next_sibling  line_count ","node right_sibling  line_count ","  next_sibling  "," node right_sibling  "," next_sibling  single_line? ","node right_sibling  single_line? "]}," RuboCop Cop RSpec EmptyLineAfterExample consecutive_one_liner?":{"type":"method","name":"consecutive_one_liner?","children":[],"call":[" next_one_line_example? ","node line_count == ","node line_count ","node single_line? "]}," RuboCop Cop RSpec EmptyLineAfterExample allow_consecutive_one_liners?":{"type":"method","name":"allow_consecutive_one_liners?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec EmptyLineAfterExample allowed_one_liner?":{"type":"method","name":"allowed_one_liner?","children":[],"call":[" allow_consecutive_one_liners? "," consecutive_one_liner? "]}," RuboCop Cop RSpec EmptyLineAfterExample on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","node method_name "," missing_separating_line "," allowed_one_liner? "," last_child? "," example? ","corrector insert_after ","location end "," missing_separating_line_offense "]}," RuboCop Cop RSpec ContextMethod method_name?":{"type":"method","name":"method_name?","children":[],"call":["description start_with? "]}," RuboCop Cop RSpec ContextMethod autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node parent loc selector ","node parent loc ","node parent "," lambda "]}," RuboCop Cop RSpec ContextMethod on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," context_method ","corrector replace ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation add_ignore_query_options":{"type":"method","name":"add_ignore_query_options","children":[],"call":["corrector insert_after ","expectation_last_child loc expression ","expectation_last_child loc ","(sym :regexp) include? ","expectation_last_child type ","expectation_node children last ","expectation_node children ","node parent last_argument ","node parent ","expectation_node children last  loc expression ","expectation_node children last  loc ","expectation_node children last  type ","node parent last_argument  children last ","node parent last_argument  children "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker allowed_symbol?":{"type":"method","name":"allowed_symbol?","children":[],"call":["ALLOWED_STATUSES  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop RSpec ExplicitHelper allowed_explicit_matchers":{"type":"method","name":"allowed_explicit_matchers","children":[],"call":[" cop_config fetch + "," cop_config fetch "," cop_config "]}," RuboCop Cop RSpec FactoryBot FactoryClassName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source ","node loc expression ","node loc "," lambda "]}," RuboCop Cop RSpec FactoryBot FactoryClassName on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","cn const_name "," class_name "," allowed? ","corrector replace ","cn source "]}," RuboCop Cop RSpec DescribedClassModuleWrapping on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offense "," find_rspec_blocks "," include_rspec_blocks? "]}," RuboCop Cop RSpec FactoryBot FactoryClassName allowed?":{"type":"method","name":"allowed?","children":[],"call":["ALLOWED_CONSTANTS  include? "]}," RuboCop RSpec Hook transform_true":{"type":"method","name":"transform_true","children":[],"call":["node true_type? "]}," RuboCop RSpec Hook transform_metadata":{"type":"method","name":"transform_metadata","children":[],"call":[" transform_true ","pair value ","pair key ","meta pairs map ","meta pairs ","meta sym_type? "]}," RuboCop RSpec Hook metadata":{"type":"method","name":"metadata","children":[],"call":["(send\n  (begin\n    (or\n      (send nil :extract_metadata\n        (send nil :node))\n      (array))) :map) flatten inject ","(send\n  (begin\n    (or\n      (send nil :extract_metadata\n        (send nil :node))\n      (array))) :map) flatten "," transform_metadata ","(or\n  (send nil :extract_metadata\n    (send nil :node))\n  (array)) map "," extract_metadata "," node "]}," RuboCop Cop RSpec ScatteredSetup lines_msg":{"type":"method","name":"lines_msg","children":[],"call":["numbers join ","numbers first ","numbers size == ","numbers size "]}," RuboCop Cop RSpec ScatteredSetup repeated_hooks":{"type":"method","name":"repeated_hooks","children":[],"call":["hook map ","hooks map ","(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject ","(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values ","hook metadata ","hook scope ","hook name ","RuboCop RSpec ExampleGroup  new hooks select group_by ","RuboCop RSpec ExampleGroup  new hooks select ","RuboCop RSpec ExampleGroup  new hooks ","RuboCop RSpec ExampleGroup  new ","(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject  map ","(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject ) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject ","(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :(send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject ) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values ","RuboCop RSpec ExampleGroup  new (send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject  select group_by ","RuboCop RSpec ExampleGroup  new (send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject  select ","RuboCop RSpec ExampleGroup  new (send\n  (send\n    (send\n      (send\n        (const\n          (const\n            (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n        (lvar :node)) :hooks) :select\n    (block-pass\n      (sym :knowable_scope?))) :group_by) values reject  "]}," RuboCop Cop RSpec RepeatedExampleGroupDescription message":{"type":"method","name":"message","children":[],"call":[" format ","group method_name "]}," RuboCop Cop RSpec RepeatedExampleGroupDescription add_repeated_lines":{"type":"method","name":"add_repeated_lines","children":[],"call":["repeated_lines - ","group first_line ","groups map ","groups map  - "]}," RuboCop Cop RSpec RepeatedExampleGroupDescription repeated_group_descriptions":{"type":"method","name":"repeated_group_descriptions","children":[],"call":[" add_repeated_lines ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values "," doc_string_and_metadata ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending?\n      (lvar :child))) :reject) group_by "," empty_description? ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :example_group?\n      (lvar :child))) :reject) reject "," skip_or_pending? ","(send\n  (send\n    (lvar :node) :children) :select) reject "," example_group? ","node children select ","node children ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending_inside_block?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending_inside_block?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (block\n        (send\n          (block\n            (send\n              (send\n                (lvar :node) :children) :select)\n            (args\n              (arg :child))\n            (send nil :example_group?\n              (lvar :child))) :reject)\n        (args\n          (arg :child))\n        (send nil :skip_or_pending_inside_block?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :empty_description?\n      (lvar :child))) :group_by) values ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending_inside_block?\n      (lvar :child))) :reject) group_by "," skip_or_pending_inside_block? "]}," RuboCop Cop RSpec RepeatedExampleGroupDescription on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offense "," message "," repeated_group_descriptions each "," repeated_group_descriptions "," several_example_groups? "]}," RuboCop Cop RSpec RepeatedExampleGroupBody message":{"type":"method","name":"message","children":[],"call":[" format ","group method_name "]}," RuboCop Cop RSpec RepeatedExampleGroupBody signature_keys":{"type":"method","name":"signature_keys","children":[],"call":[" body "," metadata "," const_arg "]}," RuboCop Cop RSpec RepeatedExampleGroupBody add_repeated_lines":{"type":"method","name":"add_repeated_lines","children":[],"call":["repeated_lines - ","group first_line ","groups map ","groups map  - "]}," RuboCop Cop RSpec RepeatedExampleGroupBody repeated_group_bodies":{"type":"method","name":"repeated_group_bodies","children":[],"call":[" add_repeated_lines ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending?\n      (lvar :child))) :group_by) values "," signature_keys ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :example_group_with_body?\n      (lvar :child))) :reject) group_by "," skip_or_pending? ","(send\n  (send\n    (lvar :node) :children) :select) reject "," example_group_with_body? ","node children select ","node children ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending_inside_block?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending_inside_block?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (block\n        (send\n          (send\n            (lvar :node) :children) :select)\n        (args\n          (arg :child))\n        (send nil :example_group_with_body?\n          (lvar :child))) :reject)\n    (args\n      (arg :child))\n    (send nil :skip_or_pending_inside_block?\n      (lvar :child))) :group_by) values "," skip_or_pending_inside_block? "]}," RuboCop Cop RSpec RepeatedExampleGroupBody on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offense "," message "," repeated_group_bodies each "," repeated_group_bodies "," several_example_groups? "]}," RuboCop Cop RSpec RepeatedDescription example_signature":{"type":"method","name":"example_signature","children":[],"call":["example doc_string ","example metadata "]}," RuboCop Cop RSpec InstanceVariable valid_usage?":{"type":"method","name":"valid_usage?","children":[],"call":[" custom_matcher? "," dynamic_class? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop RSpec ExpectActual swap":{"type":"method","name":"swap","children":[],"call":["corrector replace ","actual source ","expected source_range ","expected source ","actual source_range "]}," RuboCop Cop RSpec ExpectActual autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" swap ","SUPPORTED_MATCHERS  include? "," lambda "," expect_literal "]}," RuboCop RSpec Language SelectorSet block_or_block_pass_pattern":{"type":"method","name":"block_or_block_pass_pattern","children":[],"call":[" block_pass_pattern "," block_pattern "]}," RuboCop RSpec Language SelectorSet block_pass_pattern":{"type":"method","name":"block_pass_pattern","children":[],"call":[" node_pattern_union "]}," RuboCop RSpec Corrector MoveNode node_range_with_surrounding_space":{"type":"method","name":"node_range_with_surrounding_space","children":[],"call":[" range_by_whole_lines "," node_range ","  node_range _by_whole_lines "," node_ node_range  "]}," RuboCop RSpec Corrector MoveNode node_range":{"type":"method","name":"node_range","children":[],"call":["node loc expression with "," final_end_location end_pos "," final_end_location ","node loc expression ","node loc "," source_range_with_comment "]}," RuboCop RSpec Corrector MoveNode source":{"type":"method","name":"source","children":[],"call":[" node_range source "," node_range "]}," RuboCop RSpec Corrector MoveNode move_after":{"type":"method","name":"move_after","children":[],"call":[" corrector remove "," node_range_with_surrounding_space "," original "," corrector "," corrector insert_after ","indent + "," source ","\n + ","  * ","other loc column ","other loc "," final_end_location ","newline_indent + "," end_line_position ","\n +  + ","  *  + ","newline_\n +  + ","newline_  *  + "," end_line_ final_end_location  "," end_line_ end_line_position  "]}," RuboCop RSpec Corrector MoveNode move_before":{"type":"method","name":"move_before","children":[],"call":[" corrector remove "," node_range_with_surrounding_space "," original "," corrector "," corrector insert_before "," source + "," source ","\n + ","  * ","other loc column ","other loc ","other loc expression "," start_line_position "," start_line_other loc expression  "," start_line_ start_line_position  "]}," RuboCop RSpec Corrector MoveNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec ScatteredLet find_first_let":{"type":"method","name":"find_first_let","children":[],"call":[" let? ","node children find ","node children "]}," RuboCop Cop RSpec ScatteredLet autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["RuboCop RSpec Corrector MoveNode  new move_after ","RuboCop RSpec Corrector MoveNode  new "," processed_source "," find_first_let ","node parent "," lambda "," find_ find_first_let  "]}," RuboCop Cop RSpec EmptyHook autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space ","block loc expression ","block loc ","node parent "," lambda ","  range_with_surrounding_space _with_surrounding_space ","node parent  loc expression ","node parent  loc "]}," RuboCop Cop RSpec EmptyHook on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," empty_hook? ","corrector remove "," range_with_surrounding_space ","node loc expression ","node loc ","node source_range ","  range_with_surrounding_space _with_surrounding_space ","node source_ range_with_surrounding_space  "]}," RuboCop Cop RSpec DescribeClass string_constant_describe?":{"type":"method","name":"string_constant_describe?","children":[],"call":["described_value value =~ ","described_value value ","described_value str_type? "]}," RuboCop Cop RSpec Capybara VisibilityMatcher on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," visible_true? "," visible_false? "]}," RuboCop Cop RSpec NotToNot offense_message":{"type":"method","name":"offense_message","children":[],"call":[" rejected_method "," accepted_method "]}," RuboCop Cop RSpec NotToNot rejected_method":{"type":"method","name":"rejected_method","children":[],"call":["(send\n  (const nil :ACCEPTED_METHODS) :-\n  (array\n    (send nil :accepted_method))) first ","ACCEPTED_METHODS  - "," accepted_method "]}," RuboCop Cop RSpec NotToNot accepted_method":{"type":"method","name":"accepted_method","children":[],"call":[" raise ","ACCEPTED_METHODS  include? "," cop_config [] to_sym "," cop_config [] "," cop_config "]}," RuboCop Cop RSpec VariableName message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop RSpec VariableName on_send":{"type":"method","name":"on_send","children":[],"call":[" check_name ","variable loc expression ","variable loc ","variable value ","variable dsym_type? ","variable dstr_type? "," variable_definition? "," matches_ignored_pattern? "," matches_allowed_pattern? ","variable source_range "," inside_example_group? "]}," RuboCop Cop RSpec VariableDefinition symbol?":{"type":"method","name":"symbol?","children":[],"call":["node dsym_type? ","node sym_type? "]}," RuboCop Cop RSpec VariableDefinition string?":{"type":"method","name":"string?","children":[],"call":["node dstr_type? ","node str_type? "]}," RuboCop Cop RSpec VariableDefinition style_violation?":{"type":"method","name":"style_violation?","children":[],"call":[" symbol? "," style == "," style "," string? "]}," RuboCop Cop RSpec VariableDefinition on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," style "," style_violation? "," variable_definition? ","corrector replace "," correct_variable "," inside_example_group? "," style_offense? "]}," RuboCop Cop RSpec SubjectStub find_subject_expectations":{"type":"method","name":"find_subject_expectations","children":[],"call":[" find_subject_expectations ","node each_child_node "," message_expectation? ","(send\n  (lvar :subject_names) :+\n  (array\n    (sym :subject))) any? ","subject_names + ","@explicit_subjects [] ","Set  [] ","@subject_overrides [] ","(send\n  (lvar :@explicit_subjects [] ) :+\n  (array\n    (sym :subject))) any? ","(send\n  (lvar :subject_Set  [] ) :+\n  (array\n    (sym :subject))) any? ","@explicit_subjects []  + ","subject_Set  []  + "]}," RuboCop Cop RSpec SubjectStub find_all_explicit_subjects":{"type":"method","name":"find_all_explicit_subjects","children":[],"call":["h [] << ","h [] "," example_group? ","child each_ancestor find ","child each_ancestor "," subject ","node each_descendant with_object ","node each_descendant "]}," RuboCop Cop RSpec SubjectStub processed_example_groups":{"type":"method","name":"processed_example_groups","children":[],"call":["Set  new "]}," RuboCop Cop RSpec FilePath spec_suffix_only?":{"type":"method","name":"spec_suffix_only?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec FilePath glob_for_spec_suffix_only?":{"type":"method","name":"glob_for_spec_suffix_only?","children":[],"call":[]}," RuboCop Cop RSpec Capybara VisibilityMatcher capybara_matcher?":{"type":"method","name":"capybara_matcher?","children":[],"call":["CAPYBARA_MATCHER_METHODS  include? "]}," RuboCop RSpec TopLevelGroup root_node":{"type":"method","name":"root_node","children":[],"call":[" processed_source ast "," processed_source "]}," RuboCop RSpec TopLevelGroup top_level_nodes":{"type":"method","name":"top_level_nodes","children":[],"call":[" root_node "," root_node children "," root_node begin_type? "," top_level_nodes ","node body ","node class_type? ","node module_type? ","node children ","node begin_type? ","node nil? "]}," RuboCop RSpec TopLevelGroup top_level_groups":{"type":"method","name":"top_level_groups","children":[],"call":[" example_or_shared_group? "," top_level_nodes select "," top_level_nodes "," root_node "]}," RuboCop RSpec TopLevelGroup top_level_group?":{"type":"method","name":"top_level_group?","children":[],"call":[" top_level_groups include? "," top_level_groups "]}," RuboCop RSpec TopLevelGroup on_block":{"type":"method","name":"on_block","children":[],"call":[" on_top_level_group "," top_level_group? "," respond_to? "]}," RuboCop RSpec ExampleGroup find_all":{"type":"method","name":"find_all","children":[],"call":[" find_all_in_scope "," example? "," scope_change? "," public_send "]}," RuboCop RSpec ExampleGroup find_all_in_scope":{"type":"method","name":"find_all_in_scope","children":[],"call":[" find_all ","node each_child_node flat_map ","node each_child_node "]}," RuboCop RSpec ExampleGroup lets":{"type":"method","name":"lets","children":[],"call":[" find_all_in_scope "," node "]}," RuboCop Cop RSpec SubjectStub on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense "," find_subject_expectations "," find_all_explicit_subjects "," find_all_explicit "," method "]}," RuboCop Cop RSpec NestedGroups find_nested_example_groups":{"type":"method","name":"find_nested_example_groups","children":[],"call":[" find_nested_example_groups ","node each_child_node ","nesting + ","nesting > "," max_nesting "," example_group? "," count_up_nesting? "," find_nested_ example_group? s ","  example_group? ? "]}," RuboCop Cop RSpec LetSetup child_let_bang":{"type":"method","name":"child_let_bang","children":[],"call":[" let_bang ","RuboCop RSpec ExampleGroup  new lets each ","RuboCop RSpec ExampleGroup  new lets ","RuboCop RSpec ExampleGroup  new "]}," RuboCop Cop RSpec InstanceVariable on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense "," ivar_assigned? ! "," ivar_assigned? "," assignment_only? "," valid_usage? "," ivar_usage "]}," RuboCop Cop RSpec Capybara FeatureMethods message":{"type":"method","name":"message","children":[],"call":[" format ","MAP  [] ","range source to_sym ","range source "]}," RuboCop Cop RSpec AlignRightLetBrace on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_before ","token_aligner indent_for ","let loc end ","let loc "," add_offense ","token_aligner offending_tokens each ","token_aligner offending_tokens ","RuboCop RSpec AlignLetBrace  new "," processed_source ast "," processed_source "," processed_source blank? "," token_aligner indent_for "," token_aligner "," token_aligner offending_tokens each "," token_aligner offending_tokens ","RuboCop RSpec AlignLetBrace  new  indent_for ","RuboCop RSpec AlignLetBrace  new  offending_tokens each ","RuboCop RSpec AlignLetBrace  new  offending_tokens "," RuboCop RSpec AlignLetBrace  new  indent_for "," RuboCop RSpec AlignLetBrace  new  "," RuboCop RSpec AlignLetBrace  new  offending_tokens each "," RuboCop RSpec AlignLetBrace  new  offending_tokens "]}," RuboCop Cop RSpec AlignLeftLetBrace on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_before ","token_aligner indent_for ","let loc begin ","let loc "," add_offense ","token_aligner offending_tokens each ","token_aligner offending_tokens ","RuboCop RSpec AlignLetBrace  new "," processed_source ast "," processed_source "," processed_source blank? "," token_aligner indent_for "," token_aligner "," token_aligner offending_tokens each "," token_aligner offending_tokens ","RuboCop RSpec AlignLetBrace  new  indent_for ","RuboCop RSpec AlignLetBrace  new  offending_tokens each ","RuboCop RSpec AlignLetBrace  new  offending_tokens "," RuboCop RSpec AlignLetBrace  new  indent_for "," RuboCop RSpec AlignLetBrace  new  "," RuboCop RSpec AlignLetBrace  new  offending_tokens each "," RuboCop RSpec AlignLetBrace  new  offending_tokens "]}," RuboCop RSpec TopLevelGroup on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[]}," RuboCop RSpec TopLevelGroup on_top_level_example_group":{"type":"method","name":"on_top_level_example_group","children":[],"call":[]}," RuboCop RSpec TopLevelGroup on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" on_top_level_group "," example_group? "," method "," top_level_groups each "," top_level_groups "," root_node "," on_top_level_example_group "]}," RuboCop RSpec Language SelectorSet send_or_block_or_block_pass_pattern":{"type":"method","name":"send_or_block_or_block_pass_pattern","children":[],"call":[" block_pass_pattern "," block_pattern "," send_pattern "]}," RuboCop RSpec EmptyLineSeparation last_child?":{"type":"method","name":"last_child?","children":[],"call":["node equal? ","node parent children last ","node parent children ","node parent "]}," RuboCop RSpec EmptyLineSeparation offending_loc":{"type":"method","name":"offending_loc","children":[],"call":[" source_range "," processed_source buffer "," processed_source ","offending_line length - ","offending_line length ","offending_line lstrip length ","offending_line lstrip "," processed_source [] ","last_line - "," processed_source []  length - "," processed_source []  length "," processed_source []  lstrip length "," processed_source []  lstrip "]}," RuboCop RSpec EmptyLineSeparation missing_separating_line":{"type":"method","name":"missing_separating_line","children":[],"call":[" offending_loc "," processed_source [] blank? "," processed_source [] "," processed_source "," comment_line? "," final_end_location line "," final_end_location "," comment_ final_end_location line ? "," final_end_location  final_end_location line  "]}," RuboCop RSpec EmptyLineSeparation missing_separating_line_offense":{"type":"method","name":"missing_separating_line_offense","children":[],"call":["corrector insert_after ","location end "," add_offense ","node method_name "," missing_separating_line "," last_child? "]}," RuboCop Cop RSpec NestedGroups on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense "," message ","example_group send_node "," max= "," find_nested_example_groups "]}," RuboCop Cop RSpec MultipleMemoizedHelpers allow_subject?":{"type":"method","name":"allow_subject?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec MultipleMemoizedHelpers max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec MultipleMemoizedHelpers variable_nodes":{"type":"method","name":"variable_nodes","children":[],"call":["example_group lets + ","example_group subjects ","example_group lets "," allow_subject? ","RuboCop RSpec ExampleGroup  new ","RuboCop RSpec ExampleGroup  new  lets + ","RuboCop RSpec ExampleGroup  new  subjects ","RuboCop RSpec ExampleGroup  new  lets "]}," RuboCop Cop RSpec MultipleMemoizedHelpers helpers":{"type":"method","name":"helpers","children":[],"call":[" variable_definition? ","variable_node send_node ","variable_node block_type? "," variable_nodes map "," variable_nodes ","@example_group_memoized_helpers [] "]}," RuboCop Cop RSpec MultipleMemoizedHelpers all_helpers":{"type":"method","name":"all_helpers","children":[],"call":["node each_ancestor flat_map "," method ","node each_ancestor "," helpers "]}," RuboCop Cop RSpec MultipleMemoizedHelpers on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop RSpec MultipleMemoizedHelpers on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," max "," max= ","count <= "," all_helpers uniq count "," all_helpers uniq "," all_helpers "," spec_group? "," all_helpers uniq count  <= "," all_helpers uniq  all_helpers uniq count  "]}," RuboCop Cop RSpec MultipleDescribes on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense ","node send_node ","top_level_example_groups first equal? ","top_level_example_groups first ","top_level_example_groups one? "," top_level_groups select "," method "," top_level_groups "," top_level_groups select  first equal? "," top_level_groups select  first "," top_level_groups select  one? "]}," RuboCop Cop RSpec LeadingSubject offending_node":{"type":"method","name":"offending_node","children":[],"call":[" offending? ","sibling equal? ","node parent each_child_node find ","node parent each_child_node ","node parent "," parent each_child_node find "," parent each_child_node "," parent "]}," RuboCop Cop RSpec FilePath ensure_correct_file_path":{"type":"method","name":"ensure_correct_file_path","children":[],"call":[" add_offense "," format "," filename_ends_with? "," glob_for ","arguments first ","pattern gsub sub sub ","pattern gsub sub ","pattern gsub "," pattern_for ","  glob_for _for "," pattern_for  gsub sub sub "," pattern_for  gsub sub "," pattern_for  gsub ","  pattern_for _for "]}," RuboCop Cop RSpec FilePath on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" ensure_correct_file_path "," routing_spec? "," const_described "," top_level_groups one? "," top_level_groups "]}," RuboCop Cop RSpec DescribeMethod on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense ","second_argument str_content start_with? ","second_argument str_content "," second_argument "," method_name? "," second_string_literal_argument "," second_argument  str_content start_with? "," second_argument  str_content ","  second_argument  "]}," RuboCop Cop RSpec DescribeClass string_constant?":{"type":"method","name":"string_constant?","children":[],"call":["described value match? ","described value ","described str_type? "]}," RuboCop Cop RSpec DescribeClass on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[" add_offense "," not_a_const_described ","top_level_node send_node "," example_group_with_rails_metadata? ","node send_node "," example_group_with_ignored_metadata? "]}," RuboCop Cop RSpec Base rspec_pattern_config":{"type":"method","name":"rspec_pattern_config","children":[],"call":[" all_cops_config fetch fetch "," all_cops_config fetch "," all_cops_config "]}," RuboCop Cop RSpec Base rspec_pattern_config?":{"type":"method","name":"rspec_pattern_config?","children":[],"call":[" all_cops_config fetch key? "," all_cops_config fetch "," all_cops_config "," all_cops_config key? "]}," RuboCop Cop RSpec Base all_cops_config":{"type":"method","name":"all_cops_config","children":[],"call":[" config for_all_cops "," config "]}," RuboCop Cop RSpec Base rspec_pattern":{"type":"method","name":"rspec_pattern","children":[],"call":["Regexp  union "," rspec_pattern_config map ","Regexp  public_method "," rspec_pattern_config "," rspec_pattern_config? "]}," RuboCop Cop RSpec Base relevant_rubocop_rspec_file?":{"type":"method","name":"relevant_rubocop_rspec_file?","children":[],"call":[" rspec_pattern match? "," rspec_pattern "]}," RuboCop Cop RSpec Base relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" relevant_rubocop_rspec_file? "]}," RuboCop Cop RSpec Base inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop RSpec LeadingSubject parent":{"type":"method","name":"parent","children":[],"call":["node each_ancestor first body ","node each_ancestor first ","node each_ancestor "]}," RuboCop Cop RSpec FilePath on_top_level_example_group":{"type":"method","name":"on_top_level_example_group","children":[],"call":[" ensure_correct_file_path "," routing_spec? "," const_described "," top_level_groups one? "," top_level_groups "," example_group "]}," RuboCop RSpec Language SelectorSet to_a":{"type":"method","name":"to_a","children":[],"call":[" selectors "]}," RuboCop Cop RSpec StubbedMock replacement":{"type":"method","name":"replacement","children":[],"call":[]}," RuboCop Cop RSpec StubbedMock msg":{"type":"method","name":"msg","children":[],"call":[" format "," replacement "]}," RuboCop Cop RSpec StubbedMock on_expectation":{"type":"method","name":"on_expectation","children":[],"call":[" matcher_with_blockpass "," matcher_with_hash "," matcher_with_return_block "," matcher_with_configured_response "," add_offense "," msg "," lambda "]}," RuboCop Cop RSpec StubbedMock on_send":{"type":"method","name":"on_send","children":[],"call":[" expectation "," method "]}," RuboCop Cop RSpec RepeatedIncludeExample message":{"type":"method","name":"message","children":[],"call":[" format "," shared_examples_name source "," shared_examples_name "]}," RuboCop Cop RSpec RepeatedIncludeExample signature_keys":{"type":"method","name":"signature_keys","children":[],"call":["item arguments "]}," RuboCop Cop RSpec RepeatedIncludeExample add_repeated_lines":{"type":"method","name":"add_repeated_lines","children":[],"call":["repeated_lines - ","item first_line ","items map ","items map  - "]}," RuboCop Cop RSpec RepeatedIncludeExample literal_include_examples?":{"type":"method","name":"literal_include_examples?","children":[],"call":["node arguments all? ","node arguments "," include_examples? "]}," RuboCop Cop RSpec RepeatedIncludeExample repeated_include_examples":{"type":"method","name":"repeated_include_examples","children":[],"call":[" add_repeated_lines ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :literal_include_examples?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :literal_include_examples?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :literal_include_examples?\n      (lvar :child))) :group_by) values "," signature_keys ","(send\n  (send\n    (lvar :node) :children) :select) group_by "," literal_include_examples? ","node children select ","node children "]}," RuboCop Cop RSpec RepeatedIncludeExample on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offense "," message "," repeated_include_examples each "," repeated_include_examples "," several_include_examples? "]}," RuboCop Cop RSpec EmptyExampleGroup examples_in_branches?":{"type":"method","name":"examples_in_branches?","children":[],"call":[" examples? ","if_node branches any? ","if_node branches ","condition_node branches any? ","condition_node branches ","condition_node case_type? ! ","condition_node case_type? ","condition_node if_type? ! ","condition_node if_type? "]}," RuboCop Cop RSpec EmptyExampleGroup conditionals_with_examples?":{"type":"method","name":"conditionals_with_examples?","children":[],"call":[" examples_in_branches? ","body each_descendant any? ","body each_descendant ","body begin_type? ","body case_type? "]}," RuboCop Cop RSpec EmptyExampleGroup offensive?":{"type":"method","name":"offensive?","children":[],"call":[" examples? ! "," examples? "," examples_in_branches? ! "," examples_in_branches? ","body if_type? "," conditionals_with_examples? ","body case_type? "]}," RuboCop Cop RSpec DescribeClass ignored_metadata":{"type":"method","name":"ignored_metadata","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec DescribeClass ignored_metadata?":{"type":"method","name":"ignored_metadata?","children":[],"call":[" ignored_metadata [] to_a include? ","value value to_s ","value value "," ignored_metadata [] to_a "," ignored_metadata [] ","key value to_s ","key value "," ignored_metadata "," sym_pair "]}," RuboCop Cop RSpec VerifiedDoubles name_is_symbol?":{"type":"method","name":"name_is_symbol?","children":[],"call":["name children first is_a? ","name children first ","name children "]}," RuboCop Cop RSpec Focus on_hash":{"type":"method","name":"on_hash","children":[],"call":[" add_offense ","(const nil :FOCUS_TRUE_PAIR) include? ","node children any? ","node children "]}," RuboCop Cop RSpec ExampleLength max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop RSpec SpecOnly rspec_pattern_config":{"type":"method","name":"rspec_pattern_config","children":[],"call":[" config for_all_cops fetch fetch "," config for_all_cops fetch "," config for_all_cops "," config "]}," RuboCop RSpec SpecOnly rspec_pattern":{"type":"method","name":"rspec_pattern","children":[],"call":["Regexp  union "," rspec_pattern_config map ","Regexp  public_method "," rspec_pattern_config "]}," RuboCop RSpec SpecOnly relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" rspec_pattern =~ "," rspec_pattern "]}," RuboCop RSpec Language SelectorSet to_node_pattern":{"type":"method","name":"to_node_pattern","children":[],"call":[" selectors map join "," selectors map "," selectors "]}," RuboCop RSpec DescriptionExtractor cop?":{"type":"method","name":"cop?","children":[],"call":["doc to_s start_with? ","doc to_s ","doc type equal? ","doc type "]}," RuboCop RSpec DescriptionExtractor cop_documentation":{"type":"method","name":"cop_documentation","children":[],"call":["doc docstring ","doc name "," yardocs select map "," yardocs select "," method "," yardocs "]}," RuboCop Cop RSpec NestedGroups on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","context children first ","context children "," find_nested_contexts "," described_constant "]}," RuboCop RSpec ExampleGroup initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop RSpec Example to_node":{"type":"method","name":"to_node","children":[],"call":[" node "]}," RuboCop RSpec Example hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," node "," class "]}," RuboCop RSpec Example eql?":{"type":"method","name":"eql?","children":[],"call":[" node eql? ","other node "," node "]}," RuboCop RSpec Example initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop RSpec Language ALL all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language Subjects all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language SharedGroups context":{"type":"method","name":"context","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language SharedGroups examples":{"type":"method","name":"examples","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language SharedGroups all":{"type":"method","name":"all","children":[],"call":[" context "," examples "]}," RuboCop RSpec Language Runners all":{"type":"method","name":"all","children":[],"call":["ALL  include? ","element nil? "]}," RuboCop RSpec Language Includes context":{"type":"method","name":"context","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Includes examples":{"type":"method","name":"examples","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Includes all":{"type":"method","name":"all","children":[],"call":[" context "," examples "]}," RuboCop RSpec Language HookScopes all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language Hooks all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language Helpers all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language Expectations all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop RSpec Language Examples pending":{"type":"method","name":"pending","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Examples skipped":{"type":"method","name":"skipped","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Examples focused":{"type":"method","name":"focused","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Examples regular":{"type":"method","name":"regular","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language Examples all":{"type":"method","name":"all","children":[],"call":[" pending "," skipped "," focused "," regular "]}," RuboCop RSpec Language ExampleGroups skipped":{"type":"method","name":"skipped","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language ExampleGroups focused":{"type":"method","name":"focused","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language ExampleGroups regular":{"type":"method","name":"regular","children":[],"call":["Language  config [] [] include? ","element to_s ","Language  config [] [] ","Language  config [] ","Language  config "]}," RuboCop RSpec Language ExampleGroups all":{"type":"method","name":"all","children":[],"call":[" focused "," skipped "," regular "]}," RuboCop RSpec Language NodePattern block_pattern":{"type":"method","name":"block_pattern","children":[],"call":[" send_pattern "," deprecation_warning "," __method__ "]}," RuboCop RSpec Language NodePattern send_pattern":{"type":"method","name":"send_pattern","children":[],"call":[" deprecation_warning "," __method__ "]}," RuboCop Cop RSpec TopLevelGroup root_node":{"type":"method","name":"root_node","children":[],"call":[" processed_source ast "," processed_source "]}," RuboCop Cop RSpec TopLevelGroup top_level_nodes":{"type":"method","name":"top_level_nodes","children":[],"call":[" top_level_nodes ","node body ","node children ","node type ","node nil? "]}," RuboCop Cop RSpec TopLevelGroup top_level_group?":{"type":"method","name":"top_level_group?","children":[],"call":[" top_level_groups include? "," top_level_groups "]}," RuboCop Cop RSpec TopLevelGroup on_top_level_group":{"type":"method","name":"on_top_level_group","children":[],"call":[]}," RuboCop Cop RSpec TopLevelGroup on_top_level_example_group":{"type":"method","name":"on_top_level_example_group","children":[],"call":[]}," RuboCop Cop RSpec TopLevelGroup top_level_groups":{"type":"method","name":"top_level_groups","children":[],"call":[" spec_group? "," top_level_nodes select "," top_level_nodes "," root_node "]}," RuboCop Cop RSpec TopLevelGroup on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" on_top_level_group "," on_top_level_example_group "," example_group? "," top_level_groups each "," top_level_groups "]}," RuboCop Cop RSpec FinalEndLocation final_end_location":{"type":"method","name":"final_end_location","children":[],"call":["(send\n  (send\n    (lvar :start_node) :loc) :end) max_by ","start_node loc end ","start_node loc ","node loc heredoc_end ","node loc ","start_node each_node select map ","start_node each_node select ","start_node each_node "]}," RuboCop Cop RSpec EmptyLineSeparation last_child?":{"type":"method","name":"last_child?","children":[],"call":["node equal? ","node parent children last ","node parent children ","node parent "]}," RuboCop Cop RSpec EmptyLineSeparation offending_loc":{"type":"method","name":"offending_loc","children":[],"call":[" source_range "," processed_source buffer "," processed_source ","offending_line length - ","offending_line length ","offending_line lstrip length ","offending_line lstrip "," processed_source [] ","last_line - "," processed_source []  length - "," processed_source []  length "," processed_source []  lstrip length "," processed_source []  lstrip "]}," RuboCop Cop RSpec EmptyLineSeparation missing_separating_line":{"type":"method","name":"missing_separating_line","children":[],"call":[" offending_loc "," processed_source [] blank? "," processed_source [] "," processed_source "," comment_line? "," final_end_location line "," final_end_location ","DirectiveComment  new enabled? ","DirectiveComment  new "," processed_source comment_at_line "," processed_source line_with_comment? ","line + "," comment_ final_end_location line ? ","  processed_source comment_at_line _line? "," final_end_location  final_end_location line  "," processed_source comment_at_ final_end_location line  "," processed_source  processed_source comment_at_line _at_line "," processed_source  final_end_location line _with_comment? "," processed_source line_with_ processed_source comment_at_line ? "," final_end_location line  + "]}," RuboCop Cop RSpec EmptyLineSeparation missing_separating_line_offense":{"type":"method","name":"missing_separating_line_offense","children":[],"call":["corrector insert_after ","location end "," add_offense ","node method_name "," missing_separating_line "," last_child? "]}," RuboCop Cop RSpec Base on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["RuboCop RSpec Language  config= "," config [] [] "," config [] "," config "]}," RuboCop Cop RSpec Focus correct_send":{"type":"method","name":"correct_send","children":[],"call":["corrector replace ","range source sub ","focus method_name to_s ","focus method_name ","range source ","ExampleGroups  regular ","Examples  regular ","focus method_name to_s sub ","focus loc selector ","focus loc ","focus loc selector  source sub ","focus loc selector  source "]}," RuboCop Cop RSpec Focus with_surrounding":{"type":"method","name":"with_surrounding","children":[],"call":[" range_with_surrounding_comma "," range_with_surrounding_space ","focus loc expression ","focus loc ","focus source_range "]}," RuboCop Cop RSpec FilePath name_pattern":{"type":"method","name":"name_pattern","children":[],"call":["method_name str_content gsub ","method_name str_content "," ignore_methods? ","method_name str_content gsub gsub "]}," RuboCop Cop RSpec FilePath pattern_for_spec_suffix_only?":{"type":"method","name":"pattern_for_spec_suffix_only?","children":[],"call":[]}," RuboCop Cop RSpec FilePath pattern_for":{"type":"method","name":"pattern_for","children":[],"call":["(send nil :expected_path\n  (lvar :described_class)) join "," name_pattern "," expected_path "," pattern_for_spec_suffix_only? "," spec_suffix_only? ","(send nil :expected_path\n  (lvar :example_group)) join ","example_group const_type? ! ","example_group const_type? "," pattern_for_spec_suffix_only "," routing_spec? ","arguments first "]}," autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[" push "," push push "]}," RuboCop Cop RSpec VerifiedDoubleReference correct_style":{"type":"method","name":"correct_style","children":[],"call":[" style == "," style ","violation gsub ","offense gsub "]}," RuboCop Cop RSpec VerifiedDoubleReference opposing_style?":{"type":"method","name":"opposing_style?","children":[],"call":["class_reference_style != "," style ","REFERENCE_TYPE_STYLES  [] ","class_reference type ","REFERENCE_TYPE_STYLES  []  != "]}," RuboCop Cop RSpec VerifiedDoubleReference on_send":{"type":"method","name":"on_send","children":[],"call":[" opposite_style_detected ","corrector replace "," correct_style ","class_reference children last to_s ","class_reference children last ","class_reference children "," add_offense ","class_reference loc expression ","class_reference loc "," format "," style "," correct_style_detected "," opposing_style? "," verified_double ","class_reference source ","class_reference source_range "," add_class_reference source  ","class_reference loc class_reference loc expression  ","class_reference loc class_reference source_range  "]}," RuboCop Cop RSpec VariableDefinition correct_variable":{"type":"method","name":"correct_variable","children":[],"call":["variable value to_sym inspect ","variable value to_sym ","variable value ","variable value to_s inspect ","variable value to_s ","variable source [] ","variable source ","variable type "]}," RuboCop Cop RSpec SubjectStub find_all_explicit":{"type":"method","name":"find_all_explicit","children":[],"call":["h [] << ","h [] "," example_group? ","child each_ancestor find ","child each_ancestor ","node each_descendant with_object ","node each_descendant "]}," RuboCop Cop RSpec SubjectDeclaration message_for":{"type":"method","name":"message_for","children":[],"call":["Helpers  all "]}," RuboCop Cop RSpec SubjectDeclaration on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message_for "," offensive_subject_declaration? "," add_ offensive_subject_declaration?  "]}," RuboCop Cop RSpec Rails AvoidSetupHook on_block":{"type":"method","name":"on_block","children":[],"call":["corrector replace "," add_offense "," setup_call "]}," RuboCop Cop RSpec InsideExampleGroup example_group_root_with_siblings?":{"type":"method","name":"example_group_root_with_siblings?","children":[],"call":["node parent nil? ","node parent ","node begin_type? "]}," RuboCop Cop RSpec InsideExampleGroup example_group_root?":{"type":"method","name":"example_group_root?","children":[],"call":[" example_group_root_with_siblings? ","node parent ","node parent nil? "]}," RuboCop Cop RSpec InsideExampleGroup inside_example_group?":{"type":"method","name":"inside_example_group?","children":[],"call":[" spec_group? "," example_group_root? ","node ancestors find ","node ancestors "," example_group? "]}," RuboCop Cop RSpec CommentsHelp buffer":{"type":"method","name":"buffer","children":[],"call":[" processed_source buffer "," processed_source "]}," RuboCop Cop RSpec CommentsHelp end_line_position":{"type":"method","name":"end_line_position","children":[],"call":[" buffer line_range "," buffer "," buffer line_for_position "," final_end_location end_pos "," final_end_location "]}," RuboCop Cop RSpec CommentsHelp start_line_position":{"type":"method","name":"start_line_position","children":[],"call":[" buffer line_range ","node loc line ","node loc "," buffer "]}," RuboCop Cop RSpec CommentsHelp begin_pos_with_comment":{"type":"method","name":"begin_pos_with_comment","children":[],"call":[" start_line_position "," processed_source ast_with_comments [] first "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "]}," RuboCop Cop RSpec CommentsHelp source_range_with_comment":{"type":"method","name":"source_range_with_comment","children":[],"call":["Parser Source Range  new "," buffer "," end_line_position end_pos "," end_line_position "," begin_pos_with_comment begin_pos "," begin_pos_with_comment "," end_line_position  end_line_position end_pos  ","  begin_pos_with_comment begin_pos _with_comment  begin_pos_with_comment begin_pos  ","  begin_pos_with_comment begin_pos _with_comment "]}," RuboCop Cop RSpec IdenticalEqualityAssertion on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","left == "," equality_check? "]}," RuboCop Cop RSpec FactoryBot SyntaxMethods offense":{"type":"method","name":"offense","children":[],"call":[" range_between ","node loc selector begin_pos ","node loc selector ","node loc ","node loc expression begin_pos ","node loc expression ","node source_range begin_pos ","node source_range "]}," RuboCop Cop RSpec FactoryBot SyntaxMethods crime_scene":{"type":"method","name":"crime_scene","children":[],"call":[" range_between ","node loc selector end_pos ","node loc selector ","node loc ","node loc expression begin_pos ","node loc expression ","node source_range begin_pos ","node source_range "]}," RuboCop Cop RSpec FactoryBot SyntaxMethods on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," offense "," add_offense "," crime_scene "," format ","node method_name "," inside_example_group? "," factory_bot? ","node receiver "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing text":{"type":"method","name":"text","children":[],"call":["node source ","node value ","(send\n  (send\n    (lvar :node) :node_parts) :map) join "," text ","node node_parts map ","node node_parts ","node type "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing docstring":{"type":"method","name":"docstring","children":[],"call":["Parser Source Range  new ","expr end_pos - ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc ","node source_range ","node loc expression  end_pos - ","node source_range  end_pos - ","node loc expression  end_pos ","node source_range  end_pos ","node loc expression  begin_pos + ","node source_range  begin_pos + ","node loc expression  begin_pos ","node source_range  begin_pos ","node loc expression  source_buffer ","node source_range  source_buffer ","node loc node loc expression ession ","node loc node source_range ession "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing add_whitespace_offense":{"type":"method","name":"add_whitespace_offense","children":[],"call":["corrector replace "," add_offense "," strip_excessive_whitespace "," docstring ","  docstring  "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing strip_excessive_whitespace":{"type":"method","name":"strip_excessive_whitespace","children":[],"call":["text strip gsub ","text strip ","text gsub gsub ","text gsub "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing excessive_whitespace?":{"type":"method","name":"excessive_whitespace?","children":[],"call":["text match? ","text end_with? ","text start_with? ","text include? "]}," RuboCop Cop RSpec ExcessiveDocstringSpacing on_send":{"type":"method","name":"on_send","children":[],"call":[" add_whitespace_offense "," excessive_whitespace? "," text ","description_node heredoc? "," example_description ","  text  "]}," RuboCop Cop RSpec ExampleLength cop_label":{"type":"method","name":"cop_label","children":[],"call":[]}," RuboCop Cop RSpec ContextWording prefix_regex":{"type":"method","name":"prefix_regex","children":[],"call":["Regexp  union "," prefixes "]}," RuboCop Cop RSpec Capybara CurrentPathExpectation autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop RSpec BeNil check_be_nil_style":{"type":"method","name":"check_be_nil_style","children":[],"call":["corrector replace ","node loc expression ","node loc "," add_offense "," nil_value_expectation? ","node source_range "]}," RuboCop Cop RSpec BeNil check_be_style":{"type":"method","name":"check_be_style","children":[],"call":["corrector replace ","node loc expression ","node loc "," add_offense "," be_nil_matcher? ","node source_range "]}," RuboCop Cop RSpec BeNil on_send":{"type":"method","name":"on_send","children":[],"call":[" check_be_nil_style "," check_be_style "," style ","corrector replace ","node loc expression ","node loc "," add_offense "," nil_value_expectation? "]}," RuboCop Cop RSpec BeEq on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node loc selector ","node loc "," add_offense "," eq_type_with_identity? "]}," RuboCop Cop RSpec ChangeByZero autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc dot with ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot ","corrector replace ","node parent loc selector ","node parent loc ","node parent ","node source_range end_pos ","node source_range ","change_node loc selector ","change_node loc ","node source_node loc dot with  end_pos ","node source_node loc dot with  "]}," RuboCop Cop RSpec ChangeByZero compound_expectations?":{"type":"method","name":"compound_expectations?","children":[],"call":["(sym :and) include? ","node parent method_name ","node parent "]}," RuboCop Cop RSpec ChangeByZero check_offence":{"type":"method","name":"check_offence","children":[],"call":[" autocorrect "," add_offense "," compound_expectations? ","node loc expression ","node loc ","node loc node loc expression  "]}," RuboCop Cop RSpec ChangeByZero on_send":{"type":"method","name":"on_send","children":[],"call":[" check_offence ","node parent parent ","node parent "," expect_change_with_block "," expect_change_with_arguments "," check_offense "," register_offense "]}," RuboCop Cop RSpec Rails HaveHttpStatus on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","match loc selector ","match loc ","response_status source_range "," add_offense "," format ","match source "," match_status ","status to_i to_s ","status to_i ","match first_argument ","node source ","status to_s ","status to_s match? "]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector format_singleline_block":{"type":"method","name":"format_singleline_block","children":[],"call":["node body source ","node body ","node arguments source ","node arguments "]}," RuboCop Cop RSpec ChangeByZero check_offense":{"type":"method","name":"check_offense","children":[],"call":[" autocorrect "," add_offense "," compound_expectations? ","node loc expression ","node loc "," autocorrect_compound "," message_compound ","node source_range ","node loc node loc expression  ","node loc node source_range  "]}," RuboCop Cop RSpec Capybara SpecificMatcher good_matcher":{"type":"method","name":"good_matcher","children":[],"call":["node method_name to_s gsub ","matcher to_s ","node method_name to_s ","node method_name "]}," RuboCop Cop RSpec Capybara SpecificMatcher message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," good_matcher "]}," RuboCop Cop RSpec Capybara SpecificMatcher acceptable_pattern?":{"type":"method","name":"acceptable_pattern?","children":[],"call":["arg match? "]}," RuboCop Cop RSpec Capybara SpecificMatcher specific_matcher":{"type":"method","name":"specific_matcher","children":[],"call":["SPECIFIC_MATCHER  [] ","arg [] "]}," RuboCop Cop RSpec Capybara SpecificMatcher on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," acceptable_pattern? "," specific_matcher "," first_argument "," specific_matcher_pseudo_classes? "," specific_matcher_option? ","CssSelector  multiple_selectors? "," specific_pseudo_classes? "," specific_option? ","CapybaraHelp  specific_pseudo_classes? ","CapybaraHelp  specific_option? "," specific_ specific_matcher  "," first_ first_argument ument "," specific_ specific_matcher _pseudo_classes? "," specific_ specific_matcher _option? "]}," RuboCop RSpec Language NodePattern numblock_pattern":{"type":"method","name":"numblock_pattern","children":[],"call":[" send_pattern "," deprecation_warning "," __method__ "]}," RuboCop RSpec ConfigFormatter reference":{"type":"method","name":"reference","children":[],"call":["COP_DOC_BASE_URL  + ","cop sub "]}," RuboCop RSpec ConfigFormatter replace_nil":{"type":"method","name":"replace_nil","children":[],"call":["config []= ","value nil? ","config each "]}," RuboCop Cop RSpec NoExpectationExample on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," including_any_expectation? "," regular_or_focused_example? "," including_any_skip_example? "," skipped_in_metadata? ","node send_node "," includes_skip_example? "," includes_expectation? "]}," RuboCop Cop RSpec NestedGroups allowed_groups":{"type":"method","name":"allowed_groups","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop RSpec NestedGroups count_up_nesting?":{"type":"method","name":"count_up_nesting?","children":[],"call":[" allowed_groups include? ! "," allowed_groups include? ","node method_name "," allowed_groups ","node block_type? ","node method_name to_s "]}," RuboCop Cop RSpec Namespace namespace":{"type":"method","name":"namespace","children":[],"call":["ancestor defined_module_name split ","ancestor defined_module_name ","node each_ancestor reverse_each flat_map ","node each_ancestor reverse_each ","node each_ancestor "]}," RuboCop Cop RSpec CssSelector normalize_value":{"type":"method","name":"normalize_value","children":[],"call":[]}," RuboCop Cop RSpec CssSelector multiple_selectors?":{"type":"method","name":"multiple_selectors?","children":[],"call":["selector match? "]}," RuboCop Cop RSpec CssSelector pseudo_classes":{"type":"method","name":"pseudo_classes","children":[],"call":["ignored_attribute scan flatten ","ignored_attribute scan ","selector gsub ","selector gsub  scan flatten ","selector gsub  scan "]}," RuboCop Cop RSpec CssSelector common_attributes?":{"type":"method","name":"common_attributes?","children":[],"call":[" attributes keys difference none? "," attributes keys difference "," attributes keys "," attributes "]}," RuboCop Cop RSpec CssSelector attributes":{"type":"method","name":"attributes","children":[],"call":[" normalize_value ","attr split ","selector scan flatten to_h ","selector scan flatten ","selector scan "]}," RuboCop Cop RSpec CssSelector attribute?":{"type":"method","name":"attribute?","children":[],"call":["selector start_with? "]}," RuboCop Cop RSpec CssSelector id?":{"type":"method","name":"id?","children":[],"call":["selector start_with? "]}," RuboCop Cop RSpec IteratedExpectation on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" add_offense ","node send_node "," only_expectations? "," single_expectation? "," each_numblock? "]}," RuboCop Cop RSpec FilePath pattern_for_spec_suffix_only":{"type":"method","name":"pattern_for_spec_suffix_only","children":[],"call":[]}," RuboCop Cop RSpec FactoryBot CreateList CreateListCorrector count_from":{"type":"method","name":"count_from","children":[],"call":["count_node source ","node send_node first_argument ","node send_node ","node receiver ","node receiver int_type? ","node send_node first_argument  source ","node receiver  source "]}," RuboCop Cop RSpec EmptyLineAfterHook chained_single_line_hooks?":{"type":"method","name":"chained_single_line_hooks?","children":[],"call":["next_node single_line? ","node single_line? "," hook? ","node right_sibling ","node right_sibling  single_line? "]}," RuboCop Cop RSpec EmptyExampleGroup removed_range":{"type":"method","name":"removed_range","children":[],"call":[" range_by_whole_lines ","node location expression ","node location ","node source_range "]}," RuboCop Cop RSpec ContextWording expect_patterns":{"type":"method","name":"expect_patterns","children":[],"call":["inspected join ","inspected << ","inspected pop ","inspected first ","inspected size == ","inspected size "," allowed_patterns map "," allowed_patterns ","pattern inspect gsub ","pattern inspect "," allowed_patterns map  join "," allowed_patterns map  << "," allowed_patterns map  pop "," allowed_patterns map  first "," allowed_patterns map  size == "," allowed_patterns map  size "]}," RuboCop Cop RSpec ContextWording bad_pattern?":{"type":"method","name":"bad_pattern?","children":[],"call":[" matches_allowed_pattern? ! "," matches_allowed_pattern? "," allowed_patterns empty? "," allowed_patterns "," description "]}," RuboCop Cop RSpec ContextWording prefix_regexes":{"type":"method","name":"prefix_regexes","children":[],"call":["Regexp  escape "," prefixes map "," prefixes "]}," RuboCop Cop RSpec ContextWording allowed_patterns":{"type":"method","name":"allowed_patterns","children":[],"call":[" + "," prefix_regexes "]}," RuboCop Cop RSpec ClassCheck preferred_method_names":{"type":"method","name":"preferred_method_names","children":[],"call":[" style == "," style "]}," RuboCop Cop RSpec ClassCheck preferred_method_name":{"type":"method","name":"preferred_method_name","children":[],"call":["PREFERRED_METHOD_NAME_BY_STYLE  [] "," style "]}," RuboCop Cop RSpec ClassCheck preferred_method_name?":{"type":"method","name":"preferred_method_name?","children":[],"call":[" preferred_method_names include? "," preferred_method_names "]}," RuboCop Cop RSpec ClassCheck offending?":{"type":"method","name":"offending?","children":[],"call":[" preferred_method_name? ! "," preferred_method_name? ","node method_name ","node receiver ! ","node receiver "]}," RuboCop Cop RSpec ClassCheck format_message":{"type":"method","name":"format_message","children":[],"call":[" format "," preferred_method_name ","node method_name "]}," RuboCop Cop RSpec ClassCheck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_method_name ","node loc selector ","node loc "]}," RuboCop Cop RSpec ClassCheck on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," format_message ","node loc selector ","node loc "," offending? "]}," RuboCop Cop RSpec ChangeByZero preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" negated_matcher "]}," RuboCop Cop RSpec ChangeByZero message_compound":{"type":"method","name":"message_compound","children":[],"call":[" format "," preferred_method ","change_node method_name "]}," RuboCop Cop RSpec ChangeByZero negated_matcher":{"type":"method","name":"negated_matcher","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec ChangeByZero autocorrect_compound":{"type":"method","name":"autocorrect_compound","children":[],"call":["corrector remove ","node loc dot with ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot ","corrector replace "," negated_matcher ","change_node loc selector ","change_node loc "," change_nodes ","node source_range end_pos ","node source_range ","node source_node loc dot with  end_pos ","node source_node loc dot with  "]}," RuboCop Cop RSpec Capybara SpecificMatcher replaceable_to_have_link?":{"type":"method","name":"replaceable_to_have_link?","children":[],"call":["attrs include? "," option? "]}," RuboCop Cop RSpec Capybara SpecificMatcher replaceable_matcher?":{"type":"method","name":"replaceable_matcher?","children":[],"call":[" replaceable_to_have_link? "]}," RuboCop Cop RSpec Capybara SpecificMatcher replaceable_pseudo_class_not?":{"type":"method","name":"replaceable_pseudo_class_not?","children":[],"call":["v is_a? ","CssSelector  attributes values all? ","CssSelector  attributes values ","CssSelector  attributes ","arg scan all? ","arg scan "]}," RuboCop Cop RSpec Capybara SpecificMatcher replaceable_pseudo_class?":{"type":"method","name":"replaceable_pseudo_class?","children":[],"call":[" replaceable_pseudo_class_not? ","SPECIFIC_MATCHER_PSEUDO_CLASSES  include? "]}," RuboCop Cop RSpec Capybara SpecificMatcher specific_matcher_pseudo_classes?":{"type":"method","name":"specific_matcher_pseudo_classes?","children":[],"call":[" replaceable_pseudo_class? ","CssSelector  pseudo_classes all? ","CssSelector  pseudo_classes "]}," RuboCop Cop RSpec Capybara SpecificMatcher specific_matcher_option?":{"type":"method","name":"specific_matcher_option?","children":[],"call":["SPECIFIC_MATCHER_OPTIONS  fetch include? ","SPECIFIC_MATCHER_OPTIONS  fetch ","attrs all? "," replaceable_matcher? ","attrs empty? ","CssSelector  attributes keys ","CssSelector  attributes ","CssSelector  attributes keys  all? ","CssSelector  attributes keys  empty? "]}," RuboCop Cop RSpec Capybara SpecificFinders offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","node loc selector begin_pos ","node loc selector "," end_pos "]}," RuboCop Cop RSpec Capybara SpecificFinders to_options":{"type":"method","name":"to_options","children":[],"call":["(send\n  (send\n    (lvar :attrs) :each) :map) compact join ","(send\n  (send\n    (lvar :attrs) :each) :map) compact ","key == ","attrs each map ","attrs each "]}," RuboCop Cop RSpec Capybara SpecificFinders replaced_arguments":{"type":"method","name":"replaced_arguments","children":[],"call":["options empty? "," to_options ","CssSelector  attributes "," to_options  empty? "," to_ to_options  "]}," RuboCop Cop RSpec Capybara SpecificFinders register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","node first_argument loc expression ","node first_argument loc ","node first_argument ","node loc selector ","node loc "," add_offense "," offense_range "]}," RuboCop Cop RSpec Capybara SpecificFinders attribute?":{"type":"method","name":"attribute?","children":[],"call":["CssSelector  common_attributes? ","CssSelector  attribute? "]}," RuboCop Cop RSpec Capybara SpecificFinders on_id":{"type":"method","name":"on_id","children":[],"call":[" register_offense ","arg to_s delete ","arg to_s "]}," RuboCop Cop RSpec Capybara SpecificFinders on_attr":{"type":"method","name":"on_attr","children":[],"call":[" register_offense "," replaced_arguments ","CssSelector  attributes [] ","CssSelector  attributes "]}," RuboCop Cop RSpec Capybara SpecificFinders on_send":{"type":"method","name":"on_send","children":[],"call":[" on_id ","CssSelector  id? "," on_attr "," attribute? ","CssSelector  multiple_selectors? "," find_argument "]}," RuboCop Cop RSpec AroundBlock check_for_numblock":{"type":"method","name":"check_for_numblock","children":[],"call":[" add_offense "," format ","block children last ","block children ","usage include? "," s "," find_arg_usage "]}," RuboCop Cop RSpec AroundBlock on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" check_for_numblock "," hook_numblock "]}," RuboCop Cop RSpec Capybara SpecificFinders end_pos":{"type":"method","name":"end_pos","children":[],"call":["node loc expression end_pos ","node loc expression ","node loc ","node loc end end_pos ","node loc end "]}," RuboCop Cop RSpec SortMetadata sort_symbols":{"type":"method","name":"sort_symbols","children":[],"call":["symbol source downcase ","symbol source ","symbol value to_s downcase ","symbol value to_s ","symbol value ","(sym :str) include? ","symbol type ","symbols sort_by "]}," RuboCop Cop RSpec SortMetadata sort_pairs":{"type":"method","name":"sort_pairs","children":[],"call":["pair key source downcase ","pair key source ","pair key ","pairs sort_by "]}," RuboCop Cop RSpec SortMetadata sorted?":{"type":"method","name":"sorted?","children":[],"call":["pairs == "," sort_pairs ","symbols == "," sort_symbols "]}," RuboCop Cop RSpec SortMetadata replacement":{"type":"method","name":"replacement","children":[],"call":["(send\n  (send nil :sort_symbols\n    (lvar :symbols)) :+\n  (send nil :sort_pairs\n    (lvar :pairs))) map join ","(send\n  (send nil :sort_symbols\n    (lvar :symbols)) :+\n  (send nil :sort_pairs\n    (lvar :pairs))) map "," sort_symbols + "," sort_pairs "," sort_symbols "]}," RuboCop Cop RSpec SortMetadata crime_scene":{"type":"method","name":"crime_scene","children":[],"call":[" range_between ","metadata last loc expression end_pos ","metadata last loc expression ","metadata last loc ","metadata last ","metadata first loc expression begin_pos ","metadata first loc expression ","metadata first loc ","metadata first ","symbols + ","metadata last source_range end_pos ","metadata last source_range ","metadata first source_range begin_pos ","metadata first source_range ","symbols +  last loc expression end_pos ","symbols +  last loc expression ","symbols +  last loc ","symbols +  last ","symbols +  first loc expression begin_pos ","symbols +  first loc expression ","symbols +  first loc ","symbols +  first ","symbols +  last source_range end_pos ","symbols +  last source_range ","symbols +  first source_range begin_pos ","symbols +  first source_range "]}," RuboCop Cop RSpec SortMetadata investigate":{"type":"method","name":"investigate","children":[],"call":["corrector replace "," replacement "," add_offense "," crime_scene "," sorted? ","  crime_scene  "]}," RuboCop Cop RSpec SortMetadata on_block":{"type":"method","name":"on_block","children":[],"call":[" investigate ","pairs flatten "," rspec_metadata "," metadata_in_block "," rspec_configure "]}," RuboCop Cop RSpec Rails InferredSpecType inferences":{"type":"method","name":"inferences","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec Rails InferredSpecType inferred_type_from_file_path":{"type":"method","name":"inferred_type_from_file_path","children":[],"call":["type to_sym "," file_path include? "," file_path "," inferences find "," inferences "]}," RuboCop Cop RSpec Rails InferredSpecType inferred_type?":{"type":"method","name":"inferred_type?","children":[],"call":[" inferred_type_from_file_path inspect == ","node value source ","node value "," inferred_type_from_file_path inspect "," inferred_type_from_file_path "]}," RuboCop Cop RSpec Rails InferredSpecType file_path":{"type":"method","name":"file_path","children":[],"call":[" processed_source file_path "," processed_source "]}," RuboCop Cop RSpec Rails InferredSpecType detect_removable_node":{"type":"method","name":"detect_removable_node","children":[],"call":["node parent ","node parent pairs size == ","node parent pairs size ","node parent pairs "]}," RuboCop Cop RSpec Rails InferredSpecType autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node location expression with ","node left_sibling location expression end_pos ","node left_sibling location expression ","node left_sibling location ","node left_sibling ","node location expression ","node location "," remove_range "]}," RuboCop Cop RSpec Rails InferredSpecType on_block":{"type":"method","name":"on_block","children":[],"call":[" autocorrect "," add_offense "," detect_removable_node "," inferred_type? "," describe_with_type "," example_group? "," detect_ detect_removable_node  "]}," RuboCop Cop RSpec CssSelector specific_pesudo_classes?":{"type":"method","name":"specific_pesudo_classes?","children":[],"call":["SPECIFIC_PSEUDO_CLASSES  include? "]}," RuboCop Cop RSpec CssSelector specific_options?":{"type":"method","name":"specific_options?","children":[],"call":["SPECIFIC_OPTIONS  fetch include? ","SPECIFIC_OPTIONS  fetch "]}," RuboCop Cop RSpec CapybaraHelp include_option?":{"type":"method","name":"include_option?","children":[],"call":["opt value == ","opt value ","node each_descendant find ","node each_descendant "]}," RuboCop Cop RSpec CapybaraHelp replaceable_to_link?":{"type":"method","name":"replaceable_to_link?","children":[],"call":["attrs include? "," include_option? "]}," RuboCop Cop RSpec CapybaraHelp replaceable_element?":{"type":"method","name":"replaceable_element?","children":[],"call":[" replaceable_to_link? "]}," RuboCop Cop RSpec CapybaraHelp replaceable_pseudo_class_not?":{"type":"method","name":"replaceable_pseudo_class_not?","children":[],"call":["v is_a? ","CssSelector  attributes values all? ","CssSelector  attributes values ","CssSelector  attributes ","locator scan all? ","locator scan "]}," RuboCop Cop RSpec CapybaraHelp replaceable_pseudo_class?":{"type":"method","name":"replaceable_pseudo_class?","children":[],"call":[" replaceable_pseudo_class_not? ","CssSelector  specific_pesudo_classes? "]}," RuboCop Cop RSpec CapybaraHelp specific_pseudo_classes?":{"type":"method","name":"specific_pseudo_classes?","children":[],"call":[" replaceable_pseudo_class? ","CssSelector  pseudo_classes all? ","CssSelector  pseudo_classes "]}," RuboCop Cop RSpec CapybaraHelp specific_option?":{"type":"method","name":"specific_option?","children":[],"call":["CssSelector  specific_options? ","attrs all? "," replaceable_element? ","CssSelector  attributes keys ","CssSelector  attributes ","CssSelector  attributes keys  all? "]}," RuboCop Cop RSpec LetBeforeExamples example_group_with_include_examples?":{"type":"method","name":"example_group_with_include_examples?","children":[],"call":[" include_examples? ","body children any? ","body children "]}," RuboCop Cop RSpec ImplicitSubject example_of":{"type":"method","name":"example_of","children":[],"call":[" example? ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop RSpec ImplicitSubject single_statement?":{"type":"method","name":"single_statement?","children":[],"call":["(csend\n  (send nil :example_of\n    (lvar :node)) :body) ! "," example_of "]}," RuboCop Cop RSpec ImplicitSubject single_line?":{"type":"method","name":"single_line?","children":[],"call":[" example_of "]}," RuboCop Cop RSpec ImplicitSubject its?":{"type":"method","name":"its?","children":[],"call":[" example_of "]}," RuboCop Cop RSpec ImplicitSubject implicit_subject_in_non_its_and_non_single_statement?":{"type":"method","name":"implicit_subject_in_non_its_and_non_single_statement?","children":[],"call":[" single_statement? ! "," single_statement? "," implicit_subject_in_non_its? "]}," RuboCop Cop RSpec ImplicitSubject implicit_subject_in_non_its_and_non_single_line?":{"type":"method","name":"implicit_subject_in_non_its_and_non_single_line?","children":[],"call":[" single_line? ! "," single_line? "," implicit_subject_in_non_its? "]}," RuboCop Cop RSpec ImplicitSubject implicit_subject_in_non_its?":{"type":"method","name":"implicit_subject_in_non_its?","children":[],"call":[" its? ! "," its? "," implicit_subject? "]}," RuboCop Cop RSpec ImplicitSubject invalid?":{"type":"method","name":"invalid?","children":[],"call":[" implicit_subject_in_non_its_and_non_single_statement? "," implicit_subject_in_non_its_and_non_single_line? "," implicit_subject_in_non_its? "," explicit_unnamed_subject? "," style "]}," RuboCop Cop RSpec ImplicitSubject message":{"type":"method","name":"message","children":[],"call":[" style "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle remove_parentheses":{"type":"method","name":"remove_parentheses","children":[],"call":["corrector remove ","node location end ","node location ","corrector replace ","node location begin "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle nested_call?":{"type":"method","name":"nested_call?","children":[],"call":["node parent "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle process_without_parentheses":{"type":"method","name":"process_without_parentheses","children":[],"call":[" add_parentheses "," add_offense ","node loc selector ","node loc "," style == "," style "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle process_with_parentheses":{"type":"method","name":"process_with_parentheses","children":[],"call":[" remove_parentheses "," add_offense ","node loc selector ","node loc "," style == "," style "," same_line? ","node first_argument "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle on_send":{"type":"method","name":"on_send","children":[],"call":[" process_without_parentheses "," process_with_parentheses ","node parenthesized? "," factory_call "," nested_call? "," ambiguous_without_parentheses? ","node arguments count > ","node arguments count ","node arguments ","node method? "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop RSpec ExampleWording preprocess":{"type":"method","name":"preprocess","children":[],"call":["message strip squeeze downcase ","message strip squeeze ","message strip "]}," RuboCop Cop RSpec ExampleWording insufficient_examples":{"type":"method","name":"insufficient_examples","children":[],"call":[" preprocess ","examples map! "," cop_config fetch "," cop_config "," cop_config fetch  map! "]}," RuboCop Cop RSpec ExampleWording check_and_handle_insufficient_examples":{"type":"method","name":"check_and_handle_insufficient_examples","children":[],"call":[" add_wording_offense "," insufficient_examples include? "," preprocess "," text "," insufficient_examples "]}," RuboCop Cop RSpec Capybara SpecificActions good_action":{"type":"method","name":"good_action","children":[],"call":[]}," RuboCop Cop RSpec Capybara SpecificActions message":{"type":"method","name":"message","children":[],"call":[" format "," good_action "]}," RuboCop Cop RSpec Capybara SpecificActions offense_range":{"type":"method","name":"offense_range","children":[],"call":["receiver loc selector with ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc selector ","receiver loc "]}," RuboCop Cop RSpec Capybara SpecificActions last_selector":{"type":"method","name":"last_selector","children":[],"call":["arg split last [] ","arg split last ","arg split "]}," RuboCop Cop RSpec Capybara SpecificActions supported_selector?":{"type":"method","name":"supported_selector?","children":[],"call":["selector match? ! ","selector match? "]}," RuboCop Cop RSpec Capybara SpecificActions specific_action":{"type":"method","name":"specific_action","children":[],"call":["SPECIFIC_ACTION  [] "," last_selector "]}," RuboCop Cop RSpec Capybara SpecificActions on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," offense_range ","node receiver ","CapybaraHelp  specific_pseudo_classes? ","CapybaraHelp  specific_option? "," specific_action "," last_selector "," supported_selector? "," click_on_selector "," offense_ offense_range  "," specific_ specific_action  "," last_ last_selector  "," supported_ last_selector ? "," click_on_ last_selector  "]}," RuboCop Cop RSpec Capybara NegationMatcher replaced_matcher":{"type":"method","name":"replaced_matcher","children":[],"call":["matcher sub "," style "]}," RuboCop Cop RSpec Capybara NegationMatcher replaced_runner":{"type":"method","name":"replaced_runner","children":[],"call":[" style "]}," RuboCop Cop RSpec Capybara NegationMatcher message":{"type":"method","name":"message","children":[],"call":[" format "," replaced_matcher "," replaced_runner "]}," RuboCop Cop RSpec Capybara NegationMatcher offense_range":{"type":"method","name":"offense_range","children":[],"call":["node parent loc selector with ","node loc selector end_pos ","node loc selector ","node loc ","node parent loc selector ","node parent loc ","node parent "]}," RuboCop Cop RSpec Capybara NegationMatcher offense?":{"type":"method","name":"offense?","children":[],"call":[" have_no? "," style == "," style "," not_to? "]}," RuboCop Cop RSpec Capybara NegationMatcher on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," replaced_matcher ","node loc selector ","node loc "," replaced_runner ","node parent loc selector ","node parent loc ","node parent "," add_offense "," message "," offense_range ","node method_name to_s ","node method_name "," offense? "," replaced_node method_name to_s  "]}," RuboCop Cop RSpec Rails InferredSpecType remove_range":{"type":"method","name":"remove_range","children":[],"call":["node loc expression with ","node right_sibling loc expression begin_pos ","node right_sibling loc expression ","node right_sibling loc ","node right_sibling ","node loc expression ","node loc ","node left_sibling loc expression end_pos ","node left_sibling loc expression ","node left_sibling loc ","node left_sibling ","node source_range with ","node right_sibling source_range begin_pos ","node right_sibling source_range ","node source_range ","node left_sibling source_range end_pos ","node left_sibling source_range "]}," RuboCop Cop RSpec FilePath expanded_file_path":{"type":"method","name":"expanded_file_path","children":[],"call":["File  expand_path "," processed_source buffer name "," processed_source buffer "," processed_source "," processed_source file_path "]}," RuboCop Cop RSpec FilePath routing_spec_path?":{"type":"method","name":"routing_spec_path?","children":[],"call":[" expanded_file_path include? "," expanded_file_path "]}," RuboCop Cop RSpec ExampleWording insufficient_docstring?":{"type":"method","name":"insufficient_docstring?","children":[],"call":[" insufficient_examples include? "," preprocess "," text "," insufficient_examples "]}," deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["object transform_values "," method "," deep_dup ","object map "]}," RuboCop Cop RSpec RepeatedDescription its_signature":{"type":"method","name":"its_signature","children":[],"call":["example doc_string "]}," RuboCop Cop RSpec RepeatedDescription repeated_its":{"type":"method","name":"repeated_its","children":[],"call":["(send\n  (lvar :grouped_its) :select) values flatten map ","(send\n  (lvar :grouped_its) :select) values flatten ","(send\n  (lvar :grouped_its) :select) values ","group size > ","group size ","signatures any? ","grouped_its select "," its_signature ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :RuboCop) :RSpec) :ExampleGroup) :new\n      (lvar :node)) :examples) :select) group_by ","n definition method? ","n definition ","RuboCop RSpec ExampleGroup  new examples select ","RuboCop RSpec ExampleGroup  new examples ","RuboCop RSpec ExampleGroup  new "]}," RuboCop Cop RSpec NamedSubject find_subject":{"type":"method","name":"find_subject","children":[],"call":[" subject? ","block_node body child_nodes find ","block_node body child_nodes ","block_node body "]}," RuboCop Cop RSpec NamedSubject nearest_subject":{"type":"method","name":"nearest_subject","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :each_ancestor\n      (sym :block)) :lazy) :map) find "," find_subject ","node each_ancestor lazy map ","node each_ancestor lazy ","node each_ancestor "]}," RuboCop Cop RSpec NamedSubject subject_definition_is_named?":{"type":"method","name":"subject_definition_is_named?","children":[],"call":[" nearest_subject "," nearest_ nearest_subject  "]}," RuboCop Cop RSpec NamedSubject named_only?":{"type":"method","name":"named_only?","children":[],"call":[" subject_definition_is_named? "," style == "," style "]}," RuboCop Cop RSpec NamedSubject always?":{"type":"method","name":"always?","children":[],"call":[" style == "," style "]}," RuboCop Cop RSpec NamedSubject allow_explicit_subject?":{"type":"method","name":"allow_explicit_subject?","children":[],"call":[" named_only? ! "," named_only? "," always? ! "," always? "]}," RuboCop Cop RSpec NamedSubject check_explicit_subject":{"type":"method","name":"check_explicit_subject","children":[],"call":[" add_offense ","node loc selector ","node loc "," allow_explicit_subject? "]}," RuboCop Cop RSpec FactoryBot ConsistentParenthesesStyle ambiguous_without_parentheses?":{"type":"method","name":"ambiguous_without_parentheses?","children":[],"call":["node parent ","AMBIGUOUS_TYPES  include? ","node parent type "]}," RuboCop Cop RSpec SortMetadata on_metadata":{"type":"method","name":"on_metadata","children":[],"call":["corrector replace "," replacement "," add_offense "," crime_scene "," sorted? ","  crime_scene  "]}," RuboCop Cop RSpec PendingWithoutReason skipped_without_reason?":{"type":"method","name":"skipped_without_reason?","children":[],"call":[" skipped_by_skip_step_without_reason? "," skipped_by_metadata_without_reason? "," skipped_by_example_method? ","node block_node "," skipped_by_example_group_method? "]}," RuboCop Cop RSpec PendingWithoutReason skipped_by_skip_step_without_reason?":{"type":"method","name":"skipped_by_skip_step_without_reason?","children":[],"call":["node first_argument nil? ","node first_argument ","node method? "]}," RuboCop Cop RSpec PendingWithoutReason pending_without_reason?":{"type":"method","name":"pending_without_reason?","children":[],"call":[" pending_by_pending_step_without_reason? "," pending_by_metadata_without_reason? "," pending_by_example_method? ","node block_node "]}," RuboCop Cop RSpec PendingWithoutReason pending_by_pending_step_without_reason?":{"type":"method","name":"pending_by_pending_step_without_reason?","children":[],"call":["node first_argument nil? ","node first_argument ","node method? "]}," RuboCop Cop RSpec PendingWithoutReason on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," skipped_without_reason? "," pending_without_reason? ","node method_name "," example? ","node parent "," without_reason? "," on_skipped_by_in_example_method "," on_skipped_by_example_group_method "," on_skipped_by_example_method "," block_node_example_group? "," example_group? "," parent_node "," on_pending_by_metadata ","node  parent_node  ","  parent_node _node "]}," RuboCop Cop RSpec Metadata on_metadata":{"type":"method","name":"on_metadata","children":[],"call":[" raise "]}," RuboCop Cop RSpec Metadata on_block":{"type":"method","name":"on_block","children":[],"call":[" on_metadata ","pairs flatten "," rspec_metadata "," metadata_in_block "," rspec_configure "," on_matadata_arguments "," on_metadata_arguments "]}," RuboCop Cop RSpec FactoryBot FactoryNameStyle register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," format "," style to_s "," style "]}," RuboCop Cop RSpec FactoryBot FactoryNameStyle offense_for_string_style?":{"type":"method","name":"offense_for_string_style?","children":[],"call":[" style == "," style ","name sym_type? "]}," RuboCop Cop RSpec FactoryBot FactoryNameStyle offense_for_symbol_style?":{"type":"method","name":"offense_for_symbol_style?","children":[],"call":[" style == "," style ","name str_type? "]}," RuboCop Cop RSpec FactoryBot FactoryNameStyle on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","name value to_s inspect ","name value to_s ","name value "," offense_for_string_style? ","name value to_sym inspect ","name value to_sym "," offense_for_symbol_style? "," factory_call "]}," RuboCop Cop RSpec FactoryBot CreateList TimesCorrector factory_call_block_source":{"type":"method","name":"factory_call_block_source","children":[],"call":[" node block_node location begin with source "," node block_node location begin with "," node block_node location end end_pos "," node block_node location end "," node block_node location "," node block_node "," node "," node block_node location begin "]}," RuboCop Cop RSpec DuplicatedMetadata duplicated?":{"type":"method","name":"duplicated?","children":[],"call":["sibling eql? ","node left_siblings any? ","node left_siblings "]}," RuboCop Cop RSpec DuplicatedMetadata autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node location expression ","node location ","node source_range "]}," RuboCop Cop RSpec DuplicatedMetadata on_metadata_symbol":{"type":"method","name":"on_metadata_symbol","children":[],"call":[" autocorrect "," add_offense "," duplicated? "]}," RuboCop Cop RSpec DuplicatedMetadata on_metadata":{"type":"method","name":"on_metadata","children":[],"call":[" on_metadata_symbol ","symbols each "]}," RuboCop Cop RSpec Rails MinitestAssertions message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop RSpec Rails MinitestAssertions replacement":{"type":"method","name":"replacement","children":[],"call":["failure_message source ","actual source ","expected source ","failure_message nil? ","node method? "]}," RuboCop Cop RSpec Rails MinitestAssertions on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," message "," replacement ","failure_message first "," minitest_assertion "]}," RuboCop Cop RSpec Capybara MatchStyle message":{"type":"method","name":"message","children":[],"call":[" format ","node source ","PREFERRED_METHOD  [] "]}," RuboCop Cop RSpec Capybara MatchStyle on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","PREFERRED_METHOD  [] ","method_node source "," add_offense ","node loc selector ","node loc ","node loc selector  source "]}," RuboCop Cop RSpec ExplicitHelper heredoc_argument?":{"type":"method","name":"heredoc_argument?","children":[],"call":["(send\n  (send\n    (lvar :matcher) :arguments) :select) any? ","(sym :str) include? ","arg type ","matcher arguments select ","matcher arguments "]}," RuboCop Cop RSpec ExplicitHelper uncorrectable_matcher?":{"type":"method","name":"uncorrectable_matcher?","children":[],"call":[" same_line? ! "," same_line? "," heredoc_argument? "]}," RuboCop Cop RSpec ExplicitHelper replaceable_matcher?":{"type":"method","name":"replaceable_matcher?","children":[],"call":["matcher arguments one? ","matcher arguments ","matcher method_name to_s ","matcher method_name "]}," RuboCop RSpec Language NodePattern deprecation_warning":{"type":"method","name":"deprecation_warning","children":[],"call":["Kernel  warn "]}," RuboCop RSpec Language NodePattern block_or_numblock_pattern":{"type":"method","name":"block_or_numblock_pattern","children":[],"call":[" numblock_pattern "," block_pattern "," deprecation_warning "," __method__ "]}," RuboCop Cop RSpec SkipBlockInsideExample inside_example?":{"type":"method","name":"inside_example?","children":[],"call":[" example? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop RSpec SkipBlockInsideExample on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," inside_example? ","node method? "]}," RuboCop Cop RSpec RedundantAround autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "]}," RuboCop Cop RSpec RedundantAround on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," match_redundant_around_hook_send? "]}," RuboCop Cop RSpec RedundantAround on_block":{"type":"method","name":"on_block","children":[],"call":[" autocorrect "," add_offense "," match_redundant_around_hook_block? "]}," RuboCop Cop RSpec Rails TravelAround extract_surrounding_around_block":{"type":"method","name":"extract_surrounding_around_block","children":[],"call":[" match_around_each? ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop RSpec Rails TravelAround autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","run_node source ","corrector replace ","node body source ","node body "]}," RuboCop Cop RSpec Rails TravelAround on_block":{"type":"method","name":"on_block","children":[],"call":[" autocorrect "," add_offense "," extract_surrounding_around_block "," extract_run_in_travel "]}," RuboCop Cop RSpec PendingWithoutReason on_skipped_by_example_group_method":{"type":"method","name":"on_skipped_by_example_group_method","children":[],"call":[" add_offense "," skipped_by_example_group_method? "]}," RuboCop Cop RSpec PendingWithoutReason on_skipped_by_example_method":{"type":"method","name":"on_skipped_by_example_method","children":[],"call":[" add_offense "," skipped_by_example_method? "," skipped_by_example_method_with_block? ","node parent "]}," RuboCop Cop RSpec PendingWithoutReason on_pending_by_metadata":{"type":"method","name":"on_pending_by_metadata","children":[],"call":[" add_offense "," metadata_without_reason? "]}," RuboCop Cop RSpec PendingWithoutReason on_skipped_by_in_example_method":{"type":"method","name":"on_skipped_by_in_example_method","children":[],"call":[" add_offense "," skipped_in_example? "]}," RuboCop Cop RSpec PendingWithoutReason block_node_example_group?":{"type":"method","name":"block_node_example_group?","children":[],"call":[" explicit_rspec? ","node receiver "," example_group? ","node block_node "]}," RuboCop Cop RSpec PendingWithoutReason parent_node":{"type":"method","name":"parent_node","children":[],"call":["parent parent ","parent begin_type? ","node_or_block parent ","node block_node ","node_or_block parent  node_or_block parent  ","node_or_block parent  begin_type? ","node_or_block node_or_block parent  "]}," RuboCop Cop RSpec LocationHelp block_with_whitespace":{"type":"method","name":"block_with_whitespace","children":[],"call":["node source_range end with ","parent source_range end_pos ","parent source_range ","node source_range end ","node source_range ","parent block_type? ","node parent ","node parent  source_range end_pos ","node parent  source_range ","node parent  block_type? ","node node parent  "]}," RuboCop Cop RSpec LocationHelp arguments_with_whitespace":{"type":"method","name":"arguments_with_whitespace","children":[],"call":["node loc selector end with ","node source_range end_pos ","node source_range ","node loc selector end ","node loc selector ","node loc "]}," RuboCop Cop RSpec MatchArray on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","array_contents map join ","array_contents map ","node source_range ","node arguments flat_map ","node arguments "," add_offense ","node first_argument percent_literal? ","node first_argument ","node first_argument array_type? "," check_populated_array "," match_array_with_empty_array? ","node arguments flat_map  map join ","node arguments flat_map  map "]}," RuboCop Cop RSpec DescribeMethod method_name_prefix?":{"type":"method","name":"method_name_prefix?","children":[],"call":["description start_with? "]}," RuboCop Cop RSpec ContextWording description":{"type":"method","name":"description","children":[],"call":["context value ","context value value ","context xstr_type? "]}," RuboCop Cop RSpec ContainExactly autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","arrays map join ","arrays map ","node source_range ","splat_node children first ","splat_node children ","node arguments map ","node arguments "]}," RuboCop Cop RSpec ContainExactly on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense ","node each_child_node all? ","node each_child_node "," check_populated_collection ","node arguments empty? ","node arguments "]}," RuboCop Cop RSpec ScatteredSetup autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","occurrence source_range ","corrector insert_after ","occurrence body source ","occurrence body ","first_occurrence body ","first_occurrence body ! ","first_occurrence == "]}," RuboCop Cop RSpec ScatteredSetup message":{"type":"method","name":"message","children":[],"call":[" format "," lines_msg ","occurrences first method_name ","occurrences first ","lines - ","occurrence first_line ","occurrences map "," occurrences map _msg ","occurrences map  - "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker number":{"type":"method","name":"number","children":[],"call":[" node source to_i "," node source "," node "," node value to_i "," node value "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  key "," number "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker current":{"type":"method","name":"current","children":[],"call":[" offense_range source "," offense_range "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker prefer":{"type":"method","name":"prefer","children":[],"call":[" symbol "," node value "," node "," node sym_type? "," normalize_str "," node str_type? "," node int_type? "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker offense_range":{"type":"method","name":"offense_range","children":[],"call":[" node parent "," node "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" allowed_symbol? ! "," allowed_symbol? "," node int_type? ! "," node int_type? "," node "," custom_http_status_code? ! "," custom_http_status_code? "," node sym_type? ! "," node sym_type? "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker current":{"type":"method","name":"current","children":[],"call":[" symbol inspect "," symbol "]}," RuboCop Cop RSpec Rails HttpStatus NumericStyleChecker prefer":{"type":"method","name":"prefer","children":[],"call":[" number to_s "," number "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker current":{"type":"method","name":"current","children":[],"call":[" number inspect "," number "," node value inspect "," node value "," node "]}," RuboCop Cop RSpec Rails HttpStatus SymbolicStyleChecker prefer":{"type":"method","name":"prefer","children":[],"call":[" symbol inspect "," symbol "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase custom_http_status_code?":{"type":"method","name":"custom_http_status_code?","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  value? ! "," Rack Utils SYMBOL_TO_STATUS_CODE  value? "," node source to_i "," node source "," node "," node int_type? "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase allowed_symbol?":{"type":"method","name":"allowed_symbol?","children":[],"call":["ALLOWED_STATUSES  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase offense_range":{"type":"method","name":"offense_range","children":[],"call":[" node "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase message":{"type":"method","name":"message","children":[],"call":[" format "," current "," prefer "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop RSpec MatchArray check_populated_array":{"type":"method","name":"check_populated_array","children":[],"call":["corrector replace ","array_contents map join ","array_contents map ","node arguments flat_map ","node arguments "," add_offense ","node first_argument percent_literal? ","node first_argument ","node arguments flat_map  map join ","node arguments flat_map  map "]}," RuboCop Cop RSpec IndexedLet indexed_let?":{"type":"method","name":"indexed_let?","children":[],"call":["INDEX_REGEX  match? "," let_name "," let? ","SUFFIX_INDEX_REGEX  match? "," matches_allowed_pattern? ! "," matches_allowed_pattern? "," let_name to_s "," allowed_identifier? ! "," allowed_identifier? "]}," RuboCop Cop RSpec IndexedLet filter_indexed_lets":{"type":"method","name":"filter_indexed_lets","children":[],"call":["(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (lvar :candidates) :filter)\n          (args\n            (arg :node))\n          (send nil :indexed_let?\n            (lvar :node))) :group_by)\n      (args\n        (arg :node))\n      (send\n        (send\n          (send nil :let_name\n            (lvar :node)) :to_s) :gsub\n        (const nil :INDEX_REGEX)\n        (str \"\"))) :values) :filter) flatten ","lets length > "," cop_config [] "," cop_config ","lets length ","(send\n  (block\n    (send\n      (lvar :candidates) :filter)\n    (args\n      (arg :node))\n    (send nil :indexed_let?\n      (lvar :node))) :group_by) values filter ","(send\n  (block\n    (send\n      (lvar :candidates) :filter)\n    (args\n      (arg :node))\n    (send nil :indexed_let?\n      (lvar :node))) :group_by) values "," let_name to_s gsub "," let_name to_s "," let_name ","(send\n  (lvar :candidates) :filter) group_by "," indexed_let? ","candidates filter ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (lvar :candidates) :filter)\n          (args\n            (arg :node))\n          (send nil :indexed_let?\n            (lvar :node))) :group_by)\n      (args\n        (arg :node))\n      (send nil :let_name_stripped_index\n        (lvar :node))) :values) :filter) flatten "," let_name_stripped_index "]}," RuboCop Cop RSpec IndexedLet on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," filter_indexed_lets each "," filter_indexed_lets ","node body "," spec_group? "]}," RuboCop Cop RSpec ContainExactly autocorrect_for_populated_array":{"type":"method","name":"autocorrect_for_populated_array","children":[],"call":["corrector replace ","arrays map join ","arrays map ","splat_node children first ","splat_node children ","node arguments map ","node arguments "]}," RuboCop Cop RSpec ContainExactly check_populated_collection":{"type":"method","name":"check_populated_collection","children":[],"call":[" autocorrect_for_populated_array "," add_offense ","node each_child_node all? ","node each_child_node "]}," RuboCop Cop RSpec BeEmpty on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," expect_array_matcher? ","node parent "]}," RuboCop Cop RSpec IndexedLet let_name_stripped_index":{"type":"method","name":"let_name_stripped_index","children":[],"call":[" let_name to_s gsub "," let_name to_s "," let_name "]}," RuboCop Cop RSpec ChangeByZero message":{"type":"method","name":"message","children":[],"call":[" format ","change_node method_name "]}," RuboCop Cop RSpec ChangeByZero register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect "," add_offense "," message ","node source_range "," autocorrect_compound "," message_compound "," compound_expectations? "]}," RuboCop Cop RSpec ReceiveMessages requires_quotes?":{"type":"method","name":"requires_quotes?","children":[],"call":["value match? "]}," RuboCop Cop RSpec ReceiveMessages heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node heredoc? ","node dstr_type? ","node str_type? "]}," RuboCop Cop RSpec ReceiveMessages item_range_by_whole_lines":{"type":"method","name":"item_range_by_whole_lines","children":[],"call":[" range_by_whole_lines ","item source_range "]}," RuboCop Cop RSpec ReceiveMessages replace_to_receive_messages":{"type":"method","name":"replace_to_receive_messages","children":[],"call":["corrector replace ","args join "," receive_node "]}," RuboCop Cop RSpec ReceiveMessages message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop RSpec ReceiveMessages register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove "," item_range_by_whole_lines "," replace_to_receive_messages ","item loc line < ","repeated_lines min ","item loc line ","item loc "," add_offense "," message ","item loc line > ","repeated_lines max "]}," RuboCop Cop RSpec ReceiveMessages normalize_return_arg":{"type":"method","name":"normalize_return_arg","children":[],"call":["return_arg source ","return_arg braces? ! ","return_arg braces? ","return_arg hash_type? "]}," RuboCop Cop RSpec ReceiveMessages normalize_receive_arg":{"type":"method","name":"normalize_receive_arg","children":[],"call":[" requires_quotes? "]}," RuboCop Cop RSpec ReceiveMessages arguments":{"type":"method","name":"arguments","children":[],"call":[" normalize_return_arg "," normalize_receive_arg "," receive_and_return_argument ","items map "]}," RuboCop Cop RSpec ReceiveMessages uniq_items":{"type":"method","name":"uniq_items","children":[],"call":[" same_line? ! "," same_line? "," receive_arg first == "," receive_arg first "," receive_arg ","items none? ","items select "]}," RuboCop Cop RSpec ReceiveMessages add_repeated_lines_and_arguments":{"type":"method","name":"add_repeated_lines_and_arguments","children":[],"call":[" arguments ","repeated_lines - ","item first_line ","uniq_items map "," uniq_items ","uniq_items map  - "," uniq_items  map ","  uniq_items  "]}," RuboCop Cop RSpec ReceiveMessages repeated_receive_message":{"type":"method","name":"repeated_receive_message","children":[],"call":[" add_repeated_lines_and_arguments ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :allow_receive_message?\n      (lvar :child))) :group_by) values reject flat_map ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :allow_receive_message?\n      (lvar :child))) :group_by) values reject ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :children) :select)\n    (args\n      (arg :child))\n    (send nil :allow_receive_message?\n      (lvar :child))) :group_by) values "," allow_argument ","(send\n  (send\n    (lvar :node) :children) :select) group_by "," allow_receive_message? ","node children select ","node children "]}," RuboCop Cop RSpec ReceiveMessages on_begin":{"type":"method","name":"on_begin","children":[],"call":[" register_offense ","repeated_lines empty? "," repeated_receive_message each "," repeated_receive_message "]}," RuboCop Cop RSpec Rails NegationBeValid replaced_matcher":{"type":"method","name":"replaced_matcher","children":[],"call":[" style "]}," RuboCop Cop RSpec Rails NegationBeValid replaced_runner":{"type":"method","name":"replaced_runner","children":[],"call":[" style "]}," RuboCop Cop RSpec Rails NegationBeValid message":{"type":"method","name":"message","children":[],"call":[" format "," replaced_matcher "," replaced_runner "]}," RuboCop Cop RSpec Rails NegationBeValid offense_range":{"type":"method","name":"offense_range","children":[],"call":["node parent loc selector with ","node loc selector end_pos ","node loc selector ","node loc ","node parent loc selector ","node parent loc ","node parent "]}," RuboCop Cop RSpec Rails NegationBeValid offense?":{"type":"method","name":"offense?","children":[],"call":[" not_to? "," be_invalid? "," style "]}," RuboCop Cop RSpec Rails NegationBeValid on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," replaced_matcher ","node loc selector ","node loc "," replaced_runner ","node parent loc selector ","node parent loc ","node parent "," add_offense "," message ","node method_name "," offense_range "," offense? "]}," RuboCop Cop RSpec Pending skipped_regular_example_without_body?":{"type":"method","name":"skipped_regular_example_without_body?","children":[],"call":["node block_node ! ","node block_node "," skippable_example? "]}," RuboCop Cop RSpec LetBeforeExamples autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop RSpec IndexedLet allowed_identifiers":{"type":"method","name":"allowed_identifiers","children":[],"call":[" Array + "," Array "," cop_config fetch "," cop_config "," config for_cop fetch "," config for_cop "," config "]}," RuboCop Cop RSpec IndexedLet cop_config_patterns_values":{"type":"method","name":"cop_config_patterns_values","children":[],"call":[" Array + "," Array "," cop_config fetch "," cop_config "," config for_cop fetch "," config for_cop "," config "]}," RuboCop Cop RSpec ReceiveMessages heredoc_or_splat?":{"type":"method","name":"heredoc_or_splat?","children":[],"call":["node splat_type? ","node heredoc? ","node dstr_type? ","node str_type? "]}," RuboCop Cop RSpec VariableDefinition style_offense?":{"type":"method","name":"style_offense?","children":[],"call":[" symbol? "," style == "," style "," string? "]}," RuboCop Cop RSpec SpecFilePathSuffix correct_path?":{"type":"method","name":"correct_path?","children":[],"call":[" expanded_file_path end_with? "," expanded_file_path "]}," RuboCop Cop RSpec SpecFilePathSuffix on_top_level_example_group":{"type":"method","name":"on_top_level_example_group","children":[],"call":[" add_global_offense "," correct_path? "," example_group? "]}," RuboCop Cop RSpec SpecFilePathFormat filename_ends_with?":{"type":"method","name":"filename_ends_with?","children":[],"call":[" expanded_file_path match? "," expanded_file_path "]}," RuboCop Cop RSpec SpecFilePathFormat ignore_metadata":{"type":"method","name":"ignore_metadata","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop RSpec SpecFilePathFormat ignore_methods?":{"type":"method","name":"ignore_methods?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop RSpec SpecFilePathFormat custom_transform":{"type":"method","name":"custom_transform","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop RSpec SpecFilePathFormat camel_to_snake_case":{"type":"method","name":"camel_to_snake_case","children":[],"call":["string gsub gsub downcase ","string gsub gsub ","string gsub "]}," RuboCop Cop RSpec SpecFilePathFormat expected_path":{"type":"method","name":"expected_path","children":[],"call":["File  join "," camel_to_snake_case "," custom_transform fetch "," custom_transform ","constants map "," namespace + ","constant const_name split ","constant const_name "," namespace "," namespace +  map "]}," RuboCop Cop RSpec SpecFilePathFormat ignore?":{"type":"method","name":"ignore?","children":[],"call":[" ignore_methods? ","(lvar :method_name) ! "]}," RuboCop Cop RSpec SpecFilePathFormat name_pattern":{"type":"method","name":"name_pattern","children":[],"call":["method_name str_content gsub gsub ","method_name str_content gsub ","method_name str_content "," ignore? "]}," RuboCop Cop RSpec SpecFilePathFormat correct_path_pattern":{"type":"method","name":"correct_path_pattern","children":[],"call":["path join ","path << "," name_pattern ","arguments first "," ignore? "," expected_path "]}," RuboCop Cop RSpec SpecFilePathFormat ignore_metadata?":{"type":"method","name":"ignore_metadata?","children":[],"call":[" ignore_metadata values_at include? ","value to_s "," ignore_metadata values_at ","key to_s "," ignore_metadata "," metadata_key_value any? "," metadata_key_value ","arguments any? "]}," RuboCop Cop RSpec SpecFilePathFormat ensure_correct_file_path":{"type":"method","name":"ensure_correct_file_path","children":[],"call":[" add_global_offense "," format ","pattern sub sub sub ","pattern sub sub ","pattern sub "," filename_ends_with? "," correct_path_pattern "," add_offense "," correct_path_pattern  sub sub sub "," correct_path_pattern  sub sub "," correct_path_pattern  sub "," correct_path_ correct_path_pattern  "]}," RuboCop Cop RSpec SpecFilePathFormat on_top_level_example_group":{"type":"method","name":"on_top_level_example_group","children":[],"call":[" ensure_correct_file_path "," ignore_metadata? ","class_name const_type? ! ","class_name const_type? "," example_group_arguments "," top_level_groups one? "," top_level_groups "]}," RuboCop Cop RSpec Rails HttpStatus BeStatusStyleChecker normalize_str":{"type":"method","name":"normalize_str","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  key ","normalized to_i ","normalized match? "," node source delete "," node source "," node ","str to_i ","str match? "," node value to_s "," node value "," node source delete  to_i "," node source delete  match? "," node value to_s  to_i "," node value to_s  match? "]}," RuboCop Cop RSpec Metadata on_matadata_arguments":{"type":"method","name":"on_matadata_arguments","children":[],"call":[" on_metadata ","symbols << "]}," RuboCop Cop RSpec FileHelp expanded_file_path":{"type":"method","name":"expanded_file_path","children":[],"call":["File  expand_path "," processed_source file_path "," processed_source "]}," RuboCop Cop RSpec MetadataStyle remove_symbol":{"type":"method","name":"remove_symbol","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop RSpec MetadataStyle remove_pair_preceding":{"type":"method","name":"remove_pair_preceding","children":[],"call":["corrector remove "," range_with_surrounding_space "," range_with_surrounding_comma ","node source_range "]}," RuboCop Cop RSpec MetadataStyle remove_pair_following":{"type":"method","name":"remove_pair_following","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop RSpec MetadataStyle remove_pair":{"type":"method","name":"remove_pair","children":[],"call":["corrector remove "," remove_pair_preceding ","node right_siblings any? ","node right_siblings "," remove_pair_following ","node left_siblings any? ","node left_siblings ","node parent braces? ! ","node parent braces? ","node parent "]}," RuboCop Cop RSpec MetadataStyle on_metadata_symbol":{"type":"method","name":"on_metadata_symbol","children":[],"call":[" autocorrect_symbol "," add_offense "," message_for_style "," bad_metadata_symbol? "]}," RuboCop Cop RSpec MetadataStyle on_metadata_pair":{"type":"method","name":"on_metadata_pair","children":[],"call":[" autocorrect_pair "," add_offense "," message_for_style "," bad_metadata_pair? "]}," RuboCop Cop RSpec MetadataStyle message_for_style":{"type":"method","name":"message_for_style","children":[],"call":[" format "," style "]}," RuboCop Cop RSpec MetadataStyle insert_symbol":{"type":"method","name":"insert_symbol","children":[],"call":["corrector insert_after ","node key value inspect ","node key value ","node key ","node parent left_sibling ","node parent "]}," RuboCop Cop RSpec MetadataStyle insert_pair_to_non_empty_hash_metadata":{"type":"method","name":"insert_pair_to_non_empty_hash_metadata","children":[],"call":["corrector insert_after "," format_symbol_to_pair_source ","hash_node children last ","hash_node children "]}," RuboCop Cop RSpec MetadataStyle insert_pair_to_empty_hash_metadata":{"type":"method","name":"insert_pair_to_empty_hash_metadata","children":[],"call":["corrector insert_after "," format_symbol_to_pair_source ","hash_node location begin ","hash_node location "]}," RuboCop Cop RSpec MetadataStyle insert_pair_as_last_argument":{"type":"method","name":"insert_pair_as_last_argument","children":[],"call":["corrector insert_before "," format_symbol_to_pair_source ","node parent source_range with ","node parent source_range end_pos ","node parent source_range ","node parent ","node parent location end ","node parent location "]}," RuboCop Cop RSpec MetadataStyle insert_pair":{"type":"method","name":"insert_pair","children":[],"call":[" insert_pair_to_empty_hash_metadata "," insert_pair_to_non_empty_hash_metadata ","hash_node pairs any? ","hash_node pairs "," insert_pair_as_last_argument ","hash_node nil? "," extract_metadata_hash ","node parent "," extract_metadata_hash  pairs any? "," extract_metadata_hash  pairs "," extract_metadata_hash  nil? "]}," RuboCop Cop RSpec MetadataStyle format_symbol_to_pair_source":{"type":"method","name":"format_symbol_to_pair_source","children":[],"call":["node value "]}," RuboCop Cop RSpec MetadataStyle bad_metadata_symbol?":{"type":"method","name":"bad_metadata_symbol?","children":[],"call":[" style == "," style "]}," RuboCop Cop RSpec MetadataStyle bad_metadata_pair?":{"type":"method","name":"bad_metadata_pair?","children":[],"call":[" match_boolean_metadata_pair? "," style == "," style "]}," RuboCop Cop RSpec MetadataStyle autocorrect_symbol":{"type":"method","name":"autocorrect_symbol","children":[],"call":[" insert_pair "," remove_symbol "," match_ambiguous_trailing_metadata? ","node parent "]}," RuboCop Cop RSpec MetadataStyle autocorrect_pair":{"type":"method","name":"autocorrect_pair","children":[],"call":[" insert_symbol "," remove_pair "]}," RuboCop Cop RSpec MetadataStyle on_metadata":{"type":"method","name":"on_metadata","children":[],"call":[" on_metadata_pair ","hash pairs each ","hash pairs "," on_metadata_symbol ","symbols each ","symbols shift ","symbols first "]}," RuboCop Cop RSpec Eq offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","matcher loc selector end_pos ","matcher loc selector ","matcher loc ","matcher source_range begin_pos ","matcher source_range "]}," RuboCop Cop RSpec Eq on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," offense_range "," be_equals "," offense_ offense_range  "]}," RuboCop Cop RSpec EmptyMetadata remove_empty_metadata":{"type":"method","name":"remove_empty_metadata","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop RSpec EmptyMetadata on_metadata":{"type":"method","name":"on_metadata","children":[],"call":[" remove_empty_metadata "," add_offense "]}," RuboCop Cop RSpec Rails HttpStatus StyleCheckerBase current":{"type":"method","name":"current","children":[],"call":[" offense_range source "," offense_range "]}," RuboCop Cop RSpec Metadata on_metadata_arguments":{"type":"method","name":"on_metadata_arguments","children":[],"call":[" on_metadata ","symbols << "]}}