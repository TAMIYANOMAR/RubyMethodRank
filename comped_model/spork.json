{" Spork exec_each_run":{"type":"method","name":"exec_each_run","children":[],"call":[" load "," running! "," block_given? "," each_run_procs clear "," each_run_procs ","p call "," each_run_procs each "," activate_after_each_run_at_exit_hook "]}," Spork exec_prefork":{"type":"method","name":"exec_prefork","children":[],"call":[" load "," preforking! "," using_spork! "]}," Spork state":{"type":"method","name":"state","children":[],"call":[]}," Spork running!":{"type":"method","name":"running!","children":[],"call":[]}," Spork preforking!":{"type":"method","name":"preforking!","children":[],"call":[]}," Spork each_run":{"type":"method","name":"each_run","children":[],"call":["@state != ","@state == "," already_run << "," expanded_caller "," caller first "," caller "," already_run "," already_run include? "," each_run_procs << "," each_run_procs "," already_ran? "," state == "," state "]}," Spork prefork":{"type":"method","name":"prefork","children":[],"call":[" already_preforked << "," expanded_caller "," caller first "," caller "," already_preforked "," already_preforked include? "," already_ran? "]}," Server sig_int_received":{"type":"method","name":"sig_int_received","children":[],"call":[" exit! "," puts "," abort "," running? "," stderr flush "," stderr "," stderr puts "," run_strategy running? "," run_strategy "," stdout puts "," stdout "]}," Server abort":{"type":"method","name":"abort","children":[],"call":["Process  kill ","Signal  list [] ","Signal  list "," running? ","@child abort "," run_strategy abort "," run_strategy "]}," Server restart":{"type":"method","name":"restart","children":[],"call":[" exec ","(lvar :ruby) flatten join ","(lvar :ruby) flatten ","File  join + ","config [] ","File  join "," puts "," stderr flush "," stderr "," stderr puts ","(lvar :File  join + ) flatten join ","(lvar :File  join + ) flatten "]}," Server run_tests":{"type":"method","name":"run_tests","children":[],"call":[" raise "]}," Server preload":{"type":"method","name":"preload","children":[],"call":[]}," Server running?":{"type":"method","name":"running?","children":[],"call":["@child_pid ! ! ","@child_pid ! ","@child running? "]}," Server run":{"type":"method","name":"run","children":[],"call":["Process  wait "," run_tests ","Spork  exec_each_run "," helper_file ","Kernel  fork "," running? ","@child result "," Spork Forker  new "," load "," abort "," test_framework run_tests "," test_framework "," test_framework helper_file "," run_strategy run "," run_strategy "," puts ","argv inspect ","@child  run_strategy run  "]}," Server helper_file":{"type":"method","name":"helper_file","children":[],"call":[" class helper_file "," class "]}," Server port":{"type":"method","name":"port","children":[],"call":[" class port "," class "," class instance_variable_get "," test_framework class default_port "," test_framework class "," test_framework "]}," Server listen":{"type":"method","name":"listen","children":[],"call":["DRb  thread join ","DRb  thread "," puts "," port ","DRb  start_service "," restart "," abort "," trap ","Signal  list has_key? ","Signal  list "," exit! "," sig_int_received "," stderr flush "," stderr "," stderr puts ","@drb_service stop_service ","Spork  each_run "," raise ","Spork  using_spork? ","@run_strategy class == ","@run_strategy class ","@run_strategy assert_ready! ","DRb  start_service  stop_service "]}," Server bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[]}," Server bootstrapped?":{"type":"method","name":"bootstrapped?","children":[],"call":[]}," Server using_rails?":{"type":"method","name":"using_rails?","children":[],"call":[]}," Server load_preference_index":{"type":"method","name":"load_preference_index","children":[],"call":[]}," Server available?":{"type":"method","name":"available?","children":[],"call":[]}," Server supported_servers":{"type":"method","name":"supported_servers","children":[],"call":[]}," Server available_servers":{"type":"method","name":"available_servers","children":[],"call":[]}," Server inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Server server_name":{"type":"method","name":"server_name","children":[],"call":[]}," RSpec run_tests":{"type":"method","name":"run_tests","children":[],"call":[" Spec Runner CommandLine  run "," Spec Runner OptionParser  parse "," RSpec Core CommandLine  new run "," RSpec Core CommandLine  new "," rspec1? "]}," RSpec helper_file":{"type":"method","name":"helper_file","children":[],"call":[]}," RSpec port":{"type":"method","name":"port","children":[],"call":[]}," Cucumber run_tests":{"type":"method","name":"run_tests","children":[],"call":[" Cucumber Cli Main  new execute! "," Cucumber Cli Main  new "," Cucumber Cli Main  step_mother= "," require "," step_mother "," Cucumber StepMother  new "," Cucumber VERSION  < "," Cucumber VERSION  >= "]}," Cucumber step_mother=":{"type":"method","name":"step_mother=","children":[],"call":[]}," Cucumber helper_file":{"type":"method","name":"helper_file","children":[],"call":[]}," Cucumber port":{"type":"method","name":"port","children":[],"call":["(or\n  (send\n    (const nil :ENV) :[]\n    (str \"CUCUMBER_DRB\"))\n  (const nil :CUCUMBER_PORT)) to_i ","ENV  [] "]}," Spork Runner run":{"type":"method","name":"run","children":[],"call":[" server run "," server "," server preload "," server bootstrap "," options [] "," options ","@output puts "," server server_name ","ENV  [] "," server using_rails? ","ENV  []= "," find_server ","Spork Diagnoser  output_results ","Spork Diagnoser  install_hook! "," require ","@error flush ","@error puts "," server entry_point "," server port= ","Spork Server  run ","@options [] ","test_framework preload ","test_framework entry_point ","test_framework bootstrap ","test_framework short_name "," find_test_framework ","test_framework default_port ","run_strategy preload ","Spork RunStrategy  factory ","Spork  using_spork! ","test_framework app_framework short_name ","test_framework app_framework "," find_test_framework  preload "," find_test_framework  entry_point "," find_test_framework  bootstrap "," find_test_framework  short_name "," find_ find_test_framework  "," find_test_framework  default_port ","Spork RunStrategy  factory  preload "," find_test_framework  app_framework short_name "," find_test_framework  app_framework "]}," Spork Runner find_server":{"type":"method","name":"find_server","children":[],"call":["@output puts ","@server nil? ","Spork Server  available_servers first ","Spork Server  available_servers ","@server server_name ","@server helper_file ","@server available? "," supported_servers_text "," options [] inspect "," options [] "," options ","Spork Server  supported_servers first ","Spork Server  supported_servers ","@error puts ","Spork Server  available_servers first  nil? ","Spork Server  supported_servers first  nil? ","Spork Server  available_servers first  server_name ","Spork Server  supported_servers first  server_name ","Spork Server  available_servers first  helper_file ","Spork Server  supported_servers first  helper_file ","Spork Server  available_servers first  available? ","Spork Server  supported_servers first  available? "]}," Spork Runner supported_servers_text":{"type":"method","name":"supported_servers_text","children":[],"call":["text string ","text puts ","(if\n  (send\n    (lvar :s) :available?)\n  (str \"(*) \")\n  (str \"( ) \")) + ","s server_name ","s available? ","(send\n  (send\n    (const\n      (const nil :Spork) :Server) :supported_servers) :sort) map ","a server_name <=> ","b server_name ","a server_name ","Spork Server  supported_servers sort ","Spork Server  supported_servers ","StringIO  new ","StringIO  new  string ","StringIO  new  puts "]}," Spork Runner initialize":{"type":"method","name":"initialize","children":[],"call":[" exit ","@output puts "," supported_servers_text ","@options [] ","opt parse! ","@options []= ","non_option_args [] ","args [] match ! ","args [] match ","args [] ","args select ","opt on ","opt separator ","opt banner= ","OptionParser  new "," raise ","args is_a? "," supported_test_frameworks_text ","@OptionParser  new ions [] ","OptionParser  new  parse! ","@OptionParser  new ions []= ","non_OptionParser  new ion_args [] ","OptionParser  new  on ","OptionParser  new  separator ","OptionParser  new  banner= "]}," Spork expanded_caller":{"type":"method","name":"expanded_caller","children":[],"call":["File  expand_path + + ","File  expand_path + ","File  expand_path ","Dir  pwd ","line gsub ","caller_line split ","expanded [] ","ENV  [] == ","ENV  [] ","expanded []  [] ","File  expand_path + +  [] "]}," Spork already_run":{"type":"method","name":"already_run","children":[],"call":[]}," Spork already_preforked":{"type":"method","name":"already_preforked","children":[],"call":[]}," Cucumber step_mother":{"type":"method","name":"step_mother","children":[],"call":[" class step_mother "," class "]}," Forker running?":{"type":"method","name":"running?","children":[],"call":["Process  getpgid "]}," Forker abort":{"type":"method","name":"abort","children":[],"call":["Process  kill ","Signal  list [] ","Signal  list "," running? "]}," Forker result":{"type":"method","name":"result","children":[],"call":["result_thread raise ","@result nil? ","Process  wait ","Marshal  dump ","Marshal  load ","Thread  new "," running? ","result_thread status == ","result_thread status "," running? ! ","Marshal  load  nil? "]}," Forker initialize":{"type":"method","name":"initialize","children":[],"call":["@child_io close "," exit! ","Marshal  load ","Marshal  dump ","@server_io close ","Kernel  fork ","UNIXSocket  socketpair "," block_given? "," puts ","e backtrace * ","e backtrace ","e inspect ","e status ","e status == "]}," Spork trap_class_method":{"type":"method","name":"trap_class_method","children":[],"call":["klass class_eval ","69 + "," trap_method "]}," Spork trap_method":{"type":"method","name":"trap_method","children":[],"call":["klass class_eval ","58 + "," alias_method_names ","55 + ","62 + ","71 + ","88 + ","89 + ","85 + ","90 + ","84 + "]}," Spork using_spork!":{"type":"method","name":"using_spork!","children":[],"call":[]}," Spork already_ran?":{"type":"method","name":"already_ran?","children":[],"call":[" already_ran << "," expanded_caller "," already_ran "," already_ran include? "]}," Spork each_run_procs":{"type":"method","name":"each_run_procs","children":[],"call":[]}," Spork already_ran":{"type":"method","name":"already_ran","children":[],"call":[]}," Server framework":{"type":"method","name":"framework","children":[],"call":[]}," Spork Runner diagnose":{"type":"method","name":"diagnose","children":[],"call":[]}," Diagnoser output_results":{"type":"method","name":"output_results","children":[],"call":["stdout puts "," loaded_files [] map "," loaded_files [] "," loaded_files ","minimify call "," loaded_files keys sort each "," loaded_files keys sort "," loaded_files keys "," loaded_files keys sort map ","f gsub "," lambda ","Dir  pwd + ","Dir  pwd "]}," Diagnoser remove_hook!":{"type":"method","name":"remove_hook!","children":[],"call":[" undef_method ","Kernel  class_eval ","Kernel  private_instance_methods include? ","Kernel  private_instance_methods ","Kernel  private_instance_methods map include? ","Kernel  private_instance_methods map "]}," Diagnoser subdirectory?":{"type":"method","name":"subdirectory?","children":[],"call":["File  expand_path include? ","File  expand_path ","Dir  pwd "]}," Diagnoser expand_filename":{"type":"method","name":"expand_filename","children":[],"call":["File  file? ","attempted_filename + ","File  expand_path ","(send\n  (array\n    (send\n      (const nil :Dir) :pwd)) :+\n  (gvar :$:)) each ","(send\n  (const nil :Dir) :pwd) + ","Dir  pwd ","attempted_filename +  + ","File  expand_path  + "]}," Diagnoser add_included_file":{"type":"method","name":"add_included_file","children":[],"call":[" loaded_files []= ","f include? ! ","f include? "," caller select "," caller "," loaded_files "," subdirectory? ","File  exist? "," expand_filename "," filter_callstack "," expand_ expand_filename  "]}," Diagnoser install_hook!":{"type":"method","name":"install_hook!","children":[{"type":"method","name":"require","children":[],"asgn":[],"call":[" require_without_diagnoser "," Spork Diagnoser  add_included_file "," caller "]},{"type":"method","name":"load","children":[],"asgn":[],"call":[" load_without_diagnoser "," Spork Diagnoser  add_included_file "," caller "]}],"call":[" load_without_diagnoser "," Spork Diagnoser  add_included_file "," caller "," require_without_diagnoser ","Kernel  class_eval ","File  expand_path ","Dir  pwd "," private "]}," Diagnoser loaded_files":{"type":"method","name":"loaded_files","children":[],"call":[]}," CustomIOStreams ClassMethods stdout":{"type":"method","name":"stdout","children":[],"call":[]}," CustomIOStreams ClassMethods stderr":{"type":"method","name":"stderr","children":[],"call":[]}," CustomIOStreams stdout":{"type":"method","name":"stdout","children":[],"call":[" class stdout "," class "]}," CustomIOStreams stderr":{"type":"method","name":"stderr","children":[],"call":[" class stderr "," class "]}," CustomIOStreams included":{"type":"method","name":"included","children":[],"call":[]}," AppFramework name":{"type":"method","name":"name","children":[],"call":[" class short_name "," class "]}," AppFramework preload":{"type":"method","name":"preload","children":[],"call":[]}," AppFramework bootstrap_required?":{"type":"method","name":"bootstrap_required?","children":[],"call":[" raise "," entry_point nil? "," entry_point "]}," AppFramework short_name":{"type":"method","name":"short_name","children":[],"call":[" class short_name "," class "]}," AppFramework instances":{"type":"method","name":"instances","children":[],"call":[]}," AppFramework []":{"type":"method","name":"[]","children":[],"call":[]}," AppFramework detect_framework":{"type":"method","name":"detect_framework","children":[],"call":[]}," AppFramework detect_framework_name":{"type":"method","name":"detect_framework_name","children":[],"call":[]}," Unknown bootstrap_required?":{"type":"method","name":"bootstrap_required?","children":[],"call":[]}," Rails preload_rails":{"type":"method","name":"preload_rails","children":[],"call":[" ninja_patcher run "," ninja_patcher "," require "," boot_file ","Object  const_set "," version "," Rails Initializer  send "," _helpers module_eval "," _helpers "," block_given? "," add_template_helper "," modules_for_helpers each "," modules_for_helpers ","Spork  each_run "," raise ","LoadError  new ","Missing helper file helpers/%s.rb % "," ActiveSupport Dependencies  search_for_file ","arg + ","arg is_a? ","(send\n  (send\n    (array\n      (lvar :args)) :flatten) :-\n  (array\n    (sym :all))) each ","(lvar :args) flatten - ","(lvar :args) flatten ","AbstractController Helpers ClassMethods  module_eval ","ActiveRecord Base  establish_connection ","Object  const_defined? ","Spork  trap_method "," Rails Engine  class_eval "," Rails  application "," application_file "," exit "," puts ","(str \"^3\") match ! ","(str \"^3\") match "," deprecated_version "," deprecated_version match? ! "," deprecated_version match? "]}," Rails ninja_patcher":{"type":"method","name":"ninja_patcher","children":[],"call":[]}," Rails version":{"type":"method","name":"version","children":[],"call":["(str \"^[^#]*RAILS_GEM_VERSION\\\\s*=\\\\s*[\\\"']([!~<>=]*\\\\s*[\\\\d.]+)[\\\"']\") match "," environment_contents "]}," Rails vendor":{"type":"method","name":"vendor","children":[],"call":["File  expand_path ","Dir  pwd "]}," Rails environment_contents":{"type":"method","name":"environment_contents","children":[],"call":["File  read "," environment_file "]}," Rails boot_file":{"type":"method","name":"boot_file","children":[],"call":["File  join ","File  dirname "," environment_file "]}," Rails environment_file":{"type":"method","name":"environment_file","children":[],"call":["File  expand_path ","Dir  pwd "]}," Rails preload":{"type":"method","name":"preload","children":[],"call":[" require "," environment_file "," preload_rails ","ENV  [] ","STDERR  flush ","STDERR  puts "]}," Rails bootstrap_required?":{"type":"method","name":"bootstrap_required?","children":[],"call":[]}," Rails NinjaPatcher auto_reestablish_db_connection":{"type":"method","name":"auto_reestablish_db_connection","children":[],"call":["ActiveRecord Base  establish_connection "," reset_rails_env ","Spork  each_run ","Object  const_defined? "]}," Rails NinjaPatcher delay_application_controller_loading":{"type":"method","name":"delay_application_controller_loading","children":[],"call":["ApplicationController  send "," require ","File  exist? ","Spork  each_run ","load_paths unshift ","File  expand_path ","File  dirname ","(if\n  (send\n    (const\n      (cbase) :ActiveSupport) :const_defined?\n    (sym :Dependencies))\n  (const\n    (const\n      (cbase) :ActiveSupport) :Dependencies)\n  (const\n    (cbase) :Dependencies)) load_paths "," ActiveSupport  const_defined? ","Dir  pwd ","(dstr\n  (begin\n    (send\n      (const nil :Dir) :pwd))\n  (str \"/app/controllers/application.rb\")) find ","(if\n  (send\n    (const\n      (cbase) :ActiveSupport) :const_defined?\n    (sym :Dependencies))\n  (const\n    (const\n      (cbase) :ActiveSupport) :Dependencies)\n  (const\n    (cbase) :Dependencies)) load_paths  unshift ","(if\n  (send\n    (const\n      (cbase) :ActiveSupport) :const_defined?\n    (sym :Dependencies))\n  (const\n    (const\n      (cbase) :ActiveSupport) :Dependencies)\n  (const\n    (cbase) :Dependencies)) (if\n  (send\n    (const\n      (cbase) :ActiveSupport) :const_defined?\n    (sym :Dependencies))\n  (const\n    (const\n      (cbase) :ActiveSupport) :Dependencies)\n  (const\n    (cbase) :Dependencies)) load_paths  "]}," Rails NinjaPatcher delay_app_preload":{"type":"method","name":"delay_app_preload","children":[],"call":["Spork  trap_method "," Rails Initializer  instance_methods include? "," Rails Initializer  instance_methods "," Rails Initializer  instance_methods map include? "," Rails Initializer  instance_methods map "]}," Rails NinjaPatcher delay_observer_loading":{"type":"method","name":"delay_observer_loading","children":[],"call":["Spork  trap_class_method ","ActionController Dispatcher  respond_to? "," require ","Object  const_defined? ","Spork  trap_method "," Rails Initializer  instance_methods include? "," Rails Initializer  instance_methods "," Rails Initializer  instance_methods map include? "," Rails Initializer  instance_methods map "]}," Rails NinjaPatcher install_hooks":{"type":"method","name":"install_hooks","children":[],"call":[" delay_eager_view_loading "," delay_route_loading "," delay_application_controller_loading "," delay_app_preload "," delay_observer_loading "," auto_reestablish_db_connection "]}," Rails NinjaPatcher run":{"type":"method","name":"run","children":[{"type":"method","name":"load_environment","children":[],"asgn":[{"type":"local","name":"result","value":" load_environment_without_spork "},[" load_environment_without_spork "]],"call":["Spork AppFramework  [] ninja_patcher install_hooks ","Spork AppFramework  [] ninja_patcher ","Spork AppFramework  [] "," load_environment_without_spork "]}],"call":[]}," Spork alias_method_names":{"type":"method","name":"alias_method_names","children":[],"call":["(str \"^(.+?)([\\\\?\\\\!]{0,1})$\") match ","method_name to_s "]}," Server entry_point":{"type":"method","name":"entry_point","children":[],"call":[]}," Server port=":{"type":"method","name":"port=","children":[],"call":[]}," Diagnoser filter_callstack":{"type":"method","name":"filter_callstack","children":[],"call":["(send\n  (lvar :callstack) :map) compact ","line gsub! ","line include? ","callstack map ","callstack pop ","callstack last include? ","callstack last ","callstack empty? "]}," AppFramework entry_point":{"type":"method","name":"entry_point","children":[],"call":[" raise "]}," AppFramework setup_autoload":{"type":"method","name":"setup_autoload","children":[],"call":[]}," Unknown entry_point":{"type":"method","name":"entry_point","children":[],"call":[]}," Rails entry_point":{"type":"method","name":"entry_point","children":[],"call":["File  expand_path ","Dir  pwd "]}," Rails NinjaPatcher delay_eager_view_loading":{"type":"method","name":"delay_eager_view_loading","children":[],"call":["Spork  trap_method "]}," Rails NinjaPatcher delay_route_loading":{"type":"method","name":"delay_route_loading","children":[],"call":["Spork  trap_method "," Rails Initializer  instance_methods include? "," Rails Initializer  instance_methods "," Rails Initializer  instance_methods map include? "," Rails Initializer  instance_methods map "]}," Rails NinjaPatcher reset_rails_env":{"type":"method","name":"reset_rails_env","children":[],"call":["Object  const_set ","ENV  [] dup ","ENV  [] ","Object  send "]}," Rails NinjaPatcher load_environment_with_spork":{"type":"method","name":"load_environment_with_spork","children":[],"call":[" install_hooks "," load_environment_without_spork "," reset_rails_env "]}," Rails NinjaPatcher included":{"type":"method","name":"included","children":[{"type":"method","name":"run_with_spork","children":[],"asgn":[],"call":[]}],"call":[]}," TestFramework framework":{"type":"method","name":"framework","children":[],"call":["Spork AppFramework  detect_framework "]}," TestFramework inherited":{"type":"method","name":"inherited","children":[],"call":[]}," TestFramework entry_point":{"type":"method","name":"entry_point","children":[],"call":[" framework entry_point "," framework "," helper_file "," bootstrapped? "," app_framework entry_point "," app_framework "]}," TestFramework run_tests":{"type":"method","name":"run_tests","children":[],"call":[" raise "]}," TestFramework preload":{"type":"method","name":"preload","children":[],"call":[" load "," helper_file "," stderr flush "," stderr "," stderr puts "," bootstrapped? "," framework preload "," framework "," framework entry_point "," framework short_name "," framework bootstrap_required? ","Spork  exec_prefork "," bootstrapped? ! "," app_framework preload "," app_framework "," app_framework entry_point "," app_framework short_name "," app_framework bootstrap_required? "]}," TestFramework load_preference_index":{"type":"method","name":"load_preference_index","children":[],"call":[]}," TestFramework available?":{"type":"method","name":"available?","children":[],"call":[]}," TestFramework bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[" stderr puts "," helper_file "," stderr ","f puts ","File  open ","File  read "," bootstrapped? "]}," TestFramework bootstrapped?":{"type":"method","name":"bootstrapped?","children":[],"call":["File  read include? ","File  read "," helper_file "]}," TestFramework helper_file":{"type":"method","name":"helper_file","children":[],"call":[" class helper_file "," class "]}," TestFramework short_name":{"type":"method","name":"short_name","children":[],"call":[" class short_name "," class "]}," TestFramework supported_test_frameworks":{"type":"method","name":"supported_test_frameworks","children":[],"call":[]}," TestFramework available_test_frameworks":{"type":"method","name":"available_test_frameworks","children":[],"call":[]}," TestFramework default_port":{"type":"method","name":"default_port","children":[],"call":[" class default_port "," class "]}," TestFramework factory":{"type":"method","name":"factory","children":[],"call":[]}," TestFramework initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TestFramework NoFrameworkMatched message":{"type":"method","name":"message","children":[],"call":[]}," TestFramework NoFrameworkMatched initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TestFramework FrameworkNotAvailable message":{"type":"method","name":"message","children":[],"call":[" e test_framework short_name "," e test_framework "," e "," e test_framework helper_file ","@framework short_name ","@framework helper_file "]}," TestFramework FrameworkNotAvailable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TestFramework NoFrameworksAvailable message":{"type":"method","name":"message","children":[],"call":[]}," Cucumber preload":{"type":"method","name":"preload","children":[],"call":["Spork Server Cucumber  mother_object ","@step_mother load_programming_language "," Cucumber StepMother  new "," require "," preload_legacy_cucumbers "," Cucumber VERSION  < "," Cucumber VERSION  >= ","Spork Server Cucumber  mother_object  load_programming_language "," Cucumber StepMother  new  load_programming_language "]}," Server initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Spork Runner find_test_framework":{"type":"method","name":"find_test_framework","children":[],"call":["@error puts "," supported_test_frameworks_text ","e message ","Spork TestFramework  factory "," options [] "," options "]}," Spork Runner supported_test_frameworks_text":{"type":"method","name":"supported_test_frameworks_text","children":[],"call":["text string ","text puts ","(if\n  (send\n    (lvar :s) :available?)\n  (str \"(*) \")\n  (str \"( ) \")) + ","s short_name ","s available? ","(send\n  (send\n    (const\n      (const nil :Spork) :TestFramework) :supported_test_frameworks) :sort) map ","a short_name <=> ","b short_name ","a short_name ","Spork TestFramework  supported_test_frameworks sort ","Spork TestFramework  supported_test_frameworks ","StringIO  new ","StringIO  new  string ","StringIO  new  puts "]}," Spork detect_and_require":{"type":"method","name":"detect_and_require","children":[],"call":[" require ","Dir  glob each ","Dir  glob ","File  join ","(send\n  (array\n    (const nil :LIBDIR)) :+\n  (send\n    (send\n      (const nil :Gem) :latest_load_paths) :grep\n    (regexp\n      (str \"spork\")\n      (regopt)))) uniq each ","(send\n  (array\n    (const nil :LIBDIR)) :+\n  (send\n    (send\n      (const nil :Gem) :latest_load_paths) :grep\n    (regexp\n      (str \"spork\")\n      (regopt)))) uniq ","(const nil :LIBDIR) + ","Gem  latest_load_paths grep ","Gem  latest_load_paths ","(send\n  (array\n    (send\n      (const nil :LIBDIR) :to_s)) :+\n  (send nil :other_spork_gem_load_paths)) uniq each ","(send\n  (array\n    (send\n      (const nil :LIBDIR) :to_s)) :+\n  (send nil :other_spork_gem_load_paths)) uniq ","(send\n  (const nil :LIBDIR) :to_s) + "," other_spork_gem_load_paths ","LIBDIR  to_s ","path match ","Gem  find_files uniq each ","Gem  find_files uniq ","Gem  find_files ","GemHelpers  find_files_using_latest_spec uniq each ","GemHelpers  find_files_using_latest_spec uniq ","GemHelpers  find_files_using_latest_spec "]}," RunStrategy inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RunStrategy factory":{"type":"method","name":"factory","children":[],"call":[]}," RunStrategy abort":{"type":"method","name":"abort","children":[],"call":[" raise "]}," RunStrategy running?":{"type":"method","name":"running?","children":[],"call":[" raise "]}," RunStrategy cleanup":{"type":"method","name":"cleanup","children":[],"call":[" raise "]}," RunStrategy run":{"type":"method","name":"run","children":[],"call":[" raise "]}," RunStrategy preload":{"type":"method","name":"preload","children":[],"call":[" raise "]}," RunStrategy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Forking running?":{"type":"method","name":"running?","children":[],"call":["@child running? "]}," Forking preload":{"type":"method","name":"preload","children":[],"call":[" test_framework preload "," test_framework "," require "," test_framework entry_point "]}," Forking abort":{"type":"method","name":"abort","children":[],"call":["@child abort "]}," Forking run":{"type":"method","name":"run","children":[],"call":["@child result "," test_framework run_tests "," test_framework ","Spork  exec_each_run "," load "," test_framework helper_file "," Spork Forker  new "," abort "," running? ","Spork  exec_after_each_run ","@child  test_framework run_tests  "]}," Forking available?":{"type":"method","name":"available?","children":[],"call":[]}," Spork using_spork?":{"type":"method","name":"using_spork?","children":[],"call":["@state == "," state != "," state "]}," SporkDebugger EachRunState wait_for_connection":{"type":"method","name":"wait_for_connection","children":[],"call":[" sleep ","Debugger  handler interface nil? ","Debugger  handler interface ","Debugger  handler "]}," SporkDebugger EachRunState start_rdebug_server":{"type":"method","name":"start_rdebug_server","children":[],"call":["Debugger  start ","Debugger  run_init_script ","StringIO  new ","Debugger  start_remote "," find_port ","port + ","Debugger  stop ","Debugger  started? "," find_ find_port  "," find_port  + "]}," SporkDebugger EachRunState signal_spork_server_to_connect_to_rdebug_server":{"type":"method","name":"signal_spork_server_to_connect_to_rdebug_server","children":[],"call":["socket close ","Marshal  load ","Marshal  dump ","TCPSocket  new ","TCPSocket  new  close "]}," SporkDebugger EachRunState prepare_debugger":{"type":"method","name":"prepare_debugger","children":[],"call":[" puts "," wait_for_connection "," signal_spork_server_to_connect_to_rdebug_server "," start_rdebug_server "]}," SporkDebugger EachRunState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SporkDebugger PreloadState connect_rdebug_client":{"type":"method","name":"connect_rdebug_client","children":[],"call":[" puts ","Debugger  start_client "]}," SporkDebugger PreloadState main_loop":{"type":"method","name":"main_loop","children":[],"call":[" puts ","socket close "," connect_rdebug_client ","Marshal  dump ","Marshal  load ","@tcp_service accept ","e class ","@tcp_service accept  close "]}," SporkDebugger PreloadState listen_for_connection_signals":{"type":"method","name":"listen_for_connection_signals","children":[],"call":[" main_loop ","Thread  new ","TCPServer  new "]}," SporkDebugger PreloadState install_hook":{"type":"method","name":"install_hook","children":[{"type":"method","name":"debugger","children":[],"asgn":[],"call":[" debugger_without_spork_hook ","SporkDebugger  instance prepare_debugger ","SporkDebugger  instance "]}],"call":[" debugger_without_spork_hook ","SporkDebugger  instance prepare_debugger ","SporkDebugger  instance ","Kernel  class_eval "]}," SporkDebugger PreloadState transition_to_each_run_state":{"type":"method","name":"transition_to_each_run_state","children":[],"call":["SporkDebugger EachRunState  new "," finish "]}," SporkDebugger PreloadState finish":{"type":"method","name":"finish","children":[],"call":["@tcp_service close "]}," SporkDebugger PreloadState initialize":{"type":"method","name":"initialize","children":[],"call":[" listen_for_connection_signals "," install_hook ","Spork  each_run "]}," SporkDebugger NetworkHelpers find_port":{"type":"method","name":"find_port","children":[],"call":["server close ","TCPServer  new ","TCPServer  new  close "]}," SporkDebugger initialize":{"type":"method","name":"initialize","children":[],"call":["Spork  send unshift ","@state transition_to_each_run_state "," lambda ","Spork  send ","SporkDebugger PreloadState  new ","@state transition_to_each_run_state  transition_to_each_run_state ","SporkDebugger PreloadState  new  transition_to_each_run_state "]}," SporkDebugger run":{"type":"method","name":"run","children":[],"call":[" new "]}," Spork other_spork_gem_load_paths":{"type":"method","name":"other_spork_gem_load_paths","children":[],"call":["g match ! ","g match ","Gem  latest_load_paths grep select ","Gem  latest_load_paths grep ","Gem  latest_load_paths ","Spork GemHelpers  latest_load_paths grep select ","Spork GemHelpers  latest_load_paths grep ","Spork GemHelpers  latest_load_paths "]}," ApplicationController reapply_inheritance!":{"type":"method","name":"reapply_inheritance!","children":[],"call":["descendant reapply_inheritance! ","descendant respond_to? ","descendant send ","descendant master_helper_module send "," master_helper_module ","descendant master_helper_module ","@_descendants each "," Array each "," Array "]}," ApplicationController inherited":{"type":"method","name":"inherited","children":[],"call":["(or-asgn\n  (ivasgn :@_descendants)\n  (array)) << ","klass send ","klass master_helper_module send "," master_helper_module ","klass master_helper_module ","Spork  each_run "]}," Spork after_each_run_procs":{"type":"method","name":"after_each_run_procs","children":[],"call":[]}," Spork activate_after_each_run_at_exit_hook":{"type":"method","name":"activate_after_each_run_at_exit_hook","children":[{"type":"method","name":"at_exit","children":[],"asgn":[],"call":["Spork  after_each_run "]}],"call":["Spork  after_each_run ","Kernel  module_eval "]}," Spork exec_after_each_run":{"type":"method","name":"exec_after_each_run","children":[],"call":[" after_each_run_procs clear "," after_each_run_procs ","p call "," after_each_run_procs each "," after_each_run_procs pop "," after_each_run_ after_each_run_procs pop rocs clear "," after_each_run_ after_each_run_procs pop rocs "," after_each_run_procs pop  call "," after_each_run_ after_each_run_procs pop rocs each "," after_each_run_ after_each_run_procs pop rocs  after_each_run_procs pop o after_each_run_procs pop  "]}," Spork after_each_run":{"type":"method","name":"after_each_run","children":[],"call":[" after_each_run_procs << "," after_each_run_procs "," already_ran? "," caller first "," caller "]}," Magazine running?":{"type":"method","name":"running?","children":[],"call":[]}," Magazine preload":{"type":"method","name":"preload","children":[],"call":[]}," Magazine abort":{"type":"method","name":"abort","children":[],"call":[" kill_all_processes "]}," Magazine slave_count":{"type":"method","name":"slave_count","children":[],"call":["ts read_all size ","ts read_all ","Rinda RingFinger  primary ","DRb  start_service ","Rinda RingFinger  primary  read_all size ","Rinda RingFinger  primary  read_all "]}," Magazine kill_all_processes":{"type":"method","name":"kill_all_processes","children":[],"call":["$stdout flush "," puts ","Process  kill ","@pids each "," kill_slave "," system "," windows? "]}," Magazine restart_slave":{"type":"method","name":"restart_slave","children":[],"call":[" start_slave ","Process  kill ","@pids [] "," kill_slave ","@@pids [] s [] "]}," Magazine run":{"type":"method","name":"run","children":[],"call":["$stdout flush "," puts "," restart_slave ","slave id_num ","slave run ","tuple [] ","ts take ","stdout flush "," print ","ts read_all size > ","ts read_all size ","ts read_all ","Rinda RingFinger  primary ","DRb  start_service "," sleep ","Timeout  timeout "," puRinda RingFinger  primary  "," restart_tuple []  ","slave tuple [] _num ","tuple []  id_num ","tuple []  run ","ts take  [] ","Rinda RingFinger  primary  take ","Rinda RingFinger  primary  read_all size > ","Rinda RingFinger  primary  read_all size ","Rinda RingFinger  primary  read_all "]}," Magazine available?":{"type":"method","name":"available?","children":[],"call":[]}," Magazine start_slave":{"type":"method","name":"start_slave","children":[],"call":["@pids []= ","Process  create process_id ","Process  create ","@test_framework short_name ","Dir  pwd "," spawn_process ","Gem  ruby "]}," Magazine fill_slave_pool":{"type":"method","name":"fill_slave_pool","children":[],"call":["$stdout flush "," puts "," start_slave ","Slave_Id_Range  each "]}," Magazine start_Rinda_ringserver":{"type":"method","name":"start_Rinda_ringserver","children":[],"call":["Process  create process_id ","Process  create "," spawn_process ","Gem  ruby "]}," Magazine initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," kill_all_processes "," fill_slave_pool "," sleep ","@pids << "," start_Rinda_ringserver ","File  join ","File  expand_path ","File  dirname "]}," Magazine slave_max":{"type":"method","name":"slave_max","children":[],"call":["Slave_Id_Range  to_a size ","Slave_Id_Range  to_a "]}," MagazineSlave preload":{"type":"method","name":"preload","children":[],"call":["@test_framework preload "]}," MagazineSlave run":{"type":"method","name":"run","children":[],"call":["stdout flush "," puts ","@test_framework run_tests "," load ","@test_framework helper_file ","Spork  exec_each_run "]}," MagazineSlave initialize":{"type":"method","name":"initialize","children":[],"call":[" preload ","Spork TestFramework  factory "]}," Magazine spawn_process":{"type":"method","name":"spawn_process","children":[],"call":["Process  spawn ","Process  create process_id ","Process  create ","RUBY_VERSION  < ","io pid "," puts ","io read ","Thread  new ","IO  popen ","Dir  chdir ","RUBY_PLATFORM  =~ ","IO  popen  pid ","IO  popen  read "]}," Padrino boot_contents":{"type":"method","name":"boot_contents","children":[],"call":["File  read "," boot_file "]}," Padrino entry_point":{"type":"method","name":"entry_point","children":[],"call":["File  expand_path ","Dir  pwd "]}," Padrino preload":{"type":"method","name":"preload","children":[],"call":[" Padrino  reload! ","Spork  each_run "," require "," boot_file ","ENV  [] ","STDERR  flush ","STDERR  puts "]}," RSpec rspec1?":{"type":"method","name":"rspec1?","children":[],"call":["(const nil :RSpec) ! "]}," Cucumber preload_legacy_cucumbers":{"type":"method","name":"preload_legacy_cucumbers","children":[],"call":["Spork Server Cucumber  mother_object ","@step_mother load_programming_language "," Cucumber Runtime  new ","Spork Server Cucumber  mother_object  load_programming_language "," Cucumber Runtime  new  load_programming_language "]}," RunStrategy assert_ready!":{"type":"method","name":"assert_ready!","children":[],"call":[" raise "]}," Magazine assert_ready!":{"type":"method","name":"assert_ready!","children":[],"call":[]}," Magazine kill_slave":{"type":"method","name":"kill_slave","children":[],"call":["Process  kill "," system "," windows? "]}," Magazine windows?":{"type":"method","name":"windows?","children":[],"call":["ENV  [] == ","ENV  [] "]}," Forking assert_ready!":{"type":"method","name":"assert_ready!","children":[],"call":[" raise ","Spork  using_spork? "]}," GemHelpers latest_load_paths":{"type":"method","name":"latest_load_paths","children":[],"call":["STDERR  puts ","(send\n  (send\n    (block\n      (send\n        (send\n          (const nil :Dir) :[]\n          (send\n            (dstr\n              (str \"{\")\n              (begin\n                (send\n                  (send\n                    (const nil :Gem) :path) :join\n                  (str \",\")))\n              (str \"}\")) :+\n            (str \"/gems/*\"))) :inject\n        (hash))\n      (args\n        (arg :h)\n        (arg :f))\n      (begin\n        (lvasgn :gem_path\n          (send\n            (const nil :GemPath) :new\n            (lvar :f)))\n        (if\n          (send\n            (lvar :h) :[]\n            (send\n              (lvar :gem_path) :name))\n          (if\n            (send\n              (lvar :gem_path) :>\n              (send\n                (lvar :h) :[]\n                (send\n                  (lvar :gem_path) :name)))\n            (send\n              (lvar :h) :[]=\n              (send\n                (lvar :gem_path) :name)\n              (lvar :gem_path)) nil)\n          (send\n            (lvar :h) :[]=\n            (send\n              (lvar :gem_path) :name)\n            (lvar :gem_path)))\n        (lvar :h))) :values) :map) sort uniq ","(send\n  (send\n    (block\n      (send\n        (send\n          (const nil :Dir) :[]\n          (send\n            (dstr\n              (str \"{\")\n              (begin\n                (send\n                  (send\n                    (const nil :Gem) :path) :join\n                  (str \",\")))\n              (str \"}\")) :+\n            (str \"/gems/*\"))) :inject\n        (hash))\n      (args\n        (arg :h)\n        (arg :f))\n      (begin\n        (lvasgn :gem_path\n          (send\n            (const nil :GemPath) :new\n            (lvar :f)))\n        (if\n          (send\n            (lvar :h) :[]\n            (send\n              (lvar :gem_path) :name))\n          (if\n            (send\n              (lvar :gem_path) :>\n              (send\n                (lvar :h) :[]\n                (send\n                  (lvar :gem_path) :name)))\n            (send\n              (lvar :h) :[]=\n              (send\n                (lvar :gem_path) :name)\n              (lvar :gem_path)) nil)\n          (send\n            (lvar :h) :[]=\n            (send\n              (lvar :gem_path) :name)\n            (lvar :gem_path)))\n        (lvar :h))) :values) :map) sort ","File  expand_path ","gem_path path ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (dstr\n        (str \"{\")\n        (begin\n          (send\n            (send\n              (const nil :Gem) :path) :join\n            (str \",\")))\n        (str \"}\")) :+\n      (str \"/gems/*\"))) :inject\n  (hash)) values map ","(send\n  (send\n    (const nil :Dir) :[]\n    (send\n      (dstr\n        (str \"{\")\n        (begin\n          (send\n            (send\n              (const nil :Gem) :path) :join\n            (str \",\")))\n        (str \"}\")) :+\n      (str \"/gems/*\"))) :inject\n  (hash)) values ","h []= ","gem_path name ","gem_path > ","h [] ","GemPath  new ","Dir  [] inject ","Dir  [] ","(str \"{\") + ","Gem  path join ","Gem  path ","Gem  respond_to? ","(send\n  (gvar :$LOAD_PATH) :map) uniq ","$LOAD_PATH map ","Gem  paths path join ","Gem  paths path ","Gem  paths ","$LOAD_PATH uniq ","(send\n  (send\n    (block\n      (send\n        (send\n          (const nil :Dir) :[]\n          (send\n            (dstr\n              (str \"{\")\n              (begin\n                (send\n                  (send\n                    (const nil :Gem) :path) :join\n                  (str \",\")))\n              (str \"}\")) :+\n            (str \"/gems/*\"))) :inject\n        (hash))\n      (args\n        (arg :h)\n        (arg :f))\n      (begin\n        (lvasgn :GemPath  new \n          (send\n            (const nil :GemPath) :new\n            (lvar :f)))\n        (if\n          (send\n            (lvar :h) :[]\n            (send\n              (lvar :GemPath  new ) :name))\n          (if\n            (send\n              (lvar :GemPath  new ) :>\n              (send\n                (lvar :h) :[]\n                (send\n                  (lvar :GemPath  new ) :name)))\n            (send\n              (lvar :h) :[]=\n              (send\n                (lvar :GemPath  new ) :name)\n              (lvar :GemPath  new )) nil)\n          (send\n            (lvar :h) :[]=\n            (send\n              (lvar :GemPath  new ) :name)\n            (lvar :GemPath  new )))\n        (lvar :h))) :values) :map) sort uniq ","(send\n  (send\n    (block\n      (send\n        (send\n          (const nil :Dir) :[]\n          (send\n            (dstr\n              (str \"{\")\n              (begin\n                (send\n                  (send\n                    (const nil :Gem) :path) :join\n                  (str \",\")))\n              (str \"}\")) :+\n            (str \"/gems/*\"))) :inject\n        (hash))\n      (args\n        (arg :h)\n        (arg :f))\n      (begin\n        (lvasgn :GemPath  new \n          (send\n            (const nil :GemPath) :new\n            (lvar :f)))\n        (if\n          (send\n            (lvar :h) :[]\n            (send\n              (lvar :GemPath  new ) :name))\n          (if\n            (send\n              (lvar :GemPath  new ) :>\n              (send\n                (lvar :h) :[]\n                (send\n                  (lvar :GemPath  new ) :name)))\n            (send\n              (lvar :h) :[]=\n              (send\n                (lvar :GemPath  new ) :name)\n              (lvar :GemPath  new )) nil)\n          (send\n            (lvar :h) :[]=\n            (send\n              (lvar :GemPath  new ) :name)\n            (lvar :GemPath  new )))\n        (lvar :h))) :values) :map) sort ","GemPath  new  path ","GemPath  new  name ","GemPath  new  > "]}," GemHelpers GemPath <=>":{"type":"method","name":"<=>","children":[],"call":["@version_numbers <=> ","other version_numbers "," raise ","other name "," name "," name == "]}," GemHelpers GemPath initialize":{"type":"method","name":"initialize","children":[],"call":["@version split map ","@version split ","File  basename scan flatten ","File  basename scan ","File  basename "]}," Rails deprecated_version":{"type":"method","name":"deprecated_version","children":[],"call":["(str \"^[^#]*RAILS_GEM_VERSION\\\\s*=\\\\s*[\\\"']([!~<>=]*\\\\s*[\\\\d.]+)[\\\"']\") match "," environment_contents "]}," Rails application_file":{"type":"method","name":"application_file","children":[],"call":["File  join ","File  dirname "," environment_file "]}," TestFramework app_framework":{"type":"method","name":"app_framework","children":[],"call":["Spork AppFramework  detect_framework "]}," AppFramework present?":{"type":"method","name":"present?","children":[],"call":[]}," AppFramework detect_framework_class":{"type":"method","name":"detect_framework_class","children":[],"call":[]}," AppFramework inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Unknown present?":{"type":"method","name":"present?","children":[],"call":[]}," GemHelpers find_files_using_latest_spec":{"type":"method","name":"find_files_using_latest_spec","children":[],"call":["STDERR  puts ","(send\n  (send nil :latest_specs) :map) flatten ","spec matches_for_glob "," latest_specs map "," latest_specs ","Gem  respond_to? ","Gem  find_files "]}," GemHelpers latest_specs":{"type":"method","name":"latest_specs","children":[],"call":["(send\n  (const\n    (const nil :Gem) :Specification) :inject\n  (hash)) values ","h []= ","spec name ","spec version > ","h [] version ","h [] ","spec version ","h [] nil? ","Gem Specification  inject "]}," Rinda RingFinger lookup_ring_any":{"type":"method","name":"lookup_ring_any","children":[],"call":["@rings push ","queue pop "," raise ","@primary nil? ","queue push "," lookup_ring ","Thread  new ","Queue  new ","Queue  new  pop ","queue pop  nil? ","Queue  new  push "]}}