{" Kernel ensure_rb_extension":{"type":"method","name":"ensure_rb_extension","children":[],"call":["aString sub "]}," Kernel already_loaded?":{"type":"method","name":"already_loaded?","children":[],"call":["(send\n  (gvar :$\") :detect) != ","e =~ ","$\" detect ","Regexp  new ","^ + + ","^ + "]}," Kernel get_resource":{"type":"method","name":"get_resource","children":[],"call":["zl get_input_stream ","ZipList  new ","$: grep ","ZipList  new  get_input_stream "]}," Kernel zip_require":{"type":"method","name":"zip_require","children":[],"call":["$\" << "," eval ","zis read "," get_resource "," ensure_rb_extension "," already_loaded? "]}," Kernel require":{"type":"method","name":"require","children":[],"call":[" oldRequire "," zip_require "]}," ZipList get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":[" raise ","(str \"No matching entry found in zip files '\") + ","@zipFileList join ","zf get_input_stream ","Zip ZipFile  open ","@zipFileList each "]}," ZipList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem ZipFileNameMapper expand_to_entry":{"type":"method","name":"expand_to_entry","children":[],"call":[" expand_path lchop "," expand_path "," expand_path [] "]}," Zip ZipFileSystem ZipFileNameMapper expand_path":{"type":"method","name":"expand_path","children":[],"call":["expanded empty? ","expanded gsub! ","@pwd ensure_end + ","@pwd ensure_end ","aPath starts_with ","aPath start_with? "," File  join ","@pwd ensure_end +  empty? "," File  join  empty? ","@pwd ensure_end +  gsub! "," File  join  gsub! "]}," Zip ZipFileSystem ZipFileNameMapper each":{"type":"method","name":"each","children":[],"call":["/ + ","e to_s chomp ","e to_s ","@zipFile each "]}," Zip ZipFileSystem ZipFileNameMapper mkdir":{"type":"method","name":"mkdir","children":[],"call":["@zipFile mkdir "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper rename":{"type":"method","name":"rename","children":[],"call":["@zipFile rename "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper remove":{"type":"method","name":"remove","children":[],"call":["@zipFile remove "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper read":{"type":"method","name":"read","children":[],"call":["@zipFile read "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["@zipFile get_output_stream "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["@zipFile get_input_stream "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper get_entry":{"type":"method","name":"get_entry","children":[],"call":["@zipFile get_entry "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper find_entry":{"type":"method","name":"find_entry","children":[],"call":["@zipFile find_entry "," expand_to_entry "]}," Zip ZipFileSystem ZipFileNameMapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem ZipFsDirIterator tell":{"type":"method","name":"tell","children":[],"call":[" raise ","@fileNames == "]}," Zip ZipFileSystem ZipFsDirIterator seek":{"type":"method","name":"seek","children":[],"call":[" raise ","@fileNames == "]}," Zip ZipFileSystem ZipFsDirIterator rewind":{"type":"method","name":"rewind","children":[],"call":[" raise ","@fileNames == "]}," Zip ZipFileSystem ZipFsDirIterator read":{"type":"method","name":"read","children":[],"call":["@fileNames [] ","(op-asgn\n  (ivasgn :@index) :+\n  (int 1)) - "," raise ","@fileNames == "]}," Zip ZipFileSystem ZipFsDirIterator each":{"type":"method","name":"each","children":[],"call":["@fileNames each "," raise ","@fileNames == "]}," Zip ZipFileSystem ZipFsDirIterator close":{"type":"method","name":"close","children":[],"call":[]}," Zip ZipFileSystem ZipFsDirIterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem ZipFsDir chroot":{"type":"method","name":"chroot","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsDir mkdir":{"type":"method","name":"mkdir","children":[],"call":["@mappedZip mkdir "]}," Zip ZipFileSystem ZipFsDir delete":{"type":"method","name":"delete","children":[],"call":["@mappedZip remove "," raise ","@file stat directory? ","@file stat "]}," Zip ZipFileSystem ZipFsDir foreach":{"type":"method","name":"foreach","children":[],"call":["match [] ","match == ","subDirEntriesRegex match ","@mappedZip each ","Regexp  new ","@file expand_path ensure_end ","@file expand_path "," raise ","@file stat directory? ","@file stat ","Regexp  escape ","path << ","path end_with? ","subDirEntriesRegex match  [] ","subDirEntriesRegex match  == ","subDirEntriesRegex subDirEntriesRegex match  ","Regexp  new  match ","@file expand_@file expand_path ensure_end  ensure_end ","@file expand_Regexp  escape  ensure_end ","@file expand_@file expand_path  ensure_end ","@file expand_@file expand_path ensure_end  ","@file expand_Regexp  escape  ","@file expand_@file expand_path  ","@file expand_path ensure_end  << ","Regexp  escape  << ","@file expand_path  << ","@file expand_path ensure_end  end_with? ","Regexp  escape  end_with? ","@file expand_path  end_with? "]}," Zip ZipFileSystem ZipFsDir entries":{"type":"method","name":"entries","children":[],"call":["entries << "," foreach "]}," Zip ZipFileSystem ZipFsDir chdir":{"type":"method","name":"chdir","children":[],"call":["@mappedZip pwd= ","@file expand_path "," raise ","@file stat directory? ","@file stat "]}," Zip ZipFileSystem ZipFsDir pwd":{"type":"method","name":"pwd","children":[],"call":["@mappedZip pwd "]}," Zip ZipFileSystem ZipFsDir open":{"type":"method","name":"open","children":[],"call":["dirIt close "," block_given? "," new "," new  close "]}," Zip ZipFileSystem ZipFsDir new":{"type":"method","name":"new","children":[],"call":["ZipFsDirIterator  new "," entries "]}," Zip ZipFileSystem ZipFsDir initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile expand_path":{"type":"method","name":"expand_path","children":[],"call":["@mappedZip expand_path "]}," Zip ZipFileSystem ZipFsFile rename":{"type":"method","name":"rename","children":[],"call":["@mappedZip rename "]}," Zip ZipFileSystem ZipFsFile delete":{"type":"method","name":"delete","children":[],"call":["@mappedZip remove "," raise "," directory? ","args each "]}," Zip ZipFileSystem ZipFsFile foreach":{"type":"method","name":"foreach","children":[],"call":["is each_line "," open "]}," Zip ZipFileSystem ZipFsFile popen":{"type":"method","name":"popen","children":[],"call":["File  popen "]}," Zip ZipFileSystem ZipFsFile read":{"type":"method","name":"read","children":[],"call":["@mappedZip read "]}," Zip ZipFileSystem ZipFsFile readlines":{"type":"method","name":"readlines","children":[],"call":["is readlines "," open "]}," Zip ZipFileSystem ZipFsFile stat":{"type":"method","name":"stat","children":[],"call":["ZipFsStat  new "," raise "," exists? ! "," exists? "]}," Zip ZipFileSystem ZipFsFile pipe":{"type":"method","name":"pipe","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsFile link":{"type":"method","name":"link","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsFile symlink":{"type":"method","name":"symlink","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsFile readlink":{"type":"method","name":"readlink","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsFile ftype":{"type":"method","name":"ftype","children":[],"call":["@mappedZip get_entry directory? ","@mappedZip get_entry "]}," Zip ZipFileSystem ZipFsFile socket?":{"type":"method","name":"socket?","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile symlink?":{"type":"method","name":"symlink?","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile chardev?":{"type":"method","name":"chardev?","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile blockdev?":{"type":"method","name":"blockdev?","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile pipe?":{"type":"method","name":"pipe?","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ctime":{"type":"method","name":"ctime","children":[],"call":["e extra [] ctime ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] ctim get_entry  "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile atime":{"type":"method","name":"atime","children":[],"call":["e extra [] atime ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] atim get_entry  "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile mtime":{"type":"method","name":"mtime","children":[],"call":["@mappedZip get_entry mtime ","@mappedZip get_entry "]}," Zip ZipFileSystem ZipFsFile utime":{"type":"method","name":"utime","children":[],"call":[" get_entry time= "," get_entry ","fileNames each "]}," Zip ZipFileSystem ZipFsFile join":{"type":"method","name":"join","children":[],"call":[" File  join "]}," Zip ZipFileSystem ZipFsFile split":{"type":"method","name":"split","children":[],"call":[" File  split "]}," Zip ZipFileSystem ZipFsFile basename":{"type":"method","name":"basename","children":[],"call":[" File  basename "]}," Zip ZipFileSystem ZipFsFile dirname":{"type":"method","name":"dirname","children":[],"call":[" File  dirname "]}," Zip ZipFileSystem ZipFsFile file?":{"type":"method","name":"file?","children":[],"call":["entry file? ","entry != ","@mappedZip find_entry ","@mappedZip find_entry  file? ","@mappedZip find_entry  != ","@mappedZip find_@mappedZip find_entry  "]}," Zip ZipFileSystem ZipFsFile zero?":{"type":"method","name":"zero?","children":[],"call":["sz == "," size "," size  == "]}," Zip ZipFileSystem ZipFsFile chmod":{"type":"method","name":"chmod","children":[],"call":["filenames size ","e externalFileAttributes= ","modeInt << ","e fstype= "," get_entry ","filenames each ","e dirty= ","e unix_perms= ","fil get_entry nam get_entry s siz get_entry  "," get_entry   get_entry xt get_entry rnalFil get_entry Attribut get_entry s= ","mod get_entry Int << "," get_entry  fstyp get_entry = "," g get_entry t_ get_entry ntry ","fil get_entry nam get_entry s  get_entry ach "," get_entry  dirty= "," get_entry  unix_p get_entry rms= "]}," Zip ZipFileSystem ZipFsFile chown":{"type":"method","name":"chown","children":[],"call":["filenames size ","e extra [] gid= ","e extra [] ","e extra ","e extra [] uid= ","e extra create ","e extra member? "," get_entry ","filenames each ","fil get_entry nam get_entry s siz get_entry  "," get_entry   get_entry xtra [] gid= "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra [] uid= "," get_entry   get_entry xtra cr get_entry at get_entry  "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry ","fil get_entry nam get_entry s  get_entry ach "]}," Zip ZipFileSystem ZipFsFile size?":{"type":"method","name":"size?","children":[],"call":["entry size ","entry directory? ","entry == ","@mappedZip find_entry ","@mappedZip find_entry  size ","@mappedZip find_entry  directory? ","@mappedZip find_entry  == ","@mappedZip find_@mappedZip find_entry  "]}," Zip ZipFileSystem ZipFsFile size":{"type":"method","name":"size","children":[],"call":["@mappedZip get_entry size ","@mappedZip get_entry "]}," Zip ZipFileSystem ZipFsFile new":{"type":"method","name":"new","children":[],"call":[" open "]}," Zip ZipFileSystem ZipFsFile open":{"type":"method","name":"open","children":[],"call":[" raise ","openMode == ","@mappedZip get_output_stream ","@mappedZip get_input_stream ","openMode gsub! "]}," Zip ZipFileSystem ZipFsFile directory?":{"type":"method","name":"directory?","children":[],"call":["entry directory? ","entry != "," expand_path == "," expand_path ","@mappedZip find_entry ","@mappedZip find_entry  directory? ","@mappedZip find_entry  != ","@mappedZip find_@mappedZip find_entry  "]}," Zip ZipFileSystem ZipFsFile truncate":{"type":"method","name":"truncate","children":[],"call":[" raise "]}," Zip ZipFileSystem ZipFsFile umask":{"type":"method","name":"umask","children":[],"call":[" File  umask "]}," Zip ZipFileSystem ZipFsFile sticky?":{"type":"method","name":"sticky?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile setgid?":{"type":"method","name":"setgid?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile setuid?":{"type":"method","name":"setuid?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile executable?":{"type":"method","name":"executable?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile writable?":{"type":"method","name":"writable?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile readable?":{"type":"method","name":"readable?","children":[],"call":[" unix_mode_cmp "]}," Zip ZipFileSystem ZipFsFile exists?":{"type":"method","name":"exists?","children":[],"call":["@mappedZip find_entry != ","@mappedZip find_entry "," expand_path == "," expand_path "]}," Zip ZipFileSystem ZipFsFile unix_mode_cmp":{"type":"method","name":"unix_mode_cmp","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :e) :externalFileAttributes) :>>\n      (int 16))) :&\n  (lvar :mode)) != ","(send\n  (send\n    (lvar :e) :externalFileAttributes) :>>\n  (int 16)) & ","e externalFileAttributes >> ","e externalFileAttributes ","e fstype == ","e fstype "," get_entry ","(s get_entry nd\n  (b get_entry gin\n    (s get_entry nd\n      (s get_entry nd\n        (lvar : get_entry ) : get_entry xt get_entry rnalFil get_entry Attribut get_entry s) :>>\n      (int 16))) :&\n  (lvar :mod get_entry )) != ","(s get_entry nd\n  (s get_entry nd\n    (lvar : get_entry ) : get_entry xt get_entry rnalFil get_entry Attribut get_entry s) :>>\n  (int 16)) & "," get_entry   get_entry xt get_entry rnalFil get_entry Attribut get_entry s >> "," get_entry   get_entry xt get_entry rnalFil get_entry Attribut get_entry s "," get_entry  fstyp get_entry  == "," get_entry  fstyp get_entry  "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile get_entry":{"type":"method","name":"get_entry","children":[],"call":["@mappedZip find_entry "," raise "," exists? ! "," exists? "]}," Zip ZipFileSystem ZipFsFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat mode":{"type":"method","name":"mode","children":[],"call":["e externalFileAttributes >> ","e externalFileAttributes ","e fstype == ","e fstype "," get_entry "," get_entry   get_entry xt get_entry rnalFil get_entry Attribut get_entry s >> "," get_entry   get_entry xt get_entry rnalFil get_entry Attribut get_entry s "," get_entry  fstyp get_entry  == "," get_entry  fstyp get_entry  "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile ZipFsStat blksize":{"type":"method","name":"blksize","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat nlink":{"type":"method","name":"nlink","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat ftype":{"type":"method","name":"ftype","children":[],"call":[" raise "," directory? "," file? "]}," Zip ZipFileSystem ZipFsFile ZipFsStat rdev_minor":{"type":"method","name":"rdev_minor","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat rdev_major":{"type":"method","name":"rdev_major","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat rdev":{"type":"method","name":"rdev","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat dev":{"type":"method","name":"dev","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat ino":{"type":"method","name":"ino","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat uid":{"type":"method","name":"uid","children":[],"call":["e extra [] uid ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] uid "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile ZipFsStat gid":{"type":"method","name":"gid","children":[],"call":["e extra [] gid ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] gid "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip ZipFileSystem ZipFsFile ZipFsStat get_entry":{"type":"method","name":"get_entry","children":[],"call":["@zipFsFile __send__ "]}," Zip ZipFileSystem ZipFsFile ZipFsStat blocks":{"type":"method","name":"blocks","children":[],"call":[]}," Zip ZipFileSystem ZipFsFile ZipFsStat kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["t == "]}," Zip ZipFileSystem ZipFsFile ZipFsStat forward_invoke":{"type":"method","name":"forward_invoke","children":[],"call":["@zipFsFile send "]}," Zip ZipFileSystem ZipFsFile ZipFsStat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFileSystem file":{"type":"method","name":"file","children":[],"call":[]}," Zip ZipFileSystem dir":{"type":"method","name":"dir","children":[],"call":[]}," Zip ZipFileSystem initialize":{"type":"method","name":"initialize","children":[],"call":["@zipFsFile dir= ","@zipFsDir file= ","ZipFsFile  new ","ZipFsDir  new ","ZipFileNameMapper  new ","ZipFsFile  new  dir= ","ZipFsDir  new  file= "]}," Zip ZipExtraField local_length":{"type":"method","name":"local_length","children":[],"call":[" to_local_bin length "," to_local_bin "," to_local_bin bytesize "]}," Zip ZipExtraField c_dir_length":{"type":"method","name":"c_dir_length","children":[],"call":[" to_c_dir_bin length "," to_c_dir_bin "," to_c_dir_bin bytesize "]}," Zip ZipExtraField to_c_dir_bin":{"type":"method","name":"to_c_dir_bin","children":[],"call":["s << ","v to_c_dir_bin "," each "]}," Zip ZipExtraField to_local_bin":{"type":"method","name":"to_local_bin","children":[],"call":["s << ","v to_local_bin "," each "]}," Zip ZipExtraField create":{"type":"method","name":"create","children":[],"call":[" []= ","field_class new "," raise ","field_class ! ","klass name == ","klass name ","ID_MAP  each "]}," Zip ZipExtraField merge":{"type":"method","name":"merge","children":[],"call":["len + "," [] << ","binstr [] "," [] ","len + > ","binstr [] length ","len ! "," []= "," alias_method ","ID_MAP  [] new ","ID_MAP  [] "," [] mergea "," member? ","ID_MAP  [] name ","ID_MAP  member? ","binstr [] to_s unpack [] ","binstr [] to_s unpack ","binstr [] to_s ","i + ","i < ","binstr length ","binstr == ","binstr [] bytesize ","binstr bytesize ","binstr empty? ","binstr [] to_s unpack []  + ","binstr [] to_s unpack []  + > ","binstr [] binstr [] to_s unpack [] gth ","binstr [] to_s unpack []  ! ","binstr binstr [] to_s unpack [] gth "]}," Zip ZipExtraField initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip ZipExtraField IUnix pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":[]}," Zip ZipExtraField IUnix pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["(ivar :@uid) pack "]}," Zip ZipExtraField IUnix ==":{"type":"method","name":"==","children":[],"call":["@gid == ","other gid ","@uid == ","other uid "]}," Zip ZipExtraField IUnix merge":{"type":"method","name":"merge","children":[],"call":["content unpack ","size == ","size ! "," initial_parse ","binstr == ","binstr empty? "]}," Zip ZipExtraField IUnix initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip ZipExtraField UniversalTime pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":["s << ","(send\n  (ivar :@mtime) :to_i) pack ","@mtime to_i ","@flag & == ","@flag & ","(ivar :@flag) pack ","(ivar :@flag) pack  << ","((ivar :@flag) pack end\n  (ivar :@mtime) :to_i) pack "]}," Zip ZipExtraField UniversalTime pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["s << ","(send\n  (ivar :@ctime) :to_i) pack ","@ctime to_i ","@flag & != ","@flag & ","(send\n  (ivar :@atime) :to_i) pack ","@atime to_i ","(send\n  (ivar :@mtime) :to_i) pack ","@mtime to_i ","(ivar :@flag) pack ","(ivar :@flag) pack  << ","((ivar :@flag) pack end\n  (ivar :@ctime) :to_i) pack ","((ivar :@flag) pack end\n  (ivar :@atime) :to_i) pack ","((ivar :@flag) pack end\n  (ivar :@mtime) :to_i) pack "]}," Zip ZipExtraField UniversalTime ==":{"type":"method","name":"==","children":[],"call":["@ctime == ","other ctime ","@atime == ","other atime ","@mtime == ","other mtime "]}," Zip ZipExtraField UniversalTime merge":{"type":"method","name":"merge","children":[],"call":["Time  at ","content unpack "," initial_parse ","binstr == ","DOSTime  at ","binstr empty? "]}," Zip ZipExtraField UniversalTime initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip ZipExtraField Generic to_c_dir_bin":{"type":"method","name":"to_c_dir_bin","children":[],"call":[" class const_get + + "," class const_get + ","(send\n  (lvar :s) :length) pack ","s length "," class const_get "," class "," pack_for_c_dir ","(send\n  (lvar :s) :bytesize) pack ","s bytesize "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get + + "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get + ","( pack_for_c_dir end\n  (lvar : pack_for_c_dir ) :length) pack "," pack_for_c_dir  length "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get "," cla pack_for_c_dir  pack_for_c_dir  ","( pack_for_c_dir end\n  (lvar : pack_for_c_dir ) :byte pack_for_c_dir ize) pack "," pack_for_c_dir  byte pack_for_c_dir ize "]}," Zip ZipExtraField Generic to_local_bin":{"type":"method","name":"to_local_bin","children":[],"call":[" class const_get + + "," class const_get + ","(send\n  (lvar :s) :length) pack ","s length "," class const_get "," class "," pack_for_local ","(send\n  (lvar :s) :bytesize) pack ","s bytesize "," cla pack_for_local  pack_for_local  con pack_for_local t_get + + "," cla pack_for_local  pack_for_local  con pack_for_local t_get + ","( pack_for_local end\n  (lvar : pack_for_local ) :length) pack "," pack_for_local  length "," cla pack_for_local  pack_for_local  con pack_for_local t_get "," cla pack_for_local  pack_for_local  ","( pack_for_local end\n  (lvar : pack_for_local ) :byte pack_for_local ize) pack "," pack_for_local  byte pack_for_local ize "]}," Zip ZipExtraField Generic ==":{"type":"method","name":"==","children":[],"call":["v != ","other [] "," each "," class != ","other class "," class "]}," Zip ZipExtraField Generic initial_parse":{"type":"method","name":"initial_parse","children":[],"call":["binstr [] ","binstr [] unpack [] ","binstr [] unpack ","$stderr puts ","binstr [] != "," class const_get "," class ","binstr ! "]}," Zip ZipExtraField Generic name":{"type":"method","name":"name","children":[],"call":[]}," Zip ZipExtraField Generic register_map":{"type":"method","name":"register_map","children":[],"call":[]}," Zip ZipStreamableStream write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":["IOExtras  copy_stream "," get_input_stream ","aZipOutputStream put_next_entry ","aZipOutputStream << ","is read "," copy_stream "]}," Zip ZipStreamableStream get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["@tempFile close "," block_given? ","@tempFile open "," raise "," name ","@tempFile closed? ! ","@tempFile closed? ","@tempFile binmode "]}," Zip ZipStreamableStream get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["@tempFile close "," block_given? "]}," Zip ZipStreamableStream initialize":{"type":"method","name":"initialize","children":[],"call":["@tempFile binmode ","Tempfile  new ","File  dirname "," zipfile ","File  basename "," name "," File  dirname "," File  basename ","Tempfile  new  binmode "]}," Zip ZipStreamableDirectory write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":["aZipOutputStream put_next_entry "]}," Zip ZipStreamableDirectory get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["NullInputStream  instance "," block_given? "]}," Zip ZipStreamableDirectory initialize":{"type":"method","name":"initialize","children":[],"call":["entry get_extra_attributes_from_path "]}," Zip ZipStreamableFile ==":{"type":"method","name":"==","children":[],"call":["other delegate ","@filepath == ","other filepath ","other class == ","other class "]}," Zip ZipStreamableFile write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":["IOExtras  copy_stream "," get_input_stream ","aZipOutputStream put_next_entry ","aZipOutputStream << ","is read "," copy_stream "]}," Zip ZipStreamableFile get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["File  open "]}," Zip ZipStreamableFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipFile get_tempfile":{"type":"method","name":"get_tempfile","children":[],"call":["tempFile binmode ","Tempfile  new ","File  dirname "," name ","File  basename "," File  dirname "," File  basename ","Tempfile  new  binmode "]}," Zip ZipFile on_success_replace":{"type":"method","name":"on_success_replace","children":[],"call":["File  move "," name ","tmpfile close ","tmpfile path "," get_tempfile ","File  rename "," File  rename "," get_tempfile  close "," get_tempfile  path "]}," Zip ZipFile check_file":{"type":"method","name":"check_file","children":[],"call":[" raise ","File  readable? "," File  readable? "]}," Zip ZipFile write_file":{"type":"method","name":"write_file","children":[],"call":["os << ","is read ","entry get_input_stream ","File  open "," raise ","(lvar :entry) ! ","File  exists? "]}," Zip ZipFile check_entry_exists":{"type":"method","name":"check_entry_exists","children":[],"call":[" raise ","procedureName + "," remove "," get_entry ","continueOnExistsProc call ","e name == ","e name ","@entrySet detect "," proc ","@entrySet include? ","Zip  options [] ","Zip  options "]}," Zip ZipFile is_directory":{"type":"method","name":"is_directory","children":[],"call":["newEntry is_directory ","newEntry name ","newEntry is_directory ! "," raise ","(str \"entry name '\") + ","srcPathIsDirectory ! ","File  directory? "," File  directory? ","File  directory?  ! "," File  directory?  ! "]}," Zip ZipFile create_directory":{"type":"method","name":"create_directory","children":[],"call":["Dir  mkdir "," raise ","(str \"Cannot create directory '\") + ","File  rm_f "," block_given? ","File  exists? ","File  directory? "]}," Zip ZipFile mkdir":{"type":"method","name":"mkdir","children":[],"call":["@entrySet << ","ZipStreamableDirectory  new ","ZipEntry  new ","entryName to_s ensure_end ","entryName to_s "," name "," raise "," find_entry ","entryName << ","entryName end_with? ","entryName dup to_s ","entryName dup ","entryName to_s  to_s ensure_end ","entryName dup to_s  to_s ensure_end ","entryName to_s  to_s ","entryName dup to_s  to_s ","entryName to_s  << ","entryName dup to_s  << ","entryName to_s  end_with? ","entryName dup to_s  end_with? ","entryName to_s  dup to_s ","entryName dup to_s  dup to_s ","entryName to_s  dup ","entryName dup to_s  dup "]}," Zip ZipFile get_entry":{"type":"method","name":"get_entry","children":[],"call":[" raise "," find_entry ","selectedEntry restore_times= ","selectedEntry restore_permissions= ","selectedEntry restore_ownership= "," find_entry  restore_times= "," find_entry  restore_permissions= "," find_entry  restore_ownership= "]}," Zip ZipFile find_entry":{"type":"method","name":"find_entry","children":[],"call":["e name sub == ","entry to_s sub ","entry to_s ","e name sub ","e name ","@entrySet detect ","@entrySet find_entry "]}," Zip ZipFile commit_required?":{"type":"method","name":"commit_required?","children":[],"call":["@create == ","@entrySet != ","e dirty ","@entrySet each ","@comment != "]}," Zip ZipFile close":{"type":"method","name":"close","children":[],"call":[" commit "]}," Zip ZipFile commit":{"type":"method","name":"commit","children":[],"call":[" initialize "," name ","zos comment= "," comment ","e write_to_zip_output_stream ","@entrySet each ","ZipOutputStream  open "," on_success_replace "," commit_required? ! "," commit_required? ","e dirty= "]}," Zip ZipFile extract":{"type":"method","name":"extract","children":[],"call":[" write_file "," create_directory ","foundEntry is_directory "," get_entry "," proc ","foundEntry extract ","Zip  options [] ","Zip  options "," get_entry  is_directory "," get_entry  extract "]}," Zip ZipFile replace":{"type":"method","name":"replace","children":[],"call":[" add "," remove "," check_file "]}," Zip ZipFile rename":{"type":"method","name":"rename","children":[],"call":["foundEntry name= "," check_entry_exists "," get_entry ","@entrySet << ","@entrySet delete "," get_entry  name= "]}," Zip ZipFile remove":{"type":"method","name":"remove","children":[],"call":["@entrySet delete "," get_entry "]}," Zip ZipFile add":{"type":"method","name":"add","children":[],"call":["@entrySet << ","ZipStreamableFile  new ","ZipStreamableDirectory  new "," is_directory ","ZipEntry  new ","entry to_s ","entry kind_of? "," check_entry_exists "," proc ","newEntry gather_fileinfo_from_srcpath ","Zip  options [] ","Zip  options ","ZipEntry  new  gather_fileinfo_from_srcpath "]}," Zip ZipFile read":{"type":"method","name":"read","children":[],"call":["is read "," get_input_stream "]}," Zip ZipFile to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Zip ZipFile get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["zipStreamableEntry get_output_stream ","@entrySet << ","ZipStreamableStream  new "," raise ","newEntry directory? ","ZipEntry  new ","entry to_s ","entry kind_of? ","newEntry unix_perms= ","ZipStreamableStream  new  get_output_stream ","ZipEntry  new  directory? ","ZipEntry  new  unix_perms= "]}," Zip ZipFile get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":[" get_entry get_input_stream "," get_entry "]}," Zip ZipFile foreach":{"type":"method","name":"foreach","children":[],"call":["zipFile each "," open "]}," Zip ZipFile open":{"type":"method","name":"open","children":[],"call":["zf close "," block_given? ","ZipFile  new ","ZipFile  new  close "]}," Zip ZipFile initialize":{"type":"method","name":"initialize","children":[],"call":["@entrySet dup "," raise ","ZipEntrySet  new "," read_from_stream ","File  open "," name ","File  exists? ","buffer ! "," File  open "," File  exists? ","ZipEntrySet  new  dup "]}," Zip ZipCentralDirectory ==":{"type":"method","name":"==","children":[],"call":[" comment == ","other comment "," comment ","@entrySet entries sort == ","other entries sort ","other entries ","@entrySet entries sort ","@entrySet entries ","other kind_of? "]}," Zip ZipCentralDirectory read_from_stream":{"type":"method","name":"read_from_stream","children":[],"call":[" read_central_directory_entries "," read_e_o_c_d "]}," Zip ZipCentralDirectory size":{"type":"method","name":"size","children":[],"call":["@entrySet size "]}," Zip ZipCentralDirectory each":{"type":"method","name":"each","children":[],"call":["@entrySet each "]}," Zip ZipCentralDirectory get_e_o_c_d":{"type":"method","name":"get_e_o_c_d","children":[{"type":"method","name":"read","children":[],"asgn":[],"call":[]}],"call":[" slice! ","buf slice! ","buf size ","sigIndex + "," raise ","buf rindex ","(const nil :END_OF_CENTRAL_DIRECTORY_SIGNATURE) pack ","io seek ","io read ","MAX_END_OF_CENTRAL_DIRECTORY_STRUCTURE_SIZE  -@ ","buf bytesize ","buf slice!  slice! ","io read  slice! ","buf slice!  size ","io read  size ","buf rindex  + ","buf slice!  rindex ","io read  rindex ","buf slice!  bytesize ","io read  bytesize "]}," Zip ZipCentralDirectory read_central_directory_entries":{"type":"method","name":"read_central_directory_entries","children":[],"call":["@entrySet << ","ZipEntry  read_c_dir_entry ","@size times ","ZipEntrySet  new "," raise ","io seek ","ZipEntrySet  new  << "]}," Zip ZipCentralDirectory read_e_o_c_d":{"type":"method","name":"read_e_o_c_d","children":[],"call":[" raise ","buf size == ","buf size ","buf read ","ZipEntry  read_zip_short ","ZipEntry  read_zip_long "," get_e_o_c_d ","buf slice! ","commentLength <= "," get_e_o_c_d  size == "," get_e_o_c_d  size "," get_e_o_c_d  read "," get_e_o_c_d  slice! ","ZipEntry  read_zip_short  <= "]}," Zip ZipCentralDirectory cdir_size":{"type":"method","name":"cdir_size","children":[],"call":["entry cdir_header_size + ","entry cdir_header_size ","@entrySet inject "]}," Zip ZipCentralDirectory write_e_o_c_d":{"type":"method","name":"write_e_o_c_d","children":[],"call":["io << ","(const nil :END_OF_CENTRAL_DIRECTORY_SIGNATURE) pack ","@comment length "," cdir_size ","@entrySet size ","tmp pack "]}," Zip ZipCentralDirectory write_to_stream":{"type":"method","name":"write_to_stream","children":[],"call":[" write_e_o_c_d ","entry write_c_dir_entry ","@entrySet each ","io tell ","@entrySet sort each ","@entrySet sort "]}," Zip ZipCentralDirectory initialize":{"type":"method","name":"initialize","children":[],"call":["ZipEntrySet  new ","entries kind_of? "]}," Zip ZipCentralDirectory entries":{"type":"method","name":"entries","children":[],"call":["@entrySet entries "]}," Zip ZipEntrySet glob":{"type":"method","name":"glob","children":[],"call":["File  fnmatch ","entry name chomp ","entry name "," entries select "," entries "," File  fnmatch ","(send\n  (send nil :entries) :map) compact "," block_given? "," entries map "]}," Zip ZipEntrySet parent":{"type":"method","name":"parent","children":[],"call":["@entrySet [] ","entry parent_as_string "," to_key "]}," Zip ZipEntrySet ==":{"type":"method","name":"==","children":[],"call":["@entrySet == ","other entrySet ","other kind_of? "]}," Zip ZipEntrySet dup":{"type":"method","name":"dup","children":[],"call":["ZipEntrySet  new ","e dup ","@entrySet values map ","@entrySet values "]}," Zip ZipEntrySet entries":{"type":"method","name":"entries","children":[],"call":["@entrySet values "]}," Zip ZipEntrySet each":{"type":"method","name":"each","children":[],"call":["@entrySet values each ","@entrySet values "]}," Zip ZipEntrySet delete":{"type":"method","name":"delete","children":[],"call":["@entrySet delete ","entry to_s "," to_key "]}," Zip ZipEntrySet size":{"type":"method","name":"size","children":[],"call":["@entrySet size "]}," Zip ZipEntrySet <<":{"type":"method","name":"<<","children":[],"call":["@entrySet []= ","entry to_s "," to_key "]}," Zip ZipEntrySet include?":{"type":"method","name":"include?","children":[],"call":["@entrySet include? ","entry to_s "," to_key "]}," Zip ZipEntrySet initialize":{"type":"method","name":"initialize","children":[],"call":[" push ","anEnumerable each "]}," Zip Deflater finish":{"type":"method","name":"finish","children":[],"call":["@outputStream << ","@zlibDeflater finish ","@zlibDeflater finished? ","@output_stream << ","@zlib_deflater finish ","@zlib_deflater finished? ","@encrypter encrypt ","@buffer_stream string ","@zlib_deflater close ","buffer empty? ","@@zlib_deflater finish _stream string ","@zlib_deflater finish  empty? "]}," Zip Deflater <<":{"type":"method","name":"<<","children":[],"call":["@outputStream << ","@zlibDeflater deflate ","val size ","Zlib  crc32 ","data to_s ","val bytesize ","@output_stream << ","@zlib_deflater deflate ","@buffer_stream << ","@encrypter encrypt ","buffer empty? ","data to_s  size ","data to_s  bytesize ","@@zlib_deflater deflate _stream << ","@zlib_deflater deflate  empty? "]}," Zip Deflater initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib  crc32 ","Zlib Deflate  new ","Zlib MAX_WBITS  -@ "," Zlib  crc32 "," Zlib Deflate  new "," Zlib MAX_WBITS  -@ "," StringIO  new "]}," Zip NullCompressor <<":{"type":"method","name":"<<","children":[],"call":[" raise "]}," Zip PassThruCompressor <<":{"type":"method","name":"<<","children":[],"call":["@outputStream << ","val size ","Zlib  crc32 ","data to_s ","val bytesize ","@output_stream << ","data to_s  size ","data to_s  bytesize "]}," Zip PassThruCompressor initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib  crc32 "]}," Zip Compressor finish":{"type":"method","name":"finish","children":[],"call":[]}," Zip ZipOutputStream <<":{"type":"method","name":"<<","children":[],"call":["@compressor << "]}," Zip ZipOutputStream finish":{"type":"method","name":"finish","children":[],"call":["@compressor finish "]}," Zip ZipOutputStream write_central_directory":{"type":"method","name":"write_central_directory","children":[],"call":["cdir write_to_stream ","ZipCentralDirectory  new ","ZipCentralDirectory  new  write_to_stream "]}," Zip ZipOutputStream update_local_headers":{"type":"method","name":"update_local_headers","children":[],"call":["@outputStream pos= ","entry write_local_entry ","entry localHeaderOffset ","@entrySet each ","@outputStream tell ","@outputStream pos ","@outputStream @outputStream tell = ","@outputStream @outputStream pos = ","@outputStream @outputStream tell  ","@outputStream @outputStream pos  "]}," Zip ZipOutputStream get_compressor":{"type":"method","name":"get_compressor","children":[],"call":[" raise ","entry compression_method ","PassThruCompressor  new ","Deflater  new "]}," Zip ZipOutputStream init_next_entry":{"type":"method","name":"init_next_entry","children":[],"call":[" get_compressor ","entry write_local_entry ","@entrySet << "," finalize_current_entry "]}," Zip ZipOutputStream finalize_current_entry":{"type":"method","name":"finalize_current_entry","children":[],"call":["NullCompressor  instance ","@currentEntry crc= ","@compressor crc ","@currentEntry size= ","@compressor size ","@currentEntry compressed_size= ","@outputStream tell - - ","@currentEntry local_header_size ","@outputStream tell - ","@currentEntry localHeaderOffset ","@outputStream tell "," finish ","@currentEntry calculate_local_header_size ","NullCompressor  instance  crc ","NullCompressor  instance  size "]}," Zip ZipOutputStream copy_raw_entry":{"type":"method","name":"copy_raw_entry","children":[],"call":["NullCompressor  instance ","@outputStream << ","is read ","entry compressed_size ","is seek ","entry get_raw_input_stream ","entry write_local_entry ","entry local_entry_offset ","@entrySet << "," finalize_current_entry "," raise ","entry kind_of? ! ","entry kind_of? ","entry dup ","IOExtras  copy_stream_n ","entry dup  compressed_size ","entry dup  get_raw_input_stream ","entry dup  write_local_entry dup  ","entry dup  local_entry dup _offset ","@entry dup Set << "," finalize_current_entry dup  ","entry dup  kind_of? ! ","entry dup  kind_of? ","entry dup  dup "]}," Zip ZipOutputStream put_next_entry":{"type":"method","name":"put_next_entry","children":[],"call":[" init_next_entry ","ZipEntry  new ","entry to_s ","entry kind_of? "," raise ","new_entry compression_method= ","new_entry extra= ","ZipExtraField  new ","extra to_s ","ZipExtraField  === ","extra nil? ! ","extra nil? ","new_entry comment= ","comment nil? ! ","comment nil? ","entryname to_s ","new_entry unix_perms= ","entryname unix_perms ","entryname respond_to? ","compression_method nil? ! ","compression_method nil? ","entryname kind_of? ","ZipEntry  new  compression_method= ","ZipEntry  new  extra= ","ZipEntry  new  comment= ","ZipEntry  new  unix_perms= "]}," Zip ZipOutputStream close":{"type":"method","name":"close","children":[],"call":["@outputStream close "," write_central_directory "," update_local_headers "," finalize_current_entry "]}," Zip ZipOutputStream open":{"type":"method","name":"open","children":[],"call":[]}," Zip ZipOutputStream initialize":{"type":"method","name":"initialize","children":[],"call":["NullCompressor  instance ","ZipEntrySet  new ","File  new ","StringIO  new "," File  new "]}," Zip ZipEntry set_time":{"type":"method","name":"set_time","children":[],"call":[" puts ","Time  parse_binary_dos_format ","DOSTime  parse_binary_dos_format "]}," Zip ZipEntry get_raw_input_stream":{"type":"method","name":"get_raw_input_stream","children":[],"call":["File  open "," File  open "]}," Zip ZipEntry parent_as_string":{"type":"method","name":"parent_as_string","children":[],"call":["entry_name slice ","slash_index + ","entry_name rindex "," name chomp "," name "," name chomp  slice ","entry_name rindex  + "," name chomp  rindex "]}," Zip ZipEntry write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":["aZipOutputStream copy_raw_entry ","IOExtras  copy_stream "," get_input_stream ","aZipOutputStream put_next_entry ","@ftype == "]}," Zip ZipEntry get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["zis close "," block_given? ","zis get_next_entry ","ZipInputStream  new "," localHeaderOffset "," raise ","StringIO  new ","File  readlink ","File  open ","NullInputStream  instance ","@ftype == "," File  readlink "," File  open ","ZipInputStream  new  close ","ZipInputStream  new  get_next_entry "]}," Zip ZipEntry <=>":{"type":"method","name":"<=>","children":[],"call":[" to_s <=> ","other to_s "," to_s "]}," Zip ZipEntry ==":{"type":"method","name":"==","children":[],"call":[" time dos_equals ","other time "," time ","@extra == ","other extra ","@name == ","other name ","@size == ","other size ","@compressed_size == ","other compressed_size ","@crc == ","other crc ","@compression_method == ","other compression_method ","other class == ","other class ","@filepath == ","other filepath "," class "]}," Zip ZipEntry write_c_dir_entry":{"type":"method","name":"write_c_dir_entry","children":[],"call":["io << ","@extra to_c_dir_bin ","(const nil :CENTRAL_DIRECTORY_ENTRY_SIGNATURE) pack "," comment length "," comment ","@extra c_dir_length ","@name length ","@time to_binary_dos_date ","@time to_binary_dos_time ","(send\n  (send\n    (lvar :ft) :<<\n    (int 12)) :|\n  (begin\n    (send\n      (ivar :@unix_perms) :&\n      (int 4095)))) << ","ft << | ","@unix_perms & ","ft << "," raise "," inspect ","@comment bytesize ","@name bytesize ","ft nil? ! ","ft nil? ","tmp pack "]}," Zip ZipEntry read_c_dir_entry":{"type":"method","name":"read_c_dir_entry","children":[],"call":[" raise ","@comment length == ","@comment length ","io read ","ZipExtraField  new ","@extra merge ","ZipExtraField  === "," set_time "," localHeaderOffset ","cdirSignature == ","staticSizedFieldsBuf unpack ","staticSizedFieldsBuf size == ","staticSizedFieldsBuf size "," name_is_directory? ","0%o % ","@externalFileAttributes >> ","(send\n  (ivar :@externalFileAttributes) :>>\n  (int 16)) & ","@header_signature == "," calculate_local_header_size ","@comment bytesize == ","@comment bytesize ","staticSizedFieldsBuf bytesize == ","staticSizedFieldsBuf bytesize ","entry read_c_dir_entry "," new ","io path ","@name sub! == ","@name sub! ","io read  length == ","io read  length ","ZipExtraField  new  merge ","io read  unpack ","io read  size == ","io read  size ","io read  bytesize == ","io read  bytesize "," new  read_c_dir_ new  ","io read  sub! == ","io read  sub! "]}," Zip ZipEntry write_local_entry":{"type":"method","name":"write_local_entry","children":[],"call":["io << ","@extra to_local_bin ","(const nil :LOCAL_ENTRY_SIGNATURE) pack ","@extra local_length ","@name length ","@time to_binary_dos_date ","@time to_binary_dos_time ","io tell ","@name bytesize "]}," Zip ZipEntry read_local_entry":{"type":"method","name":"read_local_entry","children":[],"call":["ZipExtraField  new ","@extra merge ","ZipExtraField  === "," raise ","extra length != ","extra length ","io read "," set_time "," localHeaderOffset ","localHeader == ","staticSizedFieldsBuf unpack ","staticSizedFieldsBuf size == ","staticSizedFieldsBuf size ","io tell ","@header_signature == "," calculate_local_header_size ","extra bytesize != ","extra bytesize ","entry read_local_entry "," new ","io path ","@name sub! == ","@name sub! ","ZipExtraField  new  merge ","@io read  merge ","io read  length != ","io read  length ","io read  unpack ","io read  size == ","io read  size ","io read  bytesize != ","io read  bytesize "," new  read_local_ new  ","io read  sub! == ","io read  sub! "]}," Zip ZipEntry read_zip_long":{"type":"method","name":"read_zip_long","children":[],"call":["io read unpack [] ","io read unpack ","io read "]}," Zip ZipEntry read_zip_short":{"type":"method","name":"read_zip_short","children":[],"call":["io read unpack [] ","io read unpack ","io read "]}," Zip ZipEntry to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Zip ZipEntry next_header_offset":{"type":"method","name":"next_header_offset","children":[],"call":[" local_entry_offset + "," compressed_size "," local_entry_offset "]}," Zip ZipEntry cdir_header_size":{"type":"method","name":"cdir_header_size","children":[],"call":["CDIR_ENTRY_STATIC_HEADER_LENGTH  + + + ","@comment size ","CDIR_ENTRY_STATIC_HEADER_LENGTH  + + ","@extra c_dir_size ","CDIR_ENTRY_STATIC_HEADER_LENGTH  + ","@name size ","@comment bytesize ","@name bytesize "]}," Zip ZipEntry local_header_size":{"type":"method","name":"local_header_size","children":[],"call":["LOCAL_ENTRY_STATIC_HEADER_LENGTH  + + ","@extra local_size ","LOCAL_ENTRY_STATIC_HEADER_LENGTH  + ","@name size "]}," Zip ZipEntry local_entry_offset":{"type":"method","name":"local_entry_offset","children":[],"call":[" localHeaderOffset + "," local_header_size "," localHeaderOffset "]}," Zip ZipEntry file?":{"type":"method","name":"file?","children":[],"call":[" directory? ! "," directory? ","@ftype == "," raise "," inspect "]}," Zip ZipEntry directory?":{"type":"method","name":"directory?","children":[],"call":["(match-with-lvasgn\n  (regexp\n    (str \"\\\\/$\")\n    (regopt))\n  (ivar :@name)) != ","@ftype == "," raise "," inspect "]}," Zip ZipEntry time=":{"type":"method","name":"time=","children":[],"call":["@extra [] mtime= ","@extra [] ","@extra create ","@extra member? "]}," Zip ZipEntry time":{"type":"method","name":"time","children":[],"call":["@extra [] mtime ","@extra [] "]}," Zip ZipEntry initialize":{"type":"method","name":"initialize","children":[],"call":["ZipExtraField  new ","@extra to_s ","ZipExtraField  === "," raise ","name starts_with "," name_is_directory? ","name start_with? ","ZipExtraField  new  to_s "]}," Zip NullDecompressor input_finished?":{"type":"method","name":"input_finished?","children":[],"call":[]}," Zip NullDecompressor produce_input":{"type":"method","name":"produce_input","children":[],"call":[]}," Zip NullDecompressor sysread":{"type":"method","name":"sysread","children":[],"call":[]}," Zip PassThruDecompressor input_finished?":{"type":"method","name":"input_finished?","children":[],"call":["@readSoFar >= ","@read_so_far >= "]}," Zip PassThruDecompressor produce_input":{"type":"method","name":"produce_input","children":[],"call":[" sysread "," read "]}," Zip PassThruDecompressor sysread":{"type":"method","name":"sysread","children":[],"call":["@inputStream read ","@charsToRead - ","@readSoFar + > ","@readSoFar + ","numberOfBytes == "," input_finished? ","@input_stream read ","@chars_to_read - ","@read_so_far + > ","@read_so_far + ","number_of_bytes == ","number_of_bytes nil? ","@charsToRead -  == ","@chars_to_read -  == ","@chars_to_read -  nil? "]}," Zip PassThruDecompressor initialize":{"type":"method","name":"initialize","children":[],"call":["EMPTY_FILE_RETURNS_EMPTY_STRING_FIRST  ! "]}," Zip Inflater value_when_finished":{"type":"method","name":"value_when_finished","children":[],"call":["buf bytesize == ","buf bytesize ","number_of_bytes nil? "]}," Zip Inflater internal_input_finished?":{"type":"method","name":"internal_input_finished?","children":[],"call":["@zlibInflater finished? ","@zlib_inflater finished? "]}," Zip Inflater internal_produce_input":{"type":"method","name":"internal_produce_input","children":[],"call":["@zlibInflater inflate ","@inputStream read "," raise ","retried >= ","@zlib_inflater inflate ","@input_stream read ","@decrypter decrypt "]}," Zip Inflater input_finished?":{"type":"method","name":"input_finished?","children":[],"call":[" internal_input_finished? ","@outputBuffer empty? ","@output_buffer empty? ","@zlib_inflater finished? "]}," Zip Inflater produce_input":{"type":"method","name":"produce_input","children":[],"call":["@outputBuffer slice! ","@outputBuffer length "," internal_produce_input ","@outputBuffer empty? ","@output_buffer slice! ","@output_buffer length ","@output_buffer empty? "," sysread "," raise ","retried >= ","@zlib_inflater inflate "," input_stream read "," input_stream "]}," Zip Inflater sysread":{"type":"method","name":"sysread","children":[],"call":["@outputBuffer slice! ","@outputBuffer length ","numberOfBytes == "," value_when_finished "," input_finished? ","@outputBuffer length == ","@outputBuffer << "," internal_produce_input "," internal_input_finished? ","@outputBuffer length < ","@outputBuffer bytesize ","numberOfBytes nil? ","@outputBuffer bytesize == ","@outputBuffer bytesize < ","@output_buffer slice! ","@output_buffer bytesize ","number_of_bytes nil? ","@output_buffer bytesize == ","@output_buffer << ","@output_buffer bytesize < ","buf << "," move_output_buffer_pos ","data bytesize ","@output_buffer [] ","(if\n  (send\n    (lvar :number_of_bytes) :nil?)\n  (send\n    (ivar :@output_buffer) :bytesize)\n  (lvar :number_of_bytes)) - ","buf bytesize ","buf bytesize + < ","buf bytesize + ","buf bytesize == ","buf clear ","@output_buffer []  bytesize "]}," Zip Inflater initialize":{"type":"method","name":"initialize","children":[],"call":["EMPTY_FILE_RETURNS_EMPTY_STRING_FIRST  ! ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ "," Zlib Inflate  new "," dup "," +@ "]}," Zip Decompressor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip ZipInputStream input_finished?":{"type":"method","name":"input_finished?","children":[],"call":["@decompressor input_finished? "]}," Zip ZipInputStream produce_input":{"type":"method","name":"produce_input","children":[],"call":["@decompressor produce_input "]}," Zip ZipInputStream open_entry":{"type":"method","name":"open_entry","children":[],"call":[" flush "," raise ","@currentEntry compression_method ","Inflater  new ","@currentEntry compression_method == ","PassThruDecompressor  new ","@currentEntry size ","NullDecompressor  instance ","@currentEntry == ","ZipEntry  read_local_entry ","@currentEntry nil? ","ZipEntry  read_local_entry  compression_method ","ZipEntry  read_local_entry  compression_method == ","ZipEntry  read_local_entry  size ","ZipEntry  read_local_entry  == ","ZipEntry  read_local_entry  nil? "]}," Zip ZipInputStream sysread":{"type":"method","name":"sysread","children":[],"call":["@decompressor sysread "]}," Zip ZipInputStream rewind":{"type":"method","name":"rewind","children":[],"call":[" open_entry ","@archiveIO seek ","@currentEntry localHeaderOffset ","@currentEntry nil? "]}," Zip ZipInputStream get_next_entry":{"type":"method","name":"get_next_entry","children":[],"call":[" open_entry ","@archiveIO seek ","@currentEntry next_header_offset "]}," Zip ZipInputStream open":{"type":"method","name":"open","children":[],"call":[]}," Zip ZipInputStream close":{"type":"method","name":"close","children":[],"call":["@archiveIO close "]}," Zip ZipInputStream initialize":{"type":"method","name":"initialize","children":[],"call":["NullDecompressor  instance ","@archiveIO seek ","File  open "," File  open ","io nil? ","File  open  seek "," File  open  seek "]}," BugFix Tempfile open":{"type":"method","name":"open","children":[],"call":["tempfile close "," block_given? "," new "," __setobj__ ","@data []= ","File  open ","@tmpfile close "," File  open "," new  close ","File  open  close "," File  open  close "]}," BugFix Tempfile callback":{"type":"method","name":"callback","children":[],"call":[" print ","cleanlist delete ","File  unlink ","File  exist? ","tmpfile close ","pid == "," lambda "," File  unlink "," File  exist? "]}," BugFix Tempfile size":{"type":"method","name":"size","children":[],"call":["@tmpfile stat size ","@tmpfile stat ","@tmpfile flush "]}," BugFix Tempfile path":{"type":"method","name":"path","children":[],"call":[]}," BugFix Tempfile __setobj__":{"type":"method","name":"__setobj__","children":[],"call":[]}," BugFix Tempfile unlink":{"type":"method","name":"unlink","children":[],"call":["@@cleanlist delete ","File  unlink ","File  exist? "," File  unlink "," File  exist? "]}," BugFix Tempfile close!":{"type":"method","name":"close!","children":[],"call":["ObjectSpace  undefine_finalizer ","@clean_proc call "," _close "]}," BugFix Tempfile close":{"type":"method","name":"close","children":[],"call":[" _close "," close! "]}," BugFix Tempfile _close":{"type":"method","name":"_close","children":[],"call":["@data []= ","@tmpfile close "]}," BugFix Tempfile initialize":{"type":"method","name":"initialize","children":[],"call":["Dir  rmdir ","@data []= ","@@cleanlist << ","File  open ","File RDWR  | | ","File RDWR  | ","ObjectSpace  define_finalizer ","Tempfile  callback ","Thread  critical= "," raise ","cannot generate tempfile `%s' % ","failure < ","Dir  mkdir ","tmpname + "," sprintf ","File  exist? ","@@cleanlist include? ","tmpdir tainted? ","$SAFE > "," File  open "," File RDWR  | | "," File RDWR  | "," File  exist? "," sprintf  + "]}," Module forward_message":{"type":"method","name":"forward_message","children":[],"call":[" module_eval ","methodDefs join ","messagesToForward map "]}," Time parse_binary_dos_format":{"type":"method","name":"parse_binary_dos_format","children":[],"call":[]}," Time dos_equals":{"type":"method","name":"dos_equals","children":[],"call":[" to_i / == ","other to_i / ","other to_i "," to_i / "," to_i "]}," Time to_binary_dos_date":{"type":"method","name":"to_binary_dos_date","children":[],"call":["(send nil :day) + + ","(send\n  (send nil :year) :-\n  (int 1980)) << "," year - "," year ","(send nil :day) + "," month << "," month "," day "]}," Time to_binary_dos_time":{"type":"method","name":"to_binary_dos_time","children":[],"call":["(send\n  (send nil :sec) :/\n  (int 2)) + + "," hour << "," hour ","(send\n  (send nil :sec) :/\n  (int 2)) + "," min << "," min "," sec / "," sec "]}," String lchop":{"type":"method","name":"lchop","children":[],"call":[" slice "," length "]}," String ensure_end":{"type":"method","name":"ensure_end","children":[],"call":[" + "," ends_with "," end_with? "]}," String ends_with":{"type":"method","name":"ends_with","children":[],"call":[" index ","aString size -@ ","aString size "]}," String starts_with":{"type":"method","name":"starts_with","children":[],"call":[" rindex == "," rindex "]}," File read":{"type":"method","name":"read","children":[],"call":[]}," Enumerable select_map":{"type":"method","name":"select_map","children":[],"call":["e nil? "," map reject "," map "]}," Enumerable inject":{"type":"method","name":"inject","children":[],"call":[" each "]}," IOExtras AbstractOutputStream puts":{"type":"method","name":"puts","children":[],"call":[" << ","val [] == ","val [] ","element to_s ","params flatten each ","params flatten ","params << ","params empty? ","element to_s  [] == ","element to_s  [] "]}," IOExtras AbstractOutputStream putc":{"type":"method","name":"putc","children":[],"call":[" << "," raise ","anObject chr "]}," IOExtras AbstractOutputStream printf":{"type":"method","name":"printf","children":[],"call":[" << "," sprintf "]}," IOExtras AbstractOutputStream print":{"type":"method","name":"print","children":[],"call":[" << << ","$\\ to_s "," << ","params to_s ","params join "]}," IOExtras AbstractOutputStream write":{"type":"method","name":"write","children":[],"call":["data to_s length ","data to_s "," << ","data to_s bytesize "]}," IOExtras AbstractInputStream each_line":{"type":"method","name":"each_line","children":[],"call":[" readline "]}," IOExtras AbstractInputStream readline":{"type":"method","name":"readline","children":[],"call":[" raise ","retVal == "," gets "," gets  == "]}," IOExtras AbstractInputStream flush":{"type":"method","name":"flush","children":[],"call":[]}," IOExtras AbstractInputStream gets":{"type":"method","name":"gets","children":[],"call":["@outputBuffer slice! ","matchIndex + ","aSepString length ","@outputBuffer << "," produce_input "," flush ","@outputBuffer empty? "," input_finished? ","@outputBuffer length ","(lvasgn :matchIndex\n  (send\n    (ivar :@outputBuffer) :index\n    (lvar :aSepString)\n    (lvar :bufferIndex))) == ","@outputBuffer index ","aSepString == "," read ","@lineno next ","aSepString bytesize ","@outputBuffer bytesize ","aSepString empty? ","aSepString nil? ","@outputBuffer index  + ","(lvasgn :matchIndex\n  (send\n    (ivar :@outputBuffer) :index\n    (lvar :aSepString)\n    (lvar :@outputBuffer length ))) == ","(lvasgn :matchIndex\n  (send\n    (ivar :@outputBuffer) :index\n    (lvar :aSepString)\n    (lvar :@outputBuffer bytesize ))) == ","(lvasgn :@outputBuffer index \n  (send\n    (ivar :@outputBuffer) :index\n    (lvar :aSepString)\n    (lvar :bufferIndex))) == ","@lineno next  next "]}," IOExtras AbstractInputStream readlines":{"type":"method","name":"readlines","children":[],"call":["retVal << "," each_line "]}," IOExtras AbstractInputStream read":{"type":"method","name":"read","children":[],"call":["buf []= "," sysread ","@outputBuffer slice! ","@outputBuffer + ","@outputBuffer length > ","@outputBuffer length ","numberOfBytes - ","numberOfBytes <= ","buf replace ","tbuf << ","@outputBuffer bytesize ","@outputBuffer bytesize > "," sysread  << ","@outputBuffer slice!  << "]}," IOExtras AbstractInputStream initialize":{"type":"method","name":"initialize","children":[],"call":[]}," IOExtras FakeIO kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["object == "]}," IOExtras copy_stream":{"type":"method","name":"copy_stream","children":[],"call":["ostream write ","istream read ","istream eof? "]}," Zip NullDecompressor read":{"type":"method","name":"read","children":[],"call":[]}," Zip PassThruDecompressor read":{"type":"method","name":"read","children":[],"call":["@inputStream read ","@charsToRead - ","@readSoFar + > ","@readSoFar + ","numberOfBytes == "," input_finished? "," input_stream read "," input_stream "," decompressed_size - "," decompressed_size ","(send\n  (ivar :@read_so_far) :+\n  (lvar :length)) > ","@read_so_far + ","length nil? ","length zero? "," eof ","@charsToRead -  == ","(send\n  (ivar :@read_so_far) :+\n  (lvar : decompressed_size - )) > "," decompressed_size -  nil? "," decompressed_size -  zero? "]}," Zip Inflater read":{"type":"method","name":"read","children":[],"call":["@outputBuffer slice! ","@outputBuffer length ","numberOfBytes == "," value_when_finished "," input_finished? ","@outputBuffer length == ","@outputBuffer << "," internal_produce_input "," internal_input_finished? ","@outputBuffer length < ","outbuf replace ","@buffer slice! ","@buffer bytesize ","@buffer << "," produce_input ","@buffer bytesize < ","length nil? ","length zero? "," eof "]}," Zip ZipInputStream read":{"type":"method","name":"read","children":[],"call":["@decompressor read "]}," Zip ZipEntry create_symlink":{"type":"method","name":"create_symlink","children":[],"call":["File  symlink "," raise ","(str \"Cannot create symlink '\") + ","File  readlink == ","File  readlink ","stat symlink? ","io read "," get_input_stream ","File  lstat "," File  symlink "," File  readlink == "," File  readlink "," File  lstat ","File  lstat  symlink? "," File  lstat  symlink? "," get_input_stream  read ","File  lFile  lstat  ","File  l File  lstat  "," File  lFile  lstat  "," File  l File  lstat  "]}," Zip ZipEntry create_directory":{"type":"method","name":"create_directory","children":[],"call":[" set_extra_attributes_on_path ","Dir  mkdir "," raise ","(str \"Cannot create directory '\") + ","File  rm_f "," block_given? ","File  exists? ","File  directory? ","FileUtils  rm_f "," File  exists? "," File  directory? "]}," Zip ZipEntry write_file":{"type":"method","name":"write_file","children":[],"call":["os << ","is sysread "," set_extra_attributes_on_path "," get_input_stream ","File  open "," raise ","(self) ! ","File  exists? "," File  open "," File  exists? "]}," Zip ZipEntry gather_fileinfo_from_srcpath":{"type":"method","name":"gather_fileinfo_from_srcpath","children":[],"call":[" get_extra_attributes_from_path "," raise ","stat inspect ","srcPath inspect ","(str \"entry name '\") + "," newEntry "," name_is_directory? "," name_is_directory? ! ","stat ftype "," file_stat "," file_stat  inspect "," file_stat  ftype "," file_ file_stat  "]}," Zip ZipEntry set_extra_attributes_on_path":{"type":"method","name":"set_extra_attributes_on_path","children":[],"call":["File  chown ","Process  egid == ","Process  egid ","File  chmod ","@unix_perms & "," directory? "," file? ","FileUtils  chown ","FileUtils  chmod "]}," Zip ZipEntry get_extra_attributes_from_path":{"type":"method","name":"get_extra_attributes_from_path","children":[],"call":["stat mode & ","stat mode ","stat gid ","stat uid "," file_stat "," file_stat  mode & "," file_stat  mode "," file_stat  gid "," file_stat  uid "," file_ file_stat  "]}," Zip ZipEntry file_stat":{"type":"method","name":"file_stat","children":[],"call":["File  lstat ","File  stat "]}," Zip ZipEntry extract":{"type":"method","name":"extract","children":[],"call":[" raise "," inspect "," create_symlink "," symlink? "," write_file "," file? "," create_directory "," directory? "," proc ","Zip  options [] ","Zip  options "]}," Zip ZipEntry name_is_directory?":{"type":"method","name":"name_is_directory?","children":[],"call":["(match-with-lvasgn\n  (regexp\n    (str \"\\\\/$\")\n    (regopt))\n  (ivar :@name)) != "]}," Zip ZipEntry symlink?":{"type":"method","name":"symlink?","children":[],"call":["@ftype == "," raise "," inspect "]}," Zip NullDecompressor eof":{"type":"method","name":"eof","children":[],"call":[]}," Zip ZipInputStream eof":{"type":"method","name":"eof","children":[],"call":["@decompressor eof ","@outputBuffer empty? "]}," SolitaireCipher generate_keystream":{"type":"method","name":"generate_keystream","children":[],"call":["result join ","result << ","letter nil? ","deck output_letter ","deck count_cut ","deck triple_cut ","deck move_B ","deck move_A ","result length != ","result length ","@deck dup ","deck output_letter  nil? ","deck output_deck output_letter  ","@deck dup  output_letter ","@deck dup  count_cut ","@deck dup  triple_cut ","@deck dup  move_B ","@deck dup  move_A ","@@deck dup  dup "]}," SolitaireCipher to_chars":{"type":"method","name":"to_chars","children":[],"call":["(send\n  (lvar :numbers) :collect) pack ","x + ","numbers collect "]}," SolitaireCipher to_numbers":{"type":"method","name":"to_numbers","children":[],"call":["x - ","chars unpack collect ","chars unpack "]}," SolitaireCipher encode":{"type":"method","name":"encode","children":[],"call":[" to_chars ","resultNumbers << ","temp - ","temp > ","item + ","cipherNumbers [] ","msgNumbers each_with_index "," to_numbers "," generate_keystream ","msg length ","X * ","5 - ","msg length % ","msg length % == ","msg gsub upcase ","msg gsub ","temp -  - ","item +  - ","temp -  > ","item +  > "," to_numbers  [] "," to_numbers  each_with_index ","msg gsub upcase Numbers each_with_index ","msg gsub upcase  length ","msg gsub upcase  length % ","msg gsub upcase  length % == ","msg gsub upcase  gsub upcase ","msg gsub upcase  gsub "]}," SolitaireCipher decode":{"type":"method","name":"decode","children":[],"call":[" to_chars ","resultNumbers << ","item - ","cipherNumbers [] ","item <= ","msgNumbers each_with_index "," to_numbers "," generate_keystream ","msg length "," to_numbers  [] "," to_numbers  each_with_index "]}," SolitaireCipher initialize":{"type":"method","name":"initialize","children":[],"call":["@deck shuffle ","init == ","Deck  new ","Deck  new  shuffle "]}," Deck move_down":{"type":"method","name":"move_down","children":[],"call":["@deck [] ","index + ","@deck []= ","@deck pop ","index == ","@deck length - ","@deck length ","@deck [] + + ","@deck [] + ","index < ","@deck [] + +  [] ","@deck [] + +  []= ","@deck [] + +  pop ","@deck [] + +  length - ","@deck [] + +  length ","@deck [] + +  [] + + ","@deck [] + +  [] + "]}," Deck naive_shuffle":{"type":"method","name":"naive_shuffle","children":[],"call":["a [] ","a []= "," rand ","a size "]}," Deck fisher_yates_shuffle":{"type":"method","name":"fisher_yates_shuffle","children":[],"call":["a [] ","a []= ","i != "," rand ","i + ","(send\n  (send\n    (lvar :a) :size) :-\n  (int 1)) downto ","a size - ","a size "]}," Deck shuffle":{"type":"method","name":"shuffle","children":[],"call":[" send ","method id2name + ","method id2name "," srand "]}," Deck output_letter":{"type":"method","name":"output_letter","children":[],"call":["(send\n  (lvar :output) :+\n  (int 64)) chr ","output + ","output > ","output instance_of? ","@deck [] ","a instance_of? ","@deck first "," puts ","card value ","(send\n  (send\n    (lvar :num) :-\n    (int 1)) :+\n  (send\n    (str \"A\") :[]\n    (int 0))) chr ","num - + ","A [] ","num - ","card value - ","card value > ","card value == "," [] "," [] value ","(send\n  (lvar :@deck [] ) :+\n  (int 64)) chr ","(send\n  (lv@deck first r :output) :+\n  (int 64)) chr ","@deck []  + ","@deck []  > ","@deck []  instance_of? ","output inst@deck first nce_of? ","@deck first  inst@deck first nce_of? ","c@deck first rd v@deck first lue "," []  value ","(send\n  (send\n    (lv@deck first r :num) :-\n    (int 1)) :+\n  (send\n    (str \"A\") :[]\n    (int 0))) chr ","(send\n  (send\n    (lvar : [] value ) :-\n    (int 1)) :+\n  (send\n    (str \"A\") :[]\n    (int 0))) chr "," [] value  - + "," [] value  - ","c@deck first rd v@deck first lue - "," []  value - ","c@deck first rd v@deck first lue > "," []  value > ","c@deck first rd v@deck first lue == "," []  value == "," [] v@deck first lue "]}," Deck count_cut":{"type":"method","name":"count_cut","children":[],"call":["@deck []= ","(lvar :temp) flatten ","@deck [] ","@deck [] - ","@deck [] + + ","@deck [] + "," number_value "," slice + + ","@cards [] ","@cards length - ","@cards length "," slice + "," slice ","i - ","@cards [] to_i "," dump "," print "," push ","temp [] ","temp slice each ","temp slice ","num - ","temp [] value "," clear "," dup ","@deck [] + +  []= ","(lvar :@deck [] ) flatten ","(lvar : dup ) flatten ","@deck [] + +  [] ","@deck [] + +  [] - ","@deck [] + +  [] + + ","@deck [] + +  [] + "," temp [] value ber_value "," sl@cards [] to_i ce + + "," slice + +  [] "," slice + +  length - "," slice + +  length "," sl@cards [] to_i ce + "," sl@cards [] to_i ce ","@cards [] to_i  - "," slice + +  [] to_i ","@cards [] to_@cards [] to_i  "," pr@cards [] to_i nt ","@deck []  [] "," dup  [] ","@deck []  slice each "," dup  slice each ","temp sl@cards [] to_i ce each ","@deck []  slice "," dup  slice ","temp sl@cards [] to_i ce ","temp [] value  - ","@deck []  [] value "," dup  [] value "]}," Deck triple_cut":{"type":"method","name":"triple_cut","children":[],"call":["@deck replace ","(send\n  (ivar :@deck) :[]\n  (irange\n    (begin\n      (send\n        (lvar :b) :+\n        (int 1)))\n    (int -1))) flatten ","@deck [] ","b + ","a > ","@deck index ","@deck [] + + ","@deck [] + ","bottom + ","jokers max ","jokers min "," slice + + "," slice ","i - "," slice + ","j + ","j < ","@cards index ","@deck repl@deck index ce ","@deck [] + +  replace ","(send\n  (ivar :@deck) :[]\n  (irange\n    (@deck index egin\n      (send\n        (lvar :@deck index ) :+\n        (int 1)))\n    (int -1))) flatten ","(send\n  (iv@deck index r :@deck) :[]\n  (ir@deck index nge\n    (begin\n      (send\n        (lv@deck index r :b) :+\n        (int 1)))\n    (int -1))) fl@deck index tten ","(send\n  (ivar :@deck [] + + ) :[]\n  (irange\n    (begin\n      (send\n        (lvar :b) :+\n        (int 1)))\n    (int -1))) flatten ","(send\n  (@cards index var :@deck) :[]\n  (@cards index range\n    (beg@cards index n\n      (send\n        (lvar :b) :+\n        (@cards index nt 1)))\n    (@cards index nt -1))) flatten ","@deck [] + +  [] ","@deck index  + ","@deck index  > ","@deck [] + +  index ","@deck @cards index ndex ","@deck [] + +  [] + + ","@deck [] + +  [] + ","@deck index ottom + ","jokers m@deck index x ","@cards index okers max ","@cards index okers min ","jokers m@cards index n "," sl@cards index ce + + "," sl@cards index ce ","@cards index  - "," sl@cards index ce + ","@cards index  + ","@cards index  < ","@c@deck index rds index "," slice + +  index ","@cards @cards index ndex "]}," Deck move_B":{"type":"method","name":"move_B","children":[],"call":[" move_down ","@deck index ","2 times "]}," Deck move_A":{"type":"method","name":"move_A","children":[],"call":[" move_down ","@deck index "]}," Deck initialize":{"type":"method","name":"initialize","children":[],"call":["(irange\n  (int 1)\n  (int 52)) to_a << << ","(irange\n  (int 1)\n  (int 52)) to_a << ","(irange\n  (int 1)\n  (int 52)) to_a ","(irange\n  (int 1)\n  (int 52)) to_a + ","@cards << ","Card  new ","RANKS  each ","SUITS  each ","@deck length "," size "," push ","(str \"A\") each ","(str \"C\") each ","Array  new "," build_deck ","(irange\n  (int 1)\n  (int 52)) to_a << <<  length ","(irange\n  (int 1)\n  (int 52)) to_a +  length "]}," test":{"type":"method","name":"test","children":[],"call":[" puts ","e decrypt ","Encrypter  new ","Deck  new ","e encrypt ","d update ","Encrypter  new  dEncrypter  new crypt ","e Deck  new ecrypt ","EncryptEncrypter  new r  nEncrypter  new w ","DEncrypter  new ck  nEncrypter  new w ","Encrypter  new  Encrypter  new ncrypt ","d updatEncrypter  new  ","Deck  new  upDeck  new ate "]}," Encrypter decrypt":{"type":"method","name":"decrypt","children":[],"call":["64 + "," mod ","c - "," process "]}," Encrypter encrypt":{"type":"method","name":"encrypt","children":[],"call":["64 + "," mod ","c + - ","c + "," process "]}," Encrypter process":{"type":"method","name":"process","children":[],"call":["out << ","c chr ","res chr ","combiner call ","key [] ","@keystream get ","c <= ","c >= ","s each_byte "," sanitize ","combiner call  chr ","re sanitize  chr ","@keystream get  [] ","@@keystream get stream get ","@key sanitize tream get "," sanitize  each_byte ","  sanitize anitize "]}," Encrypter mod":{"type":"method","name":"mod","children":[],"call":["c + ","c < ","c - ","c > "]}," Encrypter sanitize":{"type":"method","name":"sanitize","children":[],"call":["out << << ","out << ","s [] ","i * ","(send\n  (send\n    (lvar :s) :size) :/\n  (int 5)) times ","s size / ","s size ","s + ","X * ","(send\n  (int 5) :-\n  (send\n    (send\n      (lvar :s) :size) :%\n    (int 5))) % ","5 - ","s size % ","s gsub ","s upcase ","s +  [] ","s gsub  [] ","s upcase  [] ","(s + end\n  (s + end\n    (lvar :s + ) :s + ize) :/\n  (int 5)) times +  ","(s gsub end\n  (s gsub end\n    (lvar :s gsub ) :s gsub ize) :/\n  (int 5)) times gsub  ","(s upcase end\n  (s upcase end\n    (lvar :s upcase ) :s upcase ize) :/\n  (int 5)) times upcase  ","s +  s + ize / ","s gsub  s gsub ize / ","s upcase  s upcase ize / ","s +  s + ize ","s gsub  s gsub ize ","s upcase  s upcase ize ","s +  + ","s gsub  + ","s upcase  + ","(s + end\n  (int 5) :-\n  (s + end\n    (s + end\n      (lvar :s + ) :s + ize) :%\n    (int 5))) % ","(s gsub end\n  (int 5) :-\n  (s gsub end\n    (s gsub end\n      (lvar :s gsub ) :s gsub ize) :%\n    (int 5))) % ","(s upcase end\n  (int 5) :-\n  (s upcase end\n    (s upcase end\n      (lvar :s upcase ) :s upcase ize) :%\n    (int 5))) % ","s +  s + ize % ","s gsub  s gsub ize % ","s upcase  s upcase ize % ","s +  gs + ub ","s gsub  gs gsub ub ","s upcase  gs upcase ub ","s +  upcas + e ","s gsub  upcas gsub e ","s upcase  upcas upcase e "]}," Encrypter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Deck to_s":{"type":"method","name":"to_s","children":[],"call":["a join ","a << ","@deck [] "," succ? ","i + ","i - ","a [] == ","a [] ","@deck each_index ","@cards join ","(send\n  (ivar :@deck) :map) join ","(send\n  (lvar :v) :+\n  (int 1)) to_s ","v + ","(send\n  (lvar :v) :+\n  (int 13)) chr ","v > ","@deck map ","@cards to_s "]}," Deck get":{"type":"method","name":"get","children":[],"call":["(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :c) :-\n          (int 1))) :%\n      (int 26))) :+\n  (int 65)) chr ","(send\n  (begin\n    (send\n      (lvar :c) :-\n      (int 1))) :%\n  (int 26)) + ","(send\n  (lvar :c) :-\n  (int 1)) % ","c - ","c != "," output "," update ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar : output ) :-\n          (int 1))) :%\n      (int 26))) :+\n  (int 65))  output hr ","(send\n  (begin\n    (send\n      (lvar : output ) :-\n      (int 1))) :%\n  (int 26)) + ","(send\n  (lvar : output ) :-\n  (int 1)) % "," output  - "," output  != "]}," Deck update":{"type":"method","name":"update","children":[],"call":[" count_cut "," triple_cut "," move_b "," move_a "]}," Deck output":{"type":"method","name":"output","children":[],"call":["@deck [] "," number_value "]}," Deck number_value":{"type":"method","name":"number_value","children":[],"call":["x == "]}," Deck move_b":{"type":"method","name":"move_b","children":[],"call":[" move_down ","@deck index "]}," Deck move_a":{"type":"method","name":"move_a","children":[],"call":[" move_down ","@deck index "]}," succ?":{"type":"method","name":"succ?","children":[],"call":["a [] succ != ","a [] ","i + ","a [] succ ","(irange\n  (int 0)\n  (begin\n    (send\n      (send\n        (lvar :a) :size) :-\n      (int 2)))) each ","a size - ","a size "]}," Fixnum offset_mod":{"type":"method","name":"offset_mod","children":[],"call":["(send\n  (begin\n    (send\n      (self) :-\n      (int 1))) :%\n  (lvar :base)) + ","(send\n  (self) :-\n  (int 1)) % "," - "]}," Array collect_peel":{"type":"method","name":"collect_peel","children":[],"call":["collected << ","p call "," peel "]}," Array peel":{"type":"method","name":"peel","children":[],"call":["a [] "," collect ","(send nil :collect) min times ","(send nil :collect) min ","a length "]}," TestFixnum test_offset_mod":{"type":"method","name":"test_offset_mod","children":[],"call":[" assert_equal ","-1 offset_mod ","0 offset_mod ","26 offset_mod ","27 offset_mod "]}," TestArray test_collect_peel":{"type":"method","name":"test_collect_peel","children":[],"call":[" assert_equal ","a + ","(lvar :a1) collect_peel "]}," TestArray test_peel_one_array_shorter":{"type":"method","name":"test_peel_one_array_shorter","children":[],"call":[" assert_equal ","tuples << ","(lvar :a1) peel "]}," TestArray test_peel_all_arrays_same_length":{"type":"method","name":"test_peel_all_arrays_same_length","children":[],"call":[" assert_equal ","tuples << ","(lvar :a1) peel "]}," Solitaire TestSuit test_hearts":{"type":"method","name":"test_hearts","children":[],"call":[" assert_equal ","Suit HEARTS  name "]}," Solitaire TestSuit test_by_value_hearts":{"type":"method","name":"test_by_value_hearts","children":[],"call":[" assert_equal ","Suit  by_value name ","Suit  by_value "]}," Solitaire TestSuit test_by_value_clubs":{"type":"method","name":"test_by_value_clubs","children":[],"call":[" assert_equal ","Suit  by_value name ","Suit  by_value "]}," Solitaire TestCard test_is_joker_when_not_joker":{"type":"method","name":"test_is_joker_when_not_joker","children":[],"call":[" assert ","Card  new is_joker? ! ","Card  new is_joker? ","Card  new "]}," Solitaire TestCard test_is_joker_when_joker":{"type":"method","name":"test_is_joker_when_joker","children":[],"call":[" assert ","Card  joker is_joker? ","Card  joker "]}," Solitaire TestCard test_value":{"type":"method","name":"test_value","children":[],"call":[" assert_equal ","Card  joker value ","Card  joker ","Card  new value ","Card  new "]}," Solitaire TestCard test_parse_normal_card":{"type":"method","name":"test_parse_normal_card","children":[],"call":[" assert_equal ","Card  parse ","Card  new "]}," Solitaire TestCard test_parse_joker_char":{"type":"method","name":"test_parse_joker_char","children":[],"call":[" assert_equal ","Card  parse ","Card  joker "]}," Solitaire TestCard test_parse_joker_string":{"type":"method","name":"test_parse_joker_string","children":[],"call":[" assert_equal ","Card  parse ","Card  joker "]}," Solitaire TestDeck test_count_cut":{"type":"method","name":"test_count_cut","children":[],"call":[" assert_equal ","Deck  new ","deck count_cut! ","deck move_card! ","Card  new ","Deck  new  count_cut! ","Deck  new  move_card! "]}," Solitaire TestDeck test_triple_cut_with_empty_side":{"type":"method","name":"test_triple_cut_with_empty_side","children":[],"call":[" assert_equal ","Deck  new ","deck triple_cut! ","Card  joker ","Deck  new  triple_cut! "]}," Solitaire TestDeck test_triple_cut":{"type":"method","name":"test_triple_cut","children":[],"call":[" assert_equal ","Deck  new ","deck triple_cut! ","Card  new ","Deck  new  triple_cut! "]}," Solitaire TestDeck test_move_card_cyclic_backward_five":{"type":"method","name":"test_move_card_cyclic_backward_five","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  new ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_is_cyclic_pass_end_backward":{"type":"method","name":"test_move_card_is_cyclic_pass_end_backward","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  new ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_is_cyclic_pass_end_forward":{"type":"method","name":"test_move_card_is_cyclic_pass_end_forward","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  joker ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_to_beginning":{"type":"method","name":"test_move_card_to_beginning","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  new ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_to_one_before_end":{"type":"method","name":"test_move_card_to_one_before_end","children":[],"call":[" assert_equal ","deck to_s ","Deck  new to_s ","Deck  new ","deck move_card! ","Card  joker ","Deck  new  to_s ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_to_end":{"type":"method","name":"test_move_card_to_end","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  joker ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_is_cyclic_plus_1":{"type":"method","name":"test_move_card_is_cyclic_plus_1","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  joker ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_higher":{"type":"method","name":"test_move_card_higher","children":[],"call":[" assert_equal ","Deck  new ","deck move_card! ","Card  new ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_one_lower":{"type":"method","name":"test_move_card_one_lower","children":[],"call":[" assert_equal ","deck to_s ","Deck  new to_s ","Deck  new ","deck move_card! ","Card  new ","Deck  new  to_s ","Deck  new  move_card! "]}," Solitaire TestDeck test_move_card_lower":{"type":"method","name":"test_move_card_lower","children":[],"call":[" assert_equal ","deck to_s ","Deck  new to_s ","Deck  new ","deck move_card! ","Card  new ","Deck  new  to_s ","Deck  new  move_card! "]}," Solitaire TestDeck test_construcor_accepts_chars_for_jokers":{"type":"method","name":"test_construcor_accepts_chars_for_jokers","children":[],"call":[" assert_equal ","Deck  new ","(irange\n  (int 1)\n  (int 52)) to_a + ","(irange\n  (int 1)\n  (int 52)) to_a "]}," Solitaire TestDeck test_constructor_accepts_ranges_in_array":{"type":"method","name":"test_constructor_accepts_ranges_in_array","children":[],"call":[" assert_equal ","Deck  new "]}," Solitaire TestCipher test_crypt_idempotent":{"type":"method","name":"test_crypt_idempotent","children":[],"call":[" assert_equal ","cipher crypt ","cipher mode ","Cipher  new ","Cipher  new  crypt ","Cipher  new  mode "]}," Solitaire TestCipher test_decrypt":{"type":"method","name":"test_decrypt","children":[],"call":[" assert_equal ","cipher crypt ","cipher mode ","Cipher  new ","Cipher  new  crypt ","Cipher  new  mode "]}," Solitaire TestCipher test_encrypt":{"type":"method","name":"test_encrypt","children":[],"call":[" assert_equal ","cipher crypt ","cipher mode ","Cipher  new ","Cipher  new  crypt ","Cipher  new  mode "]}," Solitaire TestKeystream test_card_to_letter":{"type":"method","name":"test_card_to_letter","children":[],"call":[" assert_equal ","Keystream  card_to_letter ","Card  new ","Card  joker "]}," Solitaire TestKeystream test_keystream_letters":{"type":"method","name":"test_keystream_letters","children":[],"call":[" assert_equal ","@keystream keystream_letters ","chunker chunks ","Chunker  new ","Chunker  new  chunks "]}," Solitaire TestKeystream setup":{"type":"method","name":"setup","children":[],"call":["Keystream  new "]}," Solitaire TestChunker test_to_letters":{"type":"method","name":"test_to_letters","children":[],"call":[" assert_equal ","Chunker  to_letters "]}," Solitaire TestChunker test_number_chunks":{"type":"method","name":"test_number_chunks","children":[],"call":[" assert_equal ","chunker number_chunks ","Chunker  new ","Chunker  new  number_chunks "]}," Solitaire TestChunker test_pads_with_Xs":{"type":"method","name":"test_pads_with_Xs","children":[],"call":[" assert_equal ","chunker chunks ","Chunker  new ","Chunker  new  chunks "]}," Solitaire TestChunker test_chunks":{"type":"method","name":"test_chunks","children":[],"call":[" assert_equal ","chunker chunks ","Chunker  new ","Chunker  new  chunks "]}," Solitaire Suit initialize":{"type":"method","name":"initialize","children":[],"call":["@@byValue []= "]}," Solitaire Suit by_value":{"type":"method","name":"by_value","children":[],"call":[]}," Solitaire JokerCard value":{"type":"method","name":"value","children":[],"call":[]}," Solitaire JokerCard is_joker?":{"type":"method","name":"is_joker?","children":[],"call":[]}," Solitaire JokerCard initialize":{"type":"method","name":"initialize","children":[],"call":["52 + ","which_one [] to_i - ","which_one [] to_i ","which_one [] "," raise ","which_one =~ "]}," Solitaire Card to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Solitaire Card <=>":{"type":"method","name":"<=>","children":[],"call":[" code <=> ","other code "," code "]}," Solitaire Card ==":{"type":"method","name":"==","children":[],"call":[" code == ","other code "," code "]}," Solitaire Card is_joker?":{"type":"method","name":"is_joker?","children":[],"call":[]}," Solitaire Card joker":{"type":"method","name":"joker","children":[],"call":[]}," Solitaire Card parse":{"type":"method","name":"parse","children":[],"call":[]}," Solitaire Card initialize":{"type":"method","name":"initialize","children":[],"call":["suit value + ","suit value "]}," Solitaire Deck ==":{"type":"method","name":"==","children":[],"call":["@order == ","val order "]}," Solitaire Deck to_s":{"type":"method","name":"to_s","children":[],"call":["@order inspect "]}," Solitaire Deck count_cut!":{"type":"method","name":"count_cut!","children":[],"call":["@order [] + + ","@order last ","@order [] + ","@order [] ","num_moved - ","NUM_CARDS  - - ","NUM_CARDS  - ","num_moved != ","Card  parse value ","Card  parse ","@order [] + +  [] + + ","@order [] + +  last ","@order [] + +  [] + ","@order [] + +  [] ","Card  parse value  - ","Card  parse value  != "]}," Solitaire Deck triple_cut!":{"type":"method","name":"triple_cut!","children":[],"call":["@order [] + + ","@order [] ","indices [] - ","indices [] ","@order [] + ","@order size ","indices [] + ","(send\n  (ivar :@order) :index\n  (send\n    (send\n      (lvar :cards) :[]\n      (int 0)) :code)) sort ","@order index ","cards [] code ","cards [] "," raise ","cards size == ","cards size ","@order [] + +  [] + + ","@order [] + +  [] ","(send\n  (ivar :@order) :index\n  (send\n    (send\n      (lvar :cards) :[]\n      (int 0)) :code)) sort  [] - ","(send\n  (ivar :@order) :index\n  (send\n    (send\n      (lvar :cards) :[]\n      (int 0)) :code)) sort  [] ","@order [] + +  [] + ","@order [] + +  size ","(send\n  (ivar :@order) :index\n  (send\n    (send\n      (lvar :cards) :[]\n      (int 0)) :code)) sort  [] + ","(send\n  (ivar :@order [] + + ) :index\n  (send\n    (send\n      (lvar :cards) :[]\n      (int 0)) :code)) sort ","@order [] + +  index "]}," Solitaire Deck move_card!":{"type":"method","name":"move_card!","children":[],"call":["@order insert ","card code ","@order delete_at ","NUM_CARDS  - ","new_index < ","new_index >= ","current_index + ","@order index ","current_index +  < ","current_index +  >= ","@order index  + "]}," Solitaire Deck []":{"type":"method","name":"[]","children":[],"call":["Card  parse ","@order [] "]}," Solitaire Deck initialize":{"type":"method","name":"initialize","children":[],"call":["Card  parse code ","Card  parse ","@order collect! ","(send\n  (lvar :order) :collect) flatten ","val to_a ","val instance_of? ","order collect ","x + ","Array  new ","order nil? ","(send\n  (lvar :order) :collect) flatten  collect! "]}," Solitaire Cipher crypt":{"type":"method","name":"crypt","children":[],"call":["Chunker  to_letters join rstrip ","Chunker  to_letters join ","Chunker  to_letters ","@calc_number call offset_mod ","@calc_number call ","(lvar :num_chunk) collect_peel ","(send\n  (ivar :@chunker) :number_chunks) collect_peel ","@keystream_chunker number_chunks ","@chunker number_chunks "]}," Solitaire Cipher initialize":{"type":"method","name":"initialize","children":[],"call":["num + "," proc ","num - ","text =~ ","Chunker  new ","keystream keystream_letters join ","keystream keystream_letters ","@chunker chunks ","Keystream  new ","Keystream  new  Keystream  new _letters join ","Keystream  new  Keystream  new _letters ","Chunker  new  chunks "]}," Solitaire Keystream process_deck":{"type":"method","name":"process_deck","children":[],"call":["@deck count_cut! ","@deck triple_cut! ","@deck move_card! "]}," Solitaire Keystream next_keystream_letter":{"type":"method","name":"next_keystream_letter","children":[],"call":[" next_keystream_letter ","letter == ","Keystream  card_to_letter ","@deck [] ","top_card value "," process_deck "," next_keystream_ next_keystream_letter  "," next_keystream_Keystream  card_to_letter  "," next_keystream_letter  == ","Keystream  card_to_letter  == ","Keystream  card_to_ next_keystream_letter  ","Keystream  card_to_Keystream  card_to_letter  ","@deck []  value "]}," Solitaire Keystream card_to_letter":{"type":"method","name":"card_to_letter","children":[],"call":[]}," Solitaire Keystream keystream_letters":{"type":"method","name":"keystream_letters","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (send\n        (lvar :chunk) :size))) :collect) join "," next_keystream_letter ","(irange\n  (int 1)\n  (send\n    (lvar :chunk) :size)) collect ","chunk size ","chunks collect "]}," Solitaire Keystream initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Solitaire Chunker to_letters":{"type":"method","name":"to_letters","children":[],"call":[]}," Solitaire Chunker number_chunks":{"type":"method","name":"number_chunks","children":[],"call":["char_string [] - ","char_string [] ","chunk split collect ","chunk split "," chunks collect "," chunks ","@number_chunks size > ","@number_chunks size "]}," Solitaire Chunker chunks":{"type":"method","name":"chunks","children":[],"call":["@legal_chars_only gsub rstrip split ","@legal_chars_only gsub rstrip ","@legal_chars_only gsub ","@chunks size > ","@chunks size ","@legal_chars_only gsub rstrip split  size > ","@legal_chars_only gsub rstrip split  size "]}," Solitaire Chunker initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@legal_chars_only size == ","@legal_chars_only size ","X * ","@legal_chars_only size -@ % ","@legal_chars_only size -@ ","text gsub upcase ","text gsub ","text gsub upcase  size == ","text gsub upcase  size ","text gsub upcase  size -@ % ","text gsub upcase  size -@ "]}," SolitaireCypherTest test_encrypt_known_message":{"type":"method","name":"test_encrypt_known_message","children":[],"call":[" assert_equal ","@crypt_keeper encrypt "]}," SolitaireCypherTest test_decrypt_known_cypher":{"type":"method","name":"test_decrypt_known_cypher","children":[],"call":[" assert_equal ","@crypt_keeper decrypt "]}," SolitaireCypherTest test_keystream":{"type":"method","name":"test_keystream","children":[],"call":["@errors << ","Card  value_to_chr ","exp != ","deck next_keystream ","expected each ","Deck  new key ","Deck  new ","deck next_deck next_keystream stream ","Deck  new key  next_keystream ","Deck  new deck next_keystream  "]}," SolitaireCypherTest test_chr_to_value":{"type":"method","name":"test_chr_to_value","children":[],"call":[" assert_equal ","Card  chr_to_value "]}," SolitaireCypherTest test_value_to_chr":{"type":"method","name":"test_value_to_chr","children":[],"call":[" assert_equal ","Card  value_to_chr "]}," SolitaireCypherTest setup":{"type":"method","name":"setup","children":[],"call":["CryptKeeper  new ","Deck  new key ","Deck  new "]}," prep_arg":{"type":"method","name":"prep_arg","children":[],"call":["words join ","X * ","5 - ","words [] ","words length - ","words length ","last_len < ","words [] length ","str []= ","words << ","str [] ","str length > ","str length ","str upcase gsub ","str upcase ","words [] length  < ","str upcase gsub  []= ","str upcase gsub  [] ","str upcase gsub  length > ","str upcase gsub  length ","str upcase gsub  upcase gsub ","str upcase gsub  upcase "]}," CryptKeeper crypto_each":{"type":"method","name":"crypto_each","children":[],"call":["str split each ","str split ","@keyed_deck dup "]}," CryptKeeper encrypt":{"type":"method","name":"encrypt","children":[],"call":["answer << ","Card  value_to_chr ","sum > ","msg_num + ","@deck next_keystream ","Card  chr_to_value ","c == ","str split each ","str split ","@keyed_deck dup ","msg_num +  > ","Card  chr_to_value  + ","@deck next_@deck next_keystream stream ","@keyed_deck dup  next_keystream ","@@deck next_keystream ed_deck dup "]}," CryptKeeper decrypt":{"type":"method","name":"decrypt","children":[],"call":["answer << ","Card  value_to_chr ","diff < ","msg_num - ","@deck next_keystream ","Card  chr_to_value ","c == ","str split each ","str split ","@keyed_deck dup ","msg_num -  < ","Card  chr_to_value  - ","@deck next_@deck next_keystream stream ","@keyed_deck dup  next_keystream ","@@deck next_keystream ed_deck dup "]}," CryptKeeper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Deck output_number":{"type":"method","name":"output_number","children":[],"call":["num > ","@cards [] to_i ","@cards [] ","@cards length ","i >= ","@cards [] to_i  > ","@cards [] to_@cards [] to_i  ","@cards [] to_i  >= "]}," Deck slice":{"type":"method","name":"slice","children":[],"call":["@cards [] "]}," Deck move":{"type":"method","name":"move","children":[],"call":["@cards []= ","@cards length - ","@cards length ","new_pos >= ","old_pos + ","@cards index ","old_pos +  >= ","@cards index  + "]}," Deck generate_next_keystream_value":{"type":"method","name":"generate_next_keystream_value","children":[],"call":[" output_number "," count_cut "," triple_cut "," move "]}," Deck next_keystream":{"type":"method","name":"next_keystream","children":[],"call":[" generate_next_keystream_value ","val != "," generate_next_keystream_ generate_next_keystream_value ue "," generate_next_keystream_value  != "]}," Deck key":{"type":"method","name":"key","children":[],"call":[]}," Card chr":{"type":"method","name":"chr","children":[],"call":["Card  value_to_chr "]}," Card to_i":{"type":"method","name":"to_i","children":[],"call":[]}," Card to_s":{"type":"method","name":"to_s","children":[],"call":["@value to_s ","Card  to_s "]}," Card initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (const nil :SUITS) :index\n    (lvar :suit)) :*\n  (int 13)) + + ","(send\n  (send\n    (const nil :SUITS) :index\n    (lvar :suit)) :*\n  (int 13)) + ","RANKS  index ","SUITS  index * ","SUITS  index ","rank == "," exit "," puts "," joker "," calc_value ","rank + ","@@SUITS [] "]}," Card chr_to_value":{"type":"method","name":"chr_to_value","children":[],"call":[]}," Card value_to_chr":{"type":"method","name":"value_to_chr","children":[],"call":[]}," TC_UnkeyedAlgorithm test_new_deck":{"type":"method","name":"test_new_deck","children":[],"call":[" assert_equal ","deck to_a ","@algo new_deck ","(irange\n  (int 1)\n  (int 52)) to_a + ","(irange\n  (int 1)\n  (int 52)) to_a ","@algo new_deck  to_a ","@algo new_@algo new_deck  "]}," TC_UnkeyedAlgorithm setup":{"type":"method","name":"setup","children":[],"call":["UnkeyedAlgorithm  new "]}," TC_SolitaireCipher test_decrypt_good":{"type":"method","name":"test_decrypt_good","children":[],"call":[" assert_equal ","@cipher decrypt "]}," TC_SolitaireCipher test_decrypt_bad":{"type":"method","name":"test_decrypt_bad","children":[],"call":["@cipher decrypt "," assert_raise "]}," TC_SolitaireCipher test_encrypt":{"type":"method","name":"test_encrypt","children":[],"call":[" assert_equal ","@cipher encrypt "]}," TC_SolitaireCipher test_use_algorithm":{"type":"method","name":"test_use_algorithm","children":[],"call":[" assert_equal ","@cipher decrypt ","@cipher encrypt ","@cipher use_algorithm "]}," TC_SolitaireCipher setup":{"type":"method","name":"setup","children":[],"call":["@cipher stream= ","KeyStream  new ","@cipher algorithms= ","MockAlgorithms  new ","SolitaireCipher  new ","UnkeyedAlgorithm  new ","SolitaireCipher  new  stream= ","SolitaireCipher  new  algorithms= "]}," TC_SolitaireCipher MockAlgorithm new_deck":{"type":"method","name":"new_deck","children":[],"call":["MockDeck  new "]}," TC_SolitaireCipher MockDeck cipher_letter":{"type":"method","name":"cipher_letter","children":[],"call":[]}," TC_SolitaireCipher MockDeck cipher_shuffle!":{"type":"method","name":"cipher_shuffle!","children":[],"call":[]}," TC_SolitaireCipher MockAlgorithms get":{"type":"method","name":"get","children":[],"call":["MockAlgorithm  new "]}," TC_KeyingAlgorithms test_get_found":{"type":"method","name":"test_get_found","children":[],"call":[" assert_equal ","@algorithms get "]}," TC_KeyingAlgorithms test_get_not_found":{"type":"method","name":"test_get_not_found","children":[],"call":["@algorithms get "," assert_raise "]}," TC_KeyingAlgorithms setup":{"type":"method","name":"setup","children":[],"call":["@algorithms registry= ","MockRegistry  new ","@algorithms algorithms= ","KeyingAlgorithms  new ","KeyingAlgorithms  new  registry= ","KeyingAlgorithms  new  algorithms= "]}," TC_KeyingAlgorithms MockRegistry service":{"type":"method","name":"service","children":[],"call":["name == "]}," TC_KeyStream test_next":{"type":"method","name":"test_next","children":[],"call":[" assert_equal ","@stream next ","expected each "]}," TC_KeyStream setup":{"type":"method","name":"setup","children":[],"call":["@stream deck= ","Deck  new ","KeyStream  new ","KeyStream  new  deck= "]}," TC_Deck test_letter":{"type":"method","name":"test_letter","children":[],"call":[" assert_equal ","@deck cipher_letter ","@deck cipher_shuffle! ","expected each "]}," TC_Deck test_shuffle":{"type":"method","name":"test_shuffle","children":[],"call":[" assert_equal ","@deck to_a ","(irange\n  (int 2)\n  (int 52)) to_a + ","(irange\n  (int 2)\n  (int 52)) to_a ","@deck cipher_shuffle! "]}," TC_Deck test_content":{"type":"method","name":"test_content","children":[],"call":[" assert_equal ","@deck to_a ","(irange\n  (int 1)\n  (int 52)) to_a + ","(irange\n  (int 1)\n  (int 52)) to_a "]}," TC_Deck setup":{"type":"method","name":"setup","children":[],"call":["Deck  new "]}," CLI run":{"type":"method","name":"run","children":[],"call":[" puts ","@cipher encrypt inspect ","@cipher encrypt ","arg inspect ","@cipher decrypt inspect ","@cipher decrypt ","arg =~ ","@options strings each ","@options strings ","@cipher use_algorithm ","@options keying_algorithm ","@options run_app? "]}," ShuffleAlgorithm new_deck":{"type":"method","name":"new_deck","children":[],"call":["deck cards= "," rand - "," rand ","cards sort! ","7 times "," srand ","(or\n  (send\n    (ivar :@options) :[]\n    (str \"seed\"))\n  (int 0)) to_i ","@options [] ","deck to_a ","Deck  new ","deck deck to_a = ","Deck  new  cards= ","deck to_a  sort! ","(or\n  (send\n    (ivar :@options) :[]\n    (str \"(or\n  (send\n    (ivar :@options) :[]\n    (str \"seed\"))\n  (int 0)) to_i \"))\n  (int 0)) to_i ","Deck  new  to_a "]}," BackwardsAlgorithm new_deck":{"type":"method","name":"new_deck","children":[],"call":["deck cards= ","deck to_a reverse ","deck to_a ","Deck  new ","Deck  new  cards= ","Deck  new  to_a reverse ","Deck  new  to_a "]}," Options run_app?":{"type":"method","name":"run_app?","children":[],"call":[]}," Options []":{"type":"method","name":"[]","children":[],"call":["@named_options [] "]}," Options initialize":{"type":"method","name":"initialize","children":[],"call":["opts parse! "," puts ","opts on_tail ","opts separator ","opts on ","@named_options []= ","pair split ","opts banner= ","OptionParser  new ","Hash  new ","Hash  new  []= "]}," SolitaireCipher reset":{"type":"method","name":"reset","children":[],"call":["@stream deck= ","@algorithm new_deck "]}," SolitaireCipher generate_key":{"type":"method","name":"generate_key","children":[],"call":["c [] - ","c [] ","key map ","key << ","@stream next ","length times "]}," SolitaireCipher decrypt":{"type":"method","name":"decrypt","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :chars) :zip\n        (lvar :key)) :map)\n    (args\n      (arg :c)\n      (arg :k))\n    (begin\n      (if\n        (send\n          (lvar :k) :>=\n          (lvar :c))\n        (send\n          (send\n            (lvar :c) :+\n            (int 26)) :-\n          (lvar :k))\n        (send\n          (lvar :c) :-\n          (lvar :k))))) :map) join ","(send\n  (lvar :c) :+\n  (int 64)) chr ","c + ","(send\n  (send\n    (lvar :chars) :zip\n    (lvar :key)) :map) map ","c - ","c + - ","k >= ","chars zip map ","chars zip "," generate_key ","chars length ","c [] - ","c [] ","(send\n  (send\n    (lvar :message) :split\n    (regexp\n      (regopt))) :reject) map ","c == ","message split reject ","message split "," reset "," raise ","message inspect ","message =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :chars) :zip\n        (lvar : generate_key )) :map)\n    (args\n      (arg :c)\n      (arg :k))\n    (begin\n      (if\n        (send\n          (lvar :k) :>=\n          (lvar :c))\n        (send\n          (send\n            (lvar :c) :+\n            (int 26)) :-\n          (lvar :k))\n        (send\n          (lvar :c) :-\n          (lvar :k))))) :map) join ","(send\n  (send\n    (lvar :chars) :zip\n    (lvar : generate_key )) :map) map "," generate_ generate_key  "]}," SolitaireCipher encrypt":{"type":"method","name":"encrypt","children":[],"call":["msg << ","code shift ","5 times ","msg length > ","msg length ","(send\n  (send\n    (lvar :code) :length) :/\n  (int 5)) times ","code length / ","code length ","(send\n  (lvar :c) :+\n  (int 64)) chr ","c + ","(send\n  (send\n    (lvar :chars) :zip\n    (lvar :key)) :map) map ","c + - ","c + > ","chars zip map ","chars zip "," generate_key ","chars length ","c [] - ","c [] ","chars map! ","chars concat ","(str \"X\") * ","5 - ","chars length % ","chars length % > ","c !~ ","(send\n  (send\n    (lvar :message) :split\n    (regexp\n      (regopt))) :map) reject ","c upcase ","message split map ","message split "," reset ","(send\n  (send\n    (lvar :chars) :zip\n    (lvar : generate_key )) :map) map "," generate_ generate_key  "]}," SolitaireCipher use_algorithm":{"type":"method","name":"use_algorithm","children":[],"call":["@algorithms get ","@algorithms get s get "]}," KeyStream next":{"type":"method","name":"next","children":[],"call":["@deck cipher_letter ","@deck cipher_shuffle! "," loop ","@deck cipher_@deck cipher_letter  "]}," UnkeyedAlgorithm new_deck":{"type":"method","name":"new_deck","children":[],"call":["Deck  new "]}," KeyingAlgorithms get":{"type":"method","name":"get","children":[],"call":["@registry service "," raise ","name inspect ","svc_name nil? ","@algorithms [] ","@algorithms []  nil? "]}," Deck reposition_card":{"type":"method","name":"reposition_card","children":[],"call":["@deck insert ","1 + ","new_pos % ","new_pos >= ","pos + ","@deck delete_at ","@deck index ","1 +  % ","pos +  % ","new_@deck index  % ","1 +  >= ","pos +  >= ","new_@deck index  >= ","@deck index  + "]}," Deck cards=":{"type":"method","name":"cards=","children":[],"call":[" raise ","@deck include? ","@deck length "," update_order ","cards flatten "]}," Deck to_a":{"type":"method","name":"to_a","children":[],"call":["@deck dup "]}," Deck cipher_letter":{"type":"method","name":"cipher_letter","children":[],"call":["(send\n  (lvar :result) :+\n  (int 64)) chr ","result + ","result > ","result is_a? ","@deck [] ","count is_a? ","@deck first ","(send\n  (lvar :@deck [] ) :+\n  (int 64)) chr ","@deck []  + ","@deck []  > ","@deck []  is_a? ","@deck first  is_a? "]}," Deck cipher_shuffle!":{"type":"method","name":"cipher_shuffle!","children":[],"call":["@deck [] + + ","@deck last ","@deck [] + ","@deck [] ","bottom + ","joker_A > ","joker_A < ","@deck index "," reposition_card ","@deck [] + +  [] + + ","@deck [] + +  last ","@deck [] + +  [] + ","@deck [] + +  [] ","@deck index  > ","@deck index  < ","@deck [] + +  index "]}," generate":{"type":"method","name":"generate","children":[],"call":["key_stream []= ","i < ","key_stream size ","key_stream join ","(send\n  (send\n    (lvar :number) :-\n    (int 1)) :+\n  (str \"A\")) chr ","number - + ","number - ","(send\n  (send\n    (send\n      (lvar :number) :-\n      (int 26)) :-\n    (int 1)) :+\n  (str \"A\")) chr ","number - - + ","number - - ","number > ","key_stream map! ","key_stream push ","$deck [] ","$deck [] kind_of? ","$deck values_at ","bottom + ","(lvar :a) max ","(lvar :a) min ","$deck index ","$deck insert ","$deck delete_at ","b + ","b == ","$deck pop ","a + ","a == ","key_stream size == ","key_stream join  []= ","key_stre$deck index m []= ","key_stream join  size ","key_stre$deck index m size ","key_stream join  join ","key_stre$deck index m join ","(send\n  (send\n    (lvar :num$deck index er) :-\n    (int 1)) :+\n  (str \"A\")) chr ","(send\n  (send\n    (lv$deck index r :number) :-\n    (int 1)) :+\n  (str \"A\")) chr ","num$deck index er - + ","num$deck index er - ","(send\n  (send\n    (send\n      (lvar :num$deck index er) :-\n      (int 26)) :-\n    (int 1)) :+\n  (str \"A\")) chr ","(send\n  (send\n    (send\n      (lv$deck index r :number) :-\n      (int 26)) :-\n    (int 1)) :+\n  (str \"A\")) chr ","num$deck index er - - + ","num$deck index er - - ","num$deck index er > ","key_stream join  map! ","key_stre$deck index m m$deck index p! ","key_stream join  push ","key_stre$deck index m push ","$deck values_at  [] ","$deck values_at  [] kind_of? ","$deck values_at  values_at ","$deck v$deck index lues_$deck index t ","(lvar :a) max  + ","$deck index ottom + ","(lv$deck index r :$deck index ) m$deck index x ","(lv$deck index r :$deck index ) min ","$deck values_at  index ","$deck values_at  insert ","$deck values_at  delete_at ","$deck delete_$deck index t ","$deck index  + ","$deck index  == ","$deck values_at  pop ","key_stream join  size == ","key_stre$deck index m size == "]}," decrypt":{"type":"method","name":"decrypt","children":[],"call":["(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join ","(send\n  (send\n    (lvar :number) :-\n    (int 1)) :+\n  (str \"A\")) chr ","number - + ","number - ","values map ","values []= ","value - ","key_values [] ","value + - ","value + ","value <= ","value < ","values each_with_index ","letter [] - + ","letter [] - ","letter [] ","key_stream split map ","key_stream split ","message split map ","message split "," generate ","message size "," generate  split map "," generate  split ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  split map ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  split ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  size "]}," encrypt":{"type":"method","name":"encrypt","children":[],"call":["(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join ","(send\n  (send\n    (lvar :number) :-\n    (int 1)) :+\n  (str \"A\")) chr ","number - + ","number - ","values map ","values [] ","values [] > ","values []= ","value + ","key_values [] ","value < ","values each_with_index ","letter [] - + ","letter [] - ","letter [] ","key_stream split map ","key_stream split ","message split map ","message split "," generate ","message count ","message rindex != ","message size - ","message size ","message rindex ","message []= ","i < ","message upcase tr ","message upcase "," generate  split map "," generate  split ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  split map ","message upcase tr  split map ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  split ","message upcase tr  split ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  count ","message upcase tr  count ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  rindex != ","message upcase tr  rindex != ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  size - ","message upcase tr  size - ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  size ","message upcase tr  size ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  rindex ","message upcase tr  rindex ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  []= ","message upcase tr  []= ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  upcase tr ","message upcase tr  upcase tr ","(block\n  (send\n    (lvar :values) :map)\n  (args\n    (arg :number))\n  (send\n    (begin\n      (send\n        (send\n          (lvar :number) :-\n          (int 1)) :+\n        (str \"A\"))) :chr)) join  upcase ","message upcase tr  upcase "]}," nums2message":{"type":"method","name":"nums2message","children":[],"call":["result << ","(send\n  (send\n    (lvar :val) :-\n    (int 1)) :+\n  (send\n    (str \"A\") :[]\n    (int 0))) chr ","val - + ","A [] ","val - ","nums each "]}," message2nums":{"type":"method","name":"message2nums","children":[],"call":["result push ","c + - ","A [] ","c + ","msg each_byte "]}," Deck keystream_message":{"type":"method","name":"keystream_message","children":[],"call":["result << "," output_letter "," count_cut "," triple_cut_split "," find_joker "," move_card_down ","result length < ","msg length ","result length "," output_ output_letter  "]}," Deck triple_cut_split":{"type":"method","name":"triple_cut_split","children":[],"call":[" dump "," print "," push ","temp slice each ","temp slice ","a - ","b + "," clear "," dup ","a > "," dup  slice each "," dup  slice "]}," Deck move_card_down":{"type":"method","name":"move_card_down","children":[],"call":[" dump "," print "," push ","temp slice each ","temp slice "," << "," clear "," dup "," delete_at "," size - "," size ","dest >= ","pos + "," dup  slice each "," dup  slice ","pos +  >= "]}," Deck find_joker":{"type":"method","name":"find_joker","children":[],"call":[" puts "," [] face_value == "," [] face_value "," [] "," each_index "]}," Deck dump":{"type":"method","name":"dump","children":[],"call":[" exit "," puts "," size ","@deck_size != "," print ","c value ","c face_value ","c value == "," each "]}," Card calc_value":{"type":"method","name":"calc_value","children":[],"call":[" puts "]}," Solitaire decrypt":{"type":"method","name":"decrypt","children":[],"call":[" pretty ","result << "," number_to_letter ","(send\n  (lvar :source_num) :-\n  (lvar :key_num)) % ","source_num - "," letter_to_number ","keystream shift ","text [] ","0 upto ","text size - ","text size "," clean ","KeyStream  new "," pretty  << ","(send\n  (lvar :source_num) :-\n  (lvar : letter_to_number )) % ","(send\n  (lvar : letter_to_number ) :-\n  (lvar :key_num)) % "," letter_to_number  - "," clean  [] "," clean  size - "," clean  size "]}," Solitaire encrypt":{"type":"method","name":"encrypt","children":[],"call":[" pretty ","result << "," number_to_letter ","(send\n  (lvar :source_num) :+\n  (lvar :key_num)) % ","source_num + "," letter_to_number ","keystream shift ","text [] ","0 upto ","text size - ","text size ","X * ","(send\n  (send\n    (lvar :text) :size) :/\n  (float 5.0)) ceil * - ","(send\n  (send\n    (lvar :text) :size) :/\n  (float 5.0)) ceil * ","(send\n  (send\n    (lvar :text) :size) :/\n  (float 5.0)) ceil ","text size / "," clean ","KeyStream  new "," pretty  << ","(send\n  (lvar :source_num) :+\n  (lvar : letter_to_number )) % ","(send\n  (lvar : letter_to_number ) :+\n  (lvar :key_num)) % "," letter_to_number  + "," clean  [] "," clean  size - "," clean  size ","(send\n  (send\n    (lvar : clean ) :size) :/\n  (float 5.0)) ceil * - ","(send\n  (send\n    (lvar : clean ) :size) :/\n  (float 5.0)) ceil * ","(send\n  (send\n    (lvar : clean ) :size) :/\n  (float 5.0)) ceil "," clean  size / "]}," Solitaire pretty":{"type":"method","name":"pretty","children":[],"call":[" clean scan join "," clean scan "," clean "]}," Solitaire clean":{"type":"method","name":"clean","children":[],"call":["text upcase delete ","text upcase "]}," Solitaire number_to_letter":{"type":"method","name":"number_to_letter","children":[],"call":["Letters  [] ","number - "]}," Solitaire letter_to_number":{"type":"method","name":"letter_to_number","children":[],"call":["Letters  index + ","Letters  index "]}," Solitaire KeyStream generate_letter":{"type":"method","name":"generate_letter","children":[],"call":["card letter ","card special? ","@deck [] ","@deck first value ","@deck first ","seed_phrase empty? ","@deck insert ","@deck slice! ","Solitaire  letter_to_number ","seed_phrase slice! ","@deck last value ","@deck last ","@deck replace ","@deck [] + + ","@deck [] + ","bot_pos + ","(send\n  (ivar :@deck) :index\n  (const\n    (const nil :Card) :JokerA)) sort ","@deck index ","@deck move ","old_b_pos + ","deck_size - ","old_a_pos + ","@deck size ","Solitaire  clean ","@deck []  letter ","@deck []  special? ","Solitaire  clean  empty? ","Solitaire  clean  slice! ","@deck index  + ","@deck size  - "]}," Solitaire KeyStream initialize":{"type":"method","name":"initialize","children":[],"call":["Card  deck "," generate_letter "," rand ","Card  deck sort_by "]}," Solitaire Card inspect":{"type":"method","name":"inspect","children":[],"call":[" value "," letter "," name "," class "]}," Solitaire Card compact_inspect":{"type":"method","name":"compact_inspect","children":[],"call":[" value "," face == "," face "]}," Solitaire Card name":{"type":"method","name":"name","children":[],"call":["face_str + + ","face_str + "," type to_s capitalize "," type to_s "," type ","1 upcase "," face to_s capitalize gsub "," face to_s capitalize "," face to_s "," face "," face == "]}," Solitaire Card letter":{"type":"method","name":"letter","children":[],"call":["Letters  [] ","(send\n  (send nil :value) :-\n  (int 1)) % "," value - "," value "]}," Solitaire Card value":{"type":"method","name":"value","children":[],"call":["Faces  index + + ","13 * ","Types  index "," type ","Faces  index + ","Faces  index "," face "," special? "]}," Solitaire Card special?":{"type":"method","name":"special?","children":[],"call":[" type == "," type "]}," Solitaire Card deck":{"type":"method","name":"deck","children":[],"call":[]}," Array move":{"type":"method","name":"move","children":[],"call":[" insert "," slice! "," size ","to_index < ","from_index < "]}," data_to_string":{"type":"method","name":"data_to_string","children":[],"call":["(send\n  (begin\n    (erange\n      (int 0)\n      (begin\n        (send\n          (send\n            (lvar :data) :size) :/\n          (int 5))))) :map) join ","data [] ","i * ","(erange\n  (int 0)\n  (begin\n    (send\n      (send\n        (lvar :data) :size) :/\n      (int 5)))) map ","data size / ","data size ","(send\n  (lvar :data) :map) join ","(send\n  (lvar :v) :+\n  (int 65)) chr ","v + ","data map ","(send\n  (begin\n    (erange\n      (int 0)\n      (begin\n        (send\n          (send\n            (lvar :(send\n  (lvar :data) :map) join ) :size) :/\n          (int 5))))) :map) join ","(send\n  (lvar :data) :map) join  [] ","(erange\n  (int 0)\n  (begin\n    (send\n      (send\n        (lvar :(send\n  (lvar :data) :map) join ) :size) :/\n      (int 5)))) map ","(send\n  (lvar :data) :map) join  size / ","(send\n  (lvar :data) :map) join  size ","(send\n  (lvar :(send\n  (lvar :data) :map) join ) :map) join ","(send\n  (lvar :data) :map) join  map "]}," decode":{"type":"method","name":"decode","children":[],"call":[" encode ","26 - ","keystream map "]}," encode":{"type":"method","name":"encode","children":[],"call":["result << ","(send\n  (send\n    (lvar :data) :[]\n    (lvar :i)) :+\n  (send\n    (lvar :keystream) :[]\n    (lvar :i))) % ","data [] + ","keystream [] ","data [] ","data size times ","data size "]}," Deck letter_at":{"type":"method","name":"letter_at","children":[],"call":["(send\n  (lvar :id) :%\n  (int 26)) + ","id % ","id > ","@deck [] ","(send\n  (lvar :@deck [] ) :%\n  (int 26)) + ","@deck []  % ","@deck []  > "]}," Deck value_at":{"type":"method","name":"value_at","children":[],"call":["id + ","id > ","@deck [] ","@deck []  + ","@deck []  > "]}," Deck next_letter":{"type":"method","name":"next_letter","children":[],"call":[" letter_at "," value_at ","@deck []= ","@deck slice! ","upper + + ","upper + ","hi + ","(lvar :a) sort ","@deck index ","52 + ","(send\n  (begin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) + ","(send\n  (lvar :index) :+\n  (lvar :j)) % ","index + ","@deck delete_at ","2 times "," letter_@deck index t "," v@deck index lue_@deck index t ","upper + +  []= ","upper + +  slice! ","@deck slice!  + + ","@deck slice!  + ","(lv@deck index r :@deck index ) sort ","upper + +  index ","@deck (send\n  (begin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) +  ","@deck @deck index  ","(send\n  (@deck index egin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) + ","(send\n  (begin\n    (send\n      (lv@deck index r :index) :+\n      (lv@deck index r :j))) :%\n  (int 53)) + ","(send\n  (begin\n    (send\n      (lvar :(send\n  (begin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) + ) :+\n      (lvar :j))) :%\n  (int 53)) + ","(send\n  (begin\n    (send\n      (lvar :@deck index ) :+\n      (lvar :j))) :%\n  (int 53)) + ","(send\n  (lv@deck index r :index) :+\n  (lv@deck index r :j)) % ","(send\n  (lvar :(send\n  (begin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) + ) :+\n  (lvar :j)) % ","(send\n  (lvar :@deck index ) :+\n  (lvar :j)) % ","(send\n  (begin\n    (send\n      (lvar :index) :+\n      (lvar :j))) :%\n  (int 53)) +  + ","@deck index  + ","upper + +  delete_at ","@deck delete_@deck index t "]}," Deck create_keystream":{"type":"method","name":"create_keystream","children":[],"call":["stream << "," next_letter ","count times "," next_ next_letter  "]}," new_deck":{"type":"method","name":"new_deck","children":[],"call":["(irange\n  (int 1)\n  (int 52)) to_a + ","(irange\n  (int 1)\n  (int 52)) to_a "]}," Array generate_keystream":{"type":"method","name":"generate_keystream","children":[],"call":[" next_key ","(irange\n  (int 1)\n  (lvar :len)) collect "]}," Array next_key":{"type":"method","name":"next_key","children":[],"call":["card value ","Joker  === "," [] "," first value "," first "," []= "," slice! "," last value "," last "," unshift "," push ","second_joker + ","cards_above length ","(send nil :index\n  (const nil :A)) sort "," index "," wrap_down ","pos + "," []  value "," [] s_above length "," slice!  length "," wrap_down  + "," index  + "]}," Array wrap_down":{"type":"method","name":"wrap_down","children":[],"call":[" length ","pos == "," length  == "]}," Joker value":{"type":"method","name":"value","children":[],"call":[]}," String decrypt":{"type":"method","name":"decrypt","children":[],"call":[" crypt "]}," String encrypt":{"type":"method","name":"encrypt","children":[],"call":[" crypt "]}," String crypt":{"type":"method","name":"crypt","children":[],"call":["result << ","(send\n  (lvar :n) :+\n  (lvar :k)) to_letter ","n + ","k -@ ","numbers zip ","deck generate_keystream ","numbers length "," to_numbers ","(send\n  (lvar :n) :+\n  (lvar :k -@ )) to_letter ","k -@  -@ "," to_numbers  zip ","deck -@  generate_k -@ eystream ","deck generate_deck generate_keystream  "," to_numbers  length "," to_ to_numbers  "]}," String to_numbers":{"type":"method","name":"to_numbers","children":[],"call":["res fill ","(send\n  (int 5) :-\n  (send\n    (send\n      (lvar :res) :length) :%\n    (int 5))) % ","5 - ","res length % ","res length ","(send\n  (send\n    (send nil :upcase) :unpack\n    (str \"C*\")) :collect) compact ","b - + ","b - ","b between? "," upcase unpack collect "," upcase unpack "," upcase ","(send\n  (send\n    (send nil :upcase) :unpack\n    (str \"C*\")) :collect) compact  fill ","(send\n  (int 5) :-\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send nil :upcase) :unpack\n    (str \"C*\")) :collect) compact ) :length) :%\n    (int 5))) % ","(send\n  (send\n    (send nil :upcase) :unpack\n    (str \"C*\")) :collect) compact  length % ","(send\n  (send\n    (send nil :upcase) :unpack\n    (str \"C*\")) :collect) compact  length "]}," Numeric to_letter":{"type":"method","name":"to_letter","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (self) :-\n        (int 1))) :%\n    (int 26)) :+\n  (str \"A\")) chr ","(send\n  (self) :-\n  (int 1)) % + ","(send\n  (self) :-\n  (int 1)) % "," - "]}," Numeric value":{"type":"method","name":"value","children":[],"call":[]}," Solitaire next_key":{"type":"method","name":"next_key","children":[],"call":[" next_key ","key > ","@deck cards [] rank ","@deck cards [] ","@deck cards ","@deck cards= ","cuts [] + + ","cuts [] ","cuts [] + ","@deck cut_cards ","@deck cards length - ","@deck cards length ","@deck cards last rank ","@deck cards last ","@deck cut_cards reverse ","jokers [] ","(send\n  (ivar :@deck) :find_card\n  (str \"A\")\n  (sym :Joker)) sort ","@deck find_card "," shift_card "," next_@deck cards [] rank  ","@deck cards [] rank  > ","@deck cut_cards  [] + + ","@deck cut_cards  [] ","@deck cut_cards  [] + ","(send\n  (ivar :@deck) :find_card\n  (str \"A\")\n  (sym :Joker)) sort  [] "]}," Solitaire shift_card":{"type":"method","name":"shift_card","children":[],"call":["@deck cards= ","@deck cards [] + + ","@deck cards [] ","@deck cards length ","@deck cards ","@deck cards [] + ","idx > ","@deck cards slice! ","@deck find_card ","@deck @deck cards slice! s= ","@deck @deck cards slice! s [] + + ","@deck @deck cards slice! s [] ","@deck @deck cards slice! s length ","@deck @deck cards slice! s ","@deck @deck cards slice! s [] + ","@deck find_card  > ","@deck @deck cards slice! s slice! ","@deck find_@deck cards slice!  "]}," Solitaire space_text":{"type":"method","name":"space_text","children":[],"call":["text unpack join ","text unpack ","(send\n  (str \"A\") :+\n  (send\n    (lvar :len) :to_s)) * "," word_count [] "," word_count ","A + ","len to_s "]}," Solitaire word_count":{"type":"method","name":"word_count","children":[],"call":["X * ","len - ","strays > ","text length divmod ","text length "]}," Solitaire process":{"type":"method","name":"process","children":[],"call":[" space_text ","char chr ","char > "," next_key ","char < ","text each_byte "," word_count ","@text upcase gsub! ","@text upcase ","@text gsub ","@text gsub empty? "," space_@text upcase gsub!  "," space_@text gsub  ","@text upcase gsub!  each_byte ","@text gsub  each_byte ","@@text upcase gsub!  upcase gsub! ","@@text gsub  upcase gsub! ","@@text upcase gsub!  upcase ","@@text gsub  upcase ","@@text upcase gsub!  gsub ","@@text gsub  gsub ","@@text upcase gsub!  gsub empty? ","@@text gsub  gsub empty? "]}," Solitaire initialize":{"type":"method","name":"initialize","children":[],"call":["text to_s ","Deck  new "]}," Deck update_order":{"type":"method","name":"update_order","children":[],"call":["card to_s ","@cards collect "]}," Deck cut_cards":{"type":"method","name":"cut_cards","children":[],"call":["cards << ","@cards [] ","@cards length ","cards []= ","(lvar :cuts) flatten each_with_index ","(lvar :cuts) flatten "]}," Deck find_card":{"type":"method","name":"find_card","children":[],"call":["@order index ","Card  to_s "]}," Deck add_card":{"type":"method","name":"add_card","children":[],"call":["@order << ","card to_s ","@cards << ","Card  new ","Card  new  to_s ","@Card  new s << "]}," Deck build_deck":{"type":"method","name":"build_deck","children":[],"call":[" add_card ","name chr ","AB each_byte ","A23456789TJQK each_byte ","(sym :Clubs) each "]}," get_index":{"type":"method","name":"get_index","children":[],"call":["quizzes [] [] ","quizzes [] ","c scan "," open read "," open ","c scan  [] [] ","c scan  [] "," open read  s open read an "]}," unzip":{"type":"method","name":"unzip","children":[],"call":["zf extract ","FileUtils  mkdir_p ","File  dirname ","File  join ","e name ","zf each ","Zip ZipFile  open ","outdir == ","x sub ","x sub  == "]}," unzip_gnu":{"type":"method","name":"unzip_gnu","children":[],"call":[" puts "]}," download":{"type":"method","name":"download","children":[],"call":["$stderr puts ","e to_s ","File  exists? ! ","File  exists? "," fullfile ","f close ","f puts "," open ","Dir  mkdir ","File  directory? ! ","File  directory? "," open read "," puts ","  open ull open ile "," open  close ","f  open read lose "," open  puts ","File  dire open read tory? ! ","File  dire open read tory? "]}," Zip ZipEntry calculate_local_header_size":{"type":"method","name":"calculate_local_header_size","children":[],"call":["LOCAL_ENTRY_STATIC_HEADER_LENGTH  + + ","@extra local_size ","LOCAL_ENTRY_STATIC_HEADER_LENGTH  + ","@name size ","@name bytesize "]}," Zip ZipEntry comment_in":{"type":"method","name":"comment_in","children":[],"call":["Iconv  conv "," name_encoding "," name_in "]}," Zip ZipEntry name_in":{"type":"method","name":"name_in","children":[],"call":["Iconv  conv "," name_encoding ","@name encode ","RUBY_VERSION  >= "]}," Zip ZipEntry name_encoding":{"type":"method","name":"name_encoding","children":[],"call":["(send\n  (ivar :@gp_flags) :&\n  (int 2048)) != ","@gp_flags & "]}," IOExtras copy_stream_n":{"type":"method","name":"copy_stream_n","children":[],"call":[]}," Zip ZipOutputStream close_buffer":{"type":"method","name":"close_buffer","children":[],"call":[" write_central_directory "," update_local_headers "," finalize_current_entry "]}," Zip ZipOutputStream write_buffer":{"type":"method","name":"write_buffer","children":[],"call":[]}," Zip ZipFile write_buffer":{"type":"method","name":"write_buffer","children":[],"call":["zos comment= "," comment ","e write_to_zip_output_stream ","@entrySet each ","ZipOutputStream  write_buffer "]}," Zip ZipFile add_buffer":{"type":"method","name":"add_buffer","children":[],"call":["zf write_buffer ","ZipFile  new ","ZipFile  new  write_buffer "]}," Zip ZipFileSystem ZipFsFile ZipFsStat delegate_to_fs_file":{"type":"method","name":"delegate_to_fs_file","children":[],"call":[" class_eval ","78 + ","methods each "]}," Zip ZipInputStream open_buffer":{"type":"method","name":"open_buffer","children":[],"call":[]}," DOSTime parse_binary_dos_format":{"type":"method","name":"parse_binary_dos_format","children":[],"call":[]}," DOSTime dos_equals":{"type":"method","name":"dos_equals","children":[],"call":[" to_i / == ","other to_i / ","other to_i "," to_i / "," to_i "]}," DOSTime to_binary_dos_date":{"type":"method","name":"to_binary_dos_date","children":[],"call":["(send nil :day) + + ","(send\n  (send nil :year) :-\n  (int 1980)) << "," year - "," year ","(send nil :day) + "," month << "," month "," day "]}," DOSTime to_binary_dos_time":{"type":"method","name":"to_binary_dos_time","children":[],"call":["(send\n  (send nil :sec) :/\n  (int 2)) + + "," hour << "," hour ","(send\n  (send nil :sec) :/\n  (int 2)) + "," min << "," min "," sec / "," sec "]}," Zip ZipEntrySet to_key":{"type":"method","name":"to_key","children":[],"call":["entry to_s sub ","entry to_s "]}," Zip ZipEntrySet find_entry":{"type":"method","name":"find_entry","children":[],"call":["@entrySet [] "," to_key "]}," Zip options":{"type":"method","name":"options","children":[],"call":[]}," Zip DOSTime parse_binary_dos_format":{"type":"method","name":"parse_binary_dos_format","children":[],"call":[]}," Zip DOSTime dos_equals":{"type":"method","name":"dos_equals","children":[],"call":[" to_i / == ","other to_i / ","other to_i "," to_i / "," to_i "," == "," warn "]}," Zip DOSTime to_binary_dos_date":{"type":"method","name":"to_binary_dos_date","children":[],"call":["(send nil :day) + + ","(send\n  (send nil :year) :-\n  (int 1980)) << "," year - "," year ","(send nil :day) + "," month << "," month "," day "," day + + "," day + "]}," Zip DOSTime to_binary_dos_time":{"type":"method","name":"to_binary_dos_time","children":[],"call":["(send\n  (send nil :sec) :/\n  (int 2)) + + "," hour << "," hour ","(send\n  (send nil :sec) :/\n  (int 2)) + "," min << "," min "," sec / "," sec "]}," Zip ZipFileSystem ZipFsDir glob":{"type":"method","name":"glob","children":[],"call":["@mappedZip glob "]}," Zip ZipFile glob":{"type":"method","name":"glob","children":[],"call":["@entrySet glob "]}," Zip ZipFile open_buffer":{"type":"method","name":"open_buffer","children":[],"call":["zf write_buffer "," raise ","io class ","zf read_from_stream ","StringIO  new "," require ","io is_a? ","ZipFile  new ","ZipFile  new  write_buffer ","ZipFile  new  read_from_stream "]}," Zip setup":{"type":"method","name":"setup","children":[],"call":[]}," Zip reset!":{"type":"method","name":"reset!","children":[],"call":[" warn ","BANNER  join ","BANNER  empty? "]}," Zip StreamableStream write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":[" Zip IOExtras  copy_stream "," get_input_stream ","aZipOutputStream put_next_entry ","output_stream put_next_entry "]}," Zip StreamableStream get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["@tempFile close "," block_given? ","@tempFile binmode ","@tempFile open "," raise "," name ","@tempFile closed? ! ","@tempFile closed? ","@temp_file close ","@temp_file binmode ","@temp_file open ","@temp_file closed? ! ","@temp_file closed? "]}," Zip StreamableStream get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["@tempFile close "," block_given? ","@temp_file close "]}," Zip StreamableStream initialize":{"type":"method","name":"initialize","children":[],"call":["@tempFile binmode ","Tempfile  new "," File  dirname "," zipfile "," File  basename "," name ","@temp_file binmode "," zipfile is_a? ","Tempfile  new  binmode "," File   File  dirname  "]}," Zip StreamableDirectory initialize":{"type":"method","name":"initialize","children":[],"call":["entry get_extra_attributes_from_path "]}," Zip OutputStream <<":{"type":"method","name":"<<","children":[],"call":["@compressor << "]}," Zip OutputStream finish":{"type":"method","name":"finish","children":[],"call":["@compressor finish "]}," Zip OutputStream write_central_directory":{"type":"method","name":"write_central_directory","children":[],"call":["cdir write_to_stream ","CentralDirectory  new ","CentralDirectory  new  write_to_stream "]}," Zip OutputStream update_local_headers":{"type":"method","name":"update_local_headers","children":[],"call":["@output_stream pos= ","entry write_local_entry ","entry local_header_offset ","@entry_set each ","@output_stream pos ","@cdir each ","@output_stream @output_stream pos = ","@output_stream @output_stream pos  "]}," Zip OutputStream get_compressor":{"type":"method","name":"get_compressor","children":[],"call":[" raise ","entry compression_method ","PassThruCompressor  new ","Deflater  new "," Zip PassThruCompressor  new "," Zip Deflater  new ","entry compression_level "]}," Zip OutputStream init_next_entry":{"type":"method","name":"init_next_entry","children":[],"call":[" get_compressor ","entry write_local_entry ","@entry_set << "," finalize_current_entry ","@encrypter reset! ","@output_stream << ","@encrypter header ","entry mtime ","@cdir << "]}," Zip OutputStream finalize_current_entry":{"type":"method","name":"finalize_current_entry","children":[],"call":["NullCompressor  instance ","@currentEntry crc= ","@compressor crc ","@currentEntry size= ","@compressor size ","@currentEntry compressed_size= ","@output_stream tell - - ","@currentEntry calculate_local_header_size ","@output_stream tell - ","@currentEntry local_header_offset ","@output_stream tell "," finish ","@current_entry crc= ","@current_entry size= ","@current_entry compressed_size= ","@current_entry calculate_local_header_size ","@current_entry local_header_offset "," Zip NullCompressor  instance ","@encrypter gp_flags ","@current_entry gp_flags ","@output_stream << ","@encrypter data_descriptor ","@current_entry size ","@current_entry compressed_size ","@current_entry crc ","@encrypter header ","@current_entry mtime ","NullCompressor  instance  crc "," Zip NullCompressor  instance  crc ","NullCompressor  instance  size "," Zip NullCompressor  instance  size "]}," Zip OutputStream copy_raw_entry":{"type":"method","name":"copy_raw_entry","children":[],"call":["NullCompressor  instance ","IOExtras  copy_stream_n ","entry compressed_size ","is seek ","entry get_raw_input_stream ","entry write_local_entry ","entry local_entry_offset ","@entry_set << "," finalize_current_entry "," raise ","entry kind_of? ! ","entry kind_of? ","entry dup "," Zip Entry  read_local_entry ","entry local_header_offset ","entry is_a? ","@cdir << ","entry dup  compressed_size ","entry dup  get_raw_input_stream ","entry dup  write_local_entry dup  ","entry dup  local_entry dup _offset ","@entry dup _set << "," finalize_current_entry dup  ","entry dup  kind_of? ! ","entry dup  kind_of? ","entry dup  dup "," Zip Entry  read_local_entry dup  ","entry dup  local_header_offset ","entry dup  is_a? "]}," Zip OutputStream put_next_entry":{"type":"method","name":"put_next_entry","children":[],"call":[" init_next_entry ","new_entry compression_method= ","compression_method nil? ! ","compression_method nil? ","new_entry extra= ","ExtraField  new ","extra to_s ","ExtraField  === ","extra nil? ! ","extra nil? ","new_entry comment= ","comment nil? ! ","comment nil? ","Entry  new ","entryname to_s ","entryname kind_of? "," raise ","entry_name to_s ","entry_name kind_of? ","extra is_a? ","extra kind_of? ","Entry  new  compression_method= ","Entry  new  extra= ","Entry  new  comment= "]}," Zip OutputStream close_buffer":{"type":"method","name":"close_buffer","children":[],"call":[" write_central_directory "," update_local_headers "," finalize_current_entry ","@output_stream flush ","@cdir write_to_stream "]}," Zip OutputStream close":{"type":"method","name":"close","children":[],"call":["@output_stream close "," write_central_directory "," update_local_headers "," finalize_current_entry ","@cdir write_to_stream "]}," Zip OutputStream write_buffer":{"type":"method","name":"write_buffer","children":[],"call":["zos close_buffer "," new ","io binmode ","io respond_to? "," new  close_buffer "]}," Zip OutputStream open":{"type":"method","name":"open","children":[],"call":["zos close "," new "," block_given? "," new  close "]}," Zip OutputStream initialize":{"type":"method","name":"initialize","children":[],"call":[" Zip NullCompressor  instance "," Zip EntrySet  new "," File  new "," StringIO  new ","iostream rewind ","iostream reopen ","@file_name dup "," Zip NullEncrypter  new "," Zip CentralDirectory  new ","@file_name dup  rewind ","@file_name dup  reopen "]}," Zip IOExtras FakeIO kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["object == "]}," Zip IOExtras copy_stream_n":{"type":"method","name":"copy_stream_n","children":[],"call":["ostream write ","istream read ","toread > ","istream eof? ! ","istream eof? "," +@ "]}," Zip IOExtras copy_stream":{"type":"method","name":"copy_stream","children":[],"call":["ostream write ","istream read ","istream eof? "," +@ "]}," Zip IOExtras AbstractOutputStream puts":{"type":"method","name":"puts","children":[],"call":[" << ","val [] == ","val [] ","element to_s ","params flatten each ","params flatten ","params << ","params empty? ","element to_s  [] == ","element to_s  [] "]}," Zip IOExtras AbstractOutputStream putc":{"type":"method","name":"putc","children":[],"call":[" << "," raise ","an_object chr ","anObject chr "]}," Zip IOExtras AbstractOutputStream printf":{"type":"method","name":"printf","children":[],"call":[" << "," sprintf "," format "]}," Zip IOExtras AbstractOutputStream print":{"type":"method","name":"print","children":[],"call":[" << << ","$\\ to_s "," << ","params join ","$OUTPUT_RECORD_SEPARATOR to_s "]}," Zip IOExtras AbstractOutputStream write":{"type":"method","name":"write","children":[],"call":["data to_s bytesize ","data to_s "," << "]}," Zip IOExtras AbstractInputStream each_line":{"type":"method","name":"each_line","children":[],"call":[" readline "," loop "]}," Zip IOExtras AbstractInputStream readline":{"type":"method","name":"readline","children":[],"call":[" raise "," gets ","retVal == "," gets  == "]}," Zip IOExtras AbstractInputStream flush":{"type":"method","name":"flush","children":[],"call":[" +@ "]}," Zip IOExtras AbstractInputStream gets":{"type":"method","name":"gets","children":[],"call":["@output_buffer slice! ","(send\n  (lvar :match_index) :+\n  (send\n    (lvar :a_sep_string) :bytesize)) min ","@output_buffer bytesize ","match_index + ","a_sep_string bytesize ","@output_buffer bytesize >= ","@output_buffer << "," produce_input "," flush ","@output_buffer empty? "," input_finished? ","(lvar :buffer_index) max ","@output_buffer bytesize - ","over_limit ! ","(lvasgn :match_index\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :a_sep_string)\n    (lvar :buffer_index))) nil? ","@output_buffer index ","a_sep_string empty? "," read ","a_sep_string nil? ","a_sep_string to_str ","a_sep_string to_int ","a_sep_string respond_to? ","number_of_bytes to_int ","number_of_bytes respond_to? ","@lineno next ","(send\n  (lvar :matchIndex) :+\n  (send\n    (lvar :aSepString) :bytesize)) min ","matchIndex + ","aSepString bytesize ","(lvar :bufferIndex) max ","overLimit ! ","(lvasgn :matchIndex\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :aSepString)\n    (lvar :bufferIndex))) == ","aSepString empty? ","aSepString nil? ","aSepString to_str ","aSepString to_int ","aSepString respond_to? ","numberOfBytes to_int ","numberOfBytes respond_to? ","(send\n  (lvar :@output_buffer index ) :+\n  (send\n    (lvar :a_sep_string) :bytesize)) min ","(send\n  (lvar :match_index) :+\n  (send\n    (lvar :a_sep_string to_str ) :bytesize)) min ","@output_buffer index  + ","a_sep_string to_str  bytesize ","(lvar :(lvar :buffer_index) max ) max ","(lvasgn :match_index\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :a_sep_string)\n    (lvar :(lvar :buffer_index) max ))) nil? ","(lvasgn :@output_buffer index \n  (send\n    (ivar :@output_buffer) :index\n    (lvar :a_sep_string)\n    (lvar :buffer_index))) nil? ","(lvasgn :match_index\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :a_sep_string to_str )\n    (lvar :buffer_index))) nil? ","a_sep_string to_str  empty? ","a_sep_string to_str  nil? ","a_sep_string to_str  to_str ","a_sep_string to_str  to_int ","a_sep_string to_str  respond_to? ","a_sep_string to_int  to_int ","number_of_bytes to_int  to_int ","a_sep_string to_int  respond_to? ","number_of_bytes to_int  respond_to? ","@lineno next  next ","(send\n  (lvar :@output_buffer index ) :+\n  (send\n    (lvar :aSepString) :bytesize)) min ","(send\n  (lvar :matchIndex) :+\n  (send\n    (lvar :aSepString to_str ) :bytesize)) min ","aSepString to_str  bytesize ","(lvar :(lvar :bufferIndex) max ) max ","(lvasgn :matchIndex\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :aSepString)\n    (lvar :(lvar :bufferIndex) max ))) == ","(lvasgn :@output_buffer index \n  (send\n    (ivar :@output_buffer) :index\n    (lvar :aSepString)\n    (lvar :bufferIndex))) == ","(lvasgn :matchIndex\n  (send\n    (ivar :@output_buffer) :index\n    (lvar :aSepString to_str )\n    (lvar :bufferIndex))) == ","aSepString to_str  empty? ","aSepString to_str  nil? ","aSepString to_str  to_str ","aSepString to_str  to_int ","aSepString to_str  respond_to? ","aSepString to_int  to_int ","numberOfBytes to_int  to_int ","aSepString to_int  respond_to? ","numberOfBytes to_int  respond_to? "]}," Zip IOExtras AbstractInputStream readlines":{"type":"method","name":"readlines","children":[],"call":["ret_val << "," each_line ","retVal << "]}," Zip IOExtras AbstractInputStream read":{"type":"method","name":"read","children":[],"call":["buf replace ","tbuf length "," sysread ","out << ","@output_buffer bytesize ","@output_buffer slice! ","number_of_bytes <= ","@output_buffer bytesize > ","tbuf << ","numberOfBytes <= ","tbuf length == ","tbuf nil? ","tbuf empty? "," sysread  length ","@output_buffer slice!  length "," sysread  << ","@output_buffer slice!  << "," sysread  length == ","@output_buffer slice!  length == "," sysread  nil? ","@output_buffer slice!  nil? "," sysread  empty? ","@output_buffer slice!  empty? "]}," Zip IOExtras AbstractInputStream initialize":{"type":"method","name":"initialize","children":[],"call":[" +@ "]}," Zip InputStream input_finished?":{"type":"method","name":"input_finished?","children":[],"call":["@decompressor input_finished? ","@decompressor eof "]}," Zip InputStream produce_input":{"type":"method","name":"produce_input","children":[],"call":["@decompressor produce_input ","@decompressor read "]}," Zip InputStream open_entry":{"type":"method","name":"open_entry","children":[],"call":[" flush "," raise ","@currentEntry compression_method ","Inflater  new ","@currentEntry compression_method == ","PassThruDecompressor  new ","@currentEntry size ","NullDecompressor  instance ","@currentEntry nil? ","Entry  read_local_entry "," get_decompressor "," Zip Entry  read_local_entry ","@decrypter is_a? ","@current_entry gp_flags & == ","@current_entry gp_flags & ","@current_entry gp_flags ","@internal ! ","@current_entry size == ","@current_entry size ","@current_entry compressed_size == ","@current_entry compressed_size ","@current_entry crc == ","@current_entry crc ","@complete_entry ! "," get_decrypted_io ","@current_entry incomplete? ","@current_entry encrypted? ","@decrypter kind_of? ","@current_entry nil? ","Entry  read_local_entry  compression_method ","Entry  read_local_entry  compression_method == ","Entry  read_local_entry  size ","Entry  read_local_entry  nil? "," Zip Entry  read_local_entry  gp_flags & == "," Zip Entry  read_local_entry  gp_flags & "," Zip Entry  read_local_entry  gp_flags "," Zip Entry  read_local_entry  size == "," Zip Entry  read_local_entry  size "," Zip Entry  read_local_entry  compressed_size == "," Zip Entry  read_local_entry  compressed_size "," Zip Entry  read_local_entry  crc == "," Zip Entry  read_local_entry  crc "," Zip Entry  read_local_entry  incomplete? "," Zip Entry  read_local_entry  encrypted? "," Zip Entry  read_local_entry  nil? "]}," Zip InputStream eof":{"type":"method","name":"eof","children":[],"call":["@decompressor eof ","@output_buffer empty? "]}," Zip InputStream sysread":{"type":"method","name":"sysread","children":[],"call":["@decompressor sysread ","@decompressor read "]}," Zip InputStream rewind":{"type":"method","name":"rewind","children":[],"call":[" open_entry ","@archiveIO seek ","@currentEntry local_header_offset ","@currentEntry nil? ","@archive_io seek ","@current_entry local_header_offset ","@current_entry nil? "]}," Zip InputStream get_next_entry":{"type":"method","name":"get_next_entry","children":[],"call":[" open_entry ","@archiveIO seek ","@currentEntry next_header_offset ","@archive_io seek ","@current_entry next_header_offset "," raise ","@current_entry incomplete? ","@current_entry nil? "]}," Zip InputStream open_buffer":{"type":"method","name":"open_buffer","children":[],"call":[" open "," puts "," warn "," Zip InputStream  open "]}," Zip InputStream open":{"type":"method","name":"open","children":[],"call":["zio close "," block_given? "," new "," new  close "]}," Zip InputStream close":{"type":"method","name":"close","children":[],"call":["@archiveIO close ","@archive_io close "]}," Zip InputStream initialize":{"type":"method","name":"initialize","children":[],"call":["NullDecompressor  instance ","@archiveIO seek "," File  open ","io nil? "," get_io "," Zip NullDecrypter  new "," File  open  seek "]}," Zip FileSystem ZipFileNameMapper expand_to_entry":{"type":"method","name":"expand_to_entry","children":[],"call":[" expand_path [] "," expand_path "]}," Zip FileSystem ZipFileNameMapper expand_path":{"type":"method","name":"expand_path","children":[],"call":["expanded empty? ","expanded gsub! "," File  join ","aPath start_with? ","path start_with? ","path dup "," File  join  empty? ","path dup  empty? "," File  join  gsub! ","path dup  gsub! "]}," Zip FileSystem ZipFileNameMapper each":{"type":"method","name":"each","children":[],"call":["/ + ","e to_s chomp ","e to_s ","@zipFile each ","@zip_file each "]}," Zip FileSystem ZipFileNameMapper mkdir":{"type":"method","name":"mkdir","children":[],"call":["@zipFile mkdir "," expand_to_entry ","@zip_file mkdir "]}," Zip FileSystem ZipFileNameMapper rename":{"type":"method","name":"rename","children":[],"call":["@zipFile rename "," expand_to_entry ","@zip_file rename "]}," Zip FileSystem ZipFileNameMapper remove":{"type":"method","name":"remove","children":[],"call":["@zipFile remove "," expand_to_entry ","@zip_file remove "]}," Zip FileSystem ZipFileNameMapper read":{"type":"method","name":"read","children":[],"call":["@zipFile read "," expand_to_entry ","@zip_file read "]}," Zip FileSystem ZipFileNameMapper get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["@zipFile get_output_stream "," expand_to_entry ","@zip_file get_output_stream "]}," Zip FileSystem ZipFileNameMapper get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["@zipFile get_input_stream "," expand_to_entry ","@zip_file get_input_stream "]}," Zip FileSystem ZipFileNameMapper get_entry":{"type":"method","name":"get_entry","children":[],"call":["@zipFile get_entry "," expand_to_entry ","@zip_file get_entry "]}," Zip FileSystem ZipFileNameMapper find_entry":{"type":"method","name":"find_entry","children":[],"call":["@zipFile find_entry "," expand_to_entry ","@zip_file find_entry "]}," Zip FileSystem ZipFileNameMapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem ZipFsDirIterator tell":{"type":"method","name":"tell","children":[],"call":[" raise ","@fileNames == ","@fileNames nil? ","@filenames nil? "]}," Zip FileSystem ZipFsDirIterator seek":{"type":"method","name":"seek","children":[],"call":[" raise ","@fileNames == ","@fileNames nil? ","@filenames nil? "]}," Zip FileSystem ZipFsDirIterator rewind":{"type":"method","name":"rewind","children":[],"call":[" raise ","@fileNames == ","@fileNames nil? ","@filenames nil? "]}," Zip FileSystem ZipFsDirIterator read":{"type":"method","name":"read","children":[],"call":["@fileNames [] ","(op-asgn\n  (ivasgn :@index) :+\n  (int 1)) - "," raise ","@fileNames == ","@fileNames nil? ","@filenames [] ","@filenames nil? "]}," Zip FileSystem ZipFsDirIterator each":{"type":"method","name":"each","children":[],"call":["@fileNames each "," raise ","@fileNames == ","@fileNames nil? ","@filenames each ","@filenames nil? "]}," Zip FileSystem ZipFsDirIterator close":{"type":"method","name":"close","children":[],"call":[]}," Zip FileSystem ZipFsDirIterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem ZipFsDir chroot":{"type":"method","name":"chroot","children":[],"call":[" raise "]}," Zip FileSystem ZipFsDir mkdir":{"type":"method","name":"mkdir","children":[],"call":["@mappedZip mkdir ","@mapped_zip mkdir "]}," Zip FileSystem ZipFsDir delete":{"type":"method","name":"delete","children":[],"call":["@mappedZip remove "," raise ","@file stat directory? ","@file stat ","@mapped_zip remove "]}," Zip FileSystem ZipFsDir foreach":{"type":"method","name":"foreach","children":[],"call":["match [] ","match == ","subDirEntriesRegex match ","@mappedZip each ","Regexp  new ","Regexp  escape ","path << ","path end_with? ","@file expand_path "," raise ","@file stat directory? ","@file stat ","match nil? ","subdir_entry_regex match ","@mapped_zip each ","subDirEntriesRegex match  [] ","subdir_entry_regex match  [] ","subDirEntriesRegex match  == ","subdir_entry_regex match  == ","subDirEntriesRegex subDirEntriesRegex match  ","subDirEntriesRegex subdir_entry_regex match  ","Regexp  new  match ","Regexp  escape  << ","@file expand_path  << ","Regexp  escape  end_with? ","@file expand_path  end_with? ","@file expand_Regexp  escape  ","@file expand_@file expand_path  ","subDirEntriesRegex match  nil? ","subdir_entry_regex match  nil? ","subdir_entry_regex subDirEntriesRegex match  ","subdir_entry_regex subdir_entry_regex match  "]}," Zip FileSystem ZipFsDir glob":{"type":"method","name":"glob","children":[],"call":["@mappedZip glob ","@mapped_zip glob "]}," Zip FileSystem ZipFsDir entries":{"type":"method","name":"entries","children":[],"call":["entries << "," foreach "]}," Zip FileSystem ZipFsDir chdir":{"type":"method","name":"chdir","children":[],"call":["@mappedZip pwd= ","@file expand_path "," raise ","@file stat directory? ","@file stat ","@mapped_zip pwd= "]}," Zip FileSystem ZipFsDir pwd":{"type":"method","name":"pwd","children":[],"call":["@mappedZip pwd ","@mapped_zip pwd "]}," Zip FileSystem ZipFsDir open":{"type":"method","name":"open","children":[],"call":["dirIt close "," block_given? "," new ","dir_iter close "," new  close "]}," Zip FileSystem ZipFsDir new":{"type":"method","name":"new","children":[],"call":["ZipFsDirIterator  new "," entries "]}," Zip FileSystem ZipFsDir initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem ZipFsFile expand_path":{"type":"method","name":"expand_path","children":[],"call":["@mappedZip expand_path ","@mapped_zip expand_path "]}," Zip FileSystem ZipFsFile rename":{"type":"method","name":"rename","children":[],"call":["@mappedZip rename ","@mapped_zip rename "]}," Zip FileSystem ZipFsFile delete":{"type":"method","name":"delete","children":[],"call":["@mappedZip remove "," raise "," directory? ","args each ","@mapped_zip remove "]}," Zip FileSystem ZipFsFile foreach":{"type":"method","name":"foreach","children":[],"call":["is each_line "," open "]}," Zip FileSystem ZipFsFile popen":{"type":"method","name":"popen","children":[],"call":[" File  popen "]}," Zip FileSystem ZipFsFile read":{"type":"method","name":"read","children":[],"call":["@mappedZip read ","@mapped_zip read "]}," Zip FileSystem ZipFsFile readlines":{"type":"method","name":"readlines","children":[],"call":["is readlines "," open "]}," Zip FileSystem ZipFsFile stat":{"type":"method","name":"stat","children":[],"call":["ZipFsStat  new "," raise "," exists? ! "," exists? "]}," Zip FileSystem ZipFsFile pipe":{"type":"method","name":"pipe","children":[],"call":[" raise "]}," Zip FileSystem ZipFsFile link":{"type":"method","name":"link","children":[],"call":[" raise "]}," Zip FileSystem ZipFsFile symlink":{"type":"method","name":"symlink","children":[],"call":[" raise "]}," Zip FileSystem ZipFsFile readlink":{"type":"method","name":"readlink","children":[],"call":[" raise "]}," Zip FileSystem ZipFsFile ftype":{"type":"method","name":"ftype","children":[],"call":["@mappedZip get_entry directory? ","@mappedZip get_entry ","@mapped_zip get_entry directory? ","@mapped_zip get_entry "]}," Zip FileSystem ZipFsFile socket?":{"type":"method","name":"socket?","children":[],"call":[]}," Zip FileSystem ZipFsFile symlink?":{"type":"method","name":"symlink?","children":[],"call":[]}," Zip FileSystem ZipFsFile chardev?":{"type":"method","name":"chardev?","children":[],"call":[]}," Zip FileSystem ZipFsFile blockdev?":{"type":"method","name":"blockdev?","children":[],"call":[]}," Zip FileSystem ZipFsFile pipe?":{"type":"method","name":"pipe?","children":[],"call":[]}," Zip FileSystem ZipFsFile ctime":{"type":"method","name":"ctime","children":[],"call":["e extra [] ctime ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] ctim get_entry  "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile atime":{"type":"method","name":"atime","children":[],"call":["e extra [] atime ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] atim get_entry  "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile mtime":{"type":"method","name":"mtime","children":[],"call":["@mappedZip get_entry mtime ","@mappedZip get_entry ","@mapped_zip get_entry mtime ","@mapped_zip get_entry "]}," Zip FileSystem ZipFsFile utime":{"type":"method","name":"utime","children":[],"call":[" get_entry time= "," get_entry ","fileNames each ","filenames each "]}," Zip FileSystem ZipFsFile join":{"type":"method","name":"join","children":[],"call":[" File  join "]}," Zip FileSystem ZipFsFile split":{"type":"method","name":"split","children":[],"call":[" File  split "]}," Zip FileSystem ZipFsFile basename":{"type":"method","name":"basename","children":[],"call":[" File  basename "]}," Zip FileSystem ZipFsFile dirname":{"type":"method","name":"dirname","children":[],"call":[" File  dirname "]}," Zip FileSystem ZipFsFile file?":{"type":"method","name":"file?","children":[],"call":["entry file? ","entry != ","@mappedZip find_entry ","entry nil? ! ","entry nil? ","@mapped_zip find_entry ","@mappedZip find_entry  file? ","@mapped_zip find_entry  file? ","@mappedZip find_entry  != ","@mapped_zip find_entry  != ","@mappedZip find_@mappedZip find_entry  ","@mappedZip find_@mapped_zip find_entry  ","@mappedZip find_entry  nil? ! ","@mapped_zip find_entry  nil? ! ","@mappedZip find_entry  nil? ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mappedZip find_entry  ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem ZipFsFile zero?":{"type":"method","name":"zero?","children":[],"call":["sz == "," size ","sz nil? "," size  == "," size  nil? "]}," Zip FileSystem ZipFsFile chmod":{"type":"method","name":"chmod","children":[],"call":["filenames size ","e dirty= ","e external_file_attributes= ","modeInt << ","e unix_perms= ","e fstype= "," get_entry ","filenames each ","mode << ","fil get_entry nam get_entry s siz get_entry  "," get_entry  dirty= "," get_entry   get_entry xt get_entry rnal_fil get_entry _attribut get_entry s= ","mod get_entry Int << "," get_entry  unix_p get_entry rms= "," get_entry  fstyp get_entry = "," g get_entry t_ get_entry ntry ","fil get_entry nam get_entry s  get_entry ach ","mod get_entry  << "]}," Zip FileSystem ZipFsFile chown":{"type":"method","name":"chown","children":[],"call":["filenames size ","e extra [] gid= ","e extra [] ","e extra ","e extra [] uid= ","e extra create ","e extra member? "," get_entry ","filenames each ","fil get_entry nam get_entry s siz get_entry  "," get_entry   get_entry xtra [] gid= "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra [] uid= "," get_entry   get_entry xtra cr get_entry at get_entry  "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry ","fil get_entry nam get_entry s  get_entry ach "]}," Zip FileSystem ZipFsFile size?":{"type":"method","name":"size?","children":[],"call":["entry size ","entry directory? ","entry == ","@mappedZip find_entry ","entry nil? ","@mapped_zip find_entry ","@mappedZip find_entry  size ","@mapped_zip find_entry  size ","@mappedZip find_entry  directory? ","@mapped_zip find_entry  directory? ","@mappedZip find_entry  == ","@mapped_zip find_entry  == ","@mappedZip find_@mappedZip find_entry  ","@mappedZip find_@mapped_zip find_entry  ","@mappedZip find_entry  nil? ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mappedZip find_entry  ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem ZipFsFile size":{"type":"method","name":"size","children":[],"call":["@mappedZip get_entry size ","@mappedZip get_entry ","@mapped_zip get_entry size ","@mapped_zip get_entry "]}," Zip FileSystem ZipFsFile new":{"type":"method","name":"new","children":[],"call":[" open "]}," Zip FileSystem ZipFsFile open":{"type":"method","name":"open","children":[],"call":[" raise ","openMode == ","@mappedZip get_output_stream ","@mappedZip get_input_stream ","openMode gsub! ","openMode delete! ","mode == ","@mapped_zip get_output_stream ","@mapped_zip get_input_stream ","mode delete! "]}," Zip FileSystem ZipFsFile directory?":{"type":"method","name":"directory?","children":[],"call":["entry directory? ","entry != "," expand_path == "," expand_path ","@mappedZip find_entry ","entry nil? ! ","entry nil? ","@mapped_zip find_entry ","@mappedZip find_entry  directory? ","@mapped_zip find_entry  directory? ","@mappedZip find_entry  != ","@mapped_zip find_entry  != ","@mappedZip find_@mappedZip find_entry  ","@mappedZip find_@mapped_zip find_entry  ","@mappedZip find_entry  nil? ! ","@mapped_zip find_entry  nil? ! ","@mappedZip find_entry  nil? ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mappedZip find_entry  ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem ZipFsFile truncate":{"type":"method","name":"truncate","children":[],"call":[" raise "]}," Zip FileSystem ZipFsFile umask":{"type":"method","name":"umask","children":[],"call":[" File  umask "]}," Zip FileSystem ZipFsFile sticky?":{"type":"method","name":"sticky?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile setgid?":{"type":"method","name":"setgid?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile setuid?":{"type":"method","name":"setuid?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile executable?":{"type":"method","name":"executable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile writable?":{"type":"method","name":"writable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile readable?":{"type":"method","name":"readable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem ZipFsFile exists?":{"type":"method","name":"exists?","children":[],"call":["@mappedZip find_entry != ","@mappedZip find_entry "," expand_path == "," expand_path ","@mappedZip find_entry nil? ! ","@mappedZip find_entry nil? ","@mapped_zip find_entry nil? ! ","@mapped_zip find_entry nil? ","@mapped_zip find_entry "]}," Zip FileSystem ZipFsFile unix_mode_cmp":{"type":"method","name":"unix_mode_cmp","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :e) :external_file_attributes) :>>\n      (int 16))) :&\n  (lvar :mode)) != ","(send\n  (send\n    (lvar :e) :external_file_attributes) :>>\n  (int 16)) & ","e external_file_attributes >> ","e external_file_attributes ","e fstype == ","e fstype "," get_entry ","(s get_entry nd\n  (b get_entry gin\n    (s get_entry nd\n      (s get_entry nd\n        (lvar : get_entry ) : get_entry xt get_entry rnal_fil get_entry _attribut get_entry s) :>>\n      (int 16))) :&\n  (lvar :mod get_entry )) != ","(s get_entry nd\n  (s get_entry nd\n    (lvar : get_entry ) : get_entry xt get_entry rnal_fil get_entry _attribut get_entry s) :>>\n  (int 16)) & "," get_entry   get_entry xt get_entry rnal_fil get_entry _attribut get_entry s >> "," get_entry   get_entry xt get_entry rnal_fil get_entry _attribut get_entry s "," get_entry  fstyp get_entry  == "," get_entry  fstyp get_entry  "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile get_entry":{"type":"method","name":"get_entry","children":[],"call":["@mappedZip find_entry "," raise "," exists? ! "," exists? ","@mapped_zip find_entry "]}," Zip FileSystem ZipFsFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat mode":{"type":"method","name":"mode","children":[],"call":["e external_file_attributes >> ","e external_file_attributes ","e fstype == ","e fstype "," get_entry "," get_entry   get_entry xt get_entry rnal_fil get_entry _attribut get_entry s >> "," get_entry   get_entry xt get_entry rnal_fil get_entry _attribut get_entry s "," get_entry  fstyp get_entry  == "," get_entry  fstyp get_entry  "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile ZipFsStat blksize":{"type":"method","name":"blksize","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat nlink":{"type":"method","name":"nlink","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat ftype":{"type":"method","name":"ftype","children":[],"call":[" raise "," directory? "," file? "]}," Zip FileSystem ZipFsFile ZipFsStat rdev_minor":{"type":"method","name":"rdev_minor","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat rdev_major":{"type":"method","name":"rdev_major","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat rdev":{"type":"method","name":"rdev","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat dev":{"type":"method","name":"dev","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat ino":{"type":"method","name":"ino","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat uid":{"type":"method","name":"uid","children":[],"call":["e extra [] uid ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] uid "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile ZipFsStat gid":{"type":"method","name":"gid","children":[],"call":["e extra [] gid ","e extra [] ","e extra ","e extra member? "," get_entry "," get_entry   get_entry xtra [] gid "," get_entry   get_entry xtra [] "," get_entry   get_entry xtra "," get_entry   get_entry xtra m get_entry mb get_entry r? "," g get_entry t_ get_entry ntry "]}," Zip FileSystem ZipFsFile ZipFsStat get_entry":{"type":"method","name":"get_entry","children":[],"call":["@zipFsFile __send__ ","@zip_fs_file __send__ "]}," Zip FileSystem ZipFsFile ZipFsStat blocks":{"type":"method","name":"blocks","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["t == ","type == "]}," Zip FileSystem ZipFsFile ZipFsStat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem ZipFsFile ZipFsStat delegate_to_fs_file":{"type":"method","name":"delegate_to_fs_file","children":[],"call":[" class_eval ","78 + ","methods each ","73 + "]}," Zip FileSystem file":{"type":"method","name":"file","children":[],"call":[]}," Zip FileSystem dir":{"type":"method","name":"dir","children":[],"call":[]}," Zip FileSystem initialize":{"type":"method","name":"initialize","children":[],"call":["@zipFsFile dir= ","@zipFsDir file= ","ZipFsFile  new ","ZipFsDir  new ","ZipFileNameMapper  new ","@zip_fs_file dir= ","@zip_fs_dir file= ","File  new ","Dir  new ","ZipFsFile  new  dir= ","ZipFsDir  new  file= ","File  new  dir= ","Dir  new  file= "]}," Zip File get_tempfile":{"type":"method","name":"get_tempfile","children":[],"call":["tempFile binmode ","Tempfile  new "," File  dirname "," name "," File  basename ","temp_file binmode ","Tempfile  new  binmode "]}," Zip File on_success_replace":{"type":"method","name":"on_success_replace","children":[],"call":[" File  rename "," name ","tmpfile close ","tmpfile path "," get_tempfile "," File  chmod ","tmpfile unlink ","ObjectSpace  undefine_finalizer "," File  unlink "," File  exist? "," create_tmpname "," Dir Tmpname  create "," File  split "," get_tempfile  close "," get_tempfile  path "," get_tempfile  unlink "]}," Zip File check_file":{"type":"method","name":"check_file","children":[],"call":[" raise "," File  readable? "]}," Zip File check_entry_exists":{"type":"method","name":"check_entry_exists","children":[],"call":[" raise ","procedureName + "," remove "," get_entry ","continue_on_exists_proc call ","@entry_set include? ","Zip  continue_on_exists_proc "," proc ","proc_name + "," Zip EntryExistsError  new ","@cdir include? "]}," Zip File is_directory":{"type":"method","name":"is_directory","children":[],"call":["newEntry is_directory ","newEntry name ","newEntry is_directory ! "," raise ","(str \"entry name '\") + ","srcPathIsDirectory ! "," File  directory? "," File  directory?  ! "]}," Zip File mkdir":{"type":"method","name":"mkdir","children":[],"call":["@entry_set << ","StreamableDirectory  new ","entryName << ","entryName end_with? ","entryName dup to_s ","entryName dup "," raise "," find_entry "," Zip StreamableDirectory  new ","entry_name << ","entry_name end_with? ","entry_name dup to_s ","entry_name dup ","@cdir << ","entryName dup to_s  << ","entryName dup to_s  end_with? ","entryName dup to_s  dup to_s ","entryName dup to_s  dup ","entry_name dup to_s  << ","entry_name dup to_s  end_with? ","entry_name dup to_s  dup to_s ","entry_name dup to_s  dup "]}," Zip File get_entry":{"type":"method","name":"get_entry","children":[],"call":["selectedEntry restore_times= ","selectedEntry restore_permissions= ","selectedEntry restore_ownership= "," raise "," find_entry ","selected_entry restore_times= ","selected_entry restore_permissions= ","selected_entry restore_ownership= ","selected_entry nil? "," find_entry  restore_times= "," find_entry  restore_permissions= "," find_entry  restore_ownership= "," find_entry  nil? "]}," Zip File glob":{"type":"method","name":"glob","children":[],"call":["@entry_set glob "]}," Zip File find_entry":{"type":"method","name":"find_entry","children":[],"call":["@entry_set find_entry ","selected_entry restore_times= ","selected_entry restore_permissions= ","selected_entry restore_ownership= ","selected_entry nil? ","@cdir find_entry ","@entry_set find_entry  restore_times= ","@cdir find_entry  restore_times= ","@entry_set find_entry  restore_permissions= ","@cdir find_entry  restore_permissions= ","@entry_set find_entry  restore_ownership= ","@cdir find_entry  restore_ownership= ","@entry_set find_entry  nil? ","@cdir find_entry  nil? "]}," Zip File commit_required?":{"type":"method","name":"commit_required?","children":[],"call":["@create == ","@entry_set != ","@comment != ","e dirty ","@entry_set each ","e dirty? ","@cdir each ","@cdir dirty? "]}," Zip File close":{"type":"method","name":"close","children":[],"call":[" commit "]}," Zip File write_buffer":{"type":"method","name":"write_buffer","children":[],"call":["zos comment= "," comment ","e write_to_zip_output_stream ","@entry_set each ","OutputStream  write_buffer "," Zip OutputStream  write_buffer ","@cdir each "," commit_required? "]}," Zip File commit":{"type":"method","name":"commit","children":[],"call":[" initialize "," name ","zos comment= "," comment ","e dirty= ","e write_to_zip_output_stream ","@entry_set each ","OutputStream  open "," on_success_replace "," commit_required? ! "," commit_required? "," Zip OutputStream  open ","e clean_up "," name is_a? "," name kind_of? "," initialize_cdir ","@cdir each "]}," Zip File extract":{"type":"method","name":"extract","children":[],"call":["found_entry extract "," get_entry "," Zip  on_exists_proc "," proc ","found_entry name "," get_entry  extract "," get_entry  name "]}," Zip File replace":{"type":"method","name":"replace","children":[],"call":[" add "," remove "," check_file "]}," Zip File rename":{"type":"method","name":"rename","children":[],"call":["@entry_set << ","foundEntry name= ","@entry_set delete "," check_entry_exists "," get_entry ","found_entry name= ","@cdir << ","@cdir delete "," get_entry  name= "]}," Zip File remove":{"type":"method","name":"remove","children":[],"call":["@entry_set delete "," get_entry ","@cdir delete "]}," Zip File add":{"type":"method","name":"add","children":[],"call":["@entry_set << ","newEntry gather_fileinfo_from_srcpath ","Entry  new ","entry to_s ","entry kind_of? "," check_entry_exists ","Zip  continue_on_exists_proc "," proc ","new_entry dirty= ","new_entry gather_fileinfo_from_srcpath "," Zip Entry  new "," Zip  continue_on_exists_proc ","@cdir << ","Entry  new  gather_fileinfo_from_srcpath "," Zip Entry  new  dirty= "," Zip Entry  new  gather_fileinfo_from_srcpath "]}," Zip File read":{"type":"method","name":"read","children":[],"call":["is read "," get_input_stream "]}," Zip File to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Zip File get_output_stream":{"type":"method","name":"get_output_stream","children":[],"call":["zipStreamableEntry get_output_stream ","@entry_set << ","StreamableStream  new ","newEntry unix_perms= "," raise ","newEntry directory? ","Entry  new ","entry to_s ","entry kind_of? ","zip_streamable_entry get_output_stream ","new_entry unix_perms= ","new_entry directory? ","@cdir << ","StreamableStream  new  get_output_stream ","Entry  new  unix_perms= ","Entry  new  directory? "]}," Zip File get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":[" get_entry get_input_stream "," get_entry "]}," Zip File split":{"type":"method","name":"split","children":[],"call":[" File  delete "," save_splited_part ","zip_file eof? "," File  open "," get_partial_zip_file_name "," open "," get_segment_count_for_split ","zip_file_size <= "," get_segment_size_for_split "," File  size "," raise "," File  readable? "," File  exists? "," File  exist? "," Zip File  open "," get_ get_partial_zip_file_name  "," get_ get_segment_count_for_split _for_split "," File  size  <= "," get_ get_segment_size_for_split _for_split "]}," Zip File save_splited_part":{"type":"method","name":"save_splited_part","children":[],"call":[" block_given? ","szip_file << ","zip_file read ","segment_bytes_left < ","ssegment_size - ","zip_file eof? ","ssegment_size == "," put_split_signature ","szip_file_index == "," File  open ","%03d % ","ssegment_size > ","zip_file_size - ","zip_file pos "," format ","ssegment_size -  < "," put_split_signature  - ","zip_file_size -  - "," put_split_signature  == ","zip_file_size -  == "," put_split_signature  > ","zip_file_size -  > "]}," Zip File put_split_signature":{"type":"method","name":"put_split_signature","children":[],"call":["segment_size - ","signature_packed size ","szip_file << ","(const nil :SPLIT_SIGNATURE) pack ","(const nil :SPLIT_SIGNATURE) pack  size "]}," Zip File get_segment_count_for_split":{"type":"method","name":"get_segment_count_for_split","children":[],"call":["(send\n  (lvar :zip_file_size) :/\n  (lvar :segment_size)) to_i + ","zip_file_size % == ","zip_file_size % ","(send\n  (lvar :zip_file_size) :/\n  (lvar :segment_size)) to_i ","zip_file_size / "]}," Zip File get_partial_zip_file_name":{"type":"method","name":"get_partial_zip_file_name","children":[],"call":["zip_file_name sub ","partial_zip_file_name + "," File  extname "," File  basename ","partial_zip_file_name nil? ","zip_file_name sub  + ","zip_file_name sub  nil? "]}," Zip File get_segment_size_for_split":{"type":"method","name":"get_segment_size_for_split","children":[],"call":["MAX_SEGMENT_SIZE  < ","MIN_SEGMENT_SIZE  > "]}," Zip File foreach":{"type":"method","name":"foreach","children":[],"call":["zipFile each "," open ","zip_file each "," Zip File  open "]}," Zip File open_buffer":{"type":"method","name":"open_buffer","children":[],"call":["zf write_buffer ","zf read_from_stream "," StringIO  new "," require ","io is_a "," Zip File  new "," raise ","io class ","io is_a? ","StringIO  new ","e message == ","e message ","io binmode ","io respond_to? ","IO_METHODS  join ","(send\n  (const nil :IO_METHODS) :map) all? ","IO_METHODS  map "," block_given? ","io kind_of? "," Zip File  new  write_buffer "," Zip File  new  read_from_stream "," StringIO  new  is_a "," StringIO  new  class "," StringIO  new  is_a? "," StringIO  new  binmode "," StringIO  new  respond_to? "," StringIO  new  kind_of? "]}," Zip File add_buffer":{"type":"method","name":"add_buffer","children":[],"call":["zf write_buffer "," Zip File  new "," StringIO  new "," Zip File  new  write_buffer "]}," Zip File open":{"type":"method","name":"open","children":[],"call":["zf close "," block_given? "," Zip File  new "," Zip File  new  close "]}," Zip File initialize":{"type":"method","name":"initialize","children":[],"call":["@entry_set dup "," raise ","EntrySet  new "," read_from_stream "," File  open "," name ","buffer ! "," File  exists? ","options [] "," File  stat mode "," File  stat "," File  exist? "," File  size? "," File  zero? "," create_file_permissions ","path_or_io size > ","path_or_io size ","@name to_s ","path_or_io path ","path_or_io respond_to? ","DEFAULT_OPTIONS  merge "," initialize_cdir ","DEFAULT_RESTORE_OPTIONS  merge merge ","DEFAULT_RESTORE_OPTIONS  merge "," Zip  default_compression ","EntrySet  new  dup ","DEFAULT_OPTIONS  merge  [] ","DEFAULT_RESTORE_OPTIONS  merge merge  [] ","path_or_io path  to_s "]}," Zip ExtraField local_size":{"type":"method","name":"local_size","children":[],"call":[" to_local_bin bytesize "," to_local_bin "]}," Zip ExtraField c_dir_size":{"type":"method","name":"c_dir_size","children":[],"call":[" to_c_dir_bin bytesize "," to_c_dir_bin "]}," Zip ExtraField to_c_dir_bin":{"type":"method","name":"to_c_dir_bin","children":[],"call":["(send\n  (self) :map) join ","v to_c_dir_bin "," map ","(send\n  (send nil :ordered_values) :map) join ","v to_c_dir_bin force_encoding "," ordered_values map "," ordered_values ","(send\n  (send nil :ordered_values) :map!) join "," ordered_values map! "]}," Zip ExtraField to_local_bin":{"type":"method","name":"to_local_bin","children":[],"call":["(send\n  (self) :map) join ","v to_local_bin "," map ","(send\n  (send nil :ordered_values) :map) join ","v to_local_bin force_encoding "," ordered_values map "," ordered_values ","(send\n  (send nil :ordered_values) :map!) join "," ordered_values map! "]}," Zip ExtraField create":{"type":"method","name":"create","children":[],"call":[" []= ","field_class new "," raise ","k name == ","k name ","ID_MAP  values find ","ID_MAP  values "]}," Zip ExtraField merge":{"type":"method","name":"merge","children":[],"call":["len + "," extra_field_type_unknown "," create_unknown_item "," [] "," extra_field_type_exist ","ID_MAP  member? ","binstr [] to_s unpack first ","binstr [] to_s unpack ","binstr [] to_s ","binstr [] ","i + ","i < ","binstr bytesize ","binstr empty? ","binstr [] to_s unpack1 ","binstr [] to_s unpack first  + ","binstr [] to_s unpack1  + "]}," Zip ExtraField create_unknown_item":{"type":"method","name":"create_unknown_item","children":[],"call":[" []= "," alias_method "," dup "," +@ "," alia dup _method "," alia +@ _method "]}," Zip ExtraField extra_field_type_unknown":{"type":"method","name":"extra_field_type_unknown","children":[],"call":[" [] << ","binstr [] ","len + "," [] ","len + > ","binstr [] bytesize ","len ! "," create_unknown_item "," [] merge ","Unknown  new "]}," Zip ExtraField extra_field_type_exist":{"type":"method","name":"extra_field_type_exist","children":[],"call":[" []= ","ID_MAP  [] new ","binstr [] ","len + ","ID_MAP  [] "," [] merge "," [] "," member? ","ID_MAP  [] name "]}," Zip ExtraField initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip Zip64 pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":[" pack_for_local ","packed << ","(ivar :@disk_start_number) pack ","(ivar :@relative_header_offset) pack ","(ivar :@compressed_size) pack ","(ivar :@original_size) pack "," force_encoding ","(send\n  (str \"\") :+@) force_encoding "," +@ "," force_encoding  << ","(send\n  (str \"\") :+@) force_encoding  << "]}," Zip Zip64 pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["(int 1) pack ","(ivar :@original_size) pack "]}," Zip Zip64 merge":{"type":"method","name":"merge","children":[],"call":["binstr to_s unpack ","binstr to_s ","binstr empty? "," initial_parse "]}," Zip Zip64 initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip IUnix pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":[]}," Zip IUnix pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["(ivar :@uid) pack "]}," Zip IUnix ==":{"type":"method","name":"==","children":[],"call":["@gid == ","other gid ","@uid == ","other uid "]}," Zip IUnix merge":{"type":"method","name":"merge","children":[],"call":["content unpack ","size == ","size ! "," initial_parse ","binstr empty? "]}," Zip IUnix initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip UniversalTime pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":["s << ","(send\n  (ivar :@mtime) :to_i) pack ","@mtime to_i ","@flag & == ","@flag & ","(ivar :@flag) pack ","(ivar :@flag) pack  << ","((ivar :@flag) pack end\n  (ivar :@mtime) :to_i) pack "]}," Zip UniversalTime pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["s << ","(send\n  (ivar :@ctime) :to_i) pack ","@ctime to_i ","@flag & != ","@flag & ","(send\n  (ivar :@atime) :to_i) pack ","@atime to_i ","(send\n  (ivar :@mtime) :to_i) pack ","@mtime to_i ","(ivar :@flag) pack ","@flag & == ","(ivar :@flag) pack  << ","((ivar :@flag) pack end\n  (ivar :@ctime) :to_i) pack ","((ivar :@flag) pack end\n  (ivar :@atime) :to_i) pack ","((ivar :@flag) pack end\n  (ivar :@mtime) :to_i) pack "]}," Zip UniversalTime ==":{"type":"method","name":"==","children":[],"call":["@ctime == ","other ctime ","@atime == ","other atime ","@mtime == ","other mtime "]}," Zip UniversalTime merge":{"type":"method","name":"merge","children":[],"call":[" Zip DOSTime  at ","content unpack "," initial_parse ","binstr empty? ","times shift ","@flag & == ","@flag & ","times [] nil? ","times [] ","size <= ","size ! "]}," Zip UniversalTime initialize":{"type":"method","name":"initialize","children":[],"call":[" merge ","binstr nil? "]}," Zip Generic to_c_dir_bin":{"type":"method","name":"to_c_dir_bin","children":[],"call":[" class const_get + + "," class const_get + ","(send\n  (lvar :s) :bytesize) pack ","s bytesize "," class const_get "," class "," pack_for_c_dir "," class const_get + << "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get + + "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get + ","( pack_for_c_dir end\n  (lvar : pack_for_c_dir ) :byte pack_for_c_dir ize) pack "," pack_for_c_dir  byte pack_for_c_dir ize "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get "," cla pack_for_c_dir  pack_for_c_dir  "," cla pack_for_c_dir  pack_for_c_dir  con pack_for_c_dir t_get + << "]}," Zip Generic to_local_bin":{"type":"method","name":"to_local_bin","children":[],"call":[" class const_get + + "," class const_get + ","(send\n  (lvar :s) :bytesize) pack ","s bytesize "," class const_get "," class "," pack_for_local "," class const_get + << "," cla pack_for_local  pack_for_local  con pack_for_local t_get + + "," cla pack_for_local  pack_for_local  con pack_for_local t_get + ","( pack_for_local end\n  (lvar : pack_for_local ) :byte pack_for_local ize) pack "," pack_for_local  byte pack_for_local ize "," cla pack_for_local  pack_for_local  con pack_for_local t_get "," cla pack_for_local  pack_for_local  "," cla pack_for_local  pack_for_local  con pack_for_local t_get + << "]}," Zip Generic ==":{"type":"method","name":"==","children":[],"call":["v != ","other [] "," each "," class != ","other class "," class "]}," Zip Generic initial_parse":{"type":"method","name":"initial_parse","children":[],"call":["binstr [] ","binstr [] unpack [] ","binstr [] unpack ","$stderr puts ","binstr [] != "," class const_get "," class ","binstr ! "," warn ","binstr [] unpack1 "]}," Zip Generic name":{"type":"method","name":"name","children":[],"call":[]}," Zip Generic register_map":{"type":"method","name":"register_map","children":[],"call":[]}," Zip EntrySet to_key":{"type":"method","name":"to_key","children":[],"call":["entry to_s sub ","entry to_s ","entry to_s chomp ","k downcase! "," Zip  case_insensitive_match ","entry to_s chomp  downcase! "]}," Zip EntrySet glob":{"type":"method","name":"glob","children":[],"call":["(send\n  (send nil :entries) :map) compact "," block_given? "," File  fnmatch ","entry name chomp ","entry name "," entries map "," entries "]}," Zip EntrySet parent":{"type":"method","name":"parent","children":[],"call":["@entry_set [] "," to_key ","entry parent_as_string "]}," Zip EntrySet ==":{"type":"method","name":"==","children":[],"call":["@entry_order == ","other entry_order ","@entry_set == ","other entry_set ","other kind_of? ","@entry_set values == ","other entry_set values ","@entry_set values "]}," Zip EntrySet dup":{"type":"method","name":"dup","children":[],"call":["EntrySet  new ","@entry_set [] dup ","@entry_set [] ","@entry_order map ","value dup ","@entry_set map ","@entry_set values map ","@entry_set values "]}," Zip EntrySet entries":{"type":"method","name":"entries","children":[],"call":["@entry_set [] ","@entry_order map ","@entry_set values ","x name ","@entry_set values sort_by "," Zip  sort_entries == "," Zip  sort_entries "," sorted_entries values "," sorted_entries "]}," Zip EntrySet each":{"type":"method","name":"each","children":[],"call":["block call ","@entry_set [] ","@entry_order each ","@entry_set dup each ","@entry_set dup "," sorted_entries dup each "," sorted_entries dup "," sorted_entries "," entries each "," entries "]}," Zip EntrySet delete":{"type":"method","name":"delete","children":[],"call":["@entry_set delete "," to_key ","@entry_order delete "]}," Zip EntrySet size":{"type":"method","name":"size","children":[],"call":["@entry_set size "]}," Zip EntrySet <<":{"type":"method","name":"<<","children":[],"call":["@entry_set []= "," to_key ","@entry_order << ","@entry_order delete "]}," Zip EntrySet find_entry":{"type":"method","name":"find_entry","children":[],"call":["@entry_set [] "," to_key "]}," Zip EntrySet include?":{"type":"method","name":"include?","children":[],"call":["@entry_set include? "," to_key "]}," Zip EntrySet initialize":{"type":"method","name":"initialize","children":[],"call":[" push ","an_enumerable each "]}," Zip Entry fix_zip64_sizes!":{"type":"method","name":"fix_zip64_sizes!","children":[],"call":["zip64 compressed_size ","zip64 original_size ","@extra [] ","@extra []  compressed_size ","@extra []  original_size "]}," Zip Entry create_symlink":{"type":"method","name":"create_symlink","children":[],"call":[" File  symlink "," raise ","(str \"Cannot create symlink '\") + "," File  readlink == "," File  readlink ","stat symlink? ","io read "," get_input_stream "," File  lstat "," puts "," warn "," File  lstat  symlink? "," get_input_stream  read "," File  l File  lstat  "]}," Zip Entry create_directory":{"type":"method","name":"create_directory","children":[],"call":[" set_extra_attributes_on_path "," FileUtils  mkdir_p "," raise ","(str \"Cannot create directory '\") + "," FileUtils  rm_f "," block_given? "," File  exists? "," File  directory? "," File  exist? "]}," Zip Entry create_file":{"type":"method","name":"create_file","children":[],"call":["os << ","is sysread "," set_extra_attributes_on_path "," get_input_stream "," File  open "," raise ","(self) ! "," File  exists? "," File  exist? "," dup "," puts "," Zip  validate_entry_sizes "," size "," name ","warned ! ","bytes_written > ","buf bytesize "," warn "," +@ ","error message "," Zip EntrySizeError  new ","is sysread  bytesize "," dup  bytesize "," +@  bytesize "," Zip EntrySizeError  new  message "]}," Zip Entry set_time":{"type":"method","name":"set_time","children":[],"call":[" puts "," Zip DOSTime  parse_binary_dos_format "," Zip  warn_invalid_date "," warn "]}," Zip Entry get_raw_input_stream":{"type":"method","name":"get_raw_input_stream","children":[],"call":[" File  open ","@zipfile is_a? ","@zipfile respond_to? "]}," Zip Entry parent_as_string":{"type":"method","name":"parent_as_string","children":[],"call":["entry_name slice ","slash_index + ","entry_name rindex "," name chomp "," name "," name chomp  slice ","entry_name rindex  + "," name chomp  rindex "]}," Zip Entry write_to_zip_output_stream":{"type":"method","name":"write_to_zip_output_stream","children":[],"call":["zip_output_stream copy_raw_entry "," Zip IOExtras  copy_stream "," get_input_stream ","zip_output_stream put_next_entry ","@ftype == "," compression_method "," ftype == "," ftype "]}," Zip Entry gather_fileinfo_from_srcpath":{"type":"method","name":"gather_fileinfo_from_srcpath","children":[],"call":[" get_extra_attributes_from_path "," raise ","stat inspect ","src_path inspect ","(str \"entry name '\") + "," newEntry "," name_is_directory? ","stat ftype "," file_stat ","stat size "," file_stat  inspect "," file_stat  ftype "," file_ file_stat  "," file_stat  size "]}," Zip Entry get_input_stream":{"type":"method","name":"get_input_stream","children":[],"call":["zis close "," block_given? ","zis get_next_entry "," Zip InputStream  new "," local_header_offset "," raise "," StringIO  new "," File  readlink "," File  open "," Zip NullInputStream  instance ","@ftype == ","zis instance_variable_set "," ftype "," ftype == "," Zip InputStream  new  close "," Zip InputStream  new  get_next_entry "," Zip InputStream  new  instance_variable_set "]}," Zip Entry <=>":{"type":"method","name":"<=>","children":[],"call":[" to_s <=> ","other to_s "," to_s "]}," Zip Entry ==":{"type":"method","name":"==","children":[],"call":[" time dos_equals ","other time "," time ","other __send__ == "," __send__ ","k to_sym ","other __send__ ","(str \"compression_method\") all? ","other class == "," class ","other class "]}," Zip Entry write_c_dir_entry":{"type":"method","name":"write_c_dir_entry","children":[],"call":["io << ","@extra to_c_dir_bin "," pack_c_dir_entry ","(send\n  (send\n    (lvar :ft) :<<\n    (int 12)) :|\n  (begin\n    (send\n      (ivar :@unix_perms) :&\n      (int 4095)))) << ","ft << | ","@unix_perms & ","ft << ","ft nil? "," prep_zip64_extra "," ftype "," prep_cdir_zip64_extra "]}," Zip Entry pack_c_dir_entry":{"type":"method","name":"pack_c_dir_entry","children":[],"call":["(ivar :@header_signature) pack "," comment_size ","@extra c_dir_size "," name_size ","@time to_binary_dos_date ","@time to_binary_dos_time ","@extra c_dir_length ","zip64 relative_header_offset ","zip64 disk_start_number ","zip64 original_size ","zip64 compressed_size ","@extra [] "," compression_method ","@extra []  relative_header_offset ","@extra []  disk_start_number ","@extra []  original_size ","@extra []  compressed_size "]}," Zip Entry set_extra_attributes_on_path":{"type":"method","name":"set_extra_attributes_on_path","children":[],"call":[" set_unix_permissions_on_path "," directory? "," file? "," set_unix_attributes_on_path "," FileUtils  touch "," time "]}," Zip Entry set_unix_permissions_on_path":{"type":"method","name":"set_unix_permissions_on_path","children":[],"call":[" FileUtils  chown "," Process  egid == "," Process  egid "," FileUtils  chmod ","@unix_perms & "]}," Zip Entry get_extra_attributes_from_path":{"type":"method","name":"get_extra_attributes_from_path","children":[],"call":["stat mode & ","stat mode ","stat gid ","stat uid "," file_stat "," Zip DOSTime  from_time ","stat mtime ","DOSTime  from_time "," file_stat  mode & "," file_stat  mode "," file_stat  gid "," file_stat  uid "," file_ file_stat  "," file_stat  mtime "]}," Zip Entry file_stat":{"type":"method","name":"file_stat","children":[],"call":[" File  lstat "," File  stat "]}," Zip Entry read_c_dir_entry":{"type":"method","name":"read_c_dir_entry","children":[],"call":[" calculate_local_header_size "," set_ftype_from_c_dir_entry "," check_c_dir_entry_comment_size ","io read "," read_c_dir_extra_field ","io read gsub "," set_time "," check_c_dir_entry_signature "," unpack_c_dir_entry "," check_c_dir_entry_static_header_length ","entry read_c_dir_entry "," new ","io path "," parse_zip64_extra ","io is_a? ","io read tr ","io respond_to? ","@name force_encoding "," Zip  force_entry_names_encoding "," read_extra_field ","@name tr! "," set_ftype_from_c_dir_ new  "," check_c_dir_ new _comment_size "," check_c_dir_ new _signature "," unpack_c_dir_ new  "," check_c_dir_ new _static_header_length "," new  read_c_dir_ new  ","io io path  ","io read gsub  force_encoding ","io read tr  force_encoding ","io read  force_encoding "," Zip  force_ new _names_encoding ","io read gsub  tr! ","io read tr  tr! ","io read  tr! "]}," Zip Entry read_c_dir_extra_field":{"type":"method","name":"read_c_dir_extra_field","children":[],"call":[" Zip ExtraField  new ","io read ","@extra merge ","@extra is_a? ","@extra kind_of? "," Zip ExtraField  new  merge "," Zip ExtraField  new  is_a? "," Zip ExtraField  new  kind_of? "]}," Zip Entry check_c_dir_entry_comment_size":{"type":"method","name":"check_c_dir_entry_comment_size","children":[],"call":[" raise ","@comment bytesize == ","@comment bytesize "]}," Zip Entry check_c_dir_entry_signature":{"type":"method","name":"check_c_dir_entry_signature","children":[],"call":[" raise "," local_header_offset "," header_signature == "," header_signature ","@header_signature == "]}," Zip Entry check_c_dir_entry_static_header_length":{"type":"method","name":"check_c_dir_entry_static_header_length","children":[],"call":[" raise ","buf bytesize == ","buf bytesize ","buf bytesize != ","buf nil? "]}," Zip Entry set_ftype_from_c_dir_entry":{"type":"method","name":"set_ftype_from_c_dir_entry","children":[],"call":[" name_is_directory? ","@external_file_attributes >> ","(send\n  (ivar :@external_file_attributes) :>>\n  (int 16)) & "]}," Zip Entry unpack_c_dir_entry":{"type":"method","name":"unpack_c_dir_entry","children":[],"call":["buf unpack "]}," Zip Entry write_local_entry":{"type":"method","name":"write_local_entry","children":[],"call":["io << ","@extra to_local_bin "," pack_local_entry ","io tell ","io tell - "," verify_local_header_size! "," prep_zip64_extra "," prep_local_zip64_extra "]}," Zip Entry pack_local_entry":{"type":"method","name":"pack_local_entry","children":[],"call":["(const\n  (const\n    (cbase) :Zip) :LOCAL_ENTRY_SIGNATURE) pack ","@extra local_size "," name_size ","@time to_binary_dos_date ","@time to_binary_dos_time ","@extra local_length ","zip64 original_size ","zip64 compressed_size ","@extra [] "," compression_method ","@extra []  original_size ","@extra []  compressed_size "]}," Zip Entry read_local_entry":{"type":"method","name":"read_local_entry","children":[],"call":[" calculate_local_header_size "," Zip ExtraField  new ","@extra merge "," Zip ExtraField  === "," raise ","extra bytesize != ","extra bytesize ","@name gsub! ","io read "," set_time "," local_header_offset ","@header_signature == "," unpack_local_entry ","static_sized_fields_buf bytesize == ","static_sized_fields_buf bytesize ","io tell ","entry read_local_entry "," new ","io path "," parse_zip64_extra ","@extra is_a? ","@name force_encoding "," Zip  force_entry_names_encoding ","@name tr! ","@extra kind_of? "," read_extra_field "," name_is_directory? "," Zip ExtraField  new  merge ","@io read  merge ","io read  bytesize != ","io read  bytesize ","io read  gsub! "," unpack_local_ new  ","io read  bytesize == "," new  read_local_ new  "," parse_zip64_io read  "," Zip ExtraField  new  is_a? ","@io read  is_a? ","io read  force_encoding "," Zip  force_ new _names_encoding ","io read  tr! "," Zip ExtraField  new  kind_of? ","@io read  kind_of? "," read_io read _field "]}," Zip Entry unpack_local_entry":{"type":"method","name":"unpack_local_entry","children":[],"call":["buf unpack "]}," Zip Entry read_zip_64_long":{"type":"method","name":"read_zip_64_long","children":[],"call":["io read unpack [] ","io read unpack ","io read ","io read unpack1 "]}," Zip Entry read_zip_long":{"type":"method","name":"read_zip_long","children":[],"call":["io read unpack [] ","io read unpack ","io read ","io read unpack1 "]}," Zip Entry read_zip_short":{"type":"method","name":"read_zip_short","children":[],"call":["io read unpack [] ","io read unpack ","io read ","io read unpack1 "]}," Zip Entry to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Zip Entry extract":{"type":"method","name":"extract","children":[],"call":[" raise "," inspect "," __send__ "," symlink? "," file? "," directory? "," Zip  on_exists_proc "," proc "," puts ","@name squeeze =~ ","@name squeeze "," name_safe? ! "," name_safe? ","dest_path nil? "," warn "," ftype ","extract_path start_with? "," File  absolute_path "," File  join "," File  absolute_path  start_with? "]}," Zip Entry next_header_offset":{"type":"method","name":"next_header_offset","children":[],"call":[" local_entry_offset + "," compressed_size "," local_entry_offset "," local_entry_offset + + "," data_descriptor_size "]}," Zip Entry cdir_header_size":{"type":"method","name":"cdir_header_size","children":[],"call":["CDIR_ENTRY_STATIC_HEADER_LENGTH  + + + "," comment_size ","CDIR_ENTRY_STATIC_HEADER_LENGTH  + + ","@extra c_dir_size ","CDIR_ENTRY_STATIC_HEADER_LENGTH  + "," name_size "]}," Zip Entry calculate_local_header_size":{"type":"method","name":"calculate_local_header_size","children":[],"call":["LOCAL_ENTRY_STATIC_HEADER_LENGTH  + + "," extra_size ","LOCAL_ENTRY_STATIC_HEADER_LENGTH  + "," name_size "," fix_zip64_sizes! "]}," Zip Entry comment_size":{"type":"method","name":"comment_size","children":[],"call":["@comment bytesize "]}," Zip Entry extra_size":{"type":"method","name":"extra_size","children":[],"call":["@extra local_size "]}," Zip Entry name_size":{"type":"method","name":"name_size","children":[],"call":["@name bytesize "]}," Zip Entry local_entry_offset":{"type":"method","name":"local_entry_offset","children":[],"call":[" local_header_offset + "," local_header_offset "]}," Zip Entry name_is_directory?":{"type":"method","name":"name_is_directory?","children":[],"call":["@name end_with? "]}," Zip Entry file_type_is?":{"type":"method","name":"file_type_is?","children":[],"call":["@ftype == "," raise "," inspect "," ftype == "," ftype "]}," Zip Entry time=":{"type":"method","name":"time=","children":[],"call":["@extra [] mtime= ","@extra [] ","@extra create ","@extra member? ","(or\n  (send\n    (ivar :@extra) :[]\n    (str \"UniversalTime\"))\n  (send\n    (ivar :@extra) :[]\n    (str \"NTFS\"))) mtime= ","component == ","(or\n  (send\n    (ivar :@extra) :[]\n    (str \"UniversalTime\"))\n  (send\n    (ivar :@extra) :[]\n    (str \"NTFS\"))) send ","component to_s end_with? ","component to_s ","DOSTime  from_time "]}," Zip Entry time":{"type":"method","name":"time","children":[],"call":["@extra [] mtime ","@extra [] ","component == ","@extra [] send ","@extra [] m@extra [] send  "]}," Zip Entry initialize":{"type":"method","name":"initialize","children":[],"call":[" Zip ExtraField  new ","@extra to_s "," Zip ExtraField  === "," name_is_directory? "," Zip DOSTime  now ","args [] "," set_default_vars_values "," check_name ","@extra is_a? ","@extra kind_of? "," set_compression_level_flags ","ExtraField  new ","extra to_s ","extra kind_of? "," Zip DOSTime  from_time "," Zip  default_compression "," Zip ExtraField  new  to_s ","ExtraField  new  to_s "," Zip ExtraField  new  is_a? ","ExtraField  new  is_a? "," Zip ExtraField  new  kind_of? ","ExtraField  new  kind_of? "]}," Zip Entry check_name":{"type":"method","name":"check_name","children":[],"call":[" raise ","name start_with? ","name length > ","name length "]}," Zip Entry set_default_vars_values":{"type":"method","name":"set_default_vars_values","children":[],"call":[" Zip  unicode_names ","DEFAULT_RESTORE_OPTIONS  [] "]}," Zip CentralDirectory ==":{"type":"method","name":"==","children":[],"call":[" comment == ","other comment "," comment ","@entry_set entries sort == ","other entries sort ","other entries ","@entry_set entries sort ","@entry_set entries ","other kind_of? "]}," Zip CentralDirectory read_from_stream":{"type":"method","name":"read_from_stream","children":[],"call":[" read_central_directory_entries "," read_e_o_c_d "," read_64_e_o_c_d "," zip64_file? "," start_buf "," read_eocds "," start_ start_buf  "]}," Zip CentralDirectory size":{"type":"method","name":"size","children":[],"call":["@entry_set size "]}," Zip CentralDirectory each":{"type":"method","name":"each","children":[],"call":["@entry_set each "]}," Zip CentralDirectory get_64_e_o_c_d":{"type":"method","name":"get_64_e_o_c_d","children":[{"type":"method","name":"read","children":[],"asgn":[],"call":[]}],"call":[" slice! ","buf slice! ","zip_64_start + "," raise ","buf rindex ","(const nil :ZIP64_EOCD_LOCATOR) pack ","(const nil :ZIP64_END_OF_CDS) pack ","buf slice!  slice! ","buf rindex  + ","buf slice!  rindex "]}," Zip CentralDirectory start_buf":{"type":"method","name":"start_buf","children":[],"call":["io read ","io seek ","MAX_END_OF_CDS_SIZE  -@ "]}," Zip CentralDirectory zip64_file?":{"type":"method","name":"zip64_file?","children":[],"call":["buf rindex ","(const nil :ZIP64_EOCD_LOCATOR) pack ","(const nil :ZIP64_END_OF_CDS) pack "]}," Zip CentralDirectory get_e_o_c_d":{"type":"method","name":"get_e_o_c_d","children":[{"type":"method","name":"read","children":[],"asgn":[],"call":[]}],"call":[" slice! ","buf slice! ","buf bytesize ","sig_index + "," raise ","buf rindex ","(const nil :END_OF_CDS) pack ","sigIndex + ","(const nil :END_OF_CENTRAL_DIRECTORY_SIGNATURE) pack ","io read ","io seek ","MAX_END_OF_CENTRAL_DIRECTORY_STRUCTURE_SIZE  -@ ","buf slice!  slice! ","io read  slice! ","buf slice!  bytesize ","io read  bytesize ","buf rindex  + ","buf slice!  rindex ","io read  rindex "]}," Zip CentralDirectory read_central_directory_entries":{"type":"method","name":"read_central_directory_entries","children":[],"call":["@entry_set << ","Entry  read_c_dir_entry ","@size times ","EntrySet  new "," raise ","io seek ","entry read_extra_field "," read_local_extra_field ","io tell ","offset nil? ","entry local_header_offset ","entry extra [] relative_header_offset ","entry extra [] ","entry extra ","entry zip64? ","io eof? ","EntrySet  new  << ","@Entry  read_c_dir_entry _set << ","Entry  read_c_dir_Entry  read_c_dir_entry  ","Entry  read_c_dir_entry  read_extra_field ","entry local_header_offset  nil? ","entry extra [] relative_header_offset  nil? ","entry local_header_entry local_header_offset  ","entry local_header_entry extra [] relative_header_offset  ","Entry  read_c_dir_entry  local_header_offset ","entry extra [] relative_header_entry local_header_offset  ","entry extra [] relative_header_entry extra [] relative_header_offset  ","Entry  read_c_dir_entry  extra [] relative_header_offset ","Entry  read_c_dir_entry  extra [] ","Entry  read_c_dir_entry  extra ","Entry  read_c_dir_entry  zip64? "]}," Zip CentralDirectory read_e_o_c_d":{"type":"method","name":"read_e_o_c_d","children":[],"call":[" raise ","buf size == ","buf size ","buf read ","buf slice! ","comment_length <= ","Entry  read_zip_short ","Entry  read_zip_long "," get_e_o_c_d ","commentLength <= ","comment_length to_i <= ","comment_length to_i ","buf empty? "," get_e_o_c_d  size == "," get_e_o_c_d  size "," get_e_o_c_d  read "," get_e_o_c_d  slice! ","Entry  read_zip_short  <= ","Entry  read_zip_short  to_i <= ","Entry  read_zip_short  to_i "," get_e_o_c_d  empty? "]}," Zip CentralDirectory read_64_e_o_c_d":{"type":"method","name":"read_64_e_o_c_d","children":[],"call":[" raise ","buf size == ","buf size ","buf slice! ","buf bytesize ","Entry  read_zip_64_long ","Entry  read_zip_long ","Entry  read_zip_short "," get_64_e_o_c_d ","buf empty? "," get_64_e_o_c_d  size == "," get_64_e_o_c_d  size "," get_64_e_o_c_d  slice! "," get_64_e_o_c_d  bytesize "," get_64_e_o_c_d  empty? "]}," Zip CentralDirectory cdir_size":{"type":"method","name":"cdir_size","children":[],"call":["entry cdir_header_size + ","entry cdir_header_size ","@entry_set inject "]}," Zip CentralDirectory write_e_o_c_d":{"type":"method","name":"write_e_o_c_d","children":[],"call":["io << ","tmp pack ","@comment length "," cdir_size ","@entry_set size ","(lvar :offset) min ","(lvar :cdir_size) min ","(send\n  (ivar :@entry_set) :size) min ","@comment bytesize "]}," Zip CentralDirectory write_to_stream":{"type":"method","name":"write_to_stream","children":[],"call":[" write_e_o_c_d ","entry write_c_dir_entry ","@entry_set each ","io tell "," write_64_eocd_locator "," write_64_e_o_c_d ","@entry_set size > ","@entry_set size ","cdir_size > ","cdir_offset > ","entry extra [] ","entry extra ","@entry_set any? ","eocd_offset - "," Zip  write_zip64_support ","Zip  write_zip64_support ","eocd_offset -  > ","cdir_io tell  > ","io tell  > ","eocd_io tell  - ","io tell  - "]}," Zip CentralDirectory initialize":{"type":"method","name":"initialize","children":[],"call":["EntrySet  new ","entries kind_of? "]}," Zip CentralDirectory entries":{"type":"method","name":"entries","children":[],"call":["@entry_set entries "]}," Zip ExtraField local_length":{"type":"method","name":"local_length","children":[],"call":[" to_local_bin bytesize "," to_local_bin "]}," Zip ExtraField c_dir_length":{"type":"method","name":"c_dir_length","children":[],"call":[" to_c_dir_bin bytesize "," to_c_dir_bin "]}," Zip InputStream get_decompressor":{"type":"method","name":"get_decompressor","children":[],"call":[" raise ","@current_entry compression_method "," Zip Inflater  new ","@current_entry compression_method == "," Zip PassThruDecompressor  new ","@current_entry size ","@current_entry nil? ","@decrypter reset! ","@archive_io read ","@decrypter header_bytesize ","@complete_entry size ","@current_entry size == ","@current_entry crc == ","@current_entry crc ","@current_entry gp_flags & == ","@current_entry gp_flags & ","@current_entry gp_flags ","decompressor_class new ","decompressor_class nil? "," Zip Decompressor  find_by_compression_method ","@current_entry incomplete? ","@decrypter @archive_io read _bytesize "," Zip Decompressor  find_by_compression_method  new "," Zip Decompressor  find_by_compression_method  nil? "]}," Zip InputStream get_io":{"type":"method","name":"get_io","children":[],"call":["file seek "," File  open ","io seek ","io_or_file dup ","io_or_file respond_to? "," File  open  seek ","io_or_file dup  seek ","io_or_ File  open  dup ","io_or_file dup _or_file dup ","io_or_ File  open  respond_to? ","io_or_file dup _or_file respond_to? "]}," Zip ExtraField ordered_values":{"type":"method","name":"ordered_values","children":[],"call":[" [] ","(send\n  (send\n    (self) :keys) :sort_by) map ","k == "," keys sort_by "," keys ","result unshift ","result push "," each "]}," Zip Zip64Placeholder pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["\u0000 * "]}," Zip Zip64Placeholder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip Zip64 extract":{"type":"method","name":"extract","children":[],"call":["@content slice! unpack [] ","@content slice! unpack ","@content slice! ","@content slice! unpack1 "]}," Zip Zip64 parse":{"type":"method","name":"parse","children":[],"call":[" extract ","disk_start_number == ","relative_header_offset == ","compressed_size == ","original_size == "]}," Zip Zip64 ==":{"type":"method","name":"==","children":[],"call":["other disk_start_number == ","other disk_start_number ","other relative_header_offset == ","other relative_header_offset ","other compressed_size == ","other compressed_size ","other original_size == ","other original_size "]}," Zip Entry prep_zip64_extra":{"type":"method","name":"prep_zip64_extra","children":[],"call":["@extra delete ","@extra create ","zip64 relative_header_offset= ","@local_header_offset >= ","zip64 compressed_size= ","@compressed_size >= ","zip64 original_size= ","@size >= "," Zip  write_zip64_support ","@extra create  relative_header_offset= ","@extra create  compressed_size= ","@extra create  original_size= "," Zip  write_@extra create _support "]}," Zip Entry parse_zip64_extra":{"type":"method","name":"parse_zip64_extra","children":[],"call":["zip64 parse ","@extra [] ","@extra [] parse ","@extra [] nil? "," zip64? ","@extra []  parse "," @extra [] ? "]}," Zip Entry verify_local_header_size!":{"type":"method","name":"verify_local_header_size!","children":[],"call":[" raise ","@local_header_size != "," calculate_local_header_size ","@local_header_size == ","@local_header_size nil? "]}," Zip CentralDirectory write_64_eocd_locator":{"type":"method","name":"write_64_eocd_locator","children":[],"call":["io << ","tmp pack "]}," Zip CentralDirectory write_64_e_o_c_d":{"type":"method","name":"write_64_e_o_c_d","children":[],"call":["io << ","tmp pack ","@entry_set size "]}," Zip Inflater move_output_buffer_pos":{"type":"method","name":"move_output_buffer_pos","children":[],"call":["@output_buffer clear ","@output_buffer_pos == ","@output_buffer bytesize "]}," Zip OldUnix pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":["(ivar :@atime) pack "]}," Zip OldUnix pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":["(ivar :@atime) pack "]}," Zip OldUnix ==":{"type":"method","name":"==","children":[],"call":["@mtime == ","other mtime ","@atime == ","other atime ","@gid == ","other gid ","@uid == ","other uid "]}," Zip OldUnix merge":{"type":"method","name":"merge","children":[],"call":["content unpack ","size == ","size ! "," initial_parse ","binstr empty? "]}," Zip OldUnix initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip StreamableStream clean_up":{"type":"method","name":"clean_up","children":[],"call":["@temp_file unlink "]}," Zip Entry clean_up":{"type":"method","name":"clean_up","children":[],"call":[]}," Zip IOExtras AbstractInputStream ungetc":{"type":"method","name":"ungetc","children":[],"call":["byte chr + ","byte chr "]}," Zip NTFS to_ntfs_time":{"type":"method","name":"to_ntfs_time","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :time) :to_f) :+\n      (const nil :SEC_TO_UNIX_EPOCH))) :*\n  (const nil :WINDOWS_TICK)) to_i ","(send\n  (send\n    (lvar :time) :to_f) :+\n  (const nil :SEC_TO_UNIX_EPOCH)) * ","time to_f + ","time to_f "]}," Zip NTFS from_ntfs_time":{"type":"method","name":"from_ntfs_time","children":[],"call":[" Zip DOSTime  at ","ntfs_time / - ","ntfs_time / "]}," Zip NTFS parse_tags":{"type":"method","name":"parse_tags","children":[],"call":["tags []= ","content [] ","content [] unpack ","i < ","content bytesize ","content nil? "]}," Zip NTFS pack_for_c_dir":{"type":"method","name":"pack_for_c_dir","children":[],"call":["s << << ","s << ","(send\n  (lvar :tag1) :bytesize) pack ","tag1 bytesize ","tag1 << ","(send nil :to_ntfs_time\n  (ivar :@ctime)) pack "," to_ntfs_time ","(send nil :to_ntfs_time\n  (ivar :@atime)) pack ","(send nil :to_ntfs_time\n  (ivar :@mtime)) pack "," force_encoding ","(int 0) pack ","(send\n  (str \"\") :+@) force_encoding "," +@ ","(int 0) pack  << << ","(int 0) pack  << ","(send\n  (lvar : force_encoding ) :bytesize) pack ","(send\n  (lvar :(send\n  (str \"\") :+@) force_encoding ) :bytesize) pack ","((int 0) pack end\n  (lvar :tag1) :byte(int 0) pack ize) pack "," force_encoding  bytesize ","(send\n  (str \"\") :+@) force_encoding  bytesize ","tag1 byte(int 0) pack ize "," force_encoding  << ","(send\n  (str \"\") :+@) force_encoding  << ","((int 0) pack end nil :to_ntf(int 0) pack _time\n  (ivar :@ctime)) pack "," to_ntf(int 0) pack _time ","((int 0) pack end nil :to_ntf(int 0) pack _time\n  (ivar :@atime)) pack ","((int 0) pack end nil :to_ntf(int 0) pack _time\n  (ivar :@mtime)) pack ","((int 0) pack end\n  ((int 0) pack tr \"\") :+@) force_encoding "]}," Zip NTFS pack_for_local":{"type":"method","name":"pack_for_local","children":[],"call":[" pack_for_c_dir "]}," Zip NTFS ==":{"type":"method","name":"==","children":[],"call":["@ctime == ","other ctime ","@atime == ","other atime ","@mtime == ","other mtime "]}," Zip NTFS merge":{"type":"method","name":"merge","children":[],"call":[" from_ntfs_time ","tag1 unpack ","tags [] "," parse_tags ","content [] "," initial_parse ","binstr empty? ","tags []  unpack "," parse_tags  [] "," parse_ parse_tags  ","content []  [] "]}," Zip NTFS initialize":{"type":"method","name":"initialize","children":[],"call":[" merge "]}," Zip EntrySet sorted_entries":{"type":"method","name":"sorted_entries","children":[],"call":["Hash  [] ","@entry_set sort "," Zip  sort_entries ","@entry_set sort to_h "]}," Zip Entry data_descriptor_size":{"type":"method","name":"data_descriptor_size","children":[],"call":["(send\n  (ivar :@gp_flags) :&\n  (int 8)) > ","@gp_flags & "]}," Zip TraditionalDecrypter decode":{"type":"method","name":"decode","children":[],"call":[" update_keys ","n chr "," decrypt_byte ","num chr "]}," Zip TraditionalDecrypter reset!":{"type":"method","name":"reset!","children":[],"call":[" decode ","header each_byte "," reset_keys! "]}," Zip TraditionalDecrypter decrypt":{"type":"method","name":"decrypt","children":[],"call":["(send\n  (send\n    (lvar :data) :unpack\n    (str \"C*\")) :map) pack "," decode ","data unpack map ","data unpack "]}," Zip TraditionalEncrypter encode":{"type":"method","name":"encode","children":[],"call":["t ^ "," update_keys ","n chr "," decrypt_byte ","num chr "," decrypt_byte  ^ "," upda decrypt_byte e_keys "," decryp decrypt_byte _by decrypt_byte e "]}," Zip TraditionalEncrypter reset!":{"type":"method","name":"reset!","children":[],"call":[" reset_keys! "]}," Zip TraditionalEncrypter data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["(int 134695760) pack "]}," Zip TraditionalEncrypter encrypt":{"type":"method","name":"encrypt","children":[],"call":["(send\n  (send\n    (lvar :data) :unpack\n    (str \"C*\")) :map) pack "," encode ","data unpack map ","data unpack "]}," Zip TraditionalEncrypter header":{"type":"method","name":"header","children":[],"call":["(send\n  (block\n    (send\n      (array) :tap)\n    (args\n      (arg :header))\n    (begin\n      (block\n        (send\n          (begin\n            (send\n              (send nil :header_bytesize) :-\n              (int 2))) :times)\n        (args)\n        (send\n          (lvar :header) :<<\n          (send\n            (const nil :Random) :rand\n            (irange\n              (int 0)\n              (int 255)))))\n      (send\n        (lvar :header) :<<\n        (begin\n          (send\n            (send\n              (lvar :mtime) :to_binary_dos_time) :&\n            (int 255))))\n      (send\n        (lvar :header) :<<\n        (begin\n          (send\n            (send\n              (lvar :mtime) :to_binary_dos_time) :>>\n            (int 8)))))) :map) pack "," encode ","(send\n  (array) :tap) map ","header << ","mtime to_binary_dos_time >> ","mtime to_binary_dos_time ","mtime to_binary_dos_time & ","Random  rand ","(send\n  (send nil :header_bytesize) :-\n  (int 2)) times "," header_bytesize - "," header_bytesize "," tap "]}," Zip TraditionalEncryption decrypt_byte":{"type":"method","name":"decrypt_byte","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :temp) :*\n      (begin\n        (send\n          (lvar :temp) :^\n          (int 1))))) :>>\n  (int 8)) & ","(send\n  (lvar :temp) :*\n  (begin\n    (send\n      (lvar :temp) :^\n      (int 1)))) >> ","temp * ","temp ^ ","(send\n  (ivar :@key2) :&\n  (int 65535)) | ","@key2 & ","(send\n  (begin\n    (send\n      (lvar :(send\n  (ivar :@key2) :&\n  (int 65535)) | ) :*\n      (begin\n        (send\n          (lvar :(send\n  (ivar :@key2) :&\n  (int 65535)) | ) :^\n          (int 1))))) :>>\n  (int 8)) & ","(send\n  (lvar :(send\n  (ivar :@key2) :&\n  (int 65535)) | ) :*\n  (begin\n    (send\n      (lvar :(send\n  (ivar :@key2) :&\n  (int 65535)) | ) :^\n      (int 1)))) >> ","(send\n  (ivar :@key2) :&\n  (int 65535)) |  * ","(send\n  (ivar :@key2) :&\n  (int 65535)) |  ^ "]}," Zip TraditionalEncryption update_keys":{"type":"method","name":"update_keys","children":[],"call":["Zlib  crc32 ~ ","Zlib  crc32 ","@key2 ~ ","(send\n  (ivar :@key1) :>>\n  (int 24)) chr ","@key1 >> ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * + ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * ","@key1 + ","@key0 & ","@key0 ~ ","Zlib  crc32 ~  ~ ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :>>\n  (int 24)) chr ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) &  >> ","(send\n  (send\n    (begin\n      (send\n        (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :Zlib  crc32 ~ ) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * + ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ~ ) :&\n      (int 255)))) * + ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ~ ) :&\n      (int 255)))) * ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) &  + ","Zlib  crc32 ~  & "]}," Zip TraditionalEncryption reset_keys!":{"type":"method","name":"reset_keys!","children":[],"call":[" update_keys ","byte chr ","@password each_byte "]}," Zip TraditionalEncryption gp_flags":{"type":"method","name":"gp_flags","children":[],"call":["1 | "]}," Zip TraditionalEncryption header_bytesize":{"type":"method","name":"header_bytesize","children":[],"call":[]}," Zip TraditionalEncryption initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_keys! "]}," Zip NullDecrypter reset!":{"type":"method","name":"reset!","children":[],"call":[]}," Zip NullDecrypter decrypt":{"type":"method","name":"decrypt","children":[],"call":[]}," Zip NullEncrypter reset!":{"type":"method","name":"reset!","children":[],"call":[]}," Zip NullEncrypter data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":[]}," Zip NullEncrypter encrypt":{"type":"method","name":"encrypt","children":[],"call":[]}," Zip NullEncrypter header":{"type":"method","name":"header","children":[],"call":[]}," Zip NullEncryption gp_flags":{"type":"method","name":"gp_flags","children":[],"call":[]}," Zip NullEncryption header_bytesize":{"type":"method","name":"header_bytesize","children":[],"call":[]}," Zip File create_file_permissions":{"type":"method","name":"create_file_permissions","children":[],"call":["438 - "," File  umask "]}," Zip File create_tmpname":{"type":"method","name":"create_tmpname","children":[],"call":["f close ","File  open "," File CREAT  | | "," File CREAT  | "," Dir Tmpname  create "," File  split "," name ","File  open  close "]}," Zip File directory?":{"type":"method","name":"directory?","children":[],"call":["newEntry directory? ","newEntry name ","newEntry directory? ! "," raise ","srcPathIsDirectory ! "," File  directory? ","new_entry directory? ","new_entry name ","new_entry directory? ! ","path_is_directory ! "," File  directory?  ! "]}," Zip FileSystem ZipFileNameMapper glob":{"type":"method","name":"glob","children":[],"call":["@zipFile glob "," expand_to_entry ","@zip_file glob "]}," Zip Entry name_safe?":{"type":"method","name":"name_safe?","children":[],"call":["cleanpath expand_path to_s == ","cleanpath expand_path to_s ","cleanpath expand_path "," File  join ","cleanpath to_s ","cleanpath relative? ","Pathname  new cleanpath ","Pathname  new "," File  absolute_path == "," File  absolute_path "," File  absolute_path match? ","Pathname  new cleanpath  expand_path to_s == ","Pathname  new cleanpath  expand_path to_s ","Pathname  new cleanpath  expand_path ","Pathname  new cleanpath  to_s ","Pathname  new cleanpath  relative? ","Pathname  new Pathname  new cleanpath  "]}," Zip File add_stored":{"type":"method","name":"add_stored","children":[],"call":[" add "," Zip Entry  new ","entry to_s "," Zip Entry  new  to_s "]}," Zip UniversalTime mtime=":{"type":"method","name":"mtime=","children":[],"call":["@flag | ","@flag & ","MTIME_MASK  ~ ","time nil? ","@flag |  | ","@flag &  | ","@flag |  & ","@flag &  & "]}," Zip UniversalTime ctime=":{"type":"method","name":"ctime=","children":[],"call":["@flag | ","@flag & ","CTIME_MASK  ~ ","time nil? ","@flag |  | ","@flag &  | ","@flag |  & ","@flag &  & "]}," Zip UniversalTime atime=":{"type":"method","name":"atime=","children":[],"call":["@flag | ","@flag & ","ATIME_MASK  ~ ","time nil? ","@flag |  | ","@flag &  | ","@flag |  & ","@flag &  & "]}," Zip Entry set_unix_attributes_on_path":{"type":"method","name":"set_unix_attributes_on_path","children":[],"call":[" FileUtils  touch "," time "," FileUtils  chown "," Process  egid == "," Process  egid "," FileUtils  chmod ","@unix_perms & "]}," Zip DOSTime from_time":{"type":"method","name":"from_time","children":[],"call":[]}," Zip PassThruDecompressor eof":{"type":"method","name":"eof","children":[],"call":["@read_so_far >= "," decompressed_size "]}," Zip IOExtras AbstractInputStream eof":{"type":"method","name":"eof","children":[],"call":[" input_finished? ","@output_buffer empty? "]}," Zip InputStream get_decrypted_io":{"type":"method","name":"get_decrypted_io","children":[],"call":[" Zip DecryptedIo  new ","@decrypter reset! ","@archive_io read ","@decrypter header_bytesize ","@decrypter @archive_io read _bytesize "]}," Zip Inflater eof":{"type":"method","name":"eof","children":[],"call":[" input_finished? ","@buffer empty? "]}," Zip Entry incomplete?":{"type":"method","name":"incomplete?","children":[],"call":[" gp_flags & == "," gp_flags & "," gp_flags "]}," Zip Entry encrypted?":{"type":"method","name":"encrypted?","children":[],"call":[" gp_flags & == "," gp_flags & "," gp_flags "]}," Zip Decompressor find_by_compression_method":{"type":"method","name":"find_by_compression_method","children":[],"call":[]}," Zip Decompressor register":{"type":"method","name":"register","children":[],"call":[]}," Zip Decompressor decompressor_classes":{"type":"method","name":"decompressor_classes","children":[],"call":[]}," Zip DecryptedIo produce_input":{"type":"method","name":"produce_input","children":[],"call":["@decrypter decrypt ","@io read "]}," Zip DecryptedIo input_finished?":{"type":"method","name":"input_finished?","children":[],"call":["@io eof "]}," Zip DecryptedIo buffer":{"type":"method","name":"buffer","children":[],"call":[" dup "," +@ "]}," Zip DecryptedIo eof":{"type":"method","name":"eof","children":[],"call":[" input_finished? "," buffer empty? "," buffer "]}," Zip DecryptedIo read":{"type":"method","name":"read","children":[],"call":["outbuf replace "," buffer slice! "," output_buffer bytesize "," output_buffer "," buffer "," buffer << "," produce_input "," input_finished? "," buffer bytesize < "," buffer bytesize ","length nil? ","length zero? "," eof "]}," Zip DecryptedIo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip InputStream size":{"type":"method","name":"size","children":[],"call":["@current_entry size ","@current_entry nil? "]}," Zip FileSystem File Stat find_entry":{"type":"method","name":"find_entry","children":[],"call":["@zip_fs_file find_entry "]}," Zip FileSystem File Stat mode":{"type":"method","name":"mode","children":[],"call":["e external_file_attributes >> ","e external_file_attributes ","e fstype == ","e fstype "," find_entry "," find_entry   find_entry xt find_entry rnal_fil find_entry _attribut find_entry s >> "," find_entry   find_entry xt find_entry rnal_fil find_entry _attribut find_entry s "," find_entry  fstyp find_entry  == "," find_entry  fstyp find_entry  "," find_ find_entry ntry "]}," Zip FileSystem File Stat blksize":{"type":"method","name":"blksize","children":[],"call":[]}," Zip FileSystem File Stat nlink":{"type":"method","name":"nlink","children":[],"call":[]}," Zip FileSystem File Stat ftype":{"type":"method","name":"ftype","children":[],"call":[" raise "," directory? "," file? "]}," Zip FileSystem File Stat rdev_minor":{"type":"method","name":"rdev_minor","children":[],"call":[]}," Zip FileSystem File Stat rdev_major":{"type":"method","name":"rdev_major","children":[],"call":[]}," Zip FileSystem File Stat rdev":{"type":"method","name":"rdev","children":[],"call":[]}," Zip FileSystem File Stat dev":{"type":"method","name":"dev","children":[],"call":[]}," Zip FileSystem File Stat ino":{"type":"method","name":"ino","children":[],"call":[]}," Zip FileSystem File Stat uid":{"type":"method","name":"uid","children":[],"call":["e extra [] uid ","e extra [] ","e extra ","e extra member? "," find_entry "," find_entry   find_entry xtra [] uid "," find_entry   find_entry xtra [] "," find_entry   find_entry xtra "," find_entry   find_entry xtra m find_entry mb find_entry r? "," find_ find_entry ntry "]}," Zip FileSystem File Stat gid":{"type":"method","name":"gid","children":[],"call":["e extra [] gid ","e extra [] ","e extra ","e extra member? "," find_entry "," find_entry   find_entry xtra [] gid "," find_entry   find_entry xtra [] "," find_entry   find_entry xtra "," find_entry   find_entry xtra m find_entry mb find_entry r? "," find_ find_entry ntry "]}," Zip FileSystem File Stat blocks":{"type":"method","name":"blocks","children":[],"call":[]}," Zip FileSystem File Stat kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["type == "]}," Zip FileSystem File Stat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem File Stat delegate_to_fs_file":{"type":"method","name":"delegate_to_fs_file","children":[],"call":["@zip_fs_file __send__ "," define_method "," class_exec ","methods each "]}," Zip FileSystem File expand_path":{"type":"method","name":"expand_path","children":[],"call":["@mapped_zip expand_path "]}," Zip FileSystem File rename":{"type":"method","name":"rename","children":[],"call":["@mapped_zip rename "]}," Zip FileSystem File delete":{"type":"method","name":"delete","children":[],"call":["@mapped_zip remove "," raise "," directory? ","args each "]}," Zip FileSystem File foreach":{"type":"method","name":"foreach","children":[],"call":["is each_line "," open "]}," Zip FileSystem File popen":{"type":"method","name":"popen","children":[],"call":[" File  popen "]}," Zip FileSystem File read":{"type":"method","name":"read","children":[],"call":["@mapped_zip read "]}," Zip FileSystem File readlines":{"type":"method","name":"readlines","children":[],"call":[" open "]}," Zip FileSystem File stat":{"type":"method","name":"stat","children":[],"call":["Stat  new "," raise "," exists? "]}," Zip FileSystem File pipe":{"type":"method","name":"pipe","children":[],"call":[" raise "]}," Zip FileSystem File link":{"type":"method","name":"link","children":[],"call":[" raise "]}," Zip FileSystem File symlink":{"type":"method","name":"symlink","children":[],"call":[" raise "]}," Zip FileSystem File readlink":{"type":"method","name":"readlink","children":[],"call":[" raise "]}," Zip FileSystem File ftype":{"type":"method","name":"ftype","children":[],"call":["@mapped_zip get_entry directory? ","@mapped_zip get_entry "]}," Zip FileSystem File socket?":{"type":"method","name":"socket?","children":[],"call":[]}," Zip FileSystem File symlink?":{"type":"method","name":"symlink?","children":[],"call":["@mapped_zip get_entry symlink? ","@mapped_zip get_entry "]}," Zip FileSystem File chardev?":{"type":"method","name":"chardev?","children":[],"call":[]}," Zip FileSystem File blockdev?":{"type":"method","name":"blockdev?","children":[],"call":[]}," Zip FileSystem File pipe?":{"type":"method","name":"pipe?","children":[],"call":[]}," Zip FileSystem File ctime":{"type":"method","name":"ctime","children":[],"call":["@mapped_zip get_entry ctime ","@mapped_zip get_entry "]}," Zip FileSystem File atime":{"type":"method","name":"atime","children":[],"call":["@mapped_zip get_entry atime ","@mapped_zip get_entry "]}," Zip FileSystem File mtime":{"type":"method","name":"mtime","children":[],"call":["@mapped_zip get_entry mtime ","@mapped_zip get_entry "]}," Zip FileSystem File utime":{"type":"method","name":"utime","children":[],"call":[" find_entry time= "," find_entry ","filenames each "]}," Zip FileSystem File join":{"type":"method","name":"join","children":[],"call":[" File  join "]}," Zip FileSystem File split":{"type":"method","name":"split","children":[],"call":[" File  split "]}," Zip FileSystem File basename":{"type":"method","name":"basename","children":[],"call":[" File  basename "]}," Zip FileSystem File dirname":{"type":"method","name":"dirname","children":[],"call":[" File  dirname "]}," Zip FileSystem File file?":{"type":"method","name":"file?","children":[],"call":["entry file? ","entry nil? ! ","entry nil? ","@mapped_zip find_entry ","@mapped_zip find_entry  file? ","@mapped_zip find_entry  nil? ! ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem File zero?":{"type":"method","name":"zero?","children":[],"call":["sz == ","sz nil? "," size "," size  == "," size  nil? "]}," Zip FileSystem File chmod":{"type":"method","name":"chmod","children":[],"call":["filenames size ","e external_file_attributes= ","mode << ","e unix_perms= ","e fstype= "," find_entry ","filenames each ","fil find_entry nam find_entry s siz find_entry  "," find_entry   find_entry xt find_entry rnal_fil find_entry _attribut find_entry s= ","mod find_entry  << "," find_entry  unix_p find_entry rms= "," find_entry  fstyp find_entry = "," find_ find_entry ntry ","fil find_entry nam find_entry s  find_entry ach "]}," Zip FileSystem File chown":{"type":"method","name":"chown","children":[],"call":["filenames size ","e extra [] gid= ","e extra [] ","e extra ","e extra [] uid= ","e extra create ","e extra member? "," find_entry ","filenames each ","fil find_entry nam find_entry s siz find_entry  "," find_entry   find_entry xtra [] gid= "," find_entry   find_entry xtra [] "," find_entry   find_entry xtra "," find_entry   find_entry xtra [] uid= "," find_entry   find_entry xtra cr find_entry at find_entry  "," find_entry   find_entry xtra m find_entry mb find_entry r? "," find_ find_entry ntry ","fil find_entry nam find_entry s  find_entry ach "]}," Zip FileSystem File size?":{"type":"method","name":"size?","children":[],"call":["entry size ","entry directory? ","entry nil? ","@mapped_zip find_entry ","@mapped_zip find_entry  size ","@mapped_zip find_entry  directory? ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem File size":{"type":"method","name":"size","children":[],"call":["@mapped_zip get_entry size ","@mapped_zip get_entry "]}," Zip FileSystem File new":{"type":"method","name":"new","children":[],"call":[" open "]}," Zip FileSystem File open":{"type":"method","name":"open","children":[],"call":[" raise ","mode == ","@mapped_zip get_output_stream ","@mapped_zip get_input_stream ","mode tr ","mode tr  == ","mode tr  tr "]}," Zip FileSystem File directory?":{"type":"method","name":"directory?","children":[],"call":["entry directory? ","entry nil? ! ","entry nil? "," expand_path == "," expand_path ","@mapped_zip find_entry ","@mapped_zip find_entry  directory? ","@mapped_zip find_entry  nil? ! ","@mapped_zip find_entry  nil? ","@mapped_zip find_@mapped_zip find_entry  "]}," Zip FileSystem File truncate":{"type":"method","name":"truncate","children":[],"call":[" raise "]}," Zip FileSystem File umask":{"type":"method","name":"umask","children":[],"call":[" File  umask "]}," Zip FileSystem File sticky?":{"type":"method","name":"sticky?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File setgid?":{"type":"method","name":"setgid?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File setuid?":{"type":"method","name":"setuid?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File executable?":{"type":"method","name":"executable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File writable?":{"type":"method","name":"writable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File readable?":{"type":"method","name":"readable?","children":[],"call":[" unix_mode_cmp "]}," Zip FileSystem File exists?":{"type":"method","name":"exists?","children":[],"call":["@mapped_zip find_entry nil? ! ","@mapped_zip find_entry nil? ","@mapped_zip find_entry "," expand_path == "," expand_path "]}," Zip FileSystem File unix_mode_cmp":{"type":"method","name":"unix_mode_cmp","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :e) :external_file_attributes) :>>\n      (int 16))) :&\n  (lvar :mode)) != ","(send\n  (send\n    (lvar :e) :external_file_attributes) :>>\n  (int 16)) & ","e external_file_attributes >> ","e external_file_attributes ","e fstype == ","e fstype "," find_entry ","(s find_entry nd\n  (b find_entry gin\n    (s find_entry nd\n      (s find_entry nd\n        (lvar : find_entry ) : find_entry xt find_entry rnal_fil find_entry _attribut find_entry s) :>>\n      (int 16))) :&\n  (lvar :mod find_entry )) != ","(s find_entry nd\n  (s find_entry nd\n    (lvar : find_entry ) : find_entry xt find_entry rnal_fil find_entry _attribut find_entry s) :>>\n  (int 16)) & "," find_entry   find_entry xt find_entry rnal_fil find_entry _attribut find_entry s >> "," find_entry   find_entry xt find_entry rnal_fil find_entry _attribut find_entry s "," find_entry  fstyp find_entry  == "," find_entry  fstyp find_entry  "," find_ find_entry ntry "]}," Zip FileSystem File find_entry":{"type":"method","name":"find_entry","children":[],"call":["@mapped_zip find_entry "," raise "," exists? "]}," Zip FileSystem File initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem DirectoryIterator tell":{"type":"method","name":"tell","children":[],"call":[" raise ","@filenames nil? "]}," Zip FileSystem DirectoryIterator seek":{"type":"method","name":"seek","children":[],"call":[" raise ","@filenames nil? "]}," Zip FileSystem DirectoryIterator rewind":{"type":"method","name":"rewind","children":[],"call":[" raise ","@filenames nil? "]}," Zip FileSystem DirectoryIterator read":{"type":"method","name":"read","children":[],"call":["@filenames [] ","(op-asgn\n  (ivasgn :@index) :+\n  (int 1)) - "," raise ","@filenames nil? "]}," Zip FileSystem DirectoryIterator each":{"type":"method","name":"each","children":[],"call":["@filenames each "," raise ","@filenames nil? "]}," Zip FileSystem DirectoryIterator close":{"type":"method","name":"close","children":[],"call":[]}," Zip FileSystem DirectoryIterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSystem Dir chroot":{"type":"method","name":"chroot","children":[],"call":[" raise "]}," Zip FileSystem Dir mkdir":{"type":"method","name":"mkdir","children":[],"call":["@mapped_zip mkdir "]}," Zip FileSystem Dir delete":{"type":"method","name":"delete","children":[],"call":["@mapped_zip remove "," raise ","@file stat directory? ","@file stat "]}," Zip FileSystem Dir foreach":{"type":"method","name":"foreach","children":[],"call":["match [] ","match nil? ","subdir_entry_regex match ","@mapped_zip each ","Regexp  new ","Regexp  escape ","path << ","path end_with? ","@file expand_path "," raise ","@file stat directory? ","@file stat ","subdir_entry_regex match  [] ","subdir_entry_regex match  nil? ","subdir_entry_regex subdir_entry_regex match  ","Regexp  new  match ","Regexp  escape  << ","@file expand_path  << ","Regexp  escape  end_with? ","@file expand_path  end_with? ","@file expand_Regexp  escape  ","@file expand_@file expand_path  "]}," Zip FileSystem Dir glob":{"type":"method","name":"glob","children":[],"call":["@mapped_zip glob "]}," Zip FileSystem Dir entries":{"type":"method","name":"entries","children":[],"call":["entries << "," foreach "]}," Zip FileSystem Dir chdir":{"type":"method","name":"chdir","children":[],"call":["@mapped_zip pwd= ","@file expand_path "," raise ","@file stat directory? ","@file stat "]}," Zip FileSystem Dir pwd":{"type":"method","name":"pwd","children":[],"call":["@mapped_zip pwd "]}," Zip FileSystem Dir open":{"type":"method","name":"open","children":[],"call":["dir_iter close "," block_given? "," new "," new  close "]}," Zip FileSystem Dir new":{"type":"method","name":"new","children":[],"call":["DirectoryIterator  new "," entries "]}," Zip FileSystem Dir initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip FileSplit split":{"type":"method","name":"split","children":[],"call":[" File  delete "," save_splited_part ","zip_file eof? "," File  open "," get_partial_zip_file_name "," Zip File  open "," get_segment_count_for_split ","zip_file_size <= "," get_segment_size_for_split "," File  size "," raise "," File  readable? "," File  exist? "," get_ get_partial_zip_file_name  "," get_ get_segment_count_for_split _for_split "," File  size  <= "," get_ get_segment_size_for_split _for_split "]}," Zip FileSplit save_splited_part":{"type":"method","name":"save_splited_part","children":[],"call":[" block_given? ","szip_file << ","zip_file read ","(lvar :segment_bytes_left) min ","ssegment_size - ","zip_file eof? ","ssegment_size == "," put_split_signature ","szip_file_index == "," File  open "," format ","ssegment_size > ","zip_file_size - ","zip_file pos ","(lvar :ssegment_size - ) min "," put_split_signature  - ","zip_file_size -  - "," put_split_signature  == ","zip_file_size -  == "," put_split_signature  > ","zip_file_size -  > "]}," Zip FileSplit put_split_signature":{"type":"method","name":"put_split_signature","children":[],"call":["segment_size - ","signature_packed size ","szip_file << ","(const nil :SPLIT_FILE_SIGNATURE) pack ","(const nil :SPLIT_FILE_SIGNATURE) pack  size "]}," Zip FileSplit get_segment_count_for_split":{"type":"method","name":"get_segment_count_for_split","children":[],"call":["(send\n  (lvar :zip_file_size) :/\n  (lvar :segment_size)) to_i + ","(send\n  (lvar :zip_file_size) :%\n  (lvar :segment_size)) zero? ","zip_file_size % ","(send\n  (lvar :zip_file_size) :/\n  (lvar :segment_size)) to_i ","zip_file_size / "]}," Zip FileSplit get_partial_zip_file_name":{"type":"method","name":"get_partial_zip_file_name","children":[],"call":["zip_file_name sub ","partial_zip_file_name + "," File  extname "," File  basename ","partial_zip_file_name nil? ","zip_file_name sub  + ","zip_file_name sub  nil? "]}," Zip FileSplit get_segment_size_for_split":{"type":"method","name":"get_segment_size_for_split","children":[],"call":["MAX_SEGMENT_SIZE  < ","MIN_SEGMENT_SIZE  > "]}," Zip File initialize_cdir":{"type":"method","name":"initialize_cdir","children":[],"call":[" raise ","@create ! "," File  zero? ","@cdir read_from_stream ","path_or_io size > ","path_or_io size "," File  open ","path_or_io binmode ","path_or_io respond_to? "," File  stat mode "," File  stat "," File  size? ","@name to_s "," Zip CentralDirectory  new "," Zip CentralDirectory  new  read_from_stream "]}," Zip File count_entries":{"type":"method","name":"count_entries","children":[],"call":["cdir count_entries "," File  open ","path_or_io kind_of? "," Zip CentralDirectory  new "," Zip CentralDirectory  new  count_entries "]}," Zip Unknown ==":{"type":"method","name":"==","children":[],"call":["@cdir_bin == ","other to_c_dir_bin ","@local_bin == ","other to_local_bin "]}," Zip Unknown to_c_dir_bin":{"type":"method","name":"to_c_dir_bin","children":[],"call":[]}," Zip Unknown to_local_bin":{"type":"method","name":"to_local_bin","children":[],"call":[]}," Zip Unknown merge":{"type":"method","name":"merge","children":[],"call":["@cdir_bin << ","@local_bin << ","binstr empty? "]}," Zip Unknown initialize":{"type":"method","name":"initialize","children":[],"call":[" +@ "]}," Zip StreamingError message":{"type":"method","name":"message","children":[],"call":["@entry name "]}," Zip StreamingError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip SplitArchiveError message":{"type":"method","name":"message","children":[],"call":[]}," Zip EntrySizeError message":{"type":"method","name":"message","children":[],"call":["@entry size ","@entry name "]}," Zip EntrySizeError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip EntryNameError message":{"type":"method","name":"message","children":[],"call":["@name nil? "]}," Zip EntryNameError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip EntryExistsError message":{"type":"method","name":"message","children":[],"call":[]}," Zip EntryExistsError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip DestinationExistsError message":{"type":"method","name":"message","children":[],"call":[]}," Zip DestinationExistsError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip DecompressionError message":{"type":"method","name":"message","children":[],"call":["@zlib_error message "]}," Zip DecompressionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip CompressionMethodError message":{"type":"method","name":"message","children":[],"call":["COMPRESSION_METHODS  [] "]}," Zip CompressionMethodError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip Entry prep_cdir_zip64_extra":{"type":"method","name":"prep_cdir_zip64_extra","children":[],"call":["zip64 relative_header_offset= ","@local_header_offset >= ","zip64 compressed_size= ","@compressed_size >= ","zip64 original_size= ","@size >= ","@extra create ","@extra [] "," Zip  write_zip64_support "]}," Zip Entry prep_local_zip64_extra":{"type":"method","name":"prep_local_zip64_extra","children":[],"call":["zip64 compressed_size= ","zip64 original_size= ","@extra create ","@extra [] ","@compressed_size >= ","@size >= ","@size nil? "," zip64? "," file? ! "," file? ","@size < "," zip64? ! "," Zip  write_zip64_support "]}," Zip Entry set_compression_level_flags":{"type":"method","name":"set_compression_level_flags","children":[],"call":[" compression_method == "," compression_method "]}," Zip Entry read_extra_field":{"type":"method","name":"read_extra_field","children":[],"call":[" Zip ExtraField  new ","@extra merge ","@extra kind_of? "," Zip ExtraField  new  merge "," Zip ExtraField  new  kind_of? "]}," Zip Entry ftype":{"type":"method","name":"ftype","children":[],"call":[" name_is_directory? "]}," Zip Entry zip64?":{"type":"method","name":"zip64?","children":[],"call":["@extra [] nil? ! ","@extra [] nil? ","@extra [] "]}," Zip Entry compression_method=":{"type":"method","name":"compression_method=","children":[],"call":[" ftype == "," ftype "]}," Zip Entry compression_method":{"type":"method","name":"compression_method","children":[],"call":["@compression_level == "," ftype == "," ftype "]}," Zip Entry ctime=":{"type":"method","name":"ctime=","children":[],"call":[" send "]}," Zip Entry atime=":{"type":"method","name":"atime=","children":[],"call":[" send "]}," Zip Entry ctime":{"type":"method","name":"ctime","children":[],"call":[" time "]}," Zip Entry atime":{"type":"method","name":"atime","children":[],"call":[" time "]}," Zip Entry size":{"type":"method","name":"size","children":[],"call":[]}," Zip DOSTime JRubyCMP >=":{"type":"method","name":">=","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) >= "," <=> "]}," Zip DOSTime JRubyCMP >":{"type":"method","name":">","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) positive? "," <=> "]}," Zip DOSTime JRubyCMP <=":{"type":"method","name":"<=","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) <= "," <=> "]}," Zip DOSTime JRubyCMP <":{"type":"method","name":"<","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) negative? "," <=> "]}," Zip DOSTime JRubyCMP ==":{"type":"method","name":"==","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) zero? "," <=> "]}," Zip DOSTime <=>":{"type":"method","name":"<=>","children":[],"call":["(send\n  (send nil :to_i) :/\n  (int 2)) <=> ","other to_i / ","other to_i "," to_i / "," to_i ","other kind_of? "]}," Zip Dirtyable included":{"type":"method","name":"included","children":[],"call":[]}," Zip Dirtyable ClassMethods mark_dirty":{"type":"method","name":"mark_dirty","children":[],"call":[" send "," define_method "," alias_method ","symbols each "]}," Zip Dirtyable dirty?":{"type":"method","name":"dirty?","children":[],"call":[]}," Zip Dirtyable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zip CentralDirectory eocd_data":{"type":"method","name":"eocd_data","children":[],"call":["io read ","io tell ","io seek ","MAX_END_OF_CD_SIZE  -@ "]}," Zip CentralDirectory read_eocds":{"type":"method","name":"read_eocds","children":[],"call":[" unpack_e_o_c_d ","data slice "," unpack_64_e_o_c_d ","io read ","base_location + - ","base_location + ","io seek "," raise "," unpack_64_eocd_locator ","data rindex ","(const nil :ZIP64_END_OF_CD_SIG) pack ","(const nil :ZIP64_EOCD_LOCATOR_SIG) pack ","(const nil :END_OF_CD_SIG) pack "," eocd_data "]}," Zip CentralDirectory read_local_extra_field":{"type":"method","name":"read_local_extra_field","children":[],"call":["io read ","io seek ","head == ","buf unpack ","buf bytesize == ","buf bytesize "]}," Zip CentralDirectory unpack_e_o_c_d":{"type":"method","name":"unpack_e_o_c_d","children":[],"call":["buffer slice ","comment_length positive? ","cdir_offset == ","size_in_bytes == ","num_entries == ","num_cdir_disk == ","num_disk_cdir == ","num_disk == ","buffer unpack "]}," Zip CentralDirectory unpack_64_eocd_locator":{"type":"method","name":"unpack_64_eocd_locator","children":[],"call":["buffer unpack "]}," Zip CentralDirectory unpack_64_e_o_c_d":{"type":"method","name":"unpack_64_e_o_c_d","children":[],"call":["buffer slice ","zip64_extensible_data_size zero? ","@size_of_zip64_e_o_c_d - + ","@size_of_zip64_e_o_c_d - ","buffer unpack ","@size_of_zip64_e_o_c_d - +  zero? "]}," Zip CentralDirectory count_entries":{"type":"method","name":"count_entries","children":[],"call":[" read_eocds "]}}