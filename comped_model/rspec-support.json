{" RSpec Support method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":[]}," RSpec Support define_optimized_require_for_rspec":{"type":"method","name":"define_optimized_require_for_rspec","children":[],"call":[]}," RSpec Support Warnings warn_with":{"type":"method","name":"warn_with","children":[],"call":[" Kernel  warn ","message << ","options [] ","CallerFilter  first_non_rspec_line ","options fetch ","Support  warning_notifier call ","Support  warning_notifier "]}," RSpec Support Warnings warning":{"type":"method","name":"warning","children":[],"call":[" warn_with "]}," RSpec Support Warnings warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" warn_with "]}," RSpec Support Warnings deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn_with "]}," RSpec Support VersionChecker parse_version":{"type":"method","name":"parse_version","children":[],"call":["v to_i ","version split map ","version split "]}," RSpec Support VersionChecker version_requirement":{"type":"method","name":"version_requirement","children":[],"call":[]}," RSpec Support VersionChecker compare_version":{"type":"method","name":"compare_version","children":[],"call":["@patch < ","@minor > ","@minor < ","@major > ","@major < "]}," RSpec Support VersionChecker raise_too_low_error":{"type":"method","name":"raise_too_low_error","children":[],"call":[" raise ","(str \"You are using \") + "," version_requirement "]}," RSpec Support VersionChecker too_low?":{"type":"method","name":"too_low?","children":[],"call":["@comparison_result == "]}," RSpec Support VersionChecker check_version!":{"type":"method","name":"check_version!","children":[],"call":[" raise_too_low_error "," too_low? "]}," RSpec Support VersionChecker initialize":{"type":"method","name":"initialize","children":[],"call":[" compare_version "," parse_version "]}," Spec setup_simplecov":{"type":"method","name":"setup_simplecov","children":[],"call":[]}," RSpec Support WithIsolatedStdErr with_isolated_stderr":{"type":"method","name":"with_isolated_stderr","children":[],"call":["StringIO  new "]}," RSpec Support StdErrSplitter output":{"type":"method","name":"output","children":[],"call":["@output_tracker string "]}," RSpec Support StdErrSplitter verify_example!":{"type":"method","name":"verify_example!","children":[],"call":[" reset! ","example send "," output "," has_output? "]}," RSpec Support StdErrSplitter reset!":{"type":"method","name":"reset!","children":[],"call":[" StringIO  new "]}," RSpec Support StdErrSplitter has_output?":{"type":"method","name":"has_output?","children":[],"call":[" output empty? ! "," output empty? "," output "]}," RSpec Support StdErrSplitter write":{"type":"method","name":"write","children":[],"call":["@output_tracker write ","@orig_stderr write ","line !~ ","line =~ ","@last_line =~ "]}," RSpec Support StdErrSplitter ==":{"type":"method","name":"==","children":[],"call":["@orig_stderr == "]}," RSpec Support StdErrSplitter method_missing":{"type":"method","name":"method_missing","children":[],"call":["@orig_stderr __send__ ","@output_tracker __send__ ","@output_tracker respond_to? "]}," RSpec Support StdErrSplitter initialize":{"type":"method","name":"initialize","children":[],"call":[" StringIO  new "]}," RSpec Support InSubProcess in_sub_process":{"type":"method","name":"in_sub_process","children":[],"call":[" skip ","This spec requires forking to work properly,  + "," raise ","readme close ","Marshal  load ","readme read ","Process  waitpid ","writeme close "," exit! ","writeme write ","Marshal  dump ","Process  fork ","IO  pipe "," pending ","result_reader close ","result_reader read ","exception_reader close ","exception_reader read ","result_writer close ","exception_writer close ","result_writer write "," marshal_dump_with_unmarshable_object_handling ","exception_writer write ","warning_preventer verify_no_warnings! ","RSpec Support StdErrSplitter  new ","warning_preventer verify_example! ","Marshal  load _reader close ","Marshal  load _reader read ","Marshal  load _writer close ","Marshal  load _writer write "]}," RSpec Support FormattingSupport dedent":{"type":"method","name":"dedent","children":[],"call":["string gsub chomp ","string gsub "]}," RSpecHelpers allow_warning":{"type":"method","name":"allow_warning","children":[],"call":[" allow to "," receive "," allow "]}," RSpecHelpers expect_warning_with_call_site":{"type":"method","name":"expect_warning_with_call_site","children":[],"call":[" expect to "," match "," expect "," receive "," receive with "," match and "]}," RSpecHelpers expect_warning_without_call_site":{"type":"method","name":"expect_warning_without_call_site","children":[],"call":[" expect to_not "," match "," expect "," expect to "," receive "," receive with "," match and ","(match-with-lvasgn\n  (regexp\n    (str \"Called from\")\n    (regopt))\n  (lvar :message)) ! "," satisfy "]}," RSpecHelpers expect_no_deprecations":{"type":"method","name":"expect_no_deprecations","children":[],"call":[" expect not_to "," receive "," expect ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpecHelpers allow_deprecation":{"type":"method","name":"allow_deprecation","children":[],"call":[" allow to "," receive "," allow ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpecHelpers expect_warn_deprecation":{"type":"method","name":"expect_warn_deprecation","children":[],"call":[" expect to "," match "," expect ","options [] "," receive ","RSpec  configuration reporter ","RSpec  configuration "," receive with "," include "]}," RSpecHelpers expect_warn_deprecation_with_call_site":{"type":"method","name":"expect_warn_deprecation_with_call_site","children":[],"call":[" expect to "," include ","(lvar :file) join "," expect "," match ","options [] "," receive ","RSpec  configuration reporter ","RSpec  configuration "," receive with "]}," RSpecHelpers expect_deprecation_without_call_site":{"type":"method","name":"expect_deprecation_without_call_site","children":[],"call":[" expect to "," match "," expect ","options [] "," eq "," receive ","RSpec  configuration reporter ","RSpec  configuration "," receive with "," include "]}," RSpecHelpers expect_deprecation_with_call_site":{"type":"method","name":"expect_deprecation_with_call_site","children":[],"call":[" expect to "," match "," expect ","options [] "," include ","(lvar :file) join "," receive ","RSpec  configuration reporter ","RSpec  configuration "," receive with "]}," RSpecHelpers expect_no_deprecation":{"type":"method","name":"expect_no_deprecation","children":[],"call":[" expect not_to "," receive "," expect ","RSpec  configuration reporter ","RSpec  configuration "]}," RSpec Support RubyFeatures supports_rebinding_module_methods?":{"type":"method","name":"supports_rebinding_module_methods?","children":[],"call":["RUBY_ENGINE  != ","RUBY_VERSION  to_i >= ","RUBY_VERSION  to_i "]}," RSpec Support RubyFeatures module_prepends_supported?":{"type":"method","name":"module_prepends_supported?","children":[],"call":["Module  private_method_defined? ","RUBY_VERSION  to_f >= ","RUBY_VERSION  to_f ","Module  method_defined? "]}," RSpec Support RubyFeatures required_kw_args_supported?":{"type":"method","name":"required_kw_args_supported?","children":[],"call":["RUBY_ENGINE  != ","RUBY_VERSION  >= "]}," RSpec Support RubyFeatures kw_args_supported?":{"type":"method","name":"kw_args_supported?","children":[],"call":["RUBY_ENGINE  != ","RUBY_VERSION  >= "]}," RSpec Support RubyFeatures optional_and_splat_args_supported?":{"type":"method","name":"optional_and_splat_args_supported?","children":[],"call":["Method  method_defined? "]}," RSpec Support MethodSignatureVerifier split_args":{"type":"method","name":"split_args","children":[],"call":["args pop keys ","args pop ","@signature has_kw_args_in? ","args length ","(send\n  (lvar :last) :select) keys ","k is_a? ","last select ","args << ","last keys ","non_kw_args empty? ","last reject ","@signature has_args pop keys _in? ","(send\n  (lvar :args pop ) :select) keys ","args pop  select ","args pop  keys ","non_args pop keys  empty? ","args pop  reject "]}," RSpec Support MethodSignatureVerifier invalid_kw_args":{"type":"method","name":"invalid_kw_args","children":[],"call":["@signature invalid_kw_args_from "," kw_args "]}," RSpec Support MethodSignatureVerifier missing_kw_args":{"type":"method","name":"missing_kw_args","children":[],"call":["@signature missing_kw_args_from "," kw_args "]}," RSpec Support MethodSignatureVerifier valid_non_kw_args?":{"type":"method","name":"valid_non_kw_args?","children":[],"call":["actual <= ","@signature max_non_kw_args ","@signature min_non_kw_args <= ","@signature min_non_kw_args "," non_kw_args length "," non_kw_args ","@signature valid_non_kw_args? "," max_non_kw_args "," min_non_kw_args "," non_kw_args length  <= "]}," RSpec Support MethodSignatureVerifier error_message":{"type":"method","name":"error_message","children":[],"call":["Wrong number of arguments. Expected %s, got %s. % "," non_kw_args length "," non_kw_args ","@signature non_kw_args_arity_description "," valid_non_kw_args? ! "," valid_non_kw_args? ","Invalid keyword arguments provided: %s % "," invalid_kw_args join "," invalid_kw_args "," invalid_kw_args any? ","Missing required keyword arguments: %s % "," missing_kw_args join "," missing_kw_args "," missing_kw_args any? "]}," RSpec Support MethodSignatureVerifier valid?":{"type":"method","name":"valid?","children":[],"call":[" valid_non_kw_args? "," invalid_kw_args empty? "," invalid_kw_args "," missing_kw_args empty? "," missing_kw_args "," unlimited_args? "," arbitrary_kw_args? "]}," RSpec Support MethodSignatureVerifier initialize":{"type":"method","name":"initialize","children":[],"call":[" split_args "]}," RSpec Support BlockSignature classify_parameters":{"type":"method","name":"classify_parameters","children":[],"call":["@max_non_kw_args == "]}," RSpec Support MethodSignature classify_parameters":{"type":"method","name":"classify_parameters","children":[],"call":["arity ~ ","arity < ","@method arity ","@required_kw_args + ","@min_non_kw_args + ","@optional_kw_args << ","@required_kw_args << ","@method parameters each ","@method parameters "," classify_arity ","compatible_overloads first arity ","compatible_overloads first ","compatible_overloads size == ","compatible_overloads size ","@method == ","@method owner instance_method ","java_method name ","@method owner ","java_instance_methods select ","@method owner java_class java_instance_methods ","@method owner java_class ","@method owner respond_to? ","@method respond_to? ","@method arity == ","@method parameters empty? ","(lvasgn :arity\n  (send\n    (ivar :@method) :arity)) != ","@method parameters == ","@method arity  ~ ","@method arity  < ","@method @method arity  ","arity ~  + "," classify_@method arity  ","compatible_overloads first @method arity  ","@method owner java_class java_instance_methods  select ","@method owner java_class @method owner java_class java_instance_methods  ","@method @method arity  == ","(lvasgn :@method arity \n  (send\n    (ivar :@method) :@method arity )) != "]}," RSpec Support MethodSignature has_kw_args_in?":{"type":"method","name":"has_kw_args_in?","children":[],"call":["@allowed_kw_args any? ","args count <= "," min_non_kw_args ","args count ","Hash  === ","args last "," could_contain_kw_args? ","x is_a? ","args last keys any? ","args last keys ","args last empty? "]}," RSpec Support MethodSignature invalid_kw_args_from":{"type":"method","name":"invalid_kw_args_from","children":[],"call":["given_kw_args - "]}," RSpec Support MethodSignature missing_kw_args_from":{"type":"method","name":"missing_kw_args_from","children":[],"call":["@required_kw_args - "]}," RSpec Support MethodSignature description":{"type":"method","name":"description","children":[],"call":[" non_kw_args_arity_description ","parts join ","parts << ","@required_kw_args map join ","@required_kw_args map ","@required_kw_args any? ","@optional_kw_args map join ","@optional_kw_args map ","@optional_kw_args any? "," non_kw_args_arity_description == "]}," RSpec Support MethodSignature non_kw_args_arity_description":{"type":"method","name":"non_kw_args_arity_description","children":[],"call":[" max_non_kw_args "," min_non_kw_args "," min_non_kw_args to_s "]}," RSpec Support MethodSignature initialize":{"type":"method","name":"initialize","children":[],"call":[" classify_parameters "]}," RSpec Support HunkGenerator context_lines":{"type":"method","name":"context_lines","children":[],"call":[]}," RSpec Support HunkGenerator build_hunk":{"type":"method","name":"build_hunk","children":[],"call":["h file_length_difference ","Diff LCS Hunk  new tap ","Diff LCS Hunk  new "," context_lines "," actual_lines "," expected_lines "]}," RSpec Support HunkGenerator actual_lines":{"type":"method","name":"actual_lines","children":[],"call":["e chomp ","@actual split map! ","@actual split "]}," RSpec Support HunkGenerator expected_lines":{"type":"method","name":"expected_lines","children":[],"call":["e chomp ","@expected split map! ","@expected split "]}," RSpec Support HunkGenerator diffs":{"type":"method","name":"diffs","children":[],"call":["Diff LCS  diff "," actual_lines "," expected_lines "]}," RSpec Support HunkGenerator hunks":{"type":"method","name":"hunks","children":[],"call":[" build_hunk "," diffs map "," diffs "]}," RSpec Support HunkGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Support FuzzyMatcher hashes_match?":{"type":"method","name":"hashes_match?","children":[],"call":[]}," RSpec Support FuzzyMatcher arrays_match?":{"type":"method","name":"arrays_match?","children":[],"call":[]}," RSpec Support FuzzyMatcher values_match?":{"type":"method","name":"values_match?","children":[],"call":[]}," RSpec Support EncodedString detect_source_encoding":{"type":"method","name":"detect_source_encoding","children":[],"call":["string encoding "]}," RSpec Support EncodedString matching_encoding":{"type":"method","name":"matching_encoding","children":[],"call":[" normalize_missing ","string force_encoding encode ","string force_encoding ","string encode ","string dup force_encoding encode ","string dup force_encoding ","string dup "," remove_invalid_bytes "," encode_no_converter "," encode_unconvertable_bytes "," remove_invalid_bytes  force_encoding encode "," remove_invalid_bytes  force_encoding "," remove_invalid_bytes  encode "," remove_invalid_bytes  dup force_encoding encode "," remove_invalid_bytes  dup force_encoding "," remove_invalid_bytes  dup "]}," RSpec Support EncodedString normalize_missing":{"type":"method","name":"normalize_missing","children":[],"call":["string gsub ","MRI_UNICODE_UNKOWN_CHARACTER  force_encoding ","@encoding to_s == ","@encoding to_s "]}," RSpec Support EncodedString to_s":{"type":"method","name":"to_s","children":[],"call":[]}," RSpec Support EncodedString split":{"type":"method","name":"split","children":[],"call":["@string split "," matching_encoding "," remove_invalid_bytes split "," remove_invalid_bytes "]}," RSpec Support EncodedString <<":{"type":"method","name":"<<","children":[],"call":["@string << "," matching_encoding "]}," RSpec Support EncodedString initialize":{"type":"method","name":"initialize","children":[],"call":[" matching_encoding "," detect_source_encoding "]}," RSpec Support Differ handle_encoding_errors":{"type":"method","name":"handle_encoding_errors","children":[],"call":["@expected source_encoding ","(str \"Could not produce a diff because the encoding of the actual string (\") + ","@actual source_encoding ","@actual source_encoding != ","expected source_encoding ","actual source_encoding ","actual source_encoding != "]}," RSpec Support Differ pick_encoding":{"type":"method","name":"pick_encoding","children":[],"call":["Encoding  default_external ","Encoding  compatible? "]}," RSpec Support Differ object_to_string":{"type":"method","name":"object_to_string","children":[],"call":["PP  pp ","object inspect ","object =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :object) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","PP  singleline_pp ","object [] ","(send\n  (send\n    (lvar :object) :keys) :sort_by) map ","k to_s ","object keys sort_by ","object keys ","@object_preparer call "," dup ","ObjectFormatter  prepare_for_inspection "," hash_to_string ","@object_preparer call  inspect ","@object_preparer call  =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :@object_preparer call ) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","@object_preparer call  [] ","(send\n  (send\n    (lvar :@object_preparer call ) :keys) :sort_by) map ","@object_preparer call  keys sort_by ","@object_preparer call  keys ","@@object_preparer call _preparer call "]}," RSpec Support Differ color_diff":{"type":"method","name":"color_diff","children":[],"call":["(send\n  (send\n    (lvar :diff) :lines) :map) join "," normal "," blue ","line [] chr == ","line [] chr ","line [] "," red "," green ","diff lines map ","diff lines "," color? "]}," RSpec Support Differ normal":{"type":"method","name":"normal","children":[],"call":[" color "]}," RSpec Support Differ blue":{"type":"method","name":"blue","children":[],"call":[" color "]}," RSpec Support Differ green":{"type":"method","name":"green","children":[],"call":[" color "]}," RSpec Support Differ red":{"type":"method","name":"red","children":[],"call":[" color "]}," RSpec Support Differ color":{"type":"method","name":"color","children":[],"call":[]}," RSpec Support Differ format":{"type":"method","name":"format","children":[],"call":[]}," RSpec Support Differ add_old_hunk_to_hunk":{"type":"method","name":"add_old_hunk_to_hunk","children":[],"call":["hunk merge "]}," RSpec Support Differ add_to_output":{"type":"method","name":"add_to_output","children":[],"call":["output << "]}," RSpec Support Differ finalize_output":{"type":"method","name":"finalize_output","children":[],"call":[" add_to_output "]}," RSpec Support Differ hunks":{"type":"method","name":"hunks","children":[],"call":["HunkGenerator  new hunks ","HunkGenerator  new "]}," RSpec Support Differ multiline?":{"type":"method","name":"multiline?","children":[],"call":["string include? ","\n encode ","string encoding "]}," RSpec Support Differ diffably_stringify":{"type":"method","name":"diffably_stringify","children":[],"call":["entry to_s gsub ","entry to_s ","entry inspect ","Array  === ","array map ","entry to_s gsub gsub "]}," RSpec Support Differ coerce_to_string":{"type":"method","name":"coerce_to_string","children":[],"call":[" diffably_stringify join "," diffably_stringify ","Array  === "]}," RSpec Support Differ no_numbers?":{"type":"method","name":"no_numbers?","children":[],"call":["Numeric  === ","args flatten none? ","args flatten "," safely_flatten none? "," safely_flatten "]}," RSpec Support Differ any_multiline_strings?":{"type":"method","name":"any_multiline_strings?","children":[],"call":[" multiline? ","args flatten any? ","args flatten "," all_strings? "," safely_flatten any? "," safely_flatten "]}," RSpec Support Differ all_strings?":{"type":"method","name":"all_strings?","children":[],"call":["String  === ","args flatten all? ","args flatten "," safely_flatten all? "," safely_flatten "]}," RSpec Support Differ no_procs?":{"type":"method","name":"no_procs?","children":[],"call":["Proc  === ","args flatten none? ","args flatten "," safely_flatten none? "," safely_flatten "]}," RSpec Support Differ initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "," lambda "]}," RSpec Support Differ diff_as_object":{"type":"method","name":"diff_as_object","children":[],"call":[" diff_as_string "," object_to_string "]}," RSpec Support Differ diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":[" handle_encoding_errors "," color_diff "," finalize_output "," hunks last diff to_s "," hunks last diff "," format "," hunks last "," hunks "," add_to_output ","prev_hunk diff to_s ","prev_hunk diff "," add_old_hunk_to_hunk ","current_hunk overlaps? "," hunks each_cons ","EncodedString  new "," pick_encoding "," format_type ","hunks last diff to_s ","hunks last diff ","hunks last ","hunks each_cons "," build_hunks ","EncodedString  pick_encoding "," handle_EncodedString  pick_encoding _errors "," handle_ pick_encoding _errors "," finalize_EncodedString  new  ","  build_hunks  last diff to_s ","  build_hunks  last diff ","  build_hunks  last ","  build_hunks  "," add_to_EncodedString  new  ","  build_hunks  each_cons "," pick_EncodedString  pick_encoding  "," pick_ pick_encoding  "," build_hunks  last diff to_s "," build_hunks  last diff "," build_hunks  last "," build_hunks  each_cons "," build_ build_hunks  ","EncodedString  pick_EncodedString  pick_encoding  ","EncodedString  pick_ pick_encoding  "]}," RSpec Support Differ diff":{"type":"method","name":"diff","children":[],"call":["diff to_s "," diff_as_object "," no_numbers? "," no_procs? "," diff_as_string "," coerce_to_string "," any_multiline_strings? "," all_strings? ","expected nil? ","actual nil? "," diff_as_object  to_s "," diff_as_string  to_s ","  diff_as_object _as_object ","  diff_as_string _as_object ","  diff_as_object _as_string ","  diff_as_string _as_string "]}," RSpec CallerFilter first_non_rspec_line":{"type":"method","name":"first_non_rspec_line","children":[],"call":[]}," RSpec warn_with":{"type":"method","name":"warn_with","children":[],"call":[]}," RSpec warning":{"type":"method","name":"warning","children":[],"call":[]}," RSpec warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[]}," RSpec deprecate":{"type":"method","name":"deprecate","children":[],"call":[]}," RSpec Support proc_to_lambda":{"type":"method","name":"proc_to_lambda","children":[],"call":[]}," RSpec Support BlockSignature initialize":{"type":"method","name":"initialize","children":[],"call":["Support  proc_to_lambda "]}," RSpec Support Spec start_simplecov":{"type":"method","name":"start_simplecov","children":[],"call":[]}," RSpec Support Spec setup_simplecov":{"type":"method","name":"setup_simplecov","children":[],"call":[]}," RSpec Support ShellOut run_ruby_with_current_load_path":{"type":"method","name":"run_ruby_with_current_load_path","children":[],"call":[" shell_out "," with_env ","$LOAD_PATH map join ","$LOAD_PATH map "]}," RSpec Support ShellOut shell_out":{"type":"method","name":"shell_out","children":[],"call":[" instance_double ","err read ","out read ","Open3  popen3 ","Open3  capture3 "," filter ","FakeProcessStatus  new "]}," RSpec Support ShellOut with_env":{"type":"method","name":"with_env","children":[],"call":["ENV  replace ","ENV  []= ","vars each ","ENV  to_hash "]}," RSpec Support WarningsPrevention files_to_require_for":{"type":"method","name":"files_to_require_for","children":[],"call":["file [] ","files sort map ","files sort ","Regexp  escape + ","Regexp  escape ","Dir  [] ","$LOAD_PATH grep first ","$LOAD_PATH grep ","slash + ","load_path sub ","Dir  []  sort map ","Dir  []  sort ","$LOAD_PATH grep first  sub "]}," RSpec Support RecursiveConstMethods normalize_const_name":{"type":"method","name":"normalize_const_name","children":[],"call":["const_name sub "]}," RSpec Support RecursiveConstMethods recursive_const_defined?":{"type":"method","name":"recursive_const_defined?","children":[],"call":["(lvar :mod) join "," get_const_defined_on "," const_defined_on? ","(send\n  (const nil :Module) :===\n  (lvar :mod)) ! ","Module  === "," block_given? ","parts inject "," normalize_const_name split "," normalize_const_name ","(send\n  (lvar :mod) :name) join ","mod name "," normalize_const_name split  inject "]}," RSpec Support RecursiveConstMethods recursive_const_get":{"type":"method","name":"recursive_const_get","children":[],"call":[" get_const_defined_on "," normalize_const_name split inject "," normalize_const_name split "," normalize_const_name "]}," RSpec Support RecursiveConstMethods constants_defined_on":{"type":"method","name":"constants_defined_on","children":[],"call":["mod constants "," const_defined_on? ","mod constants select "]}," RSpec Support RecursiveConstMethods get_const_defined_on":{"type":"method","name":"get_const_defined_on","children":[],"call":["mod const_get "," raise ","mod name "," const_defined_on? "]}," RSpec Support RecursiveConstMethods const_defined_on?":{"type":"method","name":"const_defined_on?","children":[],"call":["mod const_defined? "]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher has_kw_args_in?":{"type":"method","name":"has_kw_args_in?","children":[],"call":["@signature has_kw_args_in? "]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher valid_non_kw_args?":{"type":"method","name":"valid_non_kw_args?","children":[],"call":["@signature valid_non_kw_args? "]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher non_kw_args_arity_description":{"type":"method","name":"non_kw_args_arity_description","children":[],"call":["@signature non_kw_args_arity_description "]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher invalid_kw_args_from":{"type":"method","name":"invalid_kw_args_from","children":[],"call":[]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher missing_kw_args_from":{"type":"method","name":"missing_kw_args_from","children":[],"call":[]}," RSpec Support LooseSignatureVerifier SignatureWithKeywordArgumentsMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Support LooseSignatureVerifier split_args":{"type":"method","name":"split_args","children":[],"call":["SignatureWithKeywordArgumentsMatcher  new ","args pop ","@signature could_contain_kw_args? ","RSpec Support  is_a_matcher? ","args last ","SignatureWithKeywordArgumentsMatcher  new  could_contain_kw_args? "]}," RSpec Support MethodSignature could_contain_kw_args?":{"type":"method","name":"could_contain_kw_args?","children":[],"call":["@allowed_kw_args any? ","args count <= "," min_non_kw_args ","args count "]}," RSpec Support MethodSignature valid_non_kw_args?":{"type":"method","name":"valid_non_kw_args?","children":[],"call":["positional_arg_count <= "," max_non_kw_args "," min_non_kw_args <= "," min_non_kw_args ","optional_max_arg_count <= ","positional_arg_count nil? "]}," RSpec Support is_a_matcher?":{"type":"method","name":"is_a_matcher?","children":[],"call":[]}," RSpec Support deregister_matcher_definition":{"type":"method","name":"deregister_matcher_definition","children":[],"call":[]}," RSpec Support register_matcher_definition":{"type":"method","name":"register_matcher_definition","children":[],"call":[]}," RSpec Support matcher_definitions":{"type":"method","name":"matcher_definitions","children":[],"call":[]}," RSpec Support DirectoryMaker directory_exists?":{"type":"method","name":"directory_exists?","children":[],"call":[]}," RSpec Support DirectoryMaker mkdir_p":{"type":"method","name":"mkdir_p","children":[],"call":[]}," RSpec Support Differ format_type":{"type":"method","name":"format_type","children":[],"call":[]}," RSpec Support Differ safely_flatten":{"type":"method","name":"safely_flatten","children":[],"call":["array flatten ","array == ","array flatten  flatten ","array flatten  == "]}," RSpec Support OS windows_file_path?":{"type":"method","name":"windows_file_path?","children":[],"call":[" File ALT_SEPARATOR  == "]}," RSpec Support OS windows?":{"type":"method","name":"windows?","children":[],"call":["RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"cygwin|mswin|mingw|bccwin|wince|emx\")\n    (regopt))) ! ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"cygwin|mswin|mingw|bccwin|wince|emx\")\n    (regopt))) ! "]}," RSpec Support DirectoryMaker generate_path":{"type":"method","name":"generate_path","children":[],"call":[]}," RSpec Support DirectoryMaker generate_stack":{"type":"method","name":"generate_stack","children":[],"call":[]}," RSpec Support ShellOut filter":{"type":"method","name":"filter","children":[],"call":["(send\n  (send\n    (lvar :output) :each_line) :reject) join ","line include? ","output each_line reject ","output each_line "]}," RSpec Support Ruby jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_PLATFORM  == "]}," RSpec Support AllExceptionsExceptOnesWeMustNotRescue ===":{"type":"method","name":"===","children":[],"call":[]}," RSpec Support warning_notifier":{"type":"method","name":"warning_notifier","children":[],"call":[]}," RSpec Support with_failure_notifier":{"type":"method","name":"with_failure_notifier","children":[],"call":[]}," RSpec Support notify_failure":{"type":"method","name":"notify_failure","children":[],"call":[]}," RSpec Support failure_notifier":{"type":"method","name":"failure_notifier","children":[],"call":[]}," RSpec Support failure_notifier=":{"type":"method","name":"failure_notifier=","children":[],"call":[]}," RSpec Support thread_local_data":{"type":"method","name":"thread_local_data","children":[],"call":[]}," RSpec Support class_of":{"type":"method","name":"class_of","children":[],"call":[]}," RSpec Support WithKeywordsWhenNeeded class_exec":{"type":"method","name":"class_exec","children":[],"call":["klass class_exec "," binding eval "," binding ","MethodSignature  new has_kw_args_in? ","MethodSignature  new "]}," expected_encoding?":{"type":"method","name":"expected_encoding?","children":[],"call":[" actual encoding == "," expected encoding "," expected "," actual encoding "," actual "]}," RSpec Support StdErrSplitter verify_no_warnings!":{"type":"method","name":"verify_no_warnings!","children":[],"call":[" reset! "," raise "," output "," has_output? "]}," RSpec Support StdErrSplitter to_io":{"type":"method","name":"to_io","children":[],"call":["@orig_stderr to_io "]}," RSpec Support StdErrSplitter reopen":{"type":"method","name":"reopen","children":[],"call":["@orig_stderr reopen "," reset! "]}," RSpec Support ShellOut strip_known_warnings":{"type":"method","name":"strip_known_warnings","children":[],"call":["(send\n  (send\n    (lvar :input) :split\n    (str \"\\n\")) :reject) join ","l nil? ","l == ","l =~ ","LINES_TO_IGNORE  any? ","input split reject ","input split "]}," have_successful_no_warnings_output":{"type":"method","name":"have_successful_no_warnings_output","children":[],"call":[" eq "]}," load_all_files":{"type":"method","name":"load_all_files","children":[],"call":["status exitstatus "," strip_known_warnings "," run_ruby_with_current_load_path ","options << ","RSpec Support Ruby  mri? ","RUBY_VERSION  to_f >= ","RUBY_VERSION  to_f "," with_env "," command_from "," Array + + "," Array "," Array + ","files map ","(send\n  (send\n    (lvar :stderr) :split\n    (str \"\\n\")) :reject) join ","l =~ ","stderr split reject ","stderr split ","  command_from _from ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :stderr) :split\n    (str \"\\n\")) :reject) join ) :split\n    (str \"\\n\")) :reject) join ","(send\n  (send\n    (lvar :stderr) :split\n    (str \"\\n\")) :reject) join  split reject ","(send\n  (send\n    (lvar :stderr) :split\n    (str \"\\n\")) :reject) join  split "]}," command_from":{"type":"method","name":"command_from","children":[],"call":["code_lines join "]}," RSpec Support WhitespaceChecks check_for_extra_spaces":{"type":"method","name":"check_for_extra_spaces","children":[],"call":["failing_lines join ","failing_lines empty? ","failing_lines << ","number + ","line =~ ","File  readlines each_with_index ","File  readlines "]}," RSpec Support WhitespaceChecks check_for_tab_characters":{"type":"method","name":"check_for_tab_characters","children":[],"call":["failing_lines join ","failing_lines empty? ","failing_lines << ","number + ","line =~ ","File  readlines each_with_index ","File  readlines "]}," RSpec Support InSubProcess in_sub_process_if_possible":{"type":"method","name":"in_sub_process_if_possible","children":[],"call":[]}," RSpec Support InSubProcess marshal_dump_with_unmarshable_object_handling":{"type":"method","name":"marshal_dump_with_unmarshable_object_handling","children":[],"call":["Marshal  dump ","UnmarshableObject  new "]}," RSpec Support Spec DiffHelpers removing_two_line_header":{"type":"method","name":"removing_two_line_header","children":[],"call":[]}," RSpec Support Spec DiffHelpers one_line_header":{"type":"method","name":"one_line_header","children":[],"call":[]}," RSpecHelpers expect_no_warnings":{"type":"method","name":"expect_no_warnings","children":[],"call":[" expect not_to "," receive "," expect "]}," RSpec Support Source tokens_by_line_number":{"type":"method","name":"tokens_by_line_number","children":[],"call":["(send\n  (const nil :Hash) :new) merge ","hash []= ","Hash  new ","token location line ","token location "," tokens group_by "," tokens "]}," RSpec Support Source nodes_by_line_number":{"type":"method","name":"nodes_by_line_number","children":[],"call":["(send\n  (const nil :Hash) :new) merge ","hash []= ","Hash  new ","node location line ","node location "," ast select group_by "," ast select "," ast "]}," RSpec Support Source tokens":{"type":"method","name":"tokens","children":[],"call":["Token  tokens_from_ripper_tokens ","Ripper  lex "," source "," require ","Token  Ripper  lex _from_ripper_Ripper  lex  "]}," RSpec Support Source ast":{"type":"method","name":"ast","children":[],"call":["Node  new "," raise ","Ripper  sexp "," source "," require ","Ripper  Ripper  sexp  "]}," RSpec Support Source inspect":{"type":"method","name":"inspect","children":[],"call":[" path "," class "]}," RSpec Support Source lines":{"type":"method","name":"lines","children":[],"call":[" source split "," source "]}," RSpec Support Source initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","RSpec Support EncodedString  new ","Encoding  default_external "]}," RSpec Support Source from_file":{"type":"method","name":"from_file","children":[],"call":[]}," RSpec Support Source Token closed_by_keyword?":{"type":"method","name":"closed_by_keyword?","children":[],"call":["other string == ","CLOSING_KEYWORDS_BY_OPENING_KEYWORD  [] "," string ","other string ","other keyword? "]}," RSpec Support Source Token closed_by_delimiter?":{"type":"method","name":"closed_by_delimiter?","children":[],"call":["other type == ","CLOSING_TYPES_BY_OPENING_TYPE  [] "," type ","other type "]}," RSpec Support Source Token opening_keyword?":{"type":"method","name":"opening_keyword?","children":[],"call":["CLOSING_KEYWORDS_BY_OPENING_KEYWORD  key? "," string "," keyword? "]}," RSpec Support Source Token opening_delimiter?":{"type":"method","name":"opening_delimiter?","children":[],"call":["CLOSING_TYPES_BY_OPENING_TYPE  key? "," type "]}," RSpec Support Source Token closed_by?":{"type":"method","name":"closed_by?","children":[],"call":[" closed_by_keyword? "," closed_by_delimiter? "," keyword_closed_by? "," delimiter_closed_by? "]}," RSpec Support Source Token opening?":{"type":"method","name":"opening?","children":[],"call":[" opening_keyword? "," opening_delimiter? "]}," RSpec Support Source Token keyword?":{"type":"method","name":"keyword?","children":[],"call":[" type == "," type "]}," RSpec Support Source Token inspect":{"type":"method","name":"inspect","children":[],"call":[" string inspect "," string "," type "," class "]}," RSpec Support Source Token ==":{"type":"method","name":"==","children":[],"call":[" token == ","other token "," token "]}," RSpec Support Source Token string":{"type":"method","name":"string","children":[],"call":[" token [] "," token "]}," RSpec Support Source Token type":{"type":"method","name":"type","children":[],"call":[" token [] "," token "]}," RSpec Support Source Token location":{"type":"method","name":"location","children":[],"call":["Location  new "," token [] "," token "]}," RSpec Support Source Token initialize":{"type":"method","name":"initialize","children":[],"call":["ripper_token freeze "]}," RSpec Support Source Token tokens_from_ripper_tokens":{"type":"method","name":"tokens_from_ripper_tokens","children":[],"call":[]}," RSpec Support Source ExpressionSequenceNode raw_args":{"type":"method","name":"raw_args","children":[],"call":[" sexp "]}," RSpec Support Source ExpressionSequenceNode type":{"type":"method","name":"type","children":[],"call":[]}," RSpec Support Source Node raw_args":{"type":"method","name":"raw_args","children":[],"call":[" sexp [] "," sexp "]}," RSpec Support Source Node inspect":{"type":"method","name":"inspect","children":[],"call":[" type "," class "]}," RSpec Support Source Node each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":["current_node parent "," to_enum "," __method__ "," block_given? ","current_node parent  parent "]}," RSpec Support Source Node each":{"type":"method","name":"each","children":[],"call":["node_queue concat ","current_node children ","node_queue shift ","node_queue << "," to_enum "," __method__ "," block_given? ","child each "," children each "," children ","node_queue shift  children "]}," RSpec Support Source Node location":{"type":"method","name":"location","children":[],"call":["arg is_a? "," args find "," args "]}," RSpec Support Source Node children":{"type":"method","name":"children","children":[],"call":["(send\n  (send nil :args) :select) freeze ","arg is_a? "," args select "," args "]}," RSpec Support Source Node args":{"type":"method","name":"args","children":[],"call":["(send\n  (send nil :raw_args) :map) freeze ","ExpressionSequenceNode  new ","raw_arg is_a? ","Location  new ","Location  location? ","Node  new ","Node  sexp? "," raw_args map "," raw_args "]}," RSpec Support Source Node type":{"type":"method","name":"type","children":[],"call":[" sexp [] "," sexp "]}," RSpec Support Source Node initialize":{"type":"method","name":"initialize","children":[],"call":["ripper_sexp freeze "]}," RSpec Support Source Node sexp?":{"type":"method","name":"sexp?","children":[],"call":[]}," RSpec Support Source <=>":{"type":"method","name":"<=>","children":[],"call":[" column <=> ","other column "," column ","line_comparison == "," line <=> ","other line "," line "]}," RSpec Support Source location?":{"type":"method","name":"location?","children":[],"call":[]}," RSpec Support RubyFeatures module_refinement_supported?":{"type":"method","name":"module_refinement_supported?","children":[],"call":["Module  private_method_defined? ","Module  method_defined? "]}," RSpec Support RubyFeatures foo":{"type":"method","name":"foo","children":[],"call":[]}," RSpec Support RubyFeatures ripper_supported?":{"type":"method","name":"ripper_supported?","children":[],"call":[]}," RSpec Support RubyFeatures supports_taint?":{"type":"method","name":"supports_taint?","children":[],"call":[]}," RSpec Support RubyFeatures supports_exception_cause?":{"type":"method","name":"supports_exception_cause?","children":[],"call":[]}," RSpec Support RubyFeatures caller_locations_supported?":{"type":"method","name":"caller_locations_supported?","children":[],"call":[" respond_to? "]}," RSpec Support RubyFeatures fork_supported?":{"type":"method","name":"fork_supported?","children":[],"call":["Process  respond_to? "]}," RSpec Support Ruby truffleruby?":{"type":"method","name":"truffleruby?","children":[],"call":["RUBY_ENGINE  == "]}," RSpec Support Ruby mri?":{"type":"method","name":"mri?","children":[],"call":["RUBY_ENGINE  == ","(const nil :RUBY_ENGINE) ! "]}," RSpec Support Ruby non_mri?":{"type":"method","name":"non_mri?","children":[],"call":[" mri? ! "," mri? "]}," RSpec Support Ruby rbx?":{"type":"method","name":"rbx?","children":[],"call":["RUBY_ENGINE  == "]}," RSpec Support Ruby jruby_9000?":{"type":"method","name":"jruby_9000?","children":[],"call":["JRUBY_VERSION  >= "," jruby? "]}," RSpec Support Ruby jruby_version":{"type":"method","name":"jruby_version","children":[],"call":["ComparableVersion  new "]}," RSpec Support Mutex new":{"type":"method","name":"new","children":[],"call":[]}," RSpec Support ReentrantMutex exit":{"type":"method","name":"exit","children":[],"call":["@mutex unlock ","@count == "," raise ","@mutex owned? "]}," RSpec Support ReentrantMutex enter":{"type":"method","name":"enter","children":[],"call":["Thread  current ","@mutex lock ","@owner != ","@mutex owned? ","Thread  current  != "]}," RSpec Support ReentrantMutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" exit "," enter "]}," RSpec Support ReentrantMutex initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," RSpec Support ObjectFormatter truncate_string":{"type":"method","name":"truncate_string","children":[],"call":["cut_str sub ","str [] ","str []  sub "]}," RSpec Support ObjectFormatter InspectableObjectInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" object inspect "," object "]}," RSpec Support ObjectFormatter InspectableObjectInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter DelegatorInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" formatter format "," object send "," object "," formatter "," object class "," object __getobj__ "]}," RSpec Support ObjectFormatter DelegatorInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter UninspectableObjectInspector native_object_id":{"type":"method","name":"native_object_id","children":[],"call":["OBJECT_ID_FORMAT  % "," object __id__ << "," object __id__ "," object "]}," RSpec Support ObjectFormatter UninspectableObjectInspector klass":{"type":"method","name":"klass","children":[],"call":["Support  class_of "," object ","ancestor equal? ! ","ancestor equal? ","singleton_class ancestors find ","singleton_class ancestors "]}," RSpec Support ObjectFormatter UninspectableObjectInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" native_object_id "," klass "]}," RSpec Support ObjectFormatter UninspectableObjectInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter DescribableMatcherInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" object description "," object "]}," RSpec Support ObjectFormatter DescribableMatcherInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter BigDecimalInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" object inspect "," object "," object to_s "]}," RSpec Support ObjectFormatter BigDecimalInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter DateTimeInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" object inspect "," object "," object strftime "]}," RSpec Support ObjectFormatter DateTimeInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter TimeInspector inspect":{"type":"method","name":"inspect","children":[],"call":[" object strftime ","%06d % "," object usec "," object ","%09d % "," object nsec "]}," RSpec Support ObjectFormatter TimeInspector can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text "," inspect "," text "," inspection "]}," RSpec Support ObjectFormatter inspect":{"type":"method","name":"inspect","children":[],"call":[" raise "," text "," inspection "," object inspect "," object ","ObjectFormatter  format "," object __getobj__ "," object class "," Delegator  === "]}," RSpec Support ObjectFormatter can_inspect?":{"type":"method","name":"can_inspect?","children":[],"call":[]}," RSpec Support ObjectFormatter recursive_structure?":{"type":"method","name":"recursive_structure?","children":[],"call":["seen_structure equal? ","@current_structure_stack any? "]}," RSpec Support ObjectFormatter with_entering_structure":{"type":"method","name":"with_entering_structure","children":[],"call":["@current_structure_stack pop ","@current_structure_stack push "]}," RSpec Support ObjectFormatter prepare_element":{"type":"method","name":"prepare_element","children":[],"call":[" prepare_for_inspection "," raise ","InspectableItem  new "," recursive_structure? "]}," RSpec Support ObjectFormatter sort_hash_keys":{"type":"method","name":"sort_hash_keys","children":[],"call":["Hash  [] ","k to_s ","input_hash sort_by ","k is_a? ","input_hash keys all? ","input_hash keys "]}," RSpec Support ObjectFormatter prepare_hash":{"type":"method","name":"prepare_hash","children":[],"call":["output_hash []= "," prepare_element ","key_and_value map "," sort_hash_keys inject "," sort_hash_keys "," with_entering_structure ","input_hash inject ","hash []= "," prepare_for_inspection ","input inject "]}," RSpec Support ObjectFormatter prepare_array":{"type":"method","name":"prepare_array","children":[],"call":[" prepare_element ","array map "," with_entering_structure "]}," RSpec Support ObjectFormatter prepare_for_inspection":{"type":"method","name":"prepare_for_inspection","children":[],"call":["inspector_class new ","inspector can_inspect? ","INSPECTOR_CLASSES  find "," prepare_hash "," prepare_array ","InspectableItem  new ","DelegatingInspector  new ","object description ","object respond_to? ","RSpec Support  is_a_matcher? ","object inspect ","object to_s ","BigDecimal  === "," format_date_time ","DateTime  === "," format_time "," prepare_for_inspection ","object map "," prepare_for_object description  "," prepare_for_ format_date_time  "," prepare_for_ format_time  "]}," RSpec Support ObjectFormatter format":{"type":"method","name":"format","children":[],"call":["beginning + + ","beginning + "," truncate_string "," max_formatted_output_length -@ / "," max_formatted_output_length -@ "," max_formatted_output_length "," max_formatted_output_length / ","formatted_object length < ","formatted_object length "," prepare_for_inspection inspect "," prepare_for_inspection "," max_formatted_output_length nil? ","formatted_object [] "," truncate_string  + + ","formatted_object []  + + "," truncate_string  + ","formatted_object []  + "," prepare_for_inspection inspect  length < "," prepare_for_inspection inspect  length "," prepare_for_inspection inspect  [] "]}," RSpec Support ObjectFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Support ObjectFormatter default_instance":{"type":"method","name":"default_instance","children":[],"call":[]}," RSpec Support Mutex wakeup_and_run_waiting_thread":{"type":"method","name":"wakeup_and_run_waiting_thread","children":[],"call":["t run ","Thread  critical= ","t wakeup ","@waiting shift ","@waiting shift  run ","Thread  cri@waiting shift ical= ","@waiting shift  wakeup ","@wai@waiting shift ing shif@waiting shift  "]}," RSpec Support Mutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" unlock "," lock "]}," RSpec Support Mutex unlock":{"type":"method","name":"unlock","children":[],"call":[" wakeup_and_run_waiting_thread ","Thread  critical= "]}," RSpec Support Mutex lock":{"type":"method","name":"lock","children":[],"call":["Thread  critical= ","Thread  stop ","@waiting push ","Thread  current "]}," RSpec Support Mutex initialize":{"type":"method","name":"initialize","children":[],"call":[" taint ","@waiting taint "]}," RSpec Support MethodSignatureVerifier unlimited_args?":{"type":"method","name":"unlimited_args?","children":[],"call":["@signature unlimited_args? ","@unlimited_args ! "]}," RSpec Support MethodSignatureVerifier arbitrary_kw_args?":{"type":"method","name":"arbitrary_kw_args?","children":[],"call":["@signature arbitrary_kw_args? ","@arbitrary_kw_args ! "]}," RSpec Support MethodSignatureVerifier with_expectation":{"type":"method","name":"with_expectation","children":[],"call":["expectation expect_arbitrary_keywords ","expectation keywords ","RubyFeatures  kw_args_supported? ","expectation expect_unlimited_arguments ","RubyFeatures  optional_and_splat_args_supported? ","expectation max_count ","expectation min_count ","expectation empty? ","MethodSignatureExpectation  === "]}," RSpec Support MethodSignatureExpectation keywords=":{"type":"method","name":"keywords=","children":[],"call":["values to_a "]}," RSpec Support MethodSignatureExpectation empty?":{"type":"method","name":"empty?","children":[],"call":["@expect_unlimited_arguments ! ","@expect_arbitrary_keywords ! ","@keywords to_a empty? ","@keywords to_a ","@min_count nil? "]}," RSpec Support MethodSignatureExpectation min_count=":{"type":"method","name":"min_count=","children":[],"call":[" raise ","number >= ","number is_a? ","number nil? "]}," RSpec Support MethodSignatureExpectation max_count=":{"type":"method","name":"max_count=","children":[],"call":[" raise ","number >= ","number is_a? ","number nil? "]}," RSpec Support MethodSignatureExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Support MethodSignature unlimited_args?":{"type":"method","name":"unlimited_args?","children":[],"call":["@max_non_kw_args == "]}," RSpec Support MethodSignature arbitrary_kw_args?":{"type":"method","name":"arbitrary_kw_args?","children":[],"call":[]}," RSpec Support MethodSignature classify_arity":{"type":"method","name":"classify_arity","children":[],"call":["arity ~ ","arity < "]}," RSpec Support rspec_description_for_object":{"type":"method","name":"rspec_description_for_object","children":[],"call":[]}," RSpec Support EncodedString pick_encoding":{"type":"method","name":"pick_encoding","children":[],"call":[]}," RSpec Support EncodedString remove_invalid_bytes":{"type":"method","name":"remove_invalid_bytes","children":[],"call":["(send\n  (send\n    (lvar :string) :chars) :map) join ","char valid_encoding? ","string chars map ","string chars ","string scrub "]}," RSpec Support Differ hash_to_string":{"type":"method","name":"hash_to_string","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :formatted_hash) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","PP  singleline_pp "," dup ","formatted_hash [] ","(send\n  (send\n    (lvar :formatted_hash) :keys) :sort_by) map ","k to_s ","formatted_hash keys sort_by ","formatted_hash keys ","ObjectFormatter  prepare_for_inspection ","(send\n  (block\n    (send\n      (send\n        (lvar :ObjectFormatter  prepare_for_inspection ) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","ObjectFormatter  prepare_for_inspection  [] ","(send\n  (send\n    (lvar :ObjectFormatter  prepare_for_inspection ) :keys) :sort_by) map ","ObjectFormatter  prepare_for_inspection  keys sort_by ","ObjectFormatter  prepare_for_inspection  keys "]}," RSpec Support Differ build_hunks":{"type":"method","name":"build_hunks","children":[],"call":["HunkGenerator  new hunks ","HunkGenerator  new "]}," RSpec Support Differ color?":{"type":"method","name":"color?","children":[],"call":[]}," RSpec Support ComparableVersion segments":{"type":"method","name":"segments","children":[],"call":["segment to_i ","segment =~ "," string scan map "," string scan "," string "]}," RSpec Support ComparableVersion <=>":{"type":"method","name":"<=>","children":[],"call":["self_segment is_a? ","result == ","self_segment <=> ","self_segment class == ","other_segment class ","self_segment class ","other segments [] ","other segments "," segments [] "," segments ","longer_segment_count times ","(send\n  (array\n    (self)\n    (lvar :other)) :map) max ","version segments count ","version segments ","(self) map "," string == ","other string "," string "," class new "," class ","other is_a? ","self_segment <=>  == "," class new _segment class "," class new  segments [] "," class new  segments ","(send\n  (array\n    (self)\n    (lvar :other)) :map) max  times ","(send\n  (array\n    (self)\n    (lvar : class new )) :map) max "," class new  string "," class new  is_a? "]}," RSpec Support ComparableVersion initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Support Source Token keyword_closed_by?":{"type":"method","name":"keyword_closed_by?","children":[],"call":[" location line == ","other location line ","other location "," location line "," location ","other equals_operator? "," string == "," string ","other string == ","CLOSING_KEYWORDS_BY_OPENING_KEYWORD  [] ","other string "," keyword? "]}," RSpec Support Source Token delimiter_closed_by?":{"type":"method","name":"delimiter_closed_by?","children":[],"call":["other type == ","CLOSING_TYPES_BY_OPENING_TYPE  [] "," type ","other type "]}," RSpec Support Source Token equals_operator?":{"type":"method","name":"equals_operator?","children":[],"call":[" string == "," string "," type == "," type "]}," RSpec Support RubyFeatures distincts_kw_args_from_positional_hash?":{"type":"method","name":"distincts_kw_args_from_positional_hash?","children":[],"call":["RUBY_VERSION  >= "]}," check_for_extra_spaces":{"type":"method","name":"check_for_extra_spaces","children":[],"call":["failing_lines join ","failing_lines empty? ","failing_lines << ","number + ","line =~ ","File  readlines each_with_index ","File  readlines "]}," check_for_tab_characters":{"type":"method","name":"check_for_tab_characters","children":[],"call":["failing_lines join ","failing_lines empty? ","failing_lines << ","number + ","line =~ ","File  readlines each_with_index ","File  readlines "]}," RSpec Support ObjectFormatter format_date_time":{"type":"method","name":"format_date_time","children":[],"call":["date_time inspect ","date_time strftime "]}," RSpec Support ObjectFormatter format_time":{"type":"method","name":"format_time","children":[],"call":["time strftime ","%06d % ","time usec ","%09d % ","time nsec "]}," RSpec Support EncodedString encode_no_converter":{"type":"method","name":"encode_no_converter","children":[],"call":["string encode "]}," RSpec Support EncodedString encode_unconvertable_bytes":{"type":"method","name":"encode_unconvertable_bytes","children":[],"call":["string encode "]}}