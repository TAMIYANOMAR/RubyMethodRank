{" TTY Spinner write":{"type":"method","name":"write","children":[],"call":[" output flush "," output "," output print ","ECMA_CSI  + + ","ECMA_CSI  + ","characters_in + ","@multispinner line_inset ","@multispinner nil? ","TTY Cursor  column "," execute_on_line "," tty? ","@multispinner line_inset  + "]}," TTY Spinner reset":{"type":"method","name":"reset","children":[],"call":[" synchronize "]}," TTY Spinner stop":{"type":"method","name":"stop","children":[],"call":[" write "," message + "," message ","stop_message empty? "," message empty? ","ECMA_CSI  + + ","ECMA_CSI  + "," reset ","data << ","  + ","stop_message empty? ! "," message gsub ","@frames [] ","@current - "," error? "," success? "," clear_line "," emit "," spinning? "," kill "," replace_tokens "," next_char "," mon_exit ","TTY Cursor  show "," done? "," mon_enter "," message gsub  << "," replace_tokens  << "]}," TTY Spinner spin":{"type":"method","name":"spin","children":[],"call":["(send\n  (ivar :@current) :+\n  (int 1)) % ","@current + "," write "," message + ","@frames [] "," message ","ECMA_CSI  + + ","ECMA_CSI  + ","@spinning ! "," message gsub "," spinning? ! "," spinning? "," replace_tokens ","TTY Cursor  hide "," synchronize "," emit ","(send\n  (ivar :(send\n  (ivar :@current) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@current) :+\n  (int 1)) %  + "]}," TTY Spinner initialize":{"type":"method","name":"initialize","children":[],"call":["@frames length ","FORMATS  [] ","@format to_sym ","options fetch ","args pop ","args empty? ","args last is_a? ","args last ","h []= ","Hash  new "," fetch_format ","options [] "," reset ","FORMATS  []  length ","args pop  fetch ","args pop  [] "]}," TTY Spinner fetch_format":{"type":"method","name":"fetch_format","children":[],"call":[" raise ","FORMATS  [] [] ","FORMATS  [] ","FORMATS  key? "]}," TTY Spinner emit":{"type":"method","name":"emit","children":[],"call":["block call ","@callbacks [] each ","@callbacks [] ","callback call "]}," TTY Spinner clear_line":{"type":"method","name":"clear_line","children":[],"call":[" output print ","ECMA_CSI  + + + + + ","ECMA_CSI  + + + + ","ECMA_CSI  + + + ","ECMA_CSI  + + ","ECMA_CSI  + "," output "," write ","TTY Cursor  clear_line "]}," TTY Spinner error":{"type":"method","name":"error","children":[],"call":[" emit "," stop "," synchronize "," done? "]}," TTY Spinner success":{"type":"method","name":"success","children":[],"call":[" emit "," stop "," synchronize "," done? "]}," TTY Spinner kill":{"type":"method","name":"kill","children":[],"call":["@thread kill "," synchronize "]}," TTY Spinner join":{"type":"method","name":"join","children":[],"call":["@thread join "," fail ","NotSpinningError  new "," raise "]}," TTY Spinner duration":{"type":"method","name":"duration","children":[],"call":["Time  now - ","Time  now "]}," TTY Spinner start":{"type":"method","name":"start","children":[],"call":[" sleep "," spin ","Thread  new ","1.0 / ","Time  now "," reset "]}," TTY Spinner on":{"type":"method","name":"on","children":[],"call":["@callbacks [] << ","@callbacks [] "," synchronize "]}," TTY Spinner error?":{"type":"method","name":"error?","children":[],"call":["@state == ","@succeeded == "]}," TTY Spinner success?":{"type":"method","name":"success?","children":[],"call":["@state == ","@succeeded == "]}," TTY Spinner spinning?":{"type":"method","name":"spinning?","children":[],"call":["@state == "]}," TTY Spinner replace_tokens":{"type":"method","name":"replace_tokens","children":[],"call":["data gsub! ","@tokens each ","string dup ","val to_s ","string dup  gsub! "]}," TTY Spinner update":{"type":"method","name":"update","children":[],"call":["@tokens merge! "," clear_line "," spinning? "," synchronize "]}," TTY Spinner next_char":{"type":"method","name":"next_char","children":[],"call":["@frames [] ","@current - "," error? "," success? "]}," TTY Spinner run":{"type":"method","name":"run","children":[],"call":[" stop ","@work join ","Thread  new "," start "," auto_spin "," execute_job "," job ","Thread  new  join "]}," TTY Spinner auto_spin":{"type":"method","name":"auto_spin","children":[],"call":[" sleep "," spin ","Thread  new ","1.0 / "," start ","Thread  current []= ","Thread  current ","Thread  stop ","Thread  current [] ","CURSOR_USAGE_LOCK  synchronize ","CURSOR_LOCK  synchronize "," write ","TTY Cursor  show "]}," TTY Spinner execute_on_line":{"type":"method","name":"execute_on_line","children":[],"call":[" block_given? "," output print ","TTY Cursor  restore "," output ","TTY Cursor  up ","TTY Cursor  save ","@multispinner count_line_offset ","CURSOR_USAGE_LOCK  synchronize ","(send\n  (send\n    (ivar :@multispinner) :rows) :+\n  (int 1)) - ","@multispinner rows + ","@multispinner rows ","@multispinner next_row ","CURSOR_LOCK  synchronize ","@multispinner synchronize "]}," TTY Spinner redraw_indent":{"type":"method","name":"redraw_indent","children":[],"call":[" write ","ECMA_CSI  + + ","ECMA_CSI  + "," spinning? ! "," spinning? ","TTY Cursor  hide "]}," TTY Spinner resume":{"type":"method","name":"resume","children":[],"call":["@thread wakeup "," paused? "]}," TTY Spinner pause":{"type":"method","name":"pause","children":[],"call":["@thread []= "," synchronize "," paused? "]}," TTY Spinner paused?":{"type":"method","name":"paused?","children":[],"call":["(and\n  (ivar :@thread)\n  (send\n    (ivar :@thread) :[]\n    (str \"pause\"))) ! ! ","(and\n  (ivar :@thread)\n  (send\n    (ivar :@thread) :[]\n    (str \"pause\"))) ! ","@thread [] "]}," TTY Spinner job?":{"type":"method","name":"job?","children":[],"call":["@job nil? ! ","@job nil? "]}," TTY Spinner execute_job":{"type":"method","name":"execute_job","children":[],"call":[" job call "," job "," instance_eval "," job arity zero? "," job arity "," job? "]}," TTY Spinner job":{"type":"method","name":"job","children":[],"call":[" block_given? "," synchronize "]}," TTY Spinner done?":{"type":"method","name":"done?","children":[],"call":[]}," TTY Spinner add_multispinner":{"type":"method","name":"add_multispinner","children":[],"call":[]}," TTY Spinner Multi emit":{"type":"method","name":"emit","children":[],"call":["block call ","@callbacks [] each ","@callbacks [] "]}," TTY Spinner Multi on":{"type":"method","name":"on","children":[],"call":["@callbacks [] << ","@callbacks [] "," raise ","@callbacks key? "]}," TTY Spinner Multi error":{"type":"method","name":"error","children":[],"call":[" emit ","@spinners dup each ","@spinners dup ","@top_spinner error "]}," TTY Spinner Multi success":{"type":"method","name":"success","children":[],"call":[" emit ","@spinners dup each ","@spinners dup ","@top_spinner success "]}," TTY Spinner Multi stop":{"type":"method","name":"stop","children":[],"call":[" emit ","@spinners dup each ","@spinners dup ","@top_spinner stop "]}," TTY Spinner Multi error?":{"type":"method","name":"error?","children":[],"call":["(send\n  (ivar :@spinners) :-\n  (array\n    (ivar :@top_spinner))) any? ","@spinners - "," synchronize "]}," TTY Spinner Multi success?":{"type":"method","name":"success?","children":[],"call":["(send\n  (ivar :@spinners) :-\n  (array\n    (ivar :@top_spinner))) all? ","@spinners - "," synchronize "]}," TTY Spinner Multi done?":{"type":"method","name":"done?","children":[],"call":["(send\n  (ivar :@spinners) :-\n  (array\n    (ivar :@top_spinner))) all? ","@spinners - "," synchronize "]}," TTY Spinner Multi line_inset":{"type":"method","name":"line_inset","children":[],"call":["@inset_opts [] ","@spinners last ","@top_spinner nil? ","line_no == "]}," TTY Spinner Multi count_line_offset":{"type":"method","name":"count_line_offset","children":[],"call":["spinner done? ","spinner spinning? "," Array reduce "," Array ","@spinners [] "]}," TTY Spinner Multi resume":{"type":"method","name":"resume","children":[],"call":["@spinners dup each ","@spinners dup "]}," TTY Spinner Multi pause":{"type":"method","name":"pause","children":[],"call":["@spinners dup each ","@spinners dup "]}," TTY Spinner Multi auto_spin":{"type":"method","name":"auto_spin","children":[],"call":["jobs each ","jobs << ","spinner execute_job ","Thread  new ","spinner auto_spin ","spinner job? ","@spinners each ","@top_spinner auto_spin "," raise ","@top_spinner nil? "]}," TTY Spinner Multi top_spinner":{"type":"method","name":"top_spinner","children":[],"call":[" raise ","@top_spinner nil? "]}," TTY Spinner Multi observe_events":{"type":"method","name":"observe_events","children":[],"call":["@top_spinner stop "," error? ! "," error? "," success? ! "," success? "," done? ","(send\n  (block\n    (send\n      (lvar :spinner) :on\n      (sym :success))\n    (args)\n    (if\n      (send nil :success?)\n      (send\n        (ivar :@top_spinner) :success) nil)) :on\n  (sym :error)) on ","@top_spinner error ","(send\n  (lvar :spinner) :on\n  (sym :success)) on ","@top_spinner success ","spinner on "]}," TTY Spinner Multi register":{"type":"method","name":"register","children":[],"call":["sp redraw_indent ","sp done? ","sp spinning? ","@spinners each ","@spinners << "," observe_events ","spinner job "," block_given? ","spinner add_multispinner ","@spinners length ","@create_spinner_lock synchronize ","TTY Spinner  new ","@options merge "," observe ","spinner attach_to "," synchronize ","options delete "," create_spinner ","@TTY Spinner  new s each ","@ create_spinner s each ","@TTY Spinner  new s << ","@ create_spinner s << ","TTY Spinner  new  job "," create_spinner  job ","TTY Spinner  new  add_multiTTY Spinner  new  "," create_spinner  add_multi create_spinner  ","@TTY Spinner  new s length ","@ create_spinner s length ","@create_TTY Spinner  new _lock synchronize ","@create_ create_spinner _lock synchronize ","TTY Spinner  new  attach_to "," create_spinner  attach_to "," create_TTY Spinner  new  "," create_ create_spinner  "]}," TTY Spinner Multi initialize":{"type":"method","name":"initialize","children":[],"call":[" register ","message nil? ","Mutex  new ","@options delete ","args pop ","args empty? ","args last is_a? ","args last "," next_row ","args pop  nil? ","args pop  delete "]}," TTY Spinner Multi done_handler":{"type":"method","name":"done_handler","children":[],"call":[" emit ","@top_spinner done "," success? ! "," success? "," error? ! "," error? "," done? "," proc ","@top_spinner stop "]}," TTY Spinner Multi error_handler":{"type":"method","name":"error_handler","children":[],"call":[" emit ","@top_spinner error "," error? "," proc "]}," TTY Spinner Multi success_handler":{"type":"method","name":"success_handler","children":[],"call":[" emit ","@top_spinner success "," success? "," proc "]}," TTY Spinner Multi observe":{"type":"method","name":"observe","children":[],"call":["spinner on on on "," done_handler ","spinner on on "," error_handler ","spinner on "," success_handler ","spinner on on on on "," spin_handler "]}," TTY Spinner Multi spin":{"type":"method","name":"spin","children":[],"call":["@top_spinner spin "," raise ","@top_spinner nil? "," throttle "," synchronize "]}," TTY Spinner Multi next_row":{"type":"method","name":"next_row","children":[],"call":["@create_spinner_lock synchronize "," synchronize "]}," TTY Spinner attach_to":{"type":"method","name":"attach_to","children":[],"call":[]}," TTY Spinner Multi spin_handler":{"type":"method","name":"spin_handler","children":[],"call":[" emit "," spin "," proc "]}," TTY Spinner Multi throttle":{"type":"method","name":"throttle","children":[],"call":["Time  now "," block_given? ","Time  now - < ","Time  now - ","1.0 / ","@top_spinner interval "]}," TTY Spinner tty?":{"type":"method","name":"tty?","children":[],"call":[" output tty? "," output "," output respond_to? "]}," TTY Spinner Multi create_spinner":{"type":"method","name":"create_spinner","children":[],"call":[" raise ","pattern_or_spinner class ","TTY Spinner  new ","@options merge "]}}