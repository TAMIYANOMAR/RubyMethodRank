{" PathExpander filter_files":{"type":"method","name":"filter_files","children":[],"call":["File  fnmatch? ","ifiles any? ","globs any? ","File  dirname ","dirs any? ","files reject ","s chomp ","dirs map ","p end_with? ","nonglobs partition ","p include? ","ignore_paths split partition ","ignore_paths split ","File  read ","File  exists? ","ignore read ","ignore respond_to? ","File  expand_path ","ifiles map! ","globs map! ","dirs map! ","File  exist? ","File  File  expand_path nmatch? ","iFile  expand_path iles any? ","File  expand_path iles reject ","ignore read  split partition ","ignore read  split ","iFile  expand_path iles map! "]}," PathExpander process":{"type":"method","name":"process","children":[],"call":["files uniq "," args replace "," process_flags "," args "," process_args "]}," PathExpander process_flags":{"type":"method","name":"process_flags","children":[],"call":[]}," PathExpander process_args":{"type":"method","name":"process_args","children":[],"call":["pos_files - ","flags << "," expand_dirs_to_files ","File  exist? "," args concat "," process_file "," args "," args each ","root_path ! ","File  expand_path == ","File  expand_path "," path ","files empty? ","pos_files << ","pos_pos_files -  - "," expand_dirs_to_pos_files -  ","File  expand_path ==  ! ","pos_files -  empty? ","pos_pos_files -  << "]}," PathExpander process_file":{"type":"method","name":"process_file","children":[],"call":["File  readlines map ","File  readlines "]}," PathExpander expand_dirs_to_files":{"type":"method","name":"expand_dirs_to_files","children":[],"call":["(send\n  (send\n    (lvar :dirs) :flatten) :map) flatten ","Dir  [] ","File  join "," glob ","File  directory? ","dirs flatten map ","dirs flatten ","File  file? ","Dir  [] find_all ","(send\n  (send\n    (lvar :dirs) :flatten) :map) flatten sort "]}," PathExpander initialize":{"type":"method","name":"initialize","children":[],"call":[" glob= "," args= "," path= "]}}