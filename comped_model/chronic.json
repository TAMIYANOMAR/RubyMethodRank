{" Chronic debug=":{"type":"method","name":"debug=","children":[],"call":[]}," Chronic SeparatorIn to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorAt to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorSlashOrDash to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic SeparatorComma to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic Separator to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic Separator scan_for_in":{"type":"method","name":"scan_for_in","children":[],"call":[]}," Chronic Separator scan_for_at":{"type":"method","name":"scan_for_at","children":[],"call":[]}," Chronic Separator scan_for_slash_or_dash":{"type":"method","name":"scan_for_slash_or_dash","children":[],"call":[]}," Chronic Separator scan_for_commas":{"type":"method","name":"scan_for_commas","children":[],"call":[]}," Chronic Separator scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic ScalarYear to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic ScalarMonth to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic ScalarDay to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic Scalar to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic Scalar scan_for_years":{"type":"method","name":"scan_for_years","children":[],"call":[]}," Chronic Scalar scan_for_months":{"type":"method","name":"scan_for_months","children":[],"call":[]}," Chronic Scalar scan_for_days":{"type":"method","name":"scan_for_days","children":[],"call":[]}," Chronic Scalar scan_for_scalars":{"type":"method","name":"scan_for_scalars","children":[],"call":[]}," Chronic Scalar scan":{"type":"method","name":"scan","children":[],"call":[]}," RepeaterYear to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterYear width":{"type":"method","name":"width","children":[],"call":["365 * * * ","365 * * ","365 * "]}," RepeaterYear offset":{"type":"method","name":"offset","children":[],"call":["Chronic Span  new ","Time  local ","se sec ","se min ","se hour ","se day ","se month ","se year + ","amount * ","se year ","span end ","sb sec ","sb min ","sb hour ","sb day ","sb month ","sb year + ","sb year ","span begin ","pointer == ","Time  construct ","span end  span end c ","span end  min ","span end  hour ","span end  day ","span end  month ","span end  year + ","span end  year ","sb span end c ","span begin  sec ","span begin  min ","span begin  hour ","span begin  day ","span begin  month ","span begin  year + ","span begin  year "]}," RepeaterYear this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","Time  local ","@now day ","@now month ","@now year ","@now year + ","Time  local + ","Time  construct ","Time  construct + "]}," RepeaterYear next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","Time  local ","@current_year_start year + ","@current_year_start year ","pointer == ","@now year - ","@now year ","@now year + ","@current_year_start ! ","Time  construct ","Time  local  year + ","Time  construct  year + ","Time  local  year ","Time  construct  year ","Time  local  ! ","Time  construct  ! "]}," RepeaterWeekend to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterWeekend width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterWeek to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterWeek width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterWeek offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterWeek this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","Chronic RepeaterDayName  new ","Time  local ","@now hour ","@now day ","@now month ","@now year ","this_sunday_span begin ","sunday_repeater this ","Time  local + ","this_week_start + ","Chronic  time_class local ","Chronic  time_class ","Chronic  time_class local + ","sunday_repeater next  begin ","Chronic RepeaterDayName  new  next ","Chronic RepeaterDayName  new  start= ","sunday_repeater this  begin ","Chronic RepeaterDayName  new  this ","last_sunday_span begin  + ","Time  local +  + ","Chronic  time_class local +  + "]}," RepeaterWeek next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_week_start + ","direction * ","pointer == ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","@now + ","Chronic RepeaterDayName  new ","next_sunday_span begin ","@current_week_start ! ","last_sunday_span begin  + ","next_sunday_span begin  + ","sunday_repeater next  begin ","Chronic RepeaterDayName  new  next ","Chronic RepeaterDayName  new  start= ","last_sunday_span begin  ! ","next_sunday_span begin  ! "]}," RepeaterTime to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," RepeaterTime width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterTime this":{"type":"method","name":"this","children":[],"call":[" next "," raise ","(sym :future) include? ","context == "]}," RepeaterTime next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_time + "," width ","increment -@ ","pointer == ","@type ambiguous? "," raise "," throw ","t < ","(send\n  (lvar :midnight) :+\n  (ivar :@type)) each ","yesterday_midnight + ","midnight + ","(send\n  (send\n    (lvar :midnight) :+\n    (lvar :half_day)) :+\n  (ivar :@type)) each ","@type * ","midnight + + ","t > ","tomorrow_midnight + "," catch ","midnight - ","Time  local ","@now day ","@now month ","@now year ","60 * * ","60 * ","t <= ","t >= ","(send\n  (send\n    (lvar :midnight) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :half_day)) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","yesterday_midnight + + ","midnight + + + ","midnight gmt_offset - ","tomorrow_midnight gmt_offset ","midnight gmt_offset ","Chronic  time_class local ","Chronic  time_class ","(send\n  (lvar :Time  local ) :+\n  (ivar :@type)) each ","(send\n  (lvar :Chronic  time_class local ) :+\n  (ivar :@type)) each ","midnight -  + ","yesterday_Time  local  + ","yesterday_Chronic  time_class local  + ","Time  local  + ","Chronic  time_class local  + ","(send\n  (send\n    (lvar :Time  local ) :+\n    (lvar :half_day)) :+\n  (ivar :@type)) each ","(send\n  (send\n    (lvar :Chronic  time_class local ) :+\n    (lvar :half_day)) :+\n  (ivar :@type)) each ","(send\n  (send\n    (lvar :midnight) :+\n    (lvar :60 * * )) :+\n  (ivar :@type)) each ","Time  local  + + ","Chronic  time_class local  + + ","midnight +  + ","tomorrow_Time  local  + ","tomorrow_Chronic  time_class local  + ","Time  local  - ","Chronic  time_class local  - ","(send\n  (send\n    (lvar :Time  local ) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (lvar :Chronic  time_class local ) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (lvar :midnight) :+\n    (ivar :@type)) :+\n  (lvar :midnight gmt_offset - )) each ","(send\n  (send\n    (send\n      (lvar :Time  local ) :+\n      (lvar :half_day)) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (send\n      (lvar :Chronic  time_class local ) :+\n      (lvar :half_day)) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :60 * * )) :+\n    (ivar :@type)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :half_day)) :+\n    (ivar :@type)) :+\n  (lvar :midnight gmt_offset - )) each ","midnight -  + + ","yesterday_Time  local  + + ","yesterday_Chronic  time_class local  + + ","Time  local  + + + ","Chronic  time_class local  + + + ","Time  local  gmt_offset - ","Chronic  time_class local  gmt_offset - ","midnight +  gmt_offset ","tomorrow_Time  local  gmt_offset ","tomorrow_Chronic  time_class local  gmt_offset ","Time  local  gmt_offset ","Chronic  time_class local  gmt_offset "]}," RepeaterTime initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Tick  new ","t [] to_i * * + ","t [] to_i * ","t [] to_i ","t [] ","t [] to_i * * ","t [] to_i <= ","t [] to_i != ","time =~ ","t size == ","t size ","(send\n  (send\n    (send\n      (send\n        (lvar :t) :[]\n        (irange\n          (int 0)\n          (int 0))) :to_i) :*\n    (int 60)) :*\n  (int 60)) + ","t to_i * * ","t to_i * ","t to_i ","(irange\n  (int 1)\n  (int 2)) === ","time sub ","t [] to_i * * + + ","time gsub ","hours * * + + ","hours * * + ","hours * * ","hours * ","0 * * + + ","0 * * + ","0 * * ","0 * ","hours == ","time sub  [] time sub o_i * * + ","time gsub  [] time gsub o_i * * + ","time sub  [] time sub o_i * ","time gsub  [] time gsub o_i * ","time sub  [] time sub o_i ","time gsub  [] time gsub o_i ","time sub  [] ","time gsub  [] ","time sub  [] time sub o_i * * ","time gsub  [] time gsub o_i * * ","time sub  [] time sub o_i <= ","time gsub  [] time gsub o_i <= ","time sub  [] time sub o_i != ","time gsub  [] time gsub o_i != ","time sub ime =~ ","time gsub ime =~ ","time sub  size == ","time gsub  size == ","time sub  size ","time gsub  size ","(send\n  (send\n    (send\n      (send\n        (lvar :time sub ) :[]\n        (irange\n          (intime sub  0)\n          (intime sub  0))) :time sub o_i) :*\n    (intime sub  60)) :*\n  (intime sub  60)) + ","(send\n  (send\n    (send\n      (send\n        (lvar :time gsub ) :[]\n        (irange\n          (intime gsub  0)\n          (intime gsub  0))) :time gsub o_i) :*\n    (intime gsub  60)) :*\n  (intime gsub  60)) + ","time sub  time sub o_i * * ","time gsub  time gsub o_i * * ","time sub  time sub o_i * ","time gsub  time gsub o_i * ","time sub  time sub o_i ","time gsub  time gsub o_i ","(irange\n  (intime sub  1)\n  (intime sub  2)) === ","(irange\n  (intime gsub  1)\n  (intime gsub  2)) === ","time sub ime sub ","time gsub ime sub ","time sub  [] time sub o_i * * + + ","time gsub  [] time gsub o_i * * + + ","time sub ime gsub ","time gsub ime gsub ","t [] to_i  * * + + ","t to_i  * * + + ","t [] to_i  * * + ","t to_i  * * + ","t [] to_i  * * ","t to_i  * * ","t [] to_i  * ","t to_i  * ","t [] to_i  == ","t to_i  == "]}," RepeaterTime Tick to_s":{"type":"method","name":"to_s","children":[],"call":["@time to_s + ","@time to_s "]}," RepeaterTime Tick to_f":{"type":"method","name":"to_f","children":[],"call":["@time to_f "]}," RepeaterTime Tick *":{"type":"method","name":"*","children":[],"call":["Tick  new ","@time * "]}," RepeaterTime Tick ambiguous?":{"type":"method","name":"ambiguous?","children":[],"call":[]}," RepeaterTime Tick initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterSecond to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterSecond width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterSecond offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterSecond this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","@now + "]}," RepeaterSecond next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@second_start + ","SECOND_SECONDS  * ","@now + ","direction * ","@second_start ! ","pointer == ","@now +  + ","@now +  ! "]}," RepeaterSeasonName to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," RepeaterSeasonName width":{"type":"method","name":"width","children":[],"call":["91 * * * ","91 * * ","91 * "]}," RepeaterSeasonName this":{"type":"method","name":"this","children":[],"call":[" raise ","Chronic Span  new ","today + ","curr_ssn == "," find_current_season ","@now to_minidate ","direction * "," num_seconds_til_end "," num_seconds_til_start ","Time  construct ","@now day ","@now month ","@now year ","pointer == ","Time  construct  + "," find_current_season  == "]}," RepeaterSeasonName next":{"type":"method","name":"next","children":[],"call":[" raise "," find_next_season_span ","pointer == "]}," RepeaterSeason to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterSeason width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterSeason this":{"type":"method","name":"this","children":[],"call":[" raise ","Chronic Span  new ","today + ","direction * "," num_seconds_til_end "," num_seconds_til_start "," find_current_season ","@now to_minidate ","Time  construct ","@now day ","@now month ","@now year ","pointer == ","Time  construct  + "]}," RepeaterSeason next":{"type":"method","name":"next","children":[],"call":[" raise "," find_next_season_span ","Season  find_next_season "," find_current_season ","@now to_minidate ","pointer == "," find_Season  find_next_season _span ","Season  find_Season  find_next_season  "]}," RepeaterMonthName symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","lookup [] "]}," RepeaterMonthName to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," RepeaterMonthName index":{"type":"method","name":"index","children":[],"call":[" symbol_to_number "]}," RepeaterMonthName width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterMonthName this":{"type":"method","name":"this","children":[],"call":[" next ","pointer == "]}," RepeaterMonthName next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","Time  local ","cur_month_month + ","cur_month_year + ","cur_month_month == ","@current_month_begin month ","@current_month_begin year ","@current_month_begin year - ","@current_month_begin year + "," raise ","@now year - ","@now year ","@now month < ","@now month ","@now month > ","@now year + "," symbol_to_number ","@current_month_begin ! ","@now month <= ","Time  construct ","@current_month_begin month  + ","@current_month_begin year  + ","@current_month_begin month  == ","Time  local  month ","Time  construct  month ","Time  local  year ","Time  construct  year ","Time  local  year - ","Time  construct  year - ","Time  local  year + ","Time  construct  year + ","Time  local  ! ","Time  construct  ! "]}," RepeaterMonth width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterMonth offset_by":{"type":"method","name":"offset_by","children":[],"call":["Time  local ","time sec ","time min ","time hour ","time day ","new_month > ","time month + ","time month ","time year + ","time year ","direction * % ","direction * ","direction * / ","pointer == ","Time  construct ","time month +  > "]}," RepeaterMonth offset":{"type":"method","name":"offset","children":[],"call":["Chronic Span  new "," offset_by ","span end ","span begin "]}," RepeaterMonth this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","Time  local ","@now day ","@now month ","@now year "," offset_by ","@now day + ","Time  construct "]}," RepeaterMonth next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","Time  local ","@current_month_start month + ","@current_month_start month ","@current_month_start year "," offset_by ","@now month ","@now year ","@current_month_start ! ","Time  construct "," offset_by  month + "," offset_by  month "," offset_by  year "," offset_by  ! "]}," RepeaterMinute to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterMinute width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterMinute offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterMinute this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","minute_begin + ","Time  local ","@now min ","@now hour ","@now day ","@now month ","@now year ","Time  local + ","Time  construct + ","Time  construct ","Time  local  + ","Time  construct  + "]}," RepeaterHour to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterHour width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterHour offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterHour this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new "," hour_begin + "," hour_begin ","Time  local ","@now hour ","@now day ","@now month ","@now year ","@now min ","@now hour + ","@now min + ","Time  construct "]}," RepeaterHour next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_hour_start + ","direction * ","pointer == ","Time  local ","@now hour - ","@now hour ","@now day ","@now month ","@now year ","@now hour + ","@current_hour_start ! ","Time  construct ","Time  local  + ","Time  construct  + ","Time  local  ! ","Time  construct  ! "]}," RepeaterFortnight to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterFortnight width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterFortnight offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterFortnight this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","Chronic RepeaterDayName  new ","Time  local ","@now hour ","@now day ","@now month ","@now year ","this_sunday_span begin ","sunday_repeater this ","Time  local + ","pointer == ","Time  construct ","Time  construct + ","sunday_repeater next  begin ","Chronic RepeaterDayName  new  next ","Chronic RepeaterDayName  new  start= ","sunday_repeater this  begin ","Chronic RepeaterDayName  new  this "]}," RepeaterFortnight next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_fortnight_start + ","direction * ","pointer == ","last_sunday_span begin ","sunday_repeater next ","2 times ","sunday_repeater start= ","@now + ","Chronic RepeaterDayName  new ","next_sunday_span begin ","@current_fortnight_start ! ","last_sunday_span begin  + ","next_sunday_span begin  + ","sunday_repeater next  begin ","Chronic RepeaterDayName  new  next ","Chronic RepeaterDayName  new  start= ","last_sunday_span begin  ! ","next_sunday_span begin  ! "]}," RepeaterDayPortion to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," RepeaterDayPortion width":{"type":"method","name":"width","children":[],"call":["@range end - ","@range begin ","@range end ","12 * * ","12 * ","@type kind_of? ","@current_span width "," raise "]}," RepeaterDayPortion offset":{"type":"method","name":"offset","children":[],"call":["portion_span + ","direction * * ","direction * ","amount - ","pointer == "," next ","span begin "," next  + "]}," RepeaterDayPortion this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","range_start + ","@range end - ","@range begin ","@range end ","Time  local + ","Time  local ","@now day ","@now month ","@now year ","Time  construct + ","Time  construct ","Time  local +  + ","Time  construct +  + "]}," RepeaterDayPortion next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","range_start + ","@range end - ","@range begin ","@range end ","Time  local - + ","Time  local - ","Time  local ","@now day ","@now month ","@now year ","Time  local + + ","Time  local + ","now_seconds > ","now_seconds < ","@now - ","@current_span ! ","60 * * ","60 * ","Time  construct - + ","Time  construct - ","Time  construct ","Time  construct + + ","Time  construct + ","Time  local - +  + ","Time  local + +  + ","Time  local +  + ","Time  construct - +  + ","Time  construct + +  + ","Time  construct +  + ","@now -  > ","@now -  < ","Chronic Span  new  ! "]}," RepeaterDayPortion initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","lookup [] ","24 * * ","24 * ","12 * * ","12 * ","(send\n  (ivar :@type) :+\n  (int 12)) * * ","(send\n  (ivar :@type) :+\n  (int 12)) * ","@type + ","@type * * ","@type * ","type kind_of? ","24 * * - ","12 * * - "]}," RepeaterDayName symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","lookup [] "]}," RepeaterDayName to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," RepeaterDayName width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterDayName this":{"type":"method","name":"this","children":[],"call":[" next ","pointer == "]}," RepeaterDayName next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","span_begin + "," width ","Time  parse ","@current_day to_s ","pointer == ","@current_day wday != ","@current_day wday "," symbol_to_number ","Date  parse ","@now to_s ","@current_day ! ","@current_day_start + ","direction * * ","direction * ","@current_day_start wday != ","@current_day_start wday ","Time  local ","@now day ","@now month ","@now year ","@current_day_start ! ","Time  construct ","Time  parse  + ","Date  parse  to_s ","Date  parse  wday != ","Date  parse  wday ","Date  parse  ! ","Date  parse _start + ","Time  local  + ","Time  construct  + ","Date  parse _start wday != ","Time  local  wday != ","Time  construct  wday != ","Date  parse _start wday ","Time  local  wday ","Time  construct  wday ","Date  parse _start ! ","Time  local  ! ","Time  construct  ! "]}," RepeaterDay to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterDay width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterDay offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," RepeaterDay this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","Time  local ","@now hour ","@now day ","@now month ","@now year ","Time  local + ","@now hour + ","Time  construct + ","Time  construct "]}," RepeaterDay next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","span_begin + "," width ","Time  parse ","@current_day to_s ","pointer == ","Date  parse ","@now to_s ","@current_day_start + ","direction * ","Time  local ","@now day ","@now month ","@now year ","@current_day_start ! ","Chronic  time_class local ","Chronic  time_class ","Time  parse  + ","Time  local  + ","Chronic  time_class local  + ","Time  local  ! ","Chronic  time_class local  ! "]}," Repeater to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Repeater this":{"type":"method","name":"this","children":[],"call":[" raise ","(sym :future) include? ","@now nil? ! ","@now nil? "]}," Repeater next":{"type":"method","name":"next","children":[],"call":[" raise ","(sym :future) include? ","@now nil? ! ","@now nil? "]}," Repeater width":{"type":"method","name":"width","children":[],"call":[" raise "]}," Repeater <=>":{"type":"method","name":"<=>","children":[],"call":[" width <=> ","other width "," width "]}," Repeater scan_for_units":{"type":"method","name":"scan_for_units","children":[],"call":[]}," Repeater scan_for_times":{"type":"method","name":"scan_for_times","children":[],"call":[]}," Repeater scan_for_day_portions":{"type":"method","name":"scan_for_day_portions","children":[],"call":[]}," Repeater scan_for_day_names":{"type":"method","name":"scan_for_day_names","children":[],"call":[]}," Repeater scan_for_month_names":{"type":"method","name":"scan_for_month_names","children":[],"call":[]}," Repeater scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic Pointer to_s":{"type":"method","name":"to_s","children":[],"call":["pointer- << ","@type to_s "]}," Chronic Pointer scan_for_all":{"type":"method","name":"scan_for_all","children":[],"call":[]}," Chronic Pointer scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic OrdinalDay to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic Ordinal to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic Ordinal scan_for_days":{"type":"method","name":"scan_for_days","children":[],"call":[]}," Chronic Ordinal scan_for_ordinals":{"type":"method","name":"scan_for_ordinals","children":[],"call":[]}," Chronic Ordinal scan":{"type":"method","name":"scan","children":[],"call":[]}," Grabber to_s":{"type":"method","name":"to_s","children":[],"call":["grabber- << ","@type to_s "]}," Grabber scan_for_all":{"type":"method","name":"scan_for_all","children":[],"call":[]}," Grabber scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic Tag start=":{"type":"method","name":"start=","children":[],"call":[]}," Chronic Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic Span to_s":{"type":"method","name":"to_s","children":[],"call":["( << << << << ","( << << << "," end to_s "," end ","( << << ","( << "," begin to_s "," begin "]}," Chronic Span -":{"type":"method","name":"-","children":[],"call":[" + ","seconds -@ "]}," Chronic Span +":{"type":"method","name":"+","children":[],"call":["Span  new "," end + "," end "," begin + "," begin "]}," Chronic Span width":{"type":"method","name":"width","children":[],"call":["(send\n  (send\n    (self) :end) :-\n  (send\n    (self) :begin)) to_i "," end - "," begin "," end "]}," Chronic Token to_s":{"type":"method","name":"to_s","children":[],"call":["@word << << << ","@word << << ","@tags join ","@word << "]}," Chronic Token get_tag":{"type":"method","name":"get_tag","children":[],"call":["matches first ","m kind_of? ","@tags select ","@tags find "]}," Chronic Token tagged?":{"type":"method","name":"tagged?","children":[],"call":["@tags size > ","@tags size "]}," Chronic Token untag":{"type":"method","name":"untag","children":[],"call":["m kind_of? ! ","m kind_of? ","@tags select ","@tags delete_if "]}," Chronic Token tag":{"type":"method","name":"tag","children":[],"call":["@tags << "]}," Chronic Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic guess":{"type":"method","name":"guess","children":[],"call":["span begin ","span begin + ","span width / ","span width ","span width > ","span nil? "]}," Chronic base_tokenize":{"type":"method","name":"base_tokenize","children":[],"call":["Token  new ","text split map ","text split "]}," Chronic numericize_ordinals":{"type":"method","name":"numericize_ordinals","children":[],"call":[]}," Chronic numericize_numbers":{"type":"method","name":"numericize_numbers","children":[],"call":["Numerizer  numerize "," warn "]}," Chronic pre_normalize":{"type":"method","name":"pre_normalize","children":[],"call":[" numericize_ordinals "," numericize_numbers ","normalized_text gsub! ","  + + ","  + ","text downcase ","text to_s downcase ","text to_s ","text gsub! ","Numerizer  numerize "," numericize_ordinals  gsub! "," numericize_numbers  gsub! ","text downcase  gsub! ","text to_s downcase  gsub! ","normalized_ numericize_numbers  gsub! ","normalized_text to_s downcase  gsub! ","normalized_Numerizer  numerize  gsub! "," numericize_numbers  downcase ","text to_s downcase  downcase ","Numerizer  numerize  downcase "," numericize_numbers  to_s downcase ","text to_s downcase  to_s downcase ","Numerizer  numerize  to_s downcase "," numericize_numbers  to_s ","text to_s downcase  to_s ","Numerizer  numerize  to_s ","Numerizer  numerize  gsub! "]}," Chronic parse":{"type":"method","name":"parse","children":[],"call":[" guess ","options [] "," raise "," tokens_to_span "," puts ","|  + ","@tokens to_s ","token tagged? ","@tokens select ","tokenizer scan ","(const nil :Grabber) each ","(const nil :Repeater) each "," base_tokenize "," pre_normalize ","(sym :past) include? ","default_options keys include? ","default_options keys ","specified_options keys each ","specified_options keys ","default_options merge ","Time  now ","Chronic  debug ","options []= ","Chronic  time_class now ","Chronic  time_class "," tokenize ","(send\n  (send\n    (lvar :specified_options) :keys) :-\n  (send\n    (const nil :DEFAULT_OPTIONS) :keys)) each ","specified_options keys - ","DEFAULT_OPTIONS  keys ","DEFAULT_OPTIONS  merge ","- * ","Chronic  now= ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (send\n    (const nil :DEFAULT_OPTIONS) :keys)) each ","opts keys - ","opts keys ","default_options merge  [] ","DEFAULT_OPTIONS  merge  [] "," tokens_to_ tokens_to_span  ","  tokenize _to_span ","tokenizer scan  to_s "," base_tokenize  to_s "," tokenize  to_s ","@ tokenize  to_s ","tokenizer scan  select "," base_tokenize  select "," tokenize  select ","@ tokenize  select ","default_default_options merge  keys include? ","default_DEFAULT_OPTIONS  merge  keys include? ","default_default_options merge  keys ","default_DEFAULT_OPTIONS  merge  keys ","specified_default_options merge  keys each ","specified_DEFAULT_OPTIONS  merge  keys each ","specified_default_options merge  keys ","specified_DEFAULT_OPTIONS  merge  keys ","default_default_options merge  merge ","default_DEFAULT_OPTIONS  merge  merge ","default_options merge  []= ","DEFAULT_OPTIONS  merge  []= ","(send\n  (send\n    (lvar :specified_default_options merge ) :keys) :-\n  (send\n    (const nil :DEFAULT_OPTIONS) :keys)) each ","(send\n  (send\n    (lvar :specified_DEFAULT_OPTIONS  merge ) :keys) :-\n  (send\n    (const nil :DEFAULT_OPTIONS) :keys)) each ","specified_default_options merge  keys - ","specified_DEFAULT_OPTIONS  merge  keys - "]}," RepeaterMinute next":{"type":"method","name":"next","children":[],"call":[" raise ","pointer == ","Chronic Span  new ","@current_minute_start + ","direction * ","Time  construct ","@now min - ","@now min ","@now hour ","@now day ","@now month ","@now year ","@now min + ","@current_minute_start ! ","Time  construct  + ","Time  construct  ! "]}," Chronic Handler match":{"type":"method","name":"match","children":[],"call":["token_index != ","tokens size "," raise ","element class ","sub_handler match ","tokens [] ","sub_handlers each ","definitions [] ","name intern ","token_index == ","element instance_of? ","match ! ","optional ! ","(send\n  (send\n    (send\n      (lvar :tokens) :[]\n      (lvar :token_index)) :tags) :select) empty? ! ","(send\n  (send\n    (send\n      (lvar :tokens) :[]\n      (lvar :token_index)) :tags) :select) empty? ","o kind_of? ","tokens [] tags select ","tokens [] tags "," constantize ","name chop ","name reverse [] == ","name reverse [] ","name reverse ","element to_s ","@pattern each ","elements [] class ","elements [] ","name to_sym ","definitions key? ","i + < ","elements count ","i + "," tags_match? ","name [] == ","name [] ","elements [] to_s ","elements each_index ","elements is_a? ","definitions []  each ","name chop  intern ","element to_s  intern ","elements [] to_s  intern ","name reverse [] ==  ! ","name [] ==  ! ","name chop  chop ","element to_s  chop ","elements [] to_s  chop ","name chop  reverse [] == ","element to_s  reverse [] == ","elements [] to_s  reverse [] == ","name chop  reverse [] ","element to_s  reverse [] ","elements [] to_s  reverse [] ","name chop  reverse ","element to_s  reverse ","elements [] to_s  reverse ","name chop  to_sym ","element to_s  to_sym ","elements [] to_s  to_sym ","name chop  [] == ","element to_s  [] == ","elements [] to_s  [] == ","name chop  [] ","element to_s  [] ","elements [] to_s  [] "]}," Chronic Handler constantize":{"type":"method","name":"constantize","children":[],"call":[" Chronic  module_eval ","2 upcase ","name to_s gsub ","name to_s ","Chronic  const_get "]}," Chronic Handler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic dealias_and_disambiguate_times":{"type":"method","name":"dealias_and_disambiguate_times","children":[],"call":["ttokens << ","distoken tag ","RepeaterDayPortion  new ","options [] ","Token  new ","t1 get_tag ! ","t1 get_tag ","t1 ! ","t0 get_tag type ambiguous? ","t0 get_tag type ","t0 get_tag ","tokens [] ","i + ","tokens each_with_index ","options [] != ","t1 tag ","t1 untag ","(sym :afternoon) include? ","t1tag type ","(sym :morning) include? "," puts ","Chronic  debug ","t get_tag ","Token  new  tag ","tokens []  get_tag ! ","tokens []  get_tag ","tokens []  ! ","tokens []  tag ","tokens []  untag ","tokens [] tag type ","t1 get_tag  type "]}," Chronic find_within":{"type":"method","name":"find_within","children":[],"call":[" find_within ","span include? ","h end ","h begin ","head this ","head start= ","span end ","span begin ","pointer == ","tags empty? "," puts ","Chronic  debug ","span cover? "," find_withead this in ","head this  end ","head this  begin ","head this ead thead this is ","head this ead start= ","Chead this ronic  debug "]}," Chronic get_repeaters":{"type":"method","name":"get_repeaters","children":[],"call":["repeaters sort reverse ","repeaters sort ","repeaters << ","token get_tag ","tokens each ","repeatoken get_tag ers sortoken get_tag  reverse ","repeatoken get_tag ers sortoken get_tag  ","repeatoken get_tag ers << ","token get_tag oken getoken get_tag _token get_tag ag ","token get_tag okens each "]}," Chronic get_anchor":{"type":"method","name":"get_anchor","children":[],"call":[" find_within "," puts "," raise ","head next ","head this ","options [] ","repeaters size > ","repeaters size ","grabber type ","head start= ","repeaters shift ","tokens pop ","tokens first get_tag ","tokens first ","repeaters size times "," get_repeaters ","Grabber  new ","Chronic  debug ","options [] != ","repeaters shift  next ","repeaters shift  this "," get_repeaters  size > "," get_repeaters  size ","tokens first get_tag  type ","Grabber  new  type ","repeaters shift  start= "," get_repeaters  shift "," get_repeaters  size times "," get_ get_repeaters  "]}," Chronic handle_o_r_g_r":{"type":"method","name":"handle_o_r_g_r","children":[],"call":[" handle_orr ","tokens [] "," get_anchor "]}," Chronic handle_o_r_s_r":{"type":"method","name":"handle_o_r_s_r","children":[],"call":[" handle_orr ","tokens [] "," get_anchor "]}," Chronic handle_orr":{"type":"method","name":"handle_orr","children":[],"call":["span begin > ","outer_span end ","span begin ","repeater next ","ordinal times ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","repeater start= ","outer_span begin - ","outer_span begin ","repeater next  begin > ","outer_repeater next  end ","repeater next  begin ","tokens [] get_tag  next ","tokens [] get_tag type  times ","tokens [] get_tag  start= ","outer_repeater next  begin - ","outer_repeater next  begin "]}," Chronic handle_s_r_p_a":{"type":"method","name":"handle_s_r_p_a","children":[],"call":[" handle_srp "," get_anchor ","tokens [] ","tokens size - ","tokens size "]}," Chronic handle_p_s_r":{"type":"method","name":"handle_p_s_r","children":[],"call":[" handle_s_r_p ","tokens [] "]}," Chronic handle_s_r_p":{"type":"method","name":"handle_s_r_p","children":[],"call":[" handle_srp "," raise ","repeater class "," parse ","(const nil :RepeaterMinute) include? ","(const nil :RepeaterWeekend) include? ","(const nil :RepeaterYear) include? ","tokens [] get_tag ","tokens [] ","Span  new ","@now + ","tokens [] get_tag  class "]}," Chronic handle_srp":{"type":"method","name":"handle_srp","children":[],"call":["repeater offset ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag  offset "]}," Chronic handle_r_g_r":{"type":"method","name":"handle_r_g_r","children":[],"call":[" handle_r ","tokens [] "]}," Chronic handle_r":{"type":"method","name":"handle_r","children":[],"call":[" get_anchor "," dealias_and_disambiguate_times "]}," Chronic handle_sm_sy":{"type":"method","name":"handle_sm_sy","children":[],"call":["Span  new ","Time  local ","month + ","year + ","month == ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Chronic  time_class local ","Chronic  time_class ","tokens [] get_tag type  + ","tokens [] get_tag type  == "]}," Chronic handle_sy_sm_sd":{"type":"method","name":"handle_sy_sm_sd","children":[],"call":[" handle_sm_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic handle_sd_sm_sy":{"type":"method","name":"handle_sd_sm_sy","children":[],"call":[" handle_sm_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic handle_sm_sd_sy":{"type":"method","name":"handle_sm_sd_sy","children":[],"call":[" day_or_time ","Time  local ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Chronic  time_class local ","Chronic  time_class "," tokens [] get_tag type _or_time "]}," Chronic handle_sd_rmn_sy":{"type":"method","name":"handle_sd_rmn_sy","children":[],"call":[" handle_rmn_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic handle_rmn_sd_sy":{"type":"method","name":"handle_rmn_sd_sy","children":[],"call":[" day_or_time ","Time  local ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index ","Chronic  time_class local ","Chronic  time_class "," tokens [] get_tag type _or_time "]}," Chronic handle_rmn_sy":{"type":"method","name":"handle_rmn_sy","children":[],"call":["Span  new ","Time  local ","month + ","year + ","month == ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index ","Chronic  time_class local ","Chronic  time_class ","tokens [] get_tag index  + ","tokens [] get_tag type  + ","tokens [] get_tag index  == "]}," Chronic handle_rmn_od":{"type":"method","name":"handle_rmn_od","children":[],"call":[" handle_m_d ","tokens [] ","tokens size ","tokens [] get_tag type ","tokens [] get_tag "]}," Chronic handle_rmn_sd":{"type":"method","name":"handle_rmn_sd","children":[],"call":[" handle_m_d ","tokens [] ","tokens size ","tokens [] get_tag type ","tokens [] get_tag "]}," Chronic handle_m_d":{"type":"method","name":"handle_m_d","children":[],"call":[" day_or_time ","Time  local ","span begin month ","span begin ","span begin year ","month next ","options [] ","month start= ","month this ","Chronic  time_class local ","Chronic  time_class ","month next  begin month ","month this  begin month ","month next  begin ","month this  begin ","month next  begin year ","month this  begin year "]}," Chronic day_or_time":{"type":"method","name":"day_or_time","children":[],"call":[" get_anchor "," dealias_and_disambiguate_times ","outer_span begin ","time_tokens empty? ! ","time_tokens empty? ","Span  new ","day_start + ","24 * * ","24 * "," dealias_and_disambiguate_ get_anchor s ","Span  new  begin "," get_anchor _tokens empty? ! "," get_anchor _tokens empty? "]}," Chronic tokens_to_span":{"type":"method","name":"tokens_to_span","children":[],"call":[" puts "," send ","handler handler_method ","handler match "," definitions "," definitions [] each "," definitions [] ","o get_tag ","tokens reject ","o get_tag ! ","tokens select ","Chronic  debug ","definitions [] each ","definitions [] ","Handlers  send ","tags any? ","(send\n  (send\n    (lvar :definitions) :[]\n    (sym :date)) :+\n  (send\n    (lvar :definitions) :[]\n    (sym :endian))) each ","definitions [] + ","handler invoke ","handlers each ","definitions each ","(send\n  (send\n    (lvar :definitions) :[]\n    (sym :endian)) :+\n  (send\n    (lvar :definitions) :[]\n    (sym :date))) each ","  definitions  ","  definitions  [] each ","  definitions  [] "," definitions  [] each "," definitions  [] ","(send\n  (send\n    (lvar : definitions ) :[]\n    (sym :date)) :+\n  (send\n    (lvar : definitions ) :[]\n    (sym :endian))) each "," definitions  [] + "," definitions  each ","(send\n  (send\n    (lvar : definitions ) :[]\n    (sym :endian)) :+\n  (send\n    (lvar : definitions ) :[]\n    (sym :date))) each "]}," Chronic definitions":{"type":"method","name":"definitions","children":[],"call":["Handler  new "," apply_endian_precedences ","options [] "," raise ","e to_s "," instance_variable_defined? "," endian_variable_name_for ","options [] each ","options [] length == ","options [] length ","options []= ","options [] nil? ","@definitions []= ","endians reverse "," Array first "," Array "," apply_ Array first _precedences ","  Array first _variable_name_for "," Array first s reverse "]}," Chronic debug":{"type":"method","name":"debug","children":[],"call":[]}," p":{"type":"method","name":"p","children":[],"call":[" puts "," p_orig "]}," RepeaterWeekend offset":{"type":"method","name":"offset","children":[],"call":["Chronic Span  new ","start + ","span end - ","span begin ","span end ","weekend next begin + ","(send\n  (lvar :amount) :-\n  (int 1)) * * ","(send\n  (lvar :amount) :-\n  (int 1)) * ","amount - ","weekend next begin ","weekend next ","weekend start= ","Chronic RepeaterWeekend  new ","pointer == ","weekend next begin +  + ","Chronic RepeaterWeekend  new  next begin + ","Chronic RepeaterWeekend  new  next begin ","Chronic RepeaterWeekend  new  next ","weekend weekend next begin + = ","Chronic RepeaterWeekend  new  start= "]}," RepeaterWeekend this":{"type":"method","name":"this","children":[],"call":["Chronic Span  new ","last_saturday_span begin + ","last_saturday_span begin ","saturday_repeater this ","saturday_repeater start= ","Chronic RepeaterDayName  new ","this_saturday_span begin + ","this_saturday_span begin ","saturday_repeater this  begin + ","saturday_repeater this  begin ","Chronic RepeaterDayName  new  this ","Chronic RepeaterDayName  new  start= "]}," RepeaterWeekend next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_week_start + ","direction * ","pointer == ","last_saturday_span begin ","saturday_repeater next ","saturday_repeater start= ","@now + ","Chronic RepeaterDayName  new ","next_saturday_span begin ","@current_week_start ! ","last_saturday_span begin  + ","next_saturday_span begin  + ","saturday_repeater next  begin ","Chronic RepeaterDayName  new  next ","Chronic RepeaterDayName  new  start= ","last_saturday_span begin  ! ","next_saturday_span begin  ! "]}," Chronic construct":{"type":"method","name":"construct","children":[],"call":["Chronic  time_class local ","Chronic  time_class ","month % ","month / ","(send\n  (lvar :month) :-\n  (int 12)) / ","month - ","month % == ","month > ","day % ","day / ","day > ","common_year_month_days [] ","leap_year_month_days [] ","Date  leap? "," raise ","day <= ","hour % ","hour / ","hour >= ","minute % ","minute / ","minute >= ","second % ","second / ","second >= ","month %  % ","month %  / ","(send\n  (lvar :month % ) :-\n  (int 12)) / ","month %  - ","month %  % == ","month %  > ","day %  % ","day %  / ","day %  > ","common_year_month % _days [] ","common_year_month_day % s [] ","leap_year_month % _days [] ","leap_year_month_day % s [] ","day %  <= ","hour %  % ","hour %  / ","hour %  >= ","minute %  % ","minute %  / ","minute %  >= ","second %  % ","second %  / ","second %  >= "]}," Chronic Token inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "]}," Chronic TimeZone to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic TimeZone scan_for_all":{"type":"method","name":"scan_for_all","children":[],"call":[]}," Chronic TimeZone scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic Time normalize_offset":{"type":"method","name":"normalize_offset","children":[],"call":[]}," Chronic Time could_be_subsecond?":{"type":"method","name":"could_be_subsecond?","children":[],"call":[]}," Chronic Time could_be_second?":{"type":"method","name":"could_be_second?","children":[],"call":[]}," Chronic Time could_be_minute?":{"type":"method","name":"could_be_minute?","children":[],"call":[]}," Chronic Time could_be_hour?":{"type":"method","name":"could_be_hour?","children":[],"call":[]}," Chronic Tag scan_for":{"type":"method","name":"scan_for","children":[],"call":["klass new ","item =~ ","token word ","items each ","items =~ "]}," Chronic SignMinus to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SignPlus to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic Sign to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic Sign scan_for_minus":{"type":"method","name":"scan_for_minus","children":[],"call":[]}," Chronic Sign scan_for_plus":{"type":"method","name":"scan_for_plus","children":[],"call":[]}," Chronic Sign scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic SeparatorW to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorT to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorAnd to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorOn to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorQuote to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic SeparatorDash to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorSlash to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorSpace to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorColon to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic SeparatorDot to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic Separator scan_for_w":{"type":"method","name":"scan_for_w","children":[],"call":[]}," Chronic Separator scan_for_t":{"type":"method","name":"scan_for_t","children":[],"call":[]}," Chronic Separator scan_for_and":{"type":"method","name":"scan_for_and","children":[],"call":[]}," Chronic Separator scan_for_on":{"type":"method","name":"scan_for_on","children":[],"call":[]}," Chronic Separator scan_for_quote":{"type":"method","name":"scan_for_quote","children":[],"call":[]}," Chronic Separator scan_for_dash":{"type":"method","name":"scan_for_dash","children":[],"call":[]}," Chronic Separator scan_for_slash":{"type":"method","name":"scan_for_slash","children":[],"call":[]}," Chronic Separator scan_for_space":{"type":"method","name":"scan_for_space","children":[],"call":[]}," Chronic Separator scan_for_colon":{"type":"method","name":"scan_for_colon","children":[],"call":[]}," Chronic Separator scan_for_dots":{"type":"method","name":"scan_for_dots","children":[],"call":[]}," Chronic Season season_before":{"type":"method","name":"season_before","children":[],"call":[]}," Chronic Season season_after":{"type":"method","name":"season_after","children":[],"call":[]}," Chronic Season find_next_season":{"type":"method","name":"find_next_season","children":[],"call":[]}," Chronic Season initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic ScalarHour to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic ScalarMinute to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic ScalarSecond to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic ScalarSubsecond to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic RepeaterYear month_days":{"type":"method","name":"month_days","children":[],"call":["RepeaterMonth MONTH_DAYS  [] ","month - ","RepeaterMonth MONTH_DAYS_LEAP  [] "," Date  leap? ","Date  leap? "]}," Chronic RepeaterYear build_offset_time":{"type":"method","name":"build_offset_time","children":[],"call":["Chronic  construct ","time sec ","time min ","time hour ","time month ","time day ","time day > "," month_days ","time year + ","amount * ","time year ","Time  construct ","time time day  ","time time day  > "," month_time day s "," month_ month_days  ","time time year +  + ","time time year +  "]}," Chronic RepeaterYear to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterYear width":{"type":"method","name":"width","children":[],"call":["365 * * * ","365 * * ","365 * "]}," Chronic RepeaterYear offset":{"type":"method","name":"offset","children":[],"call":["Span  new "," build_offset_time ","span end ","span begin ","pointer == ","Time  construct ","se sec ","se min ","se hour ","se day ","se month ","se year + ","amount * ","se year ","sb sec ","sb min ","sb hour ","sb day ","sb month ","sb year + ","sb year "," build_offspan end t_time ","span end  span end c ","span end  min ","span end  hour ","span end  day ","span end  month ","span end  year + ","span end  year ","sb span end c ","span begin  sec ","span begin  min ","span begin  hour ","span begin  day ","span begin  month ","span begin  year + ","span begin  year "]}," Chronic RepeaterYear this":{"type":"method","name":"this","children":[],"call":["Span  new ","Chronic  construct ","@now year + ","@now year ","@now day ","@now month ","@now day + ","Time  construct ","Time  construct + ","Chronic  construct + "]}," Chronic RepeaterYear next":{"type":"method","name":"next","children":[],"call":["Span  new ","Chronic  construct ","@current_year_start year + ","@current_year_start year ","@now year - ","@now year ","@now year + ","pointer == ","Time  construct ","@current_year_start ! ","Chronic  construct  year + ","Time  construct  year + ","Chronic  construct  year ","Time  construct  year ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterYear initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterWeekend to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterWeekend width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterWeekend offset":{"type":"method","name":"offset","children":[],"call":["Span  new ","start + ","span end - ","span begin ","span end ","weekend next begin + ","(send\n  (lvar :amount) :-\n  (int 1)) * * ","(send\n  (lvar :amount) :-\n  (int 1)) * ","amount - ","weekend next begin ","weekend next ","weekend start= ","RepeaterWeekend  new ","pointer == ","weekend next begin +  + ","RepeaterWeekend  new  next begin + ","RepeaterWeekend  new  next begin ","RepeaterWeekend  new  next ","weekend weekend next begin + = ","RepeaterWeekend  new  start= "]}," Chronic RepeaterWeekend this":{"type":"method","name":"this","children":[],"call":["Span  new ","last_saturday_span begin + ","last_saturday_span begin ","saturday_repeater this ","saturday_repeater start= ","RepeaterDayName  new ","this_saturday_span begin + ","this_saturday_span begin ","saturday_repeater this  begin + ","saturday_repeater this  begin ","RepeaterDayName  new  this ","RepeaterDayName  new  start= "]}," Chronic RepeaterWeekend next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_week_start + ","last_saturday_span begin ","saturday_repeater next ","saturday_repeater start= ","@now + ","RepeaterDayName  new ","next_saturday_span begin ","direction * ","pointer == ","@current_week_start ! ","last_saturday_span begin  + ","next_saturday_span begin  + ","saturday_repeater next  begin ","RepeaterDayName  new  next ","RepeaterDayName  new  start= ","last_saturday_span begin  ! ","next_saturday_span begin  ! "]}," Chronic RepeaterWeekend initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterWeekday symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","DAYS  [] "]}," Chronic RepeaterWeekday is_weekday?":{"type":"method","name":"is_weekday?","children":[],"call":[" is_weekend? ! "," is_weekend? "]}," Chronic RepeaterWeekday is_weekend?":{"type":"method","name":"is_weekend?","children":[],"call":["day == "," symbol_to_number "]}," Chronic RepeaterWeekday to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterWeekday width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterWeekday offset":{"type":"method","name":"offset","children":[],"call":["span + "," is_weekday? ","(send\n  (send\n    (lvar :span) :begin) :+\n  (lvar :offset)) wday ","span begin + ","span begin ","direction * ","num_weekdays_passed == ","pointer == "]}," Chronic RepeaterWeekday this":{"type":"method","name":"this","children":[],"call":[" next "]}," Chronic RepeaterWeekday next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_weekday_start + ","direction * "," is_weekday? ","@current_weekday_start wday ","Chronic  construct ","@now day ","@now month ","@now year "," loop ","pointer == ","Time  construct ","@current_weekday_start ! ","Chronic  construct  + ","Time  construct  + ","Chronic  construct  wday ","Time  construct  wday ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterWeekday initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterWeek to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterWeek width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterWeek offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterWeek this":{"type":"method","name":"this","children":[],"call":["Span  new ","this_week_start + ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","RepeaterDayName  new ","Chronic  time_class local ","@now hour ","@now day ","@now month ","@now year ","Chronic  time_class ","this_sunday_span begin ","sunday_repeater this ","Chronic  time_class local + ","last_sunday_span begin  + ","Chronic  time_class local +  + ","sunday_repeater next  begin ","RepeaterDayName  new  next ","RepeaterDayName  new  start= ","sunday_repeater this  begin ","RepeaterDayName  new  this "]}," Chronic RepeaterWeek next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_week_start + ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","@now + ","RepeaterDayName  new ","next_sunday_span begin ","direction * ","pointer == ","@current_week_start ! ","last_sunday_span begin  + ","next_sunday_span begin  + ","sunday_repeater next  begin ","RepeaterDayName  new  next ","RepeaterDayName  new  start= ","last_sunday_span begin  ! ","next_sunday_span begin  ! "]}," Chronic RepeaterWeek initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterTime to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic RepeaterTime width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterTime this":{"type":"method","name":"this","children":[],"call":[" next ","context == "]}," Chronic RepeaterTime next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_time + "," width ","increment -@ ","pointer == ","@type ambiguous? "," raise "," throw ","t <= ","(send\n  (send\n    (lvar :midnight) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :offset_fix)) each ","yesterday_midnight + ","@type time ","midnight + + ","midnight + ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :half_day)) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :offset_fix)) each ","yesterday_midnight + + ","midnight + + + ","t >= ","tomorrow_midnight + "," catch ","midnight gmt_offset - ","tomorrow_midnight gmt_offset ","midnight gmt_offset ","midnight - ","Chronic  time_class local ","@now day ","@now month ","@now year ","Chronic  time_class ","60 * * ","60 * ","(send\n  (send\n    (lvar :midnight) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :midnight gmt_offset - )) each ","(send\n  (send\n    (lvar :Chronic  time_class local ) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :offset_fix)) each ","midnight -  + ","yesterday_Chronic  time_class local  + ","Chronic  time_class local  + + ","Chronic  time_class local  + ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :half_day)) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :midnight gmt_offset - )) each ","(send\n  (send\n    (send\n      (lvar :Chronic  time_class local ) :+\n      (lvar :half_day)) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :offset_fix)) each ","(send\n  (send\n    (send\n      (lvar :midnight) :+\n      (lvar :60 * * )) :+\n    (send\n      (ivar :@type) :time)) :+\n  (lvar :offset_fix)) each ","midnight -  + + ","yesterday_Chronic  time_class local  + + ","Chronic  time_class local  + + + ","midnight +  + ","tomorrow_Chronic  time_class local  + ","Chronic  time_class local  gmt_offset - ","midnight +  gmt_offset ","tomorrow_Chronic  time_class local  gmt_offset ","Chronic  time_class local  gmt_offset ","Chronic  time_class local  - "]}," Chronic RepeaterTime initialize":{"type":"method","name":"initialize","children":[],"call":["Tick  new ","hours + + + ","hours + + ","hours + ","time_parts [] to_f / ","10 ** ","time_parts [] length ","time_parts [] ","time_parts [] to_f ","time_parts count > ","time_parts count ","time_parts [] to_i ","time_parts [] to_i * ","60 * ","hours == ","hours > ","@options [] == ","@options [] ","hours <= ","hours >= ","time_parts first length == ","time_parts first length ","time_parts first ","@options [] != ","@options [] nil? ! ","@options [] nil? ","time_parts first to_i ","time_parts []= ","time_parts first [] ","minute_index - ","time_parts insert ","time_parts first length - ","second_index - ","time_parts first length > ","time_parts count == "," raise ","time split ","hours * * + + ","t [] to_i ","t [] ","hours * * + ","t [] to_i * ","hours * * ","hours * ","0 * * + + ","0 * * + ","0 * * ","0 * ","t [] to_i <= ","t [] to_i != ","time =~ ","t [] to_i * * + + ","t [] to_i * * + ","t [] to_i * * ","(send\n  (send\n    (lvar :hours) :*\n    (int 60)) :*\n  (int 60)) + ","t to_i ","t size ","time gsub ","(if\n  (send\n    (lvar :hours) :==\n    (int 12))\n  (int 0)\n  (lvar :hours)) * * ","(if\n  (send\n    (lvar :hours) :==\n    (int 12))\n  (int 0)\n  (lvar :hours)) * ","time_parts first to_i  + + + ","t [] to_i  + + + ","t to_i  + + + ","time_parts first to_i  + + ","t [] to_i  + + ","t to_i  + + ","time_parts first to_i  + ","t [] to_i  + ","t to_i  + ","time split  [] to_f / ","time gsub ime_partime gsub s [] time gsub o_f / ","time split  [] length ","time gsub ime_partime gsub s [] lengtime gsub h ","time split  [] ","time gsub ime_partime gsub s [] ","time split  [] to_f ","time gsub ime_partime gsub s [] time gsub o_f ","time split  count > ","time gsub ime_partime gsub s countime gsub  > ","time split  count ","time gsub ime_partime gsub s countime gsub  ","time split  [] to_i ","time gsub ime_partime gsub s [] time gsub o_i ","time split  [] to_i * ","time gsub ime_partime gsub s [] time gsub o_i * ","time_parts first to_i  == ","t [] to_i  == ","t to_i  == ","time_parts first to_i  > ","t [] to_i  > ","t to_i  > ","@optime gsub ions [] == ","@optime gsub ions [] ","time_parts first to_i  <= ","t [] to_i  <= ","t to_i  <= ","time_parts first to_i  >= ","t [] to_i  >= ","t to_i  >= ","time split  first length == ","time gsub ime_partime gsub s firstime gsub  lengtime gsub h == ","time split  first length ","time gsub ime_partime gsub s firstime gsub  lengtime gsub h ","time split  first ","time gsub ime_partime gsub s firstime gsub  ","@optime gsub ions [] != ","@optime gsub ions [] nil? ! ","@optime gsub ions [] nil? ","time split  first to_i ","time gsub ime_partime gsub s firstime gsub  time gsub o_i ","time split  []= ","time gsub ime_partime gsub s []= ","time split  first [] ","time gsub ime_partime gsub s firstime gsub  [] ","time_parts first length -  - ","minutime gsub e_index - ","time split  insert ","time gsub ime_partime gsub s insertime gsub  ","time split  first length - ","time gsub ime_partime gsub s firstime gsub  lengtime gsub h - ","time split  first length > ","time gsub ime_partime gsub s firstime gsub  lengtime gsub h > ","time split  count == ","time gsub ime_partime gsub s countime gsub  == ","time gsub ime splitime gsub  ","time_parts first to_i  * * + + ","t [] to_i  * * + + ","t to_i  * * + + ","time gsub  [] time gsub o_i ","time gsub  [] ","time_parts first to_i  * * + ","t [] to_i  * * + ","t to_i  * * + ","time gsub  [] time gsub o_i * ","time_parts first to_i  * * ","t [] to_i  * * ","t to_i  * * ","time_parts first to_i  * ","t [] to_i  * ","t to_i  * ","time gsub  [] time gsub o_i <= ","time gsub  [] time gsub o_i != ","time gsub ime =~ ","time gsub  [] time gsub o_i * * + + ","time gsub  [] time gsub o_i * * + ","time gsub  [] time gsub o_i * * ","(send\n  (send\n    (lvar :time_parts first to_i ) :*\n    (int 60)) :*\n  (int 60)) + ","(send\n  (send\n    (lvar :t [] to_i ) :*\n    (int 60)) :*\n  (int 60)) + ","(send\n  (send\n    (lvar :t to_i ) :*\n    (int 60)) :*\n  (int 60)) + ","(send\n  (send\n    (lvar :hours) :*\n    (intime gsub  60)) :*\n  (intime gsub  60)) + ","time gsub  time gsub o_i ","time gsub  size ","time gsub ime gsub ","(if\n  (send\n    (lvar :time_parts first to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :time_parts first to_i )) * * ","(if\n  (send\n    (lvar :t [] to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :t [] to_i )) * * ","(if\n  (send\n    (lvar :t to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :t to_i )) * * ","(if\n  (send\n    (lvar :hours) :==\n    (intime gsub  12))\n  (intime gsub  0)\n  (lvar :hours)) * * ","(if\n  (send\n    (lvar :time_parts first to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :time_parts first to_i )) * ","(if\n  (send\n    (lvar :t [] to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :t [] to_i )) * ","(if\n  (send\n    (lvar :t to_i ) :==\n    (int 12))\n  (int 0)\n  (lvar :t to_i )) * ","(if\n  (send\n    (lvar :hours) :==\n    (intime gsub  12))\n  (intime gsub  0)\n  (lvar :hours)) * "]}," Chronic RepeaterTime Tick to_s":{"type":"method","name":"to_s","children":[],"call":["@time to_s + ","@time to_s "]}," Chronic RepeaterTime Tick to_f":{"type":"method","name":"to_f","children":[],"call":["@time to_f "]}," Chronic RepeaterTime Tick *":{"type":"method","name":"*","children":[],"call":["Tick  new ","@time * "]}," Chronic RepeaterTime Tick ambiguous?":{"type":"method","name":"ambiguous?","children":[],"call":[]}," Chronic RepeaterTime Tick initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterSecond to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterSecond width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterSecond offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterSecond this":{"type":"method","name":"this","children":[],"call":["Span  new ","@now + "]}," Chronic RepeaterSecond next":{"type":"method","name":"next","children":[],"call":["Span  new ","@second_start + ","@now + ","direction * ","SECOND_SECONDS  * ","pointer == ","@second_start ! ","@now +  + ","@now +  ! "]}," Chronic RepeaterSecond initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterSeasonName offset_by":{"type":"method","name":"offset_by","children":[],"call":["time + ","amount * * ","amount * ","pointer == "]}," Chronic RepeaterSeasonName offset":{"type":"method","name":"offset","children":[],"call":["Span  new "," offset_by ","span end ","span begin "]}," Chronic RepeaterSeasonName this":{"type":"method","name":"this","children":[],"call":[" construct_season ","today + ","curr_ssn == "," find_current_season ","MiniDate  from_time ","direction * "," num_seconds_til_end "," num_seconds_til_start ","Chronic  construct ","@now day ","@now month ","@now year ","pointer == ","@now to_minidate ","Time  construct ","Chronic  construct  + ","Time  construct  + "," find_current_season  == "]}," Chronic RepeaterSeasonName next":{"type":"method","name":"next","children":[],"call":[" find_next_season_span ","pointer == "]}," Chronic RepeaterSeason construct_season":{"type":"method","name":"construct_season","children":[],"call":["Span  new ","Chronic  construct ","finish day ","finish month ","finish year ","start day ","start month ","start year ","Time  construct "]}," Chronic RepeaterSeason num_seconds_til_end":{"type":"method","name":"num_seconds_til_end","children":[],"call":[" num_seconds_til ","SEASONS  [] end ","SEASONS  [] "]}," Chronic RepeaterSeason num_seconds_til_start":{"type":"method","name":"num_seconds_til_start","children":[],"call":[" num_seconds_til ","SEASONS  [] start ","SEASONS  [] "]}," Chronic RepeaterSeason num_seconds_til":{"type":"method","name":"num_seconds_til","children":[],"call":["MiniDate  from_time equals? ","MiniDate  from_time ","start + ","direction * ","Chronic  construct ","@now day ","@now month ","@now year ","(send\n  (lvar :start) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate equals? ","(send\n  (lvar :start) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate ","Time  construct ","Chronic  construct  + ","Time  construct  + ","(send\n  (lvar :Chronic  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate equals? ","(send\n  (lvar :Time  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate equals? ","(send\n  (lvar :Chronic  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate ","(send\n  (lvar :Time  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate "]}," Chronic RepeaterSeason find_current_season":{"type":"method","name":"find_current_season","children":[],"call":["md is_between? ","SEASONS  [] end ","SEASONS  [] ","SEASONS  [] start ","(sym :spring) find "]}," Chronic RepeaterSeason find_next_season_span":{"type":"method","name":"find_next_season_span","children":[],"call":[" construct_season ","direction * "," num_seconds_til_end "," num_seconds_til_start ","Chronic  construct ","@now day ","@now month ","@now year ","Time  construct ","@next_season_end ! ","@next_season_start ! ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterSeason to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterSeason width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterSeason offset_by":{"type":"method","name":"offset_by","children":[],"call":["time + ","amount * * ","amount * ","pointer == "]}," Chronic RepeaterSeason offset":{"type":"method","name":"offset","children":[],"call":["Span  new "," offset_by ","span end ","span begin "]}," Chronic RepeaterSeason this":{"type":"method","name":"this","children":[],"call":[" construct_season ","today + ","direction * "," num_seconds_til_end "," num_seconds_til_start "," find_current_season ","MiniDate  from_time ","Chronic  construct ","@now day ","@now month ","@now year ","pointer == ","@now to_minidate ","Time  construct ","Chronic  construct  + ","Time  construct  + "]}," Chronic RepeaterSeason next":{"type":"method","name":"next","children":[],"call":[" find_next_season_span ","Season  find_next_season "," find_current_season ","MiniDate  from_time ","pointer == ","@now to_minidate "," find_Season  find_next_season _span ","Season  find_Season  find_next_season  "]}," Chronic RepeaterSeason initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterMonthName to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic RepeaterMonthName index":{"type":"method","name":"index","children":[],"call":["MONTHS  [] "," symbol_to_number "]}," Chronic RepeaterMonthName width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterMonthName this":{"type":"method","name":"this","children":[],"call":[" next "]}," Chronic RepeaterMonthName next":{"type":"method","name":"next","children":[],"call":["Span  new ","Chronic  construct ","cur_month_month + ","cur_month_year + ","cur_month_month == ","@current_month_begin month ","@current_month_begin year "," raise "," index ","@now year - ","@now year ","@now month < ","@now month ","@now month >= ","@now year + ","@now month > ","@now month <= ","@current_month_begin year - ","@current_month_begin year + ","Time  construct "," symbol_to_number ","@current_month_begin ! ","@current_month_begin month  + ","@current_month_begin year  + ","@current_month_begin month  == ","Chronic  construct  month ","Time  construct  month ","Chronic  construct  year ","Time  construct  year ","Chronic  construct  year - ","Time  construct  year - ","Chronic  construct  year + ","Time  construct  year + ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterMonthName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterMonth month_days":{"type":"method","name":"month_days","children":[],"call":["MONTH_DAYS  [] ","month - ","MONTH_DAYS_LEAP  [] "," Date  leap? ","Date  leap? "]}," Chronic RepeaterMonth to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterMonth width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterMonth offset_by":{"type":"method","name":"offset_by","children":[],"call":["Chronic  construct ","time sec ","time min ","time hour ","time day ","time day > "," month_days ","new_month > ","time month + ","time month ","time year + ","time year ","direction * % ","direction * ","direction * / ","pointer == ","Time  construct "," month_ month_days  ","time month +  > "]}," Chronic RepeaterMonth offset":{"type":"method","name":"offset","children":[],"call":["Span  new "," offset_by ","span end ","span begin "]}," Chronic RepeaterMonth this":{"type":"method","name":"this","children":[],"call":["Span  new "," offset_by ","Chronic  construct ","@now month ","@now year ","@now day ","@now day + ","Time  construct "]}," Chronic RepeaterMonth next":{"type":"method","name":"next","children":[],"call":["Span  new ","Chronic  construct ","@current_month_start month + ","@current_month_start month ","@current_month_start year "," offset_by ","@now month ","@now year ","Time  construct ","@current_month_start ! "," offset_by  month + "," offset_by  month "," offset_by  year "," offset_by  ! "]}," Chronic RepeaterMonth initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterMinute to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterMinute width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterMinute offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterMinute this":{"type":"method","name":"this","children":[],"call":["Span  new ","Chronic  construct + ","Chronic  construct ","@now min ","@now hour ","@now day ","@now month ","@now year ","Time  construct + ","Time  construct "]}," Chronic RepeaterMinute next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_minute_start + ","Chronic  construct ","@now min - ","@now min ","@now hour ","@now day ","@now month ","@now year ","@now min + ","direction * ","pointer == ","Time  construct ","@current_minute_start ! ","Chronic  construct  + ","Time  construct  + ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterMinute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterHour to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterHour width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterHour offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterHour this":{"type":"method","name":"this","children":[],"call":["Span  new ","hour_start + ","Chronic  construct ","@now hour ","@now day ","@now month ","@now year ","@now min ","@now hour + ","@now min + ","Time  construct ","Chronic  construct  + ","Time  construct  + "]}," Chronic RepeaterHour next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_hour_start + ","Chronic  construct ","@now hour - ","@now hour ","@now day ","@now month ","@now year ","@now hour + ","direction * ","pointer == ","Time  construct ","@current_hour_start ! ","Chronic  construct  + ","Time  construct  + ","Chronic  construct  ! ","Time  construct  ! "]}," Chronic RepeaterHour initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterFortnight to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterFortnight width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterFortnight offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterFortnight this":{"type":"method","name":"this","children":[],"call":["Span  new ","last_sunday_span begin ","sunday_repeater next ","sunday_repeater start= ","RepeaterDayName  new ","Chronic  construct ","@now hour ","@now day ","@now month ","@now year ","this_sunday_span begin ","sunday_repeater this ","Chronic  construct + ","pointer == ","Time  construct ","Time  construct + ","sunday_repeater next  begin ","RepeaterDayName  new  next ","RepeaterDayName  new  start= ","sunday_repeater this  begin ","RepeaterDayName  new  this "]}," Chronic RepeaterFortnight next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_fortnight_start + ","last_sunday_span begin ","sunday_repeater next ","2 times ","sunday_repeater start= ","@now + ","RepeaterDayName  new ","next_sunday_span begin ","direction * ","pointer == ","@current_fortnight_start ! ","last_sunday_span begin  + ","next_sunday_span begin  + ","sunday_repeater next  begin ","RepeaterDayName  new  next ","RepeaterDayName  new  start= ","last_sunday_span begin  ! ","next_sunday_span begin  ! "]}," Chronic RepeaterFortnight initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterDayPortion construct_date_from_reference_and_offset":{"type":"method","name":"construct_date_from_reference_and_offset","children":[],"call":["Chronic  construct ","reference day ","reference month ","reference year ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :minute_hand)) :-\n  (lvar :second_hand)) / + ","reference hour % ","reference hour ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :minute_hand)) :-\n  (lvar :second_hand)) / ","60 * ","elapsed_seconds_for_range - - ","elapsed_seconds_for_range - ","(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :second_hand)) / % ","(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :second_hand)) / ","(begin\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (begin\n      (send\n        (int 12) :*\n        (int 60))))) % ","12 * ","@range end - ","@range begin ","@range end ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :second_hand)) / % )) :-\n  (lvar :second_hand)) / + ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :minute_hand)) :-\n  (lvar :(begin\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (begin\n      (send\n        (int 12) :*\n        (int 60))))) % )) / + ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :second_hand)) / % )) :-\n  (lvar :second_hand)) / ","(send\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (lvar :minute_hand)) :-\n  (lvar :(begin\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (begin\n      (send\n        (int 12) :*\n        (int 60))))) % )) / ","(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :(begin\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (begin\n      (send\n        (int 12) :*\n        (int 60))))) % )) / % ","(send\n  (lvar :elapsed_seconds_for_range) :-\n  (lvar :(begin\n  (send\n    (lvar :elapsed_seconds_for_range) :-\n    (begin\n      (send\n        (int 12) :*\n        (int 60))))) % )) / "]}," Chronic RepeaterDayPortion to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic RepeaterDayPortion width":{"type":"method","name":"width","children":[],"call":["@range end - ","@range begin ","@range end ","12 * * ","12 * ","@type kind_of? ","@current_span width "," raise "]}," Chronic RepeaterDayPortion offset":{"type":"method","name":"offset","children":[],"call":["portion_span + ","direction * * ","direction * ","amount - ","pointer == "," next ","span begin "," next  + "]}," Chronic RepeaterDayPortion this":{"type":"method","name":"this","children":[],"call":["Span  new "," construct_date_from_reference_and_offset ","Chronic  construct + ","@range begin ","Chronic  construct ","@now day ","@now month ","@now year ","range_start + ","@range end - ","@range end ","Time  construct + ","Time  construct ","Chronic  construct +  + ","Time  construct +  + "]}," Chronic RepeaterDayPortion next":{"type":"method","name":"next","children":[],"call":["Span  new "," construct_date_from_reference_and_offset ","@range end - ","@range begin ","@range end ","Chronic  construct + ","Chronic  construct ","@now day - ","@now day ","@now month ","@now year ","@now day + ","now_seconds > ","now_seconds < ","@now - ","@current_span end sec ","@current_span end ","@current_span end min ","@current_span end hour ","@current_span end day + ","@current_span end day ","@current_span end month ","@current_span end year ","@current_span begin sec ","@current_span begin ","@current_span begin min ","@current_span begin hour ","@current_span begin day + ","@current_span begin day ","@current_span begin month ","@current_span begin year ","range_start + ","Time  construct - + ","Time  construct - ","Time  construct ","Time  construct + + ","Time  construct + ","@current_span ! ","60 * * ","60 * ","Chronic  construct - + ","Chronic  construct - ","Chronic  construct + + ","@now -  > ","@now -  < ","Span  new  end sec ","Span  new  end ","Span  new  end min ","Span  new  end hour ","Span  new  end day + ","Span  new  end day ","Span  new  end month ","Span  new  end year ","Span  new  begin sec ","Span  new  begin ","Span  new  begin min ","Span  new  begin hour ","Span  new  begin day + ","Span  new  begin day ","Span  new  begin month ","Span  new  begin year ","Chronic  construct +  + ","Time  construct - +  + ","Time  construct + +  + ","Time  construct +  + ","Chronic  construct - +  + ","Chronic  construct + +  + ","Span  new  ! "]}," Chronic RepeaterDayPortion initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","PORTIONS  [] ","(send\n  (ivar :@type) :+\n  (int 12)) * * ","(send\n  (ivar :@type) :+\n  (int 12)) * ","@type + ","@type * * ","@type * ","type kind_of? "]}," Chronic RepeaterDayName symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","lookup [] "]}," Chronic RepeaterDayName to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic RepeaterDayName width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterDayName this":{"type":"method","name":"this","children":[],"call":[" next ","pointer == "]}," Chronic RepeaterDayName next":{"type":"method","name":"next","children":[],"call":["Span  new ","Chronic  construct ","next_date day ","next_date month ","next_date year ","@current_date day ","@current_date month ","@current_date year ","@current_date succ ","@current_date wday != ","@current_date wday "," symbol_to_number "," Date  new ","@now day ","@now month ","@now year ","direction * ","pointer == ","Time  construct ","Date  new ","@current_date ! ","@current_date succ  day ","@current_date succ  month ","@current_date succ  year "," Date  new  day ","Date  new  day "," Date  new  month ","Date  new  month "," Date  new  year ","Date  new  year "," Date  new  succ ","Date  new  succ "," Date  new  wday != ","Date  new  wday != "," Date  new  wday ","Date  new  wday "," Date  new  ! ","Date  new  ! "]}," Chronic RepeaterDayName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic RepeaterDay to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic RepeaterDay width":{"type":"method","name":"width","children":[],"call":[]}," Chronic RepeaterDay offset":{"type":"method","name":"offset","children":[],"call":["span + ","direction * * ","direction * ","pointer == "]}," Chronic RepeaterDay this":{"type":"method","name":"this","children":[],"call":["Span  new ","Chronic  construct + ","Chronic  construct ","@now day ","@now month ","@now year ","@now hour ","Time  construct + ","Time  construct "]}," Chronic RepeaterDay next":{"type":"method","name":"next","children":[],"call":["Span  new ","@current_day_start + ","direction * ","pointer == ","Chronic  time_class local ","@now day ","@now month ","@now year ","Chronic  time_class ","@current_day_start ! ","Chronic  time_class local  + ","Chronic  time_class local  ! "]}," Chronic RepeaterDay initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Chronic Repeater to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Chronic Repeater this":{"type":"method","name":"this","children":[],"call":[" raise ","(sym :future) include? ","@now nil? ! ","@now nil? "]}," Chronic Repeater next":{"type":"method","name":"next","children":[],"call":[" raise ","(sym :future) include? ","@now nil? ! ","@now nil? "]}," Chronic Repeater width":{"type":"method","name":"width","children":[],"call":[" raise "]}," Chronic Repeater <=>":{"type":"method","name":"<=>","children":[],"call":[" width <=> ","other width "," width "]}," Chronic Repeater scan_for_units":{"type":"method","name":"scan_for_units","children":[],"call":[]}," Chronic Repeater scan_for_times":{"type":"method","name":"scan_for_times","children":[],"call":[]}," Chronic Repeater scan_for_day_portions":{"type":"method","name":"scan_for_day_portions","children":[],"call":[]}," Chronic Repeater scan_for_day_names":{"type":"method","name":"scan_for_day_names","children":[],"call":[]}," Chronic Repeater scan_for_month_names":{"type":"method","name":"scan_for_month_names","children":[],"call":[]}," Chronic Repeater scan_for_season_names":{"type":"method","name":"scan_for_season_names","children":[],"call":[]}," Chronic Repeater scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic Parser tokens_to_span":{"type":"method","name":"tokens_to_span","children":[],"call":[" puts ","Chronic  debug ","handler invoke ","handler match ","definitions [] each ","definitions [] ","o get_tag ","tokens reject ","o get_tag ! ","tokens select ","(send\n  (send\n    (lvar :definitions) :[]\n    (sym :endian)) :+\n  (send\n    (lvar :definitions) :[]\n    (sym :date))) each ","definitions [] + "," definitions "," definitions  [] each "," definitions  [] ","(send\n  (send\n    (lvar : definitions ) :[]\n    (sym :endian)) :+\n  (send\n    (lvar : definitions ) :[]\n    (sym :date))) each "," definitions  [] + ","  definitions  "]}," Chronic Parser tokenize":{"type":"method","name":"tokenize","children":[],"call":["token tagged? ","tokens select ","tok scan ","(const nil :Repeater) each ","Token  new ","text split map ","text split "," pre_normalize "," pre_normalize  split map "," pre_normalize  split "]}," Chronic Parser definitions":{"type":"method","name":"definitions","children":[],"call":[" raise ","@@definitions merge ","endians reverse "," Array first "," Array ","options [] ","Handler  new "," Array first s reverse "]}," Chronic Parser guess":{"type":"method","name":"guess","children":[],"call":["span begin ","span end ","mode == ","span begin + ","span width / ","span width ","span width > ","mode ! "]}," Chronic Parser pre_normalize":{"type":"method","name":"pre_normalize","children":[],"call":["text gsub! ","  + + ","  + ","Numerizer  numerize ","text to_s downcase ","text to_s ","Numerizer  numerize  gsub! ","text to_s downcase  gsub! ","Numerizer  numerize  to_s downcase ","text to_s downcase  to_s downcase ","Numerizer  numerize  to_s ","text to_s downcase  to_s "]}," Chronic Parser parse":{"type":"method","name":"parse","children":[],"call":[" guess "," options [] "," options "," puts ","- * ","Chronic  debug "," tokens_to_span "," options merge "," tokenize "," tokens_to_ tokens_to_span  ","  tokenize _to_span "]}," Chronic Parser initialize":{"type":"method","name":"initialize","children":[],"call":["Chronic  time_class now ","Chronic  time_class ","options delete ","DEFAULT_OPTIONS  merge "]}," Chronic OrdinalYear to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic OrdinalMonth to_s":{"type":"method","name":"to_s","children":[],"call":[" << << ","@type to_s "," << "]}," Chronic Numerizer andition":{"type":"method","name":"andition","children":[],"call":["sc reset ","string []= ","<num> + ","(send\n  (send\n    (send\n      (lvar :sc) :[]\n      (int 1)) :to_i) :+\n  (send\n    (send\n      (lvar :sc) :[]\n      (int 3)) :to_i)) to_s ","sc [] to_i + ","sc [] to_i ","sc [] ","sc pos - ","sc pos ","sc matched_size ","sc [] size > ","sc [] size ","sc [] =~ ","sc scan_until ","StringScanner  new ","StringScanner  new  reset ","(send\n  (send\n    (send\n      (lvar :StringScanner  new ) :[]\n      (int 1)) :to_i) :+\n  (send\n    (send\n      (lvar :StringScanner  new ) :[]\n      (int 3)) :to_i)) to_s ","StringScanner  new  [] to_i + ","StringScanner  new  [] to_i ","StringScanner  new  [] ","StringScanner  new  pos - ","StringScanner  new  pos ","StringScanner  new  matched_size ","StringScanner  new  [] size > ","StringScanner  new  [] size ","StringScanner  new  [] =~ ","StringScanner  new  StringScanner  new an_until "]}," Chronic Numerizer numerize":{"type":"method","name":"numerize","children":[],"call":[]}," Chronic MiniDate equals?":{"type":"method","name":"equals?","children":[],"call":["@day == ","other day ","@month == ","other month "," day == "," day "]}," Chronic MiniDate is_between?":{"type":"method","name":"is_between?","children":[],"call":["(send\n  (lvar :i) :%\n  (int 12)) + ","i % ","@month == ","i == ","md_end month ","(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + ","md_start month % ","md_start month ","@day <= ","md_end day ","@day >= ","md_start day ","@day > ","@day < ","(send\n  (lvar :i) :+\n  (int 1)) % ","i + ","md_start month + ","(send\n  (lvar :(send\n  (lvar :i) :%\n  (int 12)) + ) :%\n  ((send\n  (lvar :i) :%\n  (int 12)) + nt 12)) + ","(send\n  (lvar :(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + ) :%\n  ((send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + nt 12)) + ","(send\n  (lvar :(send\n  (lvar :i) :+\n  (int 1)) % ) :%\n  ((send\n  (lvar :i) :+\n  (int 1)) % nt 12)) + ","(send\n  (lvar :md_start month + ) :%\n  (md_start month + nt 12)) + ","(send\n  (lvar :i) :%\n  (int 12)) +  % ","(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) +  % ","(send\n  (lvar :i) :+\n  (int 1)) %  % ","md_start month +  % ","(send\n  (lvar :i) :%\n  (int 12)) +  == ","(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) +  == ","(send\n  (lvar :i) :+\n  (int 1)) %  == ","md_start month +  == ","(send\n  (send\n    (lvar :md_start) :month) :%\n  ((send\n  (lvar :i) :%\n  (int 12)) + nt 12)) + ","(send\n  (send\n    (lvar :md_start) :month) :%\n  ((send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + nt 12)) + ","(send\n  (send\n    (lvar :md_start) :month) :%\n  ((send\n  (lvar :i) :+\n  (int 1)) % nt 12)) + ","(send\n  (send\n    (lvar :md_start) :month) :%\n  (md_start month + nt 12)) + ","(send\n  (lvar :(send\n  (lvar :i) :%\n  (int 12)) + ) :+\n  ((send\n  (lvar :i) :%\n  (int 12)) + nt 1)) % ","(send\n  (lvar :(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + ) :+\n  ((send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) + nt 1)) % ","(send\n  (lvar :(send\n  (lvar :i) :+\n  (int 1)) % ) :+\n  ((send\n  (lvar :i) :+\n  (int 1)) % nt 1)) % ","(send\n  (lvar :md_start month + ) :+\n  (md_start month + nt 1)) % ","(send\n  (lvar :i) :%\n  (int 12)) +  + ","(send\n  (send\n    (lvar :md_start) :month) :%\n  (int 12)) +  + ","(send\n  (lvar :i) :+\n  (int 1)) %  + ","md_start month +  + "]}," Chronic MiniDate initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(irange\n  (int 1)\n  (int 12)) include? "]}," Chronic MiniDate from_time":{"type":"method","name":"from_time","children":[],"call":[]}," Chronic Handlers dealias_and_disambiguate_times":{"type":"method","name":"dealias_and_disambiguate_times","children":[],"call":["ambiguous_tokens << ","distoken tag ","RepeaterDayPortion  new ","options [] ","Token  new ","next_token get_tag ! ","next_token get_tag ","next_token ! ","token get_tag type ambiguous? ","token get_tag type ","token get_tag ","tokens [] ","i + ","tokens each_with_index ","options [] != ","t1 tag ","t1 untag "," puts ","t1tag type ","Chronic  debug ","t1 get_tag ","t get_tag ","ttokens << ","t1 get_tag ! ","t1 ! ","t0 get_tag type ambiguous? ","t0 get_tag type ","t0 get_tag ","(sym :afternoon) include? ","(sym :morning) include? ","Token  new  tag ","tokens []  get_tag ! ","tokens []  get_tag ","tokens []  ! ","tokens []  tag ","tokens []  untag ","t1 get_tag  type ","tokens [] tag type "]}," Chronic Handlers time_with_rollover":{"type":"method","name":"time_with_rollover","children":[],"call":["Chronic  time_class local ","Chronic  time_class ","month + ","year + ","month == "," month_overflow? "]}," Chronic Handlers find_within":{"type":"method","name":"find_within","children":[],"call":[" find_within ","span cover? ","h end ","h begin ","head this ","head start= ","span end ","span begin ","pointer == ","tags shift ","tags empty? "," puts ","Chronic  debug "," find_withead this in ","head this  end ","head this  begin ","head this ead thead this is ","tags shift  this ","head this ead start= ","tags shift  start= ","tags shead this ift ","Chead this ronic  debug "]}," Chronic Handlers month_overflow?":{"type":"method","name":"month_overflow?","children":[],"call":["day > ","RepeaterMonth MONTH_DAYS  [] ","month - ","RepeaterMonth MONTH_DAYS_LEAP  [] "," Date  leap? ","Date  leap? "]}," Chronic Handlers get_repeaters":{"type":"method","name":"get_repeaters","children":[],"call":["(send\n  (lvar :tokens) :map) compact sort reverse ","(send\n  (lvar :tokens) :map) compact sort ","(send\n  (lvar :tokens) :map) compact ","token get_tag ","tokens map ","repeaters sort reverse ","repeaters sort ","repeaters << ","tokens each ","(send\n  (lvar :token get_tag okens) :map) compactoken get_tag  sortoken get_tag  reverse ","(send\n  (lvar :token get_tag okens) :map) compactoken get_tag  sortoken get_tag  ","(send\n  (lvar :token get_tag okens) :map) compactoken get_tag  ","token get_tag oken getoken get_tag _token get_tag ag ","token get_tag okens map ","repeatoken get_tag ers sortoken get_tag  reverse ","repeatoken get_tag ers sortoken get_tag  ","repeatoken get_tag ers << ","token get_tag okens each "]}," Chronic Handlers get_anchor":{"type":"method","name":"get_anchor","children":[],"call":[" find_within "," puts ","head class ","Chronic  debug "," raise ","head next ","head this ","options [] ","repeaters size > ","repeaters size ","options [] != ","grabber type ","head start= "," now ","repeaters shift ","tokens shift get_tag ","tokens shift ","tokens first get_tag ","tokens first ","tokens pop ","repeaters size times "," get_repeaters ","Grabber  new ","Chronic  now ","repeaters shift  class ","repeaters shift  next ","repeaters shift  this "," get_repeaters  size > "," get_repeaters  size ","tokens shift get_tag  type ","Grabber  new  type ","tokens first get_tag  type ","repeaters shift  start= "," get_repeaters  shift "," get_repeaters  size times "," get_ get_repeaters  "]}," Chronic Handlers day_or_time":{"type":"method","name":"day_or_time","children":[],"call":[" get_anchor ","options merge "," dealias_and_disambiguate_times "," now= ","outer_span begin ","time_tokens empty? ","Span  new ","day_start + ","24 * * ","24 * ","Chronic  now= ","time_tokens empty? ! ","Span  new  begin "]}," Chronic Handlers handle_o_r_g_r":{"type":"method","name":"handle_o_r_g_r","children":[],"call":[" handle_orr ","tokens [] "," get_anchor "]}," Chronic Handlers handle_o_r_s_r":{"type":"method","name":"handle_o_r_s_r","children":[],"call":[" handle_orr ","tokens [] "," get_anchor "]}," Chronic Handlers handle_orr":{"type":"method","name":"handle_orr","children":[],"call":["span begin >= ","outer_span end ","span begin ","repeater next ","ordinal times ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","repeater start= ","outer_span begin - ","outer_span begin ","span begin > ","repeater next  begin >= ","outer_repeater next  end ","repeater next  begin ","tokens [] get_tag  next ","tokens [] get_tag type  times ","tokens [] get_tag  start= ","outer_repeater next  begin - ","outer_repeater next  begin ","repeater next  begin > "]}," Chronic Handlers handle_s_r_a_s_r_p_a":{"type":"method","name":"handle_s_r_a_s_r_p_a","children":[],"call":[" handle_srp ","tokens [] + ","tokens [] "," get_anchor ","tokens size - ","tokens size "]}," Chronic Handlers handle_s_r_p_a":{"type":"method","name":"handle_s_r_p_a","children":[],"call":[" handle_srp "," get_anchor ","tokens [] ","tokens size - ","tokens size "]}," Chronic Handlers handle_p_s_r":{"type":"method","name":"handle_p_s_r","children":[],"call":[" handle_s_r_p ","tokens [] "]}," Chronic Handlers handle_s_r_p":{"type":"method","name":"handle_s_r_p","children":[],"call":[" handle_srp ","Span  new "," now + "," now ","Chronic  now + ","Chronic  now ","tokens [] get_tag ","tokens [] "]}," Chronic Handlers handle_srp":{"type":"method","name":"handle_srp","children":[],"call":["repeater offset ","repeater respond_to? ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag  offset ","tokens [] get_tag  respond_to? "]}," Chronic Handlers handle_r_g_r":{"type":"method","name":"handle_r_g_r","children":[],"call":[" handle_r ","tokens [] "]}," Chronic Handlers handle_r":{"type":"method","name":"handle_r","children":[],"call":[" get_anchor "," dealias_and_disambiguate_times "]}," Chronic Handlers handle_sm_rmn_sy":{"type":"method","name":"handle_sm_rmn_sy","children":[],"call":["Span  new ","Chronic  time_class local ","Chronic  time_class ","day >= ","day + ","time sec ","time min ","time hour "," get_anchor begin "," get_anchor ","tokens last ","tokens size > ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index ","Chronic  Chronic  time_class local _class local ","Chronic   get_anchor begin _class local ","Chronic  Chronic  time_class local _class ","Chronic   get_anchor begin _class ","tokens [] get_tag type  >= ","tokens [] get_tag type  + ","Chronic  time_class local  sec "," get_anchor begin  sec ","Chronic  time_class local  min "," get_anchor begin  min ","Chronic  time_class local  hour "," get_anchor begin  hour "]}," Chronic Handlers handle_rdn_rmn_sd_sy":{"type":"method","name":"handle_rdn_rmn_sd_sy","children":[],"call":["Span  new "," time_with_rollover ","day + ","month index ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag type  + ","tokens [] get_tag  index "," tokens [] get_tag _overflow? "]}," Chronic Handlers handle_rdn_rmn_sd":{"type":"method","name":"handle_rdn_rmn_sd","children":[],"call":[" day_or_time ","Chronic  time_class local ","month index ","Chronic  time_class ","Span  new "," time_with_rollover ","day + ","time_tokens empty? "," month_overflow? "," now year "," now ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Chronic  now year ","Chronic  now "," tokens [] get_tag type _or_time ","tokens [] get_tag  index ","tokens [] get_tag type  + ","tokens last  empty? "," tokens [] get_tag _overflow? "," now  now year  "," now Chronic  now year  ","Chronic  now  now year  ","Chronic  now Chronic  now year  "]}," Chronic Handlers handle_rdn_od":{"type":"method","name":"handle_rdn_od","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class ","Span  new "," time_with_rollover ","day + ","time_tokens empty? "," month_overflow? "," now day > "," now day "," now ","options [] == ","options [] "," now month "," now year ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] "," tokens [] get_tag type _or_time ","tokens [] get_tag type  + ","tokens last  empty? ","  now month _overflow? "," now tokens [] get_tag type  > "," now tokens [] get_tag type  "," now  now month  "," now  now year  "]}," Chronic Handlers handle_rdn_rmn_od_sy":{"type":"method","name":"handle_rdn_rmn_od_sy","children":[],"call":["Span  new "," time_with_rollover ","day + ","month index ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag type  + ","tokens [] get_tag  index "," tokens [] get_tag _overflow? "]}," Chronic Handlers handle_rdn_rmn_od":{"type":"method","name":"handle_rdn_rmn_od","children":[],"call":[" day_or_time ","Chronic  time_class local ","month index ","Chronic  time_class ","Span  new "," time_with_rollover ","day + ","time_tokens empty? "," month_overflow? "," now year "," now ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Chronic  now year ","Chronic  now "," tokens [] get_tag type _or_time ","tokens [] get_tag  index ","tokens [] get_tag type  + ","tokens last  empty? "," tokens [] get_tag _overflow? "," now  now year  "," now Chronic  now year  ","Chronic  now  now year  ","Chronic  now Chronic  now year  "]}," Chronic Handlers handle_sy_sm":{"type":"method","name":"handle_sy_sm","children":[],"call":[" handle_year_and_month ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] "," handle_year_and_tokens [] get_tag type  "," handle_tokens [] get_tag type _and_month "]}," Chronic Handlers handle_sm_sy":{"type":"method","name":"handle_sm_sy","children":[],"call":[" handle_year_and_month ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Span  new ","Chronic  time_class local ","Chronic  time_class ","month + ","year + ","month == "," handle_tokens [] get_tag type _and_month "," handle_year_and_tokens [] get_tag type  ","tokens [] get_tag type  + ","tokens [] get_tag type  == "]}," Chronic Handlers handle_year_and_month":{"type":"method","name":"handle_year_and_month","children":[],"call":["Span  new ","Chronic  time_class local ","Chronic  time_class ","month + ","year + ","month == "]}," Chronic Handlers handle_sd_sm":{"type":"method","name":"handle_sd_sm","children":[],"call":[" handle_sm_sd ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic Handlers handle_sm_sd":{"type":"method","name":"handle_sm_sd","children":[],"call":[" day_or_time ","Chronic  time_class local ","year + ","Chronic  time_class ","day_start < "," now ","options [] == ","options [] "," month_overflow? ","tokens last ","tokens size - ","tokens size "," now year ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","Span  new ","day + "," Array first == "," Array first "," Array ","Chronic  now year ","Chronic  now "," tokens [] get_tag type _or_time "," now year  + ","Chronic  now year  + ","Chronic  time_class local  < ","tokens [] get_tag type _start < "," tokens [] get_tag type _overflow? "," now  now year  "," now Chronic  now year  ","tokens [] get_tag type  + ","Chronic  now  now year  ","Chronic  now Chronic  now year  "]}," Chronic Handlers handle_sy_sm_sd":{"type":"method","name":"handle_sy_sm_sd","children":[],"call":[" handle_sm_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic Handlers handle_sd_sm_sy":{"type":"method","name":"handle_sd_sm_sy","children":[],"call":[" handle_sm_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic Handlers handle_sm_sd_sy":{"type":"method","name":"handle_sm_sd_sy","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] "," tokens [] get_tag type _or_time "," tokens [] get_tag type _overflow? "]}," Chronic Handlers handle_sd_rmn_sy":{"type":"method","name":"handle_sd_rmn_sy","children":[],"call":[" handle_rmn_sd_sy ","new_tokens + ","tokens last ","tokens size - ","tokens size ","tokens [] "]}," Chronic Handlers handle_od_rmn_sy":{"type":"method","name":"handle_od_rmn_sy","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index "," tokens [] get_tag type _or_time "," tokens [] get_tag index _overflow? "]}," Chronic Handlers handle_rmn_od_sy":{"type":"method","name":"handle_rmn_od_sy","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index "," tokens [] get_tag type _or_time "," tokens [] get_tag index _overflow? "]}," Chronic Handlers handle_rmn_sd_sy":{"type":"method","name":"handle_rmn_sd_sy","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index "," tokens [] get_tag type _or_time "," tokens [] get_tag index _overflow? "]}," Chronic Handlers handle_generic":{"type":"method","name":"handle_generic","children":[],"call":[" raise ","e message =~ ","e message ","Span  new ","t + ","Chronic  time_class parse ","options [] ","Chronic  time_class ","Chronic  time_class parse  + ","Chronic  Chronic  time_class parse ime_class parse ","opChronic  time_class parse ions [] ","Chronic  Chronic  time_class parse ime_class "]}," Chronic Handlers handle_rmn_sy":{"type":"method","name":"handle_rmn_sy","children":[],"call":["Span  new ","Chronic  time_class local ","Chronic  time_class ","month + ","year + ","month == ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index ","tokens [] get_tag index  + ","tokens [] get_tag type  + ","tokens [] get_tag index  == "]}," Chronic Handlers handle_rmn_od_on":{"type":"method","name":"handle_rmn_od_on","children":[],"call":[" handle_m_d ","tokens [] "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","tokens size > ","tokens size ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_sd_rmn":{"type":"method","name":"handle_sd_rmn","children":[],"call":[" handle_m_d ","tokens [] ","tokens size "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_sy_rmn_od":{"type":"method","name":"handle_sy_rmn_od","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class "," month_overflow? ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index "," tokens [] get_tag type _or_time "," tokens [] get_tag index _overflow? "]}," Chronic Handlers handle_od_rmn":{"type":"method","name":"handle_od_rmn","children":[],"call":[" handle_m_d ","tokens [] ","tokens size "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_od_rm":{"type":"method","name":"handle_od_rm","children":[],"call":[" handle_m_d ","tokens [] ","tokens size ","tokens [] get_tag ","tokens [] get_tag type "]}," Chronic Handlers handle_rmn_od":{"type":"method","name":"handle_rmn_od","children":[],"call":[" handle_m_d ","tokens [] ","tokens size "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_rmn_sd_on":{"type":"method","name":"handle_rmn_sd_on","children":[],"call":[" handle_m_d ","tokens [] "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","tokens size > ","tokens size ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_rmn_sd":{"type":"method","name":"handle_rmn_sd","children":[],"call":[" handle_m_d ","tokens [] ","tokens size "," month_overflow? ","month index "," now year "," now ","tokens [] get_tag type ","tokens [] get_tag ","Chronic  now year ","Chronic  now "," tokens [] get_tag _overflow? ","tokens [] get_tag  index "]}," Chronic Handlers handle_m_d":{"type":"method","name":"handle_m_d","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class ","span begin month ","span begin ","span begin year ","month this ","options [] ","month start= "," now ","Chronic  now ","month this  begin month ","month this  begin ","month this  begin year "]}," Chronic Handler tags_match?":{"type":"method","name":"tags_match?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :tokens) :[]\n      (lvar :token_index)) :tags) :select) empty? ! ","(send\n  (send\n    (send\n      (lvar :tokens) :[]\n      (lvar :token_index)) :tags) :select) empty? ","o kind_of? ","tokens [] tags select ","tokens [] tags ","tokens [] ","Chronic  const_get ","1 upcase ","name to_s gsub ","name to_s "]}," Chronic Handler ==":{"type":"method","name":"==","children":[],"call":["@pattern == ","other pattern "," pattern == "," pattern "]}," Chronic Handler invoke":{"type":"method","name":"invoke","children":[],"call":["parser send "," puts ","Chronic  debug ","Handlers  send "]}," Chronic Grabber to_s":{"type":"method","name":"to_s","children":[],"call":["grabber- << ","@type to_s "]}," Chronic Grabber scan_for_all":{"type":"method","name":"scan_for_all","children":[],"call":[]}," Chronic Grabber scan":{"type":"method","name":"scan","children":[],"call":[]}," Chronic Date month_overflow?":{"type":"method","name":"month_overflow?","children":[],"call":[]}," Chronic Date make_year":{"type":"method","name":"make_year","children":[],"call":[]}," Chronic Date could_be_year?":{"type":"method","name":"could_be_year?","children":[],"call":[]}," Chronic Date could_be_month?":{"type":"method","name":"could_be_month?","children":[],"call":[]}," Chronic Date could_be_day?":{"type":"method","name":"could_be_day?","children":[],"call":[]}," Numerizer andition":{"type":"method","name":"andition","children":[],"call":["sc reset ","string []= ","(send\n  (send\n    (send\n      (lvar :sc) :[]\n      (int 1)) :to_i) :+\n  (send\n    (send\n      (lvar :sc) :[]\n      (int 3)) :to_i)) to_s ","sc [] to_i + ","sc [] to_i ","sc [] ","sc pos - ","sc pos ","sc matched_size ","sc [] size > ","sc [] size ","sc [] =~ ","sc scan_until ","StringScanner  new ","StringScanner  new  reset ","(send\n  (send\n    (send\n      (lvar :StringScanner  new ) :[]\n      (int 1)) :to_i) :+\n  (send\n    (send\n      (lvar :StringScanner  new ) :[]\n      (int 3)) :to_i)) to_s ","StringScanner  new  [] to_i + ","StringScanner  new  [] to_i ","StringScanner  new  [] ","StringScanner  new  pos - ","StringScanner  new  pos ","StringScanner  new  matched_size ","StringScanner  new  [] size > ","StringScanner  new  [] size ","StringScanner  new  [] =~ ","StringScanner  new  StringScanner  new an_until "]}," Numerizer numerize":{"type":"method","name":"numerize","children":[],"call":["(send\n  (send\n    (nth-ref 1) :to_f) :+\n  (float 0.5)) to_s ","1 to_f + ","1 to_f ","string gsub! "," andition ","(send\n  (send\n    (lvar :bp) :[]\n    (int 1)) :*\n  (send\n    (nth-ref 1) :to_i)) to_s ","bp [] * ","1 to_i ","bp [] ","BIG_PREFIXES  each ","(send\n  (send\n    (lvar :tp) :[]\n    (int 1)) :+\n  (send\n    (nth-ref 1) :to_i)) to_s ","tp [] + ","tp [] ","TEN_PREFIXES  each ","dn [] ","DIRECT_NUMS  each ","string dup ","string dup  gsub! ","string dup  dup "]}," Time construct":{"type":"method","name":"construct","children":[],"call":[]}," RepeaterMonth to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," Chronic handle_rdn_rmn_sd_t_tz_sy":{"type":"method","name":"handle_rdn_rmn_sd_t_tz_sy","children":[],"call":[" day_or_time ","tokens [] ","Time  local ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] get_tag index ","Span  new ","t + ","Chronic  time_class parse ","Chronic  time_class "," tokens [] get_tag type _or_time "," day_or_Chronic  time_class parse ime ","Chronic  time_class parse okens [] ","Chronic  time_class parse okens [] geChronic  time_class parse _Chronic  time_class parse ag Chronic  time_class parse ype ","Chronic  time_class parse okens [] geChronic  time_class parse _Chronic  time_class parse ag ","Chronic  time_class parse okens [] geChronic  time_class parse _Chronic  time_class parse ag index ","Chronic  time_class parse  + ","Chronic  Chronic  time_class parse ime_class parse ","Chronic  Chronic  time_class parse ime_class "]}," RepeaterYear initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterWeekend initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterWeekday symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","lookup [] "]}," RepeaterWeekday is_weekday?":{"type":"method","name":"is_weekday?","children":[],"call":[" is_weekend? ! "," is_weekend? "]}," RepeaterWeekday is_weekend?":{"type":"method","name":"is_weekend?","children":[],"call":["day == "," symbol_to_number "]}," RepeaterWeekday to_s":{"type":"method","name":"to_s","children":[],"call":[" << "]}," RepeaterWeekday width":{"type":"method","name":"width","children":[],"call":[]}," RepeaterWeekday offset":{"type":"method","name":"offset","children":[],"call":["span + "," is_weekday? ","(send\n  (send\n    (lvar :span) :begin) :+\n  (lvar :offset)) wday ","span begin + ","span begin ","direction * ","num_weekdays_passed == ","pointer == "]}," RepeaterWeekday this":{"type":"method","name":"this","children":[],"call":[" next "]}," RepeaterWeekday next":{"type":"method","name":"next","children":[],"call":["Chronic Span  new ","@current_weekday_start + "," is_weekday? ","@current_weekday_start wday ","direction * "," loop ","Time  construct ","@now day ","@now month ","@now year ","@current_weekday_start ! ","pointer == ","Time  construct  + ","Time  construct  wday ","Time  construct  ! "]}," RepeaterWeekday initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterWeek initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterSecond initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterSeasonName offset_by":{"type":"method","name":"offset_by","children":[],"call":["time + ","amount * * ","amount * ","pointer == "]}," RepeaterSeasonName offset":{"type":"method","name":"offset","children":[],"call":["Chronic Span  new "," offset_by ","span end ","span begin "]}," RepeaterSeason num_seconds_til_end":{"type":"method","name":"num_seconds_til_end","children":[],"call":[" num_seconds_til ","SEASONS  [] end ","SEASONS  [] "]}," RepeaterSeason num_seconds_til_start":{"type":"method","name":"num_seconds_til_start","children":[],"call":[" num_seconds_til ","SEASONS  [] start ","SEASONS  [] "]}," RepeaterSeason num_seconds_til":{"type":"method","name":"num_seconds_til","children":[],"call":["(send\n  (lvar :start) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate equals? ","(send\n  (lvar :start) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate ","start + ","direction * ","Time  construct ","@now day ","@now month ","@now year ","(send\n  (lvar :Time  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate equals? ","(send\n  (lvar :Time  construct ) :+\n  (send\n    (lvar :direction) :*\n    (lvar :seconds))) to_minidate ","Time  construct  + "]}," RepeaterSeason find_current_season":{"type":"method","name":"find_current_season","children":[],"call":["md is_between? ","SEASONS  [] end ","SEASONS  [] ","SEASONS  [] start ","(sym :spring) each "]}," RepeaterSeason find_next_season_span":{"type":"method","name":"find_next_season_span","children":[],"call":["Chronic Span  new ","direction * "," num_seconds_til_end "," num_seconds_til_start ","Time  construct ","@now day ","@now month ","@now year ","@next_season_end ! ","@next_season_start ! ","Time  construct  ! "]}," RepeaterSeason offset_by":{"type":"method","name":"offset_by","children":[],"call":["time + ","amount * * ","amount * ","pointer == "]}," RepeaterSeason offset":{"type":"method","name":"offset","children":[],"call":["Chronic Span  new "," offset_by ","span end ","span begin "]}," RepeaterSeason initialize":{"type":"method","name":"initialize","children":[],"call":[]}," MiniDate equals?":{"type":"method","name":"equals?","children":[],"call":[" day == ","other day "," day ","@month == ","other month "]}," MiniDate is_between?":{"type":"method","name":"is_between?","children":[],"call":["(send\n  (lvar :i) :+\n  (int 1)) % ","i + ","@month == ","i == ","md_end month ","md_start month + ","md_start month ","@day <= ","md_end day ","@day >= ","md_start day ","(send\n  (lvar :(send\n  (lvar :i) :+\n  (int 1)) % ) :+\n  ((send\n  (lvar :i) :+\n  (int 1)) % nt 1)) % ","(send\n  (lvar :md_start month + ) :+\n  (md_start month + nt 1)) % ","(send\n  (lvar :i) :+\n  (int 1)) %  + ","md_start month +  + ","(send\n  (lvar :i) :+\n  (int 1)) %  == ","md_start month +  == "]}," MiniDate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Season season_before":{"type":"method","name":"season_before","children":[],"call":[]}," Season season_after":{"type":"method","name":"season_after","children":[],"call":[]}," Season find_next_season":{"type":"method","name":"find_next_season","children":[],"call":[]}," Season initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Time to_minidate":{"type":"method","name":"to_minidate","children":[],"call":["MiniDate  new "," day "," month ","Chronic MiniDate  new ","Chronic MiniDate  from_time "," warn "]}," RepeaterMonthName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterMonth initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterMinute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterHour initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterFortnight initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterDayName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RepeaterDay initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Repeater scan_for_season_names":{"type":"method","name":"scan_for_season_names","children":[],"call":[]}," Chronic handle_rmn_od_on":{"type":"method","name":"handle_rmn_od_on","children":[],"call":[" handle_m_d ","tokens [] ","tokens [] get_tag type ","tokens [] get_tag ","tokens size > ","tokens size "]}," Chronic handle_rmn_sd_on":{"type":"method","name":"handle_rmn_sd_on","children":[],"call":[" handle_m_d ","tokens [] ","tokens [] get_tag type ","tokens [] get_tag ","tokens size > ","tokens size "]}," Chronic swap":{"type":"method","name":"swap","children":[],"call":["arr [] ","arr []= "]}," Chronic endian_variable_name_for":{"type":"method","name":"endian_variable_name_for","children":[],"call":["(str \"@\") to_sym ","e to_s "]}," Chronic apply_endian_precedences":{"type":"method","name":"apply_endian_precedences","children":[],"call":[" swap ","indices last ","indices first ","indices first > ","date_defs index "," instance_variable_get "," endian_variable_name_for ","precedences map ","@definitions [] ","@definitions []  index "]}," Chronic Scalar make_year":{"type":"method","name":"make_year","children":[],"call":[]}," Chronic RepeaterMonthName symbol_to_number":{"type":"method","name":"symbol_to_number","children":[],"call":[" raise ","MONTHS  [] "]}," Chronic handle_rmn_od_sy":{"type":"method","name":"handle_rmn_od_sy","children":[],"call":[" day_or_time ","Chronic  time_class local ","Chronic  time_class ","tokens last ","tokens size - ","tokens size ","tokens [] get_tag type ","tokens [] get_tag ","tokens [] ","tokens [] get_tag index "," tokens [] get_tag type _or_time "]}," Chronic tokenize":{"type":"method","name":"tokenize","children":[],"call":["token tagged? ! ","token tagged? ","tokens delete_if ","tok scan ","(const nil :Repeater) each ","Token  new ","text split map ","text split ","tokens select "," pre_normalize ","tok scan  delete_if "," pre_normalize  split map "," pre_normalize  split ","tok scan  select "]}," Chronic Handlers handle_rdn_rmn_sd_t_tz_sy":{"type":"method","name":"handle_rdn_rmn_sd_t_tz_sy","children":[],"call":["Span  new ","t + ","Chronic  time_class parse ","options [] ","Chronic  time_class ","Chronic  time_class parse  + ","Chronic  Chronic  time_class parse ime_class parse ","opChronic  time_class parse ions [] ","Chronic  Chronic  time_class parse ime_class "]}," Chronic Handlers handle_sy_sm_sd_t_tz":{"type":"method","name":"handle_sy_sm_sd_t_tz","children":[],"call":["Span  new ","t + ","Chronic  time_class parse ","options [] ","Chronic  time_class ","Chronic  time_class parse  + ","Chronic  Chronic  time_class parse ime_class parse ","opChronic  time_class parse ions [] ","Chronic  Chronic  time_class parse ime_class "]}}