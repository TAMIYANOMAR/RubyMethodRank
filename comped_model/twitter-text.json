{" Twitter Validation tweet_invalid?":{"type":"method","name":"tweet_invalid?","children":[],"call":["text include? ","INVALID_CHARACTERS  any? "," tweet_length > "," tweet_length ","text blank? ","Twitter Regex INVALID_CHARACTERS  any? ","text empty? ","text ! "]}," Twitter Validation tweet_length":{"type":"method","name":"tweet_length","children":[],"call":["ActiveSupport Multibyte Chars  new normalize length ","ActiveSupport Multibyte Chars  new normalize ","ActiveSupport Multibyte Chars  new ","options [] ","url downcase =~ ","url downcase ","start_position - ","Twitter Extractor  extract_urls_with_indices ","text to_nfc unpack length ","text to_nfc unpack ","text to_nfc ","DEFAULT_TCO_URL_LENGTHS  merge ","url length > ","url length ","ActiveSupport Multibyte Chars  new normalize text to_nfc unpack length  ","ActiveSupport Multibyte Chars  new normalize ActiveSupport Multibyte Chars  new normalize length  ","DEFAULT_TCO_URL_LENGTHS  merge  [] ","text to_nfc unpack text to_nfc unpack length  ","text to_nfc unpack ActiveSupport Multibyte Chars  new normalize length  ","url text to_nfc unpack length  > ","url ActiveSupport Multibyte Chars  new normalize length  > ","url text to_nfc unpack length  ","url ActiveSupport Multibyte Chars  new normalize length  "]}," Twitter Unicode const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Twitter Extractor extract_hashtags":{"type":"method","name":"extract_hashtags","children":[],"call":["tags each "," block_given? ","tags << ","text scan ","Twitter Regex  [] ","hashtags_only each ","hash [] "," extract_hashtags_with_indices map "," extract_hashtags_with_indices ","hashtags each ","h [] "]}," Twitter Extractor extract_urls":{"type":"method","name":"extract_urls","children":[],"call":["urls each "," block_given? ","urls << ","protocol == ","text to_s scan ","Twitter Regex  [] ","text to_s ","urls_only each ","url [] "," extract_urls_with_indices map "," extract_urls_with_indices ","u [] "]}," Twitter Extractor extract_reply_screen_name":{"type":"method","name":"extract_reply_screen_name","children":[],"call":[" block_given? ","possible_screen_name captures first ","possible_screen_name captures ","possible_screen_name respond_to? ","text match ","Twitter Regex  [] ","$' =~ ","possible_possible_screen_name captures first  captures first ","text match  captures first ","possible_possible_screen_name captures first  captures ","text match  captures ","possible_possible_screen_name captures first  respond_to? ","text match  respond_to? "]}," Twitter Extractor extract_mentioned_screen_names":{"type":"method","name":"extract_mentioned_screen_names","children":[],"call":["possible_screen_names each "," block_given? ","possible_screen_names << ","text scan ","Twitter Regex  [] ","after =~ ","screen_names_only each ","mention [] "," extract_mentioned_screen_names_with_indices map "," extract_mentioned_screen_names_with_indices ","screen_names each ","m [] "]}," Twitter Autolink auto_link_urls_custom":{"type":"method","name":"auto_link_urls_custom","children":[],"call":["protocol == "," tag_options ","href_options stringify_keys ","text gsub ","Twitter Regex  [] ","protocol =~ ","options stringify_keys ","options []= ","options delete ","href_options dup "," encode ","protocol blank? ","domain =~ ","protocol blank? ! "," html_escape ","before_tld == ","all =~ ","url_entities [] [] ","url_entities [] ","options delete call ","options [] ","Twitter Rewriter  rewrite_urls "," html_attrs_for_options ","url_entities []= ","entity [] ","entity with_indifferent_access ","options [] each ","url =~ ","display_url match ","expanded_url slice ","display_url_index + ","display_url_sans_ellipses length ","expanded_url index ","expanded_url include? ","display_url sub ","options [] ! ","(send\n  (lvar :options) :reject) stringify_keys ","OPTIONS_NOT_ATTRIBUTES  include? ","options reject "," tag_href_options dup  ","href_href_options dup  stringify_keys "," html_escape _options stringify_keys ","options delete call _options stringify_keys ","href_options dup  stringify_keys ","href_options dup  []= ","href_options dup  delete ","href_href_options dup  dup "," html_escape _options dup ","options delete call _options dup ","href_options dup  delete call ","href_options dup  [] "," html_attrs_for_href_options dup  ","  html_attrs_for_options _for_options ","entity with_indifferent_access  [] ","entity with_indifferent_access  with_indifferent_access ","href_options dup  [] each ","url_entities [] []  match ","url_entities [] []  slice ","url_entities [] [] _index + ","expanded_url index  + ","url_entities [] [] _sans_ellipses length ","display_url sub  length ","url_entities [] []  index ","url_entities [] []  include? ","url_entities [] []  sub ","href_options dup  [] ! ","(send\n  (lvar :href_options dup ) :reject) stringify_keys ","href_options dup  reject "]}," Twitter Autolink auto_link_hashtags":{"type":"method","name":"auto_link_hashtags","children":[],"call":["options [] "," block_given? ","text gsub ","Twitter Regex  [] ","options dup "," auto_link_entities ","Extractor  extract_hashtags_with_indices "," encode "," html_escape "," target_tag ","options [] call ","Twitter Rewriter  rewrite_hashtags ","(send\n  (lvar :text) :gsub\n  (send\n    (const\n      (const nil :Twitter) :Regex) :[]\n    (sym :auto_link_hashtags))) gsub ","options dup  [] ","options dup  dup ","options dup  [] call "]}," Twitter Autolink auto_link_usernames_or_lists":{"type":"method","name":"auto_link_usernames_or_lists","children":[],"call":["options [] "," block_given? ","list downcase ","options [] ! ","text gsub ","Twitter Regex  [] ","options dup "," auto_link_entities ","Extractor  extract_mentions_or_lists_with_indices ","new_text << "," encode ","after =~ ","chunk gsub ","index % != ","index % ","index % == ","index != ","text split each_with_index ","text split "," html_escape "," target_tag ","options [] call ","name downcase ","Twitter Rewriter  rewrite_usernames_or_lists ","at_before_user + ","options [] + ","options dup  [] ","options dup  [] ! ","options dup  dup ","options dup  [] call ","options dup  [] + "]}," Twitter Autolink auto_link":{"type":"method","name":"auto_link","children":[],"call":[" auto_link_usernames_or_lists "," auto_link_urls_custom "," auto_link_hashtags ","options dup "," auto_link_entities ","Extractor  extract_entities_with_indices ","options dup  dup "]}," Twitter HitHighlighter hit_highlight":{"type":"method","name":"hit_highlight","children":[],"call":["result << ","chunks [] ","index even? ","(send\n  (lvar :chunk_index) :+\n  (int 1)) upto each ","(send\n  (lvar :chunk_index) :+\n  (int 1)) upto ","chunks length - ","chunks length ","chunk_index + ","chunk_chars [] ","chunk_cursor < ","chunk_chars length ","index % == ","index % ","chunk_chars [] to_s + ","chunk_chars [] to_s ","hit - ","chunk nil? ! ","chunk nil? ","placed ! ","chunk chars ","chunk chars respond_to? ","chunk respond_to? ","chunk mb_chars ","hit == ","prev_chunks_len + ","hit < ","chunk length ","tags [] ","hits flatten each_with_index ","hits flatten ","(send\n  (send\n    (lvar :text) :split\n    (str \"<\")) :map) flatten ","item split ","item blank? ","text split map ","text split ","</ + + ","</ + ","< + + ","< + ","options [] ","hits empty? ","result flatten join ","result flatten ","i even? ","result << << ","chunk to_s to_char_a ","chunk to_s ","chunks [] s [] ","(send\n  (send\n    (lvar :text) :split\n    (str \"<\")) :map) flatten  [] ","text split  [] ","(send\n  (lvar :chunks [] _index) :+\n  (int 1)) upto each ","(send\n  (lvar :chunks [] _index) :+\n  (int 1)) upto ","chunks [] s length - ","(send\n  (send\n    (lvar :text) :split\n    (str \"<\")) :map) flatten  length - ","text split  length - ","chunks [] s length ","(send\n  (send\n    (lvar :text) :split\n    (str \"<\")) :map) flatten  length ","text split  length ","chunks [] _index + ","chunk mb_chars  [] ","chunk to_s to_char_a  [] ","chunks [] _chars [] ","chunks [] _cursor < ","chunk mb_chars  length ","chunk to_s to_char_a  length ","chunks [] _chars length ","chunk mb_chars  [] to_s + ","chunk to_s to_char_a  [] to_s + ","chunks [] _chars [] to_s + ","chunk mb_chars  [] to_s ","chunk to_s to_char_a  [] to_s ","chunks [] _chars [] to_s ","chunks []  nil? ! ","chunks []  nil? ","chunks []  chars ","chunks []  chars respond_to? ","chunks []  respond_to? ","chunks []  mb_chars ","prev_chunks [] s_len + ","prev_(send\n  (send\n    (lvar :text) :split\n    (str \"<\")) :map) flatten _len + ","prev_text split _len + ","chunks []  length ","tags [] s [] ","chunks []  to_s to_char_a ","chunks []  to_s "]}," Twitter Regex []":{"type":"method","name":"[]","children":[],"call":[]}," Twitter Extractor extract_hashtags_with_indices":{"type":"method","name":"extract_hashtags_with_indices","children":[],"call":["tag [] last ","tag [] ","tag [] first ","tags each "," block_given? ","tags << ","start_position + + ","start_position + ","hash_text char_length ","text to_s sub_string_search ","text to_s ","text scan ","Twitter Regex  [] ","entity [] ! ","entity [] ","tags reject! "," remove_overlapping_entities ","tags concat ","urls empty? "," extract_urls_with_indices ","options [] ","after =~ ","match_data char_end ","match_data char_begin ","text =~ ","hash + ","$~ char_end ","$~ char_begin ","(send\n  (lvar :text) :scan\n  (send\n    (const\n      (const nil :Twitter) :Regex) :[]\n    (sym :auto_link_hashtags))) scan "," remove_overlapping_entities  each "," remove_overlapping_entities  << ","start_start_position + +  + + ","text to_s sub_string_search  + + ","match_data char_begin  + + ","$~ char_begin  + + ","start_start_position + +  + ","text to_s sub_string_search  + ","match_data char_begin  + ","$~ char_begin  + "," remove_overlapping_entities  reject! "," remove_overlapping_entities  concat "," extract_urls_with_indices  empty? "," extract_ extract_urls_with_indices _with_indices ","(send\n  (lvar :text) :scan\n  (send\n    (const\n      (const nil :Twitter) :Regex) :[]\n    (sym :auto_link_hash remove_overlapping_entities ))) scan "]}," Twitter Extractor extract_urls_with_indices":{"type":"method","name":"extract_urls_with_indices","children":[],"call":["url [] last ","url [] ","url [] first ","urls each "," block_given? ","urls << ","protocol == ","start_position + ","url char_length ","text to_s sub_string_search ","text to_s ","text to_s scan ","Twitter Regex  [] ","url =~ ","last_url [] []= ","last_url [] ","last_url []= ","url sub ","ascii_domain !~ ","ascii_domain =~ ","$~ char_end ","$~ char_begin ","domain scan ","before =~ ","options [] ! ","options [] ","protocol ! ","valid_url_match_data char_end ","valid_url_match_data char_begin ","text index ","protocol blank? ","protocol =~ ","domain =~ ","protocol blank? ! ","valid_url_match_data char_begin + ","all =~ ","path ! ","url sub! ","$~ to_s ","protocol empty? ! ","protocol empty? "," is_valid_domain ","url length ","1 length > ","1 length ","text to_s sub_string_search  + ","valid_url_match_data char_begin  + ","valid_url_match_data char_begin +  + "]}," Twitter Extractor extract_mentioned_screen_names_with_indices":{"type":"method","name":"extract_mentioned_screen_names_with_indices","children":[],"call":["mention [] last ","mention [] ","mention [] first ","possible_screen_names each "," block_given? ","possible_screen_names << ","start_position + + ","start_position + ","sn char_length ","text to_s sub_string_search - ","text to_s sub_string_search ","text to_s ","after =~ ","Twitter Regex  [] ","text to_s scan ","list_slug empty? "," extract_mentions_or_lists_with_indices ","extract_mentions_match_data char_end ","extract_mentions_match_data char_begin - ","extract_mentions_match_data char_begin ","start_start_position + +  + + ","text to_s sub_string_search -  + + ","extract_mentions_match_data char_begin -  + + ","start_start_position + +  + ","text to_s sub_string_search -  + ","extract_mentions_match_data char_begin -  + "]}," String sub_string_search":{"type":"method","name":"sub_string_search","children":[],"call":["index last + ","index last ","index nil? ","(send\n  (send\n    (send nil :to_char_a) :slice\n    (send\n      (send\n        (lvar :e) :last) :+\n      (lvar :position))\n    (send\n      (lvar :sub_str) :char_length)) :map) join == ","(send\n  (send\n    (send nil :to_char_a) :slice\n    (send\n      (send\n        (lvar :e) :last) :+\n      (lvar :position))\n    (send\n      (lvar :sub_str) :char_length)) :map) join ","ci first "," to_char_a slice map "," to_char_a slice ","sub_str char_length ","e last + ","e last "," to_char_a "," to_char_a [] each_with_index find "," to_char_a [] each_with_index "," to_char_a [] "," index "," respond_to? "]}," String to_char_a":{"type":"method","name":"to_char_a","children":[],"call":["char_array << ","(send\n  (send nil :chars) :slice\n  (lvar :i)) pack "," chars slice "," chars ","0 upto "," char_length - "," char_length "," chars to_a "," chars kind_of? "]}," String char_length":{"type":"method","name":"char_length","children":[],"call":[" chars size "," chars "," chars to_a size "," chars to_a "," chars kind_of? "," length "," respond_to? "]}," Twitter Validation valid_match?":{"type":"method","name":"valid_match?","children":[],"call":["(and\n  (lvar :string)\n  (begin\n    (or\n      (send\n        (send\n          (lvar :string) :match\n          (lvar :regex)) :!)\n      (send\n        (send\n          (gvar :$~) :to_s) :!=\n        (lvar :string))))) ! ","$~ to_s != ","$~ to_s ","string match ! ","string match ","$~ to_s == "]}," Twitter Validation valid_url?":{"type":"method","name":"valid_url?","children":[],"call":[" valid_match? ","Twitter Regex  [] ","unicode_domains ! ","scheme match ","require_protocol ! ","url_parts captures ","url_parts to_s == ","url_parts to_s ","url match ","url empty? ","url ! ","url blank? ","url match  captures ","url match  to_s == ","url match  to_s "]}," Twitter Validation valid_hashtag?":{"type":"method","name":"valid_hashtag?","children":[],"call":["extracted first == ","hashtag [] ","extracted first ","extracted size == ","extracted size ","Twitter Extractor  extract_hashtags ","hashtag empty? ","hashtag ! ","hashtag blank? ","Twitter Extractor  extract_hashtags  first == ","Twitter Extractor  extract_hashtags  first ","Twitter Extractor  extract_hashtags  size == ","Twitter Extractor  extract_hashtags  size "]}," Twitter Validation valid_list?":{"type":"method","name":"valid_list?","children":[],"call":["(and\n  (and\n    (and\n      (lvar :match)\n      (send\n        (send\n          (lvar :match) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :match) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :empty?) :!)) ! ! ","(and\n  (and\n    (and\n      (lvar :match)\n      (send\n        (send\n          (lvar :match) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :match) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :empty?) :!)) ! ","match [] empty? ! ","match [] empty? ","match [] ","match [] == ","username_list match ","(and\n  (and\n    (lvar :match)\n    (send\n      (send\n        (lvar :match) :[]\n        (int 1)) :==\n      (str \"\")))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :blank?) :!)) ! ! ","(and\n  (and\n    (lvar :match)\n    (send\n      (send\n        (lvar :match) :[]\n        (int 1)) :==\n      (str \"\")))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :blank?) :!)) ! ","match [] blank? ! ","match [] blank? ","(and\n  (and\n    (and\n      (lvar :username_list match )\n      (send\n        (send\n          (lvar :username_list match ) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :username_list match ) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :empty?) :!)) ! ! ","(and\n  (and\n    (and\n      (lvar :username_list match )\n      (send\n        (send\n          (lvar :username_list match ) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :username_list match ) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :empty?) :!)) ! ","username_list match  [] empty? ! ","username_list match  [] empty? ","username_list match  [] ","username_list match  [] == ","username_list username_list match  ","(and\n  (and\n    (lvar :username_list match )\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 1)) :==\n      (str \"\")))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :blank?) :!)) ! ! ","(and\n  (and\n    (lvar :username_list match )\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 1)) :==\n      (str \"\")))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :blank?) :!)) ! ","username_list match  [] blank? ! ","username_list match  [] blank? "]}," Twitter Validation valid_username?":{"type":"method","name":"valid_username?","children":[],"call":["extracted first == ","username [] ","extracted first ","extracted size == ","extracted size ","Twitter Extractor  extract_mentioned_screen_names ","username empty? ","username ! ","username blank? ","Twitter Extractor  extract_mentioned_screen_names  first == ","Twitter Extractor  extract_mentioned_screen_names  first ","Twitter Extractor  extract_mentioned_screen_names  size == ","Twitter Extractor  extract_mentioned_screen_names  size "]}," Twitter Validation valid_tweet_text?":{"type":"method","name":"valid_tweet_text?","children":[],"call":[" tweet_invalid? ! "," tweet_invalid? "]}," Twitter Rewriter rewrite_urls":{"type":"method","name":"rewrite_urls","children":[],"call":["entity [] "," rewrite_entities ","Extractor  extract_urls_with_indices ","protocol empty? ! ","protocol empty? ","text to_s gsub ","Twitter Regex  [] ","text to_s "," rewrite_Extractor  extract_urls_with_indices  "]}," Twitter Rewriter rewrite_hashtags":{"type":"method","name":"rewrite_hashtags","children":[],"call":["entity [] ","chars [] ","entity [] first "," rewrite_entities ","Extractor  extract_hashtags_with_indices ","text to_s gsub ","Twitter Regex  [] ","text to_s ","after =~ "," rewrite_Extractor  extract_hashtags_with_indices  ","Extractor  extract_chars [] tags_with_indices "]}," Twitter Rewriter rewrite_usernames_or_lists":{"type":"method","name":"rewrite_usernames_or_lists","children":[],"call":["entity [] ","list_slug empty? ","chars [] ","entity [] first "," rewrite_entities ","Extractor  extract_mentions_or_lists_with_indices ","new_text << ","after =~ ","Twitter Regex  [] ","chunk gsub ","index % != ","index % ","index % == ","index != ","text to_s split each_with_index ","text to_s split ","text to_s ","entity []  empty? "," rewrite_Extractor  extract_mentions_or_lists_with_indices  "]}," Twitter Rewriter rewrite":{"type":"method","name":"rewrite","children":[],"call":[" send ","options [] ","(sym :hashtags) inject "]}," Twitter Rewriter rewrite_entities":{"type":"method","name":"rewrite_entities","children":[],"call":["result flatten join ","result flatten ","result << ","chars [] ","entity [] last ","entity [] ","entity [] first ","entities inject ","entities sort_by ","text to_s to_char_a ","text to_s ","indices last ","indices first ","entity indices ","entity respond_to? ","text to_s to_char_a  [] ","entity []  last ","entity indices  last ","entity []  first ","entity indices  first ","entity entity []  ","entity entity indices  "]}," Twitter HashHelper symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[]}," Twitter HashHelper symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[]}," Twitter Extractor extract_cashtags_with_indices":{"type":"method","name":"extract_cashtags_with_indices","children":[],"call":["tag [] last ","tag [] ","tag [] first ","tags each "," block_given? ","tags << ","match_data char_end ","match_data char_begin ","text scan ","Twitter Regex  [] ","text =~ ","cash_text [] ","match_data char_begin - "]}," Twitter Extractor extract_cashtags":{"type":"method","name":"extract_cashtags","children":[],"call":["cashtags each "," block_given? ","h [] "," extract_cashtags_with_indices map "," extract_cashtags_with_indices "]}," Twitter Extractor extract_mentions_or_lists_with_indices":{"type":"method","name":"extract_mentions_or_lists_with_indices","children":[],"call":["mention [] last ","mention [] ","mention [] first ","possible_entries each "," block_given? ","possible_entries << ","match_data char_end ","list_slug nil? ","match_data char_begin - ","match_data char_begin ","after =~ ","Twitter Regex  [] ","text to_s scan ","text to_s ","text =~ ","extract_mentions_match_data char_end ","extract_mentions_match_data char_begin - ","extract_mentions_match_data char_begin "]}," Twitter Extractor extract_entities_with_indices":{"type":"method","name":"extract_entities_with_indices","children":[],"call":["entities each "," block_given? "," remove_overlapping_entities ","entities empty? "," extract_urls_with_indices + + + "," extract_cashtags_with_indices "," extract_urls_with_indices + + "," extract_mentions_or_lists_with_indices "," extract_urls_with_indices + "," extract_hashtags_with_indices "," extract_urls_with_indices "," remove_overlapping_entities  each "," extract_urls_with_indices + + +  each "," remove_overlapping_ remove_overlapping_entities  "," remove_overlapping_ extract_urls_with_indices + + +  "," remove_overlapping_entities  empty? "," extract_urls_with_indices + + +  empty? "]}," Twitter Extractor remove_overlapping_entities":{"type":"method","name":"remove_overlapping_entities","children":[],"call":["prev [] last > ","entity [] first ","entity [] ","prev [] last ","prev [] ","entities reject! ","entities sort_by "]}," MatchData char_end":{"type":"method","name":"char_end","children":[],"call":[" string [] char_length "," string [] "," end "," string "," string respond_to? "," string [] codepoint_length "]}," MatchData char_begin":{"type":"method","name":"char_begin","children":[],"call":[" string [] char_length "," string [] "," begin "," string "," string respond_to? "," string [] codepoint_length "]}," Twitter Deprecation deprecate":{"type":"method","name":"deprecate","children":[],"call":[" send "," warn "," define_method "," alias_method ","message << "]}," Twitter Autolink tag_attrs":{"type":"method","name":"tag_attrs","children":[],"call":["attrs << "," html_escape ","value compact join ","value compact ","value nil? ","BOOLEAN_ATTRIBUTES  include? ","attributes [] ","(send\n  (send\n    (lvar :attributes) :keys) :sort_by) inject ","k to_s ","attributes keys sort_by ","attributes keys ","attributes []  compact join ","attributes []  compact ","attributes []  nil? "]}," Twitter Autolink link_to_text":{"type":"method","name":"link_to_text","children":[],"call":[" tag_attrs ","options [] call ","options [] ","attributes []= "]}," Twitter Autolink link_to_text_with_symbol":{"type":"method","name":"link_to_text_with_symbol","children":[],"call":[" link_to_text ","tagged_symbol + ","symbol !~ ","Twitter Regex REGEXEN  [] ","options [] "," html_escape "," link_to_ html_escape  "]}," Twitter Autolink link_to_screen_name":{"type":"method","name":"link_to_screen_name","children":[],"call":[" link_to_text_with_symbol ","options [] ","html_attrs [] ","options [] call ","options [] ! ","entity [] empty? ! ","entity [] empty? ","entity [] ","options [] dup ","chars [] ","entity [] first "," block_given? ","name dup ","name downcase! ","options [] dup  [] ","html_chars [] trs [] "]}," Twitter Autolink link_to_cashtag":{"type":"method","name":"link_to_cashtag","children":[],"call":[" link_to_text_with_symbol ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :cashtag_class))))) merge ","options [] ","options [] call "," block_given? ","entity [] ","chars [] ","entity [] first ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :entity [] _class))))) merge "]}," Twitter Autolink link_to_hashtag":{"type":"method","name":"link_to_hashtag","children":[],"call":[" link_to_text_with_symbol ","(pair\n  (sym :class)\n  (lvar :hashtag_class)) merge ","options [] ","options [] call ","hashtag match ","Twitter Regex REGEXEN  [] "," block_given? ","entity [] ","chars [] ","entity [] first ","options [] to_s ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :hashtag_class))))) merge ","(pair\n  (sym :class)\n  (lvar :options [] )) merge ","(pair\n  (sym :class)\n  (lvar :options [] to_s )) merge ","(pair\n  (sym :class)\n  (lvar :entity [] _class)) merge ","(pair\n  (sym :class)\n  (lvar :chars [] tag_class)) merge ","entity []  match ","chars [] tag match ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :options [] ))))) merge ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :options [] to_s ))))) merge ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :entity [] _class))))) merge ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :chars [] tag_class))))) merge "]}," Twitter Autolink link_url_with_entity":{"type":"method","name":"link_url_with_entity","children":[],"call":[" html_escape ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << ","(str \"…\\\\z\") match to_s ","(str \"…\\\\z\") match ","(str \"\\\\A…\") match to_s ","(str \"\\\\A…\") match ","expanded_url split ","expanded_url include? ","display_url gsub ","options [] ","entity [] ","entity []  split ","entity []  include? ","entity []  gsub "]}," Twitter Autolink link_to_url":{"type":"method","name":"link_to_url","children":[],"call":[" link_to_text "," html_escape "," link_url_with_entity ","url_entity [] ","html_attrs [] ","url_entities [] "," url_entities_hash ","options [] ","html_attrs []= ","options key? ","options [] dup ","options [] call ","entity [] "," link_entity [] _with_entity ","entity [] _entity [] ","options [] dup  [] "," url_entities_hash  [] ","entity [] _entities [] ","  url_entities_hash _hash "," entity [] _entities_hash ","options [] dup  []= "]}," Twitter Autolink url_entities_hash":{"type":"method","name":"url_entities_hash","children":[],"call":["entities []= ","entity [] ","HashHelper  symbolize_keys! ","(or\n  (lvar :url_entities)\n  (hash)) inject ","_entity [] ","HashHelper  symbolize_keys ","entity symbolize_keys ","entity symbolize_keys  [] ","HashHelper  symbolize_keys  [] ","_entity symbolize_keys  [] ","entity symbolize_keys  symbolize_keys "]}," Twitter Autolink extract_html_attrs_from_options!":{"type":"method","name":"extract_html_attrs_from_options!","children":[],"call":["html_attrs []= ","OPTIONS_NOT_ATTRIBUTES  include? ","options reject! "]}," Twitter Autolink html_escape":{"type":"method","name":"html_escape","children":[],"call":["HTML_ENTITIES  [] ","text to_s gsub ","text to_s ","text gsub "]}," Twitter Autolink auto_link_urls":{"type":"method","name":"auto_link_urls","children":[],"call":[" auto_link_entities ","Extractor  extract_urls_with_indices "]}," Twitter Autolink auto_link_cashtags":{"type":"method","name":"auto_link_cashtags","children":[],"call":[" auto_link_entities ","Extractor  extract_cashtags_with_indices "]}," Twitter Autolink auto_link_entities":{"type":"method","name":"auto_link_entities","children":[],"call":[" link_to_cashtag ","entity [] "," link_to_screen_name "," link_to_hashtag "," link_to_url ","Twitter Rewriter  rewrite_entities ","text dup ","options [] []= ","options [] ","options [] == ","options [] [] ","options []= "," extract_html_attrs_from_options! ","DEFAULT_OPTIONS  merge ","entities empty? ","DEFAULT_OPTIONS  merge  [] []= ","DEFAULT_OPTIONS  merge  [] ","DEFAULT_OPTIONS  merge  [] == ","DEFAULT_OPTIONS  merge  [] [] ","DEFAULT_OPTIONS  merge  []= "," extract_html_attrs_from_DEFAULT_OPTIONS  merge ! "]}," Twitter Autolink auto_link_with_json":{"type":"method","name":"auto_link_with_json","children":[],"call":[" auto_link_entities ","entity []= ","entity [] ","HashHelper  symbolize_keys! ","entities each ","json values flatten ","json values ","HashHelper  symbolize_keys ","entities map! ","entity symbolize_keys! "," auto_link_json values flatten  ","HashHelper  symbolize_keys  []= ","HashHelper  symbolize_keys  [] ","json values flatten  each ","json values flatten  map! ","HashHelper  symbolize_keys  symbolize_keys! "]}," Twitter Autolink encode":{"type":"method","name":"encode","children":[],"call":["HTML_ENTITIES  [] ","text gsub "]}," Twitter Autolink target_tag":{"type":"method","name":"target_tag","children":[],"call":[" html_escape ","target_option blank? ","options [] ","target_option empty? ","options [] to_s ","options []  blank? ","options [] to_s  blank? ","options []  empty? ","options [] to_s  empty? "]}," Twitter Autolink html_attrs":{"type":"method","name":"html_attrs","children":[],"call":["attrs << "," html_escape ","value nil? ! ","value nil? ","BOOLEAN_ATTRIBUTES  include? ","options inject "]}," Twitter Autolink html_attrs_for_options":{"type":"method","name":"html_attrs_for_options","children":[],"call":[" html_attrs ","OPTIONS_NOT_ATTRIBUTES  include? ","options reject "," autolink_html_attrs "]}," Twitter Autolink autolink_html_attrs":{"type":"method","name":"autolink_html_attrs","children":[],"call":["attrs << "," html_escape ","value nil? ! ","value nil? ","BOOLEAN_ATTRIBUTES  include? ","options inject "]}," Hash symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[" []= "," delete ","key to_sym "," keys each "," keys "]}," Hash symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[" dup symbolize_keys! "," dup "]}," Twitter WeightedRange contains?":{"type":"method","name":"contains?","children":[],"call":["code_point <= ","code_point >= "]}," Twitter WeightedRange initialize":{"type":"method","name":"initialize","children":[],"call":["range [] "," raise ","ArgumentError  new ","range [] is_a? ","range key? ","(sym :start) all? "]}," Twitter Validation contains_invalid?":{"type":"method","name":"contains_invalid?","children":[],"call":["text include? ","Twitter Regex INVALID_CHARACTERS  any? ","text empty? ","text ! "]}," Twitter Validation parse_tweet":{"type":"method","name":"parse_tweet","children":[],"call":["ParseResults  new ","valid_offset + - ","valid_offset + ","display_offset + - ","display_offset + ","scaled_weighted_length * / ","scaled_weighted_length * ","scaled_weighted_length <= ","has_invalid_chars ! ","weighted_count / ","text char_length - ","normalized_text char_length ","text char_length ","weighted_count <= ","code_point char_length "," contains_invalid? ","normalized_text [] ","range weight ","range contains? ","code_point unpack first ","code_point unpack ","ranges each ","offset < ","url_entity [] last - ","url_entity [] first ","url_entity [] ","url_entity [] last ","url_entity [] first == ","url_entities each ","config default_weight ","Twitter Extractor  extract_urls_with_indices ","config ranges ","config transformed_url_length * ","config transformed_url_length ","max_weighted_tweet_length * ","config max_weighted_tweet_length ","config scale ","ParseResults  empty ","normalized_text_length > ","text to_nfc ","Twitter Configuration  default_configuration ","options [] ","DEFAULT_TCO_URL_LENGTHS  merge ","weighted_count /  * / ","config scale d_weighted_length * / ","weighted_count /  * ","config scale d_weighted_length * ","weighted_count /  <= ","config scale d_weighted_length <= "," contains_invalid?  ! ","text to_nfc  char_length ","normalized_text []  char_length ","text to_nfc  [] ","normalized_text []  unpack first ","normalized_text []  unpack ","config ranges  each ","Twitter Extractor  extract_urls_with_indices  each ","config config ranges  ","config transformed_url_entity [] last -  * ","config config transformed_url_length *  * ","config transformed_url_entity [] last -  ","config config transformed_url_length *  ","config max_weighted_tweet_length  * ","config config max_weighted_tweet_length  ","config config scale  ","normalized_text char_length  > ","text to_nfc _length > ","DEFAULT_TCO_URL_LENGTHS  merge  [] "]}," Twitter Validation ParseResults initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","params [] ","params key? ","RESULT_PARAMS  each "]}," Twitter Validation ParseResults empty":{"type":"method","name":"empty","children":[],"call":[]}," Twitter Extractor is_valid_domain":{"type":"method","name":"is_valid_domain","children":[],"call":["url_length <= ","updated_domain_length - ","updated_domain_length > ","encoded_domain length ","IDN Idna  toASCII ","domain length "," raise ","ArgumentError  new ","encoded_domain length  - ","encoded_domain length  > ","IDN Idna  toASCII  length "]}," Twitter Configuration initialize":{"type":"method","name":"initialize","children":[],"call":["Twitter WeightedRange  new ","config [] map ","config [] ","config [] is_a? ","config key? "]}," Twitter Configuration configuration_from_file":{"type":"method","name":"configuration_from_file","children":[],"call":[]}," Twitter Configuration parse_file":{"type":"method","name":"parse_file","children":[],"call":[]}," Twitter Configuration parse_string":{"type":"method","name":"parse_string","children":[],"call":[]}," Twitter TwitterText WeightedRange contains?":{"type":"method","name":"contains?","children":[],"call":["code_point <= ","code_point >= "]}," Twitter TwitterText WeightedRange initialize":{"type":"method","name":"initialize","children":[],"call":["range [] "," raise ","ArgumentError  new ","range [] is_a? ","range key? ","(sym :start) all? "]}," Twitter TwitterText Validation valid_match?":{"type":"method","name":"valid_match?","children":[],"call":["(and\n  (lvar :string)\n  (begin\n    (or\n      (send\n        (send\n          (lvar :string) :match\n          (lvar :regex)) :!)\n      (send\n        (send\n          (gvar :$~) :to_s) :!=\n        (lvar :string))))) ! ","$~ to_s != ","$~ to_s ","string match ! ","string match ","$~ to_s == "]}," Twitter TwitterText Validation valid_tweet_text?":{"type":"method","name":"valid_tweet_text?","children":[],"call":[" tweet_invalid? ! "," tweet_invalid? "]}," Twitter TwitterText Validation tweet_invalid?":{"type":"method","name":"tweet_invalid?","children":[],"call":["text include? ","Twitter TwitterText Regex INVALID_CHARACTERS  any? "," tweet_length > "," tweet_length ","text empty? ","text ! "]}," Twitter TwitterText Validation tweet_length":{"type":"method","name":"tweet_length","children":[],"call":["options [] ","url length > ","url length ","start_position - ","Twitter TwitterText Extractor  extract_urls_with_indices ","text to_nfc unpack length ","text to_nfc unpack ","text to_nfc ","DEFAULT_TCO_URL_LENGTHS  merge ","DEFAULT_TCO_URL_LENGTHS  merge  [] ","url text to_nfc unpack length  > ","url text to_nfc unpack length  ","text to_nfc unpack text to_nfc unpack length  "]}," Twitter TwitterText Validation valid_url?":{"type":"method","name":"valid_url?","children":[],"call":[" valid_match? ","Twitter TwitterText Regex  [] ","unicode_domains ! ","scheme match ","require_protocol ! ","url_parts captures ","url_parts to_s == ","url_parts to_s ","url match ","url empty? ","url ! ","url match  captures ","url match  to_s == ","url match  to_s "]}," Twitter TwitterText Validation valid_hashtag?":{"type":"method","name":"valid_hashtag?","children":[],"call":["extracted first == ","hashtag [] ","extracted first ","extracted size == ","extracted size ","Twitter TwitterText Extractor  extract_hashtags ","hashtag empty? ","hashtag ! ","Twitter TwitterText Extractor  extract_hashtags  first == ","Twitter TwitterText Extractor  extract_hashtags  first ","Twitter TwitterText Extractor  extract_hashtags  size == ","Twitter TwitterText Extractor  extract_hashtags  size "]}," Twitter TwitterText Validation valid_list?":{"type":"method","name":"valid_list?","children":[],"call":["(and\n  (and\n    (and\n      (lvar :match)\n      (send\n        (send\n          (lvar :match) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :match) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :empty?) :!)) ! ! ","(and\n  (and\n    (and\n      (lvar :match)\n      (send\n        (send\n          (lvar :match) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :match) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :match) :[]\n        (int 4)) :empty?) :!)) ! ","match [] empty? ! ","match [] empty? ","match [] ","match [] == ","username_list match ","(and\n  (and\n    (and\n      (lvar :username_list match )\n      (send\n        (send\n          (lvar :username_list match ) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :username_list match ) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :empty?) :!)) ! ! ","(and\n  (and\n    (and\n      (lvar :username_list match )\n      (send\n        (send\n          (lvar :username_list match ) :[]\n          (int 1)) :==\n        (str \"\")))\n    (send\n      (lvar :username_list match ) :[]\n      (int 4)))\n  (send\n    (send\n      (send\n        (lvar :username_list match ) :[]\n        (int 4)) :empty?) :!)) ! ","username_list match  [] empty? ! ","username_list match  [] empty? ","username_list match  [] ","username_list match  [] == ","username_list username_list match  "]}," Twitter TwitterText Validation valid_username?":{"type":"method","name":"valid_username?","children":[],"call":["extracted first == ","username [] ","extracted first ","extracted size == ","extracted size ","Twitter TwitterText Extractor  extract_mentioned_screen_names ","username empty? ","username ! ","Twitter TwitterText Extractor  extract_mentioned_screen_names  first == ","Twitter TwitterText Extractor  extract_mentioned_screen_names  first ","Twitter TwitterText Extractor  extract_mentioned_screen_names  size == ","Twitter TwitterText Extractor  extract_mentioned_screen_names  size "]}," Twitter TwitterText Validation contains_invalid?":{"type":"method","name":"contains_invalid?","children":[],"call":["text include? ","Twitter TwitterText Regex INVALID_CHARACTERS  any? ","text empty? ","text ! "]}," Twitter TwitterText Validation parse_tweet":{"type":"method","name":"parse_tweet","children":[],"call":["ParseResults  new ","valid_offset + - ","valid_offset + ","display_offset + - ","display_offset + ","scaled_weighted_length * / ","scaled_weighted_length * ","scaled_weighted_length <= ","has_invalid_chars ! ","weighted_count / ","text char_length - ","normalized_text char_length ","text char_length ","weighted_count <= ","code_point char_length "," contains_invalid? ","normalized_text [] ","range weight ","range contains? ","code_point unpack first ","code_point unpack ","ranges each ","offset < ","url_entity [] last - ","url_entity [] first ","url_entity [] ","url_entity [] last ","url_entity [] first == ","url_entities each ","config default_weight ","Twitter TwitterText Extractor  extract_urls_with_indices ","config ranges ","config transformed_url_length * ","config transformed_url_length ","max_weighted_tweet_length * ","config max_weighted_tweet_length ","config scale ","ParseResults  empty ","normalized_text_length > ","text to_nfc ","Twitter TwitterText Configuration  default_configuration ","options [] ","DEFAULT_TCO_URL_LENGTHS  merge ","text codepoint_length - ","normalized_text codepoint_length ","text codepoint_length ","code_point codepoint_length ","entity_length > ","emoji_entity [] last - ","emoji_entity [] first ","emoji_entity [] ","emoji_entity [] last ","emoji_entity [] first == ","emoji_entities each ","Twitter TwitterText Extractor  extract_emoji_with_indices ","config emoji_parsing_enabled ","normalized_text length > ","normalized_text length ","weighted_count /  * / ","config scale d_weighted_length * / ","weighted_count /  * ","config scale d_weighted_length * ","weighted_count /  <= ","config scale d_weighted_length <= "," contains_invalid?  ! ","text to_nfc  char_length ","normalized_text []  char_length ","text to_nfc  [] ","normalized_text []  unpack first ","normalized_text []  unpack ","config ranges  each ","Twitter TwitterText Extractor  extract_urls_with_indices  each ","config config ranges  ","config transformed_url_entity [] last -  * ","config config transformed_url_length *  * ","config transformed_url_entity [] last -  ","config config transformed_url_length *  ","config max_weighted_tweet_length  * ","config config max_weighted_tweet_length  ","config config scale  ","normalized_text char_length  > ","text to_nfc _length > ","DEFAULT_TCO_URL_LENGTHS  merge  [] ","text code_point codepoint_length  - ","text to_nfc  codepoint_length ","normalized_text code_point codepoint_length  ","text code_point codepoint_length  ","normalized_text []  codepoint_length ","code_point code_point codepoint_length  ","emoji_entity [] last -  > ","url_entity [] last -  > ","Twitter TwitterText Extractor  extract_emoji_with_indices  each ","text to_nfc  length > ","text to_nfc  length "]}," Twitter TwitterText Validation ParseResults initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","params [] ","params key? ","RESULT_PARAMS  each "]}," Twitter TwitterText Validation ParseResults empty":{"type":"method","name":"empty","children":[],"call":[]}," Twitter TwitterText Unicode const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Twitter TwitterText Rewriter rewrite_urls":{"type":"method","name":"rewrite_urls","children":[],"call":["entity [] "," rewrite_entities ","Extractor  extract_urls_with_indices "," rewrite_Extractor  extract_urls_with_indices  "]}," Twitter TwitterText Rewriter rewrite_hashtags":{"type":"method","name":"rewrite_hashtags","children":[],"call":["entity [] ","chars [] ","entity [] first "," rewrite_entities ","Extractor  extract_hashtags_with_indices ","codepoints [] "," rewrite_Extractor  extract_hashtags_with_indices  ","Extractor  extract_chars [] tags_with_indices ","Extractor  extract_codepoints [] tags_with_indices "]}," Twitter TwitterText Rewriter rewrite_usernames_or_lists":{"type":"method","name":"rewrite_usernames_or_lists","children":[],"call":["entity [] ","list_slug empty? ","chars [] ","entity [] first "," rewrite_entities ","Extractor  extract_mentions_or_lists_with_indices ","codepoints [] ","entity []  empty? "," rewrite_Extractor  extract_mentions_or_lists_with_indices  "]}," Twitter TwitterText Rewriter rewrite":{"type":"method","name":"rewrite","children":[],"call":[" send ","options [] ","(sym :hashtags) inject "]}," Twitter TwitterText Rewriter rewrite_entities":{"type":"method","name":"rewrite_entities","children":[],"call":["result flatten join ","result flatten ","result << ","chars [] ","indices last ","indices first ","entity [] ","entity indices ","entity respond_to? ","entities inject ","entities sort_by ","text to_s to_char_a ","text to_s ","codepoints [] ","text to_s to_codepoint_a ","text to_s to_char_a  [] ","entity []  last ","entity indices  last ","entity []  first ","entity indices  first ","entity entity []  ","entity entity indices  ","text to_s to_codepoint_a  [] "]}," Twitter TwitterText HitHighlighter hit_highlight":{"type":"method","name":"hit_highlight","children":[],"call":["result flatten join ","result flatten ","result << ","chunks [] ","i even? ","(send\n  (lvar :chunk_index) :+\n  (int 1)) upto each ","(send\n  (lvar :chunk_index) :+\n  (int 1)) upto ","chunks length - ","chunks length ","chunk_index + ","chunk_chars [] ","chunk_cursor < ","chunk_chars length ","placed ! ","index % == ","index % ","result << << ","hit - ","chunk nil? ! ","chunk nil? ","chunk to_s to_char_a ","chunk to_s ","hit == ","prev_chunks_len + ","hit < ","chunk length ","tags [] ","hits flatten each_with_index ","hits flatten ","text split ","</ + + ","</ + ","< + + ","< + ","options [] ","hits empty? ","chunk to_s to_codepoint_a ","chunks [] s [] ","text split  [] ","(send\n  (lvar :chunks [] _index) :+\n  (int 1)) upto each ","(send\n  (lvar :chunks [] _index) :+\n  (int 1)) upto ","chunks [] s length - ","text split  length - ","chunks [] s length ","text split  length ","chunks [] _index + ","chunk to_s to_char_a  [] ","chunk to_s to_codepoint_a  [] ","chunks [] _chars [] ","chunks [] _cursor < ","chunk to_s to_char_a  length ","chunk to_s to_codepoint_a  length ","chunks [] _chars length ","chunks []  nil? ! ","chunks []  nil? ","chunks []  to_s to_char_a ","chunks []  to_s ","prev_chunks [] s_len + ","prev_text split _len + ","chunks []  length ","tags [] s [] ","chunks []  to_s to_codepoint_a "]}," Twitter TwitterText HashHelper symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[]}," Twitter TwitterText HashHelper symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[]}," Twitter TwitterText Extractor is_valid_domain":{"type":"method","name":"is_valid_domain","children":[],"call":["url_length <= ","updated_domain_length - ","updated_domain_length > ","encoded_domain length ","IDN Idna  toASCII ","domain length "," raise ","ArgumentError  new ","encoded_domain length  - ","encoded_domain length  > ","IDN Idna  toASCII  length "]}," Twitter TwitterText Extractor extract_cashtags_with_indices":{"type":"method","name":"extract_cashtags_with_indices","children":[],"call":["tag [] last ","tag [] ","tag [] first ","tags each "," block_given? ","tags << ","match_data char_end ","match_data char_begin ","text scan ","Twitter TwitterText Regex  [] ","text =~ "]}," Twitter TwitterText Extractor extract_cashtags":{"type":"method","name":"extract_cashtags","children":[],"call":["cashtags each "," block_given? ","h [] "," extract_cashtags_with_indices map "," extract_cashtags_with_indices "]}," Twitter TwitterText Extractor extract_hashtags_with_indices":{"type":"method","name":"extract_hashtags_with_indices","children":[],"call":["tag [] last ","tag [] ","tag [] first ","tags each "," block_given? ","entity [] ! ","entity [] ","tags reject! "," remove_overlapping_entities ","tags concat ","urls empty? "," extract_urls_with_indices ","options [] ","tags << ","after =~ ","Twitter TwitterText Regex  [] ","match_data char_end ","match_data char_begin ","text scan ","text =~ "," remove_overlapping_entities  each "," remove_overlapping_entities  reject! "," remove_overlapping_entities  concat "," extract_urls_with_indices  empty? "," extract_ extract_urls_with_indices _with_indices "," remove_overlapping_entities  << "]}," Twitter TwitterText Extractor extract_hashtags":{"type":"method","name":"extract_hashtags","children":[],"call":["hashtags each "," block_given? ","h [] "," extract_hashtags_with_indices map "," extract_hashtags_with_indices "]}," Twitter TwitterText Extractor extract_urls_with_indices":{"type":"method","name":"extract_urls_with_indices","children":[],"call":["url [] last ","url [] ","url [] first ","urls each "," block_given? ","urls << "," is_valid_domain ","url length ","start_position + ","url char_length ","1 length > ","1 length ","url =~ ","Twitter TwitterText Regex  [] ","last_url [] []= ","last_url [] ","last_url []= ","url sub ","ascii_domain !~ ","ascii_domain =~ ","$~ char_end ","$~ char_begin ","domain scan ","before =~ ","options [] ! ","options [] ","protocol ! ","valid_url_match_data char_end ","valid_url_match_data char_begin ","text to_s scan ","text to_s ","text index ","url codepoint_length ","valid_url_match_data char_begin  + "]}," Twitter TwitterText Extractor extract_urls":{"type":"method","name":"extract_urls","children":[],"call":["urls each "," block_given? ","u [] "," extract_urls_with_indices map "," extract_urls_with_indices "]}," Twitter TwitterText Extractor extract_reply_screen_name":{"type":"method","name":"extract_reply_screen_name","children":[],"call":[" block_given? ","possible_screen_name captures first ","possible_screen_name captures ","$' =~ ","Twitter TwitterText Regex  [] ","possible_screen_name respond_to? ","text match ","possible_possible_screen_name captures first  captures first ","text match  captures first ","possible_possible_screen_name captures first  captures ","text match  captures ","possible_possible_screen_name captures first  respond_to? ","text match  respond_to? "]}," Twitter TwitterText Extractor extract_mentions_or_lists_with_indices":{"type":"method","name":"extract_mentions_or_lists_with_indices","children":[],"call":["mention [] last ","mention [] ","mention [] first ","possible_entries each "," block_given? ","possible_entries << ","match_data char_end ","list_slug nil? ","match_data char_begin - ","match_data char_begin ","after =~ ","Twitter TwitterText Regex  [] ","text to_s scan ","text to_s ","text =~ "]}," Twitter TwitterText Extractor extract_mentioned_screen_names_with_indices":{"type":"method","name":"extract_mentioned_screen_names_with_indices","children":[],"call":["mention [] last ","mention [] ","mention [] first ","possible_screen_names each "," block_given? ","possible_screen_names << ","list_slug empty? "," extract_mentions_or_lists_with_indices "]}," Twitter TwitterText Extractor extract_mentioned_screen_names":{"type":"method","name":"extract_mentioned_screen_names","children":[],"call":["screen_names each "," block_given? ","m [] "," extract_mentioned_screen_names_with_indices map "," extract_mentioned_screen_names_with_indices "]}," Twitter TwitterText Extractor extract_entities_with_indices":{"type":"method","name":"extract_entities_with_indices","children":[],"call":["entities each "," block_given? "," remove_overlapping_entities ","entities empty? "," extract_urls_with_indices + + + "," extract_cashtags_with_indices "," extract_urls_with_indices + + "," extract_mentions_or_lists_with_indices "," extract_urls_with_indices + "," extract_hashtags_with_indices "," extract_urls_with_indices "," extract_emoji_with_indices ","config emoji_parsing_enabled ","Twitter TwitterText Configuration  default_configuration ","options [] "," remove_overlapping_entities  each "," extract_urls_with_indices + + +  each "," remove_overlapping_ remove_overlapping_entities  "," remove_overlapping_ extract_urls_with_indices + + +  "," remove_overlapping_entities  empty? "," extract_urls_with_indices + + +  empty? "]}," Twitter TwitterText Extractor remove_overlapping_entities":{"type":"method","name":"remove_overlapping_entities","children":[],"call":["prev [] last > ","entity [] first ","entity [] ","prev [] last ","prev [] ","entities reject! ","entities sort_by "]}," Twitter TwitterText Deprecation deprecate":{"type":"method","name":"deprecate","children":[],"call":[" send "," warn "," define_method "," alias_method ","message << "]}," Twitter TwitterText Configuration initialize":{"type":"method","name":"initialize","children":[],"call":["Twitter TwitterText WeightedRange  new ","config [] map ","config [] ","config [] is_a? ","config key? "]}," Twitter TwitterText Configuration configuration_from_file":{"type":"method","name":"configuration_from_file","children":[],"call":[]}," Twitter TwitterText Configuration parse_file":{"type":"method","name":"parse_file","children":[],"call":[]}," Twitter TwitterText Configuration parse_string":{"type":"method","name":"parse_string","children":[],"call":[]}," Twitter TwitterText Autolink tag_attrs":{"type":"method","name":"tag_attrs","children":[],"call":["attrs << "," html_escape ","value compact join ","value compact ","value nil? ","BOOLEAN_ATTRIBUTES  include? ","attributes [] ","(send\n  (send\n    (lvar :attributes) :keys) :sort_by) inject ","k to_s ","attributes keys sort_by ","attributes keys ","attributes []  compact join ","attributes []  compact ","attributes []  nil? "]}," Twitter TwitterText Autolink link_to_text":{"type":"method","name":"link_to_text","children":[],"call":[" tag_attrs ","options [] call ","options [] ","attributes []= "]}," Twitter TwitterText Autolink link_to_text_with_symbol":{"type":"method","name":"link_to_text_with_symbol","children":[],"call":[" link_to_text ","tagged_symbol + ","symbol !~ ","Twitter TwitterText Regex REGEXEN  [] ","options [] "," html_escape "," link_to_ html_escape  "]}," Twitter TwitterText Autolink link_to_screen_name":{"type":"method","name":"link_to_screen_name","children":[],"call":[" link_to_text_with_symbol ","options [] ","html_attrs [] ","options [] call ","options [] ! ","entity [] empty? ! ","entity [] empty? ","entity [] ","options [] dup ","chars [] ","entity [] first "," block_given? ","name dup ","options [] dup  [] ","html_chars [] trs [] "]}," Twitter TwitterText Autolink link_to_cashtag":{"type":"method","name":"link_to_cashtag","children":[],"call":[" link_to_text_with_symbol ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :cashtag_class))))) merge ","options [] ","options [] call "," block_given? ","entity [] ","chars [] ","entity [] first ","(pair\n  (sym :class)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :entity [] _class))))) merge "]}," Twitter TwitterText Autolink link_to_hashtag":{"type":"method","name":"link_to_hashtag","children":[],"call":[" link_to_text_with_symbol ","(pair\n  (sym :class)\n  (lvar :hashtag_class)) merge ","options [] ","options [] call ","hashtag match ","Twitter TwitterText Regex REGEXEN  [] ","options [] to_s "," block_given? ","entity [] ","chars [] ","entity [] first ","(pair\n  (sym :class)\n  (lvar :options [] to_s )) merge ","(pair\n  (sym :class)\n  (lvar :entity [] _class)) merge ","(pair\n  (sym :class)\n  (lvar :chars [] tag_class)) merge ","entity []  match ","chars [] tag match "]}," Twitter TwitterText Autolink link_url_with_entity":{"type":"method","name":"link_url_with_entity","children":[],"call":[" html_escape ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << << ","(str \"<span class=\\\"tco-ellipsis\\\">\") << ","(str \"…\\\\z\") match to_s ","(str \"…\\\\z\") match ","(str \"\\\\A…\") match to_s ","(str \"\\\\A…\") match ","expanded_url split ","expanded_url include? ","display_url gsub ","options [] ","entity [] ","entity []  split ","entity []  include? ","entity []  gsub "]}," Twitter TwitterText Autolink link_to_url":{"type":"method","name":"link_to_url","children":[],"call":[" link_to_text "," html_escape "," link_url_with_entity ","url_entity [] ","html_attrs [] ","url_entities [] "," url_entities_hash ","options [] ","html_attrs []= ","options key? ","options [] dup ","options [] call ","entity [] "," link_entity [] _with_entity ","entity [] _entity [] ","options [] dup  [] "," url_entities_hash  [] ","entity [] _entities [] ","  url_entities_hash _hash "," entity [] _entities_hash ","options [] dup  []= "]}," Twitter TwitterText Autolink url_entities_hash":{"type":"method","name":"url_entities_hash","children":[],"call":["entities []= ","_entity [] ","HashHelper  symbolize_keys ","(or\n  (lvar :url_entities)\n  (hash)) inject ","HashHelper  symbolize_keys  [] "]}," Twitter TwitterText Autolink extract_html_attrs_from_options!":{"type":"method","name":"extract_html_attrs_from_options!","children":[],"call":["html_attrs []= ","OPTIONS_NOT_ATTRIBUTES  include? ","options reject! "]}," Twitter TwitterText Autolink html_escape":{"type":"method","name":"html_escape","children":[],"call":["HTML_ENTITIES  [] ","text to_s gsub ","text to_s "]}," Twitter TwitterText Autolink auto_link_urls":{"type":"method","name":"auto_link_urls","children":[],"call":[" auto_link_entities ","Extractor  extract_urls_with_indices "]}," Twitter TwitterText Autolink auto_link_cashtags":{"type":"method","name":"auto_link_cashtags","children":[],"call":[" auto_link_entities ","Extractor  extract_cashtags_with_indices "]}," Twitter TwitterText Autolink auto_link_hashtags":{"type":"method","name":"auto_link_hashtags","children":[],"call":[" auto_link_entities ","Extractor  extract_hashtags_with_indices "]}," Twitter TwitterText Autolink auto_link_usernames_or_lists":{"type":"method","name":"auto_link_usernames_or_lists","children":[],"call":[" auto_link_entities ","Extractor  extract_mentions_or_lists_with_indices "]}," Twitter TwitterText Autolink auto_link":{"type":"method","name":"auto_link","children":[],"call":[" auto_link_entities ","Extractor  extract_entities_with_indices "]}," Twitter TwitterText Autolink auto_link_entities":{"type":"method","name":"auto_link_entities","children":[],"call":[" link_to_cashtag ","entity [] "," link_to_screen_name "," link_to_hashtag "," link_to_url ","Twitter TwitterText Rewriter  rewrite_entities ","text dup ","options [] []= ","options [] ","options [] == ","options [] [] ","options []= "," extract_html_attrs_from_options! ","DEFAULT_OPTIONS  merge ","entities empty? ","DEFAULT_OPTIONS  merge  [] []= ","DEFAULT_OPTIONS  merge  [] ","DEFAULT_OPTIONS  merge  [] == ","DEFAULT_OPTIONS  merge  [] [] ","DEFAULT_OPTIONS  merge  []= "," extract_html_attrs_from_DEFAULT_OPTIONS  merge ! "]}," Twitter TwitterText Autolink auto_link_with_json":{"type":"method","name":"auto_link_with_json","children":[],"call":[" auto_link_entities ","entity []= ","entity [] ","HashHelper  symbolize_keys ","entities map! ","json values flatten ","json values "," auto_link_json values flatten  ","HashHelper  symbolize_keys  []= ","HashHelper  symbolize_keys  [] ","json values flatten  map! "]}," Twitter TwitterText Extractor is_valid_emoji":{"type":"method","name":"is_valid_emoji","children":[],"call":["entities [] [] == ","entities [] [] ","entities [] ","entities count == ","entities count "," extract_emoji_with_indices "," raise ","ArgumentError  new "," extract_emoji_with_indices  [] [] == "," extract_emoji_with_indices  [] [] "," extract_emoji_with_indices  [] "," extract_emoji_with_indices  count == "," extract_emoji_with_indices  count "]}," Twitter TwitterText Extractor extract_emoji_with_indices":{"type":"method","name":"extract_emoji_with_indices","children":[],"call":["emoji << ","match_data char_end ","match_data char_begin ","text scan ","Twitter TwitterText Regex  [] "]}," String to_codepoint_a":{"type":"method","name":"to_codepoint_a","children":[],"call":["codepoint_array << ","(send\n  (send nil :chars) :slice\n  (lvar :i)) pack "," chars slice "," chars ","0 upto "," codepoint_length - "," codepoint_length "," chars to_a "," chars kind_of? "]}," String codepoint_length":{"type":"method","name":"codepoint_length","children":[],"call":[" chars size "," chars "," chars to_a size "," chars to_a "," chars kind_of? "," length "," respond_to? "]}," Twitter TwitterText Regex Emoji []":{"type":"method","name":"[]","children":[],"call":[]}}