{" RSpec Matchers throw_symbol":{"type":"method","name":"throw_symbol","children":[],"call":["Matchers ThrowSymbol  new ","BuiltIn ThrowSymbol  new "]}," RSpec Matchers ThrowSymbol args":{"type":"method","name":"args","children":[],"call":["@expected_arg inspect ","@expected_arg nil? "]}," RSpec Matchers ThrowSymbol expected":{"type":"method","name":"expected","children":[],"call":[" args ","@expected_symbol inspect ","@expected_symbol nil? "," throw_description "]}," RSpec Matchers ThrowSymbol description":{"type":"method","name":"description","children":[],"call":[" expected "]}," RSpec Matchers ThrowSymbol failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected "," caught "]}," RSpec Matchers ThrowSymbol failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected ","@caught_symbol inspect "," caught "]}," RSpec Matchers ThrowSymbol matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (ivar :@caught_symbol) :==\n  (ivar :@expected_symbol)) & ","@caught_arg == ","@caught_symbol == ","@expected_arg nil? ","@caught_symbol nil? ! ","@caught_symbol nil? ","@expected_symbol nil? ","2 to_sym "," raise ","e message =~ ","e message "," throw ","given_proc call "," catch ","(send\n  (ivar :2 to_sym ) :==\n  (ivar :@expected_symbol)) & ","2 to_sym  == ","2 to_sym  nil? ! ","2 to_sym  nil? "]}," RSpec Matchers ThrowSymbol initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers satisfy":{"type":"method","name":"satisfy","children":[],"call":["Matchers Satisfy  new ","BuiltIn Satisfy  new "]}," RSpec Matchers Satisfy description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Matchers Satisfy failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers Satisfy failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[]}," RSpec Matchers Satisfy matches?":{"type":"method","name":"matches?","children":[],"call":["@block call "]}," RSpec Matchers Satisfy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers respond_to":{"type":"method","name":"respond_to","children":[],"call":["Matchers RespondTo  new ","BuiltIn RespondTo  new "]}," RSpec Matchers RespondTo pp_names":{"type":"method","name":"pp_names","children":[],"call":["@names inspect ","@names first ","@names length == ","@names length "]}," RSpec Matchers RespondTo with_arity":{"type":"method","name":"with_arity","children":[],"call":["@expected_arity == ","@expected_arity nil? "]}," RSpec Matchers RespondTo matches_arity?":{"type":"method","name":"matches_arity?","children":[],"call":["actual_arity == ","actual_arity ~ <= ","actual_arity ~ ","actual_arity < ","actual method arity ","actual method ","@expected_arity == ","@expected_arity nil? ","actual method arity  == ","actual method arity  ~ <= ","actual method arity  ~ ","actual method arity  < "]}," RSpec Matchers RespondTo find_failing_method_names":{"type":"method","name":"find_failing_method_names","children":[],"call":[" matches_arity? ","@actual respond_to? ","@names send "]}," RSpec Matchers RespondTo argument":{"type":"method","name":"argument","children":[],"call":[]}," RSpec Matchers RespondTo with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Matchers RespondTo description":{"type":"method","name":"description","children":[],"call":[" with_arity "," pp_names "]}," RSpec Matchers RespondTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" failure_message_for_should sub "," failure_message_for_should ","(send\n  (ivar :@names) :collect) join ","name inspect ","@names collect ","@actual inspect "]}," RSpec Matchers RespondTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" with_arity ","(send\n  (ivar :@failing_method_names) :collect) join ","name inspect ","@failing_method_names collect ","@actual inspect ","(send\n  (ivar :@names_not_responded_to) :collect) join ","@names_not_responded_to collect "]}," RSpec Matchers RespondTo does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" find_failing_method_names empty? "," find_failing_method_names "]}," RSpec Matchers RespondTo matches?":{"type":"method","name":"matches?","children":[],"call":[" find_failing_method_names empty? "," find_failing_method_names ","@names_not_responded_to empty? ","@names_not_responded_to << "," matches_arity? ","actual respond_to? ","@names each "]}," RSpec Matchers RespondTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers raise_error":{"type":"method","name":"raise_error","children":[],"call":["Matchers RaiseError  new ","BuiltIn RaiseError  new "]}," RSpec Matchers RaiseError negative_expectation?":{"type":"method","name":"negative_expectation?","children":[],"call":["s =~ "," caller first find "," caller first "," caller "]}," RSpec Matchers RaiseError given_error":{"type":"method","name":"given_error","children":[],"call":["@actual_error inspect ","@actual_error nil? "]}," RSpec Matchers RaiseError expected_error":{"type":"method","name":"expected_error","children":[],"call":["@expected_message inspect "]}," RSpec Matchers RaiseError description":{"type":"method","name":"description","children":[],"call":[" expected_error "]}," RSpec Matchers RaiseError failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" given_error "," expected_error "]}," RSpec Matchers RaiseError failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" given_error "," expected_error ","@actual_error message "]}," RSpec Matchers RaiseError verify_message":{"type":"method","name":"verify_message","children":[],"call":["@expected_message == ","@actual_error message ","@expected_message =~ "]}," RSpec Matchers RaiseError eval_block":{"type":"method","name":"eval_block","children":[],"call":["@block [] "]}," RSpec Matchers RaiseError matches?":{"type":"method","name":"matches?","children":[],"call":["@raised_expected_error & "," eval_block "," negative_expectation? "," verify_message ","given_proc call "]}," RSpec Matchers RaiseError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers Pretty _pretty_print":{"type":"method","name":"_pretty_print","children":[],"call":["result << ","item inspect ","index < ","array length - ","array length ","array each_with_index ","RSpec  deprecate "]}," RSpec Matchers Pretty to_sentence":{"type":"method","name":"to_sentence","children":[],"call":["words [] ","words [] join ","words length ","w inspect ","words map "," Array map "," Array "," to_word ","words inspect ","Struct  === ","words ! "]}," RSpec Matchers Pretty split_words":{"type":"method","name":"split_words","children":[],"call":["sym to_s gsub ","sym to_s "]}," RSpec Matchers NegativeOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","actual __send__ "]}," RSpec Matchers PositiveOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","actual __send__ "]}," RSpec Matchers OperatorMatcher eval_match":{"type":"method","name":"eval_match","children":[],"call":[" __delegate_operator "," RSpec Matchers  last_matcher= "]}," RSpec Matchers OperatorMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," RSpec Matchers OperatorMatcher fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["RSpec Expectations  fail_with "]}," RSpec Matchers OperatorMatcher use_custom_matcher_or_delegate":{"type":"method","name":"use_custom_matcher_or_delegate","children":[],"call":[]}," RSpec Matchers OperatorMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers OperatorMatcher get":{"type":"method","name":"get","children":[],"call":[" registry [] [] "," registry [] "," registry ","klass ancestors each ","klass ancestors "]}," RSpec Matchers OperatorMatcher register":{"type":"method","name":"register","children":[],"call":[" registry [] []= "," registry [] "," registry "]}," RSpec Matchers OperatorMatcher registry":{"type":"method","name":"registry","children":[],"call":[]}," RSpec Matchers method_missing":{"type":"method","name":"method_missing","children":[],"call":["Matchers Has  new ","sym to_s =~ ","sym to_s ","Matchers BePredicate  new ","Matchers BuiltIn Has  new ","method to_s =~ ","method to_s ","Matchers BuiltIn BePredicate  new ","BuiltIn Has  new ","BuiltIn BePredicate  new "]}," RSpec Matchers Matcher singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," RSpec Matchers Matcher expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" to_sentence "]}," RSpec Matchers Matcher name_to_sentence":{"type":"method","name":"name_to_sentence","children":[],"call":[" split_words "]}," RSpec Matchers Matcher call_cached":{"type":"method","name":"call_cached","children":[],"call":["@messages [] call ","@messages [] ","@messages [] arity == ","@messages [] arity "]}," RSpec Matchers Matcher cache":{"type":"method","name":"cache","children":[],"call":["@messages []= "]}," RSpec Matchers Matcher cache_or_call_cached":{"type":"method","name":"cache_or_call_cached","children":[],"call":[" call_cached "," cache "]}," RSpec Matchers Matcher making_declared_methods_public":{"type":"method","name":"making_declared_methods_public","children":[],"call":[" singleton_class __send__ "," singleton_class ","(send\n  (send nil :private_methods) :-\n  (lvar :orig_private_methods)) each "," private_methods - "," private_methods ","st __send__ ","(send\n  (send nil :private_methods) :-\n  (lvar : private_methods )) each "]}," RSpec Matchers Matcher method_missing":{"type":"method","name":"method_missing","children":[],"call":["$matcher_execution_context send ","$matcher_execution_context respond_to? "]}," RSpec Matchers Matcher chain":{"type":"method","name":"chain","children":[],"call":["block call "," define_method "," class class_eval "," class "]}," RSpec Matchers Matcher diffable":{"type":"method","name":"diffable","children":[],"call":[]}," RSpec Matchers Matcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers Matcher description":{"type":"method","name":"description","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers Matcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers Matcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers Matcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[" match "]}," RSpec Matchers Matcher match_for_should_not":{"type":"method","name":"match_for_should_not","children":[],"call":[]}," RSpec Matchers Matcher match":{"type":"method","name":"match","children":[],"call":[]}," RSpec Matchers Matcher define_method":{"type":"method","name":"define_method","children":[],"call":[" singleton_class __send__ "," singleton_class "]}," RSpec Matchers Matcher does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" matches? ! "," matches? "," instance_exec "," instance_eval_with_args "]}," RSpec Matchers Matcher matches?":{"type":"method","name":"matches?","children":[],"call":[" instance_exec "," instance_eval_with_args "]}," RSpec Matchers Matcher initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_exec "," making_declared_methods_public "," expected_to_sentence "," name_to_sentence ","actual inspect "," lambda "," instance_eval_with_args "]}," RSpec Matchers MatchArray difference_between_arrays":{"type":"method","name":"difference_between_arrays","children":[],"call":["difference delete_at ","difference index ","array_2 each ","array_1 dup ","array_1 dup  delete_at ","difference difference index  ","array_1 dup  index "]}," RSpec Matchers MatchArray safe_sort":{"type":"method","name":"safe_sort","children":[],"call":["array sort ","item respond_to? ","array all? "]}," RSpec Matchers MatchArray description":{"type":"method","name":"description","children":[],"call":[" _pretty_print "]}," RSpec Matchers MatchArray failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers MatchArray failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" safe_sort inspect "," safe_sort ","@extra_items empty? ","@missing_items empty? "]}," RSpec Matchers MatchArray matches?":{"type":"method","name":"matches?","children":[],"call":["@extra_items empty? & ","@missing_items empty? ","@extra_items empty? "," difference_between_arrays "," difference_between_arrays  empty? & "," difference_between_arrays  empty? "]}," RSpec Matchers MatchArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers match":{"type":"method","name":"match","children":[],"call":["actual match "," match ","Matcher  new ","BuiltIn Match  new ","Match  new "]}," RSpec Matchers include":{"type":"method","name":"include","children":[{"type":"method","name":"perform_match","children":[],"asgn":[],"call":["actual include? ","actual has_key? "," comparing_hash_keys? ","actual [] == ","actual [] ","expected send "," comparing_hash_values? ","_expected send "]},{"type":"method","name":"comparing_hash_keys?","children":[],"asgn":[],"call":["expected is_a? ! ","expected is_a? ","actual is_a? "]},{"type":"method","name":"comparing_hash_values?","children":[],"asgn":[],"call":["expected is_a? ","actual is_a? "]}],"call":["expected is_a? ","actual is_a? ","expected is_a? ! ","actual include? ","actual has_key? "," comparing_hash_keys? ","actual [] == ","actual [] ","expected send "," comparing_hash_values? ","_expected send "," perform_match "," match_for_should_not "," match_for_should ","Matcher  new ","expected all? ","_expected all? "," match ","BuiltIn Include  new "," diffable ","Include  new "]}," RSpec Matchers have_at_most":{"type":"method","name":"have_at_most","children":[],"call":["Matchers Have  new ","BuiltIn Have  new "]}," RSpec Matchers have_at_least":{"type":"method","name":"have_at_least","children":[],"call":["Matchers Have  new ","BuiltIn Have  new "]}," RSpec Matchers have":{"type":"method","name":"have","children":[],"call":["Matchers Have  new ","BuiltIn Have  new "]}," RSpec Matchers Have relative_expectation":{"type":"method","name":"relative_expectation","children":[],"call":[" relativities [] "," relativities "]}," RSpec Matchers Have method_missing":{"type":"method","name":"method_missing","children":[],"call":["inflector pluralize ","sym to_s ","ActiveSupport Inflector  respond_to? ","method to_s "]}," RSpec Matchers Have respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@expected respond_to? "]}," RSpec Matchers Have description":{"type":"method","name":"description","children":[],"call":[" relative_expectation "]}," RSpec Matchers Have failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected - ","@relativity == ","@expected + "]}," RSpec Matchers Have failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" relative_expectation "]}," RSpec Matchers Have not_a_collection":{"type":"method","name":"not_a_collection","children":[],"call":[]}," RSpec Matchers Have matches?":{"type":"method","name":"matches?","children":[],"call":["@actual == ","@actual <= ","@relativity == ","@actual >= "," raise "," not_a_collection ","@actual nil? ","collection length ","collection respond_to? ","collection size ","collection_owner __send__ ","collection_owner respond_to? ","collection send "," determine_query_method "," determine_collection ","collection length  == ","collection size  == ","collection send  == ","collection length  <= ","collection size  <= ","collection send  <= ","collection length  >= ","collection size  >= ","collection send  >= "," not_a_collection_owner __send__  "," not_a_ determine_collection  ","collection length  nil? ","collection size  nil? ","collection send  nil? ","collection_owner __send__  length "," determine_collection  length ","collection_owner __send__  respond_to? "," determine_collection  respond_to? ","collection_owner __send__  size "," determine_collection  size ","collection_owner __send__ _owner __send__ "," determine_collection _owner __send__ ","collection_owner __send__ _owner respond_to? "," determine_collection _owner respond_to? ","collection_owner __send__  send "," determine_collection  send "," determine_ determine_query_method  "," determine_collection_owner __send__  "," determine_ determine_collection  "]}," RSpec Matchers Have relativities":{"type":"method","name":"relativities","children":[],"call":[]}," RSpec Matchers Have initialize":{"type":"method","name":"initialize","children":[],"call":["expected == ","expected to_i "]}," RSpec Matchers Has predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","sym to_s sub ","sym to_s "]}," RSpec Matchers Has description":{"type":"method","name":"description","children":[],"call":["@args [] inspect ","@args [] ","(send nil :method_description\n  (ivar :@expected)) compact join ","(send nil :method_description\n  (ivar :@expected)) compact "," args_description "," method_description "]}," RSpec Matchers Has failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@args [] inspect ","@args [] "," predicate "," failure_message_args_description "]}," RSpec Matchers Has failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@args [] inspect ","@args [] "," predicate "," failure_message_args_description "]}," RSpec Matchers Has matches?":{"type":"method","name":"matches?","children":[],"call":["actual __send__ "," predicate "]}," RSpec Matchers Has initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers last_description":{"type":"method","name":"last_description","children":[],"call":[]}," RSpec Matchers generated_description":{"type":"method","name":"generated_description","children":[],"call":[]}," RSpec Matchers clear_generated_description":{"type":"method","name":"clear_generated_description","children":[],"call":[]}," RSpec Matchers InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," RSpec Matchers exist":{"type":"method","name":"exist","children":[],"call":["actual exist? "," match ","Matcher  new ","BuiltIn Exist  new "," raise ","#exist? and #exists? returned different values:\n\n + + ","existance_values last ","#exist? and #exists? returned different values:\n\n + ","existance_values first ","NoMethodError  new ","actual inspect ","uniq_truthy_values size ","(send\n  (lvar :existance_values) :map) uniq ","v ! ! ","v ! ","existance_values map ","actual send ","predicates map ","actual respond_to? ","(sym :exist?) select ","Exist  new ","(send\n  (lvar :existance_values) :map) uniq  size "]}," RSpec Matchers equal":{"type":"method","name":"equal","children":[{"type":"method","name":"inspect_object","children":[],"asgn":[],"call":["o inspect ","o object_id ","o class "]}],"call":[" inspect_object "," failure_message_for_should_not "," failure_message_for_should ","o inspect ","o object_id ","o class ","actual equal? "," match ","Matcher  new ","BuiltIn Equal  new ","Equal  new "]}," RSpec Matchers eql":{"type":"method","name":"eql","children":[],"call":["_expected_ inspect ","actual inspect "," failure_message_for_should_not "," failure_message_for_should ","actual eql? "," match "," diffable ","Matcher  new ","BuiltIn Eql  new ","Eql  new "]}," RSpec Matchers eq":{"type":"method","name":"eq","children":[],"call":[" description ","_expected_ inspect ","actual inspect "," failure_message_for_should_not "," failure_message_for_should ","actual == "," match "," diffable ","Matcher  new ","BuiltIn Eq  new ","Eq  new "]}," RSpec Matchers DSL define":{"type":"method","name":"define","children":[],"call":["RSpec Matchers Matcher  new "," define_method ","matcher matcher_execution_context= ","matcher_template for_expected ","RSpec Matchers DSL Matcher  new ","matcher for_expected ","matcher instance_variable_set "," warn_about_block_args ","matcher_template for_expected  matcher_template for_expected _execution_context= ","RSpec Matchers Matcher  new  RSpec Matchers Matcher  new _execution_context= ","RSpec Matchers DSL Matcher  new  RSpec Matchers DSL Matcher  new _execution_context= ","matcher_template for_expected _template for_expected ","RSpec Matchers Matcher  new _template for_expected ","RSpec Matchers DSL Matcher  new _template for_expected ","RSpec Matchers DSL Matcher  new  for_expected ","matcher_template for_expected  for_expected ","RSpec Matchers Matcher  new  for_expected ","matcher_template for_expected  instance_variable_set ","RSpec Matchers Matcher  new  instance_variable_set ","RSpec Matchers DSL Matcher  new  instance_variable_set "]}," RSpec Matchers change":{"type":"method","name":"change","children":[],"call":["Matchers Change  new ","BuiltIn Change  new "]}," RSpec Matchers Change matches_max?":{"type":"method","name":"matches_max?","children":[],"call":["@after - <= ","@after - ","@actual_after - <= ","@actual_after - "]}," RSpec Matchers Change matches_min?":{"type":"method","name":"matches_min?","children":[],"call":["@after - >= ","@after - ","@actual_after - >= ","@actual_after - "]}," RSpec Matchers Change matches_amount?":{"type":"method","name":"matches_amount?","children":[],"call":["@before + == ","@before + "]}," RSpec Matchers Change matches_after?":{"type":"method","name":"matches_after?","children":[],"call":["@to == "," expected_matches_actual? "]}," RSpec Matchers Change matches_before?":{"type":"method","name":"matches_before?","children":[],"call":["@from == "," expected_matches_actual? "]}," RSpec Matchers Change changed?":{"type":"method","name":"changed?","children":[],"call":["@before != ","@actual_before != "]}," RSpec Matchers Change change_expected?":{"type":"method","name":"change_expected?","children":[],"call":["@amount != ","@expected_delta != "]}," RSpec Matchers Change message":{"type":"method","name":"message","children":[],"call":[]}," RSpec Matchers Change description":{"type":"method","name":"description","children":[],"call":[" message "]}," RSpec Matchers Change from":{"type":"method","name":"from","children":[],"call":[]}," RSpec Matchers Change to":{"type":"method","name":"to","children":[],"call":[]}," RSpec Matchers Change by_at_most":{"type":"method","name":"by_at_most","children":[],"call":[]}," RSpec Matchers Change by_at_least":{"type":"method","name":"by_at_least","children":[],"call":[]}," RSpec Matchers Change by":{"type":"method","name":"by","children":[],"call":[]}," RSpec Matchers Change failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@after inspect ","@before inspect "," message ","@actual_after inspect ","@actual_before inspect "]}," RSpec Matchers Change actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@after - ","@actual_after - "]}," RSpec Matchers Change failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@before inspect "," message "," actual_delta inspect "," actual_delta ","@maximum inspect ","@minimum inspect ","@amount inspect ","@after inspect ","@to inspect ","@to != ","@from inspect ","@before != ","@actual_before inspect ","@expected_delta inspect ","@actual_after inspect ","@expected_after inspect "," expected_matches_actual? ! "," expected_matches_actual? ","@expected_before inspect "]}," RSpec Matchers Change evaluate_value_proc":{"type":"method","name":"evaluate_value_proc","children":[],"call":["@value_proc call ","val dup ","@@value_proc call ue_proc call ","@value_proc call  dup "]}," RSpec Matchers Change raise_block_syntax_error":{"type":"method","name":"raise_block_syntax_error","children":[],"call":[" raise ","MatcherError  new "]}," RSpec Matchers Change matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_max? "," matches_min? "," matches_amount? "," matches_after? "," matches_before? "," changed? "," change_expected? ! "," change_expected? "," evaluate_value_proc ","event_proc call "," raise_block_syntax_error "," block_given? ","@before != ","(send\n  (ivar :@after) :-\n  (ivar :@before)) <= ","@after - ","(send\n  (ivar :@after) :-\n  (ivar :@before)) >= ","@before + == ","@before + ","@to == ","@from == "," matches_expected_delta? "," evaluate_value_proc  != ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) <= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) <= "," evaluate_value_proc  - ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) >= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) >= "," evaluate_value_proc  + == "," evaluate_value_proc  + "]}," RSpec Matchers Change initialize":{"type":"method","name":"initialize","children":[],"call":["receiver __send__ "," lambda "]}," RSpec Matchers be_a_kind_of":{"type":"method","name":"be_a_kind_of","children":[],"call":["actual kind_of? "," match ","Matcher  new ","BuiltIn BeAKindOf  new ","BeAKindOf  new "]}," RSpec Matchers be_an_instance_of":{"type":"method","name":"be_an_instance_of","children":[],"call":["actual instance_of? "," match ","Matcher  new ","BuiltIn BeAnInstanceOf  new ","BeAnInstanceOf  new "]}," RSpec Matchers be_close":{"type":"method","name":"be_close","children":[],"call":[" description "," failure_message_for_should_not "," failure_message_for_should ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs < ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs ","actual - "," match ","Matcher  new "," be_within of "," be_within ","RSpec  deprecate "]}," RSpec Matchers be_a":{"type":"method","name":"be_a","children":[],"call":[" be_a_kind_of "]}," RSpec Matchers be":{"type":"method","name":"be","children":[],"call":[" equal ","Matchers Be  new ","args empty? ","Matchers BeSameAs  new ","Matchers BuiltIn Be  new "]}," RSpec Matchers BePredicate prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words "]}," RSpec Matchers BePredicate prefix_and_expected":{"type":"method","name":"prefix_and_expected","children":[],"call":["symbol to_s =~ ","symbol to_s "]}," RSpec Matchers BePredicate parse_expected":{"type":"method","name":"parse_expected","children":[],"call":[" prefix_and_expected "]}," RSpec Matchers BePredicate present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," RSpec Matchers BePredicate predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," RSpec Matchers BePredicate description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "," prefix_to_sentence "]}," RSpec Matchers BePredicate failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BePredicate failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BePredicate matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "]}," RSpec Matchers BePredicate initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_expected ","args shift "]}," RSpec Matchers BeComparedTo description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," RSpec Matchers BeComparedTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "]}," RSpec Matchers BeComparedTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect ","@operator to_s gsub ","@operator to_s ","@expected inspect "]}," RSpec Matchers BeComparedTo matches?":{"type":"method","name":"matches?","children":[],"call":["@actual __send__ "]}," RSpec Matchers BeComparedTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers Be args_to_sentence":{"type":"method","name":"args_to_sentence","children":[],"call":[" to_sentence "]}," RSpec Matchers Be expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" split_words "]}," RSpec Matchers Be inspected_args":{"type":"method","name":"inspected_args","children":[],"call":["a inspect ","@args collect "]}," RSpec Matchers Be parenthesize":{"type":"method","name":"parenthesize","children":[],"call":[]}," RSpec Matchers Be args_to_s":{"type":"method","name":"args_to_s","children":[],"call":[" parenthesize "," inspected_args join "," inspected_args ","@args empty? "]}," RSpec Matchers Be description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Matchers Be failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," RSpec Matchers Be failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," RSpec Matchers Be matches?":{"type":"method","name":"matches?","children":[],"call":["@actual ! ! ","@actual ! "]}," RSpec Matchers Be initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Expectations NegativeExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," RSpec Expectations PositiveExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," RSpec Expectations no_numbers?":{"type":"method","name":"no_numbers?","children":[],"call":["Numeric  === ","args none? ","args flatten none? ","args flatten "]}," RSpec Expectations any_multiline_strings?":{"type":"method","name":"any_multiline_strings?","children":[],"call":["a =~ ","args any? "," all_strings? "," multiline? ","args flatten any? ","args flatten "]}," RSpec Expectations all_strings?":{"type":"method","name":"all_strings?","children":[],"call":["String  === ","args all? ","args flatten all? ","args flatten "]}," RSpec Expectations no_procs?":{"type":"method","name":"no_procs?","children":[],"call":["Proc  === ","args none? ","args flatten none? ","args flatten "]}," RSpec Expectations fail_with":{"type":"method","name":"fail_with","children":[],"call":[" raise ","RSpec Expectations ExpectationNotMetError  new ","message << << "," differ diff_as_object "," differ ","message << "," no_numbers? "," no_procs? "," differ diff_as_string "," any_multiline_strings? "," all_strings? ","Failure message is nil. Does your matcher define the  + ","message ! ","Kernel  raise ","target is_a? ! ","target is_a? ","target to_s ","expected is_a? ","target nil? ","expected nil? "," differ nil? ","message nil? ","expected join ","Array  === "," coerce_to_string ","diff empty? "," differ diff ","RSpec Support  notify_failure "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff "," RSpec Matchers ExpectedsForMultipleDiffs  from "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff  << << ","  differ diff er  differ diff _as_object ","  differ diff er "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff  << ","  differ diff er  differ diff _as_string ","Failure  RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff  is nil. Does your matcher define the  + "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff  ! ","expected join  is_a? ","expected join  nil? ","  differ diff er nil? "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff  nil? ","expected join  join "," differ diff  empty? ","  differ diff er  differ diff  "," RSpec Matchers ExpectedsForMultipleDiffs  from message_with_ differ diff  "," RSpec Matchers ExpectedsForMultipleDiffs  from  RSpec Matchers ExpectedsForMultipleDiffs  from message_with_diff _with_diff "]}," RSpec Expectations differ":{"type":"method","name":"differ","children":[],"call":["Differ  new ","RSpec Support Differ  new ","RSpec Matchers  configuration color? ","RSpec Matchers  configuration ","RSpec Matchers Composable  surface_descriptions_in "," lambda ","DiffPresenter  new "]}," RSpec Core ExampleGroup expect":{"type":"method","name":"expect","children":[],"call":["block extend "]}," Kernel should_not":{"type":"method","name":"should_not","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher ","Rspec Expectations NegativeExpectationHandler  handle_matcher "]}," Kernel should":{"type":"method","name":"should","children":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher ","Rspec Expectations PositiveExpectationHandler  handle_matcher "]}," Array none?":{"type":"method","name":"none?","children":[],"call":[" any? ! "," any? "]}," RSpec Expectations Differ context_lines":{"type":"method","name":"context_lines","children":[],"call":[]}," RSpec Expectations Differ format":{"type":"method","name":"format","children":[],"call":[]}," RSpec Expectations Differ diff_as_object":{"type":"method","name":"diff_as_object","children":[],"call":[" diff_as_string ","PP  pp ","String  === ","diff empty? "," object_to_string "," color_diff ","  diff_as_string _as_string "," diff_as_string  empty? "," color_ diff_as_string  "]}," RSpec Expectations Differ diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":["output << << ","output << ","oldhunk diff "," format ","hunk unshift ","hunk overlaps? "," context_lines > "," context_lines ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each ","diffs empty? ","Diff LCS  diff ","e chomp ","data_new split map! ","data_new split ","data_old split map! ","data_old split "," color_diff ","hunk merge ","hunk respond_to? ","input_data_old encoding ","(str \"Could not produce a diff because the encoding of the actual string (\") + ","input_data_new encoding ","input_data_new encoding != "," matching_encoding ","oldhunk diff to_s ","input_data_new split map! ","input_data_new split ","input_data_old split map! ","input_data_old split "," pick_encoding "," matching_encoding  << << "," matching_encoding  << ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","Diff LCS  diff  empty? ","Diff LCS Hunk  new  merge ","Diff LCS Hunk  new  respond_to? ","input_data_old  pick_encoding  ","(str \"Could not produce a diff because the  pick_encoding  of the actual string (\") + ","input_data_new  pick_encoding  ","input_data_new  pick_encoding  != "," matching_ pick_encoding  ","oldDiff LCS Hunk  new  diff to_s "," pick_ pick_encoding  "]}," RSpec Expectations Differ initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Expectations differ=":{"type":"method","name":"differ=","children":[],"call":["RSpec  deprecate "]}," RSpec Expectations ConstMissing const_missing":{"type":"method","name":"const_missing","children":[],"call":["name == "," raise ","l =~ ","Regexp  compile ","e backtrace reject! ","e backtrace ","RSpec  warn_deprecation "," caller [] "," caller "]}," Rspec Matchers wrap_expectation":{"type":"method","name":"wrap_expectation","children":[],"call":["matcher failure_message= ","e message ","block call "]}," Rspec Matchers throw_symbol":{"type":"method","name":"throw_symbol","children":[],"call":["Matchers ThrowSymbol  new "]}," Rspec Matchers ThrowSymbol args":{"type":"method","name":"args","children":[],"call":["@expected_arg inspect ","@expected_arg nil? "]}," Rspec Matchers ThrowSymbol expected":{"type":"method","name":"expected","children":[],"call":[" args ","@expected_symbol inspect ","@expected_symbol nil? "]}," Rspec Matchers ThrowSymbol description":{"type":"method","name":"description","children":[],"call":[" expected "]}," Rspec Matchers ThrowSymbol failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected "]}," Rspec Matchers ThrowSymbol failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected ","@caught_symbol inspect "]}," Rspec Matchers ThrowSymbol matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (ivar :@caught_symbol) :==\n  (ivar :@expected_symbol)) & ","@caught_arg == ","@caught_symbol == ","@expected_arg nil? ","@caught_symbol nil? ! ","@caught_symbol nil? ","@expected_symbol nil? ","2 to_sym "," raise ","e message =~ ","e message "," throw ","given_proc call "," catch ","(send\n  (ivar :2 to_sym ) :==\n  (ivar :@expected_symbol)) & ","2 to_sym  == ","2 to_sym  nil? ! ","2 to_sym  nil? "]}," Rspec Matchers ThrowSymbol initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers simple_matcher":{"type":"method","name":"simple_matcher","children":[],"call":["SimpleMatcher  new "]}," Rspec Matchers SimpleMatcher explanation":{"type":"method","name":"explanation","children":[],"call":[]}," Rspec Matchers SimpleMatcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@given inspect ","@description inspect "," explanation ","@description nil? "]}," Rspec Matchers SimpleMatcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@given inspect ","@description inspect "," explanation ","@description nil? "]}," Rspec Matchers SimpleMatcher description":{"type":"method","name":"description","children":[],"call":[" explanation "]}," Rspec Matchers SimpleMatcher matches?":{"type":"method","name":"matches?","children":[],"call":["@match_block call ","@match_block arity "]}," Rspec Matchers SimpleMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers satisfy":{"type":"method","name":"satisfy","children":[],"call":["Matchers Satisfy  new "]}," Rspec Matchers Satisfy failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," Rspec Matchers Satisfy failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[]}," Rspec Matchers Satisfy matches?":{"type":"method","name":"matches?","children":[],"call":["@block call "]}," Rspec Matchers Satisfy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers respond_to":{"type":"method","name":"respond_to","children":[],"call":["Matchers RespondTo  new "]}," Rspec Matchers RespondTo pp_names":{"type":"method","name":"pp_names","children":[],"call":["@names inspect ","@names first ","@names length == ","@names length "]}," Rspec Matchers RespondTo with_arity":{"type":"method","name":"with_arity","children":[],"call":["@expected_arity == ","@expected_arity nil? "]}," Rspec Matchers RespondTo matches_arity?":{"type":"method","name":"matches_arity?","children":[],"call":["@expected_arity == ","actual method arity ","actual method ","@expected_arity nil? "]}," Rspec Matchers RespondTo argument":{"type":"method","name":"argument","children":[],"call":[]}," Rspec Matchers RespondTo with":{"type":"method","name":"with","children":[],"call":[]}," Rspec Matchers RespondTo description":{"type":"method","name":"description","children":[],"call":[" with_arity "," pp_names "]}," Rspec Matchers RespondTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["(send\n  (ivar :@names) :collect) join ","name inspect ","@names collect ","@actual inspect "]}," Rspec Matchers RespondTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" with_arity ","(send\n  (ivar :@names_not_responded_to) :collect) join ","name inspect ","@names_not_responded_to collect ","@actual inspect "]}," Rspec Matchers RespondTo matches?":{"type":"method","name":"matches?","children":[],"call":["@names_not_responded_to empty? ","@names_not_responded_to << "," matches_arity? ","actual respond_to? ","@names each "]}," Rspec Matchers RespondTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers raise_error":{"type":"method","name":"raise_error","children":[],"call":["Matchers RaiseError  new "]}," Rspec Matchers RaiseError negative_expectation?":{"type":"method","name":"negative_expectation?","children":[],"call":["s =~ "," caller first find "," caller first "," caller "]}," Rspec Matchers RaiseError given_error":{"type":"method","name":"given_error","children":[],"call":["@actual_error inspect ","@actual_error nil? "]}," Rspec Matchers RaiseError expected_error":{"type":"method","name":"expected_error","children":[],"call":["@expected_message inspect "]}," Rspec Matchers RaiseError description":{"type":"method","name":"description","children":[],"call":[" expected_error "]}," Rspec Matchers RaiseError failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" given_error "," expected_error "]}," Rspec Matchers RaiseError failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" given_error "," expected_error ","@actual_error message "]}," Rspec Matchers RaiseError verify_message":{"type":"method","name":"verify_message","children":[],"call":["@expected_message == ","@actual_error message ","@expected_message =~ "]}," Rspec Matchers RaiseError eval_block":{"type":"method","name":"eval_block","children":[],"call":["@block [] "]}," Rspec Matchers RaiseError matches?":{"type":"method","name":"matches?","children":[],"call":["@raised_expected_error & "," eval_block "," negative_expectation? "," verify_message ","given_proc call "]}," Rspec Matchers RaiseError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers Pretty _pretty_print":{"type":"method","name":"_pretty_print","children":[],"call":["result << ","item inspect ","index < ","array length - ","array length ","array each_with_index "]}," Rspec Matchers Pretty to_sentence":{"type":"method","name":"to_sentence","children":[],"call":["words [] ","words [] join ","words length ","w inspect ","words map "]}," Rspec Matchers Pretty split_words":{"type":"method","name":"split_words","children":[],"call":["sym to_s gsub ","sym to_s "]}," Rspec Matchers NegativeOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","actual __send__ "]}," Rspec Matchers PositiveOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","actual __send__ "]}," Rspec Matchers OperatorMatcher eval_match":{"type":"method","name":"eval_match","children":[],"call":[" __delegate_operator "," Rspec Matchers  last_matcher= "]}," Rspec Matchers OperatorMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect "]}," Rspec Matchers OperatorMatcher fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["Rspec Expectations  fail_with "]}," Rspec Matchers OperatorMatcher use_custom_matcher_or_delegate":{"type":"method","name":"use_custom_matcher_or_delegate","children":[],"call":[]}," Rspec Matchers OperatorMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers OperatorMatcher get":{"type":"method","name":"get","children":[],"call":[" registry [] [] "," registry [] "," registry "]}," Rspec Matchers OperatorMatcher register":{"type":"method","name":"register","children":[],"call":[" registry [] []= "," registry [] "," registry "]}," Rspec Matchers OperatorMatcher registry":{"type":"method","name":"registry","children":[],"call":[]}," Rspec Matchers method_missing":{"type":"method","name":"method_missing","children":[],"call":["Matchers Has  new ","sym to_s =~ ","sym to_s ","Matchers Be  new ","Matchers BePredicate  new "]}," Rspec Matchers Matcher expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" to_sentence "]}," Rspec Matchers Matcher name_to_sentence":{"type":"method","name":"name_to_sentence","children":[],"call":[" split_words "]}," Rspec Matchers Matcher cache_or_call_cached":{"type":"method","name":"cache_or_call_cached","children":[],"call":["@messages [] call ","@messages [] ","actual nil? ","@messages []= "," call_cached "," cache "]}," Rspec Matchers Matcher making_declared_methods_public":{"type":"method","name":"making_declared_methods_public","children":[],"call":["st __send__ ","(send\n  (send nil :private_methods) :-\n  (lvar :orig_private_methods)) each "," private_methods - "," private_methods ","(send\n  (send nil :private_methods) :-\n  (lvar : private_methods )) each "]}," Rspec Matchers Matcher diffable":{"type":"method","name":"diffable","children":[],"call":[]}," Rspec Matchers Matcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," Rspec Matchers Matcher match":{"type":"method","name":"match","children":[],"call":[]}," Rspec Matchers Matcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" cache_or_call_cached "]}," Rspec Matchers Matcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" cache_or_call_cached "]}," Rspec Matchers Matcher description":{"type":"method","name":"description","children":[],"call":[" cache_or_call_cached "]}," Rspec Matchers Matcher matches?":{"type":"method","name":"matches?","children":[],"call":[" instance_exec "]}," Rspec Matchers Matcher initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_exec "," making_declared_methods_public "," expected_to_sentence "," name_to_sentence ","actual inspect "," lambda "]}," Rspec Matchers MatchArray difference_between_arrays":{"type":"method","name":"difference_between_arrays","children":[],"call":["difference delete_at ","difference index ","array_2 each ","array_1 dup ","array_1 dup  delete_at ","difference difference index  ","array_1 dup  index "]}," Rspec Matchers MatchArray safe_sort":{"type":"method","name":"safe_sort","children":[],"call":["array sort ","item respond_to? ","array all? "]}," Rspec Matchers MatchArray description":{"type":"method","name":"description","children":[],"call":[" _pretty_print "]}," Rspec Matchers MatchArray failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," Rspec Matchers MatchArray failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" safe_sort inspect "," safe_sort ","@extra_items empty? ","@missing_items empty? "]}," Rspec Matchers MatchArray matches?":{"type":"method","name":"matches?","children":[],"call":["@extra_items empty? & ","@missing_items empty? ","@extra_items empty? "," difference_between_arrays "," difference_between_arrays  empty? & "," difference_between_arrays  empty? "]}," Rspec Matchers MatchArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers match":{"type":"method","name":"match","children":[],"call":["actual match "," match ","Matcher  new "]}," Rspec Matchers include":{"type":"method","name":"include","children":[{"type":"method","name":"helper","children":[],"asgn":[],"call":["actual include? ","actual has_key? ","actual [] == ","actual [] ","expected each_pair ","expected is_a? ","actual is_a? ","_expected_ each "]}],"call":["actual include? ","actual has_key? ","actual [] == ","actual [] ","expected each_pair ","expected is_a? ","actual is_a? ","_expected_ each "," helper "," match ","Matcher  new ","expected is_a? ! "," comparing_hash_keys? ","expected all? "," comparing_hash_values? ","_expected all? "]}," Rspec Matchers have_at_most":{"type":"method","name":"have_at_most","children":[],"call":["Matchers Have  new "]}," Rspec Matchers have_at_least":{"type":"method","name":"have_at_least","children":[],"call":["Matchers Have  new "]}," Rspec Matchers have":{"type":"method","name":"have","children":[],"call":["Matchers Have  new "]}," Rspec Matchers Have relative_expectation":{"type":"method","name":"relative_expectation","children":[],"call":[" relativities [] "," relativities "]}," Rspec Matchers Have method_missing":{"type":"method","name":"method_missing","children":[],"call":["inflector pluralize ","sym to_s "]}," Rspec Matchers Have respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@expected respond_to? "]}," Rspec Matchers Have description":{"type":"method","name":"description","children":[],"call":[" relative_expectation "]}," Rspec Matchers Have failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected - ","@relativity == ","@expected + "]}," Rspec Matchers Have failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" relative_expectation "]}," Rspec Matchers Have not_a_collection":{"type":"method","name":"not_a_collection","children":[],"call":[]}," Rspec Matchers Have matches?":{"type":"method","name":"matches?","children":[],"call":["@actual == ","@actual <= ","@relativity == ","@actual >= "," raise "," not_a_collection ","@actual nil? ","collection length ","collection respond_to? ","collection size ","collection_owner __send__ ","collection_owner respond_to? ","collection length  == ","collection size  == ","collection length  <= ","collection size  <= ","collection length  >= ","collection size  >= "," not_a_collection_owner __send__  ","collection length  nil? ","collection size  nil? ","collection_owner __send__  length ","collection_owner __send__  respond_to? ","collection_owner __send__  size ","collection_owner __send__ _owner __send__ ","collection_owner __send__ _owner respond_to? "]}," Rspec Matchers Have relativities":{"type":"method","name":"relativities","children":[],"call":[]}," Rspec Matchers Have initialize":{"type":"method","name":"initialize","children":[],"call":["expected == "]}," Rspec Matchers Has predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","sym to_s sub ","sym to_s "]}," Rspec Matchers Has description":{"type":"method","name":"description","children":[],"call":["@args [] inspect ","@args [] "]}," Rspec Matchers Has failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@args [] inspect ","@args [] "," predicate "]}," Rspec Matchers Has failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@args [] inspect ","@args [] "," predicate "]}," Rspec Matchers Has matches?":{"type":"method","name":"matches?","children":[],"call":["actual __send__ "," predicate "]}," Rspec Matchers Has initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers last_description":{"type":"method","name":"last_description","children":[],"call":[]}," Rspec Matchers generated_description":{"type":"method","name":"generated_description","children":[],"call":[]}," Rspec Matchers clear_generated_description":{"type":"method","name":"clear_generated_description","children":[],"call":[]}," Object instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","InstanceExecHelper  module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," Rspec Matchers exist":{"type":"method","name":"exist","children":[],"call":["actual exist? "," match ","Matcher  new "]}," Rspec Matchers equal":{"type":"method","name":"equal","children":[{"type":"method","name":"inspect_object","children":[],"asgn":[],"call":["o inspect ","o object_id ","o class "]}],"call":[" inspect_object "," failure_message_for_should_not "," failure_message_for_should ","o inspect ","o object_id ","o class ","actual equal? "," match ","Matcher  new "]}," Rspec Matchers eql":{"type":"method","name":"eql","children":[],"call":["_expected_ inspect ","actual inspect "," failure_message_for_should_not "," failure_message_for_should ","actual eql? "," match ","Matcher  new "]}," Rspec Matchers DSL define":{"type":"method","name":"define","children":[],"call":["Rspec Matchers Matcher  new "," define_method "]}," Rspec Matchers change":{"type":"method","name":"change","children":[],"call":["Matchers Change  new "]}," Rspec Matchers Change description":{"type":"method","name":"description","children":[],"call":[]}," Rspec Matchers Change from":{"type":"method","name":"from","children":[],"call":[]}," Rspec Matchers Change to":{"type":"method","name":"to","children":[],"call":[]}," Rspec Matchers Change by_at_most":{"type":"method","name":"by_at_most","children":[],"call":[]}," Rspec Matchers Change by_at_least":{"type":"method","name":"by_at_least","children":[],"call":[]}," Rspec Matchers Change by":{"type":"method","name":"by","children":[],"call":[]}," Rspec Matchers Change failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@after inspect ","@before inspect "]}," Rspec Matchers Change actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@after - "]}," Rspec Matchers Change failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@before inspect "," actual_delta inspect "," actual_delta ","@maximum inspect ","@minimum inspect ","@amount inspect ","@from inspect ","@after inspect ","@to inspect "]}," Rspec Matchers Change evaluate_value_proc":{"type":"method","name":"evaluate_value_proc","children":[],"call":["@value_proc call "]}," Rspec Matchers Change raise_block_syntax_error":{"type":"method","name":"raise_block_syntax_error","children":[],"call":[" raise ","MatcherError  new "]}," Rspec Matchers Change matches?":{"type":"method","name":"matches?","children":[],"call":["@before != ","(send\n  (ivar :@after) :-\n  (ivar :@before)) <= ","@after - ","(send\n  (ivar :@after) :-\n  (ivar :@before)) >= ","@before + == ","@before + ","@to == ","@from == "," evaluate_value_proc ","event_proc call "," raise_block_syntax_error "," block_given? "," evaluate_value_proc  != ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) <= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) <= "," evaluate_value_proc  - ","(send\n  (ivar : evaluate_value_proc ) :-\n  (ivar :@before)) >= ","(send\n  (ivar :@after) :-\n  (ivar : evaluate_value_proc )) >= "," evaluate_value_proc  + == "," evaluate_value_proc  + "]}," Rspec Matchers Change initialize":{"type":"method","name":"initialize","children":[],"call":["receiver __send__ "," lambda "]}," Rspec Matchers be_a_kind_of":{"type":"method","name":"be_a_kind_of","children":[],"call":["actual kind_of? "," match ","Matcher  new "]}," Rspec Matchers be_an_instance_of":{"type":"method","name":"be_an_instance_of","children":[],"call":["actual instance_of? "," match ","Matcher  new "]}," Rspec Matchers be_close":{"type":"method","name":"be_close","children":[],"call":[" description "," failure_message_for_should_not "," failure_message_for_should ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs < ","(send\n  (lvar :actual) :-\n  (lvar :_expected_)) abs ","actual - "," match ","Matcher  new "]}," Rspec Matchers be_a":{"type":"method","name":"be_a","children":[],"call":[" be_a_kind_of "]}," Rspec Matchers be":{"type":"method","name":"be","children":[],"call":["Matchers Be  new ","Matchers BeSameAs  new ","args empty? "]}," Rspec Matchers Be args_to_sentence":{"type":"method","name":"args_to_sentence","children":[],"call":[" to_sentence "]}," Rspec Matchers Be prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words "," prefix "]}," Rspec Matchers Be expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" split_words "," expected "]}," Rspec Matchers Be comparison":{"type":"method","name":"comparison","children":[],"call":["@comparison_method to_s ","@comparison_method nil? "]}," Rspec Matchers Be inspected_args":{"type":"method","name":"inspected_args","children":[],"call":["a inspect ","@args collect "]}," Rspec Matchers Be parenthesize":{"type":"method","name":"parenthesize","children":[],"call":[]}," Rspec Matchers Be args_to_s":{"type":"method","name":"args_to_s","children":[],"call":[" parenthesize "," inspected_args join "," inspected_args ","@args empty? "]}," Rspec Matchers Be present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (send\n    (ivar :@expected) :to_s)) to_sym ","@expected to_s "]}," Rspec Matchers Be predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (ivar :@expected) :to_s)) to_sym ","@expected to_s "]}," Rspec Matchers Be handling_predicate?":{"type":"method","name":"handling_predicate?","children":[],"call":["(true) include? "," expected "]}," Rspec Matchers Be handling_predicate!":{"type":"method","name":"handling_predicate!","children":[],"call":[]}," Rspec Matchers Be prefix":{"type":"method","name":"prefix","children":[],"call":[]}," Rspec Matchers Be set_prefix":{"type":"method","name":"set_prefix","children":[],"call":[]}," Rspec Matchers Be parse_expected":{"type":"method","name":"parse_expected","children":[],"call":["expected to_sym ","val to_s == ","val to_s ","(true) each ","expected to_s sub ","expected to_s "," set_prefix ","expected to_s =~ "," handling_predicate! ","(str \"be_an_\") each ","expected to_s sub  to_sym ","expected to_s sub  to_s sub ","expected to_s sub  to_s ","expected to_s sub  to_s =~ "]}," Rspec Matchers Be set_expected":{"type":"method","name":"set_expected","children":[],"call":[" parse_expected ","Symbol  === "]}," Rspec Matchers Be compare_to":{"type":"method","name":"compare_to","children":[],"call":["opts [] "]}," Rspec Matchers Be expected":{"type":"method","name":"expected","children":[],"call":[]}," Rspec Matchers Be comparison_method":{"type":"method","name":"comparison_method","children":[],"call":[]}," Rspec Matchers Be match_or_compare":{"type":"method","name":"match_or_compare","children":[],"call":["@actual __send__ "," comparison_method ","TrueClass  === "]}," Rspec Matchers Be description":{"type":"method","name":"description","children":[],"call":["(begin\n  (send nil :prefix_to_sentence)) gsub "," args_to_sentence "," expected_to_sentence "," comparison "," prefix_to_sentence "]}," Rspec Matchers Be failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "," expected ","@result inspect "," args_to_s "," predicate "," predicate == "," handling_predicate? ","@actual inspect "]}," Rspec Matchers Be failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["(str \"expected \") gsub ","@actual inspect "," expected ","@result inspect "," args_to_s "," predicate "," predicate == "," handling_predicate? "]}," Rspec Matchers Be run_predicate_on":{"type":"method","name":"run_predicate_on","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "]}," Rspec Matchers Be matches?":{"type":"method","name":"matches?","children":[],"call":[" match_or_compare "," run_predicate_on "," handling_predicate? ","@actual ! ! ","@actual ! "]}," Rspec Matchers Be initialize":{"type":"method","name":"initialize","children":[],"call":[" set_expected ","args shift ","args empty? "]}," Rspec Expectations NegativeExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," Rspec Expectations PositiveExpectationHandler handle_matcher":{"type":"method","name":"handle_matcher","children":[],"call":[]}," Rspec Expectations fail_with":{"type":"method","name":"fail_with","children":[],"call":["Kernel  raise ","Rspec Expectations ExpectationNotMetError  new ","message << << "," differ diff_as_object "," differ ","message << ","target is_a? ! ","target is_a? "," differ diff_as_string ","target to_s ","expected is_a? ","target nil? ","expected nil? "," differ nil? ","message [] "," Rspec Core  warn ","(send\n  (const nil :Array) :===\n  (lvar :message)) & ","message length == ","message length ","Array  === "," raise ","Failure message is nil. Does your matcher define the  + ","message nil? "]}," Rspec Expectations Differs Default context_lines":{"type":"method","name":"context_lines","children":[],"call":["@options context_lines "]}," Rspec Expectations Differs Default format":{"type":"method","name":"format","children":[],"call":["@options diff_format "]}," Rspec Expectations Differs Default diff_as_object":{"type":"method","name":"diff_as_object","children":[],"call":[" diff_as_string ","PP  pp "]}," Rspec Expectations Differs Default diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":["output << << ","output << ","oldhunk diff "," format ","hunk unshift ","hunk overlaps? "," context_lines > "," context_lines ","hunk file_length_difference ","Diff LCS Hunk  new ","diffs each ","diffs empty? ","Diff LCS  diff ","e chomp ","data_new split map! ","data_new split ","data_old split map! ","data_old split ","oldDiff LCS Hunk  new  diff ","Diff LCS Hunk  new  unshift ","Diff LCS Hunk  new  overlaps? ","hunk hunk file_length_difference  ","Diff LCS Hunk  new  file_length_difference ","Diff LCS  diff  each ","Diff LCS  diff  empty? "]}," Rspec Expectations Differs Default initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Matchers Matcher call_cached":{"type":"method","name":"call_cached","children":[],"call":["@messages [] call ","@messages [] ","@messages [] arity == ","@messages [] arity "]}," Rspec Matchers Matcher cache":{"type":"method","name":"cache","children":[],"call":["@messages []= "]}," Rspec Matchers Matcher chain":{"type":"method","name":"chain","children":[],"call":["block call "," define_method "," class class_eval "," class "]}," Rspec Matchers Matcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[" match "]}," Rspec Matchers InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," Rspec Matchers eq":{"type":"method","name":"eq","children":[],"call":[" description ","_expected_ inspect ","actual inspect "," failure_message_for_should_not "," failure_message_for_should ","actual == "," match ","Matcher  new "]}," Rspec Matchers BeSameAs description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," Rspec Matchers BeSameAs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," Rspec Matchers BeSameAs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Rspec Matchers BeSameAs matches?":{"type":"method","name":"matches?","children":[],"call":["@actual equal? "]}," Rspec Matchers BeSameAs initialize":{"type":"method","name":"initialize","children":[],"call":["args shift "]}," Rspec Matchers BePredicate prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words "]}," Rspec Matchers BePredicate prefix_and_expected":{"type":"method","name":"prefix_and_expected","children":[],"call":["symbol to_s =~ ","symbol to_s "]}," Rspec Matchers BePredicate parse_expected":{"type":"method","name":"parse_expected","children":[],"call":[" prefix_and_expected "]}," Rspec Matchers BePredicate present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," Rspec Matchers BePredicate predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "]}," Rspec Matchers BePredicate description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "," prefix_to_sentence "]}," Rspec Matchers BePredicate failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," Rspec Matchers BePredicate failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," Rspec Matchers BePredicate matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "]}," Rspec Matchers BePredicate initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_expected ","args shift "]}," Rspec Matchers BeComparedTo description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," Rspec Matchers BeComparedTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "]}," Rspec Matchers BeComparedTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," Rspec Matchers BeComparedTo matches?":{"type":"method","name":"matches?","children":[],"call":["@actual __send__ "]}," Rspec Matchers BeComparedTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Core ExampleGroup expect":{"type":"method","name":"expect","children":[],"call":["block extend "]}," RSpec Matchers BeSameAs description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," RSpec Matchers BeSameAs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," RSpec Matchers BeSameAs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," RSpec Matchers BeSameAs matches?":{"type":"method","name":"matches?","children":[],"call":["@actual equal? "]}," RSpec Matchers BeSameAs initialize":{"type":"method","name":"initialize","children":[],"call":["args shift "]}," Rspec Matchers Matcher instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" eval ","block binding "," running_example "]}," Rspec Matchers Matcher method_missing":{"type":"method","name":"method_missing","children":[],"call":["$matcher_execution_context send ","$matcher_execution_context respond_to? "]}," RSpec warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" send "," warn "]}," RSpec deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn_deprecation ","message << "," caller [] "," caller "]}," RSpec Matchers ThrowSymbol throw_description":{"type":"method","name":"throw_description","children":[],"call":["symbol_description + ","@caught_symbol == ","arg inspect ","symbol inspect ","symbol is_a? ","symbol inspect  + "]}," RSpec Matchers ThrowSymbol caught":{"type":"method","name":"caught","children":[],"call":[" throw_description "]}," RSpec Matchers expect":{"type":"method","name":"expect","children":[],"call":["block extend "]}," RSpec Matchers be_within":{"type":"method","name":"be_within","children":[],"call":[" description "," failure_message_for_should_not "," failure_message_for_should ","(send\n  (lvar :actual) :-\n  (ivar :@_expected)) abs < ","(send\n  (lvar :actual) :-\n  (ivar :@_expected)) abs ","actual - "," raise ","ArgumentError  new "," match "," chain ","Matcher  new ","BuiltIn BeWithin  new ","BeWithin  new "]}," RSpec Matchers yield_successive_args":{"type":"method","name":"yield_successive_args","children":[],"call":["BuiltIn YieldSuccessiveArgs  new "]}," RSpec Matchers yield_with_args":{"type":"method","name":"yield_with_args","children":[],"call":["BuiltIn YieldWithArgs  new "]}," RSpec Matchers yield_with_no_args":{"type":"method","name":"yield_with_no_args","children":[],"call":["BuiltIn YieldWithNoArgs  new "]}," RSpec Matchers yield_control":{"type":"method","name":"yield_control","children":[],"call":["BuiltIn YieldControl  new "]}," RSpec Matchers start_with":{"type":"method","name":"start_with","children":[],"call":["BuiltIn StartWith  new "]}," RSpec Matchers end_with":{"type":"method","name":"end_with","children":[],"call":["BuiltIn EndWith  new "]}," RSpec Matchers cover":{"type":"method","name":"cover","children":[],"call":["BuiltIn Cover  new ","range cover? "," lambda ","_values none? "," covered_by "," match_for_should_not ","_values all? "," match_for_should ","Matcher  new "," actual cover? "," actual ","_expected_values none? "," cover_value ","_expected_values all? ","Cover  new "]}," RSpec Matchers be_nil":{"type":"method","name":"be_nil","children":[],"call":["BuiltIn BeNil  new ","BeNil  new "]}," RSpec Matchers be_false":{"type":"method","name":"be_false","children":[],"call":["BuiltIn BeFalse  new ","BeFalse  new ","BuiltIn BeFalsey  new ","RSpec  deprecate ","`be_falsey` (for Ruby's conditional semantics) or  + "]}," RSpec Matchers be_true":{"type":"method","name":"be_true","children":[],"call":["BuiltIn BeTrue  new ","BeTrue  new ","BuiltIn BeTruthy  new ","RSpec  deprecate ","`be_truthy` (for Ruby's conditional semantics) or  + "]}," RSpec Matchers Pretty underscore":{"type":"method","name":"underscore","children":[],"call":["word downcase! ","word tr! ","word gsub! ","camel_cased_word to_s dup ","camel_cased_word to_s ","camel_cased_word to_s dup  downcase! ","camel_cased_word to_s dup  tr! ","camel_cased_word to_s dup  gsub! ","camel_cased_camel_cased_word to_s dup  to_s dup ","camel_cased_camel_cased_word to_s dup  to_s "]}," RSpec Matchers Pretty name":{"type":"method","name":"name","children":[],"call":[" underscore "," class name split last "," class name split "," class name "," class "]}," RSpec Matchers Pretty expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" to_sentence ","RSpec  deprecate "," expected "]}," RSpec Matchers Pretty name_to_sentence":{"type":"method","name":"name_to_sentence","children":[],"call":[" split_words "," name "]}," RSpec Matchers BuiltIn NegativeOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","actual __send__ ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn PositiveOperatorMatcher __delegate_operator":{"type":"method","name":"__delegate_operator","children":[],"call":[" fail_with_message ","actual inspect ","operator gsub ","expected inspect ","(str \"==\") include? ","actual __send__ ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers DSL Matcher singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," RSpec Matchers DSL Matcher default_failure_message_for_should_not":{"type":"method","name":"default_failure_message_for_should_not","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "," to_sentence "," expected_as_array "]}," RSpec Matchers DSL Matcher default_failure_message_for_should":{"type":"method","name":"default_failure_message_for_should","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "," to_sentence "," expected_as_array "]}," RSpec Matchers DSL Matcher default_description":{"type":"method","name":"default_description","children":[],"call":[" expected_to_sentence "," name_to_sentence "," to_sentence "," expected_as_array "]}," RSpec Matchers DSL Matcher call_cached":{"type":"method","name":"call_cached","children":[],"call":[" send ","@messages [] call ","@messages [] ","@messages [] arity == ","@messages [] arity ","@messages has_key? "," __send__ "]}," RSpec Matchers DSL Matcher cache":{"type":"method","name":"cache","children":[],"call":["@messages []= "]}," RSpec Matchers DSL Matcher cache_or_call_cached":{"type":"method","name":"cache_or_call_cached","children":[],"call":[" call_cached "," cache "]}," RSpec Matchers DSL Matcher making_declared_methods_public":{"type":"method","name":"making_declared_methods_public","children":[],"call":[" singleton_class __send__ "," singleton_class ","(send\n  (send nil :private_methods) :-\n  (lvar :orig_private_methods)) each "," private_methods - "," private_methods ","(send\n  (send nil :private_methods) :-\n  (lvar : private_methods )) each "]}," RSpec Matchers DSL Matcher define_method":{"type":"method","name":"define_method","children":[],"call":[" singleton_class __send__ "," singleton_class "]}," RSpec Matchers DSL Matcher include":{"type":"method","name":"include","children":[],"call":[" singleton_class __send__ "," singleton_class "," add_deprecation_warning_to ","mod name ","mod instance_methods each ","mod instance_methods ","modules each "]}," RSpec Matchers DSL Matcher method_missing":{"type":"method","name":"method_missing","children":[],"call":[" matcher_execution_context send "," matcher_execution_context "," matcher_execution_context respond_to? "," matcher_execution_context __send__ ","$matcher_execution_context send ","$matcher_execution_context respond_to? ","@matcher_execution_context send ","@matcher_execution_context respond_to? ","@matcher_execution_context __send__ "]}," RSpec Matchers DSL Matcher respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" matcher_execution_context respond_to? "," matcher_execution_context ","$matcher_execution_context respond_to? ","@matcher_execution_context respond_to? "]}," RSpec Matchers DSL Matcher does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" matches? ! "," matches? "," instance_eval_with_args "]}," RSpec Matchers DSL Matcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers DSL Matcher chain":{"type":"method","name":"chain","children":[],"call":["block call "," define_method "]}," RSpec Matchers DSL Matcher diffable":{"type":"method","name":"diffable","children":[],"call":[]}," RSpec Matchers DSL Matcher description":{"type":"method","name":"description","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers DSL Matcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers DSL Matcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" cache_or_call_cached "]}," RSpec Matchers DSL Matcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[" match "]}," RSpec Matchers DSL Matcher match_for_should_not":{"type":"method","name":"match_for_should_not","children":[],"call":[]}," RSpec Matchers DSL Matcher match":{"type":"method","name":"match","children":[],"call":[]}," RSpec Matchers DSL Matcher matches?":{"type":"method","name":"matches?","children":[],"call":[" instance_eval_with_args "]}," RSpec Matchers DSL Matcher for_expected":{"type":"method","name":"for_expected","children":[],"call":[" instance_eval_with_args "," making_declared_methods_public "," instance_variable_set ","(send\n  (const nil :PERSISTENT_INSTANCE_VARIABLES) :+\n  (array\n    (sym :@expected))) include? ","PERSISTENT_INSTANCE_VARIABLES  + ","(send\n  (send nil :instance_variables) :map) each ","ivar intern "," instance_variables map "," instance_variables "," dup instance_eval "," dup ","(send\n  (const nil :PERSISENT_INSTANCE_VARIABLES) :+\n  (array\n    (sym :@expected))) include? ","PERSISENT_INSTANCE_VARIABLES  + ","DifferentiateBlockMethodTypes  new ","Set  new "]}," RSpec Matchers DSL Matcher initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","(self) class_exec "," include ","Module  new ","RSpec Support WithKeywordsWhenNeeded  class_exec "]}," RSpec Matchers Extensions InstanceEvalWithArgs instance_eval_with_args":{"type":"method","name":"instance_eval_with_args","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "," instance_eval ","args empty? ","block arity < ","block arity "," instance_exec "," __send__ "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs args_match?":{"type":"method","name":"args_match?","children":[],"call":["actual == ","expected === ","@expected zip all? ","@expected zip ","@expected size != ","@actual size ","@expected size "," values_match? "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs description":{"type":"method","name":"description","children":[],"call":["desc << ","( + + ","( + ","(send\n  (ivar :@expected) :map) join ","e inspect ","@expected map "," expected_arg_description "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["expected given block not to yield successively with arguments, but yielded with expected arguments + + ","@actual inspect ","expected given block not to yield successively with arguments, but yielded with expected arguments + ","@expected inspect "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["expected given block to yield successively with arguments, but yielded with unexpected arguments + + ","@actual inspect ","expected given block to yield successively with arguments, but yielded with unexpected arguments + ","@expected inspect "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs matches?":{"type":"method","name":"matches?","children":[],"call":[" args_match? ","@probe successive_yield_args ","YieldProbe  probe ","@probe has_block? ","yield_count == ","@expected length "," values_match? ","@expected [] ","@actual << ","@actual_formatted << ","RSpec Support ObjectFormatter  format ","arg_array first ","arg_array size == ","arg_array size ","YieldProbe  probe  successive_yield_args ","YieldProbe  probe  has_block? ","@probe successive_yield_args  << ","@probe successive_yield_args _formatted << "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithArgs all_args_match?":{"type":"method","name":"all_args_match?","children":[],"call":["actual == ","expected === ","@expected zip all? ","@expected zip ","@expected size != ","@actual size ","@expected size "," values_match? "]}," RSpec Matchers BuiltIn YieldWithArgs args_match?":{"type":"method","name":"args_match?","children":[],"call":["yielded with unexpected arguments + + ","@actual inspect ","yielded with unexpected arguments + ","@expected inspect "," all_args_match? ","@actual any? ","@actual none? ","@expected none? ","@actual empty? ! ","@actual empty? ","@expected empty? "," surface_descriptions_in inspect "," surface_descriptions_in ","(str \"yielded with unexpected arguments\") + "," actual_formatted "," all_args_ all_args_match? ? "]}," RSpec Matchers BuiltIn YieldWithArgs negative_failure_reason":{"type":"method","name":"negative_failure_reason","children":[],"call":["yielded with expected arguments + + ","@actual inspect ","yielded with expected arguments + ","@expected inspect "," all_args_match? "," surface_descriptions_in inspect "," surface_descriptions_in ","@probe has_block? ! ","@probe has_block? ","(str \"yielded with expected arguments\") + ","@expected empty? ! ","@expected empty? "," actual_formatted "]}," RSpec Matchers BuiltIn YieldWithArgs positive_failure_reason":{"type":"method","name":"positive_failure_reason","children":[],"call":["@probe num_yields zero? ","@probe num_yields ","@probe has_block? "]}," RSpec Matchers BuiltIn YieldWithArgs description":{"type":"method","name":"description","children":[],"call":["desc << ","( + + ","( + ","(send\n  (ivar :@expected) :map) join ","e inspect ","@expected map ","@expected any? ","@expected empty? "," expected_arg_description "]}," RSpec Matchers BuiltIn YieldWithArgs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" negative_failure_reason "]}," RSpec Matchers BuiltIn YieldWithArgs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" positive_failure_reason "]}," RSpec Matchers BuiltIn YieldWithArgs matches?":{"type":"method","name":"matches?","children":[],"call":[" args_match? ","@probe yielded_once? ","@probe single_yield_args ","YieldProbe  probe ","@probe has_block? ","@probe probe "," args_currently_match? "," actual_formatted ","YieldProbe  new ","YieldProbe  probe  yielded_once? ","YieldProbe  probe  single_yield_args ","YieldProbe  probe  has_block? ","YieldProbe  probe  probe "]}," RSpec Matchers BuiltIn YieldWithArgs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithNoArgs failure_reason":{"type":"method","name":"failure_reason","children":[],"call":["@probe single_yield_args inspect ","@probe single_yield_args ","@probe num_yields zero? ","@probe num_yields "]}," RSpec Matchers BuiltIn YieldWithNoArgs failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithNoArgs failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" failure_reason "]}," RSpec Matchers BuiltIn YieldWithNoArgs matches?":{"type":"method","name":"matches?","children":[],"call":["@probe single_yield_args none? ","@probe single_yield_args ","@probe yielded_once? ","YieldProbe  probe ","@probe single_yield_args empty? ","@probe has_block? ","YieldProbe  probe  single_yield_args none? ","YieldProbe  probe  single_yield_args ","YieldProbe  probe  yielded_once? ","YieldProbe  probe  single_yield_args empty? ","YieldProbe  probe  has_block? "]}," RSpec Matchers BuiltIn YieldControl failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["failure_message << "," relativity_failure_message ","expected given block not to yield control tap "]}," RSpec Matchers BuiltIn YieldControl failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["failure_message << "," relativity_failure_message ","expected given block to yield control tap "]}," RSpec Matchers BuiltIn YieldControl matches?":{"type":"method","name":"matches?","children":[],"call":["probe yielded_once? ","YieldProbe  probe ","probe num_yields send ","probe num_yields ","@probe yielded_once? ","@probe num_yields __send__ ","@probe num_yields ","@probe has_block? "," expected_count_matches? ","@probe num_yields > ","YieldProbe  probe  yielded_once? ","YieldProbe  YieldProbe  probe  ","YieldProbe  probe  num_yields send ","YieldProbe  probe  num_yields ","@YieldProbe  probe  yielded_once? ","@YieldProbe  probe  num_yields __send__ ","YieldProbe  probe  num_yields __send__ ","@YieldProbe  probe  num_yields ","@YieldProbe  probe  has_block? ","YieldProbe  probe  has_block? ","@YieldProbe  probe  num_yields > ","YieldProbe  probe  num_yields > "]}," RSpec Matchers BuiltIn YieldProbe assert_valid_expect_block!":{"type":"method","name":"assert_valid_expect_block!","children":[],"call":[" raise ","Your expect block must accept an argument to be used with this  + ","@block arity == ","@block arity ","RSpec Support StrictSignatureVerifier  new valid? ","RSpec Support StrictSignatureVerifier  new ","RSpec Support BlockSignature  new "]}," RSpec Matchers BuiltIn YieldProbe assert_used!":{"type":"method","name":"assert_used!","children":[],"call":[" raise ","You must pass the argument yielded to your expect block on  + + + + ","You must pass the argument yielded to your expect block on  + + + ","You must pass the argument yielded to your expect block on  + + ","You must pass the argument yielded to your expect block on  + "]}," RSpec Matchers BuiltIn YieldProbe successive_yield_args":{"type":"method","name":"successive_yield_args","children":[],"call":["arg_array first ","arg_array size == ","arg_array size "," yielded_args map "," yielded_args "]}," RSpec Matchers BuiltIn YieldProbe yielded_once?":{"type":"method","name":"yielded_once?","children":[],"call":[" raise ","(str \"The \") + + ","(str \"The \") + "," num_yields "]}," RSpec Matchers BuiltIn YieldProbe single_yield_args":{"type":"method","name":"single_yield_args","children":[],"call":[" yielded_args first "," yielded_args "]}," RSpec Matchers BuiltIn YieldProbe to_proc":{"type":"method","name":"to_proc","children":[],"call":["probe yielded_args << ","probe yielded_args ","probe num_yields ","Proc  new ","callback call "]}," RSpec Matchers BuiltIn YieldProbe initialize":{"type":"method","name":"initialize","children":[],"call":[" yielded_args= "," num_yields= ","Proc  new "]}," RSpec Matchers BuiltIn YieldProbe probe":{"type":"method","name":"probe","children":[],"call":[" assert_used! ","@block call "," assert_valid_expect_block! "]}," RSpec Matchers BuiltIn ThrowSymbol throw_description":{"type":"method","name":"throw_description","children":[],"call":["symbol_description + ","@caught_symbol == ","arg inspect ","symbol inspect ","symbol is_a? "," description_of ","symbol inspect  + "," description_of  + "]}," RSpec Matchers BuiltIn ThrowSymbol caught":{"type":"method","name":"caught","children":[],"call":[" throw_description "]}," RSpec Matchers BuiltIn ThrowSymbol expected":{"type":"method","name":"expected","children":[],"call":[" throw_description "]}," RSpec Matchers BuiltIn ThrowSymbol description":{"type":"method","name":"description","children":[],"call":[" expected "]}," RSpec Matchers BuiltIn ThrowSymbol failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" caught "," expected "]}," RSpec Matchers BuiltIn ThrowSymbol failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" caught "," expected "]}," RSpec Matchers BuiltIn ThrowSymbol matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (ivar :@caught_symbol) :==\n  (ivar :@expected_symbol)) & ","@caught_arg == ","@caught_symbol == ","@expected_arg nil? ","@caught_symbol nil? ! ","@caught_symbol nil? ","@expected_symbol nil? "," raise ","2 to_sym ","e message =~ ","e message "," throw ","given_proc call "," catch "," values_match? ","Proc  === ","@caught_symbol ! ! ","@caught_symbol ! ","match_data captures [] to_sym ","match_data captures [] ","match_data captures ","e message match ","(send\n  (ivar :2 to_sym ) :==\n  (ivar :@expected_symbol)) & ","(send\n  (ivar :match_data captures [] to_sym ) :==\n  (ivar :@expected_symbol)) & ","2 to_sym  == ","match_data captures [] to_sym  == ","2 to_sym  nil? ! ","match_data captures [] to_sym  nil? ! ","2 to_sym  nil? ","match_data captures [] to_sym  nil? ","2 to_sym  ! ! ","match_data captures [] to_sym  ! ! ","2 to_sym  ! ","match_data captures [] to_sym  ! ","e message match  captures [] to_sym ","e message match  captures [] ","e message match  captures "]}," RSpec Matchers BuiltIn ThrowSymbol initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn EndWith element_matches?":{"type":"method","name":"element_matches?","children":[],"call":["actual [] == ","actual [] "," values_match? "," actual [] "," actual "," expected "]}," RSpec Matchers BuiltIn EndWith subset_matches?":{"type":"method","name":"subset_matches?","children":[],"call":["actual [] == ","actual [] ","expected length ","expected length -@ "," values_match? "," actual [] "," expected length "," expected "," expected length -@ "," actual "]}," RSpec Matchers BuiltIn StartWith element_matches?":{"type":"method","name":"element_matches?","children":[],"call":["@actual [] == ","@actual [] "," values_match? "," actual [] "," actual "," expected "]}," RSpec Matchers BuiltIn StartWith subset_matches?":{"type":"method","name":"subset_matches?","children":[],"call":["actual [] == ","actual [] ","expected length "," values_match? "," actual [] "," expected length "," expected "," actual "]}," RSpec Matchers BuiltIn StartAndEndWith failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected inspect "," class name split last sub downcase "," class name split last sub "," class name split last "," class name split "," class name "," class ","@actual inspect "]}," RSpec Matchers BuiltIn StartAndEndWith failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@expected inspect "," class name split last sub downcase "," class name split last sub "," class name split last "," class name split "," class name "," class ","@actual inspect "]}," RSpec Matchers BuiltIn StartAndEndWith matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","ArgumentError  new ","actual inspect "," element_matches? "," subset_matches? ","@expected respond_to? ","actual respond_to? "]}," RSpec Matchers BuiltIn StartAndEndWith initialize":{"type":"method","name":"initialize","children":[],"call":["expected first ","expected length == ","expected length "]}," RSpec Matchers BuiltIn Satisfy description":{"type":"method","name":"description","children":[],"call":[" block_representation "]}," RSpec Matchers BuiltIn Satisfy failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers BuiltIn Satisfy failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[]}," RSpec Matchers BuiltIn Satisfy matches?":{"type":"method","name":"matches?","children":[],"call":["@block call "]}," RSpec Matchers BuiltIn Satisfy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo pp_names":{"type":"method","name":"pp_names","children":[],"call":["@names inspect ","@names first ","@names length == ","@names length "," description_of "]}," RSpec Matchers BuiltIn RespondTo with_arity":{"type":"method","name":"with_arity","children":[],"call":["@expected_arity == ","@expected_arity nil? ","str << ","str length == ","str length "," with_keywords_string ","@expected_keywords count > ","@expected_keywords count "," with_arity_string "," dup "," dup  << "," dup  length == "," dup  length "," with_keywords_ dup ing "," with_arity_ dup ing "]}," RSpec Matchers BuiltIn RespondTo matches_arity?":{"type":"method","name":"matches_arity?","children":[],"call":["actual_arity == ","actual_arity ~ <= ","actual_arity ~ ","actual_arity < ","actual method arity ","actual method ","Support MethodSignatureVerifier  new valid? ","Support MethodSignatureVerifier  new ","Array  new ","Support MethodSignature  new ","Support StrictSignatureVerifier  new valid? ","Support StrictSignatureVerifier  new "," raise "," matcher_name ","ArityCheck  new matches? ","ArityCheck  new ","Support  method_handle_for ","Support StrictSignatureVerifier  new with_expectation valid? ","Support StrictSignatureVerifier  new with_expectation ","expectation empty? ","expectation expect_arbitrary_keywords= ","expectation expect_unlimited_arguments= ","expectation keywords= ","expectation min_count= ","expectation max_count= ","@expected_arity max ","@expected_arity min ","@expected_arity is_a? ","Support MethodSignatureExpectation  new "," method_signature_for "," setup_method_signature_expectation ","actual method arity  == ","actual method arity  ~ <= ","actual method arity  ~ ","actual method arity  < ","Support StrictSignatureVerifier  new with_Support MethodSignatureExpectation  new  valid? ","Support StrictSignatureVerifier  new with_ setup_method_signature_expectation  valid? ","Support StrictSignatureVerifier  new with_Support MethodSignatureExpectation  new  ","Support StrictSignatureVerifier  new with_ setup_method_signature_expectation  ","Support MethodSignatureExpectation  new  empty? "," setup_method_signature_expectation  empty? ","Support MethodSignatureExpectation  new  expect_arbitrary_keywords= "," setup_method_signature_expectation  expect_arbitrary_keywords= ","Support MethodSignatureExpectation  new  expect_unlimited_arguments= "," setup_method_signature_expectation  expect_unlimited_arguments= ","Support MethodSignatureExpectation  new  keywords= "," setup_method_signature_expectation  keywords= ","Support MethodSignatureExpectation  new  min_count= "," setup_method_signature_expectation  min_count= ","Support MethodSignatureExpectation  new  max_count= "," setup_method_signature_expectation  max_count= "," method_Support MethodSignature  new _for "," setup_method_Support MethodSignature  new _expectation "," setup_method_signature_Support MethodSignatureExpectation  new  "," setup_method_signature_ setup_method_signature_expectation  "]}," RSpec Matchers BuiltIn RespondTo find_failing_method_names":{"type":"method","name":"find_failing_method_names","children":[],"call":[" matches_arity? ","@actual respond_to? ","@names send ","@names __send__ "]}," RSpec Matchers BuiltIn RespondTo argument":{"type":"method","name":"argument","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo with":{"type":"method","name":"with","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo description":{"type":"method","name":"description","children":[],"call":[" with_arity "," pp_names "]}," RSpec Matchers BuiltIn RespondTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" failure_message_for_should sub "," failure_message_for_should "]}," RSpec Matchers BuiltIn RespondTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" with_arity ","(send\n  (ivar :@failing_method_names) :collect) join ","name inspect ","@failing_method_names collect ","@actual inspect "]}," RSpec Matchers BuiltIn RespondTo does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" find_failing_method_names empty? "," find_failing_method_names "]}," RSpec Matchers BuiltIn RespondTo matches?":{"type":"method","name":"matches?","children":[],"call":[" find_failing_method_names empty? "," find_failing_method_names "]}," RSpec Matchers BuiltIn RespondTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError negative_expectation?":{"type":"method","name":"negative_expectation?","children":[],"call":["s =~ "," caller first find "," caller first "," caller "]}," RSpec Matchers BuiltIn RaiseError given_error":{"type":"method","name":"given_error","children":[],"call":["@actual_error inspect ","@actual_error nil? ","(dstr\n  (str \", got \")\n  (begin\n    (send\n      (ivar :@actual_error) :inspect))\n  (str \" with backtrace:\")) join "," format_backtrace ","@actual_error backtrace ","Proc  === ","(dstr\n  (str \", got \")\n  (begin\n    (send nil :description_of\n      (ivar :@actual_error)))\n  (str \" with backtrace:\")) join "," description_of ","(dstr\n  (str \", got \")\n  (begin\n    (send\n      (ivar :@actual_error) :inspect))\n  (str \" with  format_backtrace :\")) join "," format_ format_backtrace  ","@actual_error  format_backtrace  ","(dstr\n  (str \", got \")\n  (begin\n    (send nil :description_of\n      (ivar :@actual_error)))\n  (str \" with  format_backtrace :\")) join "]}," RSpec Matchers BuiltIn RaiseError expected_error":{"type":"method","name":"expected_error","children":[],"call":["@expected_message inspect ","@expected_error inspect "," description_of ","RSpec Support  is_a_matcher? "]}," RSpec Matchers BuiltIn RaiseError description":{"type":"method","name":"description","children":[],"call":[" expected_error "]}," RSpec Matchers BuiltIn RaiseError failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" given_error "," expected_error "]}," RSpec Matchers BuiltIn RaiseError failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" given_error "," expected_error ","@actual_error message "]}," RSpec Matchers BuiltIn RaiseError verify_message":{"type":"method","name":"verify_message","children":[],"call":["@expected_message == ","@actual_error message ","@expected_message =~ "," values_match? ","@expected_message nil? ","@actual_error message to_s "," actual_error_message to_s "," actual_error_message "]}," RSpec Matchers BuiltIn RaiseError eval_block":{"type":"method","name":"eval_block","children":[],"call":["@block [] "]}," RSpec Matchers BuiltIn RaiseError matches?":{"type":"method","name":"matches?","children":[],"call":["@raised_expected_error & "," eval_block "," negative_expectation? "," verify_message ","given_proc call ","@expected_error === ","@actual_error == "," Kernel  warn ","given_proc inspect ","given_proc respond_to? ","RSpec  deprecate "," expecting_specific_exception? "," expectation_matched? "," values_match? ","Proc  === "," ready_to_eval_block? "," warn_about_nil_error! "," warn_about_nil_error? "," warn_about_bare_error! "," warn_about_bare_error? ","@actual_error message "," actual_error_message ","negative_expectation ! "," warn_about_bare_error "," warning_about_bare_error "]}," RSpec Matchers BuiltIn RaiseError initialize":{"type":"method","name":"initialize","children":[],"call":["expected_error_or_message nil? ","UndefinedValue  === "," warn_about_potential_false_positives? "]}," RSpec Matchers BuiltIn MatchArray difference_between_arrays":{"type":"method","name":"difference_between_arrays","children":[],"call":["difference delete_at ","difference index ","array_2 each ","array_1 dup ","array_2 to_ary each ","array_2 to_ary ","array_1 to_ary dup ","array_1 to_ary ","array_1 dup  delete_at ","array_1 to_ary dup  delete_at ","difference difference index  ","array_1 dup  index ","array_1 to_ary dup  index "]}," RSpec Matchers BuiltIn MatchArray safe_sort":{"type":"method","name":"safe_sort","children":[],"call":["array sort "]}," RSpec Matchers BuiltIn MatchArray description":{"type":"method","name":"description","children":[],"call":[" _pretty_print "," expected "," to_sentence "]}," RSpec Matchers BuiltIn MatchArray failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers BuiltIn MatchArray failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" safe_sort inspect "," safe_sort ","@extra_items empty? ","@missing_items empty? "," actual "," expected "," actual inspect "," actual respond_to? "]}," RSpec Matchers BuiltIn MatchArray matches?":{"type":"method","name":"matches?","children":[],"call":["@extra_items empty? & ","@missing_items empty? ","@extra_items empty? "," difference_between_arrays "," difference_between_arrays  empty? & "," difference_between_arrays  empty? "]}," RSpec Matchers BuiltIn MatchArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Match matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) match "," expected "]}," RSpec Matchers BuiltIn Include comparing_hash_values?":{"type":"method","name":"comparing_hash_values?","children":[],"call":["expected is_a? ","actual is_a? "]}," RSpec Matchers BuiltIn Include comparing_hash_keys?":{"type":"method","name":"comparing_hash_keys?","children":[],"call":["expected is_a? ! ","expected is_a? ","actual is_a? ","expected_item is_a? ! ","expected_item is_a? "," actual is_a? "," actual "]}," RSpec Matchers BuiltIn Include perform_match":{"type":"method","name":"perform_match","children":[],"call":["actuals include? ","actuals has_key? "," comparing_hash_keys? ","actuals [] == ","actuals [] ","expected send "," comparing_hash_values? ","expecteds send ","expected matches? "," actual any? "," actual "," comparing_with_matcher? ","expected __send__ ","expecteds __send__ "," actual_collection_includes? "," actual_hash_has_key? "," actual_hash_includes? ","expected_item __send__ "," comparing_hash_to_a_subset? "," expected __send__ "," expected "," actual respond_to? ","@divergent_items empty? "," excluded_from_actual ","actual respond_to? "," excluded_from_actual  empty? "]}," RSpec Matchers BuiltIn Include diffable?":{"type":"method","name":"diffable?","children":[],"call":[" is_a_matcher? ","@expected none? ","RSpec Matchers  is_a_matcher? "," diff_would_wrongly_highlight_matched_item? ! "," diff_would_wrongly_highlight_matched_item? "]}," RSpec Matchers BuiltIn Include description":{"type":"method","name":"description","children":[],"call":[" expected_to_sentence "," to_sentence "," expected "," improve_hash_formatting "," surface_descriptions_in "," count_expectation_description "," readable_list_of "," expecteds "]}," RSpec Matchers BuiltIn Include does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" perform_match "," expected ","v ! "," expected_count_matches? ! "," expected_count_matches? "," count_inclusions "," check_expected_count? "," check_actual? ","actual to_hash ","actual respond_to? "," convert_to_hash? "," check_actual to_hash ? ","actual to_hash  to_hash ","actual to_hash  respond_to? "]}," RSpec Matchers BuiltIn Include matches?":{"type":"method","name":"matches?","children":[],"call":[" perform_match "," expected "," expected_count_matches? "," count_inclusions "," check_expected_count? "," check_actual? ","actual to_hash ","actual respond_to? "," convert_to_hash? "," check_actual to_hash ? ","actual to_hash  to_hash ","actual to_hash  respond_to? "]}," RSpec Matchers BuiltIn Include initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Have relative_expectation":{"type":"method","name":"relative_expectation","children":[],"call":[" relativities [] "," relativities "]}," RSpec Matchers BuiltIn Have method_missing":{"type":"method","name":"method_missing","children":[],"call":["inflector pluralize ","method to_s ","ActiveSupport Inflector  respond_to? "]}," RSpec Matchers BuiltIn Have respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@expected respond_to? "]}," RSpec Matchers BuiltIn Have description":{"type":"method","name":"description","children":[],"call":[" relative_expectation "]}," RSpec Matchers BuiltIn Have failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@expected - ","@relativity == ","@expected + ","Expectations Syntax  positive_expression ","Expectations Syntax  negative_expression "]}," RSpec Matchers BuiltIn Have failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" relative_expectation "]}," RSpec Matchers BuiltIn Have not_a_collection":{"type":"method","name":"not_a_collection","children":[],"call":[]}," RSpec Matchers BuiltIn Have determine_query_method":{"type":"method","name":"determine_query_method","children":[],"call":["collection respond_to? ","(sym :size) detect ","QUERY_METHODS  detect "]}," RSpec Matchers BuiltIn Have determine_collection":{"type":"method","name":"determine_collection","children":[],"call":["collection_or_owner send "," determine_query_method ","collection_or_owner respond_to? ","collection_or_owner __send__ "]}," RSpec Matchers BuiltIn Have matches?":{"type":"method","name":"matches?","children":[],"call":["@actual == ","@actual <= ","@actual >= ","collection send "," raise "," not_a_collection "," determine_query_method "," determine_collection ","collection __send__ ","@actual nil? ","collection respond_to? "," enumerator_class "," print_deprecation_message ","collection send  == ","collection __send__  == ","collection send  <= ","collection __send__  <= ","collection send  >= ","collection __send__  >= "," determine_collection  send "," not_a_ determine_collection  "," determine_ determine_query_method  "," determine_ determine_collection  "," determine_collection  __send__ ","collection send  nil? ","collection __send__  nil? "," determine_collection  respond_to? "]}," RSpec Matchers BuiltIn Have relativities":{"type":"method","name":"relativities","children":[],"call":[]}," RSpec Matchers BuiltIn Have initialize":{"type":"method","name":"initialize","children":[],"call":["expected to_i "]}," RSpec Matchers BuiltIn Has failure_message_args_description":{"type":"method","name":"failure_message_args_description","children":[],"call":[" args_description "," args_ args_description ription "]}," RSpec Matchers BuiltIn Has args_description":{"type":"method","name":"args_description","children":[],"call":["(send\n  (ivar :@args) :map) join ","arg inspect ","@args map ","@args empty? ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn Has method_description":{"type":"method","name":"method_description","children":[],"call":["method to_s gsub ","method to_s ","@method_name to_s gsub ","@method_name to_s ","@method_name to_s tr "]}," RSpec Matchers BuiltIn Has predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (send\n    (send\n      (lvar :sym) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","sym to_s sub ","sym to_s ","(begin\n  (send\n    (send\n      (ivar :@expected) :to_s) :sub\n    (str \"have_\")\n    (str \"has_\"))) to_sym ","@expected to_s sub ","@expected to_s ","@method_name to_s match captures first ","@method_name to_s match captures ","@method_name to_s match ","@method_name to_s ","Matchers HAS_REGEX  match captures first ","Matchers HAS_REGEX  match captures ","Matchers HAS_REGEX  match "," root "]}," RSpec Matchers BuiltIn Has description":{"type":"method","name":"description","children":[],"call":["(send nil :method_description\n  (ivar :@expected)) compact join ","(send nil :method_description\n  (ivar :@expected)) compact "," args_description "," method_description ","(send nil :method_description) compact join ","(send nil :method_description) compact "]}," RSpec Matchers BuiltIn Has failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" failure_message_args_description "," predicate "]}," RSpec Matchers BuiltIn Has failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" failure_message_args_description "," predicate "]}," RSpec Matchers BuiltIn Has matches?":{"type":"method","name":"matches?","children":[],"call":["actual __send__ "," predicate "," check_respond_to ","RSpec  deprecate "," predicate inspect "," is_private_on? "," predicate_matches? "," predicate_accessible? "]}," RSpec Matchers BuiltIn Has initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Exist matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","#exist? and #exists? returned different values:\n\n + + ","existance_values last ","#exist? and #exists? returned different values:\n\n + ","existance_values first ","NoMethodError  new ","actual inspect ","uniq_truthy_values size ","(send\n  (lvar :existance_values) :map) uniq ","v ! ! ","v ! ","existance_values map ","actual send "," expected ","predicates map ","actual respond_to? ","(sym :exist?) select ","existence_values last ","existence_values first ","@actual inspect ","(send\n  (lvar :existence_values) :map) uniq ","existence_values map ","@actual send ","@actual respond_to? ","@actual __send__ ","@test actual_exists? ","@test valid_test? ","ExistenceTest  new ","(send\n  (lvar :existance_values) :map) uniq  size ","(send\n  (lvar :existence_values) :map) uniq  size ","ExistenceTest  new  actual_exists? ","ExistenceTest  new  valid_test? "]}," RSpec Matchers BuiltIn Exist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Equal inspect_object":{"type":"method","name":"inspect_object","children":[],"call":["o inspect ","o object_id ","o class ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn Equal diffable?":{"type":"method","name":"diffable?","children":[],"call":[" expected_is_a_literal_singleton? ! "," expected_is_a_literal_singleton? "]}," RSpec Matchers BuiltIn Equal failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" inspect_object "," expected "," actual "]}," RSpec Matchers BuiltIn Equal failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" inspect_object "," actual "," expected "," eq_expression "]}," RSpec Matchers BuiltIn Equal matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) equal? "," expected "]}," RSpec Matchers BuiltIn Eql diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers BuiltIn Eql failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers BuiltIn Eql failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers BuiltIn Eql matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) eql? "," expected "]}," RSpec Matchers BuiltIn Eq diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers BuiltIn Eq failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers BuiltIn Eq failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers BuiltIn Eq matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) == "," expected "]}," RSpec Matchers BuiltIn Cover does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["range cover? "," expected none? "," expected "]}," RSpec Matchers BuiltIn Cover matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :range) cover? "," expected all? "," expected ","range cover? ","@expected all? "]}," RSpec Matchers BuiltIn Cover initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Change expected_matches_actual?":{"type":"method","name":"expected_matches_actual?","children":[],"call":["expected === ","actual == "]}," RSpec Matchers BuiltIn Change matches_max?":{"type":"method","name":"matches_max?","children":[],"call":["@actual_after - <= ","@actual_after - "]}," RSpec Matchers BuiltIn Change matches_min?":{"type":"method","name":"matches_min?","children":[],"call":["@actual_after - >= ","@actual_after - "]}," RSpec Matchers BuiltIn Change matches_expected_delta?":{"type":"method","name":"matches_expected_delta?","children":[],"call":["@actual_before + == ","@actual_before + "]}," RSpec Matchers BuiltIn Change matches_after?":{"type":"method","name":"matches_after?","children":[],"call":[" expected_matches_actual? "]}," RSpec Matchers BuiltIn Change matches_before?":{"type":"method","name":"matches_before?","children":[],"call":[" expected_matches_actual? "]}," RSpec Matchers BuiltIn Change changed?":{"type":"method","name":"changed?","children":[],"call":["@actual_before != "]}," RSpec Matchers BuiltIn Change change_expected?":{"type":"method","name":"change_expected?","children":[],"call":["@expected_delta != "]}," RSpec Matchers BuiltIn Change message":{"type":"method","name":"message","children":[],"call":[]}," RSpec Matchers BuiltIn Change description":{"type":"method","name":"description","children":[],"call":[" message ","@change_details message "," change_details value_representation "," change_details "]}," RSpec Matchers BuiltIn Change from":{"type":"method","name":"from","children":[],"call":["ChangeFromValue  new "," change_details "]}," RSpec Matchers BuiltIn Change to":{"type":"method","name":"to","children":[],"call":["ChangeToValue  new "," change_details "]}," RSpec Matchers BuiltIn Change by_at_most":{"type":"method","name":"by_at_most","children":[],"call":["actual_delta <= ","ChangeRelatively  new "," change_details "]}," RSpec Matchers BuiltIn Change by_at_least":{"type":"method","name":"by_at_least","children":[],"call":["actual_delta >= ","ChangeRelatively  new "," change_details "]}," RSpec Matchers BuiltIn Change by":{"type":"method","name":"by","children":[],"call":[" values_match? ","ChangeRelatively  new "," change_details "]}," RSpec Matchers BuiltIn Change failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual_after inspect ","@actual_before inspect "," message "]}," RSpec Matchers BuiltIn Change actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@actual_after - "]}," RSpec Matchers BuiltIn Change failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual_before inspect "," message "," actual_delta inspect "," actual_delta ","@maximum inspect ","@minimum inspect ","@expected_delta inspect ","@actual_after inspect ","@expected_after inspect "," expected_matches_actual? ! "," expected_matches_actual? ","@expected_before inspect "," failure_message_for_expected_after "]}," RSpec Matchers BuiltIn Change evaluate_value_proc":{"type":"method","name":"evaluate_value_proc","children":[],"call":["val dup ","@value_proc call ","@value_proc call  dup ","@@value_proc call ue_proc call "]}," RSpec Matchers BuiltIn Change raise_block_syntax_error":{"type":"method","name":"raise_block_syntax_error","children":[],"call":[" raise ","SyntaxError  new "]}," RSpec Matchers BuiltIn Change matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_max? "," matches_min? "," matches_expected_delta? "," matches_after? "," matches_before? "," changed? "," change_expected? ! "," change_expected? "," evaluate_value_proc ","event_proc call "," raise_block_syntax_error "," block_given? ","@change_details changed? ","@change_details perform_change ","Proc  === "," change_details changed? "," change_details "," perform_change "," change_details perform_change "]}," RSpec Matchers BuiltIn Change initialize":{"type":"method","name":"initialize","children":[],"call":["receiver __send__ "," lambda ","ChangeDetails  new "]}," RSpec Matchers BuiltIn BeWithin description":{"type":"method","name":"description","children":[],"call":[" expected "," delta "," expected_formatted "]}," RSpec Matchers BuiltIn BeWithin failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" description "," actual "]}," RSpec Matchers BuiltIn BeWithin failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" description "," actual "]}," RSpec Matchers BuiltIn BeWithin of":{"type":"method","name":"of","children":[],"call":[]}," RSpec Matchers BuiltIn BeWithin matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (super\n    (lvar :actual)) :-\n  (send nil :expected)) abs <= "," delta ","(send\n  (super\n    (lvar :actual)) :-\n  (send nil :expected)) abs ","(lvar :actual) - "," expected "," raise ","ArgumentError  new ","(send\n  (ivar :@actual) :-\n  (ivar :@expected)) abs <= ","(send\n  (ivar :@actual) :-\n  (ivar :@expected)) abs ","@actual - "," needs_numeric ","@actual is_a? "," needs_expected "," needs_subtractable ","@actual respond_to? ","(send\n  (super\n    (lvar :actual)) :-\n  (send nil :expected)) abs < "," numeric? "]}," RSpec Matchers BuiltIn BeWithin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn BeAKindOf matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) kind_of? "," expected "]}," RSpec Matchers BuiltIn BeAnInstanceOf matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) instance_of? "," expected "]}," RSpec Matchers BuiltIn BePredicate prefix_to_sentence":{"type":"method","name":"prefix_to_sentence","children":[],"call":[" split_words ","EnglishPhrasing  split_words "]}," RSpec Matchers BuiltIn BePredicate prefix_and_expected":{"type":"method","name":"prefix_and_expected","children":[],"call":["symbol to_s =~ ","symbol to_s ","Matchers BE_PREDICATE_REGEX  match captures compact ","Matchers BE_PREDICATE_REGEX  match captures ","Matchers BE_PREDICATE_REGEX  match "]}," RSpec Matchers BuiltIn BePredicate parse_expected":{"type":"method","name":"parse_expected","children":[],"call":[" prefix_and_expected "]}," RSpec Matchers BuiltIn BePredicate present_tense_predicate":{"type":"method","name":"present_tense_predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "," root "]}," RSpec Matchers BuiltIn BePredicate predicate":{"type":"method","name":"predicate","children":[],"call":["(begin\n  (ivar :@expected)) to_sym "," root "]}," RSpec Matchers BuiltIn BePredicate description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "," prefix_to_sentence "]}," RSpec Matchers BuiltIn BePredicate failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BuiltIn BePredicate failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BuiltIn BePredicate matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","actual __send__ "," present_tense_predicate "," predicate "," check_respond_to ","RSpec  deprecate "," caller [] "," caller "," predicate inspect "," predicate to_s gsub "," predicate to_s "," is_private_on? "," predicate_matches? "," predicate_accessible? ","Expectations ExpectationNotMetError  new "]}," RSpec Matchers BuiltIn BePredicate initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_expected ","args shift "]}," RSpec Matchers BuiltIn BeComparedTo description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," expected_to_sentence "]}," RSpec Matchers BuiltIn BeComparedTo failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" raise ","message << ","(sym :===) include? "," negative_expectation_expression "]}," RSpec Matchers BuiltIn BeComparedTo failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect ","@operator to_s gsub ","@operator to_s ","@expected inspect "]}," RSpec Matchers BuiltIn BeComparedTo matches?":{"type":"method","name":"matches?","children":[],"call":["@actual __send__ ","@actual send "," perform_match "]}," RSpec Matchers BuiltIn BeComparedTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Be args_to_sentence":{"type":"method","name":"args_to_sentence","children":[],"call":[" to_sentence "]}," RSpec Matchers BuiltIn Be expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" split_words "]}," RSpec Matchers BuiltIn Be inspected_args":{"type":"method","name":"inspected_args","children":[],"call":["a inspect ","@args collect "]}," RSpec Matchers BuiltIn Be parenthesize":{"type":"method","name":"parenthesize","children":[],"call":[]}," RSpec Matchers BuiltIn Be args_to_s":{"type":"method","name":"args_to_s","children":[],"call":[" parenthesize "," inspected_args join "," inspected_args ","@args empty? "]}," RSpec Matchers BuiltIn Be description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Matchers BuiltIn Be failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@actual inspect "]}," RSpec Matchers BuiltIn Be failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@actual inspect "]}," RSpec Matchers BuiltIn Be matches?":{"type":"method","name":"matches?","children":[],"call":["@actual ! ! ","@actual ! "]}," RSpec Matchers BuiltIn Be initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn BeNil failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers BuiltIn BeNil failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeNil matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) nil? "]}," RSpec Matchers BuiltIn BeFalse matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) ! "]}," RSpec Matchers BuiltIn BeTrue matches?":{"type":"method","name":"matches?","children":[],"call":[]}," RSpec Matchers BuiltIn BaseMatcher ==":{"type":"method","name":"==","children":[],"call":[" matches? "]}," RSpec Matchers BuiltIn BaseMatcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers BuiltIn BaseMatcher description":{"type":"method","name":"description","children":[],"call":[" name_to_sentence "," expected inspect "," expected ","@expected inspect "," to_sentence ","desc << ","EnglishPhrasing  list ","EnglishPhrasing  split_words "," class matcher_name "," class ","EnglishPhrasing  split_words  << "]}," RSpec Matchers BuiltIn BaseMatcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual ","@actual inspect "," assert_ivars "," to_sentence "," expected "]}," RSpec Matchers BuiltIn BaseMatcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual ","@actual inspect "," assert_ivars "," to_sentence "," expected "]}," RSpec Matchers BuiltIn BaseMatcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":["exceptions unshift ","exceptions empty? "]}," RSpec Matchers BuiltIn BaseMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" match "," expected "]}," RSpec Matchers BuiltIn BaseMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["UNDEFINED  equal? "]}," RSpec Expectations DeprecatedConstants const_missing":{"type":"method","name":"const_missing","children":[],"call":[" raise ","l =~ ","Regexp  compile ","e backtrace reject! ","e backtrace ","RSpec  warn_deprecation "," caller [] "," caller ","RSpec  deprecate ","name to_s "]}," RSpec Expectations Differ object_to_string":{"type":"method","name":"object_to_string","children":[],"call":["PP  pp ","object inspect ","object =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :object) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","PP  singleline_pp ","object [] ","(send\n  (send\n    (lvar :object) :keys) :sort_by) map ","k to_s ","object keys sort_by ","object keys "," matching_encoding ","key to_s "," pick_encoding "," matching_ pick_encoding  "," pick_ pick_encoding  "]}," RSpec Matchers match_array":{"type":"method","name":"match_array","children":[],"call":["BuiltIn MatchArray  new "," contain_exactly "]}," RSpec Matchers configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec Matchers Configuration add_should_and_should_not_to":{"type":"method","name":"add_should_and_should_not_to","children":[],"call":["Expectations Syntax  enable_should ","modules each "]}," RSpec Matchers Configuration syntax":{"type":"method","name":"syntax","children":[],"call":["syntaxes << ","Expectations Syntax  expect_enabled? ","Expectations Syntax  should_enabled? "]}," RSpec Matchers Configuration syntax=":{"type":"method","name":"syntax=","children":[],"call":["Expectations Syntax  disable_should ","Expectations Syntax  enable_should "," Array include? "," Array ","Expectations Syntax  disable_expect ","Expectations Syntax  enable_expect "]}," RSpec Matchers BuiltIn MatchArray match":{"type":"method","name":"match","children":[],"call":["@extra_items empty? & ","@missing_items empty? ","@extra_items empty? "," difference_between_arrays ","actual respond_to? "," difference_between_arrays  empty? & "," difference_between_arrays  empty? "]}," RSpec Matchers BuiltIn Match match":{"type":"method","name":"match","children":[],"call":["actual match ","actual respond_to? "," values_match? "," can_safely_call_match? "," match_captures "]}," RSpec Matchers BuiltIn Equal match":{"type":"method","name":"match","children":[],"call":["actual equal? "]}," RSpec Matchers BuiltIn Eql match":{"type":"method","name":"match","children":[],"call":["actual eql? "]}," RSpec Matchers BuiltIn Eq match":{"type":"method","name":"match","children":[],"call":["actual == "]}," RSpec Matchers BuiltIn BeWithin needs_expected":{"type":"method","name":"needs_expected","children":[],"call":["ArgumentError  new "]}," RSpec Matchers BuiltIn BeWithin needs_numeric":{"type":"method","name":"needs_numeric","children":[],"call":["ArgumentError  new ","@actual inspect "]}," RSpec Matchers BuiltIn BeAKindOf match":{"type":"method","name":"match","children":[],"call":["actual kind_of? "," raise "," matcher_name ","actual is_a? "," actual_object_respond_to? "]}," RSpec Matchers BuiltIn BeAnInstanceOf match":{"type":"method","name":"match","children":[],"call":["actual instance_of? "," raise "," matcher_name "," actual_object_respond_to? "]}," RSpec Matchers BuiltIn Be match":{"type":"method","name":"match","children":[],"call":["actual ! ! ","actual ! "]}," RSpec Matchers BuiltIn BeNil match":{"type":"method","name":"match","children":[],"call":["actual nil? "]}," RSpec Matchers BuiltIn BeFalse failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeFalse failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeFalse match":{"type":"method","name":"match","children":[],"call":["actual ! "]}," RSpec Matchers BuiltIn BeTrue failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeTrue failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeTrue match":{"type":"method","name":"match","children":[],"call":["actual ! ! ","actual ! "]}," RSpec Matchers BuiltIn BaseMatcher assert_ivars":{"type":"method","name":"assert_ivars","children":[],"call":[" raise "," to_sentence "," class name "," class "," instance_variables map include? "," instance_variables map "," instance_variables ","ivars all? ","(send\n  (lvar :expected_ivars) :-\n  (send nil :present_ivars)) any? ","expected_ivars - "," present_ivars ","EnglishPhrasing  list "]}," RSpec Expectations Syntax expect_enabled?":{"type":"method","name":"expect_enabled?","children":[],"call":["syntax_host method_defined? "]}," RSpec Expectations Syntax should_enabled?":{"type":"method","name":"should_enabled?","children":[],"call":["syntax_host method_defined? "]}," RSpec Expectations Syntax disable_expect":{"type":"method","name":"disable_expect","children":[],"call":["syntax_host module_eval "," expect_enabled? "," RSpec Expectations ExpectationTarget  disable_deprecated_should ","syntax_host module_exec "]}," RSpec Expectations Syntax enable_expect":{"type":"method","name":"enable_expect","children":[{"type":"method","name":"expect","children":[],"asgn":[],"call":[" RSpec Expectations ExpectationTarget  new ","target first "," raise ","ArgumentError  new ","target size == ","target size ","target << "," block_given? "]}],"call":[" RSpec Expectations ExpectationTarget  new ","target first "," raise ","ArgumentError  new ","target size == ","target size ","target << "," block_given? ","syntax_host module_eval "," expect_enabled? "," RSpec Expectations ExpectationTarget  enable_deprecated_should "," should_enabled? "," RSpec Expectations ExpectationTarget  for ","syntax_host module_exec "]}," RSpec Expectations Syntax disable_should":{"type":"method","name":"disable_should","children":[],"call":["syntax_host module_eval "," should_enabled? "," RSpec Expectations ExpectationTarget  disable_deprecated_should ","syntax_host module_exec "]}," RSpec Expectations Syntax enable_should":{"type":"method","name":"enable_should","children":[{"type":"method","name":"should","children":[],"asgn":[],"call":[" RSpec Expectations PositiveExpectationHandler  handle_matcher "]},{"type":"method","name":"should_not","children":[],"asgn":[],"call":[" RSpec Expectations NegativeExpectationHandler  handle_matcher "]}],"call":[" RSpec Expectations NegativeExpectationHandler  handle_matcher "," RSpec Expectations PositiveExpectationHandler  handle_matcher ","syntax_host module_eval "," should_enabled? "," RSpec Expectations ExpectationTarget  enable_deprecated_should "," expect_enabled? "," RSpec Expectations Syntax  warn_about_should_unless_configured "," __method__ ","syntax_host module_exec ","syntax_host == "," default_should_host "," Kernel  __method__ "]}," RSpec Expectations Syntax default_should_host":{"type":"method","name":"default_should_host","children":[],"call":[" Object  ancestors last "," Object  ancestors "]}," RSpec Expectations ExpectationTarget prevent_operator_matchers":{"type":"method","name":"prevent_operator_matchers","children":[],"call":[" raise ","The expect syntax does not support operator matchers,  + "]}," RSpec Expectations ExpectationTarget to_not":{"type":"method","name":"to_not","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," prevent_operator_matchers "]}," RSpec Expectations ExpectationTarget to":{"type":"method","name":"to","children":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher "," prevent_operator_matchers "]}," RSpec Expectations ExpectationTarget initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn BeWithin needs_subtractable":{"type":"method","name":"needs_subtractable","children":[],"call":["ArgumentError  new ","@actual inspect "]}," RSpec Expectations ExpectationTarget disable_deprecated_should":{"type":"method","name":"disable_deprecated_should","children":[],"call":[]}," RSpec Expectations ExpectationTarget enable_deprecated_should":{"type":"method","name":"enable_deprecated_should","children":[{"type":"method","name":"should","children":[],"asgn":[],"call":["@target should ","RSpec  deprecate "]},{"type":"method","name":"should_not","children":[],"asgn":[],"call":["@target should_not ","RSpec  deprecate "]}],"call":[]}," RSpec Matchers Configuration format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":[]}," RSpec Matchers Configuration backtrace_formatter":{"type":"method","name":"backtrace_formatter","children":[],"call":[]}," RSpec Matchers Configuration color?":{"type":"method","name":"color?","children":[],"call":[" RSpec  configuration color_enabled? "," RSpec  configuration "]}," RSpec Matchers BuiltIn RaiseError format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["formatter format_backtrace ","Matchers  configuration backtrace_formatter ","Matchers  configuration ","Matchers  configuration backtrace_formatter  format_backtrace ","Matchers  configuration backtrace_Matchers  configuration backtrace_formatter  "]}," RSpec Matchers BuiltIn RaiseError does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" matches? ! "," matches? ","Proc  === "," prevent_invalid_expectations "," warn_for_negative_false_positives! "," warn_for_false_positives "]}," RSpec Matchers BuiltIn BeAnInstanceOf description":{"type":"method","name":"description","children":[],"call":[" expected "]}," RSpec Expectations ExpectationHandler check_message":{"type":"method","name":"check_message","children":[],"call":[]}," RSpec Expectations ExpectationHandler message_must_be_string":{"type":"method","name":"message_must_be_string","children":[],"call":[]}," RSpec Expectations Differ color_diff":{"type":"method","name":"color_diff","children":[],"call":["(send\n  (send\n    (lvar :diff) :lines) :map) join "," blue ","line [] chr == ","line [] chr ","line [] "," red "," green ","diff lines map ","diff lines ","RSpec Matchers  configuration color? ","RSpec Matchers  configuration "]}," RSpec Expectations Differ blue":{"type":"method","name":"blue","children":[],"call":[" color "]}," RSpec Expectations Differ green":{"type":"method","name":"green","children":[],"call":[" color "]}," RSpec Expectations Differ red":{"type":"method","name":"red","children":[],"call":[" color "]}," RSpec Expectations Differ color":{"type":"method","name":"color","children":[],"call":[]}," RSpec Matchers OperatorMatcher uses_generic_implementation_of?":{"type":"method","name":"uses_generic_implementation_of?","children":[],"call":["@actual method to_s include? ","@actual method to_s ","@actual method ","@actual method owner == ","@actual method owner ","Expectations  method_handle_for to_s include? ","Expectations  method_handle_for to_s ","Expectations  method_handle_for ","Expectations  method_handle_for owner == ","Expectations  method_handle_for owner "]}," RSpec Matchers OperatorMatcher unregister":{"type":"method","name":"unregister","children":[],"call":[" registry [] delete "," registry [] "," registry "]}," RSpec Matchers Pretty to_word":{"type":"method","name":"to_word","children":[],"call":["item inspect ","item description ","item respond_to? "," is_matcher_with_description? "]}," RSpec Matchers BuiltIn Include is_a_matcher?":{"type":"method","name":"is_a_matcher?","children":[],"call":["object respond_to? ","(sym :failure_message_for_should) any? "]}," RSpec Matchers BuiltIn Include comparing_with_matcher?":{"type":"method","name":"comparing_with_matcher?","children":[],"call":[" is_a_matcher? ","actual is_a? ","RSpec Matchers  is_a_matcher? "]}," RSpec Matchers BuiltIn Equal eq_expression":{"type":"method","name":"eq_expression","children":[],"call":["Expectations Syntax  positive_expression "]}," RSpec Matchers BuiltIn BeWithin percent_of":{"type":"method","name":"percent_of","children":[],"call":["@delta * / ","@delta * ","@expected abs ","@expected abs * / ","@expected abs * "]}," RSpec Matchers BuiltIn BeComparedTo negative_expectation_expression":{"type":"method","name":"negative_expectation_expression","children":[],"call":["Expectations Syntax  negative_expression "]}," RSpec Expectations Syntax ExpectExpressionGenerator negative_expression":{"type":"method","name":"negative_expression","children":[],"call":[]}," RSpec Expectations Syntax ExpectExpressionGenerator positive_expression":{"type":"method","name":"positive_expression","children":[],"call":[]}," RSpec Expectations Syntax ShouldExpressionGenerator negative_expression":{"type":"method","name":"negative_expression","children":[],"call":[]}," RSpec Expectations Syntax ShouldExpressionGenerator positive_expression":{"type":"method","name":"positive_expression","children":[],"call":[]}," RSpec Expectations Syntax expression_generator":{"type":"method","name":"expression_generator","children":[],"call":[" expect_enabled? "]}," RSpec Expectations Syntax negative_expression":{"type":"method","name":"negative_expression","children":[],"call":[" expression_generator negative_expression "," expression_generator "]}," RSpec Expectations Syntax positive_expression":{"type":"method","name":"positive_expression","children":[],"call":[" expression_generator positive_expression "," expression_generator "]}," RSpec Expectations multiline?":{"type":"method","name":"multiline?","children":[],"call":["string include? ","\n encode ","string encoding "]}," RSpec Expectations coerce_to_string":{"type":"method","name":"coerce_to_string","children":[],"call":["string_or_array join ","Array  === "," diffably_stringify join "," diffably_stringify "]}," RSpec Matchers is_a_matcher?":{"type":"method","name":"is_a_matcher?","children":[],"call":[]}," RSpec Matchers Pretty is_matcher_with_description?":{"type":"method","name":"is_matcher_with_description?","children":[],"call":["object respond_to? ","RSpec Matchers  is_a_matcher? "]}," RSpec Matchers BuiltIn YieldControl human_readable_count":{"type":"method","name":"human_readable_count","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl human_readable_expecation_type":{"type":"method","name":"human_readable_expecation_type","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl relativity_failure_message":{"type":"method","name":"relativity_failure_message","children":[],"call":[" human_readable_count "," human_readable_expecation_type "]}," RSpec Matchers BuiltIn YieldControl set_expected_yields_count":{"type":"method","name":"set_expected_yields_count","children":[],"call":[" count_constraint_to_number "," raise "]}," RSpec Matchers BuiltIn YieldControl times":{"type":"method","name":"times","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_yields_count "]}," RSpec Matchers BuiltIn YieldControl at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_yields_count "]}," RSpec Matchers BuiltIn YieldControl exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_yields_count "]}," RSpec Matchers BuiltIn YieldControl twice":{"type":"method","name":"twice","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn YieldControl once":{"type":"method","name":"once","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn YieldControl initialize":{"type":"method","name":"initialize","children":[],"call":[" at_least "]}," RSpec Matchers BuiltIn RaiseError expecting_specific_exception?":{"type":"method","name":"expecting_specific_exception?","children":[],"call":["@expected_error != "]}," RSpec Matchers BuiltIn Have enumerator_class":{"type":"method","name":"enumerator_class","children":[],"call":["RUBY_VERSION  < "]}," RSpec Matchers BuiltIn Change failure_message_for_expected_after":{"type":"method","name":"failure_message_for_expected_after","children":[],"call":["@expected_after inspect ","@expected_after description ","RSpec Matchers  is_a_matcher? "]}," RSpec Expectations diffably_stringify":{"type":"method","name":"diffably_stringify","children":[],"call":["entry to_s gsub ","entry to_s ","entry inspect ","Array  === ","array map "]}," RSpec Expectations ExpectationTarget not_to":{"type":"method","name":"not_to","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," prevent_operator_matchers "]}," RSpec Expectations Differ matching_encoding":{"type":"method","name":"matching_encoding","children":[],"call":["string encode ","source encoding "]}," RSpec Expectations Deprecation deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "," caller [] "," caller ","options [] ","line !~ "," caller find ","CallerFilter  first_non_rspec_line "]}," RSpec Matchers BuiltIn BeHelpers args_to_sentence":{"type":"method","name":"args_to_sentence","children":[],"call":[" to_sentence ","EnglishPhrasing  list "]}," RSpec Matchers BuiltIn BeHelpers expected_to_sentence":{"type":"method","name":"expected_to_sentence","children":[],"call":[" split_words ","EnglishPhrasing  split_words "]}," RSpec Matchers BuiltIn BeHelpers inspected_args":{"type":"method","name":"inspected_args","children":[],"call":["a inspect ","@args collect ","@args map ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn BeHelpers parenthesize":{"type":"method","name":"parenthesize","children":[],"call":[]}," RSpec Matchers BuiltIn BeHelpers args_to_s":{"type":"method","name":"args_to_s","children":[],"call":[" parenthesize "," inspected_args join "," inspected_args ","@args empty? "]}," RSpec Expectations method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":[]}," RSpec Matchers BuiltIn Match diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Expectations Differ pick_encoding":{"type":"method","name":"pick_encoding","children":[],"call":["Encoding  default_external ","Encoding  compatible? "]}," RSpec Matchers Matcher include":{"type":"method","name":"include","children":[],"call":[" singleton_class __send__ "," singleton_class "]}," RSpec Matchers Has args_description":{"type":"method","name":"args_description","children":[],"call":["(send\n  (lvar :args) :map) join ","arg inspect ","args map ","args empty? ","(send\n  (ivar :@args) :map) join ","@args map ","@args empty? "]}," RSpec Matchers Has method_description":{"type":"method","name":"method_description","children":[],"call":["method to_s gsub ","method to_s "]}," RSpec Matchers Change expected_matches_actual?":{"type":"method","name":"expected_matches_actual?","children":[],"call":["expected === "]}," RSpec Matchers Change matches_expected_delta?":{"type":"method","name":"matches_expected_delta?","children":[],"call":["@actual_before + == ","@actual_before + "]}," RSpec Matchers Have determine_query_method":{"type":"method","name":"determine_query_method","children":[],"call":["collection respond_to? ","(sym :size) detect "]}," RSpec Matchers Have determine_collection":{"type":"method","name":"determine_collection","children":[],"call":["collection_or_owner send "," determine_query_method ","collection_or_owner respond_to? "]}," RSpec Matchers Has failure_message_args_description":{"type":"method","name":"failure_message_args_description","children":[],"call":[" args_description "," args_ args_description ription "]}," RSpec Matchers Matcher for_expected":{"type":"method","name":"for_expected","children":[],"call":[" instance_eval_with_args "," making_declared_methods_public "]}," RSpec Matchers Match matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) match "," expected "]}," RSpec Matchers Include comparing_hash_values?":{"type":"method","name":"comparing_hash_values?","children":[],"call":["expected is_a? ","actual is_a? "]}," RSpec Matchers Include comparing_hash_keys?":{"type":"method","name":"comparing_hash_keys?","children":[],"call":["expected is_a? ! ","expected is_a? ","actual is_a? "]}," RSpec Matchers Include perform_match":{"type":"method","name":"perform_match","children":[],"call":["actuals include? ","actuals has_key? "," comparing_hash_keys? ","actuals [] == ","actuals [] ","expected send "," comparing_hash_values? ","expecteds send "]}," RSpec Matchers Include diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers Include description":{"type":"method","name":"description","children":[],"call":[" expected_to_sentence "]}," RSpec Matchers Include does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" perform_match "," expected "]}," RSpec Matchers Include matches?":{"type":"method","name":"matches?","children":[],"call":[" perform_match "," expected "]}," RSpec Matchers Include initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers Exist matches?":{"type":"method","name":"matches?","children":[],"call":[" raise ","#exist? and #exists? returned different values:\n\n + + ","existance_values last ","#exist? and #exists? returned different values:\n\n + ","existance_values first ","NoMethodError  new ","actual inspect ","uniq_truthy_values size ","(send\n  (lvar :existance_values) :map) uniq ","v ! ! ","v ! ","existance_values map ","actual send "," expected ","predicates map ","actual respond_to? ","(sym :exist?) select ","(send\n  (lvar :existance_values) :map) uniq  size "]}," RSpec Matchers Exist initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers Equal inspect_object":{"type":"method","name":"inspect_object","children":[],"call":["o inspect ","o object_id ","o class "]}," RSpec Matchers Equal diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers Equal failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" inspect_object "," expected "," actual "]}," RSpec Matchers Equal failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" inspect_object "," actual "," expected "]}," RSpec Matchers Equal matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) equal? "," expected "]}," RSpec Matchers Eql diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers Eql failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers Eql failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers Eql matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) eql? "," expected "]}," RSpec Matchers Eq diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers Eq failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers Eq failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "]}," RSpec Matchers Eq matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) == "," expected "]}," RSpec Matchers Cover does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["range cover? "," expected none? "," expected "]}," RSpec Matchers Cover matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :range) cover? "," expected all? "," expected "]}," RSpec Matchers Cover initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BeWithin description":{"type":"method","name":"description","children":[],"call":[" expected "," delta "]}," RSpec Matchers BeWithin failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" description "," actual "]}," RSpec Matchers BeWithin failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" description "," actual "]}," RSpec Matchers BeWithin of":{"type":"method","name":"of","children":[],"call":[]}," RSpec Matchers BeWithin matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (super\n    (lvar :actual)) :-\n  (send nil :expected)) abs < "," delta ","(send\n  (super\n    (lvar :actual)) :-\n  (send nil :expected)) abs ","(lvar :actual) - "," expected "," raise ","ArgumentError  new "]}," RSpec Matchers BeWithin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BeAKindOf matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) kind_of? "," expected "]}," RSpec Matchers BeAnInstanceOf matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) instance_of? "," expected "]}," RSpec Matchers BeNil failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[]}," RSpec Matchers BeNil failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BeNil matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) nil? "]}," RSpec Matchers BeFalse matches?":{"type":"method","name":"matches?","children":[],"call":["(lvar :actual) ! "]}," RSpec Matchers BeTrue matches?":{"type":"method","name":"matches?","children":[],"call":[]}," RSpec Matchers BaseMatcher ==":{"type":"method","name":"==","children":[],"call":[" matches? "]}," RSpec Matchers BaseMatcher diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers BaseMatcher description":{"type":"method","name":"description","children":[],"call":[" name_to_sentence "," expected inspect "," expected "]}," RSpec Matchers BaseMatcher failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "]}," RSpec Matchers BaseMatcher failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "]}," RSpec Matchers BaseMatcher match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[]}," RSpec Matchers BaseMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[]}," RSpec Matchers BaseMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Matchers be_falsey":{"type":"method","name":"be_falsey","children":[],"call":["BuiltIn BeFalsey  new "]}," RSpec Matchers be_truthy":{"type":"method","name":"be_truthy","children":[],"call":["BuiltIn BeTruthy  new "]}," setup":{"type":"method","name":"setup","children":[],"call":["Test Unit TestCase  send "," RSpec  deprecate "," RSpec Matchers  === "]}," RSpec Matchers BuiltIn OperatorMatcher eval_match":{"type":"method","name":"eval_match","children":[],"call":[" __delegate_operator "," RSpec Matchers  last_matcher= "]}," RSpec Matchers BuiltIn OperatorMatcher uses_generic_implementation_of?":{"type":"method","name":"uses_generic_implementation_of?","children":[],"call":["Expectations  method_handle_for to_s include? ","Expectations  method_handle_for to_s ","Expectations  method_handle_for ","Expectations  method_handle_for owner == ","Expectations  method_handle_for owner ","Support  method_handle_for owner == ","Support  method_handle_for owner ","Support  method_handle_for "]}," RSpec Matchers BuiltIn OperatorMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn OperatorMatcher fail_with_message":{"type":"method","name":"fail_with_message","children":[],"call":["RSpec Expectations  fail_with "]}," RSpec Matchers BuiltIn OperatorMatcher use_custom_matcher_or_delegate":{"type":"method","name":"use_custom_matcher_or_delegate","children":[],"call":[]}," RSpec Matchers BuiltIn OperatorMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn OperatorMatcher get":{"type":"method","name":"get","children":[],"call":[" registry [] [] "," registry [] "," registry ","klass ancestors each ","klass ancestors "]}," RSpec Matchers BuiltIn OperatorMatcher unregister":{"type":"method","name":"unregister","children":[],"call":[" registry [] delete "," registry [] "," registry "]}," RSpec Matchers BuiltIn OperatorMatcher register":{"type":"method","name":"register","children":[],"call":[" registry [] []= "," registry [] "," registry "]}," RSpec Matchers BuiltIn OperatorMatcher registry":{"type":"method","name":"registry","children":[],"call":[]}," RSpec Matchers DSL Matcher aliased_name_for":{"type":"method","name":"aliased_name_for","children":[],"call":["method_name to_s sub ","method_name to_s "]}," RSpec Matchers DSL Matcher add_deprecation_warning_to":{"type":"method","name":"add_deprecation_warning_to","children":[],"call":[" singleton_class class_eval ","402 + ","aliased_name inspect ","CallerFilter  first_non_rspec_line ","replacement inspect ","msg inspect "," singleton_class "," singleton_class __send__ "," aliased_name_for ","@deprecated_methods << ","@deprecated_methods include? ","364 + ","381 + "," aliased_name_for  inspect ","  aliased_name_for _for "]}," RSpec Matchers DSL Matcher singleton_method_added":{"type":"method","name":"singleton_method_added","children":[],"call":[" add_deprecation_warning_to ","@block_method_differentiator singleton_methods include? ","@block_method_differentiator singleton_methods ","@block_method_differentiator instance_methods include? ","@block_method_differentiator instance_methods "]}," RSpec Matchers DSL Matcher extend":{"type":"method","name":"extend","children":[],"call":[" add_deprecation_warning_to ","mod name ","mod instance_methods each ","mod instance_methods ","modules each "]}," RSpec Matchers DSL Matcher supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers DSL Matcher supports_block_expectations":{"type":"method","name":"supports_block_expectations","children":[],"call":[]}," RSpec Matchers DSL Matcher matcher_execution_context":{"type":"method","name":"matcher_execution_context","children":[],"call":["RSpec  deprecate "]}," RSpec Matchers DSL Matcher matcher_execution_context=":{"type":"method","name":"matcher_execution_context=","children":[],"call":["RSpec  deprecate "]}," RSpec Matchers DSL Matcher expected_as_array":{"type":"method","name":"expected_as_array","children":[],"call":[]}," RSpec Matchers DSL Matcher expected":{"type":"method","name":"expected","children":[],"call":["RSpec  warn_deprecation ","Custom matchers in 3.x will set expected to be a single value  + + + + ","RSpec CallerFilter  first_non_rspec_line ","Custom matchers in 3.x will set expected to be a single value  + + + ","Custom matchers in 3.x will set expected to be a single value  + + ","Custom matchers in 3.x will set expected to be a single value  + ","@expected size == ","@expected size "," expected_as_array "," expected_as_array [] "," expected_as_array size == "," expected_as_array size "]}," RSpec Matchers MatchAliases ===":{"type":"method","name":"===","children":[],"call":[" matches? "]}," RSpec Matchers MatchAliases ==":{"type":"method","name":"==","children":[],"call":["RSpec  deprecate "," matches? "," equal? "]}," RSpec Matchers DifferentiateBlockMethodTypes ignore_macro_methods":{"type":"method","name":"ignore_macro_methods","children":[{"type":"method","name":"method_missing","children":[],"asgn":[],"call":[]}],"call":[" singleton_class "]}," RSpec Matchers DifferentiateBlockMethodTypes singletons_singleton_class":{"type":"method","name":"singletons_singleton_class","children":[],"call":[" singleton_class "]}," RSpec Matchers DifferentiateBlockMethodTypes singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," RSpec Matchers DifferentiateBlockMethodTypes capture_added_methods":{"type":"method","name":"capture_added_methods","children":[],"call":["method_list delete ","method_list << ","object __send__ "]}," RSpec Matchers DifferentiateBlockMethodTypes instance_methods":{"type":"method","name":"instance_methods","children":[],"call":[]}," RSpec Matchers DifferentiateBlockMethodTypes singleton_methods":{"type":"method","name":"singleton_methods","children":[],"call":[]}," RSpec Matchers DifferentiateBlockMethodTypes initialize":{"type":"method","name":"initialize","children":[],"call":[" singleton_class class_exec "," singleton_class "," capture_added_methods "," instance_methods "," singleton_methods "," singletons_singleton_class "," ignore_macro_methods "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithArgs supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithNoArgs supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn ThrowSymbol supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Satisfy supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Have record_errors_expression":{"type":"method","name":"record_errors_expression","children":[],"call":[" String ","attribute inspect ","@args first "]}," RSpec Matchers BuiltIn Have validation_context":{"type":"method","name":"validation_context","children":[],"call":["@args last [] inspect ","@args last [] ","@args last ","Hash  === "]}," RSpec Matchers BuiltIn Have record_valid_expression":{"type":"method","name":"record_valid_expression","children":[],"call":["expression << "," validation_context "," validati validation_context  "]}," RSpec Matchers BuiltIn Have errors_on_args_list":{"type":"method","name":"errors_on_args_list","children":[],"call":["list << "," validation_context ","@args first inspect ","@args first ","@args first inspect  << "," validation_ validation_context  "]}," RSpec Matchers BuiltIn Have for_rspec_rails_error_on?":{"type":"method","name":"for_rspec_rails_error_on?","children":[],"call":[" original_matcher_expression "]}," RSpec Matchers BuiltIn Have matcher_method":{"type":"method","name":"matcher_method","children":[],"call":[]}," RSpec Matchers BuiltIn Have suggested_matcher_expression_for_at_least":{"type":"method","name":"suggested_matcher_expression_for_at_least","children":[],"call":[]}," RSpec Matchers BuiltIn Have suggested_matcher_expression_for_at_most":{"type":"method","name":"suggested_matcher_expression_for_at_most","children":[],"call":[]}," RSpec Matchers BuiltIn Have suggested_matcher_expression_for_exactly":{"type":"method","name":"suggested_matcher_expression_for_exactly","children":[],"call":[]}," RSpec Matchers BuiltIn Have suggested_matcher_expression":{"type":"method","name":"suggested_matcher_expression","children":[],"call":[" send "]}," RSpec Matchers BuiltIn Have cardinality_expression":{"type":"method","name":"cardinality_expression","children":[],"call":["expression << "," String "," target_expression "]}," RSpec Matchers BuiltIn Have expectation_format_method":{"type":"method","name":"expectation_format_method","children":[],"call":["@relativity == "]}," RSpec Matchers BuiltIn Have original_matcher_expression":{"type":"method","name":"original_matcher_expression","children":[],"call":[" matcher_method "]}," RSpec Matchers BuiltIn Have target_expression":{"type":"method","name":"target_expression","children":[],"call":[]}," RSpec Matchers BuiltIn Have expectation_expression":{"type":"method","name":"expectation_expression","children":[],"call":["RSpec Expectations Syntax  positive_expression "," original_matcher_expression ","RSpec Expectations Syntax  negative_expression "," target_expression "]}," RSpec Matchers BuiltIn Have print_deprecation_message":{"type":"method","name":"print_deprecation_message","children":[],"call":["RSpec  deprecate ","deprecation_message << "," suggested_matcher_expression "," expectation_format_method "," cardinality_expression "," expectation_expression ","(str \"              |\\n\") gsub "," record_errors_expression "," record_valid_expression ","deprecated_call << "," errors_on_args_list ","@args empty? "," for_rspec_rails_error_on? "," expectation_expression  << "]}," RSpec Matchers BuiltIn Have does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" matches? ! "," matches? "]}," RSpec Matchers BuiltIn Has check_respond_to":{"type":"method","name":"check_respond_to","children":[],"call":["RSpec  deprecate ","actual respond_to? "]}," RSpec Matchers BuiltIn Has is_private_on?":{"type":"method","name":"is_private_on?","children":[],"call":["actual private_methods include? "," predicate ","actual private_methods "," predicate to_s "]}," RSpec Matchers BuiltIn Has supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Change supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Change does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["matched_positively ! ","RSpec  warn_deprecation ","(str \"              |The semantics of `expect { }.not_to change { }.from()` are changing\\n\") gsub ","CallerFilter  first_non_rspec_line "," matches_before? "," matches? ","RSpec  deprecate ","(str \"              |--------------------------------------------------------------------\\n\") gsub ","Proc  === "," matches? ! "," raise_block_syntax_error "," block_given? "," change_details changed? ! "," change_details changed? "," change_details "," perform_change "," matches?  ! "]}," RSpec Matchers BuiltIn BeWithin supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn BePredicate check_respond_to":{"type":"method","name":"check_respond_to","children":[],"call":["RSpec  deprecate "," actual respond_to? "," actual "]}," RSpec Matchers BuiltIn BePredicate is_private_on?":{"type":"method","name":"is_private_on?","children":[],"call":["actual private_methods include? "," predicate ","actual private_methods "," predicate to_s "]}," RSpec Matchers BuiltIn BeFalsey failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeFalsey failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeFalsey match":{"type":"method","name":"match","children":[],"call":["actual ! "]}," RSpec Matchers BuiltIn BeTruthy failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeTruthy failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" actual inspect "," actual "]}," RSpec Matchers BuiltIn BeTruthy match":{"type":"method","name":"match","children":[],"call":["actual ! ! ","actual ! "]}," RSpec Matchers BuiltIn BaseMatcher supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Expectations BlockExpectationTarget description_of":{"type":"method","name":"description_of","children":[],"call":["matcher inspect ","matcher description "]}," RSpec Expectations BlockExpectationTarget supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":["matcher supports_block_expectations? ","matcher respond_to? "]}," RSpec Expectations BlockExpectationTarget enforce_block_expectation":{"type":"method","name":"enforce_block_expectation","children":[],"call":["RSpec  deprecate ","a value expectation expression  + + + "," description_of ","a value expectation expression  + + ","a value expectation expression  + ","Using a matcher in a block expectation expression  + + ","Using a matcher in a block expectation expression  + "," supports_block_expectations? "," raise ","You must pass an argument rather than a block to use the provided  + + ","You must pass an argument rather than a block to use the provided  + ","RSpec Support ObjectFormatter  format "]}," RSpec Expectations BlockExpectationTarget not_to":{"type":"method","name":"not_to","children":[],"call":[" enforce_block_expectation "]}," RSpec Expectations BlockExpectationTarget to":{"type":"method","name":"to","children":[],"call":[" enforce_block_expectation "]}," RSpec Expectations ExpectationTarget for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Expectations Deprecation warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" warn "]}," RSpec Expectations Configuration format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":[]}," RSpec Expectations Configuration backtrace_formatter":{"type":"method","name":"backtrace_formatter","children":[],"call":[" RSpec  configuration backtrace_formatter "," RSpec  configuration "]}," RSpec Expectations Configuration add_should_and_should_not_to":{"type":"method","name":"add_should_and_should_not_to","children":[],"call":["Expectations Syntax  enable_should ","modules each "]}," RSpec Expectations Configuration color?":{"type":"method","name":"color?","children":[],"call":[" RSpec  configuration color_enabled? "," RSpec  configuration "]}," RSpec Expectations Configuration syntax":{"type":"method","name":"syntax","children":[],"call":["syntaxes << ","Expectations Syntax  expect_enabled? ","Expectations Syntax  should_enabled? "]}," RSpec Expectations Configuration syntax=":{"type":"method","name":"syntax=","children":[],"call":["Expectations Syntax  disable_should ","Expectations Syntax  enable_should "," Array include? "," Array ","Expectations Syntax  disable_expect ","Expectations Syntax  enable_expect "]}," RSpec CallerFilter first_non_rspec_line":{"type":"method","name":"first_non_rspec_line","children":[],"call":[]}," RSpec Matchers BuiltIn OperatorMatcher has_non_generic_implementation_of?":{"type":"method","name":"has_non_generic_implementation_of?","children":[],"call":["Expectations  method_handle_for to_s include? ! ","Expectations  method_handle_for to_s include? ","Expectations  method_handle_for to_s ","Expectations  method_handle_for ","Expectations  method_handle_for owner != ","Expectations  method_handle_for owner ","Support  method_handle_for owner != ","Support  method_handle_for owner ","Support  method_handle_for "]}," RSpec Matchers is_a_describable_matcher?":{"type":"method","name":"is_a_describable_matcher?","children":[],"call":[]}," RSpec Matchers output":{"type":"method","name":"output","children":[],"call":["BuiltIn Output  new "]}," RSpec Matchers all":{"type":"method","name":"all","children":[],"call":["BuiltIn All  new "]}," RSpec Matchers contain_exactly":{"type":"method","name":"contain_exactly","children":[],"call":["BuiltIn ContainExactly  new "]}," RSpec Matchers be_between":{"type":"method","name":"be_between","children":[],"call":["BuiltIn BeBetween  new "]}," RSpec Matchers alias_matcher":{"type":"method","name":"alias_matcher","children":[],"call":[]}," RSpec Matchers Pretty improve_hash_formatting":{"type":"method","name":"improve_hash_formatting","children":[],"call":["inspect_string gsub "]}," RSpec Matchers MatcherDelegator initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@base_matcher clone ","@base_matcher clone  clone "]}," RSpec Matchers MatcherDelegator respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" base_matcher respond_to? "," base_matcher "]}," RSpec Matchers MatcherDelegator respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" base_matcher respond_to? "," base_matcher "]}," RSpec Matchers MatcherDelegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" base_matcher __send__ "," base_matcher "]}," RSpec Matchers MatcherDelegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers DSL Matcher actual_arg_for":{"type":"method","name":"actual_arg_for","children":[],"call":["block arity zero? ","block arity "]}," RSpec Matchers DSL Matcher respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@matcher_execution_context respond_to? "," matcher_execution_context respond_to? "," matcher_execution_context "]}," RSpec Matchers DSL Matcher inspect":{"type":"method","name":"inspect","children":[],"call":[" name "," class name "," class "]}," RSpec Matchers DSL DefaultImplementations supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers DSL DefaultImplementations failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" to_sentence "," expected "," name_to_sentence "," actual inspect "," actual "," expected_to_sentence "," description "]}," RSpec Matchers DSL DefaultImplementations failure_message":{"type":"method","name":"failure_message","children":[],"call":[" to_sentence "," expected "," name_to_sentence "," actual inspect "," actual "," expected_to_sentence "," description "]}," RSpec Matchers DSL DefaultImplementations description":{"type":"method","name":"description","children":[],"call":[" to_sentence "," expected "," name_to_sentence "," expected_to_sentence "," chained_method_clause_sentences ","EnglishPhrasing  list ","EnglishPhrasing  split_words "," name "]}," RSpec Matchers DSL DefaultImplementations diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers DSL Macros Deprecated failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" failure_message_when_negated ","RSpec  deprecate "]}," RSpec Matchers DSL Macros Deprecated failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" failure_message ","RSpec  deprecate "]}," RSpec Matchers DSL Macros Deprecated match_for_should_not":{"type":"method","name":"match_for_should_not","children":[],"call":[" match_when_negated ","RSpec  deprecate "]}," RSpec Matchers DSL Macros Deprecated match_for_should":{"type":"method","name":"match_for_should","children":[],"call":[" match ","RSpec  deprecate "]}," RSpec Matchers DSL Macros define_user_override":{"type":"method","name":"define_user_override","children":[],"call":[" define_method "," actual_arg_for "," lambda ","@user_method_defs __send__ "]}," RSpec Matchers DSL Macros chain":{"type":"method","name":"chain","children":[],"call":[" define_user_override ","@chained_method_clauses push "," assign_attributes ","attr_names any? "," raise "," block_given? ^ "," block_given? "]}," RSpec Matchers DSL Macros supports_block_expectations":{"type":"method","name":"supports_block_expectations","children":[],"call":[" define_method "]}," RSpec Matchers DSL Macros diffable":{"type":"method","name":"diffable","children":[],"call":[" define_method "]}," RSpec Matchers DSL Macros description":{"type":"method","name":"description","children":[],"call":[" define_user_override "," __method__ "]}," RSpec Matchers DSL Macros failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" define_user_override "," __method__ "]}," RSpec Matchers DSL Macros failure_message":{"type":"method","name":"failure_message","children":[],"call":[" define_user_override "," __method__ "]}," RSpec Matchers DSL Macros match_unless_raises":{"type":"method","name":"match_unless_raises","children":[],"call":[" actual_arg_for "," define_user_override "]}," RSpec Matchers DSL Macros match_when_negated":{"type":"method","name":"match_when_negated","children":[],"call":[" actual_arg_for "," define_user_override "," raise ","options [] ","RSpec Support  with_failure_notifier "]}," RSpec Matchers DSL Macros match":{"type":"method","name":"match","children":[],"call":[" actual_arg_for "," define_user_override "," raise ","options [] ","RSpec Support  with_failure_notifier "]}," RSpec Matchers Composable pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text "," item description "," item "]}," RSpec Matchers Composable inspect":{"type":"method","name":"inspect","children":[],"call":[" item description "," item "]}," RSpec Matchers Composable enumerable?":{"type":"method","name":"enumerable?","children":[],"call":["Enumerable  === ","String  === "]}," RSpec Matchers Composable with_matchers_cloned":{"type":"method","name":"with_matchers_cloned","children":[],"call":[" with_matchers_cloned ","object map "," enumerable? ","Hash  [] ","object to_a ","Hash  === ","object clone ","Matchers  is_a_matcher? ","Struct  === "," should_enumerate? "," unreadable_io? "]}," RSpec Matchers Composable surface_descriptions_in":{"type":"method","name":"surface_descriptions_in","children":[],"call":["item inspect "," surface_descriptions_in ","item map "," enumerable? ","Hash  [] ","item to_a ","Hash  === ","DescribableItem  new ","Matchers  is_a_describable_matcher? ","Struct  === "," should_enumerate? ","RSpec Support ObjectFormatter  format "," unreadable_io? "]}," RSpec Matchers Composable description_of":{"type":"method","name":"description_of","children":[],"call":["object inspect ","object description ","Matchers  is_a_describable_matcher? ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers Composable values_match?":{"type":"method","name":"values_match?","children":[],"call":["Support FuzzyMatcher  values_match? "," with_matchers_cloned "]}," RSpec Matchers Composable ===":{"type":"method","name":"===","children":[],"call":[" matches? "]}," RSpec Matchers Composable or":{"type":"method","name":"or","children":[],"call":["BuiltIn Compound Or  new "]}," RSpec Matchers Composable and":{"type":"method","name":"and","children":[],"call":["BuiltIn Compound And  new "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs negative_failure_reason":{"type":"method","name":"negative_failure_reason","children":[],"call":["yielded with expected arguments + + ","@actual inspect ","yielded with expected arguments + "," surface_descriptions_in inspect "," surface_descriptions_in ","@probe has_block? ","@actual_formatted join "," actual_formatted "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs positive_failure_reason":{"type":"method","name":"positive_failure_reason","children":[],"call":["yielded with unexpected arguments + + ","@actual inspect ","yielded with unexpected arguments + "," surface_descriptions_in inspect "," surface_descriptions_in ","@probe has_block? ","@actual_formatted join "," actual_formatted "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs expected_arg_description":{"type":"method","name":"expected_arg_description","children":[],"call":["(send\n  (ivar :@expected) :map) join "," description_of ","@expected map "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" negative_failure_reason ","expected given block not to yield successively with arguments, but yielded with expected arguments + + ","@actual inspect ","expected given block not to yield successively with arguments, but yielded with expected arguments + "," surface_descriptions_in inspect "," surface_descriptions_in "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs failure_message":{"type":"method","name":"failure_message","children":[],"call":[" positive_failure_reason ","expected given block to yield successively with arguments, but yielded with unexpected arguments + + ","@actual inspect ","expected given block to yield successively with arguments, but yielded with unexpected arguments + "," surface_descriptions_in inspect "," surface_descriptions_in "]}," RSpec Matchers BuiltIn YieldSuccessiveArgs does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@probe has_block? "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn YieldWithArgs expected_arg_description":{"type":"method","name":"expected_arg_description","children":[],"call":["(send\n  (ivar :@expected) :map) join "," description_of ","@expected map "]}," RSpec Matchers BuiltIn YieldWithArgs failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" negative_failure_reason "]}," RSpec Matchers BuiltIn YieldWithArgs failure_message":{"type":"method","name":"failure_message","children":[],"call":[" positive_failure_reason "]}," RSpec Matchers BuiltIn YieldWithArgs does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@probe has_block? "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn YieldWithNoArgs negative_failure_reason":{"type":"method","name":"negative_failure_reason","children":[],"call":["@probe has_block? "]}," RSpec Matchers BuiltIn YieldWithNoArgs positive_failure_reason":{"type":"method","name":"positive_failure_reason","children":[],"call":["@probe single_yield_args inspect ","@probe single_yield_args ","@probe num_yields zero? ","@probe num_yields ","@probe has_block? "," description_of "]}," RSpec Matchers BuiltIn YieldWithNoArgs failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" negative_failure_reason "]}," RSpec Matchers BuiltIn YieldWithNoArgs failure_message":{"type":"method","name":"failure_message","children":[],"call":[" positive_failure_reason "," failure_reason "]}," RSpec Matchers BuiltIn YieldWithNoArgs does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@probe has_block? "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn YieldControl failure_reason":{"type":"method","name":"failure_reason","children":[],"call":[" human_readable_count "," human_readable_expecation_type ","@probe has_block? "," count_failure_reason "," count_expectation_description ","@probe num_yields == ","@probe num_yields "," human_readable_expectation_type "]}," RSpec Matchers BuiltIn YieldControl failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["expected given block not to yield control + "," failure_reason ","failure_message << "," relativity_failure_message ","expected given block not to yield control tap "]}," RSpec Matchers BuiltIn YieldControl failure_message":{"type":"method","name":"failure_message","children":[],"call":["expected given block to yield control + "," failure_reason ","failure_message << "," relativity_failure_message ","expected given block to yield control tap "]}," RSpec Matchers BuiltIn YieldControl does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@probe has_block? "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn YieldProbe has_block?":{"type":"method","name":"has_block?","children":[],"call":["Proc  === "]}," RSpec Matchers BuiltIn ThrowSymbol actual_result":{"type":"method","name":"actual_result","children":[],"call":[" caught ","Proc  === "]}," RSpec Matchers BuiltIn ThrowSymbol failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" actual_result "," expected "," caught "]}," RSpec Matchers BuiltIn ThrowSymbol failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual_result "," expected "," caught "]}," RSpec Matchers BuiltIn ThrowSymbol does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["Proc  === "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn StartAndEndWith actual_is_unordered":{"type":"method","name":"actual_is_unordered","children":[],"call":["ArgumentError  new "," actual inspect "," actual "]}," RSpec Matchers BuiltIn StartAndEndWith match":{"type":"method","name":"match","children":[],"call":[" element_matches? "," subset_matches? ","expected respond_to? ","actual respond_to? ","(send\n  (const nil :Struct) :===\n  (lvar :expected)) ! ","Struct  === "]}," RSpec Matchers BuiltIn StartAndEndWith description":{"type":"method","name":"description","children":[],"call":[" surface_descriptions_in inspect "," surface_descriptions_in "," expected "," name_to_sentence ","Hash  === "]}," RSpec Matchers BuiltIn StartAndEndWith failure_message":{"type":"method","name":"failure_message","children":[],"call":["msg << "," actual respond_to? ! "," actual respond_to? "," actual "," tap "]}," RSpec Matchers BuiltIn Satisfy failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" description "," actual_formatted "]}," RSpec Matchers BuiltIn Satisfy failure_message":{"type":"method","name":"failure_message","children":[],"call":[" description "," actual_formatted "]}," RSpec Matchers BuiltIn RespondTo failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" failure_message sub "," failure_message "]}," RSpec Matchers BuiltIn RespondTo failure_message":{"type":"method","name":"failure_message","children":[],"call":[" with_arity ","(send\n  (ivar :@failing_method_names) :collect) join ","name inspect ","@failing_method_names collect ","@actual inspect ","(send\n  (ivar :@failing_method_names) :map) join ","@failing_method_names map "," description_of "," actual_formatted "]}," RSpec Matchers BuiltIn RaiseError raise_message_already_set":{"type":"method","name":"raise_message_already_set","children":[],"call":[" raise "]}," RSpec Matchers BuiltIn RaiseError prevent_invalid_expectations":{"type":"method","name":"prevent_invalid_expectations","children":[],"call":[" raise ","ArgumentError  new "," expecting_specific_exception? "]}," RSpec Matchers BuiltIn RaiseError block_matches?":{"type":"method","name":"block_matches?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError error_and_message_match?":{"type":"method","name":"error_and_message_match?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError expectation_matched?":{"type":"method","name":"expectation_matched?","children":[],"call":[" block_matches? "," error_and_message_match? "]}," RSpec Matchers BuiltIn RaiseError failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" given_error "," expected_error "]}," RSpec Matchers BuiltIn RaiseError failure_message":{"type":"method","name":"failure_message","children":[],"call":[" given_error "," expected_error ","@actual_error message "," actual_error_message "]}," RSpec Matchers BuiltIn RaiseError with_message":{"type":"method","name":"with_message","children":[],"call":[" raise_message_already_set "]}," RSpec Matchers BuiltIn CaptureStderr capture":{"type":"method","name":"capture","children":[],"call":[]}," RSpec Matchers BuiltIn CaptureStderr name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Matchers BuiltIn CaptureStdout capture":{"type":"method","name":"capture","children":[],"call":[]}," RSpec Matchers BuiltIn CaptureStdout name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Matchers BuiltIn NullCapture capture":{"type":"method","name":"capture","children":[],"call":[]}," RSpec Matchers BuiltIn NullCapture name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Matchers BuiltIn Output actual_output_description":{"type":"method","name":"actual_output_description","children":[],"call":["@actual inspect "," captured? "," actual_formatted "]}," RSpec Matchers BuiltIn Output negative_failure_reason":{"type":"method","name":"negative_failure_reason","children":[],"call":[" actual_output_description ","Proc  === "]}," RSpec Matchers BuiltIn Output positive_failure_reason":{"type":"method","name":"positive_failure_reason","children":[],"call":[" actual_output_description ","Proc  === "]}," RSpec Matchers BuiltIn Output captured?":{"type":"method","name":"captured?","children":[],"call":["@actual length > ","@actual length "]}," RSpec Matchers BuiltIn Output supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Output diffable?":{"type":"method","name":"diffable?","children":[],"call":[]}," RSpec Matchers BuiltIn Output description":{"type":"method","name":"description","children":[],"call":["@stream_capturer name "," description_of "]}," RSpec Matchers BuiltIn Output failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" negative_failure_reason "," description "]}," RSpec Matchers BuiltIn Output failure_message":{"type":"method","name":"failure_message","children":[],"call":[" positive_failure_reason "," description "," actual_description "]}," RSpec Matchers BuiltIn Output to_stderr":{"type":"method","name":"to_stderr","children":[],"call":[]}," RSpec Matchers BuiltIn Output to_stdout":{"type":"method","name":"to_stdout","children":[],"call":[]}," RSpec Matchers BuiltIn Output does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["Proc  === "," matches? ! "," matches? "]}," RSpec Matchers BuiltIn Output matches?":{"type":"method","name":"matches?","children":[],"call":[" captured? "," values_match? ","@stream_capturer capture ","Proc  === "]}," RSpec Matchers BuiltIn Output initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Match description":{"type":"method","name":"description","children":[],"call":[" surface_descriptions_in inspect "," surface_descriptions_in "," expected ","@expected match "," actual "]}," RSpec Matchers BuiltIn Include actual_collection_includes?":{"type":"method","name":"actual_collection_includes?","children":[],"call":[" values_match? "," actual any? "," actual "," actual respond_to? "," actual include? "]}," RSpec Matchers BuiltIn Include actual_hash_has_key?":{"type":"method","name":"actual_hash_has_key?","children":[],"call":[" values_match? "," actual keys any? "," actual keys "," actual "," actual has_key? "," actual key? "]}," RSpec Matchers BuiltIn Include actual_hash_includes?":{"type":"method","name":"actual_hash_includes?","children":[],"call":[" values_match? "," actual fetch "," actual ","(send\n  (send nil :actual) :find\n  (block\n    (send\n      (const nil :Proc) :new)\n    (args)\n    (return\n      (false)))) [] "," actual find ","Proc  new "]}," RSpec Matchers BuiltIn Include comparing_hash_to_a_subset?":{"type":"method","name":"comparing_hash_to_a_subset?","children":[],"call":["expected_item is_a? "," actual is_a? "," actual "]}," RSpec Matchers BuiltIn Include failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" improve_hash_formatting "," improve_hash_formatting + "," invalid_type_message "," format_failure_message "," invalid_object_message "]}," RSpec Matchers BuiltIn Include failure_message":{"type":"method","name":"failure_message","children":[],"call":[" improve_hash_formatting "," improve_hash_formatting + "," invalid_type_message "," format_failure_message "," invalid_object_message "]}," RSpec Matchers BuiltIn Has validity_message":{"type":"method","name":"validity_message","children":[],"call":[" predicate "," predicate_exists? ! "," predicate_exists? "," private_predicate? "]}," RSpec Matchers BuiltIn Has predicate_matches?":{"type":"method","name":"predicate_matches?","children":[],"call":["@actual __send__ "," predicate "]}," RSpec Matchers BuiltIn Has predicate_exists?":{"type":"method","name":"predicate_exists?","children":[],"call":["@actual respond_to? "," predicate "]}," RSpec Matchers BuiltIn Has private_predicate?":{"type":"method","name":"private_predicate?","children":[],"call":["@actual private_methods include? "," predicate ","@actual private_methods "," predicate to_s "]}," RSpec Matchers BuiltIn Has predicate_accessible?":{"type":"method","name":"predicate_accessible?","children":[],"call":[" predicate_exists? "," private_predicate? ! "," private_predicate? "]}," RSpec Matchers BuiltIn Has failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" failure_message_args_description "," predicate "," validity_message "]}," RSpec Matchers BuiltIn Has failure_message":{"type":"method","name":"failure_message","children":[],"call":[" failure_message_args_description "," predicate "," validity_message "]}," RSpec Matchers BuiltIn Has does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" predicate_matches? ! "," predicate_matches? "," predicate_accessible? "]}," RSpec Matchers BuiltIn Exist ExistenceTest predicates":{"type":"method","name":"predicates","children":[],"call":[" actual respond_to? "," actual ","(sym :exist?) select "," deprecated ! "," deprecated "]}," RSpec Matchers BuiltIn Exist ExistenceTest existence_values":{"type":"method","name":"existence_values","children":[],"call":[" actual __send__ "," expected "," actual "," predicates map "," predicates "]}," RSpec Matchers BuiltIn Exist ExistenceTest uniq_truthy_values":{"type":"method","name":"uniq_truthy_values","children":[],"call":["(send\n  (send nil :existence_values) :map) uniq ","v ! ! ","v ! "," existence_values map "," existence_values "]}," RSpec Matchers BuiltIn Exist ExistenceTest validity_message":{"type":"method","name":"validity_message","children":[],"call":[" existence_values last "," existence_values "," existence_values first "," uniq_truthy_values size "," uniq_truthy_values "]}," RSpec Matchers BuiltIn Exist ExistenceTest actual_exists?":{"type":"method","name":"actual_exists?","children":[],"call":[" existence_values first "," existence_values "]}," RSpec Matchers BuiltIn Exist ExistenceTest valid_test?":{"type":"method","name":"valid_test?","children":[],"call":[" uniq_truthy_values size == "," uniq_truthy_values size "," uniq_truthy_values "]}," RSpec Matchers BuiltIn Exist failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["@test validity_message ","@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn Exist failure_message":{"type":"method","name":"failure_message","children":[],"call":["@test validity_message ","@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn Exist does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@test actual_exists? ! ","@test actual_exists? ","@test valid_test? ","ExistenceTest  new ","ExistenceTest  new  actual_exists? ! ","ExistenceTest  new  actual_exists? ","ExistenceTest  new  valid_test? "]}," RSpec Matchers BuiltIn Equal detailed_failure_message":{"type":"method","name":"detailed_failure_message","children":[],"call":[" inspect_object "," actual "," expected "]}," RSpec Matchers BuiltIn Equal simple_failure_message":{"type":"method","name":"simple_failure_message","children":[],"call":[" actual_inspected "," expected inspect "," expected "," inspect_object "," actual "," expected_formatted "]}," RSpec Matchers BuiltIn Equal actual_inspected":{"type":"method","name":"actual_inspected","children":[],"call":[" inspect_object "," actual "," actual inspect ","LITERAL_SINGLETONS  include? "," actual_formatted "]}," RSpec Matchers BuiltIn Equal expected_is_a_literal_singleton?":{"type":"method","name":"expected_is_a_literal_singleton?","children":[],"call":["LITERAL_SINGLETONS  include? "," expected "]}," RSpec Matchers BuiltIn Equal failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" inspect_object "," expected "," actual "]}," RSpec Matchers BuiltIn Equal failure_message":{"type":"method","name":"failure_message","children":[],"call":[" detailed_failure_message "," simple_failure_message "," expected_is_a_literal_singleton? "]}," RSpec Matchers BuiltIn Eql failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "," actual_formatted "," expected_formatted "]}," RSpec Matchers BuiltIn Eql failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual inspect "," actual "," expected inspect "," expected "," actual_formatted "," expected_formatted "]}," RSpec Matchers BuiltIn Eq format_date_time":{"type":"method","name":"format_date_time","children":[],"call":["date_time inspect ","date_time strftime "]}," RSpec Matchers BuiltIn Eq format_time":{"type":"method","name":"format_time","children":[],"call":["time strftime ","%06d % ","time usec ","%09d % ","time nsec "]}," RSpec Matchers BuiltIn Eq format_object":{"type":"method","name":"format_object","children":[],"call":["object inspect ","object to_s ","BigDecimal  === "," format_date_time ","DateTime  === "," format_time ","Time  === "]}," RSpec Matchers BuiltIn Eq description":{"type":"method","name":"description","children":[],"call":["@expected inspect "," name_to_sentence "," expected_formatted "]}," RSpec Matchers BuiltIn Eq failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" format_object "," actual "," expected "," actual_formatted "," expected_formatted "]}," RSpec Matchers BuiltIn Eq failure_message":{"type":"method","name":"failure_message","children":[],"call":[" format_object "," actual "," expected "," actual_formatted "," expected_formatted "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer apply_pairing_to":{"type":"method","name":"apply_pairing_to","children":[],"call":["accum []= ","original_matches [] - ","original_matches [] ","indeterminates inject "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer best_solution_for_pairing":{"type":"method","name":"best_solution_for_pairing","children":[],"call":[" solution + "," class new find_best_solution "," class new "," class "," solution ","modified_actuals delete "," apply_pairing_to "," actual_to_expected_matched_indexes "," solution indeterminate_actual_indexes ","modified_expecteds delete "," expected_to_actual_matched_indexes "," solution indeterminate_expected_indexes "," apply_pairing_to  delete "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer reciprocal_single_match?":{"type":"method","name":"reciprocal_single_match?","children":[],"call":["other_list [] == ","other_list [] ","matches first ","matches one? "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer categorize_indexes":{"type":"method","name":"categorize_indexes","children":[],"call":["indeterminate << "," reciprocal_single_match? ! "," reciprocal_single_match? ","unmatched << ","matches empty? ","indexes_to_categorize each_pair "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer worse_than?":{"type":"method","name":"worse_than?","children":[],"call":[" unmatched_item_count > ","other unmatched_item_count "," unmatched_item_count "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer find_best_solution":{"type":"method","name":"find_best_solution","children":[],"call":["best_solution_so_far worse_than? ","solution ideal? "," best_solution_for_pairing ","actuals each "," expected_to_actual_matched_indexes [] "," expected_to_actual_matched_indexes "," solution indeterminate_expected_indexes first "," solution indeterminate_expected_indexes "," solution "," solution candidate? ","best_ best_solution_for_pairing _so_far worse_than? "," best_solution_for_pairing  ideal? "," best_ best_solution_for_pairing _for_pairing "," expected_to_actual_matched_indexes []  each ","  best_solution_for_pairing  indeterminate_expected_indexes first "," solution indeterminate_ solution indeterminate_expected_indexes first es first ","  best_solution_for_pairing  indeterminate_expected_indexes "," solution indeterminate_ solution indeterminate_expected_indexes first es ","  best_solution_for_pairing  ","  best_solution_for_pairing  candidate? "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer initialize":{"type":"method","name":"initialize","children":[],"call":["Solution  new "," categorize_indexes "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer +":{"type":"method","name":"+","children":[],"call":[" class new "," unmatched_actual_indexes + ","derived_candidate_solution unmatched_actual_indexes "," unmatched_actual_indexes "," unmatched_expected_indexes + ","derived_candidate_solution unmatched_expected_indexes "," unmatched_expected_indexes "," class "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer unmatched_item_count":{"type":"method","name":"unmatched_item_count","children":[],"call":[" unmatched_expected_indexes count + "," unmatched_actual_indexes count "," unmatched_actual_indexes "," unmatched_expected_indexes count "," unmatched_expected_indexes "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer ideal?":{"type":"method","name":"ideal?","children":[],"call":[" unmatched_actual_indexes empty? "," unmatched_actual_indexes "," unmatched_expected_indexes empty? "," unmatched_expected_indexes "," candidate? "]}," RSpec Matchers BuiltIn ContainExactly PairingsMaximizer candidate?":{"type":"method","name":"candidate?","children":[],"call":[" indeterminate_actual_indexes empty? "," indeterminate_actual_indexes "," indeterminate_expected_indexes empty? "," indeterminate_expected_indexes "]}," RSpec Matchers BuiltIn ContainExactly pairings_maximizer":{"type":"method","name":"pairings_maximizer","children":[],"call":["PairingsMaximizer  new ","actual_matches [] << ","actual_matches [] ","expected_matches [] << ","expected_matches [] ","a == ","e === "," actual each_with_index "," actual "," expected each_with_index "," expected "," values_match? ","Hash  [] ","Array  new "," actual size "," expected size ","Hash  []  [] << ","Hash  []  [] "]}," RSpec Matchers BuiltIn ContainExactly best_solution":{"type":"method","name":"best_solution","children":[],"call":[" pairings_maximizer find_best_solution "," pairings_maximizer "]}," RSpec Matchers BuiltIn ContainExactly extra_items":{"type":"method","name":"extra_items","children":[],"call":[" actual [] "," actual "," best_solution unmatched_actual_indexes map "," best_solution unmatched_actual_indexes "," best_solution "]}," RSpec Matchers BuiltIn ContainExactly missing_items":{"type":"method","name":"missing_items","children":[],"call":[" expected [] "," expected "," best_solution unmatched_expected_indexes map "," best_solution unmatched_expected_indexes "," best_solution "]}," RSpec Matchers BuiltIn ContainExactly safe_sort":{"type":"method","name":"safe_sort","children":[],"call":["array sort "]}," RSpec Matchers BuiltIn ContainExactly convert_actual_to_an_array":{"type":"method","name":"convert_actual_to_an_array","children":[],"call":[" actual to_a "," actual "," actual respond_to? "," enumerable? "," actual to_ary "," to_a_disallowed? ! "," to_a_disallowed? "," should_enumerate? "]}," RSpec Matchers BuiltIn ContainExactly match_when_sorted?":{"type":"method","name":"match_when_sorted?","children":[],"call":[" values_match? "," safe_sort "," actual "," expected "]}," RSpec Matchers BuiltIn ContainExactly match":{"type":"method","name":"match","children":[],"call":[" missing_items empty? "," missing_items "," extra_items empty? "," extra_items "," match_when_sorted? "," convert_actual_to_an_array "]}," RSpec Matchers BuiltIn ContainExactly description":{"type":"method","name":"description","children":[],"call":[" to_sentence "," surface_descriptions_in "," expected "," _pretty_print ","EnglishPhrasing  list ","EnglishPhrasing  EnglishPhrasing  list  "]}," RSpec Matchers BuiltIn ContainExactly failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" to_sentence "," surface_descriptions_in "," expected "," actual inspect "," actual "," actual_formatted ","EnglishPhrasing  list ","EnglishPhrasing  EnglishPhrasing  list  "]}," RSpec Matchers BuiltIn ContainExactly failure_message":{"type":"method","name":"failure_message","children":[],"call":["expected a collection that can be converted to an array with  + "," actual inspect "," actual "," safe_sort inspect "," safe_sort "," extra_items "," extra_items empty? "," surface_descriptions_in "," missing_items "," missing_items empty? "," expected ","Array  === "," actual_formatted "," generate_failure_message "," description_of "]}," RSpec Matchers BuiltIn Compound Or conjunction":{"type":"method","name":"conjunction","children":[],"call":[]}," RSpec Matchers BuiltIn Compound Or match":{"type":"method","name":"match","children":[],"call":[" matcher_2 matches? "," matcher_2 "," matcher_1 matches? "," matcher_1 "," matcher_2_matches? "," matcher_1_matches? "]}," RSpec Matchers BuiltIn Compound Or failure_message":{"type":"method","name":"failure_message","children":[],"call":[" compound_failure_message "]}," RSpec Matchers BuiltIn Compound And conjunction":{"type":"method","name":"conjunction","children":[],"call":[]}," RSpec Matchers BuiltIn Compound And match":{"type":"method","name":"match","children":[],"call":[" matcher_2 matches? "," matcher_2 "," matcher_1 matches? "," matcher_1 "," matcher_2_matches? "," matcher_1_matches? "]}," RSpec Matchers BuiltIn Compound And failure_message":{"type":"method","name":"failure_message","children":[],"call":[" compound_failure_message "," matcher_1 failure_message "," matcher_1 "," matcher_2 failure_message "," matcher_2 "," matcher_2_matches? "," matcher_1_matches? "]}," RSpec Matchers BuiltIn Compound singleline_message":{"type":"method","name":"singleline_message","children":[],"call":["(lvar :message_1) join "," conjunction "]}," RSpec Matchers BuiltIn Compound multiline?":{"type":"method","name":"multiline?","children":[],"call":["message lines count > ","message lines count ","message lines "]}," RSpec Matchers BuiltIn Compound multiline_message":{"type":"method","name":"multiline_message","children":[],"call":["(send nil :indent_multiline_message\n  (send\n    (lvar :message_1) :sub\n    (regexp\n      (str \"\\\\n+\\\\z\")\n      (regopt))\n    (str \"\"))) join "," indent_multiline_message ","message_2 sub "," conjunction ","message_1 sub "]}," RSpec Matchers BuiltIn Compound compound_failure_message":{"type":"method","name":"compound_failure_message","children":[],"call":[" singleline_message "," multiline_message "," multiline? "," matcher_2 failure_message "," matcher_2 "," matcher_1 failure_message "," matcher_1 "," indent_multiline_message "," matcher_2 failure_message sub "," conjunction "," matcher_1 failure_message sub "]}," RSpec Matchers BuiltIn Compound indent_multiline_message":{"type":"method","name":"indent_multiline_message","children":[],"call":["(send\n  (send\n    (lvar :message) :lines) :map) join ","    + ","line =~ ","message lines map ","message lines "]}," RSpec Matchers BuiltIn Compound initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@matcher_2 clone ","@matcher_1 clone ","@matcher_2 clone  clone ","@matcher_1 clone  clone "]}," RSpec Matchers BuiltIn Compound description":{"type":"method","name":"description","children":[],"call":[" singleline_message "," matcher_2 description "," matcher_2 "," matcher_1 description "," matcher_1 "," conjunction "]}," RSpec Matchers BuiltIn Compound does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" raise "," conjunction "]}," RSpec Matchers BuiltIn Compound initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn ChangeDetails evaluate_value_proc":{"type":"method","name":"evaluate_value_proc","children":[],"call":["val dup ","@value_proc call ","@receiver __send__ ","value_proc call "," lambda ","@value_proc call  dup ","value_proc call  dup ","@@value_proc call ue_proc call ","@value_proc call ue_proc call ","value_proc call ue_proc call "]}," RSpec Matchers BuiltIn ChangeDetails actual_delta":{"type":"method","name":"actual_delta","children":[],"call":["@actual_after - "]}," RSpec Matchers BuiltIn ChangeDetails changed?":{"type":"method","name":"changed?","children":[],"call":["@actual_before != ","@before_hash != ","@actual_after hash "]}," RSpec Matchers BuiltIn ChangeDetails perform_change":{"type":"method","name":"perform_change","children":[],"call":[" evaluate_value_proc ","event_proc call ","@actual_after hash ","Proc  === "," block_given? ","@actual_before hash "," evaluate_value_proc  hash "]}," RSpec Matchers BuiltIn ChangeDetails initialize":{"type":"method","name":"initialize","children":[],"call":["receiver __send__ "," lambda "," raise ","message ! "]}," RSpec Matchers BuiltIn ChangeToValue change_description":{"type":"method","name":"change_description","children":[],"call":[" description_of "]}," RSpec Matchers BuiltIn ChangeToValue does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" raise "]}," RSpec Matchers BuiltIn ChangeToValue from":{"type":"method","name":"from","children":[],"call":[" description_of "]}," RSpec Matchers BuiltIn ChangeToValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn ChangeFromValue change_description":{"type":"method","name":"change_description","children":[],"call":[" description_of "]}," RSpec Matchers BuiltIn ChangeFromValue failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" did_change_failure "," before_value_failure "," matches_before? "," not_given_a_block_failure ","Proc  === "]}," RSpec Matchers BuiltIn ChangeFromValue does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" matches_before? ","@change_details changed? ! ","@change_details changed? ","@change_details perform_change ","Proc  === "," raise "," perform_change "]}," RSpec Matchers BuiltIn ChangeFromValue to":{"type":"method","name":"to","children":[],"call":[" description_of "]}," RSpec Matchers BuiltIn ChangeFromValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn SpecificValuesChange not_given_a_block_failure":{"type":"method","name":"not_given_a_block_failure","children":[],"call":[" change_description ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange did_change_failure":{"type":"method","name":"did_change_failure","children":[],"call":[" description_of ","@change_details actual_after ","@change_details actual_before ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange did_not_change_failure":{"type":"method","name":"did_not_change_failure","children":[],"call":[" change_description ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange after_value_failure":{"type":"method","name":"after_value_failure","children":[],"call":[" description_of ","@change_details actual_after ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange before_value_failure":{"type":"method","name":"before_value_failure","children":[],"call":[" description_of ","@change_details actual_before ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange matches_after?":{"type":"method","name":"matches_after?","children":[],"call":[" values_match? ","@change_details actual_after "]}," RSpec Matchers BuiltIn SpecificValuesChange matches_before?":{"type":"method","name":"matches_before?","children":[],"call":[" values_match? ","@change_details actual_before "]}," RSpec Matchers BuiltIn SpecificValuesChange supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn SpecificValuesChange failure_message":{"type":"method","name":"failure_message","children":[],"call":[" after_value_failure "," did_not_change_failure ","@change_details changed? "," before_value_failure "," matches_before? "," not_given_a_block_failure ","Proc  === "]}," RSpec Matchers BuiltIn SpecificValuesChange description":{"type":"method","name":"description","children":[],"call":[" change_description ","@change_details message ","@change_details value_representation "]}," RSpec Matchers BuiltIn SpecificValuesChange matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_after? "," matches_before? ","@change_details changed? ","@change_details perform_change ","Proc  === "," perform_change "]}," RSpec Matchers BuiltIn SpecificValuesChange initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn ChangeRelatively failure_reason":{"type":"method","name":"failure_reason","children":[],"call":[" description_of ","@change_details actual_delta ","Proc  === "]}," RSpec Matchers BuiltIn ChangeRelatively supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn ChangeRelatively description":{"type":"method","name":"description","children":[],"call":[" description_of ","@relativity to_s gsub ","@relativity to_s ","@change_details message ","@relativity to_s tr ","@change_details value_representation "]}," RSpec Matchers BuiltIn ChangeRelatively does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" raise "]}," RSpec Matchers BuiltIn ChangeRelatively matches?":{"type":"method","name":"matches?","children":[],"call":["@comparer call ","@change_details actual_delta ","@change_details perform_change ","Proc  === "]}," RSpec Matchers BuiltIn ChangeRelatively failure_message":{"type":"method","name":"failure_message","children":[],"call":[" failure_reason "," description_of ","@relativity to_s gsub ","@relativity to_s ","@change_details message ","(str \"expected \") + ","@change_details actual_delta ","@relativity to_s tr ","@change_details value_representation "]}," RSpec Matchers BuiltIn ChangeRelatively initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Change negative_failure_reason":{"type":"method","name":"negative_failure_reason","children":[],"call":[" description_of ","@change_details actual_after ","@change_details actual_before ","Proc  === "," change_details actual_after "," change_details "," change_details actual_before "]}," RSpec Matchers BuiltIn Change positive_failure_reason":{"type":"method","name":"positive_failure_reason","children":[],"call":[" description_of ","@change_details actual_before ","Proc  === "," change_details actual_before "," change_details "]}," RSpec Matchers BuiltIn Change failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" negative_failure_reason ","@change_details message "," description_of ","@change_details actual_after ","@change_details actual_before "," change_details value_representation "," change_details "]}," RSpec Matchers BuiltIn Change failure_message":{"type":"method","name":"failure_message","children":[],"call":[" positive_failure_reason ","@change_details message "," description_of ","@change_details actual_before "," change_details value_representation "," change_details "]}," RSpec Matchers BuiltIn BeWithin not_numeric_clause":{"type":"method","name":"not_numeric_clause","children":[],"call":[" numeric? "]}," RSpec Matchers BuiltIn BeWithin numeric?":{"type":"method","name":"numeric?","children":[],"call":["@actual respond_to? "]}," RSpec Matchers BuiltIn BeWithin failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" description ","@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn BeWithin failure_message":{"type":"method","name":"failure_message","children":[],"call":[" not_numeric_clause "," description ","@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn BeBetween compare":{"type":"method","name":"compare","children":[],"call":["@actual __send__ "]}," RSpec Matchers BuiltIn BeBetween not_comparable_clause":{"type":"method","name":"not_comparable_clause","children":[],"call":[" comparable? "]}," RSpec Matchers BuiltIn BeBetween comparable?":{"type":"method","name":"comparable?","children":[],"call":["@actual respond_to? "]}," RSpec Matchers BuiltIn BeBetween description":{"type":"method","name":"description","children":[],"call":["@max inspect ","@min inspect "," description_of "]}," RSpec Matchers BuiltIn BeBetween failure_message":{"type":"method","name":"failure_message","children":[],"call":[" not_comparable_clause "]}," RSpec Matchers BuiltIn BeBetween matches?":{"type":"method","name":"matches?","children":[],"call":[" compare "," comparable? "]}," RSpec Matchers BuiltIn BeBetween exclusive":{"type":"method","name":"exclusive","children":[],"call":[]}," RSpec Matchers BuiltIn BeBetween inclusive":{"type":"method","name":"inclusive","children":[],"call":[]}," RSpec Matchers BuiltIn BeBetween initialize":{"type":"method","name":"initialize","children":[],"call":[" inclusive "]}," RSpec Matchers BuiltIn BePredicate validity_message":{"type":"method","name":"validity_message","children":[],"call":[" predicate "," predicate_exists? ! "," predicate_exists? "," private_predicate? ","msg << "," predicate_accessible? "," predicate == "," actual_formatted ","(str \"expected \") dup ","(str \"expected \") dup  << "]}," RSpec Matchers BuiltIn BePredicate failure_message_expecting":{"type":"method","name":"failure_message_expecting","children":[],"call":["@predicate_matches inspect "," args_to_s "," predicate ","@actual inspect "," validity_message "," description_of "," actual_formatted "]}," RSpec Matchers BuiltIn BePredicate predicate_matches?":{"type":"method","name":"predicate_matches?","children":[],"call":[" actual __send__ "," actual "," present_tense_predicate "," predicate "," actual respond_to? "]}," RSpec Matchers BuiltIn BePredicate predicate_exists?":{"type":"method","name":"predicate_exists?","children":[],"call":[" actual respond_to? "," present_tense_predicate "," actual "," predicate "]}," RSpec Matchers BuiltIn BePredicate private_predicate?":{"type":"method","name":"private_predicate?","children":[],"call":["@actual private_methods include? "," predicate ","@actual private_methods "," predicate to_s "]}," RSpec Matchers BuiltIn BePredicate predicate_accessible?":{"type":"method","name":"predicate_accessible?","children":[],"call":[" predicate_exists? "," private_predicate? ! "," private_predicate? "," actual respond_to? "," present_tense_predicate "," actual "," predicate "]}," RSpec Matchers BuiltIn BePredicate failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" failure_message_expecting ","@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BuiltIn BePredicate failure_message":{"type":"method","name":"failure_message","children":[],"call":[" failure_message_expecting ","@result inspect "," args_to_s "," predicate "]}," RSpec Matchers BuiltIn BePredicate does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" predicate_matches? ! "," predicate_matches? "," predicate_accessible? "]}," RSpec Matchers BuiltIn BeComparedTo failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["message + ","(sym :<) include? ","@expected inspect ","@actual inspect "," expected_formatted "," actual_formatted "]}," RSpec Matchers BuiltIn BeComparedTo failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect ","@operator to_s gsub ","@operator to_s ","@expected inspect "," actual_formatted "," expected_formatted "]}," RSpec Matchers BuiltIn Be failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn Be failure_message":{"type":"method","name":"failure_message","children":[],"call":["@actual inspect "," actual_formatted "]}," RSpec Matchers BuiltIn BeNil failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[]}," RSpec Matchers BuiltIn BeNil failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual inspect "," actual "," actual_formatted "]}," RSpec Matchers BuiltIn BeFalsey failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" actual inspect "," actual "," actual_formatted "]}," RSpec Matchers BuiltIn BeFalsey failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual inspect "," actual "," actual_formatted "]}," RSpec Matchers BuiltIn BeTruthy failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" actual inspect "," actual "," actual_formatted "]}," RSpec Matchers BuiltIn BeTruthy failure_message":{"type":"method","name":"failure_message","children":[],"call":[" actual inspect "," actual "," actual_formatted "]}," RSpec Matchers BuiltIn BaseMatcher present_ivars":{"type":"method","name":"present_ivars","children":[],"call":["v to_sym "," instance_variables map "," instance_variables "]}," RSpec Matchers BuiltIn BaseMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" description ","@actual inspect "," assert_ivars "]}," RSpec Matchers BuiltIn BaseMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" description ","@actual inspect "," assert_ivars "]}," RSpec Matchers BuiltIn All initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@matcher clone ","@failed_objects clone ","@matcher clone  clone ","@failed_objects clone  clone "]}," RSpec Matchers BuiltIn All indent_multiline_message":{"type":"method","name":"indent_multiline_message","children":[],"call":["(send\n  (send\n    (lvar :message) :lines) :map) join ","    + ","line =~ ","message lines map ","message lines ","message sub ","(send\n  (send\n    (lvar :message sub ) :lines) :map) join ","message sub  lines map ","message sub  lines ","message sub  sub "]}," RSpec Matchers BuiltIn All add_new_line_if_needed":{"type":"method","name":"add_new_line_if_needed","children":[],"call":["message start_with? "]}," RSpec Matchers BuiltIn All failure_message_for_item":{"type":"method","name":"failure_message_for_item","children":[],"call":[" indent_multiline_message "," add_new_line_if_needed "]}," RSpec Matchers BuiltIn All index_failed_objects":{"type":"method","name":"index_failed_objects","children":[],"call":[" failed_objects []= ","cloned_matcher failure_message "," failed_objects ","cloned_matcher matches? "," matcher clone "," matcher "," actual each_with_index "," actual "," matcher clone  failure_message ","cloned_matcher cloned_matcher matches? ? "," matcher clone  matches? "]}," RSpec Matchers BuiltIn All match":{"type":"method","name":"match","children":[],"call":[" failed_objects empty? "," failed_objects "," index_failed_objects "," enumerable? "," iterable? "]}," RSpec Matchers BuiltIn All description":{"type":"method","name":"description","children":[],"call":[" improve_hash_formatting "," to_sentence "," surface_descriptions_in "," matcher "," description_of "]}," RSpec Matchers BuiltIn All failure_message":{"type":"method","name":"failure_message","children":[],"call":["all_messages join ","all_messages << "," failure_message_for_item "," failed_objects each "," failed_objects "," improve_hash_formatting "," enumerable? "," iterable? "]}," RSpec Matchers BuiltIn All does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" raise "]}," RSpec Matchers BuiltIn All initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers AliasedMatcher description":{"type":"method","name":"description","children":[],"call":["@description_block call "]}," RSpec Matchers AliasedMatcher method_missing":{"type":"method","name":"method_missing","children":[],"call":["AliasedMatcher  new ","return_val respond_to? "," class new "," class ","RSpec Matchers  is_a_matcher? "]}," RSpec Matchers AliasedMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Expectations Syntax warn_about_should_unless_configured":{"type":"method","name":"warn_about_should_unless_configured","children":[],"call":["RSpec  deprecate "]}," RSpec Expectations Syntax warn_about_should!":{"type":"method","name":"warn_about_should!","children":[],"call":[]}," expect":{"type":"method","name":"expect","children":[],"call":[" assert "," assertions "]}," RSpec Expectations LegacyMacherAdapter RSpec1 interface_matches?":{"type":"method","name":"interface_matches?","children":[],"call":[]}," RSpec Expectations LegacyMacherAdapter RSpec1 failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" base_matcher negative_failure_message "," base_matcher "]}," RSpec Expectations LegacyMacherAdapter RSpec1 failure_message":{"type":"method","name":"failure_message","children":[],"call":[" base_matcher failure_message "," base_matcher "]}," RSpec Expectations LegacyMacherAdapter RSpec2 interface_matches?":{"type":"method","name":"interface_matches?","children":[],"call":[]}," RSpec Expectations LegacyMacherAdapter RSpec2 failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" base_matcher failure_message_for_should_not "," base_matcher "]}," RSpec Expectations LegacyMacherAdapter RSpec2 failure_message":{"type":"method","name":"failure_message","children":[],"call":[" base_matcher failure_message_for_should "," base_matcher "]}," RSpec Expectations LegacyMacherAdapter wrap":{"type":"method","name":"wrap","children":[],"call":[]}," RSpec Expectations LegacyMacherAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" RSpec  warn_deprecation ","(str \"          |\") gsub ","CallerFilter  first_non_rspec_line ","matcher inspect ","matcher class name ","matcher class ","(str \"          |--------------------------------------------------------------------------\\n\") gsub "]}," RSpec Expectations NegativeExpectationHandler opposite_should_method":{"type":"method","name":"opposite_should_method","children":[],"call":[]}," RSpec Expectations NegativeExpectationHandler should_method":{"type":"method","name":"should_method","children":[],"call":[]}," RSpec Expectations NegativeExpectationHandler verb":{"type":"method","name":"verb","children":[],"call":[]}," RSpec Expectations NegativeExpectationHandler does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[]}," RSpec Expectations PositiveExpectationHandler opposite_should_method":{"type":"method","name":"opposite_should_method","children":[],"call":[]}," RSpec Expectations PositiveExpectationHandler should_method":{"type":"method","name":"should_method","children":[],"call":[]}," RSpec Expectations PositiveExpectationHandler verb":{"type":"method","name":"verb","children":[],"call":[]}," RSpec Expectations ExpectationHelper handle_failure":{"type":"method","name":"handle_failure","children":[],"call":[]}," RSpec Expectations ExpectationHelper setup":{"type":"method","name":"setup","children":[],"call":[]}," RSpec Expectations ExpectationHelper modern_matcher_from":{"type":"method","name":"modern_matcher_from","children":[],"call":[]}," RSpec Expectations ExpectationHelper check_message":{"type":"method","name":"check_message","children":[],"call":[]}," RSpec Expectations configuration":{"type":"method","name":"configuration","children":[],"call":[]}," RSpec Expectations Configuration reset_syntaxes_to_default":{"type":"method","name":"reset_syntaxes_to_default","children":[],"call":["RSpec Expectations Syntax  warn_about_should! "," syntax= "]}," RSpec Expectations Configuration color=":{"type":"method","name":"color=","children":[],"call":[]}," RSpec Matchers DSL DefaultImplementations failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "]}," RSpec Matchers DSL DefaultImplementations failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" expected_to_sentence "," name_to_sentence "," actual inspect "," actual "]}," RSpec Matchers DSL Macros failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":[" define_user_override "," __method__ "]}," RSpec Matchers DSL Macros failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":[" define_user_override "," __method__ "]}," RSpec Matchers DSL Macros match_for_should_not":{"type":"method","name":"match_for_should_not","children":[],"call":[" actual_arg_for "," define_user_override "]}," RSpec Matchers Configuration reset_syntaxes_to_default":{"type":"method","name":"reset_syntaxes_to_default","children":[],"call":["RSpec Expectations Syntax  warn_about_should! "," syntax= "]}," RSpec Matchers BuiltIn Output actual_description":{"type":"method","name":"actual_description","children":[],"call":["@actual inspect "," captured? "]}," RSpec Expectations EncodedString detect_source_encoding":{"type":"method","name":"detect_source_encoding","children":[],"call":["string encoding "]}," RSpec Expectations EncodedString matching_encoding":{"type":"method","name":"matching_encoding","children":[],"call":[" normalize_missing ","string force_encoding encode ","string force_encoding ","string encode "]}," RSpec Expectations EncodedString normalize_missing":{"type":"method","name":"normalize_missing","children":[],"call":["string gsub ","� force_encoding ","@encoding to_s == ","@encoding to_s "]}," RSpec Expectations EncodedString split":{"type":"method","name":"split","children":[],"call":["@string split "," matching_encoding "]}," RSpec Expectations EncodedString <<":{"type":"method","name":"<<","children":[],"call":["@string << "," matching_encoding "]}," RSpec Expectations EncodedString initialize":{"type":"method","name":"initialize","children":[],"call":[" matching_encoding "," detect_source_encoding "]}," RSpec Expectations Differ build_hunk":{"type":"method","name":"build_hunk","children":[],"call":["h file_length_difference ","Diff LCS Hunk  new tap ","Diff LCS Hunk  new "," context_lines "," actual_lines "," expected_lines "]}," RSpec Expectations Differ actual_lines":{"type":"method","name":"actual_lines","children":[],"call":["e chomp ","@actual split map! ","@actual split "]}," RSpec Expectations Differ expected_lines":{"type":"method","name":"expected_lines","children":[],"call":["e chomp ","@expected split map! ","@expected split "]}," RSpec Expectations Differ diffs":{"type":"method","name":"diffs","children":[],"call":["Diff LCS  diff "," actual_lines "," expected_lines "]}," RSpec Expectations Differ hunks":{"type":"method","name":"hunks","children":[],"call":[" build_hunk "," diffs map "," diffs "]}," RSpec Expectations DiffPresenter handle_encoding_errors":{"type":"method","name":"handle_encoding_errors","children":[],"call":["@expected source_encoding ","(str \"Could not produce a diff because the encoding of the actual string (\") + ","@actual source_encoding ","@actual source_encoding != "]}," RSpec Expectations DiffPresenter pick_encoding":{"type":"method","name":"pick_encoding","children":[],"call":["Encoding  default_external ","Encoding  compatible? "]}," RSpec Expectations DiffPresenter object_to_string":{"type":"method","name":"object_to_string","children":[],"call":["PP  pp ","object inspect ","object =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :object) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","PP  singleline_pp ","object [] ","(send\n  (send\n    (lvar :object) :keys) :sort_by) map ","k to_s ","object keys sort_by ","object keys ","Matchers Composable  surface_descriptions_in ","Matchers Composable  surface_descriptions_in  inspect ","Matchers Composable  surface_descriptions_in  =~ ","(send\n  (block\n    (send\n      (send\n        (lvar :Matchers Composable  surface_descriptions_in ) :keys) :sort_by)\n    (args\n      (arg :k))\n    (send\n      (lvar :k) :to_s)) :map) join ","Matchers Composable  surface_descriptions_in  [] ","(send\n  (send\n    (lvar :Matchers Composable  surface_descriptions_in ) :keys) :sort_by) map ","Matchers Composable  surface_descriptions_in  keys sort_by ","Matchers Composable  surface_descriptions_in  keys "]}," RSpec Expectations DiffPresenter color_diff":{"type":"method","name":"color_diff","children":[],"call":["(send\n  (send\n    (lvar :diff) :lines) :map) join "," normal "," blue ","line [] chr == ","line [] chr ","line [] "," red "," green ","diff lines map ","diff lines ","RSpec Matchers  configuration color? ","RSpec Matchers  configuration "]}," RSpec Expectations DiffPresenter normal":{"type":"method","name":"normal","children":[],"call":[" color "]}," RSpec Expectations DiffPresenter blue":{"type":"method","name":"blue","children":[],"call":[" color "]}," RSpec Expectations DiffPresenter green":{"type":"method","name":"green","children":[],"call":[" color "]}," RSpec Expectations DiffPresenter red":{"type":"method","name":"red","children":[],"call":[" color "]}," RSpec Expectations DiffPresenter color":{"type":"method","name":"color","children":[],"call":[]}," RSpec Expectations DiffPresenter format":{"type":"method","name":"format","children":[],"call":[]}," RSpec Expectations DiffPresenter add_old_hunk_to_hunk":{"type":"method","name":"add_old_hunk_to_hunk","children":[],"call":["hunk merge "]}," RSpec Expectations DiffPresenter add_to_output":{"type":"method","name":"add_to_output","children":[],"call":["output << "]}," RSpec Expectations DiffPresenter finalize_output":{"type":"method","name":"finalize_output","children":[],"call":[" add_to_output "]}," RSpec Expectations DiffPresenter hunks":{"type":"method","name":"hunks","children":[],"call":["Differ  new hunks ","Differ  new "]}," RSpec Expectations DiffPresenter diff_as_object":{"type":"method","name":"diff_as_object","children":[],"call":[" diff_as_string "," object_to_string "]}," RSpec Expectations DiffPresenter diff_as_string":{"type":"method","name":"diff_as_string","children":[],"call":[" handle_encoding_errors "," color_diff "," finalize_output "," hunks last diff to_s "," hunks last diff "," format "," hunks last "," hunks "," add_to_output ","prev_hunk diff to_s ","prev_hunk diff "," add_old_hunk_to_hunk ","current_hunk overlaps? "," hunks each_cons ","EncodedString  new "," pick_encoding "," finalize_EncodedString  new  "," add_to_EncodedString  new  "]}," RSpec Matchers BuiltIn Include invalid_type_message":{"type":"method","name":"invalid_type_message","children":[],"call":[" actual respond_to? "," actual "]}," RSpec Matchers have_attributes":{"type":"method","name":"have_attributes","children":[],"call":["BuiltIn HaveAttributes  new "]}," RSpec Matchers define_negated_matcher":{"type":"method","name":"define_negated_matcher","children":[],"call":[]}," RSpec Matchers DSL DefaultImplementations chained_method_clause_sentences":{"type":"method","name":"chained_method_clause_sentences","children":[],"call":["(send\n  (ivar :@chained_method_clauses) :map) join "," to_sentence "," split_words ","@chained_method_clauses map ","Expectations  configuration include_chain_clauses_in_custom_matcher_descriptions? ","Expectations  configuration ","EnglishPhrasing  list ","EnglishPhrasing  split_words "]}," RSpec Matchers DSL DefaultImplementations expects_call_stack_jump?":{"type":"method","name":"expects_call_stack_jump?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl thrice":{"type":"method","name":"thrice","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn ThrowSymbol expects_call_stack_jump?":{"type":"method","name":"expects_call_stack_jump?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError expects_call_stack_jump?":{"type":"method","name":"expects_call_stack_jump?","children":[],"call":[]}," RSpec Matchers BuiltIn HaveAttributes respond_to_failure_message_or":{"type":"method","name":"respond_to_failure_message_or","children":[],"call":[" improve_hash_formatting "," respond_to_matcher failure_message "," respond_to_matcher "," respond_to_failed "]}," RSpec Matchers BuiltIn HaveAttributes respond_to_matcher":{"type":"method","name":"respond_to_matcher","children":[],"call":["RespondTo  new with arguments ","RespondTo  new with ","RespondTo  new "," expected keys "," expected ","m ignoring_method_signature_failure! ","RespondTo  new with arguments tap "]}," RSpec Matchers BuiltIn HaveAttributes respond_to_attributes?":{"type":"method","name":"respond_to_attributes?","children":[],"call":["matches ! "," respond_to_matcher matches? "," actual "," respond_to_matcher "," respond_to_matcher matches?  ! "," respond_to_matcher  respond_to_matcher matches? ? "]}," RSpec Matchers BuiltIn HaveAttributes actual_has_attribute?":{"type":"method","name":"actual_has_attribute?","children":[],"call":[" values_match? "," actual __send__ "," actual ","@values fetch "]}," RSpec Matchers BuiltIn HaveAttributes perform_match":{"type":"method","name":"perform_match","children":[],"call":[" actual_has_attribute? "," expected __send__ "," expected "," cache_all_values "]}," RSpec Matchers BuiltIn HaveAttributes failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" respond_to_failure_message_or "," description "," actual_formatted ","@actual inspect "]}," RSpec Matchers BuiltIn HaveAttributes failure_message":{"type":"method","name":"failure_message","children":[],"call":[" respond_to_failure_message_or "," formatted_values "," description "," actual_formatted ","@actual inspect "]}," RSpec Matchers BuiltIn HaveAttributes description":{"type":"method","name":"description","children":[],"call":[" improve_hash_formatting ","described_items inspect "," surface_descriptions_in "," expected ","RSpec Support ObjectFormatter  format "," surface_descriptions_in  inspect "]}," RSpec Matchers BuiltIn HaveAttributes does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" perform_match "," respond_to_attributes? "]}," RSpec Matchers BuiltIn HaveAttributes matches?":{"type":"method","name":"matches?","children":[],"call":[" perform_match "," respond_to_attributes? "]}," RSpec Matchers BuiltIn HaveAttributes initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Compound NestedEvaluator matcher_expects_call_stack_jump?":{"type":"method","name":"matcher_expects_call_stack_jump?","children":[],"call":[]}," RSpec Matchers BuiltIn Compound NestedEvaluator order_block_matchers":{"type":"method","name":"order_block_matchers","children":[],"call":[" raise ","@matcher_2 description ","@matcher_1 description "," class matcher_expects_call_stack_jump? "," class "]}," RSpec Matchers BuiltIn Compound NestedEvaluator inner_matcher_block":{"type":"method","name":"inner_matcher_block","children":[],"call":["@actual call "," raise ","@matcher_2 description ","@matcher_1 description ","inner_args empty? ","Proc  new ","outer_args empty? "]}," RSpec Matchers BuiltIn Compound NestedEvaluator matcher_matches?":{"type":"method","name":"matcher_matches?","children":[],"call":["@match_results fetch "," raise ","matcher description "]}," RSpec Matchers BuiltIn Compound NestedEvaluator initialize":{"type":"method","name":"initialize","children":[],"call":["@match_results []= ","outer matches? ","inner matches? "," inner_matcher_block ","Proc  new "," order_block_matchers "]}," RSpec Matchers BuiltIn Compound SequentialEvaluator matcher_matches?":{"type":"method","name":"matcher_matches?","children":[],"call":["matcher matches? "]}," RSpec Matchers BuiltIn Compound SequentialEvaluator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Compound matcher_supports_block_expectations?":{"type":"method","name":"matcher_supports_block_expectations?","children":[],"call":["matcher supports_block_expectations? "]}," RSpec Matchers BuiltIn Compound matcher_2_matches?":{"type":"method","name":"matcher_2_matches?","children":[],"call":["@evaluator matcher_matches? "," matcher_2 "," evaluator matcher_matches? "," evaluator "]}," RSpec Matchers BuiltIn Compound matcher_1_matches?":{"type":"method","name":"matcher_1_matches?","children":[],"call":["@evaluator matcher_matches? "," matcher_1 "," evaluator matcher_matches? "," evaluator "]}," RSpec Matchers BuiltIn Compound match":{"type":"method","name":"match","children":[],"call":["evaluator_klass new "," matcher_2 "," matcher_1 ","Proc  === "," supports_block_expectations? "]}," RSpec Matchers BuiltIn Compound expects_call_stack_jump?":{"type":"method","name":"expects_call_stack_jump?","children":[],"call":["NestedEvaluator  matcher_expects_call_stack_jump? "," matcher_2 "," matcher_1 "]}," RSpec Matchers BuiltIn Compound supports_block_expectations?":{"type":"method","name":"supports_block_expectations?","children":[],"call":[" matcher_supports_block_expectations? "," matcher_2 "," matcher_1 "]}," RSpec Matchers BuiltIn BaseMatcher expects_call_stack_jump?":{"type":"method","name":"expects_call_stack_jump?","children":[],"call":[]}," RSpec Matchers BuiltIn All enumerable?":{"type":"method","name":"enumerable?","children":[],"call":["Enumerable  === "]}," RSpec Matchers AliasedNegatedMatcher does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":["@base_matcher matches? "]}," RSpec Matchers AliasedNegatedMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" ! ","@base_matcher does_not_match? ","@base_matcher respond_to? "]}," RSpec Matchers AliasedMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["@description_block call "]}," RSpec Matchers AliasedMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":["@description_block call "]}," RSpec Expectations LegacyMatcherAdapter RSpec1 interface_matches?":{"type":"method","name":"interface_matches?","children":[],"call":[]}," RSpec Expectations LegacyMatcherAdapter RSpec1 failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" base_matcher negative_failure_message "," base_matcher "]}," RSpec Expectations LegacyMatcherAdapter RSpec1 failure_message":{"type":"method","name":"failure_message","children":[],"call":[" base_matcher failure_message "," base_matcher "]}," RSpec Expectations LegacyMatcherAdapter RSpec2 interface_matches?":{"type":"method","name":"interface_matches?","children":[],"call":[]}," RSpec Expectations LegacyMatcherAdapter RSpec2 failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" base_matcher failure_message_for_should_not "," base_matcher "]}," RSpec Expectations LegacyMatcherAdapter RSpec2 failure_message":{"type":"method","name":"failure_message","children":[],"call":[" base_matcher failure_message_for_should "," base_matcher "]}," RSpec Expectations LegacyMatcherAdapter wrap":{"type":"method","name":"wrap","children":[],"call":[]}," RSpec Expectations LegacyMatcherAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" RSpec  warn_deprecation ","(str \"          |\") gsub ","CallerFilter  first_non_rspec_line ","matcher inspect ","matcher class name ","matcher class "]}," RSpec Expectations Configuration include_chain_clauses_in_custom_matcher_descriptions?":{"type":"method","name":"include_chain_clauses_in_custom_matcher_descriptions?","children":[],"call":[]}," RSpec Matchers BuiltIn All iterable?":{"type":"method","name":"iterable?","children":[],"call":["@actual respond_to? "]}," RSpec Matchers BuiltIn BaseMatcher DefaultFailureMessages has_default_failure_messages?":{"type":"method","name":"has_default_failure_messages?","children":[],"call":[]}," RSpec Matchers BuiltIn BaseMatcher DefaultFailureMessages failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" description "," actual inspect "," actual ","(str \"expected \") dup "," description_of "]}," RSpec Matchers BuiltIn BaseMatcher DefaultFailureMessages failure_message":{"type":"method","name":"failure_message","children":[],"call":[" description "," actual inspect "," actual ","(str \"expected \") dup "," description_of "]}," RSpec Matchers AliasedNegatedMatcher optimal_failure_message":{"type":"method","name":"optimal_failure_message","children":[],"call":["@base_matcher __send__ ","overriden != ","@description_block call ","DefaultFailureMessages  has_default_failure_messages? ","overridden != ","@description_block call  != "]}," RSpec Matchers AliasedNegatedMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" optimal_failure_message "," __method__ "]}," RSpec Matchers AliasedNegatedMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[" optimal_failure_message "," __method__ "]}," RSpec Matchers append_features":{"type":"method","name":"append_features","children":[],"call":["RSpec  warning ","(send\n  (lvar :subclasses) :map) join ","subclasses map ","s < ","subclasses any? ","subclasses reject! ","c < ","ObjectSpace  each_object select ","ObjectSpace  each_object ","mod < ","(send\n  (lvar :(send\n  (lvar :subclasses) :map) join ) :map) join ","(send\n  (lvar :subclasses) :map) join  map ","(send\n  (lvar :subclasses) :map) join  any? ","(send\n  (lvar :subclasses) :map) join  reject! "]}," RSpec Matchers respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["method =~ ","method to_s ","method to_s  =~ ","method to_s  to_s "]}," RSpec Matchers respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["method =~ "]}," RSpec Matchers aggregate_failures":{"type":"method","name":"aggregate_failures","children":[],"call":["Expectations FailureAggregator  new aggregate ","Expectations FailureAggregator  new "]}," RSpec Matchers FailMatchers fail_including":{"type":"method","name":"fail_including","children":[],"call":[" raise_error "," a_string_including "]}," RSpec Matchers FailMatchers fail_with":{"type":"method","name":"fail_with","children":[],"call":[" raise_error "]}," RSpec Matchers FailMatchers fail":{"type":"method","name":"fail","children":[],"call":[" raise_error "]}," RSpec Matchers ExpectedsForMultipleDiffs diffs":{"type":"method","name":"diffs","children":[],"call":["(send\n  (ivar :@expected_list) :map) compact join ","(send\n  (ivar :@expected_list) :map) compact ","diff == ","diff strip empty? ","diff strip ","differ diff ","@expected_list map ","diff empty? ","differ diff  == ","differ diff  strip empty? ","differ diff  strip ","differ diff er differ diff  ","differ diff  empty? "]}," RSpec Matchers ExpectedsForMultipleDiffs truncated":{"type":"method","name":"truncated","children":[],"call":["description [] << ","description [] ","DESCRIPTION_MAX_LENGTH  - ","description length <= ","description length "]}," RSpec Matchers ExpectedsForMultipleDiffs diff_label_for":{"type":"method","name":"diff_label_for","children":[],"call":[" truncated ","RSpec Support ObjectFormatter  format "]}," RSpec Matchers ExpectedsForMultipleDiffs message_with_diff":{"type":"method","name":"message_with_diff","children":[],"call":["diff empty? "," diffs "," diffs  empty? ","  diffs s "]}," RSpec Matchers ExpectedsForMultipleDiffs for_many_matchers":{"type":"method","name":"for_many_matchers","children":[],"call":[]}," RSpec Matchers ExpectedsForMultipleDiffs from":{"type":"method","name":"from","children":[],"call":[]}," RSpec Matchers ExpectedsForMultipleDiffs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers EnglishPhrasing Array":{"type":"method","name":"Array","children":[],"call":[]}," RSpec Matchers EnglishPhrasing list":{"type":"method","name":"list","children":[],"call":[]}," RSpec Matchers EnglishPhrasing split_words":{"type":"method","name":"split_words","children":[],"call":[]}," RSpec Matchers DSL Macros assign_attributes":{"type":"method","name":"assign_attributes","children":[],"call":[" instance_variable_set ","attr_names zip "," lambda "," private "," attr_reader "]}," RSpec Matchers DSL warn_about_block_args":{"type":"method","name":"warn_about_block_args","children":[],"call":["RSpec  warning ","type == ","declarations parameters each ","declarations parameters "]}," RSpec Matchers DSL define_negated_matcher":{"type":"method","name":"define_negated_matcher","children":[],"call":[" alias_matcher "]}," RSpec Matchers DSL alias_matcher":{"type":"method","name":"alias_matcher","children":[],"call":["klass new ","matcher matcher_name= ","matcher respond_to? "," __send__ "," define_method ","options fetch ","old_desc gsub ","EnglishPhrasing  split_words "," lambda "," ruby2_keywords "," respond_to? "," __send__   __send__ _name= "," __send__  respond_to? "]}," RSpec Matchers Composable unreadable_io?":{"type":"method","name":"unreadable_io?","children":[],"call":["object each ","IO  === "]}," RSpec Matchers Composable should_enumerate?":{"type":"method","name":"should_enumerate?","children":[],"call":["subitem equal? ","item none? ","Array  === ","(send\n  (const nil :Range) :===\n  (lvar :item)) ! ","Range  === ","Enumerable  === ","String  === "]}," RSpec Matchers BuiltIn YieldWithArgs args_currently_match?":{"type":"method","name":"args_currently_match?","children":[],"call":[" surface_descriptions_in inspect "," surface_descriptions_in "," all_args_match? ","@actual empty? ! ","@actual empty? ","@expected empty? "," all_args_ all_args_match? ? "]}," RSpec Matchers BuiltIn StartOrEndWith subsets_comparable?":{"type":"method","name":"subsets_comparable?","children":[],"call":[" expected respond_to? "," expected ","Struct  === "]}," RSpec Matchers BuiltIn StartOrEndWith match":{"type":"method","name":"match","children":[],"call":[" element_matches? "," subset_matches? "," subsets_comparable? ","actual respond_to? "]}," RSpec Matchers BuiltIn StartOrEndWith description":{"type":"method","name":"description","children":[],"call":[" surface_descriptions_in inspect "," surface_descriptions_in "," expected ","EnglishPhrasing  split_words "," class matcher_name "," class ","Hash  === "," name_to_sentence "]}," RSpec Matchers BuiltIn StartOrEndWith failure_message":{"type":"method","name":"failure_message","children":[],"call":["msg << "," actual respond_to? ! "," actual respond_to? "," actual "," tap "]}," RSpec Matchers BuiltIn StartOrEndWith initialize":{"type":"method","name":"initialize","children":[],"call":["expected first ","expected length == ","expected length "]}," RSpec Matchers BuiltIn Satisfy block_representation":{"type":"method","name":"block_representation","children":[],"call":[" extract_block_snippet "," extract_ extract_block_snippet  "]}," RSpec Matchers BuiltIn Satisfy extract_block_snippet":{"type":"method","name":"extract_block_snippet","children":[],"call":["Expectations BlockSnippetExtractor  try_extracting_single_line_body_of "," matcher_name "]}," RSpec Matchers BuiltIn RespondTo ArityCheck method_signature_for":{"type":"method","name":"method_signature_for","children":[],"call":["Support MethodSignature  new ","actual instance_method "," Class  === ","method_handle owner === ","method_handle owner ","name == ","Support  method_handle_for ","Support  method_handle_for  owner === ","Support  method_handle_for  owner ","Support  Support  method_handle_for _for "]}," RSpec Matchers BuiltIn RespondTo ArityCheck verifier_for":{"type":"method","name":"verifier_for","children":[],"call":["Support StrictSignatureVerifier  new "," method_signature_for "]}," RSpec Matchers BuiltIn RespondTo ArityCheck matches?":{"type":"method","name":"matches?","children":[],"call":[" verifier_for with_expectation valid? "," verifier_for with_expectation "," verifier_for ","@expectation empty? "]}," RSpec Matchers BuiltIn RespondTo ArityCheck initialize":{"type":"method","name":"initialize","children":[],"call":["expectation expect_arbitrary_keywords= ","expectation expect_unlimited_arguments= ","expectation keywords= ","expectation min_count= ","expectation max_count= ","expected_arity max ","expected_arity min ","expected_arity is_a? ","Support MethodSignatureExpectation  new ","Support MethodSignatureExpectation  new  expect_arbitrary_keywords= ","Support MethodSignatureExpectation  new  expect_unlimited_arguments= ","Support MethodSignatureExpectation  new  keywords= ","Support MethodSignatureExpectation  new  min_count= ","Support MethodSignatureExpectation  new  max_count= "]}," RSpec Matchers BuiltIn RespondTo with_keywords_string":{"type":"method","name":"with_keywords_string","children":[],"call":["@expected_keywords count == ","@expected_keywords count ","@expected_keywords last inspect ","@expected_keywords last ","@expected_keywords [] map join ","@expected_keywords [] map ","@expected_keywords [] ","@expected_keywords map join ","@expected_keywords map ","@expected_keywords first inspect ","@expected_keywords first "]}," RSpec Matchers BuiltIn RespondTo with_arity_string":{"type":"method","name":"with_arity_string","children":[],"call":["@expected_arity == "]}," RSpec Matchers BuiltIn RespondTo ignoring_method_signature_failure!":{"type":"method","name":"ignoring_method_signature_failure!","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo with_unlimited_arguments":{"type":"method","name":"with_unlimited_arguments","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo with_any_keywords":{"type":"method","name":"with_any_keywords","children":[],"call":[]}," RSpec Matchers BuiltIn RespondTo with_keywords":{"type":"method","name":"with_keywords","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError warning":{"type":"method","name":"warning","children":[],"call":[" description_of "]}," RSpec Matchers BuiltIn RaiseError warn_about_negative_false_positive!":{"type":"method","name":"warn_about_negative_false_positive!","children":[],"call":[" handle_warning "]}," RSpec Matchers BuiltIn RaiseError warn_about_nil_error!":{"type":"method","name":"warn_about_nil_error!","children":[],"call":[" handle_warning "," warning "]}," RSpec Matchers BuiltIn RaiseError warn_about_bare_error!":{"type":"method","name":"warn_about_bare_error!","children":[],"call":[" handle_warning "," warning "]}," RSpec Matchers BuiltIn RaiseError warn_about_nil_error?":{"type":"method","name":"warn_about_nil_error?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError warn_about_bare_error?":{"type":"method","name":"warn_about_bare_error?","children":[],"call":["@block nil? "]}," RSpec Matchers BuiltIn RaiseError handle_warning":{"type":"method","name":"handle_warning","children":[],"call":["RSpec Expectations  configuration false_positives_handler call ","RSpec Expectations  configuration false_positives_handler ","RSpec Expectations  configuration "]}," RSpec Matchers BuiltIn RaiseError warn_for_negative_false_positives!":{"type":"method","name":"warn_for_negative_false_positives!","children":[],"call":[" warn_about_negative_false_positive! "," expecting_specific_exception? "]}," RSpec Matchers BuiltIn RaiseError ready_to_eval_block?":{"type":"method","name":"ready_to_eval_block?","children":[],"call":[]}," RSpec Matchers BuiltIn CaptureStreamToTempfile capture":{"type":"method","name":"capture","children":[],"call":["captured_stream unlink ","captured_stream close "," stream reopen "," stream ","captured_stream read ","captured_stream rewind ","block call ","captured_stream sync= ","Tempfile  new "," name "," stream clone "," require ","Tempfile  new  unlink ","Tempfile  new  close ","Tempfile  new  read ","Tempfile  new  rewind ","Tempfile  new  sync= "]}," RSpec Matchers BuiltIn Output to_stderr_from_any_process":{"type":"method","name":"to_stderr_from_any_process","children":[],"call":["CaptureStreamToTempfile  new "]}," RSpec Matchers BuiltIn Output to_stdout_from_any_process":{"type":"method","name":"to_stdout_from_any_process","children":[],"call":["CaptureStreamToTempfile  new "]}," RSpec Matchers BuiltIn ReliableMatchData captures":{"type":"method","name":"captures","children":[],"call":[" match_data captures "," match_data "]}," RSpec Matchers BuiltIn ReliableMatchData names":{"type":"method","name":"names","children":[],"call":[" match_data names "," match_data "]}," RSpec Matchers BuiltIn ReliableMatchData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Match match_captures":{"type":"method","name":"match_captures","children":[],"call":[" values_match? ","match captures ","Hash  [] ","match names map zip ","match names map ","match names ","match names zip ","@expected_captures last ","match names empty? ","ReliableMatchData  new ","actual match "," values_ReliableMatchData  new ? "," values_actual match ? ","ReliableMatchData  new  captures ","actual match  captures ","ReliableMatchData  new  names map zip ","actual match  names map zip ","ReliableMatchData  new  names map ","actual match  names map ","ReliableMatchData  new  names ","actual match  names ","ReliableMatchData  new  names zip ","actual match  names zip ","ReliableMatchData  new  names empty? ","actual match  names empty? ","actual ReliableMatchData  new  ","actual actual match  "]}," RSpec Matchers BuiltIn Match can_safely_call_match?":{"type":"method","name":"can_safely_call_match?","children":[],"call":["(and\n  (send\n    (const\n      (const nil :RSpec) :Matchers) :is_a_matcher?\n    (lvar :expected))\n  (begin\n    (or\n      (send\n        (const nil :String) :===\n        (lvar :actual))\n      (send\n        (const nil :Regexp) :===\n        (lvar :actual))))) ! ","Regexp  === ","String  === ","RSpec Matchers  is_a_matcher? ","actual respond_to? "]}," RSpec Matchers BuiltIn Match with_captures":{"type":"method","name":"with_captures","children":[],"call":[]}," RSpec Matchers BuiltIn Match initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Include convert_to_hash?":{"type":"method","name":"convert_to_hash?","children":[],"call":["obj respond_to? ","obj respond_to? ! ","(send\n  (const\n    (cbase) :Hash) :===\n  (lvar :obj)) ! "," Hash  === "]}," RSpec Matchers BuiltIn Include diff_would_wrongly_highlight_matched_item?":{"type":"method","name":"diff_would_wrongly_highlight_matched_item?","children":[],"call":["line == ","lines none? "," actual include? "," actual "," expected any? "," expected "," actual split "," expected is_a? "," actual is_a? "," actual split  none? "]}," RSpec Matchers BuiltIn Include count_inclusions":{"type":"method","name":"count_inclusions","children":[],"call":[" raise "," count_enumerable "," expected first "," expected "," actual scan length "," actual scan "," actual ","Hash  === "]}," RSpec Matchers BuiltIn Include count_enumerable":{"type":"method","name":"count_enumerable","children":[],"call":[" values_match? "," actual count "," actual ","(send\n  (send nil :actual) :select) size "," actual select "]}," RSpec Matchers BuiltIn Include excluded_from_actual":{"type":"method","name":"excluded_from_actual","children":[],"call":["memo << "," actual_collection_includes? "," actual_hash_has_key? "," comparing_hash_keys? "," actual_hash_includes? ","expected_item each "," comparing_hash_to_a_subset? "," expecteds inject "," expecteds ","@actual respond_to? "," expected inject "," expected "]}," RSpec Matchers BuiltIn Include readable_list_of":{"type":"method","name":"readable_list_of","children":[],"call":["EnglishPhrasing  list ","described_items inject inspect ","described_items inject ","item is_a? ","described_items all? "," surface_descriptions_in "," surface_descriptions_in  inject inspect "," surface_descriptions_in  inject "," surface_descriptions_in  all? "]}," RSpec Matchers BuiltIn Include format_failure_message":{"type":"method","name":"format_failure_message","children":[],"call":[" improve_hash_formatting "," count_failure_reason "," has_expected_count? "," readable_list_of "," description_of "," actual respond_to? "," actual "," improve_hash_formatting + "]}," RSpec Matchers BuiltIn Include check_expected_count?":{"type":"method","name":"check_expected_count?","children":[],"call":[" raise "," actual is_a? "," actual "," expecteds size != "," expecteds size "," expecteds "," has_expected_count? ! "," has_expected_count? "]}," RSpec Matchers BuiltIn Include check_actual?":{"type":"method","name":"check_actual?","children":[],"call":["@actual respond_to? ","actual to_hash "," convert_to_hash? ","@actual to_hash  respond_to? ","actual to_hash  to_hash "]}," RSpec Matchers BuiltIn Include expected":{"type":"method","name":"expected","children":[],"call":[" expecteds "," expecteds first ","Hash  === "," expecteds one? "]}," RSpec Matchers BuiltIn HaveAttributes formatted_values":{"type":"method","name":"formatted_values","children":[],"call":[" improve_hash_formatting ","RSpec Support ObjectFormatter  format ","@values inspect ","@RSpec Support ObjectFormatter  format  inspect "]}," RSpec Matchers BuiltIn HaveAttributes cache_all_values":{"type":"method","name":"cache_all_values","children":[],"call":["@values []= ","@actual __send__ "," expected each "," expected "]}," RSpec Matchers BuiltIn HaveAttributes diffable?":{"type":"method","name":"diffable?","children":[],"call":["@negated ! ","@respond_to_failed ! "]}," RSpec Matchers BuiltIn HaveAttributes actual":{"type":"method","name":"actual","children":[],"call":[]}," RSpec Matchers BuiltIn BePredicate failure_to_respond_explanation":{"type":"method","name":"failure_to_respond_explanation","children":[],"call":[" predicate == "," predicate "]}," RSpec Matchers BuiltIn BePredicate predicate_method_name":{"type":"method","name":"predicate_method_name","children":[],"call":[" present_tense_predicate "," predicate "," actual respond_to? "," actual "]}," RSpec Matchers BuiltIn DynamicPredicate failure_to_respond_explanation":{"type":"method","name":"failure_to_respond_explanation","children":[],"call":[" predicate "," private_predicate? "]}," RSpec Matchers BuiltIn DynamicPredicate validity_message":{"type":"method","name":"validity_message","children":[],"call":[" failure_to_respond_explanation "," predicate "," actual_formatted "," predicate_accessible? "]}," RSpec Matchers BuiltIn DynamicPredicate expectation_of":{"type":"method","name":"expectation_of","children":[],"call":["RSpec Expectations  configuration strict_predicate_matchers? ","RSpec Expectations  configuration "]}," RSpec Matchers BuiltIn DynamicPredicate failure_message_expecting":{"type":"method","name":"failure_message_expecting","children":[],"call":[" description_of "," expectation_of "," args_to_s "," predicate "," actual_formatted "," validity_message "]}," RSpec Matchers BuiltIn DynamicPredicate method_description":{"type":"method","name":"method_description","children":[],"call":["EnglishPhrasing  split_words "]}," RSpec Matchers BuiltIn DynamicPredicate root":{"type":"method","name":"root","children":[],"call":[" class REGEX  match captures first "," class REGEX  match captures "," class REGEX  match ","@method_name to_s "," class "]}," RSpec Matchers BuiltIn DynamicPredicate predicate_matches?":{"type":"method","name":"predicate_matches?","children":[],"call":["value == "," predicate_result ! ! "," predicate_result ! "," predicate_result ","RSpec Expectations  configuration strict_predicate_matchers? ","RSpec Expectations  configuration "]}," RSpec Matchers BuiltIn DynamicPredicate predicate_method_name":{"type":"method","name":"predicate_method_name","children":[],"call":[" predicate "]}," RSpec Matchers BuiltIn DynamicPredicate predicate_result":{"type":"method","name":"predicate_result","children":[],"call":[" actual __send__ "," predicate_method_name "," actual "]}," RSpec Matchers BuiltIn DynamicPredicate private_predicate?":{"type":"method","name":"private_predicate?","children":[],"call":["@actual private_methods include? "," predicate ","@actual private_methods "," predicate to_s "]}," RSpec Matchers BuiltIn DynamicPredicate predicate_accessible?":{"type":"method","name":"predicate_accessible?","children":[],"call":["@actual respond_to? "," predicate "]}," RSpec Matchers BuiltIn DynamicPredicate description":{"type":"method","name":"description","children":[],"call":[" args_to_sentence "," method_description "]}," RSpec Matchers BuiltIn DynamicPredicate failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" failure_message_expecting "]}," RSpec Matchers BuiltIn DynamicPredicate failure_message":{"type":"method","name":"failure_message","children":[],"call":[" failure_message_expecting "]}," RSpec Matchers BuiltIn DynamicPredicate does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" predicate_matches? "," predicate_accessible? "]}," RSpec Matchers BuiltIn DynamicPredicate matches?":{"type":"method","name":"matches?","children":[],"call":[" predicate_matches? "," predicate_accessible? "]}," RSpec Matchers BuiltIn DynamicPredicate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Matchers BuiltIn Exist ExistenceTest deprecated":{"type":"method","name":"deprecated","children":[],"call":["File  == ","predicate == ","FileTest  == ","Dir  == "]}," RSpec Matchers BuiltIn CountExpectation human_readable_count":{"type":"method","name":"human_readable_count","children":[],"call":["count last ","count first "]}," RSpec Matchers BuiltIn CountExpectation human_readable_expectation_type":{"type":"method","name":"human_readable_expectation_type","children":[],"call":[" count_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation count_failure_reason":{"type":"method","name":"count_failure_reason","children":[],"call":[" human_readable_count "," count_expectation_description "]}," RSpec Matchers BuiltIn CountExpectation count_expectation_description":{"type":"method","name":"count_expectation_description","children":[],"call":[" human_readable_count "," expected_count "," human_readable_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation unsupported_count_expectation?":{"type":"method","name":"unsupported_count_expectation?","children":[],"call":["relativity == "," count_expectation_type == "," count_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation count_constraint_to_number":{"type":"method","name":"count_constraint_to_number","children":[],"call":[" raise "]}," RSpec Matchers BuiltIn CountExpectation raise_unsupported_count_expectation":{"type":"method","name":"raise_unsupported_count_expectation","children":[],"call":[" raise "," count_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation raise_impossible_count_expectation":{"type":"method","name":"raise_impossible_count_expectation","children":[],"call":[" raise "," expected_count "," count_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation set_expected_count":{"type":"method","name":"set_expected_count","children":[],"call":[" expected_count "," raise_impossible_count_expectation ","count < ","relativity == "," count_expectation_type == "," count_expectation_type ","count > "," count_constraint_to_number "," raise_unsupported_count_expectation "," unsupported_count_expectation? "," expected_ count_constraint_to_number  "," raise_impossible_ count_constraint_to_number _expectation "," count_constraint_to_number  < ","  count_constraint_to_number _expectation_type == ","  count_constraint_to_number _expectation_type "," count_constraint_to_number  > ","  count_constraint_to_number _constraint_to_number "," raise_unsupported_ count_constraint_to_number _expectation "," unsupported_ count_constraint_to_number _expectation? "]}," RSpec Matchers BuiltIn CountExpectation has_expected_count?":{"type":"method","name":"has_expected_count?","children":[],"call":[" count_expectation_type ! ! "," count_expectation_type ! "," count_expectation_type "]}," RSpec Matchers BuiltIn CountExpectation expected_count_matches?":{"type":"method","name":"expected_count_matches?","children":[],"call":["@actual_count __send__ "," expected_count "," count_expectation_type "," cover? "," count_expectation_type == ","@actual_count > "]}," RSpec Matchers BuiltIn CountExpectation cover?":{"type":"method","name":"cover?","children":[],"call":["number <= ","count last ","number >= ","count first ","count cover? "]}," RSpec Matchers BuiltIn CountExpectation times":{"type":"method","name":"times","children":[],"call":[]}," RSpec Matchers BuiltIn CountExpectation at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_count "]}," RSpec Matchers BuiltIn CountExpectation at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_count "]}," RSpec Matchers BuiltIn CountExpectation exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_count "]}," RSpec Matchers BuiltIn CountExpectation thrice":{"type":"method","name":"thrice","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn CountExpectation twice":{"type":"method","name":"twice","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn CountExpectation once":{"type":"method","name":"once","children":[],"call":[" exactly "]}," RSpec Matchers BuiltIn ContainExactly to_a_disallowed?":{"type":"method","name":"to_a_disallowed?","children":[],"call":["NilClass  === ","Kernel  == ","RSpec Support  method_handle_for owner ","RSpec Support  method_handle_for "]}," RSpec Matchers BuiltIn ContainExactly message_line":{"type":"method","name":"message_line","children":[],"call":["%-32s%s % "," describe_collection ","prefix + "]}," RSpec Matchers BuiltIn ContainExactly describe_collection":{"type":"method","name":"describe_collection","children":[],"call":[" description_of "," safe_sort "," surface_descriptions_in "]}," RSpec Matchers BuiltIn ContainExactly extra_elements_line":{"type":"method","name":"extra_elements_line","children":[],"call":[" message_line "," extra_items "]}," RSpec Matchers BuiltIn ContainExactly missing_elements_line":{"type":"method","name":"missing_elements_line","children":[],"call":[" message_line "," missing_items "]}," RSpec Matchers BuiltIn ContainExactly actual_collection_line":{"type":"method","name":"actual_collection_line","children":[],"call":[" message_line "," actual "]}," RSpec Matchers BuiltIn ContainExactly expected_collection_line":{"type":"method","name":"expected_collection_line","children":[],"call":[" message_line "," expected "]}," RSpec Matchers BuiltIn ContainExactly generate_failure_message":{"type":"method","name":"generate_failure_message","children":[],"call":[" extra_elements_line "," extra_items empty? "," extra_items "," missing_elements_line "," missing_items empty? "," missing_items "," actual_collection_line "," expected_collection_line "]}," RSpec Matchers BuiltIn Compound diffable_matcher_list_for":{"type":"method","name":"diffable_matcher_list_for","children":[],"call":["matcher diffable_matcher_list ","Compound  === "," matcher_is_diffable? "]}," RSpec Matchers BuiltIn Compound matcher_is_diffable?":{"type":"method","name":"matcher_is_diffable?","children":[],"call":["matcher diffable? "]}," RSpec Matchers BuiltIn Compound diffable_matcher_list":{"type":"method","name":"diffable_matcher_list","children":[],"call":["list concat "," diffable_matcher_list_for "," matcher_2 "," matcher_2_matches? "," matcher_1 "," matcher_1_matches? "]}," RSpec Matchers BuiltIn Compound expected":{"type":"method","name":"expected","children":[],"call":[" RSpec Matchers ExpectedsForMultipleDiffs  for_many_matchers "," diffable_matcher_list "," evaluator "]}," RSpec Matchers BuiltIn Compound diffable?":{"type":"method","name":"diffable?","children":[],"call":[" matcher_is_diffable? "," matcher_2 "," matcher_1 "]}," RSpec Matchers BuiltIn ChangeDetails extract_value_block_snippet":{"type":"method","name":"extract_value_block_snippet","children":[],"call":["Expectations BlockSnippetExtractor  try_extracting_single_line_body_of "]}," RSpec Matchers BuiltIn ChangeDetails message_notation":{"type":"method","name":"message_notation","children":[],"call":["Support  class_of "]}," RSpec Matchers BuiltIn ChangeDetails value_representation":{"type":"method","name":"value_representation","children":[],"call":[" extract_value_block_snippet "," message_notation "," extract_ extract_value_block_snippet  "]}," RSpec Matchers BuiltIn SpecificValuesChange perform_change":{"type":"method","name":"perform_change","children":[],"call":[" description_of "," values_match? ","@change_details perform_change "]}," RSpec Matchers BuiltIn Change perform_change":{"type":"method","name":"perform_change","children":[],"call":[" description_of "," change_details perform_change "," change_details "]}," RSpec Matchers BuiltIn Change change_details":{"type":"method","name":"change_details","children":[],"call":["ChangeDetails  new "," matcher_name "]}," RSpec Matchers BuiltIn BeComparedTo perform_match":{"type":"method","name":"perform_match","children":[],"call":["@actual __send__ "]}," RSpec Matchers BuiltIn BeComparedTo does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" perform_match ! "," perform_match "]}," RSpec Matchers BuiltIn BaseMatcher HashFormatting improve_hash_formatting":{"type":"method","name":"improve_hash_formatting","children":[],"call":["inspect_string gsub "]}," RSpec Matchers BuiltIn BaseMatcher underscore":{"type":"method","name":"underscore","children":[],"call":[]}," RSpec Matchers BuiltIn BaseMatcher matcher_name":{"type":"method","name":"matcher_name","children":[],"call":[" class matcher_name "," class "]}," RSpec Matchers BuiltIn BaseMatcher actual_formatted":{"type":"method","name":"actual_formatted","children":[],"call":["RSpec Support ObjectFormatter  format "]}," RSpec Matchers BuiltIn BaseMatcher expected_formatted":{"type":"method","name":"expected_formatted","children":[],"call":["RSpec Support ObjectFormatter  format "]}," to_not":{"type":"method","name":"to_not","children":[],"call":[" ctx assertions "," ctx "]}," not_to":{"type":"method","name":"not_to","children":[],"call":[" ctx assertions "," ctx "]}," to":{"type":"method","name":"to","children":[],"call":[" ctx assertions "," ctx "]}," aggregate_failures":{"type":"method","name":"aggregate_failures","children":[],"call":[" raise ","assertion_failed set_backtrace ","e backtrace ","Minitest Assertion  new ","e message ","Minitest Assertion  new  set_backtrace "]}," RSpec Expectations ExpectationHelper with_matcher":{"type":"method","name":"with_matcher","children":[],"call":[]}," RSpec Expectations MultipleExpectationsNotMetError index_label":{"type":"method","name":"index_label","children":[],"call":["index + "]}," RSpec Expectations MultipleExpectationsNotMetError width_of_label":{"type":"method","name":"width_of_label","children":[],"call":[" index_label chars count "," index_label chars "," index_label "]}," RSpec Expectations MultipleExpectationsNotMetError longest_index_label_width":{"type":"method","name":"longest_index_label_width","children":[],"call":[" width_of_label "," failures size "," failures "]}," RSpec Expectations MultipleExpectationsNotMetError indentation":{"type":"method","name":"indentation","children":[],"call":["  * "," longest_index_label_width "]}," RSpec Expectations MultipleExpectationsNotMetError indented":{"type":"method","name":"indented","children":[],"call":["first_line_indentation + + ","(send\n  (lvar :rest) :map) join "," indentation + "," indentation ","line =~ ","rest map ","first_line_indentation + ","  * "," longest_index_label_width - "," width_of_label "," longest_index_label_width ","failure_message strip lines to_a ","failure_message strip lines ","failure_message strip ","  *  + + ","  *  + "]}," RSpec Expectations MultipleExpectationsNotMetError enumerated_errors":{"type":"method","name":"enumerated_errors","children":[],"call":["error message ","error class "," enumerated "," failures size "," failures "," other_errors "]}," RSpec Expectations MultipleExpectationsNotMetError enumerated_failures":{"type":"method","name":"enumerated_failures","children":[],"call":[" enumerated "," failures "]}," RSpec Expectations MultipleExpectationsNotMetError backtrace_line":{"type":"method","name":"backtrace_line","children":[],"call":["line sub sub ","\\1 freeze ","line sub ","\\1.\\2 freeze ","File  expand_path ","line =~ ","(send\n  (const nil :Regexp) :union\n  (const\n    (const\n      (const nil :RSpec) :CallerFilter) :IGNORE_REGEX)\n  (splat\n    (send nil :exclusion_patterns))) any? ","Regexp  union "," exclusion_patterns "]}," RSpec Expectations MultipleExpectationsNotMetError format_backtrace":{"type":"method","name":"format_backtrace","children":[],"call":["filtered concat ","filtered empty? ","(send\n  (lvar :backtrace) :map) compact tap ","(send\n  (lvar :backtrace) :map) compact "," backtrace_line ","backtrace map "]}," RSpec Expectations MultipleExpectationsNotMetError exclusion_patterns":{"type":"method","name":"exclusion_patterns","children":[],"call":["Regexp  new ","s gsub ","patterns map! ","patterns << ","RSpec Support Ruby  jruby? "]}," RSpec Expectations MultipleExpectationsNotMetError enumerated":{"type":"method","name":"enumerated","children":[],"call":[" indented "," index_label "," format_backtrace first "," format_backtrace ","exception backtrace ","exceptions each_with_index map ","exceptions each_with_index "]}," RSpec Expectations MultipleExpectationsNotMetError pluralize":{"type":"method","name":"pluralize","children":[],"call":["count == "]}," RSpec Expectations MultipleExpectationsNotMetError block_description":{"type":"method","name":"block_description","children":[],"call":[" aggregation_block_label inspect "," aggregation_block_label "]}," RSpec Expectations MultipleExpectationsNotMetError initialize":{"type":"method","name":"initialize","children":[],"call":[" failures + "," other_errors "," failures "]}," RSpec Expectations MultipleExpectationsNotMetError exception_count_description":{"type":"method","name":"exception_count_description","children":[],"call":[" pluralize "," other_errors size "," other_errors "," other_errors empty? "," failures size "," failures "]}," RSpec Expectations MultipleExpectationsNotMetError summary":{"type":"method","name":"summary","children":[],"call":[" block_description "," exception_count_description "]}," RSpec Expectations MultipleExpectationsNotMetError aggregation_metadata":{"type":"method","name":"aggregation_metadata","children":[],"call":["@failure_aggregator metadata "]}," RSpec Expectations MultipleExpectationsNotMetError aggregation_block_label":{"type":"method","name":"aggregation_block_label","children":[],"call":["@failure_aggregator block_label "]}," RSpec Expectations MultipleExpectationsNotMetError other_errors":{"type":"method","name":"other_errors","children":[],"call":["@failure_aggregator other_errors "]}," RSpec Expectations MultipleExpectationsNotMetError failures":{"type":"method","name":"failures","children":[],"call":["@failure_aggregator failures "]}," RSpec Expectations MultipleExpectationsNotMetError message":{"type":"method","name":"message","children":[],"call":["(send\n  (send\n    (array\n      (dstr\n        (begin\n          (send nil :summary))\n        (str \":\"))) :+\n    (send nil :enumerated_failures)) :+\n  (send nil :enumerated_errors)) join ","(dstr\n  (begin\n    (send nil :summary))\n  (str \":\")) + + "," enumerated_errors ","(dstr\n  (begin\n    (send nil :summary))\n  (str \":\")) + "," enumerated_failures "," summary "]}," RSpec Expectations FailureAggregator notify_aggregated_failures":{"type":"method","name":"notify_aggregated_failures","children":[],"call":["RSpec Support  notify_failure ","MultipleExpectationsNotMetError  new ","all_errors first ","all_errors size "," failures + "," other_errors "," failures "," failures +  first "," failures +  size "]}," RSpec Expectations FailureAggregator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Expectations FailureAggregator assign_backtrace":{"type":"method","name":"assign_backtrace","children":[],"call":["failure set_backtrace "," caller ","e backtrace ","failure class "," raise "]}," RSpec Expectations FailureAggregator call":{"type":"method","name":"call","children":[],"call":[" failures << "," failures "," assign_backtrace ","failure backtrace ","@seen_source_ids []= ","@seen_source_ids key? ","options [] ","@seen_options [] s []= ","@seen_options [] s key? "]}," RSpec Expectations FailureAggregator other_errors":{"type":"method","name":"other_errors","children":[],"call":[]}," RSpec Expectations FailureAggregator failures":{"type":"method","name":"failures","children":[],"call":[]}," RSpec Expectations FailureAggregator aggregate":{"type":"method","name":"aggregate","children":[],"call":[" notify_aggregated_failures "," other_errors << "," other_errors "," failures << "," failures ","RSpec Support  with_failure_notifier "]}," RSpec Expectations ExpectationTarget InstanceMethods prevent_operator_matchers":{"type":"method","name":"prevent_operator_matchers","children":[],"call":[" raise "]}," RSpec Expectations ExpectationTarget InstanceMethods not_to":{"type":"method","name":"not_to","children":[],"call":["RSpec Expectations NegativeExpectationHandler  handle_matcher "," target "," prevent_operator_matchers "]}," RSpec Expectations ExpectationTarget InstanceMethods to":{"type":"method","name":"to","children":[],"call":["RSpec Expectations PositiveExpectationHandler  handle_matcher "," target "," prevent_operator_matchers "]}," RSpec Expectations Configuration false_positives_handler":{"type":"method","name":"false_positives_handler","children":[],"call":["FALSE_POSITIVE_BEHAVIOURS  fetch "]}," RSpec Expectations Configuration warn_about_potential_false_positives?":{"type":"method","name":"warn_about_potential_false_positives?","children":[],"call":[" on_potential_false_positives == "," on_potential_false_positives "]}," RSpec Expectations Configuration strict_predicate_matchers?":{"type":"method","name":"strict_predicate_matchers?","children":[],"call":[]}," RSpec Expectations Configuration strict_predicate_matchers=":{"type":"method","name":"strict_predicate_matchers=","children":[],"call":[" raise ","flag == "]}," RSpec Expectations Configuration on_potential_false_positives=":{"type":"method","name":"on_potential_false_positives=","children":[],"call":[" raise ","FALSE_POSITIVE_BEHAVIOURS  keys ","FALSE_POSITIVE_BEHAVIOURS  key? "]}," RSpec Expectations Configuration warn_about_potential_false_positives=":{"type":"method","name":"warn_about_potential_false_positives=","children":[],"call":[" on_potential_false_positives= "," warn_about_potential_false_positives? "]}," RSpec Expectations Configuration max_formatted_output_length=":{"type":"method","name":"max_formatted_output_length=","children":[],"call":["RSpec Support ObjectFormatter  default_instance max_formatted_output_length= ","RSpec Support ObjectFormatter  default_instance "]}," RSpec Expectations Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Expectations BlockSnippetExtractor method_ident_node?":{"type":"method","name":"method_ident_node?","children":[],"call":["node args first == "," method_name ","node args first ","node args ","node type == ","node type "]}," RSpec Expectations BlockSnippetExtractor candidate_method_ident_nodes":{"type":"method","name":"candidate_method_ident_nodes","children":[],"call":[" method_ident_node? "," source nodes_by_line_number [] select "," source nodes_by_line_number [] "," beginning_line_number "," source nodes_by_line_number "," source "]}," RSpec Expectations BlockSnippetExtractor candidate_block_wrapper_nodes":{"type":"method","name":"candidate_block_wrapper_nodes","children":[],"call":["(send\n  (send nil :candidate_method_ident_nodes) :map) compact ","method_call_node include? ","block_wrapper_node children first ","block_wrapper_node children ","node type == ","node type ","method_ident_node each_ancestor find ","method_ident_node each_ancestor "," candidate_method_ident_nodes map "," candidate_method_ident_nodes ","block_wrapper_node children first  include? "]}," RSpec Expectations BlockSnippetExtractor block_wrapper_node":{"type":"method","name":"block_wrapper_node","children":[],"call":[" raise "," candidate_block_wrapper_nodes first "," candidate_block_wrapper_nodes "," candidate_block_wrapper_nodes size "]}," RSpec Expectations BlockSnippetExtractor block_body_node":{"type":"method","name":"block_body_node","children":[],"call":["block_node children last ","block_node children "," block_wrapper_node children [] "," block_wrapper_node children "," block_wrapper_node "," block_wrapper_node children []  children last "," block_wrapper_node children []  children "]}," RSpec Expectations BlockSnippetExtractor method_ident_node":{"type":"method","name":"method_ident_node","children":[],"call":[" method_ident_node? ","method_call_node find "," block_wrapper_node children first "," block_wrapper_node children "," block_wrapper_node "," block_wrapper_node children first  find "]}," RSpec Expectations BlockSnippetExtractor body_content_locations":{"type":"method","name":"body_content_locations","children":[],"call":[" block_body_node map compact "," block_body_node map "," block_body_node "]}," RSpec Expectations BlockSnippetExtractor method_call_location":{"type":"method","name":"method_call_location","children":[],"call":[" method_ident_node location "," method_ident_node "]}," RSpec Expectations BlockSnippetExtractor block_locator":{"type":"method","name":"block_locator","children":[],"call":["BlockLocator  new "," beginning_line_number "," source "," method_name "]}," RSpec Expectations BlockSnippetExtractor correct_block?":{"type":"method","name":"correct_block?","children":[],"call":["content_location between? ","body_tokens last location ","body_tokens last ","body_tokens first location ","body_tokens first "," block_locator body_content_locations first "," block_locator body_content_locations "," block_locator "," block_locator body_content_locations empty? "," block_locator body_content_locations first  between? "," block_locator body_ block_locator body_content_locations first s first "," block_locator body_ block_locator body_content_locations first s "," block_locator body_ block_locator body_content_locations first s empty? "]}," RSpec Expectations BlockSnippetExtractor pipe_token?":{"type":"method","name":"pipe_token?","children":[],"call":["token string == ","token string ","token type == ","token type "]}," RSpec Expectations BlockSnippetExtractor opener_token_stack":{"type":"method","name":"opener_token_stack","children":[],"call":[]}," RSpec Expectations BlockSnippetExtractor handle_closer_token":{"type":"method","name":"handle_closer_token","children":[],"call":[" opener_token_stack empty? "," opener_token_stack "," opener_token_stack pop "," opener_token_stack last closed_by? "," opener_token_stack last "]}," RSpec Expectations BlockSnippetExtractor opener_token?":{"type":"method","name":"opener_token?","children":[],"call":["token string == ","token string ","token type == ","token type "]}," RSpec Expectations BlockSnippetExtractor handle_opener_token":{"type":"method","name":"handle_opener_token","children":[],"call":[" opener_token_stack push "," opener_token_stack "," opener_token? tap "," opener_token? "]}," RSpec Expectations BlockSnippetExtractor finish_or_find_next_block_if_incorrect!":{"type":"method","name":"finish_or_find_next_block_if_incorrect!","children":[],"call":[" finish! "," correct_block? "," finalize_pending_tokens! "]}," RSpec Expectations BlockSnippetExtractor finalize_pending_tokens!":{"type":"method","name":"finalize_pending_tokens!","children":[],"call":[" pending_tokens freeze tap "," pending_tokens freeze "," pending_tokens "]}," RSpec Expectations BlockSnippetExtractor pending_tokens":{"type":"method","name":"pending_tokens","children":[],"call":[]}," RSpec Expectations BlockSnippetExtractor after_beginning_of_body_state":{"type":"method","name":"after_beginning_of_body_state","children":[],"call":[" handle_opener_token "," pending_tokens << "," pending_tokens "," finish_or_find_next_block_if_incorrect! "," handle_closer_token "]}," RSpec Expectations BlockSnippetExtractor after_beginning_of_args_state":{"type":"method","name":"after_beginning_of_args_state","children":[],"call":[" pipe_token? "]}," RSpec Expectations BlockSnippetExtractor after_opener_state":{"type":"method","name":"after_opener_state","children":[],"call":["token type == ","token type "," handle_opener_token "," pending_tokens << "," pending_tokens "," finalize_pending_tokens! "," pipe_token? "," finish_or_find_next_block_if_incorrect! "," handle_closer_token "]}," RSpec Expectations BlockSnippetExtractor after_method_call_state":{"type":"method","name":"after_method_call_state","children":[],"call":[" handle_opener_token "]}," RSpec Expectations BlockSnippetExtractor initial_state":{"type":"method","name":"initial_state","children":[],"call":["token location == "," block_locator method_call_location "," block_locator ","token location "]}," RSpec Expectations BlockSnippetExtractor invoke_state_handler":{"type":"method","name":"invoke_state_handler","children":[],"call":[" __send__ "," state "]}," RSpec Expectations BlockSnippetExtractor finish!":{"type":"method","name":"finish!","children":[],"call":[" throw "]}," RSpec Expectations BlockSnippetExtractor parse!":{"type":"method","name":"parse!","children":[],"call":[" invoke_state_handler "," source tokens each "," source tokens "," source "," catch "]}," RSpec Expectations BlockSnippetExtractor initialize":{"type":"method","name":"initialize","children":[],"call":[" parse! ","method_name to_s freeze ","method_name to_s "]}," RSpec Expectations BlockSnippetExtractor source_location":{"type":"method","name":"source_location","children":[],"call":[" raise "," proc source_location "," proc "]}," RSpec Expectations BlockSnippetExtractor beginning_line_number":{"type":"method","name":"beginning_line_number","children":[],"call":[" source_location last "," source_location "]}," RSpec Expectations BlockSnippetExtractor file_path":{"type":"method","name":"file_path","children":[],"call":[" source_location first "," source_location "]}," RSpec Expectations BlockSnippetExtractor source":{"type":"method","name":"source","children":[],"call":["RSpec Support Source  from_file "," file_path "," raise ","File  exist? ","RSpec  world source_from_file ","RSpec  world "]}," RSpec Expectations BlockSnippetExtractor block_token_extractor":{"type":"method","name":"block_token_extractor","children":[],"call":["BlockTokenExtractor  new "," beginning_line_number "," source "," method_name "]}," RSpec Expectations BlockSnippetExtractor raw_body_snippet":{"type":"method","name":"raw_body_snippet","children":[],"call":[" block_token_extractor body_tokens map join "," block_token_extractor body_tokens map "," block_token_extractor body_tokens "," block_token_extractor "]}," RSpec Expectations BlockSnippetExtractor raw_body_lines":{"type":"method","name":"raw_body_lines","children":[],"call":[" raw_body_snippet split "," raw_body_snippet "]}," RSpec Expectations BlockSnippetExtractor body_content_lines":{"type":"method","name":"body_content_lines","children":[],"call":[" raw_body_lines map reject "," raw_body_lines map "," raw_body_lines "]}," RSpec Expectations BlockSnippetExtractor try_extracting_single_line_body_of":{"type":"method","name":"try_extracting_single_line_body_of","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError actual_error_message":{"type":"method","name":"actual_error_message","children":[],"call":["@actual_error message ","@actual_error original_message ","@actual_error respond_to? "]}," RSpec Matchers DSL DefaultImplementations supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldSuccessiveArgs supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithArgs supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldWithNoArgs supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn ThrowSymbol supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn RaiseError supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Output supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Compound matcher_supports_value_expectations?":{"type":"method","name":"matcher_supports_value_expectations?","children":[],"call":["matcher supports_value_expectations? "]}," RSpec Matchers BuiltIn Compound supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[" matcher_supports_value_expectations? "," matcher_2 "," matcher_1 "]}," RSpec Matchers BuiltIn SpecificValuesChange supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn ChangeRelatively supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn Change supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Matchers BuiltIn BaseMatcher supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":[]}," RSpec Expectations ValueExpectationTarget supports_value_expectations?":{"type":"method","name":"supports_value_expectations?","children":[],"call":["matcher supports_value_expectations? ","matcher respond_to? ! ","matcher respond_to? "]}," RSpec Expectations ValueExpectationTarget enforce_value_expectation":{"type":"method","name":"enforce_value_expectation","children":[],"call":["RSpec  deprecate ","RSpec Support ObjectFormatter  format "," supports_value_expectations? "," raise "]}," RSpec Expectations ValueExpectationTarget not_to":{"type":"method","name":"not_to","children":[],"call":[" enforce_value_expectation "]}," RSpec Expectations ValueExpectationTarget to":{"type":"method","name":"to","children":[],"call":[" enforce_value_expectation "]}," RSpec Matchers BuiltIn ContainExactly matches?":{"type":"method","name":"matches?","children":[],"call":[]}," RSpec Expectations FailureAggregator AggregatedFailure inspect":{"type":"method","name":"inspect","children":[],"call":[]}," RSpec Matchers ExpectedsForMultipleDiffs description_for":{"type":"method","name":"description_for","children":[],"call":[]}," RSpec Matchers BuiltIn YieldControl human_readable_expectation_type":{"type":"method","name":"human_readable_expectation_type","children":[],"call":[]}," RSpec Matchers BuiltIn Include invalid_object_message":{"type":"method","name":"invalid_object_message","children":[],"call":[" actual respond_to? "," actual "]}," RSpec Matchers BuiltIn RaiseError warn_about_negative_false_positive":{"type":"method","name":"warn_about_negative_false_positive","children":[],"call":["RSpec  warning "," handle_warning "]}," RSpec Matchers BuiltIn RaiseError warn_about_bare_error":{"type":"method","name":"warn_about_bare_error","children":[],"call":["RSpec  warning "," warning "," handle_warning "]}," RSpec Matchers BuiltIn RaiseError warning_about_bare_error":{"type":"method","name":"warning_about_bare_error","children":[],"call":["@block nil? "]}," RSpec Matchers BuiltIn RaiseError warn_about_potential_false_positives?":{"type":"method","name":"warn_about_potential_false_positives?","children":[],"call":["RSpec Expectations  configuration warn_about_potential_false_positives? ","RSpec Expectations  configuration "]}," RSpec Matchers BuiltIn RaiseError warn_for_false_positives":{"type":"method","name":"warn_for_false_positives","children":[],"call":[" warn_about_negative_false_positive "," expecting_specific_exception? "," warn_about_potential_false_positives? "]}," RSpec Matchers BuiltIn BeAKindOf actual_object_respond_to?":{"type":"method","name":"actual_object_respond_to?","children":[],"call":[" Kernel  instance_method bind call "," Kernel  instance_method bind "," Kernel  instance_method "]}," RSpec Matchers BuiltIn BeAnInstanceOf actual_object_respond_to?":{"type":"method","name":"actual_object_respond_to?","children":[],"call":[" Kernel  instance_method bind call "," Kernel  instance_method bind "," Kernel  instance_method "]}," RSpec Matchers BuiltIn RespondTo method_signature_for":{"type":"method","name":"method_signature_for","children":[],"call":["Support MethodSignature  new ","actual instance_method "," Class  === ","method_handle owner === ","method_handle owner ","name == ","Support  method_handle_for ","Support  method_handle_for  owner === ","Support  method_handle_for  owner ","Support  Support  method_handle_for _for "]}," RSpec Matchers BuiltIn RespondTo setup_method_signature_expectation":{"type":"method","name":"setup_method_signature_expectation","children":[],"call":["expectation expect_arbitrary_keywords= ","expectation expect_unlimited_arguments= ","expectation keywords= ","expectation min_count= ","expectation max_count= ","@expected_arity max ","@expected_arity min ","@expected_arity is_a? ","Support MethodSignatureExpectation  new ","Support MethodSignatureExpectation  new  expect_arbitrary_keywords= ","Support MethodSignatureExpectation  new  expect_unlimited_arguments= ","Support MethodSignatureExpectation  new  keywords= ","Support MethodSignatureExpectation  new  min_count= ","Support MethodSignatureExpectation  new  max_count= "]}," RSpec Matchers BuiltIn YieldControl count_constraint_to_number":{"type":"method","name":"count_constraint_to_number","children":[],"call":[" raise "]}}