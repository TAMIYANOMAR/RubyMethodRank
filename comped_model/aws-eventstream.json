{" Aws EventStream Types pattern":{"type":"method","name":"pattern","children":[],"call":[]}," Aws EventStream Types types":{"type":"method","name":"types","children":[],"call":[]}," Aws EventStream Message initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new ","options [] "]}," Aws EventStream HeaderValue format_timestamp":{"type":"method","name":"format_timestamp","children":[],"call":["Time  at ","value / "]}," Aws EventStream HeaderValue format_uuid":{"type":"method","name":"format_uuid","children":[],"call":["(send\n  (lvar :uuid_pattern) :map) join ","(send\n  (lvar :p) :map) join ","%02x % ","bytes to_a [] ","bytes to_a ","p map ","uuid_pattern map ","value bytes ","value bytes  to_a [] ","value bytes  to_a ","value value bytes  "]}," Aws EventStream HeaderValue format_value":{"type":"method","name":"format_value","children":[],"call":[" format_uuid "," format_timestamp "]}," Aws EventStream HeaderValue initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "," format_value ","options [] "]}," Aws EventStream Errors MessageChecksumError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Errors PreludeChecksumError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Errors IncompleteMessageError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Errors ReadBytesExceedLengthError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Encoder pack_uint32":{"type":"method","name":"pack_uint32","children":[],"call":["(lvar :val) pack ","val pack ","val respond_to? "]}," Aws EventStream Encoder pack_uint16":{"type":"method","name":"pack_uint16","children":[],"call":["(lvar :val) pack "]}," Aws EventStream Encoder pack_uint8":{"type":"method","name":"pack_uint8","children":[],"call":["(lvar :val) pack "]}," Aws EventStream Encoder prelude":{"type":"method","name":"prelude","children":[],"call":["BytesBuffer  new "," pack_uint32 ","Zlib  crc32 "]}," Aws EventStream Encoder encode_headers":{"type":"method","name":"encode_headers","children":[],"call":["buffer << ","v value ","(send\n  (lvar :v) :value) pack "," pack_uint16 ","v value bytesize ","pattern ! ! == ","pattern ! ! ","pattern ! "," pack_uint8 ","Types  pattern [] ","v type ","Types  pattern ","k bytesize ","msg headers each ","msg headers ","BytesBuffer  new "," raise ","Aws EventStream Errors EventHeadersLengthExceedError  new ","buffer bytesize > ","buffer bytesize ","encoded_header bytesize <= ","encoded_header bytesize ","header_entries join tap ","header_entries join ","(lvar :encoded_key) pack ","value value ","(send\n  (lvar :value) :value) pack ","(lvar :encoded_value) pack ","value value bytesize ","(lvar :type_index) pack ","value type ","(send\n  (lvar :key) :bytesize) pack ","key bytesize ","message headers map ","message headers ","BytesBuffer  new  << ","BytesBuffer  new  bytesize > ","BytesBuffer  new  bytesize ","(lvar :(send\n  (lvar :key) :bytesize) pack ) pack ","(lvar :(lvar :encoded_value) pack ) pack ","(lvar :(lvar :type_index) pack ) pack "]}," Aws EventStream Encoder encode_message":{"type":"method","name":"encode_message","children":[],"call":["buffer rewind ","buffer << "," pack_uint32 ","Zlib  crc32 ","buffer read ","ctx_buffer read "," prelude ","ctx_buffer bytesize + ","ctx_buffer bytesize ","ctx_buffer << ","message payload read ","message payload "," encode_headers "," raise ","Aws EventStream Errors EventPayloadLengthExceedError  new ","message payload length > ","message payload length ","(lvar :encoded_content) pack ","(lvar :encoded_prelude) pack "," encode_prelude ","header_length + + ","header_length + ","encoded_payload bytesize ","encoded_header bytesize "," prelude  rewind "," prelude  << "," prelude  read ","ctx_ prelude  read "," encode_headers  read ","ctx_ prelude  bytesize + "," encode_headers  bytesize + ","ctx_ prelude  bytesize "," encode_headers  bytesize ","ctx_ prelude  << "," encode_headers  << ","(lvar :(lvar :encoded_prelude) pack ) pack ","(lvar : encode_prelude ) pack ","encoded_header bytesize  + + ","encoded_header bytesize  + ","message payload read  bytesize "]}," Aws EventStream Encoder encode":{"type":"method","name":"encode","children":[],"call":["io close ","io write "," encode_message read "," encode_message "]}," Aws EventStream Decoder unpack_uint8":{"type":"method","name":"unpack_uint8","children":[],"call":["buffer readbyte unpack [] ","buffer readbyte unpack ","buffer readbyte "]}," Aws EventStream Decoder unpack_uint16":{"type":"method","name":"unpack_uint16","children":[],"call":["buffer read unpack [] ","buffer read unpack ","buffer read "]}," Aws EventStream Decoder unpack_uint32":{"type":"method","name":"unpack_uint32","children":[],"call":["buffer read unpack [] ","buffer read unpack ","buffer read "]}," Aws EventStream Decoder payload_tempfile":{"type":"method","name":"payload_tempfile","children":[],"call":["payload rewind ","payload write ","buffer read ","buffer eof? ","payload binmode ","Tempfile  new ","Tempfile  new  rewind ","Tempfile  new  write ","Tempfile  new  binmode "]}," Aws EventStream Decoder payload_stringio":{"type":"method","name":"payload_stringio","children":[],"call":["StringIO  new ","buffer read "]}," Aws EventStream Decoder extract_payload":{"type":"method","name":"extract_payload","children":[],"call":[" payload_tempfile "," payload_stringio ","buffer bytesize <= ","buffer bytesize ","encoded bytesize <= ","encoded bytesize "]}," Aws EventStream Decoder extract_headers":{"type":"method","name":"extract_headers","children":[],"call":["headers []= ","HeaderValue  new ","buffer read ","buffer read unpack [] ","buffer read unpack "," unpack_uint16 ","unpack_pattern ! ! == ","unpack_pattern ! ! ","unpack_pattern ! ","Types  pattern [] ","Types  pattern ","Types  types [] "," unpack_uint8 ","Types  types ","buffer eof? ","scanner unpack ","scanner bytesize == ","scanner bytesize "]}," Aws EventStream Decoder context":{"type":"method","name":"context","children":[],"call":[" extract_payload ","BytesBuffer  new ","buffer read ","context_len - "," extract_headers ","buffer rewind "," raise ","checksum == "," unpack_uint32 ","Zlib  crc32 ","prelude_buffer read << ","prelude_buffer read ","prelude_buffer rewind ","total_len - ","io read ","BytesBuffer  new  read ","total_len -  - ","BytesBuffer  new  rewind ","Zlib  crc32  == ","prelude_BytesBuffer  new  read << ","prelude_BytesBuffer  new  read ","prelude_BytesBuffer  new  rewind "]}," Aws EventStream Decoder prelude":{"type":"method","name":"prelude","children":[],"call":["buffer read unpack ","buffer read ","buffer rewind "," raise ","checksum == "," unpack_uint32 ","Zlib  crc32 ","PRELUDE_LENGTH  - ","BytesBuffer  new ","io read ","BytesBuffer  new  read unpack ","BytesBuffer  new  read ","BytesBuffer  new  rewind ","Zlib  crc32  == "]}," Aws EventStream Decoder decode_message":{"type":"method","name":"decode_message","children":[],"call":["Message  new ","BytesBuffer  new ","@message_buffer read ","@message_buffer clear! ","io eof? "," context ","io bytesize < ","io bytesize "," prelude ","remaining empty? "," decode_context "," raise ","Zlib  crc32 == ","Zlib  crc32 ","(lvar :prelude) pack ","content unpack ","total_length - - ","total_length - ","raw_message bytesize < ","raw_message bytesize "," decode_prelude ","raw_message unpack ","BytesBuffer  new  read ","BytesBuffer  new  clear! ","io io eof? ? "]}," Aws EventStream Decoder decode_io":{"type":"method","name":"decode_io","children":[],"call":["e << "," decode_message ","io eof? "," Enumerator  new "]}," Aws EventStream Decoder decode_chunk":{"type":"method","name":"decode_chunk","children":[],"call":[" decode_message ","@message_buffer rewind ","@message_buffer write ","(ivar :@message_buffer) pack ","(ivar :@message_buffer) pack  rewind ","(ivar :@message_buffer) pack  write ","(ivar :(ivar :@message_buffer) pack ) pack "]}," Aws EventStream Decoder decode":{"type":"method","name":"decode","children":[],"call":[" decode_message first "," decode_message ","io eof? "," decode_io "," block_given? ","BytesBuffer  new ","io read ","block call "," wrap_as_enumerator ","BytesBuffer  new  eof? "," decode_BytesBuffer  new  ","BytesBuffer  new  read "]}," Aws EventStream Decoder initialize":{"type":"method","name":"initialize","children":[],"call":["BytesBuffer  new ","options fetch "]}," Aws EventStream BytesBuffer clear!":{"type":"method","name":"clear!","children":[],"call":[]}," Aws EventStream BytesBuffer tell":{"type":"method","name":"tell","children":[],"call":[]}," Aws EventStream BytesBuffer bytesize":{"type":"method","name":"bytesize","children":[],"call":["@data bytesize "]}," Aws EventStream BytesBuffer eof?":{"type":"method","name":"eof?","children":[],"call":["@pos == "," bytesize "]}," Aws EventStream BytesBuffer rewind":{"type":"method","name":"rewind","children":[],"call":[]}," Aws EventStream BytesBuffer write":{"type":"method","name":"write","children":[],"call":["bytes bytesize "]}," Aws EventStream BytesBuffer readbyte":{"type":"method","name":"readbyte","children":[],"call":["@data [] ","@pos - "," eof? "]}," Aws EventStream BytesBuffer read":{"type":"method","name":"read","children":[],"call":["@data [] ","end_byte + "," raise ","end_byte >= "," bytesize ","Errors ReadBytesExceedLengthError  new "," bytesize - ","start_byte + - ","start_byte + ","@pos + "," eof? "," bytesize == ","len == "," bytesize -  + ","start_byte + -  + "," bytesize -  >= ","start_byte + -  >= ","@pos +  + - ","@pos +  + ","end_byte +  + "]}," Aws EventStream BytesBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Errors EventHeadersLengthExceedError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Errors EventPayloadLengthExceedError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aws EventStream Encoder encode_prelude":{"type":"method","name":"encode_prelude","children":[],"call":["(lvar :prelude_body) pack ","Zlib  crc32 ","(lvar :total_length) pack ","(lvar :(lvar :total_length) pack ) pack "]}," Aws EventStream Decoder decode_context":{"type":"method","name":"decode_context","children":[],"call":[" extract_payload "," extract_headers ","content unpack "]}," Aws EventStream Decoder decode_prelude":{"type":"method","name":"decode_prelude","children":[],"call":["content unpack "," raise ","Zlib  crc32 == ","Zlib  crc32 ","prelude unpack ","PRELUDE_LENGTH  - "]}," Aws EventStream Decoder wrap_as_enumerator":{"type":"method","name":"wrap_as_enumerator","children":[],"call":["yielder << ","Enumerator  new "]}}