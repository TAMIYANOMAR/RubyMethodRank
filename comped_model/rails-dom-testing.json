{" Rails Dom Testing Assertions SelectorAssertions nodeset":{"type":"method","name":"nodeset","children":[],"call":["Nokogiri XML NodeSet  new ","node document ","node is_a? ","Nokogiri HTML Document  new "]}," Rails Dom Testing Assertions SelectorAssertions nest_selection":{"type":"method","name":"nest_selection","children":[],"call":[]}," Rails Dom Testing Assertions SelectorAssertions determine_root_from":{"type":"method","name":"determine_root_from","children":[],"call":[" document_root_element ","args shift ","HTMLSelector  can_select_from? "," raise ","possible_root == ","args first "," nodeset ","args first  == "]}," Rails Dom Testing Assertions SelectorAssertions assert_size_match!":{"type":"method","name":"assert_size_match!","children":[],"call":[" assert_operator "," assert_equal "," count_description ","equals [] ","css_selector inspect "]}," Rails Dom Testing Assertions SelectorAssertions catch_invalid_selector":{"type":"method","name":"catch_invalid_selector","children":[],"call":["ActiveSupport Deprecation  warn "]}," Rails Dom Testing Assertions SelectorAssertions document_root_element":{"type":"method","name":"document_root_element","children":[],"call":[" raise "]}," Rails Dom Testing Assertions SelectorAssertions assert_select_email":{"type":"method","name":"assert_select_email","children":[],"call":[" assert_select ","Nokogiri HTML DocumentFragment  parse ","part body to_s ","part body ","part [] to_s =~ ","part [] to_s ","part [] ","(if\n  (send\n    (send\n      (lvar :delivery) :parts) :empty?)\n  (array\n    (lvar :delivery))\n  (send\n    (lvar :delivery) :parts)) each ","delivery parts ","delivery parts empty? ","deliveries each "," assert ","deliveries empty? ! ","deliveries empty? ","ActionMailer Base  deliveries ","ActionMailer Base  deliveries  each ","ActionMailer Base  deliveries  empty? ! ","ActionMailer Base  deliveries  empty? ","ActionMailer Base  ActionMailer Base  deliveries  "]}," Rails Dom Testing Assertions SelectorAssertions assert_select_encoded":{"type":"method","name":"assert_select_encoded","children":[],"call":[" assert_select ","content empty? "," nest_selection ","Nokogiri HTML DocumentFragment  parse ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@selected))) :map) join ","elem children select map ","elem children select ","elem children "," nodeset map "," nodeset "," raise ","@selected ! ","element ! ","(send\n  (send\n    (lvar :elem) :children) :select) map ","child blank? ! ","child blank? ","child text? ","child cdata? ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@selected))) :map) join  empty? ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@Nokogiri HTML DocumentFragment  parse ))) :map) join ","@Nokogiri HTML DocumentFragment  parse  ! "]}," Rails Dom Testing Assertions SelectorAssertions count_description":{"type":"method","name":"count_description","children":[],"call":["pluralize [] ","(and\n  (send\n    (lvar :min) :==\n    (int 1))\n  (send\n    (lvar :max) :==\n    (int 1))) ! ","max == ","min == ","max != ","word << ","quantity == "," lambda "," pluralize_element "]}," Rails Dom Testing Assertions SelectorAssertions assert_select":{"type":"method","name":"assert_select","children":[],"call":[" nest_selection ","matches empty? ! ","matches empty? "," block_given? "," assert_size_match! ","selector message ","selector source ","selector equality_tests ","matches size ","selector select "," catch_invalid_selector ","HTMLSelector  new "," determine_root_from ","ActiveSupport Deprecation  warn "," caller ","selector selector ","selector tests ","selector select tap "," assert "," selecting_no_body? "," nodeset "," document_root_element ","selector css_selector ","selector selecting_no_body? ","selector select  empty? ! ","selector select  empty? ","HTMLSelector  new  message ","HTMLSelector  new  source ","HTMLSelector  new  equality_tests ","selector select  size ","HTMLSelector  new  select "," catch_invalid_HTMLSelector  new  "," determine_ determine_root_from _from ","HTMLSelector  new  HTMLSelector  new  ","HTMLSelector  new  tests ","HTMLSelector  new  select tap "," document_ determine_root_from _element ","HTMLSelector  new  css_HTMLSelector  new  ","HTMLSelector  new  selecting_no_body? "]}," Rails Dom Testing Assertions SelectorAssertions css_select":{"type":"method","name":"css_select","children":[],"call":[" nodeset css "," nodeset "," catch_invalid_selector ","args first ","args shift "," document_root_element ","args size == ","args size "," raise ","args empty? ","ActiveSupport Deprecation  warn "," caller ","matches empty? ","root css tap ","root css "," catch_invalid_args first  "," document_args shift _element "," document_ document_root_element _element ","args shift  css tap "," document_root_element  css tap ","args shift  css "," document_root_element  css "]}," SubstitutionContext substitute!":{"type":"method","name":"substitute!","children":[],"call":["selector sub! "," add_regex ","values shift ","selector index ","values empty? ! ","values empty? "," substitution_id_for "," substitutable? ","values first "," matcher_for ","selector dup ","match [] "," substitutable? ! ","selector gsub ","selector dup  sub! ","selector dup  index ","selector dup  dup ","selector dup  gsub "]}," SubstitutionContext match":{"type":"method","name":"match","children":[],"call":["node [] =~ ","@regexes [] ","node [] ","matches find_all ","Regexp  new "]}," SubstitutionContext last_id":{"type":"method","name":"last_id","children":[],"call":["@regexes count - ","@regexes count "]}," SubstitutionContext add_regex":{"type":"method","name":"add_regex","children":[],"call":[" last_id to_s "," last_id ","@regexes push ","regex inspect ","regex is_a? "]}," SubstitutionContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTMLSelector context":{"type":"method","name":"context","children":[],"call":["SubstitutionContext  new "]}," HTMLSelector equality_tests_from":{"type":"method","name":"equality_tests_from","children":[],"call":["comparisons [] ","comparisons []= "," raise ","comparator end ","comparator begin "]}," HTMLSelector extract_selector":{"type":"method","name":"extract_selector","children":[],"call":[" context substitute! "," context "," raise ","selector is_a? ","values shift ","@values shift ","selector dup ","values shift  is_a? ","@values shift  is_a? ","selector dup  is_a? ","values shift  dup ","@values shift  dup ","selector dup  dup "]}," HTMLSelector filter":{"type":"method","name":"filter","children":[],"call":["Nokogiri XML NodeSet  new ","matches document "," message ","remaining empty? "," sprintf ","content == ","content =~ ","content sub! ","match name == ","match name ","content strip! ","NO_STRIP  include? ","match children to_s ","match children ","match text ","matches reject ","match_with is_a? "," equality_tests has_key? "," equality_tests ","match_with ! ","matches empty? "," equality_tests [] "," tests has_key? "," tests "," tests [] "," diff ","match children to_s  == ","match text  == ","match children to_s  =~ ","match text  =~ ","match children to_s  sub! ","match text  sub! ","match children to_s  strip! ","match text  strip! "]}," HTMLSelector select":{"type":"method","name":"select","children":[],"call":[" filter "," root css "," context "," selector "," root ","@root css "]}," HTMLSelector can_select_from?":{"type":"method","name":"can_select_from?","children":[],"call":["selector respond_to? "]}," HTMLSelector initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","args shift "," equality_tests_from "," extract_selector ","@values shift "," extract_equality_tests "," extract_root "," extract_selectors ","@message is_a? ","args shift  is_a? ","@values shift  is_a? "]}," Rails Dom Testing Assertions DomAssertions fragment":{"type":"method","name":"fragment","children":[],"call":["Nokogiri HTML DocumentFragment  parse ","Rails Dom Testing  html_document_fragment parse ","Rails Dom Testing  html_document_fragment "]}," Rails Dom Testing Assertions DomAssertions equal_attribute?":{"type":"method","name":"equal_attribute?","children":[],"call":["attr value == ","other_attr value ","attr value ","attr name == ","other_attr name ","attr name "]}," Rails Dom Testing Assertions DomAssertions equal_attribute_nodes?":{"type":"method","name":"equal_attribute_nodes?","children":[],"call":[" equal_attribute? ","other_nodes [] ","nodes each_with_index ","other_nodes sort_by ","nodes sort_by ","nodes size == ","other_nodes size ","nodes size ","other_nodes sort_by  [] ","nodes sort_by  each_with_index ","other_nodes sort_by  sort_by ","nodes sort_by  sort_by ","nodes sort_by  size == ","other_nodes sort_by  size ","nodes sort_by  size "]}," Rails Dom Testing Assertions DomAssertions equal_children?":{"type":"method","name":"equal_children?","children":[],"call":["child to_s == ","other_child to_s ","child to_s "," equal_attribute_nodes? ","other_child attribute_nodes ","child attribute_nodes ","child name == ","other_child name ","child name ","child element? ","child type == ","other_child type ","child type "," compare_doms "," equal_child? "]}," Rails Dom Testing Assertions DomAssertions compare_doms":{"type":"method","name":"compare_doms","children":[],"call":[" equal_children? ","actual children [] ","actual children ","expected children each_with_index ","expected children ","expected children size == ","actual children size ","expected children size ","actual_children [] ","expected_children each_with_index ","expected_children size == ","actual_children size ","expected_children size "," extract_children "," extract_children  [] "," extract_children  each_with_index "," extract_children  size == "," extract_children  size "]}," Rails Dom Testing Assertions DomAssertions assert_dom_not_equal":{"type":"method","name":"assert_dom_not_equal","children":[],"call":[" assert_not "," compare_doms "," fragment "]}," Rails Dom Testing Assertions DomAssertions assert_dom_equal":{"type":"method","name":"assert_dom_equal","children":[],"call":[" assert "," compare_doms "," fragment "]}," Rails Dom Testing Assertions TagAssertions html_scanner_document":{"type":"method","name":"html_scanner_document","children":[],"call":["HTML Document  new ","@response body ","@response content_type =~ ","@response content_type "]}," Rails Dom Testing Assertions TagAssertions _find_tag":{"type":"method","name":"_find_tag","children":[],"call":[" html_scanner_document find "," html_scanner_document "]}," Rails Dom Testing Assertions TagAssertions find_all_tag":{"type":"method","name":"find_all_tag","children":[],"call":[" html_scanner_document find_all "," html_scanner_document ","ActiveSupport Deprecation  warn "]}," Rails Dom Testing Assertions TagAssertions find_tag":{"type":"method","name":"find_tag","children":[],"call":[" _find_tag ","ActiveSupport Deprecation  warn "]}," Rails Dom Testing Assertions TagAssertions assert_no_tag":{"type":"method","name":"assert_no_tag","children":[],"call":[" assert ","@response body inspect ","@response body ","opts inspect ","tag ! "," _find_tag ","opts first ","opts last merge ","opts first to_s ","opts last ","opts size > ","opts size ","ActiveSupport Deprecation  warn ","opts first  inspect ","opts last merge  inspect "," _find_tag  ! "," _find_ _find_tag  ","opts first  first ","opts last merge  first ","opts first  last merge ","opts last merge  last merge ","opts first  first to_s ","opts last merge  first to_s ","opts first  last ","opts last merge  last ","opts first  size > ","opts last merge  size > ","opts first  size ","opts last merge  size "]}," Rails Dom Testing Assertions TagAssertions assert_tag":{"type":"method","name":"assert_tag","children":[],"call":[" assert ","@response body inspect ","@response body ","opts inspect "," _find_tag ","opts first ","opts last merge ","opts first to_s ","opts last ","opts size > ","opts size ","ActiveSupport Deprecation  warn ","opts first  inspect ","opts last merge  inspect "," _find_ _find_tag  ","opts first  first ","opts last merge  first ","opts first  last merge ","opts last merge  last merge ","opts first  first to_s ","opts last merge  first to_s ","opts first  last ","opts last merge  last ","opts first  size > ","opts last merge  size > ","opts first  size ","opts last merge  size "]}," SubstitutionContext substitutable?":{"type":"method","name":"substitutable?","children":[],"call":["value is_a? ","(const nil :Symbol) any? "]}," SubstitutionContext substitution_id_for":{"type":"method","name":"substitution_id_for","children":[],"call":["(send\n  (lvar :value) :is_a?\n  (const nil :Regexp)) inspect ","@regexes size - ","@regexes size ","@regexes << ","value is_a? "]}," Rails Dom Testing Assertions SelectorAssertions selecting_no_body?":{"type":"method","name":"selecting_no_body?","children":[],"call":["html_selector tests [] == ","html_selector tests [] ","html_selector tests ","html_selector selector == ","html_selector selector "]}," HTMLSelector extract_equality_tests":{"type":"method","name":"extract_equality_tests","children":[],"call":["comparisons [] ","comparisons []= "," raise ","comparator end ","comparator begin ","@values shift ","@values shift  end ","@values shift  begin "]}," HTMLSelector extract_root":{"type":"method","name":"extract_root","children":[],"call":["root_fallback call ","@values shift ","possible_root respond_to? "," raise ","possible_root == ","@values first ","@values first  respond_to? ","@values first  == "]}," CountDescripable pluralize_element":{"type":"method","name":"pluralize_element","children":[],"call":["quantity == "]}," CountDescripable count_description":{"type":"method","name":"count_description","children":[],"call":[" pluralize_element ","(and\n  (send\n    (lvar :min) :==\n    (int 1))\n  (send\n    (lvar :max) :==\n    (int 1))) ! ","max == ","min == ","max != "]}," SubstitutionContext matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["value to_s inspect ","value to_s ","value inspect "]}," Rails Dom Testing Assertions SelectorAssertions CountDescribable pluralize_element":{"type":"method","name":"pluralize_element","children":[],"call":["quantity == "]}," Rails Dom Testing Assertions SelectorAssertions CountDescribable count_description":{"type":"method","name":"count_description","children":[],"call":[" pluralize_element ","(and\n  (send\n    (lvar :min) :==\n    (int 1))\n  (send\n    (lvar :max) :==\n    (int 1))) ! ","max == ","min == ","max != "]}," HTMLSelector extract_selectors":{"type":"method","name":"extract_selectors","children":[],"call":[" context substitute! "," context ","@values dup "," raise ","selector is_a? ","@values shift ","@values shift  is_a? "]}," HTMLSelector selecting_no_body?":{"type":"method","name":"selecting_no_body?","children":[],"call":["@tests [] == ","@tests [] ","@selector == "]}," Rails Dom Testing Assertions SelectorAssertions assert_dom_email":{"type":"method","name":"assert_dom_email","children":[],"call":[" assert_dom ","Nokogiri HTML DocumentFragment  parse ","part body to_s ","part body ","part [] to_s =~ ","part [] to_s ","part [] ","(if\n  (send\n    (send\n      (lvar :delivery) :parts) :empty?)\n  (array\n    (lvar :delivery))\n  (send\n    (lvar :delivery) :parts)) each ","delivery parts ","delivery parts empty? ","deliveries each "," assert ","deliveries empty? ! ","deliveries empty? ","ActionMailer Base  deliveries ","Rails Dom Testing  html_document_fragment parse ","Rails Dom Testing  html_document_fragment ","(str \"^text/html\\\\W\") match? ","ActionMailer Base  deliveries  each ","ActionMailer Base  deliveries  empty? ! ","ActionMailer Base  deliveries  empty? ","ActionMailer Base  ActionMailer Base  deliveries  "]}," Rails Dom Testing Assertions SelectorAssertions assert_dom_encoded":{"type":"method","name":"assert_dom_encoded","children":[],"call":[" assert_dom ","content empty? "," nest_selection ","Nokogiri HTML DocumentFragment  parse ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@selected))) :map) join ","(send\n  (send\n    (lvar :elem) :children) :select) map ","child blank? ! ","child blank? ","child text? ","child cdata? ","elem children select ","elem children "," nodeset map "," nodeset "," raise ","@selected ! ","element ! ","Rails Dom Testing  html_document_fragment parse ","Rails Dom Testing  html_document_fragment ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@selected))) :map) join  empty? ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@Nokogiri HTML DocumentFragment  parse ))) :map) join ","(send\n  (send nil :nodeset\n    (or\n      (lvar :element)\n      (ivar :@Rails Dom Testing  html_document_fragment parse ))) :map) join ","@Nokogiri HTML DocumentFragment  parse  ! ","@Rails Dom Testing  html_document_fragment parse  ! "]}," Rails Dom Testing Assertions SelectorAssertions assert_dom":{"type":"method","name":"assert_dom","children":[],"call":[" nest_selection ","matches empty? ! ","matches empty? "," block_given? "," assert_size_match! ","selector message ","selector css_selector ","selector tests ","matches size ","selector select tap ","selector select "," assert ","selector selecting_no_body? "," nodeset "," document_root_element ","HTMLSelector  new "]}," Rails Dom Testing Assertions DomAssertions equal_child?":{"type":"method","name":"equal_child?","children":[],"call":["child to_s split == ","other_child to_s split ","other_child to_s ","child to_s split ","child to_s ","child to_s == "]}," Rails Dom Testing Assertions DomAssertions extract_children":{"type":"method","name":"extract_children","children":[],"call":["n text blank? ","n text ","n text? ","node children reject ","node children "]}," Rails Dom Testing choose_html_parser":{"type":"method","name":"choose_html_parser","children":[],"call":[" raise ","html_version inspect ","parser_classes [] ","Rails Dom Testing  html5_support? ","Rails Dom Testing  default_html_version "]}," Rails Dom Testing html_document_fragment":{"type":"method","name":"html_document_fragment","children":[],"call":[" choose_html_parser ","parser_classes []= "," html5_support? "]}," Rails Dom Testing html_document":{"type":"method","name":"html_document","children":[],"call":[" choose_html_parser ","parser_classes []= "," html5_support? "]}," Rails Dom Testing html5_support?":{"type":"method","name":"html5_support?","children":[],"call":[]}," Rails Dom Testing Assertions SelectorAssertions pluralize_element":{"type":"method","name":"pluralize_element","children":[],"call":["quantity == "]}," Rails Dom Testing Assertions SelectorAssertions SubstitutionContext substitutable?":{"type":"method","name":"substitutable?","children":[],"call":["value is_a? ","(const nil :Symbol) any? "]}," Rails Dom Testing Assertions SelectorAssertions SubstitutionContext matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["value to_s inspect ","value to_s ","value is_a? ","value inspect "]}," Rails Dom Testing Assertions SelectorAssertions SubstitutionContext match":{"type":"method","name":"match","children":[],"call":["node [] =~ ","Regexp  new ","node [] ","matches find_all "]}," Rails Dom Testing Assertions SelectorAssertions SubstitutionContext substitute!":{"type":"method","name":"substitute!","children":[],"call":[" matcher_for ","values shift ","match [] "," substitutable? ! "," substitutable? ","values first ","values empty? ","selector gsub "]}," Rails Dom Testing Assertions SelectorAssertions SubstitutionContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector extract_equality_tests":{"type":"method","name":"extract_equality_tests","children":[],"call":["comparisons [] ","comparisons []= "," raise ","comparator end ","comparator begin ","@values shift ","@values shift  end ","@values shift  begin "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector extract_selectors":{"type":"method","name":"extract_selectors","children":[],"call":[" context substitute! "," context ","@values dup "," raise ","selector is_a? ","@values shift ","@values shift  is_a? "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector extract_root":{"type":"method","name":"extract_root","children":[],"call":["root_fallback call ","@values shift ","possible_root respond_to? "," raise ","possible_root == ","@values first ","@values first  respond_to? ","@values first  == "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector filter":{"type":"method","name":"filter","children":[],"call":["Nokogiri XML NodeSet  new ","matches document ","remaining empty? "," diff ","content == ","content =~ ","content delete_prefix! ","match name == ","match name ","content strip! ","NO_STRIP  include? ","match children to_s ","match children ","match text ","matches reject ","match_with is_a? "," tests has_key? "," tests ","match_with ! ","matches empty? "," tests [] ","match children to_s  == ","match text  == ","match children to_s  =~ ","match text  =~ ","match children to_s  delete_prefix! ","match text  delete_prefix! ","match children to_s  strip! ","match text  strip! "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector select":{"type":"method","name":"select","children":[],"call":[" filter ","@root css "," context "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector selecting_no_body?":{"type":"method","name":"selecting_no_body?","children":[],"call":["@tests [] == ","@tests [] ","@selector == "]}," Rails Dom Testing Assertions SelectorAssertions HTMLSelector initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@values shift ","@message is_a? "," extract_equality_tests "," extract_selectors "," extract_root ","@values shift  is_a? "]}}