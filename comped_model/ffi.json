{" FFI Struct config":{"type":"method","name":"config","children":[],"call":[]}," FFI Struct layout":{"type":"method","name":"layout","children":[],"call":["cspec size "," == ","builder build ","builder size= ","@size > ","builder size "," array_layout "," hash_layout ","spec [] kind_of? ","spec [] ","builder union= "," < ","FFI StructLayoutBuilder  new ","spec size == ","spec size ","builder alignment= ","builder packed= ","StructLayoutBuilder  new "," warn "," caller [] "," caller "," inspect ","builder build  size ","FFI StructLayoutBuilder  new  build ","StructLayoutBuilder  new  build ","FFI StructLayoutBuilder  new  size= ","StructLayoutBuilder  new  size= ","cspec size  > ","FFI StructLayoutBuilder  new  size ","StructLayoutBuilder  new  size ","FFI StructLayoutBuilder  new  union= ","StructLayoutBuilder  new  union= ","FFI StructLayoutBuilder  new  alignment= ","StructLayoutBuilder  new  alignment= ","FFI StructLayoutBuilder  new  packed= ","StructLayoutBuilder  new  packed= "]}," FFI Struct rubinius_layout":{"type":"method","name":"rubinius_layout","children":[],"call":[]}," FFI Struct jruby_layout":{"type":"method","name":"jruby_layout","children":[],"call":[]}," FFI BaseStruct clear":{"type":"method","name":"clear","children":[],"call":["@pointer clear "]}," FFI BaseStruct values":{"type":"method","name":"values","children":[],"call":[" [] ","@cspec members map ","@cspec members "]}," FFI BaseStruct members":{"type":"method","name":"members","children":[],"call":["@cspec members "]}," FFI BaseStruct []=":{"type":"method","name":"[]=","children":[],"call":["@cspec [] put ","@cspec [] "]}," FFI BaseStruct []":{"type":"method","name":"[]","children":[],"call":["@cspec [] get ","@cspec [] "]}," FFI BaseStruct size":{"type":"method","name":"size","children":[],"call":[" class size "," class "]}," FFI BaseStruct alloc_out":{"type":"method","name":"alloc_out","children":[],"call":[]}," FFI BaseStruct alloc_in":{"type":"method","name":"alloc_in","children":[],"call":[]}," FFI BaseStruct alloc_inout":{"type":"method","name":"alloc_inout","children":[],"call":[]}," FFI BaseStruct initialize":{"type":"method","name":"initialize","children":[],"call":["MemoryPointer  new "," size "," class layout "," class "]}," FFI StructLayoutBuilder align":{"type":"method","name":"align","children":[],"call":["(send\n  (lvar :off) :&\n  (send\n    (lvar :mask) :~)) + ","off & ","mask ~ ","(send\n  (lvar :off) :&\n  (lvar :mask)) != ","bytes - ","bits / ","align + ","(send\n  (lvar :offset) :-\n  (int 1)) & ","(send\n  (lvar :align) :-\n  (int 1)) ~ ","align - ","offset - ","(send\n  (lvar :off) :&\n  (send\n    (lvar :bytes - ) :~)) + ","bytes -  ~ ","(send\n  (lvar :off) :&\n  (lvar :bytes - )) != ","bits /  - "]}," FFI StructLayoutBuilder build":{"type":"method","name":"build","children":[],"call":["StructLayout  new ","align + ","(send\n  (ivar :@size) :-\n  (int 1)) & ","(send\n  (lvar :align) :-\n  (int 1)) ~ ","align - ","@size - ","@min_align / "," align ","layout __union! ","@min_align /  + ","(send\n  (ivar :@ align ) :-\n  (int 1)) & ","(send\n  (lvar :@min_align / ) :-\n  (int 1)) ~ ","@min_align /  - ","@ align  - ","@min_@min_align /  / "," @min_align /  ","StructLayout  new  __union! "]}," FFI StructLayoutBuilder add_field":{"type":"method","name":"add_field","children":[],"call":["off + ","@fields []= ","field_class new "," align ","field_class align ","offset to_i ","field_class size / ","field_class size "," raise ","FFI Platform LONG_SIZE  == ","field_class align > ","@field_names << "," calc_current_size "," calc_alignment_of "," field_class_from "," add "," align  + ","offset to_i  + "," calc_alignment_of  + "," align set to_i ","offset to_i set to_i "," calc_alignment_of set to_i ","field_class field_class size /  / ","field_class field_class size /  "," calc_current_field_class size /  "]}," FFI StructLayoutBuilder initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," FFI StructLayoutBuilder Unsigned64 get":{"type":"method","name":"get","children":[],"call":["ptr get_uint64 "]}," FFI StructLayoutBuilder Unsigned64 put":{"type":"method","name":"put","children":[],"call":["ptr put_uint64 "]}," FFI StructLayoutBuilder Unsigned64 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned64 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Signed64 get":{"type":"method","name":"get","children":[],"call":["ptr get_int64 "]}," FFI StructLayoutBuilder Signed64 put":{"type":"method","name":"put","children":[],"call":["ptr put_int64 "]}," FFI StructLayoutBuilder Signed64 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Signed64 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned32 get":{"type":"method","name":"get","children":[],"call":["ptr get_uint32 "]}," FFI StructLayoutBuilder Unsigned32 put":{"type":"method","name":"put","children":[],"call":["ptr put_uint32 "]}," FFI StructLayoutBuilder Unsigned32 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Signed32 get":{"type":"method","name":"get","children":[],"call":["ptr get_int32 "]}," FFI StructLayoutBuilder Signed32 put":{"type":"method","name":"put","children":[],"call":["ptr put_int32 "]}," FFI StructLayoutBuilder Signed32 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned16 get":{"type":"method","name":"get","children":[],"call":["ptr get_uint16 "]}," FFI StructLayoutBuilder Unsigned16 put":{"type":"method","name":"put","children":[],"call":["ptr put_uint16 "]}," FFI StructLayoutBuilder Unsigned16 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Signed16 get":{"type":"method","name":"get","children":[],"call":["ptr get_int16 "]}," FFI StructLayoutBuilder Signed16 put":{"type":"method","name":"put","children":[],"call":["ptr put_int16 "]}," FFI StructLayoutBuilder Signed16 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned8 get":{"type":"method","name":"get","children":[],"call":["ptr get_uint8 "]}," FFI StructLayoutBuilder Unsigned8 put":{"type":"method","name":"put","children":[],"call":["ptr put_uint8 "]}," FFI StructLayoutBuilder Unsigned8 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Signed8 get":{"type":"method","name":"get","children":[],"call":["ptr get_int8 "]}," FFI StructLayoutBuilder Signed8 put":{"type":"method","name":"put","children":[],"call":["ptr put_int8 "]}," FFI StructLayoutBuilder Signed8 size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Field align":{"type":"method","name":"align","children":[],"call":[" align "," class align "," class "]}," FFI StructLayoutBuilder Field size":{"type":"method","name":"size","children":[],"call":[" size "," class size "," class "]}," FFI StructLayoutBuilder Field offset":{"type":"method","name":"offset","children":[],"call":[]}," FFI StructLayoutBuilder Field initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI StructLayout size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayout []":{"type":"method","name":"[]","children":[],"call":["@fields [] "]}," FFI StructLayout initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI Platform unix?":{"type":"method","name":"unix?","children":[],"call":[]}," FFI Platform mac?":{"type":"method","name":"mac?","children":[],"call":[]}," FFI Platform windows?":{"type":"method","name":"windows?","children":[],"call":[]}," FFI Platform bsd?":{"type":"method","name":"bsd?","children":[],"call":[]}," FFI Platform is_os":{"type":"method","name":"is_os","children":[],"call":[]}," FFI MemoryPointer write_array_of_long":{"type":"method","name":"write_array_of_long","children":[],"call":[" put_array_of_long "]}," FFI MemoryPointer read_array_of_long":{"type":"method","name":"read_array_of_long","children":[],"call":[" get_array_of_long "]}," FFI MemoryPointer write_array_of_int":{"type":"method","name":"write_array_of_int","children":[],"call":[" put_array_of_int32 "]}," FFI MemoryPointer read_array_of_int":{"type":"method","name":"read_array_of_int","children":[],"call":[" get_array_of_int32 "]}," FFI MemoryPointer write_array_of_type":{"type":"method","name":"write_array_of_type","children":[],"call":["tmp send ","ary each ","FFI  type_size ","FFI  type_FFI  type_size  "]}," FFI MemoryPointer read_array_of_type":{"type":"method","name":"read_array_of_type","children":[],"call":["ary << ","tmp send ","length times ","FFI  type_size ","FFI  type_FFI  type_size  "]}," FFI MemoryPointer write_string":{"type":"method","name":"write_string","children":[],"call":[" put_string ","str size "]}," FFI MemoryPointer write_string_length":{"type":"method","name":"write_string_length","children":[],"call":[" put_string "]}," FFI MemoryPointer read_string_to_null":{"type":"method","name":"read_string_to_null","children":[],"call":[" get_string "]}," FFI MemoryPointer read_string_length":{"type":"method","name":"read_string_length","children":[],"call":[" get_string "]}," FFI MemoryPointer read_string":{"type":"method","name":"read_string","children":[],"call":[" get_string "]}," FFI MemoryPointer write_float":{"type":"method","name":"write_float","children":[],"call":[" put_float32 "]}," FFI MemoryPointer read_float":{"type":"method","name":"read_float","children":[],"call":[" get_float32 "]}," FFI MemoryPointer read_pointer":{"type":"method","name":"read_pointer","children":[],"call":[" get_pointer "]}," FFI MemoryPointer read_long_long":{"type":"method","name":"read_long_long","children":[],"call":[" get_int64 "]}," FFI MemoryPointer write_long_long":{"type":"method","name":"write_long_long","children":[],"call":[" put_int64 "]}," FFI MemoryPointer read_long":{"type":"method","name":"read_long","children":[],"call":[" get_long "]}," FFI MemoryPointer write_long":{"type":"method","name":"write_long","children":[],"call":[" put_long "]}," FFI MemoryPointer read_int":{"type":"method","name":"read_int","children":[],"call":[" get_int32 "]}," FFI MemoryPointer write_int":{"type":"method","name":"write_int","children":[],"call":[" put_int32 "]}," FFI MemoryPointer []":{"type":"method","name":"[]","children":[],"call":[" + ","which * "," raise "]}," FFI MemoryPointer from_string":{"type":"method","name":"from_string","children":[],"call":[]}," FFI MemoryPointer new":{"type":"method","name":"new","children":[],"call":[]}," Library callback":{"type":"method","name":"callback","children":[],"call":["@ffi_callbacks []= ","FFI Callback  new ","FFI  find_type ","args map ","Hash  new ","FFI CallbackInfo  new "," find_type ","name nil? ","params map ","args [] ","args length == ","args length "," raise ","args length > ","args length < ","Hash  new  []= "]}," Library attach_function":{"type":"method","name":"attach_function","children":[],"call":[" module_eval "," raise "," name ","FFI  create_invoker ","cname to_s ","@ffi_callbacks [] ","FFI  find_type ","arg_types map! ","mname to_s ","invoker kind_of? ! ","invoker kind_of? ","callback_count < ","arity <= ","callback_count > ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :arity))) :map) join ","(irange\n  (int 1)\n  (lvar :arity)) map ","arg_types length ","FFI NotFoundError  new ","lib name ","libraries map ","invokers compact shift ","invokers compact ","invokers << "," find_type ","invokers empty? ","libraries each ","options []= ","Hash  new ","e < ","e is_a? ","@ffi_callbacks has_key? ","invoker attach ","has_callback ! ","t kind_of? ","arg_types any? "," ffi_libraries map "," ffi_libraries "," ffi_libraries each ","FFI  create_FFI  create_invoker  ","FFI  create_invokers compact shift  ","FFI  create_invoker  kind_of? ! ","invokers compact shift  kind_of? ! ","FFI  create_invoker  kind_of? ","invokers compact shift  kind_of? ","arg_types length  <= ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :arg_types length ))) :map) join ","(irange\n  (int 1)\n  (lvar :arg_types length )) map ","FFI  create_invoker s compact shift ","invokers compact shift s compact shift ","FFI  create_invoker s compact ","invokers compact shift s compact ","FFI  create_invoker s << ","invokers compact shift s << ","FFI  create_invoker s empty? ","invokers compact shift s empty? ","Hash  new  []= ","FFI  create_invoker  attach ","invokers compact shift  attach "]}," Library ffi_convention":{"type":"method","name":"ffi_convention","children":[],"call":[]}," Library ffi_lib":{"type":"method","name":"ffi_lib","children":[],"call":[" raise ","mapped_names join ","ffi_libs empty? ","(send\n  (lvar :mapped_names) :map) compact ","errors []= ","FFI DynamicLibrary  open ","FFI DynamicLibrary RTLD_LAZY  | ","mapped_names map ","Hash  new ","FFI  map_library_name ","names map ","names join ","ffi_libs << ","(lvar :name) each ","names each ","LoadError  new ","msgs join ","msgs << ","ex message ","errors each ","(send\n  (lvar :mapped_names) :map) compact  empty? ","ffi_FFI DynamicLibrary  open s empty? ","Hash  new  []= ","FFI  map_FFI DynamicLibrary  open rary_name ","(send\n  (lvar :mapped_names) :map) compact  << ","ffi_FFI DynamicLibrary  open s << ","Hash  new  each "]}," FFI create_invoker":{"type":"method","name":"create_invoker","children":[],"call":[]}," FFI type_size":{"type":"method","name":"type_size","children":[],"call":[]}," FFI find_type":{"type":"method","name":"find_type","children":[],"call":[]}," FFI add_typedef":{"type":"method","name":"add_typedef","children":[],"call":[]}," FFI NotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":["libraries join ","libraries [] nil? ","libraries [] "]}," FFI Buffer alloc_inout":{"type":"method","name":"alloc_inout","children":[],"call":[]}," FFI Buffer alloc_out":{"type":"method","name":"alloc_out","children":[],"call":[]}," FFI Buffer alloc_in":{"type":"method","name":"alloc_in","children":[],"call":[]}," FFI Buffer new":{"type":"method","name":"new","children":[],"call":[]}," FFI Buffer __calc_size":{"type":"method","name":"__calc_size","children":[],"call":[]}," FFI VariadicInvoker call":{"type":"method","name":"call","children":[],"call":[" invoke ","param_values << ","args [] ","i + ","param_types << ","FFI  find_type ","i < ","args length ","@fixed length ","@fixed each_with_index ","Array  new "," @fixed length nvoke ","Array  new  << ","@fixed length  + ","FFI  f@fixed length nd_type ","@fixed length  < ","@f@fixed length xed length ","@f@fixed length xed each_w@fixed length th_@fixed length ndex "]}," FFI VariadicInvoker init":{"type":"method","name":"init","children":[],"call":["@fixed << ","type == ","arg_types each_with_index ","Array  new ","Array  new  << "]}," FFI VariadicInvoker new":{"type":"method","name":"new","children":[],"call":[]}," FFI size_to_type":{"type":"method","name":"size_to_type","children":[],"call":[]}," FFI TypesGenerator generate":{"type":"method","name":"generate","children":[],"call":[]}," FFI Field to_config":{"type":"method","name":"to_config","children":[],"call":["buf << "]}," FFI Field offset=":{"type":"method","name":"offset=","children":[],"call":[]}," FFI Field initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI StructGenerator name":{"type":"method","name":"name","children":[],"call":[]}," FFI StructGenerator include":{"type":"method","name":"include","children":[],"call":["@includes << "]}," FFI StructGenerator get_field":{"type":"method","name":"get_field","children":[],"call":["name == ","f name ","@fields find "]}," FFI StructGenerator generate_layout":{"type":"method","name":"generate_layout","children":[],"call":["buf << ","i < ","@fields length - ","@fields length ","field offset ","field type ","field name ","buf empty? ","@fields each_with_index "]}," FFI StructGenerator dump_config":{"type":"method","name":"dump_config","children":[],"call":["io puts ","field to_config ","@fields each "]}," FFI StructGenerator found?":{"type":"method","name":"found?","children":[],"call":[]}," FFI StructGenerator field":{"type":"method","name":"field","children":[],"call":["@fields << ","Field  new ","@Field  new s << "]}," FFI StructGenerator calculate":{"type":"method","name":"calculate","children":[],"call":["@fields [] size= ","md [] to_i ","md [] ","@fields [] ","@fields [] offset= ","line match ","output each ","m [] ","(str \"\\\\s*sizeof\\\\([^)]+\\\\) (\\\\d+)\") match ","output shift ","File  unlink ","binary + ","FFI Platform  windows? ","(begin\n  (lvar :binary)) split "," raise ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join ","output split map ","output split ","$? success? ","f path ","options [] ","f flush ","f puts ","field name ","@fields each ","@includes each ","Tempfile  open ","@struct_name nil? ","File  join ","Process  pid ","Dir  tmpdir ","ENV  [] ","line match  [] to_i ","(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match d [] to_i ","line match  [] ","(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match d [] ","line (str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match atch ","(begin\n  (lvar :binary)) split  each ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  each ","(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match  [] ","(str \"\\\\s*sizeof\\\\([^)]+\\\\) (\\\\d+)\") (str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match atch ","(str \"\\\\s*output shift \\\\([^)]+\\\\) (\\\\d+)\") match ","(begin\n  (lvar :binary)) split  shift ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  shift ","File  join  + ","FFI Platfor(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match   windows? ","(begin\n  (lvar :File  join )) split ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match ap) join ","(send\n  (send\n    (lvar :(begin\n  (lvar :binary)) split ) :split\n    (str \"\\n\")) :map) join ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join ) :split\n    (str \"\\n\")) :map) join ","output split (str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match ap ","(begin\n  (lvar :binary)) split  split map ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  split map ","(begin\n  (lvar :binary)) split  split ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  split ","field na(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match e ","Te(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match pfile  open ","@struct_na(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match e nil? ","Dir  t(str \"\\s*sizeof\\([^)]+\\) (\\d+)\") match pdir "]}," FFI StructGenerator options":{"type":"method","name":"options","children":[],"call":[]}," FFI StructGenerator options=":{"type":"method","name":"options=","children":[],"call":[]}," FFI StructGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[" calculate "," class options merge "," class options "," class "," block_given? "]}," Task initialize":{"type":"method","name":"initialize","children":[],"call":["FFI Generator  new "," puts ","Rake  application options trace ","Rake  application options ","Rake  application "," file ","rb_names each "," rm_f "," task "]}," FFI Generator to_s":{"type":"method","name":"to_s","children":[],"call":["obj to_s inspect ","obj to_s "," proc "]}," FFI Generator struct":{"type":"method","name":"struct","children":[],"call":["@structs << ","FFI StructGenerator  new ","@options merge "]}," FFI Generator constants":{"type":"method","name":"constants","children":[],"call":["@constants << ","FFI ConstGenerator  new ","@options merge "]}," FFI Generator initialize":{"type":"method","name":"initialize","children":[],"call":["f puts "," open ","new_lines join ","(nil) * ","padding >= ","original_lines - ","new_lines length ","indent + ","new_lines map ","new_lines join split ","new_lines << ","s generate_layout ","@structs each ","c to_ruby ","@constants each "," instance_eval ","2 count ","file gsub ","File  read ","File  basename ","$` count ","new_lines join split  join ","original_lines -  >= ","2 count  - ","new_lines join split  length ","new_lines join split  map ","new_lines join split  join split ","new_lines join split  << ","File  read  gsub "]}," FFI Constant to_ruby":{"type":"method","name":"to_ruby","children":[],"call":[" converted_value "," ruby_name "]}," FFI Constant ruby_name":{"type":"method","name":"ruby_name","children":[],"call":[]}," FFI Constant converted_value":{"type":"method","name":"converted_value","children":[],"call":["@converter call "]}," FFI Constant initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI ConstGenerator include":{"type":"method","name":"include","children":[],"call":["@includes << ","i flatten "]}," FFI ConstGenerator to_ruby":{"type":"method","name":"to_ruby","children":[],"call":["(send\n  (block\n    (send\n      (ivar :@constants) :sort_by)\n    (args\n      (arg :name))\n    (lvar :name)) :map) join ","constant to_ruby ","constant value nil? ","constant value ","(send\n  (ivar :@constants) :sort_by) map ","@constants sort_by "]}," FFI ConstGenerator dump_constants":{"type":"method","name":"dump_constants","children":[],"call":["io puts ","constant converted_value ","(ivar :@prefix) join ","@constants each "]}," FFI ConstGenerator calculate":{"type":"method","name":"calculate","children":[],"call":[" raise ","missing_constants join ","missing_constants empty? ! ","missing_constants empty? ","(send\n  (ivar :@constants) :select) map ","constant value nil? ","constant value ","@constants select ","const value= ","@constants [] ","line =~ ","output each_line ","File  unlink ","binary + ","FFI Platform  windows? ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join ","output split map ","output split ","$? success? ","f path ","options [] ","f flush ","f puts ","const name ","const cast ","const format ","@constants each_value ","@includes each ","Tempfile  open ","File  join ","Process  pid ","Dir  tmpdir ","ENV  [] ","binary_path + ","f path + ","missing_@constants [] ants join ","missing_@constants [] ants empty? ! ","missing_@constants [] ants empty? ","(send\n  (ivar :@@constants [] ants) :select) map ","@constants [] ant value nil? ","@constants [] ant value ","@@constants [] ants select ","@constants []  value= ","@@constants [] ants [] ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  each_line ","File  join  + ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join ) :split\n    (str \"\\n\")) :map) join ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  split map ","(send\n  (send\n    (lvar :output) :split\n    (str \"\\n\")) :map) join  split ","@constants []  name ","@constants []  cast ","@constants []  format ","@@constants [] ants each_value ","File  join _path + ","f path +  + "]}," FFI ConstGenerator const":{"type":"method","name":"const","children":[],"call":["@constants []= ","name to_s ","Constant  new ","converter nil? "," raise ","@Constant  new ants []= "]}," FFI ConstGenerator []":{"type":"method","name":"[]","children":[],"call":["@constants [] value ","@constants [] ","@constants [] converted_value "]}," FFI ConstGenerator options":{"type":"method","name":"options","children":[],"call":[]}," FFI ConstGenerator options=":{"type":"method","name":"options=","children":[],"call":[]}," FFI ConstGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[" calculate "," class options merge "," class options "," class "," block_given? ","options [] "]}," FFI Struct array_layout":{"type":"method","name":"array_layout","children":[],"call":["builder add_field "," find_type ","builder add_array ","type [] ","type kind_of? ","builder add_struct ","type < ","spec [] ","spec [] kind_of? ","i < ","spec size "," enclosing_module ","builder add "," find_field_type "," enclosing_ enclosing_module ule "]}," FFI Struct hash_layout":{"type":"method","name":"hash_layout","children":[],"call":["builder add_field "," find_type ","builder add_array ","type [] ","type kind_of? ","builder add_struct ","type < ","spec [] each ","spec [] "," enclosing_module "," raise ","RUBY_VERSION  =~ ","builder add "," find_field_type "," enclosing_ enclosing_module ule "]}," FFI Struct find_type":{"type":"method","name":"find_type","children":[],"call":["FFI  find_type ","mod find_type ","type is_a? ","type < ","type kind_of? ","FFI Type Struct  new "]}," FFI Struct enclosing_module":{"type":"method","name":"enclosing_module","children":[],"call":["mod respond_to? ","obj const_get "," name split [] inject "," name split [] "," name split "," name ","mod < ","mod is_a? "]}," FFI BaseStruct out":{"type":"method","name":"out","children":[],"call":[]}," FFI BaseStruct in":{"type":"method","name":"in","children":[],"call":[]}," FFI BaseStruct to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[]}," FFI StructLayoutBuilder StringField get":{"type":"method","name":"get","children":[],"call":["strp get_string ","strp null? ","strp nil? ","ptr get_pointer ","ptr get_pointer  get_string ","ptr get_pointer  null? ","ptr get_pointer  nil? "]}," FFI StructLayoutBuilder StringField put":{"type":"method","name":"put","children":[],"call":[" raise "]}," FFI StructLayoutBuilder StringField align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder StringField size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder PointerField get":{"type":"method","name":"get","children":[],"call":["ptr get_pointer "]}," FFI StructLayoutBuilder PointerField put":{"type":"method","name":"put","children":[],"call":["ptr put_pointer "]}," FFI StructLayoutBuilder PointerField align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder PointerField size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder DoubleField get":{"type":"method","name":"get","children":[],"call":["ptr get_float64 "]}," FFI StructLayoutBuilder DoubleField put":{"type":"method","name":"put","children":[],"call":["ptr put_float64 "]}," FFI StructLayoutBuilder DoubleField align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder DoubleField size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder FloatField get":{"type":"method","name":"get","children":[],"call":["ptr get_float32 "]}," FFI StructLayoutBuilder FloatField put":{"type":"method","name":"put","children":[],"call":["ptr put_float32 "]}," FFI StructLayoutBuilder FloatField align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder FloatField size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned32 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Signed32 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned16 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Signed16 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Unsigned8 align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder Signed8 align":{"type":"method","name":"align","children":[],"call":[]}," FFI Pointer write_array_of_long":{"type":"method","name":"write_array_of_long","children":[],"call":[" put_array_of_long "]}," FFI Pointer read_array_of_long":{"type":"method","name":"read_array_of_long","children":[],"call":[" get_array_of_long "]}," FFI Pointer write_array_of_int":{"type":"method","name":"write_array_of_int","children":[],"call":[" put_array_of_int32 "]}," FFI Pointer read_array_of_int":{"type":"method","name":"read_array_of_int","children":[],"call":[" get_array_of_int32 "]}," FFI Pointer write_array_of_type":{"type":"method","name":"write_array_of_type","children":[],"call":["tmp send ","ary each ","FFI  type_size ","j == ","ary length - ","ary length ","ary each_with_index "," send ","i * ","i < "," size ","FFI  type_FFI  type_size  "," FFI  type_size  "]}," FFI Pointer read_array_of_type":{"type":"method","name":"read_array_of_type","children":[],"call":["ary << ","tmp send ","length times ","FFI  type_size ","j == ","length - ","FFI  type_FFI  type_size  "]}," FFI Pointer write_string":{"type":"method","name":"write_string","children":[],"call":[" put_string ","str size "," put_bytes ","str bytesize "," write_bytes "," warn "," caller [] "," caller ","str bytesize == "," size "," put_char ","len == ","str size  == ","str bytesize  == "]}," FFI Pointer write_string_length":{"type":"method","name":"write_string_length","children":[],"call":[" put_string "," put_bytes "," write_string "]}," FFI Pointer read_string_to_null":{"type":"method","name":"read_string_to_null","children":[],"call":[" get_string "]}," FFI Pointer read_string_length":{"type":"method","name":"read_string_length","children":[],"call":[" get_string "," get_bytes "]}," FFI Pointer read_string":{"type":"method","name":"read_string","children":[],"call":[" get_string "," get_bytes ","len == "," b "]}," FFI Pointer write_float":{"type":"method","name":"write_float","children":[],"call":[" put_float32 "]}," FFI Pointer read_float":{"type":"method","name":"read_float","children":[],"call":[" get_float32 "]}," FFI Pointer read_pointer":{"type":"method","name":"read_pointer","children":[],"call":[" get_pointer "]}," FFI Pointer read_long_long":{"type":"method","name":"read_long_long","children":[],"call":[" get_int64 "]}," FFI Pointer write_long_long":{"type":"method","name":"write_long_long","children":[],"call":[" put_int64 "]}," FFI Pointer read_long":{"type":"method","name":"read_long","children":[],"call":[" get_long "]}," FFI Pointer write_long":{"type":"method","name":"write_long","children":[],"call":[" put_long "]}," FFI Pointer read_int":{"type":"method","name":"read_int","children":[],"call":[" get_int32 "]}," FFI Pointer write_int":{"type":"method","name":"write_int","children":[],"call":[" put_int32 "]}," FFI Pointer size":{"type":"method","name":"size","children":[],"call":[]}," FFI ManagedStruct initialize":{"type":"method","name":"initialize","children":[],"call":["FFI AutoPointer  new "," class method "," class "," raise "," class respond_to? ","AutoPointer  new "]}," Library find_type":{"type":"method","name":"find_type","children":[],"call":["FFI  find_type ","code kind_of? ","code nil? ","name kind_of? ","code ! ","@ffi_typedefs [] ","name < ","name is_a? ","@ffi_callbacks [] ","@ffi_callbacks has_key? ","@ffi_typedefs has_key? ","@ffi_typedefs []  kind_of? ","@ffi_typedefs []  nil? ","@ffi_typedefs []  ! "]}," Library typedef":{"type":"method","name":"typedef","children":[],"call":["@ffi_typedefs []= ","FFI  find_type ","@ffi_typedefs [] ","current kind_of? ","Hash  new "," enum ","add kind_of? ","current == ","Hash  new  []= ","Hash  new  [] "]}," FFI IO for_fd":{"type":"method","name":"for_fd","children":[],"call":[]}," FFI map_library_name":{"type":"method","name":"map_library_name","children":[],"call":[]}," FFI errno=":{"type":"method","name":"errno=","children":[],"call":[]}," FFI errno":{"type":"method","name":"errno","children":[],"call":[]}," FFI AutoPointer method_to_proc":{"type":"method","name":"method_to_proc","children":[],"call":[]}," FFI AutoPointer finalize":{"type":"method","name":"finalize","children":[],"call":[]}," FFI AutoPointer release":{"type":"method","name":"release","children":[],"call":[]}," FFI AutoPointer new":{"type":"method","name":"new","children":[],"call":[]}," FFI Union builder":{"type":"method","name":"builder","children":[],"call":[]}," FFI UnionLayoutBuilder calc_current_size":{"type":"method","name":"calc_current_size","children":[],"call":["size > "]}," FFI UnionLayoutBuilder calc_alignment_of":{"type":"method","name":"calc_alignment_of","children":[],"call":[]}," FFI Struct is_a_struct?":{"type":"method","name":"is_a_struct?","children":[],"call":[]}," FFI Struct builder":{"type":"method","name":"builder","children":[],"call":[]}," FFI Struct out":{"type":"method","name":"out","children":[],"call":[]}," FFI Struct in":{"type":"method","name":"in","children":[],"call":[]}," FFI Struct to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[" pointer "]}," FFI Struct clear":{"type":"method","name":"clear","children":[],"call":[" pointer clear "," pointer "]}," FFI Struct offset_of":{"type":"method","name":"offset_of","children":[],"call":[" class offset_of "," class "]}," FFI Struct offsets":{"type":"method","name":"offsets","children":[],"call":[" class offsets "," class "]}," FFI Struct values":{"type":"method","name":"values","children":[],"call":[" [] "," layout members map "," layout members "," layout "," members map "," members "]}," FFI Struct members":{"type":"method","name":"members","children":[],"call":[" layout members "," layout "," class members "," class "]}," FFI Struct align":{"type":"method","name":"align","children":[],"call":[" class align "," class "]}," FFI Struct size":{"type":"method","name":"size","children":[],"call":[" class size "," class "]}," FFI Struct Array get_array_data":{"type":"method","name":"get_array_data","children":[],"call":["array << ","@type new get ","ptr + ","index * / ","index * ","@type size ","@type new ","(irange\n  (int 0)\n  (send\n    (ivar :@num) :-\n    (int 1))) inject ","@num - "]}," FFI Struct Array each":{"type":"method","name":"each","children":[],"call":[" to_a each "," to_a "]}," FFI Struct Array size":{"type":"method","name":"size","children":[],"call":["@num * / ","@num * ","@type size "]}," FFI Struct Array to_a":{"type":"method","name":"to_a","children":[],"call":[" get_array_data "]}," FFI Struct Array to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[]}," FFI Struct Array initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI StructLayoutBuilder calc_current_size":{"type":"method","name":"calc_current_size","children":[],"call":["offset + "]}," FFI StructLayoutBuilder calc_alignment_of":{"type":"method","name":"calc_alignment_of","children":[],"call":[" align ","field_class align ","offset to_i "]}," FFI StructLayoutBuilder field_class_from":{"type":"method","name":"field_class_from","children":[],"call":[" raise "," struct_field_class_from "," array_field_class_from "," callback_field_class_from "," native_field_class_from "]}," FFI StructLayoutBuilder array_field_class_from":{"type":"method","name":"array_field_class_from","children":[],"call":[" class array_field_class_from ","type [] "," field_class_from "," class ","type is_a? "]}," FFI StructLayoutBuilder struct_field_class_from":{"type":"method","name":"struct_field_class_from","children":[],"call":[" class struct_field_class_from "," class ","type < ","type is_a? "]}," FFI StructLayoutBuilder callback_field_class_from":{"type":"method","name":"callback_field_class_from","children":[],"call":["type is_a? "]}," FFI StructLayoutBuilder native_field_class_from":{"type":"method","name":"native_field_class_from","children":[],"call":["FFI Platform LONG_SIZE  == "]}," FFI StructLayoutBuilder CallbackField get":{"type":"method","name":"get","children":[],"call":[" raise "]}," FFI StructLayoutBuilder CallbackField put":{"type":"method","name":"put","children":[],"call":["ptr put_callback "]}," FFI StructLayoutBuilder CallbackField align":{"type":"method","name":"align","children":[],"call":[]}," FFI StructLayoutBuilder CallbackField size":{"type":"method","name":"size","children":[],"call":[]}," FFI StructLayout offset_of":{"type":"method","name":"offset_of","children":[],"call":["@fields [] offset ","@fields [] "," [] offset "," [] "]}," FFI StructLayout offsets":{"type":"method","name":"offsets","children":[],"call":["a [] <=> ","b [] ","a [] ","(send\n  (ivar :@fields) :map) sort ","field offset ","@fields map "," [] offset "," [] "," members map "," members "]}," FFI StructLayout members":{"type":"method","name":"members","children":[],"call":[]}," FFI Pointer write_array_of_pointer":{"type":"method","name":"write_array_of_pointer","children":[],"call":[" write_array_of_type "]}," FFI Pointer read_array_of_pointer":{"type":"method","name":"read_array_of_pointer","children":[],"call":[" read_array_of_type "]}," FFI Pointer write_pointer":{"type":"method","name":"write_pointer","children":[],"call":[" put_pointer "]}," Library attach_variable":{"type":"method","name":"attach_variable","children":[],"call":[" module_eval ","op to_s ","op == "," raise ","ffi_type is_a? "," find_type ","FFI NotFoundError  new ","address nil? ","lib find_symbol ","cname to_s ","libraries each ","mname to_s ","lib find_variable ","FFI Struct  new "," ffi_libraries ","address null? "," ffi_libraries each ","op to_FFI Struct  new  "," raiFFI Struct  new e "," find_type  is_a? ","ffi_type iFFI Struct  new _a? ","lib find_symbol  nil? ","lib find_variable  nil? ","addreFFI Struct  new FFI Struct  new  nil? ","lib find_FFI Struct  new ymbol ","cname to_FFI Struct  new  ","librarieFFI Struct  new  each ","mname to_FFI Struct  new  "," ffi_librarieFFI Struct  new  ","lib find_symbol  null? ","lib find_variable  null? ","addreFFI Struct  new FFI Struct  new  null? "," ffi_librarieFFI Struct  new  each "]}," FFI AutoPointer initialize":{"type":"method","name":"initialize","children":[],"call":["ObjectSpace  define_finalizer "," parent= ","AutoPointer  finalize ","AutoPointer  method_to_proc "," class method "," class ","proc is_a? "," raise ","ptr kind_of? ","ptr kind_of? ! ","ptr nil? ","DefaultReleaser  new ","RuntimeError  new "," class respond_to? ","CallableReleaser  new ","proc respond_to? "," class respond_to? ! ","proc respond_to? ! ","ptr type_size "]}," FFI Struct callback":{"type":"method","name":"callback","children":[],"call":["FFI CallbackInfo  new "," find_type ","params map "," enclosing_module "," raise ","ret_type == "," enclosing_ enclosing_module ule "," find_type  == "]}," Library enum_value":{"type":"method","name":"enum_value","children":[],"call":["@ffi_enums __map_symbol "]}," Library enum_type":{"type":"method","name":"enum_type","children":[],"call":["@ffi_enums find "]}," Library enum":{"type":"method","name":"enum","children":[],"call":[" typedef ","@ffi_enums << ","FFI Enum  new ","FFI Enums  new ","args [] ","args [] kind_of? "," typFFI Enum  new dFFI Enum  new f ","@ffi_FFI Enum  new nums << ","FFI Enums  new  << ","FFI Enum  nFFI Enum  new w ","FFI Enums  nFFI Enum  new w "]}," FFI IO native_read":{"type":"method","name":"native_read","children":[],"call":[]}," FFI Enum symbol_map":{"type":"method","name":"symbol_map","children":[],"call":[]}," FFI Enum []":{"type":"method","name":"[]","children":[],"call":["@vk_map [] ","@kv_map [] "]}," FFI Enum symbols":{"type":"method","name":"symbols","children":[],"call":["@kv_map keys "]}," FFI Enum initialize":{"type":"method","name":"initialize","children":[],"call":["i + ","@vk_map []= ","@kv_map []= ","info each ","info nil? ","Hash  new ","Hash  [] ","@kv_map map ","@kv_map invert "," raise ","@kv_map has_key? ","args shift ","args first kind_of? ","args first ","Hash  new  []= ","Hash  []  []= ","@kv_map invert  []= ","Hash  new  map ","Hash  new  invert ","Hash  new  has_key? "]}," FFI Enums __map_symbol":{"type":"method","name":"__map_symbol","children":[],"call":["@symbol_map [] "]}," FFI Enums find":{"type":"method","name":"find","children":[],"call":["enum symbols include? ","enum symbols ","@all_enums detect ","@tagged_enums [] ","@tagged_enums has_key? "]}," FFI Enums <<":{"type":"method","name":"<<","children":[],"call":["@symbol_map merge! ","enum symbol_map ","@tagged_enums []= ","enum tag ","enum tag nil? ","@all_enums << "]}," FFI Enums initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","Array  new "]}," FFI Struct by_value":{"type":"method","name":"by_value","children":[],"call":[]}," FFI Struct alignment":{"type":"method","name":"alignment","children":[],"call":[" class alignment "," class "]}," FFI Struct size=":{"type":"method","name":"size=","children":[],"call":[]}," Library ffi_libraries":{"type":"method","name":"ffi_libraries","children":[],"call":["libs empty? ","libs << ","FFI DynamicLibrary  open ","FFI DynamicLibrary RTLD_LAZY  | ","(send\n  (self) :name) each "," name downcase "," name "," name nil? "]}," FFI StructLayout InlineStruct get":{"type":"method","name":"get","children":[],"call":[" type struct_class new ","ptr slice "," size "," offset "," type struct_class "," type "]}," FFI StructLayout Enum put":{"type":"method","name":"put","children":[],"call":["ptr put_int "," type find "," type "," offset "]}," FFI StructLayout Enum get":{"type":"method","name":"get","children":[],"call":[" type find ","ptr get_int "," type "," offset "]}," FFI Library find_type":{"type":"method","name":"find_type","children":[],"call":["FFI  find_type ","code kind_of? ","code nil? ","name kind_of? ","name < ","name is_a? ","@ffi_callbacks [] ","@ffi_callbacks has_key? ","@ffi_typedefs [] ","@ffi_typedefs has_key? "," typedef ","Type Mapped  new ","t is_a? ","t < ","t kind_of? ","@ffi_typedefs []  kind_of? ","@ffi_typedefs []  nil? "]}," FFI Library enum_value":{"type":"method","name":"enum_value","children":[],"call":["@ffi_enums __map_symbol "]}," FFI Library enum_type":{"type":"method","name":"enum_type","children":[],"call":["@ffi_enums find "]}," FFI Library enum":{"type":"method","name":"enum","children":[],"call":[" typedef ","@ffi_enums << ","FFI Enum  new ","FFI Enums  new ","args [] ","args [] kind_of? "," generic_enum ","args shift ","args first kind_of? ","args first "," typFFI Enum  new dFFI Enum  new f ","@ffi_FFI Enum  new nums << ","FFI Enums  new  << ","FFI Enum  nFFI Enum  new w ","FFI Enums  nFFI Enum  new w "," gFFI Enum  new nFFI Enum  new ric_FFI Enum  new num "]}," FFI Library typedef":{"type":"method","name":"typedef","children":[],"call":["@ffi_typedefs []= ","FFI  find_type ","@ffi_typedefs [] "," enum ","add kind_of? ","current == ","current kind_of? ","Hash  new ","old == ","FFI Type Mapped  new ","old is_a? ","@ffi_typedefs has_key? ","old kind_of? ","Hash  new  []= ","Hash  new  [] ","Hash  new  has_key? "]}," FFI Library callback":{"type":"method","name":"callback","children":[],"call":["@ffi_callbacks []= ","Hash  new ","name nil? ","FFI CallbackInfo  new "," find_type ","params map ","options []= ","args [] ","args length == ","args length "," raise ","args length > ","args length < "," typedef "," ffi_convention ","native_params include? ","ret_type == ","Hash  new  []= "," find_type  == "]}," FFI Library attach_variable":{"type":"method","name":"attach_variable","children":[],"call":[" module_eval ","sc new ","sc layout "," find_type ","Class  new ","type new ","type < ","type is_a? "," raise ","FFI NotFoundError  new "," ffi_libraries ","address null? ","address nil? ","lib find_variable ","cname to_s "," ffi_libraries each ","mname to_s ","sc new c new ","type new c new ","Class  new  new ","sc new c layout ","type new c layout ","Class  new  layout ","Clasc new sc new   new ","Clatype new type new   new ","type isc new _a? ","type itype new _a? "," raisc new e "," raitype new e "," ffi_librariesc new  "," ffi_librarietype new  ","addresc new sc new  null? ","addretype new type new  null? ","lib find_variable  null? ","addresc new sc new  nil? ","addretype new type new  nil? ","lib find_variable  nil? ","cname to_sc new  ","cname to_type new  "," ffi_librariesc new  each "," ffi_librarietype new  each ","mname to_sc new  ","mname to_type new  "]}," FFI Library attach_function":{"type":"method","name":"attach_function","children":[],"call":[" module_eval ","invoker attach ","mname to_s ","invoker kind_of? ! ","invoker kind_of? ","has_callback ! ","arity <= ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :arity))) :map) join ","(irange\n  (int 1)\n  (lvar :arity)) map ","arg_types length "," raise ","FFI NotFoundError  new ","lib name "," ffi_libraries map "," ffi_libraries ","cname to_s ","invokers compact shift ","invokers compact ","invokers << ","FFI  create_invoker "," find_type ","invokers empty? "," ffi_libraries each ","options []= ","Hash  new ","t kind_of? ","arg_types any? ","arg_types map! ","Function  new ","VariadicInvoker  new ","arg_types [] == ","arg_types [] ","arg_types length - ","arg_types length > ","lib find_function ","options merge! ","opts is_a? ","a2 is_a? "," function_names find "," function_names "," ffi_convention ","arg_types map ","invokers compact shift  attach ","invokers compact shift  kind_of? ! ","invokers compact shift  kind_of? ","arg_types length  <= ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :arg_types length ))) :map) join ","(irange\n  (int 1)\n  (lvar :arg_types length )) map ","invokers compact shift s compact shift ","invokers compact shift s compact ","invokers compact shift s << ","FFI  create_invokers compact shift  ","invokers compact shift s empty? ","Hash  new  []= ","lib find_lib find_function  ","Hash  new  merge! "," lib find_function _names find "," lib find_function _names "]}," FFI Library ffi_libraries":{"type":"method","name":"ffi_libraries","children":[],"call":[" raise ","LoadError  new ","@ffi_libs empty? ","(ivar :@ffi_libs) ! "]}," FFI Library ffi_convention":{"type":"method","name":"ffi_convention","children":[],"call":[]}," FFI Library ffi_lib":{"type":"method","name":"ffi_lib","children":[],"call":[" raise ","LoadError  new ","errors values join ","errors values ","lib nil? ","errors []= ","FFI DynamicLibrary  open ","FFI DynamicLibrary RTLD_LAZY  | ","libnames each ","(send\n  (begin\n    (if\n      (send\n        (lvar :name) :is_a?\n        (const\n          (cbase) :Array))\n      (lvar :name)\n      (array\n        (lvar :name)))) :map) flatten compact ","(send\n  (begin\n    (if\n      (send\n        (lvar :name) :is_a?\n        (const\n          (cbase) :Array))\n      (lvar :name)\n      (array\n        (lvar :name)))) :map) flatten ","(lvar :n) uniq ","FFI  map_library_name ","(if\n  (send\n    (lvar :name) :is_a?\n    (const\n      (cbase) :Array))\n  (lvar :name)\n  (array\n    (lvar :name))) map ","name is_a? ","name == ","names map ","File  read =~ ","File  read ","ex message =~ ","ex message ","orig == ","path + ","File  exist? ","pth + ","(str \"/usr/lib/\") find ","FFI Platform  windows? ","libname start_with? ","(send\n  (send\n    (begin\n      (if\n        (send\n          (lvar :name) :is_a?\n          (const\n            (cbase) :Array))\n        (lvar :name)\n        (array\n          (lvar :name)))) :map\n    (block-pass\n      (sym :to_s))) :map) flatten compact ","(send\n  (send\n    (begin\n      (if\n        (send\n          (lvar :name) :is_a?\n          (const\n            (cbase) :Array))\n        (lvar :name)\n        (array\n          (lvar :name)))) :map\n    (block-pass\n      (sym :to_s))) :map) flatten ","(if\n  (send\n    (lvar :name) :is_a?\n    (const\n      (cbase) :Array))\n  (lvar :name)\n  (array\n    (lvar :name))) map map ","names empty? ","File  binread =~ ","File  binread ","libname to_s start_with? ","libname to_s ","FFI DynamicLibrary  open  nil? ","FFI DynamicLibrary  open names each ","(send\n  (begin\n    (if\n      (send\n        (lvar :name) :is_a?\n        (const\n          (cbase) :Array))\n      (lvar :name)\n      (array\n        (lvar :name)))) :map) flatten compact  each ","(send\n  (send\n    (begin\n      (if\n        (send\n          (lvar :name) :is_a?\n          (const\n            (cbase) :Array))\n        (lvar :name)\n        (array\n          (lvar :name)))) :map\n    (block-pass\n      (sym :to_s))) :map) flatten compact  each ","path + s each ","libname to_s s each ","FFI  map_FFI DynamicLibrary  open rary_name ","(str \"/usr/FFI DynamicLibrary  open /\") find ","FFI DynamicLibrary  open name start_with? ","path +  start_with? ","libname to_s  start_with? ","FFI DynamicLibrary  open name to_s start_with? ","path +  to_s start_with? ","libname to_s  to_s start_with? ","FFI DynamicLibrary  open name to_s ","path +  to_s ","libname to_s  to_s "]}," FFI Library extended":{"type":"method","name":"extended","children":[],"call":[]}," FFI AutoPointer CallableReleaser call":{"type":"method","name":"call","children":[],"call":["@proc call "]}," FFI AutoPointer DefaultReleaser call":{"type":"method","name":"call","children":[],"call":["@proc release "]}," FFI AutoPointer Releaser autorelease=":{"type":"method","name":"autorelease=","children":[],"call":[" raise ","RuntimeError  new "]}," FFI AutoPointer Releaser free":{"type":"method","name":"free","children":[],"call":[" raise ","RuntimeError  new "," release "]}," FFI AutoPointer Releaser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI AutoPointer autorelease=":{"type":"method","name":"autorelease=","children":[],"call":["@releaser autorelease= "]}," FFI AutoPointer free":{"type":"method","name":"free","children":[],"call":["@releaser free "]}," FFI VariadicInvoker attach":{"type":"method","name":"attach","children":[],"call":["mod module_eval "]}," FFI StrPtrConverter from_native":{"type":"method","name":"from_native","children":[],"call":[]}," FFI typedef":{"type":"method","name":"typedef","children":[],"call":[]}," FFI StructLayoutBuilder field_for_type":{"type":"method","name":"field_for_type","children":[],"call":["field_class new "," raise ","type inspect ","StructLayout Mapped  new "," field_for_type ","type native_type ","type is_a? ","Type Mapped  new ","type < ","type == ","NUMBER_TYPES  include? "]}," FFI StructLayoutBuilder add_array":{"type":"method","name":"add_array","children":[],"call":[" add ","Type Array  new "]}," FFI StructLayoutBuilder add_struct":{"type":"method","name":"add_struct","children":[],"call":[" add ","Type Struct  new "]}," FFI StructLayoutBuilder add":{"type":"method","name":"add","children":[],"call":["(ivar :@size) max ","field size + ","field offset ","field size ","(ivar :@alignment) max ","field alignment ","@fields << "," field_for_type ","type is_a? "," align ","(ivar :@min_alignment) max ","type alignment ","(ivar :@packed) min ","offset == ","offset nil? ","(ivar :(ivar :@size) max ) max "," field_for_type  size + "," field_for_type  offset ","field  align  "," field_for_type  size ","(ivar :(ivar :@alignment) max ) max "," field_for_type  alignment ","@ field_for_type s << ","  field_for_type _for_type "," align  == "," align  nil? "]}," FFI StructLayoutBuilder packed=":{"type":"method","name":"packed=","children":[],"call":["packed is_a? ","0 class "]}," FFI StructLayoutBuilder union?":{"type":"method","name":"union?","children":[],"call":[]}," FFI StructLayoutBuilder union=":{"type":"method","name":"union=","children":[],"call":[]}," FFI StructLayoutBuilder alignment=":{"type":"method","name":"alignment=","children":[],"call":["align > "]}," FFI StructLayoutBuilder size=":{"type":"method","name":"size=","children":[],"call":["size > "]}," FFI Struct find_field_type":{"type":"method","name":"find_field_type","children":[],"call":[" find_type ","FFI Type Array  new ","type [] "," find_field_type ","type kind_of? ","type < ","FFI Type Struct  new "]}," FFI Struct aligned":{"type":"method","name":"aligned","children":[],"call":[]}," FFI Struct packed":{"type":"method","name":"packed","children":[],"call":[]}," FFI Struct auto_ptr":{"type":"method","name":"auto_ptr","children":[],"call":[]}," FFI Struct ManagedStructConverter from_native":{"type":"method","name":"from_native","children":[],"call":[" struct_class new ","AutoPointer  new "," struct_class "]}," FFI Struct ManagedStructConverter initialize":{"type":"method","name":"initialize","children":[],"call":["struct_class method "," raise ","struct_class respond_to? "]}," FFI Struct by_ref":{"type":"method","name":"by_ref","children":[],"call":[]}," FFI Struct val":{"type":"method","name":"val","children":[],"call":[]}," FFI Struct ptr":{"type":"method","name":"ptr","children":[],"call":[]}," FFI StructLayout Mapped put":{"type":"method","name":"put","children":[],"call":["@orig_field put "," type to_native "," type "]}," FFI StructLayout Mapped get":{"type":"method","name":"get","children":[],"call":[" type from_native ","@orig_field get "," type "]}," FFI StructLayout Mapped initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FFI StructLayout InnerStruct get":{"type":"method","name":"get","children":[],"call":[" type struct_class new ","ptr slice "," size "," offset "," type struct_class "," type "]}," FFI Library ffi_lib_flags":{"type":"method","name":"ffi_lib_flags","children":[],"call":["result | ","FlagsMap  [] ","flags inject "]}," FFI Enum from_native":{"type":"method","name":"from_native","children":[],"call":["@vk_map [] "]}," FFI Enum to_native":{"type":"method","name":"to_native","children":[],"call":[" raise ","val inspect ","val to_int ","val respond_to? ","val is_a? ","@kv_map [] "]}," FFI Enum native_type":{"type":"method","name":"native_type","children":[],"call":[]}," FFI AutoPointer from_native":{"type":"method","name":"from_native","children":[],"call":[]}," FFI AutoPointer native_type":{"type":"method","name":"native_type","children":[],"call":[]}," FFI Library function_names":{"type":"method","name":"function_names","children":[],"call":["result << ","name to_s ","(send\n  (int 4) :-\n  (lvar :size)) % ","4 - ","mem + ","arg size ","arg_types inject ","@ffi_convention == "," ffi_convention == "," ffi_convention ","(send\n  (int 4) :-\n  (lvar :arg size )) % ","arg arg size  "]}," FFI AutoPointer CallableReleaser release":{"type":"method","name":"release","children":[],"call":["@proc call "]}," FFI AutoPointer DefaultReleaser release":{"type":"method","name":"release","children":[],"call":["@proc release "]}," FFI AutoPointer Releaser call":{"type":"method","name":"call","children":[],"call":[" release "]}," FFI StructLayout InnerStruct put":{"type":"method","name":"put","children":[],"call":["ptr slice __copy_from__ "," size ","value pointer ","ptr slice "," offset "," raise "," type struct_class "," type ","value is_a? "]}," FFI Pointer write":{"type":"method","name":"write","children":[],"call":[" put "]}," FFI Pointer read":{"type":"method","name":"read","children":[],"call":[" get "]}," FFI Pointer to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[]}," FFI Platform solaris?":{"type":"method","name":"solaris?","children":[],"call":[]}," FFI Library bitmask":{"type":"method","name":"bitmask","children":[],"call":[" generic_enum "]}," FFI Library generic_enum":{"type":"method","name":"generic_enum","children":[],"call":[" typedef ","@ffi_enums << ","klass new ","FFI Enums  new ","args [] ","args [] kind_of? ","args shift ","args first kind_of? ","args first "," typklass new dklass new f ","@ffi_klass new nums << ","FFI Enums  new  << ","klass nklass new w ","FFI Enums  nklass new w "]}," FFI Bitmask from_native":{"type":"method","name":"from_native","children":[],"call":["list push ","remainder == ","val ^ ","@kv_map [] ","list inject ","(send\n  (ivar :@kv_map) :select) keys ","v & != ","v & ","@kv_map select ","(send\n  (ivar :@kv_map) :select) keys  push ","val ^  == ","@kv_map [] al ^ ","@k@kv_map [] _map [] ","(send\n  (ivar :@kv_map) :select) keys  inject ","(send\n  (i@kv_map [] ar :@k@kv_map [] _map) :select) keys ","@kv_map []  & != ","@kv_map []  & ","@k@kv_map [] _map select "]}," FFI Bitmask to_native":{"type":"method","name":"to_native","children":[],"call":[" raise ","o inspect ","o to_int ","obj respond_to? "," lambda ","@kv_map [] ","flat_query inject ","(lvar :query) flatten ","query nil? ","@k@kv_map [] _map [] ","(lvar :query) flatten  inject ","(l@kv_map [] ar :query) flatten "]}," FFI Bitmask []":{"type":"method","name":"[]","children":[],"call":["(send\n  (ivar :@kv_map) :select) keys ","v & != ","v & ","@kv_map select ","o to_int ","flat_query inject ","o respond_to? "," lambda ","@kv_map [] ","flat_query [] "," raise ","query inspect ","o is_a? ","flat_query all? ","query flatten ","(send\n  (i@kv_map [] ar :@k@kv_map [] _map) :select) keys ","@kv_map []  & != ","@kv_map []  & ","@k@kv_map [] _map select ","query flatten  inject ","@k@kv_map [] _map [] ","query flatten  [] ","query flatten  all? "]}," FFI Bitmask initialize":{"type":"method","name":"initialize","children":[],"call":["@kv_map invert ","i + ","@kv_map []= ","1 << "," raise ","i < ","@kv_map has_key? ","info each ","info nil? ","Hash  new ","args shift ","args first kind_of? ","args first ","Hash  new  invert ","Hash  new  []= ","Hash  new  has_key? "]}," FFI AutoPointer autorelease?":{"type":"method","name":"autorelease?","children":[],"call":["@releaser autorelease "]}," FFI StructByReference from_native":{"type":"method","name":"from_native","children":[],"call":["@struct_class new "]}," FFI StructByReference to_native":{"type":"method","name":"to_native","children":[],"call":["value pointer "," raise ","value class ","@struct_class === ","value nil? "]}," FFI StructByReference native_type":{"type":"method","name":"native_type","children":[],"call":[]}," FFI StructByReference initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","struct_class < ","Class  === "]}," FFI DataConverter from_native":{"type":"method","name":"from_native","children":[],"call":[]}," FFI DataConverter to_native":{"type":"method","name":"to_native","children":[],"call":[]}," FFI DataConverter native_type":{"type":"method","name":"native_type","children":[],"call":[" raise ","FFI  find_type "]}," FFI AbstractMemory size_limit?":{"type":"method","name":"size_limit?","children":[],"call":[" size != "," size "]}}