{" SlimLint SexpVisitor DSL on_start":{"type":"method","name":"on_start","children":[],"call":[" define_method "]}," SlimLint SexpVisitor DSL on":{"type":"method","name":"on","children":[],"call":["@patterns << ","SexpPattern  new "," define_method "]}," SlimLint SexpVisitor on_start":{"type":"method","name":"on_start","children":[],"call":[]}," SlimLint SexpVisitor patterns":{"type":"method","name":"patterns","children":[],"call":[" class patterns "," class "]}," SlimLint SexpVisitor traverse_children":{"type":"method","name":"traverse_children","children":[],"call":[" traverse ","nested_sexp is_a? ","sexp each "]}," SlimLint SexpVisitor traverse":{"type":"method","name":"traverse","children":[],"call":[" traverse_children ","result == "," method call "," method ","pattern callback_method_name ","sexp match? ","pattern sexp "," patterns each "," patterns "," traverse "," lambda "," method call  == "]}," SlimLint SexpVisitor trigger_pattern_callbacks":{"type":"method","name":"trigger_pattern_callbacks","children":[],"call":[" traverse "," on_start "," on_start == "]}," SlimLint Sexp display":{"type":"method","name":"display","children":[],"call":["output << ","  * * ","depth - ","  * ","index < "," length - "," length ","nested_sexp inspect ","nested_sexp display ","depth + "," each_with_index ","output << << "," empty? ","nested_sexp is_a? ","[ dup ","[ dup  << ","[ dup  << << "]}," SlimLint Sexp match?":{"type":"method","name":"match?","children":[],"call":[" [] == "," [] "," [] match? ","sexp_pattern each_with_index "," length >= ","sexp_pattern length "," length ","sexp_pattern is_a? ","sexp_pattern match? "]}," SlimLint Sexp initialize":{"type":"method","name":"initialize","children":[],"call":[" push ","Sexp  new ","sexp each ","SlimLint Atom  new ","array_sexp each "]}," SlimLint Runner extract_applicable_files":{"type":"method","name":"extract_applicable_files","children":[],"call":["SlimLint FileFinder  new find ","SlimLint FileFinder  new ","options fetch ","options [] ","config [] "]}," SlimLint Runner find_lints":{"type":"method","name":"find_lints","children":[],"call":["@lints << ","Lint  new ","ex error ","ex line ","linter run ","linters each ","SlimLint Document  new ","File  read "]}," SlimLint Runner extract_enabled_linters":{"type":"method","name":"extract_enabled_linters","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact ","linter_class new ","linter_config [] ","config for_linter ","(send\n  (lvar :included_linters) :-\n  (lvar :excluded_linters)) map ","included_linters - ","LinterRegistry  extract_linters_from ","options fetch ","LinterRegistry  linters ","included_linters empty? ","(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :LinterRegistry  extract_linters_from ))) :map) compact ","(send\n  (begin\n    (send\n      (lvar :LinterRegistry  linters ) :-\n      (lvar :excluded_linters))) :map) compact ","(send\n  (begin\n    (send\n      (lvar :LinterRegistry  extract_linters_from ) :-\n      (lvar :excluded_linters))) :map) compact ","config for_linter  [] ","(send\n  (lvar :included_linters) :-\n  (lvar :LinterRegistry  extract_linters_from )) map ","(send\n  (lvar :LinterRegistry  linters ) :-\n  (lvar :excluded_linters)) map ","(send\n  (lvar :LinterRegistry  extract_linters_from ) :-\n  (lvar :excluded_linters)) map ","LinterRegistry  linters  - ","LinterRegistry  extract_linters_from  - ","LinterRegistry  linters  empty? ","LinterRegistry  extract_linters_from  empty? "]}," SlimLint Runner load_applicable_config":{"type":"method","name":"load_applicable_config","children":[],"call":["SlimLint ConfigurationLoader  load_applicable_config ","SlimLint ConfigurationLoader  load_file ","options [] "]}," SlimLint Runner run":{"type":"method","name":"run","children":[],"call":["SlimLint Report  new "," find_lints ","files each "," raise ","linters empty? "," extract_enabled_linters "," extract_applicable_files "," load_applicable_config ","(send\n  (lvar :files) :map) flatten "," collect_lints ","files map ","SlimLint LinterSelector  new ","options [] ","$stdin read ","File  read ","options [] nil? "," find_(send\n  (lvar :files) :map) flatten  "," find_ collect_lints  "," extract_applicable_files  each "," extract_enabled_linters  empty? "," extract_enabled_ extract_enabled_linters  "," extract_applicable_ extract_applicable_files  "," load_applicable_ load_applicable_config  ","(send\n  (lvar : extract_applicable_files ) :map) flatten "," collect_(send\n  (lvar :files) :map) flatten  "," collect_ collect_lints  "," extract_applicable_files  map "]}," SlimLint RubyParser parse":{"type":"method","name":"parse","children":[],"call":["@parser parse ","@parser reset ","buffer source= "," Parser Source Buffer  new "," Parser Source Buffer  new  source= "]}," SlimLint RubyParser initialize":{"type":"method","name":"initialize","children":[],"call":[" Parser CurrentRuby  new "," Astrolabe Builder  new "," RuboCop Node Builder  new "," RuboCop AST Builder  new "," require_parser "]}," SlimLint RubyExtractor append":{"type":"method","name":"append","children":[],"call":["@source_map []= ","(send\n  (send\n    (lvar :code) :count\n    (str \"\\n\")) :+\n  (int 1)) times ","code count + ","code count ","sexp line ","@source_lines << ","code empty? ","original_line + ","code split each_with_index ","code split ","sexp line  + "]}," SlimLint RubyExtractor extract":{"type":"method","name":"extract","children":[],"call":["@source_lines join "," trigger_pattern_callbacks ","RubySource  new "]}," SlimLint Reporter inherited":{"type":"method","name":"inherited","children":[],"call":[]}," SlimLint Reporter descendants":{"type":"method","name":"descendants","children":[],"call":[]}," SlimLint Reporter report_lints":{"type":"method","name":"report_lints","children":[],"call":[" raise "]}," SlimLint Reporter initialize":{"type":"method","name":"initialize","children":[],"call":["report files ","report lints "]}," SlimLint JsonReporter map_offense":{"type":"method","name":"map_offense","children":[],"call":["offense line ","offense message ","offense severity ","offense linter "]}," SlimLint JsonReporter map_file":{"type":"method","name":"map_file","children":[],"call":[" map_offense ","file last map ","file last ","file first "]}," SlimLint JsonReporter report_lints":{"type":"method","name":"report_lints","children":[],"call":[" log log ","report to_json "," log "," files length "," files ","grouped length "," lints length "," lints "," map_file ","grouped map ","RUBY_PATCHLEVEL  to_s "," lints group_by "," lints group_by  length "," lints group_by  map "]}," SlimLint DefaultReporter print_message":{"type":"method","name":"print_message","children":[],"call":[" log log ","lint message "," log "," log success ","lint linter name ","lint linter "]}," SlimLint DefaultReporter print_type":{"type":"method","name":"print_type","children":[],"call":[" log warning "," log "," log error ","lint error? "]}," SlimLint DefaultReporter print_location":{"type":"method","name":"print_location","children":[],"call":[" log bold ","lint line "," log "," log log "," log info ","lint filename "]}," SlimLint DefaultReporter report_lints":{"type":"method","name":"report_lints","children":[],"call":[" print_message "," print_type "," print_location ","sorted_lints each ","l line ","l filename "," lints sort_by "," lints "]}," SlimLint Report failed?":{"type":"method","name":"failed?","children":[],"call":["@lints any? "]}," SlimLint Report initialize":{"type":"method","name":"initialize","children":[],"call":["l line ","l filename ","lints sort_by "]}," SlimLint RakeTask default_description":{"type":"method","name":"default_description","children":[],"call":[" files join "," files "," files any? "," config "]}," SlimLint RakeTask files_to_lint":{"type":"method","name":"files_to_lint","children":[],"call":[" files ","explicit_files any? "," Array + "," Array ","task_args extras ","task_args [] "," Array +  any? "]}," SlimLint RakeTask run_cli":{"type":"method","name":"run_cli","children":[],"call":[" fail ","result == ","SlimLint CLI  new run "," Array + "," files_to_lint "," Array ","SlimLint CLI  new ","SlimLint Logger  new ","SlimLint Logger  silent "," quiet "," config ","SlimLint CLI  new run  == "]}," SlimLint RakeTask define":{"type":"method","name":"define","children":[],"call":[" run_cli "," require "," task "," name "," desc "," default_description "," Rake  application last_description "," Rake  application "]}," SlimLint RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," block_given? "]}," SlimLint Options add_info_options":{"type":"method","name":"add_info_options","children":[],"call":["@options []= ","parser on_tail ","parser help ","parser on "]}," SlimLint Options add_file_options":{"type":"method","name":"add_file_options","children":[],"call":["@options []= ","parser on "]}," SlimLint Options add_linter_options":{"type":"method","name":"add_linter_options","children":[],"call":["@options []= ","SlimLint Reporter  const_get ","reporter capitalize ","parser on "," load_reporter_class "]}," SlimLint Options parse":{"type":"method","name":"parse","children":[],"call":[" raise ","ex backtrace ","ex message ","@options []= ","(send\n  (const nil :OptionParser) :new) parse! "," add_info_options "," add_file_options "," add_linter_options ","parser banner= ","OptionParser  new ","e backtrace ","e message "]}," SlimLint Logger color":{"type":"method","name":"color","children":[],"call":[" log "," color_enabled "]}," SlimLint Logger tty?":{"type":"method","name":"tty?","children":[],"call":["@out tty? ","@out respond_to? "]}," SlimLint Logger info":{"type":"method","name":"info","children":[],"call":[" color "]}," SlimLint Logger bold_warning":{"type":"method","name":"bold_warning","children":[],"call":[" color "]}," SlimLint Logger warning":{"type":"method","name":"warning","children":[],"call":[" color "]}," SlimLint Logger success":{"type":"method","name":"success","children":[],"call":[" color "]}," SlimLint Logger bold_error":{"type":"method","name":"bold_error","children":[],"call":[" color "]}," SlimLint Logger error":{"type":"method","name":"error","children":[],"call":[" color "]}," SlimLint Logger bold":{"type":"method","name":"bold","children":[],"call":[" color "]}," SlimLint Logger log":{"type":"method","name":"log","children":[],"call":["@out print "]}," SlimLint Logger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint Logger silent":{"type":"method","name":"silent","children":[],"call":[]}," SlimLint LinterRegistry extract_linters_from":{"type":"method","name":"extract_linters_from","children":[],"call":[" raise ","SlimLint Linter  const_get ","linter_names map "]}," SlimLint LinterRegistry included":{"type":"method","name":"included","children":[],"call":["@linters << "]}," SlimLint Linter parse_ruby":{"type":"method","name":"parse_ruby","children":[],"call":["@ruby_parser parse ","SlimLint RubyParser  new "]}," SlimLint Linter report_lint":{"type":"method","name":"report_lint","children":[],"call":["@lints << ","SlimLint Lint  new ","sexp line ","@document file ","node line "," disabled_for_line? "]}," SlimLint Linter name":{"type":"method","name":"name","children":[],"call":[" class name split last "," class name split "," class name "," class "]}," SlimLint Linter run":{"type":"method","name":"run","children":[],"call":[" trigger_pattern_callbacks ","document sexp "]}," SlimLint Linter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint OffenceCollector file_finished":{"type":"method","name":"file_finished","children":[],"call":[" class offences "," class "]}," SlimLint OffenceCollector started":{"type":"method","name":"started","children":[],"call":[" class offences= "," class "]}," SlimLint RuboCop extract_lints_from_offences":{"type":"method","name":"extract_lints_from_offences","children":[],"call":["@lints << ","Lint  new ","offence message ","offence cop_name ","extractor source_map [] ","offence line ","extractor source_map "," document file "," document ","(send\n  (lvar :offences) :select) each "," config [] include? ! "," config [] include? "," config [] "," config ","offences select "]}," SlimLint RuboCop lint_file":{"type":"method","name":"lint_file","children":[],"call":["OffenceCollector  offences ","rubocop run ","(str \"--format\") << ","OffenseCollector  offenses "," rubocop_flags << "," rubocop_flags "]}," SlimLint RuboCop find_lints":{"type":"method","name":"find_lints","children":[],"call":["f unlink "," extract_lints_from_offences "," lint_file ","f path ","f close ","f write ","Tempfile  open ","File  dirname ","File  basename "," document file "," document "," RuboCop CLI  new "," extract_lints_from_offenses "," with_ruby_from_stdin "]}," SlimLint Lint error?":{"type":"method","name":"error?","children":[],"call":["@severity == "]}," SlimLint Lint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Filters SexpConverter call":{"type":"method","name":"call","children":[],"call":["SlimLint Sexp  new "]}," Filters InjectLineNumbers traverse":{"type":"method","name":"traverse","children":[],"call":[" traverse ","nested_sexp is_a? ","sexp each ","sexp == ","sexp line= ","sexp strip count ","sexp strip ","sexp respond_to? ","sexp count "]}," Filters InjectLineNumbers call":{"type":"method","name":"call","children":[],"call":[" traverse "]}," SlimLint FileFinder slim_file?":{"type":"method","name":"slim_file?","children":[],"call":["VALID_EXTENSIONS  include? "," File  extname "," FileTest  file? "]}," SlimLint FileFinder extract_files_from":{"type":"method","name":"extract_files_from","children":[],"call":["files uniq "," raise ","matches any? "," Dir  glob ","files << "," slim_file? "," Find  find ","File  file? ","patterns each "," normalize_path ","files uniq sort map ","files uniq sort "," Dir  glob  any? "]}," SlimLint FileFinder find":{"type":"method","name":"find","children":[],"call":[" File  fnmatch? "," File FNM_PATHNAME  | ","excluded_patterns any? "," extract_files_from reject "," extract_files_from ","SlimLint Utils  any_glob_matches? "," normalize_path ","excluded_patterns map "]}," SlimLint FileFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint Document strip_frontmatter":{"type":"method","name":"strip_frontmatter","children":[],"call":["source =~ "," config [] "," config "," Regexp  last_match post_match "," Regexp  last_match "," Regexp  last_match post_match  =~ "]}," SlimLint Document process_source":{"type":"method","name":"process_source","children":[],"call":["@engine call ","SlimLint Engine  new ","@source split "," strip_frontmatter ","engine parse "," process_encoding ","SlimLint Engine  new  call ","@SlimLint Engine  new  call "," strip_frontmatter  split "," process_encoding  split ","SlimLint Engine  new  parse "]}," SlimLint Document initialize":{"type":"method","name":"initialize","children":[],"call":[" process_source ","options fetch ","options [] "]}," SlimLint ConfigurationLoader possible_config_files":{"type":"method","name":"possible_config_files","children":[],"call":["files << ","Pathname  new ","path + ","Pathname  new enum_for map ","Pathname  new enum_for "]}," SlimLint ConfigurationLoader load_from_file":{"type":"method","name":"load_from_file","children":[],"call":["SlimLint Configuration  new ","yaml to_hash ","YAML  load_file ","yaml to_yaml to_hash  ","YAML  load_file  to_hash "]}," SlimLint ConfigurationLoader load_hash":{"type":"method","name":"load_hash","children":[],"call":[" raise ","error backtrace "," file "," default_configuration merge "," default_configuration ","SlimLint Configuration  new "," default_SlimLint Configuration  new uration merge "," default_SlimLint Configuration  new uration "]}," SlimLint ConfigurationLoader load_file":{"type":"method","name":"load_file","children":[],"call":[" raise ","error backtrace "," default_configuration merge "," default_configuration "," load_from_file ","e backtrace "," default_ load_from_file uration merge "," default_ load_from_file uration "]}," SlimLint ConfigurationLoader default_configuration":{"type":"method","name":"default_configuration","children":[],"call":[" load_from_file "]}," SlimLint ConfigurationLoader load_applicable_config":{"type":"method","name":"load_applicable_config","children":[],"call":[" default_configuration "," load_file ","config_file to_path "," possible_config_files find "," possible_config_files ","File  expand_path ","Dir  pwd "," possible_config_files find  to_path "," possible_ possible_config_files find s find "," possible_ possible_config_files find s "]}," SlimLint Configuration convert_nils_to_empty_hashes":{"type":"method","name":"convert_nils_to_empty_hashes","children":[],"call":["h []= "," convert_nils_to_empty_hashes ","hash each_with_object "]}," SlimLint Configuration ensure_linter_section_exists":{"type":"method","name":"ensure_linter_section_exists","children":[],"call":["hash [] [] ","hash [] ","@hash [] "]}," SlimLint Configuration smart_merge":{"type":"method","name":"smart_merge","children":[],"call":[" smart_merge ","parent merge "]}," SlimLint Configuration validate":{"type":"method","name":"validate","children":[],"call":[" ensure_linter_section_exists "," convert_nils_to_empty_hashes "," ensure_linter_include_exclude_arrays_exist "," ensure_exclude_option_array_exists "]}," SlimLint Configuration merge":{"type":"method","name":"merge","children":[],"call":[" class new "," smart_merge ","config hash "," class "]}," SlimLint Configuration linter_enabled?":{"type":"method","name":"linter_enabled?","children":[],"call":[" for_linter [] != "," for_linter [] "," for_linter "]}," SlimLint Configuration for_linter":{"type":"method","name":"for_linter","children":[],"call":[" smart_merge freeze "," smart_merge ","@hash [] fetch ","@hash [] ","@hash [] [] ","linter to_s ","linter name ","linter name split last ","linter name split ","@hash [] fetch dup freeze ","@hash [] fetch dup "]}," SlimLint Configuration ==":{"type":"method","name":"==","children":[],"call":["@hash == ","other hash "]}," SlimLint Configuration []":{"type":"method","name":"[]","children":[],"call":["@hash [] "]}," SlimLint Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" validate "]}," SlimLint CLI print_unexpected_exception":{"type":"method","name":"print_unexpected_exception","children":[],"call":[" log info "," log "," log warning "," log error ","ex backtrace join ","ex backtrace "," log bold_error ","ex message "," log log ","Gem  loaded_specs [] version ","Gem  loaded_specs [] ","Gem  loaded_specs "," log success "," log newline ","exception backtrace join ","exception backtrace ","exception message "]}," SlimLint CLI print_version":{"type":"method","name":"print_version","children":[],"call":[" log log "," log ","Gem  loaded_specs [] version ","Gem  loaded_specs [] ","Gem  loaded_specs ","options [] "]}," SlimLint CLI print_help":{"type":"method","name":"print_help","children":[],"call":[" log log ","options [] "," log "]}," SlimLint CLI print_available_reporters":{"type":"method","name":"print_available_reporters","children":[],"call":[" log log "," log ","reporter_names sort each ","reporter_names sort ","reporter name split last sub downcase ","reporter name split last sub ","reporter name split last ","reporter name split ","reporter name ","Reporter  descendants map ","Reporter  descendants "," log info ","SlimLint Reporter  descendants map ","SlimLint Reporter  descendants "]}," SlimLint CLI print_available_linters":{"type":"method","name":"print_available_linters","children":[],"call":[" log log "," log ","linter_names sort each ","linter_names sort ","linter name split last ","linter name split ","linter name ","LinterRegistry  linters map ","LinterRegistry  linters "," log info ","SlimLint LinterRegistry  linters map ","SlimLint LinterRegistry  linters "]}," SlimLint CLI print_report":{"type":"method","name":"print_report","children":[],"call":["reporter report_lints ","options fetch new "," log ","options fetch ","reporter display_report ","options fetch new  report_lints ","options fetch new  display_report "]}," SlimLint CLI scan_for_lints":{"type":"method","name":"scan_for_lints","children":[],"call":["report failed? "," print_report ","Runner  new run ","Runner  new ","Runner  new run  failed? "," print_Runner  new run  "]}," SlimLint CLI handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" print_unexpected_exception "," log error ","ex message "," log "," log log ","exception message "]}," SlimLint CLI act_on_options":{"type":"method","name":"act_on_options","children":[],"call":[" scan_for_lints "," print_available_reporters ","options [] "," print_available_linters "," print_version "," print_help "," log color_enabled= ","options fetch "," log tty? "," log "]}," SlimLint CLI run":{"type":"method","name":"run","children":[],"call":[" handle_exception "," act_on_options ","SlimLint Options  new parse ","SlimLint Options  new "," act_on_SlimLint Options  new parse  "]}," SlimLint CLI initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint Utils with_environment":{"type":"method","name":"with_environment","children":[],"call":["ENV  []= ","var to_s ","old_env each ","old_env []= ","ENV  [] ","env each "]}," SlimLint Utils count_consecutive":{"type":"method","name":"count_consecutive","children":[],"call":["items [] ","offset + ","offset + < ","items count ","block call "]}," SlimLint Utils for_consecutive_items":{"type":"method","name":"for_consecutive_items","children":[],"call":["items [] ","current_index + ","count >= "," count_consecutive ","satisfies [] ","(op-asgn\n  (lvasgn :current_index) :+\n  (int 1)) < ","items count "," count_consecutive  >= ","  count_consecutive _consecutive ","items  count_consecutive  "]}," SlimLint Utils any_glob_matches?":{"type":"method","name":"any_glob_matches?","children":[],"call":[" File  fnmatch? "," File FNM_PATHNAME  | "," Array any? "," Array ","File  expand_path ","File  expand_File  expand_path  "]}," SlimLint SexpVisitor DSL capture":{"type":"method","name":"capture","children":[],"call":["@captures []= ","SlimLint Matcher Capture  from_matcher ","SlimLint CaptureMap  new "]}," SlimLint SexpVisitor DSL anything":{"type":"method","name":"anything","children":[],"call":["SlimLint Matcher Anything  new "]}," SlimLint SexpVisitor captures":{"type":"method","name":"captures","children":[],"call":[" class captures "," class "]}," SlimLint Sexp inspect":{"type":"method","name":"inspect","children":[],"call":[" display "]}," SlimLint Runner collect_lints":{"type":"method","name":"collect_lints","children":[],"call":["(send\n  (send\n    (lvar :linter_selector) :linters_for_file\n    (lvar :file)) :map) flatten ","linter run ","linter_selector linters_for_file map ","linter_selector linters_for_file ","SlimLint Lint  new ","ex error ","ex lineno ","SlimLint Document  new ","File  read ","e error ","e lineno ","(send\n  (send\n    (lvar :linter_selector) :linters_for_file\n    (lvar :file_name)) :map) flatten "," file ","ex line "]}," SlimLint RubyExtractor append_dummy_puts":{"type":"method","name":"append_dummy_puts","children":[],"call":[" append "]}," SlimLint Reporter display_report":{"type":"method","name":"display_report","children":[],"call":[" raise "]}," SlimLint JsonReporter metadata":{"type":"method","name":"metadata","children":[],"call":["RUBY_PATCHLEVEL  to_s "]}," SlimLint JsonReporter display_report":{"type":"method","name":"display_report","children":[],"call":[" log log ","report_hash to_json "," log ","report files length ","report files ","grouped length ","lints length "," map_file ","grouped map "," metadata ","lints group_by ","report lints ","lints group_by  length ","report lints  length ","lints group_by  map ","report lints  group_by ","report report lints  "]}," SlimLint DefaultReporter display_report":{"type":"method","name":"display_report","children":[],"call":[" print_message "," print_type "," print_location ","sorted_lints each ","l line ","l filename ","report lints sort_by ","report lints "]}," SlimLint CheckstyleReporter map_offense":{"type":"method","name":"map_offense","children":[],"call":["e attributes []= ","e attributes ","offence message ","offence error? ","offence line ","REXML Element  new tap ","REXML Element  new "]}," SlimLint CheckstyleReporter map_file":{"type":"method","name":"map_file","children":[],"call":[" map_offense ","file last map ","file last ","f attributes []= ","f attributes "," relative_path ","file first ","REXML Element  new tap ","REXML Element  new "]}," SlimLint CheckstyleReporter display_report":{"type":"method","name":"display_report","children":[],"call":[" log log ","document to_s "," log "," map_file ","report lints group_by map ","report lints group_by ","report lints ","REXML Element  new ","d << ","REXML XMLDecl  new ","REXML Document  new tap ","REXML Document  new "]}," SlimLint Options load_reporter_class":{"type":"method","name":"load_reporter_class","children":[],"call":[" raise ","SlimLint Reporter  const_get "]}," Matcher Nothing match?":{"type":"method","name":"match?","children":[],"call":[]}," Matcher Capture match?":{"type":"method","name":"match?","children":[],"call":["@matcher match? "]}," Matcher Capture from_matcher":{"type":"method","name":"from_matcher","children":[],"call":[]}," Matcher Base match?":{"type":"method","name":"match?","children":[],"call":[" raise "]}," Matcher Anything match?":{"type":"method","name":"match?","children":[],"call":[]}," SlimLint Logger newline":{"type":"method","name":"newline","children":[],"call":[" log "]}," SlimLint LinterSelector run_linter_on_file?":{"type":"method","name":"run_linter_on_file?","children":[],"call":["SlimLint Utils  any_glob_matches? ","linter_config [] ","SlimLint Utils  any_glob_matches? ! ","linter_config [] any? ","config for_linter ","config for_linter  [] ","config for_linter  [] any? "]}," SlimLint LinterSelector extract_enabled_linters":{"type":"method","name":"extract_enabled_linters","children":[],"call":[" raise ","linters empty? ","(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact ","linter_class new ","linter_config [] ","config for_linter ","(send\n  (lvar :included_linters) :-\n  (lvar :excluded_linters)) map ","included_linters - ","LinterRegistry  extract_linters_from ","options fetch ","LinterRegistry  linters ","included_linters empty? ","(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact  empty? ","(send\n  (begin\n    (send\n      (lvar :included_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact ) :-\n      (lvar :excluded_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact ))) :map) compact ","(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :LinterRegistry  extract_linters_from ))) :map) compact ","(send\n  (begin\n    (send\n      (lvar :LinterRegistry  linters ) :-\n      (lvar :excluded_linters))) :map) compact ","(send\n  (begin\n    (send\n      (lvar :LinterRegistry  extract_linters_from ) :-\n      (lvar :excluded_linters))) :map) compact ","config for_linter  [] ","(send\n  (lvar :included_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact ) :-\n  (lvar :excluded_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact )) map ","(send\n  (lvar :included_linters) :-\n  (lvar :LinterRegistry  extract_linters_from )) map ","(send\n  (lvar :LinterRegistry  linters ) :-\n  (lvar :excluded_linters)) map ","(send\n  (lvar :LinterRegistry  extract_linters_from ) :-\n  (lvar :excluded_linters)) map ","included_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact  - ","LinterRegistry  linters  - ","LinterRegistry  extract_linters_from  - ","LinterRegistry  extract_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact _from ","LinterRegistry  (send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact  ","included_(send\n  (begin\n    (send\n      (lvar :included_linters) :-\n      (lvar :excluded_linters))) :map) compact  empty? ","LinterRegistry  linters  empty? ","LinterRegistry  extract_linters_from  empty? "]}," SlimLint LinterSelector linters_for_file":{"type":"method","name":"linters_for_file","children":[],"call":[" run_linter_on_file? ","@linters select "," extract_enabled_linters "]}," SlimLint LinterSelector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint OffenseCollector file_finished":{"type":"method","name":"file_finished","children":[],"call":[" class offenses "," class "]}," SlimLint OffenseCollector started":{"type":"method","name":"started","children":[],"call":[" class offenses= "," class "]}," SlimLint RuboCop rubocop_flags":{"type":"method","name":"rubocop_flags","children":[],"call":["ENV  [] "]}," SlimLint RuboCop extract_lints_from_offenses":{"type":"method","name":"extract_lints_from_offenses","children":[],"call":["@lints << ","Lint  new ","offense message ","source_map [] ","offense line "," document file "," document ","(send\n  (lvar :offenses) :select) each "," config [] include? ! "," config [] include? ","offense cop_name "," config [] "," config ","offenses select "]}," SlimLint ConsecutiveControlStatements flat_control_statement?":{"type":"method","name":"flat_control_statement?","children":[],"call":["sexp [] == ","sexp [] ","sexp match? "]}," Filters SplatProcessor on_slim_splat":{"type":"method","name":"on_slim_splat","children":[],"call":[]}," Filters ControlProcessor on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile "]}," Filters ControlProcessor on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" compile ","code [] "]}," Filters ControlProcessor on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile "]}," Filters AttributeProcessor on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":["value [] ","value [] == "]}," Filters AttributeProcessor on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map "]}," SlimLint FileFinder normalize_path":{"type":"method","name":"normalize_path","children":[],"call":["path [] ","path start_with? ","File  expand_path "]}," SlimLint Engine parse":{"type":"method","name":"parse","children":[],"call":[" raise ","SlimLint Exceptions ParseError  new ","ex column ","ex lineno ","ex line ","ex file ","ex error "," call ","e column ","e lineno ","e line ","e file ","e error ","ex SlimLint Exceptions ParseError  new  ","e SlimLint Exceptions ParseError  new  "]}," SlimLint Document process_encoding":{"type":"method","name":"process_encoding","children":[],"call":[" Temple Filters Encoding  new call "," Temple Filters Encoding  new "]}," SlimLint Configuration ensure_linter_include_exclude_arrays_exist":{"type":"method","name":"ensure_linter_include_exclude_arrays_exist","children":[],"call":["linter_config []= "," Array ","linter_config [] ","@hash [] [] ","@hash [] ","(str \"include\") each ","@hash [] keys each ","@hash [] keys ","@hash [] each_key ","@hash [] []  []= ","@hash [] []  [] "]}," SlimLint Configuration ensure_exclude_option_array_exists":{"type":"method","name":"ensure_exclude_option_array_exists","children":[],"call":["@hash []= "," Array ","@hash [] "]}," SlimLint CaptureMap []":{"type":"method","name":"[]","children":[],"call":[" raise ","capture_name inspect "," value "," key? "]}," SlimLint Atom respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@value respond_to? "]}," SlimLint Atom respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@value __send__ "]}," SlimLint Atom method_missing":{"type":"method","name":"method_missing","children":[],"call":["@value send ","@value respond_to? "]}," SlimLint Atom inspect":{"type":"method","name":"inspect","children":[],"call":["@value inspect "]}," SlimLint Atom to_s":{"type":"method","name":"to_s","children":[],"call":["@value to_s "]}," SlimLint Atom match?":{"type":"method","name":"match?","children":[],"call":["@value == ","pattern match? ","pattern is_a? "]}," SlimLint Atom ==":{"type":"method","name":"==","children":[],"call":["@value == ","other instance_variable_get ","other is_a? "]}," SlimLint Atom initialize":{"type":"method","name":"initialize","children":[],"call":[]}," SlimLint RuboCop with_ruby_from_stdin":{"type":"method","name":"with_ruby_from_stdin","children":[],"call":["stdin rewind ","stdin write ","StringIO  new ","StringIO  new  rewind ","StringIO  new  write "]}," SlimLint ConsecutiveControlStatements newline_sexp?":{"type":"method","name":"newline_sexp?","children":[],"call":["sexp first == ","sexp first ","sexp is_a? "]}," SlimLint ConsecutiveControlStatements code_sexp?":{"type":"method","name":"code_sexp?","children":[],"call":["sexp match? ","sexp is_a? "]}," SlimLint EmacsReporter print_message":{"type":"method","name":"print_message","children":[],"call":[" log log ","lint message "," log "," log success ","lint linter name ","lint linter "]}," SlimLint EmacsReporter print_type":{"type":"method","name":"print_type","children":[],"call":[" log warning "," log "," log error ","lint error? "]}," SlimLint EmacsReporter print_location":{"type":"method","name":"print_location","children":[],"call":[" log log "," log "," log bold ","lint line "," log info ","lint filename "]}," SlimLint EmacsReporter display_report":{"type":"method","name":"display_report","children":[],"call":[" print_message "," print_type "," print_location ","sorted_lints each ","l line ","l filename ","report lints sort_by ","report lints "]}," SlimLint Linter linter_name":{"type":"method","name":"linter_name","children":[],"call":[" class name split last "," class name split "," class name "," class "]}," SlimLint Linter disabled_lines":{"type":"method","name":"disabled_lines","children":[],"call":["lines << ","line =~ "," linter_name ","pair [] + ","pair [] ","@document source_lines each_with_index reduce ","@document source_lines each_with_index ","@document source_lines ","@document source_lines each_with_index each_with_object ","pair [] s << ","pair []  =~ ","@document source_pair [] s each_with_index reduce ","@document source_pair [] s each_with_index ","@document source_pair [] s ","@document source_pair [] s each_with_index each_with_object "]}," SlimLint Linter disabled_for_line?":{"type":"method","name":"disabled_for_line?","children":[],"call":[" disabled_lines include? "," disabled_lines "]}," require_parser":{"type":"method","name":"require_parser","children":[],"call":[" require "]}}