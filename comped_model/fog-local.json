{" Fog Storage Local Real build_endpoint_from_options":{"type":"method","name":"build_endpoint_from_options","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","options [] "]}," Fog Storage Local Real copy_object":{"type":"method","name":"copy_object","children":[],"call":[" FileUtils  copy_file "," FileUtils  mkdir_p "," File  dirname "," path_to "," File  join "," require "]}," Fog Storage Local Real path_to":{"type":"method","name":"path_to","children":[],"call":[" File  join "]}," Fog Storage Local Real local_root":{"type":"method","name":"local_root","children":[],"call":[]}," Fog Storage Local Real initialize":{"type":"method","name":"initialize","children":[],"call":[" build_endpoint_from_options ","options [] "," File  expand_path "]}," Fog Storage Local Mock build_endpoint_from_options":{"type":"method","name":"build_endpoint_from_options","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","options [] "]}," Fog Storage Local Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog Storage Local Mock path_to":{"type":"method","name":"path_to","children":[],"call":[" File  join "]}," Fog Storage Local Mock local_root":{"type":"method","name":"local_root","children":[],"call":[]}," Fog Storage Local Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog Storage Local Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" build_endpoint_from_options ","options [] "," File  expand_path ","Fog Mock  not_implemented "]}," Fog Storage Local Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage Local Files file_path":{"type":"method","name":"file_path","children":[],"call":[" service path_to "," File  join "," directory key "," directory "," service "]}," Fog Storage Local Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog Storage Local Files head":{"type":"method","name":"head","children":[],"call":[" new "," File  mtime "," File  size "," File  exist? "," file_path "," requires "," file_ file_path  "]}," Fog Storage Local Files get":{"type":"method","name":"get","children":[],"call":[" new ","data merge! "," File  read ","file close ","file read "," File  open "," block_given? "," File  mtime "," File  size "," File  exist? "," file_path "," requires "," block_given? ! ","body << "," File  open  close "," File  open  read ","  File  open _path "," file_ file_path  "," File  read  << "]}," Fog Storage Local Files all":{"type":"method","name":"all","children":[],"call":[" load "," File  mtime "," File  size "," file_path ","(send\n  (send\n    (const nil :Dir) :glob\n    (str \"**/*\")) :reject) map "," File  directory? ","Dir  glob reject ","Dir  glob ","Dir  chdir "," service path_to "," directory key "," directory "," service "," directory collection get "," directory collection "," requires "," file_ file_path  "," service  file_path _to "]}," Fog Storage Local File path":{"type":"method","name":"path","children":[],"call":[" service path_to "," File  join "," key "," directory key "," directory "," service "]}," Fog Storage Local File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog Storage Local File save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," File  mtime "," path ","Fog Storage  get_body_size "," body ","file close ","file write "," body read ","FileUtils  cp "," body path "," File  exist? "," body kind_of? "," body is_a? "," File  new "," raise "," File  directory? ","Dir  mkdir ","dir_path empty? ","dirs [] join ","dirs [] ","dirs length times ","dirs length "," path split [] "," path split "," requires "," write_file ","FileUtils  mkdir_p ","dirs join "," File  new  close "," File  new  write ","dirs [] join  empty? ","dirs join  empty? "," path split []  [] join "," path split []  [] "," path split []  length times "," path split []  length "," write_ File  new  "," path split []  join "]}," Fog Storage Local File public_url":{"type":"method","name":"public_url","children":[],"call":[" File  join "," service endpoint "," service ","URI  escape "," key "," directory key "," directory "," requires "]}," Fog Storage Local File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Storage Local File destroy":{"type":"method","name":"destroy","children":[],"call":["Dir  chdir ","Dir  rmdir ","Dir  glob empty? ","Dir  glob "," File  directory? "," File  exist? ","Dir  pwd ","dir_path == "," service path_to "," directory key "," directory "," service ","dir_path empty? ","dirs [] join ","dirs [] ","index -@ ","dirs length times ","dirs length "," path split [] "," path split "," path "," File  delete "," requires ","Dir  Dir  pwd  ","dirs [] join  == ","dirs [] join  empty? "," path split []  [] join "," path split []  [] "," path split []  length times "," path split []  length "]}," Fog Storage Local File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files get ","target_directory files "," service directories new "," service directories "," service "," service copy_object "," key "," directory key "," directory "," requires "," service directories new  files get "," service directories new  files "]}," Fog Storage Local File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog Storage Local File content_type":{"type":"method","name":"content_type","children":[],"call":["mime_types first content_type ","mime_types first ","(lvasgn :mime_types\n  (send\n    (const\n      (const\n        (cbase) :MIME) :Types) :of\n    (send nil :key))) empty? "," MIME Types  of "," key "," MIME Types  of  first content_type "," MIME Types  of  first ","(lvasgn : MIME Types  of \n  (send\n    (const\n      (const\n        (cbase) :MIME) :Types) :of\n    (send nil :key))) empty? "]}," Fog Storage Local File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog Storage Local File body":{"type":"method","name":"body","children":[],"call":[" collection get body "," collection get "," identity "," collection "," last_modified "," attributes [] "," attributes "]}," Fog Storage Local Directory path":{"type":"method","name":"path","children":[],"call":[" service path_to "," key "," service "]}," Fog Storage Local Directory save":{"type":"method","name":"save","children":[],"call":["FileUtils  mkpath "," path "," requires "]}," Fog Storage Local Directory public_url":{"type":"method","name":"public_url","children":[],"call":[]}," Fog Storage Local Directory public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Storage Local Directory files":{"type":"method","name":"files","children":[],"call":["Fog Storage Local Files  new "," service "]}," Fog Storage Local Directory destroy":{"type":"method","name":"destroy","children":[],"call":["Dir  rmdir "," path "," File  directory? "," requires "]}," Fog Storage Local Directories get":{"type":"method","name":"get","children":[],"call":[" new "," File  directory? "," service path_to "," service "," create_directory "]}," Fog Storage Local Directories all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (const nil :Dir) :entries\n    (send\n      (send nil :service) :local_root)) :select) map "," File  directory? "," service path_to "," service ","entry [] != ","entry [] ","Dir  entries select ","Dir  entries "," service local_root "]}," Local services":{"type":"method","name":"services","children":[],"call":["Fog Local  services "]}," Local []":{"type":"method","name":"[]","children":[],"call":["@@connections [] ","hash []= "," raise ","key inspect ","Fog Storage  new ","Fog Logger  warning ","Hash  new ","Fog Local Storage  new "]}," Local class_for":{"type":"method","name":"class_for","children":[],"call":[" raise "]}," Fog Storage Local File write_file":{"type":"method","name":"write_file","children":[],"call":["IO  copy_stream "," File  open ","StringIO  new ","content is_a? "]}," Fog Storage Local Directories create_directory":{"type":"method","name":"create_directory","children":[],"call":[" new ","key + ","options [] "]}," Fog Local Storage Real build_endpoint_from_options":{"type":"method","name":"build_endpoint_from_options","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","options [] "]}," Fog Local Storage Real copy_object":{"type":"method","name":"copy_object","children":[],"call":[" FileUtils  copy_file "," FileUtils  mkdir_p "," File  dirname "," path_to "," File  join "]}," Fog Local Storage Real path_to":{"type":"method","name":"path_to","children":[],"call":[" File  join "]}," Fog Local Storage Real local_root":{"type":"method","name":"local_root","children":[],"call":[]}," Fog Local Storage Real initialize":{"type":"method","name":"initialize","children":[],"call":[" build_endpoint_from_options ","options [] "," File  expand_path "]}," Fog Local Storage Mock build_endpoint_from_options":{"type":"method","name":"build_endpoint_from_options","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","options [] "]}," Fog Local Storage Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog Local Storage Mock path_to":{"type":"method","name":"path_to","children":[],"call":[" File  join "]}," Fog Local Storage Mock local_root":{"type":"method","name":"local_root","children":[],"call":[]}," Fog Local Storage Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog Local Storage Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" build_endpoint_from_options ","options [] "," File  expand_path ","Fog Mock  not_implemented "]}," Fog Local Storage Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Local Storage Files file_path":{"type":"method","name":"file_path","children":[],"call":[" service path_to "," File  join "," directory key "," directory "," service "]}," Fog Local Storage Files is_truncated":{"type":"method","name":"is_truncated","children":[],"call":[]}," Fog Local Storage Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog Local Storage Files head":{"type":"method","name":"head","children":[],"call":[" new "," File  mtime "," File  size "," File  exist? "," file_path "," requires "," file_ file_path  "]}," Fog Local Storage Files get":{"type":"method","name":"get","children":[],"call":[" new ","data merge! "," block_given? ! "," block_given? ","body << ","file read "," File  open "," File  mtime "," File  size "," File  exist? "," file_path "," requires "," file_ file_path  "]}," Fog Local Storage Files all":{"type":"method","name":"all","children":[],"call":[" load "," File  mtime "," File  size "," file_path ","(send\n  (send\n    (const nil :Dir) :glob\n    (str \"**/*\")) :reject) map "," File  directory? ","Dir  glob reject ","Dir  glob ","Dir  chdir "," service path_to "," directory key "," directory "," service "," directory collection get "," directory collection "," requires "," file_ file_path  "," service  file_path _to "]}," Fog Local Storage File dir_empty?":{"type":"method","name":"dir_empty?","children":[],"call":["(str \".\") include? ","entries all? ","entries empty? ","Dir  entries ","Dir  entries  all? ","Dir  entries  empty? ","Dir  Dir  entries  "]}," Fog Local Storage File rm_if_empty_dir":{"type":"method","name":"rm_if_empty_dir","children":[],"call":["Dir  rmdir "," dir_empty? "," File  directory? "]}," Fog Local Storage File write_file":{"type":"method","name":"write_file","children":[],"call":["IO  copy_stream "," File  open ","StringIO  new ","content is_a? "]}," Fog Local Storage File path":{"type":"method","name":"path","children":[],"call":[" service path_to "," File  join "," key "," directory key "," directory "," service "]}," Fog Local Storage File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog Local Storage File save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," File  mtime "," path ","Fog Storage  get_body_size "," body "," write_file ","FileUtils  cp "," body path "," File  exist? "," body is_a? ","FileUtils  mkdir_p ","dirs join "," path split [] "," path split "," requires "," path split []  join "]}," Fog Local Storage File public_url":{"type":"method","name":"public_url","children":[],"call":[" File  join "," service endpoint "," service ","URI  escape "," key "," directory key "," directory "," requires "," uri_escape "]}," Fog Local Storage File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Local Storage File destroy":{"type":"method","name":"destroy","children":[],"call":[" rm_if_empty_dir ","dir_path == "," service path_to "," directory key "," directory "," service ","dir_path empty? ","dirs [] join ","dirs [] ","index -@ ","dirs length times ","dirs length "," path split [] "," path split "," path "," File  delete "," File  exist? "," requires ","dirs [] join  == ","dirs [] join  empty? "," path split []  [] join "," path split []  [] "," path split []  length times "," path split []  length "]}," Fog Local Storage File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files get ","target_directory files "," service directories new "," service directories "," service "," service copy_object "," key "," directory key "," directory "," requires "," service directories new  files get "," service directories new  files "]}," Fog Local Storage File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog Local Storage File content_type":{"type":"method","name":"content_type","children":[],"call":["mime_types first content_type ","mime_types first ","(lvasgn :mime_types\n  (send\n    (const\n      (const\n        (cbase) :MIME) :Types) :of\n    (send nil :key))) empty? "," MIME Types  of "," key "," MIME Types  of  first content_type "," MIME Types  of  first ","(lvasgn : MIME Types  of \n  (send\n    (const\n      (const\n        (cbase) :MIME) :Types) :of\n    (send nil :key))) empty? "]}," Fog Local Storage File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog Local Storage File body":{"type":"method","name":"body","children":[],"call":[" collection get body "," collection get "," identity "," collection "," last_modified "," attributes [] "," attributes "]}," Fog Local Storage Directory path":{"type":"method","name":"path","children":[],"call":[" service path_to "," key "," service "]}," Fog Local Storage Directory save":{"type":"method","name":"save","children":[],"call":["FileUtils  mkpath "," path "," requires "]}," Fog Local Storage Directory public_url":{"type":"method","name":"public_url","children":[],"call":[]}," Fog Local Storage Directory public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Local Storage Directory files":{"type":"method","name":"files","children":[],"call":["Files  new "," service "]}," Fog Local Storage Directory destroy":{"type":"method","name":"destroy","children":[],"call":["Dir  rmdir "," path "," File  directory? "," requires "]}," Fog Local Storage Directories create_directory":{"type":"method","name":"create_directory","children":[],"call":[" new ","key + ","options [] "]}," Fog Local Storage Directories get":{"type":"method","name":"get","children":[],"call":[" create_directory "," File  directory? "," service path_to "," service "]}," Fog Local Storage Directories all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (const nil :Dir) :entries\n    (send\n      (send nil :service) :local_root)) :select) map "," File  directory? "," service path_to "," service ","entry [] != ","entry [] ","Dir  entries select ","Dir  entries "," service local_root "]}," Fog Local Storage File uri_escape":{"type":"method","name":"uri_escape","children":[],"call":["% + ","m unpack join upcase ","m unpack join ","m unpack ","H2 * ","m bytesize ","string b gsub ","string b ","URI DEFAULT_PARSER  regexp [] ","URI DEFAULT_PARSER  regexp "]}}