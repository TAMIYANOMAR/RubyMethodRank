{" XPath varstring":{"type":"method","name":"varstring","children":[],"call":[" var string_literal "," var "]}," XPath var":{"type":"method","name":"var","children":[],"call":["Expression Variable  new "]}," XPath text":{"type":"method","name":"text","children":[],"call":["Expression Text  new "," current "]}," XPath contains":{"type":"method","name":"contains","children":[],"call":["Expression Contains  new "," current "]}," XPath attr":{"type":"method","name":"attr","children":[],"call":["Expression Attribute  new "," current "]}," XPath anywhere":{"type":"method","name":"anywhere","children":[],"call":["Expression Anywhere  new "]}," XPath child":{"type":"method","name":"child","children":[],"call":["Expression Child  new "," current "]}," XPath descendant":{"type":"method","name":"descendant","children":[],"call":["Expression Descendant  new "," current "]}," XPath name":{"type":"method","name":"name","children":[],"call":["Expression Name  new "," current "]}," XPath current":{"type":"method","name":"current","children":[],"call":["Expression Self  new "]}," XPath generate":{"type":"method","name":"generate","children":[],"call":[]}," XPath Union method_missing":{"type":"method","name":"method_missing","children":[],"call":["XPath Union  new ","e send "," expressions map "," expressions "," arguments map "," arguments "]}," XPath Union to_xpaths":{"type":"method","name":"to_xpaths","children":[],"call":["(send nil :to_xpath\n  (sym :exact)) uniq "," to_xpath "]}," XPath Union to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (send nil :expressions) :map) join ","e to_xpath "," expressions map "," expressions ","Renderer  render "]}," XPath Union each":{"type":"method","name":"each","children":[],"call":[" expressions each "," expressions "," arguments each "," arguments "]}," XPath Union initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath HTML field_value":{"type":"method","name":"field_value","children":[],"call":["(send\n  (send\n    (send nil :text) :is\n    (lvar :value)) :&\n  (send\n    (send nil :name) :equals\n    (str \"textarea\"))) | "," attr equals & "," name equals ~ "," name equals "," name "," attr equals "," attr "," text is & "," text is "," text ","(send\n  (send\n    (send nil :text) :is\n    (lvar :value)) :&\n  (send nil :tag\n    (sym :textarea))) | "," tag ~ "," tag ","(send\n  (send\n    (send\n      (send nil :string) :n) :is\n    (lvar :value)) :&\n  (send nil :tag\n    (sym :textarea))) | "," string n is & "," string n is "," string n "," string "]}," XPath HTML locate_field":{"type":"method","name":"locate_field","children":[],"call":[" descendant [] descendant "," descendant [] "," text is "," text "," descendant ","xpath [] "," attr equals | | "," attr equals "," anywhere [] attr "," anywhere [] "," anywhere "," attr "," attr equals | "," string n is "," string n "," string ","locate_field [] "," attr ~ "," string n contains "," attr equals | | | ","xpath []  [] "]}," XPath HTML wrap":{"type":"method","name":"wrap","children":[],"call":["(send\n  (lvar :path) :to_s) flatten ","path to_s ","path to_xpaths ","path respond_to? "]}," XPath HTML table_row":{"type":"method","name":"table_row","children":[],"call":["cell_conditions next_sibling [] "," text equals "," text ","cell_conditions next_sibling ","cells drop each ","cells drop "," child [] ","cells first "," child "," string n equals "," string n "," string ","cell_conditions next_sibling []  next_sibling [] "," child []  next_sibling [] ","cell_conditions next_sibling []  next_sibling "," child []  next_sibling "]}," XPath HTML table_rows":{"type":"method","name":"table_rows","children":[],"call":["row_conditions next_sibling [] "," table_row ","row_conditions next_sibling ","rows drop each ","rows drop "," descendant [] ","rows first "," descendant ","row_conditions next_sibling []  next_sibling [] "," descendant []  next_sibling [] ","row_conditions next_sibling []  next_sibling "," descendant []  next_sibling "]}," XPath HTML table":{"type":"method","name":"table","children":[],"call":["xpath [] "," table_rows ","options [] "," descendant [] "," attr equals | "," descendant contains "," descendant "," attr equals "," attr ","locator to_s "," descendant is ","xpath []  [] "," descendant []  [] ","locator to_s  to_s "]}," XPath HTML option":{"type":"method","name":"option","children":[],"call":[" descendant [] "," text n is "," text n "," text "," descendant "," string n is "," string n "," string "," string n equals ","locator to_s ","locator to_s  to_s "]}," XPath HTML file_field":{"type":"method","name":"file_field","children":[],"call":[" locate_field "," descendant [] "," attr equals "," attr "," descendant ","locator to_s ","locator to_s  to_s "]}," XPath HTML radio_button":{"type":"method","name":"radio_button","children":[],"call":[" locate_field "," descendant [] "," attr equals "," attr "," descendant ","locator to_s ","locator to_s  to_s "]}," XPath HTML checkbox":{"type":"method","name":"checkbox","children":[],"call":[" locate_field "," descendant [] "," attr equals "," attr "," descendant ","locator to_s ","locator to_s  to_s "]}," XPath HTML select":{"type":"method","name":"select","children":[],"call":["xpath [] "," descendant [] text equals "," descendant [] text "," descendant [] "," attr "," descendant ","(send\n  (lvar :options) :[]\n  (sym :selected)) flatten each ","(send\n  (lvar :options) :[]\n  (sym :selected)) flatten ","options [] "," descendant text equals "," descendant text ","options [] each "," locate_field "," descendant [] equals "," descendant equals ","locator to_s ","xpath []  [] "," locate_field  [] ","locator to_s  to_s "]}," XPath HTML fillable_field":{"type":"method","name":"fillable_field","children":[],"call":["xpath [] "," field_value ","options [] ","options has_key? "," locate_field "," descendant [] "," attr one_of ~ "," attr one_of "," attr "," descendant ","locator to_s ","xpath []  [] "," locate_field  [] "," descendant []  [] ","locator to_s  to_s "]}," XPath HTML field":{"type":"method","name":"field","children":[],"call":["xpath [] "," attr ~ "," attr ","options [] "," locate_field "," descendant [] "," attr one_of ~ "," attr one_of "," descendant "," fillable_field "," field_value ","options has_key? ","locator to_s ","xpath []  [] "," locate_field  [] "," descendant []  [] ","locator to_s  to_s "]}," XPath HTML fieldset":{"type":"method","name":"fieldset","children":[],"call":[" descendant [] "," attr equals | "," text is "," text "," descendant "," attr equals "," attr "," string n is "," string n "," string "," child [] "," string n contains "," child ","locator to_s ","locator to_s  to_s "]}," XPath HTML link_or_button":{"type":"method","name":"link_or_button","children":[],"call":[" link + "," button "," link "]}," XPath HTML button":{"type":"method","name":"button","children":[],"call":[" descendant [] [] "," attr is "," attr "," descendant [] "," attr equals "," descendant "," attr equals | | "," text is "," text "," attr equals | "," attr one_of "," string n is "," string n "," string "," attr equals | | | "," descendant [] [] [] "," attr contains "," attr ~ "," string n contains ","locator to_s ","locator to_s  to_s "]}," XPath HTML content":{"type":"method","name":"content","children":[],"call":[" child [] "," current n contains "," current n "," current "," child "]}," XPath HTML link":{"type":"method","name":"link","children":[],"call":["link [] "," attr equals | | | "," descendant [] "," attr is "," attr "," descendant "," attr equals | | "," attr equals | "," text is "," text "," attr equals "," string n is "," string n "," string ","options [] "," attr contains "," string n contains ","locator to_s "," descendant []  [] ","locator to_s  to_s "]}," XPath HTML from_css":{"type":"method","name":"from_css","children":[],"call":["XPath Union  new ","(send\n  (send\n    (const\n      (const nil :Nokogiri) :CSS) :xpath_for\n    (lvar :css)) :map) flatten "," XPath Expression Literal  new ","Nokogiri CSS  xpath_for map ","Nokogiri CSS  xpath_for "]}," XPath Expression wrap_xpath":{"type":"method","name":"wrap_xpath","children":[],"call":["Expression Literal  new ","Expression StringLiteral  new "]}," XPath Expression normalize":{"type":"method","name":"normalize","children":[],"call":["Expression NormalizedSpace  new "," current "]}," XPath Expression apply":{"type":"method","name":"apply","children":[],"call":["Expression Applied  new "," current "]}," XPath Expression to_xpaths":{"type":"method","name":"to_xpaths","children":[],"call":["(send nil :to_xpath\n  (sym :exact)) uniq "," to_xpath "]}," XPath Expression to_s":{"type":"method","name":"to_s","children":[],"call":[" to_xpaths join "," to_xpaths "]}," XPath Expression to_xpath":{"type":"method","name":"to_xpath","children":[],"call":[" raise ","Renderer  render "]}," XPath Expression string_literal":{"type":"method","name":"string_literal","children":[],"call":["Expression StringLiteral  new "]}," XPath Expression inverse":{"type":"method","name":"inverse","children":[],"call":["Expression Inverse  new "," current "]}," XPath Expression union":{"type":"method","name":"union","children":[],"call":["Union  new ","(self) flatten "]}," XPath Expression and":{"type":"method","name":"and","children":[],"call":["Expression And  new "," current "]}," XPath Expression or":{"type":"method","name":"or","children":[],"call":["Expression Or  new "," current "]}," XPath Expression string":{"type":"method","name":"string","children":[],"call":["Expression StringFunction  new "," current "]}," XPath Expression is":{"type":"method","name":"is","children":[],"call":["Expression Is  new "," current "]}," XPath Expression equals":{"type":"method","name":"equals","children":[],"call":["Expression Equality  new "," current "]}," XPath Expression one_of":{"type":"method","name":"one_of","children":[],"call":["Expression OneOf  new "," current "]}," XPath Expression where":{"type":"method","name":"where","children":[],"call":["Expression Where  new "," current "]}," XPath Expression next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["Expression NextSibling  new "," current "]}," XPath Expression current":{"type":"method","name":"current","children":[],"call":[]}," XPath Expression Applied to_xpath":{"type":"method","name":"to_xpath","children":[],"call":[" raise ","@variables [] ","1 to_sym ","@expression to_xpath gsub ","@expression to_xpath ","@expression to_xpath % "]}," XPath Expression Applied initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath Expression Inverse to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression Variable to_xpath":{"type":"method","name":"to_xpath","children":[],"call":[]}," XPath Expression Variable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath Expression Text to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression Is to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["Contains  new to_xpath ","Contains  new ","Equality  new to_xpath ","Equality  new ","predicate == "]}," XPath Expression Contains to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath Expression OneOf to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (ivar :@right) :map) join ","r to_xpath ","@left to_xpath ","@right map "]}," XPath Expression OneOf initialize":{"type":"method","name":"initialize","children":[],"call":[" wrap_xpath ","right map "]}," XPath Expression Or to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath Expression And to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath Expression NormalizedSpace to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression StringLiteral to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join ","@expression split map ","@expression split ","@expression include? ","@expression to_xpath ","@expression is_a? ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join ","string split map ","string split ","string include? ","(send\n  (send\n    (ivar :(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join ) :split\n    (str \"'\")\n    (int -1)) :map) join ","(send\n  (send\n    (ivar :@expression to_xpath ) :split\n    (str \"'\")\n    (int -1)) :map) join ","(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join  split map ","@expression to_xpath  split map ","(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join  split ","@expression to_xpath  split ","(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join  include? ","@expression to_xpath  include? ","(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join  to_xpath ","@expression to_xpath  to_xpath ","(send\n  (send\n    (ivar :@expression) :split\n    (str \"'\")\n    (int -1)) :map) join  is_a? ","@expression to_xpath  is_a? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join ) :split\n    (str \"'\")\n    (int -1)) :map) join ","(send\n  (send\n    (lvar :@expression to_xpath ) :split\n    (str \"'\")\n    (int -1)) :map) join ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  split map ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  split ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  include? "]}," XPath Expression StringLiteral initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath Expression StringFunction to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression Equality to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath Expression Attribute to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath ","@right is_a? "]}," XPath Expression Where to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath Expression Name to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression Anywhere to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath Expression NextSibling to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (ivar :@expressions) :map) join ","e to_xpath ","@expressions map ","@left to_xpath ","@expressions first to_xpath ","@expressions first ","@expressions length == ","@expressions length ","@expressions length > "]}," XPath Expression Descendant to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (ivar :@expressions) :map) join ","e to_xpath ","@expressions map ","@left to_xpath ","@expressions first to_xpath ","@expressions first ","@expressions length == ","@expressions length ","@expressions length > "]}," XPath Expression Child to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["(send\n  (ivar :@expressions) :map) join ","e to_xpath ","@expressions map ","@left to_xpath ","@expressions first to_xpath ","@expressions first ","@expressions length == ","@expressions length ","@expressions length > "]}," XPath Expression Literal to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_s "]}," XPath Expression Literal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath Expression Multiple initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@expressions empty? "," wrap_xpath ","expressions map "]}," XPath Expression Binary initialize":{"type":"method","name":"initialize","children":[],"call":[" wrap_xpath "]}," XPath Expression Unary initialize":{"type":"method","name":"initialize","children":[],"call":[" wrap_xpath "]}," XPath Expression Self to_xpath":{"type":"method","name":"to_xpath","children":[],"call":[]}," XPath css":{"type":"method","name":"css","children":[],"call":["Union  new ","Expression CSS  new ","Expression Literal  new "," current ","Nokogiri CSS  xpath_for map ","Nokogiri CSS  xpath_for "]}," XPath string":{"type":"method","name":"string","children":[],"call":["Expression StringFunction  new "," current "]}," XPath Expression CSS to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@right to_xpath ","@left to_xpath "]}," XPath tag":{"type":"method","name":"tag","children":[],"call":["Expression Tag  new "]}," XPath Expression Tag to_xpath":{"type":"method","name":"to_xpath","children":[],"call":["@expression to_xpath "]}," XPath HTML optgroup":{"type":"method","name":"optgroup","children":[],"call":[" descendant [] "," attr is "," attr "," descendant "," attr contains ","locator to_s ","locator to_s  to_s "]}," XPath Union to_s":{"type":"method","name":"to_s","children":[],"call":[" to_xpaths join "," to_xpaths "]}," XPath Union expression":{"type":"method","name":"expression","children":[],"call":[]}," XPath Renderer string_function":{"type":"method","name":"string_function","children":[],"call":[]}," XPath Renderer inverse":{"type":"method","name":"inverse","children":[],"call":[]}," XPath Renderer previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "]}," XPath Renderer next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "]}," XPath Renderer one_of":{"type":"method","name":"one_of","children":[],"call":["(send\n  (lvar :values) :map) join ","values map "]}," XPath Renderer or":{"type":"method","name":"or","children":[],"call":[]}," XPath Renderer and":{"type":"method","name":"and","children":[],"call":[]}," XPath Renderer starts_with":{"type":"method","name":"starts_with","children":[],"call":[]}," XPath Renderer contains":{"type":"method","name":"contains","children":[],"call":[]}," XPath Renderer anywhere":{"type":"method","name":"anywhere","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "," with_element_conditions "]}," XPath Renderer union":{"type":"method","name":"union","children":[],"call":["expressions join "]}," XPath Renderer css":{"type":"method","name":"css","children":[],"call":[" union ","Nokogiri CSS  xpath_for map ","Nokogiri CSS  xpath_for "]}," XPath Renderer literal":{"type":"method","name":"literal","children":[],"call":[]}," XPath Renderer normalized_space":{"type":"method","name":"normalized_space","children":[],"call":[]}," XPath Renderer text":{"type":"method","name":"text","children":[],"call":[]}," XPath Renderer variable":{"type":"method","name":"variable","children":[],"call":[]}," XPath Renderer equality":{"type":"method","name":"equality","children":[],"call":[]}," XPath Renderer attribute":{"type":"method","name":"attribute","children":[],"call":[" string_literal "," valid_xml_name? "]}," XPath Renderer where":{"type":"method","name":"where","children":[],"call":[]}," XPath Renderer node_name":{"type":"method","name":"node_name","children":[],"call":[]}," XPath Renderer axis":{"type":"method","name":"axis","children":[],"call":[" with_element_conditions "]}," XPath Renderer child":{"type":"method","name":"child","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "," with_element_conditions "]}," XPath Renderer descendant":{"type":"method","name":"descendant","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "," with_element_conditions "]}," XPath Renderer this_node":{"type":"method","name":"this_node","children":[],"call":[]}," XPath Renderer string_literal":{"type":"method","name":"string_literal","children":[],"call":["(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join ","string split map ","string split ","string include? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join ) :split\n    (str \"'\")\n    (int -1)) :map) join ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  split map ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  split ","(send\n  (send\n    (lvar :string) :split\n    (str \"'\")\n    (int -1)) :map) join  include? "]}," XPath Renderer convert_argument":{"type":"method","name":"convert_argument","children":[],"call":["argument to_s ","argument value "," string_literal "," convert_argument ","argument map "," render "]}," XPath Renderer render":{"type":"method","name":"render","children":[],"call":[" send ","node expression "," convert_argument ","node arguments map ","node arguments "]}," XPath Literal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath HTML definition_description":{"type":"method","name":"definition_description","children":[],"call":[" descendant [] "," attr equals | "," previous_sibling [] "," string n equals "," string n "," string "," previous_sibling "," attr equals "," attr "," descendant ","locator to_s ","locator to_s  to_s "]}," XPath Expression initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath DSL ExpressionLevel normalize":{"type":"method","name":"normalize","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel string_literal":{"type":"method","name":"string_literal","children":[],"call":["Expression  new "]}," XPath DSL ExpressionLevel inverse":{"type":"method","name":"inverse","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel union":{"type":"method","name":"union","children":[],"call":["Union  new ","(self) flatten "]}," XPath DSL ExpressionLevel and":{"type":"method","name":"and","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel or":{"type":"method","name":"or","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel equals":{"type":"method","name":"equals","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel one_of":{"type":"method","name":"one_of","children":[],"call":["Expression  new "," current "]}," XPath DSL ExpressionLevel where":{"type":"method","name":"where","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel css":{"type":"method","name":"css","children":[],"call":["Expression  new ","Literal  new "," current "]}," XPath DSL TopLevel string":{"type":"method","name":"string","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel text":{"type":"method","name":"text","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel starts_with":{"type":"method","name":"starts_with","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel contains":{"type":"method","name":"contains","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel attr":{"type":"method","name":"attr","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel anywhere":{"type":"method","name":"anywhere","children":[],"call":["Expression  new "]}," XPath DSL TopLevel previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel axis":{"type":"method","name":"axis","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel child":{"type":"method","name":"child","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel descendant":{"type":"method","name":"descendant","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel name":{"type":"method","name":"name","children":[],"call":["Expression  new "," current "]}," XPath DSL TopLevel current":{"type":"method","name":"current","children":[],"call":["Expression  new "]}," XPath DSL ExpressionLevel next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["Expression  new "," current "]}," XPath Renderer is":{"type":"method","name":"is","children":[],"call":[" contains "," equality ","@type == "," function "," binary_operator "]}," XPath Renderer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XPath DSL ExpressionLevel is":{"type":"method","name":"is","children":[],"call":["Expression  new "," current "]}," XPath Renderer with_element_conditions":{"type":"method","name":"with_element_conditions","children":[],"call":["(send\n  (lvar :element_names) :map) join ","element_names map ","element_names length > ","element_names length ","element_names first ","element_names length == "]}," XPath Renderer function":{"type":"method","name":"function","children":[],"call":["arguments join "]}," XPath Renderer binary_operator":{"type":"method","name":"binary_operator","children":[],"call":[]}," XPath DSL previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":[" axis [] axis "," axis [] "," axis "]}," XPath DSL next_sibling":{"type":"method","name":"next_sibling","children":[],"call":[" axis [] axis "," axis [] "," axis "]}," XPath DSL one_of":{"type":"method","name":"one_of","children":[],"call":["a or ","(send\n  (lvar :expressions) :map) reduce "," current equals "," current ","expressions map "]}," XPath DSL position":{"type":"method","name":"position","children":[],"call":[" function "]}," XPath DSL last":{"type":"method","name":"last","children":[],"call":[" function "]}," XPath DSL union":{"type":"method","name":"union","children":[],"call":["Union  new ","(self) flatten "]}," XPath DSL binary_operator":{"type":"method","name":"binary_operator","children":[],"call":["Expression  new "," current "]}," XPath DSL is":{"type":"method","name":"is","children":[],"call":["Expression  new "," current "]}," XPath DSL where":{"type":"method","name":"where","children":[],"call":["Expression  new "," current "]}," XPath DSL method":{"type":"method","name":"method","children":[],"call":["Expression  new "," current "]}," XPath DSL function":{"type":"method","name":"function","children":[],"call":["Expression  new "]}," XPath DSL css":{"type":"method","name":"css","children":[],"call":["Expression  new ","Literal  new "," current "]}," XPath DSL text":{"type":"method","name":"text","children":[],"call":["Expression  new "," current "]}," XPath DSL attr":{"type":"method","name":"attr","children":[],"call":["Expression  new "," current "]}," XPath DSL anywhere":{"type":"method","name":"anywhere","children":[],"call":["Expression  new "]}," XPath DSL axis":{"type":"method","name":"axis","children":[],"call":["Expression  new "," current "]}," XPath DSL child":{"type":"method","name":"child","children":[],"call":["Expression  new "," current "]}," XPath DSL descendant":{"type":"method","name":"descendant","children":[],"call":["Expression  new "," current "]}," XPath DSL current":{"type":"method","name":"current","children":[],"call":["Expression  new "]}," XPath DSL contains_word":{"type":"method","name":"contains_word","children":[],"call":[" function contains "," function "," current normalize_space "," current "]}," XPath DSL qname":{"type":"method","name":"qname","children":[],"call":[" method "]}," XPath DSL ends_with":{"type":"method","name":"ends_with","children":[],"call":[" function == "," function "," function minus plus "," function minus "," current "]}," XPath Renderer valid_xml_name?":{"type":"method","name":"valid_xml_name?","children":[],"call":["name =~ "]}," XPath DSL uppercase":{"type":"method","name":"uppercase","children":[],"call":[" method "]}," XPath DSL lowercase":{"type":"method","name":"lowercase","children":[],"call":[" method "]}}