{" GLI Scaffold mkdirs":{"type":"method","name":"mkdirs","children":[],"call":[]}," GLI Scaffold mk_binfile":{"type":"method","name":"mk_binfile","children":[],"call":[]}," GLI Scaffold create_scaffold":{"type":"method","name":"create_scaffold","children":[],"call":[]}," GLI wrap":{"type":"method","name":"wrap","children":[],"call":["wrapped + + ","wrapped + ","wrapped chomp! ","this_line length > ","line_padding length ","this_line length ","line_padding + ","this_line length + > ","this_line length + ","word length ","words each ","words empty? ","words unshift ","wrapped length + + > ","wrapped length + + ","wrapped length + ","wrapped length ","words shift ","wrapped length > ","wrapped length + < ","words ! ","line split "," sprintf ","Terminal  instance size [] ","Terminal  instance size ","Terminal  instance ","line_length nil? ","this_line length + >= ","wrapped join "," paragraph_lines join "," paragraph_lines ","line_length - ","paragraphs map ","l empty? ","(send\n  (send\n    (lvar :line) :split\n    (str \"\\n\\n\")) :map) reject ","l chomp ","line split map ","line_padding +  length > "," sprintf  length ","line_padding +  length "," sprintf  + ","line_padding +  length + > ","line_padding +  length + ","words shift  length ","words shift s each ","line split  each ","words shift s empty? ","line split  empty? ","words shift s unshift ","line split  unshift ","words shift s shift ","line split  shift ","words shift s ! ","line split  ! ","Terminal  instance size []  nil? ","line_padding +  length + >= ","Terminal  instance size []  - "]}," GLI DefaultHelpCommand output_command_tokens_for_help":{"type":"method","name":"output_command_tokens_for_help","children":[],"call":[" printf ","token send "," wrap ","max + ","token default_value ","token kind_of? ","token description ","tokens [] ","names each ","x to_s <=> ","y to_s ","x to_s ","tokens keys sort ","tokens keys ","len > ","token send length ","tokens values each ","tokens values ","@@output puts "," sprintf ","tokens []  send ","tokens []  default_value ","tokens []  kind_of? ","token  wrap  ","tokens []  description ","tokens [] s [] ","tokens [] s keys sort ","tokens [] s keys ","token send length  > ","tokens []  send length ","token send token send length gth ","tokens [] s values each ","tokens [] s values "]}," GLI DefaultHelpCommand list_one_command_help":{"type":"method","name":"list_one_command_help","children":[],"call":[" puts "," output_command_tokens_for_help ","all_options empty? ! ","all_options empty? ","command switches merge ","command flags ","command switches "," wrap ","command description ","command usage ","GLI  find_command ","command long_description ","@@output puts "," output_GLI  find_command _tokens_for_help ","command switches merge  empty? ! ","command switches merge  empty? ","GLI  find_command  switches merge ","GLI  find_command  flags ","GLI  find_command  switches ","command  wrap  ","GLI  find_command  description ","GLI  find_command  usage ","GLI  find_GLI  find_command  ","command long_ wrap  ","GLI  find_command  long_description "]}," GLI DefaultHelpCommand list_commands":{"type":"method","name":"list_commands","children":[],"call":[" output_command_tokens_for_help ","GLI  commands "," puts ","@omit_from_list include? ","GLI  commands reject "," commands_to_show ","@@output puts "]}," GLI DefaultHelpCommand list_global_flags":{"type":"method","name":"list_global_flags","children":[],"call":[" puts ","all_options empty? ! ","all_options empty? "," output_command_tokens_for_help ","GLI  switches merge ","GLI  flags ","GLI  switches ","GLI  program_name ","@@output puts "," wrap ","GLI  program_desc ","GLI  switches merge  empty? ! ","GLI  switches merge  empty? "]}," GLI DefaultHelpCommand execute":{"type":"method","name":"execute","children":[],"call":[" list_one_command_help ","arguments [] "," list_commands "," list_global_flags ","arguments empty? ","@@output puts ","command empty? ","names sort each ","names sort ","name =~ ","names select ","arguments size > ","arguments size ","names map! ","memo flatten ","memo << ","obj [] aliases ","obj [] "," commands_to_show reduce "," commands_to_show ","options [] ","name to_s ","memo flatten  flatten ","memo flatten  << "]}," GLI DefaultHelpCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" switch "," desc "]}," GLI find_command":{"type":"method","name":"find_command","children":[],"call":["command aliases include? ","command aliases "," commands [] "," commands "," commands keys each "," commands keys ","name to_sym "," commands each "," commands []  aliases include? "," commands []  aliases ","  commands [] s [] ","  commands [] s ","  commands [] s keys each ","  commands [] s keys ","name to_name to_sym  ","  commands [] s each "]}," GLI parse_options_helper":{"type":"method","name":"parse_options_helper","children":[],"call":[" parse_options_helper "," raise ","command ! "," find_command ","command_name =~ ","try_me shift ","try_me | ","arg =~ ","try_me delete ","check each ","rest | ","rest empty? ","try_me empty? ","options []= ","options [] ! ","options [] ","flag get_value! ","flag_hash each ","switch get_value! ","switch_hash each ","command flags ","command switches "," flags "," switches ","args [] ","args length ","non_flag_i + ","non_flag_i == ","arguments | ","args shift "," find_non_flag_index ","try_me + ","rest + ","arguments + "," default_command_options ","options [] == ","flag default_value ","BadCommandLine  new ","UnknownCommand  new ","UnknownGlobalArgument  new ","UnknownCommandArgument  new ","Hash  new ","index - ","(lvasgn :index\n  (send nil :flag_switch_index\n    (lvar :args))) >= "," flag_switch_index "," find_command  ! "," find_ find_command  "," find_command _name =~ ","try_me shift  =~ ","args shift  =~ ","args []  shift ","args []  | ","args []  delete ","rest |  each ","rest +  each ","args []  empty? ","flag get_flag get_value! ! ","flag get_switch get_value! ! ","command flags  each "," flags  each ","switch get_flag get_value! ! ","switch get_switch get_value! ! ","command switches  each "," switches  each "," find_command  flags "," find_command  switches "," find_non_flag_index  + "," find_non_flag_index  == "," find_ find_non_flag_index ndex "," find_non_flag_ flag_switch_index  ","args []  + "," default_ find_command _options ","flag default_flag get_value!  ","flag default_switch get_value!  "," flag_switch_index  - ","(lvasgn : flag_switch_index \n  (send nil :flag_switch_ flag_switch_index \n    (lvar :args))) >= "," flag_switch_ flag_switch_index  "]}," GLI commands":{"type":"method","name":"commands","children":[],"call":[]}," GLI switches":{"type":"method","name":"switches","children":[],"call":[]}," GLI flags":{"type":"method","name":"flags","children":[],"call":[]}," GLI clear_nexts":{"type":"method","name":"clear_nexts","children":[],"call":[]}," GLI find_non_flag_index":{"type":"method","name":"find_non_flag_index","children":[],"call":["i - ","args [] =~ ","args [] ","args each_index ","index - ","item =~ ","args each_with_index "]}," GLI parse_options":{"type":"method","name":"parse_options","children":[],"call":["options []= ","flag default_value ","options [] ! ","options [] ","command flags each ","command flags ","global_options []= ","global_options [] ! ","global_options [] "," flags each "," flags "," parse_options_helper ","Array  new ","Hash  new ","args clone ","Options  new ","config delete ","config nil? ! ","config nil? "]}," GLI program_name":{"type":"method","name":"program_name","children":[],"call":[]}," GLI run":{"type":"method","name":"run","children":[],"call":["help execute "," commands [] "," commands "," puts ","@@error_block call ","@@post_block call ","command execute ","command ! ","@@pre_block call "," parse_options "," commands []= ","DefaultHelpCommand  new "," commands [] ! ","ex message ","RDocCommand  new "," parse_config ","$stderr puts "," copy_options_to_aliased_versions "," convert_to_option? ","ex exit_code "," raise ","ENV  [] == ","ENV  [] ","ex respond_to? ","@@stderr puts "," error_message "," regular_error_handling? "," proceed? "," convert_to_openstruct? ","command skips_post ! ","command skips_post "," override_defaults_based_on_config "," commands []  execute ","  commands [] s [] ","  commands [] s "," commands []  ! "," parse_ convert_to_option?  "," parse_ convert_to_openstruct?  ","  commands [] s []= ","  commands [] s [] ! "," parse_ parse_config  "," copy_ convert_to_option? _to_aliased_versions "," copy_ convert_to_openstruct? _to_aliased_versions ","ex ex exit_code  "," @@error_block call ? "," @@pre_block call ? "," commands []  skips_post ! "," commands []  skips_post "," override_defaults_based_on_ parse_config  "]}," GLI on_error":{"type":"method","name":"on_error","children":[],"call":[]}," GLI post":{"type":"method","name":"post","children":[],"call":[]}," GLI pre":{"type":"method","name":"pre","children":[],"call":[]}," GLI command":{"type":"method","name":"command","children":[],"call":[" clear_nexts "," commands []= ","command name "," commands ","Command  new ","(lvar :names) flatten "," Command  new s []= ","Command  new  name "," Command  new s "]}," GLI switch":{"type":"method","name":"switch","children":[],"call":[" clear_nexts "," switches []= ","switch name "," switches ","Switch  new ","(lvar :names) flatten "," verify_unused "," flags "," Switch  new es []= ","Switch  new  name "," Switch  new es ","(lvar :(lvar :names) flatten ) flatten "]}," GLI flag":{"type":"method","name":"flag","children":[],"call":[" clear_nexts "," flags []= ","flag name "," flags ","Flag  new ","(lvar :names) flatten "," verify_unused "," switches "," Flag  new s []= ","Flag  new  name "," Flag  new s ","(lvar :(lvar :names) flatten ) flatten "]}," GLI default_value":{"type":"method","name":"default_value","children":[],"call":[]}," GLI arg_name":{"type":"method","name":"arg_name","children":[],"call":[]}," GLI desc":{"type":"method","name":"desc","children":[],"call":[]}," GLI reset":{"type":"method","name":"reset","children":[],"call":[" clear_nexts "," commands clear "," commands "," flags clear "," flags "," switches clear "," switches "," switch "," desc "]}," GLI Switch name_as_string":{"type":"method","name":"name_as_string","children":[],"call":[]}," GLI Switch find_me":{"type":"method","name":"find_me","children":[],"call":["- + + ","match_data [] ","- + ","arg match ","name =~ ","@names keys each ","@names keys ","@names [] ","arg match  [] "]}," GLI Switch get_value!":{"type":"method","name":"get_value!","children":[],"call":["result [] ","args delete_at ","args []= "," find_me ","args [] ","args each_index "," find_me  [] "]}," GLI Switch initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options [] nil? "," raise ","@negatable == ","@default_value != ","options []  == "]}," GLI Flag all_forms":{"type":"method","name":"all_forms","children":[],"call":["forms [] =~ ","forms [] ","forms join "," all_forms_a "," all_forms_a  [] =~ "," all_forms_a  [] "," all_forms_a  join "," all_ all_forms_a _a "]}," GLI Flag find_me":{"type":"method","name":"find_me","children":[],"call":["arg match ","@names keys each ","@names keys "," raise ","arg length == ","arg length ","@names [] ","BadCommandLine  new "]}," GLI Flag get_value!":{"type":"method","name":"get_value!","children":[],"call":[" raise ","args delete_at ","args [] ","value == ","value ! "," find_me ","args each_index ","BadCommandLine  new ","args [] s delete_at ","args [] s [] ","args []  == ","args []  ! ","args [] s each_index "]}," GLI Flag initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," GLI CommandLineToken all_forms_a":{"type":"method","name":"all_forms_a","children":[],"call":["y length <=> ","x length ","y length ","(send\n  (send nil :aliases) :collect) sort "," class name_as_string "," class "," aliases collect "," aliases "," name ","two length <=> ","one length ","two length ","one length <=> ","(send\n  (send nil :aliases) :map) sort "," negatable? "," aliases map "]}," GLI CommandLineToken parse_names":{"type":"method","name":"parse_names","children":[],"call":["names length > ","names length ","names shift ","names_hash []= "," class name_as_string "," class ","names each ","names is_a? ","Hash  new "," raise ","ArgumentError  new ","n to_s =~ ","n to_s ","(lvar :names) flatten map ","(lvar :names) flatten ","name to_sym ","name to_s =~ ","name to_s ","names shift s length > ","(lvar :names) flatten map  length > ","names shift s length ","(lvar :names) flatten map  length ","names shift s shift ","(lvar :names) flatten map  shift ","names shift s_hash []= ","Hash  new  []= ","(lvar :names) flatten map _hash []= "," class names shift _as_string ","names shift s each ","(lvar :names) flatten map  each ","names shift s is_a? ","(lvar :names) flatten map  is_a? ","(lvar :names shift s) flatten map ","(lvar :(lvar :names) flatten map ) flatten map ","(lvar :names shift s) flatten ","(lvar :(lvar :names) flatten map ) flatten ","names shift  to_sym ","names shift  to_s =~ ","names shift  to_s "]}," GLI CommandLineToken all_forms":{"type":"method","name":"all_forms","children":[],"call":["forms join "," all_forms_a "," all_forms_a  join "," all_ all_forms_a _a "]}," GLI CommandLineToken usage":{"type":"method","name":"usage","children":[],"call":[" all_forms "]}," GLI CommandLineToken initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_names "]}," GLI Command execute":{"type":"method","name":"execute","children":[],"call":["@action call "]}," GLI Command clear_nexts":{"type":"method","name":"clear_nexts","children":[],"call":[]}," GLI Command name_as_string":{"type":"method","name":"name_as_string","children":[],"call":[]}," GLI Command action":{"type":"method","name":"action","children":[],"call":[]}," GLI Command switch":{"type":"method","name":"switch","children":[],"call":[" clear_nexts "," switches []= ","switch name "," switches ","Switch  new ","(lvar :names) flatten ","GLI  verify_unused "," name "," flags "," Switch  new es []= ","Switch  new  name "," Switch  new es ","(lvar :(lvar :names) flatten ) flatten "]}," GLI Command flag":{"type":"method","name":"flag","children":[],"call":[" clear_nexts "," flags []= ","flag name "," flags ","Flag  new ","(lvar :names) flatten ","GLI  verify_unused "," name "," switches "," Flag  new s []= ","Flag  new  name "," Flag  new s ","(lvar :(lvar :names) flatten ) flatten "]}," GLI Command default_value":{"type":"method","name":"default_value","children":[],"call":[]}," GLI Command arg_name":{"type":"method","name":"arg_name","children":[],"call":[]}," GLI Command desc":{"type":"method","name":"desc","children":[],"call":[]}," GLI Command switches":{"type":"method","name":"switches","children":[],"call":[]}," GLI Command flags":{"type":"method","name":"flags","children":[],"call":[]}," GLI Command usage":{"type":"method","name":"usage","children":[],"call":["  + "," switches empty? ! "," switches empty? "," switches "," flags empty? ! "," flags empty? "," flags "," name to_s "," name "]}," GLI Command names":{"type":"method","name":"names","children":[],"call":[" all_forms "]}," GLI Command initialize":{"type":"method","name":"initialize","children":[],"call":[" clear_nexts ","options [] "," Array flatten "," Array "]}," GLI Scaffold mk_rakefile":{"type":"method","name":"mk_rakefile","children":[],"call":[]}," GLI Scaffold mk_gemspec":{"type":"method","name":"mk_gemspec","children":[],"call":[]}," GLI Scaffold mk_readme":{"type":"method","name":"mk_readme","children":[],"call":[]}," GLI RDocCommand output_flags":{"type":"method","name":"output_flags","children":[],"call":["file << ","flag long_description ","(send\n  (send\n    (send\n      (lvar :flag) :usage) :length) :+\n  (int 12)) times ","flag usage length + ","flag usage length ","flag usage ","flag default_value ","flag kind_of? ","flag description ","flags values sort each ","flags values sort ","flags values "]}," GLI RDocCommand execute":{"type":"method","name":"execute","children":[],"call":[" output_flags ","file << ","command long_description ","all_options length > ","all_options length ","command switches merge ","command flags ","command switches ","command aliases each ","command aliases ","command description ","command arguments_description ","command name ","command == ","GLI  commands values sort each ","GLI  commands values sort ","GLI  commands values ","GLI  commands ","global_options length > ","global_options length ","GLI  switches merge ","GLI  flags ","GLI  switches ","GLI  program_name ","File  open "," create_cheatsheet ","options [] "," create_manpage "," create_rdoc ","command switches merge  length > ","command switches merge  length ","GLI  switches merge  length > ","GLI  switches merge  length "]}," GLI RDocCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" switch "," desc "]}," GLI long_desc":{"type":"method","name":"long_desc","children":[],"call":[]}," GLI CommandLineToken <=>":{"type":"method","name":"<=>","children":[],"call":[" name to_s <=> ","other name to_s ","other name "," name to_s "," name "]}," GLI Command arguments_description":{"type":"method","name":"arguments_description","children":[],"call":[]}," Options []=":{"type":"method","name":"[]=","children":[],"call":["@table []= ","k to_sym "]}," Options []":{"type":"method","name":"[]","children":[],"call":["@table [] ","k to_sym "]}," GLI InitConfig execute":{"type":"method","name":"execute","children":[],"call":[" puts ","YAML  dump ","File  open ","config [] []= ","name to_sym ","config [] ","command != ","name != ","GLI  commands each ","GLI  commands ","config []= ","File  exist? ! ","File  exist? ","options [] "," raise "," create_config "]}," GLI InitConfig initialize":{"type":"method","name":"initialize","children":[],"call":[" switch "," desc "," raise "," create_config ","File  exist? ! ","File  exist? ","options [] "," action "]}," GLI default_command_options":{"type":"method","name":"default_command_options","children":[],"call":["command_configs [] ","command name to_sym ","command name "]}," GLI parse_config":{"type":"method","name":"parse_config","children":[],"call":["YAML  load ","File  open ","File  exist? "," require ","@@config_file nil? "]}," GLI config_file":{"type":"method","name":"config_file","children":[],"call":[" commands []= ","InitConfig  new "," commands ","Etc  getpwuid dir + + ","Etc  getpwuid dir + ","Etc  getpwuid dir ","Etc  getpwuid ","filename =~ ","File  join ","File  expand_path "]}," GLI Scaffold mk_version":{"type":"method","name":"mk_version","children":[],"call":[]}," GLI Scaffold project_name_as_module_name":{"type":"method","name":"project_name_as_module_name","children":[],"call":[]}," GLI DefaultHelpCommand commands_to_show":{"type":"method","name":"commands_to_show","children":[],"call":["@omit_from_list include? ","GLI  commands reject ","GLI  commands "]}," GLI DefaultHelpCommand output_device=":{"type":"method","name":"output_device=","children":[],"call":[]}," GLI verify_unused_in_option":{"type":"method","name":"verify_unused_in_option","children":[],"call":[" raise ","ArgumentError  new ","one_option aliases include? ","one_option aliases ","option_like each ","option_like [] ","name to_s == ","name to_s "]}," GLI verify_unused":{"type":"method","name":"verify_unused","children":[],"call":[" verify_unused_in_option ","names each "]}," GLI copy_options_to_aliases":{"type":"method","name":"copy_options_to_aliases","children":[],"call":["options merge! ","new_options []= ","gli_like switches [] aliases each ","gli_like switches [] aliases ","gli_like switches [] ","gli_like switches ","gli_like flags [] aliases each ","gli_like flags [] aliases ","gli_like flags [] ","gli_like flags ","options each "]}," GLI copy_options_to_aliased_versions":{"type":"method","name":"copy_options_to_aliased_versions","children":[],"call":[" copy_options_to_aliases ","command copy_options_to_aliases "]}," GLI version":{"type":"method","name":"version","children":[],"call":[]}," GLI Command long_desc":{"type":"method","name":"long_desc","children":[],"call":[]}," GLI convert_to_option?":{"type":"method","name":"convert_to_option?","children":[],"call":["Options  new "]}," GLI use_openstruct":{"type":"method","name":"use_openstruct","children":[],"call":[]}," GLI Options []=":{"type":"method","name":"[]=","children":[],"call":["@table []= ","k to_sym "," send "]}," GLI Options []":{"type":"method","name":"[]","children":[],"call":["@table [] ","k to_sym "," send "]}," GLI exit_now!":{"type":"method","name":"exit_now!","children":[],"call":[" raise ","CustomExit  new "]}," GLI Terminal jruby?":{"type":"method","name":"jruby?","children":[],"call":["RUBY_PLATFORM  =~ "]}," GLI Terminal run_command":{"type":"method","name":"run_command","children":[],"call":[]}," GLI Terminal size":{"type":"method","name":"size","children":[],"call":["Terminal  default_size "," raise ","(send\n  (send\n    (send nil :run_command\n      (str \"stty size\")) :scan\n    (regexp\n      (str \"\\\\d+\")\n      (regopt))) :map) reverse ","s to_i "," run_command scan map "," run_command scan "," run_command "," command_exists? ","STDIN  tty? "," run_command to_i ","ENV  [] ","STDIN  tty? ! "," jruby? ","ENV  [] to_i ","ENV  [] =~ ","size_element to_i ","(send\n  (const nil :SIZE_DETERMINERS) :select) first [] call ","(send\n  (const nil :SIZE_DETERMINERS) :select) first [] ","(send\n  (const nil :SIZE_DETERMINERS) :select) first ","predicate call ","SIZE_DETERMINERS  select ","size == ","get_size call ","SIZE_DETERMINERS  each ","Terminal  default_get_size call  ","(send\n  (send\n    (send nil :run_command\n      (str \"stty get_size call \")) :scan\n    (regexp\n      (str \"\\\\d+\")\n      (regopt))) :map) reverse ","get_size call _element to_i ","get_size call  == ","get_get_size call  call "]}," GLI Terminal command_exists?":{"type":"method","name":"command_exists?","children":[],"call":["File  exists? ","File  join ","ENV  [] split any? ","ENV  [] split ","ENV  [] "," class command_exists? "," class "]}," GLI Terminal make_unsafe!":{"type":"method","name":"make_unsafe!","children":[],"call":[]}," GLI Terminal instance":{"type":"method","name":"instance","children":[],"call":[]}," GLI Terminal default_size=":{"type":"method","name":"default_size=","children":[],"call":[]}," GLI Terminal default_size":{"type":"method","name":"default_size","children":[],"call":[]}," GLI CustomExit initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI BadCommandLine initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI RDocCommand create_rdoc":{"type":"method","name":"create_rdoc","children":[],"call":[" output_flags ","file << ","all_options length > ","all_options length ","command long_description ","command switches merge ","command flags ","command switches ","command aliases each ","command aliases ","command description ","command arguments_description ","command name ","command == ","GLI  commands values sort each ","GLI  commands values sort ","GLI  commands values ","GLI  commands ","global_options length > ","global_options length ","GLI  switches merge ","GLI  flags ","GLI  switches ","GLI  program_name ","File  open ","GLI  program_desc ","command switches merge  length > ","command switches merge  length ","GLI  switches merge  length > ","GLI  switches merge  length "]}," GLI RDocCommand create_manpage":{"type":"method","name":"create_manpage","children":[],"call":[]}," GLI RDocCommand create_cheatsheet":{"type":"method","name":"create_cheatsheet","children":[],"call":["file << ","command arguments_description ","GLI  program_name ","(send\n  (lvar :command) :name) flatten each ","(send\n  (lvar :command) :name) flatten ","command aliases ","command name ","command description ","command == ","GLI  commands values sort each ","GLI  commands values sort ","GLI  commands values ","GLI  commands ","a + ","GLI  program_name length times inject ","GLI  program_name length times ","GLI  program_name length ","File  open "]}," GLI convert_to_openstruct?":{"type":"method","name":"convert_to_openstruct?","children":[],"call":["Options  new "]}," GLI error_message":{"type":"method","name":"error_message","children":[],"call":[" program_name ","ex command name ","ex command ","ex message "]}," GLI regular_error_handling?":{"type":"method","name":"regular_error_handling?","children":[],"call":["@@error_block call "]}," GLI proceed?":{"type":"method","name":"proceed?","children":[],"call":["@@pre_block call ","command skips_pre "]}," GLI error_device=":{"type":"method","name":"error_device=","children":[],"call":[]}," GLI UnknownCommandArgument initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI BadCommandLine exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," GLI DefaultHelpCommand skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI DefaultHelpCommand skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI DefaultHelpCommand skips_post=":{"type":"method","name":"skips_post=","children":[],"call":[]}," GLI DefaultHelpCommand skips_pre=":{"type":"method","name":"skips_pre=","children":[],"call":[]}," GLI override_default":{"type":"method","name":"override_default","children":[],"call":["token default_value= ","config [] ","tokens each "]}," GLI override_defaults_based_on_config":{"type":"method","name":"override_defaults_based_on_config","children":[],"call":[" override_default ","command switches ","command flags ","config [] [] ","config [] "," commands each "," commands "," switches "," flags "]}," GLI skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI program_desc":{"type":"method","name":"program_desc","children":[],"call":[]}," GLI Switch default_value=":{"type":"method","name":"default_value=","children":[],"call":[]}," GLI CopyOptionsToAliases copy_aliases":{"type":"method","name":"copy_aliases","children":[],"call":["new_options []= ","aliases each "]}," GLI CopyOptionsToAliases copy_options_to_aliases":{"type":"method","name":"copy_options_to_aliases","children":[],"call":["options merge! "," copy_aliases "," switches [] aliases "," switches [] "," switches "," flags [] aliases "," flags [] "," flags ","options each "]}," GLI Command skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI Command skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI flag_switch_index":{"type":"method","name":"flag_switch_index","children":[],"call":["item =~ ","args each_with_index "]}," GLI paragraph_lines":{"type":"method","name":"paragraph_lines","children":[],"call":["lines << ","this_line empty? ","this_line length + + > ","this_line length + + ","this_line length + ","word length ","this_line length ","paragraph split each ","paragraph split "]}," GLI default_command":{"type":"method","name":"default_command","children":[],"call":["command to_sym "]}," GLI included":{"type":"method","name":"included","children":[],"call":[]}," GLI Switch negatable?":{"type":"method","name":"negatable?","children":[],"call":[]}," GLI Switch arguments_for_option_parser":{"type":"method","name":"arguments_for_option_parser","children":[],"call":[" all_forms_a "]}," GLI Options map":{"type":"method","name":"map","children":[],"call":["@table map "]}," GLI OptionParserFactory setup_options":{"type":"method","name":"setup_options","children":[],"call":[]}," GLI OptionParserFactory setup_accepts":{"type":"method","name":"setup_accepts","children":[],"call":[]}," GLI OptionParserFactory option_parser":{"type":"method","name":"option_parser","children":[],"call":[" class setup_options "," class "," class setup_accepts ","OptionParser  new "]}," GLI OptionParserFactory initialize":{"type":"method","name":"initialize","children":[],"call":[" class setup_options "," class "," class setup_accepts ","OptionParser  new "]}," GLI GLIOptionParser find_command_by_partial_name":{"type":"method","name":"find_command_by_partial_name","children":[],"call":["names_to_commands [] ","partial_matches [] ","partial_matches size == ","partial_matches size ","command_name =~ ","names_to_commands keys select ","names_to_commands keys "]}," GLI GLIOptionParser find_command":{"type":"method","name":"find_command","children":[],"call":[" find_command_by_partial_name ","names_to_commands fetch ","name to_s ","names_to_commands []= ","command_alias to_s "," Array each "," Array ","command aliases ","command_name to_s ","@commands each ","names_to_commands [] ","partial_matches [] ","partial_matches size == ","partial_matches size ","command_name =~ ","names_to_commands keys select ","names_to_commands keys "," find_command_by_partial_name to_s  ","name to_s s_to_commands fetch ","name to_s  to_s ","name to_s s_to_commands []= ","command_name to_s  to_s ","name to_s s_to_commands [] ","command_name to_s  =~ ","name to_s s_to_commands keys select ","name to_s s_to_commands keys "]}," GLI GLIOptionParser parse_global_options":{"type":"method","name":"parse_global_options","children":[],"call":["error_handler call ","ex args join ","ex args ","ex reason ","option_parser order! ","option_parser_factory option_parser "," raise ","UnknownGlobalArgument  new "," lambda ","error_handler nil? "]}," GLI GLIOptionParser parse_command_options":{"type":"method","name":"parse_command_options","children":[],"call":[" raise ","UnknownCommandArgument  new ","ex args join ","ex args ","ex reason ","option_parser parse! ","option_parser_factory option_parser ","BadCommandLine  new ","option_parser on ","help_args empty? ","command has_option? ","(str \"-h\") reject "]}," GLI GLIOptionParser parse_options":{"type":"method","name":"parse_options","children":[],"call":["command_options []= ","switch default_value ","command_options [] ","command switches each ","command switches ","flag default_value ","command flags each ","command flags "," parse_command_options ","OptionParserFactory  new "," raise ","UnknownCommand  new ","command sort join ","command sort ","command kind_of? "," Array empty? "," Array "," find_command ","global_options []= ","global_options [] ","@flags each "," parse_global_options ","args clone ","option_parser_class new parse! ","option_parser_class new ","@global_option_parser parse! ","parsing_result arguments= ","OptionParsingResult  new tap ","OptionParsingResult  new "," class const_get ","@subcommand_option_handling_strategy to_s capitalize ","@subcommand_option_handling_strategy to_s "," class "," options [] "," options "," options [] to_s capitalize "," options [] to_s ","command_options [] nil? ","global_options [] nil? ","@switches each "," find_command _options []= "," find_command _options [] "," find_command  switches each "," find_command  switches "," find_command  flags each "," find_command  flags "," parse_ find_command _options "," find_command  sort join "," find_command  sort "," find_command  kind_of? "," find_ find_command  "," class const_get  new parse! "," class const_get  new ","@global_option_parser parse!  arguments= ","@sub find_command _option_handling_strategy to_s capitalize ","@sub find_command _option_handling_strategy to_s "," find_command _options [] nil? "]}," GLI GLIOptionParser initialize":{"type":"method","name":"initialize","children":[],"call":["GlobalOptionParser  new ","OptionParserFactory  new ","CommandFinder  new "," raise ","@subcommand_option_handling_strategy != ","@argument_handling_strategy == ","options [] != ","options [] ","options [] == "," options= ","DEFAULT_OPTIONS  merge "]}," GLI Flag arguments_for_option_parser":{"type":"method","name":"arguments_for_option_parser","children":[],"call":["args << "," all_forms_a map "," all_forms_a "]}," GLI StandardException exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," GLI DSL extract_options":{"type":"method","name":"extract_options","children":[],"call":["(pair\n  (sym :desc)\n  (ivar :@next_desc)) merge ","names pop ","names last kind_of? ","names last "]}," GLI DSL verify_unused_in_option":{"type":"method","name":"verify_unused_in_option","children":[],"call":[" raise ","ArgumentError  new "," context_description ","one_option aliases include? ","one_option aliases ","option_like each ","option_like [] ","name to_s == ","name to_s "]}," GLI DSL verify_unused":{"type":"method","name":"verify_unused","children":[],"call":[" verify_unused_in_option "," switches "," flags ","names each "]}," GLI DSL command":{"type":"method","name":"command","children":[],"call":[" clear_nexts "," commands []= ","command name "," commands ","command parent= ","Command  new ","command_options merge ","(lvar :names) flatten ","GLI Commands CompoundCommand  new ","names first ","names first kind_of? ","@commands_declaration_order << ","command nil? "," commands [] ","new_command name "," Command  new s []= "," GLI Commands CompoundCommand  new s []= ","  commands [] s []= ","Command  new  name ","GLI Commands CompoundCommand  new  name "," commands []  name "," Command  new s "," GLI Commands CompoundCommand  new s ","  commands [] s ","Command  new  parent= ","GLI Commands CompoundCommand  new  parent= "," commands []  parent= ","Command  new _options merge ","GLI Commands CompoundCommand  new _options merge "," commands [] _options merge ","@Command  new s_declaration_order << ","@GLI Commands CompoundCommand  new s_declaration_order << ","@ commands [] s_declaration_order << ","Command  new  nil? ","GLI Commands CompoundCommand  new  nil? "," commands []  nil? "," Command  new s [] "," GLI Commands CompoundCommand  new s [] ","  commands [] s [] ","new_Command  new  name ","new_GLI Commands CompoundCommand  new  name ","new_ commands []  name "]}," GLI DSL clear_nexts":{"type":"method","name":"clear_nexts","children":[],"call":[]}," GLI DSL switch":{"type":"method","name":"switch","children":[],"call":[" clear_nexts "," switches []= ","switch name "," switches ","Switch  new "," verify_unused ","(lvar :names) flatten "," extract_options "," switches_declaration_order << "," switches_declaration_order "," Switch  new es []= ","Switch  new  name "," Switch  new es ","(lvar :(lvar :names) flatten ) flatten "," extract_ extract_options  "," Switch  new es_declaration_order << "," Switch  new es_declaration_order "]}," GLI DSL flag":{"type":"method","name":"flag","children":[],"call":[" clear_nexts "," flags []= ","flag name "," flags ","Flag  new "," verify_unused ","(lvar :names) flatten "," extract_options "," flags_declaration_order << "," flags_declaration_order "," Flag  new s []= ","Flag  new  name "," Flag  new s ","(lvar :(lvar :names) flatten ) flatten "," extract_ extract_options  "," Flag  new s_declaration_order << "," Flag  new s_declaration_order "]}," GLI DSL default_value":{"type":"method","name":"default_value","children":[],"call":[]}," GLI DSL arg_name":{"type":"method","name":"arg_name","children":[],"call":[]}," GLI DSL long_desc":{"type":"method","name":"long_desc","children":[],"call":[]}," GLI DSL desc":{"type":"method","name":"desc","children":[],"call":[]}," GLI Commands Scaffold mkdirs":{"type":"method","name":"mkdirs","children":[],"call":[]}," GLI Commands Scaffold mk_binfile":{"type":"method","name":"mk_binfile","children":[],"call":[]}," GLI Commands Scaffold mk_rakefile":{"type":"method","name":"mk_rakefile","children":[],"call":[]}," GLI Commands Scaffold mk_lib_files":{"type":"method","name":"mk_lib_files","children":[],"call":[]}," GLI Commands Scaffold project_name_as_module_name":{"type":"method","name":"project_name_as_module_name","children":[],"call":[]}," GLI Commands Scaffold mk_gemspec":{"type":"method","name":"mk_gemspec","children":[],"call":[]}," GLI Commands Scaffold mk_readme":{"type":"method","name":"mk_readme","children":[],"call":[]}," GLI Commands Scaffold create_scaffold":{"type":"method","name":"create_scaffold","children":[],"call":[]}," GLI Commands RdocDocumentListener add_dashes":{"type":"method","name":"add_dashes","children":[],"call":["name length > ","name length "]}," GLI Commands RdocDocumentListener end_commands":{"type":"method","name":"end_commands","children":[],"call":["@nest gsub! "]}," GLI Commands RdocDocumentListener default_command":{"type":"method","name":"default_command","children":[],"call":["@io puts ","name nil? "]}," GLI Commands RdocDocumentListener end_command":{"type":"method","name":"end_command","children":[],"call":["@nest gsub! "]}," GLI Commands RdocDocumentListener command":{"type":"method","name":"command","children":[],"call":["@io puts "," String strip "," String ","aliases join ","aliases empty? ","@arg_name_formatter format ","(send\n  (array\n    (lvar :name)) :+\n  (lvar :aliases)) join ","(lvar :name) + "]}," GLI Commands RdocDocumentListener commands":{"type":"method","name":"commands","children":[],"call":["@io puts "]}," GLI Commands RdocDocumentListener end_options":{"type":"method","name":"end_options","children":[],"call":[]}," GLI Commands RdocDocumentListener switch":{"type":"method","name":"switch","children":[],"call":["@io puts "," String strip "," String ","(send\n  (lvar :aliases) :map) join "," add_dashes ","aliases map ","aliases empty? ","_ length > ","_ length ","name length > ","name length ","(send\n  (begin\n    (send\n      (array\n        (lvar :name)) :+\n      (lvar :aliases))) :map) join ","(send\n  (array\n    (lvar :name)) :+\n  (lvar :aliases)) map ","(lvar :name) + ","_ to_s length > ","_ to_s length ","_ to_s ","name to_s length > ","name to_s length ","name to_s "]}," GLI Commands RdocDocumentListener flag":{"type":"method","name":"flag","children":[],"call":["@io puts "," String strip "," String ","must_match to_s ","must_match nil? ","(send\n  (lvar :aliases) :map) join "," add_dashes ","aliases map ","aliases empty? ","(send\n  (begin\n    (send\n      (array\n        (lvar :name)) :+\n      (send nil :Array\n        (lvar :aliases)))) :map) join ","(send\n  (array\n    (lvar :name)) :+\n  (send nil :Array\n    (lvar :aliases))) map ","(lvar :name) + "," Array "]}," GLI Commands RdocDocumentListener options":{"type":"method","name":"options","children":[],"call":["@io puts ","@nest size == ","@nest size "]}," GLI Commands RdocDocumentListener version":{"type":"method","name":"version","children":[],"call":["@io puts "]}," GLI Commands RdocDocumentListener program_desc":{"type":"method","name":"program_desc","children":[],"call":["@io puts ","File  basename ","@app exe_name "]}," GLI Commands RdocDocumentListener ending":{"type":"method","name":"ending","children":[],"call":["@io close "]}," GLI Commands RdocDocumentListener beginning":{"type":"method","name":"beginning","children":[],"call":[]}," GLI Commands RdocDocumentListener initialize":{"type":"method","name":"initialize","children":[],"call":["File  new ","File  basename + ","File  basename ","GLI Commands HelpModules ArgNameFormatter  new ","app exe_name "]}," GLI InitConfig config_for_command":{"type":"method","name":"config_for_command","children":[],"call":["hash [] []= "," config_for_command ","name to_sym ","hash [] "," puts ","name kind_of? ","subcommands each ","commands [] commands ","commands [] "," tap ","commands [] commands  each "]}," GLI InitConfig create_config":{"type":"method","name":"create_config","children":[],"call":["YAML  dump ","File  open ","config [] []= "," config_for_command ","name to_sym ","config [] ","command != ","name != ","@app_commands each ","config []= ","Hash  [] ","option_value force_encoding ","option_value respond_to? ","option_value kind_of? ","global_options map ","@commands each "," puts ","FileUtils  mkdir_p ","File  dirname ","File  dirname == ","global_options [] ","(send\n  (send\n    (ivar :@app_switches) :keys) :+\n  (send\n    (ivar :@app_flags) :keys)) map ","@app_switches keys + ","@app_flags keys ","@app_switches keys ","Hash  []  [] []= "," Hash  [] _for_command ","Hash  []  [] ","Hash  []  []= ","global_options []  force_encoding ","global_options []  respond_to? ","global_options []  kind_of? "]}," GLI Commands HelpModules TextWrapper wrap":{"type":"method","name":"wrap","children":[],"call":["wrapped_text gsub ","wrapped_text << << << ","  * ","wrapped_text << << ","wrapped_text << ","current_graf << ","word length + ","word length ","current_line << << ","current_line << ","current_line == ","@indent + ","current_graf << << ","current_line_length + + > ","current_line_length + + ","current_line_length + ","words each ","current_line length ","words shift ","graf split ","paragraphs each ","text split ","text nil? ","@indent +  + + > ","@indent +  + + ","@indent +  + ","graf split  each ","graf split  shift ","text split  each "]}," GLI Commands HelpModules TextWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI Commands HelpModules OptionsFormatter option_names_for_help_string":{"type":"method","name":"option_names_for_help_string","children":[],"call":["names join + ","names join ","names [] =~ ","names [] ","arg_name nil? ","CommandLineOption  name_as_string ","option negatable? ","option kind_of? ","names map ","(send\n  (lvar :option) :name) flatten "," Array ","option aliases ","option name ","(send\n  (lvar :option) :name) flatten  join + ","(send\n  (lvar :option) :name) flatten  join ","(send\n  (lvar :option) :name) flatten  [] =~ ","(send\n  (lvar :option) :name) flatten  [] ","(send\n  (lvar :option) :name) flatten  map "]}," GLI Commands HelpModules OptionsFormatter description_with_default":{"type":"method","name":"description_with_default","children":[],"call":[" String ","option description "," String + ","option default_value ","option kind_of? ","option safe_default_value ","option required? ","option multiple? "]}," GLI Commands HelpModules OptionsFormatter format":{"type":"method","name":"format","children":[],"call":["stringio string ","list_formatter output ","StringIO  new ","ListFormatter  new "," description_with_default "," option_names_for_help_string ","option argument_name ","option respond_to? ","(send\n  (send\n    (ivar :@flags_and_switches) :values) :sort) map ","a name to_s <=> ","b name to_s ","b name ","a name to_s ","a name ","@flags_and_switches values sort ","@flags_and_switches values ","@flags_and_switches map ","flags_and_switches map ","@sorter call ","StringIO  new  string ","ListFormatter  new  output ","(send\n  (send\n    (ivar :@@sorter call ) :values) :sort) map ","@@sorter call  values sort ","@@sorter call  values ","@@sorter call  map ","@sorter call  map "]}," GLI Commands HelpModules OptionsFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["sorter call "]}," GLI Commands HelpModules ListFormatter output":{"type":"method","name":"output","children":[],"call":["output_device printf ","wrapper wrap "," String strip "," String ","@list each ","TextWrapper  new ","4 + + ","4 + ","Terminal  instance size [] ","Terminal  instance size ","Terminal  instance ","(send\n  (ivar :@list) :map) max ","_ [] length ","_ [] ","@list map ","@list empty? ","@wrapper_class new ","TextWrapper  new  wrap ","@wrapper_class new  wrap ","@TextWrapper  new _class new ","@@wrapper_class new _class new "]}," GLI Commands HelpModules ListFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI Commands HelpModules GlobalHelpFormat usage_string":{"type":"method","name":"usage_string","children":[],"call":["string << "," global_flags_and_switches empty? "," global_flags_and_switches ","(begin\n  (send\n    (const nil :File) :basename\n    (gvar :$0))) tap ","File  basename ","(begin\n  (send\n    (ivar :@app) :exe_name)) tap ","@app exe_name "]}," GLI Commands HelpModules GlobalHelpFormat global_flags_and_switches":{"type":"method","name":"global_flags_and_switches","children":[],"call":["@app flags merge ","@app switches ","@app flags ","@app flags_declaration_order + ","@app switches_declaration_order ","@app flags_declaration_order "]}," GLI Commands HelpModules GlobalHelpFormat format":{"type":"method","name":"format","children":[],"call":["GLOBAL_HELP  result "," binding ","OptionsFormatter  new format ","OptionsFormatter  new "," global_flags_and_switches ","stringio string ","command_formatter output ","StringIO  new ","ListFormatter  new ","command description ","(send\n  (lvar :command) :name) flatten join ","(send\n  (lvar :command) :name) flatten "," Array ","command aliases ","command name ","@app commands values sort reject map ","@app commands values sort reject ","@app commands values sort ","@app commands values ","@app commands ","@app program_desc ","@sorter call map ","@sorter call ","@app commands_declaration_order reject ","@app commands_declaration_order ","wrapper wrap ","@wrapper_class new ","Terminal  instance size [] ","Terminal  instance size ","Terminal  instance ","@app program_long_desc ","StringIO  new  string ","ListFormatter  new  output ","@app stringio string  values sort reject map ","@app stringio string  values sort reject ","@app stringio string  values sort ","@app stringio string  values ","@app stringio string  ","@app @app program_desc  ","@app stringio string _declaration_order reject ","@app stringio string _declaration_order ","@wrapper_class new  wrap ","@@wrapper_class new _class new ","@app @app program_long_desc  "]}," GLI Commands HelpModules GlobalHelpFormat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI Commands HelpModules CommandHelpFormat sorted_synopses":{"type":"method","name":"sorted_synopses","children":[],"call":["synopses_command [] <=> ","synopses_command [] ","synopses_command [] name == ","@command get_default_command ","synopses_command [] name ","synopses_command keys sort ","synopses_command keys ","synopses_command []= "," command_with_subcommand_usage ","@command get_default_command == ","@command commands each ","@command commands ","@command get_@command get_default_command == _command ","@command get_@command get_default_command == _command == "]}," GLI Commands HelpModules CommandHelpFormat format_subcommands":{"type":"method","name":"format_subcommands","children":[],"call":["(send\n  (send\n    (const nil :StringIO) :new) :tap) string ","formatter output ","StringIO  new tap ","StringIO  new ","ListFormatter  new ","commands_array unshift ","command default_description ","command has_action? ","cmd description ","cmd names ","cmd description + ","command get_default_command == ","cmd name ","command get_default_command ","command commands values sort map ","command commands values sort ","command commands values ","command commands "," String + "," String ","@sorter call map ","@sorter call ","command commands_declaration_order ","ListFormatter  new  output "]}," GLI Commands HelpModules CommandHelpFormat global_flags_and_switches":{"type":"method","name":"global_flags_and_switches","children":[],"call":["@app flags merge ","@app switches ","@app flags "]}," GLI Commands HelpModules CommandHelpFormat path_to_command":{"type":"method","name":"path_to_command","children":[],"call":["path join ","c parent ","path unshift ","c name ","c kind_of? ","c parent  parent ","c parent  name ","c parent  kind_of? "]}," GLI Commands HelpModules CommandHelpFormat basic_usage":{"type":"method","name":"basic_usage","children":[],"call":["usage << "," global_flags_and_switches empty? "," global_flags_and_switches "," path_to_command ","@basic_invocation dup "," flags_and_switches empty? "," flags_and_switches ","@basic_invocation dup  << "]}," GLI Commands HelpModules CommandHelpFormat command_with_subcommand_usage":{"type":"method","name":"command_with_subcommand_usage","children":[],"call":["usage << ","sub name to_s ","sub name ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :all_names\n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :all_names) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :all_names\n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :all_names) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort ","(send\n  (lvar :sub_options) :map) map ","(send\n  (lvar :all_names) :map) join ","CommandLineOption  name_as_string + ","option argument_name ","option kind_of? ","CommandLineOption  name_as_string ","all_names map ","(send\n  (lvar :option) :name) flatten "," Array ","option aliases ","option name ","sub_options map ","o associated_command == ","o associated_command ","@command flags merge select ","@command flags merge ","@command switches ","@command flags "," basic_usage "," format_arg_name ","ArgNameFormatter  new format ","sub arguments_options ","sub arguments_description ","ArgNameFormatter  new ","sub flags merge ","sub switches ","sub flags ","@app subcommand_option_handling_strategy == ","@app subcommand_option_handling_strategy ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :_))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :_)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :_))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :_)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort ","(send\n  (send\n    (lvar :option) :names_and_aliases) :map) join ","option names_and_aliases map ","option names_and_aliases "," basic_usage  << ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :(send\n  (lvar :option) :name) flatten \n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :(send\n  (lvar :option) :name) flatten ) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub flags merge ) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :all_names\n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :all_names) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :(send\n  (lvar :option) :name) flatten \n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :(send\n  (lvar :option) :name) flatten ) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort ","(send\n  (block\n    (send\n      (lvar :sub flags merge ) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (begin\n      (lvasgn :all_names\n        (send\n          (array\n            (send\n              (lvar :option) :name)\n            (send nil :Array\n              (send\n                (lvar :option) :aliases))) :flatten))\n      (send\n        (block\n          (send\n            (lvar :all_names) :map)\n          (args\n            (arg :_))\n          (send\n            (send\n              (const nil :CommandLineOption) :name_as_string\n              (lvar :_)\n              (false)) :+\n            (begin\n              (if\n                (send\n                  (lvar :option) :kind_of?\n                  (const nil :Flag))\n                (dstr\n                  (str \" \")\n                  (begin\n                    (send\n                      (lvar :option) :argument_name)))\n                (str \"\"))))) :join\n        (str \"|\")))) :map) sort ","(send\n  (lvar :sub flags merge ) :map) map ","(send\n  (lvar :(send\n  (lvar :option) :name) flatten ) :map) join ","(send\n  (lvar :option) :name) flatten  map ","sub flags merge  map "," basic_ basic_usage  ","(send\n  (block\n    (send\n      (lvar :sub flags merge ) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :_))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :_)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub flags merge ) :map)\n    (args\n      (arg :option_name)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :_))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :_)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort "]}," GLI Commands HelpModules CommandHelpFormat format":{"type":"method","name":"format","children":[],"call":["COMMAND_HELP  result "," binding ","synopses unshift ","@command has_action? "," sorted_synopses ","synopses << ","@command commands empty? ","@command commands ","one_line_usage << ","@command arguments_description "," basic_usage "," format_subcommands ","OptionsFormatter  new format ","OptionsFormatter  new ","Hash  [] ","option associated_command == ","option associated_command ","@command topmost_ancestor flags merge select ","@command topmost_ancestor flags merge ","@command topmost_ancestor switches ","@command topmost_ancestor ","@command topmost_ancestor flags ","TextWrapper  new ","Terminal  instance size [] ","Terminal  instance size ","Terminal  instance ","4 + + ","4 + ","@command name to_s size ","@command name to_s ","@command name ","@synopsis_formatter synopses_for_command "," flags_and_switches ","@wrapper_class new "," format_examples ","(send\n  (send\n    (send\n      (ivar :@command) :topmost_ancestor) :flags_declaration_order) :+\n  (send\n    (send\n      (ivar :@command) :topmost_ancestor) :switches_declaration_order)) select ","@command topmost_ancestor flags_declaration_order + ","@command topmost_ancestor switches_declaration_order ","@command topmost_ancestor flags_declaration_order "," sorted_synopses  unshift ","@synopsis_formatter synopses_for_command  unshift "," sorted_ sorted_synopses  "," sorted_@synopsis_formatter synopses_for_command  "," sorted_synopses  << ","@synopsis_formatter synopses_for_command  << "," basic_usage  << ","@synopsis_formatter  sorted_synopses _for_command ","@synopsis_formatter @synopsis_formatter synopses_for_command _for_command "," Hash  []  ","@TextWrapper  new _class new ","@@wrapper_class new _class new "]}," GLI Commands HelpModules CommandHelpFormat initialize":{"type":"method","name":"initialize","children":[],"call":["synopsis_formatter_class new "," flags_and_switches "]}," GLI Commands Help find_command":{"type":"method","name":"find_command","children":[],"call":["(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :select) first ","_ == ","(send\n  (lvar :command) :name) flatten map any? ","(send\n  (lvar :command) :name) flatten map ","(send\n  (lvar :command) :name) flatten "," Array ","command aliases ","command name ","base commands values select ","base commands values ","base commands "]}," GLI Commands Help unknown_command":{"type":"method","name":"unknown_command","children":[],"call":["error puts ","command nil? "]}," GLI Commands Help show_help":{"type":"method","name":"show_help","children":[],"call":["out puts ","HelpModules CommandHelpFormat  new format ","HelpModules CommandHelpFormat  new ","File  basename to_s ","File  basename "," unknown_command "," find_command ","arguments shift ","arguments empty? ! ","arguments empty? ","HelpModules GlobalHelpFormat  new format ","HelpModules GlobalHelpFormat  new ","command nil? ","command_finder find_command ","options [] ","help_output nil? ","HelpModules HelpCompletionFormat  new format ","HelpModules HelpCompletionFormat  new ","HelpModules CommandFinder  new ","@app exe_name to_s ","@app exe_name ","File  basearguments shift  to_s ","File  basearguments shift  "," unknown_ find_command  "," unknown_command_finder find_command  "," find_ find_command  "," find_command_finder find_command  "," find_command  nil? ","command_finder find_command  nil? "," find_command _finder find_ find_command  ","command_finder find_command _finder find_command_finder find_command  ","HelpModules CommandFinder  new  find_command ","HelpModules HelpCompletionFormat  new format  nil? ","@app exe_arguments shift  to_s ","@app exe_arguments shift  "]}," GLI Commands Help initialize":{"type":"method","name":"initialize","children":[],"call":[" show_help "," action "," switch "," desc "," puts ","@app version_string ","@app exe_name ","global_options [] ! ","global_options [] ","SYNOPSIS_FORMATTERS  [] ","@app synopsis_format_type ","WRAPPERS  [] ","@app help_text_wrap_type ","SORTERS  [] ","@app help_sort_type ","Argument  new "]}," GLI Commands Doc any_commands?":{"type":"method","name":"any_commands?","children":[],"call":["command commands empty? ! ","command commands empty? ","command commands "]}," GLI Commands Doc any_options?":{"type":"method","name":"any_options?","children":[],"call":["options empty? ! ","options empty? ","context flags values + ","context switches values ","context switches ","context flags values ","context flags "," command_flags + "," command_switches "," command_flags ","context kind_of? ","context flags values +  empty? ! "," command_flags +  empty? ! ","context flags values +  empty? "," command_flags +  empty? "]}," GLI Commands Doc document_flags_and_switches":{"type":"method","name":"document_flags_and_switches","children":[],"call":["document_listener switch ","switch negatable ","switch long_description ","switch description "," Array ","switch aliases ","switch name ","switches each ","document_listener flag ","flag type ","flag must_match ","flag argument_name ","flag default_value ","flag long_description ","flag description ","flag aliases ","flag name ","flags each ","flag safe_default_value "]}," GLI Commands Doc command_switches":{"type":"method","name":"command_switches","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :command) :topmost_ancestor) :switches) :values) :select) sort "," by_name ","switch associated_command == ","switch associated_command ","command topmost_ancestor switches values select ","command topmost_ancestor switches values ","command topmost_ancestor switches ","command topmost_ancestor ","command switches values sort ","command switches values ","command switches ","@subcommand_option_handling_strategy == "]}," GLI Commands Doc command_flags":{"type":"method","name":"command_flags","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :command) :topmost_ancestor) :flags) :values) :select) sort "," by_name ","flag associated_command == ","flag associated_command ","command topmost_ancestor flags values select ","command topmost_ancestor flags values ","command topmost_ancestor flags ","command topmost_ancestor ","command flags values sort ","command flags values ","command flags ","@subcommand_option_handling_strategy == "]}," GLI Commands Doc by_name":{"type":"method","name":"by_name","children":[],"call":["a name to_s <=> ","b name to_s ","b name ","a name to_s ","a name "," lambda "]}," GLI Commands Doc document_commands":{"type":"method","name":"document_commands","children":[],"call":["document_listener default_command ","context get_default_command ","document_listener end_command ","command name ","document_listener end_commands "," any_commands? "," document_commands ","document_listener commands ","document_listener end_options "," any_options? "," document_flags_and_switches "," command_switches "," command_flags ","document_listener options ","document_listener command ","command arguments_description ","command long_description ","command description "," Array ","command aliases ","(send\n  (send\n    (send\n      (lvar :context) :commands) :values) :reject) sort each ","(send\n  (send\n    (send\n      (lvar :context) :commands) :values) :reject) sort "," by_name ","_ nodoc ","context commands values reject ","context commands values ","context commands "," call_command_method_being_backwards_compatible "]}," GLI Commands Doc format_class":{"type":"method","name":"format_class","children":[],"call":[" raise ","context const_get ","format_name split reduce ","format_name split ","FORMATS  fetch "]}," GLI Commands Doc DocumentListener abstract!":{"type":"method","name":"abstract!","children":[],"call":[" raise "]}," GLI Commands Doc DocumentListener end_command":{"type":"method","name":"end_command","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener command":{"type":"method","name":"command","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener default_command":{"type":"method","name":"default_command","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener switch":{"type":"method","name":"switch","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener flag":{"type":"method","name":"flag","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener end_commands":{"type":"method","name":"end_commands","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener commands":{"type":"method","name":"commands","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener end_options":{"type":"method","name":"end_options","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener options":{"type":"method","name":"options","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener version":{"type":"method","name":"version","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener program_desc":{"type":"method","name":"program_desc","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener ending":{"type":"method","name":"ending","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener beginning":{"type":"method","name":"beginning","children":[],"call":[" abstract! "]}," GLI Commands Doc document":{"type":"method","name":"document","children":[],"call":["document_listener ending ","document_listener end_commands "," document_commands ","document_listener commands ","document_listener end_options "," any_options? "," document_flags_and_switches ","@app switches values sort "," by_name ","@app switches values ","@app switches ","@app flags values sort ","@app flags values ","@app flags ","document_listener options ","document_listener version ","@app version_string ","document_listener program_desc ","@app program_desc ","document_listener beginning ","document_listener program_long_desc ","@app program_long_desc ","@app program_long_desc nil? ","@app program_desc nil? "]}," GLI Commands Doc nodoc":{"type":"method","name":"nodoc","children":[],"call":[]}," GLI Commands Doc initialize":{"type":"method","name":"initialize","children":[],"call":[" document "," format_class new "," format_class ","options [] "," action "," flag "," arg_name "," default_value "," desc ","@app subcommand_option_handling_strategy "]}," GLI Commands CompoundCommand find_command":{"type":"method","name":"find_command","children":[],"call":[]}," GLI Commands CompoundCommand check_for_unknown_commands!":{"type":"method","name":"check_for_unknown_commands!","children":[],"call":[" raise ","unknown_commands join ","unknown_commands empty? ","command_names map - ","command_names map ","base commands keys map ","base commands keys ","base commands ","command_names map -  join ","unbase commands keys map  join ","command_names map -  empty? ","unbase commands keys map  empty? "]}," GLI Commands CompoundCommand execute":{"type":"method","name":"execute","children":[],"call":["command execute ","@wrapped_commands each ","@commands each "]}," GLI Commands CompoundCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" class find_command "," class ","command_names map "," check_for_unknown_commands! ","configuration [] ","options merge ","configuration keys first ","configuration keys ","configuration []  map ","command_configuration keys first s map "]}," GLI CommandSupport find_explicit_subcommand":{"type":"method","name":"find_explicit_subcommand","children":[],"call":["name == ","(send\n  (lvar :command) :name) flatten map any? ","(send\n  (lvar :command) :name) flatten map ","(send\n  (lvar :command) :name) flatten "," Array ","command aliases ","command name "," commands values find "," commands values "," commands ","arguments first ","arguments empty? "," Array  first "," Array  empty? "]}," GLI CommandSupport find_subcommand":{"type":"method","name":"find_subcommand","children":[],"call":[" find_explicit_subcommand ","@default_command to_s ","@default_command nil? ! ","@default_command nil? ","arguments [] "," find_explicit_ find_explicit_subcommand  "]}," GLI CommandSupport have_subcommands?":{"type":"method","name":"have_subcommands?","children":[],"call":[" commands empty? ! "," commands empty? "," commands "]}," GLI CommandSupport am_subcommand?":{"type":"method","name":"am_subcommand?","children":[],"call":[" parent kind_of? "," parent "]}," GLI CommandSupport generate_error_action":{"type":"method","name":"generate_error_action","children":[],"call":[" raise "," name "," have_subcommands? ","arguments [] ","arguments size > ","arguments size "," am_subcommand? "," lambda "," commands keys join "," commands keys "," commands "]}," GLI CommandSupport get_action":{"type":"method","name":"get_action","children":[],"call":[" generate_error_action "]}," GLI CommandSupport get_default_command":{"type":"method","name":"get_default_command","children":[],"call":[]}," GLI CommandSupport has_action?":{"type":"method","name":"has_action?","children":[],"call":["@action ! ! ","@action ! "]}," GLI CommandSupport topmost_ancestor":{"type":"method","name":"topmost_ancestor","children":[],"call":["some_command parent ","some_command kind_of? "," class ","some_command parent  parent ","some_command parent  kind_of? "]}," GLI CommandSupport execute":{"type":"method","name":"execute","children":[],"call":[" get_action call "," get_action ","subcommand execute "," find_subcommand "]}," GLI CommandSupport default_description":{"type":"method","name":"default_description","children":[],"call":[]}," GLI CommandSupport commands":{"type":"method","name":"commands","children":[],"call":[]}," GLI CommandSupport switches":{"type":"method","name":"switches","children":[],"call":[]}," GLI CommandSupport flags":{"type":"method","name":"flags","children":[],"call":[]}," GLI CommandSupport usage":{"type":"method","name":"usage","children":[],"call":["  + "," switches empty? ! "," switches empty? "," switches "," flags empty? ! "," flags empty? "," flags "," name to_s "," name "]}," GLI CommandSupport default_value":{"type":"method","name":"default_value","children":[],"call":[" parent default_value "," parent "," parent kind_of? "," send_declarations_to_parent? "]}," GLI CommandSupport arg_name":{"type":"method","name":"arg_name","children":[],"call":[" parent arg_name "," parent "," parent kind_of? "," send_declarations_to_parent? "]}," GLI CommandSupport long_desc":{"type":"method","name":"long_desc","children":[],"call":[" parent long_desc "," parent "," parent kind_of? "," send_declarations_to_parent? "]}," GLI CommandSupport desc":{"type":"method","name":"desc","children":[],"call":[" parent desc "," parent "," parent kind_of? "," send_declarations_to_parent? "]}," GLI CommandSupport switch":{"type":"method","name":"switch","children":[],"call":["new_switch associated_command= "," parent switch "," parent "," parent kind_of? "," send_declarations_to_parent? "," parent switch  associated_command= "]}," GLI CommandSupport flag":{"type":"method","name":"flag","children":[],"call":["new_flag associated_command= "," parent flag "," parent "," parent kind_of? "," send_declarations_to_parent? "," parent flag  associated_command= "]}," GLI CommandSupport names":{"type":"method","name":"names","children":[],"call":[" all_forms "]}," GLI CommandSupport skips_around":{"type":"method","name":"skips_around","children":[],"call":[]}," GLI CommandSupport skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI CommandSupport skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI CommandSupport arguments_description":{"type":"method","name":"arguments_description","children":[],"call":[]}," GLI CommandSupport nodoc":{"type":"method","name":"nodoc","children":[],"call":[" description nil? "," description "]}," GLI CommandSupport context_description":{"type":"method","name":"context_description","children":[],"call":[" name "]}," GLI CommandLineToken negatable?":{"type":"method","name":"negatable?","children":[],"call":[]}," GLI CommandLineOption name_as_string":{"type":"method","name":"name_as_string","children":[],"call":[]}," GLI CommandLineOption initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," GLI Command default_desc":{"type":"method","name":"default_desc","children":[],"call":[]}," GLI Command default_command":{"type":"method","name":"default_command","children":[],"call":[]}," GLI AppSupport call_command":{"type":"method","name":"call_command","children":[],"call":[" post_block call "," post_block ","command skips_post ","code call ","nested_arounds call ","outer_around call ","inner_around call "," lambda "," around_blocks inject "," around_blocks ","command skips_around ","command execute ","arg dup ","arguments map "," around_block call "," around_block ","parsing_result arguments map ","parsing_result arguments ","parsing_result command_options ","parsing_result global_options ","parsing_result command ","parsing_result command  skips_post ","parsing_result command  skips_around ","parsing_result command  execute ","parsing_result command_parsing_result command_options  ","parsing_result parsing_result command _options ","parsing_result global_parsing_result command_options  ","parsing_result parsing_result global_options  ","parsing_result parsing_result command  "]}," GLI AppSupport error_message":{"type":"method","name":"error_message","children":[],"call":["ex message "]}," GLI AppSupport regular_error_handling?":{"type":"method","name":"regular_error_handling?","children":[],"call":["@error_block call ","ex exit_code == ","ex exit_code ","ex respond_to? "]}," GLI AppSupport proceed?":{"type":"method","name":"proceed?","children":[],"call":[" pre_block call "," pre_block ","command skips_pre ","parsing_result command skips_pre ","parsing_result command "]}," GLI AppSupport add_help_switch_if_needed":{"type":"method","name":"add_help_switch_if_needed","children":[],"call":[" switch "," desc ","an_alias to_s == ","an_alias to_s ","(send\n  (send nil :Array\n    (send\n      (lvar :switch) :aliases)) :+\n  (array\n    (send\n      (lvar :switch) :name))) find "," Array + ","switch name "," Array ","switch aliases ","switches values find ","switches values ","target switch ","target desc ","an_alias == ","switch names_and_aliases map find ","switch names_and_aliases map ","switch names_and_aliases ","target switches values find ","target switches values ","target switches "]}," GLI AppSupport convert_to_openstruct_if_needed":{"type":"method","name":"convert_to_openstruct_if_needed","children":[],"call":["Options  new "]}," GLI AppSupport handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["ex exit_code ","ex extend "," raise ","ENV  [] == ","ENV  [] "," commands [] execute ","command name to_s ","command name ","command nil? "," commands [] "," commands "," stderr puts "," stderr ","ex kind_of? "," error_message "," regular_error_handling? ","command name_for_help "," output_error_message ","ex kind_of? ! "]}," GLI AppSupport override_default":{"type":"method","name":"override_default","children":[],"call":["token default_value= ","config [] ","tokens each ","config [] nil? "]}," GLI AppSupport override_command_defaults":{"type":"method","name":"override_command_defaults","children":[],"call":[" override_command_defaults ","command commands "," override_default ","command topmost_ancestor switches ","command topmost_ancestor ","command topmost_ancestor flags ","(or\n  (send\n    (lvar :config) :[]\n    (str \"commands\"))\n  (hash)) [] ","config [] ","command nil? ","command_name == ","command_list each ","command switches ","command flags ","@subcommand_option_handling_strategy == "]}," GLI AppSupport override_defaults_based_on_config":{"type":"method","name":"override_defaults_based_on_config","children":[],"call":[" override_command_defaults "," commands "," override_default "," switches "," flags "]}," GLI AppSupport around_blocks":{"type":"method","name":"around_blocks","children":[],"call":[]}," GLI AppSupport post_block":{"type":"method","name":"post_block","children":[],"call":["Proc  new "]}," GLI AppSupport pre_block":{"type":"method","name":"pre_block","children":[],"call":["Proc  new "]}," GLI AppSupport commands":{"type":"method","name":"commands","children":[],"call":["GLI Commands Doc  new ","GLI Commands Help  new ","@commands_declaration_order << ","@commands [] ","@commands ! "]}," GLI AppSupport switches":{"type":"method","name":"switches","children":[],"call":[]}," GLI AppSupport flags":{"type":"method","name":"flags","children":[],"call":[]}," GLI AppSupport included":{"type":"method","name":"included","children":[],"call":[]}," GLI AppSupport stderr":{"type":"method","name":"stderr","children":[],"call":[]}," GLI AppSupport clear_nexts":{"type":"method","name":"clear_nexts","children":[],"call":[]}," GLI AppSupport parse_config":{"type":"method","name":"parse_config","children":[],"call":["config merge! ","YAML  load ","File  open "," require ","File  exist? "]}," GLI AppSupport copy_options_to_aliased_versions":{"type":"method","name":"copy_options_to_aliased_versions","children":[],"call":["command copy_options_to_aliases "," copy_options_to_aliases "]}," GLI AppSupport accepts":{"type":"method","name":"accepts","children":[],"call":[]}," GLI AppSupport config_file_name":{"type":"method","name":"config_file_name","children":[],"call":[]}," GLI AppSupport run":{"type":"method","name":"run","children":[],"call":[" handle_exception "," call_command "," proceed? "," convert_to_openstruct_if_needed "," copy_options_to_aliased_versions ","GLIOptionParser  new parse_options ","GLIOptionParser  new "," accepts "," switches "," flags "," commands "," add_help_switch_if_needed "," override_defaults_based_on_config "," parse_config "," commands [] ","args dup ","ex command_in_context ","ex respond_to? ","the_command nil? "," raise ","parsing_result command ","parsing_result convert_to_openstruct! ","gli_option_parser parse_options "," subcommand_option_handling_strategy "," argument_handling_strategy "," autocomplete "," exit_now! "," copy_ convert_to_openstruct_if_needed _to_aliased_versions ","GLIOptionParser  new parse_ convert_to_openstruct_if_needed  ","args dup  dup ","ex command_in_context  nil? ","parsing_result command  nil? ","gli_option_parser parse_options  command ","gli_option_parser parse_options  convert_to_openstruct! ","gli_option_parser parse_ convert_to_openstruct_if_needed  ","GLIOptionParser  new  parse_options "]}," GLI AppSupport get_default_command":{"type":"method","name":"get_default_command","children":[],"call":[]}," GLI AppSupport version_string":{"type":"method","name":"version_string","children":[],"call":[]}," GLI AppSupport reset":{"type":"method","name":"reset","children":[],"call":[" clear_nexts "," flags clear "," flags "," switches clear "," switches "," commands clear "," commands "]}," GLI AppSupport context_description":{"type":"method","name":"context_description","children":[],"call":[]}," GLI AppSupport error_device=":{"type":"method","name":"error_device=","children":[],"call":[]}," GLI App default_command":{"type":"method","name":"default_command","children":[],"call":["command to_sym "]}," GLI App program_name":{"type":"method","name":"program_name","children":[],"call":[" warn "]}," GLI App help_now!":{"type":"method","name":"help_now!","children":[{"type":"method","name":"exit_code","children":[],"asgn":[],"call":[]}],"call":[" raise ","OptionParser ParseError  new "]}," GLI App exit_now!":{"type":"method","name":"exit_now!","children":[],"call":[" raise ","CustomExit  new "]}," GLI App accept":{"type":"method","name":"accept","children":[],"call":[" accepts []= "," accepts "]}," GLI App use_openstruct":{"type":"method","name":"use_openstruct","children":[],"call":[]}," GLI App version":{"type":"method","name":"version","children":[],"call":[" switch "," desc "]}," GLI App on_error":{"type":"method","name":"on_error","children":[],"call":[]}," GLI App around":{"type":"method","name":"around","children":[],"call":["@around_blocks << "]}," GLI App post":{"type":"method","name":"post","children":[],"call":[]}," GLI App pre":{"type":"method","name":"pre","children":[],"call":[]}," GLI App config_file":{"type":"method","name":"config_file","children":[],"call":[" commands []= ","InitConfig  new "," switches "," flags "," commands ","File  join ","File  expand_path ","ENV  [] ","filename =~ ","@commands_declaration_order << "," commands [] "]}," GLI App skips_around":{"type":"method","name":"skips_around","children":[],"call":[]}," GLI App skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI App skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI App program_desc":{"type":"method","name":"program_desc","children":[],"call":[]}," GLI App commands_from":{"type":"method","name":"commands_from","children":[],"call":[" require ","file =~ ","File  join ","Dir  entries each ","Dir  entries ","File  exists? ","$LOAD_PATH each "," load_commands ","Pathname  new absolute? ","Pathname  new ","File  exist? ","Dir  entries sort each ","Dir  entries sort ","File  join  =~ "]}," GLI AppSupport around_block":{"type":"method","name":"around_block","children":[],"call":["code call ","Proc  new "]}," GLI Commands HelpModules HelpCompletionFormat format":{"type":"method","name":"format","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (send\n          (block\n            (send\n              (send\n                (send\n                  (lvar :base) :commands) :values) :map)\n            (args\n              (arg :command))\n            (array\n              (send\n                (lvar :command) :name)\n              (send\n                (lvar :command) :aliases))) :flatten) :compact) :map\n      (block-pass\n        (sym :to_s))) :sort) :select) join ","command_name =~ ","prefix_to_match nil? ","(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :map) flatten compact map sort select ","(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :map) flatten compact map sort ","(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :map) flatten compact map ","(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :map) flatten compact ","(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :map) flatten ","command aliases ","command name ","base commands values map ","base commands values ","base commands ","@command_finder last_unknown_command ","base nil? ","@command_finder last_found_command ","@command_finder find_command ","@args shift ","(send\n  (send\n    (send\n      (send\n        (send\n          (block\n            (send\n              (send\n                (send\n                  (lvar :@command_finder last_found_command ) :commands) :values) :map)\n            (args\n              (arg :command))\n            (array\n              (send\n                (lvar :command) :name)\n              (send\n                (lvar :command) :aliases))) :flatten) :compact) :map\n      (block-pass\n        (sym :to_s))) :sort) :select) join ","(send\n  (send\n    (send\n      (send\n        (send\n          (block\n            (send\n              (send\n                (send\n                  (lvar :@command_finder find_command ) :commands) :values) :map)\n            (args\n              (arg :command))\n            (array\n              (send\n                (lvar :command) :name)\n              (send\n                (lvar :command) :aliases))) :flatten) :compact) :map\n      (block-pass\n        (sym :to_s))) :sort) :select) join ","(send\n  (send\n    (send\n      (send\n        (send\n          (block\n            (send\n              (send\n                (send\n                  (lvar :base) :commands) :values) :map)\n            (args\n              (arg :command))\n            (array\n              (send\n                (lvar :command) :@args shift )\n              (send\n                (lvar :command) :aliases))) :flatten) :compact) :map\n      (block-pass\n        (sym :to_s))) :sort) :select) join ","command_@args shift  =~ ","@command_finder last_unknown_command  nil? ","(send\n  (send\n    (send\n      (lvar :@command_finder last_found_command ) :commands) :values) :map) flatten compact map sort select ","(send\n  (send\n    (send\n      (lvar :@command_finder find_command ) :commands) :values) :map) flatten compact map sort select ","(send\n  (send\n    (send\n      (lvar :@command_finder last_found_command ) :commands) :values) :map) flatten compact map sort ","(send\n  (send\n    (send\n      (lvar :@command_finder find_command ) :commands) :values) :map) flatten compact map sort ","(send\n  (send\n    (send\n      (lvar :@command_finder last_found_command ) :commands) :values) :map) flatten compact map ","(send\n  (send\n    (send\n      (lvar :@command_finder find_command ) :commands) :values) :map) flatten compact map ","(send\n  (send\n    (send\n      (lvar :@command_finder last_found_command ) :commands) :values) :map) flatten compact ","(send\n  (send\n    (send\n      (lvar :@command_finder find_command ) :commands) :values) :map) flatten compact ","(send\n  (send\n    (send\n      (lvar :@command_finder last_found_command ) :commands) :values) :map) flatten ","(send\n  (send\n    (send\n      (lvar :@command_finder find_command ) :commands) :values) :map) flatten ","command @args shift  ","@command_finder last_found_command  commands values map ","@command_finder find_command  commands values map ","@command_finder last_found_command  commands values ","@command_finder find_command  commands values ","@command_finder last_found_command  commands ","@command_finder find_command  commands ","@command_finder last_found_command  nil? ","@command_finder find_command  nil? "]}," GLI Commands HelpModules HelpCompletionFormat initialize":{"type":"method","name":"initialize","children":[],"call":["@command_finder squelch_stderr= "]}," GLI Commands HelpModules CommandHelpFormat format_arg_name":{"type":"method","name":"format_arg_name","children":[],"call":["  + ","command arguments_options include? ","command arguments_options ","command arguments_description "," String strip == "," String strip "," String ","command arguments_command arguments_description ription "]}," GLI Commands HelpModules CommandFinder unknown_command?":{"type":"method","name":"unknown_command?","children":[],"call":["error puts ","command nil? ","@app exe_name ","File  basename "]}," GLI Commands HelpModules CommandFinder find_command_from_base":{"type":"method","name":"find_command_from_base","children":[],"call":["(send\n  (send\n    (send\n      (lvar :base) :commands) :values) :select) first ","_ == ","(send\n  (lvar :command) :name) flatten map any? ","(send\n  (lvar :command) :name) flatten map ","(send\n  (lvar :command) :name) flatten "," Array ","command aliases ","command name ","base commands values select ","base commands values ","base commands "]}," GLI Commands HelpModules CommandFinder find_command":{"type":"method","name":"find_command","children":[],"call":[" unknown_command? "," find_command_from_base ","@arguments shift ","@arguments empty? ! ","@arguments empty? "," unknown_ find_command_from_base ? "," find_ find_command_from_base _from_base "]}," GLI Commands HelpModules CommandFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI CommandSupport arguments_options":{"type":"method","name":"arguments_options","children":[],"call":[]}," GLI App preserve_argv":{"type":"method","name":"preserve_argv","children":[],"call":[]}," GLI Terminal solaris?":{"type":"method","name":"solaris?","children":[],"call":[]}," GLI OptionParsingResult to_a":{"type":"method","name":"to_a","children":[],"call":[]}," GLI OptionParsingResult convert_to_openstruct!":{"type":"method","name":"convert_to_openstruct!","children":[],"call":["Options  new "]}," GLI OptionParserFactory add_help_switches_to_command":{"type":"method","name":"add_help_switches_to_command","children":[],"call":[]}," GLI OptionParserFactory set_defaults":{"type":"method","name":"set_defaults","children":[],"call":["options_hash []= ","option default_value ","options_hash [] nil? ","options_hash [] ","(lvar :option_name) each ","option_name to_sym ","option names_and_aliases each ","option names_and_aliases ","options_by_name values each ","options_by_name values ","options_by_name each "]}," GLI OptionParserFactory options_hash_with_defaults_set!":{"type":"method","name":"options_hash_with_defaults_set!","children":[],"call":[" set_defaults "]}," GLI OptionParserFactory for_command":{"type":"method","name":"for_command","children":[],"call":[]}," GLI GLIOptionParser LegacyCommandOptionParser find_subcommand":{"type":"method","name":"find_subcommand","children":[],"call":[" find_subcommand ","results [] ","finder find_command ","default_command to_s ","arguments [] ","CommandFinder  new ","command commands ","command get_default_command ","arguments first ","arguments empty? "," Array ","CommandFinder  new  find_command ","command get_default_command  to_s "," Array  [] ","command get_command get_default_command  "," Array  first "," Array  empty? "]}," GLI GLIOptionParser LegacyCommandOptionParser parse!":{"type":"method","name":"parse!","children":[],"call":[" verify_required_options! ","parsing_result command_options ","command flags ","parsing_result arguments= ","parsing_result command= "," find_subcommand ","parsing_result arguments ","parsing_result command_options= ","option_parser_factory options_hash_with_defaults_set! ","option_block_parser parse! ","option_block_parser command= ","LegacyCommandOptionBlockParser  new "," error_handler ","OptionParserFactory  for_command ","parsing_result command ","parsing_result parsing_result command _options ","parsing_result command  flags ","parsing_result parsing_result command = "," find_subparsing_result command  ","parsing_result parsing_result command _options= ","OptionParserFactory  for_command  options_hash_with_defaults_set! ","LegacyCommandOptionBlockParser  new  parse! ","LegacyCommandOptionBlockParser  new  command= ","option_block_parser parsing_result command = ","OptionParserFactory  for_parsing_result command  ","parsing_result parsing_result command  "]}," GLI GLIOptionParser NormalCommandOptionParser parse!":{"type":"method","name":"parse!","children":[],"call":["parsing_result arguments= "," Array ","arguments compact ","parsing_result command= ","parsing_result command_options= ","this_command parent ","child_command_options []= ","parsed_command_options [] ","this_command kind_of? ","command class ","command parent ","command_finder find_command ","command get_default_command ","command get_default_command nil? ","arguments unshift "," verify_required_options! ","command flags ","arguments shift ","CommandFinder  new ","command commands ","parsed_command_options []= ","option_parser_factory options_hash_with_defaults_set! ","option_block_parser parse! ","parsing_result arguments ","option_block_parser command= ","CommandOptionBlockParser  new "," error_handler ","OptionParserFactory  for_command "," loop ","parsing_result command "," verify_arguments! ","argument_handling_strategy == ","parsing_result option_block_parser parse! = ","parsing_result parsing_result arguments = ","option_block_parser parse!  compact ","parsing_result arguments  compact ","parsing_result command_finder find_command = ","parsing_result parsing_result command = ","parsing_result parsed_command_options [] = ","parsing_result command_finder find_command _options= ","parsing_result parsing_result command _options= ","this_command parent  parent ","command parent  parent ","this_command_finder find_command  parent ","this_parsing_result command  parent ","child_parsed_command_options []  []= ","child_command_finder find_command _options []= ","child_parsing_result command _options []= ","parsed_parsed_command_options []  [] ","parsed_command_finder find_command _options [] ","parsed_parsing_result command _options [] ","this_command parent  kind_of? ","command parent  kind_of? ","this_command_finder find_command  kind_of? ","this_parsing_result command  kind_of? ","command_finder find_command  class ","parsing_result command  class ","command_finder find_command  parent ","parsing_result command  parent ","command_finder find_command _finder find_command_finder find_command  ","parsing_result command _finder find_parsing_result command  ","CommandFinder  new  find_command ","command_finder find_command  get_default_command_finder find_command  ","parsing_result command  get_default_parsing_result command  ","command_finder find_command  get_default_command_finder find_command  nil? ","parsing_result command  get_default_parsing_result command  nil? ","option_block_parser parse!  unshift ","parsing_result arguments  unshift ","command_finder find_command  flags ","parsing_result command  flags ","option_block_parser parse!  shift ","parsing_result arguments  shift ","command_finder find_command  command_finder find_command s ","parsing_result command  parsing_result command s ","parsed_parsed_command_options []  []= ","parsed_command_finder find_command _options []= ","parsed_parsing_result command _options []= ","OptionParserFactory  for_command  options_hash_with_defaults_set! ","CommandOptionBlockParser  new  parse! ","parsing_result option_block_parser parse!  ","parsing_result parsing_result arguments  ","option_block_parser command_finder find_command = ","option_block_parser parsing_result command = ","CommandOptionBlockParser  new  command= ","OptionParserFactory  for_command_finder find_command  ","OptionParserFactory  for_parsing_result command  ","parsing_result command_finder find_command  ","parsing_result parsing_result command  "," verify_option_block_parser parse! ! "," verify_parsing_result arguments ! "]}," GLI GLIOptionParser NormalCommandOptionParser error_handler":{"type":"method","name":"error_handler","children":[],"call":[" raise ","UnknownCommandArgument  new "," lambda "]}," GLI GLIOptionParser NormalCommandOptionParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI GLIOptionParser GlobalOptionParser verify_required_options!":{"type":"method","name":"verify_required_options!","children":[],"call":[" raise ","(send\n  (lvar :missing_required_options) :map) join ","option name ","missing_required_options map ","missing_required_options empty? ","options [] != ","options [] ","flags values select reject ","flags values select ","flags values ","MissingRequiredArgumentsException  new ","missing_required_options sort! "]}," GLI GLIOptionParser GlobalOptionParser parse!":{"type":"method","name":"parse!","children":[],"call":[" verify_required_options! ","parsing_result global_options ","command_name == ","parsing_result command= ","@command_finder find_command ","parsing_result arguments shift ","parsing_result arguments ","parsing_result global_options [] ","parsing_result global_options= ","@option_parser_factory options_hash_with_defaults_set! ","parsing_result arguments= ","GLIOptionBlockParser  new parse! ","GLIOptionBlockParser  new ","parsing_result command "," raise ","UnknownCommand  new ","command class name ","command class ","command is_a? ","@options [] call ","command_name to_sym ","@options [] ","parsing_result arguments shift  == ","@options [] call _name == ","parsing_result @options [] call = ","@@options [] call _finder find_@options [] call  ","parsing_result @options [] call  ","@options [] call  class name ","@options [] call  class ","@options [] call  is_a? ","parsing_result arguments shift  to_sym ","@options [] call _name to_sym "]}," GLI GLIOptionParser GlobalOptionParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI LegacyCommandOptionBlockParser break_on_non_option?":{"type":"method","name":"break_on_non_option?","children":[],"call":[]}," GLI CommandOptionBlockParser do_parse":{"type":"method","name":"do_parse","children":[],"call":["args unshift ","unknown_options reverse each ","unknown_options reverse "," break_on_non_option? ","unknown_options << ","@option_parser_factory option_parser order! ","@option_parser_factory option_parser "]}," GLI CommandOptionBlockParser break_on_non_option?":{"type":"method","name":"break_on_non_option?","children":[],"call":[]}," GLI CommandOptionBlockParser command=":{"type":"method","name":"command=","children":[],"call":[]}," GLI GLIOptionBlockParser do_parse":{"type":"method","name":"do_parse","children":[],"call":["args unshift ","@option_parser_factory option_parser order! ","@option_parser_factory option_parser "]}," GLI GLIOptionBlockParser parse!":{"type":"method","name":"parse!","children":[],"call":["@exception_handler call ","ex args join ","ex args ","ex reason "," do_parse "]}," GLI GLIOptionBlockParser initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," lambda ","exception_klass_or_block kind_of? "]}," GLI Flag safe_default_value":{"type":"method","name":"safe_default_value","children":[],"call":[" default_value "]}," GLI Flag required?":{"type":"method","name":"required?","children":[],"call":[]}," GLI CommandException exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," GLI CommandException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI PreconditionFailed exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," GLI DSL switches_declaration_order":{"type":"method","name":"switches_declaration_order","children":[],"call":[]}," GLI DSL flags_declaration_order":{"type":"method","name":"flags_declaration_order","children":[],"call":[]}," GLI Commands RdocDocumentListener program_long_desc":{"type":"method","name":"program_long_desc","children":[],"call":["@io puts "]}," GLI Commands HelpModules VerbatimWrapper wrap":{"type":"method","name":"wrap","children":[],"call":[" String "]}," GLI Commands HelpModules VerbatimWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI Commands HelpModules TTYOnlyWrapper wrap":{"type":"method","name":"wrap","children":[],"call":["@proxy wrap "]}," GLI Commands HelpModules TTYOnlyWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["OneLineWrapper  new ","TextWrapper  new ","STDOUT  tty? ","NoWrappingWrapper  new "]}," GLI Commands HelpModules TerminalSynopsisFormatter synopses_for_command":{"type":"method","name":"synopses_for_command","children":[],"call":["CompactSynopsisFormatter  new synopses_for_command ","CompactSynopsisFormatter  new ","synopsis length > ","Terminal  instance size [] ","Terminal  instance size ","Terminal  instance ","synopsis length ","synopses any? ","FullSynopsisFormatter  new synopses_for_command ","FullSynopsisFormatter  new ","CompactSynopsisFormatter  new FullSynopsisFormatter  new synopses_for_command _for_command ","FullSynopsisFormatter  new synopses_for_command  any? ","FullSynopsisFormatter  new FullSynopsisFormatter  new synopses_for_command _for_command "]}," GLI Commands HelpModules TerminalSynopsisFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["@app exe_name to_s ","@app exe_name "]}," GLI Commands HelpModules OneLineWrapper wrap":{"type":"method","name":"wrap","children":[],"call":[" String gsub strip "," String gsub "," String "]}," GLI Commands HelpModules OneLineWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI Commands HelpModules FullSynopsisFormatter global_flags_and_switches":{"type":"method","name":"global_flags_and_switches","children":[],"call":["@app flags merge ","@app switches ","@app flags "]}," GLI Commands HelpModules FullSynopsisFormatter sorted_synopses":{"type":"method","name":"sorted_synopses","children":[],"call":["synopses_command [] <=> ","synopses_command [] ","synopses_command [] name == ","command get_default_command ","synopses_command [] name ","synopses_command keys sort ","synopses_command keys ","synopses_command []= "," command_with_subcommand_usage ","command get_default_command == ","command commands each ","command commands ","command get_command get_default_command == _command ","command get_command get_default_command == _command == "]}," GLI Commands HelpModules FullSynopsisFormatter command_with_subcommand_usage":{"type":"method","name":"command_with_subcommand_usage","children":[],"call":["usage << ","arg_name_doc length > ","arg_name_doc length ","ArgNameFormatter  new format strip ","ArgNameFormatter  new format ","sub arguments_options ","sub arguments_description ","ArgNameFormatter  new ","sub_options_doc length > ","sub_options_doc length "," sub_options_doc ","sub name to_s ","sub name ","sub flags merge ","sub switches ","sub flags ","o associated_command == ","o associated_command ","command flags merge select ","command flags merge ","command switches ","command flags ","@app subcommand_option_handling_strategy == ","@app subcommand_option_handling_strategy "," basic_usage ","sub arguments "," basic_usage  << ","ArgNameFormatter  new format strip  length > ","ArgNameFormatter  new format strip  length "," sub_options_doc  length > ","sub flags merge _doc length > "," sub_options_doc  length ","sub flags merge _doc length ","  sub_options_doc  "," sub flags merge _doc "," basic_ basic_usage  "]}," GLI Commands HelpModules FullSynopsisFormatter basic_usage":{"type":"method","name":"basic_usage","children":[],"call":["usage << ","@flags_and_switches empty? "," path_to_command "," global_flags_and_switches empty? "," global_flags_and_switches ","@basic_invocation dup ","@basic_invocation dup  << "]}," GLI Commands HelpModules FullSynopsisFormatter path_to_command":{"type":"method","name":"path_to_command","children":[],"call":["path join ","c parent ","path unshift ","c name ","c kind_of? ","c parent  parent ","c parent  name ","c parent  kind_of? "]}," GLI Commands HelpModules FullSynopsisFormatter sub_options_doc":{"type":"method","name":"sub_options_doc","children":[],"call":["(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :_)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :name))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :name)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort join strip ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :_)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :name))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :name)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort join ","(send\n  (block\n    (send\n      (lvar :sub_options) :map)\n    (args\n      (arg :_)\n      (arg :option))\n    (send\n      (block\n        (send\n          (send\n            (lvar :option) :names_and_aliases) :map)\n        (args\n          (arg :name))\n        (send\n          (send\n            (const nil :CommandLineOption) :name_as_string\n            (lvar :name)\n            (false)) :+\n          (begin\n            (if\n              (send\n                (lvar :option) :kind_of?\n                (const nil :Flag))\n              (dstr\n                (str \" \")\n                (begin\n                  (send\n                    (lvar :option) :argument_name)))\n              (str \"\"))))) :join\n      (str \"|\"))) :map) sort ","(send\n  (lvar :sub_options) :map) map ","(send\n  (send\n    (lvar :option) :names_and_aliases) :map) join ","CommandLineOption  name_as_string + ","option argument_name ","option kind_of? ","CommandLineOption  name_as_string ","option names_and_aliases map ","option names_and_aliases ","sub_options map ","(send\n  (lvar :sub_options) :map) sort join strip ","(send\n  (lvar :sub_options) :map) sort join ","(send\n  (lvar :sub_options) :map) sort ","option required? "]}," GLI Commands HelpModules FullSynopsisFormatter synopses_for_command":{"type":"method","name":"synopses_for_command","children":[],"call":["synopses unshift ","command has_action? "," sorted_synopses ","synopses << ","command commands empty? ","command commands ","one_line_usage << ","command arguments_description "," basic_usage ","ArgNameFormatter  new format strip ","ArgNameFormatter  new format ","command arguments ","command arguments_options ","ArgNameFormatter  new "," sorted_synopses  unshift "," sorted_ sorted_synopses  "," sorted_synopses  << "," basic_usage  << "]}," GLI Commands HelpModules FullSynopsisFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["@app exe_name to_s ","@app exe_name "]}," GLI Commands HelpModules CompactSynopsisFormatter sub_options_doc":{"type":"method","name":"sub_options_doc","children":[],"call":["sub_options empty? "]}," GLI Commands HelpModules CommandHelpFormat flags_and_switches":{"type":"method","name":"flags_and_switches","children":[],"call":["command flags_declaration_order + ","command switches_declaration_order ","command flags_declaration_order ","option associated_command == ","option associated_command ","(send\n  (send\n    (send\n      (lvar :command) :topmost_ancestor) :flags_declaration_order) :+\n  (send\n    (send\n      (lvar :command) :topmost_ancestor) :switches_declaration_order)) select ","command topmost_ancestor flags_declaration_order + ","command topmost_ancestor switches_declaration_order ","command topmost_ancestor ","command topmost_ancestor flags_declaration_order ","app subcommand_option_handling_strategy == ","app subcommand_option_handling_strategy "]}," GLI Commands HelpModules ArgNameFormatter format":{"type":"method","name":"format","children":[],"call":["  + ","arguments_options include? "," String strip == "," String strip "," String "," format_arguments ","desc strip == ","desc strip "," format_argname "," format_arguments  strip == "," format_argname  strip == "," format_arguments  strip "," format_argname  strip "]}," GLI Commands Help skips_around":{"type":"method","name":"skips_around","children":[],"call":[]}," GLI Commands Help skips_post":{"type":"method","name":"skips_post","children":[],"call":[]}," GLI Commands Help skips_pre":{"type":"method","name":"skips_pre","children":[],"call":[]}," GLI Commands Help skips_around=":{"type":"method","name":"skips_around=","children":[],"call":[]}," GLI Commands Help skips_post=":{"type":"method","name":"skips_post=","children":[],"call":[]}," GLI Commands Help skips_pre=":{"type":"method","name":"skips_pre=","children":[],"call":[]}," GLI Commands Doc call_command_method_being_backwards_compatible":{"type":"method","name":"call_command_method_being_backwards_compatible","children":[],"call":["document_listener command ","command_args << ","command arguments_options ","document_listener method arity == ","document_listener method arity ","document_listener method ","command arguments_description ","command long_description ","command description "," Array ","command aliases ","command name ","command examples ","document_listener method arity >= ","command arguments "]}," GLI Commands Doc DocumentListener program_long_desc":{"type":"method","name":"program_long_desc","children":[],"call":[" abstract! "]}," GLI Commands Doc DocumentListener initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI CommandSupport send_declarations_to_parent?":{"type":"method","name":"send_declarations_to_parent?","children":[],"call":["app subcommand_option_handling_strategy == ","app subcommand_option_handling_strategy ","app nil? "," topmost_ancestor parent "," topmost_ancestor "," topmost_ancestor parent  subcommand_option_handling_strategy == "," topmost_ancestor parent  subcommand_option_handling_strategy "," topmost_ancestor parent  nil? "]}," GLI CommandSupport commands_declaration_order":{"type":"method","name":"commands_declaration_order","children":[],"call":[]}," GLI CommandLineToken names_and_aliases":{"type":"method","name":"names_and_aliases","children":[],"call":["(send\n  (self) :name) flatten compact map ","(send\n  (self) :name) flatten compact ","(send\n  (self) :name) flatten "," aliases "," name "]}," GLI CommandFinder find_command_by_partial_name":{"type":"method","name":"find_command_by_partial_name","children":[],"call":["names_to_commands [] ","partial_matches [] ","partial_matches size == ","partial_matches size ","command_name =~ ","names_to_commands keys select ","names_to_commands keys ","commands_with_aliases [] ","commands_with_aliases keys select ","commands_with_aliases keys "]}," GLI CommandFinder find_command":{"type":"method","name":"find_command","children":[],"call":[" raise ","AmbiguousCommand  new ","command_found sort join ","command_found sort ","command_found kind_of? ","UnknownCommand  new "," Array empty? "," Array "," find_command_by_partial_name ","@names_to_commands fetch ","name to_s "," String strip == "," String strip "," String ","found_match sort join ","found_match sort ","found_match empty? ! ","found_match empty? ","found_match kind_of? ","$stderr puts ","found_match name ","ENV  [] == ","ENV  [] "," commands_with_aliases "," options [] "," options "," commands_with_aliases fetch ","name == "," find_command_by_partial_ String strip  ","@ String strip s_to_commands fetch "," String strip  to_s "," find_command_by_partial_name  sort join "," find_command_by_partial_name  sort "," find_command_by_partial_name  empty? ! "," find_command_by_partial_name  empty? "," find_command_by_partial_name  kind_of? "," find_command_by_partial_name  name ","found_match  String strip  "," String strip  == "]}," GLI CommandFinder initialize":{"type":"method","name":"initialize","children":[],"call":["@names_to_commands []= ","command_alias to_s "," Array each "," Array ","command aliases ","command_name to_s ","commands each "," commands_with_aliases= "," expand_with_aliases "," options= ","DEFAULT_OPTIONS  merge "]}," GLI Command name_for_help":{"type":"method","name":"name_for_help","children":[],"call":["command_parent parent ","name_array unshift ","command_parent name to_s ","command_parent name ","command_parent is_a? "," parent "," name to_s "," name ","command_parent parent  parent "," parent  parent ","command_parent parent  name to_s "," parent  name to_s ","command_parent parent  name "," parent  name ","command_parent parent  is_a? "," parent  is_a? "]}," GLI Command has_option?":{"type":"method","name":"has_option?","children":[],"call":["(send\n  (begin\n    (block\n      (send\n        (send\n          (send nil :flags) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases)))) :+\n  (begin\n    (block\n      (send\n        (send\n          (send nil :switches) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases))))) flatten map include? ","(send\n  (begin\n    (block\n      (send\n        (send\n          (send nil :flags) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases)))) :+\n  (begin\n    (block\n      (send\n        (send\n          (send nil :switches) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases))))) flatten map ","(send\n  (begin\n    (block\n      (send\n        (send\n          (send nil :flags) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases)))) :+\n  (begin\n    (block\n      (send\n        (send\n          (send nil :switches) :values) :map)\n      (args\n        (arg :_))\n      (array\n        (send\n          (lvar :_) :name)\n        (send\n          (lvar :_) :aliases))))) flatten ","(block\n  (send\n    (send\n      (send nil :flags) :values) :map)\n  (args\n    (arg :_))\n  (array\n    (send\n      (lvar :_) :name)\n    (send\n      (lvar :_) :aliases))) + ","_ aliases ","_ name "," switches values map "," switches values "," switches "," flags values map "," flags values "," flags ","option gsub ","option gsub  gsub "]}," GLI AppSupport no_message_given?":{"type":"method","name":"no_message_given?","children":[],"call":["ex message == ","ex class name ","ex class ","ex message "]}," GLI AppSupport output_error_message":{"type":"method","name":"output_error_message","children":[],"call":[" stderr puts "," stderr "," no_message_given? ","ex kind_of? "," error_message "]}," GLI AppSupport subcommand_option_handling_strategy":{"type":"method","name":"subcommand_option_handling_strategy","children":[],"call":[]}," GLI AppSupport synopsis_format_type":{"type":"method","name":"synopsis_format_type","children":[],"call":[]}," GLI AppSupport help_text_wrap_type":{"type":"method","name":"help_text_wrap_type","children":[],"call":[]}," GLI AppSupport help_sort_type":{"type":"method","name":"help_sort_type","children":[],"call":[]}," GLI AppSupport commands_declaration_order":{"type":"method","name":"commands_declaration_order","children":[],"call":[]}," GLI AppSupport exe_name":{"type":"method","name":"exe_name","children":[],"call":["File  basename "]}," GLI App load_commands":{"type":"method","name":"load_commands","children":[],"call":[" require ","file =~ ","File  join ","Dir  entries sort each ","Dir  entries sort ","Dir  entries ","File  exists? ","File  exist? ","File  join  =~ "]}," GLI App subcommand_option_handling":{"type":"method","name":"subcommand_option_handling","children":[],"call":[]}," GLI App synopsis_format":{"type":"method","name":"synopsis_format","children":[],"call":[]}," GLI App wrap_help_text":{"type":"method","name":"wrap_help_text","children":[],"call":[]}," GLI App sort_help":{"type":"method","name":"sort_help","children":[],"call":[]}," GLI App hide_commands_without_desc":{"type":"method","name":"hide_commands_without_desc","children":[],"call":["hide nil? "]}," GLI App program_long_desc":{"type":"method","name":"program_long_desc","children":[],"call":[]}," GLI MissingRequiredArgumentsException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI RequestHelp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI RequestHelp exit_code":{"type":"method","name":"exit_code","children":[],"call":[]}," GLI DSL arg":{"type":"method","name":"arg","children":[],"call":["@next_arguments << ","Argument  new "," Array flatten "," Array "]}," GLI Commands HelpModules ArgNameFormatter format_argname":{"type":"method","name":"format_argname","children":[],"call":["  + ","arguments_options include? "," String strip == "," String strip "," String "]}," GLI Commands HelpModules ArgNameFormatter format_arguments":{"type":"method","name":"format_arguments","children":[],"call":["desc + + ","desc + ","arg multiple? ","arg optional? ","arg name ","arguments each ","arguments empty? ","desc + +  + + ","desc + +  + "]}," GLI CommandSupport arguments":{"type":"method","name":"arguments","children":[],"call":[]}," GLI Argument multiple?":{"type":"method","name":"multiple?","children":[],"call":["@options include? "]}," GLI Argument optional?":{"type":"method","name":"optional?","children":[],"call":["@options include? "]}," GLI Argument initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI GLIOptionParser GlobalOptionParser verify_arguments!":{"type":"method","name":"verify_arguments!","children":[],"call":[" raise ","MissingRequiredArgumentsException  new ","arguments size > ","arguments size ","arguments size < ","arg multiple? ","max_number_of_arguments + ","min_number_of_arguments + ","arg optional? ","command arguments each ","command arguments ","command arguments_description empty? ","command arguments_description ","max_number_of_arguments +  + ","min_number_of_arguments +  + "]}," GLI AppSupport argument_handling_strategy":{"type":"method","name":"argument_handling_strategy","children":[],"call":[]}," GLI App arguments":{"type":"method","name":"arguments","children":[],"call":[]}," GLI Switch required?":{"type":"method","name":"required?","children":[],"call":[]}," GLI CommandFinder expand_with_aliases":{"type":"method","name":"expand_with_aliases","children":[],"call":["expanded []= ","command_alias to_s "," Array each "," Array ","command aliases ","command_name to_s ","commands each "]}," GLI AppSupport autocomplete":{"type":"method","name":"autocomplete","children":[],"call":["@autocomplete nil? "]}," GLI App autocomplete_commands":{"type":"method","name":"autocomplete_commands","children":[],"call":[]}," GLI Flag default_value":{"type":"method","name":"default_value","children":[],"call":[]}," GLI Flag multiple?":{"type":"method","name":"multiple?","children":[],"call":[]}," GLI Commands HelpModules CommandHelpFormat format_examples":{"type":"method","name":"format_examples","children":[],"call":["(send\n  (send\n    (lvar :command) :examples) :map) join ","string << ","example fetch ","example [] ","command examples map ","command examples "]}," GLI CommandSupport examples":{"type":"method","name":"examples","children":[],"call":[]}," GLI Command example":{"type":"method","name":"example","children":[],"call":["@examples << ","(pair\n  (sym :example)\n  (lvar :example_invocation)) merge "]}," GLI Command ParentKey to_sym":{"type":"method","name":"to_sym","children":[],"call":["__parent__ to_sym "]}," GLI Commands Scaffold init_git":{"type":"method","name":"init_git","children":[],"call":[]}," GLI Commands HelpModules NoWrappingWrapper wrap":{"type":"method","name":"wrap","children":[],"call":[" String gsub strip "," String gsub "," String "]}," GLI Commands HelpModules NoWrappingWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GLI DSL command_missing":{"type":"method","name":"command_missing","children":[],"call":[]}}